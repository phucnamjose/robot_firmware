
DMA_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019834  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a00  080199c8  080199c8  000299c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a3c8  0801a3c8  00031008  2**0
                  CONTENTS
  4 .ARM          00000008  0801a3c8  0801a3c8  0002a3c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a3d0  0801a3d0  00031008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a3d0  0801a3d0  0002a3d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a3d4  0801a3d4  0002a3d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001008  20000000  0801a3d8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005c5c  20001008  0801b3e0  00031008  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20006c64  0801b3e0  00036c64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00031008  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d7e3  00000000  00000000  00031038  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000621e  00000000  00000000  0005e81b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001d18  00000000  00000000  00064a40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001aa0  00000000  00000000  00066758  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029989  00000000  00000000  000681f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001ef59  00000000  00000000  00091b81  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dc5df  00000000  00000000  000b0ada  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018d0b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008ca0  00000000  00000000  0018d134  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20001008 	.word	0x20001008
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080199ac 	.word	0x080199ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000100c 	.word	0x2000100c
 80001cc:	080199ac 	.word	0x080199ac

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b972 	b.w	8000fa4 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9e08      	ldr	r6, [sp, #32]
 8000cde:	4604      	mov	r4, r0
 8000ce0:	4688      	mov	r8, r1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d14b      	bne.n	8000d7e <__udivmoddi4+0xa6>
 8000ce6:	428a      	cmp	r2, r1
 8000ce8:	4615      	mov	r5, r2
 8000cea:	d967      	bls.n	8000dbc <__udivmoddi4+0xe4>
 8000cec:	fab2 f282 	clz	r2, r2
 8000cf0:	b14a      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf2:	f1c2 0720 	rsb	r7, r2, #32
 8000cf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cfe:	4095      	lsls	r5, r2
 8000d00:	ea47 0803 	orr.w	r8, r7, r3
 8000d04:	4094      	lsls	r4, r2
 8000d06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d0a:	0c23      	lsrs	r3, r4, #16
 8000d0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d10:	fa1f fc85 	uxth.w	ip, r5
 8000d14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x60>
 8000d24:	18eb      	adds	r3, r5, r3
 8000d26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d2a:	f080 811b 	bcs.w	8000f64 <__udivmoddi4+0x28c>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 8118 	bls.w	8000f64 <__udivmoddi4+0x28c>
 8000d34:	3f02      	subs	r7, #2
 8000d36:	442b      	add	r3, r5
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d4c:	45a4      	cmp	ip, r4
 8000d4e:	d909      	bls.n	8000d64 <__udivmoddi4+0x8c>
 8000d50:	192c      	adds	r4, r5, r4
 8000d52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d56:	f080 8107 	bcs.w	8000f68 <__udivmoddi4+0x290>
 8000d5a:	45a4      	cmp	ip, r4
 8000d5c:	f240 8104 	bls.w	8000f68 <__udivmoddi4+0x290>
 8000d60:	3802      	subs	r0, #2
 8000d62:	442c      	add	r4, r5
 8000d64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d68:	eba4 040c 	sub.w	r4, r4, ip
 8000d6c:	2700      	movs	r7, #0
 8000d6e:	b11e      	cbz	r6, 8000d78 <__udivmoddi4+0xa0>
 8000d70:	40d4      	lsrs	r4, r2
 8000d72:	2300      	movs	r3, #0
 8000d74:	e9c6 4300 	strd	r4, r3, [r6]
 8000d78:	4639      	mov	r1, r7
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0xbe>
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	f000 80eb 	beq.w	8000f5e <__udivmoddi4+0x286>
 8000d88:	2700      	movs	r7, #0
 8000d8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d8e:	4638      	mov	r0, r7
 8000d90:	4639      	mov	r1, r7
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	fab3 f783 	clz	r7, r3
 8000d9a:	2f00      	cmp	r7, #0
 8000d9c:	d147      	bne.n	8000e2e <__udivmoddi4+0x156>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d302      	bcc.n	8000da8 <__udivmoddi4+0xd0>
 8000da2:	4282      	cmp	r2, r0
 8000da4:	f200 80fa 	bhi.w	8000f9c <__udivmoddi4+0x2c4>
 8000da8:	1a84      	subs	r4, r0, r2
 8000daa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	4698      	mov	r8, r3
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	d0e0      	beq.n	8000d78 <__udivmoddi4+0xa0>
 8000db6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dba:	e7dd      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000dbc:	b902      	cbnz	r2, 8000dc0 <__udivmoddi4+0xe8>
 8000dbe:	deff      	udf	#255	; 0xff
 8000dc0:	fab2 f282 	clz	r2, r2
 8000dc4:	2a00      	cmp	r2, #0
 8000dc6:	f040 808f 	bne.w	8000ee8 <__udivmoddi4+0x210>
 8000dca:	1b49      	subs	r1, r1, r5
 8000dcc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dd0:	fa1f f885 	uxth.w	r8, r5
 8000dd4:	2701      	movs	r7, #1
 8000dd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dda:	0c23      	lsrs	r3, r4, #16
 8000ddc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000de0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000de4:	fb08 f10c 	mul.w	r1, r8, ip
 8000de8:	4299      	cmp	r1, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x124>
 8000dec:	18eb      	adds	r3, r5, r3
 8000dee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x122>
 8000df4:	4299      	cmp	r1, r3
 8000df6:	f200 80cd 	bhi.w	8000f94 <__udivmoddi4+0x2bc>
 8000dfa:	4684      	mov	ip, r0
 8000dfc:	1a59      	subs	r1, r3, r1
 8000dfe:	b2a3      	uxth	r3, r4
 8000e00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e0c:	fb08 f800 	mul.w	r8, r8, r0
 8000e10:	45a0      	cmp	r8, r4
 8000e12:	d907      	bls.n	8000e24 <__udivmoddi4+0x14c>
 8000e14:	192c      	adds	r4, r5, r4
 8000e16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x14a>
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	f200 80b6 	bhi.w	8000f8e <__udivmoddi4+0x2b6>
 8000e22:	4618      	mov	r0, r3
 8000e24:	eba4 0408 	sub.w	r4, r4, r8
 8000e28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e2c:	e79f      	b.n	8000d6e <__udivmoddi4+0x96>
 8000e2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e32:	40bb      	lsls	r3, r7
 8000e34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e4c:	4325      	orrs	r5, r4
 8000e4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e52:	0c2c      	lsrs	r4, r5, #16
 8000e54:	fb08 3319 	mls	r3, r8, r9, r3
 8000e58:	fa1f fa8e 	uxth.w	sl, lr
 8000e5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e60:	fb09 f40a 	mul.w	r4, r9, sl
 8000e64:	429c      	cmp	r4, r3
 8000e66:	fa02 f207 	lsl.w	r2, r2, r7
 8000e6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e6e:	d90b      	bls.n	8000e88 <__udivmoddi4+0x1b0>
 8000e70:	eb1e 0303 	adds.w	r3, lr, r3
 8000e74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e78:	f080 8087 	bcs.w	8000f8a <__udivmoddi4+0x2b2>
 8000e7c:	429c      	cmp	r4, r3
 8000e7e:	f240 8084 	bls.w	8000f8a <__udivmoddi4+0x2b2>
 8000e82:	f1a9 0902 	sub.w	r9, r9, #2
 8000e86:	4473      	add	r3, lr
 8000e88:	1b1b      	subs	r3, r3, r4
 8000e8a:	b2ad      	uxth	r5, r5
 8000e8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e90:	fb08 3310 	mls	r3, r8, r0, r3
 8000e94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e9c:	45a2      	cmp	sl, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x1da>
 8000ea0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ea4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ea8:	d26b      	bcs.n	8000f82 <__udivmoddi4+0x2aa>
 8000eaa:	45a2      	cmp	sl, r4
 8000eac:	d969      	bls.n	8000f82 <__udivmoddi4+0x2aa>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	4474      	add	r4, lr
 8000eb2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eba:	eba4 040a 	sub.w	r4, r4, sl
 8000ebe:	454c      	cmp	r4, r9
 8000ec0:	46c2      	mov	sl, r8
 8000ec2:	464b      	mov	r3, r9
 8000ec4:	d354      	bcc.n	8000f70 <__udivmoddi4+0x298>
 8000ec6:	d051      	beq.n	8000f6c <__udivmoddi4+0x294>
 8000ec8:	2e00      	cmp	r6, #0
 8000eca:	d069      	beq.n	8000fa0 <__udivmoddi4+0x2c8>
 8000ecc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ed0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ed4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ed8:	40fd      	lsrs	r5, r7
 8000eda:	40fc      	lsrs	r4, r7
 8000edc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ee0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ee4:	2700      	movs	r7, #0
 8000ee6:	e747      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000ee8:	f1c2 0320 	rsb	r3, r2, #32
 8000eec:	fa20 f703 	lsr.w	r7, r0, r3
 8000ef0:	4095      	lsls	r5, r2
 8000ef2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ef6:	fa21 f303 	lsr.w	r3, r1, r3
 8000efa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000efe:	4338      	orrs	r0, r7
 8000f00:	0c01      	lsrs	r1, r0, #16
 8000f02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f06:	fa1f f885 	uxth.w	r8, r5
 8000f0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb07 f308 	mul.w	r3, r7, r8
 8000f16:	428b      	cmp	r3, r1
 8000f18:	fa04 f402 	lsl.w	r4, r4, r2
 8000f1c:	d907      	bls.n	8000f2e <__udivmoddi4+0x256>
 8000f1e:	1869      	adds	r1, r5, r1
 8000f20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f24:	d22f      	bcs.n	8000f86 <__udivmoddi4+0x2ae>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	d92d      	bls.n	8000f86 <__udivmoddi4+0x2ae>
 8000f2a:	3f02      	subs	r7, #2
 8000f2c:	4429      	add	r1, r5
 8000f2e:	1acb      	subs	r3, r1, r3
 8000f30:	b281      	uxth	r1, r0
 8000f32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f3e:	fb00 f308 	mul.w	r3, r0, r8
 8000f42:	428b      	cmp	r3, r1
 8000f44:	d907      	bls.n	8000f56 <__udivmoddi4+0x27e>
 8000f46:	1869      	adds	r1, r5, r1
 8000f48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f4c:	d217      	bcs.n	8000f7e <__udivmoddi4+0x2a6>
 8000f4e:	428b      	cmp	r3, r1
 8000f50:	d915      	bls.n	8000f7e <__udivmoddi4+0x2a6>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4429      	add	r1, r5
 8000f56:	1ac9      	subs	r1, r1, r3
 8000f58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f5c:	e73b      	b.n	8000dd6 <__udivmoddi4+0xfe>
 8000f5e:	4637      	mov	r7, r6
 8000f60:	4630      	mov	r0, r6
 8000f62:	e709      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000f64:	4607      	mov	r7, r0
 8000f66:	e6e7      	b.n	8000d38 <__udivmoddi4+0x60>
 8000f68:	4618      	mov	r0, r3
 8000f6a:	e6fb      	b.n	8000d64 <__udivmoddi4+0x8c>
 8000f6c:	4541      	cmp	r1, r8
 8000f6e:	d2ab      	bcs.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f74:	eb69 020e 	sbc.w	r2, r9, lr
 8000f78:	3801      	subs	r0, #1
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	e7a4      	b.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f7e:	4660      	mov	r0, ip
 8000f80:	e7e9      	b.n	8000f56 <__udivmoddi4+0x27e>
 8000f82:	4618      	mov	r0, r3
 8000f84:	e795      	b.n	8000eb2 <__udivmoddi4+0x1da>
 8000f86:	4667      	mov	r7, ip
 8000f88:	e7d1      	b.n	8000f2e <__udivmoddi4+0x256>
 8000f8a:	4681      	mov	r9, r0
 8000f8c:	e77c      	b.n	8000e88 <__udivmoddi4+0x1b0>
 8000f8e:	3802      	subs	r0, #2
 8000f90:	442c      	add	r4, r5
 8000f92:	e747      	b.n	8000e24 <__udivmoddi4+0x14c>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	442b      	add	r3, r5
 8000f9a:	e72f      	b.n	8000dfc <__udivmoddi4+0x124>
 8000f9c:	4638      	mov	r0, r7
 8000f9e:	e708      	b.n	8000db2 <__udivmoddi4+0xda>
 8000fa0:	4637      	mov	r7, r6
 8000fa2:	e6e9      	b.n	8000d78 <__udivmoddi4+0xa0>

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <commandRead>:
												"STOP",
												"ERRO",
												"OKAY"};


Robot_CommandTypedef 	commandRead	(uint8_t *message, int32_t *id_command, DUTY_Command_TypeDef *duty_cmd) {
 8000fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fac:	b0b4      	sub	sp, #208	; 0xd0
 8000fae:	af0a      	add	r7, sp, #40	; 0x28
 8000fb0:	60f8      	str	r0, [r7, #12]
 8000fb2:	60b9      	str	r1, [r7, #8]
 8000fb4:	607a      	str	r2, [r7, #4]
	char command[10];
	char para[70];
	int32_t result;
	memset(para, 0, 70*sizeof(char));
 8000fb6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000fba:	2246      	movs	r2, #70	; 0x46
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f012 fe72 	bl	8013ca8 <memset>
	result = sscanf((char*)message, "%d %s %70c",(int*) id_command, command, para);
 8000fc4:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8000fc8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000fcc:	9300      	str	r3, [sp, #0]
 8000fce:	4613      	mov	r3, r2
 8000fd0:	68ba      	ldr	r2, [r7, #8]
 8000fd2:	499e      	ldr	r1, [pc, #632]	; (800124c <commandRead+0x2a4>)
 8000fd4:	68f8      	ldr	r0, [r7, #12]
 8000fd6:	f013 fdbf 	bl	8014b58 <siscanf>
 8000fda:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
	duty_cmd->id_command = *id_command;
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	605a      	str	r2, [r3, #4]
	// Stop Now
	if ( 0 == strcmp( command, ROBOTCOMMAND[CMD_STOPNOW])) {
 8000fe6:	4b9a      	ldr	r3, [pc, #616]	; (8001250 <commandRead+0x2a8>)
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000fee:	4611      	mov	r1, r2
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff f8ed 	bl	80001d0 <strcmp>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d104      	bne.n	8001006 <commandRead+0x5e>
		duty_cmd->robot_mode = SCARA_MODE_STOP;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2200      	movs	r2, #0
 8001000:	701a      	strb	r2, [r3, #0]
		return CMD_STOPNOW;
 8001002:	2300      	movs	r3, #0
 8001004:	e260      	b.n	80014c8 <commandRead+0x520>

	// Scan Limit
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_SCAN_LIMIT])) {
 8001006:	4b92      	ldr	r3, [pc, #584]	; (8001250 <commandRead+0x2a8>)
 8001008:	685a      	ldr	r2, [r3, #4]
 800100a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800100e:	4611      	mov	r1, r2
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff f8dd 	bl	80001d0 <strcmp>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d104      	bne.n	8001026 <commandRead+0x7e>
		duty_cmd->robot_mode = SCARA_MODE_SCAN;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2201      	movs	r2, #1
 8001020:	701a      	strb	r2, [r3, #0]
		return CMD_SCAN_LIMIT;
 8001022:	2301      	movs	r3, #1
 8001024:	e250      	b.n	80014c8 <commandRead+0x520>

	// Move Home
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_MOVE_HOME])) {
 8001026:	4b8a      	ldr	r3, [pc, #552]	; (8001250 <commandRead+0x2a8>)
 8001028:	689a      	ldr	r2, [r3, #8]
 800102a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800102e:	4611      	mov	r1, r2
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff f8cd 	bl	80001d0 <strcmp>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d13f      	bne.n	80010bc <commandRead+0x114>
		if (3 == result) {
 800103c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001040:	2b03      	cmp	r3, #3
 8001042:	d112      	bne.n	800106a <commandRead+0xc2>
			result = sscanf( para, "%lf %lf",
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f103 02f8 	add.w	r2, r3, #248	; 0xf8
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001050:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8001054:	497f      	ldr	r1, [pc, #508]	; (8001254 <commandRead+0x2ac>)
 8001056:	f013 fd7f 	bl	8014b58 <siscanf>
 800105a:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
							&(duty_cmd->v_factor),
							&(duty_cmd->a_factor));
			if (2 != result) {
 800105e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001062:	2b02      	cmp	r3, #2
 8001064:	d003      	beq.n	800106e <commandRead+0xc6>
				return CMD_ERROR;
 8001066:	230b      	movs	r3, #11
 8001068:	e22e      	b.n	80014c8 <commandRead+0x520>
			}
		} else {
			return CMD_ERROR;
 800106a:	230b      	movs	r3, #11
 800106c:	e22c      	b.n	80014c8 <commandRead+0x520>
		}
		duty_cmd->target_point.x = 250;
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	f04f 0300 	mov.w	r3, #0
 8001074:	4c78      	ldr	r4, [pc, #480]	; (8001258 <commandRead+0x2b0>)
 8001076:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
		duty_cmd->target_point.y = -200;
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	f04f 0300 	mov.w	r3, #0
 8001080:	4c76      	ldr	r4, [pc, #472]	; (800125c <commandRead+0x2b4>)
 8001082:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
		duty_cmd->target_point.z = 120;
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	f04f 0300 	mov.w	r3, #0
 800108c:	4c74      	ldr	r4, [pc, #464]	; (8001260 <commandRead+0x2b8>)
 800108e:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
		duty_cmd->target_point.roll = 0;
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	f04f 0300 	mov.w	r3, #0
 8001098:	f04f 0400 	mov.w	r4, #0
 800109c:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68

		duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2200      	movs	r2, #0
 80010a4:	735a      	strb	r2, [r3, #13]
		duty_cmd->space_type = DUTY_SPACE_JOINT;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2201      	movs	r2, #1
 80010aa:	725a      	strb	r2, [r3, #9]
		duty_cmd->joint_type = DUTY_JOINT_4DOF;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2201      	movs	r2, #1
 80010b0:	72da      	strb	r2, [r3, #11]
		duty_cmd->robot_mode = SCARA_MODE_DUTY;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2202      	movs	r2, #2
 80010b6:	701a      	strb	r2, [r3, #0]
		return CMD_MOVE_HOME;
 80010b8:	2302      	movs	r3, #2
 80010ba:	e205      	b.n	80014c8 <commandRead+0x520>

	// Move Line
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_MOVE_LINE])) {
 80010bc:	4b64      	ldr	r3, [pc, #400]	; (8001250 <commandRead+0x2a8>)
 80010be:	68da      	ldr	r2, [r3, #12]
 80010c0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80010c4:	4611      	mov	r1, r2
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff f882 	bl	80001d0 <strcmp>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d151      	bne.n	8001176 <commandRead+0x1ce>
		if (3 == result) {
 80010d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80010d6:	2b03      	cmp	r3, #3
 80010d8:	d149      	bne.n	800116e <commandRead+0x1c6>
			double temp_fl;
			int8_t mode_init;
			result = sscanf( para, "%lf %lf %lf %lf %lf %d %lf",
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	f103 0550 	add.w	r5, r3, #80	; 0x50
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	f103 0658 	add.w	r6, r3, #88	; 0x58
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	3360      	adds	r3, #96	; 0x60
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	3268      	adds	r2, #104	; 0x68
 80010ee:	6879      	ldr	r1, [r7, #4]
 80010f0:	31f8      	adds	r1, #248	; 0xf8
 80010f2:	f107 0450 	add.w	r4, r7, #80	; 0x50
 80010f6:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80010fa:	9004      	str	r0, [sp, #16]
 80010fc:	f107 0047 	add.w	r0, r7, #71	; 0x47
 8001100:	9003      	str	r0, [sp, #12]
 8001102:	9102      	str	r1, [sp, #8]
 8001104:	9201      	str	r2, [sp, #4]
 8001106:	9300      	str	r3, [sp, #0]
 8001108:	4633      	mov	r3, r6
 800110a:	462a      	mov	r2, r5
 800110c:	4955      	ldr	r1, [pc, #340]	; (8001264 <commandRead+0x2bc>)
 800110e:	4620      	mov	r0, r4
 8001110:	f013 fd22 	bl	8014b58 <siscanf>
 8001114:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
							&(duty_cmd->target_point.roll),
							&(duty_cmd->v_factor),
							(int *)&mode_init,
							&temp_fl);

			if (7 != result) {
 8001118:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800111c:	2b07      	cmp	r3, #7
 800111e:	d001      	beq.n	8001124 <commandRead+0x17c>
				return CMD_ERROR;
 8001120:	230b      	movs	r3, #11
 8001122:	e1d1      	b.n	80014c8 <commandRead+0x520>
			}
			duty_cmd->path_type = DUTY_PATH_LINE;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2200      	movs	r2, #0
 8001128:	729a      	strb	r2, [r3, #10]
			duty_cmd->space_type = DUTY_SPACE_TASK;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2200      	movs	r2, #0
 800112e:	725a      	strb	r2, [r3, #9]
			duty_cmd->robot_mode = SCARA_MODE_DUTY;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2202      	movs	r2, #2
 8001134:	701a      	strb	r2, [r3, #0]

			if ( DUTY_MODE_INIT_QVA == mode_init) {
 8001136:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800113a:	2b00      	cmp	r3, #0
 800113c:	d108      	bne.n	8001150 <commandRead+0x1a8>
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2200      	movs	r2, #0
 8001142:	735a      	strb	r2, [r3, #13]
				duty_cmd->a_factor		= temp_fl;
 8001144:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8001148:	687a      	ldr	r2, [r7, #4]
 800114a:	e9c2 3440 	strd	r3, r4, [r2, #256]	; 0x100
 800114e:	e010      	b.n	8001172 <commandRead+0x1ca>
			} else if ( DUTY_MODE_INIT_QVT == mode_init) {
 8001150:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8001154:	2b01      	cmp	r3, #1
 8001156:	d108      	bne.n	800116a <commandRead+0x1c2>
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2201      	movs	r2, #1
 800115c:	735a      	strb	r2, [r3, #13]
				duty_cmd->time_total	= temp_fl;
 800115e:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8001162:	687a      	ldr	r2, [r7, #4]
 8001164:	e9c2 3408 	strd	r3, r4, [r2, #32]
 8001168:	e003      	b.n	8001172 <commandRead+0x1ca>
			} else {
				return CMD_ERROR;
 800116a:	230b      	movs	r3, #11
 800116c:	e1ac      	b.n	80014c8 <commandRead+0x520>
			}
		} else {
			return CMD_ERROR;
 800116e:	230b      	movs	r3, #11
 8001170:	e1aa      	b.n	80014c8 <commandRead+0x520>
		}
		return CMD_MOVE_LINE;
 8001172:	2303      	movs	r3, #3
 8001174:	e1a8      	b.n	80014c8 <commandRead+0x520>

	// Move Circle
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_MOVE_CIRCLE])) {
 8001176:	4b36      	ldr	r3, [pc, #216]	; (8001250 <commandRead+0x2a8>)
 8001178:	691a      	ldr	r2, [r3, #16]
 800117a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800117e:	4611      	mov	r1, r2
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff f825 	bl	80001d0 <strcmp>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d16f      	bne.n	800126c <commandRead+0x2c4>
		if (3 == result) {
 800118c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001190:	2b03      	cmp	r3, #3
 8001192:	d157      	bne.n	8001244 <commandRead+0x29c>
			double temp_fl;
			int8_t mode_init;
			result = sscanf( para, "%lf %lf %lf %lf %lf %lf %lf %d %lf %d %lf",
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f103 0e50 	add.w	lr, r3, #80	; 0x50
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	f103 0858 	add.w	r8, r3, #88	; 0x58
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	3360      	adds	r3, #96	; 0x60
 80011a4:	603b      	str	r3, [r7, #0]
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	3268      	adds	r2, #104	; 0x68
 80011aa:	6879      	ldr	r1, [r7, #4]
 80011ac:	31b8      	adds	r1, #184	; 0xb8
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	30c0      	adds	r0, #192	; 0xc0
 80011b2:	687c      	ldr	r4, [r7, #4]
 80011b4:	34c8      	adds	r4, #200	; 0xc8
							&(duty_cmd->target_point.z),
							&(duty_cmd->target_point.roll),
							&(duty_cmd->sub_point.x),
							&(duty_cmd->sub_point.y),
							&(duty_cmd->sub_point.z),
							(int *)&(duty_cmd->sub_para_int), // dir
 80011b6:	687d      	ldr	r5, [r7, #4]
 80011b8:	3510      	adds	r5, #16
			result = sscanf( para, "%lf %lf %lf %lf %lf %lf %lf %d %lf %d %lf",
 80011ba:	687e      	ldr	r6, [r7, #4]
 80011bc:	36f8      	adds	r6, #248	; 0xf8
 80011be:	f107 0c50 	add.w	ip, r7, #80	; 0x50
 80011c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80011c6:	9308      	str	r3, [sp, #32]
 80011c8:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80011cc:	9307      	str	r3, [sp, #28]
 80011ce:	9606      	str	r6, [sp, #24]
 80011d0:	9505      	str	r5, [sp, #20]
 80011d2:	9404      	str	r4, [sp, #16]
 80011d4:	9003      	str	r0, [sp, #12]
 80011d6:	9102      	str	r1, [sp, #8]
 80011d8:	9201      	str	r2, [sp, #4]
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	9300      	str	r3, [sp, #0]
 80011de:	4643      	mov	r3, r8
 80011e0:	4672      	mov	r2, lr
 80011e2:	4921      	ldr	r1, [pc, #132]	; (8001268 <commandRead+0x2c0>)
 80011e4:	4660      	mov	r0, ip
 80011e6:	f013 fcb7 	bl	8014b58 <siscanf>
 80011ea:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
							&(duty_cmd->v_factor),
							(int *)&mode_init,
							&temp_fl);

			if (11 != result) {
 80011ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80011f2:	2b0b      	cmp	r3, #11
 80011f4:	d001      	beq.n	80011fa <commandRead+0x252>
				return CMD_ERROR;
 80011f6:	230b      	movs	r3, #11
 80011f8:	e166      	b.n	80014c8 <commandRead+0x520>
			}
			duty_cmd->path_type = DUTY_PATH_CIRCLE;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2201      	movs	r2, #1
 80011fe:	729a      	strb	r2, [r3, #10]
			duty_cmd->space_type = DUTY_SPACE_TASK;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2200      	movs	r2, #0
 8001204:	725a      	strb	r2, [r3, #9]
			duty_cmd->robot_mode = SCARA_MODE_DUTY;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2202      	movs	r2, #2
 800120a:	701a      	strb	r2, [r3, #0]

			if ( DUTY_MODE_INIT_QVA == mode_init) {
 800120c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001210:	2b00      	cmp	r3, #0
 8001212:	d108      	bne.n	8001226 <commandRead+0x27e>
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2200      	movs	r2, #0
 8001218:	735a      	strb	r2, [r3, #13]
				duty_cmd->a_factor		= temp_fl;
 800121a:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	e9c2 3440 	strd	r3, r4, [r2, #256]	; 0x100
 8001224:	e010      	b.n	8001248 <commandRead+0x2a0>
			} else if ( DUTY_MODE_INIT_QVT == mode_init) {
 8001226:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800122a:	2b01      	cmp	r3, #1
 800122c:	d108      	bne.n	8001240 <commandRead+0x298>
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2201      	movs	r2, #1
 8001232:	735a      	strb	r2, [r3, #13]
				duty_cmd->time_total	= temp_fl;
 8001234:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001238:	687a      	ldr	r2, [r7, #4]
 800123a:	e9c2 3408 	strd	r3, r4, [r2, #32]
 800123e:	e003      	b.n	8001248 <commandRead+0x2a0>
			} else {
				return CMD_ERROR;
 8001240:	230b      	movs	r3, #11
 8001242:	e141      	b.n	80014c8 <commandRead+0x520>
			}
		} else {
			return CMD_ERROR;
 8001244:	230b      	movs	r3, #11
 8001246:	e13f      	b.n	80014c8 <commandRead+0x520>
		}
		return CMD_MOVE_CIRCLE;
 8001248:	2304      	movs	r3, #4
 800124a:	e13d      	b.n	80014c8 <commandRead+0x520>
 800124c:	08019a58 	.word	0x08019a58
 8001250:	20000000 	.word	0x20000000
 8001254:	08019a64 	.word	0x08019a64
 8001258:	406f4000 	.word	0x406f4000
 800125c:	c0690000 	.word	0xc0690000
 8001260:	405e0000 	.word	0x405e0000
 8001264:	08019a6c 	.word	0x08019a6c
 8001268:	08019a88 	.word	0x08019a88

	// Move Joint
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_MOVE_JOINT])) {
 800126c:	4b99      	ldr	r3, [pc, #612]	; (80014d4 <commandRead+0x52c>)
 800126e:	695a      	ldr	r2, [r3, #20]
 8001270:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001274:	4611      	mov	r1, r2
 8001276:	4618      	mov	r0, r3
 8001278:	f7fe ffaa 	bl	80001d0 <strcmp>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d151      	bne.n	8001326 <commandRead+0x37e>
		if (3 == result) {
 8001282:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001286:	2b03      	cmp	r3, #3
 8001288:	d149      	bne.n	800131e <commandRead+0x376>
			double temp_fl;
			int8_t mode_init;
			result = sscanf( para, "%lf %lf %lf %lf %lf %d %lf",
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f103 0658 	add.w	r6, r3, #88	; 0x58
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	3360      	adds	r3, #96	; 0x60
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	3268      	adds	r2, #104	; 0x68
 800129e:	6879      	ldr	r1, [r7, #4]
 80012a0:	31f8      	adds	r1, #248	; 0xf8
 80012a2:	f107 0450 	add.w	r4, r7, #80	; 0x50
 80012a6:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80012aa:	9004      	str	r0, [sp, #16]
 80012ac:	f107 0027 	add.w	r0, r7, #39	; 0x27
 80012b0:	9003      	str	r0, [sp, #12]
 80012b2:	9102      	str	r1, [sp, #8]
 80012b4:	9201      	str	r2, [sp, #4]
 80012b6:	9300      	str	r3, [sp, #0]
 80012b8:	4633      	mov	r3, r6
 80012ba:	462a      	mov	r2, r5
 80012bc:	4986      	ldr	r1, [pc, #536]	; (80014d8 <commandRead+0x530>)
 80012be:	4620      	mov	r0, r4
 80012c0:	f013 fc4a 	bl	8014b58 <siscanf>
 80012c4:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
							&(duty_cmd->target_point.roll),
							&(duty_cmd->v_factor),
							(int *)&mode_init,
							&temp_fl);

			if (7 != result) {
 80012c8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80012cc:	2b07      	cmp	r3, #7
 80012ce:	d001      	beq.n	80012d4 <commandRead+0x32c>
				return CMD_ERROR;
 80012d0:	230b      	movs	r3, #11
 80012d2:	e0f9      	b.n	80014c8 <commandRead+0x520>
			}
			duty_cmd->space_type = DUTY_SPACE_JOINT;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2201      	movs	r2, #1
 80012d8:	725a      	strb	r2, [r3, #9]
			duty_cmd->joint_type = DUTY_JOINT_4DOF;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2201      	movs	r2, #1
 80012de:	72da      	strb	r2, [r3, #11]
			duty_cmd->robot_mode = SCARA_MODE_DUTY;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2202      	movs	r2, #2
 80012e4:	701a      	strb	r2, [r3, #0]

			if ( DUTY_MODE_INIT_QVA == mode_init) {
 80012e6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d108      	bne.n	8001300 <commandRead+0x358>
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2200      	movs	r2, #0
 80012f2:	735a      	strb	r2, [r3, #13]
				duty_cmd->a_factor		= temp_fl;
 80012f4:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80012f8:	687a      	ldr	r2, [r7, #4]
 80012fa:	e9c2 3440 	strd	r3, r4, [r2, #256]	; 0x100
 80012fe:	e010      	b.n	8001322 <commandRead+0x37a>
			} else if ( DUTY_MODE_INIT_QVT == mode_init) {
 8001300:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001304:	2b01      	cmp	r3, #1
 8001306:	d108      	bne.n	800131a <commandRead+0x372>
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2201      	movs	r2, #1
 800130c:	735a      	strb	r2, [r3, #13]
				duty_cmd->time_total	= temp_fl;
 800130e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	e9c2 3408 	strd	r3, r4, [r2, #32]
 8001318:	e003      	b.n	8001322 <commandRead+0x37a>
			} else {
				return CMD_ERROR;
 800131a:	230b      	movs	r3, #11
 800131c:	e0d4      	b.n	80014c8 <commandRead+0x520>
			}
		} else {
			return CMD_ERROR;
 800131e:	230b      	movs	r3, #11
 8001320:	e0d2      	b.n	80014c8 <commandRead+0x520>
		}
		return CMD_MOVE_JOINT;
 8001322:	2305      	movs	r3, #5
 8001324:	e0d0      	b.n	80014c8 <commandRead+0x520>

	// Rotate Single
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_ROTATE_SINGLE])) {
 8001326:	4b6b      	ldr	r3, [pc, #428]	; (80014d4 <commandRead+0x52c>)
 8001328:	699a      	ldr	r2, [r3, #24]
 800132a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800132e:	4611      	mov	r1, r2
 8001330:	4618      	mov	r0, r3
 8001332:	f7fe ff4d 	bl	80001d0 <strcmp>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d14a      	bne.n	80013d2 <commandRead+0x42a>
		if (3 == result) {
 800133c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001340:	2b03      	cmp	r3, #3
 8001342:	d142      	bne.n	80013ca <commandRead+0x422>
			double temp_fl;
			int8_t mode_init;
			result = sscanf( para, "%d %lf %lf %d %lf",
							(int *)&(duty_cmd->sub_para_int),
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f103 0110 	add.w	r1, r3, #16
			result = sscanf( para, "%d %lf %lf %d %lf",
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f103 0418 	add.w	r4, r3, #24
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	33f8      	adds	r3, #248	; 0xf8
 8001354:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8001358:	f107 0218 	add.w	r2, r7, #24
 800135c:	9202      	str	r2, [sp, #8]
 800135e:	f107 0217 	add.w	r2, r7, #23
 8001362:	9201      	str	r2, [sp, #4]
 8001364:	9300      	str	r3, [sp, #0]
 8001366:	4623      	mov	r3, r4
 8001368:	460a      	mov	r2, r1
 800136a:	495c      	ldr	r1, [pc, #368]	; (80014dc <commandRead+0x534>)
 800136c:	f013 fbf4 	bl	8014b58 <siscanf>
 8001370:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
							&(duty_cmd->sub_para_double),
							&(duty_cmd->v_factor),
							(int *)&mode_init,
							&temp_fl);

			if (5 != result) {
 8001374:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001378:	2b05      	cmp	r3, #5
 800137a:	d001      	beq.n	8001380 <commandRead+0x3d8>
				return CMD_ERROR;
 800137c:	230b      	movs	r3, #11
 800137e:	e0a3      	b.n	80014c8 <commandRead+0x520>
			}
			duty_cmd->space_type = DUTY_SPACE_JOINT;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2201      	movs	r2, #1
 8001384:	725a      	strb	r2, [r3, #9]
			duty_cmd->joint_type = DUTY_JOINT_SINGLE;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2200      	movs	r2, #0
 800138a:	72da      	strb	r2, [r3, #11]
			duty_cmd->robot_mode = SCARA_MODE_DUTY;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2202      	movs	r2, #2
 8001390:	701a      	strb	r2, [r3, #0]

			if ( DUTY_MODE_INIT_QVA == mode_init) {
 8001392:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d108      	bne.n	80013ac <commandRead+0x404>
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2200      	movs	r2, #0
 800139e:	735a      	strb	r2, [r3, #13]
				duty_cmd->a_factor		= temp_fl;
 80013a0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80013a4:	687a      	ldr	r2, [r7, #4]
 80013a6:	e9c2 3440 	strd	r3, r4, [r2, #256]	; 0x100
 80013aa:	e010      	b.n	80013ce <commandRead+0x426>
			} else if ( DUTY_MODE_INIT_QVT == mode_init) {
 80013ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d108      	bne.n	80013c6 <commandRead+0x41e>
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2201      	movs	r2, #1
 80013b8:	735a      	strb	r2, [r3, #13]
				duty_cmd->time_total	= temp_fl;
 80013ba:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	e9c2 3408 	strd	r3, r4, [r2, #32]
 80013c4:	e003      	b.n	80013ce <commandRead+0x426>
			} else {
				return CMD_ERROR;
 80013c6:	230b      	movs	r3, #11
 80013c8:	e07e      	b.n	80014c8 <commandRead+0x520>
			}
		} else {
			return CMD_ERROR;
 80013ca:	230b      	movs	r3, #11
 80013cc:	e07c      	b.n	80014c8 <commandRead+0x520>
		}
		return CMD_ROTATE_SINGLE;
 80013ce:	2306      	movs	r3, #6
 80013d0:	e07a      	b.n	80014c8 <commandRead+0x520>

	// Set Output
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_OUTPUT])) {
 80013d2:	4b40      	ldr	r3, [pc, #256]	; (80014d4 <commandRead+0x52c>)
 80013d4:	69da      	ldr	r2, [r3, #28]
 80013d6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80013da:	4611      	mov	r1, r2
 80013dc:	4618      	mov	r0, r3
 80013de:	f7fe fef7 	bl	80001d0 <strcmp>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d112      	bne.n	800140e <commandRead+0x466>
		result = sscanf( para, "%d",(int *)&(duty_cmd->sub_para_int));
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f103 0210 	add.w	r2, r3, #16
 80013ee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80013f2:	493b      	ldr	r1, [pc, #236]	; (80014e0 <commandRead+0x538>)
 80013f4:	4618      	mov	r0, r3
 80013f6:	f013 fbaf 	bl	8014b58 <siscanf>
 80013fa:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4

		if (1 != result) {
 80013fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001402:	2b01      	cmp	r3, #1
 8001404:	d001      	beq.n	800140a <commandRead+0x462>
			return CMD_ERROR;
 8001406:	230b      	movs	r3, #11
 8001408:	e05e      	b.n	80014c8 <commandRead+0x520>
		}

		return CMD_OUTPUT;
 800140a:	2307      	movs	r3, #7
 800140c:	e05c      	b.n	80014c8 <commandRead+0x520>

	// Read Status
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_READ_STATUS])) {
 800140e:	4b31      	ldr	r3, [pc, #196]	; (80014d4 <commandRead+0x52c>)
 8001410:	6a1a      	ldr	r2, [r3, #32]
 8001412:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001416:	4611      	mov	r1, r2
 8001418:	4618      	mov	r0, r3
 800141a:	f7fe fed9 	bl	80001d0 <strcmp>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d101      	bne.n	8001428 <commandRead+0x480>
		return CMD_READ_STATUS;
 8001424:	2308      	movs	r3, #8
 8001426:	e04f      	b.n	80014c8 <commandRead+0x520>

	// Read Position
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_READ_POSITION])) {
 8001428:	4b2a      	ldr	r3, [pc, #168]	; (80014d4 <commandRead+0x52c>)
 800142a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800142c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001430:	4611      	mov	r1, r2
 8001432:	4618      	mov	r0, r3
 8001434:	f7fe fecc 	bl	80001d0 <strcmp>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d101      	bne.n	8001442 <commandRead+0x49a>
			return CMD_READ_POSITION;
 800143e:	2309      	movs	r3, #9
 8001440:	e042      	b.n	80014c8 <commandRead+0x520>

	// Setting
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_SETTING])) {
 8001442:	4b24      	ldr	r3, [pc, #144]	; (80014d4 <commandRead+0x52c>)
 8001444:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001446:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800144a:	4611      	mov	r1, r2
 800144c:	4618      	mov	r0, r3
 800144e:	f7fe febf 	bl	80001d0 <strcmp>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d136      	bne.n	80014c6 <commandRead+0x51e>
		int8_t mode_trajec;
		int8_t mode_coordinate;
		result = sscanf( para, "%d %d",
 8001458:	f107 0316 	add.w	r3, r7, #22
 800145c:	f107 0215 	add.w	r2, r7, #21
 8001460:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8001464:	491f      	ldr	r1, [pc, #124]	; (80014e4 <commandRead+0x53c>)
 8001466:	f013 fb77 	bl	8014b58 <siscanf>
 800146a:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
						(int *)&mode_coordinate,
						(int *)&mode_trajec);

		if (2 != result) {
 800146e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001472:	2b02      	cmp	r3, #2
 8001474:	d001      	beq.n	800147a <commandRead+0x4d2>
			return CMD_ERROR;
 8001476:	230b      	movs	r3, #11
 8001478:	e026      	b.n	80014c8 <commandRead+0x520>
		}

		if ( DUTY_COORDINATES_ABS == mode_coordinate) {
 800147a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d103      	bne.n	800148a <commandRead+0x4e2>
			duty_cmd->coordinate_type = DUTY_COORDINATES_ABS;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2200      	movs	r2, #0
 8001486:	721a      	strb	r2, [r3, #8]
 8001488:	e009      	b.n	800149e <commandRead+0x4f6>
		} else if ( DUTY_COORDINATES_REL == mode_coordinate) {
 800148a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800148e:	2b01      	cmp	r3, #1
 8001490:	d103      	bne.n	800149a <commandRead+0x4f2>
			duty_cmd->coordinate_type = DUTY_COORDINATES_REL;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2201      	movs	r2, #1
 8001496:	721a      	strb	r2, [r3, #8]
 8001498:	e001      	b.n	800149e <commandRead+0x4f6>
		} else {
			return CMD_ERROR;
 800149a:	230b      	movs	r3, #11
 800149c:	e014      	b.n	80014c8 <commandRead+0x520>
		}

		if ( DUTY_TRAJECTORY_LSPB == mode_trajec) {
 800149e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d103      	bne.n	80014ae <commandRead+0x506>
			duty_cmd->trajec_type = DUTY_TRAJECTORY_LSPB;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2200      	movs	r2, #0
 80014aa:	731a      	strb	r2, [r3, #12]
 80014ac:	e009      	b.n	80014c2 <commandRead+0x51a>
		} else if ( DUTY_TRAJECTORY_SCURVE == mode_trajec) {
 80014ae:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d103      	bne.n	80014be <commandRead+0x516>
			duty_cmd->trajec_type = DUTY_TRAJECTORY_SCURVE;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2201      	movs	r2, #1
 80014ba:	731a      	strb	r2, [r3, #12]
 80014bc:	e001      	b.n	80014c2 <commandRead+0x51a>
		} else {
			return CMD_ERROR;
 80014be:	230b      	movs	r3, #11
 80014c0:	e002      	b.n	80014c8 <commandRead+0x520>
		}
		return CMD_SETTING;
 80014c2:	230a      	movs	r3, #10
 80014c4:	e000      	b.n	80014c8 <commandRead+0x520>

	// Error command
	} else {
		return CMD_ERROR;
 80014c6:	230b      	movs	r3, #11
	}
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	37a8      	adds	r7, #168	; 0xa8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80014d2:	bf00      	nop
 80014d4:	20000000 	.word	0x20000000
 80014d8:	08019a6c 	.word	0x08019a6c
 80014dc:	08019ab4 	.word	0x08019ab4
 80014e0:	08019ac8 	.word	0x08019ac8
 80014e4:	08019acc 	.word	0x08019acc

080014e8 <commandReply>:

Robot_RespondTypedef	commandReply	(Robot_CommandTypedef cmd_type,
										DUTY_Command_TypeDef duty_cmd,
										uint8_t *detail) {
 80014e8:	b082      	sub	sp, #8
 80014ea:	b5b0      	push	{r4, r5, r7, lr}
 80014ec:	b0b6      	sub	sp, #216	; 0xd8
 80014ee:	af18      	add	r7, sp, #96	; 0x60
 80014f0:	4601      	mov	r1, r0
 80014f2:	f107 0088 	add.w	r0, r7, #136	; 0x88
 80014f6:	e880 000c 	stmia.w	r0, {r2, r3}
 80014fa:	460b      	mov	r3, r1
 80014fc:	71fb      	strb	r3, [r7, #7]
	Robot_RespondTypedef ret;

	switch(cmd_type) {
 80014fe:	79fb      	ldrb	r3, [r7, #7]
 8001500:	2b0b      	cmp	r3, #11
 8001502:	f200 80f2 	bhi.w	80016ea <commandReply+0x202>
 8001506:	a201      	add	r2, pc, #4	; (adr r2, 800150c <commandReply+0x24>)
 8001508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800150c:	0800153d 	.word	0x0800153d
 8001510:	0800153d 	.word	0x0800153d
 8001514:	0800153d 	.word	0x0800153d
 8001518:	0800153d 	.word	0x0800153d
 800151c:	0800153d 	.word	0x0800153d
 8001520:	0800153d 	.word	0x0800153d
 8001524:	0800153d 	.word	0x0800153d
 8001528:	08001545 	.word	0x08001545
 800152c:	080015af 	.word	0x080015af
 8001530:	080015e3 	.word	0x080015e3
 8001534:	08001611 	.word	0x08001611
 8001538:	080016cb 	.word	0x080016cb
	case CMD_MOVE_HOME:
	case CMD_MOVE_LINE:
	case CMD_MOVE_CIRCLE:
	case CMD_MOVE_JOINT:
	case CMD_ROTATE_SINGLE:
		ret = RPD_DUTY;
 800153c:	2309      	movs	r3, #9
 800153e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		break;
 8001542:	e0e1      	b.n	8001708 <commandReply+0x220>
	case CMD_OUTPUT:
		{
			if (1 == duty_cmd.sub_para_int) {
 8001544:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001548:	2b01      	cmp	r3, #1
 800154a:	d10d      	bne.n	8001568 <commandReply+0x80>
				scaraSetOutput(1);
 800154c:	2001      	movs	r0, #1
 800154e:	f007 fa9b 	bl	8008a88 <scaraSetOutput>
				strcpy( (char *)detail, "Output ON");
 8001552:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001556:	4971      	ldr	r1, [pc, #452]	; (800171c <commandReply+0x234>)
 8001558:	461a      	mov	r2, r3
 800155a:	460b      	mov	r3, r1
 800155c:	cb03      	ldmia	r3!, {r0, r1}
 800155e:	6010      	str	r0, [r2, #0]
 8001560:	6051      	str	r1, [r2, #4]
 8001562:	881b      	ldrh	r3, [r3, #0]
 8001564:	8113      	strh	r3, [r2, #8]
 8001566:	e01e      	b.n	80015a6 <commandReply+0xbe>
			} else if (0 == duty_cmd.sub_para_int) {
 8001568:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800156c:	2b00      	cmp	r3, #0
 800156e:	d10f      	bne.n	8001590 <commandReply+0xa8>
				scaraSetOutput(0);
 8001570:	2000      	movs	r0, #0
 8001572:	f007 fa89 	bl	8008a88 <scaraSetOutput>
				strcpy( (char *)detail, "Output OFF");
 8001576:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800157a:	4969      	ldr	r1, [pc, #420]	; (8001720 <commandReply+0x238>)
 800157c:	461a      	mov	r2, r3
 800157e:	460b      	mov	r3, r1
 8001580:	cb03      	ldmia	r3!, {r0, r1}
 8001582:	6010      	str	r0, [r2, #0]
 8001584:	6051      	str	r1, [r2, #4]
 8001586:	8819      	ldrh	r1, [r3, #0]
 8001588:	789b      	ldrb	r3, [r3, #2]
 800158a:	8111      	strh	r1, [r2, #8]
 800158c:	7293      	strb	r3, [r2, #10]
 800158e:	e00a      	b.n	80015a6 <commandReply+0xbe>
			} else {
				strcpy( (char *)detail, "Wrong Value");
 8001590:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001594:	4a63      	ldr	r2, [pc, #396]	; (8001724 <commandReply+0x23c>)
 8001596:	461c      	mov	r4, r3
 8001598:	4613      	mov	r3, r2
 800159a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800159c:	6020      	str	r0, [r4, #0]
 800159e:	6061      	str	r1, [r4, #4]
 80015a0:	60a2      	str	r2, [r4, #8]
				return RPD_ERROR;
 80015a2:	2307      	movs	r3, #7
 80015a4:	e0b2      	b.n	800170c <commandReply+0x224>
			}
			ret = RPD_OK;
 80015a6:	2308      	movs	r3, #8
 80015a8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
		break;
 80015ac:	e0ac      	b.n	8001708 <commandReply+0x220>
	case CMD_READ_STATUS:
		{
			SCARA_ModeTypeDef		current_mode;
			SCARA_DutyStateTypeDef 	current_state;
			current_mode	 = scaraGetMode();
 80015ae:	f007 faad 	bl	8008b0c <scaraGetMode>
 80015b2:	4603      	mov	r3, r0
 80015b4:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
			current_state	 = scaraGetDutyState();
 80015b8:	f007 fab4 	bl	8008b24 <scaraGetDutyState>
 80015bc:	4603      	mov	r3, r0
 80015be:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
			if ( SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_state) {
 80015c2:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d107      	bne.n	80015da <commandReply+0xf2>
 80015ca:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d103      	bne.n	80015da <commandReply+0xf2>
				ret = RPD_IDLE;
 80015d2:	2300      	movs	r3, #0
 80015d4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			} else {
				ret = RPD_BUSY;
			}
		}
		break;
 80015d8:	e096      	b.n	8001708 <commandReply+0x220>
				ret = RPD_BUSY;
 80015da:	2301      	movs	r3, #1
 80015dc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		break;
 80015e0:	e092      	b.n	8001708 <commandReply+0x220>

	case CMD_READ_POSITION:
		{
			SCARA_PositionTypeDef position;
			scaraGetPosition(&position);
 80015e2:	f107 0308 	add.w	r3, r7, #8
 80015e6:	4618      	mov	r0, r3
 80015e8:	f007 fa70 	bl	8008acc <scaraGetPosition>
			scaraPosition2String((char *)detail, position);
 80015ec:	4668      	mov	r0, sp
 80015ee:	f107 0310 	add.w	r3, r7, #16
 80015f2:	2260      	movs	r2, #96	; 0x60
 80015f4:	4619      	mov	r1, r3
 80015f6:	f012 fb33 	bl	8013c60 <memcpy>
 80015fa:	f107 0308 	add.w	r3, r7, #8
 80015fe:	cb0c      	ldmia	r3, {r2, r3}
 8001600:	f8d7 0190 	ldr.w	r0, [r7, #400]	; 0x190
 8001604:	f007 fad4 	bl	8008bb0 <scaraPosition2String>
			ret =  RPD_POSITION;
 8001608:	2302      	movs	r3, #2
 800160a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
		break;
 800160e:	e07b      	b.n	8001708 <commandReply+0x220>

	case CMD_SETTING:
		if ( DUTY_COORDINATES_ABS == duty_cmd.coordinate_type) {
 8001610:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8001614:	2b00      	cmp	r3, #0
 8001616:	d10a      	bne.n	800162e <commandReply+0x146>
			strcpy( (char *)detail, "Absolute.");
 8001618:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800161c:	4942      	ldr	r1, [pc, #264]	; (8001728 <commandReply+0x240>)
 800161e:	461a      	mov	r2, r3
 8001620:	460b      	mov	r3, r1
 8001622:	cb03      	ldmia	r3!, {r0, r1}
 8001624:	6010      	str	r0, [r2, #0]
 8001626:	6051      	str	r1, [r2, #4]
 8001628:	881b      	ldrh	r3, [r3, #0]
 800162a:	8113      	strh	r3, [r2, #8]
 800162c:	e017      	b.n	800165e <commandReply+0x176>
		} else if ( DUTY_COORDINATES_REL == duty_cmd.coordinate_type) {
 800162e:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8001632:	2b01      	cmp	r3, #1
 8001634:	d10a      	bne.n	800164c <commandReply+0x164>
			strcpy( (char *)detail, "Relative.");
 8001636:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800163a:	493c      	ldr	r1, [pc, #240]	; (800172c <commandReply+0x244>)
 800163c:	461a      	mov	r2, r3
 800163e:	460b      	mov	r3, r1
 8001640:	cb03      	ldmia	r3!, {r0, r1}
 8001642:	6010      	str	r0, [r2, #0]
 8001644:	6051      	str	r1, [r2, #4]
 8001646:	881b      	ldrh	r3, [r3, #0]
 8001648:	8113      	strh	r3, [r2, #8]
 800164a:	e008      	b.n	800165e <commandReply+0x176>
		} else {
			strcat((char *)detail, DETAIL_STATUS[SCARA_STATUS_ERROR_COORDINATE]);
 800164c:	4b38      	ldr	r3, [pc, #224]	; (8001730 <commandReply+0x248>)
 800164e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001650:	4619      	mov	r1, r3
 8001652:	f8d7 0190 	ldr.w	r0, [r7, #400]	; 0x190
 8001656:	f013 faab 	bl	8014bb0 <strcat>
			return RPD_ERROR;
 800165a:	2307      	movs	r3, #7
 800165c:	e056      	b.n	800170c <commandReply+0x224>
		}

		if ( DUTY_TRAJECTORY_LSPB == duty_cmd.trajec_type) {
 800165e:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8001662:	2b00      	cmp	r3, #0
 8001664:	d10e      	bne.n	8001684 <commandReply+0x19c>
			strcat((char *)detail, " LSPB");
 8001666:	f8d7 0190 	ldr.w	r0, [r7, #400]	; 0x190
 800166a:	f7fe fdbb 	bl	80001e4 <strlen>
 800166e:	4603      	mov	r3, r0
 8001670:	461a      	mov	r2, r3
 8001672:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001676:	4413      	add	r3, r2
 8001678:	4a2e      	ldr	r2, [pc, #184]	; (8001734 <commandReply+0x24c>)
 800167a:	6810      	ldr	r0, [r2, #0]
 800167c:	6018      	str	r0, [r3, #0]
 800167e:	8892      	ldrh	r2, [r2, #4]
 8001680:	809a      	strh	r2, [r3, #4]
 8001682:	e01e      	b.n	80016c2 <commandReply+0x1da>
		} else if ( DUTY_TRAJECTORY_SCURVE == duty_cmd.trajec_type) {
 8001684:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8001688:	2b01      	cmp	r3, #1
 800168a:	d111      	bne.n	80016b0 <commandReply+0x1c8>
			strcat((char *)detail, " S-curve");
 800168c:	f8d7 0190 	ldr.w	r0, [r7, #400]	; 0x190
 8001690:	f7fe fda8 	bl	80001e4 <strlen>
 8001694:	4603      	mov	r3, r0
 8001696:	461a      	mov	r2, r3
 8001698:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800169c:	4413      	add	r3, r2
 800169e:	4926      	ldr	r1, [pc, #152]	; (8001738 <commandReply+0x250>)
 80016a0:	461a      	mov	r2, r3
 80016a2:	460b      	mov	r3, r1
 80016a4:	cb03      	ldmia	r3!, {r0, r1}
 80016a6:	6010      	str	r0, [r2, #0]
 80016a8:	6051      	str	r1, [r2, #4]
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	7213      	strb	r3, [r2, #8]
 80016ae:	e008      	b.n	80016c2 <commandReply+0x1da>
		} else {
			strcat((char *)detail, DETAIL_STATUS[SCARA_STATUS_ERROR_TRAJECTORY]);
 80016b0:	4b1f      	ldr	r3, [pc, #124]	; (8001730 <commandReply+0x248>)
 80016b2:	695b      	ldr	r3, [r3, #20]
 80016b4:	4619      	mov	r1, r3
 80016b6:	f8d7 0190 	ldr.w	r0, [r7, #400]	; 0x190
 80016ba:	f013 fa79 	bl	8014bb0 <strcat>
			return RPD_ERROR;
 80016be:	2307      	movs	r3, #7
 80016c0:	e024      	b.n	800170c <commandReply+0x224>
		}
		ret = RPD_OK;
 80016c2:	2308      	movs	r3, #8
 80016c4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		break;
 80016c8:	e01e      	b.n	8001708 <commandReply+0x220>
	case CMD_ERROR:
		strcpy( (char *)detail, "Check parameters");
 80016ca:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80016ce:	4a1b      	ldr	r2, [pc, #108]	; (800173c <commandReply+0x254>)
 80016d0:	461d      	mov	r5, r3
 80016d2:	4614      	mov	r4, r2
 80016d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016d6:	6028      	str	r0, [r5, #0]
 80016d8:	6069      	str	r1, [r5, #4]
 80016da:	60aa      	str	r2, [r5, #8]
 80016dc:	60eb      	str	r3, [r5, #12]
 80016de:	7823      	ldrb	r3, [r4, #0]
 80016e0:	742b      	strb	r3, [r5, #16]
		ret = RPD_ERROR;
 80016e2:	2307      	movs	r3, #7
 80016e4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		break;
 80016e8:	e00e      	b.n	8001708 <commandReply+0x220>
	default:
		strcpy( (char *)detail, "Check parameters");
 80016ea:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80016ee:	4a13      	ldr	r2, [pc, #76]	; (800173c <commandReply+0x254>)
 80016f0:	461d      	mov	r5, r3
 80016f2:	4614      	mov	r4, r2
 80016f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016f6:	6028      	str	r0, [r5, #0]
 80016f8:	6069      	str	r1, [r5, #4]
 80016fa:	60aa      	str	r2, [r5, #8]
 80016fc:	60eb      	str	r3, [r5, #12]
 80016fe:	7823      	ldrb	r3, [r4, #0]
 8001700:	742b      	strb	r3, [r5, #16]
		ret = RPD_ERROR;
 8001702:	2307      	movs	r3, #7
 8001704:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	}
	return ret;
 8001708:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800170c:	4618      	mov	r0, r3
 800170e:	3778      	adds	r7, #120	; 0x78
 8001710:	46bd      	mov	sp, r7
 8001712:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001716:	b002      	add	sp, #8
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	08019ad4 	.word	0x08019ad4
 8001720:	08019ae0 	.word	0x08019ae0
 8001724:	08019aec 	.word	0x08019aec
 8001728:	08019af8 	.word	0x08019af8
 800172c:	08019b04 	.word	0x08019b04
 8001730:	20000c80 	.word	0x20000c80
 8001734:	08019b10 	.word	0x08019b10
 8001738:	08019b18 	.word	0x08019b18
 800173c:	08019b24 	.word	0x08019b24

08001740 <commandRespond>:


int32_t				commandRespond	(Robot_RespondTypedef rpd,
										int32_t id_command,
										char *detail,
										char *respond) {
 8001740:	b580      	push	{r7, lr}
 8001742:	b088      	sub	sp, #32
 8001744:	af02      	add	r7, sp, #8
 8001746:	60b9      	str	r1, [r7, #8]
 8001748:	607a      	str	r2, [r7, #4]
 800174a:	603b      	str	r3, [r7, #0]
 800174c:	4603      	mov	r3, r0
 800174e:	73fb      	strb	r3, [r7, #15]
	int out_lenght;
	switch(rpd) {
 8001750:	7bfb      	ldrb	r3, [r7, #15]
 8001752:	2b08      	cmp	r3, #8
 8001754:	d836      	bhi.n	80017c4 <commandRespond+0x84>
 8001756:	a201      	add	r2, pc, #4	; (adr r2, 800175c <commandRespond+0x1c>)
 8001758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800175c:	08001781 	.word	0x08001781
 8001760:	08001781 	.word	0x08001781
 8001764:	080017a7 	.word	0x080017a7
 8001768:	080017a7 	.word	0x080017a7
 800176c:	080017a7 	.word	0x080017a7
 8001770:	080017a7 	.word	0x080017a7
 8001774:	080017a7 	.word	0x080017a7
 8001778:	080017a7 	.word	0x080017a7
 800177c:	080017a7 	.word	0x080017a7
	case RPD_IDLE:
	case RPD_BUSY:
		{
			uint8_t		isScanLitmit;
			isScanLitmit = scaraIsScanLimit();
 8001780:	f007 f9dc 	bl	8008b3c <scaraIsScanLimit>
 8001784:	4603      	mov	r3, r0
 8001786:	74fb      	strb	r3, [r7, #19]
			out_lenght = snprintf( (char *)respond,
 8001788:	7bfb      	ldrb	r3, [r7, #15]
 800178a:	4a12      	ldr	r2, [pc, #72]	; (80017d4 <commandRespond+0x94>)
 800178c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001790:	7cfa      	ldrb	r2, [r7, #19]
 8001792:	9201      	str	r2, [sp, #4]
 8001794:	9300      	str	r3, [sp, #0]
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	4a0f      	ldr	r2, [pc, #60]	; (80017d8 <commandRespond+0x98>)
 800179a:	2114      	movs	r1, #20
 800179c:	6838      	ldr	r0, [r7, #0]
 800179e:	f013 f987 	bl	8014ab0 <sniprintf>
 80017a2:	6178      	str	r0, [r7, #20]
									"%d %s %d",
									(int)id_command,
									ROBOTRESPOND[rpd],
									(int)isScanLitmit);
		}
		break;
 80017a4:	e010      	b.n	80017c8 <commandRespond+0x88>
	case RPD_STOP:
	case RPD_ERROR:
	case RPD_OK:

		{
			out_lenght = snprintf( (char *)respond,
 80017a6:	7bfb      	ldrb	r3, [r7, #15]
 80017a8:	4a0a      	ldr	r2, [pc, #40]	; (80017d4 <commandRespond+0x94>)
 80017aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	9201      	str	r2, [sp, #4]
 80017b2:	9300      	str	r3, [sp, #0]
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	4a09      	ldr	r2, [pc, #36]	; (80017dc <commandRespond+0x9c>)
 80017b8:	2191      	movs	r1, #145	; 0x91
 80017ba:	6838      	ldr	r0, [r7, #0]
 80017bc:	f013 f978 	bl	8014ab0 <sniprintf>
 80017c0:	6178      	str	r0, [r7, #20]
									"%d %s %s",
									(int)id_command,
									ROBOTRESPOND[rpd],
									(char *)detail);
		}
		break;
 80017c2:	e001      	b.n	80017c8 <commandRespond+0x88>
	default:
		out_lenght = 0;
 80017c4:	2300      	movs	r3, #0
 80017c6:	617b      	str	r3, [r7, #20]
	}

	return (int32_t)out_lenght;
 80017c8:	697b      	ldr	r3, [r7, #20]
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3718      	adds	r7, #24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	2000002c 	.word	0x2000002c
 80017d8:	08019b38 	.word	0x08019b38
 80017dc:	08019b44 	.word	0x08019b44

080017e0 <LOG_REPORT>:
 *  line		: line code number
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t LOG_REPORT(char *message, uint16_t line) {
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b096      	sub	sp, #88	; 0x58
 80017e4:	af02      	add	r7, sp, #8
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	460b      	mov	r3, r1
 80017ea:	807b      	strh	r3, [r7, #2]
	uint8_t temp_buff[64];
	int32_t len;

	len = snprintf((char*)temp_buff, 63, "LINE:%d, %s \r\n", line, message);
 80017ec:	887a      	ldrh	r2, [r7, #2]
 80017ee:	f107 0008 	add.w	r0, r7, #8
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	9300      	str	r3, [sp, #0]
 80017f6:	4613      	mov	r3, r2
 80017f8:	4a17      	ldr	r2, [pc, #92]	; (8001858 <LOG_REPORT+0x78>)
 80017fa:	213f      	movs	r1, #63	; 0x3f
 80017fc:	f013 f958 	bl	8014ab0 <sniprintf>
 8001800:	64f8      	str	r0, [r7, #76]	; 0x4c
	if (-1 == len) {
 8001802:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001808:	d101      	bne.n	800180e <LOG_REPORT+0x2e>
		return FALSE;
 800180a:	2300      	movs	r3, #0
 800180c:	e01f      	b.n	800184e <LOG_REPORT+0x6e>
	}
	ringBuff_PushArray(&uart_tx_ringbuff, temp_buff, len);
 800180e:	f107 0308 	add.w	r3, r7, #8
 8001812:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001814:	4619      	mov	r1, r3
 8001816:	4811      	ldr	r0, [pc, #68]	; (800185c <LOG_REPORT+0x7c>)
 8001818:	f001 ff1d 	bl	8003656 <ringBuff_PushArray>
	if (HAL_DMA_GetState(&hdma_uart4_tx) == HAL_DMA_STATE_BUSY) {
 800181c:	4810      	ldr	r0, [pc, #64]	; (8001860 <LOG_REPORT+0x80>)
 800181e:	f008 f95d 	bl	8009adc <HAL_DMA_GetState>
 8001822:	4603      	mov	r3, r0
 8001824:	2b02      	cmp	r3, #2
 8001826:	d101      	bne.n	800182c <LOG_REPORT+0x4c>
		return TRUE;
 8001828:	2301      	movs	r3, #1
 800182a:	e010      	b.n	800184e <LOG_REPORT+0x6e>
	}// dma busy
	uint16_t size_dma;
	size_dma = ringBuff_PopArray(&uart_tx_ringbuff, log_uart_dma_buff, LOG_BUFFER_SIZE);
 800182c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001830:	490c      	ldr	r1, [pc, #48]	; (8001864 <LOG_REPORT+0x84>)
 8001832:	480a      	ldr	r0, [pc, #40]	; (800185c <LOG_REPORT+0x7c>)
 8001834:	f001 ff37 	bl	80036a6 <ringBuff_PopArray>
 8001838:	4603      	mov	r3, r0
 800183a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	HAL_UART_Transmit_DMA(&huart4, log_uart_dma_buff, size_dma);
 800183e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001842:	461a      	mov	r2, r3
 8001844:	4907      	ldr	r1, [pc, #28]	; (8001864 <LOG_REPORT+0x84>)
 8001846:	4808      	ldr	r0, [pc, #32]	; (8001868 <LOG_REPORT+0x88>)
 8001848:	f00a fd5a 	bl	800c300 <HAL_UART_Transmit_DMA>
	return TRUE;
 800184c:	2301      	movs	r3, #1
}
 800184e:	4618      	mov	r0, r3
 8001850:	3750      	adds	r7, #80	; 0x50
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	08019b50 	.word	0x08019b50
 800185c:	2000086c 	.word	0x2000086c
 8001860:	20005f50 	.word	0x20005f50
 8001864:	200051dc 	.word	0x200051dc
 8001868:	20005f10 	.word	0x20005f10
 800186c:	00000000 	.word	0x00000000

08001870 <double2string>:

int32_t	double2string( uint8_t *result, double value, uint8_t precision) {
 8001870:	b5b0      	push	{r4, r5, r7, lr}
 8001872:	b090      	sub	sp, #64	; 0x40
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	ed87 0b00 	vstr	d0, [r7]
 800187c:	460b      	mov	r3, r1
 800187e:	72fb      	strb	r3, [r7, #11]
	uint8_t le[6];
	int8_t sign;
	double temp1, temp2;
	int32_t index;

	if((precision < 0) || (6 < precision)) {
 8001880:	7afb      	ldrb	r3, [r7, #11]
 8001882:	2b06      	cmp	r3, #6
 8001884:	d901      	bls.n	800188a <double2string+0x1a>
		precision = 6;
 8001886:	2306      	movs	r3, #6
 8001888:	72fb      	strb	r3, [r7, #11]
	}

	if(value < 0) {
 800188a:	f04f 0200 	mov.w	r2, #0
 800188e:	f04f 0300 	mov.w	r3, #0
 8001892:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001896:	f7ff f931 	bl	8000afc <__aeabi_dcmplt>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d003      	beq.n	80018a8 <double2string+0x38>
		sign = -1;
 80018a0:	23ff      	movs	r3, #255	; 0xff
 80018a2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80018a6:	e002      	b.n	80018ae <double2string+0x3e>
	} else {
		sign = 1;
 80018a8:	2301      	movs	r3, #1
 80018aa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}
	value = value*sign;
 80018ae:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7fe fe46 	bl	8000544 <__aeabi_i2d>
 80018b8:	4603      	mov	r3, r0
 80018ba:	460c      	mov	r4, r1
 80018bc:	461a      	mov	r2, r3
 80018be:	4623      	mov	r3, r4
 80018c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80018c4:	f7fe fea8 	bl	8000618 <__aeabi_dmul>
 80018c8:	4603      	mov	r3, r0
 80018ca:	460c      	mov	r4, r1
 80018cc:	e9c7 3400 	strd	r3, r4, [r7]

	if (value > 10000.0f) {
 80018d0:	a307      	add	r3, pc, #28	; (adr r3, 80018f0 <double2string+0x80>)
 80018d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80018da:	f7ff f92d 	bl	8000b38 <__aeabi_dcmpgt>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d009      	beq.n	80018f8 <double2string+0x88>
		return -1;
 80018e4:	f04f 33ff 	mov.w	r3, #4294967295
 80018e8:	e265      	b.n	8001db6 <double2string+0x546>
 80018ea:	bf00      	nop
 80018ec:	f3af 8000 	nop.w
 80018f0:	00000000 	.word	0x00000000
 80018f4:	40c38800 	.word	0x40c38800
	}

	nguyen[0] 	= (int32_t)value/1000;
 80018f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80018fc:	f7ff f93c 	bl	8000b78 <__aeabi_d2iz>
 8001900:	4603      	mov	r3, r0
 8001902:	4acf      	ldr	r2, [pc, #828]	; (8001c40 <double2string+0x3d0>)
 8001904:	fb82 1203 	smull	r1, r2, r2, r3
 8001908:	1192      	asrs	r2, r2, #6
 800190a:	17db      	asrs	r3, r3, #31
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	b2db      	uxtb	r3, r3
 8001910:	773b      	strb	r3, [r7, #28]
	nguyen[1]	= (int32_t)value/100 - nguyen[0]*10;
 8001912:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001916:	f7ff f92f 	bl	8000b78 <__aeabi_d2iz>
 800191a:	4603      	mov	r3, r0
 800191c:	4ac9      	ldr	r2, [pc, #804]	; (8001c44 <double2string+0x3d4>)
 800191e:	fb82 1203 	smull	r1, r2, r2, r3
 8001922:	1152      	asrs	r2, r2, #5
 8001924:	17db      	asrs	r3, r3, #31
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	b2da      	uxtb	r2, r3
 800192a:	7f3b      	ldrb	r3, [r7, #28]
 800192c:	4619      	mov	r1, r3
 800192e:	0149      	lsls	r1, r1, #5
 8001930:	1ac9      	subs	r1, r1, r3
 8001932:	0089      	lsls	r1, r1, #2
 8001934:	1acb      	subs	r3, r1, r3
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	b2db      	uxtb	r3, r3
 800193a:	4413      	add	r3, r2
 800193c:	b2db      	uxtb	r3, r3
 800193e:	777b      	strb	r3, [r7, #29]
	nguyen[2]	= (int32_t)value/10 - nguyen[0]*100 - nguyen[1]*10;
 8001940:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001944:	f7ff f918 	bl	8000b78 <__aeabi_d2iz>
 8001948:	4603      	mov	r3, r0
 800194a:	4abf      	ldr	r2, [pc, #764]	; (8001c48 <double2string+0x3d8>)
 800194c:	fb82 1203 	smull	r1, r2, r2, r3
 8001950:	1092      	asrs	r2, r2, #2
 8001952:	17db      	asrs	r3, r3, #31
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	b2da      	uxtb	r2, r3
 8001958:	7f7b      	ldrb	r3, [r7, #29]
 800195a:	4619      	mov	r1, r3
 800195c:	0149      	lsls	r1, r1, #5
 800195e:	1ac9      	subs	r1, r1, r3
 8001960:	0089      	lsls	r1, r1, #2
 8001962:	1acb      	subs	r3, r1, r3
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	b2d9      	uxtb	r1, r3
 8001968:	7f3b      	ldrb	r3, [r7, #28]
 800196a:	4618      	mov	r0, r3
 800196c:	0080      	lsls	r0, r0, #2
 800196e:	4418      	add	r0, r3
 8001970:	00c0      	lsls	r0, r0, #3
 8001972:	1ac3      	subs	r3, r0, r3
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	b2db      	uxtb	r3, r3
 8001978:	440b      	add	r3, r1
 800197a:	b2db      	uxtb	r3, r3
 800197c:	4413      	add	r3, r2
 800197e:	b2db      	uxtb	r3, r3
 8001980:	77bb      	strb	r3, [r7, #30]
	nguyen[3]	= (int32_t)value - nguyen[0]*1000 - nguyen[1]*100 - nguyen[2]*10;
 8001982:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001986:	f7ff f8f7 	bl	8000b78 <__aeabi_d2iz>
 800198a:	4603      	mov	r3, r0
 800198c:	b2da      	uxtb	r2, r3
 800198e:	7f7b      	ldrb	r3, [r7, #29]
 8001990:	4619      	mov	r1, r3
 8001992:	0089      	lsls	r1, r1, #2
 8001994:	4419      	add	r1, r3
 8001996:	00c9      	lsls	r1, r1, #3
 8001998:	1acb      	subs	r3, r1, r3
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	b2d9      	uxtb	r1, r3
 800199e:	7f3b      	ldrb	r3, [r7, #28]
 80019a0:	4618      	mov	r0, r3
 80019a2:	0040      	lsls	r0, r0, #1
 80019a4:	4403      	add	r3, r0
 80019a6:	00db      	lsls	r3, r3, #3
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	440b      	add	r3, r1
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	4413      	add	r3, r2
 80019b0:	b2da      	uxtb	r2, r3
 80019b2:	7fbb      	ldrb	r3, [r7, #30]
 80019b4:	4619      	mov	r1, r3
 80019b6:	0149      	lsls	r1, r1, #5
 80019b8:	1ac9      	subs	r1, r1, r3
 80019ba:	0089      	lsls	r1, r1, #2
 80019bc:	1acb      	subs	r3, r1, r3
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	4413      	add	r3, r2
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	77fb      	strb	r3, [r7, #31]

	temp1	= (value - nguyen[0]*1000 - nguyen[1]*100 - nguyen[2]*10 - nguyen[3])*1000;
 80019c8:	7f3b      	ldrb	r3, [r7, #28]
 80019ca:	461a      	mov	r2, r3
 80019cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019d0:	fb03 f302 	mul.w	r3, r3, r2
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7fe fdb5 	bl	8000544 <__aeabi_i2d>
 80019da:	4603      	mov	r3, r0
 80019dc:	460c      	mov	r4, r1
 80019de:	461a      	mov	r2, r3
 80019e0:	4623      	mov	r3, r4
 80019e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80019e6:	f7fe fc5f 	bl	80002a8 <__aeabi_dsub>
 80019ea:	4603      	mov	r3, r0
 80019ec:	460c      	mov	r4, r1
 80019ee:	4625      	mov	r5, r4
 80019f0:	461c      	mov	r4, r3
 80019f2:	7f7b      	ldrb	r3, [r7, #29]
 80019f4:	461a      	mov	r2, r3
 80019f6:	2364      	movs	r3, #100	; 0x64
 80019f8:	fb03 f302 	mul.w	r3, r3, r2
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7fe fda1 	bl	8000544 <__aeabi_i2d>
 8001a02:	4602      	mov	r2, r0
 8001a04:	460b      	mov	r3, r1
 8001a06:	4620      	mov	r0, r4
 8001a08:	4629      	mov	r1, r5
 8001a0a:	f7fe fc4d 	bl	80002a8 <__aeabi_dsub>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	460c      	mov	r4, r1
 8001a12:	4625      	mov	r5, r4
 8001a14:	461c      	mov	r4, r3
 8001a16:	7fbb      	ldrb	r3, [r7, #30]
 8001a18:	461a      	mov	r2, r3
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	4413      	add	r3, r2
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7fe fd8e 	bl	8000544 <__aeabi_i2d>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	4620      	mov	r0, r4
 8001a2e:	4629      	mov	r1, r5
 8001a30:	f7fe fc3a 	bl	80002a8 <__aeabi_dsub>
 8001a34:	4603      	mov	r3, r0
 8001a36:	460c      	mov	r4, r1
 8001a38:	4625      	mov	r5, r4
 8001a3a:	461c      	mov	r4, r3
 8001a3c:	7ffb      	ldrb	r3, [r7, #31]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7fe fd80 	bl	8000544 <__aeabi_i2d>
 8001a44:	4602      	mov	r2, r0
 8001a46:	460b      	mov	r3, r1
 8001a48:	4620      	mov	r0, r4
 8001a4a:	4629      	mov	r1, r5
 8001a4c:	f7fe fc2c 	bl	80002a8 <__aeabi_dsub>
 8001a50:	4603      	mov	r3, r0
 8001a52:	460c      	mov	r4, r1
 8001a54:	4618      	mov	r0, r3
 8001a56:	4621      	mov	r1, r4
 8001a58:	f04f 0200 	mov.w	r2, #0
 8001a5c:	4b7b      	ldr	r3, [pc, #492]	; (8001c4c <double2string+0x3dc>)
 8001a5e:	f7fe fddb 	bl	8000618 <__aeabi_dmul>
 8001a62:	4603      	mov	r3, r0
 8001a64:	460c      	mov	r4, r1
 8001a66:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	le[0] 	= (int32_t)temp1/100;
 8001a6a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001a6e:	f7ff f883 	bl	8000b78 <__aeabi_d2iz>
 8001a72:	4603      	mov	r3, r0
 8001a74:	4a73      	ldr	r2, [pc, #460]	; (8001c44 <double2string+0x3d4>)
 8001a76:	fb82 1203 	smull	r1, r2, r2, r3
 8001a7a:	1152      	asrs	r2, r2, #5
 8001a7c:	17db      	asrs	r3, r3, #31
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	753b      	strb	r3, [r7, #20]
	le[1] 	= (int32_t)temp1/10 - le[0]*10;
 8001a84:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001a88:	f7ff f876 	bl	8000b78 <__aeabi_d2iz>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	4a6e      	ldr	r2, [pc, #440]	; (8001c48 <double2string+0x3d8>)
 8001a90:	fb82 1203 	smull	r1, r2, r2, r3
 8001a94:	1092      	asrs	r2, r2, #2
 8001a96:	17db      	asrs	r3, r3, #31
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	b2da      	uxtb	r2, r3
 8001a9c:	7d3b      	ldrb	r3, [r7, #20]
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	0149      	lsls	r1, r1, #5
 8001aa2:	1ac9      	subs	r1, r1, r3
 8001aa4:	0089      	lsls	r1, r1, #2
 8001aa6:	1acb      	subs	r3, r1, r3
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	4413      	add	r3, r2
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	757b      	strb	r3, [r7, #21]
	le[2]	= (int32_t)temp1 - le[0]*100 - le[1]*10;
 8001ab2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001ab6:	f7ff f85f 	bl	8000b78 <__aeabi_d2iz>
 8001aba:	4603      	mov	r3, r0
 8001abc:	b2da      	uxtb	r2, r3
 8001abe:	7d7b      	ldrb	r3, [r7, #21]
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	0149      	lsls	r1, r1, #5
 8001ac4:	1ac9      	subs	r1, r1, r3
 8001ac6:	0089      	lsls	r1, r1, #2
 8001ac8:	1acb      	subs	r3, r1, r3
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	b2d9      	uxtb	r1, r3
 8001ace:	7d3b      	ldrb	r3, [r7, #20]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	0080      	lsls	r0, r0, #2
 8001ad4:	4418      	add	r0, r3
 8001ad6:	00c0      	lsls	r0, r0, #3
 8001ad8:	1ac3      	subs	r3, r0, r3
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	440b      	add	r3, r1
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	4413      	add	r3, r2
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	75bb      	strb	r3, [r7, #22]

	temp2	= (temp1 - le[0]*100 - le[1]*10 - le[2])*1000;
 8001ae8:	7d3b      	ldrb	r3, [r7, #20]
 8001aea:	461a      	mov	r2, r3
 8001aec:	2364      	movs	r3, #100	; 0x64
 8001aee:	fb03 f302 	mul.w	r3, r3, r2
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7fe fd26 	bl	8000544 <__aeabi_i2d>
 8001af8:	4603      	mov	r3, r0
 8001afa:	460c      	mov	r4, r1
 8001afc:	461a      	mov	r2, r3
 8001afe:	4623      	mov	r3, r4
 8001b00:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001b04:	f7fe fbd0 	bl	80002a8 <__aeabi_dsub>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	460c      	mov	r4, r1
 8001b0c:	4625      	mov	r5, r4
 8001b0e:	461c      	mov	r4, r3
 8001b10:	7d7b      	ldrb	r3, [r7, #21]
 8001b12:	461a      	mov	r2, r3
 8001b14:	4613      	mov	r3, r2
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	4413      	add	r3, r2
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7fe fd11 	bl	8000544 <__aeabi_i2d>
 8001b22:	4602      	mov	r2, r0
 8001b24:	460b      	mov	r3, r1
 8001b26:	4620      	mov	r0, r4
 8001b28:	4629      	mov	r1, r5
 8001b2a:	f7fe fbbd 	bl	80002a8 <__aeabi_dsub>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	460c      	mov	r4, r1
 8001b32:	4625      	mov	r5, r4
 8001b34:	461c      	mov	r4, r3
 8001b36:	7dbb      	ldrb	r3, [r7, #22]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7fe fd03 	bl	8000544 <__aeabi_i2d>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	460b      	mov	r3, r1
 8001b42:	4620      	mov	r0, r4
 8001b44:	4629      	mov	r1, r5
 8001b46:	f7fe fbaf 	bl	80002a8 <__aeabi_dsub>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	460c      	mov	r4, r1
 8001b4e:	4618      	mov	r0, r3
 8001b50:	4621      	mov	r1, r4
 8001b52:	f04f 0200 	mov.w	r2, #0
 8001b56:	4b3d      	ldr	r3, [pc, #244]	; (8001c4c <double2string+0x3dc>)
 8001b58:	f7fe fd5e 	bl	8000618 <__aeabi_dmul>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	460c      	mov	r4, r1
 8001b60:	e9c7 3408 	strd	r3, r4, [r7, #32]
	le[3] 	= (int32_t)temp2/100;
 8001b64:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001b68:	f7ff f806 	bl	8000b78 <__aeabi_d2iz>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	4a35      	ldr	r2, [pc, #212]	; (8001c44 <double2string+0x3d4>)
 8001b70:	fb82 1203 	smull	r1, r2, r2, r3
 8001b74:	1152      	asrs	r2, r2, #5
 8001b76:	17db      	asrs	r3, r3, #31
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	75fb      	strb	r3, [r7, #23]
	le[4] 	= (int32_t)temp2/10 - le[3]*10;
 8001b7e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001b82:	f7fe fff9 	bl	8000b78 <__aeabi_d2iz>
 8001b86:	4603      	mov	r3, r0
 8001b88:	4a2f      	ldr	r2, [pc, #188]	; (8001c48 <double2string+0x3d8>)
 8001b8a:	fb82 1203 	smull	r1, r2, r2, r3
 8001b8e:	1092      	asrs	r2, r2, #2
 8001b90:	17db      	asrs	r3, r3, #31
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	b2da      	uxtb	r2, r3
 8001b96:	7dfb      	ldrb	r3, [r7, #23]
 8001b98:	4619      	mov	r1, r3
 8001b9a:	0149      	lsls	r1, r1, #5
 8001b9c:	1ac9      	subs	r1, r1, r3
 8001b9e:	0089      	lsls	r1, r1, #2
 8001ba0:	1acb      	subs	r3, r1, r3
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	4413      	add	r3, r2
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	763b      	strb	r3, [r7, #24]
	le[5]	= (int32_t)temp2 - le[3]*100 - le[4]*10;
 8001bac:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001bb0:	f7fe ffe2 	bl	8000b78 <__aeabi_d2iz>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	b2da      	uxtb	r2, r3
 8001bb8:	7e3b      	ldrb	r3, [r7, #24]
 8001bba:	4619      	mov	r1, r3
 8001bbc:	0149      	lsls	r1, r1, #5
 8001bbe:	1ac9      	subs	r1, r1, r3
 8001bc0:	0089      	lsls	r1, r1, #2
 8001bc2:	1acb      	subs	r3, r1, r3
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	b2d9      	uxtb	r1, r3
 8001bc8:	7dfb      	ldrb	r3, [r7, #23]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	0080      	lsls	r0, r0, #2
 8001bce:	4418      	add	r0, r3
 8001bd0:	00c0      	lsls	r0, r0, #3
 8001bd2:	1ac3      	subs	r3, r0, r3
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	440b      	add	r3, r1
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	4413      	add	r3, r2
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	767b      	strb	r3, [r7, #25]
	// Rounding
	if ((temp2 - le[3]*1000 - le[4]*100 - le[5]) >= 0.5) {
 8001be2:	7dfb      	ldrb	r3, [r7, #23]
 8001be4:	461a      	mov	r2, r3
 8001be6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bea:	fb03 f302 	mul.w	r3, r3, r2
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7fe fca8 	bl	8000544 <__aeabi_i2d>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	460c      	mov	r4, r1
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	4623      	mov	r3, r4
 8001bfc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001c00:	f7fe fb52 	bl	80002a8 <__aeabi_dsub>
 8001c04:	4603      	mov	r3, r0
 8001c06:	460c      	mov	r4, r1
 8001c08:	4625      	mov	r5, r4
 8001c0a:	461c      	mov	r4, r3
 8001c0c:	7e3b      	ldrb	r3, [r7, #24]
 8001c0e:	461a      	mov	r2, r3
 8001c10:	2364      	movs	r3, #100	; 0x64
 8001c12:	fb03 f302 	mul.w	r3, r3, r2
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7fe fc94 	bl	8000544 <__aeabi_i2d>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	460b      	mov	r3, r1
 8001c20:	4620      	mov	r0, r4
 8001c22:	4629      	mov	r1, r5
 8001c24:	f7fe fb40 	bl	80002a8 <__aeabi_dsub>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	460c      	mov	r4, r1
 8001c2c:	4625      	mov	r5, r4
 8001c2e:	461c      	mov	r4, r3
 8001c30:	7e7b      	ldrb	r3, [r7, #25]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7fe fc86 	bl	8000544 <__aeabi_i2d>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	e008      	b.n	8001c50 <double2string+0x3e0>
 8001c3e:	bf00      	nop
 8001c40:	10624dd3 	.word	0x10624dd3
 8001c44:	51eb851f 	.word	0x51eb851f
 8001c48:	66666667 	.word	0x66666667
 8001c4c:	408f4000 	.word	0x408f4000
 8001c50:	4620      	mov	r0, r4
 8001c52:	4629      	mov	r1, r5
 8001c54:	f7fe fb28 	bl	80002a8 <__aeabi_dsub>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	460c      	mov	r4, r1
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	4621      	mov	r1, r4
 8001c60:	f04f 0200 	mov.w	r2, #0
 8001c64:	4b56      	ldr	r3, [pc, #344]	; (8001dc0 <double2string+0x550>)
 8001c66:	f7fe ff5d 	bl	8000b24 <__aeabi_dcmpge>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d003      	beq.n	8001c78 <double2string+0x408>
		le[5]++;
 8001c70:	7e7b      	ldrb	r3, [r7, #25]
 8001c72:	3301      	adds	r3, #1
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	767b      	strb	r3, [r7, #25]
	}

	index = 0;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	63bb      	str	r3, [r7, #56]	; 0x38

	if( -1 == sign) {
 8001c7c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8001c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c84:	d107      	bne.n	8001c96 <double2string+0x426>
		*(result + index++) = '-'; // Negative
 8001c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c88:	1c5a      	adds	r2, r3, #1
 8001c8a:	63ba      	str	r2, [r7, #56]	; 0x38
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	4413      	add	r3, r2
 8001c92:	222d      	movs	r2, #45	; 0x2d
 8001c94:	701a      	strb	r2, [r3, #0]
	}
	// Find first position
	if ( value < 1) {
 8001c96:	f04f 0200 	mov.w	r2, #0
 8001c9a:	4b4a      	ldr	r3, [pc, #296]	; (8001dc4 <double2string+0x554>)
 8001c9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ca0:	f7fe ff2c 	bl	8000afc <__aeabi_dcmplt>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d008      	beq.n	8001cbc <double2string+0x44c>
		*(result + index++) = 0x30;
 8001caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cac:	1c5a      	adds	r2, r3, #1
 8001cae:	63ba      	str	r2, [r7, #56]	; 0x38
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	2230      	movs	r2, #48	; 0x30
 8001cb8:	701a      	strb	r2, [r3, #0]
 8001cba:	e04b      	b.n	8001d54 <double2string+0x4e4>
	} else {
		int8_t i = 0;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		for( ; i < 4; i++) {
 8001cc2:	e027      	b.n	8001d14 <double2string+0x4a4>
			if (nguyen[i] > 0) {
 8001cc4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001cc8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001ccc:	4413      	add	r3, r2
 8001cce:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d017      	beq.n	8001d06 <double2string+0x496>
				*(result + index++) = nguyen[i] + 0x30;
 8001cd6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001cda:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001cde:	4413      	add	r3, r2
 8001ce0:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 8001ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ce6:	1c59      	adds	r1, r3, #1
 8001ce8:	63b9      	str	r1, [r7, #56]	; 0x38
 8001cea:	4619      	mov	r1, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	440b      	add	r3, r1
 8001cf0:	3230      	adds	r2, #48	; 0x30
 8001cf2:	b2d2      	uxtb	r2, r2
 8001cf4:	701a      	strb	r2, [r3, #0]
				i++;
 8001cf6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;
 8001d04:	e00a      	b.n	8001d1c <double2string+0x4ac>
		for( ; i < 4; i++) {
 8001d06:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001d14:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001d18:	2b03      	cmp	r3, #3
 8001d1a:	ddd3      	ble.n	8001cc4 <double2string+0x454>
			}
		}

		for( ; i < 4; i++) {
 8001d1c:	e016      	b.n	8001d4c <double2string+0x4dc>
		*(result + index++) = nguyen[i] + 0x30;
 8001d1e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001d22:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001d26:	4413      	add	r3, r2
 8001d28:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 8001d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d2e:	1c59      	adds	r1, r3, #1
 8001d30:	63b9      	str	r1, [r7, #56]	; 0x38
 8001d32:	4619      	mov	r1, r3
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	440b      	add	r3, r1
 8001d38:	3230      	adds	r2, #48	; 0x30
 8001d3a:	b2d2      	uxtb	r2, r2
 8001d3c:	701a      	strb	r2, [r3, #0]
		for( ; i < 4; i++) {
 8001d3e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	3301      	adds	r3, #1
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001d4c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001d50:	2b03      	cmp	r3, #3
 8001d52:	dde4      	ble.n	8001d1e <double2string+0x4ae>
		}
	}
	*(result + index++) = '.';
 8001d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d56:	1c5a      	adds	r2, r3, #1
 8001d58:	63ba      	str	r2, [r7, #56]	; 0x38
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	4413      	add	r3, r2
 8001d60:	222e      	movs	r2, #46	; 0x2e
 8001d62:	701a      	strb	r2, [r3, #0]
	for( int8_t i = 0; i < precision; i++) {
 8001d64:	2300      	movs	r3, #0
 8001d66:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001d6a:	e016      	b.n	8001d9a <double2string+0x52a>
			*(result + index++) = le[i] + 0x30;
 8001d6c:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8001d70:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001d74:	4413      	add	r3, r2
 8001d76:	f813 2c2c 	ldrb.w	r2, [r3, #-44]
 8001d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d7c:	1c59      	adds	r1, r3, #1
 8001d7e:	63b9      	str	r1, [r7, #56]	; 0x38
 8001d80:	4619      	mov	r1, r3
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	440b      	add	r3, r1
 8001d86:	3230      	adds	r2, #48	; 0x30
 8001d88:	b2d2      	uxtb	r2, r2
 8001d8a:	701a      	strb	r2, [r3, #0]
	for( int8_t i = 0; i < precision; i++) {
 8001d8c:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	3301      	adds	r3, #1
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001d9a:	f997 2036 	ldrsb.w	r2, [r7, #54]	; 0x36
 8001d9e:	7afb      	ldrb	r3, [r7, #11]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	dbe3      	blt.n	8001d6c <double2string+0x4fc>
	}

	// Chua giai quyet van de lam tron chu so thap phan
	*(result + index++) = 0;
 8001da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001da6:	1c5a      	adds	r2, r3, #1
 8001da8:	63ba      	str	r2, [r7, #56]	; 0x38
 8001daa:	461a      	mov	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	4413      	add	r3, r2
 8001db0:	2200      	movs	r2, #0
 8001db2:	701a      	strb	r2, [r3, #0]
	return index;
 8001db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3740      	adds	r7, #64	; 0x40
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bdb0      	pop	{r4, r5, r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	3fe00000 	.word	0x3fe00000
 8001dc4:	3ff00000 	.word	0x3ff00000

08001dc8 <packPayload>:
 *  in_lenght		: lenght of input_buff
 *
 *  returns:		: lenght of output_buff
 *  				  -1 if error
 */
int32_t	packPayload		(uint8_t *input_buff, uint8_t *output_buff, int32_t in_lenght) {
 8001dc8:	b5b0      	push	{r4, r5, r7, lr}
 8001dca:	b088      	sub	sp, #32
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	607a      	str	r2, [r7, #4]
 8001dd4:	466b      	mov	r3, sp
 8001dd6:	461d      	mov	r5, r3
	if (NULL == input_buff) {
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d102      	bne.n	8001de4 <packPayload+0x1c>
		return -1;
 8001dde:	f04f 33ff 	mov.w	r3, #4294967295
 8001de2:	e056      	b.n	8001e92 <packPayload+0xca>
	}

	if (NULL == output_buff) {
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d102      	bne.n	8001df0 <packPayload+0x28>
		return -1;
 8001dea:	f04f 33ff 	mov.w	r3, #4294967295
 8001dee:	e050      	b.n	8001e92 <packPayload+0xca>
	}

	int32_t out_lenght = 0;
 8001df0:	2300      	movs	r3, #0
 8001df2:	61bb      	str	r3, [r7, #24]

	out_lenght = in_lenght + 2;//lenght of start char and end char
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	3302      	adds	r3, #2
 8001df8:	61bb      	str	r3, [r7, #24]
//		if ( (START_CHAR == input_buff[i]) ||	(END_CHAR == input_buff[i])	|| (ADD_CHAR == input_buff[i]) ) {
//			out_lenght++;
//		}
//	}// compute output buffer lenght

	uint8_t temp_buff[out_lenght];
 8001dfa:	69b8      	ldr	r0, [r7, #24]
 8001dfc:	1e43      	subs	r3, r0, #1
 8001dfe:	617b      	str	r3, [r7, #20]
 8001e00:	4603      	mov	r3, r0
 8001e02:	4619      	mov	r1, r3
 8001e04:	f04f 0200 	mov.w	r2, #0
 8001e08:	f04f 0300 	mov.w	r3, #0
 8001e0c:	f04f 0400 	mov.w	r4, #0
 8001e10:	00d4      	lsls	r4, r2, #3
 8001e12:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001e16:	00cb      	lsls	r3, r1, #3
 8001e18:	4603      	mov	r3, r0
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	f04f 0200 	mov.w	r2, #0
 8001e20:	f04f 0300 	mov.w	r3, #0
 8001e24:	f04f 0400 	mov.w	r4, #0
 8001e28:	00d4      	lsls	r4, r2, #3
 8001e2a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001e2e:	00cb      	lsls	r3, r1, #3
 8001e30:	4603      	mov	r3, r0
 8001e32:	3307      	adds	r3, #7
 8001e34:	08db      	lsrs	r3, r3, #3
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	ebad 0d03 	sub.w	sp, sp, r3
 8001e3c:	466b      	mov	r3, sp
 8001e3e:	3300      	adds	r3, #0
 8001e40:	613b      	str	r3, [r7, #16]

	out_lenght = 0;
 8001e42:	2300      	movs	r3, #0
 8001e44:	61bb      	str	r3, [r7, #24]
	temp_buff[out_lenght++] = START_CHAR;
 8001e46:	69bb      	ldr	r3, [r7, #24]
 8001e48:	1c5a      	adds	r2, r3, #1
 8001e4a:	61ba      	str	r2, [r7, #24]
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	2128      	movs	r1, #40	; 0x28
 8001e50:	54d1      	strb	r1, [r2, r3]
	for (int32_t i = 0; i < in_lenght; i++) {
 8001e52:	2300      	movs	r3, #0
 8001e54:	61fb      	str	r3, [r7, #28]
 8001e56:	e00b      	b.n	8001e70 <packPayload+0xa8>
//			temp_buff[out_lenght++] = ADD_CHAR;
//			temp_buff[out_lenght++] = input_buff[i] ^ XOR_CHAR;
//		} else {
//			temp_buff[out_lenght++] = input_buff[i];
//		}
		temp_buff[out_lenght++] = input_buff[i];
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	68fa      	ldr	r2, [r7, #12]
 8001e5c:	441a      	add	r2, r3
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	1c59      	adds	r1, r3, #1
 8001e62:	61b9      	str	r1, [r7, #24]
 8001e64:	7811      	ldrb	r1, [r2, #0]
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	54d1      	strb	r1, [r2, r3]
	for (int32_t i = 0; i < in_lenght; i++) {
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	61fb      	str	r3, [r7, #28]
 8001e70:	69fa      	ldr	r2, [r7, #28]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	dbef      	blt.n	8001e58 <packPayload+0x90>
	}
	temp_buff[out_lenght++] = END_CHAR;
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	1c5a      	adds	r2, r3, #1
 8001e7c:	61ba      	str	r2, [r7, #24]
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	2129      	movs	r1, #41	; 0x29
 8001e82:	54d1      	strb	r1, [r2, r3]

	memmove(output_buff, temp_buff, out_lenght);
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	4619      	mov	r1, r3
 8001e8a:	68b8      	ldr	r0, [r7, #8]
 8001e8c:	f011 fef3 	bl	8013c76 <memmove>

	return out_lenght;
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	46ad      	mov	sp, r5
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3720      	adds	r7, #32
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bdb0      	pop	{r4, r5, r7, pc}

08001e9c <unPackPayload>:
 *  in_lenght		: lenght of input_buff
 *
 *  returns:		: lenght of output_buff
 *  				  -1 if error
 */
int32_t	unPackPayload	(uint8_t *message_buff, int32_t in_lenght) {
 8001e9c:	b5b0      	push	{r4, r5, r7, lr}
 8001e9e:	b086      	sub	sp, #24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
 8001ea6:	466b      	mov	r3, sp
 8001ea8:	461d      	mov	r5, r3
	if (in_lenght < MIN_MESSAGE_LENGHT) {
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	2b05      	cmp	r3, #5
 8001eae:	dc02      	bgt.n	8001eb6 <unPackPayload+0x1a>
		return -1;
 8001eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8001eb4:	e063      	b.n	8001f7e <unPackPayload+0xe2>
	}// check minimum lenght

	if ( (START_CHAR != message_buff[0]) || (END_CHAR != message_buff[in_lenght - 1]) ) {
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	2b28      	cmp	r3, #40	; 0x28
 8001ebc:	d106      	bne.n	8001ecc <unPackPayload+0x30>
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	3b01      	subs	r3, #1
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	2b29      	cmp	r3, #41	; 0x29
 8001eca:	d002      	beq.n	8001ed2 <unPackPayload+0x36>
		return -1;
 8001ecc:	f04f 33ff 	mov.w	r3, #4294967295
 8001ed0:	e055      	b.n	8001f7e <unPackPayload+0xe2>
	}// check start char and end char

	int32_t out_lenght = in_lenght - 2;
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	3b02      	subs	r3, #2
 8001ed6:	613b      	str	r3, [r7, #16]
//		if ( (START_CHAR == message_buff[i]) || (END_CHAR == message_buff[i]) || (ADD_CHAR == message_buff[i]) ) {
//			out_lenght--;
//		}
//	}// compute output buffer lenght

	uint8_t temp_buff[out_lenght];
 8001ed8:	6938      	ldr	r0, [r7, #16]
 8001eda:	1e43      	subs	r3, r0, #1
 8001edc:	60fb      	str	r3, [r7, #12]
 8001ede:	4603      	mov	r3, r0
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	f04f 0200 	mov.w	r2, #0
 8001ee6:	f04f 0300 	mov.w	r3, #0
 8001eea:	f04f 0400 	mov.w	r4, #0
 8001eee:	00d4      	lsls	r4, r2, #3
 8001ef0:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001ef4:	00cb      	lsls	r3, r1, #3
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	4619      	mov	r1, r3
 8001efa:	f04f 0200 	mov.w	r2, #0
 8001efe:	f04f 0300 	mov.w	r3, #0
 8001f02:	f04f 0400 	mov.w	r4, #0
 8001f06:	00d4      	lsls	r4, r2, #3
 8001f08:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001f0c:	00cb      	lsls	r3, r1, #3
 8001f0e:	4603      	mov	r3, r0
 8001f10:	3307      	adds	r3, #7
 8001f12:	08db      	lsrs	r3, r3, #3
 8001f14:	00db      	lsls	r3, r3, #3
 8001f16:	ebad 0d03 	sub.w	sp, sp, r3
 8001f1a:	466b      	mov	r3, sp
 8001f1c:	3300      	adds	r3, #0
 8001f1e:	60bb      	str	r3, [r7, #8]

	out_lenght = 0;
 8001f20:	2300      	movs	r3, #0
 8001f22:	613b      	str	r3, [r7, #16]
	for (int32_t i = 0; i < (in_lenght - 1); i++) {
 8001f24:	2300      	movs	r3, #0
 8001f26:	617b      	str	r3, [r7, #20]
 8001f28:	e017      	b.n	8001f5a <unPackPayload+0xbe>
		if ( (START_CHAR == message_buff[i]) ||	(END_CHAR == message_buff[i]) ) {
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	4413      	add	r3, r2
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	2b28      	cmp	r3, #40	; 0x28
 8001f34:	d00e      	beq.n	8001f54 <unPackPayload+0xb8>
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	2b29      	cmp	r3, #41	; 0x29
 8001f40:	d008      	beq.n	8001f54 <unPackPayload+0xb8>
			;
//		} else if ( (ADD_CHAR == message_buff[i]) ) {
//			temp_buff[out_lenght++] = message_buff[++i] ^ XOR_CHAR;
		}
		else {
			temp_buff[out_lenght++] = message_buff[i];
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	441a      	add	r2, r3
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	1c59      	adds	r1, r3, #1
 8001f4c:	6139      	str	r1, [r7, #16]
 8001f4e:	7811      	ldrb	r1, [r2, #0]
 8001f50:	68ba      	ldr	r2, [r7, #8]
 8001f52:	54d1      	strb	r1, [r2, r3]
	for (int32_t i = 0; i < (in_lenght - 1); i++) {
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	3301      	adds	r3, #1
 8001f58:	617b      	str	r3, [r7, #20]
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	3b01      	subs	r3, #1
 8001f5e:	697a      	ldr	r2, [r7, #20]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	dbe2      	blt.n	8001f2a <unPackPayload+0x8e>
		}
	}
	memset((uint8_t*)message_buff, 0, in_lenght);
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	461a      	mov	r2, r3
 8001f68:	2100      	movs	r1, #0
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f011 fe9c 	bl	8013ca8 <memset>
	memmove(message_buff, temp_buff, out_lenght);
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	4619      	mov	r1, r3
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f011 fe7d 	bl	8013c76 <memmove>

	return out_lenght;
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	46ad      	mov	sp, r5
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3718      	adds	r7, #24
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bdb0      	pop	{r4, r5, r7, pc}

08001f88 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f8e:	2300      	movs	r3, #0
 8001f90:	607b      	str	r3, [r7, #4]
 8001f92:	4b0c      	ldr	r3, [pc, #48]	; (8001fc4 <MX_DMA_Init+0x3c>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	4a0b      	ldr	r2, [pc, #44]	; (8001fc4 <MX_DMA_Init+0x3c>)
 8001f98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f9e:	4b09      	ldr	r3, [pc, #36]	; (8001fc4 <MX_DMA_Init+0x3c>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fa6:	607b      	str	r3, [r7, #4]
 8001fa8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8001faa:	2200      	movs	r2, #0
 8001fac:	2105      	movs	r1, #5
 8001fae:	200f      	movs	r0, #15
 8001fb0:	f007 fab8 	bl	8009524 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001fb4:	200f      	movs	r0, #15
 8001fb6:	f007 fad1 	bl	800955c <HAL_NVIC_EnableIRQ>

}
 8001fba:	bf00      	nop
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40023800 	.word	0x40023800

08001fc8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	4a07      	ldr	r2, [pc, #28]	; (8001ff4 <vApplicationGetIdleTaskMemory+0x2c>)
 8001fd8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	4a06      	ldr	r2, [pc, #24]	; (8001ff8 <vApplicationGetIdleTaskMemory+0x30>)
 8001fde:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fe6:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8001fe8:	bf00      	nop
 8001fea:	3714      	adds	r7, #20
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr
 8001ff4:	20001024 	.word	0x20001024
 8001ff8:	20001078 	.word	0x20001078

08001ffc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001ffc:	b5b0      	push	{r4, r5, r7, lr}
 8001ffe:	b094      	sub	sp, #80	; 0x50
 8002000:	af00      	add	r7, sp, #0
       
  /* USER CODE END Init */

  /* Create the mutex(es) */
  /* definition and creation of usbTxMutex */
  osMutexDef(usbTxMutex);
 8002002:	2300      	movs	r3, #0
 8002004:	64bb      	str	r3, [r7, #72]	; 0x48
 8002006:	2300      	movs	r3, #0
 8002008:	64fb      	str	r3, [r7, #76]	; 0x4c
  usbTxMutexHandle = osMutexCreate(osMutex(usbTxMutex));
 800200a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800200e:	4618      	mov	r0, r3
 8002010:	f00e f82e 	bl	8010070 <osMutexCreate>
 8002014:	4602      	mov	r2, r0
 8002016:	4b1d      	ldr	r3, [pc, #116]	; (800208c <MX_FREERTOS_Init+0x90>)
 8002018:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
	  /* Create the queue(s) */
	  /* definition and creation of commandMail */
	  osMailQDef(commandMail, 1, DUTY_Command_TypeDef);
 800201a:	2301      	movs	r3, #1
 800201c:	63bb      	str	r3, [r7, #56]	; 0x38
 800201e:	f44f 7384 	mov.w	r3, #264	; 0x108
 8002022:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002024:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002028:	643b      	str	r3, [r7, #64]	; 0x40
	  commandMailHandle = osMailCreate(osMailQ(commandMail), NULL);
 800202a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800202e:	2100      	movs	r1, #0
 8002030:	4618      	mov	r0, r3
 8002032:	f00e f9b9 	bl	80103a8 <osMailCreate>
 8002036:	4602      	mov	r2, r0
 8002038:	4b15      	ldr	r3, [pc, #84]	; (8002090 <MX_FREERTOS_Init+0x94>)
 800203a:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityHigh, 0, 2048);
 800203c:	4b15      	ldr	r3, [pc, #84]	; (8002094 <MX_FREERTOS_Init+0x98>)
 800203e:	f107 041c 	add.w	r4, r7, #28
 8002042:	461d      	mov	r5, r3
 8002044:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002046:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002048:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800204c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002050:	f107 031c 	add.w	r3, r7, #28
 8002054:	2100      	movs	r1, #0
 8002056:	4618      	mov	r0, r3
 8002058:	f00d ff1d 	bl	800fe96 <osThreadCreate>
 800205c:	4602      	mov	r2, r0
 800205e:	4b0e      	ldr	r3, [pc, #56]	; (8002098 <MX_FREERTOS_Init+0x9c>)
 8002060:	601a      	str	r2, [r3, #0]

  /* definition and creation of USB_RX_Check_ */
  osThreadDef(USB_RX_Check_, Start_USB_RX_Task, osPriorityNormal, 0, 1024);
 8002062:	4b0e      	ldr	r3, [pc, #56]	; (800209c <MX_FREERTOS_Init+0xa0>)
 8002064:	463c      	mov	r4, r7
 8002066:	461d      	mov	r5, r3
 8002068:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800206a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800206c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002070:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  USB_RX_Check_Handle = osThreadCreate(osThread(USB_RX_Check_), NULL);
 8002074:	463b      	mov	r3, r7
 8002076:	2100      	movs	r1, #0
 8002078:	4618      	mov	r0, r3
 800207a:	f00d ff0c 	bl	800fe96 <osThreadCreate>
 800207e:	4602      	mov	r2, r0
 8002080:	4b07      	ldr	r3, [pc, #28]	; (80020a0 <MX_FREERTOS_Init+0xa4>)
 8002082:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8002084:	bf00      	nop
 8002086:	3750      	adds	r7, #80	; 0x50
 8002088:	46bd      	mov	sp, r7
 800208a:	bdb0      	pop	{r4, r5, r7, pc}
 800208c:	200052e0 	.word	0x200052e0
 8002090:	200052e4 	.word	0x200052e4
 8002094:	08019b6c 	.word	0x08019b6c
 8002098:	200052dc 	.word	0x200052dc
 800209c:	08019b98 	.word	0x08019b98
 80020a0:	200052e8 	.word	0x200052e8
 80020a4:	00000000 	.word	0x00000000

080020a8 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80020a8:	b5b0      	push	{r4, r5, r7, lr}
 80020aa:	f5ad 6dcf 	sub.w	sp, sp, #1656	; 0x678
 80020ae:	af3e      	add	r7, sp, #248	; 0xf8
 80020b0:	f107 0314 	add.w	r3, r7, #20
 80020b4:	6018      	str	r0, [r3, #0]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80020b6:	f011 f859 	bl	801316c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  HAL_GPIO_WritePin(USB_SIGN_GPIO_Port, USB_SIGN_Pin, GPIO_PIN_SET); // Pull-up Resistor
 80020ba:	2201      	movs	r2, #1
 80020bc:	2110      	movs	r1, #16
 80020be:	48ce      	ldr	r0, [pc, #824]	; (80023f8 <StartDefaultTask+0x350>)
 80020c0:	f007 ff92 	bl	8009fe8 <HAL_GPIO_WritePin>

  osEvent 				ret_mail;
  DUTY_Command_TypeDef 	duty_cmd;
  DUTY_Command_TypeDef 	*dataMail;
  uint8_t 				isNewDuty = FALSE;
 80020c4:	2300      	movs	r3, #0
 80020c6:	f887 357f 	strb.w	r3, [r7, #1407]	; 0x57f
  SCARA_ModeTypeDef			current_mode;
  SCARA_DutyStateTypeDef 	current_duty_state;
  SCARA_ScanStateTypeDef	current_scan_state;
  double						run_time;

  LOG_REPORT("free_rtos.c: PROGRAM START...", __LINE__);
 80020ca:	21cd      	movs	r1, #205	; 0xcd
 80020cc:	48cb      	ldr	r0, [pc, #812]	; (80023fc <StartDefaultTask+0x354>)
 80020ce:	f7ff fb87 	bl	80017e0 <LOG_REPORT>

  // Init value
  no_stop = 0;
 80020d2:	2300      	movs	r3, #0
 80020d4:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
  no_scan = 0;
 80020d8:	2300      	movs	r3, #0
 80020da:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
  no_duty = 0;
 80020de:	2300      	movs	r3, #0
 80020e0:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
  no_duty_success	= 0;
 80020e4:	2300      	movs	r3, #0
 80020e6:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
  no_duty_fail		= 0;
 80020ea:	2300      	movs	r3, #0
 80020ec:	f8c7 3568 	str.w	r3, [r7, #1384]	; 0x568
  current_mode	 = scaraGetMode();
 80020f0:	f006 fd0c 	bl	8008b0c <scaraGetMode>
 80020f4:	4603      	mov	r3, r0
 80020f6:	f887 3557 	strb.w	r3, [r7, #1367]	; 0x557
  current_duty_state	 = scaraGetDutyState();
 80020fa:	f006 fd13 	bl	8008b24 <scaraGetDutyState>
 80020fe:	4603      	mov	r3, r0
 8002100:	f887 3556 	strb.w	r3, [r7, #1366]	; 0x556

  // Start up robot
  scaraStartup();
 8002104:	f002 fa30 	bl	8004568 <scaraStartup>
  osDelay(10);
 8002108:	200a      	movs	r0, #10
 800210a:	f00d ff10 	bl	800ff2e <osDelay>

#ifdef SIMULATION
	  positionNext.Theta1 = -PI/3;
 800210e:	4abc      	ldr	r2, [pc, #752]	; (8002400 <StartDefaultTask+0x358>)
 8002110:	a4b5      	add	r4, pc, #724	; (adr r4, 80023e8 <StartDefaultTask+0x340>)
 8002112:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002116:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	  positionNext.Theta2 = PI/3;
 800211a:	4ab9      	ldr	r2, [pc, #740]	; (8002400 <StartDefaultTask+0x358>)
 800211c:	a4b4      	add	r4, pc, #720	; (adr r4, 80023f0 <StartDefaultTask+0x348>)
 800211e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002122:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	  positionNext.D3 = 10;
 8002126:	4ab6      	ldr	r2, [pc, #728]	; (8002400 <StartDefaultTask+0x358>)
 8002128:	f04f 0300 	mov.w	r3, #0
 800212c:	4cb5      	ldr	r4, [pc, #724]	; (8002404 <StartDefaultTask+0x35c>)
 800212e:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	  positionNext.Theta4 = 0;
 8002132:	4ab3      	ldr	r2, [pc, #716]	; (8002400 <StartDefaultTask+0x358>)
 8002134:	f04f 0300 	mov.w	r3, #0
 8002138:	f04f 0400 	mov.w	r4, #0
 800213c:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	  positionNext.t = 0;
 8002140:	4aaf      	ldr	r2, [pc, #700]	; (8002400 <StartDefaultTask+0x358>)
 8002142:	f04f 0300 	mov.w	r3, #0
 8002146:	f04f 0400 	mov.w	r4, #0
 800214a:	e9c2 3406 	strd	r3, r4, [r2, #24]
	  kinematicForward(&positionNext);
 800214e:	48ac      	ldr	r0, [pc, #688]	; (8002400 <StartDefaultTask+0x358>)
 8002150:	f000 fe3e 	bl	8002dd0 <kinematicForward>
#endif
  /* Infinite loop */
//Start Timer 7
	  HAL_TIM_Base_Start_IT(&htim7);
 8002154:	48ac      	ldr	r0, [pc, #688]	; (8002408 <StartDefaultTask+0x360>)
 8002156:	f009 fe00 	bl	800bd5a <HAL_TIM_Base_Start_IT>
  for(;;)
  {
	  /*---------Wait for Timer Trigger-----------*/
	  osSignalWait(0x01, osWaitForever); // Very Important
 800215a:	463b      	mov	r3, r7
 800215c:	f04f 32ff 	mov.w	r2, #4294967295
 8002160:	2101      	movs	r1, #1
 8002162:	4618      	mov	r0, r3
 8002164:	f00d ff38 	bl	800ffd8 <osSignalWait>
	  /* 1--- Reset Value ---*/
	  respond_lenght		= 0;
 8002168:	2300      	movs	r3, #0
 800216a:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
	  respond_packed_lenght = 0;
 800216e:	2300      	movs	r3, #0
 8002170:	f8c7 355c 	str.w	r3, [r7, #1372]	; 0x55c
	  infor_lenght			= 0;
 8002174:	2300      	movs	r3, #0
 8002176:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
	  infor_packed_lenght	= 0;
 800217a:	2300      	movs	r3, #0
 800217c:	f8c7 3558 	str.w	r3, [r7, #1368]	; 0x558
	  task_usb_lenght		= 0;
 8002180:	2300      	movs	r3, #0
 8002182:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
	  usb_lenght			= 0;
 8002186:	2300      	movs	r3, #0
 8002188:	f8c7 3540 	str.w	r3, [r7, #1344]	; 0x540
	  // Update new position
#ifdef SIMULATION
	  memcpy(&positionPrevios, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 800218c:	4a9f      	ldr	r2, [pc, #636]	; (800240c <StartDefaultTask+0x364>)
 800218e:	4ba0      	ldr	r3, [pc, #640]	; (8002410 <StartDefaultTask+0x368>)
 8002190:	4610      	mov	r0, r2
 8002192:	4619      	mov	r1, r3
 8002194:	2368      	movs	r3, #104	; 0x68
 8002196:	461a      	mov	r2, r3
 8002198:	f011 fd62 	bl	8013c60 <memcpy>
	  memcpy(&positionCurrent, &positionNext, sizeof(SCARA_PositionTypeDef));
 800219c:	4a9c      	ldr	r2, [pc, #624]	; (8002410 <StartDefaultTask+0x368>)
 800219e:	4b98      	ldr	r3, [pc, #608]	; (8002400 <StartDefaultTask+0x358>)
 80021a0:	4610      	mov	r0, r2
 80021a2:	4619      	mov	r1, r3
 80021a4:	2368      	movs	r3, #104	; 0x68
 80021a6:	461a      	mov	r2, r3
 80021a8:	f011 fd5a 	bl	8013c60 <memcpy>
#endif
	  if(scaraIsScanLimit()) {
 80021ac:	f006 fcc6 	bl	8008b3c <scaraIsScanLimit>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d017      	beq.n	80021e6 <StartDefaultTask+0x13e>
		  lowlayer_readTruePosition(&positionTrue);
 80021b6:	4897      	ldr	r0, [pc, #604]	; (8002414 <StartDefaultTask+0x36c>)
 80021b8:	f001 fcbe 	bl	8003b38 <lowlayer_readTruePosition>
		  kinematicForward(&positionTrue);
 80021bc:	4895      	ldr	r0, [pc, #596]	; (8002414 <StartDefaultTask+0x36c>)
 80021be:	f000 fe07 	bl	8002dd0 <kinematicForward>
		  positionTrue.t = positionCurrent.t;
 80021c2:	4b93      	ldr	r3, [pc, #588]	; (8002410 <StartDefaultTask+0x368>)
 80021c4:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 80021c8:	4a92      	ldr	r2, [pc, #584]	; (8002414 <StartDefaultTask+0x36c>)
 80021ca:	e9c2 3406 	strd	r3, r4, [r2, #24]
		  positionTrue.total_time = positionCurrent.total_time;
 80021ce:	4b90      	ldr	r3, [pc, #576]	; (8002410 <StartDefaultTask+0x368>)
 80021d0:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 80021d4:	4a8f      	ldr	r2, [pc, #572]	; (8002414 <StartDefaultTask+0x36c>)
 80021d6:	e9c2 3408 	strd	r3, r4, [r2, #32]
		  positionTrue.q = positionCurrent.q;
 80021da:	4b8d      	ldr	r3, [pc, #564]	; (8002410 <StartDefaultTask+0x368>)
 80021dc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80021e0:	4a8c      	ldr	r2, [pc, #560]	; (8002414 <StartDefaultTask+0x36c>)
 80021e2:	e9c2 3400 	strd	r3, r4, [r2]
	  }
	  /* 2--- Check New Duty Phase ---*/
	  // Check mail
	  ret_mail = osMailGet(commandMailHandle, 0);
 80021e6:	4b8c      	ldr	r3, [pc, #560]	; (8002418 <StartDefaultTask+0x370>)
 80021e8:	6819      	ldr	r1, [r3, #0]
 80021ea:	f207 532c 	addw	r3, r7, #1324	; 0x52c
 80021ee:	2200      	movs	r2, #0
 80021f0:	4618      	mov	r0, r3
 80021f2:	f00e f985 	bl	8010500 <osMailGet>
	  if ( ret_mail.status == osEventMail) {
 80021f6:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 80021fa:	2b20      	cmp	r3, #32
 80021fc:	d116      	bne.n	800222c <StartDefaultTask+0x184>
		   dataMail = ret_mail.value.p;
 80021fe:	f8d7 3530 	ldr.w	r3, [r7, #1328]	; 0x530
 8002202:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
		   memcpy( &duty_cmd, dataMail, sizeof(DUTY_Command_TypeDef));
 8002206:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800220a:	f44f 7284 	mov.w	r2, #264	; 0x108
 800220e:	f8d7 153c 	ldr.w	r1, [r7, #1340]	; 0x53c
 8002212:	4618      	mov	r0, r3
 8002214:	f011 fd24 	bl	8013c60 <memcpy>
		   isNewDuty = TRUE;
 8002218:	2301      	movs	r3, #1
 800221a:	f887 357f 	strb.w	r3, [r7, #1407]	; 0x57f
		   osMailFree(commandMailHandle, dataMail);/* free memory allocated for mail */
 800221e:	4b7e      	ldr	r3, [pc, #504]	; (8002418 <StartDefaultTask+0x370>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f8d7 153c 	ldr.w	r1, [r7, #1340]	; 0x53c
 8002226:	4618      	mov	r0, r3
 8002228:	f00e f9de 	bl	80105e8 <osMailFree>
	  }
	  if(isNewDuty) {
 800222c:	f897 357f 	ldrb.w	r3, [r7, #1407]	; 0x57f
 8002230:	2b00      	cmp	r3, #0
 8002232:	f000 80a8 	beq.w	8002386 <StartDefaultTask+0x2de>
		  memset(respond, 0, 40);
 8002236:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800223a:	2228      	movs	r2, #40	; 0x28
 800223c:	2100      	movs	r1, #0
 800223e:	4618      	mov	r0, r3
 8002240:	f011 fd32 	bl	8013ca8 <memset>
		  switch( duty_cmd.robot_mode) {
 8002244:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d01d      	beq.n	800228a <StartDefaultTask+0x1e2>
 800224e:	2b02      	cmp	r3, #2
 8002250:	d04b      	beq.n	80022ea <StartDefaultTask+0x242>
 8002252:	2b00      	cmp	r3, #0
 8002254:	f040 808f 	bne.w	8002376 <StartDefaultTask+0x2ce>
		  case SCARA_MODE_STOP:
			  {
				  no_stop++;
 8002258:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 800225c:	3301      	adds	r3, #1
 800225e:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
				  current_mode	 = SCARA_MODE_STOP;
 8002262:	2300      	movs	r3, #0
 8002264:	f887 3557 	strb.w	r3, [r7, #1367]	; 0x557
				  respond_lenght = commandRespond(RPD_OK,
 8002268:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800226c:	6859      	ldr	r1, [r3, #4]
 800226e:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8002272:	4a6a      	ldr	r2, [pc, #424]	; (800241c <StartDefaultTask+0x374>)
 8002274:	2008      	movs	r0, #8
 8002276:	f7ff fa63 	bl	8001740 <commandRespond>
 800227a:	f8c7 0564 	str.w	r0, [r7, #1380]	; 0x564
						  	  	  	  	  	  	  duty_cmd.id_command,
												  "Stop Now",
												  (char *)respond);
				  LOG_REPORT("ROBOT STOP !!!", __LINE__);
 800227e:	f44f 7189 	mov.w	r1, #274	; 0x112
 8002282:	4867      	ldr	r0, [pc, #412]	; (8002420 <StartDefaultTask+0x378>)
 8002284:	f7ff faac 	bl	80017e0 <LOG_REPORT>
			  }
			  break;
 8002288:	e07a      	b.n	8002380 <StartDefaultTask+0x2d8>

		  case SCARA_MODE_SCAN:
			  {
				  if (SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_duty_state) {
 800228a:	f897 3557 	ldrb.w	r3, [r7, #1367]	; 0x557
 800228e:	2b02      	cmp	r3, #2
 8002290:	d11a      	bne.n	80022c8 <StartDefaultTask+0x220>
 8002292:	f897 3556 	ldrb.w	r3, [r7, #1366]	; 0x556
 8002296:	2b00      	cmp	r3, #0
 8002298:	d116      	bne.n	80022c8 <StartDefaultTask+0x220>
					  no_scan++;
 800229a:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 800229e:	3301      	adds	r3, #1
 80022a0:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
					  current_mode = SCARA_MODE_SCAN;
 80022a4:	2301      	movs	r3, #1
 80022a6:	f887 3557 	strb.w	r3, [r7, #1367]	; 0x557
					  current_scan_state = SCARA_SCAN_STATE_INIT;
 80022aa:	2300      	movs	r3, #0
 80022ac:	f887 3555 	strb.w	r3, [r7, #1365]	; 0x555
					  respond_lenght = commandRespond(RPD_OK,
 80022b0:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80022b4:	6859      	ldr	r1, [r3, #4]
 80022b6:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80022ba:	4a5a      	ldr	r2, [pc, #360]	; (8002424 <StartDefaultTask+0x37c>)
 80022bc:	2008      	movs	r0, #8
 80022be:	f7ff fa3f 	bl	8001740 <commandRespond>
 80022c2:	f8c7 0564 	str.w	r0, [r7, #1380]	; 0x564
													  "Busy",
													  (char *)respond);
					  LOG_REPORT("SCAN FAIL: BUSY", __LINE__);
				  }
			  }
			  break;
 80022c6:	e05b      	b.n	8002380 <StartDefaultTask+0x2d8>
					  respond_lenght = commandRespond(RPD_ERROR,
 80022c8:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80022cc:	6859      	ldr	r1, [r3, #4]
 80022ce:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80022d2:	4a55      	ldr	r2, [pc, #340]	; (8002428 <StartDefaultTask+0x380>)
 80022d4:	2007      	movs	r0, #7
 80022d6:	f7ff fa33 	bl	8001740 <commandRespond>
 80022da:	f8c7 0564 	str.w	r0, [r7, #1380]	; 0x564
					  LOG_REPORT("SCAN FAIL: BUSY", __LINE__);
 80022de:	f240 1125 	movw	r1, #293	; 0x125
 80022e2:	4852      	ldr	r0, [pc, #328]	; (800242c <StartDefaultTask+0x384>)
 80022e4:	f7ff fa7c 	bl	80017e0 <LOG_REPORT>
			  break;
 80022e8:	e04a      	b.n	8002380 <StartDefaultTask+0x2d8>

		  case SCARA_MODE_DUTY:
			  {
				  no_duty++;
 80022ea:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80022ee:	3301      	adds	r3, #1
 80022f0:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
				  if (SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_duty_state) {
 80022f4:	f897 3557 	ldrb.w	r3, [r7, #1367]	; 0x557
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d125      	bne.n	8002348 <StartDefaultTask+0x2a0>
 80022fc:	f897 3556 	ldrb.w	r3, [r7, #1366]	; 0x556
 8002300:	2b00      	cmp	r3, #0
 8002302:	d121      	bne.n	8002348 <StartDefaultTask+0x2a0>
					  if (scaraIsScanLimit()) {
 8002304:	f006 fc1a 	bl	8008b3c <scaraIsScanLimit>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d006      	beq.n	800231c <StartDefaultTask+0x274>
						  current_mode	 = SCARA_MODE_DUTY;
 800230e:	2302      	movs	r3, #2
 8002310:	f887 3557 	strb.w	r3, [r7, #1367]	; 0x557
						  current_duty_state	 = SCARA_DUTY_STATE_INIT;
 8002314:	2301      	movs	r3, #1
 8002316:	f887 3556 	strb.w	r3, [r7, #1366]	; 0x556
					  if (scaraIsScanLimit()) {
 800231a:	e02b      	b.n	8002374 <StartDefaultTask+0x2cc>
					  } else {
						  no_duty_fail++;
 800231c:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 8002320:	3301      	adds	r3, #1
 8002322:	f8c7 3568 	str.w	r3, [r7, #1384]	; 0x568
						  respond_lenght = commandRespond(RPD_ERROR,
 8002326:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800232a:	6859      	ldr	r1, [r3, #4]
 800232c:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8002330:	4a3f      	ldr	r2, [pc, #252]	; (8002430 <StartDefaultTask+0x388>)
 8002332:	2007      	movs	r0, #7
 8002334:	f7ff fa04 	bl	8001740 <commandRespond>
 8002338:	f8c7 0564 	str.w	r0, [r7, #1380]	; 0x564
						  							  	  duty_cmd.id_command,
														  "Has Not Scan Yet.",
														  (char *)respond);
						  LOG_REPORT("MOVE FAIL:NOT SCAN", __LINE__);
 800233c:	f240 1137 	movw	r1, #311	; 0x137
 8002340:	483c      	ldr	r0, [pc, #240]	; (8002434 <StartDefaultTask+0x38c>)
 8002342:	f7ff fa4d 	bl	80017e0 <LOG_REPORT>
					  if (scaraIsScanLimit()) {
 8002346:	e015      	b.n	8002374 <StartDefaultTask+0x2cc>
					  }
				  } else {
					  no_duty_fail++;
 8002348:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 800234c:	3301      	adds	r3, #1
 800234e:	f8c7 3568 	str.w	r3, [r7, #1384]	; 0x568
					  respond_lenght	= commandRespond(RPD_ERROR,
 8002352:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002356:	6859      	ldr	r1, [r3, #4]
 8002358:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800235c:	4a36      	ldr	r2, [pc, #216]	; (8002438 <StartDefaultTask+0x390>)
 800235e:	2007      	movs	r0, #7
 8002360:	f7ff f9ee 	bl	8001740 <commandRespond>
 8002364:	f8c7 0564 	str.w	r0, [r7, #1380]	; 0x564
					  							  	  	  duty_cmd.id_command,
														  "Busy.",
														  (char *)respond);
					  LOG_REPORT("MOVE FAIL:BUSY", __LINE__);
 8002368:	f240 113f 	movw	r1, #319	; 0x13f
 800236c:	4833      	ldr	r0, [pc, #204]	; (800243c <StartDefaultTask+0x394>)
 800236e:	f7ff fa37 	bl	80017e0 <LOG_REPORT>
				  }
			  }
			  break;
 8002372:	e005      	b.n	8002380 <StartDefaultTask+0x2d8>
 8002374:	e004      	b.n	8002380 <StartDefaultTask+0x2d8>
		  default:
			  {
				  LOG_REPORT("CMD Error Mode !!!", __LINE__);
 8002376:	f240 1145 	movw	r1, #325	; 0x145
 800237a:	4831      	ldr	r0, [pc, #196]	; (8002440 <StartDefaultTask+0x398>)
 800237c:	f7ff fa30 	bl	80017e0 <LOG_REPORT>
			  }
		  }
		  isNewDuty = FALSE;
 8002380:	2300      	movs	r3, #0
 8002382:	f887 357f 	strb.w	r3, [r7, #1407]	; 0x57f
	  }

	/* 3--- Execute Phase ---*/
	  switch( current_mode) {
 8002386:	f897 3557 	ldrb.w	r3, [r7, #1367]	; 0x557
 800238a:	2b01      	cmp	r3, #1
 800238c:	d00b      	beq.n	80023a6 <StartDefaultTask+0x2fe>
 800238e:	2b02      	cmp	r3, #2
 8002390:	d07b      	beq.n	800248a <StartDefaultTask+0x3e2>
 8002392:	2b00      	cmp	r3, #0
 8002394:	f040 81d2 	bne.w	800273c <StartDefaultTask+0x694>
	  case SCARA_MODE_STOP:
		  {
			  current_mode 	= SCARA_MODE_DUTY;
 8002398:	2302      	movs	r3, #2
 800239a:	f887 3557 	strb.w	r3, [r7, #1367]	; 0x557
			  current_duty_state = SCARA_DUTY_STATE_READY;
 800239e:	2300      	movs	r3, #0
 80023a0:	f887 3556 	strb.w	r3, [r7, #1366]	; 0x556
		  }
		  break;
 80023a4:	e1e8      	b.n	8002778 <StartDefaultTask+0x6d0>

	  case SCARA_MODE_SCAN:
		  {
			  switch (current_scan_state) {
 80023a6:	f897 3555 	ldrb.w	r3, [r7, #1365]	; 0x555
 80023aa:	2b03      	cmp	r3, #3
 80023ac:	d863      	bhi.n	8002476 <StartDefaultTask+0x3ce>
 80023ae:	a201      	add	r2, pc, #4	; (adr r2, 80023b4 <StartDefaultTask+0x30c>)
 80023b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023b4:	080023c5 	.word	0x080023c5
 80023b8:	080023d1 	.word	0x080023d1
 80023bc:	08002445 	.word	0x08002445
 80023c0:	08002459 	.word	0x08002459
			  case SCARA_SCAN_STATE_INIT:
				  {
					  lowlayer_scanReset();
 80023c4:	f001 f9ec 	bl	80037a0 <lowlayer_scanReset>
					  current_scan_state = SCARA_SCAN_STATE_HARD;
 80023c8:	2301      	movs	r3, #1
 80023ca:	f887 3555 	strb.w	r3, [r7, #1365]	; 0x555
				  }
				  break;
 80023ce:	e05b      	b.n	8002488 <StartDefaultTask+0x3e0>
			  case SCARA_SCAN_STATE_HARD:
				  {
					  if(lowlayer_scanFlow()) {
 80023d0:	f001 f9fe 	bl	80037d0 <lowlayer_scanFlow>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d053      	beq.n	8002482 <StartDefaultTask+0x3da>
						  current_scan_state = SCARA_SCAN_STATE_SOFT;
 80023da:	2302      	movs	r3, #2
 80023dc:	f887 3555 	strb.w	r3, [r7, #1365]	; 0x555
					  }
				  }
				  break;
 80023e0:	e04f      	b.n	8002482 <StartDefaultTask+0x3da>
 80023e2:	bf00      	nop
 80023e4:	f3af 8000 	nop.w
 80023e8:	40000000 	.word	0x40000000
 80023ec:	bff0c152 	.word	0xbff0c152
 80023f0:	40000000 	.word	0x40000000
 80023f4:	3ff0c152 	.word	0x3ff0c152
 80023f8:	40020400 	.word	0x40020400
 80023fc:	08019bb4 	.word	0x08019bb4
 8002400:	20005e28 	.word	0x20005e28
 8002404:	40240000 	.word	0x40240000
 8002408:	20005ed0 	.word	0x20005ed0
 800240c:	20005cf0 	.word	0x20005cf0
 8002410:	20005d58 	.word	0x20005d58
 8002414:	20005dc0 	.word	0x20005dc0
 8002418:	200052e4 	.word	0x200052e4
 800241c:	08019bd4 	.word	0x08019bd4
 8002420:	08019be0 	.word	0x08019be0
 8002424:	08019bf0 	.word	0x08019bf0
 8002428:	08019bfc 	.word	0x08019bfc
 800242c:	08019c04 	.word	0x08019c04
 8002430:	08019c14 	.word	0x08019c14
 8002434:	08019c28 	.word	0x08019c28
 8002438:	08019c3c 	.word	0x08019c3c
 800243c:	08019c44 	.word	0x08019c44
 8002440:	08019c54 	.word	0x08019c54
			  case SCARA_SCAN_STATE_SOFT:
				  {
					  if(lowlayer_goToSoftLimit(&positionNext)) {
 8002444:	48c2      	ldr	r0, [pc, #776]	; (8002750 <StartDefaultTask+0x6a8>)
 8002446:	f001 fafb 	bl	8003a40 <lowlayer_goToSoftLimit>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d01a      	beq.n	8002486 <StartDefaultTask+0x3de>
						  current_scan_state = SCARA_SCAN_STATE_FINISH;
 8002450:	2303      	movs	r3, #3
 8002452:	f887 3555 	strb.w	r3, [r7, #1365]	; 0x555
					  	}
				  }
				  break;
 8002456:	e016      	b.n	8002486 <StartDefaultTask+0x3de>
			  case SCARA_SCAN_STATE_FINISH:
				  {
					  lowlayer_readSetPosition(&positionNext);
 8002458:	48bd      	ldr	r0, [pc, #756]	; (8002750 <StartDefaultTask+0x6a8>)
 800245a:	f001 fc49 	bl	8003cf0 <lowlayer_readSetPosition>
					  current_mode 	= SCARA_MODE_DUTY;
 800245e:	2302      	movs	r3, #2
 8002460:	f887 3557 	strb.w	r3, [r7, #1367]	; 0x557
					  current_duty_state = SCARA_DUTY_STATE_READY;
 8002464:	2300      	movs	r3, #0
 8002466:	f887 3556 	strb.w	r3, [r7, #1366]	; 0x556
					  kinematicForward(&positionNext);
 800246a:	48b9      	ldr	r0, [pc, #740]	; (8002750 <StartDefaultTask+0x6a8>)
 800246c:	f000 fcb0 	bl	8002dd0 <kinematicForward>
					  scaraSetScanFlag();
 8002470:	f006 fafe 	bl	8008a70 <scaraSetScanFlag>
//					  infor_lenght 		= commandRespond(RPD_DONE,
//					 	  	  	  	  	  	  	  	  	 0,
//					 									(char *)position,
//					 									(char *)infor);
				  }
				  break;
 8002474:	e008      	b.n	8002488 <StartDefaultTask+0x3e0>
			  default:
				  {
					  LOG_REPORT("ERROR STATE !!!", __LINE__);
 8002476:	f44f 71be 	mov.w	r1, #380	; 0x17c
 800247a:	48b6      	ldr	r0, [pc, #728]	; (8002754 <StartDefaultTask+0x6ac>)
 800247c:	f7ff f9b0 	bl	80017e0 <LOG_REPORT>
					  while(1);
 8002480:	e7fe      	b.n	8002480 <StartDefaultTask+0x3d8>
				  break;
 8002482:	bf00      	nop
 8002484:	e178      	b.n	8002778 <StartDefaultTask+0x6d0>
				  break;
 8002486:	bf00      	nop
				  }
			  }

		  }
		  break;
 8002488:	e176      	b.n	8002778 <StartDefaultTask+0x6d0>

	  case SCARA_MODE_DUTY:
		  {
			  switch (current_duty_state){
 800248a:	f897 3556 	ldrb.w	r3, [r7, #1366]	; 0x556
 800248e:	2b03      	cmp	r3, #3
 8002490:	f200 814d 	bhi.w	800272e <StartDefaultTask+0x686>
 8002494:	a201      	add	r2, pc, #4	; (adr r2, 800249c <StartDefaultTask+0x3f4>)
 8002496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800249a:	bf00      	nop
 800249c:	080024ad 	.word	0x080024ad
 80024a0:	080024b1 	.word	0x080024b1
 80024a4:	080025d1 	.word	0x080025d1
 80024a8:	080026cb 	.word	0x080026cb
			  case SCARA_DUTY_STATE_READY:
				  {
					  // Do nothing();
					  __NOP();
 80024ac:	bf00      	nop
				  }
			  break;
 80024ae:	e144      	b.n	800273a <StartDefaultTask+0x692>

			  case SCARA_DUTY_STATE_INIT:
				  {
					  SCARA_StatusTypeDef status1, status2;
					  status1 = scaraInitDuty(duty_cmd);
 80024b0:	f507 6484 	add.w	r4, r7, #1056	; 0x420
 80024b4:	4668      	mov	r0, sp
 80024b6:	f104 0310 	add.w	r3, r4, #16
 80024ba:	22f8      	movs	r2, #248	; 0xf8
 80024bc:	4619      	mov	r1, r3
 80024be:	f011 fbcf 	bl	8013c60 <memcpy>
 80024c2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80024c6:	f002 f85f 	bl	8004588 <scaraInitDuty>
 80024ca:	4603      	mov	r3, r0
 80024cc:	f887 353a 	strb.w	r3, [r7, #1338]	; 0x53a
					  if ( SCARA_STATUS_OK == status1) {
 80024d0:	f897 353a 	ldrb.w	r3, [r7, #1338]	; 0x53a
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d15e      	bne.n	8002596 <StartDefaultTask+0x4ee>
						  status2 = scaraTestDuty();
 80024d8:	f006 fa52 	bl	8008980 <scaraTestDuty>
 80024dc:	4603      	mov	r3, r0
 80024de:	f887 3539 	strb.w	r3, [r7, #1337]	; 0x539
						  if (SCARA_STATUS_OK == status2) {
 80024e2:	f897 3539 	ldrb.w	r3, [r7, #1337]	; 0x539
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d138      	bne.n	800255c <StartDefaultTask+0x4b4>
						  no_duty_success++;
 80024ea:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 80024ee:	3301      	adds	r3, #1
 80024f0:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
						  current_duty_state		= SCARA_DUTY_STATE_FLOW;
 80024f4:	2302      	movs	r3, #2
 80024f6:	f887 3556 	strb.w	r3, [r7, #1366]	; 0x556
						  run_time			= 0;
 80024fa:	f04f 0300 	mov.w	r3, #0
 80024fe:	f04f 0400 	mov.w	r4, #0
 8002502:	f507 62a9 	add.w	r2, r7, #1352	; 0x548
 8002506:	e9c2 3400 	strd	r3, r4, [r2]
						  // Respond
						  respond_lenght 	= commandRespond(RPD_OK,
 800250a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800250e:	6859      	ldr	r1, [r3, #4]
 8002510:	f897 353a 	ldrb.w	r3, [r7, #1338]	; 0x53a
								  	  	  	  	  	  	  	  duty_cmd.id_command,
															  (char *)DETAIL_STATUS[status1],
 8002514:	4a90      	ldr	r2, [pc, #576]	; (8002758 <StartDefaultTask+0x6b0>)
 8002516:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
						  respond_lenght 	= commandRespond(RPD_OK,
 800251a:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800251e:	2008      	movs	r0, #8
 8002520:	f7ff f90e 	bl	8001740 <commandRespond>
 8002524:	f8c7 0564 	str.w	r0, [r7, #1380]	; 0x564
															  (char *)respond);
						  //scaraPosition2String((char *)position, positionCurrent);
						  scaraPosition2String((char *)position, positionTrue);
 8002528:	4c8c      	ldr	r4, [pc, #560]	; (800275c <StartDefaultTask+0x6b4>)
 800252a:	f507 755c 	add.w	r5, r7, #880	; 0x370
 800252e:	4668      	mov	r0, sp
 8002530:	f104 0308 	add.w	r3, r4, #8
 8002534:	2260      	movs	r2, #96	; 0x60
 8002536:	4619      	mov	r1, r3
 8002538:	f011 fb92 	bl	8013c60 <memcpy>
 800253c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002540:	4628      	mov	r0, r5
 8002542:	f006 fb35 	bl	8008bb0 <scaraPosition2String>
						  // Start Inform
						  infor_lenght 		= commandRespond(RPD_START,
 8002546:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 800254a:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800254e:	2100      	movs	r1, #0
 8002550:	2003      	movs	r0, #3
 8002552:	f7ff f8f5 	bl	8001740 <commandRespond>
 8002556:	f8c7 0560 	str.w	r0, [r7, #1376]	; 0x560
															  (char *)DETAIL_STATUS[status1],
															  (char *)respond);
						  LOG_REPORT("INIT FAIL", __LINE__);
					  }
				  }
			  break;
 800255a:	e0ee      	b.n	800273a <StartDefaultTask+0x692>
							  no_duty_fail++;
 800255c:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 8002560:	3301      	adds	r3, #1
 8002562:	f8c7 3568 	str.w	r3, [r7, #1384]	; 0x568
							  current_duty_state 	= SCARA_DUTY_STATE_READY;
 8002566:	2300      	movs	r3, #0
 8002568:	f887 3556 	strb.w	r3, [r7, #1366]	; 0x556
							  respond_lenght	= commandRespond(RPD_ERROR,
 800256c:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002570:	6859      	ldr	r1, [r3, #4]
 8002572:	f897 3539 	ldrb.w	r3, [r7, #1337]	; 0x539
																  (char *)DETAIL_STATUS[status2],
 8002576:	4a78      	ldr	r2, [pc, #480]	; (8002758 <StartDefaultTask+0x6b0>)
 8002578:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
							  respond_lenght	= commandRespond(RPD_ERROR,
 800257c:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8002580:	2007      	movs	r0, #7
 8002582:	f7ff f8dd 	bl	8001740 <commandRespond>
 8002586:	f8c7 0564 	str.w	r0, [r7, #1380]	; 0x564
							  LOG_REPORT("TEST FAIL", __LINE__);
 800258a:	f240 11ab 	movw	r1, #427	; 0x1ab
 800258e:	4874      	ldr	r0, [pc, #464]	; (8002760 <StartDefaultTask+0x6b8>)
 8002590:	f7ff f926 	bl	80017e0 <LOG_REPORT>
			  break;
 8002594:	e0d1      	b.n	800273a <StartDefaultTask+0x692>
						  no_duty_fail++;
 8002596:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 800259a:	3301      	adds	r3, #1
 800259c:	f8c7 3568 	str.w	r3, [r7, #1384]	; 0x568
						  current_duty_state 	= SCARA_DUTY_STATE_READY;
 80025a0:	2300      	movs	r3, #0
 80025a2:	f887 3556 	strb.w	r3, [r7, #1366]	; 0x556
						  respond_lenght	= commandRespond(RPD_ERROR,
 80025a6:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80025aa:	6859      	ldr	r1, [r3, #4]
 80025ac:	f897 353a 	ldrb.w	r3, [r7, #1338]	; 0x53a
															  (char *)DETAIL_STATUS[status1],
 80025b0:	4a69      	ldr	r2, [pc, #420]	; (8002758 <StartDefaultTask+0x6b0>)
 80025b2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
						  respond_lenght	= commandRespond(RPD_ERROR,
 80025b6:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80025ba:	2007      	movs	r0, #7
 80025bc:	f7ff f8c0 	bl	8001740 <commandRespond>
 80025c0:	f8c7 0564 	str.w	r0, [r7, #1380]	; 0x564
						  LOG_REPORT("INIT FAIL", __LINE__);
 80025c4:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 80025c8:	4866      	ldr	r0, [pc, #408]	; (8002764 <StartDefaultTask+0x6bc>)
 80025ca:	f7ff f909 	bl	80017e0 <LOG_REPORT>
			  break;
 80025ce:	e0b4      	b.n	800273a <StartDefaultTask+0x692>

			  case SCARA_DUTY_STATE_FLOW:
				  {
					  HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_RESET);
 80025d0:	2200      	movs	r2, #0
 80025d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80025d6:	4864      	ldr	r0, [pc, #400]	; (8002768 <StartDefaultTask+0x6c0>)
 80025d8:	f007 fd06 	bl	8009fe8 <HAL_GPIO_WritePin>
					  SCARA_StatusTypeDef status;
					  // Increase run time
					  run_time += T_SAMPLING;
 80025dc:	a35a      	add	r3, pc, #360	; (adr r3, 8002748 <StartDefaultTask+0x6a0>)
 80025de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e2:	f507 61a9 	add.w	r1, r7, #1352	; 0x548
 80025e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80025ea:	f7fd fe5f 	bl	80002ac <__adddf3>
 80025ee:	4603      	mov	r3, r0
 80025f0:	460c      	mov	r4, r1
 80025f2:	f507 62a9 	add.w	r2, r7, #1352	; 0x548
 80025f6:	e9c2 3400 	strd	r3, r4, [r2]
					  // Check Time Out
					  if (scaraIsFinish(run_time)) {
 80025fa:	f507 63a9 	add.w	r3, r7, #1352	; 0x548
 80025fe:	ed93 0b00 	vldr	d0, [r3]
 8002602:	f006 faa9 	bl	8008b58 <scaraIsFinish>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d003      	beq.n	8002614 <StartDefaultTask+0x56c>
						  current_duty_state = SCARA_DUTY_STATE_FINISH;// Work Done
 800260c:	2303      	movs	r3, #3
 800260e:	f887 3556 	strb.w	r3, [r7, #1366]	; 0x556
															(char *)infor);
							  LOG_REPORT("STOP", __LINE__);
						  }
					  }
				  }
			  break;
 8002612:	e092      	b.n	800273a <StartDefaultTask+0x692>
						  status = scaraFlowDuty(run_time , &positionNext, positionCurrent);
 8002614:	4c55      	ldr	r4, [pc, #340]	; (800276c <StartDefaultTask+0x6c4>)
 8002616:	4668      	mov	r0, sp
 8002618:	f104 0308 	add.w	r3, r4, #8
 800261c:	2260      	movs	r2, #96	; 0x60
 800261e:	4619      	mov	r1, r3
 8002620:	f011 fb1e 	bl	8013c60 <memcpy>
 8002624:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002628:	4849      	ldr	r0, [pc, #292]	; (8002750 <StartDefaultTask+0x6a8>)
 800262a:	f507 61a9 	add.w	r1, r7, #1352	; 0x548
 800262e:	ed91 0b00 	vldr	d0, [r1]
 8002632:	f004 fc5f 	bl	8006ef4 <scaraFlowDuty>
 8002636:	4603      	mov	r3, r0
 8002638:	f887 353b 	strb.w	r3, [r7, #1339]	; 0x53b
						  if ( SCARA_STATUS_OK == status) {
 800263c:	f897 353b 	ldrb.w	r3, [r7, #1339]	; 0x53b
 8002640:	2b00      	cmp	r3, #0
 8002642:	d12c      	bne.n	800269e <StartDefaultTask+0x5f6>
							  lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 8002644:	4c49      	ldr	r4, [pc, #292]	; (800276c <StartDefaultTask+0x6c4>)
 8002646:	4a42      	ldr	r2, [pc, #264]	; (8002750 <StartDefaultTask+0x6a8>)
 8002648:	ab16      	add	r3, sp, #88	; 0x58
 800264a:	4611      	mov	r1, r2
 800264c:	2268      	movs	r2, #104	; 0x68
 800264e:	4618      	mov	r0, r3
 8002650:	f011 fb06 	bl	8013c60 <memcpy>
 8002654:	4668      	mov	r0, sp
 8002656:	f104 0310 	add.w	r3, r4, #16
 800265a:	2258      	movs	r2, #88	; 0x58
 800265c:	4619      	mov	r1, r3
 800265e:	f011 faff 	bl	8013c60 <memcpy>
 8002662:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002666:	f001 fbf7 	bl	8003e58 <lowlayer_computeAndWritePulse>
							  scaraPosition2String((char *)position, positionTrue);
 800266a:	4c3c      	ldr	r4, [pc, #240]	; (800275c <StartDefaultTask+0x6b4>)
 800266c:	f507 755c 	add.w	r5, r7, #880	; 0x370
 8002670:	4668      	mov	r0, sp
 8002672:	f104 0308 	add.w	r3, r4, #8
 8002676:	2260      	movs	r2, #96	; 0x60
 8002678:	4619      	mov	r1, r3
 800267a:	f011 faf1 	bl	8013c60 <memcpy>
 800267e:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002682:	4628      	mov	r0, r5
 8002684:	f006 fa94 	bl	8008bb0 <scaraPosition2String>
							  infor_lenght = commandRespond(RPD_RUNNING,
 8002688:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 800268c:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8002690:	2100      	movs	r1, #0
 8002692:	2004      	movs	r0, #4
 8002694:	f7ff f854 	bl	8001740 <commandRespond>
 8002698:	f8c7 0560 	str.w	r0, [r7, #1376]	; 0x560
			  break;
 800269c:	e04d      	b.n	800273a <StartDefaultTask+0x692>
							  current_duty_state = SCARA_DUTY_STATE_FINISH;
 800269e:	2303      	movs	r3, #3
 80026a0:	f887 3556 	strb.w	r3, [r7, #1366]	; 0x556
							  infor_lenght = commandRespond(RPD_STOP,
 80026a4:	f897 353b 	ldrb.w	r3, [r7, #1339]	; 0x53b
															(char *)DETAIL_STATUS[status],
 80026a8:	4a2b      	ldr	r2, [pc, #172]	; (8002758 <StartDefaultTask+0x6b0>)
 80026aa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
							  infor_lenght = commandRespond(RPD_STOP,
 80026ae:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 80026b2:	2100      	movs	r1, #0
 80026b4:	2006      	movs	r0, #6
 80026b6:	f7ff f843 	bl	8001740 <commandRespond>
 80026ba:	f8c7 0560 	str.w	r0, [r7, #1376]	; 0x560
							  LOG_REPORT("STOP", __LINE__);
 80026be:	f240 11d5 	movw	r1, #469	; 0x1d5
 80026c2:	482b      	ldr	r0, [pc, #172]	; (8002770 <StartDefaultTask+0x6c8>)
 80026c4:	f7ff f88c 	bl	80017e0 <LOG_REPORT>
			  break;
 80026c8:	e037      	b.n	800273a <StartDefaultTask+0x692>

			  case SCARA_DUTY_STATE_FINISH:
				  {
					  //HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_SET);
					  current_duty_state = SCARA_DUTY_STATE_READY;
 80026ca:	2300      	movs	r3, #0
 80026cc:	f887 3556 	strb.w	r3, [r7, #1366]	; 0x556
					  positionNext.t = 0;
 80026d0:	4a1f      	ldr	r2, [pc, #124]	; (8002750 <StartDefaultTask+0x6a8>)
 80026d2:	f04f 0300 	mov.w	r3, #0
 80026d6:	f04f 0400 	mov.w	r4, #0
 80026da:	e9c2 3406 	strd	r3, r4, [r2, #24]
					  positionNext.total_time = 0;
 80026de:	4a1c      	ldr	r2, [pc, #112]	; (8002750 <StartDefaultTask+0x6a8>)
 80026e0:	f04f 0300 	mov.w	r3, #0
 80026e4:	f04f 0400 	mov.w	r4, #0
 80026e8:	e9c2 3408 	strd	r3, r4, [r2, #32]
					  positionNext.q = 0;
 80026ec:	4a18      	ldr	r2, [pc, #96]	; (8002750 <StartDefaultTask+0x6a8>)
 80026ee:	f04f 0300 	mov.w	r3, #0
 80026f2:	f04f 0400 	mov.w	r4, #0
 80026f6:	e9c2 3400 	strd	r3, r4, [r2]
					  // Done Inform
					  //scaraPosition2String((char *)position, positionCurrent);
					  scaraPosition2String((char *)position, positionTrue);
 80026fa:	4c18      	ldr	r4, [pc, #96]	; (800275c <StartDefaultTask+0x6b4>)
 80026fc:	f507 755c 	add.w	r5, r7, #880	; 0x370
 8002700:	4668      	mov	r0, sp
 8002702:	f104 0308 	add.w	r3, r4, #8
 8002706:	2260      	movs	r2, #96	; 0x60
 8002708:	4619      	mov	r1, r3
 800270a:	f011 faa9 	bl	8013c60 <memcpy>
 800270e:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002712:	4628      	mov	r0, r5
 8002714:	f006 fa4c 	bl	8008bb0 <scaraPosition2String>
					  infor_lenght 		= commandRespond(RPD_DONE,
 8002718:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 800271c:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8002720:	2100      	movs	r1, #0
 8002722:	2005      	movs	r0, #5
 8002724:	f7ff f80c 	bl	8001740 <commandRespond>
 8002728:	f8c7 0560 	str.w	r0, [r7, #1376]	; 0x560
	  	  	  	  	  	  	  	  	  	  	  	  	  	 0,
														 (char *)position,
														 (char *)infor);
				  }
			  break;
 800272c:	e005      	b.n	800273a <StartDefaultTask+0x692>

			  default:
				  {
					  LOG_REPORT("ERROR STATE !!!", __LINE__);
 800272e:	f44f 71f7 	mov.w	r1, #494	; 0x1ee
 8002732:	4808      	ldr	r0, [pc, #32]	; (8002754 <StartDefaultTask+0x6ac>)
 8002734:	f7ff f854 	bl	80017e0 <LOG_REPORT>
					  while(1);
 8002738:	e7fe      	b.n	8002738 <StartDefaultTask+0x690>
				  }
			  }

		  }
		  break;
 800273a:	e01d      	b.n	8002778 <StartDefaultTask+0x6d0>

	  default:
		  {
			  LOG_REPORT("ERROR MODE !!!", __LINE__);
 800273c:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 8002740:	480c      	ldr	r0, [pc, #48]	; (8002774 <StartDefaultTask+0x6cc>)
 8002742:	f7ff f84d 	bl	80017e0 <LOG_REPORT>
			  while(1);
 8002746:	e7fe      	b.n	8002746 <StartDefaultTask+0x69e>
 8002748:	40000000 	.word	0x40000000
 800274c:	3f847ae1 	.word	0x3f847ae1
 8002750:	20005e28 	.word	0x20005e28
 8002754:	08019c68 	.word	0x08019c68
 8002758:	20000c80 	.word	0x20000c80
 800275c:	20005dc0 	.word	0x20005dc0
 8002760:	08019c78 	.word	0x08019c78
 8002764:	08019c84 	.word	0x08019c84
 8002768:	40020000 	.word	0x40020000
 800276c:	20005d58 	.word	0x20005d58
 8002770:	08019c90 	.word	0x08019c90
 8002774:	08019c98 	.word	0x08019c98
		  }
	  }

	  /* 4--- Send to PC Phase ---*/
	  // Check buffer from USB task
	  osMutexWait(usbTxMutexHandle, osWaitForever);
 8002778:	4b40      	ldr	r3, [pc, #256]	; (800287c <StartDefaultTask+0x7d4>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f04f 31ff 	mov.w	r1, #4294967295
 8002780:	4618      	mov	r0, r3
 8002782:	f00d fc8d 	bl	80100a0 <osMutexWait>
	  task_usb_lenght = ringBuff_PopArray(&cmd_tx_ringbuff, task_usb, RINGBUFFER_SIZE);
 8002786:	f507 7311 	add.w	r3, r7, #580	; 0x244
 800278a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800278e:	4619      	mov	r1, r3
 8002790:	483b      	ldr	r0, [pc, #236]	; (8002880 <StartDefaultTask+0x7d8>)
 8002792:	f000 ff88 	bl	80036a6 <ringBuff_PopArray>
 8002796:	f8c7 0544 	str.w	r0, [r7, #1348]	; 0x544
	  osMutexRelease(usbTxMutexHandle);
 800279a:	4b38      	ldr	r3, [pc, #224]	; (800287c <StartDefaultTask+0x7d4>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4618      	mov	r0, r3
 80027a0:	f00d fccc 	bl	801013c <osMutexRelease>
	  // Intergrate to 1 buffer
	  if (respond_lenght > 0) {
 80027a4:	f8d7 3564 	ldr.w	r3, [r7, #1380]	; 0x564
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	dd13      	ble.n	80027d4 <StartDefaultTask+0x72c>
		  respond_packed_lenght = packPayload(respond, respond_packed, respond_lenght);
 80027ac:	f507 7104 	add.w	r1, r7, #528	; 0x210
 80027b0:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80027b4:	f8d7 2564 	ldr.w	r2, [r7, #1380]	; 0x564
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff fb05 	bl	8001dc8 <packPayload>
 80027be:	f8c7 055c 	str.w	r0, [r7, #1372]	; 0x55c
		  memcpy(usb_buff, respond_packed, respond_packed_lenght);
 80027c2:	f8d7 255c 	ldr.w	r2, [r7, #1372]	; 0x55c
 80027c6:	f507 7104 	add.w	r1, r7, #528	; 0x210
 80027ca:	f107 0318 	add.w	r3, r7, #24
 80027ce:	4618      	mov	r0, r3
 80027d0:	f011 fa46 	bl	8013c60 <memcpy>
	  }
	  if (task_usb_lenght > 0) {
 80027d4:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 80027d8:	2b00      	cmp	r3, #0
 80027da:	dd0b      	ble.n	80027f4 <StartDefaultTask+0x74c>
		  memcpy(usb_buff + respond_packed_lenght, task_usb, task_usb_lenght);
 80027dc:	f8d7 355c 	ldr.w	r3, [r7, #1372]	; 0x55c
 80027e0:	f107 0218 	add.w	r2, r7, #24
 80027e4:	4413      	add	r3, r2
 80027e6:	f8d7 2544 	ldr.w	r2, [r7, #1348]	; 0x544
 80027ea:	f507 7111 	add.w	r1, r7, #580	; 0x244
 80027ee:	4618      	mov	r0, r3
 80027f0:	f011 fa36 	bl	8013c60 <memcpy>
	  }
	  if (infor_lenght > 0) {
 80027f4:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	dd19      	ble.n	8002830 <StartDefaultTask+0x788>
		  infor_packed_lenght 	= packPayload(infor, infor_packed, infor_lenght);
 80027fc:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 8002800:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 8002804:	f8d7 2560 	ldr.w	r2, [r7, #1376]	; 0x560
 8002808:	4618      	mov	r0, r3
 800280a:	f7ff fadd 	bl	8001dc8 <packPayload>
 800280e:	f8c7 0558 	str.w	r0, [r7, #1368]	; 0x558
		  memcpy(usb_buff + respond_packed_lenght + task_usb_lenght, infor_packed, infor_packed_lenght);
 8002812:	f8d7 255c 	ldr.w	r2, [r7, #1372]	; 0x55c
 8002816:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 800281a:	4413      	add	r3, r2
 800281c:	f107 0218 	add.w	r2, r7, #24
 8002820:	4413      	add	r3, r2
 8002822:	f8d7 2558 	ldr.w	r2, [r7, #1368]	; 0x558
 8002826:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 800282a:	4618      	mov	r0, r3
 800282c:	f011 fa18 	bl	8013c60 <memcpy>
	  }
	  usb_lenght = respond_packed_lenght + task_usb_lenght + infor_packed_lenght;
 8002830:	f8d7 255c 	ldr.w	r2, [r7, #1372]	; 0x55c
 8002834:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 8002838:	4413      	add	r3, r2
 800283a:	f8d7 2558 	ldr.w	r2, [r7, #1368]	; 0x558
 800283e:	4413      	add	r3, r2
 8002840:	f8c7 3540 	str.w	r3, [r7, #1344]	; 0x540
	  // Send through USB
	  if (usb_lenght > 0) {
 8002844:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 8002848:	2b00      	cmp	r3, #0
 800284a:	dd08      	ble.n	800285e <StartDefaultTask+0x7b6>
		  CDC_Transmit_FS(usb_buff, (uint16_t)usb_lenght);
 800284c:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 8002850:	b29a      	uxth	r2, r3
 8002852:	f107 0318 	add.w	r3, r7, #24
 8002856:	4611      	mov	r1, r2
 8002858:	4618      	mov	r0, r3
 800285a:	f010 fd93 	bl	8013384 <CDC_Transmit_FS>
	  }

	  /* 5--- Update ---*/
	  scaraSetMode(current_mode);
 800285e:	f897 3557 	ldrb.w	r3, [r7, #1367]	; 0x557
 8002862:	4618      	mov	r0, r3
 8002864:	f006 f942 	bl	8008aec <scaraSetMode>
	  scaraSetDutyState(current_duty_state);
 8002868:	f897 3556 	ldrb.w	r3, [r7, #1366]	; 0x556
 800286c:	4618      	mov	r0, r3
 800286e:	f006 f91d 	bl	8008aac <scaraSetDutyState>

    osDelay(1);
 8002872:	2001      	movs	r0, #1
 8002874:	f00d fb5b 	bl	800ff2e <osDelay>
	  osSignalWait(0x01, osWaitForever); // Very Important
 8002878:	e46f      	b.n	800215a <StartDefaultTask+0xb2>
 800287a:	bf00      	nop
 800287c:	200052e0 	.word	0x200052e0
 8002880:	20000460 	.word	0x20000460

08002884 <Start_USB_RX_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_USB_RX_Task */
void Start_USB_RX_Task(void const * argument)
{
 8002884:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002886:	f2ad 4d04 	subw	sp, sp, #1028	; 0x404
 800288a:	af42      	add	r7, sp, #264	; 0x108
 800288c:	1d3b      	adds	r3, r7, #4
 800288e:	6018      	str	r0, [r3, #0]
	uint8_t				respond[145];
	uint8_t				message[150];
	int32_t				respond_lenght;
	int32_t				message_lenght;

	no_duty	 = 0;
 8002890:	2300      	movs	r3, #0
 8002892:	f8c7 32f0 	str.w	r3, [r7, #752]	; 0x2f0
	no_other = 0;
 8002896:	2300      	movs	r3, #0
 8002898:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4

  /* Infinite loop */
  for(;;)
  {
	  for(;;) {
		  distance = ringBuff_DistanceOf(&usb_rx_ringbuff, END_CHAR);
 800289c:	2129      	movs	r1, #41	; 0x29
 800289e:	4878      	ldr	r0, [pc, #480]	; (8002a80 <Start_USB_RX_Task+0x1fc>)
 80028a0:	f000 ff22 	bl	80036e8 <ringBuff_DistanceOf>
 80028a4:	f8c7 02e8 	str.w	r0, [r7, #744]	; 0x2e8
		  if ( -1 != distance ) {
 80028a8:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 80028ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b0:	d0f4      	beq.n	800289c <Start_USB_RX_Task+0x18>
 80028b2:	466b      	mov	r3, sp
 80028b4:	461e      	mov	r6, r3
			  uint8_t temp[distance+1];
 80028b6:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 80028ba:	1c58      	adds	r0, r3, #1
 80028bc:	1e43      	subs	r3, r0, #1
 80028be:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 80028c2:	4603      	mov	r3, r0
 80028c4:	4619      	mov	r1, r3
 80028c6:	f04f 0200 	mov.w	r2, #0
 80028ca:	f04f 0300 	mov.w	r3, #0
 80028ce:	f04f 0400 	mov.w	r4, #0
 80028d2:	00d4      	lsls	r4, r2, #3
 80028d4:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80028d8:	00cb      	lsls	r3, r1, #3
 80028da:	4603      	mov	r3, r0
 80028dc:	4619      	mov	r1, r3
 80028de:	f04f 0200 	mov.w	r2, #0
 80028e2:	f04f 0300 	mov.w	r3, #0
 80028e6:	f04f 0400 	mov.w	r4, #0
 80028ea:	00d4      	lsls	r4, r2, #3
 80028ec:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80028f0:	00cb      	lsls	r3, r1, #3
 80028f2:	4603      	mov	r3, r0
 80028f4:	3307      	adds	r3, #7
 80028f6:	08db      	lsrs	r3, r3, #3
 80028f8:	00db      	lsls	r3, r3, #3
 80028fa:	ebad 0d03 	sub.w	sp, sp, r3
 80028fe:	ab42      	add	r3, sp, #264	; 0x108
 8002900:	3300      	adds	r3, #0
 8002902:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
			  int32_t ret;
			  ringBuff_PopArray(&usb_rx_ringbuff, temp, distance + 1);
 8002906:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 800290a:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 800290e:	3301      	adds	r3, #1
 8002910:	461a      	mov	r2, r3
 8002912:	485b      	ldr	r0, [pc, #364]	; (8002a80 <Start_USB_RX_Task+0x1fc>)
 8002914:	f000 fec7 	bl	80036a6 <ringBuff_PopArray>
			  ret = unPackPayload(temp, distance + 1);
 8002918:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 800291c:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8002920:	3301      	adds	r3, #1
 8002922:	4619      	mov	r1, r3
 8002924:	4610      	mov	r0, r2
 8002926:	f7ff fab9 	bl	8001e9c <unPackPayload>
 800292a:	f8c7 02dc 	str.w	r0, [r7, #732]	; 0x2dc
			  if( -1 == ret) {
 800292e:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 8002932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002936:	d105      	bne.n	8002944 <Start_USB_RX_Task+0xc0>
				  LOG_REPORT("UNPACK FAIL", __LINE__);
 8002938:	f240 2142 	movw	r1, #578	; 0x242
 800293c:	4851      	ldr	r0, [pc, #324]	; (8002a84 <Start_USB_RX_Task+0x200>)
 800293e:	f7fe ff4f 	bl	80017e0 <LOG_REPORT>
 8002942:	e09b      	b.n	8002a7c <Start_USB_RX_Task+0x1f8>
			  } else {
				  LOG_REPORT((char*) temp, __LINE__);
 8002944:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8002948:	f44f 7111 	mov.w	r1, #580	; 0x244
 800294c:	4618      	mov	r0, r3
 800294e:	f7fe ff47 	bl	80017e0 <LOG_REPORT>
				  cmd_type = commandRead(temp, &id_command, &duty_cmd);
 8002952:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8002956:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
 800295a:	f507 7132 	add.w	r1, r7, #712	; 0x2c8
 800295e:	4618      	mov	r0, r3
 8002960:	f7fe fb22 	bl	8000fa8 <commandRead>
 8002964:	4603      	mov	r3, r0
 8002966:	f887 32db 	strb.w	r3, [r7, #731]	; 0x2db
				  memset(detail, 0, sizeof(detail));
 800296a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800296e:	2287      	movs	r2, #135	; 0x87
 8002970:	2100      	movs	r1, #0
 8002972:	4618      	mov	r0, r3
 8002974:	f011 f998 	bl	8013ca8 <memset>
				  rpd_type = commandReply(cmd_type, duty_cmd, detail);
 8002978:	f507 74e0 	add.w	r4, r7, #448	; 0x1c0
 800297c:	f897 52db 	ldrb.w	r5, [r7, #731]	; 0x2db
 8002980:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002984:	9340      	str	r3, [sp, #256]	; 0x100
 8002986:	4668      	mov	r0, sp
 8002988:	f104 0308 	add.w	r3, r4, #8
 800298c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002990:	4619      	mov	r1, r3
 8002992:	f011 f965 	bl	8013c60 <memcpy>
 8002996:	e894 000c 	ldmia.w	r4, {r2, r3}
 800299a:	4628      	mov	r0, r5
 800299c:	f7fe fda4 	bl	80014e8 <commandReply>
 80029a0:	4603      	mov	r3, r0
 80029a2:	f887 32da 	strb.w	r3, [r7, #730]	; 0x2da

				  if ( RPD_DUTY == rpd_type) {
 80029a6:	f897 32da 	ldrb.w	r3, [r7, #730]	; 0x2da
 80029aa:	2b09      	cmp	r3, #9
 80029ac:	d128      	bne.n	8002a00 <Start_USB_RX_Task+0x17c>
					  no_duty++;
 80029ae:	f8d7 32f0 	ldr.w	r3, [r7, #752]	; 0x2f0
 80029b2:	3301      	adds	r3, #1
 80029b4:	f8c7 32f0 	str.w	r3, [r7, #752]	; 0x2f0
					  DUTY_Command_TypeDef *dataMail;
					  dataMail = NULL;
 80029b8:	2300      	movs	r3, #0
 80029ba:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
					  // Wait allocate
					  while (dataMail == NULL) {
 80029be:	e008      	b.n	80029d2 <Start_USB_RX_Task+0x14e>
						  dataMail = osMailAlloc(commandMailHandle, osWaitForever);
 80029c0:	4b31      	ldr	r3, [pc, #196]	; (8002a88 <Start_USB_RX_Task+0x204>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f04f 31ff 	mov.w	r1, #4294967295
 80029c8:	4618      	mov	r0, r3
 80029ca:	f00d fd45 	bl	8010458 <osMailAlloc>
 80029ce:	f8c7 02ec 	str.w	r0, [r7, #748]	; 0x2ec
					  while (dataMail == NULL) {
 80029d2:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d0f2      	beq.n	80029c0 <Start_USB_RX_Task+0x13c>
					  }
					  memcpy( dataMail, &duty_cmd, sizeof(DUTY_Command_TypeDef));
 80029da:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80029de:	f44f 7284 	mov.w	r2, #264	; 0x108
 80029e2:	4619      	mov	r1, r3
 80029e4:	f8d7 02ec 	ldr.w	r0, [r7, #748]	; 0x2ec
 80029e8:	f011 f93a 	bl	8013c60 <memcpy>
					  osStatus result;
					  result = osMailPut(commandMailHandle, dataMail);
 80029ec:	4b26      	ldr	r3, [pc, #152]	; (8002a88 <Start_USB_RX_Task+0x204>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f8d7 12ec 	ldr.w	r1, [r7, #748]	; 0x2ec
 80029f4:	4618      	mov	r0, r3
 80029f6:	f00d fd45 	bl	8010484 <osMailPut>
 80029fa:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
 80029fe:	e03d      	b.n	8002a7c <Start_USB_RX_Task+0x1f8>
					  if (osOK == result) {
						  //LOG_REPORT("DUTY SEND", __LINE__);
					  }

				  } else {
					  no_other++;
 8002a00:	f8d7 32f4 	ldr.w	r3, [r7, #756]	; 0x2f4
 8002a04:	3301      	adds	r3, #1
 8002a06:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
					  memset(respond, 0, sizeof(respond));
 8002a0a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002a0e:	2291      	movs	r2, #145	; 0x91
 8002a10:	2100      	movs	r1, #0
 8002a12:	4618      	mov	r0, r3
 8002a14:	f011 f948 	bl	8013ca8 <memset>
					  memset(message, 0, sizeof(message));
 8002a18:	f107 030c 	add.w	r3, r7, #12
 8002a1c:	2296      	movs	r2, #150	; 0x96
 8002a1e:	2100      	movs	r1, #0
 8002a20:	4618      	mov	r0, r3
 8002a22:	f011 f941 	bl	8013ca8 <memset>
					  respond_lenght	= commandRespond(rpd_type, id_command,
 8002a26:	f8d7 12c8 	ldr.w	r1, [r7, #712]	; 0x2c8
 8002a2a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002a2e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8002a32:	f897 02da 	ldrb.w	r0, [r7, #730]	; 0x2da
 8002a36:	f7fe fe83 	bl	8001740 <commandRespond>
 8002a3a:	f8c7 02d4 	str.w	r0, [r7, #724]	; 0x2d4
							  	  	  	  (char *)detail,
										  (char *)respond);
					  message_lenght	= packPayload(respond, message, respond_lenght);
 8002a3e:	f107 010c 	add.w	r1, r7, #12
 8002a42:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002a46:	f8d7 22d4 	ldr.w	r2, [r7, #724]	; 0x2d4
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7ff f9bc 	bl	8001dc8 <packPayload>
 8002a50:	f8c7 02d0 	str.w	r0, [r7, #720]	; 0x2d0
					  // Mutex
					  osMutexWait(usbTxMutexHandle, osWaitForever);
 8002a54:	4b0d      	ldr	r3, [pc, #52]	; (8002a8c <Start_USB_RX_Task+0x208>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f04f 31ff 	mov.w	r1, #4294967295
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f00d fb1f 	bl	80100a0 <osMutexWait>
					  ringBuff_PushArray(&cmd_tx_ringbuff, message, message_lenght);
 8002a62:	f107 030c 	add.w	r3, r7, #12
 8002a66:	f8d7 22d0 	ldr.w	r2, [r7, #720]	; 0x2d0
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	4808      	ldr	r0, [pc, #32]	; (8002a90 <Start_USB_RX_Task+0x20c>)
 8002a6e:	f000 fdf2 	bl	8003656 <ringBuff_PushArray>
					  osMutexRelease(usbTxMutexHandle);
 8002a72:	4b06      	ldr	r3, [pc, #24]	; (8002a8c <Start_USB_RX_Task+0x208>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f00d fb60 	bl	801013c <osMutexRelease>
 8002a7c:	46b5      	mov	sp, r6
		  distance = ringBuff_DistanceOf(&usb_rx_ringbuff, END_CHAR);
 8002a7e:	e70d      	b.n	800289c <Start_USB_RX_Task+0x18>
 8002a80:	20000054 	.word	0x20000054
 8002a84:	08019ca8 	.word	0x08019ca8
 8002a88:	200052e4 	.word	0x200052e4
 8002a8c:	200052e0 	.word	0x200052e0
 8002a90:	20000460 	.word	0x20000460

08002a94 <FSMC_Write>:
/* Includes ------------------------------------------------------------------*/
#include "fsmc.h"

/* USER CODE BEGIN 0 */
void FSMC_Write(uint32_t ui_address, uint32_t ui_data)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
	*(volatile uint16_t *)ui_address = ui_data;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	683a      	ldr	r2, [r7, #0]
 8002aa2:	b292      	uxth	r2, r2
 8002aa4:	801a      	strh	r2, [r3, #0]
}
 8002aa6:	bf00      	nop
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr

08002ab2 <FSMC_Read>:

uint16_t FSMC_Read(uint32_t ui_address) {
 8002ab2:	b480      	push	{r7}
 8002ab4:	b083      	sub	sp, #12
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
	return *(volatile uint16_t *)ui_address;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	881b      	ldrh	r3, [r3, #0]
 8002abe:	b29b      	uxth	r3, r3
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <MX_FSMC_Init>:

NOR_HandleTypeDef hnor1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b088      	sub	sp, #32
 8002ad0:	af00      	add	r7, sp, #0
  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8002ad2:	1d3b      	adds	r3, r7, #4
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	601a      	str	r2, [r3, #0]
 8002ad8:	605a      	str	r2, [r3, #4]
 8002ada:	609a      	str	r2, [r3, #8]
 8002adc:	60da      	str	r2, [r3, #12]
 8002ade:	611a      	str	r2, [r3, #16]
 8002ae0:	615a      	str	r2, [r3, #20]
 8002ae2:	619a      	str	r2, [r3, #24]

  /** Perform the NOR1 memory initialization sequence
  */
  hnor1.Instance = FSMC_NORSRAM_DEVICE;
 8002ae4:	4b27      	ldr	r3, [pc, #156]	; (8002b84 <MX_FSMC_Init+0xb8>)
 8002ae6:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8002aea:	601a      	str	r2, [r3, #0]
  hnor1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8002aec:	4b25      	ldr	r3, [pc, #148]	; (8002b84 <MX_FSMC_Init+0xb8>)
 8002aee:	4a26      	ldr	r2, [pc, #152]	; (8002b88 <MX_FSMC_Init+0xbc>)
 8002af0:	605a      	str	r2, [r3, #4]
  /* hnor1.Init */
  hnor1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8002af2:	4b24      	ldr	r3, [pc, #144]	; (8002b84 <MX_FSMC_Init+0xb8>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	609a      	str	r2, [r3, #8]
  hnor1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_ENABLE;
 8002af8:	4b22      	ldr	r3, [pc, #136]	; (8002b84 <MX_FSMC_Init+0xb8>)
 8002afa:	2202      	movs	r2, #2
 8002afc:	60da      	str	r2, [r3, #12]
  hnor1.Init.MemoryType = FSMC_MEMORY_TYPE_NOR;
 8002afe:	4b21      	ldr	r3, [pc, #132]	; (8002b84 <MX_FSMC_Init+0xb8>)
 8002b00:	2208      	movs	r2, #8
 8002b02:	611a      	str	r2, [r3, #16]
  hnor1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8002b04:	4b1f      	ldr	r3, [pc, #124]	; (8002b84 <MX_FSMC_Init+0xb8>)
 8002b06:	2210      	movs	r2, #16
 8002b08:	615a      	str	r2, [r3, #20]
  hnor1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8002b0a:	4b1e      	ldr	r3, [pc, #120]	; (8002b84 <MX_FSMC_Init+0xb8>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	619a      	str	r2, [r3, #24]
  hnor1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8002b10:	4b1c      	ldr	r3, [pc, #112]	; (8002b84 <MX_FSMC_Init+0xb8>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	61da      	str	r2, [r3, #28]
  hnor1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8002b16:	4b1b      	ldr	r3, [pc, #108]	; (8002b84 <MX_FSMC_Init+0xb8>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	621a      	str	r2, [r3, #32]
  hnor1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8002b1c:	4b19      	ldr	r3, [pc, #100]	; (8002b84 <MX_FSMC_Init+0xb8>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	625a      	str	r2, [r3, #36]	; 0x24
  hnor1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8002b22:	4b18      	ldr	r3, [pc, #96]	; (8002b84 <MX_FSMC_Init+0xb8>)
 8002b24:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b28:	629a      	str	r2, [r3, #40]	; 0x28
  hnor1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8002b2a:	4b16      	ldr	r3, [pc, #88]	; (8002b84 <MX_FSMC_Init+0xb8>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hnor1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8002b30:	4b14      	ldr	r3, [pc, #80]	; (8002b84 <MX_FSMC_Init+0xb8>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	631a      	str	r2, [r3, #48]	; 0x30
  hnor1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8002b36:	4b13      	ldr	r3, [pc, #76]	; (8002b84 <MX_FSMC_Init+0xb8>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	635a      	str	r2, [r3, #52]	; 0x34
  hnor1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8002b3c:	4b11      	ldr	r3, [pc, #68]	; (8002b84 <MX_FSMC_Init+0xb8>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	639a      	str	r2, [r3, #56]	; 0x38
  hnor1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8002b42:	4b10      	ldr	r3, [pc, #64]	; (8002b84 <MX_FSMC_Init+0xb8>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8002b48:	230f      	movs	r3, #15
 8002b4a:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8002b4c:	230f      	movs	r3, #15
 8002b4e:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8002b50:	23ff      	movs	r3, #255	; 0xff
 8002b52:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8002b54:	230f      	movs	r3, #15
 8002b56:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8002b58:	2310      	movs	r3, #16
 8002b5a:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8002b5c:	2311      	movs	r3, #17
 8002b5e:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8002b60:	2300      	movs	r3, #0
 8002b62:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_NOR_Init(&hnor1, &Timing, NULL) != HAL_OK)
 8002b64:	1d3b      	adds	r3, r7, #4
 8002b66:	2200      	movs	r2, #0
 8002b68:	4619      	mov	r1, r3
 8002b6a:	4806      	ldr	r0, [pc, #24]	; (8002b84 <MX_FSMC_Init+0xb8>)
 8002b6c:	f007 fa56 	bl	800a01c <HAL_NOR_Init>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 8002b76:	f000 fcf7 	bl	8003568 <Error_Handler>
  }

}
 8002b7a:	bf00      	nop
 8002b7c:	3720      	adds	r7, #32
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	200052ec 	.word	0x200052ec
 8002b88:	a0000104 	.word	0xa0000104

08002b8c <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b086      	sub	sp, #24
 8002b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b92:	1d3b      	adds	r3, r7, #4
 8002b94:	2200      	movs	r2, #0
 8002b96:	601a      	str	r2, [r3, #0]
 8002b98:	605a      	str	r2, [r3, #4]
 8002b9a:	609a      	str	r2, [r3, #8]
 8002b9c:	60da      	str	r2, [r3, #12]
 8002b9e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8002ba0:	4b24      	ldr	r3, [pc, #144]	; (8002c34 <HAL_FSMC_MspInit+0xa8>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d140      	bne.n	8002c2a <HAL_FSMC_MspInit+0x9e>
    return;
  }
  FSMC_Initialized = 1;
 8002ba8:	4b22      	ldr	r3, [pc, #136]	; (8002c34 <HAL_FSMC_MspInit+0xa8>)
 8002baa:	2201      	movs	r2, #1
 8002bac:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8002bae:	2300      	movs	r3, #0
 8002bb0:	603b      	str	r3, [r7, #0]
 8002bb2:	4b21      	ldr	r3, [pc, #132]	; (8002c38 <HAL_FSMC_MspInit+0xac>)
 8002bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb6:	4a20      	ldr	r2, [pc, #128]	; (8002c38 <HAL_FSMC_MspInit+0xac>)
 8002bb8:	f043 0301 	orr.w	r3, r3, #1
 8002bbc:	6393      	str	r3, [r2, #56]	; 0x38
 8002bbe:	4b1e      	ldr	r3, [pc, #120]	; (8002c38 <HAL_FSMC_MspInit+0xac>)
 8002bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	603b      	str	r3, [r7, #0]
 8002bc8:	683b      	ldr	r3, [r7, #0]
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  PB7   ------> FSMC_NL
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 8002bca:	f64f 7380 	movw	r3, #65408	; 0xff80
 8002bce:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002bdc:	230c      	movs	r3, #12
 8002bde:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002be0:	1d3b      	adds	r3, r7, #4
 8002be2:	4619      	mov	r1, r3
 8002be4:	4815      	ldr	r0, [pc, #84]	; (8002c3c <HAL_FSMC_MspInit+0xb0>)
 8002be6:	f007 f865 	bl	8009cb4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14 
 8002bea:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8002bee:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4 
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002bfc:	230c      	movs	r3, #12
 8002bfe:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c00:	1d3b      	adds	r3, r7, #4
 8002c02:	4619      	mov	r1, r3
 8002c04:	480e      	ldr	r0, [pc, #56]	; (8002c40 <HAL_FSMC_MspInit+0xb4>)
 8002c06:	f007 f855 	bl	8009cb4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002c0a:	2380      	movs	r3, #128	; 0x80
 8002c0c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c0e:	2302      	movs	r3, #2
 8002c10:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c12:	2300      	movs	r3, #0
 8002c14:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c16:	2303      	movs	r3, #3
 8002c18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002c1a:	230c      	movs	r3, #12
 8002c1c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c1e:	1d3b      	adds	r3, r7, #4
 8002c20:	4619      	mov	r1, r3
 8002c22:	4808      	ldr	r0, [pc, #32]	; (8002c44 <HAL_FSMC_MspInit+0xb8>)
 8002c24:	f007 f846 	bl	8009cb4 <HAL_GPIO_Init>
 8002c28:	e000      	b.n	8002c2c <HAL_FSMC_MspInit+0xa0>
    return;
 8002c2a:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8002c2c:	3718      	adds	r7, #24
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	20001478 	.word	0x20001478
 8002c38:	40023800 	.word	0x40023800
 8002c3c:	40021000 	.word	0x40021000
 8002c40:	40020c00 	.word	0x40020c00
 8002c44:	40020400 	.word	0x40020400

08002c48 <HAL_NOR_MspInit>:

void HAL_NOR_MspInit(NOR_HandleTypeDef* norHandle){
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NOR_MspInit 0 */

  /* USER CODE END NOR_MspInit 0 */
  HAL_FSMC_MspInit();
 8002c50:	f7ff ff9c 	bl	8002b8c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN NOR_MspInit 1 */

  /* USER CODE END NOR_MspInit 1 */
}
 8002c54:	bf00      	nop
 8002c56:	3708      	adds	r7, #8
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b08a      	sub	sp, #40	; 0x28
 8002c60:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c62:	f107 0314 	add.w	r3, r7, #20
 8002c66:	2200      	movs	r2, #0
 8002c68:	601a      	str	r2, [r3, #0]
 8002c6a:	605a      	str	r2, [r3, #4]
 8002c6c:	609a      	str	r2, [r3, #8]
 8002c6e:	60da      	str	r2, [r3, #12]
 8002c70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c72:	2300      	movs	r3, #0
 8002c74:	613b      	str	r3, [r7, #16]
 8002c76:	4b51      	ldr	r3, [pc, #324]	; (8002dbc <MX_GPIO_Init+0x160>)
 8002c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7a:	4a50      	ldr	r2, [pc, #320]	; (8002dbc <MX_GPIO_Init+0x160>)
 8002c7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c80:	6313      	str	r3, [r2, #48]	; 0x30
 8002c82:	4b4e      	ldr	r3, [pc, #312]	; (8002dbc <MX_GPIO_Init+0x160>)
 8002c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c8a:	613b      	str	r3, [r7, #16]
 8002c8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c8e:	2300      	movs	r3, #0
 8002c90:	60fb      	str	r3, [r7, #12]
 8002c92:	4b4a      	ldr	r3, [pc, #296]	; (8002dbc <MX_GPIO_Init+0x160>)
 8002c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c96:	4a49      	ldr	r2, [pc, #292]	; (8002dbc <MX_GPIO_Init+0x160>)
 8002c98:	f043 0301 	orr.w	r3, r3, #1
 8002c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c9e:	4b47      	ldr	r3, [pc, #284]	; (8002dbc <MX_GPIO_Init+0x160>)
 8002ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	60fb      	str	r3, [r7, #12]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002caa:	2300      	movs	r3, #0
 8002cac:	60bb      	str	r3, [r7, #8]
 8002cae:	4b43      	ldr	r3, [pc, #268]	; (8002dbc <MX_GPIO_Init+0x160>)
 8002cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb2:	4a42      	ldr	r2, [pc, #264]	; (8002dbc <MX_GPIO_Init+0x160>)
 8002cb4:	f043 0310 	orr.w	r3, r3, #16
 8002cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cba:	4b40      	ldr	r3, [pc, #256]	; (8002dbc <MX_GPIO_Init+0x160>)
 8002cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbe:	f003 0310 	and.w	r3, r3, #16
 8002cc2:	60bb      	str	r3, [r7, #8]
 8002cc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	607b      	str	r3, [r7, #4]
 8002cca:	4b3c      	ldr	r3, [pc, #240]	; (8002dbc <MX_GPIO_Init+0x160>)
 8002ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cce:	4a3b      	ldr	r2, [pc, #236]	; (8002dbc <MX_GPIO_Init+0x160>)
 8002cd0:	f043 0302 	orr.w	r3, r3, #2
 8002cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8002cd6:	4b39      	ldr	r3, [pc, #228]	; (8002dbc <MX_GPIO_Init+0x160>)
 8002cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	607b      	str	r3, [r7, #4]
 8002ce0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	603b      	str	r3, [r7, #0]
 8002ce6:	4b35      	ldr	r3, [pc, #212]	; (8002dbc <MX_GPIO_Init+0x160>)
 8002ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cea:	4a34      	ldr	r2, [pc, #208]	; (8002dbc <MX_GPIO_Init+0x160>)
 8002cec:	f043 0308 	orr.w	r3, r3, #8
 8002cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8002cf2:	4b32      	ldr	r3, [pc, #200]	; (8002dbc <MX_GPIO_Init+0x160>)
 8002cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf6:	f003 0308 	and.w	r3, r3, #8
 8002cfa:	603b      	str	r3, [r7, #0]
 8002cfc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUTPUT_1_Pin|OUTPUT_2_Pin|USB_SIGN_Pin, GPIO_PIN_RESET);
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f44f 6141 	mov.w	r1, #3088	; 0xc10
 8002d04:	482e      	ldr	r0, [pc, #184]	; (8002dc0 <MX_GPIO_Init+0x164>)
 8002d06:	f007 f96f 	bl	8009fe8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ENCODER_RESET_Pin|PULSE_WRITE_Pin|CAPTURE_ENABLE_Pin|STOP_Pin, GPIO_PIN_RESET);
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f641 0148 	movw	r1, #6216	; 0x1848
 8002d10:	482c      	ldr	r0, [pc, #176]	; (8002dc4 <MX_GPIO_Init+0x168>)
 8002d12:	f007 f969 	bl	8009fe8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STEP_SLEEP_Pin|STEP_RESET_Pin|STEP_ENABLE_Pin, GPIO_PIN_RESET);
 8002d16:	2200      	movs	r2, #0
 8002d18:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8002d1c:	482a      	ldr	r0, [pc, #168]	; (8002dc8 <MX_GPIO_Init+0x16c>)
 8002d1e:	f007 f963 	bl	8009fe8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OUTPUT_1_Pin|OUTPUT_2_Pin|USB_SIGN_Pin;
 8002d22:	f44f 6341 	mov.w	r3, #3088	; 0xc10
 8002d26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d30:	2300      	movs	r3, #0
 8002d32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d34:	f107 0314 	add.w	r3, r7, #20
 8002d38:	4619      	mov	r1, r3
 8002d3a:	4821      	ldr	r0, [pc, #132]	; (8002dc0 <MX_GPIO_Init+0x164>)
 8002d3c:	f006 ffba 	bl	8009cb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = ENCODER_RESET_Pin|CAPTURE_ENABLE_Pin|STOP_Pin;
 8002d40:	f640 0348 	movw	r3, #2120	; 0x848
 8002d44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d46:	2301      	movs	r3, #1
 8002d48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d52:	f107 0314 	add.w	r3, r7, #20
 8002d56:	4619      	mov	r1, r3
 8002d58:	481a      	ldr	r0, [pc, #104]	; (8002dc4 <MX_GPIO_Init+0x168>)
 8002d5a:	f006 ffab 	bl	8009cb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PULSE_WRITE_Pin;
 8002d5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d64:	2301      	movs	r3, #1
 8002d66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PULSE_WRITE_GPIO_Port, &GPIO_InitStruct);
 8002d70:	f107 0314 	add.w	r3, r7, #20
 8002d74:	4619      	mov	r1, r3
 8002d76:	4813      	ldr	r0, [pc, #76]	; (8002dc4 <MX_GPIO_Init+0x168>)
 8002d78:	f006 ff9c 	bl	8009cb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = CPLD_LIMIT_Pin|CPLD_BUSY_Pin;
 8002d7c:	f242 0304 	movw	r3, #8196	; 0x2004
 8002d80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d82:	2300      	movs	r3, #0
 8002d84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d86:	2301      	movs	r3, #1
 8002d88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d8a:	f107 0314 	add.w	r3, r7, #20
 8002d8e:	4619      	mov	r1, r3
 8002d90:	480c      	ldr	r0, [pc, #48]	; (8002dc4 <MX_GPIO_Init+0x168>)
 8002d92:	f006 ff8f 	bl	8009cb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = STEP_SLEEP_Pin|STEP_RESET_Pin|STEP_ENABLE_Pin;
 8002d96:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002d9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da0:	2300      	movs	r3, #0
 8002da2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002da4:	2300      	movs	r3, #0
 8002da6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002da8:	f107 0314 	add.w	r3, r7, #20
 8002dac:	4619      	mov	r1, r3
 8002dae:	4806      	ldr	r0, [pc, #24]	; (8002dc8 <MX_GPIO_Init+0x16c>)
 8002db0:	f006 ff80 	bl	8009cb4 <HAL_GPIO_Init>

}
 8002db4:	bf00      	nop
 8002db6:	3728      	adds	r7, #40	; 0x28
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	40023800 	.word	0x40023800
 8002dc0:	40020400 	.word	0x40020400
 8002dc4:	40020c00 	.word	0x40020c00
 8002dc8:	40020000 	.word	0x40020000
 8002dcc:	00000000 	.word	0x00000000

08002dd0 <kinematicForward>:
#include "kinematic.h"
#include "common_def.h"
#include "math.h"
#include "system_params.h"

uint8_t		kinematicForward(SCARA_PositionTypeDef *pnt) {
 8002dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dd2:	b08b      	sub	sp, #44	; 0x2c
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
	double x, y, z, roll;

	x =   a1*cos(pnt->Theta1)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8002dde:	eeb0 0a47 	vmov.f32	s0, s14
 8002de2:	eef0 0a67 	vmov.f32	s1, s15
 8002de6:	f015 f96b 	bl	80180c0 <cos>
 8002dea:	ec51 0b10 	vmov	r0, r1, d0
 8002dee:	a38e      	add	r3, pc, #568	; (adr r3, 8003028 <kinematicForward+0x258>)
 8002df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002df4:	f7fd fc10 	bl	8000618 <__aeabi_dmul>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	460c      	mov	r4, r1
 8002dfc:	461d      	mov	r5, r3
 8002dfe:	4626      	mov	r6, r4
		+ a2*cos(pnt->Theta1 + pnt->Theta2)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	4623      	mov	r3, r4
 8002e10:	f7fd fa4c 	bl	80002ac <__adddf3>
 8002e14:	4603      	mov	r3, r0
 8002e16:	460c      	mov	r4, r1
 8002e18:	ec44 3b17 	vmov	d7, r3, r4
 8002e1c:	eeb0 0a47 	vmov.f32	s0, s14
 8002e20:	eef0 0a67 	vmov.f32	s1, s15
 8002e24:	f015 f94c 	bl	80180c0 <cos>
 8002e28:	ec51 0b10 	vmov	r0, r1, d0
 8002e2c:	f04f 0200 	mov.w	r2, #0
 8002e30:	4b83      	ldr	r3, [pc, #524]	; (8003040 <kinematicForward+0x270>)
 8002e32:	f7fd fbf1 	bl	8000618 <__aeabi_dmul>
 8002e36:	4603      	mov	r3, r0
 8002e38:	460c      	mov	r4, r1
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	4623      	mov	r3, r4
 8002e3e:	4628      	mov	r0, r5
 8002e40:	4631      	mov	r1, r6
 8002e42:	f7fd fa33 	bl	80002ac <__adddf3>
 8002e46:	4603      	mov	r3, r0
 8002e48:	460c      	mov	r4, r1
 8002e4a:	461d      	mov	r5, r3
 8002e4c:	4626      	mov	r6, r4
		+ a4*cos(pnt->Theta1 + pnt->Theta2 - pnt->Theta4);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	4623      	mov	r3, r4
 8002e5e:	f7fd fa25 	bl	80002ac <__adddf3>
 8002e62:	4603      	mov	r3, r0
 8002e64:	460c      	mov	r4, r1
 8002e66:	4618      	mov	r0, r3
 8002e68:	4621      	mov	r1, r4
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8002e70:	461a      	mov	r2, r3
 8002e72:	4623      	mov	r3, r4
 8002e74:	f7fd fa18 	bl	80002a8 <__aeabi_dsub>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	460c      	mov	r4, r1
 8002e7c:	ec44 3b17 	vmov	d7, r3, r4
 8002e80:	eeb0 0a47 	vmov.f32	s0, s14
 8002e84:	eef0 0a67 	vmov.f32	s1, s15
 8002e88:	f015 f91a 	bl	80180c0 <cos>
 8002e8c:	ec51 0b10 	vmov	r0, r1, d0
 8002e90:	a363      	add	r3, pc, #396	; (adr r3, 8003020 <kinematicForward+0x250>)
 8002e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e96:	f7fd fbbf 	bl	8000618 <__aeabi_dmul>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	460c      	mov	r4, r1
	x =   a1*cos(pnt->Theta1)
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	4623      	mov	r3, r4
 8002ea2:	4628      	mov	r0, r5
 8002ea4:	4631      	mov	r1, r6
 8002ea6:	f7fd fa01 	bl	80002ac <__adddf3>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	460c      	mov	r4, r1
 8002eae:	e9c7 3408 	strd	r3, r4, [r7, #32]
	y =   a1*sin(pnt->Theta1)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8002eb8:	eeb0 0a47 	vmov.f32	s0, s14
 8002ebc:	eef0 0a67 	vmov.f32	s1, s15
 8002ec0:	f015 f98e 	bl	80181e0 <sin>
 8002ec4:	ec51 0b10 	vmov	r0, r1, d0
 8002ec8:	a357      	add	r3, pc, #348	; (adr r3, 8003028 <kinematicForward+0x258>)
 8002eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ece:	f7fd fba3 	bl	8000618 <__aeabi_dmul>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	460c      	mov	r4, r1
 8002ed6:	461d      	mov	r5, r3
 8002ed8:	4626      	mov	r6, r4
		+ a2*sin(pnt->Theta1 + pnt->Theta2)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	4623      	mov	r3, r4
 8002eea:	f7fd f9df 	bl	80002ac <__adddf3>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	460c      	mov	r4, r1
 8002ef2:	ec44 3b17 	vmov	d7, r3, r4
 8002ef6:	eeb0 0a47 	vmov.f32	s0, s14
 8002efa:	eef0 0a67 	vmov.f32	s1, s15
 8002efe:	f015 f96f 	bl	80181e0 <sin>
 8002f02:	ec51 0b10 	vmov	r0, r1, d0
 8002f06:	f04f 0200 	mov.w	r2, #0
 8002f0a:	4b4d      	ldr	r3, [pc, #308]	; (8003040 <kinematicForward+0x270>)
 8002f0c:	f7fd fb84 	bl	8000618 <__aeabi_dmul>
 8002f10:	4603      	mov	r3, r0
 8002f12:	460c      	mov	r4, r1
 8002f14:	461a      	mov	r2, r3
 8002f16:	4623      	mov	r3, r4
 8002f18:	4628      	mov	r0, r5
 8002f1a:	4631      	mov	r1, r6
 8002f1c:	f7fd f9c6 	bl	80002ac <__adddf3>
 8002f20:	4603      	mov	r3, r0
 8002f22:	460c      	mov	r4, r1
 8002f24:	461d      	mov	r5, r3
 8002f26:	4626      	mov	r6, r4
		+ a4*sin(pnt->Theta1 + pnt->Theta2 - pnt->Theta4);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 8002f34:	461a      	mov	r2, r3
 8002f36:	4623      	mov	r3, r4
 8002f38:	f7fd f9b8 	bl	80002ac <__adddf3>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	460c      	mov	r4, r1
 8002f40:	4618      	mov	r0, r3
 8002f42:	4621      	mov	r1, r4
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	4623      	mov	r3, r4
 8002f4e:	f7fd f9ab 	bl	80002a8 <__aeabi_dsub>
 8002f52:	4603      	mov	r3, r0
 8002f54:	460c      	mov	r4, r1
 8002f56:	ec44 3b17 	vmov	d7, r3, r4
 8002f5a:	eeb0 0a47 	vmov.f32	s0, s14
 8002f5e:	eef0 0a67 	vmov.f32	s1, s15
 8002f62:	f015 f93d 	bl	80181e0 <sin>
 8002f66:	ec51 0b10 	vmov	r0, r1, d0
 8002f6a:	a32d      	add	r3, pc, #180	; (adr r3, 8003020 <kinematicForward+0x250>)
 8002f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f70:	f7fd fb52 	bl	8000618 <__aeabi_dmul>
 8002f74:	4603      	mov	r3, r0
 8002f76:	460c      	mov	r4, r1
	y =   a1*sin(pnt->Theta1)
 8002f78:	461a      	mov	r2, r3
 8002f7a:	4623      	mov	r3, r4
 8002f7c:	4628      	mov	r0, r5
 8002f7e:	4631      	mov	r1, r6
 8002f80:	f7fd f994 	bl	80002ac <__adddf3>
 8002f84:	4603      	mov	r3, r0
 8002f86:	460c      	mov	r4, r1
 8002f88:	e9c7 3406 	strd	r3, r4, [r7, #24]
	z =   d1 - pnt->D3 - d4;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 8002f92:	461a      	mov	r2, r3
 8002f94:	4623      	mov	r3, r4
 8002f96:	a126      	add	r1, pc, #152	; (adr r1, 8003030 <kinematicForward+0x260>)
 8002f98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002f9c:	f7fd f984 	bl	80002a8 <__aeabi_dsub>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	460c      	mov	r4, r1
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	4621      	mov	r1, r4
 8002fa8:	a323      	add	r3, pc, #140	; (adr r3, 8003038 <kinematicForward+0x268>)
 8002faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fae:	f7fd f97b 	bl	80002a8 <__aeabi_dsub>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	460c      	mov	r4, r1
 8002fb6:	e9c7 3404 	strd	r3, r4, [r7, #16]
	roll = pnt->Theta1 + pnt->Theta2 - pnt->Theta4;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	4623      	mov	r3, r4
 8002fca:	f7fd f96f 	bl	80002ac <__adddf3>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	460c      	mov	r4, r1
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	4621      	mov	r1, r4
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8002fdc:	461a      	mov	r2, r3
 8002fde:	4623      	mov	r3, r4
 8002fe0:	f7fd f962 	bl	80002a8 <__aeabi_dsub>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	460c      	mov	r4, r1
 8002fe8:	e9c7 3402 	strd	r3, r4, [r7, #8]

	pnt->x = x;
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002ff2:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	pnt->y = y;
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002ffc:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	pnt->z = z;
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003006:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	pnt->roll = roll;
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003010:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

	return TRUE;
 8003014:	2301      	movs	r3, #1
}
 8003016:	4618      	mov	r0, r3
 8003018:	372c      	adds	r7, #44	; 0x2c
 800301a:	46bd      	mov	sp, r7
 800301c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800301e:	bf00      	nop
 8003020:	80000000 	.word	0x80000000
 8003024:	40402e14 	.word	0x40402e14
 8003028:	00000000 	.word	0x00000000
 800302c:	4068a000 	.word	0x4068a000
 8003030:	00000000 	.word	0x00000000
 8003034:	406a6000 	.word	0x406a6000
 8003038:	e0000000 	.word	0xe0000000
 800303c:	40536b22 	.word	0x40536b22
 8003040:	40640000 	.word	0x40640000
 8003044:	00000000 	.word	0x00000000

08003048 <kinematicInverse>:

uint8_t		kinematicInverse(SCARA_PositionTypeDef *pnt, SCARA_PositionTypeDef current) {
 8003048:	b082      	sub	sp, #8
 800304a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800304e:	b0a0      	sub	sp, #128	; 0x80
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8003058:	e881 000c 	stmia.w	r1, {r2, r3}
	double theta1, theta2, theta2_positive, theta2_negative, d3, theta4 , pWx, pWy;
	double s1, c1, s2, s2_positive, s2_negative, c2 , temp;

	d3  = d1 - d4 - pnt->z;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003062:	a1f2      	add	r1, pc, #968	; (adr r1, 800342c <kinematicInverse+0x3e4>)
 8003064:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003068:	f7fd f91e 	bl	80002a8 <__aeabi_dsub>
 800306c:	4602      	mov	r2, r0
 800306e:	460b      	mov	r3, r1
 8003070:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	pWx = pnt->x - a4*cos(pnt->roll);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	e9d3 ab0a 	ldrd	sl, fp, [r3, #40]	; 0x28
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8003080:	eeb0 0a47 	vmov.f32	s0, s14
 8003084:	eef0 0a67 	vmov.f32	s1, s15
 8003088:	f015 f81a 	bl	80180c0 <cos>
 800308c:	ec51 0b10 	vmov	r0, r1, d0
 8003090:	a3e8      	add	r3, pc, #928	; (adr r3, 8003434 <kinematicInverse+0x3ec>)
 8003092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003096:	f7fd fabf 	bl	8000618 <__aeabi_dmul>
 800309a:	4602      	mov	r2, r0
 800309c:	460b      	mov	r3, r1
 800309e:	4650      	mov	r0, sl
 80030a0:	4659      	mov	r1, fp
 80030a2:	f7fd f901 	bl	80002a8 <__aeabi_dsub>
 80030a6:	4602      	mov	r2, r0
 80030a8:	460b      	mov	r3, r1
 80030aa:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	pWy = pnt->y - a4*sin(pnt->roll);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	e9d3 ab0c 	ldrd	sl, fp, [r3, #48]	; 0x30
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80030ba:	eeb0 0a47 	vmov.f32	s0, s14
 80030be:	eef0 0a67 	vmov.f32	s1, s15
 80030c2:	f015 f88d 	bl	80181e0 <sin>
 80030c6:	ec51 0b10 	vmov	r0, r1, d0
 80030ca:	a3da      	add	r3, pc, #872	; (adr r3, 8003434 <kinematicInverse+0x3ec>)
 80030cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030d0:	f7fd faa2 	bl	8000618 <__aeabi_dmul>
 80030d4:	4602      	mov	r2, r0
 80030d6:	460b      	mov	r3, r1
 80030d8:	4650      	mov	r0, sl
 80030da:	4659      	mov	r1, fp
 80030dc:	f7fd f8e4 	bl	80002a8 <__aeabi_dsub>
 80030e0:	4602      	mov	r2, r0
 80030e2:	460b      	mov	r3, r1
 80030e4:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	c2  = (pWx*pWx + pWy*pWy - a1*a1 - a2*a2) / (2*a1*a2);
 80030e8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80030ec:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80030f0:	f7fd fa92 	bl	8000618 <__aeabi_dmul>
 80030f4:	4602      	mov	r2, r0
 80030f6:	460b      	mov	r3, r1
 80030f8:	4692      	mov	sl, r2
 80030fa:	469b      	mov	fp, r3
 80030fc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003100:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003104:	f7fd fa88 	bl	8000618 <__aeabi_dmul>
 8003108:	4602      	mov	r2, r0
 800310a:	460b      	mov	r3, r1
 800310c:	4650      	mov	r0, sl
 800310e:	4659      	mov	r1, fp
 8003110:	f7fd f8cc 	bl	80002ac <__adddf3>
 8003114:	4602      	mov	r2, r0
 8003116:	460b      	mov	r3, r1
 8003118:	4610      	mov	r0, r2
 800311a:	4619      	mov	r1, r3
 800311c:	a3c7      	add	r3, pc, #796	; (adr r3, 800343c <kinematicInverse+0x3f4>)
 800311e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003122:	f7fd f8c1 	bl	80002a8 <__aeabi_dsub>
 8003126:	4602      	mov	r2, r0
 8003128:	460b      	mov	r3, r1
 800312a:	4610      	mov	r0, r2
 800312c:	4619      	mov	r1, r3
 800312e:	f04f 0200 	mov.w	r2, #0
 8003132:	4bbb      	ldr	r3, [pc, #748]	; (8003420 <kinematicInverse+0x3d8>)
 8003134:	f7fd f8b8 	bl	80002a8 <__aeabi_dsub>
 8003138:	4602      	mov	r2, r0
 800313a:	460b      	mov	r3, r1
 800313c:	4610      	mov	r0, r2
 800313e:	4619      	mov	r1, r3
 8003140:	a3b3      	add	r3, pc, #716	; (adr r3, 8003410 <kinematicInverse+0x3c8>)
 8003142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003146:	f7fd fb91 	bl	800086c <__aeabi_ddiv>
 800314a:	4602      	mov	r2, r0
 800314c:	460b      	mov	r3, r1
 800314e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	temp = 1 - c2*c2;
 8003152:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003156:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800315a:	f7fd fa5d 	bl	8000618 <__aeabi_dmul>
 800315e:	4602      	mov	r2, r0
 8003160:	460b      	mov	r3, r1
 8003162:	f04f 0000 	mov.w	r0, #0
 8003166:	49af      	ldr	r1, [pc, #700]	; (8003424 <kinematicInverse+0x3dc>)
 8003168:	f7fd f89e 	bl	80002a8 <__aeabi_dsub>
 800316c:	4602      	mov	r2, r0
 800316e:	460b      	mov	r3, r1
 8003170:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	if ( temp < 0 ) {
 8003174:	f04f 0200 	mov.w	r2, #0
 8003178:	f04f 0300 	mov.w	r3, #0
 800317c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003180:	f7fd fcbc 	bl	8000afc <__aeabi_dcmplt>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <kinematicInverse+0x146>
		return FALSE;
 800318a:	2300      	movs	r3, #0
 800318c:	e136      	b.n	80033fc <kinematicInverse+0x3b4>
	}
	s2_positive  = sqrt(temp); // Note that there are 2 solution: elbow up & elbow down
 800318e:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 8003192:	f015 f8af 	bl	80182f4 <sqrt>
 8003196:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
	s2_negative	 = -s2_positive;
 800319a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800319c:	63bb      	str	r3, [r7, #56]	; 0x38
 800319e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031a0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80031a4:	63fb      	str	r3, [r7, #60]	; 0x3c

	theta2_positive = atan2(s2_positive,c2);
 80031a6:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 80031aa:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 80031ae:	f015 f89f 	bl	80182f0 <atan2>
 80031b2:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
	theta2_negative = atan2(s2_negative,c2);
 80031b6:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 80031ba:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 80031be:	f015 f897 	bl	80182f0 <atan2>
 80031c2:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	// Choose relevant situation : nearest
	if ( fabs( theta2_positive - current.Theta2) <= fabs( theta2_negative - current.Theta2)) {
 80031c6:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 80031ca:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80031ce:	f7fd f86b 	bl	80002a8 <__aeabi_dsub>
 80031d2:	4602      	mov	r2, r0
 80031d4:	460b      	mov	r3, r1
 80031d6:	4614      	mov	r4, r2
 80031d8:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80031dc:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 80031e0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80031e4:	f7fd f860 	bl	80002a8 <__aeabi_dsub>
 80031e8:	4602      	mov	r2, r0
 80031ea:	460b      	mov	r3, r1
 80031ec:	4690      	mov	r8, r2
 80031ee:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80031f2:	4642      	mov	r2, r8
 80031f4:	464b      	mov	r3, r9
 80031f6:	4620      	mov	r0, r4
 80031f8:	4629      	mov	r1, r5
 80031fa:	f7fd fc89 	bl	8000b10 <__aeabi_dcmple>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d008      	beq.n	8003216 <kinematicInverse+0x1ce>
		s2 		= s2_positive;
 8003204:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8003208:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
		theta2 	= theta2_positive;
 800320c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8003210:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
 8003214:	e007      	b.n	8003226 <kinematicInverse+0x1de>
	} else {
		s2 		= s2_negative;
 8003216:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800321a:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
		theta2 	= theta2_negative;
 800321e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8003222:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	}

	s1 = ((a1 + a2*c2)*pWy - a2*s2*pWx) / (pWx*pWx + pWy*pWy);
 8003226:	f04f 0200 	mov.w	r2, #0
 800322a:	4b7f      	ldr	r3, [pc, #508]	; (8003428 <kinematicInverse+0x3e0>)
 800322c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003230:	f7fd f9f2 	bl	8000618 <__aeabi_dmul>
 8003234:	4603      	mov	r3, r0
 8003236:	460c      	mov	r4, r1
 8003238:	4618      	mov	r0, r3
 800323a:	4621      	mov	r1, r4
 800323c:	a376      	add	r3, pc, #472	; (adr r3, 8003418 <kinematicInverse+0x3d0>)
 800323e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003242:	f7fd f833 	bl	80002ac <__adddf3>
 8003246:	4603      	mov	r3, r0
 8003248:	460c      	mov	r4, r1
 800324a:	4618      	mov	r0, r3
 800324c:	4621      	mov	r1, r4
 800324e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003252:	f7fd f9e1 	bl	8000618 <__aeabi_dmul>
 8003256:	4603      	mov	r3, r0
 8003258:	460c      	mov	r4, r1
 800325a:	4625      	mov	r5, r4
 800325c:	461c      	mov	r4, r3
 800325e:	f04f 0200 	mov.w	r2, #0
 8003262:	4b71      	ldr	r3, [pc, #452]	; (8003428 <kinematicInverse+0x3e0>)
 8003264:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003268:	f7fd f9d6 	bl	8000618 <__aeabi_dmul>
 800326c:	4602      	mov	r2, r0
 800326e:	460b      	mov	r3, r1
 8003270:	4610      	mov	r0, r2
 8003272:	4619      	mov	r1, r3
 8003274:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003278:	f7fd f9ce 	bl	8000618 <__aeabi_dmul>
 800327c:	4602      	mov	r2, r0
 800327e:	460b      	mov	r3, r1
 8003280:	4620      	mov	r0, r4
 8003282:	4629      	mov	r1, r5
 8003284:	f7fd f810 	bl	80002a8 <__aeabi_dsub>
 8003288:	4603      	mov	r3, r0
 800328a:	460c      	mov	r4, r1
 800328c:	4625      	mov	r5, r4
 800328e:	461c      	mov	r4, r3
 8003290:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003294:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003298:	f7fd f9be 	bl	8000618 <__aeabi_dmul>
 800329c:	4602      	mov	r2, r0
 800329e:	460b      	mov	r3, r1
 80032a0:	4690      	mov	r8, r2
 80032a2:	4699      	mov	r9, r3
 80032a4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80032a8:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80032ac:	f7fd f9b4 	bl	8000618 <__aeabi_dmul>
 80032b0:	4602      	mov	r2, r0
 80032b2:	460b      	mov	r3, r1
 80032b4:	4640      	mov	r0, r8
 80032b6:	4649      	mov	r1, r9
 80032b8:	f7fc fff8 	bl	80002ac <__adddf3>
 80032bc:	4602      	mov	r2, r0
 80032be:	460b      	mov	r3, r1
 80032c0:	4620      	mov	r0, r4
 80032c2:	4629      	mov	r1, r5
 80032c4:	f7fd fad2 	bl	800086c <__aeabi_ddiv>
 80032c8:	4603      	mov	r3, r0
 80032ca:	460c      	mov	r4, r1
 80032cc:	e9c7 3408 	strd	r3, r4, [r7, #32]
	c1 = ((a1 + a2*c2)*pWx + a2*s2*pWy) / (pWx*pWx + pWy*pWy);
 80032d0:	f04f 0200 	mov.w	r2, #0
 80032d4:	4b54      	ldr	r3, [pc, #336]	; (8003428 <kinematicInverse+0x3e0>)
 80032d6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80032da:	f7fd f99d 	bl	8000618 <__aeabi_dmul>
 80032de:	4603      	mov	r3, r0
 80032e0:	460c      	mov	r4, r1
 80032e2:	4618      	mov	r0, r3
 80032e4:	4621      	mov	r1, r4
 80032e6:	a34c      	add	r3, pc, #304	; (adr r3, 8003418 <kinematicInverse+0x3d0>)
 80032e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ec:	f7fc ffde 	bl	80002ac <__adddf3>
 80032f0:	4603      	mov	r3, r0
 80032f2:	460c      	mov	r4, r1
 80032f4:	4618      	mov	r0, r3
 80032f6:	4621      	mov	r1, r4
 80032f8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80032fc:	f7fd f98c 	bl	8000618 <__aeabi_dmul>
 8003300:	4603      	mov	r3, r0
 8003302:	460c      	mov	r4, r1
 8003304:	4625      	mov	r5, r4
 8003306:	461c      	mov	r4, r3
 8003308:	f04f 0200 	mov.w	r2, #0
 800330c:	4b46      	ldr	r3, [pc, #280]	; (8003428 <kinematicInverse+0x3e0>)
 800330e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003312:	f7fd f981 	bl	8000618 <__aeabi_dmul>
 8003316:	4602      	mov	r2, r0
 8003318:	460b      	mov	r3, r1
 800331a:	4610      	mov	r0, r2
 800331c:	4619      	mov	r1, r3
 800331e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003322:	f7fd f979 	bl	8000618 <__aeabi_dmul>
 8003326:	4602      	mov	r2, r0
 8003328:	460b      	mov	r3, r1
 800332a:	4620      	mov	r0, r4
 800332c:	4629      	mov	r1, r5
 800332e:	f7fc ffbd 	bl	80002ac <__adddf3>
 8003332:	4603      	mov	r3, r0
 8003334:	460c      	mov	r4, r1
 8003336:	4625      	mov	r5, r4
 8003338:	461c      	mov	r4, r3
 800333a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800333e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003342:	f7fd f969 	bl	8000618 <__aeabi_dmul>
 8003346:	4602      	mov	r2, r0
 8003348:	460b      	mov	r3, r1
 800334a:	4690      	mov	r8, r2
 800334c:	4699      	mov	r9, r3
 800334e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003352:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003356:	f7fd f95f 	bl	8000618 <__aeabi_dmul>
 800335a:	4602      	mov	r2, r0
 800335c:	460b      	mov	r3, r1
 800335e:	4640      	mov	r0, r8
 8003360:	4649      	mov	r1, r9
 8003362:	f7fc ffa3 	bl	80002ac <__adddf3>
 8003366:	4602      	mov	r2, r0
 8003368:	460b      	mov	r3, r1
 800336a:	4620      	mov	r0, r4
 800336c:	4629      	mov	r1, r5
 800336e:	f7fd fa7d 	bl	800086c <__aeabi_ddiv>
 8003372:	4603      	mov	r3, r0
 8003374:	460c      	mov	r4, r1
 8003376:	e9c7 3406 	strd	r3, r4, [r7, #24]
	theta1 = atan2(s1,c1);
 800337a:	ed97 1b06 	vldr	d1, [r7, #24]
 800337e:	ed97 0b08 	vldr	d0, [r7, #32]
 8003382:	f014 ffb5 	bl	80182f0 <atan2>
 8003386:	ed87 0b04 	vstr	d0, [r7, #16]
 	theta4 = theta1 + theta2 - pnt->roll;
 800338a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800338e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003392:	f7fc ff8b 	bl	80002ac <__adddf3>
 8003396:	4603      	mov	r3, r0
 8003398:	460c      	mov	r4, r1
 800339a:	4618      	mov	r0, r3
 800339c:	4621      	mov	r1, r4
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	e9d3 3410 	ldrd	r3, r4, [r3, #64]	; 0x40
 80033a4:	461a      	mov	r2, r3
 80033a6:	4623      	mov	r3, r4
 80033a8:	f7fc ff7e 	bl	80002a8 <__aeabi_dsub>
 80033ac:	4603      	mov	r3, r0
 80033ae:	460c      	mov	r4, r1
 80033b0:	e9c7 3402 	strd	r3, r4, [r7, #8]

	if ( SCARA_STATUS_OK != scaraCheckWorkSpace4(theta1, theta2, d3, theta4)) {
 80033b4:	ed97 3b02 	vldr	d3, [r7, #8]
 80033b8:	ed97 2b1a 	vldr	d2, [r7, #104]	; 0x68
 80033bc:	ed97 1b1e 	vldr	d1, [r7, #120]	; 0x78
 80033c0:	ed97 0b04 	vldr	d0, [r7, #16]
 80033c4:	f005 f9bc 	bl	8008740 <scaraCheckWorkSpace4>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d001      	beq.n	80033d2 <kinematicInverse+0x38a>
		return FALSE; // Over workspace !!!
 80033ce:	2300      	movs	r3, #0
 80033d0:	e014      	b.n	80033fc <kinematicInverse+0x3b4>
	}
	pnt->Theta1 = theta1;
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80033d8:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	pnt->Theta2 = theta2;
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 80033e2:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	pnt->D3		= d3;
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80033ec:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	pnt->Theta4 = theta4;
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80033f6:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

	return TRUE; // All is well
 80033fa:	2301      	movs	r3, #1
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3780      	adds	r7, #128	; 0x80
 8003400:	46bd      	mov	sp, r7
 8003402:	e8bd 4fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003406:	b002      	add	sp, #8
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	f3af 8000 	nop.w
 8003410:	00000000 	.word	0x00000000
 8003414:	40eec800 	.word	0x40eec800
 8003418:	00000000 	.word	0x00000000
 800341c:	4068a000 	.word	0x4068a000
 8003420:	40d90000 	.word	0x40d90000
 8003424:	3ff00000 	.word	0x3ff00000
 8003428:	40640000 	.word	0x40640000
 800342c:	80000000 	.word	0x80000000
 8003430:	4060aa6e 	.word	0x4060aa6e
 8003434:	80000000 	.word	0x80000000
 8003438:	40402e14 	.word	0x40402e14
 800343c:	00000000 	.word	0x00000000
 8003440:	40e2f320 	.word	0x40e2f320

08003444 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003448:	f005 ff50 	bl	80092ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800344c:	f000 f810 	bl	8003470 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003450:	f7ff fc04 	bl	8002c5c <MX_GPIO_Init>
  MX_DMA_Init();
 8003454:	f7fe fd98 	bl	8001f88 <MX_DMA_Init>
  MX_UART4_Init();
 8003458:	f005 fe4a 	bl	80090f0 <MX_UART4_Init>
  MX_FSMC_Init();
 800345c:	f7ff fb36 	bl	8002acc <MX_FSMC_Init>
  MX_TIM7_Init();
 8003460:	f005 fde8 	bl	8009034 <MX_TIM7_Init>
  //lowlayer_writePulse(0, 0, 0, 0);
  //HAL_Delay(10);
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8003464:	f7fe fdca 	bl	8001ffc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8003468:	f00c fd0e 	bl	800fe88 <osKernelStart>
//  		  HAL_Delay(10);
//  	  }
//  lowlayer_writePulse(0, 0, 0, 0);
//  __NOP();

  while (1)
 800346c:	e7fe      	b.n	800346c <main+0x28>
	...

08003470 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b094      	sub	sp, #80	; 0x50
 8003474:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003476:	f107 0320 	add.w	r3, r7, #32
 800347a:	2230      	movs	r2, #48	; 0x30
 800347c:	2100      	movs	r1, #0
 800347e:	4618      	mov	r0, r3
 8003480:	f010 fc12 	bl	8013ca8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003484:	f107 030c 	add.w	r3, r7, #12
 8003488:	2200      	movs	r2, #0
 800348a:	601a      	str	r2, [r3, #0]
 800348c:	605a      	str	r2, [r3, #4]
 800348e:	609a      	str	r2, [r3, #8]
 8003490:	60da      	str	r2, [r3, #12]
 8003492:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003494:	2300      	movs	r3, #0
 8003496:	60bb      	str	r3, [r7, #8]
 8003498:	4b28      	ldr	r3, [pc, #160]	; (800353c <SystemClock_Config+0xcc>)
 800349a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349c:	4a27      	ldr	r2, [pc, #156]	; (800353c <SystemClock_Config+0xcc>)
 800349e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034a2:	6413      	str	r3, [r2, #64]	; 0x40
 80034a4:	4b25      	ldr	r3, [pc, #148]	; (800353c <SystemClock_Config+0xcc>)
 80034a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ac:	60bb      	str	r3, [r7, #8]
 80034ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80034b0:	2300      	movs	r3, #0
 80034b2:	607b      	str	r3, [r7, #4]
 80034b4:	4b22      	ldr	r3, [pc, #136]	; (8003540 <SystemClock_Config+0xd0>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a21      	ldr	r2, [pc, #132]	; (8003540 <SystemClock_Config+0xd0>)
 80034ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034be:	6013      	str	r3, [r2, #0]
 80034c0:	4b1f      	ldr	r3, [pc, #124]	; (8003540 <SystemClock_Config+0xd0>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034c8:	607b      	str	r3, [r7, #4]
 80034ca:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80034cc:	2301      	movs	r3, #1
 80034ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80034d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80034d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80034d6:	2302      	movs	r3, #2
 80034d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80034da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80034de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80034e0:	2308      	movs	r3, #8
 80034e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80034e4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80034e8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80034ea:	2302      	movs	r3, #2
 80034ec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80034ee:	2307      	movs	r3, #7
 80034f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80034f2:	f107 0320 	add.w	r3, r7, #32
 80034f6:	4618      	mov	r0, r3
 80034f8:	f007 ff70 	bl	800b3dc <HAL_RCC_OscConfig>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8003502:	f000 f831 	bl	8003568 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003506:	230f      	movs	r3, #15
 8003508:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800350a:	2302      	movs	r3, #2
 800350c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800350e:	2300      	movs	r3, #0
 8003510:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003512:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003516:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003518:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800351c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800351e:	f107 030c 	add.w	r3, r7, #12
 8003522:	2105      	movs	r1, #5
 8003524:	4618      	mov	r0, r3
 8003526:	f008 f9c9 	bl	800b8bc <HAL_RCC_ClockConfig>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d001      	beq.n	8003534 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8003530:	f000 f81a 	bl	8003568 <Error_Handler>
  }
}
 8003534:	bf00      	nop
 8003536:	3750      	adds	r7, #80	; 0x50
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}
 800353c:	40023800 	.word	0x40023800
 8003540:	40007000 	.word	0x40007000

08003544 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a04      	ldr	r2, [pc, #16]	; (8003564 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d101      	bne.n	800355a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003556:	f005 feeb 	bl	8009330 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800355a:	bf00      	nop
 800355c:	3708      	adds	r7, #8
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	40001000 	.word	0x40001000

08003568 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003568:	b480      	push	{r7}
 800356a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800356c:	bf00      	nop
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr

08003576 <ringBuff_PushChar>:
 *  data		: data to write
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t	ringBuff_PushChar(RINGBUFFER_TypeDef *ringbuff, uint8_t data) {
 8003576:	b480      	push	{r7}
 8003578:	b083      	sub	sp, #12
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
 800357e:	460b      	mov	r3, r1
 8003580:	70fb      	strb	r3, [r7, #3]
	if (ringbuff->isFull_Flag) {
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
 8003588:	2b00      	cmp	r3, #0
 800358a:	d001      	beq.n	8003590 <ringBuff_PushChar+0x1a>
		return FALSE;
 800358c:	2300      	movs	r3, #0
 800358e:	e024      	b.n	80035da <ringBuff_PushChar+0x64>
	} else {
			ringbuff->Array[ringbuff->head]	= data;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	78f9      	ldrb	r1, [r7, #3]
 800359a:	54d1      	strb	r1, [r2, r3]
			ringbuff->head					= (ringbuff->head + 1) % RINGBUFFER_SIZE;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80035a2:	3301      	adds	r3, #1
 80035a4:	425a      	negs	r2, r3
 80035a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035aa:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80035ae:	bf58      	it	pl
 80035b0:	4253      	negpl	r3, r2
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
			if (ringbuff->head == ringbuff->tail) {
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d103      	bne.n	80035d0 <ringBuff_PushChar+0x5a>
				ringbuff->isFull_Flag = TRUE;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
			}
			ringbuff->isEmpty_Flag = FALSE;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 2409 	strb.w	r2, [r3, #1033]	; 0x409
			return TRUE;
 80035d8:	2301      	movs	r3, #1
	}
}
 80035da:	4618      	mov	r0, r3
 80035dc:	370c      	adds	r7, #12
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr

080035e6 <ringBuff_PopChar>:
 *  *ptr_data	: pointer of destination
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t	ringBuff_PopChar(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data) {
 80035e6:	b480      	push	{r7}
 80035e8:	b083      	sub	sp, #12
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
 80035ee:	6039      	str	r1, [r7, #0]
	if (ringbuff->isEmpty_Flag) {
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f893 3409 	ldrb.w	r3, [r3, #1033]	; 0x409
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d001      	beq.n	80035fe <ringBuff_PopChar+0x18>
		return FALSE;
 80035fa:	2300      	movs	r3, #0
 80035fc:	e025      	b.n	800364a <ringBuff_PopChar+0x64>
	} else {
			*ptr_data		= ringbuff->Array[ringbuff->tail];
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	5cd2      	ldrb	r2, [r2, r3]
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	701a      	strb	r2, [r3, #0]
			ringbuff->tail	= (ringbuff->tail +1) % RINGBUFFER_SIZE;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003612:	3301      	adds	r3, #1
 8003614:	425a      	negs	r2, r3
 8003616:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800361a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800361e:	bf58      	it	pl
 8003620:	4253      	negpl	r3, r2
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
			if (ringbuff->head == ringbuff->tail) {
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003634:	429a      	cmp	r2, r3
 8003636:	d103      	bne.n	8003640 <ringBuff_PopChar+0x5a>
				ringbuff->isEmpty_Flag = TRUE;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 2409 	strb.w	r2, [r3, #1033]	; 0x409
			}
			ringbuff->isFull_Flag = FALSE;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
			return TRUE;
 8003648:	2301      	movs	r3, #1
	}
}
 800364a:	4618      	mov	r0, r3
 800364c:	370c      	adds	r7, #12
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr

08003656 <ringBuff_PushArray>:
 *  *ptr_data	: pointer of source
 *  len			: maximum number of bytes that want to copy
 *
 *  returns:	: number of bytes copied
 */
int32_t ringBuff_PushArray(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data, int32_t len) {
 8003656:	b580      	push	{r7, lr}
 8003658:	b086      	sub	sp, #24
 800365a:	af00      	add	r7, sp, #0
 800365c:	60f8      	str	r0, [r7, #12]
 800365e:	60b9      	str	r1, [r7, #8]
 8003660:	607a      	str	r2, [r7, #4]
	int16_t success_number;

	for (success_number = 0; success_number < len; success_number++) {
 8003662:	2300      	movs	r3, #0
 8003664:	82fb      	strh	r3, [r7, #22]
 8003666:	e011      	b.n	800368c <ringBuff_PushArray+0x36>
		if ( !ringBuff_PushChar(ringbuff, *(ptr_data + success_number))) {
 8003668:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800366c:	68ba      	ldr	r2, [r7, #8]
 800366e:	4413      	add	r3, r2
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	4619      	mov	r1, r3
 8003674:	68f8      	ldr	r0, [r7, #12]
 8003676:	f7ff ff7e 	bl	8003576 <ringBuff_PushChar>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d00b      	beq.n	8003698 <ringBuff_PushArray+0x42>
	for (success_number = 0; success_number < len; success_number++) {
 8003680:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003684:	b29b      	uxth	r3, r3
 8003686:	3301      	adds	r3, #1
 8003688:	b29b      	uxth	r3, r3
 800368a:	82fb      	strh	r3, [r7, #22]
 800368c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	429a      	cmp	r2, r3
 8003694:	dce8      	bgt.n	8003668 <ringBuff_PushArray+0x12>
 8003696:	e000      	b.n	800369a <ringBuff_PushArray+0x44>
			break;
 8003698:	bf00      	nop
		}// stop when ring buffer FULL
	}
	return success_number;
 800369a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3718      	adds	r7, #24
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <ringBuff_PopArray>:
 *  *ptr_data	: pointer of destination
 *  len			: maximum number of bytes that want to copy
 *
 *  returns:	: number of bytes copied
 */
int32_t ringBuff_PopArray(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data, int32_t len) {
 80036a6:	b580      	push	{r7, lr}
 80036a8:	b086      	sub	sp, #24
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	60f8      	str	r0, [r7, #12]
 80036ae:	60b9      	str	r1, [r7, #8]
 80036b0:	607a      	str	r2, [r7, #4]
	int32_t success_number;

	for (success_number = 0; success_number < len; success_number++) {
 80036b2:	2300      	movs	r3, #0
 80036b4:	617b      	str	r3, [r7, #20]
 80036b6:	e00c      	b.n	80036d2 <ringBuff_PopArray+0x2c>
		if ( !ringBuff_PopChar(ringbuff, (ptr_data + success_number))) {
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	68ba      	ldr	r2, [r7, #8]
 80036bc:	4413      	add	r3, r2
 80036be:	4619      	mov	r1, r3
 80036c0:	68f8      	ldr	r0, [r7, #12]
 80036c2:	f7ff ff90 	bl	80035e6 <ringBuff_PopChar>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d007      	beq.n	80036dc <ringBuff_PopArray+0x36>
	for (success_number = 0; success_number < len; success_number++) {
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	3301      	adds	r3, #1
 80036d0:	617b      	str	r3, [r7, #20]
 80036d2:	697a      	ldr	r2, [r7, #20]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	dbee      	blt.n	80036b8 <ringBuff_PopArray+0x12>
 80036da:	e000      	b.n	80036de <ringBuff_PopArray+0x38>
			break;
 80036dc:	bf00      	nop
		}// stop when ring buffer EMPTY
	}
	return success_number;
 80036de:	697b      	ldr	r3, [r7, #20]
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3718      	adds	r7, #24
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <ringBuff_DistanceOf>:
 *  cmp_char	: compare character
 *
 *  returns:	: distance from 'tail' to 'cmp_char'
 *  			  -1 'cmp_char' could not be found.
 */
int32_t	ringBuff_DistanceOf	(RINGBUFFER_TypeDef *ringbuff, uint8_t cmp_char) {
 80036e8:	b480      	push	{r7}
 80036ea:	b087      	sub	sp, #28
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	460b      	mov	r3, r1
 80036f2:	70fb      	strb	r3, [r7, #3]
	int32_t index;
	int32_t distance = 0;
 80036f4:	2300      	movs	r3, #0
 80036f6:	613b      	str	r3, [r7, #16]

	index = ringbuff->tail;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80036fe:	617b      	str	r3, [r7, #20]
	if (ringbuff->isFull_Flag) {
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
 8003706:	2b00      	cmp	r3, #0
 8003708:	d036      	beq.n	8003778 <ringBuff_DistanceOf+0x90>
		for ( int32_t i = 0; i < RINGBUFFER_SIZE; i++, index = (index + 1) % RINGBUFFER_SIZE) {
 800370a:	2300      	movs	r3, #0
 800370c:	60fb      	str	r3, [r7, #12]
 800370e:	e018      	b.n	8003742 <ringBuff_DistanceOf+0x5a>
				if ( cmp_char == ringbuff->Array[index]) {
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	4413      	add	r3, r2
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	78fa      	ldrb	r2, [r7, #3]
 800371a:	429a      	cmp	r2, r3
 800371c:	d101      	bne.n	8003722 <ringBuff_DistanceOf+0x3a>
					return distance;
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	e037      	b.n	8003792 <ringBuff_DistanceOf+0xaa>
				}
				distance++;
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	3301      	adds	r3, #1
 8003726:	613b      	str	r3, [r7, #16]
		for ( int32_t i = 0; i < RINGBUFFER_SIZE; i++, index = (index + 1) % RINGBUFFER_SIZE) {
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	3301      	adds	r3, #1
 800372c:	60fb      	str	r3, [r7, #12]
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	3301      	adds	r3, #1
 8003732:	425a      	negs	r2, r3
 8003734:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003738:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800373c:	bf58      	it	pl
 800373e:	4253      	negpl	r3, r2
 8003740:	617b      	str	r3, [r7, #20]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003748:	dbe2      	blt.n	8003710 <ringBuff_DistanceOf+0x28>
 800374a:	e020      	b.n	800378e <ringBuff_DistanceOf+0xa6>
			}

	} else {
		for ( ; (index != ringbuff->head) || !ringbuff->isEmpty_Flag; index = (index + 1) % RINGBUFFER_SIZE) {
				if ( cmp_char == ringbuff->Array[index]) {
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	4413      	add	r3, r2
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	78fa      	ldrb	r2, [r7, #3]
 8003756:	429a      	cmp	r2, r3
 8003758:	d101      	bne.n	800375e <ringBuff_DistanceOf+0x76>
					return distance;
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	e019      	b.n	8003792 <ringBuff_DistanceOf+0xaa>
				}
				distance++;
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	3301      	adds	r3, #1
 8003762:	613b      	str	r3, [r7, #16]
		for ( ; (index != ringbuff->head) || !ringbuff->isEmpty_Flag; index = (index + 1) % RINGBUFFER_SIZE) {
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	3301      	adds	r3, #1
 8003768:	425a      	negs	r2, r3
 800376a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800376e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003772:	bf58      	it	pl
 8003774:	4253      	negpl	r3, r2
 8003776:	617b      	str	r3, [r7, #20]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800377e:	697a      	ldr	r2, [r7, #20]
 8003780:	429a      	cmp	r2, r3
 8003782:	d1e3      	bne.n	800374c <ringBuff_DistanceOf+0x64>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f893 3409 	ldrb.w	r3, [r3, #1033]	; 0x409
 800378a:	2b00      	cmp	r3, #0
 800378c:	d0de      	beq.n	800374c <ringBuff_DistanceOf+0x64>
			}
	}
	return -1;
 800378e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003792:	4618      	mov	r0, r3
 8003794:	371c      	adds	r7, #28
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
	...

080037a0 <lowlayer_scanReset>:
uint8_t state_scan;
uint8_t scan_flag;

const int8_t	pulse_scan[4] = {3, 5, 5, 20};

void	lowlayer_scanReset(void) {
 80037a0:	b580      	push	{r7, lr}
 80037a2:	af00      	add	r7, sp, #0
	scan_flag = 0;
 80037a4:	4b06      	ldr	r3, [pc, #24]	; (80037c0 <lowlayer_scanReset+0x20>)
 80037a6:	2200      	movs	r2, #0
 80037a8:	701a      	strb	r2, [r3, #0]
	state_scan = 0;
 80037aa:	4b06      	ldr	r3, [pc, #24]	; (80037c4 <lowlayer_scanReset+0x24>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(CAPTURE_ENABLE_GPIO_Port, CAPTURE_ENABLE_Pin, GPIO_PIN_RESET);
 80037b0:	2200      	movs	r2, #0
 80037b2:	2108      	movs	r1, #8
 80037b4:	4804      	ldr	r0, [pc, #16]	; (80037c8 <lowlayer_scanReset+0x28>)
 80037b6:	f006 fc17 	bl	8009fe8 <HAL_GPIO_WritePin>
}
 80037ba:	bf00      	nop
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	20005348 	.word	0x20005348
 80037c4:	20005368 	.word	0x20005368
 80037c8:	40020c00 	.word	0x40020c00
 80037cc:	00000000 	.word	0x00000000

080037d0 <lowlayer_scanFlow>:

uint8_t	lowlayer_scanFlow(void) {
 80037d0:	b590      	push	{r4, r7, lr}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
	// Scan limit switch from 3 to 0
	int8_t pulse[4] = {0, 0, 0 ,0};
 80037d6:	2300      	movs	r3, #0
 80037d8:	607b      	str	r3, [r7, #4]
	lowlayer_updateLimit();
 80037da:	f000 fe63 	bl	80044a4 <lowlayer_updateLimit>
	if (state_scan < 4) {
 80037de:	4b8a      	ldr	r3, [pc, #552]	; (8003a08 <lowlayer_scanFlow+0x238>)
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	2b03      	cmp	r3, #3
 80037e4:	d837      	bhi.n	8003856 <lowlayer_scanFlow+0x86>
		if (limit_switch[3 - state_scan] == 0) {
 80037e6:	4b88      	ldr	r3, [pc, #544]	; (8003a08 <lowlayer_scanFlow+0x238>)
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	f1c3 0303 	rsb	r3, r3, #3
 80037ee:	4a87      	ldr	r2, [pc, #540]	; (8003a0c <lowlayer_scanFlow+0x23c>)
 80037f0:	5cd3      	ldrb	r3, [r2, r3]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d121      	bne.n	800383a <lowlayer_scanFlow+0x6a>
			pulse[3 - state_scan] = pulse_scan[3 - state_scan];
 80037f6:	4b84      	ldr	r3, [pc, #528]	; (8003a08 <lowlayer_scanFlow+0x238>)
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	f1c3 0203 	rsb	r2, r3, #3
 80037fe:	4b82      	ldr	r3, [pc, #520]	; (8003a08 <lowlayer_scanFlow+0x238>)
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	f1c3 0303 	rsb	r3, r3, #3
 8003806:	4982      	ldr	r1, [pc, #520]	; (8003a10 <lowlayer_scanFlow+0x240>)
 8003808:	568a      	ldrsb	r2, [r1, r2]
 800380a:	f107 0108 	add.w	r1, r7, #8
 800380e:	440b      	add	r3, r1
 8003810:	f803 2c04 	strb.w	r2, [r3, #-4]
			lowlayer_writePulse(-pulse[0], pulse[1], -pulse[2], pulse[3]);
 8003814:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8003818:	b2db      	uxtb	r3, r3
 800381a:	425b      	negs	r3, r3
 800381c:	b2db      	uxtb	r3, r3
 800381e:	b258      	sxtb	r0, r3
 8003820:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8003824:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003828:	b2db      	uxtb	r3, r3
 800382a:	425b      	negs	r3, r3
 800382c:	b2db      	uxtb	r3, r3
 800382e:	b25a      	sxtb	r2, r3
 8003830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003834:	f000 fcb4 	bl	80041a0 <lowlayer_writePulse>
 8003838:	e00b      	b.n	8003852 <lowlayer_scanFlow+0x82>
		} else {
			state_scan++;
 800383a:	4b73      	ldr	r3, [pc, #460]	; (8003a08 <lowlayer_scanFlow+0x238>)
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	3301      	adds	r3, #1
 8003840:	b2da      	uxtb	r2, r3
 8003842:	4b71      	ldr	r3, [pc, #452]	; (8003a08 <lowlayer_scanFlow+0x238>)
 8003844:	701a      	strb	r2, [r3, #0]
			lowlayer_writePulse(0, 0, 0, 0);
 8003846:	2300      	movs	r3, #0
 8003848:	2200      	movs	r2, #0
 800384a:	2100      	movs	r1, #0
 800384c:	2000      	movs	r0, #0
 800384e:	f000 fca7 	bl	80041a0 <lowlayer_writePulse>
		}

		return FALSE;
 8003852:	2300      	movs	r3, #0
 8003854:	e0bc      	b.n	80039d0 <lowlayer_scanFlow+0x200>
	} else {
		HAL_GPIO_WritePin(CAPTURE_ENABLE_GPIO_Port, CAPTURE_ENABLE_Pin, GPIO_PIN_SET);
 8003856:	2201      	movs	r2, #1
 8003858:	2108      	movs	r1, #8
 800385a:	486e      	ldr	r0, [pc, #440]	; (8003a14 <lowlayer_scanFlow+0x244>)
 800385c:	f006 fbc4 	bl	8009fe8 <HAL_GPIO_WritePin>
		lowlayer_updateCapture();
 8003860:	f000 fe04 	bl	800446c <lowlayer_updateCapture>
		lowlayer_writePulse(0, 0, 0, 0);
 8003864:	2300      	movs	r3, #0
 8003866:	2200      	movs	r2, #0
 8003868:	2100      	movs	r1, #0
 800386a:	2000      	movs	r0, #0
 800386c:	f000 fc98 	bl	80041a0 <lowlayer_writePulse>
		scan_flag = 1;
 8003870:	4b69      	ldr	r3, [pc, #420]	; (8003a18 <lowlayer_scanFlow+0x248>)
 8003872:	2201      	movs	r2, #1
 8003874:	701a      	strb	r2, [r3, #0]
		// Update offset
		offset_encoder[0] 	= position_capture[0];
 8003876:	4b69      	ldr	r3, [pc, #420]	; (8003a1c <lowlayer_scanFlow+0x24c>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a69      	ldr	r2, [pc, #420]	; (8003a20 <lowlayer_scanFlow+0x250>)
 800387c:	6013      	str	r3, [r2, #0]
		offset_encoder[1] 	= position_capture[1];
 800387e:	4b67      	ldr	r3, [pc, #412]	; (8003a1c <lowlayer_scanFlow+0x24c>)
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	4a67      	ldr	r2, [pc, #412]	; (8003a20 <lowlayer_scanFlow+0x250>)
 8003884:	6053      	str	r3, [r2, #4]
		offset_encoder[2] 	= position_capture[2];
 8003886:	4b65      	ldr	r3, [pc, #404]	; (8003a1c <lowlayer_scanFlow+0x24c>)
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	4a65      	ldr	r2, [pc, #404]	; (8003a20 <lowlayer_scanFlow+0x250>)
 800388c:	6093      	str	r3, [r2, #8]
		offset_stepper		= pulse_accumulate[3];
 800388e:	4b65      	ldr	r3, [pc, #404]	; (8003a24 <lowlayer_scanFlow+0x254>)
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	4a65      	ldr	r2, [pc, #404]	; (8003a28 <lowlayer_scanFlow+0x258>)
 8003894:	6013      	str	r3, [r2, #0]

		offset_setpoint[0]	= HARD_LIM0_NEG
				- DIR_ENCODER_0*offset_encoder[0]*2.0*PI/ENCODER_J0;
 8003896:	4b62      	ldr	r3, [pc, #392]	; (8003a20 <lowlayer_scanFlow+0x250>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	ee07 3a90 	vmov	s15, r3
 800389e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038a2:	ee17 0a90 	vmov	r0, s15
 80038a6:	f7fc fe5f 	bl	8000568 <__aeabi_f2d>
 80038aa:	4602      	mov	r2, r0
 80038ac:	460b      	mov	r3, r1
 80038ae:	f7fc fcfd 	bl	80002ac <__adddf3>
 80038b2:	4603      	mov	r3, r0
 80038b4:	460c      	mov	r4, r1
 80038b6:	4618      	mov	r0, r3
 80038b8:	4621      	mov	r1, r4
 80038ba:	a347      	add	r3, pc, #284	; (adr r3, 80039d8 <lowlayer_scanFlow+0x208>)
 80038bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c0:	f7fc feaa 	bl	8000618 <__aeabi_dmul>
 80038c4:	4603      	mov	r3, r0
 80038c6:	460c      	mov	r4, r1
 80038c8:	4618      	mov	r0, r3
 80038ca:	4621      	mov	r1, r4
 80038cc:	a344      	add	r3, pc, #272	; (adr r3, 80039e0 <lowlayer_scanFlow+0x210>)
 80038ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d2:	f7fc ffcb 	bl	800086c <__aeabi_ddiv>
 80038d6:	4603      	mov	r3, r0
 80038d8:	460c      	mov	r4, r1
 80038da:	461a      	mov	r2, r3
 80038dc:	4623      	mov	r3, r4
 80038de:	a142      	add	r1, pc, #264	; (adr r1, 80039e8 <lowlayer_scanFlow+0x218>)
 80038e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80038e4:	f7fc fce0 	bl	80002a8 <__aeabi_dsub>
 80038e8:	4603      	mov	r3, r0
 80038ea:	460c      	mov	r4, r1
		offset_setpoint[0]	= HARD_LIM0_NEG
 80038ec:	4a4f      	ldr	r2, [pc, #316]	; (8003a2c <lowlayer_scanFlow+0x25c>)
 80038ee:	e9c2 3400 	strd	r3, r4, [r2]
		offset_setpoint[1]	= HARD_LIM1_POS
				- DIR_ENCODER_1*offset_encoder[1]*2.0*PI/ENCODER_J1;
 80038f2:	4b4b      	ldr	r3, [pc, #300]	; (8003a20 <lowlayer_scanFlow+0x250>)
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	ee07 3a90 	vmov	s15, r3
 80038fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038fe:	ee17 0a90 	vmov	r0, s15
 8003902:	f7fc fe31 	bl	8000568 <__aeabi_f2d>
 8003906:	4602      	mov	r2, r0
 8003908:	460b      	mov	r3, r1
 800390a:	f7fc fccf 	bl	80002ac <__adddf3>
 800390e:	4603      	mov	r3, r0
 8003910:	460c      	mov	r4, r1
 8003912:	4618      	mov	r0, r3
 8003914:	4621      	mov	r1, r4
 8003916:	a330      	add	r3, pc, #192	; (adr r3, 80039d8 <lowlayer_scanFlow+0x208>)
 8003918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800391c:	f7fc fe7c 	bl	8000618 <__aeabi_dmul>
 8003920:	4603      	mov	r3, r0
 8003922:	460c      	mov	r4, r1
 8003924:	4618      	mov	r0, r3
 8003926:	4621      	mov	r1, r4
 8003928:	f04f 0200 	mov.w	r2, #0
 800392c:	4b40      	ldr	r3, [pc, #256]	; (8003a30 <lowlayer_scanFlow+0x260>)
 800392e:	f7fc ff9d 	bl	800086c <__aeabi_ddiv>
 8003932:	4603      	mov	r3, r0
 8003934:	460c      	mov	r4, r1
 8003936:	461a      	mov	r2, r3
 8003938:	4623      	mov	r3, r4
 800393a:	a12d      	add	r1, pc, #180	; (adr r1, 80039f0 <lowlayer_scanFlow+0x220>)
 800393c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003940:	f7fc fcb2 	bl	80002a8 <__aeabi_dsub>
 8003944:	4603      	mov	r3, r0
 8003946:	460c      	mov	r4, r1
		offset_setpoint[1]	= HARD_LIM1_POS
 8003948:	4a38      	ldr	r2, [pc, #224]	; (8003a2c <lowlayer_scanFlow+0x25c>)
 800394a:	e9c2 3402 	strd	r3, r4, [r2, #8]
		offset_setpoint[2]	= HARD_LIM2_NEG
				- DIR_ENCODER_2*offset_encoder[2]/ENCODER_J2;
 800394e:	4b34      	ldr	r3, [pc, #208]	; (8003a20 <lowlayer_scanFlow+0x250>)
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	ee07 3a90 	vmov	s15, r3
 8003956:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800395a:	eddf 6a36 	vldr	s13, [pc, #216]	; 8003a34 <lowlayer_scanFlow+0x264>
 800395e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003962:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8003a38 <lowlayer_scanFlow+0x268>
 8003966:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800396a:	ee17 0a90 	vmov	r0, s15
 800396e:	f7fc fdfb 	bl	8000568 <__aeabi_f2d>
 8003972:	4603      	mov	r3, r0
 8003974:	460c      	mov	r4, r1
		offset_setpoint[2]	= HARD_LIM2_NEG
 8003976:	4a2d      	ldr	r2, [pc, #180]	; (8003a2c <lowlayer_scanFlow+0x25c>)
 8003978:	e9c2 3404 	strd	r3, r4, [r2, #16]
		offset_setpoint[3]  = HARD_LIM3_POS
				- offset_stepper*2.0*PI/GEAR_J3;
 800397c:	4b2a      	ldr	r3, [pc, #168]	; (8003a28 <lowlayer_scanFlow+0x258>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4618      	mov	r0, r3
 8003982:	f7fc fddf 	bl	8000544 <__aeabi_i2d>
 8003986:	4602      	mov	r2, r0
 8003988:	460b      	mov	r3, r1
 800398a:	f7fc fc8f 	bl	80002ac <__adddf3>
 800398e:	4603      	mov	r3, r0
 8003990:	460c      	mov	r4, r1
 8003992:	4618      	mov	r0, r3
 8003994:	4621      	mov	r1, r4
 8003996:	a310      	add	r3, pc, #64	; (adr r3, 80039d8 <lowlayer_scanFlow+0x208>)
 8003998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800399c:	f7fc fe3c 	bl	8000618 <__aeabi_dmul>
 80039a0:	4603      	mov	r3, r0
 80039a2:	460c      	mov	r4, r1
 80039a4:	4618      	mov	r0, r3
 80039a6:	4621      	mov	r1, r4
 80039a8:	a313      	add	r3, pc, #76	; (adr r3, 80039f8 <lowlayer_scanFlow+0x228>)
 80039aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ae:	f7fc ff5d 	bl	800086c <__aeabi_ddiv>
 80039b2:	4603      	mov	r3, r0
 80039b4:	460c      	mov	r4, r1
 80039b6:	461a      	mov	r2, r3
 80039b8:	4623      	mov	r3, r4
 80039ba:	a111      	add	r1, pc, #68	; (adr r1, 8003a00 <lowlayer_scanFlow+0x230>)
 80039bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80039c0:	f7fc fc72 	bl	80002a8 <__aeabi_dsub>
 80039c4:	4603      	mov	r3, r0
 80039c6:	460c      	mov	r4, r1
		offset_setpoint[3]  = HARD_LIM3_POS
 80039c8:	4a18      	ldr	r2, [pc, #96]	; (8003a2c <lowlayer_scanFlow+0x25c>)
 80039ca:	e9c2 3406 	strd	r3, r4, [r2, #24]

		return TRUE;
 80039ce:	2301      	movs	r3, #1
	}
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd90      	pop	{r4, r7, pc}
 80039d8:	60000000 	.word	0x60000000
 80039dc:	400921fb 	.word	0x400921fb
 80039e0:	00000000 	.word	0x00000000
 80039e4:	40f38800 	.word	0x40f38800
 80039e8:	40000000 	.word	0x40000000
 80039ec:	bff9f17a 	.word	0xbff9f17a
 80039f0:	80000000 	.word	0x80000000
 80039f4:	40039716 	.word	0x40039716
 80039f8:	a0000000 	.word	0xa0000000
 80039fc:	40e3bca1 	.word	0x40e3bca1
 8003a00:	40000000 	.word	0x40000000
 8003a04:	40085941 	.word	0x40085941
 8003a08:	20005368 	.word	0x20005368
 8003a0c:	20005358 	.word	0x20005358
 8003a10:	08019e54 	.word	0x08019e54
 8003a14:	40020c00 	.word	0x40020c00
 8003a18:	20005348 	.word	0x20005348
 8003a1c:	2000535c 	.word	0x2000535c
 8003a20:	20005390 	.word	0x20005390
 8003a24:	20005338 	.word	0x20005338
 8003a28:	2000536c 	.word	0x2000536c
 8003a2c:	20005370 	.word	0x20005370
 8003a30:	40ff4000 	.word	0x40ff4000
 8003a34:	4426aaab 	.word	0x4426aaab
 8003a38:	400f1aa0 	.word	0x400f1aa0
 8003a3c:	00000000 	.word	0x00000000

08003a40 <lowlayer_goToSoftLimit>:

uint8_t	lowlayer_goToSoftLimit(SCARA_PositionTypeDef *setpoint) {
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
	int8_t pulse[4] = {0, 0, 0 ,0};
 8003a48:	2300      	movs	r3, #0
 8003a4a:	60bb      	str	r3, [r7, #8]
	uint8_t check = 0;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	73fb      	strb	r3, [r7, #15]
	lowlayer_readSetPosition(setpoint);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f000 f94d 	bl	8003cf0 <lowlayer_readSetPosition>
	if (setpoint->Theta1 < LIM_MIN_J0) {
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8003a5c:	a330      	add	r3, pc, #192	; (adr r3, 8003b20 <lowlayer_goToSoftLimit+0xe0>)
 8003a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a62:	f7fd f84b 	bl	8000afc <__aeabi_dcmplt>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d004      	beq.n	8003a76 <lowlayer_goToSoftLimit+0x36>
		pulse[0] = pulse_scan[0];
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	723b      	strb	r3, [r7, #8]
		check++;
 8003a70:	7bfb      	ldrb	r3, [r7, #15]
 8003a72:	3301      	adds	r3, #1
 8003a74:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->Theta2 > LIM_MAX_J1) {
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8003a7c:	a32a      	add	r3, pc, #168	; (adr r3, 8003b28 <lowlayer_goToSoftLimit+0xe8>)
 8003a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a82:	f7fd f859 	bl	8000b38 <__aeabi_dcmpgt>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d004      	beq.n	8003a96 <lowlayer_goToSoftLimit+0x56>
		pulse[1] = pulse_scan[1];
 8003a8c:	2305      	movs	r3, #5
 8003a8e:	727b      	strb	r3, [r7, #9]
		check++;
 8003a90:	7bfb      	ldrb	r3, [r7, #15]
 8003a92:	3301      	adds	r3, #1
 8003a94:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->D3 < LIM_MIN_J2) {
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8003a9c:	f04f 0200 	mov.w	r2, #0
 8003aa0:	f04f 0300 	mov.w	r3, #0
 8003aa4:	f7fd f82a 	bl	8000afc <__aeabi_dcmplt>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d004      	beq.n	8003ab8 <lowlayer_goToSoftLimit+0x78>
		pulse[2] = pulse_scan[2];
 8003aae:	2305      	movs	r3, #5
 8003ab0:	72bb      	strb	r3, [r7, #10]
		check++;
 8003ab2:	7bfb      	ldrb	r3, [r7, #15]
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->Theta4 > LIM_MAX_J3) {
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8003abe:	a31c      	add	r3, pc, #112	; (adr r3, 8003b30 <lowlayer_goToSoftLimit+0xf0>)
 8003ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac4:	f7fd f838 	bl	8000b38 <__aeabi_dcmpgt>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d004      	beq.n	8003ad8 <lowlayer_goToSoftLimit+0x98>
		pulse[3] = pulse_scan[3];
 8003ace:	2314      	movs	r3, #20
 8003ad0:	72fb      	strb	r3, [r7, #11]
		check++;
 8003ad2:	7bfb      	ldrb	r3, [r7, #15]
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	73fb      	strb	r3, [r7, #15]
	}

	if (check > 0) {
 8003ad8:	7bfb      	ldrb	r3, [r7, #15]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d013      	beq.n	8003b06 <lowlayer_goToSoftLimit+0xc6>
		lowlayer_writePulse(pulse[0], -pulse[1], pulse[2], -pulse[3]);
 8003ade:	f997 0008 	ldrsb.w	r0, [r7, #8]
 8003ae2:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	425b      	negs	r3, r3
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	b259      	sxtb	r1, r3
 8003aee:	f997 200a 	ldrsb.w	r2, [r7, #10]
 8003af2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	425b      	negs	r3, r3
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	b25b      	sxtb	r3, r3
 8003afe:	f000 fb4f 	bl	80041a0 <lowlayer_writePulse>
		return FALSE;
 8003b02:	2300      	movs	r3, #0
 8003b04:	e006      	b.n	8003b14 <lowlayer_goToSoftLimit+0xd4>
	} else {
		lowlayer_writePulse(0, 0, 0, 0);
 8003b06:	2300      	movs	r3, #0
 8003b08:	2200      	movs	r2, #0
 8003b0a:	2100      	movs	r1, #0
 8003b0c:	2000      	movs	r0, #0
 8003b0e:	f000 fb47 	bl	80041a0 <lowlayer_writePulse>
		return TRUE;
 8003b12:	2301      	movs	r3, #1
	}
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3710      	adds	r7, #16
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	f3af 8000 	nop.w
 8003b20:	daaaaaab 	.word	0xdaaaaaab
 8003b24:	bff7bc89 	.word	0xbff7bc89
 8003b28:	88000000 	.word	0x88000000
 8003b2c:	4002d97c 	.word	0x4002d97c
 8003b30:	daaaaaab 	.word	0xdaaaaaab
 8003b34:	4007bc89 	.word	0x4007bc89

08003b38 <lowlayer_readTruePosition>:

void	lowlayer_readTruePosition(SCARA_PositionTypeDef *true) {
 8003b38:	b590      	push	{r4, r7, lr}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
	lowlayer_updateEncoder();
 8003b40:	f000 fc78 	bl	8004434 <lowlayer_updateEncoder>
	true->Theta1 = HARD_LIM0_NEG
			+ DIR_ENCODER_0*(position_encoder[0] - offset_encoder[0])*2.0*PI/ENCODER_J0; // Servo Motor
 8003b44:	4b62      	ldr	r3, [pc, #392]	; (8003cd0 <lowlayer_readTruePosition+0x198>)
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	4b62      	ldr	r3, [pc, #392]	; (8003cd4 <lowlayer_readTruePosition+0x19c>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	ee07 3a90 	vmov	s15, r3
 8003b52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b56:	ee17 0a90 	vmov	r0, s15
 8003b5a:	f7fc fd05 	bl	8000568 <__aeabi_f2d>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	460b      	mov	r3, r1
 8003b62:	f7fc fba3 	bl	80002ac <__adddf3>
 8003b66:	4603      	mov	r3, r0
 8003b68:	460c      	mov	r4, r1
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	4621      	mov	r1, r4
 8003b6e:	a34c      	add	r3, pc, #304	; (adr r3, 8003ca0 <lowlayer_readTruePosition+0x168>)
 8003b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b74:	f7fc fd50 	bl	8000618 <__aeabi_dmul>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	460c      	mov	r4, r1
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	4621      	mov	r1, r4
 8003b80:	a349      	add	r3, pc, #292	; (adr r3, 8003ca8 <lowlayer_readTruePosition+0x170>)
 8003b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b86:	f7fc fe71 	bl	800086c <__aeabi_ddiv>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	460c      	mov	r4, r1
 8003b8e:	4618      	mov	r0, r3
 8003b90:	4621      	mov	r1, r4
 8003b92:	a347      	add	r3, pc, #284	; (adr r3, 8003cb0 <lowlayer_readTruePosition+0x178>)
 8003b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b98:	f7fc fb86 	bl	80002a8 <__aeabi_dsub>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	460c      	mov	r4, r1
	true->Theta1 = HARD_LIM0_NEG
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48

	true->Theta2 = HARD_LIM1_POS
			+ DIR_ENCODER_1*(position_encoder[1] - offset_encoder[1])*2.0*PI/ENCODER_J1; // Servo Motor
 8003ba6:	4b4a      	ldr	r3, [pc, #296]	; (8003cd0 <lowlayer_readTruePosition+0x198>)
 8003ba8:	685a      	ldr	r2, [r3, #4]
 8003baa:	4b4a      	ldr	r3, [pc, #296]	; (8003cd4 <lowlayer_readTruePosition+0x19c>)
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	ee07 3a90 	vmov	s15, r3
 8003bb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bb8:	ee17 0a90 	vmov	r0, s15
 8003bbc:	f7fc fcd4 	bl	8000568 <__aeabi_f2d>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	460b      	mov	r3, r1
 8003bc4:	f7fc fb72 	bl	80002ac <__adddf3>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	460c      	mov	r4, r1
 8003bcc:	4618      	mov	r0, r3
 8003bce:	4621      	mov	r1, r4
 8003bd0:	a333      	add	r3, pc, #204	; (adr r3, 8003ca0 <lowlayer_readTruePosition+0x168>)
 8003bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd6:	f7fc fd1f 	bl	8000618 <__aeabi_dmul>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	460c      	mov	r4, r1
 8003bde:	4618      	mov	r0, r3
 8003be0:	4621      	mov	r1, r4
 8003be2:	f04f 0200 	mov.w	r2, #0
 8003be6:	4b3c      	ldr	r3, [pc, #240]	; (8003cd8 <lowlayer_readTruePosition+0x1a0>)
 8003be8:	f7fc fe40 	bl	800086c <__aeabi_ddiv>
 8003bec:	4603      	mov	r3, r0
 8003bee:	460c      	mov	r4, r1
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	4621      	mov	r1, r4
 8003bf4:	a330      	add	r3, pc, #192	; (adr r3, 8003cb8 <lowlayer_readTruePosition+0x180>)
 8003bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bfa:	f7fc fb57 	bl	80002ac <__adddf3>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	460c      	mov	r4, r1
	true->Theta2 = HARD_LIM1_POS
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50

	true->D3	 = HARD_LIM2_NEG
			+ DIR_ENCODER_2*(position_encoder[2] - offset_encoder[2])/ENCODER_J2; // Servo Motor
 8003c08:	4b31      	ldr	r3, [pc, #196]	; (8003cd0 <lowlayer_readTruePosition+0x198>)
 8003c0a:	689a      	ldr	r2, [r3, #8]
 8003c0c:	4b31      	ldr	r3, [pc, #196]	; (8003cd4 <lowlayer_readTruePosition+0x19c>)
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	ee07 3a90 	vmov	s15, r3
 8003c16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c1a:	eeb1 7a67 	vneg.f32	s14, s15
 8003c1e:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8003cdc <lowlayer_readTruePosition+0x1a4>
 8003c22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003c26:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8003ce0 <lowlayer_readTruePosition+0x1a8>
 8003c2a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003c2e:	ee17 0a90 	vmov	r0, s15
 8003c32:	f7fc fc99 	bl	8000568 <__aeabi_f2d>
 8003c36:	4603      	mov	r3, r0
 8003c38:	460c      	mov	r4, r1
	true->D3	 = HARD_LIM2_NEG
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58

	true->Theta4 = HARD_LIM3_POS
			+ (pulse_accumulate[3] - offset_stepper)*2.0*PI/GEAR_J3; // Stepper Motor
 8003c40:	4b28      	ldr	r3, [pc, #160]	; (8003ce4 <lowlayer_readTruePosition+0x1ac>)
 8003c42:	68da      	ldr	r2, [r3, #12]
 8003c44:	4b28      	ldr	r3, [pc, #160]	; (8003ce8 <lowlayer_readTruePosition+0x1b0>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f7fc fc7a 	bl	8000544 <__aeabi_i2d>
 8003c50:	4602      	mov	r2, r0
 8003c52:	460b      	mov	r3, r1
 8003c54:	f7fc fb2a 	bl	80002ac <__adddf3>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	460c      	mov	r4, r1
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	4621      	mov	r1, r4
 8003c60:	a30f      	add	r3, pc, #60	; (adr r3, 8003ca0 <lowlayer_readTruePosition+0x168>)
 8003c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c66:	f7fc fcd7 	bl	8000618 <__aeabi_dmul>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	460c      	mov	r4, r1
 8003c6e:	4618      	mov	r0, r3
 8003c70:	4621      	mov	r1, r4
 8003c72:	a313      	add	r3, pc, #76	; (adr r3, 8003cc0 <lowlayer_readTruePosition+0x188>)
 8003c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c78:	f7fc fdf8 	bl	800086c <__aeabi_ddiv>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	460c      	mov	r4, r1
 8003c80:	4618      	mov	r0, r3
 8003c82:	4621      	mov	r1, r4
 8003c84:	a310      	add	r3, pc, #64	; (adr r3, 8003cc8 <lowlayer_readTruePosition+0x190>)
 8003c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c8a:	f7fc fb0f 	bl	80002ac <__adddf3>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	460c      	mov	r4, r1
	true->Theta4 = HARD_LIM3_POS
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
}
 8003c98:	bf00      	nop
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd90      	pop	{r4, r7, pc}
 8003ca0:	60000000 	.word	0x60000000
 8003ca4:	400921fb 	.word	0x400921fb
 8003ca8:	00000000 	.word	0x00000000
 8003cac:	40f38800 	.word	0x40f38800
 8003cb0:	40000000 	.word	0x40000000
 8003cb4:	3ff9f17a 	.word	0x3ff9f17a
 8003cb8:	80000000 	.word	0x80000000
 8003cbc:	40039716 	.word	0x40039716
 8003cc0:	a0000000 	.word	0xa0000000
 8003cc4:	40e3bca1 	.word	0x40e3bca1
 8003cc8:	40000000 	.word	0x40000000
 8003ccc:	40085941 	.word	0x40085941
 8003cd0:	2000534c 	.word	0x2000534c
 8003cd4:	20005390 	.word	0x20005390
 8003cd8:	40ff4000 	.word	0x40ff4000
 8003cdc:	4426aaab 	.word	0x4426aaab
 8003ce0:	400f1aa0 	.word	0x400f1aa0
 8003ce4:	20005338 	.word	0x20005338
 8003ce8:	2000536c 	.word	0x2000536c
 8003cec:	00000000 	.word	0x00000000

08003cf0 <lowlayer_readSetPosition>:

void	lowlayer_readSetPosition(SCARA_PositionTypeDef *setpoint) {
 8003cf0:	b5b0      	push	{r4, r5, r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
	setpoint->Theta1 = offset_setpoint[0] + pulse_accumulate[0]*2.0*PI/GEAR_J0;
 8003cf8:	4b53      	ldr	r3, [pc, #332]	; (8003e48 <lowlayer_readSetPosition+0x158>)
 8003cfa:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003cfe:	4b53      	ldr	r3, [pc, #332]	; (8003e4c <lowlayer_readSetPosition+0x15c>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7fc fc1e 	bl	8000544 <__aeabi_i2d>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	460b      	mov	r3, r1
 8003d0c:	f7fc face 	bl	80002ac <__adddf3>
 8003d10:	4602      	mov	r2, r0
 8003d12:	460b      	mov	r3, r1
 8003d14:	4610      	mov	r0, r2
 8003d16:	4619      	mov	r1, r3
 8003d18:	a345      	add	r3, pc, #276	; (adr r3, 8003e30 <lowlayer_readSetPosition+0x140>)
 8003d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d1e:	f7fc fc7b 	bl	8000618 <__aeabi_dmul>
 8003d22:	4602      	mov	r2, r0
 8003d24:	460b      	mov	r3, r1
 8003d26:	4610      	mov	r0, r2
 8003d28:	4619      	mov	r1, r3
 8003d2a:	a343      	add	r3, pc, #268	; (adr r3, 8003e38 <lowlayer_readSetPosition+0x148>)
 8003d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d30:	f7fc fd9c 	bl	800086c <__aeabi_ddiv>
 8003d34:	4602      	mov	r2, r0
 8003d36:	460b      	mov	r3, r1
 8003d38:	4620      	mov	r0, r4
 8003d3a:	4629      	mov	r1, r5
 8003d3c:	f7fc fab6 	bl	80002ac <__adddf3>
 8003d40:	4603      	mov	r3, r0
 8003d42:	460c      	mov	r4, r1
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48

	setpoint->Theta2 = offset_setpoint[1] + pulse_accumulate[1]*2.0*PI/GEAR_J1;
 8003d4a:	4b3f      	ldr	r3, [pc, #252]	; (8003e48 <lowlayer_readSetPosition+0x158>)
 8003d4c:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8003d50:	4b3e      	ldr	r3, [pc, #248]	; (8003e4c <lowlayer_readSetPosition+0x15c>)
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	4618      	mov	r0, r3
 8003d56:	f7fc fbf5 	bl	8000544 <__aeabi_i2d>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	f7fc faa5 	bl	80002ac <__adddf3>
 8003d62:	4602      	mov	r2, r0
 8003d64:	460b      	mov	r3, r1
 8003d66:	4610      	mov	r0, r2
 8003d68:	4619      	mov	r1, r3
 8003d6a:	a331      	add	r3, pc, #196	; (adr r3, 8003e30 <lowlayer_readSetPosition+0x140>)
 8003d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d70:	f7fc fc52 	bl	8000618 <__aeabi_dmul>
 8003d74:	4602      	mov	r2, r0
 8003d76:	460b      	mov	r3, r1
 8003d78:	4610      	mov	r0, r2
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	f04f 0200 	mov.w	r2, #0
 8003d80:	4b33      	ldr	r3, [pc, #204]	; (8003e50 <lowlayer_readSetPosition+0x160>)
 8003d82:	f7fc fd73 	bl	800086c <__aeabi_ddiv>
 8003d86:	4602      	mov	r2, r0
 8003d88:	460b      	mov	r3, r1
 8003d8a:	4620      	mov	r0, r4
 8003d8c:	4629      	mov	r1, r5
 8003d8e:	f7fc fa8d 	bl	80002ac <__adddf3>
 8003d92:	4603      	mov	r3, r0
 8003d94:	460c      	mov	r4, r1
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50

	setpoint->D3	 = offset_setpoint[2] + pulse_accumulate[2]/GEAR_J2;
 8003d9c:	4b2a      	ldr	r3, [pc, #168]	; (8003e48 <lowlayer_readSetPosition+0x158>)
 8003d9e:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8003da2:	4b2a      	ldr	r3, [pc, #168]	; (8003e4c <lowlayer_readSetPosition+0x15c>)
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	ee07 3a90 	vmov	s15, r3
 8003daa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003dae:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8003e54 <lowlayer_readSetPosition+0x164>
 8003db2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003db6:	ee16 0a90 	vmov	r0, s13
 8003dba:	f7fc fbd5 	bl	8000568 <__aeabi_f2d>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	460b      	mov	r3, r1
 8003dc2:	4620      	mov	r0, r4
 8003dc4:	4629      	mov	r1, r5
 8003dc6:	f7fc fa71 	bl	80002ac <__adddf3>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	460c      	mov	r4, r1
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58

	setpoint->Theta4 = offset_setpoint[3] + pulse_accumulate[3]*2.0*PI/GEAR_J3;
 8003dd4:	4b1c      	ldr	r3, [pc, #112]	; (8003e48 <lowlayer_readSetPosition+0x158>)
 8003dd6:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8003dda:	4b1c      	ldr	r3, [pc, #112]	; (8003e4c <lowlayer_readSetPosition+0x15c>)
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	4618      	mov	r0, r3
 8003de0:	f7fc fbb0 	bl	8000544 <__aeabi_i2d>
 8003de4:	4602      	mov	r2, r0
 8003de6:	460b      	mov	r3, r1
 8003de8:	f7fc fa60 	bl	80002ac <__adddf3>
 8003dec:	4602      	mov	r2, r0
 8003dee:	460b      	mov	r3, r1
 8003df0:	4610      	mov	r0, r2
 8003df2:	4619      	mov	r1, r3
 8003df4:	a30e      	add	r3, pc, #56	; (adr r3, 8003e30 <lowlayer_readSetPosition+0x140>)
 8003df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dfa:	f7fc fc0d 	bl	8000618 <__aeabi_dmul>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	460b      	mov	r3, r1
 8003e02:	4610      	mov	r0, r2
 8003e04:	4619      	mov	r1, r3
 8003e06:	a30e      	add	r3, pc, #56	; (adr r3, 8003e40 <lowlayer_readSetPosition+0x150>)
 8003e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e0c:	f7fc fd2e 	bl	800086c <__aeabi_ddiv>
 8003e10:	4602      	mov	r2, r0
 8003e12:	460b      	mov	r3, r1
 8003e14:	4620      	mov	r0, r4
 8003e16:	4629      	mov	r1, r5
 8003e18:	f7fc fa48 	bl	80002ac <__adddf3>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	460c      	mov	r4, r1
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
}
 8003e26:	bf00      	nop
 8003e28:	3708      	adds	r7, #8
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bdb0      	pop	{r4, r5, r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	60000000 	.word	0x60000000
 8003e34:	400921fb 	.word	0x400921fb
 8003e38:	00000000 	.word	0x00000000
 8003e3c:	40d38800 	.word	0x40d38800
 8003e40:	a0000000 	.word	0xa0000000
 8003e44:	40e3bca1 	.word	0x40e3bca1
 8003e48:	20005370 	.word	0x20005370
 8003e4c:	20005338 	.word	0x20005338
 8003e50:	40df4000 	.word	0x40df4000
 8003e54:	42c80000 	.word	0x42c80000

08003e58 <lowlayer_computeAndWritePulse>:

uint8_t	lowlayer_computeAndWritePulse(SCARA_PositionTypeDef current, SCARA_PositionTypeDef next) {
 8003e58:	b084      	sub	sp, #16
 8003e5a:	b590      	push	{r4, r7, lr}
 8003e5c:	b093      	sub	sp, #76	; 0x4c
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8003e64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint32_t	current_var0, current_var1, current_var2, current_var3;
	uint32_t	next_var0, next_var1, next_var2, next_var3;
	int64_t		delta_var0, delta_var1, delta_var2, delta_var3;
	uint8_t 	result;

	current_var0	= round((current.Theta1 - LIM_MIN_J0) * GEAR_J0/(2*PI));
 8003e68:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8003e6c:	a3c4      	add	r3, pc, #784	; (adr r3, 8004180 <lowlayer_computeAndWritePulse+0x328>)
 8003e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e72:	f7fc fa1b 	bl	80002ac <__adddf3>
 8003e76:	4603      	mov	r3, r0
 8003e78:	460c      	mov	r4, r1
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	4621      	mov	r1, r4
 8003e7e:	a3c2      	add	r3, pc, #776	; (adr r3, 8004188 <lowlayer_computeAndWritePulse+0x330>)
 8003e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e84:	f7fc fbc8 	bl	8000618 <__aeabi_dmul>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	460c      	mov	r4, r1
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	4621      	mov	r1, r4
 8003e90:	a3b5      	add	r3, pc, #724	; (adr r3, 8004168 <lowlayer_computeAndWritePulse+0x310>)
 8003e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e96:	f7fc fce9 	bl	800086c <__aeabi_ddiv>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	460c      	mov	r4, r1
 8003e9e:	ec44 3b17 	vmov	d7, r3, r4
 8003ea2:	eeb0 0a47 	vmov.f32	s0, s14
 8003ea6:	eef0 0a67 	vmov.f32	s1, s15
 8003eaa:	f014 f94d 	bl	8018148 <round>
 8003eae:	ec54 3b10 	vmov	r3, r4, d0
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	4621      	mov	r1, r4
 8003eb6:	f7fc fe87 	bl	8000bc8 <__aeabi_d2uiz>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	647b      	str	r3, [r7, #68]	; 0x44
	current_var1 	= round((current.Theta2 - LIM_MIN_J1) * GEAR_J1/(2*PI));
 8003ebe:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8003ec2:	a3b3      	add	r3, pc, #716	; (adr r3, 8004190 <lowlayer_computeAndWritePulse+0x338>)
 8003ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec8:	f7fc f9f0 	bl	80002ac <__adddf3>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	460c      	mov	r4, r1
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	4621      	mov	r1, r4
 8003ed4:	f04f 0200 	mov.w	r2, #0
 8003ed8:	4baf      	ldr	r3, [pc, #700]	; (8004198 <lowlayer_computeAndWritePulse+0x340>)
 8003eda:	f7fc fb9d 	bl	8000618 <__aeabi_dmul>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	460c      	mov	r4, r1
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	4621      	mov	r1, r4
 8003ee6:	a3a0      	add	r3, pc, #640	; (adr r3, 8004168 <lowlayer_computeAndWritePulse+0x310>)
 8003ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eec:	f7fc fcbe 	bl	800086c <__aeabi_ddiv>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	460c      	mov	r4, r1
 8003ef4:	ec44 3b17 	vmov	d7, r3, r4
 8003ef8:	eeb0 0a47 	vmov.f32	s0, s14
 8003efc:	eef0 0a67 	vmov.f32	s1, s15
 8003f00:	f014 f922 	bl	8018148 <round>
 8003f04:	ec54 3b10 	vmov	r3, r4, d0
 8003f08:	4618      	mov	r0, r3
 8003f0a:	4621      	mov	r1, r4
 8003f0c:	f7fc fe5c 	bl	8000bc8 <__aeabi_d2uiz>
 8003f10:	4603      	mov	r3, r0
 8003f12:	643b      	str	r3, [r7, #64]	; 0x40
	current_var2 	= round((current.D3 - LIM_MIN_J2) * GEAR_J2);
 8003f14:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003f18:	f04f 0200 	mov.w	r2, #0
 8003f1c:	4b9f      	ldr	r3, [pc, #636]	; (800419c <lowlayer_computeAndWritePulse+0x344>)
 8003f1e:	f7fc fb7b 	bl	8000618 <__aeabi_dmul>
 8003f22:	4603      	mov	r3, r0
 8003f24:	460c      	mov	r4, r1
 8003f26:	ec44 3b17 	vmov	d7, r3, r4
 8003f2a:	eeb0 0a47 	vmov.f32	s0, s14
 8003f2e:	eef0 0a67 	vmov.f32	s1, s15
 8003f32:	f014 f909 	bl	8018148 <round>
 8003f36:	ec54 3b10 	vmov	r3, r4, d0
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	4621      	mov	r1, r4
 8003f3e:	f7fc fe43 	bl	8000bc8 <__aeabi_d2uiz>
 8003f42:	4603      	mov	r3, r0
 8003f44:	63fb      	str	r3, [r7, #60]	; 0x3c
	current_var3 	= round((current.Theta4 - LIM_MIN_J3) * GEAR_J3/(2*PI));
 8003f46:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8003f4a:	a389      	add	r3, pc, #548	; (adr r3, 8004170 <lowlayer_computeAndWritePulse+0x318>)
 8003f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f50:	f7fc f9ac 	bl	80002ac <__adddf3>
 8003f54:	4603      	mov	r3, r0
 8003f56:	460c      	mov	r4, r1
 8003f58:	4618      	mov	r0, r3
 8003f5a:	4621      	mov	r1, r4
 8003f5c:	a386      	add	r3, pc, #536	; (adr r3, 8004178 <lowlayer_computeAndWritePulse+0x320>)
 8003f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f62:	f7fc fb59 	bl	8000618 <__aeabi_dmul>
 8003f66:	4603      	mov	r3, r0
 8003f68:	460c      	mov	r4, r1
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	4621      	mov	r1, r4
 8003f6e:	a37e      	add	r3, pc, #504	; (adr r3, 8004168 <lowlayer_computeAndWritePulse+0x310>)
 8003f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f74:	f7fc fc7a 	bl	800086c <__aeabi_ddiv>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	460c      	mov	r4, r1
 8003f7c:	ec44 3b17 	vmov	d7, r3, r4
 8003f80:	eeb0 0a47 	vmov.f32	s0, s14
 8003f84:	eef0 0a67 	vmov.f32	s1, s15
 8003f88:	f014 f8de 	bl	8018148 <round>
 8003f8c:	ec54 3b10 	vmov	r3, r4, d0
 8003f90:	4618      	mov	r0, r3
 8003f92:	4621      	mov	r1, r4
 8003f94:	f7fc fe18 	bl	8000bc8 <__aeabi_d2uiz>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	63bb      	str	r3, [r7, #56]	; 0x38
	next_var0 		= round((next.Theta1 - LIM_MIN_J0) * GEAR_J0/(2*PI));
 8003f9c:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 8003fa0:	a377      	add	r3, pc, #476	; (adr r3, 8004180 <lowlayer_computeAndWritePulse+0x328>)
 8003fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa6:	f7fc f981 	bl	80002ac <__adddf3>
 8003faa:	4603      	mov	r3, r0
 8003fac:	460c      	mov	r4, r1
 8003fae:	4618      	mov	r0, r3
 8003fb0:	4621      	mov	r1, r4
 8003fb2:	a375      	add	r3, pc, #468	; (adr r3, 8004188 <lowlayer_computeAndWritePulse+0x330>)
 8003fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb8:	f7fc fb2e 	bl	8000618 <__aeabi_dmul>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	460c      	mov	r4, r1
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	4621      	mov	r1, r4
 8003fc4:	a368      	add	r3, pc, #416	; (adr r3, 8004168 <lowlayer_computeAndWritePulse+0x310>)
 8003fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fca:	f7fc fc4f 	bl	800086c <__aeabi_ddiv>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	460c      	mov	r4, r1
 8003fd2:	ec44 3b17 	vmov	d7, r3, r4
 8003fd6:	eeb0 0a47 	vmov.f32	s0, s14
 8003fda:	eef0 0a67 	vmov.f32	s1, s15
 8003fde:	f014 f8b3 	bl	8018148 <round>
 8003fe2:	ec54 3b10 	vmov	r3, r4, d0
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	4621      	mov	r1, r4
 8003fea:	f7fc fded 	bl	8000bc8 <__aeabi_d2uiz>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	637b      	str	r3, [r7, #52]	; 0x34
	next_var1 		= round((next.Theta2 - LIM_MIN_J1) * GEAR_J1/(2*PI));
 8003ff2:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8003ff6:	a366      	add	r3, pc, #408	; (adr r3, 8004190 <lowlayer_computeAndWritePulse+0x338>)
 8003ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ffc:	f7fc f956 	bl	80002ac <__adddf3>
 8004000:	4603      	mov	r3, r0
 8004002:	460c      	mov	r4, r1
 8004004:	4618      	mov	r0, r3
 8004006:	4621      	mov	r1, r4
 8004008:	f04f 0200 	mov.w	r2, #0
 800400c:	4b62      	ldr	r3, [pc, #392]	; (8004198 <lowlayer_computeAndWritePulse+0x340>)
 800400e:	f7fc fb03 	bl	8000618 <__aeabi_dmul>
 8004012:	4603      	mov	r3, r0
 8004014:	460c      	mov	r4, r1
 8004016:	4618      	mov	r0, r3
 8004018:	4621      	mov	r1, r4
 800401a:	a353      	add	r3, pc, #332	; (adr r3, 8004168 <lowlayer_computeAndWritePulse+0x310>)
 800401c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004020:	f7fc fc24 	bl	800086c <__aeabi_ddiv>
 8004024:	4603      	mov	r3, r0
 8004026:	460c      	mov	r4, r1
 8004028:	ec44 3b17 	vmov	d7, r3, r4
 800402c:	eeb0 0a47 	vmov.f32	s0, s14
 8004030:	eef0 0a67 	vmov.f32	s1, s15
 8004034:	f014 f888 	bl	8018148 <round>
 8004038:	ec54 3b10 	vmov	r3, r4, d0
 800403c:	4618      	mov	r0, r3
 800403e:	4621      	mov	r1, r4
 8004040:	f7fc fdc2 	bl	8000bc8 <__aeabi_d2uiz>
 8004044:	4603      	mov	r3, r0
 8004046:	633b      	str	r3, [r7, #48]	; 0x30
	next_var2 		= round((next.D3 - LIM_MIN_J2) * GEAR_J2);
 8004048:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800404c:	f04f 0200 	mov.w	r2, #0
 8004050:	4b52      	ldr	r3, [pc, #328]	; (800419c <lowlayer_computeAndWritePulse+0x344>)
 8004052:	f7fc fae1 	bl	8000618 <__aeabi_dmul>
 8004056:	4603      	mov	r3, r0
 8004058:	460c      	mov	r4, r1
 800405a:	ec44 3b17 	vmov	d7, r3, r4
 800405e:	eeb0 0a47 	vmov.f32	s0, s14
 8004062:	eef0 0a67 	vmov.f32	s1, s15
 8004066:	f014 f86f 	bl	8018148 <round>
 800406a:	ec54 3b10 	vmov	r3, r4, d0
 800406e:	4618      	mov	r0, r3
 8004070:	4621      	mov	r1, r4
 8004072:	f7fc fda9 	bl	8000bc8 <__aeabi_d2uiz>
 8004076:	4603      	mov	r3, r0
 8004078:	62fb      	str	r3, [r7, #44]	; 0x2c
	next_var3 		= round((next.Theta4 - LIM_MIN_J3) * GEAR_J3/(2*PI));
 800407a:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800407e:	a33c      	add	r3, pc, #240	; (adr r3, 8004170 <lowlayer_computeAndWritePulse+0x318>)
 8004080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004084:	f7fc f912 	bl	80002ac <__adddf3>
 8004088:	4603      	mov	r3, r0
 800408a:	460c      	mov	r4, r1
 800408c:	4618      	mov	r0, r3
 800408e:	4621      	mov	r1, r4
 8004090:	a339      	add	r3, pc, #228	; (adr r3, 8004178 <lowlayer_computeAndWritePulse+0x320>)
 8004092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004096:	f7fc fabf 	bl	8000618 <__aeabi_dmul>
 800409a:	4603      	mov	r3, r0
 800409c:	460c      	mov	r4, r1
 800409e:	4618      	mov	r0, r3
 80040a0:	4621      	mov	r1, r4
 80040a2:	a331      	add	r3, pc, #196	; (adr r3, 8004168 <lowlayer_computeAndWritePulse+0x310>)
 80040a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a8:	f7fc fbe0 	bl	800086c <__aeabi_ddiv>
 80040ac:	4603      	mov	r3, r0
 80040ae:	460c      	mov	r4, r1
 80040b0:	ec44 3b17 	vmov	d7, r3, r4
 80040b4:	eeb0 0a47 	vmov.f32	s0, s14
 80040b8:	eef0 0a67 	vmov.f32	s1, s15
 80040bc:	f014 f844 	bl	8018148 <round>
 80040c0:	ec54 3b10 	vmov	r3, r4, d0
 80040c4:	4618      	mov	r0, r3
 80040c6:	4621      	mov	r1, r4
 80040c8:	f7fc fd7e 	bl	8000bc8 <__aeabi_d2uiz>
 80040cc:	4603      	mov	r3, r0
 80040ce:	62bb      	str	r3, [r7, #40]	; 0x28

	delta_var0 = next_var0 - current_var0;
 80040d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	f04f 0400 	mov.w	r4, #0
 80040da:	e9c7 3408 	strd	r3, r4, [r7, #32]
	delta_var1 = next_var1 - current_var1;
 80040de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	f04f 0400 	mov.w	r4, #0
 80040e8:	e9c7 3406 	strd	r3, r4, [r7, #24]
	delta_var2 = next_var2 - current_var2;
 80040ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	f04f 0400 	mov.w	r4, #0
 80040f6:	e9c7 3404 	strd	r3, r4, [r7, #16]
	delta_var3 = next_var3 - current_var3;
 80040fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	f04f 0400 	mov.w	r4, #0
 8004104:	e9c7 3402 	strd	r3, r4, [r7, #8]

	if (abs(delta_var0) > 127
 8004108:	6a3b      	ldr	r3, [r7, #32]
 800410a:	2b00      	cmp	r3, #0
 800410c:	bfb8      	it	lt
 800410e:	425b      	neglt	r3, r3
 8004110:	2b7f      	cmp	r3, #127	; 0x7f
 8004112:	dc11      	bgt.n	8004138 <lowlayer_computeAndWritePulse+0x2e0>
		|| abs(delta_var1) > 127
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	2b00      	cmp	r3, #0
 8004118:	bfb8      	it	lt
 800411a:	425b      	neglt	r3, r3
 800411c:	2b7f      	cmp	r3, #127	; 0x7f
 800411e:	dc0b      	bgt.n	8004138 <lowlayer_computeAndWritePulse+0x2e0>
		|| abs(delta_var2) > 127
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	2b00      	cmp	r3, #0
 8004124:	bfb8      	it	lt
 8004126:	425b      	neglt	r3, r3
 8004128:	2b7f      	cmp	r3, #127	; 0x7f
 800412a:	dc05      	bgt.n	8004138 <lowlayer_computeAndWritePulse+0x2e0>
		|| abs(delta_var3) > 127) {
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	2b00      	cmp	r3, #0
 8004130:	bfb8      	it	lt
 8004132:	425b      	neglt	r3, r3
 8004134:	2b7f      	cmp	r3, #127	; 0x7f
 8004136:	dd01      	ble.n	800413c <lowlayer_computeAndWritePulse+0x2e4>
		return FALSE;
 8004138:	2300      	movs	r3, #0
 800413a:	e00c      	b.n	8004156 <lowlayer_computeAndWritePulse+0x2fe>
	} // Can't convert to int8_t , over range

	result = lowlayer_writePulse((int8_t)delta_var0,
 800413c:	f997 0020 	ldrsb.w	r0, [r7, #32]
 8004140:	f997 1018 	ldrsb.w	r1, [r7, #24]
 8004144:	f997 2010 	ldrsb.w	r2, [r7, #16]
 8004148:	f997 3008 	ldrsb.w	r3, [r7, #8]
 800414c:	f000 f828 	bl	80041a0 <lowlayer_writePulse>
 8004150:	4603      	mov	r3, r0
 8004152:	71fb      	strb	r3, [r7, #7]
								 (int8_t)delta_var1,
								 (int8_t)delta_var2,
								 (int8_t)delta_var3);

	return result;
 8004154:	79fb      	ldrb	r3, [r7, #7]
}
 8004156:	4618      	mov	r0, r3
 8004158:	374c      	adds	r7, #76	; 0x4c
 800415a:	46bd      	mov	sp, r7
 800415c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004160:	b004      	add	sp, #16
 8004162:	4770      	bx	lr
 8004164:	f3af 8000 	nop.w
 8004168:	60000000 	.word	0x60000000
 800416c:	401921fb 	.word	0x401921fb
 8004170:	daaaaaab 	.word	0xdaaaaaab
 8004174:	4007bc89 	.word	0x4007bc89
 8004178:	a0000000 	.word	0xa0000000
 800417c:	40e3bca1 	.word	0x40e3bca1
 8004180:	daaaaaab 	.word	0xdaaaaaab
 8004184:	3ff7bc89 	.word	0x3ff7bc89
 8004188:	00000000 	.word	0x00000000
 800418c:	40d38800 	.word	0x40d38800
 8004190:	88000000 	.word	0x88000000
 8004194:	4002d97c 	.word	0x4002d97c
 8004198:	40df4000 	.word	0x40df4000
 800419c:	40590000 	.word	0x40590000

080041a0 <lowlayer_writePulse>:


uint8_t	lowlayer_writePulse(int8_t pulse0, int8_t pulse1, int8_t pulse2, int8_t pulse3) {
 80041a0:	b590      	push	{r4, r7, lr}
 80041a2:	b087      	sub	sp, #28
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	4604      	mov	r4, r0
 80041a8:	4608      	mov	r0, r1
 80041aa:	4611      	mov	r1, r2
 80041ac:	461a      	mov	r2, r3
 80041ae:	4623      	mov	r3, r4
 80041b0:	71fb      	strb	r3, [r7, #7]
 80041b2:	4603      	mov	r3, r0
 80041b4:	71bb      	strb	r3, [r7, #6]
 80041b6:	460b      	mov	r3, r1
 80041b8:	717b      	strb	r3, [r7, #5]
 80041ba:	4613      	mov	r3, r2
 80041bc:	713b      	strb	r3, [r7, #4]
	uint8_t pulse0_combine, pulse1_combine, pulse2_combine, pulse3_combine;
	uint8_t pulse0_abs, pulse1_abs, pulse2_abs, pulse3_abs;

	// Var 0
	if (pulse0 < 0) {
 80041be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	da06      	bge.n	80041d4 <lowlayer_writePulse+0x34>
		pulse0_abs = -pulse0;
 80041c6:	79fb      	ldrb	r3, [r7, #7]
 80041c8:	425b      	negs	r3, r3
 80041ca:	74fb      	strb	r3, [r7, #19]
		pulse0_combine = -pulse0 | ((!DIR_J0) << 7); // Negative : Clockwise
 80041cc:	79fb      	ldrb	r3, [r7, #7]
 80041ce:	425b      	negs	r3, r3
 80041d0:	75fb      	strb	r3, [r7, #23]
 80041d2:	e006      	b.n	80041e2 <lowlayer_writePulse+0x42>
	} else {
		pulse0_abs = pulse0;
 80041d4:	79fb      	ldrb	r3, [r7, #7]
 80041d6:	74fb      	strb	r3, [r7, #19]
		pulse0_combine = pulse0 | (DIR_J0 << 7); // Positive : Anti-Clockwise
 80041d8:	79fb      	ldrb	r3, [r7, #7]
 80041da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80041de:	b25b      	sxtb	r3, r3
 80041e0:	75fb      	strb	r3, [r7, #23]
	}
	// Var 1
	if (pulse1 < 0) {
 80041e2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	da06      	bge.n	80041f8 <lowlayer_writePulse+0x58>
		pulse1_abs = -pulse1;
 80041ea:	79bb      	ldrb	r3, [r7, #6]
 80041ec:	425b      	negs	r3, r3
 80041ee:	74bb      	strb	r3, [r7, #18]
		pulse1_combine = -pulse1 | ((!DIR_J1) << 7);
 80041f0:	79bb      	ldrb	r3, [r7, #6]
 80041f2:	425b      	negs	r3, r3
 80041f4:	75bb      	strb	r3, [r7, #22]
 80041f6:	e006      	b.n	8004206 <lowlayer_writePulse+0x66>
	} else {
		pulse1_abs = pulse1;
 80041f8:	79bb      	ldrb	r3, [r7, #6]
 80041fa:	74bb      	strb	r3, [r7, #18]
		pulse1_combine = pulse1 | (DIR_J1 << 7);
 80041fc:	79bb      	ldrb	r3, [r7, #6]
 80041fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004202:	b25b      	sxtb	r3, r3
 8004204:	75bb      	strb	r3, [r7, #22]
	}
	// Var 2
	if (pulse2 < 0) {
 8004206:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800420a:	2b00      	cmp	r3, #0
 800420c:	da0b      	bge.n	8004226 <lowlayer_writePulse+0x86>
		pulse2_abs = -pulse2;
 800420e:	797b      	ldrb	r3, [r7, #5]
 8004210:	425b      	negs	r3, r3
 8004212:	747b      	strb	r3, [r7, #17]
		pulse2_combine = -pulse2 | ((!DIR_J2) << 7);
 8004214:	797b      	ldrb	r3, [r7, #5]
 8004216:	425b      	negs	r3, r3
 8004218:	b2db      	uxtb	r3, r3
 800421a:	b25b      	sxtb	r3, r3
 800421c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004220:	b25b      	sxtb	r3, r3
 8004222:	757b      	strb	r3, [r7, #21]
 8004224:	e003      	b.n	800422e <lowlayer_writePulse+0x8e>
	} else {
		pulse2_abs = pulse2;
 8004226:	797b      	ldrb	r3, [r7, #5]
 8004228:	747b      	strb	r3, [r7, #17]
		pulse2_combine = pulse2 | (DIR_J2 << 7);
 800422a:	797b      	ldrb	r3, [r7, #5]
 800422c:	757b      	strb	r3, [r7, #21]
	}
	// Var 3
	if (pulse3 < 0) {
 800422e:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8004232:	2b00      	cmp	r3, #0
 8004234:	da06      	bge.n	8004244 <lowlayer_writePulse+0xa4>
		pulse3_abs = -pulse3;
 8004236:	793b      	ldrb	r3, [r7, #4]
 8004238:	425b      	negs	r3, r3
 800423a:	743b      	strb	r3, [r7, #16]
		pulse3_combine = -pulse3 | ((!DIR_J3) << 7);
 800423c:	793b      	ldrb	r3, [r7, #4]
 800423e:	425b      	negs	r3, r3
 8004240:	753b      	strb	r3, [r7, #20]
 8004242:	e006      	b.n	8004252 <lowlayer_writePulse+0xb2>
	} else {
		pulse3_abs = pulse3;
 8004244:	793b      	ldrb	r3, [r7, #4]
 8004246:	743b      	strb	r3, [r7, #16]
		pulse3_combine = pulse3 | (DIR_J3 << 7);
 8004248:	793b      	ldrb	r3, [r7, #4]
 800424a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800424e:	b25b      	sxtb	r3, r3
 8004250:	753b      	strb	r3, [r7, #20]
	}

	// Check limit
	if (pulse0_abs > LIM_PULSE_J0
 8004252:	7cfb      	ldrb	r3, [r7, #19]
 8004254:	2b4b      	cmp	r3, #75	; 0x4b
 8004256:	d808      	bhi.n	800426a <lowlayer_writePulse+0xca>
		|| pulse1_abs > LIM_PULSE_J1
 8004258:	7cbb      	ldrb	r3, [r7, #18]
 800425a:	2b78      	cmp	r3, #120	; 0x78
 800425c:	d805      	bhi.n	800426a <lowlayer_writePulse+0xca>
		|| pulse2_abs > LIM_PULSE_J2
 800425e:	7c7b      	ldrb	r3, [r7, #17]
 8004260:	2b78      	cmp	r3, #120	; 0x78
 8004262:	d802      	bhi.n	800426a <lowlayer_writePulse+0xca>
		|| pulse3_abs > LIM_PULSE_J3) {
 8004264:	7c3b      	ldrb	r3, [r7, #16]
 8004266:	2b75      	cmp	r3, #117	; 0x75
 8004268:	d901      	bls.n	800426e <lowlayer_writePulse+0xce>
		return FALSE;
 800426a:	2300      	movs	r3, #0
 800426c:	e04b      	b.n	8004306 <lowlayer_writePulse+0x166>
//	if (pulse3_abs == 0) {
//		HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_SET); // Disable
//	} else {
//		HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_RESET);
//	}
	HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_RESET);
 800426e:	2200      	movs	r2, #0
 8004270:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004274:	4826      	ldr	r0, [pc, #152]	; (8004310 <lowlayer_writePulse+0x170>)
 8004276:	f005 feb7 	bl	8009fe8 <HAL_GPIO_WritePin>

	// Write to Module DDA
	FSMC_Write(ADDRESS_DDA_0, (uint32_t)pulse0_combine);
 800427a:	7dfb      	ldrb	r3, [r7, #23]
 800427c:	4619      	mov	r1, r3
 800427e:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
 8004282:	f7fe fc07 	bl	8002a94 <FSMC_Write>
	FSMC_Write(ADDRESS_DDA_1, (uint32_t)pulse1_combine);
 8004286:	7dbb      	ldrb	r3, [r7, #22]
 8004288:	4619      	mov	r1, r3
 800428a:	4822      	ldr	r0, [pc, #136]	; (8004314 <lowlayer_writePulse+0x174>)
 800428c:	f7fe fc02 	bl	8002a94 <FSMC_Write>
	FSMC_Write(ADDRESS_DDA_2, (uint32_t)pulse2_combine);
 8004290:	7d7b      	ldrb	r3, [r7, #21]
 8004292:	4619      	mov	r1, r3
 8004294:	4820      	ldr	r0, [pc, #128]	; (8004318 <lowlayer_writePulse+0x178>)
 8004296:	f7fe fbfd 	bl	8002a94 <FSMC_Write>
	FSMC_Write(ADDRESS_DDA_3, (uint32_t)pulse3_combine);
 800429a:	7d3b      	ldrb	r3, [r7, #20]
 800429c:	4619      	mov	r1, r3
 800429e:	481f      	ldr	r0, [pc, #124]	; (800431c <lowlayer_writePulse+0x17c>)
 80042a0:	f7fe fbf8 	bl	8002a94 <FSMC_Write>

	// Trigger
	uint8_t delay = 100;
 80042a4:	2364      	movs	r3, #100	; 0x64
 80042a6:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(PULSE_WRITE_GPIO_Port, PULSE_WRITE_Pin, GPIO_PIN_RESET);
 80042a8:	2200      	movs	r2, #0
 80042aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80042ae:	481c      	ldr	r0, [pc, #112]	; (8004320 <lowlayer_writePulse+0x180>)
 80042b0:	f005 fe9a 	bl	8009fe8 <HAL_GPIO_WritePin>
	while (delay--);
 80042b4:	bf00      	nop
 80042b6:	7bfb      	ldrb	r3, [r7, #15]
 80042b8:	1e5a      	subs	r2, r3, #1
 80042ba:	73fa      	strb	r2, [r7, #15]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d1fa      	bne.n	80042b6 <lowlayer_writePulse+0x116>
	HAL_GPIO_WritePin(PULSE_WRITE_GPIO_Port, PULSE_WRITE_Pin, GPIO_PIN_SET);
 80042c0:	2201      	movs	r2, #1
 80042c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80042c6:	4816      	ldr	r0, [pc, #88]	; (8004320 <lowlayer_writePulse+0x180>)
 80042c8:	f005 fe8e 	bl	8009fe8 <HAL_GPIO_WritePin>

	// Accumulate
	pulse_accumulate[0] += pulse0;
 80042cc:	4b15      	ldr	r3, [pc, #84]	; (8004324 <lowlayer_writePulse+0x184>)
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042d4:	4413      	add	r3, r2
 80042d6:	4a13      	ldr	r2, [pc, #76]	; (8004324 <lowlayer_writePulse+0x184>)
 80042d8:	6013      	str	r3, [r2, #0]
	pulse_accumulate[1] += pulse1;
 80042da:	4b12      	ldr	r3, [pc, #72]	; (8004324 <lowlayer_writePulse+0x184>)
 80042dc:	685a      	ldr	r2, [r3, #4]
 80042de:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80042e2:	4413      	add	r3, r2
 80042e4:	4a0f      	ldr	r2, [pc, #60]	; (8004324 <lowlayer_writePulse+0x184>)
 80042e6:	6053      	str	r3, [r2, #4]
	pulse_accumulate[2] += pulse2;
 80042e8:	4b0e      	ldr	r3, [pc, #56]	; (8004324 <lowlayer_writePulse+0x184>)
 80042ea:	689a      	ldr	r2, [r3, #8]
 80042ec:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80042f0:	4413      	add	r3, r2
 80042f2:	4a0c      	ldr	r2, [pc, #48]	; (8004324 <lowlayer_writePulse+0x184>)
 80042f4:	6093      	str	r3, [r2, #8]
	pulse_accumulate[3] += pulse3;
 80042f6:	4b0b      	ldr	r3, [pc, #44]	; (8004324 <lowlayer_writePulse+0x184>)
 80042f8:	68da      	ldr	r2, [r3, #12]
 80042fa:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80042fe:	4413      	add	r3, r2
 8004300:	4a08      	ldr	r2, [pc, #32]	; (8004324 <lowlayer_writePulse+0x184>)
 8004302:	60d3      	str	r3, [r2, #12]

	return TRUE;
 8004304:	2301      	movs	r3, #1
}
 8004306:	4618      	mov	r0, r3
 8004308:	371c      	adds	r7, #28
 800430a:	46bd      	mov	sp, r7
 800430c:	bd90      	pop	{r4, r7, pc}
 800430e:	bf00      	nop
 8004310:	40020000 	.word	0x40020000
 8004314:	60000002 	.word	0x60000002
 8004318:	60000004 	.word	0x60000004
 800431c:	60000006 	.word	0x60000006
 8004320:	40020c00 	.word	0x40020c00
 8004324:	20005338 	.word	0x20005338

08004328 <lowlayer_resetEncoder>:

void	lowlayer_resetEncoder(void) {
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
	// Trigger
	uint8_t delay = 100;
 800432e:	2364      	movs	r3, #100	; 0x64
 8004330:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ENCODER_RESET_GPIO_Port, ENCODER_RESET_Pin, GPIO_PIN_SET);
 8004332:	2201      	movs	r2, #1
 8004334:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004338:	4809      	ldr	r0, [pc, #36]	; (8004360 <lowlayer_resetEncoder+0x38>)
 800433a:	f005 fe55 	bl	8009fe8 <HAL_GPIO_WritePin>
	while (delay--);
 800433e:	bf00      	nop
 8004340:	79fb      	ldrb	r3, [r7, #7]
 8004342:	1e5a      	subs	r2, r3, #1
 8004344:	71fa      	strb	r2, [r7, #7]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d1fa      	bne.n	8004340 <lowlayer_resetEncoder+0x18>
	HAL_GPIO_WritePin(ENCODER_RESET_GPIO_Port, ENCODER_RESET_Pin, GPIO_PIN_RESET);
 800434a:	2200      	movs	r2, #0
 800434c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004350:	4803      	ldr	r0, [pc, #12]	; (8004360 <lowlayer_resetEncoder+0x38>)
 8004352:	f005 fe49 	bl	8009fe8 <HAL_GPIO_WritePin>
}
 8004356:	bf00      	nop
 8004358:	3708      	adds	r7, #8
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	40020c00 	.word	0x40020c00

08004364 <lowlayer_readLimitSwitch>:

uint8_t lowlayer_readLimitSwitch(void) {
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
	uint16_t read_data = FSMC_Read(ADDRESS_LIMIT);
 800436a:	4805      	ldr	r0, [pc, #20]	; (8004380 <lowlayer_readLimitSwitch+0x1c>)
 800436c:	f7fe fba1 	bl	8002ab2 <FSMC_Read>
 8004370:	4603      	mov	r3, r0
 8004372:	80fb      	strh	r3, [r7, #6]

	return (uint8_t)read_data;
 8004374:	88fb      	ldrh	r3, [r7, #6]
 8004376:	b2db      	uxtb	r3, r3
}
 8004378:	4618      	mov	r0, r3
 800437a:	3708      	adds	r7, #8
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}
 8004380:	60000020 	.word	0x60000020

08004384 <lowlayer_readEncoder>:

int32_t lowlayer_readEncoder(uint8_t encoder_num) {
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	4603      	mov	r3, r0
 800438c:	71fb      	strb	r3, [r7, #7]
	int32_t data;
	if (encoder_num <= 2) {
 800438e:	79fb      	ldrb	r3, [r7, #7]
 8004390:	2b02      	cmp	r3, #2
 8004392:	d81c      	bhi.n	80043ce <lowlayer_readEncoder+0x4a>
		uint16_t low_word = FSMC_Read(ADDRESS_ENC0_LOW + encoder_num*4);
 8004394:	79fb      	ldrb	r3, [r7, #7]
 8004396:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 800439a:	3310      	adds	r3, #16
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	4618      	mov	r0, r3
 80043a0:	f7fe fb87 	bl	8002ab2 <FSMC_Read>
 80043a4:	4603      	mov	r3, r0
 80043a6:	817b      	strh	r3, [r7, #10]
		uint16_t high_word = FSMC_Read(ADDRESS_ENC0_LOW + encoder_num*4 + 2);
 80043a8:	79fb      	ldrb	r3, [r7, #7]
 80043aa:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 80043ae:	3310      	adds	r3, #16
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	3302      	adds	r3, #2
 80043b4:	4618      	mov	r0, r3
 80043b6:	f7fe fb7c 	bl	8002ab2 <FSMC_Read>
 80043ba:	4603      	mov	r3, r0
 80043bc:	813b      	strh	r3, [r7, #8]
		data = high_word;
 80043be:	893b      	ldrh	r3, [r7, #8]
 80043c0:	60fb      	str	r3, [r7, #12]
		data = (data << 16) | low_word;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	041a      	lsls	r2, r3, #16
 80043c6:	897b      	ldrh	r3, [r7, #10]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	60fb      	str	r3, [r7, #12]
 80043cc:	e001      	b.n	80043d2 <lowlayer_readEncoder+0x4e>
	} else {
		data = 0;
 80043ce:	2300      	movs	r3, #0
 80043d0:	60fb      	str	r3, [r7, #12]
	}
	return data;
 80043d2:	68fb      	ldr	r3, [r7, #12]
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3710      	adds	r7, #16
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}

080043dc <lowlayer_readCapture>:

int32_t lowlayer_readCapture(uint8_t capture_num) {
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	4603      	mov	r3, r0
 80043e4:	71fb      	strb	r3, [r7, #7]
	int32_t data;
	if (capture_num <= 2) {
 80043e6:	79fb      	ldrb	r3, [r7, #7]
 80043e8:	2b02      	cmp	r3, #2
 80043ea:	d81c      	bhi.n	8004426 <lowlayer_readCapture+0x4a>
		uint16_t low_word = FSMC_Read(ADDRESS_CAP0_LOW + capture_num*4);
 80043ec:	79fb      	ldrb	r3, [r7, #7]
 80043ee:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 80043f2:	3318      	adds	r3, #24
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	4618      	mov	r0, r3
 80043f8:	f7fe fb5b 	bl	8002ab2 <FSMC_Read>
 80043fc:	4603      	mov	r3, r0
 80043fe:	817b      	strh	r3, [r7, #10]
		uint16_t high_word = FSMC_Read(ADDRESS_CAP0_LOW + capture_num*4 + 2);
 8004400:	79fb      	ldrb	r3, [r7, #7]
 8004402:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 8004406:	3318      	adds	r3, #24
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	3302      	adds	r3, #2
 800440c:	4618      	mov	r0, r3
 800440e:	f7fe fb50 	bl	8002ab2 <FSMC_Read>
 8004412:	4603      	mov	r3, r0
 8004414:	813b      	strh	r3, [r7, #8]
		data = high_word;
 8004416:	893b      	ldrh	r3, [r7, #8]
 8004418:	60fb      	str	r3, [r7, #12]
		data = (data << 16) | low_word;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	041a      	lsls	r2, r3, #16
 800441e:	897b      	ldrh	r3, [r7, #10]
 8004420:	4313      	orrs	r3, r2
 8004422:	60fb      	str	r3, [r7, #12]
 8004424:	e001      	b.n	800442a <lowlayer_readCapture+0x4e>
	} else {
		data = 0;
 8004426:	2300      	movs	r3, #0
 8004428:	60fb      	str	r3, [r7, #12]
	}
	return data;
 800442a:	68fb      	ldr	r3, [r7, #12]
}
 800442c:	4618      	mov	r0, r3
 800442e:	3710      	adds	r7, #16
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <lowlayer_updateEncoder>:

void	lowlayer_updateEncoder(void) {
 8004434:	b590      	push	{r4, r7, lr}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 3; i++) {
 800443a:	2300      	movs	r3, #0
 800443c:	71fb      	strb	r3, [r7, #7]
 800443e:	e00b      	b.n	8004458 <lowlayer_updateEncoder+0x24>
		position_encoder[i] = lowlayer_readEncoder(i);
 8004440:	79fc      	ldrb	r4, [r7, #7]
 8004442:	79fb      	ldrb	r3, [r7, #7]
 8004444:	4618      	mov	r0, r3
 8004446:	f7ff ff9d 	bl	8004384 <lowlayer_readEncoder>
 800444a:	4602      	mov	r2, r0
 800444c:	4b06      	ldr	r3, [pc, #24]	; (8004468 <lowlayer_updateEncoder+0x34>)
 800444e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	for (uint8_t i = 0; i < 3; i++) {
 8004452:	79fb      	ldrb	r3, [r7, #7]
 8004454:	3301      	adds	r3, #1
 8004456:	71fb      	strb	r3, [r7, #7]
 8004458:	79fb      	ldrb	r3, [r7, #7]
 800445a:	2b02      	cmp	r3, #2
 800445c:	d9f0      	bls.n	8004440 <lowlayer_updateEncoder+0xc>
	}
}
 800445e:	bf00      	nop
 8004460:	370c      	adds	r7, #12
 8004462:	46bd      	mov	sp, r7
 8004464:	bd90      	pop	{r4, r7, pc}
 8004466:	bf00      	nop
 8004468:	2000534c 	.word	0x2000534c

0800446c <lowlayer_updateCapture>:

void	lowlayer_updateCapture(void) {
 800446c:	b590      	push	{r4, r7, lr}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 3; i++) {
 8004472:	2300      	movs	r3, #0
 8004474:	71fb      	strb	r3, [r7, #7]
 8004476:	e00b      	b.n	8004490 <lowlayer_updateCapture+0x24>
			position_capture[i] = lowlayer_readCapture(i);
 8004478:	79fc      	ldrb	r4, [r7, #7]
 800447a:	79fb      	ldrb	r3, [r7, #7]
 800447c:	4618      	mov	r0, r3
 800447e:	f7ff ffad 	bl	80043dc <lowlayer_readCapture>
 8004482:	4602      	mov	r2, r0
 8004484:	4b06      	ldr	r3, [pc, #24]	; (80044a0 <lowlayer_updateCapture+0x34>)
 8004486:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	for (uint8_t i = 0; i < 3; i++) {
 800448a:	79fb      	ldrb	r3, [r7, #7]
 800448c:	3301      	adds	r3, #1
 800448e:	71fb      	strb	r3, [r7, #7]
 8004490:	79fb      	ldrb	r3, [r7, #7]
 8004492:	2b02      	cmp	r3, #2
 8004494:	d9f0      	bls.n	8004478 <lowlayer_updateCapture+0xc>
	}
}
 8004496:	bf00      	nop
 8004498:	370c      	adds	r7, #12
 800449a:	46bd      	mov	sp, r7
 800449c:	bd90      	pop	{r4, r7, pc}
 800449e:	bf00      	nop
 80044a0:	2000535c 	.word	0x2000535c

080044a4 <lowlayer_updateLimit>:

void	lowlayer_updateLimit(void) {
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b082      	sub	sp, #8
 80044a8:	af00      	add	r7, sp, #0
	uint8_t limit_data = lowlayer_readLimitSwitch();
 80044aa:	f7ff ff5b 	bl	8004364 <lowlayer_readLimitSwitch>
 80044ae:	4603      	mov	r3, r0
 80044b0:	71bb      	strb	r3, [r7, #6]
	for (uint8_t i = 0; i < 4; i++) {
 80044b2:	2300      	movs	r3, #0
 80044b4:	71fb      	strb	r3, [r7, #7]
 80044b6:	e00d      	b.n	80044d4 <lowlayer_updateLimit+0x30>
			limit_switch[i] = (limit_data & (0x01 << i)) ? 1 : 0;
 80044b8:	79ba      	ldrb	r2, [r7, #6]
 80044ba:	79fb      	ldrb	r3, [r7, #7]
 80044bc:	fa42 f303 	asr.w	r3, r2, r3
 80044c0:	b2da      	uxtb	r2, r3
 80044c2:	79fb      	ldrb	r3, [r7, #7]
 80044c4:	f002 0201 	and.w	r2, r2, #1
 80044c8:	b2d1      	uxtb	r1, r2
 80044ca:	4a06      	ldr	r2, [pc, #24]	; (80044e4 <lowlayer_updateLimit+0x40>)
 80044cc:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 4; i++) {
 80044ce:	79fb      	ldrb	r3, [r7, #7]
 80044d0:	3301      	adds	r3, #1
 80044d2:	71fb      	strb	r3, [r7, #7]
 80044d4:	79fb      	ldrb	r3, [r7, #7]
 80044d6:	2b03      	cmp	r3, #3
 80044d8:	d9ee      	bls.n	80044b8 <lowlayer_updateLimit+0x14>
	}
}
 80044da:	bf00      	nop
 80044dc:	3708      	adds	r7, #8
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	20005358 	.word	0x20005358

080044e8 <lowlayer_setOutput>:

void	lowlayer_setOutput(uint8_t value) {
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	4603      	mov	r3, r0
 80044f0:	71fb      	strb	r3, [r7, #7]
	if (value > 0) {
 80044f2:	79fb      	ldrb	r3, [r7, #7]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d006      	beq.n	8004506 <lowlayer_setOutput+0x1e>
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_SET);
 80044f8:	2201      	movs	r2, #1
 80044fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80044fe:	4807      	ldr	r0, [pc, #28]	; (800451c <lowlayer_setOutput+0x34>)
 8004500:	f005 fd72 	bl	8009fe8 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_RESET);
	}
}
 8004504:	e005      	b.n	8004512 <lowlayer_setOutput+0x2a>
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_RESET);
 8004506:	2200      	movs	r2, #0
 8004508:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800450c:	4803      	ldr	r0, [pc, #12]	; (800451c <lowlayer_setOutput+0x34>)
 800450e:	f005 fd6b 	bl	8009fe8 <HAL_GPIO_WritePin>
}
 8004512:	bf00      	nop
 8004514:	3708      	adds	r7, #8
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	40020400 	.word	0x40020400

08004520 <lowlayer_CPLD_Init>:

void	lowlayer_CPLD_Init(void) {
 8004520:	b580      	push	{r7, lr}
 8004522:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(STOP_GPIO_Port, STOP_Pin, GPIO_PIN_SET); // STOP low active
 8004524:	2201      	movs	r2, #1
 8004526:	2140      	movs	r1, #64	; 0x40
 8004528:	4802      	ldr	r0, [pc, #8]	; (8004534 <lowlayer_CPLD_Init+0x14>)
 800452a:	f005 fd5d 	bl	8009fe8 <HAL_GPIO_WritePin>
}
 800452e:	bf00      	nop
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	40020c00 	.word	0x40020c00

08004538 <lowlayer_stepMotorInit>:

void	lowlayer_stepMotorInit(void) {
 8004538:	b580      	push	{r7, lr}
 800453a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_SET); // ENABLE low active
 800453c:	2201      	movs	r2, #1
 800453e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004542:	4808      	ldr	r0, [pc, #32]	; (8004564 <lowlayer_stepMotorInit+0x2c>)
 8004544:	f005 fd50 	bl	8009fe8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEP_RESET_GPIO_Port, STEP_RESET_Pin, GPIO_PIN_SET); // RESET low active
 8004548:	2201      	movs	r2, #1
 800454a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800454e:	4805      	ldr	r0, [pc, #20]	; (8004564 <lowlayer_stepMotorInit+0x2c>)
 8004550:	f005 fd4a 	bl	8009fe8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEP_SLEEP_GPIO_Port, STEP_SLEEP_Pin, GPIO_PIN_SET); // SLEEP low active
 8004554:	2201      	movs	r2, #1
 8004556:	f44f 7180 	mov.w	r1, #256	; 0x100
 800455a:	4802      	ldr	r0, [pc, #8]	; (8004564 <lowlayer_stepMotorInit+0x2c>)
 800455c:	f005 fd44 	bl	8009fe8 <HAL_GPIO_WritePin>
}
 8004560:	bf00      	nop
 8004562:	bd80      	pop	{r7, pc}
 8004564:	40020000 	.word	0x40020000

08004568 <scaraStartup>:
											 "Over Accelerate",
											 "Wrong Joint Num",
											 "Wrong Coordinate"
											};

void				scaraStartup(void) {
 8004568:	b580      	push	{r7, lr}
 800456a:	af00      	add	r7, sp, #0
	lowlayer_CPLD_Init();
 800456c:	f7ff ffd8 	bl	8004520 <lowlayer_CPLD_Init>
	lowlayer_stepMotorInit();
 8004570:	f7ff ffe2 	bl	8004538 <lowlayer_stepMotorInit>
	lowlayer_resetEncoder();
 8004574:	f7ff fed8 	bl	8004328 <lowlayer_resetEncoder>
	lowlayer_writePulse(0, 0, 0, 0);
 8004578:	2300      	movs	r3, #0
 800457a:	2200      	movs	r2, #0
 800457c:	2100      	movs	r1, #0
 800457e:	2000      	movs	r0, #0
 8004580:	f7ff fe0e 	bl	80041a0 <lowlayer_writePulse>
}
 8004584:	bf00      	nop
 8004586:	bd80      	pop	{r7, pc}

08004588 <scaraInitDuty>:

/* Compute duty corresponding to new command */
SCARA_StatusTypeDef	scaraInitDuty		(DUTY_Command_TypeDef command) {
 8004588:	b084      	sub	sp, #16
 800458a:	b5b0      	push	{r4, r5, r7, lr}
 800458c:	f5ad 7d12 	sub.w	sp, sp, #584	; 0x248
 8004590:	af4e      	add	r7, sp, #312	; 0x138
 8004592:	f507 7c90 	add.w	ip, r7, #288	; 0x120
 8004596:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	SCARA_StatusTypeDef status, status1, status2;

	/*----------- Space Task ------------*/
	if 			(DUTY_SPACE_TASK == command.space_type) {
 800459a:	f897 3129 	ldrb.w	r3, [r7, #297]	; 0x129
 800459e:	2b00      	cmp	r3, #0
 80045a0:	f040 834c 	bne.w	8004c3c <scaraInitDuty+0x6b4>
		double total_s, angle_s;
		int8_t dir_angle;
		SCARA_PositionTypeDef	target_point;
		// Change Degree --> Radian
		command.target_point.roll = command.target_point.roll*PI/180.0;
 80045a4:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80045a8:	a3ab      	add	r3, pc, #684	; (adr r3, 8004858 <scaraInitDuty+0x2d0>)
 80045aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ae:	f7fc f833 	bl	8000618 <__aeabi_dmul>
 80045b2:	4602      	mov	r2, r0
 80045b4:	460b      	mov	r3, r1
 80045b6:	4610      	mov	r0, r2
 80045b8:	4619      	mov	r1, r3
 80045ba:	f04f 0200 	mov.w	r2, #0
 80045be:	4ba8      	ldr	r3, [pc, #672]	; (8004860 <scaraInitDuty+0x2d8>)
 80045c0:	f7fc f954 	bl	800086c <__aeabi_ddiv>
 80045c4:	4602      	mov	r2, r0
 80045c6:	460b      	mov	r3, r1
 80045c8:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
		// Coordinate
		if( DUTY_COORDINATES_REL == command.coordinate_type) {
 80045cc:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d130      	bne.n	8004636 <scaraInitDuty+0xae>
			target_point.x 		= positionCurrent.x + command.target_point.x;
 80045d4:	4ba3      	ldr	r3, [pc, #652]	; (8004864 <scaraInitDuty+0x2dc>)
 80045d6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80045da:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 80045de:	f7fb fe65 	bl	80002ac <__adddf3>
 80045e2:	4602      	mov	r2, r0
 80045e4:	460b      	mov	r3, r1
 80045e6:	4639      	mov	r1, r7
 80045e8:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
			target_point.y 		= positionCurrent.y + command.target_point.y;
 80045ec:	4b9d      	ldr	r3, [pc, #628]	; (8004864 <scaraInitDuty+0x2dc>)
 80045ee:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80045f2:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 80045f6:	f7fb fe59 	bl	80002ac <__adddf3>
 80045fa:	4602      	mov	r2, r0
 80045fc:	460b      	mov	r3, r1
 80045fe:	4639      	mov	r1, r7
 8004600:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
			target_point.z 		= positionCurrent.z + command.target_point.z;
 8004604:	4b97      	ldr	r3, [pc, #604]	; (8004864 <scaraInitDuty+0x2dc>)
 8004606:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800460a:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 800460e:	f7fb fe4d 	bl	80002ac <__adddf3>
 8004612:	4602      	mov	r2, r0
 8004614:	460b      	mov	r3, r1
 8004616:	4639      	mov	r1, r7
 8004618:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
			target_point.roll	= positionCurrent.roll + command.target_point.roll;
 800461c:	4b91      	ldr	r3, [pc, #580]	; (8004864 <scaraInitDuty+0x2dc>)
 800461e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8004622:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8004626:	f7fb fe41 	bl	80002ac <__adddf3>
 800462a:	4602      	mov	r2, r0
 800462c:	460b      	mov	r3, r1
 800462e:	4639      	mov	r1, r7
 8004630:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 8004634:	e01b      	b.n	800466e <scaraInitDuty+0xe6>
		} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8004636:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 800463a:	2b00      	cmp	r3, #0
 800463c:	d114      	bne.n	8004668 <scaraInitDuty+0xe0>
			target_point.x 		= command.target_point.x;
 800463e:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8004642:	4639      	mov	r1, r7
 8004644:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
			target_point.y 		= command.target_point.y;
 8004648:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 800464c:	4639      	mov	r1, r7
 800464e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
			target_point.z 		= command.target_point.z;
 8004652:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 8004656:	4639      	mov	r1, r7
 8004658:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
			target_point.roll	= command.target_point.roll;
 800465c:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8004660:	4639      	mov	r1, r7
 8004662:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 8004666:	e002      	b.n	800466e <scaraInitDuty+0xe6>
		} else {
			return SCARA_STATUS_ERROR_COORDINATE;
 8004668:	230c      	movs	r3, #12
 800466a:	f001 ba71 	b.w	8005b50 <scaraInitDuty+0x15c8>
		}

		angle_s = target_point.roll - positionCurrent.roll;
 800466e:	463b      	mov	r3, r7
 8004670:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8004674:	4b7b      	ldr	r3, [pc, #492]	; (8004864 <scaraInitDuty+0x2dc>)
 8004676:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800467a:	f7fb fe15 	bl	80002a8 <__aeabi_dsub>
 800467e:	4602      	mov	r2, r0
 8004680:	460b      	mov	r3, r1
 8004682:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
		dir_angle = 1;
 8004686:	2301      	movs	r3, #1
 8004688:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
		if ( angle_s < 0) {
 800468c:	f04f 0200 	mov.w	r2, #0
 8004690:	f04f 0300 	mov.w	r3, #0
 8004694:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8004698:	f7fc fa30 	bl	8000afc <__aeabi_dcmplt>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d002      	beq.n	80046a8 <scaraInitDuty+0x120>
			dir_angle = -1;
 80046a2:	23ff      	movs	r3, #255	; 0xff
 80046a4:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
		}
		if ( fabs(angle_s) > PI) {
 80046a8:	f8d7 40f8 	ldr.w	r4, [r7, #248]	; 0xf8
 80046ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046b0:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80046b4:	a368      	add	r3, pc, #416	; (adr r3, 8004858 <scaraInitDuty+0x2d0>)
 80046b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ba:	4620      	mov	r0, r4
 80046bc:	4629      	mov	r1, r5
 80046be:	f7fc fa3b 	bl	8000b38 <__aeabi_dcmpgt>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d021      	beq.n	800470c <scaraInitDuty+0x184>
			dir_angle = -dir_angle;
 80046c8:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 80046cc:	425b      	negs	r3, r3
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
			angle_s = (2*PI - fabsf(angle_s))*dir_angle;
 80046d4:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 80046d8:	f7fc fa96 	bl	8000c08 <__aeabi_d2f>
 80046dc:	ee07 0a90 	vmov	s15, r0
 80046e0:	eef0 7ae7 	vabs.f32	s15, s15
 80046e4:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8004868 <scaraInitDuty+0x2e0>
 80046e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80046ec:	f997 30f7 	ldrsb.w	r3, [r7, #247]	; 0xf7
 80046f0:	ee07 3a90 	vmov	s15, r3
 80046f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046fc:	ee17 0a90 	vmov	r0, s15
 8004700:	f7fb ff32 	bl	8000568 <__aeabi_f2d>
 8004704:	4603      	mov	r3, r0
 8004706:	460c      	mov	r4, r1
 8004708:	e9c7 343e 	strd	r3, r4, [r7, #248]	; 0xf8
		}


		myDUTY.space_type = DUTY_SPACE_TASK;// Change type
 800470c:	4b57      	ldr	r3, [pc, #348]	; (800486c <scaraInitDuty+0x2e4>)
 800470e:	2200      	movs	r2, #0
 8004710:	701a      	strb	r2, [r3, #0]
		myDUTY.task.roll_start = positionCurrent.roll;
 8004712:	4b54      	ldr	r3, [pc, #336]	; (8004864 <scaraInitDuty+0x2dc>)
 8004714:	e9d3 3410 	ldrd	r3, r4, [r3, #64]	; 0x40
 8004718:	4a54      	ldr	r2, [pc, #336]	; (800486c <scaraInitDuty+0x2e4>)
 800471a:	e9c2 34f0 	strd	r3, r4, [r2, #960]	; 0x3c0
		// 1-Path Planning
			// Straight Line
		if ( DUTY_PATH_LINE == command.path_type ) {
 800471e:	f897 312a 	ldrb.w	r3, [r7, #298]	; 0x12a
 8004722:	2b00      	cmp	r3, #0
 8004724:	d11f      	bne.n	8004766 <scaraInitDuty+0x1de>
			myDUTY.task.path.path_type = DUTY_PATH_LINE;
 8004726:	4b51      	ldr	r3, [pc, #324]	; (800486c <scaraInitDuty+0x2e4>)
 8004728:	2200      	movs	r2, #0
 800472a:	721a      	strb	r2, [r3, #8]
			status = scaraInitLine(&(myDUTY.task.path.line), positionCurrent, target_point);
 800472c:	4c4d      	ldr	r4, [pc, #308]	; (8004864 <scaraInitDuty+0x2dc>)
 800472e:	463b      	mov	r3, r7
 8004730:	a818      	add	r0, sp, #96	; 0x60
 8004732:	4619      	mov	r1, r3
 8004734:	2368      	movs	r3, #104	; 0x68
 8004736:	461a      	mov	r2, r3
 8004738:	f00f fa92 	bl	8013c60 <memcpy>
 800473c:	4668      	mov	r0, sp
 800473e:	f104 0308 	add.w	r3, r4, #8
 8004742:	2260      	movs	r2, #96	; 0x60
 8004744:	4619      	mov	r1, r3
 8004746:	f00f fa8b 	bl	8013c60 <memcpy>
 800474a:	e894 000c 	ldmia.w	r4, {r2, r3}
 800474e:	4848      	ldr	r0, [pc, #288]	; (8004870 <scaraInitDuty+0x2e8>)
 8004750:	f001 fa10 	bl	8005b74 <scaraInitLine>
 8004754:	4603      	mov	r3, r0
 8004756:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			total_s = myDUTY.task.path.line.total_s;
 800475a:	4b44      	ldr	r3, [pc, #272]	; (800486c <scaraInitDuty+0x2e4>)
 800475c:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 8004760:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
 8004764:	e070      	b.n	8004848 <scaraInitDuty+0x2c0>
			// Circular
		} else if ( DUTY_PATH_CIRCLE == command.path_type ) {
 8004766:	f897 312a 	ldrb.w	r3, [r7, #298]	; 0x12a
 800476a:	2b01      	cmp	r3, #1
 800476c:	d169      	bne.n	8004842 <scaraInitDuty+0x2ba>
			SCARA_PositionTypeDef	center_point;
			if( DUTY_COORDINATES_REL == command.coordinate_type) {
 800476e:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8004772:	2b01      	cmp	r3, #1
 8004774:	d127      	bne.n	80047c6 <scaraInitDuty+0x23e>
				center_point.x 		= positionCurrent.x + command.sub_point.x;
 8004776:	4b3b      	ldr	r3, [pc, #236]	; (8004864 <scaraInitDuty+0x2dc>)
 8004778:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800477c:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 8004780:	461a      	mov	r2, r3
 8004782:	4623      	mov	r3, r4
 8004784:	f7fb fd92 	bl	80002ac <__adddf3>
 8004788:	4603      	mov	r3, r0
 800478a:	460c      	mov	r4, r1
 800478c:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
				center_point.y 		= positionCurrent.y + command.sub_point.y;
 8004790:	4b34      	ldr	r3, [pc, #208]	; (8004864 <scaraInitDuty+0x2dc>)
 8004792:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8004796:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 800479a:	461a      	mov	r2, r3
 800479c:	4623      	mov	r3, r4
 800479e:	f7fb fd85 	bl	80002ac <__adddf3>
 80047a2:	4603      	mov	r3, r0
 80047a4:	460c      	mov	r4, r1
 80047a6:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
				center_point.z 		= positionCurrent.z + command.sub_point.z;
 80047aa:	4b2e      	ldr	r3, [pc, #184]	; (8004864 <scaraInitDuty+0x2dc>)
 80047ac:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80047b0:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 80047b4:	461a      	mov	r2, r3
 80047b6:	4623      	mov	r3, r4
 80047b8:	f7fb fd78 	bl	80002ac <__adddf3>
 80047bc:	4603      	mov	r3, r0
 80047be:	460c      	mov	r4, r1
 80047c0:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 80047c4:	e013      	b.n	80047ee <scaraInitDuty+0x266>
			} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 80047c6:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d10c      	bne.n	80047e8 <scaraInitDuty+0x260>
				center_point.x 		= command.target_point.x;
 80047ce:	e9d7 345c 	ldrd	r3, r4, [r7, #368]	; 0x170
 80047d2:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
				center_point.y 		= command.target_point.y;
 80047d6:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 80047da:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
				center_point.z 		= command.target_point.z;
 80047de:	e9d7 3460 	ldrd	r3, r4, [r7, #384]	; 0x180
 80047e2:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 80047e6:	e002      	b.n	80047ee <scaraInitDuty+0x266>
			} else {
				return SCARA_STATUS_ERROR_COORDINATE;
 80047e8:	230c      	movs	r3, #12
			return SCARA_STATUS_ERROR_COORDINATE;
 80047ea:	f001 b9b1 	b.w	8005b50 <scaraInitDuty+0x15c8>
			}

			myDUTY.task.path.path_type = DUTY_PATH_CIRCLE;
 80047ee:	4b1f      	ldr	r3, [pc, #124]	; (800486c <scaraInitDuty+0x2e4>)
 80047f0:	2201      	movs	r2, #1
 80047f2:	721a      	strb	r2, [r3, #8]
			status = scaraInitCircle(&(myDUTY.task.path.circle),
 80047f4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80047f8:	4c1a      	ldr	r4, [pc, #104]	; (8004864 <scaraInitDuty+0x2dc>)
 80047fa:	934c      	str	r3, [sp, #304]	; 0x130
 80047fc:	a832      	add	r0, sp, #200	; 0xc8
 80047fe:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004802:	2268      	movs	r2, #104	; 0x68
 8004804:	4619      	mov	r1, r3
 8004806:	f00f fa2b 	bl	8013c60 <memcpy>
 800480a:	463b      	mov	r3, r7
 800480c:	a818      	add	r0, sp, #96	; 0x60
 800480e:	4619      	mov	r1, r3
 8004810:	2368      	movs	r3, #104	; 0x68
 8004812:	461a      	mov	r2, r3
 8004814:	f00f fa24 	bl	8013c60 <memcpy>
 8004818:	4668      	mov	r0, sp
 800481a:	f104 0308 	add.w	r3, r4, #8
 800481e:	2260      	movs	r2, #96	; 0x60
 8004820:	4619      	mov	r1, r3
 8004822:	f00f fa1d 	bl	8013c60 <memcpy>
 8004826:	e894 000c 	ldmia.w	r4, {r2, r3}
 800482a:	4812      	ldr	r0, [pc, #72]	; (8004874 <scaraInitDuty+0x2ec>)
 800482c:	f001 fa68 	bl	8005d00 <scaraInitCircle>
 8004830:	4603      	mov	r3, r0
 8004832:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
										positionCurrent,
										target_point,
										center_point,
										command.sub_para_int );
			total_s = myDUTY.task.path.circle.total_s;
 8004836:	4b0d      	ldr	r3, [pc, #52]	; (800486c <scaraInitDuty+0x2e4>)
 8004838:	e9d3 343a 	ldrd	r3, r4, [r3, #232]	; 0xe8
 800483c:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
 8004840:	e002      	b.n	8004848 <scaraInitDuty+0x2c0>

		} else {
			return SCARA_STATUS_ERROR_TASK;
 8004842:	2303      	movs	r3, #3
 8004844:	f001 b984 	b.w	8005b50 <scaraInitDuty+0x15c8>
		}

		if ( SCARA_STATUS_OK != status) {
 8004848:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800484c:	2b00      	cmp	r3, #0
 800484e:	d013      	beq.n	8004878 <scaraInitDuty+0x2f0>
			return status;
 8004850:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8004854:	f001 b97c 	b.w	8005b50 <scaraInitDuty+0x15c8>
 8004858:	60000000 	.word	0x60000000
 800485c:	400921fb 	.word	0x400921fb
 8004860:	40668000 	.word	0x40668000
 8004864:	20005d58 	.word	0x20005d58
 8004868:	40c90fdb 	.word	0x40c90fdb
 800486c:	200053a0 	.word	0x200053a0
 8004870:	200053b0 	.word	0x200053b0
 8004874:	20005420 	.word	0x20005420
		}

		// 2-Trajectory Planning
			// LSPB
		if ( DUTY_TRAJECTORY_LSPB == command.trajec_type ) {
 8004878:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 800487c:	2b00      	cmp	r3, #0
 800487e:	f040 80dd 	bne.w	8004a3c <scaraInitDuty+0x4b4>

			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8004882:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8004886:	2b01      	cmp	r3, #1
 8004888:	d145      	bne.n	8004916 <scaraInitDuty+0x38e>
				myDUTY.task.trajectory_3d.lspb.Tf = command.time_total;
 800488a:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 800488e:	4ac8      	ldr	r2, [pc, #800]	; (8004bb0 <scaraInitDuty+0x628>)
 8004890:	e9c2 345a 	strd	r3, r4, [r2, #360]	; 0x168
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LSPB;
 8004894:	4bc6      	ldr	r3, [pc, #792]	; (8004bb0 <scaraInitDuty+0x628>)
 8004896:	2200      	movs	r2, #0
 8004898:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitLSPB(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 800489c:	ed97 7b86 	vldr	d7, [r7, #536]	; 0x218
 80048a0:	ed97 6b88 	vldr	d6, [r7, #544]	; 0x220
 80048a4:	eeb0 2a46 	vmov.f32	s4, s12
 80048a8:	eef0 2a66 	vmov.f32	s5, s13
 80048ac:	eeb0 1a47 	vmov.f32	s2, s14
 80048b0:	eef0 1a67 	vmov.f32	s3, s15
 80048b4:	2201      	movs	r2, #1
 80048b6:	ed97 0b40 	vldr	d0, [r7, #256]	; 0x100
 80048ba:	2104      	movs	r1, #4
 80048bc:	48bd      	ldr	r0, [pc, #756]	; (8004bb4 <scaraInitDuty+0x62c>)
 80048be:	f001 fb97 	bl	8005ff0 <scaraInitLSPB>
 80048c2:	4603      	mov	r3, r0
 80048c4:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
						 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);

				myDUTY.task.trajectory_roll.lspb.Tf = command.time_total;
 80048c8:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 80048cc:	4ab8      	ldr	r2, [pc, #736]	; (8004bb0 <scaraInitDuty+0x628>)
 80048ce:	e9c2 34b0 	strd	r3, r4, [r2, #704]	; 0x2c0
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LSPB;
 80048d2:	4bb7      	ldr	r3, [pc, #732]	; (8004bb0 <scaraInitDuty+0x628>)
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 2268 	strb.w	r2, [r3, #616]	; 0x268
				status2 = scaraInitLSPB(&(myDUTY.task.trajectory_roll.lspb), TRAJECTORY_ROLL,
 80048da:	ed97 7b86 	vldr	d7, [r7, #536]	; 0x218
 80048de:	ed97 6b88 	vldr	d6, [r7, #544]	; 0x220
 80048e2:	eeb0 2a46 	vmov.f32	s4, s12
 80048e6:	eef0 2a66 	vmov.f32	s5, s13
 80048ea:	eeb0 1a47 	vmov.f32	s2, s14
 80048ee:	eef0 1a67 	vmov.f32	s3, s15
 80048f2:	2201      	movs	r2, #1
 80048f4:	ed97 0b3e 	vldr	d0, [r7, #248]	; 0xf8
 80048f8:	2105      	movs	r1, #5
 80048fa:	48af      	ldr	r0, [pc, #700]	; (8004bb8 <scaraInitDuty+0x630>)
 80048fc:	f001 fb78 	bl	8005ff0 <scaraInitLSPB>
 8004900:	4603      	mov	r3, r0
 8004902:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
						 angle_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
				myDUTY.time_total = command.time_total;
 8004906:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 800490a:	4aa9      	ldr	r2, [pc, #676]	; (8004bb0 <scaraInitDuty+0x628>)
 800490c:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8004910:	e9c2 3400 	strd	r3, r4, [r2]
 8004914:	e181      	b.n	8004c1a <scaraInitDuty+0x692>

			} else if (DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8004916:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800491a:	2b00      	cmp	r3, #0
 800491c:	f040 808b 	bne.w	8004a36 <scaraInitDuty+0x4ae>
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LSPB;
 8004920:	4ba3      	ldr	r3, [pc, #652]	; (8004bb0 <scaraInitDuty+0x628>)
 8004922:	2200      	movs	r2, #0
 8004924:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitLSPB(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 8004928:	ed97 7b86 	vldr	d7, [r7, #536]	; 0x218
 800492c:	ed97 6b88 	vldr	d6, [r7, #544]	; 0x220
 8004930:	eeb0 2a46 	vmov.f32	s4, s12
 8004934:	eef0 2a66 	vmov.f32	s5, s13
 8004938:	eeb0 1a47 	vmov.f32	s2, s14
 800493c:	eef0 1a67 	vmov.f32	s3, s15
 8004940:	2200      	movs	r2, #0
 8004942:	ed97 0b40 	vldr	d0, [r7, #256]	; 0x100
 8004946:	2104      	movs	r1, #4
 8004948:	489a      	ldr	r0, [pc, #616]	; (8004bb4 <scaraInitDuty+0x62c>)
 800494a:	f001 fb51 	bl	8005ff0 <scaraInitLSPB>
 800494e:	4603      	mov	r3, r0
 8004950:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
						 total_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LSPB;
 8004954:	4b96      	ldr	r3, [pc, #600]	; (8004bb0 <scaraInitDuty+0x628>)
 8004956:	2200      	movs	r2, #0
 8004958:	f883 2268 	strb.w	r2, [r3, #616]	; 0x268
				status2 = scaraInitLSPB(&(myDUTY.task.trajectory_roll.lspb), TRAJECTORY_ROLL,
 800495c:	ed97 7b86 	vldr	d7, [r7, #536]	; 0x218
 8004960:	ed97 6b88 	vldr	d6, [r7, #544]	; 0x220
 8004964:	eeb0 2a46 	vmov.f32	s4, s12
 8004968:	eef0 2a66 	vmov.f32	s5, s13
 800496c:	eeb0 1a47 	vmov.f32	s2, s14
 8004970:	eef0 1a67 	vmov.f32	s3, s15
 8004974:	2200      	movs	r2, #0
 8004976:	ed97 0b3e 	vldr	d0, [r7, #248]	; 0xf8
 800497a:	2105      	movs	r1, #5
 800497c:	488e      	ldr	r0, [pc, #568]	; (8004bb8 <scaraInitDuty+0x630>)
 800497e:	f001 fb37 	bl	8005ff0 <scaraInitLSPB>
 8004982:	4603      	mov	r3, r0
 8004984:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
						 angle_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				// Synchronous time end
				if(myDUTY.task.trajectory_3d.lspb.Tf > myDUTY.task.trajectory_roll.lspb.Tf) {
 8004988:	4b89      	ldr	r3, [pc, #548]	; (8004bb0 <scaraInitDuty+0x628>)
 800498a:	e9d3 015a 	ldrd	r0, r1, [r3, #360]	; 0x168
 800498e:	4b88      	ldr	r3, [pc, #544]	; (8004bb0 <scaraInitDuty+0x628>)
 8004990:	e9d3 34b0 	ldrd	r3, r4, [r3, #704]	; 0x2c0
 8004994:	461a      	mov	r2, r3
 8004996:	4623      	mov	r3, r4
 8004998:	f7fc f8ce 	bl	8000b38 <__aeabi_dcmpgt>
 800499c:	4603      	mov	r3, r0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d024      	beq.n	80049ec <scaraInitDuty+0x464>
					myDUTY.task.trajectory_roll.lspb.Tf = myDUTY.task.trajectory_3d.lspb.Tf;
 80049a2:	4b83      	ldr	r3, [pc, #524]	; (8004bb0 <scaraInitDuty+0x628>)
 80049a4:	e9d3 345a 	ldrd	r3, r4, [r3, #360]	; 0x168
 80049a8:	4a81      	ldr	r2, [pc, #516]	; (8004bb0 <scaraInitDuty+0x628>)
 80049aa:	e9c2 34b0 	strd	r3, r4, [r2, #704]	; 0x2c0
					status2 = scaraInitLSPB(&(myDUTY.task.trajectory_roll.lspb), TRAJECTORY_ROLL,
 80049ae:	ed97 7b86 	vldr	d7, [r7, #536]	; 0x218
 80049b2:	ed97 6b88 	vldr	d6, [r7, #544]	; 0x220
 80049b6:	eeb0 2a46 	vmov.f32	s4, s12
 80049ba:	eef0 2a66 	vmov.f32	s5, s13
 80049be:	eeb0 1a47 	vmov.f32	s2, s14
 80049c2:	eef0 1a67 	vmov.f32	s3, s15
 80049c6:	2201      	movs	r2, #1
 80049c8:	ed97 0b3e 	vldr	d0, [r7, #248]	; 0xf8
 80049cc:	2105      	movs	r1, #5
 80049ce:	487a      	ldr	r0, [pc, #488]	; (8004bb8 <scaraInitDuty+0x630>)
 80049d0:	f001 fb0e 	bl	8005ff0 <scaraInitLSPB>
 80049d4:	4603      	mov	r3, r0
 80049d6:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
							 angle_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_3d.lspb.Tf;
 80049da:	4b75      	ldr	r3, [pc, #468]	; (8004bb0 <scaraInitDuty+0x628>)
 80049dc:	e9d3 345a 	ldrd	r3, r4, [r3, #360]	; 0x168
 80049e0:	4a73      	ldr	r2, [pc, #460]	; (8004bb0 <scaraInitDuty+0x628>)
 80049e2:	f602 1248 	addw	r2, r2, #2376	; 0x948
 80049e6:	e9c2 3400 	strd	r3, r4, [r2]
 80049ea:	e116      	b.n	8004c1a <scaraInitDuty+0x692>
				} else {
					myDUTY.task.trajectory_3d.lspb.Tf = myDUTY.task.trajectory_roll.lspb.Tf;
 80049ec:	4b70      	ldr	r3, [pc, #448]	; (8004bb0 <scaraInitDuty+0x628>)
 80049ee:	e9d3 34b0 	ldrd	r3, r4, [r3, #704]	; 0x2c0
 80049f2:	4a6f      	ldr	r2, [pc, #444]	; (8004bb0 <scaraInitDuty+0x628>)
 80049f4:	e9c2 345a 	strd	r3, r4, [r2, #360]	; 0x168
					status1 = scaraInitLSPB(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 80049f8:	ed97 7b86 	vldr	d7, [r7, #536]	; 0x218
 80049fc:	ed97 6b88 	vldr	d6, [r7, #544]	; 0x220
 8004a00:	eeb0 2a46 	vmov.f32	s4, s12
 8004a04:	eef0 2a66 	vmov.f32	s5, s13
 8004a08:	eeb0 1a47 	vmov.f32	s2, s14
 8004a0c:	eef0 1a67 	vmov.f32	s3, s15
 8004a10:	2201      	movs	r2, #1
 8004a12:	ed97 0b40 	vldr	d0, [r7, #256]	; 0x100
 8004a16:	2104      	movs	r1, #4
 8004a18:	4866      	ldr	r0, [pc, #408]	; (8004bb4 <scaraInitDuty+0x62c>)
 8004a1a:	f001 fae9 	bl	8005ff0 <scaraInitLSPB>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
							 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_roll.lspb.Tf;
 8004a24:	4b62      	ldr	r3, [pc, #392]	; (8004bb0 <scaraInitDuty+0x628>)
 8004a26:	e9d3 34b0 	ldrd	r3, r4, [r3, #704]	; 0x2c0
 8004a2a:	4a61      	ldr	r2, [pc, #388]	; (8004bb0 <scaraInitDuty+0x628>)
 8004a2c:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8004a30:	e9c2 3400 	strd	r3, r4, [r2]
 8004a34:	e0f1      	b.n	8004c1a <scaraInitDuty+0x692>
				}
			} else {
				return SCARA_STATUS_ERROR_MODE_INIT ;
 8004a36:	2308      	movs	r3, #8
 8004a38:	f001 b88a 	b.w	8005b50 <scaraInitDuty+0x15c8>
			}
			// SCURVE
		} else if 	( DUTY_TRAJECTORY_SCURVE == command.trajec_type ){
 8004a3c:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	f040 80e7 	bne.w	8004c14 <scaraInitDuty+0x68c>

			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8004a46:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d145      	bne.n	8004ada <scaraInitDuty+0x552>
				myDUTY.task.trajectory_3d.scurve.Tf = command.time_total;
 8004a4e:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8004a52:	4a57      	ldr	r2, [pc, #348]	; (8004bb0 <scaraInitDuty+0x628>)
 8004a54:	e9c2 347e 	strd	r3, r4, [r2, #504]	; 0x1f8
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8004a58:	4b55      	ldr	r3, [pc, #340]	; (8004bb0 <scaraInitDuty+0x628>)
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitScurve(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 8004a60:	ed97 7b86 	vldr	d7, [r7, #536]	; 0x218
 8004a64:	ed97 6b88 	vldr	d6, [r7, #544]	; 0x220
 8004a68:	eeb0 2a46 	vmov.f32	s4, s12
 8004a6c:	eef0 2a66 	vmov.f32	s5, s13
 8004a70:	eeb0 1a47 	vmov.f32	s2, s14
 8004a74:	eef0 1a67 	vmov.f32	s3, s15
 8004a78:	2201      	movs	r2, #1
 8004a7a:	ed97 0b40 	vldr	d0, [r7, #256]	; 0x100
 8004a7e:	2104      	movs	r1, #4
 8004a80:	484e      	ldr	r0, [pc, #312]	; (8004bbc <scaraInitDuty+0x634>)
 8004a82:	f001 fea1 	bl	80067c8 <scaraInitScurve>
 8004a86:	4603      	mov	r3, r0
 8004a88:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
						 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);

				myDUTY.task.trajectory_roll.scurve.Tf = command.time_total;
 8004a8c:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8004a90:	4a47      	ldr	r2, [pc, #284]	; (8004bb0 <scaraInitDuty+0x628>)
 8004a92:	e9c2 34d4 	strd	r3, r4, [r2, #848]	; 0x350
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8004a96:	4b46      	ldr	r3, [pc, #280]	; (8004bb0 <scaraInitDuty+0x628>)
 8004a98:	2201      	movs	r2, #1
 8004a9a:	f883 2268 	strb.w	r2, [r3, #616]	; 0x268
				status2 = scaraInitScurve(&(myDUTY.task.trajectory_roll.scurve), TRAJECTORY_ROLL,
 8004a9e:	ed97 7b86 	vldr	d7, [r7, #536]	; 0x218
 8004aa2:	ed97 6b88 	vldr	d6, [r7, #544]	; 0x220
 8004aa6:	eeb0 2a46 	vmov.f32	s4, s12
 8004aaa:	eef0 2a66 	vmov.f32	s5, s13
 8004aae:	eeb0 1a47 	vmov.f32	s2, s14
 8004ab2:	eef0 1a67 	vmov.f32	s3, s15
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	ed97 0b3e 	vldr	d0, [r7, #248]	; 0xf8
 8004abc:	2105      	movs	r1, #5
 8004abe:	4840      	ldr	r0, [pc, #256]	; (8004bc0 <scaraInitDuty+0x638>)
 8004ac0:	f001 fe82 	bl	80067c8 <scaraInitScurve>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
						 angle_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
				myDUTY.time_total = command.time_total;
 8004aca:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8004ace:	4a38      	ldr	r2, [pc, #224]	; (8004bb0 <scaraInitDuty+0x628>)
 8004ad0:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8004ad4:	e9c2 3400 	strd	r3, r4, [r2]
 8004ad8:	e09f      	b.n	8004c1a <scaraInitDuty+0x692>

			} else if (DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8004ada:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	f040 8095 	bne.w	8004c0e <scaraInitDuty+0x686>
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8004ae4:	4b32      	ldr	r3, [pc, #200]	; (8004bb0 <scaraInitDuty+0x628>)
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitScurve(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 8004aec:	ed97 7b86 	vldr	d7, [r7, #536]	; 0x218
 8004af0:	ed97 6b88 	vldr	d6, [r7, #544]	; 0x220
 8004af4:	eeb0 2a46 	vmov.f32	s4, s12
 8004af8:	eef0 2a66 	vmov.f32	s5, s13
 8004afc:	eeb0 1a47 	vmov.f32	s2, s14
 8004b00:	eef0 1a67 	vmov.f32	s3, s15
 8004b04:	2200      	movs	r2, #0
 8004b06:	ed97 0b40 	vldr	d0, [r7, #256]	; 0x100
 8004b0a:	2104      	movs	r1, #4
 8004b0c:	482b      	ldr	r0, [pc, #172]	; (8004bbc <scaraInitDuty+0x634>)
 8004b0e:	f001 fe5b 	bl	80067c8 <scaraInitScurve>
 8004b12:	4603      	mov	r3, r0
 8004b14:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
						 total_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8004b18:	4b25      	ldr	r3, [pc, #148]	; (8004bb0 <scaraInitDuty+0x628>)
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 2268 	strb.w	r2, [r3, #616]	; 0x268
				status2 = scaraInitScurve(&(myDUTY.task.trajectory_roll.scurve), TRAJECTORY_ROLL,
 8004b20:	ed97 7b86 	vldr	d7, [r7, #536]	; 0x218
 8004b24:	ed97 6b88 	vldr	d6, [r7, #544]	; 0x220
 8004b28:	eeb0 2a46 	vmov.f32	s4, s12
 8004b2c:	eef0 2a66 	vmov.f32	s5, s13
 8004b30:	eeb0 1a47 	vmov.f32	s2, s14
 8004b34:	eef0 1a67 	vmov.f32	s3, s15
 8004b38:	2200      	movs	r2, #0
 8004b3a:	ed97 0b3e 	vldr	d0, [r7, #248]	; 0xf8
 8004b3e:	2105      	movs	r1, #5
 8004b40:	481f      	ldr	r0, [pc, #124]	; (8004bc0 <scaraInitDuty+0x638>)
 8004b42:	f001 fe41 	bl	80067c8 <scaraInitScurve>
 8004b46:	4603      	mov	r3, r0
 8004b48:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
						 angle_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				// synchronous time end
				if(myDUTY.task.trajectory_3d.scurve.Tf > myDUTY.task.trajectory_roll.scurve.Tf) {
 8004b4c:	4b18      	ldr	r3, [pc, #96]	; (8004bb0 <scaraInitDuty+0x628>)
 8004b4e:	e9d3 017e 	ldrd	r0, r1, [r3, #504]	; 0x1f8
 8004b52:	4b17      	ldr	r3, [pc, #92]	; (8004bb0 <scaraInitDuty+0x628>)
 8004b54:	e9d3 34d4 	ldrd	r3, r4, [r3, #848]	; 0x350
 8004b58:	461a      	mov	r2, r3
 8004b5a:	4623      	mov	r3, r4
 8004b5c:	f7fb ffec 	bl	8000b38 <__aeabi_dcmpgt>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d02e      	beq.n	8004bc4 <scaraInitDuty+0x63c>
					myDUTY.task.trajectory_roll.scurve.Tf = myDUTY.task.trajectory_3d.scurve.Tf;
 8004b66:	4b12      	ldr	r3, [pc, #72]	; (8004bb0 <scaraInitDuty+0x628>)
 8004b68:	e9d3 347e 	ldrd	r3, r4, [r3, #504]	; 0x1f8
 8004b6c:	4a10      	ldr	r2, [pc, #64]	; (8004bb0 <scaraInitDuty+0x628>)
 8004b6e:	e9c2 34d4 	strd	r3, r4, [r2, #848]	; 0x350
					status2 = scaraInitScurve(&(myDUTY.task.trajectory_roll.scurve), TRAJECTORY_ROLL,
 8004b72:	ed97 7b86 	vldr	d7, [r7, #536]	; 0x218
 8004b76:	ed97 6b88 	vldr	d6, [r7, #544]	; 0x220
 8004b7a:	eeb0 2a46 	vmov.f32	s4, s12
 8004b7e:	eef0 2a66 	vmov.f32	s5, s13
 8004b82:	eeb0 1a47 	vmov.f32	s2, s14
 8004b86:	eef0 1a67 	vmov.f32	s3, s15
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	ed97 0b3e 	vldr	d0, [r7, #248]	; 0xf8
 8004b90:	2105      	movs	r1, #5
 8004b92:	480b      	ldr	r0, [pc, #44]	; (8004bc0 <scaraInitDuty+0x638>)
 8004b94:	f001 fe18 	bl	80067c8 <scaraInitScurve>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
							 angle_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_3d.scurve.Tf;
 8004b9e:	4b04      	ldr	r3, [pc, #16]	; (8004bb0 <scaraInitDuty+0x628>)
 8004ba0:	e9d3 347e 	ldrd	r3, r4, [r3, #504]	; 0x1f8
 8004ba4:	4a02      	ldr	r2, [pc, #8]	; (8004bb0 <scaraInitDuty+0x628>)
 8004ba6:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8004baa:	e9c2 3400 	strd	r3, r4, [r2]
 8004bae:	e034      	b.n	8004c1a <scaraInitDuty+0x692>
 8004bb0:	200053a0 	.word	0x200053a0
 8004bb4:	200054b8 	.word	0x200054b8
 8004bb8:	20005610 	.word	0x20005610
 8004bbc:	20005538 	.word	0x20005538
 8004bc0:	20005690 	.word	0x20005690
				} else {
					myDUTY.task.trajectory_3d.scurve.Tf = myDUTY.task.trajectory_roll.scurve.Tf;
 8004bc4:	4bb0      	ldr	r3, [pc, #704]	; (8004e88 <scaraInitDuty+0x900>)
 8004bc6:	e9d3 34d4 	ldrd	r3, r4, [r3, #848]	; 0x350
 8004bca:	4aaf      	ldr	r2, [pc, #700]	; (8004e88 <scaraInitDuty+0x900>)
 8004bcc:	e9c2 347e 	strd	r3, r4, [r2, #504]	; 0x1f8
					status1 = scaraInitScurve(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 8004bd0:	ed97 7b86 	vldr	d7, [r7, #536]	; 0x218
 8004bd4:	ed97 6b88 	vldr	d6, [r7, #544]	; 0x220
 8004bd8:	eeb0 2a46 	vmov.f32	s4, s12
 8004bdc:	eef0 2a66 	vmov.f32	s5, s13
 8004be0:	eeb0 1a47 	vmov.f32	s2, s14
 8004be4:	eef0 1a67 	vmov.f32	s3, s15
 8004be8:	2201      	movs	r2, #1
 8004bea:	ed97 0b40 	vldr	d0, [r7, #256]	; 0x100
 8004bee:	2104      	movs	r1, #4
 8004bf0:	48a6      	ldr	r0, [pc, #664]	; (8004e8c <scaraInitDuty+0x904>)
 8004bf2:	f001 fde9 	bl	80067c8 <scaraInitScurve>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
							 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_roll.scurve.Tf;
 8004bfc:	4ba2      	ldr	r3, [pc, #648]	; (8004e88 <scaraInitDuty+0x900>)
 8004bfe:	e9d3 34d4 	ldrd	r3, r4, [r3, #848]	; 0x350
 8004c02:	4aa1      	ldr	r2, [pc, #644]	; (8004e88 <scaraInitDuty+0x900>)
 8004c04:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8004c08:	e9c2 3400 	strd	r3, r4, [r2]
 8004c0c:	e005      	b.n	8004c1a <scaraInitDuty+0x692>
				}
			} else {
				return SCARA_STATUS_ERROR_MODE_INIT;
 8004c0e:	2308      	movs	r3, #8
 8004c10:	f000 bf9e 	b.w	8005b50 <scaraInitDuty+0x15c8>
			}
		} else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 8004c14:	2305      	movs	r3, #5
 8004c16:	f000 bf9b 	b.w	8005b50 <scaraInitDuty+0x15c8>
		}
		// Check Init Status
		if ( SCARA_STATUS_OK != status1) {
 8004c1a:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d003      	beq.n	8004c2a <scaraInitDuty+0x6a2>
			return status1;
 8004c22:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8004c26:	f000 bf93 	b.w	8005b50 <scaraInitDuty+0x15c8>
		}
		if ( SCARA_STATUS_OK != status2) {
 8004c2a:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	f000 8760 	beq.w	8005af4 <scaraInitDuty+0x156c>
			return status2;
 8004c34:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8004c38:	f000 bf8a 	b.w	8005b50 <scaraInitDuty+0x15c8>
		}


	/*----------- Space Joint ------------*/
	} else if (DUTY_SPACE_JOINT == command.space_type) {
 8004c3c:	f897 3129 	ldrb.w	r3, [r7, #297]	; 0x129
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	f040 8755 	bne.w	8005af0 <scaraInitDuty+0x1568>

		myDUTY.space_type = DUTY_SPACE_JOINT;// Change type
 8004c46:	4b90      	ldr	r3, [pc, #576]	; (8004e88 <scaraInitDuty+0x900>)
 8004c48:	2201      	movs	r2, #1
 8004c4a:	701a      	strb	r2, [r3, #0]
		myDUTY.joint.theta1_start	 = positionCurrent.Theta1;
 8004c4c:	4b90      	ldr	r3, [pc, #576]	; (8004e90 <scaraInitDuty+0x908>)
 8004c4e:	e9d3 3412 	ldrd	r3, r4, [r3, #72]	; 0x48
 8004c52:	4a8d      	ldr	r2, [pc, #564]	; (8004e88 <scaraInitDuty+0x900>)
 8004c54:	f602 1228 	addw	r2, r2, #2344	; 0x928
 8004c58:	e9c2 3400 	strd	r3, r4, [r2]
		myDUTY.joint.theta2_start	 = positionCurrent.Theta2;
 8004c5c:	4b8c      	ldr	r3, [pc, #560]	; (8004e90 <scaraInitDuty+0x908>)
 8004c5e:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 8004c62:	4a89      	ldr	r2, [pc, #548]	; (8004e88 <scaraInitDuty+0x900>)
 8004c64:	f502 6213 	add.w	r2, r2, #2352	; 0x930
 8004c68:	e9c2 3400 	strd	r3, r4, [r2]
		myDUTY.joint.d3_start		 = positionCurrent.D3;
 8004c6c:	4b88      	ldr	r3, [pc, #544]	; (8004e90 <scaraInitDuty+0x908>)
 8004c6e:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 8004c72:	4a85      	ldr	r2, [pc, #532]	; (8004e88 <scaraInitDuty+0x900>)
 8004c74:	f602 1238 	addw	r2, r2, #2360	; 0x938
 8004c78:	e9c2 3400 	strd	r3, r4, [r2]
		myDUTY.joint.theta4_start 	 = positionCurrent.Theta4;
 8004c7c:	4b84      	ldr	r3, [pc, #528]	; (8004e90 <scaraInitDuty+0x908>)
 8004c7e:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8004c82:	4a81      	ldr	r2, [pc, #516]	; (8004e88 <scaraInitDuty+0x900>)
 8004c84:	f502 6214 	add.w	r2, r2, #2368	; 0x940
 8004c88:	e9c2 3400 	strd	r3, r4, [r2]

		//-----Joint Single
		if ( DUTY_JOINT_SINGLE == command.joint_type) {
 8004c8c:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	f040 83d6 	bne.w	8005442 <scaraInitDuty+0xeba>
			// Trajectory 1 profile
			double s, abs_position;
			switch(command.sub_para_int) {
 8004c96:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004c9a:	2b03      	cmp	r3, #3
 8004c9c:	f200 814e 	bhi.w	8004f3c <scaraInitDuty+0x9b4>
 8004ca0:	a201      	add	r2, pc, #4	; (adr r2, 8004ca8 <scaraInitDuty+0x720>)
 8004ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ca6:	bf00      	nop
 8004ca8:	08004cb9 	.word	0x08004cb9
 8004cac:	08004d5f 	.word	0x08004d5f
 8004cb0:	08004e05 	.word	0x08004e05
 8004cb4:	08004e99 	.word	0x08004e99
			case 0:
				// Change Degree --> Radian
				command.sub_para_double = command.sub_para_double*PI/180.0;
 8004cb8:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8004cbc:	a370      	add	r3, pc, #448	; (adr r3, 8004e80 <scaraInitDuty+0x8f8>)
 8004cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc2:	f7fb fca9 	bl	8000618 <__aeabi_dmul>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	460c      	mov	r4, r1
 8004cca:	4618      	mov	r0, r3
 8004ccc:	4621      	mov	r1, r4
 8004cce:	f04f 0200 	mov.w	r2, #0
 8004cd2:	4b70      	ldr	r3, [pc, #448]	; (8004e94 <scaraInitDuty+0x90c>)
 8004cd4:	f7fb fdca 	bl	800086c <__aeabi_ddiv>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	460c      	mov	r4, r1
 8004cdc:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
				// Coordinate
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8004ce0:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d113      	bne.n	8004d10 <scaraInitDuty+0x788>
					abs_position = myDUTY.joint.theta1_start + command.sub_para_double;
 8004ce8:	4b67      	ldr	r3, [pc, #412]	; (8004e88 <scaraInitDuty+0x900>)
 8004cea:	f603 1328 	addw	r3, r3, #2344	; 0x928
 8004cee:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004cf2:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	4623      	mov	r3, r4
 8004cfa:	f7fb fad7 	bl	80002ac <__adddf3>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	460c      	mov	r4, r1
 8004d02:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
					s			 = command.sub_para_double;
 8004d06:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 8004d0a:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
 8004d0e:	e01a      	b.n	8004d46 <scaraInitDuty+0x7be>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8004d10:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d113      	bne.n	8004d40 <scaraInitDuty+0x7b8>
					abs_position = command.sub_para_double;
 8004d18:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 8004d1c:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
					s			 = command.sub_para_double - myDUTY.joint.theta1_start;
 8004d20:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8004d24:	4b58      	ldr	r3, [pc, #352]	; (8004e88 <scaraInitDuty+0x900>)
 8004d26:	f603 1328 	addw	r3, r3, #2344	; 0x928
 8004d2a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004d2e:	461a      	mov	r2, r3
 8004d30:	4623      	mov	r3, r4
 8004d32:	f7fb fab9 	bl	80002a8 <__aeabi_dsub>
 8004d36:	4603      	mov	r3, r0
 8004d38:	460c      	mov	r4, r1
 8004d3a:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
 8004d3e:	e002      	b.n	8004d46 <scaraInitDuty+0x7be>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 8004d40:	230c      	movs	r3, #12
 8004d42:	f000 bf05 	b.w	8005b50 <scaraInitDuty+0x15c8>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J0, abs_position)) {
 8004d46:	ed97 0b38 	vldr	d0, [r7, #224]	; 0xe0
 8004d4a:	2000      	movs	r0, #0
 8004d4c:	f003 fd80 	bl	8008850 <scaraCheckWorkSpace1>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	f000 80f5 	beq.w	8004f42 <scaraInitDuty+0x9ba>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8004d58:	2307      	movs	r3, #7
 8004d5a:	f000 bef9 	b.w	8005b50 <scaraInitDuty+0x15c8>
				}
				break;
			case 1:
				// Change Degree --> Radian
				command.sub_para_double = command.sub_para_double*PI/180.0;
 8004d5e:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8004d62:	a347      	add	r3, pc, #284	; (adr r3, 8004e80 <scaraInitDuty+0x8f8>)
 8004d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d68:	f7fb fc56 	bl	8000618 <__aeabi_dmul>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	460c      	mov	r4, r1
 8004d70:	4618      	mov	r0, r3
 8004d72:	4621      	mov	r1, r4
 8004d74:	f04f 0200 	mov.w	r2, #0
 8004d78:	4b46      	ldr	r3, [pc, #280]	; (8004e94 <scaraInitDuty+0x90c>)
 8004d7a:	f7fb fd77 	bl	800086c <__aeabi_ddiv>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	460c      	mov	r4, r1
 8004d82:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
				// Coordinate
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8004d86:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d113      	bne.n	8004db6 <scaraInitDuty+0x82e>
					abs_position = myDUTY.joint.theta2_start + command.sub_para_double;
 8004d8e:	4b3e      	ldr	r3, [pc, #248]	; (8004e88 <scaraInitDuty+0x900>)
 8004d90:	f503 6313 	add.w	r3, r3, #2352	; 0x930
 8004d94:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004d98:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	4623      	mov	r3, r4
 8004da0:	f7fb fa84 	bl	80002ac <__adddf3>
 8004da4:	4603      	mov	r3, r0
 8004da6:	460c      	mov	r4, r1
 8004da8:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
					s			 = command.sub_para_double;
 8004dac:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 8004db0:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
 8004db4:	e01a      	b.n	8004dec <scaraInitDuty+0x864>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8004db6:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d113      	bne.n	8004de6 <scaraInitDuty+0x85e>
					abs_position = command.sub_para_double;
 8004dbe:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 8004dc2:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
					s			 = command.sub_para_double - myDUTY.joint.theta2_start;
 8004dc6:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8004dca:	4b2f      	ldr	r3, [pc, #188]	; (8004e88 <scaraInitDuty+0x900>)
 8004dcc:	f503 6313 	add.w	r3, r3, #2352	; 0x930
 8004dd0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	4623      	mov	r3, r4
 8004dd8:	f7fb fa66 	bl	80002a8 <__aeabi_dsub>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	460c      	mov	r4, r1
 8004de0:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
 8004de4:	e002      	b.n	8004dec <scaraInitDuty+0x864>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 8004de6:	230c      	movs	r3, #12
 8004de8:	f000 beb2 	b.w	8005b50 <scaraInitDuty+0x15c8>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J1, abs_position)) {
 8004dec:	ed97 0b38 	vldr	d0, [r7, #224]	; 0xe0
 8004df0:	2001      	movs	r0, #1
 8004df2:	f003 fd2d 	bl	8008850 <scaraCheckWorkSpace1>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	f000 80a4 	beq.w	8004f46 <scaraInitDuty+0x9be>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8004dfe:	2307      	movs	r3, #7
 8004e00:	f000 bea6 	b.w	8005b50 <scaraInitDuty+0x15c8>
				}
				break;
			case 2:
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8004e04:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d113      	bne.n	8004e34 <scaraInitDuty+0x8ac>
					abs_position = myDUTY.joint.d3_start + command.sub_para_double;
 8004e0c:	4b1e      	ldr	r3, [pc, #120]	; (8004e88 <scaraInitDuty+0x900>)
 8004e0e:	f603 1338 	addw	r3, r3, #2360	; 0x938
 8004e12:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004e16:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	4623      	mov	r3, r4
 8004e1e:	f7fb fa45 	bl	80002ac <__adddf3>
 8004e22:	4603      	mov	r3, r0
 8004e24:	460c      	mov	r4, r1
 8004e26:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
					s			 = command.sub_para_double;
 8004e2a:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 8004e2e:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
 8004e32:	e01a      	b.n	8004e6a <scaraInitDuty+0x8e2>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8004e34:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d113      	bne.n	8004e64 <scaraInitDuty+0x8dc>
					abs_position = command.sub_para_double;
 8004e3c:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 8004e40:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
					s			 = command.sub_para_double - myDUTY.joint.d3_start;
 8004e44:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8004e48:	4b0f      	ldr	r3, [pc, #60]	; (8004e88 <scaraInitDuty+0x900>)
 8004e4a:	f603 1338 	addw	r3, r3, #2360	; 0x938
 8004e4e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004e52:	461a      	mov	r2, r3
 8004e54:	4623      	mov	r3, r4
 8004e56:	f7fb fa27 	bl	80002a8 <__aeabi_dsub>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	460c      	mov	r4, r1
 8004e5e:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
 8004e62:	e002      	b.n	8004e6a <scaraInitDuty+0x8e2>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 8004e64:	230c      	movs	r3, #12
 8004e66:	f000 be73 	b.w	8005b50 <scaraInitDuty+0x15c8>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J2, abs_position)) {
 8004e6a:	ed97 0b38 	vldr	d0, [r7, #224]	; 0xe0
 8004e6e:	2002      	movs	r0, #2
 8004e70:	f003 fcee 	bl	8008850 <scaraCheckWorkSpace1>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d067      	beq.n	8004f4a <scaraInitDuty+0x9c2>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8004e7a:	2307      	movs	r3, #7
 8004e7c:	f000 be68 	b.w	8005b50 <scaraInitDuty+0x15c8>
 8004e80:	60000000 	.word	0x60000000
 8004e84:	400921fb 	.word	0x400921fb
 8004e88:	200053a0 	.word	0x200053a0
 8004e8c:	20005538 	.word	0x20005538
 8004e90:	20005d58 	.word	0x20005d58
 8004e94:	40668000 	.word	0x40668000
				}
				break;
			case 3:
				// Change Degree --> Radian
				command.sub_para_double = command.sub_para_double*PI/180.0;
 8004e98:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8004e9c:	a3cf      	add	r3, pc, #828	; (adr r3, 80051dc <scaraInitDuty+0xc54>)
 8004e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea2:	f7fb fbb9 	bl	8000618 <__aeabi_dmul>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	460c      	mov	r4, r1
 8004eaa:	4618      	mov	r0, r3
 8004eac:	4621      	mov	r1, r4
 8004eae:	f04f 0200 	mov.w	r2, #0
 8004eb2:	4bc7      	ldr	r3, [pc, #796]	; (80051d0 <scaraInitDuty+0xc48>)
 8004eb4:	f7fb fcda 	bl	800086c <__aeabi_ddiv>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	460c      	mov	r4, r1
 8004ebc:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
				// Coordinate
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8004ec0:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d113      	bne.n	8004ef0 <scaraInitDuty+0x968>
					abs_position = myDUTY.joint.theta4_start + command.sub_para_double;
 8004ec8:	4bc2      	ldr	r3, [pc, #776]	; (80051d4 <scaraInitDuty+0xc4c>)
 8004eca:	f503 6314 	add.w	r3, r3, #2368	; 0x940
 8004ece:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004ed2:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	4623      	mov	r3, r4
 8004eda:	f7fb f9e7 	bl	80002ac <__adddf3>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	460c      	mov	r4, r1
 8004ee2:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
					s			 = command.sub_para_double;
 8004ee6:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 8004eea:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
 8004eee:	e01a      	b.n	8004f26 <scaraInitDuty+0x99e>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8004ef0:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d113      	bne.n	8004f20 <scaraInitDuty+0x998>
					abs_position = command.sub_para_double;
 8004ef8:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 8004efc:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
					s			 = command.sub_para_double - myDUTY.joint.theta4_start;
 8004f00:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8004f04:	4bb3      	ldr	r3, [pc, #716]	; (80051d4 <scaraInitDuty+0xc4c>)
 8004f06:	f503 6314 	add.w	r3, r3, #2368	; 0x940
 8004f0a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004f0e:	461a      	mov	r2, r3
 8004f10:	4623      	mov	r3, r4
 8004f12:	f7fb f9c9 	bl	80002a8 <__aeabi_dsub>
 8004f16:	4603      	mov	r3, r0
 8004f18:	460c      	mov	r4, r1
 8004f1a:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
 8004f1e:	e002      	b.n	8004f26 <scaraInitDuty+0x99e>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 8004f20:	230c      	movs	r3, #12
 8004f22:	f000 be15 	b.w	8005b50 <scaraInitDuty+0x15c8>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J3, abs_position)) {
 8004f26:	ed97 0b38 	vldr	d0, [r7, #224]	; 0xe0
 8004f2a:	2003      	movs	r0, #3
 8004f2c:	f003 fc90 	bl	8008850 <scaraCheckWorkSpace1>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00b      	beq.n	8004f4e <scaraInitDuty+0x9c6>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8004f36:	2307      	movs	r3, #7
 8004f38:	f000 be0a 	b.w	8005b50 <scaraInitDuty+0x15c8>
				}
				break;
			default:
				return SCARA_STATUS_ERROR_JOINT_NUM;
 8004f3c:	230b      	movs	r3, #11
 8004f3e:	f000 be07 	b.w	8005b50 <scaraInitDuty+0x15c8>
				break;
 8004f42:	bf00      	nop
 8004f44:	e004      	b.n	8004f50 <scaraInitDuty+0x9c8>
				break;
 8004f46:	bf00      	nop
 8004f48:	e002      	b.n	8004f50 <scaraInitDuty+0x9c8>
				break;
 8004f4a:	bf00      	nop
 8004f4c:	e000      	b.n	8004f50 <scaraInitDuty+0x9c8>
				break;
 8004f4e:	bf00      	nop
			}

			// LSPB
			if ( DUTY_TRAJECTORY_LSPB == command.trajec_type) {
 8004f50:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	f040 8128 	bne.w	80051aa <scaraInitDuty+0xc22>
				// Mode Init Time
				if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8004f5a:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	f040 8097 	bne.w	8005092 <scaraInitDuty+0xb0a>
					for ( uint8_t i = 0; i < 4; i++) {
 8004f64:	2300      	movs	r3, #0
 8004f66:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8004f6a:	e08c      	b.n	8005086 <scaraInitDuty+0xafe>
						if ( i == command.sub_para_int) {
 8004f6c:	f897 20df 	ldrb.w	r2, [r7, #223]	; 0xdf
 8004f70:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d13d      	bne.n	8004ff4 <scaraInitDuty+0xa6c>
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8004f78:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8004f7c:	4a95      	ldr	r2, [pc, #596]	; (80051d4 <scaraInitDuty+0xc4c>)
 8004f7e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8004f82:	fb01 f303 	mul.w	r3, r1, r3
 8004f86:	4413      	add	r3, r2
 8004f88:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	701a      	strb	r2, [r3, #0]
							myDUTY.joint.trajectory[i].lspb.Tf = command.time_total;
 8004f90:	f897 20df 	ldrb.w	r2, [r7, #223]	; 0xdf
 8004f94:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8004f98:	498e      	ldr	r1, [pc, #568]	; (80051d4 <scaraInitDuty+0xc4c>)
 8004f9a:	f44f 70ac 	mov.w	r0, #344	; 0x158
 8004f9e:	fb00 f202 	mul.w	r2, r0, r2
 8004fa2:	440a      	add	r2, r1
 8004fa4:	f502 6284 	add.w	r2, r2, #1056	; 0x420
 8004fa8:	e9c2 3400 	strd	r3, r4, [r2]
							status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8004fac:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8004fb0:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8004fb4:	fb02 f303 	mul.w	r3, r2, r3
 8004fb8:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 8004fbc:	4a85      	ldr	r2, [pc, #532]	; (80051d4 <scaraInitDuty+0xc4c>)
 8004fbe:	1898      	adds	r0, r3, r2
 8004fc0:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8004fc4:	4a84      	ldr	r2, [pc, #528]	; (80051d8 <scaraInitDuty+0xc50>)
 8004fc6:	5cd3      	ldrb	r3, [r2, r3]
 8004fc8:	ed97 7b86 	vldr	d7, [r7, #536]	; 0x218
 8004fcc:	ed97 6b88 	vldr	d6, [r7, #544]	; 0x220
 8004fd0:	eeb0 2a46 	vmov.f32	s4, s12
 8004fd4:	eef0 2a66 	vmov.f32	s5, s13
 8004fd8:	eeb0 1a47 	vmov.f32	s2, s14
 8004fdc:	eef0 1a67 	vmov.f32	s3, s15
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	ed97 0b3a 	vldr	d0, [r7, #232]	; 0xe8
 8004fe6:	4619      	mov	r1, r3
 8004fe8:	f001 f802 	bl	8005ff0 <scaraInitLSPB>
 8004fec:	4603      	mov	r3, r0
 8004fee:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
 8004ff2:	e03c      	b.n	800506e <scaraInitDuty+0xae6>
											s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
						} else {
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8004ff4:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8004ff8:	4a76      	ldr	r2, [pc, #472]	; (80051d4 <scaraInitDuty+0xc4c>)
 8004ffa:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8004ffe:	fb01 f303 	mul.w	r3, r1, r3
 8005002:	4413      	add	r3, r2
 8005004:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8005008:	2200      	movs	r2, #0
 800500a:	701a      	strb	r2, [r3, #0]
							myDUTY.joint.trajectory[i].lspb.Tf = command.time_total;
 800500c:	f897 20df 	ldrb.w	r2, [r7, #223]	; 0xdf
 8005010:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8005014:	496f      	ldr	r1, [pc, #444]	; (80051d4 <scaraInitDuty+0xc4c>)
 8005016:	f44f 70ac 	mov.w	r0, #344	; 0x158
 800501a:	fb00 f202 	mul.w	r2, r0, r2
 800501e:	440a      	add	r2, r1
 8005020:	f502 6284 	add.w	r2, r2, #1056	; 0x420
 8005024:	e9c2 3400 	strd	r3, r4, [r2]
							status2 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8005028:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 800502c:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8005030:	fb02 f303 	mul.w	r3, r2, r3
 8005034:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 8005038:	4a66      	ldr	r2, [pc, #408]	; (80051d4 <scaraInitDuty+0xc4c>)
 800503a:	1898      	adds	r0, r3, r2
 800503c:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8005040:	4a65      	ldr	r2, [pc, #404]	; (80051d8 <scaraInitDuty+0xc50>)
 8005042:	5cd3      	ldrb	r3, [r2, r3]
 8005044:	ed97 7b86 	vldr	d7, [r7, #536]	; 0x218
 8005048:	ed97 6b88 	vldr	d6, [r7, #544]	; 0x220
 800504c:	eeb0 2a46 	vmov.f32	s4, s12
 8005050:	eef0 2a66 	vmov.f32	s5, s13
 8005054:	eeb0 1a47 	vmov.f32	s2, s14
 8005058:	eef0 1a67 	vmov.f32	s3, s15
 800505c:	2201      	movs	r2, #1
 800505e:	ed9f 0b5a 	vldr	d0, [pc, #360]	; 80051c8 <scaraInitDuty+0xc40>
 8005062:	4619      	mov	r1, r3
 8005064:	f000 ffc4 	bl	8005ff0 <scaraInitLSPB>
 8005068:	4603      	mov	r3, r0
 800506a:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
											0, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
						}
						myDUTY.time_total = command.time_total;
 800506e:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8005072:	4a58      	ldr	r2, [pc, #352]	; (80051d4 <scaraInitDuty+0xc4c>)
 8005074:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8005078:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 800507c:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8005080:	3301      	adds	r3, #1
 8005082:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8005086:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 800508a:	2b03      	cmp	r3, #3
 800508c:	f67f af6e 	bls.w	8004f6c <scaraInitDuty+0x9e4>
 8005090:	e1c8      	b.n	8005424 <scaraInitDuty+0xe9c>
					}
				// Mode Init Acc
				} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8005092:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8005096:	2b00      	cmp	r3, #0
 8005098:	f040 8084 	bne.w	80051a4 <scaraInitDuty+0xc1c>
					for ( uint8_t i = 0; i < 4; i++) {
 800509c:	2300      	movs	r3, #0
 800509e:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
 80050a2:	e07a      	b.n	800519a <scaraInitDuty+0xc12>
						if ( i == command.sub_para_int) {
 80050a4:	f897 20de 	ldrb.w	r2, [r7, #222]	; 0xde
 80050a8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d140      	bne.n	8005132 <scaraInitDuty+0xbaa>
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 80050b0:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 80050b4:	4a47      	ldr	r2, [pc, #284]	; (80051d4 <scaraInitDuty+0xc4c>)
 80050b6:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80050ba:	fb01 f303 	mul.w	r3, r1, r3
 80050be:	4413      	add	r3, r2
 80050c0:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 80050c4:	2200      	movs	r2, #0
 80050c6:	701a      	strb	r2, [r3, #0]
							status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 80050c8:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 80050cc:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80050d0:	fb02 f303 	mul.w	r3, r2, r3
 80050d4:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 80050d8:	4a3e      	ldr	r2, [pc, #248]	; (80051d4 <scaraInitDuty+0xc4c>)
 80050da:	1898      	adds	r0, r3, r2
 80050dc:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 80050e0:	4a3d      	ldr	r2, [pc, #244]	; (80051d8 <scaraInitDuty+0xc50>)
 80050e2:	5cd3      	ldrb	r3, [r2, r3]
 80050e4:	ed97 7b86 	vldr	d7, [r7, #536]	; 0x218
 80050e8:	ed97 6b88 	vldr	d6, [r7, #544]	; 0x220
 80050ec:	eeb0 2a46 	vmov.f32	s4, s12
 80050f0:	eef0 2a66 	vmov.f32	s5, s13
 80050f4:	eeb0 1a47 	vmov.f32	s2, s14
 80050f8:	eef0 1a67 	vmov.f32	s3, s15
 80050fc:	2200      	movs	r2, #0
 80050fe:	ed97 0b3a 	vldr	d0, [r7, #232]	; 0xe8
 8005102:	4619      	mov	r1, r3
 8005104:	f000 ff74 	bl	8005ff0 <scaraInitLSPB>
 8005108:	4603      	mov	r3, r0
 800510a:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
											s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
							myDUTY.time_total = myDUTY.joint.trajectory[i].lspb.Tf;
 800510e:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8005112:	4a30      	ldr	r2, [pc, #192]	; (80051d4 <scaraInitDuty+0xc4c>)
 8005114:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005118:	fb01 f303 	mul.w	r3, r1, r3
 800511c:	4413      	add	r3, r2
 800511e:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8005122:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005126:	4a2b      	ldr	r2, [pc, #172]	; (80051d4 <scaraInitDuty+0xc4c>)
 8005128:	f602 1248 	addw	r2, r2, #2376	; 0x948
 800512c:	e9c2 3400 	strd	r3, r4, [r2]
 8005130:	e02e      	b.n	8005190 <scaraInitDuty+0xc08>
						} else {
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8005132:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8005136:	4a27      	ldr	r2, [pc, #156]	; (80051d4 <scaraInitDuty+0xc4c>)
 8005138:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800513c:	fb01 f303 	mul.w	r3, r1, r3
 8005140:	4413      	add	r3, r2
 8005142:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8005146:	2200      	movs	r2, #0
 8005148:	701a      	strb	r2, [r3, #0]
							status2 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 800514a:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 800514e:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8005152:	fb02 f303 	mul.w	r3, r2, r3
 8005156:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 800515a:	4a1e      	ldr	r2, [pc, #120]	; (80051d4 <scaraInitDuty+0xc4c>)
 800515c:	1898      	adds	r0, r3, r2
 800515e:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8005162:	4a1d      	ldr	r2, [pc, #116]	; (80051d8 <scaraInitDuty+0xc50>)
 8005164:	5cd3      	ldrb	r3, [r2, r3]
 8005166:	ed97 7b86 	vldr	d7, [r7, #536]	; 0x218
 800516a:	ed97 6b88 	vldr	d6, [r7, #544]	; 0x220
 800516e:	eeb0 2a46 	vmov.f32	s4, s12
 8005172:	eef0 2a66 	vmov.f32	s5, s13
 8005176:	eeb0 1a47 	vmov.f32	s2, s14
 800517a:	eef0 1a67 	vmov.f32	s3, s15
 800517e:	2200      	movs	r2, #0
 8005180:	ed9f 0b11 	vldr	d0, [pc, #68]	; 80051c8 <scaraInitDuty+0xc40>
 8005184:	4619      	mov	r1, r3
 8005186:	f000 ff33 	bl	8005ff0 <scaraInitLSPB>
 800518a:	4603      	mov	r3, r0
 800518c:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
					for ( uint8_t i = 0; i < 4; i++) {
 8005190:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8005194:	3301      	adds	r3, #1
 8005196:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
 800519a:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 800519e:	2b03      	cmp	r3, #3
 80051a0:	d980      	bls.n	80050a4 <scaraInitDuty+0xb1c>
 80051a2:	e13f      	b.n	8005424 <scaraInitDuty+0xe9c>
											0, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
						}
					}
				} else {
					return SCARA_STATUS_ERROR_MODE_INIT;
 80051a4:	2308      	movs	r3, #8
 80051a6:	f000 bcd3 	b.w	8005b50 <scaraInitDuty+0x15c8>
				}
			// SCURVE
			} else if ( DUTY_TRAJECTORY_SCURVE == command.trajec_type) {
 80051aa:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	f040 8136 	bne.w	8005420 <scaraInitDuty+0xe98>
					// Mode Init Time
					if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 80051b4:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	f040 80a6 	bne.w	800530a <scaraInitDuty+0xd82>
						for ( uint8_t i = 0; i < 4; i++) {
 80051be:	2300      	movs	r3, #0
 80051c0:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd
 80051c4:	e09b      	b.n	80052fe <scaraInitDuty+0xd76>
 80051c6:	bf00      	nop
	...
 80051d0:	40668000 	.word	0x40668000
 80051d4:	200053a0 	.word	0x200053a0
 80051d8:	20000c7c 	.word	0x20000c7c
 80051dc:	60000000 	.word	0x60000000
 80051e0:	400921fb 	.word	0x400921fb
							if ( i == command.sub_para_int) {
 80051e4:	f897 20dd 	ldrb.w	r2, [r7, #221]	; 0xdd
 80051e8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d13d      	bne.n	800526c <scaraInitDuty+0xce4>
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 80051f0:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 80051f4:	4ac0      	ldr	r2, [pc, #768]	; (80054f8 <scaraInitDuty+0xf70>)
 80051f6:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80051fa:	fb01 f303 	mul.w	r3, r1, r3
 80051fe:	4413      	add	r3, r2
 8005200:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8005204:	2201      	movs	r2, #1
 8005206:	701a      	strb	r2, [r3, #0]
								myDUTY.joint.trajectory[i].scurve.Tf = command.time_total;
 8005208:	f897 20dd 	ldrb.w	r2, [r7, #221]	; 0xdd
 800520c:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8005210:	49b9      	ldr	r1, [pc, #740]	; (80054f8 <scaraInitDuty+0xf70>)
 8005212:	f44f 70ac 	mov.w	r0, #344	; 0x158
 8005216:	fb00 f202 	mul.w	r2, r0, r2
 800521a:	440a      	add	r2, r1
 800521c:	f502 6296 	add.w	r2, r2, #1200	; 0x4b0
 8005220:	e9c2 3400 	strd	r3, r4, [r2]
								status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve),
 8005224:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8005228:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800522c:	fb02 f303 	mul.w	r3, r2, r3
 8005230:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8005234:	4ab0      	ldr	r2, [pc, #704]	; (80054f8 <scaraInitDuty+0xf70>)
 8005236:	1898      	adds	r0, r3, r2
 8005238:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 800523c:	4aaf      	ldr	r2, [pc, #700]	; (80054fc <scaraInitDuty+0xf74>)
 800523e:	5cd3      	ldrb	r3, [r2, r3]
 8005240:	ed97 7b86 	vldr	d7, [r7, #536]	; 0x218
 8005244:	ed97 6b88 	vldr	d6, [r7, #544]	; 0x220
 8005248:	eeb0 2a46 	vmov.f32	s4, s12
 800524c:	eef0 2a66 	vmov.f32	s5, s13
 8005250:	eeb0 1a47 	vmov.f32	s2, s14
 8005254:	eef0 1a67 	vmov.f32	s3, s15
 8005258:	2201      	movs	r2, #1
 800525a:	ed97 0b3a 	vldr	d0, [r7, #232]	; 0xe8
 800525e:	4619      	mov	r1, r3
 8005260:	f001 fab2 	bl	80067c8 <scaraInitScurve>
 8005264:	4603      	mov	r3, r0
 8005266:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
 800526a:	e03c      	b.n	80052e6 <scaraInitDuty+0xd5e>
											joint_taget[i],
											s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
							} else {
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 800526c:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8005270:	4aa1      	ldr	r2, [pc, #644]	; (80054f8 <scaraInitDuty+0xf70>)
 8005272:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005276:	fb01 f303 	mul.w	r3, r1, r3
 800527a:	4413      	add	r3, r2
 800527c:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8005280:	2201      	movs	r2, #1
 8005282:	701a      	strb	r2, [r3, #0]
								myDUTY.joint.trajectory[i].scurve.Tf = command.time_total;
 8005284:	f897 20dd 	ldrb.w	r2, [r7, #221]	; 0xdd
 8005288:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 800528c:	499a      	ldr	r1, [pc, #616]	; (80054f8 <scaraInitDuty+0xf70>)
 800528e:	f44f 70ac 	mov.w	r0, #344	; 0x158
 8005292:	fb00 f202 	mul.w	r2, r0, r2
 8005296:	440a      	add	r2, r1
 8005298:	f502 6296 	add.w	r2, r2, #1200	; 0x4b0
 800529c:	e9c2 3400 	strd	r3, r4, [r2]
								status2 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve),
 80052a0:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 80052a4:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80052a8:	fb02 f303 	mul.w	r3, r2, r3
 80052ac:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 80052b0:	4a91      	ldr	r2, [pc, #580]	; (80054f8 <scaraInitDuty+0xf70>)
 80052b2:	1898      	adds	r0, r3, r2
 80052b4:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 80052b8:	4a90      	ldr	r2, [pc, #576]	; (80054fc <scaraInitDuty+0xf74>)
 80052ba:	5cd3      	ldrb	r3, [r2, r3]
 80052bc:	ed97 7b86 	vldr	d7, [r7, #536]	; 0x218
 80052c0:	ed97 6b88 	vldr	d6, [r7, #544]	; 0x220
 80052c4:	eeb0 2a46 	vmov.f32	s4, s12
 80052c8:	eef0 2a66 	vmov.f32	s5, s13
 80052cc:	eeb0 1a47 	vmov.f32	s2, s14
 80052d0:	eef0 1a67 	vmov.f32	s3, s15
 80052d4:	2201      	movs	r2, #1
 80052d6:	ed9f 0b84 	vldr	d0, [pc, #528]	; 80054e8 <scaraInitDuty+0xf60>
 80052da:	4619      	mov	r1, r3
 80052dc:	f001 fa74 	bl	80067c8 <scaraInitScurve>
 80052e0:	4603      	mov	r3, r0
 80052e2:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
											joint_taget[i],
											0, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
							}
							myDUTY.time_total = command.time_total;
 80052e6:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 80052ea:	4a83      	ldr	r2, [pc, #524]	; (80054f8 <scaraInitDuty+0xf70>)
 80052ec:	f602 1248 	addw	r2, r2, #2376	; 0x948
 80052f0:	e9c2 3400 	strd	r3, r4, [r2]
						for ( uint8_t i = 0; i < 4; i++) {
 80052f4:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 80052f8:	3301      	adds	r3, #1
 80052fa:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd
 80052fe:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8005302:	2b03      	cmp	r3, #3
 8005304:	f67f af6e 	bls.w	80051e4 <scaraInitDuty+0xc5c>
 8005308:	e08c      	b.n	8005424 <scaraInitDuty+0xe9c>
						}
					// Mode Init Acc
					} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 800530a:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800530e:	2b00      	cmp	r3, #0
 8005310:	f040 8084 	bne.w	800541c <scaraInitDuty+0xe94>
						for ( uint8_t i = 0; i < 4; i++) {
 8005314:	2300      	movs	r3, #0
 8005316:	f887 30dc 	strb.w	r3, [r7, #220]	; 0xdc
 800531a:	e07a      	b.n	8005412 <scaraInitDuty+0xe8a>
							if ( i == command.sub_para_int) {
 800531c:	f897 20dc 	ldrb.w	r2, [r7, #220]	; 0xdc
 8005320:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005324:	429a      	cmp	r2, r3
 8005326:	d140      	bne.n	80053aa <scaraInitDuty+0xe22>
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8005328:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 800532c:	4a72      	ldr	r2, [pc, #456]	; (80054f8 <scaraInitDuty+0xf70>)
 800532e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005332:	fb01 f303 	mul.w	r3, r1, r3
 8005336:	4413      	add	r3, r2
 8005338:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 800533c:	2201      	movs	r2, #1
 800533e:	701a      	strb	r2, [r3, #0]
								status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve),
 8005340:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 8005344:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8005348:	fb02 f303 	mul.w	r3, r2, r3
 800534c:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8005350:	4a69      	ldr	r2, [pc, #420]	; (80054f8 <scaraInitDuty+0xf70>)
 8005352:	1898      	adds	r0, r3, r2
 8005354:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 8005358:	4a68      	ldr	r2, [pc, #416]	; (80054fc <scaraInitDuty+0xf74>)
 800535a:	5cd3      	ldrb	r3, [r2, r3]
 800535c:	ed97 7b86 	vldr	d7, [r7, #536]	; 0x218
 8005360:	ed97 6b88 	vldr	d6, [r7, #544]	; 0x220
 8005364:	eeb0 2a46 	vmov.f32	s4, s12
 8005368:	eef0 2a66 	vmov.f32	s5, s13
 800536c:	eeb0 1a47 	vmov.f32	s2, s14
 8005370:	eef0 1a67 	vmov.f32	s3, s15
 8005374:	2200      	movs	r2, #0
 8005376:	ed97 0b3a 	vldr	d0, [r7, #232]	; 0xe8
 800537a:	4619      	mov	r1, r3
 800537c:	f001 fa24 	bl	80067c8 <scaraInitScurve>
 8005380:	4603      	mov	r3, r0
 8005382:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
											joint_taget[i],
											s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
								myDUTY.time_total = myDUTY.joint.trajectory[i].scurve.Tf;
 8005386:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 800538a:	4a5b      	ldr	r2, [pc, #364]	; (80054f8 <scaraInitDuty+0xf70>)
 800538c:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005390:	fb01 f303 	mul.w	r3, r1, r3
 8005394:	4413      	add	r3, r2
 8005396:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 800539a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800539e:	4a56      	ldr	r2, [pc, #344]	; (80054f8 <scaraInitDuty+0xf70>)
 80053a0:	f602 1248 	addw	r2, r2, #2376	; 0x948
 80053a4:	e9c2 3400 	strd	r3, r4, [r2]
 80053a8:	e02e      	b.n	8005408 <scaraInitDuty+0xe80>
							} else {
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 80053aa:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 80053ae:	4a52      	ldr	r2, [pc, #328]	; (80054f8 <scaraInitDuty+0xf70>)
 80053b0:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80053b4:	fb01 f303 	mul.w	r3, r1, r3
 80053b8:	4413      	add	r3, r2
 80053ba:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 80053be:	2201      	movs	r2, #1
 80053c0:	701a      	strb	r2, [r3, #0]
								status2 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve),
 80053c2:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 80053c6:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80053ca:	fb02 f303 	mul.w	r3, r2, r3
 80053ce:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 80053d2:	4a49      	ldr	r2, [pc, #292]	; (80054f8 <scaraInitDuty+0xf70>)
 80053d4:	1898      	adds	r0, r3, r2
 80053d6:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 80053da:	4a48      	ldr	r2, [pc, #288]	; (80054fc <scaraInitDuty+0xf74>)
 80053dc:	5cd3      	ldrb	r3, [r2, r3]
 80053de:	ed97 7b86 	vldr	d7, [r7, #536]	; 0x218
 80053e2:	ed97 6b88 	vldr	d6, [r7, #544]	; 0x220
 80053e6:	eeb0 2a46 	vmov.f32	s4, s12
 80053ea:	eef0 2a66 	vmov.f32	s5, s13
 80053ee:	eeb0 1a47 	vmov.f32	s2, s14
 80053f2:	eef0 1a67 	vmov.f32	s3, s15
 80053f6:	2200      	movs	r2, #0
 80053f8:	ed9f 0b3b 	vldr	d0, [pc, #236]	; 80054e8 <scaraInitDuty+0xf60>
 80053fc:	4619      	mov	r1, r3
 80053fe:	f001 f9e3 	bl	80067c8 <scaraInitScurve>
 8005402:	4603      	mov	r3, r0
 8005404:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
						for ( uint8_t i = 0; i < 4; i++) {
 8005408:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 800540c:	3301      	adds	r3, #1
 800540e:	f887 30dc 	strb.w	r3, [r7, #220]	; 0xdc
 8005412:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 8005416:	2b03      	cmp	r3, #3
 8005418:	d980      	bls.n	800531c <scaraInitDuty+0xd94>
 800541a:	e003      	b.n	8005424 <scaraInitDuty+0xe9c>
											0, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
							}
						}

					} else {
						return SCARA_STATUS_ERROR_MODE_INIT;
 800541c:	2308      	movs	r3, #8
 800541e:	e397      	b.n	8005b50 <scaraInitDuty+0x15c8>
					}

			} else {
				return SCARA_STATUS_ERROR_TRAJECTORY;
 8005420:	2305      	movs	r3, #5
 8005422:	e395      	b.n	8005b50 <scaraInitDuty+0x15c8>
			}
		// Check Init Status
			if ( SCARA_STATUS_OK != status1) {
 8005424:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8005428:	2b00      	cmp	r3, #0
 800542a:	d002      	beq.n	8005432 <scaraInitDuty+0xeaa>
				return status1;
 800542c:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8005430:	e38e      	b.n	8005b50 <scaraInitDuty+0x15c8>
			}
			if ( SCARA_STATUS_OK != status2) {
 8005432:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8005436:	2b00      	cmp	r3, #0
 8005438:	f000 835c 	beq.w	8005af4 <scaraInitDuty+0x156c>
				return status2;
 800543c:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8005440:	e386      	b.n	8005b50 <scaraInitDuty+0x15c8>
			}

		//----Joint Quadra
		} else if 	( DUTY_JOINT_4DOF == command.joint_type) {
 8005442:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005446:	2b01      	cmp	r3, #1
 8005448:	f040 8350 	bne.w	8005aec <scaraInitDuty+0x1564>
			SCARA_PositionTypeDef	target_point;
			// Change Degree --> Radian
			command.target_point.roll = command.target_point.roll*PI/180.0;
 800544c:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8005450:	a327      	add	r3, pc, #156	; (adr r3, 80054f0 <scaraInitDuty+0xf68>)
 8005452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005456:	f7fb f8df 	bl	8000618 <__aeabi_dmul>
 800545a:	4603      	mov	r3, r0
 800545c:	460c      	mov	r4, r1
 800545e:	4618      	mov	r0, r3
 8005460:	4621      	mov	r1, r4
 8005462:	f04f 0200 	mov.w	r2, #0
 8005466:	4b26      	ldr	r3, [pc, #152]	; (8005500 <scaraInitDuty+0xf78>)
 8005468:	f7fb fa00 	bl	800086c <__aeabi_ddiv>
 800546c:	4603      	mov	r3, r0
 800546e:	460c      	mov	r4, r1
 8005470:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
			// Coordinate
			if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8005474:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8005478:	2b01      	cmp	r3, #1
 800547a:	d145      	bne.n	8005508 <scaraInitDuty+0xf80>
				target_point.x 		= positionCurrent.x + command.target_point.x;
 800547c:	4b21      	ldr	r3, [pc, #132]	; (8005504 <scaraInitDuty+0xf7c>)
 800547e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8005482:	e9d7 345c 	ldrd	r3, r4, [r7, #368]	; 0x170
 8005486:	461a      	mov	r2, r3
 8005488:	4623      	mov	r3, r4
 800548a:	f7fa ff0f 	bl	80002ac <__adddf3>
 800548e:	4603      	mov	r3, r0
 8005490:	460c      	mov	r4, r1
 8005492:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
				target_point.y 		= positionCurrent.y + command.target_point.y;
 8005496:	4b1b      	ldr	r3, [pc, #108]	; (8005504 <scaraInitDuty+0xf7c>)
 8005498:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800549c:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 80054a0:	461a      	mov	r2, r3
 80054a2:	4623      	mov	r3, r4
 80054a4:	f7fa ff02 	bl	80002ac <__adddf3>
 80054a8:	4603      	mov	r3, r0
 80054aa:	460c      	mov	r4, r1
 80054ac:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
				target_point.z 		= positionCurrent.z + command.target_point.z;
 80054b0:	4b14      	ldr	r3, [pc, #80]	; (8005504 <scaraInitDuty+0xf7c>)
 80054b2:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80054b6:	e9d7 3460 	ldrd	r3, r4, [r7, #384]	; 0x180
 80054ba:	461a      	mov	r2, r3
 80054bc:	4623      	mov	r3, r4
 80054be:	f7fa fef5 	bl	80002ac <__adddf3>
 80054c2:	4603      	mov	r3, r0
 80054c4:	460c      	mov	r4, r1
 80054c6:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
				target_point.roll	= positionCurrent.roll + command.target_point.roll;
 80054ca:	4b0e      	ldr	r3, [pc, #56]	; (8005504 <scaraInitDuty+0xf7c>)
 80054cc:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80054d0:	e9d7 3462 	ldrd	r3, r4, [r7, #392]	; 0x188
 80054d4:	461a      	mov	r2, r3
 80054d6:	4623      	mov	r3, r4
 80054d8:	f7fa fee8 	bl	80002ac <__adddf3>
 80054dc:	4603      	mov	r3, r0
 80054de:	460c      	mov	r4, r1
 80054e0:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
 80054e4:	e027      	b.n	8005536 <scaraInitDuty+0xfae>
 80054e6:	bf00      	nop
	...
 80054f0:	60000000 	.word	0x60000000
 80054f4:	400921fb 	.word	0x400921fb
 80054f8:	200053a0 	.word	0x200053a0
 80054fc:	20000c7c 	.word	0x20000c7c
 8005500:	40668000 	.word	0x40668000
 8005504:	20005d58 	.word	0x20005d58
			} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8005508:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 800550c:	2b00      	cmp	r3, #0
 800550e:	d110      	bne.n	8005532 <scaraInitDuty+0xfaa>
				target_point.x 		= command.target_point.x;
 8005510:	e9d7 345c 	ldrd	r3, r4, [r7, #368]	; 0x170
 8005514:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
				target_point.y 		= command.target_point.y;
 8005518:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 800551c:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
				target_point.z 		= command.target_point.z;
 8005520:	e9d7 3460 	ldrd	r3, r4, [r7, #384]	; 0x180
 8005524:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
				target_point.roll	= command.target_point.roll;
 8005528:	e9d7 3462 	ldrd	r3, r4, [r7, #392]	; 0x188
 800552c:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
 8005530:	e001      	b.n	8005536 <scaraInitDuty+0xfae>
			} else {
				return SCARA_STATUS_ERROR_COORDINATE;
 8005532:	230c      	movs	r3, #12
 8005534:	e30c      	b.n	8005b50 <scaraInitDuty+0x15c8>
			}

			if( FALSE == kinematicInverse(&target_point, positionCurrent)) {
 8005536:	4cce      	ldr	r4, [pc, #824]	; (8005870 <scaraInitDuty+0x12e8>)
 8005538:	f107 0568 	add.w	r5, r7, #104	; 0x68
 800553c:	4668      	mov	r0, sp
 800553e:	f104 0308 	add.w	r3, r4, #8
 8005542:	2260      	movs	r2, #96	; 0x60
 8005544:	4619      	mov	r1, r3
 8005546:	f00e fb8b 	bl	8013c60 <memcpy>
 800554a:	e894 000c 	ldmia.w	r4, {r2, r3}
 800554e:	4628      	mov	r0, r5
 8005550:	f7fd fd7a 	bl	8003048 <kinematicInverse>
 8005554:	4603      	mov	r3, r0
 8005556:	2b00      	cmp	r3, #0
 8005558:	d101      	bne.n	800555e <scaraInitDuty+0xfd6>
				return SCARA_STATUS_ERROR_OVER_WORKSPACE;// Exit with error
 800555a:	2307      	movs	r3, #7
 800555c:	e2f8      	b.n	8005b50 <scaraInitDuty+0x15c8>
			}
			// Trajectory 4 profile
			double q[4];
			q[0] = target_point.Theta1 - positionCurrent.Theta1;
 800555e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005562:	4bc3      	ldr	r3, [pc, #780]	; (8005870 <scaraInitDuty+0x12e8>)
 8005564:	e9d3 3412 	ldrd	r3, r4, [r3, #72]	; 0x48
 8005568:	461a      	mov	r2, r3
 800556a:	4623      	mov	r3, r4
 800556c:	f7fa fe9c 	bl	80002a8 <__aeabi_dsub>
 8005570:	4603      	mov	r3, r0
 8005572:	460c      	mov	r4, r1
 8005574:	463a      	mov	r2, r7
 8005576:	e9c2 3400 	strd	r3, r4, [r2]
			q[1] = target_point.Theta2 - positionCurrent.Theta2;
 800557a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800557e:	4bbc      	ldr	r3, [pc, #752]	; (8005870 <scaraInitDuty+0x12e8>)
 8005580:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 8005584:	461a      	mov	r2, r3
 8005586:	4623      	mov	r3, r4
 8005588:	f7fa fe8e 	bl	80002a8 <__aeabi_dsub>
 800558c:	4603      	mov	r3, r0
 800558e:	460c      	mov	r4, r1
 8005590:	463a      	mov	r2, r7
 8005592:	e9c2 3402 	strd	r3, r4, [r2, #8]
			q[2] = target_point.D3 	   - positionCurrent.D3;
 8005596:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800559a:	4bb5      	ldr	r3, [pc, #724]	; (8005870 <scaraInitDuty+0x12e8>)
 800559c:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 80055a0:	461a      	mov	r2, r3
 80055a2:	4623      	mov	r3, r4
 80055a4:	f7fa fe80 	bl	80002a8 <__aeabi_dsub>
 80055a8:	4603      	mov	r3, r0
 80055aa:	460c      	mov	r4, r1
 80055ac:	463a      	mov	r2, r7
 80055ae:	e9c2 3404 	strd	r3, r4, [r2, #16]
			q[3] = target_point.Theta4 - positionCurrent.Theta4;
 80055b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80055b6:	4bae      	ldr	r3, [pc, #696]	; (8005870 <scaraInitDuty+0x12e8>)
 80055b8:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 80055bc:	461a      	mov	r2, r3
 80055be:	4623      	mov	r3, r4
 80055c0:	f7fa fe72 	bl	80002a8 <__aeabi_dsub>
 80055c4:	4603      	mov	r3, r0
 80055c6:	460c      	mov	r4, r1
 80055c8:	463a      	mov	r2, r7
 80055ca:	e9c2 3406 	strd	r3, r4, [r2, #24]

			// LSPB
			if ( DUTY_TRAJECTORY_LSPB == command.trajec_type) {
 80055ce:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	f040 813e 	bne.w	8005854 <scaraInitDuty+0x12cc>
				// Mode Init Time
				if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 80055d8:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d159      	bne.n	8005694 <scaraInitDuty+0x110c>
					for ( uint8_t i = 0; i < 4; i++) {
 80055e0:	2300      	movs	r3, #0
 80055e2:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
 80055e6:	e049      	b.n	800567c <scaraInitDuty+0x10f4>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 80055e8:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80055ec:	4aa1      	ldr	r2, [pc, #644]	; (8005874 <scaraInitDuty+0x12ec>)
 80055ee:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80055f2:	fb01 f303 	mul.w	r3, r1, r3
 80055f6:	4413      	add	r3, r2
 80055f8:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 80055fc:	2200      	movs	r2, #0
 80055fe:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].lspb.Tf = command.time_total;
 8005600:	f897 20db 	ldrb.w	r2, [r7, #219]	; 0xdb
 8005604:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8005608:	499a      	ldr	r1, [pc, #616]	; (8005874 <scaraInitDuty+0x12ec>)
 800560a:	f44f 70ac 	mov.w	r0, #344	; 0x158
 800560e:	fb00 f202 	mul.w	r2, r0, r2
 8005612:	440a      	add	r2, r1
 8005614:	f502 6284 	add.w	r2, r2, #1056	; 0x420
 8005618:	e9c2 3400 	strd	r3, r4, [r2]
						status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 800561c:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8005620:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8005624:	fb02 f303 	mul.w	r3, r2, r3
 8005628:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 800562c:	4a91      	ldr	r2, [pc, #580]	; (8005874 <scaraInitDuty+0x12ec>)
 800562e:	1898      	adds	r0, r3, r2
 8005630:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8005634:	4a90      	ldr	r2, [pc, #576]	; (8005878 <scaraInitDuty+0x12f0>)
 8005636:	5cd1      	ldrb	r1, [r2, r3]
 8005638:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800563c:	463a      	mov	r2, r7
 800563e:	00db      	lsls	r3, r3, #3
 8005640:	4413      	add	r3, r2
 8005642:	ed93 7b00 	vldr	d7, [r3]
 8005646:	ed97 6b86 	vldr	d6, [r7, #536]	; 0x218
 800564a:	ed97 5b88 	vldr	d5, [r7, #544]	; 0x220
 800564e:	eeb0 2a45 	vmov.f32	s4, s10
 8005652:	eef0 2a65 	vmov.f32	s5, s11
 8005656:	eeb0 1a46 	vmov.f32	s2, s12
 800565a:	eef0 1a66 	vmov.f32	s3, s13
 800565e:	2201      	movs	r2, #1
 8005660:	eeb0 0a47 	vmov.f32	s0, s14
 8005664:	eef0 0a67 	vmov.f32	s1, s15
 8005668:	f000 fcc2 	bl	8005ff0 <scaraInitLSPB>
 800566c:	4603      	mov	r3, r0
 800566e:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
					for ( uint8_t i = 0; i < 4; i++) {
 8005672:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8005676:	3301      	adds	r3, #1
 8005678:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
 800567c:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8005680:	2b03      	cmp	r3, #3
 8005682:	d9b1      	bls.n	80055e8 <scaraInitDuty+0x1060>
											q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);

					}
					myDUTY.time_total = command.time_total;
 8005684:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8005688:	4a7a      	ldr	r2, [pc, #488]	; (8005874 <scaraInitDuty+0x12ec>)
 800568a:	f602 1248 	addw	r2, r2, #2376	; 0x948
 800568e:	e9c2 3400 	strd	r3, r4, [r2]
 8005692:	e22f      	b.n	8005af4 <scaraInitDuty+0x156c>
				// Mode Init Acc
				} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8005694:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8005698:	2b00      	cmp	r3, #0
 800569a:	f040 80d9 	bne.w	8005850 <scaraInitDuty+0x12c8>
					for ( uint8_t i = 0; i < 4; i++) {
 800569e:	2300      	movs	r3, #0
 80056a0:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
 80056a4:	e03b      	b.n	800571e <scaraInitDuty+0x1196>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 80056a6:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
 80056aa:	4a72      	ldr	r2, [pc, #456]	; (8005874 <scaraInitDuty+0x12ec>)
 80056ac:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80056b0:	fb01 f303 	mul.w	r3, r1, r3
 80056b4:	4413      	add	r3, r2
 80056b6:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 80056ba:	2200      	movs	r2, #0
 80056bc:	701a      	strb	r2, [r3, #0]
						status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 80056be:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
 80056c2:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80056c6:	fb02 f303 	mul.w	r3, r2, r3
 80056ca:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 80056ce:	4a69      	ldr	r2, [pc, #420]	; (8005874 <scaraInitDuty+0x12ec>)
 80056d0:	1898      	adds	r0, r3, r2
 80056d2:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
 80056d6:	4a68      	ldr	r2, [pc, #416]	; (8005878 <scaraInitDuty+0x12f0>)
 80056d8:	5cd1      	ldrb	r1, [r2, r3]
 80056da:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
 80056de:	463a      	mov	r2, r7
 80056e0:	00db      	lsls	r3, r3, #3
 80056e2:	4413      	add	r3, r2
 80056e4:	ed93 7b00 	vldr	d7, [r3]
 80056e8:	ed97 6b86 	vldr	d6, [r7, #536]	; 0x218
 80056ec:	ed97 5b88 	vldr	d5, [r7, #544]	; 0x220
 80056f0:	eeb0 2a45 	vmov.f32	s4, s10
 80056f4:	eef0 2a65 	vmov.f32	s5, s11
 80056f8:	eeb0 1a46 	vmov.f32	s2, s12
 80056fc:	eef0 1a66 	vmov.f32	s3, s13
 8005700:	2200      	movs	r2, #0
 8005702:	eeb0 0a47 	vmov.f32	s0, s14
 8005706:	eef0 0a67 	vmov.f32	s1, s15
 800570a:	f000 fc71 	bl	8005ff0 <scaraInitLSPB>
 800570e:	4603      	mov	r3, r0
 8005710:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
					for ( uint8_t i = 0; i < 4; i++) {
 8005714:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
 8005718:	3301      	adds	r3, #1
 800571a:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
 800571e:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
 8005722:	2b03      	cmp	r3, #3
 8005724:	d9bf      	bls.n	80056a6 <scaraInitDuty+0x111e>
											q[i], DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
					}
					myDUTY.time_total = 0;
 8005726:	4b53      	ldr	r3, [pc, #332]	; (8005874 <scaraInitDuty+0x12ec>)
 8005728:	f603 1248 	addw	r2, r3, #2376	; 0x948
 800572c:	f04f 0300 	mov.w	r3, #0
 8005730:	f04f 0400 	mov.w	r4, #0
 8005734:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 8005738:	2300      	movs	r3, #0
 800573a:	f887 30d9 	strb.w	r3, [r7, #217]	; 0xd9
 800573e:	e02d      	b.n	800579c <scaraInitDuty+0x1214>
						if ( myDUTY.joint.trajectory[i].lspb.Tf > myDUTY.time_total) {
 8005740:	f897 30d9 	ldrb.w	r3, [r7, #217]	; 0xd9
 8005744:	4a4b      	ldr	r2, [pc, #300]	; (8005874 <scaraInitDuty+0x12ec>)
 8005746:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800574a:	fb01 f303 	mul.w	r3, r1, r3
 800574e:	4413      	add	r3, r2
 8005750:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8005754:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005758:	4b46      	ldr	r3, [pc, #280]	; (8005874 <scaraInitDuty+0x12ec>)
 800575a:	f603 1348 	addw	r3, r3, #2376	; 0x948
 800575e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005762:	461a      	mov	r2, r3
 8005764:	4623      	mov	r3, r4
 8005766:	f7fb f9e7 	bl	8000b38 <__aeabi_dcmpgt>
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d010      	beq.n	8005792 <scaraInitDuty+0x120a>
							myDUTY.time_total = myDUTY.joint.trajectory[i].lspb.Tf;
 8005770:	f897 30d9 	ldrb.w	r3, [r7, #217]	; 0xd9
 8005774:	4a3f      	ldr	r2, [pc, #252]	; (8005874 <scaraInitDuty+0x12ec>)
 8005776:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800577a:	fb01 f303 	mul.w	r3, r1, r3
 800577e:	4413      	add	r3, r2
 8005780:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8005784:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005788:	4a3a      	ldr	r2, [pc, #232]	; (8005874 <scaraInitDuty+0x12ec>)
 800578a:	f602 1248 	addw	r2, r2, #2376	; 0x948
 800578e:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 8005792:	f897 30d9 	ldrb.w	r3, [r7, #217]	; 0xd9
 8005796:	3301      	adds	r3, #1
 8005798:	f887 30d9 	strb.w	r3, [r7, #217]	; 0xd9
 800579c:	f897 30d9 	ldrb.w	r3, [r7, #217]	; 0xd9
 80057a0:	2b03      	cmp	r3, #3
 80057a2:	d9cd      	bls.n	8005740 <scaraInitDuty+0x11b8>
						}
					}
					for ( uint8_t i = 0; i < 4; i++) {
 80057a4:	2300      	movs	r3, #0
 80057a6:	f887 30d8 	strb.w	r3, [r7, #216]	; 0xd8
 80057aa:	e04c      	b.n	8005846 <scaraInitDuty+0x12be>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 80057ac:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
 80057b0:	4a30      	ldr	r2, [pc, #192]	; (8005874 <scaraInitDuty+0x12ec>)
 80057b2:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80057b6:	fb01 f303 	mul.w	r3, r1, r3
 80057ba:	4413      	add	r3, r2
 80057bc:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 80057c0:	2200      	movs	r2, #0
 80057c2:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].lspb.Tf = myDUTY.time_total;
 80057c4:	f897 20d8 	ldrb.w	r2, [r7, #216]	; 0xd8
 80057c8:	4b2a      	ldr	r3, [pc, #168]	; (8005874 <scaraInitDuty+0x12ec>)
 80057ca:	f603 1348 	addw	r3, r3, #2376	; 0x948
 80057ce:	e9d3 3400 	ldrd	r3, r4, [r3]
 80057d2:	4928      	ldr	r1, [pc, #160]	; (8005874 <scaraInitDuty+0x12ec>)
 80057d4:	f44f 70ac 	mov.w	r0, #344	; 0x158
 80057d8:	fb00 f202 	mul.w	r2, r0, r2
 80057dc:	440a      	add	r2, r1
 80057de:	f502 6284 	add.w	r2, r2, #1056	; 0x420
 80057e2:	e9c2 3400 	strd	r3, r4, [r2]
						status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 80057e6:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
 80057ea:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80057ee:	fb02 f303 	mul.w	r3, r2, r3
 80057f2:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 80057f6:	4a1f      	ldr	r2, [pc, #124]	; (8005874 <scaraInitDuty+0x12ec>)
 80057f8:	1898      	adds	r0, r3, r2
 80057fa:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
 80057fe:	4a1e      	ldr	r2, [pc, #120]	; (8005878 <scaraInitDuty+0x12f0>)
 8005800:	5cd1      	ldrb	r1, [r2, r3]
 8005802:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
 8005806:	463a      	mov	r2, r7
 8005808:	00db      	lsls	r3, r3, #3
 800580a:	4413      	add	r3, r2
 800580c:	ed93 7b00 	vldr	d7, [r3]
 8005810:	ed97 6b86 	vldr	d6, [r7, #536]	; 0x218
 8005814:	ed97 5b88 	vldr	d5, [r7, #544]	; 0x220
 8005818:	eeb0 2a45 	vmov.f32	s4, s10
 800581c:	eef0 2a65 	vmov.f32	s5, s11
 8005820:	eeb0 1a46 	vmov.f32	s2, s12
 8005824:	eef0 1a66 	vmov.f32	s3, s13
 8005828:	2201      	movs	r2, #1
 800582a:	eeb0 0a47 	vmov.f32	s0, s14
 800582e:	eef0 0a67 	vmov.f32	s1, s15
 8005832:	f000 fbdd 	bl	8005ff0 <scaraInitLSPB>
 8005836:	4603      	mov	r3, r0
 8005838:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
					for ( uint8_t i = 0; i < 4; i++) {
 800583c:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
 8005840:	3301      	adds	r3, #1
 8005842:	f887 30d8 	strb.w	r3, [r7, #216]	; 0xd8
 8005846:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
 800584a:	2b03      	cmp	r3, #3
 800584c:	d9ae      	bls.n	80057ac <scaraInitDuty+0x1224>
 800584e:	e151      	b.n	8005af4 <scaraInitDuty+0x156c>
											q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					}

				} else {
					return SCARA_STATUS_ERROR_MODE_INIT;
 8005850:	2308      	movs	r3, #8
 8005852:	e17d      	b.n	8005b50 <scaraInitDuty+0x15c8>
				}
				// SCURVE
			} else if ( DUTY_TRAJECTORY_SCURVE == command.trajec_type) {
 8005854:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8005858:	2b01      	cmp	r3, #1
 800585a:	f040 8145 	bne.w	8005ae8 <scaraInitDuty+0x1560>
				// Mode Init Time
				if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 800585e:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8005862:	2b01      	cmp	r3, #1
 8005864:	d160      	bne.n	8005928 <scaraInitDuty+0x13a0>
					for ( uint8_t i = 0; i < 4; i++) {
 8005866:	2300      	movs	r3, #0
 8005868:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800586c:	e050      	b.n	8005910 <scaraInitDuty+0x1388>
 800586e:	bf00      	nop
 8005870:	20005d58 	.word	0x20005d58
 8005874:	200053a0 	.word	0x200053a0
 8005878:	20000c7c 	.word	0x20000c7c
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 800587c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8005880:	4ab7      	ldr	r2, [pc, #732]	; (8005b60 <scaraInitDuty+0x15d8>)
 8005882:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005886:	fb01 f303 	mul.w	r3, r1, r3
 800588a:	4413      	add	r3, r2
 800588c:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8005890:	2201      	movs	r2, #1
 8005892:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].scurve.Tf = command.time_total;
 8005894:	f897 20d7 	ldrb.w	r2, [r7, #215]	; 0xd7
 8005898:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 800589c:	49b0      	ldr	r1, [pc, #704]	; (8005b60 <scaraInitDuty+0x15d8>)
 800589e:	f44f 70ac 	mov.w	r0, #344	; 0x158
 80058a2:	fb00 f202 	mul.w	r2, r0, r2
 80058a6:	440a      	add	r2, r1
 80058a8:	f502 6296 	add.w	r2, r2, #1200	; 0x4b0
 80058ac:	e9c2 3400 	strd	r3, r4, [r2]
						status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 80058b0:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80058b4:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80058b8:	fb02 f303 	mul.w	r3, r2, r3
 80058bc:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 80058c0:	4aa7      	ldr	r2, [pc, #668]	; (8005b60 <scaraInitDuty+0x15d8>)
 80058c2:	1898      	adds	r0, r3, r2
 80058c4:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80058c8:	4aa6      	ldr	r2, [pc, #664]	; (8005b64 <scaraInitDuty+0x15dc>)
 80058ca:	5cd1      	ldrb	r1, [r2, r3]
 80058cc:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80058d0:	463a      	mov	r2, r7
 80058d2:	00db      	lsls	r3, r3, #3
 80058d4:	4413      	add	r3, r2
 80058d6:	ed93 7b00 	vldr	d7, [r3]
 80058da:	ed97 6b86 	vldr	d6, [r7, #536]	; 0x218
 80058de:	ed97 5b88 	vldr	d5, [r7, #544]	; 0x220
 80058e2:	eeb0 2a45 	vmov.f32	s4, s10
 80058e6:	eef0 2a65 	vmov.f32	s5, s11
 80058ea:	eeb0 1a46 	vmov.f32	s2, s12
 80058ee:	eef0 1a66 	vmov.f32	s3, s13
 80058f2:	2201      	movs	r2, #1
 80058f4:	eeb0 0a47 	vmov.f32	s0, s14
 80058f8:	eef0 0a67 	vmov.f32	s1, s15
 80058fc:	f000 ff64 	bl	80067c8 <scaraInitScurve>
 8005900:	4603      	mov	r3, r0
 8005902:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
					for ( uint8_t i = 0; i < 4; i++) {
 8005906:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 800590a:	3301      	adds	r3, #1
 800590c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8005910:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8005914:	2b03      	cmp	r3, #3
 8005916:	d9b1      	bls.n	800587c <scaraInitDuty+0x12f4>
											q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);

					}
					myDUTY.time_total = command.time_total;
 8005918:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 800591c:	4a90      	ldr	r2, [pc, #576]	; (8005b60 <scaraInitDuty+0x15d8>)
 800591e:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8005922:	e9c2 3400 	strd	r3, r4, [r2]
 8005926:	e0e5      	b.n	8005af4 <scaraInitDuty+0x156c>
				// Mode Init Acc
				} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8005928:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800592c:	2b00      	cmp	r3, #0
 800592e:	f040 80d9 	bne.w	8005ae4 <scaraInitDuty+0x155c>
					for ( uint8_t i = 0; i < 4; i++) {
 8005932:	2300      	movs	r3, #0
 8005934:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
 8005938:	e03b      	b.n	80059b2 <scaraInitDuty+0x142a>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 800593a:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 800593e:	4a88      	ldr	r2, [pc, #544]	; (8005b60 <scaraInitDuty+0x15d8>)
 8005940:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005944:	fb01 f303 	mul.w	r3, r1, r3
 8005948:	4413      	add	r3, r2
 800594a:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 800594e:	2201      	movs	r2, #1
 8005950:	701a      	strb	r2, [r3, #0]
						status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 8005952:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 8005956:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800595a:	fb02 f303 	mul.w	r3, r2, r3
 800595e:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8005962:	4a7f      	ldr	r2, [pc, #508]	; (8005b60 <scaraInitDuty+0x15d8>)
 8005964:	1898      	adds	r0, r3, r2
 8005966:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 800596a:	4a7e      	ldr	r2, [pc, #504]	; (8005b64 <scaraInitDuty+0x15dc>)
 800596c:	5cd1      	ldrb	r1, [r2, r3]
 800596e:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 8005972:	463a      	mov	r2, r7
 8005974:	00db      	lsls	r3, r3, #3
 8005976:	4413      	add	r3, r2
 8005978:	ed93 7b00 	vldr	d7, [r3]
 800597c:	ed97 6b86 	vldr	d6, [r7, #536]	; 0x218
 8005980:	ed97 5b88 	vldr	d5, [r7, #544]	; 0x220
 8005984:	eeb0 2a45 	vmov.f32	s4, s10
 8005988:	eef0 2a65 	vmov.f32	s5, s11
 800598c:	eeb0 1a46 	vmov.f32	s2, s12
 8005990:	eef0 1a66 	vmov.f32	s3, s13
 8005994:	2200      	movs	r2, #0
 8005996:	eeb0 0a47 	vmov.f32	s0, s14
 800599a:	eef0 0a67 	vmov.f32	s1, s15
 800599e:	f000 ff13 	bl	80067c8 <scaraInitScurve>
 80059a2:	4603      	mov	r3, r0
 80059a4:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
					for ( uint8_t i = 0; i < 4; i++) {
 80059a8:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 80059ac:	3301      	adds	r3, #1
 80059ae:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
 80059b2:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 80059b6:	2b03      	cmp	r3, #3
 80059b8:	d9bf      	bls.n	800593a <scaraInitDuty+0x13b2>
											q[i], DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
					}
					myDUTY.time_total = 0;
 80059ba:	4b69      	ldr	r3, [pc, #420]	; (8005b60 <scaraInitDuty+0x15d8>)
 80059bc:	f603 1248 	addw	r2, r3, #2376	; 0x948
 80059c0:	f04f 0300 	mov.w	r3, #0
 80059c4:	f04f 0400 	mov.w	r4, #0
 80059c8:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 80059cc:	2300      	movs	r3, #0
 80059ce:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
 80059d2:	e02d      	b.n	8005a30 <scaraInitDuty+0x14a8>
						if ( myDUTY.joint.trajectory[i].scurve.Tf > myDUTY.time_total) {
 80059d4:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 80059d8:	4a61      	ldr	r2, [pc, #388]	; (8005b60 <scaraInitDuty+0x15d8>)
 80059da:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80059de:	fb01 f303 	mul.w	r3, r1, r3
 80059e2:	4413      	add	r3, r2
 80059e4:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 80059e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80059ec:	4b5c      	ldr	r3, [pc, #368]	; (8005b60 <scaraInitDuty+0x15d8>)
 80059ee:	f603 1348 	addw	r3, r3, #2376	; 0x948
 80059f2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80059f6:	461a      	mov	r2, r3
 80059f8:	4623      	mov	r3, r4
 80059fa:	f7fb f89d 	bl	8000b38 <__aeabi_dcmpgt>
 80059fe:	4603      	mov	r3, r0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d010      	beq.n	8005a26 <scaraInitDuty+0x149e>
							myDUTY.time_total = myDUTY.joint.trajectory[i].scurve.Tf;
 8005a04:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 8005a08:	4a55      	ldr	r2, [pc, #340]	; (8005b60 <scaraInitDuty+0x15d8>)
 8005a0a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005a0e:	fb01 f303 	mul.w	r3, r1, r3
 8005a12:	4413      	add	r3, r2
 8005a14:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8005a18:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005a1c:	4a50      	ldr	r2, [pc, #320]	; (8005b60 <scaraInitDuty+0x15d8>)
 8005a1e:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8005a22:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 8005a26:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
 8005a30:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 8005a34:	2b03      	cmp	r3, #3
 8005a36:	d9cd      	bls.n	80059d4 <scaraInitDuty+0x144c>
						}
					}
					for ( uint8_t i = 0; i < 4; i++) {
 8005a38:	2300      	movs	r3, #0
 8005a3a:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4
 8005a3e:	e04c      	b.n	8005ada <scaraInitDuty+0x1552>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8005a40:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 8005a44:	4a46      	ldr	r2, [pc, #280]	; (8005b60 <scaraInitDuty+0x15d8>)
 8005a46:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005a4a:	fb01 f303 	mul.w	r3, r1, r3
 8005a4e:	4413      	add	r3, r2
 8005a50:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8005a54:	2201      	movs	r2, #1
 8005a56:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].scurve.Tf = myDUTY.time_total;
 8005a58:	f897 20d4 	ldrb.w	r2, [r7, #212]	; 0xd4
 8005a5c:	4b40      	ldr	r3, [pc, #256]	; (8005b60 <scaraInitDuty+0x15d8>)
 8005a5e:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8005a62:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005a66:	493e      	ldr	r1, [pc, #248]	; (8005b60 <scaraInitDuty+0x15d8>)
 8005a68:	f44f 70ac 	mov.w	r0, #344	; 0x158
 8005a6c:	fb00 f202 	mul.w	r2, r0, r2
 8005a70:	440a      	add	r2, r1
 8005a72:	f502 6296 	add.w	r2, r2, #1200	; 0x4b0
 8005a76:	e9c2 3400 	strd	r3, r4, [r2]
						status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 8005a7a:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 8005a7e:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8005a82:	fb02 f303 	mul.w	r3, r2, r3
 8005a86:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8005a8a:	4a35      	ldr	r2, [pc, #212]	; (8005b60 <scaraInitDuty+0x15d8>)
 8005a8c:	1898      	adds	r0, r3, r2
 8005a8e:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 8005a92:	4a34      	ldr	r2, [pc, #208]	; (8005b64 <scaraInitDuty+0x15dc>)
 8005a94:	5cd1      	ldrb	r1, [r2, r3]
 8005a96:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 8005a9a:	463a      	mov	r2, r7
 8005a9c:	00db      	lsls	r3, r3, #3
 8005a9e:	4413      	add	r3, r2
 8005aa0:	ed93 7b00 	vldr	d7, [r3]
 8005aa4:	ed97 6b86 	vldr	d6, [r7, #536]	; 0x218
 8005aa8:	ed97 5b88 	vldr	d5, [r7, #544]	; 0x220
 8005aac:	eeb0 2a45 	vmov.f32	s4, s10
 8005ab0:	eef0 2a65 	vmov.f32	s5, s11
 8005ab4:	eeb0 1a46 	vmov.f32	s2, s12
 8005ab8:	eef0 1a66 	vmov.f32	s3, s13
 8005abc:	2201      	movs	r2, #1
 8005abe:	eeb0 0a47 	vmov.f32	s0, s14
 8005ac2:	eef0 0a67 	vmov.f32	s1, s15
 8005ac6:	f000 fe7f 	bl	80067c8 <scaraInitScurve>
 8005aca:	4603      	mov	r3, r0
 8005acc:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
					for ( uint8_t i = 0; i < 4; i++) {
 8005ad0:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4
 8005ada:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 8005ade:	2b03      	cmp	r3, #3
 8005ae0:	d9ae      	bls.n	8005a40 <scaraInitDuty+0x14b8>
 8005ae2:	e007      	b.n	8005af4 <scaraInitDuty+0x156c>
											q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					}

				} else {
					return SCARA_STATUS_ERROR_MODE_INIT;
 8005ae4:	2308      	movs	r3, #8
 8005ae6:	e033      	b.n	8005b50 <scaraInitDuty+0x15c8>
				}

			} else {
				return SCARA_STATUS_ERROR_TRAJECTORY;
 8005ae8:	2305      	movs	r3, #5
 8005aea:	e031      	b.n	8005b50 <scaraInitDuty+0x15c8>
			}

		} else {
			return SCARA_STATUS_ERROR_JOINT;
 8005aec:	2304      	movs	r3, #4
 8005aee:	e02f      	b.n	8005b50 <scaraInitDuty+0x15c8>
		}

	} else {
		return SCARA_STATUS_ERROR_SPACE;
 8005af0:	2302      	movs	r3, #2
 8005af2:	e02d      	b.n	8005b50 <scaraInitDuty+0x15c8>
	}

	// Reset time and distance
	positionCurrent.t = 0;
 8005af4:	4a1c      	ldr	r2, [pc, #112]	; (8005b68 <scaraInitDuty+0x15e0>)
 8005af6:	f04f 0300 	mov.w	r3, #0
 8005afa:	f04f 0400 	mov.w	r4, #0
 8005afe:	e9c2 3406 	strd	r3, r4, [r2, #24]
	positionCurrent.total_time = myDUTY.time_total;
 8005b02:	4b17      	ldr	r3, [pc, #92]	; (8005b60 <scaraInitDuty+0x15d8>)
 8005b04:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8005b08:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005b0c:	4a16      	ldr	r2, [pc, #88]	; (8005b68 <scaraInitDuty+0x15e0>)
 8005b0e:	e9c2 3408 	strd	r3, r4, [r2, #32]
	positionNext.t = 0;
 8005b12:	4a16      	ldr	r2, [pc, #88]	; (8005b6c <scaraInitDuty+0x15e4>)
 8005b14:	f04f 0300 	mov.w	r3, #0
 8005b18:	f04f 0400 	mov.w	r4, #0
 8005b1c:	e9c2 3406 	strd	r3, r4, [r2, #24]
	positionNext.total_time = myDUTY.time_total;
 8005b20:	4b0f      	ldr	r3, [pc, #60]	; (8005b60 <scaraInitDuty+0x15d8>)
 8005b22:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8005b26:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005b2a:	4a10      	ldr	r2, [pc, #64]	; (8005b6c <scaraInitDuty+0x15e4>)
 8005b2c:	e9c2 3408 	strd	r3, r4, [r2, #32]
	positionTrue.t = 0;
 8005b30:	4a0f      	ldr	r2, [pc, #60]	; (8005b70 <scaraInitDuty+0x15e8>)
 8005b32:	f04f 0300 	mov.w	r3, #0
 8005b36:	f04f 0400 	mov.w	r4, #0
 8005b3a:	e9c2 3406 	strd	r3, r4, [r2, #24]
	positionTrue.total_time = myDUTY.time_total;
 8005b3e:	4b08      	ldr	r3, [pc, #32]	; (8005b60 <scaraInitDuty+0x15d8>)
 8005b40:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8005b44:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005b48:	4a09      	ldr	r2, [pc, #36]	; (8005b70 <scaraInitDuty+0x15e8>)
 8005b4a:	e9c2 3408 	strd	r3, r4, [r2, #32]

	return SCARA_STATUS_OK;
 8005b4e:	2300      	movs	r3, #0
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8005b56:	46bd      	mov	sp, r7
 8005b58:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8005b5c:	b004      	add	sp, #16
 8005b5e:	4770      	bx	lr
 8005b60:	200053a0 	.word	0x200053a0
 8005b64:	20000c7c 	.word	0x20000c7c
 8005b68:	20005d58 	.word	0x20005d58
 8005b6c:	20005e28 	.word	0x20005e28
 8005b70:	20005dc0 	.word	0x20005dc0

08005b74 <scaraInitLine>:

/* Compute straight line path parameters */
SCARA_StatusTypeDef	scaraInitLine		(Path_Line_TypeDef *line,
										SCARA_PositionTypeDef start,
										SCARA_PositionTypeDef end) {
 8005b74:	b082      	sub	sp, #8
 8005b76:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b78:	b09b      	sub	sp, #108	; 0x6c
 8005b7a:	af18      	add	r7, sp, #96	; 0x60
 8005b7c:	6078      	str	r0, [r7, #4]
 8005b7e:	f107 0120 	add.w	r1, r7, #32
 8005b82:	e881 000c 	stmia.w	r1, {r2, r3}
	// Check limit workspace
	if ( FALSE ==  kinematicInverse(&end, start)) {
 8005b86:	f107 0488 	add.w	r4, r7, #136	; 0x88
 8005b8a:	4668      	mov	r0, sp
 8005b8c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b90:	2260      	movs	r2, #96	; 0x60
 8005b92:	4619      	mov	r1, r3
 8005b94:	f00e f864 	bl	8013c60 <memcpy>
 8005b98:	f107 0320 	add.w	r3, r7, #32
 8005b9c:	cb0c      	ldmia	r3, {r2, r3}
 8005b9e:	4620      	mov	r0, r4
 8005ba0:	f7fd fa52 	bl	8003048 <kinematicInverse>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d101      	bne.n	8005bae <scaraInitLine+0x3a>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8005baa:	2307      	movs	r3, #7
 8005bac:	e09e      	b.n	8005cec <scaraInitLine+0x178>
	}
	// Init line params
	line->x1 = end.x;
 8005bae:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	e9c2 3402 	strd	r3, r4, [r2, #8]
	line->y1 = end.y;
 8005bb8:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	e9c2 3406 	strd	r3, r4, [r2, #24]
	line->z1 = end.z;
 8005bc2:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	line->x0 = start.x;
 8005bcc:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8005bd0:	687a      	ldr	r2, [r7, #4]
 8005bd2:	e9c2 3400 	strd	r3, r4, [r2]
	line->y0 = start.y;
 8005bd6:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8005bda:	687a      	ldr	r2, [r7, #4]
 8005bdc:	e9c2 3404 	strd	r3, r4, [r2, #16]
	line->z0 = start.z;
 8005be0:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	e9c2 3408 	strd	r3, r4, [r2, #32]
	line->denta_x = end.x  -  start.x;
 8005bea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005bee:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	4623      	mov	r3, r4
 8005bf6:	f7fa fb57 	bl	80002a8 <__aeabi_dsub>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	460c      	mov	r4, r1
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	line->denta_y = end.y  -  start.y;
 8005c04:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8005c08:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	4623      	mov	r3, r4
 8005c10:	f7fa fb4a 	bl	80002a8 <__aeabi_dsub>
 8005c14:	4603      	mov	r3, r0
 8005c16:	460c      	mov	r4, r1
 8005c18:	687a      	ldr	r2, [r7, #4]
 8005c1a:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	line->denta_z = end.z  -  start.z;
 8005c1e:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8005c22:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8005c26:	461a      	mov	r2, r3
 8005c28:	4623      	mov	r3, r4
 8005c2a:	f7fa fb3d 	bl	80002a8 <__aeabi_dsub>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	460c      	mov	r4, r1
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	line->total_s = sqrt((line->denta_x)*(line->denta_x)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8005c44:	461a      	mov	r2, r3
 8005c46:	4623      	mov	r3, r4
 8005c48:	f7fa fce6 	bl	8000618 <__aeabi_dmul>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	460c      	mov	r4, r1
 8005c50:	461d      	mov	r5, r3
 8005c52:	4626      	mov	r6, r4
			       +(line->denta_y)*(line->denta_y)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8005c60:	461a      	mov	r2, r3
 8005c62:	4623      	mov	r3, r4
 8005c64:	f7fa fcd8 	bl	8000618 <__aeabi_dmul>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	460c      	mov	r4, r1
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	4623      	mov	r3, r4
 8005c70:	4628      	mov	r0, r5
 8005c72:	4631      	mov	r1, r6
 8005c74:	f7fa fb1a 	bl	80002ac <__adddf3>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	460c      	mov	r4, r1
 8005c7c:	461d      	mov	r5, r3
 8005c7e:	4626      	mov	r6, r4
				   +(line->denta_z)*(line->denta_z));
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	e9d3 3410 	ldrd	r3, r4, [r3, #64]	; 0x40
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	4623      	mov	r3, r4
 8005c90:	f7fa fcc2 	bl	8000618 <__aeabi_dmul>
 8005c94:	4603      	mov	r3, r0
 8005c96:	460c      	mov	r4, r1
	line->total_s = sqrt((line->denta_x)*(line->denta_x)
 8005c98:	461a      	mov	r2, r3
 8005c9a:	4623      	mov	r3, r4
 8005c9c:	4628      	mov	r0, r5
 8005c9e:	4631      	mov	r1, r6
 8005ca0:	f7fa fb04 	bl	80002ac <__adddf3>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	460c      	mov	r4, r1
 8005ca8:	ec44 3b17 	vmov	d7, r3, r4
 8005cac:	eeb0 0a47 	vmov.f32	s0, s14
 8005cb0:	eef0 0a67 	vmov.f32	s1, s15
 8005cb4:	f012 fb1e 	bl	80182f4 <sqrt>
 8005cb8:	eeb0 7a40 	vmov.f32	s14, s0
 8005cbc:	eef0 7a60 	vmov.f32	s15, s1
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
	line->x_current = line->x0;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	line->y_current = line->y0;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	line->z_current = line->z0;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68

	return SCARA_STATUS_OK;
 8005cea:	2300      	movs	r3, #0
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	370c      	adds	r7, #12
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8005cf6:	b002      	add	sp, #8
 8005cf8:	4770      	bx	lr
 8005cfa:	0000      	movs	r0, r0
 8005cfc:	0000      	movs	r0, r0
	...

08005d00 <scaraInitCircle>:
/* Compute circular path parameters */
SCARA_StatusTypeDef	scaraInitCircle		(Path_Circle_TypeDef *circle,
										SCARA_PositionTypeDef start,
										SCARA_PositionTypeDef end,
										SCARA_PositionTypeDef center,
										int32_t dir){
 8005d00:	b082      	sub	sp, #8
 8005d02:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005d06:	b0ad      	sub	sp, #180	; 0xb4
 8005d08:	af18      	add	r7, sp, #96	; 0x60
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8005d10:	e881 000c 	stmia.w	r1, {r2, r3}
	// Check limit workspace
	if ( FALSE == kinematicInverse(&end, start) ) {
 8005d14:	f107 06d8 	add.w	r6, r7, #216	; 0xd8
 8005d18:	4668      	mov	r0, sp
 8005d1a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005d1e:	2260      	movs	r2, #96	; 0x60
 8005d20:	4619      	mov	r1, r3
 8005d22:	f00d ff9d 	bl	8013c60 <memcpy>
 8005d26:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005d2a:	cb0c      	ldmia	r3, {r2, r3}
 8005d2c:	4630      	mov	r0, r6
 8005d2e:	f7fd f98b 	bl	8003048 <kinematicInverse>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d101      	bne.n	8005d3c <scaraInitCircle+0x3c>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8005d38:	2307      	movs	r3, #7
 8005d3a:	e146      	b.n	8005fca <scaraInitCircle+0x2ca>
	}

	if( 1 != dir && -1 != dir) {
 8005d3c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d006      	beq.n	8005d52 <scaraInitCircle+0x52>
 8005d44:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8005d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d4c:	d001      	beq.n	8005d52 <scaraInitCircle+0x52>
		return SCARA_STATUS_ERROR_PARA;// error direction param !!!
 8005d4e:	2306      	movs	r3, #6
 8005d50:	e13b      	b.n	8005fca <scaraInitCircle+0x2ca>
	}

	double v_x_start, v_y_start, v_x_stop, v_y_stop;
	double r1, r2, angle_start, angle_stop, delta_angle;
	v_x_start = start.x - center.x;
 8005d52:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005d56:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 8005d5a:	f7fa faa5 	bl	80002a8 <__aeabi_dsub>
 8005d5e:	4602      	mov	r2, r0
 8005d60:	460b      	mov	r3, r1
 8005d62:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	v_y_start = start.y - center.y;
 8005d66:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8005d6a:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8005d6e:	f7fa fa9b 	bl	80002a8 <__aeabi_dsub>
 8005d72:	4602      	mov	r2, r0
 8005d74:	460b      	mov	r3, r1
 8005d76:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	v_x_stop  = end.x  - center.x;
 8005d7a:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 8005d7e:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 8005d82:	f7fa fa91 	bl	80002a8 <__aeabi_dsub>
 8005d86:	4602      	mov	r2, r0
 8005d88:	460b      	mov	r3, r1
 8005d8a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	v_y_stop  = end.y  - center.y;
 8005d8e:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 8005d92:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8005d96:	f7fa fa87 	bl	80002a8 <__aeabi_dsub>
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	460b      	mov	r3, r1
 8005d9e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	r1 = sqrt(v_x_start*v_x_start + v_y_start*v_y_start);
 8005da2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005da6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8005daa:	f7fa fc35 	bl	8000618 <__aeabi_dmul>
 8005dae:	4602      	mov	r2, r0
 8005db0:	460b      	mov	r3, r1
 8005db2:	4690      	mov	r8, r2
 8005db4:	4699      	mov	r9, r3
 8005db6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005dba:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8005dbe:	f7fa fc2b 	bl	8000618 <__aeabi_dmul>
 8005dc2:	4602      	mov	r2, r0
 8005dc4:	460b      	mov	r3, r1
 8005dc6:	4640      	mov	r0, r8
 8005dc8:	4649      	mov	r1, r9
 8005dca:	f7fa fa6f 	bl	80002ac <__adddf3>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	460b      	mov	r3, r1
 8005dd2:	ec43 2b17 	vmov	d7, r2, r3
 8005dd6:	eeb0 0a47 	vmov.f32	s0, s14
 8005dda:	eef0 0a67 	vmov.f32	s1, s15
 8005dde:	f012 fa89 	bl	80182f4 <sqrt>
 8005de2:	ed87 0b08 	vstr	d0, [r7, #32]
	r2 = sqrt(v_x_stop*v_x_stop + v_y_stop*v_y_stop);
 8005de6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005dea:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8005dee:	f7fa fc13 	bl	8000618 <__aeabi_dmul>
 8005df2:	4602      	mov	r2, r0
 8005df4:	460b      	mov	r3, r1
 8005df6:	4690      	mov	r8, r2
 8005df8:	4699      	mov	r9, r3
 8005dfa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005dfe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005e02:	f7fa fc09 	bl	8000618 <__aeabi_dmul>
 8005e06:	4602      	mov	r2, r0
 8005e08:	460b      	mov	r3, r1
 8005e0a:	4640      	mov	r0, r8
 8005e0c:	4649      	mov	r1, r9
 8005e0e:	f7fa fa4d 	bl	80002ac <__adddf3>
 8005e12:	4602      	mov	r2, r0
 8005e14:	460b      	mov	r3, r1
 8005e16:	ec43 2b17 	vmov	d7, r2, r3
 8005e1a:	eeb0 0a47 	vmov.f32	s0, s14
 8005e1e:	eef0 0a67 	vmov.f32	s1, s15
 8005e22:	f012 fa67 	bl	80182f4 <sqrt>
 8005e26:	ed87 0b06 	vstr	d0, [r7, #24]

	if( 1.0 < fabs(r1 - r2)) {
 8005e2a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e2e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005e32:	f7fa fa39 	bl	80002a8 <__aeabi_dsub>
 8005e36:	4602      	mov	r2, r0
 8005e38:	460b      	mov	r3, r1
 8005e3a:	4614      	mov	r4, r2
 8005e3c:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8005e40:	f04f 0200 	mov.w	r2, #0
 8005e44:	4b68      	ldr	r3, [pc, #416]	; (8005fe8 <scaraInitCircle+0x2e8>)
 8005e46:	4620      	mov	r0, r4
 8005e48:	4629      	mov	r1, r5
 8005e4a:	f7fa fe75 	bl	8000b38 <__aeabi_dcmpgt>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d001      	beq.n	8005e58 <scaraInitCircle+0x158>
		return SCARA_STATUS_ERROR_PARA; //start & stop are not in a circle together !!
 8005e54:	2306      	movs	r3, #6
 8005e56:	e0b8      	b.n	8005fca <scaraInitCircle+0x2ca>
	}

	if (r1 < 0.1 || r2 < 0.1) {
 8005e58:	a35f      	add	r3, pc, #380	; (adr r3, 8005fd8 <scaraInitCircle+0x2d8>)
 8005e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e5e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005e62:	f7fa fe4b 	bl	8000afc <__aeabi_dcmplt>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d109      	bne.n	8005e80 <scaraInitCircle+0x180>
 8005e6c:	a35a      	add	r3, pc, #360	; (adr r3, 8005fd8 <scaraInitCircle+0x2d8>)
 8005e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e72:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005e76:	f7fa fe41 	bl	8000afc <__aeabi_dcmplt>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d001      	beq.n	8005e84 <scaraInitCircle+0x184>
		return SCARA_STATUS_ERROR_PARA; //start and center almost in the same phace, radius = 0 !!
 8005e80:	2306      	movs	r3, #6
 8005e82:	e0a2      	b.n	8005fca <scaraInitCircle+0x2ca>
	}

	angle_start = atan2(v_y_start, v_x_start);
 8005e84:	ed97 1b10 	vldr	d1, [r7, #64]	; 0x40
 8005e88:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8005e8c:	f012 fa30 	bl	80182f0 <atan2>
 8005e90:	ed87 0b04 	vstr	d0, [r7, #16]
	angle_stop  = atan2(v_y_stop, v_x_stop);
 8005e94:	ed97 1b0c 	vldr	d1, [r7, #48]	; 0x30
 8005e98:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8005e9c:	f012 fa28 	bl	80182f0 <atan2>
 8005ea0:	ed87 0b02 	vstr	d0, [r7, #8]
	delta_angle = angle_stop - angle_start;
 8005ea4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005ea8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005eac:	f7fa f9fc 	bl	80002a8 <__aeabi_dsub>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	460c      	mov	r4, r1
 8005eb4:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48

	if ( 0 > delta_angle) {
 8005eb8:	f04f 0200 	mov.w	r2, #0
 8005ebc:	f04f 0300 	mov.w	r3, #0
 8005ec0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005ec4:	f7fa fe1a 	bl	8000afc <__aeabi_dcmplt>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d00a      	beq.n	8005ee4 <scaraInitCircle+0x1e4>
		delta_angle += 2*PI;
 8005ece:	a344      	add	r3, pc, #272	; (adr r3, 8005fe0 <scaraInitCircle+0x2e0>)
 8005ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005ed8:	f7fa f9e8 	bl	80002ac <__adddf3>
 8005edc:	4603      	mov	r3, r0
 8005ede:	460c      	mov	r4, r1
 8005ee0:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
	} // atan2 range : -PI --> PI

	if ( 0 > dir) {
 8005ee4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	da0a      	bge.n	8005f02 <scaraInitCircle+0x202>
		delta_angle = 2*PI - delta_angle;
 8005eec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005ef0:	a13b      	add	r1, pc, #236	; (adr r1, 8005fe0 <scaraInitCircle+0x2e0>)
 8005ef2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ef6:	f7fa f9d7 	bl	80002a8 <__aeabi_dsub>
 8005efa:	4603      	mov	r3, r0
 8005efc:	460c      	mov	r4, r1
 8005efe:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
	}
	// Init circle params
	circle->dir = dir;
 8005f02:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8005f06:	b25a      	sxtb	r2, r3
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	701a      	strb	r2, [r3, #0]
	circle->radius = r1;
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8005f12:	e9c2 3402 	strd	r3, r4, [r2, #8]
	circle->angle_start = angle_start;
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005f1c:	e9c2 3404 	strd	r3, r4, [r2, #16]
	circle->angle_stop  = angle_stop;
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8005f26:	e9c2 3406 	strd	r3, r4, [r2, #24]
	circle->total_angle = delta_angle;
 8005f2a:	687a      	ldr	r2, [r7, #4]
 8005f2c:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8005f30:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	circle->total_s = delta_angle*r1;
 8005f34:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005f38:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005f3c:	f7fa fb6c 	bl	8000618 <__aeabi_dmul>
 8005f40:	4603      	mov	r3, r0
 8005f42:	460c      	mov	r4, r1
 8005f44:	687a      	ldr	r2, [r7, #4]
 8005f46:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
	circle->x0 = start.x;
 8005f4a:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	e9c2 3408 	strd	r3, r4, [r2, #32]
	circle->y0 = start.y;
 8005f54:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	circle->x1 = end.x;
 8005f5e:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	circle->y1 = end.y;
 8005f68:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	circle->xi = center.x;
 8005f72:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	circle->yi = center.y;
 8005f7c:	e9d7 345c 	ldrd	r3, r4, [r7, #368]	; 0x170
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	circle->z0 = start.z;
 8005f86:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	circle->z1 = start.z;
 8005f90:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	circle->zi = start.z;
 8005f9a:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	circle->x_current = circle->x0;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	circle->y_current = circle->y0;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
	circle->z_current = circle->z0;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88

	return SCARA_STATUS_OK;
 8005fc8:	2300      	movs	r3, #0
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3754      	adds	r7, #84	; 0x54
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005fd4:	b002      	add	sp, #8
 8005fd6:	4770      	bx	lr
 8005fd8:	9999999a 	.word	0x9999999a
 8005fdc:	3fb99999 	.word	0x3fb99999
 8005fe0:	60000000 	.word	0x60000000
 8005fe4:	401921fb 	.word	0x401921fb
 8005fe8:	3ff00000 	.word	0x3ff00000
 8005fec:	00000000 	.word	0x00000000

08005ff0 <scaraInitLSPB>:
SCARA_StatusTypeDef	scaraInitLSPB		(Trajectory_LSPB_TypeDef *lspb,
										Trajectory_TargetTypeDef target,
										double total_s,
										ModeInitTypeDef modeinit,
										double v_factor,
										double a_factor) {
 8005ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ff4:	b0ad      	sub	sp, #180	; 0xb4
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005ffa:	460b      	mov	r3, r1
 8005ffc:	ed87 0b08 	vstr	d0, [r7, #32]
 8006000:	ed87 1b06 	vstr	d1, [r7, #24]
 8006004:	ed87 2b04 	vstr	d2, [r7, #16]
 8006008:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800600c:	4613      	mov	r3, r2
 800600e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	 double v_design, a_design, v_lim, q0, q1, v0, v1, ta, td, tf;
	 uint32_t	no_sample;
	 int8_t	dir;

	 if ( TRAJECTORY_3D == target) {
 8006012:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006016:	2b04      	cmp	r3, #4
 8006018:	d116      	bne.n	8006048 <scaraInitLSPB+0x58>
		 v_design = V_DESIGN_3D*v_factor;
 800601a:	f04f 0200 	mov.w	r2, #0
 800601e:	4bb2      	ldr	r3, [pc, #712]	; (80062e8 <scaraInitLSPB+0x2f8>)
 8006020:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006024:	f7fa faf8 	bl	8000618 <__aeabi_dmul>
 8006028:	4603      	mov	r3, r0
 800602a:	460c      	mov	r4, r1
 800602c:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_3D*a_factor;
 8006030:	f04f 0200 	mov.w	r2, #0
 8006034:	4bad      	ldr	r3, [pc, #692]	; (80062ec <scaraInitLSPB+0x2fc>)
 8006036:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800603a:	f7fa faed 	bl	8000618 <__aeabi_dmul>
 800603e:	4603      	mov	r3, r0
 8006040:	460c      	mov	r4, r1
 8006042:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 8006046:	e088      	b.n	800615a <scaraInitLSPB+0x16a>
	 } else if (TRAJECTORY_ROLL == target) {
 8006048:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800604c:	2b05      	cmp	r3, #5
 800604e:	d116      	bne.n	800607e <scaraInitLSPB+0x8e>
		 v_design = V_DESIGN_ROLL*v_factor;
 8006050:	a399      	add	r3, pc, #612	; (adr r3, 80062b8 <scaraInitLSPB+0x2c8>)
 8006052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006056:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800605a:	f7fa fadd 	bl	8000618 <__aeabi_dmul>
 800605e:	4603      	mov	r3, r0
 8006060:	460c      	mov	r4, r1
 8006062:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_ROLL*a_factor;
 8006066:	a396      	add	r3, pc, #600	; (adr r3, 80062c0 <scaraInitLSPB+0x2d0>)
 8006068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800606c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006070:	f7fa fad2 	bl	8000618 <__aeabi_dmul>
 8006074:	4603      	mov	r3, r0
 8006076:	460c      	mov	r4, r1
 8006078:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 800607c:	e06d      	b.n	800615a <scaraInitLSPB+0x16a>
	 } else if (TRAJECTORY_J0 == target) {
 800607e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006082:	2b00      	cmp	r3, #0
 8006084:	d116      	bne.n	80060b4 <scaraInitLSPB+0xc4>
		 v_design = V_DESIGN_J0*v_factor;
 8006086:	a390      	add	r3, pc, #576	; (adr r3, 80062c8 <scaraInitLSPB+0x2d8>)
 8006088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800608c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006090:	f7fa fac2 	bl	8000618 <__aeabi_dmul>
 8006094:	4603      	mov	r3, r0
 8006096:	460c      	mov	r4, r1
 8006098:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J0*a_factor;
 800609c:	a38c      	add	r3, pc, #560	; (adr r3, 80062d0 <scaraInitLSPB+0x2e0>)
 800609e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80060a6:	f7fa fab7 	bl	8000618 <__aeabi_dmul>
 80060aa:	4603      	mov	r3, r0
 80060ac:	460c      	mov	r4, r1
 80060ae:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 80060b2:	e052      	b.n	800615a <scaraInitLSPB+0x16a>
	 } else if (TRAJECTORY_J1 == target) {
 80060b4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d116      	bne.n	80060ea <scaraInitLSPB+0xfa>
		 v_design = V_DESIGN_J1*v_factor;
 80060bc:	a382      	add	r3, pc, #520	; (adr r3, 80062c8 <scaraInitLSPB+0x2d8>)
 80060be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80060c6:	f7fa faa7 	bl	8000618 <__aeabi_dmul>
 80060ca:	4603      	mov	r3, r0
 80060cc:	460c      	mov	r4, r1
 80060ce:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J1*a_factor;
 80060d2:	a37f      	add	r3, pc, #508	; (adr r3, 80062d0 <scaraInitLSPB+0x2e0>)
 80060d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80060dc:	f7fa fa9c 	bl	8000618 <__aeabi_dmul>
 80060e0:	4603      	mov	r3, r0
 80060e2:	460c      	mov	r4, r1
 80060e4:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 80060e8:	e037      	b.n	800615a <scaraInitLSPB+0x16a>
	 } else if (TRAJECTORY_J2 == target) {
 80060ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80060ee:	2b02      	cmp	r3, #2
 80060f0:	d116      	bne.n	8006120 <scaraInitLSPB+0x130>
		 v_design = V_DESIGN_J2*v_factor;
 80060f2:	f04f 0200 	mov.w	r2, #0
 80060f6:	4b7c      	ldr	r3, [pc, #496]	; (80062e8 <scaraInitLSPB+0x2f8>)
 80060f8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80060fc:	f7fa fa8c 	bl	8000618 <__aeabi_dmul>
 8006100:	4603      	mov	r3, r0
 8006102:	460c      	mov	r4, r1
 8006104:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J2*a_factor;
 8006108:	f04f 0200 	mov.w	r2, #0
 800610c:	4b77      	ldr	r3, [pc, #476]	; (80062ec <scaraInitLSPB+0x2fc>)
 800610e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006112:	f7fa fa81 	bl	8000618 <__aeabi_dmul>
 8006116:	4603      	mov	r3, r0
 8006118:	460c      	mov	r4, r1
 800611a:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 800611e:	e01c      	b.n	800615a <scaraInitLSPB+0x16a>
	 } else if (TRAJECTORY_J3 == target) {
 8006120:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006124:	2b03      	cmp	r3, #3
 8006126:	d116      	bne.n	8006156 <scaraInitLSPB+0x166>
		 v_design = V_DESIGN_J3*v_factor;
 8006128:	a363      	add	r3, pc, #396	; (adr r3, 80062b8 <scaraInitLSPB+0x2c8>)
 800612a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800612e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006132:	f7fa fa71 	bl	8000618 <__aeabi_dmul>
 8006136:	4603      	mov	r3, r0
 8006138:	460c      	mov	r4, r1
 800613a:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J3*a_factor;
 800613e:	a360      	add	r3, pc, #384	; (adr r3, 80062c0 <scaraInitLSPB+0x2d0>)
 8006140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006144:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006148:	f7fa fa66 	bl	8000618 <__aeabi_dmul>
 800614c:	4603      	mov	r3, r0
 800614e:	460c      	mov	r4, r1
 8006150:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 8006154:	e001      	b.n	800615a <scaraInitLSPB+0x16a>
	 } else {
		 return SCARA_STATUS_ERROR_PARA;
 8006156:	2306      	movs	r3, #6
 8006158:	e324      	b.n	80067a4 <scaraInitLSPB+0x7b4>
	 }

	 q0 = 0;
 800615a:	f04f 0300 	mov.w	r3, #0
 800615e:	f04f 0400 	mov.w	r4, #0
 8006162:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	 q1 = total_s;
 8006166:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800616a:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
	 v0 = 0;
 800616e:	f04f 0300 	mov.w	r3, #0
 8006172:	f04f 0400 	mov.w	r4, #0
 8006176:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	 v1 = 0;
 800617a:	f04f 0300 	mov.w	r3, #0
 800617e:	f04f 0400 	mov.w	r4, #0
 8006182:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50

	 if ( q0 <= q1) {
 8006186:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800618a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800618e:	f7fa fcbf 	bl	8000b10 <__aeabi_dcmple>
 8006192:	4603      	mov	r3, r0
 8006194:	2b00      	cmp	r3, #0
 8006196:	d003      	beq.n	80061a0 <scaraInitLSPB+0x1b0>
		 dir = 1;
 8006198:	2301      	movs	r3, #1
 800619a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800619e:	e00c      	b.n	80061ba <scaraInitLSPB+0x1ca>
	 } else {
		 dir = -1;
 80061a0:	23ff      	movs	r3, #255	; 0xff
 80061a2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		 q1 = -q1;
 80061a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80061aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80061ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80061b2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80061b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	 }

	 if (DUTY_MODE_INIT_QVT == modeinit) {
 80061ba:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80061be:	2b01      	cmp	r3, #1
 80061c0:	f040 80c8 	bne.w	8006354 <scaraInitLSPB+0x364>
		 double v_lower, v_upper, tc_upper, a_upper;
		 tf = lspb->Tf;
 80061c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c6:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 80061ca:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
		 // Avoid division by 0
		 if (tf > 0.001) {
 80061ce:	a342      	add	r3, pc, #264	; (adr r3, 80062d8 <scaraInitLSPB+0x2e8>)
 80061d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80061d8:	f7fa fcae 	bl	8000b38 <__aeabi_dcmpgt>
 80061dc:	4603      	mov	r3, r0
 80061de:	2b00      	cmp	r3, #0
 80061e0:	f000 80ac 	beq.w	800633c <scaraInitLSPB+0x34c>
			 v_lower 	= (q1 - q0) / tf;
 80061e4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80061e8:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80061ec:	f7fa f85c 	bl	80002a8 <__aeabi_dsub>
 80061f0:	4603      	mov	r3, r0
 80061f2:	460c      	mov	r4, r1
 80061f4:	4618      	mov	r0, r3
 80061f6:	4621      	mov	r1, r4
 80061f8:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80061fc:	f7fa fb36 	bl	800086c <__aeabi_ddiv>
 8006200:	4603      	mov	r3, r0
 8006202:	460c      	mov	r4, r1
 8006204:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
			 v_upper 	= 2*(q1 - q0) / tf;
 8006208:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800620c:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8006210:	f7fa f84a 	bl	80002a8 <__aeabi_dsub>
 8006214:	4603      	mov	r3, r0
 8006216:	460c      	mov	r4, r1
 8006218:	4618      	mov	r0, r3
 800621a:	4621      	mov	r1, r4
 800621c:	4602      	mov	r2, r0
 800621e:	460b      	mov	r3, r1
 8006220:	f7fa f844 	bl	80002ac <__adddf3>
 8006224:	4603      	mov	r3, r0
 8006226:	460c      	mov	r4, r1
 8006228:	4618      	mov	r0, r3
 800622a:	4621      	mov	r1, r4
 800622c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8006230:	f7fa fb1c 	bl	800086c <__aeabi_ddiv>
 8006234:	4603      	mov	r3, r0
 8006236:	460c      	mov	r4, r1
 8006238:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

			 if ( v_design < v_lower) {
 800623c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006240:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8006244:	f7fa fc5a 	bl	8000afc <__aeabi_dcmplt>
 8006248:	4603      	mov	r3, r0
 800624a:	2b00      	cmp	r3, #0
 800624c:	d001      	beq.n	8006252 <scaraInitLSPB+0x262>
				 return SCARA_STATUS_ERROR_OVER_VELOC;
 800624e:	2309      	movs	r3, #9
 8006250:	e2a8      	b.n	80067a4 <scaraInitLSPB+0x7b4>
			 } else {
				 if ( v_upper <= v_design) {
 8006252:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8006256:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800625a:	f7fa fc59 	bl	8000b10 <__aeabi_dcmple>
 800625e:	4603      	mov	r3, r0
 8006260:	2b00      	cmp	r3, #0
 8006262:	d003      	beq.n	800626c <scaraInitLSPB+0x27c>
					 v_design = v_upper;
 8006264:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8006268:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
				 }
				 // Avoid division by 0
				 if (v_design > 0.0000001) {
 800626c:	a31c      	add	r3, pc, #112	; (adr r3, 80062e0 <scaraInitLSPB+0x2f0>)
 800626e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006272:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8006276:	f7fa fc5f 	bl	8000b38 <__aeabi_dcmpgt>
 800627a:	4603      	mov	r3, r0
 800627c:	2b00      	cmp	r3, #0
 800627e:	d037      	beq.n	80062f0 <scaraInitLSPB+0x300>
					 tc_upper	= tf - (q1 - q0)/v_design;
 8006280:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8006284:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8006288:	f7fa f80e 	bl	80002a8 <__aeabi_dsub>
 800628c:	4603      	mov	r3, r0
 800628e:	460c      	mov	r4, r1
 8006290:	4618      	mov	r0, r3
 8006292:	4621      	mov	r1, r4
 8006294:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8006298:	f7fa fae8 	bl	800086c <__aeabi_ddiv>
 800629c:	4603      	mov	r3, r0
 800629e:	460c      	mov	r4, r1
 80062a0:	461a      	mov	r2, r3
 80062a2:	4623      	mov	r3, r4
 80062a4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80062a8:	f7f9 fffe 	bl	80002a8 <__aeabi_dsub>
 80062ac:	4603      	mov	r3, r0
 80062ae:	460c      	mov	r4, r1
 80062b0:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
 80062b4:	e028      	b.n	8006308 <scaraInitLSPB+0x318>
 80062b6:	bf00      	nop
 80062b8:	16bc01cb 	.word	0x16bc01cb
 80062bc:	3ffa3069 	.word	0x3ffa3069
 80062c0:	16bc01cb 	.word	0x16bc01cb
 80062c4:	3fea3069 	.word	0x3fea3069
 80062c8:	14000000 	.word	0x14000000
 80062cc:	4000f6f0 	.word	0x4000f6f0
 80062d0:	14000000 	.word	0x14000000
 80062d4:	3ff0f6f0 	.word	0x3ff0f6f0
 80062d8:	d2f1a9fc 	.word	0xd2f1a9fc
 80062dc:	3f50624d 	.word	0x3f50624d
 80062e0:	9abcaf48 	.word	0x9abcaf48
 80062e4:	3e7ad7f2 	.word	0x3e7ad7f2
 80062e8:	405b0000 	.word	0x405b0000
 80062ec:	404b0000 	.word	0x404b0000
				 } else {
					 tc_upper = tf / 2;
 80062f0:	f04f 0200 	mov.w	r2, #0
 80062f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80062f8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80062fc:	f7fa fab6 	bl	800086c <__aeabi_ddiv>
 8006300:	4603      	mov	r3, r0
 8006302:	460c      	mov	r4, r1
 8006304:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
				 }
				 a_upper	= v_design/tc_upper;
 8006308:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800630c:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8006310:	f7fa faac 	bl	800086c <__aeabi_ddiv>
 8006314:	4603      	mov	r3, r0
 8006316:	460c      	mov	r4, r1
 8006318:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
				 if ( a_upper > a_design) {
 800631c:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8006320:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006324:	f7fa fc08 	bl	8000b38 <__aeabi_dcmpgt>
 8006328:	4603      	mov	r3, r0
 800632a:	2b00      	cmp	r3, #0
 800632c:	d001      	beq.n	8006332 <scaraInitLSPB+0x342>
					 return SCARA_STATUS_ERROR_OVER_ACCEL;
 800632e:	230a      	movs	r3, #10
 8006330:	e238      	b.n	80067a4 <scaraInitLSPB+0x7b4>
				 } else {
					 a_design = a_upper;
 8006332:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8006336:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 800633a:	e00b      	b.n	8006354 <scaraInitLSPB+0x364>
				 }
			 }
		 } else {
			 v_design = 0;
 800633c:	f04f 0300 	mov.w	r3, #0
 8006340:	f04f 0400 	mov.w	r4, #0
 8006344:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
			 a_design = 0;
 8006348:	f04f 0300 	mov.w	r3, #0
 800634c:	f04f 0400 	mov.w	r4, #0
 8006350:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
		 }
	}

	 // Check condition trapezoidal ---> triangle
	 // Avoid division by 0
	 if (a_design > 0.0000001 && v_design > 0.0000001) {
 8006354:	f20f 4364 	addw	r3, pc, #1124	; 0x464
 8006358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800635c:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8006360:	f7fa fbea 	bl	8000b38 <__aeabi_dcmpgt>
 8006364:	4603      	mov	r3, r0
 8006366:	2b00      	cmp	r3, #0
 8006368:	f000 819c 	beq.w	80066a4 <scaraInitLSPB+0x6b4>
 800636c:	f20f 434c 	addw	r3, pc, #1100	; 0x44c
 8006370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006374:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8006378:	f7fa fbde 	bl	8000b38 <__aeabi_dcmpgt>
 800637c:	4603      	mov	r3, r0
 800637e:	2b00      	cmp	r3, #0
 8006380:	f000 8190 	beq.w	80066a4 <scaraInitLSPB+0x6b4>
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 8006384:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8006388:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800638c:	f7f9 ff8c 	bl	80002a8 <__aeabi_dsub>
 8006390:	4603      	mov	r3, r0
 8006392:	460c      	mov	r4, r1
 8006394:	461d      	mov	r5, r3
 8006396:	f024 4600 	bic.w	r6, r4, #2147483648	; 0x80000000
 800639a:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800639e:	4628      	mov	r0, r5
 80063a0:	4631      	mov	r1, r6
 80063a2:	f7fa f939 	bl	8000618 <__aeabi_dmul>
 80063a6:	4603      	mov	r3, r0
 80063a8:	460c      	mov	r4, r1
 80063aa:	e9c7 3402 	strd	r3, r4, [r7, #8]
 80063ae:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80063b2:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80063b6:	f7fa f92f 	bl	8000618 <__aeabi_dmul>
 80063ba:	4603      	mov	r3, r0
 80063bc:	460c      	mov	r4, r1
 80063be:	e9c7 3400 	strd	r3, r4, [r7]
 80063c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80063c6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80063ca:	f7fa f925 	bl	8000618 <__aeabi_dmul>
 80063ce:	4603      	mov	r3, r0
 80063d0:	460c      	mov	r4, r1
 80063d2:	461d      	mov	r5, r3
 80063d4:	4626      	mov	r6, r4
 80063d6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80063da:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80063de:	f7fa f91b 	bl	8000618 <__aeabi_dmul>
 80063e2:	4603      	mov	r3, r0
 80063e4:	460c      	mov	r4, r1
 80063e6:	461a      	mov	r2, r3
 80063e8:	4623      	mov	r3, r4
 80063ea:	4628      	mov	r0, r5
 80063ec:	4631      	mov	r1, r6
 80063ee:	f7f9 ff5d 	bl	80002ac <__adddf3>
 80063f2:	4603      	mov	r3, r0
 80063f4:	460c      	mov	r4, r1
 80063f6:	4618      	mov	r0, r3
 80063f8:	4621      	mov	r1, r4
 80063fa:	f04f 0200 	mov.w	r2, #0
 80063fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006402:	f7fa fa33 	bl	800086c <__aeabi_ddiv>
 8006406:	4603      	mov	r3, r0
 8006408:	460c      	mov	r4, r1
 800640a:	461a      	mov	r2, r3
 800640c:	4623      	mov	r3, r4
 800640e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006412:	f7f9 ff49 	bl	80002a8 <__aeabi_dsub>
 8006416:	4603      	mov	r3, r0
 8006418:	460c      	mov	r4, r1
 800641a:	461a      	mov	r2, r3
 800641c:	4623      	mov	r3, r4
 800641e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006422:	f7fa fb75 	bl	8000b10 <__aeabi_dcmple>
 8006426:	4603      	mov	r3, r0
 8006428:	2b00      	cmp	r3, #0
 800642a:	d075      	beq.n	8006518 <scaraInitLSPB+0x528>
			 v_lim 	= sqrt(fabs(q1 - q0)*a_design + (v0*v0 + v1*v1)/2);
 800642c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8006430:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8006434:	f7f9 ff38 	bl	80002a8 <__aeabi_dsub>
 8006438:	4603      	mov	r3, r0
 800643a:	460c      	mov	r4, r1
 800643c:	469a      	mov	sl, r3
 800643e:	f024 4b00 	bic.w	fp, r4, #2147483648	; 0x80000000
 8006442:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8006446:	4650      	mov	r0, sl
 8006448:	4659      	mov	r1, fp
 800644a:	f7fa f8e5 	bl	8000618 <__aeabi_dmul>
 800644e:	4603      	mov	r3, r0
 8006450:	460c      	mov	r4, r1
 8006452:	4625      	mov	r5, r4
 8006454:	461c      	mov	r4, r3
 8006456:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800645a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800645e:	f7fa f8db 	bl	8000618 <__aeabi_dmul>
 8006462:	4602      	mov	r2, r0
 8006464:	460b      	mov	r3, r1
 8006466:	4690      	mov	r8, r2
 8006468:	4699      	mov	r9, r3
 800646a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800646e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006472:	f7fa f8d1 	bl	8000618 <__aeabi_dmul>
 8006476:	4602      	mov	r2, r0
 8006478:	460b      	mov	r3, r1
 800647a:	4640      	mov	r0, r8
 800647c:	4649      	mov	r1, r9
 800647e:	f7f9 ff15 	bl	80002ac <__adddf3>
 8006482:	4602      	mov	r2, r0
 8006484:	460b      	mov	r3, r1
 8006486:	4610      	mov	r0, r2
 8006488:	4619      	mov	r1, r3
 800648a:	f04f 0200 	mov.w	r2, #0
 800648e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006492:	f7fa f9eb 	bl	800086c <__aeabi_ddiv>
 8006496:	4602      	mov	r2, r0
 8006498:	460b      	mov	r3, r1
 800649a:	4620      	mov	r0, r4
 800649c:	4629      	mov	r1, r5
 800649e:	f7f9 ff05 	bl	80002ac <__adddf3>
 80064a2:	4603      	mov	r3, r0
 80064a4:	460c      	mov	r4, r1
 80064a6:	ec44 3b17 	vmov	d7, r3, r4
 80064aa:	eeb0 0a47 	vmov.f32	s0, s14
 80064ae:	eef0 0a67 	vmov.f32	s1, s15
 80064b2:	f011 ff1f 	bl	80182f4 <sqrt>
 80064b6:	ed87 0b26 	vstr	d0, [r7, #152]	; 0x98
			 ta		= (v_lim - v0)/a_design;
 80064ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80064be:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80064c2:	f7f9 fef1 	bl	80002a8 <__aeabi_dsub>
 80064c6:	4603      	mov	r3, r0
 80064c8:	460c      	mov	r4, r1
 80064ca:	4618      	mov	r0, r3
 80064cc:	4621      	mov	r1, r4
 80064ce:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80064d2:	f7fa f9cb 	bl	800086c <__aeabi_ddiv>
 80064d6:	4603      	mov	r3, r0
 80064d8:	460c      	mov	r4, r1
 80064da:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
			 td		= (v_lim - v1)/a_design;
 80064de:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80064e2:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80064e6:	f7f9 fedf 	bl	80002a8 <__aeabi_dsub>
 80064ea:	4603      	mov	r3, r0
 80064ec:	460c      	mov	r4, r1
 80064ee:	4618      	mov	r0, r3
 80064f0:	4621      	mov	r1, r4
 80064f2:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80064f6:	f7fa f9b9 	bl	800086c <__aeabi_ddiv>
 80064fa:	4603      	mov	r3, r0
 80064fc:	460c      	mov	r4, r1
 80064fe:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
			 tf		= ta + td;
 8006502:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8006506:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800650a:	f7f9 fecf 	bl	80002ac <__adddf3>
 800650e:	4603      	mov	r3, r0
 8006510:	460c      	mov	r4, r1
 8006512:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 8006516:	e0e3      	b.n	80066e0 <scaraInitLSPB+0x6f0>
		 } else {
			 v_lim	= v_design;
 8006518:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 800651c:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
			 ta		= (v_lim - v0)/a_design;
 8006520:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006524:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006528:	f7f9 febe 	bl	80002a8 <__aeabi_dsub>
 800652c:	4603      	mov	r3, r0
 800652e:	460c      	mov	r4, r1
 8006530:	4618      	mov	r0, r3
 8006532:	4621      	mov	r1, r4
 8006534:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8006538:	f7fa f998 	bl	800086c <__aeabi_ddiv>
 800653c:	4603      	mov	r3, r0
 800653e:	460c      	mov	r4, r1
 8006540:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
			 td		= (v_lim - v1)/a_design;
 8006544:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006548:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800654c:	f7f9 feac 	bl	80002a8 <__aeabi_dsub>
 8006550:	4603      	mov	r3, r0
 8006552:	460c      	mov	r4, r1
 8006554:	4618      	mov	r0, r3
 8006556:	4621      	mov	r1, r4
 8006558:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800655c:	f7fa f986 	bl	800086c <__aeabi_ddiv>
 8006560:	4603      	mov	r3, r0
 8006562:	460c      	mov	r4, r1
 8006564:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
			 tf		= fabs(q0 - q1)/v_lim + v_lim/(2*a_design)*(1 - v0/v_lim)*(1 - v0/v_lim)
 8006568:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800656c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006570:	f7f9 fe9a 	bl	80002a8 <__aeabi_dsub>
 8006574:	4603      	mov	r3, r0
 8006576:	460c      	mov	r4, r1
 8006578:	4698      	mov	r8, r3
 800657a:	f024 4900 	bic.w	r9, r4, #2147483648	; 0x80000000
 800657e:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8006582:	4640      	mov	r0, r8
 8006584:	4649      	mov	r1, r9
 8006586:	f7fa f971 	bl	800086c <__aeabi_ddiv>
 800658a:	4603      	mov	r3, r0
 800658c:	460c      	mov	r4, r1
 800658e:	4625      	mov	r5, r4
 8006590:	461c      	mov	r4, r3
 8006592:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8006596:	4602      	mov	r2, r0
 8006598:	460b      	mov	r3, r1
 800659a:	f7f9 fe87 	bl	80002ac <__adddf3>
 800659e:	4602      	mov	r2, r0
 80065a0:	460b      	mov	r3, r1
 80065a2:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80065a6:	f7fa f961 	bl	800086c <__aeabi_ddiv>
 80065aa:	4602      	mov	r2, r0
 80065ac:	460b      	mov	r3, r1
 80065ae:	4690      	mov	r8, r2
 80065b0:	4699      	mov	r9, r3
 80065b2:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80065b6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80065ba:	f7fa f957 	bl	800086c <__aeabi_ddiv>
 80065be:	4602      	mov	r2, r0
 80065c0:	460b      	mov	r3, r1
 80065c2:	f04f 0000 	mov.w	r0, #0
 80065c6:	497c      	ldr	r1, [pc, #496]	; (80067b8 <scaraInitLSPB+0x7c8>)
 80065c8:	f7f9 fe6e 	bl	80002a8 <__aeabi_dsub>
 80065cc:	4602      	mov	r2, r0
 80065ce:	460b      	mov	r3, r1
 80065d0:	4640      	mov	r0, r8
 80065d2:	4649      	mov	r1, r9
 80065d4:	f7fa f820 	bl	8000618 <__aeabi_dmul>
 80065d8:	4602      	mov	r2, r0
 80065da:	460b      	mov	r3, r1
 80065dc:	4690      	mov	r8, r2
 80065de:	4699      	mov	r9, r3
 80065e0:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80065e4:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80065e8:	f7fa f940 	bl	800086c <__aeabi_ddiv>
 80065ec:	4602      	mov	r2, r0
 80065ee:	460b      	mov	r3, r1
 80065f0:	f04f 0000 	mov.w	r0, #0
 80065f4:	4970      	ldr	r1, [pc, #448]	; (80067b8 <scaraInitLSPB+0x7c8>)
 80065f6:	f7f9 fe57 	bl	80002a8 <__aeabi_dsub>
 80065fa:	4602      	mov	r2, r0
 80065fc:	460b      	mov	r3, r1
 80065fe:	4640      	mov	r0, r8
 8006600:	4649      	mov	r1, r9
 8006602:	f7fa f809 	bl	8000618 <__aeabi_dmul>
 8006606:	4602      	mov	r2, r0
 8006608:	460b      	mov	r3, r1
 800660a:	4620      	mov	r0, r4
 800660c:	4629      	mov	r1, r5
 800660e:	f7f9 fe4d 	bl	80002ac <__adddf3>
 8006612:	4603      	mov	r3, r0
 8006614:	460c      	mov	r4, r1
 8006616:	4625      	mov	r5, r4
 8006618:	461c      	mov	r4, r3
							+ v_lim/(2*a_design)*(1 - v1/v_lim)*(1 - v1/v_lim);
 800661a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800661e:	4602      	mov	r2, r0
 8006620:	460b      	mov	r3, r1
 8006622:	f7f9 fe43 	bl	80002ac <__adddf3>
 8006626:	4602      	mov	r2, r0
 8006628:	460b      	mov	r3, r1
 800662a:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800662e:	f7fa f91d 	bl	800086c <__aeabi_ddiv>
 8006632:	4602      	mov	r2, r0
 8006634:	460b      	mov	r3, r1
 8006636:	4690      	mov	r8, r2
 8006638:	4699      	mov	r9, r3
 800663a:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800663e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006642:	f7fa f913 	bl	800086c <__aeabi_ddiv>
 8006646:	4602      	mov	r2, r0
 8006648:	460b      	mov	r3, r1
 800664a:	f04f 0000 	mov.w	r0, #0
 800664e:	495a      	ldr	r1, [pc, #360]	; (80067b8 <scaraInitLSPB+0x7c8>)
 8006650:	f7f9 fe2a 	bl	80002a8 <__aeabi_dsub>
 8006654:	4602      	mov	r2, r0
 8006656:	460b      	mov	r3, r1
 8006658:	4640      	mov	r0, r8
 800665a:	4649      	mov	r1, r9
 800665c:	f7f9 ffdc 	bl	8000618 <__aeabi_dmul>
 8006660:	4602      	mov	r2, r0
 8006662:	460b      	mov	r3, r1
 8006664:	4690      	mov	r8, r2
 8006666:	4699      	mov	r9, r3
 8006668:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800666c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006670:	f7fa f8fc 	bl	800086c <__aeabi_ddiv>
 8006674:	4602      	mov	r2, r0
 8006676:	460b      	mov	r3, r1
 8006678:	f04f 0000 	mov.w	r0, #0
 800667c:	494e      	ldr	r1, [pc, #312]	; (80067b8 <scaraInitLSPB+0x7c8>)
 800667e:	f7f9 fe13 	bl	80002a8 <__aeabi_dsub>
 8006682:	4602      	mov	r2, r0
 8006684:	460b      	mov	r3, r1
 8006686:	4640      	mov	r0, r8
 8006688:	4649      	mov	r1, r9
 800668a:	f7f9 ffc5 	bl	8000618 <__aeabi_dmul>
 800668e:	4602      	mov	r2, r0
 8006690:	460b      	mov	r3, r1
			 tf		= fabs(q0 - q1)/v_lim + v_lim/(2*a_design)*(1 - v0/v_lim)*(1 - v0/v_lim)
 8006692:	4620      	mov	r0, r4
 8006694:	4629      	mov	r1, r5
 8006696:	f7f9 fe09 	bl	80002ac <__adddf3>
 800669a:	4603      	mov	r3, r0
 800669c:	460c      	mov	r4, r1
 800669e:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 80066a2:	e01d      	b.n	80066e0 <scaraInitLSPB+0x6f0>
		 }
	 } else {
		 v_lim	= 0;
 80066a4:	f04f 0300 	mov.w	r3, #0
 80066a8:	f04f 0400 	mov.w	r4, #0
 80066ac:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
		 ta = tf/2;
 80066b0:	f04f 0200 	mov.w	r2, #0
 80066b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80066b8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80066bc:	f7fa f8d6 	bl	800086c <__aeabi_ddiv>
 80066c0:	4603      	mov	r3, r0
 80066c2:	460c      	mov	r4, r1
 80066c4:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
		 td = tf/2;
 80066c8:	f04f 0200 	mov.w	r2, #0
 80066cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80066d0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80066d4:	f7fa f8ca 	bl	800086c <__aeabi_ddiv>
 80066d8:	4603      	mov	r3, r0
 80066da:	460c      	mov	r4, r1
 80066dc:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
	 }

	 no_sample = ceilf(tf / T_SAMPLING); // ceiling
 80066e0:	a333      	add	r3, pc, #204	; (adr r3, 80067b0 <scaraInitLSPB+0x7c0>)
 80066e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e6:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80066ea:	f7fa f8bf 	bl	800086c <__aeabi_ddiv>
 80066ee:	4603      	mov	r3, r0
 80066f0:	460c      	mov	r4, r1
 80066f2:	4618      	mov	r0, r3
 80066f4:	4621      	mov	r1, r4
 80066f6:	f7fa fa87 	bl	8000c08 <__aeabi_d2f>
 80066fa:	4603      	mov	r3, r0
 80066fc:	ee00 3a10 	vmov	s0, r3
 8006700:	f011 fdb6 	bl	8018270 <ceilf>
 8006704:	eef0 7a40 	vmov.f32	s15, s0
 8006708:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800670c:	ee17 3a90 	vmov	r3, s15
 8006710:	637b      	str	r3, [r7, #52]	; 0x34
	 // Init lspb params
	 lspb->dir= dir;
 8006712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006714:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8006718:	701a      	strb	r2, [r3, #0]
	 lspb->s0 = q0;
 800671a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800671c:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8006720:	e9c2 3402 	strd	r3, r4, [r2, #8]
	 lspb->s1 = q1;
 8006724:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006726:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 800672a:	e9c2 3404 	strd	r3, r4, [r2, #16]
	 lspb->Ta = ta;
 800672e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006730:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8006734:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	 lspb->Td = td;
 8006738:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800673a:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 800673e:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	 lspb->Tf = tf;
 8006742:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006744:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8006748:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	 lspb->a_design = a_design;
 800674c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800674e:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 8006752:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	 lspb->v_design = v_design;
 8006756:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006758:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 800675c:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	 lspb->v_lim = v_lim;
 8006760:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006762:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8006766:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	 lspb->v0 = v0;
 800676a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800676c:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8006770:	e9c2 3406 	strd	r3, r4, [r2, #24]
	 lspb->v1 = v1;
 8006774:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006776:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800677a:	e9c2 3408 	strd	r3, r4, [r2, #32]
	 lspb->num_of_sampling = no_sample;
 800677e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006780:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006782:	659a      	str	r2, [r3, #88]	; 0x58
	 lspb->total_s = lspb->s1 - lspb->s0;
 8006784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006786:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800678a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800678c:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8006790:	461a      	mov	r2, r3
 8006792:	4623      	mov	r3, r4
 8006794:	f7f9 fd88 	bl	80002a8 <__aeabi_dsub>
 8006798:	4603      	mov	r3, r0
 800679a:	460c      	mov	r4, r1
 800679c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800679e:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

	 return SCARA_STATUS_OK;
 80067a2:	2300      	movs	r3, #0
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	37b4      	adds	r7, #180	; 0xb4
 80067a8:	46bd      	mov	sp, r7
 80067aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067ae:	bf00      	nop
 80067b0:	40000000 	.word	0x40000000
 80067b4:	3f847ae1 	.word	0x3f847ae1
 80067b8:	3ff00000 	.word	0x3ff00000
 80067bc:	9abcaf48 	.word	0x9abcaf48
 80067c0:	3e7ad7f2 	.word	0x3e7ad7f2
 80067c4:	00000000 	.word	0x00000000

080067c8 <scaraInitScurve>:
SCARA_StatusTypeDef	scaraInitScurve		(Trajectory_Scurve_TypeDef *scurve,
										Trajectory_TargetTypeDef target,
										double total_s,
										ModeInitTypeDef modeinit,
										double v_factor,
										double a_factor) {
 80067c8:	b5b0      	push	{r4, r5, r7, lr}
 80067ca:	b0ba      	sub	sp, #232	; 0xe8
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	61f8      	str	r0, [r7, #28]
 80067d0:	460b      	mov	r3, r1
 80067d2:	ed87 0b04 	vstr	d0, [r7, #16]
 80067d6:	ed87 1b02 	vstr	d1, [r7, #8]
 80067da:	ed87 2b00 	vstr	d2, [r7]
 80067de:	76fb      	strb	r3, [r7, #27]
 80067e0:	4613      	mov	r3, r2
 80067e2:	76bb      	strb	r3, [r7, #26]
	 double v_design, a_design, q0, q1, v0, v1, v_lim, j_max, tm, tc, tf, dir;
	 double v_1, s_1, v_2, s_2, v_3, s_3, v_4, s_4;
	 uint32_t	 no_sample;
	 uint8_t	 no_phases;

	 if ( TRAJECTORY_3D == target) {
 80067e4:	7efb      	ldrb	r3, [r7, #27]
 80067e6:	2b04      	cmp	r3, #4
 80067e8:	d116      	bne.n	8006818 <scaraInitScurve+0x50>
		 v_design = V_DESIGN_3D*v_factor;
 80067ea:	f04f 0200 	mov.w	r2, #0
 80067ee:	4bb0      	ldr	r3, [pc, #704]	; (8006ab0 <scaraInitScurve+0x2e8>)
 80067f0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80067f4:	f7f9 ff10 	bl	8000618 <__aeabi_dmul>
 80067f8:	4603      	mov	r3, r0
 80067fa:	460c      	mov	r4, r1
 80067fc:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_3D*a_factor;
 8006800:	f04f 0200 	mov.w	r2, #0
 8006804:	4bab      	ldr	r3, [pc, #684]	; (8006ab4 <scaraInitScurve+0x2ec>)
 8006806:	e9d7 0100 	ldrd	r0, r1, [r7]
 800680a:	f7f9 ff05 	bl	8000618 <__aeabi_dmul>
 800680e:	4603      	mov	r3, r0
 8006810:	460c      	mov	r4, r1
 8006812:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8006816:	e083      	b.n	8006920 <scaraInitScurve+0x158>
	 } else if (TRAJECTORY_ROLL == target) {
 8006818:	7efb      	ldrb	r3, [r7, #27]
 800681a:	2b05      	cmp	r3, #5
 800681c:	d116      	bne.n	800684c <scaraInitScurve+0x84>
		 v_design = V_DESIGN_ROLL*v_factor;
 800681e:	a39a      	add	r3, pc, #616	; (adr r3, 8006a88 <scaraInitScurve+0x2c0>)
 8006820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006824:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006828:	f7f9 fef6 	bl	8000618 <__aeabi_dmul>
 800682c:	4603      	mov	r3, r0
 800682e:	460c      	mov	r4, r1
 8006830:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_ROLL*a_factor;
 8006834:	a396      	add	r3, pc, #600	; (adr r3, 8006a90 <scaraInitScurve+0x2c8>)
 8006836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800683a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800683e:	f7f9 feeb 	bl	8000618 <__aeabi_dmul>
 8006842:	4603      	mov	r3, r0
 8006844:	460c      	mov	r4, r1
 8006846:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 800684a:	e069      	b.n	8006920 <scaraInitScurve+0x158>
	 } else if (TRAJECTORY_J0 == target) {
 800684c:	7efb      	ldrb	r3, [r7, #27]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d116      	bne.n	8006880 <scaraInitScurve+0xb8>
		 v_design = V_DESIGN_J0*v_factor;
 8006852:	a391      	add	r3, pc, #580	; (adr r3, 8006a98 <scaraInitScurve+0x2d0>)
 8006854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006858:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800685c:	f7f9 fedc 	bl	8000618 <__aeabi_dmul>
 8006860:	4603      	mov	r3, r0
 8006862:	460c      	mov	r4, r1
 8006864:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_J0*a_factor;
 8006868:	a38d      	add	r3, pc, #564	; (adr r3, 8006aa0 <scaraInitScurve+0x2d8>)
 800686a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800686e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006872:	f7f9 fed1 	bl	8000618 <__aeabi_dmul>
 8006876:	4603      	mov	r3, r0
 8006878:	460c      	mov	r4, r1
 800687a:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 800687e:	e04f      	b.n	8006920 <scaraInitScurve+0x158>
	 } else if (TRAJECTORY_J1 == target) {
 8006880:	7efb      	ldrb	r3, [r7, #27]
 8006882:	2b01      	cmp	r3, #1
 8006884:	d116      	bne.n	80068b4 <scaraInitScurve+0xec>
		 v_design = V_DESIGN_J1*v_factor;
 8006886:	a384      	add	r3, pc, #528	; (adr r3, 8006a98 <scaraInitScurve+0x2d0>)
 8006888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800688c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006890:	f7f9 fec2 	bl	8000618 <__aeabi_dmul>
 8006894:	4603      	mov	r3, r0
 8006896:	460c      	mov	r4, r1
 8006898:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_J1*a_factor;
 800689c:	a380      	add	r3, pc, #512	; (adr r3, 8006aa0 <scaraInitScurve+0x2d8>)
 800689e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80068a6:	f7f9 feb7 	bl	8000618 <__aeabi_dmul>
 80068aa:	4603      	mov	r3, r0
 80068ac:	460c      	mov	r4, r1
 80068ae:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 80068b2:	e035      	b.n	8006920 <scaraInitScurve+0x158>
	 } else if (TRAJECTORY_J2 == target) {
 80068b4:	7efb      	ldrb	r3, [r7, #27]
 80068b6:	2b02      	cmp	r3, #2
 80068b8:	d116      	bne.n	80068e8 <scaraInitScurve+0x120>
		 v_design = V_DESIGN_J2*v_factor;
 80068ba:	f04f 0200 	mov.w	r2, #0
 80068be:	4b7c      	ldr	r3, [pc, #496]	; (8006ab0 <scaraInitScurve+0x2e8>)
 80068c0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80068c4:	f7f9 fea8 	bl	8000618 <__aeabi_dmul>
 80068c8:	4603      	mov	r3, r0
 80068ca:	460c      	mov	r4, r1
 80068cc:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_J2*a_factor;
 80068d0:	f04f 0200 	mov.w	r2, #0
 80068d4:	4b77      	ldr	r3, [pc, #476]	; (8006ab4 <scaraInitScurve+0x2ec>)
 80068d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80068da:	f7f9 fe9d 	bl	8000618 <__aeabi_dmul>
 80068de:	4603      	mov	r3, r0
 80068e0:	460c      	mov	r4, r1
 80068e2:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 80068e6:	e01b      	b.n	8006920 <scaraInitScurve+0x158>
	 } else if (TRAJECTORY_J3 == target) {
 80068e8:	7efb      	ldrb	r3, [r7, #27]
 80068ea:	2b03      	cmp	r3, #3
 80068ec:	d116      	bne.n	800691c <scaraInitScurve+0x154>
		 v_design = V_DESIGN_J3*v_factor;
 80068ee:	a366      	add	r3, pc, #408	; (adr r3, 8006a88 <scaraInitScurve+0x2c0>)
 80068f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80068f8:	f7f9 fe8e 	bl	8000618 <__aeabi_dmul>
 80068fc:	4603      	mov	r3, r0
 80068fe:	460c      	mov	r4, r1
 8006900:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_J3*a_factor;
 8006904:	a362      	add	r3, pc, #392	; (adr r3, 8006a90 <scaraInitScurve+0x2c8>)
 8006906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800690a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800690e:	f7f9 fe83 	bl	8000618 <__aeabi_dmul>
 8006912:	4603      	mov	r3, r0
 8006914:	460c      	mov	r4, r1
 8006916:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 800691a:	e001      	b.n	8006920 <scaraInitScurve+0x158>
	 } else {
		 return SCARA_STATUS_ERROR_PARA;
 800691c:	2306      	movs	r3, #6
 800691e:	e2da      	b.n	8006ed6 <scaraInitScurve+0x70e>
	 }

	 v0 = 0;
 8006920:	f04f 0300 	mov.w	r3, #0
 8006924:	f04f 0400 	mov.w	r4, #0
 8006928:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
	 v1 = 0;
 800692c:	f04f 0300 	mov.w	r3, #0
 8006930:	f04f 0400 	mov.w	r4, #0
 8006934:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
	 q0 = 0;
 8006938:	f04f 0300 	mov.w	r3, #0
 800693c:	f04f 0400 	mov.w	r4, #0
 8006940:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	 q1 = total_s;
 8006944:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8006948:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0

	 if ( total_s < 0) {
 800694c:	f04f 0200 	mov.w	r2, #0
 8006950:	f04f 0300 	mov.w	r3, #0
 8006954:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006958:	f7fa f8d0 	bl	8000afc <__aeabi_dcmplt>
 800695c:	4603      	mov	r3, r0
 800695e:	2b00      	cmp	r3, #0
 8006960:	d015      	beq.n	800698e <scaraInitScurve+0x1c6>
		 dir = -1;
 8006962:	f04f 0300 	mov.w	r3, #0
 8006966:	4c54      	ldr	r4, [pc, #336]	; (8006ab8 <scaraInitScurve+0x2f0>)
 8006968:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
		 q1 = -q1;
 800696c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006970:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006974:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006978:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800697c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		 total_s = -total_s;
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	613b      	str	r3, [r7, #16]
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800698a:	617b      	str	r3, [r7, #20]
 800698c:	e004      	b.n	8006998 <scaraInitScurve+0x1d0>
	 } else {
		 dir = 1;
 800698e:	f04f 0300 	mov.w	r3, #0
 8006992:	4c4a      	ldr	r4, [pc, #296]	; (8006abc <scaraInitScurve+0x2f4>)
 8006994:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
	 }


	 if (DUTY_MODE_INIT_QVT == modeinit) {
 8006998:	7ebb      	ldrb	r3, [r7, #26]
 800699a:	2b01      	cmp	r3, #1
 800699c:	f040 80a3 	bne.w	8006ae6 <scaraInitScurve+0x31e>
		 double t_upper, v_upper, a_upper;
		 tf = scurve->Tf;
 80069a0:	69fb      	ldr	r3, [r7, #28]
 80069a2:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 80069a6:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 // Avoid division by 0
		 if (tf > 0.001) {
 80069aa:	a33f      	add	r3, pc, #252	; (adr r3, 8006aa8 <scaraInitScurve+0x2e0>)
 80069ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069b0:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80069b4:	f7fa f8c0 	bl	8000b38 <__aeabi_dcmpgt>
 80069b8:	4603      	mov	r3, r0
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	f000 8087 	beq.w	8006ace <scaraInitScurve+0x306>
			 // Assume 4 phase
			 t_upper = tf / 4;
 80069c0:	f04f 0200 	mov.w	r2, #0
 80069c4:	4b3e      	ldr	r3, [pc, #248]	; (8006ac0 <scaraInitScurve+0x2f8>)
 80069c6:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80069ca:	f7f9 ff4f 	bl	800086c <__aeabi_ddiv>
 80069ce:	4603      	mov	r3, r0
 80069d0:	460c      	mov	r4, r1
 80069d2:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
			 v_upper = total_s / (2*t_upper);
 80069d6:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80069da:	4602      	mov	r2, r0
 80069dc:	460b      	mov	r3, r1
 80069de:	f7f9 fc65 	bl	80002ac <__adddf3>
 80069e2:	4603      	mov	r3, r0
 80069e4:	460c      	mov	r4, r1
 80069e6:	461a      	mov	r2, r3
 80069e8:	4623      	mov	r3, r4
 80069ea:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80069ee:	f7f9 ff3d 	bl	800086c <__aeabi_ddiv>
 80069f2:	4603      	mov	r3, r0
 80069f4:	460c      	mov	r4, r1
 80069f6:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
			 // Check 4 phase --> 5 phase
			 if ( v_upper > v_design) {
 80069fa:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 80069fe:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8006a02:	f7fa f899 	bl	8000b38 <__aeabi_dcmpgt>
 8006a06:	4603      	mov	r3, r0
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d022      	beq.n	8006a52 <scaraInitScurve+0x28a>
				 t_upper = tf/2 - total_s/(2*v_design);
 8006a0c:	f04f 0200 	mov.w	r2, #0
 8006a10:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006a14:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8006a18:	f7f9 ff28 	bl	800086c <__aeabi_ddiv>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	460c      	mov	r4, r1
 8006a20:	4625      	mov	r5, r4
 8006a22:	461c      	mov	r4, r3
 8006a24:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006a28:	4602      	mov	r2, r0
 8006a2a:	460b      	mov	r3, r1
 8006a2c:	f7f9 fc3e 	bl	80002ac <__adddf3>
 8006a30:	4602      	mov	r2, r0
 8006a32:	460b      	mov	r3, r1
 8006a34:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006a38:	f7f9 ff18 	bl	800086c <__aeabi_ddiv>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	460b      	mov	r3, r1
 8006a40:	4620      	mov	r0, r4
 8006a42:	4629      	mov	r1, r5
 8006a44:	f7f9 fc30 	bl	80002a8 <__aeabi_dsub>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	460c      	mov	r4, r1
 8006a4c:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
 8006a50:	e003      	b.n	8006a5a <scaraInitScurve+0x292>
			 } else {
				 v_design = v_upper;
 8006a52:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8006a56:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
			 }
			 a_upper  = v_design / t_upper;
 8006a5a:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8006a5e:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006a62:	f7f9 ff03 	bl	800086c <__aeabi_ddiv>
 8006a66:	4603      	mov	r3, r0
 8006a68:	460c      	mov	r4, r1
 8006a6a:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
			 if ( a_upper > a_design) {
 8006a6e:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8006a72:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006a76:	f7fa f85f 	bl	8000b38 <__aeabi_dcmpgt>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d021      	beq.n	8006ac4 <scaraInitScurve+0x2fc>
				 return SCARA_STATUS_ERROR_OVER_ACCEL;
 8006a80:	230a      	movs	r3, #10
 8006a82:	e228      	b.n	8006ed6 <scaraInitScurve+0x70e>
 8006a84:	f3af 8000 	nop.w
 8006a88:	16bc01cb 	.word	0x16bc01cb
 8006a8c:	3ffa3069 	.word	0x3ffa3069
 8006a90:	16bc01cb 	.word	0x16bc01cb
 8006a94:	3fea3069 	.word	0x3fea3069
 8006a98:	14000000 	.word	0x14000000
 8006a9c:	4000f6f0 	.word	0x4000f6f0
 8006aa0:	14000000 	.word	0x14000000
 8006aa4:	3ff0f6f0 	.word	0x3ff0f6f0
 8006aa8:	d2f1a9fc 	.word	0xd2f1a9fc
 8006aac:	3f50624d 	.word	0x3f50624d
 8006ab0:	405b0000 	.word	0x405b0000
 8006ab4:	404b0000 	.word	0x404b0000
 8006ab8:	bff00000 	.word	0xbff00000
 8006abc:	3ff00000 	.word	0x3ff00000
 8006ac0:	40100000 	.word	0x40100000
			 } else {
				 a_design = a_upper;
 8006ac4:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8006ac8:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8006acc:	e00b      	b.n	8006ae6 <scaraInitScurve+0x31e>
			 }
		 } else {
			 v_design = 0;
 8006ace:	f04f 0300 	mov.w	r3, #0
 8006ad2:	f04f 0400 	mov.w	r4, #0
 8006ad6:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
			 a_design = 0;
 8006ada:	f04f 0300 	mov.w	r3, #0
 8006ade:	f04f 0400 	mov.w	r4, #0
 8006ae2:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
		 }
	 }
	 // Avoid division by 0
	 if (a_design > 0.0000001 && v_design > 0.0000001) {
 8006ae6:	a353      	add	r3, pc, #332	; (adr r3, 8006c34 <scaraInitScurve+0x46c>)
 8006ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aec:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8006af0:	f7fa f822 	bl	8000b38 <__aeabi_dcmpgt>
 8006af4:	4603      	mov	r3, r0
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	f000 80a4 	beq.w	8006c44 <scaraInitScurve+0x47c>
 8006afc:	a34d      	add	r3, pc, #308	; (adr r3, 8006c34 <scaraInitScurve+0x46c>)
 8006afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b02:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006b06:	f7fa f817 	bl	8000b38 <__aeabi_dcmpgt>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	f000 8099 	beq.w	8006c44 <scaraInitScurve+0x47c>
		 no_phases = 5;
 8006b12:	2305      	movs	r3, #5
 8006b14:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		 tm = v_design/a_design;
 8006b18:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8006b1c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006b20:	f7f9 fea4 	bl	800086c <__aeabi_ddiv>
 8006b24:	4603      	mov	r3, r0
 8006b26:	460c      	mov	r4, r1
 8006b28:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
		 tc = total_s/v_design - 2*tm;
 8006b2c:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8006b30:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006b34:	f7f9 fe9a 	bl	800086c <__aeabi_ddiv>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	460c      	mov	r4, r1
 8006b3c:	4625      	mov	r5, r4
 8006b3e:	461c      	mov	r4, r3
 8006b40:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8006b44:	4602      	mov	r2, r0
 8006b46:	460b      	mov	r3, r1
 8006b48:	f7f9 fbb0 	bl	80002ac <__adddf3>
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	460b      	mov	r3, r1
 8006b50:	4620      	mov	r0, r4
 8006b52:	4629      	mov	r1, r5
 8006b54:	f7f9 fba8 	bl	80002a8 <__aeabi_dsub>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	460c      	mov	r4, r1
 8006b5c:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
		 // Check condition 5 phase ---> 4 phase
		 if (tc < 0.0) {
 8006b60:	f04f 0200 	mov.w	r2, #0
 8006b64:	f04f 0300 	mov.w	r3, #0
 8006b68:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006b6c:	f7f9 ffc6 	bl	8000afc <__aeabi_dcmplt>
 8006b70:	4603      	mov	r3, r0
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d022      	beq.n	8006bbc <scaraInitScurve+0x3f4>
			 tc = 0;
 8006b76:	f04f 0300 	mov.w	r3, #0
 8006b7a:	f04f 0400 	mov.w	r4, #0
 8006b7e:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
			 no_phases = 4;
 8006b82:	2304      	movs	r3, #4
 8006b84:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			 tm = sqrt(total_s/(2*a_design));
 8006b88:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8006b8c:	4602      	mov	r2, r0
 8006b8e:	460b      	mov	r3, r1
 8006b90:	f7f9 fb8c 	bl	80002ac <__adddf3>
 8006b94:	4603      	mov	r3, r0
 8006b96:	460c      	mov	r4, r1
 8006b98:	461a      	mov	r2, r3
 8006b9a:	4623      	mov	r3, r4
 8006b9c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006ba0:	f7f9 fe64 	bl	800086c <__aeabi_ddiv>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	460c      	mov	r4, r1
 8006ba8:	ec44 3b17 	vmov	d7, r3, r4
 8006bac:	eeb0 0a47 	vmov.f32	s0, s14
 8006bb0:	eef0 0a67 	vmov.f32	s1, s15
 8006bb4:	f011 fb9e 	bl	80182f4 <sqrt>
 8006bb8:	ed87 0b2e 	vstr	d0, [r7, #184]	; 0xb8
		 }
		 if (tm < 0.001) {
 8006bbc:	a31f      	add	r3, pc, #124	; (adr r3, 8006c3c <scaraInitScurve+0x474>)
 8006bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc2:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8006bc6:	f7f9 ff99 	bl	8000afc <__aeabi_dcmplt>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d006      	beq.n	8006bde <scaraInitScurve+0x416>
			 j_max = 0;
 8006bd0:	f04f 0300 	mov.w	r3, #0
 8006bd4:	f04f 0400 	mov.w	r4, #0
 8006bd8:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
 8006bdc:	e009      	b.n	8006bf2 <scaraInitScurve+0x42a>
		 } else {
			 j_max = a_design/tm;
 8006bde:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8006be2:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8006be6:	f7f9 fe41 	bl	800086c <__aeabi_ddiv>
 8006bea:	4603      	mov	r3, r0
 8006bec:	460c      	mov	r4, r1
 8006bee:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
		 }
		 v_lim = a_design*tm;
 8006bf2:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8006bf6:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8006bfa:	f7f9 fd0d 	bl	8000618 <__aeabi_dmul>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	460c      	mov	r4, r1
 8006c02:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
		 tf    = 4*tm + tc;
 8006c06:	f04f 0200 	mov.w	r2, #0
 8006c0a:	4b09      	ldr	r3, [pc, #36]	; (8006c30 <scaraInitScurve+0x468>)
 8006c0c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8006c10:	f7f9 fd02 	bl	8000618 <__aeabi_dmul>
 8006c14:	4603      	mov	r3, r0
 8006c16:	460c      	mov	r4, r1
 8006c18:	461a      	mov	r2, r3
 8006c1a:	4623      	mov	r3, r4
 8006c1c:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006c20:	f7f9 fb44 	bl	80002ac <__adddf3>
 8006c24:	4603      	mov	r3, r0
 8006c26:	460c      	mov	r4, r1
 8006c28:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
 8006c2c:	e02a      	b.n	8006c84 <scaraInitScurve+0x4bc>
 8006c2e:	bf00      	nop
 8006c30:	40100000 	.word	0x40100000
 8006c34:	9abcaf48 	.word	0x9abcaf48
 8006c38:	3e7ad7f2 	.word	0x3e7ad7f2
 8006c3c:	d2f1a9fc 	.word	0xd2f1a9fc
 8006c40:	3f50624d 	.word	0x3f50624d
	 } else {
		 j_max = 0;
 8006c44:	f04f 0300 	mov.w	r3, #0
 8006c48:	f04f 0400 	mov.w	r4, #0
 8006c4c:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
		 tc = 0;
 8006c50:	f04f 0300 	mov.w	r3, #0
 8006c54:	f04f 0400 	mov.w	r4, #0
 8006c58:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
		 no_phases = 4;
 8006c5c:	2304      	movs	r3, #4
 8006c5e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		 tm = tf / 4;
 8006c62:	f04f 0200 	mov.w	r2, #0
 8006c66:	4ba0      	ldr	r3, [pc, #640]	; (8006ee8 <scaraInitScurve+0x720>)
 8006c68:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8006c6c:	f7f9 fdfe 	bl	800086c <__aeabi_ddiv>
 8006c70:	4603      	mov	r3, r0
 8006c72:	460c      	mov	r4, r1
 8006c74:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
		 v_lim = 0;
 8006c78:	f04f 0300 	mov.w	r3, #0
 8006c7c:	f04f 0400 	mov.w	r4, #0
 8006c80:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
	 }

	 no_sample = ceil(tf / T_SAMPLING);
 8006c84:	a396      	add	r3, pc, #600	; (adr r3, 8006ee0 <scaraInitScurve+0x718>)
 8006c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c8a:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8006c8e:	f7f9 fded 	bl	800086c <__aeabi_ddiv>
 8006c92:	4603      	mov	r3, r0
 8006c94:	460c      	mov	r4, r1
 8006c96:	ec44 3b17 	vmov	d7, r3, r4
 8006c9a:	eeb0 0a47 	vmov.f32	s0, s14
 8006c9e:	eef0 0a67 	vmov.f32	s1, s15
 8006ca2:	f011 f98d 	bl	8017fc0 <ceil>
 8006ca6:	ec54 3b10 	vmov	r3, r4, d0
 8006caa:	4618      	mov	r0, r3
 8006cac:	4621      	mov	r1, r4
 8006cae:	f7f9 ff8b 	bl	8000bc8 <__aeabi_d2uiz>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	667b      	str	r3, [r7, #100]	; 0x64
	 v_1 = 0.5*j_max*tm*tm;
 8006cb6:	f04f 0200 	mov.w	r2, #0
 8006cba:	4b8c      	ldr	r3, [pc, #560]	; (8006eec <scaraInitScurve+0x724>)
 8006cbc:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8006cc0:	f7f9 fcaa 	bl	8000618 <__aeabi_dmul>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	460c      	mov	r4, r1
 8006cc8:	4618      	mov	r0, r3
 8006cca:	4621      	mov	r1, r4
 8006ccc:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8006cd0:	f7f9 fca2 	bl	8000618 <__aeabi_dmul>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	460c      	mov	r4, r1
 8006cd8:	461a      	mov	r2, r3
 8006cda:	4623      	mov	r3, r4
 8006cdc:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8006ce0:	f7f9 fc9a 	bl	8000618 <__aeabi_dmul>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	460c      	mov	r4, r1
 8006ce8:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	 s_1 = j_max*tm*tm*tm/6;
 8006cec:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8006cf0:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8006cf4:	f7f9 fc90 	bl	8000618 <__aeabi_dmul>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	460c      	mov	r4, r1
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	4621      	mov	r1, r4
 8006d00:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8006d04:	f7f9 fc88 	bl	8000618 <__aeabi_dmul>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	460c      	mov	r4, r1
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	4621      	mov	r1, r4
 8006d10:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8006d14:	f7f9 fc80 	bl	8000618 <__aeabi_dmul>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	460c      	mov	r4, r1
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	4621      	mov	r1, r4
 8006d20:	f04f 0200 	mov.w	r2, #0
 8006d24:	4b72      	ldr	r3, [pc, #456]	; (8006ef0 <scaraInitScurve+0x728>)
 8006d26:	f7f9 fda1 	bl	800086c <__aeabi_ddiv>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	460c      	mov	r4, r1
 8006d2e:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	 v_2 = j_max*tm*tm;
 8006d32:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8006d36:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8006d3a:	f7f9 fc6d 	bl	8000618 <__aeabi_dmul>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	460c      	mov	r4, r1
 8006d42:	461a      	mov	r2, r3
 8006d44:	4623      	mov	r3, r4
 8006d46:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8006d4a:	f7f9 fc65 	bl	8000618 <__aeabi_dmul>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	460c      	mov	r4, r1
 8006d52:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
	 s_2 = v_2*tm;
 8006d56:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8006d5a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006d5e:	f7f9 fc5b 	bl	8000618 <__aeabi_dmul>
 8006d62:	4603      	mov	r3, r0
 8006d64:	460c      	mov	r4, r1
 8006d66:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
	 v_3 = v_2;
 8006d6a:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8006d6e:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	 s_3 = s_2 + v_2*tc;
 8006d72:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8006d76:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006d7a:	f7f9 fc4d 	bl	8000618 <__aeabi_dmul>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	460c      	mov	r4, r1
 8006d82:	461a      	mov	r2, r3
 8006d84:	4623      	mov	r3, r4
 8006d86:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006d8a:	f7f9 fa8f 	bl	80002ac <__adddf3>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	460c      	mov	r4, r1
 8006d92:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	 v_4 = v_1;
 8006d96:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8006d9a:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	 s_4 = s_3 + s_2 - s_1;
 8006d9e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006da2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8006da6:	f7f9 fa81 	bl	80002ac <__adddf3>
 8006daa:	4603      	mov	r3, r0
 8006dac:	460c      	mov	r4, r1
 8006dae:	4618      	mov	r0, r3
 8006db0:	4621      	mov	r1, r4
 8006db2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006db6:	f7f9 fa77 	bl	80002a8 <__aeabi_dsub>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	460c      	mov	r4, r1
 8006dbe:	e9c7 3408 	strd	r3, r4, [r7, #32]

	 scurve->Tc = tc;
 8006dc2:	69fa      	ldr	r2, [r7, #28]
 8006dc4:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 8006dc8:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	 scurve->Tf = tf;
 8006dcc:	69fa      	ldr	r2, [r7, #28]
 8006dce:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8006dd2:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	 scurve->Tm = tm;
 8006dd6:	69fa      	ldr	r2, [r7, #28]
 8006dd8:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8006ddc:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	 scurve->a_design = a_design;
 8006de0:	69fa      	ldr	r2, [r7, #28]
 8006de2:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 8006de6:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	 scurve->v_design = v_design;
 8006dea:	69fa      	ldr	r2, [r7, #28]
 8006dec:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8006df0:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	 scurve->v_lim = v_lim;
 8006df4:	69fa      	ldr	r2, [r7, #28]
 8006df6:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8006dfa:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	 scurve->v0 = v0;
 8006dfe:	69fa      	ldr	r2, [r7, #28]
 8006e00:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8006e04:	e9c2 3406 	strd	r3, r4, [r2, #24]
	 scurve->v1 = v1;
 8006e08:	69fa      	ldr	r2, [r7, #28]
 8006e0a:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8006e0e:	e9c2 3408 	strd	r3, r4, [r2, #32]
	 scurve->j_max = j_max;
 8006e12:	69fa      	ldr	r2, [r7, #28]
 8006e14:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8006e18:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	 scurve->s0   = q0;
 8006e1c:	69fa      	ldr	r2, [r7, #28]
 8006e1e:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8006e22:	e9c2 3402 	strd	r3, r4, [r2, #8]
	 scurve->s1   = q1;
 8006e26:	69fa      	ldr	r2, [r7, #28]
 8006e28:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 8006e2c:	e9c2 3404 	strd	r3, r4, [r2, #16]
	 scurve->num_of_phase = no_phases;
 8006e30:	69fb      	ldr	r3, [r7, #28]
 8006e32:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 8006e36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	 scurve->num_of_sampling = no_sample;
 8006e3a:	69fb      	ldr	r3, [r7, #28]
 8006e3c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006e3e:	669a      	str	r2, [r3, #104]	; 0x68
	 scurve->total_s = total_s;
 8006e40:	69fa      	ldr	r2, [r7, #28]
 8006e42:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8006e46:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	 scurve->dir = dir;
 8006e4a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8006e4e:	f7f9 fe93 	bl	8000b78 <__aeabi_d2iz>
 8006e52:	4603      	mov	r3, r0
 8006e54:	b25a      	sxtb	r2, r3
 8006e56:	69fb      	ldr	r3, [r7, #28]
 8006e58:	701a      	strb	r2, [r3, #0]

	 scurve->a_current = 0;
 8006e5a:	69fa      	ldr	r2, [r7, #28]
 8006e5c:	f04f 0300 	mov.w	r3, #0
 8006e60:	f04f 0400 	mov.w	r4, #0
 8006e64:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
	 scurve->v_current = 0;
 8006e68:	69fa      	ldr	r2, [r7, #28]
 8006e6a:	f04f 0300 	mov.w	r3, #0
 8006e6e:	f04f 0400 	mov.w	r4, #0
 8006e72:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
	 scurve->s_current = 0;
 8006e76:	69fa      	ldr	r2, [r7, #28]
 8006e78:	f04f 0300 	mov.w	r3, #0
 8006e7c:	f04f 0400 	mov.w	r4, #0
 8006e80:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
	 scurve->v_1 = v_1;
 8006e84:	69fa      	ldr	r2, [r7, #28]
 8006e86:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8006e8a:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	 scurve->v_2 = v_2;
 8006e8e:	69fa      	ldr	r2, [r7, #28]
 8006e90:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8006e94:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
	 scurve->v_3 = v_3;
 8006e98:	69fa      	ldr	r2, [r7, #28]
 8006e9a:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8006e9e:	e9c2 3426 	strd	r3, r4, [r2, #152]	; 0x98
	 scurve->v_4 = v_4;
 8006ea2:	69fa      	ldr	r2, [r7, #28]
 8006ea4:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8006ea8:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
	 scurve->s_1 = s_1;
 8006eac:	69fa      	ldr	r2, [r7, #28]
 8006eae:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8006eb2:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
	 scurve->s_2 = s_2;
 8006eb6:	69fa      	ldr	r2, [r7, #28]
 8006eb8:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8006ebc:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
	 scurve->s_3 = s_3;
 8006ec0:	69fa      	ldr	r2, [r7, #28]
 8006ec2:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8006ec6:	e9c2 3428 	strd	r3, r4, [r2, #160]	; 0xa0
	 scurve->s_4 = s_4;
 8006eca:	69fa      	ldr	r2, [r7, #28]
 8006ecc:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8006ed0:	e9c2 342c 	strd	r3, r4, [r2, #176]	; 0xb0

	 return SCARA_STATUS_OK;
 8006ed4:	2300      	movs	r3, #0
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	37e8      	adds	r7, #232	; 0xe8
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bdb0      	pop	{r4, r5, r7, pc}
 8006ede:	bf00      	nop
 8006ee0:	40000000 	.word	0x40000000
 8006ee4:	3f847ae1 	.word	0x3f847ae1
 8006ee8:	40100000 	.word	0x40100000
 8006eec:	3fe00000 	.word	0x3fe00000
 8006ef0:	40180000 	.word	0x40180000

08006ef4 <scaraFlowDuty>:

/* Compute new x, y ,z corresponding to time */
SCARA_StatusTypeDef	scaraFlowDuty		(double time,
										SCARA_PositionTypeDef *pos_Next ,
										SCARA_PositionTypeDef pos_Current) {
 8006ef4:	b082      	sub	sp, #8
 8006ef6:	b5b0      	push	{r4, r5, r7, lr}
 8006ef8:	b0ce      	sub	sp, #312	; 0x138
 8006efa:	af18      	add	r7, sp, #96	; 0x60
 8006efc:	ed87 0b02 	vstr	d0, [r7, #8]
 8006f00:	6078      	str	r0, [r7, #4]
 8006f02:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 8006f06:	e881 000c 	stmia.w	r1, {r2, r3}
	SCARA_StatusTypeDef status1, status2, status3, status4;
	SCARA_PositionTypeDef	positionCompute;
	// Update time
	positionCompute.t = time;
 8006f0a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8006f0e:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	/*---- Task space ----*/
	if ( DUTY_SPACE_TASK == myDUTY.space_type) {
 8006f12:	4ba0      	ldr	r3, [pc, #640]	; (8007194 <scaraFlowDuty+0x2a0>)
 8006f14:	781b      	ldrb	r3, [r3, #0]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	f040 80e1 	bne.w	80070de <scaraFlowDuty+0x1ea>
		double s, angle, x, y, z;
		int8_t	dir_roll;
		//---Trajectory flowing
			// LSPB
		if( DUTY_TRAJECTORY_LSPB == myDUTY.task.trajectory_3d.trajectory_type) {
 8006f1c:	4b9d      	ldr	r3, [pc, #628]	; (8007194 <scaraFlowDuty+0x2a0>)
 8006f1e:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d11f      	bne.n	8006f66 <scaraFlowDuty+0x72>
			status1 = scaraFlowLSPB(&(myDUTY.task.trajectory_3d.lspb), time);
 8006f26:	ed97 0b02 	vldr	d0, [r7, #8]
 8006f2a:	489b      	ldr	r0, [pc, #620]	; (8007198 <scaraFlowDuty+0x2a4>)
 8006f2c:	f000 fb78 	bl	8007620 <scaraFlowLSPB>
 8006f30:	4603      	mov	r3, r0
 8006f32:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
			status2 = scaraFlowLSPB(&(myDUTY.task.trajectory_roll.lspb), time);
 8006f36:	ed97 0b02 	vldr	d0, [r7, #8]
 8006f3a:	4898      	ldr	r0, [pc, #608]	; (800719c <scaraFlowDuty+0x2a8>)
 8006f3c:	f000 fb70 	bl	8007620 <scaraFlowLSPB>
 8006f40:	4603      	mov	r3, r0
 8006f42:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
			s = myDUTY.task.trajectory_3d.lspb.s_current;
 8006f46:	4b93      	ldr	r3, [pc, #588]	; (8007194 <scaraFlowDuty+0x2a0>)
 8006f48:	e9d3 3464 	ldrd	r3, r4, [r3, #400]	; 0x190
 8006f4c:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
			angle = myDUTY.task.trajectory_roll.lspb.s_current;
 8006f50:	4b90      	ldr	r3, [pc, #576]	; (8007194 <scaraFlowDuty+0x2a0>)
 8006f52:	e9d3 34ba 	ldrd	r3, r4, [r3, #744]	; 0x2e8
 8006f56:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
			dir_roll = myDUTY.task.trajectory_roll.lspb.dir;
 8006f5a:	4b8e      	ldr	r3, [pc, #568]	; (8007194 <scaraFlowDuty+0x2a0>)
 8006f5c:	f893 3270 	ldrb.w	r3, [r3, #624]	; 0x270
 8006f60:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8006f64:	e026      	b.n	8006fb4 <scaraFlowDuty+0xc0>
			// SCURVE
		} else if ( DUTY_TRAJECTORY_SCURVE == myDUTY.task.trajectory_3d.trajectory_type) {
 8006f66:	4b8b      	ldr	r3, [pc, #556]	; (8007194 <scaraFlowDuty+0x2a0>)
 8006f68:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d11f      	bne.n	8006fb0 <scaraFlowDuty+0xbc>
			status1 = scaraFLowScurve(&(myDUTY.task.trajectory_3d.scurve), time);
 8006f70:	ed97 0b02 	vldr	d0, [r7, #8]
 8006f74:	488a      	ldr	r0, [pc, #552]	; (80071a0 <scaraFlowDuty+0x2ac>)
 8006f76:	f000 fcff 	bl	8007978 <scaraFLowScurve>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
			status2 = scaraFLowScurve(&(myDUTY.task.trajectory_roll.scurve), time);
 8006f80:	ed97 0b02 	vldr	d0, [r7, #8]
 8006f84:	4887      	ldr	r0, [pc, #540]	; (80071a4 <scaraFlowDuty+0x2b0>)
 8006f86:	f000 fcf7 	bl	8007978 <scaraFLowScurve>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
			s = myDUTY.task.trajectory_3d.scurve.s_current;
 8006f90:	4b80      	ldr	r3, [pc, #512]	; (8007194 <scaraFlowDuty+0x2a0>)
 8006f92:	e9d3 3498 	ldrd	r3, r4, [r3, #608]	; 0x260
 8006f96:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
			angle = myDUTY.task.trajectory_roll.scurve.s_current;
 8006f9a:	4b7e      	ldr	r3, [pc, #504]	; (8007194 <scaraFlowDuty+0x2a0>)
 8006f9c:	e9d3 34ee 	ldrd	r3, r4, [r3, #952]	; 0x3b8
 8006fa0:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
			dir_roll = myDUTY.task.trajectory_roll.scurve.dir;
 8006fa4:	4b7b      	ldr	r3, [pc, #492]	; (8007194 <scaraFlowDuty+0x2a0>)
 8006fa6:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
 8006faa:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8006fae:	e001      	b.n	8006fb4 <scaraFlowDuty+0xc0>
		} else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 8006fb0:	2305      	movs	r3, #5
 8006fb2:	e211      	b.n	80073d8 <scaraFlowDuty+0x4e4>
		}

		if ( SCARA_STATUS_OK != status1) {
 8006fb4:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d002      	beq.n	8006fc2 <scaraFlowDuty+0xce>
			return status1;
 8006fbc:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8006fc0:	e20a      	b.n	80073d8 <scaraFlowDuty+0x4e4>
		}
		if ( SCARA_STATUS_OK != status2) {
 8006fc2:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d002      	beq.n	8006fd0 <scaraFlowDuty+0xdc>
			return status2;
 8006fca:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 8006fce:	e203      	b.n	80073d8 <scaraFlowDuty+0x4e4>
		}

		//---Path flowing
			// Straight line
		if( DUTY_PATH_LINE == myDUTY.task.path.path_type) {
 8006fd0:	4b70      	ldr	r3, [pc, #448]	; (8007194 <scaraFlowDuty+0x2a0>)
 8006fd2:	7a1b      	ldrb	r3, [r3, #8]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d117      	bne.n	8007008 <scaraFlowDuty+0x114>
			status1 = scaraFlowLine(&(myDUTY.task.path.line), s);
 8006fd8:	ed97 0b32 	vldr	d0, [r7, #200]	; 0xc8
 8006fdc:	4872      	ldr	r0, [pc, #456]	; (80071a8 <scaraFlowDuty+0x2b4>)
 8006fde:	f000 fa0f 	bl	8007400 <scaraFlowLine>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
			x = myDUTY.task.path.line.x_current;
 8006fe8:	4b6a      	ldr	r3, [pc, #424]	; (8007194 <scaraFlowDuty+0x2a0>)
 8006fea:	e9d3 341a 	ldrd	r3, r4, [r3, #104]	; 0x68
 8006fee:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
			y = myDUTY.task.path.line.y_current;
 8006ff2:	4b68      	ldr	r3, [pc, #416]	; (8007194 <scaraFlowDuty+0x2a0>)
 8006ff4:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8006ff8:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
			z = myDUTY.task.path.line.z_current;
 8006ffc:	4b65      	ldr	r3, [pc, #404]	; (8007194 <scaraFlowDuty+0x2a0>)
 8006ffe:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 8007002:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
 8007006:	e01d      	b.n	8007044 <scaraFlowDuty+0x150>
			// Circular
		} else if ( DUTY_PATH_CIRCLE == myDUTY.task.path.path_type) {
 8007008:	4b62      	ldr	r3, [pc, #392]	; (8007194 <scaraFlowDuty+0x2a0>)
 800700a:	7a1b      	ldrb	r3, [r3, #8]
 800700c:	2b01      	cmp	r3, #1
 800700e:	d117      	bne.n	8007040 <scaraFlowDuty+0x14c>
			status1 = scaraFlowCircle(&(myDUTY.task.path.circle), s);
 8007010:	ed97 0b32 	vldr	d0, [r7, #200]	; 0xc8
 8007014:	4865      	ldr	r0, [pc, #404]	; (80071ac <scaraFlowDuty+0x2b8>)
 8007016:	f000 fa7b 	bl	8007510 <scaraFlowCircle>
 800701a:	4603      	mov	r3, r0
 800701c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
			x = myDUTY.task.path.circle.x_current;
 8007020:	4b5c      	ldr	r3, [pc, #368]	; (8007194 <scaraFlowDuty+0x2a0>)
 8007022:	e9d3 343e 	ldrd	r3, r4, [r3, #248]	; 0xf8
 8007026:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
			y = myDUTY.task.path.circle.y_current;
 800702a:	4b5a      	ldr	r3, [pc, #360]	; (8007194 <scaraFlowDuty+0x2a0>)
 800702c:	e9d3 3440 	ldrd	r3, r4, [r3, #256]	; 0x100
 8007030:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
			z = myDUTY.task.path.circle.z_current;
 8007034:	4b57      	ldr	r3, [pc, #348]	; (8007194 <scaraFlowDuty+0x2a0>)
 8007036:	e9d3 3442 	ldrd	r3, r4, [r3, #264]	; 0x108
 800703a:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
 800703e:	e001      	b.n	8007044 <scaraFlowDuty+0x150>
		} else {
			return SCARA_STATUS_ERROR_TASK;
 8007040:	2303      	movs	r3, #3
 8007042:	e1c9      	b.n	80073d8 <scaraFlowDuty+0x4e4>
		}

		positionCompute.x 		= x;
 8007044:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8007048:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
		positionCompute.y		= y;
 800704c:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 8007050:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
		positionCompute.z 		= z;
 8007054:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8007058:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		positionCompute.roll 	= myDUTY.task.roll_start + angle*dir_roll;
 800705c:	4b4d      	ldr	r3, [pc, #308]	; (8007194 <scaraFlowDuty+0x2a0>)
 800705e:	e9d3 45f0 	ldrd	r4, r5, [r3, #960]	; 0x3c0
 8007062:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8007066:	4618      	mov	r0, r3
 8007068:	f7f9 fa6c 	bl	8000544 <__aeabi_i2d>
 800706c:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8007070:	f7f9 fad2 	bl	8000618 <__aeabi_dmul>
 8007074:	4602      	mov	r2, r0
 8007076:	460b      	mov	r3, r1
 8007078:	4620      	mov	r0, r4
 800707a:	4629      	mov	r1, r5
 800707c:	f7f9 f916 	bl	80002ac <__adddf3>
 8007080:	4603      	mov	r3, r0
 8007082:	460c      	mov	r4, r1
 8007084:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
		positionCompute.q		= s;
 8007088:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 800708c:	e9c7 3404 	strd	r3, r4, [r7, #16]
		positionCompute.total_time = myDUTY.time_total;
 8007090:	4b40      	ldr	r3, [pc, #256]	; (8007194 <scaraFlowDuty+0x2a0>)
 8007092:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8007096:	e9d3 3400 	ldrd	r3, r4, [r3]
 800709a:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
		positionCompute.t		= time;
 800709e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80070a2:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
		if ( FALSE == kinematicInverse(&positionCompute, pos_Current)) {
 80070a6:	f107 0410 	add.w	r4, r7, #16
 80070aa:	4668      	mov	r0, sp
 80070ac:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80070b0:	2260      	movs	r2, #96	; 0x60
 80070b2:	4619      	mov	r1, r3
 80070b4:	f00c fdd4 	bl	8013c60 <memcpy>
 80070b8:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80070bc:	cb0c      	ldmia	r3, {r2, r3}
 80070be:	4620      	mov	r0, r4
 80070c0:	f7fb ffc2 	bl	8003048 <kinematicInverse>
 80070c4:	4603      	mov	r3, r0
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d101      	bne.n	80070ce <scaraFlowDuty+0x1da>
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 80070ca:	2307      	movs	r3, #7
 80070cc:	e184      	b.n	80073d8 <scaraFlowDuty+0x4e4>
		} else {
			memcpy(pos_Next, &positionCompute, sizeof(SCARA_PositionTypeDef));
 80070ce:	f107 0310 	add.w	r3, r7, #16
 80070d2:	2268      	movs	r2, #104	; 0x68
 80070d4:	4619      	mov	r1, r3
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f00c fdc2 	bl	8013c60 <memcpy>
 80070dc:	e17b      	b.n	80073d6 <scaraFlowDuty+0x4e2>
		}

	/*---- Joint space -----*/
	} else if (DUTY_SPACE_JOINT == myDUTY.space_type) {
 80070de:	4b2d      	ldr	r3, [pc, #180]	; (8007194 <scaraFlowDuty+0x2a0>)
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	2b01      	cmp	r3, #1
 80070e4:	f040 8175 	bne.w	80073d2 <scaraFlowDuty+0x4de>
		double s0, s1, s2, s3;
		int8_t dir0, dir1, dir2, dir3;
		// Trajectory flowing
			// LSPB
		if( DUTY_TRAJECTORY_LSPB == myDUTY.joint.trajectory[0].trajectory_type) {
 80070e8:	4b2a      	ldr	r3, [pc, #168]	; (8007194 <scaraFlowDuty+0x2a0>)
 80070ea:	f893 33c8 	ldrb.w	r3, [r3, #968]	; 0x3c8
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d166      	bne.n	80071c0 <scaraFlowDuty+0x2cc>
			status1 = scaraFlowLSPB(&(myDUTY.joint.trajectory[0].lspb), time);
 80070f2:	ed97 0b02 	vldr	d0, [r7, #8]
 80070f6:	482e      	ldr	r0, [pc, #184]	; (80071b0 <scaraFlowDuty+0x2bc>)
 80070f8:	f000 fa92 	bl	8007620 <scaraFlowLSPB>
 80070fc:	4603      	mov	r3, r0
 80070fe:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
			status2 = scaraFlowLSPB(&(myDUTY.joint.trajectory[1].lspb), time);
 8007102:	ed97 0b02 	vldr	d0, [r7, #8]
 8007106:	482b      	ldr	r0, [pc, #172]	; (80071b4 <scaraFlowDuty+0x2c0>)
 8007108:	f000 fa8a 	bl	8007620 <scaraFlowLSPB>
 800710c:	4603      	mov	r3, r0
 800710e:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
			status3 = scaraFlowLSPB(&(myDUTY.joint.trajectory[2].lspb), time);
 8007112:	ed97 0b02 	vldr	d0, [r7, #8]
 8007116:	4828      	ldr	r0, [pc, #160]	; (80071b8 <scaraFlowDuty+0x2c4>)
 8007118:	f000 fa82 	bl	8007620 <scaraFlowLSPB>
 800711c:	4603      	mov	r3, r0
 800711e:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
			status4 = scaraFlowLSPB(&(myDUTY.joint.trajectory[3].lspb), time);
 8007122:	ed97 0b02 	vldr	d0, [r7, #8]
 8007126:	4825      	ldr	r0, [pc, #148]	; (80071bc <scaraFlowDuty+0x2c8>)
 8007128:	f000 fa7a 	bl	8007620 <scaraFlowLSPB>
 800712c:	4603      	mov	r3, r0
 800712e:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4
			dir0 = myDUTY.joint.trajectory[0].lspb.dir;
 8007132:	4b18      	ldr	r3, [pc, #96]	; (8007194 <scaraFlowDuty+0x2a0>)
 8007134:	f893 33d0 	ldrb.w	r3, [r3, #976]	; 0x3d0
 8007138:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			dir1 = myDUTY.joint.trajectory[1].lspb.dir;
 800713c:	4b15      	ldr	r3, [pc, #84]	; (8007194 <scaraFlowDuty+0x2a0>)
 800713e:	f893 3528 	ldrb.w	r3, [r3, #1320]	; 0x528
 8007142:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
			dir2 = myDUTY.joint.trajectory[2].lspb.dir;
 8007146:	4b13      	ldr	r3, [pc, #76]	; (8007194 <scaraFlowDuty+0x2a0>)
 8007148:	f893 3680 	ldrb.w	r3, [r3, #1664]	; 0x680
 800714c:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
			dir3 = myDUTY.joint.trajectory[3].lspb.dir;
 8007150:	4b10      	ldr	r3, [pc, #64]	; (8007194 <scaraFlowDuty+0x2a0>)
 8007152:	f893 37d8 	ldrb.w	r3, [r3, #2008]	; 0x7d8
 8007156:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
			s0 = myDUTY.joint.trajectory[0].lspb.s_current;
 800715a:	4b0e      	ldr	r3, [pc, #56]	; (8007194 <scaraFlowDuty+0x2a0>)
 800715c:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 8007160:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007164:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
			s1 = myDUTY.joint.trajectory[1].lspb.s_current;
 8007168:	4b0a      	ldr	r3, [pc, #40]	; (8007194 <scaraFlowDuty+0x2a0>)
 800716a:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 800716e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007172:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
			s2 = myDUTY.joint.trajectory[2].lspb.s_current;
 8007176:	4b07      	ldr	r3, [pc, #28]	; (8007194 <scaraFlowDuty+0x2a0>)
 8007178:	f503 63df 	add.w	r3, r3, #1784	; 0x6f8
 800717c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007180:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
			s3 = myDUTY.joint.trajectory[3].lspb.s_current;
 8007184:	4b03      	ldr	r3, [pc, #12]	; (8007194 <scaraFlowDuty+0x2a0>)
 8007186:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 800718a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800718e:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
 8007192:	e06d      	b.n	8007270 <scaraFlowDuty+0x37c>
 8007194:	200053a0 	.word	0x200053a0
 8007198:	200054b8 	.word	0x200054b8
 800719c:	20005610 	.word	0x20005610
 80071a0:	20005538 	.word	0x20005538
 80071a4:	20005690 	.word	0x20005690
 80071a8:	200053b0 	.word	0x200053b0
 80071ac:	20005420 	.word	0x20005420
 80071b0:	20005770 	.word	0x20005770
 80071b4:	200058c8 	.word	0x200058c8
 80071b8:	20005a20 	.word	0x20005a20
 80071bc:	20005b78 	.word	0x20005b78

			// SCURVE
		} else if ( DUTY_TRAJECTORY_SCURVE == myDUTY.joint.trajectory[0].trajectory_type) {
 80071c0:	4b89      	ldr	r3, [pc, #548]	; (80073e8 <scaraFlowDuty+0x4f4>)
 80071c2:	f893 33c8 	ldrb.w	r3, [r3, #968]	; 0x3c8
 80071c6:	2b01      	cmp	r3, #1
 80071c8:	d150      	bne.n	800726c <scaraFlowDuty+0x378>
			status1 = scaraFLowScurve(&(myDUTY.joint.trajectory[0].scurve), time);
 80071ca:	ed97 0b02 	vldr	d0, [r7, #8]
 80071ce:	4887      	ldr	r0, [pc, #540]	; (80073ec <scaraFlowDuty+0x4f8>)
 80071d0:	f000 fbd2 	bl	8007978 <scaraFLowScurve>
 80071d4:	4603      	mov	r3, r0
 80071d6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
			status2 = scaraFLowScurve(&(myDUTY.joint.trajectory[1].scurve), time);
 80071da:	ed97 0b02 	vldr	d0, [r7, #8]
 80071de:	4884      	ldr	r0, [pc, #528]	; (80073f0 <scaraFlowDuty+0x4fc>)
 80071e0:	f000 fbca 	bl	8007978 <scaraFLowScurve>
 80071e4:	4603      	mov	r3, r0
 80071e6:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
			status3 = scaraFLowScurve(&(myDUTY.joint.trajectory[2].scurve), time);
 80071ea:	ed97 0b02 	vldr	d0, [r7, #8]
 80071ee:	4881      	ldr	r0, [pc, #516]	; (80073f4 <scaraFlowDuty+0x500>)
 80071f0:	f000 fbc2 	bl	8007978 <scaraFLowScurve>
 80071f4:	4603      	mov	r3, r0
 80071f6:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
			status4 = scaraFLowScurve(&(myDUTY.joint.trajectory[3].scurve), time);
 80071fa:	ed97 0b02 	vldr	d0, [r7, #8]
 80071fe:	487e      	ldr	r0, [pc, #504]	; (80073f8 <scaraFlowDuty+0x504>)
 8007200:	f000 fbba 	bl	8007978 <scaraFLowScurve>
 8007204:	4603      	mov	r3, r0
 8007206:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4
			dir0 = myDUTY.joint.trajectory[0].scurve.dir;
 800720a:	4b77      	ldr	r3, [pc, #476]	; (80073e8 <scaraFlowDuty+0x4f4>)
 800720c:	f893 3450 	ldrb.w	r3, [r3, #1104]	; 0x450
 8007210:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			dir1 = myDUTY.joint.trajectory[1].scurve.dir;
 8007214:	4b74      	ldr	r3, [pc, #464]	; (80073e8 <scaraFlowDuty+0x4f4>)
 8007216:	f893 35a8 	ldrb.w	r3, [r3, #1448]	; 0x5a8
 800721a:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
			dir2 = myDUTY.joint.trajectory[2].scurve.dir;
 800721e:	4b72      	ldr	r3, [pc, #456]	; (80073e8 <scaraFlowDuty+0x4f4>)
 8007220:	f893 3700 	ldrb.w	r3, [r3, #1792]	; 0x700
 8007224:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
			dir3 = myDUTY.joint.trajectory[3].scurve.dir;
 8007228:	4b6f      	ldr	r3, [pc, #444]	; (80073e8 <scaraFlowDuty+0x4f4>)
 800722a:	f893 3858 	ldrb.w	r3, [r3, #2136]	; 0x858
 800722e:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
			s0 = myDUTY.joint.trajectory[0].scurve.s_current;
 8007232:	4b6d      	ldr	r3, [pc, #436]	; (80073e8 <scaraFlowDuty+0x4f4>)
 8007234:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 8007238:	e9d3 3400 	ldrd	r3, r4, [r3]
 800723c:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
			s1 = myDUTY.joint.trajectory[1].scurve.s_current;
 8007240:	4b69      	ldr	r3, [pc, #420]	; (80073e8 <scaraFlowDuty+0x4f4>)
 8007242:	f503 63ce 	add.w	r3, r3, #1648	; 0x670
 8007246:	e9d3 3400 	ldrd	r3, r4, [r3]
 800724a:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
			s2 = myDUTY.joint.trajectory[2].scurve.s_current;
 800724e:	4b66      	ldr	r3, [pc, #408]	; (80073e8 <scaraFlowDuty+0x4f4>)
 8007250:	f503 63f9 	add.w	r3, r3, #1992	; 0x7c8
 8007254:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007258:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
			s3 = myDUTY.joint.trajectory[3].scurve.s_current;
 800725c:	4b62      	ldr	r3, [pc, #392]	; (80073e8 <scaraFlowDuty+0x4f4>)
 800725e:	f503 6312 	add.w	r3, r3, #2336	; 0x920
 8007262:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007266:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
 800726a:	e001      	b.n	8007270 <scaraFlowDuty+0x37c>
		} else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 800726c:	2305      	movs	r3, #5
 800726e:	e0b3      	b.n	80073d8 <scaraFlowDuty+0x4e4>
		}
		// Check init status
		if ( SCARA_STATUS_OK != status1) {
 8007270:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8007274:	2b00      	cmp	r3, #0
 8007276:	d002      	beq.n	800727e <scaraFlowDuty+0x38a>
			return status1;
 8007278:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 800727c:	e0ac      	b.n	80073d8 <scaraFlowDuty+0x4e4>
		}
		if ( SCARA_STATUS_OK != status2) {
 800727e:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 8007282:	2b00      	cmp	r3, #0
 8007284:	d002      	beq.n	800728c <scaraFlowDuty+0x398>
			return status2;
 8007286:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 800728a:	e0a5      	b.n	80073d8 <scaraFlowDuty+0x4e4>
		}
		if ( SCARA_STATUS_OK != status3) {
 800728c:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 8007290:	2b00      	cmp	r3, #0
 8007292:	d002      	beq.n	800729a <scaraFlowDuty+0x3a6>
			return status3;
 8007294:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 8007298:	e09e      	b.n	80073d8 <scaraFlowDuty+0x4e4>
		}
		if ( SCARA_STATUS_OK != status4) {
 800729a:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d002      	beq.n	80072a8 <scaraFlowDuty+0x3b4>
			return status4;
 80072a2:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 80072a6:	e097      	b.n	80073d8 <scaraFlowDuty+0x4e4>
		}

		positionCompute.Theta1 	= myDUTY.joint.theta1_start + s0*dir0;
 80072a8:	4b4f      	ldr	r3, [pc, #316]	; (80073e8 <scaraFlowDuty+0x4f4>)
 80072aa:	f603 1328 	addw	r3, r3, #2344	; 0x928
 80072ae:	e9d3 4500 	ldrd	r4, r5, [r3]
 80072b2:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 80072b6:	4618      	mov	r0, r3
 80072b8:	f7f9 f944 	bl	8000544 <__aeabi_i2d>
 80072bc:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80072c0:	f7f9 f9aa 	bl	8000618 <__aeabi_dmul>
 80072c4:	4602      	mov	r2, r0
 80072c6:	460b      	mov	r3, r1
 80072c8:	4620      	mov	r0, r4
 80072ca:	4629      	mov	r1, r5
 80072cc:	f7f8 ffee 	bl	80002ac <__adddf3>
 80072d0:	4603      	mov	r3, r0
 80072d2:	460c      	mov	r4, r1
 80072d4:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
		positionCompute.Theta2 	= myDUTY.joint.theta2_start + s1*dir1;
 80072d8:	4b43      	ldr	r3, [pc, #268]	; (80073e8 <scaraFlowDuty+0x4f4>)
 80072da:	f503 6313 	add.w	r3, r3, #2352	; 0x930
 80072de:	e9d3 4500 	ldrd	r4, r5, [r3]
 80072e2:	f997 307e 	ldrsb.w	r3, [r7, #126]	; 0x7e
 80072e6:	4618      	mov	r0, r3
 80072e8:	f7f9 f92c 	bl	8000544 <__aeabi_i2d>
 80072ec:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80072f0:	f7f9 f992 	bl	8000618 <__aeabi_dmul>
 80072f4:	4602      	mov	r2, r0
 80072f6:	460b      	mov	r3, r1
 80072f8:	4620      	mov	r0, r4
 80072fa:	4629      	mov	r1, r5
 80072fc:	f7f8 ffd6 	bl	80002ac <__adddf3>
 8007300:	4603      	mov	r3, r0
 8007302:	460c      	mov	r4, r1
 8007304:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
		positionCompute.D3 		= myDUTY.joint.d3_start 	+ s2*dir2;
 8007308:	4b37      	ldr	r3, [pc, #220]	; (80073e8 <scaraFlowDuty+0x4f4>)
 800730a:	f603 1338 	addw	r3, r3, #2360	; 0x938
 800730e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007312:	f997 307d 	ldrsb.w	r3, [r7, #125]	; 0x7d
 8007316:	4618      	mov	r0, r3
 8007318:	f7f9 f914 	bl	8000544 <__aeabi_i2d>
 800731c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8007320:	f7f9 f97a 	bl	8000618 <__aeabi_dmul>
 8007324:	4602      	mov	r2, r0
 8007326:	460b      	mov	r3, r1
 8007328:	4620      	mov	r0, r4
 800732a:	4629      	mov	r1, r5
 800732c:	f7f8 ffbe 	bl	80002ac <__adddf3>
 8007330:	4603      	mov	r3, r0
 8007332:	460c      	mov	r4, r1
 8007334:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
		positionCompute.Theta4 	= myDUTY.joint.theta4_start + s3*dir3;
 8007338:	4b2b      	ldr	r3, [pc, #172]	; (80073e8 <scaraFlowDuty+0x4f4>)
 800733a:	f503 6314 	add.w	r3, r3, #2368	; 0x940
 800733e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007342:	f997 307c 	ldrsb.w	r3, [r7, #124]	; 0x7c
 8007346:	4618      	mov	r0, r3
 8007348:	f7f9 f8fc 	bl	8000544 <__aeabi_i2d>
 800734c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8007350:	f7f9 f962 	bl	8000618 <__aeabi_dmul>
 8007354:	4602      	mov	r2, r0
 8007356:	460b      	mov	r3, r1
 8007358:	4620      	mov	r0, r4
 800735a:	4629      	mov	r1, r5
 800735c:	f7f8 ffa6 	bl	80002ac <__adddf3>
 8007360:	4603      	mov	r3, r0
 8007362:	460c      	mov	r4, r1
 8007364:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
		positionCompute.total_time = myDUTY.time_total;
 8007368:	4b1f      	ldr	r3, [pc, #124]	; (80073e8 <scaraFlowDuty+0x4f4>)
 800736a:	f603 1348 	addw	r3, r3, #2376	; 0x948
 800736e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007372:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
		positionCompute.t		= time;
 8007376:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800737a:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
		// Check workspace
		if( SCARA_STATUS_OK != scaraCheckWorkSpace4(positionCompute.Theta1,
 800737e:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8007382:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 8007386:	ed97 5b1a 	vldr	d5, [r7, #104]	; 0x68
 800738a:	ed97 4b1c 	vldr	d4, [r7, #112]	; 0x70
 800738e:	eeb0 3a44 	vmov.f32	s6, s8
 8007392:	eef0 3a64 	vmov.f32	s7, s9
 8007396:	eeb0 2a45 	vmov.f32	s4, s10
 800739a:	eef0 2a65 	vmov.f32	s5, s11
 800739e:	eeb0 1a46 	vmov.f32	s2, s12
 80073a2:	eef0 1a66 	vmov.f32	s3, s13
 80073a6:	eeb0 0a47 	vmov.f32	s0, s14
 80073aa:	eef0 0a67 	vmov.f32	s1, s15
 80073ae:	f001 f9c7 	bl	8008740 <scaraCheckWorkSpace4>
 80073b2:	4603      	mov	r3, r0
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d001      	beq.n	80073bc <scaraFlowDuty+0x4c8>
							 	 	 	  positionCompute.Theta2,
										  positionCompute.D3,
										  positionCompute.Theta4)) {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 80073b8:	2307      	movs	r3, #7
 80073ba:	e00d      	b.n	80073d8 <scaraFlowDuty+0x4e4>
		} else {
			memcpy(pos_Next, &positionCompute, sizeof(SCARA_PositionTypeDef));
 80073bc:	f107 0310 	add.w	r3, r7, #16
 80073c0:	2268      	movs	r2, #104	; 0x68
 80073c2:	4619      	mov	r1, r3
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f00c fc4b 	bl	8013c60 <memcpy>
		}
		kinematicForward(pos_Next);
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f7fb fd00 	bl	8002dd0 <kinematicForward>
 80073d0:	e001      	b.n	80073d6 <scaraFlowDuty+0x4e2>

	} else {
		return SCARA_STATUS_ERROR_SPACE;
 80073d2:	2302      	movs	r3, #2
 80073d4:	e000      	b.n	80073d8 <scaraFlowDuty+0x4e4>
	}

	return SCARA_STATUS_OK;
 80073d6:	2300      	movs	r3, #0
}
 80073d8:	4618      	mov	r0, r3
 80073da:	37d8      	adds	r7, #216	; 0xd8
 80073dc:	46bd      	mov	sp, r7
 80073de:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80073e2:	b002      	add	sp, #8
 80073e4:	4770      	bx	lr
 80073e6:	bf00      	nop
 80073e8:	200053a0 	.word	0x200053a0
 80073ec:	200057f0 	.word	0x200057f0
 80073f0:	20005948 	.word	0x20005948
 80073f4:	20005aa0 	.word	0x20005aa0
 80073f8:	20005bf8 	.word	0x20005bf8
 80073fc:	00000000 	.word	0x00000000

08007400 <scaraFlowLine>:

/* Compute new x, y ,z corresponding to s */
SCARA_StatusTypeDef	scaraFlowLine		(Path_Line_TypeDef *line, double s) {
 8007400:	b5b0      	push	{r4, r5, r7, lr}
 8007402:	b084      	sub	sp, #16
 8007404:	af00      	add	r7, sp, #0
 8007406:	60f8      	str	r0, [r7, #12]
 8007408:	ed87 0b00 	vstr	d0, [r7]
	// Avoid div with 0
	if ( line->total_s > 0.01) {
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8007412:	a33d      	add	r3, pc, #244	; (adr r3, 8007508 <scaraFlowLine+0x108>)
 8007414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007418:	f7f9 fb8e 	bl	8000b38 <__aeabi_dcmpgt>
 800741c:	4603      	mov	r3, r0
 800741e:	2b00      	cmp	r3, #0
 8007420:	d05a      	beq.n	80074d8 <scaraFlowLine+0xd8>
		line->x_current	 = line->x0 + line->denta_x*s/line->total_s;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800742e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007432:	f7f9 f8f1 	bl	8000618 <__aeabi_dmul>
 8007436:	4602      	mov	r2, r0
 8007438:	460b      	mov	r3, r1
 800743a:	4610      	mov	r0, r2
 800743c:	4619      	mov	r1, r3
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8007444:	f7f9 fa12 	bl	800086c <__aeabi_ddiv>
 8007448:	4602      	mov	r2, r0
 800744a:	460b      	mov	r3, r1
 800744c:	4620      	mov	r0, r4
 800744e:	4629      	mov	r1, r5
 8007450:	f7f8 ff2c 	bl	80002ac <__adddf3>
 8007454:	4603      	mov	r3, r0
 8007456:	460c      	mov	r4, r1
 8007458:	68fa      	ldr	r2, [r7, #12]
 800745a:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
		line->y_current	 = line->y0 + line->denta_y*s/line->total_s;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800746a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800746e:	f7f9 f8d3 	bl	8000618 <__aeabi_dmul>
 8007472:	4602      	mov	r2, r0
 8007474:	460b      	mov	r3, r1
 8007476:	4610      	mov	r0, r2
 8007478:	4619      	mov	r1, r3
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8007480:	f7f9 f9f4 	bl	800086c <__aeabi_ddiv>
 8007484:	4602      	mov	r2, r0
 8007486:	460b      	mov	r3, r1
 8007488:	4620      	mov	r0, r4
 800748a:	4629      	mov	r1, r5
 800748c:	f7f8 ff0e 	bl	80002ac <__adddf3>
 8007490:	4603      	mov	r3, r0
 8007492:	460c      	mov	r4, r1
 8007494:	68fa      	ldr	r2, [r7, #12]
 8007496:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
		line->z_current	 = line->z0 + line->denta_z*s/line->total_s;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80074a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074aa:	f7f9 f8b5 	bl	8000618 <__aeabi_dmul>
 80074ae:	4602      	mov	r2, r0
 80074b0:	460b      	mov	r3, r1
 80074b2:	4610      	mov	r0, r2
 80074b4:	4619      	mov	r1, r3
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80074bc:	f7f9 f9d6 	bl	800086c <__aeabi_ddiv>
 80074c0:	4602      	mov	r2, r0
 80074c2:	460b      	mov	r3, r1
 80074c4:	4620      	mov	r0, r4
 80074c6:	4629      	mov	r1, r5
 80074c8:	f7f8 fef0 	bl	80002ac <__adddf3>
 80074cc:	4603      	mov	r3, r0
 80074ce:	460c      	mov	r4, r1
 80074d0:	68fa      	ldr	r2, [r7, #12]
 80074d2:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
 80074d6:	e011      	b.n	80074fc <scaraFlowLine+0xfc>
	} else {
		line->x_current = line->x1;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 80074de:	68fa      	ldr	r2, [r7, #12]
 80074e0:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
		line->y_current = line->y1;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 80074ea:	68fa      	ldr	r2, [r7, #12]
 80074ec:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
		line->z_current = line->z1;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 80074f6:	68fa      	ldr	r2, [r7, #12]
 80074f8:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
	}

	return SCARA_STATUS_OK;
 80074fc:	2300      	movs	r3, #0
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3710      	adds	r7, #16
 8007502:	46bd      	mov	sp, r7
 8007504:	bdb0      	pop	{r4, r5, r7, pc}
 8007506:	bf00      	nop
 8007508:	47ae147b 	.word	0x47ae147b
 800750c:	3f847ae1 	.word	0x3f847ae1

08007510 <scaraFlowCircle>:

/* Compute new x, y ,z corresponding to s */
SCARA_StatusTypeDef	scaraFlowCircle		(Path_Circle_TypeDef *circle, double s) {
 8007510:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007514:	b086      	sub	sp, #24
 8007516:	af00      	add	r7, sp, #0
 8007518:	60f8      	str	r0, [r7, #12]
 800751a:	ed87 0b00 	vstr	d0, [r7]
	double angle;
	angle = s/(circle->radius);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8007524:	461a      	mov	r2, r3
 8007526:	4623      	mov	r3, r4
 8007528:	e9d7 0100 	ldrd	r0, r1, [r7]
 800752c:	f7f9 f99e 	bl	800086c <__aeabi_ddiv>
 8007530:	4603      	mov	r3, r0
 8007532:	460c      	mov	r4, r1
 8007534:	e9c7 3404 	strd	r3, r4, [r7, #16]
	circle->x_current = circle->xi + circle->radius*cos(circle->angle_start + circle->dir*angle);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	e9d3 ab04 	ldrd	sl, fp, [r3, #16]
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	f993 3000 	ldrsb.w	r3, [r3]
 8007550:	4618      	mov	r0, r3
 8007552:	f7f8 fff7 	bl	8000544 <__aeabi_i2d>
 8007556:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800755a:	f7f9 f85d 	bl	8000618 <__aeabi_dmul>
 800755e:	4602      	mov	r2, r0
 8007560:	460b      	mov	r3, r1
 8007562:	4650      	mov	r0, sl
 8007564:	4659      	mov	r1, fp
 8007566:	f7f8 fea1 	bl	80002ac <__adddf3>
 800756a:	4602      	mov	r2, r0
 800756c:	460b      	mov	r3, r1
 800756e:	ec43 2b17 	vmov	d7, r2, r3
 8007572:	eeb0 0a47 	vmov.f32	s0, s14
 8007576:	eef0 0a67 	vmov.f32	s1, s15
 800757a:	f010 fda1 	bl	80180c0 <cos>
 800757e:	ec53 2b10 	vmov	r2, r3, d0
 8007582:	4640      	mov	r0, r8
 8007584:	4649      	mov	r1, r9
 8007586:	f7f9 f847 	bl	8000618 <__aeabi_dmul>
 800758a:	4602      	mov	r2, r0
 800758c:	460b      	mov	r3, r1
 800758e:	4620      	mov	r0, r4
 8007590:	4629      	mov	r1, r5
 8007592:	f7f8 fe8b 	bl	80002ac <__adddf3>
 8007596:	4603      	mov	r3, r0
 8007598:	460c      	mov	r4, r1
 800759a:	68fa      	ldr	r2, [r7, #12]
 800759c:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	circle->y_current = circle->yi + circle->radius*sin(circle->angle_start + circle->dir*angle);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	e9d3 ab04 	ldrd	sl, fp, [r3, #16]
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	f993 3000 	ldrsb.w	r3, [r3]
 80075b8:	4618      	mov	r0, r3
 80075ba:	f7f8 ffc3 	bl	8000544 <__aeabi_i2d>
 80075be:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80075c2:	f7f9 f829 	bl	8000618 <__aeabi_dmul>
 80075c6:	4602      	mov	r2, r0
 80075c8:	460b      	mov	r3, r1
 80075ca:	4650      	mov	r0, sl
 80075cc:	4659      	mov	r1, fp
 80075ce:	f7f8 fe6d 	bl	80002ac <__adddf3>
 80075d2:	4602      	mov	r2, r0
 80075d4:	460b      	mov	r3, r1
 80075d6:	ec43 2b17 	vmov	d7, r2, r3
 80075da:	eeb0 0a47 	vmov.f32	s0, s14
 80075de:	eef0 0a67 	vmov.f32	s1, s15
 80075e2:	f010 fdfd 	bl	80181e0 <sin>
 80075e6:	ec53 2b10 	vmov	r2, r3, d0
 80075ea:	4640      	mov	r0, r8
 80075ec:	4649      	mov	r1, r9
 80075ee:	f7f9 f813 	bl	8000618 <__aeabi_dmul>
 80075f2:	4602      	mov	r2, r0
 80075f4:	460b      	mov	r3, r1
 80075f6:	4620      	mov	r0, r4
 80075f8:	4629      	mov	r1, r5
 80075fa:	f7f8 fe57 	bl	80002ac <__adddf3>
 80075fe:	4603      	mov	r3, r0
 8007600:	460c      	mov	r4, r1
 8007602:	68fa      	ldr	r2, [r7, #12]
 8007604:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
	circle->z_current = circle->zi; // XY plane
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 800760e:	68fa      	ldr	r2, [r7, #12]
 8007610:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88

	return SCARA_STATUS_OK;
 8007614:	2300      	movs	r3, #0
}
 8007616:	4618      	mov	r0, r3
 8007618:	3718      	adds	r7, #24
 800761a:	46bd      	mov	sp, r7
 800761c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007620 <scaraFlowLSPB>:

/* Compute new s corresponding to time */
SCARA_StatusTypeDef	scaraFlowLSPB		(Trajectory_LSPB_TypeDef *lspb, double time) {
 8007620:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007624:	b08b      	sub	sp, #44	; 0x2c
 8007626:	af00      	add	r7, sp, #0
 8007628:	60f8      	str	r0, [r7, #12]
 800762a:	ed87 0b00 	vstr	d0, [r7]
	double tf, td, ta;

	tf = lspb->Tf;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8007634:	e9c7 2308 	strd	r2, r3, [r7, #32]
	td = lspb->Td;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800763e:	e9c7 2306 	strd	r2, r3, [r7, #24]
	ta = lspb->Ta;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8007648:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Accelerate
	if ( 0.0f <= time && time <= ta) {
 800764c:	f04f 0200 	mov.w	r2, #0
 8007650:	f04f 0300 	mov.w	r3, #0
 8007654:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007658:	f7f9 fa64 	bl	8000b24 <__aeabi_dcmpge>
 800765c:	4603      	mov	r3, r0
 800765e:	2b00      	cmp	r3, #0
 8007660:	d05b      	beq.n	800771a <scaraFlowLSPB+0xfa>
 8007662:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007666:	e9d7 0100 	ldrd	r0, r1, [r7]
 800766a:	f7f9 fa51 	bl	8000b10 <__aeabi_dcmple>
 800766e:	4603      	mov	r3, r0
 8007670:	2b00      	cmp	r3, #0
 8007672:	d052      	beq.n	800771a <scaraFlowLSPB+0xfa>
		lspb->a_current		=	lspb->a_design;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 800767a:	68fa      	ldr	r2, [r7, #12]
 800767c:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		lspb->v_current		=	lspb->v0 + lspb->a_design*time;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800768c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007690:	f7f8 ffc2 	bl	8000618 <__aeabi_dmul>
 8007694:	4602      	mov	r2, r0
 8007696:	460b      	mov	r3, r1
 8007698:	4620      	mov	r0, r4
 800769a:	4629      	mov	r1, r5
 800769c:	f7f8 fe06 	bl	80002ac <__adddf3>
 80076a0:	4603      	mov	r3, r0
 80076a2:	460c      	mov	r4, r1
 80076a4:	68fa      	ldr	r2, [r7, #12]
 80076a6:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->s0 + lspb->v0*time + 0.5*lspb->a_design*time*time;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80076b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076ba:	f7f8 ffad 	bl	8000618 <__aeabi_dmul>
 80076be:	4602      	mov	r2, r0
 80076c0:	460b      	mov	r3, r1
 80076c2:	4620      	mov	r0, r4
 80076c4:	4629      	mov	r1, r5
 80076c6:	f7f8 fdf1 	bl	80002ac <__adddf3>
 80076ca:	4603      	mov	r3, r0
 80076cc:	460c      	mov	r4, r1
 80076ce:	4625      	mov	r5, r4
 80076d0:	461c      	mov	r4, r3
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80076d8:	f04f 0200 	mov.w	r2, #0
 80076dc:	4ba5      	ldr	r3, [pc, #660]	; (8007974 <scaraFlowLSPB+0x354>)
 80076de:	f7f8 ff9b 	bl	8000618 <__aeabi_dmul>
 80076e2:	4602      	mov	r2, r0
 80076e4:	460b      	mov	r3, r1
 80076e6:	4610      	mov	r0, r2
 80076e8:	4619      	mov	r1, r3
 80076ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076ee:	f7f8 ff93 	bl	8000618 <__aeabi_dmul>
 80076f2:	4602      	mov	r2, r0
 80076f4:	460b      	mov	r3, r1
 80076f6:	4610      	mov	r0, r2
 80076f8:	4619      	mov	r1, r3
 80076fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076fe:	f7f8 ff8b 	bl	8000618 <__aeabi_dmul>
 8007702:	4602      	mov	r2, r0
 8007704:	460b      	mov	r3, r1
 8007706:	4620      	mov	r0, r4
 8007708:	4629      	mov	r1, r5
 800770a:	f7f8 fdcf 	bl	80002ac <__adddf3>
 800770e:	4603      	mov	r3, r0
 8007710:	460c      	mov	r4, r1
 8007712:	68fa      	ldr	r2, [r7, #12]
 8007714:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 8007718:	e125      	b.n	8007966 <scaraFlowLSPB+0x346>
	// Constant velocity
	} else if (ta <= time && time <= (tf - td)) {
 800771a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800771e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007722:	f7f9 f9f5 	bl	8000b10 <__aeabi_dcmple>
 8007726:	4603      	mov	r3, r0
 8007728:	2b00      	cmp	r3, #0
 800772a:	d05e      	beq.n	80077ea <scaraFlowLSPB+0x1ca>
 800772c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007730:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007734:	f7f8 fdb8 	bl	80002a8 <__aeabi_dsub>
 8007738:	4602      	mov	r2, r0
 800773a:	460b      	mov	r3, r1
 800773c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007740:	f7f9 f9e6 	bl	8000b10 <__aeabi_dcmple>
 8007744:	4603      	mov	r3, r0
 8007746:	2b00      	cmp	r3, #0
 8007748:	d04f      	beq.n	80077ea <scaraFlowLSPB+0x1ca>
		lspb->a_current		=	0;
 800774a:	68fa      	ldr	r2, [r7, #12]
 800774c:	f04f 0300 	mov.w	r3, #0
 8007750:	f04f 0400 	mov.w	r4, #0
 8007754:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		lspb->v_current		=	lspb->v_lim;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 800775e:	68fa      	ldr	r2, [r7, #12]
 8007760:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->s0 + lspb->v0*ta/2 + lspb->v_lim*(time - ta/2);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8007770:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007774:	f7f8 ff50 	bl	8000618 <__aeabi_dmul>
 8007778:	4602      	mov	r2, r0
 800777a:	460b      	mov	r3, r1
 800777c:	4610      	mov	r0, r2
 800777e:	4619      	mov	r1, r3
 8007780:	f04f 0200 	mov.w	r2, #0
 8007784:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007788:	f7f9 f870 	bl	800086c <__aeabi_ddiv>
 800778c:	4602      	mov	r2, r0
 800778e:	460b      	mov	r3, r1
 8007790:	4620      	mov	r0, r4
 8007792:	4629      	mov	r1, r5
 8007794:	f7f8 fd8a 	bl	80002ac <__adddf3>
 8007798:	4603      	mov	r3, r0
 800779a:	460c      	mov	r4, r1
 800779c:	4698      	mov	r8, r3
 800779e:	46a1      	mov	r9, r4
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80077a6:	f04f 0200 	mov.w	r2, #0
 80077aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80077ae:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80077b2:	f7f9 f85b 	bl	800086c <__aeabi_ddiv>
 80077b6:	4602      	mov	r2, r0
 80077b8:	460b      	mov	r3, r1
 80077ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80077be:	f7f8 fd73 	bl	80002a8 <__aeabi_dsub>
 80077c2:	4602      	mov	r2, r0
 80077c4:	460b      	mov	r3, r1
 80077c6:	4620      	mov	r0, r4
 80077c8:	4629      	mov	r1, r5
 80077ca:	f7f8 ff25 	bl	8000618 <__aeabi_dmul>
 80077ce:	4603      	mov	r3, r0
 80077d0:	460c      	mov	r4, r1
 80077d2:	461a      	mov	r2, r3
 80077d4:	4623      	mov	r3, r4
 80077d6:	4640      	mov	r0, r8
 80077d8:	4649      	mov	r1, r9
 80077da:	f7f8 fd67 	bl	80002ac <__adddf3>
 80077de:	4603      	mov	r3, r0
 80077e0:	460c      	mov	r4, r1
 80077e2:	68fa      	ldr	r2, [r7, #12]
 80077e4:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 80077e8:	e0bd      	b.n	8007966 <scaraFlowLSPB+0x346>
	// Decelerate
	} else if ((tf - td) <= time && time <= tf) {
 80077ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80077ee:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80077f2:	f7f8 fd59 	bl	80002a8 <__aeabi_dsub>
 80077f6:	4602      	mov	r2, r0
 80077f8:	460b      	mov	r3, r1
 80077fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80077fe:	f7f9 f991 	bl	8000b24 <__aeabi_dcmpge>
 8007802:	4603      	mov	r3, r0
 8007804:	2b00      	cmp	r3, #0
 8007806:	f000 809a 	beq.w	800793e <scaraFlowLSPB+0x31e>
 800780a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800780e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007812:	f7f9 f97d 	bl	8000b10 <__aeabi_dcmple>
 8007816:	4603      	mov	r3, r0
 8007818:	2b00      	cmp	r3, #0
 800781a:	f000 8090 	beq.w	800793e <scaraFlowLSPB+0x31e>
		lspb->a_current		=	-lspb->a_design;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8007824:	4614      	mov	r4, r2
 8007826:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	e9c3 451a 	strd	r4, r5, [r3, #104]	; 0x68
		lspb->v_current		=	lspb->v1 + lspb->a_design*(tf - time);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	e9d3 890c 	ldrd	r8, r9, [r3, #48]	; 0x30
 800783c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007840:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007844:	f7f8 fd30 	bl	80002a8 <__aeabi_dsub>
 8007848:	4602      	mov	r2, r0
 800784a:	460b      	mov	r3, r1
 800784c:	4640      	mov	r0, r8
 800784e:	4649      	mov	r1, r9
 8007850:	f7f8 fee2 	bl	8000618 <__aeabi_dmul>
 8007854:	4602      	mov	r2, r0
 8007856:	460b      	mov	r3, r1
 8007858:	4620      	mov	r0, r4
 800785a:	4629      	mov	r1, r5
 800785c:	f7f8 fd26 	bl	80002ac <__adddf3>
 8007860:	4603      	mov	r3, r0
 8007862:	460c      	mov	r4, r1
 8007864:	68fa      	ldr	r2, [r7, #12]
 8007866:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->s1 - lspb->v1*(tf - time)
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8007876:	e9d7 2300 	ldrd	r2, r3, [r7]
 800787a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800787e:	f7f8 fd13 	bl	80002a8 <__aeabi_dsub>
 8007882:	4602      	mov	r2, r0
 8007884:	460b      	mov	r3, r1
 8007886:	4640      	mov	r0, r8
 8007888:	4649      	mov	r1, r9
 800788a:	f7f8 fec5 	bl	8000618 <__aeabi_dmul>
 800788e:	4602      	mov	r2, r0
 8007890:	460b      	mov	r3, r1
 8007892:	4620      	mov	r0, r4
 8007894:	4629      	mov	r1, r5
 8007896:	f7f8 fd07 	bl	80002a8 <__aeabi_dsub>
 800789a:	4603      	mov	r3, r0
 800789c:	460c      	mov	r4, r1
 800789e:	461d      	mov	r5, r3
 80078a0:	4626      	mov	r6, r4
								- (lspb->v_lim - lspb->v1)*(tf - time)*(tf - time)/(2*td);
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 80078ae:	461a      	mov	r2, r3
 80078b0:	4623      	mov	r3, r4
 80078b2:	f7f8 fcf9 	bl	80002a8 <__aeabi_dsub>
 80078b6:	4603      	mov	r3, r0
 80078b8:	460c      	mov	r4, r1
 80078ba:	4698      	mov	r8, r3
 80078bc:	46a1      	mov	r9, r4
 80078be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078c2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80078c6:	f7f8 fcef 	bl	80002a8 <__aeabi_dsub>
 80078ca:	4603      	mov	r3, r0
 80078cc:	460c      	mov	r4, r1
 80078ce:	461a      	mov	r2, r3
 80078d0:	4623      	mov	r3, r4
 80078d2:	4640      	mov	r0, r8
 80078d4:	4649      	mov	r1, r9
 80078d6:	f7f8 fe9f 	bl	8000618 <__aeabi_dmul>
 80078da:	4603      	mov	r3, r0
 80078dc:	460c      	mov	r4, r1
 80078de:	4698      	mov	r8, r3
 80078e0:	46a1      	mov	r9, r4
 80078e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078e6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80078ea:	f7f8 fcdd 	bl	80002a8 <__aeabi_dsub>
 80078ee:	4603      	mov	r3, r0
 80078f0:	460c      	mov	r4, r1
 80078f2:	461a      	mov	r2, r3
 80078f4:	4623      	mov	r3, r4
 80078f6:	4640      	mov	r0, r8
 80078f8:	4649      	mov	r1, r9
 80078fa:	f7f8 fe8d 	bl	8000618 <__aeabi_dmul>
 80078fe:	4603      	mov	r3, r0
 8007900:	460c      	mov	r4, r1
 8007902:	4698      	mov	r8, r3
 8007904:	46a1      	mov	r9, r4
 8007906:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800790a:	4602      	mov	r2, r0
 800790c:	460b      	mov	r3, r1
 800790e:	f7f8 fccd 	bl	80002ac <__adddf3>
 8007912:	4603      	mov	r3, r0
 8007914:	460c      	mov	r4, r1
 8007916:	461a      	mov	r2, r3
 8007918:	4623      	mov	r3, r4
 800791a:	4640      	mov	r0, r8
 800791c:	4649      	mov	r1, r9
 800791e:	f7f8 ffa5 	bl	800086c <__aeabi_ddiv>
 8007922:	4603      	mov	r3, r0
 8007924:	460c      	mov	r4, r1
 8007926:	461a      	mov	r2, r3
 8007928:	4623      	mov	r3, r4
 800792a:	4628      	mov	r0, r5
 800792c:	4631      	mov	r1, r6
 800792e:	f7f8 fcbb 	bl	80002a8 <__aeabi_dsub>
 8007932:	4603      	mov	r3, r0
 8007934:	460c      	mov	r4, r1
		lspb->s_current		=	lspb->s1 - lspb->v1*(tf - time)
 8007936:	68fa      	ldr	r2, [r7, #12]
 8007938:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 800793c:	e013      	b.n	8007966 <scaraFlowLSPB+0x346>
	} else {
		lspb->a_current 	=	0;
 800793e:	68fa      	ldr	r2, [r7, #12]
 8007940:	f04f 0300 	mov.w	r3, #0
 8007944:	f04f 0400 	mov.w	r4, #0
 8007948:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		lspb->v_current		=	0;
 800794c:	68fa      	ldr	r2, [r7, #12]
 800794e:	f04f 0300 	mov.w	r3, #0
 8007952:	f04f 0400 	mov.w	r4, #0
 8007956:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->total_s;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8007960:	68fa      	ldr	r2, [r7, #12]
 8007962:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	}

	return SCARA_STATUS_OK;
 8007966:	2300      	movs	r3, #0
}
 8007968:	4618      	mov	r0, r3
 800796a:	372c      	adds	r7, #44	; 0x2c
 800796c:	46bd      	mov	sp, r7
 800796e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007972:	bf00      	nop
 8007974:	3fe00000 	.word	0x3fe00000

08007978 <scaraFLowScurve>:

/* Compute new s corresponding to time */
SCARA_StatusTypeDef	scaraFLowScurve		(Trajectory_Scurve_TypeDef *scurve, double time) {
 8007978:	b5b0      	push	{r4, r5, r7, lr}
 800797a:	b092      	sub	sp, #72	; 0x48
 800797c:	af00      	add	r7, sp, #0
 800797e:	6278      	str	r0, [r7, #36]	; 0x24
 8007980:	ed87 0b06 	vstr	d0, [r7, #24]
	double j_max, tm, tc, t;

	j_max = scurve->j_max;
 8007984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007986:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800798a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	tm	  = scurve->Tm;
 800798e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007990:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8007994:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	tc	  = scurve->Tc;
 8007998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800799a:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800799e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	 // SCURVE 4 PHASE: tc = 0;
	 if ( 4 == scurve->num_of_phase) {
 80079a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80079a8:	2b04      	cmp	r3, #4
 80079aa:	f040 8321 	bne.w	8007ff0 <scaraFLowScurve+0x678>
		 // Phase 1
		 if ( (0.0f <= time) && ( time < tm)) {
 80079ae:	f04f 0200 	mov.w	r2, #0
 80079b2:	f04f 0300 	mov.w	r3, #0
 80079b6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80079ba:	f7f9 f8b3 	bl	8000b24 <__aeabi_dcmpge>
 80079be:	4603      	mov	r3, r0
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d059      	beq.n	8007a78 <scaraFLowScurve+0x100>
 80079c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80079c8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80079cc:	f7f9 f896 	bl	8000afc <__aeabi_dcmplt>
 80079d0:	4603      	mov	r3, r0
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d050      	beq.n	8007a78 <scaraFLowScurve+0x100>
			 t = time;
 80079d6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80079da:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	= 	j_max*t;
 80079de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80079e2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80079e6:	f7f8 fe17 	bl	8000618 <__aeabi_dmul>
 80079ea:	4603      	mov	r3, r0
 80079ec:	460c      	mov	r4, r1
 80079ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079f0:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	= 	0.5*j_max*t*t;
 80079f4:	f04f 0200 	mov.w	r2, #0
 80079f8:	4b93      	ldr	r3, [pc, #588]	; (8007c48 <scaraFLowScurve+0x2d0>)
 80079fa:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80079fe:	f7f8 fe0b 	bl	8000618 <__aeabi_dmul>
 8007a02:	4603      	mov	r3, r0
 8007a04:	460c      	mov	r4, r1
 8007a06:	4618      	mov	r0, r3
 8007a08:	4621      	mov	r1, r4
 8007a0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007a0e:	f7f8 fe03 	bl	8000618 <__aeabi_dmul>
 8007a12:	4603      	mov	r3, r0
 8007a14:	460c      	mov	r4, r1
 8007a16:	4618      	mov	r0, r3
 8007a18:	4621      	mov	r1, r4
 8007a1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007a1e:	f7f8 fdfb 	bl	8000618 <__aeabi_dmul>
 8007a22:	4603      	mov	r3, r0
 8007a24:	460c      	mov	r4, r1
 8007a26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a28:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current 	= 	j_max*t*t*t/6;
 8007a2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007a30:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007a34:	f7f8 fdf0 	bl	8000618 <__aeabi_dmul>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	460c      	mov	r4, r1
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	4621      	mov	r1, r4
 8007a40:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007a44:	f7f8 fde8 	bl	8000618 <__aeabi_dmul>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	460c      	mov	r4, r1
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	4621      	mov	r1, r4
 8007a50:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007a54:	f7f8 fde0 	bl	8000618 <__aeabi_dmul>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	460c      	mov	r4, r1
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	4621      	mov	r1, r4
 8007a60:	f04f 0200 	mov.w	r2, #0
 8007a64:	4b79      	ldr	r3, [pc, #484]	; (8007c4c <scaraFLowScurve+0x2d4>)
 8007a66:	f7f8 ff01 	bl	800086c <__aeabi_ddiv>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	460c      	mov	r4, r1
 8007a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a70:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8007a74:	f000 be56 	b.w	8008724 <scaraFLowScurve+0xdac>
		 // Phase 2
		 } else if ( (tm <= time) && ( time < (2*tm) ) ) {
 8007a78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007a7c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007a80:	f7f9 f846 	bl	8000b10 <__aeabi_dcmple>
 8007a84:	4603      	mov	r3, r0
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	f000 80e2 	beq.w	8007c50 <scaraFLowScurve+0x2d8>
 8007a8c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007a90:	4602      	mov	r2, r0
 8007a92:	460b      	mov	r3, r1
 8007a94:	f7f8 fc0a 	bl	80002ac <__adddf3>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	460c      	mov	r4, r1
 8007a9c:	461a      	mov	r2, r3
 8007a9e:	4623      	mov	r3, r4
 8007aa0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007aa4:	f7f9 f82a 	bl	8000afc <__aeabi_dcmplt>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	f000 80d0 	beq.w	8007c50 <scaraFLowScurve+0x2d8>
			 t = time - tm;
 8007ab0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007ab4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007ab8:	f7f8 fbf6 	bl	80002a8 <__aeabi_dsub>
 8007abc:	4603      	mov	r3, r0
 8007abe:	460c      	mov	r4, r1
 8007ac0:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	= 	j_max*tm - j_max*t;
 8007ac4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007ac8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007acc:	f7f8 fda4 	bl	8000618 <__aeabi_dmul>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	460c      	mov	r4, r1
 8007ad4:	4625      	mov	r5, r4
 8007ad6:	461c      	mov	r4, r3
 8007ad8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007adc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007ae0:	f7f8 fd9a 	bl	8000618 <__aeabi_dmul>
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	460b      	mov	r3, r1
 8007ae8:	4620      	mov	r0, r4
 8007aea:	4629      	mov	r1, r5
 8007aec:	f7f8 fbdc 	bl	80002a8 <__aeabi_dsub>
 8007af0:	4603      	mov	r3, r0
 8007af2:	460c      	mov	r4, r1
 8007af4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007af6:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current 	= 	scurve->v_1 + j_max*tm*t - 0.5*j_max*t*t;
 8007afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afc:	e9d3 451e 	ldrd	r4, r5, [r3, #120]	; 0x78
 8007b00:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007b04:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007b08:	f7f8 fd86 	bl	8000618 <__aeabi_dmul>
 8007b0c:	4602      	mov	r2, r0
 8007b0e:	460b      	mov	r3, r1
 8007b10:	4610      	mov	r0, r2
 8007b12:	4619      	mov	r1, r3
 8007b14:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007b18:	f7f8 fd7e 	bl	8000618 <__aeabi_dmul>
 8007b1c:	4602      	mov	r2, r0
 8007b1e:	460b      	mov	r3, r1
 8007b20:	4620      	mov	r0, r4
 8007b22:	4629      	mov	r1, r5
 8007b24:	f7f8 fbc2 	bl	80002ac <__adddf3>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	460c      	mov	r4, r1
 8007b2c:	4625      	mov	r5, r4
 8007b2e:	461c      	mov	r4, r3
 8007b30:	f04f 0200 	mov.w	r2, #0
 8007b34:	4b44      	ldr	r3, [pc, #272]	; (8007c48 <scaraFLowScurve+0x2d0>)
 8007b36:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007b3a:	f7f8 fd6d 	bl	8000618 <__aeabi_dmul>
 8007b3e:	4602      	mov	r2, r0
 8007b40:	460b      	mov	r3, r1
 8007b42:	4610      	mov	r0, r2
 8007b44:	4619      	mov	r1, r3
 8007b46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007b4a:	f7f8 fd65 	bl	8000618 <__aeabi_dmul>
 8007b4e:	4602      	mov	r2, r0
 8007b50:	460b      	mov	r3, r1
 8007b52:	4610      	mov	r0, r2
 8007b54:	4619      	mov	r1, r3
 8007b56:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007b5a:	f7f8 fd5d 	bl	8000618 <__aeabi_dmul>
 8007b5e:	4602      	mov	r2, r0
 8007b60:	460b      	mov	r3, r1
 8007b62:	4620      	mov	r0, r4
 8007b64:	4629      	mov	r1, r5
 8007b66:	f7f8 fb9f 	bl	80002a8 <__aeabi_dsub>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	460c      	mov	r4, r1
 8007b6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b70:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current 	=	scurve->s_1 + scurve->v_1*t + 0.5*j_max*tm*t*t - j_max*t*t*t/6;
 8007b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b76:	e9d3 4520 	ldrd	r4, r5, [r3, #128]	; 0x80
 8007b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b7c:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8007b80:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007b84:	f7f8 fd48 	bl	8000618 <__aeabi_dmul>
 8007b88:	4602      	mov	r2, r0
 8007b8a:	460b      	mov	r3, r1
 8007b8c:	4620      	mov	r0, r4
 8007b8e:	4629      	mov	r1, r5
 8007b90:	f7f8 fb8c 	bl	80002ac <__adddf3>
 8007b94:	4603      	mov	r3, r0
 8007b96:	460c      	mov	r4, r1
 8007b98:	4625      	mov	r5, r4
 8007b9a:	461c      	mov	r4, r3
 8007b9c:	f04f 0200 	mov.w	r2, #0
 8007ba0:	4b29      	ldr	r3, [pc, #164]	; (8007c48 <scaraFLowScurve+0x2d0>)
 8007ba2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007ba6:	f7f8 fd37 	bl	8000618 <__aeabi_dmul>
 8007baa:	4602      	mov	r2, r0
 8007bac:	460b      	mov	r3, r1
 8007bae:	4610      	mov	r0, r2
 8007bb0:	4619      	mov	r1, r3
 8007bb2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007bb6:	f7f8 fd2f 	bl	8000618 <__aeabi_dmul>
 8007bba:	4602      	mov	r2, r0
 8007bbc:	460b      	mov	r3, r1
 8007bbe:	4610      	mov	r0, r2
 8007bc0:	4619      	mov	r1, r3
 8007bc2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007bc6:	f7f8 fd27 	bl	8000618 <__aeabi_dmul>
 8007bca:	4602      	mov	r2, r0
 8007bcc:	460b      	mov	r3, r1
 8007bce:	4610      	mov	r0, r2
 8007bd0:	4619      	mov	r1, r3
 8007bd2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007bd6:	f7f8 fd1f 	bl	8000618 <__aeabi_dmul>
 8007bda:	4602      	mov	r2, r0
 8007bdc:	460b      	mov	r3, r1
 8007bde:	4620      	mov	r0, r4
 8007be0:	4629      	mov	r1, r5
 8007be2:	f7f8 fb63 	bl	80002ac <__adddf3>
 8007be6:	4603      	mov	r3, r0
 8007be8:	460c      	mov	r4, r1
 8007bea:	4625      	mov	r5, r4
 8007bec:	461c      	mov	r4, r3
 8007bee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007bf2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007bf6:	f7f8 fd0f 	bl	8000618 <__aeabi_dmul>
 8007bfa:	4602      	mov	r2, r0
 8007bfc:	460b      	mov	r3, r1
 8007bfe:	4610      	mov	r0, r2
 8007c00:	4619      	mov	r1, r3
 8007c02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007c06:	f7f8 fd07 	bl	8000618 <__aeabi_dmul>
 8007c0a:	4602      	mov	r2, r0
 8007c0c:	460b      	mov	r3, r1
 8007c0e:	4610      	mov	r0, r2
 8007c10:	4619      	mov	r1, r3
 8007c12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007c16:	f7f8 fcff 	bl	8000618 <__aeabi_dmul>
 8007c1a:	4602      	mov	r2, r0
 8007c1c:	460b      	mov	r3, r1
 8007c1e:	4610      	mov	r0, r2
 8007c20:	4619      	mov	r1, r3
 8007c22:	f04f 0200 	mov.w	r2, #0
 8007c26:	4b09      	ldr	r3, [pc, #36]	; (8007c4c <scaraFLowScurve+0x2d4>)
 8007c28:	f7f8 fe20 	bl	800086c <__aeabi_ddiv>
 8007c2c:	4602      	mov	r2, r0
 8007c2e:	460b      	mov	r3, r1
 8007c30:	4620      	mov	r0, r4
 8007c32:	4629      	mov	r1, r5
 8007c34:	f7f8 fb38 	bl	80002a8 <__aeabi_dsub>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	460c      	mov	r4, r1
 8007c3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c3e:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8007c42:	f000 bd6f 	b.w	8008724 <scaraFLowScurve+0xdac>
 8007c46:	bf00      	nop
 8007c48:	3fe00000 	.word	0x3fe00000
 8007c4c:	40180000 	.word	0x40180000
		 // Phase 3: does not exist
		 // Phase 4
		 } else if ( ((2*tm) <= time) && ( time < (3*tm)) ) {
 8007c50:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007c54:	4602      	mov	r2, r0
 8007c56:	460b      	mov	r3, r1
 8007c58:	f7f8 fb28 	bl	80002ac <__adddf3>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	460c      	mov	r4, r1
 8007c60:	461a      	mov	r2, r3
 8007c62:	4623      	mov	r3, r4
 8007c64:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007c68:	f7f8 ff5c 	bl	8000b24 <__aeabi_dcmpge>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	f000 80a2 	beq.w	8007db8 <scaraFLowScurve+0x440>
 8007c74:	f04f 0200 	mov.w	r2, #0
 8007c78:	4b4c      	ldr	r3, [pc, #304]	; (8007dac <scaraFLowScurve+0x434>)
 8007c7a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007c7e:	f7f8 fccb 	bl	8000618 <__aeabi_dmul>
 8007c82:	4603      	mov	r3, r0
 8007c84:	460c      	mov	r4, r1
 8007c86:	461a      	mov	r2, r3
 8007c88:	4623      	mov	r3, r4
 8007c8a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007c8e:	f7f8 ff35 	bl	8000afc <__aeabi_dcmplt>
 8007c92:	4603      	mov	r3, r0
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	f000 808f 	beq.w	8007db8 <scaraFLowScurve+0x440>
			 t = time - 2*tm;
 8007c9a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007c9e:	4602      	mov	r2, r0
 8007ca0:	460b      	mov	r3, r1
 8007ca2:	f7f8 fb03 	bl	80002ac <__adddf3>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	460c      	mov	r4, r1
 8007caa:	461a      	mov	r2, r3
 8007cac:	4623      	mov	r3, r4
 8007cae:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007cb2:	f7f8 faf9 	bl	80002a8 <__aeabi_dsub>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	460c      	mov	r4, r1
 8007cba:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	=	-j_max*t;
 8007cbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007cc0:	613b      	str	r3, [r7, #16]
 8007cc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cc4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007cc8:	617b      	str	r3, [r7, #20]
 8007cca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007cce:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007cd2:	f7f8 fca1 	bl	8000618 <__aeabi_dmul>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	460c      	mov	r4, r1
 8007cda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cdc:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_2 - 0.5*j_max*t*t;
 8007ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce2:	e9d3 4522 	ldrd	r4, r5, [r3, #136]	; 0x88
 8007ce6:	f04f 0200 	mov.w	r2, #0
 8007cea:	4b31      	ldr	r3, [pc, #196]	; (8007db0 <scaraFLowScurve+0x438>)
 8007cec:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007cf0:	f7f8 fc92 	bl	8000618 <__aeabi_dmul>
 8007cf4:	4602      	mov	r2, r0
 8007cf6:	460b      	mov	r3, r1
 8007cf8:	4610      	mov	r0, r2
 8007cfa:	4619      	mov	r1, r3
 8007cfc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007d00:	f7f8 fc8a 	bl	8000618 <__aeabi_dmul>
 8007d04:	4602      	mov	r2, r0
 8007d06:	460b      	mov	r3, r1
 8007d08:	4610      	mov	r0, r2
 8007d0a:	4619      	mov	r1, r3
 8007d0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007d10:	f7f8 fc82 	bl	8000618 <__aeabi_dmul>
 8007d14:	4602      	mov	r2, r0
 8007d16:	460b      	mov	r3, r1
 8007d18:	4620      	mov	r0, r4
 8007d1a:	4629      	mov	r1, r5
 8007d1c:	f7f8 fac4 	bl	80002a8 <__aeabi_dsub>
 8007d20:	4603      	mov	r3, r0
 8007d22:	460c      	mov	r4, r1
 8007d24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d26:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_2 + scurve->v_2*t - j_max*t*t*t/6;
 8007d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d2c:	e9d3 4524 	ldrd	r4, r5, [r3, #144]	; 0x90
 8007d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d32:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 8007d36:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007d3a:	f7f8 fc6d 	bl	8000618 <__aeabi_dmul>
 8007d3e:	4602      	mov	r2, r0
 8007d40:	460b      	mov	r3, r1
 8007d42:	4620      	mov	r0, r4
 8007d44:	4629      	mov	r1, r5
 8007d46:	f7f8 fab1 	bl	80002ac <__adddf3>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	460c      	mov	r4, r1
 8007d4e:	4625      	mov	r5, r4
 8007d50:	461c      	mov	r4, r3
 8007d52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007d56:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007d5a:	f7f8 fc5d 	bl	8000618 <__aeabi_dmul>
 8007d5e:	4602      	mov	r2, r0
 8007d60:	460b      	mov	r3, r1
 8007d62:	4610      	mov	r0, r2
 8007d64:	4619      	mov	r1, r3
 8007d66:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007d6a:	f7f8 fc55 	bl	8000618 <__aeabi_dmul>
 8007d6e:	4602      	mov	r2, r0
 8007d70:	460b      	mov	r3, r1
 8007d72:	4610      	mov	r0, r2
 8007d74:	4619      	mov	r1, r3
 8007d76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007d7a:	f7f8 fc4d 	bl	8000618 <__aeabi_dmul>
 8007d7e:	4602      	mov	r2, r0
 8007d80:	460b      	mov	r3, r1
 8007d82:	4610      	mov	r0, r2
 8007d84:	4619      	mov	r1, r3
 8007d86:	f04f 0200 	mov.w	r2, #0
 8007d8a:	4b0a      	ldr	r3, [pc, #40]	; (8007db4 <scaraFLowScurve+0x43c>)
 8007d8c:	f7f8 fd6e 	bl	800086c <__aeabi_ddiv>
 8007d90:	4602      	mov	r2, r0
 8007d92:	460b      	mov	r3, r1
 8007d94:	4620      	mov	r0, r4
 8007d96:	4629      	mov	r1, r5
 8007d98:	f7f8 fa86 	bl	80002a8 <__aeabi_dsub>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	460c      	mov	r4, r1
 8007da0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007da2:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8007da6:	f000 bcbd 	b.w	8008724 <scaraFLowScurve+0xdac>
 8007daa:	bf00      	nop
 8007dac:	40080000 	.word	0x40080000
 8007db0:	3fe00000 	.word	0x3fe00000
 8007db4:	40180000 	.word	0x40180000
		 // Phase 5
		 } else if ( ((3*tm) <= time) && ( time < (4*tm)) ) {
 8007db8:	f04f 0200 	mov.w	r2, #0
 8007dbc:	4b88      	ldr	r3, [pc, #544]	; (8007fe0 <scaraFLowScurve+0x668>)
 8007dbe:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007dc2:	f7f8 fc29 	bl	8000618 <__aeabi_dmul>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	460c      	mov	r4, r1
 8007dca:	461a      	mov	r2, r3
 8007dcc:	4623      	mov	r3, r4
 8007dce:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007dd2:	f7f8 fea7 	bl	8000b24 <__aeabi_dcmpge>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	f000 80ec 	beq.w	8007fb6 <scaraFLowScurve+0x63e>
 8007dde:	f04f 0200 	mov.w	r2, #0
 8007de2:	4b80      	ldr	r3, [pc, #512]	; (8007fe4 <scaraFLowScurve+0x66c>)
 8007de4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007de8:	f7f8 fc16 	bl	8000618 <__aeabi_dmul>
 8007dec:	4603      	mov	r3, r0
 8007dee:	460c      	mov	r4, r1
 8007df0:	461a      	mov	r2, r3
 8007df2:	4623      	mov	r3, r4
 8007df4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007df8:	f7f8 fe80 	bl	8000afc <__aeabi_dcmplt>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	f000 80d9 	beq.w	8007fb6 <scaraFLowScurve+0x63e>
			 t = time - 3*tm;
 8007e04:	f04f 0200 	mov.w	r2, #0
 8007e08:	4b75      	ldr	r3, [pc, #468]	; (8007fe0 <scaraFLowScurve+0x668>)
 8007e0a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007e0e:	f7f8 fc03 	bl	8000618 <__aeabi_dmul>
 8007e12:	4603      	mov	r3, r0
 8007e14:	460c      	mov	r4, r1
 8007e16:	461a      	mov	r2, r3
 8007e18:	4623      	mov	r3, r4
 8007e1a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007e1e:	f7f8 fa43 	bl	80002a8 <__aeabi_dsub>
 8007e22:	4603      	mov	r3, r0
 8007e24:	460c      	mov	r4, r1
 8007e26:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current	=	-j_max*tm + j_max*t;
 8007e2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e2c:	60bb      	str	r3, [r7, #8]
 8007e2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e30:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007e34:	60fb      	str	r3, [r7, #12]
 8007e36:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007e3a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007e3e:	f7f8 fbeb 	bl	8000618 <__aeabi_dmul>
 8007e42:	4603      	mov	r3, r0
 8007e44:	460c      	mov	r4, r1
 8007e46:	4625      	mov	r5, r4
 8007e48:	461c      	mov	r4, r3
 8007e4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007e4e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007e52:	f7f8 fbe1 	bl	8000618 <__aeabi_dmul>
 8007e56:	4602      	mov	r2, r0
 8007e58:	460b      	mov	r3, r1
 8007e5a:	4620      	mov	r0, r4
 8007e5c:	4629      	mov	r1, r5
 8007e5e:	f7f8 fa25 	bl	80002ac <__adddf3>
 8007e62:	4603      	mov	r3, r0
 8007e64:	460c      	mov	r4, r1
 8007e66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e68:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_4 - j_max*tm*t + 0.5*j_max*t*t;
 8007e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e6e:	e9d3 452a 	ldrd	r4, r5, [r3, #168]	; 0xa8
 8007e72:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007e76:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007e7a:	f7f8 fbcd 	bl	8000618 <__aeabi_dmul>
 8007e7e:	4602      	mov	r2, r0
 8007e80:	460b      	mov	r3, r1
 8007e82:	4610      	mov	r0, r2
 8007e84:	4619      	mov	r1, r3
 8007e86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007e8a:	f7f8 fbc5 	bl	8000618 <__aeabi_dmul>
 8007e8e:	4602      	mov	r2, r0
 8007e90:	460b      	mov	r3, r1
 8007e92:	4620      	mov	r0, r4
 8007e94:	4629      	mov	r1, r5
 8007e96:	f7f8 fa07 	bl	80002a8 <__aeabi_dsub>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	460c      	mov	r4, r1
 8007e9e:	4625      	mov	r5, r4
 8007ea0:	461c      	mov	r4, r3
 8007ea2:	f04f 0200 	mov.w	r2, #0
 8007ea6:	4b50      	ldr	r3, [pc, #320]	; (8007fe8 <scaraFLowScurve+0x670>)
 8007ea8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007eac:	f7f8 fbb4 	bl	8000618 <__aeabi_dmul>
 8007eb0:	4602      	mov	r2, r0
 8007eb2:	460b      	mov	r3, r1
 8007eb4:	4610      	mov	r0, r2
 8007eb6:	4619      	mov	r1, r3
 8007eb8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007ebc:	f7f8 fbac 	bl	8000618 <__aeabi_dmul>
 8007ec0:	4602      	mov	r2, r0
 8007ec2:	460b      	mov	r3, r1
 8007ec4:	4610      	mov	r0, r2
 8007ec6:	4619      	mov	r1, r3
 8007ec8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007ecc:	f7f8 fba4 	bl	8000618 <__aeabi_dmul>
 8007ed0:	4602      	mov	r2, r0
 8007ed2:	460b      	mov	r3, r1
 8007ed4:	4620      	mov	r0, r4
 8007ed6:	4629      	mov	r1, r5
 8007ed8:	f7f8 f9e8 	bl	80002ac <__adddf3>
 8007edc:	4603      	mov	r3, r0
 8007ede:	460c      	mov	r4, r1
 8007ee0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ee2:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_4 + scurve->v_4*t
 8007ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee8:	e9d3 452c 	ldrd	r4, r5, [r3, #176]	; 0xb0
 8007eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eee:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
 8007ef2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007ef6:	f7f8 fb8f 	bl	8000618 <__aeabi_dmul>
 8007efa:	4602      	mov	r2, r0
 8007efc:	460b      	mov	r3, r1
 8007efe:	4620      	mov	r0, r4
 8007f00:	4629      	mov	r1, r5
 8007f02:	f7f8 f9d3 	bl	80002ac <__adddf3>
 8007f06:	4603      	mov	r3, r0
 8007f08:	460c      	mov	r4, r1
 8007f0a:	4625      	mov	r5, r4
 8007f0c:	461c      	mov	r4, r3
									- 0.5*j_max*tm*t*t
 8007f0e:	f04f 0200 	mov.w	r2, #0
 8007f12:	4b35      	ldr	r3, [pc, #212]	; (8007fe8 <scaraFLowScurve+0x670>)
 8007f14:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007f18:	f7f8 fb7e 	bl	8000618 <__aeabi_dmul>
 8007f1c:	4602      	mov	r2, r0
 8007f1e:	460b      	mov	r3, r1
 8007f20:	4610      	mov	r0, r2
 8007f22:	4619      	mov	r1, r3
 8007f24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007f28:	f7f8 fb76 	bl	8000618 <__aeabi_dmul>
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	460b      	mov	r3, r1
 8007f30:	4610      	mov	r0, r2
 8007f32:	4619      	mov	r1, r3
 8007f34:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007f38:	f7f8 fb6e 	bl	8000618 <__aeabi_dmul>
 8007f3c:	4602      	mov	r2, r0
 8007f3e:	460b      	mov	r3, r1
 8007f40:	4610      	mov	r0, r2
 8007f42:	4619      	mov	r1, r3
 8007f44:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007f48:	f7f8 fb66 	bl	8000618 <__aeabi_dmul>
 8007f4c:	4602      	mov	r2, r0
 8007f4e:	460b      	mov	r3, r1
 8007f50:	4620      	mov	r0, r4
 8007f52:	4629      	mov	r1, r5
 8007f54:	f7f8 f9a8 	bl	80002a8 <__aeabi_dsub>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	460c      	mov	r4, r1
 8007f5c:	4625      	mov	r5, r4
 8007f5e:	461c      	mov	r4, r3
									+ j_max*t*t*t/6;
 8007f60:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007f64:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007f68:	f7f8 fb56 	bl	8000618 <__aeabi_dmul>
 8007f6c:	4602      	mov	r2, r0
 8007f6e:	460b      	mov	r3, r1
 8007f70:	4610      	mov	r0, r2
 8007f72:	4619      	mov	r1, r3
 8007f74:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007f78:	f7f8 fb4e 	bl	8000618 <__aeabi_dmul>
 8007f7c:	4602      	mov	r2, r0
 8007f7e:	460b      	mov	r3, r1
 8007f80:	4610      	mov	r0, r2
 8007f82:	4619      	mov	r1, r3
 8007f84:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007f88:	f7f8 fb46 	bl	8000618 <__aeabi_dmul>
 8007f8c:	4602      	mov	r2, r0
 8007f8e:	460b      	mov	r3, r1
 8007f90:	4610      	mov	r0, r2
 8007f92:	4619      	mov	r1, r3
 8007f94:	f04f 0200 	mov.w	r2, #0
 8007f98:	4b14      	ldr	r3, [pc, #80]	; (8007fec <scaraFLowScurve+0x674>)
 8007f9a:	f7f8 fc67 	bl	800086c <__aeabi_ddiv>
 8007f9e:	4602      	mov	r2, r0
 8007fa0:	460b      	mov	r3, r1
 8007fa2:	4620      	mov	r0, r4
 8007fa4:	4629      	mov	r1, r5
 8007fa6:	f7f8 f981 	bl	80002ac <__adddf3>
 8007faa:	4603      	mov	r3, r0
 8007fac:	460c      	mov	r4, r1
			 scurve->s_current	=	scurve->s_4 + scurve->v_4*t
 8007fae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fb0:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8007fb4:	e3b6      	b.n	8008724 <scaraFLowScurve+0xdac>
		 } else {
			 scurve->a_current = 0;
 8007fb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fb8:	f04f 0300 	mov.w	r3, #0
 8007fbc:	f04f 0400 	mov.w	r4, #0
 8007fc0:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current = 0;
 8007fc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fc6:	f04f 0300 	mov.w	r3, #0
 8007fca:	f04f 0400 	mov.w	r4, #0
 8007fce:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current = scurve->total_s;
 8007fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd4:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8007fd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fda:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8007fde:	e3a1      	b.n	8008724 <scaraFLowScurve+0xdac>
 8007fe0:	40080000 	.word	0x40080000
 8007fe4:	40100000 	.word	0x40100000
 8007fe8:	3fe00000 	.word	0x3fe00000
 8007fec:	40180000 	.word	0x40180000
		 }

	 // SCURVE 5 PHASE: tc > 0
	 } else if ( 5 == scurve->num_of_phase) {
 8007ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007ff6:	2b05      	cmp	r3, #5
 8007ff8:	f040 8392 	bne.w	8008720 <scaraFLowScurve+0xda8>
		 // Phase 1
		 if ( (0 <= time) && ( time < tm)) {
 8007ffc:	f04f 0200 	mov.w	r2, #0
 8008000:	f04f 0300 	mov.w	r3, #0
 8008004:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008008:	f7f8 fd8c 	bl	8000b24 <__aeabi_dcmpge>
 800800c:	4603      	mov	r3, r0
 800800e:	2b00      	cmp	r3, #0
 8008010:	d058      	beq.n	80080c4 <scaraFLowScurve+0x74c>
 8008012:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008016:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800801a:	f7f8 fd6f 	bl	8000afc <__aeabi_dcmplt>
 800801e:	4603      	mov	r3, r0
 8008020:	2b00      	cmp	r3, #0
 8008022:	d04f      	beq.n	80080c4 <scaraFLowScurve+0x74c>
			 t = time;
 8008024:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8008028:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	= 	j_max*t;
 800802c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008030:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008034:	f7f8 faf0 	bl	8000618 <__aeabi_dmul>
 8008038:	4603      	mov	r3, r0
 800803a:	460c      	mov	r4, r1
 800803c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800803e:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	= 	0.5*j_max*t*t;
 8008042:	f04f 0200 	mov.w	r2, #0
 8008046:	4b91      	ldr	r3, [pc, #580]	; (800828c <scaraFLowScurve+0x914>)
 8008048:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800804c:	f7f8 fae4 	bl	8000618 <__aeabi_dmul>
 8008050:	4603      	mov	r3, r0
 8008052:	460c      	mov	r4, r1
 8008054:	4618      	mov	r0, r3
 8008056:	4621      	mov	r1, r4
 8008058:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800805c:	f7f8 fadc 	bl	8000618 <__aeabi_dmul>
 8008060:	4603      	mov	r3, r0
 8008062:	460c      	mov	r4, r1
 8008064:	4618      	mov	r0, r3
 8008066:	4621      	mov	r1, r4
 8008068:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800806c:	f7f8 fad4 	bl	8000618 <__aeabi_dmul>
 8008070:	4603      	mov	r3, r0
 8008072:	460c      	mov	r4, r1
 8008074:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008076:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current 	= 	j_max*t*t*t/6;
 800807a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800807e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008082:	f7f8 fac9 	bl	8000618 <__aeabi_dmul>
 8008086:	4603      	mov	r3, r0
 8008088:	460c      	mov	r4, r1
 800808a:	4618      	mov	r0, r3
 800808c:	4621      	mov	r1, r4
 800808e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008092:	f7f8 fac1 	bl	8000618 <__aeabi_dmul>
 8008096:	4603      	mov	r3, r0
 8008098:	460c      	mov	r4, r1
 800809a:	4618      	mov	r0, r3
 800809c:	4621      	mov	r1, r4
 800809e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80080a2:	f7f8 fab9 	bl	8000618 <__aeabi_dmul>
 80080a6:	4603      	mov	r3, r0
 80080a8:	460c      	mov	r4, r1
 80080aa:	4618      	mov	r0, r3
 80080ac:	4621      	mov	r1, r4
 80080ae:	f04f 0200 	mov.w	r2, #0
 80080b2:	4b77      	ldr	r3, [pc, #476]	; (8008290 <scaraFLowScurve+0x918>)
 80080b4:	f7f8 fbda 	bl	800086c <__aeabi_ddiv>
 80080b8:	4603      	mov	r3, r0
 80080ba:	460c      	mov	r4, r1
 80080bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080be:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 80080c2:	e32f      	b.n	8008724 <scaraFLowScurve+0xdac>
		 // Phase 2
		 } else if ( (tm <= time) && ( time < (2*tm) ) ) {
 80080c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80080c8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80080cc:	f7f8 fd20 	bl	8000b10 <__aeabi_dcmple>
 80080d0:	4603      	mov	r3, r0
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	f000 80de 	beq.w	8008294 <scaraFLowScurve+0x91c>
 80080d8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80080dc:	4602      	mov	r2, r0
 80080de:	460b      	mov	r3, r1
 80080e0:	f7f8 f8e4 	bl	80002ac <__adddf3>
 80080e4:	4602      	mov	r2, r0
 80080e6:	460b      	mov	r3, r1
 80080e8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80080ec:	f7f8 fd06 	bl	8000afc <__aeabi_dcmplt>
 80080f0:	4603      	mov	r3, r0
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	f000 80ce 	beq.w	8008294 <scaraFLowScurve+0x91c>
			 t = time - tm;
 80080f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80080fc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008100:	f7f8 f8d2 	bl	80002a8 <__aeabi_dsub>
 8008104:	4603      	mov	r3, r0
 8008106:	460c      	mov	r4, r1
 8008108:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	= 	j_max*tm - j_max*t;
 800810c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008110:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008114:	f7f8 fa80 	bl	8000618 <__aeabi_dmul>
 8008118:	4603      	mov	r3, r0
 800811a:	460c      	mov	r4, r1
 800811c:	4625      	mov	r5, r4
 800811e:	461c      	mov	r4, r3
 8008120:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008124:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008128:	f7f8 fa76 	bl	8000618 <__aeabi_dmul>
 800812c:	4602      	mov	r2, r0
 800812e:	460b      	mov	r3, r1
 8008130:	4620      	mov	r0, r4
 8008132:	4629      	mov	r1, r5
 8008134:	f7f8 f8b8 	bl	80002a8 <__aeabi_dsub>
 8008138:	4603      	mov	r3, r0
 800813a:	460c      	mov	r4, r1
 800813c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800813e:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current 	= 	scurve->v_1 + j_max*tm*t - 0.5*j_max*t*t;
 8008142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008144:	e9d3 451e 	ldrd	r4, r5, [r3, #120]	; 0x78
 8008148:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800814c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008150:	f7f8 fa62 	bl	8000618 <__aeabi_dmul>
 8008154:	4602      	mov	r2, r0
 8008156:	460b      	mov	r3, r1
 8008158:	4610      	mov	r0, r2
 800815a:	4619      	mov	r1, r3
 800815c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008160:	f7f8 fa5a 	bl	8000618 <__aeabi_dmul>
 8008164:	4602      	mov	r2, r0
 8008166:	460b      	mov	r3, r1
 8008168:	4620      	mov	r0, r4
 800816a:	4629      	mov	r1, r5
 800816c:	f7f8 f89e 	bl	80002ac <__adddf3>
 8008170:	4603      	mov	r3, r0
 8008172:	460c      	mov	r4, r1
 8008174:	4625      	mov	r5, r4
 8008176:	461c      	mov	r4, r3
 8008178:	f04f 0200 	mov.w	r2, #0
 800817c:	4b43      	ldr	r3, [pc, #268]	; (800828c <scaraFLowScurve+0x914>)
 800817e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008182:	f7f8 fa49 	bl	8000618 <__aeabi_dmul>
 8008186:	4602      	mov	r2, r0
 8008188:	460b      	mov	r3, r1
 800818a:	4610      	mov	r0, r2
 800818c:	4619      	mov	r1, r3
 800818e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008192:	f7f8 fa41 	bl	8000618 <__aeabi_dmul>
 8008196:	4602      	mov	r2, r0
 8008198:	460b      	mov	r3, r1
 800819a:	4610      	mov	r0, r2
 800819c:	4619      	mov	r1, r3
 800819e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80081a2:	f7f8 fa39 	bl	8000618 <__aeabi_dmul>
 80081a6:	4602      	mov	r2, r0
 80081a8:	460b      	mov	r3, r1
 80081aa:	4620      	mov	r0, r4
 80081ac:	4629      	mov	r1, r5
 80081ae:	f7f8 f87b 	bl	80002a8 <__aeabi_dsub>
 80081b2:	4603      	mov	r3, r0
 80081b4:	460c      	mov	r4, r1
 80081b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081b8:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current 	=	scurve->s_1 + scurve->v_1*t + 0.5*j_max*tm*t*t - j_max*t*t*t/6;
 80081bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081be:	e9d3 4520 	ldrd	r4, r5, [r3, #128]	; 0x80
 80081c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c4:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 80081c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80081cc:	f7f8 fa24 	bl	8000618 <__aeabi_dmul>
 80081d0:	4602      	mov	r2, r0
 80081d2:	460b      	mov	r3, r1
 80081d4:	4620      	mov	r0, r4
 80081d6:	4629      	mov	r1, r5
 80081d8:	f7f8 f868 	bl	80002ac <__adddf3>
 80081dc:	4603      	mov	r3, r0
 80081de:	460c      	mov	r4, r1
 80081e0:	4625      	mov	r5, r4
 80081e2:	461c      	mov	r4, r3
 80081e4:	f04f 0200 	mov.w	r2, #0
 80081e8:	4b28      	ldr	r3, [pc, #160]	; (800828c <scaraFLowScurve+0x914>)
 80081ea:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80081ee:	f7f8 fa13 	bl	8000618 <__aeabi_dmul>
 80081f2:	4602      	mov	r2, r0
 80081f4:	460b      	mov	r3, r1
 80081f6:	4610      	mov	r0, r2
 80081f8:	4619      	mov	r1, r3
 80081fa:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80081fe:	f7f8 fa0b 	bl	8000618 <__aeabi_dmul>
 8008202:	4602      	mov	r2, r0
 8008204:	460b      	mov	r3, r1
 8008206:	4610      	mov	r0, r2
 8008208:	4619      	mov	r1, r3
 800820a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800820e:	f7f8 fa03 	bl	8000618 <__aeabi_dmul>
 8008212:	4602      	mov	r2, r0
 8008214:	460b      	mov	r3, r1
 8008216:	4610      	mov	r0, r2
 8008218:	4619      	mov	r1, r3
 800821a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800821e:	f7f8 f9fb 	bl	8000618 <__aeabi_dmul>
 8008222:	4602      	mov	r2, r0
 8008224:	460b      	mov	r3, r1
 8008226:	4620      	mov	r0, r4
 8008228:	4629      	mov	r1, r5
 800822a:	f7f8 f83f 	bl	80002ac <__adddf3>
 800822e:	4603      	mov	r3, r0
 8008230:	460c      	mov	r4, r1
 8008232:	4625      	mov	r5, r4
 8008234:	461c      	mov	r4, r3
 8008236:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800823a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800823e:	f7f8 f9eb 	bl	8000618 <__aeabi_dmul>
 8008242:	4602      	mov	r2, r0
 8008244:	460b      	mov	r3, r1
 8008246:	4610      	mov	r0, r2
 8008248:	4619      	mov	r1, r3
 800824a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800824e:	f7f8 f9e3 	bl	8000618 <__aeabi_dmul>
 8008252:	4602      	mov	r2, r0
 8008254:	460b      	mov	r3, r1
 8008256:	4610      	mov	r0, r2
 8008258:	4619      	mov	r1, r3
 800825a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800825e:	f7f8 f9db 	bl	8000618 <__aeabi_dmul>
 8008262:	4602      	mov	r2, r0
 8008264:	460b      	mov	r3, r1
 8008266:	4610      	mov	r0, r2
 8008268:	4619      	mov	r1, r3
 800826a:	f04f 0200 	mov.w	r2, #0
 800826e:	4b08      	ldr	r3, [pc, #32]	; (8008290 <scaraFLowScurve+0x918>)
 8008270:	f7f8 fafc 	bl	800086c <__aeabi_ddiv>
 8008274:	4602      	mov	r2, r0
 8008276:	460b      	mov	r3, r1
 8008278:	4620      	mov	r0, r4
 800827a:	4629      	mov	r1, r5
 800827c:	f7f8 f814 	bl	80002a8 <__aeabi_dsub>
 8008280:	4603      	mov	r3, r0
 8008282:	460c      	mov	r4, r1
 8008284:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008286:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 800828a:	e24b      	b.n	8008724 <scaraFLowScurve+0xdac>
 800828c:	3fe00000 	.word	0x3fe00000
 8008290:	40180000 	.word	0x40180000
		 // Phase 3
		 } else if ( ((2*tm) <= time) && ( time < (2*tm + tc)) ) {
 8008294:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008298:	4602      	mov	r2, r0
 800829a:	460b      	mov	r3, r1
 800829c:	f7f8 f806 	bl	80002ac <__adddf3>
 80082a0:	4602      	mov	r2, r0
 80082a2:	460b      	mov	r3, r1
 80082a4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80082a8:	f7f8 fc3c 	bl	8000b24 <__aeabi_dcmpge>
 80082ac:	4603      	mov	r3, r0
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d04b      	beq.n	800834a <scaraFLowScurve+0x9d2>
 80082b2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80082b6:	4602      	mov	r2, r0
 80082b8:	460b      	mov	r3, r1
 80082ba:	f7f7 fff7 	bl	80002ac <__adddf3>
 80082be:	4602      	mov	r2, r0
 80082c0:	460b      	mov	r3, r1
 80082c2:	4610      	mov	r0, r2
 80082c4:	4619      	mov	r1, r3
 80082c6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80082ca:	f7f7 ffef 	bl	80002ac <__adddf3>
 80082ce:	4602      	mov	r2, r0
 80082d0:	460b      	mov	r3, r1
 80082d2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80082d6:	f7f8 fc11 	bl	8000afc <__aeabi_dcmplt>
 80082da:	4603      	mov	r3, r0
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d034      	beq.n	800834a <scaraFLowScurve+0x9d2>
			 t = time - 2*tm;
 80082e0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80082e4:	4602      	mov	r2, r0
 80082e6:	460b      	mov	r3, r1
 80082e8:	f7f7 ffe0 	bl	80002ac <__adddf3>
 80082ec:	4603      	mov	r3, r0
 80082ee:	460c      	mov	r4, r1
 80082f0:	461a      	mov	r2, r3
 80082f2:	4623      	mov	r3, r4
 80082f4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80082f8:	f7f7 ffd6 	bl	80002a8 <__aeabi_dsub>
 80082fc:	4603      	mov	r3, r0
 80082fe:	460c      	mov	r4, r1
 8008300:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	=	0;
 8008304:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008306:	f04f 0300 	mov.w	r3, #0
 800830a:	f04f 0400 	mov.w	r4, #0
 800830e:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_2;
 8008312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008314:	e9d3 3422 	ldrd	r3, r4, [r3, #136]	; 0x88
 8008318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800831a:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_2 + scurve->v_2*t;
 800831e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008320:	e9d3 4524 	ldrd	r4, r5, [r3, #144]	; 0x90
 8008324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008326:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 800832a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800832e:	f7f8 f973 	bl	8000618 <__aeabi_dmul>
 8008332:	4602      	mov	r2, r0
 8008334:	460b      	mov	r3, r1
 8008336:	4620      	mov	r0, r4
 8008338:	4629      	mov	r1, r5
 800833a:	f7f7 ffb7 	bl	80002ac <__adddf3>
 800833e:	4603      	mov	r3, r0
 8008340:	460c      	mov	r4, r1
 8008342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008344:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8008348:	e1ec      	b.n	8008724 <scaraFLowScurve+0xdac>
		 // Phase 4
		 } else if ( ((2*tm + tc) <= time) && ( time < (3*tm + tc)) ) {
 800834a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800834e:	4602      	mov	r2, r0
 8008350:	460b      	mov	r3, r1
 8008352:	f7f7 ffab 	bl	80002ac <__adddf3>
 8008356:	4602      	mov	r2, r0
 8008358:	460b      	mov	r3, r1
 800835a:	4610      	mov	r0, r2
 800835c:	4619      	mov	r1, r3
 800835e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008362:	f7f7 ffa3 	bl	80002ac <__adddf3>
 8008366:	4602      	mov	r2, r0
 8008368:	460b      	mov	r3, r1
 800836a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800836e:	f7f8 fbd9 	bl	8000b24 <__aeabi_dcmpge>
 8008372:	4603      	mov	r3, r0
 8008374:	2b00      	cmp	r3, #0
 8008376:	f000 80af 	beq.w	80084d8 <scaraFLowScurve+0xb60>
 800837a:	f04f 0200 	mov.w	r2, #0
 800837e:	4b53      	ldr	r3, [pc, #332]	; (80084cc <scaraFLowScurve+0xb54>)
 8008380:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008384:	f7f8 f948 	bl	8000618 <__aeabi_dmul>
 8008388:	4602      	mov	r2, r0
 800838a:	460b      	mov	r3, r1
 800838c:	4610      	mov	r0, r2
 800838e:	4619      	mov	r1, r3
 8008390:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008394:	f7f7 ff8a 	bl	80002ac <__adddf3>
 8008398:	4602      	mov	r2, r0
 800839a:	460b      	mov	r3, r1
 800839c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80083a0:	f7f8 fbac 	bl	8000afc <__aeabi_dcmplt>
 80083a4:	4603      	mov	r3, r0
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	f000 8096 	beq.w	80084d8 <scaraFLowScurve+0xb60>
			 t = time - (2*tm + tc);
 80083ac:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80083b0:	4602      	mov	r2, r0
 80083b2:	460b      	mov	r3, r1
 80083b4:	f7f7 ff7a 	bl	80002ac <__adddf3>
 80083b8:	4603      	mov	r3, r0
 80083ba:	460c      	mov	r4, r1
 80083bc:	4618      	mov	r0, r3
 80083be:	4621      	mov	r1, r4
 80083c0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80083c4:	f7f7 ff72 	bl	80002ac <__adddf3>
 80083c8:	4603      	mov	r3, r0
 80083ca:	460c      	mov	r4, r1
 80083cc:	461a      	mov	r2, r3
 80083ce:	4623      	mov	r3, r4
 80083d0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80083d4:	f7f7 ff68 	bl	80002a8 <__aeabi_dsub>
 80083d8:	4603      	mov	r3, r0
 80083da:	460c      	mov	r4, r1
 80083dc:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	=	-j_max*t;
 80083e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083e2:	603b      	str	r3, [r7, #0]
 80083e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083e6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80083ea:	607b      	str	r3, [r7, #4]
 80083ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80083f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80083f4:	f7f8 f910 	bl	8000618 <__aeabi_dmul>
 80083f8:	4603      	mov	r3, r0
 80083fa:	460c      	mov	r4, r1
 80083fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083fe:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_3 - 0.5*j_max*t*t;
 8008402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008404:	e9d3 4526 	ldrd	r4, r5, [r3, #152]	; 0x98
 8008408:	f04f 0200 	mov.w	r2, #0
 800840c:	4b30      	ldr	r3, [pc, #192]	; (80084d0 <scaraFLowScurve+0xb58>)
 800840e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008412:	f7f8 f901 	bl	8000618 <__aeabi_dmul>
 8008416:	4602      	mov	r2, r0
 8008418:	460b      	mov	r3, r1
 800841a:	4610      	mov	r0, r2
 800841c:	4619      	mov	r1, r3
 800841e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008422:	f7f8 f8f9 	bl	8000618 <__aeabi_dmul>
 8008426:	4602      	mov	r2, r0
 8008428:	460b      	mov	r3, r1
 800842a:	4610      	mov	r0, r2
 800842c:	4619      	mov	r1, r3
 800842e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008432:	f7f8 f8f1 	bl	8000618 <__aeabi_dmul>
 8008436:	4602      	mov	r2, r0
 8008438:	460b      	mov	r3, r1
 800843a:	4620      	mov	r0, r4
 800843c:	4629      	mov	r1, r5
 800843e:	f7f7 ff33 	bl	80002a8 <__aeabi_dsub>
 8008442:	4603      	mov	r3, r0
 8008444:	460c      	mov	r4, r1
 8008446:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008448:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_3 + scurve->v_3*t - j_max*t*t*t/6;
 800844c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800844e:	e9d3 4528 	ldrd	r4, r5, [r3, #160]	; 0xa0
 8008452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008454:	e9d3 0126 	ldrd	r0, r1, [r3, #152]	; 0x98
 8008458:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800845c:	f7f8 f8dc 	bl	8000618 <__aeabi_dmul>
 8008460:	4602      	mov	r2, r0
 8008462:	460b      	mov	r3, r1
 8008464:	4620      	mov	r0, r4
 8008466:	4629      	mov	r1, r5
 8008468:	f7f7 ff20 	bl	80002ac <__adddf3>
 800846c:	4603      	mov	r3, r0
 800846e:	460c      	mov	r4, r1
 8008470:	4625      	mov	r5, r4
 8008472:	461c      	mov	r4, r3
 8008474:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008478:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800847c:	f7f8 f8cc 	bl	8000618 <__aeabi_dmul>
 8008480:	4602      	mov	r2, r0
 8008482:	460b      	mov	r3, r1
 8008484:	4610      	mov	r0, r2
 8008486:	4619      	mov	r1, r3
 8008488:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800848c:	f7f8 f8c4 	bl	8000618 <__aeabi_dmul>
 8008490:	4602      	mov	r2, r0
 8008492:	460b      	mov	r3, r1
 8008494:	4610      	mov	r0, r2
 8008496:	4619      	mov	r1, r3
 8008498:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800849c:	f7f8 f8bc 	bl	8000618 <__aeabi_dmul>
 80084a0:	4602      	mov	r2, r0
 80084a2:	460b      	mov	r3, r1
 80084a4:	4610      	mov	r0, r2
 80084a6:	4619      	mov	r1, r3
 80084a8:	f04f 0200 	mov.w	r2, #0
 80084ac:	4b09      	ldr	r3, [pc, #36]	; (80084d4 <scaraFLowScurve+0xb5c>)
 80084ae:	f7f8 f9dd 	bl	800086c <__aeabi_ddiv>
 80084b2:	4602      	mov	r2, r0
 80084b4:	460b      	mov	r3, r1
 80084b6:	4620      	mov	r0, r4
 80084b8:	4629      	mov	r1, r5
 80084ba:	f7f7 fef5 	bl	80002a8 <__aeabi_dsub>
 80084be:	4603      	mov	r3, r0
 80084c0:	460c      	mov	r4, r1
 80084c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084c4:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 80084c8:	e12c      	b.n	8008724 <scaraFLowScurve+0xdac>
 80084ca:	bf00      	nop
 80084cc:	40080000 	.word	0x40080000
 80084d0:	3fe00000 	.word	0x3fe00000
 80084d4:	40180000 	.word	0x40180000
		 // Phase 5
		 } else if ( ((3*tm + tc) <= time) && ( time < (4*tm + tc)) ) {
 80084d8:	f04f 0200 	mov.w	r2, #0
 80084dc:	4b94      	ldr	r3, [pc, #592]	; (8008730 <scaraFLowScurve+0xdb8>)
 80084de:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80084e2:	f7f8 f899 	bl	8000618 <__aeabi_dmul>
 80084e6:	4602      	mov	r2, r0
 80084e8:	460b      	mov	r3, r1
 80084ea:	4610      	mov	r0, r2
 80084ec:	4619      	mov	r1, r3
 80084ee:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80084f2:	f7f7 fedb 	bl	80002ac <__adddf3>
 80084f6:	4602      	mov	r2, r0
 80084f8:	460b      	mov	r3, r1
 80084fa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80084fe:	f7f8 fb11 	bl	8000b24 <__aeabi_dcmpge>
 8008502:	4603      	mov	r3, r0
 8008504:	2b00      	cmp	r3, #0
 8008506:	f000 80f6 	beq.w	80086f6 <scaraFLowScurve+0xd7e>
 800850a:	f04f 0200 	mov.w	r2, #0
 800850e:	4b89      	ldr	r3, [pc, #548]	; (8008734 <scaraFLowScurve+0xdbc>)
 8008510:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008514:	f7f8 f880 	bl	8000618 <__aeabi_dmul>
 8008518:	4602      	mov	r2, r0
 800851a:	460b      	mov	r3, r1
 800851c:	4610      	mov	r0, r2
 800851e:	4619      	mov	r1, r3
 8008520:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008524:	f7f7 fec2 	bl	80002ac <__adddf3>
 8008528:	4602      	mov	r2, r0
 800852a:	460b      	mov	r3, r1
 800852c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008530:	f7f8 fae4 	bl	8000afc <__aeabi_dcmplt>
 8008534:	4603      	mov	r3, r0
 8008536:	2b00      	cmp	r3, #0
 8008538:	f000 80dd 	beq.w	80086f6 <scaraFLowScurve+0xd7e>
			 t = time - (3*tm + tc);
 800853c:	f04f 0200 	mov.w	r2, #0
 8008540:	4b7b      	ldr	r3, [pc, #492]	; (8008730 <scaraFLowScurve+0xdb8>)
 8008542:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008546:	f7f8 f867 	bl	8000618 <__aeabi_dmul>
 800854a:	4602      	mov	r2, r0
 800854c:	460b      	mov	r3, r1
 800854e:	4610      	mov	r0, r2
 8008550:	4619      	mov	r1, r3
 8008552:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008556:	f7f7 fea9 	bl	80002ac <__adddf3>
 800855a:	4602      	mov	r2, r0
 800855c:	460b      	mov	r3, r1
 800855e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008562:	f7f7 fea1 	bl	80002a8 <__aeabi_dsub>
 8008566:	4602      	mov	r2, r0
 8008568:	460b      	mov	r3, r1
 800856a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			 scurve->a_current	=	-j_max*tm + j_max*t;
 800856e:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8008570:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008572:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8008576:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800857a:	4620      	mov	r0, r4
 800857c:	4629      	mov	r1, r5
 800857e:	f7f8 f84b 	bl	8000618 <__aeabi_dmul>
 8008582:	4603      	mov	r3, r0
 8008584:	460c      	mov	r4, r1
 8008586:	4625      	mov	r5, r4
 8008588:	461c      	mov	r4, r3
 800858a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800858e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008592:	f7f8 f841 	bl	8000618 <__aeabi_dmul>
 8008596:	4602      	mov	r2, r0
 8008598:	460b      	mov	r3, r1
 800859a:	4620      	mov	r0, r4
 800859c:	4629      	mov	r1, r5
 800859e:	f7f7 fe85 	bl	80002ac <__adddf3>
 80085a2:	4603      	mov	r3, r0
 80085a4:	460c      	mov	r4, r1
 80085a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085a8:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_4 - j_max*tm*t + 0.5*j_max*t*t;
 80085ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ae:	e9d3 452a 	ldrd	r4, r5, [r3, #168]	; 0xa8
 80085b2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80085b6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80085ba:	f7f8 f82d 	bl	8000618 <__aeabi_dmul>
 80085be:	4602      	mov	r2, r0
 80085c0:	460b      	mov	r3, r1
 80085c2:	4610      	mov	r0, r2
 80085c4:	4619      	mov	r1, r3
 80085c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80085ca:	f7f8 f825 	bl	8000618 <__aeabi_dmul>
 80085ce:	4602      	mov	r2, r0
 80085d0:	460b      	mov	r3, r1
 80085d2:	4620      	mov	r0, r4
 80085d4:	4629      	mov	r1, r5
 80085d6:	f7f7 fe67 	bl	80002a8 <__aeabi_dsub>
 80085da:	4603      	mov	r3, r0
 80085dc:	460c      	mov	r4, r1
 80085de:	4625      	mov	r5, r4
 80085e0:	461c      	mov	r4, r3
 80085e2:	f04f 0200 	mov.w	r2, #0
 80085e6:	4b54      	ldr	r3, [pc, #336]	; (8008738 <scaraFLowScurve+0xdc0>)
 80085e8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80085ec:	f7f8 f814 	bl	8000618 <__aeabi_dmul>
 80085f0:	4602      	mov	r2, r0
 80085f2:	460b      	mov	r3, r1
 80085f4:	4610      	mov	r0, r2
 80085f6:	4619      	mov	r1, r3
 80085f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80085fc:	f7f8 f80c 	bl	8000618 <__aeabi_dmul>
 8008600:	4602      	mov	r2, r0
 8008602:	460b      	mov	r3, r1
 8008604:	4610      	mov	r0, r2
 8008606:	4619      	mov	r1, r3
 8008608:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800860c:	f7f8 f804 	bl	8000618 <__aeabi_dmul>
 8008610:	4602      	mov	r2, r0
 8008612:	460b      	mov	r3, r1
 8008614:	4620      	mov	r0, r4
 8008616:	4629      	mov	r1, r5
 8008618:	f7f7 fe48 	bl	80002ac <__adddf3>
 800861c:	4603      	mov	r3, r0
 800861e:	460c      	mov	r4, r1
 8008620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008622:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_4 + scurve->v_4*t - 0.5*j_max*tm*t*t + j_max*t*t*t/6;
 8008626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008628:	e9d3 452c 	ldrd	r4, r5, [r3, #176]	; 0xb0
 800862c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800862e:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
 8008632:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008636:	f7f7 ffef 	bl	8000618 <__aeabi_dmul>
 800863a:	4602      	mov	r2, r0
 800863c:	460b      	mov	r3, r1
 800863e:	4620      	mov	r0, r4
 8008640:	4629      	mov	r1, r5
 8008642:	f7f7 fe33 	bl	80002ac <__adddf3>
 8008646:	4603      	mov	r3, r0
 8008648:	460c      	mov	r4, r1
 800864a:	4625      	mov	r5, r4
 800864c:	461c      	mov	r4, r3
 800864e:	f04f 0200 	mov.w	r2, #0
 8008652:	4b39      	ldr	r3, [pc, #228]	; (8008738 <scaraFLowScurve+0xdc0>)
 8008654:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008658:	f7f7 ffde 	bl	8000618 <__aeabi_dmul>
 800865c:	4602      	mov	r2, r0
 800865e:	460b      	mov	r3, r1
 8008660:	4610      	mov	r0, r2
 8008662:	4619      	mov	r1, r3
 8008664:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008668:	f7f7 ffd6 	bl	8000618 <__aeabi_dmul>
 800866c:	4602      	mov	r2, r0
 800866e:	460b      	mov	r3, r1
 8008670:	4610      	mov	r0, r2
 8008672:	4619      	mov	r1, r3
 8008674:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008678:	f7f7 ffce 	bl	8000618 <__aeabi_dmul>
 800867c:	4602      	mov	r2, r0
 800867e:	460b      	mov	r3, r1
 8008680:	4610      	mov	r0, r2
 8008682:	4619      	mov	r1, r3
 8008684:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008688:	f7f7 ffc6 	bl	8000618 <__aeabi_dmul>
 800868c:	4602      	mov	r2, r0
 800868e:	460b      	mov	r3, r1
 8008690:	4620      	mov	r0, r4
 8008692:	4629      	mov	r1, r5
 8008694:	f7f7 fe08 	bl	80002a8 <__aeabi_dsub>
 8008698:	4603      	mov	r3, r0
 800869a:	460c      	mov	r4, r1
 800869c:	4625      	mov	r5, r4
 800869e:	461c      	mov	r4, r3
 80086a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80086a4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80086a8:	f7f7 ffb6 	bl	8000618 <__aeabi_dmul>
 80086ac:	4602      	mov	r2, r0
 80086ae:	460b      	mov	r3, r1
 80086b0:	4610      	mov	r0, r2
 80086b2:	4619      	mov	r1, r3
 80086b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80086b8:	f7f7 ffae 	bl	8000618 <__aeabi_dmul>
 80086bc:	4602      	mov	r2, r0
 80086be:	460b      	mov	r3, r1
 80086c0:	4610      	mov	r0, r2
 80086c2:	4619      	mov	r1, r3
 80086c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80086c8:	f7f7 ffa6 	bl	8000618 <__aeabi_dmul>
 80086cc:	4602      	mov	r2, r0
 80086ce:	460b      	mov	r3, r1
 80086d0:	4610      	mov	r0, r2
 80086d2:	4619      	mov	r1, r3
 80086d4:	f04f 0200 	mov.w	r2, #0
 80086d8:	4b18      	ldr	r3, [pc, #96]	; (800873c <scaraFLowScurve+0xdc4>)
 80086da:	f7f8 f8c7 	bl	800086c <__aeabi_ddiv>
 80086de:	4602      	mov	r2, r0
 80086e0:	460b      	mov	r3, r1
 80086e2:	4620      	mov	r0, r4
 80086e4:	4629      	mov	r1, r5
 80086e6:	f7f7 fde1 	bl	80002ac <__adddf3>
 80086ea:	4603      	mov	r3, r0
 80086ec:	460c      	mov	r4, r1
 80086ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086f0:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 80086f4:	e016      	b.n	8008724 <scaraFLowScurve+0xdac>
		 } else {
			 scurve->a_current = 0;
 80086f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086f8:	f04f 0300 	mov.w	r3, #0
 80086fc:	f04f 0400 	mov.w	r4, #0
 8008700:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current = 0;
 8008704:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008706:	f04f 0300 	mov.w	r3, #0
 800870a:	f04f 0400 	mov.w	r4, #0
 800870e:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current = scurve->total_s;
 8008712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008714:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8008718:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800871a:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 800871e:	e001      	b.n	8008724 <scaraFLowScurve+0xdac>
		 }

	 } else {
		 return SCARA_STATUS_ERROR;
 8008720:	2301      	movs	r3, #1
 8008722:	e000      	b.n	8008726 <scaraFLowScurve+0xdae>
	 }

	 return SCARA_STATUS_OK;
 8008724:	2300      	movs	r3, #0
}
 8008726:	4618      	mov	r0, r3
 8008728:	3748      	adds	r7, #72	; 0x48
 800872a:	46bd      	mov	sp, r7
 800872c:	bdb0      	pop	{r4, r5, r7, pc}
 800872e:	bf00      	nop
 8008730:	40080000 	.word	0x40080000
 8008734:	40100000 	.word	0x40100000
 8008738:	3fe00000 	.word	0x3fe00000
 800873c:	40180000 	.word	0x40180000

08008740 <scaraCheckWorkSpace4>:

/* Check limit 4 joint variable */
SCARA_StatusTypeDef	scaraCheckWorkSpace4 (double theta1, double theta2, double d3, double theta4) {
 8008740:	b580      	push	{r7, lr}
 8008742:	b088      	sub	sp, #32
 8008744:	af00      	add	r7, sp, #0
 8008746:	ed87 0b06 	vstr	d0, [r7, #24]
 800874a:	ed87 1b04 	vstr	d1, [r7, #16]
 800874e:	ed87 2b02 	vstr	d2, [r7, #8]
 8008752:	ed87 3b00 	vstr	d3, [r7]
	// check theta 1
	if ( theta1 < LIM_MIN_J0 || theta1 > LIM_MAX_J0) {
 8008756:	a335      	add	r3, pc, #212	; (adr r3, 800882c <scaraCheckWorkSpace4+0xec>)
 8008758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800875c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008760:	f7f8 f9cc 	bl	8000afc <__aeabi_dcmplt>
 8008764:	4603      	mov	r3, r0
 8008766:	2b00      	cmp	r3, #0
 8008768:	d109      	bne.n	800877e <scaraCheckWorkSpace4+0x3e>
 800876a:	a332      	add	r3, pc, #200	; (adr r3, 8008834 <scaraCheckWorkSpace4+0xf4>)
 800876c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008770:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008774:	f7f8 f9e0 	bl	8000b38 <__aeabi_dcmpgt>
 8008778:	4603      	mov	r3, r0
 800877a:	2b00      	cmp	r3, #0
 800877c:	d001      	beq.n	8008782 <scaraCheckWorkSpace4+0x42>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800877e:	2307      	movs	r3, #7
 8008780:	e043      	b.n	800880a <scaraCheckWorkSpace4+0xca>
	}
	// check theta 2
	if ( theta2 < LIM_MIN_J1 || theta2 > LIM_MAX_J1) {
 8008782:	a32e      	add	r3, pc, #184	; (adr r3, 800883c <scaraCheckWorkSpace4+0xfc>)
 8008784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008788:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800878c:	f7f8 f9b6 	bl	8000afc <__aeabi_dcmplt>
 8008790:	4603      	mov	r3, r0
 8008792:	2b00      	cmp	r3, #0
 8008794:	d109      	bne.n	80087aa <scaraCheckWorkSpace4+0x6a>
 8008796:	a32b      	add	r3, pc, #172	; (adr r3, 8008844 <scaraCheckWorkSpace4+0x104>)
 8008798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800879c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80087a0:	f7f8 f9ca 	bl	8000b38 <__aeabi_dcmpgt>
 80087a4:	4603      	mov	r3, r0
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d001      	beq.n	80087ae <scaraCheckWorkSpace4+0x6e>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 80087aa:	2307      	movs	r3, #7
 80087ac:	e02d      	b.n	800880a <scaraCheckWorkSpace4+0xca>
	}
	// check d 3
	if ( d3 < LIM_MIN_J2 || d3 > LIM_MAX_J2) {
 80087ae:	f04f 0200 	mov.w	r2, #0
 80087b2:	f04f 0300 	mov.w	r3, #0
 80087b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80087ba:	f7f8 f99f 	bl	8000afc <__aeabi_dcmplt>
 80087be:	4603      	mov	r3, r0
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d109      	bne.n	80087d8 <scaraCheckWorkSpace4+0x98>
 80087c4:	f04f 0200 	mov.w	r2, #0
 80087c8:	4b17      	ldr	r3, [pc, #92]	; (8008828 <scaraCheckWorkSpace4+0xe8>)
 80087ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80087ce:	f7f8 f9b3 	bl	8000b38 <__aeabi_dcmpgt>
 80087d2:	4603      	mov	r3, r0
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d001      	beq.n	80087dc <scaraCheckWorkSpace4+0x9c>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 80087d8:	2307      	movs	r3, #7
 80087da:	e016      	b.n	800880a <scaraCheckWorkSpace4+0xca>
	}
	// check theta 4
	if ( theta4 < LIM_MIN_J3 || theta4 > LIM_MAX_J3) {
 80087dc:	a30e      	add	r3, pc, #56	; (adr r3, 8008818 <scaraCheckWorkSpace4+0xd8>)
 80087de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80087e6:	f7f8 f989 	bl	8000afc <__aeabi_dcmplt>
 80087ea:	4603      	mov	r3, r0
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d109      	bne.n	8008804 <scaraCheckWorkSpace4+0xc4>
 80087f0:	a30b      	add	r3, pc, #44	; (adr r3, 8008820 <scaraCheckWorkSpace4+0xe0>)
 80087f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80087fa:	f7f8 f99d 	bl	8000b38 <__aeabi_dcmpgt>
 80087fe:	4603      	mov	r3, r0
 8008800:	2b00      	cmp	r3, #0
 8008802:	d001      	beq.n	8008808 <scaraCheckWorkSpace4+0xc8>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8008804:	2307      	movs	r3, #7
 8008806:	e000      	b.n	800880a <scaraCheckWorkSpace4+0xca>
	}
	return SCARA_STATUS_OK;
 8008808:	2300      	movs	r3, #0
}
 800880a:	4618      	mov	r0, r3
 800880c:	3720      	adds	r7, #32
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}
 8008812:	bf00      	nop
 8008814:	f3af 8000 	nop.w
 8008818:	daaaaaab 	.word	0xdaaaaaab
 800881c:	c007bc89 	.word	0xc007bc89
 8008820:	daaaaaab 	.word	0xdaaaaaab
 8008824:	4007bc89 	.word	0x4007bc89
 8008828:	40568000 	.word	0x40568000
 800882c:	daaaaaab 	.word	0xdaaaaaab
 8008830:	bff7bc89 	.word	0xbff7bc89
 8008834:	daaaaaab 	.word	0xdaaaaaab
 8008838:	3ff7bc89 	.word	0x3ff7bc89
 800883c:	88000000 	.word	0x88000000
 8008840:	c002d97c 	.word	0xc002d97c
 8008844:	88000000 	.word	0x88000000
 8008848:	4002d97c 	.word	0x4002d97c
 800884c:	00000000 	.word	0x00000000

08008850 <scaraCheckWorkSpace1>:

/* Check limit 1 joint variable */
SCARA_StatusTypeDef	scaraCheckWorkSpace1 (Trajectory_TargetTypeDef target, double value) {
 8008850:	b580      	push	{r7, lr}
 8008852:	b084      	sub	sp, #16
 8008854:	af00      	add	r7, sp, #0
 8008856:	4603      	mov	r3, r0
 8008858:	ed87 0b00 	vstr	d0, [r7]
 800885c:	73fb      	strb	r3, [r7, #15]
	if ( TRAJECTORY_J0 == target) {
 800885e:	7bfb      	ldrb	r3, [r7, #15]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d117      	bne.n	8008894 <scaraCheckWorkSpace1+0x44>
		if ( (LIM_MIN_J0 <= value) && ( value <= LIM_MAX_J0)) {
 8008864:	a33d      	add	r3, pc, #244	; (adr r3, 800895c <scaraCheckWorkSpace1+0x10c>)
 8008866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800886a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800886e:	f7f8 f959 	bl	8000b24 <__aeabi_dcmpge>
 8008872:	4603      	mov	r3, r0
 8008874:	2b00      	cmp	r3, #0
 8008876:	d00b      	beq.n	8008890 <scaraCheckWorkSpace1+0x40>
 8008878:	a33a      	add	r3, pc, #232	; (adr r3, 8008964 <scaraCheckWorkSpace1+0x114>)
 800887a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800887e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008882:	f7f8 f945 	bl	8000b10 <__aeabi_dcmple>
 8008886:	4603      	mov	r3, r0
 8008888:	2b00      	cmp	r3, #0
 800888a:	d001      	beq.n	8008890 <scaraCheckWorkSpace1+0x40>
			return SCARA_STATUS_OK;
 800888c:	2300      	movs	r3, #0
 800888e:	e054      	b.n	800893a <scaraCheckWorkSpace1+0xea>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8008890:	2307      	movs	r3, #7
 8008892:	e052      	b.n	800893a <scaraCheckWorkSpace1+0xea>
		}
	} else if (TRAJECTORY_J1 == target) {
 8008894:	7bfb      	ldrb	r3, [r7, #15]
 8008896:	2b01      	cmp	r3, #1
 8008898:	d117      	bne.n	80088ca <scaraCheckWorkSpace1+0x7a>
		if ( (LIM_MIN_J1 <= value) && ( value <= LIM_MAX_J1)) {
 800889a:	a334      	add	r3, pc, #208	; (adr r3, 800896c <scaraCheckWorkSpace1+0x11c>)
 800889c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80088a4:	f7f8 f93e 	bl	8000b24 <__aeabi_dcmpge>
 80088a8:	4603      	mov	r3, r0
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d00b      	beq.n	80088c6 <scaraCheckWorkSpace1+0x76>
 80088ae:	a331      	add	r3, pc, #196	; (adr r3, 8008974 <scaraCheckWorkSpace1+0x124>)
 80088b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80088b8:	f7f8 f92a 	bl	8000b10 <__aeabi_dcmple>
 80088bc:	4603      	mov	r3, r0
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d001      	beq.n	80088c6 <scaraCheckWorkSpace1+0x76>
			return SCARA_STATUS_OK;
 80088c2:	2300      	movs	r3, #0
 80088c4:	e039      	b.n	800893a <scaraCheckWorkSpace1+0xea>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 80088c6:	2307      	movs	r3, #7
 80088c8:	e037      	b.n	800893a <scaraCheckWorkSpace1+0xea>
		}
	} else if (TRAJECTORY_J2 == target) {
 80088ca:	7bfb      	ldrb	r3, [r7, #15]
 80088cc:	2b02      	cmp	r3, #2
 80088ce:	d118      	bne.n	8008902 <scaraCheckWorkSpace1+0xb2>
		if ( (LIM_MIN_J2 <= value) && ( value <= LIM_MAX_J2)) {
 80088d0:	f04f 0200 	mov.w	r2, #0
 80088d4:	f04f 0300 	mov.w	r3, #0
 80088d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80088dc:	f7f8 f922 	bl	8000b24 <__aeabi_dcmpge>
 80088e0:	4603      	mov	r3, r0
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d00b      	beq.n	80088fe <scaraCheckWorkSpace1+0xae>
 80088e6:	f04f 0200 	mov.w	r2, #0
 80088ea:	4b1b      	ldr	r3, [pc, #108]	; (8008958 <scaraCheckWorkSpace1+0x108>)
 80088ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80088f0:	f7f8 f90e 	bl	8000b10 <__aeabi_dcmple>
 80088f4:	4603      	mov	r3, r0
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d001      	beq.n	80088fe <scaraCheckWorkSpace1+0xae>
			return SCARA_STATUS_OK;
 80088fa:	2300      	movs	r3, #0
 80088fc:	e01d      	b.n	800893a <scaraCheckWorkSpace1+0xea>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 80088fe:	2307      	movs	r3, #7
 8008900:	e01b      	b.n	800893a <scaraCheckWorkSpace1+0xea>
		}
	} else if (TRAJECTORY_J3 == target) {
 8008902:	7bfb      	ldrb	r3, [r7, #15]
 8008904:	2b03      	cmp	r3, #3
 8008906:	d117      	bne.n	8008938 <scaraCheckWorkSpace1+0xe8>
		if ( (LIM_MIN_J3 <= value) && ( value <= LIM_MAX_J3)) {
 8008908:	a30f      	add	r3, pc, #60	; (adr r3, 8008948 <scaraCheckWorkSpace1+0xf8>)
 800890a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800890e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008912:	f7f8 f907 	bl	8000b24 <__aeabi_dcmpge>
 8008916:	4603      	mov	r3, r0
 8008918:	2b00      	cmp	r3, #0
 800891a:	d00b      	beq.n	8008934 <scaraCheckWorkSpace1+0xe4>
 800891c:	a30c      	add	r3, pc, #48	; (adr r3, 8008950 <scaraCheckWorkSpace1+0x100>)
 800891e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008922:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008926:	f7f8 f8f3 	bl	8000b10 <__aeabi_dcmple>
 800892a:	4603      	mov	r3, r0
 800892c:	2b00      	cmp	r3, #0
 800892e:	d001      	beq.n	8008934 <scaraCheckWorkSpace1+0xe4>
			return SCARA_STATUS_OK;
 8008930:	2300      	movs	r3, #0
 8008932:	e002      	b.n	800893a <scaraCheckWorkSpace1+0xea>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8008934:	2307      	movs	r3, #7
 8008936:	e000      	b.n	800893a <scaraCheckWorkSpace1+0xea>
		}
	} else {
		return SCARA_STATUS_ERROR;
 8008938:	2301      	movs	r3, #1
	}
}
 800893a:	4618      	mov	r0, r3
 800893c:	3710      	adds	r7, #16
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}
 8008942:	bf00      	nop
 8008944:	f3af 8000 	nop.w
 8008948:	daaaaaab 	.word	0xdaaaaaab
 800894c:	c007bc89 	.word	0xc007bc89
 8008950:	daaaaaab 	.word	0xdaaaaaab
 8008954:	4007bc89 	.word	0x4007bc89
 8008958:	40568000 	.word	0x40568000
 800895c:	daaaaaab 	.word	0xdaaaaaab
 8008960:	bff7bc89 	.word	0xbff7bc89
 8008964:	daaaaaab 	.word	0xdaaaaaab
 8008968:	3ff7bc89 	.word	0x3ff7bc89
 800896c:	88000000 	.word	0x88000000
 8008970:	c002d97c 	.word	0xc002d97c
 8008974:	88000000 	.word	0x88000000
 8008978:	4002d97c 	.word	0x4002d97c
 800897c:	00000000 	.word	0x00000000

08008980 <scaraTestDuty>:

/* Check all of point in travel */
SCARA_StatusTypeDef	scaraTestDuty(void) {
 8008980:	b590      	push	{r4, r7, lr}
 8008982:	b0d3      	sub	sp, #332	; 0x14c
 8008984:	af18      	add	r7, sp, #96	; 0x60
	int32_t sample_count;
	double run_time = 0;
 8008986:	f04f 0300 	mov.w	r3, #0
 800898a:	f04f 0400 	mov.w	r4, #0
 800898e:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
	SCARA_PositionTypeDef test_Next, test_Current;
	SCARA_StatusTypeDef status;
	memcpy(&test_Current, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 8008992:	4a35      	ldr	r2, [pc, #212]	; (8008a68 <scaraTestDuty+0xe8>)
 8008994:	463b      	mov	r3, r7
 8008996:	4611      	mov	r1, r2
 8008998:	2268      	movs	r2, #104	; 0x68
 800899a:	4618      	mov	r0, r3
 800899c:	f00b f960 	bl	8013c60 <memcpy>
	sample_count = ceil(myDUTY.time_total/T_SAMPLING);
 80089a0:	4b32      	ldr	r3, [pc, #200]	; (8008a6c <scaraTestDuty+0xec>)
 80089a2:	f603 1348 	addw	r3, r3, #2376	; 0x948
 80089a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80089aa:	a32d      	add	r3, pc, #180	; (adr r3, 8008a60 <scaraTestDuty+0xe0>)
 80089ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089b0:	f7f7 ff5c 	bl	800086c <__aeabi_ddiv>
 80089b4:	4603      	mov	r3, r0
 80089b6:	460c      	mov	r4, r1
 80089b8:	ec44 3b17 	vmov	d7, r3, r4
 80089bc:	eeb0 0a47 	vmov.f32	s0, s14
 80089c0:	eef0 0a67 	vmov.f32	s1, s15
 80089c4:	f00f fafc 	bl	8017fc0 <ceil>
 80089c8:	ec54 3b10 	vmov	r3, r4, d0
 80089cc:	4618      	mov	r0, r3
 80089ce:	4621      	mov	r1, r4
 80089d0:	f7f8 f8d2 	bl	8000b78 <__aeabi_d2iz>
 80089d4:	4603      	mov	r3, r0
 80089d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	for (int32_t i = 1; i < sample_count; i++) {
 80089da:	2301      	movs	r3, #1
 80089dc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80089e0:	e030      	b.n	8008a44 <scaraTestDuty+0xc4>
		run_time += T_SAMPLING;
 80089e2:	a31f      	add	r3, pc, #124	; (adr r3, 8008a60 <scaraTestDuty+0xe0>)
 80089e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80089ec:	f7f7 fc5e 	bl	80002ac <__adddf3>
 80089f0:	4603      	mov	r3, r0
 80089f2:	460c      	mov	r4, r1
 80089f4:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		status = scaraFlowDuty(run_time, &test_Next, test_Current);
 80089f8:	f107 0468 	add.w	r4, r7, #104	; 0x68
 80089fc:	4668      	mov	r0, sp
 80089fe:	f107 0308 	add.w	r3, r7, #8
 8008a02:	2260      	movs	r2, #96	; 0x60
 8008a04:	4619      	mov	r1, r3
 8008a06:	f00b f92b 	bl	8013c60 <memcpy>
 8008a0a:	463b      	mov	r3, r7
 8008a0c:	cb0c      	ldmia	r3, {r2, r3}
 8008a0e:	4620      	mov	r0, r4
 8008a10:	ed97 0b38 	vldr	d0, [r7, #224]	; 0xe0
 8008a14:	f7fe fa6e 	bl	8006ef4 <scaraFlowDuty>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
		if (status != SCARA_STATUS_OK) {
 8008a1e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d002      	beq.n	8008a2c <scaraTestDuty+0xac>
			return status;
 8008a26:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8008a2a:	e012      	b.n	8008a52 <scaraTestDuty+0xd2>
		}
		memcpy(&test_Next, &test_Current, sizeof(SCARA_PositionTypeDef));
 8008a2c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8008a30:	4639      	mov	r1, r7
 8008a32:	2268      	movs	r2, #104	; 0x68
 8008a34:	4618      	mov	r0, r3
 8008a36:	f00b f913 	bl	8013c60 <memcpy>
	for (int32_t i = 1; i < sample_count; i++) {
 8008a3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a3e:	3301      	adds	r3, #1
 8008a40:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008a44:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008a48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	dbc8      	blt.n	80089e2 <scaraTestDuty+0x62>
	}
	return SCARA_STATUS_OK;
 8008a50:	2300      	movs	r3, #0
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	37ec      	adds	r7, #236	; 0xec
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd90      	pop	{r4, r7, pc}
 8008a5a:	bf00      	nop
 8008a5c:	f3af 8000 	nop.w
 8008a60:	40000000 	.word	0x40000000
 8008a64:	3f847ae1 	.word	0x3f847ae1
 8008a68:	20005d58 	.word	0x20005d58
 8008a6c:	200053a0 	.word	0x200053a0

08008a70 <scaraSetScanFlag>:

void				scaraSetScanFlag(void) {
 8008a70:	b480      	push	{r7}
 8008a72:	af00      	add	r7, sp, #0
	mySCARA.isScanLitmit = TRUE;
 8008a74:	4b03      	ldr	r3, [pc, #12]	; (8008a84 <scaraSetScanFlag+0x14>)
 8008a76:	2201      	movs	r2, #1
 8008a78:	709a      	strb	r2, [r3, #2]
}
 8008a7a:	bf00      	nop
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a82:	4770      	bx	lr
 8008a84:	20000c78 	.word	0x20000c78

08008a88 <scaraSetOutput>:

void				scaraSetOutput		(uint8_t level) {
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b082      	sub	sp, #8
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	4603      	mov	r3, r0
 8008a90:	71fb      	strb	r3, [r7, #7]
	mySCARA.outputSet	 = level;
 8008a92:	4a05      	ldr	r2, [pc, #20]	; (8008aa8 <scaraSetOutput+0x20>)
 8008a94:	79fb      	ldrb	r3, [r7, #7]
 8008a96:	70d3      	strb	r3, [r2, #3]
	lowlayer_setOutput(level);
 8008a98:	79fb      	ldrb	r3, [r7, #7]
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f7fb fd24 	bl	80044e8 <lowlayer_setOutput>
}
 8008aa0:	bf00      	nop
 8008aa2:	3708      	adds	r7, #8
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}
 8008aa8:	20000c78 	.word	0x20000c78

08008aac <scaraSetDutyState>:

void				scaraSetDutyState(SCARA_DutyStateTypeDef state) {
 8008aac:	b480      	push	{r7}
 8008aae:	b083      	sub	sp, #12
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	71fb      	strb	r3, [r7, #7]
	mySCARA.duty_State = state;
 8008ab6:	4a04      	ldr	r2, [pc, #16]	; (8008ac8 <scaraSetDutyState+0x1c>)
 8008ab8:	79fb      	ldrb	r3, [r7, #7]
 8008aba:	7053      	strb	r3, [r2, #1]
}
 8008abc:	bf00      	nop
 8008abe:	370c      	adds	r7, #12
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac6:	4770      	bx	lr
 8008ac8:	20000c78 	.word	0x20000c78

08008acc <scaraGetPosition>:

void				scaraGetPosition	(SCARA_PositionTypeDef *pos) {
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b082      	sub	sp, #8
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
	memcpy(pos, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 8008ad4:	2268      	movs	r2, #104	; 0x68
 8008ad6:	4904      	ldr	r1, [pc, #16]	; (8008ae8 <scaraGetPosition+0x1c>)
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f00b f8c1 	bl	8013c60 <memcpy>
}
 8008ade:	bf00      	nop
 8008ae0:	3708      	adds	r7, #8
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}
 8008ae6:	bf00      	nop
 8008ae8:	20005d58 	.word	0x20005d58

08008aec <scaraSetMode>:

void				scaraSetMode(SCARA_ModeTypeDef mode) {
 8008aec:	b480      	push	{r7}
 8008aee:	b083      	sub	sp, #12
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	4603      	mov	r3, r0
 8008af4:	71fb      	strb	r3, [r7, #7]
	mySCARA.mode = mode;
 8008af6:	4a04      	ldr	r2, [pc, #16]	; (8008b08 <scaraSetMode+0x1c>)
 8008af8:	79fb      	ldrb	r3, [r7, #7]
 8008afa:	7013      	strb	r3, [r2, #0]
}
 8008afc:	bf00      	nop
 8008afe:	370c      	adds	r7, #12
 8008b00:	46bd      	mov	sp, r7
 8008b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b06:	4770      	bx	lr
 8008b08:	20000c78 	.word	0x20000c78

08008b0c <scaraGetMode>:

SCARA_ModeTypeDef	scaraGetMode(void) {
 8008b0c:	b480      	push	{r7}
 8008b0e:	af00      	add	r7, sp, #0
	return mySCARA.mode;
 8008b10:	4b03      	ldr	r3, [pc, #12]	; (8008b20 <scaraGetMode+0x14>)
 8008b12:	781b      	ldrb	r3, [r3, #0]
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	46bd      	mov	sp, r7
 8008b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1c:	4770      	bx	lr
 8008b1e:	bf00      	nop
 8008b20:	20000c78 	.word	0x20000c78

08008b24 <scaraGetDutyState>:

SCARA_DutyStateTypeDef	scaraGetDutyState(void) {
 8008b24:	b480      	push	{r7}
 8008b26:	af00      	add	r7, sp, #0
	return mySCARA.duty_State;
 8008b28:	4b03      	ldr	r3, [pc, #12]	; (8008b38 <scaraGetDutyState+0x14>)
 8008b2a:	785b      	ldrb	r3, [r3, #1]
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b34:	4770      	bx	lr
 8008b36:	bf00      	nop
 8008b38:	20000c78 	.word	0x20000c78

08008b3c <scaraIsScanLimit>:

uint8_t					scaraIsScanLimit(void) {
 8008b3c:	b480      	push	{r7}
 8008b3e:	af00      	add	r7, sp, #0
	return mySCARA.isScanLitmit;
 8008b40:	4b03      	ldr	r3, [pc, #12]	; (8008b50 <scaraIsScanLimit+0x14>)
 8008b42:	789b      	ldrb	r3, [r3, #2]
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	46bd      	mov	sp, r7
 8008b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4c:	4770      	bx	lr
 8008b4e:	bf00      	nop
 8008b50:	20000c78 	.word	0x20000c78
 8008b54:	00000000 	.word	0x00000000

08008b58 <scaraIsFinish>:

uint8_t					scaraIsFinish		(double run_time) {
 8008b58:	b590      	push	{r4, r7, lr}
 8008b5a:	b083      	sub	sp, #12
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	ed87 0b00 	vstr	d0, [r7]
	if(myDUTY.time_total + 0.03 < run_time) {
 8008b62:	4b11      	ldr	r3, [pc, #68]	; (8008ba8 <scaraIsFinish+0x50>)
 8008b64:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8008b68:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008b6c:	a30c      	add	r3, pc, #48	; (adr r3, 8008ba0 <scaraIsFinish+0x48>)
 8008b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b72:	f7f7 fb9b 	bl	80002ac <__adddf3>
 8008b76:	4603      	mov	r3, r0
 8008b78:	460c      	mov	r4, r1
 8008b7a:	461a      	mov	r2, r3
 8008b7c:	4623      	mov	r3, r4
 8008b7e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b82:	f7f7 ffd9 	bl	8000b38 <__aeabi_dcmpgt>
 8008b86:	4603      	mov	r3, r0
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d001      	beq.n	8008b90 <scaraIsFinish+0x38>
		return TRUE;
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	e000      	b.n	8008b92 <scaraIsFinish+0x3a>
	} else {
		return FALSE;
 8008b90:	2300      	movs	r3, #0
	}
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	370c      	adds	r7, #12
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd90      	pop	{r4, r7, pc}
 8008b9a:	bf00      	nop
 8008b9c:	f3af 8000 	nop.w
 8008ba0:	eb851eb8 	.word	0xeb851eb8
 8008ba4:	3f9eb851 	.word	0x3f9eb851
 8008ba8:	200053a0 	.word	0x200053a0
 8008bac:	00000000 	.word	0x00000000

08008bb0 <scaraPosition2String>:

/* Convert position to string*/
int32_t					scaraPosition2String(char *result, SCARA_PositionTypeDef position) {
 8008bb0:	b082      	sub	sp, #8
 8008bb2:	b590      	push	{r4, r7, lr}
 8008bb4:	b0af      	sub	sp, #188	; 0xbc
 8008bb6:	af0a      	add	r7, sp, #40	; 0x28
 8008bb8:	6078      	str	r0, [r7, #4]
 8008bba:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8008bbe:	e881 000c 	stmia.w	r1, {r2, r3}
	uint8_t time[12];
	uint8_t total_time[12];

	int32_t lenght_buff;

	double2string(theta1, position.Theta1*180/PI, 6);
 8008bc2:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8008bc6:	f04f 0200 	mov.w	r2, #0
 8008bca:	4b7f      	ldr	r3, [pc, #508]	; (8008dc8 <scaraPosition2String+0x218>)
 8008bcc:	f7f7 fd24 	bl	8000618 <__aeabi_dmul>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	460c      	mov	r4, r1
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	4621      	mov	r1, r4
 8008bd8:	a379      	add	r3, pc, #484	; (adr r3, 8008dc0 <scaraPosition2String+0x210>)
 8008bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bde:	f7f7 fe45 	bl	800086c <__aeabi_ddiv>
 8008be2:	4603      	mov	r3, r0
 8008be4:	460c      	mov	r4, r1
 8008be6:	ec44 3b17 	vmov	d7, r3, r4
 8008bea:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8008bee:	2106      	movs	r1, #6
 8008bf0:	eeb0 0a47 	vmov.f32	s0, s14
 8008bf4:	eef0 0a67 	vmov.f32	s1, s15
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	f7f8 fe39 	bl	8001870 <double2string>
	double2string(theta2, position.Theta2*180/PI, 6);
 8008bfe:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8008c02:	f04f 0200 	mov.w	r2, #0
 8008c06:	4b70      	ldr	r3, [pc, #448]	; (8008dc8 <scaraPosition2String+0x218>)
 8008c08:	f7f7 fd06 	bl	8000618 <__aeabi_dmul>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	460c      	mov	r4, r1
 8008c10:	4618      	mov	r0, r3
 8008c12:	4621      	mov	r1, r4
 8008c14:	a36a      	add	r3, pc, #424	; (adr r3, 8008dc0 <scaraPosition2String+0x210>)
 8008c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c1a:	f7f7 fe27 	bl	800086c <__aeabi_ddiv>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	460c      	mov	r4, r1
 8008c22:	ec44 3b17 	vmov	d7, r3, r4
 8008c26:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8008c2a:	2106      	movs	r1, #6
 8008c2c:	eeb0 0a47 	vmov.f32	s0, s14
 8008c30:	eef0 0a67 	vmov.f32	s1, s15
 8008c34:	4618      	mov	r0, r3
 8008c36:	f7f8 fe1b 	bl	8001870 <double2string>
	double2string(d3, position.D3, 6);
 8008c3a:	ed97 7b3e 	vldr	d7, [r7, #248]	; 0xf8
 8008c3e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8008c42:	2106      	movs	r1, #6
 8008c44:	eeb0 0a47 	vmov.f32	s0, s14
 8008c48:	eef0 0a67 	vmov.f32	s1, s15
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f7f8 fe0f 	bl	8001870 <double2string>
	double2string(theta4, position.Theta4*180/PI, 6);
 8008c52:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 8008c56:	f04f 0200 	mov.w	r2, #0
 8008c5a:	4b5b      	ldr	r3, [pc, #364]	; (8008dc8 <scaraPosition2String+0x218>)
 8008c5c:	f7f7 fcdc 	bl	8000618 <__aeabi_dmul>
 8008c60:	4603      	mov	r3, r0
 8008c62:	460c      	mov	r4, r1
 8008c64:	4618      	mov	r0, r3
 8008c66:	4621      	mov	r1, r4
 8008c68:	a355      	add	r3, pc, #340	; (adr r3, 8008dc0 <scaraPosition2String+0x210>)
 8008c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c6e:	f7f7 fdfd 	bl	800086c <__aeabi_ddiv>
 8008c72:	4603      	mov	r3, r0
 8008c74:	460c      	mov	r4, r1
 8008c76:	ec44 3b17 	vmov	d7, r3, r4
 8008c7a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8008c7e:	2106      	movs	r1, #6
 8008c80:	eeb0 0a47 	vmov.f32	s0, s14
 8008c84:	eef0 0a67 	vmov.f32	s1, s15
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f7f8 fdf1 	bl	8001870 <double2string>
	double2string(x, position.x, 6);
 8008c8e:	ed97 7b32 	vldr	d7, [r7, #200]	; 0xc8
 8008c92:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008c96:	2106      	movs	r1, #6
 8008c98:	eeb0 0a47 	vmov.f32	s0, s14
 8008c9c:	eef0 0a67 	vmov.f32	s1, s15
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f7f8 fde5 	bl	8001870 <double2string>
	double2string(y, position.y, 6);
 8008ca6:	ed97 7b34 	vldr	d7, [r7, #208]	; 0xd0
 8008caa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008cae:	2106      	movs	r1, #6
 8008cb0:	eeb0 0a47 	vmov.f32	s0, s14
 8008cb4:	eef0 0a67 	vmov.f32	s1, s15
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f7f8 fdd9 	bl	8001870 <double2string>
	double2string(z, position.z, 6);
 8008cbe:	ed97 7b36 	vldr	d7, [r7, #216]	; 0xd8
 8008cc2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008cc6:	2106      	movs	r1, #6
 8008cc8:	eeb0 0a47 	vmov.f32	s0, s14
 8008ccc:	eef0 0a67 	vmov.f32	s1, s15
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	f7f8 fdcd 	bl	8001870 <double2string>
	double2string(roll, position.roll*180/PI, 6);
 8008cd6:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008cda:	f04f 0200 	mov.w	r2, #0
 8008cde:	4b3a      	ldr	r3, [pc, #232]	; (8008dc8 <scaraPosition2String+0x218>)
 8008ce0:	f7f7 fc9a 	bl	8000618 <__aeabi_dmul>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	460c      	mov	r4, r1
 8008ce8:	4618      	mov	r0, r3
 8008cea:	4621      	mov	r1, r4
 8008cec:	a334      	add	r3, pc, #208	; (adr r3, 8008dc0 <scaraPosition2String+0x210>)
 8008cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf2:	f7f7 fdbb 	bl	800086c <__aeabi_ddiv>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	460c      	mov	r4, r1
 8008cfa:	ec44 3b17 	vmov	d7, r3, r4
 8008cfe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008d02:	2106      	movs	r1, #6
 8008d04:	eeb0 0a47 	vmov.f32	s0, s14
 8008d08:	eef0 0a67 	vmov.f32	s1, s15
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f7f8 fdaf 	bl	8001870 <double2string>
	double2string(lenght, position.q, 6);
 8008d12:	ed97 7b28 	vldr	d7, [r7, #160]	; 0xa0
 8008d16:	f107 0320 	add.w	r3, r7, #32
 8008d1a:	2106      	movs	r1, #6
 8008d1c:	eeb0 0a47 	vmov.f32	s0, s14
 8008d20:	eef0 0a67 	vmov.f32	s1, s15
 8008d24:	4618      	mov	r0, r3
 8008d26:	f7f8 fda3 	bl	8001870 <double2string>
	double2string(total_time, position.total_time, 4);
 8008d2a:	ed97 7b30 	vldr	d7, [r7, #192]	; 0xc0
 8008d2e:	f107 0308 	add.w	r3, r7, #8
 8008d32:	2104      	movs	r1, #4
 8008d34:	eeb0 0a47 	vmov.f32	s0, s14
 8008d38:	eef0 0a67 	vmov.f32	s1, s15
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	f7f8 fd97 	bl	8001870 <double2string>
	double2string(time, position.t, 4);
 8008d42:	ed97 7b2e 	vldr	d7, [r7, #184]	; 0xb8
 8008d46:	f107 0314 	add.w	r3, r7, #20
 8008d4a:	2104      	movs	r1, #4
 8008d4c:	eeb0 0a47 	vmov.f32	s0, s14
 8008d50:	eef0 0a67 	vmov.f32	s1, s15
 8008d54:	4618      	mov	r0, r3
 8008d56:	f7f8 fd8b 	bl	8001870 <double2string>
	lenght_buff = snprintf( (char *)result, 144,
 8008d5a:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8008d5e:	f107 0314 	add.w	r3, r7, #20
 8008d62:	9309      	str	r3, [sp, #36]	; 0x24
 8008d64:	f107 0308 	add.w	r3, r7, #8
 8008d68:	9308      	str	r3, [sp, #32]
 8008d6a:	f107 0320 	add.w	r3, r7, #32
 8008d6e:	9307      	str	r3, [sp, #28]
 8008d70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008d74:	9306      	str	r3, [sp, #24]
 8008d76:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008d7a:	9305      	str	r3, [sp, #20]
 8008d7c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008d80:	9304      	str	r3, [sp, #16]
 8008d82:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008d86:	9303      	str	r3, [sp, #12]
 8008d88:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8008d8c:	9302      	str	r3, [sp, #8]
 8008d8e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8008d92:	9301      	str	r3, [sp, #4]
 8008d94:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8008d98:	9300      	str	r3, [sp, #0]
 8008d9a:	4613      	mov	r3, r2
 8008d9c:	4a0b      	ldr	r2, [pc, #44]	; (8008dcc <scaraPosition2String+0x21c>)
 8008d9e:	2190      	movs	r1, #144	; 0x90
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f00b fe85 	bl	8014ab0 <sniprintf>
 8008da6:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
						z,
						roll,
						lenght,
						total_time,
						time);
	return lenght_buff;
 8008daa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	3794      	adds	r7, #148	; 0x94
 8008db2:	46bd      	mov	sp, r7
 8008db4:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8008db8:	b002      	add	sp, #8
 8008dba:	4770      	bx	lr
 8008dbc:	f3af 8000 	nop.w
 8008dc0:	60000000 	.word	0x60000000
 8008dc4:	400921fb 	.word	0x400921fb
 8008dc8:	40668000 	.word	0x40668000
 8008dcc:	08019d98 	.word	0x08019d98

08008dd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b082      	sub	sp, #8
 8008dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	607b      	str	r3, [r7, #4]
 8008dda:	4b12      	ldr	r3, [pc, #72]	; (8008e24 <HAL_MspInit+0x54>)
 8008ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dde:	4a11      	ldr	r2, [pc, #68]	; (8008e24 <HAL_MspInit+0x54>)
 8008de0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008de4:	6453      	str	r3, [r2, #68]	; 0x44
 8008de6:	4b0f      	ldr	r3, [pc, #60]	; (8008e24 <HAL_MspInit+0x54>)
 8008de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008dee:	607b      	str	r3, [r7, #4]
 8008df0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008df2:	2300      	movs	r3, #0
 8008df4:	603b      	str	r3, [r7, #0]
 8008df6:	4b0b      	ldr	r3, [pc, #44]	; (8008e24 <HAL_MspInit+0x54>)
 8008df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dfa:	4a0a      	ldr	r2, [pc, #40]	; (8008e24 <HAL_MspInit+0x54>)
 8008dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e00:	6413      	str	r3, [r2, #64]	; 0x40
 8008e02:	4b08      	ldr	r3, [pc, #32]	; (8008e24 <HAL_MspInit+0x54>)
 8008e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e0a:	603b      	str	r3, [r7, #0]
 8008e0c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8008e0e:	2200      	movs	r2, #0
 8008e10:	210f      	movs	r1, #15
 8008e12:	f06f 0001 	mvn.w	r0, #1
 8008e16:	f000 fb85 	bl	8009524 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008e1a:	bf00      	nop
 8008e1c:	3708      	adds	r7, #8
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}
 8008e22:	bf00      	nop
 8008e24:	40023800 	.word	0x40023800

08008e28 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b08c      	sub	sp, #48	; 0x30
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8008e30:	2300      	movs	r3, #0
 8008e32:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8008e34:	2300      	movs	r3, #0
 8008e36:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8008e38:	2200      	movs	r2, #0
 8008e3a:	6879      	ldr	r1, [r7, #4]
 8008e3c:	2036      	movs	r0, #54	; 0x36
 8008e3e:	f000 fb71 	bl	8009524 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8008e42:	2036      	movs	r0, #54	; 0x36
 8008e44:	f000 fb8a 	bl	800955c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8008e48:	2300      	movs	r3, #0
 8008e4a:	60fb      	str	r3, [r7, #12]
 8008e4c:	4b1f      	ldr	r3, [pc, #124]	; (8008ecc <HAL_InitTick+0xa4>)
 8008e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e50:	4a1e      	ldr	r2, [pc, #120]	; (8008ecc <HAL_InitTick+0xa4>)
 8008e52:	f043 0310 	orr.w	r3, r3, #16
 8008e56:	6413      	str	r3, [r2, #64]	; 0x40
 8008e58:	4b1c      	ldr	r3, [pc, #112]	; (8008ecc <HAL_InitTick+0xa4>)
 8008e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e5c:	f003 0310 	and.w	r3, r3, #16
 8008e60:	60fb      	str	r3, [r7, #12]
 8008e62:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8008e64:	f107 0210 	add.w	r2, r7, #16
 8008e68:	f107 0314 	add.w	r3, r7, #20
 8008e6c:	4611      	mov	r1, r2
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f002 ff16 	bl	800bca0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8008e74:	f002 feec 	bl	800bc50 <HAL_RCC_GetPCLK1Freq>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	005b      	lsls	r3, r3, #1
 8008e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8008e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e80:	4a13      	ldr	r2, [pc, #76]	; (8008ed0 <HAL_InitTick+0xa8>)
 8008e82:	fba2 2303 	umull	r2, r3, r2, r3
 8008e86:	0c9b      	lsrs	r3, r3, #18
 8008e88:	3b01      	subs	r3, #1
 8008e8a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8008e8c:	4b11      	ldr	r3, [pc, #68]	; (8008ed4 <HAL_InitTick+0xac>)
 8008e8e:	4a12      	ldr	r2, [pc, #72]	; (8008ed8 <HAL_InitTick+0xb0>)
 8008e90:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8008e92:	4b10      	ldr	r3, [pc, #64]	; (8008ed4 <HAL_InitTick+0xac>)
 8008e94:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008e98:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8008e9a:	4a0e      	ldr	r2, [pc, #56]	; (8008ed4 <HAL_InitTick+0xac>)
 8008e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e9e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8008ea0:	4b0c      	ldr	r3, [pc, #48]	; (8008ed4 <HAL_InitTick+0xac>)
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008ea6:	4b0b      	ldr	r3, [pc, #44]	; (8008ed4 <HAL_InitTick+0xac>)
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8008eac:	4809      	ldr	r0, [pc, #36]	; (8008ed4 <HAL_InitTick+0xac>)
 8008eae:	f002 ff29 	bl	800bd04 <HAL_TIM_Base_Init>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d104      	bne.n	8008ec2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8008eb8:	4806      	ldr	r0, [pc, #24]	; (8008ed4 <HAL_InitTick+0xac>)
 8008eba:	f002 ff4e 	bl	800bd5a <HAL_TIM_Base_Start_IT>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	e000      	b.n	8008ec4 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8008ec2:	2301      	movs	r3, #1
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	3730      	adds	r7, #48	; 0x30
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}
 8008ecc:	40023800 	.word	0x40023800
 8008ed0:	431bde83 	.word	0x431bde83
 8008ed4:	20005e90 	.word	0x20005e90
 8008ed8:	40001000 	.word	0x40001000

08008edc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008edc:	b480      	push	{r7}
 8008ede:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008ee0:	bf00      	nop
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee8:	4770      	bx	lr
	...

08008eec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  LOG_REPORT("ic.c: HARDFAULT ERROR", __LINE__);
 8008ef0:	2164      	movs	r1, #100	; 0x64
 8008ef2:	4802      	ldr	r0, [pc, #8]	; (8008efc <HardFault_Handler+0x10>)
 8008ef4:	f7f8 fc74 	bl	80017e0 <LOG_REPORT>
 8008ef8:	e7fa      	b.n	8008ef0 <HardFault_Handler+0x4>
 8008efa:	bf00      	nop
 8008efc:	08019dbc 	.word	0x08019dbc

08008f00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  LOG_REPORT("ic.c: MEMORY ERROR", __LINE__);
 8008f04:	2174      	movs	r1, #116	; 0x74
 8008f06:	4802      	ldr	r0, [pc, #8]	; (8008f10 <MemManage_Handler+0x10>)
 8008f08:	f7f8 fc6a 	bl	80017e0 <LOG_REPORT>
 8008f0c:	e7fa      	b.n	8008f04 <MemManage_Handler+0x4>
 8008f0e:	bf00      	nop
 8008f10:	08019dd4 	.word	0x08019dd4

08008f14 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  LOG_REPORT("ic.c: BUS ERROR", __LINE__);
 8008f18:	2184      	movs	r1, #132	; 0x84
 8008f1a:	4802      	ldr	r0, [pc, #8]	; (8008f24 <BusFault_Handler+0x10>)
 8008f1c:	f7f8 fc60 	bl	80017e0 <LOG_REPORT>
 8008f20:	e7fa      	b.n	8008f18 <BusFault_Handler+0x4>
 8008f22:	bf00      	nop
 8008f24:	08019de8 	.word	0x08019de8

08008f28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008f2c:	e7fe      	b.n	8008f2c <UsageFault_Handler+0x4>

08008f2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008f2e:	b480      	push	{r7}
 8008f30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008f32:	bf00      	nop
 8008f34:	46bd      	mov	sp, r7
 8008f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3a:	4770      	bx	lr

08008f3c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8008f40:	4802      	ldr	r0, [pc, #8]	; (8008f4c <DMA1_Stream4_IRQHandler+0x10>)
 8008f42:	f000 fc41 	bl	80097c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8008f46:	bf00      	nop
 8008f48:	bd80      	pop	{r7, pc}
 8008f4a:	bf00      	nop
 8008f4c:	20005f50 	.word	0x20005f50

08008f50 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8008f54:	4802      	ldr	r0, [pc, #8]	; (8008f60 <UART4_IRQHandler+0x10>)
 8008f56:	f003 fa3f 	bl	800c3d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8008f5a:	bf00      	nop
 8008f5c:	bd80      	pop	{r7, pc}
 8008f5e:	bf00      	nop
 8008f60:	20005f10 	.word	0x20005f10

08008f64 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8008f68:	4802      	ldr	r0, [pc, #8]	; (8008f74 <TIM6_DAC_IRQHandler+0x10>)
 8008f6a:	f002 ff1a 	bl	800bda2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8008f6e:	bf00      	nop
 8008f70:	bd80      	pop	{r7, pc}
 8008f72:	bf00      	nop
 8008f74:	20005e90 	.word	0x20005e90

08008f78 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	osSignalSet(defaultTaskHandle, 0x01);
 8008f7c:	4b05      	ldr	r3, [pc, #20]	; (8008f94 <TIM7_IRQHandler+0x1c>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	2101      	movs	r1, #1
 8008f82:	4618      	mov	r0, r3
 8008f84:	f006 ffe8 	bl	800ff58 <osSignalSet>
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8008f88:	4803      	ldr	r0, [pc, #12]	; (8008f98 <TIM7_IRQHandler+0x20>)
 8008f8a:	f002 ff0a 	bl	800bda2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
  /* USER CODE END TIM7_IRQn 1 */
}
 8008f8e:	bf00      	nop
 8008f90:	bd80      	pop	{r7, pc}
 8008f92:	bf00      	nop
 8008f94:	200052dc 	.word	0x200052dc
 8008f98:	20005ed0 	.word	0x20005ed0

08008f9c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8008fa0:	4802      	ldr	r0, [pc, #8]	; (8008fac <OTG_FS_IRQHandler+0x10>)
 8008fa2:	f001 f9e1 	bl	800a368 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8008fa6:	bf00      	nop
 8008fa8:	bd80      	pop	{r7, pc}
 8008faa:	bf00      	nop
 8008fac:	20006858 	.word	0x20006858

08008fb0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b084      	sub	sp, #16
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8008fb8:	4b11      	ldr	r3, [pc, #68]	; (8009000 <_sbrk+0x50>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d102      	bne.n	8008fc6 <_sbrk+0x16>
		heap_end = &end;
 8008fc0:	4b0f      	ldr	r3, [pc, #60]	; (8009000 <_sbrk+0x50>)
 8008fc2:	4a10      	ldr	r2, [pc, #64]	; (8009004 <_sbrk+0x54>)
 8008fc4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8008fc6:	4b0e      	ldr	r3, [pc, #56]	; (8009000 <_sbrk+0x50>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8008fcc:	4b0c      	ldr	r3, [pc, #48]	; (8009000 <_sbrk+0x50>)
 8008fce:	681a      	ldr	r2, [r3, #0]
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	4413      	add	r3, r2
 8008fd4:	466a      	mov	r2, sp
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	d907      	bls.n	8008fea <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8008fda:	f00a fe07 	bl	8013bec <__errno>
 8008fde:	4602      	mov	r2, r0
 8008fe0:	230c      	movs	r3, #12
 8008fe2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8008fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8008fe8:	e006      	b.n	8008ff8 <_sbrk+0x48>
	}

	heap_end += incr;
 8008fea:	4b05      	ldr	r3, [pc, #20]	; (8009000 <_sbrk+0x50>)
 8008fec:	681a      	ldr	r2, [r3, #0]
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	4413      	add	r3, r2
 8008ff2:	4a03      	ldr	r2, [pc, #12]	; (8009000 <_sbrk+0x50>)
 8008ff4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3710      	adds	r7, #16
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}
 8009000:	2000147c 	.word	0x2000147c
 8009004:	20006c68 	.word	0x20006c68

08009008 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009008:	b480      	push	{r7}
 800900a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800900c:	4b08      	ldr	r3, [pc, #32]	; (8009030 <SystemInit+0x28>)
 800900e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009012:	4a07      	ldr	r2, [pc, #28]	; (8009030 <SystemInit+0x28>)
 8009014:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009018:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800901c:	4b04      	ldr	r3, [pc, #16]	; (8009030 <SystemInit+0x28>)
 800901e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009022:	609a      	str	r2, [r3, #8]
#endif
}
 8009024:	bf00      	nop
 8009026:	46bd      	mov	sp, r7
 8009028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902c:	4770      	bx	lr
 800902e:	bf00      	nop
 8009030:	e000ed00 	.word	0xe000ed00

08009034 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b082      	sub	sp, #8
 8009038:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800903a:	463b      	mov	r3, r7
 800903c:	2200      	movs	r2, #0
 800903e:	601a      	str	r2, [r3, #0]
 8009040:	605a      	str	r2, [r3, #4]

  htim7.Instance = TIM7;
 8009042:	4b15      	ldr	r3, [pc, #84]	; (8009098 <MX_TIM7_Init+0x64>)
 8009044:	4a15      	ldr	r2, [pc, #84]	; (800909c <MX_TIM7_Init+0x68>)
 8009046:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 8009048:	4b13      	ldr	r3, [pc, #76]	; (8009098 <MX_TIM7_Init+0x64>)
 800904a:	2253      	movs	r2, #83	; 0x53
 800904c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800904e:	4b12      	ldr	r3, [pc, #72]	; (8009098 <MX_TIM7_Init+0x64>)
 8009050:	2200      	movs	r2, #0
 8009052:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 8009054:	4b10      	ldr	r3, [pc, #64]	; (8009098 <MX_TIM7_Init+0x64>)
 8009056:	f242 720f 	movw	r2, #9999	; 0x270f
 800905a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800905c:	4b0e      	ldr	r3, [pc, #56]	; (8009098 <MX_TIM7_Init+0x64>)
 800905e:	2200      	movs	r2, #0
 8009060:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8009062:	480d      	ldr	r0, [pc, #52]	; (8009098 <MX_TIM7_Init+0x64>)
 8009064:	f002 fe4e 	bl	800bd04 <HAL_TIM_Base_Init>
 8009068:	4603      	mov	r3, r0
 800906a:	2b00      	cmp	r3, #0
 800906c:	d001      	beq.n	8009072 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800906e:	f7fa fa7b 	bl	8003568 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009072:	2300      	movs	r3, #0
 8009074:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009076:	2300      	movs	r3, #0
 8009078:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800907a:	463b      	mov	r3, r7
 800907c:	4619      	mov	r1, r3
 800907e:	4806      	ldr	r0, [pc, #24]	; (8009098 <MX_TIM7_Init+0x64>)
 8009080:	f003 f860 	bl	800c144 <HAL_TIMEx_MasterConfigSynchronization>
 8009084:	4603      	mov	r3, r0
 8009086:	2b00      	cmp	r3, #0
 8009088:	d001      	beq.n	800908e <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800908a:	f7fa fa6d 	bl	8003568 <Error_Handler>
  }

}
 800908e:	bf00      	nop
 8009090:	3708      	adds	r7, #8
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}
 8009096:	bf00      	nop
 8009098:	20005ed0 	.word	0x20005ed0
 800909c:	40001400 	.word	0x40001400

080090a0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b084      	sub	sp, #16
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	4a0e      	ldr	r2, [pc, #56]	; (80090e8 <HAL_TIM_Base_MspInit+0x48>)
 80090ae:	4293      	cmp	r3, r2
 80090b0:	d115      	bne.n	80090de <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80090b2:	2300      	movs	r3, #0
 80090b4:	60fb      	str	r3, [r7, #12]
 80090b6:	4b0d      	ldr	r3, [pc, #52]	; (80090ec <HAL_TIM_Base_MspInit+0x4c>)
 80090b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090ba:	4a0c      	ldr	r2, [pc, #48]	; (80090ec <HAL_TIM_Base_MspInit+0x4c>)
 80090bc:	f043 0320 	orr.w	r3, r3, #32
 80090c0:	6413      	str	r3, [r2, #64]	; 0x40
 80090c2:	4b0a      	ldr	r3, [pc, #40]	; (80090ec <HAL_TIM_Base_MspInit+0x4c>)
 80090c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090c6:	f003 0320 	and.w	r3, r3, #32
 80090ca:	60fb      	str	r3, [r7, #12]
 80090cc:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 80090ce:	2200      	movs	r2, #0
 80090d0:	2105      	movs	r1, #5
 80090d2:	2037      	movs	r0, #55	; 0x37
 80090d4:	f000 fa26 	bl	8009524 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80090d8:	2037      	movs	r0, #55	; 0x37
 80090da:	f000 fa3f 	bl	800955c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80090de:	bf00      	nop
 80090e0:	3710      	adds	r7, #16
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}
 80090e6:	bf00      	nop
 80090e8:	40001400 	.word	0x40001400
 80090ec:	40023800 	.word	0x40023800

080090f0 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
DMA_HandleTypeDef hdma_uart4_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 80090f4:	4b11      	ldr	r3, [pc, #68]	; (800913c <MX_UART4_Init+0x4c>)
 80090f6:	4a12      	ldr	r2, [pc, #72]	; (8009140 <MX_UART4_Init+0x50>)
 80090f8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80090fa:	4b10      	ldr	r3, [pc, #64]	; (800913c <MX_UART4_Init+0x4c>)
 80090fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009100:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8009102:	4b0e      	ldr	r3, [pc, #56]	; (800913c <MX_UART4_Init+0x4c>)
 8009104:	2200      	movs	r2, #0
 8009106:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8009108:	4b0c      	ldr	r3, [pc, #48]	; (800913c <MX_UART4_Init+0x4c>)
 800910a:	2200      	movs	r2, #0
 800910c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800910e:	4b0b      	ldr	r3, [pc, #44]	; (800913c <MX_UART4_Init+0x4c>)
 8009110:	2200      	movs	r2, #0
 8009112:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8009114:	4b09      	ldr	r3, [pc, #36]	; (800913c <MX_UART4_Init+0x4c>)
 8009116:	220c      	movs	r2, #12
 8009118:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800911a:	4b08      	ldr	r3, [pc, #32]	; (800913c <MX_UART4_Init+0x4c>)
 800911c:	2200      	movs	r2, #0
 800911e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8009120:	4b06      	ldr	r3, [pc, #24]	; (800913c <MX_UART4_Init+0x4c>)
 8009122:	2200      	movs	r2, #0
 8009124:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8009126:	4805      	ldr	r0, [pc, #20]	; (800913c <MX_UART4_Init+0x4c>)
 8009128:	f003 f89c 	bl	800c264 <HAL_UART_Init>
 800912c:	4603      	mov	r3, r0
 800912e:	2b00      	cmp	r3, #0
 8009130:	d001      	beq.n	8009136 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8009132:	f7fa fa19 	bl	8003568 <Error_Handler>
  }

}
 8009136:	bf00      	nop
 8009138:	bd80      	pop	{r7, pc}
 800913a:	bf00      	nop
 800913c:	20005f10 	.word	0x20005f10
 8009140:	40004c00 	.word	0x40004c00

08009144 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b08a      	sub	sp, #40	; 0x28
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800914c:	f107 0314 	add.w	r3, r7, #20
 8009150:	2200      	movs	r2, #0
 8009152:	601a      	str	r2, [r3, #0]
 8009154:	605a      	str	r2, [r3, #4]
 8009156:	609a      	str	r2, [r3, #8]
 8009158:	60da      	str	r2, [r3, #12]
 800915a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4a34      	ldr	r2, [pc, #208]	; (8009234 <HAL_UART_MspInit+0xf0>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d161      	bne.n	800922a <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8009166:	2300      	movs	r3, #0
 8009168:	613b      	str	r3, [r7, #16]
 800916a:	4b33      	ldr	r3, [pc, #204]	; (8009238 <HAL_UART_MspInit+0xf4>)
 800916c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800916e:	4a32      	ldr	r2, [pc, #200]	; (8009238 <HAL_UART_MspInit+0xf4>)
 8009170:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009174:	6413      	str	r3, [r2, #64]	; 0x40
 8009176:	4b30      	ldr	r3, [pc, #192]	; (8009238 <HAL_UART_MspInit+0xf4>)
 8009178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800917a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800917e:	613b      	str	r3, [r7, #16]
 8009180:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009182:	2300      	movs	r3, #0
 8009184:	60fb      	str	r3, [r7, #12]
 8009186:	4b2c      	ldr	r3, [pc, #176]	; (8009238 <HAL_UART_MspInit+0xf4>)
 8009188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800918a:	4a2b      	ldr	r2, [pc, #172]	; (8009238 <HAL_UART_MspInit+0xf4>)
 800918c:	f043 0301 	orr.w	r3, r3, #1
 8009190:	6313      	str	r3, [r2, #48]	; 0x30
 8009192:	4b29      	ldr	r3, [pc, #164]	; (8009238 <HAL_UART_MspInit+0xf4>)
 8009194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009196:	f003 0301 	and.w	r3, r3, #1
 800919a:	60fb      	str	r3, [r7, #12]
 800919c:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration    
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800919e:	2303      	movs	r3, #3
 80091a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80091a2:	2302      	movs	r3, #2
 80091a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80091a6:	2301      	movs	r3, #1
 80091a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80091aa:	2303      	movs	r3, #3
 80091ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80091ae:	2308      	movs	r3, #8
 80091b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80091b2:	f107 0314 	add.w	r3, r7, #20
 80091b6:	4619      	mov	r1, r3
 80091b8:	4820      	ldr	r0, [pc, #128]	; (800923c <HAL_UART_MspInit+0xf8>)
 80091ba:	f000 fd7b 	bl	8009cb4 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 80091be:	4b20      	ldr	r3, [pc, #128]	; (8009240 <HAL_UART_MspInit+0xfc>)
 80091c0:	4a20      	ldr	r2, [pc, #128]	; (8009244 <HAL_UART_MspInit+0x100>)
 80091c2:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 80091c4:	4b1e      	ldr	r3, [pc, #120]	; (8009240 <HAL_UART_MspInit+0xfc>)
 80091c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80091ca:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80091cc:	4b1c      	ldr	r3, [pc, #112]	; (8009240 <HAL_UART_MspInit+0xfc>)
 80091ce:	2240      	movs	r2, #64	; 0x40
 80091d0:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80091d2:	4b1b      	ldr	r3, [pc, #108]	; (8009240 <HAL_UART_MspInit+0xfc>)
 80091d4:	2200      	movs	r2, #0
 80091d6:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80091d8:	4b19      	ldr	r3, [pc, #100]	; (8009240 <HAL_UART_MspInit+0xfc>)
 80091da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80091de:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80091e0:	4b17      	ldr	r3, [pc, #92]	; (8009240 <HAL_UART_MspInit+0xfc>)
 80091e2:	2200      	movs	r2, #0
 80091e4:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80091e6:	4b16      	ldr	r3, [pc, #88]	; (8009240 <HAL_UART_MspInit+0xfc>)
 80091e8:	2200      	movs	r2, #0
 80091ea:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 80091ec:	4b14      	ldr	r3, [pc, #80]	; (8009240 <HAL_UART_MspInit+0xfc>)
 80091ee:	2200      	movs	r2, #0
 80091f0:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80091f2:	4b13      	ldr	r3, [pc, #76]	; (8009240 <HAL_UART_MspInit+0xfc>)
 80091f4:	2200      	movs	r2, #0
 80091f6:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80091f8:	4b11      	ldr	r3, [pc, #68]	; (8009240 <HAL_UART_MspInit+0xfc>)
 80091fa:	2200      	movs	r2, #0
 80091fc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80091fe:	4810      	ldr	r0, [pc, #64]	; (8009240 <HAL_UART_MspInit+0xfc>)
 8009200:	f000 f9ba 	bl	8009578 <HAL_DMA_Init>
 8009204:	4603      	mov	r3, r0
 8009206:	2b00      	cmp	r3, #0
 8009208:	d001      	beq.n	800920e <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800920a:	f7fa f9ad 	bl	8003568 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	4a0b      	ldr	r2, [pc, #44]	; (8009240 <HAL_UART_MspInit+0xfc>)
 8009212:	631a      	str	r2, [r3, #48]	; 0x30
 8009214:	4a0a      	ldr	r2, [pc, #40]	; (8009240 <HAL_UART_MspInit+0xfc>)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800921a:	2200      	movs	r2, #0
 800921c:	2105      	movs	r1, #5
 800921e:	2034      	movs	r0, #52	; 0x34
 8009220:	f000 f980 	bl	8009524 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8009224:	2034      	movs	r0, #52	; 0x34
 8009226:	f000 f999 	bl	800955c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 800922a:	bf00      	nop
 800922c:	3728      	adds	r7, #40	; 0x28
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}
 8009232:	bf00      	nop
 8009234:	40004c00 	.word	0x40004c00
 8009238:	40023800 	.word	0x40023800
 800923c:	40020000 	.word	0x40020000
 8009240:	20005f50 	.word	0x20005f50
 8009244:	40026070 	.word	0x40026070

08009248 <HAL_UART_TxCpltCallback>:
  /* USER CODE END UART4_MspDeInit 1 */
  }
} 

/* USER CODE BEGIN 1 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8009248:	b580      	push	{r7, lr}
 800924a:	b084      	sub	sp, #16
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
	if (UART4 == huart->Instance) {
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	4a0c      	ldr	r2, [pc, #48]	; (8009288 <HAL_UART_TxCpltCallback+0x40>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d112      	bne.n	8009280 <HAL_UART_TxCpltCallback+0x38>
		uint16_t size_dma;
		size_dma = ringBuff_PopArray(&uart_tx_ringbuff, log_uart_dma_buff, LOG_BUFFER_SIZE);
 800925a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800925e:	490b      	ldr	r1, [pc, #44]	; (800928c <HAL_UART_TxCpltCallback+0x44>)
 8009260:	480b      	ldr	r0, [pc, #44]	; (8009290 <HAL_UART_TxCpltCallback+0x48>)
 8009262:	f7fa fa20 	bl	80036a6 <ringBuff_PopArray>
 8009266:	4603      	mov	r3, r0
 8009268:	81fb      	strh	r3, [r7, #14]
		if (0 == size_dma) {
 800926a:	89fb      	ldrh	r3, [r7, #14]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d006      	beq.n	800927e <HAL_UART_TxCpltCallback+0x36>
			return;
		}
		HAL_UART_Transmit_DMA(&huart4, log_uart_dma_buff, size_dma);
 8009270:	89fb      	ldrh	r3, [r7, #14]
 8009272:	461a      	mov	r2, r3
 8009274:	4905      	ldr	r1, [pc, #20]	; (800928c <HAL_UART_TxCpltCallback+0x44>)
 8009276:	4807      	ldr	r0, [pc, #28]	; (8009294 <HAL_UART_TxCpltCallback+0x4c>)
 8009278:	f003 f842 	bl	800c300 <HAL_UART_Transmit_DMA>
 800927c:	e000      	b.n	8009280 <HAL_UART_TxCpltCallback+0x38>
			return;
 800927e:	bf00      	nop
	}
}
 8009280:	3710      	adds	r7, #16
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}
 8009286:	bf00      	nop
 8009288:	40004c00 	.word	0x40004c00
 800928c:	200051dc 	.word	0x200051dc
 8009290:	2000086c 	.word	0x2000086c
 8009294:	20005f10 	.word	0x20005f10

08009298 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8009298:	f8df d034 	ldr.w	sp, [pc, #52]	; 80092d0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800929c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800929e:	e003      	b.n	80092a8 <LoopCopyDataInit>

080092a0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80092a0:	4b0c      	ldr	r3, [pc, #48]	; (80092d4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80092a2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80092a4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80092a6:	3104      	adds	r1, #4

080092a8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80092a8:	480b      	ldr	r0, [pc, #44]	; (80092d8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80092aa:	4b0c      	ldr	r3, [pc, #48]	; (80092dc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80092ac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80092ae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80092b0:	d3f6      	bcc.n	80092a0 <CopyDataInit>
  ldr  r2, =_sbss
 80092b2:	4a0b      	ldr	r2, [pc, #44]	; (80092e0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80092b4:	e002      	b.n	80092bc <LoopFillZerobss>

080092b6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80092b6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80092b8:	f842 3b04 	str.w	r3, [r2], #4

080092bc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80092bc:	4b09      	ldr	r3, [pc, #36]	; (80092e4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80092be:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80092c0:	d3f9      	bcc.n	80092b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80092c2:	f7ff fea1 	bl	8009008 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80092c6:	f00a fc97 	bl	8013bf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80092ca:	f7fa f8bb 	bl	8003444 <main>
  bx  lr    
 80092ce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80092d0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80092d4:	0801a3d8 	.word	0x0801a3d8
  ldr  r0, =_sdata
 80092d8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80092dc:	20001008 	.word	0x20001008
  ldr  r2, =_sbss
 80092e0:	20001008 	.word	0x20001008
  ldr  r3, = _ebss
 80092e4:	20006c64 	.word	0x20006c64

080092e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80092e8:	e7fe      	b.n	80092e8 <ADC_IRQHandler>
	...

080092ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80092f0:	4b0e      	ldr	r3, [pc, #56]	; (800932c <HAL_Init+0x40>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	4a0d      	ldr	r2, [pc, #52]	; (800932c <HAL_Init+0x40>)
 80092f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80092fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80092fc:	4b0b      	ldr	r3, [pc, #44]	; (800932c <HAL_Init+0x40>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	4a0a      	ldr	r2, [pc, #40]	; (800932c <HAL_Init+0x40>)
 8009302:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009306:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009308:	4b08      	ldr	r3, [pc, #32]	; (800932c <HAL_Init+0x40>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	4a07      	ldr	r2, [pc, #28]	; (800932c <HAL_Init+0x40>)
 800930e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009312:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009314:	2003      	movs	r0, #3
 8009316:	f000 f8fa 	bl	800950e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800931a:	2000      	movs	r0, #0
 800931c:	f7ff fd84 	bl	8008e28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009320:	f7ff fd56 	bl	8008dd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009324:	2300      	movs	r3, #0
}
 8009326:	4618      	mov	r0, r3
 8009328:	bd80      	pop	{r7, pc}
 800932a:	bf00      	nop
 800932c:	40023c00 	.word	0x40023c00

08009330 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009330:	b480      	push	{r7}
 8009332:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009334:	4b06      	ldr	r3, [pc, #24]	; (8009350 <HAL_IncTick+0x20>)
 8009336:	781b      	ldrb	r3, [r3, #0]
 8009338:	461a      	mov	r2, r3
 800933a:	4b06      	ldr	r3, [pc, #24]	; (8009354 <HAL_IncTick+0x24>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	4413      	add	r3, r2
 8009340:	4a04      	ldr	r2, [pc, #16]	; (8009354 <HAL_IncTick+0x24>)
 8009342:	6013      	str	r3, [r2, #0]
}
 8009344:	bf00      	nop
 8009346:	46bd      	mov	sp, r7
 8009348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934c:	4770      	bx	lr
 800934e:	bf00      	nop
 8009350:	20000cbc 	.word	0x20000cbc
 8009354:	20005fb0 	.word	0x20005fb0

08009358 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009358:	b480      	push	{r7}
 800935a:	af00      	add	r7, sp, #0
  return uwTick;
 800935c:	4b03      	ldr	r3, [pc, #12]	; (800936c <HAL_GetTick+0x14>)
 800935e:	681b      	ldr	r3, [r3, #0]
}
 8009360:	4618      	mov	r0, r3
 8009362:	46bd      	mov	sp, r7
 8009364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009368:	4770      	bx	lr
 800936a:	bf00      	nop
 800936c:	20005fb0 	.word	0x20005fb0

08009370 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b084      	sub	sp, #16
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009378:	f7ff ffee 	bl	8009358 <HAL_GetTick>
 800937c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009388:	d005      	beq.n	8009396 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800938a:	4b09      	ldr	r3, [pc, #36]	; (80093b0 <HAL_Delay+0x40>)
 800938c:	781b      	ldrb	r3, [r3, #0]
 800938e:	461a      	mov	r2, r3
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	4413      	add	r3, r2
 8009394:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8009396:	bf00      	nop
 8009398:	f7ff ffde 	bl	8009358 <HAL_GetTick>
 800939c:	4602      	mov	r2, r0
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	1ad3      	subs	r3, r2, r3
 80093a2:	68fa      	ldr	r2, [r7, #12]
 80093a4:	429a      	cmp	r2, r3
 80093a6:	d8f7      	bhi.n	8009398 <HAL_Delay+0x28>
  {
  }
}
 80093a8:	bf00      	nop
 80093aa:	3710      	adds	r7, #16
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}
 80093b0:	20000cbc 	.word	0x20000cbc

080093b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80093b4:	b480      	push	{r7}
 80093b6:	b085      	sub	sp, #20
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f003 0307 	and.w	r3, r3, #7
 80093c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80093c4:	4b0c      	ldr	r3, [pc, #48]	; (80093f8 <__NVIC_SetPriorityGrouping+0x44>)
 80093c6:	68db      	ldr	r3, [r3, #12]
 80093c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80093ca:	68ba      	ldr	r2, [r7, #8]
 80093cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80093d0:	4013      	ands	r3, r2
 80093d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80093dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80093e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80093e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80093e6:	4a04      	ldr	r2, [pc, #16]	; (80093f8 <__NVIC_SetPriorityGrouping+0x44>)
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	60d3      	str	r3, [r2, #12]
}
 80093ec:	bf00      	nop
 80093ee:	3714      	adds	r7, #20
 80093f0:	46bd      	mov	sp, r7
 80093f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f6:	4770      	bx	lr
 80093f8:	e000ed00 	.word	0xe000ed00

080093fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80093fc:	b480      	push	{r7}
 80093fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009400:	4b04      	ldr	r3, [pc, #16]	; (8009414 <__NVIC_GetPriorityGrouping+0x18>)
 8009402:	68db      	ldr	r3, [r3, #12]
 8009404:	0a1b      	lsrs	r3, r3, #8
 8009406:	f003 0307 	and.w	r3, r3, #7
}
 800940a:	4618      	mov	r0, r3
 800940c:	46bd      	mov	sp, r7
 800940e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009412:	4770      	bx	lr
 8009414:	e000ed00 	.word	0xe000ed00

08009418 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009418:	b480      	push	{r7}
 800941a:	b083      	sub	sp, #12
 800941c:	af00      	add	r7, sp, #0
 800941e:	4603      	mov	r3, r0
 8009420:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009426:	2b00      	cmp	r3, #0
 8009428:	db0b      	blt.n	8009442 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800942a:	79fb      	ldrb	r3, [r7, #7]
 800942c:	f003 021f 	and.w	r2, r3, #31
 8009430:	4907      	ldr	r1, [pc, #28]	; (8009450 <__NVIC_EnableIRQ+0x38>)
 8009432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009436:	095b      	lsrs	r3, r3, #5
 8009438:	2001      	movs	r0, #1
 800943a:	fa00 f202 	lsl.w	r2, r0, r2
 800943e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8009442:	bf00      	nop
 8009444:	370c      	adds	r7, #12
 8009446:	46bd      	mov	sp, r7
 8009448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944c:	4770      	bx	lr
 800944e:	bf00      	nop
 8009450:	e000e100 	.word	0xe000e100

08009454 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009454:	b480      	push	{r7}
 8009456:	b083      	sub	sp, #12
 8009458:	af00      	add	r7, sp, #0
 800945a:	4603      	mov	r3, r0
 800945c:	6039      	str	r1, [r7, #0]
 800945e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009460:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009464:	2b00      	cmp	r3, #0
 8009466:	db0a      	blt.n	800947e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	b2da      	uxtb	r2, r3
 800946c:	490c      	ldr	r1, [pc, #48]	; (80094a0 <__NVIC_SetPriority+0x4c>)
 800946e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009472:	0112      	lsls	r2, r2, #4
 8009474:	b2d2      	uxtb	r2, r2
 8009476:	440b      	add	r3, r1
 8009478:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800947c:	e00a      	b.n	8009494 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	b2da      	uxtb	r2, r3
 8009482:	4908      	ldr	r1, [pc, #32]	; (80094a4 <__NVIC_SetPriority+0x50>)
 8009484:	79fb      	ldrb	r3, [r7, #7]
 8009486:	f003 030f 	and.w	r3, r3, #15
 800948a:	3b04      	subs	r3, #4
 800948c:	0112      	lsls	r2, r2, #4
 800948e:	b2d2      	uxtb	r2, r2
 8009490:	440b      	add	r3, r1
 8009492:	761a      	strb	r2, [r3, #24]
}
 8009494:	bf00      	nop
 8009496:	370c      	adds	r7, #12
 8009498:	46bd      	mov	sp, r7
 800949a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949e:	4770      	bx	lr
 80094a0:	e000e100 	.word	0xe000e100
 80094a4:	e000ed00 	.word	0xe000ed00

080094a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80094a8:	b480      	push	{r7}
 80094aa:	b089      	sub	sp, #36	; 0x24
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	60f8      	str	r0, [r7, #12]
 80094b0:	60b9      	str	r1, [r7, #8]
 80094b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	f003 0307 	and.w	r3, r3, #7
 80094ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80094bc:	69fb      	ldr	r3, [r7, #28]
 80094be:	f1c3 0307 	rsb	r3, r3, #7
 80094c2:	2b04      	cmp	r3, #4
 80094c4:	bf28      	it	cs
 80094c6:	2304      	movcs	r3, #4
 80094c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80094ca:	69fb      	ldr	r3, [r7, #28]
 80094cc:	3304      	adds	r3, #4
 80094ce:	2b06      	cmp	r3, #6
 80094d0:	d902      	bls.n	80094d8 <NVIC_EncodePriority+0x30>
 80094d2:	69fb      	ldr	r3, [r7, #28]
 80094d4:	3b03      	subs	r3, #3
 80094d6:	e000      	b.n	80094da <NVIC_EncodePriority+0x32>
 80094d8:	2300      	movs	r3, #0
 80094da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80094dc:	f04f 32ff 	mov.w	r2, #4294967295
 80094e0:	69bb      	ldr	r3, [r7, #24]
 80094e2:	fa02 f303 	lsl.w	r3, r2, r3
 80094e6:	43da      	mvns	r2, r3
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	401a      	ands	r2, r3
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80094f0:	f04f 31ff 	mov.w	r1, #4294967295
 80094f4:	697b      	ldr	r3, [r7, #20]
 80094f6:	fa01 f303 	lsl.w	r3, r1, r3
 80094fa:	43d9      	mvns	r1, r3
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009500:	4313      	orrs	r3, r2
         );
}
 8009502:	4618      	mov	r0, r3
 8009504:	3724      	adds	r7, #36	; 0x24
 8009506:	46bd      	mov	sp, r7
 8009508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950c:	4770      	bx	lr

0800950e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800950e:	b580      	push	{r7, lr}
 8009510:	b082      	sub	sp, #8
 8009512:	af00      	add	r7, sp, #0
 8009514:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f7ff ff4c 	bl	80093b4 <__NVIC_SetPriorityGrouping>
}
 800951c:	bf00      	nop
 800951e:	3708      	adds	r7, #8
 8009520:	46bd      	mov	sp, r7
 8009522:	bd80      	pop	{r7, pc}

08009524 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009524:	b580      	push	{r7, lr}
 8009526:	b086      	sub	sp, #24
 8009528:	af00      	add	r7, sp, #0
 800952a:	4603      	mov	r3, r0
 800952c:	60b9      	str	r1, [r7, #8]
 800952e:	607a      	str	r2, [r7, #4]
 8009530:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009532:	2300      	movs	r3, #0
 8009534:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009536:	f7ff ff61 	bl	80093fc <__NVIC_GetPriorityGrouping>
 800953a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800953c:	687a      	ldr	r2, [r7, #4]
 800953e:	68b9      	ldr	r1, [r7, #8]
 8009540:	6978      	ldr	r0, [r7, #20]
 8009542:	f7ff ffb1 	bl	80094a8 <NVIC_EncodePriority>
 8009546:	4602      	mov	r2, r0
 8009548:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800954c:	4611      	mov	r1, r2
 800954e:	4618      	mov	r0, r3
 8009550:	f7ff ff80 	bl	8009454 <__NVIC_SetPriority>
}
 8009554:	bf00      	nop
 8009556:	3718      	adds	r7, #24
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}

0800955c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b082      	sub	sp, #8
 8009560:	af00      	add	r7, sp, #0
 8009562:	4603      	mov	r3, r0
 8009564:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800956a:	4618      	mov	r0, r3
 800956c:	f7ff ff54 	bl	8009418 <__NVIC_EnableIRQ>
}
 8009570:	bf00      	nop
 8009572:	3708      	adds	r7, #8
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}

08009578 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b086      	sub	sp, #24
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8009580:	2300      	movs	r3, #0
 8009582:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8009584:	f7ff fee8 	bl	8009358 <HAL_GetTick>
 8009588:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d101      	bne.n	8009594 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8009590:	2301      	movs	r3, #1
 8009592:	e099      	b.n	80096c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2200      	movs	r2, #0
 8009598:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2202      	movs	r2, #2
 80095a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	681a      	ldr	r2, [r3, #0]
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	f022 0201 	bic.w	r2, r2, #1
 80095b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80095b4:	e00f      	b.n	80095d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80095b6:	f7ff fecf 	bl	8009358 <HAL_GetTick>
 80095ba:	4602      	mov	r2, r0
 80095bc:	693b      	ldr	r3, [r7, #16]
 80095be:	1ad3      	subs	r3, r2, r3
 80095c0:	2b05      	cmp	r3, #5
 80095c2:	d908      	bls.n	80095d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2220      	movs	r2, #32
 80095c8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2203      	movs	r2, #3
 80095ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80095d2:	2303      	movs	r3, #3
 80095d4:	e078      	b.n	80096c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f003 0301 	and.w	r3, r3, #1
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d1e8      	bne.n	80095b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80095ec:	697a      	ldr	r2, [r7, #20]
 80095ee:	4b38      	ldr	r3, [pc, #224]	; (80096d0 <HAL_DMA_Init+0x158>)
 80095f0:	4013      	ands	r3, r2
 80095f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	685a      	ldr	r2, [r3, #4]
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	689b      	ldr	r3, [r3, #8]
 80095fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009602:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	691b      	ldr	r3, [r3, #16]
 8009608:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800960e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	699b      	ldr	r3, [r3, #24]
 8009614:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800961a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6a1b      	ldr	r3, [r3, #32]
 8009620:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009622:	697a      	ldr	r2, [r7, #20]
 8009624:	4313      	orrs	r3, r2
 8009626:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800962c:	2b04      	cmp	r3, #4
 800962e:	d107      	bne.n	8009640 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009638:	4313      	orrs	r3, r2
 800963a:	697a      	ldr	r2, [r7, #20]
 800963c:	4313      	orrs	r3, r2
 800963e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	697a      	ldr	r2, [r7, #20]
 8009646:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	695b      	ldr	r3, [r3, #20]
 800964e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8009650:	697b      	ldr	r3, [r7, #20]
 8009652:	f023 0307 	bic.w	r3, r3, #7
 8009656:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800965c:	697a      	ldr	r2, [r7, #20]
 800965e:	4313      	orrs	r3, r2
 8009660:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009666:	2b04      	cmp	r3, #4
 8009668:	d117      	bne.n	800969a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800966e:	697a      	ldr	r2, [r7, #20]
 8009670:	4313      	orrs	r3, r2
 8009672:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009678:	2b00      	cmp	r3, #0
 800967a:	d00e      	beq.n	800969a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f000 fa9f 	bl	8009bc0 <DMA_CheckFifoParam>
 8009682:	4603      	mov	r3, r0
 8009684:	2b00      	cmp	r3, #0
 8009686:	d008      	beq.n	800969a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2240      	movs	r2, #64	; 0x40
 800968c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2201      	movs	r2, #1
 8009692:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8009696:	2301      	movs	r3, #1
 8009698:	e016      	b.n	80096c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	697a      	ldr	r2, [r7, #20]
 80096a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f000 fa56 	bl	8009b54 <DMA_CalcBaseAndBitshift>
 80096a8:	4603      	mov	r3, r0
 80096aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096b0:	223f      	movs	r2, #63	; 0x3f
 80096b2:	409a      	lsls	r2, r3
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2200      	movs	r2, #0
 80096bc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2201      	movs	r2, #1
 80096c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80096c6:	2300      	movs	r3, #0
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	3718      	adds	r7, #24
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}
 80096d0:	f010803f 	.word	0xf010803f

080096d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b086      	sub	sp, #24
 80096d8:	af00      	add	r7, sp, #0
 80096da:	60f8      	str	r0, [r7, #12]
 80096dc:	60b9      	str	r1, [r7, #8]
 80096de:	607a      	str	r2, [r7, #4]
 80096e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80096e2:	2300      	movs	r3, #0
 80096e4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096ea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80096f2:	2b01      	cmp	r3, #1
 80096f4:	d101      	bne.n	80096fa <HAL_DMA_Start_IT+0x26>
 80096f6:	2302      	movs	r3, #2
 80096f8:	e040      	b.n	800977c <HAL_DMA_Start_IT+0xa8>
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	2201      	movs	r2, #1
 80096fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009708:	b2db      	uxtb	r3, r3
 800970a:	2b01      	cmp	r3, #1
 800970c:	d12f      	bne.n	800976e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	2202      	movs	r2, #2
 8009712:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	2200      	movs	r2, #0
 800971a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	687a      	ldr	r2, [r7, #4]
 8009720:	68b9      	ldr	r1, [r7, #8]
 8009722:	68f8      	ldr	r0, [r7, #12]
 8009724:	f000 f9e8 	bl	8009af8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800972c:	223f      	movs	r2, #63	; 0x3f
 800972e:	409a      	lsls	r2, r3
 8009730:	693b      	ldr	r3, [r7, #16]
 8009732:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	681a      	ldr	r2, [r3, #0]
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f042 0216 	orr.w	r2, r2, #22
 8009742:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009748:	2b00      	cmp	r3, #0
 800974a:	d007      	beq.n	800975c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	681a      	ldr	r2, [r3, #0]
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f042 0208 	orr.w	r2, r2, #8
 800975a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	681a      	ldr	r2, [r3, #0]
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f042 0201 	orr.w	r2, r2, #1
 800976a:	601a      	str	r2, [r3, #0]
 800976c:	e005      	b.n	800977a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	2200      	movs	r2, #0
 8009772:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8009776:	2302      	movs	r3, #2
 8009778:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800977a:	7dfb      	ldrb	r3, [r7, #23]
}
 800977c:	4618      	mov	r0, r3
 800977e:	3718      	adds	r7, #24
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}

08009784 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009784:	b480      	push	{r7}
 8009786:	b083      	sub	sp, #12
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009792:	b2db      	uxtb	r3, r3
 8009794:	2b02      	cmp	r3, #2
 8009796:	d004      	beq.n	80097a2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2280      	movs	r2, #128	; 0x80
 800979c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800979e:	2301      	movs	r3, #1
 80097a0:	e00c      	b.n	80097bc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2205      	movs	r2, #5
 80097a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	681a      	ldr	r2, [r3, #0]
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f022 0201 	bic.w	r2, r2, #1
 80097b8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80097ba:	2300      	movs	r3, #0
}
 80097bc:	4618      	mov	r0, r3
 80097be:	370c      	adds	r7, #12
 80097c0:	46bd      	mov	sp, r7
 80097c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c6:	4770      	bx	lr

080097c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b086      	sub	sp, #24
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80097d0:	2300      	movs	r3, #0
 80097d2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80097d4:	4b92      	ldr	r3, [pc, #584]	; (8009a20 <HAL_DMA_IRQHandler+0x258>)
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	4a92      	ldr	r2, [pc, #584]	; (8009a24 <HAL_DMA_IRQHandler+0x25c>)
 80097da:	fba2 2303 	umull	r2, r3, r2, r3
 80097de:	0a9b      	lsrs	r3, r3, #10
 80097e0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097e6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097f2:	2208      	movs	r2, #8
 80097f4:	409a      	lsls	r2, r3
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	4013      	ands	r3, r2
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d01a      	beq.n	8009834 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f003 0304 	and.w	r3, r3, #4
 8009808:	2b00      	cmp	r3, #0
 800980a:	d013      	beq.n	8009834 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	681a      	ldr	r2, [r3, #0]
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	f022 0204 	bic.w	r2, r2, #4
 800981a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009820:	2208      	movs	r2, #8
 8009822:	409a      	lsls	r2, r3
 8009824:	693b      	ldr	r3, [r7, #16]
 8009826:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800982c:	f043 0201 	orr.w	r2, r3, #1
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009838:	2201      	movs	r2, #1
 800983a:	409a      	lsls	r2, r3
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	4013      	ands	r3, r2
 8009840:	2b00      	cmp	r3, #0
 8009842:	d012      	beq.n	800986a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	695b      	ldr	r3, [r3, #20]
 800984a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800984e:	2b00      	cmp	r3, #0
 8009850:	d00b      	beq.n	800986a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009856:	2201      	movs	r2, #1
 8009858:	409a      	lsls	r2, r3
 800985a:	693b      	ldr	r3, [r7, #16]
 800985c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009862:	f043 0202 	orr.w	r2, r3, #2
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800986e:	2204      	movs	r2, #4
 8009870:	409a      	lsls	r2, r3
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	4013      	ands	r3, r2
 8009876:	2b00      	cmp	r3, #0
 8009878:	d012      	beq.n	80098a0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f003 0302 	and.w	r3, r3, #2
 8009884:	2b00      	cmp	r3, #0
 8009886:	d00b      	beq.n	80098a0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800988c:	2204      	movs	r2, #4
 800988e:	409a      	lsls	r2, r3
 8009890:	693b      	ldr	r3, [r7, #16]
 8009892:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009898:	f043 0204 	orr.w	r2, r3, #4
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098a4:	2210      	movs	r2, #16
 80098a6:	409a      	lsls	r2, r3
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	4013      	ands	r3, r2
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d043      	beq.n	8009938 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f003 0308 	and.w	r3, r3, #8
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d03c      	beq.n	8009938 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098c2:	2210      	movs	r2, #16
 80098c4:	409a      	lsls	r2, r3
 80098c6:	693b      	ldr	r3, [r7, #16]
 80098c8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d018      	beq.n	800990a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d108      	bne.n	80098f8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d024      	beq.n	8009938 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	4798      	blx	r3
 80098f6:	e01f      	b.n	8009938 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d01b      	beq.n	8009938 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	4798      	blx	r3
 8009908:	e016      	b.n	8009938 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009914:	2b00      	cmp	r3, #0
 8009916:	d107      	bne.n	8009928 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	681a      	ldr	r2, [r3, #0]
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f022 0208 	bic.w	r2, r2, #8
 8009926:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800992c:	2b00      	cmp	r3, #0
 800992e:	d003      	beq.n	8009938 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800993c:	2220      	movs	r2, #32
 800993e:	409a      	lsls	r2, r3
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	4013      	ands	r3, r2
 8009944:	2b00      	cmp	r3, #0
 8009946:	f000 808e 	beq.w	8009a66 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f003 0310 	and.w	r3, r3, #16
 8009954:	2b00      	cmp	r3, #0
 8009956:	f000 8086 	beq.w	8009a66 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800995e:	2220      	movs	r2, #32
 8009960:	409a      	lsls	r2, r3
 8009962:	693b      	ldr	r3, [r7, #16]
 8009964:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800996c:	b2db      	uxtb	r3, r3
 800996e:	2b05      	cmp	r3, #5
 8009970:	d136      	bne.n	80099e0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	681a      	ldr	r2, [r3, #0]
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f022 0216 	bic.w	r2, r2, #22
 8009980:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	695a      	ldr	r2, [r3, #20]
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009990:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009996:	2b00      	cmp	r3, #0
 8009998:	d103      	bne.n	80099a2 <HAL_DMA_IRQHandler+0x1da>
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d007      	beq.n	80099b2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	681a      	ldr	r2, [r3, #0]
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f022 0208 	bic.w	r2, r2, #8
 80099b0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80099b6:	223f      	movs	r2, #63	; 0x3f
 80099b8:	409a      	lsls	r2, r3
 80099ba:	693b      	ldr	r3, [r7, #16]
 80099bc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2200      	movs	r2, #0
 80099c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2201      	movs	r2, #1
 80099ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d07d      	beq.n	8009ad2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	4798      	blx	r3
        }
        return;
 80099de:	e078      	b.n	8009ad2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d01c      	beq.n	8009a28 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d108      	bne.n	8009a0e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d030      	beq.n	8009a66 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	4798      	blx	r3
 8009a0c:	e02b      	b.n	8009a66 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d027      	beq.n	8009a66 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	4798      	blx	r3
 8009a1e:	e022      	b.n	8009a66 <HAL_DMA_IRQHandler+0x29e>
 8009a20:	20000cb4 	.word	0x20000cb4
 8009a24:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d10f      	bne.n	8009a56 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	681a      	ldr	r2, [r3, #0]
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f022 0210 	bic.w	r2, r2, #16
 8009a44:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2200      	movs	r2, #0
 8009a4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2201      	movs	r2, #1
 8009a52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d003      	beq.n	8009a66 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d032      	beq.n	8009ad4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a72:	f003 0301 	and.w	r3, r3, #1
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d022      	beq.n	8009ac0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2205      	movs	r2, #5
 8009a7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	681a      	ldr	r2, [r3, #0]
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f022 0201 	bic.w	r2, r2, #1
 8009a90:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	3301      	adds	r3, #1
 8009a96:	60bb      	str	r3, [r7, #8]
 8009a98:	697a      	ldr	r2, [r7, #20]
 8009a9a:	429a      	cmp	r2, r3
 8009a9c:	d307      	bcc.n	8009aae <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f003 0301 	and.w	r3, r3, #1
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d1f2      	bne.n	8009a92 <HAL_DMA_IRQHandler+0x2ca>
 8009aac:	e000      	b.n	8009ab0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8009aae:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2201      	movs	r2, #1
 8009abc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d005      	beq.n	8009ad4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	4798      	blx	r3
 8009ad0:	e000      	b.n	8009ad4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8009ad2:	bf00      	nop
    }
  }
}
 8009ad4:	3718      	adds	r7, #24
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}
 8009ada:	bf00      	nop

08009adc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8009adc:	b480      	push	{r7}
 8009ade:	b083      	sub	sp, #12
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009aea:	b2db      	uxtb	r3, r3
}
 8009aec:	4618      	mov	r0, r3
 8009aee:	370c      	adds	r7, #12
 8009af0:	46bd      	mov	sp, r7
 8009af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af6:	4770      	bx	lr

08009af8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009af8:	b480      	push	{r7}
 8009afa:	b085      	sub	sp, #20
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	60f8      	str	r0, [r7, #12]
 8009b00:	60b9      	str	r1, [r7, #8]
 8009b02:	607a      	str	r2, [r7, #4]
 8009b04:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	681a      	ldr	r2, [r3, #0]
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009b14:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	683a      	ldr	r2, [r7, #0]
 8009b1c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	689b      	ldr	r3, [r3, #8]
 8009b22:	2b40      	cmp	r3, #64	; 0x40
 8009b24:	d108      	bne.n	8009b38 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	687a      	ldr	r2, [r7, #4]
 8009b2c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	68ba      	ldr	r2, [r7, #8]
 8009b34:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8009b36:	e007      	b.n	8009b48 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	68ba      	ldr	r2, [r7, #8]
 8009b3e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	687a      	ldr	r2, [r7, #4]
 8009b46:	60da      	str	r2, [r3, #12]
}
 8009b48:	bf00      	nop
 8009b4a:	3714      	adds	r7, #20
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b52:	4770      	bx	lr

08009b54 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009b54:	b480      	push	{r7}
 8009b56:	b085      	sub	sp, #20
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	b2db      	uxtb	r3, r3
 8009b62:	3b10      	subs	r3, #16
 8009b64:	4a14      	ldr	r2, [pc, #80]	; (8009bb8 <DMA_CalcBaseAndBitshift+0x64>)
 8009b66:	fba2 2303 	umull	r2, r3, r2, r3
 8009b6a:	091b      	lsrs	r3, r3, #4
 8009b6c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8009b6e:	4a13      	ldr	r2, [pc, #76]	; (8009bbc <DMA_CalcBaseAndBitshift+0x68>)
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	4413      	add	r3, r2
 8009b74:	781b      	ldrb	r3, [r3, #0]
 8009b76:	461a      	mov	r2, r3
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	2b03      	cmp	r3, #3
 8009b80:	d909      	bls.n	8009b96 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8009b8a:	f023 0303 	bic.w	r3, r3, #3
 8009b8e:	1d1a      	adds	r2, r3, #4
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	659a      	str	r2, [r3, #88]	; 0x58
 8009b94:	e007      	b.n	8009ba6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8009b9e:	f023 0303 	bic.w	r3, r3, #3
 8009ba2:	687a      	ldr	r2, [r7, #4]
 8009ba4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8009baa:	4618      	mov	r0, r3
 8009bac:	3714      	adds	r7, #20
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb4:	4770      	bx	lr
 8009bb6:	bf00      	nop
 8009bb8:	aaaaaaab 	.word	0xaaaaaaab
 8009bbc:	08019e70 	.word	0x08019e70

08009bc0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	b085      	sub	sp, #20
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009bc8:	2300      	movs	r3, #0
 8009bca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bd0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	699b      	ldr	r3, [r3, #24]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d11f      	bne.n	8009c1a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	2b03      	cmp	r3, #3
 8009bde:	d855      	bhi.n	8009c8c <DMA_CheckFifoParam+0xcc>
 8009be0:	a201      	add	r2, pc, #4	; (adr r2, 8009be8 <DMA_CheckFifoParam+0x28>)
 8009be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009be6:	bf00      	nop
 8009be8:	08009bf9 	.word	0x08009bf9
 8009bec:	08009c0b 	.word	0x08009c0b
 8009bf0:	08009bf9 	.word	0x08009bf9
 8009bf4:	08009c8d 	.word	0x08009c8d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bfc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d045      	beq.n	8009c90 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8009c04:	2301      	movs	r3, #1
 8009c06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009c08:	e042      	b.n	8009c90 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c0e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009c12:	d13f      	bne.n	8009c94 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8009c14:	2301      	movs	r3, #1
 8009c16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009c18:	e03c      	b.n	8009c94 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	699b      	ldr	r3, [r3, #24]
 8009c1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c22:	d121      	bne.n	8009c68 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	2b03      	cmp	r3, #3
 8009c28:	d836      	bhi.n	8009c98 <DMA_CheckFifoParam+0xd8>
 8009c2a:	a201      	add	r2, pc, #4	; (adr r2, 8009c30 <DMA_CheckFifoParam+0x70>)
 8009c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c30:	08009c41 	.word	0x08009c41
 8009c34:	08009c47 	.word	0x08009c47
 8009c38:	08009c41 	.word	0x08009c41
 8009c3c:	08009c59 	.word	0x08009c59
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8009c40:	2301      	movs	r3, #1
 8009c42:	73fb      	strb	r3, [r7, #15]
      break;
 8009c44:	e02f      	b.n	8009ca6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d024      	beq.n	8009c9c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8009c52:	2301      	movs	r3, #1
 8009c54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009c56:	e021      	b.n	8009c9c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c5c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009c60:	d11e      	bne.n	8009ca0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8009c62:	2301      	movs	r3, #1
 8009c64:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8009c66:	e01b      	b.n	8009ca0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	2b02      	cmp	r3, #2
 8009c6c:	d902      	bls.n	8009c74 <DMA_CheckFifoParam+0xb4>
 8009c6e:	2b03      	cmp	r3, #3
 8009c70:	d003      	beq.n	8009c7a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8009c72:	e018      	b.n	8009ca6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8009c74:	2301      	movs	r3, #1
 8009c76:	73fb      	strb	r3, [r7, #15]
      break;
 8009c78:	e015      	b.n	8009ca6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d00e      	beq.n	8009ca4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8009c86:	2301      	movs	r3, #1
 8009c88:	73fb      	strb	r3, [r7, #15]
      break;
 8009c8a:	e00b      	b.n	8009ca4 <DMA_CheckFifoParam+0xe4>
      break;
 8009c8c:	bf00      	nop
 8009c8e:	e00a      	b.n	8009ca6 <DMA_CheckFifoParam+0xe6>
      break;
 8009c90:	bf00      	nop
 8009c92:	e008      	b.n	8009ca6 <DMA_CheckFifoParam+0xe6>
      break;
 8009c94:	bf00      	nop
 8009c96:	e006      	b.n	8009ca6 <DMA_CheckFifoParam+0xe6>
      break;
 8009c98:	bf00      	nop
 8009c9a:	e004      	b.n	8009ca6 <DMA_CheckFifoParam+0xe6>
      break;
 8009c9c:	bf00      	nop
 8009c9e:	e002      	b.n	8009ca6 <DMA_CheckFifoParam+0xe6>
      break;   
 8009ca0:	bf00      	nop
 8009ca2:	e000      	b.n	8009ca6 <DMA_CheckFifoParam+0xe6>
      break;
 8009ca4:	bf00      	nop
    }
  } 
  
  return status; 
 8009ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3714      	adds	r7, #20
 8009cac:	46bd      	mov	sp, r7
 8009cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb2:	4770      	bx	lr

08009cb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b089      	sub	sp, #36	; 0x24
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
 8009cbc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009cca:	2300      	movs	r3, #0
 8009ccc:	61fb      	str	r3, [r7, #28]
 8009cce:	e16b      	b.n	8009fa8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009cd0:	2201      	movs	r2, #1
 8009cd2:	69fb      	ldr	r3, [r7, #28]
 8009cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8009cd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	697a      	ldr	r2, [r7, #20]
 8009ce0:	4013      	ands	r3, r2
 8009ce2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009ce4:	693a      	ldr	r2, [r7, #16]
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	429a      	cmp	r2, r3
 8009cea:	f040 815a 	bne.w	8009fa2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	685b      	ldr	r3, [r3, #4]
 8009cf2:	2b01      	cmp	r3, #1
 8009cf4:	d00b      	beq.n	8009d0e <HAL_GPIO_Init+0x5a>
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	685b      	ldr	r3, [r3, #4]
 8009cfa:	2b02      	cmp	r3, #2
 8009cfc:	d007      	beq.n	8009d0e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009d02:	2b11      	cmp	r3, #17
 8009d04:	d003      	beq.n	8009d0e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	685b      	ldr	r3, [r3, #4]
 8009d0a:	2b12      	cmp	r3, #18
 8009d0c:	d130      	bne.n	8009d70 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	689b      	ldr	r3, [r3, #8]
 8009d12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009d14:	69fb      	ldr	r3, [r7, #28]
 8009d16:	005b      	lsls	r3, r3, #1
 8009d18:	2203      	movs	r2, #3
 8009d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8009d1e:	43db      	mvns	r3, r3
 8009d20:	69ba      	ldr	r2, [r7, #24]
 8009d22:	4013      	ands	r3, r2
 8009d24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	68da      	ldr	r2, [r3, #12]
 8009d2a:	69fb      	ldr	r3, [r7, #28]
 8009d2c:	005b      	lsls	r3, r3, #1
 8009d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8009d32:	69ba      	ldr	r2, [r7, #24]
 8009d34:	4313      	orrs	r3, r2
 8009d36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	69ba      	ldr	r2, [r7, #24]
 8009d3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	685b      	ldr	r3, [r3, #4]
 8009d42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009d44:	2201      	movs	r2, #1
 8009d46:	69fb      	ldr	r3, [r7, #28]
 8009d48:	fa02 f303 	lsl.w	r3, r2, r3
 8009d4c:	43db      	mvns	r3, r3
 8009d4e:	69ba      	ldr	r2, [r7, #24]
 8009d50:	4013      	ands	r3, r2
 8009d52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	685b      	ldr	r3, [r3, #4]
 8009d58:	091b      	lsrs	r3, r3, #4
 8009d5a:	f003 0201 	and.w	r2, r3, #1
 8009d5e:	69fb      	ldr	r3, [r7, #28]
 8009d60:	fa02 f303 	lsl.w	r3, r2, r3
 8009d64:	69ba      	ldr	r2, [r7, #24]
 8009d66:	4313      	orrs	r3, r2
 8009d68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	69ba      	ldr	r2, [r7, #24]
 8009d6e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	68db      	ldr	r3, [r3, #12]
 8009d74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009d76:	69fb      	ldr	r3, [r7, #28]
 8009d78:	005b      	lsls	r3, r3, #1
 8009d7a:	2203      	movs	r2, #3
 8009d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8009d80:	43db      	mvns	r3, r3
 8009d82:	69ba      	ldr	r2, [r7, #24]
 8009d84:	4013      	ands	r3, r2
 8009d86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	689a      	ldr	r2, [r3, #8]
 8009d8c:	69fb      	ldr	r3, [r7, #28]
 8009d8e:	005b      	lsls	r3, r3, #1
 8009d90:	fa02 f303 	lsl.w	r3, r2, r3
 8009d94:	69ba      	ldr	r2, [r7, #24]
 8009d96:	4313      	orrs	r3, r2
 8009d98:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	69ba      	ldr	r2, [r7, #24]
 8009d9e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	685b      	ldr	r3, [r3, #4]
 8009da4:	2b02      	cmp	r3, #2
 8009da6:	d003      	beq.n	8009db0 <HAL_GPIO_Init+0xfc>
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	685b      	ldr	r3, [r3, #4]
 8009dac:	2b12      	cmp	r3, #18
 8009dae:	d123      	bne.n	8009df8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009db0:	69fb      	ldr	r3, [r7, #28]
 8009db2:	08da      	lsrs	r2, r3, #3
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	3208      	adds	r2, #8
 8009db8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009dbe:	69fb      	ldr	r3, [r7, #28]
 8009dc0:	f003 0307 	and.w	r3, r3, #7
 8009dc4:	009b      	lsls	r3, r3, #2
 8009dc6:	220f      	movs	r2, #15
 8009dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8009dcc:	43db      	mvns	r3, r3
 8009dce:	69ba      	ldr	r2, [r7, #24]
 8009dd0:	4013      	ands	r3, r2
 8009dd2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	691a      	ldr	r2, [r3, #16]
 8009dd8:	69fb      	ldr	r3, [r7, #28]
 8009dda:	f003 0307 	and.w	r3, r3, #7
 8009dde:	009b      	lsls	r3, r3, #2
 8009de0:	fa02 f303 	lsl.w	r3, r2, r3
 8009de4:	69ba      	ldr	r2, [r7, #24]
 8009de6:	4313      	orrs	r3, r2
 8009de8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009dea:	69fb      	ldr	r3, [r7, #28]
 8009dec:	08da      	lsrs	r2, r3, #3
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	3208      	adds	r2, #8
 8009df2:	69b9      	ldr	r1, [r7, #24]
 8009df4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009dfe:	69fb      	ldr	r3, [r7, #28]
 8009e00:	005b      	lsls	r3, r3, #1
 8009e02:	2203      	movs	r2, #3
 8009e04:	fa02 f303 	lsl.w	r3, r2, r3
 8009e08:	43db      	mvns	r3, r3
 8009e0a:	69ba      	ldr	r2, [r7, #24]
 8009e0c:	4013      	ands	r3, r2
 8009e0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	685b      	ldr	r3, [r3, #4]
 8009e14:	f003 0203 	and.w	r2, r3, #3
 8009e18:	69fb      	ldr	r3, [r7, #28]
 8009e1a:	005b      	lsls	r3, r3, #1
 8009e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8009e20:	69ba      	ldr	r2, [r7, #24]
 8009e22:	4313      	orrs	r3, r2
 8009e24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	69ba      	ldr	r2, [r7, #24]
 8009e2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	685b      	ldr	r3, [r3, #4]
 8009e30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	f000 80b4 	beq.w	8009fa2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	60fb      	str	r3, [r7, #12]
 8009e3e:	4b5f      	ldr	r3, [pc, #380]	; (8009fbc <HAL_GPIO_Init+0x308>)
 8009e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e42:	4a5e      	ldr	r2, [pc, #376]	; (8009fbc <HAL_GPIO_Init+0x308>)
 8009e44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009e48:	6453      	str	r3, [r2, #68]	; 0x44
 8009e4a:	4b5c      	ldr	r3, [pc, #368]	; (8009fbc <HAL_GPIO_Init+0x308>)
 8009e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e52:	60fb      	str	r3, [r7, #12]
 8009e54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009e56:	4a5a      	ldr	r2, [pc, #360]	; (8009fc0 <HAL_GPIO_Init+0x30c>)
 8009e58:	69fb      	ldr	r3, [r7, #28]
 8009e5a:	089b      	lsrs	r3, r3, #2
 8009e5c:	3302      	adds	r3, #2
 8009e5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009e64:	69fb      	ldr	r3, [r7, #28]
 8009e66:	f003 0303 	and.w	r3, r3, #3
 8009e6a:	009b      	lsls	r3, r3, #2
 8009e6c:	220f      	movs	r2, #15
 8009e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8009e72:	43db      	mvns	r3, r3
 8009e74:	69ba      	ldr	r2, [r7, #24]
 8009e76:	4013      	ands	r3, r2
 8009e78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	4a51      	ldr	r2, [pc, #324]	; (8009fc4 <HAL_GPIO_Init+0x310>)
 8009e7e:	4293      	cmp	r3, r2
 8009e80:	d02b      	beq.n	8009eda <HAL_GPIO_Init+0x226>
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	4a50      	ldr	r2, [pc, #320]	; (8009fc8 <HAL_GPIO_Init+0x314>)
 8009e86:	4293      	cmp	r3, r2
 8009e88:	d025      	beq.n	8009ed6 <HAL_GPIO_Init+0x222>
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	4a4f      	ldr	r2, [pc, #316]	; (8009fcc <HAL_GPIO_Init+0x318>)
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d01f      	beq.n	8009ed2 <HAL_GPIO_Init+0x21e>
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	4a4e      	ldr	r2, [pc, #312]	; (8009fd0 <HAL_GPIO_Init+0x31c>)
 8009e96:	4293      	cmp	r3, r2
 8009e98:	d019      	beq.n	8009ece <HAL_GPIO_Init+0x21a>
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	4a4d      	ldr	r2, [pc, #308]	; (8009fd4 <HAL_GPIO_Init+0x320>)
 8009e9e:	4293      	cmp	r3, r2
 8009ea0:	d013      	beq.n	8009eca <HAL_GPIO_Init+0x216>
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	4a4c      	ldr	r2, [pc, #304]	; (8009fd8 <HAL_GPIO_Init+0x324>)
 8009ea6:	4293      	cmp	r3, r2
 8009ea8:	d00d      	beq.n	8009ec6 <HAL_GPIO_Init+0x212>
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	4a4b      	ldr	r2, [pc, #300]	; (8009fdc <HAL_GPIO_Init+0x328>)
 8009eae:	4293      	cmp	r3, r2
 8009eb0:	d007      	beq.n	8009ec2 <HAL_GPIO_Init+0x20e>
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	4a4a      	ldr	r2, [pc, #296]	; (8009fe0 <HAL_GPIO_Init+0x32c>)
 8009eb6:	4293      	cmp	r3, r2
 8009eb8:	d101      	bne.n	8009ebe <HAL_GPIO_Init+0x20a>
 8009eba:	2307      	movs	r3, #7
 8009ebc:	e00e      	b.n	8009edc <HAL_GPIO_Init+0x228>
 8009ebe:	2308      	movs	r3, #8
 8009ec0:	e00c      	b.n	8009edc <HAL_GPIO_Init+0x228>
 8009ec2:	2306      	movs	r3, #6
 8009ec4:	e00a      	b.n	8009edc <HAL_GPIO_Init+0x228>
 8009ec6:	2305      	movs	r3, #5
 8009ec8:	e008      	b.n	8009edc <HAL_GPIO_Init+0x228>
 8009eca:	2304      	movs	r3, #4
 8009ecc:	e006      	b.n	8009edc <HAL_GPIO_Init+0x228>
 8009ece:	2303      	movs	r3, #3
 8009ed0:	e004      	b.n	8009edc <HAL_GPIO_Init+0x228>
 8009ed2:	2302      	movs	r3, #2
 8009ed4:	e002      	b.n	8009edc <HAL_GPIO_Init+0x228>
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	e000      	b.n	8009edc <HAL_GPIO_Init+0x228>
 8009eda:	2300      	movs	r3, #0
 8009edc:	69fa      	ldr	r2, [r7, #28]
 8009ede:	f002 0203 	and.w	r2, r2, #3
 8009ee2:	0092      	lsls	r2, r2, #2
 8009ee4:	4093      	lsls	r3, r2
 8009ee6:	69ba      	ldr	r2, [r7, #24]
 8009ee8:	4313      	orrs	r3, r2
 8009eea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009eec:	4934      	ldr	r1, [pc, #208]	; (8009fc0 <HAL_GPIO_Init+0x30c>)
 8009eee:	69fb      	ldr	r3, [r7, #28]
 8009ef0:	089b      	lsrs	r3, r3, #2
 8009ef2:	3302      	adds	r3, #2
 8009ef4:	69ba      	ldr	r2, [r7, #24]
 8009ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009efa:	4b3a      	ldr	r3, [pc, #232]	; (8009fe4 <HAL_GPIO_Init+0x330>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009f00:	693b      	ldr	r3, [r7, #16]
 8009f02:	43db      	mvns	r3, r3
 8009f04:	69ba      	ldr	r2, [r7, #24]
 8009f06:	4013      	ands	r3, r2
 8009f08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	685b      	ldr	r3, [r3, #4]
 8009f0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d003      	beq.n	8009f1e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8009f16:	69ba      	ldr	r2, [r7, #24]
 8009f18:	693b      	ldr	r3, [r7, #16]
 8009f1a:	4313      	orrs	r3, r2
 8009f1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009f1e:	4a31      	ldr	r2, [pc, #196]	; (8009fe4 <HAL_GPIO_Init+0x330>)
 8009f20:	69bb      	ldr	r3, [r7, #24]
 8009f22:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8009f24:	4b2f      	ldr	r3, [pc, #188]	; (8009fe4 <HAL_GPIO_Init+0x330>)
 8009f26:	685b      	ldr	r3, [r3, #4]
 8009f28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009f2a:	693b      	ldr	r3, [r7, #16]
 8009f2c:	43db      	mvns	r3, r3
 8009f2e:	69ba      	ldr	r2, [r7, #24]
 8009f30:	4013      	ands	r3, r2
 8009f32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	685b      	ldr	r3, [r3, #4]
 8009f38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d003      	beq.n	8009f48 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8009f40:	69ba      	ldr	r2, [r7, #24]
 8009f42:	693b      	ldr	r3, [r7, #16]
 8009f44:	4313      	orrs	r3, r2
 8009f46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009f48:	4a26      	ldr	r2, [pc, #152]	; (8009fe4 <HAL_GPIO_Init+0x330>)
 8009f4a:	69bb      	ldr	r3, [r7, #24]
 8009f4c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009f4e:	4b25      	ldr	r3, [pc, #148]	; (8009fe4 <HAL_GPIO_Init+0x330>)
 8009f50:	689b      	ldr	r3, [r3, #8]
 8009f52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009f54:	693b      	ldr	r3, [r7, #16]
 8009f56:	43db      	mvns	r3, r3
 8009f58:	69ba      	ldr	r2, [r7, #24]
 8009f5a:	4013      	ands	r3, r2
 8009f5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	685b      	ldr	r3, [r3, #4]
 8009f62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d003      	beq.n	8009f72 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8009f6a:	69ba      	ldr	r2, [r7, #24]
 8009f6c:	693b      	ldr	r3, [r7, #16]
 8009f6e:	4313      	orrs	r3, r2
 8009f70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009f72:	4a1c      	ldr	r2, [pc, #112]	; (8009fe4 <HAL_GPIO_Init+0x330>)
 8009f74:	69bb      	ldr	r3, [r7, #24]
 8009f76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009f78:	4b1a      	ldr	r3, [pc, #104]	; (8009fe4 <HAL_GPIO_Init+0x330>)
 8009f7a:	68db      	ldr	r3, [r3, #12]
 8009f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009f7e:	693b      	ldr	r3, [r7, #16]
 8009f80:	43db      	mvns	r3, r3
 8009f82:	69ba      	ldr	r2, [r7, #24]
 8009f84:	4013      	ands	r3, r2
 8009f86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	685b      	ldr	r3, [r3, #4]
 8009f8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d003      	beq.n	8009f9c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8009f94:	69ba      	ldr	r2, [r7, #24]
 8009f96:	693b      	ldr	r3, [r7, #16]
 8009f98:	4313      	orrs	r3, r2
 8009f9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009f9c:	4a11      	ldr	r2, [pc, #68]	; (8009fe4 <HAL_GPIO_Init+0x330>)
 8009f9e:	69bb      	ldr	r3, [r7, #24]
 8009fa0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009fa2:	69fb      	ldr	r3, [r7, #28]
 8009fa4:	3301      	adds	r3, #1
 8009fa6:	61fb      	str	r3, [r7, #28]
 8009fa8:	69fb      	ldr	r3, [r7, #28]
 8009faa:	2b0f      	cmp	r3, #15
 8009fac:	f67f ae90 	bls.w	8009cd0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009fb0:	bf00      	nop
 8009fb2:	3724      	adds	r7, #36	; 0x24
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fba:	4770      	bx	lr
 8009fbc:	40023800 	.word	0x40023800
 8009fc0:	40013800 	.word	0x40013800
 8009fc4:	40020000 	.word	0x40020000
 8009fc8:	40020400 	.word	0x40020400
 8009fcc:	40020800 	.word	0x40020800
 8009fd0:	40020c00 	.word	0x40020c00
 8009fd4:	40021000 	.word	0x40021000
 8009fd8:	40021400 	.word	0x40021400
 8009fdc:	40021800 	.word	0x40021800
 8009fe0:	40021c00 	.word	0x40021c00
 8009fe4:	40013c00 	.word	0x40013c00

08009fe8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009fe8:	b480      	push	{r7}
 8009fea:	b083      	sub	sp, #12
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
 8009ff0:	460b      	mov	r3, r1
 8009ff2:	807b      	strh	r3, [r7, #2]
 8009ff4:	4613      	mov	r3, r2
 8009ff6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009ff8:	787b      	ldrb	r3, [r7, #1]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d003      	beq.n	800a006 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009ffe:	887a      	ldrh	r2, [r7, #2]
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800a004:	e003      	b.n	800a00e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800a006:	887b      	ldrh	r3, [r7, #2]
 800a008:	041a      	lsls	r2, r3, #16
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	619a      	str	r2, [r3, #24]
}
 800a00e:	bf00      	nop
 800a010:	370c      	adds	r7, #12
 800a012:	46bd      	mov	sp, r7
 800a014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a018:	4770      	bx	lr
	...

0800a01c <HAL_NOR_Init>:
  * @param  Timing pointer to NOR control timing structure 
  * @param  ExtTiming pointer to NOR extended mode timing structure    
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NOR_Init(NOR_HandleTypeDef *hnor, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b084      	sub	sp, #16
 800a020:	af00      	add	r7, sp, #0
 800a022:	60f8      	str	r0, [r7, #12]
 800a024:	60b9      	str	r1, [r7, #8]
 800a026:	607a      	str	r2, [r7, #4]
  /* Check the NOR handle parameter */
  if(hnor == NULL)
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d101      	bne.n	800a032 <HAL_NOR_Init+0x16>
  {
     return HAL_ERROR;
 800a02e:	2301      	movs	r3, #1
 800a030:	e043      	b.n	800a0ba <HAL_NOR_Init+0x9e>
  }
  
  if(hnor->State == HAL_NOR_STATE_RESET)
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800a038:	b2db      	uxtb	r3, r3
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d106      	bne.n	800a04c <HAL_NOR_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnor->Lock = HAL_UNLOCKED;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	2200      	movs	r2, #0
 800a042:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hnor->MspInitCallback(hnor);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NOR_MspInit(hnor);
 800a046:	68f8      	ldr	r0, [r7, #12]
 800a048:	f7f8 fdfe 	bl	8002c48 <HAL_NOR_MspInit>
#endif /* (USE_HAL_NOR_REGISTER_CALLBACKS) */
  }
  
  /* Initialize NOR control Interface */
  FMC_NORSRAM_Init(hnor->Instance, &(hnor->Init));
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681a      	ldr	r2, [r3, #0]
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	3308      	adds	r3, #8
 800a054:	4619      	mov	r1, r3
 800a056:	4610      	mov	r0, r2
 800a058:	f003 f810 	bl	800d07c <FSMC_NORSRAM_Init>

  /* Initialize NOR timing Interface */
  FMC_NORSRAM_Timing_Init(hnor->Instance, Timing, hnor->Init.NSBank); 
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	6818      	ldr	r0, [r3, #0]
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	689b      	ldr	r3, [r3, #8]
 800a064:	461a      	mov	r2, r3
 800a066:	68b9      	ldr	r1, [r7, #8]
 800a068:	f003 f85a 	bl	800d120 <FSMC_NORSRAM_Timing_Init>

  /* Initialize NOR extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hnor->Extended, ExtTiming, hnor->Init.NSBank, hnor->Init.ExtendedMode);
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	6858      	ldr	r0, [r3, #4]
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	689a      	ldr	r2, [r3, #8]
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a078:	6879      	ldr	r1, [r7, #4]
 800a07a:	f003 f88f 	bl	800d19c <FSMC_NORSRAM_Extended_Timing_Init>

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hnor->Instance, hnor->Init.NSBank);
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	68fa      	ldr	r2, [r7, #12]
 800a084:	6892      	ldr	r2, [r2, #8]
 800a086:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	68fa      	ldr	r2, [r7, #12]
 800a090:	6892      	ldr	r2, [r2, #8]
 800a092:	f041 0101 	orr.w	r1, r1, #1
 800a096:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize NOR Memory Data Width*/
  if (hnor->Init.MemoryDataWidth == FMC_NORSRAM_MEM_BUS_WIDTH_8)
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	695b      	ldr	r3, [r3, #20]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d103      	bne.n	800a0aa <HAL_NOR_Init+0x8e>
  {
    uwNORMemoryDataWidth = NOR_MEMORY_8B;
 800a0a2:	4b08      	ldr	r3, [pc, #32]	; (800a0c4 <HAL_NOR_Init+0xa8>)
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	601a      	str	r2, [r3, #0]
 800a0a8:	e002      	b.n	800a0b0 <HAL_NOR_Init+0x94>
  }
  else
  {
    uwNORMemoryDataWidth = NOR_MEMORY_16B;
 800a0aa:	4b06      	ldr	r3, [pc, #24]	; (800a0c4 <HAL_NOR_Init+0xa8>)
 800a0ac:	2201      	movs	r2, #1
 800a0ae:	601a      	str	r2, [r3, #0]
  }

  /* Check the NOR controller state */
  hnor->State = HAL_NOR_STATE_READY; 
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	2201      	movs	r2, #1
 800a0b4:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  return HAL_OK;
 800a0b8:	2300      	movs	r3, #0
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3710      	adds	r7, #16
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}
 800a0c2:	bf00      	nop
 800a0c4:	20001480 	.word	0x20001480

0800a0c8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800a0c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0ca:	b08f      	sub	sp, #60	; 0x3c
 800a0cc:	af0a      	add	r7, sp, #40	; 0x28
 800a0ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d101      	bne.n	800a0da <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	e10f      	b.n	800a2fa <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800a0e6:	b2db      	uxtb	r3, r3
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d106      	bne.n	800a0fa <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	f009 fa79 	bl	80135ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	2203      	movs	r2, #3
 800a0fe:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800a102:	68bb      	ldr	r3, [r7, #8]
 800a104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d102      	bne.n	800a114 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2200      	movs	r2, #0
 800a112:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	4618      	mov	r0, r3
 800a11a:	f003 f994 	bl	800d446 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	603b      	str	r3, [r7, #0]
 800a124:	687e      	ldr	r6, [r7, #4]
 800a126:	466d      	mov	r5, sp
 800a128:	f106 0410 	add.w	r4, r6, #16
 800a12c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a12e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a130:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a132:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a134:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a138:	e885 0003 	stmia.w	r5, {r0, r1}
 800a13c:	1d33      	adds	r3, r6, #4
 800a13e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a140:	6838      	ldr	r0, [r7, #0]
 800a142:	f003 f86b 	bl	800d21c <USB_CoreInit>
 800a146:	4603      	mov	r3, r0
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d005      	beq.n	800a158 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2202      	movs	r2, #2
 800a150:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800a154:	2301      	movs	r3, #1
 800a156:	e0d0      	b.n	800a2fa <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	2100      	movs	r1, #0
 800a15e:	4618      	mov	r0, r3
 800a160:	f003 f982 	bl	800d468 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a164:	2300      	movs	r3, #0
 800a166:	73fb      	strb	r3, [r7, #15]
 800a168:	e04a      	b.n	800a200 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800a16a:	7bfa      	ldrb	r2, [r7, #15]
 800a16c:	6879      	ldr	r1, [r7, #4]
 800a16e:	4613      	mov	r3, r2
 800a170:	00db      	lsls	r3, r3, #3
 800a172:	1a9b      	subs	r3, r3, r2
 800a174:	009b      	lsls	r3, r3, #2
 800a176:	440b      	add	r3, r1
 800a178:	333d      	adds	r3, #61	; 0x3d
 800a17a:	2201      	movs	r2, #1
 800a17c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800a17e:	7bfa      	ldrb	r2, [r7, #15]
 800a180:	6879      	ldr	r1, [r7, #4]
 800a182:	4613      	mov	r3, r2
 800a184:	00db      	lsls	r3, r3, #3
 800a186:	1a9b      	subs	r3, r3, r2
 800a188:	009b      	lsls	r3, r3, #2
 800a18a:	440b      	add	r3, r1
 800a18c:	333c      	adds	r3, #60	; 0x3c
 800a18e:	7bfa      	ldrb	r2, [r7, #15]
 800a190:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800a192:	7bfa      	ldrb	r2, [r7, #15]
 800a194:	7bfb      	ldrb	r3, [r7, #15]
 800a196:	b298      	uxth	r0, r3
 800a198:	6879      	ldr	r1, [r7, #4]
 800a19a:	4613      	mov	r3, r2
 800a19c:	00db      	lsls	r3, r3, #3
 800a19e:	1a9b      	subs	r3, r3, r2
 800a1a0:	009b      	lsls	r3, r3, #2
 800a1a2:	440b      	add	r3, r1
 800a1a4:	3342      	adds	r3, #66	; 0x42
 800a1a6:	4602      	mov	r2, r0
 800a1a8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800a1aa:	7bfa      	ldrb	r2, [r7, #15]
 800a1ac:	6879      	ldr	r1, [r7, #4]
 800a1ae:	4613      	mov	r3, r2
 800a1b0:	00db      	lsls	r3, r3, #3
 800a1b2:	1a9b      	subs	r3, r3, r2
 800a1b4:	009b      	lsls	r3, r3, #2
 800a1b6:	440b      	add	r3, r1
 800a1b8:	333f      	adds	r3, #63	; 0x3f
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800a1be:	7bfa      	ldrb	r2, [r7, #15]
 800a1c0:	6879      	ldr	r1, [r7, #4]
 800a1c2:	4613      	mov	r3, r2
 800a1c4:	00db      	lsls	r3, r3, #3
 800a1c6:	1a9b      	subs	r3, r3, r2
 800a1c8:	009b      	lsls	r3, r3, #2
 800a1ca:	440b      	add	r3, r1
 800a1cc:	3344      	adds	r3, #68	; 0x44
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800a1d2:	7bfa      	ldrb	r2, [r7, #15]
 800a1d4:	6879      	ldr	r1, [r7, #4]
 800a1d6:	4613      	mov	r3, r2
 800a1d8:	00db      	lsls	r3, r3, #3
 800a1da:	1a9b      	subs	r3, r3, r2
 800a1dc:	009b      	lsls	r3, r3, #2
 800a1de:	440b      	add	r3, r1
 800a1e0:	3348      	adds	r3, #72	; 0x48
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800a1e6:	7bfa      	ldrb	r2, [r7, #15]
 800a1e8:	6879      	ldr	r1, [r7, #4]
 800a1ea:	4613      	mov	r3, r2
 800a1ec:	00db      	lsls	r3, r3, #3
 800a1ee:	1a9b      	subs	r3, r3, r2
 800a1f0:	009b      	lsls	r3, r3, #2
 800a1f2:	440b      	add	r3, r1
 800a1f4:	3350      	adds	r3, #80	; 0x50
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a1fa:	7bfb      	ldrb	r3, [r7, #15]
 800a1fc:	3301      	adds	r3, #1
 800a1fe:	73fb      	strb	r3, [r7, #15]
 800a200:	7bfa      	ldrb	r2, [r7, #15]
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	685b      	ldr	r3, [r3, #4]
 800a206:	429a      	cmp	r2, r3
 800a208:	d3af      	bcc.n	800a16a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a20a:	2300      	movs	r3, #0
 800a20c:	73fb      	strb	r3, [r7, #15]
 800a20e:	e044      	b.n	800a29a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800a210:	7bfa      	ldrb	r2, [r7, #15]
 800a212:	6879      	ldr	r1, [r7, #4]
 800a214:	4613      	mov	r3, r2
 800a216:	00db      	lsls	r3, r3, #3
 800a218:	1a9b      	subs	r3, r3, r2
 800a21a:	009b      	lsls	r3, r3, #2
 800a21c:	440b      	add	r3, r1
 800a21e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800a222:	2200      	movs	r2, #0
 800a224:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800a226:	7bfa      	ldrb	r2, [r7, #15]
 800a228:	6879      	ldr	r1, [r7, #4]
 800a22a:	4613      	mov	r3, r2
 800a22c:	00db      	lsls	r3, r3, #3
 800a22e:	1a9b      	subs	r3, r3, r2
 800a230:	009b      	lsls	r3, r3, #2
 800a232:	440b      	add	r3, r1
 800a234:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800a238:	7bfa      	ldrb	r2, [r7, #15]
 800a23a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800a23c:	7bfa      	ldrb	r2, [r7, #15]
 800a23e:	6879      	ldr	r1, [r7, #4]
 800a240:	4613      	mov	r3, r2
 800a242:	00db      	lsls	r3, r3, #3
 800a244:	1a9b      	subs	r3, r3, r2
 800a246:	009b      	lsls	r3, r3, #2
 800a248:	440b      	add	r3, r1
 800a24a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a24e:	2200      	movs	r2, #0
 800a250:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800a252:	7bfa      	ldrb	r2, [r7, #15]
 800a254:	6879      	ldr	r1, [r7, #4]
 800a256:	4613      	mov	r3, r2
 800a258:	00db      	lsls	r3, r3, #3
 800a25a:	1a9b      	subs	r3, r3, r2
 800a25c:	009b      	lsls	r3, r3, #2
 800a25e:	440b      	add	r3, r1
 800a260:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800a264:	2200      	movs	r2, #0
 800a266:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800a268:	7bfa      	ldrb	r2, [r7, #15]
 800a26a:	6879      	ldr	r1, [r7, #4]
 800a26c:	4613      	mov	r3, r2
 800a26e:	00db      	lsls	r3, r3, #3
 800a270:	1a9b      	subs	r3, r3, r2
 800a272:	009b      	lsls	r3, r3, #2
 800a274:	440b      	add	r3, r1
 800a276:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a27a:	2200      	movs	r2, #0
 800a27c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800a27e:	7bfa      	ldrb	r2, [r7, #15]
 800a280:	6879      	ldr	r1, [r7, #4]
 800a282:	4613      	mov	r3, r2
 800a284:	00db      	lsls	r3, r3, #3
 800a286:	1a9b      	subs	r3, r3, r2
 800a288:	009b      	lsls	r3, r3, #2
 800a28a:	440b      	add	r3, r1
 800a28c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800a290:	2200      	movs	r2, #0
 800a292:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a294:	7bfb      	ldrb	r3, [r7, #15]
 800a296:	3301      	adds	r3, #1
 800a298:	73fb      	strb	r3, [r7, #15]
 800a29a:	7bfa      	ldrb	r2, [r7, #15]
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	685b      	ldr	r3, [r3, #4]
 800a2a0:	429a      	cmp	r2, r3
 800a2a2:	d3b5      	bcc.n	800a210 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	603b      	str	r3, [r7, #0]
 800a2aa:	687e      	ldr	r6, [r7, #4]
 800a2ac:	466d      	mov	r5, sp
 800a2ae:	f106 0410 	add.w	r4, r6, #16
 800a2b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a2b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a2b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a2b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a2ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a2be:	e885 0003 	stmia.w	r5, {r0, r1}
 800a2c2:	1d33      	adds	r3, r6, #4
 800a2c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a2c6:	6838      	ldr	r0, [r7, #0]
 800a2c8:	f003 f8f8 	bl	800d4bc <USB_DevInit>
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d005      	beq.n	800a2de <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2202      	movs	r2, #2
 800a2d6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800a2da:	2301      	movs	r3, #1
 800a2dc:	e00d      	b.n	800a2fa <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	2201      	movs	r2, #1
 800a2ea:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	f004 f8ed 	bl	800e4d2 <USB_DevDisconnect>

  return HAL_OK;
 800a2f8:	2300      	movs	r3, #0
}
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	3714      	adds	r7, #20
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a302 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800a302:	b580      	push	{r7, lr}
 800a304:	b084      	sub	sp, #16
 800a306:	af00      	add	r7, sp, #0
 800a308:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a316:	2b01      	cmp	r3, #1
 800a318:	d101      	bne.n	800a31e <HAL_PCD_Start+0x1c>
 800a31a:	2302      	movs	r3, #2
 800a31c:	e020      	b.n	800a360 <HAL_PCD_Start+0x5e>
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2201      	movs	r2, #1
 800a322:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a32a:	2b01      	cmp	r3, #1
 800a32c:	d109      	bne.n	800a342 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800a332:	2b01      	cmp	r3, #1
 800a334:	d005      	beq.n	800a342 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a33a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	4618      	mov	r0, r3
 800a348:	f004 f8ab 	bl	800e4a2 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	4618      	mov	r0, r3
 800a352:	f003 f867 	bl	800d424 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2200      	movs	r2, #0
 800a35a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800a35e:	2300      	movs	r3, #0
}
 800a360:	4618      	mov	r0, r3
 800a362:	3710      	adds	r7, #16
 800a364:	46bd      	mov	sp, r7
 800a366:	bd80      	pop	{r7, pc}

0800a368 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800a368:	b590      	push	{r4, r7, lr}
 800a36a:	b08d      	sub	sp, #52	; 0x34
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a376:	6a3b      	ldr	r3, [r7, #32]
 800a378:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	4618      	mov	r0, r3
 800a380:	f004 f952 	bl	800e628 <USB_GetMode>
 800a384:	4603      	mov	r3, r0
 800a386:	2b00      	cmp	r3, #0
 800a388:	f040 838e 	bne.w	800aaa8 <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	4618      	mov	r0, r3
 800a392:	f004 f8b6 	bl	800e502 <USB_ReadInterrupts>
 800a396:	4603      	mov	r3, r0
 800a398:	2b00      	cmp	r3, #0
 800a39a:	f000 8384 	beq.w	800aaa6 <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	f004 f8ad 	bl	800e502 <USB_ReadInterrupts>
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	f003 0302 	and.w	r3, r3, #2
 800a3ae:	2b02      	cmp	r3, #2
 800a3b0:	d107      	bne.n	800a3c2 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	695a      	ldr	r2, [r3, #20]
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f002 0202 	and.w	r2, r2, #2
 800a3c0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	f004 f89b 	bl	800e502 <USB_ReadInterrupts>
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a3d2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a3d6:	d17b      	bne.n	800a4d0 <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 800a3d8:	2300      	movs	r3, #0
 800a3da:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	f004 f8a1 	bl	800e528 <USB_ReadDevAllOutEpInterrupt>
 800a3e6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800a3e8:	e06f      	b.n	800a4ca <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 800a3ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ec:	f003 0301 	and.w	r3, r3, #1
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d064      	beq.n	800a4be <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3fa:	b2d2      	uxtb	r2, r2
 800a3fc:	4611      	mov	r1, r2
 800a3fe:	4618      	mov	r0, r3
 800a400:	f004 f8c6 	bl	800e590 <USB_ReadDevOutEPInterrupt>
 800a404:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800a406:	69bb      	ldr	r3, [r7, #24]
 800a408:	f003 0301 	and.w	r3, r3, #1
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d00c      	beq.n	800a42a <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800a410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a412:	015a      	lsls	r2, r3, #5
 800a414:	69fb      	ldr	r3, [r7, #28]
 800a416:	4413      	add	r3, r2
 800a418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a41c:	461a      	mov	r2, r3
 800a41e:	2301      	movs	r3, #1
 800a420:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800a422:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a424:	6878      	ldr	r0, [r7, #4]
 800a426:	f000 fe0d 	bl	800b044 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800a42a:	69bb      	ldr	r3, [r7, #24]
 800a42c:	f003 0308 	and.w	r3, r3, #8
 800a430:	2b00      	cmp	r3, #0
 800a432:	d00c      	beq.n	800a44e <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800a434:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a436:	6878      	ldr	r0, [r7, #4]
 800a438:	f000 ff0c 	bl	800b254 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800a43c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a43e:	015a      	lsls	r2, r3, #5
 800a440:	69fb      	ldr	r3, [r7, #28]
 800a442:	4413      	add	r3, r2
 800a444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a448:	461a      	mov	r2, r3
 800a44a:	2308      	movs	r3, #8
 800a44c:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800a44e:	69bb      	ldr	r3, [r7, #24]
 800a450:	f003 0310 	and.w	r3, r3, #16
 800a454:	2b00      	cmp	r3, #0
 800a456:	d008      	beq.n	800a46a <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800a458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a45a:	015a      	lsls	r2, r3, #5
 800a45c:	69fb      	ldr	r3, [r7, #28]
 800a45e:	4413      	add	r3, r2
 800a460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a464:	461a      	mov	r2, r3
 800a466:	2310      	movs	r3, #16
 800a468:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a46a:	69bb      	ldr	r3, [r7, #24]
 800a46c:	f003 0320 	and.w	r3, r3, #32
 800a470:	2b00      	cmp	r3, #0
 800a472:	d015      	beq.n	800a4a0 <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	691b      	ldr	r3, [r3, #16]
 800a478:	2b01      	cmp	r3, #1
 800a47a:	d108      	bne.n	800a48e <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	6818      	ldr	r0, [r3, #0]
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a486:	461a      	mov	r2, r3
 800a488:	2101      	movs	r1, #1
 800a48a:	f004 f911 	bl	800e6b0 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a48e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a490:	015a      	lsls	r2, r3, #5
 800a492:	69fb      	ldr	r3, [r7, #28]
 800a494:	4413      	add	r3, r2
 800a496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a49a:	461a      	mov	r2, r3
 800a49c:	2320      	movs	r3, #32
 800a49e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800a4a0:	69bb      	ldr	r3, [r7, #24]
 800a4a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d009      	beq.n	800a4be <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800a4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ac:	015a      	lsls	r2, r3, #5
 800a4ae:	69fb      	ldr	r3, [r7, #28]
 800a4b0:	4413      	add	r3, r2
 800a4b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4b6:	461a      	mov	r2, r3
 800a4b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a4bc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800a4be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4c0:	3301      	adds	r3, #1
 800a4c2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800a4c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4c6:	085b      	lsrs	r3, r3, #1
 800a4c8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800a4ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d18c      	bne.n	800a3ea <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	f004 f814 	bl	800e502 <USB_ReadInterrupts>
 800a4da:	4603      	mov	r3, r0
 800a4dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a4e0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a4e4:	f040 80c4 	bne.w	800a670 <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	f004 f835 	bl	800e55c <USB_ReadDevAllInEpInterrupt>
 800a4f2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800a4f8:	e0b6      	b.n	800a668 <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800a4fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4fc:	f003 0301 	and.w	r3, r3, #1
 800a500:	2b00      	cmp	r3, #0
 800a502:	f000 80ab 	beq.w	800a65c <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a50c:	b2d2      	uxtb	r2, r2
 800a50e:	4611      	mov	r1, r2
 800a510:	4618      	mov	r0, r3
 800a512:	f004 f85b 	bl	800e5cc <USB_ReadDevInEPInterrupt>
 800a516:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800a518:	69bb      	ldr	r3, [r7, #24]
 800a51a:	f003 0301 	and.w	r3, r3, #1
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d05b      	beq.n	800a5da <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a524:	f003 030f 	and.w	r3, r3, #15
 800a528:	2201      	movs	r2, #1
 800a52a:	fa02 f303 	lsl.w	r3, r2, r3
 800a52e:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a530:	69fb      	ldr	r3, [r7, #28]
 800a532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a536:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a538:	697b      	ldr	r3, [r7, #20]
 800a53a:	43db      	mvns	r3, r3
 800a53c:	69f9      	ldr	r1, [r7, #28]
 800a53e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a542:	4013      	ands	r3, r2
 800a544:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800a546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a548:	015a      	lsls	r2, r3, #5
 800a54a:	69fb      	ldr	r3, [r7, #28]
 800a54c:	4413      	add	r3, r2
 800a54e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a552:	461a      	mov	r2, r3
 800a554:	2301      	movs	r3, #1
 800a556:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	691b      	ldr	r3, [r3, #16]
 800a55c:	2b01      	cmp	r3, #1
 800a55e:	d11b      	bne.n	800a598 <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800a560:	6879      	ldr	r1, [r7, #4]
 800a562:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a564:	4613      	mov	r3, r2
 800a566:	00db      	lsls	r3, r3, #3
 800a568:	1a9b      	subs	r3, r3, r2
 800a56a:	009b      	lsls	r3, r3, #2
 800a56c:	440b      	add	r3, r1
 800a56e:	3348      	adds	r3, #72	; 0x48
 800a570:	6819      	ldr	r1, [r3, #0]
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a576:	4613      	mov	r3, r2
 800a578:	00db      	lsls	r3, r3, #3
 800a57a:	1a9b      	subs	r3, r3, r2
 800a57c:	009b      	lsls	r3, r3, #2
 800a57e:	4403      	add	r3, r0
 800a580:	3344      	adds	r3, #68	; 0x44
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	4419      	add	r1, r3
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a58a:	4613      	mov	r3, r2
 800a58c:	00db      	lsls	r3, r3, #3
 800a58e:	1a9b      	subs	r3, r3, r2
 800a590:	009b      	lsls	r3, r3, #2
 800a592:	4403      	add	r3, r0
 800a594:	3348      	adds	r3, #72	; 0x48
 800a596:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800a598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a59a:	b2db      	uxtb	r3, r3
 800a59c:	4619      	mov	r1, r3
 800a59e:	6878      	ldr	r0, [r7, #4]
 800a5a0:	f009 f8a5 	bl	80136ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	691b      	ldr	r3, [r3, #16]
 800a5a8:	2b01      	cmp	r3, #1
 800a5aa:	d116      	bne.n	800a5da <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800a5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d113      	bne.n	800a5da <HAL_PCD_IRQHandler+0x272>
 800a5b2:	6879      	ldr	r1, [r7, #4]
 800a5b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5b6:	4613      	mov	r3, r2
 800a5b8:	00db      	lsls	r3, r3, #3
 800a5ba:	1a9b      	subs	r3, r3, r2
 800a5bc:	009b      	lsls	r3, r3, #2
 800a5be:	440b      	add	r3, r1
 800a5c0:	3350      	adds	r3, #80	; 0x50
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d108      	bne.n	800a5da <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	6818      	ldr	r0, [r3, #0]
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a5d2:	461a      	mov	r2, r3
 800a5d4:	2101      	movs	r1, #1
 800a5d6:	f004 f86b 	bl	800e6b0 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800a5da:	69bb      	ldr	r3, [r7, #24]
 800a5dc:	f003 0308 	and.w	r3, r3, #8
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d008      	beq.n	800a5f6 <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800a5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5e6:	015a      	lsls	r2, r3, #5
 800a5e8:	69fb      	ldr	r3, [r7, #28]
 800a5ea:	4413      	add	r3, r2
 800a5ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5f0:	461a      	mov	r2, r3
 800a5f2:	2308      	movs	r3, #8
 800a5f4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800a5f6:	69bb      	ldr	r3, [r7, #24]
 800a5f8:	f003 0310 	and.w	r3, r3, #16
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d008      	beq.n	800a612 <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800a600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a602:	015a      	lsls	r2, r3, #5
 800a604:	69fb      	ldr	r3, [r7, #28]
 800a606:	4413      	add	r3, r2
 800a608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a60c:	461a      	mov	r2, r3
 800a60e:	2310      	movs	r3, #16
 800a610:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800a612:	69bb      	ldr	r3, [r7, #24]
 800a614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d008      	beq.n	800a62e <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800a61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a61e:	015a      	lsls	r2, r3, #5
 800a620:	69fb      	ldr	r3, [r7, #28]
 800a622:	4413      	add	r3, r2
 800a624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a628:	461a      	mov	r2, r3
 800a62a:	2340      	movs	r3, #64	; 0x40
 800a62c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800a62e:	69bb      	ldr	r3, [r7, #24]
 800a630:	f003 0302 	and.w	r3, r3, #2
 800a634:	2b00      	cmp	r3, #0
 800a636:	d008      	beq.n	800a64a <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800a638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a63a:	015a      	lsls	r2, r3, #5
 800a63c:	69fb      	ldr	r3, [r7, #28]
 800a63e:	4413      	add	r3, r2
 800a640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a644:	461a      	mov	r2, r3
 800a646:	2302      	movs	r3, #2
 800a648:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800a64a:	69bb      	ldr	r3, [r7, #24]
 800a64c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a650:	2b00      	cmp	r3, #0
 800a652:	d003      	beq.n	800a65c <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800a654:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a656:	6878      	ldr	r0, [r7, #4]
 800a658:	f000 fc67 	bl	800af2a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800a65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a65e:	3301      	adds	r3, #1
 800a660:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800a662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a664:	085b      	lsrs	r3, r3, #1
 800a666:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800a668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	f47f af45 	bne.w	800a4fa <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	4618      	mov	r0, r3
 800a676:	f003 ff44 	bl	800e502 <USB_ReadInterrupts>
 800a67a:	4603      	mov	r3, r0
 800a67c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a680:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a684:	d122      	bne.n	800a6cc <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a686:	69fb      	ldr	r3, [r7, #28]
 800a688:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a68c:	685b      	ldr	r3, [r3, #4]
 800a68e:	69fa      	ldr	r2, [r7, #28]
 800a690:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a694:	f023 0301 	bic.w	r3, r3, #1
 800a698:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800a6a0:	2b01      	cmp	r3, #1
 800a6a2:	d108      	bne.n	800a6b6 <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800a6ac:	2100      	movs	r1, #0
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f000 fe88 	bl	800b3c4 <HAL_PCDEx_LPM_Callback>
 800a6b4:	e002      	b.n	800a6bc <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800a6b6:	6878      	ldr	r0, [r7, #4]
 800a6b8:	f009 f890 	bl	80137dc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	695a      	ldr	r2, [r3, #20]
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800a6ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	f003 ff16 	bl	800e502 <USB_ReadInterrupts>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a6dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a6e0:	d112      	bne.n	800a708 <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800a6e2:	69fb      	ldr	r3, [r7, #28]
 800a6e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6e8:	689b      	ldr	r3, [r3, #8]
 800a6ea:	f003 0301 	and.w	r3, r3, #1
 800a6ee:	2b01      	cmp	r3, #1
 800a6f0:	d102      	bne.n	800a6f8 <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	f009 f84c 	bl	8013790 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	695a      	ldr	r2, [r3, #20]
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800a706:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	4618      	mov	r0, r3
 800a70e:	f003 fef8 	bl	800e502 <USB_ReadInterrupts>
 800a712:	4603      	mov	r3, r0
 800a714:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a718:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a71c:	f040 80a7 	bne.w	800a86e <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a720:	69fb      	ldr	r3, [r7, #28]
 800a722:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a726:	685b      	ldr	r3, [r3, #4]
 800a728:	69fa      	ldr	r2, [r7, #28]
 800a72a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a72e:	f023 0301 	bic.w	r3, r3, #1
 800a732:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	2110      	movs	r1, #16
 800a73a:	4618      	mov	r0, r3
 800a73c:	f003 f830 	bl	800d7a0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a740:	2300      	movs	r3, #0
 800a742:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a744:	e036      	b.n	800a7b4 <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800a746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a748:	015a      	lsls	r2, r3, #5
 800a74a:	69fb      	ldr	r3, [r7, #28]
 800a74c:	4413      	add	r3, r2
 800a74e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a752:	461a      	mov	r2, r3
 800a754:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a758:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a75a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a75c:	015a      	lsls	r2, r3, #5
 800a75e:	69fb      	ldr	r3, [r7, #28]
 800a760:	4413      	add	r3, r2
 800a762:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a76a:	0151      	lsls	r1, r2, #5
 800a76c:	69fa      	ldr	r2, [r7, #28]
 800a76e:	440a      	add	r2, r1
 800a770:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a774:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a778:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800a77a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a77c:	015a      	lsls	r2, r3, #5
 800a77e:	69fb      	ldr	r3, [r7, #28]
 800a780:	4413      	add	r3, r2
 800a782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a786:	461a      	mov	r2, r3
 800a788:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a78c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a78e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a790:	015a      	lsls	r2, r3, #5
 800a792:	69fb      	ldr	r3, [r7, #28]
 800a794:	4413      	add	r3, r2
 800a796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a79e:	0151      	lsls	r1, r2, #5
 800a7a0:	69fa      	ldr	r2, [r7, #28]
 800a7a2:	440a      	add	r2, r1
 800a7a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a7a8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a7ac:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a7ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7b0:	3301      	adds	r3, #1
 800a7b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	685b      	ldr	r3, [r3, #4]
 800a7b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a7ba:	429a      	cmp	r2, r3
 800a7bc:	d3c3      	bcc.n	800a746 <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800a7be:	69fb      	ldr	r3, [r7, #28]
 800a7c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7c4:	69db      	ldr	r3, [r3, #28]
 800a7c6:	69fa      	ldr	r2, [r7, #28]
 800a7c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a7cc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800a7d0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d016      	beq.n	800a808 <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800a7da:	69fb      	ldr	r3, [r7, #28]
 800a7dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a7e4:	69fa      	ldr	r2, [r7, #28]
 800a7e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a7ea:	f043 030b 	orr.w	r3, r3, #11
 800a7ee:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800a7f2:	69fb      	ldr	r3, [r7, #28]
 800a7f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7fa:	69fa      	ldr	r2, [r7, #28]
 800a7fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a800:	f043 030b 	orr.w	r3, r3, #11
 800a804:	6453      	str	r3, [r2, #68]	; 0x44
 800a806:	e015      	b.n	800a834 <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800a808:	69fb      	ldr	r3, [r7, #28]
 800a80a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a80e:	695b      	ldr	r3, [r3, #20]
 800a810:	69fa      	ldr	r2, [r7, #28]
 800a812:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a816:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a81a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800a81e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800a820:	69fb      	ldr	r3, [r7, #28]
 800a822:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a826:	691b      	ldr	r3, [r3, #16]
 800a828:	69fa      	ldr	r2, [r7, #28]
 800a82a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a82e:	f043 030b 	orr.w	r3, r3, #11
 800a832:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800a834:	69fb      	ldr	r3, [r7, #28]
 800a836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	69fa      	ldr	r2, [r7, #28]
 800a83e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a842:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a846:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	6818      	ldr	r0, [r3, #0]
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	691b      	ldr	r3, [r3, #16]
 800a850:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a858:	461a      	mov	r2, r3
 800a85a:	f003 ff29 	bl	800e6b0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	695a      	ldr	r2, [r3, #20]
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800a86c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	4618      	mov	r0, r3
 800a874:	f003 fe45 	bl	800e502 <USB_ReadInterrupts>
 800a878:	4603      	mov	r3, r0
 800a87a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a87e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a882:	d124      	bne.n	800a8ce <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	4618      	mov	r0, r3
 800a88a:	f003 fedb 	bl	800e644 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	4618      	mov	r0, r3
 800a894:	f002 ffe5 	bl	800d862 <USB_GetDevSpeed>
 800a898:	4603      	mov	r3, r0
 800a89a:	461a      	mov	r2, r3
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681c      	ldr	r4, [r3, #0]
 800a8a4:	f001 f9c8 	bl	800bc38 <HAL_RCC_GetHCLKFreq>
 800a8a8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a8ae:	b2db      	uxtb	r3, r3
 800a8b0:	461a      	mov	r2, r3
 800a8b2:	4620      	mov	r0, r4
 800a8b4:	f002 fd14 	bl	800d2e0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800a8b8:	6878      	ldr	r0, [r7, #4]
 800a8ba:	f008 ff40 	bl	801373e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	695a      	ldr	r2, [r3, #20]
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800a8cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	f003 fe15 	bl	800e502 <USB_ReadInterrupts>
 800a8d8:	4603      	mov	r3, r0
 800a8da:	f003 0310 	and.w	r3, r3, #16
 800a8de:	2b10      	cmp	r3, #16
 800a8e0:	d161      	bne.n	800a9a6 <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	699a      	ldr	r2, [r3, #24]
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	f022 0210 	bic.w	r2, r2, #16
 800a8f0:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800a8f2:	6a3b      	ldr	r3, [r7, #32]
 800a8f4:	6a1b      	ldr	r3, [r3, #32]
 800a8f6:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800a8f8:	693b      	ldr	r3, [r7, #16]
 800a8fa:	f003 020f 	and.w	r2, r3, #15
 800a8fe:	4613      	mov	r3, r2
 800a900:	00db      	lsls	r3, r3, #3
 800a902:	1a9b      	subs	r3, r3, r2
 800a904:	009b      	lsls	r3, r3, #2
 800a906:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a90a:	687a      	ldr	r2, [r7, #4]
 800a90c:	4413      	add	r3, r2
 800a90e:	3304      	adds	r3, #4
 800a910:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800a912:	693b      	ldr	r3, [r7, #16]
 800a914:	0c5b      	lsrs	r3, r3, #17
 800a916:	f003 030f 	and.w	r3, r3, #15
 800a91a:	2b02      	cmp	r3, #2
 800a91c:	d124      	bne.n	800a968 <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800a91e:	693a      	ldr	r2, [r7, #16]
 800a920:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800a924:	4013      	ands	r3, r2
 800a926:	2b00      	cmp	r3, #0
 800a928:	d035      	beq.n	800a996 <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800a92e:	693b      	ldr	r3, [r7, #16]
 800a930:	091b      	lsrs	r3, r3, #4
 800a932:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800a934:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a938:	b29b      	uxth	r3, r3
 800a93a:	461a      	mov	r2, r3
 800a93c:	6a38      	ldr	r0, [r7, #32]
 800a93e:	f003 fc8d 	bl	800e25c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	68da      	ldr	r2, [r3, #12]
 800a946:	693b      	ldr	r3, [r7, #16]
 800a948:	091b      	lsrs	r3, r3, #4
 800a94a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a94e:	441a      	add	r2, r3
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	699a      	ldr	r2, [r3, #24]
 800a958:	693b      	ldr	r3, [r7, #16]
 800a95a:	091b      	lsrs	r3, r3, #4
 800a95c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a960:	441a      	add	r2, r3
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	619a      	str	r2, [r3, #24]
 800a966:	e016      	b.n	800a996 <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800a968:	693b      	ldr	r3, [r7, #16]
 800a96a:	0c5b      	lsrs	r3, r3, #17
 800a96c:	f003 030f 	and.w	r3, r3, #15
 800a970:	2b06      	cmp	r3, #6
 800a972:	d110      	bne.n	800a996 <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a97a:	2208      	movs	r2, #8
 800a97c:	4619      	mov	r1, r3
 800a97e:	6a38      	ldr	r0, [r7, #32]
 800a980:	f003 fc6c 	bl	800e25c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	699a      	ldr	r2, [r3, #24]
 800a988:	693b      	ldr	r3, [r7, #16]
 800a98a:	091b      	lsrs	r3, r3, #4
 800a98c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a990:	441a      	add	r2, r3
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	699a      	ldr	r2, [r3, #24]
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	f042 0210 	orr.w	r2, r2, #16
 800a9a4:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	f003 fda9 	bl	800e502 <USB_ReadInterrupts>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	f003 0308 	and.w	r3, r3, #8
 800a9b6:	2b08      	cmp	r3, #8
 800a9b8:	d10a      	bne.n	800a9d0 <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800a9ba:	6878      	ldr	r0, [r7, #4]
 800a9bc:	f008 feb1 	bl	8013722 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	695a      	ldr	r2, [r3, #20]
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	f002 0208 	and.w	r2, r2, #8
 800a9ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	f003 fd94 	bl	800e502 <USB_ReadInterrupts>
 800a9da:	4603      	mov	r3, r0
 800a9dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a9e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a9e4:	d10f      	bne.n	800aa06 <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800a9ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ec:	b2db      	uxtb	r3, r3
 800a9ee:	4619      	mov	r1, r3
 800a9f0:	6878      	ldr	r0, [r7, #4]
 800a9f2:	f008 ff13 	bl	801381c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	695a      	ldr	r2, [r3, #20]
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800aa04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f003 fd79 	bl	800e502 <USB_ReadInterrupts>
 800aa10:	4603      	mov	r3, r0
 800aa12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800aa16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aa1a:	d10f      	bne.n	800aa3c <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800aa20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa22:	b2db      	uxtb	r3, r3
 800aa24:	4619      	mov	r1, r3
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f008 fee6 	bl	80137f8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	695a      	ldr	r2, [r3, #20]
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800aa3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	4618      	mov	r0, r3
 800aa42:	f003 fd5e 	bl	800e502 <USB_ReadInterrupts>
 800aa46:	4603      	mov	r3, r0
 800aa48:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800aa4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa50:	d10a      	bne.n	800aa68 <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800aa52:	6878      	ldr	r0, [r7, #4]
 800aa54:	f008 fef4 	bl	8013840 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	695a      	ldr	r2, [r3, #20]
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800aa66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	f003 fd48 	bl	800e502 <USB_ReadInterrupts>
 800aa72:	4603      	mov	r3, r0
 800aa74:	f003 0304 	and.w	r3, r3, #4
 800aa78:	2b04      	cmp	r3, #4
 800aa7a:	d115      	bne.n	800aaa8 <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	685b      	ldr	r3, [r3, #4]
 800aa82:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800aa84:	693b      	ldr	r3, [r7, #16]
 800aa86:	f003 0304 	and.w	r3, r3, #4
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d002      	beq.n	800aa94 <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f008 fee4 	bl	801385c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	6859      	ldr	r1, [r3, #4]
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	693a      	ldr	r2, [r7, #16]
 800aaa0:	430a      	orrs	r2, r1
 800aaa2:	605a      	str	r2, [r3, #4]
 800aaa4:	e000      	b.n	800aaa8 <HAL_PCD_IRQHandler+0x740>
      return;
 800aaa6:	bf00      	nop
    }
  }
}
 800aaa8:	3734      	adds	r7, #52	; 0x34
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bd90      	pop	{r4, r7, pc}

0800aaae <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800aaae:	b580      	push	{r7, lr}
 800aab0:	b082      	sub	sp, #8
 800aab2:	af00      	add	r7, sp, #0
 800aab4:	6078      	str	r0, [r7, #4]
 800aab6:	460b      	mov	r3, r1
 800aab8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800aac0:	2b01      	cmp	r3, #1
 800aac2:	d101      	bne.n	800aac8 <HAL_PCD_SetAddress+0x1a>
 800aac4:	2302      	movs	r3, #2
 800aac6:	e013      	b.n	800aaf0 <HAL_PCD_SetAddress+0x42>
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2201      	movs	r2, #1
 800aacc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	78fa      	ldrb	r2, [r7, #3]
 800aad4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	78fa      	ldrb	r2, [r7, #3]
 800aade:	4611      	mov	r1, r2
 800aae0:	4618      	mov	r0, r3
 800aae2:	f003 fcb8 	bl	800e456 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2200      	movs	r2, #0
 800aaea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800aaee:	2300      	movs	r3, #0
}
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	3708      	adds	r7, #8
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	bd80      	pop	{r7, pc}

0800aaf8 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b084      	sub	sp, #16
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
 800ab00:	4608      	mov	r0, r1
 800ab02:	4611      	mov	r1, r2
 800ab04:	461a      	mov	r2, r3
 800ab06:	4603      	mov	r3, r0
 800ab08:	70fb      	strb	r3, [r7, #3]
 800ab0a:	460b      	mov	r3, r1
 800ab0c:	803b      	strh	r3, [r7, #0]
 800ab0e:	4613      	mov	r3, r2
 800ab10:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800ab12:	2300      	movs	r3, #0
 800ab14:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800ab16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	da0f      	bge.n	800ab3e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ab1e:	78fb      	ldrb	r3, [r7, #3]
 800ab20:	f003 020f 	and.w	r2, r3, #15
 800ab24:	4613      	mov	r3, r2
 800ab26:	00db      	lsls	r3, r3, #3
 800ab28:	1a9b      	subs	r3, r3, r2
 800ab2a:	009b      	lsls	r3, r3, #2
 800ab2c:	3338      	adds	r3, #56	; 0x38
 800ab2e:	687a      	ldr	r2, [r7, #4]
 800ab30:	4413      	add	r3, r2
 800ab32:	3304      	adds	r3, #4
 800ab34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	2201      	movs	r2, #1
 800ab3a:	705a      	strb	r2, [r3, #1]
 800ab3c:	e00f      	b.n	800ab5e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ab3e:	78fb      	ldrb	r3, [r7, #3]
 800ab40:	f003 020f 	and.w	r2, r3, #15
 800ab44:	4613      	mov	r3, r2
 800ab46:	00db      	lsls	r3, r3, #3
 800ab48:	1a9b      	subs	r3, r3, r2
 800ab4a:	009b      	lsls	r3, r3, #2
 800ab4c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800ab50:	687a      	ldr	r2, [r7, #4]
 800ab52:	4413      	add	r3, r2
 800ab54:	3304      	adds	r3, #4
 800ab56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800ab5e:	78fb      	ldrb	r3, [r7, #3]
 800ab60:	f003 030f 	and.w	r3, r3, #15
 800ab64:	b2da      	uxtb	r2, r3
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800ab6a:	883a      	ldrh	r2, [r7, #0]
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	78ba      	ldrb	r2, [r7, #2]
 800ab74:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	785b      	ldrb	r3, [r3, #1]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d004      	beq.n	800ab88 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	781b      	ldrb	r3, [r3, #0]
 800ab82:	b29a      	uxth	r2, r3
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800ab88:	78bb      	ldrb	r3, [r7, #2]
 800ab8a:	2b02      	cmp	r3, #2
 800ab8c:	d102      	bne.n	800ab94 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	2200      	movs	r2, #0
 800ab92:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800ab9a:	2b01      	cmp	r3, #1
 800ab9c:	d101      	bne.n	800aba2 <HAL_PCD_EP_Open+0xaa>
 800ab9e:	2302      	movs	r3, #2
 800aba0:	e00e      	b.n	800abc0 <HAL_PCD_EP_Open+0xc8>
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	2201      	movs	r2, #1
 800aba6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	68f9      	ldr	r1, [r7, #12]
 800abb0:	4618      	mov	r0, r3
 800abb2:	f002 fe7b 	bl	800d8ac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2200      	movs	r2, #0
 800abba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800abbe:	7afb      	ldrb	r3, [r7, #11]
}
 800abc0:	4618      	mov	r0, r3
 800abc2:	3710      	adds	r7, #16
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bd80      	pop	{r7, pc}

0800abc8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b084      	sub	sp, #16
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
 800abd0:	460b      	mov	r3, r1
 800abd2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800abd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	da0f      	bge.n	800abfc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800abdc:	78fb      	ldrb	r3, [r7, #3]
 800abde:	f003 020f 	and.w	r2, r3, #15
 800abe2:	4613      	mov	r3, r2
 800abe4:	00db      	lsls	r3, r3, #3
 800abe6:	1a9b      	subs	r3, r3, r2
 800abe8:	009b      	lsls	r3, r3, #2
 800abea:	3338      	adds	r3, #56	; 0x38
 800abec:	687a      	ldr	r2, [r7, #4]
 800abee:	4413      	add	r3, r2
 800abf0:	3304      	adds	r3, #4
 800abf2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	2201      	movs	r2, #1
 800abf8:	705a      	strb	r2, [r3, #1]
 800abfa:	e00f      	b.n	800ac1c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800abfc:	78fb      	ldrb	r3, [r7, #3]
 800abfe:	f003 020f 	and.w	r2, r3, #15
 800ac02:	4613      	mov	r3, r2
 800ac04:	00db      	lsls	r3, r3, #3
 800ac06:	1a9b      	subs	r3, r3, r2
 800ac08:	009b      	lsls	r3, r3, #2
 800ac0a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800ac0e:	687a      	ldr	r2, [r7, #4]
 800ac10:	4413      	add	r3, r2
 800ac12:	3304      	adds	r3, #4
 800ac14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	2200      	movs	r2, #0
 800ac1a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800ac1c:	78fb      	ldrb	r3, [r7, #3]
 800ac1e:	f003 030f 	and.w	r3, r3, #15
 800ac22:	b2da      	uxtb	r2, r3
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800ac2e:	2b01      	cmp	r3, #1
 800ac30:	d101      	bne.n	800ac36 <HAL_PCD_EP_Close+0x6e>
 800ac32:	2302      	movs	r3, #2
 800ac34:	e00e      	b.n	800ac54 <HAL_PCD_EP_Close+0x8c>
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2201      	movs	r2, #1
 800ac3a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	68f9      	ldr	r1, [r7, #12]
 800ac44:	4618      	mov	r0, r3
 800ac46:	f002 feb9 	bl	800d9bc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800ac52:	2300      	movs	r3, #0
}
 800ac54:	4618      	mov	r0, r3
 800ac56:	3710      	adds	r7, #16
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	bd80      	pop	{r7, pc}

0800ac5c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b086      	sub	sp, #24
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	60f8      	str	r0, [r7, #12]
 800ac64:	607a      	str	r2, [r7, #4]
 800ac66:	603b      	str	r3, [r7, #0]
 800ac68:	460b      	mov	r3, r1
 800ac6a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ac6c:	7afb      	ldrb	r3, [r7, #11]
 800ac6e:	f003 020f 	and.w	r2, r3, #15
 800ac72:	4613      	mov	r3, r2
 800ac74:	00db      	lsls	r3, r3, #3
 800ac76:	1a9b      	subs	r3, r3, r2
 800ac78:	009b      	lsls	r3, r3, #2
 800ac7a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800ac7e:	68fa      	ldr	r2, [r7, #12]
 800ac80:	4413      	add	r3, r2
 800ac82:	3304      	adds	r3, #4
 800ac84:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800ac86:	697b      	ldr	r3, [r7, #20]
 800ac88:	687a      	ldr	r2, [r7, #4]
 800ac8a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800ac8c:	697b      	ldr	r3, [r7, #20]
 800ac8e:	683a      	ldr	r2, [r7, #0]
 800ac90:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800ac92:	697b      	ldr	r3, [r7, #20]
 800ac94:	2200      	movs	r2, #0
 800ac96:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800ac98:	697b      	ldr	r3, [r7, #20]
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ac9e:	7afb      	ldrb	r3, [r7, #11]
 800aca0:	f003 030f 	and.w	r3, r3, #15
 800aca4:	b2da      	uxtb	r2, r3
 800aca6:	697b      	ldr	r3, [r7, #20]
 800aca8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	691b      	ldr	r3, [r3, #16]
 800acae:	2b01      	cmp	r3, #1
 800acb0:	d102      	bne.n	800acb8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800acb2:	687a      	ldr	r2, [r7, #4]
 800acb4:	697b      	ldr	r3, [r7, #20]
 800acb6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800acb8:	7afb      	ldrb	r3, [r7, #11]
 800acba:	f003 030f 	and.w	r3, r3, #15
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d109      	bne.n	800acd6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	6818      	ldr	r0, [r3, #0]
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	691b      	ldr	r3, [r3, #16]
 800acca:	b2db      	uxtb	r3, r3
 800accc:	461a      	mov	r2, r3
 800acce:	6979      	ldr	r1, [r7, #20]
 800acd0:	f003 f93c 	bl	800df4c <USB_EP0StartXfer>
 800acd4:	e008      	b.n	800ace8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	6818      	ldr	r0, [r3, #0]
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	691b      	ldr	r3, [r3, #16]
 800acde:	b2db      	uxtb	r3, r3
 800ace0:	461a      	mov	r2, r3
 800ace2:	6979      	ldr	r1, [r7, #20]
 800ace4:	f002 feee 	bl	800dac4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800ace8:	2300      	movs	r3, #0
}
 800acea:	4618      	mov	r0, r3
 800acec:	3718      	adds	r7, #24
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}

0800acf2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800acf2:	b480      	push	{r7}
 800acf4:	b083      	sub	sp, #12
 800acf6:	af00      	add	r7, sp, #0
 800acf8:	6078      	str	r0, [r7, #4]
 800acfa:	460b      	mov	r3, r1
 800acfc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800acfe:	78fb      	ldrb	r3, [r7, #3]
 800ad00:	f003 020f 	and.w	r2, r3, #15
 800ad04:	6879      	ldr	r1, [r7, #4]
 800ad06:	4613      	mov	r3, r2
 800ad08:	00db      	lsls	r3, r3, #3
 800ad0a:	1a9b      	subs	r3, r3, r2
 800ad0c:	009b      	lsls	r3, r3, #2
 800ad0e:	440b      	add	r3, r1
 800ad10:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800ad14:	681b      	ldr	r3, [r3, #0]
}
 800ad16:	4618      	mov	r0, r3
 800ad18:	370c      	adds	r7, #12
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad20:	4770      	bx	lr

0800ad22 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800ad22:	b580      	push	{r7, lr}
 800ad24:	b086      	sub	sp, #24
 800ad26:	af00      	add	r7, sp, #0
 800ad28:	60f8      	str	r0, [r7, #12]
 800ad2a:	607a      	str	r2, [r7, #4]
 800ad2c:	603b      	str	r3, [r7, #0]
 800ad2e:	460b      	mov	r3, r1
 800ad30:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ad32:	7afb      	ldrb	r3, [r7, #11]
 800ad34:	f003 020f 	and.w	r2, r3, #15
 800ad38:	4613      	mov	r3, r2
 800ad3a:	00db      	lsls	r3, r3, #3
 800ad3c:	1a9b      	subs	r3, r3, r2
 800ad3e:	009b      	lsls	r3, r3, #2
 800ad40:	3338      	adds	r3, #56	; 0x38
 800ad42:	68fa      	ldr	r2, [r7, #12]
 800ad44:	4413      	add	r3, r2
 800ad46:	3304      	adds	r3, #4
 800ad48:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800ad4a:	697b      	ldr	r3, [r7, #20]
 800ad4c:	687a      	ldr	r2, [r7, #4]
 800ad4e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800ad50:	697b      	ldr	r3, [r7, #20]
 800ad52:	683a      	ldr	r2, [r7, #0]
 800ad54:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800ad56:	697b      	ldr	r3, [r7, #20]
 800ad58:	2200      	movs	r2, #0
 800ad5a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800ad5c:	697b      	ldr	r3, [r7, #20]
 800ad5e:	2201      	movs	r2, #1
 800ad60:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ad62:	7afb      	ldrb	r3, [r7, #11]
 800ad64:	f003 030f 	and.w	r3, r3, #15
 800ad68:	b2da      	uxtb	r2, r3
 800ad6a:	697b      	ldr	r3, [r7, #20]
 800ad6c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	691b      	ldr	r3, [r3, #16]
 800ad72:	2b01      	cmp	r3, #1
 800ad74:	d102      	bne.n	800ad7c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800ad76:	687a      	ldr	r2, [r7, #4]
 800ad78:	697b      	ldr	r3, [r7, #20]
 800ad7a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800ad7c:	7afb      	ldrb	r3, [r7, #11]
 800ad7e:	f003 030f 	and.w	r3, r3, #15
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d109      	bne.n	800ad9a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	6818      	ldr	r0, [r3, #0]
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	691b      	ldr	r3, [r3, #16]
 800ad8e:	b2db      	uxtb	r3, r3
 800ad90:	461a      	mov	r2, r3
 800ad92:	6979      	ldr	r1, [r7, #20]
 800ad94:	f003 f8da 	bl	800df4c <USB_EP0StartXfer>
 800ad98:	e008      	b.n	800adac <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	6818      	ldr	r0, [r3, #0]
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	691b      	ldr	r3, [r3, #16]
 800ada2:	b2db      	uxtb	r3, r3
 800ada4:	461a      	mov	r2, r3
 800ada6:	6979      	ldr	r1, [r7, #20]
 800ada8:	f002 fe8c 	bl	800dac4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800adac:	2300      	movs	r3, #0
}
 800adae:	4618      	mov	r0, r3
 800adb0:	3718      	adds	r7, #24
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd80      	pop	{r7, pc}

0800adb6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800adb6:	b580      	push	{r7, lr}
 800adb8:	b084      	sub	sp, #16
 800adba:	af00      	add	r7, sp, #0
 800adbc:	6078      	str	r0, [r7, #4]
 800adbe:	460b      	mov	r3, r1
 800adc0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800adc2:	78fb      	ldrb	r3, [r7, #3]
 800adc4:	f003 020f 	and.w	r2, r3, #15
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	685b      	ldr	r3, [r3, #4]
 800adcc:	429a      	cmp	r2, r3
 800adce:	d901      	bls.n	800add4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800add0:	2301      	movs	r3, #1
 800add2:	e050      	b.n	800ae76 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800add4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800add8:	2b00      	cmp	r3, #0
 800adda:	da0f      	bge.n	800adfc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800addc:	78fb      	ldrb	r3, [r7, #3]
 800adde:	f003 020f 	and.w	r2, r3, #15
 800ade2:	4613      	mov	r3, r2
 800ade4:	00db      	lsls	r3, r3, #3
 800ade6:	1a9b      	subs	r3, r3, r2
 800ade8:	009b      	lsls	r3, r3, #2
 800adea:	3338      	adds	r3, #56	; 0x38
 800adec:	687a      	ldr	r2, [r7, #4]
 800adee:	4413      	add	r3, r2
 800adf0:	3304      	adds	r3, #4
 800adf2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	2201      	movs	r2, #1
 800adf8:	705a      	strb	r2, [r3, #1]
 800adfa:	e00d      	b.n	800ae18 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800adfc:	78fa      	ldrb	r2, [r7, #3]
 800adfe:	4613      	mov	r3, r2
 800ae00:	00db      	lsls	r3, r3, #3
 800ae02:	1a9b      	subs	r3, r3, r2
 800ae04:	009b      	lsls	r3, r3, #2
 800ae06:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800ae0a:	687a      	ldr	r2, [r7, #4]
 800ae0c:	4413      	add	r3, r2
 800ae0e:	3304      	adds	r3, #4
 800ae10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	2200      	movs	r2, #0
 800ae16:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	2201      	movs	r2, #1
 800ae1c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ae1e:	78fb      	ldrb	r3, [r7, #3]
 800ae20:	f003 030f 	and.w	r3, r3, #15
 800ae24:	b2da      	uxtb	r2, r3
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800ae30:	2b01      	cmp	r3, #1
 800ae32:	d101      	bne.n	800ae38 <HAL_PCD_EP_SetStall+0x82>
 800ae34:	2302      	movs	r3, #2
 800ae36:	e01e      	b.n	800ae76 <HAL_PCD_EP_SetStall+0xc0>
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2201      	movs	r2, #1
 800ae3c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	68f9      	ldr	r1, [r7, #12]
 800ae46:	4618      	mov	r0, r3
 800ae48:	f003 fa31 	bl	800e2ae <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800ae4c:	78fb      	ldrb	r3, [r7, #3]
 800ae4e:	f003 030f 	and.w	r3, r3, #15
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d10a      	bne.n	800ae6c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	6818      	ldr	r0, [r3, #0]
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	691b      	ldr	r3, [r3, #16]
 800ae5e:	b2d9      	uxtb	r1, r3
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ae66:	461a      	mov	r2, r3
 800ae68:	f003 fc22 	bl	800e6b0 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	2200      	movs	r2, #0
 800ae70:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800ae74:	2300      	movs	r3, #0
}
 800ae76:	4618      	mov	r0, r3
 800ae78:	3710      	adds	r7, #16
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	bd80      	pop	{r7, pc}

0800ae7e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ae7e:	b580      	push	{r7, lr}
 800ae80:	b084      	sub	sp, #16
 800ae82:	af00      	add	r7, sp, #0
 800ae84:	6078      	str	r0, [r7, #4]
 800ae86:	460b      	mov	r3, r1
 800ae88:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800ae8a:	78fb      	ldrb	r3, [r7, #3]
 800ae8c:	f003 020f 	and.w	r2, r3, #15
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	685b      	ldr	r3, [r3, #4]
 800ae94:	429a      	cmp	r2, r3
 800ae96:	d901      	bls.n	800ae9c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800ae98:	2301      	movs	r3, #1
 800ae9a:	e042      	b.n	800af22 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800ae9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	da0f      	bge.n	800aec4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800aea4:	78fb      	ldrb	r3, [r7, #3]
 800aea6:	f003 020f 	and.w	r2, r3, #15
 800aeaa:	4613      	mov	r3, r2
 800aeac:	00db      	lsls	r3, r3, #3
 800aeae:	1a9b      	subs	r3, r3, r2
 800aeb0:	009b      	lsls	r3, r3, #2
 800aeb2:	3338      	adds	r3, #56	; 0x38
 800aeb4:	687a      	ldr	r2, [r7, #4]
 800aeb6:	4413      	add	r3, r2
 800aeb8:	3304      	adds	r3, #4
 800aeba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	2201      	movs	r2, #1
 800aec0:	705a      	strb	r2, [r3, #1]
 800aec2:	e00f      	b.n	800aee4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800aec4:	78fb      	ldrb	r3, [r7, #3]
 800aec6:	f003 020f 	and.w	r2, r3, #15
 800aeca:	4613      	mov	r3, r2
 800aecc:	00db      	lsls	r3, r3, #3
 800aece:	1a9b      	subs	r3, r3, r2
 800aed0:	009b      	lsls	r3, r3, #2
 800aed2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800aed6:	687a      	ldr	r2, [r7, #4]
 800aed8:	4413      	add	r3, r2
 800aeda:	3304      	adds	r3, #4
 800aedc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	2200      	movs	r2, #0
 800aee2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	2200      	movs	r2, #0
 800aee8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800aeea:	78fb      	ldrb	r3, [r7, #3]
 800aeec:	f003 030f 	and.w	r3, r3, #15
 800aef0:	b2da      	uxtb	r2, r3
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800aefc:	2b01      	cmp	r3, #1
 800aefe:	d101      	bne.n	800af04 <HAL_PCD_EP_ClrStall+0x86>
 800af00:	2302      	movs	r3, #2
 800af02:	e00e      	b.n	800af22 <HAL_PCD_EP_ClrStall+0xa4>
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2201      	movs	r2, #1
 800af08:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	68f9      	ldr	r1, [r7, #12]
 800af12:	4618      	mov	r0, r3
 800af14:	f003 fa39 	bl	800e38a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2200      	movs	r2, #0
 800af1c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800af20:	2300      	movs	r3, #0
}
 800af22:	4618      	mov	r0, r3
 800af24:	3710      	adds	r7, #16
 800af26:	46bd      	mov	sp, r7
 800af28:	bd80      	pop	{r7, pc}

0800af2a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800af2a:	b580      	push	{r7, lr}
 800af2c:	b08a      	sub	sp, #40	; 0x28
 800af2e:	af02      	add	r7, sp, #8
 800af30:	6078      	str	r0, [r7, #4]
 800af32:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af3a:	697b      	ldr	r3, [r7, #20]
 800af3c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800af3e:	683a      	ldr	r2, [r7, #0]
 800af40:	4613      	mov	r3, r2
 800af42:	00db      	lsls	r3, r3, #3
 800af44:	1a9b      	subs	r3, r3, r2
 800af46:	009b      	lsls	r3, r3, #2
 800af48:	3338      	adds	r3, #56	; 0x38
 800af4a:	687a      	ldr	r2, [r7, #4]
 800af4c:	4413      	add	r3, r2
 800af4e:	3304      	adds	r3, #4
 800af50:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	699a      	ldr	r2, [r3, #24]
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	695b      	ldr	r3, [r3, #20]
 800af5a:	429a      	cmp	r2, r3
 800af5c:	d901      	bls.n	800af62 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800af5e:	2301      	movs	r3, #1
 800af60:	e06c      	b.n	800b03c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	695a      	ldr	r2, [r3, #20]
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	699b      	ldr	r3, [r3, #24]
 800af6a:	1ad3      	subs	r3, r2, r3
 800af6c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	689b      	ldr	r3, [r3, #8]
 800af72:	69fa      	ldr	r2, [r7, #28]
 800af74:	429a      	cmp	r2, r3
 800af76:	d902      	bls.n	800af7e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	689b      	ldr	r3, [r3, #8]
 800af7c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800af7e:	69fb      	ldr	r3, [r7, #28]
 800af80:	3303      	adds	r3, #3
 800af82:	089b      	lsrs	r3, r3, #2
 800af84:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800af86:	e02b      	b.n	800afe0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	695a      	ldr	r2, [r3, #20]
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	699b      	ldr	r3, [r3, #24]
 800af90:	1ad3      	subs	r3, r2, r3
 800af92:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	689b      	ldr	r3, [r3, #8]
 800af98:	69fa      	ldr	r2, [r7, #28]
 800af9a:	429a      	cmp	r2, r3
 800af9c:	d902      	bls.n	800afa4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	689b      	ldr	r3, [r3, #8]
 800afa2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800afa4:	69fb      	ldr	r3, [r7, #28]
 800afa6:	3303      	adds	r3, #3
 800afa8:	089b      	lsrs	r3, r3, #2
 800afaa:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	68d9      	ldr	r1, [r3, #12]
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	b2da      	uxtb	r2, r3
 800afb4:	69fb      	ldr	r3, [r7, #28]
 800afb6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800afbc:	b2db      	uxtb	r3, r3
 800afbe:	9300      	str	r3, [sp, #0]
 800afc0:	4603      	mov	r3, r0
 800afc2:	6978      	ldr	r0, [r7, #20]
 800afc4:	f003 f915 	bl	800e1f2 <USB_WritePacket>

    ep->xfer_buff  += len;
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	68da      	ldr	r2, [r3, #12]
 800afcc:	69fb      	ldr	r3, [r7, #28]
 800afce:	441a      	add	r2, r3
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	699a      	ldr	r2, [r3, #24]
 800afd8:	69fb      	ldr	r3, [r7, #28]
 800afda:	441a      	add	r2, r3
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	015a      	lsls	r2, r3, #5
 800afe4:	693b      	ldr	r3, [r7, #16]
 800afe6:	4413      	add	r3, r2
 800afe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afec:	699b      	ldr	r3, [r3, #24]
 800afee:	b29b      	uxth	r3, r3
 800aff0:	69ba      	ldr	r2, [r7, #24]
 800aff2:	429a      	cmp	r2, r3
 800aff4:	d809      	bhi.n	800b00a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	699a      	ldr	r2, [r3, #24]
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800affe:	429a      	cmp	r2, r3
 800b000:	d203      	bcs.n	800b00a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	695b      	ldr	r3, [r3, #20]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d1be      	bne.n	800af88 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	695a      	ldr	r2, [r3, #20]
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	699b      	ldr	r3, [r3, #24]
 800b012:	429a      	cmp	r2, r3
 800b014:	d811      	bhi.n	800b03a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800b016:	683b      	ldr	r3, [r7, #0]
 800b018:	f003 030f 	and.w	r3, r3, #15
 800b01c:	2201      	movs	r2, #1
 800b01e:	fa02 f303 	lsl.w	r3, r2, r3
 800b022:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b024:	693b      	ldr	r3, [r7, #16]
 800b026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b02a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b02c:	68bb      	ldr	r3, [r7, #8]
 800b02e:	43db      	mvns	r3, r3
 800b030:	6939      	ldr	r1, [r7, #16]
 800b032:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b036:	4013      	ands	r3, r2
 800b038:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800b03a:	2300      	movs	r3, #0
}
 800b03c:	4618      	mov	r0, r3
 800b03e:	3720      	adds	r7, #32
 800b040:	46bd      	mov	sp, r7
 800b042:	bd80      	pop	{r7, pc}

0800b044 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b086      	sub	sp, #24
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
 800b04c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b054:	697b      	ldr	r3, [r7, #20]
 800b056:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b058:	697b      	ldr	r3, [r7, #20]
 800b05a:	333c      	adds	r3, #60	; 0x3c
 800b05c:	3304      	adds	r3, #4
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	015a      	lsls	r2, r3, #5
 800b066:	693b      	ldr	r3, [r7, #16]
 800b068:	4413      	add	r3, r2
 800b06a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b06e:	689b      	ldr	r3, [r3, #8]
 800b070:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	691b      	ldr	r3, [r3, #16]
 800b076:	2b01      	cmp	r3, #1
 800b078:	f040 80b3 	bne.w	800b1e2 <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800b07c:	68bb      	ldr	r3, [r7, #8]
 800b07e:	f003 0308 	and.w	r3, r3, #8
 800b082:	2b00      	cmp	r3, #0
 800b084:	d028      	beq.n	800b0d8 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	4a70      	ldr	r2, [pc, #448]	; (800b24c <PCD_EP_OutXfrComplete_int+0x208>)
 800b08a:	4293      	cmp	r3, r2
 800b08c:	d90e      	bls.n	800b0ac <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800b08e:	68bb      	ldr	r3, [r7, #8]
 800b090:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b094:	2b00      	cmp	r3, #0
 800b096:	d009      	beq.n	800b0ac <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b098:	683b      	ldr	r3, [r7, #0]
 800b09a:	015a      	lsls	r2, r3, #5
 800b09c:	693b      	ldr	r3, [r7, #16]
 800b09e:	4413      	add	r3, r2
 800b0a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0a4:	461a      	mov	r2, r3
 800b0a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b0aa:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 800b0ac:	6878      	ldr	r0, [r7, #4]
 800b0ae:	f008 faf1 	bl	8013694 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	6818      	ldr	r0, [r3, #0]
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b0bc:	461a      	mov	r2, r3
 800b0be:	2101      	movs	r1, #1
 800b0c0:	f003 faf6 	bl	800e6b0 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	015a      	lsls	r2, r3, #5
 800b0c8:	693b      	ldr	r3, [r7, #16]
 800b0ca:	4413      	add	r3, r2
 800b0cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0d0:	461a      	mov	r2, r3
 800b0d2:	2308      	movs	r3, #8
 800b0d4:	6093      	str	r3, [r2, #8]
 800b0d6:	e0b3      	b.n	800b240 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800b0d8:	68bb      	ldr	r3, [r7, #8]
 800b0da:	f003 0320 	and.w	r3, r3, #32
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d009      	beq.n	800b0f6 <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b0e2:	683b      	ldr	r3, [r7, #0]
 800b0e4:	015a      	lsls	r2, r3, #5
 800b0e6:	693b      	ldr	r3, [r7, #16]
 800b0e8:	4413      	add	r3, r2
 800b0ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0ee:	461a      	mov	r2, r3
 800b0f0:	2320      	movs	r3, #32
 800b0f2:	6093      	str	r3, [r2, #8]
 800b0f4:	e0a4      	b.n	800b240 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800b0f6:	68bb      	ldr	r3, [r7, #8]
 800b0f8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	f040 809f 	bne.w	800b240 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	4a51      	ldr	r2, [pc, #324]	; (800b24c <PCD_EP_OutXfrComplete_int+0x208>)
 800b106:	4293      	cmp	r3, r2
 800b108:	d90f      	bls.n	800b12a <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800b10a:	68bb      	ldr	r3, [r7, #8]
 800b10c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b110:	2b00      	cmp	r3, #0
 800b112:	d00a      	beq.n	800b12a <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	015a      	lsls	r2, r3, #5
 800b118:	693b      	ldr	r3, [r7, #16]
 800b11a:	4413      	add	r3, r2
 800b11c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b120:	461a      	mov	r2, r3
 800b122:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b126:	6093      	str	r3, [r2, #8]
 800b128:	e08a      	b.n	800b240 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800b12a:	6879      	ldr	r1, [r7, #4]
 800b12c:	683a      	ldr	r2, [r7, #0]
 800b12e:	4613      	mov	r3, r2
 800b130:	00db      	lsls	r3, r3, #3
 800b132:	1a9b      	subs	r3, r3, r2
 800b134:	009b      	lsls	r3, r3, #2
 800b136:	440b      	add	r3, r1
 800b138:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800b13c:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	0159      	lsls	r1, r3, #5
 800b142:	693b      	ldr	r3, [r7, #16]
 800b144:	440b      	add	r3, r1
 800b146:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b14a:	691b      	ldr	r3, [r3, #16]
 800b14c:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800b150:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	683a      	ldr	r2, [r7, #0]
 800b156:	4613      	mov	r3, r2
 800b158:	00db      	lsls	r3, r3, #3
 800b15a:	1a9b      	subs	r3, r3, r2
 800b15c:	009b      	lsls	r3, r3, #2
 800b15e:	4403      	add	r3, r0
 800b160:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800b164:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800b166:	6879      	ldr	r1, [r7, #4]
 800b168:	683a      	ldr	r2, [r7, #0]
 800b16a:	4613      	mov	r3, r2
 800b16c:	00db      	lsls	r3, r3, #3
 800b16e:	1a9b      	subs	r3, r3, r2
 800b170:	009b      	lsls	r3, r3, #2
 800b172:	440b      	add	r3, r1
 800b174:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800b178:	6819      	ldr	r1, [r3, #0]
 800b17a:	6878      	ldr	r0, [r7, #4]
 800b17c:	683a      	ldr	r2, [r7, #0]
 800b17e:	4613      	mov	r3, r2
 800b180:	00db      	lsls	r3, r3, #3
 800b182:	1a9b      	subs	r3, r3, r2
 800b184:	009b      	lsls	r3, r3, #2
 800b186:	4403      	add	r3, r0
 800b188:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	4419      	add	r1, r3
 800b190:	6878      	ldr	r0, [r7, #4]
 800b192:	683a      	ldr	r2, [r7, #0]
 800b194:	4613      	mov	r3, r2
 800b196:	00db      	lsls	r3, r3, #3
 800b198:	1a9b      	subs	r3, r3, r2
 800b19a:	009b      	lsls	r3, r3, #2
 800b19c:	4403      	add	r3, r0
 800b19e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800b1a2:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	b2db      	uxtb	r3, r3
 800b1a8:	4619      	mov	r1, r3
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f008 fa84 	bl	80136b8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d144      	bne.n	800b240 <PCD_EP_OutXfrComplete_int+0x1fc>
 800b1b6:	6879      	ldr	r1, [r7, #4]
 800b1b8:	683a      	ldr	r2, [r7, #0]
 800b1ba:	4613      	mov	r3, r2
 800b1bc:	00db      	lsls	r3, r3, #3
 800b1be:	1a9b      	subs	r3, r3, r2
 800b1c0:	009b      	lsls	r3, r3, #2
 800b1c2:	440b      	add	r3, r1
 800b1c4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d138      	bne.n	800b240 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	6818      	ldr	r0, [r3, #0]
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b1d8:	461a      	mov	r2, r3
 800b1da:	2101      	movs	r1, #1
 800b1dc:	f003 fa68 	bl	800e6b0 <USB_EP0_OutStart>
 800b1e0:	e02e      	b.n	800b240 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	4a1a      	ldr	r2, [pc, #104]	; (800b250 <PCD_EP_OutXfrComplete_int+0x20c>)
 800b1e6:	4293      	cmp	r3, r2
 800b1e8:	d124      	bne.n	800b234 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800b1ea:	68bb      	ldr	r3, [r7, #8]
 800b1ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d00a      	beq.n	800b20a <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b1f4:	683b      	ldr	r3, [r7, #0]
 800b1f6:	015a      	lsls	r2, r3, #5
 800b1f8:	693b      	ldr	r3, [r7, #16]
 800b1fa:	4413      	add	r3, r2
 800b1fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b200:	461a      	mov	r2, r3
 800b202:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b206:	6093      	str	r3, [r2, #8]
 800b208:	e01a      	b.n	800b240 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800b20a:	68bb      	ldr	r3, [r7, #8]
 800b20c:	f003 0320 	and.w	r3, r3, #32
 800b210:	2b00      	cmp	r3, #0
 800b212:	d008      	beq.n	800b226 <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	015a      	lsls	r2, r3, #5
 800b218:	693b      	ldr	r3, [r7, #16]
 800b21a:	4413      	add	r3, r2
 800b21c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b220:	461a      	mov	r2, r3
 800b222:	2320      	movs	r3, #32
 800b224:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	b2db      	uxtb	r3, r3
 800b22a:	4619      	mov	r1, r3
 800b22c:	6878      	ldr	r0, [r7, #4]
 800b22e:	f008 fa43 	bl	80136b8 <HAL_PCD_DataOutStageCallback>
 800b232:	e005      	b.n	800b240 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	b2db      	uxtb	r3, r3
 800b238:	4619      	mov	r1, r3
 800b23a:	6878      	ldr	r0, [r7, #4]
 800b23c:	f008 fa3c 	bl	80136b8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800b240:	2300      	movs	r3, #0
}
 800b242:	4618      	mov	r0, r3
 800b244:	3718      	adds	r7, #24
 800b246:	46bd      	mov	sp, r7
 800b248:	bd80      	pop	{r7, pc}
 800b24a:	bf00      	nop
 800b24c:	4f54300a 	.word	0x4f54300a
 800b250:	4f54310a 	.word	0x4f54310a

0800b254 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800b254:	b580      	push	{r7, lr}
 800b256:	b086      	sub	sp, #24
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
 800b25c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b264:	697b      	ldr	r3, [r7, #20]
 800b266:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b268:	697b      	ldr	r3, [r7, #20]
 800b26a:	333c      	adds	r3, #60	; 0x3c
 800b26c:	3304      	adds	r3, #4
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800b272:	683b      	ldr	r3, [r7, #0]
 800b274:	015a      	lsls	r2, r3, #5
 800b276:	693b      	ldr	r3, [r7, #16]
 800b278:	4413      	add	r3, r2
 800b27a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b27e:	689b      	ldr	r3, [r3, #8]
 800b280:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	691b      	ldr	r3, [r3, #16]
 800b286:	2b01      	cmp	r3, #1
 800b288:	d113      	bne.n	800b2b2 <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	4a1f      	ldr	r2, [pc, #124]	; (800b30c <PCD_EP_OutSetupPacket_int+0xb8>)
 800b28e:	4293      	cmp	r3, r2
 800b290:	d922      	bls.n	800b2d8 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800b292:	68bb      	ldr	r3, [r7, #8]
 800b294:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d01d      	beq.n	800b2d8 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	015a      	lsls	r2, r3, #5
 800b2a0:	693b      	ldr	r3, [r7, #16]
 800b2a2:	4413      	add	r3, r2
 800b2a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2a8:	461a      	mov	r2, r3
 800b2aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b2ae:	6093      	str	r3, [r2, #8]
 800b2b0:	e012      	b.n	800b2d8 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	4a16      	ldr	r2, [pc, #88]	; (800b310 <PCD_EP_OutSetupPacket_int+0xbc>)
 800b2b6:	4293      	cmp	r3, r2
 800b2b8:	d10e      	bne.n	800b2d8 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800b2ba:	68bb      	ldr	r3, [r7, #8]
 800b2bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d009      	beq.n	800b2d8 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	015a      	lsls	r2, r3, #5
 800b2c8:	693b      	ldr	r3, [r7, #16]
 800b2ca:	4413      	add	r3, r2
 800b2cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2d0:	461a      	mov	r2, r3
 800b2d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b2d6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800b2d8:	6878      	ldr	r0, [r7, #4]
 800b2da:	f008 f9db 	bl	8013694 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	4a0a      	ldr	r2, [pc, #40]	; (800b30c <PCD_EP_OutSetupPacket_int+0xb8>)
 800b2e2:	4293      	cmp	r3, r2
 800b2e4:	d90c      	bls.n	800b300 <PCD_EP_OutSetupPacket_int+0xac>
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	691b      	ldr	r3, [r3, #16]
 800b2ea:	2b01      	cmp	r3, #1
 800b2ec:	d108      	bne.n	800b300 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	6818      	ldr	r0, [r3, #0]
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b2f8:	461a      	mov	r2, r3
 800b2fa:	2101      	movs	r1, #1
 800b2fc:	f003 f9d8 	bl	800e6b0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800b300:	2300      	movs	r3, #0
}
 800b302:	4618      	mov	r0, r3
 800b304:	3718      	adds	r7, #24
 800b306:	46bd      	mov	sp, r7
 800b308:	bd80      	pop	{r7, pc}
 800b30a:	bf00      	nop
 800b30c:	4f54300a 	.word	0x4f54300a
 800b310:	4f54310a 	.word	0x4f54310a

0800b314 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800b314:	b480      	push	{r7}
 800b316:	b085      	sub	sp, #20
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
 800b31c:	460b      	mov	r3, r1
 800b31e:	70fb      	strb	r3, [r7, #3]
 800b320:	4613      	mov	r3, r2
 800b322:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b32a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800b32c:	78fb      	ldrb	r3, [r7, #3]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d107      	bne.n	800b342 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800b332:	883b      	ldrh	r3, [r7, #0]
 800b334:	0419      	lsls	r1, r3, #16
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	68ba      	ldr	r2, [r7, #8]
 800b33c:	430a      	orrs	r2, r1
 800b33e:	629a      	str	r2, [r3, #40]	; 0x28
 800b340:	e028      	b.n	800b394 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b348:	0c1b      	lsrs	r3, r3, #16
 800b34a:	68ba      	ldr	r2, [r7, #8]
 800b34c:	4413      	add	r3, r2
 800b34e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800b350:	2300      	movs	r3, #0
 800b352:	73fb      	strb	r3, [r7, #15]
 800b354:	e00d      	b.n	800b372 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681a      	ldr	r2, [r3, #0]
 800b35a:	7bfb      	ldrb	r3, [r7, #15]
 800b35c:	3340      	adds	r3, #64	; 0x40
 800b35e:	009b      	lsls	r3, r3, #2
 800b360:	4413      	add	r3, r2
 800b362:	685b      	ldr	r3, [r3, #4]
 800b364:	0c1b      	lsrs	r3, r3, #16
 800b366:	68ba      	ldr	r2, [r7, #8]
 800b368:	4413      	add	r3, r2
 800b36a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800b36c:	7bfb      	ldrb	r3, [r7, #15]
 800b36e:	3301      	adds	r3, #1
 800b370:	73fb      	strb	r3, [r7, #15]
 800b372:	7bfa      	ldrb	r2, [r7, #15]
 800b374:	78fb      	ldrb	r3, [r7, #3]
 800b376:	3b01      	subs	r3, #1
 800b378:	429a      	cmp	r2, r3
 800b37a:	d3ec      	bcc.n	800b356 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800b37c:	883b      	ldrh	r3, [r7, #0]
 800b37e:	0418      	lsls	r0, r3, #16
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	6819      	ldr	r1, [r3, #0]
 800b384:	78fb      	ldrb	r3, [r7, #3]
 800b386:	3b01      	subs	r3, #1
 800b388:	68ba      	ldr	r2, [r7, #8]
 800b38a:	4302      	orrs	r2, r0
 800b38c:	3340      	adds	r3, #64	; 0x40
 800b38e:	009b      	lsls	r3, r3, #2
 800b390:	440b      	add	r3, r1
 800b392:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800b394:	2300      	movs	r3, #0
}
 800b396:	4618      	mov	r0, r3
 800b398:	3714      	adds	r7, #20
 800b39a:	46bd      	mov	sp, r7
 800b39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a0:	4770      	bx	lr

0800b3a2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800b3a2:	b480      	push	{r7}
 800b3a4:	b083      	sub	sp, #12
 800b3a6:	af00      	add	r7, sp, #0
 800b3a8:	6078      	str	r0, [r7, #4]
 800b3aa:	460b      	mov	r3, r1
 800b3ac:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	887a      	ldrh	r2, [r7, #2]
 800b3b4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800b3b6:	2300      	movs	r3, #0
}
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	370c      	adds	r7, #12
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c2:	4770      	bx	lr

0800b3c4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800b3c4:	b480      	push	{r7}
 800b3c6:	b083      	sub	sp, #12
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
 800b3cc:	460b      	mov	r3, r1
 800b3ce:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800b3d0:	bf00      	nop
 800b3d2:	370c      	adds	r7, #12
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3da:	4770      	bx	lr

0800b3dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b086      	sub	sp, #24
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d101      	bne.n	800b3ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b3ea:	2301      	movs	r3, #1
 800b3ec:	e25b      	b.n	800b8a6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	f003 0301 	and.w	r3, r3, #1
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d075      	beq.n	800b4e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800b3fa:	4ba3      	ldr	r3, [pc, #652]	; (800b688 <HAL_RCC_OscConfig+0x2ac>)
 800b3fc:	689b      	ldr	r3, [r3, #8]
 800b3fe:	f003 030c 	and.w	r3, r3, #12
 800b402:	2b04      	cmp	r3, #4
 800b404:	d00c      	beq.n	800b420 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b406:	4ba0      	ldr	r3, [pc, #640]	; (800b688 <HAL_RCC_OscConfig+0x2ac>)
 800b408:	689b      	ldr	r3, [r3, #8]
 800b40a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800b40e:	2b08      	cmp	r3, #8
 800b410:	d112      	bne.n	800b438 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b412:	4b9d      	ldr	r3, [pc, #628]	; (800b688 <HAL_RCC_OscConfig+0x2ac>)
 800b414:	685b      	ldr	r3, [r3, #4]
 800b416:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b41a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b41e:	d10b      	bne.n	800b438 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b420:	4b99      	ldr	r3, [pc, #612]	; (800b688 <HAL_RCC_OscConfig+0x2ac>)
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d05b      	beq.n	800b4e4 <HAL_RCC_OscConfig+0x108>
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	685b      	ldr	r3, [r3, #4]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d157      	bne.n	800b4e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800b434:	2301      	movs	r3, #1
 800b436:	e236      	b.n	800b8a6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	685b      	ldr	r3, [r3, #4]
 800b43c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b440:	d106      	bne.n	800b450 <HAL_RCC_OscConfig+0x74>
 800b442:	4b91      	ldr	r3, [pc, #580]	; (800b688 <HAL_RCC_OscConfig+0x2ac>)
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	4a90      	ldr	r2, [pc, #576]	; (800b688 <HAL_RCC_OscConfig+0x2ac>)
 800b448:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b44c:	6013      	str	r3, [r2, #0]
 800b44e:	e01d      	b.n	800b48c <HAL_RCC_OscConfig+0xb0>
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	685b      	ldr	r3, [r3, #4]
 800b454:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b458:	d10c      	bne.n	800b474 <HAL_RCC_OscConfig+0x98>
 800b45a:	4b8b      	ldr	r3, [pc, #556]	; (800b688 <HAL_RCC_OscConfig+0x2ac>)
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	4a8a      	ldr	r2, [pc, #552]	; (800b688 <HAL_RCC_OscConfig+0x2ac>)
 800b460:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b464:	6013      	str	r3, [r2, #0]
 800b466:	4b88      	ldr	r3, [pc, #544]	; (800b688 <HAL_RCC_OscConfig+0x2ac>)
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	4a87      	ldr	r2, [pc, #540]	; (800b688 <HAL_RCC_OscConfig+0x2ac>)
 800b46c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b470:	6013      	str	r3, [r2, #0]
 800b472:	e00b      	b.n	800b48c <HAL_RCC_OscConfig+0xb0>
 800b474:	4b84      	ldr	r3, [pc, #528]	; (800b688 <HAL_RCC_OscConfig+0x2ac>)
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	4a83      	ldr	r2, [pc, #524]	; (800b688 <HAL_RCC_OscConfig+0x2ac>)
 800b47a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b47e:	6013      	str	r3, [r2, #0]
 800b480:	4b81      	ldr	r3, [pc, #516]	; (800b688 <HAL_RCC_OscConfig+0x2ac>)
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	4a80      	ldr	r2, [pc, #512]	; (800b688 <HAL_RCC_OscConfig+0x2ac>)
 800b486:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b48a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	685b      	ldr	r3, [r3, #4]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d013      	beq.n	800b4bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b494:	f7fd ff60 	bl	8009358 <HAL_GetTick>
 800b498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b49a:	e008      	b.n	800b4ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b49c:	f7fd ff5c 	bl	8009358 <HAL_GetTick>
 800b4a0:	4602      	mov	r2, r0
 800b4a2:	693b      	ldr	r3, [r7, #16]
 800b4a4:	1ad3      	subs	r3, r2, r3
 800b4a6:	2b64      	cmp	r3, #100	; 0x64
 800b4a8:	d901      	bls.n	800b4ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800b4aa:	2303      	movs	r3, #3
 800b4ac:	e1fb      	b.n	800b8a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b4ae:	4b76      	ldr	r3, [pc, #472]	; (800b688 <HAL_RCC_OscConfig+0x2ac>)
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d0f0      	beq.n	800b49c <HAL_RCC_OscConfig+0xc0>
 800b4ba:	e014      	b.n	800b4e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b4bc:	f7fd ff4c 	bl	8009358 <HAL_GetTick>
 800b4c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b4c2:	e008      	b.n	800b4d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b4c4:	f7fd ff48 	bl	8009358 <HAL_GetTick>
 800b4c8:	4602      	mov	r2, r0
 800b4ca:	693b      	ldr	r3, [r7, #16]
 800b4cc:	1ad3      	subs	r3, r2, r3
 800b4ce:	2b64      	cmp	r3, #100	; 0x64
 800b4d0:	d901      	bls.n	800b4d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b4d2:	2303      	movs	r3, #3
 800b4d4:	e1e7      	b.n	800b8a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b4d6:	4b6c      	ldr	r3, [pc, #432]	; (800b688 <HAL_RCC_OscConfig+0x2ac>)
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d1f0      	bne.n	800b4c4 <HAL_RCC_OscConfig+0xe8>
 800b4e2:	e000      	b.n	800b4e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b4e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	f003 0302 	and.w	r3, r3, #2
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d063      	beq.n	800b5ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800b4f2:	4b65      	ldr	r3, [pc, #404]	; (800b688 <HAL_RCC_OscConfig+0x2ac>)
 800b4f4:	689b      	ldr	r3, [r3, #8]
 800b4f6:	f003 030c 	and.w	r3, r3, #12
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d00b      	beq.n	800b516 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b4fe:	4b62      	ldr	r3, [pc, #392]	; (800b688 <HAL_RCC_OscConfig+0x2ac>)
 800b500:	689b      	ldr	r3, [r3, #8]
 800b502:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800b506:	2b08      	cmp	r3, #8
 800b508:	d11c      	bne.n	800b544 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b50a:	4b5f      	ldr	r3, [pc, #380]	; (800b688 <HAL_RCC_OscConfig+0x2ac>)
 800b50c:	685b      	ldr	r3, [r3, #4]
 800b50e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b512:	2b00      	cmp	r3, #0
 800b514:	d116      	bne.n	800b544 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b516:	4b5c      	ldr	r3, [pc, #368]	; (800b688 <HAL_RCC_OscConfig+0x2ac>)
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	f003 0302 	and.w	r3, r3, #2
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d005      	beq.n	800b52e <HAL_RCC_OscConfig+0x152>
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	68db      	ldr	r3, [r3, #12]
 800b526:	2b01      	cmp	r3, #1
 800b528:	d001      	beq.n	800b52e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800b52a:	2301      	movs	r3, #1
 800b52c:	e1bb      	b.n	800b8a6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b52e:	4b56      	ldr	r3, [pc, #344]	; (800b688 <HAL_RCC_OscConfig+0x2ac>)
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	691b      	ldr	r3, [r3, #16]
 800b53a:	00db      	lsls	r3, r3, #3
 800b53c:	4952      	ldr	r1, [pc, #328]	; (800b688 <HAL_RCC_OscConfig+0x2ac>)
 800b53e:	4313      	orrs	r3, r2
 800b540:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b542:	e03a      	b.n	800b5ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	68db      	ldr	r3, [r3, #12]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d020      	beq.n	800b58e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b54c:	4b4f      	ldr	r3, [pc, #316]	; (800b68c <HAL_RCC_OscConfig+0x2b0>)
 800b54e:	2201      	movs	r2, #1
 800b550:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b552:	f7fd ff01 	bl	8009358 <HAL_GetTick>
 800b556:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b558:	e008      	b.n	800b56c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b55a:	f7fd fefd 	bl	8009358 <HAL_GetTick>
 800b55e:	4602      	mov	r2, r0
 800b560:	693b      	ldr	r3, [r7, #16]
 800b562:	1ad3      	subs	r3, r2, r3
 800b564:	2b02      	cmp	r3, #2
 800b566:	d901      	bls.n	800b56c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800b568:	2303      	movs	r3, #3
 800b56a:	e19c      	b.n	800b8a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b56c:	4b46      	ldr	r3, [pc, #280]	; (800b688 <HAL_RCC_OscConfig+0x2ac>)
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	f003 0302 	and.w	r3, r3, #2
 800b574:	2b00      	cmp	r3, #0
 800b576:	d0f0      	beq.n	800b55a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b578:	4b43      	ldr	r3, [pc, #268]	; (800b688 <HAL_RCC_OscConfig+0x2ac>)
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	691b      	ldr	r3, [r3, #16]
 800b584:	00db      	lsls	r3, r3, #3
 800b586:	4940      	ldr	r1, [pc, #256]	; (800b688 <HAL_RCC_OscConfig+0x2ac>)
 800b588:	4313      	orrs	r3, r2
 800b58a:	600b      	str	r3, [r1, #0]
 800b58c:	e015      	b.n	800b5ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b58e:	4b3f      	ldr	r3, [pc, #252]	; (800b68c <HAL_RCC_OscConfig+0x2b0>)
 800b590:	2200      	movs	r2, #0
 800b592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b594:	f7fd fee0 	bl	8009358 <HAL_GetTick>
 800b598:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b59a:	e008      	b.n	800b5ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b59c:	f7fd fedc 	bl	8009358 <HAL_GetTick>
 800b5a0:	4602      	mov	r2, r0
 800b5a2:	693b      	ldr	r3, [r7, #16]
 800b5a4:	1ad3      	subs	r3, r2, r3
 800b5a6:	2b02      	cmp	r3, #2
 800b5a8:	d901      	bls.n	800b5ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800b5aa:	2303      	movs	r3, #3
 800b5ac:	e17b      	b.n	800b8a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b5ae:	4b36      	ldr	r3, [pc, #216]	; (800b688 <HAL_RCC_OscConfig+0x2ac>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	f003 0302 	and.w	r3, r3, #2
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d1f0      	bne.n	800b59c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	f003 0308 	and.w	r3, r3, #8
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d030      	beq.n	800b628 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	695b      	ldr	r3, [r3, #20]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d016      	beq.n	800b5fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b5ce:	4b30      	ldr	r3, [pc, #192]	; (800b690 <HAL_RCC_OscConfig+0x2b4>)
 800b5d0:	2201      	movs	r2, #1
 800b5d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b5d4:	f7fd fec0 	bl	8009358 <HAL_GetTick>
 800b5d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b5da:	e008      	b.n	800b5ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b5dc:	f7fd febc 	bl	8009358 <HAL_GetTick>
 800b5e0:	4602      	mov	r2, r0
 800b5e2:	693b      	ldr	r3, [r7, #16]
 800b5e4:	1ad3      	subs	r3, r2, r3
 800b5e6:	2b02      	cmp	r3, #2
 800b5e8:	d901      	bls.n	800b5ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800b5ea:	2303      	movs	r3, #3
 800b5ec:	e15b      	b.n	800b8a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b5ee:	4b26      	ldr	r3, [pc, #152]	; (800b688 <HAL_RCC_OscConfig+0x2ac>)
 800b5f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b5f2:	f003 0302 	and.w	r3, r3, #2
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d0f0      	beq.n	800b5dc <HAL_RCC_OscConfig+0x200>
 800b5fa:	e015      	b.n	800b628 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b5fc:	4b24      	ldr	r3, [pc, #144]	; (800b690 <HAL_RCC_OscConfig+0x2b4>)
 800b5fe:	2200      	movs	r2, #0
 800b600:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b602:	f7fd fea9 	bl	8009358 <HAL_GetTick>
 800b606:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b608:	e008      	b.n	800b61c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b60a:	f7fd fea5 	bl	8009358 <HAL_GetTick>
 800b60e:	4602      	mov	r2, r0
 800b610:	693b      	ldr	r3, [r7, #16]
 800b612:	1ad3      	subs	r3, r2, r3
 800b614:	2b02      	cmp	r3, #2
 800b616:	d901      	bls.n	800b61c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800b618:	2303      	movs	r3, #3
 800b61a:	e144      	b.n	800b8a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b61c:	4b1a      	ldr	r3, [pc, #104]	; (800b688 <HAL_RCC_OscConfig+0x2ac>)
 800b61e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b620:	f003 0302 	and.w	r3, r3, #2
 800b624:	2b00      	cmp	r3, #0
 800b626:	d1f0      	bne.n	800b60a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	f003 0304 	and.w	r3, r3, #4
 800b630:	2b00      	cmp	r3, #0
 800b632:	f000 80a0 	beq.w	800b776 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b636:	2300      	movs	r3, #0
 800b638:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b63a:	4b13      	ldr	r3, [pc, #76]	; (800b688 <HAL_RCC_OscConfig+0x2ac>)
 800b63c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b63e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b642:	2b00      	cmp	r3, #0
 800b644:	d10f      	bne.n	800b666 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b646:	2300      	movs	r3, #0
 800b648:	60bb      	str	r3, [r7, #8]
 800b64a:	4b0f      	ldr	r3, [pc, #60]	; (800b688 <HAL_RCC_OscConfig+0x2ac>)
 800b64c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b64e:	4a0e      	ldr	r2, [pc, #56]	; (800b688 <HAL_RCC_OscConfig+0x2ac>)
 800b650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b654:	6413      	str	r3, [r2, #64]	; 0x40
 800b656:	4b0c      	ldr	r3, [pc, #48]	; (800b688 <HAL_RCC_OscConfig+0x2ac>)
 800b658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b65a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b65e:	60bb      	str	r3, [r7, #8]
 800b660:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b662:	2301      	movs	r3, #1
 800b664:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b666:	4b0b      	ldr	r3, [pc, #44]	; (800b694 <HAL_RCC_OscConfig+0x2b8>)
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d121      	bne.n	800b6b6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b672:	4b08      	ldr	r3, [pc, #32]	; (800b694 <HAL_RCC_OscConfig+0x2b8>)
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	4a07      	ldr	r2, [pc, #28]	; (800b694 <HAL_RCC_OscConfig+0x2b8>)
 800b678:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b67c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b67e:	f7fd fe6b 	bl	8009358 <HAL_GetTick>
 800b682:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b684:	e011      	b.n	800b6aa <HAL_RCC_OscConfig+0x2ce>
 800b686:	bf00      	nop
 800b688:	40023800 	.word	0x40023800
 800b68c:	42470000 	.word	0x42470000
 800b690:	42470e80 	.word	0x42470e80
 800b694:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b698:	f7fd fe5e 	bl	8009358 <HAL_GetTick>
 800b69c:	4602      	mov	r2, r0
 800b69e:	693b      	ldr	r3, [r7, #16]
 800b6a0:	1ad3      	subs	r3, r2, r3
 800b6a2:	2b02      	cmp	r3, #2
 800b6a4:	d901      	bls.n	800b6aa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800b6a6:	2303      	movs	r3, #3
 800b6a8:	e0fd      	b.n	800b8a6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b6aa:	4b81      	ldr	r3, [pc, #516]	; (800b8b0 <HAL_RCC_OscConfig+0x4d4>)
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d0f0      	beq.n	800b698 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	689b      	ldr	r3, [r3, #8]
 800b6ba:	2b01      	cmp	r3, #1
 800b6bc:	d106      	bne.n	800b6cc <HAL_RCC_OscConfig+0x2f0>
 800b6be:	4b7d      	ldr	r3, [pc, #500]	; (800b8b4 <HAL_RCC_OscConfig+0x4d8>)
 800b6c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6c2:	4a7c      	ldr	r2, [pc, #496]	; (800b8b4 <HAL_RCC_OscConfig+0x4d8>)
 800b6c4:	f043 0301 	orr.w	r3, r3, #1
 800b6c8:	6713      	str	r3, [r2, #112]	; 0x70
 800b6ca:	e01c      	b.n	800b706 <HAL_RCC_OscConfig+0x32a>
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	689b      	ldr	r3, [r3, #8]
 800b6d0:	2b05      	cmp	r3, #5
 800b6d2:	d10c      	bne.n	800b6ee <HAL_RCC_OscConfig+0x312>
 800b6d4:	4b77      	ldr	r3, [pc, #476]	; (800b8b4 <HAL_RCC_OscConfig+0x4d8>)
 800b6d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6d8:	4a76      	ldr	r2, [pc, #472]	; (800b8b4 <HAL_RCC_OscConfig+0x4d8>)
 800b6da:	f043 0304 	orr.w	r3, r3, #4
 800b6de:	6713      	str	r3, [r2, #112]	; 0x70
 800b6e0:	4b74      	ldr	r3, [pc, #464]	; (800b8b4 <HAL_RCC_OscConfig+0x4d8>)
 800b6e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6e4:	4a73      	ldr	r2, [pc, #460]	; (800b8b4 <HAL_RCC_OscConfig+0x4d8>)
 800b6e6:	f043 0301 	orr.w	r3, r3, #1
 800b6ea:	6713      	str	r3, [r2, #112]	; 0x70
 800b6ec:	e00b      	b.n	800b706 <HAL_RCC_OscConfig+0x32a>
 800b6ee:	4b71      	ldr	r3, [pc, #452]	; (800b8b4 <HAL_RCC_OscConfig+0x4d8>)
 800b6f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6f2:	4a70      	ldr	r2, [pc, #448]	; (800b8b4 <HAL_RCC_OscConfig+0x4d8>)
 800b6f4:	f023 0301 	bic.w	r3, r3, #1
 800b6f8:	6713      	str	r3, [r2, #112]	; 0x70
 800b6fa:	4b6e      	ldr	r3, [pc, #440]	; (800b8b4 <HAL_RCC_OscConfig+0x4d8>)
 800b6fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6fe:	4a6d      	ldr	r2, [pc, #436]	; (800b8b4 <HAL_RCC_OscConfig+0x4d8>)
 800b700:	f023 0304 	bic.w	r3, r3, #4
 800b704:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	689b      	ldr	r3, [r3, #8]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d015      	beq.n	800b73a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b70e:	f7fd fe23 	bl	8009358 <HAL_GetTick>
 800b712:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b714:	e00a      	b.n	800b72c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b716:	f7fd fe1f 	bl	8009358 <HAL_GetTick>
 800b71a:	4602      	mov	r2, r0
 800b71c:	693b      	ldr	r3, [r7, #16]
 800b71e:	1ad3      	subs	r3, r2, r3
 800b720:	f241 3288 	movw	r2, #5000	; 0x1388
 800b724:	4293      	cmp	r3, r2
 800b726:	d901      	bls.n	800b72c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800b728:	2303      	movs	r3, #3
 800b72a:	e0bc      	b.n	800b8a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b72c:	4b61      	ldr	r3, [pc, #388]	; (800b8b4 <HAL_RCC_OscConfig+0x4d8>)
 800b72e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b730:	f003 0302 	and.w	r3, r3, #2
 800b734:	2b00      	cmp	r3, #0
 800b736:	d0ee      	beq.n	800b716 <HAL_RCC_OscConfig+0x33a>
 800b738:	e014      	b.n	800b764 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b73a:	f7fd fe0d 	bl	8009358 <HAL_GetTick>
 800b73e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b740:	e00a      	b.n	800b758 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b742:	f7fd fe09 	bl	8009358 <HAL_GetTick>
 800b746:	4602      	mov	r2, r0
 800b748:	693b      	ldr	r3, [r7, #16]
 800b74a:	1ad3      	subs	r3, r2, r3
 800b74c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b750:	4293      	cmp	r3, r2
 800b752:	d901      	bls.n	800b758 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800b754:	2303      	movs	r3, #3
 800b756:	e0a6      	b.n	800b8a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b758:	4b56      	ldr	r3, [pc, #344]	; (800b8b4 <HAL_RCC_OscConfig+0x4d8>)
 800b75a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b75c:	f003 0302 	and.w	r3, r3, #2
 800b760:	2b00      	cmp	r3, #0
 800b762:	d1ee      	bne.n	800b742 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b764:	7dfb      	ldrb	r3, [r7, #23]
 800b766:	2b01      	cmp	r3, #1
 800b768:	d105      	bne.n	800b776 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b76a:	4b52      	ldr	r3, [pc, #328]	; (800b8b4 <HAL_RCC_OscConfig+0x4d8>)
 800b76c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b76e:	4a51      	ldr	r2, [pc, #324]	; (800b8b4 <HAL_RCC_OscConfig+0x4d8>)
 800b770:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b774:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	699b      	ldr	r3, [r3, #24]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	f000 8092 	beq.w	800b8a4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b780:	4b4c      	ldr	r3, [pc, #304]	; (800b8b4 <HAL_RCC_OscConfig+0x4d8>)
 800b782:	689b      	ldr	r3, [r3, #8]
 800b784:	f003 030c 	and.w	r3, r3, #12
 800b788:	2b08      	cmp	r3, #8
 800b78a:	d05c      	beq.n	800b846 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	699b      	ldr	r3, [r3, #24]
 800b790:	2b02      	cmp	r3, #2
 800b792:	d141      	bne.n	800b818 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b794:	4b48      	ldr	r3, [pc, #288]	; (800b8b8 <HAL_RCC_OscConfig+0x4dc>)
 800b796:	2200      	movs	r2, #0
 800b798:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b79a:	f7fd fddd 	bl	8009358 <HAL_GetTick>
 800b79e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b7a0:	e008      	b.n	800b7b4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b7a2:	f7fd fdd9 	bl	8009358 <HAL_GetTick>
 800b7a6:	4602      	mov	r2, r0
 800b7a8:	693b      	ldr	r3, [r7, #16]
 800b7aa:	1ad3      	subs	r3, r2, r3
 800b7ac:	2b02      	cmp	r3, #2
 800b7ae:	d901      	bls.n	800b7b4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800b7b0:	2303      	movs	r3, #3
 800b7b2:	e078      	b.n	800b8a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b7b4:	4b3f      	ldr	r3, [pc, #252]	; (800b8b4 <HAL_RCC_OscConfig+0x4d8>)
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d1f0      	bne.n	800b7a2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	69da      	ldr	r2, [r3, #28]
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	6a1b      	ldr	r3, [r3, #32]
 800b7c8:	431a      	orrs	r2, r3
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7ce:	019b      	lsls	r3, r3, #6
 800b7d0:	431a      	orrs	r2, r3
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7d6:	085b      	lsrs	r3, r3, #1
 800b7d8:	3b01      	subs	r3, #1
 800b7da:	041b      	lsls	r3, r3, #16
 800b7dc:	431a      	orrs	r2, r3
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7e2:	061b      	lsls	r3, r3, #24
 800b7e4:	4933      	ldr	r1, [pc, #204]	; (800b8b4 <HAL_RCC_OscConfig+0x4d8>)
 800b7e6:	4313      	orrs	r3, r2
 800b7e8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b7ea:	4b33      	ldr	r3, [pc, #204]	; (800b8b8 <HAL_RCC_OscConfig+0x4dc>)
 800b7ec:	2201      	movs	r2, #1
 800b7ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b7f0:	f7fd fdb2 	bl	8009358 <HAL_GetTick>
 800b7f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b7f6:	e008      	b.n	800b80a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b7f8:	f7fd fdae 	bl	8009358 <HAL_GetTick>
 800b7fc:	4602      	mov	r2, r0
 800b7fe:	693b      	ldr	r3, [r7, #16]
 800b800:	1ad3      	subs	r3, r2, r3
 800b802:	2b02      	cmp	r3, #2
 800b804:	d901      	bls.n	800b80a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800b806:	2303      	movs	r3, #3
 800b808:	e04d      	b.n	800b8a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b80a:	4b2a      	ldr	r3, [pc, #168]	; (800b8b4 <HAL_RCC_OscConfig+0x4d8>)
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b812:	2b00      	cmp	r3, #0
 800b814:	d0f0      	beq.n	800b7f8 <HAL_RCC_OscConfig+0x41c>
 800b816:	e045      	b.n	800b8a4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b818:	4b27      	ldr	r3, [pc, #156]	; (800b8b8 <HAL_RCC_OscConfig+0x4dc>)
 800b81a:	2200      	movs	r2, #0
 800b81c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b81e:	f7fd fd9b 	bl	8009358 <HAL_GetTick>
 800b822:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b824:	e008      	b.n	800b838 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b826:	f7fd fd97 	bl	8009358 <HAL_GetTick>
 800b82a:	4602      	mov	r2, r0
 800b82c:	693b      	ldr	r3, [r7, #16]
 800b82e:	1ad3      	subs	r3, r2, r3
 800b830:	2b02      	cmp	r3, #2
 800b832:	d901      	bls.n	800b838 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800b834:	2303      	movs	r3, #3
 800b836:	e036      	b.n	800b8a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b838:	4b1e      	ldr	r3, [pc, #120]	; (800b8b4 <HAL_RCC_OscConfig+0x4d8>)
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b840:	2b00      	cmp	r3, #0
 800b842:	d1f0      	bne.n	800b826 <HAL_RCC_OscConfig+0x44a>
 800b844:	e02e      	b.n	800b8a4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	699b      	ldr	r3, [r3, #24]
 800b84a:	2b01      	cmp	r3, #1
 800b84c:	d101      	bne.n	800b852 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800b84e:	2301      	movs	r3, #1
 800b850:	e029      	b.n	800b8a6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800b852:	4b18      	ldr	r3, [pc, #96]	; (800b8b4 <HAL_RCC_OscConfig+0x4d8>)
 800b854:	689b      	ldr	r3, [r3, #8]
 800b856:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	69db      	ldr	r3, [r3, #28]
 800b862:	429a      	cmp	r2, r3
 800b864:	d11c      	bne.n	800b8a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b870:	429a      	cmp	r2, r3
 800b872:	d115      	bne.n	800b8a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800b874:	68fa      	ldr	r2, [r7, #12]
 800b876:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800b87a:	4013      	ands	r3, r2
 800b87c:	687a      	ldr	r2, [r7, #4]
 800b87e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b880:	4293      	cmp	r3, r2
 800b882:	d10d      	bne.n	800b8a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800b88e:	429a      	cmp	r2, r3
 800b890:	d106      	bne.n	800b8a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800b89c:	429a      	cmp	r2, r3
 800b89e:	d001      	beq.n	800b8a4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800b8a0:	2301      	movs	r3, #1
 800b8a2:	e000      	b.n	800b8a6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800b8a4:	2300      	movs	r3, #0
}
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	3718      	adds	r7, #24
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}
 800b8ae:	bf00      	nop
 800b8b0:	40007000 	.word	0x40007000
 800b8b4:	40023800 	.word	0x40023800
 800b8b8:	42470060 	.word	0x42470060

0800b8bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b084      	sub	sp, #16
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
 800b8c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d101      	bne.n	800b8d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b8cc:	2301      	movs	r3, #1
 800b8ce:	e0cc      	b.n	800ba6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b8d0:	4b68      	ldr	r3, [pc, #416]	; (800ba74 <HAL_RCC_ClockConfig+0x1b8>)
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	f003 030f 	and.w	r3, r3, #15
 800b8d8:	683a      	ldr	r2, [r7, #0]
 800b8da:	429a      	cmp	r2, r3
 800b8dc:	d90c      	bls.n	800b8f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b8de:	4b65      	ldr	r3, [pc, #404]	; (800ba74 <HAL_RCC_ClockConfig+0x1b8>)
 800b8e0:	683a      	ldr	r2, [r7, #0]
 800b8e2:	b2d2      	uxtb	r2, r2
 800b8e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b8e6:	4b63      	ldr	r3, [pc, #396]	; (800ba74 <HAL_RCC_ClockConfig+0x1b8>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	f003 030f 	and.w	r3, r3, #15
 800b8ee:	683a      	ldr	r2, [r7, #0]
 800b8f0:	429a      	cmp	r2, r3
 800b8f2:	d001      	beq.n	800b8f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b8f4:	2301      	movs	r3, #1
 800b8f6:	e0b8      	b.n	800ba6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	f003 0302 	and.w	r3, r3, #2
 800b900:	2b00      	cmp	r3, #0
 800b902:	d020      	beq.n	800b946 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	f003 0304 	and.w	r3, r3, #4
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d005      	beq.n	800b91c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b910:	4b59      	ldr	r3, [pc, #356]	; (800ba78 <HAL_RCC_ClockConfig+0x1bc>)
 800b912:	689b      	ldr	r3, [r3, #8]
 800b914:	4a58      	ldr	r2, [pc, #352]	; (800ba78 <HAL_RCC_ClockConfig+0x1bc>)
 800b916:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b91a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	f003 0308 	and.w	r3, r3, #8
 800b924:	2b00      	cmp	r3, #0
 800b926:	d005      	beq.n	800b934 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b928:	4b53      	ldr	r3, [pc, #332]	; (800ba78 <HAL_RCC_ClockConfig+0x1bc>)
 800b92a:	689b      	ldr	r3, [r3, #8]
 800b92c:	4a52      	ldr	r2, [pc, #328]	; (800ba78 <HAL_RCC_ClockConfig+0x1bc>)
 800b92e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b932:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b934:	4b50      	ldr	r3, [pc, #320]	; (800ba78 <HAL_RCC_ClockConfig+0x1bc>)
 800b936:	689b      	ldr	r3, [r3, #8]
 800b938:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	689b      	ldr	r3, [r3, #8]
 800b940:	494d      	ldr	r1, [pc, #308]	; (800ba78 <HAL_RCC_ClockConfig+0x1bc>)
 800b942:	4313      	orrs	r3, r2
 800b944:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	f003 0301 	and.w	r3, r3, #1
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d044      	beq.n	800b9dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	685b      	ldr	r3, [r3, #4]
 800b956:	2b01      	cmp	r3, #1
 800b958:	d107      	bne.n	800b96a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b95a:	4b47      	ldr	r3, [pc, #284]	; (800ba78 <HAL_RCC_ClockConfig+0x1bc>)
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b962:	2b00      	cmp	r3, #0
 800b964:	d119      	bne.n	800b99a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b966:	2301      	movs	r3, #1
 800b968:	e07f      	b.n	800ba6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	685b      	ldr	r3, [r3, #4]
 800b96e:	2b02      	cmp	r3, #2
 800b970:	d003      	beq.n	800b97a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b976:	2b03      	cmp	r3, #3
 800b978:	d107      	bne.n	800b98a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b97a:	4b3f      	ldr	r3, [pc, #252]	; (800ba78 <HAL_RCC_ClockConfig+0x1bc>)
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b982:	2b00      	cmp	r3, #0
 800b984:	d109      	bne.n	800b99a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b986:	2301      	movs	r3, #1
 800b988:	e06f      	b.n	800ba6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b98a:	4b3b      	ldr	r3, [pc, #236]	; (800ba78 <HAL_RCC_ClockConfig+0x1bc>)
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	f003 0302 	and.w	r3, r3, #2
 800b992:	2b00      	cmp	r3, #0
 800b994:	d101      	bne.n	800b99a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b996:	2301      	movs	r3, #1
 800b998:	e067      	b.n	800ba6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b99a:	4b37      	ldr	r3, [pc, #220]	; (800ba78 <HAL_RCC_ClockConfig+0x1bc>)
 800b99c:	689b      	ldr	r3, [r3, #8]
 800b99e:	f023 0203 	bic.w	r2, r3, #3
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	685b      	ldr	r3, [r3, #4]
 800b9a6:	4934      	ldr	r1, [pc, #208]	; (800ba78 <HAL_RCC_ClockConfig+0x1bc>)
 800b9a8:	4313      	orrs	r3, r2
 800b9aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b9ac:	f7fd fcd4 	bl	8009358 <HAL_GetTick>
 800b9b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b9b2:	e00a      	b.n	800b9ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b9b4:	f7fd fcd0 	bl	8009358 <HAL_GetTick>
 800b9b8:	4602      	mov	r2, r0
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	1ad3      	subs	r3, r2, r3
 800b9be:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9c2:	4293      	cmp	r3, r2
 800b9c4:	d901      	bls.n	800b9ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b9c6:	2303      	movs	r3, #3
 800b9c8:	e04f      	b.n	800ba6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b9ca:	4b2b      	ldr	r3, [pc, #172]	; (800ba78 <HAL_RCC_ClockConfig+0x1bc>)
 800b9cc:	689b      	ldr	r3, [r3, #8]
 800b9ce:	f003 020c 	and.w	r2, r3, #12
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	685b      	ldr	r3, [r3, #4]
 800b9d6:	009b      	lsls	r3, r3, #2
 800b9d8:	429a      	cmp	r2, r3
 800b9da:	d1eb      	bne.n	800b9b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b9dc:	4b25      	ldr	r3, [pc, #148]	; (800ba74 <HAL_RCC_ClockConfig+0x1b8>)
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	f003 030f 	and.w	r3, r3, #15
 800b9e4:	683a      	ldr	r2, [r7, #0]
 800b9e6:	429a      	cmp	r2, r3
 800b9e8:	d20c      	bcs.n	800ba04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b9ea:	4b22      	ldr	r3, [pc, #136]	; (800ba74 <HAL_RCC_ClockConfig+0x1b8>)
 800b9ec:	683a      	ldr	r2, [r7, #0]
 800b9ee:	b2d2      	uxtb	r2, r2
 800b9f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b9f2:	4b20      	ldr	r3, [pc, #128]	; (800ba74 <HAL_RCC_ClockConfig+0x1b8>)
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	f003 030f 	and.w	r3, r3, #15
 800b9fa:	683a      	ldr	r2, [r7, #0]
 800b9fc:	429a      	cmp	r2, r3
 800b9fe:	d001      	beq.n	800ba04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800ba00:	2301      	movs	r3, #1
 800ba02:	e032      	b.n	800ba6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	f003 0304 	and.w	r3, r3, #4
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d008      	beq.n	800ba22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ba10:	4b19      	ldr	r3, [pc, #100]	; (800ba78 <HAL_RCC_ClockConfig+0x1bc>)
 800ba12:	689b      	ldr	r3, [r3, #8]
 800ba14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	68db      	ldr	r3, [r3, #12]
 800ba1c:	4916      	ldr	r1, [pc, #88]	; (800ba78 <HAL_RCC_ClockConfig+0x1bc>)
 800ba1e:	4313      	orrs	r3, r2
 800ba20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	f003 0308 	and.w	r3, r3, #8
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d009      	beq.n	800ba42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ba2e:	4b12      	ldr	r3, [pc, #72]	; (800ba78 <HAL_RCC_ClockConfig+0x1bc>)
 800ba30:	689b      	ldr	r3, [r3, #8]
 800ba32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	691b      	ldr	r3, [r3, #16]
 800ba3a:	00db      	lsls	r3, r3, #3
 800ba3c:	490e      	ldr	r1, [pc, #56]	; (800ba78 <HAL_RCC_ClockConfig+0x1bc>)
 800ba3e:	4313      	orrs	r3, r2
 800ba40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800ba42:	f000 f821 	bl	800ba88 <HAL_RCC_GetSysClockFreq>
 800ba46:	4601      	mov	r1, r0
 800ba48:	4b0b      	ldr	r3, [pc, #44]	; (800ba78 <HAL_RCC_ClockConfig+0x1bc>)
 800ba4a:	689b      	ldr	r3, [r3, #8]
 800ba4c:	091b      	lsrs	r3, r3, #4
 800ba4e:	f003 030f 	and.w	r3, r3, #15
 800ba52:	4a0a      	ldr	r2, [pc, #40]	; (800ba7c <HAL_RCC_ClockConfig+0x1c0>)
 800ba54:	5cd3      	ldrb	r3, [r2, r3]
 800ba56:	fa21 f303 	lsr.w	r3, r1, r3
 800ba5a:	4a09      	ldr	r2, [pc, #36]	; (800ba80 <HAL_RCC_ClockConfig+0x1c4>)
 800ba5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800ba5e:	4b09      	ldr	r3, [pc, #36]	; (800ba84 <HAL_RCC_ClockConfig+0x1c8>)
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	4618      	mov	r0, r3
 800ba64:	f7fd f9e0 	bl	8008e28 <HAL_InitTick>

  return HAL_OK;
 800ba68:	2300      	movs	r3, #0
}
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	3710      	adds	r7, #16
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	bd80      	pop	{r7, pc}
 800ba72:	bf00      	nop
 800ba74:	40023c00 	.word	0x40023c00
 800ba78:	40023800 	.word	0x40023800
 800ba7c:	08019e58 	.word	0x08019e58
 800ba80:	20000cb4 	.word	0x20000cb4
 800ba84:	20000cb8 	.word	0x20000cb8

0800ba88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ba88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba8a:	b085      	sub	sp, #20
 800ba8c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800ba8e:	2300      	movs	r3, #0
 800ba90:	607b      	str	r3, [r7, #4]
 800ba92:	2300      	movs	r3, #0
 800ba94:	60fb      	str	r3, [r7, #12]
 800ba96:	2300      	movs	r3, #0
 800ba98:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ba9e:	4b63      	ldr	r3, [pc, #396]	; (800bc2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800baa0:	689b      	ldr	r3, [r3, #8]
 800baa2:	f003 030c 	and.w	r3, r3, #12
 800baa6:	2b04      	cmp	r3, #4
 800baa8:	d007      	beq.n	800baba <HAL_RCC_GetSysClockFreq+0x32>
 800baaa:	2b08      	cmp	r3, #8
 800baac:	d008      	beq.n	800bac0 <HAL_RCC_GetSysClockFreq+0x38>
 800baae:	2b00      	cmp	r3, #0
 800bab0:	f040 80b4 	bne.w	800bc1c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800bab4:	4b5e      	ldr	r3, [pc, #376]	; (800bc30 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800bab6:	60bb      	str	r3, [r7, #8]
       break;
 800bab8:	e0b3      	b.n	800bc22 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800baba:	4b5e      	ldr	r3, [pc, #376]	; (800bc34 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800babc:	60bb      	str	r3, [r7, #8]
      break;
 800babe:	e0b0      	b.n	800bc22 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800bac0:	4b5a      	ldr	r3, [pc, #360]	; (800bc2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800bac2:	685b      	ldr	r3, [r3, #4]
 800bac4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bac8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800baca:	4b58      	ldr	r3, [pc, #352]	; (800bc2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800bacc:	685b      	ldr	r3, [r3, #4]
 800bace:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d04a      	beq.n	800bb6c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bad6:	4b55      	ldr	r3, [pc, #340]	; (800bc2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800bad8:	685b      	ldr	r3, [r3, #4]
 800bada:	099b      	lsrs	r3, r3, #6
 800badc:	f04f 0400 	mov.w	r4, #0
 800bae0:	f240 11ff 	movw	r1, #511	; 0x1ff
 800bae4:	f04f 0200 	mov.w	r2, #0
 800bae8:	ea03 0501 	and.w	r5, r3, r1
 800baec:	ea04 0602 	and.w	r6, r4, r2
 800baf0:	4629      	mov	r1, r5
 800baf2:	4632      	mov	r2, r6
 800baf4:	f04f 0300 	mov.w	r3, #0
 800baf8:	f04f 0400 	mov.w	r4, #0
 800bafc:	0154      	lsls	r4, r2, #5
 800bafe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800bb02:	014b      	lsls	r3, r1, #5
 800bb04:	4619      	mov	r1, r3
 800bb06:	4622      	mov	r2, r4
 800bb08:	1b49      	subs	r1, r1, r5
 800bb0a:	eb62 0206 	sbc.w	r2, r2, r6
 800bb0e:	f04f 0300 	mov.w	r3, #0
 800bb12:	f04f 0400 	mov.w	r4, #0
 800bb16:	0194      	lsls	r4, r2, #6
 800bb18:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800bb1c:	018b      	lsls	r3, r1, #6
 800bb1e:	1a5b      	subs	r3, r3, r1
 800bb20:	eb64 0402 	sbc.w	r4, r4, r2
 800bb24:	f04f 0100 	mov.w	r1, #0
 800bb28:	f04f 0200 	mov.w	r2, #0
 800bb2c:	00e2      	lsls	r2, r4, #3
 800bb2e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800bb32:	00d9      	lsls	r1, r3, #3
 800bb34:	460b      	mov	r3, r1
 800bb36:	4614      	mov	r4, r2
 800bb38:	195b      	adds	r3, r3, r5
 800bb3a:	eb44 0406 	adc.w	r4, r4, r6
 800bb3e:	f04f 0100 	mov.w	r1, #0
 800bb42:	f04f 0200 	mov.w	r2, #0
 800bb46:	0262      	lsls	r2, r4, #9
 800bb48:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800bb4c:	0259      	lsls	r1, r3, #9
 800bb4e:	460b      	mov	r3, r1
 800bb50:	4614      	mov	r4, r2
 800bb52:	4618      	mov	r0, r3
 800bb54:	4621      	mov	r1, r4
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	f04f 0400 	mov.w	r4, #0
 800bb5c:	461a      	mov	r2, r3
 800bb5e:	4623      	mov	r3, r4
 800bb60:	f7f5 f8a2 	bl	8000ca8 <__aeabi_uldivmod>
 800bb64:	4603      	mov	r3, r0
 800bb66:	460c      	mov	r4, r1
 800bb68:	60fb      	str	r3, [r7, #12]
 800bb6a:	e049      	b.n	800bc00 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bb6c:	4b2f      	ldr	r3, [pc, #188]	; (800bc2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800bb6e:	685b      	ldr	r3, [r3, #4]
 800bb70:	099b      	lsrs	r3, r3, #6
 800bb72:	f04f 0400 	mov.w	r4, #0
 800bb76:	f240 11ff 	movw	r1, #511	; 0x1ff
 800bb7a:	f04f 0200 	mov.w	r2, #0
 800bb7e:	ea03 0501 	and.w	r5, r3, r1
 800bb82:	ea04 0602 	and.w	r6, r4, r2
 800bb86:	4629      	mov	r1, r5
 800bb88:	4632      	mov	r2, r6
 800bb8a:	f04f 0300 	mov.w	r3, #0
 800bb8e:	f04f 0400 	mov.w	r4, #0
 800bb92:	0154      	lsls	r4, r2, #5
 800bb94:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800bb98:	014b      	lsls	r3, r1, #5
 800bb9a:	4619      	mov	r1, r3
 800bb9c:	4622      	mov	r2, r4
 800bb9e:	1b49      	subs	r1, r1, r5
 800bba0:	eb62 0206 	sbc.w	r2, r2, r6
 800bba4:	f04f 0300 	mov.w	r3, #0
 800bba8:	f04f 0400 	mov.w	r4, #0
 800bbac:	0194      	lsls	r4, r2, #6
 800bbae:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800bbb2:	018b      	lsls	r3, r1, #6
 800bbb4:	1a5b      	subs	r3, r3, r1
 800bbb6:	eb64 0402 	sbc.w	r4, r4, r2
 800bbba:	f04f 0100 	mov.w	r1, #0
 800bbbe:	f04f 0200 	mov.w	r2, #0
 800bbc2:	00e2      	lsls	r2, r4, #3
 800bbc4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800bbc8:	00d9      	lsls	r1, r3, #3
 800bbca:	460b      	mov	r3, r1
 800bbcc:	4614      	mov	r4, r2
 800bbce:	195b      	adds	r3, r3, r5
 800bbd0:	eb44 0406 	adc.w	r4, r4, r6
 800bbd4:	f04f 0100 	mov.w	r1, #0
 800bbd8:	f04f 0200 	mov.w	r2, #0
 800bbdc:	02a2      	lsls	r2, r4, #10
 800bbde:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800bbe2:	0299      	lsls	r1, r3, #10
 800bbe4:	460b      	mov	r3, r1
 800bbe6:	4614      	mov	r4, r2
 800bbe8:	4618      	mov	r0, r3
 800bbea:	4621      	mov	r1, r4
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	f04f 0400 	mov.w	r4, #0
 800bbf2:	461a      	mov	r2, r3
 800bbf4:	4623      	mov	r3, r4
 800bbf6:	f7f5 f857 	bl	8000ca8 <__aeabi_uldivmod>
 800bbfa:	4603      	mov	r3, r0
 800bbfc:	460c      	mov	r4, r1
 800bbfe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800bc00:	4b0a      	ldr	r3, [pc, #40]	; (800bc2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800bc02:	685b      	ldr	r3, [r3, #4]
 800bc04:	0c1b      	lsrs	r3, r3, #16
 800bc06:	f003 0303 	and.w	r3, r3, #3
 800bc0a:	3301      	adds	r3, #1
 800bc0c:	005b      	lsls	r3, r3, #1
 800bc0e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800bc10:	68fa      	ldr	r2, [r7, #12]
 800bc12:	683b      	ldr	r3, [r7, #0]
 800bc14:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc18:	60bb      	str	r3, [r7, #8]
      break;
 800bc1a:	e002      	b.n	800bc22 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800bc1c:	4b04      	ldr	r3, [pc, #16]	; (800bc30 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800bc1e:	60bb      	str	r3, [r7, #8]
      break;
 800bc20:	bf00      	nop
    }
  }
  return sysclockfreq;
 800bc22:	68bb      	ldr	r3, [r7, #8]
}
 800bc24:	4618      	mov	r0, r3
 800bc26:	3714      	adds	r7, #20
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc2c:	40023800 	.word	0x40023800
 800bc30:	00f42400 	.word	0x00f42400
 800bc34:	007a1200 	.word	0x007a1200

0800bc38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bc38:	b480      	push	{r7}
 800bc3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800bc3c:	4b03      	ldr	r3, [pc, #12]	; (800bc4c <HAL_RCC_GetHCLKFreq+0x14>)
 800bc3e:	681b      	ldr	r3, [r3, #0]
}
 800bc40:	4618      	mov	r0, r3
 800bc42:	46bd      	mov	sp, r7
 800bc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc48:	4770      	bx	lr
 800bc4a:	bf00      	nop
 800bc4c:	20000cb4 	.word	0x20000cb4

0800bc50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800bc54:	f7ff fff0 	bl	800bc38 <HAL_RCC_GetHCLKFreq>
 800bc58:	4601      	mov	r1, r0
 800bc5a:	4b05      	ldr	r3, [pc, #20]	; (800bc70 <HAL_RCC_GetPCLK1Freq+0x20>)
 800bc5c:	689b      	ldr	r3, [r3, #8]
 800bc5e:	0a9b      	lsrs	r3, r3, #10
 800bc60:	f003 0307 	and.w	r3, r3, #7
 800bc64:	4a03      	ldr	r2, [pc, #12]	; (800bc74 <HAL_RCC_GetPCLK1Freq+0x24>)
 800bc66:	5cd3      	ldrb	r3, [r2, r3]
 800bc68:	fa21 f303 	lsr.w	r3, r1, r3
}
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	bd80      	pop	{r7, pc}
 800bc70:	40023800 	.word	0x40023800
 800bc74:	08019e68 	.word	0x08019e68

0800bc78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800bc7c:	f7ff ffdc 	bl	800bc38 <HAL_RCC_GetHCLKFreq>
 800bc80:	4601      	mov	r1, r0
 800bc82:	4b05      	ldr	r3, [pc, #20]	; (800bc98 <HAL_RCC_GetPCLK2Freq+0x20>)
 800bc84:	689b      	ldr	r3, [r3, #8]
 800bc86:	0b5b      	lsrs	r3, r3, #13
 800bc88:	f003 0307 	and.w	r3, r3, #7
 800bc8c:	4a03      	ldr	r2, [pc, #12]	; (800bc9c <HAL_RCC_GetPCLK2Freq+0x24>)
 800bc8e:	5cd3      	ldrb	r3, [r2, r3]
 800bc90:	fa21 f303 	lsr.w	r3, r1, r3
}
 800bc94:	4618      	mov	r0, r3
 800bc96:	bd80      	pop	{r7, pc}
 800bc98:	40023800 	.word	0x40023800
 800bc9c:	08019e68 	.word	0x08019e68

0800bca0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800bca0:	b480      	push	{r7}
 800bca2:	b083      	sub	sp, #12
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
 800bca8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	220f      	movs	r2, #15
 800bcae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800bcb0:	4b12      	ldr	r3, [pc, #72]	; (800bcfc <HAL_RCC_GetClockConfig+0x5c>)
 800bcb2:	689b      	ldr	r3, [r3, #8]
 800bcb4:	f003 0203 	and.w	r2, r3, #3
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800bcbc:	4b0f      	ldr	r3, [pc, #60]	; (800bcfc <HAL_RCC_GetClockConfig+0x5c>)
 800bcbe:	689b      	ldr	r3, [r3, #8]
 800bcc0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800bcc8:	4b0c      	ldr	r3, [pc, #48]	; (800bcfc <HAL_RCC_GetClockConfig+0x5c>)
 800bcca:	689b      	ldr	r3, [r3, #8]
 800bccc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800bcd4:	4b09      	ldr	r3, [pc, #36]	; (800bcfc <HAL_RCC_GetClockConfig+0x5c>)
 800bcd6:	689b      	ldr	r3, [r3, #8]
 800bcd8:	08db      	lsrs	r3, r3, #3
 800bcda:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800bce2:	4b07      	ldr	r3, [pc, #28]	; (800bd00 <HAL_RCC_GetClockConfig+0x60>)
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	f003 020f 	and.w	r2, r3, #15
 800bcea:	683b      	ldr	r3, [r7, #0]
 800bcec:	601a      	str	r2, [r3, #0]
}
 800bcee:	bf00      	nop
 800bcf0:	370c      	adds	r7, #12
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf8:	4770      	bx	lr
 800bcfa:	bf00      	nop
 800bcfc:	40023800 	.word	0x40023800
 800bd00:	40023c00 	.word	0x40023c00

0800bd04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bd04:	b580      	push	{r7, lr}
 800bd06:	b082      	sub	sp, #8
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d101      	bne.n	800bd16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bd12:	2301      	movs	r3, #1
 800bd14:	e01d      	b.n	800bd52 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bd1c:	b2db      	uxtb	r3, r3
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d106      	bne.n	800bd30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	2200      	movs	r2, #0
 800bd26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bd2a:	6878      	ldr	r0, [r7, #4]
 800bd2c:	f7fd f9b8 	bl	80090a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	2202      	movs	r2, #2
 800bd34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681a      	ldr	r2, [r3, #0]
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	3304      	adds	r3, #4
 800bd40:	4619      	mov	r1, r3
 800bd42:	4610      	mov	r0, r2
 800bd44:	f000 f95e 	bl	800c004 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	2201      	movs	r2, #1
 800bd4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bd50:	2300      	movs	r3, #0
}
 800bd52:	4618      	mov	r0, r3
 800bd54:	3708      	adds	r7, #8
 800bd56:	46bd      	mov	sp, r7
 800bd58:	bd80      	pop	{r7, pc}

0800bd5a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bd5a:	b480      	push	{r7}
 800bd5c:	b085      	sub	sp, #20
 800bd5e:	af00      	add	r7, sp, #0
 800bd60:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	68da      	ldr	r2, [r3, #12]
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	f042 0201 	orr.w	r2, r2, #1
 800bd70:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	689b      	ldr	r3, [r3, #8]
 800bd78:	f003 0307 	and.w	r3, r3, #7
 800bd7c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	2b06      	cmp	r3, #6
 800bd82:	d007      	beq.n	800bd94 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	681a      	ldr	r2, [r3, #0]
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	f042 0201 	orr.w	r2, r2, #1
 800bd92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bd94:	2300      	movs	r3, #0
}
 800bd96:	4618      	mov	r0, r3
 800bd98:	3714      	adds	r7, #20
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda0:	4770      	bx	lr

0800bda2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bda2:	b580      	push	{r7, lr}
 800bda4:	b082      	sub	sp, #8
 800bda6:	af00      	add	r7, sp, #0
 800bda8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	691b      	ldr	r3, [r3, #16]
 800bdb0:	f003 0302 	and.w	r3, r3, #2
 800bdb4:	2b02      	cmp	r3, #2
 800bdb6:	d122      	bne.n	800bdfe <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	68db      	ldr	r3, [r3, #12]
 800bdbe:	f003 0302 	and.w	r3, r3, #2
 800bdc2:	2b02      	cmp	r3, #2
 800bdc4:	d11b      	bne.n	800bdfe <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	f06f 0202 	mvn.w	r2, #2
 800bdce:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	2201      	movs	r2, #1
 800bdd4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	699b      	ldr	r3, [r3, #24]
 800bddc:	f003 0303 	and.w	r3, r3, #3
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d003      	beq.n	800bdec <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bde4:	6878      	ldr	r0, [r7, #4]
 800bde6:	f000 f8ee 	bl	800bfc6 <HAL_TIM_IC_CaptureCallback>
 800bdea:	e005      	b.n	800bdf8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bdec:	6878      	ldr	r0, [r7, #4]
 800bdee:	f000 f8e0 	bl	800bfb2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bdf2:	6878      	ldr	r0, [r7, #4]
 800bdf4:	f000 f8f1 	bl	800bfda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	691b      	ldr	r3, [r3, #16]
 800be04:	f003 0304 	and.w	r3, r3, #4
 800be08:	2b04      	cmp	r3, #4
 800be0a:	d122      	bne.n	800be52 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	68db      	ldr	r3, [r3, #12]
 800be12:	f003 0304 	and.w	r3, r3, #4
 800be16:	2b04      	cmp	r3, #4
 800be18:	d11b      	bne.n	800be52 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	f06f 0204 	mvn.w	r2, #4
 800be22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	2202      	movs	r2, #2
 800be28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	699b      	ldr	r3, [r3, #24]
 800be30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800be34:	2b00      	cmp	r3, #0
 800be36:	d003      	beq.n	800be40 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800be38:	6878      	ldr	r0, [r7, #4]
 800be3a:	f000 f8c4 	bl	800bfc6 <HAL_TIM_IC_CaptureCallback>
 800be3e:	e005      	b.n	800be4c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800be40:	6878      	ldr	r0, [r7, #4]
 800be42:	f000 f8b6 	bl	800bfb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be46:	6878      	ldr	r0, [r7, #4]
 800be48:	f000 f8c7 	bl	800bfda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	2200      	movs	r2, #0
 800be50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	691b      	ldr	r3, [r3, #16]
 800be58:	f003 0308 	and.w	r3, r3, #8
 800be5c:	2b08      	cmp	r3, #8
 800be5e:	d122      	bne.n	800bea6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	68db      	ldr	r3, [r3, #12]
 800be66:	f003 0308 	and.w	r3, r3, #8
 800be6a:	2b08      	cmp	r3, #8
 800be6c:	d11b      	bne.n	800bea6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	f06f 0208 	mvn.w	r2, #8
 800be76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	2204      	movs	r2, #4
 800be7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	69db      	ldr	r3, [r3, #28]
 800be84:	f003 0303 	and.w	r3, r3, #3
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d003      	beq.n	800be94 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800be8c:	6878      	ldr	r0, [r7, #4]
 800be8e:	f000 f89a 	bl	800bfc6 <HAL_TIM_IC_CaptureCallback>
 800be92:	e005      	b.n	800bea0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800be94:	6878      	ldr	r0, [r7, #4]
 800be96:	f000 f88c 	bl	800bfb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be9a:	6878      	ldr	r0, [r7, #4]
 800be9c:	f000 f89d 	bl	800bfda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	2200      	movs	r2, #0
 800bea4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	691b      	ldr	r3, [r3, #16]
 800beac:	f003 0310 	and.w	r3, r3, #16
 800beb0:	2b10      	cmp	r3, #16
 800beb2:	d122      	bne.n	800befa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	68db      	ldr	r3, [r3, #12]
 800beba:	f003 0310 	and.w	r3, r3, #16
 800bebe:	2b10      	cmp	r3, #16
 800bec0:	d11b      	bne.n	800befa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	f06f 0210 	mvn.w	r2, #16
 800beca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	2208      	movs	r2, #8
 800bed0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	69db      	ldr	r3, [r3, #28]
 800bed8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d003      	beq.n	800bee8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bee0:	6878      	ldr	r0, [r7, #4]
 800bee2:	f000 f870 	bl	800bfc6 <HAL_TIM_IC_CaptureCallback>
 800bee6:	e005      	b.n	800bef4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bee8:	6878      	ldr	r0, [r7, #4]
 800beea:	f000 f862 	bl	800bfb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800beee:	6878      	ldr	r0, [r7, #4]
 800bef0:	f000 f873 	bl	800bfda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	2200      	movs	r2, #0
 800bef8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	691b      	ldr	r3, [r3, #16]
 800bf00:	f003 0301 	and.w	r3, r3, #1
 800bf04:	2b01      	cmp	r3, #1
 800bf06:	d10e      	bne.n	800bf26 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	68db      	ldr	r3, [r3, #12]
 800bf0e:	f003 0301 	and.w	r3, r3, #1
 800bf12:	2b01      	cmp	r3, #1
 800bf14:	d107      	bne.n	800bf26 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	f06f 0201 	mvn.w	r2, #1
 800bf1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bf20:	6878      	ldr	r0, [r7, #4]
 800bf22:	f7f7 fb0f 	bl	8003544 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	691b      	ldr	r3, [r3, #16]
 800bf2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf30:	2b80      	cmp	r3, #128	; 0x80
 800bf32:	d10e      	bne.n	800bf52 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	68db      	ldr	r3, [r3, #12]
 800bf3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf3e:	2b80      	cmp	r3, #128	; 0x80
 800bf40:	d107      	bne.n	800bf52 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bf4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bf4c:	6878      	ldr	r0, [r7, #4]
 800bf4e:	f000 f97f 	bl	800c250 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	691b      	ldr	r3, [r3, #16]
 800bf58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf5c:	2b40      	cmp	r3, #64	; 0x40
 800bf5e:	d10e      	bne.n	800bf7e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	68db      	ldr	r3, [r3, #12]
 800bf66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf6a:	2b40      	cmp	r3, #64	; 0x40
 800bf6c:	d107      	bne.n	800bf7e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bf76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bf78:	6878      	ldr	r0, [r7, #4]
 800bf7a:	f000 f838 	bl	800bfee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	691b      	ldr	r3, [r3, #16]
 800bf84:	f003 0320 	and.w	r3, r3, #32
 800bf88:	2b20      	cmp	r3, #32
 800bf8a:	d10e      	bne.n	800bfaa <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	68db      	ldr	r3, [r3, #12]
 800bf92:	f003 0320 	and.w	r3, r3, #32
 800bf96:	2b20      	cmp	r3, #32
 800bf98:	d107      	bne.n	800bfaa <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	f06f 0220 	mvn.w	r2, #32
 800bfa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bfa4:	6878      	ldr	r0, [r7, #4]
 800bfa6:	f000 f949 	bl	800c23c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bfaa:	bf00      	nop
 800bfac:	3708      	adds	r7, #8
 800bfae:	46bd      	mov	sp, r7
 800bfb0:	bd80      	pop	{r7, pc}

0800bfb2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bfb2:	b480      	push	{r7}
 800bfb4:	b083      	sub	sp, #12
 800bfb6:	af00      	add	r7, sp, #0
 800bfb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bfba:	bf00      	nop
 800bfbc:	370c      	adds	r7, #12
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc4:	4770      	bx	lr

0800bfc6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bfc6:	b480      	push	{r7}
 800bfc8:	b083      	sub	sp, #12
 800bfca:	af00      	add	r7, sp, #0
 800bfcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bfce:	bf00      	nop
 800bfd0:	370c      	adds	r7, #12
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd8:	4770      	bx	lr

0800bfda <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bfda:	b480      	push	{r7}
 800bfdc:	b083      	sub	sp, #12
 800bfde:	af00      	add	r7, sp, #0
 800bfe0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bfe2:	bf00      	nop
 800bfe4:	370c      	adds	r7, #12
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfec:	4770      	bx	lr

0800bfee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bfee:	b480      	push	{r7}
 800bff0:	b083      	sub	sp, #12
 800bff2:	af00      	add	r7, sp, #0
 800bff4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bff6:	bf00      	nop
 800bff8:	370c      	adds	r7, #12
 800bffa:	46bd      	mov	sp, r7
 800bffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c000:	4770      	bx	lr
	...

0800c004 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c004:	b480      	push	{r7}
 800c006:	b085      	sub	sp, #20
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
 800c00c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	4a40      	ldr	r2, [pc, #256]	; (800c118 <TIM_Base_SetConfig+0x114>)
 800c018:	4293      	cmp	r3, r2
 800c01a:	d013      	beq.n	800c044 <TIM_Base_SetConfig+0x40>
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c022:	d00f      	beq.n	800c044 <TIM_Base_SetConfig+0x40>
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	4a3d      	ldr	r2, [pc, #244]	; (800c11c <TIM_Base_SetConfig+0x118>)
 800c028:	4293      	cmp	r3, r2
 800c02a:	d00b      	beq.n	800c044 <TIM_Base_SetConfig+0x40>
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	4a3c      	ldr	r2, [pc, #240]	; (800c120 <TIM_Base_SetConfig+0x11c>)
 800c030:	4293      	cmp	r3, r2
 800c032:	d007      	beq.n	800c044 <TIM_Base_SetConfig+0x40>
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	4a3b      	ldr	r2, [pc, #236]	; (800c124 <TIM_Base_SetConfig+0x120>)
 800c038:	4293      	cmp	r3, r2
 800c03a:	d003      	beq.n	800c044 <TIM_Base_SetConfig+0x40>
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	4a3a      	ldr	r2, [pc, #232]	; (800c128 <TIM_Base_SetConfig+0x124>)
 800c040:	4293      	cmp	r3, r2
 800c042:	d108      	bne.n	800c056 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c04a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c04c:	683b      	ldr	r3, [r7, #0]
 800c04e:	685b      	ldr	r3, [r3, #4]
 800c050:	68fa      	ldr	r2, [r7, #12]
 800c052:	4313      	orrs	r3, r2
 800c054:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	4a2f      	ldr	r2, [pc, #188]	; (800c118 <TIM_Base_SetConfig+0x114>)
 800c05a:	4293      	cmp	r3, r2
 800c05c:	d02b      	beq.n	800c0b6 <TIM_Base_SetConfig+0xb2>
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c064:	d027      	beq.n	800c0b6 <TIM_Base_SetConfig+0xb2>
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	4a2c      	ldr	r2, [pc, #176]	; (800c11c <TIM_Base_SetConfig+0x118>)
 800c06a:	4293      	cmp	r3, r2
 800c06c:	d023      	beq.n	800c0b6 <TIM_Base_SetConfig+0xb2>
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	4a2b      	ldr	r2, [pc, #172]	; (800c120 <TIM_Base_SetConfig+0x11c>)
 800c072:	4293      	cmp	r3, r2
 800c074:	d01f      	beq.n	800c0b6 <TIM_Base_SetConfig+0xb2>
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	4a2a      	ldr	r2, [pc, #168]	; (800c124 <TIM_Base_SetConfig+0x120>)
 800c07a:	4293      	cmp	r3, r2
 800c07c:	d01b      	beq.n	800c0b6 <TIM_Base_SetConfig+0xb2>
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	4a29      	ldr	r2, [pc, #164]	; (800c128 <TIM_Base_SetConfig+0x124>)
 800c082:	4293      	cmp	r3, r2
 800c084:	d017      	beq.n	800c0b6 <TIM_Base_SetConfig+0xb2>
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	4a28      	ldr	r2, [pc, #160]	; (800c12c <TIM_Base_SetConfig+0x128>)
 800c08a:	4293      	cmp	r3, r2
 800c08c:	d013      	beq.n	800c0b6 <TIM_Base_SetConfig+0xb2>
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	4a27      	ldr	r2, [pc, #156]	; (800c130 <TIM_Base_SetConfig+0x12c>)
 800c092:	4293      	cmp	r3, r2
 800c094:	d00f      	beq.n	800c0b6 <TIM_Base_SetConfig+0xb2>
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	4a26      	ldr	r2, [pc, #152]	; (800c134 <TIM_Base_SetConfig+0x130>)
 800c09a:	4293      	cmp	r3, r2
 800c09c:	d00b      	beq.n	800c0b6 <TIM_Base_SetConfig+0xb2>
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	4a25      	ldr	r2, [pc, #148]	; (800c138 <TIM_Base_SetConfig+0x134>)
 800c0a2:	4293      	cmp	r3, r2
 800c0a4:	d007      	beq.n	800c0b6 <TIM_Base_SetConfig+0xb2>
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	4a24      	ldr	r2, [pc, #144]	; (800c13c <TIM_Base_SetConfig+0x138>)
 800c0aa:	4293      	cmp	r3, r2
 800c0ac:	d003      	beq.n	800c0b6 <TIM_Base_SetConfig+0xb2>
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	4a23      	ldr	r2, [pc, #140]	; (800c140 <TIM_Base_SetConfig+0x13c>)
 800c0b2:	4293      	cmp	r3, r2
 800c0b4:	d108      	bne.n	800c0c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c0bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c0be:	683b      	ldr	r3, [r7, #0]
 800c0c0:	68db      	ldr	r3, [r3, #12]
 800c0c2:	68fa      	ldr	r2, [r7, #12]
 800c0c4:	4313      	orrs	r3, r2
 800c0c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c0ce:	683b      	ldr	r3, [r7, #0]
 800c0d0:	695b      	ldr	r3, [r3, #20]
 800c0d2:	4313      	orrs	r3, r2
 800c0d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	68fa      	ldr	r2, [r7, #12]
 800c0da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c0dc:	683b      	ldr	r3, [r7, #0]
 800c0de:	689a      	ldr	r2, [r3, #8]
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c0e4:	683b      	ldr	r3, [r7, #0]
 800c0e6:	681a      	ldr	r2, [r3, #0]
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	4a0a      	ldr	r2, [pc, #40]	; (800c118 <TIM_Base_SetConfig+0x114>)
 800c0f0:	4293      	cmp	r3, r2
 800c0f2:	d003      	beq.n	800c0fc <TIM_Base_SetConfig+0xf8>
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	4a0c      	ldr	r2, [pc, #48]	; (800c128 <TIM_Base_SetConfig+0x124>)
 800c0f8:	4293      	cmp	r3, r2
 800c0fa:	d103      	bne.n	800c104 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	691a      	ldr	r2, [r3, #16]
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	2201      	movs	r2, #1
 800c108:	615a      	str	r2, [r3, #20]
}
 800c10a:	bf00      	nop
 800c10c:	3714      	adds	r7, #20
 800c10e:	46bd      	mov	sp, r7
 800c110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c114:	4770      	bx	lr
 800c116:	bf00      	nop
 800c118:	40010000 	.word	0x40010000
 800c11c:	40000400 	.word	0x40000400
 800c120:	40000800 	.word	0x40000800
 800c124:	40000c00 	.word	0x40000c00
 800c128:	40010400 	.word	0x40010400
 800c12c:	40014000 	.word	0x40014000
 800c130:	40014400 	.word	0x40014400
 800c134:	40014800 	.word	0x40014800
 800c138:	40001800 	.word	0x40001800
 800c13c:	40001c00 	.word	0x40001c00
 800c140:	40002000 	.word	0x40002000

0800c144 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c144:	b480      	push	{r7}
 800c146:	b085      	sub	sp, #20
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
 800c14c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c154:	2b01      	cmp	r3, #1
 800c156:	d101      	bne.n	800c15c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c158:	2302      	movs	r3, #2
 800c15a:	e05a      	b.n	800c212 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	2201      	movs	r2, #1
 800c160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	2202      	movs	r2, #2
 800c168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	685b      	ldr	r3, [r3, #4]
 800c172:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	689b      	ldr	r3, [r3, #8]
 800c17a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c182:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c184:	683b      	ldr	r3, [r7, #0]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	68fa      	ldr	r2, [r7, #12]
 800c18a:	4313      	orrs	r3, r2
 800c18c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	68fa      	ldr	r2, [r7, #12]
 800c194:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	4a21      	ldr	r2, [pc, #132]	; (800c220 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800c19c:	4293      	cmp	r3, r2
 800c19e:	d022      	beq.n	800c1e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c1a8:	d01d      	beq.n	800c1e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	4a1d      	ldr	r2, [pc, #116]	; (800c224 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800c1b0:	4293      	cmp	r3, r2
 800c1b2:	d018      	beq.n	800c1e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	4a1b      	ldr	r2, [pc, #108]	; (800c228 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800c1ba:	4293      	cmp	r3, r2
 800c1bc:	d013      	beq.n	800c1e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	4a1a      	ldr	r2, [pc, #104]	; (800c22c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800c1c4:	4293      	cmp	r3, r2
 800c1c6:	d00e      	beq.n	800c1e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	4a18      	ldr	r2, [pc, #96]	; (800c230 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800c1ce:	4293      	cmp	r3, r2
 800c1d0:	d009      	beq.n	800c1e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	4a17      	ldr	r2, [pc, #92]	; (800c234 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c1d8:	4293      	cmp	r3, r2
 800c1da:	d004      	beq.n	800c1e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	4a15      	ldr	r2, [pc, #84]	; (800c238 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c1e2:	4293      	cmp	r3, r2
 800c1e4:	d10c      	bne.n	800c200 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c1e6:	68bb      	ldr	r3, [r7, #8]
 800c1e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c1ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c1ee:	683b      	ldr	r3, [r7, #0]
 800c1f0:	685b      	ldr	r3, [r3, #4]
 800c1f2:	68ba      	ldr	r2, [r7, #8]
 800c1f4:	4313      	orrs	r3, r2
 800c1f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	68ba      	ldr	r2, [r7, #8]
 800c1fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	2201      	movs	r2, #1
 800c204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2200      	movs	r2, #0
 800c20c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c210:	2300      	movs	r3, #0
}
 800c212:	4618      	mov	r0, r3
 800c214:	3714      	adds	r7, #20
 800c216:	46bd      	mov	sp, r7
 800c218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21c:	4770      	bx	lr
 800c21e:	bf00      	nop
 800c220:	40010000 	.word	0x40010000
 800c224:	40000400 	.word	0x40000400
 800c228:	40000800 	.word	0x40000800
 800c22c:	40000c00 	.word	0x40000c00
 800c230:	40010400 	.word	0x40010400
 800c234:	40014000 	.word	0x40014000
 800c238:	40001800 	.word	0x40001800

0800c23c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c23c:	b480      	push	{r7}
 800c23e:	b083      	sub	sp, #12
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c244:	bf00      	nop
 800c246:	370c      	adds	r7, #12
 800c248:	46bd      	mov	sp, r7
 800c24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24e:	4770      	bx	lr

0800c250 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c250:	b480      	push	{r7}
 800c252:	b083      	sub	sp, #12
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c258:	bf00      	nop
 800c25a:	370c      	adds	r7, #12
 800c25c:	46bd      	mov	sp, r7
 800c25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c262:	4770      	bx	lr

0800c264 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c264:	b580      	push	{r7, lr}
 800c266:	b082      	sub	sp, #8
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d101      	bne.n	800c276 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c272:	2301      	movs	r3, #1
 800c274:	e03f      	b.n	800c2f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c27c:	b2db      	uxtb	r3, r3
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d106      	bne.n	800c290 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	2200      	movs	r2, #0
 800c286:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c28a:	6878      	ldr	r0, [r7, #4]
 800c28c:	f7fc ff5a 	bl	8009144 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	2224      	movs	r2, #36	; 0x24
 800c294:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	68da      	ldr	r2, [r3, #12]
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c2a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c2a8:	6878      	ldr	r0, [r7, #4]
 800c2aa:	f000 fb6b 	bl	800c984 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	691a      	ldr	r2, [r3, #16]
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c2bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	695a      	ldr	r2, [r3, #20]
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c2cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	68da      	ldr	r2, [r3, #12]
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c2dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	2200      	movs	r2, #0
 800c2e2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	2220      	movs	r2, #32
 800c2e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	2220      	movs	r2, #32
 800c2f0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800c2f4:	2300      	movs	r3, #0
}
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	3708      	adds	r7, #8
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	bd80      	pop	{r7, pc}
	...

0800c300 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c300:	b580      	push	{r7, lr}
 800c302:	b086      	sub	sp, #24
 800c304:	af00      	add	r7, sp, #0
 800c306:	60f8      	str	r0, [r7, #12]
 800c308:	60b9      	str	r1, [r7, #8]
 800c30a:	4613      	mov	r3, r2
 800c30c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c314:	b2db      	uxtb	r3, r3
 800c316:	2b20      	cmp	r3, #32
 800c318:	d153      	bne.n	800c3c2 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800c31a:	68bb      	ldr	r3, [r7, #8]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d002      	beq.n	800c326 <HAL_UART_Transmit_DMA+0x26>
 800c320:	88fb      	ldrh	r3, [r7, #6]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d101      	bne.n	800c32a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800c326:	2301      	movs	r3, #1
 800c328:	e04c      	b.n	800c3c4 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c330:	2b01      	cmp	r3, #1
 800c332:	d101      	bne.n	800c338 <HAL_UART_Transmit_DMA+0x38>
 800c334:	2302      	movs	r3, #2
 800c336:	e045      	b.n	800c3c4 <HAL_UART_Transmit_DMA+0xc4>
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	2201      	movs	r2, #1
 800c33c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800c340:	68ba      	ldr	r2, [r7, #8]
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	88fa      	ldrh	r2, [r7, #6]
 800c34a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	88fa      	ldrh	r2, [r7, #6]
 800c350:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	2200      	movs	r2, #0
 800c356:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	2221      	movs	r2, #33	; 0x21
 800c35c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c364:	4a19      	ldr	r2, [pc, #100]	; (800c3cc <HAL_UART_Transmit_DMA+0xcc>)
 800c366:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c36c:	4a18      	ldr	r2, [pc, #96]	; (800c3d0 <HAL_UART_Transmit_DMA+0xd0>)
 800c36e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c374:	4a17      	ldr	r2, [pc, #92]	; (800c3d4 <HAL_UART_Transmit_DMA+0xd4>)
 800c376:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c37c:	2200      	movs	r2, #0
 800c37e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800c380:	f107 0308 	add.w	r3, r7, #8
 800c384:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c38a:	697b      	ldr	r3, [r7, #20]
 800c38c:	6819      	ldr	r1, [r3, #0]
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	3304      	adds	r3, #4
 800c394:	461a      	mov	r2, r3
 800c396:	88fb      	ldrh	r3, [r7, #6]
 800c398:	f7fd f99c 	bl	80096d4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c3a4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	2200      	movs	r2, #0
 800c3aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	695a      	ldr	r2, [r3, #20]
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c3bc:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800c3be:	2300      	movs	r3, #0
 800c3c0:	e000      	b.n	800c3c4 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800c3c2:	2302      	movs	r3, #2
  }
}
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	3718      	adds	r7, #24
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	bd80      	pop	{r7, pc}
 800c3cc:	0800c615 	.word	0x0800c615
 800c3d0:	0800c667 	.word	0x0800c667
 800c3d4:	0800c683 	.word	0x0800c683

0800c3d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b088      	sub	sp, #32
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	68db      	ldr	r3, [r3, #12]
 800c3ee:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	695b      	ldr	r3, [r3, #20]
 800c3f6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c400:	69fb      	ldr	r3, [r7, #28]
 800c402:	f003 030f 	and.w	r3, r3, #15
 800c406:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800c408:	693b      	ldr	r3, [r7, #16]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d10d      	bne.n	800c42a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c40e:	69fb      	ldr	r3, [r7, #28]
 800c410:	f003 0320 	and.w	r3, r3, #32
 800c414:	2b00      	cmp	r3, #0
 800c416:	d008      	beq.n	800c42a <HAL_UART_IRQHandler+0x52>
 800c418:	69bb      	ldr	r3, [r7, #24]
 800c41a:	f003 0320 	and.w	r3, r3, #32
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d003      	beq.n	800c42a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800c422:	6878      	ldr	r0, [r7, #4]
 800c424:	f000 fa2d 	bl	800c882 <UART_Receive_IT>
      return;
 800c428:	e0d1      	b.n	800c5ce <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c42a:	693b      	ldr	r3, [r7, #16]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	f000 80b0 	beq.w	800c592 <HAL_UART_IRQHandler+0x1ba>
 800c432:	697b      	ldr	r3, [r7, #20]
 800c434:	f003 0301 	and.w	r3, r3, #1
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d105      	bne.n	800c448 <HAL_UART_IRQHandler+0x70>
 800c43c:	69bb      	ldr	r3, [r7, #24]
 800c43e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800c442:	2b00      	cmp	r3, #0
 800c444:	f000 80a5 	beq.w	800c592 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c448:	69fb      	ldr	r3, [r7, #28]
 800c44a:	f003 0301 	and.w	r3, r3, #1
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d00a      	beq.n	800c468 <HAL_UART_IRQHandler+0x90>
 800c452:	69bb      	ldr	r3, [r7, #24]
 800c454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d005      	beq.n	800c468 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c460:	f043 0201 	orr.w	r2, r3, #1
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c468:	69fb      	ldr	r3, [r7, #28]
 800c46a:	f003 0304 	and.w	r3, r3, #4
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d00a      	beq.n	800c488 <HAL_UART_IRQHandler+0xb0>
 800c472:	697b      	ldr	r3, [r7, #20]
 800c474:	f003 0301 	and.w	r3, r3, #1
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d005      	beq.n	800c488 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c480:	f043 0202 	orr.w	r2, r3, #2
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c488:	69fb      	ldr	r3, [r7, #28]
 800c48a:	f003 0302 	and.w	r3, r3, #2
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d00a      	beq.n	800c4a8 <HAL_UART_IRQHandler+0xd0>
 800c492:	697b      	ldr	r3, [r7, #20]
 800c494:	f003 0301 	and.w	r3, r3, #1
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d005      	beq.n	800c4a8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4a0:	f043 0204 	orr.w	r2, r3, #4
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800c4a8:	69fb      	ldr	r3, [r7, #28]
 800c4aa:	f003 0308 	and.w	r3, r3, #8
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d00f      	beq.n	800c4d2 <HAL_UART_IRQHandler+0xfa>
 800c4b2:	69bb      	ldr	r3, [r7, #24]
 800c4b4:	f003 0320 	and.w	r3, r3, #32
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d104      	bne.n	800c4c6 <HAL_UART_IRQHandler+0xee>
 800c4bc:	697b      	ldr	r3, [r7, #20]
 800c4be:	f003 0301 	and.w	r3, r3, #1
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d005      	beq.n	800c4d2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4ca:	f043 0208 	orr.w	r2, r3, #8
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d078      	beq.n	800c5cc <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c4da:	69fb      	ldr	r3, [r7, #28]
 800c4dc:	f003 0320 	and.w	r3, r3, #32
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d007      	beq.n	800c4f4 <HAL_UART_IRQHandler+0x11c>
 800c4e4:	69bb      	ldr	r3, [r7, #24]
 800c4e6:	f003 0320 	and.w	r3, r3, #32
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d002      	beq.n	800c4f4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800c4ee:	6878      	ldr	r0, [r7, #4]
 800c4f0:	f000 f9c7 	bl	800c882 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	695b      	ldr	r3, [r3, #20]
 800c4fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4fe:	2b40      	cmp	r3, #64	; 0x40
 800c500:	bf0c      	ite	eq
 800c502:	2301      	moveq	r3, #1
 800c504:	2300      	movne	r3, #0
 800c506:	b2db      	uxtb	r3, r3
 800c508:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c50e:	f003 0308 	and.w	r3, r3, #8
 800c512:	2b00      	cmp	r3, #0
 800c514:	d102      	bne.n	800c51c <HAL_UART_IRQHandler+0x144>
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d031      	beq.n	800c580 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c51c:	6878      	ldr	r0, [r7, #4]
 800c51e:	f000 f910 	bl	800c742 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	695b      	ldr	r3, [r3, #20]
 800c528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c52c:	2b40      	cmp	r3, #64	; 0x40
 800c52e:	d123      	bne.n	800c578 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	695a      	ldr	r2, [r3, #20]
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c53e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c544:	2b00      	cmp	r3, #0
 800c546:	d013      	beq.n	800c570 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c54c:	4a21      	ldr	r2, [pc, #132]	; (800c5d4 <HAL_UART_IRQHandler+0x1fc>)
 800c54e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c554:	4618      	mov	r0, r3
 800c556:	f7fd f915 	bl	8009784 <HAL_DMA_Abort_IT>
 800c55a:	4603      	mov	r3, r0
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d016      	beq.n	800c58e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c564:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c566:	687a      	ldr	r2, [r7, #4]
 800c568:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800c56a:	4610      	mov	r0, r2
 800c56c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c56e:	e00e      	b.n	800c58e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c570:	6878      	ldr	r0, [r7, #4]
 800c572:	f000 f845 	bl	800c600 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c576:	e00a      	b.n	800c58e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c578:	6878      	ldr	r0, [r7, #4]
 800c57a:	f000 f841 	bl	800c600 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c57e:	e006      	b.n	800c58e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c580:	6878      	ldr	r0, [r7, #4]
 800c582:	f000 f83d 	bl	800c600 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	2200      	movs	r2, #0
 800c58a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800c58c:	e01e      	b.n	800c5cc <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c58e:	bf00      	nop
    return;
 800c590:	e01c      	b.n	800c5cc <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c592:	69fb      	ldr	r3, [r7, #28]
 800c594:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d008      	beq.n	800c5ae <HAL_UART_IRQHandler+0x1d6>
 800c59c:	69bb      	ldr	r3, [r7, #24]
 800c59e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d003      	beq.n	800c5ae <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800c5a6:	6878      	ldr	r0, [r7, #4]
 800c5a8:	f000 f8fd 	bl	800c7a6 <UART_Transmit_IT>
    return;
 800c5ac:	e00f      	b.n	800c5ce <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c5ae:	69fb      	ldr	r3, [r7, #28]
 800c5b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d00a      	beq.n	800c5ce <HAL_UART_IRQHandler+0x1f6>
 800c5b8:	69bb      	ldr	r3, [r7, #24]
 800c5ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d005      	beq.n	800c5ce <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800c5c2:	6878      	ldr	r0, [r7, #4]
 800c5c4:	f000 f945 	bl	800c852 <UART_EndTransmit_IT>
    return;
 800c5c8:	bf00      	nop
 800c5ca:	e000      	b.n	800c5ce <HAL_UART_IRQHandler+0x1f6>
    return;
 800c5cc:	bf00      	nop
  }
}
 800c5ce:	3720      	adds	r7, #32
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	bd80      	pop	{r7, pc}
 800c5d4:	0800c77f 	.word	0x0800c77f

0800c5d8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c5d8:	b480      	push	{r7}
 800c5da:	b083      	sub	sp, #12
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800c5e0:	bf00      	nop
 800c5e2:	370c      	adds	r7, #12
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ea:	4770      	bx	lr

0800c5ec <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c5ec:	b480      	push	{r7}
 800c5ee:	b083      	sub	sp, #12
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800c5f4:	bf00      	nop
 800c5f6:	370c      	adds	r7, #12
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fe:	4770      	bx	lr

0800c600 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c600:	b480      	push	{r7}
 800c602:	b083      	sub	sp, #12
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c608:	bf00      	nop
 800c60a:	370c      	adds	r7, #12
 800c60c:	46bd      	mov	sp, r7
 800c60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c612:	4770      	bx	lr

0800c614 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b084      	sub	sp, #16
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c620:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d113      	bne.n	800c658 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	2200      	movs	r2, #0
 800c634:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	695a      	ldr	r2, [r3, #20]
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c644:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	68da      	ldr	r2, [r3, #12]
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c654:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c656:	e002      	b.n	800c65e <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800c658:	68f8      	ldr	r0, [r7, #12]
 800c65a:	f7fc fdf5 	bl	8009248 <HAL_UART_TxCpltCallback>
}
 800c65e:	bf00      	nop
 800c660:	3710      	adds	r7, #16
 800c662:	46bd      	mov	sp, r7
 800c664:	bd80      	pop	{r7, pc}

0800c666 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c666:	b580      	push	{r7, lr}
 800c668:	b084      	sub	sp, #16
 800c66a:	af00      	add	r7, sp, #0
 800c66c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c672:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800c674:	68f8      	ldr	r0, [r7, #12]
 800c676:	f7ff ffaf 	bl	800c5d8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c67a:	bf00      	nop
 800c67c:	3710      	adds	r7, #16
 800c67e:	46bd      	mov	sp, r7
 800c680:	bd80      	pop	{r7, pc}

0800c682 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c682:	b580      	push	{r7, lr}
 800c684:	b084      	sub	sp, #16
 800c686:	af00      	add	r7, sp, #0
 800c688:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800c68a:	2300      	movs	r3, #0
 800c68c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c692:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800c694:	68bb      	ldr	r3, [r7, #8]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	695b      	ldr	r3, [r3, #20]
 800c69a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c69e:	2b80      	cmp	r3, #128	; 0x80
 800c6a0:	bf0c      	ite	eq
 800c6a2:	2301      	moveq	r3, #1
 800c6a4:	2300      	movne	r3, #0
 800c6a6:	b2db      	uxtb	r3, r3
 800c6a8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800c6aa:	68bb      	ldr	r3, [r7, #8]
 800c6ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c6b0:	b2db      	uxtb	r3, r3
 800c6b2:	2b21      	cmp	r3, #33	; 0x21
 800c6b4:	d108      	bne.n	800c6c8 <UART_DMAError+0x46>
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d005      	beq.n	800c6c8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800c6bc:	68bb      	ldr	r3, [r7, #8]
 800c6be:	2200      	movs	r2, #0
 800c6c0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800c6c2:	68b8      	ldr	r0, [r7, #8]
 800c6c4:	f000 f827 	bl	800c716 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c6c8:	68bb      	ldr	r3, [r7, #8]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	695b      	ldr	r3, [r3, #20]
 800c6ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6d2:	2b40      	cmp	r3, #64	; 0x40
 800c6d4:	bf0c      	ite	eq
 800c6d6:	2301      	moveq	r3, #1
 800c6d8:	2300      	movne	r3, #0
 800c6da:	b2db      	uxtb	r3, r3
 800c6dc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800c6de:	68bb      	ldr	r3, [r7, #8]
 800c6e0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800c6e4:	b2db      	uxtb	r3, r3
 800c6e6:	2b22      	cmp	r3, #34	; 0x22
 800c6e8:	d108      	bne.n	800c6fc <UART_DMAError+0x7a>
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d005      	beq.n	800c6fc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800c6f0:	68bb      	ldr	r3, [r7, #8]
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800c6f6:	68b8      	ldr	r0, [r7, #8]
 800c6f8:	f000 f823 	bl	800c742 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c6fc:	68bb      	ldr	r3, [r7, #8]
 800c6fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c700:	f043 0210 	orr.w	r2, r3, #16
 800c704:	68bb      	ldr	r3, [r7, #8]
 800c706:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c708:	68b8      	ldr	r0, [r7, #8]
 800c70a:	f7ff ff79 	bl	800c600 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c70e:	bf00      	nop
 800c710:	3710      	adds	r7, #16
 800c712:	46bd      	mov	sp, r7
 800c714:	bd80      	pop	{r7, pc}

0800c716 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c716:	b480      	push	{r7}
 800c718:	b083      	sub	sp, #12
 800c71a:	af00      	add	r7, sp, #0
 800c71c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	68da      	ldr	r2, [r3, #12]
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800c72c:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	2220      	movs	r2, #32
 800c732:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800c736:	bf00      	nop
 800c738:	370c      	adds	r7, #12
 800c73a:	46bd      	mov	sp, r7
 800c73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c740:	4770      	bx	lr

0800c742 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c742:	b480      	push	{r7}
 800c744:	b083      	sub	sp, #12
 800c746:	af00      	add	r7, sp, #0
 800c748:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	68da      	ldr	r2, [r3, #12]
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c758:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	695a      	ldr	r2, [r3, #20]
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	f022 0201 	bic.w	r2, r2, #1
 800c768:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	2220      	movs	r2, #32
 800c76e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800c772:	bf00      	nop
 800c774:	370c      	adds	r7, #12
 800c776:	46bd      	mov	sp, r7
 800c778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77c:	4770      	bx	lr

0800c77e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c77e:	b580      	push	{r7, lr}
 800c780:	b084      	sub	sp, #16
 800c782:	af00      	add	r7, sp, #0
 800c784:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c78a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	2200      	movs	r2, #0
 800c790:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	2200      	movs	r2, #0
 800c796:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c798:	68f8      	ldr	r0, [r7, #12]
 800c79a:	f7ff ff31 	bl	800c600 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c79e:	bf00      	nop
 800c7a0:	3710      	adds	r7, #16
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	bd80      	pop	{r7, pc}

0800c7a6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c7a6:	b480      	push	{r7}
 800c7a8:	b085      	sub	sp, #20
 800c7aa:	af00      	add	r7, sp, #0
 800c7ac:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c7b4:	b2db      	uxtb	r3, r3
 800c7b6:	2b21      	cmp	r3, #33	; 0x21
 800c7b8:	d144      	bne.n	800c844 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	689b      	ldr	r3, [r3, #8]
 800c7be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c7c2:	d11a      	bne.n	800c7fa <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	6a1b      	ldr	r3, [r3, #32]
 800c7c8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	881b      	ldrh	r3, [r3, #0]
 800c7ce:	461a      	mov	r2, r3
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c7d8:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	691b      	ldr	r3, [r3, #16]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d105      	bne.n	800c7ee <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	6a1b      	ldr	r3, [r3, #32]
 800c7e6:	1c9a      	adds	r2, r3, #2
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	621a      	str	r2, [r3, #32]
 800c7ec:	e00e      	b.n	800c80c <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	6a1b      	ldr	r3, [r3, #32]
 800c7f2:	1c5a      	adds	r2, r3, #1
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	621a      	str	r2, [r3, #32]
 800c7f8:	e008      	b.n	800c80c <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	6a1b      	ldr	r3, [r3, #32]
 800c7fe:	1c59      	adds	r1, r3, #1
 800c800:	687a      	ldr	r2, [r7, #4]
 800c802:	6211      	str	r1, [r2, #32]
 800c804:	781a      	ldrb	r2, [r3, #0]
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c810:	b29b      	uxth	r3, r3
 800c812:	3b01      	subs	r3, #1
 800c814:	b29b      	uxth	r3, r3
 800c816:	687a      	ldr	r2, [r7, #4]
 800c818:	4619      	mov	r1, r3
 800c81a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d10f      	bne.n	800c840 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	68da      	ldr	r2, [r3, #12]
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c82e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	68da      	ldr	r2, [r3, #12]
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c83e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c840:	2300      	movs	r3, #0
 800c842:	e000      	b.n	800c846 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800c844:	2302      	movs	r3, #2
  }
}
 800c846:	4618      	mov	r0, r3
 800c848:	3714      	adds	r7, #20
 800c84a:	46bd      	mov	sp, r7
 800c84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c850:	4770      	bx	lr

0800c852 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c852:	b580      	push	{r7, lr}
 800c854:	b082      	sub	sp, #8
 800c856:	af00      	add	r7, sp, #0
 800c858:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	68da      	ldr	r2, [r3, #12]
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c868:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	2220      	movs	r2, #32
 800c86e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c872:	6878      	ldr	r0, [r7, #4]
 800c874:	f7fc fce8 	bl	8009248 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c878:	2300      	movs	r3, #0
}
 800c87a:	4618      	mov	r0, r3
 800c87c:	3708      	adds	r7, #8
 800c87e:	46bd      	mov	sp, r7
 800c880:	bd80      	pop	{r7, pc}

0800c882 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c882:	b580      	push	{r7, lr}
 800c884:	b084      	sub	sp, #16
 800c886:	af00      	add	r7, sp, #0
 800c888:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800c890:	b2db      	uxtb	r3, r3
 800c892:	2b22      	cmp	r3, #34	; 0x22
 800c894:	d171      	bne.n	800c97a <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	689b      	ldr	r3, [r3, #8]
 800c89a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c89e:	d123      	bne.n	800c8e8 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8a4:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	691b      	ldr	r3, [r3, #16]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d10e      	bne.n	800c8cc <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	685b      	ldr	r3, [r3, #4]
 800c8b4:	b29b      	uxth	r3, r3
 800c8b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8ba:	b29a      	uxth	r2, r3
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8c4:	1c9a      	adds	r2, r3, #2
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	629a      	str	r2, [r3, #40]	; 0x28
 800c8ca:	e029      	b.n	800c920 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	685b      	ldr	r3, [r3, #4]
 800c8d2:	b29b      	uxth	r3, r3
 800c8d4:	b2db      	uxtb	r3, r3
 800c8d6:	b29a      	uxth	r2, r3
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8e0:	1c5a      	adds	r2, r3, #1
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	629a      	str	r2, [r3, #40]	; 0x28
 800c8e6:	e01b      	b.n	800c920 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	691b      	ldr	r3, [r3, #16]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d10a      	bne.n	800c906 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	6858      	ldr	r0, [r3, #4]
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8fa:	1c59      	adds	r1, r3, #1
 800c8fc:	687a      	ldr	r2, [r7, #4]
 800c8fe:	6291      	str	r1, [r2, #40]	; 0x28
 800c900:	b2c2      	uxtb	r2, r0
 800c902:	701a      	strb	r2, [r3, #0]
 800c904:	e00c      	b.n	800c920 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	685b      	ldr	r3, [r3, #4]
 800c90c:	b2da      	uxtb	r2, r3
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c912:	1c58      	adds	r0, r3, #1
 800c914:	6879      	ldr	r1, [r7, #4]
 800c916:	6288      	str	r0, [r1, #40]	; 0x28
 800c918:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800c91c:	b2d2      	uxtb	r2, r2
 800c91e:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c924:	b29b      	uxth	r3, r3
 800c926:	3b01      	subs	r3, #1
 800c928:	b29b      	uxth	r3, r3
 800c92a:	687a      	ldr	r2, [r7, #4]
 800c92c:	4619      	mov	r1, r3
 800c92e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c930:	2b00      	cmp	r3, #0
 800c932:	d120      	bne.n	800c976 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	68da      	ldr	r2, [r3, #12]
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	f022 0220 	bic.w	r2, r2, #32
 800c942:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	68da      	ldr	r2, [r3, #12]
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c952:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	695a      	ldr	r2, [r3, #20]
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	f022 0201 	bic.w	r2, r2, #1
 800c962:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	2220      	movs	r2, #32
 800c968:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800c96c:	6878      	ldr	r0, [r7, #4]
 800c96e:	f7ff fe3d 	bl	800c5ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800c972:	2300      	movs	r3, #0
 800c974:	e002      	b.n	800c97c <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800c976:	2300      	movs	r3, #0
 800c978:	e000      	b.n	800c97c <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800c97a:	2302      	movs	r3, #2
  }
}
 800c97c:	4618      	mov	r0, r3
 800c97e:	3710      	adds	r7, #16
 800c980:	46bd      	mov	sp, r7
 800c982:	bd80      	pop	{r7, pc}

0800c984 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c988:	b085      	sub	sp, #20
 800c98a:	af00      	add	r7, sp, #0
 800c98c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	691b      	ldr	r3, [r3, #16]
 800c994:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	68da      	ldr	r2, [r3, #12]
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	430a      	orrs	r2, r1
 800c9a2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	689a      	ldr	r2, [r3, #8]
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	691b      	ldr	r3, [r3, #16]
 800c9ac:	431a      	orrs	r2, r3
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	695b      	ldr	r3, [r3, #20]
 800c9b2:	431a      	orrs	r2, r3
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	69db      	ldr	r3, [r3, #28]
 800c9b8:	4313      	orrs	r3, r2
 800c9ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	68db      	ldr	r3, [r3, #12]
 800c9c2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800c9c6:	f023 030c 	bic.w	r3, r3, #12
 800c9ca:	687a      	ldr	r2, [r7, #4]
 800c9cc:	6812      	ldr	r2, [r2, #0]
 800c9ce:	68f9      	ldr	r1, [r7, #12]
 800c9d0:	430b      	orrs	r3, r1
 800c9d2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	695b      	ldr	r3, [r3, #20]
 800c9da:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	699a      	ldr	r2, [r3, #24]
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	430a      	orrs	r2, r1
 800c9e8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	69db      	ldr	r3, [r3, #28]
 800c9ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c9f2:	f040 818b 	bne.w	800cd0c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	4ac1      	ldr	r2, [pc, #772]	; (800cd00 <UART_SetConfig+0x37c>)
 800c9fc:	4293      	cmp	r3, r2
 800c9fe:	d005      	beq.n	800ca0c <UART_SetConfig+0x88>
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	4abf      	ldr	r2, [pc, #764]	; (800cd04 <UART_SetConfig+0x380>)
 800ca06:	4293      	cmp	r3, r2
 800ca08:	f040 80bd 	bne.w	800cb86 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ca0c:	f7ff f934 	bl	800bc78 <HAL_RCC_GetPCLK2Freq>
 800ca10:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ca12:	68bb      	ldr	r3, [r7, #8]
 800ca14:	461d      	mov	r5, r3
 800ca16:	f04f 0600 	mov.w	r6, #0
 800ca1a:	46a8      	mov	r8, r5
 800ca1c:	46b1      	mov	r9, r6
 800ca1e:	eb18 0308 	adds.w	r3, r8, r8
 800ca22:	eb49 0409 	adc.w	r4, r9, r9
 800ca26:	4698      	mov	r8, r3
 800ca28:	46a1      	mov	r9, r4
 800ca2a:	eb18 0805 	adds.w	r8, r8, r5
 800ca2e:	eb49 0906 	adc.w	r9, r9, r6
 800ca32:	f04f 0100 	mov.w	r1, #0
 800ca36:	f04f 0200 	mov.w	r2, #0
 800ca3a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800ca3e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800ca42:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ca46:	4688      	mov	r8, r1
 800ca48:	4691      	mov	r9, r2
 800ca4a:	eb18 0005 	adds.w	r0, r8, r5
 800ca4e:	eb49 0106 	adc.w	r1, r9, r6
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	685b      	ldr	r3, [r3, #4]
 800ca56:	461d      	mov	r5, r3
 800ca58:	f04f 0600 	mov.w	r6, #0
 800ca5c:	196b      	adds	r3, r5, r5
 800ca5e:	eb46 0406 	adc.w	r4, r6, r6
 800ca62:	461a      	mov	r2, r3
 800ca64:	4623      	mov	r3, r4
 800ca66:	f7f4 f91f 	bl	8000ca8 <__aeabi_uldivmod>
 800ca6a:	4603      	mov	r3, r0
 800ca6c:	460c      	mov	r4, r1
 800ca6e:	461a      	mov	r2, r3
 800ca70:	4ba5      	ldr	r3, [pc, #660]	; (800cd08 <UART_SetConfig+0x384>)
 800ca72:	fba3 2302 	umull	r2, r3, r3, r2
 800ca76:	095b      	lsrs	r3, r3, #5
 800ca78:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ca7c:	68bb      	ldr	r3, [r7, #8]
 800ca7e:	461d      	mov	r5, r3
 800ca80:	f04f 0600 	mov.w	r6, #0
 800ca84:	46a9      	mov	r9, r5
 800ca86:	46b2      	mov	sl, r6
 800ca88:	eb19 0309 	adds.w	r3, r9, r9
 800ca8c:	eb4a 040a 	adc.w	r4, sl, sl
 800ca90:	4699      	mov	r9, r3
 800ca92:	46a2      	mov	sl, r4
 800ca94:	eb19 0905 	adds.w	r9, r9, r5
 800ca98:	eb4a 0a06 	adc.w	sl, sl, r6
 800ca9c:	f04f 0100 	mov.w	r1, #0
 800caa0:	f04f 0200 	mov.w	r2, #0
 800caa4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800caa8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800caac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800cab0:	4689      	mov	r9, r1
 800cab2:	4692      	mov	sl, r2
 800cab4:	eb19 0005 	adds.w	r0, r9, r5
 800cab8:	eb4a 0106 	adc.w	r1, sl, r6
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	685b      	ldr	r3, [r3, #4]
 800cac0:	461d      	mov	r5, r3
 800cac2:	f04f 0600 	mov.w	r6, #0
 800cac6:	196b      	adds	r3, r5, r5
 800cac8:	eb46 0406 	adc.w	r4, r6, r6
 800cacc:	461a      	mov	r2, r3
 800cace:	4623      	mov	r3, r4
 800cad0:	f7f4 f8ea 	bl	8000ca8 <__aeabi_uldivmod>
 800cad4:	4603      	mov	r3, r0
 800cad6:	460c      	mov	r4, r1
 800cad8:	461a      	mov	r2, r3
 800cada:	4b8b      	ldr	r3, [pc, #556]	; (800cd08 <UART_SetConfig+0x384>)
 800cadc:	fba3 1302 	umull	r1, r3, r3, r2
 800cae0:	095b      	lsrs	r3, r3, #5
 800cae2:	2164      	movs	r1, #100	; 0x64
 800cae4:	fb01 f303 	mul.w	r3, r1, r3
 800cae8:	1ad3      	subs	r3, r2, r3
 800caea:	00db      	lsls	r3, r3, #3
 800caec:	3332      	adds	r3, #50	; 0x32
 800caee:	4a86      	ldr	r2, [pc, #536]	; (800cd08 <UART_SetConfig+0x384>)
 800caf0:	fba2 2303 	umull	r2, r3, r2, r3
 800caf4:	095b      	lsrs	r3, r3, #5
 800caf6:	005b      	lsls	r3, r3, #1
 800caf8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800cafc:	4498      	add	r8, r3
 800cafe:	68bb      	ldr	r3, [r7, #8]
 800cb00:	461d      	mov	r5, r3
 800cb02:	f04f 0600 	mov.w	r6, #0
 800cb06:	46a9      	mov	r9, r5
 800cb08:	46b2      	mov	sl, r6
 800cb0a:	eb19 0309 	adds.w	r3, r9, r9
 800cb0e:	eb4a 040a 	adc.w	r4, sl, sl
 800cb12:	4699      	mov	r9, r3
 800cb14:	46a2      	mov	sl, r4
 800cb16:	eb19 0905 	adds.w	r9, r9, r5
 800cb1a:	eb4a 0a06 	adc.w	sl, sl, r6
 800cb1e:	f04f 0100 	mov.w	r1, #0
 800cb22:	f04f 0200 	mov.w	r2, #0
 800cb26:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cb2a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800cb2e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800cb32:	4689      	mov	r9, r1
 800cb34:	4692      	mov	sl, r2
 800cb36:	eb19 0005 	adds.w	r0, r9, r5
 800cb3a:	eb4a 0106 	adc.w	r1, sl, r6
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	685b      	ldr	r3, [r3, #4]
 800cb42:	461d      	mov	r5, r3
 800cb44:	f04f 0600 	mov.w	r6, #0
 800cb48:	196b      	adds	r3, r5, r5
 800cb4a:	eb46 0406 	adc.w	r4, r6, r6
 800cb4e:	461a      	mov	r2, r3
 800cb50:	4623      	mov	r3, r4
 800cb52:	f7f4 f8a9 	bl	8000ca8 <__aeabi_uldivmod>
 800cb56:	4603      	mov	r3, r0
 800cb58:	460c      	mov	r4, r1
 800cb5a:	461a      	mov	r2, r3
 800cb5c:	4b6a      	ldr	r3, [pc, #424]	; (800cd08 <UART_SetConfig+0x384>)
 800cb5e:	fba3 1302 	umull	r1, r3, r3, r2
 800cb62:	095b      	lsrs	r3, r3, #5
 800cb64:	2164      	movs	r1, #100	; 0x64
 800cb66:	fb01 f303 	mul.w	r3, r1, r3
 800cb6a:	1ad3      	subs	r3, r2, r3
 800cb6c:	00db      	lsls	r3, r3, #3
 800cb6e:	3332      	adds	r3, #50	; 0x32
 800cb70:	4a65      	ldr	r2, [pc, #404]	; (800cd08 <UART_SetConfig+0x384>)
 800cb72:	fba2 2303 	umull	r2, r3, r2, r3
 800cb76:	095b      	lsrs	r3, r3, #5
 800cb78:	f003 0207 	and.w	r2, r3, #7
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	4442      	add	r2, r8
 800cb82:	609a      	str	r2, [r3, #8]
 800cb84:	e26f      	b.n	800d066 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800cb86:	f7ff f863 	bl	800bc50 <HAL_RCC_GetPCLK1Freq>
 800cb8a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800cb8c:	68bb      	ldr	r3, [r7, #8]
 800cb8e:	461d      	mov	r5, r3
 800cb90:	f04f 0600 	mov.w	r6, #0
 800cb94:	46a8      	mov	r8, r5
 800cb96:	46b1      	mov	r9, r6
 800cb98:	eb18 0308 	adds.w	r3, r8, r8
 800cb9c:	eb49 0409 	adc.w	r4, r9, r9
 800cba0:	4698      	mov	r8, r3
 800cba2:	46a1      	mov	r9, r4
 800cba4:	eb18 0805 	adds.w	r8, r8, r5
 800cba8:	eb49 0906 	adc.w	r9, r9, r6
 800cbac:	f04f 0100 	mov.w	r1, #0
 800cbb0:	f04f 0200 	mov.w	r2, #0
 800cbb4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800cbb8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800cbbc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800cbc0:	4688      	mov	r8, r1
 800cbc2:	4691      	mov	r9, r2
 800cbc4:	eb18 0005 	adds.w	r0, r8, r5
 800cbc8:	eb49 0106 	adc.w	r1, r9, r6
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	685b      	ldr	r3, [r3, #4]
 800cbd0:	461d      	mov	r5, r3
 800cbd2:	f04f 0600 	mov.w	r6, #0
 800cbd6:	196b      	adds	r3, r5, r5
 800cbd8:	eb46 0406 	adc.w	r4, r6, r6
 800cbdc:	461a      	mov	r2, r3
 800cbde:	4623      	mov	r3, r4
 800cbe0:	f7f4 f862 	bl	8000ca8 <__aeabi_uldivmod>
 800cbe4:	4603      	mov	r3, r0
 800cbe6:	460c      	mov	r4, r1
 800cbe8:	461a      	mov	r2, r3
 800cbea:	4b47      	ldr	r3, [pc, #284]	; (800cd08 <UART_SetConfig+0x384>)
 800cbec:	fba3 2302 	umull	r2, r3, r3, r2
 800cbf0:	095b      	lsrs	r3, r3, #5
 800cbf2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800cbf6:	68bb      	ldr	r3, [r7, #8]
 800cbf8:	461d      	mov	r5, r3
 800cbfa:	f04f 0600 	mov.w	r6, #0
 800cbfe:	46a9      	mov	r9, r5
 800cc00:	46b2      	mov	sl, r6
 800cc02:	eb19 0309 	adds.w	r3, r9, r9
 800cc06:	eb4a 040a 	adc.w	r4, sl, sl
 800cc0a:	4699      	mov	r9, r3
 800cc0c:	46a2      	mov	sl, r4
 800cc0e:	eb19 0905 	adds.w	r9, r9, r5
 800cc12:	eb4a 0a06 	adc.w	sl, sl, r6
 800cc16:	f04f 0100 	mov.w	r1, #0
 800cc1a:	f04f 0200 	mov.w	r2, #0
 800cc1e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cc22:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800cc26:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800cc2a:	4689      	mov	r9, r1
 800cc2c:	4692      	mov	sl, r2
 800cc2e:	eb19 0005 	adds.w	r0, r9, r5
 800cc32:	eb4a 0106 	adc.w	r1, sl, r6
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	685b      	ldr	r3, [r3, #4]
 800cc3a:	461d      	mov	r5, r3
 800cc3c:	f04f 0600 	mov.w	r6, #0
 800cc40:	196b      	adds	r3, r5, r5
 800cc42:	eb46 0406 	adc.w	r4, r6, r6
 800cc46:	461a      	mov	r2, r3
 800cc48:	4623      	mov	r3, r4
 800cc4a:	f7f4 f82d 	bl	8000ca8 <__aeabi_uldivmod>
 800cc4e:	4603      	mov	r3, r0
 800cc50:	460c      	mov	r4, r1
 800cc52:	461a      	mov	r2, r3
 800cc54:	4b2c      	ldr	r3, [pc, #176]	; (800cd08 <UART_SetConfig+0x384>)
 800cc56:	fba3 1302 	umull	r1, r3, r3, r2
 800cc5a:	095b      	lsrs	r3, r3, #5
 800cc5c:	2164      	movs	r1, #100	; 0x64
 800cc5e:	fb01 f303 	mul.w	r3, r1, r3
 800cc62:	1ad3      	subs	r3, r2, r3
 800cc64:	00db      	lsls	r3, r3, #3
 800cc66:	3332      	adds	r3, #50	; 0x32
 800cc68:	4a27      	ldr	r2, [pc, #156]	; (800cd08 <UART_SetConfig+0x384>)
 800cc6a:	fba2 2303 	umull	r2, r3, r2, r3
 800cc6e:	095b      	lsrs	r3, r3, #5
 800cc70:	005b      	lsls	r3, r3, #1
 800cc72:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800cc76:	4498      	add	r8, r3
 800cc78:	68bb      	ldr	r3, [r7, #8]
 800cc7a:	461d      	mov	r5, r3
 800cc7c:	f04f 0600 	mov.w	r6, #0
 800cc80:	46a9      	mov	r9, r5
 800cc82:	46b2      	mov	sl, r6
 800cc84:	eb19 0309 	adds.w	r3, r9, r9
 800cc88:	eb4a 040a 	adc.w	r4, sl, sl
 800cc8c:	4699      	mov	r9, r3
 800cc8e:	46a2      	mov	sl, r4
 800cc90:	eb19 0905 	adds.w	r9, r9, r5
 800cc94:	eb4a 0a06 	adc.w	sl, sl, r6
 800cc98:	f04f 0100 	mov.w	r1, #0
 800cc9c:	f04f 0200 	mov.w	r2, #0
 800cca0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cca4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800cca8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ccac:	4689      	mov	r9, r1
 800ccae:	4692      	mov	sl, r2
 800ccb0:	eb19 0005 	adds.w	r0, r9, r5
 800ccb4:	eb4a 0106 	adc.w	r1, sl, r6
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	685b      	ldr	r3, [r3, #4]
 800ccbc:	461d      	mov	r5, r3
 800ccbe:	f04f 0600 	mov.w	r6, #0
 800ccc2:	196b      	adds	r3, r5, r5
 800ccc4:	eb46 0406 	adc.w	r4, r6, r6
 800ccc8:	461a      	mov	r2, r3
 800ccca:	4623      	mov	r3, r4
 800cccc:	f7f3 ffec 	bl	8000ca8 <__aeabi_uldivmod>
 800ccd0:	4603      	mov	r3, r0
 800ccd2:	460c      	mov	r4, r1
 800ccd4:	461a      	mov	r2, r3
 800ccd6:	4b0c      	ldr	r3, [pc, #48]	; (800cd08 <UART_SetConfig+0x384>)
 800ccd8:	fba3 1302 	umull	r1, r3, r3, r2
 800ccdc:	095b      	lsrs	r3, r3, #5
 800ccde:	2164      	movs	r1, #100	; 0x64
 800cce0:	fb01 f303 	mul.w	r3, r1, r3
 800cce4:	1ad3      	subs	r3, r2, r3
 800cce6:	00db      	lsls	r3, r3, #3
 800cce8:	3332      	adds	r3, #50	; 0x32
 800ccea:	4a07      	ldr	r2, [pc, #28]	; (800cd08 <UART_SetConfig+0x384>)
 800ccec:	fba2 2303 	umull	r2, r3, r2, r3
 800ccf0:	095b      	lsrs	r3, r3, #5
 800ccf2:	f003 0207 	and.w	r2, r3, #7
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	4442      	add	r2, r8
 800ccfc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800ccfe:	e1b2      	b.n	800d066 <UART_SetConfig+0x6e2>
 800cd00:	40011000 	.word	0x40011000
 800cd04:	40011400 	.word	0x40011400
 800cd08:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	4ad7      	ldr	r2, [pc, #860]	; (800d070 <UART_SetConfig+0x6ec>)
 800cd12:	4293      	cmp	r3, r2
 800cd14:	d005      	beq.n	800cd22 <UART_SetConfig+0x39e>
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	4ad6      	ldr	r2, [pc, #856]	; (800d074 <UART_SetConfig+0x6f0>)
 800cd1c:	4293      	cmp	r3, r2
 800cd1e:	f040 80d1 	bne.w	800cec4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800cd22:	f7fe ffa9 	bl	800bc78 <HAL_RCC_GetPCLK2Freq>
 800cd26:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800cd28:	68bb      	ldr	r3, [r7, #8]
 800cd2a:	469a      	mov	sl, r3
 800cd2c:	f04f 0b00 	mov.w	fp, #0
 800cd30:	46d0      	mov	r8, sl
 800cd32:	46d9      	mov	r9, fp
 800cd34:	eb18 0308 	adds.w	r3, r8, r8
 800cd38:	eb49 0409 	adc.w	r4, r9, r9
 800cd3c:	4698      	mov	r8, r3
 800cd3e:	46a1      	mov	r9, r4
 800cd40:	eb18 080a 	adds.w	r8, r8, sl
 800cd44:	eb49 090b 	adc.w	r9, r9, fp
 800cd48:	f04f 0100 	mov.w	r1, #0
 800cd4c:	f04f 0200 	mov.w	r2, #0
 800cd50:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800cd54:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800cd58:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800cd5c:	4688      	mov	r8, r1
 800cd5e:	4691      	mov	r9, r2
 800cd60:	eb1a 0508 	adds.w	r5, sl, r8
 800cd64:	eb4b 0609 	adc.w	r6, fp, r9
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	685b      	ldr	r3, [r3, #4]
 800cd6c:	4619      	mov	r1, r3
 800cd6e:	f04f 0200 	mov.w	r2, #0
 800cd72:	f04f 0300 	mov.w	r3, #0
 800cd76:	f04f 0400 	mov.w	r4, #0
 800cd7a:	0094      	lsls	r4, r2, #2
 800cd7c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800cd80:	008b      	lsls	r3, r1, #2
 800cd82:	461a      	mov	r2, r3
 800cd84:	4623      	mov	r3, r4
 800cd86:	4628      	mov	r0, r5
 800cd88:	4631      	mov	r1, r6
 800cd8a:	f7f3 ff8d 	bl	8000ca8 <__aeabi_uldivmod>
 800cd8e:	4603      	mov	r3, r0
 800cd90:	460c      	mov	r4, r1
 800cd92:	461a      	mov	r2, r3
 800cd94:	4bb8      	ldr	r3, [pc, #736]	; (800d078 <UART_SetConfig+0x6f4>)
 800cd96:	fba3 2302 	umull	r2, r3, r3, r2
 800cd9a:	095b      	lsrs	r3, r3, #5
 800cd9c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800cda0:	68bb      	ldr	r3, [r7, #8]
 800cda2:	469b      	mov	fp, r3
 800cda4:	f04f 0c00 	mov.w	ip, #0
 800cda8:	46d9      	mov	r9, fp
 800cdaa:	46e2      	mov	sl, ip
 800cdac:	eb19 0309 	adds.w	r3, r9, r9
 800cdb0:	eb4a 040a 	adc.w	r4, sl, sl
 800cdb4:	4699      	mov	r9, r3
 800cdb6:	46a2      	mov	sl, r4
 800cdb8:	eb19 090b 	adds.w	r9, r9, fp
 800cdbc:	eb4a 0a0c 	adc.w	sl, sl, ip
 800cdc0:	f04f 0100 	mov.w	r1, #0
 800cdc4:	f04f 0200 	mov.w	r2, #0
 800cdc8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cdcc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800cdd0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800cdd4:	4689      	mov	r9, r1
 800cdd6:	4692      	mov	sl, r2
 800cdd8:	eb1b 0509 	adds.w	r5, fp, r9
 800cddc:	eb4c 060a 	adc.w	r6, ip, sl
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	685b      	ldr	r3, [r3, #4]
 800cde4:	4619      	mov	r1, r3
 800cde6:	f04f 0200 	mov.w	r2, #0
 800cdea:	f04f 0300 	mov.w	r3, #0
 800cdee:	f04f 0400 	mov.w	r4, #0
 800cdf2:	0094      	lsls	r4, r2, #2
 800cdf4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800cdf8:	008b      	lsls	r3, r1, #2
 800cdfa:	461a      	mov	r2, r3
 800cdfc:	4623      	mov	r3, r4
 800cdfe:	4628      	mov	r0, r5
 800ce00:	4631      	mov	r1, r6
 800ce02:	f7f3 ff51 	bl	8000ca8 <__aeabi_uldivmod>
 800ce06:	4603      	mov	r3, r0
 800ce08:	460c      	mov	r4, r1
 800ce0a:	461a      	mov	r2, r3
 800ce0c:	4b9a      	ldr	r3, [pc, #616]	; (800d078 <UART_SetConfig+0x6f4>)
 800ce0e:	fba3 1302 	umull	r1, r3, r3, r2
 800ce12:	095b      	lsrs	r3, r3, #5
 800ce14:	2164      	movs	r1, #100	; 0x64
 800ce16:	fb01 f303 	mul.w	r3, r1, r3
 800ce1a:	1ad3      	subs	r3, r2, r3
 800ce1c:	011b      	lsls	r3, r3, #4
 800ce1e:	3332      	adds	r3, #50	; 0x32
 800ce20:	4a95      	ldr	r2, [pc, #596]	; (800d078 <UART_SetConfig+0x6f4>)
 800ce22:	fba2 2303 	umull	r2, r3, r2, r3
 800ce26:	095b      	lsrs	r3, r3, #5
 800ce28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ce2c:	4498      	add	r8, r3
 800ce2e:	68bb      	ldr	r3, [r7, #8]
 800ce30:	469b      	mov	fp, r3
 800ce32:	f04f 0c00 	mov.w	ip, #0
 800ce36:	46d9      	mov	r9, fp
 800ce38:	46e2      	mov	sl, ip
 800ce3a:	eb19 0309 	adds.w	r3, r9, r9
 800ce3e:	eb4a 040a 	adc.w	r4, sl, sl
 800ce42:	4699      	mov	r9, r3
 800ce44:	46a2      	mov	sl, r4
 800ce46:	eb19 090b 	adds.w	r9, r9, fp
 800ce4a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ce4e:	f04f 0100 	mov.w	r1, #0
 800ce52:	f04f 0200 	mov.w	r2, #0
 800ce56:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ce5a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ce5e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ce62:	4689      	mov	r9, r1
 800ce64:	4692      	mov	sl, r2
 800ce66:	eb1b 0509 	adds.w	r5, fp, r9
 800ce6a:	eb4c 060a 	adc.w	r6, ip, sl
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	685b      	ldr	r3, [r3, #4]
 800ce72:	4619      	mov	r1, r3
 800ce74:	f04f 0200 	mov.w	r2, #0
 800ce78:	f04f 0300 	mov.w	r3, #0
 800ce7c:	f04f 0400 	mov.w	r4, #0
 800ce80:	0094      	lsls	r4, r2, #2
 800ce82:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ce86:	008b      	lsls	r3, r1, #2
 800ce88:	461a      	mov	r2, r3
 800ce8a:	4623      	mov	r3, r4
 800ce8c:	4628      	mov	r0, r5
 800ce8e:	4631      	mov	r1, r6
 800ce90:	f7f3 ff0a 	bl	8000ca8 <__aeabi_uldivmod>
 800ce94:	4603      	mov	r3, r0
 800ce96:	460c      	mov	r4, r1
 800ce98:	461a      	mov	r2, r3
 800ce9a:	4b77      	ldr	r3, [pc, #476]	; (800d078 <UART_SetConfig+0x6f4>)
 800ce9c:	fba3 1302 	umull	r1, r3, r3, r2
 800cea0:	095b      	lsrs	r3, r3, #5
 800cea2:	2164      	movs	r1, #100	; 0x64
 800cea4:	fb01 f303 	mul.w	r3, r1, r3
 800cea8:	1ad3      	subs	r3, r2, r3
 800ceaa:	011b      	lsls	r3, r3, #4
 800ceac:	3332      	adds	r3, #50	; 0x32
 800ceae:	4a72      	ldr	r2, [pc, #456]	; (800d078 <UART_SetConfig+0x6f4>)
 800ceb0:	fba2 2303 	umull	r2, r3, r2, r3
 800ceb4:	095b      	lsrs	r3, r3, #5
 800ceb6:	f003 020f 	and.w	r2, r3, #15
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	4442      	add	r2, r8
 800cec0:	609a      	str	r2, [r3, #8]
 800cec2:	e0d0      	b.n	800d066 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800cec4:	f7fe fec4 	bl	800bc50 <HAL_RCC_GetPCLK1Freq>
 800cec8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ceca:	68bb      	ldr	r3, [r7, #8]
 800cecc:	469a      	mov	sl, r3
 800cece:	f04f 0b00 	mov.w	fp, #0
 800ced2:	46d0      	mov	r8, sl
 800ced4:	46d9      	mov	r9, fp
 800ced6:	eb18 0308 	adds.w	r3, r8, r8
 800ceda:	eb49 0409 	adc.w	r4, r9, r9
 800cede:	4698      	mov	r8, r3
 800cee0:	46a1      	mov	r9, r4
 800cee2:	eb18 080a 	adds.w	r8, r8, sl
 800cee6:	eb49 090b 	adc.w	r9, r9, fp
 800ceea:	f04f 0100 	mov.w	r1, #0
 800ceee:	f04f 0200 	mov.w	r2, #0
 800cef2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800cef6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800cefa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800cefe:	4688      	mov	r8, r1
 800cf00:	4691      	mov	r9, r2
 800cf02:	eb1a 0508 	adds.w	r5, sl, r8
 800cf06:	eb4b 0609 	adc.w	r6, fp, r9
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	685b      	ldr	r3, [r3, #4]
 800cf0e:	4619      	mov	r1, r3
 800cf10:	f04f 0200 	mov.w	r2, #0
 800cf14:	f04f 0300 	mov.w	r3, #0
 800cf18:	f04f 0400 	mov.w	r4, #0
 800cf1c:	0094      	lsls	r4, r2, #2
 800cf1e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800cf22:	008b      	lsls	r3, r1, #2
 800cf24:	461a      	mov	r2, r3
 800cf26:	4623      	mov	r3, r4
 800cf28:	4628      	mov	r0, r5
 800cf2a:	4631      	mov	r1, r6
 800cf2c:	f7f3 febc 	bl	8000ca8 <__aeabi_uldivmod>
 800cf30:	4603      	mov	r3, r0
 800cf32:	460c      	mov	r4, r1
 800cf34:	461a      	mov	r2, r3
 800cf36:	4b50      	ldr	r3, [pc, #320]	; (800d078 <UART_SetConfig+0x6f4>)
 800cf38:	fba3 2302 	umull	r2, r3, r3, r2
 800cf3c:	095b      	lsrs	r3, r3, #5
 800cf3e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800cf42:	68bb      	ldr	r3, [r7, #8]
 800cf44:	469b      	mov	fp, r3
 800cf46:	f04f 0c00 	mov.w	ip, #0
 800cf4a:	46d9      	mov	r9, fp
 800cf4c:	46e2      	mov	sl, ip
 800cf4e:	eb19 0309 	adds.w	r3, r9, r9
 800cf52:	eb4a 040a 	adc.w	r4, sl, sl
 800cf56:	4699      	mov	r9, r3
 800cf58:	46a2      	mov	sl, r4
 800cf5a:	eb19 090b 	adds.w	r9, r9, fp
 800cf5e:	eb4a 0a0c 	adc.w	sl, sl, ip
 800cf62:	f04f 0100 	mov.w	r1, #0
 800cf66:	f04f 0200 	mov.w	r2, #0
 800cf6a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cf6e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800cf72:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800cf76:	4689      	mov	r9, r1
 800cf78:	4692      	mov	sl, r2
 800cf7a:	eb1b 0509 	adds.w	r5, fp, r9
 800cf7e:	eb4c 060a 	adc.w	r6, ip, sl
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	685b      	ldr	r3, [r3, #4]
 800cf86:	4619      	mov	r1, r3
 800cf88:	f04f 0200 	mov.w	r2, #0
 800cf8c:	f04f 0300 	mov.w	r3, #0
 800cf90:	f04f 0400 	mov.w	r4, #0
 800cf94:	0094      	lsls	r4, r2, #2
 800cf96:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800cf9a:	008b      	lsls	r3, r1, #2
 800cf9c:	461a      	mov	r2, r3
 800cf9e:	4623      	mov	r3, r4
 800cfa0:	4628      	mov	r0, r5
 800cfa2:	4631      	mov	r1, r6
 800cfa4:	f7f3 fe80 	bl	8000ca8 <__aeabi_uldivmod>
 800cfa8:	4603      	mov	r3, r0
 800cfaa:	460c      	mov	r4, r1
 800cfac:	461a      	mov	r2, r3
 800cfae:	4b32      	ldr	r3, [pc, #200]	; (800d078 <UART_SetConfig+0x6f4>)
 800cfb0:	fba3 1302 	umull	r1, r3, r3, r2
 800cfb4:	095b      	lsrs	r3, r3, #5
 800cfb6:	2164      	movs	r1, #100	; 0x64
 800cfb8:	fb01 f303 	mul.w	r3, r1, r3
 800cfbc:	1ad3      	subs	r3, r2, r3
 800cfbe:	011b      	lsls	r3, r3, #4
 800cfc0:	3332      	adds	r3, #50	; 0x32
 800cfc2:	4a2d      	ldr	r2, [pc, #180]	; (800d078 <UART_SetConfig+0x6f4>)
 800cfc4:	fba2 2303 	umull	r2, r3, r2, r3
 800cfc8:	095b      	lsrs	r3, r3, #5
 800cfca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cfce:	4498      	add	r8, r3
 800cfd0:	68bb      	ldr	r3, [r7, #8]
 800cfd2:	469b      	mov	fp, r3
 800cfd4:	f04f 0c00 	mov.w	ip, #0
 800cfd8:	46d9      	mov	r9, fp
 800cfda:	46e2      	mov	sl, ip
 800cfdc:	eb19 0309 	adds.w	r3, r9, r9
 800cfe0:	eb4a 040a 	adc.w	r4, sl, sl
 800cfe4:	4699      	mov	r9, r3
 800cfe6:	46a2      	mov	sl, r4
 800cfe8:	eb19 090b 	adds.w	r9, r9, fp
 800cfec:	eb4a 0a0c 	adc.w	sl, sl, ip
 800cff0:	f04f 0100 	mov.w	r1, #0
 800cff4:	f04f 0200 	mov.w	r2, #0
 800cff8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cffc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d000:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d004:	4689      	mov	r9, r1
 800d006:	4692      	mov	sl, r2
 800d008:	eb1b 0509 	adds.w	r5, fp, r9
 800d00c:	eb4c 060a 	adc.w	r6, ip, sl
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	685b      	ldr	r3, [r3, #4]
 800d014:	4619      	mov	r1, r3
 800d016:	f04f 0200 	mov.w	r2, #0
 800d01a:	f04f 0300 	mov.w	r3, #0
 800d01e:	f04f 0400 	mov.w	r4, #0
 800d022:	0094      	lsls	r4, r2, #2
 800d024:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d028:	008b      	lsls	r3, r1, #2
 800d02a:	461a      	mov	r2, r3
 800d02c:	4623      	mov	r3, r4
 800d02e:	4628      	mov	r0, r5
 800d030:	4631      	mov	r1, r6
 800d032:	f7f3 fe39 	bl	8000ca8 <__aeabi_uldivmod>
 800d036:	4603      	mov	r3, r0
 800d038:	460c      	mov	r4, r1
 800d03a:	461a      	mov	r2, r3
 800d03c:	4b0e      	ldr	r3, [pc, #56]	; (800d078 <UART_SetConfig+0x6f4>)
 800d03e:	fba3 1302 	umull	r1, r3, r3, r2
 800d042:	095b      	lsrs	r3, r3, #5
 800d044:	2164      	movs	r1, #100	; 0x64
 800d046:	fb01 f303 	mul.w	r3, r1, r3
 800d04a:	1ad3      	subs	r3, r2, r3
 800d04c:	011b      	lsls	r3, r3, #4
 800d04e:	3332      	adds	r3, #50	; 0x32
 800d050:	4a09      	ldr	r2, [pc, #36]	; (800d078 <UART_SetConfig+0x6f4>)
 800d052:	fba2 2303 	umull	r2, r3, r2, r3
 800d056:	095b      	lsrs	r3, r3, #5
 800d058:	f003 020f 	and.w	r2, r3, #15
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	4442      	add	r2, r8
 800d062:	609a      	str	r2, [r3, #8]
}
 800d064:	e7ff      	b.n	800d066 <UART_SetConfig+0x6e2>
 800d066:	bf00      	nop
 800d068:	3714      	adds	r7, #20
 800d06a:	46bd      	mov	sp, r7
 800d06c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d070:	40011000 	.word	0x40011000
 800d074:	40011400 	.word	0x40011400
 800d078:	51eb851f 	.word	0x51eb851f

0800d07c <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800d07c:	b480      	push	{r7}
 800d07e:	b085      	sub	sp, #20
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
 800d084:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800d086:	2300      	movs	r3, #0
 800d088:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800d08a:	683b      	ldr	r3, [r7, #0]
 800d08c:	681a      	ldr	r2, [r3, #0]
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d094:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800d096:	68fa      	ldr	r2, [r7, #12]
 800d098:	4b20      	ldr	r3, [pc, #128]	; (800d11c <FSMC_NORSRAM_Init+0xa0>)
 800d09a:	4013      	ands	r3, r2
 800d09c:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800d09e:	683b      	ldr	r3, [r7, #0]
 800d0a0:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800d0a2:	683b      	ldr	r3, [r7, #0]
 800d0a4:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800d0a6:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800d0ac:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800d0ae:	683b      	ldr	r3, [r7, #0]
 800d0b0:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800d0b2:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800d0b4:	683b      	ldr	r3, [r7, #0]
 800d0b6:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800d0b8:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800d0ba:	683b      	ldr	r3, [r7, #0]
 800d0bc:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800d0be:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800d0c0:	683b      	ldr	r3, [r7, #0]
 800d0c2:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 800d0c4:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800d0c6:	683b      	ldr	r3, [r7, #0]
 800d0c8:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800d0ca:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800d0cc:	683b      	ldr	r3, [r7, #0]
 800d0ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800d0d0:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800d0d2:	683b      	ldr	r3, [r7, #0]
 800d0d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800d0d6:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800d0d8:	683b      	ldr	r3, [r7, #0]
 800d0da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800d0dc:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800d0de:	683b      	ldr	r3, [r7, #0]
 800d0e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800d0e2:	431a      	orrs	r2, r3
                     Init->WriteBurst
 800d0e4:	683b      	ldr	r3, [r7, #0]
 800d0e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 800d0e8:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800d0ea:	68fa      	ldr	r2, [r7, #12]
 800d0ec:	4313      	orrs	r3, r2
 800d0ee:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800d0f0:	683b      	ldr	r3, [r7, #0]
 800d0f2:	689b      	ldr	r3, [r3, #8]
 800d0f4:	2b08      	cmp	r3, #8
 800d0f6:	d103      	bne.n	800d100 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d0fe:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800d100:	683b      	ldr	r3, [r7, #0]
 800d102:	681a      	ldr	r2, [r3, #0]
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	68f9      	ldr	r1, [r7, #12]
 800d108:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800d10c:	2300      	movs	r3, #0
}
 800d10e:	4618      	mov	r0, r3
 800d110:	3714      	adds	r7, #20
 800d112:	46bd      	mov	sp, r7
 800d114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d118:	4770      	bx	lr
 800d11a:	bf00      	nop
 800d11c:	fff00080 	.word	0xfff00080

0800d120 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800d120:	b480      	push	{r7}
 800d122:	b087      	sub	sp, #28
 800d124:	af00      	add	r7, sp, #0
 800d126:	60f8      	str	r0, [r7, #12]
 800d128:	60b9      	str	r1, [r7, #8]
 800d12a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800d12c:	2300      	movs	r3, #0
 800d12e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	1c5a      	adds	r2, r3, #1
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d13a:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800d13c:	697b      	ldr	r3, [r7, #20]
 800d13e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800d142:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800d144:	68bb      	ldr	r3, [r7, #8]
 800d146:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800d148:	68bb      	ldr	r3, [r7, #8]
 800d14a:	685b      	ldr	r3, [r3, #4]
 800d14c:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800d14e:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800d150:	68bb      	ldr	r3, [r7, #8]
 800d152:	689b      	ldr	r3, [r3, #8]
 800d154:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800d156:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800d158:	68bb      	ldr	r3, [r7, #8]
 800d15a:	68db      	ldr	r3, [r3, #12]
 800d15c:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800d15e:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800d160:	68bb      	ldr	r3, [r7, #8]
 800d162:	691b      	ldr	r3, [r3, #16]
 800d164:	3b01      	subs	r3, #1
 800d166:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800d168:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800d16a:	68bb      	ldr	r3, [r7, #8]
 800d16c:	695b      	ldr	r3, [r3, #20]
 800d16e:	3b02      	subs	r3, #2
 800d170:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800d172:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800d174:	68bb      	ldr	r3, [r7, #8]
 800d176:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800d178:	4313      	orrs	r3, r2
 800d17a:	697a      	ldr	r2, [r7, #20]
 800d17c:	4313      	orrs	r3, r2
 800d17e:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	1c5a      	adds	r2, r3, #1
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	6979      	ldr	r1, [r7, #20]
 800d188:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800d18c:	2300      	movs	r3, #0
}
 800d18e:	4618      	mov	r0, r3
 800d190:	371c      	adds	r7, #28
 800d192:	46bd      	mov	sp, r7
 800d194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d198:	4770      	bx	lr
	...

0800d19c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800d19c:	b480      	push	{r7}
 800d19e:	b087      	sub	sp, #28
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	60f8      	str	r0, [r7, #12]
 800d1a4:	60b9      	str	r1, [r7, #8]
 800d1a6:	607a      	str	r2, [r7, #4]
 800d1a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800d1ae:	683b      	ldr	r3, [r7, #0]
 800d1b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d1b4:	d122      	bne.n	800d1fc <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	687a      	ldr	r2, [r7, #4]
 800d1ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1be:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800d1c0:	697a      	ldr	r2, [r7, #20]
 800d1c2:	4b15      	ldr	r3, [pc, #84]	; (800d218 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800d1c4:	4013      	ands	r3, r2
 800d1c6:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800d1c8:	68bb      	ldr	r3, [r7, #8]
 800d1ca:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800d1cc:	68bb      	ldr	r3, [r7, #8]
 800d1ce:	685b      	ldr	r3, [r3, #4]
 800d1d0:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800d1d2:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800d1d4:	68bb      	ldr	r3, [r7, #8]
 800d1d6:	689b      	ldr	r3, [r3, #8]
 800d1d8:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800d1da:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800d1dc:	68bb      	ldr	r3, [r7, #8]
 800d1de:	68db      	ldr	r3, [r3, #12]
 800d1e0:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800d1e2:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800d1e4:	68bb      	ldr	r3, [r7, #8]
 800d1e6:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800d1e8:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800d1ea:	697a      	ldr	r2, [r7, #20]
 800d1ec:	4313      	orrs	r3, r2
 800d1ee:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	687a      	ldr	r2, [r7, #4]
 800d1f4:	6979      	ldr	r1, [r7, #20]
 800d1f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800d1fa:	e005      	b.n	800d208 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	687a      	ldr	r2, [r7, #4]
 800d200:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800d204:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800d208:	2300      	movs	r3, #0
}
 800d20a:	4618      	mov	r0, r3
 800d20c:	371c      	adds	r7, #28
 800d20e:	46bd      	mov	sp, r7
 800d210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d214:	4770      	bx	lr
 800d216:	bf00      	nop
 800d218:	cff00000 	.word	0xcff00000

0800d21c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d21c:	b084      	sub	sp, #16
 800d21e:	b580      	push	{r7, lr}
 800d220:	b084      	sub	sp, #16
 800d222:	af00      	add	r7, sp, #0
 800d224:	6078      	str	r0, [r7, #4]
 800d226:	f107 001c 	add.w	r0, r7, #28
 800d22a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d22e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d230:	2b01      	cmp	r3, #1
 800d232:	d122      	bne.n	800d27a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d238:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	68db      	ldr	r3, [r3, #12]
 800d244:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800d248:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d24c:	687a      	ldr	r2, [r7, #4]
 800d24e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	68db      	ldr	r3, [r3, #12]
 800d254:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d25c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d25e:	2b01      	cmp	r3, #1
 800d260:	d105      	bne.n	800d26e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	68db      	ldr	r3, [r3, #12]
 800d266:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800d26e:	6878      	ldr	r0, [r7, #4]
 800d270:	f001 fa7c 	bl	800e76c <USB_CoreReset>
 800d274:	4603      	mov	r3, r0
 800d276:	73fb      	strb	r3, [r7, #15]
 800d278:	e01a      	b.n	800d2b0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	68db      	ldr	r3, [r3, #12]
 800d27e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800d286:	6878      	ldr	r0, [r7, #4]
 800d288:	f001 fa70 	bl	800e76c <USB_CoreReset>
 800d28c:	4603      	mov	r3, r0
 800d28e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800d290:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d292:	2b00      	cmp	r3, #0
 800d294:	d106      	bne.n	800d2a4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d29a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	639a      	str	r2, [r3, #56]	; 0x38
 800d2a2:	e005      	b.n	800d2b0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800d2b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2b2:	2b01      	cmp	r3, #1
 800d2b4:	d10b      	bne.n	800d2ce <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	689b      	ldr	r3, [r3, #8]
 800d2ba:	f043 0206 	orr.w	r2, r3, #6
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	689b      	ldr	r3, [r3, #8]
 800d2c6:	f043 0220 	orr.w	r2, r3, #32
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d2ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	3710      	adds	r7, #16
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d2da:	b004      	add	sp, #16
 800d2dc:	4770      	bx	lr
	...

0800d2e0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800d2e0:	b480      	push	{r7}
 800d2e2:	b087      	sub	sp, #28
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	60f8      	str	r0, [r7, #12]
 800d2e8:	60b9      	str	r1, [r7, #8]
 800d2ea:	4613      	mov	r3, r2
 800d2ec:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800d2ee:	79fb      	ldrb	r3, [r7, #7]
 800d2f0:	2b02      	cmp	r3, #2
 800d2f2:	d165      	bne.n	800d3c0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800d2f4:	68bb      	ldr	r3, [r7, #8]
 800d2f6:	4a41      	ldr	r2, [pc, #260]	; (800d3fc <USB_SetTurnaroundTime+0x11c>)
 800d2f8:	4293      	cmp	r3, r2
 800d2fa:	d906      	bls.n	800d30a <USB_SetTurnaroundTime+0x2a>
 800d2fc:	68bb      	ldr	r3, [r7, #8]
 800d2fe:	4a40      	ldr	r2, [pc, #256]	; (800d400 <USB_SetTurnaroundTime+0x120>)
 800d300:	4293      	cmp	r3, r2
 800d302:	d802      	bhi.n	800d30a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800d304:	230f      	movs	r3, #15
 800d306:	617b      	str	r3, [r7, #20]
 800d308:	e062      	b.n	800d3d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800d30a:	68bb      	ldr	r3, [r7, #8]
 800d30c:	4a3c      	ldr	r2, [pc, #240]	; (800d400 <USB_SetTurnaroundTime+0x120>)
 800d30e:	4293      	cmp	r3, r2
 800d310:	d906      	bls.n	800d320 <USB_SetTurnaroundTime+0x40>
 800d312:	68bb      	ldr	r3, [r7, #8]
 800d314:	4a3b      	ldr	r2, [pc, #236]	; (800d404 <USB_SetTurnaroundTime+0x124>)
 800d316:	4293      	cmp	r3, r2
 800d318:	d802      	bhi.n	800d320 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800d31a:	230e      	movs	r3, #14
 800d31c:	617b      	str	r3, [r7, #20]
 800d31e:	e057      	b.n	800d3d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800d320:	68bb      	ldr	r3, [r7, #8]
 800d322:	4a38      	ldr	r2, [pc, #224]	; (800d404 <USB_SetTurnaroundTime+0x124>)
 800d324:	4293      	cmp	r3, r2
 800d326:	d906      	bls.n	800d336 <USB_SetTurnaroundTime+0x56>
 800d328:	68bb      	ldr	r3, [r7, #8]
 800d32a:	4a37      	ldr	r2, [pc, #220]	; (800d408 <USB_SetTurnaroundTime+0x128>)
 800d32c:	4293      	cmp	r3, r2
 800d32e:	d802      	bhi.n	800d336 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800d330:	230d      	movs	r3, #13
 800d332:	617b      	str	r3, [r7, #20]
 800d334:	e04c      	b.n	800d3d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800d336:	68bb      	ldr	r3, [r7, #8]
 800d338:	4a33      	ldr	r2, [pc, #204]	; (800d408 <USB_SetTurnaroundTime+0x128>)
 800d33a:	4293      	cmp	r3, r2
 800d33c:	d906      	bls.n	800d34c <USB_SetTurnaroundTime+0x6c>
 800d33e:	68bb      	ldr	r3, [r7, #8]
 800d340:	4a32      	ldr	r2, [pc, #200]	; (800d40c <USB_SetTurnaroundTime+0x12c>)
 800d342:	4293      	cmp	r3, r2
 800d344:	d802      	bhi.n	800d34c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800d346:	230c      	movs	r3, #12
 800d348:	617b      	str	r3, [r7, #20]
 800d34a:	e041      	b.n	800d3d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800d34c:	68bb      	ldr	r3, [r7, #8]
 800d34e:	4a2f      	ldr	r2, [pc, #188]	; (800d40c <USB_SetTurnaroundTime+0x12c>)
 800d350:	4293      	cmp	r3, r2
 800d352:	d906      	bls.n	800d362 <USB_SetTurnaroundTime+0x82>
 800d354:	68bb      	ldr	r3, [r7, #8]
 800d356:	4a2e      	ldr	r2, [pc, #184]	; (800d410 <USB_SetTurnaroundTime+0x130>)
 800d358:	4293      	cmp	r3, r2
 800d35a:	d802      	bhi.n	800d362 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800d35c:	230b      	movs	r3, #11
 800d35e:	617b      	str	r3, [r7, #20]
 800d360:	e036      	b.n	800d3d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800d362:	68bb      	ldr	r3, [r7, #8]
 800d364:	4a2a      	ldr	r2, [pc, #168]	; (800d410 <USB_SetTurnaroundTime+0x130>)
 800d366:	4293      	cmp	r3, r2
 800d368:	d906      	bls.n	800d378 <USB_SetTurnaroundTime+0x98>
 800d36a:	68bb      	ldr	r3, [r7, #8]
 800d36c:	4a29      	ldr	r2, [pc, #164]	; (800d414 <USB_SetTurnaroundTime+0x134>)
 800d36e:	4293      	cmp	r3, r2
 800d370:	d802      	bhi.n	800d378 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800d372:	230a      	movs	r3, #10
 800d374:	617b      	str	r3, [r7, #20]
 800d376:	e02b      	b.n	800d3d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800d378:	68bb      	ldr	r3, [r7, #8]
 800d37a:	4a26      	ldr	r2, [pc, #152]	; (800d414 <USB_SetTurnaroundTime+0x134>)
 800d37c:	4293      	cmp	r3, r2
 800d37e:	d906      	bls.n	800d38e <USB_SetTurnaroundTime+0xae>
 800d380:	68bb      	ldr	r3, [r7, #8]
 800d382:	4a25      	ldr	r2, [pc, #148]	; (800d418 <USB_SetTurnaroundTime+0x138>)
 800d384:	4293      	cmp	r3, r2
 800d386:	d802      	bhi.n	800d38e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800d388:	2309      	movs	r3, #9
 800d38a:	617b      	str	r3, [r7, #20]
 800d38c:	e020      	b.n	800d3d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800d38e:	68bb      	ldr	r3, [r7, #8]
 800d390:	4a21      	ldr	r2, [pc, #132]	; (800d418 <USB_SetTurnaroundTime+0x138>)
 800d392:	4293      	cmp	r3, r2
 800d394:	d906      	bls.n	800d3a4 <USB_SetTurnaroundTime+0xc4>
 800d396:	68bb      	ldr	r3, [r7, #8]
 800d398:	4a20      	ldr	r2, [pc, #128]	; (800d41c <USB_SetTurnaroundTime+0x13c>)
 800d39a:	4293      	cmp	r3, r2
 800d39c:	d802      	bhi.n	800d3a4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800d39e:	2308      	movs	r3, #8
 800d3a0:	617b      	str	r3, [r7, #20]
 800d3a2:	e015      	b.n	800d3d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800d3a4:	68bb      	ldr	r3, [r7, #8]
 800d3a6:	4a1d      	ldr	r2, [pc, #116]	; (800d41c <USB_SetTurnaroundTime+0x13c>)
 800d3a8:	4293      	cmp	r3, r2
 800d3aa:	d906      	bls.n	800d3ba <USB_SetTurnaroundTime+0xda>
 800d3ac:	68bb      	ldr	r3, [r7, #8]
 800d3ae:	4a1c      	ldr	r2, [pc, #112]	; (800d420 <USB_SetTurnaroundTime+0x140>)
 800d3b0:	4293      	cmp	r3, r2
 800d3b2:	d802      	bhi.n	800d3ba <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800d3b4:	2307      	movs	r3, #7
 800d3b6:	617b      	str	r3, [r7, #20]
 800d3b8:	e00a      	b.n	800d3d0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800d3ba:	2306      	movs	r3, #6
 800d3bc:	617b      	str	r3, [r7, #20]
 800d3be:	e007      	b.n	800d3d0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800d3c0:	79fb      	ldrb	r3, [r7, #7]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d102      	bne.n	800d3cc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800d3c6:	2309      	movs	r3, #9
 800d3c8:	617b      	str	r3, [r7, #20]
 800d3ca:	e001      	b.n	800d3d0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800d3cc:	2309      	movs	r3, #9
 800d3ce:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	68db      	ldr	r3, [r3, #12]
 800d3d4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	68da      	ldr	r2, [r3, #12]
 800d3e0:	697b      	ldr	r3, [r7, #20]
 800d3e2:	029b      	lsls	r3, r3, #10
 800d3e4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800d3e8:	431a      	orrs	r2, r3
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d3ee:	2300      	movs	r3, #0
}
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	371c      	adds	r7, #28
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3fa:	4770      	bx	lr
 800d3fc:	00d8acbf 	.word	0x00d8acbf
 800d400:	00e4e1bf 	.word	0x00e4e1bf
 800d404:	00f423ff 	.word	0x00f423ff
 800d408:	0106737f 	.word	0x0106737f
 800d40c:	011a499f 	.word	0x011a499f
 800d410:	01312cff 	.word	0x01312cff
 800d414:	014ca43f 	.word	0x014ca43f
 800d418:	016e35ff 	.word	0x016e35ff
 800d41c:	01a6ab1f 	.word	0x01a6ab1f
 800d420:	01e847ff 	.word	0x01e847ff

0800d424 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d424:	b480      	push	{r7}
 800d426:	b083      	sub	sp, #12
 800d428:	af00      	add	r7, sp, #0
 800d42a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	689b      	ldr	r3, [r3, #8]
 800d430:	f043 0201 	orr.w	r2, r3, #1
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d438:	2300      	movs	r3, #0
}
 800d43a:	4618      	mov	r0, r3
 800d43c:	370c      	adds	r7, #12
 800d43e:	46bd      	mov	sp, r7
 800d440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d444:	4770      	bx	lr

0800d446 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d446:	b480      	push	{r7}
 800d448:	b083      	sub	sp, #12
 800d44a:	af00      	add	r7, sp, #0
 800d44c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	689b      	ldr	r3, [r3, #8]
 800d452:	f023 0201 	bic.w	r2, r3, #1
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d45a:	2300      	movs	r3, #0
}
 800d45c:	4618      	mov	r0, r3
 800d45e:	370c      	adds	r7, #12
 800d460:	46bd      	mov	sp, r7
 800d462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d466:	4770      	bx	lr

0800d468 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b082      	sub	sp, #8
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
 800d470:	460b      	mov	r3, r1
 800d472:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	68db      	ldr	r3, [r3, #12]
 800d478:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d480:	78fb      	ldrb	r3, [r7, #3]
 800d482:	2b01      	cmp	r3, #1
 800d484:	d106      	bne.n	800d494 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	68db      	ldr	r3, [r3, #12]
 800d48a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	60da      	str	r2, [r3, #12]
 800d492:	e00b      	b.n	800d4ac <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800d494:	78fb      	ldrb	r3, [r7, #3]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d106      	bne.n	800d4a8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	68db      	ldr	r3, [r3, #12]
 800d49e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	60da      	str	r2, [r3, #12]
 800d4a6:	e001      	b.n	800d4ac <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800d4a8:	2301      	movs	r3, #1
 800d4aa:	e003      	b.n	800d4b4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800d4ac:	2032      	movs	r0, #50	; 0x32
 800d4ae:	f7fb ff5f 	bl	8009370 <HAL_Delay>

  return HAL_OK;
 800d4b2:	2300      	movs	r3, #0
}
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	3708      	adds	r7, #8
 800d4b8:	46bd      	mov	sp, r7
 800d4ba:	bd80      	pop	{r7, pc}

0800d4bc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d4bc:	b084      	sub	sp, #16
 800d4be:	b580      	push	{r7, lr}
 800d4c0:	b086      	sub	sp, #24
 800d4c2:	af00      	add	r7, sp, #0
 800d4c4:	6078      	str	r0, [r7, #4]
 800d4c6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800d4ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	613b      	str	r3, [r7, #16]
 800d4da:	e009      	b.n	800d4f0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d4dc:	687a      	ldr	r2, [r7, #4]
 800d4de:	693b      	ldr	r3, [r7, #16]
 800d4e0:	3340      	adds	r3, #64	; 0x40
 800d4e2:	009b      	lsls	r3, r3, #2
 800d4e4:	4413      	add	r3, r2
 800d4e6:	2200      	movs	r2, #0
 800d4e8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d4ea:	693b      	ldr	r3, [r7, #16]
 800d4ec:	3301      	adds	r3, #1
 800d4ee:	613b      	str	r3, [r7, #16]
 800d4f0:	693b      	ldr	r3, [r7, #16]
 800d4f2:	2b0e      	cmp	r3, #14
 800d4f4:	d9f2      	bls.n	800d4dc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d4f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d112      	bne.n	800d522 <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d500:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d50c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d518:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	639a      	str	r2, [r3, #56]	; 0x38
 800d520:	e00b      	b.n	800d53a <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d532:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d540:	461a      	mov	r2, r3
 800d542:	2300      	movs	r3, #0
 800d544:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d54c:	4619      	mov	r1, r3
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d554:	461a      	mov	r2, r3
 800d556:	680b      	ldr	r3, [r1, #0]
 800d558:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d55a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d55c:	2b01      	cmp	r3, #1
 800d55e:	d10c      	bne.n	800d57a <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800d560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d562:	2b00      	cmp	r3, #0
 800d564:	d104      	bne.n	800d570 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800d566:	2100      	movs	r1, #0
 800d568:	6878      	ldr	r0, [r7, #4]
 800d56a:	f000 f961 	bl	800d830 <USB_SetDevSpeed>
 800d56e:	e008      	b.n	800d582 <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d570:	2101      	movs	r1, #1
 800d572:	6878      	ldr	r0, [r7, #4]
 800d574:	f000 f95c 	bl	800d830 <USB_SetDevSpeed>
 800d578:	e003      	b.n	800d582 <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d57a:	2103      	movs	r1, #3
 800d57c:	6878      	ldr	r0, [r7, #4]
 800d57e:	f000 f957 	bl	800d830 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d582:	2110      	movs	r1, #16
 800d584:	6878      	ldr	r0, [r7, #4]
 800d586:	f000 f90b 	bl	800d7a0 <USB_FlushTxFifo>
 800d58a:	4603      	mov	r3, r0
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d001      	beq.n	800d594 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 800d590:	2301      	movs	r3, #1
 800d592:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d594:	6878      	ldr	r0, [r7, #4]
 800d596:	f000 f929 	bl	800d7ec <USB_FlushRxFifo>
 800d59a:	4603      	mov	r3, r0
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d001      	beq.n	800d5a4 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 800d5a0:	2301      	movs	r3, #1
 800d5a2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d5aa:	461a      	mov	r2, r3
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d5b6:	461a      	mov	r2, r3
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d5c2:	461a      	mov	r2, r3
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	613b      	str	r3, [r7, #16]
 800d5cc:	e043      	b.n	800d656 <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d5ce:	693b      	ldr	r3, [r7, #16]
 800d5d0:	015a      	lsls	r2, r3, #5
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	4413      	add	r3, r2
 800d5d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d5e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d5e4:	d118      	bne.n	800d618 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 800d5e6:	693b      	ldr	r3, [r7, #16]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d10a      	bne.n	800d602 <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d5ec:	693b      	ldr	r3, [r7, #16]
 800d5ee:	015a      	lsls	r2, r3, #5
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	4413      	add	r3, r2
 800d5f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5f8:	461a      	mov	r2, r3
 800d5fa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d5fe:	6013      	str	r3, [r2, #0]
 800d600:	e013      	b.n	800d62a <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d602:	693b      	ldr	r3, [r7, #16]
 800d604:	015a      	lsls	r2, r3, #5
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	4413      	add	r3, r2
 800d60a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d60e:	461a      	mov	r2, r3
 800d610:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d614:	6013      	str	r3, [r2, #0]
 800d616:	e008      	b.n	800d62a <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d618:	693b      	ldr	r3, [r7, #16]
 800d61a:	015a      	lsls	r2, r3, #5
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	4413      	add	r3, r2
 800d620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d624:	461a      	mov	r2, r3
 800d626:	2300      	movs	r3, #0
 800d628:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d62a:	693b      	ldr	r3, [r7, #16]
 800d62c:	015a      	lsls	r2, r3, #5
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	4413      	add	r3, r2
 800d632:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d636:	461a      	mov	r2, r3
 800d638:	2300      	movs	r3, #0
 800d63a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d63c:	693b      	ldr	r3, [r7, #16]
 800d63e:	015a      	lsls	r2, r3, #5
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	4413      	add	r3, r2
 800d644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d648:	461a      	mov	r2, r3
 800d64a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d64e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d650:	693b      	ldr	r3, [r7, #16]
 800d652:	3301      	adds	r3, #1
 800d654:	613b      	str	r3, [r7, #16]
 800d656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d658:	693a      	ldr	r2, [r7, #16]
 800d65a:	429a      	cmp	r2, r3
 800d65c:	d3b7      	bcc.n	800d5ce <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d65e:	2300      	movs	r3, #0
 800d660:	613b      	str	r3, [r7, #16]
 800d662:	e043      	b.n	800d6ec <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d664:	693b      	ldr	r3, [r7, #16]
 800d666:	015a      	lsls	r2, r3, #5
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	4413      	add	r3, r2
 800d66c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d676:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d67a:	d118      	bne.n	800d6ae <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 800d67c:	693b      	ldr	r3, [r7, #16]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d10a      	bne.n	800d698 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d682:	693b      	ldr	r3, [r7, #16]
 800d684:	015a      	lsls	r2, r3, #5
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	4413      	add	r3, r2
 800d68a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d68e:	461a      	mov	r2, r3
 800d690:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d694:	6013      	str	r3, [r2, #0]
 800d696:	e013      	b.n	800d6c0 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d698:	693b      	ldr	r3, [r7, #16]
 800d69a:	015a      	lsls	r2, r3, #5
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	4413      	add	r3, r2
 800d6a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d6a4:	461a      	mov	r2, r3
 800d6a6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d6aa:	6013      	str	r3, [r2, #0]
 800d6ac:	e008      	b.n	800d6c0 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d6ae:	693b      	ldr	r3, [r7, #16]
 800d6b0:	015a      	lsls	r2, r3, #5
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	4413      	add	r3, r2
 800d6b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d6ba:	461a      	mov	r2, r3
 800d6bc:	2300      	movs	r3, #0
 800d6be:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d6c0:	693b      	ldr	r3, [r7, #16]
 800d6c2:	015a      	lsls	r2, r3, #5
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	4413      	add	r3, r2
 800d6c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d6cc:	461a      	mov	r2, r3
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d6d2:	693b      	ldr	r3, [r7, #16]
 800d6d4:	015a      	lsls	r2, r3, #5
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	4413      	add	r3, r2
 800d6da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d6de:	461a      	mov	r2, r3
 800d6e0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d6e4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d6e6:	693b      	ldr	r3, [r7, #16]
 800d6e8:	3301      	adds	r3, #1
 800d6ea:	613b      	str	r3, [r7, #16]
 800d6ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6ee:	693a      	ldr	r2, [r7, #16]
 800d6f0:	429a      	cmp	r2, r3
 800d6f2:	d3b7      	bcc.n	800d664 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d6fa:	691b      	ldr	r3, [r3, #16]
 800d6fc:	68fa      	ldr	r2, [r7, #12]
 800d6fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d702:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d706:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 800d708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d70a:	2b01      	cmp	r3, #1
 800d70c:	d111      	bne.n	800d732 <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d714:	461a      	mov	r2, r3
 800d716:	4b20      	ldr	r3, [pc, #128]	; (800d798 <USB_DevInit+0x2dc>)
 800d718:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d722:	68fa      	ldr	r2, [r7, #12]
 800d724:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d728:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d72c:	f043 0303 	orr.w	r3, r3, #3
 800d730:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	2200      	movs	r2, #0
 800d736:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800d73e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d742:	2b00      	cmp	r3, #0
 800d744:	d105      	bne.n	800d752 <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	699b      	ldr	r3, [r3, #24]
 800d74a:	f043 0210 	orr.w	r2, r3, #16
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	699a      	ldr	r2, [r3, #24]
 800d756:	4b11      	ldr	r3, [pc, #68]	; (800d79c <USB_DevInit+0x2e0>)
 800d758:	4313      	orrs	r3, r2
 800d75a:	687a      	ldr	r2, [r7, #4]
 800d75c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d75e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d760:	2b00      	cmp	r3, #0
 800d762:	d005      	beq.n	800d770 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	699b      	ldr	r3, [r3, #24]
 800d768:	f043 0208 	orr.w	r2, r3, #8
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d770:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d772:	2b01      	cmp	r3, #1
 800d774:	d107      	bne.n	800d786 <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	699b      	ldr	r3, [r3, #24]
 800d77a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d77e:	f043 0304 	orr.w	r3, r3, #4
 800d782:	687a      	ldr	r2, [r7, #4]
 800d784:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d786:	7dfb      	ldrb	r3, [r7, #23]
}
 800d788:	4618      	mov	r0, r3
 800d78a:	3718      	adds	r7, #24
 800d78c:	46bd      	mov	sp, r7
 800d78e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d792:	b004      	add	sp, #16
 800d794:	4770      	bx	lr
 800d796:	bf00      	nop
 800d798:	00800100 	.word	0x00800100
 800d79c:	803c3800 	.word	0x803c3800

0800d7a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d7a0:	b480      	push	{r7}
 800d7a2:	b085      	sub	sp, #20
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	6078      	str	r0, [r7, #4]
 800d7a8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800d7aa:	2300      	movs	r3, #0
 800d7ac:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d7ae:	683b      	ldr	r3, [r7, #0]
 800d7b0:	019b      	lsls	r3, r3, #6
 800d7b2:	f043 0220 	orr.w	r2, r3, #32
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	3301      	adds	r3, #1
 800d7be:	60fb      	str	r3, [r7, #12]
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	4a09      	ldr	r2, [pc, #36]	; (800d7e8 <USB_FlushTxFifo+0x48>)
 800d7c4:	4293      	cmp	r3, r2
 800d7c6:	d901      	bls.n	800d7cc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800d7c8:	2303      	movs	r3, #3
 800d7ca:	e006      	b.n	800d7da <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	691b      	ldr	r3, [r3, #16]
 800d7d0:	f003 0320 	and.w	r3, r3, #32
 800d7d4:	2b20      	cmp	r3, #32
 800d7d6:	d0f0      	beq.n	800d7ba <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800d7d8:	2300      	movs	r3, #0
}
 800d7da:	4618      	mov	r0, r3
 800d7dc:	3714      	adds	r7, #20
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e4:	4770      	bx	lr
 800d7e6:	bf00      	nop
 800d7e8:	00030d40 	.word	0x00030d40

0800d7ec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d7ec:	b480      	push	{r7}
 800d7ee:	b085      	sub	sp, #20
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800d7f4:	2300      	movs	r3, #0
 800d7f6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	2210      	movs	r2, #16
 800d7fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	3301      	adds	r3, #1
 800d802:	60fb      	str	r3, [r7, #12]
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	4a09      	ldr	r2, [pc, #36]	; (800d82c <USB_FlushRxFifo+0x40>)
 800d808:	4293      	cmp	r3, r2
 800d80a:	d901      	bls.n	800d810 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800d80c:	2303      	movs	r3, #3
 800d80e:	e006      	b.n	800d81e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	691b      	ldr	r3, [r3, #16]
 800d814:	f003 0310 	and.w	r3, r3, #16
 800d818:	2b10      	cmp	r3, #16
 800d81a:	d0f0      	beq.n	800d7fe <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800d81c:	2300      	movs	r3, #0
}
 800d81e:	4618      	mov	r0, r3
 800d820:	3714      	adds	r7, #20
 800d822:	46bd      	mov	sp, r7
 800d824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d828:	4770      	bx	lr
 800d82a:	bf00      	nop
 800d82c:	00030d40 	.word	0x00030d40

0800d830 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d830:	b480      	push	{r7}
 800d832:	b085      	sub	sp, #20
 800d834:	af00      	add	r7, sp, #0
 800d836:	6078      	str	r0, [r7, #4]
 800d838:	460b      	mov	r3, r1
 800d83a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d846:	681a      	ldr	r2, [r3, #0]
 800d848:	78fb      	ldrb	r3, [r7, #3]
 800d84a:	68f9      	ldr	r1, [r7, #12]
 800d84c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d850:	4313      	orrs	r3, r2
 800d852:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d854:	2300      	movs	r3, #0
}
 800d856:	4618      	mov	r0, r3
 800d858:	3714      	adds	r7, #20
 800d85a:	46bd      	mov	sp, r7
 800d85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d860:	4770      	bx	lr

0800d862 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800d862:	b480      	push	{r7}
 800d864:	b087      	sub	sp, #28
 800d866:	af00      	add	r7, sp, #0
 800d868:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800d86e:	693b      	ldr	r3, [r7, #16]
 800d870:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d874:	689b      	ldr	r3, [r3, #8]
 800d876:	f003 0306 	and.w	r3, r3, #6
 800d87a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d102      	bne.n	800d888 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800d882:	2300      	movs	r3, #0
 800d884:	75fb      	strb	r3, [r7, #23]
 800d886:	e00a      	b.n	800d89e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	2b02      	cmp	r3, #2
 800d88c:	d002      	beq.n	800d894 <USB_GetDevSpeed+0x32>
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	2b06      	cmp	r3, #6
 800d892:	d102      	bne.n	800d89a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800d894:	2302      	movs	r3, #2
 800d896:	75fb      	strb	r3, [r7, #23]
 800d898:	e001      	b.n	800d89e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800d89a:	230f      	movs	r3, #15
 800d89c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800d89e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d8a0:	4618      	mov	r0, r3
 800d8a2:	371c      	adds	r7, #28
 800d8a4:	46bd      	mov	sp, r7
 800d8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8aa:	4770      	bx	lr

0800d8ac <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d8ac:	b480      	push	{r7}
 800d8ae:	b085      	sub	sp, #20
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	6078      	str	r0, [r7, #4]
 800d8b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d8ba:	683b      	ldr	r3, [r7, #0]
 800d8bc:	781b      	ldrb	r3, [r3, #0]
 800d8be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d8c0:	683b      	ldr	r3, [r7, #0]
 800d8c2:	785b      	ldrb	r3, [r3, #1]
 800d8c4:	2b01      	cmp	r3, #1
 800d8c6:	d13a      	bne.n	800d93e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d8ce:	69da      	ldr	r2, [r3, #28]
 800d8d0:	683b      	ldr	r3, [r7, #0]
 800d8d2:	781b      	ldrb	r3, [r3, #0]
 800d8d4:	f003 030f 	and.w	r3, r3, #15
 800d8d8:	2101      	movs	r1, #1
 800d8da:	fa01 f303 	lsl.w	r3, r1, r3
 800d8de:	b29b      	uxth	r3, r3
 800d8e0:	68f9      	ldr	r1, [r7, #12]
 800d8e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d8e6:	4313      	orrs	r3, r2
 800d8e8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800d8ea:	68bb      	ldr	r3, [r7, #8]
 800d8ec:	015a      	lsls	r2, r3, #5
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	4413      	add	r3, r2
 800d8f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d155      	bne.n	800d9ac <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d900:	68bb      	ldr	r3, [r7, #8]
 800d902:	015a      	lsls	r2, r3, #5
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	4413      	add	r3, r2
 800d908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d90c:	681a      	ldr	r2, [r3, #0]
 800d90e:	683b      	ldr	r3, [r7, #0]
 800d910:	689b      	ldr	r3, [r3, #8]
 800d912:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d916:	683b      	ldr	r3, [r7, #0]
 800d918:	78db      	ldrb	r3, [r3, #3]
 800d91a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d91c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d91e:	68bb      	ldr	r3, [r7, #8]
 800d920:	059b      	lsls	r3, r3, #22
 800d922:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d924:	4313      	orrs	r3, r2
 800d926:	68ba      	ldr	r2, [r7, #8]
 800d928:	0151      	lsls	r1, r2, #5
 800d92a:	68fa      	ldr	r2, [r7, #12]
 800d92c:	440a      	add	r2, r1
 800d92e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d932:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d936:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d93a:	6013      	str	r3, [r2, #0]
 800d93c:	e036      	b.n	800d9ac <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d944:	69da      	ldr	r2, [r3, #28]
 800d946:	683b      	ldr	r3, [r7, #0]
 800d948:	781b      	ldrb	r3, [r3, #0]
 800d94a:	f003 030f 	and.w	r3, r3, #15
 800d94e:	2101      	movs	r1, #1
 800d950:	fa01 f303 	lsl.w	r3, r1, r3
 800d954:	041b      	lsls	r3, r3, #16
 800d956:	68f9      	ldr	r1, [r7, #12]
 800d958:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d95c:	4313      	orrs	r3, r2
 800d95e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800d960:	68bb      	ldr	r3, [r7, #8]
 800d962:	015a      	lsls	r2, r3, #5
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	4413      	add	r3, r2
 800d968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d972:	2b00      	cmp	r3, #0
 800d974:	d11a      	bne.n	800d9ac <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d976:	68bb      	ldr	r3, [r7, #8]
 800d978:	015a      	lsls	r2, r3, #5
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	4413      	add	r3, r2
 800d97e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d982:	681a      	ldr	r2, [r3, #0]
 800d984:	683b      	ldr	r3, [r7, #0]
 800d986:	689b      	ldr	r3, [r3, #8]
 800d988:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800d98c:	683b      	ldr	r3, [r7, #0]
 800d98e:	78db      	ldrb	r3, [r3, #3]
 800d990:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d992:	430b      	orrs	r3, r1
 800d994:	4313      	orrs	r3, r2
 800d996:	68ba      	ldr	r2, [r7, #8]
 800d998:	0151      	lsls	r1, r2, #5
 800d99a:	68fa      	ldr	r2, [r7, #12]
 800d99c:	440a      	add	r2, r1
 800d99e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d9a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d9a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d9aa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800d9ac:	2300      	movs	r3, #0
}
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	3714      	adds	r7, #20
 800d9b2:	46bd      	mov	sp, r7
 800d9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b8:	4770      	bx	lr
	...

0800d9bc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d9bc:	b480      	push	{r7}
 800d9be:	b085      	sub	sp, #20
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	6078      	str	r0, [r7, #4]
 800d9c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d9ca:	683b      	ldr	r3, [r7, #0]
 800d9cc:	781b      	ldrb	r3, [r3, #0]
 800d9ce:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800d9d0:	683b      	ldr	r3, [r7, #0]
 800d9d2:	785b      	ldrb	r3, [r3, #1]
 800d9d4:	2b01      	cmp	r3, #1
 800d9d6:	d135      	bne.n	800da44 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d9de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d9e0:	683b      	ldr	r3, [r7, #0]
 800d9e2:	781b      	ldrb	r3, [r3, #0]
 800d9e4:	f003 030f 	and.w	r3, r3, #15
 800d9e8:	2101      	movs	r1, #1
 800d9ea:	fa01 f303 	lsl.w	r3, r1, r3
 800d9ee:	b29b      	uxth	r3, r3
 800d9f0:	43db      	mvns	r3, r3
 800d9f2:	68f9      	ldr	r1, [r7, #12]
 800d9f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d9f8:	4013      	ands	r3, r2
 800d9fa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da02:	69da      	ldr	r2, [r3, #28]
 800da04:	683b      	ldr	r3, [r7, #0]
 800da06:	781b      	ldrb	r3, [r3, #0]
 800da08:	f003 030f 	and.w	r3, r3, #15
 800da0c:	2101      	movs	r1, #1
 800da0e:	fa01 f303 	lsl.w	r3, r1, r3
 800da12:	b29b      	uxth	r3, r3
 800da14:	43db      	mvns	r3, r3
 800da16:	68f9      	ldr	r1, [r7, #12]
 800da18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800da1c:	4013      	ands	r3, r2
 800da1e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800da20:	68bb      	ldr	r3, [r7, #8]
 800da22:	015a      	lsls	r2, r3, #5
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	4413      	add	r3, r2
 800da28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da2c:	681a      	ldr	r2, [r3, #0]
 800da2e:	68bb      	ldr	r3, [r7, #8]
 800da30:	0159      	lsls	r1, r3, #5
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	440b      	add	r3, r1
 800da36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da3a:	4619      	mov	r1, r3
 800da3c:	4b1f      	ldr	r3, [pc, #124]	; (800dabc <USB_DeactivateEndpoint+0x100>)
 800da3e:	4013      	ands	r3, r2
 800da40:	600b      	str	r3, [r1, #0]
 800da42:	e034      	b.n	800daae <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800da4c:	683b      	ldr	r3, [r7, #0]
 800da4e:	781b      	ldrb	r3, [r3, #0]
 800da50:	f003 030f 	and.w	r3, r3, #15
 800da54:	2101      	movs	r1, #1
 800da56:	fa01 f303 	lsl.w	r3, r1, r3
 800da5a:	041b      	lsls	r3, r3, #16
 800da5c:	43db      	mvns	r3, r3
 800da5e:	68f9      	ldr	r1, [r7, #12]
 800da60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800da64:	4013      	ands	r3, r2
 800da66:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da6e:	69da      	ldr	r2, [r3, #28]
 800da70:	683b      	ldr	r3, [r7, #0]
 800da72:	781b      	ldrb	r3, [r3, #0]
 800da74:	f003 030f 	and.w	r3, r3, #15
 800da78:	2101      	movs	r1, #1
 800da7a:	fa01 f303 	lsl.w	r3, r1, r3
 800da7e:	041b      	lsls	r3, r3, #16
 800da80:	43db      	mvns	r3, r3
 800da82:	68f9      	ldr	r1, [r7, #12]
 800da84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800da88:	4013      	ands	r3, r2
 800da8a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800da8c:	68bb      	ldr	r3, [r7, #8]
 800da8e:	015a      	lsls	r2, r3, #5
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	4413      	add	r3, r2
 800da94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da98:	681a      	ldr	r2, [r3, #0]
 800da9a:	68bb      	ldr	r3, [r7, #8]
 800da9c:	0159      	lsls	r1, r3, #5
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	440b      	add	r3, r1
 800daa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800daa6:	4619      	mov	r1, r3
 800daa8:	4b05      	ldr	r3, [pc, #20]	; (800dac0 <USB_DeactivateEndpoint+0x104>)
 800daaa:	4013      	ands	r3, r2
 800daac:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800daae:	2300      	movs	r3, #0
}
 800dab0:	4618      	mov	r0, r3
 800dab2:	3714      	adds	r7, #20
 800dab4:	46bd      	mov	sp, r7
 800dab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daba:	4770      	bx	lr
 800dabc:	ec337800 	.word	0xec337800
 800dac0:	eff37800 	.word	0xeff37800

0800dac4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800dac4:	b580      	push	{r7, lr}
 800dac6:	b08a      	sub	sp, #40	; 0x28
 800dac8:	af02      	add	r7, sp, #8
 800daca:	60f8      	str	r0, [r7, #12]
 800dacc:	60b9      	str	r1, [r7, #8]
 800dace:	4613      	mov	r3, r2
 800dad0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800dad6:	68bb      	ldr	r3, [r7, #8]
 800dad8:	781b      	ldrb	r3, [r3, #0]
 800dada:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800dadc:	68bb      	ldr	r3, [r7, #8]
 800dade:	785b      	ldrb	r3, [r3, #1]
 800dae0:	2b01      	cmp	r3, #1
 800dae2:	f040 815c 	bne.w	800dd9e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800dae6:	68bb      	ldr	r3, [r7, #8]
 800dae8:	695b      	ldr	r3, [r3, #20]
 800daea:	2b00      	cmp	r3, #0
 800daec:	d132      	bne.n	800db54 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800daee:	69bb      	ldr	r3, [r7, #24]
 800daf0:	015a      	lsls	r2, r3, #5
 800daf2:	69fb      	ldr	r3, [r7, #28]
 800daf4:	4413      	add	r3, r2
 800daf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dafa:	691b      	ldr	r3, [r3, #16]
 800dafc:	69ba      	ldr	r2, [r7, #24]
 800dafe:	0151      	lsls	r1, r2, #5
 800db00:	69fa      	ldr	r2, [r7, #28]
 800db02:	440a      	add	r2, r1
 800db04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800db08:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800db0c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800db10:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800db12:	69bb      	ldr	r3, [r7, #24]
 800db14:	015a      	lsls	r2, r3, #5
 800db16:	69fb      	ldr	r3, [r7, #28]
 800db18:	4413      	add	r3, r2
 800db1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db1e:	691b      	ldr	r3, [r3, #16]
 800db20:	69ba      	ldr	r2, [r7, #24]
 800db22:	0151      	lsls	r1, r2, #5
 800db24:	69fa      	ldr	r2, [r7, #28]
 800db26:	440a      	add	r2, r1
 800db28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800db2c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800db30:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800db32:	69bb      	ldr	r3, [r7, #24]
 800db34:	015a      	lsls	r2, r3, #5
 800db36:	69fb      	ldr	r3, [r7, #28]
 800db38:	4413      	add	r3, r2
 800db3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db3e:	691b      	ldr	r3, [r3, #16]
 800db40:	69ba      	ldr	r2, [r7, #24]
 800db42:	0151      	lsls	r1, r2, #5
 800db44:	69fa      	ldr	r2, [r7, #28]
 800db46:	440a      	add	r2, r1
 800db48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800db4c:	0cdb      	lsrs	r3, r3, #19
 800db4e:	04db      	lsls	r3, r3, #19
 800db50:	6113      	str	r3, [r2, #16]
 800db52:	e074      	b.n	800dc3e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800db54:	69bb      	ldr	r3, [r7, #24]
 800db56:	015a      	lsls	r2, r3, #5
 800db58:	69fb      	ldr	r3, [r7, #28]
 800db5a:	4413      	add	r3, r2
 800db5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db60:	691b      	ldr	r3, [r3, #16]
 800db62:	69ba      	ldr	r2, [r7, #24]
 800db64:	0151      	lsls	r1, r2, #5
 800db66:	69fa      	ldr	r2, [r7, #28]
 800db68:	440a      	add	r2, r1
 800db6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800db6e:	0cdb      	lsrs	r3, r3, #19
 800db70:	04db      	lsls	r3, r3, #19
 800db72:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800db74:	69bb      	ldr	r3, [r7, #24]
 800db76:	015a      	lsls	r2, r3, #5
 800db78:	69fb      	ldr	r3, [r7, #28]
 800db7a:	4413      	add	r3, r2
 800db7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db80:	691b      	ldr	r3, [r3, #16]
 800db82:	69ba      	ldr	r2, [r7, #24]
 800db84:	0151      	lsls	r1, r2, #5
 800db86:	69fa      	ldr	r2, [r7, #28]
 800db88:	440a      	add	r2, r1
 800db8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800db8e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800db92:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800db96:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800db98:	69bb      	ldr	r3, [r7, #24]
 800db9a:	015a      	lsls	r2, r3, #5
 800db9c:	69fb      	ldr	r3, [r7, #28]
 800db9e:	4413      	add	r3, r2
 800dba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dba4:	691a      	ldr	r2, [r3, #16]
 800dba6:	68bb      	ldr	r3, [r7, #8]
 800dba8:	6959      	ldr	r1, [r3, #20]
 800dbaa:	68bb      	ldr	r3, [r7, #8]
 800dbac:	689b      	ldr	r3, [r3, #8]
 800dbae:	440b      	add	r3, r1
 800dbb0:	1e59      	subs	r1, r3, #1
 800dbb2:	68bb      	ldr	r3, [r7, #8]
 800dbb4:	689b      	ldr	r3, [r3, #8]
 800dbb6:	fbb1 f3f3 	udiv	r3, r1, r3
 800dbba:	04d9      	lsls	r1, r3, #19
 800dbbc:	4b9d      	ldr	r3, [pc, #628]	; (800de34 <USB_EPStartXfer+0x370>)
 800dbbe:	400b      	ands	r3, r1
 800dbc0:	69b9      	ldr	r1, [r7, #24]
 800dbc2:	0148      	lsls	r0, r1, #5
 800dbc4:	69f9      	ldr	r1, [r7, #28]
 800dbc6:	4401      	add	r1, r0
 800dbc8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800dbcc:	4313      	orrs	r3, r2
 800dbce:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800dbd0:	69bb      	ldr	r3, [r7, #24]
 800dbd2:	015a      	lsls	r2, r3, #5
 800dbd4:	69fb      	ldr	r3, [r7, #28]
 800dbd6:	4413      	add	r3, r2
 800dbd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dbdc:	691a      	ldr	r2, [r3, #16]
 800dbde:	68bb      	ldr	r3, [r7, #8]
 800dbe0:	695b      	ldr	r3, [r3, #20]
 800dbe2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800dbe6:	69b9      	ldr	r1, [r7, #24]
 800dbe8:	0148      	lsls	r0, r1, #5
 800dbea:	69f9      	ldr	r1, [r7, #28]
 800dbec:	4401      	add	r1, r0
 800dbee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800dbf2:	4313      	orrs	r3, r2
 800dbf4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800dbf6:	68bb      	ldr	r3, [r7, #8]
 800dbf8:	78db      	ldrb	r3, [r3, #3]
 800dbfa:	2b01      	cmp	r3, #1
 800dbfc:	d11f      	bne.n	800dc3e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800dbfe:	69bb      	ldr	r3, [r7, #24]
 800dc00:	015a      	lsls	r2, r3, #5
 800dc02:	69fb      	ldr	r3, [r7, #28]
 800dc04:	4413      	add	r3, r2
 800dc06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc0a:	691b      	ldr	r3, [r3, #16]
 800dc0c:	69ba      	ldr	r2, [r7, #24]
 800dc0e:	0151      	lsls	r1, r2, #5
 800dc10:	69fa      	ldr	r2, [r7, #28]
 800dc12:	440a      	add	r2, r1
 800dc14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dc18:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800dc1c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800dc1e:	69bb      	ldr	r3, [r7, #24]
 800dc20:	015a      	lsls	r2, r3, #5
 800dc22:	69fb      	ldr	r3, [r7, #28]
 800dc24:	4413      	add	r3, r2
 800dc26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc2a:	691b      	ldr	r3, [r3, #16]
 800dc2c:	69ba      	ldr	r2, [r7, #24]
 800dc2e:	0151      	lsls	r1, r2, #5
 800dc30:	69fa      	ldr	r2, [r7, #28]
 800dc32:	440a      	add	r2, r1
 800dc34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dc38:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800dc3c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800dc3e:	79fb      	ldrb	r3, [r7, #7]
 800dc40:	2b01      	cmp	r3, #1
 800dc42:	d14b      	bne.n	800dcdc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800dc44:	68bb      	ldr	r3, [r7, #8]
 800dc46:	691b      	ldr	r3, [r3, #16]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d009      	beq.n	800dc60 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800dc4c:	69bb      	ldr	r3, [r7, #24]
 800dc4e:	015a      	lsls	r2, r3, #5
 800dc50:	69fb      	ldr	r3, [r7, #28]
 800dc52:	4413      	add	r3, r2
 800dc54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc58:	461a      	mov	r2, r3
 800dc5a:	68bb      	ldr	r3, [r7, #8]
 800dc5c:	691b      	ldr	r3, [r3, #16]
 800dc5e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800dc60:	68bb      	ldr	r3, [r7, #8]
 800dc62:	78db      	ldrb	r3, [r3, #3]
 800dc64:	2b01      	cmp	r3, #1
 800dc66:	d128      	bne.n	800dcba <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800dc68:	69fb      	ldr	r3, [r7, #28]
 800dc6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc6e:	689b      	ldr	r3, [r3, #8]
 800dc70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d110      	bne.n	800dc9a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800dc78:	69bb      	ldr	r3, [r7, #24]
 800dc7a:	015a      	lsls	r2, r3, #5
 800dc7c:	69fb      	ldr	r3, [r7, #28]
 800dc7e:	4413      	add	r3, r2
 800dc80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	69ba      	ldr	r2, [r7, #24]
 800dc88:	0151      	lsls	r1, r2, #5
 800dc8a:	69fa      	ldr	r2, [r7, #28]
 800dc8c:	440a      	add	r2, r1
 800dc8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dc92:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800dc96:	6013      	str	r3, [r2, #0]
 800dc98:	e00f      	b.n	800dcba <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800dc9a:	69bb      	ldr	r3, [r7, #24]
 800dc9c:	015a      	lsls	r2, r3, #5
 800dc9e:	69fb      	ldr	r3, [r7, #28]
 800dca0:	4413      	add	r3, r2
 800dca2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	69ba      	ldr	r2, [r7, #24]
 800dcaa:	0151      	lsls	r1, r2, #5
 800dcac:	69fa      	ldr	r2, [r7, #28]
 800dcae:	440a      	add	r2, r1
 800dcb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dcb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dcb8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800dcba:	69bb      	ldr	r3, [r7, #24]
 800dcbc:	015a      	lsls	r2, r3, #5
 800dcbe:	69fb      	ldr	r3, [r7, #28]
 800dcc0:	4413      	add	r3, r2
 800dcc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	69ba      	ldr	r2, [r7, #24]
 800dcca:	0151      	lsls	r1, r2, #5
 800dccc:	69fa      	ldr	r2, [r7, #28]
 800dcce:	440a      	add	r2, r1
 800dcd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dcd4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800dcd8:	6013      	str	r3, [r2, #0]
 800dcda:	e12f      	b.n	800df3c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800dcdc:	69bb      	ldr	r3, [r7, #24]
 800dcde:	015a      	lsls	r2, r3, #5
 800dce0:	69fb      	ldr	r3, [r7, #28]
 800dce2:	4413      	add	r3, r2
 800dce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	69ba      	ldr	r2, [r7, #24]
 800dcec:	0151      	lsls	r1, r2, #5
 800dcee:	69fa      	ldr	r2, [r7, #28]
 800dcf0:	440a      	add	r2, r1
 800dcf2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dcf6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800dcfa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800dcfc:	68bb      	ldr	r3, [r7, #8]
 800dcfe:	78db      	ldrb	r3, [r3, #3]
 800dd00:	2b01      	cmp	r3, #1
 800dd02:	d015      	beq.n	800dd30 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800dd04:	68bb      	ldr	r3, [r7, #8]
 800dd06:	695b      	ldr	r3, [r3, #20]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	f000 8117 	beq.w	800df3c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800dd0e:	69fb      	ldr	r3, [r7, #28]
 800dd10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dd16:	68bb      	ldr	r3, [r7, #8]
 800dd18:	781b      	ldrb	r3, [r3, #0]
 800dd1a:	f003 030f 	and.w	r3, r3, #15
 800dd1e:	2101      	movs	r1, #1
 800dd20:	fa01 f303 	lsl.w	r3, r1, r3
 800dd24:	69f9      	ldr	r1, [r7, #28]
 800dd26:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dd2a:	4313      	orrs	r3, r2
 800dd2c:	634b      	str	r3, [r1, #52]	; 0x34
 800dd2e:	e105      	b.n	800df3c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800dd30:	69fb      	ldr	r3, [r7, #28]
 800dd32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd36:	689b      	ldr	r3, [r3, #8]
 800dd38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d110      	bne.n	800dd62 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800dd40:	69bb      	ldr	r3, [r7, #24]
 800dd42:	015a      	lsls	r2, r3, #5
 800dd44:	69fb      	ldr	r3, [r7, #28]
 800dd46:	4413      	add	r3, r2
 800dd48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	69ba      	ldr	r2, [r7, #24]
 800dd50:	0151      	lsls	r1, r2, #5
 800dd52:	69fa      	ldr	r2, [r7, #28]
 800dd54:	440a      	add	r2, r1
 800dd56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dd5a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800dd5e:	6013      	str	r3, [r2, #0]
 800dd60:	e00f      	b.n	800dd82 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800dd62:	69bb      	ldr	r3, [r7, #24]
 800dd64:	015a      	lsls	r2, r3, #5
 800dd66:	69fb      	ldr	r3, [r7, #28]
 800dd68:	4413      	add	r3, r2
 800dd6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	69ba      	ldr	r2, [r7, #24]
 800dd72:	0151      	lsls	r1, r2, #5
 800dd74:	69fa      	ldr	r2, [r7, #28]
 800dd76:	440a      	add	r2, r1
 800dd78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dd7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dd80:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800dd82:	68bb      	ldr	r3, [r7, #8]
 800dd84:	68d9      	ldr	r1, [r3, #12]
 800dd86:	68bb      	ldr	r3, [r7, #8]
 800dd88:	781a      	ldrb	r2, [r3, #0]
 800dd8a:	68bb      	ldr	r3, [r7, #8]
 800dd8c:	695b      	ldr	r3, [r3, #20]
 800dd8e:	b298      	uxth	r0, r3
 800dd90:	79fb      	ldrb	r3, [r7, #7]
 800dd92:	9300      	str	r3, [sp, #0]
 800dd94:	4603      	mov	r3, r0
 800dd96:	68f8      	ldr	r0, [r7, #12]
 800dd98:	f000 fa2b 	bl	800e1f2 <USB_WritePacket>
 800dd9c:	e0ce      	b.n	800df3c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800dd9e:	69bb      	ldr	r3, [r7, #24]
 800dda0:	015a      	lsls	r2, r3, #5
 800dda2:	69fb      	ldr	r3, [r7, #28]
 800dda4:	4413      	add	r3, r2
 800dda6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ddaa:	691b      	ldr	r3, [r3, #16]
 800ddac:	69ba      	ldr	r2, [r7, #24]
 800ddae:	0151      	lsls	r1, r2, #5
 800ddb0:	69fa      	ldr	r2, [r7, #28]
 800ddb2:	440a      	add	r2, r1
 800ddb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ddb8:	0cdb      	lsrs	r3, r3, #19
 800ddba:	04db      	lsls	r3, r3, #19
 800ddbc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ddbe:	69bb      	ldr	r3, [r7, #24]
 800ddc0:	015a      	lsls	r2, r3, #5
 800ddc2:	69fb      	ldr	r3, [r7, #28]
 800ddc4:	4413      	add	r3, r2
 800ddc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ddca:	691b      	ldr	r3, [r3, #16]
 800ddcc:	69ba      	ldr	r2, [r7, #24]
 800ddce:	0151      	lsls	r1, r2, #5
 800ddd0:	69fa      	ldr	r2, [r7, #28]
 800ddd2:	440a      	add	r2, r1
 800ddd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ddd8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800dddc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800dde0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800dde2:	68bb      	ldr	r3, [r7, #8]
 800dde4:	695b      	ldr	r3, [r3, #20]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d126      	bne.n	800de38 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ddea:	69bb      	ldr	r3, [r7, #24]
 800ddec:	015a      	lsls	r2, r3, #5
 800ddee:	69fb      	ldr	r3, [r7, #28]
 800ddf0:	4413      	add	r3, r2
 800ddf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ddf6:	691a      	ldr	r2, [r3, #16]
 800ddf8:	68bb      	ldr	r3, [r7, #8]
 800ddfa:	689b      	ldr	r3, [r3, #8]
 800ddfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800de00:	69b9      	ldr	r1, [r7, #24]
 800de02:	0148      	lsls	r0, r1, #5
 800de04:	69f9      	ldr	r1, [r7, #28]
 800de06:	4401      	add	r1, r0
 800de08:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800de0c:	4313      	orrs	r3, r2
 800de0e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800de10:	69bb      	ldr	r3, [r7, #24]
 800de12:	015a      	lsls	r2, r3, #5
 800de14:	69fb      	ldr	r3, [r7, #28]
 800de16:	4413      	add	r3, r2
 800de18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de1c:	691b      	ldr	r3, [r3, #16]
 800de1e:	69ba      	ldr	r2, [r7, #24]
 800de20:	0151      	lsls	r1, r2, #5
 800de22:	69fa      	ldr	r2, [r7, #28]
 800de24:	440a      	add	r2, r1
 800de26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800de2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800de2e:	6113      	str	r3, [r2, #16]
 800de30:	e036      	b.n	800dea0 <USB_EPStartXfer+0x3dc>
 800de32:	bf00      	nop
 800de34:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800de38:	68bb      	ldr	r3, [r7, #8]
 800de3a:	695a      	ldr	r2, [r3, #20]
 800de3c:	68bb      	ldr	r3, [r7, #8]
 800de3e:	689b      	ldr	r3, [r3, #8]
 800de40:	4413      	add	r3, r2
 800de42:	1e5a      	subs	r2, r3, #1
 800de44:	68bb      	ldr	r3, [r7, #8]
 800de46:	689b      	ldr	r3, [r3, #8]
 800de48:	fbb2 f3f3 	udiv	r3, r2, r3
 800de4c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800de4e:	69bb      	ldr	r3, [r7, #24]
 800de50:	015a      	lsls	r2, r3, #5
 800de52:	69fb      	ldr	r3, [r7, #28]
 800de54:	4413      	add	r3, r2
 800de56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de5a:	691a      	ldr	r2, [r3, #16]
 800de5c:	8afb      	ldrh	r3, [r7, #22]
 800de5e:	04d9      	lsls	r1, r3, #19
 800de60:	4b39      	ldr	r3, [pc, #228]	; (800df48 <USB_EPStartXfer+0x484>)
 800de62:	400b      	ands	r3, r1
 800de64:	69b9      	ldr	r1, [r7, #24]
 800de66:	0148      	lsls	r0, r1, #5
 800de68:	69f9      	ldr	r1, [r7, #28]
 800de6a:	4401      	add	r1, r0
 800de6c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800de70:	4313      	orrs	r3, r2
 800de72:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800de74:	69bb      	ldr	r3, [r7, #24]
 800de76:	015a      	lsls	r2, r3, #5
 800de78:	69fb      	ldr	r3, [r7, #28]
 800de7a:	4413      	add	r3, r2
 800de7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de80:	691a      	ldr	r2, [r3, #16]
 800de82:	68bb      	ldr	r3, [r7, #8]
 800de84:	689b      	ldr	r3, [r3, #8]
 800de86:	8af9      	ldrh	r1, [r7, #22]
 800de88:	fb01 f303 	mul.w	r3, r1, r3
 800de8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800de90:	69b9      	ldr	r1, [r7, #24]
 800de92:	0148      	lsls	r0, r1, #5
 800de94:	69f9      	ldr	r1, [r7, #28]
 800de96:	4401      	add	r1, r0
 800de98:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800de9c:	4313      	orrs	r3, r2
 800de9e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800dea0:	79fb      	ldrb	r3, [r7, #7]
 800dea2:	2b01      	cmp	r3, #1
 800dea4:	d10d      	bne.n	800dec2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800dea6:	68bb      	ldr	r3, [r7, #8]
 800dea8:	68db      	ldr	r3, [r3, #12]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d009      	beq.n	800dec2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800deae:	68bb      	ldr	r3, [r7, #8]
 800deb0:	68d9      	ldr	r1, [r3, #12]
 800deb2:	69bb      	ldr	r3, [r7, #24]
 800deb4:	015a      	lsls	r2, r3, #5
 800deb6:	69fb      	ldr	r3, [r7, #28]
 800deb8:	4413      	add	r3, r2
 800deba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800debe:	460a      	mov	r2, r1
 800dec0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800dec2:	68bb      	ldr	r3, [r7, #8]
 800dec4:	78db      	ldrb	r3, [r3, #3]
 800dec6:	2b01      	cmp	r3, #1
 800dec8:	d128      	bne.n	800df1c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800deca:	69fb      	ldr	r3, [r7, #28]
 800decc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ded0:	689b      	ldr	r3, [r3, #8]
 800ded2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d110      	bne.n	800defc <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800deda:	69bb      	ldr	r3, [r7, #24]
 800dedc:	015a      	lsls	r2, r3, #5
 800dede:	69fb      	ldr	r3, [r7, #28]
 800dee0:	4413      	add	r3, r2
 800dee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	69ba      	ldr	r2, [r7, #24]
 800deea:	0151      	lsls	r1, r2, #5
 800deec:	69fa      	ldr	r2, [r7, #28]
 800deee:	440a      	add	r2, r1
 800def0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800def4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800def8:	6013      	str	r3, [r2, #0]
 800defa:	e00f      	b.n	800df1c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800defc:	69bb      	ldr	r3, [r7, #24]
 800defe:	015a      	lsls	r2, r3, #5
 800df00:	69fb      	ldr	r3, [r7, #28]
 800df02:	4413      	add	r3, r2
 800df04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	69ba      	ldr	r2, [r7, #24]
 800df0c:	0151      	lsls	r1, r2, #5
 800df0e:	69fa      	ldr	r2, [r7, #28]
 800df10:	440a      	add	r2, r1
 800df12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800df16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800df1a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800df1c:	69bb      	ldr	r3, [r7, #24]
 800df1e:	015a      	lsls	r2, r3, #5
 800df20:	69fb      	ldr	r3, [r7, #28]
 800df22:	4413      	add	r3, r2
 800df24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	69ba      	ldr	r2, [r7, #24]
 800df2c:	0151      	lsls	r1, r2, #5
 800df2e:	69fa      	ldr	r2, [r7, #28]
 800df30:	440a      	add	r2, r1
 800df32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800df36:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800df3a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800df3c:	2300      	movs	r3, #0
}
 800df3e:	4618      	mov	r0, r3
 800df40:	3720      	adds	r7, #32
 800df42:	46bd      	mov	sp, r7
 800df44:	bd80      	pop	{r7, pc}
 800df46:	bf00      	nop
 800df48:	1ff80000 	.word	0x1ff80000

0800df4c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800df4c:	b480      	push	{r7}
 800df4e:	b087      	sub	sp, #28
 800df50:	af00      	add	r7, sp, #0
 800df52:	60f8      	str	r0, [r7, #12]
 800df54:	60b9      	str	r1, [r7, #8]
 800df56:	4613      	mov	r3, r2
 800df58:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800df5e:	68bb      	ldr	r3, [r7, #8]
 800df60:	781b      	ldrb	r3, [r3, #0]
 800df62:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800df64:	68bb      	ldr	r3, [r7, #8]
 800df66:	785b      	ldrb	r3, [r3, #1]
 800df68:	2b01      	cmp	r3, #1
 800df6a:	f040 80cd 	bne.w	800e108 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800df6e:	68bb      	ldr	r3, [r7, #8]
 800df70:	695b      	ldr	r3, [r3, #20]
 800df72:	2b00      	cmp	r3, #0
 800df74:	d132      	bne.n	800dfdc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800df76:	693b      	ldr	r3, [r7, #16]
 800df78:	015a      	lsls	r2, r3, #5
 800df7a:	697b      	ldr	r3, [r7, #20]
 800df7c:	4413      	add	r3, r2
 800df7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df82:	691b      	ldr	r3, [r3, #16]
 800df84:	693a      	ldr	r2, [r7, #16]
 800df86:	0151      	lsls	r1, r2, #5
 800df88:	697a      	ldr	r2, [r7, #20]
 800df8a:	440a      	add	r2, r1
 800df8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800df90:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800df94:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800df98:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800df9a:	693b      	ldr	r3, [r7, #16]
 800df9c:	015a      	lsls	r2, r3, #5
 800df9e:	697b      	ldr	r3, [r7, #20]
 800dfa0:	4413      	add	r3, r2
 800dfa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dfa6:	691b      	ldr	r3, [r3, #16]
 800dfa8:	693a      	ldr	r2, [r7, #16]
 800dfaa:	0151      	lsls	r1, r2, #5
 800dfac:	697a      	ldr	r2, [r7, #20]
 800dfae:	440a      	add	r2, r1
 800dfb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dfb4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dfb8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800dfba:	693b      	ldr	r3, [r7, #16]
 800dfbc:	015a      	lsls	r2, r3, #5
 800dfbe:	697b      	ldr	r3, [r7, #20]
 800dfc0:	4413      	add	r3, r2
 800dfc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dfc6:	691b      	ldr	r3, [r3, #16]
 800dfc8:	693a      	ldr	r2, [r7, #16]
 800dfca:	0151      	lsls	r1, r2, #5
 800dfcc:	697a      	ldr	r2, [r7, #20]
 800dfce:	440a      	add	r2, r1
 800dfd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dfd4:	0cdb      	lsrs	r3, r3, #19
 800dfd6:	04db      	lsls	r3, r3, #19
 800dfd8:	6113      	str	r3, [r2, #16]
 800dfda:	e04e      	b.n	800e07a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800dfdc:	693b      	ldr	r3, [r7, #16]
 800dfde:	015a      	lsls	r2, r3, #5
 800dfe0:	697b      	ldr	r3, [r7, #20]
 800dfe2:	4413      	add	r3, r2
 800dfe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dfe8:	691b      	ldr	r3, [r3, #16]
 800dfea:	693a      	ldr	r2, [r7, #16]
 800dfec:	0151      	lsls	r1, r2, #5
 800dfee:	697a      	ldr	r2, [r7, #20]
 800dff0:	440a      	add	r2, r1
 800dff2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dff6:	0cdb      	lsrs	r3, r3, #19
 800dff8:	04db      	lsls	r3, r3, #19
 800dffa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800dffc:	693b      	ldr	r3, [r7, #16]
 800dffe:	015a      	lsls	r2, r3, #5
 800e000:	697b      	ldr	r3, [r7, #20]
 800e002:	4413      	add	r3, r2
 800e004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e008:	691b      	ldr	r3, [r3, #16]
 800e00a:	693a      	ldr	r2, [r7, #16]
 800e00c:	0151      	lsls	r1, r2, #5
 800e00e:	697a      	ldr	r2, [r7, #20]
 800e010:	440a      	add	r2, r1
 800e012:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e016:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e01a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e01e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800e020:	68bb      	ldr	r3, [r7, #8]
 800e022:	695a      	ldr	r2, [r3, #20]
 800e024:	68bb      	ldr	r3, [r7, #8]
 800e026:	689b      	ldr	r3, [r3, #8]
 800e028:	429a      	cmp	r2, r3
 800e02a:	d903      	bls.n	800e034 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800e02c:	68bb      	ldr	r3, [r7, #8]
 800e02e:	689a      	ldr	r2, [r3, #8]
 800e030:	68bb      	ldr	r3, [r7, #8]
 800e032:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e034:	693b      	ldr	r3, [r7, #16]
 800e036:	015a      	lsls	r2, r3, #5
 800e038:	697b      	ldr	r3, [r7, #20]
 800e03a:	4413      	add	r3, r2
 800e03c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e040:	691b      	ldr	r3, [r3, #16]
 800e042:	693a      	ldr	r2, [r7, #16]
 800e044:	0151      	lsls	r1, r2, #5
 800e046:	697a      	ldr	r2, [r7, #20]
 800e048:	440a      	add	r2, r1
 800e04a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e04e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e052:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e054:	693b      	ldr	r3, [r7, #16]
 800e056:	015a      	lsls	r2, r3, #5
 800e058:	697b      	ldr	r3, [r7, #20]
 800e05a:	4413      	add	r3, r2
 800e05c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e060:	691a      	ldr	r2, [r3, #16]
 800e062:	68bb      	ldr	r3, [r7, #8]
 800e064:	695b      	ldr	r3, [r3, #20]
 800e066:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e06a:	6939      	ldr	r1, [r7, #16]
 800e06c:	0148      	lsls	r0, r1, #5
 800e06e:	6979      	ldr	r1, [r7, #20]
 800e070:	4401      	add	r1, r0
 800e072:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e076:	4313      	orrs	r3, r2
 800e078:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800e07a:	79fb      	ldrb	r3, [r7, #7]
 800e07c:	2b01      	cmp	r3, #1
 800e07e:	d11e      	bne.n	800e0be <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e080:	68bb      	ldr	r3, [r7, #8]
 800e082:	691b      	ldr	r3, [r3, #16]
 800e084:	2b00      	cmp	r3, #0
 800e086:	d009      	beq.n	800e09c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e088:	693b      	ldr	r3, [r7, #16]
 800e08a:	015a      	lsls	r2, r3, #5
 800e08c:	697b      	ldr	r3, [r7, #20]
 800e08e:	4413      	add	r3, r2
 800e090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e094:	461a      	mov	r2, r3
 800e096:	68bb      	ldr	r3, [r7, #8]
 800e098:	691b      	ldr	r3, [r3, #16]
 800e09a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e09c:	693b      	ldr	r3, [r7, #16]
 800e09e:	015a      	lsls	r2, r3, #5
 800e0a0:	697b      	ldr	r3, [r7, #20]
 800e0a2:	4413      	add	r3, r2
 800e0a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	693a      	ldr	r2, [r7, #16]
 800e0ac:	0151      	lsls	r1, r2, #5
 800e0ae:	697a      	ldr	r2, [r7, #20]
 800e0b0:	440a      	add	r2, r1
 800e0b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e0b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e0ba:	6013      	str	r3, [r2, #0]
 800e0bc:	e092      	b.n	800e1e4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e0be:	693b      	ldr	r3, [r7, #16]
 800e0c0:	015a      	lsls	r2, r3, #5
 800e0c2:	697b      	ldr	r3, [r7, #20]
 800e0c4:	4413      	add	r3, r2
 800e0c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	693a      	ldr	r2, [r7, #16]
 800e0ce:	0151      	lsls	r1, r2, #5
 800e0d0:	697a      	ldr	r2, [r7, #20]
 800e0d2:	440a      	add	r2, r1
 800e0d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e0d8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e0dc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800e0de:	68bb      	ldr	r3, [r7, #8]
 800e0e0:	695b      	ldr	r3, [r3, #20]
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d07e      	beq.n	800e1e4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e0e6:	697b      	ldr	r3, [r7, #20]
 800e0e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e0ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e0ee:	68bb      	ldr	r3, [r7, #8]
 800e0f0:	781b      	ldrb	r3, [r3, #0]
 800e0f2:	f003 030f 	and.w	r3, r3, #15
 800e0f6:	2101      	movs	r1, #1
 800e0f8:	fa01 f303 	lsl.w	r3, r1, r3
 800e0fc:	6979      	ldr	r1, [r7, #20]
 800e0fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e102:	4313      	orrs	r3, r2
 800e104:	634b      	str	r3, [r1, #52]	; 0x34
 800e106:	e06d      	b.n	800e1e4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e108:	693b      	ldr	r3, [r7, #16]
 800e10a:	015a      	lsls	r2, r3, #5
 800e10c:	697b      	ldr	r3, [r7, #20]
 800e10e:	4413      	add	r3, r2
 800e110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e114:	691b      	ldr	r3, [r3, #16]
 800e116:	693a      	ldr	r2, [r7, #16]
 800e118:	0151      	lsls	r1, r2, #5
 800e11a:	697a      	ldr	r2, [r7, #20]
 800e11c:	440a      	add	r2, r1
 800e11e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e122:	0cdb      	lsrs	r3, r3, #19
 800e124:	04db      	lsls	r3, r3, #19
 800e126:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e128:	693b      	ldr	r3, [r7, #16]
 800e12a:	015a      	lsls	r2, r3, #5
 800e12c:	697b      	ldr	r3, [r7, #20]
 800e12e:	4413      	add	r3, r2
 800e130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e134:	691b      	ldr	r3, [r3, #16]
 800e136:	693a      	ldr	r2, [r7, #16]
 800e138:	0151      	lsls	r1, r2, #5
 800e13a:	697a      	ldr	r2, [r7, #20]
 800e13c:	440a      	add	r2, r1
 800e13e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e142:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e146:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e14a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800e14c:	68bb      	ldr	r3, [r7, #8]
 800e14e:	695b      	ldr	r3, [r3, #20]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d003      	beq.n	800e15c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800e154:	68bb      	ldr	r3, [r7, #8]
 800e156:	689a      	ldr	r2, [r3, #8]
 800e158:	68bb      	ldr	r3, [r7, #8]
 800e15a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e15c:	693b      	ldr	r3, [r7, #16]
 800e15e:	015a      	lsls	r2, r3, #5
 800e160:	697b      	ldr	r3, [r7, #20]
 800e162:	4413      	add	r3, r2
 800e164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e168:	691b      	ldr	r3, [r3, #16]
 800e16a:	693a      	ldr	r2, [r7, #16]
 800e16c:	0151      	lsls	r1, r2, #5
 800e16e:	697a      	ldr	r2, [r7, #20]
 800e170:	440a      	add	r2, r1
 800e172:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e176:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e17a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800e17c:	693b      	ldr	r3, [r7, #16]
 800e17e:	015a      	lsls	r2, r3, #5
 800e180:	697b      	ldr	r3, [r7, #20]
 800e182:	4413      	add	r3, r2
 800e184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e188:	691a      	ldr	r2, [r3, #16]
 800e18a:	68bb      	ldr	r3, [r7, #8]
 800e18c:	689b      	ldr	r3, [r3, #8]
 800e18e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e192:	6939      	ldr	r1, [r7, #16]
 800e194:	0148      	lsls	r0, r1, #5
 800e196:	6979      	ldr	r1, [r7, #20]
 800e198:	4401      	add	r1, r0
 800e19a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e19e:	4313      	orrs	r3, r2
 800e1a0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800e1a2:	79fb      	ldrb	r3, [r7, #7]
 800e1a4:	2b01      	cmp	r3, #1
 800e1a6:	d10d      	bne.n	800e1c4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800e1a8:	68bb      	ldr	r3, [r7, #8]
 800e1aa:	68db      	ldr	r3, [r3, #12]
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d009      	beq.n	800e1c4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800e1b0:	68bb      	ldr	r3, [r7, #8]
 800e1b2:	68d9      	ldr	r1, [r3, #12]
 800e1b4:	693b      	ldr	r3, [r7, #16]
 800e1b6:	015a      	lsls	r2, r3, #5
 800e1b8:	697b      	ldr	r3, [r7, #20]
 800e1ba:	4413      	add	r3, r2
 800e1bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e1c0:	460a      	mov	r2, r1
 800e1c2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e1c4:	693b      	ldr	r3, [r7, #16]
 800e1c6:	015a      	lsls	r2, r3, #5
 800e1c8:	697b      	ldr	r3, [r7, #20]
 800e1ca:	4413      	add	r3, r2
 800e1cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	693a      	ldr	r2, [r7, #16]
 800e1d4:	0151      	lsls	r1, r2, #5
 800e1d6:	697a      	ldr	r2, [r7, #20]
 800e1d8:	440a      	add	r2, r1
 800e1da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e1de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e1e2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e1e4:	2300      	movs	r3, #0
}
 800e1e6:	4618      	mov	r0, r3
 800e1e8:	371c      	adds	r7, #28
 800e1ea:	46bd      	mov	sp, r7
 800e1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f0:	4770      	bx	lr

0800e1f2 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800e1f2:	b480      	push	{r7}
 800e1f4:	b089      	sub	sp, #36	; 0x24
 800e1f6:	af00      	add	r7, sp, #0
 800e1f8:	60f8      	str	r0, [r7, #12]
 800e1fa:	60b9      	str	r1, [r7, #8]
 800e1fc:	4611      	mov	r1, r2
 800e1fe:	461a      	mov	r2, r3
 800e200:	460b      	mov	r3, r1
 800e202:	71fb      	strb	r3, [r7, #7]
 800e204:	4613      	mov	r3, r2
 800e206:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800e20c:	68bb      	ldr	r3, [r7, #8]
 800e20e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800e210:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e214:	2b00      	cmp	r3, #0
 800e216:	d11a      	bne.n	800e24e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800e218:	88bb      	ldrh	r3, [r7, #4]
 800e21a:	3303      	adds	r3, #3
 800e21c:	089b      	lsrs	r3, r3, #2
 800e21e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800e220:	2300      	movs	r3, #0
 800e222:	61bb      	str	r3, [r7, #24]
 800e224:	e00f      	b.n	800e246 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800e226:	79fb      	ldrb	r3, [r7, #7]
 800e228:	031a      	lsls	r2, r3, #12
 800e22a:	697b      	ldr	r3, [r7, #20]
 800e22c:	4413      	add	r3, r2
 800e22e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e232:	461a      	mov	r2, r3
 800e234:	69fb      	ldr	r3, [r7, #28]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	6013      	str	r3, [r2, #0]
      pSrc++;
 800e23a:	69fb      	ldr	r3, [r7, #28]
 800e23c:	3304      	adds	r3, #4
 800e23e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800e240:	69bb      	ldr	r3, [r7, #24]
 800e242:	3301      	adds	r3, #1
 800e244:	61bb      	str	r3, [r7, #24]
 800e246:	69ba      	ldr	r2, [r7, #24]
 800e248:	693b      	ldr	r3, [r7, #16]
 800e24a:	429a      	cmp	r2, r3
 800e24c:	d3eb      	bcc.n	800e226 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800e24e:	2300      	movs	r3, #0
}
 800e250:	4618      	mov	r0, r3
 800e252:	3724      	adds	r7, #36	; 0x24
 800e254:	46bd      	mov	sp, r7
 800e256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e25a:	4770      	bx	lr

0800e25c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800e25c:	b480      	push	{r7}
 800e25e:	b089      	sub	sp, #36	; 0x24
 800e260:	af00      	add	r7, sp, #0
 800e262:	60f8      	str	r0, [r7, #12]
 800e264:	60b9      	str	r1, [r7, #8]
 800e266:	4613      	mov	r3, r2
 800e268:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800e26e:	68bb      	ldr	r3, [r7, #8]
 800e270:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800e272:	88fb      	ldrh	r3, [r7, #6]
 800e274:	3303      	adds	r3, #3
 800e276:	089b      	lsrs	r3, r3, #2
 800e278:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800e27a:	2300      	movs	r3, #0
 800e27c:	61bb      	str	r3, [r7, #24]
 800e27e:	e00b      	b.n	800e298 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800e280:	697b      	ldr	r3, [r7, #20]
 800e282:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e286:	681a      	ldr	r2, [r3, #0]
 800e288:	69fb      	ldr	r3, [r7, #28]
 800e28a:	601a      	str	r2, [r3, #0]
    pDest++;
 800e28c:	69fb      	ldr	r3, [r7, #28]
 800e28e:	3304      	adds	r3, #4
 800e290:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800e292:	69bb      	ldr	r3, [r7, #24]
 800e294:	3301      	adds	r3, #1
 800e296:	61bb      	str	r3, [r7, #24]
 800e298:	69ba      	ldr	r2, [r7, #24]
 800e29a:	693b      	ldr	r3, [r7, #16]
 800e29c:	429a      	cmp	r2, r3
 800e29e:	d3ef      	bcc.n	800e280 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800e2a0:	69fb      	ldr	r3, [r7, #28]
}
 800e2a2:	4618      	mov	r0, r3
 800e2a4:	3724      	adds	r7, #36	; 0x24
 800e2a6:	46bd      	mov	sp, r7
 800e2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ac:	4770      	bx	lr

0800e2ae <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e2ae:	b480      	push	{r7}
 800e2b0:	b085      	sub	sp, #20
 800e2b2:	af00      	add	r7, sp, #0
 800e2b4:	6078      	str	r0, [r7, #4]
 800e2b6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e2bc:	683b      	ldr	r3, [r7, #0]
 800e2be:	781b      	ldrb	r3, [r3, #0]
 800e2c0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e2c2:	683b      	ldr	r3, [r7, #0]
 800e2c4:	785b      	ldrb	r3, [r3, #1]
 800e2c6:	2b01      	cmp	r3, #1
 800e2c8:	d12c      	bne.n	800e324 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e2ca:	68bb      	ldr	r3, [r7, #8]
 800e2cc:	015a      	lsls	r2, r3, #5
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	4413      	add	r3, r2
 800e2d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	db12      	blt.n	800e302 <USB_EPSetStall+0x54>
 800e2dc:	68bb      	ldr	r3, [r7, #8]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d00f      	beq.n	800e302 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800e2e2:	68bb      	ldr	r3, [r7, #8]
 800e2e4:	015a      	lsls	r2, r3, #5
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	4413      	add	r3, r2
 800e2ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	68ba      	ldr	r2, [r7, #8]
 800e2f2:	0151      	lsls	r1, r2, #5
 800e2f4:	68fa      	ldr	r2, [r7, #12]
 800e2f6:	440a      	add	r2, r1
 800e2f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e2fc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e300:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800e302:	68bb      	ldr	r3, [r7, #8]
 800e304:	015a      	lsls	r2, r3, #5
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	4413      	add	r3, r2
 800e30a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	68ba      	ldr	r2, [r7, #8]
 800e312:	0151      	lsls	r1, r2, #5
 800e314:	68fa      	ldr	r2, [r7, #12]
 800e316:	440a      	add	r2, r1
 800e318:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e31c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e320:	6013      	str	r3, [r2, #0]
 800e322:	e02b      	b.n	800e37c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e324:	68bb      	ldr	r3, [r7, #8]
 800e326:	015a      	lsls	r2, r3, #5
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	4413      	add	r3, r2
 800e32c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	2b00      	cmp	r3, #0
 800e334:	db12      	blt.n	800e35c <USB_EPSetStall+0xae>
 800e336:	68bb      	ldr	r3, [r7, #8]
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d00f      	beq.n	800e35c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800e33c:	68bb      	ldr	r3, [r7, #8]
 800e33e:	015a      	lsls	r2, r3, #5
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	4413      	add	r3, r2
 800e344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	68ba      	ldr	r2, [r7, #8]
 800e34c:	0151      	lsls	r1, r2, #5
 800e34e:	68fa      	ldr	r2, [r7, #12]
 800e350:	440a      	add	r2, r1
 800e352:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e356:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e35a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800e35c:	68bb      	ldr	r3, [r7, #8]
 800e35e:	015a      	lsls	r2, r3, #5
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	4413      	add	r3, r2
 800e364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	68ba      	ldr	r2, [r7, #8]
 800e36c:	0151      	lsls	r1, r2, #5
 800e36e:	68fa      	ldr	r2, [r7, #12]
 800e370:	440a      	add	r2, r1
 800e372:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e376:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e37a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e37c:	2300      	movs	r3, #0
}
 800e37e:	4618      	mov	r0, r3
 800e380:	3714      	adds	r7, #20
 800e382:	46bd      	mov	sp, r7
 800e384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e388:	4770      	bx	lr

0800e38a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e38a:	b480      	push	{r7}
 800e38c:	b085      	sub	sp, #20
 800e38e:	af00      	add	r7, sp, #0
 800e390:	6078      	str	r0, [r7, #4]
 800e392:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e398:	683b      	ldr	r3, [r7, #0]
 800e39a:	781b      	ldrb	r3, [r3, #0]
 800e39c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e39e:	683b      	ldr	r3, [r7, #0]
 800e3a0:	785b      	ldrb	r3, [r3, #1]
 800e3a2:	2b01      	cmp	r3, #1
 800e3a4:	d128      	bne.n	800e3f8 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e3a6:	68bb      	ldr	r3, [r7, #8]
 800e3a8:	015a      	lsls	r2, r3, #5
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	4413      	add	r3, r2
 800e3ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	68ba      	ldr	r2, [r7, #8]
 800e3b6:	0151      	lsls	r1, r2, #5
 800e3b8:	68fa      	ldr	r2, [r7, #12]
 800e3ba:	440a      	add	r2, r1
 800e3bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e3c0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e3c4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e3c6:	683b      	ldr	r3, [r7, #0]
 800e3c8:	78db      	ldrb	r3, [r3, #3]
 800e3ca:	2b03      	cmp	r3, #3
 800e3cc:	d003      	beq.n	800e3d6 <USB_EPClearStall+0x4c>
 800e3ce:	683b      	ldr	r3, [r7, #0]
 800e3d0:	78db      	ldrb	r3, [r3, #3]
 800e3d2:	2b02      	cmp	r3, #2
 800e3d4:	d138      	bne.n	800e448 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e3d6:	68bb      	ldr	r3, [r7, #8]
 800e3d8:	015a      	lsls	r2, r3, #5
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	4413      	add	r3, r2
 800e3de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	68ba      	ldr	r2, [r7, #8]
 800e3e6:	0151      	lsls	r1, r2, #5
 800e3e8:	68fa      	ldr	r2, [r7, #12]
 800e3ea:	440a      	add	r2, r1
 800e3ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e3f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e3f4:	6013      	str	r3, [r2, #0]
 800e3f6:	e027      	b.n	800e448 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800e3f8:	68bb      	ldr	r3, [r7, #8]
 800e3fa:	015a      	lsls	r2, r3, #5
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	4413      	add	r3, r2
 800e400:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	68ba      	ldr	r2, [r7, #8]
 800e408:	0151      	lsls	r1, r2, #5
 800e40a:	68fa      	ldr	r2, [r7, #12]
 800e40c:	440a      	add	r2, r1
 800e40e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e412:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e416:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e418:	683b      	ldr	r3, [r7, #0]
 800e41a:	78db      	ldrb	r3, [r3, #3]
 800e41c:	2b03      	cmp	r3, #3
 800e41e:	d003      	beq.n	800e428 <USB_EPClearStall+0x9e>
 800e420:	683b      	ldr	r3, [r7, #0]
 800e422:	78db      	ldrb	r3, [r3, #3]
 800e424:	2b02      	cmp	r3, #2
 800e426:	d10f      	bne.n	800e448 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e428:	68bb      	ldr	r3, [r7, #8]
 800e42a:	015a      	lsls	r2, r3, #5
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	4413      	add	r3, r2
 800e430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	68ba      	ldr	r2, [r7, #8]
 800e438:	0151      	lsls	r1, r2, #5
 800e43a:	68fa      	ldr	r2, [r7, #12]
 800e43c:	440a      	add	r2, r1
 800e43e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e442:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e446:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800e448:	2300      	movs	r3, #0
}
 800e44a:	4618      	mov	r0, r3
 800e44c:	3714      	adds	r7, #20
 800e44e:	46bd      	mov	sp, r7
 800e450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e454:	4770      	bx	lr

0800e456 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800e456:	b480      	push	{r7}
 800e458:	b085      	sub	sp, #20
 800e45a:	af00      	add	r7, sp, #0
 800e45c:	6078      	str	r0, [r7, #4]
 800e45e:	460b      	mov	r3, r1
 800e460:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	68fa      	ldr	r2, [r7, #12]
 800e470:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e474:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800e478:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e480:	681a      	ldr	r2, [r3, #0]
 800e482:	78fb      	ldrb	r3, [r7, #3]
 800e484:	011b      	lsls	r3, r3, #4
 800e486:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800e48a:	68f9      	ldr	r1, [r7, #12]
 800e48c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e490:	4313      	orrs	r3, r2
 800e492:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800e494:	2300      	movs	r3, #0
}
 800e496:	4618      	mov	r0, r3
 800e498:	3714      	adds	r7, #20
 800e49a:	46bd      	mov	sp, r7
 800e49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a0:	4770      	bx	lr

0800e4a2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e4a2:	b580      	push	{r7, lr}
 800e4a4:	b084      	sub	sp, #16
 800e4a6:	af00      	add	r7, sp, #0
 800e4a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e4b4:	685b      	ldr	r3, [r3, #4]
 800e4b6:	68fa      	ldr	r2, [r7, #12]
 800e4b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e4bc:	f023 0302 	bic.w	r3, r3, #2
 800e4c0:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800e4c2:	2003      	movs	r0, #3
 800e4c4:	f7fa ff54 	bl	8009370 <HAL_Delay>

  return HAL_OK;
 800e4c8:	2300      	movs	r3, #0
}
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	3710      	adds	r7, #16
 800e4ce:	46bd      	mov	sp, r7
 800e4d0:	bd80      	pop	{r7, pc}

0800e4d2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e4d2:	b580      	push	{r7, lr}
 800e4d4:	b084      	sub	sp, #16
 800e4d6:	af00      	add	r7, sp, #0
 800e4d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e4e4:	685b      	ldr	r3, [r3, #4]
 800e4e6:	68fa      	ldr	r2, [r7, #12]
 800e4e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e4ec:	f043 0302 	orr.w	r3, r3, #2
 800e4f0:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800e4f2:	2003      	movs	r0, #3
 800e4f4:	f7fa ff3c 	bl	8009370 <HAL_Delay>

  return HAL_OK;
 800e4f8:	2300      	movs	r3, #0
}
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	3710      	adds	r7, #16
 800e4fe:	46bd      	mov	sp, r7
 800e500:	bd80      	pop	{r7, pc}

0800e502 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800e502:	b480      	push	{r7}
 800e504:	b085      	sub	sp, #20
 800e506:	af00      	add	r7, sp, #0
 800e508:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	695b      	ldr	r3, [r3, #20]
 800e50e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	699b      	ldr	r3, [r3, #24]
 800e514:	68fa      	ldr	r2, [r7, #12]
 800e516:	4013      	ands	r3, r2
 800e518:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800e51a:	68fb      	ldr	r3, [r7, #12]
}
 800e51c:	4618      	mov	r0, r3
 800e51e:	3714      	adds	r7, #20
 800e520:	46bd      	mov	sp, r7
 800e522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e526:	4770      	bx	lr

0800e528 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e528:	b480      	push	{r7}
 800e52a:	b085      	sub	sp, #20
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e53a:	699b      	ldr	r3, [r3, #24]
 800e53c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e544:	69db      	ldr	r3, [r3, #28]
 800e546:	68ba      	ldr	r2, [r7, #8]
 800e548:	4013      	ands	r3, r2
 800e54a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800e54c:	68bb      	ldr	r3, [r7, #8]
 800e54e:	0c1b      	lsrs	r3, r3, #16
}
 800e550:	4618      	mov	r0, r3
 800e552:	3714      	adds	r7, #20
 800e554:	46bd      	mov	sp, r7
 800e556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e55a:	4770      	bx	lr

0800e55c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e55c:	b480      	push	{r7}
 800e55e:	b085      	sub	sp, #20
 800e560:	af00      	add	r7, sp, #0
 800e562:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e56e:	699b      	ldr	r3, [r3, #24]
 800e570:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e578:	69db      	ldr	r3, [r3, #28]
 800e57a:	68ba      	ldr	r2, [r7, #8]
 800e57c:	4013      	ands	r3, r2
 800e57e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800e580:	68bb      	ldr	r3, [r7, #8]
 800e582:	b29b      	uxth	r3, r3
}
 800e584:	4618      	mov	r0, r3
 800e586:	3714      	adds	r7, #20
 800e588:	46bd      	mov	sp, r7
 800e58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e58e:	4770      	bx	lr

0800e590 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e590:	b480      	push	{r7}
 800e592:	b085      	sub	sp, #20
 800e594:	af00      	add	r7, sp, #0
 800e596:	6078      	str	r0, [r7, #4]
 800e598:	460b      	mov	r3, r1
 800e59a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800e5a0:	78fb      	ldrb	r3, [r7, #3]
 800e5a2:	015a      	lsls	r2, r3, #5
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	4413      	add	r3, r2
 800e5a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e5ac:	689b      	ldr	r3, [r3, #8]
 800e5ae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e5b6:	695b      	ldr	r3, [r3, #20]
 800e5b8:	68ba      	ldr	r2, [r7, #8]
 800e5ba:	4013      	ands	r3, r2
 800e5bc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e5be:	68bb      	ldr	r3, [r7, #8]
}
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	3714      	adds	r7, #20
 800e5c4:	46bd      	mov	sp, r7
 800e5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ca:	4770      	bx	lr

0800e5cc <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e5cc:	b480      	push	{r7}
 800e5ce:	b087      	sub	sp, #28
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	6078      	str	r0, [r7, #4]
 800e5d4:	460b      	mov	r3, r1
 800e5d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800e5dc:	697b      	ldr	r3, [r7, #20]
 800e5de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e5e2:	691b      	ldr	r3, [r3, #16]
 800e5e4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800e5e6:	697b      	ldr	r3, [r7, #20]
 800e5e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e5ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5ee:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800e5f0:	78fb      	ldrb	r3, [r7, #3]
 800e5f2:	f003 030f 	and.w	r3, r3, #15
 800e5f6:	68fa      	ldr	r2, [r7, #12]
 800e5f8:	fa22 f303 	lsr.w	r3, r2, r3
 800e5fc:	01db      	lsls	r3, r3, #7
 800e5fe:	b2db      	uxtb	r3, r3
 800e600:	693a      	ldr	r2, [r7, #16]
 800e602:	4313      	orrs	r3, r2
 800e604:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800e606:	78fb      	ldrb	r3, [r7, #3]
 800e608:	015a      	lsls	r2, r3, #5
 800e60a:	697b      	ldr	r3, [r7, #20]
 800e60c:	4413      	add	r3, r2
 800e60e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e612:	689b      	ldr	r3, [r3, #8]
 800e614:	693a      	ldr	r2, [r7, #16]
 800e616:	4013      	ands	r3, r2
 800e618:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e61a:	68bb      	ldr	r3, [r7, #8]
}
 800e61c:	4618      	mov	r0, r3
 800e61e:	371c      	adds	r7, #28
 800e620:	46bd      	mov	sp, r7
 800e622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e626:	4770      	bx	lr

0800e628 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800e628:	b480      	push	{r7}
 800e62a:	b083      	sub	sp, #12
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	695b      	ldr	r3, [r3, #20]
 800e634:	f003 0301 	and.w	r3, r3, #1
}
 800e638:	4618      	mov	r0, r3
 800e63a:	370c      	adds	r7, #12
 800e63c:	46bd      	mov	sp, r7
 800e63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e642:	4770      	bx	lr

0800e644 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800e644:	b480      	push	{r7}
 800e646:	b085      	sub	sp, #20
 800e648:	af00      	add	r7, sp, #0
 800e64a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	68fa      	ldr	r2, [r7, #12]
 800e65a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e65e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800e662:	f023 0307 	bic.w	r3, r3, #7
 800e666:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e66e:	689b      	ldr	r3, [r3, #8]
 800e670:	f003 0306 	and.w	r3, r3, #6
 800e674:	2b04      	cmp	r3, #4
 800e676:	d109      	bne.n	800e68c <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	68fa      	ldr	r2, [r7, #12]
 800e682:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e686:	f043 0303 	orr.w	r3, r3, #3
 800e68a:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e692:	685b      	ldr	r3, [r3, #4]
 800e694:	68fa      	ldr	r2, [r7, #12]
 800e696:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e69a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e69e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e6a0:	2300      	movs	r3, #0
}
 800e6a2:	4618      	mov	r0, r3
 800e6a4:	3714      	adds	r7, #20
 800e6a6:	46bd      	mov	sp, r7
 800e6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ac:	4770      	bx	lr
	...

0800e6b0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800e6b0:	b480      	push	{r7}
 800e6b2:	b087      	sub	sp, #28
 800e6b4:	af00      	add	r7, sp, #0
 800e6b6:	60f8      	str	r0, [r7, #12]
 800e6b8:	460b      	mov	r3, r1
 800e6ba:	607a      	str	r2, [r7, #4]
 800e6bc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	333c      	adds	r3, #60	; 0x3c
 800e6c6:	3304      	adds	r3, #4
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800e6cc:	693b      	ldr	r3, [r7, #16]
 800e6ce:	4a26      	ldr	r2, [pc, #152]	; (800e768 <USB_EP0_OutStart+0xb8>)
 800e6d0:	4293      	cmp	r3, r2
 800e6d2:	d90a      	bls.n	800e6ea <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e6d4:	697b      	ldr	r3, [r7, #20]
 800e6d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e6e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e6e4:	d101      	bne.n	800e6ea <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800e6e6:	2300      	movs	r3, #0
 800e6e8:	e037      	b.n	800e75a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800e6ea:	697b      	ldr	r3, [r7, #20]
 800e6ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e6f0:	461a      	mov	r2, r3
 800e6f2:	2300      	movs	r3, #0
 800e6f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e6f6:	697b      	ldr	r3, [r7, #20]
 800e6f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e6fc:	691b      	ldr	r3, [r3, #16]
 800e6fe:	697a      	ldr	r2, [r7, #20]
 800e700:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e704:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e708:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800e70a:	697b      	ldr	r3, [r7, #20]
 800e70c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e710:	691b      	ldr	r3, [r3, #16]
 800e712:	697a      	ldr	r2, [r7, #20]
 800e714:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e718:	f043 0318 	orr.w	r3, r3, #24
 800e71c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800e71e:	697b      	ldr	r3, [r7, #20]
 800e720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e724:	691b      	ldr	r3, [r3, #16]
 800e726:	697a      	ldr	r2, [r7, #20]
 800e728:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e72c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800e730:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800e732:	7afb      	ldrb	r3, [r7, #11]
 800e734:	2b01      	cmp	r3, #1
 800e736:	d10f      	bne.n	800e758 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800e738:	697b      	ldr	r3, [r7, #20]
 800e73a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e73e:	461a      	mov	r2, r3
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800e744:	697b      	ldr	r3, [r7, #20]
 800e746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	697a      	ldr	r2, [r7, #20]
 800e74e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e752:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800e756:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e758:	2300      	movs	r3, #0
}
 800e75a:	4618      	mov	r0, r3
 800e75c:	371c      	adds	r7, #28
 800e75e:	46bd      	mov	sp, r7
 800e760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e764:	4770      	bx	lr
 800e766:	bf00      	nop
 800e768:	4f54300a 	.word	0x4f54300a

0800e76c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e76c:	b480      	push	{r7}
 800e76e:	b085      	sub	sp, #20
 800e770:	af00      	add	r7, sp, #0
 800e772:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800e774:	2300      	movs	r3, #0
 800e776:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	3301      	adds	r3, #1
 800e77c:	60fb      	str	r3, [r7, #12]
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	4a13      	ldr	r2, [pc, #76]	; (800e7d0 <USB_CoreReset+0x64>)
 800e782:	4293      	cmp	r3, r2
 800e784:	d901      	bls.n	800e78a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800e786:	2303      	movs	r3, #3
 800e788:	e01b      	b.n	800e7c2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	691b      	ldr	r3, [r3, #16]
 800e78e:	2b00      	cmp	r3, #0
 800e790:	daf2      	bge.n	800e778 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800e792:	2300      	movs	r3, #0
 800e794:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	691b      	ldr	r3, [r3, #16]
 800e79a:	f043 0201 	orr.w	r2, r3, #1
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	3301      	adds	r3, #1
 800e7a6:	60fb      	str	r3, [r7, #12]
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	4a09      	ldr	r2, [pc, #36]	; (800e7d0 <USB_CoreReset+0x64>)
 800e7ac:	4293      	cmp	r3, r2
 800e7ae:	d901      	bls.n	800e7b4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800e7b0:	2303      	movs	r3, #3
 800e7b2:	e006      	b.n	800e7c2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	691b      	ldr	r3, [r3, #16]
 800e7b8:	f003 0301 	and.w	r3, r3, #1
 800e7bc:	2b01      	cmp	r3, #1
 800e7be:	d0f0      	beq.n	800e7a2 <USB_CoreReset+0x36>

  return HAL_OK;
 800e7c0:	2300      	movs	r3, #0
}
 800e7c2:	4618      	mov	r0, r3
 800e7c4:	3714      	adds	r7, #20
 800e7c6:	46bd      	mov	sp, r7
 800e7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7cc:	4770      	bx	lr
 800e7ce:	bf00      	nop
 800e7d0:	00030d40 	.word	0x00030d40

0800e7d4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e7d4:	b580      	push	{r7, lr}
 800e7d6:	b084      	sub	sp, #16
 800e7d8:	af00      	add	r7, sp, #0
 800e7da:	6078      	str	r0, [r7, #4]
 800e7dc:	460b      	mov	r3, r1
 800e7de:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800e7e0:	2300      	movs	r3, #0
 800e7e2:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	7c1b      	ldrb	r3, [r3, #16]
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d115      	bne.n	800e818 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e7ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e7f0:	2202      	movs	r2, #2
 800e7f2:	2181      	movs	r1, #129	; 0x81
 800e7f4:	6878      	ldr	r0, [r7, #4]
 800e7f6:	f005 f8a6 	bl	8013946 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	2201      	movs	r2, #1
 800e7fe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e800:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e804:	2202      	movs	r2, #2
 800e806:	2101      	movs	r1, #1
 800e808:	6878      	ldr	r0, [r7, #4]
 800e80a:	f005 f89c 	bl	8013946 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	2201      	movs	r2, #1
 800e812:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800e816:	e012      	b.n	800e83e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e818:	2340      	movs	r3, #64	; 0x40
 800e81a:	2202      	movs	r2, #2
 800e81c:	2181      	movs	r1, #129	; 0x81
 800e81e:	6878      	ldr	r0, [r7, #4]
 800e820:	f005 f891 	bl	8013946 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	2201      	movs	r2, #1
 800e828:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e82a:	2340      	movs	r3, #64	; 0x40
 800e82c:	2202      	movs	r2, #2
 800e82e:	2101      	movs	r1, #1
 800e830:	6878      	ldr	r0, [r7, #4]
 800e832:	f005 f888 	bl	8013946 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	2201      	movs	r2, #1
 800e83a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e83e:	2308      	movs	r3, #8
 800e840:	2203      	movs	r2, #3
 800e842:	2182      	movs	r1, #130	; 0x82
 800e844:	6878      	ldr	r0, [r7, #4]
 800e846:	f005 f87e 	bl	8013946 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	2201      	movs	r2, #1
 800e84e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800e850:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800e854:	f005 f9f4 	bl	8013c40 <malloc>
 800e858:	4603      	mov	r3, r0
 800e85a:	461a      	mov	r2, r3
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d102      	bne.n	800e872 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 800e86c:	2301      	movs	r3, #1
 800e86e:	73fb      	strb	r3, [r7, #15]
 800e870:	e026      	b.n	800e8c0 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e878:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800e884:	68bb      	ldr	r3, [r7, #8]
 800e886:	2200      	movs	r2, #0
 800e888:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800e88c:	68bb      	ldr	r3, [r7, #8]
 800e88e:	2200      	movs	r2, #0
 800e890:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	7c1b      	ldrb	r3, [r3, #16]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d109      	bne.n	800e8b0 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e89c:	68bb      	ldr	r3, [r7, #8]
 800e89e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e8a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e8a6:	2101      	movs	r1, #1
 800e8a8:	6878      	ldr	r0, [r7, #4]
 800e8aa:	f005 f93d 	bl	8013b28 <USBD_LL_PrepareReceive>
 800e8ae:	e007      	b.n	800e8c0 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e8b0:	68bb      	ldr	r3, [r7, #8]
 800e8b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e8b6:	2340      	movs	r3, #64	; 0x40
 800e8b8:	2101      	movs	r1, #1
 800e8ba:	6878      	ldr	r0, [r7, #4]
 800e8bc:	f005 f934 	bl	8013b28 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800e8c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8c2:	4618      	mov	r0, r3
 800e8c4:	3710      	adds	r7, #16
 800e8c6:	46bd      	mov	sp, r7
 800e8c8:	bd80      	pop	{r7, pc}

0800e8ca <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e8ca:	b580      	push	{r7, lr}
 800e8cc:	b084      	sub	sp, #16
 800e8ce:	af00      	add	r7, sp, #0
 800e8d0:	6078      	str	r0, [r7, #4]
 800e8d2:	460b      	mov	r3, r1
 800e8d4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800e8da:	2181      	movs	r1, #129	; 0x81
 800e8dc:	6878      	ldr	r0, [r7, #4]
 800e8de:	f005 f858 	bl	8013992 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	2200      	movs	r2, #0
 800e8e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800e8e8:	2101      	movs	r1, #1
 800e8ea:	6878      	ldr	r0, [r7, #4]
 800e8ec:	f005 f851 	bl	8013992 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	2200      	movs	r2, #0
 800e8f4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800e8f8:	2182      	movs	r1, #130	; 0x82
 800e8fa:	6878      	ldr	r0, [r7, #4]
 800e8fc:	f005 f849 	bl	8013992 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	2200      	movs	r2, #0
 800e904:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d00e      	beq.n	800e92e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e916:	685b      	ldr	r3, [r3, #4]
 800e918:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e920:	4618      	mov	r0, r3
 800e922:	f005 f995 	bl	8013c50 <free>
    pdev->pClassData = NULL;
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	2200      	movs	r2, #0
 800e92a:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 800e92e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e930:	4618      	mov	r0, r3
 800e932:	3710      	adds	r7, #16
 800e934:	46bd      	mov	sp, r7
 800e936:	bd80      	pop	{r7, pc}

0800e938 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800e938:	b580      	push	{r7, lr}
 800e93a:	b086      	sub	sp, #24
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	6078      	str	r0, [r7, #4]
 800e940:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e948:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800e94a:	2300      	movs	r3, #0
 800e94c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800e94e:	2300      	movs	r3, #0
 800e950:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800e952:	2300      	movs	r3, #0
 800e954:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e956:	683b      	ldr	r3, [r7, #0]
 800e958:	781b      	ldrb	r3, [r3, #0]
 800e95a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d039      	beq.n	800e9d6 <USBD_CDC_Setup+0x9e>
 800e962:	2b20      	cmp	r3, #32
 800e964:	d17c      	bne.n	800ea60 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 800e966:	683b      	ldr	r3, [r7, #0]
 800e968:	88db      	ldrh	r3, [r3, #6]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d029      	beq.n	800e9c2 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 800e96e:	683b      	ldr	r3, [r7, #0]
 800e970:	781b      	ldrb	r3, [r3, #0]
 800e972:	b25b      	sxtb	r3, r3
 800e974:	2b00      	cmp	r3, #0
 800e976:	da11      	bge.n	800e99c <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e97e:	689b      	ldr	r3, [r3, #8]
 800e980:	683a      	ldr	r2, [r7, #0]
 800e982:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 800e984:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e986:	683a      	ldr	r2, [r7, #0]
 800e988:	88d2      	ldrh	r2, [r2, #6]
 800e98a:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800e98c:	6939      	ldr	r1, [r7, #16]
 800e98e:	683b      	ldr	r3, [r7, #0]
 800e990:	88db      	ldrh	r3, [r3, #6]
 800e992:	461a      	mov	r2, r3
 800e994:	6878      	ldr	r0, [r7, #4]
 800e996:	f001 f9c9 	bl	800fd2c <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 800e99a:	e068      	b.n	800ea6e <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 800e99c:	683b      	ldr	r3, [r7, #0]
 800e99e:	785a      	ldrb	r2, [r3, #1]
 800e9a0:	693b      	ldr	r3, [r7, #16]
 800e9a2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800e9a6:	683b      	ldr	r3, [r7, #0]
 800e9a8:	88db      	ldrh	r3, [r3, #6]
 800e9aa:	b2da      	uxtb	r2, r3
 800e9ac:	693b      	ldr	r3, [r7, #16]
 800e9ae:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800e9b2:	6939      	ldr	r1, [r7, #16]
 800e9b4:	683b      	ldr	r3, [r7, #0]
 800e9b6:	88db      	ldrh	r3, [r3, #6]
 800e9b8:	461a      	mov	r2, r3
 800e9ba:	6878      	ldr	r0, [r7, #4]
 800e9bc:	f001 f9e4 	bl	800fd88 <USBD_CtlPrepareRx>
    break;
 800e9c0:	e055      	b.n	800ea6e <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e9c8:	689b      	ldr	r3, [r3, #8]
 800e9ca:	683a      	ldr	r2, [r7, #0]
 800e9cc:	7850      	ldrb	r0, [r2, #1]
 800e9ce:	2200      	movs	r2, #0
 800e9d0:	6839      	ldr	r1, [r7, #0]
 800e9d2:	4798      	blx	r3
    break;
 800e9d4:	e04b      	b.n	800ea6e <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800e9d6:	683b      	ldr	r3, [r7, #0]
 800e9d8:	785b      	ldrb	r3, [r3, #1]
 800e9da:	2b0a      	cmp	r3, #10
 800e9dc:	d017      	beq.n	800ea0e <USBD_CDC_Setup+0xd6>
 800e9de:	2b0b      	cmp	r3, #11
 800e9e0:	d029      	beq.n	800ea36 <USBD_CDC_Setup+0xfe>
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d133      	bne.n	800ea4e <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800e9ec:	2b03      	cmp	r3, #3
 800e9ee:	d107      	bne.n	800ea00 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800e9f0:	f107 030c 	add.w	r3, r7, #12
 800e9f4:	2202      	movs	r2, #2
 800e9f6:	4619      	mov	r1, r3
 800e9f8:	6878      	ldr	r0, [r7, #4]
 800e9fa:	f001 f997 	bl	800fd2c <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800e9fe:	e02e      	b.n	800ea5e <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800ea00:	6839      	ldr	r1, [r7, #0]
 800ea02:	6878      	ldr	r0, [r7, #4]
 800ea04:	f001 f927 	bl	800fc56 <USBD_CtlError>
			  ret = USBD_FAIL;
 800ea08:	2302      	movs	r3, #2
 800ea0a:	75fb      	strb	r3, [r7, #23]
      break;
 800ea0c:	e027      	b.n	800ea5e <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ea14:	2b03      	cmp	r3, #3
 800ea16:	d107      	bne.n	800ea28 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800ea18:	f107 030f 	add.w	r3, r7, #15
 800ea1c:	2201      	movs	r2, #1
 800ea1e:	4619      	mov	r1, r3
 800ea20:	6878      	ldr	r0, [r7, #4]
 800ea22:	f001 f983 	bl	800fd2c <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800ea26:	e01a      	b.n	800ea5e <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800ea28:	6839      	ldr	r1, [r7, #0]
 800ea2a:	6878      	ldr	r0, [r7, #4]
 800ea2c:	f001 f913 	bl	800fc56 <USBD_CtlError>
			  ret = USBD_FAIL;
 800ea30:	2302      	movs	r3, #2
 800ea32:	75fb      	strb	r3, [r7, #23]
      break;
 800ea34:	e013      	b.n	800ea5e <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ea3c:	2b03      	cmp	r3, #3
 800ea3e:	d00d      	beq.n	800ea5c <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 800ea40:	6839      	ldr	r1, [r7, #0]
 800ea42:	6878      	ldr	r0, [r7, #4]
 800ea44:	f001 f907 	bl	800fc56 <USBD_CtlError>
			  ret = USBD_FAIL;
 800ea48:	2302      	movs	r3, #2
 800ea4a:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800ea4c:	e006      	b.n	800ea5c <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 800ea4e:	6839      	ldr	r1, [r7, #0]
 800ea50:	6878      	ldr	r0, [r7, #4]
 800ea52:	f001 f900 	bl	800fc56 <USBD_CtlError>
      ret = USBD_FAIL;
 800ea56:	2302      	movs	r3, #2
 800ea58:	75fb      	strb	r3, [r7, #23]
      break;
 800ea5a:	e000      	b.n	800ea5e <USBD_CDC_Setup+0x126>
      break;
 800ea5c:	bf00      	nop
    }
    break;
 800ea5e:	e006      	b.n	800ea6e <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 800ea60:	6839      	ldr	r1, [r7, #0]
 800ea62:	6878      	ldr	r0, [r7, #4]
 800ea64:	f001 f8f7 	bl	800fc56 <USBD_CtlError>
    ret = USBD_FAIL;
 800ea68:	2302      	movs	r3, #2
 800ea6a:	75fb      	strb	r3, [r7, #23]
    break;
 800ea6c:	bf00      	nop
  }

  return ret;
 800ea6e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea70:	4618      	mov	r0, r3
 800ea72:	3718      	adds	r7, #24
 800ea74:	46bd      	mov	sp, r7
 800ea76:	bd80      	pop	{r7, pc}

0800ea78 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ea78:	b580      	push	{r7, lr}
 800ea7a:	b084      	sub	sp, #16
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	6078      	str	r0, [r7, #4]
 800ea80:	460b      	mov	r3, r1
 800ea82:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ea8a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800ea92:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d03a      	beq.n	800eb14 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800ea9e:	78fa      	ldrb	r2, [r7, #3]
 800eaa0:	6879      	ldr	r1, [r7, #4]
 800eaa2:	4613      	mov	r3, r2
 800eaa4:	009b      	lsls	r3, r3, #2
 800eaa6:	4413      	add	r3, r2
 800eaa8:	009b      	lsls	r3, r3, #2
 800eaaa:	440b      	add	r3, r1
 800eaac:	331c      	adds	r3, #28
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d029      	beq.n	800eb08 <USBD_CDC_DataIn+0x90>
 800eab4:	78fa      	ldrb	r2, [r7, #3]
 800eab6:	6879      	ldr	r1, [r7, #4]
 800eab8:	4613      	mov	r3, r2
 800eaba:	009b      	lsls	r3, r3, #2
 800eabc:	4413      	add	r3, r2
 800eabe:	009b      	lsls	r3, r3, #2
 800eac0:	440b      	add	r3, r1
 800eac2:	331c      	adds	r3, #28
 800eac4:	681a      	ldr	r2, [r3, #0]
 800eac6:	78f9      	ldrb	r1, [r7, #3]
 800eac8:	68b8      	ldr	r0, [r7, #8]
 800eaca:	460b      	mov	r3, r1
 800eacc:	00db      	lsls	r3, r3, #3
 800eace:	1a5b      	subs	r3, r3, r1
 800ead0:	009b      	lsls	r3, r3, #2
 800ead2:	4403      	add	r3, r0
 800ead4:	3344      	adds	r3, #68	; 0x44
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	fbb2 f1f3 	udiv	r1, r2, r3
 800eadc:	fb03 f301 	mul.w	r3, r3, r1
 800eae0:	1ad3      	subs	r3, r2, r3
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d110      	bne.n	800eb08 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800eae6:	78fa      	ldrb	r2, [r7, #3]
 800eae8:	6879      	ldr	r1, [r7, #4]
 800eaea:	4613      	mov	r3, r2
 800eaec:	009b      	lsls	r3, r3, #2
 800eaee:	4413      	add	r3, r2
 800eaf0:	009b      	lsls	r3, r3, #2
 800eaf2:	440b      	add	r3, r1
 800eaf4:	331c      	adds	r3, #28
 800eaf6:	2200      	movs	r2, #0
 800eaf8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800eafa:	78f9      	ldrb	r1, [r7, #3]
 800eafc:	2300      	movs	r3, #0
 800eafe:	2200      	movs	r2, #0
 800eb00:	6878      	ldr	r0, [r7, #4]
 800eb02:	f004 ffee 	bl	8013ae2 <USBD_LL_Transmit>
 800eb06:	e003      	b.n	800eb10 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	2200      	movs	r2, #0
 800eb0c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800eb10:	2300      	movs	r3, #0
 800eb12:	e000      	b.n	800eb16 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800eb14:	2302      	movs	r3, #2
  }
}
 800eb16:	4618      	mov	r0, r3
 800eb18:	3710      	adds	r7, #16
 800eb1a:	46bd      	mov	sp, r7
 800eb1c:	bd80      	pop	{r7, pc}

0800eb1e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800eb1e:	b580      	push	{r7, lr}
 800eb20:	b084      	sub	sp, #16
 800eb22:	af00      	add	r7, sp, #0
 800eb24:	6078      	str	r0, [r7, #4]
 800eb26:	460b      	mov	r3, r1
 800eb28:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800eb30:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800eb32:	78fb      	ldrb	r3, [r7, #3]
 800eb34:	4619      	mov	r1, r3
 800eb36:	6878      	ldr	r0, [r7, #4]
 800eb38:	f005 f819 	bl	8013b6e <USBD_LL_GetRxDataSize>
 800eb3c:	4602      	mov	r2, r0
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d00d      	beq.n	800eb6a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800eb54:	68db      	ldr	r3, [r3, #12]
 800eb56:	68fa      	ldr	r2, [r7, #12]
 800eb58:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800eb5c:	68fa      	ldr	r2, [r7, #12]
 800eb5e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800eb62:	4611      	mov	r1, r2
 800eb64:	4798      	blx	r3

    return USBD_OK;
 800eb66:	2300      	movs	r3, #0
 800eb68:	e000      	b.n	800eb6c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800eb6a:	2302      	movs	r3, #2
  }
}
 800eb6c:	4618      	mov	r0, r3
 800eb6e:	3710      	adds	r7, #16
 800eb70:	46bd      	mov	sp, r7
 800eb72:	bd80      	pop	{r7, pc}

0800eb74 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800eb74:	b580      	push	{r7, lr}
 800eb76:	b084      	sub	sp, #16
 800eb78:	af00      	add	r7, sp, #0
 800eb7a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800eb82:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d015      	beq.n	800ebba <USBD_CDC_EP0_RxReady+0x46>
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800eb94:	2bff      	cmp	r3, #255	; 0xff
 800eb96:	d010      	beq.n	800ebba <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800eb9e:	689b      	ldr	r3, [r3, #8]
 800eba0:	68fa      	ldr	r2, [r7, #12]
 800eba2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800eba6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800eba8:	68fa      	ldr	r2, [r7, #12]
 800ebaa:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ebae:	b292      	uxth	r2, r2
 800ebb0:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	22ff      	movs	r2, #255	; 0xff
 800ebb6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800ebba:	2300      	movs	r3, #0
}
 800ebbc:	4618      	mov	r0, r3
 800ebbe:	3710      	adds	r7, #16
 800ebc0:	46bd      	mov	sp, r7
 800ebc2:	bd80      	pop	{r7, pc}

0800ebc4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800ebc4:	b480      	push	{r7}
 800ebc6:	b083      	sub	sp, #12
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	2243      	movs	r2, #67	; 0x43
 800ebd0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800ebd2:	4b03      	ldr	r3, [pc, #12]	; (800ebe0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	370c      	adds	r7, #12
 800ebd8:	46bd      	mov	sp, r7
 800ebda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebde:	4770      	bx	lr
 800ebe0:	20000d48 	.word	0x20000d48

0800ebe4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800ebe4:	b480      	push	{r7}
 800ebe6:	b083      	sub	sp, #12
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	2243      	movs	r2, #67	; 0x43
 800ebf0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800ebf2:	4b03      	ldr	r3, [pc, #12]	; (800ec00 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800ebf4:	4618      	mov	r0, r3
 800ebf6:	370c      	adds	r7, #12
 800ebf8:	46bd      	mov	sp, r7
 800ebfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebfe:	4770      	bx	lr
 800ec00:	20000d04 	.word	0x20000d04

0800ec04 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800ec04:	b480      	push	{r7}
 800ec06:	b083      	sub	sp, #12
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	2243      	movs	r2, #67	; 0x43
 800ec10:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800ec12:	4b03      	ldr	r3, [pc, #12]	; (800ec20 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800ec14:	4618      	mov	r0, r3
 800ec16:	370c      	adds	r7, #12
 800ec18:	46bd      	mov	sp, r7
 800ec1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec1e:	4770      	bx	lr
 800ec20:	20000d8c 	.word	0x20000d8c

0800ec24 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800ec24:	b480      	push	{r7}
 800ec26:	b083      	sub	sp, #12
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	220a      	movs	r2, #10
 800ec30:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800ec32:	4b03      	ldr	r3, [pc, #12]	; (800ec40 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ec34:	4618      	mov	r0, r3
 800ec36:	370c      	adds	r7, #12
 800ec38:	46bd      	mov	sp, r7
 800ec3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec3e:	4770      	bx	lr
 800ec40:	20000cc0 	.word	0x20000cc0

0800ec44 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 800ec44:	b480      	push	{r7}
 800ec46:	b085      	sub	sp, #20
 800ec48:	af00      	add	r7, sp, #0
 800ec4a:	6078      	str	r0, [r7, #4]
 800ec4c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800ec4e:	2302      	movs	r3, #2
 800ec50:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800ec52:	683b      	ldr	r3, [r7, #0]
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d005      	beq.n	800ec64 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	683a      	ldr	r2, [r7, #0]
 800ec5c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 800ec60:	2300      	movs	r3, #0
 800ec62:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800ec64:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec66:	4618      	mov	r0, r3
 800ec68:	3714      	adds	r7, #20
 800ec6a:	46bd      	mov	sp, r7
 800ec6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec70:	4770      	bx	lr

0800ec72 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800ec72:	b480      	push	{r7}
 800ec74:	b087      	sub	sp, #28
 800ec76:	af00      	add	r7, sp, #0
 800ec78:	60f8      	str	r0, [r7, #12]
 800ec7a:	60b9      	str	r1, [r7, #8]
 800ec7c:	4613      	mov	r3, r2
 800ec7e:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ec86:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800ec88:	697b      	ldr	r3, [r7, #20]
 800ec8a:	68ba      	ldr	r2, [r7, #8]
 800ec8c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800ec90:	88fa      	ldrh	r2, [r7, #6]
 800ec92:	697b      	ldr	r3, [r7, #20]
 800ec94:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800ec98:	2300      	movs	r3, #0
}
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	371c      	adds	r7, #28
 800ec9e:	46bd      	mov	sp, r7
 800eca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca4:	4770      	bx	lr

0800eca6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800eca6:	b480      	push	{r7}
 800eca8:	b085      	sub	sp, #20
 800ecaa:	af00      	add	r7, sp, #0
 800ecac:	6078      	str	r0, [r7, #4]
 800ecae:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ecb6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	683a      	ldr	r2, [r7, #0]
 800ecbc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800ecc0:	2300      	movs	r3, #0
}
 800ecc2:	4618      	mov	r0, r3
 800ecc4:	3714      	adds	r7, #20
 800ecc6:	46bd      	mov	sp, r7
 800ecc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eccc:	4770      	bx	lr

0800ecce <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800ecce:	b580      	push	{r7, lr}
 800ecd0:	b084      	sub	sp, #16
 800ecd2:	af00      	add	r7, sp, #0
 800ecd4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ecdc:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d01c      	beq.n	800ed22 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d115      	bne.n	800ed1e <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	2201      	movs	r2, #1
 800ecf6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800ed10:	b29b      	uxth	r3, r3
 800ed12:	2181      	movs	r1, #129	; 0x81
 800ed14:	6878      	ldr	r0, [r7, #4]
 800ed16:	f004 fee4 	bl	8013ae2 <USBD_LL_Transmit>

      return USBD_OK;
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	e002      	b.n	800ed24 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800ed1e:	2301      	movs	r3, #1
 800ed20:	e000      	b.n	800ed24 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800ed22:	2302      	movs	r3, #2
  }
}
 800ed24:	4618      	mov	r0, r3
 800ed26:	3710      	adds	r7, #16
 800ed28:	46bd      	mov	sp, r7
 800ed2a:	bd80      	pop	{r7, pc}

0800ed2c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ed2c:	b580      	push	{r7, lr}
 800ed2e:	b084      	sub	sp, #16
 800ed30:	af00      	add	r7, sp, #0
 800ed32:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ed3a:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d017      	beq.n	800ed76 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	7c1b      	ldrb	r3, [r3, #16]
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d109      	bne.n	800ed62 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ed54:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ed58:	2101      	movs	r1, #1
 800ed5a:	6878      	ldr	r0, [r7, #4]
 800ed5c:	f004 fee4 	bl	8013b28 <USBD_LL_PrepareReceive>
 800ed60:	e007      	b.n	800ed72 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ed68:	2340      	movs	r3, #64	; 0x40
 800ed6a:	2101      	movs	r1, #1
 800ed6c:	6878      	ldr	r0, [r7, #4]
 800ed6e:	f004 fedb 	bl	8013b28 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800ed72:	2300      	movs	r3, #0
 800ed74:	e000      	b.n	800ed78 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800ed76:	2302      	movs	r3, #2
  }
}
 800ed78:	4618      	mov	r0, r3
 800ed7a:	3710      	adds	r7, #16
 800ed7c:	46bd      	mov	sp, r7
 800ed7e:	bd80      	pop	{r7, pc}

0800ed80 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ed80:	b580      	push	{r7, lr}
 800ed82:	b084      	sub	sp, #16
 800ed84:	af00      	add	r7, sp, #0
 800ed86:	60f8      	str	r0, [r7, #12]
 800ed88:	60b9      	str	r1, [r7, #8]
 800ed8a:	4613      	mov	r3, r2
 800ed8c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d101      	bne.n	800ed98 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800ed94:	2302      	movs	r3, #2
 800ed96:	e01a      	b.n	800edce <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d003      	beq.n	800edaa <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	2200      	movs	r2, #0
 800eda6:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800edaa:	68bb      	ldr	r3, [r7, #8]
 800edac:	2b00      	cmp	r3, #0
 800edae:	d003      	beq.n	800edb8 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	68ba      	ldr	r2, [r7, #8]
 800edb4:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	2201      	movs	r2, #1
 800edbc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	79fa      	ldrb	r2, [r7, #7]
 800edc4:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800edc6:	68f8      	ldr	r0, [r7, #12]
 800edc8:	f004 fd56 	bl	8013878 <USBD_LL_Init>

  return USBD_OK;
 800edcc:	2300      	movs	r3, #0
}
 800edce:	4618      	mov	r0, r3
 800edd0:	3710      	adds	r7, #16
 800edd2:	46bd      	mov	sp, r7
 800edd4:	bd80      	pop	{r7, pc}

0800edd6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800edd6:	b480      	push	{r7}
 800edd8:	b085      	sub	sp, #20
 800edda:	af00      	add	r7, sp, #0
 800eddc:	6078      	str	r0, [r7, #4]
 800edde:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800ede0:	2300      	movs	r3, #0
 800ede2:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800ede4:	683b      	ldr	r3, [r7, #0]
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d006      	beq.n	800edf8 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	683a      	ldr	r2, [r7, #0]
 800edee:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 800edf2:	2300      	movs	r3, #0
 800edf4:	73fb      	strb	r3, [r7, #15]
 800edf6:	e001      	b.n	800edfc <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800edf8:	2302      	movs	r3, #2
 800edfa:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800edfc:	7bfb      	ldrb	r3, [r7, #15]
}
 800edfe:	4618      	mov	r0, r3
 800ee00:	3714      	adds	r7, #20
 800ee02:	46bd      	mov	sp, r7
 800ee04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee08:	4770      	bx	lr

0800ee0a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800ee0a:	b580      	push	{r7, lr}
 800ee0c:	b082      	sub	sp, #8
 800ee0e:	af00      	add	r7, sp, #0
 800ee10:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800ee12:	6878      	ldr	r0, [r7, #4]
 800ee14:	f004 fd7c 	bl	8013910 <USBD_LL_Start>

  return USBD_OK;
 800ee18:	2300      	movs	r3, #0
}
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	3708      	adds	r7, #8
 800ee1e:	46bd      	mov	sp, r7
 800ee20:	bd80      	pop	{r7, pc}

0800ee22 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 800ee22:	b480      	push	{r7}
 800ee24:	b083      	sub	sp, #12
 800ee26:	af00      	add	r7, sp, #0
 800ee28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ee2a:	2300      	movs	r3, #0
}
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	370c      	adds	r7, #12
 800ee30:	46bd      	mov	sp, r7
 800ee32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee36:	4770      	bx	lr

0800ee38 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800ee38:	b580      	push	{r7, lr}
 800ee3a:	b084      	sub	sp, #16
 800ee3c:	af00      	add	r7, sp, #0
 800ee3e:	6078      	str	r0, [r7, #4]
 800ee40:	460b      	mov	r3, r1
 800ee42:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800ee44:	2302      	movs	r3, #2
 800ee46:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d00c      	beq.n	800ee6c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	78fa      	ldrb	r2, [r7, #3]
 800ee5c:	4611      	mov	r1, r2
 800ee5e:	6878      	ldr	r0, [r7, #4]
 800ee60:	4798      	blx	r3
 800ee62:	4603      	mov	r3, r0
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d101      	bne.n	800ee6c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800ee68:	2300      	movs	r3, #0
 800ee6a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800ee6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee6e:	4618      	mov	r0, r3
 800ee70:	3710      	adds	r7, #16
 800ee72:	46bd      	mov	sp, r7
 800ee74:	bd80      	pop	{r7, pc}

0800ee76 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800ee76:	b580      	push	{r7, lr}
 800ee78:	b082      	sub	sp, #8
 800ee7a:	af00      	add	r7, sp, #0
 800ee7c:	6078      	str	r0, [r7, #4]
 800ee7e:	460b      	mov	r3, r1
 800ee80:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ee88:	685b      	ldr	r3, [r3, #4]
 800ee8a:	78fa      	ldrb	r2, [r7, #3]
 800ee8c:	4611      	mov	r1, r2
 800ee8e:	6878      	ldr	r0, [r7, #4]
 800ee90:	4798      	blx	r3
  return USBD_OK;
 800ee92:	2300      	movs	r3, #0
}
 800ee94:	4618      	mov	r0, r3
 800ee96:	3708      	adds	r7, #8
 800ee98:	46bd      	mov	sp, r7
 800ee9a:	bd80      	pop	{r7, pc}

0800ee9c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ee9c:	b580      	push	{r7, lr}
 800ee9e:	b082      	sub	sp, #8
 800eea0:	af00      	add	r7, sp, #0
 800eea2:	6078      	str	r0, [r7, #4]
 800eea4:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800eeac:	6839      	ldr	r1, [r7, #0]
 800eeae:	4618      	mov	r0, r3
 800eeb0:	f000 fe94 	bl	800fbdc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	2201      	movs	r2, #1
 800eeb8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 800eec2:	461a      	mov	r2, r3
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800eed0:	f003 031f 	and.w	r3, r3, #31
 800eed4:	2b01      	cmp	r3, #1
 800eed6:	d00c      	beq.n	800eef2 <USBD_LL_SetupStage+0x56>
 800eed8:	2b01      	cmp	r3, #1
 800eeda:	d302      	bcc.n	800eee2 <USBD_LL_SetupStage+0x46>
 800eedc:	2b02      	cmp	r3, #2
 800eede:	d010      	beq.n	800ef02 <USBD_LL_SetupStage+0x66>
 800eee0:	e017      	b.n	800ef12 <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800eee8:	4619      	mov	r1, r3
 800eeea:	6878      	ldr	r0, [r7, #4]
 800eeec:	f000 fa04 	bl	800f2f8 <USBD_StdDevReq>
    break;
 800eef0:	e01a      	b.n	800ef28 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800eef8:	4619      	mov	r1, r3
 800eefa:	6878      	ldr	r0, [r7, #4]
 800eefc:	f000 fa66 	bl	800f3cc <USBD_StdItfReq>
    break;
 800ef00:	e012      	b.n	800ef28 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800ef08:	4619      	mov	r1, r3
 800ef0a:	6878      	ldr	r0, [r7, #4]
 800ef0c:	f000 faa4 	bl	800f458 <USBD_StdEPReq>
    break;
 800ef10:	e00a      	b.n	800ef28 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800ef18:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ef1c:	b2db      	uxtb	r3, r3
 800ef1e:	4619      	mov	r1, r3
 800ef20:	6878      	ldr	r0, [r7, #4]
 800ef22:	f004 fd55 	bl	80139d0 <USBD_LL_StallEP>
    break;
 800ef26:	bf00      	nop
  }

  return USBD_OK;
 800ef28:	2300      	movs	r3, #0
}
 800ef2a:	4618      	mov	r0, r3
 800ef2c:	3708      	adds	r7, #8
 800ef2e:	46bd      	mov	sp, r7
 800ef30:	bd80      	pop	{r7, pc}

0800ef32 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ef32:	b580      	push	{r7, lr}
 800ef34:	b086      	sub	sp, #24
 800ef36:	af00      	add	r7, sp, #0
 800ef38:	60f8      	str	r0, [r7, #12]
 800ef3a:	460b      	mov	r3, r1
 800ef3c:	607a      	str	r2, [r7, #4]
 800ef3e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800ef40:	7afb      	ldrb	r3, [r7, #11]
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d14b      	bne.n	800efde <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800ef4c:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800ef54:	2b03      	cmp	r3, #3
 800ef56:	d134      	bne.n	800efc2 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800ef58:	697b      	ldr	r3, [r7, #20]
 800ef5a:	68da      	ldr	r2, [r3, #12]
 800ef5c:	697b      	ldr	r3, [r7, #20]
 800ef5e:	691b      	ldr	r3, [r3, #16]
 800ef60:	429a      	cmp	r2, r3
 800ef62:	d919      	bls.n	800ef98 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 800ef64:	697b      	ldr	r3, [r7, #20]
 800ef66:	68da      	ldr	r2, [r3, #12]
 800ef68:	697b      	ldr	r3, [r7, #20]
 800ef6a:	691b      	ldr	r3, [r3, #16]
 800ef6c:	1ad2      	subs	r2, r2, r3
 800ef6e:	697b      	ldr	r3, [r7, #20]
 800ef70:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800ef72:	697b      	ldr	r3, [r7, #20]
 800ef74:	68da      	ldr	r2, [r3, #12]
 800ef76:	697b      	ldr	r3, [r7, #20]
 800ef78:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800ef7a:	429a      	cmp	r2, r3
 800ef7c:	d203      	bcs.n	800ef86 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800ef7e:	697b      	ldr	r3, [r7, #20]
 800ef80:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 800ef82:	b29b      	uxth	r3, r3
 800ef84:	e002      	b.n	800ef8c <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800ef86:	697b      	ldr	r3, [r7, #20]
 800ef88:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800ef8a:	b29b      	uxth	r3, r3
 800ef8c:	461a      	mov	r2, r3
 800ef8e:	6879      	ldr	r1, [r7, #4]
 800ef90:	68f8      	ldr	r0, [r7, #12]
 800ef92:	f000 ff17 	bl	800fdc4 <USBD_CtlContinueRx>
 800ef96:	e038      	b.n	800f00a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ef9e:	691b      	ldr	r3, [r3, #16]
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d00a      	beq.n	800efba <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800efaa:	2b03      	cmp	r3, #3
 800efac:	d105      	bne.n	800efba <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800efb4:	691b      	ldr	r3, [r3, #16]
 800efb6:	68f8      	ldr	r0, [r7, #12]
 800efb8:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800efba:	68f8      	ldr	r0, [r7, #12]
 800efbc:	f000 ff14 	bl	800fde8 <USBD_CtlSendStatus>
 800efc0:	e023      	b.n	800f00a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800efc8:	2b05      	cmp	r3, #5
 800efca:	d11e      	bne.n	800f00a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	2200      	movs	r2, #0
 800efd0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 800efd4:	2100      	movs	r1, #0
 800efd6:	68f8      	ldr	r0, [r7, #12]
 800efd8:	f004 fcfa 	bl	80139d0 <USBD_LL_StallEP>
 800efdc:	e015      	b.n	800f00a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800efe4:	699b      	ldr	r3, [r3, #24]
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d00d      	beq.n	800f006 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 800eff0:	2b03      	cmp	r3, #3
 800eff2:	d108      	bne.n	800f006 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800effa:	699b      	ldr	r3, [r3, #24]
 800effc:	7afa      	ldrb	r2, [r7, #11]
 800effe:	4611      	mov	r1, r2
 800f000:	68f8      	ldr	r0, [r7, #12]
 800f002:	4798      	blx	r3
 800f004:	e001      	b.n	800f00a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800f006:	2302      	movs	r3, #2
 800f008:	e000      	b.n	800f00c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800f00a:	2300      	movs	r3, #0
}
 800f00c:	4618      	mov	r0, r3
 800f00e:	3718      	adds	r7, #24
 800f010:	46bd      	mov	sp, r7
 800f012:	bd80      	pop	{r7, pc}

0800f014 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800f014:	b580      	push	{r7, lr}
 800f016:	b086      	sub	sp, #24
 800f018:	af00      	add	r7, sp, #0
 800f01a:	60f8      	str	r0, [r7, #12]
 800f01c:	460b      	mov	r3, r1
 800f01e:	607a      	str	r2, [r7, #4]
 800f020:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800f022:	7afb      	ldrb	r3, [r7, #11]
 800f024:	2b00      	cmp	r3, #0
 800f026:	d17f      	bne.n	800f128 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	3314      	adds	r3, #20
 800f02c:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800f034:	2b02      	cmp	r3, #2
 800f036:	d15c      	bne.n	800f0f2 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800f038:	697b      	ldr	r3, [r7, #20]
 800f03a:	68da      	ldr	r2, [r3, #12]
 800f03c:	697b      	ldr	r3, [r7, #20]
 800f03e:	691b      	ldr	r3, [r3, #16]
 800f040:	429a      	cmp	r2, r3
 800f042:	d915      	bls.n	800f070 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800f044:	697b      	ldr	r3, [r7, #20]
 800f046:	68da      	ldr	r2, [r3, #12]
 800f048:	697b      	ldr	r3, [r7, #20]
 800f04a:	691b      	ldr	r3, [r3, #16]
 800f04c:	1ad2      	subs	r2, r2, r3
 800f04e:	697b      	ldr	r3, [r7, #20]
 800f050:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800f052:	697b      	ldr	r3, [r7, #20]
 800f054:	68db      	ldr	r3, [r3, #12]
 800f056:	b29b      	uxth	r3, r3
 800f058:	461a      	mov	r2, r3
 800f05a:	6879      	ldr	r1, [r7, #4]
 800f05c:	68f8      	ldr	r0, [r7, #12]
 800f05e:	f000 fe81 	bl	800fd64 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800f062:	2300      	movs	r3, #0
 800f064:	2200      	movs	r2, #0
 800f066:	2100      	movs	r1, #0
 800f068:	68f8      	ldr	r0, [r7, #12]
 800f06a:	f004 fd5d 	bl	8013b28 <USBD_LL_PrepareReceive>
 800f06e:	e04e      	b.n	800f10e <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800f070:	697b      	ldr	r3, [r7, #20]
 800f072:	689b      	ldr	r3, [r3, #8]
 800f074:	697a      	ldr	r2, [r7, #20]
 800f076:	6912      	ldr	r2, [r2, #16]
 800f078:	fbb3 f1f2 	udiv	r1, r3, r2
 800f07c:	fb02 f201 	mul.w	r2, r2, r1
 800f080:	1a9b      	subs	r3, r3, r2
 800f082:	2b00      	cmp	r3, #0
 800f084:	d11c      	bne.n	800f0c0 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800f086:	697b      	ldr	r3, [r7, #20]
 800f088:	689a      	ldr	r2, [r3, #8]
 800f08a:	697b      	ldr	r3, [r7, #20]
 800f08c:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 800f08e:	429a      	cmp	r2, r3
 800f090:	d316      	bcc.n	800f0c0 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 800f092:	697b      	ldr	r3, [r7, #20]
 800f094:	689a      	ldr	r2, [r3, #8]
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800f09c:	429a      	cmp	r2, r3
 800f09e:	d20f      	bcs.n	800f0c0 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f0a0:	2200      	movs	r2, #0
 800f0a2:	2100      	movs	r1, #0
 800f0a4:	68f8      	ldr	r0, [r7, #12]
 800f0a6:	f000 fe5d 	bl	800fd64 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	2200      	movs	r2, #0
 800f0ae:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800f0b2:	2300      	movs	r3, #0
 800f0b4:	2200      	movs	r2, #0
 800f0b6:	2100      	movs	r1, #0
 800f0b8:	68f8      	ldr	r0, [r7, #12]
 800f0ba:	f004 fd35 	bl	8013b28 <USBD_LL_PrepareReceive>
 800f0be:	e026      	b.n	800f10e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800f0c6:	68db      	ldr	r3, [r3, #12]
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d00a      	beq.n	800f0e2 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800f0d2:	2b03      	cmp	r3, #3
 800f0d4:	d105      	bne.n	800f0e2 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800f0dc:	68db      	ldr	r3, [r3, #12]
 800f0de:	68f8      	ldr	r0, [r7, #12]
 800f0e0:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800f0e2:	2180      	movs	r1, #128	; 0x80
 800f0e4:	68f8      	ldr	r0, [r7, #12]
 800f0e6:	f004 fc73 	bl	80139d0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800f0ea:	68f8      	ldr	r0, [r7, #12]
 800f0ec:	f000 fe8f 	bl	800fe0e <USBD_CtlReceiveStatus>
 800f0f0:	e00d      	b.n	800f10e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800f0f8:	2b04      	cmp	r3, #4
 800f0fa:	d004      	beq.n	800f106 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800f102:	2b00      	cmp	r3, #0
 800f104:	d103      	bne.n	800f10e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800f106:	2180      	movs	r1, #128	; 0x80
 800f108:	68f8      	ldr	r0, [r7, #12]
 800f10a:	f004 fc61 	bl	80139d0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 800f114:	2b01      	cmp	r3, #1
 800f116:	d11d      	bne.n	800f154 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800f118:	68f8      	ldr	r0, [r7, #12]
 800f11a:	f7ff fe82 	bl	800ee22 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	2200      	movs	r2, #0
 800f122:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 800f126:	e015      	b.n	800f154 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800f12e:	695b      	ldr	r3, [r3, #20]
 800f130:	2b00      	cmp	r3, #0
 800f132:	d00d      	beq.n	800f150 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800f13a:	2b03      	cmp	r3, #3
 800f13c:	d108      	bne.n	800f150 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800f144:	695b      	ldr	r3, [r3, #20]
 800f146:	7afa      	ldrb	r2, [r7, #11]
 800f148:	4611      	mov	r1, r2
 800f14a:	68f8      	ldr	r0, [r7, #12]
 800f14c:	4798      	blx	r3
 800f14e:	e001      	b.n	800f154 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800f150:	2302      	movs	r3, #2
 800f152:	e000      	b.n	800f156 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800f154:	2300      	movs	r3, #0
}
 800f156:	4618      	mov	r0, r3
 800f158:	3718      	adds	r7, #24
 800f15a:	46bd      	mov	sp, r7
 800f15c:	bd80      	pop	{r7, pc}

0800f15e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800f15e:	b580      	push	{r7, lr}
 800f160:	b082      	sub	sp, #8
 800f162:	af00      	add	r7, sp, #0
 800f164:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f166:	2340      	movs	r3, #64	; 0x40
 800f168:	2200      	movs	r2, #0
 800f16a:	2100      	movs	r1, #0
 800f16c:	6878      	ldr	r0, [r7, #4]
 800f16e:	f004 fbea 	bl	8013946 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	2201      	movs	r2, #1
 800f176:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	2240      	movs	r2, #64	; 0x40
 800f17e:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f182:	2340      	movs	r3, #64	; 0x40
 800f184:	2200      	movs	r2, #0
 800f186:	2180      	movs	r1, #128	; 0x80
 800f188:	6878      	ldr	r0, [r7, #4]
 800f18a:	f004 fbdc 	bl	8013946 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	2201      	movs	r2, #1
 800f192:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	2240      	movs	r2, #64	; 0x40
 800f198:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	2201      	movs	r2, #1
 800f19e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	2200      	movs	r2, #0
 800f1a6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	2200      	movs	r2, #0
 800f1ae:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	2200      	movs	r2, #0
 800f1b4:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d009      	beq.n	800f1d6 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800f1c8:	685b      	ldr	r3, [r3, #4]
 800f1ca:	687a      	ldr	r2, [r7, #4]
 800f1cc:	6852      	ldr	r2, [r2, #4]
 800f1ce:	b2d2      	uxtb	r2, r2
 800f1d0:	4611      	mov	r1, r2
 800f1d2:	6878      	ldr	r0, [r7, #4]
 800f1d4:	4798      	blx	r3
  }

  return USBD_OK;
 800f1d6:	2300      	movs	r3, #0
}
 800f1d8:	4618      	mov	r0, r3
 800f1da:	3708      	adds	r7, #8
 800f1dc:	46bd      	mov	sp, r7
 800f1de:	bd80      	pop	{r7, pc}

0800f1e0 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800f1e0:	b480      	push	{r7}
 800f1e2:	b083      	sub	sp, #12
 800f1e4:	af00      	add	r7, sp, #0
 800f1e6:	6078      	str	r0, [r7, #4]
 800f1e8:	460b      	mov	r3, r1
 800f1ea:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	78fa      	ldrb	r2, [r7, #3]
 800f1f0:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800f1f2:	2300      	movs	r3, #0
}
 800f1f4:	4618      	mov	r0, r3
 800f1f6:	370c      	adds	r7, #12
 800f1f8:	46bd      	mov	sp, r7
 800f1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1fe:	4770      	bx	lr

0800f200 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800f200:	b480      	push	{r7}
 800f202:	b083      	sub	sp, #12
 800f204:	af00      	add	r7, sp, #0
 800f206:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	2204      	movs	r2, #4
 800f218:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800f21c:	2300      	movs	r3, #0
}
 800f21e:	4618      	mov	r0, r3
 800f220:	370c      	adds	r7, #12
 800f222:	46bd      	mov	sp, r7
 800f224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f228:	4770      	bx	lr

0800f22a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800f22a:	b480      	push	{r7}
 800f22c:	b083      	sub	sp, #12
 800f22e:	af00      	add	r7, sp, #0
 800f230:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800f23e:	2300      	movs	r3, #0
}
 800f240:	4618      	mov	r0, r3
 800f242:	370c      	adds	r7, #12
 800f244:	46bd      	mov	sp, r7
 800f246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f24a:	4770      	bx	lr

0800f24c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800f24c:	b580      	push	{r7, lr}
 800f24e:	b082      	sub	sp, #8
 800f250:	af00      	add	r7, sp, #0
 800f252:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800f25a:	2b03      	cmp	r3, #3
 800f25c:	d10b      	bne.n	800f276 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800f264:	69db      	ldr	r3, [r3, #28]
 800f266:	2b00      	cmp	r3, #0
 800f268:	d005      	beq.n	800f276 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800f270:	69db      	ldr	r3, [r3, #28]
 800f272:	6878      	ldr	r0, [r7, #4]
 800f274:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800f276:	2300      	movs	r3, #0
}
 800f278:	4618      	mov	r0, r3
 800f27a:	3708      	adds	r7, #8
 800f27c:	46bd      	mov	sp, r7
 800f27e:	bd80      	pop	{r7, pc}

0800f280 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800f280:	b480      	push	{r7}
 800f282:	b083      	sub	sp, #12
 800f284:	af00      	add	r7, sp, #0
 800f286:	6078      	str	r0, [r7, #4]
 800f288:	460b      	mov	r3, r1
 800f28a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800f28c:	2300      	movs	r3, #0
}
 800f28e:	4618      	mov	r0, r3
 800f290:	370c      	adds	r7, #12
 800f292:	46bd      	mov	sp, r7
 800f294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f298:	4770      	bx	lr

0800f29a <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800f29a:	b480      	push	{r7}
 800f29c:	b083      	sub	sp, #12
 800f29e:	af00      	add	r7, sp, #0
 800f2a0:	6078      	str	r0, [r7, #4]
 800f2a2:	460b      	mov	r3, r1
 800f2a4:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800f2a6:	2300      	movs	r3, #0
}
 800f2a8:	4618      	mov	r0, r3
 800f2aa:	370c      	adds	r7, #12
 800f2ac:	46bd      	mov	sp, r7
 800f2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b2:	4770      	bx	lr

0800f2b4 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 800f2b4:	b480      	push	{r7}
 800f2b6:	b083      	sub	sp, #12
 800f2b8:	af00      	add	r7, sp, #0
 800f2ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f2bc:	2300      	movs	r3, #0
}
 800f2be:	4618      	mov	r0, r3
 800f2c0:	370c      	adds	r7, #12
 800f2c2:	46bd      	mov	sp, r7
 800f2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c8:	4770      	bx	lr

0800f2ca <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 800f2ca:	b580      	push	{r7, lr}
 800f2cc:	b082      	sub	sp, #8
 800f2ce:	af00      	add	r7, sp, #0
 800f2d0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	2201      	movs	r2, #1
 800f2d6:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800f2e0:	685b      	ldr	r3, [r3, #4]
 800f2e2:	687a      	ldr	r2, [r7, #4]
 800f2e4:	6852      	ldr	r2, [r2, #4]
 800f2e6:	b2d2      	uxtb	r2, r2
 800f2e8:	4611      	mov	r1, r2
 800f2ea:	6878      	ldr	r0, [r7, #4]
 800f2ec:	4798      	blx	r3

  return USBD_OK;
 800f2ee:	2300      	movs	r3, #0
}
 800f2f0:	4618      	mov	r0, r3
 800f2f2:	3708      	adds	r7, #8
 800f2f4:	46bd      	mov	sp, r7
 800f2f6:	bd80      	pop	{r7, pc}

0800f2f8 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800f2f8:	b580      	push	{r7, lr}
 800f2fa:	b084      	sub	sp, #16
 800f2fc:	af00      	add	r7, sp, #0
 800f2fe:	6078      	str	r0, [r7, #4]
 800f300:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f302:	2300      	movs	r3, #0
 800f304:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f306:	683b      	ldr	r3, [r7, #0]
 800f308:	781b      	ldrb	r3, [r3, #0]
 800f30a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f30e:	2b20      	cmp	r3, #32
 800f310:	d004      	beq.n	800f31c <USBD_StdDevReq+0x24>
 800f312:	2b40      	cmp	r3, #64	; 0x40
 800f314:	d002      	beq.n	800f31c <USBD_StdDevReq+0x24>
 800f316:	2b00      	cmp	r3, #0
 800f318:	d008      	beq.n	800f32c <USBD_StdDevReq+0x34>
 800f31a:	e04c      	b.n	800f3b6 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800f322:	689b      	ldr	r3, [r3, #8]
 800f324:	6839      	ldr	r1, [r7, #0]
 800f326:	6878      	ldr	r0, [r7, #4]
 800f328:	4798      	blx	r3
    break;
 800f32a:	e049      	b.n	800f3c0 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 800f32c:	683b      	ldr	r3, [r7, #0]
 800f32e:	785b      	ldrb	r3, [r3, #1]
 800f330:	2b09      	cmp	r3, #9
 800f332:	d83a      	bhi.n	800f3aa <USBD_StdDevReq+0xb2>
 800f334:	a201      	add	r2, pc, #4	; (adr r2, 800f33c <USBD_StdDevReq+0x44>)
 800f336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f33a:	bf00      	nop
 800f33c:	0800f38d 	.word	0x0800f38d
 800f340:	0800f3a1 	.word	0x0800f3a1
 800f344:	0800f3ab 	.word	0x0800f3ab
 800f348:	0800f397 	.word	0x0800f397
 800f34c:	0800f3ab 	.word	0x0800f3ab
 800f350:	0800f36f 	.word	0x0800f36f
 800f354:	0800f365 	.word	0x0800f365
 800f358:	0800f3ab 	.word	0x0800f3ab
 800f35c:	0800f383 	.word	0x0800f383
 800f360:	0800f379 	.word	0x0800f379
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 800f364:	6839      	ldr	r1, [r7, #0]
 800f366:	6878      	ldr	r0, [r7, #4]
 800f368:	f000 f9d2 	bl	800f710 <USBD_GetDescriptor>
      break;
 800f36c:	e022      	b.n	800f3b4 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800f36e:	6839      	ldr	r1, [r7, #0]
 800f370:	6878      	ldr	r0, [r7, #4]
 800f372:	f000 fac7 	bl	800f904 <USBD_SetAddress>
      break;
 800f376:	e01d      	b.n	800f3b4 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800f378:	6839      	ldr	r1, [r7, #0]
 800f37a:	6878      	ldr	r0, [r7, #4]
 800f37c:	f000 fb04 	bl	800f988 <USBD_SetConfig>
      break;
 800f380:	e018      	b.n	800f3b4 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800f382:	6839      	ldr	r1, [r7, #0]
 800f384:	6878      	ldr	r0, [r7, #4]
 800f386:	f000 fb8d 	bl	800faa4 <USBD_GetConfig>
      break;
 800f38a:	e013      	b.n	800f3b4 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 800f38c:	6839      	ldr	r1, [r7, #0]
 800f38e:	6878      	ldr	r0, [r7, #4]
 800f390:	f000 fbbc 	bl	800fb0c <USBD_GetStatus>
      break;
 800f394:	e00e      	b.n	800f3b4 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800f396:	6839      	ldr	r1, [r7, #0]
 800f398:	6878      	ldr	r0, [r7, #4]
 800f39a:	f000 fbea 	bl	800fb72 <USBD_SetFeature>
      break;
 800f39e:	e009      	b.n	800f3b4 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 800f3a0:	6839      	ldr	r1, [r7, #0]
 800f3a2:	6878      	ldr	r0, [r7, #4]
 800f3a4:	f000 fbf9 	bl	800fb9a <USBD_ClrFeature>
      break;
 800f3a8:	e004      	b.n	800f3b4 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800f3aa:	6839      	ldr	r1, [r7, #0]
 800f3ac:	6878      	ldr	r0, [r7, #4]
 800f3ae:	f000 fc52 	bl	800fc56 <USBD_CtlError>
      break;
 800f3b2:	bf00      	nop
    }
    break;
 800f3b4:	e004      	b.n	800f3c0 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800f3b6:	6839      	ldr	r1, [r7, #0]
 800f3b8:	6878      	ldr	r0, [r7, #4]
 800f3ba:	f000 fc4c 	bl	800fc56 <USBD_CtlError>
    break;
 800f3be:	bf00      	nop
  }

  return ret;
 800f3c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3c2:	4618      	mov	r0, r3
 800f3c4:	3710      	adds	r7, #16
 800f3c6:	46bd      	mov	sp, r7
 800f3c8:	bd80      	pop	{r7, pc}
 800f3ca:	bf00      	nop

0800f3cc <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800f3cc:	b580      	push	{r7, lr}
 800f3ce:	b084      	sub	sp, #16
 800f3d0:	af00      	add	r7, sp, #0
 800f3d2:	6078      	str	r0, [r7, #4]
 800f3d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f3d6:	2300      	movs	r3, #0
 800f3d8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f3da:	683b      	ldr	r3, [r7, #0]
 800f3dc:	781b      	ldrb	r3, [r3, #0]
 800f3de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f3e2:	2b20      	cmp	r3, #32
 800f3e4:	d003      	beq.n	800f3ee <USBD_StdItfReq+0x22>
 800f3e6:	2b40      	cmp	r3, #64	; 0x40
 800f3e8:	d001      	beq.n	800f3ee <USBD_StdItfReq+0x22>
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d12a      	bne.n	800f444 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800f3f4:	3b01      	subs	r3, #1
 800f3f6:	2b02      	cmp	r3, #2
 800f3f8:	d81d      	bhi.n	800f436 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f3fa:	683b      	ldr	r3, [r7, #0]
 800f3fc:	889b      	ldrh	r3, [r3, #4]
 800f3fe:	b2db      	uxtb	r3, r3
 800f400:	2b01      	cmp	r3, #1
 800f402:	d813      	bhi.n	800f42c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800f40a:	689b      	ldr	r3, [r3, #8]
 800f40c:	6839      	ldr	r1, [r7, #0]
 800f40e:	6878      	ldr	r0, [r7, #4]
 800f410:	4798      	blx	r3
 800f412:	4603      	mov	r3, r0
 800f414:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800f416:	683b      	ldr	r3, [r7, #0]
 800f418:	88db      	ldrh	r3, [r3, #6]
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d110      	bne.n	800f440 <USBD_StdItfReq+0x74>
 800f41e:	7bfb      	ldrb	r3, [r7, #15]
 800f420:	2b00      	cmp	r3, #0
 800f422:	d10d      	bne.n	800f440 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 800f424:	6878      	ldr	r0, [r7, #4]
 800f426:	f000 fcdf 	bl	800fde8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800f42a:	e009      	b.n	800f440 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800f42c:	6839      	ldr	r1, [r7, #0]
 800f42e:	6878      	ldr	r0, [r7, #4]
 800f430:	f000 fc11 	bl	800fc56 <USBD_CtlError>
      break;
 800f434:	e004      	b.n	800f440 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800f436:	6839      	ldr	r1, [r7, #0]
 800f438:	6878      	ldr	r0, [r7, #4]
 800f43a:	f000 fc0c 	bl	800fc56 <USBD_CtlError>
      break;
 800f43e:	e000      	b.n	800f442 <USBD_StdItfReq+0x76>
      break;
 800f440:	bf00      	nop
    }
    break;
 800f442:	e004      	b.n	800f44e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800f444:	6839      	ldr	r1, [r7, #0]
 800f446:	6878      	ldr	r0, [r7, #4]
 800f448:	f000 fc05 	bl	800fc56 <USBD_CtlError>
    break;
 800f44c:	bf00      	nop
  }

  return USBD_OK;
 800f44e:	2300      	movs	r3, #0
}
 800f450:	4618      	mov	r0, r3
 800f452:	3710      	adds	r7, #16
 800f454:	46bd      	mov	sp, r7
 800f456:	bd80      	pop	{r7, pc}

0800f458 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800f458:	b580      	push	{r7, lr}
 800f45a:	b084      	sub	sp, #16
 800f45c:	af00      	add	r7, sp, #0
 800f45e:	6078      	str	r0, [r7, #4]
 800f460:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800f462:	2300      	movs	r3, #0
 800f464:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800f466:	683b      	ldr	r3, [r7, #0]
 800f468:	889b      	ldrh	r3, [r3, #4]
 800f46a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f46c:	683b      	ldr	r3, [r7, #0]
 800f46e:	781b      	ldrb	r3, [r3, #0]
 800f470:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f474:	2b20      	cmp	r3, #32
 800f476:	d004      	beq.n	800f482 <USBD_StdEPReq+0x2a>
 800f478:	2b40      	cmp	r3, #64	; 0x40
 800f47a:	d002      	beq.n	800f482 <USBD_StdEPReq+0x2a>
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d008      	beq.n	800f492 <USBD_StdEPReq+0x3a>
 800f480:	e13b      	b.n	800f6fa <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800f488:	689b      	ldr	r3, [r3, #8]
 800f48a:	6839      	ldr	r1, [r7, #0]
 800f48c:	6878      	ldr	r0, [r7, #4]
 800f48e:	4798      	blx	r3
    break;
 800f490:	e138      	b.n	800f704 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 800f492:	683b      	ldr	r3, [r7, #0]
 800f494:	781b      	ldrb	r3, [r3, #0]
 800f496:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f49a:	2b20      	cmp	r3, #32
 800f49c:	d10a      	bne.n	800f4b4 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800f4a4:	689b      	ldr	r3, [r3, #8]
 800f4a6:	6839      	ldr	r1, [r7, #0]
 800f4a8:	6878      	ldr	r0, [r7, #4]
 800f4aa:	4798      	blx	r3
 800f4ac:	4603      	mov	r3, r0
 800f4ae:	73fb      	strb	r3, [r7, #15]

      return ret;
 800f4b0:	7bfb      	ldrb	r3, [r7, #15]
 800f4b2:	e128      	b.n	800f706 <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 800f4b4:	683b      	ldr	r3, [r7, #0]
 800f4b6:	785b      	ldrb	r3, [r3, #1]
 800f4b8:	2b01      	cmp	r3, #1
 800f4ba:	d03e      	beq.n	800f53a <USBD_StdEPReq+0xe2>
 800f4bc:	2b03      	cmp	r3, #3
 800f4be:	d002      	beq.n	800f4c6 <USBD_StdEPReq+0x6e>
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d070      	beq.n	800f5a6 <USBD_StdEPReq+0x14e>
 800f4c4:	e113      	b.n	800f6ee <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800f4cc:	2b02      	cmp	r3, #2
 800f4ce:	d002      	beq.n	800f4d6 <USBD_StdEPReq+0x7e>
 800f4d0:	2b03      	cmp	r3, #3
 800f4d2:	d015      	beq.n	800f500 <USBD_StdEPReq+0xa8>
 800f4d4:	e02b      	b.n	800f52e <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f4d6:	7bbb      	ldrb	r3, [r7, #14]
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d00c      	beq.n	800f4f6 <USBD_StdEPReq+0x9e>
 800f4dc:	7bbb      	ldrb	r3, [r7, #14]
 800f4de:	2b80      	cmp	r3, #128	; 0x80
 800f4e0:	d009      	beq.n	800f4f6 <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800f4e2:	7bbb      	ldrb	r3, [r7, #14]
 800f4e4:	4619      	mov	r1, r3
 800f4e6:	6878      	ldr	r0, [r7, #4]
 800f4e8:	f004 fa72 	bl	80139d0 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800f4ec:	2180      	movs	r1, #128	; 0x80
 800f4ee:	6878      	ldr	r0, [r7, #4]
 800f4f0:	f004 fa6e 	bl	80139d0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800f4f4:	e020      	b.n	800f538 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 800f4f6:	6839      	ldr	r1, [r7, #0]
 800f4f8:	6878      	ldr	r0, [r7, #4]
 800f4fa:	f000 fbac 	bl	800fc56 <USBD_CtlError>
        break;
 800f4fe:	e01b      	b.n	800f538 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800f500:	683b      	ldr	r3, [r7, #0]
 800f502:	885b      	ldrh	r3, [r3, #2]
 800f504:	2b00      	cmp	r3, #0
 800f506:	d10e      	bne.n	800f526 <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f508:	7bbb      	ldrb	r3, [r7, #14]
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d00b      	beq.n	800f526 <USBD_StdEPReq+0xce>
 800f50e:	7bbb      	ldrb	r3, [r7, #14]
 800f510:	2b80      	cmp	r3, #128	; 0x80
 800f512:	d008      	beq.n	800f526 <USBD_StdEPReq+0xce>
 800f514:	683b      	ldr	r3, [r7, #0]
 800f516:	88db      	ldrh	r3, [r3, #6]
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d104      	bne.n	800f526 <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 800f51c:	7bbb      	ldrb	r3, [r7, #14]
 800f51e:	4619      	mov	r1, r3
 800f520:	6878      	ldr	r0, [r7, #4]
 800f522:	f004 fa55 	bl	80139d0 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800f526:	6878      	ldr	r0, [r7, #4]
 800f528:	f000 fc5e 	bl	800fde8 <USBD_CtlSendStatus>

        break;
 800f52c:	e004      	b.n	800f538 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 800f52e:	6839      	ldr	r1, [r7, #0]
 800f530:	6878      	ldr	r0, [r7, #4]
 800f532:	f000 fb90 	bl	800fc56 <USBD_CtlError>
        break;
 800f536:	bf00      	nop
      }
      break;
 800f538:	e0de      	b.n	800f6f8 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800f540:	2b02      	cmp	r3, #2
 800f542:	d002      	beq.n	800f54a <USBD_StdEPReq+0xf2>
 800f544:	2b03      	cmp	r3, #3
 800f546:	d015      	beq.n	800f574 <USBD_StdEPReq+0x11c>
 800f548:	e026      	b.n	800f598 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f54a:	7bbb      	ldrb	r3, [r7, #14]
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d00c      	beq.n	800f56a <USBD_StdEPReq+0x112>
 800f550:	7bbb      	ldrb	r3, [r7, #14]
 800f552:	2b80      	cmp	r3, #128	; 0x80
 800f554:	d009      	beq.n	800f56a <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800f556:	7bbb      	ldrb	r3, [r7, #14]
 800f558:	4619      	mov	r1, r3
 800f55a:	6878      	ldr	r0, [r7, #4]
 800f55c:	f004 fa38 	bl	80139d0 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800f560:	2180      	movs	r1, #128	; 0x80
 800f562:	6878      	ldr	r0, [r7, #4]
 800f564:	f004 fa34 	bl	80139d0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800f568:	e01c      	b.n	800f5a4 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 800f56a:	6839      	ldr	r1, [r7, #0]
 800f56c:	6878      	ldr	r0, [r7, #4]
 800f56e:	f000 fb72 	bl	800fc56 <USBD_CtlError>
        break;
 800f572:	e017      	b.n	800f5a4 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800f574:	683b      	ldr	r3, [r7, #0]
 800f576:	885b      	ldrh	r3, [r3, #2]
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d112      	bne.n	800f5a2 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800f57c:	7bbb      	ldrb	r3, [r7, #14]
 800f57e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f582:	2b00      	cmp	r3, #0
 800f584:	d004      	beq.n	800f590 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800f586:	7bbb      	ldrb	r3, [r7, #14]
 800f588:	4619      	mov	r1, r3
 800f58a:	6878      	ldr	r0, [r7, #4]
 800f58c:	f004 fa3f 	bl	8013a0e <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 800f590:	6878      	ldr	r0, [r7, #4]
 800f592:	f000 fc29 	bl	800fde8 <USBD_CtlSendStatus>
        }
        break;
 800f596:	e004      	b.n	800f5a2 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 800f598:	6839      	ldr	r1, [r7, #0]
 800f59a:	6878      	ldr	r0, [r7, #4]
 800f59c:	f000 fb5b 	bl	800fc56 <USBD_CtlError>
        break;
 800f5a0:	e000      	b.n	800f5a4 <USBD_StdEPReq+0x14c>
        break;
 800f5a2:	bf00      	nop
      }
      break;
 800f5a4:	e0a8      	b.n	800f6f8 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800f5ac:	2b02      	cmp	r3, #2
 800f5ae:	d002      	beq.n	800f5b6 <USBD_StdEPReq+0x15e>
 800f5b0:	2b03      	cmp	r3, #3
 800f5b2:	d031      	beq.n	800f618 <USBD_StdEPReq+0x1c0>
 800f5b4:	e095      	b.n	800f6e2 <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f5b6:	7bbb      	ldrb	r3, [r7, #14]
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d007      	beq.n	800f5cc <USBD_StdEPReq+0x174>
 800f5bc:	7bbb      	ldrb	r3, [r7, #14]
 800f5be:	2b80      	cmp	r3, #128	; 0x80
 800f5c0:	d004      	beq.n	800f5cc <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 800f5c2:	6839      	ldr	r1, [r7, #0]
 800f5c4:	6878      	ldr	r0, [r7, #4]
 800f5c6:	f000 fb46 	bl	800fc56 <USBD_CtlError>
          break;
 800f5ca:	e08f      	b.n	800f6ec <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800f5cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	da0b      	bge.n	800f5ec <USBD_StdEPReq+0x194>
 800f5d4:	7bbb      	ldrb	r3, [r7, #14]
 800f5d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f5da:	4613      	mov	r3, r2
 800f5dc:	009b      	lsls	r3, r3, #2
 800f5de:	4413      	add	r3, r2
 800f5e0:	009b      	lsls	r3, r3, #2
 800f5e2:	3310      	adds	r3, #16
 800f5e4:	687a      	ldr	r2, [r7, #4]
 800f5e6:	4413      	add	r3, r2
 800f5e8:	3304      	adds	r3, #4
 800f5ea:	e00a      	b.n	800f602 <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 800f5ec:	7bbb      	ldrb	r3, [r7, #14]
 800f5ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800f5f2:	4613      	mov	r3, r2
 800f5f4:	009b      	lsls	r3, r3, #2
 800f5f6:	4413      	add	r3, r2
 800f5f8:	009b      	lsls	r3, r3, #2
 800f5fa:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800f5fe:	687a      	ldr	r2, [r7, #4]
 800f600:	4413      	add	r3, r2
 800f602:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 800f604:	68bb      	ldr	r3, [r7, #8]
 800f606:	2200      	movs	r2, #0
 800f608:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800f60a:	68bb      	ldr	r3, [r7, #8]
 800f60c:	2202      	movs	r2, #2
 800f60e:	4619      	mov	r1, r3
 800f610:	6878      	ldr	r0, [r7, #4]
 800f612:	f000 fb8b 	bl	800fd2c <USBD_CtlSendData>
          break;
 800f616:	e069      	b.n	800f6ec <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800f618:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	da11      	bge.n	800f644 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f620:	7bbb      	ldrb	r3, [r7, #14]
 800f622:	f003 020f 	and.w	r2, r3, #15
 800f626:	6879      	ldr	r1, [r7, #4]
 800f628:	4613      	mov	r3, r2
 800f62a:	009b      	lsls	r3, r3, #2
 800f62c:	4413      	add	r3, r2
 800f62e:	009b      	lsls	r3, r3, #2
 800f630:	440b      	add	r3, r1
 800f632:	3318      	adds	r3, #24
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	2b00      	cmp	r3, #0
 800f638:	d117      	bne.n	800f66a <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800f63a:	6839      	ldr	r1, [r7, #0]
 800f63c:	6878      	ldr	r0, [r7, #4]
 800f63e:	f000 fb0a 	bl	800fc56 <USBD_CtlError>
            break;
 800f642:	e053      	b.n	800f6ec <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f644:	7bbb      	ldrb	r3, [r7, #14]
 800f646:	f003 020f 	and.w	r2, r3, #15
 800f64a:	6879      	ldr	r1, [r7, #4]
 800f64c:	4613      	mov	r3, r2
 800f64e:	009b      	lsls	r3, r3, #2
 800f650:	4413      	add	r3, r2
 800f652:	009b      	lsls	r3, r3, #2
 800f654:	440b      	add	r3, r1
 800f656:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d104      	bne.n	800f66a <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800f660:	6839      	ldr	r1, [r7, #0]
 800f662:	6878      	ldr	r0, [r7, #4]
 800f664:	f000 faf7 	bl	800fc56 <USBD_CtlError>
            break;
 800f668:	e040      	b.n	800f6ec <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800f66a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f66e:	2b00      	cmp	r3, #0
 800f670:	da0b      	bge.n	800f68a <USBD_StdEPReq+0x232>
 800f672:	7bbb      	ldrb	r3, [r7, #14]
 800f674:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f678:	4613      	mov	r3, r2
 800f67a:	009b      	lsls	r3, r3, #2
 800f67c:	4413      	add	r3, r2
 800f67e:	009b      	lsls	r3, r3, #2
 800f680:	3310      	adds	r3, #16
 800f682:	687a      	ldr	r2, [r7, #4]
 800f684:	4413      	add	r3, r2
 800f686:	3304      	adds	r3, #4
 800f688:	e00a      	b.n	800f6a0 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 800f68a:	7bbb      	ldrb	r3, [r7, #14]
 800f68c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800f690:	4613      	mov	r3, r2
 800f692:	009b      	lsls	r3, r3, #2
 800f694:	4413      	add	r3, r2
 800f696:	009b      	lsls	r3, r3, #2
 800f698:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800f69c:	687a      	ldr	r2, [r7, #4]
 800f69e:	4413      	add	r3, r2
 800f6a0:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f6a2:	7bbb      	ldrb	r3, [r7, #14]
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d002      	beq.n	800f6ae <USBD_StdEPReq+0x256>
 800f6a8:	7bbb      	ldrb	r3, [r7, #14]
 800f6aa:	2b80      	cmp	r3, #128	; 0x80
 800f6ac:	d103      	bne.n	800f6b6 <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 800f6ae:	68bb      	ldr	r3, [r7, #8]
 800f6b0:	2200      	movs	r2, #0
 800f6b2:	601a      	str	r2, [r3, #0]
 800f6b4:	e00e      	b.n	800f6d4 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800f6b6:	7bbb      	ldrb	r3, [r7, #14]
 800f6b8:	4619      	mov	r1, r3
 800f6ba:	6878      	ldr	r0, [r7, #4]
 800f6bc:	f004 f9c6 	bl	8013a4c <USBD_LL_IsStallEP>
 800f6c0:	4603      	mov	r3, r0
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d003      	beq.n	800f6ce <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 800f6c6:	68bb      	ldr	r3, [r7, #8]
 800f6c8:	2201      	movs	r2, #1
 800f6ca:	601a      	str	r2, [r3, #0]
 800f6cc:	e002      	b.n	800f6d4 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 800f6ce:	68bb      	ldr	r3, [r7, #8]
 800f6d0:	2200      	movs	r2, #0
 800f6d2:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800f6d4:	68bb      	ldr	r3, [r7, #8]
 800f6d6:	2202      	movs	r2, #2
 800f6d8:	4619      	mov	r1, r3
 800f6da:	6878      	ldr	r0, [r7, #4]
 800f6dc:	f000 fb26 	bl	800fd2c <USBD_CtlSendData>
          break;
 800f6e0:	e004      	b.n	800f6ec <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 800f6e2:	6839      	ldr	r1, [r7, #0]
 800f6e4:	6878      	ldr	r0, [r7, #4]
 800f6e6:	f000 fab6 	bl	800fc56 <USBD_CtlError>
        break;
 800f6ea:	bf00      	nop
      }
      break;
 800f6ec:	e004      	b.n	800f6f8 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 800f6ee:	6839      	ldr	r1, [r7, #0]
 800f6f0:	6878      	ldr	r0, [r7, #4]
 800f6f2:	f000 fab0 	bl	800fc56 <USBD_CtlError>
      break;
 800f6f6:	bf00      	nop
    }
    break;
 800f6f8:	e004      	b.n	800f704 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 800f6fa:	6839      	ldr	r1, [r7, #0]
 800f6fc:	6878      	ldr	r0, [r7, #4]
 800f6fe:	f000 faaa 	bl	800fc56 <USBD_CtlError>
    break;
 800f702:	bf00      	nop
  }

  return ret;
 800f704:	7bfb      	ldrb	r3, [r7, #15]
}
 800f706:	4618      	mov	r0, r3
 800f708:	3710      	adds	r7, #16
 800f70a:	46bd      	mov	sp, r7
 800f70c:	bd80      	pop	{r7, pc}
	...

0800f710 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 800f710:	b580      	push	{r7, lr}
 800f712:	b084      	sub	sp, #16
 800f714:	af00      	add	r7, sp, #0
 800f716:	6078      	str	r0, [r7, #4]
 800f718:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800f71a:	683b      	ldr	r3, [r7, #0]
 800f71c:	885b      	ldrh	r3, [r3, #2]
 800f71e:	0a1b      	lsrs	r3, r3, #8
 800f720:	b29b      	uxth	r3, r3
 800f722:	3b01      	subs	r3, #1
 800f724:	2b06      	cmp	r3, #6
 800f726:	f200 80c9 	bhi.w	800f8bc <USBD_GetDescriptor+0x1ac>
 800f72a:	a201      	add	r2, pc, #4	; (adr r2, 800f730 <USBD_GetDescriptor+0x20>)
 800f72c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f730:	0800f74d 	.word	0x0800f74d
 800f734:	0800f765 	.word	0x0800f765
 800f738:	0800f7a5 	.word	0x0800f7a5
 800f73c:	0800f8bd 	.word	0x0800f8bd
 800f740:	0800f8bd 	.word	0x0800f8bd
 800f744:	0800f869 	.word	0x0800f869
 800f748:	0800f88f 	.word	0x0800f88f
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	687a      	ldr	r2, [r7, #4]
 800f756:	7c12      	ldrb	r2, [r2, #16]
 800f758:	f107 010a 	add.w	r1, r7, #10
 800f75c:	4610      	mov	r0, r2
 800f75e:	4798      	blx	r3
 800f760:	60f8      	str	r0, [r7, #12]
    break;
 800f762:	e0b0      	b.n	800f8c6 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	7c1b      	ldrb	r3, [r3, #16]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d10d      	bne.n	800f788 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800f772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f774:	f107 020a 	add.w	r2, r7, #10
 800f778:	4610      	mov	r0, r2
 800f77a:	4798      	blx	r3
 800f77c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	3301      	adds	r3, #1
 800f782:	2202      	movs	r2, #2
 800f784:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800f786:	e09e      	b.n	800f8c6 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800f78e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f790:	f107 020a 	add.w	r2, r7, #10
 800f794:	4610      	mov	r0, r2
 800f796:	4798      	blx	r3
 800f798:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	3301      	adds	r3, #1
 800f79e:	2202      	movs	r2, #2
 800f7a0:	701a      	strb	r2, [r3, #0]
    break;
 800f7a2:	e090      	b.n	800f8c6 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800f7a4:	683b      	ldr	r3, [r7, #0]
 800f7a6:	885b      	ldrh	r3, [r3, #2]
 800f7a8:	b2db      	uxtb	r3, r3
 800f7aa:	2b05      	cmp	r3, #5
 800f7ac:	d856      	bhi.n	800f85c <USBD_GetDescriptor+0x14c>
 800f7ae:	a201      	add	r2, pc, #4	; (adr r2, 800f7b4 <USBD_GetDescriptor+0xa4>)
 800f7b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7b4:	0800f7cd 	.word	0x0800f7cd
 800f7b8:	0800f7e5 	.word	0x0800f7e5
 800f7bc:	0800f7fd 	.word	0x0800f7fd
 800f7c0:	0800f815 	.word	0x0800f815
 800f7c4:	0800f82d 	.word	0x0800f82d
 800f7c8:	0800f845 	.word	0x0800f845
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800f7d2:	685b      	ldr	r3, [r3, #4]
 800f7d4:	687a      	ldr	r2, [r7, #4]
 800f7d6:	7c12      	ldrb	r2, [r2, #16]
 800f7d8:	f107 010a 	add.w	r1, r7, #10
 800f7dc:	4610      	mov	r0, r2
 800f7de:	4798      	blx	r3
 800f7e0:	60f8      	str	r0, [r7, #12]
      break;
 800f7e2:	e040      	b.n	800f866 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800f7ea:	689b      	ldr	r3, [r3, #8]
 800f7ec:	687a      	ldr	r2, [r7, #4]
 800f7ee:	7c12      	ldrb	r2, [r2, #16]
 800f7f0:	f107 010a 	add.w	r1, r7, #10
 800f7f4:	4610      	mov	r0, r2
 800f7f6:	4798      	blx	r3
 800f7f8:	60f8      	str	r0, [r7, #12]
      break;
 800f7fa:	e034      	b.n	800f866 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800f802:	68db      	ldr	r3, [r3, #12]
 800f804:	687a      	ldr	r2, [r7, #4]
 800f806:	7c12      	ldrb	r2, [r2, #16]
 800f808:	f107 010a 	add.w	r1, r7, #10
 800f80c:	4610      	mov	r0, r2
 800f80e:	4798      	blx	r3
 800f810:	60f8      	str	r0, [r7, #12]
      break;
 800f812:	e028      	b.n	800f866 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800f81a:	691b      	ldr	r3, [r3, #16]
 800f81c:	687a      	ldr	r2, [r7, #4]
 800f81e:	7c12      	ldrb	r2, [r2, #16]
 800f820:	f107 010a 	add.w	r1, r7, #10
 800f824:	4610      	mov	r0, r2
 800f826:	4798      	blx	r3
 800f828:	60f8      	str	r0, [r7, #12]
      break;
 800f82a:	e01c      	b.n	800f866 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800f832:	695b      	ldr	r3, [r3, #20]
 800f834:	687a      	ldr	r2, [r7, #4]
 800f836:	7c12      	ldrb	r2, [r2, #16]
 800f838:	f107 010a 	add.w	r1, r7, #10
 800f83c:	4610      	mov	r0, r2
 800f83e:	4798      	blx	r3
 800f840:	60f8      	str	r0, [r7, #12]
      break;
 800f842:	e010      	b.n	800f866 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800f84a:	699b      	ldr	r3, [r3, #24]
 800f84c:	687a      	ldr	r2, [r7, #4]
 800f84e:	7c12      	ldrb	r2, [r2, #16]
 800f850:	f107 010a 	add.w	r1, r7, #10
 800f854:	4610      	mov	r0, r2
 800f856:	4798      	blx	r3
 800f858:	60f8      	str	r0, [r7, #12]
      break;
 800f85a:	e004      	b.n	800f866 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 800f85c:	6839      	ldr	r1, [r7, #0]
 800f85e:	6878      	ldr	r0, [r7, #4]
 800f860:	f000 f9f9 	bl	800fc56 <USBD_CtlError>
      return;
 800f864:	e04b      	b.n	800f8fe <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 800f866:	e02e      	b.n	800f8c6 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	7c1b      	ldrb	r3, [r3, #16]
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d109      	bne.n	800f884 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800f876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f878:	f107 020a 	add.w	r2, r7, #10
 800f87c:	4610      	mov	r0, r2
 800f87e:	4798      	blx	r3
 800f880:	60f8      	str	r0, [r7, #12]
      break;
 800f882:	e020      	b.n	800f8c6 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800f884:	6839      	ldr	r1, [r7, #0]
 800f886:	6878      	ldr	r0, [r7, #4]
 800f888:	f000 f9e5 	bl	800fc56 <USBD_CtlError>
      return;
 800f88c:	e037      	b.n	800f8fe <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	7c1b      	ldrb	r3, [r3, #16]
 800f892:	2b00      	cmp	r3, #0
 800f894:	d10d      	bne.n	800f8b2 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800f89c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f89e:	f107 020a 	add.w	r2, r7, #10
 800f8a2:	4610      	mov	r0, r2
 800f8a4:	4798      	blx	r3
 800f8a6:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	3301      	adds	r3, #1
 800f8ac:	2207      	movs	r2, #7
 800f8ae:	701a      	strb	r2, [r3, #0]
      break;
 800f8b0:	e009      	b.n	800f8c6 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800f8b2:	6839      	ldr	r1, [r7, #0]
 800f8b4:	6878      	ldr	r0, [r7, #4]
 800f8b6:	f000 f9ce 	bl	800fc56 <USBD_CtlError>
      return;
 800f8ba:	e020      	b.n	800f8fe <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 800f8bc:	6839      	ldr	r1, [r7, #0]
 800f8be:	6878      	ldr	r0, [r7, #4]
 800f8c0:	f000 f9c9 	bl	800fc56 <USBD_CtlError>
    return;
 800f8c4:	e01b      	b.n	800f8fe <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 800f8c6:	897b      	ldrh	r3, [r7, #10]
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d011      	beq.n	800f8f0 <USBD_GetDescriptor+0x1e0>
 800f8cc:	683b      	ldr	r3, [r7, #0]
 800f8ce:	88db      	ldrh	r3, [r3, #6]
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d00d      	beq.n	800f8f0 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 800f8d4:	683b      	ldr	r3, [r7, #0]
 800f8d6:	88da      	ldrh	r2, [r3, #6]
 800f8d8:	897b      	ldrh	r3, [r7, #10]
 800f8da:	4293      	cmp	r3, r2
 800f8dc:	bf28      	it	cs
 800f8de:	4613      	movcs	r3, r2
 800f8e0:	b29b      	uxth	r3, r3
 800f8e2:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 800f8e4:	897b      	ldrh	r3, [r7, #10]
 800f8e6:	461a      	mov	r2, r3
 800f8e8:	68f9      	ldr	r1, [r7, #12]
 800f8ea:	6878      	ldr	r0, [r7, #4]
 800f8ec:	f000 fa1e 	bl	800fd2c <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 800f8f0:	683b      	ldr	r3, [r7, #0]
 800f8f2:	88db      	ldrh	r3, [r3, #6]
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d102      	bne.n	800f8fe <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 800f8f8:	6878      	ldr	r0, [r7, #4]
 800f8fa:	f000 fa75 	bl	800fde8 <USBD_CtlSendStatus>
  }
}
 800f8fe:	3710      	adds	r7, #16
 800f900:	46bd      	mov	sp, r7
 800f902:	bd80      	pop	{r7, pc}

0800f904 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800f904:	b580      	push	{r7, lr}
 800f906:	b084      	sub	sp, #16
 800f908:	af00      	add	r7, sp, #0
 800f90a:	6078      	str	r0, [r7, #4]
 800f90c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f90e:	683b      	ldr	r3, [r7, #0]
 800f910:	889b      	ldrh	r3, [r3, #4]
 800f912:	2b00      	cmp	r3, #0
 800f914:	d130      	bne.n	800f978 <USBD_SetAddress+0x74>
 800f916:	683b      	ldr	r3, [r7, #0]
 800f918:	88db      	ldrh	r3, [r3, #6]
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d12c      	bne.n	800f978 <USBD_SetAddress+0x74>
 800f91e:	683b      	ldr	r3, [r7, #0]
 800f920:	885b      	ldrh	r3, [r3, #2]
 800f922:	2b7f      	cmp	r3, #127	; 0x7f
 800f924:	d828      	bhi.n	800f978 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f926:	683b      	ldr	r3, [r7, #0]
 800f928:	885b      	ldrh	r3, [r3, #2]
 800f92a:	b2db      	uxtb	r3, r3
 800f92c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f930:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800f938:	2b03      	cmp	r3, #3
 800f93a:	d104      	bne.n	800f946 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 800f93c:	6839      	ldr	r1, [r7, #0]
 800f93e:	6878      	ldr	r0, [r7, #4]
 800f940:	f000 f989 	bl	800fc56 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f944:	e01c      	b.n	800f980 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	7bfa      	ldrb	r2, [r7, #15]
 800f94a:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f94e:	7bfb      	ldrb	r3, [r7, #15]
 800f950:	4619      	mov	r1, r3
 800f952:	6878      	ldr	r0, [r7, #4]
 800f954:	f004 f8a6 	bl	8013aa4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800f958:	6878      	ldr	r0, [r7, #4]
 800f95a:	f000 fa45 	bl	800fde8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f95e:	7bfb      	ldrb	r3, [r7, #15]
 800f960:	2b00      	cmp	r3, #0
 800f962:	d004      	beq.n	800f96e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	2202      	movs	r2, #2
 800f968:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f96c:	e008      	b.n	800f980 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	2201      	movs	r2, #1
 800f972:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f976:	e003      	b.n	800f980 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f978:	6839      	ldr	r1, [r7, #0]
 800f97a:	6878      	ldr	r0, [r7, #4]
 800f97c:	f000 f96b 	bl	800fc56 <USBD_CtlError>
  }
}
 800f980:	bf00      	nop
 800f982:	3710      	adds	r7, #16
 800f984:	46bd      	mov	sp, r7
 800f986:	bd80      	pop	{r7, pc}

0800f988 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f988:	b580      	push	{r7, lr}
 800f98a:	b082      	sub	sp, #8
 800f98c:	af00      	add	r7, sp, #0
 800f98e:	6078      	str	r0, [r7, #4]
 800f990:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f992:	683b      	ldr	r3, [r7, #0]
 800f994:	885b      	ldrh	r3, [r3, #2]
 800f996:	b2da      	uxtb	r2, r3
 800f998:	4b41      	ldr	r3, [pc, #260]	; (800faa0 <USBD_SetConfig+0x118>)
 800f99a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f99c:	4b40      	ldr	r3, [pc, #256]	; (800faa0 <USBD_SetConfig+0x118>)
 800f99e:	781b      	ldrb	r3, [r3, #0]
 800f9a0:	2b01      	cmp	r3, #1
 800f9a2:	d904      	bls.n	800f9ae <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800f9a4:	6839      	ldr	r1, [r7, #0]
 800f9a6:	6878      	ldr	r0, [r7, #4]
 800f9a8:	f000 f955 	bl	800fc56 <USBD_CtlError>
 800f9ac:	e075      	b.n	800fa9a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800f9b4:	2b02      	cmp	r3, #2
 800f9b6:	d002      	beq.n	800f9be <USBD_SetConfig+0x36>
 800f9b8:	2b03      	cmp	r3, #3
 800f9ba:	d023      	beq.n	800fa04 <USBD_SetConfig+0x7c>
 800f9bc:	e062      	b.n	800fa84 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 800f9be:	4b38      	ldr	r3, [pc, #224]	; (800faa0 <USBD_SetConfig+0x118>)
 800f9c0:	781b      	ldrb	r3, [r3, #0]
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d01a      	beq.n	800f9fc <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800f9c6:	4b36      	ldr	r3, [pc, #216]	; (800faa0 <USBD_SetConfig+0x118>)
 800f9c8:	781b      	ldrb	r3, [r3, #0]
 800f9ca:	461a      	mov	r2, r3
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	2203      	movs	r2, #3
 800f9d4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800f9d8:	4b31      	ldr	r3, [pc, #196]	; (800faa0 <USBD_SetConfig+0x118>)
 800f9da:	781b      	ldrb	r3, [r3, #0]
 800f9dc:	4619      	mov	r1, r3
 800f9de:	6878      	ldr	r0, [r7, #4]
 800f9e0:	f7ff fa2a 	bl	800ee38 <USBD_SetClassConfig>
 800f9e4:	4603      	mov	r3, r0
 800f9e6:	2b02      	cmp	r3, #2
 800f9e8:	d104      	bne.n	800f9f4 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 800f9ea:	6839      	ldr	r1, [r7, #0]
 800f9ec:	6878      	ldr	r0, [r7, #4]
 800f9ee:	f000 f932 	bl	800fc56 <USBD_CtlError>
          return;
 800f9f2:	e052      	b.n	800fa9a <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 800f9f4:	6878      	ldr	r0, [r7, #4]
 800f9f6:	f000 f9f7 	bl	800fde8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800f9fa:	e04e      	b.n	800fa9a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800f9fc:	6878      	ldr	r0, [r7, #4]
 800f9fe:	f000 f9f3 	bl	800fde8 <USBD_CtlSendStatus>
      break;
 800fa02:	e04a      	b.n	800fa9a <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800fa04:	4b26      	ldr	r3, [pc, #152]	; (800faa0 <USBD_SetConfig+0x118>)
 800fa06:	781b      	ldrb	r3, [r3, #0]
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d112      	bne.n	800fa32 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	2202      	movs	r2, #2
 800fa10:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800fa14:	4b22      	ldr	r3, [pc, #136]	; (800faa0 <USBD_SetConfig+0x118>)
 800fa16:	781b      	ldrb	r3, [r3, #0]
 800fa18:	461a      	mov	r2, r3
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800fa1e:	4b20      	ldr	r3, [pc, #128]	; (800faa0 <USBD_SetConfig+0x118>)
 800fa20:	781b      	ldrb	r3, [r3, #0]
 800fa22:	4619      	mov	r1, r3
 800fa24:	6878      	ldr	r0, [r7, #4]
 800fa26:	f7ff fa26 	bl	800ee76 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800fa2a:	6878      	ldr	r0, [r7, #4]
 800fa2c:	f000 f9dc 	bl	800fde8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800fa30:	e033      	b.n	800fa9a <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 800fa32:	4b1b      	ldr	r3, [pc, #108]	; (800faa0 <USBD_SetConfig+0x118>)
 800fa34:	781b      	ldrb	r3, [r3, #0]
 800fa36:	461a      	mov	r2, r3
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	685b      	ldr	r3, [r3, #4]
 800fa3c:	429a      	cmp	r2, r3
 800fa3e:	d01d      	beq.n	800fa7c <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	685b      	ldr	r3, [r3, #4]
 800fa44:	b2db      	uxtb	r3, r3
 800fa46:	4619      	mov	r1, r3
 800fa48:	6878      	ldr	r0, [r7, #4]
 800fa4a:	f7ff fa14 	bl	800ee76 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800fa4e:	4b14      	ldr	r3, [pc, #80]	; (800faa0 <USBD_SetConfig+0x118>)
 800fa50:	781b      	ldrb	r3, [r3, #0]
 800fa52:	461a      	mov	r2, r3
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800fa58:	4b11      	ldr	r3, [pc, #68]	; (800faa0 <USBD_SetConfig+0x118>)
 800fa5a:	781b      	ldrb	r3, [r3, #0]
 800fa5c:	4619      	mov	r1, r3
 800fa5e:	6878      	ldr	r0, [r7, #4]
 800fa60:	f7ff f9ea 	bl	800ee38 <USBD_SetClassConfig>
 800fa64:	4603      	mov	r3, r0
 800fa66:	2b02      	cmp	r3, #2
 800fa68:	d104      	bne.n	800fa74 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800fa6a:	6839      	ldr	r1, [r7, #0]
 800fa6c:	6878      	ldr	r0, [r7, #4]
 800fa6e:	f000 f8f2 	bl	800fc56 <USBD_CtlError>
          return;
 800fa72:	e012      	b.n	800fa9a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800fa74:	6878      	ldr	r0, [r7, #4]
 800fa76:	f000 f9b7 	bl	800fde8 <USBD_CtlSendStatus>
      break;
 800fa7a:	e00e      	b.n	800fa9a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800fa7c:	6878      	ldr	r0, [r7, #4]
 800fa7e:	f000 f9b3 	bl	800fde8 <USBD_CtlSendStatus>
      break;
 800fa82:	e00a      	b.n	800fa9a <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 800fa84:	6839      	ldr	r1, [r7, #0]
 800fa86:	6878      	ldr	r0, [r7, #4]
 800fa88:	f000 f8e5 	bl	800fc56 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 800fa8c:	4b04      	ldr	r3, [pc, #16]	; (800faa0 <USBD_SetConfig+0x118>)
 800fa8e:	781b      	ldrb	r3, [r3, #0]
 800fa90:	4619      	mov	r1, r3
 800fa92:	6878      	ldr	r0, [r7, #4]
 800fa94:	f7ff f9ef 	bl	800ee76 <USBD_ClrClassConfig>
      break;
 800fa98:	bf00      	nop
    }
  }
}
 800fa9a:	3708      	adds	r7, #8
 800fa9c:	46bd      	mov	sp, r7
 800fa9e:	bd80      	pop	{r7, pc}
 800faa0:	20001484 	.word	0x20001484

0800faa4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800faa4:	b580      	push	{r7, lr}
 800faa6:	b082      	sub	sp, #8
 800faa8:	af00      	add	r7, sp, #0
 800faaa:	6078      	str	r0, [r7, #4]
 800faac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800faae:	683b      	ldr	r3, [r7, #0]
 800fab0:	88db      	ldrh	r3, [r3, #6]
 800fab2:	2b01      	cmp	r3, #1
 800fab4:	d004      	beq.n	800fac0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800fab6:	6839      	ldr	r1, [r7, #0]
 800fab8:	6878      	ldr	r0, [r7, #4]
 800faba:	f000 f8cc 	bl	800fc56 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800fabe:	e021      	b.n	800fb04 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800fac6:	2b01      	cmp	r3, #1
 800fac8:	db17      	blt.n	800fafa <USBD_GetConfig+0x56>
 800faca:	2b02      	cmp	r3, #2
 800facc:	dd02      	ble.n	800fad4 <USBD_GetConfig+0x30>
 800face:	2b03      	cmp	r3, #3
 800fad0:	d00b      	beq.n	800faea <USBD_GetConfig+0x46>
 800fad2:	e012      	b.n	800fafa <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	2200      	movs	r2, #0
 800fad8:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	3308      	adds	r3, #8
 800fade:	2201      	movs	r2, #1
 800fae0:	4619      	mov	r1, r3
 800fae2:	6878      	ldr	r0, [r7, #4]
 800fae4:	f000 f922 	bl	800fd2c <USBD_CtlSendData>
      break;
 800fae8:	e00c      	b.n	800fb04 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	3304      	adds	r3, #4
 800faee:	2201      	movs	r2, #1
 800faf0:	4619      	mov	r1, r3
 800faf2:	6878      	ldr	r0, [r7, #4]
 800faf4:	f000 f91a 	bl	800fd2c <USBD_CtlSendData>
      break;
 800faf8:	e004      	b.n	800fb04 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 800fafa:	6839      	ldr	r1, [r7, #0]
 800fafc:	6878      	ldr	r0, [r7, #4]
 800fafe:	f000 f8aa 	bl	800fc56 <USBD_CtlError>
      break;
 800fb02:	bf00      	nop
}
 800fb04:	bf00      	nop
 800fb06:	3708      	adds	r7, #8
 800fb08:	46bd      	mov	sp, r7
 800fb0a:	bd80      	pop	{r7, pc}

0800fb0c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fb0c:	b580      	push	{r7, lr}
 800fb0e:	b082      	sub	sp, #8
 800fb10:	af00      	add	r7, sp, #0
 800fb12:	6078      	str	r0, [r7, #4]
 800fb14:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800fb1c:	3b01      	subs	r3, #1
 800fb1e:	2b02      	cmp	r3, #2
 800fb20:	d81e      	bhi.n	800fb60 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 800fb22:	683b      	ldr	r3, [r7, #0]
 800fb24:	88db      	ldrh	r3, [r3, #6]
 800fb26:	2b02      	cmp	r3, #2
 800fb28:	d004      	beq.n	800fb34 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800fb2a:	6839      	ldr	r1, [r7, #0]
 800fb2c:	6878      	ldr	r0, [r7, #4]
 800fb2e:	f000 f892 	bl	800fc56 <USBD_CtlError>
      break;
 800fb32:	e01a      	b.n	800fb6a <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	2201      	movs	r2, #1
 800fb38:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d005      	beq.n	800fb50 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	68db      	ldr	r3, [r3, #12]
 800fb48:	f043 0202 	orr.w	r2, r3, #2
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	330c      	adds	r3, #12
 800fb54:	2202      	movs	r2, #2
 800fb56:	4619      	mov	r1, r3
 800fb58:	6878      	ldr	r0, [r7, #4]
 800fb5a:	f000 f8e7 	bl	800fd2c <USBD_CtlSendData>
    break;
 800fb5e:	e004      	b.n	800fb6a <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800fb60:	6839      	ldr	r1, [r7, #0]
 800fb62:	6878      	ldr	r0, [r7, #4]
 800fb64:	f000 f877 	bl	800fc56 <USBD_CtlError>
    break;
 800fb68:	bf00      	nop
  }
}
 800fb6a:	bf00      	nop
 800fb6c:	3708      	adds	r7, #8
 800fb6e:	46bd      	mov	sp, r7
 800fb70:	bd80      	pop	{r7, pc}

0800fb72 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800fb72:	b580      	push	{r7, lr}
 800fb74:	b082      	sub	sp, #8
 800fb76:	af00      	add	r7, sp, #0
 800fb78:	6078      	str	r0, [r7, #4]
 800fb7a:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fb7c:	683b      	ldr	r3, [r7, #0]
 800fb7e:	885b      	ldrh	r3, [r3, #2]
 800fb80:	2b01      	cmp	r3, #1
 800fb82:	d106      	bne.n	800fb92 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	2201      	movs	r2, #1
 800fb88:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 800fb8c:	6878      	ldr	r0, [r7, #4]
 800fb8e:	f000 f92b 	bl	800fde8 <USBD_CtlSendStatus>
  }

}
 800fb92:	bf00      	nop
 800fb94:	3708      	adds	r7, #8
 800fb96:	46bd      	mov	sp, r7
 800fb98:	bd80      	pop	{r7, pc}

0800fb9a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800fb9a:	b580      	push	{r7, lr}
 800fb9c:	b082      	sub	sp, #8
 800fb9e:	af00      	add	r7, sp, #0
 800fba0:	6078      	str	r0, [r7, #4]
 800fba2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800fbaa:	3b01      	subs	r3, #1
 800fbac:	2b02      	cmp	r3, #2
 800fbae:	d80b      	bhi.n	800fbc8 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fbb0:	683b      	ldr	r3, [r7, #0]
 800fbb2:	885b      	ldrh	r3, [r3, #2]
 800fbb4:	2b01      	cmp	r3, #1
 800fbb6:	d10c      	bne.n	800fbd2 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	2200      	movs	r2, #0
 800fbbc:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800fbc0:	6878      	ldr	r0, [r7, #4]
 800fbc2:	f000 f911 	bl	800fde8 <USBD_CtlSendStatus>
    }
    break;
 800fbc6:	e004      	b.n	800fbd2 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 800fbc8:	6839      	ldr	r1, [r7, #0]
 800fbca:	6878      	ldr	r0, [r7, #4]
 800fbcc:	f000 f843 	bl	800fc56 <USBD_CtlError>
    break;
 800fbd0:	e000      	b.n	800fbd4 <USBD_ClrFeature+0x3a>
    break;
 800fbd2:	bf00      	nop
  }
}
 800fbd4:	bf00      	nop
 800fbd6:	3708      	adds	r7, #8
 800fbd8:	46bd      	mov	sp, r7
 800fbda:	bd80      	pop	{r7, pc}

0800fbdc <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800fbdc:	b480      	push	{r7}
 800fbde:	b083      	sub	sp, #12
 800fbe0:	af00      	add	r7, sp, #0
 800fbe2:	6078      	str	r0, [r7, #4]
 800fbe4:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800fbe6:	683b      	ldr	r3, [r7, #0]
 800fbe8:	781a      	ldrb	r2, [r3, #0]
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800fbee:	683b      	ldr	r3, [r7, #0]
 800fbf0:	785a      	ldrb	r2, [r3, #1]
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800fbf6:	683b      	ldr	r3, [r7, #0]
 800fbf8:	3302      	adds	r3, #2
 800fbfa:	781b      	ldrb	r3, [r3, #0]
 800fbfc:	b29a      	uxth	r2, r3
 800fbfe:	683b      	ldr	r3, [r7, #0]
 800fc00:	3303      	adds	r3, #3
 800fc02:	781b      	ldrb	r3, [r3, #0]
 800fc04:	b29b      	uxth	r3, r3
 800fc06:	021b      	lsls	r3, r3, #8
 800fc08:	b29b      	uxth	r3, r3
 800fc0a:	4413      	add	r3, r2
 800fc0c:	b29a      	uxth	r2, r3
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800fc12:	683b      	ldr	r3, [r7, #0]
 800fc14:	3304      	adds	r3, #4
 800fc16:	781b      	ldrb	r3, [r3, #0]
 800fc18:	b29a      	uxth	r2, r3
 800fc1a:	683b      	ldr	r3, [r7, #0]
 800fc1c:	3305      	adds	r3, #5
 800fc1e:	781b      	ldrb	r3, [r3, #0]
 800fc20:	b29b      	uxth	r3, r3
 800fc22:	021b      	lsls	r3, r3, #8
 800fc24:	b29b      	uxth	r3, r3
 800fc26:	4413      	add	r3, r2
 800fc28:	b29a      	uxth	r2, r3
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800fc2e:	683b      	ldr	r3, [r7, #0]
 800fc30:	3306      	adds	r3, #6
 800fc32:	781b      	ldrb	r3, [r3, #0]
 800fc34:	b29a      	uxth	r2, r3
 800fc36:	683b      	ldr	r3, [r7, #0]
 800fc38:	3307      	adds	r3, #7
 800fc3a:	781b      	ldrb	r3, [r3, #0]
 800fc3c:	b29b      	uxth	r3, r3
 800fc3e:	021b      	lsls	r3, r3, #8
 800fc40:	b29b      	uxth	r3, r3
 800fc42:	4413      	add	r3, r2
 800fc44:	b29a      	uxth	r2, r3
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	80da      	strh	r2, [r3, #6]

}
 800fc4a:	bf00      	nop
 800fc4c:	370c      	adds	r7, #12
 800fc4e:	46bd      	mov	sp, r7
 800fc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc54:	4770      	bx	lr

0800fc56 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800fc56:	b580      	push	{r7, lr}
 800fc58:	b082      	sub	sp, #8
 800fc5a:	af00      	add	r7, sp, #0
 800fc5c:	6078      	str	r0, [r7, #4]
 800fc5e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 800fc60:	2180      	movs	r1, #128	; 0x80
 800fc62:	6878      	ldr	r0, [r7, #4]
 800fc64:	f003 feb4 	bl	80139d0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800fc68:	2100      	movs	r1, #0
 800fc6a:	6878      	ldr	r0, [r7, #4]
 800fc6c:	f003 feb0 	bl	80139d0 <USBD_LL_StallEP>
}
 800fc70:	bf00      	nop
 800fc72:	3708      	adds	r7, #8
 800fc74:	46bd      	mov	sp, r7
 800fc76:	bd80      	pop	{r7, pc}

0800fc78 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800fc78:	b580      	push	{r7, lr}
 800fc7a:	b086      	sub	sp, #24
 800fc7c:	af00      	add	r7, sp, #0
 800fc7e:	60f8      	str	r0, [r7, #12]
 800fc80:	60b9      	str	r1, [r7, #8]
 800fc82:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800fc84:	2300      	movs	r3, #0
 800fc86:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d032      	beq.n	800fcf4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800fc8e:	68f8      	ldr	r0, [r7, #12]
 800fc90:	f000 f834 	bl	800fcfc <USBD_GetLen>
 800fc94:	4603      	mov	r3, r0
 800fc96:	3301      	adds	r3, #1
 800fc98:	b29b      	uxth	r3, r3
 800fc9a:	005b      	lsls	r3, r3, #1
 800fc9c:	b29a      	uxth	r2, r3
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800fca2:	7dfb      	ldrb	r3, [r7, #23]
 800fca4:	1c5a      	adds	r2, r3, #1
 800fca6:	75fa      	strb	r2, [r7, #23]
 800fca8:	461a      	mov	r2, r3
 800fcaa:	68bb      	ldr	r3, [r7, #8]
 800fcac:	4413      	add	r3, r2
 800fcae:	687a      	ldr	r2, [r7, #4]
 800fcb0:	7812      	ldrb	r2, [r2, #0]
 800fcb2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800fcb4:	7dfb      	ldrb	r3, [r7, #23]
 800fcb6:	1c5a      	adds	r2, r3, #1
 800fcb8:	75fa      	strb	r2, [r7, #23]
 800fcba:	461a      	mov	r2, r3
 800fcbc:	68bb      	ldr	r3, [r7, #8]
 800fcbe:	4413      	add	r3, r2
 800fcc0:	2203      	movs	r2, #3
 800fcc2:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800fcc4:	e012      	b.n	800fcec <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	1c5a      	adds	r2, r3, #1
 800fcca:	60fa      	str	r2, [r7, #12]
 800fccc:	7dfa      	ldrb	r2, [r7, #23]
 800fcce:	1c51      	adds	r1, r2, #1
 800fcd0:	75f9      	strb	r1, [r7, #23]
 800fcd2:	4611      	mov	r1, r2
 800fcd4:	68ba      	ldr	r2, [r7, #8]
 800fcd6:	440a      	add	r2, r1
 800fcd8:	781b      	ldrb	r3, [r3, #0]
 800fcda:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800fcdc:	7dfb      	ldrb	r3, [r7, #23]
 800fcde:	1c5a      	adds	r2, r3, #1
 800fce0:	75fa      	strb	r2, [r7, #23]
 800fce2:	461a      	mov	r2, r3
 800fce4:	68bb      	ldr	r3, [r7, #8]
 800fce6:	4413      	add	r3, r2
 800fce8:	2200      	movs	r2, #0
 800fcea:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	781b      	ldrb	r3, [r3, #0]
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d1e8      	bne.n	800fcc6 <USBD_GetString+0x4e>
    }
  }
}
 800fcf4:	bf00      	nop
 800fcf6:	3718      	adds	r7, #24
 800fcf8:	46bd      	mov	sp, r7
 800fcfa:	bd80      	pop	{r7, pc}

0800fcfc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800fcfc:	b480      	push	{r7}
 800fcfe:	b085      	sub	sp, #20
 800fd00:	af00      	add	r7, sp, #0
 800fd02:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 800fd04:	2300      	movs	r3, #0
 800fd06:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 800fd08:	e005      	b.n	800fd16 <USBD_GetLen+0x1a>
    {
        len++;
 800fd0a:	7bfb      	ldrb	r3, [r7, #15]
 800fd0c:	3301      	adds	r3, #1
 800fd0e:	73fb      	strb	r3, [r7, #15]
        buf++;
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	3301      	adds	r3, #1
 800fd14:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	781b      	ldrb	r3, [r3, #0]
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d1f5      	bne.n	800fd0a <USBD_GetLen+0xe>
    }

    return len;
 800fd1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd20:	4618      	mov	r0, r3
 800fd22:	3714      	adds	r7, #20
 800fd24:	46bd      	mov	sp, r7
 800fd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd2a:	4770      	bx	lr

0800fd2c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800fd2c:	b580      	push	{r7, lr}
 800fd2e:	b084      	sub	sp, #16
 800fd30:	af00      	add	r7, sp, #0
 800fd32:	60f8      	str	r0, [r7, #12]
 800fd34:	60b9      	str	r1, [r7, #8]
 800fd36:	4613      	mov	r3, r2
 800fd38:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	2202      	movs	r2, #2
 800fd3e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800fd42:	88fa      	ldrh	r2, [r7, #6]
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800fd48:	88fa      	ldrh	r2, [r7, #6]
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800fd4e:	88fb      	ldrh	r3, [r7, #6]
 800fd50:	68ba      	ldr	r2, [r7, #8]
 800fd52:	2100      	movs	r1, #0
 800fd54:	68f8      	ldr	r0, [r7, #12]
 800fd56:	f003 fec4 	bl	8013ae2 <USBD_LL_Transmit>

  return USBD_OK;
 800fd5a:	2300      	movs	r3, #0
}
 800fd5c:	4618      	mov	r0, r3
 800fd5e:	3710      	adds	r7, #16
 800fd60:	46bd      	mov	sp, r7
 800fd62:	bd80      	pop	{r7, pc}

0800fd64 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800fd64:	b580      	push	{r7, lr}
 800fd66:	b084      	sub	sp, #16
 800fd68:	af00      	add	r7, sp, #0
 800fd6a:	60f8      	str	r0, [r7, #12]
 800fd6c:	60b9      	str	r1, [r7, #8]
 800fd6e:	4613      	mov	r3, r2
 800fd70:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800fd72:	88fb      	ldrh	r3, [r7, #6]
 800fd74:	68ba      	ldr	r2, [r7, #8]
 800fd76:	2100      	movs	r1, #0
 800fd78:	68f8      	ldr	r0, [r7, #12]
 800fd7a:	f003 feb2 	bl	8013ae2 <USBD_LL_Transmit>

  return USBD_OK;
 800fd7e:	2300      	movs	r3, #0
}
 800fd80:	4618      	mov	r0, r3
 800fd82:	3710      	adds	r7, #16
 800fd84:	46bd      	mov	sp, r7
 800fd86:	bd80      	pop	{r7, pc}

0800fd88 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800fd88:	b580      	push	{r7, lr}
 800fd8a:	b084      	sub	sp, #16
 800fd8c:	af00      	add	r7, sp, #0
 800fd8e:	60f8      	str	r0, [r7, #12]
 800fd90:	60b9      	str	r1, [r7, #8]
 800fd92:	4613      	mov	r3, r2
 800fd94:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	2203      	movs	r2, #3
 800fd9a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800fd9e:	88fa      	ldrh	r2, [r7, #6]
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800fda6:	88fa      	ldrh	r2, [r7, #6]
 800fda8:	68fb      	ldr	r3, [r7, #12]
 800fdaa:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800fdae:	88fb      	ldrh	r3, [r7, #6]
 800fdb0:	68ba      	ldr	r2, [r7, #8]
 800fdb2:	2100      	movs	r1, #0
 800fdb4:	68f8      	ldr	r0, [r7, #12]
 800fdb6:	f003 feb7 	bl	8013b28 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fdba:	2300      	movs	r3, #0
}
 800fdbc:	4618      	mov	r0, r3
 800fdbe:	3710      	adds	r7, #16
 800fdc0:	46bd      	mov	sp, r7
 800fdc2:	bd80      	pop	{r7, pc}

0800fdc4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800fdc4:	b580      	push	{r7, lr}
 800fdc6:	b084      	sub	sp, #16
 800fdc8:	af00      	add	r7, sp, #0
 800fdca:	60f8      	str	r0, [r7, #12]
 800fdcc:	60b9      	str	r1, [r7, #8]
 800fdce:	4613      	mov	r3, r2
 800fdd0:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fdd2:	88fb      	ldrh	r3, [r7, #6]
 800fdd4:	68ba      	ldr	r2, [r7, #8]
 800fdd6:	2100      	movs	r1, #0
 800fdd8:	68f8      	ldr	r0, [r7, #12]
 800fdda:	f003 fea5 	bl	8013b28 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fdde:	2300      	movs	r3, #0
}
 800fde0:	4618      	mov	r0, r3
 800fde2:	3710      	adds	r7, #16
 800fde4:	46bd      	mov	sp, r7
 800fde6:	bd80      	pop	{r7, pc}

0800fde8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800fde8:	b580      	push	{r7, lr}
 800fdea:	b082      	sub	sp, #8
 800fdec:	af00      	add	r7, sp, #0
 800fdee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	2204      	movs	r2, #4
 800fdf4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800fdf8:	2300      	movs	r3, #0
 800fdfa:	2200      	movs	r2, #0
 800fdfc:	2100      	movs	r1, #0
 800fdfe:	6878      	ldr	r0, [r7, #4]
 800fe00:	f003 fe6f 	bl	8013ae2 <USBD_LL_Transmit>

  return USBD_OK;
 800fe04:	2300      	movs	r3, #0
}
 800fe06:	4618      	mov	r0, r3
 800fe08:	3708      	adds	r7, #8
 800fe0a:	46bd      	mov	sp, r7
 800fe0c:	bd80      	pop	{r7, pc}

0800fe0e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800fe0e:	b580      	push	{r7, lr}
 800fe10:	b082      	sub	sp, #8
 800fe12:	af00      	add	r7, sp, #0
 800fe14:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	2205      	movs	r2, #5
 800fe1a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800fe1e:	2300      	movs	r3, #0
 800fe20:	2200      	movs	r2, #0
 800fe22:	2100      	movs	r1, #0
 800fe24:	6878      	ldr	r0, [r7, #4]
 800fe26:	f003 fe7f 	bl	8013b28 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fe2a:	2300      	movs	r3, #0
}
 800fe2c:	4618      	mov	r0, r3
 800fe2e:	3708      	adds	r7, #8
 800fe30:	46bd      	mov	sp, r7
 800fe32:	bd80      	pop	{r7, pc}

0800fe34 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800fe34:	b480      	push	{r7}
 800fe36:	b085      	sub	sp, #20
 800fe38:	af00      	add	r7, sp, #0
 800fe3a:	4603      	mov	r3, r0
 800fe3c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800fe3e:	2300      	movs	r3, #0
 800fe40:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800fe42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800fe46:	2b84      	cmp	r3, #132	; 0x84
 800fe48:	d005      	beq.n	800fe56 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800fe4a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800fe4e:	68fb      	ldr	r3, [r7, #12]
 800fe50:	4413      	add	r3, r2
 800fe52:	3303      	adds	r3, #3
 800fe54:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800fe56:	68fb      	ldr	r3, [r7, #12]
}
 800fe58:	4618      	mov	r0, r3
 800fe5a:	3714      	adds	r7, #20
 800fe5c:	46bd      	mov	sp, r7
 800fe5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe62:	4770      	bx	lr

0800fe64 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800fe64:	b480      	push	{r7}
 800fe66:	b083      	sub	sp, #12
 800fe68:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fe6a:	f3ef 8305 	mrs	r3, IPSR
 800fe6e:	607b      	str	r3, [r7, #4]
  return(result);
 800fe70:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	bf14      	ite	ne
 800fe76:	2301      	movne	r3, #1
 800fe78:	2300      	moveq	r3, #0
 800fe7a:	b2db      	uxtb	r3, r3
}
 800fe7c:	4618      	mov	r0, r3
 800fe7e:	370c      	adds	r7, #12
 800fe80:	46bd      	mov	sp, r7
 800fe82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe86:	4770      	bx	lr

0800fe88 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800fe88:	b580      	push	{r7, lr}
 800fe8a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800fe8c:	f001 fd56 	bl	801193c <vTaskStartScheduler>
  
  return osOK;
 800fe90:	2300      	movs	r3, #0
}
 800fe92:	4618      	mov	r0, r3
 800fe94:	bd80      	pop	{r7, pc}

0800fe96 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800fe96:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe98:	b089      	sub	sp, #36	; 0x24
 800fe9a:	af04      	add	r7, sp, #16
 800fe9c:	6078      	str	r0, [r7, #4]
 800fe9e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	695b      	ldr	r3, [r3, #20]
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d020      	beq.n	800feea <osThreadCreate+0x54>
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	699b      	ldr	r3, [r3, #24]
 800feac:	2b00      	cmp	r3, #0
 800feae:	d01c      	beq.n	800feea <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	685c      	ldr	r4, [r3, #4]
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	681d      	ldr	r5, [r3, #0]
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	691e      	ldr	r6, [r3, #16]
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800fec2:	4618      	mov	r0, r3
 800fec4:	f7ff ffb6 	bl	800fe34 <makeFreeRtosPriority>
 800fec8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	695b      	ldr	r3, [r3, #20]
 800fece:	687a      	ldr	r2, [r7, #4]
 800fed0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800fed2:	9202      	str	r2, [sp, #8]
 800fed4:	9301      	str	r3, [sp, #4]
 800fed6:	9100      	str	r1, [sp, #0]
 800fed8:	683b      	ldr	r3, [r7, #0]
 800feda:	4632      	mov	r2, r6
 800fedc:	4629      	mov	r1, r5
 800fede:	4620      	mov	r0, r4
 800fee0:	f001 fb71 	bl	80115c6 <xTaskCreateStatic>
 800fee4:	4603      	mov	r3, r0
 800fee6:	60fb      	str	r3, [r7, #12]
 800fee8:	e01c      	b.n	800ff24 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	685c      	ldr	r4, [r3, #4]
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800fef6:	b29e      	uxth	r6, r3
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800fefe:	4618      	mov	r0, r3
 800ff00:	f7ff ff98 	bl	800fe34 <makeFreeRtosPriority>
 800ff04:	4602      	mov	r2, r0
 800ff06:	f107 030c 	add.w	r3, r7, #12
 800ff0a:	9301      	str	r3, [sp, #4]
 800ff0c:	9200      	str	r2, [sp, #0]
 800ff0e:	683b      	ldr	r3, [r7, #0]
 800ff10:	4632      	mov	r2, r6
 800ff12:	4629      	mov	r1, r5
 800ff14:	4620      	mov	r0, r4
 800ff16:	f001 fbaf 	bl	8011678 <xTaskCreate>
 800ff1a:	4603      	mov	r3, r0
 800ff1c:	2b01      	cmp	r3, #1
 800ff1e:	d001      	beq.n	800ff24 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800ff20:	2300      	movs	r3, #0
 800ff22:	e000      	b.n	800ff26 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800ff24:	68fb      	ldr	r3, [r7, #12]
}
 800ff26:	4618      	mov	r0, r3
 800ff28:	3714      	adds	r7, #20
 800ff2a:	46bd      	mov	sp, r7
 800ff2c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ff2e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800ff2e:	b580      	push	{r7, lr}
 800ff30:	b084      	sub	sp, #16
 800ff32:	af00      	add	r7, sp, #0
 800ff34:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d001      	beq.n	800ff44 <osDelay+0x16>
 800ff40:	68fb      	ldr	r3, [r7, #12]
 800ff42:	e000      	b.n	800ff46 <osDelay+0x18>
 800ff44:	2301      	movs	r3, #1
 800ff46:	4618      	mov	r0, r3
 800ff48:	f001 fcc4 	bl	80118d4 <vTaskDelay>
  
  return osOK;
 800ff4c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800ff4e:	4618      	mov	r0, r3
 800ff50:	3710      	adds	r7, #16
 800ff52:	46bd      	mov	sp, r7
 800ff54:	bd80      	pop	{r7, pc}
	...

0800ff58 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 800ff58:	b580      	push	{r7, lr}
 800ff5a:	b086      	sub	sp, #24
 800ff5c:	af02      	add	r7, sp, #8
 800ff5e:	6078      	str	r0, [r7, #4]
 800ff60:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800ff62:	2300      	movs	r3, #0
 800ff64:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 800ff66:	2300      	movs	r3, #0
 800ff68:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 800ff6a:	f7ff ff7b 	bl	800fe64 <inHandlerMode>
 800ff6e:	4603      	mov	r3, r0
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d01c      	beq.n	800ffae <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 800ff74:	6839      	ldr	r1, [r7, #0]
 800ff76:	f107 0208 	add.w	r2, r7, #8
 800ff7a:	f107 030c 	add.w	r3, r7, #12
 800ff7e:	9300      	str	r3, [sp, #0]
 800ff80:	4613      	mov	r3, r2
 800ff82:	2201      	movs	r2, #1
 800ff84:	6878      	ldr	r0, [r7, #4]
 800ff86:	f002 fbab 	bl	80126e0 <xTaskGenericNotifyFromISR>
 800ff8a:	4603      	mov	r3, r0
 800ff8c:	2b01      	cmp	r3, #1
 800ff8e:	d002      	beq.n	800ff96 <osSignalSet+0x3e>
      return 0x80000000;
 800ff90:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ff94:	e019      	b.n	800ffca <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800ff96:	68fb      	ldr	r3, [r7, #12]
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d015      	beq.n	800ffc8 <osSignalSet+0x70>
 800ff9c:	4b0d      	ldr	r3, [pc, #52]	; (800ffd4 <osSignalSet+0x7c>)
 800ff9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ffa2:	601a      	str	r2, [r3, #0]
 800ffa4:	f3bf 8f4f 	dsb	sy
 800ffa8:	f3bf 8f6f 	isb	sy
 800ffac:	e00c      	b.n	800ffc8 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 800ffae:	6839      	ldr	r1, [r7, #0]
 800ffb0:	f107 0308 	add.w	r3, r7, #8
 800ffb4:	2201      	movs	r2, #1
 800ffb6:	6878      	ldr	r0, [r7, #4]
 800ffb8:	f002 faf2 	bl	80125a0 <xTaskGenericNotify>
 800ffbc:	4603      	mov	r3, r0
 800ffbe:	2b01      	cmp	r3, #1
 800ffc0:	d002      	beq.n	800ffc8 <osSignalSet+0x70>
    return 0x80000000;
 800ffc2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ffc6:	e000      	b.n	800ffca <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 800ffc8:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 800ffca:	4618      	mov	r0, r3
 800ffcc:	3710      	adds	r7, #16
 800ffce:	46bd      	mov	sp, r7
 800ffd0:	bd80      	pop	{r7, pc}
 800ffd2:	bf00      	nop
 800ffd4:	e000ed04 	.word	0xe000ed04

0800ffd8 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 800ffd8:	b590      	push	{r4, r7, lr}
 800ffda:	b089      	sub	sp, #36	; 0x24
 800ffdc:	af00      	add	r7, sp, #0
 800ffde:	60f8      	str	r0, [r7, #12]
 800ffe0:	60b9      	str	r1, [r7, #8]
 800ffe2:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 800ffe4:	2300      	movs	r3, #0
 800ffe6:	617b      	str	r3, [r7, #20]
  ticks = 0;
 800ffe8:	2300      	movs	r3, #0
 800ffea:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fff2:	d103      	bne.n	800fffc <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 800fff4:	f04f 33ff 	mov.w	r3, #4294967295
 800fff8:	61fb      	str	r3, [r7, #28]
 800fffa:	e009      	b.n	8010010 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d006      	beq.n	8010010 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 8010006:	69fb      	ldr	r3, [r7, #28]
 8010008:	2b00      	cmp	r3, #0
 801000a:	d101      	bne.n	8010010 <osSignalWait+0x38>
      ticks = 1;
 801000c:	2301      	movs	r3, #1
 801000e:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 8010010:	f7ff ff28 	bl	800fe64 <inHandlerMode>
 8010014:	4603      	mov	r3, r0
 8010016:	2b00      	cmp	r3, #0
 8010018:	d002      	beq.n	8010020 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 801001a:	2382      	movs	r3, #130	; 0x82
 801001c:	613b      	str	r3, [r7, #16]
 801001e:	e01b      	b.n	8010058 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8010020:	68b9      	ldr	r1, [r7, #8]
 8010022:	f107 0310 	add.w	r3, r7, #16
 8010026:	1d1a      	adds	r2, r3, #4
 8010028:	69fb      	ldr	r3, [r7, #28]
 801002a:	2000      	movs	r0, #0
 801002c:	f002 fa5e 	bl	80124ec <xTaskNotifyWait>
 8010030:	4603      	mov	r3, r0
 8010032:	2b01      	cmp	r3, #1
 8010034:	d008      	beq.n	8010048 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 8010036:	69fb      	ldr	r3, [r7, #28]
 8010038:	2b00      	cmp	r3, #0
 801003a:	d102      	bne.n	8010042 <osSignalWait+0x6a>
 801003c:	2300      	movs	r3, #0
 801003e:	613b      	str	r3, [r7, #16]
 8010040:	e00a      	b.n	8010058 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 8010042:	2340      	movs	r3, #64	; 0x40
 8010044:	613b      	str	r3, [r7, #16]
 8010046:	e007      	b.n	8010058 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 8010048:	697b      	ldr	r3, [r7, #20]
 801004a:	2b00      	cmp	r3, #0
 801004c:	da02      	bge.n	8010054 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 801004e:	2386      	movs	r3, #134	; 0x86
 8010050:	613b      	str	r3, [r7, #16]
 8010052:	e001      	b.n	8010058 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 8010054:	2308      	movs	r3, #8
 8010056:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	461c      	mov	r4, r3
 801005c:	f107 0310 	add.w	r3, r7, #16
 8010060:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010064:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8010068:	68f8      	ldr	r0, [r7, #12]
 801006a:	3724      	adds	r7, #36	; 0x24
 801006c:	46bd      	mov	sp, r7
 801006e:	bd90      	pop	{r4, r7, pc}

08010070 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8010070:	b580      	push	{r7, lr}
 8010072:	b082      	sub	sp, #8
 8010074:	af00      	add	r7, sp, #0
 8010076:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	685b      	ldr	r3, [r3, #4]
 801007c:	2b00      	cmp	r3, #0
 801007e:	d007      	beq.n	8010090 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	685b      	ldr	r3, [r3, #4]
 8010084:	4619      	mov	r1, r3
 8010086:	2001      	movs	r0, #1
 8010088:	f000 fce0 	bl	8010a4c <xQueueCreateMutexStatic>
 801008c:	4603      	mov	r3, r0
 801008e:	e003      	b.n	8010098 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8010090:	2001      	movs	r0, #1
 8010092:	f000 fcc3 	bl	8010a1c <xQueueCreateMutex>
 8010096:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8010098:	4618      	mov	r0, r3
 801009a:	3708      	adds	r7, #8
 801009c:	46bd      	mov	sp, r7
 801009e:	bd80      	pop	{r7, pc}

080100a0 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80100a0:	b580      	push	{r7, lr}
 80100a2:	b084      	sub	sp, #16
 80100a4:	af00      	add	r7, sp, #0
 80100a6:	6078      	str	r0, [r7, #4]
 80100a8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80100aa:	2300      	movs	r3, #0
 80100ac:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d101      	bne.n	80100b8 <osMutexWait+0x18>
    return osErrorParameter;
 80100b4:	2380      	movs	r3, #128	; 0x80
 80100b6:	e03a      	b.n	801012e <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80100b8:	2300      	movs	r3, #0
 80100ba:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80100bc:	683b      	ldr	r3, [r7, #0]
 80100be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100c2:	d103      	bne.n	80100cc <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80100c4:	f04f 33ff 	mov.w	r3, #4294967295
 80100c8:	60fb      	str	r3, [r7, #12]
 80100ca:	e009      	b.n	80100e0 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80100cc:	683b      	ldr	r3, [r7, #0]
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d006      	beq.n	80100e0 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80100d2:	683b      	ldr	r3, [r7, #0]
 80100d4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d101      	bne.n	80100e0 <osMutexWait+0x40>
      ticks = 1;
 80100dc:	2301      	movs	r3, #1
 80100de:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80100e0:	f7ff fec0 	bl	800fe64 <inHandlerMode>
 80100e4:	4603      	mov	r3, r0
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d017      	beq.n	801011a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80100ea:	f107 0308 	add.w	r3, r7, #8
 80100ee:	461a      	mov	r2, r3
 80100f0:	2100      	movs	r1, #0
 80100f2:	6878      	ldr	r0, [r7, #4]
 80100f4:	f001 f8c2 	bl	801127c <xQueueReceiveFromISR>
 80100f8:	4603      	mov	r3, r0
 80100fa:	2b01      	cmp	r3, #1
 80100fc:	d001      	beq.n	8010102 <osMutexWait+0x62>
      return osErrorOS;
 80100fe:	23ff      	movs	r3, #255	; 0xff
 8010100:	e015      	b.n	801012e <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8010102:	68bb      	ldr	r3, [r7, #8]
 8010104:	2b00      	cmp	r3, #0
 8010106:	d011      	beq.n	801012c <osMutexWait+0x8c>
 8010108:	4b0b      	ldr	r3, [pc, #44]	; (8010138 <osMutexWait+0x98>)
 801010a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801010e:	601a      	str	r2, [r3, #0]
 8010110:	f3bf 8f4f 	dsb	sy
 8010114:	f3bf 8f6f 	isb	sy
 8010118:	e008      	b.n	801012c <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 801011a:	68f9      	ldr	r1, [r7, #12]
 801011c:	6878      	ldr	r0, [r7, #4]
 801011e:	f000 ffa5 	bl	801106c <xQueueSemaphoreTake>
 8010122:	4603      	mov	r3, r0
 8010124:	2b01      	cmp	r3, #1
 8010126:	d001      	beq.n	801012c <osMutexWait+0x8c>
    return osErrorOS;
 8010128:	23ff      	movs	r3, #255	; 0xff
 801012a:	e000      	b.n	801012e <osMutexWait+0x8e>
  }
  
  return osOK;
 801012c:	2300      	movs	r3, #0
}
 801012e:	4618      	mov	r0, r3
 8010130:	3710      	adds	r7, #16
 8010132:	46bd      	mov	sp, r7
 8010134:	bd80      	pop	{r7, pc}
 8010136:	bf00      	nop
 8010138:	e000ed04 	.word	0xe000ed04

0801013c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 801013c:	b580      	push	{r7, lr}
 801013e:	b084      	sub	sp, #16
 8010140:	af00      	add	r7, sp, #0
 8010142:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8010144:	2300      	movs	r3, #0
 8010146:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8010148:	2300      	movs	r3, #0
 801014a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 801014c:	f7ff fe8a 	bl	800fe64 <inHandlerMode>
 8010150:	4603      	mov	r3, r0
 8010152:	2b00      	cmp	r3, #0
 8010154:	d016      	beq.n	8010184 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8010156:	f107 0308 	add.w	r3, r7, #8
 801015a:	4619      	mov	r1, r3
 801015c:	6878      	ldr	r0, [r7, #4]
 801015e:	f000 fe1f 	bl	8010da0 <xQueueGiveFromISR>
 8010162:	4603      	mov	r3, r0
 8010164:	2b01      	cmp	r3, #1
 8010166:	d001      	beq.n	801016c <osMutexRelease+0x30>
      return osErrorOS;
 8010168:	23ff      	movs	r3, #255	; 0xff
 801016a:	e017      	b.n	801019c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 801016c:	68bb      	ldr	r3, [r7, #8]
 801016e:	2b00      	cmp	r3, #0
 8010170:	d013      	beq.n	801019a <osMutexRelease+0x5e>
 8010172:	4b0c      	ldr	r3, [pc, #48]	; (80101a4 <osMutexRelease+0x68>)
 8010174:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010178:	601a      	str	r2, [r3, #0]
 801017a:	f3bf 8f4f 	dsb	sy
 801017e:	f3bf 8f6f 	isb	sy
 8010182:	e00a      	b.n	801019a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8010184:	2300      	movs	r3, #0
 8010186:	2200      	movs	r2, #0
 8010188:	2100      	movs	r1, #0
 801018a:	6878      	ldr	r0, [r7, #4]
 801018c:	f000 fc7a 	bl	8010a84 <xQueueGenericSend>
 8010190:	4603      	mov	r3, r0
 8010192:	2b01      	cmp	r3, #1
 8010194:	d001      	beq.n	801019a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8010196:	23ff      	movs	r3, #255	; 0xff
 8010198:	60fb      	str	r3, [r7, #12]
  }
  return result;
 801019a:	68fb      	ldr	r3, [r7, #12]
}
 801019c:	4618      	mov	r0, r3
 801019e:	3710      	adds	r7, #16
 80101a0:	46bd      	mov	sp, r7
 80101a2:	bd80      	pop	{r7, pc}
 80101a4:	e000ed04 	.word	0xe000ed04

080101a8 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 80101a8:	b580      	push	{r7, lr}
 80101aa:	b086      	sub	sp, #24
 80101ac:	af00      	add	r7, sp, #0
 80101ae:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	685b      	ldr	r3, [r3, #4]
 80101b4:	3303      	adds	r3, #3
 80101b6:	f023 0303 	bic.w	r3, r3, #3
 80101ba:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 80101bc:	2014      	movs	r0, #20
 80101be:	f002 fdff 	bl	8012dc0 <pvPortMalloc>
 80101c2:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 80101c4:	697b      	ldr	r3, [r7, #20]
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d046      	beq.n	8010258 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	681a      	ldr	r2, [r3, #0]
 80101ce:	697b      	ldr	r3, [r7, #20]
 80101d0:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 80101d2:	68fa      	ldr	r2, [r7, #12]
 80101d4:	697b      	ldr	r3, [r7, #20]
 80101d6:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 80101d8:	697b      	ldr	r3, [r7, #20]
 80101da:	2200      	movs	r2, #0
 80101dc:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	4618      	mov	r0, r3
 80101e4:	f002 fdec 	bl	8012dc0 <pvPortMalloc>
 80101e8:	4602      	mov	r2, r0
 80101ea:	697b      	ldr	r3, [r7, #20]
 80101ec:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 80101ee:	697b      	ldr	r3, [r7, #20]
 80101f0:	685b      	ldr	r3, [r3, #4]
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d02b      	beq.n	801024e <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	68fa      	ldr	r2, [r7, #12]
 80101fc:	fb02 f303 	mul.w	r3, r2, r3
 8010200:	4618      	mov	r0, r3
 8010202:	f002 fddd 	bl	8012dc0 <pvPortMalloc>
 8010206:	4602      	mov	r2, r0
 8010208:	697b      	ldr	r3, [r7, #20]
 801020a:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 801020c:	697b      	ldr	r3, [r7, #20]
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	2b00      	cmp	r3, #0
 8010212:	d011      	beq.n	8010238 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 8010214:	2300      	movs	r3, #0
 8010216:	613b      	str	r3, [r7, #16]
 8010218:	e008      	b.n	801022c <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 801021a:	697b      	ldr	r3, [r7, #20]
 801021c:	685a      	ldr	r2, [r3, #4]
 801021e:	693b      	ldr	r3, [r7, #16]
 8010220:	4413      	add	r3, r2
 8010222:	2200      	movs	r2, #0
 8010224:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 8010226:	693b      	ldr	r3, [r7, #16]
 8010228:	3301      	adds	r3, #1
 801022a:	613b      	str	r3, [r7, #16]
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	693a      	ldr	r2, [r7, #16]
 8010232:	429a      	cmp	r2, r3
 8010234:	d3f1      	bcc.n	801021a <osPoolCreate+0x72>
 8010236:	e00f      	b.n	8010258 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 8010238:	697b      	ldr	r3, [r7, #20]
 801023a:	685b      	ldr	r3, [r3, #4]
 801023c:	4618      	mov	r0, r3
 801023e:	f002 fe81 	bl	8012f44 <vPortFree>
        vPortFree(thePool);
 8010242:	6978      	ldr	r0, [r7, #20]
 8010244:	f002 fe7e 	bl	8012f44 <vPortFree>
        thePool = NULL;
 8010248:	2300      	movs	r3, #0
 801024a:	617b      	str	r3, [r7, #20]
 801024c:	e004      	b.n	8010258 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 801024e:	6978      	ldr	r0, [r7, #20]
 8010250:	f002 fe78 	bl	8012f44 <vPortFree>
      thePool = NULL;
 8010254:	2300      	movs	r3, #0
 8010256:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 8010258:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 801025a:	4618      	mov	r0, r3
 801025c:	3718      	adds	r7, #24
 801025e:	46bd      	mov	sp, r7
 8010260:	bd80      	pop	{r7, pc}

08010262 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 8010262:	b580      	push	{r7, lr}
 8010264:	b08a      	sub	sp, #40	; 0x28
 8010266:	af00      	add	r7, sp, #0
 8010268:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 801026a:	2300      	movs	r3, #0
 801026c:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 801026e:	2300      	movs	r3, #0
 8010270:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 8010272:	f7ff fdf7 	bl	800fe64 <inHandlerMode>
 8010276:	4603      	mov	r3, r0
 8010278:	2b00      	cmp	r3, #0
 801027a:	d00e      	beq.n	801029a <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801027c:	f3ef 8211 	mrs	r2, BASEPRI
 8010280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010284:	f383 8811 	msr	BASEPRI, r3
 8010288:	f3bf 8f6f 	isb	sy
 801028c:	f3bf 8f4f 	dsb	sy
 8010290:	617a      	str	r2, [r7, #20]
 8010292:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8010294:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8010296:	627b      	str	r3, [r7, #36]	; 0x24
 8010298:	e001      	b.n	801029e <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 801029a:	f002 fc77 	bl	8012b8c <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 801029e:	2300      	movs	r3, #0
 80102a0:	61fb      	str	r3, [r7, #28]
 80102a2:	e029      	b.n	80102f8 <osPoolAlloc+0x96>
    index = pool_id->currentIndex + i;
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	691b      	ldr	r3, [r3, #16]
 80102a8:	69fa      	ldr	r2, [r7, #28]
 80102aa:	4413      	add	r3, r2
 80102ac:	61bb      	str	r3, [r7, #24]
    if (index >= pool_id->pool_sz) {
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	689b      	ldr	r3, [r3, #8]
 80102b2:	69ba      	ldr	r2, [r7, #24]
 80102b4:	429a      	cmp	r2, r3
 80102b6:	d301      	bcc.n	80102bc <osPoolAlloc+0x5a>
      index = 0;
 80102b8:	2300      	movs	r3, #0
 80102ba:	61bb      	str	r3, [r7, #24]
    }
    
    if (pool_id->markers[index] == 0) {
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	685a      	ldr	r2, [r3, #4]
 80102c0:	69bb      	ldr	r3, [r7, #24]
 80102c2:	4413      	add	r3, r2
 80102c4:	781b      	ldrb	r3, [r3, #0]
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d113      	bne.n	80102f2 <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	685a      	ldr	r2, [r3, #4]
 80102ce:	69bb      	ldr	r3, [r7, #24]
 80102d0:	4413      	add	r3, r2
 80102d2:	2201      	movs	r2, #1
 80102d4:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	4619      	mov	r1, r3
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	68db      	ldr	r3, [r3, #12]
 80102e0:	69ba      	ldr	r2, [r7, #24]
 80102e2:	fb02 f303 	mul.w	r3, r2, r3
 80102e6:	440b      	add	r3, r1
 80102e8:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	69ba      	ldr	r2, [r7, #24]
 80102ee:	611a      	str	r2, [r3, #16]
      break;
 80102f0:	e007      	b.n	8010302 <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 80102f2:	69fb      	ldr	r3, [r7, #28]
 80102f4:	3301      	adds	r3, #1
 80102f6:	61fb      	str	r3, [r7, #28]
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	689b      	ldr	r3, [r3, #8]
 80102fc:	69fa      	ldr	r2, [r7, #28]
 80102fe:	429a      	cmp	r2, r3
 8010300:	d3d0      	bcc.n	80102a4 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 8010302:	f7ff fdaf 	bl	800fe64 <inHandlerMode>
 8010306:	4603      	mov	r3, r0
 8010308:	2b00      	cmp	r3, #0
 801030a:	d005      	beq.n	8010318 <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 801030c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801030e:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	f383 8811 	msr	BASEPRI, r3
 8010316:	e001      	b.n	801031c <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 8010318:	f002 fc66 	bl	8012be8 <vPortExitCritical>
  }
  
  return p;
 801031c:	6a3b      	ldr	r3, [r7, #32]
}
 801031e:	4618      	mov	r0, r3
 8010320:	3728      	adds	r7, #40	; 0x28
 8010322:	46bd      	mov	sp, r7
 8010324:	bd80      	pop	{r7, pc}

08010326 <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 8010326:	b480      	push	{r7}
 8010328:	b085      	sub	sp, #20
 801032a:	af00      	add	r7, sp, #0
 801032c:	6078      	str	r0, [r7, #4]
 801032e:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	2b00      	cmp	r3, #0
 8010334:	d101      	bne.n	801033a <osPoolFree+0x14>
    return osErrorParameter;
 8010336:	2380      	movs	r3, #128	; 0x80
 8010338:	e030      	b.n	801039c <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 801033a:	683b      	ldr	r3, [r7, #0]
 801033c:	2b00      	cmp	r3, #0
 801033e:	d101      	bne.n	8010344 <osPoolFree+0x1e>
    return osErrorParameter;
 8010340:	2380      	movs	r3, #128	; 0x80
 8010342:	e02b      	b.n	801039c <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	683a      	ldr	r2, [r7, #0]
 801034a:	429a      	cmp	r2, r3
 801034c:	d201      	bcs.n	8010352 <osPoolFree+0x2c>
    return osErrorParameter;
 801034e:	2380      	movs	r3, #128	; 0x80
 8010350:	e024      	b.n	801039c <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 8010352:	683b      	ldr	r3, [r7, #0]
 8010354:	687a      	ldr	r2, [r7, #4]
 8010356:	6812      	ldr	r2, [r2, #0]
 8010358:	1a9b      	subs	r3, r3, r2
 801035a:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	68da      	ldr	r2, [r3, #12]
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	fbb3 f1f2 	udiv	r1, r3, r2
 8010366:	fb02 f201 	mul.w	r2, r2, r1
 801036a:	1a9b      	subs	r3, r3, r2
 801036c:	2b00      	cmp	r3, #0
 801036e:	d001      	beq.n	8010374 <osPoolFree+0x4e>
    return osErrorParameter;
 8010370:	2380      	movs	r3, #128	; 0x80
 8010372:	e013      	b.n	801039c <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	68db      	ldr	r3, [r3, #12]
 8010378:	68fa      	ldr	r2, [r7, #12]
 801037a:	fbb2 f3f3 	udiv	r3, r2, r3
 801037e:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	689b      	ldr	r3, [r3, #8]
 8010384:	68fa      	ldr	r2, [r7, #12]
 8010386:	429a      	cmp	r2, r3
 8010388:	d301      	bcc.n	801038e <osPoolFree+0x68>
    return osErrorParameter;
 801038a:	2380      	movs	r3, #128	; 0x80
 801038c:	e006      	b.n	801039c <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	685a      	ldr	r2, [r3, #4]
 8010392:	68fb      	ldr	r3, [r7, #12]
 8010394:	4413      	add	r3, r2
 8010396:	2200      	movs	r2, #0
 8010398:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 801039a:	2300      	movs	r3, #0
}
 801039c:	4618      	mov	r0, r3
 801039e:	3714      	adds	r7, #20
 80103a0:	46bd      	mov	sp, r7
 80103a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103a6:	4770      	bx	lr

080103a8 <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 80103a8:	b590      	push	{r4, r7, lr}
 80103aa:	b087      	sub	sp, #28
 80103ac:	af00      	add	r7, sp, #0
 80103ae:	6078      	str	r0, [r7, #4]
 80103b0:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	60fb      	str	r3, [r7, #12]
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	685b      	ldr	r3, [r3, #4]
 80103bc:	613b      	str	r3, [r7, #16]
 80103be:	2300      	movs	r3, #0
 80103c0:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	689c      	ldr	r4, [r3, #8]
 80103c6:	200c      	movs	r0, #12
 80103c8:	f002 fcfa 	bl	8012dc0 <pvPortMalloc>
 80103cc:	4603      	mov	r3, r0
 80103ce:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	689b      	ldr	r3, [r3, #8]
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d101      	bne.n	80103de <osMailCreate+0x36>
    return NULL;
 80103da:	2300      	movs	r3, #0
 80103dc:	e038      	b.n	8010450 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	689b      	ldr	r3, [r3, #8]
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	687a      	ldr	r2, [r7, #4]
 80103e6:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	6818      	ldr	r0, [r3, #0]
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	689b      	ldr	r3, [r3, #8]
 80103f0:	681c      	ldr	r4, [r3, #0]
 80103f2:	2200      	movs	r2, #0
 80103f4:	2104      	movs	r1, #4
 80103f6:	f000 fa9b 	bl	8010930 <xQueueGenericCreate>
 80103fa:	4603      	mov	r3, r0
 80103fc:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	689b      	ldr	r3, [r3, #8]
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	685b      	ldr	r3, [r3, #4]
 8010406:	2b00      	cmp	r3, #0
 8010408:	d107      	bne.n	801041a <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	689b      	ldr	r3, [r3, #8]
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	4618      	mov	r0, r3
 8010412:	f002 fd97 	bl	8012f44 <vPortFree>
    return NULL;
 8010416:	2300      	movs	r3, #0
 8010418:	e01a      	b.n	8010450 <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	689b      	ldr	r3, [r3, #8]
 801041e:	681c      	ldr	r4, [r3, #0]
 8010420:	f107 030c 	add.w	r3, r7, #12
 8010424:	4618      	mov	r0, r3
 8010426:	f7ff febf 	bl	80101a8 <osPoolCreate>
 801042a:	4603      	mov	r3, r0
 801042c:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	689b      	ldr	r3, [r3, #8]
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	689b      	ldr	r3, [r3, #8]
 8010436:	2b00      	cmp	r3, #0
 8010438:	d107      	bne.n	801044a <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	689b      	ldr	r3, [r3, #8]
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	4618      	mov	r0, r3
 8010442:	f002 fd7f 	bl	8012f44 <vPortFree>
    return NULL;
 8010446:	2300      	movs	r3, #0
 8010448:	e002      	b.n	8010450 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	689b      	ldr	r3, [r3, #8]
 801044e:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 8010450:	4618      	mov	r0, r3
 8010452:	371c      	adds	r7, #28
 8010454:	46bd      	mov	sp, r7
 8010456:	bd90      	pop	{r4, r7, pc}

08010458 <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 8010458:	b580      	push	{r7, lr}
 801045a:	b084      	sub	sp, #16
 801045c:	af00      	add	r7, sp, #0
 801045e:	6078      	str	r0, [r7, #4]
 8010460:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	2b00      	cmp	r3, #0
 8010466:	d101      	bne.n	801046c <osMailAlloc+0x14>
    return NULL;
 8010468:	2300      	movs	r3, #0
 801046a:	e006      	b.n	801047a <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	689b      	ldr	r3, [r3, #8]
 8010470:	4618      	mov	r0, r3
 8010472:	f7ff fef6 	bl	8010262 <osPoolAlloc>
 8010476:	60f8      	str	r0, [r7, #12]
  
  return p;
 8010478:	68fb      	ldr	r3, [r7, #12]
}
 801047a:	4618      	mov	r0, r3
 801047c:	3710      	adds	r7, #16
 801047e:	46bd      	mov	sp, r7
 8010480:	bd80      	pop	{r7, pc}
	...

08010484 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 8010484:	b580      	push	{r7, lr}
 8010486:	b084      	sub	sp, #16
 8010488:	af00      	add	r7, sp, #0
 801048a:	6078      	str	r0, [r7, #4]
 801048c:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	2b00      	cmp	r3, #0
 8010492:	d101      	bne.n	8010498 <osMailPut+0x14>
    return osErrorParameter;
 8010494:	2380      	movs	r3, #128	; 0x80
 8010496:	e02c      	b.n	80104f2 <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 8010498:	2300      	movs	r3, #0
 801049a:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 801049c:	f7ff fce2 	bl	800fe64 <inHandlerMode>
 80104a0:	4603      	mov	r3, r0
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d018      	beq.n	80104d8 <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	6858      	ldr	r0, [r3, #4]
 80104aa:	f107 020c 	add.w	r2, r7, #12
 80104ae:	4639      	mov	r1, r7
 80104b0:	2300      	movs	r3, #0
 80104b2:	f000 fbe1 	bl	8010c78 <xQueueGenericSendFromISR>
 80104b6:	4603      	mov	r3, r0
 80104b8:	2b01      	cmp	r3, #1
 80104ba:	d001      	beq.n	80104c0 <osMailPut+0x3c>
      return osErrorOS;
 80104bc:	23ff      	movs	r3, #255	; 0xff
 80104be:	e018      	b.n	80104f2 <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d014      	beq.n	80104f0 <osMailPut+0x6c>
 80104c6:	4b0d      	ldr	r3, [pc, #52]	; (80104fc <osMailPut+0x78>)
 80104c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80104cc:	601a      	str	r2, [r3, #0]
 80104ce:	f3bf 8f4f 	dsb	sy
 80104d2:	f3bf 8f6f 	isb	sy
 80104d6:	e00b      	b.n	80104f0 <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	6858      	ldr	r0, [r3, #4]
 80104dc:	4639      	mov	r1, r7
 80104de:	2300      	movs	r3, #0
 80104e0:	2200      	movs	r2, #0
 80104e2:	f000 facf 	bl	8010a84 <xQueueGenericSend>
 80104e6:	4603      	mov	r3, r0
 80104e8:	2b01      	cmp	r3, #1
 80104ea:	d001      	beq.n	80104f0 <osMailPut+0x6c>
      return osErrorOS;
 80104ec:	23ff      	movs	r3, #255	; 0xff
 80104ee:	e000      	b.n	80104f2 <osMailPut+0x6e>
    }
  }
  
  return osOK;
 80104f0:	2300      	movs	r3, #0
}
 80104f2:	4618      	mov	r0, r3
 80104f4:	3710      	adds	r7, #16
 80104f6:	46bd      	mov	sp, r7
 80104f8:	bd80      	pop	{r7, pc}
 80104fa:	bf00      	nop
 80104fc:	e000ed04 	.word	0xe000ed04

08010500 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 8010500:	b590      	push	{r4, r7, lr}
 8010502:	b08b      	sub	sp, #44	; 0x2c
 8010504:	af00      	add	r7, sp, #0
 8010506:	60f8      	str	r0, [r7, #12]
 8010508:	60b9      	str	r1, [r7, #8]
 801050a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 801050c:	68bb      	ldr	r3, [r7, #8]
 801050e:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 8010510:	68bb      	ldr	r3, [r7, #8]
 8010512:	2b00      	cmp	r3, #0
 8010514:	d10a      	bne.n	801052c <osMailGet+0x2c>
    event.status = osErrorParameter;
 8010516:	2380      	movs	r3, #128	; 0x80
 8010518:	617b      	str	r3, [r7, #20]
    return event;
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	461c      	mov	r4, r3
 801051e:	f107 0314 	add.w	r3, r7, #20
 8010522:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010526:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801052a:	e056      	b.n	80105da <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 801052c:	2300      	movs	r3, #0
 801052e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8010530:	2300      	movs	r3, #0
 8010532:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	f1b3 3fff 	cmp.w	r3, #4294967295
 801053a:	d103      	bne.n	8010544 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 801053c:	f04f 33ff 	mov.w	r3, #4294967295
 8010540:	627b      	str	r3, [r7, #36]	; 0x24
 8010542:	e009      	b.n	8010558 <osMailGet+0x58>
  }
  else if (millisec != 0) {
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	2b00      	cmp	r3, #0
 8010548:	d006      	beq.n	8010558 <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 801054e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010550:	2b00      	cmp	r3, #0
 8010552:	d101      	bne.n	8010558 <osMailGet+0x58>
      ticks = 1;
 8010554:	2301      	movs	r3, #1
 8010556:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8010558:	f7ff fc84 	bl	800fe64 <inHandlerMode>
 801055c:	4603      	mov	r3, r0
 801055e:	2b00      	cmp	r3, #0
 8010560:	d01d      	beq.n	801059e <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 8010562:	68bb      	ldr	r3, [r7, #8]
 8010564:	6858      	ldr	r0, [r3, #4]
 8010566:	f107 0220 	add.w	r2, r7, #32
 801056a:	f107 0314 	add.w	r3, r7, #20
 801056e:	3304      	adds	r3, #4
 8010570:	4619      	mov	r1, r3
 8010572:	f000 fe83 	bl	801127c <xQueueReceiveFromISR>
 8010576:	4603      	mov	r3, r0
 8010578:	2b01      	cmp	r3, #1
 801057a:	d102      	bne.n	8010582 <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 801057c:	2320      	movs	r3, #32
 801057e:	617b      	str	r3, [r7, #20]
 8010580:	e001      	b.n	8010586 <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 8010582:	2300      	movs	r3, #0
 8010584:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8010586:	6a3b      	ldr	r3, [r7, #32]
 8010588:	2b00      	cmp	r3, #0
 801058a:	d01e      	beq.n	80105ca <osMailGet+0xca>
 801058c:	4b15      	ldr	r3, [pc, #84]	; (80105e4 <osMailGet+0xe4>)
 801058e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010592:	601a      	str	r2, [r3, #0]
 8010594:	f3bf 8f4f 	dsb	sy
 8010598:	f3bf 8f6f 	isb	sy
 801059c:	e015      	b.n	80105ca <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 801059e:	68bb      	ldr	r3, [r7, #8]
 80105a0:	6858      	ldr	r0, [r3, #4]
 80105a2:	f107 0314 	add.w	r3, r7, #20
 80105a6:	3304      	adds	r3, #4
 80105a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80105aa:	4619      	mov	r1, r3
 80105ac:	f000 fc82 	bl	8010eb4 <xQueueReceive>
 80105b0:	4603      	mov	r3, r0
 80105b2:	2b01      	cmp	r3, #1
 80105b4:	d102      	bne.n	80105bc <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 80105b6:	2320      	movs	r3, #32
 80105b8:	617b      	str	r3, [r7, #20]
 80105ba:	e006      	b.n	80105ca <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80105bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d101      	bne.n	80105c6 <osMailGet+0xc6>
 80105c2:	2300      	movs	r3, #0
 80105c4:	e000      	b.n	80105c8 <osMailGet+0xc8>
 80105c6:	2340      	movs	r3, #64	; 0x40
 80105c8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80105ca:	68fb      	ldr	r3, [r7, #12]
 80105cc:	461c      	mov	r4, r3
 80105ce:	f107 0314 	add.w	r3, r7, #20
 80105d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80105d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80105da:	68f8      	ldr	r0, [r7, #12]
 80105dc:	372c      	adds	r7, #44	; 0x2c
 80105de:	46bd      	mov	sp, r7
 80105e0:	bd90      	pop	{r4, r7, pc}
 80105e2:	bf00      	nop
 80105e4:	e000ed04 	.word	0xe000ed04

080105e8 <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 80105e8:	b580      	push	{r7, lr}
 80105ea:	b082      	sub	sp, #8
 80105ec:	af00      	add	r7, sp, #0
 80105ee:	6078      	str	r0, [r7, #4]
 80105f0:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d101      	bne.n	80105fc <osMailFree+0x14>
    return osErrorParameter;
 80105f8:	2380      	movs	r3, #128	; 0x80
 80105fa:	e006      	b.n	801060a <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	689b      	ldr	r3, [r3, #8]
 8010600:	6839      	ldr	r1, [r7, #0]
 8010602:	4618      	mov	r0, r3
 8010604:	f7ff fe8f 	bl	8010326 <osPoolFree>
 8010608:	4603      	mov	r3, r0
}
 801060a:	4618      	mov	r0, r3
 801060c:	3708      	adds	r7, #8
 801060e:	46bd      	mov	sp, r7
 8010610:	bd80      	pop	{r7, pc}

08010612 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010612:	b480      	push	{r7}
 8010614:	b083      	sub	sp, #12
 8010616:	af00      	add	r7, sp, #0
 8010618:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	f103 0208 	add.w	r2, r3, #8
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	f04f 32ff 	mov.w	r2, #4294967295
 801062a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	f103 0208 	add.w	r2, r3, #8
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	f103 0208 	add.w	r2, r3, #8
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	2200      	movs	r2, #0
 8010644:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010646:	bf00      	nop
 8010648:	370c      	adds	r7, #12
 801064a:	46bd      	mov	sp, r7
 801064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010650:	4770      	bx	lr

08010652 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010652:	b480      	push	{r7}
 8010654:	b083      	sub	sp, #12
 8010656:	af00      	add	r7, sp, #0
 8010658:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	2200      	movs	r2, #0
 801065e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010660:	bf00      	nop
 8010662:	370c      	adds	r7, #12
 8010664:	46bd      	mov	sp, r7
 8010666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801066a:	4770      	bx	lr

0801066c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801066c:	b480      	push	{r7}
 801066e:	b085      	sub	sp, #20
 8010670:	af00      	add	r7, sp, #0
 8010672:	6078      	str	r0, [r7, #4]
 8010674:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	685b      	ldr	r3, [r3, #4]
 801067a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801067c:	683b      	ldr	r3, [r7, #0]
 801067e:	68fa      	ldr	r2, [r7, #12]
 8010680:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	689a      	ldr	r2, [r3, #8]
 8010686:	683b      	ldr	r3, [r7, #0]
 8010688:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	689b      	ldr	r3, [r3, #8]
 801068e:	683a      	ldr	r2, [r7, #0]
 8010690:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	683a      	ldr	r2, [r7, #0]
 8010696:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8010698:	683b      	ldr	r3, [r7, #0]
 801069a:	687a      	ldr	r2, [r7, #4]
 801069c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	1c5a      	adds	r2, r3, #1
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	601a      	str	r2, [r3, #0]
}
 80106a8:	bf00      	nop
 80106aa:	3714      	adds	r7, #20
 80106ac:	46bd      	mov	sp, r7
 80106ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106b2:	4770      	bx	lr

080106b4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80106b4:	b480      	push	{r7}
 80106b6:	b085      	sub	sp, #20
 80106b8:	af00      	add	r7, sp, #0
 80106ba:	6078      	str	r0, [r7, #4]
 80106bc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80106be:	683b      	ldr	r3, [r7, #0]
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80106c4:	68bb      	ldr	r3, [r7, #8]
 80106c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106ca:	d103      	bne.n	80106d4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	691b      	ldr	r3, [r3, #16]
 80106d0:	60fb      	str	r3, [r7, #12]
 80106d2:	e00c      	b.n	80106ee <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	3308      	adds	r3, #8
 80106d8:	60fb      	str	r3, [r7, #12]
 80106da:	e002      	b.n	80106e2 <vListInsert+0x2e>
 80106dc:	68fb      	ldr	r3, [r7, #12]
 80106de:	685b      	ldr	r3, [r3, #4]
 80106e0:	60fb      	str	r3, [r7, #12]
 80106e2:	68fb      	ldr	r3, [r7, #12]
 80106e4:	685b      	ldr	r3, [r3, #4]
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	68ba      	ldr	r2, [r7, #8]
 80106ea:	429a      	cmp	r2, r3
 80106ec:	d2f6      	bcs.n	80106dc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	685a      	ldr	r2, [r3, #4]
 80106f2:	683b      	ldr	r3, [r7, #0]
 80106f4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80106f6:	683b      	ldr	r3, [r7, #0]
 80106f8:	685b      	ldr	r3, [r3, #4]
 80106fa:	683a      	ldr	r2, [r7, #0]
 80106fc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80106fe:	683b      	ldr	r3, [r7, #0]
 8010700:	68fa      	ldr	r2, [r7, #12]
 8010702:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	683a      	ldr	r2, [r7, #0]
 8010708:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 801070a:	683b      	ldr	r3, [r7, #0]
 801070c:	687a      	ldr	r2, [r7, #4]
 801070e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	1c5a      	adds	r2, r3, #1
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	601a      	str	r2, [r3, #0]
}
 801071a:	bf00      	nop
 801071c:	3714      	adds	r7, #20
 801071e:	46bd      	mov	sp, r7
 8010720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010724:	4770      	bx	lr

08010726 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010726:	b480      	push	{r7}
 8010728:	b085      	sub	sp, #20
 801072a:	af00      	add	r7, sp, #0
 801072c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	691b      	ldr	r3, [r3, #16]
 8010732:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	685b      	ldr	r3, [r3, #4]
 8010738:	687a      	ldr	r2, [r7, #4]
 801073a:	6892      	ldr	r2, [r2, #8]
 801073c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	689b      	ldr	r3, [r3, #8]
 8010742:	687a      	ldr	r2, [r7, #4]
 8010744:	6852      	ldr	r2, [r2, #4]
 8010746:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	685b      	ldr	r3, [r3, #4]
 801074c:	687a      	ldr	r2, [r7, #4]
 801074e:	429a      	cmp	r2, r3
 8010750:	d103      	bne.n	801075a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	689a      	ldr	r2, [r3, #8]
 8010756:	68fb      	ldr	r3, [r7, #12]
 8010758:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	2200      	movs	r2, #0
 801075e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010760:	68fb      	ldr	r3, [r7, #12]
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	1e5a      	subs	r2, r3, #1
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	681b      	ldr	r3, [r3, #0]
}
 801076e:	4618      	mov	r0, r3
 8010770:	3714      	adds	r7, #20
 8010772:	46bd      	mov	sp, r7
 8010774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010778:	4770      	bx	lr
	...

0801077c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801077c:	b580      	push	{r7, lr}
 801077e:	b084      	sub	sp, #16
 8010780:	af00      	add	r7, sp, #0
 8010782:	6078      	str	r0, [r7, #4]
 8010784:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	2b00      	cmp	r3, #0
 801078e:	d109      	bne.n	80107a4 <xQueueGenericReset+0x28>
	__asm volatile
 8010790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010794:	f383 8811 	msr	BASEPRI, r3
 8010798:	f3bf 8f6f 	isb	sy
 801079c:	f3bf 8f4f 	dsb	sy
 80107a0:	60bb      	str	r3, [r7, #8]
 80107a2:	e7fe      	b.n	80107a2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80107a4:	f002 f9f2 	bl	8012b8c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	681a      	ldr	r2, [r3, #0]
 80107ac:	68fb      	ldr	r3, [r7, #12]
 80107ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80107b0:	68f9      	ldr	r1, [r7, #12]
 80107b2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80107b4:	fb01 f303 	mul.w	r3, r1, r3
 80107b8:	441a      	add	r2, r3
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	2200      	movs	r2, #0
 80107c2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	681a      	ldr	r2, [r3, #0]
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	681a      	ldr	r2, [r3, #0]
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80107d4:	3b01      	subs	r3, #1
 80107d6:	68f9      	ldr	r1, [r7, #12]
 80107d8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80107da:	fb01 f303 	mul.w	r3, r1, r3
 80107de:	441a      	add	r2, r3
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	22ff      	movs	r2, #255	; 0xff
 80107e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	22ff      	movs	r2, #255	; 0xff
 80107f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80107f4:	683b      	ldr	r3, [r7, #0]
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d114      	bne.n	8010824 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	691b      	ldr	r3, [r3, #16]
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d01a      	beq.n	8010838 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	3310      	adds	r3, #16
 8010806:	4618      	mov	r0, r3
 8010808:	f001 fada 	bl	8011dc0 <xTaskRemoveFromEventList>
 801080c:	4603      	mov	r3, r0
 801080e:	2b00      	cmp	r3, #0
 8010810:	d012      	beq.n	8010838 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8010812:	4b0d      	ldr	r3, [pc, #52]	; (8010848 <xQueueGenericReset+0xcc>)
 8010814:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010818:	601a      	str	r2, [r3, #0]
 801081a:	f3bf 8f4f 	dsb	sy
 801081e:	f3bf 8f6f 	isb	sy
 8010822:	e009      	b.n	8010838 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	3310      	adds	r3, #16
 8010828:	4618      	mov	r0, r3
 801082a:	f7ff fef2 	bl	8010612 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	3324      	adds	r3, #36	; 0x24
 8010832:	4618      	mov	r0, r3
 8010834:	f7ff feed 	bl	8010612 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8010838:	f002 f9d6 	bl	8012be8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801083c:	2301      	movs	r3, #1
}
 801083e:	4618      	mov	r0, r3
 8010840:	3710      	adds	r7, #16
 8010842:	46bd      	mov	sp, r7
 8010844:	bd80      	pop	{r7, pc}
 8010846:	bf00      	nop
 8010848:	e000ed04 	.word	0xe000ed04

0801084c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801084c:	b580      	push	{r7, lr}
 801084e:	b08e      	sub	sp, #56	; 0x38
 8010850:	af02      	add	r7, sp, #8
 8010852:	60f8      	str	r0, [r7, #12]
 8010854:	60b9      	str	r1, [r7, #8]
 8010856:	607a      	str	r2, [r7, #4]
 8010858:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	2b00      	cmp	r3, #0
 801085e:	d109      	bne.n	8010874 <xQueueGenericCreateStatic+0x28>
 8010860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010864:	f383 8811 	msr	BASEPRI, r3
 8010868:	f3bf 8f6f 	isb	sy
 801086c:	f3bf 8f4f 	dsb	sy
 8010870:	62bb      	str	r3, [r7, #40]	; 0x28
 8010872:	e7fe      	b.n	8010872 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8010874:	683b      	ldr	r3, [r7, #0]
 8010876:	2b00      	cmp	r3, #0
 8010878:	d109      	bne.n	801088e <xQueueGenericCreateStatic+0x42>
 801087a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801087e:	f383 8811 	msr	BASEPRI, r3
 8010882:	f3bf 8f6f 	isb	sy
 8010886:	f3bf 8f4f 	dsb	sy
 801088a:	627b      	str	r3, [r7, #36]	; 0x24
 801088c:	e7fe      	b.n	801088c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	2b00      	cmp	r3, #0
 8010892:	d002      	beq.n	801089a <xQueueGenericCreateStatic+0x4e>
 8010894:	68bb      	ldr	r3, [r7, #8]
 8010896:	2b00      	cmp	r3, #0
 8010898:	d001      	beq.n	801089e <xQueueGenericCreateStatic+0x52>
 801089a:	2301      	movs	r3, #1
 801089c:	e000      	b.n	80108a0 <xQueueGenericCreateStatic+0x54>
 801089e:	2300      	movs	r3, #0
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d109      	bne.n	80108b8 <xQueueGenericCreateStatic+0x6c>
 80108a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108a8:	f383 8811 	msr	BASEPRI, r3
 80108ac:	f3bf 8f6f 	isb	sy
 80108b0:	f3bf 8f4f 	dsb	sy
 80108b4:	623b      	str	r3, [r7, #32]
 80108b6:	e7fe      	b.n	80108b6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d102      	bne.n	80108c4 <xQueueGenericCreateStatic+0x78>
 80108be:	68bb      	ldr	r3, [r7, #8]
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d101      	bne.n	80108c8 <xQueueGenericCreateStatic+0x7c>
 80108c4:	2301      	movs	r3, #1
 80108c6:	e000      	b.n	80108ca <xQueueGenericCreateStatic+0x7e>
 80108c8:	2300      	movs	r3, #0
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d109      	bne.n	80108e2 <xQueueGenericCreateStatic+0x96>
 80108ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108d2:	f383 8811 	msr	BASEPRI, r3
 80108d6:	f3bf 8f6f 	isb	sy
 80108da:	f3bf 8f4f 	dsb	sy
 80108de:	61fb      	str	r3, [r7, #28]
 80108e0:	e7fe      	b.n	80108e0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80108e2:	2348      	movs	r3, #72	; 0x48
 80108e4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80108e6:	697b      	ldr	r3, [r7, #20]
 80108e8:	2b48      	cmp	r3, #72	; 0x48
 80108ea:	d009      	beq.n	8010900 <xQueueGenericCreateStatic+0xb4>
 80108ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108f0:	f383 8811 	msr	BASEPRI, r3
 80108f4:	f3bf 8f6f 	isb	sy
 80108f8:	f3bf 8f4f 	dsb	sy
 80108fc:	61bb      	str	r3, [r7, #24]
 80108fe:	e7fe      	b.n	80108fe <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010900:	683b      	ldr	r3, [r7, #0]
 8010902:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8010904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010906:	2b00      	cmp	r3, #0
 8010908:	d00d      	beq.n	8010926 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801090a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801090c:	2201      	movs	r2, #1
 801090e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010912:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8010916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010918:	9300      	str	r3, [sp, #0]
 801091a:	4613      	mov	r3, r2
 801091c:	687a      	ldr	r2, [r7, #4]
 801091e:	68b9      	ldr	r1, [r7, #8]
 8010920:	68f8      	ldr	r0, [r7, #12]
 8010922:	f000 f842 	bl	80109aa <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8010926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8010928:	4618      	mov	r0, r3
 801092a:	3730      	adds	r7, #48	; 0x30
 801092c:	46bd      	mov	sp, r7
 801092e:	bd80      	pop	{r7, pc}

08010930 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8010930:	b580      	push	{r7, lr}
 8010932:	b08a      	sub	sp, #40	; 0x28
 8010934:	af02      	add	r7, sp, #8
 8010936:	60f8      	str	r0, [r7, #12]
 8010938:	60b9      	str	r1, [r7, #8]
 801093a:	4613      	mov	r3, r2
 801093c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801093e:	68fb      	ldr	r3, [r7, #12]
 8010940:	2b00      	cmp	r3, #0
 8010942:	d109      	bne.n	8010958 <xQueueGenericCreate+0x28>
 8010944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010948:	f383 8811 	msr	BASEPRI, r3
 801094c:	f3bf 8f6f 	isb	sy
 8010950:	f3bf 8f4f 	dsb	sy
 8010954:	613b      	str	r3, [r7, #16]
 8010956:	e7fe      	b.n	8010956 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8010958:	68bb      	ldr	r3, [r7, #8]
 801095a:	2b00      	cmp	r3, #0
 801095c:	d102      	bne.n	8010964 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 801095e:	2300      	movs	r3, #0
 8010960:	61fb      	str	r3, [r7, #28]
 8010962:	e004      	b.n	801096e <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	68ba      	ldr	r2, [r7, #8]
 8010968:	fb02 f303 	mul.w	r3, r2, r3
 801096c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 801096e:	69fb      	ldr	r3, [r7, #28]
 8010970:	3348      	adds	r3, #72	; 0x48
 8010972:	4618      	mov	r0, r3
 8010974:	f002 fa24 	bl	8012dc0 <pvPortMalloc>
 8010978:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 801097a:	69bb      	ldr	r3, [r7, #24]
 801097c:	2b00      	cmp	r3, #0
 801097e:	d00f      	beq.n	80109a0 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8010980:	69bb      	ldr	r3, [r7, #24]
 8010982:	3348      	adds	r3, #72	; 0x48
 8010984:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8010986:	69bb      	ldr	r3, [r7, #24]
 8010988:	2200      	movs	r2, #0
 801098a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801098e:	79fa      	ldrb	r2, [r7, #7]
 8010990:	69bb      	ldr	r3, [r7, #24]
 8010992:	9300      	str	r3, [sp, #0]
 8010994:	4613      	mov	r3, r2
 8010996:	697a      	ldr	r2, [r7, #20]
 8010998:	68b9      	ldr	r1, [r7, #8]
 801099a:	68f8      	ldr	r0, [r7, #12]
 801099c:	f000 f805 	bl	80109aa <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80109a0:	69bb      	ldr	r3, [r7, #24]
	}
 80109a2:	4618      	mov	r0, r3
 80109a4:	3720      	adds	r7, #32
 80109a6:	46bd      	mov	sp, r7
 80109a8:	bd80      	pop	{r7, pc}

080109aa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80109aa:	b580      	push	{r7, lr}
 80109ac:	b084      	sub	sp, #16
 80109ae:	af00      	add	r7, sp, #0
 80109b0:	60f8      	str	r0, [r7, #12]
 80109b2:	60b9      	str	r1, [r7, #8]
 80109b4:	607a      	str	r2, [r7, #4]
 80109b6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80109b8:	68bb      	ldr	r3, [r7, #8]
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d103      	bne.n	80109c6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80109be:	69bb      	ldr	r3, [r7, #24]
 80109c0:	69ba      	ldr	r2, [r7, #24]
 80109c2:	601a      	str	r2, [r3, #0]
 80109c4:	e002      	b.n	80109cc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80109c6:	69bb      	ldr	r3, [r7, #24]
 80109c8:	687a      	ldr	r2, [r7, #4]
 80109ca:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80109cc:	69bb      	ldr	r3, [r7, #24]
 80109ce:	68fa      	ldr	r2, [r7, #12]
 80109d0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80109d2:	69bb      	ldr	r3, [r7, #24]
 80109d4:	68ba      	ldr	r2, [r7, #8]
 80109d6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80109d8:	2101      	movs	r1, #1
 80109da:	69b8      	ldr	r0, [r7, #24]
 80109dc:	f7ff fece 	bl	801077c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80109e0:	bf00      	nop
 80109e2:	3710      	adds	r7, #16
 80109e4:	46bd      	mov	sp, r7
 80109e6:	bd80      	pop	{r7, pc}

080109e8 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80109e8:	b580      	push	{r7, lr}
 80109ea:	b082      	sub	sp, #8
 80109ec:	af00      	add	r7, sp, #0
 80109ee:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d00e      	beq.n	8010a14 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	2200      	movs	r2, #0
 80109fa:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	2200      	movs	r2, #0
 8010a00:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	2200      	movs	r2, #0
 8010a06:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8010a08:	2300      	movs	r3, #0
 8010a0a:	2200      	movs	r2, #0
 8010a0c:	2100      	movs	r1, #0
 8010a0e:	6878      	ldr	r0, [r7, #4]
 8010a10:	f000 f838 	bl	8010a84 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8010a14:	bf00      	nop
 8010a16:	3708      	adds	r7, #8
 8010a18:	46bd      	mov	sp, r7
 8010a1a:	bd80      	pop	{r7, pc}

08010a1c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8010a1c:	b580      	push	{r7, lr}
 8010a1e:	b086      	sub	sp, #24
 8010a20:	af00      	add	r7, sp, #0
 8010a22:	4603      	mov	r3, r0
 8010a24:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8010a26:	2301      	movs	r3, #1
 8010a28:	617b      	str	r3, [r7, #20]
 8010a2a:	2300      	movs	r3, #0
 8010a2c:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8010a2e:	79fb      	ldrb	r3, [r7, #7]
 8010a30:	461a      	mov	r2, r3
 8010a32:	6939      	ldr	r1, [r7, #16]
 8010a34:	6978      	ldr	r0, [r7, #20]
 8010a36:	f7ff ff7b 	bl	8010930 <xQueueGenericCreate>
 8010a3a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8010a3c:	68f8      	ldr	r0, [r7, #12]
 8010a3e:	f7ff ffd3 	bl	80109e8 <prvInitialiseMutex>

		return pxNewQueue;
 8010a42:	68fb      	ldr	r3, [r7, #12]
	}
 8010a44:	4618      	mov	r0, r3
 8010a46:	3718      	adds	r7, #24
 8010a48:	46bd      	mov	sp, r7
 8010a4a:	bd80      	pop	{r7, pc}

08010a4c <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8010a4c:	b580      	push	{r7, lr}
 8010a4e:	b088      	sub	sp, #32
 8010a50:	af02      	add	r7, sp, #8
 8010a52:	4603      	mov	r3, r0
 8010a54:	6039      	str	r1, [r7, #0]
 8010a56:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8010a58:	2301      	movs	r3, #1
 8010a5a:	617b      	str	r3, [r7, #20]
 8010a5c:	2300      	movs	r3, #0
 8010a5e:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8010a60:	79fb      	ldrb	r3, [r7, #7]
 8010a62:	9300      	str	r3, [sp, #0]
 8010a64:	683b      	ldr	r3, [r7, #0]
 8010a66:	2200      	movs	r2, #0
 8010a68:	6939      	ldr	r1, [r7, #16]
 8010a6a:	6978      	ldr	r0, [r7, #20]
 8010a6c:	f7ff feee 	bl	801084c <xQueueGenericCreateStatic>
 8010a70:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8010a72:	68f8      	ldr	r0, [r7, #12]
 8010a74:	f7ff ffb8 	bl	80109e8 <prvInitialiseMutex>

		return pxNewQueue;
 8010a78:	68fb      	ldr	r3, [r7, #12]
	}
 8010a7a:	4618      	mov	r0, r3
 8010a7c:	3718      	adds	r7, #24
 8010a7e:	46bd      	mov	sp, r7
 8010a80:	bd80      	pop	{r7, pc}
	...

08010a84 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8010a84:	b580      	push	{r7, lr}
 8010a86:	b08e      	sub	sp, #56	; 0x38
 8010a88:	af00      	add	r7, sp, #0
 8010a8a:	60f8      	str	r0, [r7, #12]
 8010a8c:	60b9      	str	r1, [r7, #8]
 8010a8e:	607a      	str	r2, [r7, #4]
 8010a90:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8010a92:	2300      	movs	r3, #0
 8010a94:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8010a96:	68fb      	ldr	r3, [r7, #12]
 8010a98:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d109      	bne.n	8010ab4 <xQueueGenericSend+0x30>
 8010aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010aa4:	f383 8811 	msr	BASEPRI, r3
 8010aa8:	f3bf 8f6f 	isb	sy
 8010aac:	f3bf 8f4f 	dsb	sy
 8010ab0:	62bb      	str	r3, [r7, #40]	; 0x28
 8010ab2:	e7fe      	b.n	8010ab2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010ab4:	68bb      	ldr	r3, [r7, #8]
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d103      	bne.n	8010ac2 <xQueueGenericSend+0x3e>
 8010aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d101      	bne.n	8010ac6 <xQueueGenericSend+0x42>
 8010ac2:	2301      	movs	r3, #1
 8010ac4:	e000      	b.n	8010ac8 <xQueueGenericSend+0x44>
 8010ac6:	2300      	movs	r3, #0
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d109      	bne.n	8010ae0 <xQueueGenericSend+0x5c>
 8010acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ad0:	f383 8811 	msr	BASEPRI, r3
 8010ad4:	f3bf 8f6f 	isb	sy
 8010ad8:	f3bf 8f4f 	dsb	sy
 8010adc:	627b      	str	r3, [r7, #36]	; 0x24
 8010ade:	e7fe      	b.n	8010ade <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010ae0:	683b      	ldr	r3, [r7, #0]
 8010ae2:	2b02      	cmp	r3, #2
 8010ae4:	d103      	bne.n	8010aee <xQueueGenericSend+0x6a>
 8010ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010aea:	2b01      	cmp	r3, #1
 8010aec:	d101      	bne.n	8010af2 <xQueueGenericSend+0x6e>
 8010aee:	2301      	movs	r3, #1
 8010af0:	e000      	b.n	8010af4 <xQueueGenericSend+0x70>
 8010af2:	2300      	movs	r3, #0
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d109      	bne.n	8010b0c <xQueueGenericSend+0x88>
 8010af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010afc:	f383 8811 	msr	BASEPRI, r3
 8010b00:	f3bf 8f6f 	isb	sy
 8010b04:	f3bf 8f4f 	dsb	sy
 8010b08:	623b      	str	r3, [r7, #32]
 8010b0a:	e7fe      	b.n	8010b0a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010b0c:	f001 fb14 	bl	8012138 <xTaskGetSchedulerState>
 8010b10:	4603      	mov	r3, r0
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d102      	bne.n	8010b1c <xQueueGenericSend+0x98>
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d101      	bne.n	8010b20 <xQueueGenericSend+0x9c>
 8010b1c:	2301      	movs	r3, #1
 8010b1e:	e000      	b.n	8010b22 <xQueueGenericSend+0x9e>
 8010b20:	2300      	movs	r3, #0
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d109      	bne.n	8010b3a <xQueueGenericSend+0xb6>
 8010b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b2a:	f383 8811 	msr	BASEPRI, r3
 8010b2e:	f3bf 8f6f 	isb	sy
 8010b32:	f3bf 8f4f 	dsb	sy
 8010b36:	61fb      	str	r3, [r7, #28]
 8010b38:	e7fe      	b.n	8010b38 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010b3a:	f002 f827 	bl	8012b8c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b46:	429a      	cmp	r2, r3
 8010b48:	d302      	bcc.n	8010b50 <xQueueGenericSend+0xcc>
 8010b4a:	683b      	ldr	r3, [r7, #0]
 8010b4c:	2b02      	cmp	r3, #2
 8010b4e:	d129      	bne.n	8010ba4 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010b50:	683a      	ldr	r2, [r7, #0]
 8010b52:	68b9      	ldr	r1, [r7, #8]
 8010b54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010b56:	f000 fc26 	bl	80113a6 <prvCopyDataToQueue>
 8010b5a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d010      	beq.n	8010b86 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b66:	3324      	adds	r3, #36	; 0x24
 8010b68:	4618      	mov	r0, r3
 8010b6a:	f001 f929 	bl	8011dc0 <xTaskRemoveFromEventList>
 8010b6e:	4603      	mov	r3, r0
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d013      	beq.n	8010b9c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010b74:	4b3f      	ldr	r3, [pc, #252]	; (8010c74 <xQueueGenericSend+0x1f0>)
 8010b76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010b7a:	601a      	str	r2, [r3, #0]
 8010b7c:	f3bf 8f4f 	dsb	sy
 8010b80:	f3bf 8f6f 	isb	sy
 8010b84:	e00a      	b.n	8010b9c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8010b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d007      	beq.n	8010b9c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8010b8c:	4b39      	ldr	r3, [pc, #228]	; (8010c74 <xQueueGenericSend+0x1f0>)
 8010b8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010b92:	601a      	str	r2, [r3, #0]
 8010b94:	f3bf 8f4f 	dsb	sy
 8010b98:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010b9c:	f002 f824 	bl	8012be8 <vPortExitCritical>
				return pdPASS;
 8010ba0:	2301      	movs	r3, #1
 8010ba2:	e063      	b.n	8010c6c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d103      	bne.n	8010bb2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010baa:	f002 f81d 	bl	8012be8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8010bae:	2300      	movs	r3, #0
 8010bb0:	e05c      	b.n	8010c6c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d106      	bne.n	8010bc6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010bb8:	f107 0314 	add.w	r3, r7, #20
 8010bbc:	4618      	mov	r0, r3
 8010bbe:	f001 f961 	bl	8011e84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010bc2:	2301      	movs	r3, #1
 8010bc4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010bc6:	f002 f80f 	bl	8012be8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010bca:	f000 ff15 	bl	80119f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010bce:	f001 ffdd 	bl	8012b8c <vPortEnterCritical>
 8010bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bd4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010bd8:	b25b      	sxtb	r3, r3
 8010bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bde:	d103      	bne.n	8010be8 <xQueueGenericSend+0x164>
 8010be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010be2:	2200      	movs	r2, #0
 8010be4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010bee:	b25b      	sxtb	r3, r3
 8010bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bf4:	d103      	bne.n	8010bfe <xQueueGenericSend+0x17a>
 8010bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bf8:	2200      	movs	r2, #0
 8010bfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010bfe:	f001 fff3 	bl	8012be8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010c02:	1d3a      	adds	r2, r7, #4
 8010c04:	f107 0314 	add.w	r3, r7, #20
 8010c08:	4611      	mov	r1, r2
 8010c0a:	4618      	mov	r0, r3
 8010c0c:	f001 f950 	bl	8011eb0 <xTaskCheckForTimeOut>
 8010c10:	4603      	mov	r3, r0
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d124      	bne.n	8010c60 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010c16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010c18:	f000 fcbd 	bl	8011596 <prvIsQueueFull>
 8010c1c:	4603      	mov	r3, r0
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d018      	beq.n	8010c54 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c24:	3310      	adds	r3, #16
 8010c26:	687a      	ldr	r2, [r7, #4]
 8010c28:	4611      	mov	r1, r2
 8010c2a:	4618      	mov	r0, r3
 8010c2c:	f001 f8a4 	bl	8011d78 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010c30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010c32:	f000 fc48 	bl	80114c6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010c36:	f000 feed 	bl	8011a14 <xTaskResumeAll>
 8010c3a:	4603      	mov	r3, r0
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	f47f af7c 	bne.w	8010b3a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8010c42:	4b0c      	ldr	r3, [pc, #48]	; (8010c74 <xQueueGenericSend+0x1f0>)
 8010c44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010c48:	601a      	str	r2, [r3, #0]
 8010c4a:	f3bf 8f4f 	dsb	sy
 8010c4e:	f3bf 8f6f 	isb	sy
 8010c52:	e772      	b.n	8010b3a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010c54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010c56:	f000 fc36 	bl	80114c6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010c5a:	f000 fedb 	bl	8011a14 <xTaskResumeAll>
 8010c5e:	e76c      	b.n	8010b3a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010c60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010c62:	f000 fc30 	bl	80114c6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010c66:	f000 fed5 	bl	8011a14 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8010c6a:	2300      	movs	r3, #0
		}
	}
}
 8010c6c:	4618      	mov	r0, r3
 8010c6e:	3738      	adds	r7, #56	; 0x38
 8010c70:	46bd      	mov	sp, r7
 8010c72:	bd80      	pop	{r7, pc}
 8010c74:	e000ed04 	.word	0xe000ed04

08010c78 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8010c78:	b580      	push	{r7, lr}
 8010c7a:	b08e      	sub	sp, #56	; 0x38
 8010c7c:	af00      	add	r7, sp, #0
 8010c7e:	60f8      	str	r0, [r7, #12]
 8010c80:	60b9      	str	r1, [r7, #8]
 8010c82:	607a      	str	r2, [r7, #4]
 8010c84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8010c86:	68fb      	ldr	r3, [r7, #12]
 8010c88:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d109      	bne.n	8010ca4 <xQueueGenericSendFromISR+0x2c>
 8010c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c94:	f383 8811 	msr	BASEPRI, r3
 8010c98:	f3bf 8f6f 	isb	sy
 8010c9c:	f3bf 8f4f 	dsb	sy
 8010ca0:	627b      	str	r3, [r7, #36]	; 0x24
 8010ca2:	e7fe      	b.n	8010ca2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010ca4:	68bb      	ldr	r3, [r7, #8]
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d103      	bne.n	8010cb2 <xQueueGenericSendFromISR+0x3a>
 8010caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d101      	bne.n	8010cb6 <xQueueGenericSendFromISR+0x3e>
 8010cb2:	2301      	movs	r3, #1
 8010cb4:	e000      	b.n	8010cb8 <xQueueGenericSendFromISR+0x40>
 8010cb6:	2300      	movs	r3, #0
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d109      	bne.n	8010cd0 <xQueueGenericSendFromISR+0x58>
 8010cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cc0:	f383 8811 	msr	BASEPRI, r3
 8010cc4:	f3bf 8f6f 	isb	sy
 8010cc8:	f3bf 8f4f 	dsb	sy
 8010ccc:	623b      	str	r3, [r7, #32]
 8010cce:	e7fe      	b.n	8010cce <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010cd0:	683b      	ldr	r3, [r7, #0]
 8010cd2:	2b02      	cmp	r3, #2
 8010cd4:	d103      	bne.n	8010cde <xQueueGenericSendFromISR+0x66>
 8010cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010cda:	2b01      	cmp	r3, #1
 8010cdc:	d101      	bne.n	8010ce2 <xQueueGenericSendFromISR+0x6a>
 8010cde:	2301      	movs	r3, #1
 8010ce0:	e000      	b.n	8010ce4 <xQueueGenericSendFromISR+0x6c>
 8010ce2:	2300      	movs	r3, #0
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d109      	bne.n	8010cfc <xQueueGenericSendFromISR+0x84>
 8010ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cec:	f383 8811 	msr	BASEPRI, r3
 8010cf0:	f3bf 8f6f 	isb	sy
 8010cf4:	f3bf 8f4f 	dsb	sy
 8010cf8:	61fb      	str	r3, [r7, #28]
 8010cfa:	e7fe      	b.n	8010cfa <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010cfc:	f002 f822 	bl	8012d44 <vPortValidateInterruptPriority>
	__asm volatile
 8010d00:	f3ef 8211 	mrs	r2, BASEPRI
 8010d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d08:	f383 8811 	msr	BASEPRI, r3
 8010d0c:	f3bf 8f6f 	isb	sy
 8010d10:	f3bf 8f4f 	dsb	sy
 8010d14:	61ba      	str	r2, [r7, #24]
 8010d16:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8010d18:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010d24:	429a      	cmp	r2, r3
 8010d26:	d302      	bcc.n	8010d2e <xQueueGenericSendFromISR+0xb6>
 8010d28:	683b      	ldr	r3, [r7, #0]
 8010d2a:	2b02      	cmp	r3, #2
 8010d2c:	d12c      	bne.n	8010d88 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010d34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010d38:	683a      	ldr	r2, [r7, #0]
 8010d3a:	68b9      	ldr	r1, [r7, #8]
 8010d3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010d3e:	f000 fb32 	bl	80113a6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010d42:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8010d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d4a:	d112      	bne.n	8010d72 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d016      	beq.n	8010d82 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d56:	3324      	adds	r3, #36	; 0x24
 8010d58:	4618      	mov	r0, r3
 8010d5a:	f001 f831 	bl	8011dc0 <xTaskRemoveFromEventList>
 8010d5e:	4603      	mov	r3, r0
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d00e      	beq.n	8010d82 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d00b      	beq.n	8010d82 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	2201      	movs	r2, #1
 8010d6e:	601a      	str	r2, [r3, #0]
 8010d70:	e007      	b.n	8010d82 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010d72:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010d76:	3301      	adds	r3, #1
 8010d78:	b2db      	uxtb	r3, r3
 8010d7a:	b25a      	sxtb	r2, r3
 8010d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010d82:	2301      	movs	r3, #1
 8010d84:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8010d86:	e001      	b.n	8010d8c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010d88:	2300      	movs	r3, #0
 8010d8a:	637b      	str	r3, [r7, #52]	; 0x34
 8010d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d8e:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010d90:	693b      	ldr	r3, [r7, #16]
 8010d92:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010d98:	4618      	mov	r0, r3
 8010d9a:	3738      	adds	r7, #56	; 0x38
 8010d9c:	46bd      	mov	sp, r7
 8010d9e:	bd80      	pop	{r7, pc}

08010da0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010da0:	b580      	push	{r7, lr}
 8010da2:	b08e      	sub	sp, #56	; 0x38
 8010da4:	af00      	add	r7, sp, #0
 8010da6:	6078      	str	r0, [r7, #4]
 8010da8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8010dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	d109      	bne.n	8010dc8 <xQueueGiveFromISR+0x28>
	__asm volatile
 8010db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010db8:	f383 8811 	msr	BASEPRI, r3
 8010dbc:	f3bf 8f6f 	isb	sy
 8010dc0:	f3bf 8f4f 	dsb	sy
 8010dc4:	623b      	str	r3, [r7, #32]
 8010dc6:	e7fe      	b.n	8010dc6 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d009      	beq.n	8010de4 <xQueueGiveFromISR+0x44>
 8010dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dd4:	f383 8811 	msr	BASEPRI, r3
 8010dd8:	f3bf 8f6f 	isb	sy
 8010ddc:	f3bf 8f4f 	dsb	sy
 8010de0:	61fb      	str	r3, [r7, #28]
 8010de2:	e7fe      	b.n	8010de2 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8010de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010de6:	681b      	ldr	r3, [r3, #0]
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d103      	bne.n	8010df4 <xQueueGiveFromISR+0x54>
 8010dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dee:	685b      	ldr	r3, [r3, #4]
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d101      	bne.n	8010df8 <xQueueGiveFromISR+0x58>
 8010df4:	2301      	movs	r3, #1
 8010df6:	e000      	b.n	8010dfa <xQueueGiveFromISR+0x5a>
 8010df8:	2300      	movs	r3, #0
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d109      	bne.n	8010e12 <xQueueGiveFromISR+0x72>
 8010dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e02:	f383 8811 	msr	BASEPRI, r3
 8010e06:	f3bf 8f6f 	isb	sy
 8010e0a:	f3bf 8f4f 	dsb	sy
 8010e0e:	61bb      	str	r3, [r7, #24]
 8010e10:	e7fe      	b.n	8010e10 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010e12:	f001 ff97 	bl	8012d44 <vPortValidateInterruptPriority>
	__asm volatile
 8010e16:	f3ef 8211 	mrs	r2, BASEPRI
 8010e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e1e:	f383 8811 	msr	BASEPRI, r3
 8010e22:	f3bf 8f6f 	isb	sy
 8010e26:	f3bf 8f4f 	dsb	sy
 8010e2a:	617a      	str	r2, [r7, #20]
 8010e2c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8010e2e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010e30:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e36:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8010e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010e3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010e3e:	429a      	cmp	r2, r3
 8010e40:	d22b      	bcs.n	8010e9a <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010e48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e4e:	1c5a      	adds	r2, r3, #1
 8010e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e52:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010e54:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e5c:	d112      	bne.n	8010e84 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	d016      	beq.n	8010e94 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e68:	3324      	adds	r3, #36	; 0x24
 8010e6a:	4618      	mov	r0, r3
 8010e6c:	f000 ffa8 	bl	8011dc0 <xTaskRemoveFromEventList>
 8010e70:	4603      	mov	r3, r0
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d00e      	beq.n	8010e94 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010e76:	683b      	ldr	r3, [r7, #0]
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d00b      	beq.n	8010e94 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010e7c:	683b      	ldr	r3, [r7, #0]
 8010e7e:	2201      	movs	r2, #1
 8010e80:	601a      	str	r2, [r3, #0]
 8010e82:	e007      	b.n	8010e94 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010e84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010e88:	3301      	adds	r3, #1
 8010e8a:	b2db      	uxtb	r3, r3
 8010e8c:	b25a      	sxtb	r2, r3
 8010e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010e94:	2301      	movs	r3, #1
 8010e96:	637b      	str	r3, [r7, #52]	; 0x34
 8010e98:	e001      	b.n	8010e9e <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010e9a:	2300      	movs	r3, #0
 8010e9c:	637b      	str	r3, [r7, #52]	; 0x34
 8010e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ea0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8010ea2:	68fb      	ldr	r3, [r7, #12]
 8010ea4:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010eaa:	4618      	mov	r0, r3
 8010eac:	3738      	adds	r7, #56	; 0x38
 8010eae:	46bd      	mov	sp, r7
 8010eb0:	bd80      	pop	{r7, pc}
	...

08010eb4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010eb4:	b580      	push	{r7, lr}
 8010eb6:	b08c      	sub	sp, #48	; 0x30
 8010eb8:	af00      	add	r7, sp, #0
 8010eba:	60f8      	str	r0, [r7, #12]
 8010ebc:	60b9      	str	r1, [r7, #8]
 8010ebe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010ec0:	2300      	movs	r3, #0
 8010ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8010ec4:	68fb      	ldr	r3, [r7, #12]
 8010ec6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d109      	bne.n	8010ee2 <xQueueReceive+0x2e>
	__asm volatile
 8010ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ed2:	f383 8811 	msr	BASEPRI, r3
 8010ed6:	f3bf 8f6f 	isb	sy
 8010eda:	f3bf 8f4f 	dsb	sy
 8010ede:	623b      	str	r3, [r7, #32]
 8010ee0:	e7fe      	b.n	8010ee0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010ee2:	68bb      	ldr	r3, [r7, #8]
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d103      	bne.n	8010ef0 <xQueueReceive+0x3c>
 8010ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d101      	bne.n	8010ef4 <xQueueReceive+0x40>
 8010ef0:	2301      	movs	r3, #1
 8010ef2:	e000      	b.n	8010ef6 <xQueueReceive+0x42>
 8010ef4:	2300      	movs	r3, #0
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d109      	bne.n	8010f0e <xQueueReceive+0x5a>
 8010efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010efe:	f383 8811 	msr	BASEPRI, r3
 8010f02:	f3bf 8f6f 	isb	sy
 8010f06:	f3bf 8f4f 	dsb	sy
 8010f0a:	61fb      	str	r3, [r7, #28]
 8010f0c:	e7fe      	b.n	8010f0c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010f0e:	f001 f913 	bl	8012138 <xTaskGetSchedulerState>
 8010f12:	4603      	mov	r3, r0
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d102      	bne.n	8010f1e <xQueueReceive+0x6a>
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d101      	bne.n	8010f22 <xQueueReceive+0x6e>
 8010f1e:	2301      	movs	r3, #1
 8010f20:	e000      	b.n	8010f24 <xQueueReceive+0x70>
 8010f22:	2300      	movs	r3, #0
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d109      	bne.n	8010f3c <xQueueReceive+0x88>
 8010f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f2c:	f383 8811 	msr	BASEPRI, r3
 8010f30:	f3bf 8f6f 	isb	sy
 8010f34:	f3bf 8f4f 	dsb	sy
 8010f38:	61bb      	str	r3, [r7, #24]
 8010f3a:	e7fe      	b.n	8010f3a <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8010f3c:	f001 fe26 	bl	8012b8c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f44:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d01f      	beq.n	8010f8c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010f4c:	68b9      	ldr	r1, [r7, #8]
 8010f4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010f50:	f000 fa93 	bl	801147a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f56:	1e5a      	subs	r2, r3, #1
 8010f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f5a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f5e:	691b      	ldr	r3, [r3, #16]
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d00f      	beq.n	8010f84 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f66:	3310      	adds	r3, #16
 8010f68:	4618      	mov	r0, r3
 8010f6a:	f000 ff29 	bl	8011dc0 <xTaskRemoveFromEventList>
 8010f6e:	4603      	mov	r3, r0
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d007      	beq.n	8010f84 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010f74:	4b3c      	ldr	r3, [pc, #240]	; (8011068 <xQueueReceive+0x1b4>)
 8010f76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010f7a:	601a      	str	r2, [r3, #0]
 8010f7c:	f3bf 8f4f 	dsb	sy
 8010f80:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010f84:	f001 fe30 	bl	8012be8 <vPortExitCritical>
				return pdPASS;
 8010f88:	2301      	movs	r3, #1
 8010f8a:	e069      	b.n	8011060 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d103      	bne.n	8010f9a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010f92:	f001 fe29 	bl	8012be8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010f96:	2300      	movs	r3, #0
 8010f98:	e062      	b.n	8011060 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d106      	bne.n	8010fae <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010fa0:	f107 0310 	add.w	r3, r7, #16
 8010fa4:	4618      	mov	r0, r3
 8010fa6:	f000 ff6d 	bl	8011e84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010faa:	2301      	movs	r3, #1
 8010fac:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010fae:	f001 fe1b 	bl	8012be8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010fb2:	f000 fd21 	bl	80119f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010fb6:	f001 fde9 	bl	8012b8c <vPortEnterCritical>
 8010fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fbc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010fc0:	b25b      	sxtb	r3, r3
 8010fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010fc6:	d103      	bne.n	8010fd0 <xQueueReceive+0x11c>
 8010fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fca:	2200      	movs	r2, #0
 8010fcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010fd6:	b25b      	sxtb	r3, r3
 8010fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010fdc:	d103      	bne.n	8010fe6 <xQueueReceive+0x132>
 8010fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fe0:	2200      	movs	r2, #0
 8010fe2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010fe6:	f001 fdff 	bl	8012be8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010fea:	1d3a      	adds	r2, r7, #4
 8010fec:	f107 0310 	add.w	r3, r7, #16
 8010ff0:	4611      	mov	r1, r2
 8010ff2:	4618      	mov	r0, r3
 8010ff4:	f000 ff5c 	bl	8011eb0 <xTaskCheckForTimeOut>
 8010ff8:	4603      	mov	r3, r0
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	d123      	bne.n	8011046 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010ffe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011000:	f000 fab3 	bl	801156a <prvIsQueueEmpty>
 8011004:	4603      	mov	r3, r0
 8011006:	2b00      	cmp	r3, #0
 8011008:	d017      	beq.n	801103a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801100a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801100c:	3324      	adds	r3, #36	; 0x24
 801100e:	687a      	ldr	r2, [r7, #4]
 8011010:	4611      	mov	r1, r2
 8011012:	4618      	mov	r0, r3
 8011014:	f000 feb0 	bl	8011d78 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011018:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801101a:	f000 fa54 	bl	80114c6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801101e:	f000 fcf9 	bl	8011a14 <xTaskResumeAll>
 8011022:	4603      	mov	r3, r0
 8011024:	2b00      	cmp	r3, #0
 8011026:	d189      	bne.n	8010f3c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8011028:	4b0f      	ldr	r3, [pc, #60]	; (8011068 <xQueueReceive+0x1b4>)
 801102a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801102e:	601a      	str	r2, [r3, #0]
 8011030:	f3bf 8f4f 	dsb	sy
 8011034:	f3bf 8f6f 	isb	sy
 8011038:	e780      	b.n	8010f3c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801103a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801103c:	f000 fa43 	bl	80114c6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011040:	f000 fce8 	bl	8011a14 <xTaskResumeAll>
 8011044:	e77a      	b.n	8010f3c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8011046:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011048:	f000 fa3d 	bl	80114c6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801104c:	f000 fce2 	bl	8011a14 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011050:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011052:	f000 fa8a 	bl	801156a <prvIsQueueEmpty>
 8011056:	4603      	mov	r3, r0
 8011058:	2b00      	cmp	r3, #0
 801105a:	f43f af6f 	beq.w	8010f3c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801105e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8011060:	4618      	mov	r0, r3
 8011062:	3730      	adds	r7, #48	; 0x30
 8011064:	46bd      	mov	sp, r7
 8011066:	bd80      	pop	{r7, pc}
 8011068:	e000ed04 	.word	0xe000ed04

0801106c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 801106c:	b580      	push	{r7, lr}
 801106e:	b08e      	sub	sp, #56	; 0x38
 8011070:	af00      	add	r7, sp, #0
 8011072:	6078      	str	r0, [r7, #4]
 8011074:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8011076:	2300      	movs	r3, #0
 8011078:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801107e:	2300      	movs	r3, #0
 8011080:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011084:	2b00      	cmp	r3, #0
 8011086:	d109      	bne.n	801109c <xQueueSemaphoreTake+0x30>
 8011088:	f04f 0350 	mov.w	r3, #80	; 0x50
 801108c:	f383 8811 	msr	BASEPRI, r3
 8011090:	f3bf 8f6f 	isb	sy
 8011094:	f3bf 8f4f 	dsb	sy
 8011098:	623b      	str	r3, [r7, #32]
 801109a:	e7fe      	b.n	801109a <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801109c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801109e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d009      	beq.n	80110b8 <xQueueSemaphoreTake+0x4c>
 80110a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110a8:	f383 8811 	msr	BASEPRI, r3
 80110ac:	f3bf 8f6f 	isb	sy
 80110b0:	f3bf 8f4f 	dsb	sy
 80110b4:	61fb      	str	r3, [r7, #28]
 80110b6:	e7fe      	b.n	80110b6 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80110b8:	f001 f83e 	bl	8012138 <xTaskGetSchedulerState>
 80110bc:	4603      	mov	r3, r0
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d102      	bne.n	80110c8 <xQueueSemaphoreTake+0x5c>
 80110c2:	683b      	ldr	r3, [r7, #0]
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d101      	bne.n	80110cc <xQueueSemaphoreTake+0x60>
 80110c8:	2301      	movs	r3, #1
 80110ca:	e000      	b.n	80110ce <xQueueSemaphoreTake+0x62>
 80110cc:	2300      	movs	r3, #0
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d109      	bne.n	80110e6 <xQueueSemaphoreTake+0x7a>
 80110d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110d6:	f383 8811 	msr	BASEPRI, r3
 80110da:	f3bf 8f6f 	isb	sy
 80110de:	f3bf 8f4f 	dsb	sy
 80110e2:	61bb      	str	r3, [r7, #24]
 80110e4:	e7fe      	b.n	80110e4 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80110e6:	f001 fd51 	bl	8012b8c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80110ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80110ee:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80110f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d024      	beq.n	8011140 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80110f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110f8:	1e5a      	subs	r2, r3, #1
 80110fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110fc:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80110fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011100:	681b      	ldr	r3, [r3, #0]
 8011102:	2b00      	cmp	r3, #0
 8011104:	d104      	bne.n	8011110 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8011106:	f001 f9dd 	bl	80124c4 <pvTaskIncrementMutexHeldCount>
 801110a:	4602      	mov	r2, r0
 801110c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801110e:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011112:	691b      	ldr	r3, [r3, #16]
 8011114:	2b00      	cmp	r3, #0
 8011116:	d00f      	beq.n	8011138 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801111a:	3310      	adds	r3, #16
 801111c:	4618      	mov	r0, r3
 801111e:	f000 fe4f 	bl	8011dc0 <xTaskRemoveFromEventList>
 8011122:	4603      	mov	r3, r0
 8011124:	2b00      	cmp	r3, #0
 8011126:	d007      	beq.n	8011138 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011128:	4b53      	ldr	r3, [pc, #332]	; (8011278 <xQueueSemaphoreTake+0x20c>)
 801112a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801112e:	601a      	str	r2, [r3, #0]
 8011130:	f3bf 8f4f 	dsb	sy
 8011134:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011138:	f001 fd56 	bl	8012be8 <vPortExitCritical>
				return pdPASS;
 801113c:	2301      	movs	r3, #1
 801113e:	e096      	b.n	801126e <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011140:	683b      	ldr	r3, [r7, #0]
 8011142:	2b00      	cmp	r3, #0
 8011144:	d110      	bne.n	8011168 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8011146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011148:	2b00      	cmp	r3, #0
 801114a:	d009      	beq.n	8011160 <xQueueSemaphoreTake+0xf4>
 801114c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011150:	f383 8811 	msr	BASEPRI, r3
 8011154:	f3bf 8f6f 	isb	sy
 8011158:	f3bf 8f4f 	dsb	sy
 801115c:	617b      	str	r3, [r7, #20]
 801115e:	e7fe      	b.n	801115e <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8011160:	f001 fd42 	bl	8012be8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011164:	2300      	movs	r3, #0
 8011166:	e082      	b.n	801126e <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801116a:	2b00      	cmp	r3, #0
 801116c:	d106      	bne.n	801117c <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801116e:	f107 030c 	add.w	r3, r7, #12
 8011172:	4618      	mov	r0, r3
 8011174:	f000 fe86 	bl	8011e84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011178:	2301      	movs	r3, #1
 801117a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801117c:	f001 fd34 	bl	8012be8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011180:	f000 fc3a 	bl	80119f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011184:	f001 fd02 	bl	8012b8c <vPortEnterCritical>
 8011188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801118a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801118e:	b25b      	sxtb	r3, r3
 8011190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011194:	d103      	bne.n	801119e <xQueueSemaphoreTake+0x132>
 8011196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011198:	2200      	movs	r2, #0
 801119a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801119e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80111a4:	b25b      	sxtb	r3, r3
 80111a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111aa:	d103      	bne.n	80111b4 <xQueueSemaphoreTake+0x148>
 80111ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111ae:	2200      	movs	r2, #0
 80111b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80111b4:	f001 fd18 	bl	8012be8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80111b8:	463a      	mov	r2, r7
 80111ba:	f107 030c 	add.w	r3, r7, #12
 80111be:	4611      	mov	r1, r2
 80111c0:	4618      	mov	r0, r3
 80111c2:	f000 fe75 	bl	8011eb0 <xTaskCheckForTimeOut>
 80111c6:	4603      	mov	r3, r0
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d132      	bne.n	8011232 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80111cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80111ce:	f000 f9cc 	bl	801156a <prvIsQueueEmpty>
 80111d2:	4603      	mov	r3, r0
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d026      	beq.n	8011226 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80111d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111da:	681b      	ldr	r3, [r3, #0]
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d109      	bne.n	80111f4 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 80111e0:	f001 fcd4 	bl	8012b8c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80111e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111e6:	685b      	ldr	r3, [r3, #4]
 80111e8:	4618      	mov	r0, r3
 80111ea:	f000 ffc3 	bl	8012174 <xTaskPriorityInherit>
 80111ee:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80111f0:	f001 fcfa 	bl	8012be8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80111f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111f6:	3324      	adds	r3, #36	; 0x24
 80111f8:	683a      	ldr	r2, [r7, #0]
 80111fa:	4611      	mov	r1, r2
 80111fc:	4618      	mov	r0, r3
 80111fe:	f000 fdbb 	bl	8011d78 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011202:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011204:	f000 f95f 	bl	80114c6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011208:	f000 fc04 	bl	8011a14 <xTaskResumeAll>
 801120c:	4603      	mov	r3, r0
 801120e:	2b00      	cmp	r3, #0
 8011210:	f47f af69 	bne.w	80110e6 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8011214:	4b18      	ldr	r3, [pc, #96]	; (8011278 <xQueueSemaphoreTake+0x20c>)
 8011216:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801121a:	601a      	str	r2, [r3, #0]
 801121c:	f3bf 8f4f 	dsb	sy
 8011220:	f3bf 8f6f 	isb	sy
 8011224:	e75f      	b.n	80110e6 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8011226:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011228:	f000 f94d 	bl	80114c6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801122c:	f000 fbf2 	bl	8011a14 <xTaskResumeAll>
 8011230:	e759      	b.n	80110e6 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8011232:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011234:	f000 f947 	bl	80114c6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011238:	f000 fbec 	bl	8011a14 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801123c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801123e:	f000 f994 	bl	801156a <prvIsQueueEmpty>
 8011242:	4603      	mov	r3, r0
 8011244:	2b00      	cmp	r3, #0
 8011246:	f43f af4e 	beq.w	80110e6 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801124a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801124c:	2b00      	cmp	r3, #0
 801124e:	d00d      	beq.n	801126c <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8011250:	f001 fc9c 	bl	8012b8c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8011254:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011256:	f000 f88e 	bl	8011376 <prvGetDisinheritPriorityAfterTimeout>
 801125a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 801125c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801125e:	685b      	ldr	r3, [r3, #4]
 8011260:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011262:	4618      	mov	r0, r3
 8011264:	f001 f890 	bl	8012388 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8011268:	f001 fcbe 	bl	8012be8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801126c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 801126e:	4618      	mov	r0, r3
 8011270:	3738      	adds	r7, #56	; 0x38
 8011272:	46bd      	mov	sp, r7
 8011274:	bd80      	pop	{r7, pc}
 8011276:	bf00      	nop
 8011278:	e000ed04 	.word	0xe000ed04

0801127c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801127c:	b580      	push	{r7, lr}
 801127e:	b08e      	sub	sp, #56	; 0x38
 8011280:	af00      	add	r7, sp, #0
 8011282:	60f8      	str	r0, [r7, #12]
 8011284:	60b9      	str	r1, [r7, #8]
 8011286:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8011288:	68fb      	ldr	r3, [r7, #12]
 801128a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801128c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801128e:	2b00      	cmp	r3, #0
 8011290:	d109      	bne.n	80112a6 <xQueueReceiveFromISR+0x2a>
 8011292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011296:	f383 8811 	msr	BASEPRI, r3
 801129a:	f3bf 8f6f 	isb	sy
 801129e:	f3bf 8f4f 	dsb	sy
 80112a2:	623b      	str	r3, [r7, #32]
 80112a4:	e7fe      	b.n	80112a4 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80112a6:	68bb      	ldr	r3, [r7, #8]
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d103      	bne.n	80112b4 <xQueueReceiveFromISR+0x38>
 80112ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d101      	bne.n	80112b8 <xQueueReceiveFromISR+0x3c>
 80112b4:	2301      	movs	r3, #1
 80112b6:	e000      	b.n	80112ba <xQueueReceiveFromISR+0x3e>
 80112b8:	2300      	movs	r3, #0
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d109      	bne.n	80112d2 <xQueueReceiveFromISR+0x56>
 80112be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112c2:	f383 8811 	msr	BASEPRI, r3
 80112c6:	f3bf 8f6f 	isb	sy
 80112ca:	f3bf 8f4f 	dsb	sy
 80112ce:	61fb      	str	r3, [r7, #28]
 80112d0:	e7fe      	b.n	80112d0 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80112d2:	f001 fd37 	bl	8012d44 <vPortValidateInterruptPriority>
	__asm volatile
 80112d6:	f3ef 8211 	mrs	r2, BASEPRI
 80112da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112de:	f383 8811 	msr	BASEPRI, r3
 80112e2:	f3bf 8f6f 	isb	sy
 80112e6:	f3bf 8f4f 	dsb	sy
 80112ea:	61ba      	str	r2, [r7, #24]
 80112ec:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80112ee:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80112f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80112f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80112f6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80112f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d02f      	beq.n	801135e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80112fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011300:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011304:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011308:	68b9      	ldr	r1, [r7, #8]
 801130a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801130c:	f000 f8b5 	bl	801147a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011312:	1e5a      	subs	r2, r3, #1
 8011314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011316:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8011318:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801131c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011320:	d112      	bne.n	8011348 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011324:	691b      	ldr	r3, [r3, #16]
 8011326:	2b00      	cmp	r3, #0
 8011328:	d016      	beq.n	8011358 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801132a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801132c:	3310      	adds	r3, #16
 801132e:	4618      	mov	r0, r3
 8011330:	f000 fd46 	bl	8011dc0 <xTaskRemoveFromEventList>
 8011334:	4603      	mov	r3, r0
 8011336:	2b00      	cmp	r3, #0
 8011338:	d00e      	beq.n	8011358 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	2b00      	cmp	r3, #0
 801133e:	d00b      	beq.n	8011358 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	2201      	movs	r2, #1
 8011344:	601a      	str	r2, [r3, #0]
 8011346:	e007      	b.n	8011358 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8011348:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801134c:	3301      	adds	r3, #1
 801134e:	b2db      	uxtb	r3, r3
 8011350:	b25a      	sxtb	r2, r3
 8011352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011354:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8011358:	2301      	movs	r3, #1
 801135a:	637b      	str	r3, [r7, #52]	; 0x34
 801135c:	e001      	b.n	8011362 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 801135e:	2300      	movs	r3, #0
 8011360:	637b      	str	r3, [r7, #52]	; 0x34
 8011362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011364:	613b      	str	r3, [r7, #16]
	__asm volatile
 8011366:	693b      	ldr	r3, [r7, #16]
 8011368:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801136c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801136e:	4618      	mov	r0, r3
 8011370:	3738      	adds	r7, #56	; 0x38
 8011372:	46bd      	mov	sp, r7
 8011374:	bd80      	pop	{r7, pc}

08011376 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8011376:	b480      	push	{r7}
 8011378:	b085      	sub	sp, #20
 801137a:	af00      	add	r7, sp, #0
 801137c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011382:	2b00      	cmp	r3, #0
 8011384:	d006      	beq.n	8011394 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	f1c3 0307 	rsb	r3, r3, #7
 8011390:	60fb      	str	r3, [r7, #12]
 8011392:	e001      	b.n	8011398 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8011394:	2300      	movs	r3, #0
 8011396:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8011398:	68fb      	ldr	r3, [r7, #12]
	}
 801139a:	4618      	mov	r0, r3
 801139c:	3714      	adds	r7, #20
 801139e:	46bd      	mov	sp, r7
 80113a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113a4:	4770      	bx	lr

080113a6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80113a6:	b580      	push	{r7, lr}
 80113a8:	b086      	sub	sp, #24
 80113aa:	af00      	add	r7, sp, #0
 80113ac:	60f8      	str	r0, [r7, #12]
 80113ae:	60b9      	str	r1, [r7, #8]
 80113b0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80113b2:	2300      	movs	r3, #0
 80113b4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80113b6:	68fb      	ldr	r3, [r7, #12]
 80113b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80113ba:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	d10d      	bne.n	80113e0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	681b      	ldr	r3, [r3, #0]
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d14d      	bne.n	8011468 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80113cc:	68fb      	ldr	r3, [r7, #12]
 80113ce:	685b      	ldr	r3, [r3, #4]
 80113d0:	4618      	mov	r0, r3
 80113d2:	f000 ff55 	bl	8012280 <xTaskPriorityDisinherit>
 80113d6:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80113d8:	68fb      	ldr	r3, [r7, #12]
 80113da:	2200      	movs	r2, #0
 80113dc:	605a      	str	r2, [r3, #4]
 80113de:	e043      	b.n	8011468 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d119      	bne.n	801141a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80113e6:	68fb      	ldr	r3, [r7, #12]
 80113e8:	6898      	ldr	r0, [r3, #8]
 80113ea:	68fb      	ldr	r3, [r7, #12]
 80113ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80113ee:	461a      	mov	r2, r3
 80113f0:	68b9      	ldr	r1, [r7, #8]
 80113f2:	f002 fc35 	bl	8013c60 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80113f6:	68fb      	ldr	r3, [r7, #12]
 80113f8:	689a      	ldr	r2, [r3, #8]
 80113fa:	68fb      	ldr	r3, [r7, #12]
 80113fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80113fe:	441a      	add	r2, r3
 8011400:	68fb      	ldr	r3, [r7, #12]
 8011402:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011404:	68fb      	ldr	r3, [r7, #12]
 8011406:	689a      	ldr	r2, [r3, #8]
 8011408:	68fb      	ldr	r3, [r7, #12]
 801140a:	685b      	ldr	r3, [r3, #4]
 801140c:	429a      	cmp	r2, r3
 801140e:	d32b      	bcc.n	8011468 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8011410:	68fb      	ldr	r3, [r7, #12]
 8011412:	681a      	ldr	r2, [r3, #0]
 8011414:	68fb      	ldr	r3, [r7, #12]
 8011416:	609a      	str	r2, [r3, #8]
 8011418:	e026      	b.n	8011468 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801141a:	68fb      	ldr	r3, [r7, #12]
 801141c:	68d8      	ldr	r0, [r3, #12]
 801141e:	68fb      	ldr	r3, [r7, #12]
 8011420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011422:	461a      	mov	r2, r3
 8011424:	68b9      	ldr	r1, [r7, #8]
 8011426:	f002 fc1b 	bl	8013c60 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 801142a:	68fb      	ldr	r3, [r7, #12]
 801142c:	68da      	ldr	r2, [r3, #12]
 801142e:	68fb      	ldr	r3, [r7, #12]
 8011430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011432:	425b      	negs	r3, r3
 8011434:	441a      	add	r2, r3
 8011436:	68fb      	ldr	r3, [r7, #12]
 8011438:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801143a:	68fb      	ldr	r3, [r7, #12]
 801143c:	68da      	ldr	r2, [r3, #12]
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	681b      	ldr	r3, [r3, #0]
 8011442:	429a      	cmp	r2, r3
 8011444:	d207      	bcs.n	8011456 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8011446:	68fb      	ldr	r3, [r7, #12]
 8011448:	685a      	ldr	r2, [r3, #4]
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801144e:	425b      	negs	r3, r3
 8011450:	441a      	add	r2, r3
 8011452:	68fb      	ldr	r3, [r7, #12]
 8011454:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	2b02      	cmp	r3, #2
 801145a:	d105      	bne.n	8011468 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801145c:	693b      	ldr	r3, [r7, #16]
 801145e:	2b00      	cmp	r3, #0
 8011460:	d002      	beq.n	8011468 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8011462:	693b      	ldr	r3, [r7, #16]
 8011464:	3b01      	subs	r3, #1
 8011466:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011468:	693b      	ldr	r3, [r7, #16]
 801146a:	1c5a      	adds	r2, r3, #1
 801146c:	68fb      	ldr	r3, [r7, #12]
 801146e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8011470:	697b      	ldr	r3, [r7, #20]
}
 8011472:	4618      	mov	r0, r3
 8011474:	3718      	adds	r7, #24
 8011476:	46bd      	mov	sp, r7
 8011478:	bd80      	pop	{r7, pc}

0801147a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801147a:	b580      	push	{r7, lr}
 801147c:	b082      	sub	sp, #8
 801147e:	af00      	add	r7, sp, #0
 8011480:	6078      	str	r0, [r7, #4]
 8011482:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011488:	2b00      	cmp	r3, #0
 801148a:	d018      	beq.n	80114be <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	68da      	ldr	r2, [r3, #12]
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011494:	441a      	add	r2, r3
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	68da      	ldr	r2, [r3, #12]
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	685b      	ldr	r3, [r3, #4]
 80114a2:	429a      	cmp	r2, r3
 80114a4:	d303      	bcc.n	80114ae <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	681a      	ldr	r2, [r3, #0]
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	68d9      	ldr	r1, [r3, #12]
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80114b6:	461a      	mov	r2, r3
 80114b8:	6838      	ldr	r0, [r7, #0]
 80114ba:	f002 fbd1 	bl	8013c60 <memcpy>
	}
}
 80114be:	bf00      	nop
 80114c0:	3708      	adds	r7, #8
 80114c2:	46bd      	mov	sp, r7
 80114c4:	bd80      	pop	{r7, pc}

080114c6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80114c6:	b580      	push	{r7, lr}
 80114c8:	b084      	sub	sp, #16
 80114ca:	af00      	add	r7, sp, #0
 80114cc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80114ce:	f001 fb5d 	bl	8012b8c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80114d8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80114da:	e011      	b.n	8011500 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d012      	beq.n	801150a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	3324      	adds	r3, #36	; 0x24
 80114e8:	4618      	mov	r0, r3
 80114ea:	f000 fc69 	bl	8011dc0 <xTaskRemoveFromEventList>
 80114ee:	4603      	mov	r3, r0
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d001      	beq.n	80114f8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80114f4:	f000 fd3c 	bl	8011f70 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80114f8:	7bfb      	ldrb	r3, [r7, #15]
 80114fa:	3b01      	subs	r3, #1
 80114fc:	b2db      	uxtb	r3, r3
 80114fe:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011500:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011504:	2b00      	cmp	r3, #0
 8011506:	dce9      	bgt.n	80114dc <prvUnlockQueue+0x16>
 8011508:	e000      	b.n	801150c <prvUnlockQueue+0x46>
					break;
 801150a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	22ff      	movs	r2, #255	; 0xff
 8011510:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8011514:	f001 fb68 	bl	8012be8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8011518:	f001 fb38 	bl	8012b8c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011522:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011524:	e011      	b.n	801154a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	691b      	ldr	r3, [r3, #16]
 801152a:	2b00      	cmp	r3, #0
 801152c:	d012      	beq.n	8011554 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	3310      	adds	r3, #16
 8011532:	4618      	mov	r0, r3
 8011534:	f000 fc44 	bl	8011dc0 <xTaskRemoveFromEventList>
 8011538:	4603      	mov	r3, r0
 801153a:	2b00      	cmp	r3, #0
 801153c:	d001      	beq.n	8011542 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801153e:	f000 fd17 	bl	8011f70 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8011542:	7bbb      	ldrb	r3, [r7, #14]
 8011544:	3b01      	subs	r3, #1
 8011546:	b2db      	uxtb	r3, r3
 8011548:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801154a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801154e:	2b00      	cmp	r3, #0
 8011550:	dce9      	bgt.n	8011526 <prvUnlockQueue+0x60>
 8011552:	e000      	b.n	8011556 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8011554:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	22ff      	movs	r2, #255	; 0xff
 801155a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801155e:	f001 fb43 	bl	8012be8 <vPortExitCritical>
}
 8011562:	bf00      	nop
 8011564:	3710      	adds	r7, #16
 8011566:	46bd      	mov	sp, r7
 8011568:	bd80      	pop	{r7, pc}

0801156a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801156a:	b580      	push	{r7, lr}
 801156c:	b084      	sub	sp, #16
 801156e:	af00      	add	r7, sp, #0
 8011570:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011572:	f001 fb0b 	bl	8012b8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801157a:	2b00      	cmp	r3, #0
 801157c:	d102      	bne.n	8011584 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801157e:	2301      	movs	r3, #1
 8011580:	60fb      	str	r3, [r7, #12]
 8011582:	e001      	b.n	8011588 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8011584:	2300      	movs	r3, #0
 8011586:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011588:	f001 fb2e 	bl	8012be8 <vPortExitCritical>

	return xReturn;
 801158c:	68fb      	ldr	r3, [r7, #12]
}
 801158e:	4618      	mov	r0, r3
 8011590:	3710      	adds	r7, #16
 8011592:	46bd      	mov	sp, r7
 8011594:	bd80      	pop	{r7, pc}

08011596 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8011596:	b580      	push	{r7, lr}
 8011598:	b084      	sub	sp, #16
 801159a:	af00      	add	r7, sp, #0
 801159c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801159e:	f001 faf5 	bl	8012b8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80115aa:	429a      	cmp	r2, r3
 80115ac:	d102      	bne.n	80115b4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80115ae:	2301      	movs	r3, #1
 80115b0:	60fb      	str	r3, [r7, #12]
 80115b2:	e001      	b.n	80115b8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80115b4:	2300      	movs	r3, #0
 80115b6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80115b8:	f001 fb16 	bl	8012be8 <vPortExitCritical>

	return xReturn;
 80115bc:	68fb      	ldr	r3, [r7, #12]
}
 80115be:	4618      	mov	r0, r3
 80115c0:	3710      	adds	r7, #16
 80115c2:	46bd      	mov	sp, r7
 80115c4:	bd80      	pop	{r7, pc}

080115c6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80115c6:	b580      	push	{r7, lr}
 80115c8:	b08e      	sub	sp, #56	; 0x38
 80115ca:	af04      	add	r7, sp, #16
 80115cc:	60f8      	str	r0, [r7, #12]
 80115ce:	60b9      	str	r1, [r7, #8]
 80115d0:	607a      	str	r2, [r7, #4]
 80115d2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80115d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d109      	bne.n	80115ee <xTaskCreateStatic+0x28>
	__asm volatile
 80115da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115de:	f383 8811 	msr	BASEPRI, r3
 80115e2:	f3bf 8f6f 	isb	sy
 80115e6:	f3bf 8f4f 	dsb	sy
 80115ea:	623b      	str	r3, [r7, #32]
 80115ec:	e7fe      	b.n	80115ec <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80115ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	d109      	bne.n	8011608 <xTaskCreateStatic+0x42>
 80115f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115f8:	f383 8811 	msr	BASEPRI, r3
 80115fc:	f3bf 8f6f 	isb	sy
 8011600:	f3bf 8f4f 	dsb	sy
 8011604:	61fb      	str	r3, [r7, #28]
 8011606:	e7fe      	b.n	8011606 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8011608:	2354      	movs	r3, #84	; 0x54
 801160a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801160c:	693b      	ldr	r3, [r7, #16]
 801160e:	2b54      	cmp	r3, #84	; 0x54
 8011610:	d009      	beq.n	8011626 <xTaskCreateStatic+0x60>
 8011612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011616:	f383 8811 	msr	BASEPRI, r3
 801161a:	f3bf 8f6f 	isb	sy
 801161e:	f3bf 8f4f 	dsb	sy
 8011622:	61bb      	str	r3, [r7, #24]
 8011624:	e7fe      	b.n	8011624 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8011626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011628:	2b00      	cmp	r3, #0
 801162a:	d01e      	beq.n	801166a <xTaskCreateStatic+0xa4>
 801162c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801162e:	2b00      	cmp	r3, #0
 8011630:	d01b      	beq.n	801166a <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011634:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8011636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011638:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801163a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801163c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801163e:	2202      	movs	r2, #2
 8011640:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8011644:	2300      	movs	r3, #0
 8011646:	9303      	str	r3, [sp, #12]
 8011648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801164a:	9302      	str	r3, [sp, #8]
 801164c:	f107 0314 	add.w	r3, r7, #20
 8011650:	9301      	str	r3, [sp, #4]
 8011652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011654:	9300      	str	r3, [sp, #0]
 8011656:	683b      	ldr	r3, [r7, #0]
 8011658:	687a      	ldr	r2, [r7, #4]
 801165a:	68b9      	ldr	r1, [r7, #8]
 801165c:	68f8      	ldr	r0, [r7, #12]
 801165e:	f000 f850 	bl	8011702 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011662:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011664:	f000 f8cc 	bl	8011800 <prvAddNewTaskToReadyList>
 8011668:	e001      	b.n	801166e <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 801166a:	2300      	movs	r3, #0
 801166c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801166e:	697b      	ldr	r3, [r7, #20]
	}
 8011670:	4618      	mov	r0, r3
 8011672:	3728      	adds	r7, #40	; 0x28
 8011674:	46bd      	mov	sp, r7
 8011676:	bd80      	pop	{r7, pc}

08011678 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8011678:	b580      	push	{r7, lr}
 801167a:	b08c      	sub	sp, #48	; 0x30
 801167c:	af04      	add	r7, sp, #16
 801167e:	60f8      	str	r0, [r7, #12]
 8011680:	60b9      	str	r1, [r7, #8]
 8011682:	603b      	str	r3, [r7, #0]
 8011684:	4613      	mov	r3, r2
 8011686:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011688:	88fb      	ldrh	r3, [r7, #6]
 801168a:	009b      	lsls	r3, r3, #2
 801168c:	4618      	mov	r0, r3
 801168e:	f001 fb97 	bl	8012dc0 <pvPortMalloc>
 8011692:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8011694:	697b      	ldr	r3, [r7, #20]
 8011696:	2b00      	cmp	r3, #0
 8011698:	d00e      	beq.n	80116b8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 801169a:	2054      	movs	r0, #84	; 0x54
 801169c:	f001 fb90 	bl	8012dc0 <pvPortMalloc>
 80116a0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80116a2:	69fb      	ldr	r3, [r7, #28]
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d003      	beq.n	80116b0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80116a8:	69fb      	ldr	r3, [r7, #28]
 80116aa:	697a      	ldr	r2, [r7, #20]
 80116ac:	631a      	str	r2, [r3, #48]	; 0x30
 80116ae:	e005      	b.n	80116bc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80116b0:	6978      	ldr	r0, [r7, #20]
 80116b2:	f001 fc47 	bl	8012f44 <vPortFree>
 80116b6:	e001      	b.n	80116bc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80116b8:	2300      	movs	r3, #0
 80116ba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80116bc:	69fb      	ldr	r3, [r7, #28]
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d017      	beq.n	80116f2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80116c2:	69fb      	ldr	r3, [r7, #28]
 80116c4:	2200      	movs	r2, #0
 80116c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80116ca:	88fa      	ldrh	r2, [r7, #6]
 80116cc:	2300      	movs	r3, #0
 80116ce:	9303      	str	r3, [sp, #12]
 80116d0:	69fb      	ldr	r3, [r7, #28]
 80116d2:	9302      	str	r3, [sp, #8]
 80116d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116d6:	9301      	str	r3, [sp, #4]
 80116d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116da:	9300      	str	r3, [sp, #0]
 80116dc:	683b      	ldr	r3, [r7, #0]
 80116de:	68b9      	ldr	r1, [r7, #8]
 80116e0:	68f8      	ldr	r0, [r7, #12]
 80116e2:	f000 f80e 	bl	8011702 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80116e6:	69f8      	ldr	r0, [r7, #28]
 80116e8:	f000 f88a 	bl	8011800 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80116ec:	2301      	movs	r3, #1
 80116ee:	61bb      	str	r3, [r7, #24]
 80116f0:	e002      	b.n	80116f8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80116f2:	f04f 33ff 	mov.w	r3, #4294967295
 80116f6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80116f8:	69bb      	ldr	r3, [r7, #24]
	}
 80116fa:	4618      	mov	r0, r3
 80116fc:	3720      	adds	r7, #32
 80116fe:	46bd      	mov	sp, r7
 8011700:	bd80      	pop	{r7, pc}

08011702 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8011702:	b580      	push	{r7, lr}
 8011704:	b088      	sub	sp, #32
 8011706:	af00      	add	r7, sp, #0
 8011708:	60f8      	str	r0, [r7, #12]
 801170a:	60b9      	str	r1, [r7, #8]
 801170c:	607a      	str	r2, [r7, #4]
 801170e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8011710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011712:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801171a:	3b01      	subs	r3, #1
 801171c:	009b      	lsls	r3, r3, #2
 801171e:	4413      	add	r3, r2
 8011720:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8011722:	69bb      	ldr	r3, [r7, #24]
 8011724:	f023 0307 	bic.w	r3, r3, #7
 8011728:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801172a:	69bb      	ldr	r3, [r7, #24]
 801172c:	f003 0307 	and.w	r3, r3, #7
 8011730:	2b00      	cmp	r3, #0
 8011732:	d009      	beq.n	8011748 <prvInitialiseNewTask+0x46>
 8011734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011738:	f383 8811 	msr	BASEPRI, r3
 801173c:	f3bf 8f6f 	isb	sy
 8011740:	f3bf 8f4f 	dsb	sy
 8011744:	617b      	str	r3, [r7, #20]
 8011746:	e7fe      	b.n	8011746 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011748:	2300      	movs	r3, #0
 801174a:	61fb      	str	r3, [r7, #28]
 801174c:	e012      	b.n	8011774 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801174e:	68ba      	ldr	r2, [r7, #8]
 8011750:	69fb      	ldr	r3, [r7, #28]
 8011752:	4413      	add	r3, r2
 8011754:	7819      	ldrb	r1, [r3, #0]
 8011756:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011758:	69fb      	ldr	r3, [r7, #28]
 801175a:	4413      	add	r3, r2
 801175c:	3334      	adds	r3, #52	; 0x34
 801175e:	460a      	mov	r2, r1
 8011760:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8011762:	68ba      	ldr	r2, [r7, #8]
 8011764:	69fb      	ldr	r3, [r7, #28]
 8011766:	4413      	add	r3, r2
 8011768:	781b      	ldrb	r3, [r3, #0]
 801176a:	2b00      	cmp	r3, #0
 801176c:	d006      	beq.n	801177c <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801176e:	69fb      	ldr	r3, [r7, #28]
 8011770:	3301      	adds	r3, #1
 8011772:	61fb      	str	r3, [r7, #28]
 8011774:	69fb      	ldr	r3, [r7, #28]
 8011776:	2b0f      	cmp	r3, #15
 8011778:	d9e9      	bls.n	801174e <prvInitialiseNewTask+0x4c>
 801177a:	e000      	b.n	801177e <prvInitialiseNewTask+0x7c>
		{
			break;
 801177c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801177e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011780:	2200      	movs	r2, #0
 8011782:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8011786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011788:	2b06      	cmp	r3, #6
 801178a:	d901      	bls.n	8011790 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801178c:	2306      	movs	r3, #6
 801178e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8011790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011792:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011794:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8011796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011798:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801179a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 801179c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801179e:	2200      	movs	r2, #0
 80117a0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80117a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117a4:	3304      	adds	r3, #4
 80117a6:	4618      	mov	r0, r3
 80117a8:	f7fe ff53 	bl	8010652 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80117ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117ae:	3318      	adds	r3, #24
 80117b0:	4618      	mov	r0, r3
 80117b2:	f7fe ff4e 	bl	8010652 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80117b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80117ba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80117bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117be:	f1c3 0207 	rsb	r2, r3, #7
 80117c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117c4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80117c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80117ca:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80117cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117ce:	2200      	movs	r2, #0
 80117d0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80117d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117d4:	2200      	movs	r2, #0
 80117d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80117da:	683a      	ldr	r2, [r7, #0]
 80117dc:	68f9      	ldr	r1, [r7, #12]
 80117de:	69b8      	ldr	r0, [r7, #24]
 80117e0:	f001 f8aa 	bl	8012938 <pxPortInitialiseStack>
 80117e4:	4602      	mov	r2, r0
 80117e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117e8:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80117ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	d002      	beq.n	80117f6 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80117f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80117f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80117f6:	bf00      	nop
 80117f8:	3720      	adds	r7, #32
 80117fa:	46bd      	mov	sp, r7
 80117fc:	bd80      	pop	{r7, pc}
	...

08011800 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011800:	b580      	push	{r7, lr}
 8011802:	b082      	sub	sp, #8
 8011804:	af00      	add	r7, sp, #0
 8011806:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011808:	f001 f9c0 	bl	8012b8c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801180c:	4b2a      	ldr	r3, [pc, #168]	; (80118b8 <prvAddNewTaskToReadyList+0xb8>)
 801180e:	681b      	ldr	r3, [r3, #0]
 8011810:	3301      	adds	r3, #1
 8011812:	4a29      	ldr	r2, [pc, #164]	; (80118b8 <prvAddNewTaskToReadyList+0xb8>)
 8011814:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8011816:	4b29      	ldr	r3, [pc, #164]	; (80118bc <prvAddNewTaskToReadyList+0xbc>)
 8011818:	681b      	ldr	r3, [r3, #0]
 801181a:	2b00      	cmp	r3, #0
 801181c:	d109      	bne.n	8011832 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801181e:	4a27      	ldr	r2, [pc, #156]	; (80118bc <prvAddNewTaskToReadyList+0xbc>)
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011824:	4b24      	ldr	r3, [pc, #144]	; (80118b8 <prvAddNewTaskToReadyList+0xb8>)
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	2b01      	cmp	r3, #1
 801182a:	d110      	bne.n	801184e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801182c:	f000 fbc4 	bl	8011fb8 <prvInitialiseTaskLists>
 8011830:	e00d      	b.n	801184e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8011832:	4b23      	ldr	r3, [pc, #140]	; (80118c0 <prvAddNewTaskToReadyList+0xc0>)
 8011834:	681b      	ldr	r3, [r3, #0]
 8011836:	2b00      	cmp	r3, #0
 8011838:	d109      	bne.n	801184e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801183a:	4b20      	ldr	r3, [pc, #128]	; (80118bc <prvAddNewTaskToReadyList+0xbc>)
 801183c:	681b      	ldr	r3, [r3, #0]
 801183e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011844:	429a      	cmp	r2, r3
 8011846:	d802      	bhi.n	801184e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011848:	4a1c      	ldr	r2, [pc, #112]	; (80118bc <prvAddNewTaskToReadyList+0xbc>)
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801184e:	4b1d      	ldr	r3, [pc, #116]	; (80118c4 <prvAddNewTaskToReadyList+0xc4>)
 8011850:	681b      	ldr	r3, [r3, #0]
 8011852:	3301      	adds	r3, #1
 8011854:	4a1b      	ldr	r2, [pc, #108]	; (80118c4 <prvAddNewTaskToReadyList+0xc4>)
 8011856:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801185c:	2201      	movs	r2, #1
 801185e:	409a      	lsls	r2, r3
 8011860:	4b19      	ldr	r3, [pc, #100]	; (80118c8 <prvAddNewTaskToReadyList+0xc8>)
 8011862:	681b      	ldr	r3, [r3, #0]
 8011864:	4313      	orrs	r3, r2
 8011866:	4a18      	ldr	r2, [pc, #96]	; (80118c8 <prvAddNewTaskToReadyList+0xc8>)
 8011868:	6013      	str	r3, [r2, #0]
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801186e:	4613      	mov	r3, r2
 8011870:	009b      	lsls	r3, r3, #2
 8011872:	4413      	add	r3, r2
 8011874:	009b      	lsls	r3, r3, #2
 8011876:	4a15      	ldr	r2, [pc, #84]	; (80118cc <prvAddNewTaskToReadyList+0xcc>)
 8011878:	441a      	add	r2, r3
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	3304      	adds	r3, #4
 801187e:	4619      	mov	r1, r3
 8011880:	4610      	mov	r0, r2
 8011882:	f7fe fef3 	bl	801066c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8011886:	f001 f9af 	bl	8012be8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801188a:	4b0d      	ldr	r3, [pc, #52]	; (80118c0 <prvAddNewTaskToReadyList+0xc0>)
 801188c:	681b      	ldr	r3, [r3, #0]
 801188e:	2b00      	cmp	r3, #0
 8011890:	d00e      	beq.n	80118b0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8011892:	4b0a      	ldr	r3, [pc, #40]	; (80118bc <prvAddNewTaskToReadyList+0xbc>)
 8011894:	681b      	ldr	r3, [r3, #0]
 8011896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801189c:	429a      	cmp	r2, r3
 801189e:	d207      	bcs.n	80118b0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80118a0:	4b0b      	ldr	r3, [pc, #44]	; (80118d0 <prvAddNewTaskToReadyList+0xd0>)
 80118a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80118a6:	601a      	str	r2, [r3, #0]
 80118a8:	f3bf 8f4f 	dsb	sy
 80118ac:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80118b0:	bf00      	nop
 80118b2:	3708      	adds	r7, #8
 80118b4:	46bd      	mov	sp, r7
 80118b6:	bd80      	pop	{r7, pc}
 80118b8:	20001588 	.word	0x20001588
 80118bc:	20001488 	.word	0x20001488
 80118c0:	20001594 	.word	0x20001594
 80118c4:	200015a4 	.word	0x200015a4
 80118c8:	20001590 	.word	0x20001590
 80118cc:	2000148c 	.word	0x2000148c
 80118d0:	e000ed04 	.word	0xe000ed04

080118d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80118d4:	b580      	push	{r7, lr}
 80118d6:	b084      	sub	sp, #16
 80118d8:	af00      	add	r7, sp, #0
 80118da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80118dc:	2300      	movs	r3, #0
 80118de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d016      	beq.n	8011914 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80118e6:	4b13      	ldr	r3, [pc, #76]	; (8011934 <vTaskDelay+0x60>)
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d009      	beq.n	8011902 <vTaskDelay+0x2e>
 80118ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118f2:	f383 8811 	msr	BASEPRI, r3
 80118f6:	f3bf 8f6f 	isb	sy
 80118fa:	f3bf 8f4f 	dsb	sy
 80118fe:	60bb      	str	r3, [r7, #8]
 8011900:	e7fe      	b.n	8011900 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8011902:	f000 f879 	bl	80119f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011906:	2100      	movs	r1, #0
 8011908:	6878      	ldr	r0, [r7, #4]
 801190a:	f000 ffaf 	bl	801286c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801190e:	f000 f881 	bl	8011a14 <xTaskResumeAll>
 8011912:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8011914:	68fb      	ldr	r3, [r7, #12]
 8011916:	2b00      	cmp	r3, #0
 8011918:	d107      	bne.n	801192a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 801191a:	4b07      	ldr	r3, [pc, #28]	; (8011938 <vTaskDelay+0x64>)
 801191c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011920:	601a      	str	r2, [r3, #0]
 8011922:	f3bf 8f4f 	dsb	sy
 8011926:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801192a:	bf00      	nop
 801192c:	3710      	adds	r7, #16
 801192e:	46bd      	mov	sp, r7
 8011930:	bd80      	pop	{r7, pc}
 8011932:	bf00      	nop
 8011934:	200015b0 	.word	0x200015b0
 8011938:	e000ed04 	.word	0xe000ed04

0801193c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801193c:	b580      	push	{r7, lr}
 801193e:	b08a      	sub	sp, #40	; 0x28
 8011940:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8011942:	2300      	movs	r3, #0
 8011944:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8011946:	2300      	movs	r3, #0
 8011948:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801194a:	463a      	mov	r2, r7
 801194c:	1d39      	adds	r1, r7, #4
 801194e:	f107 0308 	add.w	r3, r7, #8
 8011952:	4618      	mov	r0, r3
 8011954:	f7f0 fb38 	bl	8001fc8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011958:	6839      	ldr	r1, [r7, #0]
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	68ba      	ldr	r2, [r7, #8]
 801195e:	9202      	str	r2, [sp, #8]
 8011960:	9301      	str	r3, [sp, #4]
 8011962:	2300      	movs	r3, #0
 8011964:	9300      	str	r3, [sp, #0]
 8011966:	2300      	movs	r3, #0
 8011968:	460a      	mov	r2, r1
 801196a:	491d      	ldr	r1, [pc, #116]	; (80119e0 <vTaskStartScheduler+0xa4>)
 801196c:	481d      	ldr	r0, [pc, #116]	; (80119e4 <vTaskStartScheduler+0xa8>)
 801196e:	f7ff fe2a 	bl	80115c6 <xTaskCreateStatic>
 8011972:	4602      	mov	r2, r0
 8011974:	4b1c      	ldr	r3, [pc, #112]	; (80119e8 <vTaskStartScheduler+0xac>)
 8011976:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011978:	4b1b      	ldr	r3, [pc, #108]	; (80119e8 <vTaskStartScheduler+0xac>)
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	2b00      	cmp	r3, #0
 801197e:	d002      	beq.n	8011986 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8011980:	2301      	movs	r3, #1
 8011982:	617b      	str	r3, [r7, #20]
 8011984:	e001      	b.n	801198a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8011986:	2300      	movs	r3, #0
 8011988:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801198a:	697b      	ldr	r3, [r7, #20]
 801198c:	2b01      	cmp	r3, #1
 801198e:	d115      	bne.n	80119bc <vTaskStartScheduler+0x80>
 8011990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011994:	f383 8811 	msr	BASEPRI, r3
 8011998:	f3bf 8f6f 	isb	sy
 801199c:	f3bf 8f4f 	dsb	sy
 80119a0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80119a2:	4b12      	ldr	r3, [pc, #72]	; (80119ec <vTaskStartScheduler+0xb0>)
 80119a4:	f04f 32ff 	mov.w	r2, #4294967295
 80119a8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80119aa:	4b11      	ldr	r3, [pc, #68]	; (80119f0 <vTaskStartScheduler+0xb4>)
 80119ac:	2201      	movs	r2, #1
 80119ae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80119b0:	4b10      	ldr	r3, [pc, #64]	; (80119f4 <vTaskStartScheduler+0xb8>)
 80119b2:	2200      	movs	r2, #0
 80119b4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80119b6:	f001 f84b 	bl	8012a50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80119ba:	e00d      	b.n	80119d8 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80119bc:	697b      	ldr	r3, [r7, #20]
 80119be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80119c2:	d109      	bne.n	80119d8 <vTaskStartScheduler+0x9c>
 80119c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119c8:	f383 8811 	msr	BASEPRI, r3
 80119cc:	f3bf 8f6f 	isb	sy
 80119d0:	f3bf 8f4f 	dsb	sy
 80119d4:	60fb      	str	r3, [r7, #12]
 80119d6:	e7fe      	b.n	80119d6 <vTaskStartScheduler+0x9a>
}
 80119d8:	bf00      	nop
 80119da:	3718      	adds	r7, #24
 80119dc:	46bd      	mov	sp, r7
 80119de:	bd80      	pop	{r7, pc}
 80119e0:	08019df8 	.word	0x08019df8
 80119e4:	08011f89 	.word	0x08011f89
 80119e8:	200015ac 	.word	0x200015ac
 80119ec:	200015a8 	.word	0x200015a8
 80119f0:	20001594 	.word	0x20001594
 80119f4:	2000158c 	.word	0x2000158c

080119f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80119f8:	b480      	push	{r7}
 80119fa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80119fc:	4b04      	ldr	r3, [pc, #16]	; (8011a10 <vTaskSuspendAll+0x18>)
 80119fe:	681b      	ldr	r3, [r3, #0]
 8011a00:	3301      	adds	r3, #1
 8011a02:	4a03      	ldr	r2, [pc, #12]	; (8011a10 <vTaskSuspendAll+0x18>)
 8011a04:	6013      	str	r3, [r2, #0]
}
 8011a06:	bf00      	nop
 8011a08:	46bd      	mov	sp, r7
 8011a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a0e:	4770      	bx	lr
 8011a10:	200015b0 	.word	0x200015b0

08011a14 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011a14:	b580      	push	{r7, lr}
 8011a16:	b084      	sub	sp, #16
 8011a18:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011a1a:	2300      	movs	r3, #0
 8011a1c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8011a1e:	2300      	movs	r3, #0
 8011a20:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8011a22:	4b41      	ldr	r3, [pc, #260]	; (8011b28 <xTaskResumeAll+0x114>)
 8011a24:	681b      	ldr	r3, [r3, #0]
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d109      	bne.n	8011a3e <xTaskResumeAll+0x2a>
 8011a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a2e:	f383 8811 	msr	BASEPRI, r3
 8011a32:	f3bf 8f6f 	isb	sy
 8011a36:	f3bf 8f4f 	dsb	sy
 8011a3a:	603b      	str	r3, [r7, #0]
 8011a3c:	e7fe      	b.n	8011a3c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8011a3e:	f001 f8a5 	bl	8012b8c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011a42:	4b39      	ldr	r3, [pc, #228]	; (8011b28 <xTaskResumeAll+0x114>)
 8011a44:	681b      	ldr	r3, [r3, #0]
 8011a46:	3b01      	subs	r3, #1
 8011a48:	4a37      	ldr	r2, [pc, #220]	; (8011b28 <xTaskResumeAll+0x114>)
 8011a4a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011a4c:	4b36      	ldr	r3, [pc, #216]	; (8011b28 <xTaskResumeAll+0x114>)
 8011a4e:	681b      	ldr	r3, [r3, #0]
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d161      	bne.n	8011b18 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011a54:	4b35      	ldr	r3, [pc, #212]	; (8011b2c <xTaskResumeAll+0x118>)
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d05d      	beq.n	8011b18 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011a5c:	e02e      	b.n	8011abc <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8011a5e:	4b34      	ldr	r3, [pc, #208]	; (8011b30 <xTaskResumeAll+0x11c>)
 8011a60:	68db      	ldr	r3, [r3, #12]
 8011a62:	68db      	ldr	r3, [r3, #12]
 8011a64:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011a66:	68fb      	ldr	r3, [r7, #12]
 8011a68:	3318      	adds	r3, #24
 8011a6a:	4618      	mov	r0, r3
 8011a6c:	f7fe fe5b 	bl	8010726 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011a70:	68fb      	ldr	r3, [r7, #12]
 8011a72:	3304      	adds	r3, #4
 8011a74:	4618      	mov	r0, r3
 8011a76:	f7fe fe56 	bl	8010726 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011a7a:	68fb      	ldr	r3, [r7, #12]
 8011a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a7e:	2201      	movs	r2, #1
 8011a80:	409a      	lsls	r2, r3
 8011a82:	4b2c      	ldr	r3, [pc, #176]	; (8011b34 <xTaskResumeAll+0x120>)
 8011a84:	681b      	ldr	r3, [r3, #0]
 8011a86:	4313      	orrs	r3, r2
 8011a88:	4a2a      	ldr	r2, [pc, #168]	; (8011b34 <xTaskResumeAll+0x120>)
 8011a8a:	6013      	str	r3, [r2, #0]
 8011a8c:	68fb      	ldr	r3, [r7, #12]
 8011a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a90:	4613      	mov	r3, r2
 8011a92:	009b      	lsls	r3, r3, #2
 8011a94:	4413      	add	r3, r2
 8011a96:	009b      	lsls	r3, r3, #2
 8011a98:	4a27      	ldr	r2, [pc, #156]	; (8011b38 <xTaskResumeAll+0x124>)
 8011a9a:	441a      	add	r2, r3
 8011a9c:	68fb      	ldr	r3, [r7, #12]
 8011a9e:	3304      	adds	r3, #4
 8011aa0:	4619      	mov	r1, r3
 8011aa2:	4610      	mov	r0, r2
 8011aa4:	f7fe fde2 	bl	801066c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011aa8:	68fb      	ldr	r3, [r7, #12]
 8011aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011aac:	4b23      	ldr	r3, [pc, #140]	; (8011b3c <xTaskResumeAll+0x128>)
 8011aae:	681b      	ldr	r3, [r3, #0]
 8011ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ab2:	429a      	cmp	r2, r3
 8011ab4:	d302      	bcc.n	8011abc <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8011ab6:	4b22      	ldr	r3, [pc, #136]	; (8011b40 <xTaskResumeAll+0x12c>)
 8011ab8:	2201      	movs	r2, #1
 8011aba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011abc:	4b1c      	ldr	r3, [pc, #112]	; (8011b30 <xTaskResumeAll+0x11c>)
 8011abe:	681b      	ldr	r3, [r3, #0]
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d1cc      	bne.n	8011a5e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011ac4:	68fb      	ldr	r3, [r7, #12]
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d001      	beq.n	8011ace <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011aca:	f000 fb0f 	bl	80120ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8011ace:	4b1d      	ldr	r3, [pc, #116]	; (8011b44 <xTaskResumeAll+0x130>)
 8011ad0:	681b      	ldr	r3, [r3, #0]
 8011ad2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d010      	beq.n	8011afc <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8011ada:	f000 f837 	bl	8011b4c <xTaskIncrementTick>
 8011ade:	4603      	mov	r3, r0
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	d002      	beq.n	8011aea <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8011ae4:	4b16      	ldr	r3, [pc, #88]	; (8011b40 <xTaskResumeAll+0x12c>)
 8011ae6:	2201      	movs	r2, #1
 8011ae8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	3b01      	subs	r3, #1
 8011aee:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d1f1      	bne.n	8011ada <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8011af6:	4b13      	ldr	r3, [pc, #76]	; (8011b44 <xTaskResumeAll+0x130>)
 8011af8:	2200      	movs	r2, #0
 8011afa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011afc:	4b10      	ldr	r3, [pc, #64]	; (8011b40 <xTaskResumeAll+0x12c>)
 8011afe:	681b      	ldr	r3, [r3, #0]
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d009      	beq.n	8011b18 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011b04:	2301      	movs	r3, #1
 8011b06:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011b08:	4b0f      	ldr	r3, [pc, #60]	; (8011b48 <xTaskResumeAll+0x134>)
 8011b0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011b0e:	601a      	str	r2, [r3, #0]
 8011b10:	f3bf 8f4f 	dsb	sy
 8011b14:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011b18:	f001 f866 	bl	8012be8 <vPortExitCritical>

	return xAlreadyYielded;
 8011b1c:	68bb      	ldr	r3, [r7, #8]
}
 8011b1e:	4618      	mov	r0, r3
 8011b20:	3710      	adds	r7, #16
 8011b22:	46bd      	mov	sp, r7
 8011b24:	bd80      	pop	{r7, pc}
 8011b26:	bf00      	nop
 8011b28:	200015b0 	.word	0x200015b0
 8011b2c:	20001588 	.word	0x20001588
 8011b30:	20001548 	.word	0x20001548
 8011b34:	20001590 	.word	0x20001590
 8011b38:	2000148c 	.word	0x2000148c
 8011b3c:	20001488 	.word	0x20001488
 8011b40:	2000159c 	.word	0x2000159c
 8011b44:	20001598 	.word	0x20001598
 8011b48:	e000ed04 	.word	0xe000ed04

08011b4c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011b4c:	b580      	push	{r7, lr}
 8011b4e:	b086      	sub	sp, #24
 8011b50:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011b52:	2300      	movs	r3, #0
 8011b54:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011b56:	4b50      	ldr	r3, [pc, #320]	; (8011c98 <xTaskIncrementTick+0x14c>)
 8011b58:	681b      	ldr	r3, [r3, #0]
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	f040 808c 	bne.w	8011c78 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011b60:	4b4e      	ldr	r3, [pc, #312]	; (8011c9c <xTaskIncrementTick+0x150>)
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	3301      	adds	r3, #1
 8011b66:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011b68:	4a4c      	ldr	r2, [pc, #304]	; (8011c9c <xTaskIncrementTick+0x150>)
 8011b6a:	693b      	ldr	r3, [r7, #16]
 8011b6c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011b6e:	693b      	ldr	r3, [r7, #16]
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d11f      	bne.n	8011bb4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8011b74:	4b4a      	ldr	r3, [pc, #296]	; (8011ca0 <xTaskIncrementTick+0x154>)
 8011b76:	681b      	ldr	r3, [r3, #0]
 8011b78:	681b      	ldr	r3, [r3, #0]
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d009      	beq.n	8011b92 <xTaskIncrementTick+0x46>
 8011b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b82:	f383 8811 	msr	BASEPRI, r3
 8011b86:	f3bf 8f6f 	isb	sy
 8011b8a:	f3bf 8f4f 	dsb	sy
 8011b8e:	603b      	str	r3, [r7, #0]
 8011b90:	e7fe      	b.n	8011b90 <xTaskIncrementTick+0x44>
 8011b92:	4b43      	ldr	r3, [pc, #268]	; (8011ca0 <xTaskIncrementTick+0x154>)
 8011b94:	681b      	ldr	r3, [r3, #0]
 8011b96:	60fb      	str	r3, [r7, #12]
 8011b98:	4b42      	ldr	r3, [pc, #264]	; (8011ca4 <xTaskIncrementTick+0x158>)
 8011b9a:	681b      	ldr	r3, [r3, #0]
 8011b9c:	4a40      	ldr	r2, [pc, #256]	; (8011ca0 <xTaskIncrementTick+0x154>)
 8011b9e:	6013      	str	r3, [r2, #0]
 8011ba0:	4a40      	ldr	r2, [pc, #256]	; (8011ca4 <xTaskIncrementTick+0x158>)
 8011ba2:	68fb      	ldr	r3, [r7, #12]
 8011ba4:	6013      	str	r3, [r2, #0]
 8011ba6:	4b40      	ldr	r3, [pc, #256]	; (8011ca8 <xTaskIncrementTick+0x15c>)
 8011ba8:	681b      	ldr	r3, [r3, #0]
 8011baa:	3301      	adds	r3, #1
 8011bac:	4a3e      	ldr	r2, [pc, #248]	; (8011ca8 <xTaskIncrementTick+0x15c>)
 8011bae:	6013      	str	r3, [r2, #0]
 8011bb0:	f000 fa9c 	bl	80120ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011bb4:	4b3d      	ldr	r3, [pc, #244]	; (8011cac <xTaskIncrementTick+0x160>)
 8011bb6:	681b      	ldr	r3, [r3, #0]
 8011bb8:	693a      	ldr	r2, [r7, #16]
 8011bba:	429a      	cmp	r2, r3
 8011bbc:	d34d      	bcc.n	8011c5a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011bbe:	4b38      	ldr	r3, [pc, #224]	; (8011ca0 <xTaskIncrementTick+0x154>)
 8011bc0:	681b      	ldr	r3, [r3, #0]
 8011bc2:	681b      	ldr	r3, [r3, #0]
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	d101      	bne.n	8011bcc <xTaskIncrementTick+0x80>
 8011bc8:	2301      	movs	r3, #1
 8011bca:	e000      	b.n	8011bce <xTaskIncrementTick+0x82>
 8011bcc:	2300      	movs	r3, #0
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d004      	beq.n	8011bdc <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011bd2:	4b36      	ldr	r3, [pc, #216]	; (8011cac <xTaskIncrementTick+0x160>)
 8011bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8011bd8:	601a      	str	r2, [r3, #0]
					break;
 8011bda:	e03e      	b.n	8011c5a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8011bdc:	4b30      	ldr	r3, [pc, #192]	; (8011ca0 <xTaskIncrementTick+0x154>)
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	68db      	ldr	r3, [r3, #12]
 8011be2:	68db      	ldr	r3, [r3, #12]
 8011be4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011be6:	68bb      	ldr	r3, [r7, #8]
 8011be8:	685b      	ldr	r3, [r3, #4]
 8011bea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011bec:	693a      	ldr	r2, [r7, #16]
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	429a      	cmp	r2, r3
 8011bf2:	d203      	bcs.n	8011bfc <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011bf4:	4a2d      	ldr	r2, [pc, #180]	; (8011cac <xTaskIncrementTick+0x160>)
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	6013      	str	r3, [r2, #0]
						break;
 8011bfa:	e02e      	b.n	8011c5a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011bfc:	68bb      	ldr	r3, [r7, #8]
 8011bfe:	3304      	adds	r3, #4
 8011c00:	4618      	mov	r0, r3
 8011c02:	f7fe fd90 	bl	8010726 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011c06:	68bb      	ldr	r3, [r7, #8]
 8011c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d004      	beq.n	8011c18 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011c0e:	68bb      	ldr	r3, [r7, #8]
 8011c10:	3318      	adds	r3, #24
 8011c12:	4618      	mov	r0, r3
 8011c14:	f7fe fd87 	bl	8010726 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011c18:	68bb      	ldr	r3, [r7, #8]
 8011c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c1c:	2201      	movs	r2, #1
 8011c1e:	409a      	lsls	r2, r3
 8011c20:	4b23      	ldr	r3, [pc, #140]	; (8011cb0 <xTaskIncrementTick+0x164>)
 8011c22:	681b      	ldr	r3, [r3, #0]
 8011c24:	4313      	orrs	r3, r2
 8011c26:	4a22      	ldr	r2, [pc, #136]	; (8011cb0 <xTaskIncrementTick+0x164>)
 8011c28:	6013      	str	r3, [r2, #0]
 8011c2a:	68bb      	ldr	r3, [r7, #8]
 8011c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c2e:	4613      	mov	r3, r2
 8011c30:	009b      	lsls	r3, r3, #2
 8011c32:	4413      	add	r3, r2
 8011c34:	009b      	lsls	r3, r3, #2
 8011c36:	4a1f      	ldr	r2, [pc, #124]	; (8011cb4 <xTaskIncrementTick+0x168>)
 8011c38:	441a      	add	r2, r3
 8011c3a:	68bb      	ldr	r3, [r7, #8]
 8011c3c:	3304      	adds	r3, #4
 8011c3e:	4619      	mov	r1, r3
 8011c40:	4610      	mov	r0, r2
 8011c42:	f7fe fd13 	bl	801066c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011c46:	68bb      	ldr	r3, [r7, #8]
 8011c48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c4a:	4b1b      	ldr	r3, [pc, #108]	; (8011cb8 <xTaskIncrementTick+0x16c>)
 8011c4c:	681b      	ldr	r3, [r3, #0]
 8011c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c50:	429a      	cmp	r2, r3
 8011c52:	d3b4      	bcc.n	8011bbe <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8011c54:	2301      	movs	r3, #1
 8011c56:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011c58:	e7b1      	b.n	8011bbe <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011c5a:	4b17      	ldr	r3, [pc, #92]	; (8011cb8 <xTaskIncrementTick+0x16c>)
 8011c5c:	681b      	ldr	r3, [r3, #0]
 8011c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c60:	4914      	ldr	r1, [pc, #80]	; (8011cb4 <xTaskIncrementTick+0x168>)
 8011c62:	4613      	mov	r3, r2
 8011c64:	009b      	lsls	r3, r3, #2
 8011c66:	4413      	add	r3, r2
 8011c68:	009b      	lsls	r3, r3, #2
 8011c6a:	440b      	add	r3, r1
 8011c6c:	681b      	ldr	r3, [r3, #0]
 8011c6e:	2b01      	cmp	r3, #1
 8011c70:	d907      	bls.n	8011c82 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8011c72:	2301      	movs	r3, #1
 8011c74:	617b      	str	r3, [r7, #20]
 8011c76:	e004      	b.n	8011c82 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8011c78:	4b10      	ldr	r3, [pc, #64]	; (8011cbc <xTaskIncrementTick+0x170>)
 8011c7a:	681b      	ldr	r3, [r3, #0]
 8011c7c:	3301      	adds	r3, #1
 8011c7e:	4a0f      	ldr	r2, [pc, #60]	; (8011cbc <xTaskIncrementTick+0x170>)
 8011c80:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8011c82:	4b0f      	ldr	r3, [pc, #60]	; (8011cc0 <xTaskIncrementTick+0x174>)
 8011c84:	681b      	ldr	r3, [r3, #0]
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d001      	beq.n	8011c8e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8011c8a:	2301      	movs	r3, #1
 8011c8c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8011c8e:	697b      	ldr	r3, [r7, #20]
}
 8011c90:	4618      	mov	r0, r3
 8011c92:	3718      	adds	r7, #24
 8011c94:	46bd      	mov	sp, r7
 8011c96:	bd80      	pop	{r7, pc}
 8011c98:	200015b0 	.word	0x200015b0
 8011c9c:	2000158c 	.word	0x2000158c
 8011ca0:	20001540 	.word	0x20001540
 8011ca4:	20001544 	.word	0x20001544
 8011ca8:	200015a0 	.word	0x200015a0
 8011cac:	200015a8 	.word	0x200015a8
 8011cb0:	20001590 	.word	0x20001590
 8011cb4:	2000148c 	.word	0x2000148c
 8011cb8:	20001488 	.word	0x20001488
 8011cbc:	20001598 	.word	0x20001598
 8011cc0:	2000159c 	.word	0x2000159c

08011cc4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011cc4:	b480      	push	{r7}
 8011cc6:	b087      	sub	sp, #28
 8011cc8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011cca:	4b26      	ldr	r3, [pc, #152]	; (8011d64 <vTaskSwitchContext+0xa0>)
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d003      	beq.n	8011cda <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011cd2:	4b25      	ldr	r3, [pc, #148]	; (8011d68 <vTaskSwitchContext+0xa4>)
 8011cd4:	2201      	movs	r2, #1
 8011cd6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011cd8:	e03e      	b.n	8011d58 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8011cda:	4b23      	ldr	r3, [pc, #140]	; (8011d68 <vTaskSwitchContext+0xa4>)
 8011cdc:	2200      	movs	r2, #0
 8011cde:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8011ce0:	4b22      	ldr	r3, [pc, #136]	; (8011d6c <vTaskSwitchContext+0xa8>)
 8011ce2:	681b      	ldr	r3, [r3, #0]
 8011ce4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8011ce6:	68fb      	ldr	r3, [r7, #12]
 8011ce8:	fab3 f383 	clz	r3, r3
 8011cec:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8011cee:	7afb      	ldrb	r3, [r7, #11]
 8011cf0:	f1c3 031f 	rsb	r3, r3, #31
 8011cf4:	617b      	str	r3, [r7, #20]
 8011cf6:	491e      	ldr	r1, [pc, #120]	; (8011d70 <vTaskSwitchContext+0xac>)
 8011cf8:	697a      	ldr	r2, [r7, #20]
 8011cfa:	4613      	mov	r3, r2
 8011cfc:	009b      	lsls	r3, r3, #2
 8011cfe:	4413      	add	r3, r2
 8011d00:	009b      	lsls	r3, r3, #2
 8011d02:	440b      	add	r3, r1
 8011d04:	681b      	ldr	r3, [r3, #0]
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d109      	bne.n	8011d1e <vTaskSwitchContext+0x5a>
	__asm volatile
 8011d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d0e:	f383 8811 	msr	BASEPRI, r3
 8011d12:	f3bf 8f6f 	isb	sy
 8011d16:	f3bf 8f4f 	dsb	sy
 8011d1a:	607b      	str	r3, [r7, #4]
 8011d1c:	e7fe      	b.n	8011d1c <vTaskSwitchContext+0x58>
 8011d1e:	697a      	ldr	r2, [r7, #20]
 8011d20:	4613      	mov	r3, r2
 8011d22:	009b      	lsls	r3, r3, #2
 8011d24:	4413      	add	r3, r2
 8011d26:	009b      	lsls	r3, r3, #2
 8011d28:	4a11      	ldr	r2, [pc, #68]	; (8011d70 <vTaskSwitchContext+0xac>)
 8011d2a:	4413      	add	r3, r2
 8011d2c:	613b      	str	r3, [r7, #16]
 8011d2e:	693b      	ldr	r3, [r7, #16]
 8011d30:	685b      	ldr	r3, [r3, #4]
 8011d32:	685a      	ldr	r2, [r3, #4]
 8011d34:	693b      	ldr	r3, [r7, #16]
 8011d36:	605a      	str	r2, [r3, #4]
 8011d38:	693b      	ldr	r3, [r7, #16]
 8011d3a:	685a      	ldr	r2, [r3, #4]
 8011d3c:	693b      	ldr	r3, [r7, #16]
 8011d3e:	3308      	adds	r3, #8
 8011d40:	429a      	cmp	r2, r3
 8011d42:	d104      	bne.n	8011d4e <vTaskSwitchContext+0x8a>
 8011d44:	693b      	ldr	r3, [r7, #16]
 8011d46:	685b      	ldr	r3, [r3, #4]
 8011d48:	685a      	ldr	r2, [r3, #4]
 8011d4a:	693b      	ldr	r3, [r7, #16]
 8011d4c:	605a      	str	r2, [r3, #4]
 8011d4e:	693b      	ldr	r3, [r7, #16]
 8011d50:	685b      	ldr	r3, [r3, #4]
 8011d52:	68db      	ldr	r3, [r3, #12]
 8011d54:	4a07      	ldr	r2, [pc, #28]	; (8011d74 <vTaskSwitchContext+0xb0>)
 8011d56:	6013      	str	r3, [r2, #0]
}
 8011d58:	bf00      	nop
 8011d5a:	371c      	adds	r7, #28
 8011d5c:	46bd      	mov	sp, r7
 8011d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d62:	4770      	bx	lr
 8011d64:	200015b0 	.word	0x200015b0
 8011d68:	2000159c 	.word	0x2000159c
 8011d6c:	20001590 	.word	0x20001590
 8011d70:	2000148c 	.word	0x2000148c
 8011d74:	20001488 	.word	0x20001488

08011d78 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011d78:	b580      	push	{r7, lr}
 8011d7a:	b084      	sub	sp, #16
 8011d7c:	af00      	add	r7, sp, #0
 8011d7e:	6078      	str	r0, [r7, #4]
 8011d80:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d109      	bne.n	8011d9c <vTaskPlaceOnEventList+0x24>
 8011d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d8c:	f383 8811 	msr	BASEPRI, r3
 8011d90:	f3bf 8f6f 	isb	sy
 8011d94:	f3bf 8f4f 	dsb	sy
 8011d98:	60fb      	str	r3, [r7, #12]
 8011d9a:	e7fe      	b.n	8011d9a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011d9c:	4b07      	ldr	r3, [pc, #28]	; (8011dbc <vTaskPlaceOnEventList+0x44>)
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	3318      	adds	r3, #24
 8011da2:	4619      	mov	r1, r3
 8011da4:	6878      	ldr	r0, [r7, #4]
 8011da6:	f7fe fc85 	bl	80106b4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011daa:	2101      	movs	r1, #1
 8011dac:	6838      	ldr	r0, [r7, #0]
 8011dae:	f000 fd5d 	bl	801286c <prvAddCurrentTaskToDelayedList>
}
 8011db2:	bf00      	nop
 8011db4:	3710      	adds	r7, #16
 8011db6:	46bd      	mov	sp, r7
 8011db8:	bd80      	pop	{r7, pc}
 8011dba:	bf00      	nop
 8011dbc:	20001488 	.word	0x20001488

08011dc0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011dc0:	b580      	push	{r7, lr}
 8011dc2:	b086      	sub	sp, #24
 8011dc4:	af00      	add	r7, sp, #0
 8011dc6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	68db      	ldr	r3, [r3, #12]
 8011dcc:	68db      	ldr	r3, [r3, #12]
 8011dce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011dd0:	693b      	ldr	r3, [r7, #16]
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d109      	bne.n	8011dea <xTaskRemoveFromEventList+0x2a>
 8011dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011dda:	f383 8811 	msr	BASEPRI, r3
 8011dde:	f3bf 8f6f 	isb	sy
 8011de2:	f3bf 8f4f 	dsb	sy
 8011de6:	60fb      	str	r3, [r7, #12]
 8011de8:	e7fe      	b.n	8011de8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011dea:	693b      	ldr	r3, [r7, #16]
 8011dec:	3318      	adds	r3, #24
 8011dee:	4618      	mov	r0, r3
 8011df0:	f7fe fc99 	bl	8010726 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011df4:	4b1d      	ldr	r3, [pc, #116]	; (8011e6c <xTaskRemoveFromEventList+0xac>)
 8011df6:	681b      	ldr	r3, [r3, #0]
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d11c      	bne.n	8011e36 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011dfc:	693b      	ldr	r3, [r7, #16]
 8011dfe:	3304      	adds	r3, #4
 8011e00:	4618      	mov	r0, r3
 8011e02:	f7fe fc90 	bl	8010726 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011e06:	693b      	ldr	r3, [r7, #16]
 8011e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e0a:	2201      	movs	r2, #1
 8011e0c:	409a      	lsls	r2, r3
 8011e0e:	4b18      	ldr	r3, [pc, #96]	; (8011e70 <xTaskRemoveFromEventList+0xb0>)
 8011e10:	681b      	ldr	r3, [r3, #0]
 8011e12:	4313      	orrs	r3, r2
 8011e14:	4a16      	ldr	r2, [pc, #88]	; (8011e70 <xTaskRemoveFromEventList+0xb0>)
 8011e16:	6013      	str	r3, [r2, #0]
 8011e18:	693b      	ldr	r3, [r7, #16]
 8011e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e1c:	4613      	mov	r3, r2
 8011e1e:	009b      	lsls	r3, r3, #2
 8011e20:	4413      	add	r3, r2
 8011e22:	009b      	lsls	r3, r3, #2
 8011e24:	4a13      	ldr	r2, [pc, #76]	; (8011e74 <xTaskRemoveFromEventList+0xb4>)
 8011e26:	441a      	add	r2, r3
 8011e28:	693b      	ldr	r3, [r7, #16]
 8011e2a:	3304      	adds	r3, #4
 8011e2c:	4619      	mov	r1, r3
 8011e2e:	4610      	mov	r0, r2
 8011e30:	f7fe fc1c 	bl	801066c <vListInsertEnd>
 8011e34:	e005      	b.n	8011e42 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011e36:	693b      	ldr	r3, [r7, #16]
 8011e38:	3318      	adds	r3, #24
 8011e3a:	4619      	mov	r1, r3
 8011e3c:	480e      	ldr	r0, [pc, #56]	; (8011e78 <xTaskRemoveFromEventList+0xb8>)
 8011e3e:	f7fe fc15 	bl	801066c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011e42:	693b      	ldr	r3, [r7, #16]
 8011e44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e46:	4b0d      	ldr	r3, [pc, #52]	; (8011e7c <xTaskRemoveFromEventList+0xbc>)
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e4c:	429a      	cmp	r2, r3
 8011e4e:	d905      	bls.n	8011e5c <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011e50:	2301      	movs	r3, #1
 8011e52:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011e54:	4b0a      	ldr	r3, [pc, #40]	; (8011e80 <xTaskRemoveFromEventList+0xc0>)
 8011e56:	2201      	movs	r2, #1
 8011e58:	601a      	str	r2, [r3, #0]
 8011e5a:	e001      	b.n	8011e60 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8011e5c:	2300      	movs	r3, #0
 8011e5e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8011e60:	697b      	ldr	r3, [r7, #20]
}
 8011e62:	4618      	mov	r0, r3
 8011e64:	3718      	adds	r7, #24
 8011e66:	46bd      	mov	sp, r7
 8011e68:	bd80      	pop	{r7, pc}
 8011e6a:	bf00      	nop
 8011e6c:	200015b0 	.word	0x200015b0
 8011e70:	20001590 	.word	0x20001590
 8011e74:	2000148c 	.word	0x2000148c
 8011e78:	20001548 	.word	0x20001548
 8011e7c:	20001488 	.word	0x20001488
 8011e80:	2000159c 	.word	0x2000159c

08011e84 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011e84:	b480      	push	{r7}
 8011e86:	b083      	sub	sp, #12
 8011e88:	af00      	add	r7, sp, #0
 8011e8a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011e8c:	4b06      	ldr	r3, [pc, #24]	; (8011ea8 <vTaskInternalSetTimeOutState+0x24>)
 8011e8e:	681a      	ldr	r2, [r3, #0]
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011e94:	4b05      	ldr	r3, [pc, #20]	; (8011eac <vTaskInternalSetTimeOutState+0x28>)
 8011e96:	681a      	ldr	r2, [r3, #0]
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	605a      	str	r2, [r3, #4]
}
 8011e9c:	bf00      	nop
 8011e9e:	370c      	adds	r7, #12
 8011ea0:	46bd      	mov	sp, r7
 8011ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ea6:	4770      	bx	lr
 8011ea8:	200015a0 	.word	0x200015a0
 8011eac:	2000158c 	.word	0x2000158c

08011eb0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011eb0:	b580      	push	{r7, lr}
 8011eb2:	b088      	sub	sp, #32
 8011eb4:	af00      	add	r7, sp, #0
 8011eb6:	6078      	str	r0, [r7, #4]
 8011eb8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d109      	bne.n	8011ed4 <xTaskCheckForTimeOut+0x24>
 8011ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ec4:	f383 8811 	msr	BASEPRI, r3
 8011ec8:	f3bf 8f6f 	isb	sy
 8011ecc:	f3bf 8f4f 	dsb	sy
 8011ed0:	613b      	str	r3, [r7, #16]
 8011ed2:	e7fe      	b.n	8011ed2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8011ed4:	683b      	ldr	r3, [r7, #0]
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d109      	bne.n	8011eee <xTaskCheckForTimeOut+0x3e>
 8011eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ede:	f383 8811 	msr	BASEPRI, r3
 8011ee2:	f3bf 8f6f 	isb	sy
 8011ee6:	f3bf 8f4f 	dsb	sy
 8011eea:	60fb      	str	r3, [r7, #12]
 8011eec:	e7fe      	b.n	8011eec <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8011eee:	f000 fe4d 	bl	8012b8c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011ef2:	4b1d      	ldr	r3, [pc, #116]	; (8011f68 <xTaskCheckForTimeOut+0xb8>)
 8011ef4:	681b      	ldr	r3, [r3, #0]
 8011ef6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	685b      	ldr	r3, [r3, #4]
 8011efc:	69ba      	ldr	r2, [r7, #24]
 8011efe:	1ad3      	subs	r3, r2, r3
 8011f00:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011f02:	683b      	ldr	r3, [r7, #0]
 8011f04:	681b      	ldr	r3, [r3, #0]
 8011f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f0a:	d102      	bne.n	8011f12 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011f0c:	2300      	movs	r3, #0
 8011f0e:	61fb      	str	r3, [r7, #28]
 8011f10:	e023      	b.n	8011f5a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	681a      	ldr	r2, [r3, #0]
 8011f16:	4b15      	ldr	r3, [pc, #84]	; (8011f6c <xTaskCheckForTimeOut+0xbc>)
 8011f18:	681b      	ldr	r3, [r3, #0]
 8011f1a:	429a      	cmp	r2, r3
 8011f1c:	d007      	beq.n	8011f2e <xTaskCheckForTimeOut+0x7e>
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	685b      	ldr	r3, [r3, #4]
 8011f22:	69ba      	ldr	r2, [r7, #24]
 8011f24:	429a      	cmp	r2, r3
 8011f26:	d302      	bcc.n	8011f2e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011f28:	2301      	movs	r3, #1
 8011f2a:	61fb      	str	r3, [r7, #28]
 8011f2c:	e015      	b.n	8011f5a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011f2e:	683b      	ldr	r3, [r7, #0]
 8011f30:	681b      	ldr	r3, [r3, #0]
 8011f32:	697a      	ldr	r2, [r7, #20]
 8011f34:	429a      	cmp	r2, r3
 8011f36:	d20b      	bcs.n	8011f50 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011f38:	683b      	ldr	r3, [r7, #0]
 8011f3a:	681a      	ldr	r2, [r3, #0]
 8011f3c:	697b      	ldr	r3, [r7, #20]
 8011f3e:	1ad2      	subs	r2, r2, r3
 8011f40:	683b      	ldr	r3, [r7, #0]
 8011f42:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011f44:	6878      	ldr	r0, [r7, #4]
 8011f46:	f7ff ff9d 	bl	8011e84 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011f4a:	2300      	movs	r3, #0
 8011f4c:	61fb      	str	r3, [r7, #28]
 8011f4e:	e004      	b.n	8011f5a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8011f50:	683b      	ldr	r3, [r7, #0]
 8011f52:	2200      	movs	r2, #0
 8011f54:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011f56:	2301      	movs	r3, #1
 8011f58:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8011f5a:	f000 fe45 	bl	8012be8 <vPortExitCritical>

	return xReturn;
 8011f5e:	69fb      	ldr	r3, [r7, #28]
}
 8011f60:	4618      	mov	r0, r3
 8011f62:	3720      	adds	r7, #32
 8011f64:	46bd      	mov	sp, r7
 8011f66:	bd80      	pop	{r7, pc}
 8011f68:	2000158c 	.word	0x2000158c
 8011f6c:	200015a0 	.word	0x200015a0

08011f70 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011f70:	b480      	push	{r7}
 8011f72:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011f74:	4b03      	ldr	r3, [pc, #12]	; (8011f84 <vTaskMissedYield+0x14>)
 8011f76:	2201      	movs	r2, #1
 8011f78:	601a      	str	r2, [r3, #0]
}
 8011f7a:	bf00      	nop
 8011f7c:	46bd      	mov	sp, r7
 8011f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f82:	4770      	bx	lr
 8011f84:	2000159c 	.word	0x2000159c

08011f88 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011f88:	b580      	push	{r7, lr}
 8011f8a:	b082      	sub	sp, #8
 8011f8c:	af00      	add	r7, sp, #0
 8011f8e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011f90:	f000 f852 	bl	8012038 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011f94:	4b06      	ldr	r3, [pc, #24]	; (8011fb0 <prvIdleTask+0x28>)
 8011f96:	681b      	ldr	r3, [r3, #0]
 8011f98:	2b01      	cmp	r3, #1
 8011f9a:	d9f9      	bls.n	8011f90 <prvIdleTask+0x8>
			{
				taskYIELD();
 8011f9c:	4b05      	ldr	r3, [pc, #20]	; (8011fb4 <prvIdleTask+0x2c>)
 8011f9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011fa2:	601a      	str	r2, [r3, #0]
 8011fa4:	f3bf 8f4f 	dsb	sy
 8011fa8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8011fac:	e7f0      	b.n	8011f90 <prvIdleTask+0x8>
 8011fae:	bf00      	nop
 8011fb0:	2000148c 	.word	0x2000148c
 8011fb4:	e000ed04 	.word	0xe000ed04

08011fb8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011fb8:	b580      	push	{r7, lr}
 8011fba:	b082      	sub	sp, #8
 8011fbc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011fbe:	2300      	movs	r3, #0
 8011fc0:	607b      	str	r3, [r7, #4]
 8011fc2:	e00c      	b.n	8011fde <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011fc4:	687a      	ldr	r2, [r7, #4]
 8011fc6:	4613      	mov	r3, r2
 8011fc8:	009b      	lsls	r3, r3, #2
 8011fca:	4413      	add	r3, r2
 8011fcc:	009b      	lsls	r3, r3, #2
 8011fce:	4a12      	ldr	r2, [pc, #72]	; (8012018 <prvInitialiseTaskLists+0x60>)
 8011fd0:	4413      	add	r3, r2
 8011fd2:	4618      	mov	r0, r3
 8011fd4:	f7fe fb1d 	bl	8010612 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	3301      	adds	r3, #1
 8011fdc:	607b      	str	r3, [r7, #4]
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	2b06      	cmp	r3, #6
 8011fe2:	d9ef      	bls.n	8011fc4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011fe4:	480d      	ldr	r0, [pc, #52]	; (801201c <prvInitialiseTaskLists+0x64>)
 8011fe6:	f7fe fb14 	bl	8010612 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011fea:	480d      	ldr	r0, [pc, #52]	; (8012020 <prvInitialiseTaskLists+0x68>)
 8011fec:	f7fe fb11 	bl	8010612 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011ff0:	480c      	ldr	r0, [pc, #48]	; (8012024 <prvInitialiseTaskLists+0x6c>)
 8011ff2:	f7fe fb0e 	bl	8010612 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011ff6:	480c      	ldr	r0, [pc, #48]	; (8012028 <prvInitialiseTaskLists+0x70>)
 8011ff8:	f7fe fb0b 	bl	8010612 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011ffc:	480b      	ldr	r0, [pc, #44]	; (801202c <prvInitialiseTaskLists+0x74>)
 8011ffe:	f7fe fb08 	bl	8010612 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8012002:	4b0b      	ldr	r3, [pc, #44]	; (8012030 <prvInitialiseTaskLists+0x78>)
 8012004:	4a05      	ldr	r2, [pc, #20]	; (801201c <prvInitialiseTaskLists+0x64>)
 8012006:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8012008:	4b0a      	ldr	r3, [pc, #40]	; (8012034 <prvInitialiseTaskLists+0x7c>)
 801200a:	4a05      	ldr	r2, [pc, #20]	; (8012020 <prvInitialiseTaskLists+0x68>)
 801200c:	601a      	str	r2, [r3, #0]
}
 801200e:	bf00      	nop
 8012010:	3708      	adds	r7, #8
 8012012:	46bd      	mov	sp, r7
 8012014:	bd80      	pop	{r7, pc}
 8012016:	bf00      	nop
 8012018:	2000148c 	.word	0x2000148c
 801201c:	20001518 	.word	0x20001518
 8012020:	2000152c 	.word	0x2000152c
 8012024:	20001548 	.word	0x20001548
 8012028:	2000155c 	.word	0x2000155c
 801202c:	20001574 	.word	0x20001574
 8012030:	20001540 	.word	0x20001540
 8012034:	20001544 	.word	0x20001544

08012038 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8012038:	b580      	push	{r7, lr}
 801203a:	b082      	sub	sp, #8
 801203c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801203e:	e019      	b.n	8012074 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8012040:	f000 fda4 	bl	8012b8c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8012044:	4b0f      	ldr	r3, [pc, #60]	; (8012084 <prvCheckTasksWaitingTermination+0x4c>)
 8012046:	68db      	ldr	r3, [r3, #12]
 8012048:	68db      	ldr	r3, [r3, #12]
 801204a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	3304      	adds	r3, #4
 8012050:	4618      	mov	r0, r3
 8012052:	f7fe fb68 	bl	8010726 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8012056:	4b0c      	ldr	r3, [pc, #48]	; (8012088 <prvCheckTasksWaitingTermination+0x50>)
 8012058:	681b      	ldr	r3, [r3, #0]
 801205a:	3b01      	subs	r3, #1
 801205c:	4a0a      	ldr	r2, [pc, #40]	; (8012088 <prvCheckTasksWaitingTermination+0x50>)
 801205e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8012060:	4b0a      	ldr	r3, [pc, #40]	; (801208c <prvCheckTasksWaitingTermination+0x54>)
 8012062:	681b      	ldr	r3, [r3, #0]
 8012064:	3b01      	subs	r3, #1
 8012066:	4a09      	ldr	r2, [pc, #36]	; (801208c <prvCheckTasksWaitingTermination+0x54>)
 8012068:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801206a:	f000 fdbd 	bl	8012be8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801206e:	6878      	ldr	r0, [r7, #4]
 8012070:	f000 f80e 	bl	8012090 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012074:	4b05      	ldr	r3, [pc, #20]	; (801208c <prvCheckTasksWaitingTermination+0x54>)
 8012076:	681b      	ldr	r3, [r3, #0]
 8012078:	2b00      	cmp	r3, #0
 801207a:	d1e1      	bne.n	8012040 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801207c:	bf00      	nop
 801207e:	3708      	adds	r7, #8
 8012080:	46bd      	mov	sp, r7
 8012082:	bd80      	pop	{r7, pc}
 8012084:	2000155c 	.word	0x2000155c
 8012088:	20001588 	.word	0x20001588
 801208c:	20001570 	.word	0x20001570

08012090 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8012090:	b580      	push	{r7, lr}
 8012092:	b084      	sub	sp, #16
 8012094:	af00      	add	r7, sp, #0
 8012096:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801209e:	2b00      	cmp	r3, #0
 80120a0:	d108      	bne.n	80120b4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80120a6:	4618      	mov	r0, r3
 80120a8:	f000 ff4c 	bl	8012f44 <vPortFree>
				vPortFree( pxTCB );
 80120ac:	6878      	ldr	r0, [r7, #4]
 80120ae:	f000 ff49 	bl	8012f44 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80120b2:	e017      	b.n	80120e4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80120ba:	2b01      	cmp	r3, #1
 80120bc:	d103      	bne.n	80120c6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80120be:	6878      	ldr	r0, [r7, #4]
 80120c0:	f000 ff40 	bl	8012f44 <vPortFree>
	}
 80120c4:	e00e      	b.n	80120e4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80120cc:	2b02      	cmp	r3, #2
 80120ce:	d009      	beq.n	80120e4 <prvDeleteTCB+0x54>
 80120d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120d4:	f383 8811 	msr	BASEPRI, r3
 80120d8:	f3bf 8f6f 	isb	sy
 80120dc:	f3bf 8f4f 	dsb	sy
 80120e0:	60fb      	str	r3, [r7, #12]
 80120e2:	e7fe      	b.n	80120e2 <prvDeleteTCB+0x52>
	}
 80120e4:	bf00      	nop
 80120e6:	3710      	adds	r7, #16
 80120e8:	46bd      	mov	sp, r7
 80120ea:	bd80      	pop	{r7, pc}

080120ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80120ec:	b480      	push	{r7}
 80120ee:	b083      	sub	sp, #12
 80120f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80120f2:	4b0f      	ldr	r3, [pc, #60]	; (8012130 <prvResetNextTaskUnblockTime+0x44>)
 80120f4:	681b      	ldr	r3, [r3, #0]
 80120f6:	681b      	ldr	r3, [r3, #0]
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d101      	bne.n	8012100 <prvResetNextTaskUnblockTime+0x14>
 80120fc:	2301      	movs	r3, #1
 80120fe:	e000      	b.n	8012102 <prvResetNextTaskUnblockTime+0x16>
 8012100:	2300      	movs	r3, #0
 8012102:	2b00      	cmp	r3, #0
 8012104:	d004      	beq.n	8012110 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8012106:	4b0b      	ldr	r3, [pc, #44]	; (8012134 <prvResetNextTaskUnblockTime+0x48>)
 8012108:	f04f 32ff 	mov.w	r2, #4294967295
 801210c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801210e:	e008      	b.n	8012122 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8012110:	4b07      	ldr	r3, [pc, #28]	; (8012130 <prvResetNextTaskUnblockTime+0x44>)
 8012112:	681b      	ldr	r3, [r3, #0]
 8012114:	68db      	ldr	r3, [r3, #12]
 8012116:	68db      	ldr	r3, [r3, #12]
 8012118:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	685b      	ldr	r3, [r3, #4]
 801211e:	4a05      	ldr	r2, [pc, #20]	; (8012134 <prvResetNextTaskUnblockTime+0x48>)
 8012120:	6013      	str	r3, [r2, #0]
}
 8012122:	bf00      	nop
 8012124:	370c      	adds	r7, #12
 8012126:	46bd      	mov	sp, r7
 8012128:	f85d 7b04 	ldr.w	r7, [sp], #4
 801212c:	4770      	bx	lr
 801212e:	bf00      	nop
 8012130:	20001540 	.word	0x20001540
 8012134:	200015a8 	.word	0x200015a8

08012138 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8012138:	b480      	push	{r7}
 801213a:	b083      	sub	sp, #12
 801213c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801213e:	4b0b      	ldr	r3, [pc, #44]	; (801216c <xTaskGetSchedulerState+0x34>)
 8012140:	681b      	ldr	r3, [r3, #0]
 8012142:	2b00      	cmp	r3, #0
 8012144:	d102      	bne.n	801214c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8012146:	2301      	movs	r3, #1
 8012148:	607b      	str	r3, [r7, #4]
 801214a:	e008      	b.n	801215e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801214c:	4b08      	ldr	r3, [pc, #32]	; (8012170 <xTaskGetSchedulerState+0x38>)
 801214e:	681b      	ldr	r3, [r3, #0]
 8012150:	2b00      	cmp	r3, #0
 8012152:	d102      	bne.n	801215a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8012154:	2302      	movs	r3, #2
 8012156:	607b      	str	r3, [r7, #4]
 8012158:	e001      	b.n	801215e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801215a:	2300      	movs	r3, #0
 801215c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801215e:	687b      	ldr	r3, [r7, #4]
	}
 8012160:	4618      	mov	r0, r3
 8012162:	370c      	adds	r7, #12
 8012164:	46bd      	mov	sp, r7
 8012166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801216a:	4770      	bx	lr
 801216c:	20001594 	.word	0x20001594
 8012170:	200015b0 	.word	0x200015b0

08012174 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8012174:	b580      	push	{r7, lr}
 8012176:	b084      	sub	sp, #16
 8012178:	af00      	add	r7, sp, #0
 801217a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8012180:	2300      	movs	r3, #0
 8012182:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	2b00      	cmp	r3, #0
 8012188:	d06e      	beq.n	8012268 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801218a:	68bb      	ldr	r3, [r7, #8]
 801218c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801218e:	4b39      	ldr	r3, [pc, #228]	; (8012274 <xTaskPriorityInherit+0x100>)
 8012190:	681b      	ldr	r3, [r3, #0]
 8012192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012194:	429a      	cmp	r2, r3
 8012196:	d25e      	bcs.n	8012256 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012198:	68bb      	ldr	r3, [r7, #8]
 801219a:	699b      	ldr	r3, [r3, #24]
 801219c:	2b00      	cmp	r3, #0
 801219e:	db06      	blt.n	80121ae <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80121a0:	4b34      	ldr	r3, [pc, #208]	; (8012274 <xTaskPriorityInherit+0x100>)
 80121a2:	681b      	ldr	r3, [r3, #0]
 80121a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121a6:	f1c3 0207 	rsb	r2, r3, #7
 80121aa:	68bb      	ldr	r3, [r7, #8]
 80121ac:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80121ae:	68bb      	ldr	r3, [r7, #8]
 80121b0:	6959      	ldr	r1, [r3, #20]
 80121b2:	68bb      	ldr	r3, [r7, #8]
 80121b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80121b6:	4613      	mov	r3, r2
 80121b8:	009b      	lsls	r3, r3, #2
 80121ba:	4413      	add	r3, r2
 80121bc:	009b      	lsls	r3, r3, #2
 80121be:	4a2e      	ldr	r2, [pc, #184]	; (8012278 <xTaskPriorityInherit+0x104>)
 80121c0:	4413      	add	r3, r2
 80121c2:	4299      	cmp	r1, r3
 80121c4:	d101      	bne.n	80121ca <xTaskPriorityInherit+0x56>
 80121c6:	2301      	movs	r3, #1
 80121c8:	e000      	b.n	80121cc <xTaskPriorityInherit+0x58>
 80121ca:	2300      	movs	r3, #0
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d03a      	beq.n	8012246 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80121d0:	68bb      	ldr	r3, [r7, #8]
 80121d2:	3304      	adds	r3, #4
 80121d4:	4618      	mov	r0, r3
 80121d6:	f7fe faa6 	bl	8010726 <uxListRemove>
 80121da:	4603      	mov	r3, r0
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d115      	bne.n	801220c <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80121e0:	68bb      	ldr	r3, [r7, #8]
 80121e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80121e4:	4924      	ldr	r1, [pc, #144]	; (8012278 <xTaskPriorityInherit+0x104>)
 80121e6:	4613      	mov	r3, r2
 80121e8:	009b      	lsls	r3, r3, #2
 80121ea:	4413      	add	r3, r2
 80121ec:	009b      	lsls	r3, r3, #2
 80121ee:	440b      	add	r3, r1
 80121f0:	681b      	ldr	r3, [r3, #0]
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	d10a      	bne.n	801220c <xTaskPriorityInherit+0x98>
 80121f6:	68bb      	ldr	r3, [r7, #8]
 80121f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121fa:	2201      	movs	r2, #1
 80121fc:	fa02 f303 	lsl.w	r3, r2, r3
 8012200:	43da      	mvns	r2, r3
 8012202:	4b1e      	ldr	r3, [pc, #120]	; (801227c <xTaskPriorityInherit+0x108>)
 8012204:	681b      	ldr	r3, [r3, #0]
 8012206:	4013      	ands	r3, r2
 8012208:	4a1c      	ldr	r2, [pc, #112]	; (801227c <xTaskPriorityInherit+0x108>)
 801220a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801220c:	4b19      	ldr	r3, [pc, #100]	; (8012274 <xTaskPriorityInherit+0x100>)
 801220e:	681b      	ldr	r3, [r3, #0]
 8012210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012212:	68bb      	ldr	r3, [r7, #8]
 8012214:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8012216:	68bb      	ldr	r3, [r7, #8]
 8012218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801221a:	2201      	movs	r2, #1
 801221c:	409a      	lsls	r2, r3
 801221e:	4b17      	ldr	r3, [pc, #92]	; (801227c <xTaskPriorityInherit+0x108>)
 8012220:	681b      	ldr	r3, [r3, #0]
 8012222:	4313      	orrs	r3, r2
 8012224:	4a15      	ldr	r2, [pc, #84]	; (801227c <xTaskPriorityInherit+0x108>)
 8012226:	6013      	str	r3, [r2, #0]
 8012228:	68bb      	ldr	r3, [r7, #8]
 801222a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801222c:	4613      	mov	r3, r2
 801222e:	009b      	lsls	r3, r3, #2
 8012230:	4413      	add	r3, r2
 8012232:	009b      	lsls	r3, r3, #2
 8012234:	4a10      	ldr	r2, [pc, #64]	; (8012278 <xTaskPriorityInherit+0x104>)
 8012236:	441a      	add	r2, r3
 8012238:	68bb      	ldr	r3, [r7, #8]
 801223a:	3304      	adds	r3, #4
 801223c:	4619      	mov	r1, r3
 801223e:	4610      	mov	r0, r2
 8012240:	f7fe fa14 	bl	801066c <vListInsertEnd>
 8012244:	e004      	b.n	8012250 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012246:	4b0b      	ldr	r3, [pc, #44]	; (8012274 <xTaskPriorityInherit+0x100>)
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801224c:	68bb      	ldr	r3, [r7, #8]
 801224e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8012250:	2301      	movs	r3, #1
 8012252:	60fb      	str	r3, [r7, #12]
 8012254:	e008      	b.n	8012268 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8012256:	68bb      	ldr	r3, [r7, #8]
 8012258:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801225a:	4b06      	ldr	r3, [pc, #24]	; (8012274 <xTaskPriorityInherit+0x100>)
 801225c:	681b      	ldr	r3, [r3, #0]
 801225e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012260:	429a      	cmp	r2, r3
 8012262:	d201      	bcs.n	8012268 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8012264:	2301      	movs	r3, #1
 8012266:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012268:	68fb      	ldr	r3, [r7, #12]
	}
 801226a:	4618      	mov	r0, r3
 801226c:	3710      	adds	r7, #16
 801226e:	46bd      	mov	sp, r7
 8012270:	bd80      	pop	{r7, pc}
 8012272:	bf00      	nop
 8012274:	20001488 	.word	0x20001488
 8012278:	2000148c 	.word	0x2000148c
 801227c:	20001590 	.word	0x20001590

08012280 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8012280:	b580      	push	{r7, lr}
 8012282:	b086      	sub	sp, #24
 8012284:	af00      	add	r7, sp, #0
 8012286:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801228c:	2300      	movs	r3, #0
 801228e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	2b00      	cmp	r3, #0
 8012294:	d06c      	beq.n	8012370 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8012296:	4b39      	ldr	r3, [pc, #228]	; (801237c <xTaskPriorityDisinherit+0xfc>)
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	693a      	ldr	r2, [r7, #16]
 801229c:	429a      	cmp	r2, r3
 801229e:	d009      	beq.n	80122b4 <xTaskPriorityDisinherit+0x34>
 80122a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122a4:	f383 8811 	msr	BASEPRI, r3
 80122a8:	f3bf 8f6f 	isb	sy
 80122ac:	f3bf 8f4f 	dsb	sy
 80122b0:	60fb      	str	r3, [r7, #12]
 80122b2:	e7fe      	b.n	80122b2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80122b4:	693b      	ldr	r3, [r7, #16]
 80122b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d109      	bne.n	80122d0 <xTaskPriorityDisinherit+0x50>
 80122bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122c0:	f383 8811 	msr	BASEPRI, r3
 80122c4:	f3bf 8f6f 	isb	sy
 80122c8:	f3bf 8f4f 	dsb	sy
 80122cc:	60bb      	str	r3, [r7, #8]
 80122ce:	e7fe      	b.n	80122ce <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80122d0:	693b      	ldr	r3, [r7, #16]
 80122d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80122d4:	1e5a      	subs	r2, r3, #1
 80122d6:	693b      	ldr	r3, [r7, #16]
 80122d8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80122da:	693b      	ldr	r3, [r7, #16]
 80122dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80122de:	693b      	ldr	r3, [r7, #16]
 80122e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80122e2:	429a      	cmp	r2, r3
 80122e4:	d044      	beq.n	8012370 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80122e6:	693b      	ldr	r3, [r7, #16]
 80122e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d140      	bne.n	8012370 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80122ee:	693b      	ldr	r3, [r7, #16]
 80122f0:	3304      	adds	r3, #4
 80122f2:	4618      	mov	r0, r3
 80122f4:	f7fe fa17 	bl	8010726 <uxListRemove>
 80122f8:	4603      	mov	r3, r0
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d115      	bne.n	801232a <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80122fe:	693b      	ldr	r3, [r7, #16]
 8012300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012302:	491f      	ldr	r1, [pc, #124]	; (8012380 <xTaskPriorityDisinherit+0x100>)
 8012304:	4613      	mov	r3, r2
 8012306:	009b      	lsls	r3, r3, #2
 8012308:	4413      	add	r3, r2
 801230a:	009b      	lsls	r3, r3, #2
 801230c:	440b      	add	r3, r1
 801230e:	681b      	ldr	r3, [r3, #0]
 8012310:	2b00      	cmp	r3, #0
 8012312:	d10a      	bne.n	801232a <xTaskPriorityDisinherit+0xaa>
 8012314:	693b      	ldr	r3, [r7, #16]
 8012316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012318:	2201      	movs	r2, #1
 801231a:	fa02 f303 	lsl.w	r3, r2, r3
 801231e:	43da      	mvns	r2, r3
 8012320:	4b18      	ldr	r3, [pc, #96]	; (8012384 <xTaskPriorityDisinherit+0x104>)
 8012322:	681b      	ldr	r3, [r3, #0]
 8012324:	4013      	ands	r3, r2
 8012326:	4a17      	ldr	r2, [pc, #92]	; (8012384 <xTaskPriorityDisinherit+0x104>)
 8012328:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801232a:	693b      	ldr	r3, [r7, #16]
 801232c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801232e:	693b      	ldr	r3, [r7, #16]
 8012330:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012332:	693b      	ldr	r3, [r7, #16]
 8012334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012336:	f1c3 0207 	rsb	r2, r3, #7
 801233a:	693b      	ldr	r3, [r7, #16]
 801233c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801233e:	693b      	ldr	r3, [r7, #16]
 8012340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012342:	2201      	movs	r2, #1
 8012344:	409a      	lsls	r2, r3
 8012346:	4b0f      	ldr	r3, [pc, #60]	; (8012384 <xTaskPriorityDisinherit+0x104>)
 8012348:	681b      	ldr	r3, [r3, #0]
 801234a:	4313      	orrs	r3, r2
 801234c:	4a0d      	ldr	r2, [pc, #52]	; (8012384 <xTaskPriorityDisinherit+0x104>)
 801234e:	6013      	str	r3, [r2, #0]
 8012350:	693b      	ldr	r3, [r7, #16]
 8012352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012354:	4613      	mov	r3, r2
 8012356:	009b      	lsls	r3, r3, #2
 8012358:	4413      	add	r3, r2
 801235a:	009b      	lsls	r3, r3, #2
 801235c:	4a08      	ldr	r2, [pc, #32]	; (8012380 <xTaskPriorityDisinherit+0x100>)
 801235e:	441a      	add	r2, r3
 8012360:	693b      	ldr	r3, [r7, #16]
 8012362:	3304      	adds	r3, #4
 8012364:	4619      	mov	r1, r3
 8012366:	4610      	mov	r0, r2
 8012368:	f7fe f980 	bl	801066c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801236c:	2301      	movs	r3, #1
 801236e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012370:	697b      	ldr	r3, [r7, #20]
	}
 8012372:	4618      	mov	r0, r3
 8012374:	3718      	adds	r7, #24
 8012376:	46bd      	mov	sp, r7
 8012378:	bd80      	pop	{r7, pc}
 801237a:	bf00      	nop
 801237c:	20001488 	.word	0x20001488
 8012380:	2000148c 	.word	0x2000148c
 8012384:	20001590 	.word	0x20001590

08012388 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8012388:	b580      	push	{r7, lr}
 801238a:	b088      	sub	sp, #32
 801238c:	af00      	add	r7, sp, #0
 801238e:	6078      	str	r0, [r7, #4]
 8012390:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8012396:	2301      	movs	r3, #1
 8012398:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	2b00      	cmp	r3, #0
 801239e:	f000 8086 	beq.w	80124ae <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80123a2:	69bb      	ldr	r3, [r7, #24]
 80123a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d109      	bne.n	80123be <vTaskPriorityDisinheritAfterTimeout+0x36>
 80123aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123ae:	f383 8811 	msr	BASEPRI, r3
 80123b2:	f3bf 8f6f 	isb	sy
 80123b6:	f3bf 8f4f 	dsb	sy
 80123ba:	60fb      	str	r3, [r7, #12]
 80123bc:	e7fe      	b.n	80123bc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80123be:	69bb      	ldr	r3, [r7, #24]
 80123c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80123c2:	683a      	ldr	r2, [r7, #0]
 80123c4:	429a      	cmp	r2, r3
 80123c6:	d902      	bls.n	80123ce <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80123c8:	683b      	ldr	r3, [r7, #0]
 80123ca:	61fb      	str	r3, [r7, #28]
 80123cc:	e002      	b.n	80123d4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80123ce:	69bb      	ldr	r3, [r7, #24]
 80123d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80123d2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80123d4:	69bb      	ldr	r3, [r7, #24]
 80123d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123d8:	69fa      	ldr	r2, [r7, #28]
 80123da:	429a      	cmp	r2, r3
 80123dc:	d067      	beq.n	80124ae <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80123de:	69bb      	ldr	r3, [r7, #24]
 80123e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80123e2:	697a      	ldr	r2, [r7, #20]
 80123e4:	429a      	cmp	r2, r3
 80123e6:	d162      	bne.n	80124ae <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80123e8:	4b33      	ldr	r3, [pc, #204]	; (80124b8 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 80123ea:	681b      	ldr	r3, [r3, #0]
 80123ec:	69ba      	ldr	r2, [r7, #24]
 80123ee:	429a      	cmp	r2, r3
 80123f0:	d109      	bne.n	8012406 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 80123f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123f6:	f383 8811 	msr	BASEPRI, r3
 80123fa:	f3bf 8f6f 	isb	sy
 80123fe:	f3bf 8f4f 	dsb	sy
 8012402:	60bb      	str	r3, [r7, #8]
 8012404:	e7fe      	b.n	8012404 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8012406:	69bb      	ldr	r3, [r7, #24]
 8012408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801240a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801240c:	69bb      	ldr	r3, [r7, #24]
 801240e:	69fa      	ldr	r2, [r7, #28]
 8012410:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012412:	69bb      	ldr	r3, [r7, #24]
 8012414:	699b      	ldr	r3, [r3, #24]
 8012416:	2b00      	cmp	r3, #0
 8012418:	db04      	blt.n	8012424 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801241a:	69fb      	ldr	r3, [r7, #28]
 801241c:	f1c3 0207 	rsb	r2, r3, #7
 8012420:	69bb      	ldr	r3, [r7, #24]
 8012422:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8012424:	69bb      	ldr	r3, [r7, #24]
 8012426:	6959      	ldr	r1, [r3, #20]
 8012428:	693a      	ldr	r2, [r7, #16]
 801242a:	4613      	mov	r3, r2
 801242c:	009b      	lsls	r3, r3, #2
 801242e:	4413      	add	r3, r2
 8012430:	009b      	lsls	r3, r3, #2
 8012432:	4a22      	ldr	r2, [pc, #136]	; (80124bc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8012434:	4413      	add	r3, r2
 8012436:	4299      	cmp	r1, r3
 8012438:	d101      	bne.n	801243e <vTaskPriorityDisinheritAfterTimeout+0xb6>
 801243a:	2301      	movs	r3, #1
 801243c:	e000      	b.n	8012440 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 801243e:	2300      	movs	r3, #0
 8012440:	2b00      	cmp	r3, #0
 8012442:	d034      	beq.n	80124ae <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012444:	69bb      	ldr	r3, [r7, #24]
 8012446:	3304      	adds	r3, #4
 8012448:	4618      	mov	r0, r3
 801244a:	f7fe f96c 	bl	8010726 <uxListRemove>
 801244e:	4603      	mov	r3, r0
 8012450:	2b00      	cmp	r3, #0
 8012452:	d115      	bne.n	8012480 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8012454:	69bb      	ldr	r3, [r7, #24]
 8012456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012458:	4918      	ldr	r1, [pc, #96]	; (80124bc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 801245a:	4613      	mov	r3, r2
 801245c:	009b      	lsls	r3, r3, #2
 801245e:	4413      	add	r3, r2
 8012460:	009b      	lsls	r3, r3, #2
 8012462:	440b      	add	r3, r1
 8012464:	681b      	ldr	r3, [r3, #0]
 8012466:	2b00      	cmp	r3, #0
 8012468:	d10a      	bne.n	8012480 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 801246a:	69bb      	ldr	r3, [r7, #24]
 801246c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801246e:	2201      	movs	r2, #1
 8012470:	fa02 f303 	lsl.w	r3, r2, r3
 8012474:	43da      	mvns	r2, r3
 8012476:	4b12      	ldr	r3, [pc, #72]	; (80124c0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8012478:	681b      	ldr	r3, [r3, #0]
 801247a:	4013      	ands	r3, r2
 801247c:	4a10      	ldr	r2, [pc, #64]	; (80124c0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 801247e:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8012480:	69bb      	ldr	r3, [r7, #24]
 8012482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012484:	2201      	movs	r2, #1
 8012486:	409a      	lsls	r2, r3
 8012488:	4b0d      	ldr	r3, [pc, #52]	; (80124c0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 801248a:	681b      	ldr	r3, [r3, #0]
 801248c:	4313      	orrs	r3, r2
 801248e:	4a0c      	ldr	r2, [pc, #48]	; (80124c0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8012490:	6013      	str	r3, [r2, #0]
 8012492:	69bb      	ldr	r3, [r7, #24]
 8012494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012496:	4613      	mov	r3, r2
 8012498:	009b      	lsls	r3, r3, #2
 801249a:	4413      	add	r3, r2
 801249c:	009b      	lsls	r3, r3, #2
 801249e:	4a07      	ldr	r2, [pc, #28]	; (80124bc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80124a0:	441a      	add	r2, r3
 80124a2:	69bb      	ldr	r3, [r7, #24]
 80124a4:	3304      	adds	r3, #4
 80124a6:	4619      	mov	r1, r3
 80124a8:	4610      	mov	r0, r2
 80124aa:	f7fe f8df 	bl	801066c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80124ae:	bf00      	nop
 80124b0:	3720      	adds	r7, #32
 80124b2:	46bd      	mov	sp, r7
 80124b4:	bd80      	pop	{r7, pc}
 80124b6:	bf00      	nop
 80124b8:	20001488 	.word	0x20001488
 80124bc:	2000148c 	.word	0x2000148c
 80124c0:	20001590 	.word	0x20001590

080124c4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80124c4:	b480      	push	{r7}
 80124c6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80124c8:	4b07      	ldr	r3, [pc, #28]	; (80124e8 <pvTaskIncrementMutexHeldCount+0x24>)
 80124ca:	681b      	ldr	r3, [r3, #0]
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d004      	beq.n	80124da <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80124d0:	4b05      	ldr	r3, [pc, #20]	; (80124e8 <pvTaskIncrementMutexHeldCount+0x24>)
 80124d2:	681b      	ldr	r3, [r3, #0]
 80124d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80124d6:	3201      	adds	r2, #1
 80124d8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80124da:	4b03      	ldr	r3, [pc, #12]	; (80124e8 <pvTaskIncrementMutexHeldCount+0x24>)
 80124dc:	681b      	ldr	r3, [r3, #0]
	}
 80124de:	4618      	mov	r0, r3
 80124e0:	46bd      	mov	sp, r7
 80124e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124e6:	4770      	bx	lr
 80124e8:	20001488 	.word	0x20001488

080124ec <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80124ec:	b580      	push	{r7, lr}
 80124ee:	b086      	sub	sp, #24
 80124f0:	af00      	add	r7, sp, #0
 80124f2:	60f8      	str	r0, [r7, #12]
 80124f4:	60b9      	str	r1, [r7, #8]
 80124f6:	607a      	str	r2, [r7, #4]
 80124f8:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80124fa:	f000 fb47 	bl	8012b8c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80124fe:	4b26      	ldr	r3, [pc, #152]	; (8012598 <xTaskNotifyWait+0xac>)
 8012500:	681b      	ldr	r3, [r3, #0]
 8012502:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8012506:	b2db      	uxtb	r3, r3
 8012508:	2b02      	cmp	r3, #2
 801250a:	d01a      	beq.n	8012542 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 801250c:	4b22      	ldr	r3, [pc, #136]	; (8012598 <xTaskNotifyWait+0xac>)
 801250e:	681b      	ldr	r3, [r3, #0]
 8012510:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8012512:	68fa      	ldr	r2, [r7, #12]
 8012514:	43d2      	mvns	r2, r2
 8012516:	400a      	ands	r2, r1
 8012518:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 801251a:	4b1f      	ldr	r3, [pc, #124]	; (8012598 <xTaskNotifyWait+0xac>)
 801251c:	681b      	ldr	r3, [r3, #0]
 801251e:	2201      	movs	r2, #1
 8012520:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 8012524:	683b      	ldr	r3, [r7, #0]
 8012526:	2b00      	cmp	r3, #0
 8012528:	d00b      	beq.n	8012542 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801252a:	2101      	movs	r1, #1
 801252c:	6838      	ldr	r0, [r7, #0]
 801252e:	f000 f99d 	bl	801286c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8012532:	4b1a      	ldr	r3, [pc, #104]	; (801259c <xTaskNotifyWait+0xb0>)
 8012534:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012538:	601a      	str	r2, [r3, #0]
 801253a:	f3bf 8f4f 	dsb	sy
 801253e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8012542:	f000 fb51 	bl	8012be8 <vPortExitCritical>

		taskENTER_CRITICAL();
 8012546:	f000 fb21 	bl	8012b8c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	2b00      	cmp	r3, #0
 801254e:	d004      	beq.n	801255a <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8012550:	4b11      	ldr	r3, [pc, #68]	; (8012598 <xTaskNotifyWait+0xac>)
 8012552:	681b      	ldr	r3, [r3, #0]
 8012554:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801255a:	4b0f      	ldr	r3, [pc, #60]	; (8012598 <xTaskNotifyWait+0xac>)
 801255c:	681b      	ldr	r3, [r3, #0]
 801255e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8012562:	b2db      	uxtb	r3, r3
 8012564:	2b02      	cmp	r3, #2
 8012566:	d002      	beq.n	801256e <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8012568:	2300      	movs	r3, #0
 801256a:	617b      	str	r3, [r7, #20]
 801256c:	e008      	b.n	8012580 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 801256e:	4b0a      	ldr	r3, [pc, #40]	; (8012598 <xTaskNotifyWait+0xac>)
 8012570:	681b      	ldr	r3, [r3, #0]
 8012572:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8012574:	68ba      	ldr	r2, [r7, #8]
 8012576:	43d2      	mvns	r2, r2
 8012578:	400a      	ands	r2, r1
 801257a:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 801257c:	2301      	movs	r3, #1
 801257e:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012580:	4b05      	ldr	r3, [pc, #20]	; (8012598 <xTaskNotifyWait+0xac>)
 8012582:	681b      	ldr	r3, [r3, #0]
 8012584:	2200      	movs	r2, #0
 8012586:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 801258a:	f000 fb2d 	bl	8012be8 <vPortExitCritical>

		return xReturn;
 801258e:	697b      	ldr	r3, [r7, #20]
	}
 8012590:	4618      	mov	r0, r3
 8012592:	3718      	adds	r7, #24
 8012594:	46bd      	mov	sp, r7
 8012596:	bd80      	pop	{r7, pc}
 8012598:	20001488 	.word	0x20001488
 801259c:	e000ed04 	.word	0xe000ed04

080125a0 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80125a0:	b580      	push	{r7, lr}
 80125a2:	b08a      	sub	sp, #40	; 0x28
 80125a4:	af00      	add	r7, sp, #0
 80125a6:	60f8      	str	r0, [r7, #12]
 80125a8:	60b9      	str	r1, [r7, #8]
 80125aa:	603b      	str	r3, [r7, #0]
 80125ac:	4613      	mov	r3, r2
 80125ae:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80125b0:	2301      	movs	r3, #1
 80125b2:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80125b4:	68fb      	ldr	r3, [r7, #12]
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d109      	bne.n	80125ce <xTaskGenericNotify+0x2e>
 80125ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125be:	f383 8811 	msr	BASEPRI, r3
 80125c2:	f3bf 8f6f 	isb	sy
 80125c6:	f3bf 8f4f 	dsb	sy
 80125ca:	61bb      	str	r3, [r7, #24]
 80125cc:	e7fe      	b.n	80125cc <xTaskGenericNotify+0x2c>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 80125ce:	68fb      	ldr	r3, [r7, #12]
 80125d0:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80125d2:	f000 fadb 	bl	8012b8c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80125d6:	683b      	ldr	r3, [r7, #0]
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d003      	beq.n	80125e4 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80125dc:	6a3b      	ldr	r3, [r7, #32]
 80125de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80125e0:	683b      	ldr	r3, [r7, #0]
 80125e2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80125e4:	6a3b      	ldr	r3, [r7, #32]
 80125e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80125ea:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80125ec:	6a3b      	ldr	r3, [r7, #32]
 80125ee:	2202      	movs	r2, #2
 80125f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 80125f4:	79fb      	ldrb	r3, [r7, #7]
 80125f6:	2b04      	cmp	r3, #4
 80125f8:	d827      	bhi.n	801264a <xTaskGenericNotify+0xaa>
 80125fa:	a201      	add	r2, pc, #4	; (adr r2, 8012600 <xTaskGenericNotify+0x60>)
 80125fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012600:	0801264b 	.word	0x0801264b
 8012604:	08012615 	.word	0x08012615
 8012608:	08012623 	.word	0x08012623
 801260c:	0801262f 	.word	0x0801262f
 8012610:	08012637 	.word	0x08012637
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8012614:	6a3b      	ldr	r3, [r7, #32]
 8012616:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012618:	68bb      	ldr	r3, [r7, #8]
 801261a:	431a      	orrs	r2, r3
 801261c:	6a3b      	ldr	r3, [r7, #32]
 801261e:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8012620:	e013      	b.n	801264a <xTaskGenericNotify+0xaa>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8012622:	6a3b      	ldr	r3, [r7, #32]
 8012624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012626:	1c5a      	adds	r2, r3, #1
 8012628:	6a3b      	ldr	r3, [r7, #32]
 801262a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 801262c:	e00d      	b.n	801264a <xTaskGenericNotify+0xaa>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801262e:	6a3b      	ldr	r3, [r7, #32]
 8012630:	68ba      	ldr	r2, [r7, #8]
 8012632:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8012634:	e009      	b.n	801264a <xTaskGenericNotify+0xaa>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8012636:	7ffb      	ldrb	r3, [r7, #31]
 8012638:	2b02      	cmp	r3, #2
 801263a:	d003      	beq.n	8012644 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 801263c:	6a3b      	ldr	r3, [r7, #32]
 801263e:	68ba      	ldr	r2, [r7, #8]
 8012640:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8012642:	e001      	b.n	8012648 <xTaskGenericNotify+0xa8>
						xReturn = pdFAIL;
 8012644:	2300      	movs	r3, #0
 8012646:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8012648:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801264a:	7ffb      	ldrb	r3, [r7, #31]
 801264c:	2b01      	cmp	r3, #1
 801264e:	d138      	bne.n	80126c2 <xTaskGenericNotify+0x122>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012650:	6a3b      	ldr	r3, [r7, #32]
 8012652:	3304      	adds	r3, #4
 8012654:	4618      	mov	r0, r3
 8012656:	f7fe f866 	bl	8010726 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 801265a:	6a3b      	ldr	r3, [r7, #32]
 801265c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801265e:	2201      	movs	r2, #1
 8012660:	409a      	lsls	r2, r3
 8012662:	4b1b      	ldr	r3, [pc, #108]	; (80126d0 <xTaskGenericNotify+0x130>)
 8012664:	681b      	ldr	r3, [r3, #0]
 8012666:	4313      	orrs	r3, r2
 8012668:	4a19      	ldr	r2, [pc, #100]	; (80126d0 <xTaskGenericNotify+0x130>)
 801266a:	6013      	str	r3, [r2, #0]
 801266c:	6a3b      	ldr	r3, [r7, #32]
 801266e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012670:	4613      	mov	r3, r2
 8012672:	009b      	lsls	r3, r3, #2
 8012674:	4413      	add	r3, r2
 8012676:	009b      	lsls	r3, r3, #2
 8012678:	4a16      	ldr	r2, [pc, #88]	; (80126d4 <xTaskGenericNotify+0x134>)
 801267a:	441a      	add	r2, r3
 801267c:	6a3b      	ldr	r3, [r7, #32]
 801267e:	3304      	adds	r3, #4
 8012680:	4619      	mov	r1, r3
 8012682:	4610      	mov	r0, r2
 8012684:	f7fd fff2 	bl	801066c <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8012688:	6a3b      	ldr	r3, [r7, #32]
 801268a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801268c:	2b00      	cmp	r3, #0
 801268e:	d009      	beq.n	80126a4 <xTaskGenericNotify+0x104>
 8012690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012694:	f383 8811 	msr	BASEPRI, r3
 8012698:	f3bf 8f6f 	isb	sy
 801269c:	f3bf 8f4f 	dsb	sy
 80126a0:	617b      	str	r3, [r7, #20]
 80126a2:	e7fe      	b.n	80126a2 <xTaskGenericNotify+0x102>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80126a4:	6a3b      	ldr	r3, [r7, #32]
 80126a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80126a8:	4b0b      	ldr	r3, [pc, #44]	; (80126d8 <xTaskGenericNotify+0x138>)
 80126aa:	681b      	ldr	r3, [r3, #0]
 80126ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80126ae:	429a      	cmp	r2, r3
 80126b0:	d907      	bls.n	80126c2 <xTaskGenericNotify+0x122>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80126b2:	4b0a      	ldr	r3, [pc, #40]	; (80126dc <xTaskGenericNotify+0x13c>)
 80126b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80126b8:	601a      	str	r2, [r3, #0]
 80126ba:	f3bf 8f4f 	dsb	sy
 80126be:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80126c2:	f000 fa91 	bl	8012be8 <vPortExitCritical>

		return xReturn;
 80126c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80126c8:	4618      	mov	r0, r3
 80126ca:	3728      	adds	r7, #40	; 0x28
 80126cc:	46bd      	mov	sp, r7
 80126ce:	bd80      	pop	{r7, pc}
 80126d0:	20001590 	.word	0x20001590
 80126d4:	2000148c 	.word	0x2000148c
 80126d8:	20001488 	.word	0x20001488
 80126dc:	e000ed04 	.word	0xe000ed04

080126e0 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80126e0:	b580      	push	{r7, lr}
 80126e2:	b08e      	sub	sp, #56	; 0x38
 80126e4:	af00      	add	r7, sp, #0
 80126e6:	60f8      	str	r0, [r7, #12]
 80126e8:	60b9      	str	r1, [r7, #8]
 80126ea:	603b      	str	r3, [r7, #0]
 80126ec:	4613      	mov	r3, r2
 80126ee:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80126f0:	2301      	movs	r3, #1
 80126f2:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80126f4:	68fb      	ldr	r3, [r7, #12]
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d109      	bne.n	801270e <xTaskGenericNotifyFromISR+0x2e>
 80126fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126fe:	f383 8811 	msr	BASEPRI, r3
 8012702:	f3bf 8f6f 	isb	sy
 8012706:	f3bf 8f4f 	dsb	sy
 801270a:	627b      	str	r3, [r7, #36]	; 0x24
 801270c:	e7fe      	b.n	801270c <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801270e:	f000 fb19 	bl	8012d44 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 8012712:	68fb      	ldr	r3, [r7, #12]
 8012714:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8012716:	f3ef 8211 	mrs	r2, BASEPRI
 801271a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801271e:	f383 8811 	msr	BASEPRI, r3
 8012722:	f3bf 8f6f 	isb	sy
 8012726:	f3bf 8f4f 	dsb	sy
 801272a:	623a      	str	r2, [r7, #32]
 801272c:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 801272e:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012730:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8012732:	683b      	ldr	r3, [r7, #0]
 8012734:	2b00      	cmp	r3, #0
 8012736:	d003      	beq.n	8012740 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8012738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801273a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801273c:	683b      	ldr	r3, [r7, #0]
 801273e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8012740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012742:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8012746:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801274a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801274c:	2202      	movs	r2, #2
 801274e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8012752:	79fb      	ldrb	r3, [r7, #7]
 8012754:	2b04      	cmp	r3, #4
 8012756:	d829      	bhi.n	80127ac <xTaskGenericNotifyFromISR+0xcc>
 8012758:	a201      	add	r2, pc, #4	; (adr r2, 8012760 <xTaskGenericNotifyFromISR+0x80>)
 801275a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801275e:	bf00      	nop
 8012760:	080127ad 	.word	0x080127ad
 8012764:	08012775 	.word	0x08012775
 8012768:	08012783 	.word	0x08012783
 801276c:	0801278f 	.word	0x0801278f
 8012770:	08012797 	.word	0x08012797
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8012774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012776:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012778:	68bb      	ldr	r3, [r7, #8]
 801277a:	431a      	orrs	r2, r3
 801277c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801277e:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8012780:	e014      	b.n	80127ac <xTaskGenericNotifyFromISR+0xcc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8012782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012786:	1c5a      	adds	r2, r3, #1
 8012788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801278a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 801278c:	e00e      	b.n	80127ac <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801278e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012790:	68ba      	ldr	r2, [r7, #8]
 8012792:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8012794:	e00a      	b.n	80127ac <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8012796:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801279a:	2b02      	cmp	r3, #2
 801279c:	d003      	beq.n	80127a6 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 801279e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127a0:	68ba      	ldr	r2, [r7, #8]
 80127a2:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80127a4:	e001      	b.n	80127aa <xTaskGenericNotifyFromISR+0xca>
						xReturn = pdFAIL;
 80127a6:	2300      	movs	r3, #0
 80127a8:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 80127aa:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80127ac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80127b0:	2b01      	cmp	r3, #1
 80127b2:	d145      	bne.n	8012840 <xTaskGenericNotifyFromISR+0x160>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80127b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	d009      	beq.n	80127d0 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 80127bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127c0:	f383 8811 	msr	BASEPRI, r3
 80127c4:	f3bf 8f6f 	isb	sy
 80127c8:	f3bf 8f4f 	dsb	sy
 80127cc:	61bb      	str	r3, [r7, #24]
 80127ce:	e7fe      	b.n	80127ce <xTaskGenericNotifyFromISR+0xee>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80127d0:	4b20      	ldr	r3, [pc, #128]	; (8012854 <xTaskGenericNotifyFromISR+0x174>)
 80127d2:	681b      	ldr	r3, [r3, #0]
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	d11c      	bne.n	8012812 <xTaskGenericNotifyFromISR+0x132>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80127d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127da:	3304      	adds	r3, #4
 80127dc:	4618      	mov	r0, r3
 80127de:	f7fd ffa2 	bl	8010726 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80127e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80127e6:	2201      	movs	r2, #1
 80127e8:	409a      	lsls	r2, r3
 80127ea:	4b1b      	ldr	r3, [pc, #108]	; (8012858 <xTaskGenericNotifyFromISR+0x178>)
 80127ec:	681b      	ldr	r3, [r3, #0]
 80127ee:	4313      	orrs	r3, r2
 80127f0:	4a19      	ldr	r2, [pc, #100]	; (8012858 <xTaskGenericNotifyFromISR+0x178>)
 80127f2:	6013      	str	r3, [r2, #0]
 80127f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80127f8:	4613      	mov	r3, r2
 80127fa:	009b      	lsls	r3, r3, #2
 80127fc:	4413      	add	r3, r2
 80127fe:	009b      	lsls	r3, r3, #2
 8012800:	4a16      	ldr	r2, [pc, #88]	; (801285c <xTaskGenericNotifyFromISR+0x17c>)
 8012802:	441a      	add	r2, r3
 8012804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012806:	3304      	adds	r3, #4
 8012808:	4619      	mov	r1, r3
 801280a:	4610      	mov	r0, r2
 801280c:	f7fd ff2e 	bl	801066c <vListInsertEnd>
 8012810:	e005      	b.n	801281e <xTaskGenericNotifyFromISR+0x13e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8012812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012814:	3318      	adds	r3, #24
 8012816:	4619      	mov	r1, r3
 8012818:	4811      	ldr	r0, [pc, #68]	; (8012860 <xTaskGenericNotifyFromISR+0x180>)
 801281a:	f7fd ff27 	bl	801066c <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801281e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012822:	4b10      	ldr	r3, [pc, #64]	; (8012864 <xTaskGenericNotifyFromISR+0x184>)
 8012824:	681b      	ldr	r3, [r3, #0]
 8012826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012828:	429a      	cmp	r2, r3
 801282a:	d909      	bls.n	8012840 <xTaskGenericNotifyFromISR+0x160>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 801282c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801282e:	2b00      	cmp	r3, #0
 8012830:	d003      	beq.n	801283a <xTaskGenericNotifyFromISR+0x15a>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8012832:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012834:	2201      	movs	r2, #1
 8012836:	601a      	str	r2, [r3, #0]
 8012838:	e002      	b.n	8012840 <xTaskGenericNotifyFromISR+0x160>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 801283a:	4b0b      	ldr	r3, [pc, #44]	; (8012868 <xTaskGenericNotifyFromISR+0x188>)
 801283c:	2201      	movs	r2, #1
 801283e:	601a      	str	r2, [r3, #0]
 8012840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012842:	617b      	str	r3, [r7, #20]
	__asm volatile
 8012844:	697b      	ldr	r3, [r7, #20]
 8012846:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 801284a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 801284c:	4618      	mov	r0, r3
 801284e:	3738      	adds	r7, #56	; 0x38
 8012850:	46bd      	mov	sp, r7
 8012852:	bd80      	pop	{r7, pc}
 8012854:	200015b0 	.word	0x200015b0
 8012858:	20001590 	.word	0x20001590
 801285c:	2000148c 	.word	0x2000148c
 8012860:	20001548 	.word	0x20001548
 8012864:	20001488 	.word	0x20001488
 8012868:	2000159c 	.word	0x2000159c

0801286c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801286c:	b580      	push	{r7, lr}
 801286e:	b084      	sub	sp, #16
 8012870:	af00      	add	r7, sp, #0
 8012872:	6078      	str	r0, [r7, #4]
 8012874:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8012876:	4b29      	ldr	r3, [pc, #164]	; (801291c <prvAddCurrentTaskToDelayedList+0xb0>)
 8012878:	681b      	ldr	r3, [r3, #0]
 801287a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801287c:	4b28      	ldr	r3, [pc, #160]	; (8012920 <prvAddCurrentTaskToDelayedList+0xb4>)
 801287e:	681b      	ldr	r3, [r3, #0]
 8012880:	3304      	adds	r3, #4
 8012882:	4618      	mov	r0, r3
 8012884:	f7fd ff4f 	bl	8010726 <uxListRemove>
 8012888:	4603      	mov	r3, r0
 801288a:	2b00      	cmp	r3, #0
 801288c:	d10b      	bne.n	80128a6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 801288e:	4b24      	ldr	r3, [pc, #144]	; (8012920 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012890:	681b      	ldr	r3, [r3, #0]
 8012892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012894:	2201      	movs	r2, #1
 8012896:	fa02 f303 	lsl.w	r3, r2, r3
 801289a:	43da      	mvns	r2, r3
 801289c:	4b21      	ldr	r3, [pc, #132]	; (8012924 <prvAddCurrentTaskToDelayedList+0xb8>)
 801289e:	681b      	ldr	r3, [r3, #0]
 80128a0:	4013      	ands	r3, r2
 80128a2:	4a20      	ldr	r2, [pc, #128]	; (8012924 <prvAddCurrentTaskToDelayedList+0xb8>)
 80128a4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80128ac:	d10a      	bne.n	80128c4 <prvAddCurrentTaskToDelayedList+0x58>
 80128ae:	683b      	ldr	r3, [r7, #0]
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	d007      	beq.n	80128c4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80128b4:	4b1a      	ldr	r3, [pc, #104]	; (8012920 <prvAddCurrentTaskToDelayedList+0xb4>)
 80128b6:	681b      	ldr	r3, [r3, #0]
 80128b8:	3304      	adds	r3, #4
 80128ba:	4619      	mov	r1, r3
 80128bc:	481a      	ldr	r0, [pc, #104]	; (8012928 <prvAddCurrentTaskToDelayedList+0xbc>)
 80128be:	f7fd fed5 	bl	801066c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80128c2:	e026      	b.n	8012912 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80128c4:	68fa      	ldr	r2, [r7, #12]
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	4413      	add	r3, r2
 80128ca:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80128cc:	4b14      	ldr	r3, [pc, #80]	; (8012920 <prvAddCurrentTaskToDelayedList+0xb4>)
 80128ce:	681b      	ldr	r3, [r3, #0]
 80128d0:	68ba      	ldr	r2, [r7, #8]
 80128d2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80128d4:	68ba      	ldr	r2, [r7, #8]
 80128d6:	68fb      	ldr	r3, [r7, #12]
 80128d8:	429a      	cmp	r2, r3
 80128da:	d209      	bcs.n	80128f0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80128dc:	4b13      	ldr	r3, [pc, #76]	; (801292c <prvAddCurrentTaskToDelayedList+0xc0>)
 80128de:	681a      	ldr	r2, [r3, #0]
 80128e0:	4b0f      	ldr	r3, [pc, #60]	; (8012920 <prvAddCurrentTaskToDelayedList+0xb4>)
 80128e2:	681b      	ldr	r3, [r3, #0]
 80128e4:	3304      	adds	r3, #4
 80128e6:	4619      	mov	r1, r3
 80128e8:	4610      	mov	r0, r2
 80128ea:	f7fd fee3 	bl	80106b4 <vListInsert>
}
 80128ee:	e010      	b.n	8012912 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80128f0:	4b0f      	ldr	r3, [pc, #60]	; (8012930 <prvAddCurrentTaskToDelayedList+0xc4>)
 80128f2:	681a      	ldr	r2, [r3, #0]
 80128f4:	4b0a      	ldr	r3, [pc, #40]	; (8012920 <prvAddCurrentTaskToDelayedList+0xb4>)
 80128f6:	681b      	ldr	r3, [r3, #0]
 80128f8:	3304      	adds	r3, #4
 80128fa:	4619      	mov	r1, r3
 80128fc:	4610      	mov	r0, r2
 80128fe:	f7fd fed9 	bl	80106b4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8012902:	4b0c      	ldr	r3, [pc, #48]	; (8012934 <prvAddCurrentTaskToDelayedList+0xc8>)
 8012904:	681b      	ldr	r3, [r3, #0]
 8012906:	68ba      	ldr	r2, [r7, #8]
 8012908:	429a      	cmp	r2, r3
 801290a:	d202      	bcs.n	8012912 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 801290c:	4a09      	ldr	r2, [pc, #36]	; (8012934 <prvAddCurrentTaskToDelayedList+0xc8>)
 801290e:	68bb      	ldr	r3, [r7, #8]
 8012910:	6013      	str	r3, [r2, #0]
}
 8012912:	bf00      	nop
 8012914:	3710      	adds	r7, #16
 8012916:	46bd      	mov	sp, r7
 8012918:	bd80      	pop	{r7, pc}
 801291a:	bf00      	nop
 801291c:	2000158c 	.word	0x2000158c
 8012920:	20001488 	.word	0x20001488
 8012924:	20001590 	.word	0x20001590
 8012928:	20001574 	.word	0x20001574
 801292c:	20001544 	.word	0x20001544
 8012930:	20001540 	.word	0x20001540
 8012934:	200015a8 	.word	0x200015a8

08012938 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012938:	b480      	push	{r7}
 801293a:	b085      	sub	sp, #20
 801293c:	af00      	add	r7, sp, #0
 801293e:	60f8      	str	r0, [r7, #12]
 8012940:	60b9      	str	r1, [r7, #8]
 8012942:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012944:	68fb      	ldr	r3, [r7, #12]
 8012946:	3b04      	subs	r3, #4
 8012948:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801294a:	68fb      	ldr	r3, [r7, #12]
 801294c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8012950:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012952:	68fb      	ldr	r3, [r7, #12]
 8012954:	3b04      	subs	r3, #4
 8012956:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012958:	68bb      	ldr	r3, [r7, #8]
 801295a:	f023 0201 	bic.w	r2, r3, #1
 801295e:	68fb      	ldr	r3, [r7, #12]
 8012960:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012962:	68fb      	ldr	r3, [r7, #12]
 8012964:	3b04      	subs	r3, #4
 8012966:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012968:	4a0c      	ldr	r2, [pc, #48]	; (801299c <pxPortInitialiseStack+0x64>)
 801296a:	68fb      	ldr	r3, [r7, #12]
 801296c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801296e:	68fb      	ldr	r3, [r7, #12]
 8012970:	3b14      	subs	r3, #20
 8012972:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012974:	687a      	ldr	r2, [r7, #4]
 8012976:	68fb      	ldr	r3, [r7, #12]
 8012978:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801297a:	68fb      	ldr	r3, [r7, #12]
 801297c:	3b04      	subs	r3, #4
 801297e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012980:	68fb      	ldr	r3, [r7, #12]
 8012982:	f06f 0202 	mvn.w	r2, #2
 8012986:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012988:	68fb      	ldr	r3, [r7, #12]
 801298a:	3b20      	subs	r3, #32
 801298c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801298e:	68fb      	ldr	r3, [r7, #12]
}
 8012990:	4618      	mov	r0, r3
 8012992:	3714      	adds	r7, #20
 8012994:	46bd      	mov	sp, r7
 8012996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801299a:	4770      	bx	lr
 801299c:	080129a1 	.word	0x080129a1

080129a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80129a0:	b480      	push	{r7}
 80129a2:	b085      	sub	sp, #20
 80129a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80129a6:	2300      	movs	r3, #0
 80129a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80129aa:	4b11      	ldr	r3, [pc, #68]	; (80129f0 <prvTaskExitError+0x50>)
 80129ac:	681b      	ldr	r3, [r3, #0]
 80129ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80129b2:	d009      	beq.n	80129c8 <prvTaskExitError+0x28>
	__asm volatile
 80129b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129b8:	f383 8811 	msr	BASEPRI, r3
 80129bc:	f3bf 8f6f 	isb	sy
 80129c0:	f3bf 8f4f 	dsb	sy
 80129c4:	60fb      	str	r3, [r7, #12]
 80129c6:	e7fe      	b.n	80129c6 <prvTaskExitError+0x26>
 80129c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129cc:	f383 8811 	msr	BASEPRI, r3
 80129d0:	f3bf 8f6f 	isb	sy
 80129d4:	f3bf 8f4f 	dsb	sy
 80129d8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80129da:	bf00      	nop
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d0fc      	beq.n	80129dc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80129e2:	bf00      	nop
 80129e4:	3714      	adds	r7, #20
 80129e6:	46bd      	mov	sp, r7
 80129e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129ec:	4770      	bx	lr
 80129ee:	bf00      	nop
 80129f0:	20000dd0 	.word	0x20000dd0
	...

08012a00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012a00:	4b07      	ldr	r3, [pc, #28]	; (8012a20 <pxCurrentTCBConst2>)
 8012a02:	6819      	ldr	r1, [r3, #0]
 8012a04:	6808      	ldr	r0, [r1, #0]
 8012a06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a0a:	f380 8809 	msr	PSP, r0
 8012a0e:	f3bf 8f6f 	isb	sy
 8012a12:	f04f 0000 	mov.w	r0, #0
 8012a16:	f380 8811 	msr	BASEPRI, r0
 8012a1a:	4770      	bx	lr
 8012a1c:	f3af 8000 	nop.w

08012a20 <pxCurrentTCBConst2>:
 8012a20:	20001488 	.word	0x20001488
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012a24:	bf00      	nop
 8012a26:	bf00      	nop

08012a28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012a28:	4808      	ldr	r0, [pc, #32]	; (8012a4c <prvPortStartFirstTask+0x24>)
 8012a2a:	6800      	ldr	r0, [r0, #0]
 8012a2c:	6800      	ldr	r0, [r0, #0]
 8012a2e:	f380 8808 	msr	MSP, r0
 8012a32:	f04f 0000 	mov.w	r0, #0
 8012a36:	f380 8814 	msr	CONTROL, r0
 8012a3a:	b662      	cpsie	i
 8012a3c:	b661      	cpsie	f
 8012a3e:	f3bf 8f4f 	dsb	sy
 8012a42:	f3bf 8f6f 	isb	sy
 8012a46:	df00      	svc	0
 8012a48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8012a4a:	bf00      	nop
 8012a4c:	e000ed08 	.word	0xe000ed08

08012a50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012a50:	b580      	push	{r7, lr}
 8012a52:	b086      	sub	sp, #24
 8012a54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012a56:	4b44      	ldr	r3, [pc, #272]	; (8012b68 <xPortStartScheduler+0x118>)
 8012a58:	681b      	ldr	r3, [r3, #0]
 8012a5a:	4a44      	ldr	r2, [pc, #272]	; (8012b6c <xPortStartScheduler+0x11c>)
 8012a5c:	4293      	cmp	r3, r2
 8012a5e:	d109      	bne.n	8012a74 <xPortStartScheduler+0x24>
 8012a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a64:	f383 8811 	msr	BASEPRI, r3
 8012a68:	f3bf 8f6f 	isb	sy
 8012a6c:	f3bf 8f4f 	dsb	sy
 8012a70:	613b      	str	r3, [r7, #16]
 8012a72:	e7fe      	b.n	8012a72 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012a74:	4b3c      	ldr	r3, [pc, #240]	; (8012b68 <xPortStartScheduler+0x118>)
 8012a76:	681b      	ldr	r3, [r3, #0]
 8012a78:	4a3d      	ldr	r2, [pc, #244]	; (8012b70 <xPortStartScheduler+0x120>)
 8012a7a:	4293      	cmp	r3, r2
 8012a7c:	d109      	bne.n	8012a92 <xPortStartScheduler+0x42>
 8012a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a82:	f383 8811 	msr	BASEPRI, r3
 8012a86:	f3bf 8f6f 	isb	sy
 8012a8a:	f3bf 8f4f 	dsb	sy
 8012a8e:	60fb      	str	r3, [r7, #12]
 8012a90:	e7fe      	b.n	8012a90 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012a92:	4b38      	ldr	r3, [pc, #224]	; (8012b74 <xPortStartScheduler+0x124>)
 8012a94:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8012a96:	697b      	ldr	r3, [r7, #20]
 8012a98:	781b      	ldrb	r3, [r3, #0]
 8012a9a:	b2db      	uxtb	r3, r3
 8012a9c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012a9e:	697b      	ldr	r3, [r7, #20]
 8012aa0:	22ff      	movs	r2, #255	; 0xff
 8012aa2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012aa4:	697b      	ldr	r3, [r7, #20]
 8012aa6:	781b      	ldrb	r3, [r3, #0]
 8012aa8:	b2db      	uxtb	r3, r3
 8012aaa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012aac:	78fb      	ldrb	r3, [r7, #3]
 8012aae:	b2db      	uxtb	r3, r3
 8012ab0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8012ab4:	b2da      	uxtb	r2, r3
 8012ab6:	4b30      	ldr	r3, [pc, #192]	; (8012b78 <xPortStartScheduler+0x128>)
 8012ab8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8012aba:	4b30      	ldr	r3, [pc, #192]	; (8012b7c <xPortStartScheduler+0x12c>)
 8012abc:	2207      	movs	r2, #7
 8012abe:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012ac0:	e009      	b.n	8012ad6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8012ac2:	4b2e      	ldr	r3, [pc, #184]	; (8012b7c <xPortStartScheduler+0x12c>)
 8012ac4:	681b      	ldr	r3, [r3, #0]
 8012ac6:	3b01      	subs	r3, #1
 8012ac8:	4a2c      	ldr	r2, [pc, #176]	; (8012b7c <xPortStartScheduler+0x12c>)
 8012aca:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012acc:	78fb      	ldrb	r3, [r7, #3]
 8012ace:	b2db      	uxtb	r3, r3
 8012ad0:	005b      	lsls	r3, r3, #1
 8012ad2:	b2db      	uxtb	r3, r3
 8012ad4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012ad6:	78fb      	ldrb	r3, [r7, #3]
 8012ad8:	b2db      	uxtb	r3, r3
 8012ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012ade:	2b80      	cmp	r3, #128	; 0x80
 8012ae0:	d0ef      	beq.n	8012ac2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012ae2:	4b26      	ldr	r3, [pc, #152]	; (8012b7c <xPortStartScheduler+0x12c>)
 8012ae4:	681b      	ldr	r3, [r3, #0]
 8012ae6:	f1c3 0307 	rsb	r3, r3, #7
 8012aea:	2b04      	cmp	r3, #4
 8012aec:	d009      	beq.n	8012b02 <xPortStartScheduler+0xb2>
 8012aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012af2:	f383 8811 	msr	BASEPRI, r3
 8012af6:	f3bf 8f6f 	isb	sy
 8012afa:	f3bf 8f4f 	dsb	sy
 8012afe:	60bb      	str	r3, [r7, #8]
 8012b00:	e7fe      	b.n	8012b00 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012b02:	4b1e      	ldr	r3, [pc, #120]	; (8012b7c <xPortStartScheduler+0x12c>)
 8012b04:	681b      	ldr	r3, [r3, #0]
 8012b06:	021b      	lsls	r3, r3, #8
 8012b08:	4a1c      	ldr	r2, [pc, #112]	; (8012b7c <xPortStartScheduler+0x12c>)
 8012b0a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012b0c:	4b1b      	ldr	r3, [pc, #108]	; (8012b7c <xPortStartScheduler+0x12c>)
 8012b0e:	681b      	ldr	r3, [r3, #0]
 8012b10:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8012b14:	4a19      	ldr	r2, [pc, #100]	; (8012b7c <xPortStartScheduler+0x12c>)
 8012b16:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	b2da      	uxtb	r2, r3
 8012b1c:	697b      	ldr	r3, [r7, #20]
 8012b1e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012b20:	4b17      	ldr	r3, [pc, #92]	; (8012b80 <xPortStartScheduler+0x130>)
 8012b22:	681b      	ldr	r3, [r3, #0]
 8012b24:	4a16      	ldr	r2, [pc, #88]	; (8012b80 <xPortStartScheduler+0x130>)
 8012b26:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012b2a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012b2c:	4b14      	ldr	r3, [pc, #80]	; (8012b80 <xPortStartScheduler+0x130>)
 8012b2e:	681b      	ldr	r3, [r3, #0]
 8012b30:	4a13      	ldr	r2, [pc, #76]	; (8012b80 <xPortStartScheduler+0x130>)
 8012b32:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8012b36:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012b38:	f000 f8d6 	bl	8012ce8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012b3c:	4b11      	ldr	r3, [pc, #68]	; (8012b84 <xPortStartScheduler+0x134>)
 8012b3e:	2200      	movs	r2, #0
 8012b40:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8012b42:	f000 f8f5 	bl	8012d30 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012b46:	4b10      	ldr	r3, [pc, #64]	; (8012b88 <xPortStartScheduler+0x138>)
 8012b48:	681b      	ldr	r3, [r3, #0]
 8012b4a:	4a0f      	ldr	r2, [pc, #60]	; (8012b88 <xPortStartScheduler+0x138>)
 8012b4c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012b50:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8012b52:	f7ff ff69 	bl	8012a28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8012b56:	f7ff f8b5 	bl	8011cc4 <vTaskSwitchContext>
	prvTaskExitError();
 8012b5a:	f7ff ff21 	bl	80129a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012b5e:	2300      	movs	r3, #0
}
 8012b60:	4618      	mov	r0, r3
 8012b62:	3718      	adds	r7, #24
 8012b64:	46bd      	mov	sp, r7
 8012b66:	bd80      	pop	{r7, pc}
 8012b68:	e000ed00 	.word	0xe000ed00
 8012b6c:	410fc271 	.word	0x410fc271
 8012b70:	410fc270 	.word	0x410fc270
 8012b74:	e000e400 	.word	0xe000e400
 8012b78:	200015b4 	.word	0x200015b4
 8012b7c:	200015b8 	.word	0x200015b8
 8012b80:	e000ed20 	.word	0xe000ed20
 8012b84:	20000dd0 	.word	0x20000dd0
 8012b88:	e000ef34 	.word	0xe000ef34

08012b8c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012b8c:	b480      	push	{r7}
 8012b8e:	b083      	sub	sp, #12
 8012b90:	af00      	add	r7, sp, #0
 8012b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b96:	f383 8811 	msr	BASEPRI, r3
 8012b9a:	f3bf 8f6f 	isb	sy
 8012b9e:	f3bf 8f4f 	dsb	sy
 8012ba2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8012ba4:	4b0e      	ldr	r3, [pc, #56]	; (8012be0 <vPortEnterCritical+0x54>)
 8012ba6:	681b      	ldr	r3, [r3, #0]
 8012ba8:	3301      	adds	r3, #1
 8012baa:	4a0d      	ldr	r2, [pc, #52]	; (8012be0 <vPortEnterCritical+0x54>)
 8012bac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012bae:	4b0c      	ldr	r3, [pc, #48]	; (8012be0 <vPortEnterCritical+0x54>)
 8012bb0:	681b      	ldr	r3, [r3, #0]
 8012bb2:	2b01      	cmp	r3, #1
 8012bb4:	d10e      	bne.n	8012bd4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012bb6:	4b0b      	ldr	r3, [pc, #44]	; (8012be4 <vPortEnterCritical+0x58>)
 8012bb8:	681b      	ldr	r3, [r3, #0]
 8012bba:	b2db      	uxtb	r3, r3
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d009      	beq.n	8012bd4 <vPortEnterCritical+0x48>
 8012bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bc4:	f383 8811 	msr	BASEPRI, r3
 8012bc8:	f3bf 8f6f 	isb	sy
 8012bcc:	f3bf 8f4f 	dsb	sy
 8012bd0:	603b      	str	r3, [r7, #0]
 8012bd2:	e7fe      	b.n	8012bd2 <vPortEnterCritical+0x46>
	}
}
 8012bd4:	bf00      	nop
 8012bd6:	370c      	adds	r7, #12
 8012bd8:	46bd      	mov	sp, r7
 8012bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bde:	4770      	bx	lr
 8012be0:	20000dd0 	.word	0x20000dd0
 8012be4:	e000ed04 	.word	0xe000ed04

08012be8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012be8:	b480      	push	{r7}
 8012bea:	b083      	sub	sp, #12
 8012bec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8012bee:	4b11      	ldr	r3, [pc, #68]	; (8012c34 <vPortExitCritical+0x4c>)
 8012bf0:	681b      	ldr	r3, [r3, #0]
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	d109      	bne.n	8012c0a <vPortExitCritical+0x22>
 8012bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bfa:	f383 8811 	msr	BASEPRI, r3
 8012bfe:	f3bf 8f6f 	isb	sy
 8012c02:	f3bf 8f4f 	dsb	sy
 8012c06:	607b      	str	r3, [r7, #4]
 8012c08:	e7fe      	b.n	8012c08 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8012c0a:	4b0a      	ldr	r3, [pc, #40]	; (8012c34 <vPortExitCritical+0x4c>)
 8012c0c:	681b      	ldr	r3, [r3, #0]
 8012c0e:	3b01      	subs	r3, #1
 8012c10:	4a08      	ldr	r2, [pc, #32]	; (8012c34 <vPortExitCritical+0x4c>)
 8012c12:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012c14:	4b07      	ldr	r3, [pc, #28]	; (8012c34 <vPortExitCritical+0x4c>)
 8012c16:	681b      	ldr	r3, [r3, #0]
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d104      	bne.n	8012c26 <vPortExitCritical+0x3e>
 8012c1c:	2300      	movs	r3, #0
 8012c1e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012c20:	683b      	ldr	r3, [r7, #0]
 8012c22:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8012c26:	bf00      	nop
 8012c28:	370c      	adds	r7, #12
 8012c2a:	46bd      	mov	sp, r7
 8012c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c30:	4770      	bx	lr
 8012c32:	bf00      	nop
 8012c34:	20000dd0 	.word	0x20000dd0
	...

08012c40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012c40:	f3ef 8009 	mrs	r0, PSP
 8012c44:	f3bf 8f6f 	isb	sy
 8012c48:	4b15      	ldr	r3, [pc, #84]	; (8012ca0 <pxCurrentTCBConst>)
 8012c4a:	681a      	ldr	r2, [r3, #0]
 8012c4c:	f01e 0f10 	tst.w	lr, #16
 8012c50:	bf08      	it	eq
 8012c52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012c56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c5a:	6010      	str	r0, [r2, #0]
 8012c5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012c60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012c64:	f380 8811 	msr	BASEPRI, r0
 8012c68:	f3bf 8f4f 	dsb	sy
 8012c6c:	f3bf 8f6f 	isb	sy
 8012c70:	f7ff f828 	bl	8011cc4 <vTaskSwitchContext>
 8012c74:	f04f 0000 	mov.w	r0, #0
 8012c78:	f380 8811 	msr	BASEPRI, r0
 8012c7c:	bc09      	pop	{r0, r3}
 8012c7e:	6819      	ldr	r1, [r3, #0]
 8012c80:	6808      	ldr	r0, [r1, #0]
 8012c82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c86:	f01e 0f10 	tst.w	lr, #16
 8012c8a:	bf08      	it	eq
 8012c8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012c90:	f380 8809 	msr	PSP, r0
 8012c94:	f3bf 8f6f 	isb	sy
 8012c98:	4770      	bx	lr
 8012c9a:	bf00      	nop
 8012c9c:	f3af 8000 	nop.w

08012ca0 <pxCurrentTCBConst>:
 8012ca0:	20001488 	.word	0x20001488
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012ca4:	bf00      	nop
 8012ca6:	bf00      	nop

08012ca8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012ca8:	b580      	push	{r7, lr}
 8012caa:	b082      	sub	sp, #8
 8012cac:	af00      	add	r7, sp, #0
	__asm volatile
 8012cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cb2:	f383 8811 	msr	BASEPRI, r3
 8012cb6:	f3bf 8f6f 	isb	sy
 8012cba:	f3bf 8f4f 	dsb	sy
 8012cbe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012cc0:	f7fe ff44 	bl	8011b4c <xTaskIncrementTick>
 8012cc4:	4603      	mov	r3, r0
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	d003      	beq.n	8012cd2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8012cca:	4b06      	ldr	r3, [pc, #24]	; (8012ce4 <SysTick_Handler+0x3c>)
 8012ccc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012cd0:	601a      	str	r2, [r3, #0]
 8012cd2:	2300      	movs	r3, #0
 8012cd4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012cd6:	683b      	ldr	r3, [r7, #0]
 8012cd8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8012cdc:	bf00      	nop
 8012cde:	3708      	adds	r7, #8
 8012ce0:	46bd      	mov	sp, r7
 8012ce2:	bd80      	pop	{r7, pc}
 8012ce4:	e000ed04 	.word	0xe000ed04

08012ce8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8012ce8:	b480      	push	{r7}
 8012cea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012cec:	4b0b      	ldr	r3, [pc, #44]	; (8012d1c <vPortSetupTimerInterrupt+0x34>)
 8012cee:	2200      	movs	r2, #0
 8012cf0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012cf2:	4b0b      	ldr	r3, [pc, #44]	; (8012d20 <vPortSetupTimerInterrupt+0x38>)
 8012cf4:	2200      	movs	r2, #0
 8012cf6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012cf8:	4b0a      	ldr	r3, [pc, #40]	; (8012d24 <vPortSetupTimerInterrupt+0x3c>)
 8012cfa:	681b      	ldr	r3, [r3, #0]
 8012cfc:	4a0a      	ldr	r2, [pc, #40]	; (8012d28 <vPortSetupTimerInterrupt+0x40>)
 8012cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8012d02:	099b      	lsrs	r3, r3, #6
 8012d04:	4a09      	ldr	r2, [pc, #36]	; (8012d2c <vPortSetupTimerInterrupt+0x44>)
 8012d06:	3b01      	subs	r3, #1
 8012d08:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8012d0a:	4b04      	ldr	r3, [pc, #16]	; (8012d1c <vPortSetupTimerInterrupt+0x34>)
 8012d0c:	2207      	movs	r2, #7
 8012d0e:	601a      	str	r2, [r3, #0]
}
 8012d10:	bf00      	nop
 8012d12:	46bd      	mov	sp, r7
 8012d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d18:	4770      	bx	lr
 8012d1a:	bf00      	nop
 8012d1c:	e000e010 	.word	0xe000e010
 8012d20:	e000e018 	.word	0xe000e018
 8012d24:	20000cb4 	.word	0x20000cb4
 8012d28:	10624dd3 	.word	0x10624dd3
 8012d2c:	e000e014 	.word	0xe000e014

08012d30 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012d30:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012d40 <vPortEnableVFP+0x10>
 8012d34:	6801      	ldr	r1, [r0, #0]
 8012d36:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8012d3a:	6001      	str	r1, [r0, #0]
 8012d3c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012d3e:	bf00      	nop
 8012d40:	e000ed88 	.word	0xe000ed88

08012d44 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012d44:	b480      	push	{r7}
 8012d46:	b085      	sub	sp, #20
 8012d48:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8012d4a:	f3ef 8305 	mrs	r3, IPSR
 8012d4e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012d50:	68fb      	ldr	r3, [r7, #12]
 8012d52:	2b0f      	cmp	r3, #15
 8012d54:	d913      	bls.n	8012d7e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8012d56:	4a16      	ldr	r2, [pc, #88]	; (8012db0 <vPortValidateInterruptPriority+0x6c>)
 8012d58:	68fb      	ldr	r3, [r7, #12]
 8012d5a:	4413      	add	r3, r2
 8012d5c:	781b      	ldrb	r3, [r3, #0]
 8012d5e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012d60:	4b14      	ldr	r3, [pc, #80]	; (8012db4 <vPortValidateInterruptPriority+0x70>)
 8012d62:	781b      	ldrb	r3, [r3, #0]
 8012d64:	7afa      	ldrb	r2, [r7, #11]
 8012d66:	429a      	cmp	r2, r3
 8012d68:	d209      	bcs.n	8012d7e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8012d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d6e:	f383 8811 	msr	BASEPRI, r3
 8012d72:	f3bf 8f6f 	isb	sy
 8012d76:	f3bf 8f4f 	dsb	sy
 8012d7a:	607b      	str	r3, [r7, #4]
 8012d7c:	e7fe      	b.n	8012d7c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012d7e:	4b0e      	ldr	r3, [pc, #56]	; (8012db8 <vPortValidateInterruptPriority+0x74>)
 8012d80:	681b      	ldr	r3, [r3, #0]
 8012d82:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8012d86:	4b0d      	ldr	r3, [pc, #52]	; (8012dbc <vPortValidateInterruptPriority+0x78>)
 8012d88:	681b      	ldr	r3, [r3, #0]
 8012d8a:	429a      	cmp	r2, r3
 8012d8c:	d909      	bls.n	8012da2 <vPortValidateInterruptPriority+0x5e>
 8012d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d92:	f383 8811 	msr	BASEPRI, r3
 8012d96:	f3bf 8f6f 	isb	sy
 8012d9a:	f3bf 8f4f 	dsb	sy
 8012d9e:	603b      	str	r3, [r7, #0]
 8012da0:	e7fe      	b.n	8012da0 <vPortValidateInterruptPriority+0x5c>
	}
 8012da2:	bf00      	nop
 8012da4:	3714      	adds	r7, #20
 8012da6:	46bd      	mov	sp, r7
 8012da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dac:	4770      	bx	lr
 8012dae:	bf00      	nop
 8012db0:	e000e3f0 	.word	0xe000e3f0
 8012db4:	200015b4 	.word	0x200015b4
 8012db8:	e000ed0c 	.word	0xe000ed0c
 8012dbc:	200015b8 	.word	0x200015b8

08012dc0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012dc0:	b580      	push	{r7, lr}
 8012dc2:	b08a      	sub	sp, #40	; 0x28
 8012dc4:	af00      	add	r7, sp, #0
 8012dc6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012dc8:	2300      	movs	r3, #0
 8012dca:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012dcc:	f7fe fe14 	bl	80119f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012dd0:	4b57      	ldr	r3, [pc, #348]	; (8012f30 <pvPortMalloc+0x170>)
 8012dd2:	681b      	ldr	r3, [r3, #0]
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	d101      	bne.n	8012ddc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012dd8:	f000 f90c 	bl	8012ff4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012ddc:	4b55      	ldr	r3, [pc, #340]	; (8012f34 <pvPortMalloc+0x174>)
 8012dde:	681a      	ldr	r2, [r3, #0]
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	4013      	ands	r3, r2
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	f040 808c 	bne.w	8012f02 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d01c      	beq.n	8012e2a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8012df0:	2208      	movs	r2, #8
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	4413      	add	r3, r2
 8012df6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	f003 0307 	and.w	r3, r3, #7
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	d013      	beq.n	8012e2a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	f023 0307 	bic.w	r3, r3, #7
 8012e08:	3308      	adds	r3, #8
 8012e0a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	f003 0307 	and.w	r3, r3, #7
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d009      	beq.n	8012e2a <pvPortMalloc+0x6a>
 8012e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e1a:	f383 8811 	msr	BASEPRI, r3
 8012e1e:	f3bf 8f6f 	isb	sy
 8012e22:	f3bf 8f4f 	dsb	sy
 8012e26:	617b      	str	r3, [r7, #20]
 8012e28:	e7fe      	b.n	8012e28 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	d068      	beq.n	8012f02 <pvPortMalloc+0x142>
 8012e30:	4b41      	ldr	r3, [pc, #260]	; (8012f38 <pvPortMalloc+0x178>)
 8012e32:	681b      	ldr	r3, [r3, #0]
 8012e34:	687a      	ldr	r2, [r7, #4]
 8012e36:	429a      	cmp	r2, r3
 8012e38:	d863      	bhi.n	8012f02 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8012e3a:	4b40      	ldr	r3, [pc, #256]	; (8012f3c <pvPortMalloc+0x17c>)
 8012e3c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8012e3e:	4b3f      	ldr	r3, [pc, #252]	; (8012f3c <pvPortMalloc+0x17c>)
 8012e40:	681b      	ldr	r3, [r3, #0]
 8012e42:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012e44:	e004      	b.n	8012e50 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8012e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e48:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8012e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e4c:	681b      	ldr	r3, [r3, #0]
 8012e4e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e52:	685b      	ldr	r3, [r3, #4]
 8012e54:	687a      	ldr	r2, [r7, #4]
 8012e56:	429a      	cmp	r2, r3
 8012e58:	d903      	bls.n	8012e62 <pvPortMalloc+0xa2>
 8012e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e5c:	681b      	ldr	r3, [r3, #0]
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d1f1      	bne.n	8012e46 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8012e62:	4b33      	ldr	r3, [pc, #204]	; (8012f30 <pvPortMalloc+0x170>)
 8012e64:	681b      	ldr	r3, [r3, #0]
 8012e66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012e68:	429a      	cmp	r2, r3
 8012e6a:	d04a      	beq.n	8012f02 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012e6c:	6a3b      	ldr	r3, [r7, #32]
 8012e6e:	681b      	ldr	r3, [r3, #0]
 8012e70:	2208      	movs	r2, #8
 8012e72:	4413      	add	r3, r2
 8012e74:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e78:	681a      	ldr	r2, [r3, #0]
 8012e7a:	6a3b      	ldr	r3, [r7, #32]
 8012e7c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e80:	685a      	ldr	r2, [r3, #4]
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	1ad2      	subs	r2, r2, r3
 8012e86:	2308      	movs	r3, #8
 8012e88:	005b      	lsls	r3, r3, #1
 8012e8a:	429a      	cmp	r2, r3
 8012e8c:	d91e      	bls.n	8012ecc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	4413      	add	r3, r2
 8012e94:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012e96:	69bb      	ldr	r3, [r7, #24]
 8012e98:	f003 0307 	and.w	r3, r3, #7
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	d009      	beq.n	8012eb4 <pvPortMalloc+0xf4>
 8012ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ea4:	f383 8811 	msr	BASEPRI, r3
 8012ea8:	f3bf 8f6f 	isb	sy
 8012eac:	f3bf 8f4f 	dsb	sy
 8012eb0:	613b      	str	r3, [r7, #16]
 8012eb2:	e7fe      	b.n	8012eb2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012eb6:	685a      	ldr	r2, [r3, #4]
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	1ad2      	subs	r2, r2, r3
 8012ebc:	69bb      	ldr	r3, [r7, #24]
 8012ebe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ec2:	687a      	ldr	r2, [r7, #4]
 8012ec4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8012ec6:	69b8      	ldr	r0, [r7, #24]
 8012ec8:	f000 f8f6 	bl	80130b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012ecc:	4b1a      	ldr	r3, [pc, #104]	; (8012f38 <pvPortMalloc+0x178>)
 8012ece:	681a      	ldr	r2, [r3, #0]
 8012ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ed2:	685b      	ldr	r3, [r3, #4]
 8012ed4:	1ad3      	subs	r3, r2, r3
 8012ed6:	4a18      	ldr	r2, [pc, #96]	; (8012f38 <pvPortMalloc+0x178>)
 8012ed8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012eda:	4b17      	ldr	r3, [pc, #92]	; (8012f38 <pvPortMalloc+0x178>)
 8012edc:	681a      	ldr	r2, [r3, #0]
 8012ede:	4b18      	ldr	r3, [pc, #96]	; (8012f40 <pvPortMalloc+0x180>)
 8012ee0:	681b      	ldr	r3, [r3, #0]
 8012ee2:	429a      	cmp	r2, r3
 8012ee4:	d203      	bcs.n	8012eee <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012ee6:	4b14      	ldr	r3, [pc, #80]	; (8012f38 <pvPortMalloc+0x178>)
 8012ee8:	681b      	ldr	r3, [r3, #0]
 8012eea:	4a15      	ldr	r2, [pc, #84]	; (8012f40 <pvPortMalloc+0x180>)
 8012eec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ef0:	685a      	ldr	r2, [r3, #4]
 8012ef2:	4b10      	ldr	r3, [pc, #64]	; (8012f34 <pvPortMalloc+0x174>)
 8012ef4:	681b      	ldr	r3, [r3, #0]
 8012ef6:	431a      	orrs	r2, r3
 8012ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012efa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012efe:	2200      	movs	r2, #0
 8012f00:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012f02:	f7fe fd87 	bl	8011a14 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012f06:	69fb      	ldr	r3, [r7, #28]
 8012f08:	f003 0307 	and.w	r3, r3, #7
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	d009      	beq.n	8012f24 <pvPortMalloc+0x164>
 8012f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f14:	f383 8811 	msr	BASEPRI, r3
 8012f18:	f3bf 8f6f 	isb	sy
 8012f1c:	f3bf 8f4f 	dsb	sy
 8012f20:	60fb      	str	r3, [r7, #12]
 8012f22:	e7fe      	b.n	8012f22 <pvPortMalloc+0x162>
	return pvReturn;
 8012f24:	69fb      	ldr	r3, [r7, #28]
}
 8012f26:	4618      	mov	r0, r3
 8012f28:	3728      	adds	r7, #40	; 0x28
 8012f2a:	46bd      	mov	sp, r7
 8012f2c:	bd80      	pop	{r7, pc}
 8012f2e:	bf00      	nop
 8012f30:	200051c4 	.word	0x200051c4
 8012f34:	200051d0 	.word	0x200051d0
 8012f38:	200051c8 	.word	0x200051c8
 8012f3c:	200051bc 	.word	0x200051bc
 8012f40:	200051cc 	.word	0x200051cc

08012f44 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012f44:	b580      	push	{r7, lr}
 8012f46:	b086      	sub	sp, #24
 8012f48:	af00      	add	r7, sp, #0
 8012f4a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	2b00      	cmp	r3, #0
 8012f54:	d046      	beq.n	8012fe4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012f56:	2308      	movs	r3, #8
 8012f58:	425b      	negs	r3, r3
 8012f5a:	697a      	ldr	r2, [r7, #20]
 8012f5c:	4413      	add	r3, r2
 8012f5e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8012f60:	697b      	ldr	r3, [r7, #20]
 8012f62:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012f64:	693b      	ldr	r3, [r7, #16]
 8012f66:	685a      	ldr	r2, [r3, #4]
 8012f68:	4b20      	ldr	r3, [pc, #128]	; (8012fec <vPortFree+0xa8>)
 8012f6a:	681b      	ldr	r3, [r3, #0]
 8012f6c:	4013      	ands	r3, r2
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	d109      	bne.n	8012f86 <vPortFree+0x42>
 8012f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f76:	f383 8811 	msr	BASEPRI, r3
 8012f7a:	f3bf 8f6f 	isb	sy
 8012f7e:	f3bf 8f4f 	dsb	sy
 8012f82:	60fb      	str	r3, [r7, #12]
 8012f84:	e7fe      	b.n	8012f84 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012f86:	693b      	ldr	r3, [r7, #16]
 8012f88:	681b      	ldr	r3, [r3, #0]
 8012f8a:	2b00      	cmp	r3, #0
 8012f8c:	d009      	beq.n	8012fa2 <vPortFree+0x5e>
 8012f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f92:	f383 8811 	msr	BASEPRI, r3
 8012f96:	f3bf 8f6f 	isb	sy
 8012f9a:	f3bf 8f4f 	dsb	sy
 8012f9e:	60bb      	str	r3, [r7, #8]
 8012fa0:	e7fe      	b.n	8012fa0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012fa2:	693b      	ldr	r3, [r7, #16]
 8012fa4:	685a      	ldr	r2, [r3, #4]
 8012fa6:	4b11      	ldr	r3, [pc, #68]	; (8012fec <vPortFree+0xa8>)
 8012fa8:	681b      	ldr	r3, [r3, #0]
 8012faa:	4013      	ands	r3, r2
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	d019      	beq.n	8012fe4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012fb0:	693b      	ldr	r3, [r7, #16]
 8012fb2:	681b      	ldr	r3, [r3, #0]
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	d115      	bne.n	8012fe4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012fb8:	693b      	ldr	r3, [r7, #16]
 8012fba:	685a      	ldr	r2, [r3, #4]
 8012fbc:	4b0b      	ldr	r3, [pc, #44]	; (8012fec <vPortFree+0xa8>)
 8012fbe:	681b      	ldr	r3, [r3, #0]
 8012fc0:	43db      	mvns	r3, r3
 8012fc2:	401a      	ands	r2, r3
 8012fc4:	693b      	ldr	r3, [r7, #16]
 8012fc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012fc8:	f7fe fd16 	bl	80119f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8012fcc:	693b      	ldr	r3, [r7, #16]
 8012fce:	685a      	ldr	r2, [r3, #4]
 8012fd0:	4b07      	ldr	r3, [pc, #28]	; (8012ff0 <vPortFree+0xac>)
 8012fd2:	681b      	ldr	r3, [r3, #0]
 8012fd4:	4413      	add	r3, r2
 8012fd6:	4a06      	ldr	r2, [pc, #24]	; (8012ff0 <vPortFree+0xac>)
 8012fd8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8012fda:	6938      	ldr	r0, [r7, #16]
 8012fdc:	f000 f86c 	bl	80130b8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8012fe0:	f7fe fd18 	bl	8011a14 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8012fe4:	bf00      	nop
 8012fe6:	3718      	adds	r7, #24
 8012fe8:	46bd      	mov	sp, r7
 8012fea:	bd80      	pop	{r7, pc}
 8012fec:	200051d0 	.word	0x200051d0
 8012ff0:	200051c8 	.word	0x200051c8

08012ff4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012ff4:	b480      	push	{r7}
 8012ff6:	b085      	sub	sp, #20
 8012ff8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8012ffa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8012ffe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8013000:	4b27      	ldr	r3, [pc, #156]	; (80130a0 <prvHeapInit+0xac>)
 8013002:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8013004:	68fb      	ldr	r3, [r7, #12]
 8013006:	f003 0307 	and.w	r3, r3, #7
 801300a:	2b00      	cmp	r3, #0
 801300c:	d00c      	beq.n	8013028 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801300e:	68fb      	ldr	r3, [r7, #12]
 8013010:	3307      	adds	r3, #7
 8013012:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013014:	68fb      	ldr	r3, [r7, #12]
 8013016:	f023 0307 	bic.w	r3, r3, #7
 801301a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801301c:	68ba      	ldr	r2, [r7, #8]
 801301e:	68fb      	ldr	r3, [r7, #12]
 8013020:	1ad3      	subs	r3, r2, r3
 8013022:	4a1f      	ldr	r2, [pc, #124]	; (80130a0 <prvHeapInit+0xac>)
 8013024:	4413      	add	r3, r2
 8013026:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8013028:	68fb      	ldr	r3, [r7, #12]
 801302a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801302c:	4a1d      	ldr	r2, [pc, #116]	; (80130a4 <prvHeapInit+0xb0>)
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8013032:	4b1c      	ldr	r3, [pc, #112]	; (80130a4 <prvHeapInit+0xb0>)
 8013034:	2200      	movs	r2, #0
 8013036:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	68ba      	ldr	r2, [r7, #8]
 801303c:	4413      	add	r3, r2
 801303e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8013040:	2208      	movs	r2, #8
 8013042:	68fb      	ldr	r3, [r7, #12]
 8013044:	1a9b      	subs	r3, r3, r2
 8013046:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013048:	68fb      	ldr	r3, [r7, #12]
 801304a:	f023 0307 	bic.w	r3, r3, #7
 801304e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8013050:	68fb      	ldr	r3, [r7, #12]
 8013052:	4a15      	ldr	r2, [pc, #84]	; (80130a8 <prvHeapInit+0xb4>)
 8013054:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8013056:	4b14      	ldr	r3, [pc, #80]	; (80130a8 <prvHeapInit+0xb4>)
 8013058:	681b      	ldr	r3, [r3, #0]
 801305a:	2200      	movs	r2, #0
 801305c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801305e:	4b12      	ldr	r3, [pc, #72]	; (80130a8 <prvHeapInit+0xb4>)
 8013060:	681b      	ldr	r3, [r3, #0]
 8013062:	2200      	movs	r2, #0
 8013064:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801306a:	683b      	ldr	r3, [r7, #0]
 801306c:	68fa      	ldr	r2, [r7, #12]
 801306e:	1ad2      	subs	r2, r2, r3
 8013070:	683b      	ldr	r3, [r7, #0]
 8013072:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8013074:	4b0c      	ldr	r3, [pc, #48]	; (80130a8 <prvHeapInit+0xb4>)
 8013076:	681a      	ldr	r2, [r3, #0]
 8013078:	683b      	ldr	r3, [r7, #0]
 801307a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801307c:	683b      	ldr	r3, [r7, #0]
 801307e:	685b      	ldr	r3, [r3, #4]
 8013080:	4a0a      	ldr	r2, [pc, #40]	; (80130ac <prvHeapInit+0xb8>)
 8013082:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013084:	683b      	ldr	r3, [r7, #0]
 8013086:	685b      	ldr	r3, [r3, #4]
 8013088:	4a09      	ldr	r2, [pc, #36]	; (80130b0 <prvHeapInit+0xbc>)
 801308a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801308c:	4b09      	ldr	r3, [pc, #36]	; (80130b4 <prvHeapInit+0xc0>)
 801308e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8013092:	601a      	str	r2, [r3, #0]
}
 8013094:	bf00      	nop
 8013096:	3714      	adds	r7, #20
 8013098:	46bd      	mov	sp, r7
 801309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801309e:	4770      	bx	lr
 80130a0:	200015bc 	.word	0x200015bc
 80130a4:	200051bc 	.word	0x200051bc
 80130a8:	200051c4 	.word	0x200051c4
 80130ac:	200051cc 	.word	0x200051cc
 80130b0:	200051c8 	.word	0x200051c8
 80130b4:	200051d0 	.word	0x200051d0

080130b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80130b8:	b480      	push	{r7}
 80130ba:	b085      	sub	sp, #20
 80130bc:	af00      	add	r7, sp, #0
 80130be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80130c0:	4b28      	ldr	r3, [pc, #160]	; (8013164 <prvInsertBlockIntoFreeList+0xac>)
 80130c2:	60fb      	str	r3, [r7, #12]
 80130c4:	e002      	b.n	80130cc <prvInsertBlockIntoFreeList+0x14>
 80130c6:	68fb      	ldr	r3, [r7, #12]
 80130c8:	681b      	ldr	r3, [r3, #0]
 80130ca:	60fb      	str	r3, [r7, #12]
 80130cc:	68fb      	ldr	r3, [r7, #12]
 80130ce:	681b      	ldr	r3, [r3, #0]
 80130d0:	687a      	ldr	r2, [r7, #4]
 80130d2:	429a      	cmp	r2, r3
 80130d4:	d8f7      	bhi.n	80130c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80130d6:	68fb      	ldr	r3, [r7, #12]
 80130d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80130da:	68fb      	ldr	r3, [r7, #12]
 80130dc:	685b      	ldr	r3, [r3, #4]
 80130de:	68ba      	ldr	r2, [r7, #8]
 80130e0:	4413      	add	r3, r2
 80130e2:	687a      	ldr	r2, [r7, #4]
 80130e4:	429a      	cmp	r2, r3
 80130e6:	d108      	bne.n	80130fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80130e8:	68fb      	ldr	r3, [r7, #12]
 80130ea:	685a      	ldr	r2, [r3, #4]
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	685b      	ldr	r3, [r3, #4]
 80130f0:	441a      	add	r2, r3
 80130f2:	68fb      	ldr	r3, [r7, #12]
 80130f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80130f6:	68fb      	ldr	r3, [r7, #12]
 80130f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	685b      	ldr	r3, [r3, #4]
 8013102:	68ba      	ldr	r2, [r7, #8]
 8013104:	441a      	add	r2, r3
 8013106:	68fb      	ldr	r3, [r7, #12]
 8013108:	681b      	ldr	r3, [r3, #0]
 801310a:	429a      	cmp	r2, r3
 801310c:	d118      	bne.n	8013140 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801310e:	68fb      	ldr	r3, [r7, #12]
 8013110:	681a      	ldr	r2, [r3, #0]
 8013112:	4b15      	ldr	r3, [pc, #84]	; (8013168 <prvInsertBlockIntoFreeList+0xb0>)
 8013114:	681b      	ldr	r3, [r3, #0]
 8013116:	429a      	cmp	r2, r3
 8013118:	d00d      	beq.n	8013136 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	685a      	ldr	r2, [r3, #4]
 801311e:	68fb      	ldr	r3, [r7, #12]
 8013120:	681b      	ldr	r3, [r3, #0]
 8013122:	685b      	ldr	r3, [r3, #4]
 8013124:	441a      	add	r2, r3
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801312a:	68fb      	ldr	r3, [r7, #12]
 801312c:	681b      	ldr	r3, [r3, #0]
 801312e:	681a      	ldr	r2, [r3, #0]
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	601a      	str	r2, [r3, #0]
 8013134:	e008      	b.n	8013148 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8013136:	4b0c      	ldr	r3, [pc, #48]	; (8013168 <prvInsertBlockIntoFreeList+0xb0>)
 8013138:	681a      	ldr	r2, [r3, #0]
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	601a      	str	r2, [r3, #0]
 801313e:	e003      	b.n	8013148 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8013140:	68fb      	ldr	r3, [r7, #12]
 8013142:	681a      	ldr	r2, [r3, #0]
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8013148:	68fa      	ldr	r2, [r7, #12]
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	429a      	cmp	r2, r3
 801314e:	d002      	beq.n	8013156 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8013150:	68fb      	ldr	r3, [r7, #12]
 8013152:	687a      	ldr	r2, [r7, #4]
 8013154:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013156:	bf00      	nop
 8013158:	3714      	adds	r7, #20
 801315a:	46bd      	mov	sp, r7
 801315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013160:	4770      	bx	lr
 8013162:	bf00      	nop
 8013164:	200051bc 	.word	0x200051bc
 8013168:	200051c4 	.word	0x200051c4

0801316c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801316c:	b580      	push	{r7, lr}
 801316e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8013170:	2200      	movs	r2, #0
 8013172:	4912      	ldr	r1, [pc, #72]	; (80131bc <MX_USB_DEVICE_Init+0x50>)
 8013174:	4812      	ldr	r0, [pc, #72]	; (80131c0 <MX_USB_DEVICE_Init+0x54>)
 8013176:	f7fb fe03 	bl	800ed80 <USBD_Init>
 801317a:	4603      	mov	r3, r0
 801317c:	2b00      	cmp	r3, #0
 801317e:	d001      	beq.n	8013184 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8013180:	f7f0 f9f2 	bl	8003568 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8013184:	490f      	ldr	r1, [pc, #60]	; (80131c4 <MX_USB_DEVICE_Init+0x58>)
 8013186:	480e      	ldr	r0, [pc, #56]	; (80131c0 <MX_USB_DEVICE_Init+0x54>)
 8013188:	f7fb fe25 	bl	800edd6 <USBD_RegisterClass>
 801318c:	4603      	mov	r3, r0
 801318e:	2b00      	cmp	r3, #0
 8013190:	d001      	beq.n	8013196 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8013192:	f7f0 f9e9 	bl	8003568 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8013196:	490c      	ldr	r1, [pc, #48]	; (80131c8 <MX_USB_DEVICE_Init+0x5c>)
 8013198:	4809      	ldr	r0, [pc, #36]	; (80131c0 <MX_USB_DEVICE_Init+0x54>)
 801319a:	f7fb fd53 	bl	800ec44 <USBD_CDC_RegisterInterface>
 801319e:	4603      	mov	r3, r0
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	d001      	beq.n	80131a8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80131a4:	f7f0 f9e0 	bl	8003568 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80131a8:	4805      	ldr	r0, [pc, #20]	; (80131c0 <MX_USB_DEVICE_Init+0x54>)
 80131aa:	f7fb fe2e 	bl	800ee0a <USBD_Start>
 80131ae:	4603      	mov	r3, r0
 80131b0:	2b00      	cmp	r3, #0
 80131b2:	d001      	beq.n	80131b8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80131b4:	f7f0 f9d8 	bl	8003568 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80131b8:	bf00      	nop
 80131ba:	bd80      	pop	{r7, pc}
 80131bc:	20000de4 	.word	0x20000de4
 80131c0:	20005fb4 	.word	0x20005fb4
 80131c4:	20000ccc 	.word	0x20000ccc
 80131c8:	20000dd4 	.word	0x20000dd4

080131cc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80131cc:	b580      	push	{r7, lr}
 80131ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80131d0:	2200      	movs	r2, #0
 80131d2:	4905      	ldr	r1, [pc, #20]	; (80131e8 <CDC_Init_FS+0x1c>)
 80131d4:	4805      	ldr	r0, [pc, #20]	; (80131ec <CDC_Init_FS+0x20>)
 80131d6:	f7fb fd4c 	bl	800ec72 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80131da:	4905      	ldr	r1, [pc, #20]	; (80131f0 <CDC_Init_FS+0x24>)
 80131dc:	4803      	ldr	r0, [pc, #12]	; (80131ec <CDC_Init_FS+0x20>)
 80131de:	f7fb fd62 	bl	800eca6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80131e2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80131e4:	4618      	mov	r0, r3
 80131e6:	bd80      	pop	{r7, pc}
 80131e8:	20006450 	.word	0x20006450
 80131ec:	20005fb4 	.word	0x20005fb4
 80131f0:	20006250 	.word	0x20006250

080131f4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80131f4:	b480      	push	{r7}
 80131f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80131f8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80131fa:	4618      	mov	r0, r3
 80131fc:	46bd      	mov	sp, r7
 80131fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013202:	4770      	bx	lr

08013204 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8013204:	b480      	push	{r7}
 8013206:	b083      	sub	sp, #12
 8013208:	af00      	add	r7, sp, #0
 801320a:	4603      	mov	r3, r0
 801320c:	6039      	str	r1, [r7, #0]
 801320e:	71fb      	strb	r3, [r7, #7]
 8013210:	4613      	mov	r3, r2
 8013212:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8013214:	79fb      	ldrb	r3, [r7, #7]
 8013216:	2b23      	cmp	r3, #35	; 0x23
 8013218:	f200 808c 	bhi.w	8013334 <CDC_Control_FS+0x130>
 801321c:	a201      	add	r2, pc, #4	; (adr r2, 8013224 <CDC_Control_FS+0x20>)
 801321e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013222:	bf00      	nop
 8013224:	08013335 	.word	0x08013335
 8013228:	08013335 	.word	0x08013335
 801322c:	08013335 	.word	0x08013335
 8013230:	08013335 	.word	0x08013335
 8013234:	08013335 	.word	0x08013335
 8013238:	08013335 	.word	0x08013335
 801323c:	08013335 	.word	0x08013335
 8013240:	08013335 	.word	0x08013335
 8013244:	08013335 	.word	0x08013335
 8013248:	08013335 	.word	0x08013335
 801324c:	08013335 	.word	0x08013335
 8013250:	08013335 	.word	0x08013335
 8013254:	08013335 	.word	0x08013335
 8013258:	08013335 	.word	0x08013335
 801325c:	08013335 	.word	0x08013335
 8013260:	08013335 	.word	0x08013335
 8013264:	08013335 	.word	0x08013335
 8013268:	08013335 	.word	0x08013335
 801326c:	08013335 	.word	0x08013335
 8013270:	08013335 	.word	0x08013335
 8013274:	08013335 	.word	0x08013335
 8013278:	08013335 	.word	0x08013335
 801327c:	08013335 	.word	0x08013335
 8013280:	08013335 	.word	0x08013335
 8013284:	08013335 	.word	0x08013335
 8013288:	08013335 	.word	0x08013335
 801328c:	08013335 	.word	0x08013335
 8013290:	08013335 	.word	0x08013335
 8013294:	08013335 	.word	0x08013335
 8013298:	08013335 	.word	0x08013335
 801329c:	08013335 	.word	0x08013335
 80132a0:	08013335 	.word	0x08013335
 80132a4:	080132b5 	.word	0x080132b5
 80132a8:	080132ef 	.word	0x080132ef
 80132ac:	08013335 	.word	0x08013335
 80132b0:	08013335 	.word	0x08013335
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	TempBuf_USB[0]=pbuf[0];
 80132b4:	683b      	ldr	r3, [r7, #0]
 80132b6:	781a      	ldrb	r2, [r3, #0]
 80132b8:	4b22      	ldr	r3, [pc, #136]	; (8013344 <CDC_Control_FS+0x140>)
 80132ba:	701a      	strb	r2, [r3, #0]
    	TempBuf_USB[1]=pbuf[1];
 80132bc:	683b      	ldr	r3, [r7, #0]
 80132be:	785a      	ldrb	r2, [r3, #1]
 80132c0:	4b20      	ldr	r3, [pc, #128]	; (8013344 <CDC_Control_FS+0x140>)
 80132c2:	705a      	strb	r2, [r3, #1]
    	TempBuf_USB[2]=pbuf[2];
 80132c4:	683b      	ldr	r3, [r7, #0]
 80132c6:	789a      	ldrb	r2, [r3, #2]
 80132c8:	4b1e      	ldr	r3, [pc, #120]	; (8013344 <CDC_Control_FS+0x140>)
 80132ca:	709a      	strb	r2, [r3, #2]
    	TempBuf_USB[3]=pbuf[3];
 80132cc:	683b      	ldr	r3, [r7, #0]
 80132ce:	78da      	ldrb	r2, [r3, #3]
 80132d0:	4b1c      	ldr	r3, [pc, #112]	; (8013344 <CDC_Control_FS+0x140>)
 80132d2:	70da      	strb	r2, [r3, #3]
    	TempBuf_USB[4]=pbuf[4];
 80132d4:	683b      	ldr	r3, [r7, #0]
 80132d6:	791a      	ldrb	r2, [r3, #4]
 80132d8:	4b1a      	ldr	r3, [pc, #104]	; (8013344 <CDC_Control_FS+0x140>)
 80132da:	711a      	strb	r2, [r3, #4]
    	TempBuf_USB[5]=pbuf[5];
 80132dc:	683b      	ldr	r3, [r7, #0]
 80132de:	795a      	ldrb	r2, [r3, #5]
 80132e0:	4b18      	ldr	r3, [pc, #96]	; (8013344 <CDC_Control_FS+0x140>)
 80132e2:	715a      	strb	r2, [r3, #5]
    	TempBuf_USB[6]=pbuf[6];
 80132e4:	683b      	ldr	r3, [r7, #0]
 80132e6:	799a      	ldrb	r2, [r3, #6]
 80132e8:	4b16      	ldr	r3, [pc, #88]	; (8013344 <CDC_Control_FS+0x140>)
 80132ea:	719a      	strb	r2, [r3, #6]
    	break;
 80132ec:	e023      	b.n	8013336 <CDC_Control_FS+0x132>


    case CDC_GET_LINE_CODING:
        pbuf[0]=TempBuf_USB[0];
 80132ee:	4b15      	ldr	r3, [pc, #84]	; (8013344 <CDC_Control_FS+0x140>)
 80132f0:	781a      	ldrb	r2, [r3, #0]
 80132f2:	683b      	ldr	r3, [r7, #0]
 80132f4:	701a      	strb	r2, [r3, #0]
        pbuf[1]=TempBuf_USB[1];
 80132f6:	683b      	ldr	r3, [r7, #0]
 80132f8:	3301      	adds	r3, #1
 80132fa:	4a12      	ldr	r2, [pc, #72]	; (8013344 <CDC_Control_FS+0x140>)
 80132fc:	7852      	ldrb	r2, [r2, #1]
 80132fe:	701a      	strb	r2, [r3, #0]
        pbuf[2]=TempBuf_USB[2];
 8013300:	683b      	ldr	r3, [r7, #0]
 8013302:	3302      	adds	r3, #2
 8013304:	4a0f      	ldr	r2, [pc, #60]	; (8013344 <CDC_Control_FS+0x140>)
 8013306:	7892      	ldrb	r2, [r2, #2]
 8013308:	701a      	strb	r2, [r3, #0]
        pbuf[3]=TempBuf_USB[3];
 801330a:	683b      	ldr	r3, [r7, #0]
 801330c:	3303      	adds	r3, #3
 801330e:	4a0d      	ldr	r2, [pc, #52]	; (8013344 <CDC_Control_FS+0x140>)
 8013310:	78d2      	ldrb	r2, [r2, #3]
 8013312:	701a      	strb	r2, [r3, #0]
        pbuf[4]=TempBuf_USB[4];
 8013314:	683b      	ldr	r3, [r7, #0]
 8013316:	3304      	adds	r3, #4
 8013318:	4a0a      	ldr	r2, [pc, #40]	; (8013344 <CDC_Control_FS+0x140>)
 801331a:	7912      	ldrb	r2, [r2, #4]
 801331c:	701a      	strb	r2, [r3, #0]
        pbuf[5]=TempBuf_USB[5];
 801331e:	683b      	ldr	r3, [r7, #0]
 8013320:	3305      	adds	r3, #5
 8013322:	4a08      	ldr	r2, [pc, #32]	; (8013344 <CDC_Control_FS+0x140>)
 8013324:	7952      	ldrb	r2, [r2, #5]
 8013326:	701a      	strb	r2, [r3, #0]
        pbuf[6]=TempBuf_USB[6];
 8013328:	683b      	ldr	r3, [r7, #0]
 801332a:	3306      	adds	r3, #6
 801332c:	4a05      	ldr	r2, [pc, #20]	; (8013344 <CDC_Control_FS+0x140>)
 801332e:	7992      	ldrb	r2, [r2, #6]
 8013330:	701a      	strb	r2, [r3, #0]
    break;
 8013332:	e000      	b.n	8013336 <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8013334:	bf00      	nop
  }

  return (USBD_OK);
 8013336:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8013338:	4618      	mov	r0, r3
 801333a:	370c      	adds	r7, #12
 801333c:	46bd      	mov	sp, r7
 801333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013342:	4770      	bx	lr
 8013344:	20006650 	.word	0x20006650

08013348 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8013348:	b580      	push	{r7, lr}
 801334a:	b082      	sub	sp, #8
 801334c:	af00      	add	r7, sp, #0
 801334e:	6078      	str	r0, [r7, #4]
 8013350:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	ringBuff_PushArray(&usb_rx_ringbuff, Buf, (uint16_t)*Len);
 8013352:	683b      	ldr	r3, [r7, #0]
 8013354:	681b      	ldr	r3, [r3, #0]
 8013356:	b29b      	uxth	r3, r3
 8013358:	461a      	mov	r2, r3
 801335a:	6879      	ldr	r1, [r7, #4]
 801335c:	4807      	ldr	r0, [pc, #28]	; (801337c <CDC_Receive_FS+0x34>)
 801335e:	f7f0 f97a 	bl	8003656 <ringBuff_PushArray>
//	if ( END_CHAR == Buf[*Len - 1]) {
//		osSignalSet(USB_RX_Check_Handle, 0x01);
//	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8013362:	6879      	ldr	r1, [r7, #4]
 8013364:	4806      	ldr	r0, [pc, #24]	; (8013380 <CDC_Receive_FS+0x38>)
 8013366:	f7fb fc9e 	bl	800eca6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801336a:	4805      	ldr	r0, [pc, #20]	; (8013380 <CDC_Receive_FS+0x38>)
 801336c:	f7fb fcde 	bl	800ed2c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8013370:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8013372:	4618      	mov	r0, r3
 8013374:	3708      	adds	r7, #8
 8013376:	46bd      	mov	sp, r7
 8013378:	bd80      	pop	{r7, pc}
 801337a:	bf00      	nop
 801337c:	20000054 	.word	0x20000054
 8013380:	20005fb4 	.word	0x20005fb4

08013384 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8013384:	b580      	push	{r7, lr}
 8013386:	b084      	sub	sp, #16
 8013388:	af00      	add	r7, sp, #0
 801338a:	6078      	str	r0, [r7, #4]
 801338c:	460b      	mov	r3, r1
 801338e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8013390:	2300      	movs	r3, #0
 8013392:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8013394:	4b0d      	ldr	r3, [pc, #52]	; (80133cc <CDC_Transmit_FS+0x48>)
 8013396:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 801339a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801339c:	68bb      	ldr	r3, [r7, #8]
 801339e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80133a2:	2b00      	cmp	r3, #0
 80133a4:	d001      	beq.n	80133aa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80133a6:	2301      	movs	r3, #1
 80133a8:	e00b      	b.n	80133c2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80133aa:	887b      	ldrh	r3, [r7, #2]
 80133ac:	461a      	mov	r2, r3
 80133ae:	6879      	ldr	r1, [r7, #4]
 80133b0:	4806      	ldr	r0, [pc, #24]	; (80133cc <CDC_Transmit_FS+0x48>)
 80133b2:	f7fb fc5e 	bl	800ec72 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80133b6:	4805      	ldr	r0, [pc, #20]	; (80133cc <CDC_Transmit_FS+0x48>)
 80133b8:	f7fb fc89 	bl	800ecce <USBD_CDC_TransmitPacket>
 80133bc:	4603      	mov	r3, r0
 80133be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80133c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80133c2:	4618      	mov	r0, r3
 80133c4:	3710      	adds	r7, #16
 80133c6:	46bd      	mov	sp, r7
 80133c8:	bd80      	pop	{r7, pc}
 80133ca:	bf00      	nop
 80133cc:	20005fb4 	.word	0x20005fb4

080133d0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80133d0:	b480      	push	{r7}
 80133d2:	b083      	sub	sp, #12
 80133d4:	af00      	add	r7, sp, #0
 80133d6:	4603      	mov	r3, r0
 80133d8:	6039      	str	r1, [r7, #0]
 80133da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80133dc:	683b      	ldr	r3, [r7, #0]
 80133de:	2212      	movs	r2, #18
 80133e0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80133e2:	4b03      	ldr	r3, [pc, #12]	; (80133f0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80133e4:	4618      	mov	r0, r3
 80133e6:	370c      	adds	r7, #12
 80133e8:	46bd      	mov	sp, r7
 80133ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133ee:	4770      	bx	lr
 80133f0:	20000e00 	.word	0x20000e00

080133f4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80133f4:	b480      	push	{r7}
 80133f6:	b083      	sub	sp, #12
 80133f8:	af00      	add	r7, sp, #0
 80133fa:	4603      	mov	r3, r0
 80133fc:	6039      	str	r1, [r7, #0]
 80133fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8013400:	683b      	ldr	r3, [r7, #0]
 8013402:	2204      	movs	r2, #4
 8013404:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8013406:	4b03      	ldr	r3, [pc, #12]	; (8013414 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8013408:	4618      	mov	r0, r3
 801340a:	370c      	adds	r7, #12
 801340c:	46bd      	mov	sp, r7
 801340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013412:	4770      	bx	lr
 8013414:	20000e14 	.word	0x20000e14

08013418 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013418:	b580      	push	{r7, lr}
 801341a:	b082      	sub	sp, #8
 801341c:	af00      	add	r7, sp, #0
 801341e:	4603      	mov	r3, r0
 8013420:	6039      	str	r1, [r7, #0]
 8013422:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8013424:	79fb      	ldrb	r3, [r7, #7]
 8013426:	2b00      	cmp	r3, #0
 8013428:	d105      	bne.n	8013436 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801342a:	683a      	ldr	r2, [r7, #0]
 801342c:	4907      	ldr	r1, [pc, #28]	; (801344c <USBD_FS_ProductStrDescriptor+0x34>)
 801342e:	4808      	ldr	r0, [pc, #32]	; (8013450 <USBD_FS_ProductStrDescriptor+0x38>)
 8013430:	f7fc fc22 	bl	800fc78 <USBD_GetString>
 8013434:	e004      	b.n	8013440 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8013436:	683a      	ldr	r2, [r7, #0]
 8013438:	4904      	ldr	r1, [pc, #16]	; (801344c <USBD_FS_ProductStrDescriptor+0x34>)
 801343a:	4805      	ldr	r0, [pc, #20]	; (8013450 <USBD_FS_ProductStrDescriptor+0x38>)
 801343c:	f7fc fc1c 	bl	800fc78 <USBD_GetString>
  }
  return USBD_StrDesc;
 8013440:	4b02      	ldr	r3, [pc, #8]	; (801344c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8013442:	4618      	mov	r0, r3
 8013444:	3708      	adds	r7, #8
 8013446:	46bd      	mov	sp, r7
 8013448:	bd80      	pop	{r7, pc}
 801344a:	bf00      	nop
 801344c:	20006658 	.word	0x20006658
 8013450:	08019e00 	.word	0x08019e00

08013454 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013454:	b580      	push	{r7, lr}
 8013456:	b082      	sub	sp, #8
 8013458:	af00      	add	r7, sp, #0
 801345a:	4603      	mov	r3, r0
 801345c:	6039      	str	r1, [r7, #0]
 801345e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8013460:	683a      	ldr	r2, [r7, #0]
 8013462:	4904      	ldr	r1, [pc, #16]	; (8013474 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8013464:	4804      	ldr	r0, [pc, #16]	; (8013478 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8013466:	f7fc fc07 	bl	800fc78 <USBD_GetString>
  return USBD_StrDesc;
 801346a:	4b02      	ldr	r3, [pc, #8]	; (8013474 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801346c:	4618      	mov	r0, r3
 801346e:	3708      	adds	r7, #8
 8013470:	46bd      	mov	sp, r7
 8013472:	bd80      	pop	{r7, pc}
 8013474:	20006658 	.word	0x20006658
 8013478:	08019e18 	.word	0x08019e18

0801347c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801347c:	b580      	push	{r7, lr}
 801347e:	b082      	sub	sp, #8
 8013480:	af00      	add	r7, sp, #0
 8013482:	4603      	mov	r3, r0
 8013484:	6039      	str	r1, [r7, #0]
 8013486:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8013488:	683b      	ldr	r3, [r7, #0]
 801348a:	221a      	movs	r2, #26
 801348c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801348e:	f000 f843 	bl	8013518 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8013492:	4b02      	ldr	r3, [pc, #8]	; (801349c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8013494:	4618      	mov	r0, r3
 8013496:	3708      	adds	r7, #8
 8013498:	46bd      	mov	sp, r7
 801349a:	bd80      	pop	{r7, pc}
 801349c:	20000e18 	.word	0x20000e18

080134a0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80134a0:	b580      	push	{r7, lr}
 80134a2:	b082      	sub	sp, #8
 80134a4:	af00      	add	r7, sp, #0
 80134a6:	4603      	mov	r3, r0
 80134a8:	6039      	str	r1, [r7, #0]
 80134aa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80134ac:	79fb      	ldrb	r3, [r7, #7]
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	d105      	bne.n	80134be <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80134b2:	683a      	ldr	r2, [r7, #0]
 80134b4:	4907      	ldr	r1, [pc, #28]	; (80134d4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80134b6:	4808      	ldr	r0, [pc, #32]	; (80134d8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80134b8:	f7fc fbde 	bl	800fc78 <USBD_GetString>
 80134bc:	e004      	b.n	80134c8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80134be:	683a      	ldr	r2, [r7, #0]
 80134c0:	4904      	ldr	r1, [pc, #16]	; (80134d4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80134c2:	4805      	ldr	r0, [pc, #20]	; (80134d8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80134c4:	f7fc fbd8 	bl	800fc78 <USBD_GetString>
  }
  return USBD_StrDesc;
 80134c8:	4b02      	ldr	r3, [pc, #8]	; (80134d4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80134ca:	4618      	mov	r0, r3
 80134cc:	3708      	adds	r7, #8
 80134ce:	46bd      	mov	sp, r7
 80134d0:	bd80      	pop	{r7, pc}
 80134d2:	bf00      	nop
 80134d4:	20006658 	.word	0x20006658
 80134d8:	08019e2c 	.word	0x08019e2c

080134dc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80134dc:	b580      	push	{r7, lr}
 80134de:	b082      	sub	sp, #8
 80134e0:	af00      	add	r7, sp, #0
 80134e2:	4603      	mov	r3, r0
 80134e4:	6039      	str	r1, [r7, #0]
 80134e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80134e8:	79fb      	ldrb	r3, [r7, #7]
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	d105      	bne.n	80134fa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80134ee:	683a      	ldr	r2, [r7, #0]
 80134f0:	4907      	ldr	r1, [pc, #28]	; (8013510 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80134f2:	4808      	ldr	r0, [pc, #32]	; (8013514 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80134f4:	f7fc fbc0 	bl	800fc78 <USBD_GetString>
 80134f8:	e004      	b.n	8013504 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80134fa:	683a      	ldr	r2, [r7, #0]
 80134fc:	4904      	ldr	r1, [pc, #16]	; (8013510 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80134fe:	4805      	ldr	r0, [pc, #20]	; (8013514 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8013500:	f7fc fbba 	bl	800fc78 <USBD_GetString>
  }
  return USBD_StrDesc;
 8013504:	4b02      	ldr	r3, [pc, #8]	; (8013510 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8013506:	4618      	mov	r0, r3
 8013508:	3708      	adds	r7, #8
 801350a:	46bd      	mov	sp, r7
 801350c:	bd80      	pop	{r7, pc}
 801350e:	bf00      	nop
 8013510:	20006658 	.word	0x20006658
 8013514:	08019e38 	.word	0x08019e38

08013518 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8013518:	b580      	push	{r7, lr}
 801351a:	b084      	sub	sp, #16
 801351c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801351e:	4b0f      	ldr	r3, [pc, #60]	; (801355c <Get_SerialNum+0x44>)
 8013520:	681b      	ldr	r3, [r3, #0]
 8013522:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8013524:	4b0e      	ldr	r3, [pc, #56]	; (8013560 <Get_SerialNum+0x48>)
 8013526:	681b      	ldr	r3, [r3, #0]
 8013528:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801352a:	4b0e      	ldr	r3, [pc, #56]	; (8013564 <Get_SerialNum+0x4c>)
 801352c:	681b      	ldr	r3, [r3, #0]
 801352e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8013530:	68fa      	ldr	r2, [r7, #12]
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	4413      	add	r3, r2
 8013536:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8013538:	68fb      	ldr	r3, [r7, #12]
 801353a:	2b00      	cmp	r3, #0
 801353c:	d009      	beq.n	8013552 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801353e:	2208      	movs	r2, #8
 8013540:	4909      	ldr	r1, [pc, #36]	; (8013568 <Get_SerialNum+0x50>)
 8013542:	68f8      	ldr	r0, [r7, #12]
 8013544:	f000 f814 	bl	8013570 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8013548:	2204      	movs	r2, #4
 801354a:	4908      	ldr	r1, [pc, #32]	; (801356c <Get_SerialNum+0x54>)
 801354c:	68b8      	ldr	r0, [r7, #8]
 801354e:	f000 f80f 	bl	8013570 <IntToUnicode>
  }
}
 8013552:	bf00      	nop
 8013554:	3710      	adds	r7, #16
 8013556:	46bd      	mov	sp, r7
 8013558:	bd80      	pop	{r7, pc}
 801355a:	bf00      	nop
 801355c:	1fff7a10 	.word	0x1fff7a10
 8013560:	1fff7a14 	.word	0x1fff7a14
 8013564:	1fff7a18 	.word	0x1fff7a18
 8013568:	20000e1a 	.word	0x20000e1a
 801356c:	20000e2a 	.word	0x20000e2a

08013570 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8013570:	b480      	push	{r7}
 8013572:	b087      	sub	sp, #28
 8013574:	af00      	add	r7, sp, #0
 8013576:	60f8      	str	r0, [r7, #12]
 8013578:	60b9      	str	r1, [r7, #8]
 801357a:	4613      	mov	r3, r2
 801357c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801357e:	2300      	movs	r3, #0
 8013580:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8013582:	2300      	movs	r3, #0
 8013584:	75fb      	strb	r3, [r7, #23]
 8013586:	e027      	b.n	80135d8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8013588:	68fb      	ldr	r3, [r7, #12]
 801358a:	0f1b      	lsrs	r3, r3, #28
 801358c:	2b09      	cmp	r3, #9
 801358e:	d80b      	bhi.n	80135a8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8013590:	68fb      	ldr	r3, [r7, #12]
 8013592:	0f1b      	lsrs	r3, r3, #28
 8013594:	b2da      	uxtb	r2, r3
 8013596:	7dfb      	ldrb	r3, [r7, #23]
 8013598:	005b      	lsls	r3, r3, #1
 801359a:	4619      	mov	r1, r3
 801359c:	68bb      	ldr	r3, [r7, #8]
 801359e:	440b      	add	r3, r1
 80135a0:	3230      	adds	r2, #48	; 0x30
 80135a2:	b2d2      	uxtb	r2, r2
 80135a4:	701a      	strb	r2, [r3, #0]
 80135a6:	e00a      	b.n	80135be <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80135a8:	68fb      	ldr	r3, [r7, #12]
 80135aa:	0f1b      	lsrs	r3, r3, #28
 80135ac:	b2da      	uxtb	r2, r3
 80135ae:	7dfb      	ldrb	r3, [r7, #23]
 80135b0:	005b      	lsls	r3, r3, #1
 80135b2:	4619      	mov	r1, r3
 80135b4:	68bb      	ldr	r3, [r7, #8]
 80135b6:	440b      	add	r3, r1
 80135b8:	3237      	adds	r2, #55	; 0x37
 80135ba:	b2d2      	uxtb	r2, r2
 80135bc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80135be:	68fb      	ldr	r3, [r7, #12]
 80135c0:	011b      	lsls	r3, r3, #4
 80135c2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80135c4:	7dfb      	ldrb	r3, [r7, #23]
 80135c6:	005b      	lsls	r3, r3, #1
 80135c8:	3301      	adds	r3, #1
 80135ca:	68ba      	ldr	r2, [r7, #8]
 80135cc:	4413      	add	r3, r2
 80135ce:	2200      	movs	r2, #0
 80135d0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80135d2:	7dfb      	ldrb	r3, [r7, #23]
 80135d4:	3301      	adds	r3, #1
 80135d6:	75fb      	strb	r3, [r7, #23]
 80135d8:	7dfa      	ldrb	r2, [r7, #23]
 80135da:	79fb      	ldrb	r3, [r7, #7]
 80135dc:	429a      	cmp	r2, r3
 80135de:	d3d3      	bcc.n	8013588 <IntToUnicode+0x18>
  }
}
 80135e0:	bf00      	nop
 80135e2:	371c      	adds	r7, #28
 80135e4:	46bd      	mov	sp, r7
 80135e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135ea:	4770      	bx	lr

080135ec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80135ec:	b580      	push	{r7, lr}
 80135ee:	b08a      	sub	sp, #40	; 0x28
 80135f0:	af00      	add	r7, sp, #0
 80135f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80135f4:	f107 0314 	add.w	r3, r7, #20
 80135f8:	2200      	movs	r2, #0
 80135fa:	601a      	str	r2, [r3, #0]
 80135fc:	605a      	str	r2, [r3, #4]
 80135fe:	609a      	str	r2, [r3, #8]
 8013600:	60da      	str	r2, [r3, #12]
 8013602:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	681b      	ldr	r3, [r3, #0]
 8013608:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801360c:	d13a      	bne.n	8013684 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801360e:	2300      	movs	r3, #0
 8013610:	613b      	str	r3, [r7, #16]
 8013612:	4b1e      	ldr	r3, [pc, #120]	; (801368c <HAL_PCD_MspInit+0xa0>)
 8013614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013616:	4a1d      	ldr	r2, [pc, #116]	; (801368c <HAL_PCD_MspInit+0xa0>)
 8013618:	f043 0301 	orr.w	r3, r3, #1
 801361c:	6313      	str	r3, [r2, #48]	; 0x30
 801361e:	4b1b      	ldr	r3, [pc, #108]	; (801368c <HAL_PCD_MspInit+0xa0>)
 8013620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013622:	f003 0301 	and.w	r3, r3, #1
 8013626:	613b      	str	r3, [r7, #16]
 8013628:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801362a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801362e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013630:	2302      	movs	r3, #2
 8013632:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013634:	2300      	movs	r3, #0
 8013636:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013638:	2303      	movs	r3, #3
 801363a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801363c:	230a      	movs	r3, #10
 801363e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013640:	f107 0314 	add.w	r3, r7, #20
 8013644:	4619      	mov	r1, r3
 8013646:	4812      	ldr	r0, [pc, #72]	; (8013690 <HAL_PCD_MspInit+0xa4>)
 8013648:	f7f6 fb34 	bl	8009cb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801364c:	4b0f      	ldr	r3, [pc, #60]	; (801368c <HAL_PCD_MspInit+0xa0>)
 801364e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013650:	4a0e      	ldr	r2, [pc, #56]	; (801368c <HAL_PCD_MspInit+0xa0>)
 8013652:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013656:	6353      	str	r3, [r2, #52]	; 0x34
 8013658:	2300      	movs	r3, #0
 801365a:	60fb      	str	r3, [r7, #12]
 801365c:	4b0b      	ldr	r3, [pc, #44]	; (801368c <HAL_PCD_MspInit+0xa0>)
 801365e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013660:	4a0a      	ldr	r2, [pc, #40]	; (801368c <HAL_PCD_MspInit+0xa0>)
 8013662:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8013666:	6453      	str	r3, [r2, #68]	; 0x44
 8013668:	4b08      	ldr	r3, [pc, #32]	; (801368c <HAL_PCD_MspInit+0xa0>)
 801366a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801366c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013670:	60fb      	str	r3, [r7, #12]
 8013672:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8013674:	2200      	movs	r2, #0
 8013676:	2105      	movs	r1, #5
 8013678:	2043      	movs	r0, #67	; 0x43
 801367a:	f7f5 ff53 	bl	8009524 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801367e:	2043      	movs	r0, #67	; 0x43
 8013680:	f7f5 ff6c 	bl	800955c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8013684:	bf00      	nop
 8013686:	3728      	adds	r7, #40	; 0x28
 8013688:	46bd      	mov	sp, r7
 801368a:	bd80      	pop	{r7, pc}
 801368c:	40023800 	.word	0x40023800
 8013690:	40020000 	.word	0x40020000

08013694 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013694:	b580      	push	{r7, lr}
 8013696:	b082      	sub	sp, #8
 8013698:	af00      	add	r7, sp, #0
 801369a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80136a8:	4619      	mov	r1, r3
 80136aa:	4610      	mov	r0, r2
 80136ac:	f7fb fbf6 	bl	800ee9c <USBD_LL_SetupStage>
}
 80136b0:	bf00      	nop
 80136b2:	3708      	adds	r7, #8
 80136b4:	46bd      	mov	sp, r7
 80136b6:	bd80      	pop	{r7, pc}

080136b8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80136b8:	b580      	push	{r7, lr}
 80136ba:	b082      	sub	sp, #8
 80136bc:	af00      	add	r7, sp, #0
 80136be:	6078      	str	r0, [r7, #4]
 80136c0:	460b      	mov	r3, r1
 80136c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80136ca:	78fa      	ldrb	r2, [r7, #3]
 80136cc:	6879      	ldr	r1, [r7, #4]
 80136ce:	4613      	mov	r3, r2
 80136d0:	00db      	lsls	r3, r3, #3
 80136d2:	1a9b      	subs	r3, r3, r2
 80136d4:	009b      	lsls	r3, r3, #2
 80136d6:	440b      	add	r3, r1
 80136d8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80136dc:	681a      	ldr	r2, [r3, #0]
 80136de:	78fb      	ldrb	r3, [r7, #3]
 80136e0:	4619      	mov	r1, r3
 80136e2:	f7fb fc26 	bl	800ef32 <USBD_LL_DataOutStage>
}
 80136e6:	bf00      	nop
 80136e8:	3708      	adds	r7, #8
 80136ea:	46bd      	mov	sp, r7
 80136ec:	bd80      	pop	{r7, pc}

080136ee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80136ee:	b580      	push	{r7, lr}
 80136f0:	b082      	sub	sp, #8
 80136f2:	af00      	add	r7, sp, #0
 80136f4:	6078      	str	r0, [r7, #4]
 80136f6:	460b      	mov	r3, r1
 80136f8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8013700:	78fa      	ldrb	r2, [r7, #3]
 8013702:	6879      	ldr	r1, [r7, #4]
 8013704:	4613      	mov	r3, r2
 8013706:	00db      	lsls	r3, r3, #3
 8013708:	1a9b      	subs	r3, r3, r2
 801370a:	009b      	lsls	r3, r3, #2
 801370c:	440b      	add	r3, r1
 801370e:	3348      	adds	r3, #72	; 0x48
 8013710:	681a      	ldr	r2, [r3, #0]
 8013712:	78fb      	ldrb	r3, [r7, #3]
 8013714:	4619      	mov	r1, r3
 8013716:	f7fb fc7d 	bl	800f014 <USBD_LL_DataInStage>
}
 801371a:	bf00      	nop
 801371c:	3708      	adds	r7, #8
 801371e:	46bd      	mov	sp, r7
 8013720:	bd80      	pop	{r7, pc}

08013722 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013722:	b580      	push	{r7, lr}
 8013724:	b082      	sub	sp, #8
 8013726:	af00      	add	r7, sp, #0
 8013728:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8013730:	4618      	mov	r0, r3
 8013732:	f7fb fd8b 	bl	800f24c <USBD_LL_SOF>
}
 8013736:	bf00      	nop
 8013738:	3708      	adds	r7, #8
 801373a:	46bd      	mov	sp, r7
 801373c:	bd80      	pop	{r7, pc}

0801373e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 801373e:	b580      	push	{r7, lr}
 8013740:	b084      	sub	sp, #16
 8013742:	af00      	add	r7, sp, #0
 8013744:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8013746:	2301      	movs	r3, #1
 8013748:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	68db      	ldr	r3, [r3, #12]
 801374e:	2b00      	cmp	r3, #0
 8013750:	d102      	bne.n	8013758 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8013752:	2300      	movs	r3, #0
 8013754:	73fb      	strb	r3, [r7, #15]
 8013756:	e008      	b.n	801376a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	68db      	ldr	r3, [r3, #12]
 801375c:	2b02      	cmp	r3, #2
 801375e:	d102      	bne.n	8013766 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8013760:	2301      	movs	r3, #1
 8013762:	73fb      	strb	r3, [r7, #15]
 8013764:	e001      	b.n	801376a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8013766:	f7ef feff 	bl	8003568 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8013770:	7bfa      	ldrb	r2, [r7, #15]
 8013772:	4611      	mov	r1, r2
 8013774:	4618      	mov	r0, r3
 8013776:	f7fb fd33 	bl	800f1e0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8013780:	4618      	mov	r0, r3
 8013782:	f7fb fcec 	bl	800f15e <USBD_LL_Reset>
}
 8013786:	bf00      	nop
 8013788:	3710      	adds	r7, #16
 801378a:	46bd      	mov	sp, r7
 801378c:	bd80      	pop	{r7, pc}
	...

08013790 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013790:	b580      	push	{r7, lr}
 8013792:	b082      	sub	sp, #8
 8013794:	af00      	add	r7, sp, #0
 8013796:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801379e:	4618      	mov	r0, r3
 80137a0:	f7fb fd2e 	bl	800f200 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	681b      	ldr	r3, [r3, #0]
 80137a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80137ac:	681b      	ldr	r3, [r3, #0]
 80137ae:	687a      	ldr	r2, [r7, #4]
 80137b0:	6812      	ldr	r2, [r2, #0]
 80137b2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80137b6:	f043 0301 	orr.w	r3, r3, #1
 80137ba:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	6a1b      	ldr	r3, [r3, #32]
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	d005      	beq.n	80137d0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80137c4:	4b04      	ldr	r3, [pc, #16]	; (80137d8 <HAL_PCD_SuspendCallback+0x48>)
 80137c6:	691b      	ldr	r3, [r3, #16]
 80137c8:	4a03      	ldr	r2, [pc, #12]	; (80137d8 <HAL_PCD_SuspendCallback+0x48>)
 80137ca:	f043 0306 	orr.w	r3, r3, #6
 80137ce:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80137d0:	bf00      	nop
 80137d2:	3708      	adds	r7, #8
 80137d4:	46bd      	mov	sp, r7
 80137d6:	bd80      	pop	{r7, pc}
 80137d8:	e000ed00 	.word	0xe000ed00

080137dc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80137dc:	b580      	push	{r7, lr}
 80137de:	b082      	sub	sp, #8
 80137e0:	af00      	add	r7, sp, #0
 80137e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80137ea:	4618      	mov	r0, r3
 80137ec:	f7fb fd1d 	bl	800f22a <USBD_LL_Resume>
}
 80137f0:	bf00      	nop
 80137f2:	3708      	adds	r7, #8
 80137f4:	46bd      	mov	sp, r7
 80137f6:	bd80      	pop	{r7, pc}

080137f8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80137f8:	b580      	push	{r7, lr}
 80137fa:	b082      	sub	sp, #8
 80137fc:	af00      	add	r7, sp, #0
 80137fe:	6078      	str	r0, [r7, #4]
 8013800:	460b      	mov	r3, r1
 8013802:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801380a:	78fa      	ldrb	r2, [r7, #3]
 801380c:	4611      	mov	r1, r2
 801380e:	4618      	mov	r0, r3
 8013810:	f7fb fd43 	bl	800f29a <USBD_LL_IsoOUTIncomplete>
}
 8013814:	bf00      	nop
 8013816:	3708      	adds	r7, #8
 8013818:	46bd      	mov	sp, r7
 801381a:	bd80      	pop	{r7, pc}

0801381c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801381c:	b580      	push	{r7, lr}
 801381e:	b082      	sub	sp, #8
 8013820:	af00      	add	r7, sp, #0
 8013822:	6078      	str	r0, [r7, #4]
 8013824:	460b      	mov	r3, r1
 8013826:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8013828:	687b      	ldr	r3, [r7, #4]
 801382a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801382e:	78fa      	ldrb	r2, [r7, #3]
 8013830:	4611      	mov	r1, r2
 8013832:	4618      	mov	r0, r3
 8013834:	f7fb fd24 	bl	800f280 <USBD_LL_IsoINIncomplete>
}
 8013838:	bf00      	nop
 801383a:	3708      	adds	r7, #8
 801383c:	46bd      	mov	sp, r7
 801383e:	bd80      	pop	{r7, pc}

08013840 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013840:	b580      	push	{r7, lr}
 8013842:	b082      	sub	sp, #8
 8013844:	af00      	add	r7, sp, #0
 8013846:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801384e:	4618      	mov	r0, r3
 8013850:	f7fb fd30 	bl	800f2b4 <USBD_LL_DevConnected>
}
 8013854:	bf00      	nop
 8013856:	3708      	adds	r7, #8
 8013858:	46bd      	mov	sp, r7
 801385a:	bd80      	pop	{r7, pc}

0801385c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801385c:	b580      	push	{r7, lr}
 801385e:	b082      	sub	sp, #8
 8013860:	af00      	add	r7, sp, #0
 8013862:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801386a:	4618      	mov	r0, r3
 801386c:	f7fb fd2d 	bl	800f2ca <USBD_LL_DevDisconnected>
}
 8013870:	bf00      	nop
 8013872:	3708      	adds	r7, #8
 8013874:	46bd      	mov	sp, r7
 8013876:	bd80      	pop	{r7, pc}

08013878 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8013878:	b580      	push	{r7, lr}
 801387a:	b082      	sub	sp, #8
 801387c:	af00      	add	r7, sp, #0
 801387e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	781b      	ldrb	r3, [r3, #0]
 8013884:	2b00      	cmp	r3, #0
 8013886:	d13c      	bne.n	8013902 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8013888:	4a20      	ldr	r2, [pc, #128]	; (801390c <USBD_LL_Init+0x94>)
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	4a1e      	ldr	r2, [pc, #120]	; (801390c <USBD_LL_Init+0x94>)
 8013894:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8013898:	4b1c      	ldr	r3, [pc, #112]	; (801390c <USBD_LL_Init+0x94>)
 801389a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801389e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80138a0:	4b1a      	ldr	r3, [pc, #104]	; (801390c <USBD_LL_Init+0x94>)
 80138a2:	2204      	movs	r2, #4
 80138a4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80138a6:	4b19      	ldr	r3, [pc, #100]	; (801390c <USBD_LL_Init+0x94>)
 80138a8:	2202      	movs	r2, #2
 80138aa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80138ac:	4b17      	ldr	r3, [pc, #92]	; (801390c <USBD_LL_Init+0x94>)
 80138ae:	2200      	movs	r2, #0
 80138b0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80138b2:	4b16      	ldr	r3, [pc, #88]	; (801390c <USBD_LL_Init+0x94>)
 80138b4:	2202      	movs	r2, #2
 80138b6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80138b8:	4b14      	ldr	r3, [pc, #80]	; (801390c <USBD_LL_Init+0x94>)
 80138ba:	2200      	movs	r2, #0
 80138bc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80138be:	4b13      	ldr	r3, [pc, #76]	; (801390c <USBD_LL_Init+0x94>)
 80138c0:	2200      	movs	r2, #0
 80138c2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80138c4:	4b11      	ldr	r3, [pc, #68]	; (801390c <USBD_LL_Init+0x94>)
 80138c6:	2200      	movs	r2, #0
 80138c8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80138ca:	4b10      	ldr	r3, [pc, #64]	; (801390c <USBD_LL_Init+0x94>)
 80138cc:	2200      	movs	r2, #0
 80138ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80138d0:	4b0e      	ldr	r3, [pc, #56]	; (801390c <USBD_LL_Init+0x94>)
 80138d2:	2200      	movs	r2, #0
 80138d4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80138d6:	480d      	ldr	r0, [pc, #52]	; (801390c <USBD_LL_Init+0x94>)
 80138d8:	f7f6 fbf6 	bl	800a0c8 <HAL_PCD_Init>
 80138dc:	4603      	mov	r3, r0
 80138de:	2b00      	cmp	r3, #0
 80138e0:	d001      	beq.n	80138e6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80138e2:	f7ef fe41 	bl	8003568 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80138e6:	2180      	movs	r1, #128	; 0x80
 80138e8:	4808      	ldr	r0, [pc, #32]	; (801390c <USBD_LL_Init+0x94>)
 80138ea:	f7f7 fd5a 	bl	800b3a2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80138ee:	2240      	movs	r2, #64	; 0x40
 80138f0:	2100      	movs	r1, #0
 80138f2:	4806      	ldr	r0, [pc, #24]	; (801390c <USBD_LL_Init+0x94>)
 80138f4:	f7f7 fd0e 	bl	800b314 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80138f8:	2280      	movs	r2, #128	; 0x80
 80138fa:	2101      	movs	r1, #1
 80138fc:	4803      	ldr	r0, [pc, #12]	; (801390c <USBD_LL_Init+0x94>)
 80138fe:	f7f7 fd09 	bl	800b314 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8013902:	2300      	movs	r3, #0
}
 8013904:	4618      	mov	r0, r3
 8013906:	3708      	adds	r7, #8
 8013908:	46bd      	mov	sp, r7
 801390a:	bd80      	pop	{r7, pc}
 801390c:	20006858 	.word	0x20006858

08013910 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8013910:	b580      	push	{r7, lr}
 8013912:	b084      	sub	sp, #16
 8013914:	af00      	add	r7, sp, #0
 8013916:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013918:	2300      	movs	r3, #0
 801391a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801391c:	2300      	movs	r3, #0
 801391e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8013926:	4618      	mov	r0, r3
 8013928:	f7f6 fceb 	bl	800a302 <HAL_PCD_Start>
 801392c:	4603      	mov	r3, r0
 801392e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8013930:	7bfb      	ldrb	r3, [r7, #15]
 8013932:	4618      	mov	r0, r3
 8013934:	f000 f92e 	bl	8013b94 <USBD_Get_USB_Status>
 8013938:	4603      	mov	r3, r0
 801393a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801393c:	7bbb      	ldrb	r3, [r7, #14]
}
 801393e:	4618      	mov	r0, r3
 8013940:	3710      	adds	r7, #16
 8013942:	46bd      	mov	sp, r7
 8013944:	bd80      	pop	{r7, pc}

08013946 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8013946:	b580      	push	{r7, lr}
 8013948:	b084      	sub	sp, #16
 801394a:	af00      	add	r7, sp, #0
 801394c:	6078      	str	r0, [r7, #4]
 801394e:	4608      	mov	r0, r1
 8013950:	4611      	mov	r1, r2
 8013952:	461a      	mov	r2, r3
 8013954:	4603      	mov	r3, r0
 8013956:	70fb      	strb	r3, [r7, #3]
 8013958:	460b      	mov	r3, r1
 801395a:	70bb      	strb	r3, [r7, #2]
 801395c:	4613      	mov	r3, r2
 801395e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013960:	2300      	movs	r3, #0
 8013962:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013964:	2300      	movs	r3, #0
 8013966:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 801396e:	78bb      	ldrb	r3, [r7, #2]
 8013970:	883a      	ldrh	r2, [r7, #0]
 8013972:	78f9      	ldrb	r1, [r7, #3]
 8013974:	f7f7 f8c0 	bl	800aaf8 <HAL_PCD_EP_Open>
 8013978:	4603      	mov	r3, r0
 801397a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801397c:	7bfb      	ldrb	r3, [r7, #15]
 801397e:	4618      	mov	r0, r3
 8013980:	f000 f908 	bl	8013b94 <USBD_Get_USB_Status>
 8013984:	4603      	mov	r3, r0
 8013986:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8013988:	7bbb      	ldrb	r3, [r7, #14]
}
 801398a:	4618      	mov	r0, r3
 801398c:	3710      	adds	r7, #16
 801398e:	46bd      	mov	sp, r7
 8013990:	bd80      	pop	{r7, pc}

08013992 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013992:	b580      	push	{r7, lr}
 8013994:	b084      	sub	sp, #16
 8013996:	af00      	add	r7, sp, #0
 8013998:	6078      	str	r0, [r7, #4]
 801399a:	460b      	mov	r3, r1
 801399c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801399e:	2300      	movs	r3, #0
 80139a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80139a2:	2300      	movs	r3, #0
 80139a4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80139ac:	78fa      	ldrb	r2, [r7, #3]
 80139ae:	4611      	mov	r1, r2
 80139b0:	4618      	mov	r0, r3
 80139b2:	f7f7 f909 	bl	800abc8 <HAL_PCD_EP_Close>
 80139b6:	4603      	mov	r3, r0
 80139b8:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 80139ba:	7bfb      	ldrb	r3, [r7, #15]
 80139bc:	4618      	mov	r0, r3
 80139be:	f000 f8e9 	bl	8013b94 <USBD_Get_USB_Status>
 80139c2:	4603      	mov	r3, r0
 80139c4:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 80139c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80139c8:	4618      	mov	r0, r3
 80139ca:	3710      	adds	r7, #16
 80139cc:	46bd      	mov	sp, r7
 80139ce:	bd80      	pop	{r7, pc}

080139d0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80139d0:	b580      	push	{r7, lr}
 80139d2:	b084      	sub	sp, #16
 80139d4:	af00      	add	r7, sp, #0
 80139d6:	6078      	str	r0, [r7, #4]
 80139d8:	460b      	mov	r3, r1
 80139da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80139dc:	2300      	movs	r3, #0
 80139de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80139e0:	2300      	movs	r3, #0
 80139e2:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80139ea:	78fa      	ldrb	r2, [r7, #3]
 80139ec:	4611      	mov	r1, r2
 80139ee:	4618      	mov	r0, r3
 80139f0:	f7f7 f9e1 	bl	800adb6 <HAL_PCD_EP_SetStall>
 80139f4:	4603      	mov	r3, r0
 80139f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80139f8:	7bfb      	ldrb	r3, [r7, #15]
 80139fa:	4618      	mov	r0, r3
 80139fc:	f000 f8ca 	bl	8013b94 <USBD_Get_USB_Status>
 8013a00:	4603      	mov	r3, r0
 8013a02:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8013a04:	7bbb      	ldrb	r3, [r7, #14]
}
 8013a06:	4618      	mov	r0, r3
 8013a08:	3710      	adds	r7, #16
 8013a0a:	46bd      	mov	sp, r7
 8013a0c:	bd80      	pop	{r7, pc}

08013a0e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013a0e:	b580      	push	{r7, lr}
 8013a10:	b084      	sub	sp, #16
 8013a12:	af00      	add	r7, sp, #0
 8013a14:	6078      	str	r0, [r7, #4]
 8013a16:	460b      	mov	r3, r1
 8013a18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013a1a:	2300      	movs	r3, #0
 8013a1c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013a1e:	2300      	movs	r3, #0
 8013a20:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8013a28:	78fa      	ldrb	r2, [r7, #3]
 8013a2a:	4611      	mov	r1, r2
 8013a2c:	4618      	mov	r0, r3
 8013a2e:	f7f7 fa26 	bl	800ae7e <HAL_PCD_EP_ClrStall>
 8013a32:	4603      	mov	r3, r0
 8013a34:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8013a36:	7bfb      	ldrb	r3, [r7, #15]
 8013a38:	4618      	mov	r0, r3
 8013a3a:	f000 f8ab 	bl	8013b94 <USBD_Get_USB_Status>
 8013a3e:	4603      	mov	r3, r0
 8013a40:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8013a42:	7bbb      	ldrb	r3, [r7, #14]
}
 8013a44:	4618      	mov	r0, r3
 8013a46:	3710      	adds	r7, #16
 8013a48:	46bd      	mov	sp, r7
 8013a4a:	bd80      	pop	{r7, pc}

08013a4c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013a4c:	b480      	push	{r7}
 8013a4e:	b085      	sub	sp, #20
 8013a50:	af00      	add	r7, sp, #0
 8013a52:	6078      	str	r0, [r7, #4]
 8013a54:	460b      	mov	r3, r1
 8013a56:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8013a5e:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8013a60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013a64:	2b00      	cmp	r3, #0
 8013a66:	da0b      	bge.n	8013a80 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8013a68:	78fb      	ldrb	r3, [r7, #3]
 8013a6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013a6e:	68f9      	ldr	r1, [r7, #12]
 8013a70:	4613      	mov	r3, r2
 8013a72:	00db      	lsls	r3, r3, #3
 8013a74:	1a9b      	subs	r3, r3, r2
 8013a76:	009b      	lsls	r3, r3, #2
 8013a78:	440b      	add	r3, r1
 8013a7a:	333e      	adds	r3, #62	; 0x3e
 8013a7c:	781b      	ldrb	r3, [r3, #0]
 8013a7e:	e00b      	b.n	8013a98 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8013a80:	78fb      	ldrb	r3, [r7, #3]
 8013a82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013a86:	68f9      	ldr	r1, [r7, #12]
 8013a88:	4613      	mov	r3, r2
 8013a8a:	00db      	lsls	r3, r3, #3
 8013a8c:	1a9b      	subs	r3, r3, r2
 8013a8e:	009b      	lsls	r3, r3, #2
 8013a90:	440b      	add	r3, r1
 8013a92:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013a96:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013a98:	4618      	mov	r0, r3
 8013a9a:	3714      	adds	r7, #20
 8013a9c:	46bd      	mov	sp, r7
 8013a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aa2:	4770      	bx	lr

08013aa4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8013aa4:	b580      	push	{r7, lr}
 8013aa6:	b084      	sub	sp, #16
 8013aa8:	af00      	add	r7, sp, #0
 8013aaa:	6078      	str	r0, [r7, #4]
 8013aac:	460b      	mov	r3, r1
 8013aae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013ab0:	2300      	movs	r3, #0
 8013ab2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013ab4:	2300      	movs	r3, #0
 8013ab6:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8013abe:	78fa      	ldrb	r2, [r7, #3]
 8013ac0:	4611      	mov	r1, r2
 8013ac2:	4618      	mov	r0, r3
 8013ac4:	f7f6 fff3 	bl	800aaae <HAL_PCD_SetAddress>
 8013ac8:	4603      	mov	r3, r0
 8013aca:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8013acc:	7bfb      	ldrb	r3, [r7, #15]
 8013ace:	4618      	mov	r0, r3
 8013ad0:	f000 f860 	bl	8013b94 <USBD_Get_USB_Status>
 8013ad4:	4603      	mov	r3, r0
 8013ad6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8013ad8:	7bbb      	ldrb	r3, [r7, #14]
}
 8013ada:	4618      	mov	r0, r3
 8013adc:	3710      	adds	r7, #16
 8013ade:	46bd      	mov	sp, r7
 8013ae0:	bd80      	pop	{r7, pc}

08013ae2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8013ae2:	b580      	push	{r7, lr}
 8013ae4:	b086      	sub	sp, #24
 8013ae6:	af00      	add	r7, sp, #0
 8013ae8:	60f8      	str	r0, [r7, #12]
 8013aea:	607a      	str	r2, [r7, #4]
 8013aec:	461a      	mov	r2, r3
 8013aee:	460b      	mov	r3, r1
 8013af0:	72fb      	strb	r3, [r7, #11]
 8013af2:	4613      	mov	r3, r2
 8013af4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013af6:	2300      	movs	r3, #0
 8013af8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013afa:	2300      	movs	r3, #0
 8013afc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8013afe:	68fb      	ldr	r3, [r7, #12]
 8013b00:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8013b04:	893b      	ldrh	r3, [r7, #8]
 8013b06:	7af9      	ldrb	r1, [r7, #11]
 8013b08:	687a      	ldr	r2, [r7, #4]
 8013b0a:	f7f7 f90a 	bl	800ad22 <HAL_PCD_EP_Transmit>
 8013b0e:	4603      	mov	r3, r0
 8013b10:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8013b12:	7dfb      	ldrb	r3, [r7, #23]
 8013b14:	4618      	mov	r0, r3
 8013b16:	f000 f83d 	bl	8013b94 <USBD_Get_USB_Status>
 8013b1a:	4603      	mov	r3, r0
 8013b1c:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8013b1e:	7dbb      	ldrb	r3, [r7, #22]
}
 8013b20:	4618      	mov	r0, r3
 8013b22:	3718      	adds	r7, #24
 8013b24:	46bd      	mov	sp, r7
 8013b26:	bd80      	pop	{r7, pc}

08013b28 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8013b28:	b580      	push	{r7, lr}
 8013b2a:	b086      	sub	sp, #24
 8013b2c:	af00      	add	r7, sp, #0
 8013b2e:	60f8      	str	r0, [r7, #12]
 8013b30:	607a      	str	r2, [r7, #4]
 8013b32:	461a      	mov	r2, r3
 8013b34:	460b      	mov	r3, r1
 8013b36:	72fb      	strb	r3, [r7, #11]
 8013b38:	4613      	mov	r3, r2
 8013b3a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013b3c:	2300      	movs	r3, #0
 8013b3e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013b40:	2300      	movs	r3, #0
 8013b42:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8013b44:	68fb      	ldr	r3, [r7, #12]
 8013b46:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8013b4a:	893b      	ldrh	r3, [r7, #8]
 8013b4c:	7af9      	ldrb	r1, [r7, #11]
 8013b4e:	687a      	ldr	r2, [r7, #4]
 8013b50:	f7f7 f884 	bl	800ac5c <HAL_PCD_EP_Receive>
 8013b54:	4603      	mov	r3, r0
 8013b56:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8013b58:	7dfb      	ldrb	r3, [r7, #23]
 8013b5a:	4618      	mov	r0, r3
 8013b5c:	f000 f81a 	bl	8013b94 <USBD_Get_USB_Status>
 8013b60:	4603      	mov	r3, r0
 8013b62:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8013b64:	7dbb      	ldrb	r3, [r7, #22]
}
 8013b66:	4618      	mov	r0, r3
 8013b68:	3718      	adds	r7, #24
 8013b6a:	46bd      	mov	sp, r7
 8013b6c:	bd80      	pop	{r7, pc}

08013b6e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013b6e:	b580      	push	{r7, lr}
 8013b70:	b082      	sub	sp, #8
 8013b72:	af00      	add	r7, sp, #0
 8013b74:	6078      	str	r0, [r7, #4]
 8013b76:	460b      	mov	r3, r1
 8013b78:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8013b80:	78fa      	ldrb	r2, [r7, #3]
 8013b82:	4611      	mov	r1, r2
 8013b84:	4618      	mov	r0, r3
 8013b86:	f7f7 f8b4 	bl	800acf2 <HAL_PCD_EP_GetRxCount>
 8013b8a:	4603      	mov	r3, r0
}
 8013b8c:	4618      	mov	r0, r3
 8013b8e:	3708      	adds	r7, #8
 8013b90:	46bd      	mov	sp, r7
 8013b92:	bd80      	pop	{r7, pc}

08013b94 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8013b94:	b480      	push	{r7}
 8013b96:	b085      	sub	sp, #20
 8013b98:	af00      	add	r7, sp, #0
 8013b9a:	4603      	mov	r3, r0
 8013b9c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013b9e:	2300      	movs	r3, #0
 8013ba0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8013ba2:	79fb      	ldrb	r3, [r7, #7]
 8013ba4:	2b03      	cmp	r3, #3
 8013ba6:	d817      	bhi.n	8013bd8 <USBD_Get_USB_Status+0x44>
 8013ba8:	a201      	add	r2, pc, #4	; (adr r2, 8013bb0 <USBD_Get_USB_Status+0x1c>)
 8013baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013bae:	bf00      	nop
 8013bb0:	08013bc1 	.word	0x08013bc1
 8013bb4:	08013bc7 	.word	0x08013bc7
 8013bb8:	08013bcd 	.word	0x08013bcd
 8013bbc:	08013bd3 	.word	0x08013bd3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8013bc0:	2300      	movs	r3, #0
 8013bc2:	73fb      	strb	r3, [r7, #15]
    break;
 8013bc4:	e00b      	b.n	8013bde <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013bc6:	2302      	movs	r3, #2
 8013bc8:	73fb      	strb	r3, [r7, #15]
    break;
 8013bca:	e008      	b.n	8013bde <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013bcc:	2301      	movs	r3, #1
 8013bce:	73fb      	strb	r3, [r7, #15]
    break;
 8013bd0:	e005      	b.n	8013bde <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013bd2:	2302      	movs	r3, #2
 8013bd4:	73fb      	strb	r3, [r7, #15]
    break;
 8013bd6:	e002      	b.n	8013bde <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8013bd8:	2302      	movs	r3, #2
 8013bda:	73fb      	strb	r3, [r7, #15]
    break;
 8013bdc:	bf00      	nop
  }
  return usb_status;
 8013bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8013be0:	4618      	mov	r0, r3
 8013be2:	3714      	adds	r7, #20
 8013be4:	46bd      	mov	sp, r7
 8013be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bea:	4770      	bx	lr

08013bec <__errno>:
 8013bec:	4b01      	ldr	r3, [pc, #4]	; (8013bf4 <__errno+0x8>)
 8013bee:	6818      	ldr	r0, [r3, #0]
 8013bf0:	4770      	bx	lr
 8013bf2:	bf00      	nop
 8013bf4:	20000e34 	.word	0x20000e34

08013bf8 <__libc_init_array>:
 8013bf8:	b570      	push	{r4, r5, r6, lr}
 8013bfa:	4e0d      	ldr	r6, [pc, #52]	; (8013c30 <__libc_init_array+0x38>)
 8013bfc:	4c0d      	ldr	r4, [pc, #52]	; (8013c34 <__libc_init_array+0x3c>)
 8013bfe:	1ba4      	subs	r4, r4, r6
 8013c00:	10a4      	asrs	r4, r4, #2
 8013c02:	2500      	movs	r5, #0
 8013c04:	42a5      	cmp	r5, r4
 8013c06:	d109      	bne.n	8013c1c <__libc_init_array+0x24>
 8013c08:	4e0b      	ldr	r6, [pc, #44]	; (8013c38 <__libc_init_array+0x40>)
 8013c0a:	4c0c      	ldr	r4, [pc, #48]	; (8013c3c <__libc_init_array+0x44>)
 8013c0c:	f005 fece 	bl	80199ac <_init>
 8013c10:	1ba4      	subs	r4, r4, r6
 8013c12:	10a4      	asrs	r4, r4, #2
 8013c14:	2500      	movs	r5, #0
 8013c16:	42a5      	cmp	r5, r4
 8013c18:	d105      	bne.n	8013c26 <__libc_init_array+0x2e>
 8013c1a:	bd70      	pop	{r4, r5, r6, pc}
 8013c1c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8013c20:	4798      	blx	r3
 8013c22:	3501      	adds	r5, #1
 8013c24:	e7ee      	b.n	8013c04 <__libc_init_array+0xc>
 8013c26:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8013c2a:	4798      	blx	r3
 8013c2c:	3501      	adds	r5, #1
 8013c2e:	e7f2      	b.n	8013c16 <__libc_init_array+0x1e>
 8013c30:	0801a3d0 	.word	0x0801a3d0
 8013c34:	0801a3d0 	.word	0x0801a3d0
 8013c38:	0801a3d0 	.word	0x0801a3d0
 8013c3c:	0801a3d4 	.word	0x0801a3d4

08013c40 <malloc>:
 8013c40:	4b02      	ldr	r3, [pc, #8]	; (8013c4c <malloc+0xc>)
 8013c42:	4601      	mov	r1, r0
 8013c44:	6818      	ldr	r0, [r3, #0]
 8013c46:	f000 b885 	b.w	8013d54 <_malloc_r>
 8013c4a:	bf00      	nop
 8013c4c:	20000e34 	.word	0x20000e34

08013c50 <free>:
 8013c50:	4b02      	ldr	r3, [pc, #8]	; (8013c5c <free+0xc>)
 8013c52:	4601      	mov	r1, r0
 8013c54:	6818      	ldr	r0, [r3, #0]
 8013c56:	f000 b82f 	b.w	8013cb8 <_free_r>
 8013c5a:	bf00      	nop
 8013c5c:	20000e34 	.word	0x20000e34

08013c60 <memcpy>:
 8013c60:	b510      	push	{r4, lr}
 8013c62:	1e43      	subs	r3, r0, #1
 8013c64:	440a      	add	r2, r1
 8013c66:	4291      	cmp	r1, r2
 8013c68:	d100      	bne.n	8013c6c <memcpy+0xc>
 8013c6a:	bd10      	pop	{r4, pc}
 8013c6c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013c70:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013c74:	e7f7      	b.n	8013c66 <memcpy+0x6>

08013c76 <memmove>:
 8013c76:	4288      	cmp	r0, r1
 8013c78:	b510      	push	{r4, lr}
 8013c7a:	eb01 0302 	add.w	r3, r1, r2
 8013c7e:	d807      	bhi.n	8013c90 <memmove+0x1a>
 8013c80:	1e42      	subs	r2, r0, #1
 8013c82:	4299      	cmp	r1, r3
 8013c84:	d00a      	beq.n	8013c9c <memmove+0x26>
 8013c86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013c8a:	f802 4f01 	strb.w	r4, [r2, #1]!
 8013c8e:	e7f8      	b.n	8013c82 <memmove+0xc>
 8013c90:	4283      	cmp	r3, r0
 8013c92:	d9f5      	bls.n	8013c80 <memmove+0xa>
 8013c94:	1881      	adds	r1, r0, r2
 8013c96:	1ad2      	subs	r2, r2, r3
 8013c98:	42d3      	cmn	r3, r2
 8013c9a:	d100      	bne.n	8013c9e <memmove+0x28>
 8013c9c:	bd10      	pop	{r4, pc}
 8013c9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013ca2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8013ca6:	e7f7      	b.n	8013c98 <memmove+0x22>

08013ca8 <memset>:
 8013ca8:	4402      	add	r2, r0
 8013caa:	4603      	mov	r3, r0
 8013cac:	4293      	cmp	r3, r2
 8013cae:	d100      	bne.n	8013cb2 <memset+0xa>
 8013cb0:	4770      	bx	lr
 8013cb2:	f803 1b01 	strb.w	r1, [r3], #1
 8013cb6:	e7f9      	b.n	8013cac <memset+0x4>

08013cb8 <_free_r>:
 8013cb8:	b538      	push	{r3, r4, r5, lr}
 8013cba:	4605      	mov	r5, r0
 8013cbc:	2900      	cmp	r1, #0
 8013cbe:	d045      	beq.n	8013d4c <_free_r+0x94>
 8013cc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013cc4:	1f0c      	subs	r4, r1, #4
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	bfb8      	it	lt
 8013cca:	18e4      	addlt	r4, r4, r3
 8013ccc:	f002 ffce 	bl	8016c6c <__malloc_lock>
 8013cd0:	4a1f      	ldr	r2, [pc, #124]	; (8013d50 <_free_r+0x98>)
 8013cd2:	6813      	ldr	r3, [r2, #0]
 8013cd4:	4610      	mov	r0, r2
 8013cd6:	b933      	cbnz	r3, 8013ce6 <_free_r+0x2e>
 8013cd8:	6063      	str	r3, [r4, #4]
 8013cda:	6014      	str	r4, [r2, #0]
 8013cdc:	4628      	mov	r0, r5
 8013cde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013ce2:	f002 bfc4 	b.w	8016c6e <__malloc_unlock>
 8013ce6:	42a3      	cmp	r3, r4
 8013ce8:	d90c      	bls.n	8013d04 <_free_r+0x4c>
 8013cea:	6821      	ldr	r1, [r4, #0]
 8013cec:	1862      	adds	r2, r4, r1
 8013cee:	4293      	cmp	r3, r2
 8013cf0:	bf04      	itt	eq
 8013cf2:	681a      	ldreq	r2, [r3, #0]
 8013cf4:	685b      	ldreq	r3, [r3, #4]
 8013cf6:	6063      	str	r3, [r4, #4]
 8013cf8:	bf04      	itt	eq
 8013cfa:	1852      	addeq	r2, r2, r1
 8013cfc:	6022      	streq	r2, [r4, #0]
 8013cfe:	6004      	str	r4, [r0, #0]
 8013d00:	e7ec      	b.n	8013cdc <_free_r+0x24>
 8013d02:	4613      	mov	r3, r2
 8013d04:	685a      	ldr	r2, [r3, #4]
 8013d06:	b10a      	cbz	r2, 8013d0c <_free_r+0x54>
 8013d08:	42a2      	cmp	r2, r4
 8013d0a:	d9fa      	bls.n	8013d02 <_free_r+0x4a>
 8013d0c:	6819      	ldr	r1, [r3, #0]
 8013d0e:	1858      	adds	r0, r3, r1
 8013d10:	42a0      	cmp	r0, r4
 8013d12:	d10b      	bne.n	8013d2c <_free_r+0x74>
 8013d14:	6820      	ldr	r0, [r4, #0]
 8013d16:	4401      	add	r1, r0
 8013d18:	1858      	adds	r0, r3, r1
 8013d1a:	4282      	cmp	r2, r0
 8013d1c:	6019      	str	r1, [r3, #0]
 8013d1e:	d1dd      	bne.n	8013cdc <_free_r+0x24>
 8013d20:	6810      	ldr	r0, [r2, #0]
 8013d22:	6852      	ldr	r2, [r2, #4]
 8013d24:	605a      	str	r2, [r3, #4]
 8013d26:	4401      	add	r1, r0
 8013d28:	6019      	str	r1, [r3, #0]
 8013d2a:	e7d7      	b.n	8013cdc <_free_r+0x24>
 8013d2c:	d902      	bls.n	8013d34 <_free_r+0x7c>
 8013d2e:	230c      	movs	r3, #12
 8013d30:	602b      	str	r3, [r5, #0]
 8013d32:	e7d3      	b.n	8013cdc <_free_r+0x24>
 8013d34:	6820      	ldr	r0, [r4, #0]
 8013d36:	1821      	adds	r1, r4, r0
 8013d38:	428a      	cmp	r2, r1
 8013d3a:	bf04      	itt	eq
 8013d3c:	6811      	ldreq	r1, [r2, #0]
 8013d3e:	6852      	ldreq	r2, [r2, #4]
 8013d40:	6062      	str	r2, [r4, #4]
 8013d42:	bf04      	itt	eq
 8013d44:	1809      	addeq	r1, r1, r0
 8013d46:	6021      	streq	r1, [r4, #0]
 8013d48:	605c      	str	r4, [r3, #4]
 8013d4a:	e7c7      	b.n	8013cdc <_free_r+0x24>
 8013d4c:	bd38      	pop	{r3, r4, r5, pc}
 8013d4e:	bf00      	nop
 8013d50:	200051d4 	.word	0x200051d4

08013d54 <_malloc_r>:
 8013d54:	b570      	push	{r4, r5, r6, lr}
 8013d56:	1ccd      	adds	r5, r1, #3
 8013d58:	f025 0503 	bic.w	r5, r5, #3
 8013d5c:	3508      	adds	r5, #8
 8013d5e:	2d0c      	cmp	r5, #12
 8013d60:	bf38      	it	cc
 8013d62:	250c      	movcc	r5, #12
 8013d64:	2d00      	cmp	r5, #0
 8013d66:	4606      	mov	r6, r0
 8013d68:	db01      	blt.n	8013d6e <_malloc_r+0x1a>
 8013d6a:	42a9      	cmp	r1, r5
 8013d6c:	d903      	bls.n	8013d76 <_malloc_r+0x22>
 8013d6e:	230c      	movs	r3, #12
 8013d70:	6033      	str	r3, [r6, #0]
 8013d72:	2000      	movs	r0, #0
 8013d74:	bd70      	pop	{r4, r5, r6, pc}
 8013d76:	f002 ff79 	bl	8016c6c <__malloc_lock>
 8013d7a:	4a21      	ldr	r2, [pc, #132]	; (8013e00 <_malloc_r+0xac>)
 8013d7c:	6814      	ldr	r4, [r2, #0]
 8013d7e:	4621      	mov	r1, r4
 8013d80:	b991      	cbnz	r1, 8013da8 <_malloc_r+0x54>
 8013d82:	4c20      	ldr	r4, [pc, #128]	; (8013e04 <_malloc_r+0xb0>)
 8013d84:	6823      	ldr	r3, [r4, #0]
 8013d86:	b91b      	cbnz	r3, 8013d90 <_malloc_r+0x3c>
 8013d88:	4630      	mov	r0, r6
 8013d8a:	f000 fe7b 	bl	8014a84 <_sbrk_r>
 8013d8e:	6020      	str	r0, [r4, #0]
 8013d90:	4629      	mov	r1, r5
 8013d92:	4630      	mov	r0, r6
 8013d94:	f000 fe76 	bl	8014a84 <_sbrk_r>
 8013d98:	1c43      	adds	r3, r0, #1
 8013d9a:	d124      	bne.n	8013de6 <_malloc_r+0x92>
 8013d9c:	230c      	movs	r3, #12
 8013d9e:	6033      	str	r3, [r6, #0]
 8013da0:	4630      	mov	r0, r6
 8013da2:	f002 ff64 	bl	8016c6e <__malloc_unlock>
 8013da6:	e7e4      	b.n	8013d72 <_malloc_r+0x1e>
 8013da8:	680b      	ldr	r3, [r1, #0]
 8013daa:	1b5b      	subs	r3, r3, r5
 8013dac:	d418      	bmi.n	8013de0 <_malloc_r+0x8c>
 8013dae:	2b0b      	cmp	r3, #11
 8013db0:	d90f      	bls.n	8013dd2 <_malloc_r+0x7e>
 8013db2:	600b      	str	r3, [r1, #0]
 8013db4:	50cd      	str	r5, [r1, r3]
 8013db6:	18cc      	adds	r4, r1, r3
 8013db8:	4630      	mov	r0, r6
 8013dba:	f002 ff58 	bl	8016c6e <__malloc_unlock>
 8013dbe:	f104 000b 	add.w	r0, r4, #11
 8013dc2:	1d23      	adds	r3, r4, #4
 8013dc4:	f020 0007 	bic.w	r0, r0, #7
 8013dc8:	1ac3      	subs	r3, r0, r3
 8013dca:	d0d3      	beq.n	8013d74 <_malloc_r+0x20>
 8013dcc:	425a      	negs	r2, r3
 8013dce:	50e2      	str	r2, [r4, r3]
 8013dd0:	e7d0      	b.n	8013d74 <_malloc_r+0x20>
 8013dd2:	428c      	cmp	r4, r1
 8013dd4:	684b      	ldr	r3, [r1, #4]
 8013dd6:	bf16      	itet	ne
 8013dd8:	6063      	strne	r3, [r4, #4]
 8013dda:	6013      	streq	r3, [r2, #0]
 8013ddc:	460c      	movne	r4, r1
 8013dde:	e7eb      	b.n	8013db8 <_malloc_r+0x64>
 8013de0:	460c      	mov	r4, r1
 8013de2:	6849      	ldr	r1, [r1, #4]
 8013de4:	e7cc      	b.n	8013d80 <_malloc_r+0x2c>
 8013de6:	1cc4      	adds	r4, r0, #3
 8013de8:	f024 0403 	bic.w	r4, r4, #3
 8013dec:	42a0      	cmp	r0, r4
 8013dee:	d005      	beq.n	8013dfc <_malloc_r+0xa8>
 8013df0:	1a21      	subs	r1, r4, r0
 8013df2:	4630      	mov	r0, r6
 8013df4:	f000 fe46 	bl	8014a84 <_sbrk_r>
 8013df8:	3001      	adds	r0, #1
 8013dfa:	d0cf      	beq.n	8013d9c <_malloc_r+0x48>
 8013dfc:	6025      	str	r5, [r4, #0]
 8013dfe:	e7db      	b.n	8013db8 <_malloc_r+0x64>
 8013e00:	200051d4 	.word	0x200051d4
 8013e04:	200051d8 	.word	0x200051d8

08013e08 <__cvt>:
 8013e08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013e0c:	ec55 4b10 	vmov	r4, r5, d0
 8013e10:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8013e12:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8013e16:	2d00      	cmp	r5, #0
 8013e18:	460e      	mov	r6, r1
 8013e1a:	4691      	mov	r9, r2
 8013e1c:	4619      	mov	r1, r3
 8013e1e:	bfb8      	it	lt
 8013e20:	4622      	movlt	r2, r4
 8013e22:	462b      	mov	r3, r5
 8013e24:	f027 0720 	bic.w	r7, r7, #32
 8013e28:	bfbb      	ittet	lt
 8013e2a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8013e2e:	461d      	movlt	r5, r3
 8013e30:	2300      	movge	r3, #0
 8013e32:	232d      	movlt	r3, #45	; 0x2d
 8013e34:	bfb8      	it	lt
 8013e36:	4614      	movlt	r4, r2
 8013e38:	2f46      	cmp	r7, #70	; 0x46
 8013e3a:	700b      	strb	r3, [r1, #0]
 8013e3c:	d004      	beq.n	8013e48 <__cvt+0x40>
 8013e3e:	2f45      	cmp	r7, #69	; 0x45
 8013e40:	d100      	bne.n	8013e44 <__cvt+0x3c>
 8013e42:	3601      	adds	r6, #1
 8013e44:	2102      	movs	r1, #2
 8013e46:	e000      	b.n	8013e4a <__cvt+0x42>
 8013e48:	2103      	movs	r1, #3
 8013e4a:	ab03      	add	r3, sp, #12
 8013e4c:	9301      	str	r3, [sp, #4]
 8013e4e:	ab02      	add	r3, sp, #8
 8013e50:	9300      	str	r3, [sp, #0]
 8013e52:	4632      	mov	r2, r6
 8013e54:	4653      	mov	r3, sl
 8013e56:	ec45 4b10 	vmov	d0, r4, r5
 8013e5a:	f001 fdf5 	bl	8015a48 <_dtoa_r>
 8013e5e:	2f47      	cmp	r7, #71	; 0x47
 8013e60:	4680      	mov	r8, r0
 8013e62:	d102      	bne.n	8013e6a <__cvt+0x62>
 8013e64:	f019 0f01 	tst.w	r9, #1
 8013e68:	d026      	beq.n	8013eb8 <__cvt+0xb0>
 8013e6a:	2f46      	cmp	r7, #70	; 0x46
 8013e6c:	eb08 0906 	add.w	r9, r8, r6
 8013e70:	d111      	bne.n	8013e96 <__cvt+0x8e>
 8013e72:	f898 3000 	ldrb.w	r3, [r8]
 8013e76:	2b30      	cmp	r3, #48	; 0x30
 8013e78:	d10a      	bne.n	8013e90 <__cvt+0x88>
 8013e7a:	2200      	movs	r2, #0
 8013e7c:	2300      	movs	r3, #0
 8013e7e:	4620      	mov	r0, r4
 8013e80:	4629      	mov	r1, r5
 8013e82:	f7ec fe31 	bl	8000ae8 <__aeabi_dcmpeq>
 8013e86:	b918      	cbnz	r0, 8013e90 <__cvt+0x88>
 8013e88:	f1c6 0601 	rsb	r6, r6, #1
 8013e8c:	f8ca 6000 	str.w	r6, [sl]
 8013e90:	f8da 3000 	ldr.w	r3, [sl]
 8013e94:	4499      	add	r9, r3
 8013e96:	2200      	movs	r2, #0
 8013e98:	2300      	movs	r3, #0
 8013e9a:	4620      	mov	r0, r4
 8013e9c:	4629      	mov	r1, r5
 8013e9e:	f7ec fe23 	bl	8000ae8 <__aeabi_dcmpeq>
 8013ea2:	b938      	cbnz	r0, 8013eb4 <__cvt+0xac>
 8013ea4:	2230      	movs	r2, #48	; 0x30
 8013ea6:	9b03      	ldr	r3, [sp, #12]
 8013ea8:	454b      	cmp	r3, r9
 8013eaa:	d205      	bcs.n	8013eb8 <__cvt+0xb0>
 8013eac:	1c59      	adds	r1, r3, #1
 8013eae:	9103      	str	r1, [sp, #12]
 8013eb0:	701a      	strb	r2, [r3, #0]
 8013eb2:	e7f8      	b.n	8013ea6 <__cvt+0x9e>
 8013eb4:	f8cd 900c 	str.w	r9, [sp, #12]
 8013eb8:	9b03      	ldr	r3, [sp, #12]
 8013eba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013ebc:	eba3 0308 	sub.w	r3, r3, r8
 8013ec0:	4640      	mov	r0, r8
 8013ec2:	6013      	str	r3, [r2, #0]
 8013ec4:	b004      	add	sp, #16
 8013ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08013eca <__exponent>:
 8013eca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013ecc:	2900      	cmp	r1, #0
 8013ece:	4604      	mov	r4, r0
 8013ed0:	bfba      	itte	lt
 8013ed2:	4249      	neglt	r1, r1
 8013ed4:	232d      	movlt	r3, #45	; 0x2d
 8013ed6:	232b      	movge	r3, #43	; 0x2b
 8013ed8:	2909      	cmp	r1, #9
 8013eda:	f804 2b02 	strb.w	r2, [r4], #2
 8013ede:	7043      	strb	r3, [r0, #1]
 8013ee0:	dd20      	ble.n	8013f24 <__exponent+0x5a>
 8013ee2:	f10d 0307 	add.w	r3, sp, #7
 8013ee6:	461f      	mov	r7, r3
 8013ee8:	260a      	movs	r6, #10
 8013eea:	fb91 f5f6 	sdiv	r5, r1, r6
 8013eee:	fb06 1115 	mls	r1, r6, r5, r1
 8013ef2:	3130      	adds	r1, #48	; 0x30
 8013ef4:	2d09      	cmp	r5, #9
 8013ef6:	f803 1c01 	strb.w	r1, [r3, #-1]
 8013efa:	f103 32ff 	add.w	r2, r3, #4294967295
 8013efe:	4629      	mov	r1, r5
 8013f00:	dc09      	bgt.n	8013f16 <__exponent+0x4c>
 8013f02:	3130      	adds	r1, #48	; 0x30
 8013f04:	3b02      	subs	r3, #2
 8013f06:	f802 1c01 	strb.w	r1, [r2, #-1]
 8013f0a:	42bb      	cmp	r3, r7
 8013f0c:	4622      	mov	r2, r4
 8013f0e:	d304      	bcc.n	8013f1a <__exponent+0x50>
 8013f10:	1a10      	subs	r0, r2, r0
 8013f12:	b003      	add	sp, #12
 8013f14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013f16:	4613      	mov	r3, r2
 8013f18:	e7e7      	b.n	8013eea <__exponent+0x20>
 8013f1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013f1e:	f804 2b01 	strb.w	r2, [r4], #1
 8013f22:	e7f2      	b.n	8013f0a <__exponent+0x40>
 8013f24:	2330      	movs	r3, #48	; 0x30
 8013f26:	4419      	add	r1, r3
 8013f28:	7083      	strb	r3, [r0, #2]
 8013f2a:	1d02      	adds	r2, r0, #4
 8013f2c:	70c1      	strb	r1, [r0, #3]
 8013f2e:	e7ef      	b.n	8013f10 <__exponent+0x46>

08013f30 <_printf_float>:
 8013f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f34:	b08d      	sub	sp, #52	; 0x34
 8013f36:	460c      	mov	r4, r1
 8013f38:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8013f3c:	4616      	mov	r6, r2
 8013f3e:	461f      	mov	r7, r3
 8013f40:	4605      	mov	r5, r0
 8013f42:	f002 fe73 	bl	8016c2c <_localeconv_r>
 8013f46:	6803      	ldr	r3, [r0, #0]
 8013f48:	9304      	str	r3, [sp, #16]
 8013f4a:	4618      	mov	r0, r3
 8013f4c:	f7ec f94a 	bl	80001e4 <strlen>
 8013f50:	2300      	movs	r3, #0
 8013f52:	930a      	str	r3, [sp, #40]	; 0x28
 8013f54:	f8d8 3000 	ldr.w	r3, [r8]
 8013f58:	9005      	str	r0, [sp, #20]
 8013f5a:	3307      	adds	r3, #7
 8013f5c:	f023 0307 	bic.w	r3, r3, #7
 8013f60:	f103 0208 	add.w	r2, r3, #8
 8013f64:	f894 a018 	ldrb.w	sl, [r4, #24]
 8013f68:	f8d4 b000 	ldr.w	fp, [r4]
 8013f6c:	f8c8 2000 	str.w	r2, [r8]
 8013f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f74:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8013f78:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8013f7c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013f80:	9307      	str	r3, [sp, #28]
 8013f82:	f8cd 8018 	str.w	r8, [sp, #24]
 8013f86:	f04f 32ff 	mov.w	r2, #4294967295
 8013f8a:	4ba7      	ldr	r3, [pc, #668]	; (8014228 <_printf_float+0x2f8>)
 8013f8c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013f90:	f7ec fddc 	bl	8000b4c <__aeabi_dcmpun>
 8013f94:	bb70      	cbnz	r0, 8013ff4 <_printf_float+0xc4>
 8013f96:	f04f 32ff 	mov.w	r2, #4294967295
 8013f9a:	4ba3      	ldr	r3, [pc, #652]	; (8014228 <_printf_float+0x2f8>)
 8013f9c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013fa0:	f7ec fdb6 	bl	8000b10 <__aeabi_dcmple>
 8013fa4:	bb30      	cbnz	r0, 8013ff4 <_printf_float+0xc4>
 8013fa6:	2200      	movs	r2, #0
 8013fa8:	2300      	movs	r3, #0
 8013faa:	4640      	mov	r0, r8
 8013fac:	4649      	mov	r1, r9
 8013fae:	f7ec fda5 	bl	8000afc <__aeabi_dcmplt>
 8013fb2:	b110      	cbz	r0, 8013fba <_printf_float+0x8a>
 8013fb4:	232d      	movs	r3, #45	; 0x2d
 8013fb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013fba:	4a9c      	ldr	r2, [pc, #624]	; (801422c <_printf_float+0x2fc>)
 8013fbc:	4b9c      	ldr	r3, [pc, #624]	; (8014230 <_printf_float+0x300>)
 8013fbe:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8013fc2:	bf8c      	ite	hi
 8013fc4:	4690      	movhi	r8, r2
 8013fc6:	4698      	movls	r8, r3
 8013fc8:	2303      	movs	r3, #3
 8013fca:	f02b 0204 	bic.w	r2, fp, #4
 8013fce:	6123      	str	r3, [r4, #16]
 8013fd0:	6022      	str	r2, [r4, #0]
 8013fd2:	f04f 0900 	mov.w	r9, #0
 8013fd6:	9700      	str	r7, [sp, #0]
 8013fd8:	4633      	mov	r3, r6
 8013fda:	aa0b      	add	r2, sp, #44	; 0x2c
 8013fdc:	4621      	mov	r1, r4
 8013fde:	4628      	mov	r0, r5
 8013fe0:	f000 f9e6 	bl	80143b0 <_printf_common>
 8013fe4:	3001      	adds	r0, #1
 8013fe6:	f040 808d 	bne.w	8014104 <_printf_float+0x1d4>
 8013fea:	f04f 30ff 	mov.w	r0, #4294967295
 8013fee:	b00d      	add	sp, #52	; 0x34
 8013ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ff4:	4642      	mov	r2, r8
 8013ff6:	464b      	mov	r3, r9
 8013ff8:	4640      	mov	r0, r8
 8013ffa:	4649      	mov	r1, r9
 8013ffc:	f7ec fda6 	bl	8000b4c <__aeabi_dcmpun>
 8014000:	b110      	cbz	r0, 8014008 <_printf_float+0xd8>
 8014002:	4a8c      	ldr	r2, [pc, #560]	; (8014234 <_printf_float+0x304>)
 8014004:	4b8c      	ldr	r3, [pc, #560]	; (8014238 <_printf_float+0x308>)
 8014006:	e7da      	b.n	8013fbe <_printf_float+0x8e>
 8014008:	6861      	ldr	r1, [r4, #4]
 801400a:	1c4b      	adds	r3, r1, #1
 801400c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8014010:	a80a      	add	r0, sp, #40	; 0x28
 8014012:	d13e      	bne.n	8014092 <_printf_float+0x162>
 8014014:	2306      	movs	r3, #6
 8014016:	6063      	str	r3, [r4, #4]
 8014018:	2300      	movs	r3, #0
 801401a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801401e:	ab09      	add	r3, sp, #36	; 0x24
 8014020:	9300      	str	r3, [sp, #0]
 8014022:	ec49 8b10 	vmov	d0, r8, r9
 8014026:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801402a:	6022      	str	r2, [r4, #0]
 801402c:	f8cd a004 	str.w	sl, [sp, #4]
 8014030:	6861      	ldr	r1, [r4, #4]
 8014032:	4628      	mov	r0, r5
 8014034:	f7ff fee8 	bl	8013e08 <__cvt>
 8014038:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 801403c:	2b47      	cmp	r3, #71	; 0x47
 801403e:	4680      	mov	r8, r0
 8014040:	d109      	bne.n	8014056 <_printf_float+0x126>
 8014042:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014044:	1cd8      	adds	r0, r3, #3
 8014046:	db02      	blt.n	801404e <_printf_float+0x11e>
 8014048:	6862      	ldr	r2, [r4, #4]
 801404a:	4293      	cmp	r3, r2
 801404c:	dd47      	ble.n	80140de <_printf_float+0x1ae>
 801404e:	f1aa 0a02 	sub.w	sl, sl, #2
 8014052:	fa5f fa8a 	uxtb.w	sl, sl
 8014056:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801405a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801405c:	d824      	bhi.n	80140a8 <_printf_float+0x178>
 801405e:	3901      	subs	r1, #1
 8014060:	4652      	mov	r2, sl
 8014062:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8014066:	9109      	str	r1, [sp, #36]	; 0x24
 8014068:	f7ff ff2f 	bl	8013eca <__exponent>
 801406c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801406e:	1813      	adds	r3, r2, r0
 8014070:	2a01      	cmp	r2, #1
 8014072:	4681      	mov	r9, r0
 8014074:	6123      	str	r3, [r4, #16]
 8014076:	dc02      	bgt.n	801407e <_printf_float+0x14e>
 8014078:	6822      	ldr	r2, [r4, #0]
 801407a:	07d1      	lsls	r1, r2, #31
 801407c:	d501      	bpl.n	8014082 <_printf_float+0x152>
 801407e:	3301      	adds	r3, #1
 8014080:	6123      	str	r3, [r4, #16]
 8014082:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8014086:	2b00      	cmp	r3, #0
 8014088:	d0a5      	beq.n	8013fd6 <_printf_float+0xa6>
 801408a:	232d      	movs	r3, #45	; 0x2d
 801408c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014090:	e7a1      	b.n	8013fd6 <_printf_float+0xa6>
 8014092:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8014096:	f000 8177 	beq.w	8014388 <_printf_float+0x458>
 801409a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801409e:	d1bb      	bne.n	8014018 <_printf_float+0xe8>
 80140a0:	2900      	cmp	r1, #0
 80140a2:	d1b9      	bne.n	8014018 <_printf_float+0xe8>
 80140a4:	2301      	movs	r3, #1
 80140a6:	e7b6      	b.n	8014016 <_printf_float+0xe6>
 80140a8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80140ac:	d119      	bne.n	80140e2 <_printf_float+0x1b2>
 80140ae:	2900      	cmp	r1, #0
 80140b0:	6863      	ldr	r3, [r4, #4]
 80140b2:	dd0c      	ble.n	80140ce <_printf_float+0x19e>
 80140b4:	6121      	str	r1, [r4, #16]
 80140b6:	b913      	cbnz	r3, 80140be <_printf_float+0x18e>
 80140b8:	6822      	ldr	r2, [r4, #0]
 80140ba:	07d2      	lsls	r2, r2, #31
 80140bc:	d502      	bpl.n	80140c4 <_printf_float+0x194>
 80140be:	3301      	adds	r3, #1
 80140c0:	440b      	add	r3, r1
 80140c2:	6123      	str	r3, [r4, #16]
 80140c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80140c6:	65a3      	str	r3, [r4, #88]	; 0x58
 80140c8:	f04f 0900 	mov.w	r9, #0
 80140cc:	e7d9      	b.n	8014082 <_printf_float+0x152>
 80140ce:	b913      	cbnz	r3, 80140d6 <_printf_float+0x1a6>
 80140d0:	6822      	ldr	r2, [r4, #0]
 80140d2:	07d0      	lsls	r0, r2, #31
 80140d4:	d501      	bpl.n	80140da <_printf_float+0x1aa>
 80140d6:	3302      	adds	r3, #2
 80140d8:	e7f3      	b.n	80140c2 <_printf_float+0x192>
 80140da:	2301      	movs	r3, #1
 80140dc:	e7f1      	b.n	80140c2 <_printf_float+0x192>
 80140de:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80140e2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80140e6:	4293      	cmp	r3, r2
 80140e8:	db05      	blt.n	80140f6 <_printf_float+0x1c6>
 80140ea:	6822      	ldr	r2, [r4, #0]
 80140ec:	6123      	str	r3, [r4, #16]
 80140ee:	07d1      	lsls	r1, r2, #31
 80140f0:	d5e8      	bpl.n	80140c4 <_printf_float+0x194>
 80140f2:	3301      	adds	r3, #1
 80140f4:	e7e5      	b.n	80140c2 <_printf_float+0x192>
 80140f6:	2b00      	cmp	r3, #0
 80140f8:	bfd4      	ite	le
 80140fa:	f1c3 0302 	rsble	r3, r3, #2
 80140fe:	2301      	movgt	r3, #1
 8014100:	4413      	add	r3, r2
 8014102:	e7de      	b.n	80140c2 <_printf_float+0x192>
 8014104:	6823      	ldr	r3, [r4, #0]
 8014106:	055a      	lsls	r2, r3, #21
 8014108:	d407      	bmi.n	801411a <_printf_float+0x1ea>
 801410a:	6923      	ldr	r3, [r4, #16]
 801410c:	4642      	mov	r2, r8
 801410e:	4631      	mov	r1, r6
 8014110:	4628      	mov	r0, r5
 8014112:	47b8      	blx	r7
 8014114:	3001      	adds	r0, #1
 8014116:	d12b      	bne.n	8014170 <_printf_float+0x240>
 8014118:	e767      	b.n	8013fea <_printf_float+0xba>
 801411a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801411e:	f240 80dc 	bls.w	80142da <_printf_float+0x3aa>
 8014122:	2200      	movs	r2, #0
 8014124:	2300      	movs	r3, #0
 8014126:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801412a:	f7ec fcdd 	bl	8000ae8 <__aeabi_dcmpeq>
 801412e:	2800      	cmp	r0, #0
 8014130:	d033      	beq.n	801419a <_printf_float+0x26a>
 8014132:	2301      	movs	r3, #1
 8014134:	4a41      	ldr	r2, [pc, #260]	; (801423c <_printf_float+0x30c>)
 8014136:	4631      	mov	r1, r6
 8014138:	4628      	mov	r0, r5
 801413a:	47b8      	blx	r7
 801413c:	3001      	adds	r0, #1
 801413e:	f43f af54 	beq.w	8013fea <_printf_float+0xba>
 8014142:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014146:	429a      	cmp	r2, r3
 8014148:	db02      	blt.n	8014150 <_printf_float+0x220>
 801414a:	6823      	ldr	r3, [r4, #0]
 801414c:	07d8      	lsls	r0, r3, #31
 801414e:	d50f      	bpl.n	8014170 <_printf_float+0x240>
 8014150:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014154:	4631      	mov	r1, r6
 8014156:	4628      	mov	r0, r5
 8014158:	47b8      	blx	r7
 801415a:	3001      	adds	r0, #1
 801415c:	f43f af45 	beq.w	8013fea <_printf_float+0xba>
 8014160:	f04f 0800 	mov.w	r8, #0
 8014164:	f104 091a 	add.w	r9, r4, #26
 8014168:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801416a:	3b01      	subs	r3, #1
 801416c:	4543      	cmp	r3, r8
 801416e:	dc09      	bgt.n	8014184 <_printf_float+0x254>
 8014170:	6823      	ldr	r3, [r4, #0]
 8014172:	079b      	lsls	r3, r3, #30
 8014174:	f100 8103 	bmi.w	801437e <_printf_float+0x44e>
 8014178:	68e0      	ldr	r0, [r4, #12]
 801417a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801417c:	4298      	cmp	r0, r3
 801417e:	bfb8      	it	lt
 8014180:	4618      	movlt	r0, r3
 8014182:	e734      	b.n	8013fee <_printf_float+0xbe>
 8014184:	2301      	movs	r3, #1
 8014186:	464a      	mov	r2, r9
 8014188:	4631      	mov	r1, r6
 801418a:	4628      	mov	r0, r5
 801418c:	47b8      	blx	r7
 801418e:	3001      	adds	r0, #1
 8014190:	f43f af2b 	beq.w	8013fea <_printf_float+0xba>
 8014194:	f108 0801 	add.w	r8, r8, #1
 8014198:	e7e6      	b.n	8014168 <_printf_float+0x238>
 801419a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801419c:	2b00      	cmp	r3, #0
 801419e:	dc2b      	bgt.n	80141f8 <_printf_float+0x2c8>
 80141a0:	2301      	movs	r3, #1
 80141a2:	4a26      	ldr	r2, [pc, #152]	; (801423c <_printf_float+0x30c>)
 80141a4:	4631      	mov	r1, r6
 80141a6:	4628      	mov	r0, r5
 80141a8:	47b8      	blx	r7
 80141aa:	3001      	adds	r0, #1
 80141ac:	f43f af1d 	beq.w	8013fea <_printf_float+0xba>
 80141b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80141b2:	b923      	cbnz	r3, 80141be <_printf_float+0x28e>
 80141b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80141b6:	b913      	cbnz	r3, 80141be <_printf_float+0x28e>
 80141b8:	6823      	ldr	r3, [r4, #0]
 80141ba:	07d9      	lsls	r1, r3, #31
 80141bc:	d5d8      	bpl.n	8014170 <_printf_float+0x240>
 80141be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80141c2:	4631      	mov	r1, r6
 80141c4:	4628      	mov	r0, r5
 80141c6:	47b8      	blx	r7
 80141c8:	3001      	adds	r0, #1
 80141ca:	f43f af0e 	beq.w	8013fea <_printf_float+0xba>
 80141ce:	f04f 0900 	mov.w	r9, #0
 80141d2:	f104 0a1a 	add.w	sl, r4, #26
 80141d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80141d8:	425b      	negs	r3, r3
 80141da:	454b      	cmp	r3, r9
 80141dc:	dc01      	bgt.n	80141e2 <_printf_float+0x2b2>
 80141de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80141e0:	e794      	b.n	801410c <_printf_float+0x1dc>
 80141e2:	2301      	movs	r3, #1
 80141e4:	4652      	mov	r2, sl
 80141e6:	4631      	mov	r1, r6
 80141e8:	4628      	mov	r0, r5
 80141ea:	47b8      	blx	r7
 80141ec:	3001      	adds	r0, #1
 80141ee:	f43f aefc 	beq.w	8013fea <_printf_float+0xba>
 80141f2:	f109 0901 	add.w	r9, r9, #1
 80141f6:	e7ee      	b.n	80141d6 <_printf_float+0x2a6>
 80141f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80141fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80141fc:	429a      	cmp	r2, r3
 80141fe:	bfa8      	it	ge
 8014200:	461a      	movge	r2, r3
 8014202:	2a00      	cmp	r2, #0
 8014204:	4691      	mov	r9, r2
 8014206:	dd07      	ble.n	8014218 <_printf_float+0x2e8>
 8014208:	4613      	mov	r3, r2
 801420a:	4631      	mov	r1, r6
 801420c:	4642      	mov	r2, r8
 801420e:	4628      	mov	r0, r5
 8014210:	47b8      	blx	r7
 8014212:	3001      	adds	r0, #1
 8014214:	f43f aee9 	beq.w	8013fea <_printf_float+0xba>
 8014218:	f104 031a 	add.w	r3, r4, #26
 801421c:	f04f 0b00 	mov.w	fp, #0
 8014220:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014224:	9306      	str	r3, [sp, #24]
 8014226:	e015      	b.n	8014254 <_printf_float+0x324>
 8014228:	7fefffff 	.word	0x7fefffff
 801422c:	08019e7c 	.word	0x08019e7c
 8014230:	08019e78 	.word	0x08019e78
 8014234:	08019e84 	.word	0x08019e84
 8014238:	08019e80 	.word	0x08019e80
 801423c:	0801a03b 	.word	0x0801a03b
 8014240:	2301      	movs	r3, #1
 8014242:	9a06      	ldr	r2, [sp, #24]
 8014244:	4631      	mov	r1, r6
 8014246:	4628      	mov	r0, r5
 8014248:	47b8      	blx	r7
 801424a:	3001      	adds	r0, #1
 801424c:	f43f aecd 	beq.w	8013fea <_printf_float+0xba>
 8014250:	f10b 0b01 	add.w	fp, fp, #1
 8014254:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8014258:	ebaa 0309 	sub.w	r3, sl, r9
 801425c:	455b      	cmp	r3, fp
 801425e:	dcef      	bgt.n	8014240 <_printf_float+0x310>
 8014260:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014264:	429a      	cmp	r2, r3
 8014266:	44d0      	add	r8, sl
 8014268:	db15      	blt.n	8014296 <_printf_float+0x366>
 801426a:	6823      	ldr	r3, [r4, #0]
 801426c:	07da      	lsls	r2, r3, #31
 801426e:	d412      	bmi.n	8014296 <_printf_float+0x366>
 8014270:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014272:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014274:	eba3 020a 	sub.w	r2, r3, sl
 8014278:	eba3 0a01 	sub.w	sl, r3, r1
 801427c:	4592      	cmp	sl, r2
 801427e:	bfa8      	it	ge
 8014280:	4692      	movge	sl, r2
 8014282:	f1ba 0f00 	cmp.w	sl, #0
 8014286:	dc0e      	bgt.n	80142a6 <_printf_float+0x376>
 8014288:	f04f 0800 	mov.w	r8, #0
 801428c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014290:	f104 091a 	add.w	r9, r4, #26
 8014294:	e019      	b.n	80142ca <_printf_float+0x39a>
 8014296:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801429a:	4631      	mov	r1, r6
 801429c:	4628      	mov	r0, r5
 801429e:	47b8      	blx	r7
 80142a0:	3001      	adds	r0, #1
 80142a2:	d1e5      	bne.n	8014270 <_printf_float+0x340>
 80142a4:	e6a1      	b.n	8013fea <_printf_float+0xba>
 80142a6:	4653      	mov	r3, sl
 80142a8:	4642      	mov	r2, r8
 80142aa:	4631      	mov	r1, r6
 80142ac:	4628      	mov	r0, r5
 80142ae:	47b8      	blx	r7
 80142b0:	3001      	adds	r0, #1
 80142b2:	d1e9      	bne.n	8014288 <_printf_float+0x358>
 80142b4:	e699      	b.n	8013fea <_printf_float+0xba>
 80142b6:	2301      	movs	r3, #1
 80142b8:	464a      	mov	r2, r9
 80142ba:	4631      	mov	r1, r6
 80142bc:	4628      	mov	r0, r5
 80142be:	47b8      	blx	r7
 80142c0:	3001      	adds	r0, #1
 80142c2:	f43f ae92 	beq.w	8013fea <_printf_float+0xba>
 80142c6:	f108 0801 	add.w	r8, r8, #1
 80142ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80142ce:	1a9b      	subs	r3, r3, r2
 80142d0:	eba3 030a 	sub.w	r3, r3, sl
 80142d4:	4543      	cmp	r3, r8
 80142d6:	dcee      	bgt.n	80142b6 <_printf_float+0x386>
 80142d8:	e74a      	b.n	8014170 <_printf_float+0x240>
 80142da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80142dc:	2a01      	cmp	r2, #1
 80142de:	dc01      	bgt.n	80142e4 <_printf_float+0x3b4>
 80142e0:	07db      	lsls	r3, r3, #31
 80142e2:	d53a      	bpl.n	801435a <_printf_float+0x42a>
 80142e4:	2301      	movs	r3, #1
 80142e6:	4642      	mov	r2, r8
 80142e8:	4631      	mov	r1, r6
 80142ea:	4628      	mov	r0, r5
 80142ec:	47b8      	blx	r7
 80142ee:	3001      	adds	r0, #1
 80142f0:	f43f ae7b 	beq.w	8013fea <_printf_float+0xba>
 80142f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80142f8:	4631      	mov	r1, r6
 80142fa:	4628      	mov	r0, r5
 80142fc:	47b8      	blx	r7
 80142fe:	3001      	adds	r0, #1
 8014300:	f108 0801 	add.w	r8, r8, #1
 8014304:	f43f ae71 	beq.w	8013fea <_printf_float+0xba>
 8014308:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801430a:	2200      	movs	r2, #0
 801430c:	f103 3aff 	add.w	sl, r3, #4294967295
 8014310:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014314:	2300      	movs	r3, #0
 8014316:	f7ec fbe7 	bl	8000ae8 <__aeabi_dcmpeq>
 801431a:	b9c8      	cbnz	r0, 8014350 <_printf_float+0x420>
 801431c:	4653      	mov	r3, sl
 801431e:	4642      	mov	r2, r8
 8014320:	4631      	mov	r1, r6
 8014322:	4628      	mov	r0, r5
 8014324:	47b8      	blx	r7
 8014326:	3001      	adds	r0, #1
 8014328:	d10e      	bne.n	8014348 <_printf_float+0x418>
 801432a:	e65e      	b.n	8013fea <_printf_float+0xba>
 801432c:	2301      	movs	r3, #1
 801432e:	4652      	mov	r2, sl
 8014330:	4631      	mov	r1, r6
 8014332:	4628      	mov	r0, r5
 8014334:	47b8      	blx	r7
 8014336:	3001      	adds	r0, #1
 8014338:	f43f ae57 	beq.w	8013fea <_printf_float+0xba>
 801433c:	f108 0801 	add.w	r8, r8, #1
 8014340:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014342:	3b01      	subs	r3, #1
 8014344:	4543      	cmp	r3, r8
 8014346:	dcf1      	bgt.n	801432c <_printf_float+0x3fc>
 8014348:	464b      	mov	r3, r9
 801434a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801434e:	e6de      	b.n	801410e <_printf_float+0x1de>
 8014350:	f04f 0800 	mov.w	r8, #0
 8014354:	f104 0a1a 	add.w	sl, r4, #26
 8014358:	e7f2      	b.n	8014340 <_printf_float+0x410>
 801435a:	2301      	movs	r3, #1
 801435c:	e7df      	b.n	801431e <_printf_float+0x3ee>
 801435e:	2301      	movs	r3, #1
 8014360:	464a      	mov	r2, r9
 8014362:	4631      	mov	r1, r6
 8014364:	4628      	mov	r0, r5
 8014366:	47b8      	blx	r7
 8014368:	3001      	adds	r0, #1
 801436a:	f43f ae3e 	beq.w	8013fea <_printf_float+0xba>
 801436e:	f108 0801 	add.w	r8, r8, #1
 8014372:	68e3      	ldr	r3, [r4, #12]
 8014374:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014376:	1a9b      	subs	r3, r3, r2
 8014378:	4543      	cmp	r3, r8
 801437a:	dcf0      	bgt.n	801435e <_printf_float+0x42e>
 801437c:	e6fc      	b.n	8014178 <_printf_float+0x248>
 801437e:	f04f 0800 	mov.w	r8, #0
 8014382:	f104 0919 	add.w	r9, r4, #25
 8014386:	e7f4      	b.n	8014372 <_printf_float+0x442>
 8014388:	2900      	cmp	r1, #0
 801438a:	f43f ae8b 	beq.w	80140a4 <_printf_float+0x174>
 801438e:	2300      	movs	r3, #0
 8014390:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8014394:	ab09      	add	r3, sp, #36	; 0x24
 8014396:	9300      	str	r3, [sp, #0]
 8014398:	ec49 8b10 	vmov	d0, r8, r9
 801439c:	6022      	str	r2, [r4, #0]
 801439e:	f8cd a004 	str.w	sl, [sp, #4]
 80143a2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80143a6:	4628      	mov	r0, r5
 80143a8:	f7ff fd2e 	bl	8013e08 <__cvt>
 80143ac:	4680      	mov	r8, r0
 80143ae:	e648      	b.n	8014042 <_printf_float+0x112>

080143b0 <_printf_common>:
 80143b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80143b4:	4691      	mov	r9, r2
 80143b6:	461f      	mov	r7, r3
 80143b8:	688a      	ldr	r2, [r1, #8]
 80143ba:	690b      	ldr	r3, [r1, #16]
 80143bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80143c0:	4293      	cmp	r3, r2
 80143c2:	bfb8      	it	lt
 80143c4:	4613      	movlt	r3, r2
 80143c6:	f8c9 3000 	str.w	r3, [r9]
 80143ca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80143ce:	4606      	mov	r6, r0
 80143d0:	460c      	mov	r4, r1
 80143d2:	b112      	cbz	r2, 80143da <_printf_common+0x2a>
 80143d4:	3301      	adds	r3, #1
 80143d6:	f8c9 3000 	str.w	r3, [r9]
 80143da:	6823      	ldr	r3, [r4, #0]
 80143dc:	0699      	lsls	r1, r3, #26
 80143de:	bf42      	ittt	mi
 80143e0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80143e4:	3302      	addmi	r3, #2
 80143e6:	f8c9 3000 	strmi.w	r3, [r9]
 80143ea:	6825      	ldr	r5, [r4, #0]
 80143ec:	f015 0506 	ands.w	r5, r5, #6
 80143f0:	d107      	bne.n	8014402 <_printf_common+0x52>
 80143f2:	f104 0a19 	add.w	sl, r4, #25
 80143f6:	68e3      	ldr	r3, [r4, #12]
 80143f8:	f8d9 2000 	ldr.w	r2, [r9]
 80143fc:	1a9b      	subs	r3, r3, r2
 80143fe:	42ab      	cmp	r3, r5
 8014400:	dc28      	bgt.n	8014454 <_printf_common+0xa4>
 8014402:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8014406:	6822      	ldr	r2, [r4, #0]
 8014408:	3300      	adds	r3, #0
 801440a:	bf18      	it	ne
 801440c:	2301      	movne	r3, #1
 801440e:	0692      	lsls	r2, r2, #26
 8014410:	d42d      	bmi.n	801446e <_printf_common+0xbe>
 8014412:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014416:	4639      	mov	r1, r7
 8014418:	4630      	mov	r0, r6
 801441a:	47c0      	blx	r8
 801441c:	3001      	adds	r0, #1
 801441e:	d020      	beq.n	8014462 <_printf_common+0xb2>
 8014420:	6823      	ldr	r3, [r4, #0]
 8014422:	68e5      	ldr	r5, [r4, #12]
 8014424:	f8d9 2000 	ldr.w	r2, [r9]
 8014428:	f003 0306 	and.w	r3, r3, #6
 801442c:	2b04      	cmp	r3, #4
 801442e:	bf08      	it	eq
 8014430:	1aad      	subeq	r5, r5, r2
 8014432:	68a3      	ldr	r3, [r4, #8]
 8014434:	6922      	ldr	r2, [r4, #16]
 8014436:	bf0c      	ite	eq
 8014438:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801443c:	2500      	movne	r5, #0
 801443e:	4293      	cmp	r3, r2
 8014440:	bfc4      	itt	gt
 8014442:	1a9b      	subgt	r3, r3, r2
 8014444:	18ed      	addgt	r5, r5, r3
 8014446:	f04f 0900 	mov.w	r9, #0
 801444a:	341a      	adds	r4, #26
 801444c:	454d      	cmp	r5, r9
 801444e:	d11a      	bne.n	8014486 <_printf_common+0xd6>
 8014450:	2000      	movs	r0, #0
 8014452:	e008      	b.n	8014466 <_printf_common+0xb6>
 8014454:	2301      	movs	r3, #1
 8014456:	4652      	mov	r2, sl
 8014458:	4639      	mov	r1, r7
 801445a:	4630      	mov	r0, r6
 801445c:	47c0      	blx	r8
 801445e:	3001      	adds	r0, #1
 8014460:	d103      	bne.n	801446a <_printf_common+0xba>
 8014462:	f04f 30ff 	mov.w	r0, #4294967295
 8014466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801446a:	3501      	adds	r5, #1
 801446c:	e7c3      	b.n	80143f6 <_printf_common+0x46>
 801446e:	18e1      	adds	r1, r4, r3
 8014470:	1c5a      	adds	r2, r3, #1
 8014472:	2030      	movs	r0, #48	; 0x30
 8014474:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014478:	4422      	add	r2, r4
 801447a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801447e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014482:	3302      	adds	r3, #2
 8014484:	e7c5      	b.n	8014412 <_printf_common+0x62>
 8014486:	2301      	movs	r3, #1
 8014488:	4622      	mov	r2, r4
 801448a:	4639      	mov	r1, r7
 801448c:	4630      	mov	r0, r6
 801448e:	47c0      	blx	r8
 8014490:	3001      	adds	r0, #1
 8014492:	d0e6      	beq.n	8014462 <_printf_common+0xb2>
 8014494:	f109 0901 	add.w	r9, r9, #1
 8014498:	e7d8      	b.n	801444c <_printf_common+0x9c>
	...

0801449c <_printf_i>:
 801449c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80144a0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80144a4:	460c      	mov	r4, r1
 80144a6:	7e09      	ldrb	r1, [r1, #24]
 80144a8:	b085      	sub	sp, #20
 80144aa:	296e      	cmp	r1, #110	; 0x6e
 80144ac:	4617      	mov	r7, r2
 80144ae:	4606      	mov	r6, r0
 80144b0:	4698      	mov	r8, r3
 80144b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80144b4:	f000 80b3 	beq.w	801461e <_printf_i+0x182>
 80144b8:	d822      	bhi.n	8014500 <_printf_i+0x64>
 80144ba:	2963      	cmp	r1, #99	; 0x63
 80144bc:	d036      	beq.n	801452c <_printf_i+0x90>
 80144be:	d80a      	bhi.n	80144d6 <_printf_i+0x3a>
 80144c0:	2900      	cmp	r1, #0
 80144c2:	f000 80b9 	beq.w	8014638 <_printf_i+0x19c>
 80144c6:	2958      	cmp	r1, #88	; 0x58
 80144c8:	f000 8083 	beq.w	80145d2 <_printf_i+0x136>
 80144cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80144d0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80144d4:	e032      	b.n	801453c <_printf_i+0xa0>
 80144d6:	2964      	cmp	r1, #100	; 0x64
 80144d8:	d001      	beq.n	80144de <_printf_i+0x42>
 80144da:	2969      	cmp	r1, #105	; 0x69
 80144dc:	d1f6      	bne.n	80144cc <_printf_i+0x30>
 80144de:	6820      	ldr	r0, [r4, #0]
 80144e0:	6813      	ldr	r3, [r2, #0]
 80144e2:	0605      	lsls	r5, r0, #24
 80144e4:	f103 0104 	add.w	r1, r3, #4
 80144e8:	d52a      	bpl.n	8014540 <_printf_i+0xa4>
 80144ea:	681b      	ldr	r3, [r3, #0]
 80144ec:	6011      	str	r1, [r2, #0]
 80144ee:	2b00      	cmp	r3, #0
 80144f0:	da03      	bge.n	80144fa <_printf_i+0x5e>
 80144f2:	222d      	movs	r2, #45	; 0x2d
 80144f4:	425b      	negs	r3, r3
 80144f6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80144fa:	486f      	ldr	r0, [pc, #444]	; (80146b8 <_printf_i+0x21c>)
 80144fc:	220a      	movs	r2, #10
 80144fe:	e039      	b.n	8014574 <_printf_i+0xd8>
 8014500:	2973      	cmp	r1, #115	; 0x73
 8014502:	f000 809d 	beq.w	8014640 <_printf_i+0x1a4>
 8014506:	d808      	bhi.n	801451a <_printf_i+0x7e>
 8014508:	296f      	cmp	r1, #111	; 0x6f
 801450a:	d020      	beq.n	801454e <_printf_i+0xb2>
 801450c:	2970      	cmp	r1, #112	; 0x70
 801450e:	d1dd      	bne.n	80144cc <_printf_i+0x30>
 8014510:	6823      	ldr	r3, [r4, #0]
 8014512:	f043 0320 	orr.w	r3, r3, #32
 8014516:	6023      	str	r3, [r4, #0]
 8014518:	e003      	b.n	8014522 <_printf_i+0x86>
 801451a:	2975      	cmp	r1, #117	; 0x75
 801451c:	d017      	beq.n	801454e <_printf_i+0xb2>
 801451e:	2978      	cmp	r1, #120	; 0x78
 8014520:	d1d4      	bne.n	80144cc <_printf_i+0x30>
 8014522:	2378      	movs	r3, #120	; 0x78
 8014524:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014528:	4864      	ldr	r0, [pc, #400]	; (80146bc <_printf_i+0x220>)
 801452a:	e055      	b.n	80145d8 <_printf_i+0x13c>
 801452c:	6813      	ldr	r3, [r2, #0]
 801452e:	1d19      	adds	r1, r3, #4
 8014530:	681b      	ldr	r3, [r3, #0]
 8014532:	6011      	str	r1, [r2, #0]
 8014534:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014538:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801453c:	2301      	movs	r3, #1
 801453e:	e08c      	b.n	801465a <_printf_i+0x1be>
 8014540:	681b      	ldr	r3, [r3, #0]
 8014542:	6011      	str	r1, [r2, #0]
 8014544:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014548:	bf18      	it	ne
 801454a:	b21b      	sxthne	r3, r3
 801454c:	e7cf      	b.n	80144ee <_printf_i+0x52>
 801454e:	6813      	ldr	r3, [r2, #0]
 8014550:	6825      	ldr	r5, [r4, #0]
 8014552:	1d18      	adds	r0, r3, #4
 8014554:	6010      	str	r0, [r2, #0]
 8014556:	0628      	lsls	r0, r5, #24
 8014558:	d501      	bpl.n	801455e <_printf_i+0xc2>
 801455a:	681b      	ldr	r3, [r3, #0]
 801455c:	e002      	b.n	8014564 <_printf_i+0xc8>
 801455e:	0668      	lsls	r0, r5, #25
 8014560:	d5fb      	bpl.n	801455a <_printf_i+0xbe>
 8014562:	881b      	ldrh	r3, [r3, #0]
 8014564:	4854      	ldr	r0, [pc, #336]	; (80146b8 <_printf_i+0x21c>)
 8014566:	296f      	cmp	r1, #111	; 0x6f
 8014568:	bf14      	ite	ne
 801456a:	220a      	movne	r2, #10
 801456c:	2208      	moveq	r2, #8
 801456e:	2100      	movs	r1, #0
 8014570:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014574:	6865      	ldr	r5, [r4, #4]
 8014576:	60a5      	str	r5, [r4, #8]
 8014578:	2d00      	cmp	r5, #0
 801457a:	f2c0 8095 	blt.w	80146a8 <_printf_i+0x20c>
 801457e:	6821      	ldr	r1, [r4, #0]
 8014580:	f021 0104 	bic.w	r1, r1, #4
 8014584:	6021      	str	r1, [r4, #0]
 8014586:	2b00      	cmp	r3, #0
 8014588:	d13d      	bne.n	8014606 <_printf_i+0x16a>
 801458a:	2d00      	cmp	r5, #0
 801458c:	f040 808e 	bne.w	80146ac <_printf_i+0x210>
 8014590:	4665      	mov	r5, ip
 8014592:	2a08      	cmp	r2, #8
 8014594:	d10b      	bne.n	80145ae <_printf_i+0x112>
 8014596:	6823      	ldr	r3, [r4, #0]
 8014598:	07db      	lsls	r3, r3, #31
 801459a:	d508      	bpl.n	80145ae <_printf_i+0x112>
 801459c:	6923      	ldr	r3, [r4, #16]
 801459e:	6862      	ldr	r2, [r4, #4]
 80145a0:	429a      	cmp	r2, r3
 80145a2:	bfde      	ittt	le
 80145a4:	2330      	movle	r3, #48	; 0x30
 80145a6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80145aa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80145ae:	ebac 0305 	sub.w	r3, ip, r5
 80145b2:	6123      	str	r3, [r4, #16]
 80145b4:	f8cd 8000 	str.w	r8, [sp]
 80145b8:	463b      	mov	r3, r7
 80145ba:	aa03      	add	r2, sp, #12
 80145bc:	4621      	mov	r1, r4
 80145be:	4630      	mov	r0, r6
 80145c0:	f7ff fef6 	bl	80143b0 <_printf_common>
 80145c4:	3001      	adds	r0, #1
 80145c6:	d14d      	bne.n	8014664 <_printf_i+0x1c8>
 80145c8:	f04f 30ff 	mov.w	r0, #4294967295
 80145cc:	b005      	add	sp, #20
 80145ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80145d2:	4839      	ldr	r0, [pc, #228]	; (80146b8 <_printf_i+0x21c>)
 80145d4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80145d8:	6813      	ldr	r3, [r2, #0]
 80145da:	6821      	ldr	r1, [r4, #0]
 80145dc:	1d1d      	adds	r5, r3, #4
 80145de:	681b      	ldr	r3, [r3, #0]
 80145e0:	6015      	str	r5, [r2, #0]
 80145e2:	060a      	lsls	r2, r1, #24
 80145e4:	d50b      	bpl.n	80145fe <_printf_i+0x162>
 80145e6:	07ca      	lsls	r2, r1, #31
 80145e8:	bf44      	itt	mi
 80145ea:	f041 0120 	orrmi.w	r1, r1, #32
 80145ee:	6021      	strmi	r1, [r4, #0]
 80145f0:	b91b      	cbnz	r3, 80145fa <_printf_i+0x15e>
 80145f2:	6822      	ldr	r2, [r4, #0]
 80145f4:	f022 0220 	bic.w	r2, r2, #32
 80145f8:	6022      	str	r2, [r4, #0]
 80145fa:	2210      	movs	r2, #16
 80145fc:	e7b7      	b.n	801456e <_printf_i+0xd2>
 80145fe:	064d      	lsls	r5, r1, #25
 8014600:	bf48      	it	mi
 8014602:	b29b      	uxthmi	r3, r3
 8014604:	e7ef      	b.n	80145e6 <_printf_i+0x14a>
 8014606:	4665      	mov	r5, ip
 8014608:	fbb3 f1f2 	udiv	r1, r3, r2
 801460c:	fb02 3311 	mls	r3, r2, r1, r3
 8014610:	5cc3      	ldrb	r3, [r0, r3]
 8014612:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8014616:	460b      	mov	r3, r1
 8014618:	2900      	cmp	r1, #0
 801461a:	d1f5      	bne.n	8014608 <_printf_i+0x16c>
 801461c:	e7b9      	b.n	8014592 <_printf_i+0xf6>
 801461e:	6813      	ldr	r3, [r2, #0]
 8014620:	6825      	ldr	r5, [r4, #0]
 8014622:	6961      	ldr	r1, [r4, #20]
 8014624:	1d18      	adds	r0, r3, #4
 8014626:	6010      	str	r0, [r2, #0]
 8014628:	0628      	lsls	r0, r5, #24
 801462a:	681b      	ldr	r3, [r3, #0]
 801462c:	d501      	bpl.n	8014632 <_printf_i+0x196>
 801462e:	6019      	str	r1, [r3, #0]
 8014630:	e002      	b.n	8014638 <_printf_i+0x19c>
 8014632:	066a      	lsls	r2, r5, #25
 8014634:	d5fb      	bpl.n	801462e <_printf_i+0x192>
 8014636:	8019      	strh	r1, [r3, #0]
 8014638:	2300      	movs	r3, #0
 801463a:	6123      	str	r3, [r4, #16]
 801463c:	4665      	mov	r5, ip
 801463e:	e7b9      	b.n	80145b4 <_printf_i+0x118>
 8014640:	6813      	ldr	r3, [r2, #0]
 8014642:	1d19      	adds	r1, r3, #4
 8014644:	6011      	str	r1, [r2, #0]
 8014646:	681d      	ldr	r5, [r3, #0]
 8014648:	6862      	ldr	r2, [r4, #4]
 801464a:	2100      	movs	r1, #0
 801464c:	4628      	mov	r0, r5
 801464e:	f7eb fdd7 	bl	8000200 <memchr>
 8014652:	b108      	cbz	r0, 8014658 <_printf_i+0x1bc>
 8014654:	1b40      	subs	r0, r0, r5
 8014656:	6060      	str	r0, [r4, #4]
 8014658:	6863      	ldr	r3, [r4, #4]
 801465a:	6123      	str	r3, [r4, #16]
 801465c:	2300      	movs	r3, #0
 801465e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014662:	e7a7      	b.n	80145b4 <_printf_i+0x118>
 8014664:	6923      	ldr	r3, [r4, #16]
 8014666:	462a      	mov	r2, r5
 8014668:	4639      	mov	r1, r7
 801466a:	4630      	mov	r0, r6
 801466c:	47c0      	blx	r8
 801466e:	3001      	adds	r0, #1
 8014670:	d0aa      	beq.n	80145c8 <_printf_i+0x12c>
 8014672:	6823      	ldr	r3, [r4, #0]
 8014674:	079b      	lsls	r3, r3, #30
 8014676:	d413      	bmi.n	80146a0 <_printf_i+0x204>
 8014678:	68e0      	ldr	r0, [r4, #12]
 801467a:	9b03      	ldr	r3, [sp, #12]
 801467c:	4298      	cmp	r0, r3
 801467e:	bfb8      	it	lt
 8014680:	4618      	movlt	r0, r3
 8014682:	e7a3      	b.n	80145cc <_printf_i+0x130>
 8014684:	2301      	movs	r3, #1
 8014686:	464a      	mov	r2, r9
 8014688:	4639      	mov	r1, r7
 801468a:	4630      	mov	r0, r6
 801468c:	47c0      	blx	r8
 801468e:	3001      	adds	r0, #1
 8014690:	d09a      	beq.n	80145c8 <_printf_i+0x12c>
 8014692:	3501      	adds	r5, #1
 8014694:	68e3      	ldr	r3, [r4, #12]
 8014696:	9a03      	ldr	r2, [sp, #12]
 8014698:	1a9b      	subs	r3, r3, r2
 801469a:	42ab      	cmp	r3, r5
 801469c:	dcf2      	bgt.n	8014684 <_printf_i+0x1e8>
 801469e:	e7eb      	b.n	8014678 <_printf_i+0x1dc>
 80146a0:	2500      	movs	r5, #0
 80146a2:	f104 0919 	add.w	r9, r4, #25
 80146a6:	e7f5      	b.n	8014694 <_printf_i+0x1f8>
 80146a8:	2b00      	cmp	r3, #0
 80146aa:	d1ac      	bne.n	8014606 <_printf_i+0x16a>
 80146ac:	7803      	ldrb	r3, [r0, #0]
 80146ae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80146b2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80146b6:	e76c      	b.n	8014592 <_printf_i+0xf6>
 80146b8:	08019e88 	.word	0x08019e88
 80146bc:	08019e99 	.word	0x08019e99

080146c0 <_scanf_float>:
 80146c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146c4:	469a      	mov	sl, r3
 80146c6:	688b      	ldr	r3, [r1, #8]
 80146c8:	4616      	mov	r6, r2
 80146ca:	1e5a      	subs	r2, r3, #1
 80146cc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80146d0:	b087      	sub	sp, #28
 80146d2:	bf83      	ittte	hi
 80146d4:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80146d8:	189b      	addhi	r3, r3, r2
 80146da:	9301      	strhi	r3, [sp, #4]
 80146dc:	2300      	movls	r3, #0
 80146de:	bf86      	itte	hi
 80146e0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80146e4:	608b      	strhi	r3, [r1, #8]
 80146e6:	9301      	strls	r3, [sp, #4]
 80146e8:	680b      	ldr	r3, [r1, #0]
 80146ea:	4688      	mov	r8, r1
 80146ec:	f04f 0b00 	mov.w	fp, #0
 80146f0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80146f4:	f848 3b1c 	str.w	r3, [r8], #28
 80146f8:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80146fc:	4607      	mov	r7, r0
 80146fe:	460c      	mov	r4, r1
 8014700:	4645      	mov	r5, r8
 8014702:	465a      	mov	r2, fp
 8014704:	46d9      	mov	r9, fp
 8014706:	f8cd b008 	str.w	fp, [sp, #8]
 801470a:	68a1      	ldr	r1, [r4, #8]
 801470c:	b181      	cbz	r1, 8014730 <_scanf_float+0x70>
 801470e:	6833      	ldr	r3, [r6, #0]
 8014710:	781b      	ldrb	r3, [r3, #0]
 8014712:	2b49      	cmp	r3, #73	; 0x49
 8014714:	d071      	beq.n	80147fa <_scanf_float+0x13a>
 8014716:	d84d      	bhi.n	80147b4 <_scanf_float+0xf4>
 8014718:	2b39      	cmp	r3, #57	; 0x39
 801471a:	d840      	bhi.n	801479e <_scanf_float+0xde>
 801471c:	2b31      	cmp	r3, #49	; 0x31
 801471e:	f080 8088 	bcs.w	8014832 <_scanf_float+0x172>
 8014722:	2b2d      	cmp	r3, #45	; 0x2d
 8014724:	f000 8090 	beq.w	8014848 <_scanf_float+0x188>
 8014728:	d815      	bhi.n	8014756 <_scanf_float+0x96>
 801472a:	2b2b      	cmp	r3, #43	; 0x2b
 801472c:	f000 808c 	beq.w	8014848 <_scanf_float+0x188>
 8014730:	f1b9 0f00 	cmp.w	r9, #0
 8014734:	d003      	beq.n	801473e <_scanf_float+0x7e>
 8014736:	6823      	ldr	r3, [r4, #0]
 8014738:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801473c:	6023      	str	r3, [r4, #0]
 801473e:	3a01      	subs	r2, #1
 8014740:	2a01      	cmp	r2, #1
 8014742:	f200 80ea 	bhi.w	801491a <_scanf_float+0x25a>
 8014746:	4545      	cmp	r5, r8
 8014748:	f200 80dc 	bhi.w	8014904 <_scanf_float+0x244>
 801474c:	2601      	movs	r6, #1
 801474e:	4630      	mov	r0, r6
 8014750:	b007      	add	sp, #28
 8014752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014756:	2b2e      	cmp	r3, #46	; 0x2e
 8014758:	f000 809f 	beq.w	801489a <_scanf_float+0x1da>
 801475c:	2b30      	cmp	r3, #48	; 0x30
 801475e:	d1e7      	bne.n	8014730 <_scanf_float+0x70>
 8014760:	6820      	ldr	r0, [r4, #0]
 8014762:	f410 7f80 	tst.w	r0, #256	; 0x100
 8014766:	d064      	beq.n	8014832 <_scanf_float+0x172>
 8014768:	9b01      	ldr	r3, [sp, #4]
 801476a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 801476e:	6020      	str	r0, [r4, #0]
 8014770:	f109 0901 	add.w	r9, r9, #1
 8014774:	b11b      	cbz	r3, 801477e <_scanf_float+0xbe>
 8014776:	3b01      	subs	r3, #1
 8014778:	3101      	adds	r1, #1
 801477a:	9301      	str	r3, [sp, #4]
 801477c:	60a1      	str	r1, [r4, #8]
 801477e:	68a3      	ldr	r3, [r4, #8]
 8014780:	3b01      	subs	r3, #1
 8014782:	60a3      	str	r3, [r4, #8]
 8014784:	6923      	ldr	r3, [r4, #16]
 8014786:	3301      	adds	r3, #1
 8014788:	6123      	str	r3, [r4, #16]
 801478a:	6873      	ldr	r3, [r6, #4]
 801478c:	3b01      	subs	r3, #1
 801478e:	2b00      	cmp	r3, #0
 8014790:	6073      	str	r3, [r6, #4]
 8014792:	f340 80ac 	ble.w	80148ee <_scanf_float+0x22e>
 8014796:	6833      	ldr	r3, [r6, #0]
 8014798:	3301      	adds	r3, #1
 801479a:	6033      	str	r3, [r6, #0]
 801479c:	e7b5      	b.n	801470a <_scanf_float+0x4a>
 801479e:	2b45      	cmp	r3, #69	; 0x45
 80147a0:	f000 8085 	beq.w	80148ae <_scanf_float+0x1ee>
 80147a4:	2b46      	cmp	r3, #70	; 0x46
 80147a6:	d06a      	beq.n	801487e <_scanf_float+0x1be>
 80147a8:	2b41      	cmp	r3, #65	; 0x41
 80147aa:	d1c1      	bne.n	8014730 <_scanf_float+0x70>
 80147ac:	2a01      	cmp	r2, #1
 80147ae:	d1bf      	bne.n	8014730 <_scanf_float+0x70>
 80147b0:	2202      	movs	r2, #2
 80147b2:	e046      	b.n	8014842 <_scanf_float+0x182>
 80147b4:	2b65      	cmp	r3, #101	; 0x65
 80147b6:	d07a      	beq.n	80148ae <_scanf_float+0x1ee>
 80147b8:	d818      	bhi.n	80147ec <_scanf_float+0x12c>
 80147ba:	2b54      	cmp	r3, #84	; 0x54
 80147bc:	d066      	beq.n	801488c <_scanf_float+0x1cc>
 80147be:	d811      	bhi.n	80147e4 <_scanf_float+0x124>
 80147c0:	2b4e      	cmp	r3, #78	; 0x4e
 80147c2:	d1b5      	bne.n	8014730 <_scanf_float+0x70>
 80147c4:	2a00      	cmp	r2, #0
 80147c6:	d146      	bne.n	8014856 <_scanf_float+0x196>
 80147c8:	f1b9 0f00 	cmp.w	r9, #0
 80147cc:	d145      	bne.n	801485a <_scanf_float+0x19a>
 80147ce:	6821      	ldr	r1, [r4, #0]
 80147d0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80147d4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80147d8:	d13f      	bne.n	801485a <_scanf_float+0x19a>
 80147da:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80147de:	6021      	str	r1, [r4, #0]
 80147e0:	2201      	movs	r2, #1
 80147e2:	e02e      	b.n	8014842 <_scanf_float+0x182>
 80147e4:	2b59      	cmp	r3, #89	; 0x59
 80147e6:	d01e      	beq.n	8014826 <_scanf_float+0x166>
 80147e8:	2b61      	cmp	r3, #97	; 0x61
 80147ea:	e7de      	b.n	80147aa <_scanf_float+0xea>
 80147ec:	2b6e      	cmp	r3, #110	; 0x6e
 80147ee:	d0e9      	beq.n	80147c4 <_scanf_float+0x104>
 80147f0:	d815      	bhi.n	801481e <_scanf_float+0x15e>
 80147f2:	2b66      	cmp	r3, #102	; 0x66
 80147f4:	d043      	beq.n	801487e <_scanf_float+0x1be>
 80147f6:	2b69      	cmp	r3, #105	; 0x69
 80147f8:	d19a      	bne.n	8014730 <_scanf_float+0x70>
 80147fa:	f1bb 0f00 	cmp.w	fp, #0
 80147fe:	d138      	bne.n	8014872 <_scanf_float+0x1b2>
 8014800:	f1b9 0f00 	cmp.w	r9, #0
 8014804:	d197      	bne.n	8014736 <_scanf_float+0x76>
 8014806:	6821      	ldr	r1, [r4, #0]
 8014808:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 801480c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8014810:	d195      	bne.n	801473e <_scanf_float+0x7e>
 8014812:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8014816:	6021      	str	r1, [r4, #0]
 8014818:	f04f 0b01 	mov.w	fp, #1
 801481c:	e011      	b.n	8014842 <_scanf_float+0x182>
 801481e:	2b74      	cmp	r3, #116	; 0x74
 8014820:	d034      	beq.n	801488c <_scanf_float+0x1cc>
 8014822:	2b79      	cmp	r3, #121	; 0x79
 8014824:	d184      	bne.n	8014730 <_scanf_float+0x70>
 8014826:	f1bb 0f07 	cmp.w	fp, #7
 801482a:	d181      	bne.n	8014730 <_scanf_float+0x70>
 801482c:	f04f 0b08 	mov.w	fp, #8
 8014830:	e007      	b.n	8014842 <_scanf_float+0x182>
 8014832:	eb12 0f0b 	cmn.w	r2, fp
 8014836:	f47f af7b 	bne.w	8014730 <_scanf_float+0x70>
 801483a:	6821      	ldr	r1, [r4, #0]
 801483c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8014840:	6021      	str	r1, [r4, #0]
 8014842:	702b      	strb	r3, [r5, #0]
 8014844:	3501      	adds	r5, #1
 8014846:	e79a      	b.n	801477e <_scanf_float+0xbe>
 8014848:	6821      	ldr	r1, [r4, #0]
 801484a:	0608      	lsls	r0, r1, #24
 801484c:	f57f af70 	bpl.w	8014730 <_scanf_float+0x70>
 8014850:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8014854:	e7f4      	b.n	8014840 <_scanf_float+0x180>
 8014856:	2a02      	cmp	r2, #2
 8014858:	d047      	beq.n	80148ea <_scanf_float+0x22a>
 801485a:	f1bb 0f01 	cmp.w	fp, #1
 801485e:	d003      	beq.n	8014868 <_scanf_float+0x1a8>
 8014860:	f1bb 0f04 	cmp.w	fp, #4
 8014864:	f47f af64 	bne.w	8014730 <_scanf_float+0x70>
 8014868:	f10b 0b01 	add.w	fp, fp, #1
 801486c:	fa5f fb8b 	uxtb.w	fp, fp
 8014870:	e7e7      	b.n	8014842 <_scanf_float+0x182>
 8014872:	f1bb 0f03 	cmp.w	fp, #3
 8014876:	d0f7      	beq.n	8014868 <_scanf_float+0x1a8>
 8014878:	f1bb 0f05 	cmp.w	fp, #5
 801487c:	e7f2      	b.n	8014864 <_scanf_float+0x1a4>
 801487e:	f1bb 0f02 	cmp.w	fp, #2
 8014882:	f47f af55 	bne.w	8014730 <_scanf_float+0x70>
 8014886:	f04f 0b03 	mov.w	fp, #3
 801488a:	e7da      	b.n	8014842 <_scanf_float+0x182>
 801488c:	f1bb 0f06 	cmp.w	fp, #6
 8014890:	f47f af4e 	bne.w	8014730 <_scanf_float+0x70>
 8014894:	f04f 0b07 	mov.w	fp, #7
 8014898:	e7d3      	b.n	8014842 <_scanf_float+0x182>
 801489a:	6821      	ldr	r1, [r4, #0]
 801489c:	0588      	lsls	r0, r1, #22
 801489e:	f57f af47 	bpl.w	8014730 <_scanf_float+0x70>
 80148a2:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 80148a6:	6021      	str	r1, [r4, #0]
 80148a8:	f8cd 9008 	str.w	r9, [sp, #8]
 80148ac:	e7c9      	b.n	8014842 <_scanf_float+0x182>
 80148ae:	6821      	ldr	r1, [r4, #0]
 80148b0:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80148b4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80148b8:	d006      	beq.n	80148c8 <_scanf_float+0x208>
 80148ba:	0548      	lsls	r0, r1, #21
 80148bc:	f57f af38 	bpl.w	8014730 <_scanf_float+0x70>
 80148c0:	f1b9 0f00 	cmp.w	r9, #0
 80148c4:	f43f af3b 	beq.w	801473e <_scanf_float+0x7e>
 80148c8:	0588      	lsls	r0, r1, #22
 80148ca:	bf58      	it	pl
 80148cc:	9802      	ldrpl	r0, [sp, #8]
 80148ce:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80148d2:	bf58      	it	pl
 80148d4:	eba9 0000 	subpl.w	r0, r9, r0
 80148d8:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80148dc:	bf58      	it	pl
 80148de:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80148e2:	6021      	str	r1, [r4, #0]
 80148e4:	f04f 0900 	mov.w	r9, #0
 80148e8:	e7ab      	b.n	8014842 <_scanf_float+0x182>
 80148ea:	2203      	movs	r2, #3
 80148ec:	e7a9      	b.n	8014842 <_scanf_float+0x182>
 80148ee:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80148f2:	9205      	str	r2, [sp, #20]
 80148f4:	4631      	mov	r1, r6
 80148f6:	4638      	mov	r0, r7
 80148f8:	4798      	blx	r3
 80148fa:	9a05      	ldr	r2, [sp, #20]
 80148fc:	2800      	cmp	r0, #0
 80148fe:	f43f af04 	beq.w	801470a <_scanf_float+0x4a>
 8014902:	e715      	b.n	8014730 <_scanf_float+0x70>
 8014904:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014908:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801490c:	4632      	mov	r2, r6
 801490e:	4638      	mov	r0, r7
 8014910:	4798      	blx	r3
 8014912:	6923      	ldr	r3, [r4, #16]
 8014914:	3b01      	subs	r3, #1
 8014916:	6123      	str	r3, [r4, #16]
 8014918:	e715      	b.n	8014746 <_scanf_float+0x86>
 801491a:	f10b 33ff 	add.w	r3, fp, #4294967295
 801491e:	2b06      	cmp	r3, #6
 8014920:	d80a      	bhi.n	8014938 <_scanf_float+0x278>
 8014922:	f1bb 0f02 	cmp.w	fp, #2
 8014926:	d968      	bls.n	80149fa <_scanf_float+0x33a>
 8014928:	f1ab 0b03 	sub.w	fp, fp, #3
 801492c:	fa5f fb8b 	uxtb.w	fp, fp
 8014930:	eba5 0b0b 	sub.w	fp, r5, fp
 8014934:	455d      	cmp	r5, fp
 8014936:	d14b      	bne.n	80149d0 <_scanf_float+0x310>
 8014938:	6823      	ldr	r3, [r4, #0]
 801493a:	05da      	lsls	r2, r3, #23
 801493c:	d51f      	bpl.n	801497e <_scanf_float+0x2be>
 801493e:	055b      	lsls	r3, r3, #21
 8014940:	d468      	bmi.n	8014a14 <_scanf_float+0x354>
 8014942:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8014946:	6923      	ldr	r3, [r4, #16]
 8014948:	2965      	cmp	r1, #101	; 0x65
 801494a:	f103 33ff 	add.w	r3, r3, #4294967295
 801494e:	f105 3bff 	add.w	fp, r5, #4294967295
 8014952:	6123      	str	r3, [r4, #16]
 8014954:	d00d      	beq.n	8014972 <_scanf_float+0x2b2>
 8014956:	2945      	cmp	r1, #69	; 0x45
 8014958:	d00b      	beq.n	8014972 <_scanf_float+0x2b2>
 801495a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801495e:	4632      	mov	r2, r6
 8014960:	4638      	mov	r0, r7
 8014962:	4798      	blx	r3
 8014964:	6923      	ldr	r3, [r4, #16]
 8014966:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 801496a:	3b01      	subs	r3, #1
 801496c:	f1a5 0b02 	sub.w	fp, r5, #2
 8014970:	6123      	str	r3, [r4, #16]
 8014972:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014976:	4632      	mov	r2, r6
 8014978:	4638      	mov	r0, r7
 801497a:	4798      	blx	r3
 801497c:	465d      	mov	r5, fp
 801497e:	6826      	ldr	r6, [r4, #0]
 8014980:	f016 0610 	ands.w	r6, r6, #16
 8014984:	d17a      	bne.n	8014a7c <_scanf_float+0x3bc>
 8014986:	702e      	strb	r6, [r5, #0]
 8014988:	6823      	ldr	r3, [r4, #0]
 801498a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801498e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014992:	d142      	bne.n	8014a1a <_scanf_float+0x35a>
 8014994:	9b02      	ldr	r3, [sp, #8]
 8014996:	eba9 0303 	sub.w	r3, r9, r3
 801499a:	425a      	negs	r2, r3
 801499c:	2b00      	cmp	r3, #0
 801499e:	d149      	bne.n	8014a34 <_scanf_float+0x374>
 80149a0:	2200      	movs	r2, #0
 80149a2:	4641      	mov	r1, r8
 80149a4:	4638      	mov	r0, r7
 80149a6:	f000 ff23 	bl	80157f0 <_strtod_r>
 80149aa:	6825      	ldr	r5, [r4, #0]
 80149ac:	f8da 3000 	ldr.w	r3, [sl]
 80149b0:	f015 0f02 	tst.w	r5, #2
 80149b4:	f103 0204 	add.w	r2, r3, #4
 80149b8:	ec59 8b10 	vmov	r8, r9, d0
 80149bc:	f8ca 2000 	str.w	r2, [sl]
 80149c0:	d043      	beq.n	8014a4a <_scanf_float+0x38a>
 80149c2:	681b      	ldr	r3, [r3, #0]
 80149c4:	e9c3 8900 	strd	r8, r9, [r3]
 80149c8:	68e3      	ldr	r3, [r4, #12]
 80149ca:	3301      	adds	r3, #1
 80149cc:	60e3      	str	r3, [r4, #12]
 80149ce:	e6be      	b.n	801474e <_scanf_float+0x8e>
 80149d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80149d4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80149d8:	4632      	mov	r2, r6
 80149da:	4638      	mov	r0, r7
 80149dc:	4798      	blx	r3
 80149de:	6923      	ldr	r3, [r4, #16]
 80149e0:	3b01      	subs	r3, #1
 80149e2:	6123      	str	r3, [r4, #16]
 80149e4:	e7a6      	b.n	8014934 <_scanf_float+0x274>
 80149e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80149ea:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80149ee:	4632      	mov	r2, r6
 80149f0:	4638      	mov	r0, r7
 80149f2:	4798      	blx	r3
 80149f4:	6923      	ldr	r3, [r4, #16]
 80149f6:	3b01      	subs	r3, #1
 80149f8:	6123      	str	r3, [r4, #16]
 80149fa:	4545      	cmp	r5, r8
 80149fc:	d8f3      	bhi.n	80149e6 <_scanf_float+0x326>
 80149fe:	e6a5      	b.n	801474c <_scanf_float+0x8c>
 8014a00:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014a04:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8014a08:	4632      	mov	r2, r6
 8014a0a:	4638      	mov	r0, r7
 8014a0c:	4798      	blx	r3
 8014a0e:	6923      	ldr	r3, [r4, #16]
 8014a10:	3b01      	subs	r3, #1
 8014a12:	6123      	str	r3, [r4, #16]
 8014a14:	4545      	cmp	r5, r8
 8014a16:	d8f3      	bhi.n	8014a00 <_scanf_float+0x340>
 8014a18:	e698      	b.n	801474c <_scanf_float+0x8c>
 8014a1a:	9b03      	ldr	r3, [sp, #12]
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	d0bf      	beq.n	80149a0 <_scanf_float+0x2e0>
 8014a20:	9904      	ldr	r1, [sp, #16]
 8014a22:	230a      	movs	r3, #10
 8014a24:	4632      	mov	r2, r6
 8014a26:	3101      	adds	r1, #1
 8014a28:	4638      	mov	r0, r7
 8014a2a:	f000 ff6d 	bl	8015908 <_strtol_r>
 8014a2e:	9b03      	ldr	r3, [sp, #12]
 8014a30:	9d04      	ldr	r5, [sp, #16]
 8014a32:	1ac2      	subs	r2, r0, r3
 8014a34:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8014a38:	429d      	cmp	r5, r3
 8014a3a:	bf28      	it	cs
 8014a3c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8014a40:	490f      	ldr	r1, [pc, #60]	; (8014a80 <_scanf_float+0x3c0>)
 8014a42:	4628      	mov	r0, r5
 8014a44:	f000 f868 	bl	8014b18 <siprintf>
 8014a48:	e7aa      	b.n	80149a0 <_scanf_float+0x2e0>
 8014a4a:	f015 0504 	ands.w	r5, r5, #4
 8014a4e:	d1b8      	bne.n	80149c2 <_scanf_float+0x302>
 8014a50:	681f      	ldr	r7, [r3, #0]
 8014a52:	ee10 2a10 	vmov	r2, s0
 8014a56:	464b      	mov	r3, r9
 8014a58:	ee10 0a10 	vmov	r0, s0
 8014a5c:	4649      	mov	r1, r9
 8014a5e:	f7ec f875 	bl	8000b4c <__aeabi_dcmpun>
 8014a62:	b128      	cbz	r0, 8014a70 <_scanf_float+0x3b0>
 8014a64:	4628      	mov	r0, r5
 8014a66:	f000 f81d 	bl	8014aa4 <nanf>
 8014a6a:	ed87 0a00 	vstr	s0, [r7]
 8014a6e:	e7ab      	b.n	80149c8 <_scanf_float+0x308>
 8014a70:	4640      	mov	r0, r8
 8014a72:	4649      	mov	r1, r9
 8014a74:	f7ec f8c8 	bl	8000c08 <__aeabi_d2f>
 8014a78:	6038      	str	r0, [r7, #0]
 8014a7a:	e7a5      	b.n	80149c8 <_scanf_float+0x308>
 8014a7c:	2600      	movs	r6, #0
 8014a7e:	e666      	b.n	801474e <_scanf_float+0x8e>
 8014a80:	08019eaa 	.word	0x08019eaa

08014a84 <_sbrk_r>:
 8014a84:	b538      	push	{r3, r4, r5, lr}
 8014a86:	4c06      	ldr	r4, [pc, #24]	; (8014aa0 <_sbrk_r+0x1c>)
 8014a88:	2300      	movs	r3, #0
 8014a8a:	4605      	mov	r5, r0
 8014a8c:	4608      	mov	r0, r1
 8014a8e:	6023      	str	r3, [r4, #0]
 8014a90:	f7f4 fa8e 	bl	8008fb0 <_sbrk>
 8014a94:	1c43      	adds	r3, r0, #1
 8014a96:	d102      	bne.n	8014a9e <_sbrk_r+0x1a>
 8014a98:	6823      	ldr	r3, [r4, #0]
 8014a9a:	b103      	cbz	r3, 8014a9e <_sbrk_r+0x1a>
 8014a9c:	602b      	str	r3, [r5, #0]
 8014a9e:	bd38      	pop	{r3, r4, r5, pc}
 8014aa0:	20006c60 	.word	0x20006c60

08014aa4 <nanf>:
 8014aa4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8014aac <nanf+0x8>
 8014aa8:	4770      	bx	lr
 8014aaa:	bf00      	nop
 8014aac:	7fc00000 	.word	0x7fc00000

08014ab0 <sniprintf>:
 8014ab0:	b40c      	push	{r2, r3}
 8014ab2:	b530      	push	{r4, r5, lr}
 8014ab4:	4b17      	ldr	r3, [pc, #92]	; (8014b14 <sniprintf+0x64>)
 8014ab6:	1e0c      	subs	r4, r1, #0
 8014ab8:	b09d      	sub	sp, #116	; 0x74
 8014aba:	681d      	ldr	r5, [r3, #0]
 8014abc:	da08      	bge.n	8014ad0 <sniprintf+0x20>
 8014abe:	238b      	movs	r3, #139	; 0x8b
 8014ac0:	602b      	str	r3, [r5, #0]
 8014ac2:	f04f 30ff 	mov.w	r0, #4294967295
 8014ac6:	b01d      	add	sp, #116	; 0x74
 8014ac8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014acc:	b002      	add	sp, #8
 8014ace:	4770      	bx	lr
 8014ad0:	f44f 7302 	mov.w	r3, #520	; 0x208
 8014ad4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014ad8:	bf14      	ite	ne
 8014ada:	f104 33ff 	addne.w	r3, r4, #4294967295
 8014ade:	4623      	moveq	r3, r4
 8014ae0:	9304      	str	r3, [sp, #16]
 8014ae2:	9307      	str	r3, [sp, #28]
 8014ae4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014ae8:	9002      	str	r0, [sp, #8]
 8014aea:	9006      	str	r0, [sp, #24]
 8014aec:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014af0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8014af2:	ab21      	add	r3, sp, #132	; 0x84
 8014af4:	a902      	add	r1, sp, #8
 8014af6:	4628      	mov	r0, r5
 8014af8:	9301      	str	r3, [sp, #4]
 8014afa:	f002 fd21 	bl	8017540 <_svfiprintf_r>
 8014afe:	1c43      	adds	r3, r0, #1
 8014b00:	bfbc      	itt	lt
 8014b02:	238b      	movlt	r3, #139	; 0x8b
 8014b04:	602b      	strlt	r3, [r5, #0]
 8014b06:	2c00      	cmp	r4, #0
 8014b08:	d0dd      	beq.n	8014ac6 <sniprintf+0x16>
 8014b0a:	9b02      	ldr	r3, [sp, #8]
 8014b0c:	2200      	movs	r2, #0
 8014b0e:	701a      	strb	r2, [r3, #0]
 8014b10:	e7d9      	b.n	8014ac6 <sniprintf+0x16>
 8014b12:	bf00      	nop
 8014b14:	20000e34 	.word	0x20000e34

08014b18 <siprintf>:
 8014b18:	b40e      	push	{r1, r2, r3}
 8014b1a:	b500      	push	{lr}
 8014b1c:	b09c      	sub	sp, #112	; 0x70
 8014b1e:	ab1d      	add	r3, sp, #116	; 0x74
 8014b20:	9002      	str	r0, [sp, #8]
 8014b22:	9006      	str	r0, [sp, #24]
 8014b24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014b28:	4809      	ldr	r0, [pc, #36]	; (8014b50 <siprintf+0x38>)
 8014b2a:	9107      	str	r1, [sp, #28]
 8014b2c:	9104      	str	r1, [sp, #16]
 8014b2e:	4909      	ldr	r1, [pc, #36]	; (8014b54 <siprintf+0x3c>)
 8014b30:	f853 2b04 	ldr.w	r2, [r3], #4
 8014b34:	9105      	str	r1, [sp, #20]
 8014b36:	6800      	ldr	r0, [r0, #0]
 8014b38:	9301      	str	r3, [sp, #4]
 8014b3a:	a902      	add	r1, sp, #8
 8014b3c:	f002 fd00 	bl	8017540 <_svfiprintf_r>
 8014b40:	9b02      	ldr	r3, [sp, #8]
 8014b42:	2200      	movs	r2, #0
 8014b44:	701a      	strb	r2, [r3, #0]
 8014b46:	b01c      	add	sp, #112	; 0x70
 8014b48:	f85d eb04 	ldr.w	lr, [sp], #4
 8014b4c:	b003      	add	sp, #12
 8014b4e:	4770      	bx	lr
 8014b50:	20000e34 	.word	0x20000e34
 8014b54:	ffff0208 	.word	0xffff0208

08014b58 <siscanf>:
 8014b58:	b40e      	push	{r1, r2, r3}
 8014b5a:	b530      	push	{r4, r5, lr}
 8014b5c:	b09c      	sub	sp, #112	; 0x70
 8014b5e:	ac1f      	add	r4, sp, #124	; 0x7c
 8014b60:	f44f 7201 	mov.w	r2, #516	; 0x204
 8014b64:	f854 5b04 	ldr.w	r5, [r4], #4
 8014b68:	f8ad 2014 	strh.w	r2, [sp, #20]
 8014b6c:	9002      	str	r0, [sp, #8]
 8014b6e:	9006      	str	r0, [sp, #24]
 8014b70:	f7eb fb38 	bl	80001e4 <strlen>
 8014b74:	4b0b      	ldr	r3, [pc, #44]	; (8014ba4 <siscanf+0x4c>)
 8014b76:	9003      	str	r0, [sp, #12]
 8014b78:	9007      	str	r0, [sp, #28]
 8014b7a:	930b      	str	r3, [sp, #44]	; 0x2c
 8014b7c:	480a      	ldr	r0, [pc, #40]	; (8014ba8 <siscanf+0x50>)
 8014b7e:	9401      	str	r4, [sp, #4]
 8014b80:	2300      	movs	r3, #0
 8014b82:	930f      	str	r3, [sp, #60]	; 0x3c
 8014b84:	9314      	str	r3, [sp, #80]	; 0x50
 8014b86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014b8a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014b8e:	462a      	mov	r2, r5
 8014b90:	4623      	mov	r3, r4
 8014b92:	a902      	add	r1, sp, #8
 8014b94:	6800      	ldr	r0, [r0, #0]
 8014b96:	f002 fe25 	bl	80177e4 <__ssvfiscanf_r>
 8014b9a:	b01c      	add	sp, #112	; 0x70
 8014b9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014ba0:	b003      	add	sp, #12
 8014ba2:	4770      	bx	lr
 8014ba4:	08014bad 	.word	0x08014bad
 8014ba8:	20000e34 	.word	0x20000e34

08014bac <__seofread>:
 8014bac:	2000      	movs	r0, #0
 8014bae:	4770      	bx	lr

08014bb0 <strcat>:
 8014bb0:	b510      	push	{r4, lr}
 8014bb2:	4603      	mov	r3, r0
 8014bb4:	781a      	ldrb	r2, [r3, #0]
 8014bb6:	1c5c      	adds	r4, r3, #1
 8014bb8:	b93a      	cbnz	r2, 8014bca <strcat+0x1a>
 8014bba:	3b01      	subs	r3, #1
 8014bbc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014bc0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014bc4:	2a00      	cmp	r2, #0
 8014bc6:	d1f9      	bne.n	8014bbc <strcat+0xc>
 8014bc8:	bd10      	pop	{r4, pc}
 8014bca:	4623      	mov	r3, r4
 8014bcc:	e7f2      	b.n	8014bb4 <strcat+0x4>

08014bce <sulp>:
 8014bce:	b570      	push	{r4, r5, r6, lr}
 8014bd0:	4604      	mov	r4, r0
 8014bd2:	460d      	mov	r5, r1
 8014bd4:	ec45 4b10 	vmov	d0, r4, r5
 8014bd8:	4616      	mov	r6, r2
 8014bda:	f002 fb15 	bl	8017208 <__ulp>
 8014bde:	ec51 0b10 	vmov	r0, r1, d0
 8014be2:	b17e      	cbz	r6, 8014c04 <sulp+0x36>
 8014be4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8014be8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	dd09      	ble.n	8014c04 <sulp+0x36>
 8014bf0:	051b      	lsls	r3, r3, #20
 8014bf2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8014bf6:	2400      	movs	r4, #0
 8014bf8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8014bfc:	4622      	mov	r2, r4
 8014bfe:	462b      	mov	r3, r5
 8014c00:	f7eb fd0a 	bl	8000618 <__aeabi_dmul>
 8014c04:	bd70      	pop	{r4, r5, r6, pc}
	...

08014c08 <_strtod_l>:
 8014c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c0c:	461f      	mov	r7, r3
 8014c0e:	b0a1      	sub	sp, #132	; 0x84
 8014c10:	2300      	movs	r3, #0
 8014c12:	4681      	mov	r9, r0
 8014c14:	4638      	mov	r0, r7
 8014c16:	460e      	mov	r6, r1
 8014c18:	9217      	str	r2, [sp, #92]	; 0x5c
 8014c1a:	931c      	str	r3, [sp, #112]	; 0x70
 8014c1c:	f002 f804 	bl	8016c28 <__localeconv_l>
 8014c20:	4680      	mov	r8, r0
 8014c22:	6800      	ldr	r0, [r0, #0]
 8014c24:	f7eb fade 	bl	80001e4 <strlen>
 8014c28:	f04f 0a00 	mov.w	sl, #0
 8014c2c:	4604      	mov	r4, r0
 8014c2e:	f04f 0b00 	mov.w	fp, #0
 8014c32:	961b      	str	r6, [sp, #108]	; 0x6c
 8014c34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014c36:	781a      	ldrb	r2, [r3, #0]
 8014c38:	2a0d      	cmp	r2, #13
 8014c3a:	d832      	bhi.n	8014ca2 <_strtod_l+0x9a>
 8014c3c:	2a09      	cmp	r2, #9
 8014c3e:	d236      	bcs.n	8014cae <_strtod_l+0xa6>
 8014c40:	2a00      	cmp	r2, #0
 8014c42:	d03e      	beq.n	8014cc2 <_strtod_l+0xba>
 8014c44:	2300      	movs	r3, #0
 8014c46:	930d      	str	r3, [sp, #52]	; 0x34
 8014c48:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8014c4a:	782b      	ldrb	r3, [r5, #0]
 8014c4c:	2b30      	cmp	r3, #48	; 0x30
 8014c4e:	f040 80ac 	bne.w	8014daa <_strtod_l+0x1a2>
 8014c52:	786b      	ldrb	r3, [r5, #1]
 8014c54:	2b58      	cmp	r3, #88	; 0x58
 8014c56:	d001      	beq.n	8014c5c <_strtod_l+0x54>
 8014c58:	2b78      	cmp	r3, #120	; 0x78
 8014c5a:	d167      	bne.n	8014d2c <_strtod_l+0x124>
 8014c5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014c5e:	9301      	str	r3, [sp, #4]
 8014c60:	ab1c      	add	r3, sp, #112	; 0x70
 8014c62:	9300      	str	r3, [sp, #0]
 8014c64:	9702      	str	r7, [sp, #8]
 8014c66:	ab1d      	add	r3, sp, #116	; 0x74
 8014c68:	4a88      	ldr	r2, [pc, #544]	; (8014e8c <_strtod_l+0x284>)
 8014c6a:	a91b      	add	r1, sp, #108	; 0x6c
 8014c6c:	4648      	mov	r0, r9
 8014c6e:	f001 fcf2 	bl	8016656 <__gethex>
 8014c72:	f010 0407 	ands.w	r4, r0, #7
 8014c76:	4606      	mov	r6, r0
 8014c78:	d005      	beq.n	8014c86 <_strtod_l+0x7e>
 8014c7a:	2c06      	cmp	r4, #6
 8014c7c:	d12b      	bne.n	8014cd6 <_strtod_l+0xce>
 8014c7e:	3501      	adds	r5, #1
 8014c80:	2300      	movs	r3, #0
 8014c82:	951b      	str	r5, [sp, #108]	; 0x6c
 8014c84:	930d      	str	r3, [sp, #52]	; 0x34
 8014c86:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014c88:	2b00      	cmp	r3, #0
 8014c8a:	f040 859a 	bne.w	80157c2 <_strtod_l+0xbba>
 8014c8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014c90:	b1e3      	cbz	r3, 8014ccc <_strtod_l+0xc4>
 8014c92:	4652      	mov	r2, sl
 8014c94:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8014c98:	ec43 2b10 	vmov	d0, r2, r3
 8014c9c:	b021      	add	sp, #132	; 0x84
 8014c9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ca2:	2a2b      	cmp	r2, #43	; 0x2b
 8014ca4:	d015      	beq.n	8014cd2 <_strtod_l+0xca>
 8014ca6:	2a2d      	cmp	r2, #45	; 0x2d
 8014ca8:	d004      	beq.n	8014cb4 <_strtod_l+0xac>
 8014caa:	2a20      	cmp	r2, #32
 8014cac:	d1ca      	bne.n	8014c44 <_strtod_l+0x3c>
 8014cae:	3301      	adds	r3, #1
 8014cb0:	931b      	str	r3, [sp, #108]	; 0x6c
 8014cb2:	e7bf      	b.n	8014c34 <_strtod_l+0x2c>
 8014cb4:	2201      	movs	r2, #1
 8014cb6:	920d      	str	r2, [sp, #52]	; 0x34
 8014cb8:	1c5a      	adds	r2, r3, #1
 8014cba:	921b      	str	r2, [sp, #108]	; 0x6c
 8014cbc:	785b      	ldrb	r3, [r3, #1]
 8014cbe:	2b00      	cmp	r3, #0
 8014cc0:	d1c2      	bne.n	8014c48 <_strtod_l+0x40>
 8014cc2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014cc4:	961b      	str	r6, [sp, #108]	; 0x6c
 8014cc6:	2b00      	cmp	r3, #0
 8014cc8:	f040 8579 	bne.w	80157be <_strtod_l+0xbb6>
 8014ccc:	4652      	mov	r2, sl
 8014cce:	465b      	mov	r3, fp
 8014cd0:	e7e2      	b.n	8014c98 <_strtod_l+0x90>
 8014cd2:	2200      	movs	r2, #0
 8014cd4:	e7ef      	b.n	8014cb6 <_strtod_l+0xae>
 8014cd6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014cd8:	b13a      	cbz	r2, 8014cea <_strtod_l+0xe2>
 8014cda:	2135      	movs	r1, #53	; 0x35
 8014cdc:	a81e      	add	r0, sp, #120	; 0x78
 8014cde:	f002 fb8b 	bl	80173f8 <__copybits>
 8014ce2:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014ce4:	4648      	mov	r0, r9
 8014ce6:	f001 fff7 	bl	8016cd8 <_Bfree>
 8014cea:	3c01      	subs	r4, #1
 8014cec:	2c04      	cmp	r4, #4
 8014cee:	d806      	bhi.n	8014cfe <_strtod_l+0xf6>
 8014cf0:	e8df f004 	tbb	[pc, r4]
 8014cf4:	1714030a 	.word	0x1714030a
 8014cf8:	0a          	.byte	0x0a
 8014cf9:	00          	.byte	0x00
 8014cfa:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8014cfe:	0730      	lsls	r0, r6, #28
 8014d00:	d5c1      	bpl.n	8014c86 <_strtod_l+0x7e>
 8014d02:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8014d06:	e7be      	b.n	8014c86 <_strtod_l+0x7e>
 8014d08:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8014d0c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8014d0e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8014d12:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8014d16:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8014d1a:	e7f0      	b.n	8014cfe <_strtod_l+0xf6>
 8014d1c:	f8df b170 	ldr.w	fp, [pc, #368]	; 8014e90 <_strtod_l+0x288>
 8014d20:	e7ed      	b.n	8014cfe <_strtod_l+0xf6>
 8014d22:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8014d26:	f04f 3aff 	mov.w	sl, #4294967295
 8014d2a:	e7e8      	b.n	8014cfe <_strtod_l+0xf6>
 8014d2c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014d2e:	1c5a      	adds	r2, r3, #1
 8014d30:	921b      	str	r2, [sp, #108]	; 0x6c
 8014d32:	785b      	ldrb	r3, [r3, #1]
 8014d34:	2b30      	cmp	r3, #48	; 0x30
 8014d36:	d0f9      	beq.n	8014d2c <_strtod_l+0x124>
 8014d38:	2b00      	cmp	r3, #0
 8014d3a:	d0a4      	beq.n	8014c86 <_strtod_l+0x7e>
 8014d3c:	2301      	movs	r3, #1
 8014d3e:	2500      	movs	r5, #0
 8014d40:	9306      	str	r3, [sp, #24]
 8014d42:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014d44:	9308      	str	r3, [sp, #32]
 8014d46:	9507      	str	r5, [sp, #28]
 8014d48:	9505      	str	r5, [sp, #20]
 8014d4a:	220a      	movs	r2, #10
 8014d4c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8014d4e:	7807      	ldrb	r7, [r0, #0]
 8014d50:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8014d54:	b2d9      	uxtb	r1, r3
 8014d56:	2909      	cmp	r1, #9
 8014d58:	d929      	bls.n	8014dae <_strtod_l+0x1a6>
 8014d5a:	4622      	mov	r2, r4
 8014d5c:	f8d8 1000 	ldr.w	r1, [r8]
 8014d60:	f003 f81a 	bl	8017d98 <strncmp>
 8014d64:	2800      	cmp	r0, #0
 8014d66:	d031      	beq.n	8014dcc <_strtod_l+0x1c4>
 8014d68:	2000      	movs	r0, #0
 8014d6a:	9c05      	ldr	r4, [sp, #20]
 8014d6c:	9004      	str	r0, [sp, #16]
 8014d6e:	463b      	mov	r3, r7
 8014d70:	4602      	mov	r2, r0
 8014d72:	2b65      	cmp	r3, #101	; 0x65
 8014d74:	d001      	beq.n	8014d7a <_strtod_l+0x172>
 8014d76:	2b45      	cmp	r3, #69	; 0x45
 8014d78:	d114      	bne.n	8014da4 <_strtod_l+0x19c>
 8014d7a:	b924      	cbnz	r4, 8014d86 <_strtod_l+0x17e>
 8014d7c:	b910      	cbnz	r0, 8014d84 <_strtod_l+0x17c>
 8014d7e:	9b06      	ldr	r3, [sp, #24]
 8014d80:	2b00      	cmp	r3, #0
 8014d82:	d09e      	beq.n	8014cc2 <_strtod_l+0xba>
 8014d84:	2400      	movs	r4, #0
 8014d86:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8014d88:	1c73      	adds	r3, r6, #1
 8014d8a:	931b      	str	r3, [sp, #108]	; 0x6c
 8014d8c:	7873      	ldrb	r3, [r6, #1]
 8014d8e:	2b2b      	cmp	r3, #43	; 0x2b
 8014d90:	d078      	beq.n	8014e84 <_strtod_l+0x27c>
 8014d92:	2b2d      	cmp	r3, #45	; 0x2d
 8014d94:	d070      	beq.n	8014e78 <_strtod_l+0x270>
 8014d96:	f04f 0c00 	mov.w	ip, #0
 8014d9a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8014d9e:	2f09      	cmp	r7, #9
 8014da0:	d97c      	bls.n	8014e9c <_strtod_l+0x294>
 8014da2:	961b      	str	r6, [sp, #108]	; 0x6c
 8014da4:	f04f 0e00 	mov.w	lr, #0
 8014da8:	e09a      	b.n	8014ee0 <_strtod_l+0x2d8>
 8014daa:	2300      	movs	r3, #0
 8014dac:	e7c7      	b.n	8014d3e <_strtod_l+0x136>
 8014dae:	9905      	ldr	r1, [sp, #20]
 8014db0:	2908      	cmp	r1, #8
 8014db2:	bfdd      	ittte	le
 8014db4:	9907      	ldrle	r1, [sp, #28]
 8014db6:	fb02 3301 	mlale	r3, r2, r1, r3
 8014dba:	9307      	strle	r3, [sp, #28]
 8014dbc:	fb02 3505 	mlagt	r5, r2, r5, r3
 8014dc0:	9b05      	ldr	r3, [sp, #20]
 8014dc2:	3001      	adds	r0, #1
 8014dc4:	3301      	adds	r3, #1
 8014dc6:	9305      	str	r3, [sp, #20]
 8014dc8:	901b      	str	r0, [sp, #108]	; 0x6c
 8014dca:	e7bf      	b.n	8014d4c <_strtod_l+0x144>
 8014dcc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014dce:	191a      	adds	r2, r3, r4
 8014dd0:	921b      	str	r2, [sp, #108]	; 0x6c
 8014dd2:	9a05      	ldr	r2, [sp, #20]
 8014dd4:	5d1b      	ldrb	r3, [r3, r4]
 8014dd6:	2a00      	cmp	r2, #0
 8014dd8:	d037      	beq.n	8014e4a <_strtod_l+0x242>
 8014dda:	9c05      	ldr	r4, [sp, #20]
 8014ddc:	4602      	mov	r2, r0
 8014dde:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8014de2:	2909      	cmp	r1, #9
 8014de4:	d913      	bls.n	8014e0e <_strtod_l+0x206>
 8014de6:	2101      	movs	r1, #1
 8014de8:	9104      	str	r1, [sp, #16]
 8014dea:	e7c2      	b.n	8014d72 <_strtod_l+0x16a>
 8014dec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014dee:	1c5a      	adds	r2, r3, #1
 8014df0:	921b      	str	r2, [sp, #108]	; 0x6c
 8014df2:	785b      	ldrb	r3, [r3, #1]
 8014df4:	3001      	adds	r0, #1
 8014df6:	2b30      	cmp	r3, #48	; 0x30
 8014df8:	d0f8      	beq.n	8014dec <_strtod_l+0x1e4>
 8014dfa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8014dfe:	2a08      	cmp	r2, #8
 8014e00:	f200 84e4 	bhi.w	80157cc <_strtod_l+0xbc4>
 8014e04:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8014e06:	9208      	str	r2, [sp, #32]
 8014e08:	4602      	mov	r2, r0
 8014e0a:	2000      	movs	r0, #0
 8014e0c:	4604      	mov	r4, r0
 8014e0e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8014e12:	f100 0101 	add.w	r1, r0, #1
 8014e16:	d012      	beq.n	8014e3e <_strtod_l+0x236>
 8014e18:	440a      	add	r2, r1
 8014e1a:	eb00 0c04 	add.w	ip, r0, r4
 8014e1e:	4621      	mov	r1, r4
 8014e20:	270a      	movs	r7, #10
 8014e22:	458c      	cmp	ip, r1
 8014e24:	d113      	bne.n	8014e4e <_strtod_l+0x246>
 8014e26:	1821      	adds	r1, r4, r0
 8014e28:	2908      	cmp	r1, #8
 8014e2a:	f104 0401 	add.w	r4, r4, #1
 8014e2e:	4404      	add	r4, r0
 8014e30:	dc19      	bgt.n	8014e66 <_strtod_l+0x25e>
 8014e32:	9b07      	ldr	r3, [sp, #28]
 8014e34:	210a      	movs	r1, #10
 8014e36:	fb01 e303 	mla	r3, r1, r3, lr
 8014e3a:	9307      	str	r3, [sp, #28]
 8014e3c:	2100      	movs	r1, #0
 8014e3e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014e40:	1c58      	adds	r0, r3, #1
 8014e42:	901b      	str	r0, [sp, #108]	; 0x6c
 8014e44:	785b      	ldrb	r3, [r3, #1]
 8014e46:	4608      	mov	r0, r1
 8014e48:	e7c9      	b.n	8014dde <_strtod_l+0x1d6>
 8014e4a:	9805      	ldr	r0, [sp, #20]
 8014e4c:	e7d3      	b.n	8014df6 <_strtod_l+0x1ee>
 8014e4e:	2908      	cmp	r1, #8
 8014e50:	f101 0101 	add.w	r1, r1, #1
 8014e54:	dc03      	bgt.n	8014e5e <_strtod_l+0x256>
 8014e56:	9b07      	ldr	r3, [sp, #28]
 8014e58:	437b      	muls	r3, r7
 8014e5a:	9307      	str	r3, [sp, #28]
 8014e5c:	e7e1      	b.n	8014e22 <_strtod_l+0x21a>
 8014e5e:	2910      	cmp	r1, #16
 8014e60:	bfd8      	it	le
 8014e62:	437d      	mulle	r5, r7
 8014e64:	e7dd      	b.n	8014e22 <_strtod_l+0x21a>
 8014e66:	2c10      	cmp	r4, #16
 8014e68:	bfdc      	itt	le
 8014e6a:	210a      	movle	r1, #10
 8014e6c:	fb01 e505 	mlale	r5, r1, r5, lr
 8014e70:	e7e4      	b.n	8014e3c <_strtod_l+0x234>
 8014e72:	2301      	movs	r3, #1
 8014e74:	9304      	str	r3, [sp, #16]
 8014e76:	e781      	b.n	8014d7c <_strtod_l+0x174>
 8014e78:	f04f 0c01 	mov.w	ip, #1
 8014e7c:	1cb3      	adds	r3, r6, #2
 8014e7e:	931b      	str	r3, [sp, #108]	; 0x6c
 8014e80:	78b3      	ldrb	r3, [r6, #2]
 8014e82:	e78a      	b.n	8014d9a <_strtod_l+0x192>
 8014e84:	f04f 0c00 	mov.w	ip, #0
 8014e88:	e7f8      	b.n	8014e7c <_strtod_l+0x274>
 8014e8a:	bf00      	nop
 8014e8c:	08019eb0 	.word	0x08019eb0
 8014e90:	7ff00000 	.word	0x7ff00000
 8014e94:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014e96:	1c5f      	adds	r7, r3, #1
 8014e98:	971b      	str	r7, [sp, #108]	; 0x6c
 8014e9a:	785b      	ldrb	r3, [r3, #1]
 8014e9c:	2b30      	cmp	r3, #48	; 0x30
 8014e9e:	d0f9      	beq.n	8014e94 <_strtod_l+0x28c>
 8014ea0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8014ea4:	2f08      	cmp	r7, #8
 8014ea6:	f63f af7d 	bhi.w	8014da4 <_strtod_l+0x19c>
 8014eaa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8014eae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014eb0:	930a      	str	r3, [sp, #40]	; 0x28
 8014eb2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014eb4:	1c5f      	adds	r7, r3, #1
 8014eb6:	971b      	str	r7, [sp, #108]	; 0x6c
 8014eb8:	785b      	ldrb	r3, [r3, #1]
 8014eba:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8014ebe:	f1b8 0f09 	cmp.w	r8, #9
 8014ec2:	d937      	bls.n	8014f34 <_strtod_l+0x32c>
 8014ec4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014ec6:	1a7f      	subs	r7, r7, r1
 8014ec8:	2f08      	cmp	r7, #8
 8014eca:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8014ece:	dc37      	bgt.n	8014f40 <_strtod_l+0x338>
 8014ed0:	45be      	cmp	lr, r7
 8014ed2:	bfa8      	it	ge
 8014ed4:	46be      	movge	lr, r7
 8014ed6:	f1bc 0f00 	cmp.w	ip, #0
 8014eda:	d001      	beq.n	8014ee0 <_strtod_l+0x2d8>
 8014edc:	f1ce 0e00 	rsb	lr, lr, #0
 8014ee0:	2c00      	cmp	r4, #0
 8014ee2:	d151      	bne.n	8014f88 <_strtod_l+0x380>
 8014ee4:	2800      	cmp	r0, #0
 8014ee6:	f47f aece 	bne.w	8014c86 <_strtod_l+0x7e>
 8014eea:	9a06      	ldr	r2, [sp, #24]
 8014eec:	2a00      	cmp	r2, #0
 8014eee:	f47f aeca 	bne.w	8014c86 <_strtod_l+0x7e>
 8014ef2:	9a04      	ldr	r2, [sp, #16]
 8014ef4:	2a00      	cmp	r2, #0
 8014ef6:	f47f aee4 	bne.w	8014cc2 <_strtod_l+0xba>
 8014efa:	2b4e      	cmp	r3, #78	; 0x4e
 8014efc:	d027      	beq.n	8014f4e <_strtod_l+0x346>
 8014efe:	dc21      	bgt.n	8014f44 <_strtod_l+0x33c>
 8014f00:	2b49      	cmp	r3, #73	; 0x49
 8014f02:	f47f aede 	bne.w	8014cc2 <_strtod_l+0xba>
 8014f06:	49a0      	ldr	r1, [pc, #640]	; (8015188 <_strtod_l+0x580>)
 8014f08:	a81b      	add	r0, sp, #108	; 0x6c
 8014f0a:	f001 fdd7 	bl	8016abc <__match>
 8014f0e:	2800      	cmp	r0, #0
 8014f10:	f43f aed7 	beq.w	8014cc2 <_strtod_l+0xba>
 8014f14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014f16:	499d      	ldr	r1, [pc, #628]	; (801518c <_strtod_l+0x584>)
 8014f18:	3b01      	subs	r3, #1
 8014f1a:	a81b      	add	r0, sp, #108	; 0x6c
 8014f1c:	931b      	str	r3, [sp, #108]	; 0x6c
 8014f1e:	f001 fdcd 	bl	8016abc <__match>
 8014f22:	b910      	cbnz	r0, 8014f2a <_strtod_l+0x322>
 8014f24:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014f26:	3301      	adds	r3, #1
 8014f28:	931b      	str	r3, [sp, #108]	; 0x6c
 8014f2a:	f8df b274 	ldr.w	fp, [pc, #628]	; 80151a0 <_strtod_l+0x598>
 8014f2e:	f04f 0a00 	mov.w	sl, #0
 8014f32:	e6a8      	b.n	8014c86 <_strtod_l+0x7e>
 8014f34:	210a      	movs	r1, #10
 8014f36:	fb01 3e0e 	mla	lr, r1, lr, r3
 8014f3a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8014f3e:	e7b8      	b.n	8014eb2 <_strtod_l+0x2aa>
 8014f40:	46be      	mov	lr, r7
 8014f42:	e7c8      	b.n	8014ed6 <_strtod_l+0x2ce>
 8014f44:	2b69      	cmp	r3, #105	; 0x69
 8014f46:	d0de      	beq.n	8014f06 <_strtod_l+0x2fe>
 8014f48:	2b6e      	cmp	r3, #110	; 0x6e
 8014f4a:	f47f aeba 	bne.w	8014cc2 <_strtod_l+0xba>
 8014f4e:	4990      	ldr	r1, [pc, #576]	; (8015190 <_strtod_l+0x588>)
 8014f50:	a81b      	add	r0, sp, #108	; 0x6c
 8014f52:	f001 fdb3 	bl	8016abc <__match>
 8014f56:	2800      	cmp	r0, #0
 8014f58:	f43f aeb3 	beq.w	8014cc2 <_strtod_l+0xba>
 8014f5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014f5e:	781b      	ldrb	r3, [r3, #0]
 8014f60:	2b28      	cmp	r3, #40	; 0x28
 8014f62:	d10e      	bne.n	8014f82 <_strtod_l+0x37a>
 8014f64:	aa1e      	add	r2, sp, #120	; 0x78
 8014f66:	498b      	ldr	r1, [pc, #556]	; (8015194 <_strtod_l+0x58c>)
 8014f68:	a81b      	add	r0, sp, #108	; 0x6c
 8014f6a:	f001 fdbb 	bl	8016ae4 <__hexnan>
 8014f6e:	2805      	cmp	r0, #5
 8014f70:	d107      	bne.n	8014f82 <_strtod_l+0x37a>
 8014f72:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014f74:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8014f78:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8014f7c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8014f80:	e681      	b.n	8014c86 <_strtod_l+0x7e>
 8014f82:	f8df b224 	ldr.w	fp, [pc, #548]	; 80151a8 <_strtod_l+0x5a0>
 8014f86:	e7d2      	b.n	8014f2e <_strtod_l+0x326>
 8014f88:	ebae 0302 	sub.w	r3, lr, r2
 8014f8c:	9306      	str	r3, [sp, #24]
 8014f8e:	9b05      	ldr	r3, [sp, #20]
 8014f90:	9807      	ldr	r0, [sp, #28]
 8014f92:	2b00      	cmp	r3, #0
 8014f94:	bf08      	it	eq
 8014f96:	4623      	moveq	r3, r4
 8014f98:	2c10      	cmp	r4, #16
 8014f9a:	9305      	str	r3, [sp, #20]
 8014f9c:	46a0      	mov	r8, r4
 8014f9e:	bfa8      	it	ge
 8014fa0:	f04f 0810 	movge.w	r8, #16
 8014fa4:	f7eb fabe 	bl	8000524 <__aeabi_ui2d>
 8014fa8:	2c09      	cmp	r4, #9
 8014faa:	4682      	mov	sl, r0
 8014fac:	468b      	mov	fp, r1
 8014fae:	dc13      	bgt.n	8014fd8 <_strtod_l+0x3d0>
 8014fb0:	9b06      	ldr	r3, [sp, #24]
 8014fb2:	2b00      	cmp	r3, #0
 8014fb4:	f43f ae67 	beq.w	8014c86 <_strtod_l+0x7e>
 8014fb8:	9b06      	ldr	r3, [sp, #24]
 8014fba:	dd7a      	ble.n	80150b2 <_strtod_l+0x4aa>
 8014fbc:	2b16      	cmp	r3, #22
 8014fbe:	dc61      	bgt.n	8015084 <_strtod_l+0x47c>
 8014fc0:	4a75      	ldr	r2, [pc, #468]	; (8015198 <_strtod_l+0x590>)
 8014fc2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8014fc6:	e9de 0100 	ldrd	r0, r1, [lr]
 8014fca:	4652      	mov	r2, sl
 8014fcc:	465b      	mov	r3, fp
 8014fce:	f7eb fb23 	bl	8000618 <__aeabi_dmul>
 8014fd2:	4682      	mov	sl, r0
 8014fd4:	468b      	mov	fp, r1
 8014fd6:	e656      	b.n	8014c86 <_strtod_l+0x7e>
 8014fd8:	4b6f      	ldr	r3, [pc, #444]	; (8015198 <_strtod_l+0x590>)
 8014fda:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8014fde:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8014fe2:	f7eb fb19 	bl	8000618 <__aeabi_dmul>
 8014fe6:	4606      	mov	r6, r0
 8014fe8:	4628      	mov	r0, r5
 8014fea:	460f      	mov	r7, r1
 8014fec:	f7eb fa9a 	bl	8000524 <__aeabi_ui2d>
 8014ff0:	4602      	mov	r2, r0
 8014ff2:	460b      	mov	r3, r1
 8014ff4:	4630      	mov	r0, r6
 8014ff6:	4639      	mov	r1, r7
 8014ff8:	f7eb f958 	bl	80002ac <__adddf3>
 8014ffc:	2c0f      	cmp	r4, #15
 8014ffe:	4682      	mov	sl, r0
 8015000:	468b      	mov	fp, r1
 8015002:	ddd5      	ble.n	8014fb0 <_strtod_l+0x3a8>
 8015004:	9b06      	ldr	r3, [sp, #24]
 8015006:	eba4 0808 	sub.w	r8, r4, r8
 801500a:	4498      	add	r8, r3
 801500c:	f1b8 0f00 	cmp.w	r8, #0
 8015010:	f340 8096 	ble.w	8015140 <_strtod_l+0x538>
 8015014:	f018 030f 	ands.w	r3, r8, #15
 8015018:	d00a      	beq.n	8015030 <_strtod_l+0x428>
 801501a:	495f      	ldr	r1, [pc, #380]	; (8015198 <_strtod_l+0x590>)
 801501c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8015020:	4652      	mov	r2, sl
 8015022:	465b      	mov	r3, fp
 8015024:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015028:	f7eb faf6 	bl	8000618 <__aeabi_dmul>
 801502c:	4682      	mov	sl, r0
 801502e:	468b      	mov	fp, r1
 8015030:	f038 080f 	bics.w	r8, r8, #15
 8015034:	d073      	beq.n	801511e <_strtod_l+0x516>
 8015036:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801503a:	dd47      	ble.n	80150cc <_strtod_l+0x4c4>
 801503c:	2400      	movs	r4, #0
 801503e:	46a0      	mov	r8, r4
 8015040:	9407      	str	r4, [sp, #28]
 8015042:	9405      	str	r4, [sp, #20]
 8015044:	2322      	movs	r3, #34	; 0x22
 8015046:	f8df b158 	ldr.w	fp, [pc, #344]	; 80151a0 <_strtod_l+0x598>
 801504a:	f8c9 3000 	str.w	r3, [r9]
 801504e:	f04f 0a00 	mov.w	sl, #0
 8015052:	9b07      	ldr	r3, [sp, #28]
 8015054:	2b00      	cmp	r3, #0
 8015056:	f43f ae16 	beq.w	8014c86 <_strtod_l+0x7e>
 801505a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801505c:	4648      	mov	r0, r9
 801505e:	f001 fe3b 	bl	8016cd8 <_Bfree>
 8015062:	9905      	ldr	r1, [sp, #20]
 8015064:	4648      	mov	r0, r9
 8015066:	f001 fe37 	bl	8016cd8 <_Bfree>
 801506a:	4641      	mov	r1, r8
 801506c:	4648      	mov	r0, r9
 801506e:	f001 fe33 	bl	8016cd8 <_Bfree>
 8015072:	9907      	ldr	r1, [sp, #28]
 8015074:	4648      	mov	r0, r9
 8015076:	f001 fe2f 	bl	8016cd8 <_Bfree>
 801507a:	4621      	mov	r1, r4
 801507c:	4648      	mov	r0, r9
 801507e:	f001 fe2b 	bl	8016cd8 <_Bfree>
 8015082:	e600      	b.n	8014c86 <_strtod_l+0x7e>
 8015084:	9a06      	ldr	r2, [sp, #24]
 8015086:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 801508a:	4293      	cmp	r3, r2
 801508c:	dbba      	blt.n	8015004 <_strtod_l+0x3fc>
 801508e:	4d42      	ldr	r5, [pc, #264]	; (8015198 <_strtod_l+0x590>)
 8015090:	f1c4 040f 	rsb	r4, r4, #15
 8015094:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8015098:	4652      	mov	r2, sl
 801509a:	465b      	mov	r3, fp
 801509c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80150a0:	f7eb faba 	bl	8000618 <__aeabi_dmul>
 80150a4:	9b06      	ldr	r3, [sp, #24]
 80150a6:	1b1c      	subs	r4, r3, r4
 80150a8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80150ac:	e9d5 2300 	ldrd	r2, r3, [r5]
 80150b0:	e78d      	b.n	8014fce <_strtod_l+0x3c6>
 80150b2:	f113 0f16 	cmn.w	r3, #22
 80150b6:	dba5      	blt.n	8015004 <_strtod_l+0x3fc>
 80150b8:	4a37      	ldr	r2, [pc, #220]	; (8015198 <_strtod_l+0x590>)
 80150ba:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80150be:	e9d2 2300 	ldrd	r2, r3, [r2]
 80150c2:	4650      	mov	r0, sl
 80150c4:	4659      	mov	r1, fp
 80150c6:	f7eb fbd1 	bl	800086c <__aeabi_ddiv>
 80150ca:	e782      	b.n	8014fd2 <_strtod_l+0x3ca>
 80150cc:	2300      	movs	r3, #0
 80150ce:	4e33      	ldr	r6, [pc, #204]	; (801519c <_strtod_l+0x594>)
 80150d0:	ea4f 1828 	mov.w	r8, r8, asr #4
 80150d4:	4650      	mov	r0, sl
 80150d6:	4659      	mov	r1, fp
 80150d8:	461d      	mov	r5, r3
 80150da:	f1b8 0f01 	cmp.w	r8, #1
 80150de:	dc21      	bgt.n	8015124 <_strtod_l+0x51c>
 80150e0:	b10b      	cbz	r3, 80150e6 <_strtod_l+0x4de>
 80150e2:	4682      	mov	sl, r0
 80150e4:	468b      	mov	fp, r1
 80150e6:	4b2d      	ldr	r3, [pc, #180]	; (801519c <_strtod_l+0x594>)
 80150e8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80150ec:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80150f0:	4652      	mov	r2, sl
 80150f2:	465b      	mov	r3, fp
 80150f4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80150f8:	f7eb fa8e 	bl	8000618 <__aeabi_dmul>
 80150fc:	4b28      	ldr	r3, [pc, #160]	; (80151a0 <_strtod_l+0x598>)
 80150fe:	460a      	mov	r2, r1
 8015100:	400b      	ands	r3, r1
 8015102:	4928      	ldr	r1, [pc, #160]	; (80151a4 <_strtod_l+0x59c>)
 8015104:	428b      	cmp	r3, r1
 8015106:	4682      	mov	sl, r0
 8015108:	d898      	bhi.n	801503c <_strtod_l+0x434>
 801510a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801510e:	428b      	cmp	r3, r1
 8015110:	bf86      	itte	hi
 8015112:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80151ac <_strtod_l+0x5a4>
 8015116:	f04f 3aff 	movhi.w	sl, #4294967295
 801511a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801511e:	2300      	movs	r3, #0
 8015120:	9304      	str	r3, [sp, #16]
 8015122:	e077      	b.n	8015214 <_strtod_l+0x60c>
 8015124:	f018 0f01 	tst.w	r8, #1
 8015128:	d006      	beq.n	8015138 <_strtod_l+0x530>
 801512a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 801512e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015132:	f7eb fa71 	bl	8000618 <__aeabi_dmul>
 8015136:	2301      	movs	r3, #1
 8015138:	3501      	adds	r5, #1
 801513a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801513e:	e7cc      	b.n	80150da <_strtod_l+0x4d2>
 8015140:	d0ed      	beq.n	801511e <_strtod_l+0x516>
 8015142:	f1c8 0800 	rsb	r8, r8, #0
 8015146:	f018 020f 	ands.w	r2, r8, #15
 801514a:	d00a      	beq.n	8015162 <_strtod_l+0x55a>
 801514c:	4b12      	ldr	r3, [pc, #72]	; (8015198 <_strtod_l+0x590>)
 801514e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015152:	4650      	mov	r0, sl
 8015154:	4659      	mov	r1, fp
 8015156:	e9d3 2300 	ldrd	r2, r3, [r3]
 801515a:	f7eb fb87 	bl	800086c <__aeabi_ddiv>
 801515e:	4682      	mov	sl, r0
 8015160:	468b      	mov	fp, r1
 8015162:	ea5f 1828 	movs.w	r8, r8, asr #4
 8015166:	d0da      	beq.n	801511e <_strtod_l+0x516>
 8015168:	f1b8 0f1f 	cmp.w	r8, #31
 801516c:	dd20      	ble.n	80151b0 <_strtod_l+0x5a8>
 801516e:	2400      	movs	r4, #0
 8015170:	46a0      	mov	r8, r4
 8015172:	9407      	str	r4, [sp, #28]
 8015174:	9405      	str	r4, [sp, #20]
 8015176:	2322      	movs	r3, #34	; 0x22
 8015178:	f04f 0a00 	mov.w	sl, #0
 801517c:	f04f 0b00 	mov.w	fp, #0
 8015180:	f8c9 3000 	str.w	r3, [r9]
 8015184:	e765      	b.n	8015052 <_strtod_l+0x44a>
 8015186:	bf00      	nop
 8015188:	08019e7d 	.word	0x08019e7d
 801518c:	08019f03 	.word	0x08019f03
 8015190:	08019e85 	.word	0x08019e85
 8015194:	08019ec4 	.word	0x08019ec4
 8015198:	08019f40 	.word	0x08019f40
 801519c:	08019f18 	.word	0x08019f18
 80151a0:	7ff00000 	.word	0x7ff00000
 80151a4:	7ca00000 	.word	0x7ca00000
 80151a8:	fff80000 	.word	0xfff80000
 80151ac:	7fefffff 	.word	0x7fefffff
 80151b0:	f018 0310 	ands.w	r3, r8, #16
 80151b4:	bf18      	it	ne
 80151b6:	236a      	movne	r3, #106	; 0x6a
 80151b8:	4da0      	ldr	r5, [pc, #640]	; (801543c <_strtod_l+0x834>)
 80151ba:	9304      	str	r3, [sp, #16]
 80151bc:	4650      	mov	r0, sl
 80151be:	4659      	mov	r1, fp
 80151c0:	2300      	movs	r3, #0
 80151c2:	f1b8 0f00 	cmp.w	r8, #0
 80151c6:	f300 810a 	bgt.w	80153de <_strtod_l+0x7d6>
 80151ca:	b10b      	cbz	r3, 80151d0 <_strtod_l+0x5c8>
 80151cc:	4682      	mov	sl, r0
 80151ce:	468b      	mov	fp, r1
 80151d0:	9b04      	ldr	r3, [sp, #16]
 80151d2:	b1bb      	cbz	r3, 8015204 <_strtod_l+0x5fc>
 80151d4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80151d8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80151dc:	2b00      	cmp	r3, #0
 80151de:	4659      	mov	r1, fp
 80151e0:	dd10      	ble.n	8015204 <_strtod_l+0x5fc>
 80151e2:	2b1f      	cmp	r3, #31
 80151e4:	f340 8107 	ble.w	80153f6 <_strtod_l+0x7ee>
 80151e8:	2b34      	cmp	r3, #52	; 0x34
 80151ea:	bfde      	ittt	le
 80151ec:	3b20      	suble	r3, #32
 80151ee:	f04f 32ff 	movle.w	r2, #4294967295
 80151f2:	fa02 f303 	lslle.w	r3, r2, r3
 80151f6:	f04f 0a00 	mov.w	sl, #0
 80151fa:	bfcc      	ite	gt
 80151fc:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8015200:	ea03 0b01 	andle.w	fp, r3, r1
 8015204:	2200      	movs	r2, #0
 8015206:	2300      	movs	r3, #0
 8015208:	4650      	mov	r0, sl
 801520a:	4659      	mov	r1, fp
 801520c:	f7eb fc6c 	bl	8000ae8 <__aeabi_dcmpeq>
 8015210:	2800      	cmp	r0, #0
 8015212:	d1ac      	bne.n	801516e <_strtod_l+0x566>
 8015214:	9b07      	ldr	r3, [sp, #28]
 8015216:	9300      	str	r3, [sp, #0]
 8015218:	9a05      	ldr	r2, [sp, #20]
 801521a:	9908      	ldr	r1, [sp, #32]
 801521c:	4623      	mov	r3, r4
 801521e:	4648      	mov	r0, r9
 8015220:	f001 fdac 	bl	8016d7c <__s2b>
 8015224:	9007      	str	r0, [sp, #28]
 8015226:	2800      	cmp	r0, #0
 8015228:	f43f af08 	beq.w	801503c <_strtod_l+0x434>
 801522c:	9a06      	ldr	r2, [sp, #24]
 801522e:	9b06      	ldr	r3, [sp, #24]
 8015230:	2a00      	cmp	r2, #0
 8015232:	f1c3 0300 	rsb	r3, r3, #0
 8015236:	bfa8      	it	ge
 8015238:	2300      	movge	r3, #0
 801523a:	930e      	str	r3, [sp, #56]	; 0x38
 801523c:	2400      	movs	r4, #0
 801523e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8015242:	9316      	str	r3, [sp, #88]	; 0x58
 8015244:	46a0      	mov	r8, r4
 8015246:	9b07      	ldr	r3, [sp, #28]
 8015248:	4648      	mov	r0, r9
 801524a:	6859      	ldr	r1, [r3, #4]
 801524c:	f001 fd10 	bl	8016c70 <_Balloc>
 8015250:	9005      	str	r0, [sp, #20]
 8015252:	2800      	cmp	r0, #0
 8015254:	f43f aef6 	beq.w	8015044 <_strtod_l+0x43c>
 8015258:	9b07      	ldr	r3, [sp, #28]
 801525a:	691a      	ldr	r2, [r3, #16]
 801525c:	3202      	adds	r2, #2
 801525e:	f103 010c 	add.w	r1, r3, #12
 8015262:	0092      	lsls	r2, r2, #2
 8015264:	300c      	adds	r0, #12
 8015266:	f7fe fcfb 	bl	8013c60 <memcpy>
 801526a:	aa1e      	add	r2, sp, #120	; 0x78
 801526c:	a91d      	add	r1, sp, #116	; 0x74
 801526e:	ec4b ab10 	vmov	d0, sl, fp
 8015272:	4648      	mov	r0, r9
 8015274:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8015278:	f002 f83c 	bl	80172f4 <__d2b>
 801527c:	901c      	str	r0, [sp, #112]	; 0x70
 801527e:	2800      	cmp	r0, #0
 8015280:	f43f aee0 	beq.w	8015044 <_strtod_l+0x43c>
 8015284:	2101      	movs	r1, #1
 8015286:	4648      	mov	r0, r9
 8015288:	f001 fe04 	bl	8016e94 <__i2b>
 801528c:	4680      	mov	r8, r0
 801528e:	2800      	cmp	r0, #0
 8015290:	f43f aed8 	beq.w	8015044 <_strtod_l+0x43c>
 8015294:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8015296:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8015298:	2e00      	cmp	r6, #0
 801529a:	bfab      	itete	ge
 801529c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 801529e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80152a0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80152a2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80152a4:	bfac      	ite	ge
 80152a6:	18f7      	addge	r7, r6, r3
 80152a8:	1b9d      	sublt	r5, r3, r6
 80152aa:	9b04      	ldr	r3, [sp, #16]
 80152ac:	1af6      	subs	r6, r6, r3
 80152ae:	4416      	add	r6, r2
 80152b0:	4b63      	ldr	r3, [pc, #396]	; (8015440 <_strtod_l+0x838>)
 80152b2:	3e01      	subs	r6, #1
 80152b4:	429e      	cmp	r6, r3
 80152b6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80152ba:	f280 80af 	bge.w	801541c <_strtod_l+0x814>
 80152be:	1b9b      	subs	r3, r3, r6
 80152c0:	2b1f      	cmp	r3, #31
 80152c2:	eba2 0203 	sub.w	r2, r2, r3
 80152c6:	f04f 0101 	mov.w	r1, #1
 80152ca:	f300 809b 	bgt.w	8015404 <_strtod_l+0x7fc>
 80152ce:	fa01 f303 	lsl.w	r3, r1, r3
 80152d2:	930f      	str	r3, [sp, #60]	; 0x3c
 80152d4:	2300      	movs	r3, #0
 80152d6:	930a      	str	r3, [sp, #40]	; 0x28
 80152d8:	18be      	adds	r6, r7, r2
 80152da:	9b04      	ldr	r3, [sp, #16]
 80152dc:	42b7      	cmp	r7, r6
 80152de:	4415      	add	r5, r2
 80152e0:	441d      	add	r5, r3
 80152e2:	463b      	mov	r3, r7
 80152e4:	bfa8      	it	ge
 80152e6:	4633      	movge	r3, r6
 80152e8:	42ab      	cmp	r3, r5
 80152ea:	bfa8      	it	ge
 80152ec:	462b      	movge	r3, r5
 80152ee:	2b00      	cmp	r3, #0
 80152f0:	bfc2      	ittt	gt
 80152f2:	1af6      	subgt	r6, r6, r3
 80152f4:	1aed      	subgt	r5, r5, r3
 80152f6:	1aff      	subgt	r7, r7, r3
 80152f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80152fa:	b1bb      	cbz	r3, 801532c <_strtod_l+0x724>
 80152fc:	4641      	mov	r1, r8
 80152fe:	461a      	mov	r2, r3
 8015300:	4648      	mov	r0, r9
 8015302:	f001 fe67 	bl	8016fd4 <__pow5mult>
 8015306:	4680      	mov	r8, r0
 8015308:	2800      	cmp	r0, #0
 801530a:	f43f ae9b 	beq.w	8015044 <_strtod_l+0x43c>
 801530e:	4601      	mov	r1, r0
 8015310:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015312:	4648      	mov	r0, r9
 8015314:	f001 fdc7 	bl	8016ea6 <__multiply>
 8015318:	900c      	str	r0, [sp, #48]	; 0x30
 801531a:	2800      	cmp	r0, #0
 801531c:	f43f ae92 	beq.w	8015044 <_strtod_l+0x43c>
 8015320:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015322:	4648      	mov	r0, r9
 8015324:	f001 fcd8 	bl	8016cd8 <_Bfree>
 8015328:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801532a:	931c      	str	r3, [sp, #112]	; 0x70
 801532c:	2e00      	cmp	r6, #0
 801532e:	dc7a      	bgt.n	8015426 <_strtod_l+0x81e>
 8015330:	9b06      	ldr	r3, [sp, #24]
 8015332:	2b00      	cmp	r3, #0
 8015334:	dd08      	ble.n	8015348 <_strtod_l+0x740>
 8015336:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015338:	9905      	ldr	r1, [sp, #20]
 801533a:	4648      	mov	r0, r9
 801533c:	f001 fe4a 	bl	8016fd4 <__pow5mult>
 8015340:	9005      	str	r0, [sp, #20]
 8015342:	2800      	cmp	r0, #0
 8015344:	f43f ae7e 	beq.w	8015044 <_strtod_l+0x43c>
 8015348:	2d00      	cmp	r5, #0
 801534a:	dd08      	ble.n	801535e <_strtod_l+0x756>
 801534c:	462a      	mov	r2, r5
 801534e:	9905      	ldr	r1, [sp, #20]
 8015350:	4648      	mov	r0, r9
 8015352:	f001 fe8d 	bl	8017070 <__lshift>
 8015356:	9005      	str	r0, [sp, #20]
 8015358:	2800      	cmp	r0, #0
 801535a:	f43f ae73 	beq.w	8015044 <_strtod_l+0x43c>
 801535e:	2f00      	cmp	r7, #0
 8015360:	dd08      	ble.n	8015374 <_strtod_l+0x76c>
 8015362:	4641      	mov	r1, r8
 8015364:	463a      	mov	r2, r7
 8015366:	4648      	mov	r0, r9
 8015368:	f001 fe82 	bl	8017070 <__lshift>
 801536c:	4680      	mov	r8, r0
 801536e:	2800      	cmp	r0, #0
 8015370:	f43f ae68 	beq.w	8015044 <_strtod_l+0x43c>
 8015374:	9a05      	ldr	r2, [sp, #20]
 8015376:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015378:	4648      	mov	r0, r9
 801537a:	f001 fee7 	bl	801714c <__mdiff>
 801537e:	4604      	mov	r4, r0
 8015380:	2800      	cmp	r0, #0
 8015382:	f43f ae5f 	beq.w	8015044 <_strtod_l+0x43c>
 8015386:	68c3      	ldr	r3, [r0, #12]
 8015388:	930c      	str	r3, [sp, #48]	; 0x30
 801538a:	2300      	movs	r3, #0
 801538c:	60c3      	str	r3, [r0, #12]
 801538e:	4641      	mov	r1, r8
 8015390:	f001 fec2 	bl	8017118 <__mcmp>
 8015394:	2800      	cmp	r0, #0
 8015396:	da55      	bge.n	8015444 <_strtod_l+0x83c>
 8015398:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801539a:	b9e3      	cbnz	r3, 80153d6 <_strtod_l+0x7ce>
 801539c:	f1ba 0f00 	cmp.w	sl, #0
 80153a0:	d119      	bne.n	80153d6 <_strtod_l+0x7ce>
 80153a2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80153a6:	b9b3      	cbnz	r3, 80153d6 <_strtod_l+0x7ce>
 80153a8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80153ac:	0d1b      	lsrs	r3, r3, #20
 80153ae:	051b      	lsls	r3, r3, #20
 80153b0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80153b4:	d90f      	bls.n	80153d6 <_strtod_l+0x7ce>
 80153b6:	6963      	ldr	r3, [r4, #20]
 80153b8:	b913      	cbnz	r3, 80153c0 <_strtod_l+0x7b8>
 80153ba:	6923      	ldr	r3, [r4, #16]
 80153bc:	2b01      	cmp	r3, #1
 80153be:	dd0a      	ble.n	80153d6 <_strtod_l+0x7ce>
 80153c0:	4621      	mov	r1, r4
 80153c2:	2201      	movs	r2, #1
 80153c4:	4648      	mov	r0, r9
 80153c6:	f001 fe53 	bl	8017070 <__lshift>
 80153ca:	4641      	mov	r1, r8
 80153cc:	4604      	mov	r4, r0
 80153ce:	f001 fea3 	bl	8017118 <__mcmp>
 80153d2:	2800      	cmp	r0, #0
 80153d4:	dc67      	bgt.n	80154a6 <_strtod_l+0x89e>
 80153d6:	9b04      	ldr	r3, [sp, #16]
 80153d8:	2b00      	cmp	r3, #0
 80153da:	d171      	bne.n	80154c0 <_strtod_l+0x8b8>
 80153dc:	e63d      	b.n	801505a <_strtod_l+0x452>
 80153de:	f018 0f01 	tst.w	r8, #1
 80153e2:	d004      	beq.n	80153ee <_strtod_l+0x7e6>
 80153e4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80153e8:	f7eb f916 	bl	8000618 <__aeabi_dmul>
 80153ec:	2301      	movs	r3, #1
 80153ee:	ea4f 0868 	mov.w	r8, r8, asr #1
 80153f2:	3508      	adds	r5, #8
 80153f4:	e6e5      	b.n	80151c2 <_strtod_l+0x5ba>
 80153f6:	f04f 32ff 	mov.w	r2, #4294967295
 80153fa:	fa02 f303 	lsl.w	r3, r2, r3
 80153fe:	ea03 0a0a 	and.w	sl, r3, sl
 8015402:	e6ff      	b.n	8015204 <_strtod_l+0x5fc>
 8015404:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8015408:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801540c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8015410:	36e2      	adds	r6, #226	; 0xe2
 8015412:	fa01 f306 	lsl.w	r3, r1, r6
 8015416:	930a      	str	r3, [sp, #40]	; 0x28
 8015418:	910f      	str	r1, [sp, #60]	; 0x3c
 801541a:	e75d      	b.n	80152d8 <_strtod_l+0x6d0>
 801541c:	2300      	movs	r3, #0
 801541e:	930a      	str	r3, [sp, #40]	; 0x28
 8015420:	2301      	movs	r3, #1
 8015422:	930f      	str	r3, [sp, #60]	; 0x3c
 8015424:	e758      	b.n	80152d8 <_strtod_l+0x6d0>
 8015426:	4632      	mov	r2, r6
 8015428:	991c      	ldr	r1, [sp, #112]	; 0x70
 801542a:	4648      	mov	r0, r9
 801542c:	f001 fe20 	bl	8017070 <__lshift>
 8015430:	901c      	str	r0, [sp, #112]	; 0x70
 8015432:	2800      	cmp	r0, #0
 8015434:	f47f af7c 	bne.w	8015330 <_strtod_l+0x728>
 8015438:	e604      	b.n	8015044 <_strtod_l+0x43c>
 801543a:	bf00      	nop
 801543c:	08019ed8 	.word	0x08019ed8
 8015440:	fffffc02 	.word	0xfffffc02
 8015444:	465d      	mov	r5, fp
 8015446:	f040 8086 	bne.w	8015556 <_strtod_l+0x94e>
 801544a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801544c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015450:	b32a      	cbz	r2, 801549e <_strtod_l+0x896>
 8015452:	4aaf      	ldr	r2, [pc, #700]	; (8015710 <_strtod_l+0xb08>)
 8015454:	4293      	cmp	r3, r2
 8015456:	d153      	bne.n	8015500 <_strtod_l+0x8f8>
 8015458:	9b04      	ldr	r3, [sp, #16]
 801545a:	4650      	mov	r0, sl
 801545c:	b1d3      	cbz	r3, 8015494 <_strtod_l+0x88c>
 801545e:	4aad      	ldr	r2, [pc, #692]	; (8015714 <_strtod_l+0xb0c>)
 8015460:	402a      	ands	r2, r5
 8015462:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8015466:	f04f 31ff 	mov.w	r1, #4294967295
 801546a:	d816      	bhi.n	801549a <_strtod_l+0x892>
 801546c:	0d12      	lsrs	r2, r2, #20
 801546e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8015472:	fa01 f303 	lsl.w	r3, r1, r3
 8015476:	4298      	cmp	r0, r3
 8015478:	d142      	bne.n	8015500 <_strtod_l+0x8f8>
 801547a:	4ba7      	ldr	r3, [pc, #668]	; (8015718 <_strtod_l+0xb10>)
 801547c:	429d      	cmp	r5, r3
 801547e:	d102      	bne.n	8015486 <_strtod_l+0x87e>
 8015480:	3001      	adds	r0, #1
 8015482:	f43f addf 	beq.w	8015044 <_strtod_l+0x43c>
 8015486:	4ba3      	ldr	r3, [pc, #652]	; (8015714 <_strtod_l+0xb0c>)
 8015488:	402b      	ands	r3, r5
 801548a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801548e:	f04f 0a00 	mov.w	sl, #0
 8015492:	e7a0      	b.n	80153d6 <_strtod_l+0x7ce>
 8015494:	f04f 33ff 	mov.w	r3, #4294967295
 8015498:	e7ed      	b.n	8015476 <_strtod_l+0x86e>
 801549a:	460b      	mov	r3, r1
 801549c:	e7eb      	b.n	8015476 <_strtod_l+0x86e>
 801549e:	bb7b      	cbnz	r3, 8015500 <_strtod_l+0x8f8>
 80154a0:	f1ba 0f00 	cmp.w	sl, #0
 80154a4:	d12c      	bne.n	8015500 <_strtod_l+0x8f8>
 80154a6:	9904      	ldr	r1, [sp, #16]
 80154a8:	4a9a      	ldr	r2, [pc, #616]	; (8015714 <_strtod_l+0xb0c>)
 80154aa:	465b      	mov	r3, fp
 80154ac:	b1f1      	cbz	r1, 80154ec <_strtod_l+0x8e4>
 80154ae:	ea02 010b 	and.w	r1, r2, fp
 80154b2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80154b6:	dc19      	bgt.n	80154ec <_strtod_l+0x8e4>
 80154b8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80154bc:	f77f ae5b 	ble.w	8015176 <_strtod_l+0x56e>
 80154c0:	4a96      	ldr	r2, [pc, #600]	; (801571c <_strtod_l+0xb14>)
 80154c2:	2300      	movs	r3, #0
 80154c4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80154c8:	4650      	mov	r0, sl
 80154ca:	4659      	mov	r1, fp
 80154cc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80154d0:	f7eb f8a2 	bl	8000618 <__aeabi_dmul>
 80154d4:	4682      	mov	sl, r0
 80154d6:	468b      	mov	fp, r1
 80154d8:	2900      	cmp	r1, #0
 80154da:	f47f adbe 	bne.w	801505a <_strtod_l+0x452>
 80154de:	2800      	cmp	r0, #0
 80154e0:	f47f adbb 	bne.w	801505a <_strtod_l+0x452>
 80154e4:	2322      	movs	r3, #34	; 0x22
 80154e6:	f8c9 3000 	str.w	r3, [r9]
 80154ea:	e5b6      	b.n	801505a <_strtod_l+0x452>
 80154ec:	4013      	ands	r3, r2
 80154ee:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80154f2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80154f6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80154fa:	f04f 3aff 	mov.w	sl, #4294967295
 80154fe:	e76a      	b.n	80153d6 <_strtod_l+0x7ce>
 8015500:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015502:	b193      	cbz	r3, 801552a <_strtod_l+0x922>
 8015504:	422b      	tst	r3, r5
 8015506:	f43f af66 	beq.w	80153d6 <_strtod_l+0x7ce>
 801550a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801550c:	9a04      	ldr	r2, [sp, #16]
 801550e:	4650      	mov	r0, sl
 8015510:	4659      	mov	r1, fp
 8015512:	b173      	cbz	r3, 8015532 <_strtod_l+0x92a>
 8015514:	f7ff fb5b 	bl	8014bce <sulp>
 8015518:	4602      	mov	r2, r0
 801551a:	460b      	mov	r3, r1
 801551c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015520:	f7ea fec4 	bl	80002ac <__adddf3>
 8015524:	4682      	mov	sl, r0
 8015526:	468b      	mov	fp, r1
 8015528:	e755      	b.n	80153d6 <_strtod_l+0x7ce>
 801552a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801552c:	ea13 0f0a 	tst.w	r3, sl
 8015530:	e7e9      	b.n	8015506 <_strtod_l+0x8fe>
 8015532:	f7ff fb4c 	bl	8014bce <sulp>
 8015536:	4602      	mov	r2, r0
 8015538:	460b      	mov	r3, r1
 801553a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801553e:	f7ea feb3 	bl	80002a8 <__aeabi_dsub>
 8015542:	2200      	movs	r2, #0
 8015544:	2300      	movs	r3, #0
 8015546:	4682      	mov	sl, r0
 8015548:	468b      	mov	fp, r1
 801554a:	f7eb facd 	bl	8000ae8 <__aeabi_dcmpeq>
 801554e:	2800      	cmp	r0, #0
 8015550:	f47f ae11 	bne.w	8015176 <_strtod_l+0x56e>
 8015554:	e73f      	b.n	80153d6 <_strtod_l+0x7ce>
 8015556:	4641      	mov	r1, r8
 8015558:	4620      	mov	r0, r4
 801555a:	f001 ff1a 	bl	8017392 <__ratio>
 801555e:	ec57 6b10 	vmov	r6, r7, d0
 8015562:	2200      	movs	r2, #0
 8015564:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8015568:	ee10 0a10 	vmov	r0, s0
 801556c:	4639      	mov	r1, r7
 801556e:	f7eb facf 	bl	8000b10 <__aeabi_dcmple>
 8015572:	2800      	cmp	r0, #0
 8015574:	d077      	beq.n	8015666 <_strtod_l+0xa5e>
 8015576:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015578:	2b00      	cmp	r3, #0
 801557a:	d04a      	beq.n	8015612 <_strtod_l+0xa0a>
 801557c:	4b68      	ldr	r3, [pc, #416]	; (8015720 <_strtod_l+0xb18>)
 801557e:	2200      	movs	r2, #0
 8015580:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8015584:	4f66      	ldr	r7, [pc, #408]	; (8015720 <_strtod_l+0xb18>)
 8015586:	2600      	movs	r6, #0
 8015588:	4b62      	ldr	r3, [pc, #392]	; (8015714 <_strtod_l+0xb0c>)
 801558a:	402b      	ands	r3, r5
 801558c:	930f      	str	r3, [sp, #60]	; 0x3c
 801558e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015590:	4b64      	ldr	r3, [pc, #400]	; (8015724 <_strtod_l+0xb1c>)
 8015592:	429a      	cmp	r2, r3
 8015594:	f040 80ce 	bne.w	8015734 <_strtod_l+0xb2c>
 8015598:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801559c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80155a0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80155a4:	ec4b ab10 	vmov	d0, sl, fp
 80155a8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80155ac:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80155b0:	f001 fe2a 	bl	8017208 <__ulp>
 80155b4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80155b8:	ec53 2b10 	vmov	r2, r3, d0
 80155bc:	f7eb f82c 	bl	8000618 <__aeabi_dmul>
 80155c0:	4652      	mov	r2, sl
 80155c2:	465b      	mov	r3, fp
 80155c4:	f7ea fe72 	bl	80002ac <__adddf3>
 80155c8:	460b      	mov	r3, r1
 80155ca:	4952      	ldr	r1, [pc, #328]	; (8015714 <_strtod_l+0xb0c>)
 80155cc:	4a56      	ldr	r2, [pc, #344]	; (8015728 <_strtod_l+0xb20>)
 80155ce:	4019      	ands	r1, r3
 80155d0:	4291      	cmp	r1, r2
 80155d2:	4682      	mov	sl, r0
 80155d4:	d95b      	bls.n	801568e <_strtod_l+0xa86>
 80155d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80155d8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80155dc:	4293      	cmp	r3, r2
 80155de:	d103      	bne.n	80155e8 <_strtod_l+0x9e0>
 80155e0:	9b08      	ldr	r3, [sp, #32]
 80155e2:	3301      	adds	r3, #1
 80155e4:	f43f ad2e 	beq.w	8015044 <_strtod_l+0x43c>
 80155e8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8015718 <_strtod_l+0xb10>
 80155ec:	f04f 3aff 	mov.w	sl, #4294967295
 80155f0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80155f2:	4648      	mov	r0, r9
 80155f4:	f001 fb70 	bl	8016cd8 <_Bfree>
 80155f8:	9905      	ldr	r1, [sp, #20]
 80155fa:	4648      	mov	r0, r9
 80155fc:	f001 fb6c 	bl	8016cd8 <_Bfree>
 8015600:	4641      	mov	r1, r8
 8015602:	4648      	mov	r0, r9
 8015604:	f001 fb68 	bl	8016cd8 <_Bfree>
 8015608:	4621      	mov	r1, r4
 801560a:	4648      	mov	r0, r9
 801560c:	f001 fb64 	bl	8016cd8 <_Bfree>
 8015610:	e619      	b.n	8015246 <_strtod_l+0x63e>
 8015612:	f1ba 0f00 	cmp.w	sl, #0
 8015616:	d11a      	bne.n	801564e <_strtod_l+0xa46>
 8015618:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801561c:	b9eb      	cbnz	r3, 801565a <_strtod_l+0xa52>
 801561e:	2200      	movs	r2, #0
 8015620:	4b3f      	ldr	r3, [pc, #252]	; (8015720 <_strtod_l+0xb18>)
 8015622:	4630      	mov	r0, r6
 8015624:	4639      	mov	r1, r7
 8015626:	f7eb fa69 	bl	8000afc <__aeabi_dcmplt>
 801562a:	b9c8      	cbnz	r0, 8015660 <_strtod_l+0xa58>
 801562c:	4630      	mov	r0, r6
 801562e:	4639      	mov	r1, r7
 8015630:	2200      	movs	r2, #0
 8015632:	4b3e      	ldr	r3, [pc, #248]	; (801572c <_strtod_l+0xb24>)
 8015634:	f7ea fff0 	bl	8000618 <__aeabi_dmul>
 8015638:	4606      	mov	r6, r0
 801563a:	460f      	mov	r7, r1
 801563c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8015640:	9618      	str	r6, [sp, #96]	; 0x60
 8015642:	9319      	str	r3, [sp, #100]	; 0x64
 8015644:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8015648:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801564c:	e79c      	b.n	8015588 <_strtod_l+0x980>
 801564e:	f1ba 0f01 	cmp.w	sl, #1
 8015652:	d102      	bne.n	801565a <_strtod_l+0xa52>
 8015654:	2d00      	cmp	r5, #0
 8015656:	f43f ad8e 	beq.w	8015176 <_strtod_l+0x56e>
 801565a:	2200      	movs	r2, #0
 801565c:	4b34      	ldr	r3, [pc, #208]	; (8015730 <_strtod_l+0xb28>)
 801565e:	e78f      	b.n	8015580 <_strtod_l+0x978>
 8015660:	2600      	movs	r6, #0
 8015662:	4f32      	ldr	r7, [pc, #200]	; (801572c <_strtod_l+0xb24>)
 8015664:	e7ea      	b.n	801563c <_strtod_l+0xa34>
 8015666:	4b31      	ldr	r3, [pc, #196]	; (801572c <_strtod_l+0xb24>)
 8015668:	4630      	mov	r0, r6
 801566a:	4639      	mov	r1, r7
 801566c:	2200      	movs	r2, #0
 801566e:	f7ea ffd3 	bl	8000618 <__aeabi_dmul>
 8015672:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015674:	4606      	mov	r6, r0
 8015676:	460f      	mov	r7, r1
 8015678:	b933      	cbnz	r3, 8015688 <_strtod_l+0xa80>
 801567a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801567e:	9010      	str	r0, [sp, #64]	; 0x40
 8015680:	9311      	str	r3, [sp, #68]	; 0x44
 8015682:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8015686:	e7df      	b.n	8015648 <_strtod_l+0xa40>
 8015688:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801568c:	e7f9      	b.n	8015682 <_strtod_l+0xa7a>
 801568e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8015692:	9b04      	ldr	r3, [sp, #16]
 8015694:	2b00      	cmp	r3, #0
 8015696:	d1ab      	bne.n	80155f0 <_strtod_l+0x9e8>
 8015698:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801569c:	0d1b      	lsrs	r3, r3, #20
 801569e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80156a0:	051b      	lsls	r3, r3, #20
 80156a2:	429a      	cmp	r2, r3
 80156a4:	465d      	mov	r5, fp
 80156a6:	d1a3      	bne.n	80155f0 <_strtod_l+0x9e8>
 80156a8:	4639      	mov	r1, r7
 80156aa:	4630      	mov	r0, r6
 80156ac:	f7eb fa64 	bl	8000b78 <__aeabi_d2iz>
 80156b0:	f7ea ff48 	bl	8000544 <__aeabi_i2d>
 80156b4:	460b      	mov	r3, r1
 80156b6:	4602      	mov	r2, r0
 80156b8:	4639      	mov	r1, r7
 80156ba:	4630      	mov	r0, r6
 80156bc:	f7ea fdf4 	bl	80002a8 <__aeabi_dsub>
 80156c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80156c2:	4606      	mov	r6, r0
 80156c4:	460f      	mov	r7, r1
 80156c6:	b933      	cbnz	r3, 80156d6 <_strtod_l+0xace>
 80156c8:	f1ba 0f00 	cmp.w	sl, #0
 80156cc:	d103      	bne.n	80156d6 <_strtod_l+0xace>
 80156ce:	f3cb 0513 	ubfx	r5, fp, #0, #20
 80156d2:	2d00      	cmp	r5, #0
 80156d4:	d06d      	beq.n	80157b2 <_strtod_l+0xbaa>
 80156d6:	a30a      	add	r3, pc, #40	; (adr r3, 8015700 <_strtod_l+0xaf8>)
 80156d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156dc:	4630      	mov	r0, r6
 80156de:	4639      	mov	r1, r7
 80156e0:	f7eb fa0c 	bl	8000afc <__aeabi_dcmplt>
 80156e4:	2800      	cmp	r0, #0
 80156e6:	f47f acb8 	bne.w	801505a <_strtod_l+0x452>
 80156ea:	a307      	add	r3, pc, #28	; (adr r3, 8015708 <_strtod_l+0xb00>)
 80156ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156f0:	4630      	mov	r0, r6
 80156f2:	4639      	mov	r1, r7
 80156f4:	f7eb fa20 	bl	8000b38 <__aeabi_dcmpgt>
 80156f8:	2800      	cmp	r0, #0
 80156fa:	f43f af79 	beq.w	80155f0 <_strtod_l+0x9e8>
 80156fe:	e4ac      	b.n	801505a <_strtod_l+0x452>
 8015700:	94a03595 	.word	0x94a03595
 8015704:	3fdfffff 	.word	0x3fdfffff
 8015708:	35afe535 	.word	0x35afe535
 801570c:	3fe00000 	.word	0x3fe00000
 8015710:	000fffff 	.word	0x000fffff
 8015714:	7ff00000 	.word	0x7ff00000
 8015718:	7fefffff 	.word	0x7fefffff
 801571c:	39500000 	.word	0x39500000
 8015720:	3ff00000 	.word	0x3ff00000
 8015724:	7fe00000 	.word	0x7fe00000
 8015728:	7c9fffff 	.word	0x7c9fffff
 801572c:	3fe00000 	.word	0x3fe00000
 8015730:	bff00000 	.word	0xbff00000
 8015734:	9b04      	ldr	r3, [sp, #16]
 8015736:	b333      	cbz	r3, 8015786 <_strtod_l+0xb7e>
 8015738:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801573a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801573e:	d822      	bhi.n	8015786 <_strtod_l+0xb7e>
 8015740:	a327      	add	r3, pc, #156	; (adr r3, 80157e0 <_strtod_l+0xbd8>)
 8015742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015746:	4630      	mov	r0, r6
 8015748:	4639      	mov	r1, r7
 801574a:	f7eb f9e1 	bl	8000b10 <__aeabi_dcmple>
 801574e:	b1a0      	cbz	r0, 801577a <_strtod_l+0xb72>
 8015750:	4639      	mov	r1, r7
 8015752:	4630      	mov	r0, r6
 8015754:	f7eb fa38 	bl	8000bc8 <__aeabi_d2uiz>
 8015758:	2800      	cmp	r0, #0
 801575a:	bf08      	it	eq
 801575c:	2001      	moveq	r0, #1
 801575e:	f7ea fee1 	bl	8000524 <__aeabi_ui2d>
 8015762:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015764:	4606      	mov	r6, r0
 8015766:	460f      	mov	r7, r1
 8015768:	bb03      	cbnz	r3, 80157ac <_strtod_l+0xba4>
 801576a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801576e:	9012      	str	r0, [sp, #72]	; 0x48
 8015770:	9313      	str	r3, [sp, #76]	; 0x4c
 8015772:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8015776:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801577a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801577c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801577e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8015782:	1a9b      	subs	r3, r3, r2
 8015784:	930b      	str	r3, [sp, #44]	; 0x2c
 8015786:	ed9d 0b08 	vldr	d0, [sp, #32]
 801578a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 801578e:	f001 fd3b 	bl	8017208 <__ulp>
 8015792:	4650      	mov	r0, sl
 8015794:	ec53 2b10 	vmov	r2, r3, d0
 8015798:	4659      	mov	r1, fp
 801579a:	f7ea ff3d 	bl	8000618 <__aeabi_dmul>
 801579e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80157a2:	f7ea fd83 	bl	80002ac <__adddf3>
 80157a6:	4682      	mov	sl, r0
 80157a8:	468b      	mov	fp, r1
 80157aa:	e772      	b.n	8015692 <_strtod_l+0xa8a>
 80157ac:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80157b0:	e7df      	b.n	8015772 <_strtod_l+0xb6a>
 80157b2:	a30d      	add	r3, pc, #52	; (adr r3, 80157e8 <_strtod_l+0xbe0>)
 80157b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157b8:	f7eb f9a0 	bl	8000afc <__aeabi_dcmplt>
 80157bc:	e79c      	b.n	80156f8 <_strtod_l+0xaf0>
 80157be:	2300      	movs	r3, #0
 80157c0:	930d      	str	r3, [sp, #52]	; 0x34
 80157c2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80157c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80157c6:	6013      	str	r3, [r2, #0]
 80157c8:	f7ff ba61 	b.w	8014c8e <_strtod_l+0x86>
 80157cc:	2b65      	cmp	r3, #101	; 0x65
 80157ce:	f04f 0200 	mov.w	r2, #0
 80157d2:	f43f ab4e 	beq.w	8014e72 <_strtod_l+0x26a>
 80157d6:	2101      	movs	r1, #1
 80157d8:	4614      	mov	r4, r2
 80157da:	9104      	str	r1, [sp, #16]
 80157dc:	f7ff bacb 	b.w	8014d76 <_strtod_l+0x16e>
 80157e0:	ffc00000 	.word	0xffc00000
 80157e4:	41dfffff 	.word	0x41dfffff
 80157e8:	94a03595 	.word	0x94a03595
 80157ec:	3fcfffff 	.word	0x3fcfffff

080157f0 <_strtod_r>:
 80157f0:	4b05      	ldr	r3, [pc, #20]	; (8015808 <_strtod_r+0x18>)
 80157f2:	681b      	ldr	r3, [r3, #0]
 80157f4:	b410      	push	{r4}
 80157f6:	6a1b      	ldr	r3, [r3, #32]
 80157f8:	4c04      	ldr	r4, [pc, #16]	; (801580c <_strtod_r+0x1c>)
 80157fa:	2b00      	cmp	r3, #0
 80157fc:	bf08      	it	eq
 80157fe:	4623      	moveq	r3, r4
 8015800:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015804:	f7ff ba00 	b.w	8014c08 <_strtod_l>
 8015808:	20000e34 	.word	0x20000e34
 801580c:	20000e98 	.word	0x20000e98

08015810 <_strtol_l.isra.0>:
 8015810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015814:	4680      	mov	r8, r0
 8015816:	4689      	mov	r9, r1
 8015818:	4692      	mov	sl, r2
 801581a:	461e      	mov	r6, r3
 801581c:	460f      	mov	r7, r1
 801581e:	463d      	mov	r5, r7
 8015820:	9808      	ldr	r0, [sp, #32]
 8015822:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015826:	f001 f9ed 	bl	8016c04 <__locale_ctype_ptr_l>
 801582a:	4420      	add	r0, r4
 801582c:	7843      	ldrb	r3, [r0, #1]
 801582e:	f013 0308 	ands.w	r3, r3, #8
 8015832:	d132      	bne.n	801589a <_strtol_l.isra.0+0x8a>
 8015834:	2c2d      	cmp	r4, #45	; 0x2d
 8015836:	d132      	bne.n	801589e <_strtol_l.isra.0+0x8e>
 8015838:	787c      	ldrb	r4, [r7, #1]
 801583a:	1cbd      	adds	r5, r7, #2
 801583c:	2201      	movs	r2, #1
 801583e:	2e00      	cmp	r6, #0
 8015840:	d05d      	beq.n	80158fe <_strtol_l.isra.0+0xee>
 8015842:	2e10      	cmp	r6, #16
 8015844:	d109      	bne.n	801585a <_strtol_l.isra.0+0x4a>
 8015846:	2c30      	cmp	r4, #48	; 0x30
 8015848:	d107      	bne.n	801585a <_strtol_l.isra.0+0x4a>
 801584a:	782b      	ldrb	r3, [r5, #0]
 801584c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8015850:	2b58      	cmp	r3, #88	; 0x58
 8015852:	d14f      	bne.n	80158f4 <_strtol_l.isra.0+0xe4>
 8015854:	786c      	ldrb	r4, [r5, #1]
 8015856:	2610      	movs	r6, #16
 8015858:	3502      	adds	r5, #2
 801585a:	2a00      	cmp	r2, #0
 801585c:	bf14      	ite	ne
 801585e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8015862:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8015866:	2700      	movs	r7, #0
 8015868:	fbb1 fcf6 	udiv	ip, r1, r6
 801586c:	4638      	mov	r0, r7
 801586e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8015872:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8015876:	2b09      	cmp	r3, #9
 8015878:	d817      	bhi.n	80158aa <_strtol_l.isra.0+0x9a>
 801587a:	461c      	mov	r4, r3
 801587c:	42a6      	cmp	r6, r4
 801587e:	dd23      	ble.n	80158c8 <_strtol_l.isra.0+0xb8>
 8015880:	1c7b      	adds	r3, r7, #1
 8015882:	d007      	beq.n	8015894 <_strtol_l.isra.0+0x84>
 8015884:	4584      	cmp	ip, r0
 8015886:	d31c      	bcc.n	80158c2 <_strtol_l.isra.0+0xb2>
 8015888:	d101      	bne.n	801588e <_strtol_l.isra.0+0x7e>
 801588a:	45a6      	cmp	lr, r4
 801588c:	db19      	blt.n	80158c2 <_strtol_l.isra.0+0xb2>
 801588e:	fb00 4006 	mla	r0, r0, r6, r4
 8015892:	2701      	movs	r7, #1
 8015894:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015898:	e7eb      	b.n	8015872 <_strtol_l.isra.0+0x62>
 801589a:	462f      	mov	r7, r5
 801589c:	e7bf      	b.n	801581e <_strtol_l.isra.0+0xe>
 801589e:	2c2b      	cmp	r4, #43	; 0x2b
 80158a0:	bf04      	itt	eq
 80158a2:	1cbd      	addeq	r5, r7, #2
 80158a4:	787c      	ldrbeq	r4, [r7, #1]
 80158a6:	461a      	mov	r2, r3
 80158a8:	e7c9      	b.n	801583e <_strtol_l.isra.0+0x2e>
 80158aa:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80158ae:	2b19      	cmp	r3, #25
 80158b0:	d801      	bhi.n	80158b6 <_strtol_l.isra.0+0xa6>
 80158b2:	3c37      	subs	r4, #55	; 0x37
 80158b4:	e7e2      	b.n	801587c <_strtol_l.isra.0+0x6c>
 80158b6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80158ba:	2b19      	cmp	r3, #25
 80158bc:	d804      	bhi.n	80158c8 <_strtol_l.isra.0+0xb8>
 80158be:	3c57      	subs	r4, #87	; 0x57
 80158c0:	e7dc      	b.n	801587c <_strtol_l.isra.0+0x6c>
 80158c2:	f04f 37ff 	mov.w	r7, #4294967295
 80158c6:	e7e5      	b.n	8015894 <_strtol_l.isra.0+0x84>
 80158c8:	1c7b      	adds	r3, r7, #1
 80158ca:	d108      	bne.n	80158de <_strtol_l.isra.0+0xce>
 80158cc:	2322      	movs	r3, #34	; 0x22
 80158ce:	f8c8 3000 	str.w	r3, [r8]
 80158d2:	4608      	mov	r0, r1
 80158d4:	f1ba 0f00 	cmp.w	sl, #0
 80158d8:	d107      	bne.n	80158ea <_strtol_l.isra.0+0xda>
 80158da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80158de:	b102      	cbz	r2, 80158e2 <_strtol_l.isra.0+0xd2>
 80158e0:	4240      	negs	r0, r0
 80158e2:	f1ba 0f00 	cmp.w	sl, #0
 80158e6:	d0f8      	beq.n	80158da <_strtol_l.isra.0+0xca>
 80158e8:	b10f      	cbz	r7, 80158ee <_strtol_l.isra.0+0xde>
 80158ea:	f105 39ff 	add.w	r9, r5, #4294967295
 80158ee:	f8ca 9000 	str.w	r9, [sl]
 80158f2:	e7f2      	b.n	80158da <_strtol_l.isra.0+0xca>
 80158f4:	2430      	movs	r4, #48	; 0x30
 80158f6:	2e00      	cmp	r6, #0
 80158f8:	d1af      	bne.n	801585a <_strtol_l.isra.0+0x4a>
 80158fa:	2608      	movs	r6, #8
 80158fc:	e7ad      	b.n	801585a <_strtol_l.isra.0+0x4a>
 80158fe:	2c30      	cmp	r4, #48	; 0x30
 8015900:	d0a3      	beq.n	801584a <_strtol_l.isra.0+0x3a>
 8015902:	260a      	movs	r6, #10
 8015904:	e7a9      	b.n	801585a <_strtol_l.isra.0+0x4a>
	...

08015908 <_strtol_r>:
 8015908:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801590a:	4c06      	ldr	r4, [pc, #24]	; (8015924 <_strtol_r+0x1c>)
 801590c:	4d06      	ldr	r5, [pc, #24]	; (8015928 <_strtol_r+0x20>)
 801590e:	6824      	ldr	r4, [r4, #0]
 8015910:	6a24      	ldr	r4, [r4, #32]
 8015912:	2c00      	cmp	r4, #0
 8015914:	bf08      	it	eq
 8015916:	462c      	moveq	r4, r5
 8015918:	9400      	str	r4, [sp, #0]
 801591a:	f7ff ff79 	bl	8015810 <_strtol_l.isra.0>
 801591e:	b003      	add	sp, #12
 8015920:	bd30      	pop	{r4, r5, pc}
 8015922:	bf00      	nop
 8015924:	20000e34 	.word	0x20000e34
 8015928:	20000e98 	.word	0x20000e98

0801592c <quorem>:
 801592c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015930:	6903      	ldr	r3, [r0, #16]
 8015932:	690c      	ldr	r4, [r1, #16]
 8015934:	42a3      	cmp	r3, r4
 8015936:	4680      	mov	r8, r0
 8015938:	f2c0 8082 	blt.w	8015a40 <quorem+0x114>
 801593c:	3c01      	subs	r4, #1
 801593e:	f101 0714 	add.w	r7, r1, #20
 8015942:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8015946:	f100 0614 	add.w	r6, r0, #20
 801594a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801594e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8015952:	eb06 030c 	add.w	r3, r6, ip
 8015956:	3501      	adds	r5, #1
 8015958:	eb07 090c 	add.w	r9, r7, ip
 801595c:	9301      	str	r3, [sp, #4]
 801595e:	fbb0 f5f5 	udiv	r5, r0, r5
 8015962:	b395      	cbz	r5, 80159ca <quorem+0x9e>
 8015964:	f04f 0a00 	mov.w	sl, #0
 8015968:	4638      	mov	r0, r7
 801596a:	46b6      	mov	lr, r6
 801596c:	46d3      	mov	fp, sl
 801596e:	f850 2b04 	ldr.w	r2, [r0], #4
 8015972:	b293      	uxth	r3, r2
 8015974:	fb05 a303 	mla	r3, r5, r3, sl
 8015978:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801597c:	b29b      	uxth	r3, r3
 801597e:	ebab 0303 	sub.w	r3, fp, r3
 8015982:	0c12      	lsrs	r2, r2, #16
 8015984:	f8de b000 	ldr.w	fp, [lr]
 8015988:	fb05 a202 	mla	r2, r5, r2, sl
 801598c:	fa13 f38b 	uxtah	r3, r3, fp
 8015990:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8015994:	fa1f fb82 	uxth.w	fp, r2
 8015998:	f8de 2000 	ldr.w	r2, [lr]
 801599c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80159a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80159a4:	b29b      	uxth	r3, r3
 80159a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80159aa:	4581      	cmp	r9, r0
 80159ac:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80159b0:	f84e 3b04 	str.w	r3, [lr], #4
 80159b4:	d2db      	bcs.n	801596e <quorem+0x42>
 80159b6:	f856 300c 	ldr.w	r3, [r6, ip]
 80159ba:	b933      	cbnz	r3, 80159ca <quorem+0x9e>
 80159bc:	9b01      	ldr	r3, [sp, #4]
 80159be:	3b04      	subs	r3, #4
 80159c0:	429e      	cmp	r6, r3
 80159c2:	461a      	mov	r2, r3
 80159c4:	d330      	bcc.n	8015a28 <quorem+0xfc>
 80159c6:	f8c8 4010 	str.w	r4, [r8, #16]
 80159ca:	4640      	mov	r0, r8
 80159cc:	f001 fba4 	bl	8017118 <__mcmp>
 80159d0:	2800      	cmp	r0, #0
 80159d2:	db25      	blt.n	8015a20 <quorem+0xf4>
 80159d4:	3501      	adds	r5, #1
 80159d6:	4630      	mov	r0, r6
 80159d8:	f04f 0c00 	mov.w	ip, #0
 80159dc:	f857 2b04 	ldr.w	r2, [r7], #4
 80159e0:	f8d0 e000 	ldr.w	lr, [r0]
 80159e4:	b293      	uxth	r3, r2
 80159e6:	ebac 0303 	sub.w	r3, ip, r3
 80159ea:	0c12      	lsrs	r2, r2, #16
 80159ec:	fa13 f38e 	uxtah	r3, r3, lr
 80159f0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80159f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80159f8:	b29b      	uxth	r3, r3
 80159fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80159fe:	45b9      	cmp	r9, r7
 8015a00:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8015a04:	f840 3b04 	str.w	r3, [r0], #4
 8015a08:	d2e8      	bcs.n	80159dc <quorem+0xb0>
 8015a0a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8015a0e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8015a12:	b92a      	cbnz	r2, 8015a20 <quorem+0xf4>
 8015a14:	3b04      	subs	r3, #4
 8015a16:	429e      	cmp	r6, r3
 8015a18:	461a      	mov	r2, r3
 8015a1a:	d30b      	bcc.n	8015a34 <quorem+0x108>
 8015a1c:	f8c8 4010 	str.w	r4, [r8, #16]
 8015a20:	4628      	mov	r0, r5
 8015a22:	b003      	add	sp, #12
 8015a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a28:	6812      	ldr	r2, [r2, #0]
 8015a2a:	3b04      	subs	r3, #4
 8015a2c:	2a00      	cmp	r2, #0
 8015a2e:	d1ca      	bne.n	80159c6 <quorem+0x9a>
 8015a30:	3c01      	subs	r4, #1
 8015a32:	e7c5      	b.n	80159c0 <quorem+0x94>
 8015a34:	6812      	ldr	r2, [r2, #0]
 8015a36:	3b04      	subs	r3, #4
 8015a38:	2a00      	cmp	r2, #0
 8015a3a:	d1ef      	bne.n	8015a1c <quorem+0xf0>
 8015a3c:	3c01      	subs	r4, #1
 8015a3e:	e7ea      	b.n	8015a16 <quorem+0xea>
 8015a40:	2000      	movs	r0, #0
 8015a42:	e7ee      	b.n	8015a22 <quorem+0xf6>
 8015a44:	0000      	movs	r0, r0
	...

08015a48 <_dtoa_r>:
 8015a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a4c:	ec57 6b10 	vmov	r6, r7, d0
 8015a50:	b097      	sub	sp, #92	; 0x5c
 8015a52:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8015a54:	9106      	str	r1, [sp, #24]
 8015a56:	4604      	mov	r4, r0
 8015a58:	920b      	str	r2, [sp, #44]	; 0x2c
 8015a5a:	9312      	str	r3, [sp, #72]	; 0x48
 8015a5c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8015a60:	e9cd 6700 	strd	r6, r7, [sp]
 8015a64:	b93d      	cbnz	r5, 8015a76 <_dtoa_r+0x2e>
 8015a66:	2010      	movs	r0, #16
 8015a68:	f7fe f8ea 	bl	8013c40 <malloc>
 8015a6c:	6260      	str	r0, [r4, #36]	; 0x24
 8015a6e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8015a72:	6005      	str	r5, [r0, #0]
 8015a74:	60c5      	str	r5, [r0, #12]
 8015a76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015a78:	6819      	ldr	r1, [r3, #0]
 8015a7a:	b151      	cbz	r1, 8015a92 <_dtoa_r+0x4a>
 8015a7c:	685a      	ldr	r2, [r3, #4]
 8015a7e:	604a      	str	r2, [r1, #4]
 8015a80:	2301      	movs	r3, #1
 8015a82:	4093      	lsls	r3, r2
 8015a84:	608b      	str	r3, [r1, #8]
 8015a86:	4620      	mov	r0, r4
 8015a88:	f001 f926 	bl	8016cd8 <_Bfree>
 8015a8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015a8e:	2200      	movs	r2, #0
 8015a90:	601a      	str	r2, [r3, #0]
 8015a92:	1e3b      	subs	r3, r7, #0
 8015a94:	bfbb      	ittet	lt
 8015a96:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8015a9a:	9301      	strlt	r3, [sp, #4]
 8015a9c:	2300      	movge	r3, #0
 8015a9e:	2201      	movlt	r2, #1
 8015aa0:	bfac      	ite	ge
 8015aa2:	f8c8 3000 	strge.w	r3, [r8]
 8015aa6:	f8c8 2000 	strlt.w	r2, [r8]
 8015aaa:	4baf      	ldr	r3, [pc, #700]	; (8015d68 <_dtoa_r+0x320>)
 8015aac:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8015ab0:	ea33 0308 	bics.w	r3, r3, r8
 8015ab4:	d114      	bne.n	8015ae0 <_dtoa_r+0x98>
 8015ab6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015ab8:	f242 730f 	movw	r3, #9999	; 0x270f
 8015abc:	6013      	str	r3, [r2, #0]
 8015abe:	9b00      	ldr	r3, [sp, #0]
 8015ac0:	b923      	cbnz	r3, 8015acc <_dtoa_r+0x84>
 8015ac2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8015ac6:	2800      	cmp	r0, #0
 8015ac8:	f000 8542 	beq.w	8016550 <_dtoa_r+0xb08>
 8015acc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015ace:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8015d7c <_dtoa_r+0x334>
 8015ad2:	2b00      	cmp	r3, #0
 8015ad4:	f000 8544 	beq.w	8016560 <_dtoa_r+0xb18>
 8015ad8:	f10b 0303 	add.w	r3, fp, #3
 8015adc:	f000 bd3e 	b.w	801655c <_dtoa_r+0xb14>
 8015ae0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8015ae4:	2200      	movs	r2, #0
 8015ae6:	2300      	movs	r3, #0
 8015ae8:	4630      	mov	r0, r6
 8015aea:	4639      	mov	r1, r7
 8015aec:	f7ea fffc 	bl	8000ae8 <__aeabi_dcmpeq>
 8015af0:	4681      	mov	r9, r0
 8015af2:	b168      	cbz	r0, 8015b10 <_dtoa_r+0xc8>
 8015af4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015af6:	2301      	movs	r3, #1
 8015af8:	6013      	str	r3, [r2, #0]
 8015afa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015afc:	2b00      	cmp	r3, #0
 8015afe:	f000 8524 	beq.w	801654a <_dtoa_r+0xb02>
 8015b02:	4b9a      	ldr	r3, [pc, #616]	; (8015d6c <_dtoa_r+0x324>)
 8015b04:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015b06:	f103 3bff 	add.w	fp, r3, #4294967295
 8015b0a:	6013      	str	r3, [r2, #0]
 8015b0c:	f000 bd28 	b.w	8016560 <_dtoa_r+0xb18>
 8015b10:	aa14      	add	r2, sp, #80	; 0x50
 8015b12:	a915      	add	r1, sp, #84	; 0x54
 8015b14:	ec47 6b10 	vmov	d0, r6, r7
 8015b18:	4620      	mov	r0, r4
 8015b1a:	f001 fbeb 	bl	80172f4 <__d2b>
 8015b1e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8015b22:	9004      	str	r0, [sp, #16]
 8015b24:	2d00      	cmp	r5, #0
 8015b26:	d07c      	beq.n	8015c22 <_dtoa_r+0x1da>
 8015b28:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8015b2c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8015b30:	46b2      	mov	sl, r6
 8015b32:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8015b36:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8015b3a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8015b3e:	2200      	movs	r2, #0
 8015b40:	4b8b      	ldr	r3, [pc, #556]	; (8015d70 <_dtoa_r+0x328>)
 8015b42:	4650      	mov	r0, sl
 8015b44:	4659      	mov	r1, fp
 8015b46:	f7ea fbaf 	bl	80002a8 <__aeabi_dsub>
 8015b4a:	a381      	add	r3, pc, #516	; (adr r3, 8015d50 <_dtoa_r+0x308>)
 8015b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b50:	f7ea fd62 	bl	8000618 <__aeabi_dmul>
 8015b54:	a380      	add	r3, pc, #512	; (adr r3, 8015d58 <_dtoa_r+0x310>)
 8015b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b5a:	f7ea fba7 	bl	80002ac <__adddf3>
 8015b5e:	4606      	mov	r6, r0
 8015b60:	4628      	mov	r0, r5
 8015b62:	460f      	mov	r7, r1
 8015b64:	f7ea fcee 	bl	8000544 <__aeabi_i2d>
 8015b68:	a37d      	add	r3, pc, #500	; (adr r3, 8015d60 <_dtoa_r+0x318>)
 8015b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b6e:	f7ea fd53 	bl	8000618 <__aeabi_dmul>
 8015b72:	4602      	mov	r2, r0
 8015b74:	460b      	mov	r3, r1
 8015b76:	4630      	mov	r0, r6
 8015b78:	4639      	mov	r1, r7
 8015b7a:	f7ea fb97 	bl	80002ac <__adddf3>
 8015b7e:	4606      	mov	r6, r0
 8015b80:	460f      	mov	r7, r1
 8015b82:	f7ea fff9 	bl	8000b78 <__aeabi_d2iz>
 8015b86:	2200      	movs	r2, #0
 8015b88:	4682      	mov	sl, r0
 8015b8a:	2300      	movs	r3, #0
 8015b8c:	4630      	mov	r0, r6
 8015b8e:	4639      	mov	r1, r7
 8015b90:	f7ea ffb4 	bl	8000afc <__aeabi_dcmplt>
 8015b94:	b148      	cbz	r0, 8015baa <_dtoa_r+0x162>
 8015b96:	4650      	mov	r0, sl
 8015b98:	f7ea fcd4 	bl	8000544 <__aeabi_i2d>
 8015b9c:	4632      	mov	r2, r6
 8015b9e:	463b      	mov	r3, r7
 8015ba0:	f7ea ffa2 	bl	8000ae8 <__aeabi_dcmpeq>
 8015ba4:	b908      	cbnz	r0, 8015baa <_dtoa_r+0x162>
 8015ba6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015baa:	f1ba 0f16 	cmp.w	sl, #22
 8015bae:	d859      	bhi.n	8015c64 <_dtoa_r+0x21c>
 8015bb0:	4970      	ldr	r1, [pc, #448]	; (8015d74 <_dtoa_r+0x32c>)
 8015bb2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8015bb6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015bba:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015bbe:	f7ea ffbb 	bl	8000b38 <__aeabi_dcmpgt>
 8015bc2:	2800      	cmp	r0, #0
 8015bc4:	d050      	beq.n	8015c68 <_dtoa_r+0x220>
 8015bc6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015bca:	2300      	movs	r3, #0
 8015bcc:	930f      	str	r3, [sp, #60]	; 0x3c
 8015bce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015bd0:	1b5d      	subs	r5, r3, r5
 8015bd2:	f1b5 0801 	subs.w	r8, r5, #1
 8015bd6:	bf49      	itett	mi
 8015bd8:	f1c5 0301 	rsbmi	r3, r5, #1
 8015bdc:	2300      	movpl	r3, #0
 8015bde:	9305      	strmi	r3, [sp, #20]
 8015be0:	f04f 0800 	movmi.w	r8, #0
 8015be4:	bf58      	it	pl
 8015be6:	9305      	strpl	r3, [sp, #20]
 8015be8:	f1ba 0f00 	cmp.w	sl, #0
 8015bec:	db3e      	blt.n	8015c6c <_dtoa_r+0x224>
 8015bee:	2300      	movs	r3, #0
 8015bf0:	44d0      	add	r8, sl
 8015bf2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8015bf6:	9307      	str	r3, [sp, #28]
 8015bf8:	9b06      	ldr	r3, [sp, #24]
 8015bfa:	2b09      	cmp	r3, #9
 8015bfc:	f200 8090 	bhi.w	8015d20 <_dtoa_r+0x2d8>
 8015c00:	2b05      	cmp	r3, #5
 8015c02:	bfc4      	itt	gt
 8015c04:	3b04      	subgt	r3, #4
 8015c06:	9306      	strgt	r3, [sp, #24]
 8015c08:	9b06      	ldr	r3, [sp, #24]
 8015c0a:	f1a3 0302 	sub.w	r3, r3, #2
 8015c0e:	bfcc      	ite	gt
 8015c10:	2500      	movgt	r5, #0
 8015c12:	2501      	movle	r5, #1
 8015c14:	2b03      	cmp	r3, #3
 8015c16:	f200 808f 	bhi.w	8015d38 <_dtoa_r+0x2f0>
 8015c1a:	e8df f003 	tbb	[pc, r3]
 8015c1e:	7f7d      	.short	0x7f7d
 8015c20:	7131      	.short	0x7131
 8015c22:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8015c26:	441d      	add	r5, r3
 8015c28:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8015c2c:	2820      	cmp	r0, #32
 8015c2e:	dd13      	ble.n	8015c58 <_dtoa_r+0x210>
 8015c30:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8015c34:	9b00      	ldr	r3, [sp, #0]
 8015c36:	fa08 f800 	lsl.w	r8, r8, r0
 8015c3a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8015c3e:	fa23 f000 	lsr.w	r0, r3, r0
 8015c42:	ea48 0000 	orr.w	r0, r8, r0
 8015c46:	f7ea fc6d 	bl	8000524 <__aeabi_ui2d>
 8015c4a:	2301      	movs	r3, #1
 8015c4c:	4682      	mov	sl, r0
 8015c4e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8015c52:	3d01      	subs	r5, #1
 8015c54:	9313      	str	r3, [sp, #76]	; 0x4c
 8015c56:	e772      	b.n	8015b3e <_dtoa_r+0xf6>
 8015c58:	9b00      	ldr	r3, [sp, #0]
 8015c5a:	f1c0 0020 	rsb	r0, r0, #32
 8015c5e:	fa03 f000 	lsl.w	r0, r3, r0
 8015c62:	e7f0      	b.n	8015c46 <_dtoa_r+0x1fe>
 8015c64:	2301      	movs	r3, #1
 8015c66:	e7b1      	b.n	8015bcc <_dtoa_r+0x184>
 8015c68:	900f      	str	r0, [sp, #60]	; 0x3c
 8015c6a:	e7b0      	b.n	8015bce <_dtoa_r+0x186>
 8015c6c:	9b05      	ldr	r3, [sp, #20]
 8015c6e:	eba3 030a 	sub.w	r3, r3, sl
 8015c72:	9305      	str	r3, [sp, #20]
 8015c74:	f1ca 0300 	rsb	r3, sl, #0
 8015c78:	9307      	str	r3, [sp, #28]
 8015c7a:	2300      	movs	r3, #0
 8015c7c:	930e      	str	r3, [sp, #56]	; 0x38
 8015c7e:	e7bb      	b.n	8015bf8 <_dtoa_r+0x1b0>
 8015c80:	2301      	movs	r3, #1
 8015c82:	930a      	str	r3, [sp, #40]	; 0x28
 8015c84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015c86:	2b00      	cmp	r3, #0
 8015c88:	dd59      	ble.n	8015d3e <_dtoa_r+0x2f6>
 8015c8a:	9302      	str	r3, [sp, #8]
 8015c8c:	4699      	mov	r9, r3
 8015c8e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8015c90:	2200      	movs	r2, #0
 8015c92:	6072      	str	r2, [r6, #4]
 8015c94:	2204      	movs	r2, #4
 8015c96:	f102 0014 	add.w	r0, r2, #20
 8015c9a:	4298      	cmp	r0, r3
 8015c9c:	6871      	ldr	r1, [r6, #4]
 8015c9e:	d953      	bls.n	8015d48 <_dtoa_r+0x300>
 8015ca0:	4620      	mov	r0, r4
 8015ca2:	f000 ffe5 	bl	8016c70 <_Balloc>
 8015ca6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015ca8:	6030      	str	r0, [r6, #0]
 8015caa:	f1b9 0f0e 	cmp.w	r9, #14
 8015cae:	f8d3 b000 	ldr.w	fp, [r3]
 8015cb2:	f200 80e6 	bhi.w	8015e82 <_dtoa_r+0x43a>
 8015cb6:	2d00      	cmp	r5, #0
 8015cb8:	f000 80e3 	beq.w	8015e82 <_dtoa_r+0x43a>
 8015cbc:	ed9d 7b00 	vldr	d7, [sp]
 8015cc0:	f1ba 0f00 	cmp.w	sl, #0
 8015cc4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8015cc8:	dd74      	ble.n	8015db4 <_dtoa_r+0x36c>
 8015cca:	4a2a      	ldr	r2, [pc, #168]	; (8015d74 <_dtoa_r+0x32c>)
 8015ccc:	f00a 030f 	and.w	r3, sl, #15
 8015cd0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8015cd4:	ed93 7b00 	vldr	d7, [r3]
 8015cd8:	ea4f 162a 	mov.w	r6, sl, asr #4
 8015cdc:	06f0      	lsls	r0, r6, #27
 8015cde:	ed8d 7b08 	vstr	d7, [sp, #32]
 8015ce2:	d565      	bpl.n	8015db0 <_dtoa_r+0x368>
 8015ce4:	4b24      	ldr	r3, [pc, #144]	; (8015d78 <_dtoa_r+0x330>)
 8015ce6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8015cea:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015cee:	f7ea fdbd 	bl	800086c <__aeabi_ddiv>
 8015cf2:	e9cd 0100 	strd	r0, r1, [sp]
 8015cf6:	f006 060f 	and.w	r6, r6, #15
 8015cfa:	2503      	movs	r5, #3
 8015cfc:	4f1e      	ldr	r7, [pc, #120]	; (8015d78 <_dtoa_r+0x330>)
 8015cfe:	e04c      	b.n	8015d9a <_dtoa_r+0x352>
 8015d00:	2301      	movs	r3, #1
 8015d02:	930a      	str	r3, [sp, #40]	; 0x28
 8015d04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015d06:	4453      	add	r3, sl
 8015d08:	f103 0901 	add.w	r9, r3, #1
 8015d0c:	9302      	str	r3, [sp, #8]
 8015d0e:	464b      	mov	r3, r9
 8015d10:	2b01      	cmp	r3, #1
 8015d12:	bfb8      	it	lt
 8015d14:	2301      	movlt	r3, #1
 8015d16:	e7ba      	b.n	8015c8e <_dtoa_r+0x246>
 8015d18:	2300      	movs	r3, #0
 8015d1a:	e7b2      	b.n	8015c82 <_dtoa_r+0x23a>
 8015d1c:	2300      	movs	r3, #0
 8015d1e:	e7f0      	b.n	8015d02 <_dtoa_r+0x2ba>
 8015d20:	2501      	movs	r5, #1
 8015d22:	2300      	movs	r3, #0
 8015d24:	9306      	str	r3, [sp, #24]
 8015d26:	950a      	str	r5, [sp, #40]	; 0x28
 8015d28:	f04f 33ff 	mov.w	r3, #4294967295
 8015d2c:	9302      	str	r3, [sp, #8]
 8015d2e:	4699      	mov	r9, r3
 8015d30:	2200      	movs	r2, #0
 8015d32:	2312      	movs	r3, #18
 8015d34:	920b      	str	r2, [sp, #44]	; 0x2c
 8015d36:	e7aa      	b.n	8015c8e <_dtoa_r+0x246>
 8015d38:	2301      	movs	r3, #1
 8015d3a:	930a      	str	r3, [sp, #40]	; 0x28
 8015d3c:	e7f4      	b.n	8015d28 <_dtoa_r+0x2e0>
 8015d3e:	2301      	movs	r3, #1
 8015d40:	9302      	str	r3, [sp, #8]
 8015d42:	4699      	mov	r9, r3
 8015d44:	461a      	mov	r2, r3
 8015d46:	e7f5      	b.n	8015d34 <_dtoa_r+0x2ec>
 8015d48:	3101      	adds	r1, #1
 8015d4a:	6071      	str	r1, [r6, #4]
 8015d4c:	0052      	lsls	r2, r2, #1
 8015d4e:	e7a2      	b.n	8015c96 <_dtoa_r+0x24e>
 8015d50:	636f4361 	.word	0x636f4361
 8015d54:	3fd287a7 	.word	0x3fd287a7
 8015d58:	8b60c8b3 	.word	0x8b60c8b3
 8015d5c:	3fc68a28 	.word	0x3fc68a28
 8015d60:	509f79fb 	.word	0x509f79fb
 8015d64:	3fd34413 	.word	0x3fd34413
 8015d68:	7ff00000 	.word	0x7ff00000
 8015d6c:	0801a03c 	.word	0x0801a03c
 8015d70:	3ff80000 	.word	0x3ff80000
 8015d74:	08019f40 	.word	0x08019f40
 8015d78:	08019f18 	.word	0x08019f18
 8015d7c:	08019f09 	.word	0x08019f09
 8015d80:	07f1      	lsls	r1, r6, #31
 8015d82:	d508      	bpl.n	8015d96 <_dtoa_r+0x34e>
 8015d84:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015d88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015d8c:	f7ea fc44 	bl	8000618 <__aeabi_dmul>
 8015d90:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8015d94:	3501      	adds	r5, #1
 8015d96:	1076      	asrs	r6, r6, #1
 8015d98:	3708      	adds	r7, #8
 8015d9a:	2e00      	cmp	r6, #0
 8015d9c:	d1f0      	bne.n	8015d80 <_dtoa_r+0x338>
 8015d9e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015da2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015da6:	f7ea fd61 	bl	800086c <__aeabi_ddiv>
 8015daa:	e9cd 0100 	strd	r0, r1, [sp]
 8015dae:	e01a      	b.n	8015de6 <_dtoa_r+0x39e>
 8015db0:	2502      	movs	r5, #2
 8015db2:	e7a3      	b.n	8015cfc <_dtoa_r+0x2b4>
 8015db4:	f000 80a0 	beq.w	8015ef8 <_dtoa_r+0x4b0>
 8015db8:	f1ca 0600 	rsb	r6, sl, #0
 8015dbc:	4b9f      	ldr	r3, [pc, #636]	; (801603c <_dtoa_r+0x5f4>)
 8015dbe:	4fa0      	ldr	r7, [pc, #640]	; (8016040 <_dtoa_r+0x5f8>)
 8015dc0:	f006 020f 	and.w	r2, r6, #15
 8015dc4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015dcc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8015dd0:	f7ea fc22 	bl	8000618 <__aeabi_dmul>
 8015dd4:	e9cd 0100 	strd	r0, r1, [sp]
 8015dd8:	1136      	asrs	r6, r6, #4
 8015dda:	2300      	movs	r3, #0
 8015ddc:	2502      	movs	r5, #2
 8015dde:	2e00      	cmp	r6, #0
 8015de0:	d17f      	bne.n	8015ee2 <_dtoa_r+0x49a>
 8015de2:	2b00      	cmp	r3, #0
 8015de4:	d1e1      	bne.n	8015daa <_dtoa_r+0x362>
 8015de6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015de8:	2b00      	cmp	r3, #0
 8015dea:	f000 8087 	beq.w	8015efc <_dtoa_r+0x4b4>
 8015dee:	e9dd 6700 	ldrd	r6, r7, [sp]
 8015df2:	2200      	movs	r2, #0
 8015df4:	4b93      	ldr	r3, [pc, #588]	; (8016044 <_dtoa_r+0x5fc>)
 8015df6:	4630      	mov	r0, r6
 8015df8:	4639      	mov	r1, r7
 8015dfa:	f7ea fe7f 	bl	8000afc <__aeabi_dcmplt>
 8015dfe:	2800      	cmp	r0, #0
 8015e00:	d07c      	beq.n	8015efc <_dtoa_r+0x4b4>
 8015e02:	f1b9 0f00 	cmp.w	r9, #0
 8015e06:	d079      	beq.n	8015efc <_dtoa_r+0x4b4>
 8015e08:	9b02      	ldr	r3, [sp, #8]
 8015e0a:	2b00      	cmp	r3, #0
 8015e0c:	dd35      	ble.n	8015e7a <_dtoa_r+0x432>
 8015e0e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8015e12:	9308      	str	r3, [sp, #32]
 8015e14:	4639      	mov	r1, r7
 8015e16:	2200      	movs	r2, #0
 8015e18:	4b8b      	ldr	r3, [pc, #556]	; (8016048 <_dtoa_r+0x600>)
 8015e1a:	4630      	mov	r0, r6
 8015e1c:	f7ea fbfc 	bl	8000618 <__aeabi_dmul>
 8015e20:	e9cd 0100 	strd	r0, r1, [sp]
 8015e24:	9f02      	ldr	r7, [sp, #8]
 8015e26:	3501      	adds	r5, #1
 8015e28:	4628      	mov	r0, r5
 8015e2a:	f7ea fb8b 	bl	8000544 <__aeabi_i2d>
 8015e2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015e32:	f7ea fbf1 	bl	8000618 <__aeabi_dmul>
 8015e36:	2200      	movs	r2, #0
 8015e38:	4b84      	ldr	r3, [pc, #528]	; (801604c <_dtoa_r+0x604>)
 8015e3a:	f7ea fa37 	bl	80002ac <__adddf3>
 8015e3e:	4605      	mov	r5, r0
 8015e40:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8015e44:	2f00      	cmp	r7, #0
 8015e46:	d15d      	bne.n	8015f04 <_dtoa_r+0x4bc>
 8015e48:	2200      	movs	r2, #0
 8015e4a:	4b81      	ldr	r3, [pc, #516]	; (8016050 <_dtoa_r+0x608>)
 8015e4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015e50:	f7ea fa2a 	bl	80002a8 <__aeabi_dsub>
 8015e54:	462a      	mov	r2, r5
 8015e56:	4633      	mov	r3, r6
 8015e58:	e9cd 0100 	strd	r0, r1, [sp]
 8015e5c:	f7ea fe6c 	bl	8000b38 <__aeabi_dcmpgt>
 8015e60:	2800      	cmp	r0, #0
 8015e62:	f040 8288 	bne.w	8016376 <_dtoa_r+0x92e>
 8015e66:	462a      	mov	r2, r5
 8015e68:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8015e6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015e70:	f7ea fe44 	bl	8000afc <__aeabi_dcmplt>
 8015e74:	2800      	cmp	r0, #0
 8015e76:	f040 827c 	bne.w	8016372 <_dtoa_r+0x92a>
 8015e7a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8015e7e:	e9cd 2300 	strd	r2, r3, [sp]
 8015e82:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015e84:	2b00      	cmp	r3, #0
 8015e86:	f2c0 8150 	blt.w	801612a <_dtoa_r+0x6e2>
 8015e8a:	f1ba 0f0e 	cmp.w	sl, #14
 8015e8e:	f300 814c 	bgt.w	801612a <_dtoa_r+0x6e2>
 8015e92:	4b6a      	ldr	r3, [pc, #424]	; (801603c <_dtoa_r+0x5f4>)
 8015e94:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8015e98:	ed93 7b00 	vldr	d7, [r3]
 8015e9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015e9e:	2b00      	cmp	r3, #0
 8015ea0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015ea4:	f280 80d8 	bge.w	8016058 <_dtoa_r+0x610>
 8015ea8:	f1b9 0f00 	cmp.w	r9, #0
 8015eac:	f300 80d4 	bgt.w	8016058 <_dtoa_r+0x610>
 8015eb0:	f040 825e 	bne.w	8016370 <_dtoa_r+0x928>
 8015eb4:	2200      	movs	r2, #0
 8015eb6:	4b66      	ldr	r3, [pc, #408]	; (8016050 <_dtoa_r+0x608>)
 8015eb8:	ec51 0b17 	vmov	r0, r1, d7
 8015ebc:	f7ea fbac 	bl	8000618 <__aeabi_dmul>
 8015ec0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015ec4:	f7ea fe2e 	bl	8000b24 <__aeabi_dcmpge>
 8015ec8:	464f      	mov	r7, r9
 8015eca:	464e      	mov	r6, r9
 8015ecc:	2800      	cmp	r0, #0
 8015ece:	f040 8234 	bne.w	801633a <_dtoa_r+0x8f2>
 8015ed2:	2331      	movs	r3, #49	; 0x31
 8015ed4:	f10b 0501 	add.w	r5, fp, #1
 8015ed8:	f88b 3000 	strb.w	r3, [fp]
 8015edc:	f10a 0a01 	add.w	sl, sl, #1
 8015ee0:	e22f      	b.n	8016342 <_dtoa_r+0x8fa>
 8015ee2:	07f2      	lsls	r2, r6, #31
 8015ee4:	d505      	bpl.n	8015ef2 <_dtoa_r+0x4aa>
 8015ee6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015eea:	f7ea fb95 	bl	8000618 <__aeabi_dmul>
 8015eee:	3501      	adds	r5, #1
 8015ef0:	2301      	movs	r3, #1
 8015ef2:	1076      	asrs	r6, r6, #1
 8015ef4:	3708      	adds	r7, #8
 8015ef6:	e772      	b.n	8015dde <_dtoa_r+0x396>
 8015ef8:	2502      	movs	r5, #2
 8015efa:	e774      	b.n	8015de6 <_dtoa_r+0x39e>
 8015efc:	f8cd a020 	str.w	sl, [sp, #32]
 8015f00:	464f      	mov	r7, r9
 8015f02:	e791      	b.n	8015e28 <_dtoa_r+0x3e0>
 8015f04:	4b4d      	ldr	r3, [pc, #308]	; (801603c <_dtoa_r+0x5f4>)
 8015f06:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8015f0a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8015f0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015f10:	2b00      	cmp	r3, #0
 8015f12:	d047      	beq.n	8015fa4 <_dtoa_r+0x55c>
 8015f14:	4602      	mov	r2, r0
 8015f16:	460b      	mov	r3, r1
 8015f18:	2000      	movs	r0, #0
 8015f1a:	494e      	ldr	r1, [pc, #312]	; (8016054 <_dtoa_r+0x60c>)
 8015f1c:	f7ea fca6 	bl	800086c <__aeabi_ddiv>
 8015f20:	462a      	mov	r2, r5
 8015f22:	4633      	mov	r3, r6
 8015f24:	f7ea f9c0 	bl	80002a8 <__aeabi_dsub>
 8015f28:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8015f2c:	465d      	mov	r5, fp
 8015f2e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015f32:	f7ea fe21 	bl	8000b78 <__aeabi_d2iz>
 8015f36:	4606      	mov	r6, r0
 8015f38:	f7ea fb04 	bl	8000544 <__aeabi_i2d>
 8015f3c:	4602      	mov	r2, r0
 8015f3e:	460b      	mov	r3, r1
 8015f40:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015f44:	f7ea f9b0 	bl	80002a8 <__aeabi_dsub>
 8015f48:	3630      	adds	r6, #48	; 0x30
 8015f4a:	f805 6b01 	strb.w	r6, [r5], #1
 8015f4e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8015f52:	e9cd 0100 	strd	r0, r1, [sp]
 8015f56:	f7ea fdd1 	bl	8000afc <__aeabi_dcmplt>
 8015f5a:	2800      	cmp	r0, #0
 8015f5c:	d163      	bne.n	8016026 <_dtoa_r+0x5de>
 8015f5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015f62:	2000      	movs	r0, #0
 8015f64:	4937      	ldr	r1, [pc, #220]	; (8016044 <_dtoa_r+0x5fc>)
 8015f66:	f7ea f99f 	bl	80002a8 <__aeabi_dsub>
 8015f6a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8015f6e:	f7ea fdc5 	bl	8000afc <__aeabi_dcmplt>
 8015f72:	2800      	cmp	r0, #0
 8015f74:	f040 80b7 	bne.w	80160e6 <_dtoa_r+0x69e>
 8015f78:	eba5 030b 	sub.w	r3, r5, fp
 8015f7c:	429f      	cmp	r7, r3
 8015f7e:	f77f af7c 	ble.w	8015e7a <_dtoa_r+0x432>
 8015f82:	2200      	movs	r2, #0
 8015f84:	4b30      	ldr	r3, [pc, #192]	; (8016048 <_dtoa_r+0x600>)
 8015f86:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8015f8a:	f7ea fb45 	bl	8000618 <__aeabi_dmul>
 8015f8e:	2200      	movs	r2, #0
 8015f90:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8015f94:	4b2c      	ldr	r3, [pc, #176]	; (8016048 <_dtoa_r+0x600>)
 8015f96:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015f9a:	f7ea fb3d 	bl	8000618 <__aeabi_dmul>
 8015f9e:	e9cd 0100 	strd	r0, r1, [sp]
 8015fa2:	e7c4      	b.n	8015f2e <_dtoa_r+0x4e6>
 8015fa4:	462a      	mov	r2, r5
 8015fa6:	4633      	mov	r3, r6
 8015fa8:	f7ea fb36 	bl	8000618 <__aeabi_dmul>
 8015fac:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8015fb0:	eb0b 0507 	add.w	r5, fp, r7
 8015fb4:	465e      	mov	r6, fp
 8015fb6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015fba:	f7ea fddd 	bl	8000b78 <__aeabi_d2iz>
 8015fbe:	4607      	mov	r7, r0
 8015fc0:	f7ea fac0 	bl	8000544 <__aeabi_i2d>
 8015fc4:	3730      	adds	r7, #48	; 0x30
 8015fc6:	4602      	mov	r2, r0
 8015fc8:	460b      	mov	r3, r1
 8015fca:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015fce:	f7ea f96b 	bl	80002a8 <__aeabi_dsub>
 8015fd2:	f806 7b01 	strb.w	r7, [r6], #1
 8015fd6:	42ae      	cmp	r6, r5
 8015fd8:	e9cd 0100 	strd	r0, r1, [sp]
 8015fdc:	f04f 0200 	mov.w	r2, #0
 8015fe0:	d126      	bne.n	8016030 <_dtoa_r+0x5e8>
 8015fe2:	4b1c      	ldr	r3, [pc, #112]	; (8016054 <_dtoa_r+0x60c>)
 8015fe4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8015fe8:	f7ea f960 	bl	80002ac <__adddf3>
 8015fec:	4602      	mov	r2, r0
 8015fee:	460b      	mov	r3, r1
 8015ff0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015ff4:	f7ea fda0 	bl	8000b38 <__aeabi_dcmpgt>
 8015ff8:	2800      	cmp	r0, #0
 8015ffa:	d174      	bne.n	80160e6 <_dtoa_r+0x69e>
 8015ffc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8016000:	2000      	movs	r0, #0
 8016002:	4914      	ldr	r1, [pc, #80]	; (8016054 <_dtoa_r+0x60c>)
 8016004:	f7ea f950 	bl	80002a8 <__aeabi_dsub>
 8016008:	4602      	mov	r2, r0
 801600a:	460b      	mov	r3, r1
 801600c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016010:	f7ea fd74 	bl	8000afc <__aeabi_dcmplt>
 8016014:	2800      	cmp	r0, #0
 8016016:	f43f af30 	beq.w	8015e7a <_dtoa_r+0x432>
 801601a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801601e:	2b30      	cmp	r3, #48	; 0x30
 8016020:	f105 32ff 	add.w	r2, r5, #4294967295
 8016024:	d002      	beq.n	801602c <_dtoa_r+0x5e4>
 8016026:	f8dd a020 	ldr.w	sl, [sp, #32]
 801602a:	e04a      	b.n	80160c2 <_dtoa_r+0x67a>
 801602c:	4615      	mov	r5, r2
 801602e:	e7f4      	b.n	801601a <_dtoa_r+0x5d2>
 8016030:	4b05      	ldr	r3, [pc, #20]	; (8016048 <_dtoa_r+0x600>)
 8016032:	f7ea faf1 	bl	8000618 <__aeabi_dmul>
 8016036:	e9cd 0100 	strd	r0, r1, [sp]
 801603a:	e7bc      	b.n	8015fb6 <_dtoa_r+0x56e>
 801603c:	08019f40 	.word	0x08019f40
 8016040:	08019f18 	.word	0x08019f18
 8016044:	3ff00000 	.word	0x3ff00000
 8016048:	40240000 	.word	0x40240000
 801604c:	401c0000 	.word	0x401c0000
 8016050:	40140000 	.word	0x40140000
 8016054:	3fe00000 	.word	0x3fe00000
 8016058:	e9dd 6700 	ldrd	r6, r7, [sp]
 801605c:	465d      	mov	r5, fp
 801605e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016062:	4630      	mov	r0, r6
 8016064:	4639      	mov	r1, r7
 8016066:	f7ea fc01 	bl	800086c <__aeabi_ddiv>
 801606a:	f7ea fd85 	bl	8000b78 <__aeabi_d2iz>
 801606e:	4680      	mov	r8, r0
 8016070:	f7ea fa68 	bl	8000544 <__aeabi_i2d>
 8016074:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016078:	f7ea face 	bl	8000618 <__aeabi_dmul>
 801607c:	4602      	mov	r2, r0
 801607e:	460b      	mov	r3, r1
 8016080:	4630      	mov	r0, r6
 8016082:	4639      	mov	r1, r7
 8016084:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8016088:	f7ea f90e 	bl	80002a8 <__aeabi_dsub>
 801608c:	f805 6b01 	strb.w	r6, [r5], #1
 8016090:	eba5 060b 	sub.w	r6, r5, fp
 8016094:	45b1      	cmp	r9, r6
 8016096:	4602      	mov	r2, r0
 8016098:	460b      	mov	r3, r1
 801609a:	d139      	bne.n	8016110 <_dtoa_r+0x6c8>
 801609c:	f7ea f906 	bl	80002ac <__adddf3>
 80160a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80160a4:	4606      	mov	r6, r0
 80160a6:	460f      	mov	r7, r1
 80160a8:	f7ea fd46 	bl	8000b38 <__aeabi_dcmpgt>
 80160ac:	b9c8      	cbnz	r0, 80160e2 <_dtoa_r+0x69a>
 80160ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80160b2:	4630      	mov	r0, r6
 80160b4:	4639      	mov	r1, r7
 80160b6:	f7ea fd17 	bl	8000ae8 <__aeabi_dcmpeq>
 80160ba:	b110      	cbz	r0, 80160c2 <_dtoa_r+0x67a>
 80160bc:	f018 0f01 	tst.w	r8, #1
 80160c0:	d10f      	bne.n	80160e2 <_dtoa_r+0x69a>
 80160c2:	9904      	ldr	r1, [sp, #16]
 80160c4:	4620      	mov	r0, r4
 80160c6:	f000 fe07 	bl	8016cd8 <_Bfree>
 80160ca:	2300      	movs	r3, #0
 80160cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80160ce:	702b      	strb	r3, [r5, #0]
 80160d0:	f10a 0301 	add.w	r3, sl, #1
 80160d4:	6013      	str	r3, [r2, #0]
 80160d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80160d8:	2b00      	cmp	r3, #0
 80160da:	f000 8241 	beq.w	8016560 <_dtoa_r+0xb18>
 80160de:	601d      	str	r5, [r3, #0]
 80160e0:	e23e      	b.n	8016560 <_dtoa_r+0xb18>
 80160e2:	f8cd a020 	str.w	sl, [sp, #32]
 80160e6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80160ea:	2a39      	cmp	r2, #57	; 0x39
 80160ec:	f105 33ff 	add.w	r3, r5, #4294967295
 80160f0:	d108      	bne.n	8016104 <_dtoa_r+0x6bc>
 80160f2:	459b      	cmp	fp, r3
 80160f4:	d10a      	bne.n	801610c <_dtoa_r+0x6c4>
 80160f6:	9b08      	ldr	r3, [sp, #32]
 80160f8:	3301      	adds	r3, #1
 80160fa:	9308      	str	r3, [sp, #32]
 80160fc:	2330      	movs	r3, #48	; 0x30
 80160fe:	f88b 3000 	strb.w	r3, [fp]
 8016102:	465b      	mov	r3, fp
 8016104:	781a      	ldrb	r2, [r3, #0]
 8016106:	3201      	adds	r2, #1
 8016108:	701a      	strb	r2, [r3, #0]
 801610a:	e78c      	b.n	8016026 <_dtoa_r+0x5de>
 801610c:	461d      	mov	r5, r3
 801610e:	e7ea      	b.n	80160e6 <_dtoa_r+0x69e>
 8016110:	2200      	movs	r2, #0
 8016112:	4b9b      	ldr	r3, [pc, #620]	; (8016380 <_dtoa_r+0x938>)
 8016114:	f7ea fa80 	bl	8000618 <__aeabi_dmul>
 8016118:	2200      	movs	r2, #0
 801611a:	2300      	movs	r3, #0
 801611c:	4606      	mov	r6, r0
 801611e:	460f      	mov	r7, r1
 8016120:	f7ea fce2 	bl	8000ae8 <__aeabi_dcmpeq>
 8016124:	2800      	cmp	r0, #0
 8016126:	d09a      	beq.n	801605e <_dtoa_r+0x616>
 8016128:	e7cb      	b.n	80160c2 <_dtoa_r+0x67a>
 801612a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801612c:	2a00      	cmp	r2, #0
 801612e:	f000 808b 	beq.w	8016248 <_dtoa_r+0x800>
 8016132:	9a06      	ldr	r2, [sp, #24]
 8016134:	2a01      	cmp	r2, #1
 8016136:	dc6e      	bgt.n	8016216 <_dtoa_r+0x7ce>
 8016138:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801613a:	2a00      	cmp	r2, #0
 801613c:	d067      	beq.n	801620e <_dtoa_r+0x7c6>
 801613e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8016142:	9f07      	ldr	r7, [sp, #28]
 8016144:	9d05      	ldr	r5, [sp, #20]
 8016146:	9a05      	ldr	r2, [sp, #20]
 8016148:	2101      	movs	r1, #1
 801614a:	441a      	add	r2, r3
 801614c:	4620      	mov	r0, r4
 801614e:	9205      	str	r2, [sp, #20]
 8016150:	4498      	add	r8, r3
 8016152:	f000 fe9f 	bl	8016e94 <__i2b>
 8016156:	4606      	mov	r6, r0
 8016158:	2d00      	cmp	r5, #0
 801615a:	dd0c      	ble.n	8016176 <_dtoa_r+0x72e>
 801615c:	f1b8 0f00 	cmp.w	r8, #0
 8016160:	dd09      	ble.n	8016176 <_dtoa_r+0x72e>
 8016162:	4545      	cmp	r5, r8
 8016164:	9a05      	ldr	r2, [sp, #20]
 8016166:	462b      	mov	r3, r5
 8016168:	bfa8      	it	ge
 801616a:	4643      	movge	r3, r8
 801616c:	1ad2      	subs	r2, r2, r3
 801616e:	9205      	str	r2, [sp, #20]
 8016170:	1aed      	subs	r5, r5, r3
 8016172:	eba8 0803 	sub.w	r8, r8, r3
 8016176:	9b07      	ldr	r3, [sp, #28]
 8016178:	b1eb      	cbz	r3, 80161b6 <_dtoa_r+0x76e>
 801617a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801617c:	2b00      	cmp	r3, #0
 801617e:	d067      	beq.n	8016250 <_dtoa_r+0x808>
 8016180:	b18f      	cbz	r7, 80161a6 <_dtoa_r+0x75e>
 8016182:	4631      	mov	r1, r6
 8016184:	463a      	mov	r2, r7
 8016186:	4620      	mov	r0, r4
 8016188:	f000 ff24 	bl	8016fd4 <__pow5mult>
 801618c:	9a04      	ldr	r2, [sp, #16]
 801618e:	4601      	mov	r1, r0
 8016190:	4606      	mov	r6, r0
 8016192:	4620      	mov	r0, r4
 8016194:	f000 fe87 	bl	8016ea6 <__multiply>
 8016198:	9904      	ldr	r1, [sp, #16]
 801619a:	9008      	str	r0, [sp, #32]
 801619c:	4620      	mov	r0, r4
 801619e:	f000 fd9b 	bl	8016cd8 <_Bfree>
 80161a2:	9b08      	ldr	r3, [sp, #32]
 80161a4:	9304      	str	r3, [sp, #16]
 80161a6:	9b07      	ldr	r3, [sp, #28]
 80161a8:	1bda      	subs	r2, r3, r7
 80161aa:	d004      	beq.n	80161b6 <_dtoa_r+0x76e>
 80161ac:	9904      	ldr	r1, [sp, #16]
 80161ae:	4620      	mov	r0, r4
 80161b0:	f000 ff10 	bl	8016fd4 <__pow5mult>
 80161b4:	9004      	str	r0, [sp, #16]
 80161b6:	2101      	movs	r1, #1
 80161b8:	4620      	mov	r0, r4
 80161ba:	f000 fe6b 	bl	8016e94 <__i2b>
 80161be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80161c0:	4607      	mov	r7, r0
 80161c2:	2b00      	cmp	r3, #0
 80161c4:	f000 81d0 	beq.w	8016568 <_dtoa_r+0xb20>
 80161c8:	461a      	mov	r2, r3
 80161ca:	4601      	mov	r1, r0
 80161cc:	4620      	mov	r0, r4
 80161ce:	f000 ff01 	bl	8016fd4 <__pow5mult>
 80161d2:	9b06      	ldr	r3, [sp, #24]
 80161d4:	2b01      	cmp	r3, #1
 80161d6:	4607      	mov	r7, r0
 80161d8:	dc40      	bgt.n	801625c <_dtoa_r+0x814>
 80161da:	9b00      	ldr	r3, [sp, #0]
 80161dc:	2b00      	cmp	r3, #0
 80161de:	d139      	bne.n	8016254 <_dtoa_r+0x80c>
 80161e0:	9b01      	ldr	r3, [sp, #4]
 80161e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80161e6:	2b00      	cmp	r3, #0
 80161e8:	d136      	bne.n	8016258 <_dtoa_r+0x810>
 80161ea:	9b01      	ldr	r3, [sp, #4]
 80161ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80161f0:	0d1b      	lsrs	r3, r3, #20
 80161f2:	051b      	lsls	r3, r3, #20
 80161f4:	b12b      	cbz	r3, 8016202 <_dtoa_r+0x7ba>
 80161f6:	9b05      	ldr	r3, [sp, #20]
 80161f8:	3301      	adds	r3, #1
 80161fa:	9305      	str	r3, [sp, #20]
 80161fc:	f108 0801 	add.w	r8, r8, #1
 8016200:	2301      	movs	r3, #1
 8016202:	9307      	str	r3, [sp, #28]
 8016204:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016206:	2b00      	cmp	r3, #0
 8016208:	d12a      	bne.n	8016260 <_dtoa_r+0x818>
 801620a:	2001      	movs	r0, #1
 801620c:	e030      	b.n	8016270 <_dtoa_r+0x828>
 801620e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016210:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8016214:	e795      	b.n	8016142 <_dtoa_r+0x6fa>
 8016216:	9b07      	ldr	r3, [sp, #28]
 8016218:	f109 37ff 	add.w	r7, r9, #4294967295
 801621c:	42bb      	cmp	r3, r7
 801621e:	bfbf      	itttt	lt
 8016220:	9b07      	ldrlt	r3, [sp, #28]
 8016222:	9707      	strlt	r7, [sp, #28]
 8016224:	1afa      	sublt	r2, r7, r3
 8016226:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8016228:	bfbb      	ittet	lt
 801622a:	189b      	addlt	r3, r3, r2
 801622c:	930e      	strlt	r3, [sp, #56]	; 0x38
 801622e:	1bdf      	subge	r7, r3, r7
 8016230:	2700      	movlt	r7, #0
 8016232:	f1b9 0f00 	cmp.w	r9, #0
 8016236:	bfb5      	itete	lt
 8016238:	9b05      	ldrlt	r3, [sp, #20]
 801623a:	9d05      	ldrge	r5, [sp, #20]
 801623c:	eba3 0509 	sublt.w	r5, r3, r9
 8016240:	464b      	movge	r3, r9
 8016242:	bfb8      	it	lt
 8016244:	2300      	movlt	r3, #0
 8016246:	e77e      	b.n	8016146 <_dtoa_r+0x6fe>
 8016248:	9f07      	ldr	r7, [sp, #28]
 801624a:	9d05      	ldr	r5, [sp, #20]
 801624c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801624e:	e783      	b.n	8016158 <_dtoa_r+0x710>
 8016250:	9a07      	ldr	r2, [sp, #28]
 8016252:	e7ab      	b.n	80161ac <_dtoa_r+0x764>
 8016254:	2300      	movs	r3, #0
 8016256:	e7d4      	b.n	8016202 <_dtoa_r+0x7ba>
 8016258:	9b00      	ldr	r3, [sp, #0]
 801625a:	e7d2      	b.n	8016202 <_dtoa_r+0x7ba>
 801625c:	2300      	movs	r3, #0
 801625e:	9307      	str	r3, [sp, #28]
 8016260:	693b      	ldr	r3, [r7, #16]
 8016262:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8016266:	6918      	ldr	r0, [r3, #16]
 8016268:	f000 fdc6 	bl	8016df8 <__hi0bits>
 801626c:	f1c0 0020 	rsb	r0, r0, #32
 8016270:	4440      	add	r0, r8
 8016272:	f010 001f 	ands.w	r0, r0, #31
 8016276:	d047      	beq.n	8016308 <_dtoa_r+0x8c0>
 8016278:	f1c0 0320 	rsb	r3, r0, #32
 801627c:	2b04      	cmp	r3, #4
 801627e:	dd3b      	ble.n	80162f8 <_dtoa_r+0x8b0>
 8016280:	9b05      	ldr	r3, [sp, #20]
 8016282:	f1c0 001c 	rsb	r0, r0, #28
 8016286:	4403      	add	r3, r0
 8016288:	9305      	str	r3, [sp, #20]
 801628a:	4405      	add	r5, r0
 801628c:	4480      	add	r8, r0
 801628e:	9b05      	ldr	r3, [sp, #20]
 8016290:	2b00      	cmp	r3, #0
 8016292:	dd05      	ble.n	80162a0 <_dtoa_r+0x858>
 8016294:	461a      	mov	r2, r3
 8016296:	9904      	ldr	r1, [sp, #16]
 8016298:	4620      	mov	r0, r4
 801629a:	f000 fee9 	bl	8017070 <__lshift>
 801629e:	9004      	str	r0, [sp, #16]
 80162a0:	f1b8 0f00 	cmp.w	r8, #0
 80162a4:	dd05      	ble.n	80162b2 <_dtoa_r+0x86a>
 80162a6:	4639      	mov	r1, r7
 80162a8:	4642      	mov	r2, r8
 80162aa:	4620      	mov	r0, r4
 80162ac:	f000 fee0 	bl	8017070 <__lshift>
 80162b0:	4607      	mov	r7, r0
 80162b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80162b4:	b353      	cbz	r3, 801630c <_dtoa_r+0x8c4>
 80162b6:	4639      	mov	r1, r7
 80162b8:	9804      	ldr	r0, [sp, #16]
 80162ba:	f000 ff2d 	bl	8017118 <__mcmp>
 80162be:	2800      	cmp	r0, #0
 80162c0:	da24      	bge.n	801630c <_dtoa_r+0x8c4>
 80162c2:	2300      	movs	r3, #0
 80162c4:	220a      	movs	r2, #10
 80162c6:	9904      	ldr	r1, [sp, #16]
 80162c8:	4620      	mov	r0, r4
 80162ca:	f000 fd1c 	bl	8016d06 <__multadd>
 80162ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80162d0:	9004      	str	r0, [sp, #16]
 80162d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80162d6:	2b00      	cmp	r3, #0
 80162d8:	f000 814d 	beq.w	8016576 <_dtoa_r+0xb2e>
 80162dc:	2300      	movs	r3, #0
 80162de:	4631      	mov	r1, r6
 80162e0:	220a      	movs	r2, #10
 80162e2:	4620      	mov	r0, r4
 80162e4:	f000 fd0f 	bl	8016d06 <__multadd>
 80162e8:	9b02      	ldr	r3, [sp, #8]
 80162ea:	2b00      	cmp	r3, #0
 80162ec:	4606      	mov	r6, r0
 80162ee:	dc4f      	bgt.n	8016390 <_dtoa_r+0x948>
 80162f0:	9b06      	ldr	r3, [sp, #24]
 80162f2:	2b02      	cmp	r3, #2
 80162f4:	dd4c      	ble.n	8016390 <_dtoa_r+0x948>
 80162f6:	e011      	b.n	801631c <_dtoa_r+0x8d4>
 80162f8:	d0c9      	beq.n	801628e <_dtoa_r+0x846>
 80162fa:	9a05      	ldr	r2, [sp, #20]
 80162fc:	331c      	adds	r3, #28
 80162fe:	441a      	add	r2, r3
 8016300:	9205      	str	r2, [sp, #20]
 8016302:	441d      	add	r5, r3
 8016304:	4498      	add	r8, r3
 8016306:	e7c2      	b.n	801628e <_dtoa_r+0x846>
 8016308:	4603      	mov	r3, r0
 801630a:	e7f6      	b.n	80162fa <_dtoa_r+0x8b2>
 801630c:	f1b9 0f00 	cmp.w	r9, #0
 8016310:	dc38      	bgt.n	8016384 <_dtoa_r+0x93c>
 8016312:	9b06      	ldr	r3, [sp, #24]
 8016314:	2b02      	cmp	r3, #2
 8016316:	dd35      	ble.n	8016384 <_dtoa_r+0x93c>
 8016318:	f8cd 9008 	str.w	r9, [sp, #8]
 801631c:	9b02      	ldr	r3, [sp, #8]
 801631e:	b963      	cbnz	r3, 801633a <_dtoa_r+0x8f2>
 8016320:	4639      	mov	r1, r7
 8016322:	2205      	movs	r2, #5
 8016324:	4620      	mov	r0, r4
 8016326:	f000 fcee 	bl	8016d06 <__multadd>
 801632a:	4601      	mov	r1, r0
 801632c:	4607      	mov	r7, r0
 801632e:	9804      	ldr	r0, [sp, #16]
 8016330:	f000 fef2 	bl	8017118 <__mcmp>
 8016334:	2800      	cmp	r0, #0
 8016336:	f73f adcc 	bgt.w	8015ed2 <_dtoa_r+0x48a>
 801633a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801633c:	465d      	mov	r5, fp
 801633e:	ea6f 0a03 	mvn.w	sl, r3
 8016342:	f04f 0900 	mov.w	r9, #0
 8016346:	4639      	mov	r1, r7
 8016348:	4620      	mov	r0, r4
 801634a:	f000 fcc5 	bl	8016cd8 <_Bfree>
 801634e:	2e00      	cmp	r6, #0
 8016350:	f43f aeb7 	beq.w	80160c2 <_dtoa_r+0x67a>
 8016354:	f1b9 0f00 	cmp.w	r9, #0
 8016358:	d005      	beq.n	8016366 <_dtoa_r+0x91e>
 801635a:	45b1      	cmp	r9, r6
 801635c:	d003      	beq.n	8016366 <_dtoa_r+0x91e>
 801635e:	4649      	mov	r1, r9
 8016360:	4620      	mov	r0, r4
 8016362:	f000 fcb9 	bl	8016cd8 <_Bfree>
 8016366:	4631      	mov	r1, r6
 8016368:	4620      	mov	r0, r4
 801636a:	f000 fcb5 	bl	8016cd8 <_Bfree>
 801636e:	e6a8      	b.n	80160c2 <_dtoa_r+0x67a>
 8016370:	2700      	movs	r7, #0
 8016372:	463e      	mov	r6, r7
 8016374:	e7e1      	b.n	801633a <_dtoa_r+0x8f2>
 8016376:	f8dd a020 	ldr.w	sl, [sp, #32]
 801637a:	463e      	mov	r6, r7
 801637c:	e5a9      	b.n	8015ed2 <_dtoa_r+0x48a>
 801637e:	bf00      	nop
 8016380:	40240000 	.word	0x40240000
 8016384:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016386:	f8cd 9008 	str.w	r9, [sp, #8]
 801638a:	2b00      	cmp	r3, #0
 801638c:	f000 80fa 	beq.w	8016584 <_dtoa_r+0xb3c>
 8016390:	2d00      	cmp	r5, #0
 8016392:	dd05      	ble.n	80163a0 <_dtoa_r+0x958>
 8016394:	4631      	mov	r1, r6
 8016396:	462a      	mov	r2, r5
 8016398:	4620      	mov	r0, r4
 801639a:	f000 fe69 	bl	8017070 <__lshift>
 801639e:	4606      	mov	r6, r0
 80163a0:	9b07      	ldr	r3, [sp, #28]
 80163a2:	2b00      	cmp	r3, #0
 80163a4:	d04c      	beq.n	8016440 <_dtoa_r+0x9f8>
 80163a6:	6871      	ldr	r1, [r6, #4]
 80163a8:	4620      	mov	r0, r4
 80163aa:	f000 fc61 	bl	8016c70 <_Balloc>
 80163ae:	6932      	ldr	r2, [r6, #16]
 80163b0:	3202      	adds	r2, #2
 80163b2:	4605      	mov	r5, r0
 80163b4:	0092      	lsls	r2, r2, #2
 80163b6:	f106 010c 	add.w	r1, r6, #12
 80163ba:	300c      	adds	r0, #12
 80163bc:	f7fd fc50 	bl	8013c60 <memcpy>
 80163c0:	2201      	movs	r2, #1
 80163c2:	4629      	mov	r1, r5
 80163c4:	4620      	mov	r0, r4
 80163c6:	f000 fe53 	bl	8017070 <__lshift>
 80163ca:	9b00      	ldr	r3, [sp, #0]
 80163cc:	f8cd b014 	str.w	fp, [sp, #20]
 80163d0:	f003 0301 	and.w	r3, r3, #1
 80163d4:	46b1      	mov	r9, r6
 80163d6:	9307      	str	r3, [sp, #28]
 80163d8:	4606      	mov	r6, r0
 80163da:	4639      	mov	r1, r7
 80163dc:	9804      	ldr	r0, [sp, #16]
 80163de:	f7ff faa5 	bl	801592c <quorem>
 80163e2:	4649      	mov	r1, r9
 80163e4:	4605      	mov	r5, r0
 80163e6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80163ea:	9804      	ldr	r0, [sp, #16]
 80163ec:	f000 fe94 	bl	8017118 <__mcmp>
 80163f0:	4632      	mov	r2, r6
 80163f2:	9000      	str	r0, [sp, #0]
 80163f4:	4639      	mov	r1, r7
 80163f6:	4620      	mov	r0, r4
 80163f8:	f000 fea8 	bl	801714c <__mdiff>
 80163fc:	68c3      	ldr	r3, [r0, #12]
 80163fe:	4602      	mov	r2, r0
 8016400:	bb03      	cbnz	r3, 8016444 <_dtoa_r+0x9fc>
 8016402:	4601      	mov	r1, r0
 8016404:	9008      	str	r0, [sp, #32]
 8016406:	9804      	ldr	r0, [sp, #16]
 8016408:	f000 fe86 	bl	8017118 <__mcmp>
 801640c:	9a08      	ldr	r2, [sp, #32]
 801640e:	4603      	mov	r3, r0
 8016410:	4611      	mov	r1, r2
 8016412:	4620      	mov	r0, r4
 8016414:	9308      	str	r3, [sp, #32]
 8016416:	f000 fc5f 	bl	8016cd8 <_Bfree>
 801641a:	9b08      	ldr	r3, [sp, #32]
 801641c:	b9a3      	cbnz	r3, 8016448 <_dtoa_r+0xa00>
 801641e:	9a06      	ldr	r2, [sp, #24]
 8016420:	b992      	cbnz	r2, 8016448 <_dtoa_r+0xa00>
 8016422:	9a07      	ldr	r2, [sp, #28]
 8016424:	b982      	cbnz	r2, 8016448 <_dtoa_r+0xa00>
 8016426:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801642a:	d029      	beq.n	8016480 <_dtoa_r+0xa38>
 801642c:	9b00      	ldr	r3, [sp, #0]
 801642e:	2b00      	cmp	r3, #0
 8016430:	dd01      	ble.n	8016436 <_dtoa_r+0x9ee>
 8016432:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8016436:	9b05      	ldr	r3, [sp, #20]
 8016438:	1c5d      	adds	r5, r3, #1
 801643a:	f883 8000 	strb.w	r8, [r3]
 801643e:	e782      	b.n	8016346 <_dtoa_r+0x8fe>
 8016440:	4630      	mov	r0, r6
 8016442:	e7c2      	b.n	80163ca <_dtoa_r+0x982>
 8016444:	2301      	movs	r3, #1
 8016446:	e7e3      	b.n	8016410 <_dtoa_r+0x9c8>
 8016448:	9a00      	ldr	r2, [sp, #0]
 801644a:	2a00      	cmp	r2, #0
 801644c:	db04      	blt.n	8016458 <_dtoa_r+0xa10>
 801644e:	d125      	bne.n	801649c <_dtoa_r+0xa54>
 8016450:	9a06      	ldr	r2, [sp, #24]
 8016452:	bb1a      	cbnz	r2, 801649c <_dtoa_r+0xa54>
 8016454:	9a07      	ldr	r2, [sp, #28]
 8016456:	bb0a      	cbnz	r2, 801649c <_dtoa_r+0xa54>
 8016458:	2b00      	cmp	r3, #0
 801645a:	ddec      	ble.n	8016436 <_dtoa_r+0x9ee>
 801645c:	2201      	movs	r2, #1
 801645e:	9904      	ldr	r1, [sp, #16]
 8016460:	4620      	mov	r0, r4
 8016462:	f000 fe05 	bl	8017070 <__lshift>
 8016466:	4639      	mov	r1, r7
 8016468:	9004      	str	r0, [sp, #16]
 801646a:	f000 fe55 	bl	8017118 <__mcmp>
 801646e:	2800      	cmp	r0, #0
 8016470:	dc03      	bgt.n	801647a <_dtoa_r+0xa32>
 8016472:	d1e0      	bne.n	8016436 <_dtoa_r+0x9ee>
 8016474:	f018 0f01 	tst.w	r8, #1
 8016478:	d0dd      	beq.n	8016436 <_dtoa_r+0x9ee>
 801647a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801647e:	d1d8      	bne.n	8016432 <_dtoa_r+0x9ea>
 8016480:	9b05      	ldr	r3, [sp, #20]
 8016482:	9a05      	ldr	r2, [sp, #20]
 8016484:	1c5d      	adds	r5, r3, #1
 8016486:	2339      	movs	r3, #57	; 0x39
 8016488:	7013      	strb	r3, [r2, #0]
 801648a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801648e:	2b39      	cmp	r3, #57	; 0x39
 8016490:	f105 32ff 	add.w	r2, r5, #4294967295
 8016494:	d04f      	beq.n	8016536 <_dtoa_r+0xaee>
 8016496:	3301      	adds	r3, #1
 8016498:	7013      	strb	r3, [r2, #0]
 801649a:	e754      	b.n	8016346 <_dtoa_r+0x8fe>
 801649c:	9a05      	ldr	r2, [sp, #20]
 801649e:	2b00      	cmp	r3, #0
 80164a0:	f102 0501 	add.w	r5, r2, #1
 80164a4:	dd06      	ble.n	80164b4 <_dtoa_r+0xa6c>
 80164a6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80164aa:	d0e9      	beq.n	8016480 <_dtoa_r+0xa38>
 80164ac:	f108 0801 	add.w	r8, r8, #1
 80164b0:	9b05      	ldr	r3, [sp, #20]
 80164b2:	e7c2      	b.n	801643a <_dtoa_r+0x9f2>
 80164b4:	9a02      	ldr	r2, [sp, #8]
 80164b6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80164ba:	eba5 030b 	sub.w	r3, r5, fp
 80164be:	4293      	cmp	r3, r2
 80164c0:	d021      	beq.n	8016506 <_dtoa_r+0xabe>
 80164c2:	2300      	movs	r3, #0
 80164c4:	220a      	movs	r2, #10
 80164c6:	9904      	ldr	r1, [sp, #16]
 80164c8:	4620      	mov	r0, r4
 80164ca:	f000 fc1c 	bl	8016d06 <__multadd>
 80164ce:	45b1      	cmp	r9, r6
 80164d0:	9004      	str	r0, [sp, #16]
 80164d2:	f04f 0300 	mov.w	r3, #0
 80164d6:	f04f 020a 	mov.w	r2, #10
 80164da:	4649      	mov	r1, r9
 80164dc:	4620      	mov	r0, r4
 80164de:	d105      	bne.n	80164ec <_dtoa_r+0xaa4>
 80164e0:	f000 fc11 	bl	8016d06 <__multadd>
 80164e4:	4681      	mov	r9, r0
 80164e6:	4606      	mov	r6, r0
 80164e8:	9505      	str	r5, [sp, #20]
 80164ea:	e776      	b.n	80163da <_dtoa_r+0x992>
 80164ec:	f000 fc0b 	bl	8016d06 <__multadd>
 80164f0:	4631      	mov	r1, r6
 80164f2:	4681      	mov	r9, r0
 80164f4:	2300      	movs	r3, #0
 80164f6:	220a      	movs	r2, #10
 80164f8:	4620      	mov	r0, r4
 80164fa:	f000 fc04 	bl	8016d06 <__multadd>
 80164fe:	4606      	mov	r6, r0
 8016500:	e7f2      	b.n	80164e8 <_dtoa_r+0xaa0>
 8016502:	f04f 0900 	mov.w	r9, #0
 8016506:	2201      	movs	r2, #1
 8016508:	9904      	ldr	r1, [sp, #16]
 801650a:	4620      	mov	r0, r4
 801650c:	f000 fdb0 	bl	8017070 <__lshift>
 8016510:	4639      	mov	r1, r7
 8016512:	9004      	str	r0, [sp, #16]
 8016514:	f000 fe00 	bl	8017118 <__mcmp>
 8016518:	2800      	cmp	r0, #0
 801651a:	dcb6      	bgt.n	801648a <_dtoa_r+0xa42>
 801651c:	d102      	bne.n	8016524 <_dtoa_r+0xadc>
 801651e:	f018 0f01 	tst.w	r8, #1
 8016522:	d1b2      	bne.n	801648a <_dtoa_r+0xa42>
 8016524:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8016528:	2b30      	cmp	r3, #48	; 0x30
 801652a:	f105 32ff 	add.w	r2, r5, #4294967295
 801652e:	f47f af0a 	bne.w	8016346 <_dtoa_r+0x8fe>
 8016532:	4615      	mov	r5, r2
 8016534:	e7f6      	b.n	8016524 <_dtoa_r+0xadc>
 8016536:	4593      	cmp	fp, r2
 8016538:	d105      	bne.n	8016546 <_dtoa_r+0xafe>
 801653a:	2331      	movs	r3, #49	; 0x31
 801653c:	f10a 0a01 	add.w	sl, sl, #1
 8016540:	f88b 3000 	strb.w	r3, [fp]
 8016544:	e6ff      	b.n	8016346 <_dtoa_r+0x8fe>
 8016546:	4615      	mov	r5, r2
 8016548:	e79f      	b.n	801648a <_dtoa_r+0xa42>
 801654a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80165b0 <_dtoa_r+0xb68>
 801654e:	e007      	b.n	8016560 <_dtoa_r+0xb18>
 8016550:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016552:	f8df b060 	ldr.w	fp, [pc, #96]	; 80165b4 <_dtoa_r+0xb6c>
 8016556:	b11b      	cbz	r3, 8016560 <_dtoa_r+0xb18>
 8016558:	f10b 0308 	add.w	r3, fp, #8
 801655c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801655e:	6013      	str	r3, [r2, #0]
 8016560:	4658      	mov	r0, fp
 8016562:	b017      	add	sp, #92	; 0x5c
 8016564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016568:	9b06      	ldr	r3, [sp, #24]
 801656a:	2b01      	cmp	r3, #1
 801656c:	f77f ae35 	ble.w	80161da <_dtoa_r+0x792>
 8016570:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016572:	9307      	str	r3, [sp, #28]
 8016574:	e649      	b.n	801620a <_dtoa_r+0x7c2>
 8016576:	9b02      	ldr	r3, [sp, #8]
 8016578:	2b00      	cmp	r3, #0
 801657a:	dc03      	bgt.n	8016584 <_dtoa_r+0xb3c>
 801657c:	9b06      	ldr	r3, [sp, #24]
 801657e:	2b02      	cmp	r3, #2
 8016580:	f73f aecc 	bgt.w	801631c <_dtoa_r+0x8d4>
 8016584:	465d      	mov	r5, fp
 8016586:	4639      	mov	r1, r7
 8016588:	9804      	ldr	r0, [sp, #16]
 801658a:	f7ff f9cf 	bl	801592c <quorem>
 801658e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8016592:	f805 8b01 	strb.w	r8, [r5], #1
 8016596:	9a02      	ldr	r2, [sp, #8]
 8016598:	eba5 030b 	sub.w	r3, r5, fp
 801659c:	429a      	cmp	r2, r3
 801659e:	ddb0      	ble.n	8016502 <_dtoa_r+0xaba>
 80165a0:	2300      	movs	r3, #0
 80165a2:	220a      	movs	r2, #10
 80165a4:	9904      	ldr	r1, [sp, #16]
 80165a6:	4620      	mov	r0, r4
 80165a8:	f000 fbad 	bl	8016d06 <__multadd>
 80165ac:	9004      	str	r0, [sp, #16]
 80165ae:	e7ea      	b.n	8016586 <_dtoa_r+0xb3e>
 80165b0:	0801a03b 	.word	0x0801a03b
 80165b4:	08019f00 	.word	0x08019f00

080165b8 <rshift>:
 80165b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80165ba:	6906      	ldr	r6, [r0, #16]
 80165bc:	114b      	asrs	r3, r1, #5
 80165be:	429e      	cmp	r6, r3
 80165c0:	f100 0414 	add.w	r4, r0, #20
 80165c4:	dd30      	ble.n	8016628 <rshift+0x70>
 80165c6:	f011 011f 	ands.w	r1, r1, #31
 80165ca:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80165ce:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80165d2:	d108      	bne.n	80165e6 <rshift+0x2e>
 80165d4:	4621      	mov	r1, r4
 80165d6:	42b2      	cmp	r2, r6
 80165d8:	460b      	mov	r3, r1
 80165da:	d211      	bcs.n	8016600 <rshift+0x48>
 80165dc:	f852 3b04 	ldr.w	r3, [r2], #4
 80165e0:	f841 3b04 	str.w	r3, [r1], #4
 80165e4:	e7f7      	b.n	80165d6 <rshift+0x1e>
 80165e6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80165ea:	f1c1 0c20 	rsb	ip, r1, #32
 80165ee:	40cd      	lsrs	r5, r1
 80165f0:	3204      	adds	r2, #4
 80165f2:	4623      	mov	r3, r4
 80165f4:	42b2      	cmp	r2, r6
 80165f6:	4617      	mov	r7, r2
 80165f8:	d30c      	bcc.n	8016614 <rshift+0x5c>
 80165fa:	601d      	str	r5, [r3, #0]
 80165fc:	b105      	cbz	r5, 8016600 <rshift+0x48>
 80165fe:	3304      	adds	r3, #4
 8016600:	1b1a      	subs	r2, r3, r4
 8016602:	42a3      	cmp	r3, r4
 8016604:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8016608:	bf08      	it	eq
 801660a:	2300      	moveq	r3, #0
 801660c:	6102      	str	r2, [r0, #16]
 801660e:	bf08      	it	eq
 8016610:	6143      	streq	r3, [r0, #20]
 8016612:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016614:	683f      	ldr	r7, [r7, #0]
 8016616:	fa07 f70c 	lsl.w	r7, r7, ip
 801661a:	433d      	orrs	r5, r7
 801661c:	f843 5b04 	str.w	r5, [r3], #4
 8016620:	f852 5b04 	ldr.w	r5, [r2], #4
 8016624:	40cd      	lsrs	r5, r1
 8016626:	e7e5      	b.n	80165f4 <rshift+0x3c>
 8016628:	4623      	mov	r3, r4
 801662a:	e7e9      	b.n	8016600 <rshift+0x48>

0801662c <__hexdig_fun>:
 801662c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8016630:	2b09      	cmp	r3, #9
 8016632:	d802      	bhi.n	801663a <__hexdig_fun+0xe>
 8016634:	3820      	subs	r0, #32
 8016636:	b2c0      	uxtb	r0, r0
 8016638:	4770      	bx	lr
 801663a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801663e:	2b05      	cmp	r3, #5
 8016640:	d801      	bhi.n	8016646 <__hexdig_fun+0x1a>
 8016642:	3847      	subs	r0, #71	; 0x47
 8016644:	e7f7      	b.n	8016636 <__hexdig_fun+0xa>
 8016646:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801664a:	2b05      	cmp	r3, #5
 801664c:	d801      	bhi.n	8016652 <__hexdig_fun+0x26>
 801664e:	3827      	subs	r0, #39	; 0x27
 8016650:	e7f1      	b.n	8016636 <__hexdig_fun+0xa>
 8016652:	2000      	movs	r0, #0
 8016654:	4770      	bx	lr

08016656 <__gethex>:
 8016656:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801665a:	b08b      	sub	sp, #44	; 0x2c
 801665c:	468a      	mov	sl, r1
 801665e:	9002      	str	r0, [sp, #8]
 8016660:	9816      	ldr	r0, [sp, #88]	; 0x58
 8016662:	9306      	str	r3, [sp, #24]
 8016664:	4690      	mov	r8, r2
 8016666:	f000 fadf 	bl	8016c28 <__localeconv_l>
 801666a:	6803      	ldr	r3, [r0, #0]
 801666c:	9303      	str	r3, [sp, #12]
 801666e:	4618      	mov	r0, r3
 8016670:	f7e9 fdb8 	bl	80001e4 <strlen>
 8016674:	9b03      	ldr	r3, [sp, #12]
 8016676:	9001      	str	r0, [sp, #4]
 8016678:	4403      	add	r3, r0
 801667a:	f04f 0b00 	mov.w	fp, #0
 801667e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8016682:	9307      	str	r3, [sp, #28]
 8016684:	f8da 3000 	ldr.w	r3, [sl]
 8016688:	3302      	adds	r3, #2
 801668a:	461f      	mov	r7, r3
 801668c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8016690:	2830      	cmp	r0, #48	; 0x30
 8016692:	d06c      	beq.n	801676e <__gethex+0x118>
 8016694:	f7ff ffca 	bl	801662c <__hexdig_fun>
 8016698:	4604      	mov	r4, r0
 801669a:	2800      	cmp	r0, #0
 801669c:	d16a      	bne.n	8016774 <__gethex+0x11e>
 801669e:	9a01      	ldr	r2, [sp, #4]
 80166a0:	9903      	ldr	r1, [sp, #12]
 80166a2:	4638      	mov	r0, r7
 80166a4:	f001 fb78 	bl	8017d98 <strncmp>
 80166a8:	2800      	cmp	r0, #0
 80166aa:	d166      	bne.n	801677a <__gethex+0x124>
 80166ac:	9b01      	ldr	r3, [sp, #4]
 80166ae:	5cf8      	ldrb	r0, [r7, r3]
 80166b0:	18fe      	adds	r6, r7, r3
 80166b2:	f7ff ffbb 	bl	801662c <__hexdig_fun>
 80166b6:	2800      	cmp	r0, #0
 80166b8:	d062      	beq.n	8016780 <__gethex+0x12a>
 80166ba:	4633      	mov	r3, r6
 80166bc:	7818      	ldrb	r0, [r3, #0]
 80166be:	2830      	cmp	r0, #48	; 0x30
 80166c0:	461f      	mov	r7, r3
 80166c2:	f103 0301 	add.w	r3, r3, #1
 80166c6:	d0f9      	beq.n	80166bc <__gethex+0x66>
 80166c8:	f7ff ffb0 	bl	801662c <__hexdig_fun>
 80166cc:	fab0 f580 	clz	r5, r0
 80166d0:	096d      	lsrs	r5, r5, #5
 80166d2:	4634      	mov	r4, r6
 80166d4:	f04f 0b01 	mov.w	fp, #1
 80166d8:	463a      	mov	r2, r7
 80166da:	4616      	mov	r6, r2
 80166dc:	3201      	adds	r2, #1
 80166de:	7830      	ldrb	r0, [r6, #0]
 80166e0:	f7ff ffa4 	bl	801662c <__hexdig_fun>
 80166e4:	2800      	cmp	r0, #0
 80166e6:	d1f8      	bne.n	80166da <__gethex+0x84>
 80166e8:	9a01      	ldr	r2, [sp, #4]
 80166ea:	9903      	ldr	r1, [sp, #12]
 80166ec:	4630      	mov	r0, r6
 80166ee:	f001 fb53 	bl	8017d98 <strncmp>
 80166f2:	b950      	cbnz	r0, 801670a <__gethex+0xb4>
 80166f4:	b954      	cbnz	r4, 801670c <__gethex+0xb6>
 80166f6:	9b01      	ldr	r3, [sp, #4]
 80166f8:	18f4      	adds	r4, r6, r3
 80166fa:	4622      	mov	r2, r4
 80166fc:	4616      	mov	r6, r2
 80166fe:	3201      	adds	r2, #1
 8016700:	7830      	ldrb	r0, [r6, #0]
 8016702:	f7ff ff93 	bl	801662c <__hexdig_fun>
 8016706:	2800      	cmp	r0, #0
 8016708:	d1f8      	bne.n	80166fc <__gethex+0xa6>
 801670a:	b10c      	cbz	r4, 8016710 <__gethex+0xba>
 801670c:	1ba4      	subs	r4, r4, r6
 801670e:	00a4      	lsls	r4, r4, #2
 8016710:	7833      	ldrb	r3, [r6, #0]
 8016712:	2b50      	cmp	r3, #80	; 0x50
 8016714:	d001      	beq.n	801671a <__gethex+0xc4>
 8016716:	2b70      	cmp	r3, #112	; 0x70
 8016718:	d140      	bne.n	801679c <__gethex+0x146>
 801671a:	7873      	ldrb	r3, [r6, #1]
 801671c:	2b2b      	cmp	r3, #43	; 0x2b
 801671e:	d031      	beq.n	8016784 <__gethex+0x12e>
 8016720:	2b2d      	cmp	r3, #45	; 0x2d
 8016722:	d033      	beq.n	801678c <__gethex+0x136>
 8016724:	1c71      	adds	r1, r6, #1
 8016726:	f04f 0900 	mov.w	r9, #0
 801672a:	7808      	ldrb	r0, [r1, #0]
 801672c:	f7ff ff7e 	bl	801662c <__hexdig_fun>
 8016730:	1e43      	subs	r3, r0, #1
 8016732:	b2db      	uxtb	r3, r3
 8016734:	2b18      	cmp	r3, #24
 8016736:	d831      	bhi.n	801679c <__gethex+0x146>
 8016738:	f1a0 0210 	sub.w	r2, r0, #16
 801673c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8016740:	f7ff ff74 	bl	801662c <__hexdig_fun>
 8016744:	1e43      	subs	r3, r0, #1
 8016746:	b2db      	uxtb	r3, r3
 8016748:	2b18      	cmp	r3, #24
 801674a:	d922      	bls.n	8016792 <__gethex+0x13c>
 801674c:	f1b9 0f00 	cmp.w	r9, #0
 8016750:	d000      	beq.n	8016754 <__gethex+0xfe>
 8016752:	4252      	negs	r2, r2
 8016754:	4414      	add	r4, r2
 8016756:	f8ca 1000 	str.w	r1, [sl]
 801675a:	b30d      	cbz	r5, 80167a0 <__gethex+0x14a>
 801675c:	f1bb 0f00 	cmp.w	fp, #0
 8016760:	bf0c      	ite	eq
 8016762:	2706      	moveq	r7, #6
 8016764:	2700      	movne	r7, #0
 8016766:	4638      	mov	r0, r7
 8016768:	b00b      	add	sp, #44	; 0x2c
 801676a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801676e:	f10b 0b01 	add.w	fp, fp, #1
 8016772:	e78a      	b.n	801668a <__gethex+0x34>
 8016774:	2500      	movs	r5, #0
 8016776:	462c      	mov	r4, r5
 8016778:	e7ae      	b.n	80166d8 <__gethex+0x82>
 801677a:	463e      	mov	r6, r7
 801677c:	2501      	movs	r5, #1
 801677e:	e7c7      	b.n	8016710 <__gethex+0xba>
 8016780:	4604      	mov	r4, r0
 8016782:	e7fb      	b.n	801677c <__gethex+0x126>
 8016784:	f04f 0900 	mov.w	r9, #0
 8016788:	1cb1      	adds	r1, r6, #2
 801678a:	e7ce      	b.n	801672a <__gethex+0xd4>
 801678c:	f04f 0901 	mov.w	r9, #1
 8016790:	e7fa      	b.n	8016788 <__gethex+0x132>
 8016792:	230a      	movs	r3, #10
 8016794:	fb03 0202 	mla	r2, r3, r2, r0
 8016798:	3a10      	subs	r2, #16
 801679a:	e7cf      	b.n	801673c <__gethex+0xe6>
 801679c:	4631      	mov	r1, r6
 801679e:	e7da      	b.n	8016756 <__gethex+0x100>
 80167a0:	1bf3      	subs	r3, r6, r7
 80167a2:	3b01      	subs	r3, #1
 80167a4:	4629      	mov	r1, r5
 80167a6:	2b07      	cmp	r3, #7
 80167a8:	dc49      	bgt.n	801683e <__gethex+0x1e8>
 80167aa:	9802      	ldr	r0, [sp, #8]
 80167ac:	f000 fa60 	bl	8016c70 <_Balloc>
 80167b0:	9b01      	ldr	r3, [sp, #4]
 80167b2:	f100 0914 	add.w	r9, r0, #20
 80167b6:	f04f 0b00 	mov.w	fp, #0
 80167ba:	f1c3 0301 	rsb	r3, r3, #1
 80167be:	4605      	mov	r5, r0
 80167c0:	f8cd 9010 	str.w	r9, [sp, #16]
 80167c4:	46da      	mov	sl, fp
 80167c6:	9308      	str	r3, [sp, #32]
 80167c8:	42b7      	cmp	r7, r6
 80167ca:	d33b      	bcc.n	8016844 <__gethex+0x1ee>
 80167cc:	9804      	ldr	r0, [sp, #16]
 80167ce:	f840 ab04 	str.w	sl, [r0], #4
 80167d2:	eba0 0009 	sub.w	r0, r0, r9
 80167d6:	1080      	asrs	r0, r0, #2
 80167d8:	6128      	str	r0, [r5, #16]
 80167da:	0147      	lsls	r7, r0, #5
 80167dc:	4650      	mov	r0, sl
 80167de:	f000 fb0b 	bl	8016df8 <__hi0bits>
 80167e2:	f8d8 6000 	ldr.w	r6, [r8]
 80167e6:	1a3f      	subs	r7, r7, r0
 80167e8:	42b7      	cmp	r7, r6
 80167ea:	dd64      	ble.n	80168b6 <__gethex+0x260>
 80167ec:	1bbf      	subs	r7, r7, r6
 80167ee:	4639      	mov	r1, r7
 80167f0:	4628      	mov	r0, r5
 80167f2:	f000 fe1b 	bl	801742c <__any_on>
 80167f6:	4682      	mov	sl, r0
 80167f8:	b178      	cbz	r0, 801681a <__gethex+0x1c4>
 80167fa:	1e7b      	subs	r3, r7, #1
 80167fc:	1159      	asrs	r1, r3, #5
 80167fe:	f003 021f 	and.w	r2, r3, #31
 8016802:	f04f 0a01 	mov.w	sl, #1
 8016806:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801680a:	fa0a f202 	lsl.w	r2, sl, r2
 801680e:	420a      	tst	r2, r1
 8016810:	d003      	beq.n	801681a <__gethex+0x1c4>
 8016812:	4553      	cmp	r3, sl
 8016814:	dc46      	bgt.n	80168a4 <__gethex+0x24e>
 8016816:	f04f 0a02 	mov.w	sl, #2
 801681a:	4639      	mov	r1, r7
 801681c:	4628      	mov	r0, r5
 801681e:	f7ff fecb 	bl	80165b8 <rshift>
 8016822:	443c      	add	r4, r7
 8016824:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016828:	42a3      	cmp	r3, r4
 801682a:	da52      	bge.n	80168d2 <__gethex+0x27c>
 801682c:	4629      	mov	r1, r5
 801682e:	9802      	ldr	r0, [sp, #8]
 8016830:	f000 fa52 	bl	8016cd8 <_Bfree>
 8016834:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016836:	2300      	movs	r3, #0
 8016838:	6013      	str	r3, [r2, #0]
 801683a:	27a3      	movs	r7, #163	; 0xa3
 801683c:	e793      	b.n	8016766 <__gethex+0x110>
 801683e:	3101      	adds	r1, #1
 8016840:	105b      	asrs	r3, r3, #1
 8016842:	e7b0      	b.n	80167a6 <__gethex+0x150>
 8016844:	1e73      	subs	r3, r6, #1
 8016846:	9305      	str	r3, [sp, #20]
 8016848:	9a07      	ldr	r2, [sp, #28]
 801684a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801684e:	4293      	cmp	r3, r2
 8016850:	d018      	beq.n	8016884 <__gethex+0x22e>
 8016852:	f1bb 0f20 	cmp.w	fp, #32
 8016856:	d107      	bne.n	8016868 <__gethex+0x212>
 8016858:	9b04      	ldr	r3, [sp, #16]
 801685a:	f8c3 a000 	str.w	sl, [r3]
 801685e:	3304      	adds	r3, #4
 8016860:	f04f 0a00 	mov.w	sl, #0
 8016864:	9304      	str	r3, [sp, #16]
 8016866:	46d3      	mov	fp, sl
 8016868:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801686c:	f7ff fede 	bl	801662c <__hexdig_fun>
 8016870:	f000 000f 	and.w	r0, r0, #15
 8016874:	fa00 f00b 	lsl.w	r0, r0, fp
 8016878:	ea4a 0a00 	orr.w	sl, sl, r0
 801687c:	f10b 0b04 	add.w	fp, fp, #4
 8016880:	9b05      	ldr	r3, [sp, #20]
 8016882:	e00d      	b.n	80168a0 <__gethex+0x24a>
 8016884:	9b05      	ldr	r3, [sp, #20]
 8016886:	9a08      	ldr	r2, [sp, #32]
 8016888:	4413      	add	r3, r2
 801688a:	42bb      	cmp	r3, r7
 801688c:	d3e1      	bcc.n	8016852 <__gethex+0x1fc>
 801688e:	4618      	mov	r0, r3
 8016890:	9a01      	ldr	r2, [sp, #4]
 8016892:	9903      	ldr	r1, [sp, #12]
 8016894:	9309      	str	r3, [sp, #36]	; 0x24
 8016896:	f001 fa7f 	bl	8017d98 <strncmp>
 801689a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801689c:	2800      	cmp	r0, #0
 801689e:	d1d8      	bne.n	8016852 <__gethex+0x1fc>
 80168a0:	461e      	mov	r6, r3
 80168a2:	e791      	b.n	80167c8 <__gethex+0x172>
 80168a4:	1eb9      	subs	r1, r7, #2
 80168a6:	4628      	mov	r0, r5
 80168a8:	f000 fdc0 	bl	801742c <__any_on>
 80168ac:	2800      	cmp	r0, #0
 80168ae:	d0b2      	beq.n	8016816 <__gethex+0x1c0>
 80168b0:	f04f 0a03 	mov.w	sl, #3
 80168b4:	e7b1      	b.n	801681a <__gethex+0x1c4>
 80168b6:	da09      	bge.n	80168cc <__gethex+0x276>
 80168b8:	1bf7      	subs	r7, r6, r7
 80168ba:	4629      	mov	r1, r5
 80168bc:	463a      	mov	r2, r7
 80168be:	9802      	ldr	r0, [sp, #8]
 80168c0:	f000 fbd6 	bl	8017070 <__lshift>
 80168c4:	1be4      	subs	r4, r4, r7
 80168c6:	4605      	mov	r5, r0
 80168c8:	f100 0914 	add.w	r9, r0, #20
 80168cc:	f04f 0a00 	mov.w	sl, #0
 80168d0:	e7a8      	b.n	8016824 <__gethex+0x1ce>
 80168d2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80168d6:	42a0      	cmp	r0, r4
 80168d8:	dd6a      	ble.n	80169b0 <__gethex+0x35a>
 80168da:	1b04      	subs	r4, r0, r4
 80168dc:	42a6      	cmp	r6, r4
 80168de:	dc2e      	bgt.n	801693e <__gethex+0x2e8>
 80168e0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80168e4:	2b02      	cmp	r3, #2
 80168e6:	d022      	beq.n	801692e <__gethex+0x2d8>
 80168e8:	2b03      	cmp	r3, #3
 80168ea:	d024      	beq.n	8016936 <__gethex+0x2e0>
 80168ec:	2b01      	cmp	r3, #1
 80168ee:	d115      	bne.n	801691c <__gethex+0x2c6>
 80168f0:	42a6      	cmp	r6, r4
 80168f2:	d113      	bne.n	801691c <__gethex+0x2c6>
 80168f4:	2e01      	cmp	r6, #1
 80168f6:	dc0b      	bgt.n	8016910 <__gethex+0x2ba>
 80168f8:	9a06      	ldr	r2, [sp, #24]
 80168fa:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80168fe:	6013      	str	r3, [r2, #0]
 8016900:	2301      	movs	r3, #1
 8016902:	612b      	str	r3, [r5, #16]
 8016904:	f8c9 3000 	str.w	r3, [r9]
 8016908:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801690a:	2762      	movs	r7, #98	; 0x62
 801690c:	601d      	str	r5, [r3, #0]
 801690e:	e72a      	b.n	8016766 <__gethex+0x110>
 8016910:	1e71      	subs	r1, r6, #1
 8016912:	4628      	mov	r0, r5
 8016914:	f000 fd8a 	bl	801742c <__any_on>
 8016918:	2800      	cmp	r0, #0
 801691a:	d1ed      	bne.n	80168f8 <__gethex+0x2a2>
 801691c:	4629      	mov	r1, r5
 801691e:	9802      	ldr	r0, [sp, #8]
 8016920:	f000 f9da 	bl	8016cd8 <_Bfree>
 8016924:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016926:	2300      	movs	r3, #0
 8016928:	6013      	str	r3, [r2, #0]
 801692a:	2750      	movs	r7, #80	; 0x50
 801692c:	e71b      	b.n	8016766 <__gethex+0x110>
 801692e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016930:	2b00      	cmp	r3, #0
 8016932:	d0e1      	beq.n	80168f8 <__gethex+0x2a2>
 8016934:	e7f2      	b.n	801691c <__gethex+0x2c6>
 8016936:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016938:	2b00      	cmp	r3, #0
 801693a:	d1dd      	bne.n	80168f8 <__gethex+0x2a2>
 801693c:	e7ee      	b.n	801691c <__gethex+0x2c6>
 801693e:	1e67      	subs	r7, r4, #1
 8016940:	f1ba 0f00 	cmp.w	sl, #0
 8016944:	d131      	bne.n	80169aa <__gethex+0x354>
 8016946:	b127      	cbz	r7, 8016952 <__gethex+0x2fc>
 8016948:	4639      	mov	r1, r7
 801694a:	4628      	mov	r0, r5
 801694c:	f000 fd6e 	bl	801742c <__any_on>
 8016950:	4682      	mov	sl, r0
 8016952:	117a      	asrs	r2, r7, #5
 8016954:	2301      	movs	r3, #1
 8016956:	f007 071f 	and.w	r7, r7, #31
 801695a:	fa03 f707 	lsl.w	r7, r3, r7
 801695e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8016962:	4621      	mov	r1, r4
 8016964:	421f      	tst	r7, r3
 8016966:	4628      	mov	r0, r5
 8016968:	bf18      	it	ne
 801696a:	f04a 0a02 	orrne.w	sl, sl, #2
 801696e:	1b36      	subs	r6, r6, r4
 8016970:	f7ff fe22 	bl	80165b8 <rshift>
 8016974:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8016978:	2702      	movs	r7, #2
 801697a:	f1ba 0f00 	cmp.w	sl, #0
 801697e:	d048      	beq.n	8016a12 <__gethex+0x3bc>
 8016980:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016984:	2b02      	cmp	r3, #2
 8016986:	d015      	beq.n	80169b4 <__gethex+0x35e>
 8016988:	2b03      	cmp	r3, #3
 801698a:	d017      	beq.n	80169bc <__gethex+0x366>
 801698c:	2b01      	cmp	r3, #1
 801698e:	d109      	bne.n	80169a4 <__gethex+0x34e>
 8016990:	f01a 0f02 	tst.w	sl, #2
 8016994:	d006      	beq.n	80169a4 <__gethex+0x34e>
 8016996:	f8d9 3000 	ldr.w	r3, [r9]
 801699a:	ea4a 0a03 	orr.w	sl, sl, r3
 801699e:	f01a 0f01 	tst.w	sl, #1
 80169a2:	d10e      	bne.n	80169c2 <__gethex+0x36c>
 80169a4:	f047 0710 	orr.w	r7, r7, #16
 80169a8:	e033      	b.n	8016a12 <__gethex+0x3bc>
 80169aa:	f04f 0a01 	mov.w	sl, #1
 80169ae:	e7d0      	b.n	8016952 <__gethex+0x2fc>
 80169b0:	2701      	movs	r7, #1
 80169b2:	e7e2      	b.n	801697a <__gethex+0x324>
 80169b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80169b6:	f1c3 0301 	rsb	r3, r3, #1
 80169ba:	9315      	str	r3, [sp, #84]	; 0x54
 80169bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80169be:	2b00      	cmp	r3, #0
 80169c0:	d0f0      	beq.n	80169a4 <__gethex+0x34e>
 80169c2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80169c6:	f105 0314 	add.w	r3, r5, #20
 80169ca:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80169ce:	eb03 010a 	add.w	r1, r3, sl
 80169d2:	f04f 0c00 	mov.w	ip, #0
 80169d6:	4618      	mov	r0, r3
 80169d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80169dc:	f1b2 3fff 	cmp.w	r2, #4294967295
 80169e0:	d01c      	beq.n	8016a1c <__gethex+0x3c6>
 80169e2:	3201      	adds	r2, #1
 80169e4:	6002      	str	r2, [r0, #0]
 80169e6:	2f02      	cmp	r7, #2
 80169e8:	f105 0314 	add.w	r3, r5, #20
 80169ec:	d138      	bne.n	8016a60 <__gethex+0x40a>
 80169ee:	f8d8 2000 	ldr.w	r2, [r8]
 80169f2:	3a01      	subs	r2, #1
 80169f4:	42b2      	cmp	r2, r6
 80169f6:	d10a      	bne.n	8016a0e <__gethex+0x3b8>
 80169f8:	1171      	asrs	r1, r6, #5
 80169fa:	2201      	movs	r2, #1
 80169fc:	f006 061f 	and.w	r6, r6, #31
 8016a00:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016a04:	fa02 f606 	lsl.w	r6, r2, r6
 8016a08:	421e      	tst	r6, r3
 8016a0a:	bf18      	it	ne
 8016a0c:	4617      	movne	r7, r2
 8016a0e:	f047 0720 	orr.w	r7, r7, #32
 8016a12:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016a14:	601d      	str	r5, [r3, #0]
 8016a16:	9b06      	ldr	r3, [sp, #24]
 8016a18:	601c      	str	r4, [r3, #0]
 8016a1a:	e6a4      	b.n	8016766 <__gethex+0x110>
 8016a1c:	4299      	cmp	r1, r3
 8016a1e:	f843 cc04 	str.w	ip, [r3, #-4]
 8016a22:	d8d8      	bhi.n	80169d6 <__gethex+0x380>
 8016a24:	68ab      	ldr	r3, [r5, #8]
 8016a26:	4599      	cmp	r9, r3
 8016a28:	db12      	blt.n	8016a50 <__gethex+0x3fa>
 8016a2a:	6869      	ldr	r1, [r5, #4]
 8016a2c:	9802      	ldr	r0, [sp, #8]
 8016a2e:	3101      	adds	r1, #1
 8016a30:	f000 f91e 	bl	8016c70 <_Balloc>
 8016a34:	692a      	ldr	r2, [r5, #16]
 8016a36:	3202      	adds	r2, #2
 8016a38:	f105 010c 	add.w	r1, r5, #12
 8016a3c:	4683      	mov	fp, r0
 8016a3e:	0092      	lsls	r2, r2, #2
 8016a40:	300c      	adds	r0, #12
 8016a42:	f7fd f90d 	bl	8013c60 <memcpy>
 8016a46:	4629      	mov	r1, r5
 8016a48:	9802      	ldr	r0, [sp, #8]
 8016a4a:	f000 f945 	bl	8016cd8 <_Bfree>
 8016a4e:	465d      	mov	r5, fp
 8016a50:	692b      	ldr	r3, [r5, #16]
 8016a52:	1c5a      	adds	r2, r3, #1
 8016a54:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8016a58:	612a      	str	r2, [r5, #16]
 8016a5a:	2201      	movs	r2, #1
 8016a5c:	615a      	str	r2, [r3, #20]
 8016a5e:	e7c2      	b.n	80169e6 <__gethex+0x390>
 8016a60:	692a      	ldr	r2, [r5, #16]
 8016a62:	454a      	cmp	r2, r9
 8016a64:	dd0b      	ble.n	8016a7e <__gethex+0x428>
 8016a66:	2101      	movs	r1, #1
 8016a68:	4628      	mov	r0, r5
 8016a6a:	f7ff fda5 	bl	80165b8 <rshift>
 8016a6e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016a72:	3401      	adds	r4, #1
 8016a74:	42a3      	cmp	r3, r4
 8016a76:	f6ff aed9 	blt.w	801682c <__gethex+0x1d6>
 8016a7a:	2701      	movs	r7, #1
 8016a7c:	e7c7      	b.n	8016a0e <__gethex+0x3b8>
 8016a7e:	f016 061f 	ands.w	r6, r6, #31
 8016a82:	d0fa      	beq.n	8016a7a <__gethex+0x424>
 8016a84:	449a      	add	sl, r3
 8016a86:	f1c6 0620 	rsb	r6, r6, #32
 8016a8a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8016a8e:	f000 f9b3 	bl	8016df8 <__hi0bits>
 8016a92:	42b0      	cmp	r0, r6
 8016a94:	dbe7      	blt.n	8016a66 <__gethex+0x410>
 8016a96:	e7f0      	b.n	8016a7a <__gethex+0x424>

08016a98 <L_shift>:
 8016a98:	f1c2 0208 	rsb	r2, r2, #8
 8016a9c:	0092      	lsls	r2, r2, #2
 8016a9e:	b570      	push	{r4, r5, r6, lr}
 8016aa0:	f1c2 0620 	rsb	r6, r2, #32
 8016aa4:	6843      	ldr	r3, [r0, #4]
 8016aa6:	6804      	ldr	r4, [r0, #0]
 8016aa8:	fa03 f506 	lsl.w	r5, r3, r6
 8016aac:	432c      	orrs	r4, r5
 8016aae:	40d3      	lsrs	r3, r2
 8016ab0:	6004      	str	r4, [r0, #0]
 8016ab2:	f840 3f04 	str.w	r3, [r0, #4]!
 8016ab6:	4288      	cmp	r0, r1
 8016ab8:	d3f4      	bcc.n	8016aa4 <L_shift+0xc>
 8016aba:	bd70      	pop	{r4, r5, r6, pc}

08016abc <__match>:
 8016abc:	b530      	push	{r4, r5, lr}
 8016abe:	6803      	ldr	r3, [r0, #0]
 8016ac0:	3301      	adds	r3, #1
 8016ac2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016ac6:	b914      	cbnz	r4, 8016ace <__match+0x12>
 8016ac8:	6003      	str	r3, [r0, #0]
 8016aca:	2001      	movs	r0, #1
 8016acc:	bd30      	pop	{r4, r5, pc}
 8016ace:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016ad2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8016ad6:	2d19      	cmp	r5, #25
 8016ad8:	bf98      	it	ls
 8016ada:	3220      	addls	r2, #32
 8016adc:	42a2      	cmp	r2, r4
 8016ade:	d0f0      	beq.n	8016ac2 <__match+0x6>
 8016ae0:	2000      	movs	r0, #0
 8016ae2:	e7f3      	b.n	8016acc <__match+0x10>

08016ae4 <__hexnan>:
 8016ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ae8:	680b      	ldr	r3, [r1, #0]
 8016aea:	6801      	ldr	r1, [r0, #0]
 8016aec:	115f      	asrs	r7, r3, #5
 8016aee:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8016af2:	f013 031f 	ands.w	r3, r3, #31
 8016af6:	b087      	sub	sp, #28
 8016af8:	bf18      	it	ne
 8016afa:	3704      	addne	r7, #4
 8016afc:	2500      	movs	r5, #0
 8016afe:	1f3e      	subs	r6, r7, #4
 8016b00:	4682      	mov	sl, r0
 8016b02:	4690      	mov	r8, r2
 8016b04:	9301      	str	r3, [sp, #4]
 8016b06:	f847 5c04 	str.w	r5, [r7, #-4]
 8016b0a:	46b1      	mov	r9, r6
 8016b0c:	4634      	mov	r4, r6
 8016b0e:	9502      	str	r5, [sp, #8]
 8016b10:	46ab      	mov	fp, r5
 8016b12:	784a      	ldrb	r2, [r1, #1]
 8016b14:	1c4b      	adds	r3, r1, #1
 8016b16:	9303      	str	r3, [sp, #12]
 8016b18:	b342      	cbz	r2, 8016b6c <__hexnan+0x88>
 8016b1a:	4610      	mov	r0, r2
 8016b1c:	9105      	str	r1, [sp, #20]
 8016b1e:	9204      	str	r2, [sp, #16]
 8016b20:	f7ff fd84 	bl	801662c <__hexdig_fun>
 8016b24:	2800      	cmp	r0, #0
 8016b26:	d143      	bne.n	8016bb0 <__hexnan+0xcc>
 8016b28:	9a04      	ldr	r2, [sp, #16]
 8016b2a:	9905      	ldr	r1, [sp, #20]
 8016b2c:	2a20      	cmp	r2, #32
 8016b2e:	d818      	bhi.n	8016b62 <__hexnan+0x7e>
 8016b30:	9b02      	ldr	r3, [sp, #8]
 8016b32:	459b      	cmp	fp, r3
 8016b34:	dd13      	ble.n	8016b5e <__hexnan+0x7a>
 8016b36:	454c      	cmp	r4, r9
 8016b38:	d206      	bcs.n	8016b48 <__hexnan+0x64>
 8016b3a:	2d07      	cmp	r5, #7
 8016b3c:	dc04      	bgt.n	8016b48 <__hexnan+0x64>
 8016b3e:	462a      	mov	r2, r5
 8016b40:	4649      	mov	r1, r9
 8016b42:	4620      	mov	r0, r4
 8016b44:	f7ff ffa8 	bl	8016a98 <L_shift>
 8016b48:	4544      	cmp	r4, r8
 8016b4a:	d944      	bls.n	8016bd6 <__hexnan+0xf2>
 8016b4c:	2300      	movs	r3, #0
 8016b4e:	f1a4 0904 	sub.w	r9, r4, #4
 8016b52:	f844 3c04 	str.w	r3, [r4, #-4]
 8016b56:	f8cd b008 	str.w	fp, [sp, #8]
 8016b5a:	464c      	mov	r4, r9
 8016b5c:	461d      	mov	r5, r3
 8016b5e:	9903      	ldr	r1, [sp, #12]
 8016b60:	e7d7      	b.n	8016b12 <__hexnan+0x2e>
 8016b62:	2a29      	cmp	r2, #41	; 0x29
 8016b64:	d14a      	bne.n	8016bfc <__hexnan+0x118>
 8016b66:	3102      	adds	r1, #2
 8016b68:	f8ca 1000 	str.w	r1, [sl]
 8016b6c:	f1bb 0f00 	cmp.w	fp, #0
 8016b70:	d044      	beq.n	8016bfc <__hexnan+0x118>
 8016b72:	454c      	cmp	r4, r9
 8016b74:	d206      	bcs.n	8016b84 <__hexnan+0xa0>
 8016b76:	2d07      	cmp	r5, #7
 8016b78:	dc04      	bgt.n	8016b84 <__hexnan+0xa0>
 8016b7a:	462a      	mov	r2, r5
 8016b7c:	4649      	mov	r1, r9
 8016b7e:	4620      	mov	r0, r4
 8016b80:	f7ff ff8a 	bl	8016a98 <L_shift>
 8016b84:	4544      	cmp	r4, r8
 8016b86:	d928      	bls.n	8016bda <__hexnan+0xf6>
 8016b88:	4643      	mov	r3, r8
 8016b8a:	f854 2b04 	ldr.w	r2, [r4], #4
 8016b8e:	f843 2b04 	str.w	r2, [r3], #4
 8016b92:	42a6      	cmp	r6, r4
 8016b94:	d2f9      	bcs.n	8016b8a <__hexnan+0xa6>
 8016b96:	2200      	movs	r2, #0
 8016b98:	f843 2b04 	str.w	r2, [r3], #4
 8016b9c:	429e      	cmp	r6, r3
 8016b9e:	d2fb      	bcs.n	8016b98 <__hexnan+0xb4>
 8016ba0:	6833      	ldr	r3, [r6, #0]
 8016ba2:	b91b      	cbnz	r3, 8016bac <__hexnan+0xc8>
 8016ba4:	4546      	cmp	r6, r8
 8016ba6:	d127      	bne.n	8016bf8 <__hexnan+0x114>
 8016ba8:	2301      	movs	r3, #1
 8016baa:	6033      	str	r3, [r6, #0]
 8016bac:	2005      	movs	r0, #5
 8016bae:	e026      	b.n	8016bfe <__hexnan+0x11a>
 8016bb0:	3501      	adds	r5, #1
 8016bb2:	2d08      	cmp	r5, #8
 8016bb4:	f10b 0b01 	add.w	fp, fp, #1
 8016bb8:	dd06      	ble.n	8016bc8 <__hexnan+0xe4>
 8016bba:	4544      	cmp	r4, r8
 8016bbc:	d9cf      	bls.n	8016b5e <__hexnan+0x7a>
 8016bbe:	2300      	movs	r3, #0
 8016bc0:	f844 3c04 	str.w	r3, [r4, #-4]
 8016bc4:	2501      	movs	r5, #1
 8016bc6:	3c04      	subs	r4, #4
 8016bc8:	6822      	ldr	r2, [r4, #0]
 8016bca:	f000 000f 	and.w	r0, r0, #15
 8016bce:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8016bd2:	6020      	str	r0, [r4, #0]
 8016bd4:	e7c3      	b.n	8016b5e <__hexnan+0x7a>
 8016bd6:	2508      	movs	r5, #8
 8016bd8:	e7c1      	b.n	8016b5e <__hexnan+0x7a>
 8016bda:	9b01      	ldr	r3, [sp, #4]
 8016bdc:	2b00      	cmp	r3, #0
 8016bde:	d0df      	beq.n	8016ba0 <__hexnan+0xbc>
 8016be0:	f04f 32ff 	mov.w	r2, #4294967295
 8016be4:	f1c3 0320 	rsb	r3, r3, #32
 8016be8:	fa22 f303 	lsr.w	r3, r2, r3
 8016bec:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8016bf0:	401a      	ands	r2, r3
 8016bf2:	f847 2c04 	str.w	r2, [r7, #-4]
 8016bf6:	e7d3      	b.n	8016ba0 <__hexnan+0xbc>
 8016bf8:	3e04      	subs	r6, #4
 8016bfa:	e7d1      	b.n	8016ba0 <__hexnan+0xbc>
 8016bfc:	2004      	movs	r0, #4
 8016bfe:	b007      	add	sp, #28
 8016c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016c04 <__locale_ctype_ptr_l>:
 8016c04:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8016c08:	4770      	bx	lr
	...

08016c0c <__locale_ctype_ptr>:
 8016c0c:	4b04      	ldr	r3, [pc, #16]	; (8016c20 <__locale_ctype_ptr+0x14>)
 8016c0e:	4a05      	ldr	r2, [pc, #20]	; (8016c24 <__locale_ctype_ptr+0x18>)
 8016c10:	681b      	ldr	r3, [r3, #0]
 8016c12:	6a1b      	ldr	r3, [r3, #32]
 8016c14:	2b00      	cmp	r3, #0
 8016c16:	bf08      	it	eq
 8016c18:	4613      	moveq	r3, r2
 8016c1a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8016c1e:	4770      	bx	lr
 8016c20:	20000e34 	.word	0x20000e34
 8016c24:	20000e98 	.word	0x20000e98

08016c28 <__localeconv_l>:
 8016c28:	30f0      	adds	r0, #240	; 0xf0
 8016c2a:	4770      	bx	lr

08016c2c <_localeconv_r>:
 8016c2c:	4b04      	ldr	r3, [pc, #16]	; (8016c40 <_localeconv_r+0x14>)
 8016c2e:	681b      	ldr	r3, [r3, #0]
 8016c30:	6a18      	ldr	r0, [r3, #32]
 8016c32:	4b04      	ldr	r3, [pc, #16]	; (8016c44 <_localeconv_r+0x18>)
 8016c34:	2800      	cmp	r0, #0
 8016c36:	bf08      	it	eq
 8016c38:	4618      	moveq	r0, r3
 8016c3a:	30f0      	adds	r0, #240	; 0xf0
 8016c3c:	4770      	bx	lr
 8016c3e:	bf00      	nop
 8016c40:	20000e34 	.word	0x20000e34
 8016c44:	20000e98 	.word	0x20000e98

08016c48 <__ascii_mbtowc>:
 8016c48:	b082      	sub	sp, #8
 8016c4a:	b901      	cbnz	r1, 8016c4e <__ascii_mbtowc+0x6>
 8016c4c:	a901      	add	r1, sp, #4
 8016c4e:	b142      	cbz	r2, 8016c62 <__ascii_mbtowc+0x1a>
 8016c50:	b14b      	cbz	r3, 8016c66 <__ascii_mbtowc+0x1e>
 8016c52:	7813      	ldrb	r3, [r2, #0]
 8016c54:	600b      	str	r3, [r1, #0]
 8016c56:	7812      	ldrb	r2, [r2, #0]
 8016c58:	1c10      	adds	r0, r2, #0
 8016c5a:	bf18      	it	ne
 8016c5c:	2001      	movne	r0, #1
 8016c5e:	b002      	add	sp, #8
 8016c60:	4770      	bx	lr
 8016c62:	4610      	mov	r0, r2
 8016c64:	e7fb      	b.n	8016c5e <__ascii_mbtowc+0x16>
 8016c66:	f06f 0001 	mvn.w	r0, #1
 8016c6a:	e7f8      	b.n	8016c5e <__ascii_mbtowc+0x16>

08016c6c <__malloc_lock>:
 8016c6c:	4770      	bx	lr

08016c6e <__malloc_unlock>:
 8016c6e:	4770      	bx	lr

08016c70 <_Balloc>:
 8016c70:	b570      	push	{r4, r5, r6, lr}
 8016c72:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8016c74:	4604      	mov	r4, r0
 8016c76:	460e      	mov	r6, r1
 8016c78:	b93d      	cbnz	r5, 8016c8a <_Balloc+0x1a>
 8016c7a:	2010      	movs	r0, #16
 8016c7c:	f7fc ffe0 	bl	8013c40 <malloc>
 8016c80:	6260      	str	r0, [r4, #36]	; 0x24
 8016c82:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8016c86:	6005      	str	r5, [r0, #0]
 8016c88:	60c5      	str	r5, [r0, #12]
 8016c8a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8016c8c:	68eb      	ldr	r3, [r5, #12]
 8016c8e:	b183      	cbz	r3, 8016cb2 <_Balloc+0x42>
 8016c90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016c92:	68db      	ldr	r3, [r3, #12]
 8016c94:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8016c98:	b9b8      	cbnz	r0, 8016cca <_Balloc+0x5a>
 8016c9a:	2101      	movs	r1, #1
 8016c9c:	fa01 f506 	lsl.w	r5, r1, r6
 8016ca0:	1d6a      	adds	r2, r5, #5
 8016ca2:	0092      	lsls	r2, r2, #2
 8016ca4:	4620      	mov	r0, r4
 8016ca6:	f000 fbe2 	bl	801746e <_calloc_r>
 8016caa:	b160      	cbz	r0, 8016cc6 <_Balloc+0x56>
 8016cac:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8016cb0:	e00e      	b.n	8016cd0 <_Balloc+0x60>
 8016cb2:	2221      	movs	r2, #33	; 0x21
 8016cb4:	2104      	movs	r1, #4
 8016cb6:	4620      	mov	r0, r4
 8016cb8:	f000 fbd9 	bl	801746e <_calloc_r>
 8016cbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016cbe:	60e8      	str	r0, [r5, #12]
 8016cc0:	68db      	ldr	r3, [r3, #12]
 8016cc2:	2b00      	cmp	r3, #0
 8016cc4:	d1e4      	bne.n	8016c90 <_Balloc+0x20>
 8016cc6:	2000      	movs	r0, #0
 8016cc8:	bd70      	pop	{r4, r5, r6, pc}
 8016cca:	6802      	ldr	r2, [r0, #0]
 8016ccc:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8016cd0:	2300      	movs	r3, #0
 8016cd2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016cd6:	e7f7      	b.n	8016cc8 <_Balloc+0x58>

08016cd8 <_Bfree>:
 8016cd8:	b570      	push	{r4, r5, r6, lr}
 8016cda:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8016cdc:	4606      	mov	r6, r0
 8016cde:	460d      	mov	r5, r1
 8016ce0:	b93c      	cbnz	r4, 8016cf2 <_Bfree+0x1a>
 8016ce2:	2010      	movs	r0, #16
 8016ce4:	f7fc ffac 	bl	8013c40 <malloc>
 8016ce8:	6270      	str	r0, [r6, #36]	; 0x24
 8016cea:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016cee:	6004      	str	r4, [r0, #0]
 8016cf0:	60c4      	str	r4, [r0, #12]
 8016cf2:	b13d      	cbz	r5, 8016d04 <_Bfree+0x2c>
 8016cf4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8016cf6:	686a      	ldr	r2, [r5, #4]
 8016cf8:	68db      	ldr	r3, [r3, #12]
 8016cfa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016cfe:	6029      	str	r1, [r5, #0]
 8016d00:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8016d04:	bd70      	pop	{r4, r5, r6, pc}

08016d06 <__multadd>:
 8016d06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016d0a:	690d      	ldr	r5, [r1, #16]
 8016d0c:	461f      	mov	r7, r3
 8016d0e:	4606      	mov	r6, r0
 8016d10:	460c      	mov	r4, r1
 8016d12:	f101 0c14 	add.w	ip, r1, #20
 8016d16:	2300      	movs	r3, #0
 8016d18:	f8dc 0000 	ldr.w	r0, [ip]
 8016d1c:	b281      	uxth	r1, r0
 8016d1e:	fb02 7101 	mla	r1, r2, r1, r7
 8016d22:	0c0f      	lsrs	r7, r1, #16
 8016d24:	0c00      	lsrs	r0, r0, #16
 8016d26:	fb02 7000 	mla	r0, r2, r0, r7
 8016d2a:	b289      	uxth	r1, r1
 8016d2c:	3301      	adds	r3, #1
 8016d2e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8016d32:	429d      	cmp	r5, r3
 8016d34:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8016d38:	f84c 1b04 	str.w	r1, [ip], #4
 8016d3c:	dcec      	bgt.n	8016d18 <__multadd+0x12>
 8016d3e:	b1d7      	cbz	r7, 8016d76 <__multadd+0x70>
 8016d40:	68a3      	ldr	r3, [r4, #8]
 8016d42:	42ab      	cmp	r3, r5
 8016d44:	dc12      	bgt.n	8016d6c <__multadd+0x66>
 8016d46:	6861      	ldr	r1, [r4, #4]
 8016d48:	4630      	mov	r0, r6
 8016d4a:	3101      	adds	r1, #1
 8016d4c:	f7ff ff90 	bl	8016c70 <_Balloc>
 8016d50:	6922      	ldr	r2, [r4, #16]
 8016d52:	3202      	adds	r2, #2
 8016d54:	f104 010c 	add.w	r1, r4, #12
 8016d58:	4680      	mov	r8, r0
 8016d5a:	0092      	lsls	r2, r2, #2
 8016d5c:	300c      	adds	r0, #12
 8016d5e:	f7fc ff7f 	bl	8013c60 <memcpy>
 8016d62:	4621      	mov	r1, r4
 8016d64:	4630      	mov	r0, r6
 8016d66:	f7ff ffb7 	bl	8016cd8 <_Bfree>
 8016d6a:	4644      	mov	r4, r8
 8016d6c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016d70:	3501      	adds	r5, #1
 8016d72:	615f      	str	r7, [r3, #20]
 8016d74:	6125      	str	r5, [r4, #16]
 8016d76:	4620      	mov	r0, r4
 8016d78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016d7c <__s2b>:
 8016d7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016d80:	460c      	mov	r4, r1
 8016d82:	4615      	mov	r5, r2
 8016d84:	461f      	mov	r7, r3
 8016d86:	2209      	movs	r2, #9
 8016d88:	3308      	adds	r3, #8
 8016d8a:	4606      	mov	r6, r0
 8016d8c:	fb93 f3f2 	sdiv	r3, r3, r2
 8016d90:	2100      	movs	r1, #0
 8016d92:	2201      	movs	r2, #1
 8016d94:	429a      	cmp	r2, r3
 8016d96:	db20      	blt.n	8016dda <__s2b+0x5e>
 8016d98:	4630      	mov	r0, r6
 8016d9a:	f7ff ff69 	bl	8016c70 <_Balloc>
 8016d9e:	9b08      	ldr	r3, [sp, #32]
 8016da0:	6143      	str	r3, [r0, #20]
 8016da2:	2d09      	cmp	r5, #9
 8016da4:	f04f 0301 	mov.w	r3, #1
 8016da8:	6103      	str	r3, [r0, #16]
 8016daa:	dd19      	ble.n	8016de0 <__s2b+0x64>
 8016dac:	f104 0809 	add.w	r8, r4, #9
 8016db0:	46c1      	mov	r9, r8
 8016db2:	442c      	add	r4, r5
 8016db4:	f819 3b01 	ldrb.w	r3, [r9], #1
 8016db8:	4601      	mov	r1, r0
 8016dba:	3b30      	subs	r3, #48	; 0x30
 8016dbc:	220a      	movs	r2, #10
 8016dbe:	4630      	mov	r0, r6
 8016dc0:	f7ff ffa1 	bl	8016d06 <__multadd>
 8016dc4:	45a1      	cmp	r9, r4
 8016dc6:	d1f5      	bne.n	8016db4 <__s2b+0x38>
 8016dc8:	eb08 0405 	add.w	r4, r8, r5
 8016dcc:	3c08      	subs	r4, #8
 8016dce:	1b2d      	subs	r5, r5, r4
 8016dd0:	1963      	adds	r3, r4, r5
 8016dd2:	42bb      	cmp	r3, r7
 8016dd4:	db07      	blt.n	8016de6 <__s2b+0x6a>
 8016dd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016dda:	0052      	lsls	r2, r2, #1
 8016ddc:	3101      	adds	r1, #1
 8016dde:	e7d9      	b.n	8016d94 <__s2b+0x18>
 8016de0:	340a      	adds	r4, #10
 8016de2:	2509      	movs	r5, #9
 8016de4:	e7f3      	b.n	8016dce <__s2b+0x52>
 8016de6:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016dea:	4601      	mov	r1, r0
 8016dec:	3b30      	subs	r3, #48	; 0x30
 8016dee:	220a      	movs	r2, #10
 8016df0:	4630      	mov	r0, r6
 8016df2:	f7ff ff88 	bl	8016d06 <__multadd>
 8016df6:	e7eb      	b.n	8016dd0 <__s2b+0x54>

08016df8 <__hi0bits>:
 8016df8:	0c02      	lsrs	r2, r0, #16
 8016dfa:	0412      	lsls	r2, r2, #16
 8016dfc:	4603      	mov	r3, r0
 8016dfe:	b9b2      	cbnz	r2, 8016e2e <__hi0bits+0x36>
 8016e00:	0403      	lsls	r3, r0, #16
 8016e02:	2010      	movs	r0, #16
 8016e04:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8016e08:	bf04      	itt	eq
 8016e0a:	021b      	lsleq	r3, r3, #8
 8016e0c:	3008      	addeq	r0, #8
 8016e0e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8016e12:	bf04      	itt	eq
 8016e14:	011b      	lsleq	r3, r3, #4
 8016e16:	3004      	addeq	r0, #4
 8016e18:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8016e1c:	bf04      	itt	eq
 8016e1e:	009b      	lsleq	r3, r3, #2
 8016e20:	3002      	addeq	r0, #2
 8016e22:	2b00      	cmp	r3, #0
 8016e24:	db06      	blt.n	8016e34 <__hi0bits+0x3c>
 8016e26:	005b      	lsls	r3, r3, #1
 8016e28:	d503      	bpl.n	8016e32 <__hi0bits+0x3a>
 8016e2a:	3001      	adds	r0, #1
 8016e2c:	4770      	bx	lr
 8016e2e:	2000      	movs	r0, #0
 8016e30:	e7e8      	b.n	8016e04 <__hi0bits+0xc>
 8016e32:	2020      	movs	r0, #32
 8016e34:	4770      	bx	lr

08016e36 <__lo0bits>:
 8016e36:	6803      	ldr	r3, [r0, #0]
 8016e38:	f013 0207 	ands.w	r2, r3, #7
 8016e3c:	4601      	mov	r1, r0
 8016e3e:	d00b      	beq.n	8016e58 <__lo0bits+0x22>
 8016e40:	07da      	lsls	r2, r3, #31
 8016e42:	d423      	bmi.n	8016e8c <__lo0bits+0x56>
 8016e44:	0798      	lsls	r0, r3, #30
 8016e46:	bf49      	itett	mi
 8016e48:	085b      	lsrmi	r3, r3, #1
 8016e4a:	089b      	lsrpl	r3, r3, #2
 8016e4c:	2001      	movmi	r0, #1
 8016e4e:	600b      	strmi	r3, [r1, #0]
 8016e50:	bf5c      	itt	pl
 8016e52:	600b      	strpl	r3, [r1, #0]
 8016e54:	2002      	movpl	r0, #2
 8016e56:	4770      	bx	lr
 8016e58:	b298      	uxth	r0, r3
 8016e5a:	b9a8      	cbnz	r0, 8016e88 <__lo0bits+0x52>
 8016e5c:	0c1b      	lsrs	r3, r3, #16
 8016e5e:	2010      	movs	r0, #16
 8016e60:	f013 0fff 	tst.w	r3, #255	; 0xff
 8016e64:	bf04      	itt	eq
 8016e66:	0a1b      	lsreq	r3, r3, #8
 8016e68:	3008      	addeq	r0, #8
 8016e6a:	071a      	lsls	r2, r3, #28
 8016e6c:	bf04      	itt	eq
 8016e6e:	091b      	lsreq	r3, r3, #4
 8016e70:	3004      	addeq	r0, #4
 8016e72:	079a      	lsls	r2, r3, #30
 8016e74:	bf04      	itt	eq
 8016e76:	089b      	lsreq	r3, r3, #2
 8016e78:	3002      	addeq	r0, #2
 8016e7a:	07da      	lsls	r2, r3, #31
 8016e7c:	d402      	bmi.n	8016e84 <__lo0bits+0x4e>
 8016e7e:	085b      	lsrs	r3, r3, #1
 8016e80:	d006      	beq.n	8016e90 <__lo0bits+0x5a>
 8016e82:	3001      	adds	r0, #1
 8016e84:	600b      	str	r3, [r1, #0]
 8016e86:	4770      	bx	lr
 8016e88:	4610      	mov	r0, r2
 8016e8a:	e7e9      	b.n	8016e60 <__lo0bits+0x2a>
 8016e8c:	2000      	movs	r0, #0
 8016e8e:	4770      	bx	lr
 8016e90:	2020      	movs	r0, #32
 8016e92:	4770      	bx	lr

08016e94 <__i2b>:
 8016e94:	b510      	push	{r4, lr}
 8016e96:	460c      	mov	r4, r1
 8016e98:	2101      	movs	r1, #1
 8016e9a:	f7ff fee9 	bl	8016c70 <_Balloc>
 8016e9e:	2201      	movs	r2, #1
 8016ea0:	6144      	str	r4, [r0, #20]
 8016ea2:	6102      	str	r2, [r0, #16]
 8016ea4:	bd10      	pop	{r4, pc}

08016ea6 <__multiply>:
 8016ea6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016eaa:	4614      	mov	r4, r2
 8016eac:	690a      	ldr	r2, [r1, #16]
 8016eae:	6923      	ldr	r3, [r4, #16]
 8016eb0:	429a      	cmp	r2, r3
 8016eb2:	bfb8      	it	lt
 8016eb4:	460b      	movlt	r3, r1
 8016eb6:	4688      	mov	r8, r1
 8016eb8:	bfbc      	itt	lt
 8016eba:	46a0      	movlt	r8, r4
 8016ebc:	461c      	movlt	r4, r3
 8016ebe:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8016ec2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8016ec6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016eca:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8016ece:	eb07 0609 	add.w	r6, r7, r9
 8016ed2:	42b3      	cmp	r3, r6
 8016ed4:	bfb8      	it	lt
 8016ed6:	3101      	addlt	r1, #1
 8016ed8:	f7ff feca 	bl	8016c70 <_Balloc>
 8016edc:	f100 0514 	add.w	r5, r0, #20
 8016ee0:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8016ee4:	462b      	mov	r3, r5
 8016ee6:	2200      	movs	r2, #0
 8016ee8:	4573      	cmp	r3, lr
 8016eea:	d316      	bcc.n	8016f1a <__multiply+0x74>
 8016eec:	f104 0214 	add.w	r2, r4, #20
 8016ef0:	f108 0114 	add.w	r1, r8, #20
 8016ef4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8016ef8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8016efc:	9300      	str	r3, [sp, #0]
 8016efe:	9b00      	ldr	r3, [sp, #0]
 8016f00:	9201      	str	r2, [sp, #4]
 8016f02:	4293      	cmp	r3, r2
 8016f04:	d80c      	bhi.n	8016f20 <__multiply+0x7a>
 8016f06:	2e00      	cmp	r6, #0
 8016f08:	dd03      	ble.n	8016f12 <__multiply+0x6c>
 8016f0a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8016f0e:	2b00      	cmp	r3, #0
 8016f10:	d05d      	beq.n	8016fce <__multiply+0x128>
 8016f12:	6106      	str	r6, [r0, #16]
 8016f14:	b003      	add	sp, #12
 8016f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f1a:	f843 2b04 	str.w	r2, [r3], #4
 8016f1e:	e7e3      	b.n	8016ee8 <__multiply+0x42>
 8016f20:	f8b2 b000 	ldrh.w	fp, [r2]
 8016f24:	f1bb 0f00 	cmp.w	fp, #0
 8016f28:	d023      	beq.n	8016f72 <__multiply+0xcc>
 8016f2a:	4689      	mov	r9, r1
 8016f2c:	46ac      	mov	ip, r5
 8016f2e:	f04f 0800 	mov.w	r8, #0
 8016f32:	f859 4b04 	ldr.w	r4, [r9], #4
 8016f36:	f8dc a000 	ldr.w	sl, [ip]
 8016f3a:	b2a3      	uxth	r3, r4
 8016f3c:	fa1f fa8a 	uxth.w	sl, sl
 8016f40:	fb0b a303 	mla	r3, fp, r3, sl
 8016f44:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8016f48:	f8dc 4000 	ldr.w	r4, [ip]
 8016f4c:	4443      	add	r3, r8
 8016f4e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8016f52:	fb0b 840a 	mla	r4, fp, sl, r8
 8016f56:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8016f5a:	46e2      	mov	sl, ip
 8016f5c:	b29b      	uxth	r3, r3
 8016f5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8016f62:	454f      	cmp	r7, r9
 8016f64:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8016f68:	f84a 3b04 	str.w	r3, [sl], #4
 8016f6c:	d82b      	bhi.n	8016fc6 <__multiply+0x120>
 8016f6e:	f8cc 8004 	str.w	r8, [ip, #4]
 8016f72:	9b01      	ldr	r3, [sp, #4]
 8016f74:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8016f78:	3204      	adds	r2, #4
 8016f7a:	f1ba 0f00 	cmp.w	sl, #0
 8016f7e:	d020      	beq.n	8016fc2 <__multiply+0x11c>
 8016f80:	682b      	ldr	r3, [r5, #0]
 8016f82:	4689      	mov	r9, r1
 8016f84:	46a8      	mov	r8, r5
 8016f86:	f04f 0b00 	mov.w	fp, #0
 8016f8a:	f8b9 c000 	ldrh.w	ip, [r9]
 8016f8e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8016f92:	fb0a 440c 	mla	r4, sl, ip, r4
 8016f96:	445c      	add	r4, fp
 8016f98:	46c4      	mov	ip, r8
 8016f9a:	b29b      	uxth	r3, r3
 8016f9c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8016fa0:	f84c 3b04 	str.w	r3, [ip], #4
 8016fa4:	f859 3b04 	ldr.w	r3, [r9], #4
 8016fa8:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8016fac:	0c1b      	lsrs	r3, r3, #16
 8016fae:	fb0a b303 	mla	r3, sl, r3, fp
 8016fb2:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8016fb6:	454f      	cmp	r7, r9
 8016fb8:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8016fbc:	d805      	bhi.n	8016fca <__multiply+0x124>
 8016fbe:	f8c8 3004 	str.w	r3, [r8, #4]
 8016fc2:	3504      	adds	r5, #4
 8016fc4:	e79b      	b.n	8016efe <__multiply+0x58>
 8016fc6:	46d4      	mov	ip, sl
 8016fc8:	e7b3      	b.n	8016f32 <__multiply+0x8c>
 8016fca:	46e0      	mov	r8, ip
 8016fcc:	e7dd      	b.n	8016f8a <__multiply+0xe4>
 8016fce:	3e01      	subs	r6, #1
 8016fd0:	e799      	b.n	8016f06 <__multiply+0x60>
	...

08016fd4 <__pow5mult>:
 8016fd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016fd8:	4615      	mov	r5, r2
 8016fda:	f012 0203 	ands.w	r2, r2, #3
 8016fde:	4606      	mov	r6, r0
 8016fe0:	460f      	mov	r7, r1
 8016fe2:	d007      	beq.n	8016ff4 <__pow5mult+0x20>
 8016fe4:	3a01      	subs	r2, #1
 8016fe6:	4c21      	ldr	r4, [pc, #132]	; (801706c <__pow5mult+0x98>)
 8016fe8:	2300      	movs	r3, #0
 8016fea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016fee:	f7ff fe8a 	bl	8016d06 <__multadd>
 8016ff2:	4607      	mov	r7, r0
 8016ff4:	10ad      	asrs	r5, r5, #2
 8016ff6:	d035      	beq.n	8017064 <__pow5mult+0x90>
 8016ff8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8016ffa:	b93c      	cbnz	r4, 801700c <__pow5mult+0x38>
 8016ffc:	2010      	movs	r0, #16
 8016ffe:	f7fc fe1f 	bl	8013c40 <malloc>
 8017002:	6270      	str	r0, [r6, #36]	; 0x24
 8017004:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017008:	6004      	str	r4, [r0, #0]
 801700a:	60c4      	str	r4, [r0, #12]
 801700c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8017010:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8017014:	b94c      	cbnz	r4, 801702a <__pow5mult+0x56>
 8017016:	f240 2171 	movw	r1, #625	; 0x271
 801701a:	4630      	mov	r0, r6
 801701c:	f7ff ff3a 	bl	8016e94 <__i2b>
 8017020:	2300      	movs	r3, #0
 8017022:	f8c8 0008 	str.w	r0, [r8, #8]
 8017026:	4604      	mov	r4, r0
 8017028:	6003      	str	r3, [r0, #0]
 801702a:	f04f 0800 	mov.w	r8, #0
 801702e:	07eb      	lsls	r3, r5, #31
 8017030:	d50a      	bpl.n	8017048 <__pow5mult+0x74>
 8017032:	4639      	mov	r1, r7
 8017034:	4622      	mov	r2, r4
 8017036:	4630      	mov	r0, r6
 8017038:	f7ff ff35 	bl	8016ea6 <__multiply>
 801703c:	4639      	mov	r1, r7
 801703e:	4681      	mov	r9, r0
 8017040:	4630      	mov	r0, r6
 8017042:	f7ff fe49 	bl	8016cd8 <_Bfree>
 8017046:	464f      	mov	r7, r9
 8017048:	106d      	asrs	r5, r5, #1
 801704a:	d00b      	beq.n	8017064 <__pow5mult+0x90>
 801704c:	6820      	ldr	r0, [r4, #0]
 801704e:	b938      	cbnz	r0, 8017060 <__pow5mult+0x8c>
 8017050:	4622      	mov	r2, r4
 8017052:	4621      	mov	r1, r4
 8017054:	4630      	mov	r0, r6
 8017056:	f7ff ff26 	bl	8016ea6 <__multiply>
 801705a:	6020      	str	r0, [r4, #0]
 801705c:	f8c0 8000 	str.w	r8, [r0]
 8017060:	4604      	mov	r4, r0
 8017062:	e7e4      	b.n	801702e <__pow5mult+0x5a>
 8017064:	4638      	mov	r0, r7
 8017066:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801706a:	bf00      	nop
 801706c:	0801a008 	.word	0x0801a008

08017070 <__lshift>:
 8017070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017074:	460c      	mov	r4, r1
 8017076:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801707a:	6923      	ldr	r3, [r4, #16]
 801707c:	6849      	ldr	r1, [r1, #4]
 801707e:	eb0a 0903 	add.w	r9, sl, r3
 8017082:	68a3      	ldr	r3, [r4, #8]
 8017084:	4607      	mov	r7, r0
 8017086:	4616      	mov	r6, r2
 8017088:	f109 0501 	add.w	r5, r9, #1
 801708c:	42ab      	cmp	r3, r5
 801708e:	db32      	blt.n	80170f6 <__lshift+0x86>
 8017090:	4638      	mov	r0, r7
 8017092:	f7ff fded 	bl	8016c70 <_Balloc>
 8017096:	2300      	movs	r3, #0
 8017098:	4680      	mov	r8, r0
 801709a:	f100 0114 	add.w	r1, r0, #20
 801709e:	461a      	mov	r2, r3
 80170a0:	4553      	cmp	r3, sl
 80170a2:	db2b      	blt.n	80170fc <__lshift+0x8c>
 80170a4:	6920      	ldr	r0, [r4, #16]
 80170a6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80170aa:	f104 0314 	add.w	r3, r4, #20
 80170ae:	f016 021f 	ands.w	r2, r6, #31
 80170b2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80170b6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80170ba:	d025      	beq.n	8017108 <__lshift+0x98>
 80170bc:	f1c2 0e20 	rsb	lr, r2, #32
 80170c0:	2000      	movs	r0, #0
 80170c2:	681e      	ldr	r6, [r3, #0]
 80170c4:	468a      	mov	sl, r1
 80170c6:	4096      	lsls	r6, r2
 80170c8:	4330      	orrs	r0, r6
 80170ca:	f84a 0b04 	str.w	r0, [sl], #4
 80170ce:	f853 0b04 	ldr.w	r0, [r3], #4
 80170d2:	459c      	cmp	ip, r3
 80170d4:	fa20 f00e 	lsr.w	r0, r0, lr
 80170d8:	d814      	bhi.n	8017104 <__lshift+0x94>
 80170da:	6048      	str	r0, [r1, #4]
 80170dc:	b108      	cbz	r0, 80170e2 <__lshift+0x72>
 80170de:	f109 0502 	add.w	r5, r9, #2
 80170e2:	3d01      	subs	r5, #1
 80170e4:	4638      	mov	r0, r7
 80170e6:	f8c8 5010 	str.w	r5, [r8, #16]
 80170ea:	4621      	mov	r1, r4
 80170ec:	f7ff fdf4 	bl	8016cd8 <_Bfree>
 80170f0:	4640      	mov	r0, r8
 80170f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80170f6:	3101      	adds	r1, #1
 80170f8:	005b      	lsls	r3, r3, #1
 80170fa:	e7c7      	b.n	801708c <__lshift+0x1c>
 80170fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8017100:	3301      	adds	r3, #1
 8017102:	e7cd      	b.n	80170a0 <__lshift+0x30>
 8017104:	4651      	mov	r1, sl
 8017106:	e7dc      	b.n	80170c2 <__lshift+0x52>
 8017108:	3904      	subs	r1, #4
 801710a:	f853 2b04 	ldr.w	r2, [r3], #4
 801710e:	f841 2f04 	str.w	r2, [r1, #4]!
 8017112:	459c      	cmp	ip, r3
 8017114:	d8f9      	bhi.n	801710a <__lshift+0x9a>
 8017116:	e7e4      	b.n	80170e2 <__lshift+0x72>

08017118 <__mcmp>:
 8017118:	6903      	ldr	r3, [r0, #16]
 801711a:	690a      	ldr	r2, [r1, #16]
 801711c:	1a9b      	subs	r3, r3, r2
 801711e:	b530      	push	{r4, r5, lr}
 8017120:	d10c      	bne.n	801713c <__mcmp+0x24>
 8017122:	0092      	lsls	r2, r2, #2
 8017124:	3014      	adds	r0, #20
 8017126:	3114      	adds	r1, #20
 8017128:	1884      	adds	r4, r0, r2
 801712a:	4411      	add	r1, r2
 801712c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8017130:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8017134:	4295      	cmp	r5, r2
 8017136:	d003      	beq.n	8017140 <__mcmp+0x28>
 8017138:	d305      	bcc.n	8017146 <__mcmp+0x2e>
 801713a:	2301      	movs	r3, #1
 801713c:	4618      	mov	r0, r3
 801713e:	bd30      	pop	{r4, r5, pc}
 8017140:	42a0      	cmp	r0, r4
 8017142:	d3f3      	bcc.n	801712c <__mcmp+0x14>
 8017144:	e7fa      	b.n	801713c <__mcmp+0x24>
 8017146:	f04f 33ff 	mov.w	r3, #4294967295
 801714a:	e7f7      	b.n	801713c <__mcmp+0x24>

0801714c <__mdiff>:
 801714c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017150:	460d      	mov	r5, r1
 8017152:	4607      	mov	r7, r0
 8017154:	4611      	mov	r1, r2
 8017156:	4628      	mov	r0, r5
 8017158:	4614      	mov	r4, r2
 801715a:	f7ff ffdd 	bl	8017118 <__mcmp>
 801715e:	1e06      	subs	r6, r0, #0
 8017160:	d108      	bne.n	8017174 <__mdiff+0x28>
 8017162:	4631      	mov	r1, r6
 8017164:	4638      	mov	r0, r7
 8017166:	f7ff fd83 	bl	8016c70 <_Balloc>
 801716a:	2301      	movs	r3, #1
 801716c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8017170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017174:	bfa4      	itt	ge
 8017176:	4623      	movge	r3, r4
 8017178:	462c      	movge	r4, r5
 801717a:	4638      	mov	r0, r7
 801717c:	6861      	ldr	r1, [r4, #4]
 801717e:	bfa6      	itte	ge
 8017180:	461d      	movge	r5, r3
 8017182:	2600      	movge	r6, #0
 8017184:	2601      	movlt	r6, #1
 8017186:	f7ff fd73 	bl	8016c70 <_Balloc>
 801718a:	692b      	ldr	r3, [r5, #16]
 801718c:	60c6      	str	r6, [r0, #12]
 801718e:	6926      	ldr	r6, [r4, #16]
 8017190:	f105 0914 	add.w	r9, r5, #20
 8017194:	f104 0214 	add.w	r2, r4, #20
 8017198:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 801719c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80171a0:	f100 0514 	add.w	r5, r0, #20
 80171a4:	f04f 0e00 	mov.w	lr, #0
 80171a8:	f852 ab04 	ldr.w	sl, [r2], #4
 80171ac:	f859 4b04 	ldr.w	r4, [r9], #4
 80171b0:	fa1e f18a 	uxtah	r1, lr, sl
 80171b4:	b2a3      	uxth	r3, r4
 80171b6:	1ac9      	subs	r1, r1, r3
 80171b8:	0c23      	lsrs	r3, r4, #16
 80171ba:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80171be:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80171c2:	b289      	uxth	r1, r1
 80171c4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80171c8:	45c8      	cmp	r8, r9
 80171ca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80171ce:	4694      	mov	ip, r2
 80171d0:	f845 3b04 	str.w	r3, [r5], #4
 80171d4:	d8e8      	bhi.n	80171a8 <__mdiff+0x5c>
 80171d6:	45bc      	cmp	ip, r7
 80171d8:	d304      	bcc.n	80171e4 <__mdiff+0x98>
 80171da:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80171de:	b183      	cbz	r3, 8017202 <__mdiff+0xb6>
 80171e0:	6106      	str	r6, [r0, #16]
 80171e2:	e7c5      	b.n	8017170 <__mdiff+0x24>
 80171e4:	f85c 1b04 	ldr.w	r1, [ip], #4
 80171e8:	fa1e f381 	uxtah	r3, lr, r1
 80171ec:	141a      	asrs	r2, r3, #16
 80171ee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80171f2:	b29b      	uxth	r3, r3
 80171f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80171f8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80171fc:	f845 3b04 	str.w	r3, [r5], #4
 8017200:	e7e9      	b.n	80171d6 <__mdiff+0x8a>
 8017202:	3e01      	subs	r6, #1
 8017204:	e7e9      	b.n	80171da <__mdiff+0x8e>
	...

08017208 <__ulp>:
 8017208:	4b12      	ldr	r3, [pc, #72]	; (8017254 <__ulp+0x4c>)
 801720a:	ee10 2a90 	vmov	r2, s1
 801720e:	401a      	ands	r2, r3
 8017210:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8017214:	2b00      	cmp	r3, #0
 8017216:	dd04      	ble.n	8017222 <__ulp+0x1a>
 8017218:	2000      	movs	r0, #0
 801721a:	4619      	mov	r1, r3
 801721c:	ec41 0b10 	vmov	d0, r0, r1
 8017220:	4770      	bx	lr
 8017222:	425b      	negs	r3, r3
 8017224:	151b      	asrs	r3, r3, #20
 8017226:	2b13      	cmp	r3, #19
 8017228:	f04f 0000 	mov.w	r0, #0
 801722c:	f04f 0100 	mov.w	r1, #0
 8017230:	dc04      	bgt.n	801723c <__ulp+0x34>
 8017232:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8017236:	fa42 f103 	asr.w	r1, r2, r3
 801723a:	e7ef      	b.n	801721c <__ulp+0x14>
 801723c:	3b14      	subs	r3, #20
 801723e:	2b1e      	cmp	r3, #30
 8017240:	f04f 0201 	mov.w	r2, #1
 8017244:	bfda      	itte	le
 8017246:	f1c3 031f 	rsble	r3, r3, #31
 801724a:	fa02 f303 	lslle.w	r3, r2, r3
 801724e:	4613      	movgt	r3, r2
 8017250:	4618      	mov	r0, r3
 8017252:	e7e3      	b.n	801721c <__ulp+0x14>
 8017254:	7ff00000 	.word	0x7ff00000

08017258 <__b2d>:
 8017258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801725a:	6905      	ldr	r5, [r0, #16]
 801725c:	f100 0714 	add.w	r7, r0, #20
 8017260:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8017264:	1f2e      	subs	r6, r5, #4
 8017266:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801726a:	4620      	mov	r0, r4
 801726c:	f7ff fdc4 	bl	8016df8 <__hi0bits>
 8017270:	f1c0 0320 	rsb	r3, r0, #32
 8017274:	280a      	cmp	r0, #10
 8017276:	600b      	str	r3, [r1, #0]
 8017278:	f8df c074 	ldr.w	ip, [pc, #116]	; 80172f0 <__b2d+0x98>
 801727c:	dc14      	bgt.n	80172a8 <__b2d+0x50>
 801727e:	f1c0 0e0b 	rsb	lr, r0, #11
 8017282:	fa24 f10e 	lsr.w	r1, r4, lr
 8017286:	42b7      	cmp	r7, r6
 8017288:	ea41 030c 	orr.w	r3, r1, ip
 801728c:	bf34      	ite	cc
 801728e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8017292:	2100      	movcs	r1, #0
 8017294:	3015      	adds	r0, #21
 8017296:	fa04 f000 	lsl.w	r0, r4, r0
 801729a:	fa21 f10e 	lsr.w	r1, r1, lr
 801729e:	ea40 0201 	orr.w	r2, r0, r1
 80172a2:	ec43 2b10 	vmov	d0, r2, r3
 80172a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80172a8:	42b7      	cmp	r7, r6
 80172aa:	bf3a      	itte	cc
 80172ac:	f1a5 0608 	subcc.w	r6, r5, #8
 80172b0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80172b4:	2100      	movcs	r1, #0
 80172b6:	380b      	subs	r0, #11
 80172b8:	d015      	beq.n	80172e6 <__b2d+0x8e>
 80172ba:	4084      	lsls	r4, r0
 80172bc:	f1c0 0520 	rsb	r5, r0, #32
 80172c0:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80172c4:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80172c8:	42be      	cmp	r6, r7
 80172ca:	fa21 fc05 	lsr.w	ip, r1, r5
 80172ce:	ea44 030c 	orr.w	r3, r4, ip
 80172d2:	bf8c      	ite	hi
 80172d4:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80172d8:	2400      	movls	r4, #0
 80172da:	fa01 f000 	lsl.w	r0, r1, r0
 80172de:	40ec      	lsrs	r4, r5
 80172e0:	ea40 0204 	orr.w	r2, r0, r4
 80172e4:	e7dd      	b.n	80172a2 <__b2d+0x4a>
 80172e6:	ea44 030c 	orr.w	r3, r4, ip
 80172ea:	460a      	mov	r2, r1
 80172ec:	e7d9      	b.n	80172a2 <__b2d+0x4a>
 80172ee:	bf00      	nop
 80172f0:	3ff00000 	.word	0x3ff00000

080172f4 <__d2b>:
 80172f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80172f8:	460e      	mov	r6, r1
 80172fa:	2101      	movs	r1, #1
 80172fc:	ec59 8b10 	vmov	r8, r9, d0
 8017300:	4615      	mov	r5, r2
 8017302:	f7ff fcb5 	bl	8016c70 <_Balloc>
 8017306:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801730a:	4607      	mov	r7, r0
 801730c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017310:	bb34      	cbnz	r4, 8017360 <__d2b+0x6c>
 8017312:	9301      	str	r3, [sp, #4]
 8017314:	f1b8 0300 	subs.w	r3, r8, #0
 8017318:	d027      	beq.n	801736a <__d2b+0x76>
 801731a:	a802      	add	r0, sp, #8
 801731c:	f840 3d08 	str.w	r3, [r0, #-8]!
 8017320:	f7ff fd89 	bl	8016e36 <__lo0bits>
 8017324:	9900      	ldr	r1, [sp, #0]
 8017326:	b1f0      	cbz	r0, 8017366 <__d2b+0x72>
 8017328:	9a01      	ldr	r2, [sp, #4]
 801732a:	f1c0 0320 	rsb	r3, r0, #32
 801732e:	fa02 f303 	lsl.w	r3, r2, r3
 8017332:	430b      	orrs	r3, r1
 8017334:	40c2      	lsrs	r2, r0
 8017336:	617b      	str	r3, [r7, #20]
 8017338:	9201      	str	r2, [sp, #4]
 801733a:	9b01      	ldr	r3, [sp, #4]
 801733c:	61bb      	str	r3, [r7, #24]
 801733e:	2b00      	cmp	r3, #0
 8017340:	bf14      	ite	ne
 8017342:	2102      	movne	r1, #2
 8017344:	2101      	moveq	r1, #1
 8017346:	6139      	str	r1, [r7, #16]
 8017348:	b1c4      	cbz	r4, 801737c <__d2b+0x88>
 801734a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801734e:	4404      	add	r4, r0
 8017350:	6034      	str	r4, [r6, #0]
 8017352:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8017356:	6028      	str	r0, [r5, #0]
 8017358:	4638      	mov	r0, r7
 801735a:	b003      	add	sp, #12
 801735c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017360:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017364:	e7d5      	b.n	8017312 <__d2b+0x1e>
 8017366:	6179      	str	r1, [r7, #20]
 8017368:	e7e7      	b.n	801733a <__d2b+0x46>
 801736a:	a801      	add	r0, sp, #4
 801736c:	f7ff fd63 	bl	8016e36 <__lo0bits>
 8017370:	9b01      	ldr	r3, [sp, #4]
 8017372:	617b      	str	r3, [r7, #20]
 8017374:	2101      	movs	r1, #1
 8017376:	6139      	str	r1, [r7, #16]
 8017378:	3020      	adds	r0, #32
 801737a:	e7e5      	b.n	8017348 <__d2b+0x54>
 801737c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8017380:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8017384:	6030      	str	r0, [r6, #0]
 8017386:	6918      	ldr	r0, [r3, #16]
 8017388:	f7ff fd36 	bl	8016df8 <__hi0bits>
 801738c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8017390:	e7e1      	b.n	8017356 <__d2b+0x62>

08017392 <__ratio>:
 8017392:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017396:	4688      	mov	r8, r1
 8017398:	4669      	mov	r1, sp
 801739a:	4681      	mov	r9, r0
 801739c:	f7ff ff5c 	bl	8017258 <__b2d>
 80173a0:	a901      	add	r1, sp, #4
 80173a2:	4640      	mov	r0, r8
 80173a4:	ec57 6b10 	vmov	r6, r7, d0
 80173a8:	f7ff ff56 	bl	8017258 <__b2d>
 80173ac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80173b0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80173b4:	eba3 0c02 	sub.w	ip, r3, r2
 80173b8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80173bc:	1a9b      	subs	r3, r3, r2
 80173be:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80173c2:	ec5b ab10 	vmov	sl, fp, d0
 80173c6:	2b00      	cmp	r3, #0
 80173c8:	bfce      	itee	gt
 80173ca:	463a      	movgt	r2, r7
 80173cc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80173d0:	465a      	movle	r2, fp
 80173d2:	4659      	mov	r1, fp
 80173d4:	463d      	mov	r5, r7
 80173d6:	bfd4      	ite	le
 80173d8:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80173dc:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 80173e0:	4630      	mov	r0, r6
 80173e2:	ee10 2a10 	vmov	r2, s0
 80173e6:	460b      	mov	r3, r1
 80173e8:	4629      	mov	r1, r5
 80173ea:	f7e9 fa3f 	bl	800086c <__aeabi_ddiv>
 80173ee:	ec41 0b10 	vmov	d0, r0, r1
 80173f2:	b003      	add	sp, #12
 80173f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080173f8 <__copybits>:
 80173f8:	3901      	subs	r1, #1
 80173fa:	b510      	push	{r4, lr}
 80173fc:	1149      	asrs	r1, r1, #5
 80173fe:	6914      	ldr	r4, [r2, #16]
 8017400:	3101      	adds	r1, #1
 8017402:	f102 0314 	add.w	r3, r2, #20
 8017406:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801740a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801740e:	42a3      	cmp	r3, r4
 8017410:	4602      	mov	r2, r0
 8017412:	d303      	bcc.n	801741c <__copybits+0x24>
 8017414:	2300      	movs	r3, #0
 8017416:	428a      	cmp	r2, r1
 8017418:	d305      	bcc.n	8017426 <__copybits+0x2e>
 801741a:	bd10      	pop	{r4, pc}
 801741c:	f853 2b04 	ldr.w	r2, [r3], #4
 8017420:	f840 2b04 	str.w	r2, [r0], #4
 8017424:	e7f3      	b.n	801740e <__copybits+0x16>
 8017426:	f842 3b04 	str.w	r3, [r2], #4
 801742a:	e7f4      	b.n	8017416 <__copybits+0x1e>

0801742c <__any_on>:
 801742c:	f100 0214 	add.w	r2, r0, #20
 8017430:	6900      	ldr	r0, [r0, #16]
 8017432:	114b      	asrs	r3, r1, #5
 8017434:	4298      	cmp	r0, r3
 8017436:	b510      	push	{r4, lr}
 8017438:	db11      	blt.n	801745e <__any_on+0x32>
 801743a:	dd0a      	ble.n	8017452 <__any_on+0x26>
 801743c:	f011 011f 	ands.w	r1, r1, #31
 8017440:	d007      	beq.n	8017452 <__any_on+0x26>
 8017442:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8017446:	fa24 f001 	lsr.w	r0, r4, r1
 801744a:	fa00 f101 	lsl.w	r1, r0, r1
 801744e:	428c      	cmp	r4, r1
 8017450:	d10b      	bne.n	801746a <__any_on+0x3e>
 8017452:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8017456:	4293      	cmp	r3, r2
 8017458:	d803      	bhi.n	8017462 <__any_on+0x36>
 801745a:	2000      	movs	r0, #0
 801745c:	bd10      	pop	{r4, pc}
 801745e:	4603      	mov	r3, r0
 8017460:	e7f7      	b.n	8017452 <__any_on+0x26>
 8017462:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8017466:	2900      	cmp	r1, #0
 8017468:	d0f5      	beq.n	8017456 <__any_on+0x2a>
 801746a:	2001      	movs	r0, #1
 801746c:	e7f6      	b.n	801745c <__any_on+0x30>

0801746e <_calloc_r>:
 801746e:	b538      	push	{r3, r4, r5, lr}
 8017470:	fb02 f401 	mul.w	r4, r2, r1
 8017474:	4621      	mov	r1, r4
 8017476:	f7fc fc6d 	bl	8013d54 <_malloc_r>
 801747a:	4605      	mov	r5, r0
 801747c:	b118      	cbz	r0, 8017486 <_calloc_r+0x18>
 801747e:	4622      	mov	r2, r4
 8017480:	2100      	movs	r1, #0
 8017482:	f7fc fc11 	bl	8013ca8 <memset>
 8017486:	4628      	mov	r0, r5
 8017488:	bd38      	pop	{r3, r4, r5, pc}

0801748a <__ssputs_r>:
 801748a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801748e:	688e      	ldr	r6, [r1, #8]
 8017490:	429e      	cmp	r6, r3
 8017492:	4682      	mov	sl, r0
 8017494:	460c      	mov	r4, r1
 8017496:	4690      	mov	r8, r2
 8017498:	4699      	mov	r9, r3
 801749a:	d837      	bhi.n	801750c <__ssputs_r+0x82>
 801749c:	898a      	ldrh	r2, [r1, #12]
 801749e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80174a2:	d031      	beq.n	8017508 <__ssputs_r+0x7e>
 80174a4:	6825      	ldr	r5, [r4, #0]
 80174a6:	6909      	ldr	r1, [r1, #16]
 80174a8:	1a6f      	subs	r7, r5, r1
 80174aa:	6965      	ldr	r5, [r4, #20]
 80174ac:	2302      	movs	r3, #2
 80174ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80174b2:	fb95 f5f3 	sdiv	r5, r5, r3
 80174b6:	f109 0301 	add.w	r3, r9, #1
 80174ba:	443b      	add	r3, r7
 80174bc:	429d      	cmp	r5, r3
 80174be:	bf38      	it	cc
 80174c0:	461d      	movcc	r5, r3
 80174c2:	0553      	lsls	r3, r2, #21
 80174c4:	d530      	bpl.n	8017528 <__ssputs_r+0x9e>
 80174c6:	4629      	mov	r1, r5
 80174c8:	f7fc fc44 	bl	8013d54 <_malloc_r>
 80174cc:	4606      	mov	r6, r0
 80174ce:	b950      	cbnz	r0, 80174e6 <__ssputs_r+0x5c>
 80174d0:	230c      	movs	r3, #12
 80174d2:	f8ca 3000 	str.w	r3, [sl]
 80174d6:	89a3      	ldrh	r3, [r4, #12]
 80174d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80174dc:	81a3      	strh	r3, [r4, #12]
 80174de:	f04f 30ff 	mov.w	r0, #4294967295
 80174e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80174e6:	463a      	mov	r2, r7
 80174e8:	6921      	ldr	r1, [r4, #16]
 80174ea:	f7fc fbb9 	bl	8013c60 <memcpy>
 80174ee:	89a3      	ldrh	r3, [r4, #12]
 80174f0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80174f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80174f8:	81a3      	strh	r3, [r4, #12]
 80174fa:	6126      	str	r6, [r4, #16]
 80174fc:	6165      	str	r5, [r4, #20]
 80174fe:	443e      	add	r6, r7
 8017500:	1bed      	subs	r5, r5, r7
 8017502:	6026      	str	r6, [r4, #0]
 8017504:	60a5      	str	r5, [r4, #8]
 8017506:	464e      	mov	r6, r9
 8017508:	454e      	cmp	r6, r9
 801750a:	d900      	bls.n	801750e <__ssputs_r+0x84>
 801750c:	464e      	mov	r6, r9
 801750e:	4632      	mov	r2, r6
 8017510:	4641      	mov	r1, r8
 8017512:	6820      	ldr	r0, [r4, #0]
 8017514:	f7fc fbaf 	bl	8013c76 <memmove>
 8017518:	68a3      	ldr	r3, [r4, #8]
 801751a:	1b9b      	subs	r3, r3, r6
 801751c:	60a3      	str	r3, [r4, #8]
 801751e:	6823      	ldr	r3, [r4, #0]
 8017520:	441e      	add	r6, r3
 8017522:	6026      	str	r6, [r4, #0]
 8017524:	2000      	movs	r0, #0
 8017526:	e7dc      	b.n	80174e2 <__ssputs_r+0x58>
 8017528:	462a      	mov	r2, r5
 801752a:	f000 fd1a 	bl	8017f62 <_realloc_r>
 801752e:	4606      	mov	r6, r0
 8017530:	2800      	cmp	r0, #0
 8017532:	d1e2      	bne.n	80174fa <__ssputs_r+0x70>
 8017534:	6921      	ldr	r1, [r4, #16]
 8017536:	4650      	mov	r0, sl
 8017538:	f7fc fbbe 	bl	8013cb8 <_free_r>
 801753c:	e7c8      	b.n	80174d0 <__ssputs_r+0x46>
	...

08017540 <_svfiprintf_r>:
 8017540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017544:	461d      	mov	r5, r3
 8017546:	898b      	ldrh	r3, [r1, #12]
 8017548:	061f      	lsls	r7, r3, #24
 801754a:	b09d      	sub	sp, #116	; 0x74
 801754c:	4680      	mov	r8, r0
 801754e:	460c      	mov	r4, r1
 8017550:	4616      	mov	r6, r2
 8017552:	d50f      	bpl.n	8017574 <_svfiprintf_r+0x34>
 8017554:	690b      	ldr	r3, [r1, #16]
 8017556:	b96b      	cbnz	r3, 8017574 <_svfiprintf_r+0x34>
 8017558:	2140      	movs	r1, #64	; 0x40
 801755a:	f7fc fbfb 	bl	8013d54 <_malloc_r>
 801755e:	6020      	str	r0, [r4, #0]
 8017560:	6120      	str	r0, [r4, #16]
 8017562:	b928      	cbnz	r0, 8017570 <_svfiprintf_r+0x30>
 8017564:	230c      	movs	r3, #12
 8017566:	f8c8 3000 	str.w	r3, [r8]
 801756a:	f04f 30ff 	mov.w	r0, #4294967295
 801756e:	e0c8      	b.n	8017702 <_svfiprintf_r+0x1c2>
 8017570:	2340      	movs	r3, #64	; 0x40
 8017572:	6163      	str	r3, [r4, #20]
 8017574:	2300      	movs	r3, #0
 8017576:	9309      	str	r3, [sp, #36]	; 0x24
 8017578:	2320      	movs	r3, #32
 801757a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801757e:	2330      	movs	r3, #48	; 0x30
 8017580:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017584:	9503      	str	r5, [sp, #12]
 8017586:	f04f 0b01 	mov.w	fp, #1
 801758a:	4637      	mov	r7, r6
 801758c:	463d      	mov	r5, r7
 801758e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8017592:	b10b      	cbz	r3, 8017598 <_svfiprintf_r+0x58>
 8017594:	2b25      	cmp	r3, #37	; 0x25
 8017596:	d13e      	bne.n	8017616 <_svfiprintf_r+0xd6>
 8017598:	ebb7 0a06 	subs.w	sl, r7, r6
 801759c:	d00b      	beq.n	80175b6 <_svfiprintf_r+0x76>
 801759e:	4653      	mov	r3, sl
 80175a0:	4632      	mov	r2, r6
 80175a2:	4621      	mov	r1, r4
 80175a4:	4640      	mov	r0, r8
 80175a6:	f7ff ff70 	bl	801748a <__ssputs_r>
 80175aa:	3001      	adds	r0, #1
 80175ac:	f000 80a4 	beq.w	80176f8 <_svfiprintf_r+0x1b8>
 80175b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80175b2:	4453      	add	r3, sl
 80175b4:	9309      	str	r3, [sp, #36]	; 0x24
 80175b6:	783b      	ldrb	r3, [r7, #0]
 80175b8:	2b00      	cmp	r3, #0
 80175ba:	f000 809d 	beq.w	80176f8 <_svfiprintf_r+0x1b8>
 80175be:	2300      	movs	r3, #0
 80175c0:	f04f 32ff 	mov.w	r2, #4294967295
 80175c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80175c8:	9304      	str	r3, [sp, #16]
 80175ca:	9307      	str	r3, [sp, #28]
 80175cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80175d0:	931a      	str	r3, [sp, #104]	; 0x68
 80175d2:	462f      	mov	r7, r5
 80175d4:	2205      	movs	r2, #5
 80175d6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80175da:	4850      	ldr	r0, [pc, #320]	; (801771c <_svfiprintf_r+0x1dc>)
 80175dc:	f7e8 fe10 	bl	8000200 <memchr>
 80175e0:	9b04      	ldr	r3, [sp, #16]
 80175e2:	b9d0      	cbnz	r0, 801761a <_svfiprintf_r+0xda>
 80175e4:	06d9      	lsls	r1, r3, #27
 80175e6:	bf44      	itt	mi
 80175e8:	2220      	movmi	r2, #32
 80175ea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80175ee:	071a      	lsls	r2, r3, #28
 80175f0:	bf44      	itt	mi
 80175f2:	222b      	movmi	r2, #43	; 0x2b
 80175f4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80175f8:	782a      	ldrb	r2, [r5, #0]
 80175fa:	2a2a      	cmp	r2, #42	; 0x2a
 80175fc:	d015      	beq.n	801762a <_svfiprintf_r+0xea>
 80175fe:	9a07      	ldr	r2, [sp, #28]
 8017600:	462f      	mov	r7, r5
 8017602:	2000      	movs	r0, #0
 8017604:	250a      	movs	r5, #10
 8017606:	4639      	mov	r1, r7
 8017608:	f811 3b01 	ldrb.w	r3, [r1], #1
 801760c:	3b30      	subs	r3, #48	; 0x30
 801760e:	2b09      	cmp	r3, #9
 8017610:	d94d      	bls.n	80176ae <_svfiprintf_r+0x16e>
 8017612:	b1b8      	cbz	r0, 8017644 <_svfiprintf_r+0x104>
 8017614:	e00f      	b.n	8017636 <_svfiprintf_r+0xf6>
 8017616:	462f      	mov	r7, r5
 8017618:	e7b8      	b.n	801758c <_svfiprintf_r+0x4c>
 801761a:	4a40      	ldr	r2, [pc, #256]	; (801771c <_svfiprintf_r+0x1dc>)
 801761c:	1a80      	subs	r0, r0, r2
 801761e:	fa0b f000 	lsl.w	r0, fp, r0
 8017622:	4318      	orrs	r0, r3
 8017624:	9004      	str	r0, [sp, #16]
 8017626:	463d      	mov	r5, r7
 8017628:	e7d3      	b.n	80175d2 <_svfiprintf_r+0x92>
 801762a:	9a03      	ldr	r2, [sp, #12]
 801762c:	1d11      	adds	r1, r2, #4
 801762e:	6812      	ldr	r2, [r2, #0]
 8017630:	9103      	str	r1, [sp, #12]
 8017632:	2a00      	cmp	r2, #0
 8017634:	db01      	blt.n	801763a <_svfiprintf_r+0xfa>
 8017636:	9207      	str	r2, [sp, #28]
 8017638:	e004      	b.n	8017644 <_svfiprintf_r+0x104>
 801763a:	4252      	negs	r2, r2
 801763c:	f043 0302 	orr.w	r3, r3, #2
 8017640:	9207      	str	r2, [sp, #28]
 8017642:	9304      	str	r3, [sp, #16]
 8017644:	783b      	ldrb	r3, [r7, #0]
 8017646:	2b2e      	cmp	r3, #46	; 0x2e
 8017648:	d10c      	bne.n	8017664 <_svfiprintf_r+0x124>
 801764a:	787b      	ldrb	r3, [r7, #1]
 801764c:	2b2a      	cmp	r3, #42	; 0x2a
 801764e:	d133      	bne.n	80176b8 <_svfiprintf_r+0x178>
 8017650:	9b03      	ldr	r3, [sp, #12]
 8017652:	1d1a      	adds	r2, r3, #4
 8017654:	681b      	ldr	r3, [r3, #0]
 8017656:	9203      	str	r2, [sp, #12]
 8017658:	2b00      	cmp	r3, #0
 801765a:	bfb8      	it	lt
 801765c:	f04f 33ff 	movlt.w	r3, #4294967295
 8017660:	3702      	adds	r7, #2
 8017662:	9305      	str	r3, [sp, #20]
 8017664:	4d2e      	ldr	r5, [pc, #184]	; (8017720 <_svfiprintf_r+0x1e0>)
 8017666:	7839      	ldrb	r1, [r7, #0]
 8017668:	2203      	movs	r2, #3
 801766a:	4628      	mov	r0, r5
 801766c:	f7e8 fdc8 	bl	8000200 <memchr>
 8017670:	b138      	cbz	r0, 8017682 <_svfiprintf_r+0x142>
 8017672:	2340      	movs	r3, #64	; 0x40
 8017674:	1b40      	subs	r0, r0, r5
 8017676:	fa03 f000 	lsl.w	r0, r3, r0
 801767a:	9b04      	ldr	r3, [sp, #16]
 801767c:	4303      	orrs	r3, r0
 801767e:	3701      	adds	r7, #1
 8017680:	9304      	str	r3, [sp, #16]
 8017682:	7839      	ldrb	r1, [r7, #0]
 8017684:	4827      	ldr	r0, [pc, #156]	; (8017724 <_svfiprintf_r+0x1e4>)
 8017686:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801768a:	2206      	movs	r2, #6
 801768c:	1c7e      	adds	r6, r7, #1
 801768e:	f7e8 fdb7 	bl	8000200 <memchr>
 8017692:	2800      	cmp	r0, #0
 8017694:	d038      	beq.n	8017708 <_svfiprintf_r+0x1c8>
 8017696:	4b24      	ldr	r3, [pc, #144]	; (8017728 <_svfiprintf_r+0x1e8>)
 8017698:	bb13      	cbnz	r3, 80176e0 <_svfiprintf_r+0x1a0>
 801769a:	9b03      	ldr	r3, [sp, #12]
 801769c:	3307      	adds	r3, #7
 801769e:	f023 0307 	bic.w	r3, r3, #7
 80176a2:	3308      	adds	r3, #8
 80176a4:	9303      	str	r3, [sp, #12]
 80176a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80176a8:	444b      	add	r3, r9
 80176aa:	9309      	str	r3, [sp, #36]	; 0x24
 80176ac:	e76d      	b.n	801758a <_svfiprintf_r+0x4a>
 80176ae:	fb05 3202 	mla	r2, r5, r2, r3
 80176b2:	2001      	movs	r0, #1
 80176b4:	460f      	mov	r7, r1
 80176b6:	e7a6      	b.n	8017606 <_svfiprintf_r+0xc6>
 80176b8:	2300      	movs	r3, #0
 80176ba:	3701      	adds	r7, #1
 80176bc:	9305      	str	r3, [sp, #20]
 80176be:	4619      	mov	r1, r3
 80176c0:	250a      	movs	r5, #10
 80176c2:	4638      	mov	r0, r7
 80176c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80176c8:	3a30      	subs	r2, #48	; 0x30
 80176ca:	2a09      	cmp	r2, #9
 80176cc:	d903      	bls.n	80176d6 <_svfiprintf_r+0x196>
 80176ce:	2b00      	cmp	r3, #0
 80176d0:	d0c8      	beq.n	8017664 <_svfiprintf_r+0x124>
 80176d2:	9105      	str	r1, [sp, #20]
 80176d4:	e7c6      	b.n	8017664 <_svfiprintf_r+0x124>
 80176d6:	fb05 2101 	mla	r1, r5, r1, r2
 80176da:	2301      	movs	r3, #1
 80176dc:	4607      	mov	r7, r0
 80176de:	e7f0      	b.n	80176c2 <_svfiprintf_r+0x182>
 80176e0:	ab03      	add	r3, sp, #12
 80176e2:	9300      	str	r3, [sp, #0]
 80176e4:	4622      	mov	r2, r4
 80176e6:	4b11      	ldr	r3, [pc, #68]	; (801772c <_svfiprintf_r+0x1ec>)
 80176e8:	a904      	add	r1, sp, #16
 80176ea:	4640      	mov	r0, r8
 80176ec:	f7fc fc20 	bl	8013f30 <_printf_float>
 80176f0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80176f4:	4681      	mov	r9, r0
 80176f6:	d1d6      	bne.n	80176a6 <_svfiprintf_r+0x166>
 80176f8:	89a3      	ldrh	r3, [r4, #12]
 80176fa:	065b      	lsls	r3, r3, #25
 80176fc:	f53f af35 	bmi.w	801756a <_svfiprintf_r+0x2a>
 8017700:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017702:	b01d      	add	sp, #116	; 0x74
 8017704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017708:	ab03      	add	r3, sp, #12
 801770a:	9300      	str	r3, [sp, #0]
 801770c:	4622      	mov	r2, r4
 801770e:	4b07      	ldr	r3, [pc, #28]	; (801772c <_svfiprintf_r+0x1ec>)
 8017710:	a904      	add	r1, sp, #16
 8017712:	4640      	mov	r0, r8
 8017714:	f7fc fec2 	bl	801449c <_printf_i>
 8017718:	e7ea      	b.n	80176f0 <_svfiprintf_r+0x1b0>
 801771a:	bf00      	nop
 801771c:	0801a014 	.word	0x0801a014
 8017720:	0801a01a 	.word	0x0801a01a
 8017724:	0801a01e 	.word	0x0801a01e
 8017728:	08013f31 	.word	0x08013f31
 801772c:	0801748b 	.word	0x0801748b

08017730 <_sungetc_r>:
 8017730:	b538      	push	{r3, r4, r5, lr}
 8017732:	1c4b      	adds	r3, r1, #1
 8017734:	4614      	mov	r4, r2
 8017736:	d103      	bne.n	8017740 <_sungetc_r+0x10>
 8017738:	f04f 35ff 	mov.w	r5, #4294967295
 801773c:	4628      	mov	r0, r5
 801773e:	bd38      	pop	{r3, r4, r5, pc}
 8017740:	8993      	ldrh	r3, [r2, #12]
 8017742:	f023 0320 	bic.w	r3, r3, #32
 8017746:	8193      	strh	r3, [r2, #12]
 8017748:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801774a:	6852      	ldr	r2, [r2, #4]
 801774c:	b2cd      	uxtb	r5, r1
 801774e:	b18b      	cbz	r3, 8017774 <_sungetc_r+0x44>
 8017750:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017752:	4293      	cmp	r3, r2
 8017754:	dd08      	ble.n	8017768 <_sungetc_r+0x38>
 8017756:	6823      	ldr	r3, [r4, #0]
 8017758:	1e5a      	subs	r2, r3, #1
 801775a:	6022      	str	r2, [r4, #0]
 801775c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8017760:	6863      	ldr	r3, [r4, #4]
 8017762:	3301      	adds	r3, #1
 8017764:	6063      	str	r3, [r4, #4]
 8017766:	e7e9      	b.n	801773c <_sungetc_r+0xc>
 8017768:	4621      	mov	r1, r4
 801776a:	f000 fbb3 	bl	8017ed4 <__submore>
 801776e:	2800      	cmp	r0, #0
 8017770:	d0f1      	beq.n	8017756 <_sungetc_r+0x26>
 8017772:	e7e1      	b.n	8017738 <_sungetc_r+0x8>
 8017774:	6921      	ldr	r1, [r4, #16]
 8017776:	6823      	ldr	r3, [r4, #0]
 8017778:	b151      	cbz	r1, 8017790 <_sungetc_r+0x60>
 801777a:	4299      	cmp	r1, r3
 801777c:	d208      	bcs.n	8017790 <_sungetc_r+0x60>
 801777e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8017782:	42a9      	cmp	r1, r5
 8017784:	d104      	bne.n	8017790 <_sungetc_r+0x60>
 8017786:	3b01      	subs	r3, #1
 8017788:	3201      	adds	r2, #1
 801778a:	6023      	str	r3, [r4, #0]
 801778c:	6062      	str	r2, [r4, #4]
 801778e:	e7d5      	b.n	801773c <_sungetc_r+0xc>
 8017790:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8017794:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017798:	6363      	str	r3, [r4, #52]	; 0x34
 801779a:	2303      	movs	r3, #3
 801779c:	63a3      	str	r3, [r4, #56]	; 0x38
 801779e:	4623      	mov	r3, r4
 80177a0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80177a4:	6023      	str	r3, [r4, #0]
 80177a6:	2301      	movs	r3, #1
 80177a8:	e7dc      	b.n	8017764 <_sungetc_r+0x34>

080177aa <__ssrefill_r>:
 80177aa:	b510      	push	{r4, lr}
 80177ac:	460c      	mov	r4, r1
 80177ae:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80177b0:	b169      	cbz	r1, 80177ce <__ssrefill_r+0x24>
 80177b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80177b6:	4299      	cmp	r1, r3
 80177b8:	d001      	beq.n	80177be <__ssrefill_r+0x14>
 80177ba:	f7fc fa7d 	bl	8013cb8 <_free_r>
 80177be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80177c0:	6063      	str	r3, [r4, #4]
 80177c2:	2000      	movs	r0, #0
 80177c4:	6360      	str	r0, [r4, #52]	; 0x34
 80177c6:	b113      	cbz	r3, 80177ce <__ssrefill_r+0x24>
 80177c8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80177ca:	6023      	str	r3, [r4, #0]
 80177cc:	bd10      	pop	{r4, pc}
 80177ce:	6923      	ldr	r3, [r4, #16]
 80177d0:	6023      	str	r3, [r4, #0]
 80177d2:	2300      	movs	r3, #0
 80177d4:	6063      	str	r3, [r4, #4]
 80177d6:	89a3      	ldrh	r3, [r4, #12]
 80177d8:	f043 0320 	orr.w	r3, r3, #32
 80177dc:	81a3      	strh	r3, [r4, #12]
 80177de:	f04f 30ff 	mov.w	r0, #4294967295
 80177e2:	e7f3      	b.n	80177cc <__ssrefill_r+0x22>

080177e4 <__ssvfiscanf_r>:
 80177e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177e8:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80177ec:	460c      	mov	r4, r1
 80177ee:	2100      	movs	r1, #0
 80177f0:	9144      	str	r1, [sp, #272]	; 0x110
 80177f2:	9145      	str	r1, [sp, #276]	; 0x114
 80177f4:	499f      	ldr	r1, [pc, #636]	; (8017a74 <__ssvfiscanf_r+0x290>)
 80177f6:	91a0      	str	r1, [sp, #640]	; 0x280
 80177f8:	f10d 0804 	add.w	r8, sp, #4
 80177fc:	499e      	ldr	r1, [pc, #632]	; (8017a78 <__ssvfiscanf_r+0x294>)
 80177fe:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8017a7c <__ssvfiscanf_r+0x298>
 8017802:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8017806:	4606      	mov	r6, r0
 8017808:	4692      	mov	sl, r2
 801780a:	91a1      	str	r1, [sp, #644]	; 0x284
 801780c:	9300      	str	r3, [sp, #0]
 801780e:	270a      	movs	r7, #10
 8017810:	f89a 3000 	ldrb.w	r3, [sl]
 8017814:	2b00      	cmp	r3, #0
 8017816:	f000 812a 	beq.w	8017a6e <__ssvfiscanf_r+0x28a>
 801781a:	4655      	mov	r5, sl
 801781c:	f7ff f9f6 	bl	8016c0c <__locale_ctype_ptr>
 8017820:	f815 bb01 	ldrb.w	fp, [r5], #1
 8017824:	4458      	add	r0, fp
 8017826:	7843      	ldrb	r3, [r0, #1]
 8017828:	f013 0308 	ands.w	r3, r3, #8
 801782c:	d01c      	beq.n	8017868 <__ssvfiscanf_r+0x84>
 801782e:	6863      	ldr	r3, [r4, #4]
 8017830:	2b00      	cmp	r3, #0
 8017832:	dd12      	ble.n	801785a <__ssvfiscanf_r+0x76>
 8017834:	f7ff f9ea 	bl	8016c0c <__locale_ctype_ptr>
 8017838:	6823      	ldr	r3, [r4, #0]
 801783a:	781a      	ldrb	r2, [r3, #0]
 801783c:	4410      	add	r0, r2
 801783e:	7842      	ldrb	r2, [r0, #1]
 8017840:	0712      	lsls	r2, r2, #28
 8017842:	d401      	bmi.n	8017848 <__ssvfiscanf_r+0x64>
 8017844:	46aa      	mov	sl, r5
 8017846:	e7e3      	b.n	8017810 <__ssvfiscanf_r+0x2c>
 8017848:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801784a:	3201      	adds	r2, #1
 801784c:	9245      	str	r2, [sp, #276]	; 0x114
 801784e:	6862      	ldr	r2, [r4, #4]
 8017850:	3301      	adds	r3, #1
 8017852:	3a01      	subs	r2, #1
 8017854:	6062      	str	r2, [r4, #4]
 8017856:	6023      	str	r3, [r4, #0]
 8017858:	e7e9      	b.n	801782e <__ssvfiscanf_r+0x4a>
 801785a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801785c:	4621      	mov	r1, r4
 801785e:	4630      	mov	r0, r6
 8017860:	4798      	blx	r3
 8017862:	2800      	cmp	r0, #0
 8017864:	d0e6      	beq.n	8017834 <__ssvfiscanf_r+0x50>
 8017866:	e7ed      	b.n	8017844 <__ssvfiscanf_r+0x60>
 8017868:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 801786c:	f040 8082 	bne.w	8017974 <__ssvfiscanf_r+0x190>
 8017870:	9343      	str	r3, [sp, #268]	; 0x10c
 8017872:	9341      	str	r3, [sp, #260]	; 0x104
 8017874:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8017878:	2b2a      	cmp	r3, #42	; 0x2a
 801787a:	d103      	bne.n	8017884 <__ssvfiscanf_r+0xa0>
 801787c:	2310      	movs	r3, #16
 801787e:	9341      	str	r3, [sp, #260]	; 0x104
 8017880:	f10a 0502 	add.w	r5, sl, #2
 8017884:	46aa      	mov	sl, r5
 8017886:	f815 1b01 	ldrb.w	r1, [r5], #1
 801788a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 801788e:	2a09      	cmp	r2, #9
 8017890:	d922      	bls.n	80178d8 <__ssvfiscanf_r+0xf4>
 8017892:	2203      	movs	r2, #3
 8017894:	4879      	ldr	r0, [pc, #484]	; (8017a7c <__ssvfiscanf_r+0x298>)
 8017896:	f7e8 fcb3 	bl	8000200 <memchr>
 801789a:	b138      	cbz	r0, 80178ac <__ssvfiscanf_r+0xc8>
 801789c:	eba0 0309 	sub.w	r3, r0, r9
 80178a0:	2001      	movs	r0, #1
 80178a2:	4098      	lsls	r0, r3
 80178a4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80178a6:	4318      	orrs	r0, r3
 80178a8:	9041      	str	r0, [sp, #260]	; 0x104
 80178aa:	46aa      	mov	sl, r5
 80178ac:	f89a 3000 	ldrb.w	r3, [sl]
 80178b0:	2b67      	cmp	r3, #103	; 0x67
 80178b2:	f10a 0501 	add.w	r5, sl, #1
 80178b6:	d82b      	bhi.n	8017910 <__ssvfiscanf_r+0x12c>
 80178b8:	2b65      	cmp	r3, #101	; 0x65
 80178ba:	f080 809f 	bcs.w	80179fc <__ssvfiscanf_r+0x218>
 80178be:	2b47      	cmp	r3, #71	; 0x47
 80178c0:	d810      	bhi.n	80178e4 <__ssvfiscanf_r+0x100>
 80178c2:	2b45      	cmp	r3, #69	; 0x45
 80178c4:	f080 809a 	bcs.w	80179fc <__ssvfiscanf_r+0x218>
 80178c8:	2b00      	cmp	r3, #0
 80178ca:	d06c      	beq.n	80179a6 <__ssvfiscanf_r+0x1c2>
 80178cc:	2b25      	cmp	r3, #37	; 0x25
 80178ce:	d051      	beq.n	8017974 <__ssvfiscanf_r+0x190>
 80178d0:	2303      	movs	r3, #3
 80178d2:	9347      	str	r3, [sp, #284]	; 0x11c
 80178d4:	9742      	str	r7, [sp, #264]	; 0x108
 80178d6:	e027      	b.n	8017928 <__ssvfiscanf_r+0x144>
 80178d8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80178da:	fb07 1303 	mla	r3, r7, r3, r1
 80178de:	3b30      	subs	r3, #48	; 0x30
 80178e0:	9343      	str	r3, [sp, #268]	; 0x10c
 80178e2:	e7cf      	b.n	8017884 <__ssvfiscanf_r+0xa0>
 80178e4:	2b5b      	cmp	r3, #91	; 0x5b
 80178e6:	d06a      	beq.n	80179be <__ssvfiscanf_r+0x1da>
 80178e8:	d80c      	bhi.n	8017904 <__ssvfiscanf_r+0x120>
 80178ea:	2b58      	cmp	r3, #88	; 0x58
 80178ec:	d1f0      	bne.n	80178d0 <__ssvfiscanf_r+0xec>
 80178ee:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80178f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80178f4:	9241      	str	r2, [sp, #260]	; 0x104
 80178f6:	2210      	movs	r2, #16
 80178f8:	9242      	str	r2, [sp, #264]	; 0x108
 80178fa:	2b6e      	cmp	r3, #110	; 0x6e
 80178fc:	bf8c      	ite	hi
 80178fe:	2304      	movhi	r3, #4
 8017900:	2303      	movls	r3, #3
 8017902:	e010      	b.n	8017926 <__ssvfiscanf_r+0x142>
 8017904:	2b63      	cmp	r3, #99	; 0x63
 8017906:	d065      	beq.n	80179d4 <__ssvfiscanf_r+0x1f0>
 8017908:	2b64      	cmp	r3, #100	; 0x64
 801790a:	d1e1      	bne.n	80178d0 <__ssvfiscanf_r+0xec>
 801790c:	9742      	str	r7, [sp, #264]	; 0x108
 801790e:	e7f4      	b.n	80178fa <__ssvfiscanf_r+0x116>
 8017910:	2b70      	cmp	r3, #112	; 0x70
 8017912:	d04b      	beq.n	80179ac <__ssvfiscanf_r+0x1c8>
 8017914:	d826      	bhi.n	8017964 <__ssvfiscanf_r+0x180>
 8017916:	2b6e      	cmp	r3, #110	; 0x6e
 8017918:	d062      	beq.n	80179e0 <__ssvfiscanf_r+0x1fc>
 801791a:	d84c      	bhi.n	80179b6 <__ssvfiscanf_r+0x1d2>
 801791c:	2b69      	cmp	r3, #105	; 0x69
 801791e:	d1d7      	bne.n	80178d0 <__ssvfiscanf_r+0xec>
 8017920:	2300      	movs	r3, #0
 8017922:	9342      	str	r3, [sp, #264]	; 0x108
 8017924:	2303      	movs	r3, #3
 8017926:	9347      	str	r3, [sp, #284]	; 0x11c
 8017928:	6863      	ldr	r3, [r4, #4]
 801792a:	2b00      	cmp	r3, #0
 801792c:	dd68      	ble.n	8017a00 <__ssvfiscanf_r+0x21c>
 801792e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017930:	0659      	lsls	r1, r3, #25
 8017932:	d407      	bmi.n	8017944 <__ssvfiscanf_r+0x160>
 8017934:	f7ff f96a 	bl	8016c0c <__locale_ctype_ptr>
 8017938:	6823      	ldr	r3, [r4, #0]
 801793a:	781a      	ldrb	r2, [r3, #0]
 801793c:	4410      	add	r0, r2
 801793e:	7842      	ldrb	r2, [r0, #1]
 8017940:	0712      	lsls	r2, r2, #28
 8017942:	d464      	bmi.n	8017a0e <__ssvfiscanf_r+0x22a>
 8017944:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8017946:	2b02      	cmp	r3, #2
 8017948:	dc73      	bgt.n	8017a32 <__ssvfiscanf_r+0x24e>
 801794a:	466b      	mov	r3, sp
 801794c:	4622      	mov	r2, r4
 801794e:	a941      	add	r1, sp, #260	; 0x104
 8017950:	4630      	mov	r0, r6
 8017952:	f000 f897 	bl	8017a84 <_scanf_chars>
 8017956:	2801      	cmp	r0, #1
 8017958:	f000 8089 	beq.w	8017a6e <__ssvfiscanf_r+0x28a>
 801795c:	2802      	cmp	r0, #2
 801795e:	f47f af71 	bne.w	8017844 <__ssvfiscanf_r+0x60>
 8017962:	e01d      	b.n	80179a0 <__ssvfiscanf_r+0x1bc>
 8017964:	2b75      	cmp	r3, #117	; 0x75
 8017966:	d0d1      	beq.n	801790c <__ssvfiscanf_r+0x128>
 8017968:	2b78      	cmp	r3, #120	; 0x78
 801796a:	d0c0      	beq.n	80178ee <__ssvfiscanf_r+0x10a>
 801796c:	2b73      	cmp	r3, #115	; 0x73
 801796e:	d1af      	bne.n	80178d0 <__ssvfiscanf_r+0xec>
 8017970:	2302      	movs	r3, #2
 8017972:	e7d8      	b.n	8017926 <__ssvfiscanf_r+0x142>
 8017974:	6863      	ldr	r3, [r4, #4]
 8017976:	2b00      	cmp	r3, #0
 8017978:	dd0c      	ble.n	8017994 <__ssvfiscanf_r+0x1b0>
 801797a:	6823      	ldr	r3, [r4, #0]
 801797c:	781a      	ldrb	r2, [r3, #0]
 801797e:	455a      	cmp	r2, fp
 8017980:	d175      	bne.n	8017a6e <__ssvfiscanf_r+0x28a>
 8017982:	3301      	adds	r3, #1
 8017984:	6862      	ldr	r2, [r4, #4]
 8017986:	6023      	str	r3, [r4, #0]
 8017988:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801798a:	3a01      	subs	r2, #1
 801798c:	3301      	adds	r3, #1
 801798e:	6062      	str	r2, [r4, #4]
 8017990:	9345      	str	r3, [sp, #276]	; 0x114
 8017992:	e757      	b.n	8017844 <__ssvfiscanf_r+0x60>
 8017994:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017996:	4621      	mov	r1, r4
 8017998:	4630      	mov	r0, r6
 801799a:	4798      	blx	r3
 801799c:	2800      	cmp	r0, #0
 801799e:	d0ec      	beq.n	801797a <__ssvfiscanf_r+0x196>
 80179a0:	9844      	ldr	r0, [sp, #272]	; 0x110
 80179a2:	2800      	cmp	r0, #0
 80179a4:	d159      	bne.n	8017a5a <__ssvfiscanf_r+0x276>
 80179a6:	f04f 30ff 	mov.w	r0, #4294967295
 80179aa:	e05c      	b.n	8017a66 <__ssvfiscanf_r+0x282>
 80179ac:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80179ae:	f042 0220 	orr.w	r2, r2, #32
 80179b2:	9241      	str	r2, [sp, #260]	; 0x104
 80179b4:	e79b      	b.n	80178ee <__ssvfiscanf_r+0x10a>
 80179b6:	2308      	movs	r3, #8
 80179b8:	9342      	str	r3, [sp, #264]	; 0x108
 80179ba:	2304      	movs	r3, #4
 80179bc:	e7b3      	b.n	8017926 <__ssvfiscanf_r+0x142>
 80179be:	4629      	mov	r1, r5
 80179c0:	4640      	mov	r0, r8
 80179c2:	f000 f9b7 	bl	8017d34 <__sccl>
 80179c6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80179c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80179cc:	9341      	str	r3, [sp, #260]	; 0x104
 80179ce:	4605      	mov	r5, r0
 80179d0:	2301      	movs	r3, #1
 80179d2:	e7a8      	b.n	8017926 <__ssvfiscanf_r+0x142>
 80179d4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80179d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80179da:	9341      	str	r3, [sp, #260]	; 0x104
 80179dc:	2300      	movs	r3, #0
 80179de:	e7a2      	b.n	8017926 <__ssvfiscanf_r+0x142>
 80179e0:	9841      	ldr	r0, [sp, #260]	; 0x104
 80179e2:	06c3      	lsls	r3, r0, #27
 80179e4:	f53f af2e 	bmi.w	8017844 <__ssvfiscanf_r+0x60>
 80179e8:	9b00      	ldr	r3, [sp, #0]
 80179ea:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80179ec:	1d19      	adds	r1, r3, #4
 80179ee:	9100      	str	r1, [sp, #0]
 80179f0:	681b      	ldr	r3, [r3, #0]
 80179f2:	07c0      	lsls	r0, r0, #31
 80179f4:	bf4c      	ite	mi
 80179f6:	801a      	strhmi	r2, [r3, #0]
 80179f8:	601a      	strpl	r2, [r3, #0]
 80179fa:	e723      	b.n	8017844 <__ssvfiscanf_r+0x60>
 80179fc:	2305      	movs	r3, #5
 80179fe:	e792      	b.n	8017926 <__ssvfiscanf_r+0x142>
 8017a00:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017a02:	4621      	mov	r1, r4
 8017a04:	4630      	mov	r0, r6
 8017a06:	4798      	blx	r3
 8017a08:	2800      	cmp	r0, #0
 8017a0a:	d090      	beq.n	801792e <__ssvfiscanf_r+0x14a>
 8017a0c:	e7c8      	b.n	80179a0 <__ssvfiscanf_r+0x1bc>
 8017a0e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017a10:	3201      	adds	r2, #1
 8017a12:	9245      	str	r2, [sp, #276]	; 0x114
 8017a14:	6862      	ldr	r2, [r4, #4]
 8017a16:	3a01      	subs	r2, #1
 8017a18:	2a00      	cmp	r2, #0
 8017a1a:	6062      	str	r2, [r4, #4]
 8017a1c:	dd02      	ble.n	8017a24 <__ssvfiscanf_r+0x240>
 8017a1e:	3301      	adds	r3, #1
 8017a20:	6023      	str	r3, [r4, #0]
 8017a22:	e787      	b.n	8017934 <__ssvfiscanf_r+0x150>
 8017a24:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017a26:	4621      	mov	r1, r4
 8017a28:	4630      	mov	r0, r6
 8017a2a:	4798      	blx	r3
 8017a2c:	2800      	cmp	r0, #0
 8017a2e:	d081      	beq.n	8017934 <__ssvfiscanf_r+0x150>
 8017a30:	e7b6      	b.n	80179a0 <__ssvfiscanf_r+0x1bc>
 8017a32:	2b04      	cmp	r3, #4
 8017a34:	dc06      	bgt.n	8017a44 <__ssvfiscanf_r+0x260>
 8017a36:	466b      	mov	r3, sp
 8017a38:	4622      	mov	r2, r4
 8017a3a:	a941      	add	r1, sp, #260	; 0x104
 8017a3c:	4630      	mov	r0, r6
 8017a3e:	f000 f885 	bl	8017b4c <_scanf_i>
 8017a42:	e788      	b.n	8017956 <__ssvfiscanf_r+0x172>
 8017a44:	4b0e      	ldr	r3, [pc, #56]	; (8017a80 <__ssvfiscanf_r+0x29c>)
 8017a46:	2b00      	cmp	r3, #0
 8017a48:	f43f aefc 	beq.w	8017844 <__ssvfiscanf_r+0x60>
 8017a4c:	466b      	mov	r3, sp
 8017a4e:	4622      	mov	r2, r4
 8017a50:	a941      	add	r1, sp, #260	; 0x104
 8017a52:	4630      	mov	r0, r6
 8017a54:	f7fc fe34 	bl	80146c0 <_scanf_float>
 8017a58:	e77d      	b.n	8017956 <__ssvfiscanf_r+0x172>
 8017a5a:	89a3      	ldrh	r3, [r4, #12]
 8017a5c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8017a60:	bf18      	it	ne
 8017a62:	f04f 30ff 	movne.w	r0, #4294967295
 8017a66:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8017a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a6e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8017a70:	e7f9      	b.n	8017a66 <__ssvfiscanf_r+0x282>
 8017a72:	bf00      	nop
 8017a74:	08017731 	.word	0x08017731
 8017a78:	080177ab 	.word	0x080177ab
 8017a7c:	0801a01a 	.word	0x0801a01a
 8017a80:	080146c1 	.word	0x080146c1

08017a84 <_scanf_chars>:
 8017a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a88:	4615      	mov	r5, r2
 8017a8a:	688a      	ldr	r2, [r1, #8]
 8017a8c:	4680      	mov	r8, r0
 8017a8e:	460c      	mov	r4, r1
 8017a90:	b932      	cbnz	r2, 8017aa0 <_scanf_chars+0x1c>
 8017a92:	698a      	ldr	r2, [r1, #24]
 8017a94:	2a00      	cmp	r2, #0
 8017a96:	bf14      	ite	ne
 8017a98:	f04f 32ff 	movne.w	r2, #4294967295
 8017a9c:	2201      	moveq	r2, #1
 8017a9e:	608a      	str	r2, [r1, #8]
 8017aa0:	6822      	ldr	r2, [r4, #0]
 8017aa2:	06d1      	lsls	r1, r2, #27
 8017aa4:	bf5f      	itttt	pl
 8017aa6:	681a      	ldrpl	r2, [r3, #0]
 8017aa8:	1d11      	addpl	r1, r2, #4
 8017aaa:	6019      	strpl	r1, [r3, #0]
 8017aac:	6817      	ldrpl	r7, [r2, #0]
 8017aae:	2600      	movs	r6, #0
 8017ab0:	69a3      	ldr	r3, [r4, #24]
 8017ab2:	b1db      	cbz	r3, 8017aec <_scanf_chars+0x68>
 8017ab4:	2b01      	cmp	r3, #1
 8017ab6:	d107      	bne.n	8017ac8 <_scanf_chars+0x44>
 8017ab8:	682b      	ldr	r3, [r5, #0]
 8017aba:	6962      	ldr	r2, [r4, #20]
 8017abc:	781b      	ldrb	r3, [r3, #0]
 8017abe:	5cd3      	ldrb	r3, [r2, r3]
 8017ac0:	b9a3      	cbnz	r3, 8017aec <_scanf_chars+0x68>
 8017ac2:	2e00      	cmp	r6, #0
 8017ac4:	d132      	bne.n	8017b2c <_scanf_chars+0xa8>
 8017ac6:	e006      	b.n	8017ad6 <_scanf_chars+0x52>
 8017ac8:	2b02      	cmp	r3, #2
 8017aca:	d007      	beq.n	8017adc <_scanf_chars+0x58>
 8017acc:	2e00      	cmp	r6, #0
 8017ace:	d12d      	bne.n	8017b2c <_scanf_chars+0xa8>
 8017ad0:	69a3      	ldr	r3, [r4, #24]
 8017ad2:	2b01      	cmp	r3, #1
 8017ad4:	d12a      	bne.n	8017b2c <_scanf_chars+0xa8>
 8017ad6:	2001      	movs	r0, #1
 8017ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017adc:	f7ff f896 	bl	8016c0c <__locale_ctype_ptr>
 8017ae0:	682b      	ldr	r3, [r5, #0]
 8017ae2:	781b      	ldrb	r3, [r3, #0]
 8017ae4:	4418      	add	r0, r3
 8017ae6:	7843      	ldrb	r3, [r0, #1]
 8017ae8:	071b      	lsls	r3, r3, #28
 8017aea:	d4ef      	bmi.n	8017acc <_scanf_chars+0x48>
 8017aec:	6823      	ldr	r3, [r4, #0]
 8017aee:	06da      	lsls	r2, r3, #27
 8017af0:	bf5e      	ittt	pl
 8017af2:	682b      	ldrpl	r3, [r5, #0]
 8017af4:	781b      	ldrbpl	r3, [r3, #0]
 8017af6:	703b      	strbpl	r3, [r7, #0]
 8017af8:	682a      	ldr	r2, [r5, #0]
 8017afa:	686b      	ldr	r3, [r5, #4]
 8017afc:	f102 0201 	add.w	r2, r2, #1
 8017b00:	602a      	str	r2, [r5, #0]
 8017b02:	68a2      	ldr	r2, [r4, #8]
 8017b04:	f103 33ff 	add.w	r3, r3, #4294967295
 8017b08:	f102 32ff 	add.w	r2, r2, #4294967295
 8017b0c:	606b      	str	r3, [r5, #4]
 8017b0e:	f106 0601 	add.w	r6, r6, #1
 8017b12:	bf58      	it	pl
 8017b14:	3701      	addpl	r7, #1
 8017b16:	60a2      	str	r2, [r4, #8]
 8017b18:	b142      	cbz	r2, 8017b2c <_scanf_chars+0xa8>
 8017b1a:	2b00      	cmp	r3, #0
 8017b1c:	dcc8      	bgt.n	8017ab0 <_scanf_chars+0x2c>
 8017b1e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017b22:	4629      	mov	r1, r5
 8017b24:	4640      	mov	r0, r8
 8017b26:	4798      	blx	r3
 8017b28:	2800      	cmp	r0, #0
 8017b2a:	d0c1      	beq.n	8017ab0 <_scanf_chars+0x2c>
 8017b2c:	6823      	ldr	r3, [r4, #0]
 8017b2e:	f013 0310 	ands.w	r3, r3, #16
 8017b32:	d105      	bne.n	8017b40 <_scanf_chars+0xbc>
 8017b34:	68e2      	ldr	r2, [r4, #12]
 8017b36:	3201      	adds	r2, #1
 8017b38:	60e2      	str	r2, [r4, #12]
 8017b3a:	69a2      	ldr	r2, [r4, #24]
 8017b3c:	b102      	cbz	r2, 8017b40 <_scanf_chars+0xbc>
 8017b3e:	703b      	strb	r3, [r7, #0]
 8017b40:	6923      	ldr	r3, [r4, #16]
 8017b42:	441e      	add	r6, r3
 8017b44:	6126      	str	r6, [r4, #16]
 8017b46:	2000      	movs	r0, #0
 8017b48:	e7c6      	b.n	8017ad8 <_scanf_chars+0x54>
	...

08017b4c <_scanf_i>:
 8017b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b50:	469a      	mov	sl, r3
 8017b52:	4b74      	ldr	r3, [pc, #464]	; (8017d24 <_scanf_i+0x1d8>)
 8017b54:	460c      	mov	r4, r1
 8017b56:	4683      	mov	fp, r0
 8017b58:	4616      	mov	r6, r2
 8017b5a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017b5e:	b087      	sub	sp, #28
 8017b60:	ab03      	add	r3, sp, #12
 8017b62:	68a7      	ldr	r7, [r4, #8]
 8017b64:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8017b68:	4b6f      	ldr	r3, [pc, #444]	; (8017d28 <_scanf_i+0x1dc>)
 8017b6a:	69a1      	ldr	r1, [r4, #24]
 8017b6c:	4a6f      	ldr	r2, [pc, #444]	; (8017d2c <_scanf_i+0x1e0>)
 8017b6e:	2903      	cmp	r1, #3
 8017b70:	bf08      	it	eq
 8017b72:	461a      	moveq	r2, r3
 8017b74:	1e7b      	subs	r3, r7, #1
 8017b76:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8017b7a:	bf84      	itt	hi
 8017b7c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8017b80:	60a3      	strhi	r3, [r4, #8]
 8017b82:	6823      	ldr	r3, [r4, #0]
 8017b84:	9200      	str	r2, [sp, #0]
 8017b86:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8017b8a:	bf88      	it	hi
 8017b8c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8017b90:	f104 091c 	add.w	r9, r4, #28
 8017b94:	6023      	str	r3, [r4, #0]
 8017b96:	bf8c      	ite	hi
 8017b98:	197f      	addhi	r7, r7, r5
 8017b9a:	2700      	movls	r7, #0
 8017b9c:	464b      	mov	r3, r9
 8017b9e:	f04f 0800 	mov.w	r8, #0
 8017ba2:	9301      	str	r3, [sp, #4]
 8017ba4:	6831      	ldr	r1, [r6, #0]
 8017ba6:	ab03      	add	r3, sp, #12
 8017ba8:	2202      	movs	r2, #2
 8017baa:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8017bae:	7809      	ldrb	r1, [r1, #0]
 8017bb0:	f7e8 fb26 	bl	8000200 <memchr>
 8017bb4:	9b01      	ldr	r3, [sp, #4]
 8017bb6:	b330      	cbz	r0, 8017c06 <_scanf_i+0xba>
 8017bb8:	f1b8 0f01 	cmp.w	r8, #1
 8017bbc:	d15a      	bne.n	8017c74 <_scanf_i+0x128>
 8017bbe:	6862      	ldr	r2, [r4, #4]
 8017bc0:	b92a      	cbnz	r2, 8017bce <_scanf_i+0x82>
 8017bc2:	6822      	ldr	r2, [r4, #0]
 8017bc4:	2108      	movs	r1, #8
 8017bc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017bca:	6061      	str	r1, [r4, #4]
 8017bcc:	6022      	str	r2, [r4, #0]
 8017bce:	6822      	ldr	r2, [r4, #0]
 8017bd0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8017bd4:	6022      	str	r2, [r4, #0]
 8017bd6:	68a2      	ldr	r2, [r4, #8]
 8017bd8:	1e51      	subs	r1, r2, #1
 8017bda:	60a1      	str	r1, [r4, #8]
 8017bdc:	b19a      	cbz	r2, 8017c06 <_scanf_i+0xba>
 8017bde:	6832      	ldr	r2, [r6, #0]
 8017be0:	1c51      	adds	r1, r2, #1
 8017be2:	6031      	str	r1, [r6, #0]
 8017be4:	7812      	ldrb	r2, [r2, #0]
 8017be6:	701a      	strb	r2, [r3, #0]
 8017be8:	1c5d      	adds	r5, r3, #1
 8017bea:	6873      	ldr	r3, [r6, #4]
 8017bec:	3b01      	subs	r3, #1
 8017bee:	2b00      	cmp	r3, #0
 8017bf0:	6073      	str	r3, [r6, #4]
 8017bf2:	dc07      	bgt.n	8017c04 <_scanf_i+0xb8>
 8017bf4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017bf8:	4631      	mov	r1, r6
 8017bfa:	4658      	mov	r0, fp
 8017bfc:	4798      	blx	r3
 8017bfe:	2800      	cmp	r0, #0
 8017c00:	f040 8086 	bne.w	8017d10 <_scanf_i+0x1c4>
 8017c04:	462b      	mov	r3, r5
 8017c06:	f108 0801 	add.w	r8, r8, #1
 8017c0a:	f1b8 0f03 	cmp.w	r8, #3
 8017c0e:	d1c8      	bne.n	8017ba2 <_scanf_i+0x56>
 8017c10:	6862      	ldr	r2, [r4, #4]
 8017c12:	b90a      	cbnz	r2, 8017c18 <_scanf_i+0xcc>
 8017c14:	220a      	movs	r2, #10
 8017c16:	6062      	str	r2, [r4, #4]
 8017c18:	6862      	ldr	r2, [r4, #4]
 8017c1a:	4945      	ldr	r1, [pc, #276]	; (8017d30 <_scanf_i+0x1e4>)
 8017c1c:	6960      	ldr	r0, [r4, #20]
 8017c1e:	9301      	str	r3, [sp, #4]
 8017c20:	1a89      	subs	r1, r1, r2
 8017c22:	f000 f887 	bl	8017d34 <__sccl>
 8017c26:	9b01      	ldr	r3, [sp, #4]
 8017c28:	f04f 0800 	mov.w	r8, #0
 8017c2c:	461d      	mov	r5, r3
 8017c2e:	68a3      	ldr	r3, [r4, #8]
 8017c30:	6822      	ldr	r2, [r4, #0]
 8017c32:	2b00      	cmp	r3, #0
 8017c34:	d03a      	beq.n	8017cac <_scanf_i+0x160>
 8017c36:	6831      	ldr	r1, [r6, #0]
 8017c38:	6960      	ldr	r0, [r4, #20]
 8017c3a:	f891 c000 	ldrb.w	ip, [r1]
 8017c3e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8017c42:	2800      	cmp	r0, #0
 8017c44:	d032      	beq.n	8017cac <_scanf_i+0x160>
 8017c46:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8017c4a:	d121      	bne.n	8017c90 <_scanf_i+0x144>
 8017c4c:	0510      	lsls	r0, r2, #20
 8017c4e:	d51f      	bpl.n	8017c90 <_scanf_i+0x144>
 8017c50:	f108 0801 	add.w	r8, r8, #1
 8017c54:	b117      	cbz	r7, 8017c5c <_scanf_i+0x110>
 8017c56:	3301      	adds	r3, #1
 8017c58:	3f01      	subs	r7, #1
 8017c5a:	60a3      	str	r3, [r4, #8]
 8017c5c:	6873      	ldr	r3, [r6, #4]
 8017c5e:	3b01      	subs	r3, #1
 8017c60:	2b00      	cmp	r3, #0
 8017c62:	6073      	str	r3, [r6, #4]
 8017c64:	dd1b      	ble.n	8017c9e <_scanf_i+0x152>
 8017c66:	6833      	ldr	r3, [r6, #0]
 8017c68:	3301      	adds	r3, #1
 8017c6a:	6033      	str	r3, [r6, #0]
 8017c6c:	68a3      	ldr	r3, [r4, #8]
 8017c6e:	3b01      	subs	r3, #1
 8017c70:	60a3      	str	r3, [r4, #8]
 8017c72:	e7dc      	b.n	8017c2e <_scanf_i+0xe2>
 8017c74:	f1b8 0f02 	cmp.w	r8, #2
 8017c78:	d1ad      	bne.n	8017bd6 <_scanf_i+0x8a>
 8017c7a:	6822      	ldr	r2, [r4, #0]
 8017c7c:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8017c80:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8017c84:	d1bf      	bne.n	8017c06 <_scanf_i+0xba>
 8017c86:	2110      	movs	r1, #16
 8017c88:	6061      	str	r1, [r4, #4]
 8017c8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017c8e:	e7a1      	b.n	8017bd4 <_scanf_i+0x88>
 8017c90:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8017c94:	6022      	str	r2, [r4, #0]
 8017c96:	780b      	ldrb	r3, [r1, #0]
 8017c98:	702b      	strb	r3, [r5, #0]
 8017c9a:	3501      	adds	r5, #1
 8017c9c:	e7de      	b.n	8017c5c <_scanf_i+0x110>
 8017c9e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017ca2:	4631      	mov	r1, r6
 8017ca4:	4658      	mov	r0, fp
 8017ca6:	4798      	blx	r3
 8017ca8:	2800      	cmp	r0, #0
 8017caa:	d0df      	beq.n	8017c6c <_scanf_i+0x120>
 8017cac:	6823      	ldr	r3, [r4, #0]
 8017cae:	05d9      	lsls	r1, r3, #23
 8017cb0:	d50c      	bpl.n	8017ccc <_scanf_i+0x180>
 8017cb2:	454d      	cmp	r5, r9
 8017cb4:	d908      	bls.n	8017cc8 <_scanf_i+0x17c>
 8017cb6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8017cba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017cbe:	4632      	mov	r2, r6
 8017cc0:	4658      	mov	r0, fp
 8017cc2:	4798      	blx	r3
 8017cc4:	1e6f      	subs	r7, r5, #1
 8017cc6:	463d      	mov	r5, r7
 8017cc8:	454d      	cmp	r5, r9
 8017cca:	d029      	beq.n	8017d20 <_scanf_i+0x1d4>
 8017ccc:	6822      	ldr	r2, [r4, #0]
 8017cce:	f012 0210 	ands.w	r2, r2, #16
 8017cd2:	d113      	bne.n	8017cfc <_scanf_i+0x1b0>
 8017cd4:	702a      	strb	r2, [r5, #0]
 8017cd6:	6863      	ldr	r3, [r4, #4]
 8017cd8:	9e00      	ldr	r6, [sp, #0]
 8017cda:	4649      	mov	r1, r9
 8017cdc:	4658      	mov	r0, fp
 8017cde:	47b0      	blx	r6
 8017ce0:	f8da 3000 	ldr.w	r3, [sl]
 8017ce4:	6821      	ldr	r1, [r4, #0]
 8017ce6:	1d1a      	adds	r2, r3, #4
 8017ce8:	f8ca 2000 	str.w	r2, [sl]
 8017cec:	f011 0f20 	tst.w	r1, #32
 8017cf0:	681b      	ldr	r3, [r3, #0]
 8017cf2:	d010      	beq.n	8017d16 <_scanf_i+0x1ca>
 8017cf4:	6018      	str	r0, [r3, #0]
 8017cf6:	68e3      	ldr	r3, [r4, #12]
 8017cf8:	3301      	adds	r3, #1
 8017cfa:	60e3      	str	r3, [r4, #12]
 8017cfc:	eba5 0509 	sub.w	r5, r5, r9
 8017d00:	44a8      	add	r8, r5
 8017d02:	6925      	ldr	r5, [r4, #16]
 8017d04:	4445      	add	r5, r8
 8017d06:	6125      	str	r5, [r4, #16]
 8017d08:	2000      	movs	r0, #0
 8017d0a:	b007      	add	sp, #28
 8017d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d10:	f04f 0800 	mov.w	r8, #0
 8017d14:	e7ca      	b.n	8017cac <_scanf_i+0x160>
 8017d16:	07ca      	lsls	r2, r1, #31
 8017d18:	bf4c      	ite	mi
 8017d1a:	8018      	strhmi	r0, [r3, #0]
 8017d1c:	6018      	strpl	r0, [r3, #0]
 8017d1e:	e7ea      	b.n	8017cf6 <_scanf_i+0x1aa>
 8017d20:	2001      	movs	r0, #1
 8017d22:	e7f2      	b.n	8017d0a <_scanf_i+0x1be>
 8017d24:	08019e48 	.word	0x08019e48
 8017d28:	08015909 	.word	0x08015909
 8017d2c:	08017eb1 	.word	0x08017eb1
 8017d30:	0801a035 	.word	0x0801a035

08017d34 <__sccl>:
 8017d34:	b570      	push	{r4, r5, r6, lr}
 8017d36:	780b      	ldrb	r3, [r1, #0]
 8017d38:	2b5e      	cmp	r3, #94	; 0x5e
 8017d3a:	bf13      	iteet	ne
 8017d3c:	1c4a      	addne	r2, r1, #1
 8017d3e:	1c8a      	addeq	r2, r1, #2
 8017d40:	784b      	ldrbeq	r3, [r1, #1]
 8017d42:	2100      	movne	r1, #0
 8017d44:	bf08      	it	eq
 8017d46:	2101      	moveq	r1, #1
 8017d48:	1e44      	subs	r4, r0, #1
 8017d4a:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8017d4e:	f804 1f01 	strb.w	r1, [r4, #1]!
 8017d52:	42ac      	cmp	r4, r5
 8017d54:	d1fb      	bne.n	8017d4e <__sccl+0x1a>
 8017d56:	b913      	cbnz	r3, 8017d5e <__sccl+0x2a>
 8017d58:	3a01      	subs	r2, #1
 8017d5a:	4610      	mov	r0, r2
 8017d5c:	bd70      	pop	{r4, r5, r6, pc}
 8017d5e:	f081 0401 	eor.w	r4, r1, #1
 8017d62:	54c4      	strb	r4, [r0, r3]
 8017d64:	1c51      	adds	r1, r2, #1
 8017d66:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8017d6a:	2d2d      	cmp	r5, #45	; 0x2d
 8017d6c:	f101 36ff 	add.w	r6, r1, #4294967295
 8017d70:	460a      	mov	r2, r1
 8017d72:	d006      	beq.n	8017d82 <__sccl+0x4e>
 8017d74:	2d5d      	cmp	r5, #93	; 0x5d
 8017d76:	d0f0      	beq.n	8017d5a <__sccl+0x26>
 8017d78:	b90d      	cbnz	r5, 8017d7e <__sccl+0x4a>
 8017d7a:	4632      	mov	r2, r6
 8017d7c:	e7ed      	b.n	8017d5a <__sccl+0x26>
 8017d7e:	462b      	mov	r3, r5
 8017d80:	e7ef      	b.n	8017d62 <__sccl+0x2e>
 8017d82:	780e      	ldrb	r6, [r1, #0]
 8017d84:	2e5d      	cmp	r6, #93	; 0x5d
 8017d86:	d0fa      	beq.n	8017d7e <__sccl+0x4a>
 8017d88:	42b3      	cmp	r3, r6
 8017d8a:	dcf8      	bgt.n	8017d7e <__sccl+0x4a>
 8017d8c:	3301      	adds	r3, #1
 8017d8e:	429e      	cmp	r6, r3
 8017d90:	54c4      	strb	r4, [r0, r3]
 8017d92:	dcfb      	bgt.n	8017d8c <__sccl+0x58>
 8017d94:	3102      	adds	r1, #2
 8017d96:	e7e6      	b.n	8017d66 <__sccl+0x32>

08017d98 <strncmp>:
 8017d98:	b510      	push	{r4, lr}
 8017d9a:	b16a      	cbz	r2, 8017db8 <strncmp+0x20>
 8017d9c:	3901      	subs	r1, #1
 8017d9e:	1884      	adds	r4, r0, r2
 8017da0:	f810 3b01 	ldrb.w	r3, [r0], #1
 8017da4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8017da8:	4293      	cmp	r3, r2
 8017daa:	d103      	bne.n	8017db4 <strncmp+0x1c>
 8017dac:	42a0      	cmp	r0, r4
 8017dae:	d001      	beq.n	8017db4 <strncmp+0x1c>
 8017db0:	2b00      	cmp	r3, #0
 8017db2:	d1f5      	bne.n	8017da0 <strncmp+0x8>
 8017db4:	1a98      	subs	r0, r3, r2
 8017db6:	bd10      	pop	{r4, pc}
 8017db8:	4610      	mov	r0, r2
 8017dba:	e7fc      	b.n	8017db6 <strncmp+0x1e>

08017dbc <_strtoul_l.isra.0>:
 8017dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017dc0:	4680      	mov	r8, r0
 8017dc2:	4689      	mov	r9, r1
 8017dc4:	4692      	mov	sl, r2
 8017dc6:	461e      	mov	r6, r3
 8017dc8:	460f      	mov	r7, r1
 8017dca:	463d      	mov	r5, r7
 8017dcc:	9808      	ldr	r0, [sp, #32]
 8017dce:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017dd2:	f7fe ff17 	bl	8016c04 <__locale_ctype_ptr_l>
 8017dd6:	4420      	add	r0, r4
 8017dd8:	7843      	ldrb	r3, [r0, #1]
 8017dda:	f013 0308 	ands.w	r3, r3, #8
 8017dde:	d130      	bne.n	8017e42 <_strtoul_l.isra.0+0x86>
 8017de0:	2c2d      	cmp	r4, #45	; 0x2d
 8017de2:	d130      	bne.n	8017e46 <_strtoul_l.isra.0+0x8a>
 8017de4:	787c      	ldrb	r4, [r7, #1]
 8017de6:	1cbd      	adds	r5, r7, #2
 8017de8:	2101      	movs	r1, #1
 8017dea:	2e00      	cmp	r6, #0
 8017dec:	d05c      	beq.n	8017ea8 <_strtoul_l.isra.0+0xec>
 8017dee:	2e10      	cmp	r6, #16
 8017df0:	d109      	bne.n	8017e06 <_strtoul_l.isra.0+0x4a>
 8017df2:	2c30      	cmp	r4, #48	; 0x30
 8017df4:	d107      	bne.n	8017e06 <_strtoul_l.isra.0+0x4a>
 8017df6:	782b      	ldrb	r3, [r5, #0]
 8017df8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017dfc:	2b58      	cmp	r3, #88	; 0x58
 8017dfe:	d14e      	bne.n	8017e9e <_strtoul_l.isra.0+0xe2>
 8017e00:	786c      	ldrb	r4, [r5, #1]
 8017e02:	2610      	movs	r6, #16
 8017e04:	3502      	adds	r5, #2
 8017e06:	f04f 32ff 	mov.w	r2, #4294967295
 8017e0a:	2300      	movs	r3, #0
 8017e0c:	fbb2 f2f6 	udiv	r2, r2, r6
 8017e10:	fb06 fc02 	mul.w	ip, r6, r2
 8017e14:	ea6f 0c0c 	mvn.w	ip, ip
 8017e18:	4618      	mov	r0, r3
 8017e1a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8017e1e:	2f09      	cmp	r7, #9
 8017e20:	d817      	bhi.n	8017e52 <_strtoul_l.isra.0+0x96>
 8017e22:	463c      	mov	r4, r7
 8017e24:	42a6      	cmp	r6, r4
 8017e26:	dd23      	ble.n	8017e70 <_strtoul_l.isra.0+0xb4>
 8017e28:	2b00      	cmp	r3, #0
 8017e2a:	db1e      	blt.n	8017e6a <_strtoul_l.isra.0+0xae>
 8017e2c:	4282      	cmp	r2, r0
 8017e2e:	d31c      	bcc.n	8017e6a <_strtoul_l.isra.0+0xae>
 8017e30:	d101      	bne.n	8017e36 <_strtoul_l.isra.0+0x7a>
 8017e32:	45a4      	cmp	ip, r4
 8017e34:	db19      	blt.n	8017e6a <_strtoul_l.isra.0+0xae>
 8017e36:	fb00 4006 	mla	r0, r0, r6, r4
 8017e3a:	2301      	movs	r3, #1
 8017e3c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017e40:	e7eb      	b.n	8017e1a <_strtoul_l.isra.0+0x5e>
 8017e42:	462f      	mov	r7, r5
 8017e44:	e7c1      	b.n	8017dca <_strtoul_l.isra.0+0xe>
 8017e46:	2c2b      	cmp	r4, #43	; 0x2b
 8017e48:	bf04      	itt	eq
 8017e4a:	1cbd      	addeq	r5, r7, #2
 8017e4c:	787c      	ldrbeq	r4, [r7, #1]
 8017e4e:	4619      	mov	r1, r3
 8017e50:	e7cb      	b.n	8017dea <_strtoul_l.isra.0+0x2e>
 8017e52:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8017e56:	2f19      	cmp	r7, #25
 8017e58:	d801      	bhi.n	8017e5e <_strtoul_l.isra.0+0xa2>
 8017e5a:	3c37      	subs	r4, #55	; 0x37
 8017e5c:	e7e2      	b.n	8017e24 <_strtoul_l.isra.0+0x68>
 8017e5e:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8017e62:	2f19      	cmp	r7, #25
 8017e64:	d804      	bhi.n	8017e70 <_strtoul_l.isra.0+0xb4>
 8017e66:	3c57      	subs	r4, #87	; 0x57
 8017e68:	e7dc      	b.n	8017e24 <_strtoul_l.isra.0+0x68>
 8017e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8017e6e:	e7e5      	b.n	8017e3c <_strtoul_l.isra.0+0x80>
 8017e70:	2b00      	cmp	r3, #0
 8017e72:	da09      	bge.n	8017e88 <_strtoul_l.isra.0+0xcc>
 8017e74:	2322      	movs	r3, #34	; 0x22
 8017e76:	f8c8 3000 	str.w	r3, [r8]
 8017e7a:	f04f 30ff 	mov.w	r0, #4294967295
 8017e7e:	f1ba 0f00 	cmp.w	sl, #0
 8017e82:	d107      	bne.n	8017e94 <_strtoul_l.isra.0+0xd8>
 8017e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017e88:	b101      	cbz	r1, 8017e8c <_strtoul_l.isra.0+0xd0>
 8017e8a:	4240      	negs	r0, r0
 8017e8c:	f1ba 0f00 	cmp.w	sl, #0
 8017e90:	d0f8      	beq.n	8017e84 <_strtoul_l.isra.0+0xc8>
 8017e92:	b10b      	cbz	r3, 8017e98 <_strtoul_l.isra.0+0xdc>
 8017e94:	f105 39ff 	add.w	r9, r5, #4294967295
 8017e98:	f8ca 9000 	str.w	r9, [sl]
 8017e9c:	e7f2      	b.n	8017e84 <_strtoul_l.isra.0+0xc8>
 8017e9e:	2430      	movs	r4, #48	; 0x30
 8017ea0:	2e00      	cmp	r6, #0
 8017ea2:	d1b0      	bne.n	8017e06 <_strtoul_l.isra.0+0x4a>
 8017ea4:	2608      	movs	r6, #8
 8017ea6:	e7ae      	b.n	8017e06 <_strtoul_l.isra.0+0x4a>
 8017ea8:	2c30      	cmp	r4, #48	; 0x30
 8017eaa:	d0a4      	beq.n	8017df6 <_strtoul_l.isra.0+0x3a>
 8017eac:	260a      	movs	r6, #10
 8017eae:	e7aa      	b.n	8017e06 <_strtoul_l.isra.0+0x4a>

08017eb0 <_strtoul_r>:
 8017eb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017eb2:	4c06      	ldr	r4, [pc, #24]	; (8017ecc <_strtoul_r+0x1c>)
 8017eb4:	4d06      	ldr	r5, [pc, #24]	; (8017ed0 <_strtoul_r+0x20>)
 8017eb6:	6824      	ldr	r4, [r4, #0]
 8017eb8:	6a24      	ldr	r4, [r4, #32]
 8017eba:	2c00      	cmp	r4, #0
 8017ebc:	bf08      	it	eq
 8017ebe:	462c      	moveq	r4, r5
 8017ec0:	9400      	str	r4, [sp, #0]
 8017ec2:	f7ff ff7b 	bl	8017dbc <_strtoul_l.isra.0>
 8017ec6:	b003      	add	sp, #12
 8017ec8:	bd30      	pop	{r4, r5, pc}
 8017eca:	bf00      	nop
 8017ecc:	20000e34 	.word	0x20000e34
 8017ed0:	20000e98 	.word	0x20000e98

08017ed4 <__submore>:
 8017ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ed8:	460c      	mov	r4, r1
 8017eda:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8017edc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017ee0:	4299      	cmp	r1, r3
 8017ee2:	d11d      	bne.n	8017f20 <__submore+0x4c>
 8017ee4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017ee8:	f7fb ff34 	bl	8013d54 <_malloc_r>
 8017eec:	b918      	cbnz	r0, 8017ef6 <__submore+0x22>
 8017eee:	f04f 30ff 	mov.w	r0, #4294967295
 8017ef2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017ef6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017efa:	63a3      	str	r3, [r4, #56]	; 0x38
 8017efc:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8017f00:	6360      	str	r0, [r4, #52]	; 0x34
 8017f02:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8017f06:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8017f0a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8017f0e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8017f12:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8017f16:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8017f1a:	6020      	str	r0, [r4, #0]
 8017f1c:	2000      	movs	r0, #0
 8017f1e:	e7e8      	b.n	8017ef2 <__submore+0x1e>
 8017f20:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8017f22:	0077      	lsls	r7, r6, #1
 8017f24:	463a      	mov	r2, r7
 8017f26:	f000 f81c 	bl	8017f62 <_realloc_r>
 8017f2a:	4605      	mov	r5, r0
 8017f2c:	2800      	cmp	r0, #0
 8017f2e:	d0de      	beq.n	8017eee <__submore+0x1a>
 8017f30:	eb00 0806 	add.w	r8, r0, r6
 8017f34:	4601      	mov	r1, r0
 8017f36:	4632      	mov	r2, r6
 8017f38:	4640      	mov	r0, r8
 8017f3a:	f7fb fe91 	bl	8013c60 <memcpy>
 8017f3e:	f8c4 8000 	str.w	r8, [r4]
 8017f42:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8017f46:	e7e9      	b.n	8017f1c <__submore+0x48>

08017f48 <__ascii_wctomb>:
 8017f48:	b149      	cbz	r1, 8017f5e <__ascii_wctomb+0x16>
 8017f4a:	2aff      	cmp	r2, #255	; 0xff
 8017f4c:	bf85      	ittet	hi
 8017f4e:	238a      	movhi	r3, #138	; 0x8a
 8017f50:	6003      	strhi	r3, [r0, #0]
 8017f52:	700a      	strbls	r2, [r1, #0]
 8017f54:	f04f 30ff 	movhi.w	r0, #4294967295
 8017f58:	bf98      	it	ls
 8017f5a:	2001      	movls	r0, #1
 8017f5c:	4770      	bx	lr
 8017f5e:	4608      	mov	r0, r1
 8017f60:	4770      	bx	lr

08017f62 <_realloc_r>:
 8017f62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017f64:	4607      	mov	r7, r0
 8017f66:	4614      	mov	r4, r2
 8017f68:	460e      	mov	r6, r1
 8017f6a:	b921      	cbnz	r1, 8017f76 <_realloc_r+0x14>
 8017f6c:	4611      	mov	r1, r2
 8017f6e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017f72:	f7fb beef 	b.w	8013d54 <_malloc_r>
 8017f76:	b922      	cbnz	r2, 8017f82 <_realloc_r+0x20>
 8017f78:	f7fb fe9e 	bl	8013cb8 <_free_r>
 8017f7c:	4625      	mov	r5, r4
 8017f7e:	4628      	mov	r0, r5
 8017f80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017f82:	f000 f814 	bl	8017fae <_malloc_usable_size_r>
 8017f86:	42a0      	cmp	r0, r4
 8017f88:	d20f      	bcs.n	8017faa <_realloc_r+0x48>
 8017f8a:	4621      	mov	r1, r4
 8017f8c:	4638      	mov	r0, r7
 8017f8e:	f7fb fee1 	bl	8013d54 <_malloc_r>
 8017f92:	4605      	mov	r5, r0
 8017f94:	2800      	cmp	r0, #0
 8017f96:	d0f2      	beq.n	8017f7e <_realloc_r+0x1c>
 8017f98:	4631      	mov	r1, r6
 8017f9a:	4622      	mov	r2, r4
 8017f9c:	f7fb fe60 	bl	8013c60 <memcpy>
 8017fa0:	4631      	mov	r1, r6
 8017fa2:	4638      	mov	r0, r7
 8017fa4:	f7fb fe88 	bl	8013cb8 <_free_r>
 8017fa8:	e7e9      	b.n	8017f7e <_realloc_r+0x1c>
 8017faa:	4635      	mov	r5, r6
 8017fac:	e7e7      	b.n	8017f7e <_realloc_r+0x1c>

08017fae <_malloc_usable_size_r>:
 8017fae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017fb2:	1f18      	subs	r0, r3, #4
 8017fb4:	2b00      	cmp	r3, #0
 8017fb6:	bfbc      	itt	lt
 8017fb8:	580b      	ldrlt	r3, [r1, r0]
 8017fba:	18c0      	addlt	r0, r0, r3
 8017fbc:	4770      	bx	lr
	...

08017fc0 <ceil>:
 8017fc0:	ec51 0b10 	vmov	r0, r1, d0
 8017fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017fc8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8017fcc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8017fd0:	2e13      	cmp	r6, #19
 8017fd2:	460c      	mov	r4, r1
 8017fd4:	ee10 5a10 	vmov	r5, s0
 8017fd8:	4680      	mov	r8, r0
 8017fda:	dc30      	bgt.n	801803e <ceil+0x7e>
 8017fdc:	2e00      	cmp	r6, #0
 8017fde:	da12      	bge.n	8018006 <ceil+0x46>
 8017fe0:	a333      	add	r3, pc, #204	; (adr r3, 80180b0 <ceil+0xf0>)
 8017fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017fe6:	f7e8 f961 	bl	80002ac <__adddf3>
 8017fea:	2200      	movs	r2, #0
 8017fec:	2300      	movs	r3, #0
 8017fee:	f7e8 fda3 	bl	8000b38 <__aeabi_dcmpgt>
 8017ff2:	b128      	cbz	r0, 8018000 <ceil+0x40>
 8017ff4:	2c00      	cmp	r4, #0
 8017ff6:	db55      	blt.n	80180a4 <ceil+0xe4>
 8017ff8:	432c      	orrs	r4, r5
 8017ffa:	d057      	beq.n	80180ac <ceil+0xec>
 8017ffc:	4c2e      	ldr	r4, [pc, #184]	; (80180b8 <ceil+0xf8>)
 8017ffe:	2500      	movs	r5, #0
 8018000:	4621      	mov	r1, r4
 8018002:	4628      	mov	r0, r5
 8018004:	e025      	b.n	8018052 <ceil+0x92>
 8018006:	4f2d      	ldr	r7, [pc, #180]	; (80180bc <ceil+0xfc>)
 8018008:	4137      	asrs	r7, r6
 801800a:	ea01 0307 	and.w	r3, r1, r7
 801800e:	4303      	orrs	r3, r0
 8018010:	d01f      	beq.n	8018052 <ceil+0x92>
 8018012:	a327      	add	r3, pc, #156	; (adr r3, 80180b0 <ceil+0xf0>)
 8018014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018018:	f7e8 f948 	bl	80002ac <__adddf3>
 801801c:	2200      	movs	r2, #0
 801801e:	2300      	movs	r3, #0
 8018020:	f7e8 fd8a 	bl	8000b38 <__aeabi_dcmpgt>
 8018024:	2800      	cmp	r0, #0
 8018026:	d0eb      	beq.n	8018000 <ceil+0x40>
 8018028:	2c00      	cmp	r4, #0
 801802a:	bfc2      	ittt	gt
 801802c:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8018030:	fa43 f606 	asrgt.w	r6, r3, r6
 8018034:	19a4      	addgt	r4, r4, r6
 8018036:	ea24 0407 	bic.w	r4, r4, r7
 801803a:	2500      	movs	r5, #0
 801803c:	e7e0      	b.n	8018000 <ceil+0x40>
 801803e:	2e33      	cmp	r6, #51	; 0x33
 8018040:	dd0b      	ble.n	801805a <ceil+0x9a>
 8018042:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8018046:	d104      	bne.n	8018052 <ceil+0x92>
 8018048:	ee10 2a10 	vmov	r2, s0
 801804c:	460b      	mov	r3, r1
 801804e:	f7e8 f92d 	bl	80002ac <__adddf3>
 8018052:	ec41 0b10 	vmov	d0, r0, r1
 8018056:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801805a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801805e:	f04f 33ff 	mov.w	r3, #4294967295
 8018062:	fa23 f707 	lsr.w	r7, r3, r7
 8018066:	4207      	tst	r7, r0
 8018068:	d0f3      	beq.n	8018052 <ceil+0x92>
 801806a:	a311      	add	r3, pc, #68	; (adr r3, 80180b0 <ceil+0xf0>)
 801806c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018070:	f7e8 f91c 	bl	80002ac <__adddf3>
 8018074:	2200      	movs	r2, #0
 8018076:	2300      	movs	r3, #0
 8018078:	f7e8 fd5e 	bl	8000b38 <__aeabi_dcmpgt>
 801807c:	2800      	cmp	r0, #0
 801807e:	d0bf      	beq.n	8018000 <ceil+0x40>
 8018080:	2c00      	cmp	r4, #0
 8018082:	dd02      	ble.n	801808a <ceil+0xca>
 8018084:	2e14      	cmp	r6, #20
 8018086:	d103      	bne.n	8018090 <ceil+0xd0>
 8018088:	3401      	adds	r4, #1
 801808a:	ea25 0507 	bic.w	r5, r5, r7
 801808e:	e7b7      	b.n	8018000 <ceil+0x40>
 8018090:	2301      	movs	r3, #1
 8018092:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8018096:	fa03 f606 	lsl.w	r6, r3, r6
 801809a:	4435      	add	r5, r6
 801809c:	4545      	cmp	r5, r8
 801809e:	bf38      	it	cc
 80180a0:	18e4      	addcc	r4, r4, r3
 80180a2:	e7f2      	b.n	801808a <ceil+0xca>
 80180a4:	2500      	movs	r5, #0
 80180a6:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80180aa:	e7a9      	b.n	8018000 <ceil+0x40>
 80180ac:	4625      	mov	r5, r4
 80180ae:	e7a7      	b.n	8018000 <ceil+0x40>
 80180b0:	8800759c 	.word	0x8800759c
 80180b4:	7e37e43c 	.word	0x7e37e43c
 80180b8:	3ff00000 	.word	0x3ff00000
 80180bc:	000fffff 	.word	0x000fffff

080180c0 <cos>:
 80180c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80180c2:	ec51 0b10 	vmov	r0, r1, d0
 80180c6:	4a1e      	ldr	r2, [pc, #120]	; (8018140 <cos+0x80>)
 80180c8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80180cc:	4293      	cmp	r3, r2
 80180ce:	dc06      	bgt.n	80180de <cos+0x1e>
 80180d0:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8018138 <cos+0x78>
 80180d4:	f000 fcec 	bl	8018ab0 <__kernel_cos>
 80180d8:	ec51 0b10 	vmov	r0, r1, d0
 80180dc:	e007      	b.n	80180ee <cos+0x2e>
 80180de:	4a19      	ldr	r2, [pc, #100]	; (8018144 <cos+0x84>)
 80180e0:	4293      	cmp	r3, r2
 80180e2:	dd09      	ble.n	80180f8 <cos+0x38>
 80180e4:	ee10 2a10 	vmov	r2, s0
 80180e8:	460b      	mov	r3, r1
 80180ea:	f7e8 f8dd 	bl	80002a8 <__aeabi_dsub>
 80180ee:	ec41 0b10 	vmov	d0, r0, r1
 80180f2:	b005      	add	sp, #20
 80180f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80180f8:	4668      	mov	r0, sp
 80180fa:	f000 fa35 	bl	8018568 <__ieee754_rem_pio2>
 80180fe:	f000 0003 	and.w	r0, r0, #3
 8018102:	2801      	cmp	r0, #1
 8018104:	ed9d 1b02 	vldr	d1, [sp, #8]
 8018108:	ed9d 0b00 	vldr	d0, [sp]
 801810c:	d007      	beq.n	801811e <cos+0x5e>
 801810e:	2802      	cmp	r0, #2
 8018110:	d00e      	beq.n	8018130 <cos+0x70>
 8018112:	2800      	cmp	r0, #0
 8018114:	d0de      	beq.n	80180d4 <cos+0x14>
 8018116:	2001      	movs	r0, #1
 8018118:	f001 f8d2 	bl	80192c0 <__kernel_sin>
 801811c:	e7dc      	b.n	80180d8 <cos+0x18>
 801811e:	f001 f8cf 	bl	80192c0 <__kernel_sin>
 8018122:	ec53 2b10 	vmov	r2, r3, d0
 8018126:	ee10 0a10 	vmov	r0, s0
 801812a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801812e:	e7de      	b.n	80180ee <cos+0x2e>
 8018130:	f000 fcbe 	bl	8018ab0 <__kernel_cos>
 8018134:	e7f5      	b.n	8018122 <cos+0x62>
 8018136:	bf00      	nop
	...
 8018140:	3fe921fb 	.word	0x3fe921fb
 8018144:	7fefffff 	.word	0x7fefffff

08018148 <round>:
 8018148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801814a:	ec57 6b10 	vmov	r6, r7, d0
 801814e:	f3c7 500a 	ubfx	r0, r7, #20, #11
 8018152:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 8018156:	2c13      	cmp	r4, #19
 8018158:	463b      	mov	r3, r7
 801815a:	463d      	mov	r5, r7
 801815c:	dc17      	bgt.n	801818e <round+0x46>
 801815e:	2c00      	cmp	r4, #0
 8018160:	da09      	bge.n	8018176 <round+0x2e>
 8018162:	3401      	adds	r4, #1
 8018164:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8018168:	d103      	bne.n	8018172 <round+0x2a>
 801816a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801816e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8018172:	2100      	movs	r1, #0
 8018174:	e02c      	b.n	80181d0 <round+0x88>
 8018176:	4a18      	ldr	r2, [pc, #96]	; (80181d8 <round+0x90>)
 8018178:	4122      	asrs	r2, r4
 801817a:	4217      	tst	r7, r2
 801817c:	d100      	bne.n	8018180 <round+0x38>
 801817e:	b19e      	cbz	r6, 80181a8 <round+0x60>
 8018180:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8018184:	4123      	asrs	r3, r4
 8018186:	442b      	add	r3, r5
 8018188:	ea23 0302 	bic.w	r3, r3, r2
 801818c:	e7f1      	b.n	8018172 <round+0x2a>
 801818e:	2c33      	cmp	r4, #51	; 0x33
 8018190:	dd0d      	ble.n	80181ae <round+0x66>
 8018192:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8018196:	d107      	bne.n	80181a8 <round+0x60>
 8018198:	4630      	mov	r0, r6
 801819a:	4639      	mov	r1, r7
 801819c:	ee10 2a10 	vmov	r2, s0
 80181a0:	f7e8 f884 	bl	80002ac <__adddf3>
 80181a4:	4606      	mov	r6, r0
 80181a6:	460f      	mov	r7, r1
 80181a8:	ec47 6b10 	vmov	d0, r6, r7
 80181ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80181ae:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 80181b2:	f04f 30ff 	mov.w	r0, #4294967295
 80181b6:	40d0      	lsrs	r0, r2
 80181b8:	4206      	tst	r6, r0
 80181ba:	d0f5      	beq.n	80181a8 <round+0x60>
 80181bc:	2201      	movs	r2, #1
 80181be:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 80181c2:	fa02 f404 	lsl.w	r4, r2, r4
 80181c6:	1931      	adds	r1, r6, r4
 80181c8:	bf28      	it	cs
 80181ca:	189b      	addcs	r3, r3, r2
 80181cc:	ea21 0100 	bic.w	r1, r1, r0
 80181d0:	461f      	mov	r7, r3
 80181d2:	460e      	mov	r6, r1
 80181d4:	e7e8      	b.n	80181a8 <round+0x60>
 80181d6:	bf00      	nop
 80181d8:	000fffff 	.word	0x000fffff
 80181dc:	00000000 	.word	0x00000000

080181e0 <sin>:
 80181e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80181e2:	ec51 0b10 	vmov	r0, r1, d0
 80181e6:	4a20      	ldr	r2, [pc, #128]	; (8018268 <sin+0x88>)
 80181e8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80181ec:	4293      	cmp	r3, r2
 80181ee:	dc07      	bgt.n	8018200 <sin+0x20>
 80181f0:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8018260 <sin+0x80>
 80181f4:	2000      	movs	r0, #0
 80181f6:	f001 f863 	bl	80192c0 <__kernel_sin>
 80181fa:	ec51 0b10 	vmov	r0, r1, d0
 80181fe:	e007      	b.n	8018210 <sin+0x30>
 8018200:	4a1a      	ldr	r2, [pc, #104]	; (801826c <sin+0x8c>)
 8018202:	4293      	cmp	r3, r2
 8018204:	dd09      	ble.n	801821a <sin+0x3a>
 8018206:	ee10 2a10 	vmov	r2, s0
 801820a:	460b      	mov	r3, r1
 801820c:	f7e8 f84c 	bl	80002a8 <__aeabi_dsub>
 8018210:	ec41 0b10 	vmov	d0, r0, r1
 8018214:	b005      	add	sp, #20
 8018216:	f85d fb04 	ldr.w	pc, [sp], #4
 801821a:	4668      	mov	r0, sp
 801821c:	f000 f9a4 	bl	8018568 <__ieee754_rem_pio2>
 8018220:	f000 0003 	and.w	r0, r0, #3
 8018224:	2801      	cmp	r0, #1
 8018226:	ed9d 1b02 	vldr	d1, [sp, #8]
 801822a:	ed9d 0b00 	vldr	d0, [sp]
 801822e:	d004      	beq.n	801823a <sin+0x5a>
 8018230:	2802      	cmp	r0, #2
 8018232:	d005      	beq.n	8018240 <sin+0x60>
 8018234:	b970      	cbnz	r0, 8018254 <sin+0x74>
 8018236:	2001      	movs	r0, #1
 8018238:	e7dd      	b.n	80181f6 <sin+0x16>
 801823a:	f000 fc39 	bl	8018ab0 <__kernel_cos>
 801823e:	e7dc      	b.n	80181fa <sin+0x1a>
 8018240:	2001      	movs	r0, #1
 8018242:	f001 f83d 	bl	80192c0 <__kernel_sin>
 8018246:	ec53 2b10 	vmov	r2, r3, d0
 801824a:	ee10 0a10 	vmov	r0, s0
 801824e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8018252:	e7dd      	b.n	8018210 <sin+0x30>
 8018254:	f000 fc2c 	bl	8018ab0 <__kernel_cos>
 8018258:	e7f5      	b.n	8018246 <sin+0x66>
 801825a:	bf00      	nop
 801825c:	f3af 8000 	nop.w
	...
 8018268:	3fe921fb 	.word	0x3fe921fb
 801826c:	7fefffff 	.word	0x7fefffff

08018270 <ceilf>:
 8018270:	ee10 3a10 	vmov	r3, s0
 8018274:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8018278:	0dca      	lsrs	r2, r1, #23
 801827a:	3a7f      	subs	r2, #127	; 0x7f
 801827c:	2a16      	cmp	r2, #22
 801827e:	dc2a      	bgt.n	80182d6 <ceilf+0x66>
 8018280:	2a00      	cmp	r2, #0
 8018282:	da11      	bge.n	80182a8 <ceilf+0x38>
 8018284:	eddf 7a18 	vldr	s15, [pc, #96]	; 80182e8 <ceilf+0x78>
 8018288:	ee30 0a27 	vadd.f32	s0, s0, s15
 801828c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8018290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018294:	dd05      	ble.n	80182a2 <ceilf+0x32>
 8018296:	2b00      	cmp	r3, #0
 8018298:	db23      	blt.n	80182e2 <ceilf+0x72>
 801829a:	2900      	cmp	r1, #0
 801829c:	bf18      	it	ne
 801829e:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 80182a2:	ee00 3a10 	vmov	s0, r3
 80182a6:	4770      	bx	lr
 80182a8:	4910      	ldr	r1, [pc, #64]	; (80182ec <ceilf+0x7c>)
 80182aa:	4111      	asrs	r1, r2
 80182ac:	420b      	tst	r3, r1
 80182ae:	d0fa      	beq.n	80182a6 <ceilf+0x36>
 80182b0:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80182e8 <ceilf+0x78>
 80182b4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80182b8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80182bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80182c0:	ddef      	ble.n	80182a2 <ceilf+0x32>
 80182c2:	2b00      	cmp	r3, #0
 80182c4:	bfc2      	ittt	gt
 80182c6:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 80182ca:	fa40 f202 	asrgt.w	r2, r0, r2
 80182ce:	189b      	addgt	r3, r3, r2
 80182d0:	ea23 0301 	bic.w	r3, r3, r1
 80182d4:	e7e5      	b.n	80182a2 <ceilf+0x32>
 80182d6:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80182da:	d3e4      	bcc.n	80182a6 <ceilf+0x36>
 80182dc:	ee30 0a00 	vadd.f32	s0, s0, s0
 80182e0:	4770      	bx	lr
 80182e2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80182e6:	e7dc      	b.n	80182a2 <ceilf+0x32>
 80182e8:	7149f2ca 	.word	0x7149f2ca
 80182ec:	007fffff 	.word	0x007fffff

080182f0 <atan2>:
 80182f0:	f000 b85a 	b.w	80183a8 <__ieee754_atan2>

080182f4 <sqrt>:
 80182f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80182f8:	ed2d 8b02 	vpush	{d8}
 80182fc:	b08b      	sub	sp, #44	; 0x2c
 80182fe:	ec55 4b10 	vmov	r4, r5, d0
 8018302:	f000 fb23 	bl	801894c <__ieee754_sqrt>
 8018306:	4b26      	ldr	r3, [pc, #152]	; (80183a0 <sqrt+0xac>)
 8018308:	eeb0 8a40 	vmov.f32	s16, s0
 801830c:	eef0 8a60 	vmov.f32	s17, s1
 8018310:	f993 6000 	ldrsb.w	r6, [r3]
 8018314:	1c73      	adds	r3, r6, #1
 8018316:	d02a      	beq.n	801836e <sqrt+0x7a>
 8018318:	4622      	mov	r2, r4
 801831a:	462b      	mov	r3, r5
 801831c:	4620      	mov	r0, r4
 801831e:	4629      	mov	r1, r5
 8018320:	f7e8 fc14 	bl	8000b4c <__aeabi_dcmpun>
 8018324:	4607      	mov	r7, r0
 8018326:	bb10      	cbnz	r0, 801836e <sqrt+0x7a>
 8018328:	f04f 0800 	mov.w	r8, #0
 801832c:	f04f 0900 	mov.w	r9, #0
 8018330:	4642      	mov	r2, r8
 8018332:	464b      	mov	r3, r9
 8018334:	4620      	mov	r0, r4
 8018336:	4629      	mov	r1, r5
 8018338:	f7e8 fbe0 	bl	8000afc <__aeabi_dcmplt>
 801833c:	b1b8      	cbz	r0, 801836e <sqrt+0x7a>
 801833e:	2301      	movs	r3, #1
 8018340:	9300      	str	r3, [sp, #0]
 8018342:	4b18      	ldr	r3, [pc, #96]	; (80183a4 <sqrt+0xb0>)
 8018344:	9301      	str	r3, [sp, #4]
 8018346:	9708      	str	r7, [sp, #32]
 8018348:	e9cd 4504 	strd	r4, r5, [sp, #16]
 801834c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8018350:	b9b6      	cbnz	r6, 8018380 <sqrt+0x8c>
 8018352:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8018356:	4668      	mov	r0, sp
 8018358:	f001 fa9e 	bl	8019898 <matherr>
 801835c:	b1d0      	cbz	r0, 8018394 <sqrt+0xa0>
 801835e:	9b08      	ldr	r3, [sp, #32]
 8018360:	b11b      	cbz	r3, 801836a <sqrt+0x76>
 8018362:	f7fb fc43 	bl	8013bec <__errno>
 8018366:	9b08      	ldr	r3, [sp, #32]
 8018368:	6003      	str	r3, [r0, #0]
 801836a:	ed9d 8b06 	vldr	d8, [sp, #24]
 801836e:	eeb0 0a48 	vmov.f32	s0, s16
 8018372:	eef0 0a68 	vmov.f32	s1, s17
 8018376:	b00b      	add	sp, #44	; 0x2c
 8018378:	ecbd 8b02 	vpop	{d8}
 801837c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018380:	4642      	mov	r2, r8
 8018382:	464b      	mov	r3, r9
 8018384:	4640      	mov	r0, r8
 8018386:	4649      	mov	r1, r9
 8018388:	f7e8 fa70 	bl	800086c <__aeabi_ddiv>
 801838c:	2e02      	cmp	r6, #2
 801838e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8018392:	d1e0      	bne.n	8018356 <sqrt+0x62>
 8018394:	f7fb fc2a 	bl	8013bec <__errno>
 8018398:	2321      	movs	r3, #33	; 0x21
 801839a:	6003      	str	r3, [r0, #0]
 801839c:	e7df      	b.n	801835e <sqrt+0x6a>
 801839e:	bf00      	nop
 80183a0:	20001004 	.word	0x20001004
 80183a4:	0801a1a4 	.word	0x0801a1a4

080183a8 <__ieee754_atan2>:
 80183a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80183ac:	ec57 6b11 	vmov	r6, r7, d1
 80183b0:	4273      	negs	r3, r6
 80183b2:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80183b6:	4333      	orrs	r3, r6
 80183b8:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8018560 <__ieee754_atan2+0x1b8>
 80183bc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80183c0:	4573      	cmp	r3, lr
 80183c2:	ec51 0b10 	vmov	r0, r1, d0
 80183c6:	ee11 8a10 	vmov	r8, s2
 80183ca:	d80a      	bhi.n	80183e2 <__ieee754_atan2+0x3a>
 80183cc:	4244      	negs	r4, r0
 80183ce:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80183d2:	4304      	orrs	r4, r0
 80183d4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80183d8:	4574      	cmp	r4, lr
 80183da:	468c      	mov	ip, r1
 80183dc:	ee10 9a10 	vmov	r9, s0
 80183e0:	d907      	bls.n	80183f2 <__ieee754_atan2+0x4a>
 80183e2:	4632      	mov	r2, r6
 80183e4:	463b      	mov	r3, r7
 80183e6:	f7e7 ff61 	bl	80002ac <__adddf3>
 80183ea:	ec41 0b10 	vmov	d0, r0, r1
 80183ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80183f2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80183f6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80183fa:	4334      	orrs	r4, r6
 80183fc:	d103      	bne.n	8018406 <__ieee754_atan2+0x5e>
 80183fe:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018402:	f001 b819 	b.w	8019438 <atan>
 8018406:	17bc      	asrs	r4, r7, #30
 8018408:	f004 0402 	and.w	r4, r4, #2
 801840c:	ea53 0909 	orrs.w	r9, r3, r9
 8018410:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8018414:	d107      	bne.n	8018426 <__ieee754_atan2+0x7e>
 8018416:	2c02      	cmp	r4, #2
 8018418:	d073      	beq.n	8018502 <__ieee754_atan2+0x15a>
 801841a:	2c03      	cmp	r4, #3
 801841c:	d1e5      	bne.n	80183ea <__ieee754_atan2+0x42>
 801841e:	a13e      	add	r1, pc, #248	; (adr r1, 8018518 <__ieee754_atan2+0x170>)
 8018420:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018424:	e7e1      	b.n	80183ea <__ieee754_atan2+0x42>
 8018426:	ea52 0808 	orrs.w	r8, r2, r8
 801842a:	d106      	bne.n	801843a <__ieee754_atan2+0x92>
 801842c:	f1bc 0f00 	cmp.w	ip, #0
 8018430:	da6b      	bge.n	801850a <__ieee754_atan2+0x162>
 8018432:	a13b      	add	r1, pc, #236	; (adr r1, 8018520 <__ieee754_atan2+0x178>)
 8018434:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018438:	e7d7      	b.n	80183ea <__ieee754_atan2+0x42>
 801843a:	4572      	cmp	r2, lr
 801843c:	d120      	bne.n	8018480 <__ieee754_atan2+0xd8>
 801843e:	4293      	cmp	r3, r2
 8018440:	d111      	bne.n	8018466 <__ieee754_atan2+0xbe>
 8018442:	2c02      	cmp	r4, #2
 8018444:	d007      	beq.n	8018456 <__ieee754_atan2+0xae>
 8018446:	2c03      	cmp	r4, #3
 8018448:	d009      	beq.n	801845e <__ieee754_atan2+0xb6>
 801844a:	2c01      	cmp	r4, #1
 801844c:	d155      	bne.n	80184fa <__ieee754_atan2+0x152>
 801844e:	a136      	add	r1, pc, #216	; (adr r1, 8018528 <__ieee754_atan2+0x180>)
 8018450:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018454:	e7c9      	b.n	80183ea <__ieee754_atan2+0x42>
 8018456:	a136      	add	r1, pc, #216	; (adr r1, 8018530 <__ieee754_atan2+0x188>)
 8018458:	e9d1 0100 	ldrd	r0, r1, [r1]
 801845c:	e7c5      	b.n	80183ea <__ieee754_atan2+0x42>
 801845e:	a136      	add	r1, pc, #216	; (adr r1, 8018538 <__ieee754_atan2+0x190>)
 8018460:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018464:	e7c1      	b.n	80183ea <__ieee754_atan2+0x42>
 8018466:	2c02      	cmp	r4, #2
 8018468:	d04b      	beq.n	8018502 <__ieee754_atan2+0x15a>
 801846a:	2c03      	cmp	r4, #3
 801846c:	d0d7      	beq.n	801841e <__ieee754_atan2+0x76>
 801846e:	2c01      	cmp	r4, #1
 8018470:	f04f 0000 	mov.w	r0, #0
 8018474:	d102      	bne.n	801847c <__ieee754_atan2+0xd4>
 8018476:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801847a:	e7b6      	b.n	80183ea <__ieee754_atan2+0x42>
 801847c:	2100      	movs	r1, #0
 801847e:	e7b4      	b.n	80183ea <__ieee754_atan2+0x42>
 8018480:	4573      	cmp	r3, lr
 8018482:	d0d3      	beq.n	801842c <__ieee754_atan2+0x84>
 8018484:	1a9b      	subs	r3, r3, r2
 8018486:	151b      	asrs	r3, r3, #20
 8018488:	2b3c      	cmp	r3, #60	; 0x3c
 801848a:	dc1e      	bgt.n	80184ca <__ieee754_atan2+0x122>
 801848c:	2f00      	cmp	r7, #0
 801848e:	da01      	bge.n	8018494 <__ieee754_atan2+0xec>
 8018490:	333c      	adds	r3, #60	; 0x3c
 8018492:	db1e      	blt.n	80184d2 <__ieee754_atan2+0x12a>
 8018494:	4632      	mov	r2, r6
 8018496:	463b      	mov	r3, r7
 8018498:	f7e8 f9e8 	bl	800086c <__aeabi_ddiv>
 801849c:	ec41 0b10 	vmov	d0, r0, r1
 80184a0:	f001 f96a 	bl	8019778 <fabs>
 80184a4:	f000 ffc8 	bl	8019438 <atan>
 80184a8:	ec51 0b10 	vmov	r0, r1, d0
 80184ac:	2c01      	cmp	r4, #1
 80184ae:	d013      	beq.n	80184d8 <__ieee754_atan2+0x130>
 80184b0:	2c02      	cmp	r4, #2
 80184b2:	d015      	beq.n	80184e0 <__ieee754_atan2+0x138>
 80184b4:	2c00      	cmp	r4, #0
 80184b6:	d098      	beq.n	80183ea <__ieee754_atan2+0x42>
 80184b8:	a321      	add	r3, pc, #132	; (adr r3, 8018540 <__ieee754_atan2+0x198>)
 80184ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80184be:	f7e7 fef3 	bl	80002a8 <__aeabi_dsub>
 80184c2:	a321      	add	r3, pc, #132	; (adr r3, 8018548 <__ieee754_atan2+0x1a0>)
 80184c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80184c8:	e014      	b.n	80184f4 <__ieee754_atan2+0x14c>
 80184ca:	a121      	add	r1, pc, #132	; (adr r1, 8018550 <__ieee754_atan2+0x1a8>)
 80184cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80184d0:	e7ec      	b.n	80184ac <__ieee754_atan2+0x104>
 80184d2:	2000      	movs	r0, #0
 80184d4:	2100      	movs	r1, #0
 80184d6:	e7e9      	b.n	80184ac <__ieee754_atan2+0x104>
 80184d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80184dc:	4619      	mov	r1, r3
 80184de:	e784      	b.n	80183ea <__ieee754_atan2+0x42>
 80184e0:	a317      	add	r3, pc, #92	; (adr r3, 8018540 <__ieee754_atan2+0x198>)
 80184e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80184e6:	f7e7 fedf 	bl	80002a8 <__aeabi_dsub>
 80184ea:	4602      	mov	r2, r0
 80184ec:	460b      	mov	r3, r1
 80184ee:	a116      	add	r1, pc, #88	; (adr r1, 8018548 <__ieee754_atan2+0x1a0>)
 80184f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80184f4:	f7e7 fed8 	bl	80002a8 <__aeabi_dsub>
 80184f8:	e777      	b.n	80183ea <__ieee754_atan2+0x42>
 80184fa:	a117      	add	r1, pc, #92	; (adr r1, 8018558 <__ieee754_atan2+0x1b0>)
 80184fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018500:	e773      	b.n	80183ea <__ieee754_atan2+0x42>
 8018502:	a111      	add	r1, pc, #68	; (adr r1, 8018548 <__ieee754_atan2+0x1a0>)
 8018504:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018508:	e76f      	b.n	80183ea <__ieee754_atan2+0x42>
 801850a:	a111      	add	r1, pc, #68	; (adr r1, 8018550 <__ieee754_atan2+0x1a8>)
 801850c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018510:	e76b      	b.n	80183ea <__ieee754_atan2+0x42>
 8018512:	bf00      	nop
 8018514:	f3af 8000 	nop.w
 8018518:	54442d18 	.word	0x54442d18
 801851c:	c00921fb 	.word	0xc00921fb
 8018520:	54442d18 	.word	0x54442d18
 8018524:	bff921fb 	.word	0xbff921fb
 8018528:	54442d18 	.word	0x54442d18
 801852c:	bfe921fb 	.word	0xbfe921fb
 8018530:	7f3321d2 	.word	0x7f3321d2
 8018534:	4002d97c 	.word	0x4002d97c
 8018538:	7f3321d2 	.word	0x7f3321d2
 801853c:	c002d97c 	.word	0xc002d97c
 8018540:	33145c07 	.word	0x33145c07
 8018544:	3ca1a626 	.word	0x3ca1a626
 8018548:	54442d18 	.word	0x54442d18
 801854c:	400921fb 	.word	0x400921fb
 8018550:	54442d18 	.word	0x54442d18
 8018554:	3ff921fb 	.word	0x3ff921fb
 8018558:	54442d18 	.word	0x54442d18
 801855c:	3fe921fb 	.word	0x3fe921fb
 8018560:	7ff00000 	.word	0x7ff00000
 8018564:	00000000 	.word	0x00000000

08018568 <__ieee754_rem_pio2>:
 8018568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801856c:	ec57 6b10 	vmov	r6, r7, d0
 8018570:	4bc3      	ldr	r3, [pc, #780]	; (8018880 <__ieee754_rem_pio2+0x318>)
 8018572:	b08d      	sub	sp, #52	; 0x34
 8018574:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8018578:	4598      	cmp	r8, r3
 801857a:	4604      	mov	r4, r0
 801857c:	9704      	str	r7, [sp, #16]
 801857e:	dc07      	bgt.n	8018590 <__ieee754_rem_pio2+0x28>
 8018580:	2200      	movs	r2, #0
 8018582:	2300      	movs	r3, #0
 8018584:	ed84 0b00 	vstr	d0, [r4]
 8018588:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801858c:	2500      	movs	r5, #0
 801858e:	e027      	b.n	80185e0 <__ieee754_rem_pio2+0x78>
 8018590:	4bbc      	ldr	r3, [pc, #752]	; (8018884 <__ieee754_rem_pio2+0x31c>)
 8018592:	4598      	cmp	r8, r3
 8018594:	dc75      	bgt.n	8018682 <__ieee754_rem_pio2+0x11a>
 8018596:	9b04      	ldr	r3, [sp, #16]
 8018598:	4dbb      	ldr	r5, [pc, #748]	; (8018888 <__ieee754_rem_pio2+0x320>)
 801859a:	2b00      	cmp	r3, #0
 801859c:	ee10 0a10 	vmov	r0, s0
 80185a0:	a3a9      	add	r3, pc, #676	; (adr r3, 8018848 <__ieee754_rem_pio2+0x2e0>)
 80185a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80185a6:	4639      	mov	r1, r7
 80185a8:	dd36      	ble.n	8018618 <__ieee754_rem_pio2+0xb0>
 80185aa:	f7e7 fe7d 	bl	80002a8 <__aeabi_dsub>
 80185ae:	45a8      	cmp	r8, r5
 80185b0:	4606      	mov	r6, r0
 80185b2:	460f      	mov	r7, r1
 80185b4:	d018      	beq.n	80185e8 <__ieee754_rem_pio2+0x80>
 80185b6:	a3a6      	add	r3, pc, #664	; (adr r3, 8018850 <__ieee754_rem_pio2+0x2e8>)
 80185b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80185bc:	f7e7 fe74 	bl	80002a8 <__aeabi_dsub>
 80185c0:	4602      	mov	r2, r0
 80185c2:	460b      	mov	r3, r1
 80185c4:	e9c4 2300 	strd	r2, r3, [r4]
 80185c8:	4630      	mov	r0, r6
 80185ca:	4639      	mov	r1, r7
 80185cc:	f7e7 fe6c 	bl	80002a8 <__aeabi_dsub>
 80185d0:	a39f      	add	r3, pc, #636	; (adr r3, 8018850 <__ieee754_rem_pio2+0x2e8>)
 80185d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80185d6:	f7e7 fe67 	bl	80002a8 <__aeabi_dsub>
 80185da:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80185de:	2501      	movs	r5, #1
 80185e0:	4628      	mov	r0, r5
 80185e2:	b00d      	add	sp, #52	; 0x34
 80185e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80185e8:	a39b      	add	r3, pc, #620	; (adr r3, 8018858 <__ieee754_rem_pio2+0x2f0>)
 80185ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80185ee:	f7e7 fe5b 	bl	80002a8 <__aeabi_dsub>
 80185f2:	a39b      	add	r3, pc, #620	; (adr r3, 8018860 <__ieee754_rem_pio2+0x2f8>)
 80185f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80185f8:	4606      	mov	r6, r0
 80185fa:	460f      	mov	r7, r1
 80185fc:	f7e7 fe54 	bl	80002a8 <__aeabi_dsub>
 8018600:	4602      	mov	r2, r0
 8018602:	460b      	mov	r3, r1
 8018604:	e9c4 2300 	strd	r2, r3, [r4]
 8018608:	4630      	mov	r0, r6
 801860a:	4639      	mov	r1, r7
 801860c:	f7e7 fe4c 	bl	80002a8 <__aeabi_dsub>
 8018610:	a393      	add	r3, pc, #588	; (adr r3, 8018860 <__ieee754_rem_pio2+0x2f8>)
 8018612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018616:	e7de      	b.n	80185d6 <__ieee754_rem_pio2+0x6e>
 8018618:	f7e7 fe48 	bl	80002ac <__adddf3>
 801861c:	45a8      	cmp	r8, r5
 801861e:	4606      	mov	r6, r0
 8018620:	460f      	mov	r7, r1
 8018622:	d016      	beq.n	8018652 <__ieee754_rem_pio2+0xea>
 8018624:	a38a      	add	r3, pc, #552	; (adr r3, 8018850 <__ieee754_rem_pio2+0x2e8>)
 8018626:	e9d3 2300 	ldrd	r2, r3, [r3]
 801862a:	f7e7 fe3f 	bl	80002ac <__adddf3>
 801862e:	4602      	mov	r2, r0
 8018630:	460b      	mov	r3, r1
 8018632:	e9c4 2300 	strd	r2, r3, [r4]
 8018636:	4630      	mov	r0, r6
 8018638:	4639      	mov	r1, r7
 801863a:	f7e7 fe35 	bl	80002a8 <__aeabi_dsub>
 801863e:	a384      	add	r3, pc, #528	; (adr r3, 8018850 <__ieee754_rem_pio2+0x2e8>)
 8018640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018644:	f7e7 fe32 	bl	80002ac <__adddf3>
 8018648:	f04f 35ff 	mov.w	r5, #4294967295
 801864c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8018650:	e7c6      	b.n	80185e0 <__ieee754_rem_pio2+0x78>
 8018652:	a381      	add	r3, pc, #516	; (adr r3, 8018858 <__ieee754_rem_pio2+0x2f0>)
 8018654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018658:	f7e7 fe28 	bl	80002ac <__adddf3>
 801865c:	a380      	add	r3, pc, #512	; (adr r3, 8018860 <__ieee754_rem_pio2+0x2f8>)
 801865e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018662:	4606      	mov	r6, r0
 8018664:	460f      	mov	r7, r1
 8018666:	f7e7 fe21 	bl	80002ac <__adddf3>
 801866a:	4602      	mov	r2, r0
 801866c:	460b      	mov	r3, r1
 801866e:	e9c4 2300 	strd	r2, r3, [r4]
 8018672:	4630      	mov	r0, r6
 8018674:	4639      	mov	r1, r7
 8018676:	f7e7 fe17 	bl	80002a8 <__aeabi_dsub>
 801867a:	a379      	add	r3, pc, #484	; (adr r3, 8018860 <__ieee754_rem_pio2+0x2f8>)
 801867c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018680:	e7e0      	b.n	8018644 <__ieee754_rem_pio2+0xdc>
 8018682:	4b82      	ldr	r3, [pc, #520]	; (801888c <__ieee754_rem_pio2+0x324>)
 8018684:	4598      	cmp	r8, r3
 8018686:	f300 80d0 	bgt.w	801882a <__ieee754_rem_pio2+0x2c2>
 801868a:	f001 f875 	bl	8019778 <fabs>
 801868e:	ec57 6b10 	vmov	r6, r7, d0
 8018692:	ee10 0a10 	vmov	r0, s0
 8018696:	a374      	add	r3, pc, #464	; (adr r3, 8018868 <__ieee754_rem_pio2+0x300>)
 8018698:	e9d3 2300 	ldrd	r2, r3, [r3]
 801869c:	4639      	mov	r1, r7
 801869e:	f7e7 ffbb 	bl	8000618 <__aeabi_dmul>
 80186a2:	2200      	movs	r2, #0
 80186a4:	4b7a      	ldr	r3, [pc, #488]	; (8018890 <__ieee754_rem_pio2+0x328>)
 80186a6:	f7e7 fe01 	bl	80002ac <__adddf3>
 80186aa:	f7e8 fa65 	bl	8000b78 <__aeabi_d2iz>
 80186ae:	4605      	mov	r5, r0
 80186b0:	f7e7 ff48 	bl	8000544 <__aeabi_i2d>
 80186b4:	a364      	add	r3, pc, #400	; (adr r3, 8018848 <__ieee754_rem_pio2+0x2e0>)
 80186b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80186ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80186be:	f7e7 ffab 	bl	8000618 <__aeabi_dmul>
 80186c2:	4602      	mov	r2, r0
 80186c4:	460b      	mov	r3, r1
 80186c6:	4630      	mov	r0, r6
 80186c8:	4639      	mov	r1, r7
 80186ca:	f7e7 fded 	bl	80002a8 <__aeabi_dsub>
 80186ce:	a360      	add	r3, pc, #384	; (adr r3, 8018850 <__ieee754_rem_pio2+0x2e8>)
 80186d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80186d4:	4682      	mov	sl, r0
 80186d6:	468b      	mov	fp, r1
 80186d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80186dc:	f7e7 ff9c 	bl	8000618 <__aeabi_dmul>
 80186e0:	2d1f      	cmp	r5, #31
 80186e2:	4606      	mov	r6, r0
 80186e4:	460f      	mov	r7, r1
 80186e6:	dc0c      	bgt.n	8018702 <__ieee754_rem_pio2+0x19a>
 80186e8:	1e6a      	subs	r2, r5, #1
 80186ea:	4b6a      	ldr	r3, [pc, #424]	; (8018894 <__ieee754_rem_pio2+0x32c>)
 80186ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80186f0:	4543      	cmp	r3, r8
 80186f2:	d006      	beq.n	8018702 <__ieee754_rem_pio2+0x19a>
 80186f4:	4632      	mov	r2, r6
 80186f6:	463b      	mov	r3, r7
 80186f8:	4650      	mov	r0, sl
 80186fa:	4659      	mov	r1, fp
 80186fc:	f7e7 fdd4 	bl	80002a8 <__aeabi_dsub>
 8018700:	e00e      	b.n	8018720 <__ieee754_rem_pio2+0x1b8>
 8018702:	4632      	mov	r2, r6
 8018704:	463b      	mov	r3, r7
 8018706:	4650      	mov	r0, sl
 8018708:	4659      	mov	r1, fp
 801870a:	f7e7 fdcd 	bl	80002a8 <__aeabi_dsub>
 801870e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8018712:	9305      	str	r3, [sp, #20]
 8018714:	9a05      	ldr	r2, [sp, #20]
 8018716:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801871a:	1ad3      	subs	r3, r2, r3
 801871c:	2b10      	cmp	r3, #16
 801871e:	dc02      	bgt.n	8018726 <__ieee754_rem_pio2+0x1be>
 8018720:	e9c4 0100 	strd	r0, r1, [r4]
 8018724:	e039      	b.n	801879a <__ieee754_rem_pio2+0x232>
 8018726:	a34c      	add	r3, pc, #304	; (adr r3, 8018858 <__ieee754_rem_pio2+0x2f0>)
 8018728:	e9d3 2300 	ldrd	r2, r3, [r3]
 801872c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018730:	f7e7 ff72 	bl	8000618 <__aeabi_dmul>
 8018734:	4606      	mov	r6, r0
 8018736:	460f      	mov	r7, r1
 8018738:	4602      	mov	r2, r0
 801873a:	460b      	mov	r3, r1
 801873c:	4650      	mov	r0, sl
 801873e:	4659      	mov	r1, fp
 8018740:	f7e7 fdb2 	bl	80002a8 <__aeabi_dsub>
 8018744:	4602      	mov	r2, r0
 8018746:	460b      	mov	r3, r1
 8018748:	4680      	mov	r8, r0
 801874a:	4689      	mov	r9, r1
 801874c:	4650      	mov	r0, sl
 801874e:	4659      	mov	r1, fp
 8018750:	f7e7 fdaa 	bl	80002a8 <__aeabi_dsub>
 8018754:	4632      	mov	r2, r6
 8018756:	463b      	mov	r3, r7
 8018758:	f7e7 fda6 	bl	80002a8 <__aeabi_dsub>
 801875c:	a340      	add	r3, pc, #256	; (adr r3, 8018860 <__ieee754_rem_pio2+0x2f8>)
 801875e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018762:	4606      	mov	r6, r0
 8018764:	460f      	mov	r7, r1
 8018766:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801876a:	f7e7 ff55 	bl	8000618 <__aeabi_dmul>
 801876e:	4632      	mov	r2, r6
 8018770:	463b      	mov	r3, r7
 8018772:	f7e7 fd99 	bl	80002a8 <__aeabi_dsub>
 8018776:	4602      	mov	r2, r0
 8018778:	460b      	mov	r3, r1
 801877a:	4606      	mov	r6, r0
 801877c:	460f      	mov	r7, r1
 801877e:	4640      	mov	r0, r8
 8018780:	4649      	mov	r1, r9
 8018782:	f7e7 fd91 	bl	80002a8 <__aeabi_dsub>
 8018786:	9a05      	ldr	r2, [sp, #20]
 8018788:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801878c:	1ad3      	subs	r3, r2, r3
 801878e:	2b31      	cmp	r3, #49	; 0x31
 8018790:	dc20      	bgt.n	80187d4 <__ieee754_rem_pio2+0x26c>
 8018792:	e9c4 0100 	strd	r0, r1, [r4]
 8018796:	46c2      	mov	sl, r8
 8018798:	46cb      	mov	fp, r9
 801879a:	e9d4 8900 	ldrd	r8, r9, [r4]
 801879e:	4650      	mov	r0, sl
 80187a0:	4642      	mov	r2, r8
 80187a2:	464b      	mov	r3, r9
 80187a4:	4659      	mov	r1, fp
 80187a6:	f7e7 fd7f 	bl	80002a8 <__aeabi_dsub>
 80187aa:	463b      	mov	r3, r7
 80187ac:	4632      	mov	r2, r6
 80187ae:	f7e7 fd7b 	bl	80002a8 <__aeabi_dsub>
 80187b2:	9b04      	ldr	r3, [sp, #16]
 80187b4:	2b00      	cmp	r3, #0
 80187b6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80187ba:	f6bf af11 	bge.w	80185e0 <__ieee754_rem_pio2+0x78>
 80187be:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80187c2:	6063      	str	r3, [r4, #4]
 80187c4:	f8c4 8000 	str.w	r8, [r4]
 80187c8:	60a0      	str	r0, [r4, #8]
 80187ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80187ce:	60e3      	str	r3, [r4, #12]
 80187d0:	426d      	negs	r5, r5
 80187d2:	e705      	b.n	80185e0 <__ieee754_rem_pio2+0x78>
 80187d4:	a326      	add	r3, pc, #152	; (adr r3, 8018870 <__ieee754_rem_pio2+0x308>)
 80187d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80187da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80187de:	f7e7 ff1b 	bl	8000618 <__aeabi_dmul>
 80187e2:	4606      	mov	r6, r0
 80187e4:	460f      	mov	r7, r1
 80187e6:	4602      	mov	r2, r0
 80187e8:	460b      	mov	r3, r1
 80187ea:	4640      	mov	r0, r8
 80187ec:	4649      	mov	r1, r9
 80187ee:	f7e7 fd5b 	bl	80002a8 <__aeabi_dsub>
 80187f2:	4602      	mov	r2, r0
 80187f4:	460b      	mov	r3, r1
 80187f6:	4682      	mov	sl, r0
 80187f8:	468b      	mov	fp, r1
 80187fa:	4640      	mov	r0, r8
 80187fc:	4649      	mov	r1, r9
 80187fe:	f7e7 fd53 	bl	80002a8 <__aeabi_dsub>
 8018802:	4632      	mov	r2, r6
 8018804:	463b      	mov	r3, r7
 8018806:	f7e7 fd4f 	bl	80002a8 <__aeabi_dsub>
 801880a:	a31b      	add	r3, pc, #108	; (adr r3, 8018878 <__ieee754_rem_pio2+0x310>)
 801880c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018810:	4606      	mov	r6, r0
 8018812:	460f      	mov	r7, r1
 8018814:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018818:	f7e7 fefe 	bl	8000618 <__aeabi_dmul>
 801881c:	4632      	mov	r2, r6
 801881e:	463b      	mov	r3, r7
 8018820:	f7e7 fd42 	bl	80002a8 <__aeabi_dsub>
 8018824:	4606      	mov	r6, r0
 8018826:	460f      	mov	r7, r1
 8018828:	e764      	b.n	80186f4 <__ieee754_rem_pio2+0x18c>
 801882a:	4b1b      	ldr	r3, [pc, #108]	; (8018898 <__ieee754_rem_pio2+0x330>)
 801882c:	4598      	cmp	r8, r3
 801882e:	dd35      	ble.n	801889c <__ieee754_rem_pio2+0x334>
 8018830:	ee10 2a10 	vmov	r2, s0
 8018834:	463b      	mov	r3, r7
 8018836:	4630      	mov	r0, r6
 8018838:	4639      	mov	r1, r7
 801883a:	f7e7 fd35 	bl	80002a8 <__aeabi_dsub>
 801883e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8018842:	e9c4 0100 	strd	r0, r1, [r4]
 8018846:	e6a1      	b.n	801858c <__ieee754_rem_pio2+0x24>
 8018848:	54400000 	.word	0x54400000
 801884c:	3ff921fb 	.word	0x3ff921fb
 8018850:	1a626331 	.word	0x1a626331
 8018854:	3dd0b461 	.word	0x3dd0b461
 8018858:	1a600000 	.word	0x1a600000
 801885c:	3dd0b461 	.word	0x3dd0b461
 8018860:	2e037073 	.word	0x2e037073
 8018864:	3ba3198a 	.word	0x3ba3198a
 8018868:	6dc9c883 	.word	0x6dc9c883
 801886c:	3fe45f30 	.word	0x3fe45f30
 8018870:	2e000000 	.word	0x2e000000
 8018874:	3ba3198a 	.word	0x3ba3198a
 8018878:	252049c1 	.word	0x252049c1
 801887c:	397b839a 	.word	0x397b839a
 8018880:	3fe921fb 	.word	0x3fe921fb
 8018884:	4002d97b 	.word	0x4002d97b
 8018888:	3ff921fb 	.word	0x3ff921fb
 801888c:	413921fb 	.word	0x413921fb
 8018890:	3fe00000 	.word	0x3fe00000
 8018894:	0801a1ac 	.word	0x0801a1ac
 8018898:	7fefffff 	.word	0x7fefffff
 801889c:	ea4f 5528 	mov.w	r5, r8, asr #20
 80188a0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80188a4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80188a8:	4630      	mov	r0, r6
 80188aa:	460f      	mov	r7, r1
 80188ac:	f7e8 f964 	bl	8000b78 <__aeabi_d2iz>
 80188b0:	f7e7 fe48 	bl	8000544 <__aeabi_i2d>
 80188b4:	4602      	mov	r2, r0
 80188b6:	460b      	mov	r3, r1
 80188b8:	4630      	mov	r0, r6
 80188ba:	4639      	mov	r1, r7
 80188bc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80188c0:	f7e7 fcf2 	bl	80002a8 <__aeabi_dsub>
 80188c4:	2200      	movs	r2, #0
 80188c6:	4b1f      	ldr	r3, [pc, #124]	; (8018944 <__ieee754_rem_pio2+0x3dc>)
 80188c8:	f7e7 fea6 	bl	8000618 <__aeabi_dmul>
 80188cc:	460f      	mov	r7, r1
 80188ce:	4606      	mov	r6, r0
 80188d0:	f7e8 f952 	bl	8000b78 <__aeabi_d2iz>
 80188d4:	f7e7 fe36 	bl	8000544 <__aeabi_i2d>
 80188d8:	4602      	mov	r2, r0
 80188da:	460b      	mov	r3, r1
 80188dc:	4630      	mov	r0, r6
 80188de:	4639      	mov	r1, r7
 80188e0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80188e4:	f7e7 fce0 	bl	80002a8 <__aeabi_dsub>
 80188e8:	2200      	movs	r2, #0
 80188ea:	4b16      	ldr	r3, [pc, #88]	; (8018944 <__ieee754_rem_pio2+0x3dc>)
 80188ec:	f7e7 fe94 	bl	8000618 <__aeabi_dmul>
 80188f0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80188f4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80188f8:	f04f 0803 	mov.w	r8, #3
 80188fc:	2600      	movs	r6, #0
 80188fe:	2700      	movs	r7, #0
 8018900:	4632      	mov	r2, r6
 8018902:	463b      	mov	r3, r7
 8018904:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8018908:	f108 3aff 	add.w	sl, r8, #4294967295
 801890c:	f7e8 f8ec 	bl	8000ae8 <__aeabi_dcmpeq>
 8018910:	b9b0      	cbnz	r0, 8018940 <__ieee754_rem_pio2+0x3d8>
 8018912:	4b0d      	ldr	r3, [pc, #52]	; (8018948 <__ieee754_rem_pio2+0x3e0>)
 8018914:	9301      	str	r3, [sp, #4]
 8018916:	2302      	movs	r3, #2
 8018918:	9300      	str	r3, [sp, #0]
 801891a:	462a      	mov	r2, r5
 801891c:	4643      	mov	r3, r8
 801891e:	4621      	mov	r1, r4
 8018920:	a806      	add	r0, sp, #24
 8018922:	f000 f98d 	bl	8018c40 <__kernel_rem_pio2>
 8018926:	9b04      	ldr	r3, [sp, #16]
 8018928:	2b00      	cmp	r3, #0
 801892a:	4605      	mov	r5, r0
 801892c:	f6bf ae58 	bge.w	80185e0 <__ieee754_rem_pio2+0x78>
 8018930:	6863      	ldr	r3, [r4, #4]
 8018932:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8018936:	6063      	str	r3, [r4, #4]
 8018938:	68e3      	ldr	r3, [r4, #12]
 801893a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801893e:	e746      	b.n	80187ce <__ieee754_rem_pio2+0x266>
 8018940:	46d0      	mov	r8, sl
 8018942:	e7dd      	b.n	8018900 <__ieee754_rem_pio2+0x398>
 8018944:	41700000 	.word	0x41700000
 8018948:	0801a22c 	.word	0x0801a22c

0801894c <__ieee754_sqrt>:
 801894c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018950:	4955      	ldr	r1, [pc, #340]	; (8018aa8 <__ieee754_sqrt+0x15c>)
 8018952:	ec55 4b10 	vmov	r4, r5, d0
 8018956:	43a9      	bics	r1, r5
 8018958:	462b      	mov	r3, r5
 801895a:	462a      	mov	r2, r5
 801895c:	d112      	bne.n	8018984 <__ieee754_sqrt+0x38>
 801895e:	ee10 2a10 	vmov	r2, s0
 8018962:	ee10 0a10 	vmov	r0, s0
 8018966:	4629      	mov	r1, r5
 8018968:	f7e7 fe56 	bl	8000618 <__aeabi_dmul>
 801896c:	4602      	mov	r2, r0
 801896e:	460b      	mov	r3, r1
 8018970:	4620      	mov	r0, r4
 8018972:	4629      	mov	r1, r5
 8018974:	f7e7 fc9a 	bl	80002ac <__adddf3>
 8018978:	4604      	mov	r4, r0
 801897a:	460d      	mov	r5, r1
 801897c:	ec45 4b10 	vmov	d0, r4, r5
 8018980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018984:	2d00      	cmp	r5, #0
 8018986:	ee10 0a10 	vmov	r0, s0
 801898a:	4621      	mov	r1, r4
 801898c:	dc0f      	bgt.n	80189ae <__ieee754_sqrt+0x62>
 801898e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8018992:	4330      	orrs	r0, r6
 8018994:	d0f2      	beq.n	801897c <__ieee754_sqrt+0x30>
 8018996:	b155      	cbz	r5, 80189ae <__ieee754_sqrt+0x62>
 8018998:	ee10 2a10 	vmov	r2, s0
 801899c:	4620      	mov	r0, r4
 801899e:	4629      	mov	r1, r5
 80189a0:	f7e7 fc82 	bl	80002a8 <__aeabi_dsub>
 80189a4:	4602      	mov	r2, r0
 80189a6:	460b      	mov	r3, r1
 80189a8:	f7e7 ff60 	bl	800086c <__aeabi_ddiv>
 80189ac:	e7e4      	b.n	8018978 <__ieee754_sqrt+0x2c>
 80189ae:	151b      	asrs	r3, r3, #20
 80189b0:	d073      	beq.n	8018a9a <__ieee754_sqrt+0x14e>
 80189b2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80189b6:	07dd      	lsls	r5, r3, #31
 80189b8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80189bc:	bf48      	it	mi
 80189be:	0fc8      	lsrmi	r0, r1, #31
 80189c0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80189c4:	bf44      	itt	mi
 80189c6:	0049      	lslmi	r1, r1, #1
 80189c8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 80189cc:	2500      	movs	r5, #0
 80189ce:	1058      	asrs	r0, r3, #1
 80189d0:	0fcb      	lsrs	r3, r1, #31
 80189d2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80189d6:	0049      	lsls	r1, r1, #1
 80189d8:	2316      	movs	r3, #22
 80189da:	462c      	mov	r4, r5
 80189dc:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80189e0:	19a7      	adds	r7, r4, r6
 80189e2:	4297      	cmp	r7, r2
 80189e4:	bfde      	ittt	le
 80189e6:	19bc      	addle	r4, r7, r6
 80189e8:	1bd2      	suble	r2, r2, r7
 80189ea:	19ad      	addle	r5, r5, r6
 80189ec:	0fcf      	lsrs	r7, r1, #31
 80189ee:	3b01      	subs	r3, #1
 80189f0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 80189f4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80189f8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80189fc:	d1f0      	bne.n	80189e0 <__ieee754_sqrt+0x94>
 80189fe:	f04f 0c20 	mov.w	ip, #32
 8018a02:	469e      	mov	lr, r3
 8018a04:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8018a08:	42a2      	cmp	r2, r4
 8018a0a:	eb06 070e 	add.w	r7, r6, lr
 8018a0e:	dc02      	bgt.n	8018a16 <__ieee754_sqrt+0xca>
 8018a10:	d112      	bne.n	8018a38 <__ieee754_sqrt+0xec>
 8018a12:	428f      	cmp	r7, r1
 8018a14:	d810      	bhi.n	8018a38 <__ieee754_sqrt+0xec>
 8018a16:	2f00      	cmp	r7, #0
 8018a18:	eb07 0e06 	add.w	lr, r7, r6
 8018a1c:	da42      	bge.n	8018aa4 <__ieee754_sqrt+0x158>
 8018a1e:	f1be 0f00 	cmp.w	lr, #0
 8018a22:	db3f      	blt.n	8018aa4 <__ieee754_sqrt+0x158>
 8018a24:	f104 0801 	add.w	r8, r4, #1
 8018a28:	1b12      	subs	r2, r2, r4
 8018a2a:	428f      	cmp	r7, r1
 8018a2c:	bf88      	it	hi
 8018a2e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8018a32:	1bc9      	subs	r1, r1, r7
 8018a34:	4433      	add	r3, r6
 8018a36:	4644      	mov	r4, r8
 8018a38:	0052      	lsls	r2, r2, #1
 8018a3a:	f1bc 0c01 	subs.w	ip, ip, #1
 8018a3e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8018a42:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8018a46:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8018a4a:	d1dd      	bne.n	8018a08 <__ieee754_sqrt+0xbc>
 8018a4c:	430a      	orrs	r2, r1
 8018a4e:	d006      	beq.n	8018a5e <__ieee754_sqrt+0x112>
 8018a50:	1c5c      	adds	r4, r3, #1
 8018a52:	bf13      	iteet	ne
 8018a54:	3301      	addne	r3, #1
 8018a56:	3501      	addeq	r5, #1
 8018a58:	4663      	moveq	r3, ip
 8018a5a:	f023 0301 	bicne.w	r3, r3, #1
 8018a5e:	106a      	asrs	r2, r5, #1
 8018a60:	085b      	lsrs	r3, r3, #1
 8018a62:	07e9      	lsls	r1, r5, #31
 8018a64:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8018a68:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8018a6c:	bf48      	it	mi
 8018a6e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8018a72:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8018a76:	461c      	mov	r4, r3
 8018a78:	e780      	b.n	801897c <__ieee754_sqrt+0x30>
 8018a7a:	0aca      	lsrs	r2, r1, #11
 8018a7c:	3815      	subs	r0, #21
 8018a7e:	0549      	lsls	r1, r1, #21
 8018a80:	2a00      	cmp	r2, #0
 8018a82:	d0fa      	beq.n	8018a7a <__ieee754_sqrt+0x12e>
 8018a84:	02d6      	lsls	r6, r2, #11
 8018a86:	d50a      	bpl.n	8018a9e <__ieee754_sqrt+0x152>
 8018a88:	f1c3 0420 	rsb	r4, r3, #32
 8018a8c:	fa21 f404 	lsr.w	r4, r1, r4
 8018a90:	1e5d      	subs	r5, r3, #1
 8018a92:	4099      	lsls	r1, r3
 8018a94:	4322      	orrs	r2, r4
 8018a96:	1b43      	subs	r3, r0, r5
 8018a98:	e78b      	b.n	80189b2 <__ieee754_sqrt+0x66>
 8018a9a:	4618      	mov	r0, r3
 8018a9c:	e7f0      	b.n	8018a80 <__ieee754_sqrt+0x134>
 8018a9e:	0052      	lsls	r2, r2, #1
 8018aa0:	3301      	adds	r3, #1
 8018aa2:	e7ef      	b.n	8018a84 <__ieee754_sqrt+0x138>
 8018aa4:	46a0      	mov	r8, r4
 8018aa6:	e7bf      	b.n	8018a28 <__ieee754_sqrt+0xdc>
 8018aa8:	7ff00000 	.word	0x7ff00000
 8018aac:	00000000 	.word	0x00000000

08018ab0 <__kernel_cos>:
 8018ab0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ab4:	ec59 8b10 	vmov	r8, r9, d0
 8018ab8:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8018abc:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8018ac0:	ed2d 8b02 	vpush	{d8}
 8018ac4:	eeb0 8a41 	vmov.f32	s16, s2
 8018ac8:	eef0 8a61 	vmov.f32	s17, s3
 8018acc:	da07      	bge.n	8018ade <__kernel_cos+0x2e>
 8018ace:	ee10 0a10 	vmov	r0, s0
 8018ad2:	4649      	mov	r1, r9
 8018ad4:	f7e8 f850 	bl	8000b78 <__aeabi_d2iz>
 8018ad8:	2800      	cmp	r0, #0
 8018ada:	f000 8089 	beq.w	8018bf0 <__kernel_cos+0x140>
 8018ade:	4642      	mov	r2, r8
 8018ae0:	464b      	mov	r3, r9
 8018ae2:	4640      	mov	r0, r8
 8018ae4:	4649      	mov	r1, r9
 8018ae6:	f7e7 fd97 	bl	8000618 <__aeabi_dmul>
 8018aea:	2200      	movs	r2, #0
 8018aec:	4b4e      	ldr	r3, [pc, #312]	; (8018c28 <__kernel_cos+0x178>)
 8018aee:	4604      	mov	r4, r0
 8018af0:	460d      	mov	r5, r1
 8018af2:	f7e7 fd91 	bl	8000618 <__aeabi_dmul>
 8018af6:	a340      	add	r3, pc, #256	; (adr r3, 8018bf8 <__kernel_cos+0x148>)
 8018af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018afc:	4682      	mov	sl, r0
 8018afe:	468b      	mov	fp, r1
 8018b00:	4620      	mov	r0, r4
 8018b02:	4629      	mov	r1, r5
 8018b04:	f7e7 fd88 	bl	8000618 <__aeabi_dmul>
 8018b08:	a33d      	add	r3, pc, #244	; (adr r3, 8018c00 <__kernel_cos+0x150>)
 8018b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b0e:	f7e7 fbcd 	bl	80002ac <__adddf3>
 8018b12:	4622      	mov	r2, r4
 8018b14:	462b      	mov	r3, r5
 8018b16:	f7e7 fd7f 	bl	8000618 <__aeabi_dmul>
 8018b1a:	a33b      	add	r3, pc, #236	; (adr r3, 8018c08 <__kernel_cos+0x158>)
 8018b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b20:	f7e7 fbc2 	bl	80002a8 <__aeabi_dsub>
 8018b24:	4622      	mov	r2, r4
 8018b26:	462b      	mov	r3, r5
 8018b28:	f7e7 fd76 	bl	8000618 <__aeabi_dmul>
 8018b2c:	a338      	add	r3, pc, #224	; (adr r3, 8018c10 <__kernel_cos+0x160>)
 8018b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b32:	f7e7 fbbb 	bl	80002ac <__adddf3>
 8018b36:	4622      	mov	r2, r4
 8018b38:	462b      	mov	r3, r5
 8018b3a:	f7e7 fd6d 	bl	8000618 <__aeabi_dmul>
 8018b3e:	a336      	add	r3, pc, #216	; (adr r3, 8018c18 <__kernel_cos+0x168>)
 8018b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b44:	f7e7 fbb0 	bl	80002a8 <__aeabi_dsub>
 8018b48:	4622      	mov	r2, r4
 8018b4a:	462b      	mov	r3, r5
 8018b4c:	f7e7 fd64 	bl	8000618 <__aeabi_dmul>
 8018b50:	a333      	add	r3, pc, #204	; (adr r3, 8018c20 <__kernel_cos+0x170>)
 8018b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b56:	f7e7 fba9 	bl	80002ac <__adddf3>
 8018b5a:	4622      	mov	r2, r4
 8018b5c:	462b      	mov	r3, r5
 8018b5e:	f7e7 fd5b 	bl	8000618 <__aeabi_dmul>
 8018b62:	4622      	mov	r2, r4
 8018b64:	462b      	mov	r3, r5
 8018b66:	f7e7 fd57 	bl	8000618 <__aeabi_dmul>
 8018b6a:	ec53 2b18 	vmov	r2, r3, d8
 8018b6e:	4604      	mov	r4, r0
 8018b70:	460d      	mov	r5, r1
 8018b72:	4640      	mov	r0, r8
 8018b74:	4649      	mov	r1, r9
 8018b76:	f7e7 fd4f 	bl	8000618 <__aeabi_dmul>
 8018b7a:	460b      	mov	r3, r1
 8018b7c:	4602      	mov	r2, r0
 8018b7e:	4629      	mov	r1, r5
 8018b80:	4620      	mov	r0, r4
 8018b82:	f7e7 fb91 	bl	80002a8 <__aeabi_dsub>
 8018b86:	4b29      	ldr	r3, [pc, #164]	; (8018c2c <__kernel_cos+0x17c>)
 8018b88:	429e      	cmp	r6, r3
 8018b8a:	4680      	mov	r8, r0
 8018b8c:	4689      	mov	r9, r1
 8018b8e:	dc11      	bgt.n	8018bb4 <__kernel_cos+0x104>
 8018b90:	4602      	mov	r2, r0
 8018b92:	460b      	mov	r3, r1
 8018b94:	4650      	mov	r0, sl
 8018b96:	4659      	mov	r1, fp
 8018b98:	f7e7 fb86 	bl	80002a8 <__aeabi_dsub>
 8018b9c:	460b      	mov	r3, r1
 8018b9e:	4924      	ldr	r1, [pc, #144]	; (8018c30 <__kernel_cos+0x180>)
 8018ba0:	4602      	mov	r2, r0
 8018ba2:	2000      	movs	r0, #0
 8018ba4:	f7e7 fb80 	bl	80002a8 <__aeabi_dsub>
 8018ba8:	ecbd 8b02 	vpop	{d8}
 8018bac:	ec41 0b10 	vmov	d0, r0, r1
 8018bb0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018bb4:	4b1f      	ldr	r3, [pc, #124]	; (8018c34 <__kernel_cos+0x184>)
 8018bb6:	491e      	ldr	r1, [pc, #120]	; (8018c30 <__kernel_cos+0x180>)
 8018bb8:	429e      	cmp	r6, r3
 8018bba:	bfcc      	ite	gt
 8018bbc:	4d1e      	ldrgt	r5, [pc, #120]	; (8018c38 <__kernel_cos+0x188>)
 8018bbe:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8018bc2:	2400      	movs	r4, #0
 8018bc4:	4622      	mov	r2, r4
 8018bc6:	462b      	mov	r3, r5
 8018bc8:	2000      	movs	r0, #0
 8018bca:	f7e7 fb6d 	bl	80002a8 <__aeabi_dsub>
 8018bce:	4622      	mov	r2, r4
 8018bd0:	4606      	mov	r6, r0
 8018bd2:	460f      	mov	r7, r1
 8018bd4:	462b      	mov	r3, r5
 8018bd6:	4650      	mov	r0, sl
 8018bd8:	4659      	mov	r1, fp
 8018bda:	f7e7 fb65 	bl	80002a8 <__aeabi_dsub>
 8018bde:	4642      	mov	r2, r8
 8018be0:	464b      	mov	r3, r9
 8018be2:	f7e7 fb61 	bl	80002a8 <__aeabi_dsub>
 8018be6:	4602      	mov	r2, r0
 8018be8:	460b      	mov	r3, r1
 8018bea:	4630      	mov	r0, r6
 8018bec:	4639      	mov	r1, r7
 8018bee:	e7d9      	b.n	8018ba4 <__kernel_cos+0xf4>
 8018bf0:	2000      	movs	r0, #0
 8018bf2:	490f      	ldr	r1, [pc, #60]	; (8018c30 <__kernel_cos+0x180>)
 8018bf4:	e7d8      	b.n	8018ba8 <__kernel_cos+0xf8>
 8018bf6:	bf00      	nop
 8018bf8:	be8838d4 	.word	0xbe8838d4
 8018bfc:	bda8fae9 	.word	0xbda8fae9
 8018c00:	bdb4b1c4 	.word	0xbdb4b1c4
 8018c04:	3e21ee9e 	.word	0x3e21ee9e
 8018c08:	809c52ad 	.word	0x809c52ad
 8018c0c:	3e927e4f 	.word	0x3e927e4f
 8018c10:	19cb1590 	.word	0x19cb1590
 8018c14:	3efa01a0 	.word	0x3efa01a0
 8018c18:	16c15177 	.word	0x16c15177
 8018c1c:	3f56c16c 	.word	0x3f56c16c
 8018c20:	5555554c 	.word	0x5555554c
 8018c24:	3fa55555 	.word	0x3fa55555
 8018c28:	3fe00000 	.word	0x3fe00000
 8018c2c:	3fd33332 	.word	0x3fd33332
 8018c30:	3ff00000 	.word	0x3ff00000
 8018c34:	3fe90000 	.word	0x3fe90000
 8018c38:	3fd20000 	.word	0x3fd20000
 8018c3c:	00000000 	.word	0x00000000

08018c40 <__kernel_rem_pio2>:
 8018c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c44:	ed2d 8b02 	vpush	{d8}
 8018c48:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8018c4c:	1ed4      	subs	r4, r2, #3
 8018c4e:	9308      	str	r3, [sp, #32]
 8018c50:	9101      	str	r1, [sp, #4]
 8018c52:	4bc5      	ldr	r3, [pc, #788]	; (8018f68 <__kernel_rem_pio2+0x328>)
 8018c54:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8018c56:	9009      	str	r0, [sp, #36]	; 0x24
 8018c58:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018c5c:	9304      	str	r3, [sp, #16]
 8018c5e:	9b08      	ldr	r3, [sp, #32]
 8018c60:	3b01      	subs	r3, #1
 8018c62:	9307      	str	r3, [sp, #28]
 8018c64:	2318      	movs	r3, #24
 8018c66:	fb94 f4f3 	sdiv	r4, r4, r3
 8018c6a:	f06f 0317 	mvn.w	r3, #23
 8018c6e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8018c72:	fb04 3303 	mla	r3, r4, r3, r3
 8018c76:	eb03 0a02 	add.w	sl, r3, r2
 8018c7a:	9b04      	ldr	r3, [sp, #16]
 8018c7c:	9a07      	ldr	r2, [sp, #28]
 8018c7e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8018f58 <__kernel_rem_pio2+0x318>
 8018c82:	eb03 0802 	add.w	r8, r3, r2
 8018c86:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8018c88:	1aa7      	subs	r7, r4, r2
 8018c8a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8018c8e:	ae22      	add	r6, sp, #136	; 0x88
 8018c90:	2500      	movs	r5, #0
 8018c92:	4545      	cmp	r5, r8
 8018c94:	dd13      	ble.n	8018cbe <__kernel_rem_pio2+0x7e>
 8018c96:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8018f58 <__kernel_rem_pio2+0x318>
 8018c9a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8018c9e:	2600      	movs	r6, #0
 8018ca0:	9b04      	ldr	r3, [sp, #16]
 8018ca2:	429e      	cmp	r6, r3
 8018ca4:	dc32      	bgt.n	8018d0c <__kernel_rem_pio2+0xcc>
 8018ca6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018ca8:	9302      	str	r3, [sp, #8]
 8018caa:	9b08      	ldr	r3, [sp, #32]
 8018cac:	199d      	adds	r5, r3, r6
 8018cae:	ab22      	add	r3, sp, #136	; 0x88
 8018cb0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8018cb4:	9306      	str	r3, [sp, #24]
 8018cb6:	ec59 8b18 	vmov	r8, r9, d8
 8018cba:	2700      	movs	r7, #0
 8018cbc:	e01f      	b.n	8018cfe <__kernel_rem_pio2+0xbe>
 8018cbe:	42ef      	cmn	r7, r5
 8018cc0:	d407      	bmi.n	8018cd2 <__kernel_rem_pio2+0x92>
 8018cc2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8018cc6:	f7e7 fc3d 	bl	8000544 <__aeabi_i2d>
 8018cca:	e8e6 0102 	strd	r0, r1, [r6], #8
 8018cce:	3501      	adds	r5, #1
 8018cd0:	e7df      	b.n	8018c92 <__kernel_rem_pio2+0x52>
 8018cd2:	ec51 0b18 	vmov	r0, r1, d8
 8018cd6:	e7f8      	b.n	8018cca <__kernel_rem_pio2+0x8a>
 8018cd8:	9906      	ldr	r1, [sp, #24]
 8018cda:	9d02      	ldr	r5, [sp, #8]
 8018cdc:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8018ce0:	9106      	str	r1, [sp, #24]
 8018ce2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8018ce6:	9502      	str	r5, [sp, #8]
 8018ce8:	f7e7 fc96 	bl	8000618 <__aeabi_dmul>
 8018cec:	4602      	mov	r2, r0
 8018cee:	460b      	mov	r3, r1
 8018cf0:	4640      	mov	r0, r8
 8018cf2:	4649      	mov	r1, r9
 8018cf4:	f7e7 fada 	bl	80002ac <__adddf3>
 8018cf8:	3701      	adds	r7, #1
 8018cfa:	4680      	mov	r8, r0
 8018cfc:	4689      	mov	r9, r1
 8018cfe:	9b07      	ldr	r3, [sp, #28]
 8018d00:	429f      	cmp	r7, r3
 8018d02:	dde9      	ble.n	8018cd8 <__kernel_rem_pio2+0x98>
 8018d04:	e8eb 8902 	strd	r8, r9, [fp], #8
 8018d08:	3601      	adds	r6, #1
 8018d0a:	e7c9      	b.n	8018ca0 <__kernel_rem_pio2+0x60>
 8018d0c:	9b04      	ldr	r3, [sp, #16]
 8018d0e:	aa0e      	add	r2, sp, #56	; 0x38
 8018d10:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018d14:	930c      	str	r3, [sp, #48]	; 0x30
 8018d16:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8018d18:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8018d1c:	9c04      	ldr	r4, [sp, #16]
 8018d1e:	930b      	str	r3, [sp, #44]	; 0x2c
 8018d20:	ab9a      	add	r3, sp, #616	; 0x268
 8018d22:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8018d26:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8018d2a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8018d2e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8018d32:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8018d36:	ab9a      	add	r3, sp, #616	; 0x268
 8018d38:	445b      	add	r3, fp
 8018d3a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8018d3e:	2500      	movs	r5, #0
 8018d40:	1b63      	subs	r3, r4, r5
 8018d42:	2b00      	cmp	r3, #0
 8018d44:	dc78      	bgt.n	8018e38 <__kernel_rem_pio2+0x1f8>
 8018d46:	4650      	mov	r0, sl
 8018d48:	ec49 8b10 	vmov	d0, r8, r9
 8018d4c:	f000 fda8 	bl	80198a0 <scalbn>
 8018d50:	ec57 6b10 	vmov	r6, r7, d0
 8018d54:	2200      	movs	r2, #0
 8018d56:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8018d5a:	ee10 0a10 	vmov	r0, s0
 8018d5e:	4639      	mov	r1, r7
 8018d60:	f7e7 fc5a 	bl	8000618 <__aeabi_dmul>
 8018d64:	ec41 0b10 	vmov	d0, r0, r1
 8018d68:	f000 fd12 	bl	8019790 <floor>
 8018d6c:	2200      	movs	r2, #0
 8018d6e:	ec51 0b10 	vmov	r0, r1, d0
 8018d72:	4b7e      	ldr	r3, [pc, #504]	; (8018f6c <__kernel_rem_pio2+0x32c>)
 8018d74:	f7e7 fc50 	bl	8000618 <__aeabi_dmul>
 8018d78:	4602      	mov	r2, r0
 8018d7a:	460b      	mov	r3, r1
 8018d7c:	4630      	mov	r0, r6
 8018d7e:	4639      	mov	r1, r7
 8018d80:	f7e7 fa92 	bl	80002a8 <__aeabi_dsub>
 8018d84:	460f      	mov	r7, r1
 8018d86:	4606      	mov	r6, r0
 8018d88:	f7e7 fef6 	bl	8000b78 <__aeabi_d2iz>
 8018d8c:	9006      	str	r0, [sp, #24]
 8018d8e:	f7e7 fbd9 	bl	8000544 <__aeabi_i2d>
 8018d92:	4602      	mov	r2, r0
 8018d94:	460b      	mov	r3, r1
 8018d96:	4630      	mov	r0, r6
 8018d98:	4639      	mov	r1, r7
 8018d9a:	f7e7 fa85 	bl	80002a8 <__aeabi_dsub>
 8018d9e:	f1ba 0f00 	cmp.w	sl, #0
 8018da2:	4606      	mov	r6, r0
 8018da4:	460f      	mov	r7, r1
 8018da6:	dd6c      	ble.n	8018e82 <__kernel_rem_pio2+0x242>
 8018da8:	1e62      	subs	r2, r4, #1
 8018daa:	ab0e      	add	r3, sp, #56	; 0x38
 8018dac:	f1ca 0118 	rsb	r1, sl, #24
 8018db0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8018db4:	9d06      	ldr	r5, [sp, #24]
 8018db6:	fa40 f301 	asr.w	r3, r0, r1
 8018dba:	441d      	add	r5, r3
 8018dbc:	408b      	lsls	r3, r1
 8018dbe:	1ac0      	subs	r0, r0, r3
 8018dc0:	ab0e      	add	r3, sp, #56	; 0x38
 8018dc2:	9506      	str	r5, [sp, #24]
 8018dc4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8018dc8:	f1ca 0317 	rsb	r3, sl, #23
 8018dcc:	fa40 f303 	asr.w	r3, r0, r3
 8018dd0:	9302      	str	r3, [sp, #8]
 8018dd2:	9b02      	ldr	r3, [sp, #8]
 8018dd4:	2b00      	cmp	r3, #0
 8018dd6:	dd62      	ble.n	8018e9e <__kernel_rem_pio2+0x25e>
 8018dd8:	9b06      	ldr	r3, [sp, #24]
 8018dda:	2200      	movs	r2, #0
 8018ddc:	3301      	adds	r3, #1
 8018dde:	9306      	str	r3, [sp, #24]
 8018de0:	4615      	mov	r5, r2
 8018de2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8018de6:	4294      	cmp	r4, r2
 8018de8:	f300 8095 	bgt.w	8018f16 <__kernel_rem_pio2+0x2d6>
 8018dec:	f1ba 0f00 	cmp.w	sl, #0
 8018df0:	dd07      	ble.n	8018e02 <__kernel_rem_pio2+0x1c2>
 8018df2:	f1ba 0f01 	cmp.w	sl, #1
 8018df6:	f000 80a2 	beq.w	8018f3e <__kernel_rem_pio2+0x2fe>
 8018dfa:	f1ba 0f02 	cmp.w	sl, #2
 8018dfe:	f000 80c1 	beq.w	8018f84 <__kernel_rem_pio2+0x344>
 8018e02:	9b02      	ldr	r3, [sp, #8]
 8018e04:	2b02      	cmp	r3, #2
 8018e06:	d14a      	bne.n	8018e9e <__kernel_rem_pio2+0x25e>
 8018e08:	4632      	mov	r2, r6
 8018e0a:	463b      	mov	r3, r7
 8018e0c:	2000      	movs	r0, #0
 8018e0e:	4958      	ldr	r1, [pc, #352]	; (8018f70 <__kernel_rem_pio2+0x330>)
 8018e10:	f7e7 fa4a 	bl	80002a8 <__aeabi_dsub>
 8018e14:	4606      	mov	r6, r0
 8018e16:	460f      	mov	r7, r1
 8018e18:	2d00      	cmp	r5, #0
 8018e1a:	d040      	beq.n	8018e9e <__kernel_rem_pio2+0x25e>
 8018e1c:	4650      	mov	r0, sl
 8018e1e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8018f60 <__kernel_rem_pio2+0x320>
 8018e22:	f000 fd3d 	bl	80198a0 <scalbn>
 8018e26:	4630      	mov	r0, r6
 8018e28:	4639      	mov	r1, r7
 8018e2a:	ec53 2b10 	vmov	r2, r3, d0
 8018e2e:	f7e7 fa3b 	bl	80002a8 <__aeabi_dsub>
 8018e32:	4606      	mov	r6, r0
 8018e34:	460f      	mov	r7, r1
 8018e36:	e032      	b.n	8018e9e <__kernel_rem_pio2+0x25e>
 8018e38:	2200      	movs	r2, #0
 8018e3a:	4b4e      	ldr	r3, [pc, #312]	; (8018f74 <__kernel_rem_pio2+0x334>)
 8018e3c:	4640      	mov	r0, r8
 8018e3e:	4649      	mov	r1, r9
 8018e40:	f7e7 fbea 	bl	8000618 <__aeabi_dmul>
 8018e44:	f7e7 fe98 	bl	8000b78 <__aeabi_d2iz>
 8018e48:	f7e7 fb7c 	bl	8000544 <__aeabi_i2d>
 8018e4c:	2200      	movs	r2, #0
 8018e4e:	4b4a      	ldr	r3, [pc, #296]	; (8018f78 <__kernel_rem_pio2+0x338>)
 8018e50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018e54:	f7e7 fbe0 	bl	8000618 <__aeabi_dmul>
 8018e58:	4602      	mov	r2, r0
 8018e5a:	460b      	mov	r3, r1
 8018e5c:	4640      	mov	r0, r8
 8018e5e:	4649      	mov	r1, r9
 8018e60:	f7e7 fa22 	bl	80002a8 <__aeabi_dsub>
 8018e64:	f7e7 fe88 	bl	8000b78 <__aeabi_d2iz>
 8018e68:	ab0e      	add	r3, sp, #56	; 0x38
 8018e6a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8018e6e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8018e72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018e76:	f7e7 fa19 	bl	80002ac <__adddf3>
 8018e7a:	3501      	adds	r5, #1
 8018e7c:	4680      	mov	r8, r0
 8018e7e:	4689      	mov	r9, r1
 8018e80:	e75e      	b.n	8018d40 <__kernel_rem_pio2+0x100>
 8018e82:	d105      	bne.n	8018e90 <__kernel_rem_pio2+0x250>
 8018e84:	1e63      	subs	r3, r4, #1
 8018e86:	aa0e      	add	r2, sp, #56	; 0x38
 8018e88:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8018e8c:	15c3      	asrs	r3, r0, #23
 8018e8e:	e79f      	b.n	8018dd0 <__kernel_rem_pio2+0x190>
 8018e90:	2200      	movs	r2, #0
 8018e92:	4b3a      	ldr	r3, [pc, #232]	; (8018f7c <__kernel_rem_pio2+0x33c>)
 8018e94:	f7e7 fe46 	bl	8000b24 <__aeabi_dcmpge>
 8018e98:	2800      	cmp	r0, #0
 8018e9a:	d139      	bne.n	8018f10 <__kernel_rem_pio2+0x2d0>
 8018e9c:	9002      	str	r0, [sp, #8]
 8018e9e:	2200      	movs	r2, #0
 8018ea0:	2300      	movs	r3, #0
 8018ea2:	4630      	mov	r0, r6
 8018ea4:	4639      	mov	r1, r7
 8018ea6:	f7e7 fe1f 	bl	8000ae8 <__aeabi_dcmpeq>
 8018eaa:	2800      	cmp	r0, #0
 8018eac:	f000 80c7 	beq.w	801903e <__kernel_rem_pio2+0x3fe>
 8018eb0:	1e65      	subs	r5, r4, #1
 8018eb2:	462b      	mov	r3, r5
 8018eb4:	2200      	movs	r2, #0
 8018eb6:	9904      	ldr	r1, [sp, #16]
 8018eb8:	428b      	cmp	r3, r1
 8018eba:	da6a      	bge.n	8018f92 <__kernel_rem_pio2+0x352>
 8018ebc:	2a00      	cmp	r2, #0
 8018ebe:	f000 8088 	beq.w	8018fd2 <__kernel_rem_pio2+0x392>
 8018ec2:	ab0e      	add	r3, sp, #56	; 0x38
 8018ec4:	f1aa 0a18 	sub.w	sl, sl, #24
 8018ec8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8018ecc:	2b00      	cmp	r3, #0
 8018ece:	f000 80b4 	beq.w	801903a <__kernel_rem_pio2+0x3fa>
 8018ed2:	4650      	mov	r0, sl
 8018ed4:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8018f60 <__kernel_rem_pio2+0x320>
 8018ed8:	f000 fce2 	bl	80198a0 <scalbn>
 8018edc:	00ec      	lsls	r4, r5, #3
 8018ede:	ab72      	add	r3, sp, #456	; 0x1c8
 8018ee0:	191e      	adds	r6, r3, r4
 8018ee2:	ec59 8b10 	vmov	r8, r9, d0
 8018ee6:	f106 0a08 	add.w	sl, r6, #8
 8018eea:	462f      	mov	r7, r5
 8018eec:	2f00      	cmp	r7, #0
 8018eee:	f280 80df 	bge.w	80190b0 <__kernel_rem_pio2+0x470>
 8018ef2:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8018f58 <__kernel_rem_pio2+0x318>
 8018ef6:	f04f 0a00 	mov.w	sl, #0
 8018efa:	eba5 030a 	sub.w	r3, r5, sl
 8018efe:	2b00      	cmp	r3, #0
 8018f00:	f2c0 810a 	blt.w	8019118 <__kernel_rem_pio2+0x4d8>
 8018f04:	f8df b078 	ldr.w	fp, [pc, #120]	; 8018f80 <__kernel_rem_pio2+0x340>
 8018f08:	ec59 8b18 	vmov	r8, r9, d8
 8018f0c:	2700      	movs	r7, #0
 8018f0e:	e0f5      	b.n	80190fc <__kernel_rem_pio2+0x4bc>
 8018f10:	2302      	movs	r3, #2
 8018f12:	9302      	str	r3, [sp, #8]
 8018f14:	e760      	b.n	8018dd8 <__kernel_rem_pio2+0x198>
 8018f16:	ab0e      	add	r3, sp, #56	; 0x38
 8018f18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018f1c:	b94d      	cbnz	r5, 8018f32 <__kernel_rem_pio2+0x2f2>
 8018f1e:	b12b      	cbz	r3, 8018f2c <__kernel_rem_pio2+0x2ec>
 8018f20:	a80e      	add	r0, sp, #56	; 0x38
 8018f22:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8018f26:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8018f2a:	2301      	movs	r3, #1
 8018f2c:	3201      	adds	r2, #1
 8018f2e:	461d      	mov	r5, r3
 8018f30:	e759      	b.n	8018de6 <__kernel_rem_pio2+0x1a6>
 8018f32:	a80e      	add	r0, sp, #56	; 0x38
 8018f34:	1acb      	subs	r3, r1, r3
 8018f36:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8018f3a:	462b      	mov	r3, r5
 8018f3c:	e7f6      	b.n	8018f2c <__kernel_rem_pio2+0x2ec>
 8018f3e:	1e62      	subs	r2, r4, #1
 8018f40:	ab0e      	add	r3, sp, #56	; 0x38
 8018f42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018f46:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8018f4a:	a90e      	add	r1, sp, #56	; 0x38
 8018f4c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8018f50:	e757      	b.n	8018e02 <__kernel_rem_pio2+0x1c2>
 8018f52:	bf00      	nop
 8018f54:	f3af 8000 	nop.w
	...
 8018f64:	3ff00000 	.word	0x3ff00000
 8018f68:	0801a378 	.word	0x0801a378
 8018f6c:	40200000 	.word	0x40200000
 8018f70:	3ff00000 	.word	0x3ff00000
 8018f74:	3e700000 	.word	0x3e700000
 8018f78:	41700000 	.word	0x41700000
 8018f7c:	3fe00000 	.word	0x3fe00000
 8018f80:	0801a338 	.word	0x0801a338
 8018f84:	1e62      	subs	r2, r4, #1
 8018f86:	ab0e      	add	r3, sp, #56	; 0x38
 8018f88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018f8c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8018f90:	e7db      	b.n	8018f4a <__kernel_rem_pio2+0x30a>
 8018f92:	a90e      	add	r1, sp, #56	; 0x38
 8018f94:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8018f98:	3b01      	subs	r3, #1
 8018f9a:	430a      	orrs	r2, r1
 8018f9c:	e78b      	b.n	8018eb6 <__kernel_rem_pio2+0x276>
 8018f9e:	3301      	adds	r3, #1
 8018fa0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8018fa4:	2900      	cmp	r1, #0
 8018fa6:	d0fa      	beq.n	8018f9e <__kernel_rem_pio2+0x35e>
 8018fa8:	9a08      	ldr	r2, [sp, #32]
 8018faa:	4422      	add	r2, r4
 8018fac:	00d2      	lsls	r2, r2, #3
 8018fae:	a922      	add	r1, sp, #136	; 0x88
 8018fb0:	18e3      	adds	r3, r4, r3
 8018fb2:	9206      	str	r2, [sp, #24]
 8018fb4:	440a      	add	r2, r1
 8018fb6:	9302      	str	r3, [sp, #8]
 8018fb8:	f10b 0108 	add.w	r1, fp, #8
 8018fbc:	f102 0308 	add.w	r3, r2, #8
 8018fc0:	1c66      	adds	r6, r4, #1
 8018fc2:	910a      	str	r1, [sp, #40]	; 0x28
 8018fc4:	2500      	movs	r5, #0
 8018fc6:	930d      	str	r3, [sp, #52]	; 0x34
 8018fc8:	9b02      	ldr	r3, [sp, #8]
 8018fca:	42b3      	cmp	r3, r6
 8018fcc:	da04      	bge.n	8018fd8 <__kernel_rem_pio2+0x398>
 8018fce:	461c      	mov	r4, r3
 8018fd0:	e6a6      	b.n	8018d20 <__kernel_rem_pio2+0xe0>
 8018fd2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018fd4:	2301      	movs	r3, #1
 8018fd6:	e7e3      	b.n	8018fa0 <__kernel_rem_pio2+0x360>
 8018fd8:	9b06      	ldr	r3, [sp, #24]
 8018fda:	18ef      	adds	r7, r5, r3
 8018fdc:	ab22      	add	r3, sp, #136	; 0x88
 8018fde:	441f      	add	r7, r3
 8018fe0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018fe2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8018fe6:	f7e7 faad 	bl	8000544 <__aeabi_i2d>
 8018fea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018fec:	461c      	mov	r4, r3
 8018fee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018ff0:	e9c7 0100 	strd	r0, r1, [r7]
 8018ff4:	eb03 0b05 	add.w	fp, r3, r5
 8018ff8:	2700      	movs	r7, #0
 8018ffa:	f04f 0800 	mov.w	r8, #0
 8018ffe:	f04f 0900 	mov.w	r9, #0
 8019002:	9b07      	ldr	r3, [sp, #28]
 8019004:	429f      	cmp	r7, r3
 8019006:	dd08      	ble.n	801901a <__kernel_rem_pio2+0x3da>
 8019008:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801900a:	aa72      	add	r2, sp, #456	; 0x1c8
 801900c:	18eb      	adds	r3, r5, r3
 801900e:	4413      	add	r3, r2
 8019010:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8019014:	3601      	adds	r6, #1
 8019016:	3508      	adds	r5, #8
 8019018:	e7d6      	b.n	8018fc8 <__kernel_rem_pio2+0x388>
 801901a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801901e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8019022:	f7e7 faf9 	bl	8000618 <__aeabi_dmul>
 8019026:	4602      	mov	r2, r0
 8019028:	460b      	mov	r3, r1
 801902a:	4640      	mov	r0, r8
 801902c:	4649      	mov	r1, r9
 801902e:	f7e7 f93d 	bl	80002ac <__adddf3>
 8019032:	3701      	adds	r7, #1
 8019034:	4680      	mov	r8, r0
 8019036:	4689      	mov	r9, r1
 8019038:	e7e3      	b.n	8019002 <__kernel_rem_pio2+0x3c2>
 801903a:	3d01      	subs	r5, #1
 801903c:	e741      	b.n	8018ec2 <__kernel_rem_pio2+0x282>
 801903e:	f1ca 0000 	rsb	r0, sl, #0
 8019042:	ec47 6b10 	vmov	d0, r6, r7
 8019046:	f000 fc2b 	bl	80198a0 <scalbn>
 801904a:	ec57 6b10 	vmov	r6, r7, d0
 801904e:	2200      	movs	r2, #0
 8019050:	4b99      	ldr	r3, [pc, #612]	; (80192b8 <__kernel_rem_pio2+0x678>)
 8019052:	ee10 0a10 	vmov	r0, s0
 8019056:	4639      	mov	r1, r7
 8019058:	f7e7 fd64 	bl	8000b24 <__aeabi_dcmpge>
 801905c:	b1f8      	cbz	r0, 801909e <__kernel_rem_pio2+0x45e>
 801905e:	2200      	movs	r2, #0
 8019060:	4b96      	ldr	r3, [pc, #600]	; (80192bc <__kernel_rem_pio2+0x67c>)
 8019062:	4630      	mov	r0, r6
 8019064:	4639      	mov	r1, r7
 8019066:	f7e7 fad7 	bl	8000618 <__aeabi_dmul>
 801906a:	f7e7 fd85 	bl	8000b78 <__aeabi_d2iz>
 801906e:	4680      	mov	r8, r0
 8019070:	f7e7 fa68 	bl	8000544 <__aeabi_i2d>
 8019074:	2200      	movs	r2, #0
 8019076:	4b90      	ldr	r3, [pc, #576]	; (80192b8 <__kernel_rem_pio2+0x678>)
 8019078:	f7e7 face 	bl	8000618 <__aeabi_dmul>
 801907c:	460b      	mov	r3, r1
 801907e:	4602      	mov	r2, r0
 8019080:	4639      	mov	r1, r7
 8019082:	4630      	mov	r0, r6
 8019084:	f7e7 f910 	bl	80002a8 <__aeabi_dsub>
 8019088:	f7e7 fd76 	bl	8000b78 <__aeabi_d2iz>
 801908c:	1c65      	adds	r5, r4, #1
 801908e:	ab0e      	add	r3, sp, #56	; 0x38
 8019090:	f10a 0a18 	add.w	sl, sl, #24
 8019094:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8019098:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801909c:	e719      	b.n	8018ed2 <__kernel_rem_pio2+0x292>
 801909e:	4630      	mov	r0, r6
 80190a0:	4639      	mov	r1, r7
 80190a2:	f7e7 fd69 	bl	8000b78 <__aeabi_d2iz>
 80190a6:	ab0e      	add	r3, sp, #56	; 0x38
 80190a8:	4625      	mov	r5, r4
 80190aa:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80190ae:	e710      	b.n	8018ed2 <__kernel_rem_pio2+0x292>
 80190b0:	ab0e      	add	r3, sp, #56	; 0x38
 80190b2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80190b6:	f7e7 fa45 	bl	8000544 <__aeabi_i2d>
 80190ba:	4642      	mov	r2, r8
 80190bc:	464b      	mov	r3, r9
 80190be:	f7e7 faab 	bl	8000618 <__aeabi_dmul>
 80190c2:	2200      	movs	r2, #0
 80190c4:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80190c8:	4b7c      	ldr	r3, [pc, #496]	; (80192bc <__kernel_rem_pio2+0x67c>)
 80190ca:	4640      	mov	r0, r8
 80190cc:	4649      	mov	r1, r9
 80190ce:	f7e7 faa3 	bl	8000618 <__aeabi_dmul>
 80190d2:	3f01      	subs	r7, #1
 80190d4:	4680      	mov	r8, r0
 80190d6:	4689      	mov	r9, r1
 80190d8:	e708      	b.n	8018eec <__kernel_rem_pio2+0x2ac>
 80190da:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 80190de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80190e2:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 80190e6:	f7e7 fa97 	bl	8000618 <__aeabi_dmul>
 80190ea:	4602      	mov	r2, r0
 80190ec:	460b      	mov	r3, r1
 80190ee:	4640      	mov	r0, r8
 80190f0:	4649      	mov	r1, r9
 80190f2:	f7e7 f8db 	bl	80002ac <__adddf3>
 80190f6:	3701      	adds	r7, #1
 80190f8:	4680      	mov	r8, r0
 80190fa:	4689      	mov	r9, r1
 80190fc:	9b04      	ldr	r3, [sp, #16]
 80190fe:	429f      	cmp	r7, r3
 8019100:	dc01      	bgt.n	8019106 <__kernel_rem_pio2+0x4c6>
 8019102:	45ba      	cmp	sl, r7
 8019104:	dae9      	bge.n	80190da <__kernel_rem_pio2+0x49a>
 8019106:	ab4a      	add	r3, sp, #296	; 0x128
 8019108:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801910c:	e9c3 8900 	strd	r8, r9, [r3]
 8019110:	f10a 0a01 	add.w	sl, sl, #1
 8019114:	3e08      	subs	r6, #8
 8019116:	e6f0      	b.n	8018efa <__kernel_rem_pio2+0x2ba>
 8019118:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801911a:	2b03      	cmp	r3, #3
 801911c:	d85b      	bhi.n	80191d6 <__kernel_rem_pio2+0x596>
 801911e:	e8df f003 	tbb	[pc, r3]
 8019122:	264a      	.short	0x264a
 8019124:	0226      	.short	0x0226
 8019126:	ab9a      	add	r3, sp, #616	; 0x268
 8019128:	441c      	add	r4, r3
 801912a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801912e:	46a2      	mov	sl, r4
 8019130:	46ab      	mov	fp, r5
 8019132:	f1bb 0f00 	cmp.w	fp, #0
 8019136:	dc6c      	bgt.n	8019212 <__kernel_rem_pio2+0x5d2>
 8019138:	46a2      	mov	sl, r4
 801913a:	46ab      	mov	fp, r5
 801913c:	f1bb 0f01 	cmp.w	fp, #1
 8019140:	f300 8086 	bgt.w	8019250 <__kernel_rem_pio2+0x610>
 8019144:	2000      	movs	r0, #0
 8019146:	2100      	movs	r1, #0
 8019148:	2d01      	cmp	r5, #1
 801914a:	f300 80a0 	bgt.w	801928e <__kernel_rem_pio2+0x64e>
 801914e:	9b02      	ldr	r3, [sp, #8]
 8019150:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8019154:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8019158:	2b00      	cmp	r3, #0
 801915a:	f040 809e 	bne.w	801929a <__kernel_rem_pio2+0x65a>
 801915e:	9b01      	ldr	r3, [sp, #4]
 8019160:	e9c3 7800 	strd	r7, r8, [r3]
 8019164:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8019168:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801916c:	e033      	b.n	80191d6 <__kernel_rem_pio2+0x596>
 801916e:	3408      	adds	r4, #8
 8019170:	ab4a      	add	r3, sp, #296	; 0x128
 8019172:	441c      	add	r4, r3
 8019174:	462e      	mov	r6, r5
 8019176:	2000      	movs	r0, #0
 8019178:	2100      	movs	r1, #0
 801917a:	2e00      	cmp	r6, #0
 801917c:	da3a      	bge.n	80191f4 <__kernel_rem_pio2+0x5b4>
 801917e:	9b02      	ldr	r3, [sp, #8]
 8019180:	2b00      	cmp	r3, #0
 8019182:	d03d      	beq.n	8019200 <__kernel_rem_pio2+0x5c0>
 8019184:	4602      	mov	r2, r0
 8019186:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801918a:	9c01      	ldr	r4, [sp, #4]
 801918c:	e9c4 2300 	strd	r2, r3, [r4]
 8019190:	4602      	mov	r2, r0
 8019192:	460b      	mov	r3, r1
 8019194:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8019198:	f7e7 f886 	bl	80002a8 <__aeabi_dsub>
 801919c:	ae4c      	add	r6, sp, #304	; 0x130
 801919e:	2401      	movs	r4, #1
 80191a0:	42a5      	cmp	r5, r4
 80191a2:	da30      	bge.n	8019206 <__kernel_rem_pio2+0x5c6>
 80191a4:	9b02      	ldr	r3, [sp, #8]
 80191a6:	b113      	cbz	r3, 80191ae <__kernel_rem_pio2+0x56e>
 80191a8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80191ac:	4619      	mov	r1, r3
 80191ae:	9b01      	ldr	r3, [sp, #4]
 80191b0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80191b4:	e00f      	b.n	80191d6 <__kernel_rem_pio2+0x596>
 80191b6:	ab9a      	add	r3, sp, #616	; 0x268
 80191b8:	441c      	add	r4, r3
 80191ba:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80191be:	2000      	movs	r0, #0
 80191c0:	2100      	movs	r1, #0
 80191c2:	2d00      	cmp	r5, #0
 80191c4:	da10      	bge.n	80191e8 <__kernel_rem_pio2+0x5a8>
 80191c6:	9b02      	ldr	r3, [sp, #8]
 80191c8:	b113      	cbz	r3, 80191d0 <__kernel_rem_pio2+0x590>
 80191ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80191ce:	4619      	mov	r1, r3
 80191d0:	9b01      	ldr	r3, [sp, #4]
 80191d2:	e9c3 0100 	strd	r0, r1, [r3]
 80191d6:	9b06      	ldr	r3, [sp, #24]
 80191d8:	f003 0007 	and.w	r0, r3, #7
 80191dc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80191e0:	ecbd 8b02 	vpop	{d8}
 80191e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80191e8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80191ec:	f7e7 f85e 	bl	80002ac <__adddf3>
 80191f0:	3d01      	subs	r5, #1
 80191f2:	e7e6      	b.n	80191c2 <__kernel_rem_pio2+0x582>
 80191f4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80191f8:	f7e7 f858 	bl	80002ac <__adddf3>
 80191fc:	3e01      	subs	r6, #1
 80191fe:	e7bc      	b.n	801917a <__kernel_rem_pio2+0x53a>
 8019200:	4602      	mov	r2, r0
 8019202:	460b      	mov	r3, r1
 8019204:	e7c1      	b.n	801918a <__kernel_rem_pio2+0x54a>
 8019206:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801920a:	f7e7 f84f 	bl	80002ac <__adddf3>
 801920e:	3401      	adds	r4, #1
 8019210:	e7c6      	b.n	80191a0 <__kernel_rem_pio2+0x560>
 8019212:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8019216:	ed3a 7b02 	vldmdb	sl!, {d7}
 801921a:	4640      	mov	r0, r8
 801921c:	ec53 2b17 	vmov	r2, r3, d7
 8019220:	4649      	mov	r1, r9
 8019222:	ed8d 7b04 	vstr	d7, [sp, #16]
 8019226:	f7e7 f841 	bl	80002ac <__adddf3>
 801922a:	4602      	mov	r2, r0
 801922c:	460b      	mov	r3, r1
 801922e:	4606      	mov	r6, r0
 8019230:	460f      	mov	r7, r1
 8019232:	4640      	mov	r0, r8
 8019234:	4649      	mov	r1, r9
 8019236:	f7e7 f837 	bl	80002a8 <__aeabi_dsub>
 801923a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801923e:	f7e7 f835 	bl	80002ac <__adddf3>
 8019242:	f10b 3bff 	add.w	fp, fp, #4294967295
 8019246:	e9ca 0100 	strd	r0, r1, [sl]
 801924a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 801924e:	e770      	b.n	8019132 <__kernel_rem_pio2+0x4f2>
 8019250:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8019254:	ed3a 7b02 	vldmdb	sl!, {d7}
 8019258:	4630      	mov	r0, r6
 801925a:	ec53 2b17 	vmov	r2, r3, d7
 801925e:	4639      	mov	r1, r7
 8019260:	ed8d 7b04 	vstr	d7, [sp, #16]
 8019264:	f7e7 f822 	bl	80002ac <__adddf3>
 8019268:	4602      	mov	r2, r0
 801926a:	460b      	mov	r3, r1
 801926c:	4680      	mov	r8, r0
 801926e:	4689      	mov	r9, r1
 8019270:	4630      	mov	r0, r6
 8019272:	4639      	mov	r1, r7
 8019274:	f7e7 f818 	bl	80002a8 <__aeabi_dsub>
 8019278:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801927c:	f7e7 f816 	bl	80002ac <__adddf3>
 8019280:	f10b 3bff 	add.w	fp, fp, #4294967295
 8019284:	e9ca 0100 	strd	r0, r1, [sl]
 8019288:	e94a 8902 	strd	r8, r9, [sl, #-8]
 801928c:	e756      	b.n	801913c <__kernel_rem_pio2+0x4fc>
 801928e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8019292:	f7e7 f80b 	bl	80002ac <__adddf3>
 8019296:	3d01      	subs	r5, #1
 8019298:	e756      	b.n	8019148 <__kernel_rem_pio2+0x508>
 801929a:	9b01      	ldr	r3, [sp, #4]
 801929c:	9a01      	ldr	r2, [sp, #4]
 801929e:	601f      	str	r7, [r3, #0]
 80192a0:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80192a4:	605c      	str	r4, [r3, #4]
 80192a6:	609d      	str	r5, [r3, #8]
 80192a8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80192ac:	60d3      	str	r3, [r2, #12]
 80192ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80192b2:	6110      	str	r0, [r2, #16]
 80192b4:	6153      	str	r3, [r2, #20]
 80192b6:	e78e      	b.n	80191d6 <__kernel_rem_pio2+0x596>
 80192b8:	41700000 	.word	0x41700000
 80192bc:	3e700000 	.word	0x3e700000

080192c0 <__kernel_sin>:
 80192c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80192c4:	ec55 4b10 	vmov	r4, r5, d0
 80192c8:	b085      	sub	sp, #20
 80192ca:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80192ce:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80192d2:	ed8d 1b00 	vstr	d1, [sp]
 80192d6:	9002      	str	r0, [sp, #8]
 80192d8:	da06      	bge.n	80192e8 <__kernel_sin+0x28>
 80192da:	ee10 0a10 	vmov	r0, s0
 80192de:	4629      	mov	r1, r5
 80192e0:	f7e7 fc4a 	bl	8000b78 <__aeabi_d2iz>
 80192e4:	2800      	cmp	r0, #0
 80192e6:	d051      	beq.n	801938c <__kernel_sin+0xcc>
 80192e8:	4622      	mov	r2, r4
 80192ea:	462b      	mov	r3, r5
 80192ec:	4620      	mov	r0, r4
 80192ee:	4629      	mov	r1, r5
 80192f0:	f7e7 f992 	bl	8000618 <__aeabi_dmul>
 80192f4:	4682      	mov	sl, r0
 80192f6:	468b      	mov	fp, r1
 80192f8:	4602      	mov	r2, r0
 80192fa:	460b      	mov	r3, r1
 80192fc:	4620      	mov	r0, r4
 80192fe:	4629      	mov	r1, r5
 8019300:	f7e7 f98a 	bl	8000618 <__aeabi_dmul>
 8019304:	a341      	add	r3, pc, #260	; (adr r3, 801940c <__kernel_sin+0x14c>)
 8019306:	e9d3 2300 	ldrd	r2, r3, [r3]
 801930a:	4680      	mov	r8, r0
 801930c:	4689      	mov	r9, r1
 801930e:	4650      	mov	r0, sl
 8019310:	4659      	mov	r1, fp
 8019312:	f7e7 f981 	bl	8000618 <__aeabi_dmul>
 8019316:	a33f      	add	r3, pc, #252	; (adr r3, 8019414 <__kernel_sin+0x154>)
 8019318:	e9d3 2300 	ldrd	r2, r3, [r3]
 801931c:	f7e6 ffc4 	bl	80002a8 <__aeabi_dsub>
 8019320:	4652      	mov	r2, sl
 8019322:	465b      	mov	r3, fp
 8019324:	f7e7 f978 	bl	8000618 <__aeabi_dmul>
 8019328:	a33c      	add	r3, pc, #240	; (adr r3, 801941c <__kernel_sin+0x15c>)
 801932a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801932e:	f7e6 ffbd 	bl	80002ac <__adddf3>
 8019332:	4652      	mov	r2, sl
 8019334:	465b      	mov	r3, fp
 8019336:	f7e7 f96f 	bl	8000618 <__aeabi_dmul>
 801933a:	a33a      	add	r3, pc, #232	; (adr r3, 8019424 <__kernel_sin+0x164>)
 801933c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019340:	f7e6 ffb2 	bl	80002a8 <__aeabi_dsub>
 8019344:	4652      	mov	r2, sl
 8019346:	465b      	mov	r3, fp
 8019348:	f7e7 f966 	bl	8000618 <__aeabi_dmul>
 801934c:	a337      	add	r3, pc, #220	; (adr r3, 801942c <__kernel_sin+0x16c>)
 801934e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019352:	f7e6 ffab 	bl	80002ac <__adddf3>
 8019356:	9b02      	ldr	r3, [sp, #8]
 8019358:	4606      	mov	r6, r0
 801935a:	460f      	mov	r7, r1
 801935c:	b9db      	cbnz	r3, 8019396 <__kernel_sin+0xd6>
 801935e:	4602      	mov	r2, r0
 8019360:	460b      	mov	r3, r1
 8019362:	4650      	mov	r0, sl
 8019364:	4659      	mov	r1, fp
 8019366:	f7e7 f957 	bl	8000618 <__aeabi_dmul>
 801936a:	a325      	add	r3, pc, #148	; (adr r3, 8019400 <__kernel_sin+0x140>)
 801936c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019370:	f7e6 ff9a 	bl	80002a8 <__aeabi_dsub>
 8019374:	4642      	mov	r2, r8
 8019376:	464b      	mov	r3, r9
 8019378:	f7e7 f94e 	bl	8000618 <__aeabi_dmul>
 801937c:	4602      	mov	r2, r0
 801937e:	460b      	mov	r3, r1
 8019380:	4620      	mov	r0, r4
 8019382:	4629      	mov	r1, r5
 8019384:	f7e6 ff92 	bl	80002ac <__adddf3>
 8019388:	4604      	mov	r4, r0
 801938a:	460d      	mov	r5, r1
 801938c:	ec45 4b10 	vmov	d0, r4, r5
 8019390:	b005      	add	sp, #20
 8019392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019396:	2200      	movs	r2, #0
 8019398:	4b1b      	ldr	r3, [pc, #108]	; (8019408 <__kernel_sin+0x148>)
 801939a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801939e:	f7e7 f93b 	bl	8000618 <__aeabi_dmul>
 80193a2:	4632      	mov	r2, r6
 80193a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80193a8:	463b      	mov	r3, r7
 80193aa:	4640      	mov	r0, r8
 80193ac:	4649      	mov	r1, r9
 80193ae:	f7e7 f933 	bl	8000618 <__aeabi_dmul>
 80193b2:	4602      	mov	r2, r0
 80193b4:	460b      	mov	r3, r1
 80193b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80193ba:	f7e6 ff75 	bl	80002a8 <__aeabi_dsub>
 80193be:	4652      	mov	r2, sl
 80193c0:	465b      	mov	r3, fp
 80193c2:	f7e7 f929 	bl	8000618 <__aeabi_dmul>
 80193c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80193ca:	f7e6 ff6d 	bl	80002a8 <__aeabi_dsub>
 80193ce:	a30c      	add	r3, pc, #48	; (adr r3, 8019400 <__kernel_sin+0x140>)
 80193d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80193d4:	4606      	mov	r6, r0
 80193d6:	460f      	mov	r7, r1
 80193d8:	4640      	mov	r0, r8
 80193da:	4649      	mov	r1, r9
 80193dc:	f7e7 f91c 	bl	8000618 <__aeabi_dmul>
 80193e0:	4602      	mov	r2, r0
 80193e2:	460b      	mov	r3, r1
 80193e4:	4630      	mov	r0, r6
 80193e6:	4639      	mov	r1, r7
 80193e8:	f7e6 ff60 	bl	80002ac <__adddf3>
 80193ec:	4602      	mov	r2, r0
 80193ee:	460b      	mov	r3, r1
 80193f0:	4620      	mov	r0, r4
 80193f2:	4629      	mov	r1, r5
 80193f4:	f7e6 ff58 	bl	80002a8 <__aeabi_dsub>
 80193f8:	e7c6      	b.n	8019388 <__kernel_sin+0xc8>
 80193fa:	bf00      	nop
 80193fc:	f3af 8000 	nop.w
 8019400:	55555549 	.word	0x55555549
 8019404:	3fc55555 	.word	0x3fc55555
 8019408:	3fe00000 	.word	0x3fe00000
 801940c:	5acfd57c 	.word	0x5acfd57c
 8019410:	3de5d93a 	.word	0x3de5d93a
 8019414:	8a2b9ceb 	.word	0x8a2b9ceb
 8019418:	3e5ae5e6 	.word	0x3e5ae5e6
 801941c:	57b1fe7d 	.word	0x57b1fe7d
 8019420:	3ec71de3 	.word	0x3ec71de3
 8019424:	19c161d5 	.word	0x19c161d5
 8019428:	3f2a01a0 	.word	0x3f2a01a0
 801942c:	1110f8a6 	.word	0x1110f8a6
 8019430:	3f811111 	.word	0x3f811111
 8019434:	00000000 	.word	0x00000000

08019438 <atan>:
 8019438:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801943c:	ec55 4b10 	vmov	r4, r5, d0
 8019440:	4bc3      	ldr	r3, [pc, #780]	; (8019750 <atan+0x318>)
 8019442:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8019446:	429e      	cmp	r6, r3
 8019448:	46ab      	mov	fp, r5
 801944a:	dd18      	ble.n	801947e <atan+0x46>
 801944c:	4bc1      	ldr	r3, [pc, #772]	; (8019754 <atan+0x31c>)
 801944e:	429e      	cmp	r6, r3
 8019450:	dc01      	bgt.n	8019456 <atan+0x1e>
 8019452:	d109      	bne.n	8019468 <atan+0x30>
 8019454:	b144      	cbz	r4, 8019468 <atan+0x30>
 8019456:	4622      	mov	r2, r4
 8019458:	462b      	mov	r3, r5
 801945a:	4620      	mov	r0, r4
 801945c:	4629      	mov	r1, r5
 801945e:	f7e6 ff25 	bl	80002ac <__adddf3>
 8019462:	4604      	mov	r4, r0
 8019464:	460d      	mov	r5, r1
 8019466:	e006      	b.n	8019476 <atan+0x3e>
 8019468:	f1bb 0f00 	cmp.w	fp, #0
 801946c:	f340 8131 	ble.w	80196d2 <atan+0x29a>
 8019470:	a59b      	add	r5, pc, #620	; (adr r5, 80196e0 <atan+0x2a8>)
 8019472:	e9d5 4500 	ldrd	r4, r5, [r5]
 8019476:	ec45 4b10 	vmov	d0, r4, r5
 801947a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801947e:	4bb6      	ldr	r3, [pc, #728]	; (8019758 <atan+0x320>)
 8019480:	429e      	cmp	r6, r3
 8019482:	dc14      	bgt.n	80194ae <atan+0x76>
 8019484:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8019488:	429e      	cmp	r6, r3
 801948a:	dc0d      	bgt.n	80194a8 <atan+0x70>
 801948c:	a396      	add	r3, pc, #600	; (adr r3, 80196e8 <atan+0x2b0>)
 801948e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019492:	ee10 0a10 	vmov	r0, s0
 8019496:	4629      	mov	r1, r5
 8019498:	f7e6 ff08 	bl	80002ac <__adddf3>
 801949c:	2200      	movs	r2, #0
 801949e:	4baf      	ldr	r3, [pc, #700]	; (801975c <atan+0x324>)
 80194a0:	f7e7 fb4a 	bl	8000b38 <__aeabi_dcmpgt>
 80194a4:	2800      	cmp	r0, #0
 80194a6:	d1e6      	bne.n	8019476 <atan+0x3e>
 80194a8:	f04f 3aff 	mov.w	sl, #4294967295
 80194ac:	e02b      	b.n	8019506 <atan+0xce>
 80194ae:	f000 f963 	bl	8019778 <fabs>
 80194b2:	4bab      	ldr	r3, [pc, #684]	; (8019760 <atan+0x328>)
 80194b4:	429e      	cmp	r6, r3
 80194b6:	ec55 4b10 	vmov	r4, r5, d0
 80194ba:	f300 80bf 	bgt.w	801963c <atan+0x204>
 80194be:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80194c2:	429e      	cmp	r6, r3
 80194c4:	f300 80a0 	bgt.w	8019608 <atan+0x1d0>
 80194c8:	ee10 2a10 	vmov	r2, s0
 80194cc:	ee10 0a10 	vmov	r0, s0
 80194d0:	462b      	mov	r3, r5
 80194d2:	4629      	mov	r1, r5
 80194d4:	f7e6 feea 	bl	80002ac <__adddf3>
 80194d8:	2200      	movs	r2, #0
 80194da:	4ba0      	ldr	r3, [pc, #640]	; (801975c <atan+0x324>)
 80194dc:	f7e6 fee4 	bl	80002a8 <__aeabi_dsub>
 80194e0:	2200      	movs	r2, #0
 80194e2:	4606      	mov	r6, r0
 80194e4:	460f      	mov	r7, r1
 80194e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80194ea:	4620      	mov	r0, r4
 80194ec:	4629      	mov	r1, r5
 80194ee:	f7e6 fedd 	bl	80002ac <__adddf3>
 80194f2:	4602      	mov	r2, r0
 80194f4:	460b      	mov	r3, r1
 80194f6:	4630      	mov	r0, r6
 80194f8:	4639      	mov	r1, r7
 80194fa:	f7e7 f9b7 	bl	800086c <__aeabi_ddiv>
 80194fe:	f04f 0a00 	mov.w	sl, #0
 8019502:	4604      	mov	r4, r0
 8019504:	460d      	mov	r5, r1
 8019506:	4622      	mov	r2, r4
 8019508:	462b      	mov	r3, r5
 801950a:	4620      	mov	r0, r4
 801950c:	4629      	mov	r1, r5
 801950e:	f7e7 f883 	bl	8000618 <__aeabi_dmul>
 8019512:	4602      	mov	r2, r0
 8019514:	460b      	mov	r3, r1
 8019516:	4680      	mov	r8, r0
 8019518:	4689      	mov	r9, r1
 801951a:	f7e7 f87d 	bl	8000618 <__aeabi_dmul>
 801951e:	a374      	add	r3, pc, #464	; (adr r3, 80196f0 <atan+0x2b8>)
 8019520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019524:	4606      	mov	r6, r0
 8019526:	460f      	mov	r7, r1
 8019528:	f7e7 f876 	bl	8000618 <__aeabi_dmul>
 801952c:	a372      	add	r3, pc, #456	; (adr r3, 80196f8 <atan+0x2c0>)
 801952e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019532:	f7e6 febb 	bl	80002ac <__adddf3>
 8019536:	4632      	mov	r2, r6
 8019538:	463b      	mov	r3, r7
 801953a:	f7e7 f86d 	bl	8000618 <__aeabi_dmul>
 801953e:	a370      	add	r3, pc, #448	; (adr r3, 8019700 <atan+0x2c8>)
 8019540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019544:	f7e6 feb2 	bl	80002ac <__adddf3>
 8019548:	4632      	mov	r2, r6
 801954a:	463b      	mov	r3, r7
 801954c:	f7e7 f864 	bl	8000618 <__aeabi_dmul>
 8019550:	a36d      	add	r3, pc, #436	; (adr r3, 8019708 <atan+0x2d0>)
 8019552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019556:	f7e6 fea9 	bl	80002ac <__adddf3>
 801955a:	4632      	mov	r2, r6
 801955c:	463b      	mov	r3, r7
 801955e:	f7e7 f85b 	bl	8000618 <__aeabi_dmul>
 8019562:	a36b      	add	r3, pc, #428	; (adr r3, 8019710 <atan+0x2d8>)
 8019564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019568:	f7e6 fea0 	bl	80002ac <__adddf3>
 801956c:	4632      	mov	r2, r6
 801956e:	463b      	mov	r3, r7
 8019570:	f7e7 f852 	bl	8000618 <__aeabi_dmul>
 8019574:	a368      	add	r3, pc, #416	; (adr r3, 8019718 <atan+0x2e0>)
 8019576:	e9d3 2300 	ldrd	r2, r3, [r3]
 801957a:	f7e6 fe97 	bl	80002ac <__adddf3>
 801957e:	4642      	mov	r2, r8
 8019580:	464b      	mov	r3, r9
 8019582:	f7e7 f849 	bl	8000618 <__aeabi_dmul>
 8019586:	a366      	add	r3, pc, #408	; (adr r3, 8019720 <atan+0x2e8>)
 8019588:	e9d3 2300 	ldrd	r2, r3, [r3]
 801958c:	4680      	mov	r8, r0
 801958e:	4689      	mov	r9, r1
 8019590:	4630      	mov	r0, r6
 8019592:	4639      	mov	r1, r7
 8019594:	f7e7 f840 	bl	8000618 <__aeabi_dmul>
 8019598:	a363      	add	r3, pc, #396	; (adr r3, 8019728 <atan+0x2f0>)
 801959a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801959e:	f7e6 fe83 	bl	80002a8 <__aeabi_dsub>
 80195a2:	4632      	mov	r2, r6
 80195a4:	463b      	mov	r3, r7
 80195a6:	f7e7 f837 	bl	8000618 <__aeabi_dmul>
 80195aa:	a361      	add	r3, pc, #388	; (adr r3, 8019730 <atan+0x2f8>)
 80195ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80195b0:	f7e6 fe7a 	bl	80002a8 <__aeabi_dsub>
 80195b4:	4632      	mov	r2, r6
 80195b6:	463b      	mov	r3, r7
 80195b8:	f7e7 f82e 	bl	8000618 <__aeabi_dmul>
 80195bc:	a35e      	add	r3, pc, #376	; (adr r3, 8019738 <atan+0x300>)
 80195be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80195c2:	f7e6 fe71 	bl	80002a8 <__aeabi_dsub>
 80195c6:	4632      	mov	r2, r6
 80195c8:	463b      	mov	r3, r7
 80195ca:	f7e7 f825 	bl	8000618 <__aeabi_dmul>
 80195ce:	a35c      	add	r3, pc, #368	; (adr r3, 8019740 <atan+0x308>)
 80195d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80195d4:	f7e6 fe68 	bl	80002a8 <__aeabi_dsub>
 80195d8:	4632      	mov	r2, r6
 80195da:	463b      	mov	r3, r7
 80195dc:	f7e7 f81c 	bl	8000618 <__aeabi_dmul>
 80195e0:	4602      	mov	r2, r0
 80195e2:	460b      	mov	r3, r1
 80195e4:	4640      	mov	r0, r8
 80195e6:	4649      	mov	r1, r9
 80195e8:	f7e6 fe60 	bl	80002ac <__adddf3>
 80195ec:	4622      	mov	r2, r4
 80195ee:	462b      	mov	r3, r5
 80195f0:	f7e7 f812 	bl	8000618 <__aeabi_dmul>
 80195f4:	f1ba 3fff 	cmp.w	sl, #4294967295
 80195f8:	4602      	mov	r2, r0
 80195fa:	460b      	mov	r3, r1
 80195fc:	d14b      	bne.n	8019696 <atan+0x25e>
 80195fe:	4620      	mov	r0, r4
 8019600:	4629      	mov	r1, r5
 8019602:	f7e6 fe51 	bl	80002a8 <__aeabi_dsub>
 8019606:	e72c      	b.n	8019462 <atan+0x2a>
 8019608:	ee10 0a10 	vmov	r0, s0
 801960c:	2200      	movs	r2, #0
 801960e:	4b53      	ldr	r3, [pc, #332]	; (801975c <atan+0x324>)
 8019610:	4629      	mov	r1, r5
 8019612:	f7e6 fe49 	bl	80002a8 <__aeabi_dsub>
 8019616:	2200      	movs	r2, #0
 8019618:	4606      	mov	r6, r0
 801961a:	460f      	mov	r7, r1
 801961c:	4b4f      	ldr	r3, [pc, #316]	; (801975c <atan+0x324>)
 801961e:	4620      	mov	r0, r4
 8019620:	4629      	mov	r1, r5
 8019622:	f7e6 fe43 	bl	80002ac <__adddf3>
 8019626:	4602      	mov	r2, r0
 8019628:	460b      	mov	r3, r1
 801962a:	4630      	mov	r0, r6
 801962c:	4639      	mov	r1, r7
 801962e:	f7e7 f91d 	bl	800086c <__aeabi_ddiv>
 8019632:	f04f 0a01 	mov.w	sl, #1
 8019636:	4604      	mov	r4, r0
 8019638:	460d      	mov	r5, r1
 801963a:	e764      	b.n	8019506 <atan+0xce>
 801963c:	4b49      	ldr	r3, [pc, #292]	; (8019764 <atan+0x32c>)
 801963e:	429e      	cmp	r6, r3
 8019640:	dc1d      	bgt.n	801967e <atan+0x246>
 8019642:	ee10 0a10 	vmov	r0, s0
 8019646:	2200      	movs	r2, #0
 8019648:	4b47      	ldr	r3, [pc, #284]	; (8019768 <atan+0x330>)
 801964a:	4629      	mov	r1, r5
 801964c:	f7e6 fe2c 	bl	80002a8 <__aeabi_dsub>
 8019650:	2200      	movs	r2, #0
 8019652:	4606      	mov	r6, r0
 8019654:	460f      	mov	r7, r1
 8019656:	4b44      	ldr	r3, [pc, #272]	; (8019768 <atan+0x330>)
 8019658:	4620      	mov	r0, r4
 801965a:	4629      	mov	r1, r5
 801965c:	f7e6 ffdc 	bl	8000618 <__aeabi_dmul>
 8019660:	2200      	movs	r2, #0
 8019662:	4b3e      	ldr	r3, [pc, #248]	; (801975c <atan+0x324>)
 8019664:	f7e6 fe22 	bl	80002ac <__adddf3>
 8019668:	4602      	mov	r2, r0
 801966a:	460b      	mov	r3, r1
 801966c:	4630      	mov	r0, r6
 801966e:	4639      	mov	r1, r7
 8019670:	f7e7 f8fc 	bl	800086c <__aeabi_ddiv>
 8019674:	f04f 0a02 	mov.w	sl, #2
 8019678:	4604      	mov	r4, r0
 801967a:	460d      	mov	r5, r1
 801967c:	e743      	b.n	8019506 <atan+0xce>
 801967e:	462b      	mov	r3, r5
 8019680:	ee10 2a10 	vmov	r2, s0
 8019684:	2000      	movs	r0, #0
 8019686:	4939      	ldr	r1, [pc, #228]	; (801976c <atan+0x334>)
 8019688:	f7e7 f8f0 	bl	800086c <__aeabi_ddiv>
 801968c:	f04f 0a03 	mov.w	sl, #3
 8019690:	4604      	mov	r4, r0
 8019692:	460d      	mov	r5, r1
 8019694:	e737      	b.n	8019506 <atan+0xce>
 8019696:	4b36      	ldr	r3, [pc, #216]	; (8019770 <atan+0x338>)
 8019698:	4e36      	ldr	r6, [pc, #216]	; (8019774 <atan+0x33c>)
 801969a:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 801969e:	4456      	add	r6, sl
 80196a0:	449a      	add	sl, r3
 80196a2:	e9da 2300 	ldrd	r2, r3, [sl]
 80196a6:	f7e6 fdff 	bl	80002a8 <__aeabi_dsub>
 80196aa:	4622      	mov	r2, r4
 80196ac:	462b      	mov	r3, r5
 80196ae:	f7e6 fdfb 	bl	80002a8 <__aeabi_dsub>
 80196b2:	4602      	mov	r2, r0
 80196b4:	460b      	mov	r3, r1
 80196b6:	e9d6 0100 	ldrd	r0, r1, [r6]
 80196ba:	f7e6 fdf5 	bl	80002a8 <__aeabi_dsub>
 80196be:	f1bb 0f00 	cmp.w	fp, #0
 80196c2:	4604      	mov	r4, r0
 80196c4:	460d      	mov	r5, r1
 80196c6:	f6bf aed6 	bge.w	8019476 <atan+0x3e>
 80196ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80196ce:	461d      	mov	r5, r3
 80196d0:	e6d1      	b.n	8019476 <atan+0x3e>
 80196d2:	a51d      	add	r5, pc, #116	; (adr r5, 8019748 <atan+0x310>)
 80196d4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80196d8:	e6cd      	b.n	8019476 <atan+0x3e>
 80196da:	bf00      	nop
 80196dc:	f3af 8000 	nop.w
 80196e0:	54442d18 	.word	0x54442d18
 80196e4:	3ff921fb 	.word	0x3ff921fb
 80196e8:	8800759c 	.word	0x8800759c
 80196ec:	7e37e43c 	.word	0x7e37e43c
 80196f0:	e322da11 	.word	0xe322da11
 80196f4:	3f90ad3a 	.word	0x3f90ad3a
 80196f8:	24760deb 	.word	0x24760deb
 80196fc:	3fa97b4b 	.word	0x3fa97b4b
 8019700:	a0d03d51 	.word	0xa0d03d51
 8019704:	3fb10d66 	.word	0x3fb10d66
 8019708:	c54c206e 	.word	0xc54c206e
 801970c:	3fb745cd 	.word	0x3fb745cd
 8019710:	920083ff 	.word	0x920083ff
 8019714:	3fc24924 	.word	0x3fc24924
 8019718:	5555550d 	.word	0x5555550d
 801971c:	3fd55555 	.word	0x3fd55555
 8019720:	2c6a6c2f 	.word	0x2c6a6c2f
 8019724:	bfa2b444 	.word	0xbfa2b444
 8019728:	52defd9a 	.word	0x52defd9a
 801972c:	3fadde2d 	.word	0x3fadde2d
 8019730:	af749a6d 	.word	0xaf749a6d
 8019734:	3fb3b0f2 	.word	0x3fb3b0f2
 8019738:	fe231671 	.word	0xfe231671
 801973c:	3fbc71c6 	.word	0x3fbc71c6
 8019740:	9998ebc4 	.word	0x9998ebc4
 8019744:	3fc99999 	.word	0x3fc99999
 8019748:	54442d18 	.word	0x54442d18
 801974c:	bff921fb 	.word	0xbff921fb
 8019750:	440fffff 	.word	0x440fffff
 8019754:	7ff00000 	.word	0x7ff00000
 8019758:	3fdbffff 	.word	0x3fdbffff
 801975c:	3ff00000 	.word	0x3ff00000
 8019760:	3ff2ffff 	.word	0x3ff2ffff
 8019764:	40037fff 	.word	0x40037fff
 8019768:	3ff80000 	.word	0x3ff80000
 801976c:	bff00000 	.word	0xbff00000
 8019770:	0801a3a8 	.word	0x0801a3a8
 8019774:	0801a388 	.word	0x0801a388

08019778 <fabs>:
 8019778:	ec51 0b10 	vmov	r0, r1, d0
 801977c:	ee10 2a10 	vmov	r2, s0
 8019780:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019784:	ec43 2b10 	vmov	d0, r2, r3
 8019788:	4770      	bx	lr
 801978a:	0000      	movs	r0, r0
 801978c:	0000      	movs	r0, r0
	...

08019790 <floor>:
 8019790:	ec51 0b10 	vmov	r0, r1, d0
 8019794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019798:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801979c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80197a0:	2e13      	cmp	r6, #19
 80197a2:	460c      	mov	r4, r1
 80197a4:	ee10 5a10 	vmov	r5, s0
 80197a8:	4680      	mov	r8, r0
 80197aa:	dc34      	bgt.n	8019816 <floor+0x86>
 80197ac:	2e00      	cmp	r6, #0
 80197ae:	da16      	bge.n	80197de <floor+0x4e>
 80197b0:	a335      	add	r3, pc, #212	; (adr r3, 8019888 <floor+0xf8>)
 80197b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80197b6:	f7e6 fd79 	bl	80002ac <__adddf3>
 80197ba:	2200      	movs	r2, #0
 80197bc:	2300      	movs	r3, #0
 80197be:	f7e7 f9bb 	bl	8000b38 <__aeabi_dcmpgt>
 80197c2:	b148      	cbz	r0, 80197d8 <floor+0x48>
 80197c4:	2c00      	cmp	r4, #0
 80197c6:	da59      	bge.n	801987c <floor+0xec>
 80197c8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80197cc:	4a30      	ldr	r2, [pc, #192]	; (8019890 <floor+0x100>)
 80197ce:	432b      	orrs	r3, r5
 80197d0:	2500      	movs	r5, #0
 80197d2:	42ab      	cmp	r3, r5
 80197d4:	bf18      	it	ne
 80197d6:	4614      	movne	r4, r2
 80197d8:	4621      	mov	r1, r4
 80197da:	4628      	mov	r0, r5
 80197dc:	e025      	b.n	801982a <floor+0x9a>
 80197de:	4f2d      	ldr	r7, [pc, #180]	; (8019894 <floor+0x104>)
 80197e0:	4137      	asrs	r7, r6
 80197e2:	ea01 0307 	and.w	r3, r1, r7
 80197e6:	4303      	orrs	r3, r0
 80197e8:	d01f      	beq.n	801982a <floor+0x9a>
 80197ea:	a327      	add	r3, pc, #156	; (adr r3, 8019888 <floor+0xf8>)
 80197ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80197f0:	f7e6 fd5c 	bl	80002ac <__adddf3>
 80197f4:	2200      	movs	r2, #0
 80197f6:	2300      	movs	r3, #0
 80197f8:	f7e7 f99e 	bl	8000b38 <__aeabi_dcmpgt>
 80197fc:	2800      	cmp	r0, #0
 80197fe:	d0eb      	beq.n	80197d8 <floor+0x48>
 8019800:	2c00      	cmp	r4, #0
 8019802:	bfbe      	ittt	lt
 8019804:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8019808:	fa43 f606 	asrlt.w	r6, r3, r6
 801980c:	19a4      	addlt	r4, r4, r6
 801980e:	ea24 0407 	bic.w	r4, r4, r7
 8019812:	2500      	movs	r5, #0
 8019814:	e7e0      	b.n	80197d8 <floor+0x48>
 8019816:	2e33      	cmp	r6, #51	; 0x33
 8019818:	dd0b      	ble.n	8019832 <floor+0xa2>
 801981a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801981e:	d104      	bne.n	801982a <floor+0x9a>
 8019820:	ee10 2a10 	vmov	r2, s0
 8019824:	460b      	mov	r3, r1
 8019826:	f7e6 fd41 	bl	80002ac <__adddf3>
 801982a:	ec41 0b10 	vmov	d0, r0, r1
 801982e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019832:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8019836:	f04f 33ff 	mov.w	r3, #4294967295
 801983a:	fa23 f707 	lsr.w	r7, r3, r7
 801983e:	4207      	tst	r7, r0
 8019840:	d0f3      	beq.n	801982a <floor+0x9a>
 8019842:	a311      	add	r3, pc, #68	; (adr r3, 8019888 <floor+0xf8>)
 8019844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019848:	f7e6 fd30 	bl	80002ac <__adddf3>
 801984c:	2200      	movs	r2, #0
 801984e:	2300      	movs	r3, #0
 8019850:	f7e7 f972 	bl	8000b38 <__aeabi_dcmpgt>
 8019854:	2800      	cmp	r0, #0
 8019856:	d0bf      	beq.n	80197d8 <floor+0x48>
 8019858:	2c00      	cmp	r4, #0
 801985a:	da02      	bge.n	8019862 <floor+0xd2>
 801985c:	2e14      	cmp	r6, #20
 801985e:	d103      	bne.n	8019868 <floor+0xd8>
 8019860:	3401      	adds	r4, #1
 8019862:	ea25 0507 	bic.w	r5, r5, r7
 8019866:	e7b7      	b.n	80197d8 <floor+0x48>
 8019868:	2301      	movs	r3, #1
 801986a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801986e:	fa03 f606 	lsl.w	r6, r3, r6
 8019872:	4435      	add	r5, r6
 8019874:	4545      	cmp	r5, r8
 8019876:	bf38      	it	cc
 8019878:	18e4      	addcc	r4, r4, r3
 801987a:	e7f2      	b.n	8019862 <floor+0xd2>
 801987c:	2500      	movs	r5, #0
 801987e:	462c      	mov	r4, r5
 8019880:	e7aa      	b.n	80197d8 <floor+0x48>
 8019882:	bf00      	nop
 8019884:	f3af 8000 	nop.w
 8019888:	8800759c 	.word	0x8800759c
 801988c:	7e37e43c 	.word	0x7e37e43c
 8019890:	bff00000 	.word	0xbff00000
 8019894:	000fffff 	.word	0x000fffff

08019898 <matherr>:
 8019898:	2000      	movs	r0, #0
 801989a:	4770      	bx	lr
 801989c:	0000      	movs	r0, r0
	...

080198a0 <scalbn>:
 80198a0:	b570      	push	{r4, r5, r6, lr}
 80198a2:	ec55 4b10 	vmov	r4, r5, d0
 80198a6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80198aa:	4606      	mov	r6, r0
 80198ac:	462b      	mov	r3, r5
 80198ae:	b9aa      	cbnz	r2, 80198dc <scalbn+0x3c>
 80198b0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80198b4:	4323      	orrs	r3, r4
 80198b6:	d03b      	beq.n	8019930 <scalbn+0x90>
 80198b8:	4b31      	ldr	r3, [pc, #196]	; (8019980 <scalbn+0xe0>)
 80198ba:	4629      	mov	r1, r5
 80198bc:	2200      	movs	r2, #0
 80198be:	ee10 0a10 	vmov	r0, s0
 80198c2:	f7e6 fea9 	bl	8000618 <__aeabi_dmul>
 80198c6:	4b2f      	ldr	r3, [pc, #188]	; (8019984 <scalbn+0xe4>)
 80198c8:	429e      	cmp	r6, r3
 80198ca:	4604      	mov	r4, r0
 80198cc:	460d      	mov	r5, r1
 80198ce:	da12      	bge.n	80198f6 <scalbn+0x56>
 80198d0:	a327      	add	r3, pc, #156	; (adr r3, 8019970 <scalbn+0xd0>)
 80198d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80198d6:	f7e6 fe9f 	bl	8000618 <__aeabi_dmul>
 80198da:	e009      	b.n	80198f0 <scalbn+0x50>
 80198dc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80198e0:	428a      	cmp	r2, r1
 80198e2:	d10c      	bne.n	80198fe <scalbn+0x5e>
 80198e4:	ee10 2a10 	vmov	r2, s0
 80198e8:	4620      	mov	r0, r4
 80198ea:	4629      	mov	r1, r5
 80198ec:	f7e6 fcde 	bl	80002ac <__adddf3>
 80198f0:	4604      	mov	r4, r0
 80198f2:	460d      	mov	r5, r1
 80198f4:	e01c      	b.n	8019930 <scalbn+0x90>
 80198f6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80198fa:	460b      	mov	r3, r1
 80198fc:	3a36      	subs	r2, #54	; 0x36
 80198fe:	4432      	add	r2, r6
 8019900:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8019904:	428a      	cmp	r2, r1
 8019906:	dd0b      	ble.n	8019920 <scalbn+0x80>
 8019908:	ec45 4b11 	vmov	d1, r4, r5
 801990c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8019978 <scalbn+0xd8>
 8019910:	f000 f83c 	bl	801998c <copysign>
 8019914:	a318      	add	r3, pc, #96	; (adr r3, 8019978 <scalbn+0xd8>)
 8019916:	e9d3 2300 	ldrd	r2, r3, [r3]
 801991a:	ec51 0b10 	vmov	r0, r1, d0
 801991e:	e7da      	b.n	80198d6 <scalbn+0x36>
 8019920:	2a00      	cmp	r2, #0
 8019922:	dd08      	ble.n	8019936 <scalbn+0x96>
 8019924:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8019928:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801992c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8019930:	ec45 4b10 	vmov	d0, r4, r5
 8019934:	bd70      	pop	{r4, r5, r6, pc}
 8019936:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801993a:	da0d      	bge.n	8019958 <scalbn+0xb8>
 801993c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8019940:	429e      	cmp	r6, r3
 8019942:	ec45 4b11 	vmov	d1, r4, r5
 8019946:	dce1      	bgt.n	801990c <scalbn+0x6c>
 8019948:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8019970 <scalbn+0xd0>
 801994c:	f000 f81e 	bl	801998c <copysign>
 8019950:	a307      	add	r3, pc, #28	; (adr r3, 8019970 <scalbn+0xd0>)
 8019952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019956:	e7e0      	b.n	801991a <scalbn+0x7a>
 8019958:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801995c:	3236      	adds	r2, #54	; 0x36
 801995e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8019962:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8019966:	4620      	mov	r0, r4
 8019968:	4629      	mov	r1, r5
 801996a:	2200      	movs	r2, #0
 801996c:	4b06      	ldr	r3, [pc, #24]	; (8019988 <scalbn+0xe8>)
 801996e:	e7b2      	b.n	80198d6 <scalbn+0x36>
 8019970:	c2f8f359 	.word	0xc2f8f359
 8019974:	01a56e1f 	.word	0x01a56e1f
 8019978:	8800759c 	.word	0x8800759c
 801997c:	7e37e43c 	.word	0x7e37e43c
 8019980:	43500000 	.word	0x43500000
 8019984:	ffff3cb0 	.word	0xffff3cb0
 8019988:	3c900000 	.word	0x3c900000

0801998c <copysign>:
 801998c:	ec51 0b10 	vmov	r0, r1, d0
 8019990:	ee11 0a90 	vmov	r0, s3
 8019994:	ee10 2a10 	vmov	r2, s0
 8019998:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801999c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80199a0:	ea41 0300 	orr.w	r3, r1, r0
 80199a4:	ec43 2b10 	vmov	d0, r2, r3
 80199a8:	4770      	bx	lr
	...

080199ac <_init>:
 80199ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80199ae:	bf00      	nop
 80199b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80199b2:	bc08      	pop	{r3}
 80199b4:	469e      	mov	lr, r3
 80199b6:	4770      	bx	lr

080199b8 <_fini>:
 80199b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80199ba:	bf00      	nop
 80199bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80199be:	bc08      	pop	{r3}
 80199c0:	469e      	mov	lr, r3
 80199c2:	4770      	bx	lr
