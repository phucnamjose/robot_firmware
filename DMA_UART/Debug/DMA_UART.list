
DMA_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001830c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a58  080184a0  080184a0  000284a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018ef8  08018ef8  00031008  2**0
                  CONTENTS
  4 .ARM          00000008  08018ef8  08018ef8  00028ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018f00  08018f00  00031008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018f00  08018f00  00028f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018f04  08018f04  00028f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001008  20000000  08018f08  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005b8c  20001008  08019f10  00031008  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20006b94  08019f10  00036b94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00031008  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d223  00000000  00000000  00031038  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000617a  00000000  00000000  0005e25b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001ca0  00000000  00000000  000643d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001a20  00000000  00000000  00066078  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029840  00000000  00000000  00067a98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001ecbb  00000000  00000000  000912d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dbe9a  00000000  00000000  000aff93  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018be2d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008a48  00000000  00000000  0018bea8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20001008 	.word	0x20001008
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08018484 	.word	0x08018484

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000100c 	.word	0x2000100c
 80001cc:	08018484 	.word	0x08018484

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b972 	b.w	8000fa4 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9e08      	ldr	r6, [sp, #32]
 8000cde:	4604      	mov	r4, r0
 8000ce0:	4688      	mov	r8, r1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d14b      	bne.n	8000d7e <__udivmoddi4+0xa6>
 8000ce6:	428a      	cmp	r2, r1
 8000ce8:	4615      	mov	r5, r2
 8000cea:	d967      	bls.n	8000dbc <__udivmoddi4+0xe4>
 8000cec:	fab2 f282 	clz	r2, r2
 8000cf0:	b14a      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf2:	f1c2 0720 	rsb	r7, r2, #32
 8000cf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cfe:	4095      	lsls	r5, r2
 8000d00:	ea47 0803 	orr.w	r8, r7, r3
 8000d04:	4094      	lsls	r4, r2
 8000d06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d0a:	0c23      	lsrs	r3, r4, #16
 8000d0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d10:	fa1f fc85 	uxth.w	ip, r5
 8000d14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x60>
 8000d24:	18eb      	adds	r3, r5, r3
 8000d26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d2a:	f080 811b 	bcs.w	8000f64 <__udivmoddi4+0x28c>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 8118 	bls.w	8000f64 <__udivmoddi4+0x28c>
 8000d34:	3f02      	subs	r7, #2
 8000d36:	442b      	add	r3, r5
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d4c:	45a4      	cmp	ip, r4
 8000d4e:	d909      	bls.n	8000d64 <__udivmoddi4+0x8c>
 8000d50:	192c      	adds	r4, r5, r4
 8000d52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d56:	f080 8107 	bcs.w	8000f68 <__udivmoddi4+0x290>
 8000d5a:	45a4      	cmp	ip, r4
 8000d5c:	f240 8104 	bls.w	8000f68 <__udivmoddi4+0x290>
 8000d60:	3802      	subs	r0, #2
 8000d62:	442c      	add	r4, r5
 8000d64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d68:	eba4 040c 	sub.w	r4, r4, ip
 8000d6c:	2700      	movs	r7, #0
 8000d6e:	b11e      	cbz	r6, 8000d78 <__udivmoddi4+0xa0>
 8000d70:	40d4      	lsrs	r4, r2
 8000d72:	2300      	movs	r3, #0
 8000d74:	e9c6 4300 	strd	r4, r3, [r6]
 8000d78:	4639      	mov	r1, r7
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0xbe>
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	f000 80eb 	beq.w	8000f5e <__udivmoddi4+0x286>
 8000d88:	2700      	movs	r7, #0
 8000d8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d8e:	4638      	mov	r0, r7
 8000d90:	4639      	mov	r1, r7
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	fab3 f783 	clz	r7, r3
 8000d9a:	2f00      	cmp	r7, #0
 8000d9c:	d147      	bne.n	8000e2e <__udivmoddi4+0x156>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d302      	bcc.n	8000da8 <__udivmoddi4+0xd0>
 8000da2:	4282      	cmp	r2, r0
 8000da4:	f200 80fa 	bhi.w	8000f9c <__udivmoddi4+0x2c4>
 8000da8:	1a84      	subs	r4, r0, r2
 8000daa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	4698      	mov	r8, r3
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	d0e0      	beq.n	8000d78 <__udivmoddi4+0xa0>
 8000db6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dba:	e7dd      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000dbc:	b902      	cbnz	r2, 8000dc0 <__udivmoddi4+0xe8>
 8000dbe:	deff      	udf	#255	; 0xff
 8000dc0:	fab2 f282 	clz	r2, r2
 8000dc4:	2a00      	cmp	r2, #0
 8000dc6:	f040 808f 	bne.w	8000ee8 <__udivmoddi4+0x210>
 8000dca:	1b49      	subs	r1, r1, r5
 8000dcc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dd0:	fa1f f885 	uxth.w	r8, r5
 8000dd4:	2701      	movs	r7, #1
 8000dd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dda:	0c23      	lsrs	r3, r4, #16
 8000ddc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000de0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000de4:	fb08 f10c 	mul.w	r1, r8, ip
 8000de8:	4299      	cmp	r1, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x124>
 8000dec:	18eb      	adds	r3, r5, r3
 8000dee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x122>
 8000df4:	4299      	cmp	r1, r3
 8000df6:	f200 80cd 	bhi.w	8000f94 <__udivmoddi4+0x2bc>
 8000dfa:	4684      	mov	ip, r0
 8000dfc:	1a59      	subs	r1, r3, r1
 8000dfe:	b2a3      	uxth	r3, r4
 8000e00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e0c:	fb08 f800 	mul.w	r8, r8, r0
 8000e10:	45a0      	cmp	r8, r4
 8000e12:	d907      	bls.n	8000e24 <__udivmoddi4+0x14c>
 8000e14:	192c      	adds	r4, r5, r4
 8000e16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x14a>
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	f200 80b6 	bhi.w	8000f8e <__udivmoddi4+0x2b6>
 8000e22:	4618      	mov	r0, r3
 8000e24:	eba4 0408 	sub.w	r4, r4, r8
 8000e28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e2c:	e79f      	b.n	8000d6e <__udivmoddi4+0x96>
 8000e2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e32:	40bb      	lsls	r3, r7
 8000e34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e4c:	4325      	orrs	r5, r4
 8000e4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e52:	0c2c      	lsrs	r4, r5, #16
 8000e54:	fb08 3319 	mls	r3, r8, r9, r3
 8000e58:	fa1f fa8e 	uxth.w	sl, lr
 8000e5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e60:	fb09 f40a 	mul.w	r4, r9, sl
 8000e64:	429c      	cmp	r4, r3
 8000e66:	fa02 f207 	lsl.w	r2, r2, r7
 8000e6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e6e:	d90b      	bls.n	8000e88 <__udivmoddi4+0x1b0>
 8000e70:	eb1e 0303 	adds.w	r3, lr, r3
 8000e74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e78:	f080 8087 	bcs.w	8000f8a <__udivmoddi4+0x2b2>
 8000e7c:	429c      	cmp	r4, r3
 8000e7e:	f240 8084 	bls.w	8000f8a <__udivmoddi4+0x2b2>
 8000e82:	f1a9 0902 	sub.w	r9, r9, #2
 8000e86:	4473      	add	r3, lr
 8000e88:	1b1b      	subs	r3, r3, r4
 8000e8a:	b2ad      	uxth	r5, r5
 8000e8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e90:	fb08 3310 	mls	r3, r8, r0, r3
 8000e94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e9c:	45a2      	cmp	sl, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x1da>
 8000ea0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ea4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ea8:	d26b      	bcs.n	8000f82 <__udivmoddi4+0x2aa>
 8000eaa:	45a2      	cmp	sl, r4
 8000eac:	d969      	bls.n	8000f82 <__udivmoddi4+0x2aa>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	4474      	add	r4, lr
 8000eb2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eba:	eba4 040a 	sub.w	r4, r4, sl
 8000ebe:	454c      	cmp	r4, r9
 8000ec0:	46c2      	mov	sl, r8
 8000ec2:	464b      	mov	r3, r9
 8000ec4:	d354      	bcc.n	8000f70 <__udivmoddi4+0x298>
 8000ec6:	d051      	beq.n	8000f6c <__udivmoddi4+0x294>
 8000ec8:	2e00      	cmp	r6, #0
 8000eca:	d069      	beq.n	8000fa0 <__udivmoddi4+0x2c8>
 8000ecc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ed0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ed4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ed8:	40fd      	lsrs	r5, r7
 8000eda:	40fc      	lsrs	r4, r7
 8000edc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ee0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ee4:	2700      	movs	r7, #0
 8000ee6:	e747      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000ee8:	f1c2 0320 	rsb	r3, r2, #32
 8000eec:	fa20 f703 	lsr.w	r7, r0, r3
 8000ef0:	4095      	lsls	r5, r2
 8000ef2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ef6:	fa21 f303 	lsr.w	r3, r1, r3
 8000efa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000efe:	4338      	orrs	r0, r7
 8000f00:	0c01      	lsrs	r1, r0, #16
 8000f02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f06:	fa1f f885 	uxth.w	r8, r5
 8000f0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb07 f308 	mul.w	r3, r7, r8
 8000f16:	428b      	cmp	r3, r1
 8000f18:	fa04 f402 	lsl.w	r4, r4, r2
 8000f1c:	d907      	bls.n	8000f2e <__udivmoddi4+0x256>
 8000f1e:	1869      	adds	r1, r5, r1
 8000f20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f24:	d22f      	bcs.n	8000f86 <__udivmoddi4+0x2ae>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	d92d      	bls.n	8000f86 <__udivmoddi4+0x2ae>
 8000f2a:	3f02      	subs	r7, #2
 8000f2c:	4429      	add	r1, r5
 8000f2e:	1acb      	subs	r3, r1, r3
 8000f30:	b281      	uxth	r1, r0
 8000f32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f3e:	fb00 f308 	mul.w	r3, r0, r8
 8000f42:	428b      	cmp	r3, r1
 8000f44:	d907      	bls.n	8000f56 <__udivmoddi4+0x27e>
 8000f46:	1869      	adds	r1, r5, r1
 8000f48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f4c:	d217      	bcs.n	8000f7e <__udivmoddi4+0x2a6>
 8000f4e:	428b      	cmp	r3, r1
 8000f50:	d915      	bls.n	8000f7e <__udivmoddi4+0x2a6>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4429      	add	r1, r5
 8000f56:	1ac9      	subs	r1, r1, r3
 8000f58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f5c:	e73b      	b.n	8000dd6 <__udivmoddi4+0xfe>
 8000f5e:	4637      	mov	r7, r6
 8000f60:	4630      	mov	r0, r6
 8000f62:	e709      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000f64:	4607      	mov	r7, r0
 8000f66:	e6e7      	b.n	8000d38 <__udivmoddi4+0x60>
 8000f68:	4618      	mov	r0, r3
 8000f6a:	e6fb      	b.n	8000d64 <__udivmoddi4+0x8c>
 8000f6c:	4541      	cmp	r1, r8
 8000f6e:	d2ab      	bcs.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f74:	eb69 020e 	sbc.w	r2, r9, lr
 8000f78:	3801      	subs	r0, #1
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	e7a4      	b.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f7e:	4660      	mov	r0, ip
 8000f80:	e7e9      	b.n	8000f56 <__udivmoddi4+0x27e>
 8000f82:	4618      	mov	r0, r3
 8000f84:	e795      	b.n	8000eb2 <__udivmoddi4+0x1da>
 8000f86:	4667      	mov	r7, ip
 8000f88:	e7d1      	b.n	8000f2e <__udivmoddi4+0x256>
 8000f8a:	4681      	mov	r9, r0
 8000f8c:	e77c      	b.n	8000e88 <__udivmoddi4+0x1b0>
 8000f8e:	3802      	subs	r0, #2
 8000f90:	442c      	add	r4, r5
 8000f92:	e747      	b.n	8000e24 <__udivmoddi4+0x14c>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	442b      	add	r3, r5
 8000f9a:	e72f      	b.n	8000dfc <__udivmoddi4+0x124>
 8000f9c:	4638      	mov	r0, r7
 8000f9e:	e708      	b.n	8000db2 <__udivmoddi4+0xda>
 8000fa0:	4637      	mov	r7, r6
 8000fa2:	e6e9      	b.n	8000d78 <__udivmoddi4+0xa0>

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <commandRead>:
												"STOP",
												"ERRO",
												"OKAY"};


Robot_CommandTypedef 	commandRead	(uint8_t *message, int32_t *id_command, DUTY_Command_TypeDef *duty_cmd) {
 8000fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fac:	b0b4      	sub	sp, #208	; 0xd0
 8000fae:	af0a      	add	r7, sp, #40	; 0x28
 8000fb0:	60f8      	str	r0, [r7, #12]
 8000fb2:	60b9      	str	r1, [r7, #8]
 8000fb4:	607a      	str	r2, [r7, #4]
	char command[10];
	char para[70];
	int32_t result;
	memset(para, 0, 70*sizeof(char));
 8000fb6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000fba:	2246      	movs	r2, #70	; 0x46
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f011 fc2a 	bl	8012818 <memset>
	result = sscanf((char*)message, "%d %s %70c",(int*) id_command, command, para);
 8000fc4:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8000fc8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000fcc:	9300      	str	r3, [sp, #0]
 8000fce:	4613      	mov	r3, r2
 8000fd0:	68ba      	ldr	r2, [r7, #8]
 8000fd2:	49b4      	ldr	r1, [pc, #720]	; (80012a4 <commandRead+0x2fc>)
 8000fd4:	68f8      	ldr	r0, [r7, #12]
 8000fd6:	f012 fb77 	bl	80136c8 <siscanf>
 8000fda:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
	duty_cmd->id_command = *id_command;
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	605a      	str	r2, [r3, #4]
	// Stop Now
	if ( 0 == strcmp( command, ROBOTCOMMAND[CMD_STOPNOW])) {
 8000fe6:	4bb0      	ldr	r3, [pc, #704]	; (80012a8 <commandRead+0x300>)
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000fee:	4611      	mov	r1, r2
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff f8ed 	bl	80001d0 <strcmp>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d104      	bne.n	8001006 <commandRead+0x5e>
		duty_cmd->robot_mode = SCARA_MODE_STOP;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2200      	movs	r2, #0
 8001000:	701a      	strb	r2, [r3, #0]
		return CMD_STOPNOW;
 8001002:	2300      	movs	r3, #0
 8001004:	e23c      	b.n	8001480 <commandRead+0x4d8>

	// Scan Limit
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_SCAN_LIMIT])) {
 8001006:	4ba8      	ldr	r3, [pc, #672]	; (80012a8 <commandRead+0x300>)
 8001008:	685a      	ldr	r2, [r3, #4]
 800100a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800100e:	4611      	mov	r1, r2
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff f8dd 	bl	80001d0 <strcmp>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d104      	bne.n	8001026 <commandRead+0x7e>
		duty_cmd->robot_mode = SCARA_MODE_SCAN;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2201      	movs	r2, #1
 8001020:	701a      	strb	r2, [r3, #0]
		return CMD_SCAN_LIMIT;
 8001022:	2301      	movs	r3, #1
 8001024:	e22c      	b.n	8001480 <commandRead+0x4d8>

	// Move Home
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_MOVE_HOME])) {
 8001026:	4ba0      	ldr	r3, [pc, #640]	; (80012a8 <commandRead+0x300>)
 8001028:	689a      	ldr	r2, [r3, #8]
 800102a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800102e:	4611      	mov	r1, r2
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff f8cd 	bl	80001d0 <strcmp>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d120      	bne.n	800107e <commandRead+0xd6>
		if (3 == result) {
 800103c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001040:	2b03      	cmp	r3, #3
 8001042:	d112      	bne.n	800106a <commandRead+0xc2>
			result = sscanf( para, "%lf %lf",
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f103 02f8 	add.w	r2, r3, #248	; 0xf8
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001050:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8001054:	4995      	ldr	r1, [pc, #596]	; (80012ac <commandRead+0x304>)
 8001056:	f012 fb37 	bl	80136c8 <siscanf>
 800105a:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
							&(duty_cmd->v_factor),
							&(duty_cmd->a_factor));
			if (2 != result) {
 800105e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001062:	2b02      	cmp	r3, #2
 8001064:	d003      	beq.n	800106e <commandRead+0xc6>
				return CMD_ERROR;
 8001066:	230b      	movs	r3, #11
 8001068:	e20a      	b.n	8001480 <commandRead+0x4d8>
			}
		} else {
			return CMD_ERROR;
 800106a:	230b      	movs	r3, #11
 800106c:	e208      	b.n	8001480 <commandRead+0x4d8>
		}
		duty_cmd->space_type = DUTY_SPACE_JOINT;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2201      	movs	r2, #1
 8001072:	725a      	strb	r2, [r3, #9]
		duty_cmd->robot_mode = SCARA_MODE_DUTY;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2202      	movs	r2, #2
 8001078:	701a      	strb	r2, [r3, #0]
		return CMD_MOVE_HOME;
 800107a:	2302      	movs	r3, #2
 800107c:	e200      	b.n	8001480 <commandRead+0x4d8>

	// Move Line
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_MOVE_LINE])) {
 800107e:	4b8a      	ldr	r3, [pc, #552]	; (80012a8 <commandRead+0x300>)
 8001080:	68da      	ldr	r2, [r3, #12]
 8001082:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001086:	4611      	mov	r1, r2
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff f8a1 	bl	80001d0 <strcmp>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d151      	bne.n	8001138 <commandRead+0x190>
		if (3 == result) {
 8001094:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001098:	2b03      	cmp	r3, #3
 800109a:	d149      	bne.n	8001130 <commandRead+0x188>
			double temp_fl;
			int8_t mode_init;
			result = sscanf( para, "%lf %lf %lf %lf %lf %d %lf",
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f103 0550 	add.w	r5, r3, #80	; 0x50
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	f103 0658 	add.w	r6, r3, #88	; 0x58
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3360      	adds	r3, #96	; 0x60
 80010ac:	687a      	ldr	r2, [r7, #4]
 80010ae:	3268      	adds	r2, #104	; 0x68
 80010b0:	6879      	ldr	r1, [r7, #4]
 80010b2:	31f8      	adds	r1, #248	; 0xf8
 80010b4:	f107 0450 	add.w	r4, r7, #80	; 0x50
 80010b8:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80010bc:	9004      	str	r0, [sp, #16]
 80010be:	f107 0047 	add.w	r0, r7, #71	; 0x47
 80010c2:	9003      	str	r0, [sp, #12]
 80010c4:	9102      	str	r1, [sp, #8]
 80010c6:	9201      	str	r2, [sp, #4]
 80010c8:	9300      	str	r3, [sp, #0]
 80010ca:	4633      	mov	r3, r6
 80010cc:	462a      	mov	r2, r5
 80010ce:	4978      	ldr	r1, [pc, #480]	; (80012b0 <commandRead+0x308>)
 80010d0:	4620      	mov	r0, r4
 80010d2:	f012 faf9 	bl	80136c8 <siscanf>
 80010d6:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
							&(duty_cmd->target_point.roll),
							&(duty_cmd->v_factor),
							(int *)&mode_init,
							&temp_fl);

			if (7 != result) {
 80010da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80010de:	2b07      	cmp	r3, #7
 80010e0:	d001      	beq.n	80010e6 <commandRead+0x13e>
				return CMD_ERROR;
 80010e2:	230b      	movs	r3, #11
 80010e4:	e1cc      	b.n	8001480 <commandRead+0x4d8>
			}
			duty_cmd->path_type = DUTY_PATH_LINE;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2200      	movs	r2, #0
 80010ea:	729a      	strb	r2, [r3, #10]
			duty_cmd->space_type = DUTY_SPACE_TASK;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2200      	movs	r2, #0
 80010f0:	725a      	strb	r2, [r3, #9]
			duty_cmd->robot_mode = SCARA_MODE_DUTY;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2202      	movs	r2, #2
 80010f6:	701a      	strb	r2, [r3, #0]

			if ( DUTY_MODE_INIT_QVA == mode_init) {
 80010f8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d108      	bne.n	8001112 <commandRead+0x16a>
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2200      	movs	r2, #0
 8001104:	735a      	strb	r2, [r3, #13]
				duty_cmd->a_factor		= temp_fl;
 8001106:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	e9c2 3440 	strd	r3, r4, [r2, #256]	; 0x100
 8001110:	e010      	b.n	8001134 <commandRead+0x18c>
			} else if ( DUTY_MODE_INIT_QVT == mode_init) {
 8001112:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8001116:	2b01      	cmp	r3, #1
 8001118:	d108      	bne.n	800112c <commandRead+0x184>
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2201      	movs	r2, #1
 800111e:	735a      	strb	r2, [r3, #13]
				duty_cmd->time_total	= temp_fl;
 8001120:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	e9c2 3408 	strd	r3, r4, [r2, #32]
 800112a:	e003      	b.n	8001134 <commandRead+0x18c>
			} else {
				return CMD_ERROR;
 800112c:	230b      	movs	r3, #11
 800112e:	e1a7      	b.n	8001480 <commandRead+0x4d8>
			}
		} else {
			return CMD_ERROR;
 8001130:	230b      	movs	r3, #11
 8001132:	e1a5      	b.n	8001480 <commandRead+0x4d8>
		}
		return CMD_MOVE_LINE;
 8001134:	2303      	movs	r3, #3
 8001136:	e1a3      	b.n	8001480 <commandRead+0x4d8>

	// Move Circle
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_MOVE_CIRCLE])) {
 8001138:	4b5b      	ldr	r3, [pc, #364]	; (80012a8 <commandRead+0x300>)
 800113a:	691a      	ldr	r2, [r3, #16]
 800113c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001140:	4611      	mov	r1, r2
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff f844 	bl	80001d0 <strcmp>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d15f      	bne.n	800120e <commandRead+0x266>
		if (3 == result) {
 800114e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001152:	2b03      	cmp	r3, #3
 8001154:	d157      	bne.n	8001206 <commandRead+0x25e>
			double temp_fl;
			int8_t mode_init;
			result = sscanf( para, "%lf %lf %lf %lf %lf %lf %lf %d %lf %d %lf",
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	f103 0e50 	add.w	lr, r3, #80	; 0x50
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f103 0858 	add.w	r8, r3, #88	; 0x58
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	3360      	adds	r3, #96	; 0x60
 8001166:	603b      	str	r3, [r7, #0]
 8001168:	687a      	ldr	r2, [r7, #4]
 800116a:	3268      	adds	r2, #104	; 0x68
 800116c:	6879      	ldr	r1, [r7, #4]
 800116e:	31b8      	adds	r1, #184	; 0xb8
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	30c0      	adds	r0, #192	; 0xc0
 8001174:	687c      	ldr	r4, [r7, #4]
 8001176:	34c8      	adds	r4, #200	; 0xc8
							&(duty_cmd->target_point.z),
							&(duty_cmd->target_point.roll),
							&(duty_cmd->sub_point.x),
							&(duty_cmd->sub_point.y),
							&(duty_cmd->sub_point.z),
							(int *)&(duty_cmd->sub_para_int), // dir
 8001178:	687d      	ldr	r5, [r7, #4]
 800117a:	3510      	adds	r5, #16
			result = sscanf( para, "%lf %lf %lf %lf %lf %lf %lf %d %lf %d %lf",
 800117c:	687e      	ldr	r6, [r7, #4]
 800117e:	36f8      	adds	r6, #248	; 0xf8
 8001180:	f107 0c50 	add.w	ip, r7, #80	; 0x50
 8001184:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001188:	9308      	str	r3, [sp, #32]
 800118a:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800118e:	9307      	str	r3, [sp, #28]
 8001190:	9606      	str	r6, [sp, #24]
 8001192:	9505      	str	r5, [sp, #20]
 8001194:	9404      	str	r4, [sp, #16]
 8001196:	9003      	str	r0, [sp, #12]
 8001198:	9102      	str	r1, [sp, #8]
 800119a:	9201      	str	r2, [sp, #4]
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	9300      	str	r3, [sp, #0]
 80011a0:	4643      	mov	r3, r8
 80011a2:	4672      	mov	r2, lr
 80011a4:	4943      	ldr	r1, [pc, #268]	; (80012b4 <commandRead+0x30c>)
 80011a6:	4660      	mov	r0, ip
 80011a8:	f012 fa8e 	bl	80136c8 <siscanf>
 80011ac:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
							&(duty_cmd->v_factor),
							(int *)&mode_init,
							&temp_fl);

			if (11 != result) {
 80011b0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80011b4:	2b0b      	cmp	r3, #11
 80011b6:	d001      	beq.n	80011bc <commandRead+0x214>
				return CMD_ERROR;
 80011b8:	230b      	movs	r3, #11
 80011ba:	e161      	b.n	8001480 <commandRead+0x4d8>
			}
			duty_cmd->path_type = DUTY_PATH_CIRCLE;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2201      	movs	r2, #1
 80011c0:	729a      	strb	r2, [r3, #10]
			duty_cmd->space_type = DUTY_SPACE_TASK;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2200      	movs	r2, #0
 80011c6:	725a      	strb	r2, [r3, #9]
			duty_cmd->robot_mode = SCARA_MODE_DUTY;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2202      	movs	r2, #2
 80011cc:	701a      	strb	r2, [r3, #0]

			if ( DUTY_MODE_INIT_QVA == mode_init) {
 80011ce:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d108      	bne.n	80011e8 <commandRead+0x240>
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2200      	movs	r2, #0
 80011da:	735a      	strb	r2, [r3, #13]
				duty_cmd->a_factor		= temp_fl;
 80011dc:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	e9c2 3440 	strd	r3, r4, [r2, #256]	; 0x100
 80011e6:	e010      	b.n	800120a <commandRead+0x262>
			} else if ( DUTY_MODE_INIT_QVT == mode_init) {
 80011e8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d108      	bne.n	8001202 <commandRead+0x25a>
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2201      	movs	r2, #1
 80011f4:	735a      	strb	r2, [r3, #13]
				duty_cmd->time_total	= temp_fl;
 80011f6:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	e9c2 3408 	strd	r3, r4, [r2, #32]
 8001200:	e003      	b.n	800120a <commandRead+0x262>
			} else {
				return CMD_ERROR;
 8001202:	230b      	movs	r3, #11
 8001204:	e13c      	b.n	8001480 <commandRead+0x4d8>
			}
		} else {
			return CMD_ERROR;
 8001206:	230b      	movs	r3, #11
 8001208:	e13a      	b.n	8001480 <commandRead+0x4d8>
		}
		return CMD_MOVE_CIRCLE;
 800120a:	2304      	movs	r3, #4
 800120c:	e138      	b.n	8001480 <commandRead+0x4d8>

	// Move Joint
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_MOVE_JOINT])) {
 800120e:	4b26      	ldr	r3, [pc, #152]	; (80012a8 <commandRead+0x300>)
 8001210:	695a      	ldr	r2, [r3, #20]
 8001212:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001216:	4611      	mov	r1, r2
 8001218:	4618      	mov	r0, r3
 800121a:	f7fe ffd9 	bl	80001d0 <strcmp>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d15c      	bne.n	80012de <commandRead+0x336>
		if (3 == result) {
 8001224:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001228:	2b03      	cmp	r3, #3
 800122a:	d154      	bne.n	80012d6 <commandRead+0x32e>
			double temp_fl;
			int8_t mode_init;
			result = sscanf( para, "%lf %lf %lf %lf %lf %d %lf",
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f103 0658 	add.w	r6, r3, #88	; 0x58
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3360      	adds	r3, #96	; 0x60
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	3268      	adds	r2, #104	; 0x68
 8001240:	6879      	ldr	r1, [r7, #4]
 8001242:	31f8      	adds	r1, #248	; 0xf8
 8001244:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8001248:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800124c:	9004      	str	r0, [sp, #16]
 800124e:	f107 0027 	add.w	r0, r7, #39	; 0x27
 8001252:	9003      	str	r0, [sp, #12]
 8001254:	9102      	str	r1, [sp, #8]
 8001256:	9201      	str	r2, [sp, #4]
 8001258:	9300      	str	r3, [sp, #0]
 800125a:	4633      	mov	r3, r6
 800125c:	462a      	mov	r2, r5
 800125e:	4914      	ldr	r1, [pc, #80]	; (80012b0 <commandRead+0x308>)
 8001260:	4620      	mov	r0, r4
 8001262:	f012 fa31 	bl	80136c8 <siscanf>
 8001266:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
							&(duty_cmd->target_point.roll),
							&(duty_cmd->v_factor),
							(int *)&mode_init,
							&temp_fl);

			if (7 != result) {
 800126a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800126e:	2b07      	cmp	r3, #7
 8001270:	d001      	beq.n	8001276 <commandRead+0x2ce>
				return CMD_ERROR;
 8001272:	230b      	movs	r3, #11
 8001274:	e104      	b.n	8001480 <commandRead+0x4d8>
			}
			duty_cmd->space_type = DUTY_SPACE_JOINT;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2201      	movs	r2, #1
 800127a:	725a      	strb	r2, [r3, #9]
			duty_cmd->joint_type = DUTY_JOINT_4DOF;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2201      	movs	r2, #1
 8001280:	72da      	strb	r2, [r3, #11]
			duty_cmd->robot_mode = SCARA_MODE_DUTY;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2202      	movs	r2, #2
 8001286:	701a      	strb	r2, [r3, #0]

			if ( DUTY_MODE_INIT_QVA == mode_init) {
 8001288:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800128c:	2b00      	cmp	r3, #0
 800128e:	d113      	bne.n	80012b8 <commandRead+0x310>
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2200      	movs	r2, #0
 8001294:	735a      	strb	r2, [r3, #13]
				duty_cmd->a_factor		= temp_fl;
 8001296:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	e9c2 3440 	strd	r3, r4, [r2, #256]	; 0x100
 80012a0:	e01b      	b.n	80012da <commandRead+0x332>
 80012a2:	bf00      	nop
 80012a4:	08018530 	.word	0x08018530
 80012a8:	20000000 	.word	0x20000000
 80012ac:	0801853c 	.word	0x0801853c
 80012b0:	08018544 	.word	0x08018544
 80012b4:	08018560 	.word	0x08018560
			} else if ( DUTY_MODE_INIT_QVT == mode_init) {
 80012b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d108      	bne.n	80012d2 <commandRead+0x32a>
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2201      	movs	r2, #1
 80012c4:	735a      	strb	r2, [r3, #13]
				duty_cmd->time_total	= temp_fl;
 80012c6:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	e9c2 3408 	strd	r3, r4, [r2, #32]
 80012d0:	e003      	b.n	80012da <commandRead+0x332>
			} else {
				return CMD_ERROR;
 80012d2:	230b      	movs	r3, #11
 80012d4:	e0d4      	b.n	8001480 <commandRead+0x4d8>
			}
		} else {
			return CMD_ERROR;
 80012d6:	230b      	movs	r3, #11
 80012d8:	e0d2      	b.n	8001480 <commandRead+0x4d8>
		}
		return CMD_MOVE_JOINT;
 80012da:	2305      	movs	r3, #5
 80012dc:	e0d0      	b.n	8001480 <commandRead+0x4d8>

	// Rotate Single
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_ROTATE_SINGLE])) {
 80012de:	4b6b      	ldr	r3, [pc, #428]	; (800148c <commandRead+0x4e4>)
 80012e0:	699a      	ldr	r2, [r3, #24]
 80012e2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80012e6:	4611      	mov	r1, r2
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7fe ff71 	bl	80001d0 <strcmp>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d14a      	bne.n	800138a <commandRead+0x3e2>
		if (3 == result) {
 80012f4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80012f8:	2b03      	cmp	r3, #3
 80012fa:	d142      	bne.n	8001382 <commandRead+0x3da>
			double temp_fl;
			int8_t mode_init;
			result = sscanf( para, "%d %lf %lf %d %lf",
							(int *)&(duty_cmd->sub_para_int),
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f103 0110 	add.w	r1, r3, #16
			result = sscanf( para, "%d %lf %lf %d %lf",
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f103 0418 	add.w	r4, r3, #24
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	33f8      	adds	r3, #248	; 0xf8
 800130c:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8001310:	f107 0218 	add.w	r2, r7, #24
 8001314:	9202      	str	r2, [sp, #8]
 8001316:	f107 0217 	add.w	r2, r7, #23
 800131a:	9201      	str	r2, [sp, #4]
 800131c:	9300      	str	r3, [sp, #0]
 800131e:	4623      	mov	r3, r4
 8001320:	460a      	mov	r2, r1
 8001322:	495b      	ldr	r1, [pc, #364]	; (8001490 <commandRead+0x4e8>)
 8001324:	f012 f9d0 	bl	80136c8 <siscanf>
 8001328:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
							&(duty_cmd->sub_para_double),
							&(duty_cmd->v_factor),
							(int *)&mode_init,
							&temp_fl);

			if (5 != result) {
 800132c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001330:	2b05      	cmp	r3, #5
 8001332:	d001      	beq.n	8001338 <commandRead+0x390>
				return CMD_ERROR;
 8001334:	230b      	movs	r3, #11
 8001336:	e0a3      	b.n	8001480 <commandRead+0x4d8>
			}
			duty_cmd->space_type = DUTY_SPACE_JOINT;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2201      	movs	r2, #1
 800133c:	725a      	strb	r2, [r3, #9]
			duty_cmd->joint_type = DUTY_JOINT_SINGLE;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2200      	movs	r2, #0
 8001342:	72da      	strb	r2, [r3, #11]
			duty_cmd->robot_mode = SCARA_MODE_DUTY;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2202      	movs	r2, #2
 8001348:	701a      	strb	r2, [r3, #0]

			if ( DUTY_MODE_INIT_QVA == mode_init) {
 800134a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d108      	bne.n	8001364 <commandRead+0x3bc>
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2200      	movs	r2, #0
 8001356:	735a      	strb	r2, [r3, #13]
				duty_cmd->a_factor		= temp_fl;
 8001358:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	e9c2 3440 	strd	r3, r4, [r2, #256]	; 0x100
 8001362:	e010      	b.n	8001386 <commandRead+0x3de>
			} else if ( DUTY_MODE_INIT_QVT == mode_init) {
 8001364:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001368:	2b01      	cmp	r3, #1
 800136a:	d108      	bne.n	800137e <commandRead+0x3d6>
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2201      	movs	r2, #1
 8001370:	735a      	strb	r2, [r3, #13]
				duty_cmd->time_total	= temp_fl;
 8001372:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	e9c2 3408 	strd	r3, r4, [r2, #32]
 800137c:	e003      	b.n	8001386 <commandRead+0x3de>
			} else {
				return CMD_ERROR;
 800137e:	230b      	movs	r3, #11
 8001380:	e07e      	b.n	8001480 <commandRead+0x4d8>
			}
		} else {
			return CMD_ERROR;
 8001382:	230b      	movs	r3, #11
 8001384:	e07c      	b.n	8001480 <commandRead+0x4d8>
		}
		return CMD_ROTATE_SINGLE;
 8001386:	2306      	movs	r3, #6
 8001388:	e07a      	b.n	8001480 <commandRead+0x4d8>

	// Set Output
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_OUTPUT])) {
 800138a:	4b40      	ldr	r3, [pc, #256]	; (800148c <commandRead+0x4e4>)
 800138c:	69da      	ldr	r2, [r3, #28]
 800138e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001392:	4611      	mov	r1, r2
 8001394:	4618      	mov	r0, r3
 8001396:	f7fe ff1b 	bl	80001d0 <strcmp>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d112      	bne.n	80013c6 <commandRead+0x41e>
		result = sscanf( para, "%d",(int *)&(duty_cmd->sub_para_int));
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f103 0210 	add.w	r2, r3, #16
 80013a6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80013aa:	493a      	ldr	r1, [pc, #232]	; (8001494 <commandRead+0x4ec>)
 80013ac:	4618      	mov	r0, r3
 80013ae:	f012 f98b 	bl	80136c8 <siscanf>
 80013b2:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4

		if (1 != result) {
 80013b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d001      	beq.n	80013c2 <commandRead+0x41a>
			return CMD_ERROR;
 80013be:	230b      	movs	r3, #11
 80013c0:	e05e      	b.n	8001480 <commandRead+0x4d8>
		}

		return CMD_OUTPUT;
 80013c2:	2307      	movs	r3, #7
 80013c4:	e05c      	b.n	8001480 <commandRead+0x4d8>

	// Read Status
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_READ_STATUS])) {
 80013c6:	4b31      	ldr	r3, [pc, #196]	; (800148c <commandRead+0x4e4>)
 80013c8:	6a1a      	ldr	r2, [r3, #32]
 80013ca:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80013ce:	4611      	mov	r1, r2
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7fe fefd 	bl	80001d0 <strcmp>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d101      	bne.n	80013e0 <commandRead+0x438>
		return CMD_READ_STATUS;
 80013dc:	2308      	movs	r3, #8
 80013de:	e04f      	b.n	8001480 <commandRead+0x4d8>

	// Read Position
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_READ_POSITION])) {
 80013e0:	4b2a      	ldr	r3, [pc, #168]	; (800148c <commandRead+0x4e4>)
 80013e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013e4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80013e8:	4611      	mov	r1, r2
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7fe fef0 	bl	80001d0 <strcmp>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d101      	bne.n	80013fa <commandRead+0x452>
			return CMD_READ_POSITION;
 80013f6:	2309      	movs	r3, #9
 80013f8:	e042      	b.n	8001480 <commandRead+0x4d8>

	// Setting
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_SETTING])) {
 80013fa:	4b24      	ldr	r3, [pc, #144]	; (800148c <commandRead+0x4e4>)
 80013fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013fe:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001402:	4611      	mov	r1, r2
 8001404:	4618      	mov	r0, r3
 8001406:	f7fe fee3 	bl	80001d0 <strcmp>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d136      	bne.n	800147e <commandRead+0x4d6>
		int8_t mode_trajec;
		int8_t mode_coordinate;
		result = sscanf( para, "%d %d",
 8001410:	f107 0316 	add.w	r3, r7, #22
 8001414:	f107 0215 	add.w	r2, r7, #21
 8001418:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800141c:	491e      	ldr	r1, [pc, #120]	; (8001498 <commandRead+0x4f0>)
 800141e:	f012 f953 	bl	80136c8 <siscanf>
 8001422:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
						(int *)&mode_coordinate,
						(int *)&mode_trajec);

		if (2 != result) {
 8001426:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800142a:	2b02      	cmp	r3, #2
 800142c:	d001      	beq.n	8001432 <commandRead+0x48a>
			return CMD_ERROR;
 800142e:	230b      	movs	r3, #11
 8001430:	e026      	b.n	8001480 <commandRead+0x4d8>
		}

		if ( DUTY_COORDINATES_ABS == mode_coordinate) {
 8001432:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d103      	bne.n	8001442 <commandRead+0x49a>
			duty_cmd->coordinate_type = DUTY_COORDINATES_ABS;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2200      	movs	r2, #0
 800143e:	721a      	strb	r2, [r3, #8]
 8001440:	e009      	b.n	8001456 <commandRead+0x4ae>
		} else if ( DUTY_COORDINATES_REL == mode_coordinate) {
 8001442:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d103      	bne.n	8001452 <commandRead+0x4aa>
			duty_cmd->coordinate_type = DUTY_COORDINATES_REL;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2201      	movs	r2, #1
 800144e:	721a      	strb	r2, [r3, #8]
 8001450:	e001      	b.n	8001456 <commandRead+0x4ae>
		} else {
			return CMD_ERROR;
 8001452:	230b      	movs	r3, #11
 8001454:	e014      	b.n	8001480 <commandRead+0x4d8>
		}

		if ( DUTY_TRAJECTORY_LSPB == mode_trajec) {
 8001456:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d103      	bne.n	8001466 <commandRead+0x4be>
			duty_cmd->trajec_type = DUTY_TRAJECTORY_LSPB;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2200      	movs	r2, #0
 8001462:	731a      	strb	r2, [r3, #12]
 8001464:	e009      	b.n	800147a <commandRead+0x4d2>
		} else if ( DUTY_TRAJECTORY_SCURVE == mode_trajec) {
 8001466:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800146a:	2b01      	cmp	r3, #1
 800146c:	d103      	bne.n	8001476 <commandRead+0x4ce>
			duty_cmd->trajec_type = DUTY_TRAJECTORY_SCURVE;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2201      	movs	r2, #1
 8001472:	731a      	strb	r2, [r3, #12]
 8001474:	e001      	b.n	800147a <commandRead+0x4d2>
		} else {
			return CMD_ERROR;
 8001476:	230b      	movs	r3, #11
 8001478:	e002      	b.n	8001480 <commandRead+0x4d8>
		}
		return CMD_SETTING;
 800147a:	230a      	movs	r3, #10
 800147c:	e000      	b.n	8001480 <commandRead+0x4d8>

	// Error command
	} else {
		return CMD_ERROR;
 800147e:	230b      	movs	r3, #11
	}
}
 8001480:	4618      	mov	r0, r3
 8001482:	37a8      	adds	r7, #168	; 0xa8
 8001484:	46bd      	mov	sp, r7
 8001486:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800148a:	bf00      	nop
 800148c:	20000000 	.word	0x20000000
 8001490:	0801858c 	.word	0x0801858c
 8001494:	080185a0 	.word	0x080185a0
 8001498:	080185a4 	.word	0x080185a4

0800149c <commandReply>:

Robot_RespondTypedef	commandReply	(Robot_CommandTypedef cmd_type,
										DUTY_Command_TypeDef duty_cmd,
										uint8_t *detail) {
 800149c:	b082      	sub	sp, #8
 800149e:	b5b0      	push	{r4, r5, r7, lr}
 80014a0:	b0b6      	sub	sp, #216	; 0xd8
 80014a2:	af18      	add	r7, sp, #96	; 0x60
 80014a4:	4601      	mov	r1, r0
 80014a6:	f107 0088 	add.w	r0, r7, #136	; 0x88
 80014aa:	e880 000c 	stmia.w	r0, {r2, r3}
 80014ae:	460b      	mov	r3, r1
 80014b0:	71fb      	strb	r3, [r7, #7]
	Robot_RespondTypedef ret;

	switch(cmd_type) {
 80014b2:	79fb      	ldrb	r3, [r7, #7]
 80014b4:	2b0b      	cmp	r3, #11
 80014b6:	f200 80f2 	bhi.w	800169e <commandReply+0x202>
 80014ba:	a201      	add	r2, pc, #4	; (adr r2, 80014c0 <commandReply+0x24>)
 80014bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014c0:	080014f1 	.word	0x080014f1
 80014c4:	080014f1 	.word	0x080014f1
 80014c8:	080014f1 	.word	0x080014f1
 80014cc:	080014f1 	.word	0x080014f1
 80014d0:	080014f1 	.word	0x080014f1
 80014d4:	080014f1 	.word	0x080014f1
 80014d8:	080014f1 	.word	0x080014f1
 80014dc:	080014f9 	.word	0x080014f9
 80014e0:	08001563 	.word	0x08001563
 80014e4:	08001597 	.word	0x08001597
 80014e8:	080015c5 	.word	0x080015c5
 80014ec:	0800167f 	.word	0x0800167f
	case CMD_MOVE_HOME:
	case CMD_MOVE_LINE:
	case CMD_MOVE_CIRCLE:
	case CMD_MOVE_JOINT:
	case CMD_ROTATE_SINGLE:
		ret = RPD_DUTY;
 80014f0:	2309      	movs	r3, #9
 80014f2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		break;
 80014f6:	e0e1      	b.n	80016bc <commandReply+0x220>
	case CMD_OUTPUT:
		{
			if (1 == duty_cmd.sub_para_int) {
 80014f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d10d      	bne.n	800151c <commandReply+0x80>
				scaraSetOutput(1);
 8001500:	2001      	movs	r0, #1
 8001502:	f006 f87f 	bl	8007604 <scaraSetOutput>
				strcpy( (char *)detail, "Output ON");
 8001506:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800150a:	4971      	ldr	r1, [pc, #452]	; (80016d0 <commandReply+0x234>)
 800150c:	461a      	mov	r2, r3
 800150e:	460b      	mov	r3, r1
 8001510:	cb03      	ldmia	r3!, {r0, r1}
 8001512:	6010      	str	r0, [r2, #0]
 8001514:	6051      	str	r1, [r2, #4]
 8001516:	881b      	ldrh	r3, [r3, #0]
 8001518:	8113      	strh	r3, [r2, #8]
 800151a:	e01e      	b.n	800155a <commandReply+0xbe>
			} else if (0 == duty_cmd.sub_para_int) {
 800151c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001520:	2b00      	cmp	r3, #0
 8001522:	d10f      	bne.n	8001544 <commandReply+0xa8>
				scaraSetOutput(0);
 8001524:	2000      	movs	r0, #0
 8001526:	f006 f86d 	bl	8007604 <scaraSetOutput>
				strcpy( (char *)detail, "Output OFF");
 800152a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800152e:	4969      	ldr	r1, [pc, #420]	; (80016d4 <commandReply+0x238>)
 8001530:	461a      	mov	r2, r3
 8001532:	460b      	mov	r3, r1
 8001534:	cb03      	ldmia	r3!, {r0, r1}
 8001536:	6010      	str	r0, [r2, #0]
 8001538:	6051      	str	r1, [r2, #4]
 800153a:	8819      	ldrh	r1, [r3, #0]
 800153c:	789b      	ldrb	r3, [r3, #2]
 800153e:	8111      	strh	r1, [r2, #8]
 8001540:	7293      	strb	r3, [r2, #10]
 8001542:	e00a      	b.n	800155a <commandReply+0xbe>
			} else {
				strcpy( (char *)detail, "Wrong Value");
 8001544:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001548:	4a63      	ldr	r2, [pc, #396]	; (80016d8 <commandReply+0x23c>)
 800154a:	461c      	mov	r4, r3
 800154c:	4613      	mov	r3, r2
 800154e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001550:	6020      	str	r0, [r4, #0]
 8001552:	6061      	str	r1, [r4, #4]
 8001554:	60a2      	str	r2, [r4, #8]
				return RPD_ERROR;
 8001556:	2307      	movs	r3, #7
 8001558:	e0b2      	b.n	80016c0 <commandReply+0x224>
			}
			ret = RPD_OK;
 800155a:	2308      	movs	r3, #8
 800155c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
		break;
 8001560:	e0ac      	b.n	80016bc <commandReply+0x220>
	case CMD_READ_STATUS:
		{
			SCARA_ModeTypeDef		current_mode;
			SCARA_DutyStateTypeDef 	current_state;
			current_mode	 = scaraGetMode();
 8001562:	f006 f891 	bl	8007688 <scaraGetMode>
 8001566:	4603      	mov	r3, r0
 8001568:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
			current_state	 = scaraGetDutyState();
 800156c:	f006 f898 	bl	80076a0 <scaraGetDutyState>
 8001570:	4603      	mov	r3, r0
 8001572:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
			if ( SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_state) {
 8001576:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800157a:	2b02      	cmp	r3, #2
 800157c:	d107      	bne.n	800158e <commandReply+0xf2>
 800157e:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8001582:	2b00      	cmp	r3, #0
 8001584:	d103      	bne.n	800158e <commandReply+0xf2>
				ret = RPD_IDLE;
 8001586:	2300      	movs	r3, #0
 8001588:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			} else {
				ret = RPD_BUSY;
			}
		}
		break;
 800158c:	e096      	b.n	80016bc <commandReply+0x220>
				ret = RPD_BUSY;
 800158e:	2301      	movs	r3, #1
 8001590:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		break;
 8001594:	e092      	b.n	80016bc <commandReply+0x220>

	case CMD_READ_POSITION:
		{
			SCARA_PositionTypeDef position;
			scaraGetPosition(&position);
 8001596:	f107 0308 	add.w	r3, r7, #8
 800159a:	4618      	mov	r0, r3
 800159c:	f006 f854 	bl	8007648 <scaraGetPosition>
			scaraPosition2String((char *)detail, position);
 80015a0:	4668      	mov	r0, sp
 80015a2:	f107 0310 	add.w	r3, r7, #16
 80015a6:	2260      	movs	r2, #96	; 0x60
 80015a8:	4619      	mov	r1, r3
 80015aa:	f011 f911 	bl	80127d0 <memcpy>
 80015ae:	f107 0308 	add.w	r3, r7, #8
 80015b2:	cb0c      	ldmia	r3, {r2, r3}
 80015b4:	f8d7 0190 	ldr.w	r0, [r7, #400]	; 0x190
 80015b8:	f006 f8b6 	bl	8007728 <scaraPosition2String>
			ret =  RPD_POSITION;
 80015bc:	2302      	movs	r3, #2
 80015be:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
		break;
 80015c2:	e07b      	b.n	80016bc <commandReply+0x220>

	case CMD_SETTING:
		if ( DUTY_COORDINATES_ABS == duty_cmd.coordinate_type) {
 80015c4:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d10a      	bne.n	80015e2 <commandReply+0x146>
			strcpy( (char *)detail, "Absolute.");
 80015cc:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80015d0:	4942      	ldr	r1, [pc, #264]	; (80016dc <commandReply+0x240>)
 80015d2:	461a      	mov	r2, r3
 80015d4:	460b      	mov	r3, r1
 80015d6:	cb03      	ldmia	r3!, {r0, r1}
 80015d8:	6010      	str	r0, [r2, #0]
 80015da:	6051      	str	r1, [r2, #4]
 80015dc:	881b      	ldrh	r3, [r3, #0]
 80015de:	8113      	strh	r3, [r2, #8]
 80015e0:	e017      	b.n	8001612 <commandReply+0x176>
		} else if ( DUTY_COORDINATES_REL == duty_cmd.coordinate_type) {
 80015e2:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d10a      	bne.n	8001600 <commandReply+0x164>
			strcpy( (char *)detail, "Relative.");
 80015ea:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80015ee:	493c      	ldr	r1, [pc, #240]	; (80016e0 <commandReply+0x244>)
 80015f0:	461a      	mov	r2, r3
 80015f2:	460b      	mov	r3, r1
 80015f4:	cb03      	ldmia	r3!, {r0, r1}
 80015f6:	6010      	str	r0, [r2, #0]
 80015f8:	6051      	str	r1, [r2, #4]
 80015fa:	881b      	ldrh	r3, [r3, #0]
 80015fc:	8113      	strh	r3, [r2, #8]
 80015fe:	e008      	b.n	8001612 <commandReply+0x176>
		} else {
			strcat((char *)detail, DETAIL_STATUS[SCARA_STATUS_ERROR_COORDINATE]);
 8001600:	4b38      	ldr	r3, [pc, #224]	; (80016e4 <commandReply+0x248>)
 8001602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001604:	4619      	mov	r1, r3
 8001606:	f8d7 0190 	ldr.w	r0, [r7, #400]	; 0x190
 800160a:	f012 f889 	bl	8013720 <strcat>
			return RPD_ERROR;
 800160e:	2307      	movs	r3, #7
 8001610:	e056      	b.n	80016c0 <commandReply+0x224>
		}

		if ( DUTY_TRAJECTORY_LSPB == duty_cmd.trajec_type) {
 8001612:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8001616:	2b00      	cmp	r3, #0
 8001618:	d10e      	bne.n	8001638 <commandReply+0x19c>
			strcat((char *)detail, " LSPB");
 800161a:	f8d7 0190 	ldr.w	r0, [r7, #400]	; 0x190
 800161e:	f7fe fde1 	bl	80001e4 <strlen>
 8001622:	4603      	mov	r3, r0
 8001624:	461a      	mov	r2, r3
 8001626:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800162a:	4413      	add	r3, r2
 800162c:	4a2e      	ldr	r2, [pc, #184]	; (80016e8 <commandReply+0x24c>)
 800162e:	6810      	ldr	r0, [r2, #0]
 8001630:	6018      	str	r0, [r3, #0]
 8001632:	8892      	ldrh	r2, [r2, #4]
 8001634:	809a      	strh	r2, [r3, #4]
 8001636:	e01e      	b.n	8001676 <commandReply+0x1da>
		} else if ( DUTY_TRAJECTORY_SCURVE == duty_cmd.trajec_type) {
 8001638:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 800163c:	2b01      	cmp	r3, #1
 800163e:	d111      	bne.n	8001664 <commandReply+0x1c8>
			strcat((char *)detail, " S-curve");
 8001640:	f8d7 0190 	ldr.w	r0, [r7, #400]	; 0x190
 8001644:	f7fe fdce 	bl	80001e4 <strlen>
 8001648:	4603      	mov	r3, r0
 800164a:	461a      	mov	r2, r3
 800164c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001650:	4413      	add	r3, r2
 8001652:	4926      	ldr	r1, [pc, #152]	; (80016ec <commandReply+0x250>)
 8001654:	461a      	mov	r2, r3
 8001656:	460b      	mov	r3, r1
 8001658:	cb03      	ldmia	r3!, {r0, r1}
 800165a:	6010      	str	r0, [r2, #0]
 800165c:	6051      	str	r1, [r2, #4]
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	7213      	strb	r3, [r2, #8]
 8001662:	e008      	b.n	8001676 <commandReply+0x1da>
		} else {
			strcat((char *)detail, DETAIL_STATUS[SCARA_STATUS_ERROR_TRAJECTORY]);
 8001664:	4b1f      	ldr	r3, [pc, #124]	; (80016e4 <commandReply+0x248>)
 8001666:	695b      	ldr	r3, [r3, #20]
 8001668:	4619      	mov	r1, r3
 800166a:	f8d7 0190 	ldr.w	r0, [r7, #400]	; 0x190
 800166e:	f012 f857 	bl	8013720 <strcat>
			return RPD_ERROR;
 8001672:	2307      	movs	r3, #7
 8001674:	e024      	b.n	80016c0 <commandReply+0x224>
		}
		ret = RPD_OK;
 8001676:	2308      	movs	r3, #8
 8001678:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		break;
 800167c:	e01e      	b.n	80016bc <commandReply+0x220>
	case CMD_ERROR:
		strcpy( (char *)detail, "Check parameters");
 800167e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001682:	4a1b      	ldr	r2, [pc, #108]	; (80016f0 <commandReply+0x254>)
 8001684:	461d      	mov	r5, r3
 8001686:	4614      	mov	r4, r2
 8001688:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800168a:	6028      	str	r0, [r5, #0]
 800168c:	6069      	str	r1, [r5, #4]
 800168e:	60aa      	str	r2, [r5, #8]
 8001690:	60eb      	str	r3, [r5, #12]
 8001692:	7823      	ldrb	r3, [r4, #0]
 8001694:	742b      	strb	r3, [r5, #16]
		ret = RPD_ERROR;
 8001696:	2307      	movs	r3, #7
 8001698:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		break;
 800169c:	e00e      	b.n	80016bc <commandReply+0x220>
	default:
		strcpy( (char *)detail, "Check parameters");
 800169e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80016a2:	4a13      	ldr	r2, [pc, #76]	; (80016f0 <commandReply+0x254>)
 80016a4:	461d      	mov	r5, r3
 80016a6:	4614      	mov	r4, r2
 80016a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016aa:	6028      	str	r0, [r5, #0]
 80016ac:	6069      	str	r1, [r5, #4]
 80016ae:	60aa      	str	r2, [r5, #8]
 80016b0:	60eb      	str	r3, [r5, #12]
 80016b2:	7823      	ldrb	r3, [r4, #0]
 80016b4:	742b      	strb	r3, [r5, #16]
		ret = RPD_ERROR;
 80016b6:	2307      	movs	r3, #7
 80016b8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	}
	return ret;
 80016bc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3778      	adds	r7, #120	; 0x78
 80016c4:	46bd      	mov	sp, r7
 80016c6:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80016ca:	b002      	add	sp, #8
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	080185ac 	.word	0x080185ac
 80016d4:	080185b8 	.word	0x080185b8
 80016d8:	080185c4 	.word	0x080185c4
 80016dc:	080185d0 	.word	0x080185d0
 80016e0:	080185dc 	.word	0x080185dc
 80016e4:	20000c80 	.word	0x20000c80
 80016e8:	080185e8 	.word	0x080185e8
 80016ec:	080185f0 	.word	0x080185f0
 80016f0:	080185fc 	.word	0x080185fc

080016f4 <commandRespond>:


int32_t				commandRespond	(Robot_RespondTypedef rpd,
										int32_t id_command,
										char *detail,
										char *respond) {
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b088      	sub	sp, #32
 80016f8:	af02      	add	r7, sp, #8
 80016fa:	60b9      	str	r1, [r7, #8]
 80016fc:	607a      	str	r2, [r7, #4]
 80016fe:	603b      	str	r3, [r7, #0]
 8001700:	4603      	mov	r3, r0
 8001702:	73fb      	strb	r3, [r7, #15]
	int out_lenght;
	switch(rpd) {
 8001704:	7bfb      	ldrb	r3, [r7, #15]
 8001706:	2b08      	cmp	r3, #8
 8001708:	d836      	bhi.n	8001778 <commandRespond+0x84>
 800170a:	a201      	add	r2, pc, #4	; (adr r2, 8001710 <commandRespond+0x1c>)
 800170c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001710:	08001735 	.word	0x08001735
 8001714:	08001735 	.word	0x08001735
 8001718:	0800175b 	.word	0x0800175b
 800171c:	0800175b 	.word	0x0800175b
 8001720:	0800175b 	.word	0x0800175b
 8001724:	0800175b 	.word	0x0800175b
 8001728:	0800175b 	.word	0x0800175b
 800172c:	0800175b 	.word	0x0800175b
 8001730:	0800175b 	.word	0x0800175b
	case RPD_IDLE:
	case RPD_BUSY:
		{
			uint8_t		isScanLitmit;
			isScanLitmit = scaraIsScanLimit();
 8001734:	f005 ffc0 	bl	80076b8 <scaraIsScanLimit>
 8001738:	4603      	mov	r3, r0
 800173a:	74fb      	strb	r3, [r7, #19]
			out_lenght = snprintf( (char *)respond,
 800173c:	7bfb      	ldrb	r3, [r7, #15]
 800173e:	4a12      	ldr	r2, [pc, #72]	; (8001788 <commandRespond+0x94>)
 8001740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001744:	7cfa      	ldrb	r2, [r7, #19]
 8001746:	9201      	str	r2, [sp, #4]
 8001748:	9300      	str	r3, [sp, #0]
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	4a0f      	ldr	r2, [pc, #60]	; (800178c <commandRespond+0x98>)
 800174e:	2114      	movs	r1, #20
 8001750:	6838      	ldr	r0, [r7, #0]
 8001752:	f011 ff65 	bl	8013620 <sniprintf>
 8001756:	6178      	str	r0, [r7, #20]
									"%d %s %d",
									(int)id_command,
									ROBOTRESPOND[rpd],
									(int)isScanLitmit);
		}
		break;
 8001758:	e010      	b.n	800177c <commandRespond+0x88>
	case RPD_STOP:
	case RPD_ERROR:
	case RPD_OK:

		{
			out_lenght = snprintf( (char *)respond,
 800175a:	7bfb      	ldrb	r3, [r7, #15]
 800175c:	4a0a      	ldr	r2, [pc, #40]	; (8001788 <commandRespond+0x94>)
 800175e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	9201      	str	r2, [sp, #4]
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	4a09      	ldr	r2, [pc, #36]	; (8001790 <commandRespond+0x9c>)
 800176c:	2191      	movs	r1, #145	; 0x91
 800176e:	6838      	ldr	r0, [r7, #0]
 8001770:	f011 ff56 	bl	8013620 <sniprintf>
 8001774:	6178      	str	r0, [r7, #20]
									"%d %s %s",
									(int)id_command,
									ROBOTRESPOND[rpd],
									(char *)detail);
		}
		break;
 8001776:	e001      	b.n	800177c <commandRespond+0x88>
	default:
		out_lenght = 0;
 8001778:	2300      	movs	r3, #0
 800177a:	617b      	str	r3, [r7, #20]
	}

	return (int32_t)out_lenght;
 800177c:	697b      	ldr	r3, [r7, #20]
}
 800177e:	4618      	mov	r0, r3
 8001780:	3718      	adds	r7, #24
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	2000002c 	.word	0x2000002c
 800178c:	08018610 	.word	0x08018610
 8001790:	0801861c 	.word	0x0801861c

08001794 <LOG_REPORT>:
 *  line		: line code number
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t LOG_REPORT(char *message, uint16_t line) {
 8001794:	b580      	push	{r7, lr}
 8001796:	b096      	sub	sp, #88	; 0x58
 8001798:	af02      	add	r7, sp, #8
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	460b      	mov	r3, r1
 800179e:	807b      	strh	r3, [r7, #2]
	uint8_t temp_buff[64];
	int32_t len;

	len = snprintf((char*)temp_buff, 63, "LINE:%d, %s\n", line, message);
 80017a0:	887a      	ldrh	r2, [r7, #2]
 80017a2:	f107 0008 	add.w	r0, r7, #8
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	9300      	str	r3, [sp, #0]
 80017aa:	4613      	mov	r3, r2
 80017ac:	4a17      	ldr	r2, [pc, #92]	; (800180c <LOG_REPORT+0x78>)
 80017ae:	213f      	movs	r1, #63	; 0x3f
 80017b0:	f011 ff36 	bl	8013620 <sniprintf>
 80017b4:	64f8      	str	r0, [r7, #76]	; 0x4c
	if (-1 == len) {
 80017b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017bc:	d101      	bne.n	80017c2 <LOG_REPORT+0x2e>
		return FALSE;
 80017be:	2300      	movs	r3, #0
 80017c0:	e01f      	b.n	8001802 <LOG_REPORT+0x6e>
	}
	ringBuff_PushArray(&uart_tx_ringbuff, temp_buff, len);
 80017c2:	f107 0308 	add.w	r3, r7, #8
 80017c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80017c8:	4619      	mov	r1, r3
 80017ca:	4811      	ldr	r0, [pc, #68]	; (8001810 <LOG_REPORT+0x7c>)
 80017cc:	f001 fe3b 	bl	8003446 <ringBuff_PushArray>
	if (HAL_DMA_GetState(&hdma_uart4_tx) == HAL_DMA_STATE_BUSY) {
 80017d0:	4810      	ldr	r0, [pc, #64]	; (8001814 <LOG_REPORT+0x80>)
 80017d2:	f006 ff3f 	bl	8008654 <HAL_DMA_GetState>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d101      	bne.n	80017e0 <LOG_REPORT+0x4c>
		return TRUE;
 80017dc:	2301      	movs	r3, #1
 80017de:	e010      	b.n	8001802 <LOG_REPORT+0x6e>
	}// dma busy
	uint16_t size_dma;
	size_dma = ringBuff_PopArray(&uart_tx_ringbuff, log_uart_dma_buff, LOG_BUFFER_SIZE);
 80017e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017e4:	490c      	ldr	r1, [pc, #48]	; (8001818 <LOG_REPORT+0x84>)
 80017e6:	480a      	ldr	r0, [pc, #40]	; (8001810 <LOG_REPORT+0x7c>)
 80017e8:	f001 fe55 	bl	8003496 <ringBuff_PopArray>
 80017ec:	4603      	mov	r3, r0
 80017ee:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	HAL_UART_Transmit_DMA(&huart4, log_uart_dma_buff, size_dma);
 80017f2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80017f6:	461a      	mov	r2, r3
 80017f8:	4907      	ldr	r1, [pc, #28]	; (8001818 <LOG_REPORT+0x84>)
 80017fa:	4808      	ldr	r0, [pc, #32]	; (800181c <LOG_REPORT+0x88>)
 80017fc:	f009 fb3c 	bl	800ae78 <HAL_UART_Transmit_DMA>
	return TRUE;
 8001800:	2301      	movs	r3, #1
}
 8001802:	4618      	mov	r0, r3
 8001804:	3750      	adds	r7, #80	; 0x50
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	08018628 	.word	0x08018628
 8001810:	2000086c 	.word	0x2000086c
 8001814:	20005e80 	.word	0x20005e80
 8001818:	200051dc 	.word	0x200051dc
 800181c:	20005e40 	.word	0x20005e40

08001820 <double2string>:

int32_t	double2string( uint8_t *result, double value, uint8_t precision) {
 8001820:	b5b0      	push	{r4, r5, r7, lr}
 8001822:	b090      	sub	sp, #64	; 0x40
 8001824:	af00      	add	r7, sp, #0
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	ed87 0b00 	vstr	d0, [r7]
 800182c:	460b      	mov	r3, r1
 800182e:	72fb      	strb	r3, [r7, #11]
	uint8_t le[6];
	int8_t sign;
	double temp1, temp2;
	int32_t index;

	if((precision < 0) || (6 < precision)) {
 8001830:	7afb      	ldrb	r3, [r7, #11]
 8001832:	2b06      	cmp	r3, #6
 8001834:	d901      	bls.n	800183a <double2string+0x1a>
		precision = 6;
 8001836:	2306      	movs	r3, #6
 8001838:	72fb      	strb	r3, [r7, #11]
	}

	if(value < 0) {
 800183a:	f04f 0200 	mov.w	r2, #0
 800183e:	f04f 0300 	mov.w	r3, #0
 8001842:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001846:	f7ff f959 	bl	8000afc <__aeabi_dcmplt>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d003      	beq.n	8001858 <double2string+0x38>
		sign = -1;
 8001850:	23ff      	movs	r3, #255	; 0xff
 8001852:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001856:	e002      	b.n	800185e <double2string+0x3e>
	} else {
		sign = 1;
 8001858:	2301      	movs	r3, #1
 800185a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}
	value = value*sign;
 800185e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8001862:	4618      	mov	r0, r3
 8001864:	f7fe fe6e 	bl	8000544 <__aeabi_i2d>
 8001868:	4603      	mov	r3, r0
 800186a:	460c      	mov	r4, r1
 800186c:	461a      	mov	r2, r3
 800186e:	4623      	mov	r3, r4
 8001870:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001874:	f7fe fed0 	bl	8000618 <__aeabi_dmul>
 8001878:	4603      	mov	r3, r0
 800187a:	460c      	mov	r4, r1
 800187c:	e9c7 3400 	strd	r3, r4, [r7]

	if (value > 10000.0f) {
 8001880:	a307      	add	r3, pc, #28	; (adr r3, 80018a0 <double2string+0x80>)
 8001882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001886:	e9d7 0100 	ldrd	r0, r1, [r7]
 800188a:	f7ff f955 	bl	8000b38 <__aeabi_dcmpgt>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d009      	beq.n	80018a8 <double2string+0x88>
		return -1;
 8001894:	f04f 33ff 	mov.w	r3, #4294967295
 8001898:	e265      	b.n	8001d66 <double2string+0x546>
 800189a:	bf00      	nop
 800189c:	f3af 8000 	nop.w
 80018a0:	00000000 	.word	0x00000000
 80018a4:	40c38800 	.word	0x40c38800
	}

	nguyen[0] 	= (int32_t)value/1000;
 80018a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80018ac:	f7ff f964 	bl	8000b78 <__aeabi_d2iz>
 80018b0:	4603      	mov	r3, r0
 80018b2:	4acf      	ldr	r2, [pc, #828]	; (8001bf0 <double2string+0x3d0>)
 80018b4:	fb82 1203 	smull	r1, r2, r2, r3
 80018b8:	1192      	asrs	r2, r2, #6
 80018ba:	17db      	asrs	r3, r3, #31
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	773b      	strb	r3, [r7, #28]
	nguyen[1]	= (int32_t)value/100 - nguyen[0]*10;
 80018c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80018c6:	f7ff f957 	bl	8000b78 <__aeabi_d2iz>
 80018ca:	4603      	mov	r3, r0
 80018cc:	4ac9      	ldr	r2, [pc, #804]	; (8001bf4 <double2string+0x3d4>)
 80018ce:	fb82 1203 	smull	r1, r2, r2, r3
 80018d2:	1152      	asrs	r2, r2, #5
 80018d4:	17db      	asrs	r3, r3, #31
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	b2da      	uxtb	r2, r3
 80018da:	7f3b      	ldrb	r3, [r7, #28]
 80018dc:	4619      	mov	r1, r3
 80018de:	0149      	lsls	r1, r1, #5
 80018e0:	1ac9      	subs	r1, r1, r3
 80018e2:	0089      	lsls	r1, r1, #2
 80018e4:	1acb      	subs	r3, r1, r3
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	4413      	add	r3, r2
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	777b      	strb	r3, [r7, #29]
	nguyen[2]	= (int32_t)value/10 - nguyen[0]*100 - nguyen[1]*10;
 80018f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80018f4:	f7ff f940 	bl	8000b78 <__aeabi_d2iz>
 80018f8:	4603      	mov	r3, r0
 80018fa:	4abf      	ldr	r2, [pc, #764]	; (8001bf8 <double2string+0x3d8>)
 80018fc:	fb82 1203 	smull	r1, r2, r2, r3
 8001900:	1092      	asrs	r2, r2, #2
 8001902:	17db      	asrs	r3, r3, #31
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	b2da      	uxtb	r2, r3
 8001908:	7f7b      	ldrb	r3, [r7, #29]
 800190a:	4619      	mov	r1, r3
 800190c:	0149      	lsls	r1, r1, #5
 800190e:	1ac9      	subs	r1, r1, r3
 8001910:	0089      	lsls	r1, r1, #2
 8001912:	1acb      	subs	r3, r1, r3
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	b2d9      	uxtb	r1, r3
 8001918:	7f3b      	ldrb	r3, [r7, #28]
 800191a:	4618      	mov	r0, r3
 800191c:	0080      	lsls	r0, r0, #2
 800191e:	4418      	add	r0, r3
 8001920:	00c0      	lsls	r0, r0, #3
 8001922:	1ac3      	subs	r3, r0, r3
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	b2db      	uxtb	r3, r3
 8001928:	440b      	add	r3, r1
 800192a:	b2db      	uxtb	r3, r3
 800192c:	4413      	add	r3, r2
 800192e:	b2db      	uxtb	r3, r3
 8001930:	77bb      	strb	r3, [r7, #30]
	nguyen[3]	= (int32_t)value - nguyen[0]*1000 - nguyen[1]*100 - nguyen[2]*10;
 8001932:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001936:	f7ff f91f 	bl	8000b78 <__aeabi_d2iz>
 800193a:	4603      	mov	r3, r0
 800193c:	b2da      	uxtb	r2, r3
 800193e:	7f7b      	ldrb	r3, [r7, #29]
 8001940:	4619      	mov	r1, r3
 8001942:	0089      	lsls	r1, r1, #2
 8001944:	4419      	add	r1, r3
 8001946:	00c9      	lsls	r1, r1, #3
 8001948:	1acb      	subs	r3, r1, r3
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	b2d9      	uxtb	r1, r3
 800194e:	7f3b      	ldrb	r3, [r7, #28]
 8001950:	4618      	mov	r0, r3
 8001952:	0040      	lsls	r0, r0, #1
 8001954:	4403      	add	r3, r0
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	b2db      	uxtb	r3, r3
 800195a:	440b      	add	r3, r1
 800195c:	b2db      	uxtb	r3, r3
 800195e:	4413      	add	r3, r2
 8001960:	b2da      	uxtb	r2, r3
 8001962:	7fbb      	ldrb	r3, [r7, #30]
 8001964:	4619      	mov	r1, r3
 8001966:	0149      	lsls	r1, r1, #5
 8001968:	1ac9      	subs	r1, r1, r3
 800196a:	0089      	lsls	r1, r1, #2
 800196c:	1acb      	subs	r3, r1, r3
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	b2db      	uxtb	r3, r3
 8001972:	4413      	add	r3, r2
 8001974:	b2db      	uxtb	r3, r3
 8001976:	77fb      	strb	r3, [r7, #31]

	temp1	= (value - nguyen[0]*1000 - nguyen[1]*100 - nguyen[2]*10 - nguyen[3])*1000;
 8001978:	7f3b      	ldrb	r3, [r7, #28]
 800197a:	461a      	mov	r2, r3
 800197c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001980:	fb03 f302 	mul.w	r3, r3, r2
 8001984:	4618      	mov	r0, r3
 8001986:	f7fe fddd 	bl	8000544 <__aeabi_i2d>
 800198a:	4603      	mov	r3, r0
 800198c:	460c      	mov	r4, r1
 800198e:	461a      	mov	r2, r3
 8001990:	4623      	mov	r3, r4
 8001992:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001996:	f7fe fc87 	bl	80002a8 <__aeabi_dsub>
 800199a:	4603      	mov	r3, r0
 800199c:	460c      	mov	r4, r1
 800199e:	4625      	mov	r5, r4
 80019a0:	461c      	mov	r4, r3
 80019a2:	7f7b      	ldrb	r3, [r7, #29]
 80019a4:	461a      	mov	r2, r3
 80019a6:	2364      	movs	r3, #100	; 0x64
 80019a8:	fb03 f302 	mul.w	r3, r3, r2
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7fe fdc9 	bl	8000544 <__aeabi_i2d>
 80019b2:	4602      	mov	r2, r0
 80019b4:	460b      	mov	r3, r1
 80019b6:	4620      	mov	r0, r4
 80019b8:	4629      	mov	r1, r5
 80019ba:	f7fe fc75 	bl	80002a8 <__aeabi_dsub>
 80019be:	4603      	mov	r3, r0
 80019c0:	460c      	mov	r4, r1
 80019c2:	4625      	mov	r5, r4
 80019c4:	461c      	mov	r4, r3
 80019c6:	7fbb      	ldrb	r3, [r7, #30]
 80019c8:	461a      	mov	r2, r3
 80019ca:	4613      	mov	r3, r2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	4413      	add	r3, r2
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7fe fdb6 	bl	8000544 <__aeabi_i2d>
 80019d8:	4602      	mov	r2, r0
 80019da:	460b      	mov	r3, r1
 80019dc:	4620      	mov	r0, r4
 80019de:	4629      	mov	r1, r5
 80019e0:	f7fe fc62 	bl	80002a8 <__aeabi_dsub>
 80019e4:	4603      	mov	r3, r0
 80019e6:	460c      	mov	r4, r1
 80019e8:	4625      	mov	r5, r4
 80019ea:	461c      	mov	r4, r3
 80019ec:	7ffb      	ldrb	r3, [r7, #31]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7fe fda8 	bl	8000544 <__aeabi_i2d>
 80019f4:	4602      	mov	r2, r0
 80019f6:	460b      	mov	r3, r1
 80019f8:	4620      	mov	r0, r4
 80019fa:	4629      	mov	r1, r5
 80019fc:	f7fe fc54 	bl	80002a8 <__aeabi_dsub>
 8001a00:	4603      	mov	r3, r0
 8001a02:	460c      	mov	r4, r1
 8001a04:	4618      	mov	r0, r3
 8001a06:	4621      	mov	r1, r4
 8001a08:	f04f 0200 	mov.w	r2, #0
 8001a0c:	4b7b      	ldr	r3, [pc, #492]	; (8001bfc <double2string+0x3dc>)
 8001a0e:	f7fe fe03 	bl	8000618 <__aeabi_dmul>
 8001a12:	4603      	mov	r3, r0
 8001a14:	460c      	mov	r4, r1
 8001a16:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	le[0] 	= (int32_t)temp1/100;
 8001a1a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001a1e:	f7ff f8ab 	bl	8000b78 <__aeabi_d2iz>
 8001a22:	4603      	mov	r3, r0
 8001a24:	4a73      	ldr	r2, [pc, #460]	; (8001bf4 <double2string+0x3d4>)
 8001a26:	fb82 1203 	smull	r1, r2, r2, r3
 8001a2a:	1152      	asrs	r2, r2, #5
 8001a2c:	17db      	asrs	r3, r3, #31
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	753b      	strb	r3, [r7, #20]
	le[1] 	= (int32_t)temp1/10 - le[0]*10;
 8001a34:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001a38:	f7ff f89e 	bl	8000b78 <__aeabi_d2iz>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	4a6e      	ldr	r2, [pc, #440]	; (8001bf8 <double2string+0x3d8>)
 8001a40:	fb82 1203 	smull	r1, r2, r2, r3
 8001a44:	1092      	asrs	r2, r2, #2
 8001a46:	17db      	asrs	r3, r3, #31
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	b2da      	uxtb	r2, r3
 8001a4c:	7d3b      	ldrb	r3, [r7, #20]
 8001a4e:	4619      	mov	r1, r3
 8001a50:	0149      	lsls	r1, r1, #5
 8001a52:	1ac9      	subs	r1, r1, r3
 8001a54:	0089      	lsls	r1, r1, #2
 8001a56:	1acb      	subs	r3, r1, r3
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	4413      	add	r3, r2
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	757b      	strb	r3, [r7, #21]
	le[2]	= (int32_t)temp1 - le[0]*100 - le[1]*10;
 8001a62:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001a66:	f7ff f887 	bl	8000b78 <__aeabi_d2iz>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	b2da      	uxtb	r2, r3
 8001a6e:	7d7b      	ldrb	r3, [r7, #21]
 8001a70:	4619      	mov	r1, r3
 8001a72:	0149      	lsls	r1, r1, #5
 8001a74:	1ac9      	subs	r1, r1, r3
 8001a76:	0089      	lsls	r1, r1, #2
 8001a78:	1acb      	subs	r3, r1, r3
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	b2d9      	uxtb	r1, r3
 8001a7e:	7d3b      	ldrb	r3, [r7, #20]
 8001a80:	4618      	mov	r0, r3
 8001a82:	0080      	lsls	r0, r0, #2
 8001a84:	4418      	add	r0, r3
 8001a86:	00c0      	lsls	r0, r0, #3
 8001a88:	1ac3      	subs	r3, r0, r3
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	440b      	add	r3, r1
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	4413      	add	r3, r2
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	75bb      	strb	r3, [r7, #22]

	temp2	= (temp1 - le[0]*100 - le[1]*10 - le[2])*1000;
 8001a98:	7d3b      	ldrb	r3, [r7, #20]
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	2364      	movs	r3, #100	; 0x64
 8001a9e:	fb03 f302 	mul.w	r3, r3, r2
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7fe fd4e 	bl	8000544 <__aeabi_i2d>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	460c      	mov	r4, r1
 8001aac:	461a      	mov	r2, r3
 8001aae:	4623      	mov	r3, r4
 8001ab0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001ab4:	f7fe fbf8 	bl	80002a8 <__aeabi_dsub>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	460c      	mov	r4, r1
 8001abc:	4625      	mov	r5, r4
 8001abe:	461c      	mov	r4, r3
 8001ac0:	7d7b      	ldrb	r3, [r7, #21]
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	4413      	add	r3, r2
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7fe fd39 	bl	8000544 <__aeabi_i2d>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	4620      	mov	r0, r4
 8001ad8:	4629      	mov	r1, r5
 8001ada:	f7fe fbe5 	bl	80002a8 <__aeabi_dsub>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	460c      	mov	r4, r1
 8001ae2:	4625      	mov	r5, r4
 8001ae4:	461c      	mov	r4, r3
 8001ae6:	7dbb      	ldrb	r3, [r7, #22]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7fe fd2b 	bl	8000544 <__aeabi_i2d>
 8001aee:	4602      	mov	r2, r0
 8001af0:	460b      	mov	r3, r1
 8001af2:	4620      	mov	r0, r4
 8001af4:	4629      	mov	r1, r5
 8001af6:	f7fe fbd7 	bl	80002a8 <__aeabi_dsub>
 8001afa:	4603      	mov	r3, r0
 8001afc:	460c      	mov	r4, r1
 8001afe:	4618      	mov	r0, r3
 8001b00:	4621      	mov	r1, r4
 8001b02:	f04f 0200 	mov.w	r2, #0
 8001b06:	4b3d      	ldr	r3, [pc, #244]	; (8001bfc <double2string+0x3dc>)
 8001b08:	f7fe fd86 	bl	8000618 <__aeabi_dmul>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	460c      	mov	r4, r1
 8001b10:	e9c7 3408 	strd	r3, r4, [r7, #32]
	le[3] 	= (int32_t)temp2/100;
 8001b14:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001b18:	f7ff f82e 	bl	8000b78 <__aeabi_d2iz>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	4a35      	ldr	r2, [pc, #212]	; (8001bf4 <double2string+0x3d4>)
 8001b20:	fb82 1203 	smull	r1, r2, r2, r3
 8001b24:	1152      	asrs	r2, r2, #5
 8001b26:	17db      	asrs	r3, r3, #31
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	75fb      	strb	r3, [r7, #23]
	le[4] 	= (int32_t)temp2/10 - le[3]*10;
 8001b2e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001b32:	f7ff f821 	bl	8000b78 <__aeabi_d2iz>
 8001b36:	4603      	mov	r3, r0
 8001b38:	4a2f      	ldr	r2, [pc, #188]	; (8001bf8 <double2string+0x3d8>)
 8001b3a:	fb82 1203 	smull	r1, r2, r2, r3
 8001b3e:	1092      	asrs	r2, r2, #2
 8001b40:	17db      	asrs	r3, r3, #31
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	b2da      	uxtb	r2, r3
 8001b46:	7dfb      	ldrb	r3, [r7, #23]
 8001b48:	4619      	mov	r1, r3
 8001b4a:	0149      	lsls	r1, r1, #5
 8001b4c:	1ac9      	subs	r1, r1, r3
 8001b4e:	0089      	lsls	r1, r1, #2
 8001b50:	1acb      	subs	r3, r1, r3
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	4413      	add	r3, r2
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	763b      	strb	r3, [r7, #24]
	le[5]	= (int32_t)temp2 - le[3]*100 - le[4]*10;
 8001b5c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001b60:	f7ff f80a 	bl	8000b78 <__aeabi_d2iz>
 8001b64:	4603      	mov	r3, r0
 8001b66:	b2da      	uxtb	r2, r3
 8001b68:	7e3b      	ldrb	r3, [r7, #24]
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	0149      	lsls	r1, r1, #5
 8001b6e:	1ac9      	subs	r1, r1, r3
 8001b70:	0089      	lsls	r1, r1, #2
 8001b72:	1acb      	subs	r3, r1, r3
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	b2d9      	uxtb	r1, r3
 8001b78:	7dfb      	ldrb	r3, [r7, #23]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	0080      	lsls	r0, r0, #2
 8001b7e:	4418      	add	r0, r3
 8001b80:	00c0      	lsls	r0, r0, #3
 8001b82:	1ac3      	subs	r3, r0, r3
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	440b      	add	r3, r1
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	4413      	add	r3, r2
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	767b      	strb	r3, [r7, #25]
	// Rounding
	if ((temp2 - le[3]*1000 - le[4]*100 - le[5]) >= 0.5) {
 8001b92:	7dfb      	ldrb	r3, [r7, #23]
 8001b94:	461a      	mov	r2, r3
 8001b96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b9a:	fb03 f302 	mul.w	r3, r3, r2
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7fe fcd0 	bl	8000544 <__aeabi_i2d>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	460c      	mov	r4, r1
 8001ba8:	461a      	mov	r2, r3
 8001baa:	4623      	mov	r3, r4
 8001bac:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001bb0:	f7fe fb7a 	bl	80002a8 <__aeabi_dsub>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	460c      	mov	r4, r1
 8001bb8:	4625      	mov	r5, r4
 8001bba:	461c      	mov	r4, r3
 8001bbc:	7e3b      	ldrb	r3, [r7, #24]
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	2364      	movs	r3, #100	; 0x64
 8001bc2:	fb03 f302 	mul.w	r3, r3, r2
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7fe fcbc 	bl	8000544 <__aeabi_i2d>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	460b      	mov	r3, r1
 8001bd0:	4620      	mov	r0, r4
 8001bd2:	4629      	mov	r1, r5
 8001bd4:	f7fe fb68 	bl	80002a8 <__aeabi_dsub>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	460c      	mov	r4, r1
 8001bdc:	4625      	mov	r5, r4
 8001bde:	461c      	mov	r4, r3
 8001be0:	7e7b      	ldrb	r3, [r7, #25]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7fe fcae 	bl	8000544 <__aeabi_i2d>
 8001be8:	4602      	mov	r2, r0
 8001bea:	460b      	mov	r3, r1
 8001bec:	e008      	b.n	8001c00 <double2string+0x3e0>
 8001bee:	bf00      	nop
 8001bf0:	10624dd3 	.word	0x10624dd3
 8001bf4:	51eb851f 	.word	0x51eb851f
 8001bf8:	66666667 	.word	0x66666667
 8001bfc:	408f4000 	.word	0x408f4000
 8001c00:	4620      	mov	r0, r4
 8001c02:	4629      	mov	r1, r5
 8001c04:	f7fe fb50 	bl	80002a8 <__aeabi_dsub>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	460c      	mov	r4, r1
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	4621      	mov	r1, r4
 8001c10:	f04f 0200 	mov.w	r2, #0
 8001c14:	4b56      	ldr	r3, [pc, #344]	; (8001d70 <double2string+0x550>)
 8001c16:	f7fe ff85 	bl	8000b24 <__aeabi_dcmpge>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d003      	beq.n	8001c28 <double2string+0x408>
		le[5]++;
 8001c20:	7e7b      	ldrb	r3, [r7, #25]
 8001c22:	3301      	adds	r3, #1
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	767b      	strb	r3, [r7, #25]
	}

	index = 0;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	63bb      	str	r3, [r7, #56]	; 0x38

	if( -1 == sign) {
 8001c2c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8001c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c34:	d107      	bne.n	8001c46 <double2string+0x426>
		*(result + index++) = '-'; // Negative
 8001c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c38:	1c5a      	adds	r2, r3, #1
 8001c3a:	63ba      	str	r2, [r7, #56]	; 0x38
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	4413      	add	r3, r2
 8001c42:	222d      	movs	r2, #45	; 0x2d
 8001c44:	701a      	strb	r2, [r3, #0]
	}
	// Find first position
	if ( value < 1) {
 8001c46:	f04f 0200 	mov.w	r2, #0
 8001c4a:	4b4a      	ldr	r3, [pc, #296]	; (8001d74 <double2string+0x554>)
 8001c4c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c50:	f7fe ff54 	bl	8000afc <__aeabi_dcmplt>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d008      	beq.n	8001c6c <double2string+0x44c>
		*(result + index++) = 0x30;
 8001c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c5c:	1c5a      	adds	r2, r3, #1
 8001c5e:	63ba      	str	r2, [r7, #56]	; 0x38
 8001c60:	461a      	mov	r2, r3
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	4413      	add	r3, r2
 8001c66:	2230      	movs	r2, #48	; 0x30
 8001c68:	701a      	strb	r2, [r3, #0]
 8001c6a:	e04b      	b.n	8001d04 <double2string+0x4e4>
	} else {
		int8_t i = 0;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		for( ; i < 4; i++) {
 8001c72:	e027      	b.n	8001cc4 <double2string+0x4a4>
			if (nguyen[i] > 0) {
 8001c74:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001c78:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001c7c:	4413      	add	r3, r2
 8001c7e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d017      	beq.n	8001cb6 <double2string+0x496>
				*(result + index++) = nguyen[i] + 0x30;
 8001c86:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001c8a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001c8e:	4413      	add	r3, r2
 8001c90:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 8001c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c96:	1c59      	adds	r1, r3, #1
 8001c98:	63b9      	str	r1, [r7, #56]	; 0x38
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	440b      	add	r3, r1
 8001ca0:	3230      	adds	r2, #48	; 0x30
 8001ca2:	b2d2      	uxtb	r2, r2
 8001ca4:	701a      	strb	r2, [r3, #0]
				i++;
 8001ca6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	3301      	adds	r3, #1
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;
 8001cb4:	e00a      	b.n	8001ccc <double2string+0x4ac>
		for( ; i < 4; i++) {
 8001cb6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001cc4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001cc8:	2b03      	cmp	r3, #3
 8001cca:	ddd3      	ble.n	8001c74 <double2string+0x454>
			}
		}

		for( ; i < 4; i++) {
 8001ccc:	e016      	b.n	8001cfc <double2string+0x4dc>
		*(result + index++) = nguyen[i] + 0x30;
 8001cce:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001cd2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001cd6:	4413      	add	r3, r2
 8001cd8:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 8001cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cde:	1c59      	adds	r1, r3, #1
 8001ce0:	63b9      	str	r1, [r7, #56]	; 0x38
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	440b      	add	r3, r1
 8001ce8:	3230      	adds	r2, #48	; 0x30
 8001cea:	b2d2      	uxtb	r2, r2
 8001cec:	701a      	strb	r2, [r3, #0]
		for( ; i < 4; i++) {
 8001cee:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001cfc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001d00:	2b03      	cmp	r3, #3
 8001d02:	dde4      	ble.n	8001cce <double2string+0x4ae>
		}
	}
	*(result + index++) = '.';
 8001d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d06:	1c5a      	adds	r2, r3, #1
 8001d08:	63ba      	str	r2, [r7, #56]	; 0x38
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	4413      	add	r3, r2
 8001d10:	222e      	movs	r2, #46	; 0x2e
 8001d12:	701a      	strb	r2, [r3, #0]
	for( int8_t i = 0; i < precision; i++) {
 8001d14:	2300      	movs	r3, #0
 8001d16:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001d1a:	e016      	b.n	8001d4a <double2string+0x52a>
			*(result + index++) = le[i] + 0x30;
 8001d1c:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8001d20:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001d24:	4413      	add	r3, r2
 8001d26:	f813 2c2c 	ldrb.w	r2, [r3, #-44]
 8001d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d2c:	1c59      	adds	r1, r3, #1
 8001d2e:	63b9      	str	r1, [r7, #56]	; 0x38
 8001d30:	4619      	mov	r1, r3
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	440b      	add	r3, r1
 8001d36:	3230      	adds	r2, #48	; 0x30
 8001d38:	b2d2      	uxtb	r2, r2
 8001d3a:	701a      	strb	r2, [r3, #0]
	for( int8_t i = 0; i < precision; i++) {
 8001d3c:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	3301      	adds	r3, #1
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001d4a:	f997 2036 	ldrsb.w	r2, [r7, #54]	; 0x36
 8001d4e:	7afb      	ldrb	r3, [r7, #11]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	dbe3      	blt.n	8001d1c <double2string+0x4fc>
	}

	// Chua giai quyet van de lam tron chu so thap phan
	*(result + index++) = 0;
 8001d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d56:	1c5a      	adds	r2, r3, #1
 8001d58:	63ba      	str	r2, [r7, #56]	; 0x38
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	4413      	add	r3, r2
 8001d60:	2200      	movs	r2, #0
 8001d62:	701a      	strb	r2, [r3, #0]
	return index;
 8001d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3740      	adds	r7, #64	; 0x40
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bdb0      	pop	{r4, r5, r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	3fe00000 	.word	0x3fe00000
 8001d74:	3ff00000 	.word	0x3ff00000

08001d78 <packPayload>:
 *  in_lenght		: lenght of input_buff
 *
 *  returns:		: lenght of output_buff
 *  				  -1 if error
 */
int32_t	packPayload		(uint8_t *input_buff, uint8_t *output_buff, int32_t in_lenght) {
 8001d78:	b5b0      	push	{r4, r5, r7, lr}
 8001d7a:	b088      	sub	sp, #32
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	607a      	str	r2, [r7, #4]
 8001d84:	466b      	mov	r3, sp
 8001d86:	461d      	mov	r5, r3
	if (NULL == input_buff) {
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d102      	bne.n	8001d94 <packPayload+0x1c>
		return -1;
 8001d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d92:	e056      	b.n	8001e42 <packPayload+0xca>
	}

	if (NULL == output_buff) {
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d102      	bne.n	8001da0 <packPayload+0x28>
		return -1;
 8001d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d9e:	e050      	b.n	8001e42 <packPayload+0xca>
	}

	int32_t out_lenght = 0;
 8001da0:	2300      	movs	r3, #0
 8001da2:	61bb      	str	r3, [r7, #24]

	out_lenght = in_lenght + 2;//lenght of start char and end char
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	3302      	adds	r3, #2
 8001da8:	61bb      	str	r3, [r7, #24]
//		if ( (START_CHAR == input_buff[i]) ||	(END_CHAR == input_buff[i])	|| (ADD_CHAR == input_buff[i]) ) {
//			out_lenght++;
//		}
//	}// compute output buffer lenght

	uint8_t temp_buff[out_lenght];
 8001daa:	69b8      	ldr	r0, [r7, #24]
 8001dac:	1e43      	subs	r3, r0, #1
 8001dae:	617b      	str	r3, [r7, #20]
 8001db0:	4603      	mov	r3, r0
 8001db2:	4619      	mov	r1, r3
 8001db4:	f04f 0200 	mov.w	r2, #0
 8001db8:	f04f 0300 	mov.w	r3, #0
 8001dbc:	f04f 0400 	mov.w	r4, #0
 8001dc0:	00d4      	lsls	r4, r2, #3
 8001dc2:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001dc6:	00cb      	lsls	r3, r1, #3
 8001dc8:	4603      	mov	r3, r0
 8001dca:	4619      	mov	r1, r3
 8001dcc:	f04f 0200 	mov.w	r2, #0
 8001dd0:	f04f 0300 	mov.w	r3, #0
 8001dd4:	f04f 0400 	mov.w	r4, #0
 8001dd8:	00d4      	lsls	r4, r2, #3
 8001dda:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001dde:	00cb      	lsls	r3, r1, #3
 8001de0:	4603      	mov	r3, r0
 8001de2:	3307      	adds	r3, #7
 8001de4:	08db      	lsrs	r3, r3, #3
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	ebad 0d03 	sub.w	sp, sp, r3
 8001dec:	466b      	mov	r3, sp
 8001dee:	3300      	adds	r3, #0
 8001df0:	613b      	str	r3, [r7, #16]

	out_lenght = 0;
 8001df2:	2300      	movs	r3, #0
 8001df4:	61bb      	str	r3, [r7, #24]
	temp_buff[out_lenght++] = START_CHAR;
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	1c5a      	adds	r2, r3, #1
 8001dfa:	61ba      	str	r2, [r7, #24]
 8001dfc:	693a      	ldr	r2, [r7, #16]
 8001dfe:	2128      	movs	r1, #40	; 0x28
 8001e00:	54d1      	strb	r1, [r2, r3]
	for (int32_t i = 0; i < in_lenght; i++) {
 8001e02:	2300      	movs	r3, #0
 8001e04:	61fb      	str	r3, [r7, #28]
 8001e06:	e00b      	b.n	8001e20 <packPayload+0xa8>
//			temp_buff[out_lenght++] = ADD_CHAR;
//			temp_buff[out_lenght++] = input_buff[i] ^ XOR_CHAR;
//		} else {
//			temp_buff[out_lenght++] = input_buff[i];
//		}
		temp_buff[out_lenght++] = input_buff[i];
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	441a      	add	r2, r3
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	1c59      	adds	r1, r3, #1
 8001e12:	61b9      	str	r1, [r7, #24]
 8001e14:	7811      	ldrb	r1, [r2, #0]
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	54d1      	strb	r1, [r2, r3]
	for (int32_t i = 0; i < in_lenght; i++) {
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	61fb      	str	r3, [r7, #28]
 8001e20:	69fa      	ldr	r2, [r7, #28]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	dbef      	blt.n	8001e08 <packPayload+0x90>
	}
	temp_buff[out_lenght++] = END_CHAR;
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	1c5a      	adds	r2, r3, #1
 8001e2c:	61ba      	str	r2, [r7, #24]
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	2129      	movs	r1, #41	; 0x29
 8001e32:	54d1      	strb	r1, [r2, r3]

	memmove(output_buff, temp_buff, out_lenght);
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	4619      	mov	r1, r3
 8001e3a:	68b8      	ldr	r0, [r7, #8]
 8001e3c:	f010 fcd3 	bl	80127e6 <memmove>

	return out_lenght;
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	46ad      	mov	sp, r5
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3720      	adds	r7, #32
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bdb0      	pop	{r4, r5, r7, pc}

08001e4c <unPackPayload>:
 *  in_lenght		: lenght of input_buff
 *
 *  returns:		: lenght of output_buff
 *  				  -1 if error
 */
int32_t	unPackPayload	(uint8_t *message_buff, int32_t in_lenght) {
 8001e4c:	b5b0      	push	{r4, r5, r7, lr}
 8001e4e:	b086      	sub	sp, #24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
 8001e56:	466b      	mov	r3, sp
 8001e58:	461d      	mov	r5, r3
	if (in_lenght < MIN_MESSAGE_LENGHT) {
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	2b05      	cmp	r3, #5
 8001e5e:	dc02      	bgt.n	8001e66 <unPackPayload+0x1a>
		return -1;
 8001e60:	f04f 33ff 	mov.w	r3, #4294967295
 8001e64:	e063      	b.n	8001f2e <unPackPayload+0xe2>
	}// check minimum lenght

	if ( (START_CHAR != message_buff[0]) || (END_CHAR != message_buff[in_lenght - 1]) ) {
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	2b28      	cmp	r3, #40	; 0x28
 8001e6c:	d106      	bne.n	8001e7c <unPackPayload+0x30>
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	3b01      	subs	r3, #1
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	4413      	add	r3, r2
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	2b29      	cmp	r3, #41	; 0x29
 8001e7a:	d002      	beq.n	8001e82 <unPackPayload+0x36>
		return -1;
 8001e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e80:	e055      	b.n	8001f2e <unPackPayload+0xe2>
	}// check start char and end char

	int32_t out_lenght = in_lenght - 2;
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	3b02      	subs	r3, #2
 8001e86:	613b      	str	r3, [r7, #16]
//		if ( (START_CHAR == message_buff[i]) || (END_CHAR == message_buff[i]) || (ADD_CHAR == message_buff[i]) ) {
//			out_lenght--;
//		}
//	}// compute output buffer lenght

	uint8_t temp_buff[out_lenght];
 8001e88:	6938      	ldr	r0, [r7, #16]
 8001e8a:	1e43      	subs	r3, r0, #1
 8001e8c:	60fb      	str	r3, [r7, #12]
 8001e8e:	4603      	mov	r3, r0
 8001e90:	4619      	mov	r1, r3
 8001e92:	f04f 0200 	mov.w	r2, #0
 8001e96:	f04f 0300 	mov.w	r3, #0
 8001e9a:	f04f 0400 	mov.w	r4, #0
 8001e9e:	00d4      	lsls	r4, r2, #3
 8001ea0:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001ea4:	00cb      	lsls	r3, r1, #3
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	f04f 0200 	mov.w	r2, #0
 8001eae:	f04f 0300 	mov.w	r3, #0
 8001eb2:	f04f 0400 	mov.w	r4, #0
 8001eb6:	00d4      	lsls	r4, r2, #3
 8001eb8:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001ebc:	00cb      	lsls	r3, r1, #3
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	3307      	adds	r3, #7
 8001ec2:	08db      	lsrs	r3, r3, #3
 8001ec4:	00db      	lsls	r3, r3, #3
 8001ec6:	ebad 0d03 	sub.w	sp, sp, r3
 8001eca:	466b      	mov	r3, sp
 8001ecc:	3300      	adds	r3, #0
 8001ece:	60bb      	str	r3, [r7, #8]

	out_lenght = 0;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	613b      	str	r3, [r7, #16]
	for (int32_t i = 0; i < (in_lenght - 1); i++) {
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	617b      	str	r3, [r7, #20]
 8001ed8:	e017      	b.n	8001f0a <unPackPayload+0xbe>
		if ( (START_CHAR == message_buff[i]) ||	(END_CHAR == message_buff[i]) ) {
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	4413      	add	r3, r2
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	2b28      	cmp	r3, #40	; 0x28
 8001ee4:	d00e      	beq.n	8001f04 <unPackPayload+0xb8>
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	4413      	add	r3, r2
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	2b29      	cmp	r3, #41	; 0x29
 8001ef0:	d008      	beq.n	8001f04 <unPackPayload+0xb8>
			;
//		} else if ( (ADD_CHAR == message_buff[i]) ) {
//			temp_buff[out_lenght++] = message_buff[++i] ^ XOR_CHAR;
		}
		else {
			temp_buff[out_lenght++] = message_buff[i];
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	441a      	add	r2, r3
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	1c59      	adds	r1, r3, #1
 8001efc:	6139      	str	r1, [r7, #16]
 8001efe:	7811      	ldrb	r1, [r2, #0]
 8001f00:	68ba      	ldr	r2, [r7, #8]
 8001f02:	54d1      	strb	r1, [r2, r3]
	for (int32_t i = 0; i < (in_lenght - 1); i++) {
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	3301      	adds	r3, #1
 8001f08:	617b      	str	r3, [r7, #20]
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	3b01      	subs	r3, #1
 8001f0e:	697a      	ldr	r2, [r7, #20]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	dbe2      	blt.n	8001eda <unPackPayload+0x8e>
		}
	}
	memset((uint8_t*)message_buff, 0, in_lenght);
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	461a      	mov	r2, r3
 8001f18:	2100      	movs	r1, #0
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f010 fc7c 	bl	8012818 <memset>
	memmove(message_buff, temp_buff, out_lenght);
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	4619      	mov	r1, r3
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f010 fc5d 	bl	80127e6 <memmove>

	return out_lenght;
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	46ad      	mov	sp, r5
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3718      	adds	r7, #24
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bdb0      	pop	{r4, r5, r7, pc}

08001f38 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f3e:	2300      	movs	r3, #0
 8001f40:	607b      	str	r3, [r7, #4]
 8001f42:	4b0c      	ldr	r3, [pc, #48]	; (8001f74 <MX_DMA_Init+0x3c>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	4a0b      	ldr	r2, [pc, #44]	; (8001f74 <MX_DMA_Init+0x3c>)
 8001f48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f4e:	4b09      	ldr	r3, [pc, #36]	; (8001f74 <MX_DMA_Init+0x3c>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f56:	607b      	str	r3, [r7, #4]
 8001f58:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	2105      	movs	r1, #5
 8001f5e:	200f      	movs	r0, #15
 8001f60:	f006 f89c 	bl	800809c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001f64:	200f      	movs	r0, #15
 8001f66:	f006 f8b5 	bl	80080d4 <HAL_NVIC_EnableIRQ>

}
 8001f6a:	bf00      	nop
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	40023800 	.word	0x40023800

08001f78 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	4a07      	ldr	r2, [pc, #28]	; (8001fa4 <vApplicationGetIdleTaskMemory+0x2c>)
 8001f88:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	4a06      	ldr	r2, [pc, #24]	; (8001fa8 <vApplicationGetIdleTaskMemory+0x30>)
 8001f8e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f96:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8001f98:	bf00      	nop
 8001f9a:	3714      	adds	r7, #20
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr
 8001fa4:	20001024 	.word	0x20001024
 8001fa8:	20001078 	.word	0x20001078

08001fac <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001fac:	b5b0      	push	{r4, r5, r7, lr}
 8001fae:	b094      	sub	sp, #80	; 0x50
 8001fb0:	af00      	add	r7, sp, #0
       
  /* USER CODE END Init */

  /* Create the mutex(es) */
  /* definition and creation of usbTxMutex */
  osMutexDef(usbTxMutex);
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	64bb      	str	r3, [r7, #72]	; 0x48
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	64fb      	str	r3, [r7, #76]	; 0x4c
  usbTxMutexHandle = osMutexCreate(osMutex(usbTxMutex));
 8001fba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f00c fe12 	bl	800ebe8 <osMutexCreate>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	4b1d      	ldr	r3, [pc, #116]	; (800203c <MX_FREERTOS_Init+0x90>)
 8001fc8:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
	  /* Create the queue(s) */
	  /* definition and creation of commandMail */
	  osMailQDef(commandMail, 1, DUTY_Command_TypeDef);
 8001fca:	2301      	movs	r3, #1
 8001fcc:	63bb      	str	r3, [r7, #56]	; 0x38
 8001fce:	f44f 7384 	mov.w	r3, #264	; 0x108
 8001fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fd4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001fd8:	643b      	str	r3, [r7, #64]	; 0x40
	  commandMailHandle = osMailCreate(osMailQ(commandMail), NULL);
 8001fda:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001fde:	2100      	movs	r1, #0
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f00c ff9d 	bl	800ef20 <osMailCreate>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	4b15      	ldr	r3, [pc, #84]	; (8002040 <MX_FREERTOS_Init+0x94>)
 8001fea:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityHigh, 0, 2048);
 8001fec:	4b15      	ldr	r3, [pc, #84]	; (8002044 <MX_FREERTOS_Init+0x98>)
 8001fee:	f107 041c 	add.w	r4, r7, #28
 8001ff2:	461d      	mov	r5, r3
 8001ff4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ff6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ff8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001ffc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002000:	f107 031c 	add.w	r3, r7, #28
 8002004:	2100      	movs	r1, #0
 8002006:	4618      	mov	r0, r3
 8002008:	f00c fd01 	bl	800ea0e <osThreadCreate>
 800200c:	4602      	mov	r2, r0
 800200e:	4b0e      	ldr	r3, [pc, #56]	; (8002048 <MX_FREERTOS_Init+0x9c>)
 8002010:	601a      	str	r2, [r3, #0]

  /* definition and creation of USB_RX_Check_ */
  osThreadDef(USB_RX_Check_, Start_USB_RX_Task, osPriorityNormal, 0, 1024);
 8002012:	4b0e      	ldr	r3, [pc, #56]	; (800204c <MX_FREERTOS_Init+0xa0>)
 8002014:	463c      	mov	r4, r7
 8002016:	461d      	mov	r5, r3
 8002018:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800201a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800201c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002020:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  USB_RX_Check_Handle = osThreadCreate(osThread(USB_RX_Check_), NULL);
 8002024:	463b      	mov	r3, r7
 8002026:	2100      	movs	r1, #0
 8002028:	4618      	mov	r0, r3
 800202a:	f00c fcf0 	bl	800ea0e <osThreadCreate>
 800202e:	4602      	mov	r2, r0
 8002030:	4b07      	ldr	r3, [pc, #28]	; (8002050 <MX_FREERTOS_Init+0xa4>)
 8002032:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8002034:	bf00      	nop
 8002036:	3750      	adds	r7, #80	; 0x50
 8002038:	46bd      	mov	sp, r7
 800203a:	bdb0      	pop	{r4, r5, r7, pc}
 800203c:	200052e0 	.word	0x200052e0
 8002040:	200052e4 	.word	0x200052e4
 8002044:	08018644 	.word	0x08018644
 8002048:	200052dc 	.word	0x200052dc
 800204c:	08018670 	.word	0x08018670
 8002050:	200052e8 	.word	0x200052e8
 8002054:	00000000 	.word	0x00000000

08002058 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002058:	b5b0      	push	{r4, r5, r7, lr}
 800205a:	f5ad 6dcf 	sub.w	sp, sp, #1656	; 0x678
 800205e:	af3e      	add	r7, sp, #248	; 0xf8
 8002060:	f107 0314 	add.w	r3, r7, #20
 8002064:	6018      	str	r0, [r3, #0]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8002066:	f00f fe39 	bl	8011cdc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  osEvent 				ret_mail;
  DUTY_Command_TypeDef 	duty_cmd;
  DUTY_Command_TypeDef 	*dataMail;
  uint8_t 				isNewDuty = FALSE;
 800206a:	2300      	movs	r3, #0
 800206c:	f887 357f 	strb.w	r3, [r7, #1407]	; 0x57f
  // Robot variable
  SCARA_ModeTypeDef			current_mode;
  SCARA_DutyStateTypeDef 	current_state;
  double						run_time;

  LOG_REPORT("free_rtos.c: PROGRAM START...", __LINE__);
 8002070:	21c5      	movs	r1, #197	; 0xc5
 8002072:	48b9      	ldr	r0, [pc, #740]	; (8002358 <StartDefaultTask+0x300>)
 8002074:	f7ff fb8e 	bl	8001794 <LOG_REPORT>

  // Init value
  no_stop = 0;
 8002078:	2300      	movs	r3, #0
 800207a:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
  no_scan = 0;
 800207e:	2300      	movs	r3, #0
 8002080:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
  no_duty = 0;
 8002084:	2300      	movs	r3, #0
 8002086:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
  no_duty_success	= 0;
 800208a:	2300      	movs	r3, #0
 800208c:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
  no_duty_fail		= 0;
 8002090:	2300      	movs	r3, #0
 8002092:	f8c7 3568 	str.w	r3, [r7, #1384]	; 0x568
  current_mode	 = scaraGetMode();
 8002096:	f005 faf7 	bl	8007688 <scaraGetMode>
 800209a:	4603      	mov	r3, r0
 800209c:	f887 3557 	strb.w	r3, [r7, #1367]	; 0x557
  current_state	 = scaraGetDutyState();
 80020a0:	f005 fafe 	bl	80076a0 <scaraGetDutyState>
 80020a4:	4603      	mov	r3, r0
 80020a6:	f887 3556 	strb.w	r3, [r7, #1366]	; 0x556

#ifdef SIMULATION
	  positionNext.Theta1 = -PI/3;
 80020aa:	4aac      	ldr	r2, [pc, #688]	; (800235c <StartDefaultTask+0x304>)
 80020ac:	a4a6      	add	r4, pc, #664	; (adr r4, 8002348 <StartDefaultTask+0x2f0>)
 80020ae:	e9d4 3400 	ldrd	r3, r4, [r4]
 80020b2:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	  positionNext.Theta2 = PI/3;
 80020b6:	4aa9      	ldr	r2, [pc, #676]	; (800235c <StartDefaultTask+0x304>)
 80020b8:	a4a5      	add	r4, pc, #660	; (adr r4, 8002350 <StartDefaultTask+0x2f8>)
 80020ba:	e9d4 3400 	ldrd	r3, r4, [r4]
 80020be:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	  positionNext.D3 = 10;
 80020c2:	4aa6      	ldr	r2, [pc, #664]	; (800235c <StartDefaultTask+0x304>)
 80020c4:	f04f 0300 	mov.w	r3, #0
 80020c8:	4ca5      	ldr	r4, [pc, #660]	; (8002360 <StartDefaultTask+0x308>)
 80020ca:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	  positionNext.Theta4 = 0;
 80020ce:	4aa3      	ldr	r2, [pc, #652]	; (800235c <StartDefaultTask+0x304>)
 80020d0:	f04f 0300 	mov.w	r3, #0
 80020d4:	f04f 0400 	mov.w	r4, #0
 80020d8:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	  positionNext.t = 0;
 80020dc:	4a9f      	ldr	r2, [pc, #636]	; (800235c <StartDefaultTask+0x304>)
 80020de:	f04f 0300 	mov.w	r3, #0
 80020e2:	f04f 0400 	mov.w	r4, #0
 80020e6:	e9c2 3406 	strd	r3, r4, [r2, #24]
	  kinematicForward(&positionNext);
 80020ea:	489c      	ldr	r0, [pc, #624]	; (800235c <StartDefaultTask+0x304>)
 80020ec:	f000 fd70 	bl	8002bd0 <kinematicForward>
#endif
  /* Infinite loop */
//Start Timer 7
	  HAL_TIM_Base_Start_IT(&htim7);
 80020f0:	489c      	ldr	r0, [pc, #624]	; (8002364 <StartDefaultTask+0x30c>)
 80020f2:	f008 fbee 	bl	800a8d2 <HAL_TIM_Base_Start_IT>
  for(;;)
  {
	  /*---------Wait for Timer Trigger-----------*/
	  osSignalWait(0x01, osWaitForever); // Very Important
 80020f6:	463b      	mov	r3, r7
 80020f8:	f04f 32ff 	mov.w	r2, #4294967295
 80020fc:	2101      	movs	r1, #1
 80020fe:	4618      	mov	r0, r3
 8002100:	f00c fd26 	bl	800eb50 <osSignalWait>
	  /* 1--- Reset Value ---*/
	  respond_lenght		= 0;
 8002104:	2300      	movs	r3, #0
 8002106:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
	  respond_packed_lenght = 0;
 800210a:	2300      	movs	r3, #0
 800210c:	f8c7 355c 	str.w	r3, [r7, #1372]	; 0x55c
	  infor_lenght			= 0;
 8002110:	2300      	movs	r3, #0
 8002112:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
	  infor_packed_lenght	= 0;
 8002116:	2300      	movs	r3, #0
 8002118:	f8c7 3558 	str.w	r3, [r7, #1368]	; 0x558
	  task_usb_lenght		= 0;
 800211c:	2300      	movs	r3, #0
 800211e:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
	  usb_lenght			= 0;
 8002122:	2300      	movs	r3, #0
 8002124:	f8c7 3540 	str.w	r3, [r7, #1344]	; 0x540
	  // Update new position
#ifdef SIMULATION
	  memcpy(&positionPrevios, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 8002128:	4a8f      	ldr	r2, [pc, #572]	; (8002368 <StartDefaultTask+0x310>)
 800212a:	4b90      	ldr	r3, [pc, #576]	; (800236c <StartDefaultTask+0x314>)
 800212c:	4610      	mov	r0, r2
 800212e:	4619      	mov	r1, r3
 8002130:	2368      	movs	r3, #104	; 0x68
 8002132:	461a      	mov	r2, r3
 8002134:	f010 fb4c 	bl	80127d0 <memcpy>
	  memcpy(&positionCurrent, &positionNext, sizeof(SCARA_PositionTypeDef));
 8002138:	4a8c      	ldr	r2, [pc, #560]	; (800236c <StartDefaultTask+0x314>)
 800213a:	4b88      	ldr	r3, [pc, #544]	; (800235c <StartDefaultTask+0x304>)
 800213c:	4610      	mov	r0, r2
 800213e:	4619      	mov	r1, r3
 8002140:	2368      	movs	r3, #104	; 0x68
 8002142:	461a      	mov	r2, r3
 8002144:	f010 fb44 	bl	80127d0 <memcpy>
#endif

	  /* 2--- Check New Duty Phase ---*/
	  // Check mail
	  ret_mail = osMailGet(commandMailHandle, 0);
 8002148:	4b89      	ldr	r3, [pc, #548]	; (8002370 <StartDefaultTask+0x318>)
 800214a:	6819      	ldr	r1, [r3, #0]
 800214c:	f207 532c 	addw	r3, r7, #1324	; 0x52c
 8002150:	2200      	movs	r2, #0
 8002152:	4618      	mov	r0, r3
 8002154:	f00c ff90 	bl	800f078 <osMailGet>
	  if ( ret_mail.status == osEventMail) {
 8002158:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 800215c:	2b20      	cmp	r3, #32
 800215e:	d11a      	bne.n	8002196 <StartDefaultTask+0x13e>
		   dataMail = ret_mail.value.p;
 8002160:	f8d7 3530 	ldr.w	r3, [r7, #1328]	; 0x530
 8002164:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
		   memcpy( &duty_cmd, dataMail, sizeof(DUTY_Command_TypeDef));
 8002168:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800216c:	f44f 7284 	mov.w	r2, #264	; 0x108
 8002170:	f8d7 153c 	ldr.w	r1, [r7, #1340]	; 0x53c
 8002174:	4618      	mov	r0, r3
 8002176:	f010 fb2b 	bl	80127d0 <memcpy>
		   isNewDuty = TRUE;
 800217a:	2301      	movs	r3, #1
 800217c:	f887 357f 	strb.w	r3, [r7, #1407]	; 0x57f
		   osMailFree(commandMailHandle, dataMail);/* free memory allocated for mail */
 8002180:	4b7b      	ldr	r3, [pc, #492]	; (8002370 <StartDefaultTask+0x318>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f8d7 153c 	ldr.w	r1, [r7, #1340]	; 0x53c
 8002188:	4618      	mov	r0, r3
 800218a:	f00c ffe9 	bl	800f160 <osMailFree>
		   LOG_REPORT("Receive mail", __LINE__);
 800218e:	21f4      	movs	r1, #244	; 0xf4
 8002190:	4878      	ldr	r0, [pc, #480]	; (8002374 <StartDefaultTask+0x31c>)
 8002192:	f7ff faff 	bl	8001794 <LOG_REPORT>
	  }
	  if(isNewDuty) {
 8002196:	f897 357f 	ldrb.w	r3, [r7, #1407]	; 0x57f
 800219a:	2b00      	cmp	r3, #0
 800219c:	f000 80aa 	beq.w	80022f4 <StartDefaultTask+0x29c>
		  memset(respond, 0, 40);
 80021a0:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80021a4:	2228      	movs	r2, #40	; 0x28
 80021a6:	2100      	movs	r1, #0
 80021a8:	4618      	mov	r0, r3
 80021aa:	f010 fb35 	bl	8012818 <memset>
		  switch( duty_cmd.robot_mode) {
 80021ae:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d01d      	beq.n	80021f4 <StartDefaultTask+0x19c>
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d04d      	beq.n	8002258 <StartDefaultTask+0x200>
 80021bc:	2b00      	cmp	r3, #0
 80021be:	f040 8091 	bne.w	80022e4 <StartDefaultTask+0x28c>
		  case SCARA_MODE_STOP:
			  {
				  no_stop++;
 80021c2:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80021c6:	3301      	adds	r3, #1
 80021c8:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
				  current_mode	 = SCARA_MODE_STOP;
 80021cc:	2300      	movs	r3, #0
 80021ce:	f887 3557 	strb.w	r3, [r7, #1367]	; 0x557
				  respond_lenght = commandRespond(RPD_OK,
 80021d2:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80021d6:	6859      	ldr	r1, [r3, #4]
 80021d8:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80021dc:	4a66      	ldr	r2, [pc, #408]	; (8002378 <StartDefaultTask+0x320>)
 80021de:	2008      	movs	r0, #8
 80021e0:	f7ff fa88 	bl	80016f4 <commandRespond>
 80021e4:	f8c7 0564 	str.w	r0, [r7, #1380]	; 0x564
						  	  	  	  	  	  	  duty_cmd.id_command,
												  "Stop Now",
												  (char *)respond);
				  LOG_REPORT("ROBOT STOP !!!", __LINE__);
 80021e8:	f240 1101 	movw	r1, #257	; 0x101
 80021ec:	4863      	ldr	r0, [pc, #396]	; (800237c <StartDefaultTask+0x324>)
 80021ee:	f7ff fad1 	bl	8001794 <LOG_REPORT>
			  }
			  break;
 80021f2:	e07c      	b.n	80022ee <StartDefaultTask+0x296>
		  case SCARA_MODE_SCAN:
			  {
				  if (SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_state) {
 80021f4:	f897 3557 	ldrb.w	r3, [r7, #1367]	; 0x557
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d11c      	bne.n	8002236 <StartDefaultTask+0x1de>
 80021fc:	f897 3556 	ldrb.w	r3, [r7, #1366]	; 0x556
 8002200:	2b00      	cmp	r3, #0
 8002202:	d118      	bne.n	8002236 <StartDefaultTask+0x1de>
					  no_scan++;
 8002204:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8002208:	3301      	adds	r3, #1
 800220a:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
					  current_mode = SCARA_MODE_SCAN;
 800220e:	2301      	movs	r3, #1
 8002210:	f887 3557 	strb.w	r3, [r7, #1367]	; 0x557
					  respond_lenght = commandRespond(RPD_OK,
 8002214:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002218:	6859      	ldr	r1, [r3, #4]
 800221a:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800221e:	4a58      	ldr	r2, [pc, #352]	; (8002380 <StartDefaultTask+0x328>)
 8002220:	2008      	movs	r0, #8
 8002222:	f7ff fa67 	bl	80016f4 <commandRespond>
 8002226:	f8c7 0564 	str.w	r0, [r7, #1380]	; 0x564
							  	  	  	  	  	  	  duty_cmd.id_command,
													  "Start Scan",
													  (char *)respond);
					  LOG_REPORT("SCAN", __LINE__);
 800222a:	f240 110d 	movw	r1, #269	; 0x10d
 800222e:	4855      	ldr	r0, [pc, #340]	; (8002384 <StartDefaultTask+0x32c>)
 8002230:	f7ff fab0 	bl	8001794 <LOG_REPORT>
													  "Busy",
													  (char *)respond);
					  LOG_REPORT("SCAN FAIL:NOT SCAN", __LINE__);
				  }
			  }
			  break;
 8002234:	e05b      	b.n	80022ee <StartDefaultTask+0x296>
					  respond_lenght = commandRespond(RPD_ERROR,
 8002236:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800223a:	6859      	ldr	r1, [r3, #4]
 800223c:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8002240:	4a51      	ldr	r2, [pc, #324]	; (8002388 <StartDefaultTask+0x330>)
 8002242:	2007      	movs	r0, #7
 8002244:	f7ff fa56 	bl	80016f4 <commandRespond>
 8002248:	f8c7 0564 	str.w	r0, [r7, #1380]	; 0x564
					  LOG_REPORT("SCAN FAIL:NOT SCAN", __LINE__);
 800224c:	f240 1113 	movw	r1, #275	; 0x113
 8002250:	484e      	ldr	r0, [pc, #312]	; (800238c <StartDefaultTask+0x334>)
 8002252:	f7ff fa9f 	bl	8001794 <LOG_REPORT>
			  break;
 8002256:	e04a      	b.n	80022ee <StartDefaultTask+0x296>
		  case SCARA_MODE_DUTY:
			  {
				  no_duty++;
 8002258:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 800225c:	3301      	adds	r3, #1
 800225e:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
				  if (SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_state) {
 8002262:	f897 3557 	ldrb.w	r3, [r7, #1367]	; 0x557
 8002266:	2b02      	cmp	r3, #2
 8002268:	d125      	bne.n	80022b6 <StartDefaultTask+0x25e>
 800226a:	f897 3556 	ldrb.w	r3, [r7, #1366]	; 0x556
 800226e:	2b00      	cmp	r3, #0
 8002270:	d121      	bne.n	80022b6 <StartDefaultTask+0x25e>
					  if (scaraIsScanLimit()) {
 8002272:	f005 fa21 	bl	80076b8 <scaraIsScanLimit>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d006      	beq.n	800228a <StartDefaultTask+0x232>
						  current_mode	 = SCARA_MODE_DUTY;
 800227c:	2302      	movs	r3, #2
 800227e:	f887 3557 	strb.w	r3, [r7, #1367]	; 0x557
						  current_state	 = SCARA_DUTY_STATE_INIT;
 8002282:	2301      	movs	r3, #1
 8002284:	f887 3556 	strb.w	r3, [r7, #1366]	; 0x556
					  if (scaraIsScanLimit()) {
 8002288:	e02b      	b.n	80022e2 <StartDefaultTask+0x28a>
					  } else {
						  no_duty_fail++;
 800228a:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 800228e:	3301      	adds	r3, #1
 8002290:	f8c7 3568 	str.w	r3, [r7, #1384]	; 0x568
						  respond_lenght = commandRespond(RPD_ERROR,
 8002294:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002298:	6859      	ldr	r1, [r3, #4]
 800229a:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800229e:	4a3c      	ldr	r2, [pc, #240]	; (8002390 <StartDefaultTask+0x338>)
 80022a0:	2007      	movs	r0, #7
 80022a2:	f7ff fa27 	bl	80016f4 <commandRespond>
 80022a6:	f8c7 0564 	str.w	r0, [r7, #1380]	; 0x564
						  							  	  duty_cmd.id_command,
														  "Has Not Scan Yet.",
														  (char *)respond);
						  LOG_REPORT("MOVE FAIL:NOT SCAN", __LINE__);
 80022aa:	f44f 7192 	mov.w	r1, #292	; 0x124
 80022ae:	4839      	ldr	r0, [pc, #228]	; (8002394 <StartDefaultTask+0x33c>)
 80022b0:	f7ff fa70 	bl	8001794 <LOG_REPORT>
					  if (scaraIsScanLimit()) {
 80022b4:	e015      	b.n	80022e2 <StartDefaultTask+0x28a>
					  }
				  } else {
					  no_duty_fail++;
 80022b6:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 80022ba:	3301      	adds	r3, #1
 80022bc:	f8c7 3568 	str.w	r3, [r7, #1384]	; 0x568
					  respond_lenght	= commandRespond(RPD_ERROR,
 80022c0:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80022c4:	6859      	ldr	r1, [r3, #4]
 80022c6:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80022ca:	4a33      	ldr	r2, [pc, #204]	; (8002398 <StartDefaultTask+0x340>)
 80022cc:	2007      	movs	r0, #7
 80022ce:	f7ff fa11 	bl	80016f4 <commandRespond>
 80022d2:	f8c7 0564 	str.w	r0, [r7, #1380]	; 0x564
					  							  	  	  duty_cmd.id_command,
														  "Busy.",
														  (char *)respond);
					  LOG_REPORT("MOVE FAIL:BUSY", __LINE__);
 80022d6:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80022da:	4830      	ldr	r0, [pc, #192]	; (800239c <StartDefaultTask+0x344>)
 80022dc:	f7ff fa5a 	bl	8001794 <LOG_REPORT>
				  }
			  }
			  break;
 80022e0:	e005      	b.n	80022ee <StartDefaultTask+0x296>
 80022e2:	e004      	b.n	80022ee <StartDefaultTask+0x296>
		  default:
			  {
				  LOG_REPORT("CMD Error Mode !!!", __LINE__);
 80022e4:	f44f 7199 	mov.w	r1, #306	; 0x132
 80022e8:	482d      	ldr	r0, [pc, #180]	; (80023a0 <StartDefaultTask+0x348>)
 80022ea:	f7ff fa53 	bl	8001794 <LOG_REPORT>
			  }
		  }
		  isNewDuty = FALSE;
 80022ee:	2300      	movs	r3, #0
 80022f0:	f887 357f 	strb.w	r3, [r7, #1407]	; 0x57f
	  }

	/* 3--- Execute Phase ---*/
	  switch( current_mode) {
 80022f4:	f897 3557 	ldrb.w	r3, [r7, #1367]	; 0x557
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d00b      	beq.n	8002314 <StartDefaultTask+0x2bc>
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d010      	beq.n	8002322 <StartDefaultTask+0x2ca>
 8002300:	2b00      	cmp	r3, #0
 8002302:	f040 8150 	bne.w	80025a6 <StartDefaultTask+0x54e>
	  case SCARA_MODE_STOP:
		  {
			  current_mode 	= SCARA_MODE_DUTY;
 8002306:	2302      	movs	r3, #2
 8002308:	f887 3557 	strb.w	r3, [r7, #1367]	; 0x557
			  current_state = SCARA_DUTY_STATE_READY;
 800230c:	2300      	movs	r3, #0
 800230e:	f887 3556 	strb.w	r3, [r7, #1366]	; 0x556
		  }
		  break;
 8002312:	e14e      	b.n	80025b2 <StartDefaultTask+0x55a>
	  case SCARA_MODE_SCAN:
		  {
			  current_mode 	= SCARA_MODE_DUTY;
 8002314:	2302      	movs	r3, #2
 8002316:	f887 3557 	strb.w	r3, [r7, #1367]	; 0x557
			  current_state = SCARA_DUTY_STATE_READY;
 800231a:	2300      	movs	r3, #0
 800231c:	f887 3556 	strb.w	r3, [r7, #1366]	; 0x556
		  }
		  break;
 8002320:	e147      	b.n	80025b2 <StartDefaultTask+0x55a>
	  case SCARA_MODE_DUTY:
		  {
			  switch (current_state){
 8002322:	f897 3556 	ldrb.w	r3, [r7, #1366]	; 0x556
 8002326:	2b03      	cmp	r3, #3
 8002328:	f200 8136 	bhi.w	8002598 <StartDefaultTask+0x540>
 800232c:	a201      	add	r2, pc, #4	; (adr r2, 8002334 <StartDefaultTask+0x2dc>)
 800232e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002332:	bf00      	nop
 8002334:	08002345 	.word	0x08002345
 8002338:	080023a5 	.word	0x080023a5
 800233c:	08002483 	.word	0x08002483
 8002340:	08002535 	.word	0x08002535
			  case SCARA_DUTY_STATE_READY:
				  {
					  // Do nothing();
					  __NOP();
 8002344:	bf00      	nop
				  }
			  break;
 8002346:	e12d      	b.n	80025a4 <StartDefaultTask+0x54c>
 8002348:	40000000 	.word	0x40000000
 800234c:	bff0c152 	.word	0xbff0c152
 8002350:	40000000 	.word	0x40000000
 8002354:	3ff0c152 	.word	0x3ff0c152
 8002358:	0801868c 	.word	0x0801868c
 800235c:	20005d58 	.word	0x20005d58
 8002360:	40240000 	.word	0x40240000
 8002364:	20005e00 	.word	0x20005e00
 8002368:	20005c88 	.word	0x20005c88
 800236c:	20005cf0 	.word	0x20005cf0
 8002370:	200052e4 	.word	0x200052e4
 8002374:	080186ac 	.word	0x080186ac
 8002378:	080186bc 	.word	0x080186bc
 800237c:	080186c8 	.word	0x080186c8
 8002380:	080186d8 	.word	0x080186d8
 8002384:	080186e4 	.word	0x080186e4
 8002388:	080186ec 	.word	0x080186ec
 800238c:	080186f4 	.word	0x080186f4
 8002390:	08018708 	.word	0x08018708
 8002394:	0801871c 	.word	0x0801871c
 8002398:	08018730 	.word	0x08018730
 800239c:	08018738 	.word	0x08018738
 80023a0:	08018748 	.word	0x08018748
			  case SCARA_DUTY_STATE_INIT:
				  {
					  SCARA_StatusTypeDef status;
					  status = scaraInitDuty(duty_cmd);
 80023a4:	f507 6484 	add.w	r4, r7, #1056	; 0x420
 80023a8:	4668      	mov	r0, sp
 80023aa:	f104 0310 	add.w	r3, r4, #16
 80023ae:	22f8      	movs	r2, #248	; 0xf8
 80023b0:	4619      	mov	r1, r3
 80023b2:	f010 fa0d 	bl	80127d0 <memcpy>
 80023b6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80023ba:	f001 f905 	bl	80035c8 <scaraInitDuty>
 80023be:	4603      	mov	r3, r0
 80023c0:	f887 353a 	strb.w	r3, [r7, #1338]	; 0x53a
					  if ( SCARA_STATUS_OK == status) {
 80023c4:	f897 353a 	ldrb.w	r3, [r7, #1338]	; 0x53a
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d13d      	bne.n	8002448 <StartDefaultTask+0x3f0>
						  no_duty_success++;
 80023cc:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 80023d0:	3301      	adds	r3, #1
 80023d2:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
						  current_state		= SCARA_DUTY_STATE_FLOW;
 80023d6:	2302      	movs	r3, #2
 80023d8:	f887 3556 	strb.w	r3, [r7, #1366]	; 0x556
						  run_time			= 0;
 80023dc:	f04f 0300 	mov.w	r3, #0
 80023e0:	f04f 0400 	mov.w	r4, #0
 80023e4:	f507 62a9 	add.w	r2, r7, #1352	; 0x548
 80023e8:	e9c2 3400 	strd	r3, r4, [r2]
						  // Respond
						  respond_lenght 	= commandRespond(RPD_OK,
 80023ec:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80023f0:	6859      	ldr	r1, [r3, #4]
 80023f2:	f897 353a 	ldrb.w	r3, [r7, #1338]	; 0x53a
								  	  	  	  	  	  	  	  duty_cmd.id_command,
															  (char *)DETAIL_STATUS[status],
 80023f6:	4ab2      	ldr	r2, [pc, #712]	; (80026c0 <StartDefaultTask+0x668>)
 80023f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
						  respond_lenght 	= commandRespond(RPD_OK,
 80023fc:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8002400:	2008      	movs	r0, #8
 8002402:	f7ff f977 	bl	80016f4 <commandRespond>
 8002406:	f8c7 0564 	str.w	r0, [r7, #1380]	; 0x564
															  (char *)respond);
						  scaraPosition2String((char *)position, positionCurrent);
 800240a:	4cae      	ldr	r4, [pc, #696]	; (80026c4 <StartDefaultTask+0x66c>)
 800240c:	f507 755c 	add.w	r5, r7, #880	; 0x370
 8002410:	4668      	mov	r0, sp
 8002412:	f104 0308 	add.w	r3, r4, #8
 8002416:	2260      	movs	r2, #96	; 0x60
 8002418:	4619      	mov	r1, r3
 800241a:	f010 f9d9 	bl	80127d0 <memcpy>
 800241e:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002422:	4628      	mov	r0, r5
 8002424:	f005 f980 	bl	8007728 <scaraPosition2String>
						  // Start Inform
						  infor_lenght 		= commandRespond(RPD_START,
 8002428:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 800242c:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8002430:	2100      	movs	r1, #0
 8002432:	2003      	movs	r0, #3
 8002434:	f7ff f95e 	bl	80016f4 <commandRespond>
 8002438:	f8c7 0560 	str.w	r0, [r7, #1376]	; 0x560
		  	  	  	  	  	  	  	  	  	  	  	  	  	  0,
															  (char *)position,
															  (char *)infor);
						  LOG_REPORT("INIT SUCCESS", __LINE__);
 800243c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8002440:	48a1      	ldr	r0, [pc, #644]	; (80026c8 <StartDefaultTask+0x670>)
 8002442:	f7ff f9a7 	bl	8001794 <LOG_REPORT>
															  (char *)DETAIL_STATUS[status],
															  (char *)respond);
						  LOG_REPORT("INIT FAIL", __LINE__);
					  }
				  }
			  break;
 8002446:	e0ad      	b.n	80025a4 <StartDefaultTask+0x54c>
						  no_duty_fail++;
 8002448:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 800244c:	3301      	adds	r3, #1
 800244e:	f8c7 3568 	str.w	r3, [r7, #1384]	; 0x568
						  current_state 	= SCARA_DUTY_STATE_READY;
 8002452:	2300      	movs	r3, #0
 8002454:	f887 3556 	strb.w	r3, [r7, #1366]	; 0x556
						  respond_lenght	= commandRespond(RPD_ERROR,
 8002458:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800245c:	6859      	ldr	r1, [r3, #4]
 800245e:	f897 353a 	ldrb.w	r3, [r7, #1338]	; 0x53a
															  (char *)DETAIL_STATUS[status],
 8002462:	4a97      	ldr	r2, [pc, #604]	; (80026c0 <StartDefaultTask+0x668>)
 8002464:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
						  respond_lenght	= commandRespond(RPD_ERROR,
 8002468:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800246c:	2007      	movs	r0, #7
 800246e:	f7ff f941 	bl	80016f4 <commandRespond>
 8002472:	f8c7 0564 	str.w	r0, [r7, #1380]	; 0x564
						  LOG_REPORT("INIT FAIL", __LINE__);
 8002476:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 800247a:	4894      	ldr	r0, [pc, #592]	; (80026cc <StartDefaultTask+0x674>)
 800247c:	f7ff f98a 	bl	8001794 <LOG_REPORT>
			  break;
 8002480:	e090      	b.n	80025a4 <StartDefaultTask+0x54c>
			  case SCARA_DUTY_STATE_FLOW:
				  {
					  SCARA_StatusTypeDef status;
					  // Increase run time
					  run_time += T_SAMPLING;
 8002482:	a38d      	add	r3, pc, #564	; (adr r3, 80026b8 <StartDefaultTask+0x660>)
 8002484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002488:	f507 61a9 	add.w	r1, r7, #1352	; 0x548
 800248c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002490:	f7fd ff0c 	bl	80002ac <__adddf3>
 8002494:	4603      	mov	r3, r0
 8002496:	460c      	mov	r4, r1
 8002498:	f507 62a9 	add.w	r2, r7, #1352	; 0x548
 800249c:	e9c2 3400 	strd	r3, r4, [r2]
					  // Check Time Out
					  if (scaraIsFinish(run_time)) {
 80024a0:	f507 63a9 	add.w	r3, r7, #1352	; 0x548
 80024a4:	ed93 0b00 	vldr	d0, [r3]
 80024a8:	f005 f912 	bl	80076d0 <scaraIsFinish>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d003      	beq.n	80024ba <StartDefaultTask+0x462>
						  current_state = SCARA_DUTY_STATE_FINISH;// Work Done
 80024b2:	2303      	movs	r3, #3
 80024b4:	f887 3556 	strb.w	r3, [r7, #1366]	; 0x556
															(char *)infor);
							  LOG_REPORT("STOP", __LINE__);
						  }
					  }
				  }
			  break;
 80024b8:	e074      	b.n	80025a4 <StartDefaultTask+0x54c>
						  status = scaraFlowDuty(run_time);
 80024ba:	f507 63a9 	add.w	r3, r7, #1352	; 0x548
 80024be:	ed93 0b00 	vldr	d0, [r3]
 80024c2:	f003 fb5b 	bl	8005b7c <scaraFlowDuty>
 80024c6:	4603      	mov	r3, r0
 80024c8:	f887 353b 	strb.w	r3, [r7, #1339]	; 0x53b
						  if ( SCARA_STATUS_OK == status) {
 80024cc:	f897 353b 	ldrb.w	r3, [r7, #1339]	; 0x53b
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d119      	bne.n	8002508 <StartDefaultTask+0x4b0>
							  scaraPosition2String((char *)position, positionCurrent);
 80024d4:	4c7b      	ldr	r4, [pc, #492]	; (80026c4 <StartDefaultTask+0x66c>)
 80024d6:	f507 755c 	add.w	r5, r7, #880	; 0x370
 80024da:	4668      	mov	r0, sp
 80024dc:	f104 0308 	add.w	r3, r4, #8
 80024e0:	2260      	movs	r2, #96	; 0x60
 80024e2:	4619      	mov	r1, r3
 80024e4:	f010 f974 	bl	80127d0 <memcpy>
 80024e8:	e894 000c 	ldmia.w	r4, {r2, r3}
 80024ec:	4628      	mov	r0, r5
 80024ee:	f005 f91b 	bl	8007728 <scaraPosition2String>
							  infor_lenght = commandRespond(RPD_RUNNING,
 80024f2:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 80024f6:	f507 725c 	add.w	r2, r7, #880	; 0x370
 80024fa:	2100      	movs	r1, #0
 80024fc:	2004      	movs	r0, #4
 80024fe:	f7ff f8f9 	bl	80016f4 <commandRespond>
 8002502:	f8c7 0560 	str.w	r0, [r7, #1376]	; 0x560
			  break;
 8002506:	e04d      	b.n	80025a4 <StartDefaultTask+0x54c>
							  current_state = SCARA_DUTY_STATE_FINISH;
 8002508:	2303      	movs	r3, #3
 800250a:	f887 3556 	strb.w	r3, [r7, #1366]	; 0x556
							  infor_lenght = commandRespond(RPD_STOP,
 800250e:	f897 353b 	ldrb.w	r3, [r7, #1339]	; 0x53b
															(char *)DETAIL_STATUS[status],
 8002512:	4a6b      	ldr	r2, [pc, #428]	; (80026c0 <StartDefaultTask+0x668>)
 8002514:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
							  infor_lenght = commandRespond(RPD_STOP,
 8002518:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 800251c:	2100      	movs	r1, #0
 800251e:	2006      	movs	r0, #6
 8002520:	f7ff f8e8 	bl	80016f4 <commandRespond>
 8002524:	f8c7 0560 	str.w	r0, [r7, #1376]	; 0x560
							  LOG_REPORT("STOP", __LINE__);
 8002528:	f44f 71c4 	mov.w	r1, #392	; 0x188
 800252c:	4868      	ldr	r0, [pc, #416]	; (80026d0 <StartDefaultTask+0x678>)
 800252e:	f7ff f931 	bl	8001794 <LOG_REPORT>
			  break;
 8002532:	e037      	b.n	80025a4 <StartDefaultTask+0x54c>
			  case SCARA_DUTY_STATE_FINISH:
				  {
					  current_state = SCARA_DUTY_STATE_READY;
 8002534:	2300      	movs	r3, #0
 8002536:	f887 3556 	strb.w	r3, [r7, #1366]	; 0x556
					  positionNext.t = 0;
 800253a:	4a66      	ldr	r2, [pc, #408]	; (80026d4 <StartDefaultTask+0x67c>)
 800253c:	f04f 0300 	mov.w	r3, #0
 8002540:	f04f 0400 	mov.w	r4, #0
 8002544:	e9c2 3406 	strd	r3, r4, [r2, #24]
					  positionNext.total_time = 0;
 8002548:	4a62      	ldr	r2, [pc, #392]	; (80026d4 <StartDefaultTask+0x67c>)
 800254a:	f04f 0300 	mov.w	r3, #0
 800254e:	f04f 0400 	mov.w	r4, #0
 8002552:	e9c2 3408 	strd	r3, r4, [r2, #32]
					  positionNext.q = 0;
 8002556:	4a5f      	ldr	r2, [pc, #380]	; (80026d4 <StartDefaultTask+0x67c>)
 8002558:	f04f 0300 	mov.w	r3, #0
 800255c:	f04f 0400 	mov.w	r4, #0
 8002560:	e9c2 3400 	strd	r3, r4, [r2]
					  // Done Inform
					  scaraPosition2String((char *)position, positionCurrent);
 8002564:	4c57      	ldr	r4, [pc, #348]	; (80026c4 <StartDefaultTask+0x66c>)
 8002566:	f507 755c 	add.w	r5, r7, #880	; 0x370
 800256a:	4668      	mov	r0, sp
 800256c:	f104 0308 	add.w	r3, r4, #8
 8002570:	2260      	movs	r2, #96	; 0x60
 8002572:	4619      	mov	r1, r3
 8002574:	f010 f92c 	bl	80127d0 <memcpy>
 8002578:	e894 000c 	ldmia.w	r4, {r2, r3}
 800257c:	4628      	mov	r0, r5
 800257e:	f005 f8d3 	bl	8007728 <scaraPosition2String>
					  infor_lenght 		= commandRespond(RPD_DONE,
 8002582:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 8002586:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800258a:	2100      	movs	r1, #0
 800258c:	2005      	movs	r0, #5
 800258e:	f7ff f8b1 	bl	80016f4 <commandRespond>
 8002592:	f8c7 0560 	str.w	r0, [r7, #1376]	; 0x560
	  	  	  	  	  	  	  	  	  	  	  	  	  	 0,
														 (char *)position,
														 (char *)infor);
				  }
			  break;
 8002596:	e005      	b.n	80025a4 <StartDefaultTask+0x54c>
			  default:
				  {
					  LOG_REPORT("ERROR STATE !!!", __LINE__);
 8002598:	f240 119d 	movw	r1, #413	; 0x19d
 800259c:	484e      	ldr	r0, [pc, #312]	; (80026d8 <StartDefaultTask+0x680>)
 800259e:	f7ff f8f9 	bl	8001794 <LOG_REPORT>
					  while(1);
 80025a2:	e7fe      	b.n	80025a2 <StartDefaultTask+0x54a>
				  }
			  }

		  }
		  break;
 80025a4:	e005      	b.n	80025b2 <StartDefaultTask+0x55a>
	  default:
		  {
			  LOG_REPORT("ERROR MODE !!!", __LINE__);
 80025a6:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
 80025aa:	484c      	ldr	r0, [pc, #304]	; (80026dc <StartDefaultTask+0x684>)
 80025ac:	f7ff f8f2 	bl	8001794 <LOG_REPORT>
			  while(1);
 80025b0:	e7fe      	b.n	80025b0 <StartDefaultTask+0x558>
		  }
	  }

	  /* 4--- Send to PC Phase ---*/
	  // Check buffer from USB task
	  osMutexWait(usbTxMutexHandle, osWaitForever);
 80025b2:	4b4b      	ldr	r3, [pc, #300]	; (80026e0 <StartDefaultTask+0x688>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f04f 31ff 	mov.w	r1, #4294967295
 80025ba:	4618      	mov	r0, r3
 80025bc:	f00c fb2c 	bl	800ec18 <osMutexWait>
	  task_usb_lenght = ringBuff_PopArray(&cmd_tx_ringbuff, task_usb, RINGBUFFER_SIZE);
 80025c0:	f507 7311 	add.w	r3, r7, #580	; 0x244
 80025c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025c8:	4619      	mov	r1, r3
 80025ca:	4846      	ldr	r0, [pc, #280]	; (80026e4 <StartDefaultTask+0x68c>)
 80025cc:	f000 ff63 	bl	8003496 <ringBuff_PopArray>
 80025d0:	f8c7 0544 	str.w	r0, [r7, #1348]	; 0x544
	  osMutexRelease(usbTxMutexHandle);
 80025d4:	4b42      	ldr	r3, [pc, #264]	; (80026e0 <StartDefaultTask+0x688>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4618      	mov	r0, r3
 80025da:	f00c fb6b 	bl	800ecb4 <osMutexRelease>
	  // Intergrate to 1 buffer
	  if (respond_lenght > 0) {
 80025de:	f8d7 3564 	ldr.w	r3, [r7, #1380]	; 0x564
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	dd13      	ble.n	800260e <StartDefaultTask+0x5b6>
		  respond_packed_lenght = packPayload(respond, respond_packed, respond_lenght);
 80025e6:	f507 7104 	add.w	r1, r7, #528	; 0x210
 80025ea:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80025ee:	f8d7 2564 	ldr.w	r2, [r7, #1380]	; 0x564
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7ff fbc0 	bl	8001d78 <packPayload>
 80025f8:	f8c7 055c 	str.w	r0, [r7, #1372]	; 0x55c
		  memcpy(usb_buff, respond_packed, respond_packed_lenght);
 80025fc:	f8d7 255c 	ldr.w	r2, [r7, #1372]	; 0x55c
 8002600:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8002604:	f107 0318 	add.w	r3, r7, #24
 8002608:	4618      	mov	r0, r3
 800260a:	f010 f8e1 	bl	80127d0 <memcpy>
	  }
	  if (task_usb_lenght > 0) {
 800260e:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 8002612:	2b00      	cmp	r3, #0
 8002614:	dd0b      	ble.n	800262e <StartDefaultTask+0x5d6>
		  memcpy(usb_buff + respond_packed_lenght, task_usb, task_usb_lenght);
 8002616:	f8d7 355c 	ldr.w	r3, [r7, #1372]	; 0x55c
 800261a:	f107 0218 	add.w	r2, r7, #24
 800261e:	4413      	add	r3, r2
 8002620:	f8d7 2544 	ldr.w	r2, [r7, #1348]	; 0x544
 8002624:	f507 7111 	add.w	r1, r7, #580	; 0x244
 8002628:	4618      	mov	r0, r3
 800262a:	f010 f8d1 	bl	80127d0 <memcpy>
	  }
	  if (infor_lenght > 0) {
 800262e:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 8002632:	2b00      	cmp	r3, #0
 8002634:	dd19      	ble.n	800266a <StartDefaultTask+0x612>
		  infor_packed_lenght 	= packPayload(infor, infor_packed, infor_lenght);
 8002636:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 800263a:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 800263e:	f8d7 2560 	ldr.w	r2, [r7, #1376]	; 0x560
 8002642:	4618      	mov	r0, r3
 8002644:	f7ff fb98 	bl	8001d78 <packPayload>
 8002648:	f8c7 0558 	str.w	r0, [r7, #1368]	; 0x558
		  memcpy(usb_buff + respond_packed_lenght + task_usb_lenght, infor_packed, infor_packed_lenght);
 800264c:	f8d7 255c 	ldr.w	r2, [r7, #1372]	; 0x55c
 8002650:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 8002654:	4413      	add	r3, r2
 8002656:	f107 0218 	add.w	r2, r7, #24
 800265a:	4413      	add	r3, r2
 800265c:	f8d7 2558 	ldr.w	r2, [r7, #1368]	; 0x558
 8002660:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 8002664:	4618      	mov	r0, r3
 8002666:	f010 f8b3 	bl	80127d0 <memcpy>
	  }
	  usb_lenght = respond_packed_lenght + task_usb_lenght + infor_packed_lenght;
 800266a:	f8d7 255c 	ldr.w	r2, [r7, #1372]	; 0x55c
 800266e:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 8002672:	4413      	add	r3, r2
 8002674:	f8d7 2558 	ldr.w	r2, [r7, #1368]	; 0x558
 8002678:	4413      	add	r3, r2
 800267a:	f8c7 3540 	str.w	r3, [r7, #1344]	; 0x540
	  // Send through USB
	  if (usb_lenght > 0) {
 800267e:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 8002682:	2b00      	cmp	r3, #0
 8002684:	dd08      	ble.n	8002698 <StartDefaultTask+0x640>
		  CDC_Transmit_FS(usb_buff, (uint16_t)usb_lenght);
 8002686:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 800268a:	b29a      	uxth	r2, r3
 800268c:	f107 0318 	add.w	r3, r7, #24
 8002690:	4611      	mov	r1, r2
 8002692:	4618      	mov	r0, r3
 8002694:	f00f fc2e 	bl	8011ef4 <CDC_Transmit_FS>
	  }

	  /* 5--- Update ---*/
	  scaraSetMode(current_mode);
 8002698:	f897 3557 	ldrb.w	r3, [r7, #1367]	; 0x557
 800269c:	4618      	mov	r0, r3
 800269e:	f004 ffe3 	bl	8007668 <scaraSetMode>
	  scaraSetDutyState(current_state);
 80026a2:	f897 3556 	ldrb.w	r3, [r7, #1366]	; 0x556
 80026a6:	4618      	mov	r0, r3
 80026a8:	f004 ffbe 	bl	8007628 <scaraSetDutyState>

    osDelay(1);
 80026ac:	2001      	movs	r0, #1
 80026ae:	f00c f9fa 	bl	800eaa6 <osDelay>
	  osSignalWait(0x01, osWaitForever); // Very Important
 80026b2:	e520      	b.n	80020f6 <StartDefaultTask+0x9e>
 80026b4:	f3af 8000 	nop.w
 80026b8:	40000000 	.word	0x40000000
 80026bc:	3f847ae1 	.word	0x3f847ae1
 80026c0:	20000c80 	.word	0x20000c80
 80026c4:	20005cf0 	.word	0x20005cf0
 80026c8:	0801875c 	.word	0x0801875c
 80026cc:	0801876c 	.word	0x0801876c
 80026d0:	08018778 	.word	0x08018778
 80026d4:	20005d58 	.word	0x20005d58
 80026d8:	08018780 	.word	0x08018780
 80026dc:	08018790 	.word	0x08018790
 80026e0:	200052e0 	.word	0x200052e0
 80026e4:	20000460 	.word	0x20000460

080026e8 <Start_USB_RX_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_USB_RX_Task */
void Start_USB_RX_Task(void const * argument)
{
 80026e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026ea:	f2ad 4d04 	subw	sp, sp, #1028	; 0x404
 80026ee:	af42      	add	r7, sp, #264	; 0x108
 80026f0:	1d3b      	adds	r3, r7, #4
 80026f2:	6018      	str	r0, [r3, #0]
	//uint8_t test_command1[60] = "(1 ROTA 3 0.785398 0.3 0 0.3)";
	//uint8_t test_command2[60] = "(456 OUTP 1)";

	//ringBuff_PushArray(&usb_rx_ringbuff, test_command1, strlen((char *)test_command1));
	//ringBuff_PushArray(&usb_rx_ringbuff, test_command2, strlen((char *)test_command2));
	no_duty	 = 0;
 80026f4:	2300      	movs	r3, #0
 80026f6:	f8c7 32f0 	str.w	r3, [r7, #752]	; 0x2f0
	no_other = 0;
 80026fa:	2300      	movs	r3, #0
 80026fc:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4

  /* Infinite loop */
  for(;;)
  {
	  for(;;) {
		  distance = ringBuff_DistanceOf(&usb_rx_ringbuff, END_CHAR);
 8002700:	2129      	movs	r1, #41	; 0x29
 8002702:	4884      	ldr	r0, [pc, #528]	; (8002914 <Start_USB_RX_Task+0x22c>)
 8002704:	f000 fee8 	bl	80034d8 <ringBuff_DistanceOf>
 8002708:	f8c7 02e8 	str.w	r0, [r7, #744]	; 0x2e8
		  if ( -1 != distance ) {
 800270c:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8002710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002714:	d0f4      	beq.n	8002700 <Start_USB_RX_Task+0x18>
 8002716:	466b      	mov	r3, sp
 8002718:	461e      	mov	r6, r3
			  LOG_REPORT("NEW PACKET", __LINE__);
 800271a:	f240 11f1 	movw	r1, #497	; 0x1f1
 800271e:	487e      	ldr	r0, [pc, #504]	; (8002918 <Start_USB_RX_Task+0x230>)
 8002720:	f7ff f838 	bl	8001794 <LOG_REPORT>
			  uint8_t temp[distance+1];
 8002724:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8002728:	1c58      	adds	r0, r3, #1
 800272a:	1e43      	subs	r3, r0, #1
 800272c:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8002730:	4603      	mov	r3, r0
 8002732:	4619      	mov	r1, r3
 8002734:	f04f 0200 	mov.w	r2, #0
 8002738:	f04f 0300 	mov.w	r3, #0
 800273c:	f04f 0400 	mov.w	r4, #0
 8002740:	00d4      	lsls	r4, r2, #3
 8002742:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002746:	00cb      	lsls	r3, r1, #3
 8002748:	4603      	mov	r3, r0
 800274a:	4619      	mov	r1, r3
 800274c:	f04f 0200 	mov.w	r2, #0
 8002750:	f04f 0300 	mov.w	r3, #0
 8002754:	f04f 0400 	mov.w	r4, #0
 8002758:	00d4      	lsls	r4, r2, #3
 800275a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800275e:	00cb      	lsls	r3, r1, #3
 8002760:	4603      	mov	r3, r0
 8002762:	3307      	adds	r3, #7
 8002764:	08db      	lsrs	r3, r3, #3
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	ebad 0d03 	sub.w	sp, sp, r3
 800276c:	ab42      	add	r3, sp, #264	; 0x108
 800276e:	3300      	adds	r3, #0
 8002770:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
			  int32_t ret;
			  ringBuff_PopArray(&usb_rx_ringbuff, temp, distance + 1);
 8002774:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8002778:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 800277c:	3301      	adds	r3, #1
 800277e:	461a      	mov	r2, r3
 8002780:	4864      	ldr	r0, [pc, #400]	; (8002914 <Start_USB_RX_Task+0x22c>)
 8002782:	f000 fe88 	bl	8003496 <ringBuff_PopArray>
			  ret = unPackPayload(temp, distance + 1);
 8002786:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 800278a:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 800278e:	3301      	adds	r3, #1
 8002790:	4619      	mov	r1, r3
 8002792:	4610      	mov	r0, r2
 8002794:	f7ff fb5a 	bl	8001e4c <unPackPayload>
 8002798:	f8c7 02dc 	str.w	r0, [r7, #732]	; 0x2dc
			  if( -1 == ret) {
 800279c:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 80027a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027a4:	d105      	bne.n	80027b2 <Start_USB_RX_Task+0xca>
				  LOG_REPORT("UNPACK FAIL", __LINE__);
 80027a6:	f240 11f7 	movw	r1, #503	; 0x1f7
 80027aa:	485c      	ldr	r0, [pc, #368]	; (800291c <Start_USB_RX_Task+0x234>)
 80027ac:	f7fe fff2 	bl	8001794 <LOG_REPORT>
 80027b0:	e0ae      	b.n	8002910 <Start_USB_RX_Task+0x228>
			  } else {
				  LOG_REPORT("UNPACK SUCCESS", __LINE__);
 80027b2:	f240 11f9 	movw	r1, #505	; 0x1f9
 80027b6:	485a      	ldr	r0, [pc, #360]	; (8002920 <Start_USB_RX_Task+0x238>)
 80027b8:	f7fe ffec 	bl	8001794 <LOG_REPORT>
				  LOG_REPORT((char*) temp, __LINE__);
 80027bc:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80027c0:	f44f 71fd 	mov.w	r1, #506	; 0x1fa
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7fe ffe5 	bl	8001794 <LOG_REPORT>
				  cmd_type = commandRead(temp, &id_command, &duty_cmd);
 80027ca:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80027ce:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
 80027d2:	f507 7132 	add.w	r1, r7, #712	; 0x2c8
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7fe fbe6 	bl	8000fa8 <commandRead>
 80027dc:	4603      	mov	r3, r0
 80027de:	f887 32db 	strb.w	r3, [r7, #731]	; 0x2db
				  memset(detail, 0, sizeof(detail));
 80027e2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80027e6:	2287      	movs	r2, #135	; 0x87
 80027e8:	2100      	movs	r1, #0
 80027ea:	4618      	mov	r0, r3
 80027ec:	f010 f814 	bl	8012818 <memset>
				  rpd_type = commandReply(cmd_type, duty_cmd, detail);
 80027f0:	f507 74e0 	add.w	r4, r7, #448	; 0x1c0
 80027f4:	f897 52db 	ldrb.w	r5, [r7, #731]	; 0x2db
 80027f8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80027fc:	9340      	str	r3, [sp, #256]	; 0x100
 80027fe:	4668      	mov	r0, sp
 8002800:	f104 0308 	add.w	r3, r4, #8
 8002804:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002808:	4619      	mov	r1, r3
 800280a:	f00f ffe1 	bl	80127d0 <memcpy>
 800280e:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002812:	4628      	mov	r0, r5
 8002814:	f7fe fe42 	bl	800149c <commandReply>
 8002818:	4603      	mov	r3, r0
 800281a:	f887 32da 	strb.w	r3, [r7, #730]	; 0x2da

				  if ( RPD_DUTY == rpd_type) {
 800281e:	f897 32da 	ldrb.w	r3, [r7, #730]	; 0x2da
 8002822:	2b09      	cmp	r3, #9
 8002824:	d131      	bne.n	800288a <Start_USB_RX_Task+0x1a2>
					  no_duty++;
 8002826:	f8d7 32f0 	ldr.w	r3, [r7, #752]	; 0x2f0
 800282a:	3301      	adds	r3, #1
 800282c:	f8c7 32f0 	str.w	r3, [r7, #752]	; 0x2f0
					  DUTY_Command_TypeDef *dataMail;
					  dataMail = NULL;
 8002830:	2300      	movs	r3, #0
 8002832:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
					  // Wait allocate
					  while (dataMail == NULL) {
 8002836:	e008      	b.n	800284a <Start_USB_RX_Task+0x162>
						  dataMail = osMailAlloc(commandMailHandle, osWaitForever);
 8002838:	4b3a      	ldr	r3, [pc, #232]	; (8002924 <Start_USB_RX_Task+0x23c>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f04f 31ff 	mov.w	r1, #4294967295
 8002840:	4618      	mov	r0, r3
 8002842:	f00c fbc5 	bl	800efd0 <osMailAlloc>
 8002846:	f8c7 02ec 	str.w	r0, [r7, #748]	; 0x2ec
					  while (dataMail == NULL) {
 800284a:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 800284e:	2b00      	cmp	r3, #0
 8002850:	d0f2      	beq.n	8002838 <Start_USB_RX_Task+0x150>
					  }
					  memcpy( dataMail, &duty_cmd, sizeof(DUTY_Command_TypeDef));
 8002852:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8002856:	f44f 7284 	mov.w	r2, #264	; 0x108
 800285a:	4619      	mov	r1, r3
 800285c:	f8d7 02ec 	ldr.w	r0, [r7, #748]	; 0x2ec
 8002860:	f00f ffb6 	bl	80127d0 <memcpy>
					  osStatus result;
					  result = osMailPut(commandMailHandle, dataMail);
 8002864:	4b2f      	ldr	r3, [pc, #188]	; (8002924 <Start_USB_RX_Task+0x23c>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f8d7 12ec 	ldr.w	r1, [r7, #748]	; 0x2ec
 800286c:	4618      	mov	r0, r3
 800286e:	f00c fbc5 	bl	800effc <osMailPut>
 8002872:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
					  if (osOK == result) {
 8002876:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 800287a:	2b00      	cmp	r3, #0
 800287c:	d148      	bne.n	8002910 <Start_USB_RX_Task+0x228>
						  LOG_REPORT("DUTY SEND", __LINE__);
 800287e:	f240 210b 	movw	r1, #523	; 0x20b
 8002882:	4829      	ldr	r0, [pc, #164]	; (8002928 <Start_USB_RX_Task+0x240>)
 8002884:	f7fe ff86 	bl	8001794 <LOG_REPORT>
 8002888:	e042      	b.n	8002910 <Start_USB_RX_Task+0x228>
					  }

				  } else {
					  no_other++;
 800288a:	f8d7 32f4 	ldr.w	r3, [r7, #756]	; 0x2f4
 800288e:	3301      	adds	r3, #1
 8002890:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
					  memset(respond, 0, sizeof(respond));
 8002894:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002898:	2291      	movs	r2, #145	; 0x91
 800289a:	2100      	movs	r1, #0
 800289c:	4618      	mov	r0, r3
 800289e:	f00f ffbb 	bl	8012818 <memset>
					  memset(message, 0, sizeof(message));
 80028a2:	f107 030c 	add.w	r3, r7, #12
 80028a6:	2296      	movs	r2, #150	; 0x96
 80028a8:	2100      	movs	r1, #0
 80028aa:	4618      	mov	r0, r3
 80028ac:	f00f ffb4 	bl	8012818 <memset>
					  respond_lenght	= commandRespond(rpd_type, id_command,
 80028b0:	f8d7 12c8 	ldr.w	r1, [r7, #712]	; 0x2c8
 80028b4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80028b8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80028bc:	f897 02da 	ldrb.w	r0, [r7, #730]	; 0x2da
 80028c0:	f7fe ff18 	bl	80016f4 <commandRespond>
 80028c4:	f8c7 02d4 	str.w	r0, [r7, #724]	; 0x2d4
							  	  	  	  (char *)detail,
										  (char *)respond);
					  message_lenght	= packPayload(respond, message, respond_lenght);
 80028c8:	f107 010c 	add.w	r1, r7, #12
 80028cc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80028d0:	f8d7 22d4 	ldr.w	r2, [r7, #724]	; 0x2d4
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7ff fa4f 	bl	8001d78 <packPayload>
 80028da:	f8c7 02d0 	str.w	r0, [r7, #720]	; 0x2d0
					  // Mutex
					  osMutexWait(usbTxMutexHandle, osWaitForever);
 80028de:	4b13      	ldr	r3, [pc, #76]	; (800292c <Start_USB_RX_Task+0x244>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f04f 31ff 	mov.w	r1, #4294967295
 80028e6:	4618      	mov	r0, r3
 80028e8:	f00c f996 	bl	800ec18 <osMutexWait>
					  ringBuff_PushArray(&cmd_tx_ringbuff, message, message_lenght);
 80028ec:	f107 030c 	add.w	r3, r7, #12
 80028f0:	f8d7 22d0 	ldr.w	r2, [r7, #720]	; 0x2d0
 80028f4:	4619      	mov	r1, r3
 80028f6:	480e      	ldr	r0, [pc, #56]	; (8002930 <Start_USB_RX_Task+0x248>)
 80028f8:	f000 fda5 	bl	8003446 <ringBuff_PushArray>
					  LOG_REPORT("ADD RINGBUFF", __LINE__);
 80028fc:	f240 2119 	movw	r1, #537	; 0x219
 8002900:	480c      	ldr	r0, [pc, #48]	; (8002934 <Start_USB_RX_Task+0x24c>)
 8002902:	f7fe ff47 	bl	8001794 <LOG_REPORT>
					  osMutexRelease(usbTxMutexHandle);
 8002906:	4b09      	ldr	r3, [pc, #36]	; (800292c <Start_USB_RX_Task+0x244>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4618      	mov	r0, r3
 800290c:	f00c f9d2 	bl	800ecb4 <osMutexRelease>
 8002910:	46b5      	mov	sp, r6
		  distance = ringBuff_DistanceOf(&usb_rx_ringbuff, END_CHAR);
 8002912:	e6f5      	b.n	8002700 <Start_USB_RX_Task+0x18>
 8002914:	20000054 	.word	0x20000054
 8002918:	080187a0 	.word	0x080187a0
 800291c:	080187ac 	.word	0x080187ac
 8002920:	080187b8 	.word	0x080187b8
 8002924:	200052e4 	.word	0x200052e4
 8002928:	080187c8 	.word	0x080187c8
 800292c:	200052e0 	.word	0x200052e0
 8002930:	20000460 	.word	0x20000460
 8002934:	080187d4 	.word	0x080187d4

08002938 <MX_FSMC_Init>:

NOR_HandleTypeDef hnor1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b088      	sub	sp, #32
 800293c:	af00      	add	r7, sp, #0
  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800293e:	1d3b      	adds	r3, r7, #4
 8002940:	2200      	movs	r2, #0
 8002942:	601a      	str	r2, [r3, #0]
 8002944:	605a      	str	r2, [r3, #4]
 8002946:	609a      	str	r2, [r3, #8]
 8002948:	60da      	str	r2, [r3, #12]
 800294a:	611a      	str	r2, [r3, #16]
 800294c:	615a      	str	r2, [r3, #20]
 800294e:	619a      	str	r2, [r3, #24]

  /** Perform the NOR1 memory initialization sequence
  */
  hnor1.Instance = FSMC_NORSRAM_DEVICE;
 8002950:	4b26      	ldr	r3, [pc, #152]	; (80029ec <MX_FSMC_Init+0xb4>)
 8002952:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8002956:	601a      	str	r2, [r3, #0]
  hnor1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8002958:	4b24      	ldr	r3, [pc, #144]	; (80029ec <MX_FSMC_Init+0xb4>)
 800295a:	4a25      	ldr	r2, [pc, #148]	; (80029f0 <MX_FSMC_Init+0xb8>)
 800295c:	605a      	str	r2, [r3, #4]
  /* hnor1.Init */
  hnor1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800295e:	4b23      	ldr	r3, [pc, #140]	; (80029ec <MX_FSMC_Init+0xb4>)
 8002960:	2200      	movs	r2, #0
 8002962:	609a      	str	r2, [r3, #8]
  hnor1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_ENABLE;
 8002964:	4b21      	ldr	r3, [pc, #132]	; (80029ec <MX_FSMC_Init+0xb4>)
 8002966:	2202      	movs	r2, #2
 8002968:	60da      	str	r2, [r3, #12]
  hnor1.Init.MemoryType = FSMC_MEMORY_TYPE_NOR;
 800296a:	4b20      	ldr	r3, [pc, #128]	; (80029ec <MX_FSMC_Init+0xb4>)
 800296c:	2208      	movs	r2, #8
 800296e:	611a      	str	r2, [r3, #16]
  hnor1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8002970:	4b1e      	ldr	r3, [pc, #120]	; (80029ec <MX_FSMC_Init+0xb4>)
 8002972:	2210      	movs	r2, #16
 8002974:	615a      	str	r2, [r3, #20]
  hnor1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8002976:	4b1d      	ldr	r3, [pc, #116]	; (80029ec <MX_FSMC_Init+0xb4>)
 8002978:	2200      	movs	r2, #0
 800297a:	619a      	str	r2, [r3, #24]
  hnor1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800297c:	4b1b      	ldr	r3, [pc, #108]	; (80029ec <MX_FSMC_Init+0xb4>)
 800297e:	2200      	movs	r2, #0
 8002980:	61da      	str	r2, [r3, #28]
  hnor1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8002982:	4b1a      	ldr	r3, [pc, #104]	; (80029ec <MX_FSMC_Init+0xb4>)
 8002984:	2200      	movs	r2, #0
 8002986:	621a      	str	r2, [r3, #32]
  hnor1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8002988:	4b18      	ldr	r3, [pc, #96]	; (80029ec <MX_FSMC_Init+0xb4>)
 800298a:	2200      	movs	r2, #0
 800298c:	625a      	str	r2, [r3, #36]	; 0x24
  hnor1.Init.WriteOperation = FSMC_WRITE_OPERATION_DISABLE;
 800298e:	4b17      	ldr	r3, [pc, #92]	; (80029ec <MX_FSMC_Init+0xb4>)
 8002990:	2200      	movs	r2, #0
 8002992:	629a      	str	r2, [r3, #40]	; 0x28
  hnor1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8002994:	4b15      	ldr	r3, [pc, #84]	; (80029ec <MX_FSMC_Init+0xb4>)
 8002996:	2200      	movs	r2, #0
 8002998:	62da      	str	r2, [r3, #44]	; 0x2c
  hnor1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 800299a:	4b14      	ldr	r3, [pc, #80]	; (80029ec <MX_FSMC_Init+0xb4>)
 800299c:	2200      	movs	r2, #0
 800299e:	631a      	str	r2, [r3, #48]	; 0x30
  hnor1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80029a0:	4b12      	ldr	r3, [pc, #72]	; (80029ec <MX_FSMC_Init+0xb4>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	635a      	str	r2, [r3, #52]	; 0x34
  hnor1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80029a6:	4b11      	ldr	r3, [pc, #68]	; (80029ec <MX_FSMC_Init+0xb4>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	639a      	str	r2, [r3, #56]	; 0x38
  hnor1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80029ac:	4b0f      	ldr	r3, [pc, #60]	; (80029ec <MX_FSMC_Init+0xb4>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 80029b2:	230f      	movs	r3, #15
 80029b4:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80029b6:	230f      	movs	r3, #15
 80029b8:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80029ba:	23ff      	movs	r3, #255	; 0xff
 80029bc:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80029be:	230f      	movs	r3, #15
 80029c0:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80029c2:	2310      	movs	r3, #16
 80029c4:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80029c6:	2311      	movs	r3, #17
 80029c8:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80029ca:	2300      	movs	r3, #0
 80029cc:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_NOR_Init(&hnor1, &Timing, NULL) != HAL_OK)
 80029ce:	1d3b      	adds	r3, r7, #4
 80029d0:	2200      	movs	r2, #0
 80029d2:	4619      	mov	r1, r3
 80029d4:	4805      	ldr	r0, [pc, #20]	; (80029ec <MX_FSMC_Init+0xb4>)
 80029d6:	f006 f8dd 	bl	8008b94 <HAL_NOR_Init>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <MX_FSMC_Init+0xac>
  {
    Error_Handler( );
 80029e0:	f000 fcba 	bl	8003358 <Error_Handler>
  }

}
 80029e4:	bf00      	nop
 80029e6:	3720      	adds	r7, #32
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	200052ec 	.word	0x200052ec
 80029f0:	a0000104 	.word	0xa0000104

080029f4 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b086      	sub	sp, #24
 80029f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029fa:	1d3b      	adds	r3, r7, #4
 80029fc:	2200      	movs	r2, #0
 80029fe:	601a      	str	r2, [r3, #0]
 8002a00:	605a      	str	r2, [r3, #4]
 8002a02:	609a      	str	r2, [r3, #8]
 8002a04:	60da      	str	r2, [r3, #12]
 8002a06:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8002a08:	4b24      	ldr	r3, [pc, #144]	; (8002a9c <HAL_FSMC_MspInit+0xa8>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d140      	bne.n	8002a92 <HAL_FSMC_MspInit+0x9e>
    return;
  }
  FSMC_Initialized = 1;
 8002a10:	4b22      	ldr	r3, [pc, #136]	; (8002a9c <HAL_FSMC_MspInit+0xa8>)
 8002a12:	2201      	movs	r2, #1
 8002a14:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8002a16:	2300      	movs	r3, #0
 8002a18:	603b      	str	r3, [r7, #0]
 8002a1a:	4b21      	ldr	r3, [pc, #132]	; (8002aa0 <HAL_FSMC_MspInit+0xac>)
 8002a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a1e:	4a20      	ldr	r2, [pc, #128]	; (8002aa0 <HAL_FSMC_MspInit+0xac>)
 8002a20:	f043 0301 	orr.w	r3, r3, #1
 8002a24:	6393      	str	r3, [r2, #56]	; 0x38
 8002a26:	4b1e      	ldr	r3, [pc, #120]	; (8002aa0 <HAL_FSMC_MspInit+0xac>)
 8002a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	603b      	str	r3, [r7, #0]
 8002a30:	683b      	ldr	r3, [r7, #0]
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  PB7   ------> FSMC_NL
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 8002a32:	f64f 7380 	movw	r3, #65408	; 0xff80
 8002a36:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a38:	2302      	movs	r3, #2
 8002a3a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a40:	2303      	movs	r3, #3
 8002a42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002a44:	230c      	movs	r3, #12
 8002a46:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a48:	1d3b      	adds	r3, r7, #4
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	4815      	ldr	r0, [pc, #84]	; (8002aa4 <HAL_FSMC_MspInit+0xb0>)
 8002a4e:	f005 feed 	bl	800882c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14 
 8002a52:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8002a56:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4 
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a58:	2302      	movs	r3, #2
 8002a5a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a60:	2303      	movs	r3, #3
 8002a62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002a64:	230c      	movs	r3, #12
 8002a66:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a68:	1d3b      	adds	r3, r7, #4
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	480e      	ldr	r0, [pc, #56]	; (8002aa8 <HAL_FSMC_MspInit+0xb4>)
 8002a6e:	f005 fedd 	bl	800882c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002a72:	2380      	movs	r3, #128	; 0x80
 8002a74:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a76:	2302      	movs	r3, #2
 8002a78:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002a82:	230c      	movs	r3, #12
 8002a84:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a86:	1d3b      	adds	r3, r7, #4
 8002a88:	4619      	mov	r1, r3
 8002a8a:	4808      	ldr	r0, [pc, #32]	; (8002aac <HAL_FSMC_MspInit+0xb8>)
 8002a8c:	f005 fece 	bl	800882c <HAL_GPIO_Init>
 8002a90:	e000      	b.n	8002a94 <HAL_FSMC_MspInit+0xa0>
    return;
 8002a92:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8002a94:	3718      	adds	r7, #24
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	20001478 	.word	0x20001478
 8002aa0:	40023800 	.word	0x40023800
 8002aa4:	40021000 	.word	0x40021000
 8002aa8:	40020c00 	.word	0x40020c00
 8002aac:	40020400 	.word	0x40020400

08002ab0 <HAL_NOR_MspInit>:

void HAL_NOR_MspInit(NOR_HandleTypeDef* norHandle){
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NOR_MspInit 0 */

  /* USER CODE END NOR_MspInit 0 */
  HAL_FSMC_MspInit();
 8002ab8:	f7ff ff9c 	bl	80029f4 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN NOR_MspInit 1 */

  /* USER CODE END NOR_MspInit 1 */
}
 8002abc:	bf00      	nop
 8002abe:	3708      	adds	r7, #8
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b08a      	sub	sp, #40	; 0x28
 8002ac8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aca:	f107 0314 	add.w	r3, r7, #20
 8002ace:	2200      	movs	r2, #0
 8002ad0:	601a      	str	r2, [r3, #0]
 8002ad2:	605a      	str	r2, [r3, #4]
 8002ad4:	609a      	str	r2, [r3, #8]
 8002ad6:	60da      	str	r2, [r3, #12]
 8002ad8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002ada:	2300      	movs	r3, #0
 8002adc:	613b      	str	r3, [r7, #16]
 8002ade:	4b39      	ldr	r3, [pc, #228]	; (8002bc4 <MX_GPIO_Init+0x100>)
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae2:	4a38      	ldr	r2, [pc, #224]	; (8002bc4 <MX_GPIO_Init+0x100>)
 8002ae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8002aea:	4b36      	ldr	r3, [pc, #216]	; (8002bc4 <MX_GPIO_Init+0x100>)
 8002aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002af2:	613b      	str	r3, [r7, #16]
 8002af4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002af6:	2300      	movs	r3, #0
 8002af8:	60fb      	str	r3, [r7, #12]
 8002afa:	4b32      	ldr	r3, [pc, #200]	; (8002bc4 <MX_GPIO_Init+0x100>)
 8002afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afe:	4a31      	ldr	r2, [pc, #196]	; (8002bc4 <MX_GPIO_Init+0x100>)
 8002b00:	f043 0301 	orr.w	r3, r3, #1
 8002b04:	6313      	str	r3, [r2, #48]	; 0x30
 8002b06:	4b2f      	ldr	r3, [pc, #188]	; (8002bc4 <MX_GPIO_Init+0x100>)
 8002b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	60fb      	str	r3, [r7, #12]
 8002b10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b12:	2300      	movs	r3, #0
 8002b14:	60bb      	str	r3, [r7, #8]
 8002b16:	4b2b      	ldr	r3, [pc, #172]	; (8002bc4 <MX_GPIO_Init+0x100>)
 8002b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1a:	4a2a      	ldr	r2, [pc, #168]	; (8002bc4 <MX_GPIO_Init+0x100>)
 8002b1c:	f043 0310 	orr.w	r3, r3, #16
 8002b20:	6313      	str	r3, [r2, #48]	; 0x30
 8002b22:	4b28      	ldr	r3, [pc, #160]	; (8002bc4 <MX_GPIO_Init+0x100>)
 8002b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b26:	f003 0310 	and.w	r3, r3, #16
 8002b2a:	60bb      	str	r3, [r7, #8]
 8002b2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b2e:	2300      	movs	r3, #0
 8002b30:	607b      	str	r3, [r7, #4]
 8002b32:	4b24      	ldr	r3, [pc, #144]	; (8002bc4 <MX_GPIO_Init+0x100>)
 8002b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b36:	4a23      	ldr	r2, [pc, #140]	; (8002bc4 <MX_GPIO_Init+0x100>)
 8002b38:	f043 0302 	orr.w	r3, r3, #2
 8002b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b3e:	4b21      	ldr	r3, [pc, #132]	; (8002bc4 <MX_GPIO_Init+0x100>)
 8002b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	607b      	str	r3, [r7, #4]
 8002b48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	603b      	str	r3, [r7, #0]
 8002b4e:	4b1d      	ldr	r3, [pc, #116]	; (8002bc4 <MX_GPIO_Init+0x100>)
 8002b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b52:	4a1c      	ldr	r2, [pc, #112]	; (8002bc4 <MX_GPIO_Init+0x100>)
 8002b54:	f043 0308 	orr.w	r3, r3, #8
 8002b58:	6313      	str	r3, [r2, #48]	; 0x30
 8002b5a:	4b1a      	ldr	r3, [pc, #104]	; (8002bc4 <MX_GPIO_Init+0x100>)
 8002b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5e:	f003 0308 	and.w	r3, r3, #8
 8002b62:	603b      	str	r3, [r7, #0]
 8002b64:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUTPUT_1_Pin|OUTPUT_2_Pin|USB_SIGN_Pin, GPIO_PIN_RESET);
 8002b66:	2200      	movs	r2, #0
 8002b68:	f44f 6141 	mov.w	r1, #3088	; 0xc10
 8002b6c:	4816      	ldr	r0, [pc, #88]	; (8002bc8 <MX_GPIO_Init+0x104>)
 8002b6e:	f005 fff7 	bl	8008b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ENCODER_RESET_Pin|PULSE_WRITE_Pin|STOP_Pin, GPIO_PIN_RESET);
 8002b72:	2200      	movs	r2, #0
 8002b74:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 8002b78:	4814      	ldr	r0, [pc, #80]	; (8002bcc <MX_GPIO_Init+0x108>)
 8002b7a:	f005 fff1 	bl	8008b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OUTPUT_1_Pin|OUTPUT_2_Pin|USB_SIGN_Pin;
 8002b7e:	f44f 6341 	mov.w	r3, #3088	; 0xc10
 8002b82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b84:	2301      	movs	r3, #1
 8002b86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b90:	f107 0314 	add.w	r3, r7, #20
 8002b94:	4619      	mov	r1, r3
 8002b96:	480c      	ldr	r0, [pc, #48]	; (8002bc8 <MX_GPIO_Init+0x104>)
 8002b98:	f005 fe48 	bl	800882c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = ENCODER_RESET_Pin|PULSE_WRITE_Pin|STOP_Pin;
 8002b9c:	f44f 53c2 	mov.w	r3, #6208	; 0x1840
 8002ba0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002baa:	2300      	movs	r3, #0
 8002bac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002bae:	f107 0314 	add.w	r3, r7, #20
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	4805      	ldr	r0, [pc, #20]	; (8002bcc <MX_GPIO_Init+0x108>)
 8002bb6:	f005 fe39 	bl	800882c <HAL_GPIO_Init>

}
 8002bba:	bf00      	nop
 8002bbc:	3728      	adds	r7, #40	; 0x28
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	40023800 	.word	0x40023800
 8002bc8:	40020400 	.word	0x40020400
 8002bcc:	40020c00 	.word	0x40020c00

08002bd0 <kinematicForward>:
#include "kinematic.h"
#include "common_def.h"
#include "math.h"
#include "system_params.h"

uint8_t		kinematicForward(SCARA_PositionTypeDef *pnt) {
 8002bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bd2:	b08b      	sub	sp, #44	; 0x2c
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
	double x, y, z, roll;

	x =   a1*cos(pnt->Theta1)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8002bde:	eeb0 0a47 	vmov.f32	s0, s14
 8002be2:	eef0 0a67 	vmov.f32	s1, s15
 8002be6:	f014 f823 	bl	8016c30 <cos>
 8002bea:	ec51 0b10 	vmov	r0, r1, d0
 8002bee:	a38c      	add	r3, pc, #560	; (adr r3, 8002e20 <kinematicForward+0x250>)
 8002bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf4:	f7fd fd10 	bl	8000618 <__aeabi_dmul>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	460c      	mov	r4, r1
 8002bfc:	461d      	mov	r5, r3
 8002bfe:	4626      	mov	r6, r4
		+ a2*cos(pnt->Theta1 + pnt->Theta2)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	4623      	mov	r3, r4
 8002c10:	f7fd fb4c 	bl	80002ac <__adddf3>
 8002c14:	4603      	mov	r3, r0
 8002c16:	460c      	mov	r4, r1
 8002c18:	ec44 3b17 	vmov	d7, r3, r4
 8002c1c:	eeb0 0a47 	vmov.f32	s0, s14
 8002c20:	eef0 0a67 	vmov.f32	s1, s15
 8002c24:	f014 f804 	bl	8016c30 <cos>
 8002c28:	ec51 0b10 	vmov	r0, r1, d0
 8002c2c:	f04f 0200 	mov.w	r2, #0
 8002c30:	4b7f      	ldr	r3, [pc, #508]	; (8002e30 <kinematicForward+0x260>)
 8002c32:	f7fd fcf1 	bl	8000618 <__aeabi_dmul>
 8002c36:	4603      	mov	r3, r0
 8002c38:	460c      	mov	r4, r1
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	4623      	mov	r3, r4
 8002c3e:	4628      	mov	r0, r5
 8002c40:	4631      	mov	r1, r6
 8002c42:	f7fd fb33 	bl	80002ac <__adddf3>
 8002c46:	4603      	mov	r3, r0
 8002c48:	460c      	mov	r4, r1
 8002c4a:	461d      	mov	r5, r3
 8002c4c:	4626      	mov	r6, r4
		+ a4*cos(pnt->Theta1 + pnt->Theta2 - pnt->Theta4);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	4623      	mov	r3, r4
 8002c5e:	f7fd fb25 	bl	80002ac <__adddf3>
 8002c62:	4603      	mov	r3, r0
 8002c64:	460c      	mov	r4, r1
 8002c66:	4618      	mov	r0, r3
 8002c68:	4621      	mov	r1, r4
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8002c70:	461a      	mov	r2, r3
 8002c72:	4623      	mov	r3, r4
 8002c74:	f7fd fb18 	bl	80002a8 <__aeabi_dsub>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	460c      	mov	r4, r1
 8002c7c:	ec44 3b17 	vmov	d7, r3, r4
 8002c80:	eeb0 0a47 	vmov.f32	s0, s14
 8002c84:	eef0 0a67 	vmov.f32	s1, s15
 8002c88:	f013 ffd2 	bl	8016c30 <cos>
 8002c8c:	ec51 0b10 	vmov	r0, r1, d0
 8002c90:	f04f 0200 	mov.w	r2, #0
 8002c94:	4b67      	ldr	r3, [pc, #412]	; (8002e34 <kinematicForward+0x264>)
 8002c96:	f7fd fcbf 	bl	8000618 <__aeabi_dmul>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	460c      	mov	r4, r1
	x =   a1*cos(pnt->Theta1)
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	4623      	mov	r3, r4
 8002ca2:	4628      	mov	r0, r5
 8002ca4:	4631      	mov	r1, r6
 8002ca6:	f7fd fb01 	bl	80002ac <__adddf3>
 8002caa:	4603      	mov	r3, r0
 8002cac:	460c      	mov	r4, r1
 8002cae:	e9c7 3408 	strd	r3, r4, [r7, #32]
	y =   a1*sin(pnt->Theta1)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8002cb8:	eeb0 0a47 	vmov.f32	s0, s14
 8002cbc:	eef0 0a67 	vmov.f32	s1, s15
 8002cc0:	f013 fffa 	bl	8016cb8 <sin>
 8002cc4:	ec51 0b10 	vmov	r0, r1, d0
 8002cc8:	a355      	add	r3, pc, #340	; (adr r3, 8002e20 <kinematicForward+0x250>)
 8002cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cce:	f7fd fca3 	bl	8000618 <__aeabi_dmul>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	460c      	mov	r4, r1
 8002cd6:	461d      	mov	r5, r3
 8002cd8:	4626      	mov	r6, r4
		+ a2*sin(pnt->Theta1 + pnt->Theta2)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	4623      	mov	r3, r4
 8002cea:	f7fd fadf 	bl	80002ac <__adddf3>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	460c      	mov	r4, r1
 8002cf2:	ec44 3b17 	vmov	d7, r3, r4
 8002cf6:	eeb0 0a47 	vmov.f32	s0, s14
 8002cfa:	eef0 0a67 	vmov.f32	s1, s15
 8002cfe:	f013 ffdb 	bl	8016cb8 <sin>
 8002d02:	ec51 0b10 	vmov	r0, r1, d0
 8002d06:	f04f 0200 	mov.w	r2, #0
 8002d0a:	4b49      	ldr	r3, [pc, #292]	; (8002e30 <kinematicForward+0x260>)
 8002d0c:	f7fd fc84 	bl	8000618 <__aeabi_dmul>
 8002d10:	4603      	mov	r3, r0
 8002d12:	460c      	mov	r4, r1
 8002d14:	461a      	mov	r2, r3
 8002d16:	4623      	mov	r3, r4
 8002d18:	4628      	mov	r0, r5
 8002d1a:	4631      	mov	r1, r6
 8002d1c:	f7fd fac6 	bl	80002ac <__adddf3>
 8002d20:	4603      	mov	r3, r0
 8002d22:	460c      	mov	r4, r1
 8002d24:	461d      	mov	r5, r3
 8002d26:	4626      	mov	r6, r4
		+ a4*sin(pnt->Theta1 + pnt->Theta2 - pnt->Theta4);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 8002d34:	461a      	mov	r2, r3
 8002d36:	4623      	mov	r3, r4
 8002d38:	f7fd fab8 	bl	80002ac <__adddf3>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	460c      	mov	r4, r1
 8002d40:	4618      	mov	r0, r3
 8002d42:	4621      	mov	r1, r4
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	4623      	mov	r3, r4
 8002d4e:	f7fd faab 	bl	80002a8 <__aeabi_dsub>
 8002d52:	4603      	mov	r3, r0
 8002d54:	460c      	mov	r4, r1
 8002d56:	ec44 3b17 	vmov	d7, r3, r4
 8002d5a:	eeb0 0a47 	vmov.f32	s0, s14
 8002d5e:	eef0 0a67 	vmov.f32	s1, s15
 8002d62:	f013 ffa9 	bl	8016cb8 <sin>
 8002d66:	ec51 0b10 	vmov	r0, r1, d0
 8002d6a:	f04f 0200 	mov.w	r2, #0
 8002d6e:	4b31      	ldr	r3, [pc, #196]	; (8002e34 <kinematicForward+0x264>)
 8002d70:	f7fd fc52 	bl	8000618 <__aeabi_dmul>
 8002d74:	4603      	mov	r3, r0
 8002d76:	460c      	mov	r4, r1
	y =   a1*sin(pnt->Theta1)
 8002d78:	461a      	mov	r2, r3
 8002d7a:	4623      	mov	r3, r4
 8002d7c:	4628      	mov	r0, r5
 8002d7e:	4631      	mov	r1, r6
 8002d80:	f7fd fa94 	bl	80002ac <__adddf3>
 8002d84:	4603      	mov	r3, r0
 8002d86:	460c      	mov	r4, r1
 8002d88:	e9c7 3406 	strd	r3, r4, [r7, #24]
	z =   d1 - pnt->D3 - d4;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 8002d92:	461a      	mov	r2, r3
 8002d94:	4623      	mov	r3, r4
 8002d96:	a124      	add	r1, pc, #144	; (adr r1, 8002e28 <kinematicForward+0x258>)
 8002d98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002d9c:	f7fd fa84 	bl	80002a8 <__aeabi_dsub>
 8002da0:	4603      	mov	r3, r0
 8002da2:	460c      	mov	r4, r1
 8002da4:	4618      	mov	r0, r3
 8002da6:	4621      	mov	r1, r4
 8002da8:	f04f 0200 	mov.w	r2, #0
 8002dac:	4b22      	ldr	r3, [pc, #136]	; (8002e38 <kinematicForward+0x268>)
 8002dae:	f7fd fa7b 	bl	80002a8 <__aeabi_dsub>
 8002db2:	4603      	mov	r3, r0
 8002db4:	460c      	mov	r4, r1
 8002db6:	e9c7 3404 	strd	r3, r4, [r7, #16]
	roll = pnt->Theta1 + pnt->Theta2 - pnt->Theta4;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	4623      	mov	r3, r4
 8002dca:	f7fd fa6f 	bl	80002ac <__adddf3>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	460c      	mov	r4, r1
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	4621      	mov	r1, r4
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8002ddc:	461a      	mov	r2, r3
 8002dde:	4623      	mov	r3, r4
 8002de0:	f7fd fa62 	bl	80002a8 <__aeabi_dsub>
 8002de4:	4603      	mov	r3, r0
 8002de6:	460c      	mov	r4, r1
 8002de8:	e9c7 3402 	strd	r3, r4, [r7, #8]

	pnt->x = x;
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002df2:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	pnt->y = y;
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002dfc:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	pnt->z = z;
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002e06:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	pnt->roll = roll;
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002e10:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

	return TRUE;
 8002e14:	2301      	movs	r3, #1
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	372c      	adds	r7, #44	; 0x2c
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	00000000 	.word	0x00000000
 8002e24:	4068a000 	.word	0x4068a000
 8002e28:	00000000 	.word	0x00000000
 8002e2c:	406a6000 	.word	0x406a6000
 8002e30:	40640000 	.word	0x40640000
 8002e34:	403e0000 	.word	0x403e0000
 8002e38:	40534000 	.word	0x40534000
 8002e3c:	00000000 	.word	0x00000000

08002e40 <kinematicInverse>:

uint8_t		kinematicInverse(SCARA_PositionTypeDef *pnt, SCARA_PositionTypeDef current) {
 8002e40:	b082      	sub	sp, #8
 8002e42:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e46:	b0a0      	sub	sp, #128	; 0x80
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8002e50:	e881 000c 	stmia.w	r1, {r2, r3}
	double theta1, theta2, theta2_positive, theta2_negative, d3, theta4 , pWx, pWy;
	double s1, c1, s2, s2_positive, s2_negative, c2 , temp;

	d3  = d1 - d4 - pnt->z;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002e5a:	a174      	add	r1, pc, #464	; (adr r1, 800302c <kinematicInverse+0x1ec>)
 8002e5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002e60:	f7fd fa22 	bl	80002a8 <__aeabi_dsub>
 8002e64:	4602      	mov	r2, r0
 8002e66:	460b      	mov	r3, r1
 8002e68:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	pWx = pnt->x - a4*cos(pnt->roll);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	e9d3 ab0a 	ldrd	sl, fp, [r3, #40]	; 0x28
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8002e78:	eeb0 0a47 	vmov.f32	s0, s14
 8002e7c:	eef0 0a67 	vmov.f32	s1, s15
 8002e80:	f013 fed6 	bl	8016c30 <cos>
 8002e84:	ec51 0b10 	vmov	r0, r1, d0
 8002e88:	f04f 0200 	mov.w	r2, #0
 8002e8c:	4b64      	ldr	r3, [pc, #400]	; (8003020 <kinematicInverse+0x1e0>)
 8002e8e:	f7fd fbc3 	bl	8000618 <__aeabi_dmul>
 8002e92:	4602      	mov	r2, r0
 8002e94:	460b      	mov	r3, r1
 8002e96:	4650      	mov	r0, sl
 8002e98:	4659      	mov	r1, fp
 8002e9a:	f7fd fa05 	bl	80002a8 <__aeabi_dsub>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	pWy = pnt->y - a4*sin(pnt->roll);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	e9d3 ab0c 	ldrd	sl, fp, [r3, #48]	; 0x30
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8002eb2:	eeb0 0a47 	vmov.f32	s0, s14
 8002eb6:	eef0 0a67 	vmov.f32	s1, s15
 8002eba:	f013 fefd 	bl	8016cb8 <sin>
 8002ebe:	ec51 0b10 	vmov	r0, r1, d0
 8002ec2:	f04f 0200 	mov.w	r2, #0
 8002ec6:	4b56      	ldr	r3, [pc, #344]	; (8003020 <kinematicInverse+0x1e0>)
 8002ec8:	f7fd fba6 	bl	8000618 <__aeabi_dmul>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	460b      	mov	r3, r1
 8002ed0:	4650      	mov	r0, sl
 8002ed2:	4659      	mov	r1, fp
 8002ed4:	f7fd f9e8 	bl	80002a8 <__aeabi_dsub>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	460b      	mov	r3, r1
 8002edc:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	c2  = (pWx*pWx + pWy*pWy - a1*a1 - a2*a2) / (2*a1*a2);
 8002ee0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002ee4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002ee8:	f7fd fb96 	bl	8000618 <__aeabi_dmul>
 8002eec:	4602      	mov	r2, r0
 8002eee:	460b      	mov	r3, r1
 8002ef0:	4692      	mov	sl, r2
 8002ef2:	469b      	mov	fp, r3
 8002ef4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002ef8:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002efc:	f7fd fb8c 	bl	8000618 <__aeabi_dmul>
 8002f00:	4602      	mov	r2, r0
 8002f02:	460b      	mov	r3, r1
 8002f04:	4650      	mov	r0, sl
 8002f06:	4659      	mov	r1, fp
 8002f08:	f7fd f9d0 	bl	80002ac <__adddf3>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	460b      	mov	r3, r1
 8002f10:	4610      	mov	r0, r2
 8002f12:	4619      	mov	r1, r3
 8002f14:	a33e      	add	r3, pc, #248	; (adr r3, 8003010 <kinematicInverse+0x1d0>)
 8002f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f1a:	f7fd f9c5 	bl	80002a8 <__aeabi_dsub>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	460b      	mov	r3, r1
 8002f22:	4610      	mov	r0, r2
 8002f24:	4619      	mov	r1, r3
 8002f26:	f04f 0200 	mov.w	r2, #0
 8002f2a:	4b3e      	ldr	r3, [pc, #248]	; (8003024 <kinematicInverse+0x1e4>)
 8002f2c:	f7fd f9bc 	bl	80002a8 <__aeabi_dsub>
 8002f30:	4602      	mov	r2, r0
 8002f32:	460b      	mov	r3, r1
 8002f34:	4610      	mov	r0, r2
 8002f36:	4619      	mov	r1, r3
 8002f38:	a337      	add	r3, pc, #220	; (adr r3, 8003018 <kinematicInverse+0x1d8>)
 8002f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f3e:	f7fd fc95 	bl	800086c <__aeabi_ddiv>
 8002f42:	4602      	mov	r2, r0
 8002f44:	460b      	mov	r3, r1
 8002f46:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	temp = 1 - c2*c2;
 8002f4a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002f4e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002f52:	f7fd fb61 	bl	8000618 <__aeabi_dmul>
 8002f56:	4602      	mov	r2, r0
 8002f58:	460b      	mov	r3, r1
 8002f5a:	f04f 0000 	mov.w	r0, #0
 8002f5e:	4932      	ldr	r1, [pc, #200]	; (8003028 <kinematicInverse+0x1e8>)
 8002f60:	f7fd f9a2 	bl	80002a8 <__aeabi_dsub>
 8002f64:	4602      	mov	r2, r0
 8002f66:	460b      	mov	r3, r1
 8002f68:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	if ( temp < 0 ) {
 8002f6c:	f04f 0200 	mov.w	r2, #0
 8002f70:	f04f 0300 	mov.w	r3, #0
 8002f74:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002f78:	f7fd fdc0 	bl	8000afc <__aeabi_dcmplt>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <kinematicInverse+0x146>
		return FALSE;
 8002f82:	2300      	movs	r3, #0
 8002f84:	e149      	b.n	800321a <kinematicInverse+0x3da>
	}
	s2_positive  = sqrt(temp); // Note that there are 2 solution: elbow up & elbow down
 8002f86:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 8002f8a:	f013 ff1f 	bl	8016dcc <sqrt>
 8002f8e:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
	s2_negative	 = -s2_positive;
 8002f92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f94:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f98:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002f9c:	63fb      	str	r3, [r7, #60]	; 0x3c

	theta2_positive = atan2(s2_positive,c2);
 8002f9e:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 8002fa2:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8002fa6:	f013 ff0f 	bl	8016dc8 <atan2>
 8002faa:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
	theta2_negative = atan2(s2_negative,c2);
 8002fae:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 8002fb2:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8002fb6:	f013 ff07 	bl	8016dc8 <atan2>
 8002fba:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	// Choose relevant situation : nearest
	if ( fabs( theta2_positive - current.Theta2) <= fabs( theta2_negative - current.Theta2)) {
 8002fbe:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8002fc2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002fc6:	f7fd f96f 	bl	80002a8 <__aeabi_dsub>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	460b      	mov	r3, r1
 8002fce:	4614      	mov	r4, r2
 8002fd0:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8002fd4:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8002fd8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002fdc:	f7fd f964 	bl	80002a8 <__aeabi_dsub>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	460b      	mov	r3, r1
 8002fe4:	4690      	mov	r8, r2
 8002fe6:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8002fea:	4642      	mov	r2, r8
 8002fec:	464b      	mov	r3, r9
 8002fee:	4620      	mov	r0, r4
 8002ff0:	4629      	mov	r1, r5
 8002ff2:	f7fd fd8d 	bl	8000b10 <__aeabi_dcmple>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d01b      	beq.n	8003034 <kinematicInverse+0x1f4>
		s2 		= s2_positive;
 8002ffc:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8003000:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
		theta2 	= theta2_positive;
 8003004:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8003008:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
 800300c:	e01a      	b.n	8003044 <kinematicInverse+0x204>
 800300e:	bf00      	nop
 8003010:	00000000 	.word	0x00000000
 8003014:	40e2f320 	.word	0x40e2f320
 8003018:	00000000 	.word	0x00000000
 800301c:	40eec800 	.word	0x40eec800
 8003020:	403e0000 	.word	0x403e0000
 8003024:	40d90000 	.word	0x40d90000
 8003028:	3ff00000 	.word	0x3ff00000
 800302c:	00000000 	.word	0x00000000
 8003030:	4060c000 	.word	0x4060c000
	} else {
		s2 		= s2_negative;
 8003034:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8003038:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
		theta2 	= theta2_negative;
 800303c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8003040:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	}

	s1 = ((a1 + a2*c2)*pWy - a2*s2*pWx) / (pWx*pWx + pWy*pWy);
 8003044:	f04f 0200 	mov.w	r2, #0
 8003048:	4b79      	ldr	r3, [pc, #484]	; (8003230 <kinematicInverse+0x3f0>)
 800304a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800304e:	f7fd fae3 	bl	8000618 <__aeabi_dmul>
 8003052:	4603      	mov	r3, r0
 8003054:	460c      	mov	r4, r1
 8003056:	4618      	mov	r0, r3
 8003058:	4621      	mov	r1, r4
 800305a:	a373      	add	r3, pc, #460	; (adr r3, 8003228 <kinematicInverse+0x3e8>)
 800305c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003060:	f7fd f924 	bl	80002ac <__adddf3>
 8003064:	4603      	mov	r3, r0
 8003066:	460c      	mov	r4, r1
 8003068:	4618      	mov	r0, r3
 800306a:	4621      	mov	r1, r4
 800306c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003070:	f7fd fad2 	bl	8000618 <__aeabi_dmul>
 8003074:	4603      	mov	r3, r0
 8003076:	460c      	mov	r4, r1
 8003078:	4625      	mov	r5, r4
 800307a:	461c      	mov	r4, r3
 800307c:	f04f 0200 	mov.w	r2, #0
 8003080:	4b6b      	ldr	r3, [pc, #428]	; (8003230 <kinematicInverse+0x3f0>)
 8003082:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003086:	f7fd fac7 	bl	8000618 <__aeabi_dmul>
 800308a:	4602      	mov	r2, r0
 800308c:	460b      	mov	r3, r1
 800308e:	4610      	mov	r0, r2
 8003090:	4619      	mov	r1, r3
 8003092:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003096:	f7fd fabf 	bl	8000618 <__aeabi_dmul>
 800309a:	4602      	mov	r2, r0
 800309c:	460b      	mov	r3, r1
 800309e:	4620      	mov	r0, r4
 80030a0:	4629      	mov	r1, r5
 80030a2:	f7fd f901 	bl	80002a8 <__aeabi_dsub>
 80030a6:	4603      	mov	r3, r0
 80030a8:	460c      	mov	r4, r1
 80030aa:	4625      	mov	r5, r4
 80030ac:	461c      	mov	r4, r3
 80030ae:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80030b2:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80030b6:	f7fd faaf 	bl	8000618 <__aeabi_dmul>
 80030ba:	4602      	mov	r2, r0
 80030bc:	460b      	mov	r3, r1
 80030be:	4690      	mov	r8, r2
 80030c0:	4699      	mov	r9, r3
 80030c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80030c6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80030ca:	f7fd faa5 	bl	8000618 <__aeabi_dmul>
 80030ce:	4602      	mov	r2, r0
 80030d0:	460b      	mov	r3, r1
 80030d2:	4640      	mov	r0, r8
 80030d4:	4649      	mov	r1, r9
 80030d6:	f7fd f8e9 	bl	80002ac <__adddf3>
 80030da:	4602      	mov	r2, r0
 80030dc:	460b      	mov	r3, r1
 80030de:	4620      	mov	r0, r4
 80030e0:	4629      	mov	r1, r5
 80030e2:	f7fd fbc3 	bl	800086c <__aeabi_ddiv>
 80030e6:	4603      	mov	r3, r0
 80030e8:	460c      	mov	r4, r1
 80030ea:	e9c7 3408 	strd	r3, r4, [r7, #32]
	c1 = ((a1 + a2*c2)*pWx + a2*s2*pWy) / (pWx*pWx + pWy*pWy);
 80030ee:	f04f 0200 	mov.w	r2, #0
 80030f2:	4b4f      	ldr	r3, [pc, #316]	; (8003230 <kinematicInverse+0x3f0>)
 80030f4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80030f8:	f7fd fa8e 	bl	8000618 <__aeabi_dmul>
 80030fc:	4603      	mov	r3, r0
 80030fe:	460c      	mov	r4, r1
 8003100:	4618      	mov	r0, r3
 8003102:	4621      	mov	r1, r4
 8003104:	a348      	add	r3, pc, #288	; (adr r3, 8003228 <kinematicInverse+0x3e8>)
 8003106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800310a:	f7fd f8cf 	bl	80002ac <__adddf3>
 800310e:	4603      	mov	r3, r0
 8003110:	460c      	mov	r4, r1
 8003112:	4618      	mov	r0, r3
 8003114:	4621      	mov	r1, r4
 8003116:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800311a:	f7fd fa7d 	bl	8000618 <__aeabi_dmul>
 800311e:	4603      	mov	r3, r0
 8003120:	460c      	mov	r4, r1
 8003122:	4625      	mov	r5, r4
 8003124:	461c      	mov	r4, r3
 8003126:	f04f 0200 	mov.w	r2, #0
 800312a:	4b41      	ldr	r3, [pc, #260]	; (8003230 <kinematicInverse+0x3f0>)
 800312c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003130:	f7fd fa72 	bl	8000618 <__aeabi_dmul>
 8003134:	4602      	mov	r2, r0
 8003136:	460b      	mov	r3, r1
 8003138:	4610      	mov	r0, r2
 800313a:	4619      	mov	r1, r3
 800313c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003140:	f7fd fa6a 	bl	8000618 <__aeabi_dmul>
 8003144:	4602      	mov	r2, r0
 8003146:	460b      	mov	r3, r1
 8003148:	4620      	mov	r0, r4
 800314a:	4629      	mov	r1, r5
 800314c:	f7fd f8ae 	bl	80002ac <__adddf3>
 8003150:	4603      	mov	r3, r0
 8003152:	460c      	mov	r4, r1
 8003154:	4625      	mov	r5, r4
 8003156:	461c      	mov	r4, r3
 8003158:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800315c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003160:	f7fd fa5a 	bl	8000618 <__aeabi_dmul>
 8003164:	4602      	mov	r2, r0
 8003166:	460b      	mov	r3, r1
 8003168:	4690      	mov	r8, r2
 800316a:	4699      	mov	r9, r3
 800316c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003170:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003174:	f7fd fa50 	bl	8000618 <__aeabi_dmul>
 8003178:	4602      	mov	r2, r0
 800317a:	460b      	mov	r3, r1
 800317c:	4640      	mov	r0, r8
 800317e:	4649      	mov	r1, r9
 8003180:	f7fd f894 	bl	80002ac <__adddf3>
 8003184:	4602      	mov	r2, r0
 8003186:	460b      	mov	r3, r1
 8003188:	4620      	mov	r0, r4
 800318a:	4629      	mov	r1, r5
 800318c:	f7fd fb6e 	bl	800086c <__aeabi_ddiv>
 8003190:	4603      	mov	r3, r0
 8003192:	460c      	mov	r4, r1
 8003194:	e9c7 3406 	strd	r3, r4, [r7, #24]
	theta1 = atan2(s1,c1);
 8003198:	ed97 1b06 	vldr	d1, [r7, #24]
 800319c:	ed97 0b08 	vldr	d0, [r7, #32]
 80031a0:	f013 fe12 	bl	8016dc8 <atan2>
 80031a4:	ed87 0b04 	vstr	d0, [r7, #16]
 	theta4 = theta1 + theta2 - pnt->roll;
 80031a8:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80031ac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80031b0:	f7fd f87c 	bl	80002ac <__adddf3>
 80031b4:	4603      	mov	r3, r0
 80031b6:	460c      	mov	r4, r1
 80031b8:	4618      	mov	r0, r3
 80031ba:	4621      	mov	r1, r4
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	e9d3 3410 	ldrd	r3, r4, [r3, #64]	; 0x40
 80031c2:	461a      	mov	r2, r3
 80031c4:	4623      	mov	r3, r4
 80031c6:	f7fd f86f 	bl	80002a8 <__aeabi_dsub>
 80031ca:	4603      	mov	r3, r0
 80031cc:	460c      	mov	r4, r1
 80031ce:	e9c7 3402 	strd	r3, r4, [r7, #8]

	if ( SCARA_STATUS_OK != scaraCheckWorkSpace4(theta1, theta2, d3, theta4)) {
 80031d2:	ed97 3b02 	vldr	d3, [r7, #8]
 80031d6:	ed97 2b1a 	vldr	d2, [r7, #104]	; 0x68
 80031da:	ed97 1b1e 	vldr	d1, [r7, #120]	; 0x78
 80031de:	ed97 0b04 	vldr	d0, [r7, #16]
 80031e2:	f004 f8f1 	bl	80073c8 <scaraCheckWorkSpace4>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d001      	beq.n	80031f0 <kinematicInverse+0x3b0>
		return FALSE; // Over workspace !!!
 80031ec:	2300      	movs	r3, #0
 80031ee:	e014      	b.n	800321a <kinematicInverse+0x3da>
	}
	pnt->Theta1 = theta1;
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80031f6:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	pnt->Theta2 = theta2;
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8003200:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	pnt->D3		= d3;
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 800320a:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	pnt->Theta4 = theta4;
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003214:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

	return TRUE; // All is well
 8003218:	2301      	movs	r3, #1
}
 800321a:	4618      	mov	r0, r3
 800321c:	3780      	adds	r7, #128	; 0x80
 800321e:	46bd      	mov	sp, r7
 8003220:	e8bd 4fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003224:	b002      	add	sp, #8
 8003226:	4770      	bx	lr
 8003228:	00000000 	.word	0x00000000
 800322c:	4068a000 	.word	0x4068a000
 8003230:	40640000 	.word	0x40640000

08003234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003238:	f004 fe14 	bl	8007e64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800323c:	f000 f810 	bl	8003260 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003240:	f7ff fc40 	bl	8002ac4 <MX_GPIO_Init>
  MX_DMA_Init();
 8003244:	f7fe fe78 	bl	8001f38 <MX_DMA_Init>
  MX_UART4_Init();
 8003248:	f004 fd0e 	bl	8007c68 <MX_UART4_Init>
  MX_FSMC_Init();
 800324c:	f7ff fb74 	bl	8002938 <MX_FSMC_Init>
  MX_TIM7_Init();
 8003250:	f004 fcac 	bl	8007bac <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8003254:	f7fe feaa 	bl	8001fac <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8003258:	f00b fbd2 	bl	800ea00 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800325c:	e7fe      	b.n	800325c <main+0x28>
	...

08003260 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b094      	sub	sp, #80	; 0x50
 8003264:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003266:	f107 0320 	add.w	r3, r7, #32
 800326a:	2230      	movs	r2, #48	; 0x30
 800326c:	2100      	movs	r1, #0
 800326e:	4618      	mov	r0, r3
 8003270:	f00f fad2 	bl	8012818 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003274:	f107 030c 	add.w	r3, r7, #12
 8003278:	2200      	movs	r2, #0
 800327a:	601a      	str	r2, [r3, #0]
 800327c:	605a      	str	r2, [r3, #4]
 800327e:	609a      	str	r2, [r3, #8]
 8003280:	60da      	str	r2, [r3, #12]
 8003282:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003284:	2300      	movs	r3, #0
 8003286:	60bb      	str	r3, [r7, #8]
 8003288:	4b28      	ldr	r3, [pc, #160]	; (800332c <SystemClock_Config+0xcc>)
 800328a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328c:	4a27      	ldr	r2, [pc, #156]	; (800332c <SystemClock_Config+0xcc>)
 800328e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003292:	6413      	str	r3, [r2, #64]	; 0x40
 8003294:	4b25      	ldr	r3, [pc, #148]	; (800332c <SystemClock_Config+0xcc>)
 8003296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003298:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800329c:	60bb      	str	r3, [r7, #8]
 800329e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80032a0:	2300      	movs	r3, #0
 80032a2:	607b      	str	r3, [r7, #4]
 80032a4:	4b22      	ldr	r3, [pc, #136]	; (8003330 <SystemClock_Config+0xd0>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a21      	ldr	r2, [pc, #132]	; (8003330 <SystemClock_Config+0xd0>)
 80032aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032ae:	6013      	str	r3, [r2, #0]
 80032b0:	4b1f      	ldr	r3, [pc, #124]	; (8003330 <SystemClock_Config+0xd0>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032b8:	607b      	str	r3, [r7, #4]
 80032ba:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80032bc:	2301      	movs	r3, #1
 80032be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80032c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80032c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80032c6:	2302      	movs	r3, #2
 80032c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80032ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80032ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80032d0:	2308      	movs	r3, #8
 80032d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80032d4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80032d8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80032da:	2302      	movs	r3, #2
 80032dc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80032de:	2307      	movs	r3, #7
 80032e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80032e2:	f107 0320 	add.w	r3, r7, #32
 80032e6:	4618      	mov	r0, r3
 80032e8:	f006 fe34 	bl	8009f54 <HAL_RCC_OscConfig>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d001      	beq.n	80032f6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80032f2:	f000 f831 	bl	8003358 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80032f6:	230f      	movs	r3, #15
 80032f8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80032fa:	2302      	movs	r3, #2
 80032fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80032fe:	2300      	movs	r3, #0
 8003300:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003302:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003306:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003308:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800330c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800330e:	f107 030c 	add.w	r3, r7, #12
 8003312:	2105      	movs	r1, #5
 8003314:	4618      	mov	r0, r3
 8003316:	f007 f88d 	bl	800a434 <HAL_RCC_ClockConfig>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d001      	beq.n	8003324 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8003320:	f000 f81a 	bl	8003358 <Error_Handler>
  }
}
 8003324:	bf00      	nop
 8003326:	3750      	adds	r7, #80	; 0x50
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	40023800 	.word	0x40023800
 8003330:	40007000 	.word	0x40007000

08003334 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a04      	ldr	r2, [pc, #16]	; (8003354 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d101      	bne.n	800334a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003346:	f004 fdaf 	bl	8007ea8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800334a:	bf00      	nop
 800334c:	3708      	adds	r7, #8
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	40001000 	.word	0x40001000

08003358 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003358:	b480      	push	{r7}
 800335a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800335c:	bf00      	nop
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr

08003366 <ringBuff_PushChar>:
 *  data		: data to write
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t	ringBuff_PushChar(RINGBUFFER_TypeDef *ringbuff, uint8_t data) {
 8003366:	b480      	push	{r7}
 8003368:	b083      	sub	sp, #12
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
 800336e:	460b      	mov	r3, r1
 8003370:	70fb      	strb	r3, [r7, #3]
	if (ringbuff->isFull_Flag) {
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
 8003378:	2b00      	cmp	r3, #0
 800337a:	d001      	beq.n	8003380 <ringBuff_PushChar+0x1a>
		return FALSE;
 800337c:	2300      	movs	r3, #0
 800337e:	e024      	b.n	80033ca <ringBuff_PushChar+0x64>
	} else {
			ringbuff->Array[ringbuff->head]	= data;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	78f9      	ldrb	r1, [r7, #3]
 800338a:	54d1      	strb	r1, [r2, r3]
			ringbuff->head					= (ringbuff->head + 1) % RINGBUFFER_SIZE;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003392:	3301      	adds	r3, #1
 8003394:	425a      	negs	r2, r3
 8003396:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800339a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800339e:	bf58      	it	pl
 80033a0:	4253      	negpl	r3, r2
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
			if (ringbuff->head == ringbuff->tail) {
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d103      	bne.n	80033c0 <ringBuff_PushChar+0x5a>
				ringbuff->isFull_Flag = TRUE;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
			}
			ringbuff->isEmpty_Flag = FALSE;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 2409 	strb.w	r2, [r3, #1033]	; 0x409
			return TRUE;
 80033c8:	2301      	movs	r3, #1
	}
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	370c      	adds	r7, #12
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr

080033d6 <ringBuff_PopChar>:
 *  *ptr_data	: pointer of destination
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t	ringBuff_PopChar(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data) {
 80033d6:	b480      	push	{r7}
 80033d8:	b083      	sub	sp, #12
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
 80033de:	6039      	str	r1, [r7, #0]
	if (ringbuff->isEmpty_Flag) {
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f893 3409 	ldrb.w	r3, [r3, #1033]	; 0x409
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <ringBuff_PopChar+0x18>
		return FALSE;
 80033ea:	2300      	movs	r3, #0
 80033ec:	e025      	b.n	800343a <ringBuff_PopChar+0x64>
	} else {
			*ptr_data		= ringbuff->Array[ringbuff->tail];
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	5cd2      	ldrb	r2, [r2, r3]
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	701a      	strb	r2, [r3, #0]
			ringbuff->tail	= (ringbuff->tail +1) % RINGBUFFER_SIZE;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003402:	3301      	adds	r3, #1
 8003404:	425a      	negs	r2, r3
 8003406:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800340a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800340e:	bf58      	it	pl
 8003410:	4253      	negpl	r3, r2
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
			if (ringbuff->head == ringbuff->tail) {
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003424:	429a      	cmp	r2, r3
 8003426:	d103      	bne.n	8003430 <ringBuff_PopChar+0x5a>
				ringbuff->isEmpty_Flag = TRUE;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 2409 	strb.w	r2, [r3, #1033]	; 0x409
			}
			ringbuff->isFull_Flag = FALSE;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
			return TRUE;
 8003438:	2301      	movs	r3, #1
	}
}
 800343a:	4618      	mov	r0, r3
 800343c:	370c      	adds	r7, #12
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr

08003446 <ringBuff_PushArray>:
 *  *ptr_data	: pointer of source
 *  len			: maximum number of bytes that want to copy
 *
 *  returns:	: number of bytes copied
 */
int32_t ringBuff_PushArray(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data, int32_t len) {
 8003446:	b580      	push	{r7, lr}
 8003448:	b086      	sub	sp, #24
 800344a:	af00      	add	r7, sp, #0
 800344c:	60f8      	str	r0, [r7, #12]
 800344e:	60b9      	str	r1, [r7, #8]
 8003450:	607a      	str	r2, [r7, #4]
	int16_t success_number;

	for (success_number = 0; success_number < len; success_number++) {
 8003452:	2300      	movs	r3, #0
 8003454:	82fb      	strh	r3, [r7, #22]
 8003456:	e011      	b.n	800347c <ringBuff_PushArray+0x36>
		if ( !ringBuff_PushChar(ringbuff, *(ptr_data + success_number))) {
 8003458:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800345c:	68ba      	ldr	r2, [r7, #8]
 800345e:	4413      	add	r3, r2
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	4619      	mov	r1, r3
 8003464:	68f8      	ldr	r0, [r7, #12]
 8003466:	f7ff ff7e 	bl	8003366 <ringBuff_PushChar>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d00b      	beq.n	8003488 <ringBuff_PushArray+0x42>
	for (success_number = 0; success_number < len; success_number++) {
 8003470:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003474:	b29b      	uxth	r3, r3
 8003476:	3301      	adds	r3, #1
 8003478:	b29b      	uxth	r3, r3
 800347a:	82fb      	strh	r3, [r7, #22]
 800347c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	429a      	cmp	r2, r3
 8003484:	dce8      	bgt.n	8003458 <ringBuff_PushArray+0x12>
 8003486:	e000      	b.n	800348a <ringBuff_PushArray+0x44>
			break;
 8003488:	bf00      	nop
		}// stop when ring buffer FULL
	}
	return success_number;
 800348a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 800348e:	4618      	mov	r0, r3
 8003490:	3718      	adds	r7, #24
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <ringBuff_PopArray>:
 *  *ptr_data	: pointer of destination
 *  len			: maximum number of bytes that want to copy
 *
 *  returns:	: number of bytes copied
 */
int32_t ringBuff_PopArray(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data, int32_t len) {
 8003496:	b580      	push	{r7, lr}
 8003498:	b086      	sub	sp, #24
 800349a:	af00      	add	r7, sp, #0
 800349c:	60f8      	str	r0, [r7, #12]
 800349e:	60b9      	str	r1, [r7, #8]
 80034a0:	607a      	str	r2, [r7, #4]
	int32_t success_number;

	for (success_number = 0; success_number < len; success_number++) {
 80034a2:	2300      	movs	r3, #0
 80034a4:	617b      	str	r3, [r7, #20]
 80034a6:	e00c      	b.n	80034c2 <ringBuff_PopArray+0x2c>
		if ( !ringBuff_PopChar(ringbuff, (ptr_data + success_number))) {
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	68ba      	ldr	r2, [r7, #8]
 80034ac:	4413      	add	r3, r2
 80034ae:	4619      	mov	r1, r3
 80034b0:	68f8      	ldr	r0, [r7, #12]
 80034b2:	f7ff ff90 	bl	80033d6 <ringBuff_PopChar>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d007      	beq.n	80034cc <ringBuff_PopArray+0x36>
	for (success_number = 0; success_number < len; success_number++) {
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	3301      	adds	r3, #1
 80034c0:	617b      	str	r3, [r7, #20]
 80034c2:	697a      	ldr	r2, [r7, #20]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	dbee      	blt.n	80034a8 <ringBuff_PopArray+0x12>
 80034ca:	e000      	b.n	80034ce <ringBuff_PopArray+0x38>
			break;
 80034cc:	bf00      	nop
		}// stop when ring buffer EMPTY
	}
	return success_number;
 80034ce:	697b      	ldr	r3, [r7, #20]
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3718      	adds	r7, #24
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <ringBuff_DistanceOf>:
 *  cmp_char	: compare character
 *
 *  returns:	: distance from 'tail' to 'cmp_char'
 *  			  -1 'cmp_char' could not be found.
 */
int32_t	ringBuff_DistanceOf	(RINGBUFFER_TypeDef *ringbuff, uint8_t cmp_char) {
 80034d8:	b480      	push	{r7}
 80034da:	b087      	sub	sp, #28
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	460b      	mov	r3, r1
 80034e2:	70fb      	strb	r3, [r7, #3]
	int32_t index;
	int32_t distance = 0;
 80034e4:	2300      	movs	r3, #0
 80034e6:	613b      	str	r3, [r7, #16]

	index = ringbuff->tail;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80034ee:	617b      	str	r3, [r7, #20]
	if (ringbuff->isFull_Flag) {
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d036      	beq.n	8003568 <ringBuff_DistanceOf+0x90>
		for ( int32_t i = 0; i < RINGBUFFER_SIZE; i++, index = (index + 1) % RINGBUFFER_SIZE) {
 80034fa:	2300      	movs	r3, #0
 80034fc:	60fb      	str	r3, [r7, #12]
 80034fe:	e018      	b.n	8003532 <ringBuff_DistanceOf+0x5a>
				if ( cmp_char == ringbuff->Array[index]) {
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	4413      	add	r3, r2
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	78fa      	ldrb	r2, [r7, #3]
 800350a:	429a      	cmp	r2, r3
 800350c:	d101      	bne.n	8003512 <ringBuff_DistanceOf+0x3a>
					return distance;
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	e037      	b.n	8003582 <ringBuff_DistanceOf+0xaa>
				}
				distance++;
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	3301      	adds	r3, #1
 8003516:	613b      	str	r3, [r7, #16]
		for ( int32_t i = 0; i < RINGBUFFER_SIZE; i++, index = (index + 1) % RINGBUFFER_SIZE) {
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	3301      	adds	r3, #1
 800351c:	60fb      	str	r3, [r7, #12]
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	3301      	adds	r3, #1
 8003522:	425a      	negs	r2, r3
 8003524:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003528:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800352c:	bf58      	it	pl
 800352e:	4253      	negpl	r3, r2
 8003530:	617b      	str	r3, [r7, #20]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003538:	dbe2      	blt.n	8003500 <ringBuff_DistanceOf+0x28>
 800353a:	e020      	b.n	800357e <ringBuff_DistanceOf+0xa6>
			}

	} else {
		for ( ; (index != ringbuff->head) || !ringbuff->isEmpty_Flag; index = (index + 1) % RINGBUFFER_SIZE) {
				if ( cmp_char == ringbuff->Array[index]) {
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	4413      	add	r3, r2
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	78fa      	ldrb	r2, [r7, #3]
 8003546:	429a      	cmp	r2, r3
 8003548:	d101      	bne.n	800354e <ringBuff_DistanceOf+0x76>
					return distance;
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	e019      	b.n	8003582 <ringBuff_DistanceOf+0xaa>
				}
				distance++;
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	3301      	adds	r3, #1
 8003552:	613b      	str	r3, [r7, #16]
		for ( ; (index != ringbuff->head) || !ringbuff->isEmpty_Flag; index = (index + 1) % RINGBUFFER_SIZE) {
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	3301      	adds	r3, #1
 8003558:	425a      	negs	r2, r3
 800355a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800355e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003562:	bf58      	it	pl
 8003564:	4253      	negpl	r3, r2
 8003566:	617b      	str	r3, [r7, #20]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800356e:	697a      	ldr	r2, [r7, #20]
 8003570:	429a      	cmp	r2, r3
 8003572:	d1e3      	bne.n	800353c <ringBuff_DistanceOf+0x64>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f893 3409 	ldrb.w	r3, [r3, #1033]	; 0x409
 800357a:	2b00      	cmp	r3, #0
 800357c:	d0de      	beq.n	800353c <ringBuff_DistanceOf+0x64>
			}
	}
	return -1;
 800357e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003582:	4618      	mov	r0, r3
 8003584:	371c      	adds	r7, #28
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
	...

08003590 <lowlayer_setOutput>:
	uint16_t read_data = FSMC_Read(ADDRESS_LIMIT);

	return (uint8_t)read_data;
}

void	lowlayer_setOutput(uint8_t value) {
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	4603      	mov	r3, r0
 8003598:	71fb      	strb	r3, [r7, #7]
	if (value > 0) {
 800359a:	79fb      	ldrb	r3, [r7, #7]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d006      	beq.n	80035ae <lowlayer_setOutput+0x1e>
		HAL_GPIO_WritePin(OUTPUT_1_GPIO_Port, OUTPUT_1_Pin, GPIO_PIN_SET);
 80035a0:	2201      	movs	r2, #1
 80035a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80035a6:	4807      	ldr	r0, [pc, #28]	; (80035c4 <lowlayer_setOutput+0x34>)
 80035a8:	f005 fada 	bl	8008b60 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(OUTPUT_1_GPIO_Port, OUTPUT_1_Pin, GPIO_PIN_RESET);
	}
}
 80035ac:	e005      	b.n	80035ba <lowlayer_setOutput+0x2a>
		HAL_GPIO_WritePin(OUTPUT_1_GPIO_Port, OUTPUT_1_Pin, GPIO_PIN_RESET);
 80035ae:	2200      	movs	r2, #0
 80035b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80035b4:	4803      	ldr	r0, [pc, #12]	; (80035c4 <lowlayer_setOutput+0x34>)
 80035b6:	f005 fad3 	bl	8008b60 <HAL_GPIO_WritePin>
}
 80035ba:	bf00      	nop
 80035bc:	3708      	adds	r7, #8
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	40020400 	.word	0x40020400

080035c8 <scaraInitDuty>:
											 "Wrong Coordinate"
											};



SCARA_StatusTypeDef	scaraInitDuty		(DUTY_Command_TypeDef command) {
 80035c8:	b084      	sub	sp, #16
 80035ca:	b5b0      	push	{r4, r5, r7, lr}
 80035cc:	f5ad 7d12 	sub.w	sp, sp, #584	; 0x248
 80035d0:	af4e      	add	r7, sp, #312	; 0x138
 80035d2:	f507 7c90 	add.w	ip, r7, #288	; 0x120
 80035d6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	SCARA_StatusTypeDef status, status1, status2;

	/*----------- Space Task ------------*/
	if 			(DUTY_SPACE_TASK == command.space_type) {
 80035da:	f897 3129 	ldrb.w	r3, [r7, #297]	; 0x129
 80035de:	2b00      	cmp	r3, #0
 80035e0:	f040 82ba 	bne.w	8003b58 <scaraInitDuty+0x590>
		double total_s, angle_s;
		int8_t dir_angle;
		SCARA_PositionTypeDef	target_point;
		// Change Degree --> Radian
		command.target_point.roll = command.target_point.roll*PI/180.0;
 80035e4:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80035e8:	a3ab      	add	r3, pc, #684	; (adr r3, 8003898 <scaraInitDuty+0x2d0>)
 80035ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ee:	f7fd f813 	bl	8000618 <__aeabi_dmul>
 80035f2:	4602      	mov	r2, r0
 80035f4:	460b      	mov	r3, r1
 80035f6:	4610      	mov	r0, r2
 80035f8:	4619      	mov	r1, r3
 80035fa:	f04f 0200 	mov.w	r2, #0
 80035fe:	4ba8      	ldr	r3, [pc, #672]	; (80038a0 <scaraInitDuty+0x2d8>)
 8003600:	f7fd f934 	bl	800086c <__aeabi_ddiv>
 8003604:	4602      	mov	r2, r0
 8003606:	460b      	mov	r3, r1
 8003608:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
		// Coordinate
		if( DUTY_COORDINATES_REL == command.coordinate_type) {
 800360c:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8003610:	2b01      	cmp	r3, #1
 8003612:	d130      	bne.n	8003676 <scaraInitDuty+0xae>
			target_point.x 		= positionCurrent.x + command.target_point.x;
 8003614:	4ba3      	ldr	r3, [pc, #652]	; (80038a4 <scaraInitDuty+0x2dc>)
 8003616:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800361a:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800361e:	f7fc fe45 	bl	80002ac <__adddf3>
 8003622:	4602      	mov	r2, r0
 8003624:	460b      	mov	r3, r1
 8003626:	4639      	mov	r1, r7
 8003628:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
			target_point.y 		= positionCurrent.y + command.target_point.y;
 800362c:	4b9d      	ldr	r3, [pc, #628]	; (80038a4 <scaraInitDuty+0x2dc>)
 800362e:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8003632:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8003636:	f7fc fe39 	bl	80002ac <__adddf3>
 800363a:	4602      	mov	r2, r0
 800363c:	460b      	mov	r3, r1
 800363e:	4639      	mov	r1, r7
 8003640:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
			target_point.z 		= positionCurrent.z + command.target_point.z;
 8003644:	4b97      	ldr	r3, [pc, #604]	; (80038a4 <scaraInitDuty+0x2dc>)
 8003646:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800364a:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 800364e:	f7fc fe2d 	bl	80002ac <__adddf3>
 8003652:	4602      	mov	r2, r0
 8003654:	460b      	mov	r3, r1
 8003656:	4639      	mov	r1, r7
 8003658:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
			target_point.roll	= positionCurrent.roll + command.target_point.roll;
 800365c:	4b91      	ldr	r3, [pc, #580]	; (80038a4 <scaraInitDuty+0x2dc>)
 800365e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8003662:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8003666:	f7fc fe21 	bl	80002ac <__adddf3>
 800366a:	4602      	mov	r2, r0
 800366c:	460b      	mov	r3, r1
 800366e:	4639      	mov	r1, r7
 8003670:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 8003674:	e01b      	b.n	80036ae <scaraInitDuty+0xe6>
		} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8003676:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 800367a:	2b00      	cmp	r3, #0
 800367c:	d114      	bne.n	80036a8 <scaraInitDuty+0xe0>
			target_point.x 		= command.target_point.x;
 800367e:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8003682:	4639      	mov	r1, r7
 8003684:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
			target_point.y 		= command.target_point.y;
 8003688:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 800368c:	4639      	mov	r1, r7
 800368e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
			target_point.z 		= command.target_point.z;
 8003692:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 8003696:	4639      	mov	r1, r7
 8003698:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
			target_point.roll	= command.target_point.roll;
 800369c:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 80036a0:	4639      	mov	r1, r7
 80036a2:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 80036a6:	e002      	b.n	80036ae <scaraInitDuty+0xe6>
		} else {
			return SCARA_STATUS_ERROR_COORDINATE;
 80036a8:	230c      	movs	r3, #12
 80036aa:	f001 b91e 	b.w	80048ea <scaraInitDuty+0x1322>
		}

		angle_s = target_point.roll - positionCurrent.roll;
 80036ae:	463b      	mov	r3, r7
 80036b0:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80036b4:	4b7b      	ldr	r3, [pc, #492]	; (80038a4 <scaraInitDuty+0x2dc>)
 80036b6:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80036ba:	f7fc fdf5 	bl	80002a8 <__aeabi_dsub>
 80036be:	4602      	mov	r2, r0
 80036c0:	460b      	mov	r3, r1
 80036c2:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
		dir_angle = 1;
 80036c6:	2301      	movs	r3, #1
 80036c8:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
		if ( angle_s < 0) {
 80036cc:	f04f 0200 	mov.w	r2, #0
 80036d0:	f04f 0300 	mov.w	r3, #0
 80036d4:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 80036d8:	f7fd fa10 	bl	8000afc <__aeabi_dcmplt>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d002      	beq.n	80036e8 <scaraInitDuty+0x120>
			dir_angle = -1;
 80036e2:	23ff      	movs	r3, #255	; 0xff
 80036e4:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
		}
		if ( fabs(angle_s) > PI) {
 80036e8:	f8d7 40f8 	ldr.w	r4, [r7, #248]	; 0xf8
 80036ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036f0:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80036f4:	a368      	add	r3, pc, #416	; (adr r3, 8003898 <scaraInitDuty+0x2d0>)
 80036f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036fa:	4620      	mov	r0, r4
 80036fc:	4629      	mov	r1, r5
 80036fe:	f7fd fa1b 	bl	8000b38 <__aeabi_dcmpgt>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d021      	beq.n	800374c <scaraInitDuty+0x184>
			dir_angle = -dir_angle;
 8003708:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 800370c:	425b      	negs	r3, r3
 800370e:	b2db      	uxtb	r3, r3
 8003710:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
			angle_s = (2*PI - fabsf(angle_s))*dir_angle;
 8003714:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8003718:	f7fd fa76 	bl	8000c08 <__aeabi_d2f>
 800371c:	ee07 0a90 	vmov	s15, r0
 8003720:	eef0 7ae7 	vabs.f32	s15, s15
 8003724:	ed9f 7a60 	vldr	s14, [pc, #384]	; 80038a8 <scaraInitDuty+0x2e0>
 8003728:	ee37 7a67 	vsub.f32	s14, s14, s15
 800372c:	f997 30f7 	ldrsb.w	r3, [r7, #247]	; 0xf7
 8003730:	ee07 3a90 	vmov	s15, r3
 8003734:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003738:	ee67 7a27 	vmul.f32	s15, s14, s15
 800373c:	ee17 0a90 	vmov	r0, s15
 8003740:	f7fc ff12 	bl	8000568 <__aeabi_f2d>
 8003744:	4603      	mov	r3, r0
 8003746:	460c      	mov	r4, r1
 8003748:	e9c7 343e 	strd	r3, r4, [r7, #248]	; 0xf8
		}


		myDUTY.space_type = DUTY_SPACE_TASK;// Change type
 800374c:	4b57      	ldr	r3, [pc, #348]	; (80038ac <scaraInitDuty+0x2e4>)
 800374e:	2200      	movs	r2, #0
 8003750:	701a      	strb	r2, [r3, #0]
		myDUTY.task.roll_start = positionCurrent.roll;
 8003752:	4b54      	ldr	r3, [pc, #336]	; (80038a4 <scaraInitDuty+0x2dc>)
 8003754:	e9d3 3410 	ldrd	r3, r4, [r3, #64]	; 0x40
 8003758:	4a54      	ldr	r2, [pc, #336]	; (80038ac <scaraInitDuty+0x2e4>)
 800375a:	e9c2 34f0 	strd	r3, r4, [r2, #960]	; 0x3c0
		// 1-Path Planning
			// Straight Line
		if ( DUTY_PATH_LINE == command.path_type ) {
 800375e:	f897 312a 	ldrb.w	r3, [r7, #298]	; 0x12a
 8003762:	2b00      	cmp	r3, #0
 8003764:	d11f      	bne.n	80037a6 <scaraInitDuty+0x1de>
			myDUTY.task.path.path_type = DUTY_PATH_LINE;
 8003766:	4b51      	ldr	r3, [pc, #324]	; (80038ac <scaraInitDuty+0x2e4>)
 8003768:	2200      	movs	r2, #0
 800376a:	721a      	strb	r2, [r3, #8]
			status = scaraInitLine(&(myDUTY.task.path.line), positionCurrent, target_point);
 800376c:	4c4d      	ldr	r4, [pc, #308]	; (80038a4 <scaraInitDuty+0x2dc>)
 800376e:	463b      	mov	r3, r7
 8003770:	a818      	add	r0, sp, #96	; 0x60
 8003772:	4619      	mov	r1, r3
 8003774:	2368      	movs	r3, #104	; 0x68
 8003776:	461a      	mov	r2, r3
 8003778:	f00f f82a 	bl	80127d0 <memcpy>
 800377c:	4668      	mov	r0, sp
 800377e:	f104 0308 	add.w	r3, r4, #8
 8003782:	2260      	movs	r2, #96	; 0x60
 8003784:	4619      	mov	r1, r3
 8003786:	f00f f823 	bl	80127d0 <memcpy>
 800378a:	e894 000c 	ldmia.w	r4, {r2, r3}
 800378e:	4848      	ldr	r0, [pc, #288]	; (80038b0 <scaraInitDuty+0x2e8>)
 8003790:	f001 f8bc 	bl	800490c <scaraInitLine>
 8003794:	4603      	mov	r3, r0
 8003796:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			total_s = myDUTY.task.path.line.total_s;
 800379a:	4b44      	ldr	r3, [pc, #272]	; (80038ac <scaraInitDuty+0x2e4>)
 800379c:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 80037a0:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
 80037a4:	e070      	b.n	8003888 <scaraInitDuty+0x2c0>
			// Circular
		} else if ( DUTY_PATH_CIRCLE == command.path_type ) {
 80037a6:	f897 312a 	ldrb.w	r3, [r7, #298]	; 0x12a
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d169      	bne.n	8003882 <scaraInitDuty+0x2ba>
			SCARA_PositionTypeDef	center_point;
			if( DUTY_COORDINATES_REL == command.coordinate_type) {
 80037ae:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d127      	bne.n	8003806 <scaraInitDuty+0x23e>
				center_point.x 		= positionCurrent.x + command.sub_point.x;
 80037b6:	4b3b      	ldr	r3, [pc, #236]	; (80038a4 <scaraInitDuty+0x2dc>)
 80037b8:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80037bc:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 80037c0:	461a      	mov	r2, r3
 80037c2:	4623      	mov	r3, r4
 80037c4:	f7fc fd72 	bl	80002ac <__adddf3>
 80037c8:	4603      	mov	r3, r0
 80037ca:	460c      	mov	r4, r1
 80037cc:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
				center_point.y 		= positionCurrent.y + command.sub_point.y;
 80037d0:	4b34      	ldr	r3, [pc, #208]	; (80038a4 <scaraInitDuty+0x2dc>)
 80037d2:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80037d6:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 80037da:	461a      	mov	r2, r3
 80037dc:	4623      	mov	r3, r4
 80037de:	f7fc fd65 	bl	80002ac <__adddf3>
 80037e2:	4603      	mov	r3, r0
 80037e4:	460c      	mov	r4, r1
 80037e6:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
				center_point.z 		= positionCurrent.z + command.sub_point.z;
 80037ea:	4b2e      	ldr	r3, [pc, #184]	; (80038a4 <scaraInitDuty+0x2dc>)
 80037ec:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80037f0:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 80037f4:	461a      	mov	r2, r3
 80037f6:	4623      	mov	r3, r4
 80037f8:	f7fc fd58 	bl	80002ac <__adddf3>
 80037fc:	4603      	mov	r3, r0
 80037fe:	460c      	mov	r4, r1
 8003800:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 8003804:	e013      	b.n	800382e <scaraInitDuty+0x266>
			} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8003806:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 800380a:	2b00      	cmp	r3, #0
 800380c:	d10c      	bne.n	8003828 <scaraInitDuty+0x260>
				center_point.x 		= command.target_point.x;
 800380e:	e9d7 345c 	ldrd	r3, r4, [r7, #368]	; 0x170
 8003812:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
				center_point.y 		= command.target_point.y;
 8003816:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 800381a:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
				center_point.z 		= command.target_point.z;
 800381e:	e9d7 3460 	ldrd	r3, r4, [r7, #384]	; 0x180
 8003822:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 8003826:	e002      	b.n	800382e <scaraInitDuty+0x266>
			} else {
				return SCARA_STATUS_ERROR_COORDINATE;
 8003828:	230c      	movs	r3, #12
			return SCARA_STATUS_ERROR_COORDINATE;
 800382a:	f001 b85e 	b.w	80048ea <scaraInitDuty+0x1322>
			}

			myDUTY.task.path.path_type = DUTY_PATH_CIRCLE;
 800382e:	4b1f      	ldr	r3, [pc, #124]	; (80038ac <scaraInitDuty+0x2e4>)
 8003830:	2201      	movs	r2, #1
 8003832:	721a      	strb	r2, [r3, #8]
			status = scaraInitCircle(&(myDUTY.task.path.circle),
 8003834:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003838:	4c1a      	ldr	r4, [pc, #104]	; (80038a4 <scaraInitDuty+0x2dc>)
 800383a:	934c      	str	r3, [sp, #304]	; 0x130
 800383c:	a832      	add	r0, sp, #200	; 0xc8
 800383e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003842:	2268      	movs	r2, #104	; 0x68
 8003844:	4619      	mov	r1, r3
 8003846:	f00e ffc3 	bl	80127d0 <memcpy>
 800384a:	463b      	mov	r3, r7
 800384c:	a818      	add	r0, sp, #96	; 0x60
 800384e:	4619      	mov	r1, r3
 8003850:	2368      	movs	r3, #104	; 0x68
 8003852:	461a      	mov	r2, r3
 8003854:	f00e ffbc 	bl	80127d0 <memcpy>
 8003858:	4668      	mov	r0, sp
 800385a:	f104 0308 	add.w	r3, r4, #8
 800385e:	2260      	movs	r2, #96	; 0x60
 8003860:	4619      	mov	r1, r3
 8003862:	f00e ffb5 	bl	80127d0 <memcpy>
 8003866:	e894 000c 	ldmia.w	r4, {r2, r3}
 800386a:	4812      	ldr	r0, [pc, #72]	; (80038b4 <scaraInitDuty+0x2ec>)
 800386c:	f001 f914 	bl	8004a98 <scaraInitCircle>
 8003870:	4603      	mov	r3, r0
 8003872:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
										positionCurrent,
										target_point,
										center_point,
										command.sub_para_int );
			total_s = myDUTY.task.path.circle.total_s;
 8003876:	4b0d      	ldr	r3, [pc, #52]	; (80038ac <scaraInitDuty+0x2e4>)
 8003878:	e9d3 343a 	ldrd	r3, r4, [r3, #232]	; 0xe8
 800387c:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
 8003880:	e002      	b.n	8003888 <scaraInitDuty+0x2c0>

		} else {
			return SCARA_STATUS_ERROR_TASK;
 8003882:	2303      	movs	r3, #3
 8003884:	f001 b831 	b.w	80048ea <scaraInitDuty+0x1322>
		}

		if ( SCARA_STATUS_OK != status) {
 8003888:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800388c:	2b00      	cmp	r3, #0
 800388e:	d013      	beq.n	80038b8 <scaraInitDuty+0x2f0>
			return status;
 8003890:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003894:	f001 b829 	b.w	80048ea <scaraInitDuty+0x1322>
 8003898:	60000000 	.word	0x60000000
 800389c:	400921fb 	.word	0x400921fb
 80038a0:	40668000 	.word	0x40668000
 80038a4:	20005cf0 	.word	0x20005cf0
 80038a8:	40c90fdb 	.word	0x40c90fdb
 80038ac:	20005338 	.word	0x20005338
 80038b0:	20005348 	.word	0x20005348
 80038b4:	200053b8 	.word	0x200053b8
		}

		// 2-Trajectory Planning
			// LSPB
		if ( DUTY_TRAJECTORY_LSPB == command.trajec_type ) {
 80038b8:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 80038bc:	2b00      	cmp	r3, #0
 80038be:	f040 8094 	bne.w	80039ea <scaraInitDuty+0x422>

			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 80038c2:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d12d      	bne.n	8003926 <scaraInitDuty+0x35e>
				myDUTY.task.trajectory_3d.lspb.Tf = command.time_total;
 80038ca:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 80038ce:	4a9d      	ldr	r2, [pc, #628]	; (8003b44 <scaraInitDuty+0x57c>)
 80038d0:	e9c2 345a 	strd	r3, r4, [r2, #360]	; 0x168
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LSPB;
 80038d4:	4b9b      	ldr	r3, [pc, #620]	; (8003b44 <scaraInitDuty+0x57c>)
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitLSPB(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 80038dc:	2201      	movs	r2, #1
 80038de:	ed97 0b40 	vldr	d0, [r7, #256]	; 0x100
 80038e2:	2104      	movs	r1, #4
 80038e4:	4898      	ldr	r0, [pc, #608]	; (8003b48 <scaraInitDuty+0x580>)
 80038e6:	f001 fa4f 	bl	8004d88 <scaraInitLSPB>
 80038ea:	4603      	mov	r3, r0
 80038ec:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
						 total_s, DUTY_MODE_INIT_QVT);

				myDUTY.task.trajectory_roll.lspb.Tf = command.time_total;
 80038f0:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 80038f4:	4a93      	ldr	r2, [pc, #588]	; (8003b44 <scaraInitDuty+0x57c>)
 80038f6:	e9c2 34b0 	strd	r3, r4, [r2, #704]	; 0x2c0
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LSPB;
 80038fa:	4b92      	ldr	r3, [pc, #584]	; (8003b44 <scaraInitDuty+0x57c>)
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 2268 	strb.w	r2, [r3, #616]	; 0x268
				status2 = scaraInitLSPB(&(myDUTY.task.trajectory_roll.lspb), TRAJECTORY_ROLL,
 8003902:	2201      	movs	r2, #1
 8003904:	ed97 0b3e 	vldr	d0, [r7, #248]	; 0xf8
 8003908:	2105      	movs	r1, #5
 800390a:	4890      	ldr	r0, [pc, #576]	; (8003b4c <scaraInitDuty+0x584>)
 800390c:	f001 fa3c 	bl	8004d88 <scaraInitLSPB>
 8003910:	4603      	mov	r3, r0
 8003912:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
						 angle_s, DUTY_MODE_INIT_QVT);
				myDUTY.time_total = command.time_total;
 8003916:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 800391a:	4a8a      	ldr	r2, [pc, #552]	; (8003b44 <scaraInitDuty+0x57c>)
 800391c:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8003920:	e9c2 3400 	strd	r3, r4, [r2]
 8003924:	e0fd      	b.n	8003b22 <scaraInitDuty+0x55a>

			} else if (DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8003926:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800392a:	2b00      	cmp	r3, #0
 800392c:	d15a      	bne.n	80039e4 <scaraInitDuty+0x41c>
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LSPB;
 800392e:	4b85      	ldr	r3, [pc, #532]	; (8003b44 <scaraInitDuty+0x57c>)
 8003930:	2200      	movs	r2, #0
 8003932:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitLSPB(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 8003936:	2200      	movs	r2, #0
 8003938:	ed97 0b40 	vldr	d0, [r7, #256]	; 0x100
 800393c:	2104      	movs	r1, #4
 800393e:	4882      	ldr	r0, [pc, #520]	; (8003b48 <scaraInitDuty+0x580>)
 8003940:	f001 fa22 	bl	8004d88 <scaraInitLSPB>
 8003944:	4603      	mov	r3, r0
 8003946:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
						 total_s, DUTY_MODE_INIT_QVA);
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LSPB;
 800394a:	4b7e      	ldr	r3, [pc, #504]	; (8003b44 <scaraInitDuty+0x57c>)
 800394c:	2200      	movs	r2, #0
 800394e:	f883 2268 	strb.w	r2, [r3, #616]	; 0x268
				status2 = scaraInitLSPB(&(myDUTY.task.trajectory_roll.lspb), TRAJECTORY_ROLL,
 8003952:	2200      	movs	r2, #0
 8003954:	ed97 0b3e 	vldr	d0, [r7, #248]	; 0xf8
 8003958:	2105      	movs	r1, #5
 800395a:	487c      	ldr	r0, [pc, #496]	; (8003b4c <scaraInitDuty+0x584>)
 800395c:	f001 fa14 	bl	8004d88 <scaraInitLSPB>
 8003960:	4603      	mov	r3, r0
 8003962:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
						 angle_s, DUTY_MODE_INIT_QVA);
				// Synchronous time end
				if(myDUTY.task.trajectory_3d.lspb.Tf > myDUTY.task.trajectory_roll.lspb.Tf) {
 8003966:	4b77      	ldr	r3, [pc, #476]	; (8003b44 <scaraInitDuty+0x57c>)
 8003968:	e9d3 015a 	ldrd	r0, r1, [r3, #360]	; 0x168
 800396c:	4b75      	ldr	r3, [pc, #468]	; (8003b44 <scaraInitDuty+0x57c>)
 800396e:	e9d3 34b0 	ldrd	r3, r4, [r3, #704]	; 0x2c0
 8003972:	461a      	mov	r2, r3
 8003974:	4623      	mov	r3, r4
 8003976:	f7fd f8df 	bl	8000b38 <__aeabi_dcmpgt>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d018      	beq.n	80039b2 <scaraInitDuty+0x3ea>
					myDUTY.task.trajectory_roll.lspb.Tf = myDUTY.task.trajectory_3d.lspb.Tf;
 8003980:	4b70      	ldr	r3, [pc, #448]	; (8003b44 <scaraInitDuty+0x57c>)
 8003982:	e9d3 345a 	ldrd	r3, r4, [r3, #360]	; 0x168
 8003986:	4a6f      	ldr	r2, [pc, #444]	; (8003b44 <scaraInitDuty+0x57c>)
 8003988:	e9c2 34b0 	strd	r3, r4, [r2, #704]	; 0x2c0
					status2 = scaraInitLSPB(&(myDUTY.task.trajectory_roll.lspb), TRAJECTORY_ROLL,
 800398c:	2201      	movs	r2, #1
 800398e:	ed97 0b3e 	vldr	d0, [r7, #248]	; 0xf8
 8003992:	2105      	movs	r1, #5
 8003994:	486d      	ldr	r0, [pc, #436]	; (8003b4c <scaraInitDuty+0x584>)
 8003996:	f001 f9f7 	bl	8004d88 <scaraInitLSPB>
 800399a:	4603      	mov	r3, r0
 800399c:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
							 angle_s, DUTY_MODE_INIT_QVT);
					myDUTY.time_total = myDUTY.task.trajectory_3d.lspb.Tf;
 80039a0:	4b68      	ldr	r3, [pc, #416]	; (8003b44 <scaraInitDuty+0x57c>)
 80039a2:	e9d3 345a 	ldrd	r3, r4, [r3, #360]	; 0x168
 80039a6:	4a67      	ldr	r2, [pc, #412]	; (8003b44 <scaraInitDuty+0x57c>)
 80039a8:	f602 1248 	addw	r2, r2, #2376	; 0x948
 80039ac:	e9c2 3400 	strd	r3, r4, [r2]
 80039b0:	e0b7      	b.n	8003b22 <scaraInitDuty+0x55a>
				} else {
					myDUTY.task.trajectory_3d.lspb.Tf = myDUTY.task.trajectory_roll.lspb.Tf;
 80039b2:	4b64      	ldr	r3, [pc, #400]	; (8003b44 <scaraInitDuty+0x57c>)
 80039b4:	e9d3 34b0 	ldrd	r3, r4, [r3, #704]	; 0x2c0
 80039b8:	4a62      	ldr	r2, [pc, #392]	; (8003b44 <scaraInitDuty+0x57c>)
 80039ba:	e9c2 345a 	strd	r3, r4, [r2, #360]	; 0x168
					status1 = scaraInitLSPB(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 80039be:	2201      	movs	r2, #1
 80039c0:	ed97 0b40 	vldr	d0, [r7, #256]	; 0x100
 80039c4:	2104      	movs	r1, #4
 80039c6:	4860      	ldr	r0, [pc, #384]	; (8003b48 <scaraInitDuty+0x580>)
 80039c8:	f001 f9de 	bl	8004d88 <scaraInitLSPB>
 80039cc:	4603      	mov	r3, r0
 80039ce:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
							 total_s, DUTY_MODE_INIT_QVT);
					myDUTY.time_total = myDUTY.task.trajectory_roll.lspb.Tf;
 80039d2:	4b5c      	ldr	r3, [pc, #368]	; (8003b44 <scaraInitDuty+0x57c>)
 80039d4:	e9d3 34b0 	ldrd	r3, r4, [r3, #704]	; 0x2c0
 80039d8:	4a5a      	ldr	r2, [pc, #360]	; (8003b44 <scaraInitDuty+0x57c>)
 80039da:	f602 1248 	addw	r2, r2, #2376	; 0x948
 80039de:	e9c2 3400 	strd	r3, r4, [r2]
 80039e2:	e09e      	b.n	8003b22 <scaraInitDuty+0x55a>
				}
			} else {
				return SCARA_STATUS_ERROR_MODE_INIT ;
 80039e4:	2308      	movs	r3, #8
 80039e6:	f000 bf80 	b.w	80048ea <scaraInitDuty+0x1322>
			}
			// SCURVE
		} else if 	( DUTY_TRAJECTORY_SCURVE == command.trajec_type ){
 80039ea:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	f040 8094 	bne.w	8003b1c <scaraInitDuty+0x554>

			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 80039f4:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d12d      	bne.n	8003a58 <scaraInitDuty+0x490>
				myDUTY.task.trajectory_3d.scurve.Tf = command.time_total;
 80039fc:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8003a00:	4a50      	ldr	r2, [pc, #320]	; (8003b44 <scaraInitDuty+0x57c>)
 8003a02:	e9c2 347e 	strd	r3, r4, [r2, #504]	; 0x1f8
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8003a06:	4b4f      	ldr	r3, [pc, #316]	; (8003b44 <scaraInitDuty+0x57c>)
 8003a08:	2201      	movs	r2, #1
 8003a0a:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitScurve(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 8003a0e:	2201      	movs	r2, #1
 8003a10:	ed97 0b40 	vldr	d0, [r7, #256]	; 0x100
 8003a14:	2104      	movs	r1, #4
 8003a16:	484e      	ldr	r0, [pc, #312]	; (8003b50 <scaraInitDuty+0x588>)
 8003a18:	f001 fd5a 	bl	80054d0 <scaraInitScurve>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
						 total_s, DUTY_MODE_INIT_QVT);

				myDUTY.task.trajectory_roll.scurve.Tf = command.time_total;
 8003a22:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8003a26:	4a47      	ldr	r2, [pc, #284]	; (8003b44 <scaraInitDuty+0x57c>)
 8003a28:	e9c2 34d4 	strd	r3, r4, [r2, #848]	; 0x350
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8003a2c:	4b45      	ldr	r3, [pc, #276]	; (8003b44 <scaraInitDuty+0x57c>)
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 2268 	strb.w	r2, [r3, #616]	; 0x268
				status2 = scaraInitScurve(&(myDUTY.task.trajectory_roll.scurve), TRAJECTORY_ROLL,
 8003a34:	2201      	movs	r2, #1
 8003a36:	ed97 0b3e 	vldr	d0, [r7, #248]	; 0xf8
 8003a3a:	2105      	movs	r1, #5
 8003a3c:	4845      	ldr	r0, [pc, #276]	; (8003b54 <scaraInitDuty+0x58c>)
 8003a3e:	f001 fd47 	bl	80054d0 <scaraInitScurve>
 8003a42:	4603      	mov	r3, r0
 8003a44:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
						 angle_s, DUTY_MODE_INIT_QVT);
				myDUTY.time_total = command.time_total;
 8003a48:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8003a4c:	4a3d      	ldr	r2, [pc, #244]	; (8003b44 <scaraInitDuty+0x57c>)
 8003a4e:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8003a52:	e9c2 3400 	strd	r3, r4, [r2]
 8003a56:	e064      	b.n	8003b22 <scaraInitDuty+0x55a>

			} else if (DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8003a58:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d15a      	bne.n	8003b16 <scaraInitDuty+0x54e>
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8003a60:	4b38      	ldr	r3, [pc, #224]	; (8003b44 <scaraInitDuty+0x57c>)
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitScurve(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 8003a68:	2200      	movs	r2, #0
 8003a6a:	ed97 0b40 	vldr	d0, [r7, #256]	; 0x100
 8003a6e:	2104      	movs	r1, #4
 8003a70:	4837      	ldr	r0, [pc, #220]	; (8003b50 <scaraInitDuty+0x588>)
 8003a72:	f001 fd2d 	bl	80054d0 <scaraInitScurve>
 8003a76:	4603      	mov	r3, r0
 8003a78:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
						 total_s, DUTY_MODE_INIT_QVA);
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8003a7c:	4b31      	ldr	r3, [pc, #196]	; (8003b44 <scaraInitDuty+0x57c>)
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 2268 	strb.w	r2, [r3, #616]	; 0x268
				status2 = scaraInitScurve(&(myDUTY.task.trajectory_roll.scurve), TRAJECTORY_ROLL,
 8003a84:	2200      	movs	r2, #0
 8003a86:	ed97 0b3e 	vldr	d0, [r7, #248]	; 0xf8
 8003a8a:	2105      	movs	r1, #5
 8003a8c:	4831      	ldr	r0, [pc, #196]	; (8003b54 <scaraInitDuty+0x58c>)
 8003a8e:	f001 fd1f 	bl	80054d0 <scaraInitScurve>
 8003a92:	4603      	mov	r3, r0
 8003a94:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
						 angle_s, DUTY_MODE_INIT_QVA);
				// synchronous time end
				if(myDUTY.task.trajectory_3d.scurve.Tf > myDUTY.task.trajectory_roll.scurve.Tf) {
 8003a98:	4b2a      	ldr	r3, [pc, #168]	; (8003b44 <scaraInitDuty+0x57c>)
 8003a9a:	e9d3 017e 	ldrd	r0, r1, [r3, #504]	; 0x1f8
 8003a9e:	4b29      	ldr	r3, [pc, #164]	; (8003b44 <scaraInitDuty+0x57c>)
 8003aa0:	e9d3 34d4 	ldrd	r3, r4, [r3, #848]	; 0x350
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	4623      	mov	r3, r4
 8003aa8:	f7fd f846 	bl	8000b38 <__aeabi_dcmpgt>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d018      	beq.n	8003ae4 <scaraInitDuty+0x51c>
					myDUTY.task.trajectory_roll.scurve.Tf = myDUTY.task.trajectory_3d.scurve.Tf;
 8003ab2:	4b24      	ldr	r3, [pc, #144]	; (8003b44 <scaraInitDuty+0x57c>)
 8003ab4:	e9d3 347e 	ldrd	r3, r4, [r3, #504]	; 0x1f8
 8003ab8:	4a22      	ldr	r2, [pc, #136]	; (8003b44 <scaraInitDuty+0x57c>)
 8003aba:	e9c2 34d4 	strd	r3, r4, [r2, #848]	; 0x350
					status2 = scaraInitScurve(&(myDUTY.task.trajectory_roll.scurve), TRAJECTORY_ROLL,
 8003abe:	2201      	movs	r2, #1
 8003ac0:	ed97 0b3e 	vldr	d0, [r7, #248]	; 0xf8
 8003ac4:	2105      	movs	r1, #5
 8003ac6:	4823      	ldr	r0, [pc, #140]	; (8003b54 <scaraInitDuty+0x58c>)
 8003ac8:	f001 fd02 	bl	80054d0 <scaraInitScurve>
 8003acc:	4603      	mov	r3, r0
 8003ace:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
							 angle_s, DUTY_MODE_INIT_QVT);
					myDUTY.time_total = myDUTY.task.trajectory_3d.scurve.Tf;
 8003ad2:	4b1c      	ldr	r3, [pc, #112]	; (8003b44 <scaraInitDuty+0x57c>)
 8003ad4:	e9d3 347e 	ldrd	r3, r4, [r3, #504]	; 0x1f8
 8003ad8:	4a1a      	ldr	r2, [pc, #104]	; (8003b44 <scaraInitDuty+0x57c>)
 8003ada:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8003ade:	e9c2 3400 	strd	r3, r4, [r2]
 8003ae2:	e01e      	b.n	8003b22 <scaraInitDuty+0x55a>
				} else {
					myDUTY.task.trajectory_3d.scurve.Tf = myDUTY.task.trajectory_roll.scurve.Tf;
 8003ae4:	4b17      	ldr	r3, [pc, #92]	; (8003b44 <scaraInitDuty+0x57c>)
 8003ae6:	e9d3 34d4 	ldrd	r3, r4, [r3, #848]	; 0x350
 8003aea:	4a16      	ldr	r2, [pc, #88]	; (8003b44 <scaraInitDuty+0x57c>)
 8003aec:	e9c2 347e 	strd	r3, r4, [r2, #504]	; 0x1f8
					status1 = scaraInitScurve(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 8003af0:	2201      	movs	r2, #1
 8003af2:	ed97 0b40 	vldr	d0, [r7, #256]	; 0x100
 8003af6:	2104      	movs	r1, #4
 8003af8:	4815      	ldr	r0, [pc, #84]	; (8003b50 <scaraInitDuty+0x588>)
 8003afa:	f001 fce9 	bl	80054d0 <scaraInitScurve>
 8003afe:	4603      	mov	r3, r0
 8003b00:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
							 total_s, DUTY_MODE_INIT_QVT);
					myDUTY.time_total = myDUTY.task.trajectory_roll.scurve.Tf;
 8003b04:	4b0f      	ldr	r3, [pc, #60]	; (8003b44 <scaraInitDuty+0x57c>)
 8003b06:	e9d3 34d4 	ldrd	r3, r4, [r3, #848]	; 0x350
 8003b0a:	4a0e      	ldr	r2, [pc, #56]	; (8003b44 <scaraInitDuty+0x57c>)
 8003b0c:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8003b10:	e9c2 3400 	strd	r3, r4, [r2]
 8003b14:	e005      	b.n	8003b22 <scaraInitDuty+0x55a>
				}
			} else {
				return SCARA_STATUS_ERROR_MODE_INIT;
 8003b16:	2308      	movs	r3, #8
 8003b18:	f000 bee7 	b.w	80048ea <scaraInitDuty+0x1322>
			}
		} else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 8003b1c:	2305      	movs	r3, #5
 8003b1e:	f000 bee4 	b.w	80048ea <scaraInitDuty+0x1322>
		}
		// Check Init Status
		if ( SCARA_STATUS_OK != status1) {
 8003b22:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d003      	beq.n	8003b32 <scaraInitDuty+0x56a>
			return status1;
 8003b2a:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8003b2e:	f000 bedc 	b.w	80048ea <scaraInitDuty+0x1322>
		}
		if ( SCARA_STATUS_OK != status2) {
 8003b32:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	f000 86b8 	beq.w	80048ac <scaraInitDuty+0x12e4>
			return status2;
 8003b3c:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8003b40:	f000 bed3 	b.w	80048ea <scaraInitDuty+0x1322>
 8003b44:	20005338 	.word	0x20005338
 8003b48:	20005450 	.word	0x20005450
 8003b4c:	200055a8 	.word	0x200055a8
 8003b50:	200054d0 	.word	0x200054d0
 8003b54:	20005628 	.word	0x20005628
		}


	/*----------- Space Joint ------------*/
	} else if (DUTY_SPACE_JOINT == command.space_type) {
 8003b58:	f897 3129 	ldrb.w	r3, [r7, #297]	; 0x129
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	f040 86a3 	bne.w	80048a8 <scaraInitDuty+0x12e0>

		myDUTY.space_type = DUTY_SPACE_JOINT;// Change type
 8003b62:	4ba7      	ldr	r3, [pc, #668]	; (8003e00 <scaraInitDuty+0x838>)
 8003b64:	2201      	movs	r2, #1
 8003b66:	701a      	strb	r2, [r3, #0]
		myDUTY.joint.theta1_start	 = positionCurrent.Theta1;
 8003b68:	4ba6      	ldr	r3, [pc, #664]	; (8003e04 <scaraInitDuty+0x83c>)
 8003b6a:	e9d3 3412 	ldrd	r3, r4, [r3, #72]	; 0x48
 8003b6e:	4aa4      	ldr	r2, [pc, #656]	; (8003e00 <scaraInitDuty+0x838>)
 8003b70:	f602 1228 	addw	r2, r2, #2344	; 0x928
 8003b74:	e9c2 3400 	strd	r3, r4, [r2]
		myDUTY.joint.theta2_start	 = positionCurrent.Theta2;
 8003b78:	4ba2      	ldr	r3, [pc, #648]	; (8003e04 <scaraInitDuty+0x83c>)
 8003b7a:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 8003b7e:	4aa0      	ldr	r2, [pc, #640]	; (8003e00 <scaraInitDuty+0x838>)
 8003b80:	f502 6213 	add.w	r2, r2, #2352	; 0x930
 8003b84:	e9c2 3400 	strd	r3, r4, [r2]
		myDUTY.joint.d3_start		 = positionCurrent.D3;
 8003b88:	4b9e      	ldr	r3, [pc, #632]	; (8003e04 <scaraInitDuty+0x83c>)
 8003b8a:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 8003b8e:	4a9c      	ldr	r2, [pc, #624]	; (8003e00 <scaraInitDuty+0x838>)
 8003b90:	f602 1238 	addw	r2, r2, #2360	; 0x938
 8003b94:	e9c2 3400 	strd	r3, r4, [r2]
		myDUTY.joint.theta4_start 	 = positionCurrent.Theta4;
 8003b98:	4b9a      	ldr	r3, [pc, #616]	; (8003e04 <scaraInitDuty+0x83c>)
 8003b9a:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8003b9e:	4a98      	ldr	r2, [pc, #608]	; (8003e00 <scaraInitDuty+0x838>)
 8003ba0:	f502 6214 	add.w	r2, r2, #2368	; 0x940
 8003ba4:	e9c2 3400 	strd	r3, r4, [r2]

		//-----Joint Single
		if ( DUTY_JOINT_SINGLE == command.joint_type) {
 8003ba8:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	f040 836d 	bne.w	800428c <scaraInitDuty+0xcc4>
			// Trajectory 1 profile
			double s, abs_position;
			switch(command.sub_para_int) {
 8003bb2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003bb6:	2b03      	cmp	r3, #3
 8003bb8:	f200 814e 	bhi.w	8003e58 <scaraInitDuty+0x890>
 8003bbc:	a201      	add	r2, pc, #4	; (adr r2, 8003bc4 <scaraInitDuty+0x5fc>)
 8003bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bc2:	bf00      	nop
 8003bc4:	08003bd5 	.word	0x08003bd5
 8003bc8:	08003c7b 	.word	0x08003c7b
 8003bcc:	08003d21 	.word	0x08003d21
 8003bd0:	08003d9d 	.word	0x08003d9d
			case 0:
				// Change Degree --> Radian
				command.sub_para_double = command.sub_para_double*PI/180.0;
 8003bd4:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8003bd8:	a387      	add	r3, pc, #540	; (adr r3, 8003df8 <scaraInitDuty+0x830>)
 8003bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bde:	f7fc fd1b 	bl	8000618 <__aeabi_dmul>
 8003be2:	4603      	mov	r3, r0
 8003be4:	460c      	mov	r4, r1
 8003be6:	4618      	mov	r0, r3
 8003be8:	4621      	mov	r1, r4
 8003bea:	f04f 0200 	mov.w	r2, #0
 8003bee:	4b86      	ldr	r3, [pc, #536]	; (8003e08 <scaraInitDuty+0x840>)
 8003bf0:	f7fc fe3c 	bl	800086c <__aeabi_ddiv>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	460c      	mov	r4, r1
 8003bf8:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
				// Coordinate
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8003bfc:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d113      	bne.n	8003c2c <scaraInitDuty+0x664>
					abs_position = myDUTY.joint.theta1_start + command.sub_para_double;
 8003c04:	4b7e      	ldr	r3, [pc, #504]	; (8003e00 <scaraInitDuty+0x838>)
 8003c06:	f603 1328 	addw	r3, r3, #2344	; 0x928
 8003c0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003c0e:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 8003c12:	461a      	mov	r2, r3
 8003c14:	4623      	mov	r3, r4
 8003c16:	f7fc fb49 	bl	80002ac <__adddf3>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	460c      	mov	r4, r1
 8003c1e:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
					s			 = command.sub_para_double;
 8003c22:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 8003c26:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
 8003c2a:	e01a      	b.n	8003c62 <scaraInitDuty+0x69a>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8003c2c:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d113      	bne.n	8003c5c <scaraInitDuty+0x694>
					abs_position = command.sub_para_double;
 8003c34:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 8003c38:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
					s			 = command.sub_para_double - myDUTY.joint.theta1_start;
 8003c3c:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8003c40:	4b6f      	ldr	r3, [pc, #444]	; (8003e00 <scaraInitDuty+0x838>)
 8003c42:	f603 1328 	addw	r3, r3, #2344	; 0x928
 8003c46:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	4623      	mov	r3, r4
 8003c4e:	f7fc fb2b 	bl	80002a8 <__aeabi_dsub>
 8003c52:	4603      	mov	r3, r0
 8003c54:	460c      	mov	r4, r1
 8003c56:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
 8003c5a:	e002      	b.n	8003c62 <scaraInitDuty+0x69a>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 8003c5c:	230c      	movs	r3, #12
 8003c5e:	f000 be44 	b.w	80048ea <scaraInitDuty+0x1322>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J0, abs_position)) {
 8003c62:	ed97 0b38 	vldr	d0, [r7, #224]	; 0xe0
 8003c66:	2000      	movs	r0, #0
 8003c68:	f003 fc36 	bl	80074d8 <scaraCheckWorkSpace1>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	f000 80f5 	beq.w	8003e5e <scaraInitDuty+0x896>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8003c74:	2307      	movs	r3, #7
 8003c76:	f000 be38 	b.w	80048ea <scaraInitDuty+0x1322>
				}
				break;
			case 1:
				// Change Degree --> Radian
				command.sub_para_double = command.sub_para_double*PI/180.0;
 8003c7a:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8003c7e:	a35e      	add	r3, pc, #376	; (adr r3, 8003df8 <scaraInitDuty+0x830>)
 8003c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c84:	f7fc fcc8 	bl	8000618 <__aeabi_dmul>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	460c      	mov	r4, r1
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	4621      	mov	r1, r4
 8003c90:	f04f 0200 	mov.w	r2, #0
 8003c94:	4b5c      	ldr	r3, [pc, #368]	; (8003e08 <scaraInitDuty+0x840>)
 8003c96:	f7fc fde9 	bl	800086c <__aeabi_ddiv>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	460c      	mov	r4, r1
 8003c9e:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
				// Coordinate
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8003ca2:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d113      	bne.n	8003cd2 <scaraInitDuty+0x70a>
					abs_position = myDUTY.joint.theta2_start + command.sub_para_double;
 8003caa:	4b55      	ldr	r3, [pc, #340]	; (8003e00 <scaraInitDuty+0x838>)
 8003cac:	f503 6313 	add.w	r3, r3, #2352	; 0x930
 8003cb0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003cb4:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 8003cb8:	461a      	mov	r2, r3
 8003cba:	4623      	mov	r3, r4
 8003cbc:	f7fc faf6 	bl	80002ac <__adddf3>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	460c      	mov	r4, r1
 8003cc4:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
					s			 = command.sub_para_double;
 8003cc8:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 8003ccc:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
 8003cd0:	e01a      	b.n	8003d08 <scaraInitDuty+0x740>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8003cd2:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d113      	bne.n	8003d02 <scaraInitDuty+0x73a>
					abs_position = command.sub_para_double;
 8003cda:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 8003cde:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
					s			 = command.sub_para_double - myDUTY.joint.theta2_start;
 8003ce2:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8003ce6:	4b46      	ldr	r3, [pc, #280]	; (8003e00 <scaraInitDuty+0x838>)
 8003ce8:	f503 6313 	add.w	r3, r3, #2352	; 0x930
 8003cec:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	4623      	mov	r3, r4
 8003cf4:	f7fc fad8 	bl	80002a8 <__aeabi_dsub>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	460c      	mov	r4, r1
 8003cfc:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
 8003d00:	e002      	b.n	8003d08 <scaraInitDuty+0x740>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 8003d02:	230c      	movs	r3, #12
 8003d04:	f000 bdf1 	b.w	80048ea <scaraInitDuty+0x1322>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J1, abs_position)) {
 8003d08:	ed97 0b38 	vldr	d0, [r7, #224]	; 0xe0
 8003d0c:	2001      	movs	r0, #1
 8003d0e:	f003 fbe3 	bl	80074d8 <scaraCheckWorkSpace1>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	f000 80a4 	beq.w	8003e62 <scaraInitDuty+0x89a>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8003d1a:	2307      	movs	r3, #7
 8003d1c:	f000 bde5 	b.w	80048ea <scaraInitDuty+0x1322>
				}
				break;
			case 2:
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8003d20:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d113      	bne.n	8003d50 <scaraInitDuty+0x788>
					abs_position = myDUTY.joint.d3_start + command.sub_para_double;
 8003d28:	4b35      	ldr	r3, [pc, #212]	; (8003e00 <scaraInitDuty+0x838>)
 8003d2a:	f603 1338 	addw	r3, r3, #2360	; 0x938
 8003d2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d32:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 8003d36:	461a      	mov	r2, r3
 8003d38:	4623      	mov	r3, r4
 8003d3a:	f7fc fab7 	bl	80002ac <__adddf3>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	460c      	mov	r4, r1
 8003d42:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
					s			 = command.sub_para_double;
 8003d46:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 8003d4a:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
 8003d4e:	e01a      	b.n	8003d86 <scaraInitDuty+0x7be>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8003d50:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d113      	bne.n	8003d80 <scaraInitDuty+0x7b8>
					abs_position = command.sub_para_double;
 8003d58:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 8003d5c:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
					s			 = command.sub_para_double - myDUTY.joint.d3_start;
 8003d60:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8003d64:	4b26      	ldr	r3, [pc, #152]	; (8003e00 <scaraInitDuty+0x838>)
 8003d66:	f603 1338 	addw	r3, r3, #2360	; 0x938
 8003d6a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003d6e:	461a      	mov	r2, r3
 8003d70:	4623      	mov	r3, r4
 8003d72:	f7fc fa99 	bl	80002a8 <__aeabi_dsub>
 8003d76:	4603      	mov	r3, r0
 8003d78:	460c      	mov	r4, r1
 8003d7a:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
 8003d7e:	e002      	b.n	8003d86 <scaraInitDuty+0x7be>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 8003d80:	230c      	movs	r3, #12
 8003d82:	f000 bdb2 	b.w	80048ea <scaraInitDuty+0x1322>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J2, abs_position)) {
 8003d86:	ed97 0b38 	vldr	d0, [r7, #224]	; 0xe0
 8003d8a:	2002      	movs	r0, #2
 8003d8c:	f003 fba4 	bl	80074d8 <scaraCheckWorkSpace1>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d067      	beq.n	8003e66 <scaraInitDuty+0x89e>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8003d96:	2307      	movs	r3, #7
 8003d98:	f000 bda7 	b.w	80048ea <scaraInitDuty+0x1322>
				}
				break;
			case 3:
				// Change Degree --> Radian
				command.sub_para_double = command.sub_para_double*PI/180.0;
 8003d9c:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8003da0:	a315      	add	r3, pc, #84	; (adr r3, 8003df8 <scaraInitDuty+0x830>)
 8003da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da6:	f7fc fc37 	bl	8000618 <__aeabi_dmul>
 8003daa:	4603      	mov	r3, r0
 8003dac:	460c      	mov	r4, r1
 8003dae:	4618      	mov	r0, r3
 8003db0:	4621      	mov	r1, r4
 8003db2:	f04f 0200 	mov.w	r2, #0
 8003db6:	4b14      	ldr	r3, [pc, #80]	; (8003e08 <scaraInitDuty+0x840>)
 8003db8:	f7fc fd58 	bl	800086c <__aeabi_ddiv>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	460c      	mov	r4, r1
 8003dc0:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
				// Coordinate
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8003dc4:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d11f      	bne.n	8003e0c <scaraInitDuty+0x844>
					abs_position = myDUTY.joint.theta4_start + command.sub_para_double;
 8003dcc:	4b0c      	ldr	r3, [pc, #48]	; (8003e00 <scaraInitDuty+0x838>)
 8003dce:	f503 6314 	add.w	r3, r3, #2368	; 0x940
 8003dd2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003dd6:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 8003dda:	461a      	mov	r2, r3
 8003ddc:	4623      	mov	r3, r4
 8003dde:	f7fc fa65 	bl	80002ac <__adddf3>
 8003de2:	4603      	mov	r3, r0
 8003de4:	460c      	mov	r4, r1
 8003de6:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
					s			 = command.sub_para_double;
 8003dea:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 8003dee:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
 8003df2:	e026      	b.n	8003e42 <scaraInitDuty+0x87a>
 8003df4:	f3af 8000 	nop.w
 8003df8:	60000000 	.word	0x60000000
 8003dfc:	400921fb 	.word	0x400921fb
 8003e00:	20005338 	.word	0x20005338
 8003e04:	20005cf0 	.word	0x20005cf0
 8003e08:	40668000 	.word	0x40668000
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8003e0c:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d113      	bne.n	8003e3c <scaraInitDuty+0x874>
					abs_position = command.sub_para_double;
 8003e14:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 8003e18:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
					s			 = command.sub_para_double - myDUTY.joint.theta4_start;
 8003e1c:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8003e20:	4bb5      	ldr	r3, [pc, #724]	; (80040f8 <scaraInitDuty+0xb30>)
 8003e22:	f503 6314 	add.w	r3, r3, #2368	; 0x940
 8003e26:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	4623      	mov	r3, r4
 8003e2e:	f7fc fa3b 	bl	80002a8 <__aeabi_dsub>
 8003e32:	4603      	mov	r3, r0
 8003e34:	460c      	mov	r4, r1
 8003e36:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
 8003e3a:	e002      	b.n	8003e42 <scaraInitDuty+0x87a>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 8003e3c:	230c      	movs	r3, #12
 8003e3e:	f000 bd54 	b.w	80048ea <scaraInitDuty+0x1322>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J3, abs_position)) {
 8003e42:	ed97 0b38 	vldr	d0, [r7, #224]	; 0xe0
 8003e46:	2003      	movs	r0, #3
 8003e48:	f003 fb46 	bl	80074d8 <scaraCheckWorkSpace1>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00b      	beq.n	8003e6a <scaraInitDuty+0x8a2>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8003e52:	2307      	movs	r3, #7
 8003e54:	f000 bd49 	b.w	80048ea <scaraInitDuty+0x1322>
				}
				break;
			default:
				return SCARA_STATUS_ERROR_JOINT_NUM;
 8003e58:	230b      	movs	r3, #11
 8003e5a:	f000 bd46 	b.w	80048ea <scaraInitDuty+0x1322>
				break;
 8003e5e:	bf00      	nop
 8003e60:	e004      	b.n	8003e6c <scaraInitDuty+0x8a4>
				break;
 8003e62:	bf00      	nop
 8003e64:	e002      	b.n	8003e6c <scaraInitDuty+0x8a4>
				break;
 8003e66:	bf00      	nop
 8003e68:	e000      	b.n	8003e6c <scaraInitDuty+0x8a4>
				break;
 8003e6a:	bf00      	nop
			}

			// LSPB
			if ( DUTY_TRAJECTORY_LSPB == command.trajec_type) {
 8003e6c:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	f040 80f5 	bne.w	8004060 <scaraInitDuty+0xa98>
				// Mode Init Time
				if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8003e76:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d17d      	bne.n	8003f7a <scaraInitDuty+0x9b2>
					for ( uint8_t i = 0; i < 4; i++) {
 8003e7e:	2300      	movs	r3, #0
 8003e80:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8003e84:	e074      	b.n	8003f70 <scaraInitDuty+0x9a8>
						if ( i == command.sub_para_int) {
 8003e86:	f897 20df 	ldrb.w	r2, [r7, #223]	; 0xdf
 8003e8a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d131      	bne.n	8003ef6 <scaraInitDuty+0x92e>
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8003e92:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8003e96:	4a98      	ldr	r2, [pc, #608]	; (80040f8 <scaraInitDuty+0xb30>)
 8003e98:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8003e9c:	fb01 f303 	mul.w	r3, r1, r3
 8003ea0:	4413      	add	r3, r2
 8003ea2:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	701a      	strb	r2, [r3, #0]
							myDUTY.joint.trajectory[i].lspb.Tf = command.time_total;
 8003eaa:	f897 20df 	ldrb.w	r2, [r7, #223]	; 0xdf
 8003eae:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8003eb2:	4991      	ldr	r1, [pc, #580]	; (80040f8 <scaraInitDuty+0xb30>)
 8003eb4:	f44f 70ac 	mov.w	r0, #344	; 0x158
 8003eb8:	fb00 f202 	mul.w	r2, r0, r2
 8003ebc:	440a      	add	r2, r1
 8003ebe:	f502 6284 	add.w	r2, r2, #1056	; 0x420
 8003ec2:	e9c2 3400 	strd	r3, r4, [r2]
							status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8003ec6:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8003eca:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8003ece:	fb02 f303 	mul.w	r3, r2, r3
 8003ed2:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 8003ed6:	4a88      	ldr	r2, [pc, #544]	; (80040f8 <scaraInitDuty+0xb30>)
 8003ed8:	1898      	adds	r0, r3, r2
 8003eda:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8003ede:	4a87      	ldr	r2, [pc, #540]	; (80040fc <scaraInitDuty+0xb34>)
 8003ee0:	5cd3      	ldrb	r3, [r2, r3]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	ed97 0b3a 	vldr	d0, [r7, #232]	; 0xe8
 8003ee8:	4619      	mov	r1, r3
 8003eea:	f000 ff4d 	bl	8004d88 <scaraInitLSPB>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
 8003ef4:	e030      	b.n	8003f58 <scaraInitDuty+0x990>
											s, DUTY_MODE_INIT_QVT);
						} else {
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8003ef6:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8003efa:	4a7f      	ldr	r2, [pc, #508]	; (80040f8 <scaraInitDuty+0xb30>)
 8003efc:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8003f00:	fb01 f303 	mul.w	r3, r1, r3
 8003f04:	4413      	add	r3, r2
 8003f06:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	701a      	strb	r2, [r3, #0]
							myDUTY.joint.trajectory[i].lspb.Tf = command.time_total;
 8003f0e:	f897 20df 	ldrb.w	r2, [r7, #223]	; 0xdf
 8003f12:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8003f16:	4978      	ldr	r1, [pc, #480]	; (80040f8 <scaraInitDuty+0xb30>)
 8003f18:	f44f 70ac 	mov.w	r0, #344	; 0x158
 8003f1c:	fb00 f202 	mul.w	r2, r0, r2
 8003f20:	440a      	add	r2, r1
 8003f22:	f502 6284 	add.w	r2, r2, #1056	; 0x420
 8003f26:	e9c2 3400 	strd	r3, r4, [r2]
							status2 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8003f2a:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8003f2e:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8003f32:	fb02 f303 	mul.w	r3, r2, r3
 8003f36:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 8003f3a:	4a6f      	ldr	r2, [pc, #444]	; (80040f8 <scaraInitDuty+0xb30>)
 8003f3c:	1898      	adds	r0, r3, r2
 8003f3e:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8003f42:	4a6e      	ldr	r2, [pc, #440]	; (80040fc <scaraInitDuty+0xb34>)
 8003f44:	5cd3      	ldrb	r3, [r2, r3]
 8003f46:	2201      	movs	r2, #1
 8003f48:	ed9f 0b69 	vldr	d0, [pc, #420]	; 80040f0 <scaraInitDuty+0xb28>
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	f000 ff1b 	bl	8004d88 <scaraInitLSPB>
 8003f52:	4603      	mov	r3, r0
 8003f54:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
											0, DUTY_MODE_INIT_QVT);
						}
						myDUTY.time_total = command.time_total;
 8003f58:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8003f5c:	4a66      	ldr	r2, [pc, #408]	; (80040f8 <scaraInitDuty+0xb30>)
 8003f5e:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8003f62:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 8003f66:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8003f6a:	3301      	adds	r3, #1
 8003f6c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8003f70:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8003f74:	2b03      	cmp	r3, #3
 8003f76:	d986      	bls.n	8003e86 <scaraInitDuty+0x8be>
 8003f78:	e179      	b.n	800426e <scaraInitDuty+0xca6>
					}
				// Mode Init Acc
				} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8003f7a:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d16b      	bne.n	800405a <scaraInitDuty+0xa92>
					for ( uint8_t i = 0; i < 4; i++) {
 8003f82:	2300      	movs	r3, #0
 8003f84:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
 8003f88:	e062      	b.n	8004050 <scaraInitDuty+0xa88>
						if ( i == command.sub_para_int) {
 8003f8a:	f897 20de 	ldrb.w	r2, [r7, #222]	; 0xde
 8003f8e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d134      	bne.n	8004000 <scaraInitDuty+0xa38>
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8003f96:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8003f9a:	4a57      	ldr	r2, [pc, #348]	; (80040f8 <scaraInitDuty+0xb30>)
 8003f9c:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8003fa0:	fb01 f303 	mul.w	r3, r1, r3
 8003fa4:	4413      	add	r3, r2
 8003fa6:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8003faa:	2200      	movs	r2, #0
 8003fac:	701a      	strb	r2, [r3, #0]
							status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8003fae:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8003fb2:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8003fb6:	fb02 f303 	mul.w	r3, r2, r3
 8003fba:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 8003fbe:	4a4e      	ldr	r2, [pc, #312]	; (80040f8 <scaraInitDuty+0xb30>)
 8003fc0:	1898      	adds	r0, r3, r2
 8003fc2:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8003fc6:	4a4d      	ldr	r2, [pc, #308]	; (80040fc <scaraInitDuty+0xb34>)
 8003fc8:	5cd3      	ldrb	r3, [r2, r3]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	ed97 0b3a 	vldr	d0, [r7, #232]	; 0xe8
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	f000 fed9 	bl	8004d88 <scaraInitLSPB>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
											s, DUTY_MODE_INIT_QVA);
							myDUTY.time_total = myDUTY.joint.trajectory[i].lspb.Tf;
 8003fdc:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8003fe0:	4a45      	ldr	r2, [pc, #276]	; (80040f8 <scaraInitDuty+0xb30>)
 8003fe2:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8003fe6:	fb01 f303 	mul.w	r3, r1, r3
 8003fea:	4413      	add	r3, r2
 8003fec:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8003ff0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003ff4:	4a40      	ldr	r2, [pc, #256]	; (80040f8 <scaraInitDuty+0xb30>)
 8003ff6:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8003ffa:	e9c2 3400 	strd	r3, r4, [r2]
 8003ffe:	e022      	b.n	8004046 <scaraInitDuty+0xa7e>
						} else {
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8004000:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8004004:	4a3c      	ldr	r2, [pc, #240]	; (80040f8 <scaraInitDuty+0xb30>)
 8004006:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800400a:	fb01 f303 	mul.w	r3, r1, r3
 800400e:	4413      	add	r3, r2
 8004010:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8004014:	2200      	movs	r2, #0
 8004016:	701a      	strb	r2, [r3, #0]
							status2 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8004018:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 800401c:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8004020:	fb02 f303 	mul.w	r3, r2, r3
 8004024:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 8004028:	4a33      	ldr	r2, [pc, #204]	; (80040f8 <scaraInitDuty+0xb30>)
 800402a:	1898      	adds	r0, r3, r2
 800402c:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8004030:	4a32      	ldr	r2, [pc, #200]	; (80040fc <scaraInitDuty+0xb34>)
 8004032:	5cd3      	ldrb	r3, [r2, r3]
 8004034:	2200      	movs	r2, #0
 8004036:	ed9f 0b2e 	vldr	d0, [pc, #184]	; 80040f0 <scaraInitDuty+0xb28>
 800403a:	4619      	mov	r1, r3
 800403c:	f000 fea4 	bl	8004d88 <scaraInitLSPB>
 8004040:	4603      	mov	r3, r0
 8004042:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
					for ( uint8_t i = 0; i < 4; i++) {
 8004046:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 800404a:	3301      	adds	r3, #1
 800404c:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
 8004050:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8004054:	2b03      	cmp	r3, #3
 8004056:	d998      	bls.n	8003f8a <scaraInitDuty+0x9c2>
 8004058:	e109      	b.n	800426e <scaraInitDuty+0xca6>
											0, DUTY_MODE_INIT_QVA);
						}
					}
				} else {
					return SCARA_STATUS_ERROR_MODE_INIT;
 800405a:	2308      	movs	r3, #8
 800405c:	f000 bc45 	b.w	80048ea <scaraInitDuty+0x1322>
				}
			// SCURVE
			} else if ( DUTY_TRAJECTORY_SCURVE == command.trajec_type) {
 8004060:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8004064:	2b01      	cmp	r3, #1
 8004066:	f040 8100 	bne.w	800426a <scaraInitDuty+0xca2>
					// Mode Init Time
					if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 800406a:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800406e:	2b01      	cmp	r3, #1
 8004070:	f040 8089 	bne.w	8004186 <scaraInitDuty+0xbbe>
						for ( uint8_t i = 0; i < 4; i++) {
 8004074:	2300      	movs	r3, #0
 8004076:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd
 800407a:	e07e      	b.n	800417a <scaraInitDuty+0xbb2>
							if ( i == command.sub_para_int) {
 800407c:	f897 20dd 	ldrb.w	r2, [r7, #221]	; 0xdd
 8004080:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004084:	429a      	cmp	r2, r3
 8004086:	d13b      	bne.n	8004100 <scaraInitDuty+0xb38>
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8004088:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 800408c:	4a1a      	ldr	r2, [pc, #104]	; (80040f8 <scaraInitDuty+0xb30>)
 800408e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8004092:	fb01 f303 	mul.w	r3, r1, r3
 8004096:	4413      	add	r3, r2
 8004098:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 800409c:	2201      	movs	r2, #1
 800409e:	701a      	strb	r2, [r3, #0]
								myDUTY.joint.trajectory[i].scurve.Tf = command.time_total;
 80040a0:	f897 20dd 	ldrb.w	r2, [r7, #221]	; 0xdd
 80040a4:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 80040a8:	4913      	ldr	r1, [pc, #76]	; (80040f8 <scaraInitDuty+0xb30>)
 80040aa:	f44f 70ac 	mov.w	r0, #344	; 0x158
 80040ae:	fb00 f202 	mul.w	r2, r0, r2
 80040b2:	440a      	add	r2, r1
 80040b4:	f502 6296 	add.w	r2, r2, #1200	; 0x4b0
 80040b8:	e9c2 3400 	strd	r3, r4, [r2]
								status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve),
 80040bc:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 80040c0:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80040c4:	fb02 f303 	mul.w	r3, r2, r3
 80040c8:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 80040cc:	4a0a      	ldr	r2, [pc, #40]	; (80040f8 <scaraInitDuty+0xb30>)
 80040ce:	1898      	adds	r0, r3, r2
 80040d0:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 80040d4:	4a09      	ldr	r2, [pc, #36]	; (80040fc <scaraInitDuty+0xb34>)
 80040d6:	5cd3      	ldrb	r3, [r2, r3]
 80040d8:	2201      	movs	r2, #1
 80040da:	ed97 0b3a 	vldr	d0, [r7, #232]	; 0xe8
 80040de:	4619      	mov	r1, r3
 80040e0:	f001 f9f6 	bl	80054d0 <scaraInitScurve>
 80040e4:	4603      	mov	r3, r0
 80040e6:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
 80040ea:	e03a      	b.n	8004162 <scaraInitDuty+0xb9a>
 80040ec:	f3af 8000 	nop.w
	...
 80040f8:	20005338 	.word	0x20005338
 80040fc:	20000c7c 	.word	0x20000c7c
											joint_taget[i],
											s, DUTY_MODE_INIT_QVT);
							} else {
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8004100:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8004104:	4aa4      	ldr	r2, [pc, #656]	; (8004398 <scaraInitDuty+0xdd0>)
 8004106:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800410a:	fb01 f303 	mul.w	r3, r1, r3
 800410e:	4413      	add	r3, r2
 8004110:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8004114:	2201      	movs	r2, #1
 8004116:	701a      	strb	r2, [r3, #0]
								myDUTY.joint.trajectory[i].scurve.Tf = command.time_total;
 8004118:	f897 20dd 	ldrb.w	r2, [r7, #221]	; 0xdd
 800411c:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8004120:	499d      	ldr	r1, [pc, #628]	; (8004398 <scaraInitDuty+0xdd0>)
 8004122:	f44f 70ac 	mov.w	r0, #344	; 0x158
 8004126:	fb00 f202 	mul.w	r2, r0, r2
 800412a:	440a      	add	r2, r1
 800412c:	f502 6296 	add.w	r2, r2, #1200	; 0x4b0
 8004130:	e9c2 3400 	strd	r3, r4, [r2]
								status2 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve),
 8004134:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8004138:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800413c:	fb02 f303 	mul.w	r3, r2, r3
 8004140:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8004144:	4a94      	ldr	r2, [pc, #592]	; (8004398 <scaraInitDuty+0xdd0>)
 8004146:	1898      	adds	r0, r3, r2
 8004148:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 800414c:	4a93      	ldr	r2, [pc, #588]	; (800439c <scaraInitDuty+0xdd4>)
 800414e:	5cd3      	ldrb	r3, [r2, r3]
 8004150:	2201      	movs	r2, #1
 8004152:	ed9f 0b8d 	vldr	d0, [pc, #564]	; 8004388 <scaraInitDuty+0xdc0>
 8004156:	4619      	mov	r1, r3
 8004158:	f001 f9ba 	bl	80054d0 <scaraInitScurve>
 800415c:	4603      	mov	r3, r0
 800415e:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
											joint_taget[i],
											0, DUTY_MODE_INIT_QVT);
							}
							myDUTY.time_total = command.time_total;
 8004162:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8004166:	4a8c      	ldr	r2, [pc, #560]	; (8004398 <scaraInitDuty+0xdd0>)
 8004168:	f602 1248 	addw	r2, r2, #2376	; 0x948
 800416c:	e9c2 3400 	strd	r3, r4, [r2]
						for ( uint8_t i = 0; i < 4; i++) {
 8004170:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8004174:	3301      	adds	r3, #1
 8004176:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd
 800417a:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 800417e:	2b03      	cmp	r3, #3
 8004180:	f67f af7c 	bls.w	800407c <scaraInitDuty+0xab4>
 8004184:	e073      	b.n	800426e <scaraInitDuty+0xca6>
						}
					// Mode Init Acc
					} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8004186:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800418a:	2b00      	cmp	r3, #0
 800418c:	d16b      	bne.n	8004266 <scaraInitDuty+0xc9e>
						for ( uint8_t i = 0; i < 4; i++) {
 800418e:	2300      	movs	r3, #0
 8004190:	f887 30dc 	strb.w	r3, [r7, #220]	; 0xdc
 8004194:	e062      	b.n	800425c <scaraInitDuty+0xc94>
							if ( i == command.sub_para_int) {
 8004196:	f897 20dc 	ldrb.w	r2, [r7, #220]	; 0xdc
 800419a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800419e:	429a      	cmp	r2, r3
 80041a0:	d134      	bne.n	800420c <scaraInitDuty+0xc44>
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 80041a2:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 80041a6:	4a7c      	ldr	r2, [pc, #496]	; (8004398 <scaraInitDuty+0xdd0>)
 80041a8:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80041ac:	fb01 f303 	mul.w	r3, r1, r3
 80041b0:	4413      	add	r3, r2
 80041b2:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 80041b6:	2201      	movs	r2, #1
 80041b8:	701a      	strb	r2, [r3, #0]
								status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve),
 80041ba:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 80041be:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80041c2:	fb02 f303 	mul.w	r3, r2, r3
 80041c6:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 80041ca:	4a73      	ldr	r2, [pc, #460]	; (8004398 <scaraInitDuty+0xdd0>)
 80041cc:	1898      	adds	r0, r3, r2
 80041ce:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 80041d2:	4a72      	ldr	r2, [pc, #456]	; (800439c <scaraInitDuty+0xdd4>)
 80041d4:	5cd3      	ldrb	r3, [r2, r3]
 80041d6:	2200      	movs	r2, #0
 80041d8:	ed97 0b3a 	vldr	d0, [r7, #232]	; 0xe8
 80041dc:	4619      	mov	r1, r3
 80041de:	f001 f977 	bl	80054d0 <scaraInitScurve>
 80041e2:	4603      	mov	r3, r0
 80041e4:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
											joint_taget[i],
											s, DUTY_MODE_INIT_QVA);
								myDUTY.time_total = myDUTY.joint.trajectory[i].scurve.Tf;
 80041e8:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 80041ec:	4a6a      	ldr	r2, [pc, #424]	; (8004398 <scaraInitDuty+0xdd0>)
 80041ee:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80041f2:	fb01 f303 	mul.w	r3, r1, r3
 80041f6:	4413      	add	r3, r2
 80041f8:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 80041fc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004200:	4a65      	ldr	r2, [pc, #404]	; (8004398 <scaraInitDuty+0xdd0>)
 8004202:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8004206:	e9c2 3400 	strd	r3, r4, [r2]
 800420a:	e022      	b.n	8004252 <scaraInitDuty+0xc8a>
							} else {
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 800420c:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 8004210:	4a61      	ldr	r2, [pc, #388]	; (8004398 <scaraInitDuty+0xdd0>)
 8004212:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8004216:	fb01 f303 	mul.w	r3, r1, r3
 800421a:	4413      	add	r3, r2
 800421c:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8004220:	2201      	movs	r2, #1
 8004222:	701a      	strb	r2, [r3, #0]
								status2 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve),
 8004224:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 8004228:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800422c:	fb02 f303 	mul.w	r3, r2, r3
 8004230:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8004234:	4a58      	ldr	r2, [pc, #352]	; (8004398 <scaraInitDuty+0xdd0>)
 8004236:	1898      	adds	r0, r3, r2
 8004238:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 800423c:	4a57      	ldr	r2, [pc, #348]	; (800439c <scaraInitDuty+0xdd4>)
 800423e:	5cd3      	ldrb	r3, [r2, r3]
 8004240:	2200      	movs	r2, #0
 8004242:	ed9f 0b51 	vldr	d0, [pc, #324]	; 8004388 <scaraInitDuty+0xdc0>
 8004246:	4619      	mov	r1, r3
 8004248:	f001 f942 	bl	80054d0 <scaraInitScurve>
 800424c:	4603      	mov	r3, r0
 800424e:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
						for ( uint8_t i = 0; i < 4; i++) {
 8004252:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 8004256:	3301      	adds	r3, #1
 8004258:	f887 30dc 	strb.w	r3, [r7, #220]	; 0xdc
 800425c:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 8004260:	2b03      	cmp	r3, #3
 8004262:	d998      	bls.n	8004196 <scaraInitDuty+0xbce>
 8004264:	e003      	b.n	800426e <scaraInitDuty+0xca6>
											0, DUTY_MODE_INIT_QVA);
							}
						}

					} else {
						return SCARA_STATUS_ERROR_MODE_INIT;
 8004266:	2308      	movs	r3, #8
 8004268:	e33f      	b.n	80048ea <scaraInitDuty+0x1322>
					}

			} else {
				return SCARA_STATUS_ERROR_TRAJECTORY;
 800426a:	2305      	movs	r3, #5
 800426c:	e33d      	b.n	80048ea <scaraInitDuty+0x1322>
			}
		// Check Init Status
			if ( SCARA_STATUS_OK != status1) {
 800426e:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8004272:	2b00      	cmp	r3, #0
 8004274:	d002      	beq.n	800427c <scaraInitDuty+0xcb4>
				return status1;
 8004276:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 800427a:	e336      	b.n	80048ea <scaraInitDuty+0x1322>
			}
			if ( SCARA_STATUS_OK != status2) {
 800427c:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8004280:	2b00      	cmp	r3, #0
 8004282:	f000 8313 	beq.w	80048ac <scaraInitDuty+0x12e4>
				return status2;
 8004286:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 800428a:	e32e      	b.n	80048ea <scaraInitDuty+0x1322>
			}

		//----Joint Quadra
		} else if 	( DUTY_JOINT_4DOF == command.joint_type) {
 800428c:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8004290:	2b01      	cmp	r3, #1
 8004292:	f040 8307 	bne.w	80048a4 <scaraInitDuty+0x12dc>
			SCARA_PositionTypeDef	target_point;
			// Change Degree --> Radian
			command.target_point.roll = command.target_point.roll*PI/180.0;
 8004296:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800429a:	a33d      	add	r3, pc, #244	; (adr r3, 8004390 <scaraInitDuty+0xdc8>)
 800429c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a0:	f7fc f9ba 	bl	8000618 <__aeabi_dmul>
 80042a4:	4603      	mov	r3, r0
 80042a6:	460c      	mov	r4, r1
 80042a8:	4618      	mov	r0, r3
 80042aa:	4621      	mov	r1, r4
 80042ac:	f04f 0200 	mov.w	r2, #0
 80042b0:	4b3b      	ldr	r3, [pc, #236]	; (80043a0 <scaraInitDuty+0xdd8>)
 80042b2:	f7fc fadb 	bl	800086c <__aeabi_ddiv>
 80042b6:	4603      	mov	r3, r0
 80042b8:	460c      	mov	r4, r1
 80042ba:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
			// Coordinate
			if( DUTY_COORDINATES_REL == command.coordinate_type) {
 80042be:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d134      	bne.n	8004330 <scaraInitDuty+0xd68>
				target_point.x 		= positionCurrent.x + command.target_point.x;
 80042c6:	4b37      	ldr	r3, [pc, #220]	; (80043a4 <scaraInitDuty+0xddc>)
 80042c8:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80042cc:	e9d7 345c 	ldrd	r3, r4, [r7, #368]	; 0x170
 80042d0:	461a      	mov	r2, r3
 80042d2:	4623      	mov	r3, r4
 80042d4:	f7fb ffea 	bl	80002ac <__adddf3>
 80042d8:	4603      	mov	r3, r0
 80042da:	460c      	mov	r4, r1
 80042dc:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
				target_point.y 		= positionCurrent.y + command.target_point.y;
 80042e0:	4b30      	ldr	r3, [pc, #192]	; (80043a4 <scaraInitDuty+0xddc>)
 80042e2:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80042e6:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 80042ea:	461a      	mov	r2, r3
 80042ec:	4623      	mov	r3, r4
 80042ee:	f7fb ffdd 	bl	80002ac <__adddf3>
 80042f2:	4603      	mov	r3, r0
 80042f4:	460c      	mov	r4, r1
 80042f6:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
				target_point.z 		= positionCurrent.z + command.target_point.z;
 80042fa:	4b2a      	ldr	r3, [pc, #168]	; (80043a4 <scaraInitDuty+0xddc>)
 80042fc:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004300:	e9d7 3460 	ldrd	r3, r4, [r7, #384]	; 0x180
 8004304:	461a      	mov	r2, r3
 8004306:	4623      	mov	r3, r4
 8004308:	f7fb ffd0 	bl	80002ac <__adddf3>
 800430c:	4603      	mov	r3, r0
 800430e:	460c      	mov	r4, r1
 8004310:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
				target_point.roll	= positionCurrent.roll + command.target_point.roll;
 8004314:	4b23      	ldr	r3, [pc, #140]	; (80043a4 <scaraInitDuty+0xddc>)
 8004316:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800431a:	e9d7 3462 	ldrd	r3, r4, [r7, #392]	; 0x188
 800431e:	461a      	mov	r2, r3
 8004320:	4623      	mov	r3, r4
 8004322:	f7fb ffc3 	bl	80002ac <__adddf3>
 8004326:	4603      	mov	r3, r0
 8004328:	460c      	mov	r4, r1
 800432a:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
 800432e:	e016      	b.n	800435e <scaraInitDuty+0xd96>
			} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8004330:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8004334:	2b00      	cmp	r3, #0
 8004336:	d110      	bne.n	800435a <scaraInitDuty+0xd92>
				target_point.x 		= command.target_point.x;
 8004338:	e9d7 345c 	ldrd	r3, r4, [r7, #368]	; 0x170
 800433c:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
				target_point.y 		= command.target_point.y;
 8004340:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8004344:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
				target_point.z 		= command.target_point.z;
 8004348:	e9d7 3460 	ldrd	r3, r4, [r7, #384]	; 0x180
 800434c:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
				target_point.roll	= command.target_point.roll;
 8004350:	e9d7 3462 	ldrd	r3, r4, [r7, #392]	; 0x188
 8004354:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
 8004358:	e001      	b.n	800435e <scaraInitDuty+0xd96>
			} else {
				return SCARA_STATUS_ERROR_COORDINATE;
 800435a:	230c      	movs	r3, #12
 800435c:	e2c5      	b.n	80048ea <scaraInitDuty+0x1322>
			}

			if( FALSE == kinematicInverse(&target_point, positionCurrent)) {
 800435e:	4c11      	ldr	r4, [pc, #68]	; (80043a4 <scaraInitDuty+0xddc>)
 8004360:	f107 0568 	add.w	r5, r7, #104	; 0x68
 8004364:	4668      	mov	r0, sp
 8004366:	f104 0308 	add.w	r3, r4, #8
 800436a:	2260      	movs	r2, #96	; 0x60
 800436c:	4619      	mov	r1, r3
 800436e:	f00e fa2f 	bl	80127d0 <memcpy>
 8004372:	e894 000c 	ldmia.w	r4, {r2, r3}
 8004376:	4628      	mov	r0, r5
 8004378:	f7fe fd62 	bl	8002e40 <kinematicInverse>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d112      	bne.n	80043a8 <scaraInitDuty+0xde0>
				return SCARA_STATUS_ERROR_OVER_WORKSPACE;// Exit with error
 8004382:	2307      	movs	r3, #7
 8004384:	e2b1      	b.n	80048ea <scaraInitDuty+0x1322>
 8004386:	bf00      	nop
	...
 8004390:	60000000 	.word	0x60000000
 8004394:	400921fb 	.word	0x400921fb
 8004398:	20005338 	.word	0x20005338
 800439c:	20000c7c 	.word	0x20000c7c
 80043a0:	40668000 	.word	0x40668000
 80043a4:	20005cf0 	.word	0x20005cf0
			}
			// Trajectory 4 profile
			double q[4];
			q[0] = target_point.Theta1 - positionCurrent.Theta1;
 80043a8:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80043ac:	4bb0      	ldr	r3, [pc, #704]	; (8004670 <scaraInitDuty+0x10a8>)
 80043ae:	e9d3 3412 	ldrd	r3, r4, [r3, #72]	; 0x48
 80043b2:	461a      	mov	r2, r3
 80043b4:	4623      	mov	r3, r4
 80043b6:	f7fb ff77 	bl	80002a8 <__aeabi_dsub>
 80043ba:	4603      	mov	r3, r0
 80043bc:	460c      	mov	r4, r1
 80043be:	463a      	mov	r2, r7
 80043c0:	e9c2 3400 	strd	r3, r4, [r2]
			q[1] = target_point.Theta2 - positionCurrent.Theta2;
 80043c4:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80043c8:	4ba9      	ldr	r3, [pc, #676]	; (8004670 <scaraInitDuty+0x10a8>)
 80043ca:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 80043ce:	461a      	mov	r2, r3
 80043d0:	4623      	mov	r3, r4
 80043d2:	f7fb ff69 	bl	80002a8 <__aeabi_dsub>
 80043d6:	4603      	mov	r3, r0
 80043d8:	460c      	mov	r4, r1
 80043da:	463a      	mov	r2, r7
 80043dc:	e9c2 3402 	strd	r3, r4, [r2, #8]
			q[2] = target_point.D3 	   - positionCurrent.D3;
 80043e0:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80043e4:	4ba2      	ldr	r3, [pc, #648]	; (8004670 <scaraInitDuty+0x10a8>)
 80043e6:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 80043ea:	461a      	mov	r2, r3
 80043ec:	4623      	mov	r3, r4
 80043ee:	f7fb ff5b 	bl	80002a8 <__aeabi_dsub>
 80043f2:	4603      	mov	r3, r0
 80043f4:	460c      	mov	r4, r1
 80043f6:	463a      	mov	r2, r7
 80043f8:	e9c2 3404 	strd	r3, r4, [r2, #16]
			q[3] = target_point.Theta4 - positionCurrent.Theta4;
 80043fc:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004400:	4b9b      	ldr	r3, [pc, #620]	; (8004670 <scaraInitDuty+0x10a8>)
 8004402:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8004406:	461a      	mov	r2, r3
 8004408:	4623      	mov	r3, r4
 800440a:	f7fb ff4d 	bl	80002a8 <__aeabi_dsub>
 800440e:	4603      	mov	r3, r0
 8004410:	460c      	mov	r4, r1
 8004412:	463a      	mov	r2, r7
 8004414:	e9c2 3406 	strd	r3, r4, [r2, #24]

			// LSPB
			if ( DUTY_TRAJECTORY_LSPB == command.trajec_type) {
 8004418:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 800441c:	2b00      	cmp	r3, #0
 800441e:	f040 811a 	bne.w	8004656 <scaraInitDuty+0x108e>
				// Mode Init Time
				if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8004422:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8004426:	2b01      	cmp	r3, #1
 8004428:	d14d      	bne.n	80044c6 <scaraInitDuty+0xefe>
					for ( uint8_t i = 0; i < 4; i++) {
 800442a:	2300      	movs	r3, #0
 800442c:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
 8004430:	e03d      	b.n	80044ae <scaraInitDuty+0xee6>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8004432:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8004436:	4a8f      	ldr	r2, [pc, #572]	; (8004674 <scaraInitDuty+0x10ac>)
 8004438:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800443c:	fb01 f303 	mul.w	r3, r1, r3
 8004440:	4413      	add	r3, r2
 8004442:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8004446:	2200      	movs	r2, #0
 8004448:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].lspb.Tf = command.time_total;
 800444a:	f897 20db 	ldrb.w	r2, [r7, #219]	; 0xdb
 800444e:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8004452:	4988      	ldr	r1, [pc, #544]	; (8004674 <scaraInitDuty+0x10ac>)
 8004454:	f44f 70ac 	mov.w	r0, #344	; 0x158
 8004458:	fb00 f202 	mul.w	r2, r0, r2
 800445c:	440a      	add	r2, r1
 800445e:	f502 6284 	add.w	r2, r2, #1056	; 0x420
 8004462:	e9c2 3400 	strd	r3, r4, [r2]
						status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8004466:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800446a:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800446e:	fb02 f303 	mul.w	r3, r2, r3
 8004472:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 8004476:	4a7f      	ldr	r2, [pc, #508]	; (8004674 <scaraInitDuty+0x10ac>)
 8004478:	1898      	adds	r0, r3, r2
 800447a:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800447e:	4a7e      	ldr	r2, [pc, #504]	; (8004678 <scaraInitDuty+0x10b0>)
 8004480:	5cd1      	ldrb	r1, [r2, r3]
 8004482:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8004486:	463a      	mov	r2, r7
 8004488:	00db      	lsls	r3, r3, #3
 800448a:	4413      	add	r3, r2
 800448c:	ed93 7b00 	vldr	d7, [r3]
 8004490:	2201      	movs	r2, #1
 8004492:	eeb0 0a47 	vmov.f32	s0, s14
 8004496:	eef0 0a67 	vmov.f32	s1, s15
 800449a:	f000 fc75 	bl	8004d88 <scaraInitLSPB>
 800449e:	4603      	mov	r3, r0
 80044a0:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
					for ( uint8_t i = 0; i < 4; i++) {
 80044a4:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80044a8:	3301      	adds	r3, #1
 80044aa:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
 80044ae:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80044b2:	2b03      	cmp	r3, #3
 80044b4:	d9bd      	bls.n	8004432 <scaraInitDuty+0xe6a>
											q[i], DUTY_MODE_INIT_QVT);

					}
					myDUTY.time_total = command.time_total;
 80044b6:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 80044ba:	4a6e      	ldr	r2, [pc, #440]	; (8004674 <scaraInitDuty+0x10ac>)
 80044bc:	f602 1248 	addw	r2, r2, #2376	; 0x948
 80044c0:	e9c2 3400 	strd	r3, r4, [r2]
 80044c4:	e1f2      	b.n	80048ac <scaraInitDuty+0x12e4>
				// Mode Init Acc
				} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 80044c6:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	f040 80c1 	bne.w	8004652 <scaraInitDuty+0x108a>
					for ( uint8_t i = 0; i < 4; i++) {
 80044d0:	2300      	movs	r3, #0
 80044d2:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
 80044d6:	e02f      	b.n	8004538 <scaraInitDuty+0xf70>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 80044d8:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
 80044dc:	4a65      	ldr	r2, [pc, #404]	; (8004674 <scaraInitDuty+0x10ac>)
 80044de:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80044e2:	fb01 f303 	mul.w	r3, r1, r3
 80044e6:	4413      	add	r3, r2
 80044e8:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 80044ec:	2200      	movs	r2, #0
 80044ee:	701a      	strb	r2, [r3, #0]
						status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 80044f0:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
 80044f4:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80044f8:	fb02 f303 	mul.w	r3, r2, r3
 80044fc:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 8004500:	4a5c      	ldr	r2, [pc, #368]	; (8004674 <scaraInitDuty+0x10ac>)
 8004502:	1898      	adds	r0, r3, r2
 8004504:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
 8004508:	4a5b      	ldr	r2, [pc, #364]	; (8004678 <scaraInitDuty+0x10b0>)
 800450a:	5cd1      	ldrb	r1, [r2, r3]
 800450c:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
 8004510:	463a      	mov	r2, r7
 8004512:	00db      	lsls	r3, r3, #3
 8004514:	4413      	add	r3, r2
 8004516:	ed93 7b00 	vldr	d7, [r3]
 800451a:	2200      	movs	r2, #0
 800451c:	eeb0 0a47 	vmov.f32	s0, s14
 8004520:	eef0 0a67 	vmov.f32	s1, s15
 8004524:	f000 fc30 	bl	8004d88 <scaraInitLSPB>
 8004528:	4603      	mov	r3, r0
 800452a:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
					for ( uint8_t i = 0; i < 4; i++) {
 800452e:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
 8004532:	3301      	adds	r3, #1
 8004534:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
 8004538:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
 800453c:	2b03      	cmp	r3, #3
 800453e:	d9cb      	bls.n	80044d8 <scaraInitDuty+0xf10>
													q[i], DUTY_MODE_INIT_QVA);
					}
					myDUTY.time_total = 0;
 8004540:	4b4c      	ldr	r3, [pc, #304]	; (8004674 <scaraInitDuty+0x10ac>)
 8004542:	f603 1248 	addw	r2, r3, #2376	; 0x948
 8004546:	f04f 0300 	mov.w	r3, #0
 800454a:	f04f 0400 	mov.w	r4, #0
 800454e:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 8004552:	2300      	movs	r3, #0
 8004554:	f887 30d9 	strb.w	r3, [r7, #217]	; 0xd9
 8004558:	e02d      	b.n	80045b6 <scaraInitDuty+0xfee>
						if ( myDUTY.joint.trajectory[i].lspb.Tf > myDUTY.time_total) {
 800455a:	f897 30d9 	ldrb.w	r3, [r7, #217]	; 0xd9
 800455e:	4a45      	ldr	r2, [pc, #276]	; (8004674 <scaraInitDuty+0x10ac>)
 8004560:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8004564:	fb01 f303 	mul.w	r3, r1, r3
 8004568:	4413      	add	r3, r2
 800456a:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 800456e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004572:	4b40      	ldr	r3, [pc, #256]	; (8004674 <scaraInitDuty+0x10ac>)
 8004574:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8004578:	e9d3 3400 	ldrd	r3, r4, [r3]
 800457c:	461a      	mov	r2, r3
 800457e:	4623      	mov	r3, r4
 8004580:	f7fc fada 	bl	8000b38 <__aeabi_dcmpgt>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d010      	beq.n	80045ac <scaraInitDuty+0xfe4>
							myDUTY.time_total = myDUTY.joint.trajectory[i].lspb.Tf;
 800458a:	f897 30d9 	ldrb.w	r3, [r7, #217]	; 0xd9
 800458e:	4a39      	ldr	r2, [pc, #228]	; (8004674 <scaraInitDuty+0x10ac>)
 8004590:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8004594:	fb01 f303 	mul.w	r3, r1, r3
 8004598:	4413      	add	r3, r2
 800459a:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 800459e:	e9d3 3400 	ldrd	r3, r4, [r3]
 80045a2:	4a34      	ldr	r2, [pc, #208]	; (8004674 <scaraInitDuty+0x10ac>)
 80045a4:	f602 1248 	addw	r2, r2, #2376	; 0x948
 80045a8:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 80045ac:	f897 30d9 	ldrb.w	r3, [r7, #217]	; 0xd9
 80045b0:	3301      	adds	r3, #1
 80045b2:	f887 30d9 	strb.w	r3, [r7, #217]	; 0xd9
 80045b6:	f897 30d9 	ldrb.w	r3, [r7, #217]	; 0xd9
 80045ba:	2b03      	cmp	r3, #3
 80045bc:	d9cd      	bls.n	800455a <scaraInitDuty+0xf92>
						}
					}
					for ( uint8_t i = 0; i < 4; i++) {
 80045be:	2300      	movs	r3, #0
 80045c0:	f887 30d8 	strb.w	r3, [r7, #216]	; 0xd8
 80045c4:	e040      	b.n	8004648 <scaraInitDuty+0x1080>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 80045c6:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
 80045ca:	4a2a      	ldr	r2, [pc, #168]	; (8004674 <scaraInitDuty+0x10ac>)
 80045cc:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80045d0:	fb01 f303 	mul.w	r3, r1, r3
 80045d4:	4413      	add	r3, r2
 80045d6:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 80045da:	2200      	movs	r2, #0
 80045dc:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].lspb.Tf = myDUTY.time_total;
 80045de:	f897 20d8 	ldrb.w	r2, [r7, #216]	; 0xd8
 80045e2:	4b24      	ldr	r3, [pc, #144]	; (8004674 <scaraInitDuty+0x10ac>)
 80045e4:	f603 1348 	addw	r3, r3, #2376	; 0x948
 80045e8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80045ec:	4921      	ldr	r1, [pc, #132]	; (8004674 <scaraInitDuty+0x10ac>)
 80045ee:	f44f 70ac 	mov.w	r0, #344	; 0x158
 80045f2:	fb00 f202 	mul.w	r2, r0, r2
 80045f6:	440a      	add	r2, r1
 80045f8:	f502 6284 	add.w	r2, r2, #1056	; 0x420
 80045fc:	e9c2 3400 	strd	r3, r4, [r2]
						status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8004600:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
 8004604:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8004608:	fb02 f303 	mul.w	r3, r2, r3
 800460c:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 8004610:	4a18      	ldr	r2, [pc, #96]	; (8004674 <scaraInitDuty+0x10ac>)
 8004612:	1898      	adds	r0, r3, r2
 8004614:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
 8004618:	4a17      	ldr	r2, [pc, #92]	; (8004678 <scaraInitDuty+0x10b0>)
 800461a:	5cd1      	ldrb	r1, [r2, r3]
 800461c:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
 8004620:	463a      	mov	r2, r7
 8004622:	00db      	lsls	r3, r3, #3
 8004624:	4413      	add	r3, r2
 8004626:	ed93 7b00 	vldr	d7, [r3]
 800462a:	2201      	movs	r2, #1
 800462c:	eeb0 0a47 	vmov.f32	s0, s14
 8004630:	eef0 0a67 	vmov.f32	s1, s15
 8004634:	f000 fba8 	bl	8004d88 <scaraInitLSPB>
 8004638:	4603      	mov	r3, r0
 800463a:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
					for ( uint8_t i = 0; i < 4; i++) {
 800463e:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
 8004642:	3301      	adds	r3, #1
 8004644:	f887 30d8 	strb.w	r3, [r7, #216]	; 0xd8
 8004648:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
 800464c:	2b03      	cmp	r3, #3
 800464e:	d9ba      	bls.n	80045c6 <scaraInitDuty+0xffe>
 8004650:	e12c      	b.n	80048ac <scaraInitDuty+0x12e4>
													q[i], DUTY_MODE_INIT_QVT);
					}

				} else {
					return SCARA_STATUS_ERROR_MODE_INIT;
 8004652:	2308      	movs	r3, #8
 8004654:	e149      	b.n	80048ea <scaraInitDuty+0x1322>
				}
				// SCURVE
			} else if ( DUTY_TRAJECTORY_SCURVE == command.trajec_type) {
 8004656:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 800465a:	2b01      	cmp	r3, #1
 800465c:	f040 8120 	bne.w	80048a0 <scaraInitDuty+0x12d8>
				// Mode Init Time
				if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8004660:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8004664:	2b01      	cmp	r3, #1
 8004666:	d153      	bne.n	8004710 <scaraInitDuty+0x1148>
					for ( uint8_t i = 0; i < 4; i++) {
 8004668:	2300      	movs	r3, #0
 800466a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800466e:	e043      	b.n	80046f8 <scaraInitDuty+0x1130>
 8004670:	20005cf0 	.word	0x20005cf0
 8004674:	20005338 	.word	0x20005338
 8004678:	20000c7c 	.word	0x20000c7c
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 800467c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8004680:	4a9e      	ldr	r2, [pc, #632]	; (80048fc <scaraInitDuty+0x1334>)
 8004682:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8004686:	fb01 f303 	mul.w	r3, r1, r3
 800468a:	4413      	add	r3, r2
 800468c:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8004690:	2201      	movs	r2, #1
 8004692:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].scurve.Tf = command.time_total;
 8004694:	f897 20d7 	ldrb.w	r2, [r7, #215]	; 0xd7
 8004698:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 800469c:	4997      	ldr	r1, [pc, #604]	; (80048fc <scaraInitDuty+0x1334>)
 800469e:	f44f 70ac 	mov.w	r0, #344	; 0x158
 80046a2:	fb00 f202 	mul.w	r2, r0, r2
 80046a6:	440a      	add	r2, r1
 80046a8:	f502 6296 	add.w	r2, r2, #1200	; 0x4b0
 80046ac:	e9c2 3400 	strd	r3, r4, [r2]
						status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 80046b0:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80046b4:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80046b8:	fb02 f303 	mul.w	r3, r2, r3
 80046bc:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 80046c0:	4a8e      	ldr	r2, [pc, #568]	; (80048fc <scaraInitDuty+0x1334>)
 80046c2:	1898      	adds	r0, r3, r2
 80046c4:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80046c8:	4a8d      	ldr	r2, [pc, #564]	; (8004900 <scaraInitDuty+0x1338>)
 80046ca:	5cd1      	ldrb	r1, [r2, r3]
 80046cc:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80046d0:	463a      	mov	r2, r7
 80046d2:	00db      	lsls	r3, r3, #3
 80046d4:	4413      	add	r3, r2
 80046d6:	ed93 7b00 	vldr	d7, [r3]
 80046da:	2201      	movs	r2, #1
 80046dc:	eeb0 0a47 	vmov.f32	s0, s14
 80046e0:	eef0 0a67 	vmov.f32	s1, s15
 80046e4:	f000 fef4 	bl	80054d0 <scaraInitScurve>
 80046e8:	4603      	mov	r3, r0
 80046ea:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
					for ( uint8_t i = 0; i < 4; i++) {
 80046ee:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80046f2:	3301      	adds	r3, #1
 80046f4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80046f8:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80046fc:	2b03      	cmp	r3, #3
 80046fe:	d9bd      	bls.n	800467c <scaraInitDuty+0x10b4>
											q[i], DUTY_MODE_INIT_QVT);

					}
					myDUTY.time_total = command.time_total;
 8004700:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8004704:	4a7d      	ldr	r2, [pc, #500]	; (80048fc <scaraInitDuty+0x1334>)
 8004706:	f602 1248 	addw	r2, r2, #2376	; 0x948
 800470a:	e9c2 3400 	strd	r3, r4, [r2]
 800470e:	e0cd      	b.n	80048ac <scaraInitDuty+0x12e4>
				// Mode Init Acc
				} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8004710:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8004714:	2b00      	cmp	r3, #0
 8004716:	f040 80c1 	bne.w	800489c <scaraInitDuty+0x12d4>
					for ( uint8_t i = 0; i < 4; i++) {
 800471a:	2300      	movs	r3, #0
 800471c:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
 8004720:	e02f      	b.n	8004782 <scaraInitDuty+0x11ba>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8004722:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 8004726:	4a75      	ldr	r2, [pc, #468]	; (80048fc <scaraInitDuty+0x1334>)
 8004728:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800472c:	fb01 f303 	mul.w	r3, r1, r3
 8004730:	4413      	add	r3, r2
 8004732:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8004736:	2201      	movs	r2, #1
 8004738:	701a      	strb	r2, [r3, #0]
						status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 800473a:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 800473e:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8004742:	fb02 f303 	mul.w	r3, r2, r3
 8004746:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 800474a:	4a6c      	ldr	r2, [pc, #432]	; (80048fc <scaraInitDuty+0x1334>)
 800474c:	1898      	adds	r0, r3, r2
 800474e:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 8004752:	4a6b      	ldr	r2, [pc, #428]	; (8004900 <scaraInitDuty+0x1338>)
 8004754:	5cd1      	ldrb	r1, [r2, r3]
 8004756:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 800475a:	463a      	mov	r2, r7
 800475c:	00db      	lsls	r3, r3, #3
 800475e:	4413      	add	r3, r2
 8004760:	ed93 7b00 	vldr	d7, [r3]
 8004764:	2200      	movs	r2, #0
 8004766:	eeb0 0a47 	vmov.f32	s0, s14
 800476a:	eef0 0a67 	vmov.f32	s1, s15
 800476e:	f000 feaf 	bl	80054d0 <scaraInitScurve>
 8004772:	4603      	mov	r3, r0
 8004774:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
					for ( uint8_t i = 0; i < 4; i++) {
 8004778:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 800477c:	3301      	adds	r3, #1
 800477e:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
 8004782:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 8004786:	2b03      	cmp	r3, #3
 8004788:	d9cb      	bls.n	8004722 <scaraInitDuty+0x115a>
													q[i], DUTY_MODE_INIT_QVA);
					}
					myDUTY.time_total = 0;
 800478a:	4b5c      	ldr	r3, [pc, #368]	; (80048fc <scaraInitDuty+0x1334>)
 800478c:	f603 1248 	addw	r2, r3, #2376	; 0x948
 8004790:	f04f 0300 	mov.w	r3, #0
 8004794:	f04f 0400 	mov.w	r4, #0
 8004798:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 800479c:	2300      	movs	r3, #0
 800479e:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
 80047a2:	e02d      	b.n	8004800 <scaraInitDuty+0x1238>
						if ( myDUTY.joint.trajectory[i].scurve.Tf > myDUTY.time_total) {
 80047a4:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 80047a8:	4a54      	ldr	r2, [pc, #336]	; (80048fc <scaraInitDuty+0x1334>)
 80047aa:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80047ae:	fb01 f303 	mul.w	r3, r1, r3
 80047b2:	4413      	add	r3, r2
 80047b4:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 80047b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80047bc:	4b4f      	ldr	r3, [pc, #316]	; (80048fc <scaraInitDuty+0x1334>)
 80047be:	f603 1348 	addw	r3, r3, #2376	; 0x948
 80047c2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80047c6:	461a      	mov	r2, r3
 80047c8:	4623      	mov	r3, r4
 80047ca:	f7fc f9b5 	bl	8000b38 <__aeabi_dcmpgt>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d010      	beq.n	80047f6 <scaraInitDuty+0x122e>
							myDUTY.time_total = myDUTY.joint.trajectory[i].scurve.Tf;
 80047d4:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 80047d8:	4a48      	ldr	r2, [pc, #288]	; (80048fc <scaraInitDuty+0x1334>)
 80047da:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80047de:	fb01 f303 	mul.w	r3, r1, r3
 80047e2:	4413      	add	r3, r2
 80047e4:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 80047e8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80047ec:	4a43      	ldr	r2, [pc, #268]	; (80048fc <scaraInitDuty+0x1334>)
 80047ee:	f602 1248 	addw	r2, r2, #2376	; 0x948
 80047f2:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 80047f6:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 80047fa:	3301      	adds	r3, #1
 80047fc:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
 8004800:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 8004804:	2b03      	cmp	r3, #3
 8004806:	d9cd      	bls.n	80047a4 <scaraInitDuty+0x11dc>
						}
					}
					for ( uint8_t i = 0; i < 4; i++) {
 8004808:	2300      	movs	r3, #0
 800480a:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4
 800480e:	e040      	b.n	8004892 <scaraInitDuty+0x12ca>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8004810:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 8004814:	4a39      	ldr	r2, [pc, #228]	; (80048fc <scaraInitDuty+0x1334>)
 8004816:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800481a:	fb01 f303 	mul.w	r3, r1, r3
 800481e:	4413      	add	r3, r2
 8004820:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8004824:	2201      	movs	r2, #1
 8004826:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].scurve.Tf = myDUTY.time_total;
 8004828:	f897 20d4 	ldrb.w	r2, [r7, #212]	; 0xd4
 800482c:	4b33      	ldr	r3, [pc, #204]	; (80048fc <scaraInitDuty+0x1334>)
 800482e:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8004832:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004836:	4931      	ldr	r1, [pc, #196]	; (80048fc <scaraInitDuty+0x1334>)
 8004838:	f44f 70ac 	mov.w	r0, #344	; 0x158
 800483c:	fb00 f202 	mul.w	r2, r0, r2
 8004840:	440a      	add	r2, r1
 8004842:	f502 6296 	add.w	r2, r2, #1200	; 0x4b0
 8004846:	e9c2 3400 	strd	r3, r4, [r2]
						status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 800484a:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 800484e:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8004852:	fb02 f303 	mul.w	r3, r2, r3
 8004856:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 800485a:	4a28      	ldr	r2, [pc, #160]	; (80048fc <scaraInitDuty+0x1334>)
 800485c:	1898      	adds	r0, r3, r2
 800485e:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 8004862:	4a27      	ldr	r2, [pc, #156]	; (8004900 <scaraInitDuty+0x1338>)
 8004864:	5cd1      	ldrb	r1, [r2, r3]
 8004866:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 800486a:	463a      	mov	r2, r7
 800486c:	00db      	lsls	r3, r3, #3
 800486e:	4413      	add	r3, r2
 8004870:	ed93 7b00 	vldr	d7, [r3]
 8004874:	2201      	movs	r2, #1
 8004876:	eeb0 0a47 	vmov.f32	s0, s14
 800487a:	eef0 0a67 	vmov.f32	s1, s15
 800487e:	f000 fe27 	bl	80054d0 <scaraInitScurve>
 8004882:	4603      	mov	r3, r0
 8004884:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
					for ( uint8_t i = 0; i < 4; i++) {
 8004888:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 800488c:	3301      	adds	r3, #1
 800488e:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4
 8004892:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 8004896:	2b03      	cmp	r3, #3
 8004898:	d9ba      	bls.n	8004810 <scaraInitDuty+0x1248>
 800489a:	e007      	b.n	80048ac <scaraInitDuty+0x12e4>
													q[i], DUTY_MODE_INIT_QVT);
					}

				} else {
					return SCARA_STATUS_ERROR_MODE_INIT;
 800489c:	2308      	movs	r3, #8
 800489e:	e024      	b.n	80048ea <scaraInitDuty+0x1322>
				}

			} else {
				return SCARA_STATUS_ERROR_TRAJECTORY;
 80048a0:	2305      	movs	r3, #5
 80048a2:	e022      	b.n	80048ea <scaraInitDuty+0x1322>
			}

		} else {
			return SCARA_STATUS_ERROR_JOINT;
 80048a4:	2304      	movs	r3, #4
 80048a6:	e020      	b.n	80048ea <scaraInitDuty+0x1322>
		}

	} else {
		return SCARA_STATUS_ERROR_SPACE;
 80048a8:	2302      	movs	r3, #2
 80048aa:	e01e      	b.n	80048ea <scaraInitDuty+0x1322>
	}

	// Reset time and distance
	positionCurrent.t = 0;
 80048ac:	4a15      	ldr	r2, [pc, #84]	; (8004904 <scaraInitDuty+0x133c>)
 80048ae:	f04f 0300 	mov.w	r3, #0
 80048b2:	f04f 0400 	mov.w	r4, #0
 80048b6:	e9c2 3406 	strd	r3, r4, [r2, #24]
	positionCurrent.total_time = myDUTY.time_total;
 80048ba:	4b10      	ldr	r3, [pc, #64]	; (80048fc <scaraInitDuty+0x1334>)
 80048bc:	f603 1348 	addw	r3, r3, #2376	; 0x948
 80048c0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80048c4:	4a0f      	ldr	r2, [pc, #60]	; (8004904 <scaraInitDuty+0x133c>)
 80048c6:	e9c2 3408 	strd	r3, r4, [r2, #32]
	positionNext.t = 0;
 80048ca:	4a0f      	ldr	r2, [pc, #60]	; (8004908 <scaraInitDuty+0x1340>)
 80048cc:	f04f 0300 	mov.w	r3, #0
 80048d0:	f04f 0400 	mov.w	r4, #0
 80048d4:	e9c2 3406 	strd	r3, r4, [r2, #24]
	positionNext.total_time = myDUTY.time_total;
 80048d8:	4b08      	ldr	r3, [pc, #32]	; (80048fc <scaraInitDuty+0x1334>)
 80048da:	f603 1348 	addw	r3, r3, #2376	; 0x948
 80048de:	e9d3 3400 	ldrd	r3, r4, [r3]
 80048e2:	4a09      	ldr	r2, [pc, #36]	; (8004908 <scaraInitDuty+0x1340>)
 80048e4:	e9c2 3408 	strd	r3, r4, [r2, #32]
	return SCARA_STATUS_OK;
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80048f0:	46bd      	mov	sp, r7
 80048f2:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80048f6:	b004      	add	sp, #16
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	20005338 	.word	0x20005338
 8004900:	20000c7c 	.word	0x20000c7c
 8004904:	20005cf0 	.word	0x20005cf0
 8004908:	20005d58 	.word	0x20005d58

0800490c <scaraInitLine>:

SCARA_StatusTypeDef	scaraInitLine		(Path_Line_TypeDef *line,
										SCARA_PositionTypeDef start,
										SCARA_PositionTypeDef end) {
 800490c:	b082      	sub	sp, #8
 800490e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004910:	b09b      	sub	sp, #108	; 0x6c
 8004912:	af18      	add	r7, sp, #96	; 0x60
 8004914:	6078      	str	r0, [r7, #4]
 8004916:	f107 0120 	add.w	r1, r7, #32
 800491a:	e881 000c 	stmia.w	r1, {r2, r3}
	// Check limit workspace
	if ( FALSE ==  kinematicInverse(&end, start)) {
 800491e:	f107 0488 	add.w	r4, r7, #136	; 0x88
 8004922:	4668      	mov	r0, sp
 8004924:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004928:	2260      	movs	r2, #96	; 0x60
 800492a:	4619      	mov	r1, r3
 800492c:	f00d ff50 	bl	80127d0 <memcpy>
 8004930:	f107 0320 	add.w	r3, r7, #32
 8004934:	cb0c      	ldmia	r3, {r2, r3}
 8004936:	4620      	mov	r0, r4
 8004938:	f7fe fa82 	bl	8002e40 <kinematicInverse>
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d101      	bne.n	8004946 <scaraInitLine+0x3a>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8004942:	2307      	movs	r3, #7
 8004944:	e09e      	b.n	8004a84 <scaraInitLine+0x178>
	}
	// Init line params
	line->x1 = end.x;
 8004946:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	e9c2 3402 	strd	r3, r4, [r2, #8]
	line->y1 = end.y;
 8004950:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	e9c2 3406 	strd	r3, r4, [r2, #24]
	line->z1 = end.z;
 800495a:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	line->x0 = start.x;
 8004964:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	e9c2 3400 	strd	r3, r4, [r2]
	line->y0 = start.y;
 800496e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	e9c2 3404 	strd	r3, r4, [r2, #16]
	line->z0 = start.z;
 8004978:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	e9c2 3408 	strd	r3, r4, [r2, #32]
	line->denta_x = end.x  -  start.x;
 8004982:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004986:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800498a:	461a      	mov	r2, r3
 800498c:	4623      	mov	r3, r4
 800498e:	f7fb fc8b 	bl	80002a8 <__aeabi_dsub>
 8004992:	4603      	mov	r3, r0
 8004994:	460c      	mov	r4, r1
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	line->denta_y = end.y  -  start.y;
 800499c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80049a0:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 80049a4:	461a      	mov	r2, r3
 80049a6:	4623      	mov	r3, r4
 80049a8:	f7fb fc7e 	bl	80002a8 <__aeabi_dsub>
 80049ac:	4603      	mov	r3, r0
 80049ae:	460c      	mov	r4, r1
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	line->denta_z = end.z  -  start.z;
 80049b6:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80049ba:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 80049be:	461a      	mov	r2, r3
 80049c0:	4623      	mov	r3, r4
 80049c2:	f7fb fc71 	bl	80002a8 <__aeabi_dsub>
 80049c6:	4603      	mov	r3, r0
 80049c8:	460c      	mov	r4, r1
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	line->total_s = sqrt((line->denta_x)*(line->denta_x)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 80049dc:	461a      	mov	r2, r3
 80049de:	4623      	mov	r3, r4
 80049e0:	f7fb fe1a 	bl	8000618 <__aeabi_dmul>
 80049e4:	4603      	mov	r3, r0
 80049e6:	460c      	mov	r4, r1
 80049e8:	461d      	mov	r5, r3
 80049ea:	4626      	mov	r6, r4
			       +(line->denta_y)*(line->denta_y)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 80049f8:	461a      	mov	r2, r3
 80049fa:	4623      	mov	r3, r4
 80049fc:	f7fb fe0c 	bl	8000618 <__aeabi_dmul>
 8004a00:	4603      	mov	r3, r0
 8004a02:	460c      	mov	r4, r1
 8004a04:	461a      	mov	r2, r3
 8004a06:	4623      	mov	r3, r4
 8004a08:	4628      	mov	r0, r5
 8004a0a:	4631      	mov	r1, r6
 8004a0c:	f7fb fc4e 	bl	80002ac <__adddf3>
 8004a10:	4603      	mov	r3, r0
 8004a12:	460c      	mov	r4, r1
 8004a14:	461d      	mov	r5, r3
 8004a16:	4626      	mov	r6, r4
				   +(line->denta_z)*(line->denta_z));
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	e9d3 3410 	ldrd	r3, r4, [r3, #64]	; 0x40
 8004a24:	461a      	mov	r2, r3
 8004a26:	4623      	mov	r3, r4
 8004a28:	f7fb fdf6 	bl	8000618 <__aeabi_dmul>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	460c      	mov	r4, r1
	line->total_s = sqrt((line->denta_x)*(line->denta_x)
 8004a30:	461a      	mov	r2, r3
 8004a32:	4623      	mov	r3, r4
 8004a34:	4628      	mov	r0, r5
 8004a36:	4631      	mov	r1, r6
 8004a38:	f7fb fc38 	bl	80002ac <__adddf3>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	460c      	mov	r4, r1
 8004a40:	ec44 3b17 	vmov	d7, r3, r4
 8004a44:	eeb0 0a47 	vmov.f32	s0, s14
 8004a48:	eef0 0a67 	vmov.f32	s1, s15
 8004a4c:	f012 f9be 	bl	8016dcc <sqrt>
 8004a50:	eeb0 7a40 	vmov.f32	s14, s0
 8004a54:	eef0 7a60 	vmov.f32	s15, s1
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
	line->x_current = line->x0;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	line->y_current = line->y0;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	line->z_current = line->z0;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68

	return SCARA_STATUS_OK;
 8004a82:	2300      	movs	r3, #0
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	370c      	adds	r7, #12
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8004a8e:	b002      	add	sp, #8
 8004a90:	4770      	bx	lr
 8004a92:	0000      	movs	r0, r0
 8004a94:	0000      	movs	r0, r0
	...

08004a98 <scaraInitCircle>:

SCARA_StatusTypeDef	scaraInitCircle		(Path_Circle_TypeDef *circle,
										SCARA_PositionTypeDef start,
										SCARA_PositionTypeDef end,
										SCARA_PositionTypeDef center,
										int32_t dir){
 8004a98:	b082      	sub	sp, #8
 8004a9a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004a9e:	b0ad      	sub	sp, #180	; 0xb4
 8004aa0:	af18      	add	r7, sp, #96	; 0x60
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8004aa8:	e881 000c 	stmia.w	r1, {r2, r3}
	// Check limit workspace
	if ( FALSE == kinematicInverse(&end, start) ) {
 8004aac:	f107 06d8 	add.w	r6, r7, #216	; 0xd8
 8004ab0:	4668      	mov	r0, sp
 8004ab2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004ab6:	2260      	movs	r2, #96	; 0x60
 8004ab8:	4619      	mov	r1, r3
 8004aba:	f00d fe89 	bl	80127d0 <memcpy>
 8004abe:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004ac2:	cb0c      	ldmia	r3, {r2, r3}
 8004ac4:	4630      	mov	r0, r6
 8004ac6:	f7fe f9bb 	bl	8002e40 <kinematicInverse>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d101      	bne.n	8004ad4 <scaraInitCircle+0x3c>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8004ad0:	2307      	movs	r3, #7
 8004ad2:	e146      	b.n	8004d62 <scaraInitCircle+0x2ca>
	}

	if( 1 != dir && -1 != dir) {
 8004ad4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d006      	beq.n	8004aea <scaraInitCircle+0x52>
 8004adc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae4:	d001      	beq.n	8004aea <scaraInitCircle+0x52>
		return SCARA_STATUS_ERROR_PARA;// error direction param !!!
 8004ae6:	2306      	movs	r3, #6
 8004ae8:	e13b      	b.n	8004d62 <scaraInitCircle+0x2ca>
	}

	double v_x_start, v_y_start, v_x_stop, v_y_stop;
	double r1, r2, angle_start, angle_stop, delta_angle;
	v_x_start = start.x - center.x;
 8004aea:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004aee:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 8004af2:	f7fb fbd9 	bl	80002a8 <__aeabi_dsub>
 8004af6:	4602      	mov	r2, r0
 8004af8:	460b      	mov	r3, r1
 8004afa:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	v_y_start = start.y - center.y;
 8004afe:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8004b02:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8004b06:	f7fb fbcf 	bl	80002a8 <__aeabi_dsub>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	v_x_stop  = end.x  - center.x;
 8004b12:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 8004b16:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 8004b1a:	f7fb fbc5 	bl	80002a8 <__aeabi_dsub>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	460b      	mov	r3, r1
 8004b22:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	v_y_stop  = end.y  - center.y;
 8004b26:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 8004b2a:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8004b2e:	f7fb fbbb 	bl	80002a8 <__aeabi_dsub>
 8004b32:	4602      	mov	r2, r0
 8004b34:	460b      	mov	r3, r1
 8004b36:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	r1 = sqrt(v_x_start*v_x_start + v_y_start*v_y_start);
 8004b3a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004b3e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8004b42:	f7fb fd69 	bl	8000618 <__aeabi_dmul>
 8004b46:	4602      	mov	r2, r0
 8004b48:	460b      	mov	r3, r1
 8004b4a:	4690      	mov	r8, r2
 8004b4c:	4699      	mov	r9, r3
 8004b4e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004b52:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8004b56:	f7fb fd5f 	bl	8000618 <__aeabi_dmul>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	4640      	mov	r0, r8
 8004b60:	4649      	mov	r1, r9
 8004b62:	f7fb fba3 	bl	80002ac <__adddf3>
 8004b66:	4602      	mov	r2, r0
 8004b68:	460b      	mov	r3, r1
 8004b6a:	ec43 2b17 	vmov	d7, r2, r3
 8004b6e:	eeb0 0a47 	vmov.f32	s0, s14
 8004b72:	eef0 0a67 	vmov.f32	s1, s15
 8004b76:	f012 f929 	bl	8016dcc <sqrt>
 8004b7a:	ed87 0b08 	vstr	d0, [r7, #32]
	r2 = sqrt(v_x_stop*v_x_stop + v_y_stop*v_y_stop);
 8004b7e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004b82:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004b86:	f7fb fd47 	bl	8000618 <__aeabi_dmul>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	4690      	mov	r8, r2
 8004b90:	4699      	mov	r9, r3
 8004b92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b96:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004b9a:	f7fb fd3d 	bl	8000618 <__aeabi_dmul>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	4640      	mov	r0, r8
 8004ba4:	4649      	mov	r1, r9
 8004ba6:	f7fb fb81 	bl	80002ac <__adddf3>
 8004baa:	4602      	mov	r2, r0
 8004bac:	460b      	mov	r3, r1
 8004bae:	ec43 2b17 	vmov	d7, r2, r3
 8004bb2:	eeb0 0a47 	vmov.f32	s0, s14
 8004bb6:	eef0 0a67 	vmov.f32	s1, s15
 8004bba:	f012 f907 	bl	8016dcc <sqrt>
 8004bbe:	ed87 0b06 	vstr	d0, [r7, #24]

	if( 1.0 < fabs(r1 - r2)) {
 8004bc2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bc6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004bca:	f7fb fb6d 	bl	80002a8 <__aeabi_dsub>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	4614      	mov	r4, r2
 8004bd4:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8004bd8:	f04f 0200 	mov.w	r2, #0
 8004bdc:	4b68      	ldr	r3, [pc, #416]	; (8004d80 <scaraInitCircle+0x2e8>)
 8004bde:	4620      	mov	r0, r4
 8004be0:	4629      	mov	r1, r5
 8004be2:	f7fb ffa9 	bl	8000b38 <__aeabi_dcmpgt>
 8004be6:	4603      	mov	r3, r0
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d001      	beq.n	8004bf0 <scaraInitCircle+0x158>
		return SCARA_STATUS_ERROR_PARA; //start & stop are not in a circle together !!
 8004bec:	2306      	movs	r3, #6
 8004bee:	e0b8      	b.n	8004d62 <scaraInitCircle+0x2ca>
	}

	if (r1 < 0.1 || r2 < 0.1) {
 8004bf0:	a35f      	add	r3, pc, #380	; (adr r3, 8004d70 <scaraInitCircle+0x2d8>)
 8004bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004bfa:	f7fb ff7f 	bl	8000afc <__aeabi_dcmplt>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d109      	bne.n	8004c18 <scaraInitCircle+0x180>
 8004c04:	a35a      	add	r3, pc, #360	; (adr r3, 8004d70 <scaraInitCircle+0x2d8>)
 8004c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c0a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004c0e:	f7fb ff75 	bl	8000afc <__aeabi_dcmplt>
 8004c12:	4603      	mov	r3, r0
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d001      	beq.n	8004c1c <scaraInitCircle+0x184>
		return SCARA_STATUS_ERROR_PARA; //start and center almost in the same phace, radius = 0 !!
 8004c18:	2306      	movs	r3, #6
 8004c1a:	e0a2      	b.n	8004d62 <scaraInitCircle+0x2ca>
	}

	angle_start = atan2(v_y_start, v_x_start);
 8004c1c:	ed97 1b10 	vldr	d1, [r7, #64]	; 0x40
 8004c20:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8004c24:	f012 f8d0 	bl	8016dc8 <atan2>
 8004c28:	ed87 0b04 	vstr	d0, [r7, #16]
	angle_stop  = atan2(v_y_stop, v_x_stop);
 8004c2c:	ed97 1b0c 	vldr	d1, [r7, #48]	; 0x30
 8004c30:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8004c34:	f012 f8c8 	bl	8016dc8 <atan2>
 8004c38:	ed87 0b02 	vstr	d0, [r7, #8]
	delta_angle = angle_stop - angle_start;
 8004c3c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004c40:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004c44:	f7fb fb30 	bl	80002a8 <__aeabi_dsub>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	460c      	mov	r4, r1
 8004c4c:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48

	if ( 0 > delta_angle) {
 8004c50:	f04f 0200 	mov.w	r2, #0
 8004c54:	f04f 0300 	mov.w	r3, #0
 8004c58:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004c5c:	f7fb ff4e 	bl	8000afc <__aeabi_dcmplt>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d00a      	beq.n	8004c7c <scaraInitCircle+0x1e4>
		delta_angle += 2*PI;
 8004c66:	a344      	add	r3, pc, #272	; (adr r3, 8004d78 <scaraInitCircle+0x2e0>)
 8004c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c6c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004c70:	f7fb fb1c 	bl	80002ac <__adddf3>
 8004c74:	4603      	mov	r3, r0
 8004c76:	460c      	mov	r4, r1
 8004c78:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
	} // atan2 range : -PI --> PI

	if ( 0 > dir) {
 8004c7c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	da0a      	bge.n	8004c9a <scaraInitCircle+0x202>
		delta_angle = 2*PI - delta_angle;
 8004c84:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004c88:	a13b      	add	r1, pc, #236	; (adr r1, 8004d78 <scaraInitCircle+0x2e0>)
 8004c8a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004c8e:	f7fb fb0b 	bl	80002a8 <__aeabi_dsub>
 8004c92:	4603      	mov	r3, r0
 8004c94:	460c      	mov	r4, r1
 8004c96:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
	}
	// Init circle params
	circle->dir = dir;
 8004c9a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004c9e:	b25a      	sxtb	r2, r3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	701a      	strb	r2, [r3, #0]
	circle->radius = r1;
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8004caa:	e9c2 3402 	strd	r3, r4, [r2, #8]
	circle->angle_start = angle_start;
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004cb4:	e9c2 3404 	strd	r3, r4, [r2, #16]
	circle->angle_stop  = angle_stop;
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004cbe:	e9c2 3406 	strd	r3, r4, [r2, #24]
	circle->total_angle = delta_angle;
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8004cc8:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	circle->total_s = delta_angle*r1;
 8004ccc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004cd0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004cd4:	f7fb fca0 	bl	8000618 <__aeabi_dmul>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	460c      	mov	r4, r1
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
	circle->x0 = start.x;
 8004ce2:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	e9c2 3408 	strd	r3, r4, [r2, #32]
	circle->y0 = start.y;
 8004cec:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	circle->x1 = end.x;
 8004cf6:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	circle->y1 = end.y;
 8004d00:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	circle->xi = center.x;
 8004d0a:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	circle->yi = center.y;
 8004d14:	e9d7 345c 	ldrd	r3, r4, [r7, #368]	; 0x170
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	circle->z0 = start.z;
 8004d1e:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	circle->z1 = start.z;
 8004d28:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	circle->zi = start.z;
 8004d32:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	circle->x_current = circle->x0;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	circle->y_current = circle->y0;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
	circle->z_current = circle->z0;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88

	return SCARA_STATUS_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3754      	adds	r7, #84	; 0x54
 8004d66:	46bd      	mov	sp, r7
 8004d68:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004d6c:	b002      	add	sp, #8
 8004d6e:	4770      	bx	lr
 8004d70:	9999999a 	.word	0x9999999a
 8004d74:	3fb99999 	.word	0x3fb99999
 8004d78:	60000000 	.word	0x60000000
 8004d7c:	401921fb 	.word	0x401921fb
 8004d80:	3ff00000 	.word	0x3ff00000
 8004d84:	00000000 	.word	0x00000000

08004d88 <scaraInitLSPB>:

SCARA_StatusTypeDef	scaraInitLSPB		(Trajectory_LSPB_TypeDef *lspb,
										Trajectory_TargetTypeDef target,
										double total_s,
										ModeInitTypeDef modeinit) {
 8004d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d8c:	b0a9      	sub	sp, #164	; 0xa4
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	61f8      	str	r0, [r7, #28]
 8004d92:	460b      	mov	r3, r1
 8004d94:	ed87 0b04 	vstr	d0, [r7, #16]
 8004d98:	76fb      	strb	r3, [r7, #27]
 8004d9a:	4613      	mov	r3, r2
 8004d9c:	76bb      	strb	r3, [r7, #26]
	 double v_design, a_design, v_lim, q0, q1, v0, v1, ta, td, tf;
	 uint32_t	no_sample;
	 int8_t	dir;

	 if ( TRAJECTORY_3D == target) {
 8004d9e:	7efb      	ldrb	r3, [r7, #27]
 8004da0:	2b04      	cmp	r3, #4
 8004da2:	d10a      	bne.n	8004dba <scaraInitLSPB+0x32>
		 v_design = V_DESIGN_3D;
 8004da4:	f04f 0300 	mov.w	r3, #0
 8004da8:	4ca3      	ldr	r4, [pc, #652]	; (8005038 <scaraInitLSPB+0x2b0>)
 8004daa:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
		 a_design = A_DESIGN_3D;
 8004dae:	a490      	add	r4, pc, #576	; (adr r4, 8004ff0 <scaraInitLSPB+0x268>)
 8004db0:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004db4:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
 8004db8:	e047      	b.n	8004e4a <scaraInitLSPB+0xc2>
	 } else if (TRAJECTORY_ROLL == target) {
 8004dba:	7efb      	ldrb	r3, [r7, #27]
 8004dbc:	2b05      	cmp	r3, #5
 8004dbe:	d10a      	bne.n	8004dd6 <scaraInitLSPB+0x4e>
		 v_design = V_DESIGN_ROLL;
 8004dc0:	a48d      	add	r4, pc, #564	; (adr r4, 8004ff8 <scaraInitLSPB+0x270>)
 8004dc2:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004dc6:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
		 a_design = A_DESIGN_ROLL;
 8004dca:	a48d      	add	r4, pc, #564	; (adr r4, 8005000 <scaraInitLSPB+0x278>)
 8004dcc:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004dd0:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
 8004dd4:	e039      	b.n	8004e4a <scaraInitLSPB+0xc2>
	 } else if (TRAJECTORY_J0 == target) {
 8004dd6:	7efb      	ldrb	r3, [r7, #27]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d10a      	bne.n	8004df2 <scaraInitLSPB+0x6a>
		 v_design = V_DESIGN_J0;
 8004ddc:	a48a      	add	r4, pc, #552	; (adr r4, 8005008 <scaraInitLSPB+0x280>)
 8004dde:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004de2:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
		 a_design = A_DESIGN_J0;
 8004de6:	a48a      	add	r4, pc, #552	; (adr r4, 8005010 <scaraInitLSPB+0x288>)
 8004de8:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004dec:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
 8004df0:	e02b      	b.n	8004e4a <scaraInitLSPB+0xc2>
	 } else if (TRAJECTORY_J1 == target) {
 8004df2:	7efb      	ldrb	r3, [r7, #27]
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d10a      	bne.n	8004e0e <scaraInitLSPB+0x86>
		 v_design = V_DESIGN_J1;
 8004df8:	f04f 0300 	mov.w	r3, #0
 8004dfc:	4c8f      	ldr	r4, [pc, #572]	; (800503c <scaraInitLSPB+0x2b4>)
 8004dfe:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
		 a_design = A_DESIGN_J1;
 8004e02:	f04f 0300 	mov.w	r3, #0
 8004e06:	4c8e      	ldr	r4, [pc, #568]	; (8005040 <scaraInitLSPB+0x2b8>)
 8004e08:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
 8004e0c:	e01d      	b.n	8004e4a <scaraInitLSPB+0xc2>
	 } else if (TRAJECTORY_J2 == target) {
 8004e0e:	7efb      	ldrb	r3, [r7, #27]
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	d10a      	bne.n	8004e2a <scaraInitLSPB+0xa2>
		 v_design = V_DESIGN_J2;
 8004e14:	f04f 0300 	mov.w	r3, #0
 8004e18:	4c87      	ldr	r4, [pc, #540]	; (8005038 <scaraInitLSPB+0x2b0>)
 8004e1a:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
		 a_design = A_DESIGN_J2;
 8004e1e:	a474      	add	r4, pc, #464	; (adr r4, 8004ff0 <scaraInitLSPB+0x268>)
 8004e20:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004e24:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
 8004e28:	e00f      	b.n	8004e4a <scaraInitLSPB+0xc2>
	 } else if (TRAJECTORY_J3 == target) {
 8004e2a:	7efb      	ldrb	r3, [r7, #27]
 8004e2c:	2b03      	cmp	r3, #3
 8004e2e:	d10a      	bne.n	8004e46 <scaraInitLSPB+0xbe>
		 v_design = V_DESIGN_J3;
 8004e30:	a479      	add	r4, pc, #484	; (adr r4, 8005018 <scaraInitLSPB+0x290>)
 8004e32:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004e36:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
		 a_design = A_DESIGN_J3;
 8004e3a:	a479      	add	r4, pc, #484	; (adr r4, 8005020 <scaraInitLSPB+0x298>)
 8004e3c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004e40:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
 8004e44:	e001      	b.n	8004e4a <scaraInitLSPB+0xc2>
	 } else {
		 return SCARA_STATUS_ERROR_PARA;
 8004e46:	2306      	movs	r3, #6
 8004e48:	e330      	b.n	80054ac <scaraInitLSPB+0x724>
	 }

	 q0 = 0;
 8004e4a:	f04f 0300 	mov.w	r3, #0
 8004e4e:	f04f 0400 	mov.w	r4, #0
 8004e52:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	 q1 = total_s;
 8004e56:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004e5a:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
	 v0 = 0;
 8004e5e:	f04f 0300 	mov.w	r3, #0
 8004e62:	f04f 0400 	mov.w	r4, #0
 8004e66:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
	 v1 = 0;
 8004e6a:	f04f 0300 	mov.w	r3, #0
 8004e6e:	f04f 0400 	mov.w	r4, #0
 8004e72:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

	 if ( q0 <= q1) {
 8004e76:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8004e7a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004e7e:	f7fb fe47 	bl	8000b10 <__aeabi_dcmple>
 8004e82:	4603      	mov	r3, r0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d003      	beq.n	8004e90 <scaraInitLSPB+0x108>
		 dir = 1;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004e8e:	e00c      	b.n	8004eaa <scaraInitLSPB+0x122>
	 } else {
		 dir = -1;
 8004e90:	23ff      	movs	r3, #255	; 0xff
 8004e92:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		 q1 = -q1;
 8004e96:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004e9a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004e9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ea2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004ea6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	 }

	 if (DUTY_MODE_INIT_QVT == modeinit) {
 8004eaa:	7ebb      	ldrb	r3, [r7, #26]
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	f040 80d5 	bne.w	800505c <scaraInitLSPB+0x2d4>
		 double v_lower, v_upper, tc_upper, a_upper;
		 tf = lspb->Tf;
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 8004eb8:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
		 // Avoid division by 0
		 if (tf > 0.001) {
 8004ebc:	a35a      	add	r3, pc, #360	; (adr r3, 8005028 <scaraInitLSPB+0x2a0>)
 8004ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004ec6:	f7fb fe37 	bl	8000b38 <__aeabi_dcmpgt>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	f000 80b9 	beq.w	8005044 <scaraInitLSPB+0x2bc>
			 v_lower 	= (q1 - q0) / tf;
 8004ed2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004ed6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004eda:	f7fb f9e5 	bl	80002a8 <__aeabi_dsub>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	460c      	mov	r4, r1
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	4621      	mov	r1, r4
 8004ee6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004eea:	f7fb fcbf 	bl	800086c <__aeabi_ddiv>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	460c      	mov	r4, r1
 8004ef2:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
			 v_upper 	= 2*(q1 - q0) / tf;
 8004ef6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004efa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004efe:	f7fb f9d3 	bl	80002a8 <__aeabi_dsub>
 8004f02:	4603      	mov	r3, r0
 8004f04:	460c      	mov	r4, r1
 8004f06:	4618      	mov	r0, r3
 8004f08:	4621      	mov	r1, r4
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	460b      	mov	r3, r1
 8004f0e:	f7fb f9cd 	bl	80002ac <__adddf3>
 8004f12:	4603      	mov	r3, r0
 8004f14:	460c      	mov	r4, r1
 8004f16:	4618      	mov	r0, r3
 8004f18:	4621      	mov	r1, r4
 8004f1a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004f1e:	f7fb fca5 	bl	800086c <__aeabi_ddiv>
 8004f22:	4603      	mov	r3, r0
 8004f24:	460c      	mov	r4, r1
 8004f26:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

			 if ( v_design < v_lower) {
 8004f2a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004f2e:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004f32:	f7fb fde3 	bl	8000afc <__aeabi_dcmplt>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d001      	beq.n	8004f40 <scaraInitLSPB+0x1b8>
				 return SCARA_STATUS_ERROR_OVER_VELOC;
 8004f3c:	2309      	movs	r3, #9
 8004f3e:	e2b5      	b.n	80054ac <scaraInitLSPB+0x724>
			 } else {
				 if ( v_upper <= v_design) {
 8004f40:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8004f44:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004f48:	f7fb fde2 	bl	8000b10 <__aeabi_dcmple>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d003      	beq.n	8004f5a <scaraInitLSPB+0x1d2>
					 v_design = v_upper;
 8004f52:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8004f56:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
				 }
				 // Avoid division by 0
				 if (v_design > 0.0000001) {
 8004f5a:	a335      	add	r3, pc, #212	; (adr r3, 8005030 <scaraInitLSPB+0x2a8>)
 8004f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f60:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004f64:	f7fb fde8 	bl	8000b38 <__aeabi_dcmpgt>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d01a      	beq.n	8004fa4 <scaraInitLSPB+0x21c>
					 tc_upper	= tf - (q1 - q0)/v_design;
 8004f6e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004f72:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004f76:	f7fb f997 	bl	80002a8 <__aeabi_dsub>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	460c      	mov	r4, r1
 8004f7e:	4618      	mov	r0, r3
 8004f80:	4621      	mov	r1, r4
 8004f82:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8004f86:	f7fb fc71 	bl	800086c <__aeabi_ddiv>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	460c      	mov	r4, r1
 8004f8e:	461a      	mov	r2, r3
 8004f90:	4623      	mov	r3, r4
 8004f92:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004f96:	f7fb f987 	bl	80002a8 <__aeabi_dsub>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	460c      	mov	r4, r1
 8004f9e:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
 8004fa2:	e00b      	b.n	8004fbc <scaraInitLSPB+0x234>
				 } else {
					 tc_upper = tf / 2;
 8004fa4:	f04f 0200 	mov.w	r2, #0
 8004fa8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004fac:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004fb0:	f7fb fc5c 	bl	800086c <__aeabi_ddiv>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	460c      	mov	r4, r1
 8004fb8:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
				 }
				 a_upper	= v_design/tc_upper;
 8004fbc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004fc0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004fc4:	f7fb fc52 	bl	800086c <__aeabi_ddiv>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	460c      	mov	r4, r1
 8004fcc:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
				 if ( a_upper > a_design) {
 8004fd0:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8004fd4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004fd8:	f7fb fdae 	bl	8000b38 <__aeabi_dcmpgt>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d001      	beq.n	8004fe6 <scaraInitLSPB+0x25e>
					 return SCARA_STATUS_ERROR_OVER_ACCEL;
 8004fe2:	230a      	movs	r3, #10
 8004fe4:	e262      	b.n	80054ac <scaraInitLSPB+0x724>
				 } else {
					 a_design = a_upper;
 8004fe6:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8004fea:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
 8004fee:	e035      	b.n	800505c <scaraInitLSPB+0x2d4>
 8004ff0:	cccccccd 	.word	0xcccccccd
 8004ff4:	400ccccc 	.word	0x400ccccc
 8004ff8:	8ccccccd 	.word	0x8ccccccd
 8004ffc:	3fe21877 	.word	0x3fe21877
 8005000:	7ae147ae 	.word	0x7ae147ae
 8005004:	3fbcf3f2 	.word	0x3fbcf3f2
 8005008:	45a1cac1 	.word	0x45a1cac1
 800500c:	3fddf3b6 	.word	0x3fddf3b6
 8005010:	6ae7d567 	.word	0x6ae7d567
 8005014:	3fb7f62b 	.word	0x3fb7f62b
 8005018:	cccccccd 	.word	0xcccccccd
 800501c:	3feccccc 	.word	0x3feccccc
 8005020:	70a3d70a 	.word	0x70a3d70a
 8005024:	3fc70a3d 	.word	0x3fc70a3d
 8005028:	d2f1a9fc 	.word	0xd2f1a9fc
 800502c:	3f50624d 	.word	0x3f50624d
 8005030:	9abcaf48 	.word	0x9abcaf48
 8005034:	3e7ad7f2 	.word	0x3e7ad7f2
 8005038:	40320000 	.word	0x40320000
 800503c:	3fd68000 	.word	0x3fd68000
 8005040:	3fb20000 	.word	0x3fb20000
				 }
			 }
		 } else {
			 v_design = 0;
 8005044:	f04f 0300 	mov.w	r3, #0
 8005048:	f04f 0400 	mov.w	r4, #0
 800504c:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
			 a_design = 0;
 8005050:	f04f 0300 	mov.w	r3, #0
 8005054:	f04f 0400 	mov.w	r4, #0
 8005058:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
		 }
	}

	 // Check condition trapezoidal ---> triangle
	 // Avoid division by 0
	 if (a_design > 0.0000001 && v_design > 0.0000001) {
 800505c:	f20f 4364 	addw	r3, pc, #1124	; 0x464
 8005060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005064:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8005068:	f7fb fd66 	bl	8000b38 <__aeabi_dcmpgt>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	f000 819c 	beq.w	80053ac <scaraInitLSPB+0x624>
 8005074:	f20f 434c 	addw	r3, pc, #1100	; 0x44c
 8005078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800507c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005080:	f7fb fd5a 	bl	8000b38 <__aeabi_dcmpgt>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	f000 8190 	beq.w	80053ac <scaraInitLSPB+0x624>
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 800508c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005090:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005094:	f7fb f908 	bl	80002a8 <__aeabi_dsub>
 8005098:	4603      	mov	r3, r0
 800509a:	460c      	mov	r4, r1
 800509c:	461d      	mov	r5, r3
 800509e:	f024 4600 	bic.w	r6, r4, #2147483648	; 0x80000000
 80050a2:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80050a6:	4628      	mov	r0, r5
 80050a8:	4631      	mov	r1, r6
 80050aa:	f7fb fab5 	bl	8000618 <__aeabi_dmul>
 80050ae:	4603      	mov	r3, r0
 80050b0:	460c      	mov	r4, r1
 80050b2:	e9c7 3402 	strd	r3, r4, [r7, #8]
 80050b6:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80050ba:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80050be:	f7fb faab 	bl	8000618 <__aeabi_dmul>
 80050c2:	4603      	mov	r3, r0
 80050c4:	460c      	mov	r4, r1
 80050c6:	e9c7 3400 	strd	r3, r4, [r7]
 80050ca:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80050ce:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80050d2:	f7fb faa1 	bl	8000618 <__aeabi_dmul>
 80050d6:	4603      	mov	r3, r0
 80050d8:	460c      	mov	r4, r1
 80050da:	461d      	mov	r5, r3
 80050dc:	4626      	mov	r6, r4
 80050de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80050e2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80050e6:	f7fb fa97 	bl	8000618 <__aeabi_dmul>
 80050ea:	4603      	mov	r3, r0
 80050ec:	460c      	mov	r4, r1
 80050ee:	461a      	mov	r2, r3
 80050f0:	4623      	mov	r3, r4
 80050f2:	4628      	mov	r0, r5
 80050f4:	4631      	mov	r1, r6
 80050f6:	f7fb f8d9 	bl	80002ac <__adddf3>
 80050fa:	4603      	mov	r3, r0
 80050fc:	460c      	mov	r4, r1
 80050fe:	4618      	mov	r0, r3
 8005100:	4621      	mov	r1, r4
 8005102:	f04f 0200 	mov.w	r2, #0
 8005106:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800510a:	f7fb fbaf 	bl	800086c <__aeabi_ddiv>
 800510e:	4603      	mov	r3, r0
 8005110:	460c      	mov	r4, r1
 8005112:	461a      	mov	r2, r3
 8005114:	4623      	mov	r3, r4
 8005116:	e9d7 0100 	ldrd	r0, r1, [r7]
 800511a:	f7fb f8c5 	bl	80002a8 <__aeabi_dsub>
 800511e:	4603      	mov	r3, r0
 8005120:	460c      	mov	r4, r1
 8005122:	461a      	mov	r2, r3
 8005124:	4623      	mov	r3, r4
 8005126:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800512a:	f7fb fcf1 	bl	8000b10 <__aeabi_dcmple>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d075      	beq.n	8005220 <scaraInitLSPB+0x498>
			 v_lim 	= sqrt(fabs(q1 - q0)*a_design + (v0*v0 + v1*v1)/2);
 8005134:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005138:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800513c:	f7fb f8b4 	bl	80002a8 <__aeabi_dsub>
 8005140:	4603      	mov	r3, r0
 8005142:	460c      	mov	r4, r1
 8005144:	469a      	mov	sl, r3
 8005146:	f024 4b00 	bic.w	fp, r4, #2147483648	; 0x80000000
 800514a:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800514e:	4650      	mov	r0, sl
 8005150:	4659      	mov	r1, fp
 8005152:	f7fb fa61 	bl	8000618 <__aeabi_dmul>
 8005156:	4603      	mov	r3, r0
 8005158:	460c      	mov	r4, r1
 800515a:	4625      	mov	r5, r4
 800515c:	461c      	mov	r4, r3
 800515e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005162:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005166:	f7fb fa57 	bl	8000618 <__aeabi_dmul>
 800516a:	4602      	mov	r2, r0
 800516c:	460b      	mov	r3, r1
 800516e:	4690      	mov	r8, r2
 8005170:	4699      	mov	r9, r3
 8005172:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005176:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800517a:	f7fb fa4d 	bl	8000618 <__aeabi_dmul>
 800517e:	4602      	mov	r2, r0
 8005180:	460b      	mov	r3, r1
 8005182:	4640      	mov	r0, r8
 8005184:	4649      	mov	r1, r9
 8005186:	f7fb f891 	bl	80002ac <__adddf3>
 800518a:	4602      	mov	r2, r0
 800518c:	460b      	mov	r3, r1
 800518e:	4610      	mov	r0, r2
 8005190:	4619      	mov	r1, r3
 8005192:	f04f 0200 	mov.w	r2, #0
 8005196:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800519a:	f7fb fb67 	bl	800086c <__aeabi_ddiv>
 800519e:	4602      	mov	r2, r0
 80051a0:	460b      	mov	r3, r1
 80051a2:	4620      	mov	r0, r4
 80051a4:	4629      	mov	r1, r5
 80051a6:	f7fb f881 	bl	80002ac <__adddf3>
 80051aa:	4603      	mov	r3, r0
 80051ac:	460c      	mov	r4, r1
 80051ae:	ec44 3b17 	vmov	d7, r3, r4
 80051b2:	eeb0 0a47 	vmov.f32	s0, s14
 80051b6:	eef0 0a67 	vmov.f32	s1, s15
 80051ba:	f011 fe07 	bl	8016dcc <sqrt>
 80051be:	ed87 0b22 	vstr	d0, [r7, #136]	; 0x88
			 ta		= (v_lim - v0)/a_design;
 80051c2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80051c6:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80051ca:	f7fb f86d 	bl	80002a8 <__aeabi_dsub>
 80051ce:	4603      	mov	r3, r0
 80051d0:	460c      	mov	r4, r1
 80051d2:	4618      	mov	r0, r3
 80051d4:	4621      	mov	r1, r4
 80051d6:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80051da:	f7fb fb47 	bl	800086c <__aeabi_ddiv>
 80051de:	4603      	mov	r3, r0
 80051e0:	460c      	mov	r4, r1
 80051e2:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
			 td		= (v_lim - v1)/a_design;
 80051e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80051ea:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80051ee:	f7fb f85b 	bl	80002a8 <__aeabi_dsub>
 80051f2:	4603      	mov	r3, r0
 80051f4:	460c      	mov	r4, r1
 80051f6:	4618      	mov	r0, r3
 80051f8:	4621      	mov	r1, r4
 80051fa:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80051fe:	f7fb fb35 	bl	800086c <__aeabi_ddiv>
 8005202:	4603      	mov	r3, r0
 8005204:	460c      	mov	r4, r1
 8005206:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
			 tf		= ta + td;
 800520a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800520e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8005212:	f7fb f84b 	bl	80002ac <__adddf3>
 8005216:	4603      	mov	r3, r0
 8005218:	460c      	mov	r4, r1
 800521a:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 800521e:	e0e3      	b.n	80053e8 <scaraInitLSPB+0x660>
		 } else {
			 v_lim	= v_design;
 8005220:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8005224:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
			 ta		= (v_lim - v0)/a_design;
 8005228:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800522c:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8005230:	f7fb f83a 	bl	80002a8 <__aeabi_dsub>
 8005234:	4603      	mov	r3, r0
 8005236:	460c      	mov	r4, r1
 8005238:	4618      	mov	r0, r3
 800523a:	4621      	mov	r1, r4
 800523c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8005240:	f7fb fb14 	bl	800086c <__aeabi_ddiv>
 8005244:	4603      	mov	r3, r0
 8005246:	460c      	mov	r4, r1
 8005248:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
			 td		= (v_lim - v1)/a_design;
 800524c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005250:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8005254:	f7fb f828 	bl	80002a8 <__aeabi_dsub>
 8005258:	4603      	mov	r3, r0
 800525a:	460c      	mov	r4, r1
 800525c:	4618      	mov	r0, r3
 800525e:	4621      	mov	r1, r4
 8005260:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8005264:	f7fb fb02 	bl	800086c <__aeabi_ddiv>
 8005268:	4603      	mov	r3, r0
 800526a:	460c      	mov	r4, r1
 800526c:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
			 tf		= fabs(q0 - q1)/v_lim + v_lim/(2*a_design)*(1 - v0/v_lim)*(1 - v0/v_lim)
 8005270:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8005274:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005278:	f7fb f816 	bl	80002a8 <__aeabi_dsub>
 800527c:	4603      	mov	r3, r0
 800527e:	460c      	mov	r4, r1
 8005280:	4698      	mov	r8, r3
 8005282:	f024 4900 	bic.w	r9, r4, #2147483648	; 0x80000000
 8005286:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800528a:	4640      	mov	r0, r8
 800528c:	4649      	mov	r1, r9
 800528e:	f7fb faed 	bl	800086c <__aeabi_ddiv>
 8005292:	4603      	mov	r3, r0
 8005294:	460c      	mov	r4, r1
 8005296:	4625      	mov	r5, r4
 8005298:	461c      	mov	r4, r3
 800529a:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800529e:	4602      	mov	r2, r0
 80052a0:	460b      	mov	r3, r1
 80052a2:	f7fb f803 	bl	80002ac <__adddf3>
 80052a6:	4602      	mov	r2, r0
 80052a8:	460b      	mov	r3, r1
 80052aa:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80052ae:	f7fb fadd 	bl	800086c <__aeabi_ddiv>
 80052b2:	4602      	mov	r2, r0
 80052b4:	460b      	mov	r3, r1
 80052b6:	4690      	mov	r8, r2
 80052b8:	4699      	mov	r9, r3
 80052ba:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80052be:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80052c2:	f7fb fad3 	bl	800086c <__aeabi_ddiv>
 80052c6:	4602      	mov	r2, r0
 80052c8:	460b      	mov	r3, r1
 80052ca:	f04f 0000 	mov.w	r0, #0
 80052ce:	497c      	ldr	r1, [pc, #496]	; (80054c0 <scaraInitLSPB+0x738>)
 80052d0:	f7fa ffea 	bl	80002a8 <__aeabi_dsub>
 80052d4:	4602      	mov	r2, r0
 80052d6:	460b      	mov	r3, r1
 80052d8:	4640      	mov	r0, r8
 80052da:	4649      	mov	r1, r9
 80052dc:	f7fb f99c 	bl	8000618 <__aeabi_dmul>
 80052e0:	4602      	mov	r2, r0
 80052e2:	460b      	mov	r3, r1
 80052e4:	4690      	mov	r8, r2
 80052e6:	4699      	mov	r9, r3
 80052e8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80052ec:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80052f0:	f7fb fabc 	bl	800086c <__aeabi_ddiv>
 80052f4:	4602      	mov	r2, r0
 80052f6:	460b      	mov	r3, r1
 80052f8:	f04f 0000 	mov.w	r0, #0
 80052fc:	4970      	ldr	r1, [pc, #448]	; (80054c0 <scaraInitLSPB+0x738>)
 80052fe:	f7fa ffd3 	bl	80002a8 <__aeabi_dsub>
 8005302:	4602      	mov	r2, r0
 8005304:	460b      	mov	r3, r1
 8005306:	4640      	mov	r0, r8
 8005308:	4649      	mov	r1, r9
 800530a:	f7fb f985 	bl	8000618 <__aeabi_dmul>
 800530e:	4602      	mov	r2, r0
 8005310:	460b      	mov	r3, r1
 8005312:	4620      	mov	r0, r4
 8005314:	4629      	mov	r1, r5
 8005316:	f7fa ffc9 	bl	80002ac <__adddf3>
 800531a:	4603      	mov	r3, r0
 800531c:	460c      	mov	r4, r1
 800531e:	4625      	mov	r5, r4
 8005320:	461c      	mov	r4, r3
							+ v_lim/(2*a_design)*(1 - v1/v_lim)*(1 - v1/v_lim);
 8005322:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8005326:	4602      	mov	r2, r0
 8005328:	460b      	mov	r3, r1
 800532a:	f7fa ffbf 	bl	80002ac <__adddf3>
 800532e:	4602      	mov	r2, r0
 8005330:	460b      	mov	r3, r1
 8005332:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8005336:	f7fb fa99 	bl	800086c <__aeabi_ddiv>
 800533a:	4602      	mov	r2, r0
 800533c:	460b      	mov	r3, r1
 800533e:	4690      	mov	r8, r2
 8005340:	4699      	mov	r9, r3
 8005342:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8005346:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800534a:	f7fb fa8f 	bl	800086c <__aeabi_ddiv>
 800534e:	4602      	mov	r2, r0
 8005350:	460b      	mov	r3, r1
 8005352:	f04f 0000 	mov.w	r0, #0
 8005356:	495a      	ldr	r1, [pc, #360]	; (80054c0 <scaraInitLSPB+0x738>)
 8005358:	f7fa ffa6 	bl	80002a8 <__aeabi_dsub>
 800535c:	4602      	mov	r2, r0
 800535e:	460b      	mov	r3, r1
 8005360:	4640      	mov	r0, r8
 8005362:	4649      	mov	r1, r9
 8005364:	f7fb f958 	bl	8000618 <__aeabi_dmul>
 8005368:	4602      	mov	r2, r0
 800536a:	460b      	mov	r3, r1
 800536c:	4690      	mov	r8, r2
 800536e:	4699      	mov	r9, r3
 8005370:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8005374:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8005378:	f7fb fa78 	bl	800086c <__aeabi_ddiv>
 800537c:	4602      	mov	r2, r0
 800537e:	460b      	mov	r3, r1
 8005380:	f04f 0000 	mov.w	r0, #0
 8005384:	494e      	ldr	r1, [pc, #312]	; (80054c0 <scaraInitLSPB+0x738>)
 8005386:	f7fa ff8f 	bl	80002a8 <__aeabi_dsub>
 800538a:	4602      	mov	r2, r0
 800538c:	460b      	mov	r3, r1
 800538e:	4640      	mov	r0, r8
 8005390:	4649      	mov	r1, r9
 8005392:	f7fb f941 	bl	8000618 <__aeabi_dmul>
 8005396:	4602      	mov	r2, r0
 8005398:	460b      	mov	r3, r1
			 tf		= fabs(q0 - q1)/v_lim + v_lim/(2*a_design)*(1 - v0/v_lim)*(1 - v0/v_lim)
 800539a:	4620      	mov	r0, r4
 800539c:	4629      	mov	r1, r5
 800539e:	f7fa ff85 	bl	80002ac <__adddf3>
 80053a2:	4603      	mov	r3, r0
 80053a4:	460c      	mov	r4, r1
 80053a6:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 80053aa:	e01d      	b.n	80053e8 <scaraInitLSPB+0x660>
		 }
	 } else {
		 v_lim	= 0;
 80053ac:	f04f 0300 	mov.w	r3, #0
 80053b0:	f04f 0400 	mov.w	r4, #0
 80053b4:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
		 ta = tf/2;
 80053b8:	f04f 0200 	mov.w	r2, #0
 80053bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80053c0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80053c4:	f7fb fa52 	bl	800086c <__aeabi_ddiv>
 80053c8:	4603      	mov	r3, r0
 80053ca:	460c      	mov	r4, r1
 80053cc:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
		 td = tf/2;
 80053d0:	f04f 0200 	mov.w	r2, #0
 80053d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80053d8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80053dc:	f7fb fa46 	bl	800086c <__aeabi_ddiv>
 80053e0:	4603      	mov	r3, r0
 80053e2:	460c      	mov	r4, r1
 80053e4:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
	 }

	 no_sample = ceilf(tf / T_SAMPLING); // ceiling
 80053e8:	a333      	add	r3, pc, #204	; (adr r3, 80054b8 <scaraInitLSPB+0x730>)
 80053ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80053f2:	f7fb fa3b 	bl	800086c <__aeabi_ddiv>
 80053f6:	4603      	mov	r3, r0
 80053f8:	460c      	mov	r4, r1
 80053fa:	4618      	mov	r0, r3
 80053fc:	4621      	mov	r1, r4
 80053fe:	f7fb fc03 	bl	8000c08 <__aeabi_d2f>
 8005402:	4603      	mov	r3, r0
 8005404:	ee00 3a10 	vmov	s0, r3
 8005408:	f011 fc9e 	bl	8016d48 <ceilf>
 800540c:	eef0 7a40 	vmov.f32	s15, s0
 8005410:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005414:	ee17 3a90 	vmov	r3, s15
 8005418:	627b      	str	r3, [r7, #36]	; 0x24
	 // Init lspb params
	 lspb->dir= dir;
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8005420:	701a      	strb	r2, [r3, #0]
	 lspb->s0 = q0;
 8005422:	69fa      	ldr	r2, [r7, #28]
 8005424:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8005428:	e9c2 3402 	strd	r3, r4, [r2, #8]
	 lspb->s1 = q1;
 800542c:	69fa      	ldr	r2, [r7, #28]
 800542e:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8005432:	e9c2 3404 	strd	r3, r4, [r2, #16]
	 lspb->Ta = ta;
 8005436:	69fa      	ldr	r2, [r7, #28]
 8005438:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800543c:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	 lspb->Td = td;
 8005440:	69fa      	ldr	r2, [r7, #28]
 8005442:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8005446:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	 lspb->Tf = tf;
 800544a:	69fa      	ldr	r2, [r7, #28]
 800544c:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8005450:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	 lspb->a_design = a_design;
 8005454:	69fa      	ldr	r2, [r7, #28]
 8005456:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 800545a:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	 lspb->v_design = v_design;
 800545e:	69fa      	ldr	r2, [r7, #28]
 8005460:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8005464:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	 lspb->v_lim = v_lim;
 8005468:	69fa      	ldr	r2, [r7, #28]
 800546a:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 800546e:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	 lspb->v0 = v0;
 8005472:	69fa      	ldr	r2, [r7, #28]
 8005474:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8005478:	e9c2 3406 	strd	r3, r4, [r2, #24]
	 lspb->v1 = v1;
 800547c:	69fa      	ldr	r2, [r7, #28]
 800547e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8005482:	e9c2 3408 	strd	r3, r4, [r2, #32]
	 lspb->num_of_sampling = no_sample;
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800548a:	659a      	str	r2, [r3, #88]	; 0x58
	 lspb->total_s = lspb->s1 - lspb->s0;
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8005498:	461a      	mov	r2, r3
 800549a:	4623      	mov	r3, r4
 800549c:	f7fa ff04 	bl	80002a8 <__aeabi_dsub>
 80054a0:	4603      	mov	r3, r0
 80054a2:	460c      	mov	r4, r1
 80054a4:	69fa      	ldr	r2, [r7, #28]
 80054a6:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

	 return SCARA_STATUS_OK;
 80054aa:	2300      	movs	r3, #0
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	37a4      	adds	r7, #164	; 0xa4
 80054b0:	46bd      	mov	sp, r7
 80054b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054b6:	bf00      	nop
 80054b8:	40000000 	.word	0x40000000
 80054bc:	3f847ae1 	.word	0x3f847ae1
 80054c0:	3ff00000 	.word	0x3ff00000
 80054c4:	9abcaf48 	.word	0x9abcaf48
 80054c8:	3e7ad7f2 	.word	0x3e7ad7f2
 80054cc:	00000000 	.word	0x00000000

080054d0 <scaraInitScurve>:

SCARA_StatusTypeDef	scaraInitScurve		(Trajectory_Scurve_TypeDef *scurve,
										Trajectory_TargetTypeDef target,
										double total_s,
										ModeInitTypeDef modeinit) {
 80054d0:	b5b0      	push	{r4, r5, r7, lr}
 80054d2:	b0b6      	sub	sp, #216	; 0xd8
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	460b      	mov	r3, r1
 80054da:	ed87 0b00 	vstr	d0, [r7]
 80054de:	72fb      	strb	r3, [r7, #11]
 80054e0:	4613      	mov	r3, r2
 80054e2:	72bb      	strb	r3, [r7, #10]
	 double v_design, a_design, q0, q1, v0, v1, v_lim, j_max, tm, tc, tf, dir;
	 double v_1, s_1, v_2, s_2, v_3, s_3, v_4, s_4;
	 uint32_t	 no_sample;
	 uint8_t	 no_phases;

	 if ( TRAJECTORY_3D == target) {
 80054e4:	7afb      	ldrb	r3, [r7, #11]
 80054e6:	2b04      	cmp	r3, #4
 80054e8:	d10a      	bne.n	8005500 <scaraInitScurve+0x30>
		 v_design = V_DESIGN_3D;
 80054ea:	f04f 0300 	mov.w	r3, #0
 80054ee:	4c94      	ldr	r4, [pc, #592]	; (8005740 <scaraInitScurve+0x270>)
 80054f0:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
		 a_design = A_DESIGN_3D;
 80054f4:	a482      	add	r4, pc, #520	; (adr r4, 8005700 <scaraInitScurve+0x230>)
 80054f6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80054fa:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
 80054fe:	e047      	b.n	8005590 <scaraInitScurve+0xc0>
	 } else if (TRAJECTORY_ROLL == target) {
 8005500:	7afb      	ldrb	r3, [r7, #11]
 8005502:	2b05      	cmp	r3, #5
 8005504:	d10a      	bne.n	800551c <scaraInitScurve+0x4c>
		 v_design = V_DESIGN_ROLL;
 8005506:	a480      	add	r4, pc, #512	; (adr r4, 8005708 <scaraInitScurve+0x238>)
 8005508:	e9d4 3400 	ldrd	r3, r4, [r4]
 800550c:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
		 a_design = A_DESIGN_ROLL;
 8005510:	a47f      	add	r4, pc, #508	; (adr r4, 8005710 <scaraInitScurve+0x240>)
 8005512:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005516:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
 800551a:	e039      	b.n	8005590 <scaraInitScurve+0xc0>
	 } else if (TRAJECTORY_J0 == target) {
 800551c:	7afb      	ldrb	r3, [r7, #11]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d10a      	bne.n	8005538 <scaraInitScurve+0x68>
		 v_design = V_DESIGN_J0;
 8005522:	a47d      	add	r4, pc, #500	; (adr r4, 8005718 <scaraInitScurve+0x248>)
 8005524:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005528:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
		 a_design = A_DESIGN_J0;
 800552c:	a47c      	add	r4, pc, #496	; (adr r4, 8005720 <scaraInitScurve+0x250>)
 800552e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005532:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
 8005536:	e02b      	b.n	8005590 <scaraInitScurve+0xc0>
	 } else if (TRAJECTORY_J1 == target) {
 8005538:	7afb      	ldrb	r3, [r7, #11]
 800553a:	2b01      	cmp	r3, #1
 800553c:	d10a      	bne.n	8005554 <scaraInitScurve+0x84>
		 v_design = V_DESIGN_J1;
 800553e:	f04f 0300 	mov.w	r3, #0
 8005542:	4c80      	ldr	r4, [pc, #512]	; (8005744 <scaraInitScurve+0x274>)
 8005544:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
		 a_design = A_DESIGN_J1;
 8005548:	f04f 0300 	mov.w	r3, #0
 800554c:	4c7e      	ldr	r4, [pc, #504]	; (8005748 <scaraInitScurve+0x278>)
 800554e:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
 8005552:	e01d      	b.n	8005590 <scaraInitScurve+0xc0>
	 } else if (TRAJECTORY_J2 == target) {
 8005554:	7afb      	ldrb	r3, [r7, #11]
 8005556:	2b02      	cmp	r3, #2
 8005558:	d10a      	bne.n	8005570 <scaraInitScurve+0xa0>
		 v_design = V_DESIGN_J2;
 800555a:	f04f 0300 	mov.w	r3, #0
 800555e:	4c78      	ldr	r4, [pc, #480]	; (8005740 <scaraInitScurve+0x270>)
 8005560:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
		 a_design = A_DESIGN_J2;
 8005564:	a466      	add	r4, pc, #408	; (adr r4, 8005700 <scaraInitScurve+0x230>)
 8005566:	e9d4 3400 	ldrd	r3, r4, [r4]
 800556a:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
 800556e:	e00f      	b.n	8005590 <scaraInitScurve+0xc0>
	 } else if (TRAJECTORY_J3 == target) {
 8005570:	7afb      	ldrb	r3, [r7, #11]
 8005572:	2b03      	cmp	r3, #3
 8005574:	d10a      	bne.n	800558c <scaraInitScurve+0xbc>
		 v_design = V_DESIGN_J3;
 8005576:	a46c      	add	r4, pc, #432	; (adr r4, 8005728 <scaraInitScurve+0x258>)
 8005578:	e9d4 3400 	ldrd	r3, r4, [r4]
 800557c:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
		 a_design = A_DESIGN_J3;
 8005580:	a46b      	add	r4, pc, #428	; (adr r4, 8005730 <scaraInitScurve+0x260>)
 8005582:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005586:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
 800558a:	e001      	b.n	8005590 <scaraInitScurve+0xc0>
	 } else {
		 return SCARA_STATUS_ERROR_PARA;
 800558c:	2306      	movs	r3, #6
 800558e:	e2e6      	b.n	8005b5e <scaraInitScurve+0x68e>
	 }

	 v0 = 0;
 8005590:	f04f 0300 	mov.w	r3, #0
 8005594:	f04f 0400 	mov.w	r4, #0
 8005598:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	 v1 = 0;
 800559c:	f04f 0300 	mov.w	r3, #0
 80055a0:	f04f 0400 	mov.w	r4, #0
 80055a4:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
	 q0 = 0;
 80055a8:	f04f 0300 	mov.w	r3, #0
 80055ac:	f04f 0400 	mov.w	r4, #0
 80055b0:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	 q1 = total_s;
 80055b4:	e9d7 3400 	ldrd	r3, r4, [r7]
 80055b8:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0

	 if ( total_s < 0) {
 80055bc:	f04f 0200 	mov.w	r2, #0
 80055c0:	f04f 0300 	mov.w	r3, #0
 80055c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80055c8:	f7fb fa98 	bl	8000afc <__aeabi_dcmplt>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d015      	beq.n	80055fe <scaraInitScurve+0x12e>
		 dir = -1;
 80055d2:	f04f 0300 	mov.w	r3, #0
 80055d6:	4c5d      	ldr	r4, [pc, #372]	; (800574c <scaraInitScurve+0x27c>)
 80055d8:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
		 q1 = -q1;
 80055dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80055e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80055e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80055e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80055ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
		 total_s = -total_s;
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	603b      	str	r3, [r7, #0]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80055fa:	607b      	str	r3, [r7, #4]
 80055fc:	e004      	b.n	8005608 <scaraInitScurve+0x138>
	 } else {
		 dir = 1;
 80055fe:	f04f 0300 	mov.w	r3, #0
 8005602:	4c53      	ldr	r4, [pc, #332]	; (8005750 <scaraInitScurve+0x280>)
 8005604:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
	 }


	 if (DUTY_MODE_INIT_QVT == modeinit) {
 8005608:	7abb      	ldrb	r3, [r7, #10]
 800560a:	2b01      	cmp	r3, #1
 800560c:	f040 80b0 	bne.w	8005770 <scaraInitScurve+0x2a0>
		 double t_upper, v_upper, a_upper;
		 tf = scurve->Tf;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8005616:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
		 // Avoid division by 0
		 if (tf > 0.001) {
 800561a:	a347      	add	r3, pc, #284	; (adr r3, 8005738 <scaraInitScurve+0x268>)
 800561c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005620:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005624:	f7fb fa88 	bl	8000b38 <__aeabi_dcmpgt>
 8005628:	4603      	mov	r3, r0
 800562a:	2b00      	cmp	r3, #0
 800562c:	f000 8094 	beq.w	8005758 <scaraInitScurve+0x288>
			 // Assume 4 phase
			 t_upper = tf / 4;
 8005630:	f04f 0200 	mov.w	r2, #0
 8005634:	4b47      	ldr	r3, [pc, #284]	; (8005754 <scaraInitScurve+0x284>)
 8005636:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800563a:	f7fb f917 	bl	800086c <__aeabi_ddiv>
 800563e:	4603      	mov	r3, r0
 8005640:	460c      	mov	r4, r1
 8005642:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
			 v_upper = total_s / (2*t_upper);
 8005646:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800564a:	4602      	mov	r2, r0
 800564c:	460b      	mov	r3, r1
 800564e:	f7fa fe2d 	bl	80002ac <__adddf3>
 8005652:	4603      	mov	r3, r0
 8005654:	460c      	mov	r4, r1
 8005656:	461a      	mov	r2, r3
 8005658:	4623      	mov	r3, r4
 800565a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800565e:	f7fb f905 	bl	800086c <__aeabi_ddiv>
 8005662:	4603      	mov	r3, r0
 8005664:	460c      	mov	r4, r1
 8005666:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
			 // Check 4 phase --> 5 phase
			 if ( v_upper > v_design) {
 800566a:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800566e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005672:	f7fb fa61 	bl	8000b38 <__aeabi_dcmpgt>
 8005676:	4603      	mov	r3, r0
 8005678:	2b00      	cmp	r3, #0
 800567a:	d022      	beq.n	80056c2 <scaraInitScurve+0x1f2>
				 t_upper = tf/2 - total_s/(2*v_design);
 800567c:	f04f 0200 	mov.w	r2, #0
 8005680:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005684:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005688:	f7fb f8f0 	bl	800086c <__aeabi_ddiv>
 800568c:	4603      	mov	r3, r0
 800568e:	460c      	mov	r4, r1
 8005690:	4625      	mov	r5, r4
 8005692:	461c      	mov	r4, r3
 8005694:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8005698:	4602      	mov	r2, r0
 800569a:	460b      	mov	r3, r1
 800569c:	f7fa fe06 	bl	80002ac <__adddf3>
 80056a0:	4602      	mov	r2, r0
 80056a2:	460b      	mov	r3, r1
 80056a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80056a8:	f7fb f8e0 	bl	800086c <__aeabi_ddiv>
 80056ac:	4602      	mov	r2, r0
 80056ae:	460b      	mov	r3, r1
 80056b0:	4620      	mov	r0, r4
 80056b2:	4629      	mov	r1, r5
 80056b4:	f7fa fdf8 	bl	80002a8 <__aeabi_dsub>
 80056b8:	4603      	mov	r3, r0
 80056ba:	460c      	mov	r4, r1
 80056bc:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
 80056c0:	e003      	b.n	80056ca <scaraInitScurve+0x1fa>
			 } else {
				 v_design = v_upper;
 80056c2:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 80056c6:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
			 }
			 a_upper  = v_design / t_upper;
 80056ca:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80056ce:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80056d2:	f7fb f8cb 	bl	800086c <__aeabi_ddiv>
 80056d6:	4603      	mov	r3, r0
 80056d8:	460c      	mov	r4, r1
 80056da:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
			 if ( a_upper > a_design) {
 80056de:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 80056e2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80056e6:	f7fb fa27 	bl	8000b38 <__aeabi_dcmpgt>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d001      	beq.n	80056f4 <scaraInitScurve+0x224>
				 return SCARA_STATUS_ERROR_OVER_ACCEL;
 80056f0:	230a      	movs	r3, #10
 80056f2:	e234      	b.n	8005b5e <scaraInitScurve+0x68e>
			 } else {
				 a_design = a_upper;
 80056f4:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 80056f8:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
 80056fc:	e038      	b.n	8005770 <scaraInitScurve+0x2a0>
 80056fe:	bf00      	nop
 8005700:	cccccccd 	.word	0xcccccccd
 8005704:	400ccccc 	.word	0x400ccccc
 8005708:	8ccccccd 	.word	0x8ccccccd
 800570c:	3fe21877 	.word	0x3fe21877
 8005710:	7ae147ae 	.word	0x7ae147ae
 8005714:	3fbcf3f2 	.word	0x3fbcf3f2
 8005718:	45a1cac1 	.word	0x45a1cac1
 800571c:	3fddf3b6 	.word	0x3fddf3b6
 8005720:	6ae7d567 	.word	0x6ae7d567
 8005724:	3fb7f62b 	.word	0x3fb7f62b
 8005728:	cccccccd 	.word	0xcccccccd
 800572c:	3feccccc 	.word	0x3feccccc
 8005730:	70a3d70a 	.word	0x70a3d70a
 8005734:	3fc70a3d 	.word	0x3fc70a3d
 8005738:	d2f1a9fc 	.word	0xd2f1a9fc
 800573c:	3f50624d 	.word	0x3f50624d
 8005740:	40320000 	.word	0x40320000
 8005744:	3fd68000 	.word	0x3fd68000
 8005748:	3fb20000 	.word	0x3fb20000
 800574c:	bff00000 	.word	0xbff00000
 8005750:	3ff00000 	.word	0x3ff00000
 8005754:	40100000 	.word	0x40100000
			 }
		 } else {
			 v_design = 0;
 8005758:	f04f 0300 	mov.w	r3, #0
 800575c:	f04f 0400 	mov.w	r4, #0
 8005760:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
			 a_design = 0;
 8005764:	f04f 0300 	mov.w	r3, #0
 8005768:	f04f 0400 	mov.w	r4, #0
 800576c:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
		 }
	 }
	 // Avoid division by 0
	 if (a_design > 0.0000001 && v_design > 0.0000001) {
 8005770:	a352      	add	r3, pc, #328	; (adr r3, 80058bc <scaraInitScurve+0x3ec>)
 8005772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005776:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800577a:	f7fb f9dd 	bl	8000b38 <__aeabi_dcmpgt>
 800577e:	4603      	mov	r3, r0
 8005780:	2b00      	cmp	r3, #0
 8005782:	f000 80a3 	beq.w	80058cc <scaraInitScurve+0x3fc>
 8005786:	a34d      	add	r3, pc, #308	; (adr r3, 80058bc <scaraInitScurve+0x3ec>)
 8005788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800578c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8005790:	f7fb f9d2 	bl	8000b38 <__aeabi_dcmpgt>
 8005794:	4603      	mov	r3, r0
 8005796:	2b00      	cmp	r3, #0
 8005798:	f000 8098 	beq.w	80058cc <scaraInitScurve+0x3fc>
		 no_phases = 5;
 800579c:	2305      	movs	r3, #5
 800579e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		 tm = v_design/a_design;
 80057a2:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 80057a6:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80057aa:	f7fb f85f 	bl	800086c <__aeabi_ddiv>
 80057ae:	4603      	mov	r3, r0
 80057b0:	460c      	mov	r4, r1
 80057b2:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 tc = total_s/v_design - 2*tm;
 80057b6:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 80057ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80057be:	f7fb f855 	bl	800086c <__aeabi_ddiv>
 80057c2:	4603      	mov	r3, r0
 80057c4:	460c      	mov	r4, r1
 80057c6:	4625      	mov	r5, r4
 80057c8:	461c      	mov	r4, r3
 80057ca:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80057ce:	4602      	mov	r2, r0
 80057d0:	460b      	mov	r3, r1
 80057d2:	f7fa fd6b 	bl	80002ac <__adddf3>
 80057d6:	4602      	mov	r2, r0
 80057d8:	460b      	mov	r3, r1
 80057da:	4620      	mov	r0, r4
 80057dc:	4629      	mov	r1, r5
 80057de:	f7fa fd63 	bl	80002a8 <__aeabi_dsub>
 80057e2:	4603      	mov	r3, r0
 80057e4:	460c      	mov	r4, r1
 80057e6:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
		 // Check condition 5 phase ---> 4 phase
		 if (tc < 0.0) {
 80057ea:	f04f 0200 	mov.w	r2, #0
 80057ee:	f04f 0300 	mov.w	r3, #0
 80057f2:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80057f6:	f7fb f981 	bl	8000afc <__aeabi_dcmplt>
 80057fa:	4603      	mov	r3, r0
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d022      	beq.n	8005846 <scaraInitScurve+0x376>
			 tc = 0;
 8005800:	f04f 0300 	mov.w	r3, #0
 8005804:	f04f 0400 	mov.w	r4, #0
 8005808:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
			 no_phases = 4;
 800580c:	2304      	movs	r3, #4
 800580e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			 tm = sqrt(total_s/(2*a_design));
 8005812:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005816:	4602      	mov	r2, r0
 8005818:	460b      	mov	r3, r1
 800581a:	f7fa fd47 	bl	80002ac <__adddf3>
 800581e:	4603      	mov	r3, r0
 8005820:	460c      	mov	r4, r1
 8005822:	461a      	mov	r2, r3
 8005824:	4623      	mov	r3, r4
 8005826:	e9d7 0100 	ldrd	r0, r1, [r7]
 800582a:	f7fb f81f 	bl	800086c <__aeabi_ddiv>
 800582e:	4603      	mov	r3, r0
 8005830:	460c      	mov	r4, r1
 8005832:	ec44 3b17 	vmov	d7, r3, r4
 8005836:	eeb0 0a47 	vmov.f32	s0, s14
 800583a:	eef0 0a67 	vmov.f32	s1, s15
 800583e:	f011 fac5 	bl	8016dcc <sqrt>
 8005842:	ed87 0b2a 	vstr	d0, [r7, #168]	; 0xa8
		 }
		 if (tm < 0.001) {
 8005846:	a31f      	add	r3, pc, #124	; (adr r3, 80058c4 <scaraInitScurve+0x3f4>)
 8005848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800584c:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8005850:	f7fb f954 	bl	8000afc <__aeabi_dcmplt>
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d006      	beq.n	8005868 <scaraInitScurve+0x398>
			 j_max = 0;
 800585a:	f04f 0300 	mov.w	r3, #0
 800585e:	f04f 0400 	mov.w	r4, #0
 8005862:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
 8005866:	e009      	b.n	800587c <scaraInitScurve+0x3ac>
		 } else {
			 j_max = a_design/tm;
 8005868:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800586c:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005870:	f7fa fffc 	bl	800086c <__aeabi_ddiv>
 8005874:	4603      	mov	r3, r0
 8005876:	460c      	mov	r4, r1
 8005878:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
		 }
		 v_lim = a_design*tm;
 800587c:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8005880:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005884:	f7fa fec8 	bl	8000618 <__aeabi_dmul>
 8005888:	4603      	mov	r3, r0
 800588a:	460c      	mov	r4, r1
 800588c:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
		 tf    = 4*tm + tc;
 8005890:	f04f 0200 	mov.w	r2, #0
 8005894:	4b08      	ldr	r3, [pc, #32]	; (80058b8 <scaraInitScurve+0x3e8>)
 8005896:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800589a:	f7fa febd 	bl	8000618 <__aeabi_dmul>
 800589e:	4603      	mov	r3, r0
 80058a0:	460c      	mov	r4, r1
 80058a2:	461a      	mov	r2, r3
 80058a4:	4623      	mov	r3, r4
 80058a6:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80058aa:	f7fa fcff 	bl	80002ac <__adddf3>
 80058ae:	4603      	mov	r3, r0
 80058b0:	460c      	mov	r4, r1
 80058b2:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
 80058b6:	e029      	b.n	800590c <scaraInitScurve+0x43c>
 80058b8:	40100000 	.word	0x40100000
 80058bc:	9abcaf48 	.word	0x9abcaf48
 80058c0:	3e7ad7f2 	.word	0x3e7ad7f2
 80058c4:	d2f1a9fc 	.word	0xd2f1a9fc
 80058c8:	3f50624d 	.word	0x3f50624d
	 } else {
		 j_max = 0;
 80058cc:	f04f 0300 	mov.w	r3, #0
 80058d0:	f04f 0400 	mov.w	r4, #0
 80058d4:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
		 tc = 0;
 80058d8:	f04f 0300 	mov.w	r3, #0
 80058dc:	f04f 0400 	mov.w	r4, #0
 80058e0:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
		 no_phases = 4;
 80058e4:	2304      	movs	r3, #4
 80058e6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		 tm = tf / 4;
 80058ea:	f04f 0200 	mov.w	r2, #0
 80058ee:	4ba0      	ldr	r3, [pc, #640]	; (8005b70 <scaraInitScurve+0x6a0>)
 80058f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80058f4:	f7fa ffba 	bl	800086c <__aeabi_ddiv>
 80058f8:	4603      	mov	r3, r0
 80058fa:	460c      	mov	r4, r1
 80058fc:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 v_lim = 0;
 8005900:	f04f 0300 	mov.w	r3, #0
 8005904:	f04f 0400 	mov.w	r4, #0
 8005908:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
	 }

	 no_sample = ceil(tf / T_SAMPLING);
 800590c:	a396      	add	r3, pc, #600	; (adr r3, 8005b68 <scaraInitScurve+0x698>)
 800590e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005912:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005916:	f7fa ffa9 	bl	800086c <__aeabi_ddiv>
 800591a:	4603      	mov	r3, r0
 800591c:	460c      	mov	r4, r1
 800591e:	ec44 3b17 	vmov	d7, r3, r4
 8005922:	eeb0 0a47 	vmov.f32	s0, s14
 8005926:	eef0 0a67 	vmov.f32	s1, s15
 800592a:	f011 f901 	bl	8016b30 <ceil>
 800592e:	ec54 3b10 	vmov	r3, r4, d0
 8005932:	4618      	mov	r0, r3
 8005934:	4621      	mov	r1, r4
 8005936:	f7fb f947 	bl	8000bc8 <__aeabi_d2uiz>
 800593a:	4603      	mov	r3, r0
 800593c:	657b      	str	r3, [r7, #84]	; 0x54
	 v_1 = 0.5*j_max*tm*tm;
 800593e:	f04f 0200 	mov.w	r2, #0
 8005942:	4b8c      	ldr	r3, [pc, #560]	; (8005b74 <scaraInitScurve+0x6a4>)
 8005944:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005948:	f7fa fe66 	bl	8000618 <__aeabi_dmul>
 800594c:	4603      	mov	r3, r0
 800594e:	460c      	mov	r4, r1
 8005950:	4618      	mov	r0, r3
 8005952:	4621      	mov	r1, r4
 8005954:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8005958:	f7fa fe5e 	bl	8000618 <__aeabi_dmul>
 800595c:	4603      	mov	r3, r0
 800595e:	460c      	mov	r4, r1
 8005960:	461a      	mov	r2, r3
 8005962:	4623      	mov	r3, r4
 8005964:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8005968:	f7fa fe56 	bl	8000618 <__aeabi_dmul>
 800596c:	4603      	mov	r3, r0
 800596e:	460c      	mov	r4, r1
 8005970:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
	 s_1 = j_max*tm*tm*tm/6;
 8005974:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8005978:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800597c:	f7fa fe4c 	bl	8000618 <__aeabi_dmul>
 8005980:	4603      	mov	r3, r0
 8005982:	460c      	mov	r4, r1
 8005984:	4618      	mov	r0, r3
 8005986:	4621      	mov	r1, r4
 8005988:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800598c:	f7fa fe44 	bl	8000618 <__aeabi_dmul>
 8005990:	4603      	mov	r3, r0
 8005992:	460c      	mov	r4, r1
 8005994:	4618      	mov	r0, r3
 8005996:	4621      	mov	r1, r4
 8005998:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800599c:	f7fa fe3c 	bl	8000618 <__aeabi_dmul>
 80059a0:	4603      	mov	r3, r0
 80059a2:	460c      	mov	r4, r1
 80059a4:	4618      	mov	r0, r3
 80059a6:	4621      	mov	r1, r4
 80059a8:	f04f 0200 	mov.w	r2, #0
 80059ac:	4b72      	ldr	r3, [pc, #456]	; (8005b78 <scaraInitScurve+0x6a8>)
 80059ae:	f7fa ff5d 	bl	800086c <__aeabi_ddiv>
 80059b2:	4603      	mov	r3, r0
 80059b4:	460c      	mov	r4, r1
 80059b6:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
	 v_2 = j_max*tm*tm;
 80059ba:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80059be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80059c2:	f7fa fe29 	bl	8000618 <__aeabi_dmul>
 80059c6:	4603      	mov	r3, r0
 80059c8:	460c      	mov	r4, r1
 80059ca:	461a      	mov	r2, r3
 80059cc:	4623      	mov	r3, r4
 80059ce:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80059d2:	f7fa fe21 	bl	8000618 <__aeabi_dmul>
 80059d6:	4603      	mov	r3, r0
 80059d8:	460c      	mov	r4, r1
 80059da:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	 s_2 = v_2*tm;
 80059de:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80059e2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80059e6:	f7fa fe17 	bl	8000618 <__aeabi_dmul>
 80059ea:	4603      	mov	r3, r0
 80059ec:	460c      	mov	r4, r1
 80059ee:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	 v_3 = v_2;
 80059f2:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80059f6:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	 s_3 = s_2 + v_2*tc;
 80059fa:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80059fe:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8005a02:	f7fa fe09 	bl	8000618 <__aeabi_dmul>
 8005a06:	4603      	mov	r3, r0
 8005a08:	460c      	mov	r4, r1
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	4623      	mov	r3, r4
 8005a0e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8005a12:	f7fa fc4b 	bl	80002ac <__adddf3>
 8005a16:	4603      	mov	r3, r0
 8005a18:	460c      	mov	r4, r1
 8005a1a:	e9c7 3408 	strd	r3, r4, [r7, #32]
	 v_4 = v_1;
 8005a1e:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8005a22:	e9c7 3406 	strd	r3, r4, [r7, #24]
	 s_4 = s_3 + s_2 - s_1;
 8005a26:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005a2a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005a2e:	f7fa fc3d 	bl	80002ac <__adddf3>
 8005a32:	4603      	mov	r3, r0
 8005a34:	460c      	mov	r4, r1
 8005a36:	4618      	mov	r0, r3
 8005a38:	4621      	mov	r1, r4
 8005a3a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005a3e:	f7fa fc33 	bl	80002a8 <__aeabi_dsub>
 8005a42:	4603      	mov	r3, r0
 8005a44:	460c      	mov	r4, r1
 8005a46:	e9c7 3404 	strd	r3, r4, [r7, #16]

	 scurve->Tc = tc;
 8005a4a:	68fa      	ldr	r2, [r7, #12]
 8005a4c:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 8005a50:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	 scurve->Tf = tf;
 8005a54:	68fa      	ldr	r2, [r7, #12]
 8005a56:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8005a5a:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	 scurve->Tm = tm;
 8005a5e:	68fa      	ldr	r2, [r7, #12]
 8005a60:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8005a64:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	 scurve->a_design = a_design;
 8005a68:	68fa      	ldr	r2, [r7, #12]
 8005a6a:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8005a6e:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	 scurve->v_design = v_design;
 8005a72:	68fa      	ldr	r2, [r7, #12]
 8005a74:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 8005a78:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	 scurve->v_lim = v_lim;
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8005a82:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	 scurve->v0 = v0;
 8005a86:	68fa      	ldr	r2, [r7, #12]
 8005a88:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8005a8c:	e9c2 3406 	strd	r3, r4, [r2, #24]
	 scurve->v1 = v1;
 8005a90:	68fa      	ldr	r2, [r7, #12]
 8005a92:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8005a96:	e9c2 3408 	strd	r3, r4, [r2, #32]
	 scurve->j_max = j_max;
 8005a9a:	68fa      	ldr	r2, [r7, #12]
 8005a9c:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 8005aa0:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	 scurve->s0   = q0;
 8005aa4:	68fa      	ldr	r2, [r7, #12]
 8005aa6:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8005aaa:	e9c2 3402 	strd	r3, r4, [r2, #8]
	 scurve->s1   = q1;
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8005ab4:	e9c2 3404 	strd	r3, r4, [r2, #16]
	 scurve->num_of_phase = no_phases;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 8005abe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	 scurve->num_of_sampling = no_sample;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005ac6:	669a      	str	r2, [r3, #104]	; 0x68
	 scurve->total_s = total_s;
 8005ac8:	68fa      	ldr	r2, [r7, #12]
 8005aca:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005ace:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	 scurve->dir = dir;
 8005ad2:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8005ad6:	f7fb f84f 	bl	8000b78 <__aeabi_d2iz>
 8005ada:	4603      	mov	r3, r0
 8005adc:	b25a      	sxtb	r2, r3
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	701a      	strb	r2, [r3, #0]

	 scurve->a_current = 0;
 8005ae2:	68fa      	ldr	r2, [r7, #12]
 8005ae4:	f04f 0300 	mov.w	r3, #0
 8005ae8:	f04f 0400 	mov.w	r4, #0
 8005aec:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
	 scurve->v_current = 0;
 8005af0:	68fa      	ldr	r2, [r7, #12]
 8005af2:	f04f 0300 	mov.w	r3, #0
 8005af6:	f04f 0400 	mov.w	r4, #0
 8005afa:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
	 scurve->s_current = 0;
 8005afe:	68fa      	ldr	r2, [r7, #12]
 8005b00:	f04f 0300 	mov.w	r3, #0
 8005b04:	f04f 0400 	mov.w	r4, #0
 8005b08:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
	 scurve->v_1 = v_1;
 8005b0c:	68fa      	ldr	r2, [r7, #12]
 8005b0e:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8005b12:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	 scurve->v_2 = v_2;
 8005b16:	68fa      	ldr	r2, [r7, #12]
 8005b18:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8005b1c:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
	 scurve->v_3 = v_3;
 8005b20:	68fa      	ldr	r2, [r7, #12]
 8005b22:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8005b26:	e9c2 3426 	strd	r3, r4, [r2, #152]	; 0x98
	 scurve->v_4 = v_4;
 8005b2a:	68fa      	ldr	r2, [r7, #12]
 8005b2c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8005b30:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
	 scurve->s_1 = s_1;
 8005b34:	68fa      	ldr	r2, [r7, #12]
 8005b36:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8005b3a:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
	 scurve->s_2 = s_2;
 8005b3e:	68fa      	ldr	r2, [r7, #12]
 8005b40:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8005b44:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
	 scurve->s_3 = s_3;
 8005b48:	68fa      	ldr	r2, [r7, #12]
 8005b4a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8005b4e:	e9c2 3428 	strd	r3, r4, [r2, #160]	; 0xa0
	 scurve->s_4 = s_4;
 8005b52:	68fa      	ldr	r2, [r7, #12]
 8005b54:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005b58:	e9c2 342c 	strd	r3, r4, [r2, #176]	; 0xb0

	 return SCARA_STATUS_OK;
 8005b5c:	2300      	movs	r3, #0
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	37d8      	adds	r7, #216	; 0xd8
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bdb0      	pop	{r4, r5, r7, pc}
 8005b66:	bf00      	nop
 8005b68:	40000000 	.word	0x40000000
 8005b6c:	3f847ae1 	.word	0x3f847ae1
 8005b70:	40100000 	.word	0x40100000
 8005b74:	3fe00000 	.word	0x3fe00000
 8005b78:	40180000 	.word	0x40180000

08005b7c <scaraFlowDuty>:

SCARA_StatusTypeDef	scaraFlowDuty		(double time) {
 8005b7c:	b5b0      	push	{r4, r5, r7, lr}
 8005b7e:	b0cc      	sub	sp, #304	; 0x130
 8005b80:	af18      	add	r7, sp, #96	; 0x60
 8005b82:	ed87 0b00 	vstr	d0, [r7]
	SCARA_StatusTypeDef status1, status2, status3, status4;
	SCARA_PositionTypeDef	positionCompute;
	// Update time
	positionCompute.t = time;
 8005b86:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005b8a:	e9c7 3408 	strd	r3, r4, [r7, #32]
	/*---- Task space ----*/
	if ( DUTY_SPACE_TASK == myDUTY.space_type) {
 8005b8e:	4ba1      	ldr	r3, [pc, #644]	; (8005e14 <scaraFlowDuty+0x298>)
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	f040 80e2 	bne.w	8005d5c <scaraFlowDuty+0x1e0>
		double s, angle, x, y, z;
		int8_t	dir_roll;
		//---Trajectory flowing
			// LSPB
		if( DUTY_TRAJECTORY_LSPB == myDUTY.task.trajectory_3d.trajectory_type) {
 8005b98:	4b9e      	ldr	r3, [pc, #632]	; (8005e14 <scaraFlowDuty+0x298>)
 8005b9a:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d11f      	bne.n	8005be2 <scaraFlowDuty+0x66>
			status1 = scaraFlowLSPB(&(myDUTY.task.trajectory_3d.lspb), time);
 8005ba2:	ed97 0b00 	vldr	d0, [r7]
 8005ba6:	489c      	ldr	r0, [pc, #624]	; (8005e18 <scaraFlowDuty+0x29c>)
 8005ba8:	f000 fb7e 	bl	80062a8 <scaraFlowLSPB>
 8005bac:	4603      	mov	r3, r0
 8005bae:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			status2 = scaraFlowLSPB(&(myDUTY.task.trajectory_roll.lspb), time);
 8005bb2:	ed97 0b00 	vldr	d0, [r7]
 8005bb6:	4899      	ldr	r0, [pc, #612]	; (8005e1c <scaraFlowDuty+0x2a0>)
 8005bb8:	f000 fb76 	bl	80062a8 <scaraFlowLSPB>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
			s = myDUTY.task.trajectory_3d.lspb.s_current;
 8005bc2:	4b94      	ldr	r3, [pc, #592]	; (8005e14 <scaraFlowDuty+0x298>)
 8005bc4:	e9d3 3464 	ldrd	r3, r4, [r3, #400]	; 0x190
 8005bc8:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
			angle = myDUTY.task.trajectory_roll.lspb.s_current;
 8005bcc:	4b91      	ldr	r3, [pc, #580]	; (8005e14 <scaraFlowDuty+0x298>)
 8005bce:	e9d3 34ba 	ldrd	r3, r4, [r3, #744]	; 0x2e8
 8005bd2:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
			dir_roll = myDUTY.task.trajectory_roll.lspb.dir;
 8005bd6:	4b8f      	ldr	r3, [pc, #572]	; (8005e14 <scaraFlowDuty+0x298>)
 8005bd8:	f893 3270 	ldrb.w	r3, [r3, #624]	; 0x270
 8005bdc:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8005be0:	e026      	b.n	8005c30 <scaraFlowDuty+0xb4>
			// SCURVE
		} else if ( DUTY_TRAJECTORY_SCURVE == myDUTY.task.trajectory_3d.trajectory_type) {
 8005be2:	4b8c      	ldr	r3, [pc, #560]	; (8005e14 <scaraFlowDuty+0x298>)
 8005be4:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d11f      	bne.n	8005c2c <scaraFlowDuty+0xb0>
			status1 = scaraFLowScurve(&(myDUTY.task.trajectory_3d.scurve), time);
 8005bec:	ed97 0b00 	vldr	d0, [r7]
 8005bf0:	488b      	ldr	r0, [pc, #556]	; (8005e20 <scaraFlowDuty+0x2a4>)
 8005bf2:	f000 fd05 	bl	8006600 <scaraFLowScurve>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			status2 = scaraFLowScurve(&(myDUTY.task.trajectory_roll.scurve), time);
 8005bfc:	ed97 0b00 	vldr	d0, [r7]
 8005c00:	4888      	ldr	r0, [pc, #544]	; (8005e24 <scaraFlowDuty+0x2a8>)
 8005c02:	f000 fcfd 	bl	8006600 <scaraFLowScurve>
 8005c06:	4603      	mov	r3, r0
 8005c08:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
			s = myDUTY.task.trajectory_3d.scurve.s_current;
 8005c0c:	4b81      	ldr	r3, [pc, #516]	; (8005e14 <scaraFlowDuty+0x298>)
 8005c0e:	e9d3 3498 	ldrd	r3, r4, [r3, #608]	; 0x260
 8005c12:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
			angle = myDUTY.task.trajectory_roll.scurve.s_current;
 8005c16:	4b7f      	ldr	r3, [pc, #508]	; (8005e14 <scaraFlowDuty+0x298>)
 8005c18:	e9d3 34ee 	ldrd	r3, r4, [r3, #952]	; 0x3b8
 8005c1c:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
			dir_roll = myDUTY.task.trajectory_roll.scurve.dir;
 8005c20:	4b7c      	ldr	r3, [pc, #496]	; (8005e14 <scaraFlowDuty+0x298>)
 8005c22:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
 8005c26:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8005c2a:	e001      	b.n	8005c30 <scaraFlowDuty+0xb4>
		} else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 8005c2c:	2305      	movs	r3, #5
 8005c2e:	e218      	b.n	8006062 <scaraFlowDuty+0x4e6>
		}

		if ( SCARA_STATUS_OK != status1) {
 8005c30:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d002      	beq.n	8005c3e <scaraFlowDuty+0xc2>
			return status1;
 8005c38:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8005c3c:	e211      	b.n	8006062 <scaraFlowDuty+0x4e6>
		}
		if ( SCARA_STATUS_OK != status2) {
 8005c3e:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d002      	beq.n	8005c4c <scaraFlowDuty+0xd0>
			return status2;
 8005c46:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8005c4a:	e20a      	b.n	8006062 <scaraFlowDuty+0x4e6>
		}

		//---Path flowing
			// Straight line
		if( DUTY_PATH_LINE == myDUTY.task.path.path_type) {
 8005c4c:	4b71      	ldr	r3, [pc, #452]	; (8005e14 <scaraFlowDuty+0x298>)
 8005c4e:	7a1b      	ldrb	r3, [r3, #8]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d117      	bne.n	8005c84 <scaraFlowDuty+0x108>
			status1 = scaraFlowLine(&(myDUTY.task.path.line), s);
 8005c54:	ed97 0b30 	vldr	d0, [r7, #192]	; 0xc0
 8005c58:	4873      	ldr	r0, [pc, #460]	; (8005e28 <scaraFlowDuty+0x2ac>)
 8005c5a:	f000 fa15 	bl	8006088 <scaraFlowLine>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			x = myDUTY.task.path.line.x_current;
 8005c64:	4b6b      	ldr	r3, [pc, #428]	; (8005e14 <scaraFlowDuty+0x298>)
 8005c66:	e9d3 341a 	ldrd	r3, r4, [r3, #104]	; 0x68
 8005c6a:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
			y = myDUTY.task.path.line.y_current;
 8005c6e:	4b69      	ldr	r3, [pc, #420]	; (8005e14 <scaraFlowDuty+0x298>)
 8005c70:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8005c74:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
			z = myDUTY.task.path.line.z_current;
 8005c78:	4b66      	ldr	r3, [pc, #408]	; (8005e14 <scaraFlowDuty+0x298>)
 8005c7a:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 8005c7e:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 8005c82:	e01d      	b.n	8005cc0 <scaraFlowDuty+0x144>
			// Circular
		} else if ( DUTY_PATH_CIRCLE == myDUTY.task.path.path_type) {
 8005c84:	4b63      	ldr	r3, [pc, #396]	; (8005e14 <scaraFlowDuty+0x298>)
 8005c86:	7a1b      	ldrb	r3, [r3, #8]
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d117      	bne.n	8005cbc <scaraFlowDuty+0x140>
			status1 = scaraFlowCircle(&(myDUTY.task.path.circle), s);
 8005c8c:	ed97 0b30 	vldr	d0, [r7, #192]	; 0xc0
 8005c90:	4866      	ldr	r0, [pc, #408]	; (8005e2c <scaraFlowDuty+0x2b0>)
 8005c92:	f000 fa81 	bl	8006198 <scaraFlowCircle>
 8005c96:	4603      	mov	r3, r0
 8005c98:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			x = myDUTY.task.path.circle.x_current;
 8005c9c:	4b5d      	ldr	r3, [pc, #372]	; (8005e14 <scaraFlowDuty+0x298>)
 8005c9e:	e9d3 343e 	ldrd	r3, r4, [r3, #248]	; 0xf8
 8005ca2:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
			y = myDUTY.task.path.circle.y_current;
 8005ca6:	4b5b      	ldr	r3, [pc, #364]	; (8005e14 <scaraFlowDuty+0x298>)
 8005ca8:	e9d3 3440 	ldrd	r3, r4, [r3, #256]	; 0x100
 8005cac:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
			z = myDUTY.task.path.circle.z_current;
 8005cb0:	4b58      	ldr	r3, [pc, #352]	; (8005e14 <scaraFlowDuty+0x298>)
 8005cb2:	e9d3 3442 	ldrd	r3, r4, [r3, #264]	; 0x108
 8005cb6:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 8005cba:	e001      	b.n	8005cc0 <scaraFlowDuty+0x144>
		} else {
			return SCARA_STATUS_ERROR_TASK;
 8005cbc:	2303      	movs	r3, #3
 8005cbe:	e1d0      	b.n	8006062 <scaraFlowDuty+0x4e6>
		}

		positionCompute.x 		= x;
 8005cc0:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 8005cc4:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
		positionCompute.y		= y;
 8005cc8:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8005ccc:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
		positionCompute.z 		= z;
 8005cd0:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 8005cd4:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
		positionCompute.roll 	= myDUTY.task.roll_start + angle*dir_roll;
 8005cd8:	4b4e      	ldr	r3, [pc, #312]	; (8005e14 <scaraFlowDuty+0x298>)
 8005cda:	e9d3 45f0 	ldrd	r4, r5, [r3, #960]	; 0x3c0
 8005cde:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f7fa fc2e 	bl	8000544 <__aeabi_i2d>
 8005ce8:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8005cec:	f7fa fc94 	bl	8000618 <__aeabi_dmul>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	460b      	mov	r3, r1
 8005cf4:	4620      	mov	r0, r4
 8005cf6:	4629      	mov	r1, r5
 8005cf8:	f7fa fad8 	bl	80002ac <__adddf3>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	460c      	mov	r4, r1
 8005d00:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		positionCompute.q		= s;
 8005d04:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8005d08:	e9c7 3402 	strd	r3, r4, [r7, #8]
		positionCompute.total_time = myDUTY.time_total;
 8005d0c:	4b41      	ldr	r3, [pc, #260]	; (8005e14 <scaraFlowDuty+0x298>)
 8005d0e:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8005d12:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005d16:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
		positionCompute.t		= time;
 8005d1a:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005d1e:	e9c7 3408 	strd	r3, r4, [r7, #32]
		if ( FALSE == kinematicInverse(&positionCompute, positionCurrent)) {
 8005d22:	4c43      	ldr	r4, [pc, #268]	; (8005e30 <scaraFlowDuty+0x2b4>)
 8005d24:	f107 0508 	add.w	r5, r7, #8
 8005d28:	4668      	mov	r0, sp
 8005d2a:	f104 0308 	add.w	r3, r4, #8
 8005d2e:	2260      	movs	r2, #96	; 0x60
 8005d30:	4619      	mov	r1, r3
 8005d32:	f00c fd4d 	bl	80127d0 <memcpy>
 8005d36:	e894 000c 	ldmia.w	r4, {r2, r3}
 8005d3a:	4628      	mov	r0, r5
 8005d3c:	f7fd f880 	bl	8002e40 <kinematicInverse>
 8005d40:	4603      	mov	r3, r0
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d101      	bne.n	8005d4a <scaraFlowDuty+0x1ce>
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8005d46:	2307      	movs	r3, #7
 8005d48:	e18b      	b.n	8006062 <scaraFlowDuty+0x4e6>
		} else {
			memcpy(&positionNext, &positionCompute, sizeof(SCARA_PositionTypeDef));
 8005d4a:	4b3a      	ldr	r3, [pc, #232]	; (8005e34 <scaraFlowDuty+0x2b8>)
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f107 0308 	add.w	r3, r7, #8
 8005d52:	2268      	movs	r2, #104	; 0x68
 8005d54:	4619      	mov	r1, r3
 8005d56:	f00c fd3b 	bl	80127d0 <memcpy>
 8005d5a:	e181      	b.n	8006060 <scaraFlowDuty+0x4e4>
		}

	/*---- Joint space -----*/
	} else if (DUTY_SPACE_JOINT == myDUTY.space_type) {
 8005d5c:	4b2d      	ldr	r3, [pc, #180]	; (8005e14 <scaraFlowDuty+0x298>)
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	f040 817b 	bne.w	800605c <scaraFlowDuty+0x4e0>
		double s0, s1, s2, s3;
		int8_t dir0, dir1, dir2, dir3;
		// Trajectory flowing
			// LSPB
		if( DUTY_TRAJECTORY_LSPB == myDUTY.joint.trajectory[0].trajectory_type) {
 8005d66:	4b2b      	ldr	r3, [pc, #172]	; (8005e14 <scaraFlowDuty+0x298>)
 8005d68:	f893 33c8 	ldrb.w	r3, [r3, #968]	; 0x3c8
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d16b      	bne.n	8005e48 <scaraFlowDuty+0x2cc>
			status1 = scaraFlowLSPB(&(myDUTY.joint.trajectory[0].lspb), time);
 8005d70:	ed97 0b00 	vldr	d0, [r7]
 8005d74:	4830      	ldr	r0, [pc, #192]	; (8005e38 <scaraFlowDuty+0x2bc>)
 8005d76:	f000 fa97 	bl	80062a8 <scaraFlowLSPB>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			status2 = scaraFlowLSPB(&(myDUTY.joint.trajectory[1].lspb), time);
 8005d80:	ed97 0b00 	vldr	d0, [r7]
 8005d84:	482d      	ldr	r0, [pc, #180]	; (8005e3c <scaraFlowDuty+0x2c0>)
 8005d86:	f000 fa8f 	bl	80062a8 <scaraFlowLSPB>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
			status3 = scaraFlowLSPB(&(myDUTY.joint.trajectory[2].lspb), time);
 8005d90:	ed97 0b00 	vldr	d0, [r7]
 8005d94:	482a      	ldr	r0, [pc, #168]	; (8005e40 <scaraFlowDuty+0x2c4>)
 8005d96:	f000 fa87 	bl	80062a8 <scaraFlowLSPB>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
			status4 = scaraFlowLSPB(&(myDUTY.joint.trajectory[3].lspb), time);
 8005da0:	ed97 0b00 	vldr	d0, [r7]
 8005da4:	4827      	ldr	r0, [pc, #156]	; (8005e44 <scaraFlowDuty+0x2c8>)
 8005da6:	f000 fa7f 	bl	80062a8 <scaraFlowLSPB>
 8005daa:	4603      	mov	r3, r0
 8005dac:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
			dir0 = myDUTY.joint.trajectory[0].lspb.dir;
 8005db0:	4b18      	ldr	r3, [pc, #96]	; (8005e14 <scaraFlowDuty+0x298>)
 8005db2:	f893 33d0 	ldrb.w	r3, [r3, #976]	; 0x3d0
 8005db6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			dir1 = myDUTY.joint.trajectory[1].lspb.dir;
 8005dba:	4b16      	ldr	r3, [pc, #88]	; (8005e14 <scaraFlowDuty+0x298>)
 8005dbc:	f893 3528 	ldrb.w	r3, [r3, #1320]	; 0x528
 8005dc0:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
			dir2 = myDUTY.joint.trajectory[2].lspb.dir;
 8005dc4:	4b13      	ldr	r3, [pc, #76]	; (8005e14 <scaraFlowDuty+0x298>)
 8005dc6:	f893 3680 	ldrb.w	r3, [r3, #1664]	; 0x680
 8005dca:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
			dir3 = myDUTY.joint.trajectory[3].lspb.dir;
 8005dce:	4b11      	ldr	r3, [pc, #68]	; (8005e14 <scaraFlowDuty+0x298>)
 8005dd0:	f893 37d8 	ldrb.w	r3, [r3, #2008]	; 0x7d8
 8005dd4:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
			s0 = myDUTY.joint.trajectory[0].lspb.s_current;
 8005dd8:	4b0e      	ldr	r3, [pc, #56]	; (8005e14 <scaraFlowDuty+0x298>)
 8005dda:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 8005dde:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005de2:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
			s1 = myDUTY.joint.trajectory[1].lspb.s_current;
 8005de6:	4b0b      	ldr	r3, [pc, #44]	; (8005e14 <scaraFlowDuty+0x298>)
 8005de8:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 8005dec:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005df0:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
			s2 = myDUTY.joint.trajectory[2].lspb.s_current;
 8005df4:	4b07      	ldr	r3, [pc, #28]	; (8005e14 <scaraFlowDuty+0x298>)
 8005df6:	f503 63df 	add.w	r3, r3, #1784	; 0x6f8
 8005dfa:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005dfe:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
			s3 = myDUTY.joint.trajectory[3].lspb.s_current;
 8005e02:	4b04      	ldr	r3, [pc, #16]	; (8005e14 <scaraFlowDuty+0x298>)
 8005e04:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 8005e08:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005e0c:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
 8005e10:	e072      	b.n	8005ef8 <scaraFlowDuty+0x37c>
 8005e12:	bf00      	nop
 8005e14:	20005338 	.word	0x20005338
 8005e18:	20005450 	.word	0x20005450
 8005e1c:	200055a8 	.word	0x200055a8
 8005e20:	200054d0 	.word	0x200054d0
 8005e24:	20005628 	.word	0x20005628
 8005e28:	20005348 	.word	0x20005348
 8005e2c:	200053b8 	.word	0x200053b8
 8005e30:	20005cf0 	.word	0x20005cf0
 8005e34:	20005d58 	.word	0x20005d58
 8005e38:	20005708 	.word	0x20005708
 8005e3c:	20005860 	.word	0x20005860
 8005e40:	200059b8 	.word	0x200059b8
 8005e44:	20005b10 	.word	0x20005b10

			// SCURVE
		} else if ( DUTY_TRAJECTORY_SCURVE == myDUTY.joint.trajectory[0].trajectory_type) {
 8005e48:	4b88      	ldr	r3, [pc, #544]	; (800606c <scaraFlowDuty+0x4f0>)
 8005e4a:	f893 33c8 	ldrb.w	r3, [r3, #968]	; 0x3c8
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d150      	bne.n	8005ef4 <scaraFlowDuty+0x378>
			status1 = scaraFLowScurve(&(myDUTY.joint.trajectory[0].scurve), time);
 8005e52:	ed97 0b00 	vldr	d0, [r7]
 8005e56:	4886      	ldr	r0, [pc, #536]	; (8006070 <scaraFlowDuty+0x4f4>)
 8005e58:	f000 fbd2 	bl	8006600 <scaraFLowScurve>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			status2 = scaraFLowScurve(&(myDUTY.joint.trajectory[1].scurve), time);
 8005e62:	ed97 0b00 	vldr	d0, [r7]
 8005e66:	4883      	ldr	r0, [pc, #524]	; (8006074 <scaraFlowDuty+0x4f8>)
 8005e68:	f000 fbca 	bl	8006600 <scaraFLowScurve>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
			status3 = scaraFLowScurve(&(myDUTY.joint.trajectory[2].scurve), time);
 8005e72:	ed97 0b00 	vldr	d0, [r7]
 8005e76:	4880      	ldr	r0, [pc, #512]	; (8006078 <scaraFlowDuty+0x4fc>)
 8005e78:	f000 fbc2 	bl	8006600 <scaraFLowScurve>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
			status4 = scaraFLowScurve(&(myDUTY.joint.trajectory[3].scurve), time);
 8005e82:	ed97 0b00 	vldr	d0, [r7]
 8005e86:	487d      	ldr	r0, [pc, #500]	; (800607c <scaraFlowDuty+0x500>)
 8005e88:	f000 fbba 	bl	8006600 <scaraFLowScurve>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
			dir0 = myDUTY.joint.trajectory[0].scurve.dir;
 8005e92:	4b76      	ldr	r3, [pc, #472]	; (800606c <scaraFlowDuty+0x4f0>)
 8005e94:	f893 3450 	ldrb.w	r3, [r3, #1104]	; 0x450
 8005e98:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			dir1 = myDUTY.joint.trajectory[1].scurve.dir;
 8005e9c:	4b73      	ldr	r3, [pc, #460]	; (800606c <scaraFlowDuty+0x4f0>)
 8005e9e:	f893 35a8 	ldrb.w	r3, [r3, #1448]	; 0x5a8
 8005ea2:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
			dir2 = myDUTY.joint.trajectory[2].scurve.dir;
 8005ea6:	4b71      	ldr	r3, [pc, #452]	; (800606c <scaraFlowDuty+0x4f0>)
 8005ea8:	f893 3700 	ldrb.w	r3, [r3, #1792]	; 0x700
 8005eac:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
			dir3 = myDUTY.joint.trajectory[3].scurve.dir;
 8005eb0:	4b6e      	ldr	r3, [pc, #440]	; (800606c <scaraFlowDuty+0x4f0>)
 8005eb2:	f893 3858 	ldrb.w	r3, [r3, #2136]	; 0x858
 8005eb6:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
			s0 = myDUTY.joint.trajectory[0].scurve.s_current;
 8005eba:	4b6c      	ldr	r3, [pc, #432]	; (800606c <scaraFlowDuty+0x4f0>)
 8005ebc:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 8005ec0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005ec4:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
			s1 = myDUTY.joint.trajectory[1].scurve.s_current;
 8005ec8:	4b68      	ldr	r3, [pc, #416]	; (800606c <scaraFlowDuty+0x4f0>)
 8005eca:	f503 63ce 	add.w	r3, r3, #1648	; 0x670
 8005ece:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005ed2:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
			s2 = myDUTY.joint.trajectory[2].scurve.s_current;
 8005ed6:	4b65      	ldr	r3, [pc, #404]	; (800606c <scaraFlowDuty+0x4f0>)
 8005ed8:	f503 63f9 	add.w	r3, r3, #1992	; 0x7c8
 8005edc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005ee0:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
			s3 = myDUTY.joint.trajectory[3].scurve.s_current;
 8005ee4:	4b61      	ldr	r3, [pc, #388]	; (800606c <scaraFlowDuty+0x4f0>)
 8005ee6:	f503 6312 	add.w	r3, r3, #2336	; 0x920
 8005eea:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005eee:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
 8005ef2:	e001      	b.n	8005ef8 <scaraFlowDuty+0x37c>
		} else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 8005ef4:	2305      	movs	r3, #5
 8005ef6:	e0b4      	b.n	8006062 <scaraFlowDuty+0x4e6>
		}
		// Check init status
		if ( SCARA_STATUS_OK != status1) {
 8005ef8:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d002      	beq.n	8005f06 <scaraFlowDuty+0x38a>
			return status1;
 8005f00:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8005f04:	e0ad      	b.n	8006062 <scaraFlowDuty+0x4e6>
		}
		if ( SCARA_STATUS_OK != status2) {
 8005f06:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d002      	beq.n	8005f14 <scaraFlowDuty+0x398>
			return status2;
 8005f0e:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8005f12:	e0a6      	b.n	8006062 <scaraFlowDuty+0x4e6>
		}
		if ( SCARA_STATUS_OK != status3) {
 8005f14:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d002      	beq.n	8005f22 <scaraFlowDuty+0x3a6>
			return status3;
 8005f1c:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 8005f20:	e09f      	b.n	8006062 <scaraFlowDuty+0x4e6>
		}
		if ( SCARA_STATUS_OK != status4) {
 8005f22:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d002      	beq.n	8005f30 <scaraFlowDuty+0x3b4>
			return status4;
 8005f2a:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 8005f2e:	e098      	b.n	8006062 <scaraFlowDuty+0x4e6>
		}

		positionCompute.Theta1 	= myDUTY.joint.theta1_start + s0*dir0;
 8005f30:	4b4e      	ldr	r3, [pc, #312]	; (800606c <scaraFlowDuty+0x4f0>)
 8005f32:	f603 1328 	addw	r3, r3, #2344	; 0x928
 8005f36:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005f3a:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f7fa fb00 	bl	8000544 <__aeabi_i2d>
 8005f44:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8005f48:	f7fa fb66 	bl	8000618 <__aeabi_dmul>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	460b      	mov	r3, r1
 8005f50:	4620      	mov	r0, r4
 8005f52:	4629      	mov	r1, r5
 8005f54:	f7fa f9aa 	bl	80002ac <__adddf3>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	460c      	mov	r4, r1
 8005f5c:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
		positionCompute.Theta2 	= myDUTY.joint.theta2_start + s1*dir1;
 8005f60:	4b42      	ldr	r3, [pc, #264]	; (800606c <scaraFlowDuty+0x4f0>)
 8005f62:	f503 6313 	add.w	r3, r3, #2352	; 0x930
 8005f66:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005f6a:	f997 3076 	ldrsb.w	r3, [r7, #118]	; 0x76
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f7fa fae8 	bl	8000544 <__aeabi_i2d>
 8005f74:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8005f78:	f7fa fb4e 	bl	8000618 <__aeabi_dmul>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	460b      	mov	r3, r1
 8005f80:	4620      	mov	r0, r4
 8005f82:	4629      	mov	r1, r5
 8005f84:	f7fa f992 	bl	80002ac <__adddf3>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	460c      	mov	r4, r1
 8005f8c:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
		positionCompute.D3 		= myDUTY.joint.d3_start 	+ s2*dir2;
 8005f90:	4b36      	ldr	r3, [pc, #216]	; (800606c <scaraFlowDuty+0x4f0>)
 8005f92:	f603 1338 	addw	r3, r3, #2360	; 0x938
 8005f96:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005f9a:	f997 3075 	ldrsb.w	r3, [r7, #117]	; 0x75
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f7fa fad0 	bl	8000544 <__aeabi_i2d>
 8005fa4:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8005fa8:	f7fa fb36 	bl	8000618 <__aeabi_dmul>
 8005fac:	4602      	mov	r2, r0
 8005fae:	460b      	mov	r3, r1
 8005fb0:	4620      	mov	r0, r4
 8005fb2:	4629      	mov	r1, r5
 8005fb4:	f7fa f97a 	bl	80002ac <__adddf3>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	460c      	mov	r4, r1
 8005fbc:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
		positionCompute.Theta4 	= myDUTY.joint.theta4_start + s3*dir3;
 8005fc0:	4b2a      	ldr	r3, [pc, #168]	; (800606c <scaraFlowDuty+0x4f0>)
 8005fc2:	f503 6314 	add.w	r3, r3, #2368	; 0x940
 8005fc6:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005fca:	f997 3074 	ldrsb.w	r3, [r7, #116]	; 0x74
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f7fa fab8 	bl	8000544 <__aeabi_i2d>
 8005fd4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8005fd8:	f7fa fb1e 	bl	8000618 <__aeabi_dmul>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	460b      	mov	r3, r1
 8005fe0:	4620      	mov	r0, r4
 8005fe2:	4629      	mov	r1, r5
 8005fe4:	f7fa f962 	bl	80002ac <__adddf3>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	460c      	mov	r4, r1
 8005fec:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
		positionCompute.total_time = myDUTY.time_total;
 8005ff0:	4b1e      	ldr	r3, [pc, #120]	; (800606c <scaraFlowDuty+0x4f0>)
 8005ff2:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8005ff6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005ffa:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
		positionCompute.t		= time;
 8005ffe:	e9d7 3400 	ldrd	r3, r4, [r7]
 8006002:	e9c7 3408 	strd	r3, r4, [r7, #32]
		// Check workspace
		if( SCARA_STATUS_OK != scaraCheckWorkSpace4(positionCompute.Theta1,
 8006006:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 800600a:	ed97 6b16 	vldr	d6, [r7, #88]	; 0x58
 800600e:	ed97 5b18 	vldr	d5, [r7, #96]	; 0x60
 8006012:	ed97 4b1a 	vldr	d4, [r7, #104]	; 0x68
 8006016:	eeb0 3a44 	vmov.f32	s6, s8
 800601a:	eef0 3a64 	vmov.f32	s7, s9
 800601e:	eeb0 2a45 	vmov.f32	s4, s10
 8006022:	eef0 2a65 	vmov.f32	s5, s11
 8006026:	eeb0 1a46 	vmov.f32	s2, s12
 800602a:	eef0 1a66 	vmov.f32	s3, s13
 800602e:	eeb0 0a47 	vmov.f32	s0, s14
 8006032:	eef0 0a67 	vmov.f32	s1, s15
 8006036:	f001 f9c7 	bl	80073c8 <scaraCheckWorkSpace4>
 800603a:	4603      	mov	r3, r0
 800603c:	2b00      	cmp	r3, #0
 800603e:	d001      	beq.n	8006044 <scaraFlowDuty+0x4c8>
							 	 	 	  positionCompute.Theta2,
										  positionCompute.D3,
										  positionCompute.Theta4)) {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8006040:	2307      	movs	r3, #7
 8006042:	e00e      	b.n	8006062 <scaraFlowDuty+0x4e6>
		} else {
			memcpy(&positionNext, &positionCompute, sizeof(SCARA_PositionTypeDef));
 8006044:	4b0e      	ldr	r3, [pc, #56]	; (8006080 <scaraFlowDuty+0x504>)
 8006046:	4618      	mov	r0, r3
 8006048:	f107 0308 	add.w	r3, r7, #8
 800604c:	2268      	movs	r2, #104	; 0x68
 800604e:	4619      	mov	r1, r3
 8006050:	f00c fbbe 	bl	80127d0 <memcpy>
		}
		kinematicForward(&positionNext);
 8006054:	480a      	ldr	r0, [pc, #40]	; (8006080 <scaraFlowDuty+0x504>)
 8006056:	f7fc fdbb 	bl	8002bd0 <kinematicForward>
 800605a:	e001      	b.n	8006060 <scaraFlowDuty+0x4e4>

	} else {
		return SCARA_STATUS_ERROR_SPACE;
 800605c:	2302      	movs	r3, #2
 800605e:	e000      	b.n	8006062 <scaraFlowDuty+0x4e6>
	}

	return SCARA_STATUS_OK;
 8006060:	2300      	movs	r3, #0
}
 8006062:	4618      	mov	r0, r3
 8006064:	37d0      	adds	r7, #208	; 0xd0
 8006066:	46bd      	mov	sp, r7
 8006068:	bdb0      	pop	{r4, r5, r7, pc}
 800606a:	bf00      	nop
 800606c:	20005338 	.word	0x20005338
 8006070:	20005788 	.word	0x20005788
 8006074:	200058e0 	.word	0x200058e0
 8006078:	20005a38 	.word	0x20005a38
 800607c:	20005b90 	.word	0x20005b90
 8006080:	20005d58 	.word	0x20005d58
 8006084:	00000000 	.word	0x00000000

08006088 <scaraFlowLine>:

SCARA_StatusTypeDef	scaraFlowLine		(Path_Line_TypeDef *line, double s) {
 8006088:	b5b0      	push	{r4, r5, r7, lr}
 800608a:	b084      	sub	sp, #16
 800608c:	af00      	add	r7, sp, #0
 800608e:	60f8      	str	r0, [r7, #12]
 8006090:	ed87 0b00 	vstr	d0, [r7]
	// Avoid div with 0
	if ( line->total_s > 0.01) {
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800609a:	a33d      	add	r3, pc, #244	; (adr r3, 8006190 <scaraFlowLine+0x108>)
 800609c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a0:	f7fa fd4a 	bl	8000b38 <__aeabi_dcmpgt>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d05a      	beq.n	8006160 <scaraFlowLine+0xd8>
		line->x_current	 = line->x0 + line->denta_x*s/line->total_s;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	e9d3 4500 	ldrd	r4, r5, [r3]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80060b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060ba:	f7fa faad 	bl	8000618 <__aeabi_dmul>
 80060be:	4602      	mov	r2, r0
 80060c0:	460b      	mov	r3, r1
 80060c2:	4610      	mov	r0, r2
 80060c4:	4619      	mov	r1, r3
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80060cc:	f7fa fbce 	bl	800086c <__aeabi_ddiv>
 80060d0:	4602      	mov	r2, r0
 80060d2:	460b      	mov	r3, r1
 80060d4:	4620      	mov	r0, r4
 80060d6:	4629      	mov	r1, r5
 80060d8:	f7fa f8e8 	bl	80002ac <__adddf3>
 80060dc:	4603      	mov	r3, r0
 80060de:	460c      	mov	r4, r1
 80060e0:	68fa      	ldr	r2, [r7, #12]
 80060e2:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
		line->y_current	 = line->y0 + line->denta_y*s/line->total_s;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80060f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060f6:	f7fa fa8f 	bl	8000618 <__aeabi_dmul>
 80060fa:	4602      	mov	r2, r0
 80060fc:	460b      	mov	r3, r1
 80060fe:	4610      	mov	r0, r2
 8006100:	4619      	mov	r1, r3
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8006108:	f7fa fbb0 	bl	800086c <__aeabi_ddiv>
 800610c:	4602      	mov	r2, r0
 800610e:	460b      	mov	r3, r1
 8006110:	4620      	mov	r0, r4
 8006112:	4629      	mov	r1, r5
 8006114:	f7fa f8ca 	bl	80002ac <__adddf3>
 8006118:	4603      	mov	r3, r0
 800611a:	460c      	mov	r4, r1
 800611c:	68fa      	ldr	r2, [r7, #12]
 800611e:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
		line->z_current	 = line->z0 + line->denta_z*s/line->total_s;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800612e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006132:	f7fa fa71 	bl	8000618 <__aeabi_dmul>
 8006136:	4602      	mov	r2, r0
 8006138:	460b      	mov	r3, r1
 800613a:	4610      	mov	r0, r2
 800613c:	4619      	mov	r1, r3
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8006144:	f7fa fb92 	bl	800086c <__aeabi_ddiv>
 8006148:	4602      	mov	r2, r0
 800614a:	460b      	mov	r3, r1
 800614c:	4620      	mov	r0, r4
 800614e:	4629      	mov	r1, r5
 8006150:	f7fa f8ac 	bl	80002ac <__adddf3>
 8006154:	4603      	mov	r3, r0
 8006156:	460c      	mov	r4, r1
 8006158:	68fa      	ldr	r2, [r7, #12]
 800615a:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
 800615e:	e011      	b.n	8006184 <scaraFlowLine+0xfc>
	} else {
		line->x_current = line->x1;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8006166:	68fa      	ldr	r2, [r7, #12]
 8006168:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
		line->y_current = line->y1;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8006172:	68fa      	ldr	r2, [r7, #12]
 8006174:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
		line->z_current = line->z1;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 800617e:	68fa      	ldr	r2, [r7, #12]
 8006180:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
	}

	return SCARA_STATUS_OK;
 8006184:	2300      	movs	r3, #0
}
 8006186:	4618      	mov	r0, r3
 8006188:	3710      	adds	r7, #16
 800618a:	46bd      	mov	sp, r7
 800618c:	bdb0      	pop	{r4, r5, r7, pc}
 800618e:	bf00      	nop
 8006190:	47ae147b 	.word	0x47ae147b
 8006194:	3f847ae1 	.word	0x3f847ae1

08006198 <scaraFlowCircle>:

SCARA_StatusTypeDef	scaraFlowCircle		(Path_Circle_TypeDef *circle, double s) {
 8006198:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800619c:	b086      	sub	sp, #24
 800619e:	af00      	add	r7, sp, #0
 80061a0:	60f8      	str	r0, [r7, #12]
 80061a2:	ed87 0b00 	vstr	d0, [r7]
	double angle;
	angle = s/(circle->radius);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 80061ac:	461a      	mov	r2, r3
 80061ae:	4623      	mov	r3, r4
 80061b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80061b4:	f7fa fb5a 	bl	800086c <__aeabi_ddiv>
 80061b8:	4603      	mov	r3, r0
 80061ba:	460c      	mov	r4, r1
 80061bc:	e9c7 3404 	strd	r3, r4, [r7, #16]
	circle->x_current = circle->xi + circle->radius*cos(circle->angle_start + circle->dir*angle);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	e9d3 ab04 	ldrd	sl, fp, [r3, #16]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	f993 3000 	ldrsb.w	r3, [r3]
 80061d8:	4618      	mov	r0, r3
 80061da:	f7fa f9b3 	bl	8000544 <__aeabi_i2d>
 80061de:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80061e2:	f7fa fa19 	bl	8000618 <__aeabi_dmul>
 80061e6:	4602      	mov	r2, r0
 80061e8:	460b      	mov	r3, r1
 80061ea:	4650      	mov	r0, sl
 80061ec:	4659      	mov	r1, fp
 80061ee:	f7fa f85d 	bl	80002ac <__adddf3>
 80061f2:	4602      	mov	r2, r0
 80061f4:	460b      	mov	r3, r1
 80061f6:	ec43 2b17 	vmov	d7, r2, r3
 80061fa:	eeb0 0a47 	vmov.f32	s0, s14
 80061fe:	eef0 0a67 	vmov.f32	s1, s15
 8006202:	f010 fd15 	bl	8016c30 <cos>
 8006206:	ec53 2b10 	vmov	r2, r3, d0
 800620a:	4640      	mov	r0, r8
 800620c:	4649      	mov	r1, r9
 800620e:	f7fa fa03 	bl	8000618 <__aeabi_dmul>
 8006212:	4602      	mov	r2, r0
 8006214:	460b      	mov	r3, r1
 8006216:	4620      	mov	r0, r4
 8006218:	4629      	mov	r1, r5
 800621a:	f7fa f847 	bl	80002ac <__adddf3>
 800621e:	4603      	mov	r3, r0
 8006220:	460c      	mov	r4, r1
 8006222:	68fa      	ldr	r2, [r7, #12]
 8006224:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	circle->y_current = circle->yi + circle->radius*sin(circle->angle_start + circle->dir*angle);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	e9d3 ab04 	ldrd	sl, fp, [r3, #16]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f993 3000 	ldrsb.w	r3, [r3]
 8006240:	4618      	mov	r0, r3
 8006242:	f7fa f97f 	bl	8000544 <__aeabi_i2d>
 8006246:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800624a:	f7fa f9e5 	bl	8000618 <__aeabi_dmul>
 800624e:	4602      	mov	r2, r0
 8006250:	460b      	mov	r3, r1
 8006252:	4650      	mov	r0, sl
 8006254:	4659      	mov	r1, fp
 8006256:	f7fa f829 	bl	80002ac <__adddf3>
 800625a:	4602      	mov	r2, r0
 800625c:	460b      	mov	r3, r1
 800625e:	ec43 2b17 	vmov	d7, r2, r3
 8006262:	eeb0 0a47 	vmov.f32	s0, s14
 8006266:	eef0 0a67 	vmov.f32	s1, s15
 800626a:	f010 fd25 	bl	8016cb8 <sin>
 800626e:	ec53 2b10 	vmov	r2, r3, d0
 8006272:	4640      	mov	r0, r8
 8006274:	4649      	mov	r1, r9
 8006276:	f7fa f9cf 	bl	8000618 <__aeabi_dmul>
 800627a:	4602      	mov	r2, r0
 800627c:	460b      	mov	r3, r1
 800627e:	4620      	mov	r0, r4
 8006280:	4629      	mov	r1, r5
 8006282:	f7fa f813 	bl	80002ac <__adddf3>
 8006286:	4603      	mov	r3, r0
 8006288:	460c      	mov	r4, r1
 800628a:	68fa      	ldr	r2, [r7, #12]
 800628c:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
	circle->z_current = circle->zi; // XY plane
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8006296:	68fa      	ldr	r2, [r7, #12]
 8006298:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88

	return SCARA_STATUS_OK;
 800629c:	2300      	movs	r3, #0
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3718      	adds	r7, #24
 80062a2:	46bd      	mov	sp, r7
 80062a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080062a8 <scaraFlowLSPB>:

SCARA_StatusTypeDef	scaraFlowLSPB		(Trajectory_LSPB_TypeDef *lspb, double time) {
 80062a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80062ac:	b08b      	sub	sp, #44	; 0x2c
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	60f8      	str	r0, [r7, #12]
 80062b2:	ed87 0b00 	vstr	d0, [r7]
	double tf, td, ta;

	tf = lspb->Tf;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80062bc:	e9c7 2308 	strd	r2, r3, [r7, #32]
	td = lspb->Td;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80062c6:	e9c7 2306 	strd	r2, r3, [r7, #24]
	ta = lspb->Ta;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80062d0:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Accelerate
	if ( 0.0f <= time && time <= ta) {
 80062d4:	f04f 0200 	mov.w	r2, #0
 80062d8:	f04f 0300 	mov.w	r3, #0
 80062dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80062e0:	f7fa fc20 	bl	8000b24 <__aeabi_dcmpge>
 80062e4:	4603      	mov	r3, r0
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d05b      	beq.n	80063a2 <scaraFlowLSPB+0xfa>
 80062ea:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80062ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 80062f2:	f7fa fc0d 	bl	8000b10 <__aeabi_dcmple>
 80062f6:	4603      	mov	r3, r0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d052      	beq.n	80063a2 <scaraFlowLSPB+0xfa>
		lspb->a_current		=	lspb->a_design;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8006302:	68fa      	ldr	r2, [r7, #12]
 8006304:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		lspb->v_current		=	lspb->v0 + lspb->a_design*time;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8006314:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006318:	f7fa f97e 	bl	8000618 <__aeabi_dmul>
 800631c:	4602      	mov	r2, r0
 800631e:	460b      	mov	r3, r1
 8006320:	4620      	mov	r0, r4
 8006322:	4629      	mov	r1, r5
 8006324:	f7f9 ffc2 	bl	80002ac <__adddf3>
 8006328:	4603      	mov	r3, r0
 800632a:	460c      	mov	r4, r1
 800632c:	68fa      	ldr	r2, [r7, #12]
 800632e:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->s0 + lspb->v0*time + 0.5*lspb->a_design*time*time;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800633e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006342:	f7fa f969 	bl	8000618 <__aeabi_dmul>
 8006346:	4602      	mov	r2, r0
 8006348:	460b      	mov	r3, r1
 800634a:	4620      	mov	r0, r4
 800634c:	4629      	mov	r1, r5
 800634e:	f7f9 ffad 	bl	80002ac <__adddf3>
 8006352:	4603      	mov	r3, r0
 8006354:	460c      	mov	r4, r1
 8006356:	4625      	mov	r5, r4
 8006358:	461c      	mov	r4, r3
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8006360:	f04f 0200 	mov.w	r2, #0
 8006364:	4ba5      	ldr	r3, [pc, #660]	; (80065fc <scaraFlowLSPB+0x354>)
 8006366:	f7fa f957 	bl	8000618 <__aeabi_dmul>
 800636a:	4602      	mov	r2, r0
 800636c:	460b      	mov	r3, r1
 800636e:	4610      	mov	r0, r2
 8006370:	4619      	mov	r1, r3
 8006372:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006376:	f7fa f94f 	bl	8000618 <__aeabi_dmul>
 800637a:	4602      	mov	r2, r0
 800637c:	460b      	mov	r3, r1
 800637e:	4610      	mov	r0, r2
 8006380:	4619      	mov	r1, r3
 8006382:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006386:	f7fa f947 	bl	8000618 <__aeabi_dmul>
 800638a:	4602      	mov	r2, r0
 800638c:	460b      	mov	r3, r1
 800638e:	4620      	mov	r0, r4
 8006390:	4629      	mov	r1, r5
 8006392:	f7f9 ff8b 	bl	80002ac <__adddf3>
 8006396:	4603      	mov	r3, r0
 8006398:	460c      	mov	r4, r1
 800639a:	68fa      	ldr	r2, [r7, #12]
 800639c:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 80063a0:	e125      	b.n	80065ee <scaraFlowLSPB+0x346>
	// Constant velocity
	} else if (ta <= time && time <= (tf - td)) {
 80063a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063a6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80063aa:	f7fa fbb1 	bl	8000b10 <__aeabi_dcmple>
 80063ae:	4603      	mov	r3, r0
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d05e      	beq.n	8006472 <scaraFlowLSPB+0x1ca>
 80063b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063b8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80063bc:	f7f9 ff74 	bl	80002a8 <__aeabi_dsub>
 80063c0:	4602      	mov	r2, r0
 80063c2:	460b      	mov	r3, r1
 80063c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80063c8:	f7fa fba2 	bl	8000b10 <__aeabi_dcmple>
 80063cc:	4603      	mov	r3, r0
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d04f      	beq.n	8006472 <scaraFlowLSPB+0x1ca>
		lspb->a_current		=	0;
 80063d2:	68fa      	ldr	r2, [r7, #12]
 80063d4:	f04f 0300 	mov.w	r3, #0
 80063d8:	f04f 0400 	mov.w	r4, #0
 80063dc:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		lspb->v_current		=	lspb->v_lim;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 80063e6:	68fa      	ldr	r2, [r7, #12]
 80063e8:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->s0 + lspb->v0*ta/2 + lspb->v_lim*(time - ta/2);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80063f8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80063fc:	f7fa f90c 	bl	8000618 <__aeabi_dmul>
 8006400:	4602      	mov	r2, r0
 8006402:	460b      	mov	r3, r1
 8006404:	4610      	mov	r0, r2
 8006406:	4619      	mov	r1, r3
 8006408:	f04f 0200 	mov.w	r2, #0
 800640c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006410:	f7fa fa2c 	bl	800086c <__aeabi_ddiv>
 8006414:	4602      	mov	r2, r0
 8006416:	460b      	mov	r3, r1
 8006418:	4620      	mov	r0, r4
 800641a:	4629      	mov	r1, r5
 800641c:	f7f9 ff46 	bl	80002ac <__adddf3>
 8006420:	4603      	mov	r3, r0
 8006422:	460c      	mov	r4, r1
 8006424:	4698      	mov	r8, r3
 8006426:	46a1      	mov	r9, r4
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 800642e:	f04f 0200 	mov.w	r2, #0
 8006432:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006436:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800643a:	f7fa fa17 	bl	800086c <__aeabi_ddiv>
 800643e:	4602      	mov	r2, r0
 8006440:	460b      	mov	r3, r1
 8006442:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006446:	f7f9 ff2f 	bl	80002a8 <__aeabi_dsub>
 800644a:	4602      	mov	r2, r0
 800644c:	460b      	mov	r3, r1
 800644e:	4620      	mov	r0, r4
 8006450:	4629      	mov	r1, r5
 8006452:	f7fa f8e1 	bl	8000618 <__aeabi_dmul>
 8006456:	4603      	mov	r3, r0
 8006458:	460c      	mov	r4, r1
 800645a:	461a      	mov	r2, r3
 800645c:	4623      	mov	r3, r4
 800645e:	4640      	mov	r0, r8
 8006460:	4649      	mov	r1, r9
 8006462:	f7f9 ff23 	bl	80002ac <__adddf3>
 8006466:	4603      	mov	r3, r0
 8006468:	460c      	mov	r4, r1
 800646a:	68fa      	ldr	r2, [r7, #12]
 800646c:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 8006470:	e0bd      	b.n	80065ee <scaraFlowLSPB+0x346>
	// Decelerate
	} else if ((tf - td) <= time && time <= tf) {
 8006472:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006476:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800647a:	f7f9 ff15 	bl	80002a8 <__aeabi_dsub>
 800647e:	4602      	mov	r2, r0
 8006480:	460b      	mov	r3, r1
 8006482:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006486:	f7fa fb4d 	bl	8000b24 <__aeabi_dcmpge>
 800648a:	4603      	mov	r3, r0
 800648c:	2b00      	cmp	r3, #0
 800648e:	f000 809a 	beq.w	80065c6 <scaraFlowLSPB+0x31e>
 8006492:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006496:	e9d7 0100 	ldrd	r0, r1, [r7]
 800649a:	f7fa fb39 	bl	8000b10 <__aeabi_dcmple>
 800649e:	4603      	mov	r3, r0
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	f000 8090 	beq.w	80065c6 <scaraFlowLSPB+0x31e>
		lspb->a_current		=	-lspb->a_design;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80064ac:	4614      	mov	r4, r2
 80064ae:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	e9c3 451a 	strd	r4, r5, [r3, #104]	; 0x68
		lspb->v_current		=	lspb->v1 + lspb->a_design*(tf - time);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	e9d3 890c 	ldrd	r8, r9, [r3, #48]	; 0x30
 80064c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064c8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80064cc:	f7f9 feec 	bl	80002a8 <__aeabi_dsub>
 80064d0:	4602      	mov	r2, r0
 80064d2:	460b      	mov	r3, r1
 80064d4:	4640      	mov	r0, r8
 80064d6:	4649      	mov	r1, r9
 80064d8:	f7fa f89e 	bl	8000618 <__aeabi_dmul>
 80064dc:	4602      	mov	r2, r0
 80064de:	460b      	mov	r3, r1
 80064e0:	4620      	mov	r0, r4
 80064e2:	4629      	mov	r1, r5
 80064e4:	f7f9 fee2 	bl	80002ac <__adddf3>
 80064e8:	4603      	mov	r3, r0
 80064ea:	460c      	mov	r4, r1
 80064ec:	68fa      	ldr	r2, [r7, #12]
 80064ee:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->s1 - lspb->v1*(tf - time)
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 80064fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006502:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006506:	f7f9 fecf 	bl	80002a8 <__aeabi_dsub>
 800650a:	4602      	mov	r2, r0
 800650c:	460b      	mov	r3, r1
 800650e:	4640      	mov	r0, r8
 8006510:	4649      	mov	r1, r9
 8006512:	f7fa f881 	bl	8000618 <__aeabi_dmul>
 8006516:	4602      	mov	r2, r0
 8006518:	460b      	mov	r3, r1
 800651a:	4620      	mov	r0, r4
 800651c:	4629      	mov	r1, r5
 800651e:	f7f9 fec3 	bl	80002a8 <__aeabi_dsub>
 8006522:	4603      	mov	r3, r0
 8006524:	460c      	mov	r4, r1
 8006526:	461d      	mov	r5, r3
 8006528:	4626      	mov	r6, r4
								- (lspb->v_lim - lspb->v1)*(tf - time)*(tf - time)/(2*td);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8006536:	461a      	mov	r2, r3
 8006538:	4623      	mov	r3, r4
 800653a:	f7f9 feb5 	bl	80002a8 <__aeabi_dsub>
 800653e:	4603      	mov	r3, r0
 8006540:	460c      	mov	r4, r1
 8006542:	4698      	mov	r8, r3
 8006544:	46a1      	mov	r9, r4
 8006546:	e9d7 2300 	ldrd	r2, r3, [r7]
 800654a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800654e:	f7f9 feab 	bl	80002a8 <__aeabi_dsub>
 8006552:	4603      	mov	r3, r0
 8006554:	460c      	mov	r4, r1
 8006556:	461a      	mov	r2, r3
 8006558:	4623      	mov	r3, r4
 800655a:	4640      	mov	r0, r8
 800655c:	4649      	mov	r1, r9
 800655e:	f7fa f85b 	bl	8000618 <__aeabi_dmul>
 8006562:	4603      	mov	r3, r0
 8006564:	460c      	mov	r4, r1
 8006566:	4698      	mov	r8, r3
 8006568:	46a1      	mov	r9, r4
 800656a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800656e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006572:	f7f9 fe99 	bl	80002a8 <__aeabi_dsub>
 8006576:	4603      	mov	r3, r0
 8006578:	460c      	mov	r4, r1
 800657a:	461a      	mov	r2, r3
 800657c:	4623      	mov	r3, r4
 800657e:	4640      	mov	r0, r8
 8006580:	4649      	mov	r1, r9
 8006582:	f7fa f849 	bl	8000618 <__aeabi_dmul>
 8006586:	4603      	mov	r3, r0
 8006588:	460c      	mov	r4, r1
 800658a:	4698      	mov	r8, r3
 800658c:	46a1      	mov	r9, r4
 800658e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006592:	4602      	mov	r2, r0
 8006594:	460b      	mov	r3, r1
 8006596:	f7f9 fe89 	bl	80002ac <__adddf3>
 800659a:	4603      	mov	r3, r0
 800659c:	460c      	mov	r4, r1
 800659e:	461a      	mov	r2, r3
 80065a0:	4623      	mov	r3, r4
 80065a2:	4640      	mov	r0, r8
 80065a4:	4649      	mov	r1, r9
 80065a6:	f7fa f961 	bl	800086c <__aeabi_ddiv>
 80065aa:	4603      	mov	r3, r0
 80065ac:	460c      	mov	r4, r1
 80065ae:	461a      	mov	r2, r3
 80065b0:	4623      	mov	r3, r4
 80065b2:	4628      	mov	r0, r5
 80065b4:	4631      	mov	r1, r6
 80065b6:	f7f9 fe77 	bl	80002a8 <__aeabi_dsub>
 80065ba:	4603      	mov	r3, r0
 80065bc:	460c      	mov	r4, r1
		lspb->s_current		=	lspb->s1 - lspb->v1*(tf - time)
 80065be:	68fa      	ldr	r2, [r7, #12]
 80065c0:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 80065c4:	e013      	b.n	80065ee <scaraFlowLSPB+0x346>
	} else {
		lspb->a_current 	=	0;
 80065c6:	68fa      	ldr	r2, [r7, #12]
 80065c8:	f04f 0300 	mov.w	r3, #0
 80065cc:	f04f 0400 	mov.w	r4, #0
 80065d0:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		lspb->v_current		=	0;
 80065d4:	68fa      	ldr	r2, [r7, #12]
 80065d6:	f04f 0300 	mov.w	r3, #0
 80065da:	f04f 0400 	mov.w	r4, #0
 80065de:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->total_s;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 80065e8:	68fa      	ldr	r2, [r7, #12]
 80065ea:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	}

	return SCARA_STATUS_OK;
 80065ee:	2300      	movs	r3, #0
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	372c      	adds	r7, #44	; 0x2c
 80065f4:	46bd      	mov	sp, r7
 80065f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80065fa:	bf00      	nop
 80065fc:	3fe00000 	.word	0x3fe00000

08006600 <scaraFLowScurve>:

SCARA_StatusTypeDef	scaraFLowScurve		(Trajectory_Scurve_TypeDef *scurve, double time) {
 8006600:	b5b0      	push	{r4, r5, r7, lr}
 8006602:	b092      	sub	sp, #72	; 0x48
 8006604:	af00      	add	r7, sp, #0
 8006606:	6278      	str	r0, [r7, #36]	; 0x24
 8006608:	ed87 0b06 	vstr	d0, [r7, #24]
	double j_max, tm, tc, t;

	j_max = scurve->j_max;
 800660c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8006612:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	tm	  = scurve->Tm;
 8006616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006618:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800661c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	tc	  = scurve->Tc;
 8006620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006622:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8006626:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	 // SCURVE 4 PHASE: tc = 0;
	 if ( 4 == scurve->num_of_phase) {
 800662a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006630:	2b04      	cmp	r3, #4
 8006632:	f040 8321 	bne.w	8006c78 <scaraFLowScurve+0x678>
		 // Phase 1
		 if ( (0.0f <= time) && ( time < tm)) {
 8006636:	f04f 0200 	mov.w	r2, #0
 800663a:	f04f 0300 	mov.w	r3, #0
 800663e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006642:	f7fa fa6f 	bl	8000b24 <__aeabi_dcmpge>
 8006646:	4603      	mov	r3, r0
 8006648:	2b00      	cmp	r3, #0
 800664a:	d059      	beq.n	8006700 <scaraFLowScurve+0x100>
 800664c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006650:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006654:	f7fa fa52 	bl	8000afc <__aeabi_dcmplt>
 8006658:	4603      	mov	r3, r0
 800665a:	2b00      	cmp	r3, #0
 800665c:	d050      	beq.n	8006700 <scaraFLowScurve+0x100>
			 t = time;
 800665e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8006662:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	= 	j_max*t;
 8006666:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800666a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800666e:	f7f9 ffd3 	bl	8000618 <__aeabi_dmul>
 8006672:	4603      	mov	r3, r0
 8006674:	460c      	mov	r4, r1
 8006676:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006678:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	= 	0.5*j_max*t*t;
 800667c:	f04f 0200 	mov.w	r2, #0
 8006680:	4b93      	ldr	r3, [pc, #588]	; (80068d0 <scaraFLowScurve+0x2d0>)
 8006682:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006686:	f7f9 ffc7 	bl	8000618 <__aeabi_dmul>
 800668a:	4603      	mov	r3, r0
 800668c:	460c      	mov	r4, r1
 800668e:	4618      	mov	r0, r3
 8006690:	4621      	mov	r1, r4
 8006692:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006696:	f7f9 ffbf 	bl	8000618 <__aeabi_dmul>
 800669a:	4603      	mov	r3, r0
 800669c:	460c      	mov	r4, r1
 800669e:	4618      	mov	r0, r3
 80066a0:	4621      	mov	r1, r4
 80066a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80066a6:	f7f9 ffb7 	bl	8000618 <__aeabi_dmul>
 80066aa:	4603      	mov	r3, r0
 80066ac:	460c      	mov	r4, r1
 80066ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066b0:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current 	= 	j_max*t*t*t/6;
 80066b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80066b8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80066bc:	f7f9 ffac 	bl	8000618 <__aeabi_dmul>
 80066c0:	4603      	mov	r3, r0
 80066c2:	460c      	mov	r4, r1
 80066c4:	4618      	mov	r0, r3
 80066c6:	4621      	mov	r1, r4
 80066c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80066cc:	f7f9 ffa4 	bl	8000618 <__aeabi_dmul>
 80066d0:	4603      	mov	r3, r0
 80066d2:	460c      	mov	r4, r1
 80066d4:	4618      	mov	r0, r3
 80066d6:	4621      	mov	r1, r4
 80066d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80066dc:	f7f9 ff9c 	bl	8000618 <__aeabi_dmul>
 80066e0:	4603      	mov	r3, r0
 80066e2:	460c      	mov	r4, r1
 80066e4:	4618      	mov	r0, r3
 80066e6:	4621      	mov	r1, r4
 80066e8:	f04f 0200 	mov.w	r2, #0
 80066ec:	4b79      	ldr	r3, [pc, #484]	; (80068d4 <scaraFLowScurve+0x2d4>)
 80066ee:	f7fa f8bd 	bl	800086c <__aeabi_ddiv>
 80066f2:	4603      	mov	r3, r0
 80066f4:	460c      	mov	r4, r1
 80066f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066f8:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 80066fc:	f000 be56 	b.w	80073ac <scaraFLowScurve+0xdac>
		 // Phase 2
		 } else if ( (tm <= time) && ( time < (2*tm) ) ) {
 8006700:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006704:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006708:	f7fa fa02 	bl	8000b10 <__aeabi_dcmple>
 800670c:	4603      	mov	r3, r0
 800670e:	2b00      	cmp	r3, #0
 8006710:	f000 80e2 	beq.w	80068d8 <scaraFLowScurve+0x2d8>
 8006714:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006718:	4602      	mov	r2, r0
 800671a:	460b      	mov	r3, r1
 800671c:	f7f9 fdc6 	bl	80002ac <__adddf3>
 8006720:	4603      	mov	r3, r0
 8006722:	460c      	mov	r4, r1
 8006724:	461a      	mov	r2, r3
 8006726:	4623      	mov	r3, r4
 8006728:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800672c:	f7fa f9e6 	bl	8000afc <__aeabi_dcmplt>
 8006730:	4603      	mov	r3, r0
 8006732:	2b00      	cmp	r3, #0
 8006734:	f000 80d0 	beq.w	80068d8 <scaraFLowScurve+0x2d8>
			 t = time - tm;
 8006738:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800673c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006740:	f7f9 fdb2 	bl	80002a8 <__aeabi_dsub>
 8006744:	4603      	mov	r3, r0
 8006746:	460c      	mov	r4, r1
 8006748:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	= 	j_max*tm - j_max*t;
 800674c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006750:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006754:	f7f9 ff60 	bl	8000618 <__aeabi_dmul>
 8006758:	4603      	mov	r3, r0
 800675a:	460c      	mov	r4, r1
 800675c:	4625      	mov	r5, r4
 800675e:	461c      	mov	r4, r3
 8006760:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006764:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006768:	f7f9 ff56 	bl	8000618 <__aeabi_dmul>
 800676c:	4602      	mov	r2, r0
 800676e:	460b      	mov	r3, r1
 8006770:	4620      	mov	r0, r4
 8006772:	4629      	mov	r1, r5
 8006774:	f7f9 fd98 	bl	80002a8 <__aeabi_dsub>
 8006778:	4603      	mov	r3, r0
 800677a:	460c      	mov	r4, r1
 800677c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800677e:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current 	= 	scurve->v_1 + j_max*tm*t - 0.5*j_max*t*t;
 8006782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006784:	e9d3 451e 	ldrd	r4, r5, [r3, #120]	; 0x78
 8006788:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800678c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006790:	f7f9 ff42 	bl	8000618 <__aeabi_dmul>
 8006794:	4602      	mov	r2, r0
 8006796:	460b      	mov	r3, r1
 8006798:	4610      	mov	r0, r2
 800679a:	4619      	mov	r1, r3
 800679c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80067a0:	f7f9 ff3a 	bl	8000618 <__aeabi_dmul>
 80067a4:	4602      	mov	r2, r0
 80067a6:	460b      	mov	r3, r1
 80067a8:	4620      	mov	r0, r4
 80067aa:	4629      	mov	r1, r5
 80067ac:	f7f9 fd7e 	bl	80002ac <__adddf3>
 80067b0:	4603      	mov	r3, r0
 80067b2:	460c      	mov	r4, r1
 80067b4:	4625      	mov	r5, r4
 80067b6:	461c      	mov	r4, r3
 80067b8:	f04f 0200 	mov.w	r2, #0
 80067bc:	4b44      	ldr	r3, [pc, #272]	; (80068d0 <scaraFLowScurve+0x2d0>)
 80067be:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80067c2:	f7f9 ff29 	bl	8000618 <__aeabi_dmul>
 80067c6:	4602      	mov	r2, r0
 80067c8:	460b      	mov	r3, r1
 80067ca:	4610      	mov	r0, r2
 80067cc:	4619      	mov	r1, r3
 80067ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80067d2:	f7f9 ff21 	bl	8000618 <__aeabi_dmul>
 80067d6:	4602      	mov	r2, r0
 80067d8:	460b      	mov	r3, r1
 80067da:	4610      	mov	r0, r2
 80067dc:	4619      	mov	r1, r3
 80067de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80067e2:	f7f9 ff19 	bl	8000618 <__aeabi_dmul>
 80067e6:	4602      	mov	r2, r0
 80067e8:	460b      	mov	r3, r1
 80067ea:	4620      	mov	r0, r4
 80067ec:	4629      	mov	r1, r5
 80067ee:	f7f9 fd5b 	bl	80002a8 <__aeabi_dsub>
 80067f2:	4603      	mov	r3, r0
 80067f4:	460c      	mov	r4, r1
 80067f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067f8:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current 	=	scurve->s_1 + scurve->v_1*t + 0.5*j_max*tm*t*t - j_max*t*t*t/6;
 80067fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fe:	e9d3 4520 	ldrd	r4, r5, [r3, #128]	; 0x80
 8006802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006804:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8006808:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800680c:	f7f9 ff04 	bl	8000618 <__aeabi_dmul>
 8006810:	4602      	mov	r2, r0
 8006812:	460b      	mov	r3, r1
 8006814:	4620      	mov	r0, r4
 8006816:	4629      	mov	r1, r5
 8006818:	f7f9 fd48 	bl	80002ac <__adddf3>
 800681c:	4603      	mov	r3, r0
 800681e:	460c      	mov	r4, r1
 8006820:	4625      	mov	r5, r4
 8006822:	461c      	mov	r4, r3
 8006824:	f04f 0200 	mov.w	r2, #0
 8006828:	4b29      	ldr	r3, [pc, #164]	; (80068d0 <scaraFLowScurve+0x2d0>)
 800682a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800682e:	f7f9 fef3 	bl	8000618 <__aeabi_dmul>
 8006832:	4602      	mov	r2, r0
 8006834:	460b      	mov	r3, r1
 8006836:	4610      	mov	r0, r2
 8006838:	4619      	mov	r1, r3
 800683a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800683e:	f7f9 feeb 	bl	8000618 <__aeabi_dmul>
 8006842:	4602      	mov	r2, r0
 8006844:	460b      	mov	r3, r1
 8006846:	4610      	mov	r0, r2
 8006848:	4619      	mov	r1, r3
 800684a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800684e:	f7f9 fee3 	bl	8000618 <__aeabi_dmul>
 8006852:	4602      	mov	r2, r0
 8006854:	460b      	mov	r3, r1
 8006856:	4610      	mov	r0, r2
 8006858:	4619      	mov	r1, r3
 800685a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800685e:	f7f9 fedb 	bl	8000618 <__aeabi_dmul>
 8006862:	4602      	mov	r2, r0
 8006864:	460b      	mov	r3, r1
 8006866:	4620      	mov	r0, r4
 8006868:	4629      	mov	r1, r5
 800686a:	f7f9 fd1f 	bl	80002ac <__adddf3>
 800686e:	4603      	mov	r3, r0
 8006870:	460c      	mov	r4, r1
 8006872:	4625      	mov	r5, r4
 8006874:	461c      	mov	r4, r3
 8006876:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800687a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800687e:	f7f9 fecb 	bl	8000618 <__aeabi_dmul>
 8006882:	4602      	mov	r2, r0
 8006884:	460b      	mov	r3, r1
 8006886:	4610      	mov	r0, r2
 8006888:	4619      	mov	r1, r3
 800688a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800688e:	f7f9 fec3 	bl	8000618 <__aeabi_dmul>
 8006892:	4602      	mov	r2, r0
 8006894:	460b      	mov	r3, r1
 8006896:	4610      	mov	r0, r2
 8006898:	4619      	mov	r1, r3
 800689a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800689e:	f7f9 febb 	bl	8000618 <__aeabi_dmul>
 80068a2:	4602      	mov	r2, r0
 80068a4:	460b      	mov	r3, r1
 80068a6:	4610      	mov	r0, r2
 80068a8:	4619      	mov	r1, r3
 80068aa:	f04f 0200 	mov.w	r2, #0
 80068ae:	4b09      	ldr	r3, [pc, #36]	; (80068d4 <scaraFLowScurve+0x2d4>)
 80068b0:	f7f9 ffdc 	bl	800086c <__aeabi_ddiv>
 80068b4:	4602      	mov	r2, r0
 80068b6:	460b      	mov	r3, r1
 80068b8:	4620      	mov	r0, r4
 80068ba:	4629      	mov	r1, r5
 80068bc:	f7f9 fcf4 	bl	80002a8 <__aeabi_dsub>
 80068c0:	4603      	mov	r3, r0
 80068c2:	460c      	mov	r4, r1
 80068c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068c6:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 80068ca:	f000 bd6f 	b.w	80073ac <scaraFLowScurve+0xdac>
 80068ce:	bf00      	nop
 80068d0:	3fe00000 	.word	0x3fe00000
 80068d4:	40180000 	.word	0x40180000
		 // Phase 3: does not exist
		 // Phase 4
		 } else if ( ((2*tm) <= time) && ( time < (3*tm)) ) {
 80068d8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80068dc:	4602      	mov	r2, r0
 80068de:	460b      	mov	r3, r1
 80068e0:	f7f9 fce4 	bl	80002ac <__adddf3>
 80068e4:	4603      	mov	r3, r0
 80068e6:	460c      	mov	r4, r1
 80068e8:	461a      	mov	r2, r3
 80068ea:	4623      	mov	r3, r4
 80068ec:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80068f0:	f7fa f918 	bl	8000b24 <__aeabi_dcmpge>
 80068f4:	4603      	mov	r3, r0
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	f000 80a2 	beq.w	8006a40 <scaraFLowScurve+0x440>
 80068fc:	f04f 0200 	mov.w	r2, #0
 8006900:	4b4c      	ldr	r3, [pc, #304]	; (8006a34 <scaraFLowScurve+0x434>)
 8006902:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006906:	f7f9 fe87 	bl	8000618 <__aeabi_dmul>
 800690a:	4603      	mov	r3, r0
 800690c:	460c      	mov	r4, r1
 800690e:	461a      	mov	r2, r3
 8006910:	4623      	mov	r3, r4
 8006912:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006916:	f7fa f8f1 	bl	8000afc <__aeabi_dcmplt>
 800691a:	4603      	mov	r3, r0
 800691c:	2b00      	cmp	r3, #0
 800691e:	f000 808f 	beq.w	8006a40 <scaraFLowScurve+0x440>
			 t = time - 2*tm;
 8006922:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006926:	4602      	mov	r2, r0
 8006928:	460b      	mov	r3, r1
 800692a:	f7f9 fcbf 	bl	80002ac <__adddf3>
 800692e:	4603      	mov	r3, r0
 8006930:	460c      	mov	r4, r1
 8006932:	461a      	mov	r2, r3
 8006934:	4623      	mov	r3, r4
 8006936:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800693a:	f7f9 fcb5 	bl	80002a8 <__aeabi_dsub>
 800693e:	4603      	mov	r3, r0
 8006940:	460c      	mov	r4, r1
 8006942:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	=	-j_max*t;
 8006946:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006948:	613b      	str	r3, [r7, #16]
 800694a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800694c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006950:	617b      	str	r3, [r7, #20]
 8006952:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006956:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800695a:	f7f9 fe5d 	bl	8000618 <__aeabi_dmul>
 800695e:	4603      	mov	r3, r0
 8006960:	460c      	mov	r4, r1
 8006962:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006964:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_2 - 0.5*j_max*t*t;
 8006968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696a:	e9d3 4522 	ldrd	r4, r5, [r3, #136]	; 0x88
 800696e:	f04f 0200 	mov.w	r2, #0
 8006972:	4b31      	ldr	r3, [pc, #196]	; (8006a38 <scaraFLowScurve+0x438>)
 8006974:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006978:	f7f9 fe4e 	bl	8000618 <__aeabi_dmul>
 800697c:	4602      	mov	r2, r0
 800697e:	460b      	mov	r3, r1
 8006980:	4610      	mov	r0, r2
 8006982:	4619      	mov	r1, r3
 8006984:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006988:	f7f9 fe46 	bl	8000618 <__aeabi_dmul>
 800698c:	4602      	mov	r2, r0
 800698e:	460b      	mov	r3, r1
 8006990:	4610      	mov	r0, r2
 8006992:	4619      	mov	r1, r3
 8006994:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006998:	f7f9 fe3e 	bl	8000618 <__aeabi_dmul>
 800699c:	4602      	mov	r2, r0
 800699e:	460b      	mov	r3, r1
 80069a0:	4620      	mov	r0, r4
 80069a2:	4629      	mov	r1, r5
 80069a4:	f7f9 fc80 	bl	80002a8 <__aeabi_dsub>
 80069a8:	4603      	mov	r3, r0
 80069aa:	460c      	mov	r4, r1
 80069ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069ae:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_2 + scurve->v_2*t - j_max*t*t*t/6;
 80069b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b4:	e9d3 4524 	ldrd	r4, r5, [r3, #144]	; 0x90
 80069b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ba:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 80069be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80069c2:	f7f9 fe29 	bl	8000618 <__aeabi_dmul>
 80069c6:	4602      	mov	r2, r0
 80069c8:	460b      	mov	r3, r1
 80069ca:	4620      	mov	r0, r4
 80069cc:	4629      	mov	r1, r5
 80069ce:	f7f9 fc6d 	bl	80002ac <__adddf3>
 80069d2:	4603      	mov	r3, r0
 80069d4:	460c      	mov	r4, r1
 80069d6:	4625      	mov	r5, r4
 80069d8:	461c      	mov	r4, r3
 80069da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80069de:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80069e2:	f7f9 fe19 	bl	8000618 <__aeabi_dmul>
 80069e6:	4602      	mov	r2, r0
 80069e8:	460b      	mov	r3, r1
 80069ea:	4610      	mov	r0, r2
 80069ec:	4619      	mov	r1, r3
 80069ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80069f2:	f7f9 fe11 	bl	8000618 <__aeabi_dmul>
 80069f6:	4602      	mov	r2, r0
 80069f8:	460b      	mov	r3, r1
 80069fa:	4610      	mov	r0, r2
 80069fc:	4619      	mov	r1, r3
 80069fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006a02:	f7f9 fe09 	bl	8000618 <__aeabi_dmul>
 8006a06:	4602      	mov	r2, r0
 8006a08:	460b      	mov	r3, r1
 8006a0a:	4610      	mov	r0, r2
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	f04f 0200 	mov.w	r2, #0
 8006a12:	4b0a      	ldr	r3, [pc, #40]	; (8006a3c <scaraFLowScurve+0x43c>)
 8006a14:	f7f9 ff2a 	bl	800086c <__aeabi_ddiv>
 8006a18:	4602      	mov	r2, r0
 8006a1a:	460b      	mov	r3, r1
 8006a1c:	4620      	mov	r0, r4
 8006a1e:	4629      	mov	r1, r5
 8006a20:	f7f9 fc42 	bl	80002a8 <__aeabi_dsub>
 8006a24:	4603      	mov	r3, r0
 8006a26:	460c      	mov	r4, r1
 8006a28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a2a:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8006a2e:	f000 bcbd 	b.w	80073ac <scaraFLowScurve+0xdac>
 8006a32:	bf00      	nop
 8006a34:	40080000 	.word	0x40080000
 8006a38:	3fe00000 	.word	0x3fe00000
 8006a3c:	40180000 	.word	0x40180000
		 // Phase 5
		 } else if ( ((3*tm) <= time) && ( time < (4*tm)) ) {
 8006a40:	f04f 0200 	mov.w	r2, #0
 8006a44:	4b88      	ldr	r3, [pc, #544]	; (8006c68 <scaraFLowScurve+0x668>)
 8006a46:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006a4a:	f7f9 fde5 	bl	8000618 <__aeabi_dmul>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	460c      	mov	r4, r1
 8006a52:	461a      	mov	r2, r3
 8006a54:	4623      	mov	r3, r4
 8006a56:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006a5a:	f7fa f863 	bl	8000b24 <__aeabi_dcmpge>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	f000 80ec 	beq.w	8006c3e <scaraFLowScurve+0x63e>
 8006a66:	f04f 0200 	mov.w	r2, #0
 8006a6a:	4b80      	ldr	r3, [pc, #512]	; (8006c6c <scaraFLowScurve+0x66c>)
 8006a6c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006a70:	f7f9 fdd2 	bl	8000618 <__aeabi_dmul>
 8006a74:	4603      	mov	r3, r0
 8006a76:	460c      	mov	r4, r1
 8006a78:	461a      	mov	r2, r3
 8006a7a:	4623      	mov	r3, r4
 8006a7c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006a80:	f7fa f83c 	bl	8000afc <__aeabi_dcmplt>
 8006a84:	4603      	mov	r3, r0
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	f000 80d9 	beq.w	8006c3e <scaraFLowScurve+0x63e>
			 t = time - 3*tm;
 8006a8c:	f04f 0200 	mov.w	r2, #0
 8006a90:	4b75      	ldr	r3, [pc, #468]	; (8006c68 <scaraFLowScurve+0x668>)
 8006a92:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006a96:	f7f9 fdbf 	bl	8000618 <__aeabi_dmul>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	460c      	mov	r4, r1
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	4623      	mov	r3, r4
 8006aa2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006aa6:	f7f9 fbff 	bl	80002a8 <__aeabi_dsub>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	460c      	mov	r4, r1
 8006aae:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current	=	-j_max*tm + j_max*t;
 8006ab2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ab4:	60bb      	str	r3, [r7, #8]
 8006ab6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ab8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006abc:	60fb      	str	r3, [r7, #12]
 8006abe:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006ac2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006ac6:	f7f9 fda7 	bl	8000618 <__aeabi_dmul>
 8006aca:	4603      	mov	r3, r0
 8006acc:	460c      	mov	r4, r1
 8006ace:	4625      	mov	r5, r4
 8006ad0:	461c      	mov	r4, r3
 8006ad2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006ad6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006ada:	f7f9 fd9d 	bl	8000618 <__aeabi_dmul>
 8006ade:	4602      	mov	r2, r0
 8006ae0:	460b      	mov	r3, r1
 8006ae2:	4620      	mov	r0, r4
 8006ae4:	4629      	mov	r1, r5
 8006ae6:	f7f9 fbe1 	bl	80002ac <__adddf3>
 8006aea:	4603      	mov	r3, r0
 8006aec:	460c      	mov	r4, r1
 8006aee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006af0:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_4 - j_max*tm*t + 0.5*j_max*t*t;
 8006af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af6:	e9d3 452a 	ldrd	r4, r5, [r3, #168]	; 0xa8
 8006afa:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006afe:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006b02:	f7f9 fd89 	bl	8000618 <__aeabi_dmul>
 8006b06:	4602      	mov	r2, r0
 8006b08:	460b      	mov	r3, r1
 8006b0a:	4610      	mov	r0, r2
 8006b0c:	4619      	mov	r1, r3
 8006b0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006b12:	f7f9 fd81 	bl	8000618 <__aeabi_dmul>
 8006b16:	4602      	mov	r2, r0
 8006b18:	460b      	mov	r3, r1
 8006b1a:	4620      	mov	r0, r4
 8006b1c:	4629      	mov	r1, r5
 8006b1e:	f7f9 fbc3 	bl	80002a8 <__aeabi_dsub>
 8006b22:	4603      	mov	r3, r0
 8006b24:	460c      	mov	r4, r1
 8006b26:	4625      	mov	r5, r4
 8006b28:	461c      	mov	r4, r3
 8006b2a:	f04f 0200 	mov.w	r2, #0
 8006b2e:	4b50      	ldr	r3, [pc, #320]	; (8006c70 <scaraFLowScurve+0x670>)
 8006b30:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006b34:	f7f9 fd70 	bl	8000618 <__aeabi_dmul>
 8006b38:	4602      	mov	r2, r0
 8006b3a:	460b      	mov	r3, r1
 8006b3c:	4610      	mov	r0, r2
 8006b3e:	4619      	mov	r1, r3
 8006b40:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006b44:	f7f9 fd68 	bl	8000618 <__aeabi_dmul>
 8006b48:	4602      	mov	r2, r0
 8006b4a:	460b      	mov	r3, r1
 8006b4c:	4610      	mov	r0, r2
 8006b4e:	4619      	mov	r1, r3
 8006b50:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006b54:	f7f9 fd60 	bl	8000618 <__aeabi_dmul>
 8006b58:	4602      	mov	r2, r0
 8006b5a:	460b      	mov	r3, r1
 8006b5c:	4620      	mov	r0, r4
 8006b5e:	4629      	mov	r1, r5
 8006b60:	f7f9 fba4 	bl	80002ac <__adddf3>
 8006b64:	4603      	mov	r3, r0
 8006b66:	460c      	mov	r4, r1
 8006b68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b6a:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_4 + scurve->v_4*t
 8006b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b70:	e9d3 452c 	ldrd	r4, r5, [r3, #176]	; 0xb0
 8006b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b76:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
 8006b7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006b7e:	f7f9 fd4b 	bl	8000618 <__aeabi_dmul>
 8006b82:	4602      	mov	r2, r0
 8006b84:	460b      	mov	r3, r1
 8006b86:	4620      	mov	r0, r4
 8006b88:	4629      	mov	r1, r5
 8006b8a:	f7f9 fb8f 	bl	80002ac <__adddf3>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	460c      	mov	r4, r1
 8006b92:	4625      	mov	r5, r4
 8006b94:	461c      	mov	r4, r3
									- 0.5*j_max*tm*t*t
 8006b96:	f04f 0200 	mov.w	r2, #0
 8006b9a:	4b35      	ldr	r3, [pc, #212]	; (8006c70 <scaraFLowScurve+0x670>)
 8006b9c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006ba0:	f7f9 fd3a 	bl	8000618 <__aeabi_dmul>
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	460b      	mov	r3, r1
 8006ba8:	4610      	mov	r0, r2
 8006baa:	4619      	mov	r1, r3
 8006bac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006bb0:	f7f9 fd32 	bl	8000618 <__aeabi_dmul>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	460b      	mov	r3, r1
 8006bb8:	4610      	mov	r0, r2
 8006bba:	4619      	mov	r1, r3
 8006bbc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006bc0:	f7f9 fd2a 	bl	8000618 <__aeabi_dmul>
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	460b      	mov	r3, r1
 8006bc8:	4610      	mov	r0, r2
 8006bca:	4619      	mov	r1, r3
 8006bcc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006bd0:	f7f9 fd22 	bl	8000618 <__aeabi_dmul>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	460b      	mov	r3, r1
 8006bd8:	4620      	mov	r0, r4
 8006bda:	4629      	mov	r1, r5
 8006bdc:	f7f9 fb64 	bl	80002a8 <__aeabi_dsub>
 8006be0:	4603      	mov	r3, r0
 8006be2:	460c      	mov	r4, r1
 8006be4:	4625      	mov	r5, r4
 8006be6:	461c      	mov	r4, r3
									+ j_max*t*t*t/6;
 8006be8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006bec:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006bf0:	f7f9 fd12 	bl	8000618 <__aeabi_dmul>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	460b      	mov	r3, r1
 8006bf8:	4610      	mov	r0, r2
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006c00:	f7f9 fd0a 	bl	8000618 <__aeabi_dmul>
 8006c04:	4602      	mov	r2, r0
 8006c06:	460b      	mov	r3, r1
 8006c08:	4610      	mov	r0, r2
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006c10:	f7f9 fd02 	bl	8000618 <__aeabi_dmul>
 8006c14:	4602      	mov	r2, r0
 8006c16:	460b      	mov	r3, r1
 8006c18:	4610      	mov	r0, r2
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	f04f 0200 	mov.w	r2, #0
 8006c20:	4b14      	ldr	r3, [pc, #80]	; (8006c74 <scaraFLowScurve+0x674>)
 8006c22:	f7f9 fe23 	bl	800086c <__aeabi_ddiv>
 8006c26:	4602      	mov	r2, r0
 8006c28:	460b      	mov	r3, r1
 8006c2a:	4620      	mov	r0, r4
 8006c2c:	4629      	mov	r1, r5
 8006c2e:	f7f9 fb3d 	bl	80002ac <__adddf3>
 8006c32:	4603      	mov	r3, r0
 8006c34:	460c      	mov	r4, r1
			 scurve->s_current	=	scurve->s_4 + scurve->v_4*t
 8006c36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c38:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8006c3c:	e3b6      	b.n	80073ac <scaraFLowScurve+0xdac>
		 } else {
			 scurve->a_current = 0;
 8006c3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c40:	f04f 0300 	mov.w	r3, #0
 8006c44:	f04f 0400 	mov.w	r4, #0
 8006c48:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current = 0;
 8006c4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c4e:	f04f 0300 	mov.w	r3, #0
 8006c52:	f04f 0400 	mov.w	r4, #0
 8006c56:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current = scurve->total_s;
 8006c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5c:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8006c60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c62:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8006c66:	e3a1      	b.n	80073ac <scaraFLowScurve+0xdac>
 8006c68:	40080000 	.word	0x40080000
 8006c6c:	40100000 	.word	0x40100000
 8006c70:	3fe00000 	.word	0x3fe00000
 8006c74:	40180000 	.word	0x40180000
		 }

	 // SCURVE 5 PHASE: tc > 0
	 } else if ( 5 == scurve->num_of_phase) {
 8006c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c7e:	2b05      	cmp	r3, #5
 8006c80:	f040 8392 	bne.w	80073a8 <scaraFLowScurve+0xda8>
		 // Phase 1
		 if ( (0 <= time) && ( time < tm)) {
 8006c84:	f04f 0200 	mov.w	r2, #0
 8006c88:	f04f 0300 	mov.w	r3, #0
 8006c8c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006c90:	f7f9 ff48 	bl	8000b24 <__aeabi_dcmpge>
 8006c94:	4603      	mov	r3, r0
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d058      	beq.n	8006d4c <scaraFLowScurve+0x74c>
 8006c9a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006c9e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006ca2:	f7f9 ff2b 	bl	8000afc <__aeabi_dcmplt>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d04f      	beq.n	8006d4c <scaraFLowScurve+0x74c>
			 t = time;
 8006cac:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8006cb0:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	= 	j_max*t;
 8006cb4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006cb8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006cbc:	f7f9 fcac 	bl	8000618 <__aeabi_dmul>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	460c      	mov	r4, r1
 8006cc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cc6:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	= 	0.5*j_max*t*t;
 8006cca:	f04f 0200 	mov.w	r2, #0
 8006cce:	4b91      	ldr	r3, [pc, #580]	; (8006f14 <scaraFLowScurve+0x914>)
 8006cd0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006cd4:	f7f9 fca0 	bl	8000618 <__aeabi_dmul>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	460c      	mov	r4, r1
 8006cdc:	4618      	mov	r0, r3
 8006cde:	4621      	mov	r1, r4
 8006ce0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006ce4:	f7f9 fc98 	bl	8000618 <__aeabi_dmul>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	460c      	mov	r4, r1
 8006cec:	4618      	mov	r0, r3
 8006cee:	4621      	mov	r1, r4
 8006cf0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006cf4:	f7f9 fc90 	bl	8000618 <__aeabi_dmul>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	460c      	mov	r4, r1
 8006cfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cfe:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current 	= 	j_max*t*t*t/6;
 8006d02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006d06:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006d0a:	f7f9 fc85 	bl	8000618 <__aeabi_dmul>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	460c      	mov	r4, r1
 8006d12:	4618      	mov	r0, r3
 8006d14:	4621      	mov	r1, r4
 8006d16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006d1a:	f7f9 fc7d 	bl	8000618 <__aeabi_dmul>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	460c      	mov	r4, r1
 8006d22:	4618      	mov	r0, r3
 8006d24:	4621      	mov	r1, r4
 8006d26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006d2a:	f7f9 fc75 	bl	8000618 <__aeabi_dmul>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	460c      	mov	r4, r1
 8006d32:	4618      	mov	r0, r3
 8006d34:	4621      	mov	r1, r4
 8006d36:	f04f 0200 	mov.w	r2, #0
 8006d3a:	4b77      	ldr	r3, [pc, #476]	; (8006f18 <scaraFLowScurve+0x918>)
 8006d3c:	f7f9 fd96 	bl	800086c <__aeabi_ddiv>
 8006d40:	4603      	mov	r3, r0
 8006d42:	460c      	mov	r4, r1
 8006d44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d46:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8006d4a:	e32f      	b.n	80073ac <scaraFLowScurve+0xdac>
		 // Phase 2
		 } else if ( (tm <= time) && ( time < (2*tm) ) ) {
 8006d4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d50:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006d54:	f7f9 fedc 	bl	8000b10 <__aeabi_dcmple>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	f000 80de 	beq.w	8006f1c <scaraFLowScurve+0x91c>
 8006d60:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006d64:	4602      	mov	r2, r0
 8006d66:	460b      	mov	r3, r1
 8006d68:	f7f9 faa0 	bl	80002ac <__adddf3>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	460b      	mov	r3, r1
 8006d70:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006d74:	f7f9 fec2 	bl	8000afc <__aeabi_dcmplt>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	f000 80ce 	beq.w	8006f1c <scaraFLowScurve+0x91c>
			 t = time - tm;
 8006d80:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006d84:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006d88:	f7f9 fa8e 	bl	80002a8 <__aeabi_dsub>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	460c      	mov	r4, r1
 8006d90:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	= 	j_max*tm - j_max*t;
 8006d94:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006d98:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006d9c:	f7f9 fc3c 	bl	8000618 <__aeabi_dmul>
 8006da0:	4603      	mov	r3, r0
 8006da2:	460c      	mov	r4, r1
 8006da4:	4625      	mov	r5, r4
 8006da6:	461c      	mov	r4, r3
 8006da8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006dac:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006db0:	f7f9 fc32 	bl	8000618 <__aeabi_dmul>
 8006db4:	4602      	mov	r2, r0
 8006db6:	460b      	mov	r3, r1
 8006db8:	4620      	mov	r0, r4
 8006dba:	4629      	mov	r1, r5
 8006dbc:	f7f9 fa74 	bl	80002a8 <__aeabi_dsub>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	460c      	mov	r4, r1
 8006dc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dc6:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current 	= 	scurve->v_1 + j_max*tm*t - 0.5*j_max*t*t;
 8006dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dcc:	e9d3 451e 	ldrd	r4, r5, [r3, #120]	; 0x78
 8006dd0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006dd4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006dd8:	f7f9 fc1e 	bl	8000618 <__aeabi_dmul>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	460b      	mov	r3, r1
 8006de0:	4610      	mov	r0, r2
 8006de2:	4619      	mov	r1, r3
 8006de4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006de8:	f7f9 fc16 	bl	8000618 <__aeabi_dmul>
 8006dec:	4602      	mov	r2, r0
 8006dee:	460b      	mov	r3, r1
 8006df0:	4620      	mov	r0, r4
 8006df2:	4629      	mov	r1, r5
 8006df4:	f7f9 fa5a 	bl	80002ac <__adddf3>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	460c      	mov	r4, r1
 8006dfc:	4625      	mov	r5, r4
 8006dfe:	461c      	mov	r4, r3
 8006e00:	f04f 0200 	mov.w	r2, #0
 8006e04:	4b43      	ldr	r3, [pc, #268]	; (8006f14 <scaraFLowScurve+0x914>)
 8006e06:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006e0a:	f7f9 fc05 	bl	8000618 <__aeabi_dmul>
 8006e0e:	4602      	mov	r2, r0
 8006e10:	460b      	mov	r3, r1
 8006e12:	4610      	mov	r0, r2
 8006e14:	4619      	mov	r1, r3
 8006e16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006e1a:	f7f9 fbfd 	bl	8000618 <__aeabi_dmul>
 8006e1e:	4602      	mov	r2, r0
 8006e20:	460b      	mov	r3, r1
 8006e22:	4610      	mov	r0, r2
 8006e24:	4619      	mov	r1, r3
 8006e26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006e2a:	f7f9 fbf5 	bl	8000618 <__aeabi_dmul>
 8006e2e:	4602      	mov	r2, r0
 8006e30:	460b      	mov	r3, r1
 8006e32:	4620      	mov	r0, r4
 8006e34:	4629      	mov	r1, r5
 8006e36:	f7f9 fa37 	bl	80002a8 <__aeabi_dsub>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	460c      	mov	r4, r1
 8006e3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e40:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current 	=	scurve->s_1 + scurve->v_1*t + 0.5*j_max*tm*t*t - j_max*t*t*t/6;
 8006e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e46:	e9d3 4520 	ldrd	r4, r5, [r3, #128]	; 0x80
 8006e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4c:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8006e50:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006e54:	f7f9 fbe0 	bl	8000618 <__aeabi_dmul>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	460b      	mov	r3, r1
 8006e5c:	4620      	mov	r0, r4
 8006e5e:	4629      	mov	r1, r5
 8006e60:	f7f9 fa24 	bl	80002ac <__adddf3>
 8006e64:	4603      	mov	r3, r0
 8006e66:	460c      	mov	r4, r1
 8006e68:	4625      	mov	r5, r4
 8006e6a:	461c      	mov	r4, r3
 8006e6c:	f04f 0200 	mov.w	r2, #0
 8006e70:	4b28      	ldr	r3, [pc, #160]	; (8006f14 <scaraFLowScurve+0x914>)
 8006e72:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006e76:	f7f9 fbcf 	bl	8000618 <__aeabi_dmul>
 8006e7a:	4602      	mov	r2, r0
 8006e7c:	460b      	mov	r3, r1
 8006e7e:	4610      	mov	r0, r2
 8006e80:	4619      	mov	r1, r3
 8006e82:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006e86:	f7f9 fbc7 	bl	8000618 <__aeabi_dmul>
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	460b      	mov	r3, r1
 8006e8e:	4610      	mov	r0, r2
 8006e90:	4619      	mov	r1, r3
 8006e92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006e96:	f7f9 fbbf 	bl	8000618 <__aeabi_dmul>
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	460b      	mov	r3, r1
 8006e9e:	4610      	mov	r0, r2
 8006ea0:	4619      	mov	r1, r3
 8006ea2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006ea6:	f7f9 fbb7 	bl	8000618 <__aeabi_dmul>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	460b      	mov	r3, r1
 8006eae:	4620      	mov	r0, r4
 8006eb0:	4629      	mov	r1, r5
 8006eb2:	f7f9 f9fb 	bl	80002ac <__adddf3>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	460c      	mov	r4, r1
 8006eba:	4625      	mov	r5, r4
 8006ebc:	461c      	mov	r4, r3
 8006ebe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006ec2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006ec6:	f7f9 fba7 	bl	8000618 <__aeabi_dmul>
 8006eca:	4602      	mov	r2, r0
 8006ecc:	460b      	mov	r3, r1
 8006ece:	4610      	mov	r0, r2
 8006ed0:	4619      	mov	r1, r3
 8006ed2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006ed6:	f7f9 fb9f 	bl	8000618 <__aeabi_dmul>
 8006eda:	4602      	mov	r2, r0
 8006edc:	460b      	mov	r3, r1
 8006ede:	4610      	mov	r0, r2
 8006ee0:	4619      	mov	r1, r3
 8006ee2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006ee6:	f7f9 fb97 	bl	8000618 <__aeabi_dmul>
 8006eea:	4602      	mov	r2, r0
 8006eec:	460b      	mov	r3, r1
 8006eee:	4610      	mov	r0, r2
 8006ef0:	4619      	mov	r1, r3
 8006ef2:	f04f 0200 	mov.w	r2, #0
 8006ef6:	4b08      	ldr	r3, [pc, #32]	; (8006f18 <scaraFLowScurve+0x918>)
 8006ef8:	f7f9 fcb8 	bl	800086c <__aeabi_ddiv>
 8006efc:	4602      	mov	r2, r0
 8006efe:	460b      	mov	r3, r1
 8006f00:	4620      	mov	r0, r4
 8006f02:	4629      	mov	r1, r5
 8006f04:	f7f9 f9d0 	bl	80002a8 <__aeabi_dsub>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	460c      	mov	r4, r1
 8006f0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f0e:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8006f12:	e24b      	b.n	80073ac <scaraFLowScurve+0xdac>
 8006f14:	3fe00000 	.word	0x3fe00000
 8006f18:	40180000 	.word	0x40180000
		 // Phase 3
		 } else if ( ((2*tm) <= time) && ( time < (2*tm + tc)) ) {
 8006f1c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006f20:	4602      	mov	r2, r0
 8006f22:	460b      	mov	r3, r1
 8006f24:	f7f9 f9c2 	bl	80002ac <__adddf3>
 8006f28:	4602      	mov	r2, r0
 8006f2a:	460b      	mov	r3, r1
 8006f2c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006f30:	f7f9 fdf8 	bl	8000b24 <__aeabi_dcmpge>
 8006f34:	4603      	mov	r3, r0
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d04b      	beq.n	8006fd2 <scaraFLowScurve+0x9d2>
 8006f3a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006f3e:	4602      	mov	r2, r0
 8006f40:	460b      	mov	r3, r1
 8006f42:	f7f9 f9b3 	bl	80002ac <__adddf3>
 8006f46:	4602      	mov	r2, r0
 8006f48:	460b      	mov	r3, r1
 8006f4a:	4610      	mov	r0, r2
 8006f4c:	4619      	mov	r1, r3
 8006f4e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006f52:	f7f9 f9ab 	bl	80002ac <__adddf3>
 8006f56:	4602      	mov	r2, r0
 8006f58:	460b      	mov	r3, r1
 8006f5a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006f5e:	f7f9 fdcd 	bl	8000afc <__aeabi_dcmplt>
 8006f62:	4603      	mov	r3, r0
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d034      	beq.n	8006fd2 <scaraFLowScurve+0x9d2>
			 t = time - 2*tm;
 8006f68:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	460b      	mov	r3, r1
 8006f70:	f7f9 f99c 	bl	80002ac <__adddf3>
 8006f74:	4603      	mov	r3, r0
 8006f76:	460c      	mov	r4, r1
 8006f78:	461a      	mov	r2, r3
 8006f7a:	4623      	mov	r3, r4
 8006f7c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006f80:	f7f9 f992 	bl	80002a8 <__aeabi_dsub>
 8006f84:	4603      	mov	r3, r0
 8006f86:	460c      	mov	r4, r1
 8006f88:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	=	0;
 8006f8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f8e:	f04f 0300 	mov.w	r3, #0
 8006f92:	f04f 0400 	mov.w	r4, #0
 8006f96:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_2;
 8006f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9c:	e9d3 3422 	ldrd	r3, r4, [r3, #136]	; 0x88
 8006fa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fa2:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_2 + scurve->v_2*t;
 8006fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa8:	e9d3 4524 	ldrd	r4, r5, [r3, #144]	; 0x90
 8006fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fae:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 8006fb2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006fb6:	f7f9 fb2f 	bl	8000618 <__aeabi_dmul>
 8006fba:	4602      	mov	r2, r0
 8006fbc:	460b      	mov	r3, r1
 8006fbe:	4620      	mov	r0, r4
 8006fc0:	4629      	mov	r1, r5
 8006fc2:	f7f9 f973 	bl	80002ac <__adddf3>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	460c      	mov	r4, r1
 8006fca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fcc:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8006fd0:	e1ec      	b.n	80073ac <scaraFLowScurve+0xdac>
		 // Phase 4
		 } else if ( ((2*tm + tc) <= time) && ( time < (3*tm + tc)) ) {
 8006fd2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006fd6:	4602      	mov	r2, r0
 8006fd8:	460b      	mov	r3, r1
 8006fda:	f7f9 f967 	bl	80002ac <__adddf3>
 8006fde:	4602      	mov	r2, r0
 8006fe0:	460b      	mov	r3, r1
 8006fe2:	4610      	mov	r0, r2
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006fea:	f7f9 f95f 	bl	80002ac <__adddf3>
 8006fee:	4602      	mov	r2, r0
 8006ff0:	460b      	mov	r3, r1
 8006ff2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006ff6:	f7f9 fd95 	bl	8000b24 <__aeabi_dcmpge>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	f000 80af 	beq.w	8007160 <scaraFLowScurve+0xb60>
 8007002:	f04f 0200 	mov.w	r2, #0
 8007006:	4b53      	ldr	r3, [pc, #332]	; (8007154 <scaraFLowScurve+0xb54>)
 8007008:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800700c:	f7f9 fb04 	bl	8000618 <__aeabi_dmul>
 8007010:	4602      	mov	r2, r0
 8007012:	460b      	mov	r3, r1
 8007014:	4610      	mov	r0, r2
 8007016:	4619      	mov	r1, r3
 8007018:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800701c:	f7f9 f946 	bl	80002ac <__adddf3>
 8007020:	4602      	mov	r2, r0
 8007022:	460b      	mov	r3, r1
 8007024:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007028:	f7f9 fd68 	bl	8000afc <__aeabi_dcmplt>
 800702c:	4603      	mov	r3, r0
 800702e:	2b00      	cmp	r3, #0
 8007030:	f000 8096 	beq.w	8007160 <scaraFLowScurve+0xb60>
			 t = time - (2*tm + tc);
 8007034:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007038:	4602      	mov	r2, r0
 800703a:	460b      	mov	r3, r1
 800703c:	f7f9 f936 	bl	80002ac <__adddf3>
 8007040:	4603      	mov	r3, r0
 8007042:	460c      	mov	r4, r1
 8007044:	4618      	mov	r0, r3
 8007046:	4621      	mov	r1, r4
 8007048:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800704c:	f7f9 f92e 	bl	80002ac <__adddf3>
 8007050:	4603      	mov	r3, r0
 8007052:	460c      	mov	r4, r1
 8007054:	461a      	mov	r2, r3
 8007056:	4623      	mov	r3, r4
 8007058:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800705c:	f7f9 f924 	bl	80002a8 <__aeabi_dsub>
 8007060:	4603      	mov	r3, r0
 8007062:	460c      	mov	r4, r1
 8007064:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	=	-j_max*t;
 8007068:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800706a:	603b      	str	r3, [r7, #0]
 800706c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800706e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007072:	607b      	str	r3, [r7, #4]
 8007074:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007078:	e9d7 0100 	ldrd	r0, r1, [r7]
 800707c:	f7f9 facc 	bl	8000618 <__aeabi_dmul>
 8007080:	4603      	mov	r3, r0
 8007082:	460c      	mov	r4, r1
 8007084:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007086:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_3 - 0.5*j_max*t*t;
 800708a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800708c:	e9d3 4526 	ldrd	r4, r5, [r3, #152]	; 0x98
 8007090:	f04f 0200 	mov.w	r2, #0
 8007094:	4b30      	ldr	r3, [pc, #192]	; (8007158 <scaraFLowScurve+0xb58>)
 8007096:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800709a:	f7f9 fabd 	bl	8000618 <__aeabi_dmul>
 800709e:	4602      	mov	r2, r0
 80070a0:	460b      	mov	r3, r1
 80070a2:	4610      	mov	r0, r2
 80070a4:	4619      	mov	r1, r3
 80070a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80070aa:	f7f9 fab5 	bl	8000618 <__aeabi_dmul>
 80070ae:	4602      	mov	r2, r0
 80070b0:	460b      	mov	r3, r1
 80070b2:	4610      	mov	r0, r2
 80070b4:	4619      	mov	r1, r3
 80070b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80070ba:	f7f9 faad 	bl	8000618 <__aeabi_dmul>
 80070be:	4602      	mov	r2, r0
 80070c0:	460b      	mov	r3, r1
 80070c2:	4620      	mov	r0, r4
 80070c4:	4629      	mov	r1, r5
 80070c6:	f7f9 f8ef 	bl	80002a8 <__aeabi_dsub>
 80070ca:	4603      	mov	r3, r0
 80070cc:	460c      	mov	r4, r1
 80070ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070d0:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_3 + scurve->v_3*t - j_max*t*t*t/6;
 80070d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d6:	e9d3 4528 	ldrd	r4, r5, [r3, #160]	; 0xa0
 80070da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070dc:	e9d3 0126 	ldrd	r0, r1, [r3, #152]	; 0x98
 80070e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80070e4:	f7f9 fa98 	bl	8000618 <__aeabi_dmul>
 80070e8:	4602      	mov	r2, r0
 80070ea:	460b      	mov	r3, r1
 80070ec:	4620      	mov	r0, r4
 80070ee:	4629      	mov	r1, r5
 80070f0:	f7f9 f8dc 	bl	80002ac <__adddf3>
 80070f4:	4603      	mov	r3, r0
 80070f6:	460c      	mov	r4, r1
 80070f8:	4625      	mov	r5, r4
 80070fa:	461c      	mov	r4, r3
 80070fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007100:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007104:	f7f9 fa88 	bl	8000618 <__aeabi_dmul>
 8007108:	4602      	mov	r2, r0
 800710a:	460b      	mov	r3, r1
 800710c:	4610      	mov	r0, r2
 800710e:	4619      	mov	r1, r3
 8007110:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007114:	f7f9 fa80 	bl	8000618 <__aeabi_dmul>
 8007118:	4602      	mov	r2, r0
 800711a:	460b      	mov	r3, r1
 800711c:	4610      	mov	r0, r2
 800711e:	4619      	mov	r1, r3
 8007120:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007124:	f7f9 fa78 	bl	8000618 <__aeabi_dmul>
 8007128:	4602      	mov	r2, r0
 800712a:	460b      	mov	r3, r1
 800712c:	4610      	mov	r0, r2
 800712e:	4619      	mov	r1, r3
 8007130:	f04f 0200 	mov.w	r2, #0
 8007134:	4b09      	ldr	r3, [pc, #36]	; (800715c <scaraFLowScurve+0xb5c>)
 8007136:	f7f9 fb99 	bl	800086c <__aeabi_ddiv>
 800713a:	4602      	mov	r2, r0
 800713c:	460b      	mov	r3, r1
 800713e:	4620      	mov	r0, r4
 8007140:	4629      	mov	r1, r5
 8007142:	f7f9 f8b1 	bl	80002a8 <__aeabi_dsub>
 8007146:	4603      	mov	r3, r0
 8007148:	460c      	mov	r4, r1
 800714a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800714c:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8007150:	e12c      	b.n	80073ac <scaraFLowScurve+0xdac>
 8007152:	bf00      	nop
 8007154:	40080000 	.word	0x40080000
 8007158:	3fe00000 	.word	0x3fe00000
 800715c:	40180000 	.word	0x40180000
		 // Phase 5
		 } else if ( ((3*tm + tc) <= time) && ( time < (4*tm + tc)) ) {
 8007160:	f04f 0200 	mov.w	r2, #0
 8007164:	4b94      	ldr	r3, [pc, #592]	; (80073b8 <scaraFLowScurve+0xdb8>)
 8007166:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800716a:	f7f9 fa55 	bl	8000618 <__aeabi_dmul>
 800716e:	4602      	mov	r2, r0
 8007170:	460b      	mov	r3, r1
 8007172:	4610      	mov	r0, r2
 8007174:	4619      	mov	r1, r3
 8007176:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800717a:	f7f9 f897 	bl	80002ac <__adddf3>
 800717e:	4602      	mov	r2, r0
 8007180:	460b      	mov	r3, r1
 8007182:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007186:	f7f9 fccd 	bl	8000b24 <__aeabi_dcmpge>
 800718a:	4603      	mov	r3, r0
 800718c:	2b00      	cmp	r3, #0
 800718e:	f000 80f6 	beq.w	800737e <scaraFLowScurve+0xd7e>
 8007192:	f04f 0200 	mov.w	r2, #0
 8007196:	4b89      	ldr	r3, [pc, #548]	; (80073bc <scaraFLowScurve+0xdbc>)
 8007198:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800719c:	f7f9 fa3c 	bl	8000618 <__aeabi_dmul>
 80071a0:	4602      	mov	r2, r0
 80071a2:	460b      	mov	r3, r1
 80071a4:	4610      	mov	r0, r2
 80071a6:	4619      	mov	r1, r3
 80071a8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80071ac:	f7f9 f87e 	bl	80002ac <__adddf3>
 80071b0:	4602      	mov	r2, r0
 80071b2:	460b      	mov	r3, r1
 80071b4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80071b8:	f7f9 fca0 	bl	8000afc <__aeabi_dcmplt>
 80071bc:	4603      	mov	r3, r0
 80071be:	2b00      	cmp	r3, #0
 80071c0:	f000 80dd 	beq.w	800737e <scaraFLowScurve+0xd7e>
			 t = time - (3*tm + tc);
 80071c4:	f04f 0200 	mov.w	r2, #0
 80071c8:	4b7b      	ldr	r3, [pc, #492]	; (80073b8 <scaraFLowScurve+0xdb8>)
 80071ca:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80071ce:	f7f9 fa23 	bl	8000618 <__aeabi_dmul>
 80071d2:	4602      	mov	r2, r0
 80071d4:	460b      	mov	r3, r1
 80071d6:	4610      	mov	r0, r2
 80071d8:	4619      	mov	r1, r3
 80071da:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80071de:	f7f9 f865 	bl	80002ac <__adddf3>
 80071e2:	4602      	mov	r2, r0
 80071e4:	460b      	mov	r3, r1
 80071e6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80071ea:	f7f9 f85d 	bl	80002a8 <__aeabi_dsub>
 80071ee:	4602      	mov	r2, r0
 80071f0:	460b      	mov	r3, r1
 80071f2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			 scurve->a_current	=	-j_max*tm + j_max*t;
 80071f6:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 80071f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071fa:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80071fe:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007202:	4620      	mov	r0, r4
 8007204:	4629      	mov	r1, r5
 8007206:	f7f9 fa07 	bl	8000618 <__aeabi_dmul>
 800720a:	4603      	mov	r3, r0
 800720c:	460c      	mov	r4, r1
 800720e:	4625      	mov	r5, r4
 8007210:	461c      	mov	r4, r3
 8007212:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007216:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800721a:	f7f9 f9fd 	bl	8000618 <__aeabi_dmul>
 800721e:	4602      	mov	r2, r0
 8007220:	460b      	mov	r3, r1
 8007222:	4620      	mov	r0, r4
 8007224:	4629      	mov	r1, r5
 8007226:	f7f9 f841 	bl	80002ac <__adddf3>
 800722a:	4603      	mov	r3, r0
 800722c:	460c      	mov	r4, r1
 800722e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007230:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_4 - j_max*tm*t + 0.5*j_max*t*t;
 8007234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007236:	e9d3 452a 	ldrd	r4, r5, [r3, #168]	; 0xa8
 800723a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800723e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007242:	f7f9 f9e9 	bl	8000618 <__aeabi_dmul>
 8007246:	4602      	mov	r2, r0
 8007248:	460b      	mov	r3, r1
 800724a:	4610      	mov	r0, r2
 800724c:	4619      	mov	r1, r3
 800724e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007252:	f7f9 f9e1 	bl	8000618 <__aeabi_dmul>
 8007256:	4602      	mov	r2, r0
 8007258:	460b      	mov	r3, r1
 800725a:	4620      	mov	r0, r4
 800725c:	4629      	mov	r1, r5
 800725e:	f7f9 f823 	bl	80002a8 <__aeabi_dsub>
 8007262:	4603      	mov	r3, r0
 8007264:	460c      	mov	r4, r1
 8007266:	4625      	mov	r5, r4
 8007268:	461c      	mov	r4, r3
 800726a:	f04f 0200 	mov.w	r2, #0
 800726e:	4b54      	ldr	r3, [pc, #336]	; (80073c0 <scaraFLowScurve+0xdc0>)
 8007270:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007274:	f7f9 f9d0 	bl	8000618 <__aeabi_dmul>
 8007278:	4602      	mov	r2, r0
 800727a:	460b      	mov	r3, r1
 800727c:	4610      	mov	r0, r2
 800727e:	4619      	mov	r1, r3
 8007280:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007284:	f7f9 f9c8 	bl	8000618 <__aeabi_dmul>
 8007288:	4602      	mov	r2, r0
 800728a:	460b      	mov	r3, r1
 800728c:	4610      	mov	r0, r2
 800728e:	4619      	mov	r1, r3
 8007290:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007294:	f7f9 f9c0 	bl	8000618 <__aeabi_dmul>
 8007298:	4602      	mov	r2, r0
 800729a:	460b      	mov	r3, r1
 800729c:	4620      	mov	r0, r4
 800729e:	4629      	mov	r1, r5
 80072a0:	f7f9 f804 	bl	80002ac <__adddf3>
 80072a4:	4603      	mov	r3, r0
 80072a6:	460c      	mov	r4, r1
 80072a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072aa:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_4 + scurve->v_4*t - 0.5*j_max*tm*t*t + j_max*t*t*t/6;
 80072ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b0:	e9d3 452c 	ldrd	r4, r5, [r3, #176]	; 0xb0
 80072b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b6:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
 80072ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80072be:	f7f9 f9ab 	bl	8000618 <__aeabi_dmul>
 80072c2:	4602      	mov	r2, r0
 80072c4:	460b      	mov	r3, r1
 80072c6:	4620      	mov	r0, r4
 80072c8:	4629      	mov	r1, r5
 80072ca:	f7f8 ffef 	bl	80002ac <__adddf3>
 80072ce:	4603      	mov	r3, r0
 80072d0:	460c      	mov	r4, r1
 80072d2:	4625      	mov	r5, r4
 80072d4:	461c      	mov	r4, r3
 80072d6:	f04f 0200 	mov.w	r2, #0
 80072da:	4b39      	ldr	r3, [pc, #228]	; (80073c0 <scaraFLowScurve+0xdc0>)
 80072dc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80072e0:	f7f9 f99a 	bl	8000618 <__aeabi_dmul>
 80072e4:	4602      	mov	r2, r0
 80072e6:	460b      	mov	r3, r1
 80072e8:	4610      	mov	r0, r2
 80072ea:	4619      	mov	r1, r3
 80072ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80072f0:	f7f9 f992 	bl	8000618 <__aeabi_dmul>
 80072f4:	4602      	mov	r2, r0
 80072f6:	460b      	mov	r3, r1
 80072f8:	4610      	mov	r0, r2
 80072fa:	4619      	mov	r1, r3
 80072fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007300:	f7f9 f98a 	bl	8000618 <__aeabi_dmul>
 8007304:	4602      	mov	r2, r0
 8007306:	460b      	mov	r3, r1
 8007308:	4610      	mov	r0, r2
 800730a:	4619      	mov	r1, r3
 800730c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007310:	f7f9 f982 	bl	8000618 <__aeabi_dmul>
 8007314:	4602      	mov	r2, r0
 8007316:	460b      	mov	r3, r1
 8007318:	4620      	mov	r0, r4
 800731a:	4629      	mov	r1, r5
 800731c:	f7f8 ffc4 	bl	80002a8 <__aeabi_dsub>
 8007320:	4603      	mov	r3, r0
 8007322:	460c      	mov	r4, r1
 8007324:	4625      	mov	r5, r4
 8007326:	461c      	mov	r4, r3
 8007328:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800732c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007330:	f7f9 f972 	bl	8000618 <__aeabi_dmul>
 8007334:	4602      	mov	r2, r0
 8007336:	460b      	mov	r3, r1
 8007338:	4610      	mov	r0, r2
 800733a:	4619      	mov	r1, r3
 800733c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007340:	f7f9 f96a 	bl	8000618 <__aeabi_dmul>
 8007344:	4602      	mov	r2, r0
 8007346:	460b      	mov	r3, r1
 8007348:	4610      	mov	r0, r2
 800734a:	4619      	mov	r1, r3
 800734c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007350:	f7f9 f962 	bl	8000618 <__aeabi_dmul>
 8007354:	4602      	mov	r2, r0
 8007356:	460b      	mov	r3, r1
 8007358:	4610      	mov	r0, r2
 800735a:	4619      	mov	r1, r3
 800735c:	f04f 0200 	mov.w	r2, #0
 8007360:	4b18      	ldr	r3, [pc, #96]	; (80073c4 <scaraFLowScurve+0xdc4>)
 8007362:	f7f9 fa83 	bl	800086c <__aeabi_ddiv>
 8007366:	4602      	mov	r2, r0
 8007368:	460b      	mov	r3, r1
 800736a:	4620      	mov	r0, r4
 800736c:	4629      	mov	r1, r5
 800736e:	f7f8 ff9d 	bl	80002ac <__adddf3>
 8007372:	4603      	mov	r3, r0
 8007374:	460c      	mov	r4, r1
 8007376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007378:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 800737c:	e016      	b.n	80073ac <scaraFLowScurve+0xdac>
		 } else {
			 scurve->a_current = 0;
 800737e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007380:	f04f 0300 	mov.w	r3, #0
 8007384:	f04f 0400 	mov.w	r4, #0
 8007388:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current = 0;
 800738c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800738e:	f04f 0300 	mov.w	r3, #0
 8007392:	f04f 0400 	mov.w	r4, #0
 8007396:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current = scurve->total_s;
 800739a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739c:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 80073a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073a2:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 80073a6:	e001      	b.n	80073ac <scaraFLowScurve+0xdac>
		 }

	 } else {
		 return SCARA_STATUS_ERROR;
 80073a8:	2301      	movs	r3, #1
 80073aa:	e000      	b.n	80073ae <scaraFLowScurve+0xdae>
	 }

	 return SCARA_STATUS_OK;
 80073ac:	2300      	movs	r3, #0
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3748      	adds	r7, #72	; 0x48
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bdb0      	pop	{r4, r5, r7, pc}
 80073b6:	bf00      	nop
 80073b8:	40080000 	.word	0x40080000
 80073bc:	40100000 	.word	0x40100000
 80073c0:	3fe00000 	.word	0x3fe00000
 80073c4:	40180000 	.word	0x40180000

080073c8 <scaraCheckWorkSpace4>:

SCARA_StatusTypeDef	scaraCheckWorkSpace4 (double theta1, double theta2, double d3, double theta4) {
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b088      	sub	sp, #32
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	ed87 0b06 	vstr	d0, [r7, #24]
 80073d2:	ed87 1b04 	vstr	d1, [r7, #16]
 80073d6:	ed87 2b02 	vstr	d2, [r7, #8]
 80073da:	ed87 3b00 	vstr	d3, [r7]
	// check theta 1
	if ( theta1 < LIM_MIN_J0 || theta1 > LIM_MAX_J0) {
 80073de:	a335      	add	r3, pc, #212	; (adr r3, 80074b4 <scaraCheckWorkSpace4+0xec>)
 80073e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80073e8:	f7f9 fb88 	bl	8000afc <__aeabi_dcmplt>
 80073ec:	4603      	mov	r3, r0
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d109      	bne.n	8007406 <scaraCheckWorkSpace4+0x3e>
 80073f2:	a332      	add	r3, pc, #200	; (adr r3, 80074bc <scaraCheckWorkSpace4+0xf4>)
 80073f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80073fc:	f7f9 fb9c 	bl	8000b38 <__aeabi_dcmpgt>
 8007400:	4603      	mov	r3, r0
 8007402:	2b00      	cmp	r3, #0
 8007404:	d001      	beq.n	800740a <scaraCheckWorkSpace4+0x42>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8007406:	2307      	movs	r3, #7
 8007408:	e043      	b.n	8007492 <scaraCheckWorkSpace4+0xca>
	}
	// check theta 2
	if ( theta2 < LIM_MIN_J1 || theta2 > LIM_MAX_J1) {
 800740a:	a32e      	add	r3, pc, #184	; (adr r3, 80074c4 <scaraCheckWorkSpace4+0xfc>)
 800740c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007410:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007414:	f7f9 fb72 	bl	8000afc <__aeabi_dcmplt>
 8007418:	4603      	mov	r3, r0
 800741a:	2b00      	cmp	r3, #0
 800741c:	d109      	bne.n	8007432 <scaraCheckWorkSpace4+0x6a>
 800741e:	a32b      	add	r3, pc, #172	; (adr r3, 80074cc <scaraCheckWorkSpace4+0x104>)
 8007420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007424:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007428:	f7f9 fb86 	bl	8000b38 <__aeabi_dcmpgt>
 800742c:	4603      	mov	r3, r0
 800742e:	2b00      	cmp	r3, #0
 8007430:	d001      	beq.n	8007436 <scaraCheckWorkSpace4+0x6e>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8007432:	2307      	movs	r3, #7
 8007434:	e02d      	b.n	8007492 <scaraCheckWorkSpace4+0xca>
	}
	// check d 3
	if ( d3 < LIM_MIN_J2 || d3 > LIM_MAX_J2) {
 8007436:	f04f 0200 	mov.w	r2, #0
 800743a:	f04f 0300 	mov.w	r3, #0
 800743e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007442:	f7f9 fb5b 	bl	8000afc <__aeabi_dcmplt>
 8007446:	4603      	mov	r3, r0
 8007448:	2b00      	cmp	r3, #0
 800744a:	d109      	bne.n	8007460 <scaraCheckWorkSpace4+0x98>
 800744c:	f04f 0200 	mov.w	r2, #0
 8007450:	4b17      	ldr	r3, [pc, #92]	; (80074b0 <scaraCheckWorkSpace4+0xe8>)
 8007452:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007456:	f7f9 fb6f 	bl	8000b38 <__aeabi_dcmpgt>
 800745a:	4603      	mov	r3, r0
 800745c:	2b00      	cmp	r3, #0
 800745e:	d001      	beq.n	8007464 <scaraCheckWorkSpace4+0x9c>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8007460:	2307      	movs	r3, #7
 8007462:	e016      	b.n	8007492 <scaraCheckWorkSpace4+0xca>
	}
	// check theta 4
	if ( theta4 < LIM_MIN_J3 || theta4 > LIM_MAX_J3) {
 8007464:	a30e      	add	r3, pc, #56	; (adr r3, 80074a0 <scaraCheckWorkSpace4+0xd8>)
 8007466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800746a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800746e:	f7f9 fb45 	bl	8000afc <__aeabi_dcmplt>
 8007472:	4603      	mov	r3, r0
 8007474:	2b00      	cmp	r3, #0
 8007476:	d109      	bne.n	800748c <scaraCheckWorkSpace4+0xc4>
 8007478:	a30b      	add	r3, pc, #44	; (adr r3, 80074a8 <scaraCheckWorkSpace4+0xe0>)
 800747a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800747e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007482:	f7f9 fb59 	bl	8000b38 <__aeabi_dcmpgt>
 8007486:	4603      	mov	r3, r0
 8007488:	2b00      	cmp	r3, #0
 800748a:	d001      	beq.n	8007490 <scaraCheckWorkSpace4+0xc8>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800748c:	2307      	movs	r3, #7
 800748e:	e000      	b.n	8007492 <scaraCheckWorkSpace4+0xca>
	}
	return SCARA_STATUS_OK;
 8007490:	2300      	movs	r3, #0
}
 8007492:	4618      	mov	r0, r3
 8007494:	3720      	adds	r7, #32
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}
 800749a:	bf00      	nop
 800749c:	f3af 8000 	nop.w
 80074a0:	60000000 	.word	0x60000000
 80074a4:	c00921fb 	.word	0xc00921fb
 80074a8:	60000000 	.word	0x60000000
 80074ac:	400921fb 	.word	0x400921fb
 80074b0:	40590000 	.word	0x40590000
 80074b4:	60000000 	.word	0x60000000
 80074b8:	bff921fb 	.word	0xbff921fb
 80074bc:	60000000 	.word	0x60000000
 80074c0:	3ff921fb 	.word	0x3ff921fb
 80074c4:	80000000 	.word	0x80000000
 80074c8:	c002d97c 	.word	0xc002d97c
 80074cc:	80000000 	.word	0x80000000
 80074d0:	4002d97c 	.word	0x4002d97c
 80074d4:	00000000 	.word	0x00000000

080074d8 <scaraCheckWorkSpace1>:

SCARA_StatusTypeDef	scaraCheckWorkSpace1 (Trajectory_TargetTypeDef target, double value) {
 80074d8:	b580      	push	{r7, lr}
 80074da:	b084      	sub	sp, #16
 80074dc:	af00      	add	r7, sp, #0
 80074de:	4603      	mov	r3, r0
 80074e0:	ed87 0b00 	vstr	d0, [r7]
 80074e4:	73fb      	strb	r3, [r7, #15]
	if ( TRAJECTORY_J0 == target) {
 80074e6:	7bfb      	ldrb	r3, [r7, #15]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d117      	bne.n	800751c <scaraCheckWorkSpace1+0x44>
		if ( (LIM_MIN_J0 <= value) && ( value <= LIM_MAX_J0)) {
 80074ec:	a33d      	add	r3, pc, #244	; (adr r3, 80075e4 <scaraCheckWorkSpace1+0x10c>)
 80074ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80074f6:	f7f9 fb15 	bl	8000b24 <__aeabi_dcmpge>
 80074fa:	4603      	mov	r3, r0
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d00b      	beq.n	8007518 <scaraCheckWorkSpace1+0x40>
 8007500:	a33a      	add	r3, pc, #232	; (adr r3, 80075ec <scaraCheckWorkSpace1+0x114>)
 8007502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007506:	e9d7 0100 	ldrd	r0, r1, [r7]
 800750a:	f7f9 fb01 	bl	8000b10 <__aeabi_dcmple>
 800750e:	4603      	mov	r3, r0
 8007510:	2b00      	cmp	r3, #0
 8007512:	d001      	beq.n	8007518 <scaraCheckWorkSpace1+0x40>
			return SCARA_STATUS_OK;
 8007514:	2300      	movs	r3, #0
 8007516:	e054      	b.n	80075c2 <scaraCheckWorkSpace1+0xea>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8007518:	2307      	movs	r3, #7
 800751a:	e052      	b.n	80075c2 <scaraCheckWorkSpace1+0xea>
		}
	} else if (TRAJECTORY_J1 == target) {
 800751c:	7bfb      	ldrb	r3, [r7, #15]
 800751e:	2b01      	cmp	r3, #1
 8007520:	d117      	bne.n	8007552 <scaraCheckWorkSpace1+0x7a>
		if ( (LIM_MIN_J1 <= value) && ( value <= LIM_MAX_J1)) {
 8007522:	a334      	add	r3, pc, #208	; (adr r3, 80075f4 <scaraCheckWorkSpace1+0x11c>)
 8007524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007528:	e9d7 0100 	ldrd	r0, r1, [r7]
 800752c:	f7f9 fafa 	bl	8000b24 <__aeabi_dcmpge>
 8007530:	4603      	mov	r3, r0
 8007532:	2b00      	cmp	r3, #0
 8007534:	d00b      	beq.n	800754e <scaraCheckWorkSpace1+0x76>
 8007536:	a331      	add	r3, pc, #196	; (adr r3, 80075fc <scaraCheckWorkSpace1+0x124>)
 8007538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800753c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007540:	f7f9 fae6 	bl	8000b10 <__aeabi_dcmple>
 8007544:	4603      	mov	r3, r0
 8007546:	2b00      	cmp	r3, #0
 8007548:	d001      	beq.n	800754e <scaraCheckWorkSpace1+0x76>
			return SCARA_STATUS_OK;
 800754a:	2300      	movs	r3, #0
 800754c:	e039      	b.n	80075c2 <scaraCheckWorkSpace1+0xea>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800754e:	2307      	movs	r3, #7
 8007550:	e037      	b.n	80075c2 <scaraCheckWorkSpace1+0xea>
		}
	} else if (TRAJECTORY_J2 == target) {
 8007552:	7bfb      	ldrb	r3, [r7, #15]
 8007554:	2b02      	cmp	r3, #2
 8007556:	d118      	bne.n	800758a <scaraCheckWorkSpace1+0xb2>
		if ( (LIM_MIN_J2 <= value) && ( value <= LIM_MAX_J2)) {
 8007558:	f04f 0200 	mov.w	r2, #0
 800755c:	f04f 0300 	mov.w	r3, #0
 8007560:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007564:	f7f9 fade 	bl	8000b24 <__aeabi_dcmpge>
 8007568:	4603      	mov	r3, r0
 800756a:	2b00      	cmp	r3, #0
 800756c:	d00b      	beq.n	8007586 <scaraCheckWorkSpace1+0xae>
 800756e:	f04f 0200 	mov.w	r2, #0
 8007572:	4b1b      	ldr	r3, [pc, #108]	; (80075e0 <scaraCheckWorkSpace1+0x108>)
 8007574:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007578:	f7f9 faca 	bl	8000b10 <__aeabi_dcmple>
 800757c:	4603      	mov	r3, r0
 800757e:	2b00      	cmp	r3, #0
 8007580:	d001      	beq.n	8007586 <scaraCheckWorkSpace1+0xae>
			return SCARA_STATUS_OK;
 8007582:	2300      	movs	r3, #0
 8007584:	e01d      	b.n	80075c2 <scaraCheckWorkSpace1+0xea>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8007586:	2307      	movs	r3, #7
 8007588:	e01b      	b.n	80075c2 <scaraCheckWorkSpace1+0xea>
		}
	} else if (TRAJECTORY_J3 == target) {
 800758a:	7bfb      	ldrb	r3, [r7, #15]
 800758c:	2b03      	cmp	r3, #3
 800758e:	d117      	bne.n	80075c0 <scaraCheckWorkSpace1+0xe8>
		if ( (LIM_MIN_J3 <= value) && ( value <= LIM_MAX_J3)) {
 8007590:	a30f      	add	r3, pc, #60	; (adr r3, 80075d0 <scaraCheckWorkSpace1+0xf8>)
 8007592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007596:	e9d7 0100 	ldrd	r0, r1, [r7]
 800759a:	f7f9 fac3 	bl	8000b24 <__aeabi_dcmpge>
 800759e:	4603      	mov	r3, r0
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d00b      	beq.n	80075bc <scaraCheckWorkSpace1+0xe4>
 80075a4:	a30c      	add	r3, pc, #48	; (adr r3, 80075d8 <scaraCheckWorkSpace1+0x100>)
 80075a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80075ae:	f7f9 faaf 	bl	8000b10 <__aeabi_dcmple>
 80075b2:	4603      	mov	r3, r0
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d001      	beq.n	80075bc <scaraCheckWorkSpace1+0xe4>
			return SCARA_STATUS_OK;
 80075b8:	2300      	movs	r3, #0
 80075ba:	e002      	b.n	80075c2 <scaraCheckWorkSpace1+0xea>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 80075bc:	2307      	movs	r3, #7
 80075be:	e000      	b.n	80075c2 <scaraCheckWorkSpace1+0xea>
		}
	} else {
		return SCARA_STATUS_ERROR;
 80075c0:	2301      	movs	r3, #1
	}
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3710      	adds	r7, #16
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}
 80075ca:	bf00      	nop
 80075cc:	f3af 8000 	nop.w
 80075d0:	60000000 	.word	0x60000000
 80075d4:	c00921fb 	.word	0xc00921fb
 80075d8:	60000000 	.word	0x60000000
 80075dc:	400921fb 	.word	0x400921fb
 80075e0:	40590000 	.word	0x40590000
 80075e4:	60000000 	.word	0x60000000
 80075e8:	bff921fb 	.word	0xbff921fb
 80075ec:	60000000 	.word	0x60000000
 80075f0:	3ff921fb 	.word	0x3ff921fb
 80075f4:	80000000 	.word	0x80000000
 80075f8:	c002d97c 	.word	0xc002d97c
 80075fc:	80000000 	.word	0x80000000
 8007600:	4002d97c 	.word	0x4002d97c

08007604 <scaraSetOutput>:

void				scaraSetScanFlag(void) {
	mySCARA.isScanLitmit = TRUE;
}

void				scaraSetOutput		(uint8_t level) {
 8007604:	b580      	push	{r7, lr}
 8007606:	b082      	sub	sp, #8
 8007608:	af00      	add	r7, sp, #0
 800760a:	4603      	mov	r3, r0
 800760c:	71fb      	strb	r3, [r7, #7]
	mySCARA.outputSet	 = level;
 800760e:	4a05      	ldr	r2, [pc, #20]	; (8007624 <scaraSetOutput+0x20>)
 8007610:	79fb      	ldrb	r3, [r7, #7]
 8007612:	70d3      	strb	r3, [r2, #3]
	lowlayer_setOutput(level);
 8007614:	79fb      	ldrb	r3, [r7, #7]
 8007616:	4618      	mov	r0, r3
 8007618:	f7fb ffba 	bl	8003590 <lowlayer_setOutput>
}
 800761c:	bf00      	nop
 800761e:	3708      	adds	r7, #8
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}
 8007624:	20000c78 	.word	0x20000c78

08007628 <scaraSetDutyState>:

void				scaraSetDutyState(SCARA_DutyStateTypeDef state) {
 8007628:	b480      	push	{r7}
 800762a:	b083      	sub	sp, #12
 800762c:	af00      	add	r7, sp, #0
 800762e:	4603      	mov	r3, r0
 8007630:	71fb      	strb	r3, [r7, #7]
	mySCARA.duty_State = state;
 8007632:	4a04      	ldr	r2, [pc, #16]	; (8007644 <scaraSetDutyState+0x1c>)
 8007634:	79fb      	ldrb	r3, [r7, #7]
 8007636:	7053      	strb	r3, [r2, #1]
}
 8007638:	bf00      	nop
 800763a:	370c      	adds	r7, #12
 800763c:	46bd      	mov	sp, r7
 800763e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007642:	4770      	bx	lr
 8007644:	20000c78 	.word	0x20000c78

08007648 <scaraGetPosition>:

void				scaraGetPosition	(SCARA_PositionTypeDef *pos) {
 8007648:	b580      	push	{r7, lr}
 800764a:	b082      	sub	sp, #8
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
	memcpy(pos, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 8007650:	2268      	movs	r2, #104	; 0x68
 8007652:	4904      	ldr	r1, [pc, #16]	; (8007664 <scaraGetPosition+0x1c>)
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f00b f8bb 	bl	80127d0 <memcpy>
}
 800765a:	bf00      	nop
 800765c:	3708      	adds	r7, #8
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}
 8007662:	bf00      	nop
 8007664:	20005cf0 	.word	0x20005cf0

08007668 <scaraSetMode>:

void				scaraSetMode(SCARA_ModeTypeDef mode) {
 8007668:	b480      	push	{r7}
 800766a:	b083      	sub	sp, #12
 800766c:	af00      	add	r7, sp, #0
 800766e:	4603      	mov	r3, r0
 8007670:	71fb      	strb	r3, [r7, #7]
	mySCARA.mode = mode;
 8007672:	4a04      	ldr	r2, [pc, #16]	; (8007684 <scaraSetMode+0x1c>)
 8007674:	79fb      	ldrb	r3, [r7, #7]
 8007676:	7013      	strb	r3, [r2, #0]
}
 8007678:	bf00      	nop
 800767a:	370c      	adds	r7, #12
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr
 8007684:	20000c78 	.word	0x20000c78

08007688 <scaraGetMode>:

SCARA_ModeTypeDef	scaraGetMode(void) {
 8007688:	b480      	push	{r7}
 800768a:	af00      	add	r7, sp, #0
	return mySCARA.mode;
 800768c:	4b03      	ldr	r3, [pc, #12]	; (800769c <scaraGetMode+0x14>)
 800768e:	781b      	ldrb	r3, [r3, #0]
}
 8007690:	4618      	mov	r0, r3
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr
 800769a:	bf00      	nop
 800769c:	20000c78 	.word	0x20000c78

080076a0 <scaraGetDutyState>:

SCARA_DutyStateTypeDef	scaraGetDutyState(void) {
 80076a0:	b480      	push	{r7}
 80076a2:	af00      	add	r7, sp, #0
	return mySCARA.duty_State;
 80076a4:	4b03      	ldr	r3, [pc, #12]	; (80076b4 <scaraGetDutyState+0x14>)
 80076a6:	785b      	ldrb	r3, [r3, #1]
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr
 80076b2:	bf00      	nop
 80076b4:	20000c78 	.word	0x20000c78

080076b8 <scaraIsScanLimit>:

uint8_t					scaraIsScanLimit(void) {
 80076b8:	b480      	push	{r7}
 80076ba:	af00      	add	r7, sp, #0
	return mySCARA.isScanLitmit;
 80076bc:	4b03      	ldr	r3, [pc, #12]	; (80076cc <scaraIsScanLimit+0x14>)
 80076be:	789b      	ldrb	r3, [r3, #2]
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	46bd      	mov	sp, r7
 80076c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c8:	4770      	bx	lr
 80076ca:	bf00      	nop
 80076cc:	20000c78 	.word	0x20000c78

080076d0 <scaraIsFinish>:

uint8_t					scaraIsFinish		(double run_time) {
 80076d0:	b590      	push	{r4, r7, lr}
 80076d2:	b083      	sub	sp, #12
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	ed87 0b00 	vstr	d0, [r7]
	if(myDUTY.time_total + 0.03 < run_time) {
 80076da:	4b11      	ldr	r3, [pc, #68]	; (8007720 <scaraIsFinish+0x50>)
 80076dc:	f603 1348 	addw	r3, r3, #2376	; 0x948
 80076e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80076e4:	a30c      	add	r3, pc, #48	; (adr r3, 8007718 <scaraIsFinish+0x48>)
 80076e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ea:	f7f8 fddf 	bl	80002ac <__adddf3>
 80076ee:	4603      	mov	r3, r0
 80076f0:	460c      	mov	r4, r1
 80076f2:	461a      	mov	r2, r3
 80076f4:	4623      	mov	r3, r4
 80076f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80076fa:	f7f9 fa1d 	bl	8000b38 <__aeabi_dcmpgt>
 80076fe:	4603      	mov	r3, r0
 8007700:	2b00      	cmp	r3, #0
 8007702:	d001      	beq.n	8007708 <scaraIsFinish+0x38>
		return TRUE;
 8007704:	2301      	movs	r3, #1
 8007706:	e000      	b.n	800770a <scaraIsFinish+0x3a>
	} else {
		return FALSE;
 8007708:	2300      	movs	r3, #0
	}
}
 800770a:	4618      	mov	r0, r3
 800770c:	370c      	adds	r7, #12
 800770e:	46bd      	mov	sp, r7
 8007710:	bd90      	pop	{r4, r7, pc}
 8007712:	bf00      	nop
 8007714:	f3af 8000 	nop.w
 8007718:	eb851eb8 	.word	0xeb851eb8
 800771c:	3f9eb851 	.word	0x3f9eb851
 8007720:	20005338 	.word	0x20005338
 8007724:	00000000 	.word	0x00000000

08007728 <scaraPosition2String>:

int32_t					scaraPosition2String(char * result, SCARA_PositionTypeDef position) {
 8007728:	b082      	sub	sp, #8
 800772a:	b590      	push	{r4, r7, lr}
 800772c:	b0af      	sub	sp, #188	; 0xbc
 800772e:	af0a      	add	r7, sp, #40	; 0x28
 8007730:	6078      	str	r0, [r7, #4]
 8007732:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8007736:	e881 000c 	stmia.w	r1, {r2, r3}
	uint8_t time[12];
	uint8_t total_time[12];

	int32_t lenght_buff;

	double2string(theta1, position.Theta1*180/PI, 6);
 800773a:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 800773e:	f04f 0200 	mov.w	r2, #0
 8007742:	4b7f      	ldr	r3, [pc, #508]	; (8007940 <scaraPosition2String+0x218>)
 8007744:	f7f8 ff68 	bl	8000618 <__aeabi_dmul>
 8007748:	4603      	mov	r3, r0
 800774a:	460c      	mov	r4, r1
 800774c:	4618      	mov	r0, r3
 800774e:	4621      	mov	r1, r4
 8007750:	a379      	add	r3, pc, #484	; (adr r3, 8007938 <scaraPosition2String+0x210>)
 8007752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007756:	f7f9 f889 	bl	800086c <__aeabi_ddiv>
 800775a:	4603      	mov	r3, r0
 800775c:	460c      	mov	r4, r1
 800775e:	ec44 3b17 	vmov	d7, r3, r4
 8007762:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8007766:	2106      	movs	r1, #6
 8007768:	eeb0 0a47 	vmov.f32	s0, s14
 800776c:	eef0 0a67 	vmov.f32	s1, s15
 8007770:	4618      	mov	r0, r3
 8007772:	f7fa f855 	bl	8001820 <double2string>
	double2string(theta2, position.Theta2*180/PI, 6);
 8007776:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800777a:	f04f 0200 	mov.w	r2, #0
 800777e:	4b70      	ldr	r3, [pc, #448]	; (8007940 <scaraPosition2String+0x218>)
 8007780:	f7f8 ff4a 	bl	8000618 <__aeabi_dmul>
 8007784:	4603      	mov	r3, r0
 8007786:	460c      	mov	r4, r1
 8007788:	4618      	mov	r0, r3
 800778a:	4621      	mov	r1, r4
 800778c:	a36a      	add	r3, pc, #424	; (adr r3, 8007938 <scaraPosition2String+0x210>)
 800778e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007792:	f7f9 f86b 	bl	800086c <__aeabi_ddiv>
 8007796:	4603      	mov	r3, r0
 8007798:	460c      	mov	r4, r1
 800779a:	ec44 3b17 	vmov	d7, r3, r4
 800779e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80077a2:	2106      	movs	r1, #6
 80077a4:	eeb0 0a47 	vmov.f32	s0, s14
 80077a8:	eef0 0a67 	vmov.f32	s1, s15
 80077ac:	4618      	mov	r0, r3
 80077ae:	f7fa f837 	bl	8001820 <double2string>
	double2string(d3, position.D3, 6);
 80077b2:	ed97 7b3e 	vldr	d7, [r7, #248]	; 0xf8
 80077b6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80077ba:	2106      	movs	r1, #6
 80077bc:	eeb0 0a47 	vmov.f32	s0, s14
 80077c0:	eef0 0a67 	vmov.f32	s1, s15
 80077c4:	4618      	mov	r0, r3
 80077c6:	f7fa f82b 	bl	8001820 <double2string>
	double2string(theta4, position.Theta4*180/PI, 6);
 80077ca:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 80077ce:	f04f 0200 	mov.w	r2, #0
 80077d2:	4b5b      	ldr	r3, [pc, #364]	; (8007940 <scaraPosition2String+0x218>)
 80077d4:	f7f8 ff20 	bl	8000618 <__aeabi_dmul>
 80077d8:	4603      	mov	r3, r0
 80077da:	460c      	mov	r4, r1
 80077dc:	4618      	mov	r0, r3
 80077de:	4621      	mov	r1, r4
 80077e0:	a355      	add	r3, pc, #340	; (adr r3, 8007938 <scaraPosition2String+0x210>)
 80077e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e6:	f7f9 f841 	bl	800086c <__aeabi_ddiv>
 80077ea:	4603      	mov	r3, r0
 80077ec:	460c      	mov	r4, r1
 80077ee:	ec44 3b17 	vmov	d7, r3, r4
 80077f2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80077f6:	2106      	movs	r1, #6
 80077f8:	eeb0 0a47 	vmov.f32	s0, s14
 80077fc:	eef0 0a67 	vmov.f32	s1, s15
 8007800:	4618      	mov	r0, r3
 8007802:	f7fa f80d 	bl	8001820 <double2string>
	double2string(x, position.x, 6);
 8007806:	ed97 7b32 	vldr	d7, [r7, #200]	; 0xc8
 800780a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800780e:	2106      	movs	r1, #6
 8007810:	eeb0 0a47 	vmov.f32	s0, s14
 8007814:	eef0 0a67 	vmov.f32	s1, s15
 8007818:	4618      	mov	r0, r3
 800781a:	f7fa f801 	bl	8001820 <double2string>
	double2string(y, position.y, 6);
 800781e:	ed97 7b34 	vldr	d7, [r7, #208]	; 0xd0
 8007822:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007826:	2106      	movs	r1, #6
 8007828:	eeb0 0a47 	vmov.f32	s0, s14
 800782c:	eef0 0a67 	vmov.f32	s1, s15
 8007830:	4618      	mov	r0, r3
 8007832:	f7f9 fff5 	bl	8001820 <double2string>
	double2string(z, position.z, 6);
 8007836:	ed97 7b36 	vldr	d7, [r7, #216]	; 0xd8
 800783a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800783e:	2106      	movs	r1, #6
 8007840:	eeb0 0a47 	vmov.f32	s0, s14
 8007844:	eef0 0a67 	vmov.f32	s1, s15
 8007848:	4618      	mov	r0, r3
 800784a:	f7f9 ffe9 	bl	8001820 <double2string>
	double2string(roll, position.roll*180/PI, 6);
 800784e:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007852:	f04f 0200 	mov.w	r2, #0
 8007856:	4b3a      	ldr	r3, [pc, #232]	; (8007940 <scaraPosition2String+0x218>)
 8007858:	f7f8 fede 	bl	8000618 <__aeabi_dmul>
 800785c:	4603      	mov	r3, r0
 800785e:	460c      	mov	r4, r1
 8007860:	4618      	mov	r0, r3
 8007862:	4621      	mov	r1, r4
 8007864:	a334      	add	r3, pc, #208	; (adr r3, 8007938 <scaraPosition2String+0x210>)
 8007866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800786a:	f7f8 ffff 	bl	800086c <__aeabi_ddiv>
 800786e:	4603      	mov	r3, r0
 8007870:	460c      	mov	r4, r1
 8007872:	ec44 3b17 	vmov	d7, r3, r4
 8007876:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800787a:	2106      	movs	r1, #6
 800787c:	eeb0 0a47 	vmov.f32	s0, s14
 8007880:	eef0 0a67 	vmov.f32	s1, s15
 8007884:	4618      	mov	r0, r3
 8007886:	f7f9 ffcb 	bl	8001820 <double2string>
	double2string(lenght, position.q, 6);
 800788a:	ed97 7b28 	vldr	d7, [r7, #160]	; 0xa0
 800788e:	f107 0320 	add.w	r3, r7, #32
 8007892:	2106      	movs	r1, #6
 8007894:	eeb0 0a47 	vmov.f32	s0, s14
 8007898:	eef0 0a67 	vmov.f32	s1, s15
 800789c:	4618      	mov	r0, r3
 800789e:	f7f9 ffbf 	bl	8001820 <double2string>
	double2string(total_time, position.total_time, 4);
 80078a2:	ed97 7b30 	vldr	d7, [r7, #192]	; 0xc0
 80078a6:	f107 0308 	add.w	r3, r7, #8
 80078aa:	2104      	movs	r1, #4
 80078ac:	eeb0 0a47 	vmov.f32	s0, s14
 80078b0:	eef0 0a67 	vmov.f32	s1, s15
 80078b4:	4618      	mov	r0, r3
 80078b6:	f7f9 ffb3 	bl	8001820 <double2string>
	double2string(time, position.t, 4);
 80078ba:	ed97 7b2e 	vldr	d7, [r7, #184]	; 0xb8
 80078be:	f107 0314 	add.w	r3, r7, #20
 80078c2:	2104      	movs	r1, #4
 80078c4:	eeb0 0a47 	vmov.f32	s0, s14
 80078c8:	eef0 0a67 	vmov.f32	s1, s15
 80078cc:	4618      	mov	r0, r3
 80078ce:	f7f9 ffa7 	bl	8001820 <double2string>
	lenght_buff = snprintf( (char *)result, 144,
 80078d2:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80078d6:	f107 0314 	add.w	r3, r7, #20
 80078da:	9309      	str	r3, [sp, #36]	; 0x24
 80078dc:	f107 0308 	add.w	r3, r7, #8
 80078e0:	9308      	str	r3, [sp, #32]
 80078e2:	f107 0320 	add.w	r3, r7, #32
 80078e6:	9307      	str	r3, [sp, #28]
 80078e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80078ec:	9306      	str	r3, [sp, #24]
 80078ee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80078f2:	9305      	str	r3, [sp, #20]
 80078f4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80078f8:	9304      	str	r3, [sp, #16]
 80078fa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80078fe:	9303      	str	r3, [sp, #12]
 8007900:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007904:	9302      	str	r3, [sp, #8]
 8007906:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800790a:	9301      	str	r3, [sp, #4]
 800790c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007910:	9300      	str	r3, [sp, #0]
 8007912:	4613      	mov	r3, r2
 8007914:	4a0b      	ldr	r2, [pc, #44]	; (8007944 <scaraPosition2String+0x21c>)
 8007916:	2190      	movs	r1, #144	; 0x90
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f00b fe81 	bl	8013620 <sniprintf>
 800791e:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
						z,
						roll,
						lenght,
						total_time,
						time);
	return lenght_buff;
 8007922:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
}
 8007926:	4618      	mov	r0, r3
 8007928:	3794      	adds	r7, #148	; 0x94
 800792a:	46bd      	mov	sp, r7
 800792c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8007930:	b002      	add	sp, #8
 8007932:	4770      	bx	lr
 8007934:	f3af 8000 	nop.w
 8007938:	60000000 	.word	0x60000000
 800793c:	400921fb 	.word	0x400921fb
 8007940:	40668000 	.word	0x40668000
 8007944:	080188c8 	.word	0x080188c8

08007948 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b082      	sub	sp, #8
 800794c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800794e:	2300      	movs	r3, #0
 8007950:	607b      	str	r3, [r7, #4]
 8007952:	4b12      	ldr	r3, [pc, #72]	; (800799c <HAL_MspInit+0x54>)
 8007954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007956:	4a11      	ldr	r2, [pc, #68]	; (800799c <HAL_MspInit+0x54>)
 8007958:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800795c:	6453      	str	r3, [r2, #68]	; 0x44
 800795e:	4b0f      	ldr	r3, [pc, #60]	; (800799c <HAL_MspInit+0x54>)
 8007960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007962:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007966:	607b      	str	r3, [r7, #4]
 8007968:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800796a:	2300      	movs	r3, #0
 800796c:	603b      	str	r3, [r7, #0]
 800796e:	4b0b      	ldr	r3, [pc, #44]	; (800799c <HAL_MspInit+0x54>)
 8007970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007972:	4a0a      	ldr	r2, [pc, #40]	; (800799c <HAL_MspInit+0x54>)
 8007974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007978:	6413      	str	r3, [r2, #64]	; 0x40
 800797a:	4b08      	ldr	r3, [pc, #32]	; (800799c <HAL_MspInit+0x54>)
 800797c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800797e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007982:	603b      	str	r3, [r7, #0]
 8007984:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8007986:	2200      	movs	r2, #0
 8007988:	210f      	movs	r1, #15
 800798a:	f06f 0001 	mvn.w	r0, #1
 800798e:	f000 fb85 	bl	800809c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007992:	bf00      	nop
 8007994:	3708      	adds	r7, #8
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}
 800799a:	bf00      	nop
 800799c:	40023800 	.word	0x40023800

080079a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b08c      	sub	sp, #48	; 0x30
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80079a8:	2300      	movs	r3, #0
 80079aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80079ac:	2300      	movs	r3, #0
 80079ae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 80079b0:	2200      	movs	r2, #0
 80079b2:	6879      	ldr	r1, [r7, #4]
 80079b4:	2036      	movs	r0, #54	; 0x36
 80079b6:	f000 fb71 	bl	800809c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 80079ba:	2036      	movs	r0, #54	; 0x36
 80079bc:	f000 fb8a 	bl	80080d4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80079c0:	2300      	movs	r3, #0
 80079c2:	60fb      	str	r3, [r7, #12]
 80079c4:	4b1f      	ldr	r3, [pc, #124]	; (8007a44 <HAL_InitTick+0xa4>)
 80079c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079c8:	4a1e      	ldr	r2, [pc, #120]	; (8007a44 <HAL_InitTick+0xa4>)
 80079ca:	f043 0310 	orr.w	r3, r3, #16
 80079ce:	6413      	str	r3, [r2, #64]	; 0x40
 80079d0:	4b1c      	ldr	r3, [pc, #112]	; (8007a44 <HAL_InitTick+0xa4>)
 80079d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079d4:	f003 0310 	and.w	r3, r3, #16
 80079d8:	60fb      	str	r3, [r7, #12]
 80079da:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80079dc:	f107 0210 	add.w	r2, r7, #16
 80079e0:	f107 0314 	add.w	r3, r7, #20
 80079e4:	4611      	mov	r1, r2
 80079e6:	4618      	mov	r0, r3
 80079e8:	f002 ff16 	bl	800a818 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80079ec:	f002 feec 	bl	800a7c8 <HAL_RCC_GetPCLK1Freq>
 80079f0:	4603      	mov	r3, r0
 80079f2:	005b      	lsls	r3, r3, #1
 80079f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80079f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079f8:	4a13      	ldr	r2, [pc, #76]	; (8007a48 <HAL_InitTick+0xa8>)
 80079fa:	fba2 2303 	umull	r2, r3, r2, r3
 80079fe:	0c9b      	lsrs	r3, r3, #18
 8007a00:	3b01      	subs	r3, #1
 8007a02:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8007a04:	4b11      	ldr	r3, [pc, #68]	; (8007a4c <HAL_InitTick+0xac>)
 8007a06:	4a12      	ldr	r2, [pc, #72]	; (8007a50 <HAL_InitTick+0xb0>)
 8007a08:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8007a0a:	4b10      	ldr	r3, [pc, #64]	; (8007a4c <HAL_InitTick+0xac>)
 8007a0c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8007a10:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8007a12:	4a0e      	ldr	r2, [pc, #56]	; (8007a4c <HAL_InitTick+0xac>)
 8007a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a16:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8007a18:	4b0c      	ldr	r3, [pc, #48]	; (8007a4c <HAL_InitTick+0xac>)
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007a1e:	4b0b      	ldr	r3, [pc, #44]	; (8007a4c <HAL_InitTick+0xac>)
 8007a20:	2200      	movs	r2, #0
 8007a22:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8007a24:	4809      	ldr	r0, [pc, #36]	; (8007a4c <HAL_InitTick+0xac>)
 8007a26:	f002 ff29 	bl	800a87c <HAL_TIM_Base_Init>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d104      	bne.n	8007a3a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8007a30:	4806      	ldr	r0, [pc, #24]	; (8007a4c <HAL_InitTick+0xac>)
 8007a32:	f002 ff4e 	bl	800a8d2 <HAL_TIM_Base_Start_IT>
 8007a36:	4603      	mov	r3, r0
 8007a38:	e000      	b.n	8007a3c <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8007a3a:	2301      	movs	r3, #1
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3730      	adds	r7, #48	; 0x30
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}
 8007a44:	40023800 	.word	0x40023800
 8007a48:	431bde83 	.word	0x431bde83
 8007a4c:	20005dc0 	.word	0x20005dc0
 8007a50:	40001000 	.word	0x40001000

08007a54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007a54:	b480      	push	{r7}
 8007a56:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007a58:	bf00      	nop
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a60:	4770      	bx	lr
	...

08007a64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  LOG_REPORT("ic.c: HARDFAULT ERROR", __LINE__);
 8007a68:	2164      	movs	r1, #100	; 0x64
 8007a6a:	4802      	ldr	r0, [pc, #8]	; (8007a74 <HardFault_Handler+0x10>)
 8007a6c:	f7f9 fe92 	bl	8001794 <LOG_REPORT>
 8007a70:	e7fa      	b.n	8007a68 <HardFault_Handler+0x4>
 8007a72:	bf00      	nop
 8007a74:	080188ec 	.word	0x080188ec

08007a78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  LOG_REPORT("ic.c: MEMORY ERROR", __LINE__);
 8007a7c:	2174      	movs	r1, #116	; 0x74
 8007a7e:	4802      	ldr	r0, [pc, #8]	; (8007a88 <MemManage_Handler+0x10>)
 8007a80:	f7f9 fe88 	bl	8001794 <LOG_REPORT>
 8007a84:	e7fa      	b.n	8007a7c <MemManage_Handler+0x4>
 8007a86:	bf00      	nop
 8007a88:	08018904 	.word	0x08018904

08007a8c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  LOG_REPORT("ic.c: BUS ERROR", __LINE__);
 8007a90:	2184      	movs	r1, #132	; 0x84
 8007a92:	4802      	ldr	r0, [pc, #8]	; (8007a9c <BusFault_Handler+0x10>)
 8007a94:	f7f9 fe7e 	bl	8001794 <LOG_REPORT>
 8007a98:	e7fa      	b.n	8007a90 <BusFault_Handler+0x4>
 8007a9a:	bf00      	nop
 8007a9c:	08018918 	.word	0x08018918

08007aa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007aa4:	e7fe      	b.n	8007aa4 <UsageFault_Handler+0x4>

08007aa6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007aa6:	b480      	push	{r7}
 8007aa8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007aaa:	bf00      	nop
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr

08007ab4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8007ab8:	4802      	ldr	r0, [pc, #8]	; (8007ac4 <DMA1_Stream4_IRQHandler+0x10>)
 8007aba:	f000 fc41 	bl	8008340 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8007abe:	bf00      	nop
 8007ac0:	bd80      	pop	{r7, pc}
 8007ac2:	bf00      	nop
 8007ac4:	20005e80 	.word	0x20005e80

08007ac8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8007acc:	4802      	ldr	r0, [pc, #8]	; (8007ad8 <UART4_IRQHandler+0x10>)
 8007ace:	f003 fa3f 	bl	800af50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8007ad2:	bf00      	nop
 8007ad4:	bd80      	pop	{r7, pc}
 8007ad6:	bf00      	nop
 8007ad8:	20005e40 	.word	0x20005e40

08007adc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8007ae0:	4802      	ldr	r0, [pc, #8]	; (8007aec <TIM6_DAC_IRQHandler+0x10>)
 8007ae2:	f002 ff1a 	bl	800a91a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8007ae6:	bf00      	nop
 8007ae8:	bd80      	pop	{r7, pc}
 8007aea:	bf00      	nop
 8007aec:	20005dc0 	.word	0x20005dc0

08007af0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	osSignalSet(defaultTaskHandle, 0x01);
 8007af4:	4b05      	ldr	r3, [pc, #20]	; (8007b0c <TIM7_IRQHandler+0x1c>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	2101      	movs	r1, #1
 8007afa:	4618      	mov	r0, r3
 8007afc:	f006 ffe8 	bl	800ead0 <osSignalSet>
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8007b00:	4803      	ldr	r0, [pc, #12]	; (8007b10 <TIM7_IRQHandler+0x20>)
 8007b02:	f002 ff0a 	bl	800a91a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8007b06:	bf00      	nop
 8007b08:	bd80      	pop	{r7, pc}
 8007b0a:	bf00      	nop
 8007b0c:	200052dc 	.word	0x200052dc
 8007b10:	20005e00 	.word	0x20005e00

08007b14 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8007b18:	4802      	ldr	r0, [pc, #8]	; (8007b24 <OTG_FS_IRQHandler+0x10>)
 8007b1a:	f001 f9e1 	bl	8008ee0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8007b1e:	bf00      	nop
 8007b20:	bd80      	pop	{r7, pc}
 8007b22:	bf00      	nop
 8007b24:	20006788 	.word	0x20006788

08007b28 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b084      	sub	sp, #16
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007b30:	4b11      	ldr	r3, [pc, #68]	; (8007b78 <_sbrk+0x50>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d102      	bne.n	8007b3e <_sbrk+0x16>
		heap_end = &end;
 8007b38:	4b0f      	ldr	r3, [pc, #60]	; (8007b78 <_sbrk+0x50>)
 8007b3a:	4a10      	ldr	r2, [pc, #64]	; (8007b7c <_sbrk+0x54>)
 8007b3c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8007b3e:	4b0e      	ldr	r3, [pc, #56]	; (8007b78 <_sbrk+0x50>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007b44:	4b0c      	ldr	r3, [pc, #48]	; (8007b78 <_sbrk+0x50>)
 8007b46:	681a      	ldr	r2, [r3, #0]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	4413      	add	r3, r2
 8007b4c:	466a      	mov	r2, sp
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d907      	bls.n	8007b62 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8007b52:	f00a fe03 	bl	801275c <__errno>
 8007b56:	4602      	mov	r2, r0
 8007b58:	230c      	movs	r3, #12
 8007b5a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8007b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8007b60:	e006      	b.n	8007b70 <_sbrk+0x48>
	}

	heap_end += incr;
 8007b62:	4b05      	ldr	r3, [pc, #20]	; (8007b78 <_sbrk+0x50>)
 8007b64:	681a      	ldr	r2, [r3, #0]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	4413      	add	r3, r2
 8007b6a:	4a03      	ldr	r2, [pc, #12]	; (8007b78 <_sbrk+0x50>)
 8007b6c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	3710      	adds	r7, #16
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}
 8007b78:	2000147c 	.word	0x2000147c
 8007b7c:	20006b98 	.word	0x20006b98

08007b80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007b80:	b480      	push	{r7}
 8007b82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007b84:	4b08      	ldr	r3, [pc, #32]	; (8007ba8 <SystemInit+0x28>)
 8007b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b8a:	4a07      	ldr	r2, [pc, #28]	; (8007ba8 <SystemInit+0x28>)
 8007b8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007b90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007b94:	4b04      	ldr	r3, [pc, #16]	; (8007ba8 <SystemInit+0x28>)
 8007b96:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007b9a:	609a      	str	r2, [r3, #8]
#endif
}
 8007b9c:	bf00      	nop
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba4:	4770      	bx	lr
 8007ba6:	bf00      	nop
 8007ba8:	e000ed00 	.word	0xe000ed00

08007bac <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b082      	sub	sp, #8
 8007bb0:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007bb2:	463b      	mov	r3, r7
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	601a      	str	r2, [r3, #0]
 8007bb8:	605a      	str	r2, [r3, #4]

  htim7.Instance = TIM7;
 8007bba:	4b15      	ldr	r3, [pc, #84]	; (8007c10 <MX_TIM7_Init+0x64>)
 8007bbc:	4a15      	ldr	r2, [pc, #84]	; (8007c14 <MX_TIM7_Init+0x68>)
 8007bbe:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 8007bc0:	4b13      	ldr	r3, [pc, #76]	; (8007c10 <MX_TIM7_Init+0x64>)
 8007bc2:	2253      	movs	r2, #83	; 0x53
 8007bc4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007bc6:	4b12      	ldr	r3, [pc, #72]	; (8007c10 <MX_TIM7_Init+0x64>)
 8007bc8:	2200      	movs	r2, #0
 8007bca:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 8007bcc:	4b10      	ldr	r3, [pc, #64]	; (8007c10 <MX_TIM7_Init+0x64>)
 8007bce:	f242 720f 	movw	r2, #9999	; 0x270f
 8007bd2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007bd4:	4b0e      	ldr	r3, [pc, #56]	; (8007c10 <MX_TIM7_Init+0x64>)
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8007bda:	480d      	ldr	r0, [pc, #52]	; (8007c10 <MX_TIM7_Init+0x64>)
 8007bdc:	f002 fe4e 	bl	800a87c <HAL_TIM_Base_Init>
 8007be0:	4603      	mov	r3, r0
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d001      	beq.n	8007bea <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8007be6:	f7fb fbb7 	bl	8003358 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007bea:	2300      	movs	r3, #0
 8007bec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8007bf2:	463b      	mov	r3, r7
 8007bf4:	4619      	mov	r1, r3
 8007bf6:	4806      	ldr	r0, [pc, #24]	; (8007c10 <MX_TIM7_Init+0x64>)
 8007bf8:	f003 f860 	bl	800acbc <HAL_TIMEx_MasterConfigSynchronization>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d001      	beq.n	8007c06 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8007c02:	f7fb fba9 	bl	8003358 <Error_Handler>
  }

}
 8007c06:	bf00      	nop
 8007c08:	3708      	adds	r7, #8
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}
 8007c0e:	bf00      	nop
 8007c10:	20005e00 	.word	0x20005e00
 8007c14:	40001400 	.word	0x40001400

08007c18 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b084      	sub	sp, #16
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a0e      	ldr	r2, [pc, #56]	; (8007c60 <HAL_TIM_Base_MspInit+0x48>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d115      	bne.n	8007c56 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	60fb      	str	r3, [r7, #12]
 8007c2e:	4b0d      	ldr	r3, [pc, #52]	; (8007c64 <HAL_TIM_Base_MspInit+0x4c>)
 8007c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c32:	4a0c      	ldr	r2, [pc, #48]	; (8007c64 <HAL_TIM_Base_MspInit+0x4c>)
 8007c34:	f043 0320 	orr.w	r3, r3, #32
 8007c38:	6413      	str	r3, [r2, #64]	; 0x40
 8007c3a:	4b0a      	ldr	r3, [pc, #40]	; (8007c64 <HAL_TIM_Base_MspInit+0x4c>)
 8007c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c3e:	f003 0320 	and.w	r3, r3, #32
 8007c42:	60fb      	str	r3, [r7, #12]
 8007c44:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8007c46:	2200      	movs	r2, #0
 8007c48:	2105      	movs	r1, #5
 8007c4a:	2037      	movs	r0, #55	; 0x37
 8007c4c:	f000 fa26 	bl	800809c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8007c50:	2037      	movs	r0, #55	; 0x37
 8007c52:	f000 fa3f 	bl	80080d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8007c56:	bf00      	nop
 8007c58:	3710      	adds	r7, #16
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}
 8007c5e:	bf00      	nop
 8007c60:	40001400 	.word	0x40001400
 8007c64:	40023800 	.word	0x40023800

08007c68 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
DMA_HandleTypeDef hdma_uart4_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8007c6c:	4b11      	ldr	r3, [pc, #68]	; (8007cb4 <MX_UART4_Init+0x4c>)
 8007c6e:	4a12      	ldr	r2, [pc, #72]	; (8007cb8 <MX_UART4_Init+0x50>)
 8007c70:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8007c72:	4b10      	ldr	r3, [pc, #64]	; (8007cb4 <MX_UART4_Init+0x4c>)
 8007c74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007c78:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8007c7a:	4b0e      	ldr	r3, [pc, #56]	; (8007cb4 <MX_UART4_Init+0x4c>)
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8007c80:	4b0c      	ldr	r3, [pc, #48]	; (8007cb4 <MX_UART4_Init+0x4c>)
 8007c82:	2200      	movs	r2, #0
 8007c84:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8007c86:	4b0b      	ldr	r3, [pc, #44]	; (8007cb4 <MX_UART4_Init+0x4c>)
 8007c88:	2200      	movs	r2, #0
 8007c8a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8007c8c:	4b09      	ldr	r3, [pc, #36]	; (8007cb4 <MX_UART4_Init+0x4c>)
 8007c8e:	220c      	movs	r2, #12
 8007c90:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007c92:	4b08      	ldr	r3, [pc, #32]	; (8007cb4 <MX_UART4_Init+0x4c>)
 8007c94:	2200      	movs	r2, #0
 8007c96:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8007c98:	4b06      	ldr	r3, [pc, #24]	; (8007cb4 <MX_UART4_Init+0x4c>)
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8007c9e:	4805      	ldr	r0, [pc, #20]	; (8007cb4 <MX_UART4_Init+0x4c>)
 8007ca0:	f003 f89c 	bl	800addc <HAL_UART_Init>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d001      	beq.n	8007cae <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8007caa:	f7fb fb55 	bl	8003358 <Error_Handler>
  }

}
 8007cae:	bf00      	nop
 8007cb0:	bd80      	pop	{r7, pc}
 8007cb2:	bf00      	nop
 8007cb4:	20005e40 	.word	0x20005e40
 8007cb8:	40004c00 	.word	0x40004c00

08007cbc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b08a      	sub	sp, #40	; 0x28
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007cc4:	f107 0314 	add.w	r3, r7, #20
 8007cc8:	2200      	movs	r2, #0
 8007cca:	601a      	str	r2, [r3, #0]
 8007ccc:	605a      	str	r2, [r3, #4]
 8007cce:	609a      	str	r2, [r3, #8]
 8007cd0:	60da      	str	r2, [r3, #12]
 8007cd2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4a34      	ldr	r2, [pc, #208]	; (8007dac <HAL_UART_MspInit+0xf0>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d161      	bne.n	8007da2 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8007cde:	2300      	movs	r3, #0
 8007ce0:	613b      	str	r3, [r7, #16]
 8007ce2:	4b33      	ldr	r3, [pc, #204]	; (8007db0 <HAL_UART_MspInit+0xf4>)
 8007ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ce6:	4a32      	ldr	r2, [pc, #200]	; (8007db0 <HAL_UART_MspInit+0xf4>)
 8007ce8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007cec:	6413      	str	r3, [r2, #64]	; 0x40
 8007cee:	4b30      	ldr	r3, [pc, #192]	; (8007db0 <HAL_UART_MspInit+0xf4>)
 8007cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cf2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007cf6:	613b      	str	r3, [r7, #16]
 8007cf8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	60fb      	str	r3, [r7, #12]
 8007cfe:	4b2c      	ldr	r3, [pc, #176]	; (8007db0 <HAL_UART_MspInit+0xf4>)
 8007d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d02:	4a2b      	ldr	r2, [pc, #172]	; (8007db0 <HAL_UART_MspInit+0xf4>)
 8007d04:	f043 0301 	orr.w	r3, r3, #1
 8007d08:	6313      	str	r3, [r2, #48]	; 0x30
 8007d0a:	4b29      	ldr	r3, [pc, #164]	; (8007db0 <HAL_UART_MspInit+0xf4>)
 8007d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d0e:	f003 0301 	and.w	r3, r3, #1
 8007d12:	60fb      	str	r3, [r7, #12]
 8007d14:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration    
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8007d16:	2303      	movs	r3, #3
 8007d18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d1a:	2302      	movs	r3, #2
 8007d1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d22:	2303      	movs	r3, #3
 8007d24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8007d26:	2308      	movs	r3, #8
 8007d28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d2a:	f107 0314 	add.w	r3, r7, #20
 8007d2e:	4619      	mov	r1, r3
 8007d30:	4820      	ldr	r0, [pc, #128]	; (8007db4 <HAL_UART_MspInit+0xf8>)
 8007d32:	f000 fd7b 	bl	800882c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8007d36:	4b20      	ldr	r3, [pc, #128]	; (8007db8 <HAL_UART_MspInit+0xfc>)
 8007d38:	4a20      	ldr	r2, [pc, #128]	; (8007dbc <HAL_UART_MspInit+0x100>)
 8007d3a:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8007d3c:	4b1e      	ldr	r3, [pc, #120]	; (8007db8 <HAL_UART_MspInit+0xfc>)
 8007d3e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007d42:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007d44:	4b1c      	ldr	r3, [pc, #112]	; (8007db8 <HAL_UART_MspInit+0xfc>)
 8007d46:	2240      	movs	r2, #64	; 0x40
 8007d48:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007d4a:	4b1b      	ldr	r3, [pc, #108]	; (8007db8 <HAL_UART_MspInit+0xfc>)
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007d50:	4b19      	ldr	r3, [pc, #100]	; (8007db8 <HAL_UART_MspInit+0xfc>)
 8007d52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007d56:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007d58:	4b17      	ldr	r3, [pc, #92]	; (8007db8 <HAL_UART_MspInit+0xfc>)
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007d5e:	4b16      	ldr	r3, [pc, #88]	; (8007db8 <HAL_UART_MspInit+0xfc>)
 8007d60:	2200      	movs	r2, #0
 8007d62:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8007d64:	4b14      	ldr	r3, [pc, #80]	; (8007db8 <HAL_UART_MspInit+0xfc>)
 8007d66:	2200      	movs	r2, #0
 8007d68:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007d6a:	4b13      	ldr	r3, [pc, #76]	; (8007db8 <HAL_UART_MspInit+0xfc>)
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007d70:	4b11      	ldr	r3, [pc, #68]	; (8007db8 <HAL_UART_MspInit+0xfc>)
 8007d72:	2200      	movs	r2, #0
 8007d74:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8007d76:	4810      	ldr	r0, [pc, #64]	; (8007db8 <HAL_UART_MspInit+0xfc>)
 8007d78:	f000 f9ba 	bl	80080f0 <HAL_DMA_Init>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d001      	beq.n	8007d86 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8007d82:	f7fb fae9 	bl	8003358 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	4a0b      	ldr	r2, [pc, #44]	; (8007db8 <HAL_UART_MspInit+0xfc>)
 8007d8a:	631a      	str	r2, [r3, #48]	; 0x30
 8007d8c:	4a0a      	ldr	r2, [pc, #40]	; (8007db8 <HAL_UART_MspInit+0xfc>)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8007d92:	2200      	movs	r2, #0
 8007d94:	2105      	movs	r1, #5
 8007d96:	2034      	movs	r0, #52	; 0x34
 8007d98:	f000 f980 	bl	800809c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8007d9c:	2034      	movs	r0, #52	; 0x34
 8007d9e:	f000 f999 	bl	80080d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8007da2:	bf00      	nop
 8007da4:	3728      	adds	r7, #40	; 0x28
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}
 8007daa:	bf00      	nop
 8007dac:	40004c00 	.word	0x40004c00
 8007db0:	40023800 	.word	0x40023800
 8007db4:	40020000 	.word	0x40020000
 8007db8:	20005e80 	.word	0x20005e80
 8007dbc:	40026070 	.word	0x40026070

08007dc0 <HAL_UART_TxCpltCallback>:
  /* USER CODE END UART4_MspDeInit 1 */
  }
} 

/* USER CODE BEGIN 1 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b084      	sub	sp, #16
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
	if (UART4 == huart->Instance) {
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a0c      	ldr	r2, [pc, #48]	; (8007e00 <HAL_UART_TxCpltCallback+0x40>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d112      	bne.n	8007df8 <HAL_UART_TxCpltCallback+0x38>
		uint16_t size_dma;
		size_dma = ringBuff_PopArray(&uart_tx_ringbuff, log_uart_dma_buff, LOG_BUFFER_SIZE);
 8007dd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007dd6:	490b      	ldr	r1, [pc, #44]	; (8007e04 <HAL_UART_TxCpltCallback+0x44>)
 8007dd8:	480b      	ldr	r0, [pc, #44]	; (8007e08 <HAL_UART_TxCpltCallback+0x48>)
 8007dda:	f7fb fb5c 	bl	8003496 <ringBuff_PopArray>
 8007dde:	4603      	mov	r3, r0
 8007de0:	81fb      	strh	r3, [r7, #14]
		if (0 == size_dma) {
 8007de2:	89fb      	ldrh	r3, [r7, #14]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d006      	beq.n	8007df6 <HAL_UART_TxCpltCallback+0x36>
			return;
		}
		HAL_UART_Transmit_DMA(&huart4, log_uart_dma_buff, size_dma);
 8007de8:	89fb      	ldrh	r3, [r7, #14]
 8007dea:	461a      	mov	r2, r3
 8007dec:	4905      	ldr	r1, [pc, #20]	; (8007e04 <HAL_UART_TxCpltCallback+0x44>)
 8007dee:	4807      	ldr	r0, [pc, #28]	; (8007e0c <HAL_UART_TxCpltCallback+0x4c>)
 8007df0:	f003 f842 	bl	800ae78 <HAL_UART_Transmit_DMA>
 8007df4:	e000      	b.n	8007df8 <HAL_UART_TxCpltCallback+0x38>
			return;
 8007df6:	bf00      	nop
	}
}
 8007df8:	3710      	adds	r7, #16
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}
 8007dfe:	bf00      	nop
 8007e00:	40004c00 	.word	0x40004c00
 8007e04:	200051dc 	.word	0x200051dc
 8007e08:	2000086c 	.word	0x2000086c
 8007e0c:	20005e40 	.word	0x20005e40

08007e10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8007e10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007e48 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007e14:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007e16:	e003      	b.n	8007e20 <LoopCopyDataInit>

08007e18 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007e18:	4b0c      	ldr	r3, [pc, #48]	; (8007e4c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007e1a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007e1c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007e1e:	3104      	adds	r1, #4

08007e20 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007e20:	480b      	ldr	r0, [pc, #44]	; (8007e50 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007e22:	4b0c      	ldr	r3, [pc, #48]	; (8007e54 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007e24:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007e26:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007e28:	d3f6      	bcc.n	8007e18 <CopyDataInit>
  ldr  r2, =_sbss
 8007e2a:	4a0b      	ldr	r2, [pc, #44]	; (8007e58 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007e2c:	e002      	b.n	8007e34 <LoopFillZerobss>

08007e2e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007e2e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007e30:	f842 3b04 	str.w	r3, [r2], #4

08007e34 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007e34:	4b09      	ldr	r3, [pc, #36]	; (8007e5c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007e36:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007e38:	d3f9      	bcc.n	8007e2e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007e3a:	f7ff fea1 	bl	8007b80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007e3e:	f00a fc93 	bl	8012768 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007e42:	f7fb f9f7 	bl	8003234 <main>
  bx  lr    
 8007e46:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8007e48:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8007e4c:	08018f08 	.word	0x08018f08
  ldr  r0, =_sdata
 8007e50:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007e54:	20001008 	.word	0x20001008
  ldr  r2, =_sbss
 8007e58:	20001008 	.word	0x20001008
  ldr  r3, = _ebss
 8007e5c:	20006b94 	.word	0x20006b94

08007e60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007e60:	e7fe      	b.n	8007e60 <ADC_IRQHandler>
	...

08007e64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007e68:	4b0e      	ldr	r3, [pc, #56]	; (8007ea4 <HAL_Init+0x40>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4a0d      	ldr	r2, [pc, #52]	; (8007ea4 <HAL_Init+0x40>)
 8007e6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007e72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007e74:	4b0b      	ldr	r3, [pc, #44]	; (8007ea4 <HAL_Init+0x40>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4a0a      	ldr	r2, [pc, #40]	; (8007ea4 <HAL_Init+0x40>)
 8007e7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007e7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007e80:	4b08      	ldr	r3, [pc, #32]	; (8007ea4 <HAL_Init+0x40>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4a07      	ldr	r2, [pc, #28]	; (8007ea4 <HAL_Init+0x40>)
 8007e86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007e8c:	2003      	movs	r0, #3
 8007e8e:	f000 f8fa 	bl	8008086 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007e92:	2000      	movs	r0, #0
 8007e94:	f7ff fd84 	bl	80079a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007e98:	f7ff fd56 	bl	8007948 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007e9c:	2300      	movs	r3, #0
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	bd80      	pop	{r7, pc}
 8007ea2:	bf00      	nop
 8007ea4:	40023c00 	.word	0x40023c00

08007ea8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007eac:	4b06      	ldr	r3, [pc, #24]	; (8007ec8 <HAL_IncTick+0x20>)
 8007eae:	781b      	ldrb	r3, [r3, #0]
 8007eb0:	461a      	mov	r2, r3
 8007eb2:	4b06      	ldr	r3, [pc, #24]	; (8007ecc <HAL_IncTick+0x24>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4413      	add	r3, r2
 8007eb8:	4a04      	ldr	r2, [pc, #16]	; (8007ecc <HAL_IncTick+0x24>)
 8007eba:	6013      	str	r3, [r2, #0]
}
 8007ebc:	bf00      	nop
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec4:	4770      	bx	lr
 8007ec6:	bf00      	nop
 8007ec8:	20000cbc 	.word	0x20000cbc
 8007ecc:	20005ee0 	.word	0x20005ee0

08007ed0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	af00      	add	r7, sp, #0
  return uwTick;
 8007ed4:	4b03      	ldr	r3, [pc, #12]	; (8007ee4 <HAL_GetTick+0x14>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	46bd      	mov	sp, r7
 8007edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee0:	4770      	bx	lr
 8007ee2:	bf00      	nop
 8007ee4:	20005ee0 	.word	0x20005ee0

08007ee8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b084      	sub	sp, #16
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007ef0:	f7ff ffee 	bl	8007ed0 <HAL_GetTick>
 8007ef4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f00:	d005      	beq.n	8007f0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007f02:	4b09      	ldr	r3, [pc, #36]	; (8007f28 <HAL_Delay+0x40>)
 8007f04:	781b      	ldrb	r3, [r3, #0]
 8007f06:	461a      	mov	r2, r3
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	4413      	add	r3, r2
 8007f0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007f0e:	bf00      	nop
 8007f10:	f7ff ffde 	bl	8007ed0 <HAL_GetTick>
 8007f14:	4602      	mov	r2, r0
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	1ad3      	subs	r3, r2, r3
 8007f1a:	68fa      	ldr	r2, [r7, #12]
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	d8f7      	bhi.n	8007f10 <HAL_Delay+0x28>
  {
  }
}
 8007f20:	bf00      	nop
 8007f22:	3710      	adds	r7, #16
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}
 8007f28:	20000cbc 	.word	0x20000cbc

08007f2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b085      	sub	sp, #20
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f003 0307 	and.w	r3, r3, #7
 8007f3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007f3c:	4b0c      	ldr	r3, [pc, #48]	; (8007f70 <__NVIC_SetPriorityGrouping+0x44>)
 8007f3e:	68db      	ldr	r3, [r3, #12]
 8007f40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007f42:	68ba      	ldr	r2, [r7, #8]
 8007f44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007f48:	4013      	ands	r3, r2
 8007f4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007f54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007f58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007f5e:	4a04      	ldr	r2, [pc, #16]	; (8007f70 <__NVIC_SetPriorityGrouping+0x44>)
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	60d3      	str	r3, [r2, #12]
}
 8007f64:	bf00      	nop
 8007f66:	3714      	adds	r7, #20
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6e:	4770      	bx	lr
 8007f70:	e000ed00 	.word	0xe000ed00

08007f74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007f74:	b480      	push	{r7}
 8007f76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007f78:	4b04      	ldr	r3, [pc, #16]	; (8007f8c <__NVIC_GetPriorityGrouping+0x18>)
 8007f7a:	68db      	ldr	r3, [r3, #12]
 8007f7c:	0a1b      	lsrs	r3, r3, #8
 8007f7e:	f003 0307 	and.w	r3, r3, #7
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr
 8007f8c:	e000ed00 	.word	0xe000ed00

08007f90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b083      	sub	sp, #12
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	4603      	mov	r3, r0
 8007f98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	db0b      	blt.n	8007fba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007fa2:	79fb      	ldrb	r3, [r7, #7]
 8007fa4:	f003 021f 	and.w	r2, r3, #31
 8007fa8:	4907      	ldr	r1, [pc, #28]	; (8007fc8 <__NVIC_EnableIRQ+0x38>)
 8007faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007fae:	095b      	lsrs	r3, r3, #5
 8007fb0:	2001      	movs	r0, #1
 8007fb2:	fa00 f202 	lsl.w	r2, r0, r2
 8007fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007fba:	bf00      	nop
 8007fbc:	370c      	adds	r7, #12
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc4:	4770      	bx	lr
 8007fc6:	bf00      	nop
 8007fc8:	e000e100 	.word	0xe000e100

08007fcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b083      	sub	sp, #12
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	6039      	str	r1, [r7, #0]
 8007fd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	db0a      	blt.n	8007ff6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	b2da      	uxtb	r2, r3
 8007fe4:	490c      	ldr	r1, [pc, #48]	; (8008018 <__NVIC_SetPriority+0x4c>)
 8007fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007fea:	0112      	lsls	r2, r2, #4
 8007fec:	b2d2      	uxtb	r2, r2
 8007fee:	440b      	add	r3, r1
 8007ff0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007ff4:	e00a      	b.n	800800c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	b2da      	uxtb	r2, r3
 8007ffa:	4908      	ldr	r1, [pc, #32]	; (800801c <__NVIC_SetPriority+0x50>)
 8007ffc:	79fb      	ldrb	r3, [r7, #7]
 8007ffe:	f003 030f 	and.w	r3, r3, #15
 8008002:	3b04      	subs	r3, #4
 8008004:	0112      	lsls	r2, r2, #4
 8008006:	b2d2      	uxtb	r2, r2
 8008008:	440b      	add	r3, r1
 800800a:	761a      	strb	r2, [r3, #24]
}
 800800c:	bf00      	nop
 800800e:	370c      	adds	r7, #12
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr
 8008018:	e000e100 	.word	0xe000e100
 800801c:	e000ed00 	.word	0xe000ed00

08008020 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008020:	b480      	push	{r7}
 8008022:	b089      	sub	sp, #36	; 0x24
 8008024:	af00      	add	r7, sp, #0
 8008026:	60f8      	str	r0, [r7, #12]
 8008028:	60b9      	str	r1, [r7, #8]
 800802a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f003 0307 	and.w	r3, r3, #7
 8008032:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008034:	69fb      	ldr	r3, [r7, #28]
 8008036:	f1c3 0307 	rsb	r3, r3, #7
 800803a:	2b04      	cmp	r3, #4
 800803c:	bf28      	it	cs
 800803e:	2304      	movcs	r3, #4
 8008040:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008042:	69fb      	ldr	r3, [r7, #28]
 8008044:	3304      	adds	r3, #4
 8008046:	2b06      	cmp	r3, #6
 8008048:	d902      	bls.n	8008050 <NVIC_EncodePriority+0x30>
 800804a:	69fb      	ldr	r3, [r7, #28]
 800804c:	3b03      	subs	r3, #3
 800804e:	e000      	b.n	8008052 <NVIC_EncodePriority+0x32>
 8008050:	2300      	movs	r3, #0
 8008052:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008054:	f04f 32ff 	mov.w	r2, #4294967295
 8008058:	69bb      	ldr	r3, [r7, #24]
 800805a:	fa02 f303 	lsl.w	r3, r2, r3
 800805e:	43da      	mvns	r2, r3
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	401a      	ands	r2, r3
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008068:	f04f 31ff 	mov.w	r1, #4294967295
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	fa01 f303 	lsl.w	r3, r1, r3
 8008072:	43d9      	mvns	r1, r3
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008078:	4313      	orrs	r3, r2
         );
}
 800807a:	4618      	mov	r0, r3
 800807c:	3724      	adds	r7, #36	; 0x24
 800807e:	46bd      	mov	sp, r7
 8008080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008084:	4770      	bx	lr

08008086 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008086:	b580      	push	{r7, lr}
 8008088:	b082      	sub	sp, #8
 800808a:	af00      	add	r7, sp, #0
 800808c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f7ff ff4c 	bl	8007f2c <__NVIC_SetPriorityGrouping>
}
 8008094:	bf00      	nop
 8008096:	3708      	adds	r7, #8
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}

0800809c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800809c:	b580      	push	{r7, lr}
 800809e:	b086      	sub	sp, #24
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	4603      	mov	r3, r0
 80080a4:	60b9      	str	r1, [r7, #8]
 80080a6:	607a      	str	r2, [r7, #4]
 80080a8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80080aa:	2300      	movs	r3, #0
 80080ac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80080ae:	f7ff ff61 	bl	8007f74 <__NVIC_GetPriorityGrouping>
 80080b2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80080b4:	687a      	ldr	r2, [r7, #4]
 80080b6:	68b9      	ldr	r1, [r7, #8]
 80080b8:	6978      	ldr	r0, [r7, #20]
 80080ba:	f7ff ffb1 	bl	8008020 <NVIC_EncodePriority>
 80080be:	4602      	mov	r2, r0
 80080c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080c4:	4611      	mov	r1, r2
 80080c6:	4618      	mov	r0, r3
 80080c8:	f7ff ff80 	bl	8007fcc <__NVIC_SetPriority>
}
 80080cc:	bf00      	nop
 80080ce:	3718      	adds	r7, #24
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}

080080d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b082      	sub	sp, #8
 80080d8:	af00      	add	r7, sp, #0
 80080da:	4603      	mov	r3, r0
 80080dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80080de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080e2:	4618      	mov	r0, r3
 80080e4:	f7ff ff54 	bl	8007f90 <__NVIC_EnableIRQ>
}
 80080e8:	bf00      	nop
 80080ea:	3708      	adds	r7, #8
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}

080080f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b086      	sub	sp, #24
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80080f8:	2300      	movs	r3, #0
 80080fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80080fc:	f7ff fee8 	bl	8007ed0 <HAL_GetTick>
 8008100:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d101      	bne.n	800810c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8008108:	2301      	movs	r3, #1
 800810a:	e099      	b.n	8008240 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2200      	movs	r2, #0
 8008110:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2202      	movs	r2, #2
 8008118:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	681a      	ldr	r2, [r3, #0]
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f022 0201 	bic.w	r2, r2, #1
 800812a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800812c:	e00f      	b.n	800814e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800812e:	f7ff fecf 	bl	8007ed0 <HAL_GetTick>
 8008132:	4602      	mov	r2, r0
 8008134:	693b      	ldr	r3, [r7, #16]
 8008136:	1ad3      	subs	r3, r2, r3
 8008138:	2b05      	cmp	r3, #5
 800813a:	d908      	bls.n	800814e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2220      	movs	r2, #32
 8008140:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2203      	movs	r2, #3
 8008146:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800814a:	2303      	movs	r3, #3
 800814c:	e078      	b.n	8008240 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f003 0301 	and.w	r3, r3, #1
 8008158:	2b00      	cmp	r3, #0
 800815a:	d1e8      	bne.n	800812e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008164:	697a      	ldr	r2, [r7, #20]
 8008166:	4b38      	ldr	r3, [pc, #224]	; (8008248 <HAL_DMA_Init+0x158>)
 8008168:	4013      	ands	r3, r2
 800816a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	685a      	ldr	r2, [r3, #4]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	689b      	ldr	r3, [r3, #8]
 8008174:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800817a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	691b      	ldr	r3, [r3, #16]
 8008180:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008186:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	699b      	ldr	r3, [r3, #24]
 800818c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008192:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6a1b      	ldr	r3, [r3, #32]
 8008198:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800819a:	697a      	ldr	r2, [r7, #20]
 800819c:	4313      	orrs	r3, r2
 800819e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a4:	2b04      	cmp	r3, #4
 80081a6:	d107      	bne.n	80081b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081b0:	4313      	orrs	r3, r2
 80081b2:	697a      	ldr	r2, [r7, #20]
 80081b4:	4313      	orrs	r3, r2
 80081b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	697a      	ldr	r2, [r7, #20]
 80081be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	695b      	ldr	r3, [r3, #20]
 80081c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	f023 0307 	bic.w	r3, r3, #7
 80081ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d4:	697a      	ldr	r2, [r7, #20]
 80081d6:	4313      	orrs	r3, r2
 80081d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081de:	2b04      	cmp	r3, #4
 80081e0:	d117      	bne.n	8008212 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081e6:	697a      	ldr	r2, [r7, #20]
 80081e8:	4313      	orrs	r3, r2
 80081ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d00e      	beq.n	8008212 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f000 fa9f 	bl	8008738 <DMA_CheckFifoParam>
 80081fa:	4603      	mov	r3, r0
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d008      	beq.n	8008212 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2240      	movs	r2, #64	; 0x40
 8008204:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2201      	movs	r2, #1
 800820a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800820e:	2301      	movs	r3, #1
 8008210:	e016      	b.n	8008240 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	697a      	ldr	r2, [r7, #20]
 8008218:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f000 fa56 	bl	80086cc <DMA_CalcBaseAndBitshift>
 8008220:	4603      	mov	r3, r0
 8008222:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008228:	223f      	movs	r2, #63	; 0x3f
 800822a:	409a      	lsls	r2, r3
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2200      	movs	r2, #0
 8008234:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2201      	movs	r2, #1
 800823a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800823e:	2300      	movs	r3, #0
}
 8008240:	4618      	mov	r0, r3
 8008242:	3718      	adds	r7, #24
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}
 8008248:	f010803f 	.word	0xf010803f

0800824c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b086      	sub	sp, #24
 8008250:	af00      	add	r7, sp, #0
 8008252:	60f8      	str	r0, [r7, #12]
 8008254:	60b9      	str	r1, [r7, #8]
 8008256:	607a      	str	r2, [r7, #4]
 8008258:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800825a:	2300      	movs	r3, #0
 800825c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008262:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800826a:	2b01      	cmp	r3, #1
 800826c:	d101      	bne.n	8008272 <HAL_DMA_Start_IT+0x26>
 800826e:	2302      	movs	r3, #2
 8008270:	e040      	b.n	80082f4 <HAL_DMA_Start_IT+0xa8>
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2201      	movs	r2, #1
 8008276:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008280:	b2db      	uxtb	r3, r3
 8008282:	2b01      	cmp	r3, #1
 8008284:	d12f      	bne.n	80082e6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2202      	movs	r2, #2
 800828a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2200      	movs	r2, #0
 8008292:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	687a      	ldr	r2, [r7, #4]
 8008298:	68b9      	ldr	r1, [r7, #8]
 800829a:	68f8      	ldr	r0, [r7, #12]
 800829c:	f000 f9e8 	bl	8008670 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082a4:	223f      	movs	r2, #63	; 0x3f
 80082a6:	409a      	lsls	r2, r3
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	681a      	ldr	r2, [r3, #0]
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f042 0216 	orr.w	r2, r2, #22
 80082ba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d007      	beq.n	80082d4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	681a      	ldr	r2, [r3, #0]
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f042 0208 	orr.w	r2, r2, #8
 80082d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	681a      	ldr	r2, [r3, #0]
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f042 0201 	orr.w	r2, r2, #1
 80082e2:	601a      	str	r2, [r3, #0]
 80082e4:	e005      	b.n	80082f2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2200      	movs	r2, #0
 80082ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80082ee:	2302      	movs	r3, #2
 80082f0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80082f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3718      	adds	r7, #24
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}

080082fc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b083      	sub	sp, #12
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800830a:	b2db      	uxtb	r3, r3
 800830c:	2b02      	cmp	r3, #2
 800830e:	d004      	beq.n	800831a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2280      	movs	r2, #128	; 0x80
 8008314:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008316:	2301      	movs	r3, #1
 8008318:	e00c      	b.n	8008334 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2205      	movs	r2, #5
 800831e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	681a      	ldr	r2, [r3, #0]
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f022 0201 	bic.w	r2, r2, #1
 8008330:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008332:	2300      	movs	r3, #0
}
 8008334:	4618      	mov	r0, r3
 8008336:	370c      	adds	r7, #12
 8008338:	46bd      	mov	sp, r7
 800833a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833e:	4770      	bx	lr

08008340 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b086      	sub	sp, #24
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8008348:	2300      	movs	r3, #0
 800834a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800834c:	4b92      	ldr	r3, [pc, #584]	; (8008598 <HAL_DMA_IRQHandler+0x258>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	4a92      	ldr	r2, [pc, #584]	; (800859c <HAL_DMA_IRQHandler+0x25c>)
 8008352:	fba2 2303 	umull	r2, r3, r2, r3
 8008356:	0a9b      	lsrs	r3, r3, #10
 8008358:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800835e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800836a:	2208      	movs	r2, #8
 800836c:	409a      	lsls	r2, r3
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	4013      	ands	r3, r2
 8008372:	2b00      	cmp	r3, #0
 8008374:	d01a      	beq.n	80083ac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f003 0304 	and.w	r3, r3, #4
 8008380:	2b00      	cmp	r3, #0
 8008382:	d013      	beq.n	80083ac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	681a      	ldr	r2, [r3, #0]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f022 0204 	bic.w	r2, r2, #4
 8008392:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008398:	2208      	movs	r2, #8
 800839a:	409a      	lsls	r2, r3
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083a4:	f043 0201 	orr.w	r2, r3, #1
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083b0:	2201      	movs	r2, #1
 80083b2:	409a      	lsls	r2, r3
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	4013      	ands	r3, r2
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d012      	beq.n	80083e2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	695b      	ldr	r3, [r3, #20]
 80083c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d00b      	beq.n	80083e2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083ce:	2201      	movs	r2, #1
 80083d0:	409a      	lsls	r2, r3
 80083d2:	693b      	ldr	r3, [r7, #16]
 80083d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083da:	f043 0202 	orr.w	r2, r3, #2
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083e6:	2204      	movs	r2, #4
 80083e8:	409a      	lsls	r2, r3
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	4013      	ands	r3, r2
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d012      	beq.n	8008418 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f003 0302 	and.w	r3, r3, #2
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d00b      	beq.n	8008418 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008404:	2204      	movs	r2, #4
 8008406:	409a      	lsls	r2, r3
 8008408:	693b      	ldr	r3, [r7, #16]
 800840a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008410:	f043 0204 	orr.w	r2, r3, #4
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800841c:	2210      	movs	r2, #16
 800841e:	409a      	lsls	r2, r3
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	4013      	ands	r3, r2
 8008424:	2b00      	cmp	r3, #0
 8008426:	d043      	beq.n	80084b0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f003 0308 	and.w	r3, r3, #8
 8008432:	2b00      	cmp	r3, #0
 8008434:	d03c      	beq.n	80084b0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800843a:	2210      	movs	r2, #16
 800843c:	409a      	lsls	r2, r3
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800844c:	2b00      	cmp	r3, #0
 800844e:	d018      	beq.n	8008482 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800845a:	2b00      	cmp	r3, #0
 800845c:	d108      	bne.n	8008470 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008462:	2b00      	cmp	r3, #0
 8008464:	d024      	beq.n	80084b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	4798      	blx	r3
 800846e:	e01f      	b.n	80084b0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008474:	2b00      	cmp	r3, #0
 8008476:	d01b      	beq.n	80084b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	4798      	blx	r3
 8008480:	e016      	b.n	80084b0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800848c:	2b00      	cmp	r3, #0
 800848e:	d107      	bne.n	80084a0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	681a      	ldr	r2, [r3, #0]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f022 0208 	bic.w	r2, r2, #8
 800849e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d003      	beq.n	80084b0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084b4:	2220      	movs	r2, #32
 80084b6:	409a      	lsls	r2, r3
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	4013      	ands	r3, r2
 80084bc:	2b00      	cmp	r3, #0
 80084be:	f000 808e 	beq.w	80085de <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f003 0310 	and.w	r3, r3, #16
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	f000 8086 	beq.w	80085de <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084d6:	2220      	movs	r2, #32
 80084d8:	409a      	lsls	r2, r3
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80084e4:	b2db      	uxtb	r3, r3
 80084e6:	2b05      	cmp	r3, #5
 80084e8:	d136      	bne.n	8008558 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	681a      	ldr	r2, [r3, #0]
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f022 0216 	bic.w	r2, r2, #22
 80084f8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	695a      	ldr	r2, [r3, #20]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008508:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800850e:	2b00      	cmp	r3, #0
 8008510:	d103      	bne.n	800851a <HAL_DMA_IRQHandler+0x1da>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008516:	2b00      	cmp	r3, #0
 8008518:	d007      	beq.n	800852a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	681a      	ldr	r2, [r3, #0]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f022 0208 	bic.w	r2, r2, #8
 8008528:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800852e:	223f      	movs	r2, #63	; 0x3f
 8008530:	409a      	lsls	r2, r3
 8008532:	693b      	ldr	r3, [r7, #16]
 8008534:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2200      	movs	r2, #0
 800853a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2201      	movs	r2, #1
 8008542:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800854a:	2b00      	cmp	r3, #0
 800854c:	d07d      	beq.n	800864a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	4798      	blx	r3
        }
        return;
 8008556:	e078      	b.n	800864a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008562:	2b00      	cmp	r3, #0
 8008564:	d01c      	beq.n	80085a0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008570:	2b00      	cmp	r3, #0
 8008572:	d108      	bne.n	8008586 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008578:	2b00      	cmp	r3, #0
 800857a:	d030      	beq.n	80085de <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	4798      	blx	r3
 8008584:	e02b      	b.n	80085de <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800858a:	2b00      	cmp	r3, #0
 800858c:	d027      	beq.n	80085de <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	4798      	blx	r3
 8008596:	e022      	b.n	80085de <HAL_DMA_IRQHandler+0x29e>
 8008598:	20000cb4 	.word	0x20000cb4
 800859c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d10f      	bne.n	80085ce <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	681a      	ldr	r2, [r3, #0]
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f022 0210 	bic.w	r2, r2, #16
 80085bc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2200      	movs	r2, #0
 80085c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2201      	movs	r2, #1
 80085ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d003      	beq.n	80085de <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d032      	beq.n	800864c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085ea:	f003 0301 	and.w	r3, r3, #1
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d022      	beq.n	8008638 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2205      	movs	r2, #5
 80085f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	681a      	ldr	r2, [r3, #0]
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f022 0201 	bic.w	r2, r2, #1
 8008608:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	3301      	adds	r3, #1
 800860e:	60bb      	str	r3, [r7, #8]
 8008610:	697a      	ldr	r2, [r7, #20]
 8008612:	429a      	cmp	r2, r3
 8008614:	d307      	bcc.n	8008626 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f003 0301 	and.w	r3, r3, #1
 8008620:	2b00      	cmp	r3, #0
 8008622:	d1f2      	bne.n	800860a <HAL_DMA_IRQHandler+0x2ca>
 8008624:	e000      	b.n	8008628 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8008626:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2200      	movs	r2, #0
 800862c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2201      	movs	r2, #1
 8008634:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800863c:	2b00      	cmp	r3, #0
 800863e:	d005      	beq.n	800864c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	4798      	blx	r3
 8008648:	e000      	b.n	800864c <HAL_DMA_IRQHandler+0x30c>
        return;
 800864a:	bf00      	nop
    }
  }
}
 800864c:	3718      	adds	r7, #24
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}
 8008652:	bf00      	nop

08008654 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8008654:	b480      	push	{r7}
 8008656:	b083      	sub	sp, #12
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008662:	b2db      	uxtb	r3, r3
}
 8008664:	4618      	mov	r0, r3
 8008666:	370c      	adds	r7, #12
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr

08008670 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008670:	b480      	push	{r7}
 8008672:	b085      	sub	sp, #20
 8008674:	af00      	add	r7, sp, #0
 8008676:	60f8      	str	r0, [r7, #12]
 8008678:	60b9      	str	r1, [r7, #8]
 800867a:	607a      	str	r2, [r7, #4]
 800867c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	681a      	ldr	r2, [r3, #0]
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800868c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	683a      	ldr	r2, [r7, #0]
 8008694:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	689b      	ldr	r3, [r3, #8]
 800869a:	2b40      	cmp	r3, #64	; 0x40
 800869c:	d108      	bne.n	80086b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	687a      	ldr	r2, [r7, #4]
 80086a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	68ba      	ldr	r2, [r7, #8]
 80086ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80086ae:	e007      	b.n	80086c0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	68ba      	ldr	r2, [r7, #8]
 80086b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	687a      	ldr	r2, [r7, #4]
 80086be:	60da      	str	r2, [r3, #12]
}
 80086c0:	bf00      	nop
 80086c2:	3714      	adds	r7, #20
 80086c4:	46bd      	mov	sp, r7
 80086c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ca:	4770      	bx	lr

080086cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b085      	sub	sp, #20
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	b2db      	uxtb	r3, r3
 80086da:	3b10      	subs	r3, #16
 80086dc:	4a14      	ldr	r2, [pc, #80]	; (8008730 <DMA_CalcBaseAndBitshift+0x64>)
 80086de:	fba2 2303 	umull	r2, r3, r2, r3
 80086e2:	091b      	lsrs	r3, r3, #4
 80086e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80086e6:	4a13      	ldr	r2, [pc, #76]	; (8008734 <DMA_CalcBaseAndBitshift+0x68>)
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	4413      	add	r3, r2
 80086ec:	781b      	ldrb	r3, [r3, #0]
 80086ee:	461a      	mov	r2, r3
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2b03      	cmp	r3, #3
 80086f8:	d909      	bls.n	800870e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008702:	f023 0303 	bic.w	r3, r3, #3
 8008706:	1d1a      	adds	r2, r3, #4
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	659a      	str	r2, [r3, #88]	; 0x58
 800870c:	e007      	b.n	800871e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008716:	f023 0303 	bic.w	r3, r3, #3
 800871a:	687a      	ldr	r2, [r7, #4]
 800871c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008722:	4618      	mov	r0, r3
 8008724:	3714      	adds	r7, #20
 8008726:	46bd      	mov	sp, r7
 8008728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872c:	4770      	bx	lr
 800872e:	bf00      	nop
 8008730:	aaaaaaab 	.word	0xaaaaaaab
 8008734:	0801899c 	.word	0x0801899c

08008738 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008738:	b480      	push	{r7}
 800873a:	b085      	sub	sp, #20
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008740:	2300      	movs	r3, #0
 8008742:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008748:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	699b      	ldr	r3, [r3, #24]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d11f      	bne.n	8008792 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	2b03      	cmp	r3, #3
 8008756:	d855      	bhi.n	8008804 <DMA_CheckFifoParam+0xcc>
 8008758:	a201      	add	r2, pc, #4	; (adr r2, 8008760 <DMA_CheckFifoParam+0x28>)
 800875a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800875e:	bf00      	nop
 8008760:	08008771 	.word	0x08008771
 8008764:	08008783 	.word	0x08008783
 8008768:	08008771 	.word	0x08008771
 800876c:	08008805 	.word	0x08008805
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008774:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008778:	2b00      	cmp	r3, #0
 800877a:	d045      	beq.n	8008808 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800877c:	2301      	movs	r3, #1
 800877e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008780:	e042      	b.n	8008808 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008786:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800878a:	d13f      	bne.n	800880c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800878c:	2301      	movs	r3, #1
 800878e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008790:	e03c      	b.n	800880c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	699b      	ldr	r3, [r3, #24]
 8008796:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800879a:	d121      	bne.n	80087e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	2b03      	cmp	r3, #3
 80087a0:	d836      	bhi.n	8008810 <DMA_CheckFifoParam+0xd8>
 80087a2:	a201      	add	r2, pc, #4	; (adr r2, 80087a8 <DMA_CheckFifoParam+0x70>)
 80087a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087a8:	080087b9 	.word	0x080087b9
 80087ac:	080087bf 	.word	0x080087bf
 80087b0:	080087b9 	.word	0x080087b9
 80087b4:	080087d1 	.word	0x080087d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80087b8:	2301      	movs	r3, #1
 80087ba:	73fb      	strb	r3, [r7, #15]
      break;
 80087bc:	e02f      	b.n	800881e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d024      	beq.n	8008814 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80087ca:	2301      	movs	r3, #1
 80087cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80087ce:	e021      	b.n	8008814 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087d4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80087d8:	d11e      	bne.n	8008818 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80087da:	2301      	movs	r3, #1
 80087dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80087de:	e01b      	b.n	8008818 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	2b02      	cmp	r3, #2
 80087e4:	d902      	bls.n	80087ec <DMA_CheckFifoParam+0xb4>
 80087e6:	2b03      	cmp	r3, #3
 80087e8:	d003      	beq.n	80087f2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80087ea:	e018      	b.n	800881e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80087ec:	2301      	movs	r3, #1
 80087ee:	73fb      	strb	r3, [r7, #15]
      break;
 80087f0:	e015      	b.n	800881e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d00e      	beq.n	800881c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80087fe:	2301      	movs	r3, #1
 8008800:	73fb      	strb	r3, [r7, #15]
      break;
 8008802:	e00b      	b.n	800881c <DMA_CheckFifoParam+0xe4>
      break;
 8008804:	bf00      	nop
 8008806:	e00a      	b.n	800881e <DMA_CheckFifoParam+0xe6>
      break;
 8008808:	bf00      	nop
 800880a:	e008      	b.n	800881e <DMA_CheckFifoParam+0xe6>
      break;
 800880c:	bf00      	nop
 800880e:	e006      	b.n	800881e <DMA_CheckFifoParam+0xe6>
      break;
 8008810:	bf00      	nop
 8008812:	e004      	b.n	800881e <DMA_CheckFifoParam+0xe6>
      break;
 8008814:	bf00      	nop
 8008816:	e002      	b.n	800881e <DMA_CheckFifoParam+0xe6>
      break;   
 8008818:	bf00      	nop
 800881a:	e000      	b.n	800881e <DMA_CheckFifoParam+0xe6>
      break;
 800881c:	bf00      	nop
    }
  } 
  
  return status; 
 800881e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008820:	4618      	mov	r0, r3
 8008822:	3714      	adds	r7, #20
 8008824:	46bd      	mov	sp, r7
 8008826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882a:	4770      	bx	lr

0800882c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800882c:	b480      	push	{r7}
 800882e:	b089      	sub	sp, #36	; 0x24
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
 8008834:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008836:	2300      	movs	r3, #0
 8008838:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800883a:	2300      	movs	r3, #0
 800883c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800883e:	2300      	movs	r3, #0
 8008840:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008842:	2300      	movs	r3, #0
 8008844:	61fb      	str	r3, [r7, #28]
 8008846:	e16b      	b.n	8008b20 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008848:	2201      	movs	r2, #1
 800884a:	69fb      	ldr	r3, [r7, #28]
 800884c:	fa02 f303 	lsl.w	r3, r2, r3
 8008850:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	697a      	ldr	r2, [r7, #20]
 8008858:	4013      	ands	r3, r2
 800885a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800885c:	693a      	ldr	r2, [r7, #16]
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	429a      	cmp	r2, r3
 8008862:	f040 815a 	bne.w	8008b1a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	685b      	ldr	r3, [r3, #4]
 800886a:	2b01      	cmp	r3, #1
 800886c:	d00b      	beq.n	8008886 <HAL_GPIO_Init+0x5a>
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	685b      	ldr	r3, [r3, #4]
 8008872:	2b02      	cmp	r3, #2
 8008874:	d007      	beq.n	8008886 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800887a:	2b11      	cmp	r3, #17
 800887c:	d003      	beq.n	8008886 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	685b      	ldr	r3, [r3, #4]
 8008882:	2b12      	cmp	r3, #18
 8008884:	d130      	bne.n	80088e8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	689b      	ldr	r3, [r3, #8]
 800888a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800888c:	69fb      	ldr	r3, [r7, #28]
 800888e:	005b      	lsls	r3, r3, #1
 8008890:	2203      	movs	r2, #3
 8008892:	fa02 f303 	lsl.w	r3, r2, r3
 8008896:	43db      	mvns	r3, r3
 8008898:	69ba      	ldr	r2, [r7, #24]
 800889a:	4013      	ands	r3, r2
 800889c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	68da      	ldr	r2, [r3, #12]
 80088a2:	69fb      	ldr	r3, [r7, #28]
 80088a4:	005b      	lsls	r3, r3, #1
 80088a6:	fa02 f303 	lsl.w	r3, r2, r3
 80088aa:	69ba      	ldr	r2, [r7, #24]
 80088ac:	4313      	orrs	r3, r2
 80088ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	69ba      	ldr	r2, [r7, #24]
 80088b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	685b      	ldr	r3, [r3, #4]
 80088ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80088bc:	2201      	movs	r2, #1
 80088be:	69fb      	ldr	r3, [r7, #28]
 80088c0:	fa02 f303 	lsl.w	r3, r2, r3
 80088c4:	43db      	mvns	r3, r3
 80088c6:	69ba      	ldr	r2, [r7, #24]
 80088c8:	4013      	ands	r3, r2
 80088ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	091b      	lsrs	r3, r3, #4
 80088d2:	f003 0201 	and.w	r2, r3, #1
 80088d6:	69fb      	ldr	r3, [r7, #28]
 80088d8:	fa02 f303 	lsl.w	r3, r2, r3
 80088dc:	69ba      	ldr	r2, [r7, #24]
 80088de:	4313      	orrs	r3, r2
 80088e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	69ba      	ldr	r2, [r7, #24]
 80088e6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	68db      	ldr	r3, [r3, #12]
 80088ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80088ee:	69fb      	ldr	r3, [r7, #28]
 80088f0:	005b      	lsls	r3, r3, #1
 80088f2:	2203      	movs	r2, #3
 80088f4:	fa02 f303 	lsl.w	r3, r2, r3
 80088f8:	43db      	mvns	r3, r3
 80088fa:	69ba      	ldr	r2, [r7, #24]
 80088fc:	4013      	ands	r3, r2
 80088fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	689a      	ldr	r2, [r3, #8]
 8008904:	69fb      	ldr	r3, [r7, #28]
 8008906:	005b      	lsls	r3, r3, #1
 8008908:	fa02 f303 	lsl.w	r3, r2, r3
 800890c:	69ba      	ldr	r2, [r7, #24]
 800890e:	4313      	orrs	r3, r2
 8008910:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	69ba      	ldr	r2, [r7, #24]
 8008916:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	685b      	ldr	r3, [r3, #4]
 800891c:	2b02      	cmp	r3, #2
 800891e:	d003      	beq.n	8008928 <HAL_GPIO_Init+0xfc>
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	685b      	ldr	r3, [r3, #4]
 8008924:	2b12      	cmp	r3, #18
 8008926:	d123      	bne.n	8008970 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008928:	69fb      	ldr	r3, [r7, #28]
 800892a:	08da      	lsrs	r2, r3, #3
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	3208      	adds	r2, #8
 8008930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008934:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008936:	69fb      	ldr	r3, [r7, #28]
 8008938:	f003 0307 	and.w	r3, r3, #7
 800893c:	009b      	lsls	r3, r3, #2
 800893e:	220f      	movs	r2, #15
 8008940:	fa02 f303 	lsl.w	r3, r2, r3
 8008944:	43db      	mvns	r3, r3
 8008946:	69ba      	ldr	r2, [r7, #24]
 8008948:	4013      	ands	r3, r2
 800894a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	691a      	ldr	r2, [r3, #16]
 8008950:	69fb      	ldr	r3, [r7, #28]
 8008952:	f003 0307 	and.w	r3, r3, #7
 8008956:	009b      	lsls	r3, r3, #2
 8008958:	fa02 f303 	lsl.w	r3, r2, r3
 800895c:	69ba      	ldr	r2, [r7, #24]
 800895e:	4313      	orrs	r3, r2
 8008960:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008962:	69fb      	ldr	r3, [r7, #28]
 8008964:	08da      	lsrs	r2, r3, #3
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	3208      	adds	r2, #8
 800896a:	69b9      	ldr	r1, [r7, #24]
 800896c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008976:	69fb      	ldr	r3, [r7, #28]
 8008978:	005b      	lsls	r3, r3, #1
 800897a:	2203      	movs	r2, #3
 800897c:	fa02 f303 	lsl.w	r3, r2, r3
 8008980:	43db      	mvns	r3, r3
 8008982:	69ba      	ldr	r2, [r7, #24]
 8008984:	4013      	ands	r3, r2
 8008986:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	685b      	ldr	r3, [r3, #4]
 800898c:	f003 0203 	and.w	r2, r3, #3
 8008990:	69fb      	ldr	r3, [r7, #28]
 8008992:	005b      	lsls	r3, r3, #1
 8008994:	fa02 f303 	lsl.w	r3, r2, r3
 8008998:	69ba      	ldr	r2, [r7, #24]
 800899a:	4313      	orrs	r3, r2
 800899c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	69ba      	ldr	r2, [r7, #24]
 80089a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	685b      	ldr	r3, [r3, #4]
 80089a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	f000 80b4 	beq.w	8008b1a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80089b2:	2300      	movs	r3, #0
 80089b4:	60fb      	str	r3, [r7, #12]
 80089b6:	4b5f      	ldr	r3, [pc, #380]	; (8008b34 <HAL_GPIO_Init+0x308>)
 80089b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089ba:	4a5e      	ldr	r2, [pc, #376]	; (8008b34 <HAL_GPIO_Init+0x308>)
 80089bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80089c0:	6453      	str	r3, [r2, #68]	; 0x44
 80089c2:	4b5c      	ldr	r3, [pc, #368]	; (8008b34 <HAL_GPIO_Init+0x308>)
 80089c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80089ca:	60fb      	str	r3, [r7, #12]
 80089cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80089ce:	4a5a      	ldr	r2, [pc, #360]	; (8008b38 <HAL_GPIO_Init+0x30c>)
 80089d0:	69fb      	ldr	r3, [r7, #28]
 80089d2:	089b      	lsrs	r3, r3, #2
 80089d4:	3302      	adds	r3, #2
 80089d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80089dc:	69fb      	ldr	r3, [r7, #28]
 80089de:	f003 0303 	and.w	r3, r3, #3
 80089e2:	009b      	lsls	r3, r3, #2
 80089e4:	220f      	movs	r2, #15
 80089e6:	fa02 f303 	lsl.w	r3, r2, r3
 80089ea:	43db      	mvns	r3, r3
 80089ec:	69ba      	ldr	r2, [r7, #24]
 80089ee:	4013      	ands	r3, r2
 80089f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	4a51      	ldr	r2, [pc, #324]	; (8008b3c <HAL_GPIO_Init+0x310>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d02b      	beq.n	8008a52 <HAL_GPIO_Init+0x226>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	4a50      	ldr	r2, [pc, #320]	; (8008b40 <HAL_GPIO_Init+0x314>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d025      	beq.n	8008a4e <HAL_GPIO_Init+0x222>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	4a4f      	ldr	r2, [pc, #316]	; (8008b44 <HAL_GPIO_Init+0x318>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d01f      	beq.n	8008a4a <HAL_GPIO_Init+0x21e>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	4a4e      	ldr	r2, [pc, #312]	; (8008b48 <HAL_GPIO_Init+0x31c>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d019      	beq.n	8008a46 <HAL_GPIO_Init+0x21a>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	4a4d      	ldr	r2, [pc, #308]	; (8008b4c <HAL_GPIO_Init+0x320>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d013      	beq.n	8008a42 <HAL_GPIO_Init+0x216>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	4a4c      	ldr	r2, [pc, #304]	; (8008b50 <HAL_GPIO_Init+0x324>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d00d      	beq.n	8008a3e <HAL_GPIO_Init+0x212>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	4a4b      	ldr	r2, [pc, #300]	; (8008b54 <HAL_GPIO_Init+0x328>)
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d007      	beq.n	8008a3a <HAL_GPIO_Init+0x20e>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	4a4a      	ldr	r2, [pc, #296]	; (8008b58 <HAL_GPIO_Init+0x32c>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d101      	bne.n	8008a36 <HAL_GPIO_Init+0x20a>
 8008a32:	2307      	movs	r3, #7
 8008a34:	e00e      	b.n	8008a54 <HAL_GPIO_Init+0x228>
 8008a36:	2308      	movs	r3, #8
 8008a38:	e00c      	b.n	8008a54 <HAL_GPIO_Init+0x228>
 8008a3a:	2306      	movs	r3, #6
 8008a3c:	e00a      	b.n	8008a54 <HAL_GPIO_Init+0x228>
 8008a3e:	2305      	movs	r3, #5
 8008a40:	e008      	b.n	8008a54 <HAL_GPIO_Init+0x228>
 8008a42:	2304      	movs	r3, #4
 8008a44:	e006      	b.n	8008a54 <HAL_GPIO_Init+0x228>
 8008a46:	2303      	movs	r3, #3
 8008a48:	e004      	b.n	8008a54 <HAL_GPIO_Init+0x228>
 8008a4a:	2302      	movs	r3, #2
 8008a4c:	e002      	b.n	8008a54 <HAL_GPIO_Init+0x228>
 8008a4e:	2301      	movs	r3, #1
 8008a50:	e000      	b.n	8008a54 <HAL_GPIO_Init+0x228>
 8008a52:	2300      	movs	r3, #0
 8008a54:	69fa      	ldr	r2, [r7, #28]
 8008a56:	f002 0203 	and.w	r2, r2, #3
 8008a5a:	0092      	lsls	r2, r2, #2
 8008a5c:	4093      	lsls	r3, r2
 8008a5e:	69ba      	ldr	r2, [r7, #24]
 8008a60:	4313      	orrs	r3, r2
 8008a62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008a64:	4934      	ldr	r1, [pc, #208]	; (8008b38 <HAL_GPIO_Init+0x30c>)
 8008a66:	69fb      	ldr	r3, [r7, #28]
 8008a68:	089b      	lsrs	r3, r3, #2
 8008a6a:	3302      	adds	r3, #2
 8008a6c:	69ba      	ldr	r2, [r7, #24]
 8008a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008a72:	4b3a      	ldr	r3, [pc, #232]	; (8008b5c <HAL_GPIO_Init+0x330>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	43db      	mvns	r3, r3
 8008a7c:	69ba      	ldr	r2, [r7, #24]
 8008a7e:	4013      	ands	r3, r2
 8008a80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	685b      	ldr	r3, [r3, #4]
 8008a86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d003      	beq.n	8008a96 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8008a8e:	69ba      	ldr	r2, [r7, #24]
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	4313      	orrs	r3, r2
 8008a94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008a96:	4a31      	ldr	r2, [pc, #196]	; (8008b5c <HAL_GPIO_Init+0x330>)
 8008a98:	69bb      	ldr	r3, [r7, #24]
 8008a9a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8008a9c:	4b2f      	ldr	r3, [pc, #188]	; (8008b5c <HAL_GPIO_Init+0x330>)
 8008a9e:	685b      	ldr	r3, [r3, #4]
 8008aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008aa2:	693b      	ldr	r3, [r7, #16]
 8008aa4:	43db      	mvns	r3, r3
 8008aa6:	69ba      	ldr	r2, [r7, #24]
 8008aa8:	4013      	ands	r3, r2
 8008aaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	685b      	ldr	r3, [r3, #4]
 8008ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d003      	beq.n	8008ac0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8008ab8:	69ba      	ldr	r2, [r7, #24]
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	4313      	orrs	r3, r2
 8008abe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008ac0:	4a26      	ldr	r2, [pc, #152]	; (8008b5c <HAL_GPIO_Init+0x330>)
 8008ac2:	69bb      	ldr	r3, [r7, #24]
 8008ac4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008ac6:	4b25      	ldr	r3, [pc, #148]	; (8008b5c <HAL_GPIO_Init+0x330>)
 8008ac8:	689b      	ldr	r3, [r3, #8]
 8008aca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008acc:	693b      	ldr	r3, [r7, #16]
 8008ace:	43db      	mvns	r3, r3
 8008ad0:	69ba      	ldr	r2, [r7, #24]
 8008ad2:	4013      	ands	r3, r2
 8008ad4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	685b      	ldr	r3, [r3, #4]
 8008ada:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d003      	beq.n	8008aea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8008ae2:	69ba      	ldr	r2, [r7, #24]
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008aea:	4a1c      	ldr	r2, [pc, #112]	; (8008b5c <HAL_GPIO_Init+0x330>)
 8008aec:	69bb      	ldr	r3, [r7, #24]
 8008aee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008af0:	4b1a      	ldr	r3, [pc, #104]	; (8008b5c <HAL_GPIO_Init+0x330>)
 8008af2:	68db      	ldr	r3, [r3, #12]
 8008af4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	43db      	mvns	r3, r3
 8008afa:	69ba      	ldr	r2, [r7, #24]
 8008afc:	4013      	ands	r3, r2
 8008afe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	685b      	ldr	r3, [r3, #4]
 8008b04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d003      	beq.n	8008b14 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8008b0c:	69ba      	ldr	r2, [r7, #24]
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	4313      	orrs	r3, r2
 8008b12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008b14:	4a11      	ldr	r2, [pc, #68]	; (8008b5c <HAL_GPIO_Init+0x330>)
 8008b16:	69bb      	ldr	r3, [r7, #24]
 8008b18:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008b1a:	69fb      	ldr	r3, [r7, #28]
 8008b1c:	3301      	adds	r3, #1
 8008b1e:	61fb      	str	r3, [r7, #28]
 8008b20:	69fb      	ldr	r3, [r7, #28]
 8008b22:	2b0f      	cmp	r3, #15
 8008b24:	f67f ae90 	bls.w	8008848 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008b28:	bf00      	nop
 8008b2a:	3724      	adds	r7, #36	; 0x24
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b32:	4770      	bx	lr
 8008b34:	40023800 	.word	0x40023800
 8008b38:	40013800 	.word	0x40013800
 8008b3c:	40020000 	.word	0x40020000
 8008b40:	40020400 	.word	0x40020400
 8008b44:	40020800 	.word	0x40020800
 8008b48:	40020c00 	.word	0x40020c00
 8008b4c:	40021000 	.word	0x40021000
 8008b50:	40021400 	.word	0x40021400
 8008b54:	40021800 	.word	0x40021800
 8008b58:	40021c00 	.word	0x40021c00
 8008b5c:	40013c00 	.word	0x40013c00

08008b60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008b60:	b480      	push	{r7}
 8008b62:	b083      	sub	sp, #12
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
 8008b68:	460b      	mov	r3, r1
 8008b6a:	807b      	strh	r3, [r7, #2]
 8008b6c:	4613      	mov	r3, r2
 8008b6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008b70:	787b      	ldrb	r3, [r7, #1]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d003      	beq.n	8008b7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008b76:	887a      	ldrh	r2, [r7, #2]
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008b7c:	e003      	b.n	8008b86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008b7e:	887b      	ldrh	r3, [r7, #2]
 8008b80:	041a      	lsls	r2, r3, #16
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	619a      	str	r2, [r3, #24]
}
 8008b86:	bf00      	nop
 8008b88:	370c      	adds	r7, #12
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b90:	4770      	bx	lr
	...

08008b94 <HAL_NOR_Init>:
  * @param  Timing pointer to NOR control timing structure 
  * @param  ExtTiming pointer to NOR extended mode timing structure    
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NOR_Init(NOR_HandleTypeDef *hnor, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b084      	sub	sp, #16
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	60f8      	str	r0, [r7, #12]
 8008b9c:	60b9      	str	r1, [r7, #8]
 8008b9e:	607a      	str	r2, [r7, #4]
  /* Check the NOR handle parameter */
  if(hnor == NULL)
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d101      	bne.n	8008baa <HAL_NOR_Init+0x16>
  {
     return HAL_ERROR;
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	e043      	b.n	8008c32 <HAL_NOR_Init+0x9e>
  }
  
  if(hnor->State == HAL_NOR_STATE_RESET)
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8008bb0:	b2db      	uxtb	r3, r3
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d106      	bne.n	8008bc4 <HAL_NOR_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnor->Lock = HAL_UNLOCKED;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hnor->MspInitCallback(hnor);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NOR_MspInit(hnor);
 8008bbe:	68f8      	ldr	r0, [r7, #12]
 8008bc0:	f7f9 ff76 	bl	8002ab0 <HAL_NOR_MspInit>
#endif /* (USE_HAL_NOR_REGISTER_CALLBACKS) */
  }
  
  /* Initialize NOR control Interface */
  FMC_NORSRAM_Init(hnor->Instance, &(hnor->Init));
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	681a      	ldr	r2, [r3, #0]
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	3308      	adds	r3, #8
 8008bcc:	4619      	mov	r1, r3
 8008bce:	4610      	mov	r0, r2
 8008bd0:	f003 f810 	bl	800bbf4 <FSMC_NORSRAM_Init>

  /* Initialize NOR timing Interface */
  FMC_NORSRAM_Timing_Init(hnor->Instance, Timing, hnor->Init.NSBank); 
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	6818      	ldr	r0, [r3, #0]
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	689b      	ldr	r3, [r3, #8]
 8008bdc:	461a      	mov	r2, r3
 8008bde:	68b9      	ldr	r1, [r7, #8]
 8008be0:	f003 f85a 	bl	800bc98 <FSMC_NORSRAM_Timing_Init>

  /* Initialize NOR extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hnor->Extended, ExtTiming, hnor->Init.NSBank, hnor->Init.ExtendedMode);
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	6858      	ldr	r0, [r3, #4]
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	689a      	ldr	r2, [r3, #8]
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bf0:	6879      	ldr	r1, [r7, #4]
 8008bf2:	f003 f88f 	bl	800bd14 <FSMC_NORSRAM_Extended_Timing_Init>

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hnor->Instance, hnor->Init.NSBank);
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	68fa      	ldr	r2, [r7, #12]
 8008bfc:	6892      	ldr	r2, [r2, #8]
 8008bfe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	68fa      	ldr	r2, [r7, #12]
 8008c08:	6892      	ldr	r2, [r2, #8]
 8008c0a:	f041 0101 	orr.w	r1, r1, #1
 8008c0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize NOR Memory Data Width*/
  if (hnor->Init.MemoryDataWidth == FMC_NORSRAM_MEM_BUS_WIDTH_8)
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	695b      	ldr	r3, [r3, #20]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d103      	bne.n	8008c22 <HAL_NOR_Init+0x8e>
  {
    uwNORMemoryDataWidth = NOR_MEMORY_8B;
 8008c1a:	4b08      	ldr	r3, [pc, #32]	; (8008c3c <HAL_NOR_Init+0xa8>)
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	601a      	str	r2, [r3, #0]
 8008c20:	e002      	b.n	8008c28 <HAL_NOR_Init+0x94>
  }
  else
  {
    uwNORMemoryDataWidth = NOR_MEMORY_16B;
 8008c22:	4b06      	ldr	r3, [pc, #24]	; (8008c3c <HAL_NOR_Init+0xa8>)
 8008c24:	2201      	movs	r2, #1
 8008c26:	601a      	str	r2, [r3, #0]
  }

  /* Check the NOR controller state */
  hnor->State = HAL_NOR_STATE_READY; 
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	2201      	movs	r2, #1
 8008c2c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  return HAL_OK;
 8008c30:	2300      	movs	r3, #0
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3710      	adds	r7, #16
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}
 8008c3a:	bf00      	nop
 8008c3c:	20001480 	.word	0x20001480

08008c40 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008c40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c42:	b08f      	sub	sp, #60	; 0x3c
 8008c44:	af0a      	add	r7, sp, #40	; 0x28
 8008c46:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d101      	bne.n	8008c52 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008c4e:	2301      	movs	r3, #1
 8008c50:	e10f      	b.n	8008e72 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8008c5e:	b2db      	uxtb	r3, r3
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d106      	bne.n	8008c72 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2200      	movs	r2, #0
 8008c68:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f009 fa75 	bl	801215c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2203      	movs	r2, #3
 8008c76:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d102      	bne.n	8008c8c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2200      	movs	r2, #0
 8008c8a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4618      	mov	r0, r3
 8008c92:	f003 f994 	bl	800bfbe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	603b      	str	r3, [r7, #0]
 8008c9c:	687e      	ldr	r6, [r7, #4]
 8008c9e:	466d      	mov	r5, sp
 8008ca0:	f106 0410 	add.w	r4, r6, #16
 8008ca4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008ca6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008ca8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008caa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008cac:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008cb0:	e885 0003 	stmia.w	r5, {r0, r1}
 8008cb4:	1d33      	adds	r3, r6, #4
 8008cb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008cb8:	6838      	ldr	r0, [r7, #0]
 8008cba:	f003 f86b 	bl	800bd94 <USB_CoreInit>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d005      	beq.n	8008cd0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2202      	movs	r2, #2
 8008cc8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8008ccc:	2301      	movs	r3, #1
 8008cce:	e0d0      	b.n	8008e72 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	2100      	movs	r1, #0
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f003 f982 	bl	800bfe0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008cdc:	2300      	movs	r3, #0
 8008cde:	73fb      	strb	r3, [r7, #15]
 8008ce0:	e04a      	b.n	8008d78 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008ce2:	7bfa      	ldrb	r2, [r7, #15]
 8008ce4:	6879      	ldr	r1, [r7, #4]
 8008ce6:	4613      	mov	r3, r2
 8008ce8:	00db      	lsls	r3, r3, #3
 8008cea:	1a9b      	subs	r3, r3, r2
 8008cec:	009b      	lsls	r3, r3, #2
 8008cee:	440b      	add	r3, r1
 8008cf0:	333d      	adds	r3, #61	; 0x3d
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008cf6:	7bfa      	ldrb	r2, [r7, #15]
 8008cf8:	6879      	ldr	r1, [r7, #4]
 8008cfa:	4613      	mov	r3, r2
 8008cfc:	00db      	lsls	r3, r3, #3
 8008cfe:	1a9b      	subs	r3, r3, r2
 8008d00:	009b      	lsls	r3, r3, #2
 8008d02:	440b      	add	r3, r1
 8008d04:	333c      	adds	r3, #60	; 0x3c
 8008d06:	7bfa      	ldrb	r2, [r7, #15]
 8008d08:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008d0a:	7bfa      	ldrb	r2, [r7, #15]
 8008d0c:	7bfb      	ldrb	r3, [r7, #15]
 8008d0e:	b298      	uxth	r0, r3
 8008d10:	6879      	ldr	r1, [r7, #4]
 8008d12:	4613      	mov	r3, r2
 8008d14:	00db      	lsls	r3, r3, #3
 8008d16:	1a9b      	subs	r3, r3, r2
 8008d18:	009b      	lsls	r3, r3, #2
 8008d1a:	440b      	add	r3, r1
 8008d1c:	3342      	adds	r3, #66	; 0x42
 8008d1e:	4602      	mov	r2, r0
 8008d20:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008d22:	7bfa      	ldrb	r2, [r7, #15]
 8008d24:	6879      	ldr	r1, [r7, #4]
 8008d26:	4613      	mov	r3, r2
 8008d28:	00db      	lsls	r3, r3, #3
 8008d2a:	1a9b      	subs	r3, r3, r2
 8008d2c:	009b      	lsls	r3, r3, #2
 8008d2e:	440b      	add	r3, r1
 8008d30:	333f      	adds	r3, #63	; 0x3f
 8008d32:	2200      	movs	r2, #0
 8008d34:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008d36:	7bfa      	ldrb	r2, [r7, #15]
 8008d38:	6879      	ldr	r1, [r7, #4]
 8008d3a:	4613      	mov	r3, r2
 8008d3c:	00db      	lsls	r3, r3, #3
 8008d3e:	1a9b      	subs	r3, r3, r2
 8008d40:	009b      	lsls	r3, r3, #2
 8008d42:	440b      	add	r3, r1
 8008d44:	3344      	adds	r3, #68	; 0x44
 8008d46:	2200      	movs	r2, #0
 8008d48:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008d4a:	7bfa      	ldrb	r2, [r7, #15]
 8008d4c:	6879      	ldr	r1, [r7, #4]
 8008d4e:	4613      	mov	r3, r2
 8008d50:	00db      	lsls	r3, r3, #3
 8008d52:	1a9b      	subs	r3, r3, r2
 8008d54:	009b      	lsls	r3, r3, #2
 8008d56:	440b      	add	r3, r1
 8008d58:	3348      	adds	r3, #72	; 0x48
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008d5e:	7bfa      	ldrb	r2, [r7, #15]
 8008d60:	6879      	ldr	r1, [r7, #4]
 8008d62:	4613      	mov	r3, r2
 8008d64:	00db      	lsls	r3, r3, #3
 8008d66:	1a9b      	subs	r3, r3, r2
 8008d68:	009b      	lsls	r3, r3, #2
 8008d6a:	440b      	add	r3, r1
 8008d6c:	3350      	adds	r3, #80	; 0x50
 8008d6e:	2200      	movs	r2, #0
 8008d70:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008d72:	7bfb      	ldrb	r3, [r7, #15]
 8008d74:	3301      	adds	r3, #1
 8008d76:	73fb      	strb	r3, [r7, #15]
 8008d78:	7bfa      	ldrb	r2, [r7, #15]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	685b      	ldr	r3, [r3, #4]
 8008d7e:	429a      	cmp	r2, r3
 8008d80:	d3af      	bcc.n	8008ce2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008d82:	2300      	movs	r3, #0
 8008d84:	73fb      	strb	r3, [r7, #15]
 8008d86:	e044      	b.n	8008e12 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008d88:	7bfa      	ldrb	r2, [r7, #15]
 8008d8a:	6879      	ldr	r1, [r7, #4]
 8008d8c:	4613      	mov	r3, r2
 8008d8e:	00db      	lsls	r3, r3, #3
 8008d90:	1a9b      	subs	r3, r3, r2
 8008d92:	009b      	lsls	r3, r3, #2
 8008d94:	440b      	add	r3, r1
 8008d96:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008d9e:	7bfa      	ldrb	r2, [r7, #15]
 8008da0:	6879      	ldr	r1, [r7, #4]
 8008da2:	4613      	mov	r3, r2
 8008da4:	00db      	lsls	r3, r3, #3
 8008da6:	1a9b      	subs	r3, r3, r2
 8008da8:	009b      	lsls	r3, r3, #2
 8008daa:	440b      	add	r3, r1
 8008dac:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8008db0:	7bfa      	ldrb	r2, [r7, #15]
 8008db2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008db4:	7bfa      	ldrb	r2, [r7, #15]
 8008db6:	6879      	ldr	r1, [r7, #4]
 8008db8:	4613      	mov	r3, r2
 8008dba:	00db      	lsls	r3, r3, #3
 8008dbc:	1a9b      	subs	r3, r3, r2
 8008dbe:	009b      	lsls	r3, r3, #2
 8008dc0:	440b      	add	r3, r1
 8008dc2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008dca:	7bfa      	ldrb	r2, [r7, #15]
 8008dcc:	6879      	ldr	r1, [r7, #4]
 8008dce:	4613      	mov	r3, r2
 8008dd0:	00db      	lsls	r3, r3, #3
 8008dd2:	1a9b      	subs	r3, r3, r2
 8008dd4:	009b      	lsls	r3, r3, #2
 8008dd6:	440b      	add	r3, r1
 8008dd8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008ddc:	2200      	movs	r2, #0
 8008dde:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008de0:	7bfa      	ldrb	r2, [r7, #15]
 8008de2:	6879      	ldr	r1, [r7, #4]
 8008de4:	4613      	mov	r3, r2
 8008de6:	00db      	lsls	r3, r3, #3
 8008de8:	1a9b      	subs	r3, r3, r2
 8008dea:	009b      	lsls	r3, r3, #2
 8008dec:	440b      	add	r3, r1
 8008dee:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008df2:	2200      	movs	r2, #0
 8008df4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008df6:	7bfa      	ldrb	r2, [r7, #15]
 8008df8:	6879      	ldr	r1, [r7, #4]
 8008dfa:	4613      	mov	r3, r2
 8008dfc:	00db      	lsls	r3, r3, #3
 8008dfe:	1a9b      	subs	r3, r3, r2
 8008e00:	009b      	lsls	r3, r3, #2
 8008e02:	440b      	add	r3, r1
 8008e04:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8008e08:	2200      	movs	r2, #0
 8008e0a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008e0c:	7bfb      	ldrb	r3, [r7, #15]
 8008e0e:	3301      	adds	r3, #1
 8008e10:	73fb      	strb	r3, [r7, #15]
 8008e12:	7bfa      	ldrb	r2, [r7, #15]
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	685b      	ldr	r3, [r3, #4]
 8008e18:	429a      	cmp	r2, r3
 8008e1a:	d3b5      	bcc.n	8008d88 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	603b      	str	r3, [r7, #0]
 8008e22:	687e      	ldr	r6, [r7, #4]
 8008e24:	466d      	mov	r5, sp
 8008e26:	f106 0410 	add.w	r4, r6, #16
 8008e2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008e2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008e2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008e30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008e32:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008e36:	e885 0003 	stmia.w	r5, {r0, r1}
 8008e3a:	1d33      	adds	r3, r6, #4
 8008e3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008e3e:	6838      	ldr	r0, [r7, #0]
 8008e40:	f003 f8f8 	bl	800c034 <USB_DevInit>
 8008e44:	4603      	mov	r3, r0
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d005      	beq.n	8008e56 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2202      	movs	r2, #2
 8008e4e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8008e52:	2301      	movs	r3, #1
 8008e54:	e00d      	b.n	8008e72 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2200      	movs	r2, #0
 8008e5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2201      	movs	r2, #1
 8008e62:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f004 f8ed 	bl	800d04a <USB_DevDisconnect>

  return HAL_OK;
 8008e70:	2300      	movs	r3, #0
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3714      	adds	r7, #20
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008e7a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008e7a:	b580      	push	{r7, lr}
 8008e7c:	b084      	sub	sp, #16
 8008e7e:	af00      	add	r7, sp, #0
 8008e80:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008e8e:	2b01      	cmp	r3, #1
 8008e90:	d101      	bne.n	8008e96 <HAL_PCD_Start+0x1c>
 8008e92:	2302      	movs	r3, #2
 8008e94:	e020      	b.n	8008ed8 <HAL_PCD_Start+0x5e>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2201      	movs	r2, #1
 8008e9a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ea2:	2b01      	cmp	r3, #1
 8008ea4:	d109      	bne.n	8008eba <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8008eaa:	2b01      	cmp	r3, #1
 8008eac:	d005      	beq.n	8008eba <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eb2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f004 f8ab 	bl	800d01a <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	4618      	mov	r0, r3
 8008eca:	f003 f867 	bl	800bf9c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8008ed6:	2300      	movs	r3, #0
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	3710      	adds	r7, #16
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}

08008ee0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008ee0:	b590      	push	{r4, r7, lr}
 8008ee2:	b08d      	sub	sp, #52	; 0x34
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008eee:	6a3b      	ldr	r3, [r7, #32]
 8008ef0:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f004 f952 	bl	800d1a0 <USB_GetMode>
 8008efc:	4603      	mov	r3, r0
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	f040 838e 	bne.w	8009620 <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	4618      	mov	r0, r3
 8008f0a:	f004 f8b6 	bl	800d07a <USB_ReadInterrupts>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	f000 8384 	beq.w	800961e <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f004 f8ad 	bl	800d07a <USB_ReadInterrupts>
 8008f20:	4603      	mov	r3, r0
 8008f22:	f003 0302 	and.w	r3, r3, #2
 8008f26:	2b02      	cmp	r3, #2
 8008f28:	d107      	bne.n	8008f3a <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	695a      	ldr	r2, [r3, #20]
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f002 0202 	and.w	r2, r2, #2
 8008f38:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f004 f89b 	bl	800d07a <USB_ReadInterrupts>
 8008f44:	4603      	mov	r3, r0
 8008f46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008f4a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008f4e:	d17b      	bne.n	8009048 <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 8008f50:	2300      	movs	r3, #0
 8008f52:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f004 f8a1 	bl	800d0a0 <USB_ReadDevAllOutEpInterrupt>
 8008f5e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8008f60:	e06f      	b.n	8009042 <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 8008f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f64:	f003 0301 	and.w	r3, r3, #1
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d064      	beq.n	8009036 <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f72:	b2d2      	uxtb	r2, r2
 8008f74:	4611      	mov	r1, r2
 8008f76:	4618      	mov	r0, r3
 8008f78:	f004 f8c6 	bl	800d108 <USB_ReadDevOutEPInterrupt>
 8008f7c:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008f7e:	69bb      	ldr	r3, [r7, #24]
 8008f80:	f003 0301 	and.w	r3, r3, #1
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d00c      	beq.n	8008fa2 <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f8a:	015a      	lsls	r2, r3, #5
 8008f8c:	69fb      	ldr	r3, [r7, #28]
 8008f8e:	4413      	add	r3, r2
 8008f90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f94:	461a      	mov	r2, r3
 8008f96:	2301      	movs	r3, #1
 8008f98:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008f9a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f000 fe0d 	bl	8009bbc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008fa2:	69bb      	ldr	r3, [r7, #24]
 8008fa4:	f003 0308 	and.w	r3, r3, #8
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d00c      	beq.n	8008fc6 <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8008fac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f000 ff0c 	bl	8009dcc <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb6:	015a      	lsls	r2, r3, #5
 8008fb8:	69fb      	ldr	r3, [r7, #28]
 8008fba:	4413      	add	r3, r2
 8008fbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fc0:	461a      	mov	r2, r3
 8008fc2:	2308      	movs	r3, #8
 8008fc4:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008fc6:	69bb      	ldr	r3, [r7, #24]
 8008fc8:	f003 0310 	and.w	r3, r3, #16
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d008      	beq.n	8008fe2 <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd2:	015a      	lsls	r2, r3, #5
 8008fd4:	69fb      	ldr	r3, [r7, #28]
 8008fd6:	4413      	add	r3, r2
 8008fd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fdc:	461a      	mov	r2, r3
 8008fde:	2310      	movs	r3, #16
 8008fe0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008fe2:	69bb      	ldr	r3, [r7, #24]
 8008fe4:	f003 0320 	and.w	r3, r3, #32
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d015      	beq.n	8009018 <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	691b      	ldr	r3, [r3, #16]
 8008ff0:	2b01      	cmp	r3, #1
 8008ff2:	d108      	bne.n	8009006 <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6818      	ldr	r0, [r3, #0]
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008ffe:	461a      	mov	r2, r3
 8009000:	2101      	movs	r1, #1
 8009002:	f004 f911 	bl	800d228 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009008:	015a      	lsls	r2, r3, #5
 800900a:	69fb      	ldr	r3, [r7, #28]
 800900c:	4413      	add	r3, r2
 800900e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009012:	461a      	mov	r2, r3
 8009014:	2320      	movs	r3, #32
 8009016:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8009018:	69bb      	ldr	r3, [r7, #24]
 800901a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800901e:	2b00      	cmp	r3, #0
 8009020:	d009      	beq.n	8009036 <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8009022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009024:	015a      	lsls	r2, r3, #5
 8009026:	69fb      	ldr	r3, [r7, #28]
 8009028:	4413      	add	r3, r2
 800902a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800902e:	461a      	mov	r2, r3
 8009030:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009034:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8009036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009038:	3301      	adds	r3, #1
 800903a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800903c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800903e:	085b      	lsrs	r3, r3, #1
 8009040:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009044:	2b00      	cmp	r3, #0
 8009046:	d18c      	bne.n	8008f62 <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	4618      	mov	r0, r3
 800904e:	f004 f814 	bl	800d07a <USB_ReadInterrupts>
 8009052:	4603      	mov	r3, r0
 8009054:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009058:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800905c:	f040 80c4 	bne.w	80091e8 <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	4618      	mov	r0, r3
 8009066:	f004 f835 	bl	800d0d4 <USB_ReadDevAllInEpInterrupt>
 800906a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800906c:	2300      	movs	r3, #0
 800906e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8009070:	e0b6      	b.n	80091e0 <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8009072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009074:	f003 0301 	and.w	r3, r3, #1
 8009078:	2b00      	cmp	r3, #0
 800907a:	f000 80ab 	beq.w	80091d4 <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009084:	b2d2      	uxtb	r2, r2
 8009086:	4611      	mov	r1, r2
 8009088:	4618      	mov	r0, r3
 800908a:	f004 f85b 	bl	800d144 <USB_ReadDevInEPInterrupt>
 800908e:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8009090:	69bb      	ldr	r3, [r7, #24]
 8009092:	f003 0301 	and.w	r3, r3, #1
 8009096:	2b00      	cmp	r3, #0
 8009098:	d05b      	beq.n	8009152 <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800909a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800909c:	f003 030f 	and.w	r3, r3, #15
 80090a0:	2201      	movs	r2, #1
 80090a2:	fa02 f303 	lsl.w	r3, r2, r3
 80090a6:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80090a8:	69fb      	ldr	r3, [r7, #28]
 80090aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80090b0:	697b      	ldr	r3, [r7, #20]
 80090b2:	43db      	mvns	r3, r3
 80090b4:	69f9      	ldr	r1, [r7, #28]
 80090b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80090ba:	4013      	ands	r3, r2
 80090bc:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80090be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c0:	015a      	lsls	r2, r3, #5
 80090c2:	69fb      	ldr	r3, [r7, #28]
 80090c4:	4413      	add	r3, r2
 80090c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090ca:	461a      	mov	r2, r3
 80090cc:	2301      	movs	r3, #1
 80090ce:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	691b      	ldr	r3, [r3, #16]
 80090d4:	2b01      	cmp	r3, #1
 80090d6:	d11b      	bne.n	8009110 <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80090d8:	6879      	ldr	r1, [r7, #4]
 80090da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090dc:	4613      	mov	r3, r2
 80090de:	00db      	lsls	r3, r3, #3
 80090e0:	1a9b      	subs	r3, r3, r2
 80090e2:	009b      	lsls	r3, r3, #2
 80090e4:	440b      	add	r3, r1
 80090e6:	3348      	adds	r3, #72	; 0x48
 80090e8:	6819      	ldr	r1, [r3, #0]
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090ee:	4613      	mov	r3, r2
 80090f0:	00db      	lsls	r3, r3, #3
 80090f2:	1a9b      	subs	r3, r3, r2
 80090f4:	009b      	lsls	r3, r3, #2
 80090f6:	4403      	add	r3, r0
 80090f8:	3344      	adds	r3, #68	; 0x44
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	4419      	add	r1, r3
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009102:	4613      	mov	r3, r2
 8009104:	00db      	lsls	r3, r3, #3
 8009106:	1a9b      	subs	r3, r3, r2
 8009108:	009b      	lsls	r3, r3, #2
 800910a:	4403      	add	r3, r0
 800910c:	3348      	adds	r3, #72	; 0x48
 800910e:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8009110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009112:	b2db      	uxtb	r3, r3
 8009114:	4619      	mov	r1, r3
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f009 f8a1 	bl	801225e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	691b      	ldr	r3, [r3, #16]
 8009120:	2b01      	cmp	r3, #1
 8009122:	d116      	bne.n	8009152 <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8009124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009126:	2b00      	cmp	r3, #0
 8009128:	d113      	bne.n	8009152 <HAL_PCD_IRQHandler+0x272>
 800912a:	6879      	ldr	r1, [r7, #4]
 800912c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800912e:	4613      	mov	r3, r2
 8009130:	00db      	lsls	r3, r3, #3
 8009132:	1a9b      	subs	r3, r3, r2
 8009134:	009b      	lsls	r3, r3, #2
 8009136:	440b      	add	r3, r1
 8009138:	3350      	adds	r3, #80	; 0x50
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d108      	bne.n	8009152 <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6818      	ldr	r0, [r3, #0]
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800914a:	461a      	mov	r2, r3
 800914c:	2101      	movs	r1, #1
 800914e:	f004 f86b 	bl	800d228 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8009152:	69bb      	ldr	r3, [r7, #24]
 8009154:	f003 0308 	and.w	r3, r3, #8
 8009158:	2b00      	cmp	r3, #0
 800915a:	d008      	beq.n	800916e <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800915c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800915e:	015a      	lsls	r2, r3, #5
 8009160:	69fb      	ldr	r3, [r7, #28]
 8009162:	4413      	add	r3, r2
 8009164:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009168:	461a      	mov	r2, r3
 800916a:	2308      	movs	r3, #8
 800916c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800916e:	69bb      	ldr	r3, [r7, #24]
 8009170:	f003 0310 	and.w	r3, r3, #16
 8009174:	2b00      	cmp	r3, #0
 8009176:	d008      	beq.n	800918a <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8009178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800917a:	015a      	lsls	r2, r3, #5
 800917c:	69fb      	ldr	r3, [r7, #28]
 800917e:	4413      	add	r3, r2
 8009180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009184:	461a      	mov	r2, r3
 8009186:	2310      	movs	r3, #16
 8009188:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800918a:	69bb      	ldr	r3, [r7, #24]
 800918c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009190:	2b00      	cmp	r3, #0
 8009192:	d008      	beq.n	80091a6 <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8009194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009196:	015a      	lsls	r2, r3, #5
 8009198:	69fb      	ldr	r3, [r7, #28]
 800919a:	4413      	add	r3, r2
 800919c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091a0:	461a      	mov	r2, r3
 80091a2:	2340      	movs	r3, #64	; 0x40
 80091a4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80091a6:	69bb      	ldr	r3, [r7, #24]
 80091a8:	f003 0302 	and.w	r3, r3, #2
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d008      	beq.n	80091c2 <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80091b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091b2:	015a      	lsls	r2, r3, #5
 80091b4:	69fb      	ldr	r3, [r7, #28]
 80091b6:	4413      	add	r3, r2
 80091b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091bc:	461a      	mov	r2, r3
 80091be:	2302      	movs	r3, #2
 80091c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80091c2:	69bb      	ldr	r3, [r7, #24]
 80091c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d003      	beq.n	80091d4 <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80091cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f000 fc67 	bl	8009aa2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80091d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091d6:	3301      	adds	r3, #1
 80091d8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80091da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091dc:	085b      	lsrs	r3, r3, #1
 80091de:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80091e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	f47f af45 	bne.w	8009072 <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	4618      	mov	r0, r3
 80091ee:	f003 ff44 	bl	800d07a <USB_ReadInterrupts>
 80091f2:	4603      	mov	r3, r0
 80091f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80091f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80091fc:	d122      	bne.n	8009244 <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80091fe:	69fb      	ldr	r3, [r7, #28]
 8009200:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009204:	685b      	ldr	r3, [r3, #4]
 8009206:	69fa      	ldr	r2, [r7, #28]
 8009208:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800920c:	f023 0301 	bic.w	r3, r3, #1
 8009210:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8009218:	2b01      	cmp	r3, #1
 800921a:	d108      	bne.n	800922e <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2200      	movs	r2, #0
 8009220:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009224:	2100      	movs	r1, #0
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f000 fe88 	bl	8009f3c <HAL_PCDEx_LPM_Callback>
 800922c:	e002      	b.n	8009234 <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f009 f88c 	bl	801234c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	695a      	ldr	r2, [r3, #20]
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8009242:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	4618      	mov	r0, r3
 800924a:	f003 ff16 	bl	800d07a <USB_ReadInterrupts>
 800924e:	4603      	mov	r3, r0
 8009250:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009254:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009258:	d112      	bne.n	8009280 <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800925a:	69fb      	ldr	r3, [r7, #28]
 800925c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009260:	689b      	ldr	r3, [r3, #8]
 8009262:	f003 0301 	and.w	r3, r3, #1
 8009266:	2b01      	cmp	r3, #1
 8009268:	d102      	bne.n	8009270 <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f009 f848 	bl	8012300 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	695a      	ldr	r2, [r3, #20]
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800927e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	4618      	mov	r0, r3
 8009286:	f003 fef8 	bl	800d07a <USB_ReadInterrupts>
 800928a:	4603      	mov	r3, r0
 800928c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009290:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009294:	f040 80a7 	bne.w	80093e6 <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009298:	69fb      	ldr	r3, [r7, #28]
 800929a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800929e:	685b      	ldr	r3, [r3, #4]
 80092a0:	69fa      	ldr	r2, [r7, #28]
 80092a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80092a6:	f023 0301 	bic.w	r3, r3, #1
 80092aa:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	2110      	movs	r1, #16
 80092b2:	4618      	mov	r0, r3
 80092b4:	f003 f830 	bl	800c318 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80092b8:	2300      	movs	r3, #0
 80092ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80092bc:	e036      	b.n	800932c <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80092be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092c0:	015a      	lsls	r2, r3, #5
 80092c2:	69fb      	ldr	r3, [r7, #28]
 80092c4:	4413      	add	r3, r2
 80092c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092ca:	461a      	mov	r2, r3
 80092cc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80092d0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80092d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092d4:	015a      	lsls	r2, r3, #5
 80092d6:	69fb      	ldr	r3, [r7, #28]
 80092d8:	4413      	add	r3, r2
 80092da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092e2:	0151      	lsls	r1, r2, #5
 80092e4:	69fa      	ldr	r2, [r7, #28]
 80092e6:	440a      	add	r2, r1
 80092e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092ec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80092f0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80092f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092f4:	015a      	lsls	r2, r3, #5
 80092f6:	69fb      	ldr	r3, [r7, #28]
 80092f8:	4413      	add	r3, r2
 80092fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092fe:	461a      	mov	r2, r3
 8009300:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009304:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009308:	015a      	lsls	r2, r3, #5
 800930a:	69fb      	ldr	r3, [r7, #28]
 800930c:	4413      	add	r3, r2
 800930e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009316:	0151      	lsls	r1, r2, #5
 8009318:	69fa      	ldr	r2, [r7, #28]
 800931a:	440a      	add	r2, r1
 800931c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009320:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009324:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009328:	3301      	adds	r3, #1
 800932a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	685b      	ldr	r3, [r3, #4]
 8009330:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009332:	429a      	cmp	r2, r3
 8009334:	d3c3      	bcc.n	80092be <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8009336:	69fb      	ldr	r3, [r7, #28]
 8009338:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800933c:	69db      	ldr	r3, [r3, #28]
 800933e:	69fa      	ldr	r2, [r7, #28]
 8009340:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009344:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8009348:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800934e:	2b00      	cmp	r3, #0
 8009350:	d016      	beq.n	8009380 <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8009352:	69fb      	ldr	r3, [r7, #28]
 8009354:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009358:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800935c:	69fa      	ldr	r2, [r7, #28]
 800935e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009362:	f043 030b 	orr.w	r3, r3, #11
 8009366:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800936a:	69fb      	ldr	r3, [r7, #28]
 800936c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009372:	69fa      	ldr	r2, [r7, #28]
 8009374:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009378:	f043 030b 	orr.w	r3, r3, #11
 800937c:	6453      	str	r3, [r2, #68]	; 0x44
 800937e:	e015      	b.n	80093ac <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8009380:	69fb      	ldr	r3, [r7, #28]
 8009382:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009386:	695b      	ldr	r3, [r3, #20]
 8009388:	69fa      	ldr	r2, [r7, #28]
 800938a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800938e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009392:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8009396:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8009398:	69fb      	ldr	r3, [r7, #28]
 800939a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800939e:	691b      	ldr	r3, [r3, #16]
 80093a0:	69fa      	ldr	r2, [r7, #28]
 80093a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80093a6:	f043 030b 	orr.w	r3, r3, #11
 80093aa:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80093ac:	69fb      	ldr	r3, [r7, #28]
 80093ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	69fa      	ldr	r2, [r7, #28]
 80093b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80093ba:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80093be:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6818      	ldr	r0, [r3, #0]
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	691b      	ldr	r3, [r3, #16]
 80093c8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80093d0:	461a      	mov	r2, r3
 80093d2:	f003 ff29 	bl	800d228 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	695a      	ldr	r2, [r3, #20]
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80093e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	4618      	mov	r0, r3
 80093ec:	f003 fe45 	bl	800d07a <USB_ReadInterrupts>
 80093f0:	4603      	mov	r3, r0
 80093f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80093f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80093fa:	d124      	bne.n	8009446 <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	4618      	mov	r0, r3
 8009402:	f003 fedb 	bl	800d1bc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	4618      	mov	r0, r3
 800940c:	f002 ffe5 	bl	800c3da <USB_GetDevSpeed>
 8009410:	4603      	mov	r3, r0
 8009412:	461a      	mov	r2, r3
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681c      	ldr	r4, [r3, #0]
 800941c:	f001 f9c8 	bl	800a7b0 <HAL_RCC_GetHCLKFreq>
 8009420:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009426:	b2db      	uxtb	r3, r3
 8009428:	461a      	mov	r2, r3
 800942a:	4620      	mov	r0, r4
 800942c:	f002 fd14 	bl	800be58 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f008 ff3c 	bl	80122ae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	695a      	ldr	r2, [r3, #20]
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8009444:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	4618      	mov	r0, r3
 800944c:	f003 fe15 	bl	800d07a <USB_ReadInterrupts>
 8009450:	4603      	mov	r3, r0
 8009452:	f003 0310 	and.w	r3, r3, #16
 8009456:	2b10      	cmp	r3, #16
 8009458:	d161      	bne.n	800951e <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	699a      	ldr	r2, [r3, #24]
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f022 0210 	bic.w	r2, r2, #16
 8009468:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800946a:	6a3b      	ldr	r3, [r7, #32]
 800946c:	6a1b      	ldr	r3, [r3, #32]
 800946e:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8009470:	693b      	ldr	r3, [r7, #16]
 8009472:	f003 020f 	and.w	r2, r3, #15
 8009476:	4613      	mov	r3, r2
 8009478:	00db      	lsls	r3, r3, #3
 800947a:	1a9b      	subs	r3, r3, r2
 800947c:	009b      	lsls	r3, r3, #2
 800947e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009482:	687a      	ldr	r2, [r7, #4]
 8009484:	4413      	add	r3, r2
 8009486:	3304      	adds	r3, #4
 8009488:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800948a:	693b      	ldr	r3, [r7, #16]
 800948c:	0c5b      	lsrs	r3, r3, #17
 800948e:	f003 030f 	and.w	r3, r3, #15
 8009492:	2b02      	cmp	r3, #2
 8009494:	d124      	bne.n	80094e0 <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8009496:	693a      	ldr	r2, [r7, #16]
 8009498:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800949c:	4013      	ands	r3, r2
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d035      	beq.n	800950e <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80094a6:	693b      	ldr	r3, [r7, #16]
 80094a8:	091b      	lsrs	r3, r3, #4
 80094aa:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80094ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80094b0:	b29b      	uxth	r3, r3
 80094b2:	461a      	mov	r2, r3
 80094b4:	6a38      	ldr	r0, [r7, #32]
 80094b6:	f003 fc8d 	bl	800cdd4 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	68da      	ldr	r2, [r3, #12]
 80094be:	693b      	ldr	r3, [r7, #16]
 80094c0:	091b      	lsrs	r3, r3, #4
 80094c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80094c6:	441a      	add	r2, r3
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	699a      	ldr	r2, [r3, #24]
 80094d0:	693b      	ldr	r3, [r7, #16]
 80094d2:	091b      	lsrs	r3, r3, #4
 80094d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80094d8:	441a      	add	r2, r3
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	619a      	str	r2, [r3, #24]
 80094de:	e016      	b.n	800950e <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80094e0:	693b      	ldr	r3, [r7, #16]
 80094e2:	0c5b      	lsrs	r3, r3, #17
 80094e4:	f003 030f 	and.w	r3, r3, #15
 80094e8:	2b06      	cmp	r3, #6
 80094ea:	d110      	bne.n	800950e <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80094f2:	2208      	movs	r2, #8
 80094f4:	4619      	mov	r1, r3
 80094f6:	6a38      	ldr	r0, [r7, #32]
 80094f8:	f003 fc6c 	bl	800cdd4 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	699a      	ldr	r2, [r3, #24]
 8009500:	693b      	ldr	r3, [r7, #16]
 8009502:	091b      	lsrs	r3, r3, #4
 8009504:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009508:	441a      	add	r2, r3
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	699a      	ldr	r2, [r3, #24]
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f042 0210 	orr.w	r2, r2, #16
 800951c:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	4618      	mov	r0, r3
 8009524:	f003 fda9 	bl	800d07a <USB_ReadInterrupts>
 8009528:	4603      	mov	r3, r0
 800952a:	f003 0308 	and.w	r3, r3, #8
 800952e:	2b08      	cmp	r3, #8
 8009530:	d10a      	bne.n	8009548 <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f008 fead 	bl	8012292 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	695a      	ldr	r2, [r3, #20]
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f002 0208 	and.w	r2, r2, #8
 8009546:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	4618      	mov	r0, r3
 800954e:	f003 fd94 	bl	800d07a <USB_ReadInterrupts>
 8009552:	4603      	mov	r3, r0
 8009554:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009558:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800955c:	d10f      	bne.n	800957e <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800955e:	2300      	movs	r3, #0
 8009560:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8009562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009564:	b2db      	uxtb	r3, r3
 8009566:	4619      	mov	r1, r3
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	f008 ff0f 	bl	801238c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	695a      	ldr	r2, [r3, #20]
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800957c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	4618      	mov	r0, r3
 8009584:	f003 fd79 	bl	800d07a <USB_ReadInterrupts>
 8009588:	4603      	mov	r3, r0
 800958a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800958e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009592:	d10f      	bne.n	80095b4 <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8009594:	2300      	movs	r3, #0
 8009596:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8009598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800959a:	b2db      	uxtb	r3, r3
 800959c:	4619      	mov	r1, r3
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f008 fee2 	bl	8012368 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	695a      	ldr	r2, [r3, #20]
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80095b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	4618      	mov	r0, r3
 80095ba:	f003 fd5e 	bl	800d07a <USB_ReadInterrupts>
 80095be:	4603      	mov	r3, r0
 80095c0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80095c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095c8:	d10a      	bne.n	80095e0 <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f008 fef0 	bl	80123b0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	695a      	ldr	r2, [r3, #20]
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80095de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	4618      	mov	r0, r3
 80095e6:	f003 fd48 	bl	800d07a <USB_ReadInterrupts>
 80095ea:	4603      	mov	r3, r0
 80095ec:	f003 0304 	and.w	r3, r3, #4
 80095f0:	2b04      	cmp	r3, #4
 80095f2:	d115      	bne.n	8009620 <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	685b      	ldr	r3, [r3, #4]
 80095fa:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80095fc:	693b      	ldr	r3, [r7, #16]
 80095fe:	f003 0304 	and.w	r3, r3, #4
 8009602:	2b00      	cmp	r3, #0
 8009604:	d002      	beq.n	800960c <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f008 fee0 	bl	80123cc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	6859      	ldr	r1, [r3, #4]
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	693a      	ldr	r2, [r7, #16]
 8009618:	430a      	orrs	r2, r1
 800961a:	605a      	str	r2, [r3, #4]
 800961c:	e000      	b.n	8009620 <HAL_PCD_IRQHandler+0x740>
      return;
 800961e:	bf00      	nop
    }
  }
}
 8009620:	3734      	adds	r7, #52	; 0x34
 8009622:	46bd      	mov	sp, r7
 8009624:	bd90      	pop	{r4, r7, pc}

08009626 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8009626:	b580      	push	{r7, lr}
 8009628:	b082      	sub	sp, #8
 800962a:	af00      	add	r7, sp, #0
 800962c:	6078      	str	r0, [r7, #4]
 800962e:	460b      	mov	r3, r1
 8009630:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009638:	2b01      	cmp	r3, #1
 800963a:	d101      	bne.n	8009640 <HAL_PCD_SetAddress+0x1a>
 800963c:	2302      	movs	r3, #2
 800963e:	e013      	b.n	8009668 <HAL_PCD_SetAddress+0x42>
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2201      	movs	r2, #1
 8009644:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	78fa      	ldrb	r2, [r7, #3]
 800964c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	78fa      	ldrb	r2, [r7, #3]
 8009656:	4611      	mov	r1, r2
 8009658:	4618      	mov	r0, r3
 800965a:	f003 fcb8 	bl	800cfce <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2200      	movs	r2, #0
 8009662:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8009666:	2300      	movs	r3, #0
}
 8009668:	4618      	mov	r0, r3
 800966a:	3708      	adds	r7, #8
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}

08009670 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b084      	sub	sp, #16
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
 8009678:	4608      	mov	r0, r1
 800967a:	4611      	mov	r1, r2
 800967c:	461a      	mov	r2, r3
 800967e:	4603      	mov	r3, r0
 8009680:	70fb      	strb	r3, [r7, #3]
 8009682:	460b      	mov	r3, r1
 8009684:	803b      	strh	r3, [r7, #0]
 8009686:	4613      	mov	r3, r2
 8009688:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800968a:	2300      	movs	r3, #0
 800968c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800968e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009692:	2b00      	cmp	r3, #0
 8009694:	da0f      	bge.n	80096b6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009696:	78fb      	ldrb	r3, [r7, #3]
 8009698:	f003 020f 	and.w	r2, r3, #15
 800969c:	4613      	mov	r3, r2
 800969e:	00db      	lsls	r3, r3, #3
 80096a0:	1a9b      	subs	r3, r3, r2
 80096a2:	009b      	lsls	r3, r3, #2
 80096a4:	3338      	adds	r3, #56	; 0x38
 80096a6:	687a      	ldr	r2, [r7, #4]
 80096a8:	4413      	add	r3, r2
 80096aa:	3304      	adds	r3, #4
 80096ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	2201      	movs	r2, #1
 80096b2:	705a      	strb	r2, [r3, #1]
 80096b4:	e00f      	b.n	80096d6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80096b6:	78fb      	ldrb	r3, [r7, #3]
 80096b8:	f003 020f 	and.w	r2, r3, #15
 80096bc:	4613      	mov	r3, r2
 80096be:	00db      	lsls	r3, r3, #3
 80096c0:	1a9b      	subs	r3, r3, r2
 80096c2:	009b      	lsls	r3, r3, #2
 80096c4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80096c8:	687a      	ldr	r2, [r7, #4]
 80096ca:	4413      	add	r3, r2
 80096cc:	3304      	adds	r3, #4
 80096ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	2200      	movs	r2, #0
 80096d4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80096d6:	78fb      	ldrb	r3, [r7, #3]
 80096d8:	f003 030f 	and.w	r3, r3, #15
 80096dc:	b2da      	uxtb	r2, r3
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80096e2:	883a      	ldrh	r2, [r7, #0]
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	78ba      	ldrb	r2, [r7, #2]
 80096ec:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	785b      	ldrb	r3, [r3, #1]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d004      	beq.n	8009700 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	781b      	ldrb	r3, [r3, #0]
 80096fa:	b29a      	uxth	r2, r3
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8009700:	78bb      	ldrb	r3, [r7, #2]
 8009702:	2b02      	cmp	r3, #2
 8009704:	d102      	bne.n	800970c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	2200      	movs	r2, #0
 800970a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009712:	2b01      	cmp	r3, #1
 8009714:	d101      	bne.n	800971a <HAL_PCD_EP_Open+0xaa>
 8009716:	2302      	movs	r3, #2
 8009718:	e00e      	b.n	8009738 <HAL_PCD_EP_Open+0xc8>
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2201      	movs	r2, #1
 800971e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	68f9      	ldr	r1, [r7, #12]
 8009728:	4618      	mov	r0, r3
 800972a:	f002 fe7b 	bl	800c424 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2200      	movs	r2, #0
 8009732:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8009736:	7afb      	ldrb	r3, [r7, #11]
}
 8009738:	4618      	mov	r0, r3
 800973a:	3710      	adds	r7, #16
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}

08009740 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b084      	sub	sp, #16
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
 8009748:	460b      	mov	r3, r1
 800974a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800974c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009750:	2b00      	cmp	r3, #0
 8009752:	da0f      	bge.n	8009774 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009754:	78fb      	ldrb	r3, [r7, #3]
 8009756:	f003 020f 	and.w	r2, r3, #15
 800975a:	4613      	mov	r3, r2
 800975c:	00db      	lsls	r3, r3, #3
 800975e:	1a9b      	subs	r3, r3, r2
 8009760:	009b      	lsls	r3, r3, #2
 8009762:	3338      	adds	r3, #56	; 0x38
 8009764:	687a      	ldr	r2, [r7, #4]
 8009766:	4413      	add	r3, r2
 8009768:	3304      	adds	r3, #4
 800976a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	2201      	movs	r2, #1
 8009770:	705a      	strb	r2, [r3, #1]
 8009772:	e00f      	b.n	8009794 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009774:	78fb      	ldrb	r3, [r7, #3]
 8009776:	f003 020f 	and.w	r2, r3, #15
 800977a:	4613      	mov	r3, r2
 800977c:	00db      	lsls	r3, r3, #3
 800977e:	1a9b      	subs	r3, r3, r2
 8009780:	009b      	lsls	r3, r3, #2
 8009782:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009786:	687a      	ldr	r2, [r7, #4]
 8009788:	4413      	add	r3, r2
 800978a:	3304      	adds	r3, #4
 800978c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	2200      	movs	r2, #0
 8009792:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8009794:	78fb      	ldrb	r3, [r7, #3]
 8009796:	f003 030f 	and.w	r3, r3, #15
 800979a:	b2da      	uxtb	r2, r3
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80097a6:	2b01      	cmp	r3, #1
 80097a8:	d101      	bne.n	80097ae <HAL_PCD_EP_Close+0x6e>
 80097aa:	2302      	movs	r3, #2
 80097ac:	e00e      	b.n	80097cc <HAL_PCD_EP_Close+0x8c>
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2201      	movs	r2, #1
 80097b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	68f9      	ldr	r1, [r7, #12]
 80097bc:	4618      	mov	r0, r3
 80097be:	f002 feb9 	bl	800c534 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2200      	movs	r2, #0
 80097c6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80097ca:	2300      	movs	r3, #0
}
 80097cc:	4618      	mov	r0, r3
 80097ce:	3710      	adds	r7, #16
 80097d0:	46bd      	mov	sp, r7
 80097d2:	bd80      	pop	{r7, pc}

080097d4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b086      	sub	sp, #24
 80097d8:	af00      	add	r7, sp, #0
 80097da:	60f8      	str	r0, [r7, #12]
 80097dc:	607a      	str	r2, [r7, #4]
 80097de:	603b      	str	r3, [r7, #0]
 80097e0:	460b      	mov	r3, r1
 80097e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80097e4:	7afb      	ldrb	r3, [r7, #11]
 80097e6:	f003 020f 	and.w	r2, r3, #15
 80097ea:	4613      	mov	r3, r2
 80097ec:	00db      	lsls	r3, r3, #3
 80097ee:	1a9b      	subs	r3, r3, r2
 80097f0:	009b      	lsls	r3, r3, #2
 80097f2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80097f6:	68fa      	ldr	r2, [r7, #12]
 80097f8:	4413      	add	r3, r2
 80097fa:	3304      	adds	r3, #4
 80097fc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80097fe:	697b      	ldr	r3, [r7, #20]
 8009800:	687a      	ldr	r2, [r7, #4]
 8009802:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009804:	697b      	ldr	r3, [r7, #20]
 8009806:	683a      	ldr	r2, [r7, #0]
 8009808:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800980a:	697b      	ldr	r3, [r7, #20]
 800980c:	2200      	movs	r2, #0
 800980e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	2200      	movs	r2, #0
 8009814:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009816:	7afb      	ldrb	r3, [r7, #11]
 8009818:	f003 030f 	and.w	r3, r3, #15
 800981c:	b2da      	uxtb	r2, r3
 800981e:	697b      	ldr	r3, [r7, #20]
 8009820:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	691b      	ldr	r3, [r3, #16]
 8009826:	2b01      	cmp	r3, #1
 8009828:	d102      	bne.n	8009830 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800982a:	687a      	ldr	r2, [r7, #4]
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009830:	7afb      	ldrb	r3, [r7, #11]
 8009832:	f003 030f 	and.w	r3, r3, #15
 8009836:	2b00      	cmp	r3, #0
 8009838:	d109      	bne.n	800984e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	6818      	ldr	r0, [r3, #0]
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	691b      	ldr	r3, [r3, #16]
 8009842:	b2db      	uxtb	r3, r3
 8009844:	461a      	mov	r2, r3
 8009846:	6979      	ldr	r1, [r7, #20]
 8009848:	f003 f93c 	bl	800cac4 <USB_EP0StartXfer>
 800984c:	e008      	b.n	8009860 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	6818      	ldr	r0, [r3, #0]
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	691b      	ldr	r3, [r3, #16]
 8009856:	b2db      	uxtb	r3, r3
 8009858:	461a      	mov	r2, r3
 800985a:	6979      	ldr	r1, [r7, #20]
 800985c:	f002 feee 	bl	800c63c <USB_EPStartXfer>
  }

  return HAL_OK;
 8009860:	2300      	movs	r3, #0
}
 8009862:	4618      	mov	r0, r3
 8009864:	3718      	adds	r7, #24
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}

0800986a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800986a:	b480      	push	{r7}
 800986c:	b083      	sub	sp, #12
 800986e:	af00      	add	r7, sp, #0
 8009870:	6078      	str	r0, [r7, #4]
 8009872:	460b      	mov	r3, r1
 8009874:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009876:	78fb      	ldrb	r3, [r7, #3]
 8009878:	f003 020f 	and.w	r2, r3, #15
 800987c:	6879      	ldr	r1, [r7, #4]
 800987e:	4613      	mov	r3, r2
 8009880:	00db      	lsls	r3, r3, #3
 8009882:	1a9b      	subs	r3, r3, r2
 8009884:	009b      	lsls	r3, r3, #2
 8009886:	440b      	add	r3, r1
 8009888:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800988c:	681b      	ldr	r3, [r3, #0]
}
 800988e:	4618      	mov	r0, r3
 8009890:	370c      	adds	r7, #12
 8009892:	46bd      	mov	sp, r7
 8009894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009898:	4770      	bx	lr

0800989a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800989a:	b580      	push	{r7, lr}
 800989c:	b086      	sub	sp, #24
 800989e:	af00      	add	r7, sp, #0
 80098a0:	60f8      	str	r0, [r7, #12]
 80098a2:	607a      	str	r2, [r7, #4]
 80098a4:	603b      	str	r3, [r7, #0]
 80098a6:	460b      	mov	r3, r1
 80098a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80098aa:	7afb      	ldrb	r3, [r7, #11]
 80098ac:	f003 020f 	and.w	r2, r3, #15
 80098b0:	4613      	mov	r3, r2
 80098b2:	00db      	lsls	r3, r3, #3
 80098b4:	1a9b      	subs	r3, r3, r2
 80098b6:	009b      	lsls	r3, r3, #2
 80098b8:	3338      	adds	r3, #56	; 0x38
 80098ba:	68fa      	ldr	r2, [r7, #12]
 80098bc:	4413      	add	r3, r2
 80098be:	3304      	adds	r3, #4
 80098c0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80098c2:	697b      	ldr	r3, [r7, #20]
 80098c4:	687a      	ldr	r2, [r7, #4]
 80098c6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80098c8:	697b      	ldr	r3, [r7, #20]
 80098ca:	683a      	ldr	r2, [r7, #0]
 80098cc:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	2200      	movs	r2, #0
 80098d2:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80098d4:	697b      	ldr	r3, [r7, #20]
 80098d6:	2201      	movs	r2, #1
 80098d8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80098da:	7afb      	ldrb	r3, [r7, #11]
 80098dc:	f003 030f 	and.w	r3, r3, #15
 80098e0:	b2da      	uxtb	r2, r3
 80098e2:	697b      	ldr	r3, [r7, #20]
 80098e4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	691b      	ldr	r3, [r3, #16]
 80098ea:	2b01      	cmp	r3, #1
 80098ec:	d102      	bne.n	80098f4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80098ee:	687a      	ldr	r2, [r7, #4]
 80098f0:	697b      	ldr	r3, [r7, #20]
 80098f2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80098f4:	7afb      	ldrb	r3, [r7, #11]
 80098f6:	f003 030f 	and.w	r3, r3, #15
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d109      	bne.n	8009912 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	6818      	ldr	r0, [r3, #0]
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	691b      	ldr	r3, [r3, #16]
 8009906:	b2db      	uxtb	r3, r3
 8009908:	461a      	mov	r2, r3
 800990a:	6979      	ldr	r1, [r7, #20]
 800990c:	f003 f8da 	bl	800cac4 <USB_EP0StartXfer>
 8009910:	e008      	b.n	8009924 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	6818      	ldr	r0, [r3, #0]
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	691b      	ldr	r3, [r3, #16]
 800991a:	b2db      	uxtb	r3, r3
 800991c:	461a      	mov	r2, r3
 800991e:	6979      	ldr	r1, [r7, #20]
 8009920:	f002 fe8c 	bl	800c63c <USB_EPStartXfer>
  }

  return HAL_OK;
 8009924:	2300      	movs	r3, #0
}
 8009926:	4618      	mov	r0, r3
 8009928:	3718      	adds	r7, #24
 800992a:	46bd      	mov	sp, r7
 800992c:	bd80      	pop	{r7, pc}

0800992e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800992e:	b580      	push	{r7, lr}
 8009930:	b084      	sub	sp, #16
 8009932:	af00      	add	r7, sp, #0
 8009934:	6078      	str	r0, [r7, #4]
 8009936:	460b      	mov	r3, r1
 8009938:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800993a:	78fb      	ldrb	r3, [r7, #3]
 800993c:	f003 020f 	and.w	r2, r3, #15
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	685b      	ldr	r3, [r3, #4]
 8009944:	429a      	cmp	r2, r3
 8009946:	d901      	bls.n	800994c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8009948:	2301      	movs	r3, #1
 800994a:	e050      	b.n	80099ee <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800994c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009950:	2b00      	cmp	r3, #0
 8009952:	da0f      	bge.n	8009974 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009954:	78fb      	ldrb	r3, [r7, #3]
 8009956:	f003 020f 	and.w	r2, r3, #15
 800995a:	4613      	mov	r3, r2
 800995c:	00db      	lsls	r3, r3, #3
 800995e:	1a9b      	subs	r3, r3, r2
 8009960:	009b      	lsls	r3, r3, #2
 8009962:	3338      	adds	r3, #56	; 0x38
 8009964:	687a      	ldr	r2, [r7, #4]
 8009966:	4413      	add	r3, r2
 8009968:	3304      	adds	r3, #4
 800996a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	2201      	movs	r2, #1
 8009970:	705a      	strb	r2, [r3, #1]
 8009972:	e00d      	b.n	8009990 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009974:	78fa      	ldrb	r2, [r7, #3]
 8009976:	4613      	mov	r3, r2
 8009978:	00db      	lsls	r3, r3, #3
 800997a:	1a9b      	subs	r3, r3, r2
 800997c:	009b      	lsls	r3, r3, #2
 800997e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009982:	687a      	ldr	r2, [r7, #4]
 8009984:	4413      	add	r3, r2
 8009986:	3304      	adds	r3, #4
 8009988:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	2200      	movs	r2, #0
 800998e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	2201      	movs	r2, #1
 8009994:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009996:	78fb      	ldrb	r3, [r7, #3]
 8009998:	f003 030f 	and.w	r3, r3, #15
 800999c:	b2da      	uxtb	r2, r3
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80099a8:	2b01      	cmp	r3, #1
 80099aa:	d101      	bne.n	80099b0 <HAL_PCD_EP_SetStall+0x82>
 80099ac:	2302      	movs	r3, #2
 80099ae:	e01e      	b.n	80099ee <HAL_PCD_EP_SetStall+0xc0>
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2201      	movs	r2, #1
 80099b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	68f9      	ldr	r1, [r7, #12]
 80099be:	4618      	mov	r0, r3
 80099c0:	f003 fa31 	bl	800ce26 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80099c4:	78fb      	ldrb	r3, [r7, #3]
 80099c6:	f003 030f 	and.w	r3, r3, #15
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d10a      	bne.n	80099e4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6818      	ldr	r0, [r3, #0]
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	691b      	ldr	r3, [r3, #16]
 80099d6:	b2d9      	uxtb	r1, r3
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80099de:	461a      	mov	r2, r3
 80099e0:	f003 fc22 	bl	800d228 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2200      	movs	r2, #0
 80099e8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80099ec:	2300      	movs	r3, #0
}
 80099ee:	4618      	mov	r0, r3
 80099f0:	3710      	adds	r7, #16
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}

080099f6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80099f6:	b580      	push	{r7, lr}
 80099f8:	b084      	sub	sp, #16
 80099fa:	af00      	add	r7, sp, #0
 80099fc:	6078      	str	r0, [r7, #4]
 80099fe:	460b      	mov	r3, r1
 8009a00:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009a02:	78fb      	ldrb	r3, [r7, #3]
 8009a04:	f003 020f 	and.w	r2, r3, #15
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	685b      	ldr	r3, [r3, #4]
 8009a0c:	429a      	cmp	r2, r3
 8009a0e:	d901      	bls.n	8009a14 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8009a10:	2301      	movs	r3, #1
 8009a12:	e042      	b.n	8009a9a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009a14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	da0f      	bge.n	8009a3c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009a1c:	78fb      	ldrb	r3, [r7, #3]
 8009a1e:	f003 020f 	and.w	r2, r3, #15
 8009a22:	4613      	mov	r3, r2
 8009a24:	00db      	lsls	r3, r3, #3
 8009a26:	1a9b      	subs	r3, r3, r2
 8009a28:	009b      	lsls	r3, r3, #2
 8009a2a:	3338      	adds	r3, #56	; 0x38
 8009a2c:	687a      	ldr	r2, [r7, #4]
 8009a2e:	4413      	add	r3, r2
 8009a30:	3304      	adds	r3, #4
 8009a32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	2201      	movs	r2, #1
 8009a38:	705a      	strb	r2, [r3, #1]
 8009a3a:	e00f      	b.n	8009a5c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009a3c:	78fb      	ldrb	r3, [r7, #3]
 8009a3e:	f003 020f 	and.w	r2, r3, #15
 8009a42:	4613      	mov	r3, r2
 8009a44:	00db      	lsls	r3, r3, #3
 8009a46:	1a9b      	subs	r3, r3, r2
 8009a48:	009b      	lsls	r3, r3, #2
 8009a4a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009a4e:	687a      	ldr	r2, [r7, #4]
 8009a50:	4413      	add	r3, r2
 8009a52:	3304      	adds	r3, #4
 8009a54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	2200      	movs	r2, #0
 8009a5a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	2200      	movs	r2, #0
 8009a60:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009a62:	78fb      	ldrb	r3, [r7, #3]
 8009a64:	f003 030f 	and.w	r3, r3, #15
 8009a68:	b2da      	uxtb	r2, r3
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009a74:	2b01      	cmp	r3, #1
 8009a76:	d101      	bne.n	8009a7c <HAL_PCD_EP_ClrStall+0x86>
 8009a78:	2302      	movs	r3, #2
 8009a7a:	e00e      	b.n	8009a9a <HAL_PCD_EP_ClrStall+0xa4>
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2201      	movs	r2, #1
 8009a80:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	68f9      	ldr	r1, [r7, #12]
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	f003 fa39 	bl	800cf02 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2200      	movs	r2, #0
 8009a94:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8009a98:	2300      	movs	r3, #0
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	3710      	adds	r7, #16
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}

08009aa2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009aa2:	b580      	push	{r7, lr}
 8009aa4:	b08a      	sub	sp, #40	; 0x28
 8009aa6:	af02      	add	r7, sp, #8
 8009aa8:	6078      	str	r0, [r7, #4]
 8009aaa:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ab2:	697b      	ldr	r3, [r7, #20]
 8009ab4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8009ab6:	683a      	ldr	r2, [r7, #0]
 8009ab8:	4613      	mov	r3, r2
 8009aba:	00db      	lsls	r3, r3, #3
 8009abc:	1a9b      	subs	r3, r3, r2
 8009abe:	009b      	lsls	r3, r3, #2
 8009ac0:	3338      	adds	r3, #56	; 0x38
 8009ac2:	687a      	ldr	r2, [r7, #4]
 8009ac4:	4413      	add	r3, r2
 8009ac6:	3304      	adds	r3, #4
 8009ac8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	699a      	ldr	r2, [r3, #24]
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	695b      	ldr	r3, [r3, #20]
 8009ad2:	429a      	cmp	r2, r3
 8009ad4:	d901      	bls.n	8009ada <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	e06c      	b.n	8009bb4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	695a      	ldr	r2, [r3, #20]
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	699b      	ldr	r3, [r3, #24]
 8009ae2:	1ad3      	subs	r3, r2, r3
 8009ae4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	689b      	ldr	r3, [r3, #8]
 8009aea:	69fa      	ldr	r2, [r7, #28]
 8009aec:	429a      	cmp	r2, r3
 8009aee:	d902      	bls.n	8009af6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	689b      	ldr	r3, [r3, #8]
 8009af4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8009af6:	69fb      	ldr	r3, [r7, #28]
 8009af8:	3303      	adds	r3, #3
 8009afa:	089b      	lsrs	r3, r3, #2
 8009afc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009afe:	e02b      	b.n	8009b58 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	695a      	ldr	r2, [r3, #20]
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	699b      	ldr	r3, [r3, #24]
 8009b08:	1ad3      	subs	r3, r2, r3
 8009b0a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	689b      	ldr	r3, [r3, #8]
 8009b10:	69fa      	ldr	r2, [r7, #28]
 8009b12:	429a      	cmp	r2, r3
 8009b14:	d902      	bls.n	8009b1c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	689b      	ldr	r3, [r3, #8]
 8009b1a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8009b1c:	69fb      	ldr	r3, [r7, #28]
 8009b1e:	3303      	adds	r3, #3
 8009b20:	089b      	lsrs	r3, r3, #2
 8009b22:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	68d9      	ldr	r1, [r3, #12]
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	b2da      	uxtb	r2, r3
 8009b2c:	69fb      	ldr	r3, [r7, #28]
 8009b2e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009b34:	b2db      	uxtb	r3, r3
 8009b36:	9300      	str	r3, [sp, #0]
 8009b38:	4603      	mov	r3, r0
 8009b3a:	6978      	ldr	r0, [r7, #20]
 8009b3c:	f003 f915 	bl	800cd6a <USB_WritePacket>

    ep->xfer_buff  += len;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	68da      	ldr	r2, [r3, #12]
 8009b44:	69fb      	ldr	r3, [r7, #28]
 8009b46:	441a      	add	r2, r3
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	699a      	ldr	r2, [r3, #24]
 8009b50:	69fb      	ldr	r3, [r7, #28]
 8009b52:	441a      	add	r2, r3
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	015a      	lsls	r2, r3, #5
 8009b5c:	693b      	ldr	r3, [r7, #16]
 8009b5e:	4413      	add	r3, r2
 8009b60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b64:	699b      	ldr	r3, [r3, #24]
 8009b66:	b29b      	uxth	r3, r3
 8009b68:	69ba      	ldr	r2, [r7, #24]
 8009b6a:	429a      	cmp	r2, r3
 8009b6c:	d809      	bhi.n	8009b82 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	699a      	ldr	r2, [r3, #24]
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009b76:	429a      	cmp	r2, r3
 8009b78:	d203      	bcs.n	8009b82 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	695b      	ldr	r3, [r3, #20]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d1be      	bne.n	8009b00 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	695a      	ldr	r2, [r3, #20]
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	699b      	ldr	r3, [r3, #24]
 8009b8a:	429a      	cmp	r2, r3
 8009b8c:	d811      	bhi.n	8009bb2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	f003 030f 	and.w	r3, r3, #15
 8009b94:	2201      	movs	r2, #1
 8009b96:	fa02 f303 	lsl.w	r3, r2, r3
 8009b9a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009b9c:	693b      	ldr	r3, [r7, #16]
 8009b9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ba2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	43db      	mvns	r3, r3
 8009ba8:	6939      	ldr	r1, [r7, #16]
 8009baa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009bae:	4013      	ands	r3, r2
 8009bb0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8009bb2:	2300      	movs	r3, #0
}
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	3720      	adds	r7, #32
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}

08009bbc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b086      	sub	sp, #24
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
 8009bc4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bcc:	697b      	ldr	r3, [r7, #20]
 8009bce:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009bd0:	697b      	ldr	r3, [r7, #20]
 8009bd2:	333c      	adds	r3, #60	; 0x3c
 8009bd4:	3304      	adds	r3, #4
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	015a      	lsls	r2, r3, #5
 8009bde:	693b      	ldr	r3, [r7, #16]
 8009be0:	4413      	add	r3, r2
 8009be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009be6:	689b      	ldr	r3, [r3, #8]
 8009be8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	691b      	ldr	r3, [r3, #16]
 8009bee:	2b01      	cmp	r3, #1
 8009bf0:	f040 80b3 	bne.w	8009d5a <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	f003 0308 	and.w	r3, r3, #8
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d028      	beq.n	8009c50 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	4a70      	ldr	r2, [pc, #448]	; (8009dc4 <PCD_EP_OutXfrComplete_int+0x208>)
 8009c02:	4293      	cmp	r3, r2
 8009c04:	d90e      	bls.n	8009c24 <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009c06:	68bb      	ldr	r3, [r7, #8]
 8009c08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d009      	beq.n	8009c24 <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	015a      	lsls	r2, r3, #5
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	4413      	add	r3, r2
 8009c18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c1c:	461a      	mov	r2, r3
 8009c1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c22:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f008 faed 	bl	8012204 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6818      	ldr	r0, [r3, #0]
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009c34:	461a      	mov	r2, r3
 8009c36:	2101      	movs	r1, #1
 8009c38:	f003 faf6 	bl	800d228 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	015a      	lsls	r2, r3, #5
 8009c40:	693b      	ldr	r3, [r7, #16]
 8009c42:	4413      	add	r3, r2
 8009c44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c48:	461a      	mov	r2, r3
 8009c4a:	2308      	movs	r3, #8
 8009c4c:	6093      	str	r3, [r2, #8]
 8009c4e:	e0b3      	b.n	8009db8 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	f003 0320 	and.w	r3, r3, #32
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d009      	beq.n	8009c6e <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	015a      	lsls	r2, r3, #5
 8009c5e:	693b      	ldr	r3, [r7, #16]
 8009c60:	4413      	add	r3, r2
 8009c62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c66:	461a      	mov	r2, r3
 8009c68:	2320      	movs	r3, #32
 8009c6a:	6093      	str	r3, [r2, #8]
 8009c6c:	e0a4      	b.n	8009db8 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	f040 809f 	bne.w	8009db8 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	4a51      	ldr	r2, [pc, #324]	; (8009dc4 <PCD_EP_OutXfrComplete_int+0x208>)
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d90f      	bls.n	8009ca2 <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d00a      	beq.n	8009ca2 <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	015a      	lsls	r2, r3, #5
 8009c90:	693b      	ldr	r3, [r7, #16]
 8009c92:	4413      	add	r3, r2
 8009c94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c98:	461a      	mov	r2, r3
 8009c9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c9e:	6093      	str	r3, [r2, #8]
 8009ca0:	e08a      	b.n	8009db8 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8009ca2:	6879      	ldr	r1, [r7, #4]
 8009ca4:	683a      	ldr	r2, [r7, #0]
 8009ca6:	4613      	mov	r3, r2
 8009ca8:	00db      	lsls	r3, r3, #3
 8009caa:	1a9b      	subs	r3, r3, r2
 8009cac:	009b      	lsls	r3, r3, #2
 8009cae:	440b      	add	r3, r1
 8009cb0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8009cb4:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	0159      	lsls	r1, r3, #5
 8009cba:	693b      	ldr	r3, [r7, #16]
 8009cbc:	440b      	add	r3, r1
 8009cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cc2:	691b      	ldr	r3, [r3, #16]
 8009cc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8009cc8:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	683a      	ldr	r2, [r7, #0]
 8009cce:	4613      	mov	r3, r2
 8009cd0:	00db      	lsls	r3, r3, #3
 8009cd2:	1a9b      	subs	r3, r3, r2
 8009cd4:	009b      	lsls	r3, r3, #2
 8009cd6:	4403      	add	r3, r0
 8009cd8:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8009cdc:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8009cde:	6879      	ldr	r1, [r7, #4]
 8009ce0:	683a      	ldr	r2, [r7, #0]
 8009ce2:	4613      	mov	r3, r2
 8009ce4:	00db      	lsls	r3, r3, #3
 8009ce6:	1a9b      	subs	r3, r3, r2
 8009ce8:	009b      	lsls	r3, r3, #2
 8009cea:	440b      	add	r3, r1
 8009cec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009cf0:	6819      	ldr	r1, [r3, #0]
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	683a      	ldr	r2, [r7, #0]
 8009cf6:	4613      	mov	r3, r2
 8009cf8:	00db      	lsls	r3, r3, #3
 8009cfa:	1a9b      	subs	r3, r3, r2
 8009cfc:	009b      	lsls	r3, r3, #2
 8009cfe:	4403      	add	r3, r0
 8009d00:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	4419      	add	r1, r3
 8009d08:	6878      	ldr	r0, [r7, #4]
 8009d0a:	683a      	ldr	r2, [r7, #0]
 8009d0c:	4613      	mov	r3, r2
 8009d0e:	00db      	lsls	r3, r3, #3
 8009d10:	1a9b      	subs	r3, r3, r2
 8009d12:	009b      	lsls	r3, r3, #2
 8009d14:	4403      	add	r3, r0
 8009d16:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009d1a:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	b2db      	uxtb	r3, r3
 8009d20:	4619      	mov	r1, r3
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f008 fa80 	bl	8012228 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d144      	bne.n	8009db8 <PCD_EP_OutXfrComplete_int+0x1fc>
 8009d2e:	6879      	ldr	r1, [r7, #4]
 8009d30:	683a      	ldr	r2, [r7, #0]
 8009d32:	4613      	mov	r3, r2
 8009d34:	00db      	lsls	r3, r3, #3
 8009d36:	1a9b      	subs	r3, r3, r2
 8009d38:	009b      	lsls	r3, r3, #2
 8009d3a:	440b      	add	r3, r1
 8009d3c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d138      	bne.n	8009db8 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6818      	ldr	r0, [r3, #0]
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009d50:	461a      	mov	r2, r3
 8009d52:	2101      	movs	r1, #1
 8009d54:	f003 fa68 	bl	800d228 <USB_EP0_OutStart>
 8009d58:	e02e      	b.n	8009db8 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	4a1a      	ldr	r2, [pc, #104]	; (8009dc8 <PCD_EP_OutXfrComplete_int+0x20c>)
 8009d5e:	4293      	cmp	r3, r2
 8009d60:	d124      	bne.n	8009dac <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d00a      	beq.n	8009d82 <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	015a      	lsls	r2, r3, #5
 8009d70:	693b      	ldr	r3, [r7, #16]
 8009d72:	4413      	add	r3, r2
 8009d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d78:	461a      	mov	r2, r3
 8009d7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009d7e:	6093      	str	r3, [r2, #8]
 8009d80:	e01a      	b.n	8009db8 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	f003 0320 	and.w	r3, r3, #32
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d008      	beq.n	8009d9e <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	015a      	lsls	r2, r3, #5
 8009d90:	693b      	ldr	r3, [r7, #16]
 8009d92:	4413      	add	r3, r2
 8009d94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d98:	461a      	mov	r2, r3
 8009d9a:	2320      	movs	r3, #32
 8009d9c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	b2db      	uxtb	r3, r3
 8009da2:	4619      	mov	r1, r3
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f008 fa3f 	bl	8012228 <HAL_PCD_DataOutStageCallback>
 8009daa:	e005      	b.n	8009db8 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	b2db      	uxtb	r3, r3
 8009db0:	4619      	mov	r1, r3
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f008 fa38 	bl	8012228 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8009db8:	2300      	movs	r3, #0
}
 8009dba:	4618      	mov	r0, r3
 8009dbc:	3718      	adds	r7, #24
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}
 8009dc2:	bf00      	nop
 8009dc4:	4f54300a 	.word	0x4f54300a
 8009dc8:	4f54310a 	.word	0x4f54310a

08009dcc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b086      	sub	sp, #24
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
 8009dd4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ddc:	697b      	ldr	r3, [r7, #20]
 8009dde:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009de0:	697b      	ldr	r3, [r7, #20]
 8009de2:	333c      	adds	r3, #60	; 0x3c
 8009de4:	3304      	adds	r3, #4
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	015a      	lsls	r2, r3, #5
 8009dee:	693b      	ldr	r3, [r7, #16]
 8009df0:	4413      	add	r3, r2
 8009df2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009df6:	689b      	ldr	r3, [r3, #8]
 8009df8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	691b      	ldr	r3, [r3, #16]
 8009dfe:	2b01      	cmp	r3, #1
 8009e00:	d113      	bne.n	8009e2a <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	4a1f      	ldr	r2, [pc, #124]	; (8009e84 <PCD_EP_OutSetupPacket_int+0xb8>)
 8009e06:	4293      	cmp	r3, r2
 8009e08:	d922      	bls.n	8009e50 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d01d      	beq.n	8009e50 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	015a      	lsls	r2, r3, #5
 8009e18:	693b      	ldr	r3, [r7, #16]
 8009e1a:	4413      	add	r3, r2
 8009e1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e20:	461a      	mov	r2, r3
 8009e22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e26:	6093      	str	r3, [r2, #8]
 8009e28:	e012      	b.n	8009e50 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	4a16      	ldr	r2, [pc, #88]	; (8009e88 <PCD_EP_OutSetupPacket_int+0xbc>)
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	d10e      	bne.n	8009e50 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d009      	beq.n	8009e50 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	015a      	lsls	r2, r3, #5
 8009e40:	693b      	ldr	r3, [r7, #16]
 8009e42:	4413      	add	r3, r2
 8009e44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e48:	461a      	mov	r2, r3
 8009e4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e4e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f008 f9d7 	bl	8012204 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	4a0a      	ldr	r2, [pc, #40]	; (8009e84 <PCD_EP_OutSetupPacket_int+0xb8>)
 8009e5a:	4293      	cmp	r3, r2
 8009e5c:	d90c      	bls.n	8009e78 <PCD_EP_OutSetupPacket_int+0xac>
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	691b      	ldr	r3, [r3, #16]
 8009e62:	2b01      	cmp	r3, #1
 8009e64:	d108      	bne.n	8009e78 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6818      	ldr	r0, [r3, #0]
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009e70:	461a      	mov	r2, r3
 8009e72:	2101      	movs	r1, #1
 8009e74:	f003 f9d8 	bl	800d228 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8009e78:	2300      	movs	r3, #0
}
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	3718      	adds	r7, #24
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bd80      	pop	{r7, pc}
 8009e82:	bf00      	nop
 8009e84:	4f54300a 	.word	0x4f54300a
 8009e88:	4f54310a 	.word	0x4f54310a

08009e8c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b085      	sub	sp, #20
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
 8009e94:	460b      	mov	r3, r1
 8009e96:	70fb      	strb	r3, [r7, #3]
 8009e98:	4613      	mov	r3, r2
 8009e9a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ea2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8009ea4:	78fb      	ldrb	r3, [r7, #3]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d107      	bne.n	8009eba <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8009eaa:	883b      	ldrh	r3, [r7, #0]
 8009eac:	0419      	lsls	r1, r3, #16
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	68ba      	ldr	r2, [r7, #8]
 8009eb4:	430a      	orrs	r2, r1
 8009eb6:	629a      	str	r2, [r3, #40]	; 0x28
 8009eb8:	e028      	b.n	8009f0c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ec0:	0c1b      	lsrs	r3, r3, #16
 8009ec2:	68ba      	ldr	r2, [r7, #8]
 8009ec4:	4413      	add	r3, r2
 8009ec6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009ec8:	2300      	movs	r3, #0
 8009eca:	73fb      	strb	r3, [r7, #15]
 8009ecc:	e00d      	b.n	8009eea <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681a      	ldr	r2, [r3, #0]
 8009ed2:	7bfb      	ldrb	r3, [r7, #15]
 8009ed4:	3340      	adds	r3, #64	; 0x40
 8009ed6:	009b      	lsls	r3, r3, #2
 8009ed8:	4413      	add	r3, r2
 8009eda:	685b      	ldr	r3, [r3, #4]
 8009edc:	0c1b      	lsrs	r3, r3, #16
 8009ede:	68ba      	ldr	r2, [r7, #8]
 8009ee0:	4413      	add	r3, r2
 8009ee2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009ee4:	7bfb      	ldrb	r3, [r7, #15]
 8009ee6:	3301      	adds	r3, #1
 8009ee8:	73fb      	strb	r3, [r7, #15]
 8009eea:	7bfa      	ldrb	r2, [r7, #15]
 8009eec:	78fb      	ldrb	r3, [r7, #3]
 8009eee:	3b01      	subs	r3, #1
 8009ef0:	429a      	cmp	r2, r3
 8009ef2:	d3ec      	bcc.n	8009ece <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009ef4:	883b      	ldrh	r3, [r7, #0]
 8009ef6:	0418      	lsls	r0, r3, #16
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	6819      	ldr	r1, [r3, #0]
 8009efc:	78fb      	ldrb	r3, [r7, #3]
 8009efe:	3b01      	subs	r3, #1
 8009f00:	68ba      	ldr	r2, [r7, #8]
 8009f02:	4302      	orrs	r2, r0
 8009f04:	3340      	adds	r3, #64	; 0x40
 8009f06:	009b      	lsls	r3, r3, #2
 8009f08:	440b      	add	r3, r1
 8009f0a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009f0c:	2300      	movs	r3, #0
}
 8009f0e:	4618      	mov	r0, r3
 8009f10:	3714      	adds	r7, #20
 8009f12:	46bd      	mov	sp, r7
 8009f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f18:	4770      	bx	lr

08009f1a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8009f1a:	b480      	push	{r7}
 8009f1c:	b083      	sub	sp, #12
 8009f1e:	af00      	add	r7, sp, #0
 8009f20:	6078      	str	r0, [r7, #4]
 8009f22:	460b      	mov	r3, r1
 8009f24:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	887a      	ldrh	r2, [r7, #2]
 8009f2c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009f2e:	2300      	movs	r3, #0
}
 8009f30:	4618      	mov	r0, r3
 8009f32:	370c      	adds	r7, #12
 8009f34:	46bd      	mov	sp, r7
 8009f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3a:	4770      	bx	lr

08009f3c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	b083      	sub	sp, #12
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
 8009f44:	460b      	mov	r3, r1
 8009f46:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009f48:	bf00      	nop
 8009f4a:	370c      	adds	r7, #12
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f52:	4770      	bx	lr

08009f54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b086      	sub	sp, #24
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d101      	bne.n	8009f66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009f62:	2301      	movs	r3, #1
 8009f64:	e25b      	b.n	800a41e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	f003 0301 	and.w	r3, r3, #1
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d075      	beq.n	800a05e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009f72:	4ba3      	ldr	r3, [pc, #652]	; (800a200 <HAL_RCC_OscConfig+0x2ac>)
 8009f74:	689b      	ldr	r3, [r3, #8]
 8009f76:	f003 030c 	and.w	r3, r3, #12
 8009f7a:	2b04      	cmp	r3, #4
 8009f7c:	d00c      	beq.n	8009f98 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009f7e:	4ba0      	ldr	r3, [pc, #640]	; (800a200 <HAL_RCC_OscConfig+0x2ac>)
 8009f80:	689b      	ldr	r3, [r3, #8]
 8009f82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009f86:	2b08      	cmp	r3, #8
 8009f88:	d112      	bne.n	8009fb0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009f8a:	4b9d      	ldr	r3, [pc, #628]	; (800a200 <HAL_RCC_OscConfig+0x2ac>)
 8009f8c:	685b      	ldr	r3, [r3, #4]
 8009f8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009f92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009f96:	d10b      	bne.n	8009fb0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009f98:	4b99      	ldr	r3, [pc, #612]	; (800a200 <HAL_RCC_OscConfig+0x2ac>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d05b      	beq.n	800a05c <HAL_RCC_OscConfig+0x108>
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	685b      	ldr	r3, [r3, #4]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d157      	bne.n	800a05c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009fac:	2301      	movs	r3, #1
 8009fae:	e236      	b.n	800a41e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	685b      	ldr	r3, [r3, #4]
 8009fb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fb8:	d106      	bne.n	8009fc8 <HAL_RCC_OscConfig+0x74>
 8009fba:	4b91      	ldr	r3, [pc, #580]	; (800a200 <HAL_RCC_OscConfig+0x2ac>)
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	4a90      	ldr	r2, [pc, #576]	; (800a200 <HAL_RCC_OscConfig+0x2ac>)
 8009fc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009fc4:	6013      	str	r3, [r2, #0]
 8009fc6:	e01d      	b.n	800a004 <HAL_RCC_OscConfig+0xb0>
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	685b      	ldr	r3, [r3, #4]
 8009fcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009fd0:	d10c      	bne.n	8009fec <HAL_RCC_OscConfig+0x98>
 8009fd2:	4b8b      	ldr	r3, [pc, #556]	; (800a200 <HAL_RCC_OscConfig+0x2ac>)
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	4a8a      	ldr	r2, [pc, #552]	; (800a200 <HAL_RCC_OscConfig+0x2ac>)
 8009fd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009fdc:	6013      	str	r3, [r2, #0]
 8009fde:	4b88      	ldr	r3, [pc, #544]	; (800a200 <HAL_RCC_OscConfig+0x2ac>)
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	4a87      	ldr	r2, [pc, #540]	; (800a200 <HAL_RCC_OscConfig+0x2ac>)
 8009fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009fe8:	6013      	str	r3, [r2, #0]
 8009fea:	e00b      	b.n	800a004 <HAL_RCC_OscConfig+0xb0>
 8009fec:	4b84      	ldr	r3, [pc, #528]	; (800a200 <HAL_RCC_OscConfig+0x2ac>)
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	4a83      	ldr	r2, [pc, #524]	; (800a200 <HAL_RCC_OscConfig+0x2ac>)
 8009ff2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009ff6:	6013      	str	r3, [r2, #0]
 8009ff8:	4b81      	ldr	r3, [pc, #516]	; (800a200 <HAL_RCC_OscConfig+0x2ac>)
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	4a80      	ldr	r2, [pc, #512]	; (800a200 <HAL_RCC_OscConfig+0x2ac>)
 8009ffe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a002:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	685b      	ldr	r3, [r3, #4]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d013      	beq.n	800a034 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a00c:	f7fd ff60 	bl	8007ed0 <HAL_GetTick>
 800a010:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a012:	e008      	b.n	800a026 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a014:	f7fd ff5c 	bl	8007ed0 <HAL_GetTick>
 800a018:	4602      	mov	r2, r0
 800a01a:	693b      	ldr	r3, [r7, #16]
 800a01c:	1ad3      	subs	r3, r2, r3
 800a01e:	2b64      	cmp	r3, #100	; 0x64
 800a020:	d901      	bls.n	800a026 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a022:	2303      	movs	r3, #3
 800a024:	e1fb      	b.n	800a41e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a026:	4b76      	ldr	r3, [pc, #472]	; (800a200 <HAL_RCC_OscConfig+0x2ac>)
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d0f0      	beq.n	800a014 <HAL_RCC_OscConfig+0xc0>
 800a032:	e014      	b.n	800a05e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a034:	f7fd ff4c 	bl	8007ed0 <HAL_GetTick>
 800a038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a03a:	e008      	b.n	800a04e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a03c:	f7fd ff48 	bl	8007ed0 <HAL_GetTick>
 800a040:	4602      	mov	r2, r0
 800a042:	693b      	ldr	r3, [r7, #16]
 800a044:	1ad3      	subs	r3, r2, r3
 800a046:	2b64      	cmp	r3, #100	; 0x64
 800a048:	d901      	bls.n	800a04e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a04a:	2303      	movs	r3, #3
 800a04c:	e1e7      	b.n	800a41e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a04e:	4b6c      	ldr	r3, [pc, #432]	; (800a200 <HAL_RCC_OscConfig+0x2ac>)
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a056:	2b00      	cmp	r3, #0
 800a058:	d1f0      	bne.n	800a03c <HAL_RCC_OscConfig+0xe8>
 800a05a:	e000      	b.n	800a05e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a05c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	f003 0302 	and.w	r3, r3, #2
 800a066:	2b00      	cmp	r3, #0
 800a068:	d063      	beq.n	800a132 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a06a:	4b65      	ldr	r3, [pc, #404]	; (800a200 <HAL_RCC_OscConfig+0x2ac>)
 800a06c:	689b      	ldr	r3, [r3, #8]
 800a06e:	f003 030c 	and.w	r3, r3, #12
 800a072:	2b00      	cmp	r3, #0
 800a074:	d00b      	beq.n	800a08e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a076:	4b62      	ldr	r3, [pc, #392]	; (800a200 <HAL_RCC_OscConfig+0x2ac>)
 800a078:	689b      	ldr	r3, [r3, #8]
 800a07a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a07e:	2b08      	cmp	r3, #8
 800a080:	d11c      	bne.n	800a0bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a082:	4b5f      	ldr	r3, [pc, #380]	; (800a200 <HAL_RCC_OscConfig+0x2ac>)
 800a084:	685b      	ldr	r3, [r3, #4]
 800a086:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d116      	bne.n	800a0bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a08e:	4b5c      	ldr	r3, [pc, #368]	; (800a200 <HAL_RCC_OscConfig+0x2ac>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	f003 0302 	and.w	r3, r3, #2
 800a096:	2b00      	cmp	r3, #0
 800a098:	d005      	beq.n	800a0a6 <HAL_RCC_OscConfig+0x152>
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	68db      	ldr	r3, [r3, #12]
 800a09e:	2b01      	cmp	r3, #1
 800a0a0:	d001      	beq.n	800a0a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	e1bb      	b.n	800a41e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a0a6:	4b56      	ldr	r3, [pc, #344]	; (800a200 <HAL_RCC_OscConfig+0x2ac>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	691b      	ldr	r3, [r3, #16]
 800a0b2:	00db      	lsls	r3, r3, #3
 800a0b4:	4952      	ldr	r1, [pc, #328]	; (800a200 <HAL_RCC_OscConfig+0x2ac>)
 800a0b6:	4313      	orrs	r3, r2
 800a0b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a0ba:	e03a      	b.n	800a132 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	68db      	ldr	r3, [r3, #12]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d020      	beq.n	800a106 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a0c4:	4b4f      	ldr	r3, [pc, #316]	; (800a204 <HAL_RCC_OscConfig+0x2b0>)
 800a0c6:	2201      	movs	r2, #1
 800a0c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0ca:	f7fd ff01 	bl	8007ed0 <HAL_GetTick>
 800a0ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a0d0:	e008      	b.n	800a0e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a0d2:	f7fd fefd 	bl	8007ed0 <HAL_GetTick>
 800a0d6:	4602      	mov	r2, r0
 800a0d8:	693b      	ldr	r3, [r7, #16]
 800a0da:	1ad3      	subs	r3, r2, r3
 800a0dc:	2b02      	cmp	r3, #2
 800a0de:	d901      	bls.n	800a0e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800a0e0:	2303      	movs	r3, #3
 800a0e2:	e19c      	b.n	800a41e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a0e4:	4b46      	ldr	r3, [pc, #280]	; (800a200 <HAL_RCC_OscConfig+0x2ac>)
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f003 0302 	and.w	r3, r3, #2
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d0f0      	beq.n	800a0d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a0f0:	4b43      	ldr	r3, [pc, #268]	; (800a200 <HAL_RCC_OscConfig+0x2ac>)
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	691b      	ldr	r3, [r3, #16]
 800a0fc:	00db      	lsls	r3, r3, #3
 800a0fe:	4940      	ldr	r1, [pc, #256]	; (800a200 <HAL_RCC_OscConfig+0x2ac>)
 800a100:	4313      	orrs	r3, r2
 800a102:	600b      	str	r3, [r1, #0]
 800a104:	e015      	b.n	800a132 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a106:	4b3f      	ldr	r3, [pc, #252]	; (800a204 <HAL_RCC_OscConfig+0x2b0>)
 800a108:	2200      	movs	r2, #0
 800a10a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a10c:	f7fd fee0 	bl	8007ed0 <HAL_GetTick>
 800a110:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a112:	e008      	b.n	800a126 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a114:	f7fd fedc 	bl	8007ed0 <HAL_GetTick>
 800a118:	4602      	mov	r2, r0
 800a11a:	693b      	ldr	r3, [r7, #16]
 800a11c:	1ad3      	subs	r3, r2, r3
 800a11e:	2b02      	cmp	r3, #2
 800a120:	d901      	bls.n	800a126 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800a122:	2303      	movs	r3, #3
 800a124:	e17b      	b.n	800a41e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a126:	4b36      	ldr	r3, [pc, #216]	; (800a200 <HAL_RCC_OscConfig+0x2ac>)
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	f003 0302 	and.w	r3, r3, #2
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d1f0      	bne.n	800a114 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f003 0308 	and.w	r3, r3, #8
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d030      	beq.n	800a1a0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	695b      	ldr	r3, [r3, #20]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d016      	beq.n	800a174 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a146:	4b30      	ldr	r3, [pc, #192]	; (800a208 <HAL_RCC_OscConfig+0x2b4>)
 800a148:	2201      	movs	r2, #1
 800a14a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a14c:	f7fd fec0 	bl	8007ed0 <HAL_GetTick>
 800a150:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a152:	e008      	b.n	800a166 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a154:	f7fd febc 	bl	8007ed0 <HAL_GetTick>
 800a158:	4602      	mov	r2, r0
 800a15a:	693b      	ldr	r3, [r7, #16]
 800a15c:	1ad3      	subs	r3, r2, r3
 800a15e:	2b02      	cmp	r3, #2
 800a160:	d901      	bls.n	800a166 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800a162:	2303      	movs	r3, #3
 800a164:	e15b      	b.n	800a41e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a166:	4b26      	ldr	r3, [pc, #152]	; (800a200 <HAL_RCC_OscConfig+0x2ac>)
 800a168:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a16a:	f003 0302 	and.w	r3, r3, #2
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d0f0      	beq.n	800a154 <HAL_RCC_OscConfig+0x200>
 800a172:	e015      	b.n	800a1a0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a174:	4b24      	ldr	r3, [pc, #144]	; (800a208 <HAL_RCC_OscConfig+0x2b4>)
 800a176:	2200      	movs	r2, #0
 800a178:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a17a:	f7fd fea9 	bl	8007ed0 <HAL_GetTick>
 800a17e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a180:	e008      	b.n	800a194 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a182:	f7fd fea5 	bl	8007ed0 <HAL_GetTick>
 800a186:	4602      	mov	r2, r0
 800a188:	693b      	ldr	r3, [r7, #16]
 800a18a:	1ad3      	subs	r3, r2, r3
 800a18c:	2b02      	cmp	r3, #2
 800a18e:	d901      	bls.n	800a194 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800a190:	2303      	movs	r3, #3
 800a192:	e144      	b.n	800a41e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a194:	4b1a      	ldr	r3, [pc, #104]	; (800a200 <HAL_RCC_OscConfig+0x2ac>)
 800a196:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a198:	f003 0302 	and.w	r3, r3, #2
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d1f0      	bne.n	800a182 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	f003 0304 	and.w	r3, r3, #4
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	f000 80a0 	beq.w	800a2ee <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a1b2:	4b13      	ldr	r3, [pc, #76]	; (800a200 <HAL_RCC_OscConfig+0x2ac>)
 800a1b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d10f      	bne.n	800a1de <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a1be:	2300      	movs	r3, #0
 800a1c0:	60bb      	str	r3, [r7, #8]
 800a1c2:	4b0f      	ldr	r3, [pc, #60]	; (800a200 <HAL_RCC_OscConfig+0x2ac>)
 800a1c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1c6:	4a0e      	ldr	r2, [pc, #56]	; (800a200 <HAL_RCC_OscConfig+0x2ac>)
 800a1c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a1cc:	6413      	str	r3, [r2, #64]	; 0x40
 800a1ce:	4b0c      	ldr	r3, [pc, #48]	; (800a200 <HAL_RCC_OscConfig+0x2ac>)
 800a1d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a1d6:	60bb      	str	r3, [r7, #8]
 800a1d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a1da:	2301      	movs	r3, #1
 800a1dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a1de:	4b0b      	ldr	r3, [pc, #44]	; (800a20c <HAL_RCC_OscConfig+0x2b8>)
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d121      	bne.n	800a22e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a1ea:	4b08      	ldr	r3, [pc, #32]	; (800a20c <HAL_RCC_OscConfig+0x2b8>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	4a07      	ldr	r2, [pc, #28]	; (800a20c <HAL_RCC_OscConfig+0x2b8>)
 800a1f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a1f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a1f6:	f7fd fe6b 	bl	8007ed0 <HAL_GetTick>
 800a1fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a1fc:	e011      	b.n	800a222 <HAL_RCC_OscConfig+0x2ce>
 800a1fe:	bf00      	nop
 800a200:	40023800 	.word	0x40023800
 800a204:	42470000 	.word	0x42470000
 800a208:	42470e80 	.word	0x42470e80
 800a20c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a210:	f7fd fe5e 	bl	8007ed0 <HAL_GetTick>
 800a214:	4602      	mov	r2, r0
 800a216:	693b      	ldr	r3, [r7, #16]
 800a218:	1ad3      	subs	r3, r2, r3
 800a21a:	2b02      	cmp	r3, #2
 800a21c:	d901      	bls.n	800a222 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800a21e:	2303      	movs	r3, #3
 800a220:	e0fd      	b.n	800a41e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a222:	4b81      	ldr	r3, [pc, #516]	; (800a428 <HAL_RCC_OscConfig+0x4d4>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d0f0      	beq.n	800a210 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	689b      	ldr	r3, [r3, #8]
 800a232:	2b01      	cmp	r3, #1
 800a234:	d106      	bne.n	800a244 <HAL_RCC_OscConfig+0x2f0>
 800a236:	4b7d      	ldr	r3, [pc, #500]	; (800a42c <HAL_RCC_OscConfig+0x4d8>)
 800a238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a23a:	4a7c      	ldr	r2, [pc, #496]	; (800a42c <HAL_RCC_OscConfig+0x4d8>)
 800a23c:	f043 0301 	orr.w	r3, r3, #1
 800a240:	6713      	str	r3, [r2, #112]	; 0x70
 800a242:	e01c      	b.n	800a27e <HAL_RCC_OscConfig+0x32a>
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	689b      	ldr	r3, [r3, #8]
 800a248:	2b05      	cmp	r3, #5
 800a24a:	d10c      	bne.n	800a266 <HAL_RCC_OscConfig+0x312>
 800a24c:	4b77      	ldr	r3, [pc, #476]	; (800a42c <HAL_RCC_OscConfig+0x4d8>)
 800a24e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a250:	4a76      	ldr	r2, [pc, #472]	; (800a42c <HAL_RCC_OscConfig+0x4d8>)
 800a252:	f043 0304 	orr.w	r3, r3, #4
 800a256:	6713      	str	r3, [r2, #112]	; 0x70
 800a258:	4b74      	ldr	r3, [pc, #464]	; (800a42c <HAL_RCC_OscConfig+0x4d8>)
 800a25a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a25c:	4a73      	ldr	r2, [pc, #460]	; (800a42c <HAL_RCC_OscConfig+0x4d8>)
 800a25e:	f043 0301 	orr.w	r3, r3, #1
 800a262:	6713      	str	r3, [r2, #112]	; 0x70
 800a264:	e00b      	b.n	800a27e <HAL_RCC_OscConfig+0x32a>
 800a266:	4b71      	ldr	r3, [pc, #452]	; (800a42c <HAL_RCC_OscConfig+0x4d8>)
 800a268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a26a:	4a70      	ldr	r2, [pc, #448]	; (800a42c <HAL_RCC_OscConfig+0x4d8>)
 800a26c:	f023 0301 	bic.w	r3, r3, #1
 800a270:	6713      	str	r3, [r2, #112]	; 0x70
 800a272:	4b6e      	ldr	r3, [pc, #440]	; (800a42c <HAL_RCC_OscConfig+0x4d8>)
 800a274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a276:	4a6d      	ldr	r2, [pc, #436]	; (800a42c <HAL_RCC_OscConfig+0x4d8>)
 800a278:	f023 0304 	bic.w	r3, r3, #4
 800a27c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	689b      	ldr	r3, [r3, #8]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d015      	beq.n	800a2b2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a286:	f7fd fe23 	bl	8007ed0 <HAL_GetTick>
 800a28a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a28c:	e00a      	b.n	800a2a4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a28e:	f7fd fe1f 	bl	8007ed0 <HAL_GetTick>
 800a292:	4602      	mov	r2, r0
 800a294:	693b      	ldr	r3, [r7, #16]
 800a296:	1ad3      	subs	r3, r2, r3
 800a298:	f241 3288 	movw	r2, #5000	; 0x1388
 800a29c:	4293      	cmp	r3, r2
 800a29e:	d901      	bls.n	800a2a4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800a2a0:	2303      	movs	r3, #3
 800a2a2:	e0bc      	b.n	800a41e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a2a4:	4b61      	ldr	r3, [pc, #388]	; (800a42c <HAL_RCC_OscConfig+0x4d8>)
 800a2a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2a8:	f003 0302 	and.w	r3, r3, #2
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d0ee      	beq.n	800a28e <HAL_RCC_OscConfig+0x33a>
 800a2b0:	e014      	b.n	800a2dc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a2b2:	f7fd fe0d 	bl	8007ed0 <HAL_GetTick>
 800a2b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a2b8:	e00a      	b.n	800a2d0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a2ba:	f7fd fe09 	bl	8007ed0 <HAL_GetTick>
 800a2be:	4602      	mov	r2, r0
 800a2c0:	693b      	ldr	r3, [r7, #16]
 800a2c2:	1ad3      	subs	r3, r2, r3
 800a2c4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a2c8:	4293      	cmp	r3, r2
 800a2ca:	d901      	bls.n	800a2d0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800a2cc:	2303      	movs	r3, #3
 800a2ce:	e0a6      	b.n	800a41e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a2d0:	4b56      	ldr	r3, [pc, #344]	; (800a42c <HAL_RCC_OscConfig+0x4d8>)
 800a2d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2d4:	f003 0302 	and.w	r3, r3, #2
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d1ee      	bne.n	800a2ba <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a2dc:	7dfb      	ldrb	r3, [r7, #23]
 800a2de:	2b01      	cmp	r3, #1
 800a2e0:	d105      	bne.n	800a2ee <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a2e2:	4b52      	ldr	r3, [pc, #328]	; (800a42c <HAL_RCC_OscConfig+0x4d8>)
 800a2e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2e6:	4a51      	ldr	r2, [pc, #324]	; (800a42c <HAL_RCC_OscConfig+0x4d8>)
 800a2e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a2ec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	699b      	ldr	r3, [r3, #24]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	f000 8092 	beq.w	800a41c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a2f8:	4b4c      	ldr	r3, [pc, #304]	; (800a42c <HAL_RCC_OscConfig+0x4d8>)
 800a2fa:	689b      	ldr	r3, [r3, #8]
 800a2fc:	f003 030c 	and.w	r3, r3, #12
 800a300:	2b08      	cmp	r3, #8
 800a302:	d05c      	beq.n	800a3be <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	699b      	ldr	r3, [r3, #24]
 800a308:	2b02      	cmp	r3, #2
 800a30a:	d141      	bne.n	800a390 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a30c:	4b48      	ldr	r3, [pc, #288]	; (800a430 <HAL_RCC_OscConfig+0x4dc>)
 800a30e:	2200      	movs	r2, #0
 800a310:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a312:	f7fd fddd 	bl	8007ed0 <HAL_GetTick>
 800a316:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a318:	e008      	b.n	800a32c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a31a:	f7fd fdd9 	bl	8007ed0 <HAL_GetTick>
 800a31e:	4602      	mov	r2, r0
 800a320:	693b      	ldr	r3, [r7, #16]
 800a322:	1ad3      	subs	r3, r2, r3
 800a324:	2b02      	cmp	r3, #2
 800a326:	d901      	bls.n	800a32c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800a328:	2303      	movs	r3, #3
 800a32a:	e078      	b.n	800a41e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a32c:	4b3f      	ldr	r3, [pc, #252]	; (800a42c <HAL_RCC_OscConfig+0x4d8>)
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a334:	2b00      	cmp	r3, #0
 800a336:	d1f0      	bne.n	800a31a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	69da      	ldr	r2, [r3, #28]
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	6a1b      	ldr	r3, [r3, #32]
 800a340:	431a      	orrs	r2, r3
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a346:	019b      	lsls	r3, r3, #6
 800a348:	431a      	orrs	r2, r3
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a34e:	085b      	lsrs	r3, r3, #1
 800a350:	3b01      	subs	r3, #1
 800a352:	041b      	lsls	r3, r3, #16
 800a354:	431a      	orrs	r2, r3
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a35a:	061b      	lsls	r3, r3, #24
 800a35c:	4933      	ldr	r1, [pc, #204]	; (800a42c <HAL_RCC_OscConfig+0x4d8>)
 800a35e:	4313      	orrs	r3, r2
 800a360:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a362:	4b33      	ldr	r3, [pc, #204]	; (800a430 <HAL_RCC_OscConfig+0x4dc>)
 800a364:	2201      	movs	r2, #1
 800a366:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a368:	f7fd fdb2 	bl	8007ed0 <HAL_GetTick>
 800a36c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a36e:	e008      	b.n	800a382 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a370:	f7fd fdae 	bl	8007ed0 <HAL_GetTick>
 800a374:	4602      	mov	r2, r0
 800a376:	693b      	ldr	r3, [r7, #16]
 800a378:	1ad3      	subs	r3, r2, r3
 800a37a:	2b02      	cmp	r3, #2
 800a37c:	d901      	bls.n	800a382 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800a37e:	2303      	movs	r3, #3
 800a380:	e04d      	b.n	800a41e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a382:	4b2a      	ldr	r3, [pc, #168]	; (800a42c <HAL_RCC_OscConfig+0x4d8>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d0f0      	beq.n	800a370 <HAL_RCC_OscConfig+0x41c>
 800a38e:	e045      	b.n	800a41c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a390:	4b27      	ldr	r3, [pc, #156]	; (800a430 <HAL_RCC_OscConfig+0x4dc>)
 800a392:	2200      	movs	r2, #0
 800a394:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a396:	f7fd fd9b 	bl	8007ed0 <HAL_GetTick>
 800a39a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a39c:	e008      	b.n	800a3b0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a39e:	f7fd fd97 	bl	8007ed0 <HAL_GetTick>
 800a3a2:	4602      	mov	r2, r0
 800a3a4:	693b      	ldr	r3, [r7, #16]
 800a3a6:	1ad3      	subs	r3, r2, r3
 800a3a8:	2b02      	cmp	r3, #2
 800a3aa:	d901      	bls.n	800a3b0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800a3ac:	2303      	movs	r3, #3
 800a3ae:	e036      	b.n	800a41e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a3b0:	4b1e      	ldr	r3, [pc, #120]	; (800a42c <HAL_RCC_OscConfig+0x4d8>)
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d1f0      	bne.n	800a39e <HAL_RCC_OscConfig+0x44a>
 800a3bc:	e02e      	b.n	800a41c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	699b      	ldr	r3, [r3, #24]
 800a3c2:	2b01      	cmp	r3, #1
 800a3c4:	d101      	bne.n	800a3ca <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	e029      	b.n	800a41e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800a3ca:	4b18      	ldr	r3, [pc, #96]	; (800a42c <HAL_RCC_OscConfig+0x4d8>)
 800a3cc:	689b      	ldr	r3, [r3, #8]
 800a3ce:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	69db      	ldr	r3, [r3, #28]
 800a3da:	429a      	cmp	r2, r3
 800a3dc:	d11c      	bne.n	800a418 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a3e8:	429a      	cmp	r2, r3
 800a3ea:	d115      	bne.n	800a418 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800a3ec:	68fa      	ldr	r2, [r7, #12]
 800a3ee:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a3f2:	4013      	ands	r3, r2
 800a3f4:	687a      	ldr	r2, [r7, #4]
 800a3f6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a3f8:	4293      	cmp	r3, r2
 800a3fa:	d10d      	bne.n	800a418 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800a406:	429a      	cmp	r2, r3
 800a408:	d106      	bne.n	800a418 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800a414:	429a      	cmp	r2, r3
 800a416:	d001      	beq.n	800a41c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800a418:	2301      	movs	r3, #1
 800a41a:	e000      	b.n	800a41e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800a41c:	2300      	movs	r3, #0
}
 800a41e:	4618      	mov	r0, r3
 800a420:	3718      	adds	r7, #24
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}
 800a426:	bf00      	nop
 800a428:	40007000 	.word	0x40007000
 800a42c:	40023800 	.word	0x40023800
 800a430:	42470060 	.word	0x42470060

0800a434 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b084      	sub	sp, #16
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
 800a43c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d101      	bne.n	800a448 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a444:	2301      	movs	r3, #1
 800a446:	e0cc      	b.n	800a5e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a448:	4b68      	ldr	r3, [pc, #416]	; (800a5ec <HAL_RCC_ClockConfig+0x1b8>)
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	f003 030f 	and.w	r3, r3, #15
 800a450:	683a      	ldr	r2, [r7, #0]
 800a452:	429a      	cmp	r2, r3
 800a454:	d90c      	bls.n	800a470 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a456:	4b65      	ldr	r3, [pc, #404]	; (800a5ec <HAL_RCC_ClockConfig+0x1b8>)
 800a458:	683a      	ldr	r2, [r7, #0]
 800a45a:	b2d2      	uxtb	r2, r2
 800a45c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a45e:	4b63      	ldr	r3, [pc, #396]	; (800a5ec <HAL_RCC_ClockConfig+0x1b8>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	f003 030f 	and.w	r3, r3, #15
 800a466:	683a      	ldr	r2, [r7, #0]
 800a468:	429a      	cmp	r2, r3
 800a46a:	d001      	beq.n	800a470 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a46c:	2301      	movs	r3, #1
 800a46e:	e0b8      	b.n	800a5e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	f003 0302 	and.w	r3, r3, #2
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d020      	beq.n	800a4be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	f003 0304 	and.w	r3, r3, #4
 800a484:	2b00      	cmp	r3, #0
 800a486:	d005      	beq.n	800a494 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a488:	4b59      	ldr	r3, [pc, #356]	; (800a5f0 <HAL_RCC_ClockConfig+0x1bc>)
 800a48a:	689b      	ldr	r3, [r3, #8]
 800a48c:	4a58      	ldr	r2, [pc, #352]	; (800a5f0 <HAL_RCC_ClockConfig+0x1bc>)
 800a48e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a492:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f003 0308 	and.w	r3, r3, #8
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d005      	beq.n	800a4ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a4a0:	4b53      	ldr	r3, [pc, #332]	; (800a5f0 <HAL_RCC_ClockConfig+0x1bc>)
 800a4a2:	689b      	ldr	r3, [r3, #8]
 800a4a4:	4a52      	ldr	r2, [pc, #328]	; (800a5f0 <HAL_RCC_ClockConfig+0x1bc>)
 800a4a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a4aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a4ac:	4b50      	ldr	r3, [pc, #320]	; (800a5f0 <HAL_RCC_ClockConfig+0x1bc>)
 800a4ae:	689b      	ldr	r3, [r3, #8]
 800a4b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	689b      	ldr	r3, [r3, #8]
 800a4b8:	494d      	ldr	r1, [pc, #308]	; (800a5f0 <HAL_RCC_ClockConfig+0x1bc>)
 800a4ba:	4313      	orrs	r3, r2
 800a4bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	f003 0301 	and.w	r3, r3, #1
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d044      	beq.n	800a554 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	685b      	ldr	r3, [r3, #4]
 800a4ce:	2b01      	cmp	r3, #1
 800a4d0:	d107      	bne.n	800a4e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a4d2:	4b47      	ldr	r3, [pc, #284]	; (800a5f0 <HAL_RCC_ClockConfig+0x1bc>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d119      	bne.n	800a512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a4de:	2301      	movs	r3, #1
 800a4e0:	e07f      	b.n	800a5e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	685b      	ldr	r3, [r3, #4]
 800a4e6:	2b02      	cmp	r3, #2
 800a4e8:	d003      	beq.n	800a4f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a4ee:	2b03      	cmp	r3, #3
 800a4f0:	d107      	bne.n	800a502 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a4f2:	4b3f      	ldr	r3, [pc, #252]	; (800a5f0 <HAL_RCC_ClockConfig+0x1bc>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d109      	bne.n	800a512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a4fe:	2301      	movs	r3, #1
 800a500:	e06f      	b.n	800a5e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a502:	4b3b      	ldr	r3, [pc, #236]	; (800a5f0 <HAL_RCC_ClockConfig+0x1bc>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	f003 0302 	and.w	r3, r3, #2
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d101      	bne.n	800a512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a50e:	2301      	movs	r3, #1
 800a510:	e067      	b.n	800a5e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a512:	4b37      	ldr	r3, [pc, #220]	; (800a5f0 <HAL_RCC_ClockConfig+0x1bc>)
 800a514:	689b      	ldr	r3, [r3, #8]
 800a516:	f023 0203 	bic.w	r2, r3, #3
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	685b      	ldr	r3, [r3, #4]
 800a51e:	4934      	ldr	r1, [pc, #208]	; (800a5f0 <HAL_RCC_ClockConfig+0x1bc>)
 800a520:	4313      	orrs	r3, r2
 800a522:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a524:	f7fd fcd4 	bl	8007ed0 <HAL_GetTick>
 800a528:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a52a:	e00a      	b.n	800a542 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a52c:	f7fd fcd0 	bl	8007ed0 <HAL_GetTick>
 800a530:	4602      	mov	r2, r0
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	1ad3      	subs	r3, r2, r3
 800a536:	f241 3288 	movw	r2, #5000	; 0x1388
 800a53a:	4293      	cmp	r3, r2
 800a53c:	d901      	bls.n	800a542 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a53e:	2303      	movs	r3, #3
 800a540:	e04f      	b.n	800a5e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a542:	4b2b      	ldr	r3, [pc, #172]	; (800a5f0 <HAL_RCC_ClockConfig+0x1bc>)
 800a544:	689b      	ldr	r3, [r3, #8]
 800a546:	f003 020c 	and.w	r2, r3, #12
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	685b      	ldr	r3, [r3, #4]
 800a54e:	009b      	lsls	r3, r3, #2
 800a550:	429a      	cmp	r2, r3
 800a552:	d1eb      	bne.n	800a52c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a554:	4b25      	ldr	r3, [pc, #148]	; (800a5ec <HAL_RCC_ClockConfig+0x1b8>)
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	f003 030f 	and.w	r3, r3, #15
 800a55c:	683a      	ldr	r2, [r7, #0]
 800a55e:	429a      	cmp	r2, r3
 800a560:	d20c      	bcs.n	800a57c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a562:	4b22      	ldr	r3, [pc, #136]	; (800a5ec <HAL_RCC_ClockConfig+0x1b8>)
 800a564:	683a      	ldr	r2, [r7, #0]
 800a566:	b2d2      	uxtb	r2, r2
 800a568:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a56a:	4b20      	ldr	r3, [pc, #128]	; (800a5ec <HAL_RCC_ClockConfig+0x1b8>)
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	f003 030f 	and.w	r3, r3, #15
 800a572:	683a      	ldr	r2, [r7, #0]
 800a574:	429a      	cmp	r2, r3
 800a576:	d001      	beq.n	800a57c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a578:	2301      	movs	r3, #1
 800a57a:	e032      	b.n	800a5e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	f003 0304 	and.w	r3, r3, #4
 800a584:	2b00      	cmp	r3, #0
 800a586:	d008      	beq.n	800a59a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a588:	4b19      	ldr	r3, [pc, #100]	; (800a5f0 <HAL_RCC_ClockConfig+0x1bc>)
 800a58a:	689b      	ldr	r3, [r3, #8]
 800a58c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	68db      	ldr	r3, [r3, #12]
 800a594:	4916      	ldr	r1, [pc, #88]	; (800a5f0 <HAL_RCC_ClockConfig+0x1bc>)
 800a596:	4313      	orrs	r3, r2
 800a598:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	f003 0308 	and.w	r3, r3, #8
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d009      	beq.n	800a5ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a5a6:	4b12      	ldr	r3, [pc, #72]	; (800a5f0 <HAL_RCC_ClockConfig+0x1bc>)
 800a5a8:	689b      	ldr	r3, [r3, #8]
 800a5aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	691b      	ldr	r3, [r3, #16]
 800a5b2:	00db      	lsls	r3, r3, #3
 800a5b4:	490e      	ldr	r1, [pc, #56]	; (800a5f0 <HAL_RCC_ClockConfig+0x1bc>)
 800a5b6:	4313      	orrs	r3, r2
 800a5b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a5ba:	f000 f821 	bl	800a600 <HAL_RCC_GetSysClockFreq>
 800a5be:	4601      	mov	r1, r0
 800a5c0:	4b0b      	ldr	r3, [pc, #44]	; (800a5f0 <HAL_RCC_ClockConfig+0x1bc>)
 800a5c2:	689b      	ldr	r3, [r3, #8]
 800a5c4:	091b      	lsrs	r3, r3, #4
 800a5c6:	f003 030f 	and.w	r3, r3, #15
 800a5ca:	4a0a      	ldr	r2, [pc, #40]	; (800a5f4 <HAL_RCC_ClockConfig+0x1c0>)
 800a5cc:	5cd3      	ldrb	r3, [r2, r3]
 800a5ce:	fa21 f303 	lsr.w	r3, r1, r3
 800a5d2:	4a09      	ldr	r2, [pc, #36]	; (800a5f8 <HAL_RCC_ClockConfig+0x1c4>)
 800a5d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a5d6:	4b09      	ldr	r3, [pc, #36]	; (800a5fc <HAL_RCC_ClockConfig+0x1c8>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	4618      	mov	r0, r3
 800a5dc:	f7fd f9e0 	bl	80079a0 <HAL_InitTick>

  return HAL_OK;
 800a5e0:	2300      	movs	r3, #0
}
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	3710      	adds	r7, #16
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}
 800a5ea:	bf00      	nop
 800a5ec:	40023c00 	.word	0x40023c00
 800a5f0:	40023800 	.word	0x40023800
 800a5f4:	08018984 	.word	0x08018984
 800a5f8:	20000cb4 	.word	0x20000cb4
 800a5fc:	20000cb8 	.word	0x20000cb8

0800a600 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a600:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a602:	b085      	sub	sp, #20
 800a604:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a606:	2300      	movs	r3, #0
 800a608:	607b      	str	r3, [r7, #4]
 800a60a:	2300      	movs	r3, #0
 800a60c:	60fb      	str	r3, [r7, #12]
 800a60e:	2300      	movs	r3, #0
 800a610:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800a612:	2300      	movs	r3, #0
 800a614:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a616:	4b63      	ldr	r3, [pc, #396]	; (800a7a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a618:	689b      	ldr	r3, [r3, #8]
 800a61a:	f003 030c 	and.w	r3, r3, #12
 800a61e:	2b04      	cmp	r3, #4
 800a620:	d007      	beq.n	800a632 <HAL_RCC_GetSysClockFreq+0x32>
 800a622:	2b08      	cmp	r3, #8
 800a624:	d008      	beq.n	800a638 <HAL_RCC_GetSysClockFreq+0x38>
 800a626:	2b00      	cmp	r3, #0
 800a628:	f040 80b4 	bne.w	800a794 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a62c:	4b5e      	ldr	r3, [pc, #376]	; (800a7a8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800a62e:	60bb      	str	r3, [r7, #8]
       break;
 800a630:	e0b3      	b.n	800a79a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a632:	4b5e      	ldr	r3, [pc, #376]	; (800a7ac <HAL_RCC_GetSysClockFreq+0x1ac>)
 800a634:	60bb      	str	r3, [r7, #8]
      break;
 800a636:	e0b0      	b.n	800a79a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a638:	4b5a      	ldr	r3, [pc, #360]	; (800a7a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a63a:	685b      	ldr	r3, [r3, #4]
 800a63c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a640:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a642:	4b58      	ldr	r3, [pc, #352]	; (800a7a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a644:	685b      	ldr	r3, [r3, #4]
 800a646:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d04a      	beq.n	800a6e4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a64e:	4b55      	ldr	r3, [pc, #340]	; (800a7a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a650:	685b      	ldr	r3, [r3, #4]
 800a652:	099b      	lsrs	r3, r3, #6
 800a654:	f04f 0400 	mov.w	r4, #0
 800a658:	f240 11ff 	movw	r1, #511	; 0x1ff
 800a65c:	f04f 0200 	mov.w	r2, #0
 800a660:	ea03 0501 	and.w	r5, r3, r1
 800a664:	ea04 0602 	and.w	r6, r4, r2
 800a668:	4629      	mov	r1, r5
 800a66a:	4632      	mov	r2, r6
 800a66c:	f04f 0300 	mov.w	r3, #0
 800a670:	f04f 0400 	mov.w	r4, #0
 800a674:	0154      	lsls	r4, r2, #5
 800a676:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800a67a:	014b      	lsls	r3, r1, #5
 800a67c:	4619      	mov	r1, r3
 800a67e:	4622      	mov	r2, r4
 800a680:	1b49      	subs	r1, r1, r5
 800a682:	eb62 0206 	sbc.w	r2, r2, r6
 800a686:	f04f 0300 	mov.w	r3, #0
 800a68a:	f04f 0400 	mov.w	r4, #0
 800a68e:	0194      	lsls	r4, r2, #6
 800a690:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800a694:	018b      	lsls	r3, r1, #6
 800a696:	1a5b      	subs	r3, r3, r1
 800a698:	eb64 0402 	sbc.w	r4, r4, r2
 800a69c:	f04f 0100 	mov.w	r1, #0
 800a6a0:	f04f 0200 	mov.w	r2, #0
 800a6a4:	00e2      	lsls	r2, r4, #3
 800a6a6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800a6aa:	00d9      	lsls	r1, r3, #3
 800a6ac:	460b      	mov	r3, r1
 800a6ae:	4614      	mov	r4, r2
 800a6b0:	195b      	adds	r3, r3, r5
 800a6b2:	eb44 0406 	adc.w	r4, r4, r6
 800a6b6:	f04f 0100 	mov.w	r1, #0
 800a6ba:	f04f 0200 	mov.w	r2, #0
 800a6be:	0262      	lsls	r2, r4, #9
 800a6c0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800a6c4:	0259      	lsls	r1, r3, #9
 800a6c6:	460b      	mov	r3, r1
 800a6c8:	4614      	mov	r4, r2
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	4621      	mov	r1, r4
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	f04f 0400 	mov.w	r4, #0
 800a6d4:	461a      	mov	r2, r3
 800a6d6:	4623      	mov	r3, r4
 800a6d8:	f7f6 fae6 	bl	8000ca8 <__aeabi_uldivmod>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	460c      	mov	r4, r1
 800a6e0:	60fb      	str	r3, [r7, #12]
 800a6e2:	e049      	b.n	800a778 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a6e4:	4b2f      	ldr	r3, [pc, #188]	; (800a7a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a6e6:	685b      	ldr	r3, [r3, #4]
 800a6e8:	099b      	lsrs	r3, r3, #6
 800a6ea:	f04f 0400 	mov.w	r4, #0
 800a6ee:	f240 11ff 	movw	r1, #511	; 0x1ff
 800a6f2:	f04f 0200 	mov.w	r2, #0
 800a6f6:	ea03 0501 	and.w	r5, r3, r1
 800a6fa:	ea04 0602 	and.w	r6, r4, r2
 800a6fe:	4629      	mov	r1, r5
 800a700:	4632      	mov	r2, r6
 800a702:	f04f 0300 	mov.w	r3, #0
 800a706:	f04f 0400 	mov.w	r4, #0
 800a70a:	0154      	lsls	r4, r2, #5
 800a70c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800a710:	014b      	lsls	r3, r1, #5
 800a712:	4619      	mov	r1, r3
 800a714:	4622      	mov	r2, r4
 800a716:	1b49      	subs	r1, r1, r5
 800a718:	eb62 0206 	sbc.w	r2, r2, r6
 800a71c:	f04f 0300 	mov.w	r3, #0
 800a720:	f04f 0400 	mov.w	r4, #0
 800a724:	0194      	lsls	r4, r2, #6
 800a726:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800a72a:	018b      	lsls	r3, r1, #6
 800a72c:	1a5b      	subs	r3, r3, r1
 800a72e:	eb64 0402 	sbc.w	r4, r4, r2
 800a732:	f04f 0100 	mov.w	r1, #0
 800a736:	f04f 0200 	mov.w	r2, #0
 800a73a:	00e2      	lsls	r2, r4, #3
 800a73c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800a740:	00d9      	lsls	r1, r3, #3
 800a742:	460b      	mov	r3, r1
 800a744:	4614      	mov	r4, r2
 800a746:	195b      	adds	r3, r3, r5
 800a748:	eb44 0406 	adc.w	r4, r4, r6
 800a74c:	f04f 0100 	mov.w	r1, #0
 800a750:	f04f 0200 	mov.w	r2, #0
 800a754:	02a2      	lsls	r2, r4, #10
 800a756:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800a75a:	0299      	lsls	r1, r3, #10
 800a75c:	460b      	mov	r3, r1
 800a75e:	4614      	mov	r4, r2
 800a760:	4618      	mov	r0, r3
 800a762:	4621      	mov	r1, r4
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f04f 0400 	mov.w	r4, #0
 800a76a:	461a      	mov	r2, r3
 800a76c:	4623      	mov	r3, r4
 800a76e:	f7f6 fa9b 	bl	8000ca8 <__aeabi_uldivmod>
 800a772:	4603      	mov	r3, r0
 800a774:	460c      	mov	r4, r1
 800a776:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a778:	4b0a      	ldr	r3, [pc, #40]	; (800a7a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a77a:	685b      	ldr	r3, [r3, #4]
 800a77c:	0c1b      	lsrs	r3, r3, #16
 800a77e:	f003 0303 	and.w	r3, r3, #3
 800a782:	3301      	adds	r3, #1
 800a784:	005b      	lsls	r3, r3, #1
 800a786:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800a788:	68fa      	ldr	r2, [r7, #12]
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a790:	60bb      	str	r3, [r7, #8]
      break;
 800a792:	e002      	b.n	800a79a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a794:	4b04      	ldr	r3, [pc, #16]	; (800a7a8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800a796:	60bb      	str	r3, [r7, #8]
      break;
 800a798:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a79a:	68bb      	ldr	r3, [r7, #8]
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	3714      	adds	r7, #20
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7a4:	40023800 	.word	0x40023800
 800a7a8:	00f42400 	.word	0x00f42400
 800a7ac:	007a1200 	.word	0x007a1200

0800a7b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a7b0:	b480      	push	{r7}
 800a7b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a7b4:	4b03      	ldr	r3, [pc, #12]	; (800a7c4 <HAL_RCC_GetHCLKFreq+0x14>)
 800a7b6:	681b      	ldr	r3, [r3, #0]
}
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c0:	4770      	bx	lr
 800a7c2:	bf00      	nop
 800a7c4:	20000cb4 	.word	0x20000cb4

0800a7c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a7cc:	f7ff fff0 	bl	800a7b0 <HAL_RCC_GetHCLKFreq>
 800a7d0:	4601      	mov	r1, r0
 800a7d2:	4b05      	ldr	r3, [pc, #20]	; (800a7e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a7d4:	689b      	ldr	r3, [r3, #8]
 800a7d6:	0a9b      	lsrs	r3, r3, #10
 800a7d8:	f003 0307 	and.w	r3, r3, #7
 800a7dc:	4a03      	ldr	r2, [pc, #12]	; (800a7ec <HAL_RCC_GetPCLK1Freq+0x24>)
 800a7de:	5cd3      	ldrb	r3, [r2, r3]
 800a7e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	bd80      	pop	{r7, pc}
 800a7e8:	40023800 	.word	0x40023800
 800a7ec:	08018994 	.word	0x08018994

0800a7f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a7f4:	f7ff ffdc 	bl	800a7b0 <HAL_RCC_GetHCLKFreq>
 800a7f8:	4601      	mov	r1, r0
 800a7fa:	4b05      	ldr	r3, [pc, #20]	; (800a810 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a7fc:	689b      	ldr	r3, [r3, #8]
 800a7fe:	0b5b      	lsrs	r3, r3, #13
 800a800:	f003 0307 	and.w	r3, r3, #7
 800a804:	4a03      	ldr	r2, [pc, #12]	; (800a814 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a806:	5cd3      	ldrb	r3, [r2, r3]
 800a808:	fa21 f303 	lsr.w	r3, r1, r3
}
 800a80c:	4618      	mov	r0, r3
 800a80e:	bd80      	pop	{r7, pc}
 800a810:	40023800 	.word	0x40023800
 800a814:	08018994 	.word	0x08018994

0800a818 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a818:	b480      	push	{r7}
 800a81a:	b083      	sub	sp, #12
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
 800a820:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	220f      	movs	r2, #15
 800a826:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a828:	4b12      	ldr	r3, [pc, #72]	; (800a874 <HAL_RCC_GetClockConfig+0x5c>)
 800a82a:	689b      	ldr	r3, [r3, #8]
 800a82c:	f003 0203 	and.w	r2, r3, #3
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a834:	4b0f      	ldr	r3, [pc, #60]	; (800a874 <HAL_RCC_GetClockConfig+0x5c>)
 800a836:	689b      	ldr	r3, [r3, #8]
 800a838:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a840:	4b0c      	ldr	r3, [pc, #48]	; (800a874 <HAL_RCC_GetClockConfig+0x5c>)
 800a842:	689b      	ldr	r3, [r3, #8]
 800a844:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800a84c:	4b09      	ldr	r3, [pc, #36]	; (800a874 <HAL_RCC_GetClockConfig+0x5c>)
 800a84e:	689b      	ldr	r3, [r3, #8]
 800a850:	08db      	lsrs	r3, r3, #3
 800a852:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a85a:	4b07      	ldr	r3, [pc, #28]	; (800a878 <HAL_RCC_GetClockConfig+0x60>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	f003 020f 	and.w	r2, r3, #15
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	601a      	str	r2, [r3, #0]
}
 800a866:	bf00      	nop
 800a868:	370c      	adds	r7, #12
 800a86a:	46bd      	mov	sp, r7
 800a86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a870:	4770      	bx	lr
 800a872:	bf00      	nop
 800a874:	40023800 	.word	0x40023800
 800a878:	40023c00 	.word	0x40023c00

0800a87c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b082      	sub	sp, #8
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d101      	bne.n	800a88e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a88a:	2301      	movs	r3, #1
 800a88c:	e01d      	b.n	800a8ca <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a894:	b2db      	uxtb	r3, r3
 800a896:	2b00      	cmp	r3, #0
 800a898:	d106      	bne.n	800a8a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2200      	movs	r2, #0
 800a89e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a8a2:	6878      	ldr	r0, [r7, #4]
 800a8a4:	f7fd f9b8 	bl	8007c18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2202      	movs	r2, #2
 800a8ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681a      	ldr	r2, [r3, #0]
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	3304      	adds	r3, #4
 800a8b8:	4619      	mov	r1, r3
 800a8ba:	4610      	mov	r0, r2
 800a8bc:	f000 f95e 	bl	800ab7c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2201      	movs	r2, #1
 800a8c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a8c8:	2300      	movs	r3, #0
}
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	3708      	adds	r7, #8
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}

0800a8d2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a8d2:	b480      	push	{r7}
 800a8d4:	b085      	sub	sp, #20
 800a8d6:	af00      	add	r7, sp, #0
 800a8d8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	68da      	ldr	r2, [r3, #12]
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	f042 0201 	orr.w	r2, r2, #1
 800a8e8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	689b      	ldr	r3, [r3, #8]
 800a8f0:	f003 0307 	and.w	r3, r3, #7
 800a8f4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	2b06      	cmp	r3, #6
 800a8fa:	d007      	beq.n	800a90c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	681a      	ldr	r2, [r3, #0]
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	f042 0201 	orr.w	r2, r2, #1
 800a90a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a90c:	2300      	movs	r3, #0
}
 800a90e:	4618      	mov	r0, r3
 800a910:	3714      	adds	r7, #20
 800a912:	46bd      	mov	sp, r7
 800a914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a918:	4770      	bx	lr

0800a91a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a91a:	b580      	push	{r7, lr}
 800a91c:	b082      	sub	sp, #8
 800a91e:	af00      	add	r7, sp, #0
 800a920:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	691b      	ldr	r3, [r3, #16]
 800a928:	f003 0302 	and.w	r3, r3, #2
 800a92c:	2b02      	cmp	r3, #2
 800a92e:	d122      	bne.n	800a976 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	68db      	ldr	r3, [r3, #12]
 800a936:	f003 0302 	and.w	r3, r3, #2
 800a93a:	2b02      	cmp	r3, #2
 800a93c:	d11b      	bne.n	800a976 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	f06f 0202 	mvn.w	r2, #2
 800a946:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2201      	movs	r2, #1
 800a94c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	699b      	ldr	r3, [r3, #24]
 800a954:	f003 0303 	and.w	r3, r3, #3
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d003      	beq.n	800a964 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	f000 f8ee 	bl	800ab3e <HAL_TIM_IC_CaptureCallback>
 800a962:	e005      	b.n	800a970 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a964:	6878      	ldr	r0, [r7, #4]
 800a966:	f000 f8e0 	bl	800ab2a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a96a:	6878      	ldr	r0, [r7, #4]
 800a96c:	f000 f8f1 	bl	800ab52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2200      	movs	r2, #0
 800a974:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	691b      	ldr	r3, [r3, #16]
 800a97c:	f003 0304 	and.w	r3, r3, #4
 800a980:	2b04      	cmp	r3, #4
 800a982:	d122      	bne.n	800a9ca <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	68db      	ldr	r3, [r3, #12]
 800a98a:	f003 0304 	and.w	r3, r3, #4
 800a98e:	2b04      	cmp	r3, #4
 800a990:	d11b      	bne.n	800a9ca <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	f06f 0204 	mvn.w	r2, #4
 800a99a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2202      	movs	r2, #2
 800a9a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	699b      	ldr	r3, [r3, #24]
 800a9a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d003      	beq.n	800a9b8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a9b0:	6878      	ldr	r0, [r7, #4]
 800a9b2:	f000 f8c4 	bl	800ab3e <HAL_TIM_IC_CaptureCallback>
 800a9b6:	e005      	b.n	800a9c4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9b8:	6878      	ldr	r0, [r7, #4]
 800a9ba:	f000 f8b6 	bl	800ab2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	f000 f8c7 	bl	800ab52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	691b      	ldr	r3, [r3, #16]
 800a9d0:	f003 0308 	and.w	r3, r3, #8
 800a9d4:	2b08      	cmp	r3, #8
 800a9d6:	d122      	bne.n	800aa1e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	68db      	ldr	r3, [r3, #12]
 800a9de:	f003 0308 	and.w	r3, r3, #8
 800a9e2:	2b08      	cmp	r3, #8
 800a9e4:	d11b      	bne.n	800aa1e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	f06f 0208 	mvn.w	r2, #8
 800a9ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2204      	movs	r2, #4
 800a9f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	69db      	ldr	r3, [r3, #28]
 800a9fc:	f003 0303 	and.w	r3, r3, #3
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d003      	beq.n	800aa0c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa04:	6878      	ldr	r0, [r7, #4]
 800aa06:	f000 f89a 	bl	800ab3e <HAL_TIM_IC_CaptureCallback>
 800aa0a:	e005      	b.n	800aa18 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa0c:	6878      	ldr	r0, [r7, #4]
 800aa0e:	f000 f88c 	bl	800ab2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	f000 f89d 	bl	800ab52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	691b      	ldr	r3, [r3, #16]
 800aa24:	f003 0310 	and.w	r3, r3, #16
 800aa28:	2b10      	cmp	r3, #16
 800aa2a:	d122      	bne.n	800aa72 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	68db      	ldr	r3, [r3, #12]
 800aa32:	f003 0310 	and.w	r3, r3, #16
 800aa36:	2b10      	cmp	r3, #16
 800aa38:	d11b      	bne.n	800aa72 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	f06f 0210 	mvn.w	r2, #16
 800aa42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2208      	movs	r2, #8
 800aa48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	69db      	ldr	r3, [r3, #28]
 800aa50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d003      	beq.n	800aa60 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa58:	6878      	ldr	r0, [r7, #4]
 800aa5a:	f000 f870 	bl	800ab3e <HAL_TIM_IC_CaptureCallback>
 800aa5e:	e005      	b.n	800aa6c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa60:	6878      	ldr	r0, [r7, #4]
 800aa62:	f000 f862 	bl	800ab2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa66:	6878      	ldr	r0, [r7, #4]
 800aa68:	f000 f873 	bl	800ab52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2200      	movs	r2, #0
 800aa70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	691b      	ldr	r3, [r3, #16]
 800aa78:	f003 0301 	and.w	r3, r3, #1
 800aa7c:	2b01      	cmp	r3, #1
 800aa7e:	d10e      	bne.n	800aa9e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	68db      	ldr	r3, [r3, #12]
 800aa86:	f003 0301 	and.w	r3, r3, #1
 800aa8a:	2b01      	cmp	r3, #1
 800aa8c:	d107      	bne.n	800aa9e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	f06f 0201 	mvn.w	r2, #1
 800aa96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	f7f8 fc4b 	bl	8003334 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	691b      	ldr	r3, [r3, #16]
 800aaa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aaa8:	2b80      	cmp	r3, #128	; 0x80
 800aaaa:	d10e      	bne.n	800aaca <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	68db      	ldr	r3, [r3, #12]
 800aab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aab6:	2b80      	cmp	r3, #128	; 0x80
 800aab8:	d107      	bne.n	800aaca <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800aac2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800aac4:	6878      	ldr	r0, [r7, #4]
 800aac6:	f000 f97f 	bl	800adc8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	691b      	ldr	r3, [r3, #16]
 800aad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aad4:	2b40      	cmp	r3, #64	; 0x40
 800aad6:	d10e      	bne.n	800aaf6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	68db      	ldr	r3, [r3, #12]
 800aade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aae2:	2b40      	cmp	r3, #64	; 0x40
 800aae4:	d107      	bne.n	800aaf6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800aaee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800aaf0:	6878      	ldr	r0, [r7, #4]
 800aaf2:	f000 f838 	bl	800ab66 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	691b      	ldr	r3, [r3, #16]
 800aafc:	f003 0320 	and.w	r3, r3, #32
 800ab00:	2b20      	cmp	r3, #32
 800ab02:	d10e      	bne.n	800ab22 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	68db      	ldr	r3, [r3, #12]
 800ab0a:	f003 0320 	and.w	r3, r3, #32
 800ab0e:	2b20      	cmp	r3, #32
 800ab10:	d107      	bne.n	800ab22 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f06f 0220 	mvn.w	r2, #32
 800ab1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ab1c:	6878      	ldr	r0, [r7, #4]
 800ab1e:	f000 f949 	bl	800adb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ab22:	bf00      	nop
 800ab24:	3708      	adds	r7, #8
 800ab26:	46bd      	mov	sp, r7
 800ab28:	bd80      	pop	{r7, pc}

0800ab2a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ab2a:	b480      	push	{r7}
 800ab2c:	b083      	sub	sp, #12
 800ab2e:	af00      	add	r7, sp, #0
 800ab30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ab32:	bf00      	nop
 800ab34:	370c      	adds	r7, #12
 800ab36:	46bd      	mov	sp, r7
 800ab38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3c:	4770      	bx	lr

0800ab3e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ab3e:	b480      	push	{r7}
 800ab40:	b083      	sub	sp, #12
 800ab42:	af00      	add	r7, sp, #0
 800ab44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ab46:	bf00      	nop
 800ab48:	370c      	adds	r7, #12
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab50:	4770      	bx	lr

0800ab52 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ab52:	b480      	push	{r7}
 800ab54:	b083      	sub	sp, #12
 800ab56:	af00      	add	r7, sp, #0
 800ab58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ab5a:	bf00      	nop
 800ab5c:	370c      	adds	r7, #12
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab64:	4770      	bx	lr

0800ab66 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ab66:	b480      	push	{r7}
 800ab68:	b083      	sub	sp, #12
 800ab6a:	af00      	add	r7, sp, #0
 800ab6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ab6e:	bf00      	nop
 800ab70:	370c      	adds	r7, #12
 800ab72:	46bd      	mov	sp, r7
 800ab74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab78:	4770      	bx	lr
	...

0800ab7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ab7c:	b480      	push	{r7}
 800ab7e:	b085      	sub	sp, #20
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
 800ab84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	4a40      	ldr	r2, [pc, #256]	; (800ac90 <TIM_Base_SetConfig+0x114>)
 800ab90:	4293      	cmp	r3, r2
 800ab92:	d013      	beq.n	800abbc <TIM_Base_SetConfig+0x40>
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab9a:	d00f      	beq.n	800abbc <TIM_Base_SetConfig+0x40>
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	4a3d      	ldr	r2, [pc, #244]	; (800ac94 <TIM_Base_SetConfig+0x118>)
 800aba0:	4293      	cmp	r3, r2
 800aba2:	d00b      	beq.n	800abbc <TIM_Base_SetConfig+0x40>
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	4a3c      	ldr	r2, [pc, #240]	; (800ac98 <TIM_Base_SetConfig+0x11c>)
 800aba8:	4293      	cmp	r3, r2
 800abaa:	d007      	beq.n	800abbc <TIM_Base_SetConfig+0x40>
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	4a3b      	ldr	r2, [pc, #236]	; (800ac9c <TIM_Base_SetConfig+0x120>)
 800abb0:	4293      	cmp	r3, r2
 800abb2:	d003      	beq.n	800abbc <TIM_Base_SetConfig+0x40>
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	4a3a      	ldr	r2, [pc, #232]	; (800aca0 <TIM_Base_SetConfig+0x124>)
 800abb8:	4293      	cmp	r3, r2
 800abba:	d108      	bne.n	800abce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	685b      	ldr	r3, [r3, #4]
 800abc8:	68fa      	ldr	r2, [r7, #12]
 800abca:	4313      	orrs	r3, r2
 800abcc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	4a2f      	ldr	r2, [pc, #188]	; (800ac90 <TIM_Base_SetConfig+0x114>)
 800abd2:	4293      	cmp	r3, r2
 800abd4:	d02b      	beq.n	800ac2e <TIM_Base_SetConfig+0xb2>
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800abdc:	d027      	beq.n	800ac2e <TIM_Base_SetConfig+0xb2>
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	4a2c      	ldr	r2, [pc, #176]	; (800ac94 <TIM_Base_SetConfig+0x118>)
 800abe2:	4293      	cmp	r3, r2
 800abe4:	d023      	beq.n	800ac2e <TIM_Base_SetConfig+0xb2>
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	4a2b      	ldr	r2, [pc, #172]	; (800ac98 <TIM_Base_SetConfig+0x11c>)
 800abea:	4293      	cmp	r3, r2
 800abec:	d01f      	beq.n	800ac2e <TIM_Base_SetConfig+0xb2>
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	4a2a      	ldr	r2, [pc, #168]	; (800ac9c <TIM_Base_SetConfig+0x120>)
 800abf2:	4293      	cmp	r3, r2
 800abf4:	d01b      	beq.n	800ac2e <TIM_Base_SetConfig+0xb2>
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	4a29      	ldr	r2, [pc, #164]	; (800aca0 <TIM_Base_SetConfig+0x124>)
 800abfa:	4293      	cmp	r3, r2
 800abfc:	d017      	beq.n	800ac2e <TIM_Base_SetConfig+0xb2>
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	4a28      	ldr	r2, [pc, #160]	; (800aca4 <TIM_Base_SetConfig+0x128>)
 800ac02:	4293      	cmp	r3, r2
 800ac04:	d013      	beq.n	800ac2e <TIM_Base_SetConfig+0xb2>
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	4a27      	ldr	r2, [pc, #156]	; (800aca8 <TIM_Base_SetConfig+0x12c>)
 800ac0a:	4293      	cmp	r3, r2
 800ac0c:	d00f      	beq.n	800ac2e <TIM_Base_SetConfig+0xb2>
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	4a26      	ldr	r2, [pc, #152]	; (800acac <TIM_Base_SetConfig+0x130>)
 800ac12:	4293      	cmp	r3, r2
 800ac14:	d00b      	beq.n	800ac2e <TIM_Base_SetConfig+0xb2>
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	4a25      	ldr	r2, [pc, #148]	; (800acb0 <TIM_Base_SetConfig+0x134>)
 800ac1a:	4293      	cmp	r3, r2
 800ac1c:	d007      	beq.n	800ac2e <TIM_Base_SetConfig+0xb2>
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	4a24      	ldr	r2, [pc, #144]	; (800acb4 <TIM_Base_SetConfig+0x138>)
 800ac22:	4293      	cmp	r3, r2
 800ac24:	d003      	beq.n	800ac2e <TIM_Base_SetConfig+0xb2>
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	4a23      	ldr	r2, [pc, #140]	; (800acb8 <TIM_Base_SetConfig+0x13c>)
 800ac2a:	4293      	cmp	r3, r2
 800ac2c:	d108      	bne.n	800ac40 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	68db      	ldr	r3, [r3, #12]
 800ac3a:	68fa      	ldr	r2, [r7, #12]
 800ac3c:	4313      	orrs	r3, r2
 800ac3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	695b      	ldr	r3, [r3, #20]
 800ac4a:	4313      	orrs	r3, r2
 800ac4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	68fa      	ldr	r2, [r7, #12]
 800ac52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	689a      	ldr	r2, [r3, #8]
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	681a      	ldr	r2, [r3, #0]
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	4a0a      	ldr	r2, [pc, #40]	; (800ac90 <TIM_Base_SetConfig+0x114>)
 800ac68:	4293      	cmp	r3, r2
 800ac6a:	d003      	beq.n	800ac74 <TIM_Base_SetConfig+0xf8>
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	4a0c      	ldr	r2, [pc, #48]	; (800aca0 <TIM_Base_SetConfig+0x124>)
 800ac70:	4293      	cmp	r3, r2
 800ac72:	d103      	bne.n	800ac7c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ac74:	683b      	ldr	r3, [r7, #0]
 800ac76:	691a      	ldr	r2, [r3, #16]
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	2201      	movs	r2, #1
 800ac80:	615a      	str	r2, [r3, #20]
}
 800ac82:	bf00      	nop
 800ac84:	3714      	adds	r7, #20
 800ac86:	46bd      	mov	sp, r7
 800ac88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8c:	4770      	bx	lr
 800ac8e:	bf00      	nop
 800ac90:	40010000 	.word	0x40010000
 800ac94:	40000400 	.word	0x40000400
 800ac98:	40000800 	.word	0x40000800
 800ac9c:	40000c00 	.word	0x40000c00
 800aca0:	40010400 	.word	0x40010400
 800aca4:	40014000 	.word	0x40014000
 800aca8:	40014400 	.word	0x40014400
 800acac:	40014800 	.word	0x40014800
 800acb0:	40001800 	.word	0x40001800
 800acb4:	40001c00 	.word	0x40001c00
 800acb8:	40002000 	.word	0x40002000

0800acbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800acbc:	b480      	push	{r7}
 800acbe:	b085      	sub	sp, #20
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
 800acc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800accc:	2b01      	cmp	r3, #1
 800acce:	d101      	bne.n	800acd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800acd0:	2302      	movs	r3, #2
 800acd2:	e05a      	b.n	800ad8a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2201      	movs	r2, #1
 800acd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2202      	movs	r2, #2
 800ace0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	685b      	ldr	r3, [r3, #4]
 800acea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	689b      	ldr	r3, [r3, #8]
 800acf2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acfa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	68fa      	ldr	r2, [r7, #12]
 800ad02:	4313      	orrs	r3, r2
 800ad04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	68fa      	ldr	r2, [r7, #12]
 800ad0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	4a21      	ldr	r2, [pc, #132]	; (800ad98 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800ad14:	4293      	cmp	r3, r2
 800ad16:	d022      	beq.n	800ad5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad20:	d01d      	beq.n	800ad5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	4a1d      	ldr	r2, [pc, #116]	; (800ad9c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800ad28:	4293      	cmp	r3, r2
 800ad2a:	d018      	beq.n	800ad5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	4a1b      	ldr	r2, [pc, #108]	; (800ada0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800ad32:	4293      	cmp	r3, r2
 800ad34:	d013      	beq.n	800ad5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	4a1a      	ldr	r2, [pc, #104]	; (800ada4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800ad3c:	4293      	cmp	r3, r2
 800ad3e:	d00e      	beq.n	800ad5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	4a18      	ldr	r2, [pc, #96]	; (800ada8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ad46:	4293      	cmp	r3, r2
 800ad48:	d009      	beq.n	800ad5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	4a17      	ldr	r2, [pc, #92]	; (800adac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ad50:	4293      	cmp	r3, r2
 800ad52:	d004      	beq.n	800ad5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	4a15      	ldr	r2, [pc, #84]	; (800adb0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ad5a:	4293      	cmp	r3, r2
 800ad5c:	d10c      	bne.n	800ad78 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ad5e:	68bb      	ldr	r3, [r7, #8]
 800ad60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ad64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	685b      	ldr	r3, [r3, #4]
 800ad6a:	68ba      	ldr	r2, [r7, #8]
 800ad6c:	4313      	orrs	r3, r2
 800ad6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	68ba      	ldr	r2, [r7, #8]
 800ad76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2201      	movs	r2, #1
 800ad7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2200      	movs	r2, #0
 800ad84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ad88:	2300      	movs	r3, #0
}
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	3714      	adds	r7, #20
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad94:	4770      	bx	lr
 800ad96:	bf00      	nop
 800ad98:	40010000 	.word	0x40010000
 800ad9c:	40000400 	.word	0x40000400
 800ada0:	40000800 	.word	0x40000800
 800ada4:	40000c00 	.word	0x40000c00
 800ada8:	40010400 	.word	0x40010400
 800adac:	40014000 	.word	0x40014000
 800adb0:	40001800 	.word	0x40001800

0800adb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800adb4:	b480      	push	{r7}
 800adb6:	b083      	sub	sp, #12
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800adbc:	bf00      	nop
 800adbe:	370c      	adds	r7, #12
 800adc0:	46bd      	mov	sp, r7
 800adc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc6:	4770      	bx	lr

0800adc8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800adc8:	b480      	push	{r7}
 800adca:	b083      	sub	sp, #12
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800add0:	bf00      	nop
 800add2:	370c      	adds	r7, #12
 800add4:	46bd      	mov	sp, r7
 800add6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adda:	4770      	bx	lr

0800addc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b082      	sub	sp, #8
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d101      	bne.n	800adee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800adea:	2301      	movs	r3, #1
 800adec:	e03f      	b.n	800ae6e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800adf4:	b2db      	uxtb	r3, r3
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d106      	bne.n	800ae08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	2200      	movs	r2, #0
 800adfe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ae02:	6878      	ldr	r0, [r7, #4]
 800ae04:	f7fc ff5a 	bl	8007cbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2224      	movs	r2, #36	; 0x24
 800ae0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	68da      	ldr	r2, [r3, #12]
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ae1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ae20:	6878      	ldr	r0, [r7, #4]
 800ae22:	f000 fb6b 	bl	800b4fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	691a      	ldr	r2, [r3, #16]
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ae34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	695a      	ldr	r2, [r3, #20]
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ae44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	68da      	ldr	r2, [r3, #12]
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ae54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	2200      	movs	r2, #0
 800ae5a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2220      	movs	r2, #32
 800ae60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	2220      	movs	r2, #32
 800ae68:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800ae6c:	2300      	movs	r3, #0
}
 800ae6e:	4618      	mov	r0, r3
 800ae70:	3708      	adds	r7, #8
 800ae72:	46bd      	mov	sp, r7
 800ae74:	bd80      	pop	{r7, pc}
	...

0800ae78 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b086      	sub	sp, #24
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	60f8      	str	r0, [r7, #12]
 800ae80:	60b9      	str	r1, [r7, #8]
 800ae82:	4613      	mov	r3, r2
 800ae84:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ae8c:	b2db      	uxtb	r3, r3
 800ae8e:	2b20      	cmp	r3, #32
 800ae90:	d153      	bne.n	800af3a <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800ae92:	68bb      	ldr	r3, [r7, #8]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d002      	beq.n	800ae9e <HAL_UART_Transmit_DMA+0x26>
 800ae98:	88fb      	ldrh	r3, [r7, #6]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d101      	bne.n	800aea2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800ae9e:	2301      	movs	r3, #1
 800aea0:	e04c      	b.n	800af3c <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800aea8:	2b01      	cmp	r3, #1
 800aeaa:	d101      	bne.n	800aeb0 <HAL_UART_Transmit_DMA+0x38>
 800aeac:	2302      	movs	r3, #2
 800aeae:	e045      	b.n	800af3c <HAL_UART_Transmit_DMA+0xc4>
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	2201      	movs	r2, #1
 800aeb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800aeb8:	68ba      	ldr	r2, [r7, #8]
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	88fa      	ldrh	r2, [r7, #6]
 800aec2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	88fa      	ldrh	r2, [r7, #6]
 800aec8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	2200      	movs	r2, #0
 800aece:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	2221      	movs	r2, #33	; 0x21
 800aed4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aedc:	4a19      	ldr	r2, [pc, #100]	; (800af44 <HAL_UART_Transmit_DMA+0xcc>)
 800aede:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aee4:	4a18      	ldr	r2, [pc, #96]	; (800af48 <HAL_UART_Transmit_DMA+0xd0>)
 800aee6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aeec:	4a17      	ldr	r2, [pc, #92]	; (800af4c <HAL_UART_Transmit_DMA+0xd4>)
 800aeee:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aef4:	2200      	movs	r2, #0
 800aef6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800aef8:	f107 0308 	add.w	r3, r7, #8
 800aefc:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800af02:	697b      	ldr	r3, [r7, #20]
 800af04:	6819      	ldr	r1, [r3, #0]
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	3304      	adds	r3, #4
 800af0c:	461a      	mov	r2, r3
 800af0e:	88fb      	ldrh	r3, [r7, #6]
 800af10:	f7fd f99c 	bl	800824c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800af1c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	2200      	movs	r2, #0
 800af22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	695a      	ldr	r2, [r3, #20]
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800af34:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800af36:	2300      	movs	r3, #0
 800af38:	e000      	b.n	800af3c <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800af3a:	2302      	movs	r3, #2
  }
}
 800af3c:	4618      	mov	r0, r3
 800af3e:	3718      	adds	r7, #24
 800af40:	46bd      	mov	sp, r7
 800af42:	bd80      	pop	{r7, pc}
 800af44:	0800b18d 	.word	0x0800b18d
 800af48:	0800b1df 	.word	0x0800b1df
 800af4c:	0800b1fb 	.word	0x0800b1fb

0800af50 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b088      	sub	sp, #32
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	68db      	ldr	r3, [r3, #12]
 800af66:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	695b      	ldr	r3, [r3, #20]
 800af6e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800af70:	2300      	movs	r3, #0
 800af72:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800af74:	2300      	movs	r3, #0
 800af76:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800af78:	69fb      	ldr	r3, [r7, #28]
 800af7a:	f003 030f 	and.w	r3, r3, #15
 800af7e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800af80:	693b      	ldr	r3, [r7, #16]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d10d      	bne.n	800afa2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800af86:	69fb      	ldr	r3, [r7, #28]
 800af88:	f003 0320 	and.w	r3, r3, #32
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d008      	beq.n	800afa2 <HAL_UART_IRQHandler+0x52>
 800af90:	69bb      	ldr	r3, [r7, #24]
 800af92:	f003 0320 	and.w	r3, r3, #32
 800af96:	2b00      	cmp	r3, #0
 800af98:	d003      	beq.n	800afa2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f000 fa2d 	bl	800b3fa <UART_Receive_IT>
      return;
 800afa0:	e0d1      	b.n	800b146 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800afa2:	693b      	ldr	r3, [r7, #16]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	f000 80b0 	beq.w	800b10a <HAL_UART_IRQHandler+0x1ba>
 800afaa:	697b      	ldr	r3, [r7, #20]
 800afac:	f003 0301 	and.w	r3, r3, #1
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d105      	bne.n	800afc0 <HAL_UART_IRQHandler+0x70>
 800afb4:	69bb      	ldr	r3, [r7, #24]
 800afb6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800afba:	2b00      	cmp	r3, #0
 800afbc:	f000 80a5 	beq.w	800b10a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800afc0:	69fb      	ldr	r3, [r7, #28]
 800afc2:	f003 0301 	and.w	r3, r3, #1
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d00a      	beq.n	800afe0 <HAL_UART_IRQHandler+0x90>
 800afca:	69bb      	ldr	r3, [r7, #24]
 800afcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d005      	beq.n	800afe0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afd8:	f043 0201 	orr.w	r2, r3, #1
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800afe0:	69fb      	ldr	r3, [r7, #28]
 800afe2:	f003 0304 	and.w	r3, r3, #4
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d00a      	beq.n	800b000 <HAL_UART_IRQHandler+0xb0>
 800afea:	697b      	ldr	r3, [r7, #20]
 800afec:	f003 0301 	and.w	r3, r3, #1
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d005      	beq.n	800b000 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aff8:	f043 0202 	orr.w	r2, r3, #2
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b000:	69fb      	ldr	r3, [r7, #28]
 800b002:	f003 0302 	and.w	r3, r3, #2
 800b006:	2b00      	cmp	r3, #0
 800b008:	d00a      	beq.n	800b020 <HAL_UART_IRQHandler+0xd0>
 800b00a:	697b      	ldr	r3, [r7, #20]
 800b00c:	f003 0301 	and.w	r3, r3, #1
 800b010:	2b00      	cmp	r3, #0
 800b012:	d005      	beq.n	800b020 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b018:	f043 0204 	orr.w	r2, r3, #4
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800b020:	69fb      	ldr	r3, [r7, #28]
 800b022:	f003 0308 	and.w	r3, r3, #8
 800b026:	2b00      	cmp	r3, #0
 800b028:	d00f      	beq.n	800b04a <HAL_UART_IRQHandler+0xfa>
 800b02a:	69bb      	ldr	r3, [r7, #24]
 800b02c:	f003 0320 	and.w	r3, r3, #32
 800b030:	2b00      	cmp	r3, #0
 800b032:	d104      	bne.n	800b03e <HAL_UART_IRQHandler+0xee>
 800b034:	697b      	ldr	r3, [r7, #20]
 800b036:	f003 0301 	and.w	r3, r3, #1
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d005      	beq.n	800b04a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b042:	f043 0208 	orr.w	r2, r3, #8
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d078      	beq.n	800b144 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b052:	69fb      	ldr	r3, [r7, #28]
 800b054:	f003 0320 	and.w	r3, r3, #32
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d007      	beq.n	800b06c <HAL_UART_IRQHandler+0x11c>
 800b05c:	69bb      	ldr	r3, [r7, #24]
 800b05e:	f003 0320 	and.w	r3, r3, #32
 800b062:	2b00      	cmp	r3, #0
 800b064:	d002      	beq.n	800b06c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800b066:	6878      	ldr	r0, [r7, #4]
 800b068:	f000 f9c7 	bl	800b3fa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	695b      	ldr	r3, [r3, #20]
 800b072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b076:	2b40      	cmp	r3, #64	; 0x40
 800b078:	bf0c      	ite	eq
 800b07a:	2301      	moveq	r3, #1
 800b07c:	2300      	movne	r3, #0
 800b07e:	b2db      	uxtb	r3, r3
 800b080:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b086:	f003 0308 	and.w	r3, r3, #8
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d102      	bne.n	800b094 <HAL_UART_IRQHandler+0x144>
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d031      	beq.n	800b0f8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b094:	6878      	ldr	r0, [r7, #4]
 800b096:	f000 f910 	bl	800b2ba <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	695b      	ldr	r3, [r3, #20]
 800b0a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0a4:	2b40      	cmp	r3, #64	; 0x40
 800b0a6:	d123      	bne.n	800b0f0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	695a      	ldr	r2, [r3, #20]
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b0b6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d013      	beq.n	800b0e8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0c4:	4a21      	ldr	r2, [pc, #132]	; (800b14c <HAL_UART_IRQHandler+0x1fc>)
 800b0c6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	f7fd f915 	bl	80082fc <HAL_DMA_Abort_IT>
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d016      	beq.n	800b106 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0de:	687a      	ldr	r2, [r7, #4]
 800b0e0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b0e2:	4610      	mov	r0, r2
 800b0e4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b0e6:	e00e      	b.n	800b106 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b0e8:	6878      	ldr	r0, [r7, #4]
 800b0ea:	f000 f845 	bl	800b178 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b0ee:	e00a      	b.n	800b106 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b0f0:	6878      	ldr	r0, [r7, #4]
 800b0f2:	f000 f841 	bl	800b178 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b0f6:	e006      	b.n	800b106 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b0f8:	6878      	ldr	r0, [r7, #4]
 800b0fa:	f000 f83d 	bl	800b178 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	2200      	movs	r2, #0
 800b102:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800b104:	e01e      	b.n	800b144 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b106:	bf00      	nop
    return;
 800b108:	e01c      	b.n	800b144 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b10a:	69fb      	ldr	r3, [r7, #28]
 800b10c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b110:	2b00      	cmp	r3, #0
 800b112:	d008      	beq.n	800b126 <HAL_UART_IRQHandler+0x1d6>
 800b114:	69bb      	ldr	r3, [r7, #24]
 800b116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d003      	beq.n	800b126 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800b11e:	6878      	ldr	r0, [r7, #4]
 800b120:	f000 f8fd 	bl	800b31e <UART_Transmit_IT>
    return;
 800b124:	e00f      	b.n	800b146 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b126:	69fb      	ldr	r3, [r7, #28]
 800b128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d00a      	beq.n	800b146 <HAL_UART_IRQHandler+0x1f6>
 800b130:	69bb      	ldr	r3, [r7, #24]
 800b132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b136:	2b00      	cmp	r3, #0
 800b138:	d005      	beq.n	800b146 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800b13a:	6878      	ldr	r0, [r7, #4]
 800b13c:	f000 f945 	bl	800b3ca <UART_EndTransmit_IT>
    return;
 800b140:	bf00      	nop
 800b142:	e000      	b.n	800b146 <HAL_UART_IRQHandler+0x1f6>
    return;
 800b144:	bf00      	nop
  }
}
 800b146:	3720      	adds	r7, #32
 800b148:	46bd      	mov	sp, r7
 800b14a:	bd80      	pop	{r7, pc}
 800b14c:	0800b2f7 	.word	0x0800b2f7

0800b150 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b150:	b480      	push	{r7}
 800b152:	b083      	sub	sp, #12
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800b158:	bf00      	nop
 800b15a:	370c      	adds	r7, #12
 800b15c:	46bd      	mov	sp, r7
 800b15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b162:	4770      	bx	lr

0800b164 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b164:	b480      	push	{r7}
 800b166:	b083      	sub	sp, #12
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800b16c:	bf00      	nop
 800b16e:	370c      	adds	r7, #12
 800b170:	46bd      	mov	sp, r7
 800b172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b176:	4770      	bx	lr

0800b178 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b178:	b480      	push	{r7}
 800b17a:	b083      	sub	sp, #12
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b180:	bf00      	nop
 800b182:	370c      	adds	r7, #12
 800b184:	46bd      	mov	sp, r7
 800b186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18a:	4770      	bx	lr

0800b18c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b084      	sub	sp, #16
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b198:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d113      	bne.n	800b1d0 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	695a      	ldr	r2, [r3, #20]
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b1bc:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	68da      	ldr	r2, [r3, #12]
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b1cc:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b1ce:	e002      	b.n	800b1d6 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800b1d0:	68f8      	ldr	r0, [r7, #12]
 800b1d2:	f7fc fdf5 	bl	8007dc0 <HAL_UART_TxCpltCallback>
}
 800b1d6:	bf00      	nop
 800b1d8:	3710      	adds	r7, #16
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	bd80      	pop	{r7, pc}

0800b1de <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b1de:	b580      	push	{r7, lr}
 800b1e0:	b084      	sub	sp, #16
 800b1e2:	af00      	add	r7, sp, #0
 800b1e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1ea:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b1ec:	68f8      	ldr	r0, [r7, #12]
 800b1ee:	f7ff ffaf 	bl	800b150 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b1f2:	bf00      	nop
 800b1f4:	3710      	adds	r7, #16
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bd80      	pop	{r7, pc}

0800b1fa <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b1fa:	b580      	push	{r7, lr}
 800b1fc:	b084      	sub	sp, #16
 800b1fe:	af00      	add	r7, sp, #0
 800b200:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b202:	2300      	movs	r3, #0
 800b204:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b20a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	695b      	ldr	r3, [r3, #20]
 800b212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b216:	2b80      	cmp	r3, #128	; 0x80
 800b218:	bf0c      	ite	eq
 800b21a:	2301      	moveq	r3, #1
 800b21c:	2300      	movne	r3, #0
 800b21e:	b2db      	uxtb	r3, r3
 800b220:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b222:	68bb      	ldr	r3, [r7, #8]
 800b224:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b228:	b2db      	uxtb	r3, r3
 800b22a:	2b21      	cmp	r3, #33	; 0x21
 800b22c:	d108      	bne.n	800b240 <UART_DMAError+0x46>
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d005      	beq.n	800b240 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b234:	68bb      	ldr	r3, [r7, #8]
 800b236:	2200      	movs	r2, #0
 800b238:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800b23a:	68b8      	ldr	r0, [r7, #8]
 800b23c:	f000 f827 	bl	800b28e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b240:	68bb      	ldr	r3, [r7, #8]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	695b      	ldr	r3, [r3, #20]
 800b246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b24a:	2b40      	cmp	r3, #64	; 0x40
 800b24c:	bf0c      	ite	eq
 800b24e:	2301      	moveq	r3, #1
 800b250:	2300      	movne	r3, #0
 800b252:	b2db      	uxtb	r3, r3
 800b254:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b256:	68bb      	ldr	r3, [r7, #8]
 800b258:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b25c:	b2db      	uxtb	r3, r3
 800b25e:	2b22      	cmp	r3, #34	; 0x22
 800b260:	d108      	bne.n	800b274 <UART_DMAError+0x7a>
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d005      	beq.n	800b274 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b268:	68bb      	ldr	r3, [r7, #8]
 800b26a:	2200      	movs	r2, #0
 800b26c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800b26e:	68b8      	ldr	r0, [r7, #8]
 800b270:	f000 f823 	bl	800b2ba <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b274:	68bb      	ldr	r3, [r7, #8]
 800b276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b278:	f043 0210 	orr.w	r2, r3, #16
 800b27c:	68bb      	ldr	r3, [r7, #8]
 800b27e:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b280:	68b8      	ldr	r0, [r7, #8]
 800b282:	f7ff ff79 	bl	800b178 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b286:	bf00      	nop
 800b288:	3710      	adds	r7, #16
 800b28a:	46bd      	mov	sp, r7
 800b28c:	bd80      	pop	{r7, pc}

0800b28e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b28e:	b480      	push	{r7}
 800b290:	b083      	sub	sp, #12
 800b292:	af00      	add	r7, sp, #0
 800b294:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	68da      	ldr	r2, [r3, #12]
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800b2a4:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	2220      	movs	r2, #32
 800b2aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800b2ae:	bf00      	nop
 800b2b0:	370c      	adds	r7, #12
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b8:	4770      	bx	lr

0800b2ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b2ba:	b480      	push	{r7}
 800b2bc:	b083      	sub	sp, #12
 800b2be:	af00      	add	r7, sp, #0
 800b2c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	68da      	ldr	r2, [r3, #12]
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b2d0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	695a      	ldr	r2, [r3, #20]
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	f022 0201 	bic.w	r2, r2, #1
 800b2e0:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	2220      	movs	r2, #32
 800b2e6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800b2ea:	bf00      	nop
 800b2ec:	370c      	adds	r7, #12
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f4:	4770      	bx	lr

0800b2f6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b2f6:	b580      	push	{r7, lr}
 800b2f8:	b084      	sub	sp, #16
 800b2fa:	af00      	add	r7, sp, #0
 800b2fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b302:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	2200      	movs	r2, #0
 800b308:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	2200      	movs	r2, #0
 800b30e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b310:	68f8      	ldr	r0, [r7, #12]
 800b312:	f7ff ff31 	bl	800b178 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b316:	bf00      	nop
 800b318:	3710      	adds	r7, #16
 800b31a:	46bd      	mov	sp, r7
 800b31c:	bd80      	pop	{r7, pc}

0800b31e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b31e:	b480      	push	{r7}
 800b320:	b085      	sub	sp, #20
 800b322:	af00      	add	r7, sp, #0
 800b324:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b32c:	b2db      	uxtb	r3, r3
 800b32e:	2b21      	cmp	r3, #33	; 0x21
 800b330:	d144      	bne.n	800b3bc <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	689b      	ldr	r3, [r3, #8]
 800b336:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b33a:	d11a      	bne.n	800b372 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	6a1b      	ldr	r3, [r3, #32]
 800b340:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	881b      	ldrh	r3, [r3, #0]
 800b346:	461a      	mov	r2, r3
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b350:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	691b      	ldr	r3, [r3, #16]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d105      	bne.n	800b366 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	6a1b      	ldr	r3, [r3, #32]
 800b35e:	1c9a      	adds	r2, r3, #2
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	621a      	str	r2, [r3, #32]
 800b364:	e00e      	b.n	800b384 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	6a1b      	ldr	r3, [r3, #32]
 800b36a:	1c5a      	adds	r2, r3, #1
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	621a      	str	r2, [r3, #32]
 800b370:	e008      	b.n	800b384 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	6a1b      	ldr	r3, [r3, #32]
 800b376:	1c59      	adds	r1, r3, #1
 800b378:	687a      	ldr	r2, [r7, #4]
 800b37a:	6211      	str	r1, [r2, #32]
 800b37c:	781a      	ldrb	r2, [r3, #0]
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b388:	b29b      	uxth	r3, r3
 800b38a:	3b01      	subs	r3, #1
 800b38c:	b29b      	uxth	r3, r3
 800b38e:	687a      	ldr	r2, [r7, #4]
 800b390:	4619      	mov	r1, r3
 800b392:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b394:	2b00      	cmp	r3, #0
 800b396:	d10f      	bne.n	800b3b8 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	68da      	ldr	r2, [r3, #12]
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b3a6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	68da      	ldr	r2, [r3, #12]
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b3b6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	e000      	b.n	800b3be <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800b3bc:	2302      	movs	r3, #2
  }
}
 800b3be:	4618      	mov	r0, r3
 800b3c0:	3714      	adds	r7, #20
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c8:	4770      	bx	lr

0800b3ca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b3ca:	b580      	push	{r7, lr}
 800b3cc:	b082      	sub	sp, #8
 800b3ce:	af00      	add	r7, sp, #0
 800b3d0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	68da      	ldr	r2, [r3, #12]
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b3e0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	2220      	movs	r2, #32
 800b3e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b3ea:	6878      	ldr	r0, [r7, #4]
 800b3ec:	f7fc fce8 	bl	8007dc0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b3f0:	2300      	movs	r3, #0
}
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	3708      	adds	r7, #8
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	bd80      	pop	{r7, pc}

0800b3fa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b3fa:	b580      	push	{r7, lr}
 800b3fc:	b084      	sub	sp, #16
 800b3fe:	af00      	add	r7, sp, #0
 800b400:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b408:	b2db      	uxtb	r3, r3
 800b40a:	2b22      	cmp	r3, #34	; 0x22
 800b40c:	d171      	bne.n	800b4f2 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	689b      	ldr	r3, [r3, #8]
 800b412:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b416:	d123      	bne.n	800b460 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b41c:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	691b      	ldr	r3, [r3, #16]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d10e      	bne.n	800b444 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	685b      	ldr	r3, [r3, #4]
 800b42c:	b29b      	uxth	r3, r3
 800b42e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b432:	b29a      	uxth	r2, r3
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b43c:	1c9a      	adds	r2, r3, #2
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	629a      	str	r2, [r3, #40]	; 0x28
 800b442:	e029      	b.n	800b498 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	685b      	ldr	r3, [r3, #4]
 800b44a:	b29b      	uxth	r3, r3
 800b44c:	b2db      	uxtb	r3, r3
 800b44e:	b29a      	uxth	r2, r3
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b458:	1c5a      	adds	r2, r3, #1
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	629a      	str	r2, [r3, #40]	; 0x28
 800b45e:	e01b      	b.n	800b498 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	691b      	ldr	r3, [r3, #16]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d10a      	bne.n	800b47e <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	6858      	ldr	r0, [r3, #4]
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b472:	1c59      	adds	r1, r3, #1
 800b474:	687a      	ldr	r2, [r7, #4]
 800b476:	6291      	str	r1, [r2, #40]	; 0x28
 800b478:	b2c2      	uxtb	r2, r0
 800b47a:	701a      	strb	r2, [r3, #0]
 800b47c:	e00c      	b.n	800b498 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	685b      	ldr	r3, [r3, #4]
 800b484:	b2da      	uxtb	r2, r3
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b48a:	1c58      	adds	r0, r3, #1
 800b48c:	6879      	ldr	r1, [r7, #4]
 800b48e:	6288      	str	r0, [r1, #40]	; 0x28
 800b490:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b494:	b2d2      	uxtb	r2, r2
 800b496:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b49c:	b29b      	uxth	r3, r3
 800b49e:	3b01      	subs	r3, #1
 800b4a0:	b29b      	uxth	r3, r3
 800b4a2:	687a      	ldr	r2, [r7, #4]
 800b4a4:	4619      	mov	r1, r3
 800b4a6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d120      	bne.n	800b4ee <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	68da      	ldr	r2, [r3, #12]
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	f022 0220 	bic.w	r2, r2, #32
 800b4ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	68da      	ldr	r2, [r3, #12]
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b4ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	695a      	ldr	r2, [r3, #20]
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	f022 0201 	bic.w	r2, r2, #1
 800b4da:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2220      	movs	r2, #32
 800b4e0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800b4e4:	6878      	ldr	r0, [r7, #4]
 800b4e6:	f7ff fe3d 	bl	800b164 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	e002      	b.n	800b4f4 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	e000      	b.n	800b4f4 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800b4f2:	2302      	movs	r3, #2
  }
}
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	3710      	adds	r7, #16
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	bd80      	pop	{r7, pc}

0800b4fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b4fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b500:	b085      	sub	sp, #20
 800b502:	af00      	add	r7, sp, #0
 800b504:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	691b      	ldr	r3, [r3, #16]
 800b50c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	68da      	ldr	r2, [r3, #12]
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	430a      	orrs	r2, r1
 800b51a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	689a      	ldr	r2, [r3, #8]
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	691b      	ldr	r3, [r3, #16]
 800b524:	431a      	orrs	r2, r3
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	695b      	ldr	r3, [r3, #20]
 800b52a:	431a      	orrs	r2, r3
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	69db      	ldr	r3, [r3, #28]
 800b530:	4313      	orrs	r3, r2
 800b532:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	68db      	ldr	r3, [r3, #12]
 800b53a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800b53e:	f023 030c 	bic.w	r3, r3, #12
 800b542:	687a      	ldr	r2, [r7, #4]
 800b544:	6812      	ldr	r2, [r2, #0]
 800b546:	68f9      	ldr	r1, [r7, #12]
 800b548:	430b      	orrs	r3, r1
 800b54a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	695b      	ldr	r3, [r3, #20]
 800b552:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	699a      	ldr	r2, [r3, #24]
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	430a      	orrs	r2, r1
 800b560:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	69db      	ldr	r3, [r3, #28]
 800b566:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b56a:	f040 818b 	bne.w	800b884 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	4ac1      	ldr	r2, [pc, #772]	; (800b878 <UART_SetConfig+0x37c>)
 800b574:	4293      	cmp	r3, r2
 800b576:	d005      	beq.n	800b584 <UART_SetConfig+0x88>
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	4abf      	ldr	r2, [pc, #764]	; (800b87c <UART_SetConfig+0x380>)
 800b57e:	4293      	cmp	r3, r2
 800b580:	f040 80bd 	bne.w	800b6fe <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b584:	f7ff f934 	bl	800a7f0 <HAL_RCC_GetPCLK2Freq>
 800b588:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b58a:	68bb      	ldr	r3, [r7, #8]
 800b58c:	461d      	mov	r5, r3
 800b58e:	f04f 0600 	mov.w	r6, #0
 800b592:	46a8      	mov	r8, r5
 800b594:	46b1      	mov	r9, r6
 800b596:	eb18 0308 	adds.w	r3, r8, r8
 800b59a:	eb49 0409 	adc.w	r4, r9, r9
 800b59e:	4698      	mov	r8, r3
 800b5a0:	46a1      	mov	r9, r4
 800b5a2:	eb18 0805 	adds.w	r8, r8, r5
 800b5a6:	eb49 0906 	adc.w	r9, r9, r6
 800b5aa:	f04f 0100 	mov.w	r1, #0
 800b5ae:	f04f 0200 	mov.w	r2, #0
 800b5b2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b5b6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b5ba:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b5be:	4688      	mov	r8, r1
 800b5c0:	4691      	mov	r9, r2
 800b5c2:	eb18 0005 	adds.w	r0, r8, r5
 800b5c6:	eb49 0106 	adc.w	r1, r9, r6
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	685b      	ldr	r3, [r3, #4]
 800b5ce:	461d      	mov	r5, r3
 800b5d0:	f04f 0600 	mov.w	r6, #0
 800b5d4:	196b      	adds	r3, r5, r5
 800b5d6:	eb46 0406 	adc.w	r4, r6, r6
 800b5da:	461a      	mov	r2, r3
 800b5dc:	4623      	mov	r3, r4
 800b5de:	f7f5 fb63 	bl	8000ca8 <__aeabi_uldivmod>
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	460c      	mov	r4, r1
 800b5e6:	461a      	mov	r2, r3
 800b5e8:	4ba5      	ldr	r3, [pc, #660]	; (800b880 <UART_SetConfig+0x384>)
 800b5ea:	fba3 2302 	umull	r2, r3, r3, r2
 800b5ee:	095b      	lsrs	r3, r3, #5
 800b5f0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b5f4:	68bb      	ldr	r3, [r7, #8]
 800b5f6:	461d      	mov	r5, r3
 800b5f8:	f04f 0600 	mov.w	r6, #0
 800b5fc:	46a9      	mov	r9, r5
 800b5fe:	46b2      	mov	sl, r6
 800b600:	eb19 0309 	adds.w	r3, r9, r9
 800b604:	eb4a 040a 	adc.w	r4, sl, sl
 800b608:	4699      	mov	r9, r3
 800b60a:	46a2      	mov	sl, r4
 800b60c:	eb19 0905 	adds.w	r9, r9, r5
 800b610:	eb4a 0a06 	adc.w	sl, sl, r6
 800b614:	f04f 0100 	mov.w	r1, #0
 800b618:	f04f 0200 	mov.w	r2, #0
 800b61c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b620:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b624:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b628:	4689      	mov	r9, r1
 800b62a:	4692      	mov	sl, r2
 800b62c:	eb19 0005 	adds.w	r0, r9, r5
 800b630:	eb4a 0106 	adc.w	r1, sl, r6
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	685b      	ldr	r3, [r3, #4]
 800b638:	461d      	mov	r5, r3
 800b63a:	f04f 0600 	mov.w	r6, #0
 800b63e:	196b      	adds	r3, r5, r5
 800b640:	eb46 0406 	adc.w	r4, r6, r6
 800b644:	461a      	mov	r2, r3
 800b646:	4623      	mov	r3, r4
 800b648:	f7f5 fb2e 	bl	8000ca8 <__aeabi_uldivmod>
 800b64c:	4603      	mov	r3, r0
 800b64e:	460c      	mov	r4, r1
 800b650:	461a      	mov	r2, r3
 800b652:	4b8b      	ldr	r3, [pc, #556]	; (800b880 <UART_SetConfig+0x384>)
 800b654:	fba3 1302 	umull	r1, r3, r3, r2
 800b658:	095b      	lsrs	r3, r3, #5
 800b65a:	2164      	movs	r1, #100	; 0x64
 800b65c:	fb01 f303 	mul.w	r3, r1, r3
 800b660:	1ad3      	subs	r3, r2, r3
 800b662:	00db      	lsls	r3, r3, #3
 800b664:	3332      	adds	r3, #50	; 0x32
 800b666:	4a86      	ldr	r2, [pc, #536]	; (800b880 <UART_SetConfig+0x384>)
 800b668:	fba2 2303 	umull	r2, r3, r2, r3
 800b66c:	095b      	lsrs	r3, r3, #5
 800b66e:	005b      	lsls	r3, r3, #1
 800b670:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b674:	4498      	add	r8, r3
 800b676:	68bb      	ldr	r3, [r7, #8]
 800b678:	461d      	mov	r5, r3
 800b67a:	f04f 0600 	mov.w	r6, #0
 800b67e:	46a9      	mov	r9, r5
 800b680:	46b2      	mov	sl, r6
 800b682:	eb19 0309 	adds.w	r3, r9, r9
 800b686:	eb4a 040a 	adc.w	r4, sl, sl
 800b68a:	4699      	mov	r9, r3
 800b68c:	46a2      	mov	sl, r4
 800b68e:	eb19 0905 	adds.w	r9, r9, r5
 800b692:	eb4a 0a06 	adc.w	sl, sl, r6
 800b696:	f04f 0100 	mov.w	r1, #0
 800b69a:	f04f 0200 	mov.w	r2, #0
 800b69e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b6a2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b6a6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b6aa:	4689      	mov	r9, r1
 800b6ac:	4692      	mov	sl, r2
 800b6ae:	eb19 0005 	adds.w	r0, r9, r5
 800b6b2:	eb4a 0106 	adc.w	r1, sl, r6
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	685b      	ldr	r3, [r3, #4]
 800b6ba:	461d      	mov	r5, r3
 800b6bc:	f04f 0600 	mov.w	r6, #0
 800b6c0:	196b      	adds	r3, r5, r5
 800b6c2:	eb46 0406 	adc.w	r4, r6, r6
 800b6c6:	461a      	mov	r2, r3
 800b6c8:	4623      	mov	r3, r4
 800b6ca:	f7f5 faed 	bl	8000ca8 <__aeabi_uldivmod>
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	460c      	mov	r4, r1
 800b6d2:	461a      	mov	r2, r3
 800b6d4:	4b6a      	ldr	r3, [pc, #424]	; (800b880 <UART_SetConfig+0x384>)
 800b6d6:	fba3 1302 	umull	r1, r3, r3, r2
 800b6da:	095b      	lsrs	r3, r3, #5
 800b6dc:	2164      	movs	r1, #100	; 0x64
 800b6de:	fb01 f303 	mul.w	r3, r1, r3
 800b6e2:	1ad3      	subs	r3, r2, r3
 800b6e4:	00db      	lsls	r3, r3, #3
 800b6e6:	3332      	adds	r3, #50	; 0x32
 800b6e8:	4a65      	ldr	r2, [pc, #404]	; (800b880 <UART_SetConfig+0x384>)
 800b6ea:	fba2 2303 	umull	r2, r3, r2, r3
 800b6ee:	095b      	lsrs	r3, r3, #5
 800b6f0:	f003 0207 	and.w	r2, r3, #7
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	4442      	add	r2, r8
 800b6fa:	609a      	str	r2, [r3, #8]
 800b6fc:	e26f      	b.n	800bbde <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b6fe:	f7ff f863 	bl	800a7c8 <HAL_RCC_GetPCLK1Freq>
 800b702:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b704:	68bb      	ldr	r3, [r7, #8]
 800b706:	461d      	mov	r5, r3
 800b708:	f04f 0600 	mov.w	r6, #0
 800b70c:	46a8      	mov	r8, r5
 800b70e:	46b1      	mov	r9, r6
 800b710:	eb18 0308 	adds.w	r3, r8, r8
 800b714:	eb49 0409 	adc.w	r4, r9, r9
 800b718:	4698      	mov	r8, r3
 800b71a:	46a1      	mov	r9, r4
 800b71c:	eb18 0805 	adds.w	r8, r8, r5
 800b720:	eb49 0906 	adc.w	r9, r9, r6
 800b724:	f04f 0100 	mov.w	r1, #0
 800b728:	f04f 0200 	mov.w	r2, #0
 800b72c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b730:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b734:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b738:	4688      	mov	r8, r1
 800b73a:	4691      	mov	r9, r2
 800b73c:	eb18 0005 	adds.w	r0, r8, r5
 800b740:	eb49 0106 	adc.w	r1, r9, r6
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	685b      	ldr	r3, [r3, #4]
 800b748:	461d      	mov	r5, r3
 800b74a:	f04f 0600 	mov.w	r6, #0
 800b74e:	196b      	adds	r3, r5, r5
 800b750:	eb46 0406 	adc.w	r4, r6, r6
 800b754:	461a      	mov	r2, r3
 800b756:	4623      	mov	r3, r4
 800b758:	f7f5 faa6 	bl	8000ca8 <__aeabi_uldivmod>
 800b75c:	4603      	mov	r3, r0
 800b75e:	460c      	mov	r4, r1
 800b760:	461a      	mov	r2, r3
 800b762:	4b47      	ldr	r3, [pc, #284]	; (800b880 <UART_SetConfig+0x384>)
 800b764:	fba3 2302 	umull	r2, r3, r3, r2
 800b768:	095b      	lsrs	r3, r3, #5
 800b76a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b76e:	68bb      	ldr	r3, [r7, #8]
 800b770:	461d      	mov	r5, r3
 800b772:	f04f 0600 	mov.w	r6, #0
 800b776:	46a9      	mov	r9, r5
 800b778:	46b2      	mov	sl, r6
 800b77a:	eb19 0309 	adds.w	r3, r9, r9
 800b77e:	eb4a 040a 	adc.w	r4, sl, sl
 800b782:	4699      	mov	r9, r3
 800b784:	46a2      	mov	sl, r4
 800b786:	eb19 0905 	adds.w	r9, r9, r5
 800b78a:	eb4a 0a06 	adc.w	sl, sl, r6
 800b78e:	f04f 0100 	mov.w	r1, #0
 800b792:	f04f 0200 	mov.w	r2, #0
 800b796:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b79a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b79e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b7a2:	4689      	mov	r9, r1
 800b7a4:	4692      	mov	sl, r2
 800b7a6:	eb19 0005 	adds.w	r0, r9, r5
 800b7aa:	eb4a 0106 	adc.w	r1, sl, r6
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	685b      	ldr	r3, [r3, #4]
 800b7b2:	461d      	mov	r5, r3
 800b7b4:	f04f 0600 	mov.w	r6, #0
 800b7b8:	196b      	adds	r3, r5, r5
 800b7ba:	eb46 0406 	adc.w	r4, r6, r6
 800b7be:	461a      	mov	r2, r3
 800b7c0:	4623      	mov	r3, r4
 800b7c2:	f7f5 fa71 	bl	8000ca8 <__aeabi_uldivmod>
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	460c      	mov	r4, r1
 800b7ca:	461a      	mov	r2, r3
 800b7cc:	4b2c      	ldr	r3, [pc, #176]	; (800b880 <UART_SetConfig+0x384>)
 800b7ce:	fba3 1302 	umull	r1, r3, r3, r2
 800b7d2:	095b      	lsrs	r3, r3, #5
 800b7d4:	2164      	movs	r1, #100	; 0x64
 800b7d6:	fb01 f303 	mul.w	r3, r1, r3
 800b7da:	1ad3      	subs	r3, r2, r3
 800b7dc:	00db      	lsls	r3, r3, #3
 800b7de:	3332      	adds	r3, #50	; 0x32
 800b7e0:	4a27      	ldr	r2, [pc, #156]	; (800b880 <UART_SetConfig+0x384>)
 800b7e2:	fba2 2303 	umull	r2, r3, r2, r3
 800b7e6:	095b      	lsrs	r3, r3, #5
 800b7e8:	005b      	lsls	r3, r3, #1
 800b7ea:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b7ee:	4498      	add	r8, r3
 800b7f0:	68bb      	ldr	r3, [r7, #8]
 800b7f2:	461d      	mov	r5, r3
 800b7f4:	f04f 0600 	mov.w	r6, #0
 800b7f8:	46a9      	mov	r9, r5
 800b7fa:	46b2      	mov	sl, r6
 800b7fc:	eb19 0309 	adds.w	r3, r9, r9
 800b800:	eb4a 040a 	adc.w	r4, sl, sl
 800b804:	4699      	mov	r9, r3
 800b806:	46a2      	mov	sl, r4
 800b808:	eb19 0905 	adds.w	r9, r9, r5
 800b80c:	eb4a 0a06 	adc.w	sl, sl, r6
 800b810:	f04f 0100 	mov.w	r1, #0
 800b814:	f04f 0200 	mov.w	r2, #0
 800b818:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b81c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b820:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b824:	4689      	mov	r9, r1
 800b826:	4692      	mov	sl, r2
 800b828:	eb19 0005 	adds.w	r0, r9, r5
 800b82c:	eb4a 0106 	adc.w	r1, sl, r6
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	685b      	ldr	r3, [r3, #4]
 800b834:	461d      	mov	r5, r3
 800b836:	f04f 0600 	mov.w	r6, #0
 800b83a:	196b      	adds	r3, r5, r5
 800b83c:	eb46 0406 	adc.w	r4, r6, r6
 800b840:	461a      	mov	r2, r3
 800b842:	4623      	mov	r3, r4
 800b844:	f7f5 fa30 	bl	8000ca8 <__aeabi_uldivmod>
 800b848:	4603      	mov	r3, r0
 800b84a:	460c      	mov	r4, r1
 800b84c:	461a      	mov	r2, r3
 800b84e:	4b0c      	ldr	r3, [pc, #48]	; (800b880 <UART_SetConfig+0x384>)
 800b850:	fba3 1302 	umull	r1, r3, r3, r2
 800b854:	095b      	lsrs	r3, r3, #5
 800b856:	2164      	movs	r1, #100	; 0x64
 800b858:	fb01 f303 	mul.w	r3, r1, r3
 800b85c:	1ad3      	subs	r3, r2, r3
 800b85e:	00db      	lsls	r3, r3, #3
 800b860:	3332      	adds	r3, #50	; 0x32
 800b862:	4a07      	ldr	r2, [pc, #28]	; (800b880 <UART_SetConfig+0x384>)
 800b864:	fba2 2303 	umull	r2, r3, r2, r3
 800b868:	095b      	lsrs	r3, r3, #5
 800b86a:	f003 0207 	and.w	r2, r3, #7
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	4442      	add	r2, r8
 800b874:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800b876:	e1b2      	b.n	800bbde <UART_SetConfig+0x6e2>
 800b878:	40011000 	.word	0x40011000
 800b87c:	40011400 	.word	0x40011400
 800b880:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	4ad7      	ldr	r2, [pc, #860]	; (800bbe8 <UART_SetConfig+0x6ec>)
 800b88a:	4293      	cmp	r3, r2
 800b88c:	d005      	beq.n	800b89a <UART_SetConfig+0x39e>
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	4ad6      	ldr	r2, [pc, #856]	; (800bbec <UART_SetConfig+0x6f0>)
 800b894:	4293      	cmp	r3, r2
 800b896:	f040 80d1 	bne.w	800ba3c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800b89a:	f7fe ffa9 	bl	800a7f0 <HAL_RCC_GetPCLK2Freq>
 800b89e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b8a0:	68bb      	ldr	r3, [r7, #8]
 800b8a2:	469a      	mov	sl, r3
 800b8a4:	f04f 0b00 	mov.w	fp, #0
 800b8a8:	46d0      	mov	r8, sl
 800b8aa:	46d9      	mov	r9, fp
 800b8ac:	eb18 0308 	adds.w	r3, r8, r8
 800b8b0:	eb49 0409 	adc.w	r4, r9, r9
 800b8b4:	4698      	mov	r8, r3
 800b8b6:	46a1      	mov	r9, r4
 800b8b8:	eb18 080a 	adds.w	r8, r8, sl
 800b8bc:	eb49 090b 	adc.w	r9, r9, fp
 800b8c0:	f04f 0100 	mov.w	r1, #0
 800b8c4:	f04f 0200 	mov.w	r2, #0
 800b8c8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b8cc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b8d0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b8d4:	4688      	mov	r8, r1
 800b8d6:	4691      	mov	r9, r2
 800b8d8:	eb1a 0508 	adds.w	r5, sl, r8
 800b8dc:	eb4b 0609 	adc.w	r6, fp, r9
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	685b      	ldr	r3, [r3, #4]
 800b8e4:	4619      	mov	r1, r3
 800b8e6:	f04f 0200 	mov.w	r2, #0
 800b8ea:	f04f 0300 	mov.w	r3, #0
 800b8ee:	f04f 0400 	mov.w	r4, #0
 800b8f2:	0094      	lsls	r4, r2, #2
 800b8f4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b8f8:	008b      	lsls	r3, r1, #2
 800b8fa:	461a      	mov	r2, r3
 800b8fc:	4623      	mov	r3, r4
 800b8fe:	4628      	mov	r0, r5
 800b900:	4631      	mov	r1, r6
 800b902:	f7f5 f9d1 	bl	8000ca8 <__aeabi_uldivmod>
 800b906:	4603      	mov	r3, r0
 800b908:	460c      	mov	r4, r1
 800b90a:	461a      	mov	r2, r3
 800b90c:	4bb8      	ldr	r3, [pc, #736]	; (800bbf0 <UART_SetConfig+0x6f4>)
 800b90e:	fba3 2302 	umull	r2, r3, r3, r2
 800b912:	095b      	lsrs	r3, r3, #5
 800b914:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b918:	68bb      	ldr	r3, [r7, #8]
 800b91a:	469b      	mov	fp, r3
 800b91c:	f04f 0c00 	mov.w	ip, #0
 800b920:	46d9      	mov	r9, fp
 800b922:	46e2      	mov	sl, ip
 800b924:	eb19 0309 	adds.w	r3, r9, r9
 800b928:	eb4a 040a 	adc.w	r4, sl, sl
 800b92c:	4699      	mov	r9, r3
 800b92e:	46a2      	mov	sl, r4
 800b930:	eb19 090b 	adds.w	r9, r9, fp
 800b934:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b938:	f04f 0100 	mov.w	r1, #0
 800b93c:	f04f 0200 	mov.w	r2, #0
 800b940:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b944:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b948:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b94c:	4689      	mov	r9, r1
 800b94e:	4692      	mov	sl, r2
 800b950:	eb1b 0509 	adds.w	r5, fp, r9
 800b954:	eb4c 060a 	adc.w	r6, ip, sl
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	685b      	ldr	r3, [r3, #4]
 800b95c:	4619      	mov	r1, r3
 800b95e:	f04f 0200 	mov.w	r2, #0
 800b962:	f04f 0300 	mov.w	r3, #0
 800b966:	f04f 0400 	mov.w	r4, #0
 800b96a:	0094      	lsls	r4, r2, #2
 800b96c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b970:	008b      	lsls	r3, r1, #2
 800b972:	461a      	mov	r2, r3
 800b974:	4623      	mov	r3, r4
 800b976:	4628      	mov	r0, r5
 800b978:	4631      	mov	r1, r6
 800b97a:	f7f5 f995 	bl	8000ca8 <__aeabi_uldivmod>
 800b97e:	4603      	mov	r3, r0
 800b980:	460c      	mov	r4, r1
 800b982:	461a      	mov	r2, r3
 800b984:	4b9a      	ldr	r3, [pc, #616]	; (800bbf0 <UART_SetConfig+0x6f4>)
 800b986:	fba3 1302 	umull	r1, r3, r3, r2
 800b98a:	095b      	lsrs	r3, r3, #5
 800b98c:	2164      	movs	r1, #100	; 0x64
 800b98e:	fb01 f303 	mul.w	r3, r1, r3
 800b992:	1ad3      	subs	r3, r2, r3
 800b994:	011b      	lsls	r3, r3, #4
 800b996:	3332      	adds	r3, #50	; 0x32
 800b998:	4a95      	ldr	r2, [pc, #596]	; (800bbf0 <UART_SetConfig+0x6f4>)
 800b99a:	fba2 2303 	umull	r2, r3, r2, r3
 800b99e:	095b      	lsrs	r3, r3, #5
 800b9a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b9a4:	4498      	add	r8, r3
 800b9a6:	68bb      	ldr	r3, [r7, #8]
 800b9a8:	469b      	mov	fp, r3
 800b9aa:	f04f 0c00 	mov.w	ip, #0
 800b9ae:	46d9      	mov	r9, fp
 800b9b0:	46e2      	mov	sl, ip
 800b9b2:	eb19 0309 	adds.w	r3, r9, r9
 800b9b6:	eb4a 040a 	adc.w	r4, sl, sl
 800b9ba:	4699      	mov	r9, r3
 800b9bc:	46a2      	mov	sl, r4
 800b9be:	eb19 090b 	adds.w	r9, r9, fp
 800b9c2:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b9c6:	f04f 0100 	mov.w	r1, #0
 800b9ca:	f04f 0200 	mov.w	r2, #0
 800b9ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b9d2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b9d6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b9da:	4689      	mov	r9, r1
 800b9dc:	4692      	mov	sl, r2
 800b9de:	eb1b 0509 	adds.w	r5, fp, r9
 800b9e2:	eb4c 060a 	adc.w	r6, ip, sl
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	685b      	ldr	r3, [r3, #4]
 800b9ea:	4619      	mov	r1, r3
 800b9ec:	f04f 0200 	mov.w	r2, #0
 800b9f0:	f04f 0300 	mov.w	r3, #0
 800b9f4:	f04f 0400 	mov.w	r4, #0
 800b9f8:	0094      	lsls	r4, r2, #2
 800b9fa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b9fe:	008b      	lsls	r3, r1, #2
 800ba00:	461a      	mov	r2, r3
 800ba02:	4623      	mov	r3, r4
 800ba04:	4628      	mov	r0, r5
 800ba06:	4631      	mov	r1, r6
 800ba08:	f7f5 f94e 	bl	8000ca8 <__aeabi_uldivmod>
 800ba0c:	4603      	mov	r3, r0
 800ba0e:	460c      	mov	r4, r1
 800ba10:	461a      	mov	r2, r3
 800ba12:	4b77      	ldr	r3, [pc, #476]	; (800bbf0 <UART_SetConfig+0x6f4>)
 800ba14:	fba3 1302 	umull	r1, r3, r3, r2
 800ba18:	095b      	lsrs	r3, r3, #5
 800ba1a:	2164      	movs	r1, #100	; 0x64
 800ba1c:	fb01 f303 	mul.w	r3, r1, r3
 800ba20:	1ad3      	subs	r3, r2, r3
 800ba22:	011b      	lsls	r3, r3, #4
 800ba24:	3332      	adds	r3, #50	; 0x32
 800ba26:	4a72      	ldr	r2, [pc, #456]	; (800bbf0 <UART_SetConfig+0x6f4>)
 800ba28:	fba2 2303 	umull	r2, r3, r2, r3
 800ba2c:	095b      	lsrs	r3, r3, #5
 800ba2e:	f003 020f 	and.w	r2, r3, #15
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	4442      	add	r2, r8
 800ba38:	609a      	str	r2, [r3, #8]
 800ba3a:	e0d0      	b.n	800bbde <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800ba3c:	f7fe fec4 	bl	800a7c8 <HAL_RCC_GetPCLK1Freq>
 800ba40:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ba42:	68bb      	ldr	r3, [r7, #8]
 800ba44:	469a      	mov	sl, r3
 800ba46:	f04f 0b00 	mov.w	fp, #0
 800ba4a:	46d0      	mov	r8, sl
 800ba4c:	46d9      	mov	r9, fp
 800ba4e:	eb18 0308 	adds.w	r3, r8, r8
 800ba52:	eb49 0409 	adc.w	r4, r9, r9
 800ba56:	4698      	mov	r8, r3
 800ba58:	46a1      	mov	r9, r4
 800ba5a:	eb18 080a 	adds.w	r8, r8, sl
 800ba5e:	eb49 090b 	adc.w	r9, r9, fp
 800ba62:	f04f 0100 	mov.w	r1, #0
 800ba66:	f04f 0200 	mov.w	r2, #0
 800ba6a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800ba6e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800ba72:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ba76:	4688      	mov	r8, r1
 800ba78:	4691      	mov	r9, r2
 800ba7a:	eb1a 0508 	adds.w	r5, sl, r8
 800ba7e:	eb4b 0609 	adc.w	r6, fp, r9
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	685b      	ldr	r3, [r3, #4]
 800ba86:	4619      	mov	r1, r3
 800ba88:	f04f 0200 	mov.w	r2, #0
 800ba8c:	f04f 0300 	mov.w	r3, #0
 800ba90:	f04f 0400 	mov.w	r4, #0
 800ba94:	0094      	lsls	r4, r2, #2
 800ba96:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ba9a:	008b      	lsls	r3, r1, #2
 800ba9c:	461a      	mov	r2, r3
 800ba9e:	4623      	mov	r3, r4
 800baa0:	4628      	mov	r0, r5
 800baa2:	4631      	mov	r1, r6
 800baa4:	f7f5 f900 	bl	8000ca8 <__aeabi_uldivmod>
 800baa8:	4603      	mov	r3, r0
 800baaa:	460c      	mov	r4, r1
 800baac:	461a      	mov	r2, r3
 800baae:	4b50      	ldr	r3, [pc, #320]	; (800bbf0 <UART_SetConfig+0x6f4>)
 800bab0:	fba3 2302 	umull	r2, r3, r3, r2
 800bab4:	095b      	lsrs	r3, r3, #5
 800bab6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800baba:	68bb      	ldr	r3, [r7, #8]
 800babc:	469b      	mov	fp, r3
 800babe:	f04f 0c00 	mov.w	ip, #0
 800bac2:	46d9      	mov	r9, fp
 800bac4:	46e2      	mov	sl, ip
 800bac6:	eb19 0309 	adds.w	r3, r9, r9
 800baca:	eb4a 040a 	adc.w	r4, sl, sl
 800bace:	4699      	mov	r9, r3
 800bad0:	46a2      	mov	sl, r4
 800bad2:	eb19 090b 	adds.w	r9, r9, fp
 800bad6:	eb4a 0a0c 	adc.w	sl, sl, ip
 800bada:	f04f 0100 	mov.w	r1, #0
 800bade:	f04f 0200 	mov.w	r2, #0
 800bae2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bae6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800baea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800baee:	4689      	mov	r9, r1
 800baf0:	4692      	mov	sl, r2
 800baf2:	eb1b 0509 	adds.w	r5, fp, r9
 800baf6:	eb4c 060a 	adc.w	r6, ip, sl
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	685b      	ldr	r3, [r3, #4]
 800bafe:	4619      	mov	r1, r3
 800bb00:	f04f 0200 	mov.w	r2, #0
 800bb04:	f04f 0300 	mov.w	r3, #0
 800bb08:	f04f 0400 	mov.w	r4, #0
 800bb0c:	0094      	lsls	r4, r2, #2
 800bb0e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800bb12:	008b      	lsls	r3, r1, #2
 800bb14:	461a      	mov	r2, r3
 800bb16:	4623      	mov	r3, r4
 800bb18:	4628      	mov	r0, r5
 800bb1a:	4631      	mov	r1, r6
 800bb1c:	f7f5 f8c4 	bl	8000ca8 <__aeabi_uldivmod>
 800bb20:	4603      	mov	r3, r0
 800bb22:	460c      	mov	r4, r1
 800bb24:	461a      	mov	r2, r3
 800bb26:	4b32      	ldr	r3, [pc, #200]	; (800bbf0 <UART_SetConfig+0x6f4>)
 800bb28:	fba3 1302 	umull	r1, r3, r3, r2
 800bb2c:	095b      	lsrs	r3, r3, #5
 800bb2e:	2164      	movs	r1, #100	; 0x64
 800bb30:	fb01 f303 	mul.w	r3, r1, r3
 800bb34:	1ad3      	subs	r3, r2, r3
 800bb36:	011b      	lsls	r3, r3, #4
 800bb38:	3332      	adds	r3, #50	; 0x32
 800bb3a:	4a2d      	ldr	r2, [pc, #180]	; (800bbf0 <UART_SetConfig+0x6f4>)
 800bb3c:	fba2 2303 	umull	r2, r3, r2, r3
 800bb40:	095b      	lsrs	r3, r3, #5
 800bb42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bb46:	4498      	add	r8, r3
 800bb48:	68bb      	ldr	r3, [r7, #8]
 800bb4a:	469b      	mov	fp, r3
 800bb4c:	f04f 0c00 	mov.w	ip, #0
 800bb50:	46d9      	mov	r9, fp
 800bb52:	46e2      	mov	sl, ip
 800bb54:	eb19 0309 	adds.w	r3, r9, r9
 800bb58:	eb4a 040a 	adc.w	r4, sl, sl
 800bb5c:	4699      	mov	r9, r3
 800bb5e:	46a2      	mov	sl, r4
 800bb60:	eb19 090b 	adds.w	r9, r9, fp
 800bb64:	eb4a 0a0c 	adc.w	sl, sl, ip
 800bb68:	f04f 0100 	mov.w	r1, #0
 800bb6c:	f04f 0200 	mov.w	r2, #0
 800bb70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bb74:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800bb78:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800bb7c:	4689      	mov	r9, r1
 800bb7e:	4692      	mov	sl, r2
 800bb80:	eb1b 0509 	adds.w	r5, fp, r9
 800bb84:	eb4c 060a 	adc.w	r6, ip, sl
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	685b      	ldr	r3, [r3, #4]
 800bb8c:	4619      	mov	r1, r3
 800bb8e:	f04f 0200 	mov.w	r2, #0
 800bb92:	f04f 0300 	mov.w	r3, #0
 800bb96:	f04f 0400 	mov.w	r4, #0
 800bb9a:	0094      	lsls	r4, r2, #2
 800bb9c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800bba0:	008b      	lsls	r3, r1, #2
 800bba2:	461a      	mov	r2, r3
 800bba4:	4623      	mov	r3, r4
 800bba6:	4628      	mov	r0, r5
 800bba8:	4631      	mov	r1, r6
 800bbaa:	f7f5 f87d 	bl	8000ca8 <__aeabi_uldivmod>
 800bbae:	4603      	mov	r3, r0
 800bbb0:	460c      	mov	r4, r1
 800bbb2:	461a      	mov	r2, r3
 800bbb4:	4b0e      	ldr	r3, [pc, #56]	; (800bbf0 <UART_SetConfig+0x6f4>)
 800bbb6:	fba3 1302 	umull	r1, r3, r3, r2
 800bbba:	095b      	lsrs	r3, r3, #5
 800bbbc:	2164      	movs	r1, #100	; 0x64
 800bbbe:	fb01 f303 	mul.w	r3, r1, r3
 800bbc2:	1ad3      	subs	r3, r2, r3
 800bbc4:	011b      	lsls	r3, r3, #4
 800bbc6:	3332      	adds	r3, #50	; 0x32
 800bbc8:	4a09      	ldr	r2, [pc, #36]	; (800bbf0 <UART_SetConfig+0x6f4>)
 800bbca:	fba2 2303 	umull	r2, r3, r2, r3
 800bbce:	095b      	lsrs	r3, r3, #5
 800bbd0:	f003 020f 	and.w	r2, r3, #15
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	4442      	add	r2, r8
 800bbda:	609a      	str	r2, [r3, #8]
}
 800bbdc:	e7ff      	b.n	800bbde <UART_SetConfig+0x6e2>
 800bbde:	bf00      	nop
 800bbe0:	3714      	adds	r7, #20
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbe8:	40011000 	.word	0x40011000
 800bbec:	40011400 	.word	0x40011400
 800bbf0:	51eb851f 	.word	0x51eb851f

0800bbf4 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800bbf4:	b480      	push	{r7}
 800bbf6:	b085      	sub	sp, #20
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
 800bbfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800bbfe:	2300      	movs	r3, #0
 800bc00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800bc02:	683b      	ldr	r3, [r7, #0]
 800bc04:	681a      	ldr	r2, [r3, #0]
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc0c:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800bc0e:	68fa      	ldr	r2, [r7, #12]
 800bc10:	4b20      	ldr	r3, [pc, #128]	; (800bc94 <FSMC_NORSRAM_Init+0xa0>)
 800bc12:	4013      	ands	r3, r2
 800bc14:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800bc16:	683b      	ldr	r3, [r7, #0]
 800bc18:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800bc1a:	683b      	ldr	r3, [r7, #0]
 800bc1c:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800bc1e:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800bc20:	683b      	ldr	r3, [r7, #0]
 800bc22:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800bc24:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800bc2a:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800bc30:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800bc32:	683b      	ldr	r3, [r7, #0]
 800bc34:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800bc36:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800bc38:	683b      	ldr	r3, [r7, #0]
 800bc3a:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 800bc3c:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800bc42:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800bc44:	683b      	ldr	r3, [r7, #0]
 800bc46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800bc48:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800bc4e:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800bc50:	683b      	ldr	r3, [r7, #0]
 800bc52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800bc54:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800bc56:	683b      	ldr	r3, [r7, #0]
 800bc58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800bc5a:	431a      	orrs	r2, r3
                     Init->WriteBurst
 800bc5c:	683b      	ldr	r3, [r7, #0]
 800bc5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 800bc60:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800bc62:	68fa      	ldr	r2, [r7, #12]
 800bc64:	4313      	orrs	r3, r2
 800bc66:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800bc68:	683b      	ldr	r3, [r7, #0]
 800bc6a:	689b      	ldr	r3, [r3, #8]
 800bc6c:	2b08      	cmp	r3, #8
 800bc6e:	d103      	bne.n	800bc78 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc76:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800bc78:	683b      	ldr	r3, [r7, #0]
 800bc7a:	681a      	ldr	r2, [r3, #0]
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	68f9      	ldr	r1, [r7, #12]
 800bc80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800bc84:	2300      	movs	r3, #0
}
 800bc86:	4618      	mov	r0, r3
 800bc88:	3714      	adds	r7, #20
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc90:	4770      	bx	lr
 800bc92:	bf00      	nop
 800bc94:	fff00080 	.word	0xfff00080

0800bc98 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800bc98:	b480      	push	{r7}
 800bc9a:	b087      	sub	sp, #28
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	60f8      	str	r0, [r7, #12]
 800bca0:	60b9      	str	r1, [r7, #8]
 800bca2:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800bca4:	2300      	movs	r3, #0
 800bca6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	1c5a      	adds	r2, r3, #1
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcb2:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800bcb4:	697b      	ldr	r3, [r7, #20]
 800bcb6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800bcba:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800bcbc:	68bb      	ldr	r3, [r7, #8]
 800bcbe:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800bcc0:	68bb      	ldr	r3, [r7, #8]
 800bcc2:	685b      	ldr	r3, [r3, #4]
 800bcc4:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800bcc6:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800bcc8:	68bb      	ldr	r3, [r7, #8]
 800bcca:	689b      	ldr	r3, [r3, #8]
 800bccc:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800bcce:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800bcd0:	68bb      	ldr	r3, [r7, #8]
 800bcd2:	68db      	ldr	r3, [r3, #12]
 800bcd4:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800bcd6:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800bcd8:	68bb      	ldr	r3, [r7, #8]
 800bcda:	691b      	ldr	r3, [r3, #16]
 800bcdc:	3b01      	subs	r3, #1
 800bcde:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800bce0:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800bce2:	68bb      	ldr	r3, [r7, #8]
 800bce4:	695b      	ldr	r3, [r3, #20]
 800bce6:	3b02      	subs	r3, #2
 800bce8:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800bcea:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800bcec:	68bb      	ldr	r3, [r7, #8]
 800bcee:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800bcf0:	4313      	orrs	r3, r2
 800bcf2:	697a      	ldr	r2, [r7, #20]
 800bcf4:	4313      	orrs	r3, r2
 800bcf6:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	1c5a      	adds	r2, r3, #1
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	6979      	ldr	r1, [r7, #20]
 800bd00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800bd04:	2300      	movs	r3, #0
}
 800bd06:	4618      	mov	r0, r3
 800bd08:	371c      	adds	r7, #28
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd10:	4770      	bx	lr
	...

0800bd14 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800bd14:	b480      	push	{r7}
 800bd16:	b087      	sub	sp, #28
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	60f8      	str	r0, [r7, #12]
 800bd1c:	60b9      	str	r1, [r7, #8]
 800bd1e:	607a      	str	r2, [r7, #4]
 800bd20:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800bd22:	2300      	movs	r3, #0
 800bd24:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800bd26:	683b      	ldr	r3, [r7, #0]
 800bd28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bd2c:	d122      	bne.n	800bd74 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	687a      	ldr	r2, [r7, #4]
 800bd32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd36:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800bd38:	697a      	ldr	r2, [r7, #20]
 800bd3a:	4b15      	ldr	r3, [pc, #84]	; (800bd90 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800bd3c:	4013      	ands	r3, r2
 800bd3e:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800bd40:	68bb      	ldr	r3, [r7, #8]
 800bd42:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800bd44:	68bb      	ldr	r3, [r7, #8]
 800bd46:	685b      	ldr	r3, [r3, #4]
 800bd48:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800bd4a:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800bd4c:	68bb      	ldr	r3, [r7, #8]
 800bd4e:	689b      	ldr	r3, [r3, #8]
 800bd50:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800bd52:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800bd54:	68bb      	ldr	r3, [r7, #8]
 800bd56:	68db      	ldr	r3, [r3, #12]
 800bd58:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800bd5a:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800bd5c:	68bb      	ldr	r3, [r7, #8]
 800bd5e:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800bd60:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800bd62:	697a      	ldr	r2, [r7, #20]
 800bd64:	4313      	orrs	r3, r2
 800bd66:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	687a      	ldr	r2, [r7, #4]
 800bd6c:	6979      	ldr	r1, [r7, #20]
 800bd6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800bd72:	e005      	b.n	800bd80 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	687a      	ldr	r2, [r7, #4]
 800bd78:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800bd7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800bd80:	2300      	movs	r3, #0
}
 800bd82:	4618      	mov	r0, r3
 800bd84:	371c      	adds	r7, #28
 800bd86:	46bd      	mov	sp, r7
 800bd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8c:	4770      	bx	lr
 800bd8e:	bf00      	nop
 800bd90:	cff00000 	.word	0xcff00000

0800bd94 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bd94:	b084      	sub	sp, #16
 800bd96:	b580      	push	{r7, lr}
 800bd98:	b084      	sub	sp, #16
 800bd9a:	af00      	add	r7, sp, #0
 800bd9c:	6078      	str	r0, [r7, #4]
 800bd9e:	f107 001c 	add.w	r0, r7, #28
 800bda2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bda6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bda8:	2b01      	cmp	r3, #1
 800bdaa:	d122      	bne.n	800bdf2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdb0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	68db      	ldr	r3, [r3, #12]
 800bdbc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800bdc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bdc4:	687a      	ldr	r2, [r7, #4]
 800bdc6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	68db      	ldr	r3, [r3, #12]
 800bdcc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800bdd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bdd6:	2b01      	cmp	r3, #1
 800bdd8:	d105      	bne.n	800bde6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	68db      	ldr	r3, [r3, #12]
 800bdde:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800bde6:	6878      	ldr	r0, [r7, #4]
 800bde8:	f001 fa7c 	bl	800d2e4 <USB_CoreReset>
 800bdec:	4603      	mov	r3, r0
 800bdee:	73fb      	strb	r3, [r7, #15]
 800bdf0:	e01a      	b.n	800be28 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	68db      	ldr	r3, [r3, #12]
 800bdf6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800bdfe:	6878      	ldr	r0, [r7, #4]
 800be00:	f001 fa70 	bl	800d2e4 <USB_CoreReset>
 800be04:	4603      	mov	r3, r0
 800be06:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800be08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d106      	bne.n	800be1c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be12:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	639a      	str	r2, [r3, #56]	; 0x38
 800be1a:	e005      	b.n	800be28 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be20:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800be28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be2a:	2b01      	cmp	r3, #1
 800be2c:	d10b      	bne.n	800be46 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	689b      	ldr	r3, [r3, #8]
 800be32:	f043 0206 	orr.w	r2, r3, #6
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	689b      	ldr	r3, [r3, #8]
 800be3e:	f043 0220 	orr.w	r2, r3, #32
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800be46:	7bfb      	ldrb	r3, [r7, #15]
}
 800be48:	4618      	mov	r0, r3
 800be4a:	3710      	adds	r7, #16
 800be4c:	46bd      	mov	sp, r7
 800be4e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800be52:	b004      	add	sp, #16
 800be54:	4770      	bx	lr
	...

0800be58 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800be58:	b480      	push	{r7}
 800be5a:	b087      	sub	sp, #28
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	60f8      	str	r0, [r7, #12]
 800be60:	60b9      	str	r1, [r7, #8]
 800be62:	4613      	mov	r3, r2
 800be64:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800be66:	79fb      	ldrb	r3, [r7, #7]
 800be68:	2b02      	cmp	r3, #2
 800be6a:	d165      	bne.n	800bf38 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800be6c:	68bb      	ldr	r3, [r7, #8]
 800be6e:	4a41      	ldr	r2, [pc, #260]	; (800bf74 <USB_SetTurnaroundTime+0x11c>)
 800be70:	4293      	cmp	r3, r2
 800be72:	d906      	bls.n	800be82 <USB_SetTurnaroundTime+0x2a>
 800be74:	68bb      	ldr	r3, [r7, #8]
 800be76:	4a40      	ldr	r2, [pc, #256]	; (800bf78 <USB_SetTurnaroundTime+0x120>)
 800be78:	4293      	cmp	r3, r2
 800be7a:	d802      	bhi.n	800be82 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800be7c:	230f      	movs	r3, #15
 800be7e:	617b      	str	r3, [r7, #20]
 800be80:	e062      	b.n	800bf48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800be82:	68bb      	ldr	r3, [r7, #8]
 800be84:	4a3c      	ldr	r2, [pc, #240]	; (800bf78 <USB_SetTurnaroundTime+0x120>)
 800be86:	4293      	cmp	r3, r2
 800be88:	d906      	bls.n	800be98 <USB_SetTurnaroundTime+0x40>
 800be8a:	68bb      	ldr	r3, [r7, #8]
 800be8c:	4a3b      	ldr	r2, [pc, #236]	; (800bf7c <USB_SetTurnaroundTime+0x124>)
 800be8e:	4293      	cmp	r3, r2
 800be90:	d802      	bhi.n	800be98 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800be92:	230e      	movs	r3, #14
 800be94:	617b      	str	r3, [r7, #20]
 800be96:	e057      	b.n	800bf48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800be98:	68bb      	ldr	r3, [r7, #8]
 800be9a:	4a38      	ldr	r2, [pc, #224]	; (800bf7c <USB_SetTurnaroundTime+0x124>)
 800be9c:	4293      	cmp	r3, r2
 800be9e:	d906      	bls.n	800beae <USB_SetTurnaroundTime+0x56>
 800bea0:	68bb      	ldr	r3, [r7, #8]
 800bea2:	4a37      	ldr	r2, [pc, #220]	; (800bf80 <USB_SetTurnaroundTime+0x128>)
 800bea4:	4293      	cmp	r3, r2
 800bea6:	d802      	bhi.n	800beae <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800bea8:	230d      	movs	r3, #13
 800beaa:	617b      	str	r3, [r7, #20]
 800beac:	e04c      	b.n	800bf48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800beae:	68bb      	ldr	r3, [r7, #8]
 800beb0:	4a33      	ldr	r2, [pc, #204]	; (800bf80 <USB_SetTurnaroundTime+0x128>)
 800beb2:	4293      	cmp	r3, r2
 800beb4:	d906      	bls.n	800bec4 <USB_SetTurnaroundTime+0x6c>
 800beb6:	68bb      	ldr	r3, [r7, #8]
 800beb8:	4a32      	ldr	r2, [pc, #200]	; (800bf84 <USB_SetTurnaroundTime+0x12c>)
 800beba:	4293      	cmp	r3, r2
 800bebc:	d802      	bhi.n	800bec4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800bebe:	230c      	movs	r3, #12
 800bec0:	617b      	str	r3, [r7, #20]
 800bec2:	e041      	b.n	800bf48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800bec4:	68bb      	ldr	r3, [r7, #8]
 800bec6:	4a2f      	ldr	r2, [pc, #188]	; (800bf84 <USB_SetTurnaroundTime+0x12c>)
 800bec8:	4293      	cmp	r3, r2
 800beca:	d906      	bls.n	800beda <USB_SetTurnaroundTime+0x82>
 800becc:	68bb      	ldr	r3, [r7, #8]
 800bece:	4a2e      	ldr	r2, [pc, #184]	; (800bf88 <USB_SetTurnaroundTime+0x130>)
 800bed0:	4293      	cmp	r3, r2
 800bed2:	d802      	bhi.n	800beda <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800bed4:	230b      	movs	r3, #11
 800bed6:	617b      	str	r3, [r7, #20]
 800bed8:	e036      	b.n	800bf48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800beda:	68bb      	ldr	r3, [r7, #8]
 800bedc:	4a2a      	ldr	r2, [pc, #168]	; (800bf88 <USB_SetTurnaroundTime+0x130>)
 800bede:	4293      	cmp	r3, r2
 800bee0:	d906      	bls.n	800bef0 <USB_SetTurnaroundTime+0x98>
 800bee2:	68bb      	ldr	r3, [r7, #8]
 800bee4:	4a29      	ldr	r2, [pc, #164]	; (800bf8c <USB_SetTurnaroundTime+0x134>)
 800bee6:	4293      	cmp	r3, r2
 800bee8:	d802      	bhi.n	800bef0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800beea:	230a      	movs	r3, #10
 800beec:	617b      	str	r3, [r7, #20]
 800beee:	e02b      	b.n	800bf48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800bef0:	68bb      	ldr	r3, [r7, #8]
 800bef2:	4a26      	ldr	r2, [pc, #152]	; (800bf8c <USB_SetTurnaroundTime+0x134>)
 800bef4:	4293      	cmp	r3, r2
 800bef6:	d906      	bls.n	800bf06 <USB_SetTurnaroundTime+0xae>
 800bef8:	68bb      	ldr	r3, [r7, #8]
 800befa:	4a25      	ldr	r2, [pc, #148]	; (800bf90 <USB_SetTurnaroundTime+0x138>)
 800befc:	4293      	cmp	r3, r2
 800befe:	d802      	bhi.n	800bf06 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800bf00:	2309      	movs	r3, #9
 800bf02:	617b      	str	r3, [r7, #20]
 800bf04:	e020      	b.n	800bf48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800bf06:	68bb      	ldr	r3, [r7, #8]
 800bf08:	4a21      	ldr	r2, [pc, #132]	; (800bf90 <USB_SetTurnaroundTime+0x138>)
 800bf0a:	4293      	cmp	r3, r2
 800bf0c:	d906      	bls.n	800bf1c <USB_SetTurnaroundTime+0xc4>
 800bf0e:	68bb      	ldr	r3, [r7, #8]
 800bf10:	4a20      	ldr	r2, [pc, #128]	; (800bf94 <USB_SetTurnaroundTime+0x13c>)
 800bf12:	4293      	cmp	r3, r2
 800bf14:	d802      	bhi.n	800bf1c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800bf16:	2308      	movs	r3, #8
 800bf18:	617b      	str	r3, [r7, #20]
 800bf1a:	e015      	b.n	800bf48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800bf1c:	68bb      	ldr	r3, [r7, #8]
 800bf1e:	4a1d      	ldr	r2, [pc, #116]	; (800bf94 <USB_SetTurnaroundTime+0x13c>)
 800bf20:	4293      	cmp	r3, r2
 800bf22:	d906      	bls.n	800bf32 <USB_SetTurnaroundTime+0xda>
 800bf24:	68bb      	ldr	r3, [r7, #8]
 800bf26:	4a1c      	ldr	r2, [pc, #112]	; (800bf98 <USB_SetTurnaroundTime+0x140>)
 800bf28:	4293      	cmp	r3, r2
 800bf2a:	d802      	bhi.n	800bf32 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800bf2c:	2307      	movs	r3, #7
 800bf2e:	617b      	str	r3, [r7, #20]
 800bf30:	e00a      	b.n	800bf48 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800bf32:	2306      	movs	r3, #6
 800bf34:	617b      	str	r3, [r7, #20]
 800bf36:	e007      	b.n	800bf48 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800bf38:	79fb      	ldrb	r3, [r7, #7]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d102      	bne.n	800bf44 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800bf3e:	2309      	movs	r3, #9
 800bf40:	617b      	str	r3, [r7, #20]
 800bf42:	e001      	b.n	800bf48 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800bf44:	2309      	movs	r3, #9
 800bf46:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	68db      	ldr	r3, [r3, #12]
 800bf4c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	68da      	ldr	r2, [r3, #12]
 800bf58:	697b      	ldr	r3, [r7, #20]
 800bf5a:	029b      	lsls	r3, r3, #10
 800bf5c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800bf60:	431a      	orrs	r2, r3
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bf66:	2300      	movs	r3, #0
}
 800bf68:	4618      	mov	r0, r3
 800bf6a:	371c      	adds	r7, #28
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf72:	4770      	bx	lr
 800bf74:	00d8acbf 	.word	0x00d8acbf
 800bf78:	00e4e1bf 	.word	0x00e4e1bf
 800bf7c:	00f423ff 	.word	0x00f423ff
 800bf80:	0106737f 	.word	0x0106737f
 800bf84:	011a499f 	.word	0x011a499f
 800bf88:	01312cff 	.word	0x01312cff
 800bf8c:	014ca43f 	.word	0x014ca43f
 800bf90:	016e35ff 	.word	0x016e35ff
 800bf94:	01a6ab1f 	.word	0x01a6ab1f
 800bf98:	01e847ff 	.word	0x01e847ff

0800bf9c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bf9c:	b480      	push	{r7}
 800bf9e:	b083      	sub	sp, #12
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	689b      	ldr	r3, [r3, #8]
 800bfa8:	f043 0201 	orr.w	r2, r3, #1
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bfb0:	2300      	movs	r3, #0
}
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	370c      	adds	r7, #12
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfbc:	4770      	bx	lr

0800bfbe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bfbe:	b480      	push	{r7}
 800bfc0:	b083      	sub	sp, #12
 800bfc2:	af00      	add	r7, sp, #0
 800bfc4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	689b      	ldr	r3, [r3, #8]
 800bfca:	f023 0201 	bic.w	r2, r3, #1
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bfd2:	2300      	movs	r3, #0
}
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	370c      	adds	r7, #12
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfde:	4770      	bx	lr

0800bfe0 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b082      	sub	sp, #8
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
 800bfe8:	460b      	mov	r3, r1
 800bfea:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	68db      	ldr	r3, [r3, #12]
 800bff0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800bff8:	78fb      	ldrb	r3, [r7, #3]
 800bffa:	2b01      	cmp	r3, #1
 800bffc:	d106      	bne.n	800c00c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	68db      	ldr	r3, [r3, #12]
 800c002:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	60da      	str	r2, [r3, #12]
 800c00a:	e00b      	b.n	800c024 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800c00c:	78fb      	ldrb	r3, [r7, #3]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d106      	bne.n	800c020 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	68db      	ldr	r3, [r3, #12]
 800c016:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	60da      	str	r2, [r3, #12]
 800c01e:	e001      	b.n	800c024 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800c020:	2301      	movs	r3, #1
 800c022:	e003      	b.n	800c02c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800c024:	2032      	movs	r0, #50	; 0x32
 800c026:	f7fb ff5f 	bl	8007ee8 <HAL_Delay>

  return HAL_OK;
 800c02a:	2300      	movs	r3, #0
}
 800c02c:	4618      	mov	r0, r3
 800c02e:	3708      	adds	r7, #8
 800c030:	46bd      	mov	sp, r7
 800c032:	bd80      	pop	{r7, pc}

0800c034 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c034:	b084      	sub	sp, #16
 800c036:	b580      	push	{r7, lr}
 800c038:	b086      	sub	sp, #24
 800c03a:	af00      	add	r7, sp, #0
 800c03c:	6078      	str	r0, [r7, #4]
 800c03e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c042:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c046:	2300      	movs	r3, #0
 800c048:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c04e:	2300      	movs	r3, #0
 800c050:	613b      	str	r3, [r7, #16]
 800c052:	e009      	b.n	800c068 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c054:	687a      	ldr	r2, [r7, #4]
 800c056:	693b      	ldr	r3, [r7, #16]
 800c058:	3340      	adds	r3, #64	; 0x40
 800c05a:	009b      	lsls	r3, r3, #2
 800c05c:	4413      	add	r3, r2
 800c05e:	2200      	movs	r2, #0
 800c060:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c062:	693b      	ldr	r3, [r7, #16]
 800c064:	3301      	adds	r3, #1
 800c066:	613b      	str	r3, [r7, #16]
 800c068:	693b      	ldr	r3, [r7, #16]
 800c06a:	2b0e      	cmp	r3, #14
 800c06c:	d9f2      	bls.n	800c054 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c06e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c070:	2b00      	cmp	r3, #0
 800c072:	d112      	bne.n	800c09a <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c078:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c084:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c090:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	639a      	str	r2, [r3, #56]	; 0x38
 800c098:	e00b      	b.n	800c0b2 <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0aa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c0b8:	461a      	mov	r2, r3
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0c4:	4619      	mov	r1, r3
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0cc:	461a      	mov	r2, r3
 800c0ce:	680b      	ldr	r3, [r1, #0]
 800c0d0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c0d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0d4:	2b01      	cmp	r3, #1
 800c0d6:	d10c      	bne.n	800c0f2 <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c0d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d104      	bne.n	800c0e8 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c0de:	2100      	movs	r1, #0
 800c0e0:	6878      	ldr	r0, [r7, #4]
 800c0e2:	f000 f961 	bl	800c3a8 <USB_SetDevSpeed>
 800c0e6:	e008      	b.n	800c0fa <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c0e8:	2101      	movs	r1, #1
 800c0ea:	6878      	ldr	r0, [r7, #4]
 800c0ec:	f000 f95c 	bl	800c3a8 <USB_SetDevSpeed>
 800c0f0:	e003      	b.n	800c0fa <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c0f2:	2103      	movs	r1, #3
 800c0f4:	6878      	ldr	r0, [r7, #4]
 800c0f6:	f000 f957 	bl	800c3a8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c0fa:	2110      	movs	r1, #16
 800c0fc:	6878      	ldr	r0, [r7, #4]
 800c0fe:	f000 f90b 	bl	800c318 <USB_FlushTxFifo>
 800c102:	4603      	mov	r3, r0
 800c104:	2b00      	cmp	r3, #0
 800c106:	d001      	beq.n	800c10c <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 800c108:	2301      	movs	r3, #1
 800c10a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c10c:	6878      	ldr	r0, [r7, #4]
 800c10e:	f000 f929 	bl	800c364 <USB_FlushRxFifo>
 800c112:	4603      	mov	r3, r0
 800c114:	2b00      	cmp	r3, #0
 800c116:	d001      	beq.n	800c11c <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 800c118:	2301      	movs	r3, #1
 800c11a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c122:	461a      	mov	r2, r3
 800c124:	2300      	movs	r3, #0
 800c126:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c12e:	461a      	mov	r2, r3
 800c130:	2300      	movs	r3, #0
 800c132:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c13a:	461a      	mov	r2, r3
 800c13c:	2300      	movs	r3, #0
 800c13e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c140:	2300      	movs	r3, #0
 800c142:	613b      	str	r3, [r7, #16]
 800c144:	e043      	b.n	800c1ce <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c146:	693b      	ldr	r3, [r7, #16]
 800c148:	015a      	lsls	r2, r3, #5
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	4413      	add	r3, r2
 800c14e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c158:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c15c:	d118      	bne.n	800c190 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 800c15e:	693b      	ldr	r3, [r7, #16]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d10a      	bne.n	800c17a <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c164:	693b      	ldr	r3, [r7, #16]
 800c166:	015a      	lsls	r2, r3, #5
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	4413      	add	r3, r2
 800c16c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c170:	461a      	mov	r2, r3
 800c172:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c176:	6013      	str	r3, [r2, #0]
 800c178:	e013      	b.n	800c1a2 <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c17a:	693b      	ldr	r3, [r7, #16]
 800c17c:	015a      	lsls	r2, r3, #5
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	4413      	add	r3, r2
 800c182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c186:	461a      	mov	r2, r3
 800c188:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c18c:	6013      	str	r3, [r2, #0]
 800c18e:	e008      	b.n	800c1a2 <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c190:	693b      	ldr	r3, [r7, #16]
 800c192:	015a      	lsls	r2, r3, #5
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	4413      	add	r3, r2
 800c198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c19c:	461a      	mov	r2, r3
 800c19e:	2300      	movs	r3, #0
 800c1a0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c1a2:	693b      	ldr	r3, [r7, #16]
 800c1a4:	015a      	lsls	r2, r3, #5
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	4413      	add	r3, r2
 800c1aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1ae:	461a      	mov	r2, r3
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c1b4:	693b      	ldr	r3, [r7, #16]
 800c1b6:	015a      	lsls	r2, r3, #5
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	4413      	add	r3, r2
 800c1bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1c0:	461a      	mov	r2, r3
 800c1c2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c1c6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c1c8:	693b      	ldr	r3, [r7, #16]
 800c1ca:	3301      	adds	r3, #1
 800c1cc:	613b      	str	r3, [r7, #16]
 800c1ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1d0:	693a      	ldr	r2, [r7, #16]
 800c1d2:	429a      	cmp	r2, r3
 800c1d4:	d3b7      	bcc.n	800c146 <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	613b      	str	r3, [r7, #16]
 800c1da:	e043      	b.n	800c264 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c1dc:	693b      	ldr	r3, [r7, #16]
 800c1de:	015a      	lsls	r2, r3, #5
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	4413      	add	r3, r2
 800c1e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c1ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c1f2:	d118      	bne.n	800c226 <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 800c1f4:	693b      	ldr	r3, [r7, #16]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d10a      	bne.n	800c210 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c1fa:	693b      	ldr	r3, [r7, #16]
 800c1fc:	015a      	lsls	r2, r3, #5
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	4413      	add	r3, r2
 800c202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c206:	461a      	mov	r2, r3
 800c208:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c20c:	6013      	str	r3, [r2, #0]
 800c20e:	e013      	b.n	800c238 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c210:	693b      	ldr	r3, [r7, #16]
 800c212:	015a      	lsls	r2, r3, #5
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	4413      	add	r3, r2
 800c218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c21c:	461a      	mov	r2, r3
 800c21e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c222:	6013      	str	r3, [r2, #0]
 800c224:	e008      	b.n	800c238 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c226:	693b      	ldr	r3, [r7, #16]
 800c228:	015a      	lsls	r2, r3, #5
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	4413      	add	r3, r2
 800c22e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c232:	461a      	mov	r2, r3
 800c234:	2300      	movs	r3, #0
 800c236:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c238:	693b      	ldr	r3, [r7, #16]
 800c23a:	015a      	lsls	r2, r3, #5
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	4413      	add	r3, r2
 800c240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c244:	461a      	mov	r2, r3
 800c246:	2300      	movs	r3, #0
 800c248:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c24a:	693b      	ldr	r3, [r7, #16]
 800c24c:	015a      	lsls	r2, r3, #5
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	4413      	add	r3, r2
 800c252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c256:	461a      	mov	r2, r3
 800c258:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c25c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c25e:	693b      	ldr	r3, [r7, #16]
 800c260:	3301      	adds	r3, #1
 800c262:	613b      	str	r3, [r7, #16]
 800c264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c266:	693a      	ldr	r2, [r7, #16]
 800c268:	429a      	cmp	r2, r3
 800c26a:	d3b7      	bcc.n	800c1dc <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c272:	691b      	ldr	r3, [r3, #16]
 800c274:	68fa      	ldr	r2, [r7, #12]
 800c276:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c27a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c27e:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 800c280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c282:	2b01      	cmp	r3, #1
 800c284:	d111      	bne.n	800c2aa <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c28c:	461a      	mov	r2, r3
 800c28e:	4b20      	ldr	r3, [pc, #128]	; (800c310 <USB_DevInit+0x2dc>)
 800c290:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c29a:	68fa      	ldr	r2, [r7, #12]
 800c29c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c2a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c2a4:	f043 0303 	orr.w	r3, r3, #3
 800c2a8:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	2200      	movs	r2, #0
 800c2ae:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c2b6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c2b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d105      	bne.n	800c2ca <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	699b      	ldr	r3, [r3, #24]
 800c2c2:	f043 0210 	orr.w	r2, r3, #16
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	699a      	ldr	r2, [r3, #24]
 800c2ce:	4b11      	ldr	r3, [pc, #68]	; (800c314 <USB_DevInit+0x2e0>)
 800c2d0:	4313      	orrs	r3, r2
 800c2d2:	687a      	ldr	r2, [r7, #4]
 800c2d4:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c2d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d005      	beq.n	800c2e8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	699b      	ldr	r3, [r3, #24]
 800c2e0:	f043 0208 	orr.w	r2, r3, #8
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c2e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2ea:	2b01      	cmp	r3, #1
 800c2ec:	d107      	bne.n	800c2fe <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	699b      	ldr	r3, [r3, #24]
 800c2f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c2f6:	f043 0304 	orr.w	r3, r3, #4
 800c2fa:	687a      	ldr	r2, [r7, #4]
 800c2fc:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c2fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800c300:	4618      	mov	r0, r3
 800c302:	3718      	adds	r7, #24
 800c304:	46bd      	mov	sp, r7
 800c306:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c30a:	b004      	add	sp, #16
 800c30c:	4770      	bx	lr
 800c30e:	bf00      	nop
 800c310:	00800100 	.word	0x00800100
 800c314:	803c3800 	.word	0x803c3800

0800c318 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c318:	b480      	push	{r7}
 800c31a:	b085      	sub	sp, #20
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
 800c320:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800c322:	2300      	movs	r3, #0
 800c324:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c326:	683b      	ldr	r3, [r7, #0]
 800c328:	019b      	lsls	r3, r3, #6
 800c32a:	f043 0220 	orr.w	r2, r3, #32
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	3301      	adds	r3, #1
 800c336:	60fb      	str	r3, [r7, #12]
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	4a09      	ldr	r2, [pc, #36]	; (800c360 <USB_FlushTxFifo+0x48>)
 800c33c:	4293      	cmp	r3, r2
 800c33e:	d901      	bls.n	800c344 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800c340:	2303      	movs	r3, #3
 800c342:	e006      	b.n	800c352 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	691b      	ldr	r3, [r3, #16]
 800c348:	f003 0320 	and.w	r3, r3, #32
 800c34c:	2b20      	cmp	r3, #32
 800c34e:	d0f0      	beq.n	800c332 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800c350:	2300      	movs	r3, #0
}
 800c352:	4618      	mov	r0, r3
 800c354:	3714      	adds	r7, #20
 800c356:	46bd      	mov	sp, r7
 800c358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35c:	4770      	bx	lr
 800c35e:	bf00      	nop
 800c360:	00030d40 	.word	0x00030d40

0800c364 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c364:	b480      	push	{r7}
 800c366:	b085      	sub	sp, #20
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800c36c:	2300      	movs	r3, #0
 800c36e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	2210      	movs	r2, #16
 800c374:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	3301      	adds	r3, #1
 800c37a:	60fb      	str	r3, [r7, #12]
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	4a09      	ldr	r2, [pc, #36]	; (800c3a4 <USB_FlushRxFifo+0x40>)
 800c380:	4293      	cmp	r3, r2
 800c382:	d901      	bls.n	800c388 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800c384:	2303      	movs	r3, #3
 800c386:	e006      	b.n	800c396 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	691b      	ldr	r3, [r3, #16]
 800c38c:	f003 0310 	and.w	r3, r3, #16
 800c390:	2b10      	cmp	r3, #16
 800c392:	d0f0      	beq.n	800c376 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800c394:	2300      	movs	r3, #0
}
 800c396:	4618      	mov	r0, r3
 800c398:	3714      	adds	r7, #20
 800c39a:	46bd      	mov	sp, r7
 800c39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a0:	4770      	bx	lr
 800c3a2:	bf00      	nop
 800c3a4:	00030d40 	.word	0x00030d40

0800c3a8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c3a8:	b480      	push	{r7}
 800c3aa:	b085      	sub	sp, #20
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
 800c3b0:	460b      	mov	r3, r1
 800c3b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3be:	681a      	ldr	r2, [r3, #0]
 800c3c0:	78fb      	ldrb	r3, [r7, #3]
 800c3c2:	68f9      	ldr	r1, [r7, #12]
 800c3c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c3c8:	4313      	orrs	r3, r2
 800c3ca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c3cc:	2300      	movs	r3, #0
}
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	3714      	adds	r7, #20
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d8:	4770      	bx	lr

0800c3da <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800c3da:	b480      	push	{r7}
 800c3dc:	b087      	sub	sp, #28
 800c3de:	af00      	add	r7, sp, #0
 800c3e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800c3e6:	693b      	ldr	r3, [r7, #16]
 800c3e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3ec:	689b      	ldr	r3, [r3, #8]
 800c3ee:	f003 0306 	and.w	r3, r3, #6
 800c3f2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d102      	bne.n	800c400 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	75fb      	strb	r3, [r7, #23]
 800c3fe:	e00a      	b.n	800c416 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	2b02      	cmp	r3, #2
 800c404:	d002      	beq.n	800c40c <USB_GetDevSpeed+0x32>
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	2b06      	cmp	r3, #6
 800c40a:	d102      	bne.n	800c412 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800c40c:	2302      	movs	r3, #2
 800c40e:	75fb      	strb	r3, [r7, #23]
 800c410:	e001      	b.n	800c416 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800c412:	230f      	movs	r3, #15
 800c414:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800c416:	7dfb      	ldrb	r3, [r7, #23]
}
 800c418:	4618      	mov	r0, r3
 800c41a:	371c      	adds	r7, #28
 800c41c:	46bd      	mov	sp, r7
 800c41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c422:	4770      	bx	lr

0800c424 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c424:	b480      	push	{r7}
 800c426:	b085      	sub	sp, #20
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]
 800c42c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c432:	683b      	ldr	r3, [r7, #0]
 800c434:	781b      	ldrb	r3, [r3, #0]
 800c436:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c438:	683b      	ldr	r3, [r7, #0]
 800c43a:	785b      	ldrb	r3, [r3, #1]
 800c43c:	2b01      	cmp	r3, #1
 800c43e:	d13a      	bne.n	800c4b6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c446:	69da      	ldr	r2, [r3, #28]
 800c448:	683b      	ldr	r3, [r7, #0]
 800c44a:	781b      	ldrb	r3, [r3, #0]
 800c44c:	f003 030f 	and.w	r3, r3, #15
 800c450:	2101      	movs	r1, #1
 800c452:	fa01 f303 	lsl.w	r3, r1, r3
 800c456:	b29b      	uxth	r3, r3
 800c458:	68f9      	ldr	r1, [r7, #12]
 800c45a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c45e:	4313      	orrs	r3, r2
 800c460:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800c462:	68bb      	ldr	r3, [r7, #8]
 800c464:	015a      	lsls	r2, r3, #5
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	4413      	add	r3, r2
 800c46a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c474:	2b00      	cmp	r3, #0
 800c476:	d155      	bne.n	800c524 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c478:	68bb      	ldr	r3, [r7, #8]
 800c47a:	015a      	lsls	r2, r3, #5
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	4413      	add	r3, r2
 800c480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c484:	681a      	ldr	r2, [r3, #0]
 800c486:	683b      	ldr	r3, [r7, #0]
 800c488:	689b      	ldr	r3, [r3, #8]
 800c48a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c48e:	683b      	ldr	r3, [r7, #0]
 800c490:	78db      	ldrb	r3, [r3, #3]
 800c492:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c494:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c496:	68bb      	ldr	r3, [r7, #8]
 800c498:	059b      	lsls	r3, r3, #22
 800c49a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c49c:	4313      	orrs	r3, r2
 800c49e:	68ba      	ldr	r2, [r7, #8]
 800c4a0:	0151      	lsls	r1, r2, #5
 800c4a2:	68fa      	ldr	r2, [r7, #12]
 800c4a4:	440a      	add	r2, r1
 800c4a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c4aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c4ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c4b2:	6013      	str	r3, [r2, #0]
 800c4b4:	e036      	b.n	800c524 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4bc:	69da      	ldr	r2, [r3, #28]
 800c4be:	683b      	ldr	r3, [r7, #0]
 800c4c0:	781b      	ldrb	r3, [r3, #0]
 800c4c2:	f003 030f 	and.w	r3, r3, #15
 800c4c6:	2101      	movs	r1, #1
 800c4c8:	fa01 f303 	lsl.w	r3, r1, r3
 800c4cc:	041b      	lsls	r3, r3, #16
 800c4ce:	68f9      	ldr	r1, [r7, #12]
 800c4d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c4d4:	4313      	orrs	r3, r2
 800c4d6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800c4d8:	68bb      	ldr	r3, [r7, #8]
 800c4da:	015a      	lsls	r2, r3, #5
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	4413      	add	r3, r2
 800c4e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d11a      	bne.n	800c524 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c4ee:	68bb      	ldr	r3, [r7, #8]
 800c4f0:	015a      	lsls	r2, r3, #5
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	4413      	add	r3, r2
 800c4f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4fa:	681a      	ldr	r2, [r3, #0]
 800c4fc:	683b      	ldr	r3, [r7, #0]
 800c4fe:	689b      	ldr	r3, [r3, #8]
 800c500:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800c504:	683b      	ldr	r3, [r7, #0]
 800c506:	78db      	ldrb	r3, [r3, #3]
 800c508:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c50a:	430b      	orrs	r3, r1
 800c50c:	4313      	orrs	r3, r2
 800c50e:	68ba      	ldr	r2, [r7, #8]
 800c510:	0151      	lsls	r1, r2, #5
 800c512:	68fa      	ldr	r2, [r7, #12]
 800c514:	440a      	add	r2, r1
 800c516:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c51a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c51e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c522:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800c524:	2300      	movs	r3, #0
}
 800c526:	4618      	mov	r0, r3
 800c528:	3714      	adds	r7, #20
 800c52a:	46bd      	mov	sp, r7
 800c52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c530:	4770      	bx	lr
	...

0800c534 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c534:	b480      	push	{r7}
 800c536:	b085      	sub	sp, #20
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
 800c53c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c542:	683b      	ldr	r3, [r7, #0]
 800c544:	781b      	ldrb	r3, [r3, #0]
 800c546:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800c548:	683b      	ldr	r3, [r7, #0]
 800c54a:	785b      	ldrb	r3, [r3, #1]
 800c54c:	2b01      	cmp	r3, #1
 800c54e:	d135      	bne.n	800c5bc <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c556:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c558:	683b      	ldr	r3, [r7, #0]
 800c55a:	781b      	ldrb	r3, [r3, #0]
 800c55c:	f003 030f 	and.w	r3, r3, #15
 800c560:	2101      	movs	r1, #1
 800c562:	fa01 f303 	lsl.w	r3, r1, r3
 800c566:	b29b      	uxth	r3, r3
 800c568:	43db      	mvns	r3, r3
 800c56a:	68f9      	ldr	r1, [r7, #12]
 800c56c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c570:	4013      	ands	r3, r2
 800c572:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c57a:	69da      	ldr	r2, [r3, #28]
 800c57c:	683b      	ldr	r3, [r7, #0]
 800c57e:	781b      	ldrb	r3, [r3, #0]
 800c580:	f003 030f 	and.w	r3, r3, #15
 800c584:	2101      	movs	r1, #1
 800c586:	fa01 f303 	lsl.w	r3, r1, r3
 800c58a:	b29b      	uxth	r3, r3
 800c58c:	43db      	mvns	r3, r3
 800c58e:	68f9      	ldr	r1, [r7, #12]
 800c590:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c594:	4013      	ands	r3, r2
 800c596:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800c598:	68bb      	ldr	r3, [r7, #8]
 800c59a:	015a      	lsls	r2, r3, #5
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	4413      	add	r3, r2
 800c5a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5a4:	681a      	ldr	r2, [r3, #0]
 800c5a6:	68bb      	ldr	r3, [r7, #8]
 800c5a8:	0159      	lsls	r1, r3, #5
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	440b      	add	r3, r1
 800c5ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5b2:	4619      	mov	r1, r3
 800c5b4:	4b1f      	ldr	r3, [pc, #124]	; (800c634 <USB_DeactivateEndpoint+0x100>)
 800c5b6:	4013      	ands	r3, r2
 800c5b8:	600b      	str	r3, [r1, #0]
 800c5ba:	e034      	b.n	800c626 <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c5c4:	683b      	ldr	r3, [r7, #0]
 800c5c6:	781b      	ldrb	r3, [r3, #0]
 800c5c8:	f003 030f 	and.w	r3, r3, #15
 800c5cc:	2101      	movs	r1, #1
 800c5ce:	fa01 f303 	lsl.w	r3, r1, r3
 800c5d2:	041b      	lsls	r3, r3, #16
 800c5d4:	43db      	mvns	r3, r3
 800c5d6:	68f9      	ldr	r1, [r7, #12]
 800c5d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c5dc:	4013      	ands	r3, r2
 800c5de:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5e6:	69da      	ldr	r2, [r3, #28]
 800c5e8:	683b      	ldr	r3, [r7, #0]
 800c5ea:	781b      	ldrb	r3, [r3, #0]
 800c5ec:	f003 030f 	and.w	r3, r3, #15
 800c5f0:	2101      	movs	r1, #1
 800c5f2:	fa01 f303 	lsl.w	r3, r1, r3
 800c5f6:	041b      	lsls	r3, r3, #16
 800c5f8:	43db      	mvns	r3, r3
 800c5fa:	68f9      	ldr	r1, [r7, #12]
 800c5fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c600:	4013      	ands	r3, r2
 800c602:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800c604:	68bb      	ldr	r3, [r7, #8]
 800c606:	015a      	lsls	r2, r3, #5
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	4413      	add	r3, r2
 800c60c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c610:	681a      	ldr	r2, [r3, #0]
 800c612:	68bb      	ldr	r3, [r7, #8]
 800c614:	0159      	lsls	r1, r3, #5
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	440b      	add	r3, r1
 800c61a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c61e:	4619      	mov	r1, r3
 800c620:	4b05      	ldr	r3, [pc, #20]	; (800c638 <USB_DeactivateEndpoint+0x104>)
 800c622:	4013      	ands	r3, r2
 800c624:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800c626:	2300      	movs	r3, #0
}
 800c628:	4618      	mov	r0, r3
 800c62a:	3714      	adds	r7, #20
 800c62c:	46bd      	mov	sp, r7
 800c62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c632:	4770      	bx	lr
 800c634:	ec337800 	.word	0xec337800
 800c638:	eff37800 	.word	0xeff37800

0800c63c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c63c:	b580      	push	{r7, lr}
 800c63e:	b08a      	sub	sp, #40	; 0x28
 800c640:	af02      	add	r7, sp, #8
 800c642:	60f8      	str	r0, [r7, #12]
 800c644:	60b9      	str	r1, [r7, #8]
 800c646:	4613      	mov	r3, r2
 800c648:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800c64e:	68bb      	ldr	r3, [r7, #8]
 800c650:	781b      	ldrb	r3, [r3, #0]
 800c652:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c654:	68bb      	ldr	r3, [r7, #8]
 800c656:	785b      	ldrb	r3, [r3, #1]
 800c658:	2b01      	cmp	r3, #1
 800c65a:	f040 815c 	bne.w	800c916 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c65e:	68bb      	ldr	r3, [r7, #8]
 800c660:	695b      	ldr	r3, [r3, #20]
 800c662:	2b00      	cmp	r3, #0
 800c664:	d132      	bne.n	800c6cc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c666:	69bb      	ldr	r3, [r7, #24]
 800c668:	015a      	lsls	r2, r3, #5
 800c66a:	69fb      	ldr	r3, [r7, #28]
 800c66c:	4413      	add	r3, r2
 800c66e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c672:	691b      	ldr	r3, [r3, #16]
 800c674:	69ba      	ldr	r2, [r7, #24]
 800c676:	0151      	lsls	r1, r2, #5
 800c678:	69fa      	ldr	r2, [r7, #28]
 800c67a:	440a      	add	r2, r1
 800c67c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c680:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c684:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c688:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c68a:	69bb      	ldr	r3, [r7, #24]
 800c68c:	015a      	lsls	r2, r3, #5
 800c68e:	69fb      	ldr	r3, [r7, #28]
 800c690:	4413      	add	r3, r2
 800c692:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c696:	691b      	ldr	r3, [r3, #16]
 800c698:	69ba      	ldr	r2, [r7, #24]
 800c69a:	0151      	lsls	r1, r2, #5
 800c69c:	69fa      	ldr	r2, [r7, #28]
 800c69e:	440a      	add	r2, r1
 800c6a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c6a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c6a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c6aa:	69bb      	ldr	r3, [r7, #24]
 800c6ac:	015a      	lsls	r2, r3, #5
 800c6ae:	69fb      	ldr	r3, [r7, #28]
 800c6b0:	4413      	add	r3, r2
 800c6b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6b6:	691b      	ldr	r3, [r3, #16]
 800c6b8:	69ba      	ldr	r2, [r7, #24]
 800c6ba:	0151      	lsls	r1, r2, #5
 800c6bc:	69fa      	ldr	r2, [r7, #28]
 800c6be:	440a      	add	r2, r1
 800c6c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c6c4:	0cdb      	lsrs	r3, r3, #19
 800c6c6:	04db      	lsls	r3, r3, #19
 800c6c8:	6113      	str	r3, [r2, #16]
 800c6ca:	e074      	b.n	800c7b6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c6cc:	69bb      	ldr	r3, [r7, #24]
 800c6ce:	015a      	lsls	r2, r3, #5
 800c6d0:	69fb      	ldr	r3, [r7, #28]
 800c6d2:	4413      	add	r3, r2
 800c6d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6d8:	691b      	ldr	r3, [r3, #16]
 800c6da:	69ba      	ldr	r2, [r7, #24]
 800c6dc:	0151      	lsls	r1, r2, #5
 800c6de:	69fa      	ldr	r2, [r7, #28]
 800c6e0:	440a      	add	r2, r1
 800c6e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c6e6:	0cdb      	lsrs	r3, r3, #19
 800c6e8:	04db      	lsls	r3, r3, #19
 800c6ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c6ec:	69bb      	ldr	r3, [r7, #24]
 800c6ee:	015a      	lsls	r2, r3, #5
 800c6f0:	69fb      	ldr	r3, [r7, #28]
 800c6f2:	4413      	add	r3, r2
 800c6f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6f8:	691b      	ldr	r3, [r3, #16]
 800c6fa:	69ba      	ldr	r2, [r7, #24]
 800c6fc:	0151      	lsls	r1, r2, #5
 800c6fe:	69fa      	ldr	r2, [r7, #28]
 800c700:	440a      	add	r2, r1
 800c702:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c706:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c70a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c70e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800c710:	69bb      	ldr	r3, [r7, #24]
 800c712:	015a      	lsls	r2, r3, #5
 800c714:	69fb      	ldr	r3, [r7, #28]
 800c716:	4413      	add	r3, r2
 800c718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c71c:	691a      	ldr	r2, [r3, #16]
 800c71e:	68bb      	ldr	r3, [r7, #8]
 800c720:	6959      	ldr	r1, [r3, #20]
 800c722:	68bb      	ldr	r3, [r7, #8]
 800c724:	689b      	ldr	r3, [r3, #8]
 800c726:	440b      	add	r3, r1
 800c728:	1e59      	subs	r1, r3, #1
 800c72a:	68bb      	ldr	r3, [r7, #8]
 800c72c:	689b      	ldr	r3, [r3, #8]
 800c72e:	fbb1 f3f3 	udiv	r3, r1, r3
 800c732:	04d9      	lsls	r1, r3, #19
 800c734:	4b9d      	ldr	r3, [pc, #628]	; (800c9ac <USB_EPStartXfer+0x370>)
 800c736:	400b      	ands	r3, r1
 800c738:	69b9      	ldr	r1, [r7, #24]
 800c73a:	0148      	lsls	r0, r1, #5
 800c73c:	69f9      	ldr	r1, [r7, #28]
 800c73e:	4401      	add	r1, r0
 800c740:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c744:	4313      	orrs	r3, r2
 800c746:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c748:	69bb      	ldr	r3, [r7, #24]
 800c74a:	015a      	lsls	r2, r3, #5
 800c74c:	69fb      	ldr	r3, [r7, #28]
 800c74e:	4413      	add	r3, r2
 800c750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c754:	691a      	ldr	r2, [r3, #16]
 800c756:	68bb      	ldr	r3, [r7, #8]
 800c758:	695b      	ldr	r3, [r3, #20]
 800c75a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c75e:	69b9      	ldr	r1, [r7, #24]
 800c760:	0148      	lsls	r0, r1, #5
 800c762:	69f9      	ldr	r1, [r7, #28]
 800c764:	4401      	add	r1, r0
 800c766:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c76a:	4313      	orrs	r3, r2
 800c76c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800c76e:	68bb      	ldr	r3, [r7, #8]
 800c770:	78db      	ldrb	r3, [r3, #3]
 800c772:	2b01      	cmp	r3, #1
 800c774:	d11f      	bne.n	800c7b6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c776:	69bb      	ldr	r3, [r7, #24]
 800c778:	015a      	lsls	r2, r3, #5
 800c77a:	69fb      	ldr	r3, [r7, #28]
 800c77c:	4413      	add	r3, r2
 800c77e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c782:	691b      	ldr	r3, [r3, #16]
 800c784:	69ba      	ldr	r2, [r7, #24]
 800c786:	0151      	lsls	r1, r2, #5
 800c788:	69fa      	ldr	r2, [r7, #28]
 800c78a:	440a      	add	r2, r1
 800c78c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c790:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800c794:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800c796:	69bb      	ldr	r3, [r7, #24]
 800c798:	015a      	lsls	r2, r3, #5
 800c79a:	69fb      	ldr	r3, [r7, #28]
 800c79c:	4413      	add	r3, r2
 800c79e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7a2:	691b      	ldr	r3, [r3, #16]
 800c7a4:	69ba      	ldr	r2, [r7, #24]
 800c7a6:	0151      	lsls	r1, r2, #5
 800c7a8:	69fa      	ldr	r2, [r7, #28]
 800c7aa:	440a      	add	r2, r1
 800c7ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c7b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c7b4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800c7b6:	79fb      	ldrb	r3, [r7, #7]
 800c7b8:	2b01      	cmp	r3, #1
 800c7ba:	d14b      	bne.n	800c854 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c7bc:	68bb      	ldr	r3, [r7, #8]
 800c7be:	691b      	ldr	r3, [r3, #16]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d009      	beq.n	800c7d8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c7c4:	69bb      	ldr	r3, [r7, #24]
 800c7c6:	015a      	lsls	r2, r3, #5
 800c7c8:	69fb      	ldr	r3, [r7, #28]
 800c7ca:	4413      	add	r3, r2
 800c7cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7d0:	461a      	mov	r2, r3
 800c7d2:	68bb      	ldr	r3, [r7, #8]
 800c7d4:	691b      	ldr	r3, [r3, #16]
 800c7d6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800c7d8:	68bb      	ldr	r3, [r7, #8]
 800c7da:	78db      	ldrb	r3, [r3, #3]
 800c7dc:	2b01      	cmp	r3, #1
 800c7de:	d128      	bne.n	800c832 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c7e0:	69fb      	ldr	r3, [r7, #28]
 800c7e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7e6:	689b      	ldr	r3, [r3, #8]
 800c7e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d110      	bne.n	800c812 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c7f0:	69bb      	ldr	r3, [r7, #24]
 800c7f2:	015a      	lsls	r2, r3, #5
 800c7f4:	69fb      	ldr	r3, [r7, #28]
 800c7f6:	4413      	add	r3, r2
 800c7f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	69ba      	ldr	r2, [r7, #24]
 800c800:	0151      	lsls	r1, r2, #5
 800c802:	69fa      	ldr	r2, [r7, #28]
 800c804:	440a      	add	r2, r1
 800c806:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c80a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c80e:	6013      	str	r3, [r2, #0]
 800c810:	e00f      	b.n	800c832 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c812:	69bb      	ldr	r3, [r7, #24]
 800c814:	015a      	lsls	r2, r3, #5
 800c816:	69fb      	ldr	r3, [r7, #28]
 800c818:	4413      	add	r3, r2
 800c81a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	69ba      	ldr	r2, [r7, #24]
 800c822:	0151      	lsls	r1, r2, #5
 800c824:	69fa      	ldr	r2, [r7, #28]
 800c826:	440a      	add	r2, r1
 800c828:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c82c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c830:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c832:	69bb      	ldr	r3, [r7, #24]
 800c834:	015a      	lsls	r2, r3, #5
 800c836:	69fb      	ldr	r3, [r7, #28]
 800c838:	4413      	add	r3, r2
 800c83a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	69ba      	ldr	r2, [r7, #24]
 800c842:	0151      	lsls	r1, r2, #5
 800c844:	69fa      	ldr	r2, [r7, #28]
 800c846:	440a      	add	r2, r1
 800c848:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c84c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c850:	6013      	str	r3, [r2, #0]
 800c852:	e12f      	b.n	800cab4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c854:	69bb      	ldr	r3, [r7, #24]
 800c856:	015a      	lsls	r2, r3, #5
 800c858:	69fb      	ldr	r3, [r7, #28]
 800c85a:	4413      	add	r3, r2
 800c85c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	69ba      	ldr	r2, [r7, #24]
 800c864:	0151      	lsls	r1, r2, #5
 800c866:	69fa      	ldr	r2, [r7, #28]
 800c868:	440a      	add	r2, r1
 800c86a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c86e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c872:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c874:	68bb      	ldr	r3, [r7, #8]
 800c876:	78db      	ldrb	r3, [r3, #3]
 800c878:	2b01      	cmp	r3, #1
 800c87a:	d015      	beq.n	800c8a8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800c87c:	68bb      	ldr	r3, [r7, #8]
 800c87e:	695b      	ldr	r3, [r3, #20]
 800c880:	2b00      	cmp	r3, #0
 800c882:	f000 8117 	beq.w	800cab4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c886:	69fb      	ldr	r3, [r7, #28]
 800c888:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c88c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c88e:	68bb      	ldr	r3, [r7, #8]
 800c890:	781b      	ldrb	r3, [r3, #0]
 800c892:	f003 030f 	and.w	r3, r3, #15
 800c896:	2101      	movs	r1, #1
 800c898:	fa01 f303 	lsl.w	r3, r1, r3
 800c89c:	69f9      	ldr	r1, [r7, #28]
 800c89e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c8a2:	4313      	orrs	r3, r2
 800c8a4:	634b      	str	r3, [r1, #52]	; 0x34
 800c8a6:	e105      	b.n	800cab4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c8a8:	69fb      	ldr	r3, [r7, #28]
 800c8aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8ae:	689b      	ldr	r3, [r3, #8]
 800c8b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d110      	bne.n	800c8da <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c8b8:	69bb      	ldr	r3, [r7, #24]
 800c8ba:	015a      	lsls	r2, r3, #5
 800c8bc:	69fb      	ldr	r3, [r7, #28]
 800c8be:	4413      	add	r3, r2
 800c8c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	69ba      	ldr	r2, [r7, #24]
 800c8c8:	0151      	lsls	r1, r2, #5
 800c8ca:	69fa      	ldr	r2, [r7, #28]
 800c8cc:	440a      	add	r2, r1
 800c8ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c8d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c8d6:	6013      	str	r3, [r2, #0]
 800c8d8:	e00f      	b.n	800c8fa <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c8da:	69bb      	ldr	r3, [r7, #24]
 800c8dc:	015a      	lsls	r2, r3, #5
 800c8de:	69fb      	ldr	r3, [r7, #28]
 800c8e0:	4413      	add	r3, r2
 800c8e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	69ba      	ldr	r2, [r7, #24]
 800c8ea:	0151      	lsls	r1, r2, #5
 800c8ec:	69fa      	ldr	r2, [r7, #28]
 800c8ee:	440a      	add	r2, r1
 800c8f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c8f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c8f8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800c8fa:	68bb      	ldr	r3, [r7, #8]
 800c8fc:	68d9      	ldr	r1, [r3, #12]
 800c8fe:	68bb      	ldr	r3, [r7, #8]
 800c900:	781a      	ldrb	r2, [r3, #0]
 800c902:	68bb      	ldr	r3, [r7, #8]
 800c904:	695b      	ldr	r3, [r3, #20]
 800c906:	b298      	uxth	r0, r3
 800c908:	79fb      	ldrb	r3, [r7, #7]
 800c90a:	9300      	str	r3, [sp, #0]
 800c90c:	4603      	mov	r3, r0
 800c90e:	68f8      	ldr	r0, [r7, #12]
 800c910:	f000 fa2b 	bl	800cd6a <USB_WritePacket>
 800c914:	e0ce      	b.n	800cab4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c916:	69bb      	ldr	r3, [r7, #24]
 800c918:	015a      	lsls	r2, r3, #5
 800c91a:	69fb      	ldr	r3, [r7, #28]
 800c91c:	4413      	add	r3, r2
 800c91e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c922:	691b      	ldr	r3, [r3, #16]
 800c924:	69ba      	ldr	r2, [r7, #24]
 800c926:	0151      	lsls	r1, r2, #5
 800c928:	69fa      	ldr	r2, [r7, #28]
 800c92a:	440a      	add	r2, r1
 800c92c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c930:	0cdb      	lsrs	r3, r3, #19
 800c932:	04db      	lsls	r3, r3, #19
 800c934:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c936:	69bb      	ldr	r3, [r7, #24]
 800c938:	015a      	lsls	r2, r3, #5
 800c93a:	69fb      	ldr	r3, [r7, #28]
 800c93c:	4413      	add	r3, r2
 800c93e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c942:	691b      	ldr	r3, [r3, #16]
 800c944:	69ba      	ldr	r2, [r7, #24]
 800c946:	0151      	lsls	r1, r2, #5
 800c948:	69fa      	ldr	r2, [r7, #28]
 800c94a:	440a      	add	r2, r1
 800c94c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c950:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c954:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c958:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800c95a:	68bb      	ldr	r3, [r7, #8]
 800c95c:	695b      	ldr	r3, [r3, #20]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d126      	bne.n	800c9b0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c962:	69bb      	ldr	r3, [r7, #24]
 800c964:	015a      	lsls	r2, r3, #5
 800c966:	69fb      	ldr	r3, [r7, #28]
 800c968:	4413      	add	r3, r2
 800c96a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c96e:	691a      	ldr	r2, [r3, #16]
 800c970:	68bb      	ldr	r3, [r7, #8]
 800c972:	689b      	ldr	r3, [r3, #8]
 800c974:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c978:	69b9      	ldr	r1, [r7, #24]
 800c97a:	0148      	lsls	r0, r1, #5
 800c97c:	69f9      	ldr	r1, [r7, #28]
 800c97e:	4401      	add	r1, r0
 800c980:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c984:	4313      	orrs	r3, r2
 800c986:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c988:	69bb      	ldr	r3, [r7, #24]
 800c98a:	015a      	lsls	r2, r3, #5
 800c98c:	69fb      	ldr	r3, [r7, #28]
 800c98e:	4413      	add	r3, r2
 800c990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c994:	691b      	ldr	r3, [r3, #16]
 800c996:	69ba      	ldr	r2, [r7, #24]
 800c998:	0151      	lsls	r1, r2, #5
 800c99a:	69fa      	ldr	r2, [r7, #28]
 800c99c:	440a      	add	r2, r1
 800c99e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c9a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c9a6:	6113      	str	r3, [r2, #16]
 800c9a8:	e036      	b.n	800ca18 <USB_EPStartXfer+0x3dc>
 800c9aa:	bf00      	nop
 800c9ac:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c9b0:	68bb      	ldr	r3, [r7, #8]
 800c9b2:	695a      	ldr	r2, [r3, #20]
 800c9b4:	68bb      	ldr	r3, [r7, #8]
 800c9b6:	689b      	ldr	r3, [r3, #8]
 800c9b8:	4413      	add	r3, r2
 800c9ba:	1e5a      	subs	r2, r3, #1
 800c9bc:	68bb      	ldr	r3, [r7, #8]
 800c9be:	689b      	ldr	r3, [r3, #8]
 800c9c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9c4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c9c6:	69bb      	ldr	r3, [r7, #24]
 800c9c8:	015a      	lsls	r2, r3, #5
 800c9ca:	69fb      	ldr	r3, [r7, #28]
 800c9cc:	4413      	add	r3, r2
 800c9ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9d2:	691a      	ldr	r2, [r3, #16]
 800c9d4:	8afb      	ldrh	r3, [r7, #22]
 800c9d6:	04d9      	lsls	r1, r3, #19
 800c9d8:	4b39      	ldr	r3, [pc, #228]	; (800cac0 <USB_EPStartXfer+0x484>)
 800c9da:	400b      	ands	r3, r1
 800c9dc:	69b9      	ldr	r1, [r7, #24]
 800c9de:	0148      	lsls	r0, r1, #5
 800c9e0:	69f9      	ldr	r1, [r7, #28]
 800c9e2:	4401      	add	r1, r0
 800c9e4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c9e8:	4313      	orrs	r3, r2
 800c9ea:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800c9ec:	69bb      	ldr	r3, [r7, #24]
 800c9ee:	015a      	lsls	r2, r3, #5
 800c9f0:	69fb      	ldr	r3, [r7, #28]
 800c9f2:	4413      	add	r3, r2
 800c9f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9f8:	691a      	ldr	r2, [r3, #16]
 800c9fa:	68bb      	ldr	r3, [r7, #8]
 800c9fc:	689b      	ldr	r3, [r3, #8]
 800c9fe:	8af9      	ldrh	r1, [r7, #22]
 800ca00:	fb01 f303 	mul.w	r3, r1, r3
 800ca04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ca08:	69b9      	ldr	r1, [r7, #24]
 800ca0a:	0148      	lsls	r0, r1, #5
 800ca0c:	69f9      	ldr	r1, [r7, #28]
 800ca0e:	4401      	add	r1, r0
 800ca10:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ca14:	4313      	orrs	r3, r2
 800ca16:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ca18:	79fb      	ldrb	r3, [r7, #7]
 800ca1a:	2b01      	cmp	r3, #1
 800ca1c:	d10d      	bne.n	800ca3a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ca1e:	68bb      	ldr	r3, [r7, #8]
 800ca20:	68db      	ldr	r3, [r3, #12]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d009      	beq.n	800ca3a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ca26:	68bb      	ldr	r3, [r7, #8]
 800ca28:	68d9      	ldr	r1, [r3, #12]
 800ca2a:	69bb      	ldr	r3, [r7, #24]
 800ca2c:	015a      	lsls	r2, r3, #5
 800ca2e:	69fb      	ldr	r3, [r7, #28]
 800ca30:	4413      	add	r3, r2
 800ca32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca36:	460a      	mov	r2, r1
 800ca38:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800ca3a:	68bb      	ldr	r3, [r7, #8]
 800ca3c:	78db      	ldrb	r3, [r3, #3]
 800ca3e:	2b01      	cmp	r3, #1
 800ca40:	d128      	bne.n	800ca94 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ca42:	69fb      	ldr	r3, [r7, #28]
 800ca44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca48:	689b      	ldr	r3, [r3, #8]
 800ca4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d110      	bne.n	800ca74 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800ca52:	69bb      	ldr	r3, [r7, #24]
 800ca54:	015a      	lsls	r2, r3, #5
 800ca56:	69fb      	ldr	r3, [r7, #28]
 800ca58:	4413      	add	r3, r2
 800ca5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	69ba      	ldr	r2, [r7, #24]
 800ca62:	0151      	lsls	r1, r2, #5
 800ca64:	69fa      	ldr	r2, [r7, #28]
 800ca66:	440a      	add	r2, r1
 800ca68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca6c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ca70:	6013      	str	r3, [r2, #0]
 800ca72:	e00f      	b.n	800ca94 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800ca74:	69bb      	ldr	r3, [r7, #24]
 800ca76:	015a      	lsls	r2, r3, #5
 800ca78:	69fb      	ldr	r3, [r7, #28]
 800ca7a:	4413      	add	r3, r2
 800ca7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	69ba      	ldr	r2, [r7, #24]
 800ca84:	0151      	lsls	r1, r2, #5
 800ca86:	69fa      	ldr	r2, [r7, #28]
 800ca88:	440a      	add	r2, r1
 800ca8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ca92:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ca94:	69bb      	ldr	r3, [r7, #24]
 800ca96:	015a      	lsls	r2, r3, #5
 800ca98:	69fb      	ldr	r3, [r7, #28]
 800ca9a:	4413      	add	r3, r2
 800ca9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	69ba      	ldr	r2, [r7, #24]
 800caa4:	0151      	lsls	r1, r2, #5
 800caa6:	69fa      	ldr	r2, [r7, #28]
 800caa8:	440a      	add	r2, r1
 800caaa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800caae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cab2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cab4:	2300      	movs	r3, #0
}
 800cab6:	4618      	mov	r0, r3
 800cab8:	3720      	adds	r7, #32
 800caba:	46bd      	mov	sp, r7
 800cabc:	bd80      	pop	{r7, pc}
 800cabe:	bf00      	nop
 800cac0:	1ff80000 	.word	0x1ff80000

0800cac4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800cac4:	b480      	push	{r7}
 800cac6:	b087      	sub	sp, #28
 800cac8:	af00      	add	r7, sp, #0
 800caca:	60f8      	str	r0, [r7, #12]
 800cacc:	60b9      	str	r1, [r7, #8]
 800cace:	4613      	mov	r3, r2
 800cad0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800cad6:	68bb      	ldr	r3, [r7, #8]
 800cad8:	781b      	ldrb	r3, [r3, #0]
 800cada:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cadc:	68bb      	ldr	r3, [r7, #8]
 800cade:	785b      	ldrb	r3, [r3, #1]
 800cae0:	2b01      	cmp	r3, #1
 800cae2:	f040 80cd 	bne.w	800cc80 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800cae6:	68bb      	ldr	r3, [r7, #8]
 800cae8:	695b      	ldr	r3, [r3, #20]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d132      	bne.n	800cb54 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800caee:	693b      	ldr	r3, [r7, #16]
 800caf0:	015a      	lsls	r2, r3, #5
 800caf2:	697b      	ldr	r3, [r7, #20]
 800caf4:	4413      	add	r3, r2
 800caf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cafa:	691b      	ldr	r3, [r3, #16]
 800cafc:	693a      	ldr	r2, [r7, #16]
 800cafe:	0151      	lsls	r1, r2, #5
 800cb00:	697a      	ldr	r2, [r7, #20]
 800cb02:	440a      	add	r2, r1
 800cb04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb08:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800cb0c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800cb10:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800cb12:	693b      	ldr	r3, [r7, #16]
 800cb14:	015a      	lsls	r2, r3, #5
 800cb16:	697b      	ldr	r3, [r7, #20]
 800cb18:	4413      	add	r3, r2
 800cb1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb1e:	691b      	ldr	r3, [r3, #16]
 800cb20:	693a      	ldr	r2, [r7, #16]
 800cb22:	0151      	lsls	r1, r2, #5
 800cb24:	697a      	ldr	r2, [r7, #20]
 800cb26:	440a      	add	r2, r1
 800cb28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb2c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cb30:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cb32:	693b      	ldr	r3, [r7, #16]
 800cb34:	015a      	lsls	r2, r3, #5
 800cb36:	697b      	ldr	r3, [r7, #20]
 800cb38:	4413      	add	r3, r2
 800cb3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb3e:	691b      	ldr	r3, [r3, #16]
 800cb40:	693a      	ldr	r2, [r7, #16]
 800cb42:	0151      	lsls	r1, r2, #5
 800cb44:	697a      	ldr	r2, [r7, #20]
 800cb46:	440a      	add	r2, r1
 800cb48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb4c:	0cdb      	lsrs	r3, r3, #19
 800cb4e:	04db      	lsls	r3, r3, #19
 800cb50:	6113      	str	r3, [r2, #16]
 800cb52:	e04e      	b.n	800cbf2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cb54:	693b      	ldr	r3, [r7, #16]
 800cb56:	015a      	lsls	r2, r3, #5
 800cb58:	697b      	ldr	r3, [r7, #20]
 800cb5a:	4413      	add	r3, r2
 800cb5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb60:	691b      	ldr	r3, [r3, #16]
 800cb62:	693a      	ldr	r2, [r7, #16]
 800cb64:	0151      	lsls	r1, r2, #5
 800cb66:	697a      	ldr	r2, [r7, #20]
 800cb68:	440a      	add	r2, r1
 800cb6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb6e:	0cdb      	lsrs	r3, r3, #19
 800cb70:	04db      	lsls	r3, r3, #19
 800cb72:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cb74:	693b      	ldr	r3, [r7, #16]
 800cb76:	015a      	lsls	r2, r3, #5
 800cb78:	697b      	ldr	r3, [r7, #20]
 800cb7a:	4413      	add	r3, r2
 800cb7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb80:	691b      	ldr	r3, [r3, #16]
 800cb82:	693a      	ldr	r2, [r7, #16]
 800cb84:	0151      	lsls	r1, r2, #5
 800cb86:	697a      	ldr	r2, [r7, #20]
 800cb88:	440a      	add	r2, r1
 800cb8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb8e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800cb92:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800cb96:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800cb98:	68bb      	ldr	r3, [r7, #8]
 800cb9a:	695a      	ldr	r2, [r3, #20]
 800cb9c:	68bb      	ldr	r3, [r7, #8]
 800cb9e:	689b      	ldr	r3, [r3, #8]
 800cba0:	429a      	cmp	r2, r3
 800cba2:	d903      	bls.n	800cbac <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800cba4:	68bb      	ldr	r3, [r7, #8]
 800cba6:	689a      	ldr	r2, [r3, #8]
 800cba8:	68bb      	ldr	r3, [r7, #8]
 800cbaa:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800cbac:	693b      	ldr	r3, [r7, #16]
 800cbae:	015a      	lsls	r2, r3, #5
 800cbb0:	697b      	ldr	r3, [r7, #20]
 800cbb2:	4413      	add	r3, r2
 800cbb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbb8:	691b      	ldr	r3, [r3, #16]
 800cbba:	693a      	ldr	r2, [r7, #16]
 800cbbc:	0151      	lsls	r1, r2, #5
 800cbbe:	697a      	ldr	r2, [r7, #20]
 800cbc0:	440a      	add	r2, r1
 800cbc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cbc6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cbca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800cbcc:	693b      	ldr	r3, [r7, #16]
 800cbce:	015a      	lsls	r2, r3, #5
 800cbd0:	697b      	ldr	r3, [r7, #20]
 800cbd2:	4413      	add	r3, r2
 800cbd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbd8:	691a      	ldr	r2, [r3, #16]
 800cbda:	68bb      	ldr	r3, [r7, #8]
 800cbdc:	695b      	ldr	r3, [r3, #20]
 800cbde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cbe2:	6939      	ldr	r1, [r7, #16]
 800cbe4:	0148      	lsls	r0, r1, #5
 800cbe6:	6979      	ldr	r1, [r7, #20]
 800cbe8:	4401      	add	r1, r0
 800cbea:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800cbee:	4313      	orrs	r3, r2
 800cbf0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800cbf2:	79fb      	ldrb	r3, [r7, #7]
 800cbf4:	2b01      	cmp	r3, #1
 800cbf6:	d11e      	bne.n	800cc36 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800cbf8:	68bb      	ldr	r3, [r7, #8]
 800cbfa:	691b      	ldr	r3, [r3, #16]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d009      	beq.n	800cc14 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800cc00:	693b      	ldr	r3, [r7, #16]
 800cc02:	015a      	lsls	r2, r3, #5
 800cc04:	697b      	ldr	r3, [r7, #20]
 800cc06:	4413      	add	r3, r2
 800cc08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc0c:	461a      	mov	r2, r3
 800cc0e:	68bb      	ldr	r3, [r7, #8]
 800cc10:	691b      	ldr	r3, [r3, #16]
 800cc12:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cc14:	693b      	ldr	r3, [r7, #16]
 800cc16:	015a      	lsls	r2, r3, #5
 800cc18:	697b      	ldr	r3, [r7, #20]
 800cc1a:	4413      	add	r3, r2
 800cc1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	693a      	ldr	r2, [r7, #16]
 800cc24:	0151      	lsls	r1, r2, #5
 800cc26:	697a      	ldr	r2, [r7, #20]
 800cc28:	440a      	add	r2, r1
 800cc2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cc2e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cc32:	6013      	str	r3, [r2, #0]
 800cc34:	e092      	b.n	800cd5c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cc36:	693b      	ldr	r3, [r7, #16]
 800cc38:	015a      	lsls	r2, r3, #5
 800cc3a:	697b      	ldr	r3, [r7, #20]
 800cc3c:	4413      	add	r3, r2
 800cc3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	693a      	ldr	r2, [r7, #16]
 800cc46:	0151      	lsls	r1, r2, #5
 800cc48:	697a      	ldr	r2, [r7, #20]
 800cc4a:	440a      	add	r2, r1
 800cc4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cc50:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cc54:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800cc56:	68bb      	ldr	r3, [r7, #8]
 800cc58:	695b      	ldr	r3, [r3, #20]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d07e      	beq.n	800cd5c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800cc5e:	697b      	ldr	r3, [r7, #20]
 800cc60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cc66:	68bb      	ldr	r3, [r7, #8]
 800cc68:	781b      	ldrb	r3, [r3, #0]
 800cc6a:	f003 030f 	and.w	r3, r3, #15
 800cc6e:	2101      	movs	r1, #1
 800cc70:	fa01 f303 	lsl.w	r3, r1, r3
 800cc74:	6979      	ldr	r1, [r7, #20]
 800cc76:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cc7a:	4313      	orrs	r3, r2
 800cc7c:	634b      	str	r3, [r1, #52]	; 0x34
 800cc7e:	e06d      	b.n	800cd5c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800cc80:	693b      	ldr	r3, [r7, #16]
 800cc82:	015a      	lsls	r2, r3, #5
 800cc84:	697b      	ldr	r3, [r7, #20]
 800cc86:	4413      	add	r3, r2
 800cc88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc8c:	691b      	ldr	r3, [r3, #16]
 800cc8e:	693a      	ldr	r2, [r7, #16]
 800cc90:	0151      	lsls	r1, r2, #5
 800cc92:	697a      	ldr	r2, [r7, #20]
 800cc94:	440a      	add	r2, r1
 800cc96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc9a:	0cdb      	lsrs	r3, r3, #19
 800cc9c:	04db      	lsls	r3, r3, #19
 800cc9e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800cca0:	693b      	ldr	r3, [r7, #16]
 800cca2:	015a      	lsls	r2, r3, #5
 800cca4:	697b      	ldr	r3, [r7, #20]
 800cca6:	4413      	add	r3, r2
 800cca8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ccac:	691b      	ldr	r3, [r3, #16]
 800ccae:	693a      	ldr	r2, [r7, #16]
 800ccb0:	0151      	lsls	r1, r2, #5
 800ccb2:	697a      	ldr	r2, [r7, #20]
 800ccb4:	440a      	add	r2, r1
 800ccb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ccba:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ccbe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ccc2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800ccc4:	68bb      	ldr	r3, [r7, #8]
 800ccc6:	695b      	ldr	r3, [r3, #20]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d003      	beq.n	800ccd4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800cccc:	68bb      	ldr	r3, [r7, #8]
 800ccce:	689a      	ldr	r2, [r3, #8]
 800ccd0:	68bb      	ldr	r3, [r7, #8]
 800ccd2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ccd4:	693b      	ldr	r3, [r7, #16]
 800ccd6:	015a      	lsls	r2, r3, #5
 800ccd8:	697b      	ldr	r3, [r7, #20]
 800ccda:	4413      	add	r3, r2
 800ccdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cce0:	691b      	ldr	r3, [r3, #16]
 800cce2:	693a      	ldr	r2, [r7, #16]
 800cce4:	0151      	lsls	r1, r2, #5
 800cce6:	697a      	ldr	r2, [r7, #20]
 800cce8:	440a      	add	r2, r1
 800ccea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ccee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ccf2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800ccf4:	693b      	ldr	r3, [r7, #16]
 800ccf6:	015a      	lsls	r2, r3, #5
 800ccf8:	697b      	ldr	r3, [r7, #20]
 800ccfa:	4413      	add	r3, r2
 800ccfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd00:	691a      	ldr	r2, [r3, #16]
 800cd02:	68bb      	ldr	r3, [r7, #8]
 800cd04:	689b      	ldr	r3, [r3, #8]
 800cd06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cd0a:	6939      	ldr	r1, [r7, #16]
 800cd0c:	0148      	lsls	r0, r1, #5
 800cd0e:	6979      	ldr	r1, [r7, #20]
 800cd10:	4401      	add	r1, r0
 800cd12:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800cd16:	4313      	orrs	r3, r2
 800cd18:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800cd1a:	79fb      	ldrb	r3, [r7, #7]
 800cd1c:	2b01      	cmp	r3, #1
 800cd1e:	d10d      	bne.n	800cd3c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800cd20:	68bb      	ldr	r3, [r7, #8]
 800cd22:	68db      	ldr	r3, [r3, #12]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d009      	beq.n	800cd3c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800cd28:	68bb      	ldr	r3, [r7, #8]
 800cd2a:	68d9      	ldr	r1, [r3, #12]
 800cd2c:	693b      	ldr	r3, [r7, #16]
 800cd2e:	015a      	lsls	r2, r3, #5
 800cd30:	697b      	ldr	r3, [r7, #20]
 800cd32:	4413      	add	r3, r2
 800cd34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd38:	460a      	mov	r2, r1
 800cd3a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800cd3c:	693b      	ldr	r3, [r7, #16]
 800cd3e:	015a      	lsls	r2, r3, #5
 800cd40:	697b      	ldr	r3, [r7, #20]
 800cd42:	4413      	add	r3, r2
 800cd44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	693a      	ldr	r2, [r7, #16]
 800cd4c:	0151      	lsls	r1, r2, #5
 800cd4e:	697a      	ldr	r2, [r7, #20]
 800cd50:	440a      	add	r2, r1
 800cd52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cd56:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cd5a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cd5c:	2300      	movs	r3, #0
}
 800cd5e:	4618      	mov	r0, r3
 800cd60:	371c      	adds	r7, #28
 800cd62:	46bd      	mov	sp, r7
 800cd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd68:	4770      	bx	lr

0800cd6a <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800cd6a:	b480      	push	{r7}
 800cd6c:	b089      	sub	sp, #36	; 0x24
 800cd6e:	af00      	add	r7, sp, #0
 800cd70:	60f8      	str	r0, [r7, #12]
 800cd72:	60b9      	str	r1, [r7, #8]
 800cd74:	4611      	mov	r1, r2
 800cd76:	461a      	mov	r2, r3
 800cd78:	460b      	mov	r3, r1
 800cd7a:	71fb      	strb	r3, [r7, #7]
 800cd7c:	4613      	mov	r3, r2
 800cd7e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800cd84:	68bb      	ldr	r3, [r7, #8]
 800cd86:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800cd88:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d11a      	bne.n	800cdc6 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800cd90:	88bb      	ldrh	r3, [r7, #4]
 800cd92:	3303      	adds	r3, #3
 800cd94:	089b      	lsrs	r3, r3, #2
 800cd96:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800cd98:	2300      	movs	r3, #0
 800cd9a:	61bb      	str	r3, [r7, #24]
 800cd9c:	e00f      	b.n	800cdbe <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800cd9e:	79fb      	ldrb	r3, [r7, #7]
 800cda0:	031a      	lsls	r2, r3, #12
 800cda2:	697b      	ldr	r3, [r7, #20]
 800cda4:	4413      	add	r3, r2
 800cda6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cdaa:	461a      	mov	r2, r3
 800cdac:	69fb      	ldr	r3, [r7, #28]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	6013      	str	r3, [r2, #0]
      pSrc++;
 800cdb2:	69fb      	ldr	r3, [r7, #28]
 800cdb4:	3304      	adds	r3, #4
 800cdb6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800cdb8:	69bb      	ldr	r3, [r7, #24]
 800cdba:	3301      	adds	r3, #1
 800cdbc:	61bb      	str	r3, [r7, #24]
 800cdbe:	69ba      	ldr	r2, [r7, #24]
 800cdc0:	693b      	ldr	r3, [r7, #16]
 800cdc2:	429a      	cmp	r2, r3
 800cdc4:	d3eb      	bcc.n	800cd9e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800cdc6:	2300      	movs	r3, #0
}
 800cdc8:	4618      	mov	r0, r3
 800cdca:	3724      	adds	r7, #36	; 0x24
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd2:	4770      	bx	lr

0800cdd4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800cdd4:	b480      	push	{r7}
 800cdd6:	b089      	sub	sp, #36	; 0x24
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	60f8      	str	r0, [r7, #12]
 800cddc:	60b9      	str	r1, [r7, #8]
 800cdde:	4613      	mov	r3, r2
 800cde0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800cde6:	68bb      	ldr	r3, [r7, #8]
 800cde8:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800cdea:	88fb      	ldrh	r3, [r7, #6]
 800cdec:	3303      	adds	r3, #3
 800cdee:	089b      	lsrs	r3, r3, #2
 800cdf0:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800cdf2:	2300      	movs	r3, #0
 800cdf4:	61bb      	str	r3, [r7, #24]
 800cdf6:	e00b      	b.n	800ce10 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800cdf8:	697b      	ldr	r3, [r7, #20]
 800cdfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cdfe:	681a      	ldr	r2, [r3, #0]
 800ce00:	69fb      	ldr	r3, [r7, #28]
 800ce02:	601a      	str	r2, [r3, #0]
    pDest++;
 800ce04:	69fb      	ldr	r3, [r7, #28]
 800ce06:	3304      	adds	r3, #4
 800ce08:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800ce0a:	69bb      	ldr	r3, [r7, #24]
 800ce0c:	3301      	adds	r3, #1
 800ce0e:	61bb      	str	r3, [r7, #24]
 800ce10:	69ba      	ldr	r2, [r7, #24]
 800ce12:	693b      	ldr	r3, [r7, #16]
 800ce14:	429a      	cmp	r2, r3
 800ce16:	d3ef      	bcc.n	800cdf8 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800ce18:	69fb      	ldr	r3, [r7, #28]
}
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	3724      	adds	r7, #36	; 0x24
 800ce1e:	46bd      	mov	sp, r7
 800ce20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce24:	4770      	bx	lr

0800ce26 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ce26:	b480      	push	{r7}
 800ce28:	b085      	sub	sp, #20
 800ce2a:	af00      	add	r7, sp, #0
 800ce2c:	6078      	str	r0, [r7, #4]
 800ce2e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ce34:	683b      	ldr	r3, [r7, #0]
 800ce36:	781b      	ldrb	r3, [r3, #0]
 800ce38:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ce3a:	683b      	ldr	r3, [r7, #0]
 800ce3c:	785b      	ldrb	r3, [r3, #1]
 800ce3e:	2b01      	cmp	r3, #1
 800ce40:	d12c      	bne.n	800ce9c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ce42:	68bb      	ldr	r3, [r7, #8]
 800ce44:	015a      	lsls	r2, r3, #5
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	4413      	add	r3, r2
 800ce4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	db12      	blt.n	800ce7a <USB_EPSetStall+0x54>
 800ce54:	68bb      	ldr	r3, [r7, #8]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d00f      	beq.n	800ce7a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800ce5a:	68bb      	ldr	r3, [r7, #8]
 800ce5c:	015a      	lsls	r2, r3, #5
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	4413      	add	r3, r2
 800ce62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	68ba      	ldr	r2, [r7, #8]
 800ce6a:	0151      	lsls	r1, r2, #5
 800ce6c:	68fa      	ldr	r2, [r7, #12]
 800ce6e:	440a      	add	r2, r1
 800ce70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce74:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ce78:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ce7a:	68bb      	ldr	r3, [r7, #8]
 800ce7c:	015a      	lsls	r2, r3, #5
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	4413      	add	r3, r2
 800ce82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	68ba      	ldr	r2, [r7, #8]
 800ce8a:	0151      	lsls	r1, r2, #5
 800ce8c:	68fa      	ldr	r2, [r7, #12]
 800ce8e:	440a      	add	r2, r1
 800ce90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ce98:	6013      	str	r3, [r2, #0]
 800ce9a:	e02b      	b.n	800cef4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ce9c:	68bb      	ldr	r3, [r7, #8]
 800ce9e:	015a      	lsls	r2, r3, #5
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	4413      	add	r3, r2
 800cea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	db12      	blt.n	800ced4 <USB_EPSetStall+0xae>
 800ceae:	68bb      	ldr	r3, [r7, #8]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d00f      	beq.n	800ced4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ceb4:	68bb      	ldr	r3, [r7, #8]
 800ceb6:	015a      	lsls	r2, r3, #5
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	4413      	add	r3, r2
 800cebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	68ba      	ldr	r2, [r7, #8]
 800cec4:	0151      	lsls	r1, r2, #5
 800cec6:	68fa      	ldr	r2, [r7, #12]
 800cec8:	440a      	add	r2, r1
 800ceca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cece:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ced2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ced4:	68bb      	ldr	r3, [r7, #8]
 800ced6:	015a      	lsls	r2, r3, #5
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	4413      	add	r3, r2
 800cedc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	68ba      	ldr	r2, [r7, #8]
 800cee4:	0151      	lsls	r1, r2, #5
 800cee6:	68fa      	ldr	r2, [r7, #12]
 800cee8:	440a      	add	r2, r1
 800ceea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ceee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cef2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cef4:	2300      	movs	r3, #0
}
 800cef6:	4618      	mov	r0, r3
 800cef8:	3714      	adds	r7, #20
 800cefa:	46bd      	mov	sp, r7
 800cefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf00:	4770      	bx	lr

0800cf02 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cf02:	b480      	push	{r7}
 800cf04:	b085      	sub	sp, #20
 800cf06:	af00      	add	r7, sp, #0
 800cf08:	6078      	str	r0, [r7, #4]
 800cf0a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cf10:	683b      	ldr	r3, [r7, #0]
 800cf12:	781b      	ldrb	r3, [r3, #0]
 800cf14:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cf16:	683b      	ldr	r3, [r7, #0]
 800cf18:	785b      	ldrb	r3, [r3, #1]
 800cf1a:	2b01      	cmp	r3, #1
 800cf1c:	d128      	bne.n	800cf70 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800cf1e:	68bb      	ldr	r3, [r7, #8]
 800cf20:	015a      	lsls	r2, r3, #5
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	4413      	add	r3, r2
 800cf26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	68ba      	ldr	r2, [r7, #8]
 800cf2e:	0151      	lsls	r1, r2, #5
 800cf30:	68fa      	ldr	r2, [r7, #12]
 800cf32:	440a      	add	r2, r1
 800cf34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf38:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cf3c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800cf3e:	683b      	ldr	r3, [r7, #0]
 800cf40:	78db      	ldrb	r3, [r3, #3]
 800cf42:	2b03      	cmp	r3, #3
 800cf44:	d003      	beq.n	800cf4e <USB_EPClearStall+0x4c>
 800cf46:	683b      	ldr	r3, [r7, #0]
 800cf48:	78db      	ldrb	r3, [r3, #3]
 800cf4a:	2b02      	cmp	r3, #2
 800cf4c:	d138      	bne.n	800cfc0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800cf4e:	68bb      	ldr	r3, [r7, #8]
 800cf50:	015a      	lsls	r2, r3, #5
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	4413      	add	r3, r2
 800cf56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	68ba      	ldr	r2, [r7, #8]
 800cf5e:	0151      	lsls	r1, r2, #5
 800cf60:	68fa      	ldr	r2, [r7, #12]
 800cf62:	440a      	add	r2, r1
 800cf64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cf6c:	6013      	str	r3, [r2, #0]
 800cf6e:	e027      	b.n	800cfc0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800cf70:	68bb      	ldr	r3, [r7, #8]
 800cf72:	015a      	lsls	r2, r3, #5
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	4413      	add	r3, r2
 800cf78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	68ba      	ldr	r2, [r7, #8]
 800cf80:	0151      	lsls	r1, r2, #5
 800cf82:	68fa      	ldr	r2, [r7, #12]
 800cf84:	440a      	add	r2, r1
 800cf86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cf8a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cf8e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800cf90:	683b      	ldr	r3, [r7, #0]
 800cf92:	78db      	ldrb	r3, [r3, #3]
 800cf94:	2b03      	cmp	r3, #3
 800cf96:	d003      	beq.n	800cfa0 <USB_EPClearStall+0x9e>
 800cf98:	683b      	ldr	r3, [r7, #0]
 800cf9a:	78db      	ldrb	r3, [r3, #3]
 800cf9c:	2b02      	cmp	r3, #2
 800cf9e:	d10f      	bne.n	800cfc0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800cfa0:	68bb      	ldr	r3, [r7, #8]
 800cfa2:	015a      	lsls	r2, r3, #5
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	4413      	add	r3, r2
 800cfa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	68ba      	ldr	r2, [r7, #8]
 800cfb0:	0151      	lsls	r1, r2, #5
 800cfb2:	68fa      	ldr	r2, [r7, #12]
 800cfb4:	440a      	add	r2, r1
 800cfb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cfba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cfbe:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800cfc0:	2300      	movs	r3, #0
}
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	3714      	adds	r7, #20
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfcc:	4770      	bx	lr

0800cfce <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800cfce:	b480      	push	{r7}
 800cfd0:	b085      	sub	sp, #20
 800cfd2:	af00      	add	r7, sp, #0
 800cfd4:	6078      	str	r0, [r7, #4]
 800cfd6:	460b      	mov	r3, r1
 800cfd8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	68fa      	ldr	r2, [r7, #12]
 800cfe8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cfec:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800cff0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cff8:	681a      	ldr	r2, [r3, #0]
 800cffa:	78fb      	ldrb	r3, [r7, #3]
 800cffc:	011b      	lsls	r3, r3, #4
 800cffe:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800d002:	68f9      	ldr	r1, [r7, #12]
 800d004:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d008:	4313      	orrs	r3, r2
 800d00a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800d00c:	2300      	movs	r3, #0
}
 800d00e:	4618      	mov	r0, r3
 800d010:	3714      	adds	r7, #20
 800d012:	46bd      	mov	sp, r7
 800d014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d018:	4770      	bx	lr

0800d01a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d01a:	b580      	push	{r7, lr}
 800d01c:	b084      	sub	sp, #16
 800d01e:	af00      	add	r7, sp, #0
 800d020:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d02c:	685b      	ldr	r3, [r3, #4]
 800d02e:	68fa      	ldr	r2, [r7, #12]
 800d030:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d034:	f023 0302 	bic.w	r3, r3, #2
 800d038:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800d03a:	2003      	movs	r0, #3
 800d03c:	f7fa ff54 	bl	8007ee8 <HAL_Delay>

  return HAL_OK;
 800d040:	2300      	movs	r3, #0
}
 800d042:	4618      	mov	r0, r3
 800d044:	3710      	adds	r7, #16
 800d046:	46bd      	mov	sp, r7
 800d048:	bd80      	pop	{r7, pc}

0800d04a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d04a:	b580      	push	{r7, lr}
 800d04c:	b084      	sub	sp, #16
 800d04e:	af00      	add	r7, sp, #0
 800d050:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d05c:	685b      	ldr	r3, [r3, #4]
 800d05e:	68fa      	ldr	r2, [r7, #12]
 800d060:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d064:	f043 0302 	orr.w	r3, r3, #2
 800d068:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800d06a:	2003      	movs	r0, #3
 800d06c:	f7fa ff3c 	bl	8007ee8 <HAL_Delay>

  return HAL_OK;
 800d070:	2300      	movs	r3, #0
}
 800d072:	4618      	mov	r0, r3
 800d074:	3710      	adds	r7, #16
 800d076:	46bd      	mov	sp, r7
 800d078:	bd80      	pop	{r7, pc}

0800d07a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800d07a:	b480      	push	{r7}
 800d07c:	b085      	sub	sp, #20
 800d07e:	af00      	add	r7, sp, #0
 800d080:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	695b      	ldr	r3, [r3, #20]
 800d086:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	699b      	ldr	r3, [r3, #24]
 800d08c:	68fa      	ldr	r2, [r7, #12]
 800d08e:	4013      	ands	r3, r2
 800d090:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d092:	68fb      	ldr	r3, [r7, #12]
}
 800d094:	4618      	mov	r0, r3
 800d096:	3714      	adds	r7, #20
 800d098:	46bd      	mov	sp, r7
 800d09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09e:	4770      	bx	lr

0800d0a0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d0a0:	b480      	push	{r7}
 800d0a2:	b085      	sub	sp, #20
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0b2:	699b      	ldr	r3, [r3, #24]
 800d0b4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0bc:	69db      	ldr	r3, [r3, #28]
 800d0be:	68ba      	ldr	r2, [r7, #8]
 800d0c0:	4013      	ands	r3, r2
 800d0c2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800d0c4:	68bb      	ldr	r3, [r7, #8]
 800d0c6:	0c1b      	lsrs	r3, r3, #16
}
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	3714      	adds	r7, #20
 800d0cc:	46bd      	mov	sp, r7
 800d0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d2:	4770      	bx	lr

0800d0d4 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d0d4:	b480      	push	{r7}
 800d0d6:	b085      	sub	sp, #20
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0e6:	699b      	ldr	r3, [r3, #24]
 800d0e8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0f0:	69db      	ldr	r3, [r3, #28]
 800d0f2:	68ba      	ldr	r2, [r7, #8]
 800d0f4:	4013      	ands	r3, r2
 800d0f6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800d0f8:	68bb      	ldr	r3, [r7, #8]
 800d0fa:	b29b      	uxth	r3, r3
}
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	3714      	adds	r7, #20
 800d100:	46bd      	mov	sp, r7
 800d102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d106:	4770      	bx	lr

0800d108 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d108:	b480      	push	{r7}
 800d10a:	b085      	sub	sp, #20
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
 800d110:	460b      	mov	r3, r1
 800d112:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d118:	78fb      	ldrb	r3, [r7, #3]
 800d11a:	015a      	lsls	r2, r3, #5
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	4413      	add	r3, r2
 800d120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d124:	689b      	ldr	r3, [r3, #8]
 800d126:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d12e:	695b      	ldr	r3, [r3, #20]
 800d130:	68ba      	ldr	r2, [r7, #8]
 800d132:	4013      	ands	r3, r2
 800d134:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d136:	68bb      	ldr	r3, [r7, #8]
}
 800d138:	4618      	mov	r0, r3
 800d13a:	3714      	adds	r7, #20
 800d13c:	46bd      	mov	sp, r7
 800d13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d142:	4770      	bx	lr

0800d144 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d144:	b480      	push	{r7}
 800d146:	b087      	sub	sp, #28
 800d148:	af00      	add	r7, sp, #0
 800d14a:	6078      	str	r0, [r7, #4]
 800d14c:	460b      	mov	r3, r1
 800d14e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800d154:	697b      	ldr	r3, [r7, #20]
 800d156:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d15a:	691b      	ldr	r3, [r3, #16]
 800d15c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800d15e:	697b      	ldr	r3, [r7, #20]
 800d160:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d166:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d168:	78fb      	ldrb	r3, [r7, #3]
 800d16a:	f003 030f 	and.w	r3, r3, #15
 800d16e:	68fa      	ldr	r2, [r7, #12]
 800d170:	fa22 f303 	lsr.w	r3, r2, r3
 800d174:	01db      	lsls	r3, r3, #7
 800d176:	b2db      	uxtb	r3, r3
 800d178:	693a      	ldr	r2, [r7, #16]
 800d17a:	4313      	orrs	r3, r2
 800d17c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d17e:	78fb      	ldrb	r3, [r7, #3]
 800d180:	015a      	lsls	r2, r3, #5
 800d182:	697b      	ldr	r3, [r7, #20]
 800d184:	4413      	add	r3, r2
 800d186:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d18a:	689b      	ldr	r3, [r3, #8]
 800d18c:	693a      	ldr	r2, [r7, #16]
 800d18e:	4013      	ands	r3, r2
 800d190:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d192:	68bb      	ldr	r3, [r7, #8]
}
 800d194:	4618      	mov	r0, r3
 800d196:	371c      	adds	r7, #28
 800d198:	46bd      	mov	sp, r7
 800d19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19e:	4770      	bx	lr

0800d1a0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d1a0:	b480      	push	{r7}
 800d1a2:	b083      	sub	sp, #12
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	695b      	ldr	r3, [r3, #20]
 800d1ac:	f003 0301 	and.w	r3, r3, #1
}
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	370c      	adds	r7, #12
 800d1b4:	46bd      	mov	sp, r7
 800d1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ba:	4770      	bx	lr

0800d1bc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800d1bc:	b480      	push	{r7}
 800d1be:	b085      	sub	sp, #20
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	68fa      	ldr	r2, [r7, #12]
 800d1d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d1d6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800d1da:	f023 0307 	bic.w	r3, r3, #7
 800d1de:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1e6:	689b      	ldr	r3, [r3, #8]
 800d1e8:	f003 0306 	and.w	r3, r3, #6
 800d1ec:	2b04      	cmp	r3, #4
 800d1ee:	d109      	bne.n	800d204 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	68fa      	ldr	r2, [r7, #12]
 800d1fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d1fe:	f043 0303 	orr.w	r3, r3, #3
 800d202:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d20a:	685b      	ldr	r3, [r3, #4]
 800d20c:	68fa      	ldr	r2, [r7, #12]
 800d20e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d212:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d216:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d218:	2300      	movs	r3, #0
}
 800d21a:	4618      	mov	r0, r3
 800d21c:	3714      	adds	r7, #20
 800d21e:	46bd      	mov	sp, r7
 800d220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d224:	4770      	bx	lr
	...

0800d228 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800d228:	b480      	push	{r7}
 800d22a:	b087      	sub	sp, #28
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	60f8      	str	r0, [r7, #12]
 800d230:	460b      	mov	r3, r1
 800d232:	607a      	str	r2, [r7, #4]
 800d234:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	333c      	adds	r3, #60	; 0x3c
 800d23e:	3304      	adds	r3, #4
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800d244:	693b      	ldr	r3, [r7, #16]
 800d246:	4a26      	ldr	r2, [pc, #152]	; (800d2e0 <USB_EP0_OutStart+0xb8>)
 800d248:	4293      	cmp	r3, r2
 800d24a:	d90a      	bls.n	800d262 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d24c:	697b      	ldr	r3, [r7, #20]
 800d24e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d258:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d25c:	d101      	bne.n	800d262 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800d25e:	2300      	movs	r3, #0
 800d260:	e037      	b.n	800d2d2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800d262:	697b      	ldr	r3, [r7, #20]
 800d264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d268:	461a      	mov	r2, r3
 800d26a:	2300      	movs	r3, #0
 800d26c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d26e:	697b      	ldr	r3, [r7, #20]
 800d270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d274:	691b      	ldr	r3, [r3, #16]
 800d276:	697a      	ldr	r2, [r7, #20]
 800d278:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d27c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d280:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800d282:	697b      	ldr	r3, [r7, #20]
 800d284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d288:	691b      	ldr	r3, [r3, #16]
 800d28a:	697a      	ldr	r2, [r7, #20]
 800d28c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d290:	f043 0318 	orr.w	r3, r3, #24
 800d294:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800d296:	697b      	ldr	r3, [r7, #20]
 800d298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d29c:	691b      	ldr	r3, [r3, #16]
 800d29e:	697a      	ldr	r2, [r7, #20]
 800d2a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d2a4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800d2a8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800d2aa:	7afb      	ldrb	r3, [r7, #11]
 800d2ac:	2b01      	cmp	r3, #1
 800d2ae:	d10f      	bne.n	800d2d0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800d2b0:	697b      	ldr	r3, [r7, #20]
 800d2b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2b6:	461a      	mov	r2, r3
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800d2bc:	697b      	ldr	r3, [r7, #20]
 800d2be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	697a      	ldr	r2, [r7, #20]
 800d2c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d2ca:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800d2ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d2d0:	2300      	movs	r3, #0
}
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	371c      	adds	r7, #28
 800d2d6:	46bd      	mov	sp, r7
 800d2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2dc:	4770      	bx	lr
 800d2de:	bf00      	nop
 800d2e0:	4f54300a 	.word	0x4f54300a

0800d2e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d2e4:	b480      	push	{r7}
 800d2e6:	b085      	sub	sp, #20
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	3301      	adds	r3, #1
 800d2f4:	60fb      	str	r3, [r7, #12]
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	4a13      	ldr	r2, [pc, #76]	; (800d348 <USB_CoreReset+0x64>)
 800d2fa:	4293      	cmp	r3, r2
 800d2fc:	d901      	bls.n	800d302 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d2fe:	2303      	movs	r3, #3
 800d300:	e01b      	b.n	800d33a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	691b      	ldr	r3, [r3, #16]
 800d306:	2b00      	cmp	r3, #0
 800d308:	daf2      	bge.n	800d2f0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d30a:	2300      	movs	r3, #0
 800d30c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	691b      	ldr	r3, [r3, #16]
 800d312:	f043 0201 	orr.w	r2, r3, #1
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	3301      	adds	r3, #1
 800d31e:	60fb      	str	r3, [r7, #12]
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	4a09      	ldr	r2, [pc, #36]	; (800d348 <USB_CoreReset+0x64>)
 800d324:	4293      	cmp	r3, r2
 800d326:	d901      	bls.n	800d32c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d328:	2303      	movs	r3, #3
 800d32a:	e006      	b.n	800d33a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	691b      	ldr	r3, [r3, #16]
 800d330:	f003 0301 	and.w	r3, r3, #1
 800d334:	2b01      	cmp	r3, #1
 800d336:	d0f0      	beq.n	800d31a <USB_CoreReset+0x36>

  return HAL_OK;
 800d338:	2300      	movs	r3, #0
}
 800d33a:	4618      	mov	r0, r3
 800d33c:	3714      	adds	r7, #20
 800d33e:	46bd      	mov	sp, r7
 800d340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d344:	4770      	bx	lr
 800d346:	bf00      	nop
 800d348:	00030d40 	.word	0x00030d40

0800d34c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d34c:	b580      	push	{r7, lr}
 800d34e:	b084      	sub	sp, #16
 800d350:	af00      	add	r7, sp, #0
 800d352:	6078      	str	r0, [r7, #4]
 800d354:	460b      	mov	r3, r1
 800d356:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800d358:	2300      	movs	r3, #0
 800d35a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	7c1b      	ldrb	r3, [r3, #16]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d115      	bne.n	800d390 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d364:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d368:	2202      	movs	r2, #2
 800d36a:	2181      	movs	r1, #129	; 0x81
 800d36c:	6878      	ldr	r0, [r7, #4]
 800d36e:	f005 f8a2 	bl	80124b6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	2201      	movs	r2, #1
 800d376:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d378:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d37c:	2202      	movs	r2, #2
 800d37e:	2101      	movs	r1, #1
 800d380:	6878      	ldr	r0, [r7, #4]
 800d382:	f005 f898 	bl	80124b6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	2201      	movs	r2, #1
 800d38a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800d38e:	e012      	b.n	800d3b6 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d390:	2340      	movs	r3, #64	; 0x40
 800d392:	2202      	movs	r2, #2
 800d394:	2181      	movs	r1, #129	; 0x81
 800d396:	6878      	ldr	r0, [r7, #4]
 800d398:	f005 f88d 	bl	80124b6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	2201      	movs	r2, #1
 800d3a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d3a2:	2340      	movs	r3, #64	; 0x40
 800d3a4:	2202      	movs	r2, #2
 800d3a6:	2101      	movs	r1, #1
 800d3a8:	6878      	ldr	r0, [r7, #4]
 800d3aa:	f005 f884 	bl	80124b6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	2201      	movs	r2, #1
 800d3b2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d3b6:	2308      	movs	r3, #8
 800d3b8:	2203      	movs	r2, #3
 800d3ba:	2182      	movs	r1, #130	; 0x82
 800d3bc:	6878      	ldr	r0, [r7, #4]
 800d3be:	f005 f87a 	bl	80124b6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	2201      	movs	r2, #1
 800d3c6:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800d3c8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800d3cc:	f005 f9f0 	bl	80127b0 <malloc>
 800d3d0:	4603      	mov	r3, r0
 800d3d2:	461a      	mov	r2, r3
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d102      	bne.n	800d3ea <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 800d3e4:	2301      	movs	r3, #1
 800d3e6:	73fb      	strb	r3, [r7, #15]
 800d3e8:	e026      	b.n	800d438 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d3f0:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800d3fc:	68bb      	ldr	r3, [r7, #8]
 800d3fe:	2200      	movs	r2, #0
 800d400:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800d404:	68bb      	ldr	r3, [r7, #8]
 800d406:	2200      	movs	r2, #0
 800d408:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	7c1b      	ldrb	r3, [r3, #16]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d109      	bne.n	800d428 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d414:	68bb      	ldr	r3, [r7, #8]
 800d416:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d41a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d41e:	2101      	movs	r1, #1
 800d420:	6878      	ldr	r0, [r7, #4]
 800d422:	f005 f939 	bl	8012698 <USBD_LL_PrepareReceive>
 800d426:	e007      	b.n	800d438 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d428:	68bb      	ldr	r3, [r7, #8]
 800d42a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d42e:	2340      	movs	r3, #64	; 0x40
 800d430:	2101      	movs	r1, #1
 800d432:	6878      	ldr	r0, [r7, #4]
 800d434:	f005 f930 	bl	8012698 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800d438:	7bfb      	ldrb	r3, [r7, #15]
}
 800d43a:	4618      	mov	r0, r3
 800d43c:	3710      	adds	r7, #16
 800d43e:	46bd      	mov	sp, r7
 800d440:	bd80      	pop	{r7, pc}

0800d442 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d442:	b580      	push	{r7, lr}
 800d444:	b084      	sub	sp, #16
 800d446:	af00      	add	r7, sp, #0
 800d448:	6078      	str	r0, [r7, #4]
 800d44a:	460b      	mov	r3, r1
 800d44c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800d44e:	2300      	movs	r3, #0
 800d450:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800d452:	2181      	movs	r1, #129	; 0x81
 800d454:	6878      	ldr	r0, [r7, #4]
 800d456:	f005 f854 	bl	8012502 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	2200      	movs	r2, #0
 800d45e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800d460:	2101      	movs	r1, #1
 800d462:	6878      	ldr	r0, [r7, #4]
 800d464:	f005 f84d 	bl	8012502 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	2200      	movs	r2, #0
 800d46c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800d470:	2182      	movs	r1, #130	; 0x82
 800d472:	6878      	ldr	r0, [r7, #4]
 800d474:	f005 f845 	bl	8012502 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	2200      	movs	r2, #0
 800d47c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d484:	2b00      	cmp	r3, #0
 800d486:	d00e      	beq.n	800d4a6 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d48e:	685b      	ldr	r3, [r3, #4]
 800d490:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d498:	4618      	mov	r0, r3
 800d49a:	f005 f991 	bl	80127c0 <free>
    pdev->pClassData = NULL;
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	2200      	movs	r2, #0
 800d4a2:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 800d4a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	3710      	adds	r7, #16
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	bd80      	pop	{r7, pc}

0800d4b0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800d4b0:	b580      	push	{r7, lr}
 800d4b2:	b086      	sub	sp, #24
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	6078      	str	r0, [r7, #4]
 800d4b8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d4c0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d4ce:	683b      	ldr	r3, [r7, #0]
 800d4d0:	781b      	ldrb	r3, [r3, #0]
 800d4d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d039      	beq.n	800d54e <USBD_CDC_Setup+0x9e>
 800d4da:	2b20      	cmp	r3, #32
 800d4dc:	d17c      	bne.n	800d5d8 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 800d4de:	683b      	ldr	r3, [r7, #0]
 800d4e0:	88db      	ldrh	r3, [r3, #6]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d029      	beq.n	800d53a <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 800d4e6:	683b      	ldr	r3, [r7, #0]
 800d4e8:	781b      	ldrb	r3, [r3, #0]
 800d4ea:	b25b      	sxtb	r3, r3
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	da11      	bge.n	800d514 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d4f6:	689b      	ldr	r3, [r3, #8]
 800d4f8:	683a      	ldr	r2, [r7, #0]
 800d4fa:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 800d4fc:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d4fe:	683a      	ldr	r2, [r7, #0]
 800d500:	88d2      	ldrh	r2, [r2, #6]
 800d502:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800d504:	6939      	ldr	r1, [r7, #16]
 800d506:	683b      	ldr	r3, [r7, #0]
 800d508:	88db      	ldrh	r3, [r3, #6]
 800d50a:	461a      	mov	r2, r3
 800d50c:	6878      	ldr	r0, [r7, #4]
 800d50e:	f001 f9c9 	bl	800e8a4 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 800d512:	e068      	b.n	800d5e6 <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 800d514:	683b      	ldr	r3, [r7, #0]
 800d516:	785a      	ldrb	r2, [r3, #1]
 800d518:	693b      	ldr	r3, [r7, #16]
 800d51a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800d51e:	683b      	ldr	r3, [r7, #0]
 800d520:	88db      	ldrh	r3, [r3, #6]
 800d522:	b2da      	uxtb	r2, r3
 800d524:	693b      	ldr	r3, [r7, #16]
 800d526:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800d52a:	6939      	ldr	r1, [r7, #16]
 800d52c:	683b      	ldr	r3, [r7, #0]
 800d52e:	88db      	ldrh	r3, [r3, #6]
 800d530:	461a      	mov	r2, r3
 800d532:	6878      	ldr	r0, [r7, #4]
 800d534:	f001 f9e4 	bl	800e900 <USBD_CtlPrepareRx>
    break;
 800d538:	e055      	b.n	800d5e6 <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d540:	689b      	ldr	r3, [r3, #8]
 800d542:	683a      	ldr	r2, [r7, #0]
 800d544:	7850      	ldrb	r0, [r2, #1]
 800d546:	2200      	movs	r2, #0
 800d548:	6839      	ldr	r1, [r7, #0]
 800d54a:	4798      	blx	r3
    break;
 800d54c:	e04b      	b.n	800d5e6 <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800d54e:	683b      	ldr	r3, [r7, #0]
 800d550:	785b      	ldrb	r3, [r3, #1]
 800d552:	2b0a      	cmp	r3, #10
 800d554:	d017      	beq.n	800d586 <USBD_CDC_Setup+0xd6>
 800d556:	2b0b      	cmp	r3, #11
 800d558:	d029      	beq.n	800d5ae <USBD_CDC_Setup+0xfe>
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d133      	bne.n	800d5c6 <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d564:	2b03      	cmp	r3, #3
 800d566:	d107      	bne.n	800d578 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800d568:	f107 030c 	add.w	r3, r7, #12
 800d56c:	2202      	movs	r2, #2
 800d56e:	4619      	mov	r1, r3
 800d570:	6878      	ldr	r0, [r7, #4]
 800d572:	f001 f997 	bl	800e8a4 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800d576:	e02e      	b.n	800d5d6 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800d578:	6839      	ldr	r1, [r7, #0]
 800d57a:	6878      	ldr	r0, [r7, #4]
 800d57c:	f001 f927 	bl	800e7ce <USBD_CtlError>
			  ret = USBD_FAIL;
 800d580:	2302      	movs	r3, #2
 800d582:	75fb      	strb	r3, [r7, #23]
      break;
 800d584:	e027      	b.n	800d5d6 <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d58c:	2b03      	cmp	r3, #3
 800d58e:	d107      	bne.n	800d5a0 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800d590:	f107 030f 	add.w	r3, r7, #15
 800d594:	2201      	movs	r2, #1
 800d596:	4619      	mov	r1, r3
 800d598:	6878      	ldr	r0, [r7, #4]
 800d59a:	f001 f983 	bl	800e8a4 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800d59e:	e01a      	b.n	800d5d6 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800d5a0:	6839      	ldr	r1, [r7, #0]
 800d5a2:	6878      	ldr	r0, [r7, #4]
 800d5a4:	f001 f913 	bl	800e7ce <USBD_CtlError>
			  ret = USBD_FAIL;
 800d5a8:	2302      	movs	r3, #2
 800d5aa:	75fb      	strb	r3, [r7, #23]
      break;
 800d5ac:	e013      	b.n	800d5d6 <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d5b4:	2b03      	cmp	r3, #3
 800d5b6:	d00d      	beq.n	800d5d4 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 800d5b8:	6839      	ldr	r1, [r7, #0]
 800d5ba:	6878      	ldr	r0, [r7, #4]
 800d5bc:	f001 f907 	bl	800e7ce <USBD_CtlError>
			  ret = USBD_FAIL;
 800d5c0:	2302      	movs	r3, #2
 800d5c2:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800d5c4:	e006      	b.n	800d5d4 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 800d5c6:	6839      	ldr	r1, [r7, #0]
 800d5c8:	6878      	ldr	r0, [r7, #4]
 800d5ca:	f001 f900 	bl	800e7ce <USBD_CtlError>
      ret = USBD_FAIL;
 800d5ce:	2302      	movs	r3, #2
 800d5d0:	75fb      	strb	r3, [r7, #23]
      break;
 800d5d2:	e000      	b.n	800d5d6 <USBD_CDC_Setup+0x126>
      break;
 800d5d4:	bf00      	nop
    }
    break;
 800d5d6:	e006      	b.n	800d5e6 <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 800d5d8:	6839      	ldr	r1, [r7, #0]
 800d5da:	6878      	ldr	r0, [r7, #4]
 800d5dc:	f001 f8f7 	bl	800e7ce <USBD_CtlError>
    ret = USBD_FAIL;
 800d5e0:	2302      	movs	r3, #2
 800d5e2:	75fb      	strb	r3, [r7, #23]
    break;
 800d5e4:	bf00      	nop
  }

  return ret;
 800d5e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	3718      	adds	r7, #24
 800d5ec:	46bd      	mov	sp, r7
 800d5ee:	bd80      	pop	{r7, pc}

0800d5f0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	b084      	sub	sp, #16
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	6078      	str	r0, [r7, #4]
 800d5f8:	460b      	mov	r3, r1
 800d5fa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d602:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800d60a:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d612:	2b00      	cmp	r3, #0
 800d614:	d03a      	beq.n	800d68c <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800d616:	78fa      	ldrb	r2, [r7, #3]
 800d618:	6879      	ldr	r1, [r7, #4]
 800d61a:	4613      	mov	r3, r2
 800d61c:	009b      	lsls	r3, r3, #2
 800d61e:	4413      	add	r3, r2
 800d620:	009b      	lsls	r3, r3, #2
 800d622:	440b      	add	r3, r1
 800d624:	331c      	adds	r3, #28
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d029      	beq.n	800d680 <USBD_CDC_DataIn+0x90>
 800d62c:	78fa      	ldrb	r2, [r7, #3]
 800d62e:	6879      	ldr	r1, [r7, #4]
 800d630:	4613      	mov	r3, r2
 800d632:	009b      	lsls	r3, r3, #2
 800d634:	4413      	add	r3, r2
 800d636:	009b      	lsls	r3, r3, #2
 800d638:	440b      	add	r3, r1
 800d63a:	331c      	adds	r3, #28
 800d63c:	681a      	ldr	r2, [r3, #0]
 800d63e:	78f9      	ldrb	r1, [r7, #3]
 800d640:	68b8      	ldr	r0, [r7, #8]
 800d642:	460b      	mov	r3, r1
 800d644:	00db      	lsls	r3, r3, #3
 800d646:	1a5b      	subs	r3, r3, r1
 800d648:	009b      	lsls	r3, r3, #2
 800d64a:	4403      	add	r3, r0
 800d64c:	3344      	adds	r3, #68	; 0x44
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	fbb2 f1f3 	udiv	r1, r2, r3
 800d654:	fb03 f301 	mul.w	r3, r3, r1
 800d658:	1ad3      	subs	r3, r2, r3
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d110      	bne.n	800d680 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800d65e:	78fa      	ldrb	r2, [r7, #3]
 800d660:	6879      	ldr	r1, [r7, #4]
 800d662:	4613      	mov	r3, r2
 800d664:	009b      	lsls	r3, r3, #2
 800d666:	4413      	add	r3, r2
 800d668:	009b      	lsls	r3, r3, #2
 800d66a:	440b      	add	r3, r1
 800d66c:	331c      	adds	r3, #28
 800d66e:	2200      	movs	r2, #0
 800d670:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800d672:	78f9      	ldrb	r1, [r7, #3]
 800d674:	2300      	movs	r3, #0
 800d676:	2200      	movs	r2, #0
 800d678:	6878      	ldr	r0, [r7, #4]
 800d67a:	f004 ffea 	bl	8012652 <USBD_LL_Transmit>
 800d67e:	e003      	b.n	800d688 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	2200      	movs	r2, #0
 800d684:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800d688:	2300      	movs	r3, #0
 800d68a:	e000      	b.n	800d68e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800d68c:	2302      	movs	r3, #2
  }
}
 800d68e:	4618      	mov	r0, r3
 800d690:	3710      	adds	r7, #16
 800d692:	46bd      	mov	sp, r7
 800d694:	bd80      	pop	{r7, pc}

0800d696 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d696:	b580      	push	{r7, lr}
 800d698:	b084      	sub	sp, #16
 800d69a:	af00      	add	r7, sp, #0
 800d69c:	6078      	str	r0, [r7, #4]
 800d69e:	460b      	mov	r3, r1
 800d6a0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d6a8:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800d6aa:	78fb      	ldrb	r3, [r7, #3]
 800d6ac:	4619      	mov	r1, r3
 800d6ae:	6878      	ldr	r0, [r7, #4]
 800d6b0:	f005 f815 	bl	80126de <USBD_LL_GetRxDataSize>
 800d6b4:	4602      	mov	r2, r0
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d00d      	beq.n	800d6e2 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d6cc:	68db      	ldr	r3, [r3, #12]
 800d6ce:	68fa      	ldr	r2, [r7, #12]
 800d6d0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800d6d4:	68fa      	ldr	r2, [r7, #12]
 800d6d6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800d6da:	4611      	mov	r1, r2
 800d6dc:	4798      	blx	r3

    return USBD_OK;
 800d6de:	2300      	movs	r3, #0
 800d6e0:	e000      	b.n	800d6e4 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800d6e2:	2302      	movs	r3, #2
  }
}
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	3710      	adds	r7, #16
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	bd80      	pop	{r7, pc}

0800d6ec <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	b084      	sub	sp, #16
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d6fa:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d702:	2b00      	cmp	r3, #0
 800d704:	d015      	beq.n	800d732 <USBD_CDC_EP0_RxReady+0x46>
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800d70c:	2bff      	cmp	r3, #255	; 0xff
 800d70e:	d010      	beq.n	800d732 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d716:	689b      	ldr	r3, [r3, #8]
 800d718:	68fa      	ldr	r2, [r7, #12]
 800d71a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800d71e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800d720:	68fa      	ldr	r2, [r7, #12]
 800d722:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d726:	b292      	uxth	r2, r2
 800d728:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	22ff      	movs	r2, #255	; 0xff
 800d72e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800d732:	2300      	movs	r3, #0
}
 800d734:	4618      	mov	r0, r3
 800d736:	3710      	adds	r7, #16
 800d738:	46bd      	mov	sp, r7
 800d73a:	bd80      	pop	{r7, pc}

0800d73c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800d73c:	b480      	push	{r7}
 800d73e:	b083      	sub	sp, #12
 800d740:	af00      	add	r7, sp, #0
 800d742:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	2243      	movs	r2, #67	; 0x43
 800d748:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800d74a:	4b03      	ldr	r3, [pc, #12]	; (800d758 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800d74c:	4618      	mov	r0, r3
 800d74e:	370c      	adds	r7, #12
 800d750:	46bd      	mov	sp, r7
 800d752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d756:	4770      	bx	lr
 800d758:	20000d48 	.word	0x20000d48

0800d75c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800d75c:	b480      	push	{r7}
 800d75e:	b083      	sub	sp, #12
 800d760:	af00      	add	r7, sp, #0
 800d762:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	2243      	movs	r2, #67	; 0x43
 800d768:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800d76a:	4b03      	ldr	r3, [pc, #12]	; (800d778 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800d76c:	4618      	mov	r0, r3
 800d76e:	370c      	adds	r7, #12
 800d770:	46bd      	mov	sp, r7
 800d772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d776:	4770      	bx	lr
 800d778:	20000d04 	.word	0x20000d04

0800d77c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800d77c:	b480      	push	{r7}
 800d77e:	b083      	sub	sp, #12
 800d780:	af00      	add	r7, sp, #0
 800d782:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	2243      	movs	r2, #67	; 0x43
 800d788:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800d78a:	4b03      	ldr	r3, [pc, #12]	; (800d798 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800d78c:	4618      	mov	r0, r3
 800d78e:	370c      	adds	r7, #12
 800d790:	46bd      	mov	sp, r7
 800d792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d796:	4770      	bx	lr
 800d798:	20000d8c 	.word	0x20000d8c

0800d79c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800d79c:	b480      	push	{r7}
 800d79e:	b083      	sub	sp, #12
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	220a      	movs	r2, #10
 800d7a8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800d7aa:	4b03      	ldr	r3, [pc, #12]	; (800d7b8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	370c      	adds	r7, #12
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b6:	4770      	bx	lr
 800d7b8:	20000cc0 	.word	0x20000cc0

0800d7bc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 800d7bc:	b480      	push	{r7}
 800d7be:	b085      	sub	sp, #20
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	6078      	str	r0, [r7, #4]
 800d7c4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800d7c6:	2302      	movs	r3, #2
 800d7c8:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800d7ca:	683b      	ldr	r3, [r7, #0]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d005      	beq.n	800d7dc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	683a      	ldr	r2, [r7, #0]
 800d7d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 800d7d8:	2300      	movs	r3, #0
 800d7da:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800d7dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7de:	4618      	mov	r0, r3
 800d7e0:	3714      	adds	r7, #20
 800d7e2:	46bd      	mov	sp, r7
 800d7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e8:	4770      	bx	lr

0800d7ea <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800d7ea:	b480      	push	{r7}
 800d7ec:	b087      	sub	sp, #28
 800d7ee:	af00      	add	r7, sp, #0
 800d7f0:	60f8      	str	r0, [r7, #12]
 800d7f2:	60b9      	str	r1, [r7, #8]
 800d7f4:	4613      	mov	r3, r2
 800d7f6:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d7fe:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800d800:	697b      	ldr	r3, [r7, #20]
 800d802:	68ba      	ldr	r2, [r7, #8]
 800d804:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d808:	88fa      	ldrh	r2, [r7, #6]
 800d80a:	697b      	ldr	r3, [r7, #20]
 800d80c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800d810:	2300      	movs	r3, #0
}
 800d812:	4618      	mov	r0, r3
 800d814:	371c      	adds	r7, #28
 800d816:	46bd      	mov	sp, r7
 800d818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d81c:	4770      	bx	lr

0800d81e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800d81e:	b480      	push	{r7}
 800d820:	b085      	sub	sp, #20
 800d822:	af00      	add	r7, sp, #0
 800d824:	6078      	str	r0, [r7, #4]
 800d826:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d82e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	683a      	ldr	r2, [r7, #0]
 800d834:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800d838:	2300      	movs	r3, #0
}
 800d83a:	4618      	mov	r0, r3
 800d83c:	3714      	adds	r7, #20
 800d83e:	46bd      	mov	sp, r7
 800d840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d844:	4770      	bx	lr

0800d846 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800d846:	b580      	push	{r7, lr}
 800d848:	b084      	sub	sp, #16
 800d84a:	af00      	add	r7, sp, #0
 800d84c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d854:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d01c      	beq.n	800d89a <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d866:	2b00      	cmp	r3, #0
 800d868:	d115      	bne.n	800d896 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	2201      	movs	r2, #1
 800d86e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800d888:	b29b      	uxth	r3, r3
 800d88a:	2181      	movs	r1, #129	; 0x81
 800d88c:	6878      	ldr	r0, [r7, #4]
 800d88e:	f004 fee0 	bl	8012652 <USBD_LL_Transmit>

      return USBD_OK;
 800d892:	2300      	movs	r3, #0
 800d894:	e002      	b.n	800d89c <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800d896:	2301      	movs	r3, #1
 800d898:	e000      	b.n	800d89c <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800d89a:	2302      	movs	r3, #2
  }
}
 800d89c:	4618      	mov	r0, r3
 800d89e:	3710      	adds	r7, #16
 800d8a0:	46bd      	mov	sp, r7
 800d8a2:	bd80      	pop	{r7, pc}

0800d8a4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b084      	sub	sp, #16
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d8b2:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d017      	beq.n	800d8ee <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	7c1b      	ldrb	r3, [r3, #16]
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d109      	bne.n	800d8da <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d8cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d8d0:	2101      	movs	r1, #1
 800d8d2:	6878      	ldr	r0, [r7, #4]
 800d8d4:	f004 fee0 	bl	8012698 <USBD_LL_PrepareReceive>
 800d8d8:	e007      	b.n	800d8ea <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d8e0:	2340      	movs	r3, #64	; 0x40
 800d8e2:	2101      	movs	r1, #1
 800d8e4:	6878      	ldr	r0, [r7, #4]
 800d8e6:	f004 fed7 	bl	8012698 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	e000      	b.n	800d8f0 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800d8ee:	2302      	movs	r3, #2
  }
}
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	3710      	adds	r7, #16
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	bd80      	pop	{r7, pc}

0800d8f8 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d8f8:	b580      	push	{r7, lr}
 800d8fa:	b084      	sub	sp, #16
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	60f8      	str	r0, [r7, #12]
 800d900:	60b9      	str	r1, [r7, #8]
 800d902:	4613      	mov	r3, r2
 800d904:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d101      	bne.n	800d910 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800d90c:	2302      	movs	r3, #2
 800d90e:	e01a      	b.n	800d946 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d916:	2b00      	cmp	r3, #0
 800d918:	d003      	beq.n	800d922 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	2200      	movs	r2, #0
 800d91e:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800d922:	68bb      	ldr	r3, [r7, #8]
 800d924:	2b00      	cmp	r3, #0
 800d926:	d003      	beq.n	800d930 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	68ba      	ldr	r2, [r7, #8]
 800d92c:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	2201      	movs	r2, #1
 800d934:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	79fa      	ldrb	r2, [r7, #7]
 800d93c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800d93e:	68f8      	ldr	r0, [r7, #12]
 800d940:	f004 fd52 	bl	80123e8 <USBD_LL_Init>

  return USBD_OK;
 800d944:	2300      	movs	r3, #0
}
 800d946:	4618      	mov	r0, r3
 800d948:	3710      	adds	r7, #16
 800d94a:	46bd      	mov	sp, r7
 800d94c:	bd80      	pop	{r7, pc}

0800d94e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d94e:	b480      	push	{r7}
 800d950:	b085      	sub	sp, #20
 800d952:	af00      	add	r7, sp, #0
 800d954:	6078      	str	r0, [r7, #4]
 800d956:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800d958:	2300      	movs	r3, #0
 800d95a:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800d95c:	683b      	ldr	r3, [r7, #0]
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d006      	beq.n	800d970 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	683a      	ldr	r2, [r7, #0]
 800d966:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 800d96a:	2300      	movs	r3, #0
 800d96c:	73fb      	strb	r3, [r7, #15]
 800d96e:	e001      	b.n	800d974 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800d970:	2302      	movs	r3, #2
 800d972:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d974:	7bfb      	ldrb	r3, [r7, #15]
}
 800d976:	4618      	mov	r0, r3
 800d978:	3714      	adds	r7, #20
 800d97a:	46bd      	mov	sp, r7
 800d97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d980:	4770      	bx	lr

0800d982 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800d982:	b580      	push	{r7, lr}
 800d984:	b082      	sub	sp, #8
 800d986:	af00      	add	r7, sp, #0
 800d988:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800d98a:	6878      	ldr	r0, [r7, #4]
 800d98c:	f004 fd78 	bl	8012480 <USBD_LL_Start>

  return USBD_OK;
 800d990:	2300      	movs	r3, #0
}
 800d992:	4618      	mov	r0, r3
 800d994:	3708      	adds	r7, #8
 800d996:	46bd      	mov	sp, r7
 800d998:	bd80      	pop	{r7, pc}

0800d99a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 800d99a:	b480      	push	{r7}
 800d99c:	b083      	sub	sp, #12
 800d99e:	af00      	add	r7, sp, #0
 800d9a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d9a2:	2300      	movs	r3, #0
}
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	370c      	adds	r7, #12
 800d9a8:	46bd      	mov	sp, r7
 800d9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ae:	4770      	bx	lr

0800d9b0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b084      	sub	sp, #16
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	6078      	str	r0, [r7, #4]
 800d9b8:	460b      	mov	r3, r1
 800d9ba:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800d9bc:	2302      	movs	r3, #2
 800d9be:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d00c      	beq.n	800d9e4 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	78fa      	ldrb	r2, [r7, #3]
 800d9d4:	4611      	mov	r1, r2
 800d9d6:	6878      	ldr	r0, [r7, #4]
 800d9d8:	4798      	blx	r3
 800d9da:	4603      	mov	r3, r0
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d101      	bne.n	800d9e4 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800d9e0:	2300      	movs	r3, #0
 800d9e2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800d9e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	3710      	adds	r7, #16
 800d9ea:	46bd      	mov	sp, r7
 800d9ec:	bd80      	pop	{r7, pc}

0800d9ee <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800d9ee:	b580      	push	{r7, lr}
 800d9f0:	b082      	sub	sp, #8
 800d9f2:	af00      	add	r7, sp, #0
 800d9f4:	6078      	str	r0, [r7, #4]
 800d9f6:	460b      	mov	r3, r1
 800d9f8:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800da00:	685b      	ldr	r3, [r3, #4]
 800da02:	78fa      	ldrb	r2, [r7, #3]
 800da04:	4611      	mov	r1, r2
 800da06:	6878      	ldr	r0, [r7, #4]
 800da08:	4798      	blx	r3
  return USBD_OK;
 800da0a:	2300      	movs	r3, #0
}
 800da0c:	4618      	mov	r0, r3
 800da0e:	3708      	adds	r7, #8
 800da10:	46bd      	mov	sp, r7
 800da12:	bd80      	pop	{r7, pc}

0800da14 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800da14:	b580      	push	{r7, lr}
 800da16:	b082      	sub	sp, #8
 800da18:	af00      	add	r7, sp, #0
 800da1a:	6078      	str	r0, [r7, #4]
 800da1c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800da24:	6839      	ldr	r1, [r7, #0]
 800da26:	4618      	mov	r0, r3
 800da28:	f000 fe94 	bl	800e754 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	2201      	movs	r2, #1
 800da30:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 800da3a:	461a      	mov	r2, r3
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800da48:	f003 031f 	and.w	r3, r3, #31
 800da4c:	2b01      	cmp	r3, #1
 800da4e:	d00c      	beq.n	800da6a <USBD_LL_SetupStage+0x56>
 800da50:	2b01      	cmp	r3, #1
 800da52:	d302      	bcc.n	800da5a <USBD_LL_SetupStage+0x46>
 800da54:	2b02      	cmp	r3, #2
 800da56:	d010      	beq.n	800da7a <USBD_LL_SetupStage+0x66>
 800da58:	e017      	b.n	800da8a <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800da60:	4619      	mov	r1, r3
 800da62:	6878      	ldr	r0, [r7, #4]
 800da64:	f000 fa04 	bl	800de70 <USBD_StdDevReq>
    break;
 800da68:	e01a      	b.n	800daa0 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800da70:	4619      	mov	r1, r3
 800da72:	6878      	ldr	r0, [r7, #4]
 800da74:	f000 fa66 	bl	800df44 <USBD_StdItfReq>
    break;
 800da78:	e012      	b.n	800daa0 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800da80:	4619      	mov	r1, r3
 800da82:	6878      	ldr	r0, [r7, #4]
 800da84:	f000 faa4 	bl	800dfd0 <USBD_StdEPReq>
    break;
 800da88:	e00a      	b.n	800daa0 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800da90:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800da94:	b2db      	uxtb	r3, r3
 800da96:	4619      	mov	r1, r3
 800da98:	6878      	ldr	r0, [r7, #4]
 800da9a:	f004 fd51 	bl	8012540 <USBD_LL_StallEP>
    break;
 800da9e:	bf00      	nop
  }

  return USBD_OK;
 800daa0:	2300      	movs	r3, #0
}
 800daa2:	4618      	mov	r0, r3
 800daa4:	3708      	adds	r7, #8
 800daa6:	46bd      	mov	sp, r7
 800daa8:	bd80      	pop	{r7, pc}

0800daaa <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800daaa:	b580      	push	{r7, lr}
 800daac:	b086      	sub	sp, #24
 800daae:	af00      	add	r7, sp, #0
 800dab0:	60f8      	str	r0, [r7, #12]
 800dab2:	460b      	mov	r3, r1
 800dab4:	607a      	str	r2, [r7, #4]
 800dab6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800dab8:	7afb      	ldrb	r3, [r7, #11]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d14b      	bne.n	800db56 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800dac4:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800dacc:	2b03      	cmp	r3, #3
 800dace:	d134      	bne.n	800db3a <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800dad0:	697b      	ldr	r3, [r7, #20]
 800dad2:	68da      	ldr	r2, [r3, #12]
 800dad4:	697b      	ldr	r3, [r7, #20]
 800dad6:	691b      	ldr	r3, [r3, #16]
 800dad8:	429a      	cmp	r2, r3
 800dada:	d919      	bls.n	800db10 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 800dadc:	697b      	ldr	r3, [r7, #20]
 800dade:	68da      	ldr	r2, [r3, #12]
 800dae0:	697b      	ldr	r3, [r7, #20]
 800dae2:	691b      	ldr	r3, [r3, #16]
 800dae4:	1ad2      	subs	r2, r2, r3
 800dae6:	697b      	ldr	r3, [r7, #20]
 800dae8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800daea:	697b      	ldr	r3, [r7, #20]
 800daec:	68da      	ldr	r2, [r3, #12]
 800daee:	697b      	ldr	r3, [r7, #20]
 800daf0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800daf2:	429a      	cmp	r2, r3
 800daf4:	d203      	bcs.n	800dafe <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800daf6:	697b      	ldr	r3, [r7, #20]
 800daf8:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 800dafa:	b29b      	uxth	r3, r3
 800dafc:	e002      	b.n	800db04 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800dafe:	697b      	ldr	r3, [r7, #20]
 800db00:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800db02:	b29b      	uxth	r3, r3
 800db04:	461a      	mov	r2, r3
 800db06:	6879      	ldr	r1, [r7, #4]
 800db08:	68f8      	ldr	r0, [r7, #12]
 800db0a:	f000 ff17 	bl	800e93c <USBD_CtlContinueRx>
 800db0e:	e038      	b.n	800db82 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800db16:	691b      	ldr	r3, [r3, #16]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d00a      	beq.n	800db32 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800db22:	2b03      	cmp	r3, #3
 800db24:	d105      	bne.n	800db32 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800db2c:	691b      	ldr	r3, [r3, #16]
 800db2e:	68f8      	ldr	r0, [r7, #12]
 800db30:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800db32:	68f8      	ldr	r0, [r7, #12]
 800db34:	f000 ff14 	bl	800e960 <USBD_CtlSendStatus>
 800db38:	e023      	b.n	800db82 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800db40:	2b05      	cmp	r3, #5
 800db42:	d11e      	bne.n	800db82 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	2200      	movs	r2, #0
 800db48:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 800db4c:	2100      	movs	r1, #0
 800db4e:	68f8      	ldr	r0, [r7, #12]
 800db50:	f004 fcf6 	bl	8012540 <USBD_LL_StallEP>
 800db54:	e015      	b.n	800db82 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800db5c:	699b      	ldr	r3, [r3, #24]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d00d      	beq.n	800db7e <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 800db68:	2b03      	cmp	r3, #3
 800db6a:	d108      	bne.n	800db7e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800db72:	699b      	ldr	r3, [r3, #24]
 800db74:	7afa      	ldrb	r2, [r7, #11]
 800db76:	4611      	mov	r1, r2
 800db78:	68f8      	ldr	r0, [r7, #12]
 800db7a:	4798      	blx	r3
 800db7c:	e001      	b.n	800db82 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800db7e:	2302      	movs	r3, #2
 800db80:	e000      	b.n	800db84 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800db82:	2300      	movs	r3, #0
}
 800db84:	4618      	mov	r0, r3
 800db86:	3718      	adds	r7, #24
 800db88:	46bd      	mov	sp, r7
 800db8a:	bd80      	pop	{r7, pc}

0800db8c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800db8c:	b580      	push	{r7, lr}
 800db8e:	b086      	sub	sp, #24
 800db90:	af00      	add	r7, sp, #0
 800db92:	60f8      	str	r0, [r7, #12]
 800db94:	460b      	mov	r3, r1
 800db96:	607a      	str	r2, [r7, #4]
 800db98:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800db9a:	7afb      	ldrb	r3, [r7, #11]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d17f      	bne.n	800dca0 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	3314      	adds	r3, #20
 800dba4:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800dbac:	2b02      	cmp	r3, #2
 800dbae:	d15c      	bne.n	800dc6a <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800dbb0:	697b      	ldr	r3, [r7, #20]
 800dbb2:	68da      	ldr	r2, [r3, #12]
 800dbb4:	697b      	ldr	r3, [r7, #20]
 800dbb6:	691b      	ldr	r3, [r3, #16]
 800dbb8:	429a      	cmp	r2, r3
 800dbba:	d915      	bls.n	800dbe8 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800dbbc:	697b      	ldr	r3, [r7, #20]
 800dbbe:	68da      	ldr	r2, [r3, #12]
 800dbc0:	697b      	ldr	r3, [r7, #20]
 800dbc2:	691b      	ldr	r3, [r3, #16]
 800dbc4:	1ad2      	subs	r2, r2, r3
 800dbc6:	697b      	ldr	r3, [r7, #20]
 800dbc8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800dbca:	697b      	ldr	r3, [r7, #20]
 800dbcc:	68db      	ldr	r3, [r3, #12]
 800dbce:	b29b      	uxth	r3, r3
 800dbd0:	461a      	mov	r2, r3
 800dbd2:	6879      	ldr	r1, [r7, #4]
 800dbd4:	68f8      	ldr	r0, [r7, #12]
 800dbd6:	f000 fe81 	bl	800e8dc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800dbda:	2300      	movs	r3, #0
 800dbdc:	2200      	movs	r2, #0
 800dbde:	2100      	movs	r1, #0
 800dbe0:	68f8      	ldr	r0, [r7, #12]
 800dbe2:	f004 fd59 	bl	8012698 <USBD_LL_PrepareReceive>
 800dbe6:	e04e      	b.n	800dc86 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800dbe8:	697b      	ldr	r3, [r7, #20]
 800dbea:	689b      	ldr	r3, [r3, #8]
 800dbec:	697a      	ldr	r2, [r7, #20]
 800dbee:	6912      	ldr	r2, [r2, #16]
 800dbf0:	fbb3 f1f2 	udiv	r1, r3, r2
 800dbf4:	fb02 f201 	mul.w	r2, r2, r1
 800dbf8:	1a9b      	subs	r3, r3, r2
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d11c      	bne.n	800dc38 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800dbfe:	697b      	ldr	r3, [r7, #20]
 800dc00:	689a      	ldr	r2, [r3, #8]
 800dc02:	697b      	ldr	r3, [r7, #20]
 800dc04:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 800dc06:	429a      	cmp	r2, r3
 800dc08:	d316      	bcc.n	800dc38 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 800dc0a:	697b      	ldr	r3, [r7, #20]
 800dc0c:	689a      	ldr	r2, [r3, #8]
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800dc14:	429a      	cmp	r2, r3
 800dc16:	d20f      	bcs.n	800dc38 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800dc18:	2200      	movs	r2, #0
 800dc1a:	2100      	movs	r1, #0
 800dc1c:	68f8      	ldr	r0, [r7, #12]
 800dc1e:	f000 fe5d 	bl	800e8dc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	2200      	movs	r2, #0
 800dc26:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	2100      	movs	r1, #0
 800dc30:	68f8      	ldr	r0, [r7, #12]
 800dc32:	f004 fd31 	bl	8012698 <USBD_LL_PrepareReceive>
 800dc36:	e026      	b.n	800dc86 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800dc3e:	68db      	ldr	r3, [r3, #12]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d00a      	beq.n	800dc5a <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800dc4a:	2b03      	cmp	r3, #3
 800dc4c:	d105      	bne.n	800dc5a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800dc54:	68db      	ldr	r3, [r3, #12]
 800dc56:	68f8      	ldr	r0, [r7, #12]
 800dc58:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800dc5a:	2180      	movs	r1, #128	; 0x80
 800dc5c:	68f8      	ldr	r0, [r7, #12]
 800dc5e:	f004 fc6f 	bl	8012540 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800dc62:	68f8      	ldr	r0, [r7, #12]
 800dc64:	f000 fe8f 	bl	800e986 <USBD_CtlReceiveStatus>
 800dc68:	e00d      	b.n	800dc86 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800dc70:	2b04      	cmp	r3, #4
 800dc72:	d004      	beq.n	800dc7e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d103      	bne.n	800dc86 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800dc7e:	2180      	movs	r1, #128	; 0x80
 800dc80:	68f8      	ldr	r0, [r7, #12]
 800dc82:	f004 fc5d 	bl	8012540 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 800dc8c:	2b01      	cmp	r3, #1
 800dc8e:	d11d      	bne.n	800dccc <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800dc90:	68f8      	ldr	r0, [r7, #12]
 800dc92:	f7ff fe82 	bl	800d99a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	2200      	movs	r2, #0
 800dc9a:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 800dc9e:	e015      	b.n	800dccc <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800dca6:	695b      	ldr	r3, [r3, #20]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d00d      	beq.n	800dcc8 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800dcb2:	2b03      	cmp	r3, #3
 800dcb4:	d108      	bne.n	800dcc8 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800dcbc:	695b      	ldr	r3, [r3, #20]
 800dcbe:	7afa      	ldrb	r2, [r7, #11]
 800dcc0:	4611      	mov	r1, r2
 800dcc2:	68f8      	ldr	r0, [r7, #12]
 800dcc4:	4798      	blx	r3
 800dcc6:	e001      	b.n	800dccc <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800dcc8:	2302      	movs	r3, #2
 800dcca:	e000      	b.n	800dcce <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800dccc:	2300      	movs	r3, #0
}
 800dcce:	4618      	mov	r0, r3
 800dcd0:	3718      	adds	r7, #24
 800dcd2:	46bd      	mov	sp, r7
 800dcd4:	bd80      	pop	{r7, pc}

0800dcd6 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800dcd6:	b580      	push	{r7, lr}
 800dcd8:	b082      	sub	sp, #8
 800dcda:	af00      	add	r7, sp, #0
 800dcdc:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dcde:	2340      	movs	r3, #64	; 0x40
 800dce0:	2200      	movs	r2, #0
 800dce2:	2100      	movs	r1, #0
 800dce4:	6878      	ldr	r0, [r7, #4]
 800dce6:	f004 fbe6 	bl	80124b6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	2201      	movs	r2, #1
 800dcee:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	2240      	movs	r2, #64	; 0x40
 800dcf6:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dcfa:	2340      	movs	r3, #64	; 0x40
 800dcfc:	2200      	movs	r2, #0
 800dcfe:	2180      	movs	r1, #128	; 0x80
 800dd00:	6878      	ldr	r0, [r7, #4]
 800dd02:	f004 fbd8 	bl	80124b6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	2201      	movs	r2, #1
 800dd0a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	2240      	movs	r2, #64	; 0x40
 800dd10:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	2201      	movs	r2, #1
 800dd16:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	2200      	movs	r2, #0
 800dd1e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	2200      	movs	r2, #0
 800dd26:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	2200      	movs	r2, #0
 800dd2c:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d009      	beq.n	800dd4e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800dd40:	685b      	ldr	r3, [r3, #4]
 800dd42:	687a      	ldr	r2, [r7, #4]
 800dd44:	6852      	ldr	r2, [r2, #4]
 800dd46:	b2d2      	uxtb	r2, r2
 800dd48:	4611      	mov	r1, r2
 800dd4a:	6878      	ldr	r0, [r7, #4]
 800dd4c:	4798      	blx	r3
  }

  return USBD_OK;
 800dd4e:	2300      	movs	r3, #0
}
 800dd50:	4618      	mov	r0, r3
 800dd52:	3708      	adds	r7, #8
 800dd54:	46bd      	mov	sp, r7
 800dd56:	bd80      	pop	{r7, pc}

0800dd58 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800dd58:	b480      	push	{r7}
 800dd5a:	b083      	sub	sp, #12
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	6078      	str	r0, [r7, #4]
 800dd60:	460b      	mov	r3, r1
 800dd62:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	78fa      	ldrb	r2, [r7, #3]
 800dd68:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800dd6a:	2300      	movs	r3, #0
}
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	370c      	adds	r7, #12
 800dd70:	46bd      	mov	sp, r7
 800dd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd76:	4770      	bx	lr

0800dd78 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800dd78:	b480      	push	{r7}
 800dd7a:	b083      	sub	sp, #12
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	2204      	movs	r2, #4
 800dd90:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800dd94:	2300      	movs	r3, #0
}
 800dd96:	4618      	mov	r0, r3
 800dd98:	370c      	adds	r7, #12
 800dd9a:	46bd      	mov	sp, r7
 800dd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda0:	4770      	bx	lr

0800dda2 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800dda2:	b480      	push	{r7}
 800dda4:	b083      	sub	sp, #12
 800dda6:	af00      	add	r7, sp, #0
 800dda8:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800ddb6:	2300      	movs	r3, #0
}
 800ddb8:	4618      	mov	r0, r3
 800ddba:	370c      	adds	r7, #12
 800ddbc:	46bd      	mov	sp, r7
 800ddbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc2:	4770      	bx	lr

0800ddc4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	b082      	sub	sp, #8
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ddd2:	2b03      	cmp	r3, #3
 800ddd4:	d10b      	bne.n	800ddee <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800dddc:	69db      	ldr	r3, [r3, #28]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d005      	beq.n	800ddee <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800dde8:	69db      	ldr	r3, [r3, #28]
 800ddea:	6878      	ldr	r0, [r7, #4]
 800ddec:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800ddee:	2300      	movs	r3, #0
}
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	3708      	adds	r7, #8
 800ddf4:	46bd      	mov	sp, r7
 800ddf6:	bd80      	pop	{r7, pc}

0800ddf8 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800ddf8:	b480      	push	{r7}
 800ddfa:	b083      	sub	sp, #12
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	6078      	str	r0, [r7, #4]
 800de00:	460b      	mov	r3, r1
 800de02:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800de04:	2300      	movs	r3, #0
}
 800de06:	4618      	mov	r0, r3
 800de08:	370c      	adds	r7, #12
 800de0a:	46bd      	mov	sp, r7
 800de0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de10:	4770      	bx	lr

0800de12 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800de12:	b480      	push	{r7}
 800de14:	b083      	sub	sp, #12
 800de16:	af00      	add	r7, sp, #0
 800de18:	6078      	str	r0, [r7, #4]
 800de1a:	460b      	mov	r3, r1
 800de1c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800de1e:	2300      	movs	r3, #0
}
 800de20:	4618      	mov	r0, r3
 800de22:	370c      	adds	r7, #12
 800de24:	46bd      	mov	sp, r7
 800de26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de2a:	4770      	bx	lr

0800de2c <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 800de2c:	b480      	push	{r7}
 800de2e:	b083      	sub	sp, #12
 800de30:	af00      	add	r7, sp, #0
 800de32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800de34:	2300      	movs	r3, #0
}
 800de36:	4618      	mov	r0, r3
 800de38:	370c      	adds	r7, #12
 800de3a:	46bd      	mov	sp, r7
 800de3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de40:	4770      	bx	lr

0800de42 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 800de42:	b580      	push	{r7, lr}
 800de44:	b082      	sub	sp, #8
 800de46:	af00      	add	r7, sp, #0
 800de48:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	2201      	movs	r2, #1
 800de4e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800de58:	685b      	ldr	r3, [r3, #4]
 800de5a:	687a      	ldr	r2, [r7, #4]
 800de5c:	6852      	ldr	r2, [r2, #4]
 800de5e:	b2d2      	uxtb	r2, r2
 800de60:	4611      	mov	r1, r2
 800de62:	6878      	ldr	r0, [r7, #4]
 800de64:	4798      	blx	r3

  return USBD_OK;
 800de66:	2300      	movs	r3, #0
}
 800de68:	4618      	mov	r0, r3
 800de6a:	3708      	adds	r7, #8
 800de6c:	46bd      	mov	sp, r7
 800de6e:	bd80      	pop	{r7, pc}

0800de70 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800de70:	b580      	push	{r7, lr}
 800de72:	b084      	sub	sp, #16
 800de74:	af00      	add	r7, sp, #0
 800de76:	6078      	str	r0, [r7, #4]
 800de78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800de7a:	2300      	movs	r3, #0
 800de7c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800de7e:	683b      	ldr	r3, [r7, #0]
 800de80:	781b      	ldrb	r3, [r3, #0]
 800de82:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800de86:	2b20      	cmp	r3, #32
 800de88:	d004      	beq.n	800de94 <USBD_StdDevReq+0x24>
 800de8a:	2b40      	cmp	r3, #64	; 0x40
 800de8c:	d002      	beq.n	800de94 <USBD_StdDevReq+0x24>
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d008      	beq.n	800dea4 <USBD_StdDevReq+0x34>
 800de92:	e04c      	b.n	800df2e <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800de9a:	689b      	ldr	r3, [r3, #8]
 800de9c:	6839      	ldr	r1, [r7, #0]
 800de9e:	6878      	ldr	r0, [r7, #4]
 800dea0:	4798      	blx	r3
    break;
 800dea2:	e049      	b.n	800df38 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 800dea4:	683b      	ldr	r3, [r7, #0]
 800dea6:	785b      	ldrb	r3, [r3, #1]
 800dea8:	2b09      	cmp	r3, #9
 800deaa:	d83a      	bhi.n	800df22 <USBD_StdDevReq+0xb2>
 800deac:	a201      	add	r2, pc, #4	; (adr r2, 800deb4 <USBD_StdDevReq+0x44>)
 800deae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800deb2:	bf00      	nop
 800deb4:	0800df05 	.word	0x0800df05
 800deb8:	0800df19 	.word	0x0800df19
 800debc:	0800df23 	.word	0x0800df23
 800dec0:	0800df0f 	.word	0x0800df0f
 800dec4:	0800df23 	.word	0x0800df23
 800dec8:	0800dee7 	.word	0x0800dee7
 800decc:	0800dedd 	.word	0x0800dedd
 800ded0:	0800df23 	.word	0x0800df23
 800ded4:	0800defb 	.word	0x0800defb
 800ded8:	0800def1 	.word	0x0800def1
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 800dedc:	6839      	ldr	r1, [r7, #0]
 800dede:	6878      	ldr	r0, [r7, #4]
 800dee0:	f000 f9d2 	bl	800e288 <USBD_GetDescriptor>
      break;
 800dee4:	e022      	b.n	800df2c <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800dee6:	6839      	ldr	r1, [r7, #0]
 800dee8:	6878      	ldr	r0, [r7, #4]
 800deea:	f000 fac7 	bl	800e47c <USBD_SetAddress>
      break;
 800deee:	e01d      	b.n	800df2c <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800def0:	6839      	ldr	r1, [r7, #0]
 800def2:	6878      	ldr	r0, [r7, #4]
 800def4:	f000 fb04 	bl	800e500 <USBD_SetConfig>
      break;
 800def8:	e018      	b.n	800df2c <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800defa:	6839      	ldr	r1, [r7, #0]
 800defc:	6878      	ldr	r0, [r7, #4]
 800defe:	f000 fb8d 	bl	800e61c <USBD_GetConfig>
      break;
 800df02:	e013      	b.n	800df2c <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 800df04:	6839      	ldr	r1, [r7, #0]
 800df06:	6878      	ldr	r0, [r7, #4]
 800df08:	f000 fbbc 	bl	800e684 <USBD_GetStatus>
      break;
 800df0c:	e00e      	b.n	800df2c <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800df0e:	6839      	ldr	r1, [r7, #0]
 800df10:	6878      	ldr	r0, [r7, #4]
 800df12:	f000 fbea 	bl	800e6ea <USBD_SetFeature>
      break;
 800df16:	e009      	b.n	800df2c <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 800df18:	6839      	ldr	r1, [r7, #0]
 800df1a:	6878      	ldr	r0, [r7, #4]
 800df1c:	f000 fbf9 	bl	800e712 <USBD_ClrFeature>
      break;
 800df20:	e004      	b.n	800df2c <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800df22:	6839      	ldr	r1, [r7, #0]
 800df24:	6878      	ldr	r0, [r7, #4]
 800df26:	f000 fc52 	bl	800e7ce <USBD_CtlError>
      break;
 800df2a:	bf00      	nop
    }
    break;
 800df2c:	e004      	b.n	800df38 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800df2e:	6839      	ldr	r1, [r7, #0]
 800df30:	6878      	ldr	r0, [r7, #4]
 800df32:	f000 fc4c 	bl	800e7ce <USBD_CtlError>
    break;
 800df36:	bf00      	nop
  }

  return ret;
 800df38:	7bfb      	ldrb	r3, [r7, #15]
}
 800df3a:	4618      	mov	r0, r3
 800df3c:	3710      	adds	r7, #16
 800df3e:	46bd      	mov	sp, r7
 800df40:	bd80      	pop	{r7, pc}
 800df42:	bf00      	nop

0800df44 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800df44:	b580      	push	{r7, lr}
 800df46:	b084      	sub	sp, #16
 800df48:	af00      	add	r7, sp, #0
 800df4a:	6078      	str	r0, [r7, #4]
 800df4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800df4e:	2300      	movs	r3, #0
 800df50:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800df52:	683b      	ldr	r3, [r7, #0]
 800df54:	781b      	ldrb	r3, [r3, #0]
 800df56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800df5a:	2b20      	cmp	r3, #32
 800df5c:	d003      	beq.n	800df66 <USBD_StdItfReq+0x22>
 800df5e:	2b40      	cmp	r3, #64	; 0x40
 800df60:	d001      	beq.n	800df66 <USBD_StdItfReq+0x22>
 800df62:	2b00      	cmp	r3, #0
 800df64:	d12a      	bne.n	800dfbc <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800df6c:	3b01      	subs	r3, #1
 800df6e:	2b02      	cmp	r3, #2
 800df70:	d81d      	bhi.n	800dfae <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800df72:	683b      	ldr	r3, [r7, #0]
 800df74:	889b      	ldrh	r3, [r3, #4]
 800df76:	b2db      	uxtb	r3, r3
 800df78:	2b01      	cmp	r3, #1
 800df7a:	d813      	bhi.n	800dfa4 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800df82:	689b      	ldr	r3, [r3, #8]
 800df84:	6839      	ldr	r1, [r7, #0]
 800df86:	6878      	ldr	r0, [r7, #4]
 800df88:	4798      	blx	r3
 800df8a:	4603      	mov	r3, r0
 800df8c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800df8e:	683b      	ldr	r3, [r7, #0]
 800df90:	88db      	ldrh	r3, [r3, #6]
 800df92:	2b00      	cmp	r3, #0
 800df94:	d110      	bne.n	800dfb8 <USBD_StdItfReq+0x74>
 800df96:	7bfb      	ldrb	r3, [r7, #15]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d10d      	bne.n	800dfb8 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 800df9c:	6878      	ldr	r0, [r7, #4]
 800df9e:	f000 fcdf 	bl	800e960 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800dfa2:	e009      	b.n	800dfb8 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800dfa4:	6839      	ldr	r1, [r7, #0]
 800dfa6:	6878      	ldr	r0, [r7, #4]
 800dfa8:	f000 fc11 	bl	800e7ce <USBD_CtlError>
      break;
 800dfac:	e004      	b.n	800dfb8 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800dfae:	6839      	ldr	r1, [r7, #0]
 800dfb0:	6878      	ldr	r0, [r7, #4]
 800dfb2:	f000 fc0c 	bl	800e7ce <USBD_CtlError>
      break;
 800dfb6:	e000      	b.n	800dfba <USBD_StdItfReq+0x76>
      break;
 800dfb8:	bf00      	nop
    }
    break;
 800dfba:	e004      	b.n	800dfc6 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800dfbc:	6839      	ldr	r1, [r7, #0]
 800dfbe:	6878      	ldr	r0, [r7, #4]
 800dfc0:	f000 fc05 	bl	800e7ce <USBD_CtlError>
    break;
 800dfc4:	bf00      	nop
  }

  return USBD_OK;
 800dfc6:	2300      	movs	r3, #0
}
 800dfc8:	4618      	mov	r0, r3
 800dfca:	3710      	adds	r7, #16
 800dfcc:	46bd      	mov	sp, r7
 800dfce:	bd80      	pop	{r7, pc}

0800dfd0 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	b084      	sub	sp, #16
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	6078      	str	r0, [r7, #4]
 800dfd8:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800dfda:	2300      	movs	r3, #0
 800dfdc:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800dfde:	683b      	ldr	r3, [r7, #0]
 800dfe0:	889b      	ldrh	r3, [r3, #4]
 800dfe2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dfe4:	683b      	ldr	r3, [r7, #0]
 800dfe6:	781b      	ldrb	r3, [r3, #0]
 800dfe8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dfec:	2b20      	cmp	r3, #32
 800dfee:	d004      	beq.n	800dffa <USBD_StdEPReq+0x2a>
 800dff0:	2b40      	cmp	r3, #64	; 0x40
 800dff2:	d002      	beq.n	800dffa <USBD_StdEPReq+0x2a>
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d008      	beq.n	800e00a <USBD_StdEPReq+0x3a>
 800dff8:	e13b      	b.n	800e272 <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e000:	689b      	ldr	r3, [r3, #8]
 800e002:	6839      	ldr	r1, [r7, #0]
 800e004:	6878      	ldr	r0, [r7, #4]
 800e006:	4798      	blx	r3
    break;
 800e008:	e138      	b.n	800e27c <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 800e00a:	683b      	ldr	r3, [r7, #0]
 800e00c:	781b      	ldrb	r3, [r3, #0]
 800e00e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e012:	2b20      	cmp	r3, #32
 800e014:	d10a      	bne.n	800e02c <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e01c:	689b      	ldr	r3, [r3, #8]
 800e01e:	6839      	ldr	r1, [r7, #0]
 800e020:	6878      	ldr	r0, [r7, #4]
 800e022:	4798      	blx	r3
 800e024:	4603      	mov	r3, r0
 800e026:	73fb      	strb	r3, [r7, #15]

      return ret;
 800e028:	7bfb      	ldrb	r3, [r7, #15]
 800e02a:	e128      	b.n	800e27e <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 800e02c:	683b      	ldr	r3, [r7, #0]
 800e02e:	785b      	ldrb	r3, [r3, #1]
 800e030:	2b01      	cmp	r3, #1
 800e032:	d03e      	beq.n	800e0b2 <USBD_StdEPReq+0xe2>
 800e034:	2b03      	cmp	r3, #3
 800e036:	d002      	beq.n	800e03e <USBD_StdEPReq+0x6e>
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d070      	beq.n	800e11e <USBD_StdEPReq+0x14e>
 800e03c:	e113      	b.n	800e266 <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800e044:	2b02      	cmp	r3, #2
 800e046:	d002      	beq.n	800e04e <USBD_StdEPReq+0x7e>
 800e048:	2b03      	cmp	r3, #3
 800e04a:	d015      	beq.n	800e078 <USBD_StdEPReq+0xa8>
 800e04c:	e02b      	b.n	800e0a6 <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e04e:	7bbb      	ldrb	r3, [r7, #14]
 800e050:	2b00      	cmp	r3, #0
 800e052:	d00c      	beq.n	800e06e <USBD_StdEPReq+0x9e>
 800e054:	7bbb      	ldrb	r3, [r7, #14]
 800e056:	2b80      	cmp	r3, #128	; 0x80
 800e058:	d009      	beq.n	800e06e <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800e05a:	7bbb      	ldrb	r3, [r7, #14]
 800e05c:	4619      	mov	r1, r3
 800e05e:	6878      	ldr	r0, [r7, #4]
 800e060:	f004 fa6e 	bl	8012540 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800e064:	2180      	movs	r1, #128	; 0x80
 800e066:	6878      	ldr	r0, [r7, #4]
 800e068:	f004 fa6a 	bl	8012540 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800e06c:	e020      	b.n	800e0b0 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 800e06e:	6839      	ldr	r1, [r7, #0]
 800e070:	6878      	ldr	r0, [r7, #4]
 800e072:	f000 fbac 	bl	800e7ce <USBD_CtlError>
        break;
 800e076:	e01b      	b.n	800e0b0 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800e078:	683b      	ldr	r3, [r7, #0]
 800e07a:	885b      	ldrh	r3, [r3, #2]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d10e      	bne.n	800e09e <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e080:	7bbb      	ldrb	r3, [r7, #14]
 800e082:	2b00      	cmp	r3, #0
 800e084:	d00b      	beq.n	800e09e <USBD_StdEPReq+0xce>
 800e086:	7bbb      	ldrb	r3, [r7, #14]
 800e088:	2b80      	cmp	r3, #128	; 0x80
 800e08a:	d008      	beq.n	800e09e <USBD_StdEPReq+0xce>
 800e08c:	683b      	ldr	r3, [r7, #0]
 800e08e:	88db      	ldrh	r3, [r3, #6]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d104      	bne.n	800e09e <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 800e094:	7bbb      	ldrb	r3, [r7, #14]
 800e096:	4619      	mov	r1, r3
 800e098:	6878      	ldr	r0, [r7, #4]
 800e09a:	f004 fa51 	bl	8012540 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800e09e:	6878      	ldr	r0, [r7, #4]
 800e0a0:	f000 fc5e 	bl	800e960 <USBD_CtlSendStatus>

        break;
 800e0a4:	e004      	b.n	800e0b0 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 800e0a6:	6839      	ldr	r1, [r7, #0]
 800e0a8:	6878      	ldr	r0, [r7, #4]
 800e0aa:	f000 fb90 	bl	800e7ce <USBD_CtlError>
        break;
 800e0ae:	bf00      	nop
      }
      break;
 800e0b0:	e0de      	b.n	800e270 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800e0b8:	2b02      	cmp	r3, #2
 800e0ba:	d002      	beq.n	800e0c2 <USBD_StdEPReq+0xf2>
 800e0bc:	2b03      	cmp	r3, #3
 800e0be:	d015      	beq.n	800e0ec <USBD_StdEPReq+0x11c>
 800e0c0:	e026      	b.n	800e110 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e0c2:	7bbb      	ldrb	r3, [r7, #14]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d00c      	beq.n	800e0e2 <USBD_StdEPReq+0x112>
 800e0c8:	7bbb      	ldrb	r3, [r7, #14]
 800e0ca:	2b80      	cmp	r3, #128	; 0x80
 800e0cc:	d009      	beq.n	800e0e2 <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800e0ce:	7bbb      	ldrb	r3, [r7, #14]
 800e0d0:	4619      	mov	r1, r3
 800e0d2:	6878      	ldr	r0, [r7, #4]
 800e0d4:	f004 fa34 	bl	8012540 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800e0d8:	2180      	movs	r1, #128	; 0x80
 800e0da:	6878      	ldr	r0, [r7, #4]
 800e0dc:	f004 fa30 	bl	8012540 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800e0e0:	e01c      	b.n	800e11c <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 800e0e2:	6839      	ldr	r1, [r7, #0]
 800e0e4:	6878      	ldr	r0, [r7, #4]
 800e0e6:	f000 fb72 	bl	800e7ce <USBD_CtlError>
        break;
 800e0ea:	e017      	b.n	800e11c <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800e0ec:	683b      	ldr	r3, [r7, #0]
 800e0ee:	885b      	ldrh	r3, [r3, #2]
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d112      	bne.n	800e11a <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800e0f4:	7bbb      	ldrb	r3, [r7, #14]
 800e0f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d004      	beq.n	800e108 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800e0fe:	7bbb      	ldrb	r3, [r7, #14]
 800e100:	4619      	mov	r1, r3
 800e102:	6878      	ldr	r0, [r7, #4]
 800e104:	f004 fa3b 	bl	801257e <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 800e108:	6878      	ldr	r0, [r7, #4]
 800e10a:	f000 fc29 	bl	800e960 <USBD_CtlSendStatus>
        }
        break;
 800e10e:	e004      	b.n	800e11a <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 800e110:	6839      	ldr	r1, [r7, #0]
 800e112:	6878      	ldr	r0, [r7, #4]
 800e114:	f000 fb5b 	bl	800e7ce <USBD_CtlError>
        break;
 800e118:	e000      	b.n	800e11c <USBD_StdEPReq+0x14c>
        break;
 800e11a:	bf00      	nop
      }
      break;
 800e11c:	e0a8      	b.n	800e270 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800e124:	2b02      	cmp	r3, #2
 800e126:	d002      	beq.n	800e12e <USBD_StdEPReq+0x15e>
 800e128:	2b03      	cmp	r3, #3
 800e12a:	d031      	beq.n	800e190 <USBD_StdEPReq+0x1c0>
 800e12c:	e095      	b.n	800e25a <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e12e:	7bbb      	ldrb	r3, [r7, #14]
 800e130:	2b00      	cmp	r3, #0
 800e132:	d007      	beq.n	800e144 <USBD_StdEPReq+0x174>
 800e134:	7bbb      	ldrb	r3, [r7, #14]
 800e136:	2b80      	cmp	r3, #128	; 0x80
 800e138:	d004      	beq.n	800e144 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 800e13a:	6839      	ldr	r1, [r7, #0]
 800e13c:	6878      	ldr	r0, [r7, #4]
 800e13e:	f000 fb46 	bl	800e7ce <USBD_CtlError>
          break;
 800e142:	e08f      	b.n	800e264 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800e144:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	da0b      	bge.n	800e164 <USBD_StdEPReq+0x194>
 800e14c:	7bbb      	ldrb	r3, [r7, #14]
 800e14e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e152:	4613      	mov	r3, r2
 800e154:	009b      	lsls	r3, r3, #2
 800e156:	4413      	add	r3, r2
 800e158:	009b      	lsls	r3, r3, #2
 800e15a:	3310      	adds	r3, #16
 800e15c:	687a      	ldr	r2, [r7, #4]
 800e15e:	4413      	add	r3, r2
 800e160:	3304      	adds	r3, #4
 800e162:	e00a      	b.n	800e17a <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 800e164:	7bbb      	ldrb	r3, [r7, #14]
 800e166:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800e16a:	4613      	mov	r3, r2
 800e16c:	009b      	lsls	r3, r3, #2
 800e16e:	4413      	add	r3, r2
 800e170:	009b      	lsls	r3, r3, #2
 800e172:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800e176:	687a      	ldr	r2, [r7, #4]
 800e178:	4413      	add	r3, r2
 800e17a:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 800e17c:	68bb      	ldr	r3, [r7, #8]
 800e17e:	2200      	movs	r2, #0
 800e180:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800e182:	68bb      	ldr	r3, [r7, #8]
 800e184:	2202      	movs	r2, #2
 800e186:	4619      	mov	r1, r3
 800e188:	6878      	ldr	r0, [r7, #4]
 800e18a:	f000 fb8b 	bl	800e8a4 <USBD_CtlSendData>
          break;
 800e18e:	e069      	b.n	800e264 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800e190:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e194:	2b00      	cmp	r3, #0
 800e196:	da11      	bge.n	800e1bc <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e198:	7bbb      	ldrb	r3, [r7, #14]
 800e19a:	f003 020f 	and.w	r2, r3, #15
 800e19e:	6879      	ldr	r1, [r7, #4]
 800e1a0:	4613      	mov	r3, r2
 800e1a2:	009b      	lsls	r3, r3, #2
 800e1a4:	4413      	add	r3, r2
 800e1a6:	009b      	lsls	r3, r3, #2
 800e1a8:	440b      	add	r3, r1
 800e1aa:	3318      	adds	r3, #24
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d117      	bne.n	800e1e2 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800e1b2:	6839      	ldr	r1, [r7, #0]
 800e1b4:	6878      	ldr	r0, [r7, #4]
 800e1b6:	f000 fb0a 	bl	800e7ce <USBD_CtlError>
            break;
 800e1ba:	e053      	b.n	800e264 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e1bc:	7bbb      	ldrb	r3, [r7, #14]
 800e1be:	f003 020f 	and.w	r2, r3, #15
 800e1c2:	6879      	ldr	r1, [r7, #4]
 800e1c4:	4613      	mov	r3, r2
 800e1c6:	009b      	lsls	r3, r3, #2
 800e1c8:	4413      	add	r3, r2
 800e1ca:	009b      	lsls	r3, r3, #2
 800e1cc:	440b      	add	r3, r1
 800e1ce:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d104      	bne.n	800e1e2 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800e1d8:	6839      	ldr	r1, [r7, #0]
 800e1da:	6878      	ldr	r0, [r7, #4]
 800e1dc:	f000 faf7 	bl	800e7ce <USBD_CtlError>
            break;
 800e1e0:	e040      	b.n	800e264 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800e1e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	da0b      	bge.n	800e202 <USBD_StdEPReq+0x232>
 800e1ea:	7bbb      	ldrb	r3, [r7, #14]
 800e1ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e1f0:	4613      	mov	r3, r2
 800e1f2:	009b      	lsls	r3, r3, #2
 800e1f4:	4413      	add	r3, r2
 800e1f6:	009b      	lsls	r3, r3, #2
 800e1f8:	3310      	adds	r3, #16
 800e1fa:	687a      	ldr	r2, [r7, #4]
 800e1fc:	4413      	add	r3, r2
 800e1fe:	3304      	adds	r3, #4
 800e200:	e00a      	b.n	800e218 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 800e202:	7bbb      	ldrb	r3, [r7, #14]
 800e204:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800e208:	4613      	mov	r3, r2
 800e20a:	009b      	lsls	r3, r3, #2
 800e20c:	4413      	add	r3, r2
 800e20e:	009b      	lsls	r3, r3, #2
 800e210:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800e214:	687a      	ldr	r2, [r7, #4]
 800e216:	4413      	add	r3, r2
 800e218:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e21a:	7bbb      	ldrb	r3, [r7, #14]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d002      	beq.n	800e226 <USBD_StdEPReq+0x256>
 800e220:	7bbb      	ldrb	r3, [r7, #14]
 800e222:	2b80      	cmp	r3, #128	; 0x80
 800e224:	d103      	bne.n	800e22e <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 800e226:	68bb      	ldr	r3, [r7, #8]
 800e228:	2200      	movs	r2, #0
 800e22a:	601a      	str	r2, [r3, #0]
 800e22c:	e00e      	b.n	800e24c <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800e22e:	7bbb      	ldrb	r3, [r7, #14]
 800e230:	4619      	mov	r1, r3
 800e232:	6878      	ldr	r0, [r7, #4]
 800e234:	f004 f9c2 	bl	80125bc <USBD_LL_IsStallEP>
 800e238:	4603      	mov	r3, r0
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d003      	beq.n	800e246 <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 800e23e:	68bb      	ldr	r3, [r7, #8]
 800e240:	2201      	movs	r2, #1
 800e242:	601a      	str	r2, [r3, #0]
 800e244:	e002      	b.n	800e24c <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 800e246:	68bb      	ldr	r3, [r7, #8]
 800e248:	2200      	movs	r2, #0
 800e24a:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800e24c:	68bb      	ldr	r3, [r7, #8]
 800e24e:	2202      	movs	r2, #2
 800e250:	4619      	mov	r1, r3
 800e252:	6878      	ldr	r0, [r7, #4]
 800e254:	f000 fb26 	bl	800e8a4 <USBD_CtlSendData>
          break;
 800e258:	e004      	b.n	800e264 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 800e25a:	6839      	ldr	r1, [r7, #0]
 800e25c:	6878      	ldr	r0, [r7, #4]
 800e25e:	f000 fab6 	bl	800e7ce <USBD_CtlError>
        break;
 800e262:	bf00      	nop
      }
      break;
 800e264:	e004      	b.n	800e270 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 800e266:	6839      	ldr	r1, [r7, #0]
 800e268:	6878      	ldr	r0, [r7, #4]
 800e26a:	f000 fab0 	bl	800e7ce <USBD_CtlError>
      break;
 800e26e:	bf00      	nop
    }
    break;
 800e270:	e004      	b.n	800e27c <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 800e272:	6839      	ldr	r1, [r7, #0]
 800e274:	6878      	ldr	r0, [r7, #4]
 800e276:	f000 faaa 	bl	800e7ce <USBD_CtlError>
    break;
 800e27a:	bf00      	nop
  }

  return ret;
 800e27c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e27e:	4618      	mov	r0, r3
 800e280:	3710      	adds	r7, #16
 800e282:	46bd      	mov	sp, r7
 800e284:	bd80      	pop	{r7, pc}
	...

0800e288 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 800e288:	b580      	push	{r7, lr}
 800e28a:	b084      	sub	sp, #16
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	6078      	str	r0, [r7, #4]
 800e290:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800e292:	683b      	ldr	r3, [r7, #0]
 800e294:	885b      	ldrh	r3, [r3, #2]
 800e296:	0a1b      	lsrs	r3, r3, #8
 800e298:	b29b      	uxth	r3, r3
 800e29a:	3b01      	subs	r3, #1
 800e29c:	2b06      	cmp	r3, #6
 800e29e:	f200 80c9 	bhi.w	800e434 <USBD_GetDescriptor+0x1ac>
 800e2a2:	a201      	add	r2, pc, #4	; (adr r2, 800e2a8 <USBD_GetDescriptor+0x20>)
 800e2a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2a8:	0800e2c5 	.word	0x0800e2c5
 800e2ac:	0800e2dd 	.word	0x0800e2dd
 800e2b0:	0800e31d 	.word	0x0800e31d
 800e2b4:	0800e435 	.word	0x0800e435
 800e2b8:	0800e435 	.word	0x0800e435
 800e2bc:	0800e3e1 	.word	0x0800e3e1
 800e2c0:	0800e407 	.word	0x0800e407
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	687a      	ldr	r2, [r7, #4]
 800e2ce:	7c12      	ldrb	r2, [r2, #16]
 800e2d0:	f107 010a 	add.w	r1, r7, #10
 800e2d4:	4610      	mov	r0, r2
 800e2d6:	4798      	blx	r3
 800e2d8:	60f8      	str	r0, [r7, #12]
    break;
 800e2da:	e0b0      	b.n	800e43e <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	7c1b      	ldrb	r3, [r3, #16]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d10d      	bne.n	800e300 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e2ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2ec:	f107 020a 	add.w	r2, r7, #10
 800e2f0:	4610      	mov	r0, r2
 800e2f2:	4798      	blx	r3
 800e2f4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	3301      	adds	r3, #1
 800e2fa:	2202      	movs	r2, #2
 800e2fc:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800e2fe:	e09e      	b.n	800e43e <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e308:	f107 020a 	add.w	r2, r7, #10
 800e30c:	4610      	mov	r0, r2
 800e30e:	4798      	blx	r3
 800e310:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	3301      	adds	r3, #1
 800e316:	2202      	movs	r2, #2
 800e318:	701a      	strb	r2, [r3, #0]
    break;
 800e31a:	e090      	b.n	800e43e <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800e31c:	683b      	ldr	r3, [r7, #0]
 800e31e:	885b      	ldrh	r3, [r3, #2]
 800e320:	b2db      	uxtb	r3, r3
 800e322:	2b05      	cmp	r3, #5
 800e324:	d856      	bhi.n	800e3d4 <USBD_GetDescriptor+0x14c>
 800e326:	a201      	add	r2, pc, #4	; (adr r2, 800e32c <USBD_GetDescriptor+0xa4>)
 800e328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e32c:	0800e345 	.word	0x0800e345
 800e330:	0800e35d 	.word	0x0800e35d
 800e334:	0800e375 	.word	0x0800e375
 800e338:	0800e38d 	.word	0x0800e38d
 800e33c:	0800e3a5 	.word	0x0800e3a5
 800e340:	0800e3bd 	.word	0x0800e3bd
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800e34a:	685b      	ldr	r3, [r3, #4]
 800e34c:	687a      	ldr	r2, [r7, #4]
 800e34e:	7c12      	ldrb	r2, [r2, #16]
 800e350:	f107 010a 	add.w	r1, r7, #10
 800e354:	4610      	mov	r0, r2
 800e356:	4798      	blx	r3
 800e358:	60f8      	str	r0, [r7, #12]
      break;
 800e35a:	e040      	b.n	800e3de <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800e362:	689b      	ldr	r3, [r3, #8]
 800e364:	687a      	ldr	r2, [r7, #4]
 800e366:	7c12      	ldrb	r2, [r2, #16]
 800e368:	f107 010a 	add.w	r1, r7, #10
 800e36c:	4610      	mov	r0, r2
 800e36e:	4798      	blx	r3
 800e370:	60f8      	str	r0, [r7, #12]
      break;
 800e372:	e034      	b.n	800e3de <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800e37a:	68db      	ldr	r3, [r3, #12]
 800e37c:	687a      	ldr	r2, [r7, #4]
 800e37e:	7c12      	ldrb	r2, [r2, #16]
 800e380:	f107 010a 	add.w	r1, r7, #10
 800e384:	4610      	mov	r0, r2
 800e386:	4798      	blx	r3
 800e388:	60f8      	str	r0, [r7, #12]
      break;
 800e38a:	e028      	b.n	800e3de <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800e392:	691b      	ldr	r3, [r3, #16]
 800e394:	687a      	ldr	r2, [r7, #4]
 800e396:	7c12      	ldrb	r2, [r2, #16]
 800e398:	f107 010a 	add.w	r1, r7, #10
 800e39c:	4610      	mov	r0, r2
 800e39e:	4798      	blx	r3
 800e3a0:	60f8      	str	r0, [r7, #12]
      break;
 800e3a2:	e01c      	b.n	800e3de <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800e3aa:	695b      	ldr	r3, [r3, #20]
 800e3ac:	687a      	ldr	r2, [r7, #4]
 800e3ae:	7c12      	ldrb	r2, [r2, #16]
 800e3b0:	f107 010a 	add.w	r1, r7, #10
 800e3b4:	4610      	mov	r0, r2
 800e3b6:	4798      	blx	r3
 800e3b8:	60f8      	str	r0, [r7, #12]
      break;
 800e3ba:	e010      	b.n	800e3de <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800e3c2:	699b      	ldr	r3, [r3, #24]
 800e3c4:	687a      	ldr	r2, [r7, #4]
 800e3c6:	7c12      	ldrb	r2, [r2, #16]
 800e3c8:	f107 010a 	add.w	r1, r7, #10
 800e3cc:	4610      	mov	r0, r2
 800e3ce:	4798      	blx	r3
 800e3d0:	60f8      	str	r0, [r7, #12]
      break;
 800e3d2:	e004      	b.n	800e3de <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 800e3d4:	6839      	ldr	r1, [r7, #0]
 800e3d6:	6878      	ldr	r0, [r7, #4]
 800e3d8:	f000 f9f9 	bl	800e7ce <USBD_CtlError>
      return;
 800e3dc:	e04b      	b.n	800e476 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 800e3de:	e02e      	b.n	800e43e <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	7c1b      	ldrb	r3, [r3, #16]
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d109      	bne.n	800e3fc <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e3ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3f0:	f107 020a 	add.w	r2, r7, #10
 800e3f4:	4610      	mov	r0, r2
 800e3f6:	4798      	blx	r3
 800e3f8:	60f8      	str	r0, [r7, #12]
      break;
 800e3fa:	e020      	b.n	800e43e <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800e3fc:	6839      	ldr	r1, [r7, #0]
 800e3fe:	6878      	ldr	r0, [r7, #4]
 800e400:	f000 f9e5 	bl	800e7ce <USBD_CtlError>
      return;
 800e404:	e037      	b.n	800e476 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	7c1b      	ldrb	r3, [r3, #16]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d10d      	bne.n	800e42a <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e416:	f107 020a 	add.w	r2, r7, #10
 800e41a:	4610      	mov	r0, r2
 800e41c:	4798      	blx	r3
 800e41e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	3301      	adds	r3, #1
 800e424:	2207      	movs	r2, #7
 800e426:	701a      	strb	r2, [r3, #0]
      break;
 800e428:	e009      	b.n	800e43e <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800e42a:	6839      	ldr	r1, [r7, #0]
 800e42c:	6878      	ldr	r0, [r7, #4]
 800e42e:	f000 f9ce 	bl	800e7ce <USBD_CtlError>
      return;
 800e432:	e020      	b.n	800e476 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 800e434:	6839      	ldr	r1, [r7, #0]
 800e436:	6878      	ldr	r0, [r7, #4]
 800e438:	f000 f9c9 	bl	800e7ce <USBD_CtlError>
    return;
 800e43c:	e01b      	b.n	800e476 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 800e43e:	897b      	ldrh	r3, [r7, #10]
 800e440:	2b00      	cmp	r3, #0
 800e442:	d011      	beq.n	800e468 <USBD_GetDescriptor+0x1e0>
 800e444:	683b      	ldr	r3, [r7, #0]
 800e446:	88db      	ldrh	r3, [r3, #6]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d00d      	beq.n	800e468 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 800e44c:	683b      	ldr	r3, [r7, #0]
 800e44e:	88da      	ldrh	r2, [r3, #6]
 800e450:	897b      	ldrh	r3, [r7, #10]
 800e452:	4293      	cmp	r3, r2
 800e454:	bf28      	it	cs
 800e456:	4613      	movcs	r3, r2
 800e458:	b29b      	uxth	r3, r3
 800e45a:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 800e45c:	897b      	ldrh	r3, [r7, #10]
 800e45e:	461a      	mov	r2, r3
 800e460:	68f9      	ldr	r1, [r7, #12]
 800e462:	6878      	ldr	r0, [r7, #4]
 800e464:	f000 fa1e 	bl	800e8a4 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 800e468:	683b      	ldr	r3, [r7, #0]
 800e46a:	88db      	ldrh	r3, [r3, #6]
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d102      	bne.n	800e476 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 800e470:	6878      	ldr	r0, [r7, #4]
 800e472:	f000 fa75 	bl	800e960 <USBD_CtlSendStatus>
  }
}
 800e476:	3710      	adds	r7, #16
 800e478:	46bd      	mov	sp, r7
 800e47a:	bd80      	pop	{r7, pc}

0800e47c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800e47c:	b580      	push	{r7, lr}
 800e47e:	b084      	sub	sp, #16
 800e480:	af00      	add	r7, sp, #0
 800e482:	6078      	str	r0, [r7, #4]
 800e484:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e486:	683b      	ldr	r3, [r7, #0]
 800e488:	889b      	ldrh	r3, [r3, #4]
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d130      	bne.n	800e4f0 <USBD_SetAddress+0x74>
 800e48e:	683b      	ldr	r3, [r7, #0]
 800e490:	88db      	ldrh	r3, [r3, #6]
 800e492:	2b00      	cmp	r3, #0
 800e494:	d12c      	bne.n	800e4f0 <USBD_SetAddress+0x74>
 800e496:	683b      	ldr	r3, [r7, #0]
 800e498:	885b      	ldrh	r3, [r3, #2]
 800e49a:	2b7f      	cmp	r3, #127	; 0x7f
 800e49c:	d828      	bhi.n	800e4f0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e49e:	683b      	ldr	r3, [r7, #0]
 800e4a0:	885b      	ldrh	r3, [r3, #2]
 800e4a2:	b2db      	uxtb	r3, r3
 800e4a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e4a8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800e4b0:	2b03      	cmp	r3, #3
 800e4b2:	d104      	bne.n	800e4be <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 800e4b4:	6839      	ldr	r1, [r7, #0]
 800e4b6:	6878      	ldr	r0, [r7, #4]
 800e4b8:	f000 f989 	bl	800e7ce <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e4bc:	e01c      	b.n	800e4f8 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	7bfa      	ldrb	r2, [r7, #15]
 800e4c2:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e4c6:	7bfb      	ldrb	r3, [r7, #15]
 800e4c8:	4619      	mov	r1, r3
 800e4ca:	6878      	ldr	r0, [r7, #4]
 800e4cc:	f004 f8a2 	bl	8012614 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800e4d0:	6878      	ldr	r0, [r7, #4]
 800e4d2:	f000 fa45 	bl	800e960 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e4d6:	7bfb      	ldrb	r3, [r7, #15]
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d004      	beq.n	800e4e6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	2202      	movs	r2, #2
 800e4e0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e4e4:	e008      	b.n	800e4f8 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	2201      	movs	r2, #1
 800e4ea:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e4ee:	e003      	b.n	800e4f8 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e4f0:	6839      	ldr	r1, [r7, #0]
 800e4f2:	6878      	ldr	r0, [r7, #4]
 800e4f4:	f000 f96b 	bl	800e7ce <USBD_CtlError>
  }
}
 800e4f8:	bf00      	nop
 800e4fa:	3710      	adds	r7, #16
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	bd80      	pop	{r7, pc}

0800e500 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e500:	b580      	push	{r7, lr}
 800e502:	b082      	sub	sp, #8
 800e504:	af00      	add	r7, sp, #0
 800e506:	6078      	str	r0, [r7, #4]
 800e508:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e50a:	683b      	ldr	r3, [r7, #0]
 800e50c:	885b      	ldrh	r3, [r3, #2]
 800e50e:	b2da      	uxtb	r2, r3
 800e510:	4b41      	ldr	r3, [pc, #260]	; (800e618 <USBD_SetConfig+0x118>)
 800e512:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e514:	4b40      	ldr	r3, [pc, #256]	; (800e618 <USBD_SetConfig+0x118>)
 800e516:	781b      	ldrb	r3, [r3, #0]
 800e518:	2b01      	cmp	r3, #1
 800e51a:	d904      	bls.n	800e526 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800e51c:	6839      	ldr	r1, [r7, #0]
 800e51e:	6878      	ldr	r0, [r7, #4]
 800e520:	f000 f955 	bl	800e7ce <USBD_CtlError>
 800e524:	e075      	b.n	800e612 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800e52c:	2b02      	cmp	r3, #2
 800e52e:	d002      	beq.n	800e536 <USBD_SetConfig+0x36>
 800e530:	2b03      	cmp	r3, #3
 800e532:	d023      	beq.n	800e57c <USBD_SetConfig+0x7c>
 800e534:	e062      	b.n	800e5fc <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 800e536:	4b38      	ldr	r3, [pc, #224]	; (800e618 <USBD_SetConfig+0x118>)
 800e538:	781b      	ldrb	r3, [r3, #0]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d01a      	beq.n	800e574 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800e53e:	4b36      	ldr	r3, [pc, #216]	; (800e618 <USBD_SetConfig+0x118>)
 800e540:	781b      	ldrb	r3, [r3, #0]
 800e542:	461a      	mov	r2, r3
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	2203      	movs	r2, #3
 800e54c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800e550:	4b31      	ldr	r3, [pc, #196]	; (800e618 <USBD_SetConfig+0x118>)
 800e552:	781b      	ldrb	r3, [r3, #0]
 800e554:	4619      	mov	r1, r3
 800e556:	6878      	ldr	r0, [r7, #4]
 800e558:	f7ff fa2a 	bl	800d9b0 <USBD_SetClassConfig>
 800e55c:	4603      	mov	r3, r0
 800e55e:	2b02      	cmp	r3, #2
 800e560:	d104      	bne.n	800e56c <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 800e562:	6839      	ldr	r1, [r7, #0]
 800e564:	6878      	ldr	r0, [r7, #4]
 800e566:	f000 f932 	bl	800e7ce <USBD_CtlError>
          return;
 800e56a:	e052      	b.n	800e612 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 800e56c:	6878      	ldr	r0, [r7, #4]
 800e56e:	f000 f9f7 	bl	800e960 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800e572:	e04e      	b.n	800e612 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800e574:	6878      	ldr	r0, [r7, #4]
 800e576:	f000 f9f3 	bl	800e960 <USBD_CtlSendStatus>
      break;
 800e57a:	e04a      	b.n	800e612 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e57c:	4b26      	ldr	r3, [pc, #152]	; (800e618 <USBD_SetConfig+0x118>)
 800e57e:	781b      	ldrb	r3, [r3, #0]
 800e580:	2b00      	cmp	r3, #0
 800e582:	d112      	bne.n	800e5aa <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	2202      	movs	r2, #2
 800e588:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800e58c:	4b22      	ldr	r3, [pc, #136]	; (800e618 <USBD_SetConfig+0x118>)
 800e58e:	781b      	ldrb	r3, [r3, #0]
 800e590:	461a      	mov	r2, r3
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800e596:	4b20      	ldr	r3, [pc, #128]	; (800e618 <USBD_SetConfig+0x118>)
 800e598:	781b      	ldrb	r3, [r3, #0]
 800e59a:	4619      	mov	r1, r3
 800e59c:	6878      	ldr	r0, [r7, #4]
 800e59e:	f7ff fa26 	bl	800d9ee <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800e5a2:	6878      	ldr	r0, [r7, #4]
 800e5a4:	f000 f9dc 	bl	800e960 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800e5a8:	e033      	b.n	800e612 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 800e5aa:	4b1b      	ldr	r3, [pc, #108]	; (800e618 <USBD_SetConfig+0x118>)
 800e5ac:	781b      	ldrb	r3, [r3, #0]
 800e5ae:	461a      	mov	r2, r3
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	685b      	ldr	r3, [r3, #4]
 800e5b4:	429a      	cmp	r2, r3
 800e5b6:	d01d      	beq.n	800e5f4 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	685b      	ldr	r3, [r3, #4]
 800e5bc:	b2db      	uxtb	r3, r3
 800e5be:	4619      	mov	r1, r3
 800e5c0:	6878      	ldr	r0, [r7, #4]
 800e5c2:	f7ff fa14 	bl	800d9ee <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e5c6:	4b14      	ldr	r3, [pc, #80]	; (800e618 <USBD_SetConfig+0x118>)
 800e5c8:	781b      	ldrb	r3, [r3, #0]
 800e5ca:	461a      	mov	r2, r3
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800e5d0:	4b11      	ldr	r3, [pc, #68]	; (800e618 <USBD_SetConfig+0x118>)
 800e5d2:	781b      	ldrb	r3, [r3, #0]
 800e5d4:	4619      	mov	r1, r3
 800e5d6:	6878      	ldr	r0, [r7, #4]
 800e5d8:	f7ff f9ea 	bl	800d9b0 <USBD_SetClassConfig>
 800e5dc:	4603      	mov	r3, r0
 800e5de:	2b02      	cmp	r3, #2
 800e5e0:	d104      	bne.n	800e5ec <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800e5e2:	6839      	ldr	r1, [r7, #0]
 800e5e4:	6878      	ldr	r0, [r7, #4]
 800e5e6:	f000 f8f2 	bl	800e7ce <USBD_CtlError>
          return;
 800e5ea:	e012      	b.n	800e612 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800e5ec:	6878      	ldr	r0, [r7, #4]
 800e5ee:	f000 f9b7 	bl	800e960 <USBD_CtlSendStatus>
      break;
 800e5f2:	e00e      	b.n	800e612 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800e5f4:	6878      	ldr	r0, [r7, #4]
 800e5f6:	f000 f9b3 	bl	800e960 <USBD_CtlSendStatus>
      break;
 800e5fa:	e00a      	b.n	800e612 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 800e5fc:	6839      	ldr	r1, [r7, #0]
 800e5fe:	6878      	ldr	r0, [r7, #4]
 800e600:	f000 f8e5 	bl	800e7ce <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 800e604:	4b04      	ldr	r3, [pc, #16]	; (800e618 <USBD_SetConfig+0x118>)
 800e606:	781b      	ldrb	r3, [r3, #0]
 800e608:	4619      	mov	r1, r3
 800e60a:	6878      	ldr	r0, [r7, #4]
 800e60c:	f7ff f9ef 	bl	800d9ee <USBD_ClrClassConfig>
      break;
 800e610:	bf00      	nop
    }
  }
}
 800e612:	3708      	adds	r7, #8
 800e614:	46bd      	mov	sp, r7
 800e616:	bd80      	pop	{r7, pc}
 800e618:	20001484 	.word	0x20001484

0800e61c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e61c:	b580      	push	{r7, lr}
 800e61e:	b082      	sub	sp, #8
 800e620:	af00      	add	r7, sp, #0
 800e622:	6078      	str	r0, [r7, #4]
 800e624:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e626:	683b      	ldr	r3, [r7, #0]
 800e628:	88db      	ldrh	r3, [r3, #6]
 800e62a:	2b01      	cmp	r3, #1
 800e62c:	d004      	beq.n	800e638 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800e62e:	6839      	ldr	r1, [r7, #0]
 800e630:	6878      	ldr	r0, [r7, #4]
 800e632:	f000 f8cc 	bl	800e7ce <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800e636:	e021      	b.n	800e67c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800e63e:	2b01      	cmp	r3, #1
 800e640:	db17      	blt.n	800e672 <USBD_GetConfig+0x56>
 800e642:	2b02      	cmp	r3, #2
 800e644:	dd02      	ble.n	800e64c <USBD_GetConfig+0x30>
 800e646:	2b03      	cmp	r3, #3
 800e648:	d00b      	beq.n	800e662 <USBD_GetConfig+0x46>
 800e64a:	e012      	b.n	800e672 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	2200      	movs	r2, #0
 800e650:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	3308      	adds	r3, #8
 800e656:	2201      	movs	r2, #1
 800e658:	4619      	mov	r1, r3
 800e65a:	6878      	ldr	r0, [r7, #4]
 800e65c:	f000 f922 	bl	800e8a4 <USBD_CtlSendData>
      break;
 800e660:	e00c      	b.n	800e67c <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	3304      	adds	r3, #4
 800e666:	2201      	movs	r2, #1
 800e668:	4619      	mov	r1, r3
 800e66a:	6878      	ldr	r0, [r7, #4]
 800e66c:	f000 f91a 	bl	800e8a4 <USBD_CtlSendData>
      break;
 800e670:	e004      	b.n	800e67c <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 800e672:	6839      	ldr	r1, [r7, #0]
 800e674:	6878      	ldr	r0, [r7, #4]
 800e676:	f000 f8aa 	bl	800e7ce <USBD_CtlError>
      break;
 800e67a:	bf00      	nop
}
 800e67c:	bf00      	nop
 800e67e:	3708      	adds	r7, #8
 800e680:	46bd      	mov	sp, r7
 800e682:	bd80      	pop	{r7, pc}

0800e684 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e684:	b580      	push	{r7, lr}
 800e686:	b082      	sub	sp, #8
 800e688:	af00      	add	r7, sp, #0
 800e68a:	6078      	str	r0, [r7, #4]
 800e68c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800e694:	3b01      	subs	r3, #1
 800e696:	2b02      	cmp	r3, #2
 800e698:	d81e      	bhi.n	800e6d8 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 800e69a:	683b      	ldr	r3, [r7, #0]
 800e69c:	88db      	ldrh	r3, [r3, #6]
 800e69e:	2b02      	cmp	r3, #2
 800e6a0:	d004      	beq.n	800e6ac <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800e6a2:	6839      	ldr	r1, [r7, #0]
 800e6a4:	6878      	ldr	r0, [r7, #4]
 800e6a6:	f000 f892 	bl	800e7ce <USBD_CtlError>
      break;
 800e6aa:	e01a      	b.n	800e6e2 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	2201      	movs	r2, #1
 800e6b0:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d005      	beq.n	800e6c8 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	68db      	ldr	r3, [r3, #12]
 800e6c0:	f043 0202 	orr.w	r2, r3, #2
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	330c      	adds	r3, #12
 800e6cc:	2202      	movs	r2, #2
 800e6ce:	4619      	mov	r1, r3
 800e6d0:	6878      	ldr	r0, [r7, #4]
 800e6d2:	f000 f8e7 	bl	800e8a4 <USBD_CtlSendData>
    break;
 800e6d6:	e004      	b.n	800e6e2 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800e6d8:	6839      	ldr	r1, [r7, #0]
 800e6da:	6878      	ldr	r0, [r7, #4]
 800e6dc:	f000 f877 	bl	800e7ce <USBD_CtlError>
    break;
 800e6e0:	bf00      	nop
  }
}
 800e6e2:	bf00      	nop
 800e6e4:	3708      	adds	r7, #8
 800e6e6:	46bd      	mov	sp, r7
 800e6e8:	bd80      	pop	{r7, pc}

0800e6ea <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800e6ea:	b580      	push	{r7, lr}
 800e6ec:	b082      	sub	sp, #8
 800e6ee:	af00      	add	r7, sp, #0
 800e6f0:	6078      	str	r0, [r7, #4]
 800e6f2:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e6f4:	683b      	ldr	r3, [r7, #0]
 800e6f6:	885b      	ldrh	r3, [r3, #2]
 800e6f8:	2b01      	cmp	r3, #1
 800e6fa:	d106      	bne.n	800e70a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	2201      	movs	r2, #1
 800e700:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 800e704:	6878      	ldr	r0, [r7, #4]
 800e706:	f000 f92b 	bl	800e960 <USBD_CtlSendStatus>
  }

}
 800e70a:	bf00      	nop
 800e70c:	3708      	adds	r7, #8
 800e70e:	46bd      	mov	sp, r7
 800e710:	bd80      	pop	{r7, pc}

0800e712 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800e712:	b580      	push	{r7, lr}
 800e714:	b082      	sub	sp, #8
 800e716:	af00      	add	r7, sp, #0
 800e718:	6078      	str	r0, [r7, #4]
 800e71a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800e722:	3b01      	subs	r3, #1
 800e724:	2b02      	cmp	r3, #2
 800e726:	d80b      	bhi.n	800e740 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e728:	683b      	ldr	r3, [r7, #0]
 800e72a:	885b      	ldrh	r3, [r3, #2]
 800e72c:	2b01      	cmp	r3, #1
 800e72e:	d10c      	bne.n	800e74a <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	2200      	movs	r2, #0
 800e734:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800e738:	6878      	ldr	r0, [r7, #4]
 800e73a:	f000 f911 	bl	800e960 <USBD_CtlSendStatus>
    }
    break;
 800e73e:	e004      	b.n	800e74a <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 800e740:	6839      	ldr	r1, [r7, #0]
 800e742:	6878      	ldr	r0, [r7, #4]
 800e744:	f000 f843 	bl	800e7ce <USBD_CtlError>
    break;
 800e748:	e000      	b.n	800e74c <USBD_ClrFeature+0x3a>
    break;
 800e74a:	bf00      	nop
  }
}
 800e74c:	bf00      	nop
 800e74e:	3708      	adds	r7, #8
 800e750:	46bd      	mov	sp, r7
 800e752:	bd80      	pop	{r7, pc}

0800e754 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e754:	b480      	push	{r7}
 800e756:	b083      	sub	sp, #12
 800e758:	af00      	add	r7, sp, #0
 800e75a:	6078      	str	r0, [r7, #4]
 800e75c:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800e75e:	683b      	ldr	r3, [r7, #0]
 800e760:	781a      	ldrb	r2, [r3, #0]
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800e766:	683b      	ldr	r3, [r7, #0]
 800e768:	785a      	ldrb	r2, [r3, #1]
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800e76e:	683b      	ldr	r3, [r7, #0]
 800e770:	3302      	adds	r3, #2
 800e772:	781b      	ldrb	r3, [r3, #0]
 800e774:	b29a      	uxth	r2, r3
 800e776:	683b      	ldr	r3, [r7, #0]
 800e778:	3303      	adds	r3, #3
 800e77a:	781b      	ldrb	r3, [r3, #0]
 800e77c:	b29b      	uxth	r3, r3
 800e77e:	021b      	lsls	r3, r3, #8
 800e780:	b29b      	uxth	r3, r3
 800e782:	4413      	add	r3, r2
 800e784:	b29a      	uxth	r2, r3
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800e78a:	683b      	ldr	r3, [r7, #0]
 800e78c:	3304      	adds	r3, #4
 800e78e:	781b      	ldrb	r3, [r3, #0]
 800e790:	b29a      	uxth	r2, r3
 800e792:	683b      	ldr	r3, [r7, #0]
 800e794:	3305      	adds	r3, #5
 800e796:	781b      	ldrb	r3, [r3, #0]
 800e798:	b29b      	uxth	r3, r3
 800e79a:	021b      	lsls	r3, r3, #8
 800e79c:	b29b      	uxth	r3, r3
 800e79e:	4413      	add	r3, r2
 800e7a0:	b29a      	uxth	r2, r3
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800e7a6:	683b      	ldr	r3, [r7, #0]
 800e7a8:	3306      	adds	r3, #6
 800e7aa:	781b      	ldrb	r3, [r3, #0]
 800e7ac:	b29a      	uxth	r2, r3
 800e7ae:	683b      	ldr	r3, [r7, #0]
 800e7b0:	3307      	adds	r3, #7
 800e7b2:	781b      	ldrb	r3, [r3, #0]
 800e7b4:	b29b      	uxth	r3, r3
 800e7b6:	021b      	lsls	r3, r3, #8
 800e7b8:	b29b      	uxth	r3, r3
 800e7ba:	4413      	add	r3, r2
 800e7bc:	b29a      	uxth	r2, r3
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	80da      	strh	r2, [r3, #6]

}
 800e7c2:	bf00      	nop
 800e7c4:	370c      	adds	r7, #12
 800e7c6:	46bd      	mov	sp, r7
 800e7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7cc:	4770      	bx	lr

0800e7ce <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800e7ce:	b580      	push	{r7, lr}
 800e7d0:	b082      	sub	sp, #8
 800e7d2:	af00      	add	r7, sp, #0
 800e7d4:	6078      	str	r0, [r7, #4]
 800e7d6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 800e7d8:	2180      	movs	r1, #128	; 0x80
 800e7da:	6878      	ldr	r0, [r7, #4]
 800e7dc:	f003 feb0 	bl	8012540 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800e7e0:	2100      	movs	r1, #0
 800e7e2:	6878      	ldr	r0, [r7, #4]
 800e7e4:	f003 feac 	bl	8012540 <USBD_LL_StallEP>
}
 800e7e8:	bf00      	nop
 800e7ea:	3708      	adds	r7, #8
 800e7ec:	46bd      	mov	sp, r7
 800e7ee:	bd80      	pop	{r7, pc}

0800e7f0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e7f0:	b580      	push	{r7, lr}
 800e7f2:	b086      	sub	sp, #24
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	60f8      	str	r0, [r7, #12]
 800e7f8:	60b9      	str	r1, [r7, #8]
 800e7fa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e7fc:	2300      	movs	r3, #0
 800e7fe:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	2b00      	cmp	r3, #0
 800e804:	d032      	beq.n	800e86c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800e806:	68f8      	ldr	r0, [r7, #12]
 800e808:	f000 f834 	bl	800e874 <USBD_GetLen>
 800e80c:	4603      	mov	r3, r0
 800e80e:	3301      	adds	r3, #1
 800e810:	b29b      	uxth	r3, r3
 800e812:	005b      	lsls	r3, r3, #1
 800e814:	b29a      	uxth	r2, r3
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800e81a:	7dfb      	ldrb	r3, [r7, #23]
 800e81c:	1c5a      	adds	r2, r3, #1
 800e81e:	75fa      	strb	r2, [r7, #23]
 800e820:	461a      	mov	r2, r3
 800e822:	68bb      	ldr	r3, [r7, #8]
 800e824:	4413      	add	r3, r2
 800e826:	687a      	ldr	r2, [r7, #4]
 800e828:	7812      	ldrb	r2, [r2, #0]
 800e82a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800e82c:	7dfb      	ldrb	r3, [r7, #23]
 800e82e:	1c5a      	adds	r2, r3, #1
 800e830:	75fa      	strb	r2, [r7, #23]
 800e832:	461a      	mov	r2, r3
 800e834:	68bb      	ldr	r3, [r7, #8]
 800e836:	4413      	add	r3, r2
 800e838:	2203      	movs	r2, #3
 800e83a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800e83c:	e012      	b.n	800e864 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	1c5a      	adds	r2, r3, #1
 800e842:	60fa      	str	r2, [r7, #12]
 800e844:	7dfa      	ldrb	r2, [r7, #23]
 800e846:	1c51      	adds	r1, r2, #1
 800e848:	75f9      	strb	r1, [r7, #23]
 800e84a:	4611      	mov	r1, r2
 800e84c:	68ba      	ldr	r2, [r7, #8]
 800e84e:	440a      	add	r2, r1
 800e850:	781b      	ldrb	r3, [r3, #0]
 800e852:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800e854:	7dfb      	ldrb	r3, [r7, #23]
 800e856:	1c5a      	adds	r2, r3, #1
 800e858:	75fa      	strb	r2, [r7, #23]
 800e85a:	461a      	mov	r2, r3
 800e85c:	68bb      	ldr	r3, [r7, #8]
 800e85e:	4413      	add	r3, r2
 800e860:	2200      	movs	r2, #0
 800e862:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	781b      	ldrb	r3, [r3, #0]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d1e8      	bne.n	800e83e <USBD_GetString+0x4e>
    }
  }
}
 800e86c:	bf00      	nop
 800e86e:	3718      	adds	r7, #24
 800e870:	46bd      	mov	sp, r7
 800e872:	bd80      	pop	{r7, pc}

0800e874 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e874:	b480      	push	{r7}
 800e876:	b085      	sub	sp, #20
 800e878:	af00      	add	r7, sp, #0
 800e87a:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 800e87c:	2300      	movs	r3, #0
 800e87e:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 800e880:	e005      	b.n	800e88e <USBD_GetLen+0x1a>
    {
        len++;
 800e882:	7bfb      	ldrb	r3, [r7, #15]
 800e884:	3301      	adds	r3, #1
 800e886:	73fb      	strb	r3, [r7, #15]
        buf++;
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	3301      	adds	r3, #1
 800e88c:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	781b      	ldrb	r3, [r3, #0]
 800e892:	2b00      	cmp	r3, #0
 800e894:	d1f5      	bne.n	800e882 <USBD_GetLen+0xe>
    }

    return len;
 800e896:	7bfb      	ldrb	r3, [r7, #15]
}
 800e898:	4618      	mov	r0, r3
 800e89a:	3714      	adds	r7, #20
 800e89c:	46bd      	mov	sp, r7
 800e89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a2:	4770      	bx	lr

0800e8a4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800e8a4:	b580      	push	{r7, lr}
 800e8a6:	b084      	sub	sp, #16
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	60f8      	str	r0, [r7, #12]
 800e8ac:	60b9      	str	r1, [r7, #8]
 800e8ae:	4613      	mov	r3, r2
 800e8b0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	2202      	movs	r2, #2
 800e8b6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800e8ba:	88fa      	ldrh	r2, [r7, #6]
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800e8c0:	88fa      	ldrh	r2, [r7, #6]
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800e8c6:	88fb      	ldrh	r3, [r7, #6]
 800e8c8:	68ba      	ldr	r2, [r7, #8]
 800e8ca:	2100      	movs	r1, #0
 800e8cc:	68f8      	ldr	r0, [r7, #12]
 800e8ce:	f003 fec0 	bl	8012652 <USBD_LL_Transmit>

  return USBD_OK;
 800e8d2:	2300      	movs	r3, #0
}
 800e8d4:	4618      	mov	r0, r3
 800e8d6:	3710      	adds	r7, #16
 800e8d8:	46bd      	mov	sp, r7
 800e8da:	bd80      	pop	{r7, pc}

0800e8dc <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800e8dc:	b580      	push	{r7, lr}
 800e8de:	b084      	sub	sp, #16
 800e8e0:	af00      	add	r7, sp, #0
 800e8e2:	60f8      	str	r0, [r7, #12]
 800e8e4:	60b9      	str	r1, [r7, #8]
 800e8e6:	4613      	mov	r3, r2
 800e8e8:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800e8ea:	88fb      	ldrh	r3, [r7, #6]
 800e8ec:	68ba      	ldr	r2, [r7, #8]
 800e8ee:	2100      	movs	r1, #0
 800e8f0:	68f8      	ldr	r0, [r7, #12]
 800e8f2:	f003 feae 	bl	8012652 <USBD_LL_Transmit>

  return USBD_OK;
 800e8f6:	2300      	movs	r3, #0
}
 800e8f8:	4618      	mov	r0, r3
 800e8fa:	3710      	adds	r7, #16
 800e8fc:	46bd      	mov	sp, r7
 800e8fe:	bd80      	pop	{r7, pc}

0800e900 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800e900:	b580      	push	{r7, lr}
 800e902:	b084      	sub	sp, #16
 800e904:	af00      	add	r7, sp, #0
 800e906:	60f8      	str	r0, [r7, #12]
 800e908:	60b9      	str	r1, [r7, #8]
 800e90a:	4613      	mov	r3, r2
 800e90c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	2203      	movs	r2, #3
 800e912:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800e916:	88fa      	ldrh	r2, [r7, #6]
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800e91e:	88fa      	ldrh	r2, [r7, #6]
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800e926:	88fb      	ldrh	r3, [r7, #6]
 800e928:	68ba      	ldr	r2, [r7, #8]
 800e92a:	2100      	movs	r1, #0
 800e92c:	68f8      	ldr	r0, [r7, #12]
 800e92e:	f003 feb3 	bl	8012698 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e932:	2300      	movs	r3, #0
}
 800e934:	4618      	mov	r0, r3
 800e936:	3710      	adds	r7, #16
 800e938:	46bd      	mov	sp, r7
 800e93a:	bd80      	pop	{r7, pc}

0800e93c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800e93c:	b580      	push	{r7, lr}
 800e93e:	b084      	sub	sp, #16
 800e940:	af00      	add	r7, sp, #0
 800e942:	60f8      	str	r0, [r7, #12]
 800e944:	60b9      	str	r1, [r7, #8]
 800e946:	4613      	mov	r3, r2
 800e948:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e94a:	88fb      	ldrh	r3, [r7, #6]
 800e94c:	68ba      	ldr	r2, [r7, #8]
 800e94e:	2100      	movs	r1, #0
 800e950:	68f8      	ldr	r0, [r7, #12]
 800e952:	f003 fea1 	bl	8012698 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e956:	2300      	movs	r3, #0
}
 800e958:	4618      	mov	r0, r3
 800e95a:	3710      	adds	r7, #16
 800e95c:	46bd      	mov	sp, r7
 800e95e:	bd80      	pop	{r7, pc}

0800e960 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800e960:	b580      	push	{r7, lr}
 800e962:	b082      	sub	sp, #8
 800e964:	af00      	add	r7, sp, #0
 800e966:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	2204      	movs	r2, #4
 800e96c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e970:	2300      	movs	r3, #0
 800e972:	2200      	movs	r2, #0
 800e974:	2100      	movs	r1, #0
 800e976:	6878      	ldr	r0, [r7, #4]
 800e978:	f003 fe6b 	bl	8012652 <USBD_LL_Transmit>

  return USBD_OK;
 800e97c:	2300      	movs	r3, #0
}
 800e97e:	4618      	mov	r0, r3
 800e980:	3708      	adds	r7, #8
 800e982:	46bd      	mov	sp, r7
 800e984:	bd80      	pop	{r7, pc}

0800e986 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800e986:	b580      	push	{r7, lr}
 800e988:	b082      	sub	sp, #8
 800e98a:	af00      	add	r7, sp, #0
 800e98c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	2205      	movs	r2, #5
 800e992:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800e996:	2300      	movs	r3, #0
 800e998:	2200      	movs	r2, #0
 800e99a:	2100      	movs	r1, #0
 800e99c:	6878      	ldr	r0, [r7, #4]
 800e99e:	f003 fe7b 	bl	8012698 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e9a2:	2300      	movs	r3, #0
}
 800e9a4:	4618      	mov	r0, r3
 800e9a6:	3708      	adds	r7, #8
 800e9a8:	46bd      	mov	sp, r7
 800e9aa:	bd80      	pop	{r7, pc}

0800e9ac <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800e9ac:	b480      	push	{r7}
 800e9ae:	b085      	sub	sp, #20
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	4603      	mov	r3, r0
 800e9b4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800e9b6:	2300      	movs	r3, #0
 800e9b8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800e9ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e9be:	2b84      	cmp	r3, #132	; 0x84
 800e9c0:	d005      	beq.n	800e9ce <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800e9c2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	4413      	add	r3, r2
 800e9ca:	3303      	adds	r3, #3
 800e9cc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800e9ce:	68fb      	ldr	r3, [r7, #12]
}
 800e9d0:	4618      	mov	r0, r3
 800e9d2:	3714      	adds	r7, #20
 800e9d4:	46bd      	mov	sp, r7
 800e9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9da:	4770      	bx	lr

0800e9dc <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800e9dc:	b480      	push	{r7}
 800e9de:	b083      	sub	sp, #12
 800e9e0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e9e2:	f3ef 8305 	mrs	r3, IPSR
 800e9e6:	607b      	str	r3, [r7, #4]
  return(result);
 800e9e8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	bf14      	ite	ne
 800e9ee:	2301      	movne	r3, #1
 800e9f0:	2300      	moveq	r3, #0
 800e9f2:	b2db      	uxtb	r3, r3
}
 800e9f4:	4618      	mov	r0, r3
 800e9f6:	370c      	adds	r7, #12
 800e9f8:	46bd      	mov	sp, r7
 800e9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9fe:	4770      	bx	lr

0800ea00 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800ea00:	b580      	push	{r7, lr}
 800ea02:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800ea04:	f001 fd56 	bl	80104b4 <vTaskStartScheduler>
  
  return osOK;
 800ea08:	2300      	movs	r3, #0
}
 800ea0a:	4618      	mov	r0, r3
 800ea0c:	bd80      	pop	{r7, pc}

0800ea0e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800ea0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea10:	b089      	sub	sp, #36	; 0x24
 800ea12:	af04      	add	r7, sp, #16
 800ea14:	6078      	str	r0, [r7, #4]
 800ea16:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	695b      	ldr	r3, [r3, #20]
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d020      	beq.n	800ea62 <osThreadCreate+0x54>
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	699b      	ldr	r3, [r3, #24]
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d01c      	beq.n	800ea62 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	685c      	ldr	r4, [r3, #4]
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	681d      	ldr	r5, [r3, #0]
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	691e      	ldr	r6, [r3, #16]
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ea3a:	4618      	mov	r0, r3
 800ea3c:	f7ff ffb6 	bl	800e9ac <makeFreeRtosPriority>
 800ea40:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	695b      	ldr	r3, [r3, #20]
 800ea46:	687a      	ldr	r2, [r7, #4]
 800ea48:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ea4a:	9202      	str	r2, [sp, #8]
 800ea4c:	9301      	str	r3, [sp, #4]
 800ea4e:	9100      	str	r1, [sp, #0]
 800ea50:	683b      	ldr	r3, [r7, #0]
 800ea52:	4632      	mov	r2, r6
 800ea54:	4629      	mov	r1, r5
 800ea56:	4620      	mov	r0, r4
 800ea58:	f001 fb71 	bl	801013e <xTaskCreateStatic>
 800ea5c:	4603      	mov	r3, r0
 800ea5e:	60fb      	str	r3, [r7, #12]
 800ea60:	e01c      	b.n	800ea9c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	685c      	ldr	r4, [r3, #4]
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ea6e:	b29e      	uxth	r6, r3
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ea76:	4618      	mov	r0, r3
 800ea78:	f7ff ff98 	bl	800e9ac <makeFreeRtosPriority>
 800ea7c:	4602      	mov	r2, r0
 800ea7e:	f107 030c 	add.w	r3, r7, #12
 800ea82:	9301      	str	r3, [sp, #4]
 800ea84:	9200      	str	r2, [sp, #0]
 800ea86:	683b      	ldr	r3, [r7, #0]
 800ea88:	4632      	mov	r2, r6
 800ea8a:	4629      	mov	r1, r5
 800ea8c:	4620      	mov	r0, r4
 800ea8e:	f001 fbaf 	bl	80101f0 <xTaskCreate>
 800ea92:	4603      	mov	r3, r0
 800ea94:	2b01      	cmp	r3, #1
 800ea96:	d001      	beq.n	800ea9c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800ea98:	2300      	movs	r3, #0
 800ea9a:	e000      	b.n	800ea9e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800ea9c:	68fb      	ldr	r3, [r7, #12]
}
 800ea9e:	4618      	mov	r0, r3
 800eaa0:	3714      	adds	r7, #20
 800eaa2:	46bd      	mov	sp, r7
 800eaa4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800eaa6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800eaa6:	b580      	push	{r7, lr}
 800eaa8:	b084      	sub	sp, #16
 800eaaa:	af00      	add	r7, sp, #0
 800eaac:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d001      	beq.n	800eabc <osDelay+0x16>
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	e000      	b.n	800eabe <osDelay+0x18>
 800eabc:	2301      	movs	r3, #1
 800eabe:	4618      	mov	r0, r3
 800eac0:	f001 fcc4 	bl	801044c <vTaskDelay>
  
  return osOK;
 800eac4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800eac6:	4618      	mov	r0, r3
 800eac8:	3710      	adds	r7, #16
 800eaca:	46bd      	mov	sp, r7
 800eacc:	bd80      	pop	{r7, pc}
	...

0800ead0 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b086      	sub	sp, #24
 800ead4:	af02      	add	r7, sp, #8
 800ead6:	6078      	str	r0, [r7, #4]
 800ead8:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800eada:	2300      	movs	r3, #0
 800eadc:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 800eade:	2300      	movs	r3, #0
 800eae0:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 800eae2:	f7ff ff7b 	bl	800e9dc <inHandlerMode>
 800eae6:	4603      	mov	r3, r0
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d01c      	beq.n	800eb26 <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 800eaec:	6839      	ldr	r1, [r7, #0]
 800eaee:	f107 0208 	add.w	r2, r7, #8
 800eaf2:	f107 030c 	add.w	r3, r7, #12
 800eaf6:	9300      	str	r3, [sp, #0]
 800eaf8:	4613      	mov	r3, r2
 800eafa:	2201      	movs	r2, #1
 800eafc:	6878      	ldr	r0, [r7, #4]
 800eafe:	f002 fbab 	bl	8011258 <xTaskGenericNotifyFromISR>
 800eb02:	4603      	mov	r3, r0
 800eb04:	2b01      	cmp	r3, #1
 800eb06:	d002      	beq.n	800eb0e <osSignalSet+0x3e>
      return 0x80000000;
 800eb08:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800eb0c:	e019      	b.n	800eb42 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d015      	beq.n	800eb40 <osSignalSet+0x70>
 800eb14:	4b0d      	ldr	r3, [pc, #52]	; (800eb4c <osSignalSet+0x7c>)
 800eb16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb1a:	601a      	str	r2, [r3, #0]
 800eb1c:	f3bf 8f4f 	dsb	sy
 800eb20:	f3bf 8f6f 	isb	sy
 800eb24:	e00c      	b.n	800eb40 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 800eb26:	6839      	ldr	r1, [r7, #0]
 800eb28:	f107 0308 	add.w	r3, r7, #8
 800eb2c:	2201      	movs	r2, #1
 800eb2e:	6878      	ldr	r0, [r7, #4]
 800eb30:	f002 faf2 	bl	8011118 <xTaskGenericNotify>
 800eb34:	4603      	mov	r3, r0
 800eb36:	2b01      	cmp	r3, #1
 800eb38:	d002      	beq.n	800eb40 <osSignalSet+0x70>
    return 0x80000000;
 800eb3a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800eb3e:	e000      	b.n	800eb42 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 800eb40:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 800eb42:	4618      	mov	r0, r3
 800eb44:	3710      	adds	r7, #16
 800eb46:	46bd      	mov	sp, r7
 800eb48:	bd80      	pop	{r7, pc}
 800eb4a:	bf00      	nop
 800eb4c:	e000ed04 	.word	0xe000ed04

0800eb50 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 800eb50:	b590      	push	{r4, r7, lr}
 800eb52:	b089      	sub	sp, #36	; 0x24
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	60f8      	str	r0, [r7, #12]
 800eb58:	60b9      	str	r1, [r7, #8]
 800eb5a:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 800eb5c:	2300      	movs	r3, #0
 800eb5e:	617b      	str	r3, [r7, #20]
  ticks = 0;
 800eb60:	2300      	movs	r3, #0
 800eb62:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb6a:	d103      	bne.n	800eb74 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 800eb6c:	f04f 33ff 	mov.w	r3, #4294967295
 800eb70:	61fb      	str	r3, [r7, #28]
 800eb72:	e009      	b.n	800eb88 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d006      	beq.n	800eb88 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 800eb7e:	69fb      	ldr	r3, [r7, #28]
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d101      	bne.n	800eb88 <osSignalWait+0x38>
      ticks = 1;
 800eb84:	2301      	movs	r3, #1
 800eb86:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 800eb88:	f7ff ff28 	bl	800e9dc <inHandlerMode>
 800eb8c:	4603      	mov	r3, r0
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d002      	beq.n	800eb98 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 800eb92:	2382      	movs	r3, #130	; 0x82
 800eb94:	613b      	str	r3, [r7, #16]
 800eb96:	e01b      	b.n	800ebd0 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 800eb98:	68b9      	ldr	r1, [r7, #8]
 800eb9a:	f107 0310 	add.w	r3, r7, #16
 800eb9e:	1d1a      	adds	r2, r3, #4
 800eba0:	69fb      	ldr	r3, [r7, #28]
 800eba2:	2000      	movs	r0, #0
 800eba4:	f002 fa5e 	bl	8011064 <xTaskNotifyWait>
 800eba8:	4603      	mov	r3, r0
 800ebaa:	2b01      	cmp	r3, #1
 800ebac:	d008      	beq.n	800ebc0 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 800ebae:	69fb      	ldr	r3, [r7, #28]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d102      	bne.n	800ebba <osSignalWait+0x6a>
 800ebb4:	2300      	movs	r3, #0
 800ebb6:	613b      	str	r3, [r7, #16]
 800ebb8:	e00a      	b.n	800ebd0 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 800ebba:	2340      	movs	r3, #64	; 0x40
 800ebbc:	613b      	str	r3, [r7, #16]
 800ebbe:	e007      	b.n	800ebd0 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 800ebc0:	697b      	ldr	r3, [r7, #20]
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	da02      	bge.n	800ebcc <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 800ebc6:	2386      	movs	r3, #134	; 0x86
 800ebc8:	613b      	str	r3, [r7, #16]
 800ebca:	e001      	b.n	800ebd0 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 800ebcc:	2308      	movs	r3, #8
 800ebce:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	461c      	mov	r4, r3
 800ebd4:	f107 0310 	add.w	r3, r7, #16
 800ebd8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ebdc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800ebe0:	68f8      	ldr	r0, [r7, #12]
 800ebe2:	3724      	adds	r7, #36	; 0x24
 800ebe4:	46bd      	mov	sp, r7
 800ebe6:	bd90      	pop	{r4, r7, pc}

0800ebe8 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800ebe8:	b580      	push	{r7, lr}
 800ebea:	b082      	sub	sp, #8
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	685b      	ldr	r3, [r3, #4]
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d007      	beq.n	800ec08 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	685b      	ldr	r3, [r3, #4]
 800ebfc:	4619      	mov	r1, r3
 800ebfe:	2001      	movs	r0, #1
 800ec00:	f000 fce0 	bl	800f5c4 <xQueueCreateMutexStatic>
 800ec04:	4603      	mov	r3, r0
 800ec06:	e003      	b.n	800ec10 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800ec08:	2001      	movs	r0, #1
 800ec0a:	f000 fcc3 	bl	800f594 <xQueueCreateMutex>
 800ec0e:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800ec10:	4618      	mov	r0, r3
 800ec12:	3708      	adds	r7, #8
 800ec14:	46bd      	mov	sp, r7
 800ec16:	bd80      	pop	{r7, pc}

0800ec18 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800ec18:	b580      	push	{r7, lr}
 800ec1a:	b084      	sub	sp, #16
 800ec1c:	af00      	add	r7, sp, #0
 800ec1e:	6078      	str	r0, [r7, #4]
 800ec20:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800ec22:	2300      	movs	r3, #0
 800ec24:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d101      	bne.n	800ec30 <osMutexWait+0x18>
    return osErrorParameter;
 800ec2c:	2380      	movs	r3, #128	; 0x80
 800ec2e:	e03a      	b.n	800eca6 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800ec30:	2300      	movs	r3, #0
 800ec32:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800ec34:	683b      	ldr	r3, [r7, #0]
 800ec36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec3a:	d103      	bne.n	800ec44 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800ec3c:	f04f 33ff 	mov.w	r3, #4294967295
 800ec40:	60fb      	str	r3, [r7, #12]
 800ec42:	e009      	b.n	800ec58 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800ec44:	683b      	ldr	r3, [r7, #0]
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d006      	beq.n	800ec58 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800ec4a:	683b      	ldr	r3, [r7, #0]
 800ec4c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d101      	bne.n	800ec58 <osMutexWait+0x40>
      ticks = 1;
 800ec54:	2301      	movs	r3, #1
 800ec56:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800ec58:	f7ff fec0 	bl	800e9dc <inHandlerMode>
 800ec5c:	4603      	mov	r3, r0
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d017      	beq.n	800ec92 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800ec62:	f107 0308 	add.w	r3, r7, #8
 800ec66:	461a      	mov	r2, r3
 800ec68:	2100      	movs	r1, #0
 800ec6a:	6878      	ldr	r0, [r7, #4]
 800ec6c:	f001 f8c2 	bl	800fdf4 <xQueueReceiveFromISR>
 800ec70:	4603      	mov	r3, r0
 800ec72:	2b01      	cmp	r3, #1
 800ec74:	d001      	beq.n	800ec7a <osMutexWait+0x62>
      return osErrorOS;
 800ec76:	23ff      	movs	r3, #255	; 0xff
 800ec78:	e015      	b.n	800eca6 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800ec7a:	68bb      	ldr	r3, [r7, #8]
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d011      	beq.n	800eca4 <osMutexWait+0x8c>
 800ec80:	4b0b      	ldr	r3, [pc, #44]	; (800ecb0 <osMutexWait+0x98>)
 800ec82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec86:	601a      	str	r2, [r3, #0]
 800ec88:	f3bf 8f4f 	dsb	sy
 800ec8c:	f3bf 8f6f 	isb	sy
 800ec90:	e008      	b.n	800eca4 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800ec92:	68f9      	ldr	r1, [r7, #12]
 800ec94:	6878      	ldr	r0, [r7, #4]
 800ec96:	f000 ffa5 	bl	800fbe4 <xQueueSemaphoreTake>
 800ec9a:	4603      	mov	r3, r0
 800ec9c:	2b01      	cmp	r3, #1
 800ec9e:	d001      	beq.n	800eca4 <osMutexWait+0x8c>
    return osErrorOS;
 800eca0:	23ff      	movs	r3, #255	; 0xff
 800eca2:	e000      	b.n	800eca6 <osMutexWait+0x8e>
  }
  
  return osOK;
 800eca4:	2300      	movs	r3, #0
}
 800eca6:	4618      	mov	r0, r3
 800eca8:	3710      	adds	r7, #16
 800ecaa:	46bd      	mov	sp, r7
 800ecac:	bd80      	pop	{r7, pc}
 800ecae:	bf00      	nop
 800ecb0:	e000ed04 	.word	0xe000ed04

0800ecb4 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800ecb4:	b580      	push	{r7, lr}
 800ecb6:	b084      	sub	sp, #16
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800ecbc:	2300      	movs	r3, #0
 800ecbe:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800ecc0:	2300      	movs	r3, #0
 800ecc2:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800ecc4:	f7ff fe8a 	bl	800e9dc <inHandlerMode>
 800ecc8:	4603      	mov	r3, r0
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d016      	beq.n	800ecfc <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800ecce:	f107 0308 	add.w	r3, r7, #8
 800ecd2:	4619      	mov	r1, r3
 800ecd4:	6878      	ldr	r0, [r7, #4]
 800ecd6:	f000 fe1f 	bl	800f918 <xQueueGiveFromISR>
 800ecda:	4603      	mov	r3, r0
 800ecdc:	2b01      	cmp	r3, #1
 800ecde:	d001      	beq.n	800ece4 <osMutexRelease+0x30>
      return osErrorOS;
 800ece0:	23ff      	movs	r3, #255	; 0xff
 800ece2:	e017      	b.n	800ed14 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ece4:	68bb      	ldr	r3, [r7, #8]
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d013      	beq.n	800ed12 <osMutexRelease+0x5e>
 800ecea:	4b0c      	ldr	r3, [pc, #48]	; (800ed1c <osMutexRelease+0x68>)
 800ecec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ecf0:	601a      	str	r2, [r3, #0]
 800ecf2:	f3bf 8f4f 	dsb	sy
 800ecf6:	f3bf 8f6f 	isb	sy
 800ecfa:	e00a      	b.n	800ed12 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800ecfc:	2300      	movs	r3, #0
 800ecfe:	2200      	movs	r2, #0
 800ed00:	2100      	movs	r1, #0
 800ed02:	6878      	ldr	r0, [r7, #4]
 800ed04:	f000 fc7a 	bl	800f5fc <xQueueGenericSend>
 800ed08:	4603      	mov	r3, r0
 800ed0a:	2b01      	cmp	r3, #1
 800ed0c:	d001      	beq.n	800ed12 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800ed0e:	23ff      	movs	r3, #255	; 0xff
 800ed10:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800ed12:	68fb      	ldr	r3, [r7, #12]
}
 800ed14:	4618      	mov	r0, r3
 800ed16:	3710      	adds	r7, #16
 800ed18:	46bd      	mov	sp, r7
 800ed1a:	bd80      	pop	{r7, pc}
 800ed1c:	e000ed04 	.word	0xe000ed04

0800ed20 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 800ed20:	b580      	push	{r7, lr}
 800ed22:	b086      	sub	sp, #24
 800ed24:	af00      	add	r7, sp, #0
 800ed26:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	685b      	ldr	r3, [r3, #4]
 800ed2c:	3303      	adds	r3, #3
 800ed2e:	f023 0303 	bic.w	r3, r3, #3
 800ed32:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 800ed34:	2014      	movs	r0, #20
 800ed36:	f002 fdfb 	bl	8011930 <pvPortMalloc>
 800ed3a:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 800ed3c:	697b      	ldr	r3, [r7, #20]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d046      	beq.n	800edd0 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	681a      	ldr	r2, [r3, #0]
 800ed46:	697b      	ldr	r3, [r7, #20]
 800ed48:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 800ed4a:	68fa      	ldr	r2, [r7, #12]
 800ed4c:	697b      	ldr	r3, [r7, #20]
 800ed4e:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 800ed50:	697b      	ldr	r3, [r7, #20]
 800ed52:	2200      	movs	r2, #0
 800ed54:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	f002 fde8 	bl	8011930 <pvPortMalloc>
 800ed60:	4602      	mov	r2, r0
 800ed62:	697b      	ldr	r3, [r7, #20]
 800ed64:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 800ed66:	697b      	ldr	r3, [r7, #20]
 800ed68:	685b      	ldr	r3, [r3, #4]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d02b      	beq.n	800edc6 <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	68fa      	ldr	r2, [r7, #12]
 800ed74:	fb02 f303 	mul.w	r3, r2, r3
 800ed78:	4618      	mov	r0, r3
 800ed7a:	f002 fdd9 	bl	8011930 <pvPortMalloc>
 800ed7e:	4602      	mov	r2, r0
 800ed80:	697b      	ldr	r3, [r7, #20]
 800ed82:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 800ed84:	697b      	ldr	r3, [r7, #20]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d011      	beq.n	800edb0 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 800ed8c:	2300      	movs	r3, #0
 800ed8e:	613b      	str	r3, [r7, #16]
 800ed90:	e008      	b.n	800eda4 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 800ed92:	697b      	ldr	r3, [r7, #20]
 800ed94:	685a      	ldr	r2, [r3, #4]
 800ed96:	693b      	ldr	r3, [r7, #16]
 800ed98:	4413      	add	r3, r2
 800ed9a:	2200      	movs	r2, #0
 800ed9c:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 800ed9e:	693b      	ldr	r3, [r7, #16]
 800eda0:	3301      	adds	r3, #1
 800eda2:	613b      	str	r3, [r7, #16]
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	693a      	ldr	r2, [r7, #16]
 800edaa:	429a      	cmp	r2, r3
 800edac:	d3f1      	bcc.n	800ed92 <osPoolCreate+0x72>
 800edae:	e00f      	b.n	800edd0 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 800edb0:	697b      	ldr	r3, [r7, #20]
 800edb2:	685b      	ldr	r3, [r3, #4]
 800edb4:	4618      	mov	r0, r3
 800edb6:	f002 fe7d 	bl	8011ab4 <vPortFree>
        vPortFree(thePool);
 800edba:	6978      	ldr	r0, [r7, #20]
 800edbc:	f002 fe7a 	bl	8011ab4 <vPortFree>
        thePool = NULL;
 800edc0:	2300      	movs	r3, #0
 800edc2:	617b      	str	r3, [r7, #20]
 800edc4:	e004      	b.n	800edd0 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 800edc6:	6978      	ldr	r0, [r7, #20]
 800edc8:	f002 fe74 	bl	8011ab4 <vPortFree>
      thePool = NULL;
 800edcc:	2300      	movs	r3, #0
 800edce:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 800edd0:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 800edd2:	4618      	mov	r0, r3
 800edd4:	3718      	adds	r7, #24
 800edd6:	46bd      	mov	sp, r7
 800edd8:	bd80      	pop	{r7, pc}

0800edda <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 800edda:	b580      	push	{r7, lr}
 800eddc:	b08a      	sub	sp, #40	; 0x28
 800edde:	af00      	add	r7, sp, #0
 800ede0:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 800ede2:	2300      	movs	r3, #0
 800ede4:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 800ede6:	2300      	movs	r3, #0
 800ede8:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 800edea:	f7ff fdf7 	bl	800e9dc <inHandlerMode>
 800edee:	4603      	mov	r3, r0
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d00e      	beq.n	800ee12 <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800edf4:	f3ef 8211 	mrs	r2, BASEPRI
 800edf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edfc:	f383 8811 	msr	BASEPRI, r3
 800ee00:	f3bf 8f6f 	isb	sy
 800ee04:	f3bf 8f4f 	dsb	sy
 800ee08:	617a      	str	r2, [r7, #20]
 800ee0a:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ee0c:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 800ee0e:	627b      	str	r3, [r7, #36]	; 0x24
 800ee10:	e001      	b.n	800ee16 <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 800ee12:	f002 fc73 	bl	80116fc <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 800ee16:	2300      	movs	r3, #0
 800ee18:	61fb      	str	r3, [r7, #28]
 800ee1a:	e029      	b.n	800ee70 <osPoolAlloc+0x96>
    index = pool_id->currentIndex + i;
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	691b      	ldr	r3, [r3, #16]
 800ee20:	69fa      	ldr	r2, [r7, #28]
 800ee22:	4413      	add	r3, r2
 800ee24:	61bb      	str	r3, [r7, #24]
    if (index >= pool_id->pool_sz) {
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	689b      	ldr	r3, [r3, #8]
 800ee2a:	69ba      	ldr	r2, [r7, #24]
 800ee2c:	429a      	cmp	r2, r3
 800ee2e:	d301      	bcc.n	800ee34 <osPoolAlloc+0x5a>
      index = 0;
 800ee30:	2300      	movs	r3, #0
 800ee32:	61bb      	str	r3, [r7, #24]
    }
    
    if (pool_id->markers[index] == 0) {
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	685a      	ldr	r2, [r3, #4]
 800ee38:	69bb      	ldr	r3, [r7, #24]
 800ee3a:	4413      	add	r3, r2
 800ee3c:	781b      	ldrb	r3, [r3, #0]
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d113      	bne.n	800ee6a <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	685a      	ldr	r2, [r3, #4]
 800ee46:	69bb      	ldr	r3, [r7, #24]
 800ee48:	4413      	add	r3, r2
 800ee4a:	2201      	movs	r2, #1
 800ee4c:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	4619      	mov	r1, r3
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	68db      	ldr	r3, [r3, #12]
 800ee58:	69ba      	ldr	r2, [r7, #24]
 800ee5a:	fb02 f303 	mul.w	r3, r2, r3
 800ee5e:	440b      	add	r3, r1
 800ee60:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	69ba      	ldr	r2, [r7, #24]
 800ee66:	611a      	str	r2, [r3, #16]
      break;
 800ee68:	e007      	b.n	800ee7a <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 800ee6a:	69fb      	ldr	r3, [r7, #28]
 800ee6c:	3301      	adds	r3, #1
 800ee6e:	61fb      	str	r3, [r7, #28]
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	689b      	ldr	r3, [r3, #8]
 800ee74:	69fa      	ldr	r2, [r7, #28]
 800ee76:	429a      	cmp	r2, r3
 800ee78:	d3d0      	bcc.n	800ee1c <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 800ee7a:	f7ff fdaf 	bl	800e9dc <inHandlerMode>
 800ee7e:	4603      	mov	r3, r0
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d005      	beq.n	800ee90 <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 800ee84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee86:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	f383 8811 	msr	BASEPRI, r3
 800ee8e:	e001      	b.n	800ee94 <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 800ee90:	f002 fc62 	bl	8011758 <vPortExitCritical>
  }
  
  return p;
 800ee94:	6a3b      	ldr	r3, [r7, #32]
}
 800ee96:	4618      	mov	r0, r3
 800ee98:	3728      	adds	r7, #40	; 0x28
 800ee9a:	46bd      	mov	sp, r7
 800ee9c:	bd80      	pop	{r7, pc}

0800ee9e <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 800ee9e:	b480      	push	{r7}
 800eea0:	b085      	sub	sp, #20
 800eea2:	af00      	add	r7, sp, #0
 800eea4:	6078      	str	r0, [r7, #4]
 800eea6:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d101      	bne.n	800eeb2 <osPoolFree+0x14>
    return osErrorParameter;
 800eeae:	2380      	movs	r3, #128	; 0x80
 800eeb0:	e030      	b.n	800ef14 <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 800eeb2:	683b      	ldr	r3, [r7, #0]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d101      	bne.n	800eebc <osPoolFree+0x1e>
    return osErrorParameter;
 800eeb8:	2380      	movs	r3, #128	; 0x80
 800eeba:	e02b      	b.n	800ef14 <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	683a      	ldr	r2, [r7, #0]
 800eec2:	429a      	cmp	r2, r3
 800eec4:	d201      	bcs.n	800eeca <osPoolFree+0x2c>
    return osErrorParameter;
 800eec6:	2380      	movs	r3, #128	; 0x80
 800eec8:	e024      	b.n	800ef14 <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 800eeca:	683b      	ldr	r3, [r7, #0]
 800eecc:	687a      	ldr	r2, [r7, #4]
 800eece:	6812      	ldr	r2, [r2, #0]
 800eed0:	1a9b      	subs	r3, r3, r2
 800eed2:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	68da      	ldr	r2, [r3, #12]
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	fbb3 f1f2 	udiv	r1, r3, r2
 800eede:	fb02 f201 	mul.w	r2, r2, r1
 800eee2:	1a9b      	subs	r3, r3, r2
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d001      	beq.n	800eeec <osPoolFree+0x4e>
    return osErrorParameter;
 800eee8:	2380      	movs	r3, #128	; 0x80
 800eeea:	e013      	b.n	800ef14 <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	68db      	ldr	r3, [r3, #12]
 800eef0:	68fa      	ldr	r2, [r7, #12]
 800eef2:	fbb2 f3f3 	udiv	r3, r2, r3
 800eef6:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	689b      	ldr	r3, [r3, #8]
 800eefc:	68fa      	ldr	r2, [r7, #12]
 800eefe:	429a      	cmp	r2, r3
 800ef00:	d301      	bcc.n	800ef06 <osPoolFree+0x68>
    return osErrorParameter;
 800ef02:	2380      	movs	r3, #128	; 0x80
 800ef04:	e006      	b.n	800ef14 <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	685a      	ldr	r2, [r3, #4]
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	4413      	add	r3, r2
 800ef0e:	2200      	movs	r2, #0
 800ef10:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 800ef12:	2300      	movs	r3, #0
}
 800ef14:	4618      	mov	r0, r3
 800ef16:	3714      	adds	r7, #20
 800ef18:	46bd      	mov	sp, r7
 800ef1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef1e:	4770      	bx	lr

0800ef20 <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 800ef20:	b590      	push	{r4, r7, lr}
 800ef22:	b087      	sub	sp, #28
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	6078      	str	r0, [r7, #4]
 800ef28:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	60fb      	str	r3, [r7, #12]
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	685b      	ldr	r3, [r3, #4]
 800ef34:	613b      	str	r3, [r7, #16]
 800ef36:	2300      	movs	r3, #0
 800ef38:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	689c      	ldr	r4, [r3, #8]
 800ef3e:	200c      	movs	r0, #12
 800ef40:	f002 fcf6 	bl	8011930 <pvPortMalloc>
 800ef44:	4603      	mov	r3, r0
 800ef46:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	689b      	ldr	r3, [r3, #8]
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d101      	bne.n	800ef56 <osMailCreate+0x36>
    return NULL;
 800ef52:	2300      	movs	r3, #0
 800ef54:	e038      	b.n	800efc8 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	689b      	ldr	r3, [r3, #8]
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	687a      	ldr	r2, [r7, #4]
 800ef5e:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	6818      	ldr	r0, [r3, #0]
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	689b      	ldr	r3, [r3, #8]
 800ef68:	681c      	ldr	r4, [r3, #0]
 800ef6a:	2200      	movs	r2, #0
 800ef6c:	2104      	movs	r1, #4
 800ef6e:	f000 fa9b 	bl	800f4a8 <xQueueGenericCreate>
 800ef72:	4603      	mov	r3, r0
 800ef74:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	689b      	ldr	r3, [r3, #8]
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	685b      	ldr	r3, [r3, #4]
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d107      	bne.n	800ef92 <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	689b      	ldr	r3, [r3, #8]
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	4618      	mov	r0, r3
 800ef8a:	f002 fd93 	bl	8011ab4 <vPortFree>
    return NULL;
 800ef8e:	2300      	movs	r3, #0
 800ef90:	e01a      	b.n	800efc8 <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	689b      	ldr	r3, [r3, #8]
 800ef96:	681c      	ldr	r4, [r3, #0]
 800ef98:	f107 030c 	add.w	r3, r7, #12
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	f7ff febf 	bl	800ed20 <osPoolCreate>
 800efa2:	4603      	mov	r3, r0
 800efa4:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	689b      	ldr	r3, [r3, #8]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	689b      	ldr	r3, [r3, #8]
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d107      	bne.n	800efc2 <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	689b      	ldr	r3, [r3, #8]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	4618      	mov	r0, r3
 800efba:	f002 fd7b 	bl	8011ab4 <vPortFree>
    return NULL;
 800efbe:	2300      	movs	r3, #0
 800efc0:	e002      	b.n	800efc8 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	689b      	ldr	r3, [r3, #8]
 800efc6:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 800efc8:	4618      	mov	r0, r3
 800efca:	371c      	adds	r7, #28
 800efcc:	46bd      	mov	sp, r7
 800efce:	bd90      	pop	{r4, r7, pc}

0800efd0 <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 800efd0:	b580      	push	{r7, lr}
 800efd2:	b084      	sub	sp, #16
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	6078      	str	r0, [r7, #4]
 800efd8:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d101      	bne.n	800efe4 <osMailAlloc+0x14>
    return NULL;
 800efe0:	2300      	movs	r3, #0
 800efe2:	e006      	b.n	800eff2 <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	689b      	ldr	r3, [r3, #8]
 800efe8:	4618      	mov	r0, r3
 800efea:	f7ff fef6 	bl	800edda <osPoolAlloc>
 800efee:	60f8      	str	r0, [r7, #12]
  
  return p;
 800eff0:	68fb      	ldr	r3, [r7, #12]
}
 800eff2:	4618      	mov	r0, r3
 800eff4:	3710      	adds	r7, #16
 800eff6:	46bd      	mov	sp, r7
 800eff8:	bd80      	pop	{r7, pc}
	...

0800effc <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 800effc:	b580      	push	{r7, lr}
 800effe:	b084      	sub	sp, #16
 800f000:	af00      	add	r7, sp, #0
 800f002:	6078      	str	r0, [r7, #4]
 800f004:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d101      	bne.n	800f010 <osMailPut+0x14>
    return osErrorParameter;
 800f00c:	2380      	movs	r3, #128	; 0x80
 800f00e:	e02c      	b.n	800f06a <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 800f010:	2300      	movs	r3, #0
 800f012:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 800f014:	f7ff fce2 	bl	800e9dc <inHandlerMode>
 800f018:	4603      	mov	r3, r0
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d018      	beq.n	800f050 <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	6858      	ldr	r0, [r3, #4]
 800f022:	f107 020c 	add.w	r2, r7, #12
 800f026:	4639      	mov	r1, r7
 800f028:	2300      	movs	r3, #0
 800f02a:	f000 fbe1 	bl	800f7f0 <xQueueGenericSendFromISR>
 800f02e:	4603      	mov	r3, r0
 800f030:	2b01      	cmp	r3, #1
 800f032:	d001      	beq.n	800f038 <osMailPut+0x3c>
      return osErrorOS;
 800f034:	23ff      	movs	r3, #255	; 0xff
 800f036:	e018      	b.n	800f06a <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d014      	beq.n	800f068 <osMailPut+0x6c>
 800f03e:	4b0d      	ldr	r3, [pc, #52]	; (800f074 <osMailPut+0x78>)
 800f040:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f044:	601a      	str	r2, [r3, #0]
 800f046:	f3bf 8f4f 	dsb	sy
 800f04a:	f3bf 8f6f 	isb	sy
 800f04e:	e00b      	b.n	800f068 <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	6858      	ldr	r0, [r3, #4]
 800f054:	4639      	mov	r1, r7
 800f056:	2300      	movs	r3, #0
 800f058:	2200      	movs	r2, #0
 800f05a:	f000 facf 	bl	800f5fc <xQueueGenericSend>
 800f05e:	4603      	mov	r3, r0
 800f060:	2b01      	cmp	r3, #1
 800f062:	d001      	beq.n	800f068 <osMailPut+0x6c>
      return osErrorOS;
 800f064:	23ff      	movs	r3, #255	; 0xff
 800f066:	e000      	b.n	800f06a <osMailPut+0x6e>
    }
  }
  
  return osOK;
 800f068:	2300      	movs	r3, #0
}
 800f06a:	4618      	mov	r0, r3
 800f06c:	3710      	adds	r7, #16
 800f06e:	46bd      	mov	sp, r7
 800f070:	bd80      	pop	{r7, pc}
 800f072:	bf00      	nop
 800f074:	e000ed04 	.word	0xe000ed04

0800f078 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 800f078:	b590      	push	{r4, r7, lr}
 800f07a:	b08b      	sub	sp, #44	; 0x2c
 800f07c:	af00      	add	r7, sp, #0
 800f07e:	60f8      	str	r0, [r7, #12]
 800f080:	60b9      	str	r1, [r7, #8]
 800f082:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 800f084:	68bb      	ldr	r3, [r7, #8]
 800f086:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 800f088:	68bb      	ldr	r3, [r7, #8]
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d10a      	bne.n	800f0a4 <osMailGet+0x2c>
    event.status = osErrorParameter;
 800f08e:	2380      	movs	r3, #128	; 0x80
 800f090:	617b      	str	r3, [r7, #20]
    return event;
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	461c      	mov	r4, r3
 800f096:	f107 0314 	add.w	r3, r7, #20
 800f09a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f09e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f0a2:	e056      	b.n	800f152 <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800f0a4:	2300      	movs	r3, #0
 800f0a6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800f0a8:	2300      	movs	r3, #0
 800f0aa:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0b2:	d103      	bne.n	800f0bc <osMailGet+0x44>
    ticks = portMAX_DELAY;
 800f0b4:	f04f 33ff 	mov.w	r3, #4294967295
 800f0b8:	627b      	str	r3, [r7, #36]	; 0x24
 800f0ba:	e009      	b.n	800f0d0 <osMailGet+0x58>
  }
  else if (millisec != 0) {
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d006      	beq.n	800f0d0 <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800f0c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d101      	bne.n	800f0d0 <osMailGet+0x58>
      ticks = 1;
 800f0cc:	2301      	movs	r3, #1
 800f0ce:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800f0d0:	f7ff fc84 	bl	800e9dc <inHandlerMode>
 800f0d4:	4603      	mov	r3, r0
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d01d      	beq.n	800f116 <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 800f0da:	68bb      	ldr	r3, [r7, #8]
 800f0dc:	6858      	ldr	r0, [r3, #4]
 800f0de:	f107 0220 	add.w	r2, r7, #32
 800f0e2:	f107 0314 	add.w	r3, r7, #20
 800f0e6:	3304      	adds	r3, #4
 800f0e8:	4619      	mov	r1, r3
 800f0ea:	f000 fe83 	bl	800fdf4 <xQueueReceiveFromISR>
 800f0ee:	4603      	mov	r3, r0
 800f0f0:	2b01      	cmp	r3, #1
 800f0f2:	d102      	bne.n	800f0fa <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 800f0f4:	2320      	movs	r3, #32
 800f0f6:	617b      	str	r3, [r7, #20]
 800f0f8:	e001      	b.n	800f0fe <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 800f0fa:	2300      	movs	r3, #0
 800f0fc:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800f0fe:	6a3b      	ldr	r3, [r7, #32]
 800f100:	2b00      	cmp	r3, #0
 800f102:	d01e      	beq.n	800f142 <osMailGet+0xca>
 800f104:	4b15      	ldr	r3, [pc, #84]	; (800f15c <osMailGet+0xe4>)
 800f106:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f10a:	601a      	str	r2, [r3, #0]
 800f10c:	f3bf 8f4f 	dsb	sy
 800f110:	f3bf 8f6f 	isb	sy
 800f114:	e015      	b.n	800f142 <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 800f116:	68bb      	ldr	r3, [r7, #8]
 800f118:	6858      	ldr	r0, [r3, #4]
 800f11a:	f107 0314 	add.w	r3, r7, #20
 800f11e:	3304      	adds	r3, #4
 800f120:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f122:	4619      	mov	r1, r3
 800f124:	f000 fc82 	bl	800fa2c <xQueueReceive>
 800f128:	4603      	mov	r3, r0
 800f12a:	2b01      	cmp	r3, #1
 800f12c:	d102      	bne.n	800f134 <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 800f12e:	2320      	movs	r3, #32
 800f130:	617b      	str	r3, [r7, #20]
 800f132:	e006      	b.n	800f142 <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800f134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f136:	2b00      	cmp	r3, #0
 800f138:	d101      	bne.n	800f13e <osMailGet+0xc6>
 800f13a:	2300      	movs	r3, #0
 800f13c:	e000      	b.n	800f140 <osMailGet+0xc8>
 800f13e:	2340      	movs	r3, #64	; 0x40
 800f140:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	461c      	mov	r4, r3
 800f146:	f107 0314 	add.w	r3, r7, #20
 800f14a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f14e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800f152:	68f8      	ldr	r0, [r7, #12]
 800f154:	372c      	adds	r7, #44	; 0x2c
 800f156:	46bd      	mov	sp, r7
 800f158:	bd90      	pop	{r4, r7, pc}
 800f15a:	bf00      	nop
 800f15c:	e000ed04 	.word	0xe000ed04

0800f160 <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 800f160:	b580      	push	{r7, lr}
 800f162:	b082      	sub	sp, #8
 800f164:	af00      	add	r7, sp, #0
 800f166:	6078      	str	r0, [r7, #4]
 800f168:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d101      	bne.n	800f174 <osMailFree+0x14>
    return osErrorParameter;
 800f170:	2380      	movs	r3, #128	; 0x80
 800f172:	e006      	b.n	800f182 <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	689b      	ldr	r3, [r3, #8]
 800f178:	6839      	ldr	r1, [r7, #0]
 800f17a:	4618      	mov	r0, r3
 800f17c:	f7ff fe8f 	bl	800ee9e <osPoolFree>
 800f180:	4603      	mov	r3, r0
}
 800f182:	4618      	mov	r0, r3
 800f184:	3708      	adds	r7, #8
 800f186:	46bd      	mov	sp, r7
 800f188:	bd80      	pop	{r7, pc}

0800f18a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f18a:	b480      	push	{r7}
 800f18c:	b083      	sub	sp, #12
 800f18e:	af00      	add	r7, sp, #0
 800f190:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	f103 0208 	add.w	r2, r3, #8
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	f04f 32ff 	mov.w	r2, #4294967295
 800f1a2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	f103 0208 	add.w	r2, r3, #8
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	f103 0208 	add.w	r2, r3, #8
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	2200      	movs	r2, #0
 800f1bc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f1be:	bf00      	nop
 800f1c0:	370c      	adds	r7, #12
 800f1c2:	46bd      	mov	sp, r7
 800f1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1c8:	4770      	bx	lr

0800f1ca <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f1ca:	b480      	push	{r7}
 800f1cc:	b083      	sub	sp, #12
 800f1ce:	af00      	add	r7, sp, #0
 800f1d0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	2200      	movs	r2, #0
 800f1d6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f1d8:	bf00      	nop
 800f1da:	370c      	adds	r7, #12
 800f1dc:	46bd      	mov	sp, r7
 800f1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e2:	4770      	bx	lr

0800f1e4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f1e4:	b480      	push	{r7}
 800f1e6:	b085      	sub	sp, #20
 800f1e8:	af00      	add	r7, sp, #0
 800f1ea:	6078      	str	r0, [r7, #4]
 800f1ec:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	685b      	ldr	r3, [r3, #4]
 800f1f2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f1f4:	683b      	ldr	r3, [r7, #0]
 800f1f6:	68fa      	ldr	r2, [r7, #12]
 800f1f8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	689a      	ldr	r2, [r3, #8]
 800f1fe:	683b      	ldr	r3, [r7, #0]
 800f200:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	689b      	ldr	r3, [r3, #8]
 800f206:	683a      	ldr	r2, [r7, #0]
 800f208:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	683a      	ldr	r2, [r7, #0]
 800f20e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800f210:	683b      	ldr	r3, [r7, #0]
 800f212:	687a      	ldr	r2, [r7, #4]
 800f214:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	1c5a      	adds	r2, r3, #1
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	601a      	str	r2, [r3, #0]
}
 800f220:	bf00      	nop
 800f222:	3714      	adds	r7, #20
 800f224:	46bd      	mov	sp, r7
 800f226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f22a:	4770      	bx	lr

0800f22c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f22c:	b480      	push	{r7}
 800f22e:	b085      	sub	sp, #20
 800f230:	af00      	add	r7, sp, #0
 800f232:	6078      	str	r0, [r7, #4]
 800f234:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f236:	683b      	ldr	r3, [r7, #0]
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f23c:	68bb      	ldr	r3, [r7, #8]
 800f23e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f242:	d103      	bne.n	800f24c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	691b      	ldr	r3, [r3, #16]
 800f248:	60fb      	str	r3, [r7, #12]
 800f24a:	e00c      	b.n	800f266 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	3308      	adds	r3, #8
 800f250:	60fb      	str	r3, [r7, #12]
 800f252:	e002      	b.n	800f25a <vListInsert+0x2e>
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	685b      	ldr	r3, [r3, #4]
 800f258:	60fb      	str	r3, [r7, #12]
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	685b      	ldr	r3, [r3, #4]
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	68ba      	ldr	r2, [r7, #8]
 800f262:	429a      	cmp	r2, r3
 800f264:	d2f6      	bcs.n	800f254 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	685a      	ldr	r2, [r3, #4]
 800f26a:	683b      	ldr	r3, [r7, #0]
 800f26c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f26e:	683b      	ldr	r3, [r7, #0]
 800f270:	685b      	ldr	r3, [r3, #4]
 800f272:	683a      	ldr	r2, [r7, #0]
 800f274:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f276:	683b      	ldr	r3, [r7, #0]
 800f278:	68fa      	ldr	r2, [r7, #12]
 800f27a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	683a      	ldr	r2, [r7, #0]
 800f280:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800f282:	683b      	ldr	r3, [r7, #0]
 800f284:	687a      	ldr	r2, [r7, #4]
 800f286:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	1c5a      	adds	r2, r3, #1
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	601a      	str	r2, [r3, #0]
}
 800f292:	bf00      	nop
 800f294:	3714      	adds	r7, #20
 800f296:	46bd      	mov	sp, r7
 800f298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f29c:	4770      	bx	lr

0800f29e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f29e:	b480      	push	{r7}
 800f2a0:	b085      	sub	sp, #20
 800f2a2:	af00      	add	r7, sp, #0
 800f2a4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	691b      	ldr	r3, [r3, #16]
 800f2aa:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	685b      	ldr	r3, [r3, #4]
 800f2b0:	687a      	ldr	r2, [r7, #4]
 800f2b2:	6892      	ldr	r2, [r2, #8]
 800f2b4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	689b      	ldr	r3, [r3, #8]
 800f2ba:	687a      	ldr	r2, [r7, #4]
 800f2bc:	6852      	ldr	r2, [r2, #4]
 800f2be:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	685b      	ldr	r3, [r3, #4]
 800f2c4:	687a      	ldr	r2, [r7, #4]
 800f2c6:	429a      	cmp	r2, r3
 800f2c8:	d103      	bne.n	800f2d2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	689a      	ldr	r2, [r3, #8]
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	2200      	movs	r2, #0
 800f2d6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	1e5a      	subs	r2, r3, #1
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	681b      	ldr	r3, [r3, #0]
}
 800f2e6:	4618      	mov	r0, r3
 800f2e8:	3714      	adds	r7, #20
 800f2ea:	46bd      	mov	sp, r7
 800f2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f0:	4770      	bx	lr
	...

0800f2f4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f2f4:	b580      	push	{r7, lr}
 800f2f6:	b084      	sub	sp, #16
 800f2f8:	af00      	add	r7, sp, #0
 800f2fa:	6078      	str	r0, [r7, #4]
 800f2fc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	2b00      	cmp	r3, #0
 800f306:	d109      	bne.n	800f31c <xQueueGenericReset+0x28>
	__asm volatile
 800f308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f30c:	f383 8811 	msr	BASEPRI, r3
 800f310:	f3bf 8f6f 	isb	sy
 800f314:	f3bf 8f4f 	dsb	sy
 800f318:	60bb      	str	r3, [r7, #8]
 800f31a:	e7fe      	b.n	800f31a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800f31c:	f002 f9ee 	bl	80116fc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	681a      	ldr	r2, [r3, #0]
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f328:	68f9      	ldr	r1, [r7, #12]
 800f32a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f32c:	fb01 f303 	mul.w	r3, r1, r3
 800f330:	441a      	add	r2, r3
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	2200      	movs	r2, #0
 800f33a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	681a      	ldr	r2, [r3, #0]
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	681a      	ldr	r2, [r3, #0]
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f34c:	3b01      	subs	r3, #1
 800f34e:	68f9      	ldr	r1, [r7, #12]
 800f350:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f352:	fb01 f303 	mul.w	r3, r1, r3
 800f356:	441a      	add	r2, r3
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	22ff      	movs	r2, #255	; 0xff
 800f360:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	22ff      	movs	r2, #255	; 0xff
 800f368:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800f36c:	683b      	ldr	r3, [r7, #0]
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d114      	bne.n	800f39c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	691b      	ldr	r3, [r3, #16]
 800f376:	2b00      	cmp	r3, #0
 800f378:	d01a      	beq.n	800f3b0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	3310      	adds	r3, #16
 800f37e:	4618      	mov	r0, r3
 800f380:	f001 fada 	bl	8010938 <xTaskRemoveFromEventList>
 800f384:	4603      	mov	r3, r0
 800f386:	2b00      	cmp	r3, #0
 800f388:	d012      	beq.n	800f3b0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f38a:	4b0d      	ldr	r3, [pc, #52]	; (800f3c0 <xQueueGenericReset+0xcc>)
 800f38c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f390:	601a      	str	r2, [r3, #0]
 800f392:	f3bf 8f4f 	dsb	sy
 800f396:	f3bf 8f6f 	isb	sy
 800f39a:	e009      	b.n	800f3b0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	3310      	adds	r3, #16
 800f3a0:	4618      	mov	r0, r3
 800f3a2:	f7ff fef2 	bl	800f18a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	3324      	adds	r3, #36	; 0x24
 800f3aa:	4618      	mov	r0, r3
 800f3ac:	f7ff feed 	bl	800f18a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f3b0:	f002 f9d2 	bl	8011758 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f3b4:	2301      	movs	r3, #1
}
 800f3b6:	4618      	mov	r0, r3
 800f3b8:	3710      	adds	r7, #16
 800f3ba:	46bd      	mov	sp, r7
 800f3bc:	bd80      	pop	{r7, pc}
 800f3be:	bf00      	nop
 800f3c0:	e000ed04 	.word	0xe000ed04

0800f3c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f3c4:	b580      	push	{r7, lr}
 800f3c6:	b08e      	sub	sp, #56	; 0x38
 800f3c8:	af02      	add	r7, sp, #8
 800f3ca:	60f8      	str	r0, [r7, #12]
 800f3cc:	60b9      	str	r1, [r7, #8]
 800f3ce:	607a      	str	r2, [r7, #4]
 800f3d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d109      	bne.n	800f3ec <xQueueGenericCreateStatic+0x28>
 800f3d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3dc:	f383 8811 	msr	BASEPRI, r3
 800f3e0:	f3bf 8f6f 	isb	sy
 800f3e4:	f3bf 8f4f 	dsb	sy
 800f3e8:	62bb      	str	r3, [r7, #40]	; 0x28
 800f3ea:	e7fe      	b.n	800f3ea <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f3ec:	683b      	ldr	r3, [r7, #0]
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d109      	bne.n	800f406 <xQueueGenericCreateStatic+0x42>
 800f3f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3f6:	f383 8811 	msr	BASEPRI, r3
 800f3fa:	f3bf 8f6f 	isb	sy
 800f3fe:	f3bf 8f4f 	dsb	sy
 800f402:	627b      	str	r3, [r7, #36]	; 0x24
 800f404:	e7fe      	b.n	800f404 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d002      	beq.n	800f412 <xQueueGenericCreateStatic+0x4e>
 800f40c:	68bb      	ldr	r3, [r7, #8]
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d001      	beq.n	800f416 <xQueueGenericCreateStatic+0x52>
 800f412:	2301      	movs	r3, #1
 800f414:	e000      	b.n	800f418 <xQueueGenericCreateStatic+0x54>
 800f416:	2300      	movs	r3, #0
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d109      	bne.n	800f430 <xQueueGenericCreateStatic+0x6c>
 800f41c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f420:	f383 8811 	msr	BASEPRI, r3
 800f424:	f3bf 8f6f 	isb	sy
 800f428:	f3bf 8f4f 	dsb	sy
 800f42c:	623b      	str	r3, [r7, #32]
 800f42e:	e7fe      	b.n	800f42e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	2b00      	cmp	r3, #0
 800f434:	d102      	bne.n	800f43c <xQueueGenericCreateStatic+0x78>
 800f436:	68bb      	ldr	r3, [r7, #8]
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d101      	bne.n	800f440 <xQueueGenericCreateStatic+0x7c>
 800f43c:	2301      	movs	r3, #1
 800f43e:	e000      	b.n	800f442 <xQueueGenericCreateStatic+0x7e>
 800f440:	2300      	movs	r3, #0
 800f442:	2b00      	cmp	r3, #0
 800f444:	d109      	bne.n	800f45a <xQueueGenericCreateStatic+0x96>
 800f446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f44a:	f383 8811 	msr	BASEPRI, r3
 800f44e:	f3bf 8f6f 	isb	sy
 800f452:	f3bf 8f4f 	dsb	sy
 800f456:	61fb      	str	r3, [r7, #28]
 800f458:	e7fe      	b.n	800f458 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f45a:	2348      	movs	r3, #72	; 0x48
 800f45c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f45e:	697b      	ldr	r3, [r7, #20]
 800f460:	2b48      	cmp	r3, #72	; 0x48
 800f462:	d009      	beq.n	800f478 <xQueueGenericCreateStatic+0xb4>
 800f464:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f468:	f383 8811 	msr	BASEPRI, r3
 800f46c:	f3bf 8f6f 	isb	sy
 800f470:	f3bf 8f4f 	dsb	sy
 800f474:	61bb      	str	r3, [r7, #24]
 800f476:	e7fe      	b.n	800f476 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f478:	683b      	ldr	r3, [r7, #0]
 800f47a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800f47c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d00d      	beq.n	800f49e <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f484:	2201      	movs	r2, #1
 800f486:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f48a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800f48e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f490:	9300      	str	r3, [sp, #0]
 800f492:	4613      	mov	r3, r2
 800f494:	687a      	ldr	r2, [r7, #4]
 800f496:	68b9      	ldr	r1, [r7, #8]
 800f498:	68f8      	ldr	r0, [r7, #12]
 800f49a:	f000 f842 	bl	800f522 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800f49e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800f4a0:	4618      	mov	r0, r3
 800f4a2:	3730      	adds	r7, #48	; 0x30
 800f4a4:	46bd      	mov	sp, r7
 800f4a6:	bd80      	pop	{r7, pc}

0800f4a8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f4a8:	b580      	push	{r7, lr}
 800f4aa:	b08a      	sub	sp, #40	; 0x28
 800f4ac:	af02      	add	r7, sp, #8
 800f4ae:	60f8      	str	r0, [r7, #12]
 800f4b0:	60b9      	str	r1, [r7, #8]
 800f4b2:	4613      	mov	r3, r2
 800f4b4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d109      	bne.n	800f4d0 <xQueueGenericCreate+0x28>
 800f4bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4c0:	f383 8811 	msr	BASEPRI, r3
 800f4c4:	f3bf 8f6f 	isb	sy
 800f4c8:	f3bf 8f4f 	dsb	sy
 800f4cc:	613b      	str	r3, [r7, #16]
 800f4ce:	e7fe      	b.n	800f4ce <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800f4d0:	68bb      	ldr	r3, [r7, #8]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d102      	bne.n	800f4dc <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800f4d6:	2300      	movs	r3, #0
 800f4d8:	61fb      	str	r3, [r7, #28]
 800f4da:	e004      	b.n	800f4e6 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	68ba      	ldr	r2, [r7, #8]
 800f4e0:	fb02 f303 	mul.w	r3, r2, r3
 800f4e4:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800f4e6:	69fb      	ldr	r3, [r7, #28]
 800f4e8:	3348      	adds	r3, #72	; 0x48
 800f4ea:	4618      	mov	r0, r3
 800f4ec:	f002 fa20 	bl	8011930 <pvPortMalloc>
 800f4f0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f4f2:	69bb      	ldr	r3, [r7, #24]
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d00f      	beq.n	800f518 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800f4f8:	69bb      	ldr	r3, [r7, #24]
 800f4fa:	3348      	adds	r3, #72	; 0x48
 800f4fc:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f4fe:	69bb      	ldr	r3, [r7, #24]
 800f500:	2200      	movs	r2, #0
 800f502:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f506:	79fa      	ldrb	r2, [r7, #7]
 800f508:	69bb      	ldr	r3, [r7, #24]
 800f50a:	9300      	str	r3, [sp, #0]
 800f50c:	4613      	mov	r3, r2
 800f50e:	697a      	ldr	r2, [r7, #20]
 800f510:	68b9      	ldr	r1, [r7, #8]
 800f512:	68f8      	ldr	r0, [r7, #12]
 800f514:	f000 f805 	bl	800f522 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800f518:	69bb      	ldr	r3, [r7, #24]
	}
 800f51a:	4618      	mov	r0, r3
 800f51c:	3720      	adds	r7, #32
 800f51e:	46bd      	mov	sp, r7
 800f520:	bd80      	pop	{r7, pc}

0800f522 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f522:	b580      	push	{r7, lr}
 800f524:	b084      	sub	sp, #16
 800f526:	af00      	add	r7, sp, #0
 800f528:	60f8      	str	r0, [r7, #12]
 800f52a:	60b9      	str	r1, [r7, #8]
 800f52c:	607a      	str	r2, [r7, #4]
 800f52e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f530:	68bb      	ldr	r3, [r7, #8]
 800f532:	2b00      	cmp	r3, #0
 800f534:	d103      	bne.n	800f53e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f536:	69bb      	ldr	r3, [r7, #24]
 800f538:	69ba      	ldr	r2, [r7, #24]
 800f53a:	601a      	str	r2, [r3, #0]
 800f53c:	e002      	b.n	800f544 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f53e:	69bb      	ldr	r3, [r7, #24]
 800f540:	687a      	ldr	r2, [r7, #4]
 800f542:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f544:	69bb      	ldr	r3, [r7, #24]
 800f546:	68fa      	ldr	r2, [r7, #12]
 800f548:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f54a:	69bb      	ldr	r3, [r7, #24]
 800f54c:	68ba      	ldr	r2, [r7, #8]
 800f54e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f550:	2101      	movs	r1, #1
 800f552:	69b8      	ldr	r0, [r7, #24]
 800f554:	f7ff fece 	bl	800f2f4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f558:	bf00      	nop
 800f55a:	3710      	adds	r7, #16
 800f55c:	46bd      	mov	sp, r7
 800f55e:	bd80      	pop	{r7, pc}

0800f560 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800f560:	b580      	push	{r7, lr}
 800f562:	b082      	sub	sp, #8
 800f564:	af00      	add	r7, sp, #0
 800f566:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d00e      	beq.n	800f58c <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	2200      	movs	r2, #0
 800f572:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	2200      	movs	r2, #0
 800f578:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	2200      	movs	r2, #0
 800f57e:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800f580:	2300      	movs	r3, #0
 800f582:	2200      	movs	r2, #0
 800f584:	2100      	movs	r1, #0
 800f586:	6878      	ldr	r0, [r7, #4]
 800f588:	f000 f838 	bl	800f5fc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800f58c:	bf00      	nop
 800f58e:	3708      	adds	r7, #8
 800f590:	46bd      	mov	sp, r7
 800f592:	bd80      	pop	{r7, pc}

0800f594 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800f594:	b580      	push	{r7, lr}
 800f596:	b086      	sub	sp, #24
 800f598:	af00      	add	r7, sp, #0
 800f59a:	4603      	mov	r3, r0
 800f59c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800f59e:	2301      	movs	r3, #1
 800f5a0:	617b      	str	r3, [r7, #20]
 800f5a2:	2300      	movs	r3, #0
 800f5a4:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800f5a6:	79fb      	ldrb	r3, [r7, #7]
 800f5a8:	461a      	mov	r2, r3
 800f5aa:	6939      	ldr	r1, [r7, #16]
 800f5ac:	6978      	ldr	r0, [r7, #20]
 800f5ae:	f7ff ff7b 	bl	800f4a8 <xQueueGenericCreate>
 800f5b2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800f5b4:	68f8      	ldr	r0, [r7, #12]
 800f5b6:	f7ff ffd3 	bl	800f560 <prvInitialiseMutex>

		return pxNewQueue;
 800f5ba:	68fb      	ldr	r3, [r7, #12]
	}
 800f5bc:	4618      	mov	r0, r3
 800f5be:	3718      	adds	r7, #24
 800f5c0:	46bd      	mov	sp, r7
 800f5c2:	bd80      	pop	{r7, pc}

0800f5c4 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800f5c4:	b580      	push	{r7, lr}
 800f5c6:	b088      	sub	sp, #32
 800f5c8:	af02      	add	r7, sp, #8
 800f5ca:	4603      	mov	r3, r0
 800f5cc:	6039      	str	r1, [r7, #0]
 800f5ce:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800f5d0:	2301      	movs	r3, #1
 800f5d2:	617b      	str	r3, [r7, #20]
 800f5d4:	2300      	movs	r3, #0
 800f5d6:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800f5d8:	79fb      	ldrb	r3, [r7, #7]
 800f5da:	9300      	str	r3, [sp, #0]
 800f5dc:	683b      	ldr	r3, [r7, #0]
 800f5de:	2200      	movs	r2, #0
 800f5e0:	6939      	ldr	r1, [r7, #16]
 800f5e2:	6978      	ldr	r0, [r7, #20]
 800f5e4:	f7ff feee 	bl	800f3c4 <xQueueGenericCreateStatic>
 800f5e8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800f5ea:	68f8      	ldr	r0, [r7, #12]
 800f5ec:	f7ff ffb8 	bl	800f560 <prvInitialiseMutex>

		return pxNewQueue;
 800f5f0:	68fb      	ldr	r3, [r7, #12]
	}
 800f5f2:	4618      	mov	r0, r3
 800f5f4:	3718      	adds	r7, #24
 800f5f6:	46bd      	mov	sp, r7
 800f5f8:	bd80      	pop	{r7, pc}
	...

0800f5fc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f5fc:	b580      	push	{r7, lr}
 800f5fe:	b08e      	sub	sp, #56	; 0x38
 800f600:	af00      	add	r7, sp, #0
 800f602:	60f8      	str	r0, [r7, #12]
 800f604:	60b9      	str	r1, [r7, #8]
 800f606:	607a      	str	r2, [r7, #4]
 800f608:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f60a:	2300      	movs	r3, #0
 800f60c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f614:	2b00      	cmp	r3, #0
 800f616:	d109      	bne.n	800f62c <xQueueGenericSend+0x30>
 800f618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f61c:	f383 8811 	msr	BASEPRI, r3
 800f620:	f3bf 8f6f 	isb	sy
 800f624:	f3bf 8f4f 	dsb	sy
 800f628:	62bb      	str	r3, [r7, #40]	; 0x28
 800f62a:	e7fe      	b.n	800f62a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f62c:	68bb      	ldr	r3, [r7, #8]
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d103      	bne.n	800f63a <xQueueGenericSend+0x3e>
 800f632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f636:	2b00      	cmp	r3, #0
 800f638:	d101      	bne.n	800f63e <xQueueGenericSend+0x42>
 800f63a:	2301      	movs	r3, #1
 800f63c:	e000      	b.n	800f640 <xQueueGenericSend+0x44>
 800f63e:	2300      	movs	r3, #0
 800f640:	2b00      	cmp	r3, #0
 800f642:	d109      	bne.n	800f658 <xQueueGenericSend+0x5c>
 800f644:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f648:	f383 8811 	msr	BASEPRI, r3
 800f64c:	f3bf 8f6f 	isb	sy
 800f650:	f3bf 8f4f 	dsb	sy
 800f654:	627b      	str	r3, [r7, #36]	; 0x24
 800f656:	e7fe      	b.n	800f656 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f658:	683b      	ldr	r3, [r7, #0]
 800f65a:	2b02      	cmp	r3, #2
 800f65c:	d103      	bne.n	800f666 <xQueueGenericSend+0x6a>
 800f65e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f662:	2b01      	cmp	r3, #1
 800f664:	d101      	bne.n	800f66a <xQueueGenericSend+0x6e>
 800f666:	2301      	movs	r3, #1
 800f668:	e000      	b.n	800f66c <xQueueGenericSend+0x70>
 800f66a:	2300      	movs	r3, #0
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d109      	bne.n	800f684 <xQueueGenericSend+0x88>
 800f670:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f674:	f383 8811 	msr	BASEPRI, r3
 800f678:	f3bf 8f6f 	isb	sy
 800f67c:	f3bf 8f4f 	dsb	sy
 800f680:	623b      	str	r3, [r7, #32]
 800f682:	e7fe      	b.n	800f682 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f684:	f001 fb14 	bl	8010cb0 <xTaskGetSchedulerState>
 800f688:	4603      	mov	r3, r0
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d102      	bne.n	800f694 <xQueueGenericSend+0x98>
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	2b00      	cmp	r3, #0
 800f692:	d101      	bne.n	800f698 <xQueueGenericSend+0x9c>
 800f694:	2301      	movs	r3, #1
 800f696:	e000      	b.n	800f69a <xQueueGenericSend+0x9e>
 800f698:	2300      	movs	r3, #0
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d109      	bne.n	800f6b2 <xQueueGenericSend+0xb6>
 800f69e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6a2:	f383 8811 	msr	BASEPRI, r3
 800f6a6:	f3bf 8f6f 	isb	sy
 800f6aa:	f3bf 8f4f 	dsb	sy
 800f6ae:	61fb      	str	r3, [r7, #28]
 800f6b0:	e7fe      	b.n	800f6b0 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f6b2:	f002 f823 	bl	80116fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f6b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f6ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f6be:	429a      	cmp	r2, r3
 800f6c0:	d302      	bcc.n	800f6c8 <xQueueGenericSend+0xcc>
 800f6c2:	683b      	ldr	r3, [r7, #0]
 800f6c4:	2b02      	cmp	r3, #2
 800f6c6:	d129      	bne.n	800f71c <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f6c8:	683a      	ldr	r2, [r7, #0]
 800f6ca:	68b9      	ldr	r1, [r7, #8]
 800f6cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f6ce:	f000 fc26 	bl	800ff1e <prvCopyDataToQueue>
 800f6d2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f6d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d010      	beq.n	800f6fe <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f6dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6de:	3324      	adds	r3, #36	; 0x24
 800f6e0:	4618      	mov	r0, r3
 800f6e2:	f001 f929 	bl	8010938 <xTaskRemoveFromEventList>
 800f6e6:	4603      	mov	r3, r0
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d013      	beq.n	800f714 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f6ec:	4b3f      	ldr	r3, [pc, #252]	; (800f7ec <xQueueGenericSend+0x1f0>)
 800f6ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f6f2:	601a      	str	r2, [r3, #0]
 800f6f4:	f3bf 8f4f 	dsb	sy
 800f6f8:	f3bf 8f6f 	isb	sy
 800f6fc:	e00a      	b.n	800f714 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f6fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f700:	2b00      	cmp	r3, #0
 800f702:	d007      	beq.n	800f714 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f704:	4b39      	ldr	r3, [pc, #228]	; (800f7ec <xQueueGenericSend+0x1f0>)
 800f706:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f70a:	601a      	str	r2, [r3, #0]
 800f70c:	f3bf 8f4f 	dsb	sy
 800f710:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f714:	f002 f820 	bl	8011758 <vPortExitCritical>
				return pdPASS;
 800f718:	2301      	movs	r3, #1
 800f71a:	e063      	b.n	800f7e4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d103      	bne.n	800f72a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f722:	f002 f819 	bl	8011758 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f726:	2300      	movs	r3, #0
 800f728:	e05c      	b.n	800f7e4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f72a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d106      	bne.n	800f73e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f730:	f107 0314 	add.w	r3, r7, #20
 800f734:	4618      	mov	r0, r3
 800f736:	f001 f961 	bl	80109fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f73a:	2301      	movs	r3, #1
 800f73c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f73e:	f002 f80b 	bl	8011758 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f742:	f000 ff15 	bl	8010570 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f746:	f001 ffd9 	bl	80116fc <vPortEnterCritical>
 800f74a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f74c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f750:	b25b      	sxtb	r3, r3
 800f752:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f756:	d103      	bne.n	800f760 <xQueueGenericSend+0x164>
 800f758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f75a:	2200      	movs	r2, #0
 800f75c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f762:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f766:	b25b      	sxtb	r3, r3
 800f768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f76c:	d103      	bne.n	800f776 <xQueueGenericSend+0x17a>
 800f76e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f770:	2200      	movs	r2, #0
 800f772:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f776:	f001 ffef 	bl	8011758 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f77a:	1d3a      	adds	r2, r7, #4
 800f77c:	f107 0314 	add.w	r3, r7, #20
 800f780:	4611      	mov	r1, r2
 800f782:	4618      	mov	r0, r3
 800f784:	f001 f950 	bl	8010a28 <xTaskCheckForTimeOut>
 800f788:	4603      	mov	r3, r0
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d124      	bne.n	800f7d8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f78e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f790:	f000 fcbd 	bl	801010e <prvIsQueueFull>
 800f794:	4603      	mov	r3, r0
 800f796:	2b00      	cmp	r3, #0
 800f798:	d018      	beq.n	800f7cc <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f79a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f79c:	3310      	adds	r3, #16
 800f79e:	687a      	ldr	r2, [r7, #4]
 800f7a0:	4611      	mov	r1, r2
 800f7a2:	4618      	mov	r0, r3
 800f7a4:	f001 f8a4 	bl	80108f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f7a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f7aa:	f000 fc48 	bl	801003e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f7ae:	f000 feed 	bl	801058c <xTaskResumeAll>
 800f7b2:	4603      	mov	r3, r0
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	f47f af7c 	bne.w	800f6b2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800f7ba:	4b0c      	ldr	r3, [pc, #48]	; (800f7ec <xQueueGenericSend+0x1f0>)
 800f7bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f7c0:	601a      	str	r2, [r3, #0]
 800f7c2:	f3bf 8f4f 	dsb	sy
 800f7c6:	f3bf 8f6f 	isb	sy
 800f7ca:	e772      	b.n	800f6b2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f7cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f7ce:	f000 fc36 	bl	801003e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f7d2:	f000 fedb 	bl	801058c <xTaskResumeAll>
 800f7d6:	e76c      	b.n	800f6b2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f7d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f7da:	f000 fc30 	bl	801003e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f7de:	f000 fed5 	bl	801058c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f7e2:	2300      	movs	r3, #0
		}
	}
}
 800f7e4:	4618      	mov	r0, r3
 800f7e6:	3738      	adds	r7, #56	; 0x38
 800f7e8:	46bd      	mov	sp, r7
 800f7ea:	bd80      	pop	{r7, pc}
 800f7ec:	e000ed04 	.word	0xe000ed04

0800f7f0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f7f0:	b580      	push	{r7, lr}
 800f7f2:	b08e      	sub	sp, #56	; 0x38
 800f7f4:	af00      	add	r7, sp, #0
 800f7f6:	60f8      	str	r0, [r7, #12]
 800f7f8:	60b9      	str	r1, [r7, #8]
 800f7fa:	607a      	str	r2, [r7, #4]
 800f7fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f804:	2b00      	cmp	r3, #0
 800f806:	d109      	bne.n	800f81c <xQueueGenericSendFromISR+0x2c>
 800f808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f80c:	f383 8811 	msr	BASEPRI, r3
 800f810:	f3bf 8f6f 	isb	sy
 800f814:	f3bf 8f4f 	dsb	sy
 800f818:	627b      	str	r3, [r7, #36]	; 0x24
 800f81a:	e7fe      	b.n	800f81a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f81c:	68bb      	ldr	r3, [r7, #8]
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d103      	bne.n	800f82a <xQueueGenericSendFromISR+0x3a>
 800f822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f826:	2b00      	cmp	r3, #0
 800f828:	d101      	bne.n	800f82e <xQueueGenericSendFromISR+0x3e>
 800f82a:	2301      	movs	r3, #1
 800f82c:	e000      	b.n	800f830 <xQueueGenericSendFromISR+0x40>
 800f82e:	2300      	movs	r3, #0
 800f830:	2b00      	cmp	r3, #0
 800f832:	d109      	bne.n	800f848 <xQueueGenericSendFromISR+0x58>
 800f834:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f838:	f383 8811 	msr	BASEPRI, r3
 800f83c:	f3bf 8f6f 	isb	sy
 800f840:	f3bf 8f4f 	dsb	sy
 800f844:	623b      	str	r3, [r7, #32]
 800f846:	e7fe      	b.n	800f846 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f848:	683b      	ldr	r3, [r7, #0]
 800f84a:	2b02      	cmp	r3, #2
 800f84c:	d103      	bne.n	800f856 <xQueueGenericSendFromISR+0x66>
 800f84e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f852:	2b01      	cmp	r3, #1
 800f854:	d101      	bne.n	800f85a <xQueueGenericSendFromISR+0x6a>
 800f856:	2301      	movs	r3, #1
 800f858:	e000      	b.n	800f85c <xQueueGenericSendFromISR+0x6c>
 800f85a:	2300      	movs	r3, #0
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d109      	bne.n	800f874 <xQueueGenericSendFromISR+0x84>
 800f860:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f864:	f383 8811 	msr	BASEPRI, r3
 800f868:	f3bf 8f6f 	isb	sy
 800f86c:	f3bf 8f4f 	dsb	sy
 800f870:	61fb      	str	r3, [r7, #28]
 800f872:	e7fe      	b.n	800f872 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f874:	f002 f81e 	bl	80118b4 <vPortValidateInterruptPriority>
	__asm volatile
 800f878:	f3ef 8211 	mrs	r2, BASEPRI
 800f87c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f880:	f383 8811 	msr	BASEPRI, r3
 800f884:	f3bf 8f6f 	isb	sy
 800f888:	f3bf 8f4f 	dsb	sy
 800f88c:	61ba      	str	r2, [r7, #24]
 800f88e:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800f890:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f892:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f896:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f89a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f89c:	429a      	cmp	r2, r3
 800f89e:	d302      	bcc.n	800f8a6 <xQueueGenericSendFromISR+0xb6>
 800f8a0:	683b      	ldr	r3, [r7, #0]
 800f8a2:	2b02      	cmp	r3, #2
 800f8a4:	d12c      	bne.n	800f900 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f8a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f8ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f8b0:	683a      	ldr	r2, [r7, #0]
 800f8b2:	68b9      	ldr	r1, [r7, #8]
 800f8b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f8b6:	f000 fb32 	bl	800ff1e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f8ba:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800f8be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8c2:	d112      	bne.n	800f8ea <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f8c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d016      	beq.n	800f8fa <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f8cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8ce:	3324      	adds	r3, #36	; 0x24
 800f8d0:	4618      	mov	r0, r3
 800f8d2:	f001 f831 	bl	8010938 <xTaskRemoveFromEventList>
 800f8d6:	4603      	mov	r3, r0
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d00e      	beq.n	800f8fa <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d00b      	beq.n	800f8fa <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	2201      	movs	r2, #1
 800f8e6:	601a      	str	r2, [r3, #0]
 800f8e8:	e007      	b.n	800f8fa <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f8ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f8ee:	3301      	adds	r3, #1
 800f8f0:	b2db      	uxtb	r3, r3
 800f8f2:	b25a      	sxtb	r2, r3
 800f8f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f8fa:	2301      	movs	r3, #1
 800f8fc:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800f8fe:	e001      	b.n	800f904 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f900:	2300      	movs	r3, #0
 800f902:	637b      	str	r3, [r7, #52]	; 0x34
 800f904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f906:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f908:	693b      	ldr	r3, [r7, #16]
 800f90a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f90e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f910:	4618      	mov	r0, r3
 800f912:	3738      	adds	r7, #56	; 0x38
 800f914:	46bd      	mov	sp, r7
 800f916:	bd80      	pop	{r7, pc}

0800f918 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f918:	b580      	push	{r7, lr}
 800f91a:	b08e      	sub	sp, #56	; 0x38
 800f91c:	af00      	add	r7, sp, #0
 800f91e:	6078      	str	r0, [r7, #4]
 800f920:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800f926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d109      	bne.n	800f940 <xQueueGiveFromISR+0x28>
	__asm volatile
 800f92c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f930:	f383 8811 	msr	BASEPRI, r3
 800f934:	f3bf 8f6f 	isb	sy
 800f938:	f3bf 8f4f 	dsb	sy
 800f93c:	623b      	str	r3, [r7, #32]
 800f93e:	e7fe      	b.n	800f93e <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f944:	2b00      	cmp	r3, #0
 800f946:	d009      	beq.n	800f95c <xQueueGiveFromISR+0x44>
 800f948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f94c:	f383 8811 	msr	BASEPRI, r3
 800f950:	f3bf 8f6f 	isb	sy
 800f954:	f3bf 8f4f 	dsb	sy
 800f958:	61fb      	str	r3, [r7, #28]
 800f95a:	e7fe      	b.n	800f95a <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800f95c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	2b00      	cmp	r3, #0
 800f962:	d103      	bne.n	800f96c <xQueueGiveFromISR+0x54>
 800f964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f966:	685b      	ldr	r3, [r3, #4]
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d101      	bne.n	800f970 <xQueueGiveFromISR+0x58>
 800f96c:	2301      	movs	r3, #1
 800f96e:	e000      	b.n	800f972 <xQueueGiveFromISR+0x5a>
 800f970:	2300      	movs	r3, #0
 800f972:	2b00      	cmp	r3, #0
 800f974:	d109      	bne.n	800f98a <xQueueGiveFromISR+0x72>
 800f976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f97a:	f383 8811 	msr	BASEPRI, r3
 800f97e:	f3bf 8f6f 	isb	sy
 800f982:	f3bf 8f4f 	dsb	sy
 800f986:	61bb      	str	r3, [r7, #24]
 800f988:	e7fe      	b.n	800f988 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f98a:	f001 ff93 	bl	80118b4 <vPortValidateInterruptPriority>
	__asm volatile
 800f98e:	f3ef 8211 	mrs	r2, BASEPRI
 800f992:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f996:	f383 8811 	msr	BASEPRI, r3
 800f99a:	f3bf 8f6f 	isb	sy
 800f99e:	f3bf 8f4f 	dsb	sy
 800f9a2:	617a      	str	r2, [r7, #20]
 800f9a4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800f9a6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f9a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f9aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9ae:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800f9b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f9b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f9b6:	429a      	cmp	r2, r3
 800f9b8:	d22b      	bcs.n	800fa12 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f9ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f9c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f9c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9c6:	1c5a      	adds	r2, r3, #1
 800f9c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9ca:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f9cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f9d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9d4:	d112      	bne.n	800f9fc <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f9d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d016      	beq.n	800fa0c <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f9de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9e0:	3324      	adds	r3, #36	; 0x24
 800f9e2:	4618      	mov	r0, r3
 800f9e4:	f000 ffa8 	bl	8010938 <xTaskRemoveFromEventList>
 800f9e8:	4603      	mov	r3, r0
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d00e      	beq.n	800fa0c <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f9ee:	683b      	ldr	r3, [r7, #0]
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d00b      	beq.n	800fa0c <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f9f4:	683b      	ldr	r3, [r7, #0]
 800f9f6:	2201      	movs	r2, #1
 800f9f8:	601a      	str	r2, [r3, #0]
 800f9fa:	e007      	b.n	800fa0c <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f9fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fa00:	3301      	adds	r3, #1
 800fa02:	b2db      	uxtb	r3, r3
 800fa04:	b25a      	sxtb	r2, r3
 800fa06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800fa0c:	2301      	movs	r3, #1
 800fa0e:	637b      	str	r3, [r7, #52]	; 0x34
 800fa10:	e001      	b.n	800fa16 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800fa12:	2300      	movs	r3, #0
 800fa14:	637b      	str	r3, [r7, #52]	; 0x34
 800fa16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa18:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fa20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800fa22:	4618      	mov	r0, r3
 800fa24:	3738      	adds	r7, #56	; 0x38
 800fa26:	46bd      	mov	sp, r7
 800fa28:	bd80      	pop	{r7, pc}
	...

0800fa2c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800fa2c:	b580      	push	{r7, lr}
 800fa2e:	b08c      	sub	sp, #48	; 0x30
 800fa30:	af00      	add	r7, sp, #0
 800fa32:	60f8      	str	r0, [r7, #12]
 800fa34:	60b9      	str	r1, [r7, #8]
 800fa36:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800fa38:	2300      	movs	r3, #0
 800fa3a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800fa40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d109      	bne.n	800fa5a <xQueueReceive+0x2e>
	__asm volatile
 800fa46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa4a:	f383 8811 	msr	BASEPRI, r3
 800fa4e:	f3bf 8f6f 	isb	sy
 800fa52:	f3bf 8f4f 	dsb	sy
 800fa56:	623b      	str	r3, [r7, #32]
 800fa58:	e7fe      	b.n	800fa58 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fa5a:	68bb      	ldr	r3, [r7, #8]
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d103      	bne.n	800fa68 <xQueueReceive+0x3c>
 800fa60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d101      	bne.n	800fa6c <xQueueReceive+0x40>
 800fa68:	2301      	movs	r3, #1
 800fa6a:	e000      	b.n	800fa6e <xQueueReceive+0x42>
 800fa6c:	2300      	movs	r3, #0
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d109      	bne.n	800fa86 <xQueueReceive+0x5a>
 800fa72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa76:	f383 8811 	msr	BASEPRI, r3
 800fa7a:	f3bf 8f6f 	isb	sy
 800fa7e:	f3bf 8f4f 	dsb	sy
 800fa82:	61fb      	str	r3, [r7, #28]
 800fa84:	e7fe      	b.n	800fa84 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fa86:	f001 f913 	bl	8010cb0 <xTaskGetSchedulerState>
 800fa8a:	4603      	mov	r3, r0
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d102      	bne.n	800fa96 <xQueueReceive+0x6a>
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d101      	bne.n	800fa9a <xQueueReceive+0x6e>
 800fa96:	2301      	movs	r3, #1
 800fa98:	e000      	b.n	800fa9c <xQueueReceive+0x70>
 800fa9a:	2300      	movs	r3, #0
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d109      	bne.n	800fab4 <xQueueReceive+0x88>
 800faa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faa4:	f383 8811 	msr	BASEPRI, r3
 800faa8:	f3bf 8f6f 	isb	sy
 800faac:	f3bf 8f4f 	dsb	sy
 800fab0:	61bb      	str	r3, [r7, #24]
 800fab2:	e7fe      	b.n	800fab2 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800fab4:	f001 fe22 	bl	80116fc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800faba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fabc:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fabe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d01f      	beq.n	800fb04 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800fac4:	68b9      	ldr	r1, [r7, #8]
 800fac6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fac8:	f000 fa93 	bl	800fff2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800facc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800face:	1e5a      	subs	r2, r3, #1
 800fad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fad2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fad6:	691b      	ldr	r3, [r3, #16]
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d00f      	beq.n	800fafc <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fadc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fade:	3310      	adds	r3, #16
 800fae0:	4618      	mov	r0, r3
 800fae2:	f000 ff29 	bl	8010938 <xTaskRemoveFromEventList>
 800fae6:	4603      	mov	r3, r0
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d007      	beq.n	800fafc <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800faec:	4b3c      	ldr	r3, [pc, #240]	; (800fbe0 <xQueueReceive+0x1b4>)
 800faee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800faf2:	601a      	str	r2, [r3, #0]
 800faf4:	f3bf 8f4f 	dsb	sy
 800faf8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800fafc:	f001 fe2c 	bl	8011758 <vPortExitCritical>
				return pdPASS;
 800fb00:	2301      	movs	r3, #1
 800fb02:	e069      	b.n	800fbd8 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d103      	bne.n	800fb12 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800fb0a:	f001 fe25 	bl	8011758 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800fb0e:	2300      	movs	r3, #0
 800fb10:	e062      	b.n	800fbd8 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fb12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d106      	bne.n	800fb26 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fb18:	f107 0310 	add.w	r3, r7, #16
 800fb1c:	4618      	mov	r0, r3
 800fb1e:	f000 ff6d 	bl	80109fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fb22:	2301      	movs	r3, #1
 800fb24:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fb26:	f001 fe17 	bl	8011758 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fb2a:	f000 fd21 	bl	8010570 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fb2e:	f001 fde5 	bl	80116fc <vPortEnterCritical>
 800fb32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fb38:	b25b      	sxtb	r3, r3
 800fb3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb3e:	d103      	bne.n	800fb48 <xQueueReceive+0x11c>
 800fb40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb42:	2200      	movs	r2, #0
 800fb44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fb48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fb4e:	b25b      	sxtb	r3, r3
 800fb50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb54:	d103      	bne.n	800fb5e <xQueueReceive+0x132>
 800fb56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb58:	2200      	movs	r2, #0
 800fb5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fb5e:	f001 fdfb 	bl	8011758 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fb62:	1d3a      	adds	r2, r7, #4
 800fb64:	f107 0310 	add.w	r3, r7, #16
 800fb68:	4611      	mov	r1, r2
 800fb6a:	4618      	mov	r0, r3
 800fb6c:	f000 ff5c 	bl	8010a28 <xTaskCheckForTimeOut>
 800fb70:	4603      	mov	r3, r0
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d123      	bne.n	800fbbe <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fb76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fb78:	f000 fab3 	bl	80100e2 <prvIsQueueEmpty>
 800fb7c:	4603      	mov	r3, r0
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d017      	beq.n	800fbb2 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800fb82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb84:	3324      	adds	r3, #36	; 0x24
 800fb86:	687a      	ldr	r2, [r7, #4]
 800fb88:	4611      	mov	r1, r2
 800fb8a:	4618      	mov	r0, r3
 800fb8c:	f000 feb0 	bl	80108f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800fb90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fb92:	f000 fa54 	bl	801003e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fb96:	f000 fcf9 	bl	801058c <xTaskResumeAll>
 800fb9a:	4603      	mov	r3, r0
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d189      	bne.n	800fab4 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800fba0:	4b0f      	ldr	r3, [pc, #60]	; (800fbe0 <xQueueReceive+0x1b4>)
 800fba2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fba6:	601a      	str	r2, [r3, #0]
 800fba8:	f3bf 8f4f 	dsb	sy
 800fbac:	f3bf 8f6f 	isb	sy
 800fbb0:	e780      	b.n	800fab4 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800fbb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fbb4:	f000 fa43 	bl	801003e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fbb8:	f000 fce8 	bl	801058c <xTaskResumeAll>
 800fbbc:	e77a      	b.n	800fab4 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800fbbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fbc0:	f000 fa3d 	bl	801003e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fbc4:	f000 fce2 	bl	801058c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fbc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fbca:	f000 fa8a 	bl	80100e2 <prvIsQueueEmpty>
 800fbce:	4603      	mov	r3, r0
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	f43f af6f 	beq.w	800fab4 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800fbd6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800fbd8:	4618      	mov	r0, r3
 800fbda:	3730      	adds	r7, #48	; 0x30
 800fbdc:	46bd      	mov	sp, r7
 800fbde:	bd80      	pop	{r7, pc}
 800fbe0:	e000ed04 	.word	0xe000ed04

0800fbe4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800fbe4:	b580      	push	{r7, lr}
 800fbe6:	b08e      	sub	sp, #56	; 0x38
 800fbe8:	af00      	add	r7, sp, #0
 800fbea:	6078      	str	r0, [r7, #4]
 800fbec:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800fbee:	2300      	movs	r3, #0
 800fbf0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800fbf6:	2300      	movs	r3, #0
 800fbf8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800fbfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d109      	bne.n	800fc14 <xQueueSemaphoreTake+0x30>
 800fc00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc04:	f383 8811 	msr	BASEPRI, r3
 800fc08:	f3bf 8f6f 	isb	sy
 800fc0c:	f3bf 8f4f 	dsb	sy
 800fc10:	623b      	str	r3, [r7, #32]
 800fc12:	e7fe      	b.n	800fc12 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800fc14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d009      	beq.n	800fc30 <xQueueSemaphoreTake+0x4c>
 800fc1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc20:	f383 8811 	msr	BASEPRI, r3
 800fc24:	f3bf 8f6f 	isb	sy
 800fc28:	f3bf 8f4f 	dsb	sy
 800fc2c:	61fb      	str	r3, [r7, #28]
 800fc2e:	e7fe      	b.n	800fc2e <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fc30:	f001 f83e 	bl	8010cb0 <xTaskGetSchedulerState>
 800fc34:	4603      	mov	r3, r0
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d102      	bne.n	800fc40 <xQueueSemaphoreTake+0x5c>
 800fc3a:	683b      	ldr	r3, [r7, #0]
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d101      	bne.n	800fc44 <xQueueSemaphoreTake+0x60>
 800fc40:	2301      	movs	r3, #1
 800fc42:	e000      	b.n	800fc46 <xQueueSemaphoreTake+0x62>
 800fc44:	2300      	movs	r3, #0
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d109      	bne.n	800fc5e <xQueueSemaphoreTake+0x7a>
 800fc4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc4e:	f383 8811 	msr	BASEPRI, r3
 800fc52:	f3bf 8f6f 	isb	sy
 800fc56:	f3bf 8f4f 	dsb	sy
 800fc5a:	61bb      	str	r3, [r7, #24]
 800fc5c:	e7fe      	b.n	800fc5c <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800fc5e:	f001 fd4d 	bl	80116fc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800fc62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc66:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800fc68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d024      	beq.n	800fcb8 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800fc6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc70:	1e5a      	subs	r2, r3, #1
 800fc72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc74:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fc76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d104      	bne.n	800fc88 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800fc7e:	f001 f9dd 	bl	801103c <pvTaskIncrementMutexHeldCount>
 800fc82:	4602      	mov	r2, r0
 800fc84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc86:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fc88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc8a:	691b      	ldr	r3, [r3, #16]
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d00f      	beq.n	800fcb0 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fc90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc92:	3310      	adds	r3, #16
 800fc94:	4618      	mov	r0, r3
 800fc96:	f000 fe4f 	bl	8010938 <xTaskRemoveFromEventList>
 800fc9a:	4603      	mov	r3, r0
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d007      	beq.n	800fcb0 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800fca0:	4b53      	ldr	r3, [pc, #332]	; (800fdf0 <xQueueSemaphoreTake+0x20c>)
 800fca2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fca6:	601a      	str	r2, [r3, #0]
 800fca8:	f3bf 8f4f 	dsb	sy
 800fcac:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800fcb0:	f001 fd52 	bl	8011758 <vPortExitCritical>
				return pdPASS;
 800fcb4:	2301      	movs	r3, #1
 800fcb6:	e096      	b.n	800fde6 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fcb8:	683b      	ldr	r3, [r7, #0]
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d110      	bne.n	800fce0 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800fcbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d009      	beq.n	800fcd8 <xQueueSemaphoreTake+0xf4>
 800fcc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcc8:	f383 8811 	msr	BASEPRI, r3
 800fccc:	f3bf 8f6f 	isb	sy
 800fcd0:	f3bf 8f4f 	dsb	sy
 800fcd4:	617b      	str	r3, [r7, #20]
 800fcd6:	e7fe      	b.n	800fcd6 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800fcd8:	f001 fd3e 	bl	8011758 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800fcdc:	2300      	movs	r3, #0
 800fcde:	e082      	b.n	800fde6 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d106      	bne.n	800fcf4 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fce6:	f107 030c 	add.w	r3, r7, #12
 800fcea:	4618      	mov	r0, r3
 800fcec:	f000 fe86 	bl	80109fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fcf0:	2301      	movs	r3, #1
 800fcf2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fcf4:	f001 fd30 	bl	8011758 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fcf8:	f000 fc3a 	bl	8010570 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fcfc:	f001 fcfe 	bl	80116fc <vPortEnterCritical>
 800fd00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fd06:	b25b      	sxtb	r3, r3
 800fd08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd0c:	d103      	bne.n	800fd16 <xQueueSemaphoreTake+0x132>
 800fd0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd10:	2200      	movs	r2, #0
 800fd12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fd16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fd1c:	b25b      	sxtb	r3, r3
 800fd1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd22:	d103      	bne.n	800fd2c <xQueueSemaphoreTake+0x148>
 800fd24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd26:	2200      	movs	r2, #0
 800fd28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fd2c:	f001 fd14 	bl	8011758 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fd30:	463a      	mov	r2, r7
 800fd32:	f107 030c 	add.w	r3, r7, #12
 800fd36:	4611      	mov	r1, r2
 800fd38:	4618      	mov	r0, r3
 800fd3a:	f000 fe75 	bl	8010a28 <xTaskCheckForTimeOut>
 800fd3e:	4603      	mov	r3, r0
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d132      	bne.n	800fdaa <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fd44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fd46:	f000 f9cc 	bl	80100e2 <prvIsQueueEmpty>
 800fd4a:	4603      	mov	r3, r0
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d026      	beq.n	800fd9e <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fd50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d109      	bne.n	800fd6c <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800fd58:	f001 fcd0 	bl	80116fc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800fd5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd5e:	685b      	ldr	r3, [r3, #4]
 800fd60:	4618      	mov	r0, r3
 800fd62:	f000 ffc3 	bl	8010cec <xTaskPriorityInherit>
 800fd66:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800fd68:	f001 fcf6 	bl	8011758 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800fd6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd6e:	3324      	adds	r3, #36	; 0x24
 800fd70:	683a      	ldr	r2, [r7, #0]
 800fd72:	4611      	mov	r1, r2
 800fd74:	4618      	mov	r0, r3
 800fd76:	f000 fdbb 	bl	80108f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800fd7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fd7c:	f000 f95f 	bl	801003e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fd80:	f000 fc04 	bl	801058c <xTaskResumeAll>
 800fd84:	4603      	mov	r3, r0
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	f47f af69 	bne.w	800fc5e <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800fd8c:	4b18      	ldr	r3, [pc, #96]	; (800fdf0 <xQueueSemaphoreTake+0x20c>)
 800fd8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd92:	601a      	str	r2, [r3, #0]
 800fd94:	f3bf 8f4f 	dsb	sy
 800fd98:	f3bf 8f6f 	isb	sy
 800fd9c:	e75f      	b.n	800fc5e <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800fd9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fda0:	f000 f94d 	bl	801003e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fda4:	f000 fbf2 	bl	801058c <xTaskResumeAll>
 800fda8:	e759      	b.n	800fc5e <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800fdaa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fdac:	f000 f947 	bl	801003e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fdb0:	f000 fbec 	bl	801058c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fdb4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fdb6:	f000 f994 	bl	80100e2 <prvIsQueueEmpty>
 800fdba:	4603      	mov	r3, r0
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	f43f af4e 	beq.w	800fc5e <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800fdc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d00d      	beq.n	800fde4 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800fdc8:	f001 fc98 	bl	80116fc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800fdcc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fdce:	f000 f88e 	bl	800feee <prvGetDisinheritPriorityAfterTimeout>
 800fdd2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800fdd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdd6:	685b      	ldr	r3, [r3, #4]
 800fdd8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fdda:	4618      	mov	r0, r3
 800fddc:	f001 f890 	bl	8010f00 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800fde0:	f001 fcba 	bl	8011758 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800fde4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800fde6:	4618      	mov	r0, r3
 800fde8:	3738      	adds	r7, #56	; 0x38
 800fdea:	46bd      	mov	sp, r7
 800fdec:	bd80      	pop	{r7, pc}
 800fdee:	bf00      	nop
 800fdf0:	e000ed04 	.word	0xe000ed04

0800fdf4 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800fdf4:	b580      	push	{r7, lr}
 800fdf6:	b08e      	sub	sp, #56	; 0x38
 800fdf8:	af00      	add	r7, sp, #0
 800fdfa:	60f8      	str	r0, [r7, #12]
 800fdfc:	60b9      	str	r1, [r7, #8]
 800fdfe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800fe04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d109      	bne.n	800fe1e <xQueueReceiveFromISR+0x2a>
 800fe0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe0e:	f383 8811 	msr	BASEPRI, r3
 800fe12:	f3bf 8f6f 	isb	sy
 800fe16:	f3bf 8f4f 	dsb	sy
 800fe1a:	623b      	str	r3, [r7, #32]
 800fe1c:	e7fe      	b.n	800fe1c <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fe1e:	68bb      	ldr	r3, [r7, #8]
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d103      	bne.n	800fe2c <xQueueReceiveFromISR+0x38>
 800fe24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d101      	bne.n	800fe30 <xQueueReceiveFromISR+0x3c>
 800fe2c:	2301      	movs	r3, #1
 800fe2e:	e000      	b.n	800fe32 <xQueueReceiveFromISR+0x3e>
 800fe30:	2300      	movs	r3, #0
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d109      	bne.n	800fe4a <xQueueReceiveFromISR+0x56>
 800fe36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe3a:	f383 8811 	msr	BASEPRI, r3
 800fe3e:	f3bf 8f6f 	isb	sy
 800fe42:	f3bf 8f4f 	dsb	sy
 800fe46:	61fb      	str	r3, [r7, #28]
 800fe48:	e7fe      	b.n	800fe48 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fe4a:	f001 fd33 	bl	80118b4 <vPortValidateInterruptPriority>
	__asm volatile
 800fe4e:	f3ef 8211 	mrs	r2, BASEPRI
 800fe52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe56:	f383 8811 	msr	BASEPRI, r3
 800fe5a:	f3bf 8f6f 	isb	sy
 800fe5e:	f3bf 8f4f 	dsb	sy
 800fe62:	61ba      	str	r2, [r7, #24]
 800fe64:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800fe66:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fe68:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fe6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe6e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fe70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d02f      	beq.n	800fed6 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800fe76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fe7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800fe80:	68b9      	ldr	r1, [r7, #8]
 800fe82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fe84:	f000 f8b5 	bl	800fff2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800fe88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe8a:	1e5a      	subs	r2, r3, #1
 800fe8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe8e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800fe90:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800fe94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe98:	d112      	bne.n	800fec0 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fe9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe9c:	691b      	ldr	r3, [r3, #16]
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d016      	beq.n	800fed0 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fea4:	3310      	adds	r3, #16
 800fea6:	4618      	mov	r0, r3
 800fea8:	f000 fd46 	bl	8010938 <xTaskRemoveFromEventList>
 800feac:	4603      	mov	r3, r0
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d00e      	beq.n	800fed0 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d00b      	beq.n	800fed0 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	2201      	movs	r2, #1
 800febc:	601a      	str	r2, [r3, #0]
 800febe:	e007      	b.n	800fed0 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800fec0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fec4:	3301      	adds	r3, #1
 800fec6:	b2db      	uxtb	r3, r3
 800fec8:	b25a      	sxtb	r2, r3
 800feca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fecc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800fed0:	2301      	movs	r3, #1
 800fed2:	637b      	str	r3, [r7, #52]	; 0x34
 800fed4:	e001      	b.n	800feda <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800fed6:	2300      	movs	r3, #0
 800fed8:	637b      	str	r3, [r7, #52]	; 0x34
 800feda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fedc:	613b      	str	r3, [r7, #16]
	__asm volatile
 800fede:	693b      	ldr	r3, [r7, #16]
 800fee0:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800fee6:	4618      	mov	r0, r3
 800fee8:	3738      	adds	r7, #56	; 0x38
 800feea:	46bd      	mov	sp, r7
 800feec:	bd80      	pop	{r7, pc}

0800feee <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800feee:	b480      	push	{r7}
 800fef0:	b085      	sub	sp, #20
 800fef2:	af00      	add	r7, sp, #0
 800fef4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d006      	beq.n	800ff0c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	f1c3 0307 	rsb	r3, r3, #7
 800ff08:	60fb      	str	r3, [r7, #12]
 800ff0a:	e001      	b.n	800ff10 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ff0c:	2300      	movs	r3, #0
 800ff0e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ff10:	68fb      	ldr	r3, [r7, #12]
	}
 800ff12:	4618      	mov	r0, r3
 800ff14:	3714      	adds	r7, #20
 800ff16:	46bd      	mov	sp, r7
 800ff18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff1c:	4770      	bx	lr

0800ff1e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ff1e:	b580      	push	{r7, lr}
 800ff20:	b086      	sub	sp, #24
 800ff22:	af00      	add	r7, sp, #0
 800ff24:	60f8      	str	r0, [r7, #12]
 800ff26:	60b9      	str	r1, [r7, #8]
 800ff28:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ff2a:	2300      	movs	r3, #0
 800ff2c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ff2e:	68fb      	ldr	r3, [r7, #12]
 800ff30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff32:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d10d      	bne.n	800ff58 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d14d      	bne.n	800ffe0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	685b      	ldr	r3, [r3, #4]
 800ff48:	4618      	mov	r0, r3
 800ff4a:	f000 ff55 	bl	8010df8 <xTaskPriorityDisinherit>
 800ff4e:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	2200      	movs	r2, #0
 800ff54:	605a      	str	r2, [r3, #4]
 800ff56:	e043      	b.n	800ffe0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d119      	bne.n	800ff92 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800ff5e:	68fb      	ldr	r3, [r7, #12]
 800ff60:	6898      	ldr	r0, [r3, #8]
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff66:	461a      	mov	r2, r3
 800ff68:	68b9      	ldr	r1, [r7, #8]
 800ff6a:	f002 fc31 	bl	80127d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	689a      	ldr	r2, [r3, #8]
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff76:	441a      	add	r2, r3
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	689a      	ldr	r2, [r3, #8]
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	685b      	ldr	r3, [r3, #4]
 800ff84:	429a      	cmp	r2, r3
 800ff86:	d32b      	bcc.n	800ffe0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	681a      	ldr	r2, [r3, #0]
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	609a      	str	r2, [r3, #8]
 800ff90:	e026      	b.n	800ffe0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ff92:	68fb      	ldr	r3, [r7, #12]
 800ff94:	68d8      	ldr	r0, [r3, #12]
 800ff96:	68fb      	ldr	r3, [r7, #12]
 800ff98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff9a:	461a      	mov	r2, r3
 800ff9c:	68b9      	ldr	r1, [r7, #8]
 800ff9e:	f002 fc17 	bl	80127d0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800ffa2:	68fb      	ldr	r3, [r7, #12]
 800ffa4:	68da      	ldr	r2, [r3, #12]
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ffaa:	425b      	negs	r3, r3
 800ffac:	441a      	add	r2, r3
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	68da      	ldr	r2, [r3, #12]
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	429a      	cmp	r2, r3
 800ffbc:	d207      	bcs.n	800ffce <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	685a      	ldr	r2, [r3, #4]
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ffc6:	425b      	negs	r3, r3
 800ffc8:	441a      	add	r2, r3
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	2b02      	cmp	r3, #2
 800ffd2:	d105      	bne.n	800ffe0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ffd4:	693b      	ldr	r3, [r7, #16]
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d002      	beq.n	800ffe0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ffda:	693b      	ldr	r3, [r7, #16]
 800ffdc:	3b01      	subs	r3, #1
 800ffde:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ffe0:	693b      	ldr	r3, [r7, #16]
 800ffe2:	1c5a      	adds	r2, r3, #1
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ffe8:	697b      	ldr	r3, [r7, #20]
}
 800ffea:	4618      	mov	r0, r3
 800ffec:	3718      	adds	r7, #24
 800ffee:	46bd      	mov	sp, r7
 800fff0:	bd80      	pop	{r7, pc}

0800fff2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800fff2:	b580      	push	{r7, lr}
 800fff4:	b082      	sub	sp, #8
 800fff6:	af00      	add	r7, sp, #0
 800fff8:	6078      	str	r0, [r7, #4]
 800fffa:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010000:	2b00      	cmp	r3, #0
 8010002:	d018      	beq.n	8010036 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	68da      	ldr	r2, [r3, #12]
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801000c:	441a      	add	r2, r3
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	68da      	ldr	r2, [r3, #12]
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	685b      	ldr	r3, [r3, #4]
 801001a:	429a      	cmp	r2, r3
 801001c:	d303      	bcc.n	8010026 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	681a      	ldr	r2, [r3, #0]
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	68d9      	ldr	r1, [r3, #12]
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801002e:	461a      	mov	r2, r3
 8010030:	6838      	ldr	r0, [r7, #0]
 8010032:	f002 fbcd 	bl	80127d0 <memcpy>
	}
}
 8010036:	bf00      	nop
 8010038:	3708      	adds	r7, #8
 801003a:	46bd      	mov	sp, r7
 801003c:	bd80      	pop	{r7, pc}

0801003e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801003e:	b580      	push	{r7, lr}
 8010040:	b084      	sub	sp, #16
 8010042:	af00      	add	r7, sp, #0
 8010044:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010046:	f001 fb59 	bl	80116fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010050:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010052:	e011      	b.n	8010078 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010058:	2b00      	cmp	r3, #0
 801005a:	d012      	beq.n	8010082 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	3324      	adds	r3, #36	; 0x24
 8010060:	4618      	mov	r0, r3
 8010062:	f000 fc69 	bl	8010938 <xTaskRemoveFromEventList>
 8010066:	4603      	mov	r3, r0
 8010068:	2b00      	cmp	r3, #0
 801006a:	d001      	beq.n	8010070 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801006c:	f000 fd3c 	bl	8010ae8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010070:	7bfb      	ldrb	r3, [r7, #15]
 8010072:	3b01      	subs	r3, #1
 8010074:	b2db      	uxtb	r3, r3
 8010076:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010078:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801007c:	2b00      	cmp	r3, #0
 801007e:	dce9      	bgt.n	8010054 <prvUnlockQueue+0x16>
 8010080:	e000      	b.n	8010084 <prvUnlockQueue+0x46>
					break;
 8010082:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	22ff      	movs	r2, #255	; 0xff
 8010088:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801008c:	f001 fb64 	bl	8011758 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010090:	f001 fb34 	bl	80116fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801009a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801009c:	e011      	b.n	80100c2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	691b      	ldr	r3, [r3, #16]
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d012      	beq.n	80100cc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	3310      	adds	r3, #16
 80100aa:	4618      	mov	r0, r3
 80100ac:	f000 fc44 	bl	8010938 <xTaskRemoveFromEventList>
 80100b0:	4603      	mov	r3, r0
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d001      	beq.n	80100ba <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80100b6:	f000 fd17 	bl	8010ae8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80100ba:	7bbb      	ldrb	r3, [r7, #14]
 80100bc:	3b01      	subs	r3, #1
 80100be:	b2db      	uxtb	r3, r3
 80100c0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80100c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	dce9      	bgt.n	801009e <prvUnlockQueue+0x60>
 80100ca:	e000      	b.n	80100ce <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80100cc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	22ff      	movs	r2, #255	; 0xff
 80100d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80100d6:	f001 fb3f 	bl	8011758 <vPortExitCritical>
}
 80100da:	bf00      	nop
 80100dc:	3710      	adds	r7, #16
 80100de:	46bd      	mov	sp, r7
 80100e0:	bd80      	pop	{r7, pc}

080100e2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80100e2:	b580      	push	{r7, lr}
 80100e4:	b084      	sub	sp, #16
 80100e6:	af00      	add	r7, sp, #0
 80100e8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80100ea:	f001 fb07 	bl	80116fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d102      	bne.n	80100fc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80100f6:	2301      	movs	r3, #1
 80100f8:	60fb      	str	r3, [r7, #12]
 80100fa:	e001      	b.n	8010100 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80100fc:	2300      	movs	r3, #0
 80100fe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010100:	f001 fb2a 	bl	8011758 <vPortExitCritical>

	return xReturn;
 8010104:	68fb      	ldr	r3, [r7, #12]
}
 8010106:	4618      	mov	r0, r3
 8010108:	3710      	adds	r7, #16
 801010a:	46bd      	mov	sp, r7
 801010c:	bd80      	pop	{r7, pc}

0801010e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801010e:	b580      	push	{r7, lr}
 8010110:	b084      	sub	sp, #16
 8010112:	af00      	add	r7, sp, #0
 8010114:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010116:	f001 faf1 	bl	80116fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010122:	429a      	cmp	r2, r3
 8010124:	d102      	bne.n	801012c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010126:	2301      	movs	r3, #1
 8010128:	60fb      	str	r3, [r7, #12]
 801012a:	e001      	b.n	8010130 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801012c:	2300      	movs	r3, #0
 801012e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010130:	f001 fb12 	bl	8011758 <vPortExitCritical>

	return xReturn;
 8010134:	68fb      	ldr	r3, [r7, #12]
}
 8010136:	4618      	mov	r0, r3
 8010138:	3710      	adds	r7, #16
 801013a:	46bd      	mov	sp, r7
 801013c:	bd80      	pop	{r7, pc}

0801013e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801013e:	b580      	push	{r7, lr}
 8010140:	b08e      	sub	sp, #56	; 0x38
 8010142:	af04      	add	r7, sp, #16
 8010144:	60f8      	str	r0, [r7, #12]
 8010146:	60b9      	str	r1, [r7, #8]
 8010148:	607a      	str	r2, [r7, #4]
 801014a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801014c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801014e:	2b00      	cmp	r3, #0
 8010150:	d109      	bne.n	8010166 <xTaskCreateStatic+0x28>
	__asm volatile
 8010152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010156:	f383 8811 	msr	BASEPRI, r3
 801015a:	f3bf 8f6f 	isb	sy
 801015e:	f3bf 8f4f 	dsb	sy
 8010162:	623b      	str	r3, [r7, #32]
 8010164:	e7fe      	b.n	8010164 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8010166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010168:	2b00      	cmp	r3, #0
 801016a:	d109      	bne.n	8010180 <xTaskCreateStatic+0x42>
 801016c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010170:	f383 8811 	msr	BASEPRI, r3
 8010174:	f3bf 8f6f 	isb	sy
 8010178:	f3bf 8f4f 	dsb	sy
 801017c:	61fb      	str	r3, [r7, #28]
 801017e:	e7fe      	b.n	801017e <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010180:	2354      	movs	r3, #84	; 0x54
 8010182:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010184:	693b      	ldr	r3, [r7, #16]
 8010186:	2b54      	cmp	r3, #84	; 0x54
 8010188:	d009      	beq.n	801019e <xTaskCreateStatic+0x60>
 801018a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801018e:	f383 8811 	msr	BASEPRI, r3
 8010192:	f3bf 8f6f 	isb	sy
 8010196:	f3bf 8f4f 	dsb	sy
 801019a:	61bb      	str	r3, [r7, #24]
 801019c:	e7fe      	b.n	801019c <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801019e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d01e      	beq.n	80101e2 <xTaskCreateStatic+0xa4>
 80101a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d01b      	beq.n	80101e2 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80101aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101ac:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80101ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80101b2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80101b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101b6:	2202      	movs	r2, #2
 80101b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80101bc:	2300      	movs	r3, #0
 80101be:	9303      	str	r3, [sp, #12]
 80101c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101c2:	9302      	str	r3, [sp, #8]
 80101c4:	f107 0314 	add.w	r3, r7, #20
 80101c8:	9301      	str	r3, [sp, #4]
 80101ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101cc:	9300      	str	r3, [sp, #0]
 80101ce:	683b      	ldr	r3, [r7, #0]
 80101d0:	687a      	ldr	r2, [r7, #4]
 80101d2:	68b9      	ldr	r1, [r7, #8]
 80101d4:	68f8      	ldr	r0, [r7, #12]
 80101d6:	f000 f850 	bl	801027a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80101da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80101dc:	f000 f8cc 	bl	8010378 <prvAddNewTaskToReadyList>
 80101e0:	e001      	b.n	80101e6 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80101e2:	2300      	movs	r3, #0
 80101e4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80101e6:	697b      	ldr	r3, [r7, #20]
	}
 80101e8:	4618      	mov	r0, r3
 80101ea:	3728      	adds	r7, #40	; 0x28
 80101ec:	46bd      	mov	sp, r7
 80101ee:	bd80      	pop	{r7, pc}

080101f0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80101f0:	b580      	push	{r7, lr}
 80101f2:	b08c      	sub	sp, #48	; 0x30
 80101f4:	af04      	add	r7, sp, #16
 80101f6:	60f8      	str	r0, [r7, #12]
 80101f8:	60b9      	str	r1, [r7, #8]
 80101fa:	603b      	str	r3, [r7, #0]
 80101fc:	4613      	mov	r3, r2
 80101fe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010200:	88fb      	ldrh	r3, [r7, #6]
 8010202:	009b      	lsls	r3, r3, #2
 8010204:	4618      	mov	r0, r3
 8010206:	f001 fb93 	bl	8011930 <pvPortMalloc>
 801020a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801020c:	697b      	ldr	r3, [r7, #20]
 801020e:	2b00      	cmp	r3, #0
 8010210:	d00e      	beq.n	8010230 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8010212:	2054      	movs	r0, #84	; 0x54
 8010214:	f001 fb8c 	bl	8011930 <pvPortMalloc>
 8010218:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801021a:	69fb      	ldr	r3, [r7, #28]
 801021c:	2b00      	cmp	r3, #0
 801021e:	d003      	beq.n	8010228 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010220:	69fb      	ldr	r3, [r7, #28]
 8010222:	697a      	ldr	r2, [r7, #20]
 8010224:	631a      	str	r2, [r3, #48]	; 0x30
 8010226:	e005      	b.n	8010234 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010228:	6978      	ldr	r0, [r7, #20]
 801022a:	f001 fc43 	bl	8011ab4 <vPortFree>
 801022e:	e001      	b.n	8010234 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010230:	2300      	movs	r3, #0
 8010232:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010234:	69fb      	ldr	r3, [r7, #28]
 8010236:	2b00      	cmp	r3, #0
 8010238:	d017      	beq.n	801026a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801023a:	69fb      	ldr	r3, [r7, #28]
 801023c:	2200      	movs	r2, #0
 801023e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010242:	88fa      	ldrh	r2, [r7, #6]
 8010244:	2300      	movs	r3, #0
 8010246:	9303      	str	r3, [sp, #12]
 8010248:	69fb      	ldr	r3, [r7, #28]
 801024a:	9302      	str	r3, [sp, #8]
 801024c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801024e:	9301      	str	r3, [sp, #4]
 8010250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010252:	9300      	str	r3, [sp, #0]
 8010254:	683b      	ldr	r3, [r7, #0]
 8010256:	68b9      	ldr	r1, [r7, #8]
 8010258:	68f8      	ldr	r0, [r7, #12]
 801025a:	f000 f80e 	bl	801027a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801025e:	69f8      	ldr	r0, [r7, #28]
 8010260:	f000 f88a 	bl	8010378 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010264:	2301      	movs	r3, #1
 8010266:	61bb      	str	r3, [r7, #24]
 8010268:	e002      	b.n	8010270 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801026a:	f04f 33ff 	mov.w	r3, #4294967295
 801026e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010270:	69bb      	ldr	r3, [r7, #24]
	}
 8010272:	4618      	mov	r0, r3
 8010274:	3720      	adds	r7, #32
 8010276:	46bd      	mov	sp, r7
 8010278:	bd80      	pop	{r7, pc}

0801027a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801027a:	b580      	push	{r7, lr}
 801027c:	b088      	sub	sp, #32
 801027e:	af00      	add	r7, sp, #0
 8010280:	60f8      	str	r0, [r7, #12]
 8010282:	60b9      	str	r1, [r7, #8]
 8010284:	607a      	str	r2, [r7, #4]
 8010286:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8010288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801028a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8010292:	3b01      	subs	r3, #1
 8010294:	009b      	lsls	r3, r3, #2
 8010296:	4413      	add	r3, r2
 8010298:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 801029a:	69bb      	ldr	r3, [r7, #24]
 801029c:	f023 0307 	bic.w	r3, r3, #7
 80102a0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80102a2:	69bb      	ldr	r3, [r7, #24]
 80102a4:	f003 0307 	and.w	r3, r3, #7
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d009      	beq.n	80102c0 <prvInitialiseNewTask+0x46>
 80102ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102b0:	f383 8811 	msr	BASEPRI, r3
 80102b4:	f3bf 8f6f 	isb	sy
 80102b8:	f3bf 8f4f 	dsb	sy
 80102bc:	617b      	str	r3, [r7, #20]
 80102be:	e7fe      	b.n	80102be <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80102c0:	2300      	movs	r3, #0
 80102c2:	61fb      	str	r3, [r7, #28]
 80102c4:	e012      	b.n	80102ec <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80102c6:	68ba      	ldr	r2, [r7, #8]
 80102c8:	69fb      	ldr	r3, [r7, #28]
 80102ca:	4413      	add	r3, r2
 80102cc:	7819      	ldrb	r1, [r3, #0]
 80102ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80102d0:	69fb      	ldr	r3, [r7, #28]
 80102d2:	4413      	add	r3, r2
 80102d4:	3334      	adds	r3, #52	; 0x34
 80102d6:	460a      	mov	r2, r1
 80102d8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80102da:	68ba      	ldr	r2, [r7, #8]
 80102dc:	69fb      	ldr	r3, [r7, #28]
 80102de:	4413      	add	r3, r2
 80102e0:	781b      	ldrb	r3, [r3, #0]
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d006      	beq.n	80102f4 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80102e6:	69fb      	ldr	r3, [r7, #28]
 80102e8:	3301      	adds	r3, #1
 80102ea:	61fb      	str	r3, [r7, #28]
 80102ec:	69fb      	ldr	r3, [r7, #28]
 80102ee:	2b0f      	cmp	r3, #15
 80102f0:	d9e9      	bls.n	80102c6 <prvInitialiseNewTask+0x4c>
 80102f2:	e000      	b.n	80102f6 <prvInitialiseNewTask+0x7c>
		{
			break;
 80102f4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80102f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102f8:	2200      	movs	r2, #0
 80102fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80102fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010300:	2b06      	cmp	r3, #6
 8010302:	d901      	bls.n	8010308 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010304:	2306      	movs	r3, #6
 8010306:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801030a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801030c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801030e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010310:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010312:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8010314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010316:	2200      	movs	r2, #0
 8010318:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801031a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801031c:	3304      	adds	r3, #4
 801031e:	4618      	mov	r0, r3
 8010320:	f7fe ff53 	bl	800f1ca <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010326:	3318      	adds	r3, #24
 8010328:	4618      	mov	r0, r3
 801032a:	f7fe ff4e 	bl	800f1ca <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801032e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010330:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010332:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010336:	f1c3 0207 	rsb	r2, r3, #7
 801033a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801033c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801033e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010340:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010342:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010346:	2200      	movs	r2, #0
 8010348:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801034a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801034c:	2200      	movs	r2, #0
 801034e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010352:	683a      	ldr	r2, [r7, #0]
 8010354:	68f9      	ldr	r1, [r7, #12]
 8010356:	69b8      	ldr	r0, [r7, #24]
 8010358:	f001 f8aa 	bl	80114b0 <pxPortInitialiseStack>
 801035c:	4602      	mov	r2, r0
 801035e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010360:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8010362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010364:	2b00      	cmp	r3, #0
 8010366:	d002      	beq.n	801036e <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801036a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801036c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801036e:	bf00      	nop
 8010370:	3720      	adds	r7, #32
 8010372:	46bd      	mov	sp, r7
 8010374:	bd80      	pop	{r7, pc}
	...

08010378 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010378:	b580      	push	{r7, lr}
 801037a:	b082      	sub	sp, #8
 801037c:	af00      	add	r7, sp, #0
 801037e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010380:	f001 f9bc 	bl	80116fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010384:	4b2a      	ldr	r3, [pc, #168]	; (8010430 <prvAddNewTaskToReadyList+0xb8>)
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	3301      	adds	r3, #1
 801038a:	4a29      	ldr	r2, [pc, #164]	; (8010430 <prvAddNewTaskToReadyList+0xb8>)
 801038c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801038e:	4b29      	ldr	r3, [pc, #164]	; (8010434 <prvAddNewTaskToReadyList+0xbc>)
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	2b00      	cmp	r3, #0
 8010394:	d109      	bne.n	80103aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010396:	4a27      	ldr	r2, [pc, #156]	; (8010434 <prvAddNewTaskToReadyList+0xbc>)
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801039c:	4b24      	ldr	r3, [pc, #144]	; (8010430 <prvAddNewTaskToReadyList+0xb8>)
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	2b01      	cmp	r3, #1
 80103a2:	d110      	bne.n	80103c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80103a4:	f000 fbc4 	bl	8010b30 <prvInitialiseTaskLists>
 80103a8:	e00d      	b.n	80103c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80103aa:	4b23      	ldr	r3, [pc, #140]	; (8010438 <prvAddNewTaskToReadyList+0xc0>)
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d109      	bne.n	80103c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80103b2:	4b20      	ldr	r3, [pc, #128]	; (8010434 <prvAddNewTaskToReadyList+0xbc>)
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103bc:	429a      	cmp	r2, r3
 80103be:	d802      	bhi.n	80103c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80103c0:	4a1c      	ldr	r2, [pc, #112]	; (8010434 <prvAddNewTaskToReadyList+0xbc>)
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80103c6:	4b1d      	ldr	r3, [pc, #116]	; (801043c <prvAddNewTaskToReadyList+0xc4>)
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	3301      	adds	r3, #1
 80103cc:	4a1b      	ldr	r2, [pc, #108]	; (801043c <prvAddNewTaskToReadyList+0xc4>)
 80103ce:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103d4:	2201      	movs	r2, #1
 80103d6:	409a      	lsls	r2, r3
 80103d8:	4b19      	ldr	r3, [pc, #100]	; (8010440 <prvAddNewTaskToReadyList+0xc8>)
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	4313      	orrs	r3, r2
 80103de:	4a18      	ldr	r2, [pc, #96]	; (8010440 <prvAddNewTaskToReadyList+0xc8>)
 80103e0:	6013      	str	r3, [r2, #0]
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103e6:	4613      	mov	r3, r2
 80103e8:	009b      	lsls	r3, r3, #2
 80103ea:	4413      	add	r3, r2
 80103ec:	009b      	lsls	r3, r3, #2
 80103ee:	4a15      	ldr	r2, [pc, #84]	; (8010444 <prvAddNewTaskToReadyList+0xcc>)
 80103f0:	441a      	add	r2, r3
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	3304      	adds	r3, #4
 80103f6:	4619      	mov	r1, r3
 80103f8:	4610      	mov	r0, r2
 80103fa:	f7fe fef3 	bl	800f1e4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80103fe:	f001 f9ab 	bl	8011758 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010402:	4b0d      	ldr	r3, [pc, #52]	; (8010438 <prvAddNewTaskToReadyList+0xc0>)
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	2b00      	cmp	r3, #0
 8010408:	d00e      	beq.n	8010428 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801040a:	4b0a      	ldr	r3, [pc, #40]	; (8010434 <prvAddNewTaskToReadyList+0xbc>)
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010414:	429a      	cmp	r2, r3
 8010416:	d207      	bcs.n	8010428 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010418:	4b0b      	ldr	r3, [pc, #44]	; (8010448 <prvAddNewTaskToReadyList+0xd0>)
 801041a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801041e:	601a      	str	r2, [r3, #0]
 8010420:	f3bf 8f4f 	dsb	sy
 8010424:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010428:	bf00      	nop
 801042a:	3708      	adds	r7, #8
 801042c:	46bd      	mov	sp, r7
 801042e:	bd80      	pop	{r7, pc}
 8010430:	20001588 	.word	0x20001588
 8010434:	20001488 	.word	0x20001488
 8010438:	20001594 	.word	0x20001594
 801043c:	200015a4 	.word	0x200015a4
 8010440:	20001590 	.word	0x20001590
 8010444:	2000148c 	.word	0x2000148c
 8010448:	e000ed04 	.word	0xe000ed04

0801044c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801044c:	b580      	push	{r7, lr}
 801044e:	b084      	sub	sp, #16
 8010450:	af00      	add	r7, sp, #0
 8010452:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010454:	2300      	movs	r3, #0
 8010456:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	2b00      	cmp	r3, #0
 801045c:	d016      	beq.n	801048c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801045e:	4b13      	ldr	r3, [pc, #76]	; (80104ac <vTaskDelay+0x60>)
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	2b00      	cmp	r3, #0
 8010464:	d009      	beq.n	801047a <vTaskDelay+0x2e>
 8010466:	f04f 0350 	mov.w	r3, #80	; 0x50
 801046a:	f383 8811 	msr	BASEPRI, r3
 801046e:	f3bf 8f6f 	isb	sy
 8010472:	f3bf 8f4f 	dsb	sy
 8010476:	60bb      	str	r3, [r7, #8]
 8010478:	e7fe      	b.n	8010478 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 801047a:	f000 f879 	bl	8010570 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801047e:	2100      	movs	r1, #0
 8010480:	6878      	ldr	r0, [r7, #4]
 8010482:	f000 ffaf 	bl	80113e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010486:	f000 f881 	bl	801058c <xTaskResumeAll>
 801048a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	2b00      	cmp	r3, #0
 8010490:	d107      	bne.n	80104a2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8010492:	4b07      	ldr	r3, [pc, #28]	; (80104b0 <vTaskDelay+0x64>)
 8010494:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010498:	601a      	str	r2, [r3, #0]
 801049a:	f3bf 8f4f 	dsb	sy
 801049e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80104a2:	bf00      	nop
 80104a4:	3710      	adds	r7, #16
 80104a6:	46bd      	mov	sp, r7
 80104a8:	bd80      	pop	{r7, pc}
 80104aa:	bf00      	nop
 80104ac:	200015b0 	.word	0x200015b0
 80104b0:	e000ed04 	.word	0xe000ed04

080104b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80104b4:	b580      	push	{r7, lr}
 80104b6:	b08a      	sub	sp, #40	; 0x28
 80104b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80104ba:	2300      	movs	r3, #0
 80104bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80104be:	2300      	movs	r3, #0
 80104c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80104c2:	463a      	mov	r2, r7
 80104c4:	1d39      	adds	r1, r7, #4
 80104c6:	f107 0308 	add.w	r3, r7, #8
 80104ca:	4618      	mov	r0, r3
 80104cc:	f7f1 fd54 	bl	8001f78 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80104d0:	6839      	ldr	r1, [r7, #0]
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	68ba      	ldr	r2, [r7, #8]
 80104d6:	9202      	str	r2, [sp, #8]
 80104d8:	9301      	str	r3, [sp, #4]
 80104da:	2300      	movs	r3, #0
 80104dc:	9300      	str	r3, [sp, #0]
 80104de:	2300      	movs	r3, #0
 80104e0:	460a      	mov	r2, r1
 80104e2:	491d      	ldr	r1, [pc, #116]	; (8010558 <vTaskStartScheduler+0xa4>)
 80104e4:	481d      	ldr	r0, [pc, #116]	; (801055c <vTaskStartScheduler+0xa8>)
 80104e6:	f7ff fe2a 	bl	801013e <xTaskCreateStatic>
 80104ea:	4602      	mov	r2, r0
 80104ec:	4b1c      	ldr	r3, [pc, #112]	; (8010560 <vTaskStartScheduler+0xac>)
 80104ee:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80104f0:	4b1b      	ldr	r3, [pc, #108]	; (8010560 <vTaskStartScheduler+0xac>)
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d002      	beq.n	80104fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80104f8:	2301      	movs	r3, #1
 80104fa:	617b      	str	r3, [r7, #20]
 80104fc:	e001      	b.n	8010502 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80104fe:	2300      	movs	r3, #0
 8010500:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8010502:	697b      	ldr	r3, [r7, #20]
 8010504:	2b01      	cmp	r3, #1
 8010506:	d115      	bne.n	8010534 <vTaskStartScheduler+0x80>
 8010508:	f04f 0350 	mov.w	r3, #80	; 0x50
 801050c:	f383 8811 	msr	BASEPRI, r3
 8010510:	f3bf 8f6f 	isb	sy
 8010514:	f3bf 8f4f 	dsb	sy
 8010518:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801051a:	4b12      	ldr	r3, [pc, #72]	; (8010564 <vTaskStartScheduler+0xb0>)
 801051c:	f04f 32ff 	mov.w	r2, #4294967295
 8010520:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8010522:	4b11      	ldr	r3, [pc, #68]	; (8010568 <vTaskStartScheduler+0xb4>)
 8010524:	2201      	movs	r2, #1
 8010526:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8010528:	4b10      	ldr	r3, [pc, #64]	; (801056c <vTaskStartScheduler+0xb8>)
 801052a:	2200      	movs	r2, #0
 801052c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801052e:	f001 f847 	bl	80115c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8010532:	e00d      	b.n	8010550 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010534:	697b      	ldr	r3, [r7, #20]
 8010536:	f1b3 3fff 	cmp.w	r3, #4294967295
 801053a:	d109      	bne.n	8010550 <vTaskStartScheduler+0x9c>
 801053c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010540:	f383 8811 	msr	BASEPRI, r3
 8010544:	f3bf 8f6f 	isb	sy
 8010548:	f3bf 8f4f 	dsb	sy
 801054c:	60fb      	str	r3, [r7, #12]
 801054e:	e7fe      	b.n	801054e <vTaskStartScheduler+0x9a>
}
 8010550:	bf00      	nop
 8010552:	3718      	adds	r7, #24
 8010554:	46bd      	mov	sp, r7
 8010556:	bd80      	pop	{r7, pc}
 8010558:	08018928 	.word	0x08018928
 801055c:	08010b01 	.word	0x08010b01
 8010560:	200015ac 	.word	0x200015ac
 8010564:	200015a8 	.word	0x200015a8
 8010568:	20001594 	.word	0x20001594
 801056c:	2000158c 	.word	0x2000158c

08010570 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010570:	b480      	push	{r7}
 8010572:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8010574:	4b04      	ldr	r3, [pc, #16]	; (8010588 <vTaskSuspendAll+0x18>)
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	3301      	adds	r3, #1
 801057a:	4a03      	ldr	r2, [pc, #12]	; (8010588 <vTaskSuspendAll+0x18>)
 801057c:	6013      	str	r3, [r2, #0]
}
 801057e:	bf00      	nop
 8010580:	46bd      	mov	sp, r7
 8010582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010586:	4770      	bx	lr
 8010588:	200015b0 	.word	0x200015b0

0801058c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801058c:	b580      	push	{r7, lr}
 801058e:	b084      	sub	sp, #16
 8010590:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010592:	2300      	movs	r3, #0
 8010594:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010596:	2300      	movs	r3, #0
 8010598:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801059a:	4b41      	ldr	r3, [pc, #260]	; (80106a0 <xTaskResumeAll+0x114>)
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d109      	bne.n	80105b6 <xTaskResumeAll+0x2a>
 80105a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105a6:	f383 8811 	msr	BASEPRI, r3
 80105aa:	f3bf 8f6f 	isb	sy
 80105ae:	f3bf 8f4f 	dsb	sy
 80105b2:	603b      	str	r3, [r7, #0]
 80105b4:	e7fe      	b.n	80105b4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80105b6:	f001 f8a1 	bl	80116fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80105ba:	4b39      	ldr	r3, [pc, #228]	; (80106a0 <xTaskResumeAll+0x114>)
 80105bc:	681b      	ldr	r3, [r3, #0]
 80105be:	3b01      	subs	r3, #1
 80105c0:	4a37      	ldr	r2, [pc, #220]	; (80106a0 <xTaskResumeAll+0x114>)
 80105c2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80105c4:	4b36      	ldr	r3, [pc, #216]	; (80106a0 <xTaskResumeAll+0x114>)
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d161      	bne.n	8010690 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80105cc:	4b35      	ldr	r3, [pc, #212]	; (80106a4 <xTaskResumeAll+0x118>)
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d05d      	beq.n	8010690 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80105d4:	e02e      	b.n	8010634 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80105d6:	4b34      	ldr	r3, [pc, #208]	; (80106a8 <xTaskResumeAll+0x11c>)
 80105d8:	68db      	ldr	r3, [r3, #12]
 80105da:	68db      	ldr	r3, [r3, #12]
 80105dc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	3318      	adds	r3, #24
 80105e2:	4618      	mov	r0, r3
 80105e4:	f7fe fe5b 	bl	800f29e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80105e8:	68fb      	ldr	r3, [r7, #12]
 80105ea:	3304      	adds	r3, #4
 80105ec:	4618      	mov	r0, r3
 80105ee:	f7fe fe56 	bl	800f29e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105f6:	2201      	movs	r2, #1
 80105f8:	409a      	lsls	r2, r3
 80105fa:	4b2c      	ldr	r3, [pc, #176]	; (80106ac <xTaskResumeAll+0x120>)
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	4313      	orrs	r3, r2
 8010600:	4a2a      	ldr	r2, [pc, #168]	; (80106ac <xTaskResumeAll+0x120>)
 8010602:	6013      	str	r3, [r2, #0]
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010608:	4613      	mov	r3, r2
 801060a:	009b      	lsls	r3, r3, #2
 801060c:	4413      	add	r3, r2
 801060e:	009b      	lsls	r3, r3, #2
 8010610:	4a27      	ldr	r2, [pc, #156]	; (80106b0 <xTaskResumeAll+0x124>)
 8010612:	441a      	add	r2, r3
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	3304      	adds	r3, #4
 8010618:	4619      	mov	r1, r3
 801061a:	4610      	mov	r0, r2
 801061c:	f7fe fde2 	bl	800f1e4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010624:	4b23      	ldr	r3, [pc, #140]	; (80106b4 <xTaskResumeAll+0x128>)
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801062a:	429a      	cmp	r2, r3
 801062c:	d302      	bcc.n	8010634 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 801062e:	4b22      	ldr	r3, [pc, #136]	; (80106b8 <xTaskResumeAll+0x12c>)
 8010630:	2201      	movs	r2, #1
 8010632:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010634:	4b1c      	ldr	r3, [pc, #112]	; (80106a8 <xTaskResumeAll+0x11c>)
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	2b00      	cmp	r3, #0
 801063a:	d1cc      	bne.n	80105d6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801063c:	68fb      	ldr	r3, [r7, #12]
 801063e:	2b00      	cmp	r3, #0
 8010640:	d001      	beq.n	8010646 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010642:	f000 fb0f 	bl	8010c64 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8010646:	4b1d      	ldr	r3, [pc, #116]	; (80106bc <xTaskResumeAll+0x130>)
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	2b00      	cmp	r3, #0
 8010650:	d010      	beq.n	8010674 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010652:	f000 f837 	bl	80106c4 <xTaskIncrementTick>
 8010656:	4603      	mov	r3, r0
 8010658:	2b00      	cmp	r3, #0
 801065a:	d002      	beq.n	8010662 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 801065c:	4b16      	ldr	r3, [pc, #88]	; (80106b8 <xTaskResumeAll+0x12c>)
 801065e:	2201      	movs	r2, #1
 8010660:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	3b01      	subs	r3, #1
 8010666:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	2b00      	cmp	r3, #0
 801066c:	d1f1      	bne.n	8010652 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 801066e:	4b13      	ldr	r3, [pc, #76]	; (80106bc <xTaskResumeAll+0x130>)
 8010670:	2200      	movs	r2, #0
 8010672:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010674:	4b10      	ldr	r3, [pc, #64]	; (80106b8 <xTaskResumeAll+0x12c>)
 8010676:	681b      	ldr	r3, [r3, #0]
 8010678:	2b00      	cmp	r3, #0
 801067a:	d009      	beq.n	8010690 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801067c:	2301      	movs	r3, #1
 801067e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010680:	4b0f      	ldr	r3, [pc, #60]	; (80106c0 <xTaskResumeAll+0x134>)
 8010682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010686:	601a      	str	r2, [r3, #0]
 8010688:	f3bf 8f4f 	dsb	sy
 801068c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010690:	f001 f862 	bl	8011758 <vPortExitCritical>

	return xAlreadyYielded;
 8010694:	68bb      	ldr	r3, [r7, #8]
}
 8010696:	4618      	mov	r0, r3
 8010698:	3710      	adds	r7, #16
 801069a:	46bd      	mov	sp, r7
 801069c:	bd80      	pop	{r7, pc}
 801069e:	bf00      	nop
 80106a0:	200015b0 	.word	0x200015b0
 80106a4:	20001588 	.word	0x20001588
 80106a8:	20001548 	.word	0x20001548
 80106ac:	20001590 	.word	0x20001590
 80106b0:	2000148c 	.word	0x2000148c
 80106b4:	20001488 	.word	0x20001488
 80106b8:	2000159c 	.word	0x2000159c
 80106bc:	20001598 	.word	0x20001598
 80106c0:	e000ed04 	.word	0xe000ed04

080106c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80106c4:	b580      	push	{r7, lr}
 80106c6:	b086      	sub	sp, #24
 80106c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80106ca:	2300      	movs	r3, #0
 80106cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80106ce:	4b50      	ldr	r3, [pc, #320]	; (8010810 <xTaskIncrementTick+0x14c>)
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	f040 808c 	bne.w	80107f0 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80106d8:	4b4e      	ldr	r3, [pc, #312]	; (8010814 <xTaskIncrementTick+0x150>)
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	3301      	adds	r3, #1
 80106de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80106e0:	4a4c      	ldr	r2, [pc, #304]	; (8010814 <xTaskIncrementTick+0x150>)
 80106e2:	693b      	ldr	r3, [r7, #16]
 80106e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80106e6:	693b      	ldr	r3, [r7, #16]
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d11f      	bne.n	801072c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80106ec:	4b4a      	ldr	r3, [pc, #296]	; (8010818 <xTaskIncrementTick+0x154>)
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d009      	beq.n	801070a <xTaskIncrementTick+0x46>
 80106f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106fa:	f383 8811 	msr	BASEPRI, r3
 80106fe:	f3bf 8f6f 	isb	sy
 8010702:	f3bf 8f4f 	dsb	sy
 8010706:	603b      	str	r3, [r7, #0]
 8010708:	e7fe      	b.n	8010708 <xTaskIncrementTick+0x44>
 801070a:	4b43      	ldr	r3, [pc, #268]	; (8010818 <xTaskIncrementTick+0x154>)
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	60fb      	str	r3, [r7, #12]
 8010710:	4b42      	ldr	r3, [pc, #264]	; (801081c <xTaskIncrementTick+0x158>)
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	4a40      	ldr	r2, [pc, #256]	; (8010818 <xTaskIncrementTick+0x154>)
 8010716:	6013      	str	r3, [r2, #0]
 8010718:	4a40      	ldr	r2, [pc, #256]	; (801081c <xTaskIncrementTick+0x158>)
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	6013      	str	r3, [r2, #0]
 801071e:	4b40      	ldr	r3, [pc, #256]	; (8010820 <xTaskIncrementTick+0x15c>)
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	3301      	adds	r3, #1
 8010724:	4a3e      	ldr	r2, [pc, #248]	; (8010820 <xTaskIncrementTick+0x15c>)
 8010726:	6013      	str	r3, [r2, #0]
 8010728:	f000 fa9c 	bl	8010c64 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801072c:	4b3d      	ldr	r3, [pc, #244]	; (8010824 <xTaskIncrementTick+0x160>)
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	693a      	ldr	r2, [r7, #16]
 8010732:	429a      	cmp	r2, r3
 8010734:	d34d      	bcc.n	80107d2 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010736:	4b38      	ldr	r3, [pc, #224]	; (8010818 <xTaskIncrementTick+0x154>)
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	2b00      	cmp	r3, #0
 801073e:	d101      	bne.n	8010744 <xTaskIncrementTick+0x80>
 8010740:	2301      	movs	r3, #1
 8010742:	e000      	b.n	8010746 <xTaskIncrementTick+0x82>
 8010744:	2300      	movs	r3, #0
 8010746:	2b00      	cmp	r3, #0
 8010748:	d004      	beq.n	8010754 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801074a:	4b36      	ldr	r3, [pc, #216]	; (8010824 <xTaskIncrementTick+0x160>)
 801074c:	f04f 32ff 	mov.w	r2, #4294967295
 8010750:	601a      	str	r2, [r3, #0]
					break;
 8010752:	e03e      	b.n	80107d2 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8010754:	4b30      	ldr	r3, [pc, #192]	; (8010818 <xTaskIncrementTick+0x154>)
 8010756:	681b      	ldr	r3, [r3, #0]
 8010758:	68db      	ldr	r3, [r3, #12]
 801075a:	68db      	ldr	r3, [r3, #12]
 801075c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801075e:	68bb      	ldr	r3, [r7, #8]
 8010760:	685b      	ldr	r3, [r3, #4]
 8010762:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010764:	693a      	ldr	r2, [r7, #16]
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	429a      	cmp	r2, r3
 801076a:	d203      	bcs.n	8010774 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801076c:	4a2d      	ldr	r2, [pc, #180]	; (8010824 <xTaskIncrementTick+0x160>)
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	6013      	str	r3, [r2, #0]
						break;
 8010772:	e02e      	b.n	80107d2 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010774:	68bb      	ldr	r3, [r7, #8]
 8010776:	3304      	adds	r3, #4
 8010778:	4618      	mov	r0, r3
 801077a:	f7fe fd90 	bl	800f29e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801077e:	68bb      	ldr	r3, [r7, #8]
 8010780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010782:	2b00      	cmp	r3, #0
 8010784:	d004      	beq.n	8010790 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010786:	68bb      	ldr	r3, [r7, #8]
 8010788:	3318      	adds	r3, #24
 801078a:	4618      	mov	r0, r3
 801078c:	f7fe fd87 	bl	800f29e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010790:	68bb      	ldr	r3, [r7, #8]
 8010792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010794:	2201      	movs	r2, #1
 8010796:	409a      	lsls	r2, r3
 8010798:	4b23      	ldr	r3, [pc, #140]	; (8010828 <xTaskIncrementTick+0x164>)
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	4313      	orrs	r3, r2
 801079e:	4a22      	ldr	r2, [pc, #136]	; (8010828 <xTaskIncrementTick+0x164>)
 80107a0:	6013      	str	r3, [r2, #0]
 80107a2:	68bb      	ldr	r3, [r7, #8]
 80107a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107a6:	4613      	mov	r3, r2
 80107a8:	009b      	lsls	r3, r3, #2
 80107aa:	4413      	add	r3, r2
 80107ac:	009b      	lsls	r3, r3, #2
 80107ae:	4a1f      	ldr	r2, [pc, #124]	; (801082c <xTaskIncrementTick+0x168>)
 80107b0:	441a      	add	r2, r3
 80107b2:	68bb      	ldr	r3, [r7, #8]
 80107b4:	3304      	adds	r3, #4
 80107b6:	4619      	mov	r1, r3
 80107b8:	4610      	mov	r0, r2
 80107ba:	f7fe fd13 	bl	800f1e4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80107be:	68bb      	ldr	r3, [r7, #8]
 80107c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107c2:	4b1b      	ldr	r3, [pc, #108]	; (8010830 <xTaskIncrementTick+0x16c>)
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107c8:	429a      	cmp	r2, r3
 80107ca:	d3b4      	bcc.n	8010736 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80107cc:	2301      	movs	r3, #1
 80107ce:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80107d0:	e7b1      	b.n	8010736 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80107d2:	4b17      	ldr	r3, [pc, #92]	; (8010830 <xTaskIncrementTick+0x16c>)
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107d8:	4914      	ldr	r1, [pc, #80]	; (801082c <xTaskIncrementTick+0x168>)
 80107da:	4613      	mov	r3, r2
 80107dc:	009b      	lsls	r3, r3, #2
 80107de:	4413      	add	r3, r2
 80107e0:	009b      	lsls	r3, r3, #2
 80107e2:	440b      	add	r3, r1
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	2b01      	cmp	r3, #1
 80107e8:	d907      	bls.n	80107fa <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80107ea:	2301      	movs	r3, #1
 80107ec:	617b      	str	r3, [r7, #20]
 80107ee:	e004      	b.n	80107fa <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80107f0:	4b10      	ldr	r3, [pc, #64]	; (8010834 <xTaskIncrementTick+0x170>)
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	3301      	adds	r3, #1
 80107f6:	4a0f      	ldr	r2, [pc, #60]	; (8010834 <xTaskIncrementTick+0x170>)
 80107f8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80107fa:	4b0f      	ldr	r3, [pc, #60]	; (8010838 <xTaskIncrementTick+0x174>)
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d001      	beq.n	8010806 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8010802:	2301      	movs	r3, #1
 8010804:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8010806:	697b      	ldr	r3, [r7, #20]
}
 8010808:	4618      	mov	r0, r3
 801080a:	3718      	adds	r7, #24
 801080c:	46bd      	mov	sp, r7
 801080e:	bd80      	pop	{r7, pc}
 8010810:	200015b0 	.word	0x200015b0
 8010814:	2000158c 	.word	0x2000158c
 8010818:	20001540 	.word	0x20001540
 801081c:	20001544 	.word	0x20001544
 8010820:	200015a0 	.word	0x200015a0
 8010824:	200015a8 	.word	0x200015a8
 8010828:	20001590 	.word	0x20001590
 801082c:	2000148c 	.word	0x2000148c
 8010830:	20001488 	.word	0x20001488
 8010834:	20001598 	.word	0x20001598
 8010838:	2000159c 	.word	0x2000159c

0801083c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801083c:	b480      	push	{r7}
 801083e:	b087      	sub	sp, #28
 8010840:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010842:	4b26      	ldr	r3, [pc, #152]	; (80108dc <vTaskSwitchContext+0xa0>)
 8010844:	681b      	ldr	r3, [r3, #0]
 8010846:	2b00      	cmp	r3, #0
 8010848:	d003      	beq.n	8010852 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801084a:	4b25      	ldr	r3, [pc, #148]	; (80108e0 <vTaskSwitchContext+0xa4>)
 801084c:	2201      	movs	r2, #1
 801084e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010850:	e03e      	b.n	80108d0 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8010852:	4b23      	ldr	r3, [pc, #140]	; (80108e0 <vTaskSwitchContext+0xa4>)
 8010854:	2200      	movs	r2, #0
 8010856:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8010858:	4b22      	ldr	r3, [pc, #136]	; (80108e4 <vTaskSwitchContext+0xa8>)
 801085a:	681b      	ldr	r3, [r3, #0]
 801085c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	fab3 f383 	clz	r3, r3
 8010864:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8010866:	7afb      	ldrb	r3, [r7, #11]
 8010868:	f1c3 031f 	rsb	r3, r3, #31
 801086c:	617b      	str	r3, [r7, #20]
 801086e:	491e      	ldr	r1, [pc, #120]	; (80108e8 <vTaskSwitchContext+0xac>)
 8010870:	697a      	ldr	r2, [r7, #20]
 8010872:	4613      	mov	r3, r2
 8010874:	009b      	lsls	r3, r3, #2
 8010876:	4413      	add	r3, r2
 8010878:	009b      	lsls	r3, r3, #2
 801087a:	440b      	add	r3, r1
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	2b00      	cmp	r3, #0
 8010880:	d109      	bne.n	8010896 <vTaskSwitchContext+0x5a>
	__asm volatile
 8010882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010886:	f383 8811 	msr	BASEPRI, r3
 801088a:	f3bf 8f6f 	isb	sy
 801088e:	f3bf 8f4f 	dsb	sy
 8010892:	607b      	str	r3, [r7, #4]
 8010894:	e7fe      	b.n	8010894 <vTaskSwitchContext+0x58>
 8010896:	697a      	ldr	r2, [r7, #20]
 8010898:	4613      	mov	r3, r2
 801089a:	009b      	lsls	r3, r3, #2
 801089c:	4413      	add	r3, r2
 801089e:	009b      	lsls	r3, r3, #2
 80108a0:	4a11      	ldr	r2, [pc, #68]	; (80108e8 <vTaskSwitchContext+0xac>)
 80108a2:	4413      	add	r3, r2
 80108a4:	613b      	str	r3, [r7, #16]
 80108a6:	693b      	ldr	r3, [r7, #16]
 80108a8:	685b      	ldr	r3, [r3, #4]
 80108aa:	685a      	ldr	r2, [r3, #4]
 80108ac:	693b      	ldr	r3, [r7, #16]
 80108ae:	605a      	str	r2, [r3, #4]
 80108b0:	693b      	ldr	r3, [r7, #16]
 80108b2:	685a      	ldr	r2, [r3, #4]
 80108b4:	693b      	ldr	r3, [r7, #16]
 80108b6:	3308      	adds	r3, #8
 80108b8:	429a      	cmp	r2, r3
 80108ba:	d104      	bne.n	80108c6 <vTaskSwitchContext+0x8a>
 80108bc:	693b      	ldr	r3, [r7, #16]
 80108be:	685b      	ldr	r3, [r3, #4]
 80108c0:	685a      	ldr	r2, [r3, #4]
 80108c2:	693b      	ldr	r3, [r7, #16]
 80108c4:	605a      	str	r2, [r3, #4]
 80108c6:	693b      	ldr	r3, [r7, #16]
 80108c8:	685b      	ldr	r3, [r3, #4]
 80108ca:	68db      	ldr	r3, [r3, #12]
 80108cc:	4a07      	ldr	r2, [pc, #28]	; (80108ec <vTaskSwitchContext+0xb0>)
 80108ce:	6013      	str	r3, [r2, #0]
}
 80108d0:	bf00      	nop
 80108d2:	371c      	adds	r7, #28
 80108d4:	46bd      	mov	sp, r7
 80108d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108da:	4770      	bx	lr
 80108dc:	200015b0 	.word	0x200015b0
 80108e0:	2000159c 	.word	0x2000159c
 80108e4:	20001590 	.word	0x20001590
 80108e8:	2000148c 	.word	0x2000148c
 80108ec:	20001488 	.word	0x20001488

080108f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80108f0:	b580      	push	{r7, lr}
 80108f2:	b084      	sub	sp, #16
 80108f4:	af00      	add	r7, sp, #0
 80108f6:	6078      	str	r0, [r7, #4]
 80108f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d109      	bne.n	8010914 <vTaskPlaceOnEventList+0x24>
 8010900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010904:	f383 8811 	msr	BASEPRI, r3
 8010908:	f3bf 8f6f 	isb	sy
 801090c:	f3bf 8f4f 	dsb	sy
 8010910:	60fb      	str	r3, [r7, #12]
 8010912:	e7fe      	b.n	8010912 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010914:	4b07      	ldr	r3, [pc, #28]	; (8010934 <vTaskPlaceOnEventList+0x44>)
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	3318      	adds	r3, #24
 801091a:	4619      	mov	r1, r3
 801091c:	6878      	ldr	r0, [r7, #4]
 801091e:	f7fe fc85 	bl	800f22c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010922:	2101      	movs	r1, #1
 8010924:	6838      	ldr	r0, [r7, #0]
 8010926:	f000 fd5d 	bl	80113e4 <prvAddCurrentTaskToDelayedList>
}
 801092a:	bf00      	nop
 801092c:	3710      	adds	r7, #16
 801092e:	46bd      	mov	sp, r7
 8010930:	bd80      	pop	{r7, pc}
 8010932:	bf00      	nop
 8010934:	20001488 	.word	0x20001488

08010938 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010938:	b580      	push	{r7, lr}
 801093a:	b086      	sub	sp, #24
 801093c:	af00      	add	r7, sp, #0
 801093e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	68db      	ldr	r3, [r3, #12]
 8010944:	68db      	ldr	r3, [r3, #12]
 8010946:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010948:	693b      	ldr	r3, [r7, #16]
 801094a:	2b00      	cmp	r3, #0
 801094c:	d109      	bne.n	8010962 <xTaskRemoveFromEventList+0x2a>
 801094e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010952:	f383 8811 	msr	BASEPRI, r3
 8010956:	f3bf 8f6f 	isb	sy
 801095a:	f3bf 8f4f 	dsb	sy
 801095e:	60fb      	str	r3, [r7, #12]
 8010960:	e7fe      	b.n	8010960 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010962:	693b      	ldr	r3, [r7, #16]
 8010964:	3318      	adds	r3, #24
 8010966:	4618      	mov	r0, r3
 8010968:	f7fe fc99 	bl	800f29e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801096c:	4b1d      	ldr	r3, [pc, #116]	; (80109e4 <xTaskRemoveFromEventList+0xac>)
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	2b00      	cmp	r3, #0
 8010972:	d11c      	bne.n	80109ae <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010974:	693b      	ldr	r3, [r7, #16]
 8010976:	3304      	adds	r3, #4
 8010978:	4618      	mov	r0, r3
 801097a:	f7fe fc90 	bl	800f29e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801097e:	693b      	ldr	r3, [r7, #16]
 8010980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010982:	2201      	movs	r2, #1
 8010984:	409a      	lsls	r2, r3
 8010986:	4b18      	ldr	r3, [pc, #96]	; (80109e8 <xTaskRemoveFromEventList+0xb0>)
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	4313      	orrs	r3, r2
 801098c:	4a16      	ldr	r2, [pc, #88]	; (80109e8 <xTaskRemoveFromEventList+0xb0>)
 801098e:	6013      	str	r3, [r2, #0]
 8010990:	693b      	ldr	r3, [r7, #16]
 8010992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010994:	4613      	mov	r3, r2
 8010996:	009b      	lsls	r3, r3, #2
 8010998:	4413      	add	r3, r2
 801099a:	009b      	lsls	r3, r3, #2
 801099c:	4a13      	ldr	r2, [pc, #76]	; (80109ec <xTaskRemoveFromEventList+0xb4>)
 801099e:	441a      	add	r2, r3
 80109a0:	693b      	ldr	r3, [r7, #16]
 80109a2:	3304      	adds	r3, #4
 80109a4:	4619      	mov	r1, r3
 80109a6:	4610      	mov	r0, r2
 80109a8:	f7fe fc1c 	bl	800f1e4 <vListInsertEnd>
 80109ac:	e005      	b.n	80109ba <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80109ae:	693b      	ldr	r3, [r7, #16]
 80109b0:	3318      	adds	r3, #24
 80109b2:	4619      	mov	r1, r3
 80109b4:	480e      	ldr	r0, [pc, #56]	; (80109f0 <xTaskRemoveFromEventList+0xb8>)
 80109b6:	f7fe fc15 	bl	800f1e4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80109ba:	693b      	ldr	r3, [r7, #16]
 80109bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80109be:	4b0d      	ldr	r3, [pc, #52]	; (80109f4 <xTaskRemoveFromEventList+0xbc>)
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80109c4:	429a      	cmp	r2, r3
 80109c6:	d905      	bls.n	80109d4 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80109c8:	2301      	movs	r3, #1
 80109ca:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80109cc:	4b0a      	ldr	r3, [pc, #40]	; (80109f8 <xTaskRemoveFromEventList+0xc0>)
 80109ce:	2201      	movs	r2, #1
 80109d0:	601a      	str	r2, [r3, #0]
 80109d2:	e001      	b.n	80109d8 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 80109d4:	2300      	movs	r3, #0
 80109d6:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80109d8:	697b      	ldr	r3, [r7, #20]
}
 80109da:	4618      	mov	r0, r3
 80109dc:	3718      	adds	r7, #24
 80109de:	46bd      	mov	sp, r7
 80109e0:	bd80      	pop	{r7, pc}
 80109e2:	bf00      	nop
 80109e4:	200015b0 	.word	0x200015b0
 80109e8:	20001590 	.word	0x20001590
 80109ec:	2000148c 	.word	0x2000148c
 80109f0:	20001548 	.word	0x20001548
 80109f4:	20001488 	.word	0x20001488
 80109f8:	2000159c 	.word	0x2000159c

080109fc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80109fc:	b480      	push	{r7}
 80109fe:	b083      	sub	sp, #12
 8010a00:	af00      	add	r7, sp, #0
 8010a02:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010a04:	4b06      	ldr	r3, [pc, #24]	; (8010a20 <vTaskInternalSetTimeOutState+0x24>)
 8010a06:	681a      	ldr	r2, [r3, #0]
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010a0c:	4b05      	ldr	r3, [pc, #20]	; (8010a24 <vTaskInternalSetTimeOutState+0x28>)
 8010a0e:	681a      	ldr	r2, [r3, #0]
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	605a      	str	r2, [r3, #4]
}
 8010a14:	bf00      	nop
 8010a16:	370c      	adds	r7, #12
 8010a18:	46bd      	mov	sp, r7
 8010a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a1e:	4770      	bx	lr
 8010a20:	200015a0 	.word	0x200015a0
 8010a24:	2000158c 	.word	0x2000158c

08010a28 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010a28:	b580      	push	{r7, lr}
 8010a2a:	b088      	sub	sp, #32
 8010a2c:	af00      	add	r7, sp, #0
 8010a2e:	6078      	str	r0, [r7, #4]
 8010a30:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d109      	bne.n	8010a4c <xTaskCheckForTimeOut+0x24>
 8010a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a3c:	f383 8811 	msr	BASEPRI, r3
 8010a40:	f3bf 8f6f 	isb	sy
 8010a44:	f3bf 8f4f 	dsb	sy
 8010a48:	613b      	str	r3, [r7, #16]
 8010a4a:	e7fe      	b.n	8010a4a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8010a4c:	683b      	ldr	r3, [r7, #0]
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d109      	bne.n	8010a66 <xTaskCheckForTimeOut+0x3e>
 8010a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a56:	f383 8811 	msr	BASEPRI, r3
 8010a5a:	f3bf 8f6f 	isb	sy
 8010a5e:	f3bf 8f4f 	dsb	sy
 8010a62:	60fb      	str	r3, [r7, #12]
 8010a64:	e7fe      	b.n	8010a64 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8010a66:	f000 fe49 	bl	80116fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8010a6a:	4b1d      	ldr	r3, [pc, #116]	; (8010ae0 <xTaskCheckForTimeOut+0xb8>)
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	685b      	ldr	r3, [r3, #4]
 8010a74:	69ba      	ldr	r2, [r7, #24]
 8010a76:	1ad3      	subs	r3, r2, r3
 8010a78:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8010a7a:	683b      	ldr	r3, [r7, #0]
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a82:	d102      	bne.n	8010a8a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010a84:	2300      	movs	r3, #0
 8010a86:	61fb      	str	r3, [r7, #28]
 8010a88:	e023      	b.n	8010ad2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	681a      	ldr	r2, [r3, #0]
 8010a8e:	4b15      	ldr	r3, [pc, #84]	; (8010ae4 <xTaskCheckForTimeOut+0xbc>)
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	429a      	cmp	r2, r3
 8010a94:	d007      	beq.n	8010aa6 <xTaskCheckForTimeOut+0x7e>
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	685b      	ldr	r3, [r3, #4]
 8010a9a:	69ba      	ldr	r2, [r7, #24]
 8010a9c:	429a      	cmp	r2, r3
 8010a9e:	d302      	bcc.n	8010aa6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010aa0:	2301      	movs	r3, #1
 8010aa2:	61fb      	str	r3, [r7, #28]
 8010aa4:	e015      	b.n	8010ad2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010aa6:	683b      	ldr	r3, [r7, #0]
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	697a      	ldr	r2, [r7, #20]
 8010aac:	429a      	cmp	r2, r3
 8010aae:	d20b      	bcs.n	8010ac8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010ab0:	683b      	ldr	r3, [r7, #0]
 8010ab2:	681a      	ldr	r2, [r3, #0]
 8010ab4:	697b      	ldr	r3, [r7, #20]
 8010ab6:	1ad2      	subs	r2, r2, r3
 8010ab8:	683b      	ldr	r3, [r7, #0]
 8010aba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010abc:	6878      	ldr	r0, [r7, #4]
 8010abe:	f7ff ff9d 	bl	80109fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010ac2:	2300      	movs	r3, #0
 8010ac4:	61fb      	str	r3, [r7, #28]
 8010ac6:	e004      	b.n	8010ad2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8010ac8:	683b      	ldr	r3, [r7, #0]
 8010aca:	2200      	movs	r2, #0
 8010acc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8010ace:	2301      	movs	r3, #1
 8010ad0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8010ad2:	f000 fe41 	bl	8011758 <vPortExitCritical>

	return xReturn;
 8010ad6:	69fb      	ldr	r3, [r7, #28]
}
 8010ad8:	4618      	mov	r0, r3
 8010ada:	3720      	adds	r7, #32
 8010adc:	46bd      	mov	sp, r7
 8010ade:	bd80      	pop	{r7, pc}
 8010ae0:	2000158c 	.word	0x2000158c
 8010ae4:	200015a0 	.word	0x200015a0

08010ae8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010ae8:	b480      	push	{r7}
 8010aea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010aec:	4b03      	ldr	r3, [pc, #12]	; (8010afc <vTaskMissedYield+0x14>)
 8010aee:	2201      	movs	r2, #1
 8010af0:	601a      	str	r2, [r3, #0]
}
 8010af2:	bf00      	nop
 8010af4:	46bd      	mov	sp, r7
 8010af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010afa:	4770      	bx	lr
 8010afc:	2000159c 	.word	0x2000159c

08010b00 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010b00:	b580      	push	{r7, lr}
 8010b02:	b082      	sub	sp, #8
 8010b04:	af00      	add	r7, sp, #0
 8010b06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010b08:	f000 f852 	bl	8010bb0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010b0c:	4b06      	ldr	r3, [pc, #24]	; (8010b28 <prvIdleTask+0x28>)
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	2b01      	cmp	r3, #1
 8010b12:	d9f9      	bls.n	8010b08 <prvIdleTask+0x8>
			{
				taskYIELD();
 8010b14:	4b05      	ldr	r3, [pc, #20]	; (8010b2c <prvIdleTask+0x2c>)
 8010b16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010b1a:	601a      	str	r2, [r3, #0]
 8010b1c:	f3bf 8f4f 	dsb	sy
 8010b20:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8010b24:	e7f0      	b.n	8010b08 <prvIdleTask+0x8>
 8010b26:	bf00      	nop
 8010b28:	2000148c 	.word	0x2000148c
 8010b2c:	e000ed04 	.word	0xe000ed04

08010b30 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010b30:	b580      	push	{r7, lr}
 8010b32:	b082      	sub	sp, #8
 8010b34:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010b36:	2300      	movs	r3, #0
 8010b38:	607b      	str	r3, [r7, #4]
 8010b3a:	e00c      	b.n	8010b56 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010b3c:	687a      	ldr	r2, [r7, #4]
 8010b3e:	4613      	mov	r3, r2
 8010b40:	009b      	lsls	r3, r3, #2
 8010b42:	4413      	add	r3, r2
 8010b44:	009b      	lsls	r3, r3, #2
 8010b46:	4a12      	ldr	r2, [pc, #72]	; (8010b90 <prvInitialiseTaskLists+0x60>)
 8010b48:	4413      	add	r3, r2
 8010b4a:	4618      	mov	r0, r3
 8010b4c:	f7fe fb1d 	bl	800f18a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	3301      	adds	r3, #1
 8010b54:	607b      	str	r3, [r7, #4]
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	2b06      	cmp	r3, #6
 8010b5a:	d9ef      	bls.n	8010b3c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010b5c:	480d      	ldr	r0, [pc, #52]	; (8010b94 <prvInitialiseTaskLists+0x64>)
 8010b5e:	f7fe fb14 	bl	800f18a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010b62:	480d      	ldr	r0, [pc, #52]	; (8010b98 <prvInitialiseTaskLists+0x68>)
 8010b64:	f7fe fb11 	bl	800f18a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010b68:	480c      	ldr	r0, [pc, #48]	; (8010b9c <prvInitialiseTaskLists+0x6c>)
 8010b6a:	f7fe fb0e 	bl	800f18a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010b6e:	480c      	ldr	r0, [pc, #48]	; (8010ba0 <prvInitialiseTaskLists+0x70>)
 8010b70:	f7fe fb0b 	bl	800f18a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010b74:	480b      	ldr	r0, [pc, #44]	; (8010ba4 <prvInitialiseTaskLists+0x74>)
 8010b76:	f7fe fb08 	bl	800f18a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010b7a:	4b0b      	ldr	r3, [pc, #44]	; (8010ba8 <prvInitialiseTaskLists+0x78>)
 8010b7c:	4a05      	ldr	r2, [pc, #20]	; (8010b94 <prvInitialiseTaskLists+0x64>)
 8010b7e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010b80:	4b0a      	ldr	r3, [pc, #40]	; (8010bac <prvInitialiseTaskLists+0x7c>)
 8010b82:	4a05      	ldr	r2, [pc, #20]	; (8010b98 <prvInitialiseTaskLists+0x68>)
 8010b84:	601a      	str	r2, [r3, #0]
}
 8010b86:	bf00      	nop
 8010b88:	3708      	adds	r7, #8
 8010b8a:	46bd      	mov	sp, r7
 8010b8c:	bd80      	pop	{r7, pc}
 8010b8e:	bf00      	nop
 8010b90:	2000148c 	.word	0x2000148c
 8010b94:	20001518 	.word	0x20001518
 8010b98:	2000152c 	.word	0x2000152c
 8010b9c:	20001548 	.word	0x20001548
 8010ba0:	2000155c 	.word	0x2000155c
 8010ba4:	20001574 	.word	0x20001574
 8010ba8:	20001540 	.word	0x20001540
 8010bac:	20001544 	.word	0x20001544

08010bb0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010bb0:	b580      	push	{r7, lr}
 8010bb2:	b082      	sub	sp, #8
 8010bb4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010bb6:	e019      	b.n	8010bec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010bb8:	f000 fda0 	bl	80116fc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8010bbc:	4b0f      	ldr	r3, [pc, #60]	; (8010bfc <prvCheckTasksWaitingTermination+0x4c>)
 8010bbe:	68db      	ldr	r3, [r3, #12]
 8010bc0:	68db      	ldr	r3, [r3, #12]
 8010bc2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	3304      	adds	r3, #4
 8010bc8:	4618      	mov	r0, r3
 8010bca:	f7fe fb68 	bl	800f29e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010bce:	4b0c      	ldr	r3, [pc, #48]	; (8010c00 <prvCheckTasksWaitingTermination+0x50>)
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	3b01      	subs	r3, #1
 8010bd4:	4a0a      	ldr	r2, [pc, #40]	; (8010c00 <prvCheckTasksWaitingTermination+0x50>)
 8010bd6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010bd8:	4b0a      	ldr	r3, [pc, #40]	; (8010c04 <prvCheckTasksWaitingTermination+0x54>)
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	3b01      	subs	r3, #1
 8010bde:	4a09      	ldr	r2, [pc, #36]	; (8010c04 <prvCheckTasksWaitingTermination+0x54>)
 8010be0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010be2:	f000 fdb9 	bl	8011758 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010be6:	6878      	ldr	r0, [r7, #4]
 8010be8:	f000 f80e 	bl	8010c08 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010bec:	4b05      	ldr	r3, [pc, #20]	; (8010c04 <prvCheckTasksWaitingTermination+0x54>)
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	d1e1      	bne.n	8010bb8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010bf4:	bf00      	nop
 8010bf6:	3708      	adds	r7, #8
 8010bf8:	46bd      	mov	sp, r7
 8010bfa:	bd80      	pop	{r7, pc}
 8010bfc:	2000155c 	.word	0x2000155c
 8010c00:	20001588 	.word	0x20001588
 8010c04:	20001570 	.word	0x20001570

08010c08 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010c08:	b580      	push	{r7, lr}
 8010c0a:	b084      	sub	sp, #16
 8010c0c:	af00      	add	r7, sp, #0
 8010c0e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d108      	bne.n	8010c2c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c1e:	4618      	mov	r0, r3
 8010c20:	f000 ff48 	bl	8011ab4 <vPortFree>
				vPortFree( pxTCB );
 8010c24:	6878      	ldr	r0, [r7, #4]
 8010c26:	f000 ff45 	bl	8011ab4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010c2a:	e017      	b.n	8010c5c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010c32:	2b01      	cmp	r3, #1
 8010c34:	d103      	bne.n	8010c3e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8010c36:	6878      	ldr	r0, [r7, #4]
 8010c38:	f000 ff3c 	bl	8011ab4 <vPortFree>
	}
 8010c3c:	e00e      	b.n	8010c5c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010c44:	2b02      	cmp	r3, #2
 8010c46:	d009      	beq.n	8010c5c <prvDeleteTCB+0x54>
 8010c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c4c:	f383 8811 	msr	BASEPRI, r3
 8010c50:	f3bf 8f6f 	isb	sy
 8010c54:	f3bf 8f4f 	dsb	sy
 8010c58:	60fb      	str	r3, [r7, #12]
 8010c5a:	e7fe      	b.n	8010c5a <prvDeleteTCB+0x52>
	}
 8010c5c:	bf00      	nop
 8010c5e:	3710      	adds	r7, #16
 8010c60:	46bd      	mov	sp, r7
 8010c62:	bd80      	pop	{r7, pc}

08010c64 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010c64:	b480      	push	{r7}
 8010c66:	b083      	sub	sp, #12
 8010c68:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010c6a:	4b0f      	ldr	r3, [pc, #60]	; (8010ca8 <prvResetNextTaskUnblockTime+0x44>)
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d101      	bne.n	8010c78 <prvResetNextTaskUnblockTime+0x14>
 8010c74:	2301      	movs	r3, #1
 8010c76:	e000      	b.n	8010c7a <prvResetNextTaskUnblockTime+0x16>
 8010c78:	2300      	movs	r3, #0
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d004      	beq.n	8010c88 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010c7e:	4b0b      	ldr	r3, [pc, #44]	; (8010cac <prvResetNextTaskUnblockTime+0x48>)
 8010c80:	f04f 32ff 	mov.w	r2, #4294967295
 8010c84:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010c86:	e008      	b.n	8010c9a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8010c88:	4b07      	ldr	r3, [pc, #28]	; (8010ca8 <prvResetNextTaskUnblockTime+0x44>)
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	68db      	ldr	r3, [r3, #12]
 8010c8e:	68db      	ldr	r3, [r3, #12]
 8010c90:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	685b      	ldr	r3, [r3, #4]
 8010c96:	4a05      	ldr	r2, [pc, #20]	; (8010cac <prvResetNextTaskUnblockTime+0x48>)
 8010c98:	6013      	str	r3, [r2, #0]
}
 8010c9a:	bf00      	nop
 8010c9c:	370c      	adds	r7, #12
 8010c9e:	46bd      	mov	sp, r7
 8010ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca4:	4770      	bx	lr
 8010ca6:	bf00      	nop
 8010ca8:	20001540 	.word	0x20001540
 8010cac:	200015a8 	.word	0x200015a8

08010cb0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010cb0:	b480      	push	{r7}
 8010cb2:	b083      	sub	sp, #12
 8010cb4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010cb6:	4b0b      	ldr	r3, [pc, #44]	; (8010ce4 <xTaskGetSchedulerState+0x34>)
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d102      	bne.n	8010cc4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010cbe:	2301      	movs	r3, #1
 8010cc0:	607b      	str	r3, [r7, #4]
 8010cc2:	e008      	b.n	8010cd6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010cc4:	4b08      	ldr	r3, [pc, #32]	; (8010ce8 <xTaskGetSchedulerState+0x38>)
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d102      	bne.n	8010cd2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010ccc:	2302      	movs	r3, #2
 8010cce:	607b      	str	r3, [r7, #4]
 8010cd0:	e001      	b.n	8010cd6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010cd2:	2300      	movs	r3, #0
 8010cd4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010cd6:	687b      	ldr	r3, [r7, #4]
	}
 8010cd8:	4618      	mov	r0, r3
 8010cda:	370c      	adds	r7, #12
 8010cdc:	46bd      	mov	sp, r7
 8010cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ce2:	4770      	bx	lr
 8010ce4:	20001594 	.word	0x20001594
 8010ce8:	200015b0 	.word	0x200015b0

08010cec <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8010cec:	b580      	push	{r7, lr}
 8010cee:	b084      	sub	sp, #16
 8010cf0:	af00      	add	r7, sp, #0
 8010cf2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8010cf8:	2300      	movs	r3, #0
 8010cfa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d06e      	beq.n	8010de0 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8010d02:	68bb      	ldr	r3, [r7, #8]
 8010d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d06:	4b39      	ldr	r3, [pc, #228]	; (8010dec <xTaskPriorityInherit+0x100>)
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d0c:	429a      	cmp	r2, r3
 8010d0e:	d25e      	bcs.n	8010dce <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010d10:	68bb      	ldr	r3, [r7, #8]
 8010d12:	699b      	ldr	r3, [r3, #24]
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	db06      	blt.n	8010d26 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010d18:	4b34      	ldr	r3, [pc, #208]	; (8010dec <xTaskPriorityInherit+0x100>)
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d1e:	f1c3 0207 	rsb	r2, r3, #7
 8010d22:	68bb      	ldr	r3, [r7, #8]
 8010d24:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8010d26:	68bb      	ldr	r3, [r7, #8]
 8010d28:	6959      	ldr	r1, [r3, #20]
 8010d2a:	68bb      	ldr	r3, [r7, #8]
 8010d2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d2e:	4613      	mov	r3, r2
 8010d30:	009b      	lsls	r3, r3, #2
 8010d32:	4413      	add	r3, r2
 8010d34:	009b      	lsls	r3, r3, #2
 8010d36:	4a2e      	ldr	r2, [pc, #184]	; (8010df0 <xTaskPriorityInherit+0x104>)
 8010d38:	4413      	add	r3, r2
 8010d3a:	4299      	cmp	r1, r3
 8010d3c:	d101      	bne.n	8010d42 <xTaskPriorityInherit+0x56>
 8010d3e:	2301      	movs	r3, #1
 8010d40:	e000      	b.n	8010d44 <xTaskPriorityInherit+0x58>
 8010d42:	2300      	movs	r3, #0
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d03a      	beq.n	8010dbe <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010d48:	68bb      	ldr	r3, [r7, #8]
 8010d4a:	3304      	adds	r3, #4
 8010d4c:	4618      	mov	r0, r3
 8010d4e:	f7fe faa6 	bl	800f29e <uxListRemove>
 8010d52:	4603      	mov	r3, r0
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	d115      	bne.n	8010d84 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8010d58:	68bb      	ldr	r3, [r7, #8]
 8010d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d5c:	4924      	ldr	r1, [pc, #144]	; (8010df0 <xTaskPriorityInherit+0x104>)
 8010d5e:	4613      	mov	r3, r2
 8010d60:	009b      	lsls	r3, r3, #2
 8010d62:	4413      	add	r3, r2
 8010d64:	009b      	lsls	r3, r3, #2
 8010d66:	440b      	add	r3, r1
 8010d68:	681b      	ldr	r3, [r3, #0]
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d10a      	bne.n	8010d84 <xTaskPriorityInherit+0x98>
 8010d6e:	68bb      	ldr	r3, [r7, #8]
 8010d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d72:	2201      	movs	r2, #1
 8010d74:	fa02 f303 	lsl.w	r3, r2, r3
 8010d78:	43da      	mvns	r2, r3
 8010d7a:	4b1e      	ldr	r3, [pc, #120]	; (8010df4 <xTaskPriorityInherit+0x108>)
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	4013      	ands	r3, r2
 8010d80:	4a1c      	ldr	r2, [pc, #112]	; (8010df4 <xTaskPriorityInherit+0x108>)
 8010d82:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010d84:	4b19      	ldr	r3, [pc, #100]	; (8010dec <xTaskPriorityInherit+0x100>)
 8010d86:	681b      	ldr	r3, [r3, #0]
 8010d88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d8a:	68bb      	ldr	r3, [r7, #8]
 8010d8c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8010d8e:	68bb      	ldr	r3, [r7, #8]
 8010d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d92:	2201      	movs	r2, #1
 8010d94:	409a      	lsls	r2, r3
 8010d96:	4b17      	ldr	r3, [pc, #92]	; (8010df4 <xTaskPriorityInherit+0x108>)
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	4313      	orrs	r3, r2
 8010d9c:	4a15      	ldr	r2, [pc, #84]	; (8010df4 <xTaskPriorityInherit+0x108>)
 8010d9e:	6013      	str	r3, [r2, #0]
 8010da0:	68bb      	ldr	r3, [r7, #8]
 8010da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010da4:	4613      	mov	r3, r2
 8010da6:	009b      	lsls	r3, r3, #2
 8010da8:	4413      	add	r3, r2
 8010daa:	009b      	lsls	r3, r3, #2
 8010dac:	4a10      	ldr	r2, [pc, #64]	; (8010df0 <xTaskPriorityInherit+0x104>)
 8010dae:	441a      	add	r2, r3
 8010db0:	68bb      	ldr	r3, [r7, #8]
 8010db2:	3304      	adds	r3, #4
 8010db4:	4619      	mov	r1, r3
 8010db6:	4610      	mov	r0, r2
 8010db8:	f7fe fa14 	bl	800f1e4 <vListInsertEnd>
 8010dbc:	e004      	b.n	8010dc8 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010dbe:	4b0b      	ldr	r3, [pc, #44]	; (8010dec <xTaskPriorityInherit+0x100>)
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010dc4:	68bb      	ldr	r3, [r7, #8]
 8010dc6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8010dc8:	2301      	movs	r3, #1
 8010dca:	60fb      	str	r3, [r7, #12]
 8010dcc:	e008      	b.n	8010de0 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8010dce:	68bb      	ldr	r3, [r7, #8]
 8010dd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010dd2:	4b06      	ldr	r3, [pc, #24]	; (8010dec <xTaskPriorityInherit+0x100>)
 8010dd4:	681b      	ldr	r3, [r3, #0]
 8010dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010dd8:	429a      	cmp	r2, r3
 8010dda:	d201      	bcs.n	8010de0 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8010ddc:	2301      	movs	r3, #1
 8010dde:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010de0:	68fb      	ldr	r3, [r7, #12]
	}
 8010de2:	4618      	mov	r0, r3
 8010de4:	3710      	adds	r7, #16
 8010de6:	46bd      	mov	sp, r7
 8010de8:	bd80      	pop	{r7, pc}
 8010dea:	bf00      	nop
 8010dec:	20001488 	.word	0x20001488
 8010df0:	2000148c 	.word	0x2000148c
 8010df4:	20001590 	.word	0x20001590

08010df8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010df8:	b580      	push	{r7, lr}
 8010dfa:	b086      	sub	sp, #24
 8010dfc:	af00      	add	r7, sp, #0
 8010dfe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010e04:	2300      	movs	r3, #0
 8010e06:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d06c      	beq.n	8010ee8 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010e0e:	4b39      	ldr	r3, [pc, #228]	; (8010ef4 <xTaskPriorityDisinherit+0xfc>)
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	693a      	ldr	r2, [r7, #16]
 8010e14:	429a      	cmp	r2, r3
 8010e16:	d009      	beq.n	8010e2c <xTaskPriorityDisinherit+0x34>
 8010e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e1c:	f383 8811 	msr	BASEPRI, r3
 8010e20:	f3bf 8f6f 	isb	sy
 8010e24:	f3bf 8f4f 	dsb	sy
 8010e28:	60fb      	str	r3, [r7, #12]
 8010e2a:	e7fe      	b.n	8010e2a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8010e2c:	693b      	ldr	r3, [r7, #16]
 8010e2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d109      	bne.n	8010e48 <xTaskPriorityDisinherit+0x50>
 8010e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e38:	f383 8811 	msr	BASEPRI, r3
 8010e3c:	f3bf 8f6f 	isb	sy
 8010e40:	f3bf 8f4f 	dsb	sy
 8010e44:	60bb      	str	r3, [r7, #8]
 8010e46:	e7fe      	b.n	8010e46 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8010e48:	693b      	ldr	r3, [r7, #16]
 8010e4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010e4c:	1e5a      	subs	r2, r3, #1
 8010e4e:	693b      	ldr	r3, [r7, #16]
 8010e50:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010e52:	693b      	ldr	r3, [r7, #16]
 8010e54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010e56:	693b      	ldr	r3, [r7, #16]
 8010e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010e5a:	429a      	cmp	r2, r3
 8010e5c:	d044      	beq.n	8010ee8 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010e5e:	693b      	ldr	r3, [r7, #16]
 8010e60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	d140      	bne.n	8010ee8 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010e66:	693b      	ldr	r3, [r7, #16]
 8010e68:	3304      	adds	r3, #4
 8010e6a:	4618      	mov	r0, r3
 8010e6c:	f7fe fa17 	bl	800f29e <uxListRemove>
 8010e70:	4603      	mov	r3, r0
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d115      	bne.n	8010ea2 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8010e76:	693b      	ldr	r3, [r7, #16]
 8010e78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010e7a:	491f      	ldr	r1, [pc, #124]	; (8010ef8 <xTaskPriorityDisinherit+0x100>)
 8010e7c:	4613      	mov	r3, r2
 8010e7e:	009b      	lsls	r3, r3, #2
 8010e80:	4413      	add	r3, r2
 8010e82:	009b      	lsls	r3, r3, #2
 8010e84:	440b      	add	r3, r1
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d10a      	bne.n	8010ea2 <xTaskPriorityDisinherit+0xaa>
 8010e8c:	693b      	ldr	r3, [r7, #16]
 8010e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e90:	2201      	movs	r2, #1
 8010e92:	fa02 f303 	lsl.w	r3, r2, r3
 8010e96:	43da      	mvns	r2, r3
 8010e98:	4b18      	ldr	r3, [pc, #96]	; (8010efc <xTaskPriorityDisinherit+0x104>)
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	4013      	ands	r3, r2
 8010e9e:	4a17      	ldr	r2, [pc, #92]	; (8010efc <xTaskPriorityDisinherit+0x104>)
 8010ea0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010ea2:	693b      	ldr	r3, [r7, #16]
 8010ea4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010ea6:	693b      	ldr	r3, [r7, #16]
 8010ea8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010eaa:	693b      	ldr	r3, [r7, #16]
 8010eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010eae:	f1c3 0207 	rsb	r2, r3, #7
 8010eb2:	693b      	ldr	r3, [r7, #16]
 8010eb4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010eb6:	693b      	ldr	r3, [r7, #16]
 8010eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010eba:	2201      	movs	r2, #1
 8010ebc:	409a      	lsls	r2, r3
 8010ebe:	4b0f      	ldr	r3, [pc, #60]	; (8010efc <xTaskPriorityDisinherit+0x104>)
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	4313      	orrs	r3, r2
 8010ec4:	4a0d      	ldr	r2, [pc, #52]	; (8010efc <xTaskPriorityDisinherit+0x104>)
 8010ec6:	6013      	str	r3, [r2, #0]
 8010ec8:	693b      	ldr	r3, [r7, #16]
 8010eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ecc:	4613      	mov	r3, r2
 8010ece:	009b      	lsls	r3, r3, #2
 8010ed0:	4413      	add	r3, r2
 8010ed2:	009b      	lsls	r3, r3, #2
 8010ed4:	4a08      	ldr	r2, [pc, #32]	; (8010ef8 <xTaskPriorityDisinherit+0x100>)
 8010ed6:	441a      	add	r2, r3
 8010ed8:	693b      	ldr	r3, [r7, #16]
 8010eda:	3304      	adds	r3, #4
 8010edc:	4619      	mov	r1, r3
 8010ede:	4610      	mov	r0, r2
 8010ee0:	f7fe f980 	bl	800f1e4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010ee4:	2301      	movs	r3, #1
 8010ee6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010ee8:	697b      	ldr	r3, [r7, #20]
	}
 8010eea:	4618      	mov	r0, r3
 8010eec:	3718      	adds	r7, #24
 8010eee:	46bd      	mov	sp, r7
 8010ef0:	bd80      	pop	{r7, pc}
 8010ef2:	bf00      	nop
 8010ef4:	20001488 	.word	0x20001488
 8010ef8:	2000148c 	.word	0x2000148c
 8010efc:	20001590 	.word	0x20001590

08010f00 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8010f00:	b580      	push	{r7, lr}
 8010f02:	b088      	sub	sp, #32
 8010f04:	af00      	add	r7, sp, #0
 8010f06:	6078      	str	r0, [r7, #4]
 8010f08:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8010f0e:	2301      	movs	r3, #1
 8010f10:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	f000 8086 	beq.w	8011026 <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8010f1a:	69bb      	ldr	r3, [r7, #24]
 8010f1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d109      	bne.n	8010f36 <vTaskPriorityDisinheritAfterTimeout+0x36>
 8010f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f26:	f383 8811 	msr	BASEPRI, r3
 8010f2a:	f3bf 8f6f 	isb	sy
 8010f2e:	f3bf 8f4f 	dsb	sy
 8010f32:	60fb      	str	r3, [r7, #12]
 8010f34:	e7fe      	b.n	8010f34 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8010f36:	69bb      	ldr	r3, [r7, #24]
 8010f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f3a:	683a      	ldr	r2, [r7, #0]
 8010f3c:	429a      	cmp	r2, r3
 8010f3e:	d902      	bls.n	8010f46 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8010f40:	683b      	ldr	r3, [r7, #0]
 8010f42:	61fb      	str	r3, [r7, #28]
 8010f44:	e002      	b.n	8010f4c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8010f46:	69bb      	ldr	r3, [r7, #24]
 8010f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f4a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8010f4c:	69bb      	ldr	r3, [r7, #24]
 8010f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f50:	69fa      	ldr	r2, [r7, #28]
 8010f52:	429a      	cmp	r2, r3
 8010f54:	d067      	beq.n	8011026 <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8010f56:	69bb      	ldr	r3, [r7, #24]
 8010f58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010f5a:	697a      	ldr	r2, [r7, #20]
 8010f5c:	429a      	cmp	r2, r3
 8010f5e:	d162      	bne.n	8011026 <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8010f60:	4b33      	ldr	r3, [pc, #204]	; (8011030 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	69ba      	ldr	r2, [r7, #24]
 8010f66:	429a      	cmp	r2, r3
 8010f68:	d109      	bne.n	8010f7e <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8010f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f6e:	f383 8811 	msr	BASEPRI, r3
 8010f72:	f3bf 8f6f 	isb	sy
 8010f76:	f3bf 8f4f 	dsb	sy
 8010f7a:	60bb      	str	r3, [r7, #8]
 8010f7c:	e7fe      	b.n	8010f7c <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8010f7e:	69bb      	ldr	r3, [r7, #24]
 8010f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f82:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8010f84:	69bb      	ldr	r3, [r7, #24]
 8010f86:	69fa      	ldr	r2, [r7, #28]
 8010f88:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010f8a:	69bb      	ldr	r3, [r7, #24]
 8010f8c:	699b      	ldr	r3, [r3, #24]
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	db04      	blt.n	8010f9c <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010f92:	69fb      	ldr	r3, [r7, #28]
 8010f94:	f1c3 0207 	rsb	r2, r3, #7
 8010f98:	69bb      	ldr	r3, [r7, #24]
 8010f9a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010f9c:	69bb      	ldr	r3, [r7, #24]
 8010f9e:	6959      	ldr	r1, [r3, #20]
 8010fa0:	693a      	ldr	r2, [r7, #16]
 8010fa2:	4613      	mov	r3, r2
 8010fa4:	009b      	lsls	r3, r3, #2
 8010fa6:	4413      	add	r3, r2
 8010fa8:	009b      	lsls	r3, r3, #2
 8010faa:	4a22      	ldr	r2, [pc, #136]	; (8011034 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8010fac:	4413      	add	r3, r2
 8010fae:	4299      	cmp	r1, r3
 8010fb0:	d101      	bne.n	8010fb6 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8010fb2:	2301      	movs	r3, #1
 8010fb4:	e000      	b.n	8010fb8 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8010fb6:	2300      	movs	r3, #0
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d034      	beq.n	8011026 <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010fbc:	69bb      	ldr	r3, [r7, #24]
 8010fbe:	3304      	adds	r3, #4
 8010fc0:	4618      	mov	r0, r3
 8010fc2:	f7fe f96c 	bl	800f29e <uxListRemove>
 8010fc6:	4603      	mov	r3, r0
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d115      	bne.n	8010ff8 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8010fcc:	69bb      	ldr	r3, [r7, #24]
 8010fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010fd0:	4918      	ldr	r1, [pc, #96]	; (8011034 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8010fd2:	4613      	mov	r3, r2
 8010fd4:	009b      	lsls	r3, r3, #2
 8010fd6:	4413      	add	r3, r2
 8010fd8:	009b      	lsls	r3, r3, #2
 8010fda:	440b      	add	r3, r1
 8010fdc:	681b      	ldr	r3, [r3, #0]
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d10a      	bne.n	8010ff8 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 8010fe2:	69bb      	ldr	r3, [r7, #24]
 8010fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fe6:	2201      	movs	r2, #1
 8010fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8010fec:	43da      	mvns	r2, r3
 8010fee:	4b12      	ldr	r3, [pc, #72]	; (8011038 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8010ff0:	681b      	ldr	r3, [r3, #0]
 8010ff2:	4013      	ands	r3, r2
 8010ff4:	4a10      	ldr	r2, [pc, #64]	; (8011038 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8010ff6:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8010ff8:	69bb      	ldr	r3, [r7, #24]
 8010ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ffc:	2201      	movs	r2, #1
 8010ffe:	409a      	lsls	r2, r3
 8011000:	4b0d      	ldr	r3, [pc, #52]	; (8011038 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8011002:	681b      	ldr	r3, [r3, #0]
 8011004:	4313      	orrs	r3, r2
 8011006:	4a0c      	ldr	r2, [pc, #48]	; (8011038 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8011008:	6013      	str	r3, [r2, #0]
 801100a:	69bb      	ldr	r3, [r7, #24]
 801100c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801100e:	4613      	mov	r3, r2
 8011010:	009b      	lsls	r3, r3, #2
 8011012:	4413      	add	r3, r2
 8011014:	009b      	lsls	r3, r3, #2
 8011016:	4a07      	ldr	r2, [pc, #28]	; (8011034 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8011018:	441a      	add	r2, r3
 801101a:	69bb      	ldr	r3, [r7, #24]
 801101c:	3304      	adds	r3, #4
 801101e:	4619      	mov	r1, r3
 8011020:	4610      	mov	r0, r2
 8011022:	f7fe f8df 	bl	800f1e4 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011026:	bf00      	nop
 8011028:	3720      	adds	r7, #32
 801102a:	46bd      	mov	sp, r7
 801102c:	bd80      	pop	{r7, pc}
 801102e:	bf00      	nop
 8011030:	20001488 	.word	0x20001488
 8011034:	2000148c 	.word	0x2000148c
 8011038:	20001590 	.word	0x20001590

0801103c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 801103c:	b480      	push	{r7}
 801103e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8011040:	4b07      	ldr	r3, [pc, #28]	; (8011060 <pvTaskIncrementMutexHeldCount+0x24>)
 8011042:	681b      	ldr	r3, [r3, #0]
 8011044:	2b00      	cmp	r3, #0
 8011046:	d004      	beq.n	8011052 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8011048:	4b05      	ldr	r3, [pc, #20]	; (8011060 <pvTaskIncrementMutexHeldCount+0x24>)
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801104e:	3201      	adds	r2, #1
 8011050:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8011052:	4b03      	ldr	r3, [pc, #12]	; (8011060 <pvTaskIncrementMutexHeldCount+0x24>)
 8011054:	681b      	ldr	r3, [r3, #0]
	}
 8011056:	4618      	mov	r0, r3
 8011058:	46bd      	mov	sp, r7
 801105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801105e:	4770      	bx	lr
 8011060:	20001488 	.word	0x20001488

08011064 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8011064:	b580      	push	{r7, lr}
 8011066:	b086      	sub	sp, #24
 8011068:	af00      	add	r7, sp, #0
 801106a:	60f8      	str	r0, [r7, #12]
 801106c:	60b9      	str	r1, [r7, #8]
 801106e:	607a      	str	r2, [r7, #4]
 8011070:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8011072:	f000 fb43 	bl	80116fc <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8011076:	4b26      	ldr	r3, [pc, #152]	; (8011110 <xTaskNotifyWait+0xac>)
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801107e:	b2db      	uxtb	r3, r3
 8011080:	2b02      	cmp	r3, #2
 8011082:	d01a      	beq.n	80110ba <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8011084:	4b22      	ldr	r3, [pc, #136]	; (8011110 <xTaskNotifyWait+0xac>)
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 801108a:	68fa      	ldr	r2, [r7, #12]
 801108c:	43d2      	mvns	r2, r2
 801108e:	400a      	ands	r2, r1
 8011090:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8011092:	4b1f      	ldr	r3, [pc, #124]	; (8011110 <xTaskNotifyWait+0xac>)
 8011094:	681b      	ldr	r3, [r3, #0]
 8011096:	2201      	movs	r2, #1
 8011098:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 801109c:	683b      	ldr	r3, [r7, #0]
 801109e:	2b00      	cmp	r3, #0
 80110a0:	d00b      	beq.n	80110ba <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80110a2:	2101      	movs	r1, #1
 80110a4:	6838      	ldr	r0, [r7, #0]
 80110a6:	f000 f99d 	bl	80113e4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80110aa:	4b1a      	ldr	r3, [pc, #104]	; (8011114 <xTaskNotifyWait+0xb0>)
 80110ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80110b0:	601a      	str	r2, [r3, #0]
 80110b2:	f3bf 8f4f 	dsb	sy
 80110b6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80110ba:	f000 fb4d 	bl	8011758 <vPortExitCritical>

		taskENTER_CRITICAL();
 80110be:	f000 fb1d 	bl	80116fc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d004      	beq.n	80110d2 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80110c8:	4b11      	ldr	r3, [pc, #68]	; (8011110 <xTaskNotifyWait+0xac>)
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80110d2:	4b0f      	ldr	r3, [pc, #60]	; (8011110 <xTaskNotifyWait+0xac>)
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80110da:	b2db      	uxtb	r3, r3
 80110dc:	2b02      	cmp	r3, #2
 80110de:	d002      	beq.n	80110e6 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80110e0:	2300      	movs	r3, #0
 80110e2:	617b      	str	r3, [r7, #20]
 80110e4:	e008      	b.n	80110f8 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80110e6:	4b0a      	ldr	r3, [pc, #40]	; (8011110 <xTaskNotifyWait+0xac>)
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80110ec:	68ba      	ldr	r2, [r7, #8]
 80110ee:	43d2      	mvns	r2, r2
 80110f0:	400a      	ands	r2, r1
 80110f2:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 80110f4:	2301      	movs	r3, #1
 80110f6:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80110f8:	4b05      	ldr	r3, [pc, #20]	; (8011110 <xTaskNotifyWait+0xac>)
 80110fa:	681b      	ldr	r3, [r3, #0]
 80110fc:	2200      	movs	r2, #0
 80110fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 8011102:	f000 fb29 	bl	8011758 <vPortExitCritical>

		return xReturn;
 8011106:	697b      	ldr	r3, [r7, #20]
	}
 8011108:	4618      	mov	r0, r3
 801110a:	3718      	adds	r7, #24
 801110c:	46bd      	mov	sp, r7
 801110e:	bd80      	pop	{r7, pc}
 8011110:	20001488 	.word	0x20001488
 8011114:	e000ed04 	.word	0xe000ed04

08011118 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8011118:	b580      	push	{r7, lr}
 801111a:	b08a      	sub	sp, #40	; 0x28
 801111c:	af00      	add	r7, sp, #0
 801111e:	60f8      	str	r0, [r7, #12]
 8011120:	60b9      	str	r1, [r7, #8]
 8011122:	603b      	str	r3, [r7, #0]
 8011124:	4613      	mov	r3, r2
 8011126:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8011128:	2301      	movs	r3, #1
 801112a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	2b00      	cmp	r3, #0
 8011130:	d109      	bne.n	8011146 <xTaskGenericNotify+0x2e>
 8011132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011136:	f383 8811 	msr	BASEPRI, r3
 801113a:	f3bf 8f6f 	isb	sy
 801113e:	f3bf 8f4f 	dsb	sy
 8011142:	61bb      	str	r3, [r7, #24]
 8011144:	e7fe      	b.n	8011144 <xTaskGenericNotify+0x2c>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 8011146:	68fb      	ldr	r3, [r7, #12]
 8011148:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 801114a:	f000 fad7 	bl	80116fc <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 801114e:	683b      	ldr	r3, [r7, #0]
 8011150:	2b00      	cmp	r3, #0
 8011152:	d003      	beq.n	801115c <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8011154:	6a3b      	ldr	r3, [r7, #32]
 8011156:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011158:	683b      	ldr	r3, [r7, #0]
 801115a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 801115c:	6a3b      	ldr	r3, [r7, #32]
 801115e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8011162:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8011164:	6a3b      	ldr	r3, [r7, #32]
 8011166:	2202      	movs	r2, #2
 8011168:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 801116c:	79fb      	ldrb	r3, [r7, #7]
 801116e:	2b04      	cmp	r3, #4
 8011170:	d827      	bhi.n	80111c2 <xTaskGenericNotify+0xaa>
 8011172:	a201      	add	r2, pc, #4	; (adr r2, 8011178 <xTaskGenericNotify+0x60>)
 8011174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011178:	080111c3 	.word	0x080111c3
 801117c:	0801118d 	.word	0x0801118d
 8011180:	0801119b 	.word	0x0801119b
 8011184:	080111a7 	.word	0x080111a7
 8011188:	080111af 	.word	0x080111af
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 801118c:	6a3b      	ldr	r3, [r7, #32]
 801118e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011190:	68bb      	ldr	r3, [r7, #8]
 8011192:	431a      	orrs	r2, r3
 8011194:	6a3b      	ldr	r3, [r7, #32]
 8011196:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8011198:	e013      	b.n	80111c2 <xTaskGenericNotify+0xaa>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 801119a:	6a3b      	ldr	r3, [r7, #32]
 801119c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801119e:	1c5a      	adds	r2, r3, #1
 80111a0:	6a3b      	ldr	r3, [r7, #32]
 80111a2:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80111a4:	e00d      	b.n	80111c2 <xTaskGenericNotify+0xaa>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80111a6:	6a3b      	ldr	r3, [r7, #32]
 80111a8:	68ba      	ldr	r2, [r7, #8]
 80111aa:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80111ac:	e009      	b.n	80111c2 <xTaskGenericNotify+0xaa>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80111ae:	7ffb      	ldrb	r3, [r7, #31]
 80111b0:	2b02      	cmp	r3, #2
 80111b2:	d003      	beq.n	80111bc <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80111b4:	6a3b      	ldr	r3, [r7, #32]
 80111b6:	68ba      	ldr	r2, [r7, #8]
 80111b8:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80111ba:	e001      	b.n	80111c0 <xTaskGenericNotify+0xa8>
						xReturn = pdFAIL;
 80111bc:	2300      	movs	r3, #0
 80111be:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80111c0:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80111c2:	7ffb      	ldrb	r3, [r7, #31]
 80111c4:	2b01      	cmp	r3, #1
 80111c6:	d138      	bne.n	801123a <xTaskGenericNotify+0x122>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80111c8:	6a3b      	ldr	r3, [r7, #32]
 80111ca:	3304      	adds	r3, #4
 80111cc:	4618      	mov	r0, r3
 80111ce:	f7fe f866 	bl	800f29e <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80111d2:	6a3b      	ldr	r3, [r7, #32]
 80111d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111d6:	2201      	movs	r2, #1
 80111d8:	409a      	lsls	r2, r3
 80111da:	4b1b      	ldr	r3, [pc, #108]	; (8011248 <xTaskGenericNotify+0x130>)
 80111dc:	681b      	ldr	r3, [r3, #0]
 80111de:	4313      	orrs	r3, r2
 80111e0:	4a19      	ldr	r2, [pc, #100]	; (8011248 <xTaskGenericNotify+0x130>)
 80111e2:	6013      	str	r3, [r2, #0]
 80111e4:	6a3b      	ldr	r3, [r7, #32]
 80111e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80111e8:	4613      	mov	r3, r2
 80111ea:	009b      	lsls	r3, r3, #2
 80111ec:	4413      	add	r3, r2
 80111ee:	009b      	lsls	r3, r3, #2
 80111f0:	4a16      	ldr	r2, [pc, #88]	; (801124c <xTaskGenericNotify+0x134>)
 80111f2:	441a      	add	r2, r3
 80111f4:	6a3b      	ldr	r3, [r7, #32]
 80111f6:	3304      	adds	r3, #4
 80111f8:	4619      	mov	r1, r3
 80111fa:	4610      	mov	r0, r2
 80111fc:	f7fd fff2 	bl	800f1e4 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8011200:	6a3b      	ldr	r3, [r7, #32]
 8011202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011204:	2b00      	cmp	r3, #0
 8011206:	d009      	beq.n	801121c <xTaskGenericNotify+0x104>
 8011208:	f04f 0350 	mov.w	r3, #80	; 0x50
 801120c:	f383 8811 	msr	BASEPRI, r3
 8011210:	f3bf 8f6f 	isb	sy
 8011214:	f3bf 8f4f 	dsb	sy
 8011218:	617b      	str	r3, [r7, #20]
 801121a:	e7fe      	b.n	801121a <xTaskGenericNotify+0x102>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801121c:	6a3b      	ldr	r3, [r7, #32]
 801121e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011220:	4b0b      	ldr	r3, [pc, #44]	; (8011250 <xTaskGenericNotify+0x138>)
 8011222:	681b      	ldr	r3, [r3, #0]
 8011224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011226:	429a      	cmp	r2, r3
 8011228:	d907      	bls.n	801123a <xTaskGenericNotify+0x122>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 801122a:	4b0a      	ldr	r3, [pc, #40]	; (8011254 <xTaskGenericNotify+0x13c>)
 801122c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011230:	601a      	str	r2, [r3, #0]
 8011232:	f3bf 8f4f 	dsb	sy
 8011236:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801123a:	f000 fa8d 	bl	8011758 <vPortExitCritical>

		return xReturn;
 801123e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8011240:	4618      	mov	r0, r3
 8011242:	3728      	adds	r7, #40	; 0x28
 8011244:	46bd      	mov	sp, r7
 8011246:	bd80      	pop	{r7, pc}
 8011248:	20001590 	.word	0x20001590
 801124c:	2000148c 	.word	0x2000148c
 8011250:	20001488 	.word	0x20001488
 8011254:	e000ed04 	.word	0xe000ed04

08011258 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8011258:	b580      	push	{r7, lr}
 801125a:	b08e      	sub	sp, #56	; 0x38
 801125c:	af00      	add	r7, sp, #0
 801125e:	60f8      	str	r0, [r7, #12]
 8011260:	60b9      	str	r1, [r7, #8]
 8011262:	603b      	str	r3, [r7, #0]
 8011264:	4613      	mov	r3, r2
 8011266:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8011268:	2301      	movs	r3, #1
 801126a:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 801126c:	68fb      	ldr	r3, [r7, #12]
 801126e:	2b00      	cmp	r3, #0
 8011270:	d109      	bne.n	8011286 <xTaskGenericNotifyFromISR+0x2e>
 8011272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011276:	f383 8811 	msr	BASEPRI, r3
 801127a:	f3bf 8f6f 	isb	sy
 801127e:	f3bf 8f4f 	dsb	sy
 8011282:	627b      	str	r3, [r7, #36]	; 0x24
 8011284:	e7fe      	b.n	8011284 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011286:	f000 fb15 	bl	80118b4 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 801128e:	f3ef 8211 	mrs	r2, BASEPRI
 8011292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011296:	f383 8811 	msr	BASEPRI, r3
 801129a:	f3bf 8f6f 	isb	sy
 801129e:	f3bf 8f4f 	dsb	sy
 80112a2:	623a      	str	r2, [r7, #32]
 80112a4:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80112a6:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80112a8:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80112aa:	683b      	ldr	r3, [r7, #0]
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d003      	beq.n	80112b8 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80112b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80112b4:	683b      	ldr	r3, [r7, #0]
 80112b6:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80112b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80112be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80112c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112c4:	2202      	movs	r2, #2
 80112c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 80112ca:	79fb      	ldrb	r3, [r7, #7]
 80112cc:	2b04      	cmp	r3, #4
 80112ce:	d829      	bhi.n	8011324 <xTaskGenericNotifyFromISR+0xcc>
 80112d0:	a201      	add	r2, pc, #4	; (adr r2, 80112d8 <xTaskGenericNotifyFromISR+0x80>)
 80112d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112d6:	bf00      	nop
 80112d8:	08011325 	.word	0x08011325
 80112dc:	080112ed 	.word	0x080112ed
 80112e0:	080112fb 	.word	0x080112fb
 80112e4:	08011307 	.word	0x08011307
 80112e8:	0801130f 	.word	0x0801130f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80112ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80112f0:	68bb      	ldr	r3, [r7, #8]
 80112f2:	431a      	orrs	r2, r3
 80112f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112f6:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80112f8:	e014      	b.n	8011324 <xTaskGenericNotifyFromISR+0xcc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80112fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80112fe:	1c5a      	adds	r2, r3, #1
 8011300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011302:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8011304:	e00e      	b.n	8011324 <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8011306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011308:	68ba      	ldr	r2, [r7, #8]
 801130a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 801130c:	e00a      	b.n	8011324 <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 801130e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011312:	2b02      	cmp	r3, #2
 8011314:	d003      	beq.n	801131e <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8011316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011318:	68ba      	ldr	r2, [r7, #8]
 801131a:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 801131c:	e001      	b.n	8011322 <xTaskGenericNotifyFromISR+0xca>
						xReturn = pdFAIL;
 801131e:	2300      	movs	r3, #0
 8011320:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8011322:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8011324:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011328:	2b01      	cmp	r3, #1
 801132a:	d145      	bne.n	80113b8 <xTaskGenericNotifyFromISR+0x160>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801132c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801132e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011330:	2b00      	cmp	r3, #0
 8011332:	d009      	beq.n	8011348 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 8011334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011338:	f383 8811 	msr	BASEPRI, r3
 801133c:	f3bf 8f6f 	isb	sy
 8011340:	f3bf 8f4f 	dsb	sy
 8011344:	61bb      	str	r3, [r7, #24]
 8011346:	e7fe      	b.n	8011346 <xTaskGenericNotifyFromISR+0xee>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011348:	4b20      	ldr	r3, [pc, #128]	; (80113cc <xTaskGenericNotifyFromISR+0x174>)
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	2b00      	cmp	r3, #0
 801134e:	d11c      	bne.n	801138a <xTaskGenericNotifyFromISR+0x132>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011352:	3304      	adds	r3, #4
 8011354:	4618      	mov	r0, r3
 8011356:	f7fd ffa2 	bl	800f29e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801135a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801135c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801135e:	2201      	movs	r2, #1
 8011360:	409a      	lsls	r2, r3
 8011362:	4b1b      	ldr	r3, [pc, #108]	; (80113d0 <xTaskGenericNotifyFromISR+0x178>)
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	4313      	orrs	r3, r2
 8011368:	4a19      	ldr	r2, [pc, #100]	; (80113d0 <xTaskGenericNotifyFromISR+0x178>)
 801136a:	6013      	str	r3, [r2, #0]
 801136c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801136e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011370:	4613      	mov	r3, r2
 8011372:	009b      	lsls	r3, r3, #2
 8011374:	4413      	add	r3, r2
 8011376:	009b      	lsls	r3, r3, #2
 8011378:	4a16      	ldr	r2, [pc, #88]	; (80113d4 <xTaskGenericNotifyFromISR+0x17c>)
 801137a:	441a      	add	r2, r3
 801137c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801137e:	3304      	adds	r3, #4
 8011380:	4619      	mov	r1, r3
 8011382:	4610      	mov	r0, r2
 8011384:	f7fd ff2e 	bl	800f1e4 <vListInsertEnd>
 8011388:	e005      	b.n	8011396 <xTaskGenericNotifyFromISR+0x13e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 801138a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801138c:	3318      	adds	r3, #24
 801138e:	4619      	mov	r1, r3
 8011390:	4811      	ldr	r0, [pc, #68]	; (80113d8 <xTaskGenericNotifyFromISR+0x180>)
 8011392:	f7fd ff27 	bl	800f1e4 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011398:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801139a:	4b10      	ldr	r3, [pc, #64]	; (80113dc <xTaskGenericNotifyFromISR+0x184>)
 801139c:	681b      	ldr	r3, [r3, #0]
 801139e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113a0:	429a      	cmp	r2, r3
 80113a2:	d909      	bls.n	80113b8 <xTaskGenericNotifyFromISR+0x160>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80113a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d003      	beq.n	80113b2 <xTaskGenericNotifyFromISR+0x15a>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80113aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80113ac:	2201      	movs	r2, #1
 80113ae:	601a      	str	r2, [r3, #0]
 80113b0:	e002      	b.n	80113b8 <xTaskGenericNotifyFromISR+0x160>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 80113b2:	4b0b      	ldr	r3, [pc, #44]	; (80113e0 <xTaskGenericNotifyFromISR+0x188>)
 80113b4:	2201      	movs	r2, #1
 80113b6:	601a      	str	r2, [r3, #0]
 80113b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113ba:	617b      	str	r3, [r7, #20]
	__asm volatile
 80113bc:	697b      	ldr	r3, [r7, #20]
 80113be:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80113c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 80113c4:	4618      	mov	r0, r3
 80113c6:	3738      	adds	r7, #56	; 0x38
 80113c8:	46bd      	mov	sp, r7
 80113ca:	bd80      	pop	{r7, pc}
 80113cc:	200015b0 	.word	0x200015b0
 80113d0:	20001590 	.word	0x20001590
 80113d4:	2000148c 	.word	0x2000148c
 80113d8:	20001548 	.word	0x20001548
 80113dc:	20001488 	.word	0x20001488
 80113e0:	2000159c 	.word	0x2000159c

080113e4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80113e4:	b580      	push	{r7, lr}
 80113e6:	b084      	sub	sp, #16
 80113e8:	af00      	add	r7, sp, #0
 80113ea:	6078      	str	r0, [r7, #4]
 80113ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80113ee:	4b29      	ldr	r3, [pc, #164]	; (8011494 <prvAddCurrentTaskToDelayedList+0xb0>)
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80113f4:	4b28      	ldr	r3, [pc, #160]	; (8011498 <prvAddCurrentTaskToDelayedList+0xb4>)
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	3304      	adds	r3, #4
 80113fa:	4618      	mov	r0, r3
 80113fc:	f7fd ff4f 	bl	800f29e <uxListRemove>
 8011400:	4603      	mov	r3, r0
 8011402:	2b00      	cmp	r3, #0
 8011404:	d10b      	bne.n	801141e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8011406:	4b24      	ldr	r3, [pc, #144]	; (8011498 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011408:	681b      	ldr	r3, [r3, #0]
 801140a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801140c:	2201      	movs	r2, #1
 801140e:	fa02 f303 	lsl.w	r3, r2, r3
 8011412:	43da      	mvns	r2, r3
 8011414:	4b21      	ldr	r3, [pc, #132]	; (801149c <prvAddCurrentTaskToDelayedList+0xb8>)
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	4013      	ands	r3, r2
 801141a:	4a20      	ldr	r2, [pc, #128]	; (801149c <prvAddCurrentTaskToDelayedList+0xb8>)
 801141c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011424:	d10a      	bne.n	801143c <prvAddCurrentTaskToDelayedList+0x58>
 8011426:	683b      	ldr	r3, [r7, #0]
 8011428:	2b00      	cmp	r3, #0
 801142a:	d007      	beq.n	801143c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801142c:	4b1a      	ldr	r3, [pc, #104]	; (8011498 <prvAddCurrentTaskToDelayedList+0xb4>)
 801142e:	681b      	ldr	r3, [r3, #0]
 8011430:	3304      	adds	r3, #4
 8011432:	4619      	mov	r1, r3
 8011434:	481a      	ldr	r0, [pc, #104]	; (80114a0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8011436:	f7fd fed5 	bl	800f1e4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801143a:	e026      	b.n	801148a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801143c:	68fa      	ldr	r2, [r7, #12]
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	4413      	add	r3, r2
 8011442:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011444:	4b14      	ldr	r3, [pc, #80]	; (8011498 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011446:	681b      	ldr	r3, [r3, #0]
 8011448:	68ba      	ldr	r2, [r7, #8]
 801144a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801144c:	68ba      	ldr	r2, [r7, #8]
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	429a      	cmp	r2, r3
 8011452:	d209      	bcs.n	8011468 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011454:	4b13      	ldr	r3, [pc, #76]	; (80114a4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8011456:	681a      	ldr	r2, [r3, #0]
 8011458:	4b0f      	ldr	r3, [pc, #60]	; (8011498 <prvAddCurrentTaskToDelayedList+0xb4>)
 801145a:	681b      	ldr	r3, [r3, #0]
 801145c:	3304      	adds	r3, #4
 801145e:	4619      	mov	r1, r3
 8011460:	4610      	mov	r0, r2
 8011462:	f7fd fee3 	bl	800f22c <vListInsert>
}
 8011466:	e010      	b.n	801148a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011468:	4b0f      	ldr	r3, [pc, #60]	; (80114a8 <prvAddCurrentTaskToDelayedList+0xc4>)
 801146a:	681a      	ldr	r2, [r3, #0]
 801146c:	4b0a      	ldr	r3, [pc, #40]	; (8011498 <prvAddCurrentTaskToDelayedList+0xb4>)
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	3304      	adds	r3, #4
 8011472:	4619      	mov	r1, r3
 8011474:	4610      	mov	r0, r2
 8011476:	f7fd fed9 	bl	800f22c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801147a:	4b0c      	ldr	r3, [pc, #48]	; (80114ac <prvAddCurrentTaskToDelayedList+0xc8>)
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	68ba      	ldr	r2, [r7, #8]
 8011480:	429a      	cmp	r2, r3
 8011482:	d202      	bcs.n	801148a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8011484:	4a09      	ldr	r2, [pc, #36]	; (80114ac <prvAddCurrentTaskToDelayedList+0xc8>)
 8011486:	68bb      	ldr	r3, [r7, #8]
 8011488:	6013      	str	r3, [r2, #0]
}
 801148a:	bf00      	nop
 801148c:	3710      	adds	r7, #16
 801148e:	46bd      	mov	sp, r7
 8011490:	bd80      	pop	{r7, pc}
 8011492:	bf00      	nop
 8011494:	2000158c 	.word	0x2000158c
 8011498:	20001488 	.word	0x20001488
 801149c:	20001590 	.word	0x20001590
 80114a0:	20001574 	.word	0x20001574
 80114a4:	20001544 	.word	0x20001544
 80114a8:	20001540 	.word	0x20001540
 80114ac:	200015a8 	.word	0x200015a8

080114b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80114b0:	b480      	push	{r7}
 80114b2:	b085      	sub	sp, #20
 80114b4:	af00      	add	r7, sp, #0
 80114b6:	60f8      	str	r0, [r7, #12]
 80114b8:	60b9      	str	r1, [r7, #8]
 80114ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	3b04      	subs	r3, #4
 80114c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80114c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80114ca:	68fb      	ldr	r3, [r7, #12]
 80114cc:	3b04      	subs	r3, #4
 80114ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80114d0:	68bb      	ldr	r3, [r7, #8]
 80114d2:	f023 0201 	bic.w	r2, r3, #1
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80114da:	68fb      	ldr	r3, [r7, #12]
 80114dc:	3b04      	subs	r3, #4
 80114de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80114e0:	4a0c      	ldr	r2, [pc, #48]	; (8011514 <pxPortInitialiseStack+0x64>)
 80114e2:	68fb      	ldr	r3, [r7, #12]
 80114e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80114e6:	68fb      	ldr	r3, [r7, #12]
 80114e8:	3b14      	subs	r3, #20
 80114ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80114ec:	687a      	ldr	r2, [r7, #4]
 80114ee:	68fb      	ldr	r3, [r7, #12]
 80114f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	3b04      	subs	r3, #4
 80114f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	f06f 0202 	mvn.w	r2, #2
 80114fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011500:	68fb      	ldr	r3, [r7, #12]
 8011502:	3b20      	subs	r3, #32
 8011504:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011506:	68fb      	ldr	r3, [r7, #12]
}
 8011508:	4618      	mov	r0, r3
 801150a:	3714      	adds	r7, #20
 801150c:	46bd      	mov	sp, r7
 801150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011512:	4770      	bx	lr
 8011514:	08011519 	.word	0x08011519

08011518 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011518:	b480      	push	{r7}
 801151a:	b085      	sub	sp, #20
 801151c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801151e:	2300      	movs	r3, #0
 8011520:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011522:	4b11      	ldr	r3, [pc, #68]	; (8011568 <prvTaskExitError+0x50>)
 8011524:	681b      	ldr	r3, [r3, #0]
 8011526:	f1b3 3fff 	cmp.w	r3, #4294967295
 801152a:	d009      	beq.n	8011540 <prvTaskExitError+0x28>
	__asm volatile
 801152c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011530:	f383 8811 	msr	BASEPRI, r3
 8011534:	f3bf 8f6f 	isb	sy
 8011538:	f3bf 8f4f 	dsb	sy
 801153c:	60fb      	str	r3, [r7, #12]
 801153e:	e7fe      	b.n	801153e <prvTaskExitError+0x26>
 8011540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011544:	f383 8811 	msr	BASEPRI, r3
 8011548:	f3bf 8f6f 	isb	sy
 801154c:	f3bf 8f4f 	dsb	sy
 8011550:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011552:	bf00      	nop
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	2b00      	cmp	r3, #0
 8011558:	d0fc      	beq.n	8011554 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801155a:	bf00      	nop
 801155c:	3714      	adds	r7, #20
 801155e:	46bd      	mov	sp, r7
 8011560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011564:	4770      	bx	lr
 8011566:	bf00      	nop
 8011568:	20000dd0 	.word	0x20000dd0
 801156c:	00000000 	.word	0x00000000

08011570 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011570:	4b07      	ldr	r3, [pc, #28]	; (8011590 <pxCurrentTCBConst2>)
 8011572:	6819      	ldr	r1, [r3, #0]
 8011574:	6808      	ldr	r0, [r1, #0]
 8011576:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801157a:	f380 8809 	msr	PSP, r0
 801157e:	f3bf 8f6f 	isb	sy
 8011582:	f04f 0000 	mov.w	r0, #0
 8011586:	f380 8811 	msr	BASEPRI, r0
 801158a:	4770      	bx	lr
 801158c:	f3af 8000 	nop.w

08011590 <pxCurrentTCBConst2>:
 8011590:	20001488 	.word	0x20001488
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011594:	bf00      	nop
 8011596:	bf00      	nop

08011598 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011598:	4808      	ldr	r0, [pc, #32]	; (80115bc <prvPortStartFirstTask+0x24>)
 801159a:	6800      	ldr	r0, [r0, #0]
 801159c:	6800      	ldr	r0, [r0, #0]
 801159e:	f380 8808 	msr	MSP, r0
 80115a2:	f04f 0000 	mov.w	r0, #0
 80115a6:	f380 8814 	msr	CONTROL, r0
 80115aa:	b662      	cpsie	i
 80115ac:	b661      	cpsie	f
 80115ae:	f3bf 8f4f 	dsb	sy
 80115b2:	f3bf 8f6f 	isb	sy
 80115b6:	df00      	svc	0
 80115b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80115ba:	bf00      	nop
 80115bc:	e000ed08 	.word	0xe000ed08

080115c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80115c0:	b580      	push	{r7, lr}
 80115c2:	b086      	sub	sp, #24
 80115c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80115c6:	4b44      	ldr	r3, [pc, #272]	; (80116d8 <xPortStartScheduler+0x118>)
 80115c8:	681b      	ldr	r3, [r3, #0]
 80115ca:	4a44      	ldr	r2, [pc, #272]	; (80116dc <xPortStartScheduler+0x11c>)
 80115cc:	4293      	cmp	r3, r2
 80115ce:	d109      	bne.n	80115e4 <xPortStartScheduler+0x24>
 80115d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115d4:	f383 8811 	msr	BASEPRI, r3
 80115d8:	f3bf 8f6f 	isb	sy
 80115dc:	f3bf 8f4f 	dsb	sy
 80115e0:	613b      	str	r3, [r7, #16]
 80115e2:	e7fe      	b.n	80115e2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80115e4:	4b3c      	ldr	r3, [pc, #240]	; (80116d8 <xPortStartScheduler+0x118>)
 80115e6:	681b      	ldr	r3, [r3, #0]
 80115e8:	4a3d      	ldr	r2, [pc, #244]	; (80116e0 <xPortStartScheduler+0x120>)
 80115ea:	4293      	cmp	r3, r2
 80115ec:	d109      	bne.n	8011602 <xPortStartScheduler+0x42>
 80115ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115f2:	f383 8811 	msr	BASEPRI, r3
 80115f6:	f3bf 8f6f 	isb	sy
 80115fa:	f3bf 8f4f 	dsb	sy
 80115fe:	60fb      	str	r3, [r7, #12]
 8011600:	e7fe      	b.n	8011600 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011602:	4b38      	ldr	r3, [pc, #224]	; (80116e4 <xPortStartScheduler+0x124>)
 8011604:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8011606:	697b      	ldr	r3, [r7, #20]
 8011608:	781b      	ldrb	r3, [r3, #0]
 801160a:	b2db      	uxtb	r3, r3
 801160c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801160e:	697b      	ldr	r3, [r7, #20]
 8011610:	22ff      	movs	r2, #255	; 0xff
 8011612:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011614:	697b      	ldr	r3, [r7, #20]
 8011616:	781b      	ldrb	r3, [r3, #0]
 8011618:	b2db      	uxtb	r3, r3
 801161a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801161c:	78fb      	ldrb	r3, [r7, #3]
 801161e:	b2db      	uxtb	r3, r3
 8011620:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011624:	b2da      	uxtb	r2, r3
 8011626:	4b30      	ldr	r3, [pc, #192]	; (80116e8 <xPortStartScheduler+0x128>)
 8011628:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801162a:	4b30      	ldr	r3, [pc, #192]	; (80116ec <xPortStartScheduler+0x12c>)
 801162c:	2207      	movs	r2, #7
 801162e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011630:	e009      	b.n	8011646 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8011632:	4b2e      	ldr	r3, [pc, #184]	; (80116ec <xPortStartScheduler+0x12c>)
 8011634:	681b      	ldr	r3, [r3, #0]
 8011636:	3b01      	subs	r3, #1
 8011638:	4a2c      	ldr	r2, [pc, #176]	; (80116ec <xPortStartScheduler+0x12c>)
 801163a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801163c:	78fb      	ldrb	r3, [r7, #3]
 801163e:	b2db      	uxtb	r3, r3
 8011640:	005b      	lsls	r3, r3, #1
 8011642:	b2db      	uxtb	r3, r3
 8011644:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011646:	78fb      	ldrb	r3, [r7, #3]
 8011648:	b2db      	uxtb	r3, r3
 801164a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801164e:	2b80      	cmp	r3, #128	; 0x80
 8011650:	d0ef      	beq.n	8011632 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011652:	4b26      	ldr	r3, [pc, #152]	; (80116ec <xPortStartScheduler+0x12c>)
 8011654:	681b      	ldr	r3, [r3, #0]
 8011656:	f1c3 0307 	rsb	r3, r3, #7
 801165a:	2b04      	cmp	r3, #4
 801165c:	d009      	beq.n	8011672 <xPortStartScheduler+0xb2>
 801165e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011662:	f383 8811 	msr	BASEPRI, r3
 8011666:	f3bf 8f6f 	isb	sy
 801166a:	f3bf 8f4f 	dsb	sy
 801166e:	60bb      	str	r3, [r7, #8]
 8011670:	e7fe      	b.n	8011670 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8011672:	4b1e      	ldr	r3, [pc, #120]	; (80116ec <xPortStartScheduler+0x12c>)
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	021b      	lsls	r3, r3, #8
 8011678:	4a1c      	ldr	r2, [pc, #112]	; (80116ec <xPortStartScheduler+0x12c>)
 801167a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801167c:	4b1b      	ldr	r3, [pc, #108]	; (80116ec <xPortStartScheduler+0x12c>)
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8011684:	4a19      	ldr	r2, [pc, #100]	; (80116ec <xPortStartScheduler+0x12c>)
 8011686:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	b2da      	uxtb	r2, r3
 801168c:	697b      	ldr	r3, [r7, #20]
 801168e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011690:	4b17      	ldr	r3, [pc, #92]	; (80116f0 <xPortStartScheduler+0x130>)
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	4a16      	ldr	r2, [pc, #88]	; (80116f0 <xPortStartScheduler+0x130>)
 8011696:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801169a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801169c:	4b14      	ldr	r3, [pc, #80]	; (80116f0 <xPortStartScheduler+0x130>)
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	4a13      	ldr	r2, [pc, #76]	; (80116f0 <xPortStartScheduler+0x130>)
 80116a2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80116a6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80116a8:	f000 f8d6 	bl	8011858 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80116ac:	4b11      	ldr	r3, [pc, #68]	; (80116f4 <xPortStartScheduler+0x134>)
 80116ae:	2200      	movs	r2, #0
 80116b0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80116b2:	f000 f8f5 	bl	80118a0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80116b6:	4b10      	ldr	r3, [pc, #64]	; (80116f8 <xPortStartScheduler+0x138>)
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	4a0f      	ldr	r2, [pc, #60]	; (80116f8 <xPortStartScheduler+0x138>)
 80116bc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80116c0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80116c2:	f7ff ff69 	bl	8011598 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80116c6:	f7ff f8b9 	bl	801083c <vTaskSwitchContext>
	prvTaskExitError();
 80116ca:	f7ff ff25 	bl	8011518 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80116ce:	2300      	movs	r3, #0
}
 80116d0:	4618      	mov	r0, r3
 80116d2:	3718      	adds	r7, #24
 80116d4:	46bd      	mov	sp, r7
 80116d6:	bd80      	pop	{r7, pc}
 80116d8:	e000ed00 	.word	0xe000ed00
 80116dc:	410fc271 	.word	0x410fc271
 80116e0:	410fc270 	.word	0x410fc270
 80116e4:	e000e400 	.word	0xe000e400
 80116e8:	200015b4 	.word	0x200015b4
 80116ec:	200015b8 	.word	0x200015b8
 80116f0:	e000ed20 	.word	0xe000ed20
 80116f4:	20000dd0 	.word	0x20000dd0
 80116f8:	e000ef34 	.word	0xe000ef34

080116fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80116fc:	b480      	push	{r7}
 80116fe:	b083      	sub	sp, #12
 8011700:	af00      	add	r7, sp, #0
 8011702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011706:	f383 8811 	msr	BASEPRI, r3
 801170a:	f3bf 8f6f 	isb	sy
 801170e:	f3bf 8f4f 	dsb	sy
 8011712:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8011714:	4b0e      	ldr	r3, [pc, #56]	; (8011750 <vPortEnterCritical+0x54>)
 8011716:	681b      	ldr	r3, [r3, #0]
 8011718:	3301      	adds	r3, #1
 801171a:	4a0d      	ldr	r2, [pc, #52]	; (8011750 <vPortEnterCritical+0x54>)
 801171c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801171e:	4b0c      	ldr	r3, [pc, #48]	; (8011750 <vPortEnterCritical+0x54>)
 8011720:	681b      	ldr	r3, [r3, #0]
 8011722:	2b01      	cmp	r3, #1
 8011724:	d10e      	bne.n	8011744 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011726:	4b0b      	ldr	r3, [pc, #44]	; (8011754 <vPortEnterCritical+0x58>)
 8011728:	681b      	ldr	r3, [r3, #0]
 801172a:	b2db      	uxtb	r3, r3
 801172c:	2b00      	cmp	r3, #0
 801172e:	d009      	beq.n	8011744 <vPortEnterCritical+0x48>
 8011730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011734:	f383 8811 	msr	BASEPRI, r3
 8011738:	f3bf 8f6f 	isb	sy
 801173c:	f3bf 8f4f 	dsb	sy
 8011740:	603b      	str	r3, [r7, #0]
 8011742:	e7fe      	b.n	8011742 <vPortEnterCritical+0x46>
	}
}
 8011744:	bf00      	nop
 8011746:	370c      	adds	r7, #12
 8011748:	46bd      	mov	sp, r7
 801174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801174e:	4770      	bx	lr
 8011750:	20000dd0 	.word	0x20000dd0
 8011754:	e000ed04 	.word	0xe000ed04

08011758 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011758:	b480      	push	{r7}
 801175a:	b083      	sub	sp, #12
 801175c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801175e:	4b11      	ldr	r3, [pc, #68]	; (80117a4 <vPortExitCritical+0x4c>)
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	2b00      	cmp	r3, #0
 8011764:	d109      	bne.n	801177a <vPortExitCritical+0x22>
 8011766:	f04f 0350 	mov.w	r3, #80	; 0x50
 801176a:	f383 8811 	msr	BASEPRI, r3
 801176e:	f3bf 8f6f 	isb	sy
 8011772:	f3bf 8f4f 	dsb	sy
 8011776:	607b      	str	r3, [r7, #4]
 8011778:	e7fe      	b.n	8011778 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 801177a:	4b0a      	ldr	r3, [pc, #40]	; (80117a4 <vPortExitCritical+0x4c>)
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	3b01      	subs	r3, #1
 8011780:	4a08      	ldr	r2, [pc, #32]	; (80117a4 <vPortExitCritical+0x4c>)
 8011782:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011784:	4b07      	ldr	r3, [pc, #28]	; (80117a4 <vPortExitCritical+0x4c>)
 8011786:	681b      	ldr	r3, [r3, #0]
 8011788:	2b00      	cmp	r3, #0
 801178a:	d104      	bne.n	8011796 <vPortExitCritical+0x3e>
 801178c:	2300      	movs	r3, #0
 801178e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011790:	683b      	ldr	r3, [r7, #0]
 8011792:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8011796:	bf00      	nop
 8011798:	370c      	adds	r7, #12
 801179a:	46bd      	mov	sp, r7
 801179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117a0:	4770      	bx	lr
 80117a2:	bf00      	nop
 80117a4:	20000dd0 	.word	0x20000dd0
	...

080117b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80117b0:	f3ef 8009 	mrs	r0, PSP
 80117b4:	f3bf 8f6f 	isb	sy
 80117b8:	4b15      	ldr	r3, [pc, #84]	; (8011810 <pxCurrentTCBConst>)
 80117ba:	681a      	ldr	r2, [r3, #0]
 80117bc:	f01e 0f10 	tst.w	lr, #16
 80117c0:	bf08      	it	eq
 80117c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80117c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117ca:	6010      	str	r0, [r2, #0]
 80117cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80117d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80117d4:	f380 8811 	msr	BASEPRI, r0
 80117d8:	f3bf 8f4f 	dsb	sy
 80117dc:	f3bf 8f6f 	isb	sy
 80117e0:	f7ff f82c 	bl	801083c <vTaskSwitchContext>
 80117e4:	f04f 0000 	mov.w	r0, #0
 80117e8:	f380 8811 	msr	BASEPRI, r0
 80117ec:	bc09      	pop	{r0, r3}
 80117ee:	6819      	ldr	r1, [r3, #0]
 80117f0:	6808      	ldr	r0, [r1, #0]
 80117f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117f6:	f01e 0f10 	tst.w	lr, #16
 80117fa:	bf08      	it	eq
 80117fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011800:	f380 8809 	msr	PSP, r0
 8011804:	f3bf 8f6f 	isb	sy
 8011808:	4770      	bx	lr
 801180a:	bf00      	nop
 801180c:	f3af 8000 	nop.w

08011810 <pxCurrentTCBConst>:
 8011810:	20001488 	.word	0x20001488
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011814:	bf00      	nop
 8011816:	bf00      	nop

08011818 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011818:	b580      	push	{r7, lr}
 801181a:	b082      	sub	sp, #8
 801181c:	af00      	add	r7, sp, #0
	__asm volatile
 801181e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011822:	f383 8811 	msr	BASEPRI, r3
 8011826:	f3bf 8f6f 	isb	sy
 801182a:	f3bf 8f4f 	dsb	sy
 801182e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011830:	f7fe ff48 	bl	80106c4 <xTaskIncrementTick>
 8011834:	4603      	mov	r3, r0
 8011836:	2b00      	cmp	r3, #0
 8011838:	d003      	beq.n	8011842 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801183a:	4b06      	ldr	r3, [pc, #24]	; (8011854 <SysTick_Handler+0x3c>)
 801183c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011840:	601a      	str	r2, [r3, #0]
 8011842:	2300      	movs	r3, #0
 8011844:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011846:	683b      	ldr	r3, [r7, #0]
 8011848:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 801184c:	bf00      	nop
 801184e:	3708      	adds	r7, #8
 8011850:	46bd      	mov	sp, r7
 8011852:	bd80      	pop	{r7, pc}
 8011854:	e000ed04 	.word	0xe000ed04

08011858 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8011858:	b480      	push	{r7}
 801185a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801185c:	4b0b      	ldr	r3, [pc, #44]	; (801188c <vPortSetupTimerInterrupt+0x34>)
 801185e:	2200      	movs	r2, #0
 8011860:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011862:	4b0b      	ldr	r3, [pc, #44]	; (8011890 <vPortSetupTimerInterrupt+0x38>)
 8011864:	2200      	movs	r2, #0
 8011866:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8011868:	4b0a      	ldr	r3, [pc, #40]	; (8011894 <vPortSetupTimerInterrupt+0x3c>)
 801186a:	681b      	ldr	r3, [r3, #0]
 801186c:	4a0a      	ldr	r2, [pc, #40]	; (8011898 <vPortSetupTimerInterrupt+0x40>)
 801186e:	fba2 2303 	umull	r2, r3, r2, r3
 8011872:	099b      	lsrs	r3, r3, #6
 8011874:	4a09      	ldr	r2, [pc, #36]	; (801189c <vPortSetupTimerInterrupt+0x44>)
 8011876:	3b01      	subs	r3, #1
 8011878:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801187a:	4b04      	ldr	r3, [pc, #16]	; (801188c <vPortSetupTimerInterrupt+0x34>)
 801187c:	2207      	movs	r2, #7
 801187e:	601a      	str	r2, [r3, #0]
}
 8011880:	bf00      	nop
 8011882:	46bd      	mov	sp, r7
 8011884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011888:	4770      	bx	lr
 801188a:	bf00      	nop
 801188c:	e000e010 	.word	0xe000e010
 8011890:	e000e018 	.word	0xe000e018
 8011894:	20000cb4 	.word	0x20000cb4
 8011898:	10624dd3 	.word	0x10624dd3
 801189c:	e000e014 	.word	0xe000e014

080118a0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80118a0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80118b0 <vPortEnableVFP+0x10>
 80118a4:	6801      	ldr	r1, [r0, #0]
 80118a6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80118aa:	6001      	str	r1, [r0, #0]
 80118ac:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80118ae:	bf00      	nop
 80118b0:	e000ed88 	.word	0xe000ed88

080118b4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80118b4:	b480      	push	{r7}
 80118b6:	b085      	sub	sp, #20
 80118b8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80118ba:	f3ef 8305 	mrs	r3, IPSR
 80118be:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80118c0:	68fb      	ldr	r3, [r7, #12]
 80118c2:	2b0f      	cmp	r3, #15
 80118c4:	d913      	bls.n	80118ee <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80118c6:	4a16      	ldr	r2, [pc, #88]	; (8011920 <vPortValidateInterruptPriority+0x6c>)
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	4413      	add	r3, r2
 80118cc:	781b      	ldrb	r3, [r3, #0]
 80118ce:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80118d0:	4b14      	ldr	r3, [pc, #80]	; (8011924 <vPortValidateInterruptPriority+0x70>)
 80118d2:	781b      	ldrb	r3, [r3, #0]
 80118d4:	7afa      	ldrb	r2, [r7, #11]
 80118d6:	429a      	cmp	r2, r3
 80118d8:	d209      	bcs.n	80118ee <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80118da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118de:	f383 8811 	msr	BASEPRI, r3
 80118e2:	f3bf 8f6f 	isb	sy
 80118e6:	f3bf 8f4f 	dsb	sy
 80118ea:	607b      	str	r3, [r7, #4]
 80118ec:	e7fe      	b.n	80118ec <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80118ee:	4b0e      	ldr	r3, [pc, #56]	; (8011928 <vPortValidateInterruptPriority+0x74>)
 80118f0:	681b      	ldr	r3, [r3, #0]
 80118f2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80118f6:	4b0d      	ldr	r3, [pc, #52]	; (801192c <vPortValidateInterruptPriority+0x78>)
 80118f8:	681b      	ldr	r3, [r3, #0]
 80118fa:	429a      	cmp	r2, r3
 80118fc:	d909      	bls.n	8011912 <vPortValidateInterruptPriority+0x5e>
 80118fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011902:	f383 8811 	msr	BASEPRI, r3
 8011906:	f3bf 8f6f 	isb	sy
 801190a:	f3bf 8f4f 	dsb	sy
 801190e:	603b      	str	r3, [r7, #0]
 8011910:	e7fe      	b.n	8011910 <vPortValidateInterruptPriority+0x5c>
	}
 8011912:	bf00      	nop
 8011914:	3714      	adds	r7, #20
 8011916:	46bd      	mov	sp, r7
 8011918:	f85d 7b04 	ldr.w	r7, [sp], #4
 801191c:	4770      	bx	lr
 801191e:	bf00      	nop
 8011920:	e000e3f0 	.word	0xe000e3f0
 8011924:	200015b4 	.word	0x200015b4
 8011928:	e000ed0c 	.word	0xe000ed0c
 801192c:	200015b8 	.word	0x200015b8

08011930 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011930:	b580      	push	{r7, lr}
 8011932:	b08a      	sub	sp, #40	; 0x28
 8011934:	af00      	add	r7, sp, #0
 8011936:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011938:	2300      	movs	r3, #0
 801193a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801193c:	f7fe fe18 	bl	8010570 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011940:	4b57      	ldr	r3, [pc, #348]	; (8011aa0 <pvPortMalloc+0x170>)
 8011942:	681b      	ldr	r3, [r3, #0]
 8011944:	2b00      	cmp	r3, #0
 8011946:	d101      	bne.n	801194c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011948:	f000 f90c 	bl	8011b64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801194c:	4b55      	ldr	r3, [pc, #340]	; (8011aa4 <pvPortMalloc+0x174>)
 801194e:	681a      	ldr	r2, [r3, #0]
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	4013      	ands	r3, r2
 8011954:	2b00      	cmp	r3, #0
 8011956:	f040 808c 	bne.w	8011a72 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	2b00      	cmp	r3, #0
 801195e:	d01c      	beq.n	801199a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8011960:	2208      	movs	r2, #8
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	4413      	add	r3, r2
 8011966:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	f003 0307 	and.w	r3, r3, #7
 801196e:	2b00      	cmp	r3, #0
 8011970:	d013      	beq.n	801199a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	f023 0307 	bic.w	r3, r3, #7
 8011978:	3308      	adds	r3, #8
 801197a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	f003 0307 	and.w	r3, r3, #7
 8011982:	2b00      	cmp	r3, #0
 8011984:	d009      	beq.n	801199a <pvPortMalloc+0x6a>
 8011986:	f04f 0350 	mov.w	r3, #80	; 0x50
 801198a:	f383 8811 	msr	BASEPRI, r3
 801198e:	f3bf 8f6f 	isb	sy
 8011992:	f3bf 8f4f 	dsb	sy
 8011996:	617b      	str	r3, [r7, #20]
 8011998:	e7fe      	b.n	8011998 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	2b00      	cmp	r3, #0
 801199e:	d068      	beq.n	8011a72 <pvPortMalloc+0x142>
 80119a0:	4b41      	ldr	r3, [pc, #260]	; (8011aa8 <pvPortMalloc+0x178>)
 80119a2:	681b      	ldr	r3, [r3, #0]
 80119a4:	687a      	ldr	r2, [r7, #4]
 80119a6:	429a      	cmp	r2, r3
 80119a8:	d863      	bhi.n	8011a72 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80119aa:	4b40      	ldr	r3, [pc, #256]	; (8011aac <pvPortMalloc+0x17c>)
 80119ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80119ae:	4b3f      	ldr	r3, [pc, #252]	; (8011aac <pvPortMalloc+0x17c>)
 80119b0:	681b      	ldr	r3, [r3, #0]
 80119b2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80119b4:	e004      	b.n	80119c0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80119b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80119ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119bc:	681b      	ldr	r3, [r3, #0]
 80119be:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80119c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119c2:	685b      	ldr	r3, [r3, #4]
 80119c4:	687a      	ldr	r2, [r7, #4]
 80119c6:	429a      	cmp	r2, r3
 80119c8:	d903      	bls.n	80119d2 <pvPortMalloc+0xa2>
 80119ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d1f1      	bne.n	80119b6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80119d2:	4b33      	ldr	r3, [pc, #204]	; (8011aa0 <pvPortMalloc+0x170>)
 80119d4:	681b      	ldr	r3, [r3, #0]
 80119d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80119d8:	429a      	cmp	r2, r3
 80119da:	d04a      	beq.n	8011a72 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80119dc:	6a3b      	ldr	r3, [r7, #32]
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	2208      	movs	r2, #8
 80119e2:	4413      	add	r3, r2
 80119e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80119e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119e8:	681a      	ldr	r2, [r3, #0]
 80119ea:	6a3b      	ldr	r3, [r7, #32]
 80119ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80119ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119f0:	685a      	ldr	r2, [r3, #4]
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	1ad2      	subs	r2, r2, r3
 80119f6:	2308      	movs	r3, #8
 80119f8:	005b      	lsls	r3, r3, #1
 80119fa:	429a      	cmp	r2, r3
 80119fc:	d91e      	bls.n	8011a3c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80119fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	4413      	add	r3, r2
 8011a04:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011a06:	69bb      	ldr	r3, [r7, #24]
 8011a08:	f003 0307 	and.w	r3, r3, #7
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d009      	beq.n	8011a24 <pvPortMalloc+0xf4>
 8011a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a14:	f383 8811 	msr	BASEPRI, r3
 8011a18:	f3bf 8f6f 	isb	sy
 8011a1c:	f3bf 8f4f 	dsb	sy
 8011a20:	613b      	str	r3, [r7, #16]
 8011a22:	e7fe      	b.n	8011a22 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a26:	685a      	ldr	r2, [r3, #4]
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	1ad2      	subs	r2, r2, r3
 8011a2c:	69bb      	ldr	r3, [r7, #24]
 8011a2e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a32:	687a      	ldr	r2, [r7, #4]
 8011a34:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011a36:	69b8      	ldr	r0, [r7, #24]
 8011a38:	f000 f8f6 	bl	8011c28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011a3c:	4b1a      	ldr	r3, [pc, #104]	; (8011aa8 <pvPortMalloc+0x178>)
 8011a3e:	681a      	ldr	r2, [r3, #0]
 8011a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a42:	685b      	ldr	r3, [r3, #4]
 8011a44:	1ad3      	subs	r3, r2, r3
 8011a46:	4a18      	ldr	r2, [pc, #96]	; (8011aa8 <pvPortMalloc+0x178>)
 8011a48:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011a4a:	4b17      	ldr	r3, [pc, #92]	; (8011aa8 <pvPortMalloc+0x178>)
 8011a4c:	681a      	ldr	r2, [r3, #0]
 8011a4e:	4b18      	ldr	r3, [pc, #96]	; (8011ab0 <pvPortMalloc+0x180>)
 8011a50:	681b      	ldr	r3, [r3, #0]
 8011a52:	429a      	cmp	r2, r3
 8011a54:	d203      	bcs.n	8011a5e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011a56:	4b14      	ldr	r3, [pc, #80]	; (8011aa8 <pvPortMalloc+0x178>)
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	4a15      	ldr	r2, [pc, #84]	; (8011ab0 <pvPortMalloc+0x180>)
 8011a5c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a60:	685a      	ldr	r2, [r3, #4]
 8011a62:	4b10      	ldr	r3, [pc, #64]	; (8011aa4 <pvPortMalloc+0x174>)
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	431a      	orrs	r2, r3
 8011a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a6a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a6e:	2200      	movs	r2, #0
 8011a70:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011a72:	f7fe fd8b 	bl	801058c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011a76:	69fb      	ldr	r3, [r7, #28]
 8011a78:	f003 0307 	and.w	r3, r3, #7
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d009      	beq.n	8011a94 <pvPortMalloc+0x164>
 8011a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a84:	f383 8811 	msr	BASEPRI, r3
 8011a88:	f3bf 8f6f 	isb	sy
 8011a8c:	f3bf 8f4f 	dsb	sy
 8011a90:	60fb      	str	r3, [r7, #12]
 8011a92:	e7fe      	b.n	8011a92 <pvPortMalloc+0x162>
	return pvReturn;
 8011a94:	69fb      	ldr	r3, [r7, #28]
}
 8011a96:	4618      	mov	r0, r3
 8011a98:	3728      	adds	r7, #40	; 0x28
 8011a9a:	46bd      	mov	sp, r7
 8011a9c:	bd80      	pop	{r7, pc}
 8011a9e:	bf00      	nop
 8011aa0:	200051c4 	.word	0x200051c4
 8011aa4:	200051d0 	.word	0x200051d0
 8011aa8:	200051c8 	.word	0x200051c8
 8011aac:	200051bc 	.word	0x200051bc
 8011ab0:	200051cc 	.word	0x200051cc

08011ab4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011ab4:	b580      	push	{r7, lr}
 8011ab6:	b086      	sub	sp, #24
 8011ab8:	af00      	add	r7, sp, #0
 8011aba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d046      	beq.n	8011b54 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011ac6:	2308      	movs	r3, #8
 8011ac8:	425b      	negs	r3, r3
 8011aca:	697a      	ldr	r2, [r7, #20]
 8011acc:	4413      	add	r3, r2
 8011ace:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011ad0:	697b      	ldr	r3, [r7, #20]
 8011ad2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011ad4:	693b      	ldr	r3, [r7, #16]
 8011ad6:	685a      	ldr	r2, [r3, #4]
 8011ad8:	4b20      	ldr	r3, [pc, #128]	; (8011b5c <vPortFree+0xa8>)
 8011ada:	681b      	ldr	r3, [r3, #0]
 8011adc:	4013      	ands	r3, r2
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d109      	bne.n	8011af6 <vPortFree+0x42>
 8011ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ae6:	f383 8811 	msr	BASEPRI, r3
 8011aea:	f3bf 8f6f 	isb	sy
 8011aee:	f3bf 8f4f 	dsb	sy
 8011af2:	60fb      	str	r3, [r7, #12]
 8011af4:	e7fe      	b.n	8011af4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011af6:	693b      	ldr	r3, [r7, #16]
 8011af8:	681b      	ldr	r3, [r3, #0]
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d009      	beq.n	8011b12 <vPortFree+0x5e>
 8011afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b02:	f383 8811 	msr	BASEPRI, r3
 8011b06:	f3bf 8f6f 	isb	sy
 8011b0a:	f3bf 8f4f 	dsb	sy
 8011b0e:	60bb      	str	r3, [r7, #8]
 8011b10:	e7fe      	b.n	8011b10 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011b12:	693b      	ldr	r3, [r7, #16]
 8011b14:	685a      	ldr	r2, [r3, #4]
 8011b16:	4b11      	ldr	r3, [pc, #68]	; (8011b5c <vPortFree+0xa8>)
 8011b18:	681b      	ldr	r3, [r3, #0]
 8011b1a:	4013      	ands	r3, r2
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	d019      	beq.n	8011b54 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011b20:	693b      	ldr	r3, [r7, #16]
 8011b22:	681b      	ldr	r3, [r3, #0]
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d115      	bne.n	8011b54 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011b28:	693b      	ldr	r3, [r7, #16]
 8011b2a:	685a      	ldr	r2, [r3, #4]
 8011b2c:	4b0b      	ldr	r3, [pc, #44]	; (8011b5c <vPortFree+0xa8>)
 8011b2e:	681b      	ldr	r3, [r3, #0]
 8011b30:	43db      	mvns	r3, r3
 8011b32:	401a      	ands	r2, r3
 8011b34:	693b      	ldr	r3, [r7, #16]
 8011b36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011b38:	f7fe fd1a 	bl	8010570 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011b3c:	693b      	ldr	r3, [r7, #16]
 8011b3e:	685a      	ldr	r2, [r3, #4]
 8011b40:	4b07      	ldr	r3, [pc, #28]	; (8011b60 <vPortFree+0xac>)
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	4413      	add	r3, r2
 8011b46:	4a06      	ldr	r2, [pc, #24]	; (8011b60 <vPortFree+0xac>)
 8011b48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011b4a:	6938      	ldr	r0, [r7, #16]
 8011b4c:	f000 f86c 	bl	8011c28 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8011b50:	f7fe fd1c 	bl	801058c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011b54:	bf00      	nop
 8011b56:	3718      	adds	r7, #24
 8011b58:	46bd      	mov	sp, r7
 8011b5a:	bd80      	pop	{r7, pc}
 8011b5c:	200051d0 	.word	0x200051d0
 8011b60:	200051c8 	.word	0x200051c8

08011b64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011b64:	b480      	push	{r7}
 8011b66:	b085      	sub	sp, #20
 8011b68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011b6a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8011b6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011b70:	4b27      	ldr	r3, [pc, #156]	; (8011c10 <prvHeapInit+0xac>)
 8011b72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011b74:	68fb      	ldr	r3, [r7, #12]
 8011b76:	f003 0307 	and.w	r3, r3, #7
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d00c      	beq.n	8011b98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8011b7e:	68fb      	ldr	r3, [r7, #12]
 8011b80:	3307      	adds	r3, #7
 8011b82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011b84:	68fb      	ldr	r3, [r7, #12]
 8011b86:	f023 0307 	bic.w	r3, r3, #7
 8011b8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011b8c:	68ba      	ldr	r2, [r7, #8]
 8011b8e:	68fb      	ldr	r3, [r7, #12]
 8011b90:	1ad3      	subs	r3, r2, r3
 8011b92:	4a1f      	ldr	r2, [pc, #124]	; (8011c10 <prvHeapInit+0xac>)
 8011b94:	4413      	add	r3, r2
 8011b96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011b98:	68fb      	ldr	r3, [r7, #12]
 8011b9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011b9c:	4a1d      	ldr	r2, [pc, #116]	; (8011c14 <prvHeapInit+0xb0>)
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011ba2:	4b1c      	ldr	r3, [pc, #112]	; (8011c14 <prvHeapInit+0xb0>)
 8011ba4:	2200      	movs	r2, #0
 8011ba6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	68ba      	ldr	r2, [r7, #8]
 8011bac:	4413      	add	r3, r2
 8011bae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011bb0:	2208      	movs	r2, #8
 8011bb2:	68fb      	ldr	r3, [r7, #12]
 8011bb4:	1a9b      	subs	r3, r3, r2
 8011bb6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011bb8:	68fb      	ldr	r3, [r7, #12]
 8011bba:	f023 0307 	bic.w	r3, r3, #7
 8011bbe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011bc0:	68fb      	ldr	r3, [r7, #12]
 8011bc2:	4a15      	ldr	r2, [pc, #84]	; (8011c18 <prvHeapInit+0xb4>)
 8011bc4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011bc6:	4b14      	ldr	r3, [pc, #80]	; (8011c18 <prvHeapInit+0xb4>)
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	2200      	movs	r2, #0
 8011bcc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011bce:	4b12      	ldr	r3, [pc, #72]	; (8011c18 <prvHeapInit+0xb4>)
 8011bd0:	681b      	ldr	r3, [r3, #0]
 8011bd2:	2200      	movs	r2, #0
 8011bd4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011bda:	683b      	ldr	r3, [r7, #0]
 8011bdc:	68fa      	ldr	r2, [r7, #12]
 8011bde:	1ad2      	subs	r2, r2, r3
 8011be0:	683b      	ldr	r3, [r7, #0]
 8011be2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011be4:	4b0c      	ldr	r3, [pc, #48]	; (8011c18 <prvHeapInit+0xb4>)
 8011be6:	681a      	ldr	r2, [r3, #0]
 8011be8:	683b      	ldr	r3, [r7, #0]
 8011bea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011bec:	683b      	ldr	r3, [r7, #0]
 8011bee:	685b      	ldr	r3, [r3, #4]
 8011bf0:	4a0a      	ldr	r2, [pc, #40]	; (8011c1c <prvHeapInit+0xb8>)
 8011bf2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011bf4:	683b      	ldr	r3, [r7, #0]
 8011bf6:	685b      	ldr	r3, [r3, #4]
 8011bf8:	4a09      	ldr	r2, [pc, #36]	; (8011c20 <prvHeapInit+0xbc>)
 8011bfa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011bfc:	4b09      	ldr	r3, [pc, #36]	; (8011c24 <prvHeapInit+0xc0>)
 8011bfe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011c02:	601a      	str	r2, [r3, #0]
}
 8011c04:	bf00      	nop
 8011c06:	3714      	adds	r7, #20
 8011c08:	46bd      	mov	sp, r7
 8011c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c0e:	4770      	bx	lr
 8011c10:	200015bc 	.word	0x200015bc
 8011c14:	200051bc 	.word	0x200051bc
 8011c18:	200051c4 	.word	0x200051c4
 8011c1c:	200051cc 	.word	0x200051cc
 8011c20:	200051c8 	.word	0x200051c8
 8011c24:	200051d0 	.word	0x200051d0

08011c28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011c28:	b480      	push	{r7}
 8011c2a:	b085      	sub	sp, #20
 8011c2c:	af00      	add	r7, sp, #0
 8011c2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011c30:	4b28      	ldr	r3, [pc, #160]	; (8011cd4 <prvInsertBlockIntoFreeList+0xac>)
 8011c32:	60fb      	str	r3, [r7, #12]
 8011c34:	e002      	b.n	8011c3c <prvInsertBlockIntoFreeList+0x14>
 8011c36:	68fb      	ldr	r3, [r7, #12]
 8011c38:	681b      	ldr	r3, [r3, #0]
 8011c3a:	60fb      	str	r3, [r7, #12]
 8011c3c:	68fb      	ldr	r3, [r7, #12]
 8011c3e:	681b      	ldr	r3, [r3, #0]
 8011c40:	687a      	ldr	r2, [r7, #4]
 8011c42:	429a      	cmp	r2, r3
 8011c44:	d8f7      	bhi.n	8011c36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011c46:	68fb      	ldr	r3, [r7, #12]
 8011c48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011c4a:	68fb      	ldr	r3, [r7, #12]
 8011c4c:	685b      	ldr	r3, [r3, #4]
 8011c4e:	68ba      	ldr	r2, [r7, #8]
 8011c50:	4413      	add	r3, r2
 8011c52:	687a      	ldr	r2, [r7, #4]
 8011c54:	429a      	cmp	r2, r3
 8011c56:	d108      	bne.n	8011c6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011c58:	68fb      	ldr	r3, [r7, #12]
 8011c5a:	685a      	ldr	r2, [r3, #4]
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	685b      	ldr	r3, [r3, #4]
 8011c60:	441a      	add	r2, r3
 8011c62:	68fb      	ldr	r3, [r7, #12]
 8011c64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011c66:	68fb      	ldr	r3, [r7, #12]
 8011c68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	685b      	ldr	r3, [r3, #4]
 8011c72:	68ba      	ldr	r2, [r7, #8]
 8011c74:	441a      	add	r2, r3
 8011c76:	68fb      	ldr	r3, [r7, #12]
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	429a      	cmp	r2, r3
 8011c7c:	d118      	bne.n	8011cb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011c7e:	68fb      	ldr	r3, [r7, #12]
 8011c80:	681a      	ldr	r2, [r3, #0]
 8011c82:	4b15      	ldr	r3, [pc, #84]	; (8011cd8 <prvInsertBlockIntoFreeList+0xb0>)
 8011c84:	681b      	ldr	r3, [r3, #0]
 8011c86:	429a      	cmp	r2, r3
 8011c88:	d00d      	beq.n	8011ca6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	685a      	ldr	r2, [r3, #4]
 8011c8e:	68fb      	ldr	r3, [r7, #12]
 8011c90:	681b      	ldr	r3, [r3, #0]
 8011c92:	685b      	ldr	r3, [r3, #4]
 8011c94:	441a      	add	r2, r3
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011c9a:	68fb      	ldr	r3, [r7, #12]
 8011c9c:	681b      	ldr	r3, [r3, #0]
 8011c9e:	681a      	ldr	r2, [r3, #0]
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	601a      	str	r2, [r3, #0]
 8011ca4:	e008      	b.n	8011cb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011ca6:	4b0c      	ldr	r3, [pc, #48]	; (8011cd8 <prvInsertBlockIntoFreeList+0xb0>)
 8011ca8:	681a      	ldr	r2, [r3, #0]
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	601a      	str	r2, [r3, #0]
 8011cae:	e003      	b.n	8011cb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011cb0:	68fb      	ldr	r3, [r7, #12]
 8011cb2:	681a      	ldr	r2, [r3, #0]
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011cb8:	68fa      	ldr	r2, [r7, #12]
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	429a      	cmp	r2, r3
 8011cbe:	d002      	beq.n	8011cc6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011cc0:	68fb      	ldr	r3, [r7, #12]
 8011cc2:	687a      	ldr	r2, [r7, #4]
 8011cc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011cc6:	bf00      	nop
 8011cc8:	3714      	adds	r7, #20
 8011cca:	46bd      	mov	sp, r7
 8011ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cd0:	4770      	bx	lr
 8011cd2:	bf00      	nop
 8011cd4:	200051bc 	.word	0x200051bc
 8011cd8:	200051c4 	.word	0x200051c4

08011cdc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8011cdc:	b580      	push	{r7, lr}
 8011cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8011ce0:	2200      	movs	r2, #0
 8011ce2:	4912      	ldr	r1, [pc, #72]	; (8011d2c <MX_USB_DEVICE_Init+0x50>)
 8011ce4:	4812      	ldr	r0, [pc, #72]	; (8011d30 <MX_USB_DEVICE_Init+0x54>)
 8011ce6:	f7fb fe07 	bl	800d8f8 <USBD_Init>
 8011cea:	4603      	mov	r3, r0
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d001      	beq.n	8011cf4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8011cf0:	f7f1 fb32 	bl	8003358 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8011cf4:	490f      	ldr	r1, [pc, #60]	; (8011d34 <MX_USB_DEVICE_Init+0x58>)
 8011cf6:	480e      	ldr	r0, [pc, #56]	; (8011d30 <MX_USB_DEVICE_Init+0x54>)
 8011cf8:	f7fb fe29 	bl	800d94e <USBD_RegisterClass>
 8011cfc:	4603      	mov	r3, r0
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d001      	beq.n	8011d06 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8011d02:	f7f1 fb29 	bl	8003358 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8011d06:	490c      	ldr	r1, [pc, #48]	; (8011d38 <MX_USB_DEVICE_Init+0x5c>)
 8011d08:	4809      	ldr	r0, [pc, #36]	; (8011d30 <MX_USB_DEVICE_Init+0x54>)
 8011d0a:	f7fb fd57 	bl	800d7bc <USBD_CDC_RegisterInterface>
 8011d0e:	4603      	mov	r3, r0
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	d001      	beq.n	8011d18 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8011d14:	f7f1 fb20 	bl	8003358 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8011d18:	4805      	ldr	r0, [pc, #20]	; (8011d30 <MX_USB_DEVICE_Init+0x54>)
 8011d1a:	f7fb fe32 	bl	800d982 <USBD_Start>
 8011d1e:	4603      	mov	r3, r0
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d001      	beq.n	8011d28 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8011d24:	f7f1 fb18 	bl	8003358 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8011d28:	bf00      	nop
 8011d2a:	bd80      	pop	{r7, pc}
 8011d2c:	20000de4 	.word	0x20000de4
 8011d30:	20005ee4 	.word	0x20005ee4
 8011d34:	20000ccc 	.word	0x20000ccc
 8011d38:	20000dd4 	.word	0x20000dd4

08011d3c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8011d3c:	b580      	push	{r7, lr}
 8011d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8011d40:	2200      	movs	r2, #0
 8011d42:	4905      	ldr	r1, [pc, #20]	; (8011d58 <CDC_Init_FS+0x1c>)
 8011d44:	4805      	ldr	r0, [pc, #20]	; (8011d5c <CDC_Init_FS+0x20>)
 8011d46:	f7fb fd50 	bl	800d7ea <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8011d4a:	4905      	ldr	r1, [pc, #20]	; (8011d60 <CDC_Init_FS+0x24>)
 8011d4c:	4803      	ldr	r0, [pc, #12]	; (8011d5c <CDC_Init_FS+0x20>)
 8011d4e:	f7fb fd66 	bl	800d81e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8011d52:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8011d54:	4618      	mov	r0, r3
 8011d56:	bd80      	pop	{r7, pc}
 8011d58:	20006380 	.word	0x20006380
 8011d5c:	20005ee4 	.word	0x20005ee4
 8011d60:	20006180 	.word	0x20006180

08011d64 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8011d64:	b480      	push	{r7}
 8011d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8011d68:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8011d6a:	4618      	mov	r0, r3
 8011d6c:	46bd      	mov	sp, r7
 8011d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d72:	4770      	bx	lr

08011d74 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8011d74:	b480      	push	{r7}
 8011d76:	b083      	sub	sp, #12
 8011d78:	af00      	add	r7, sp, #0
 8011d7a:	4603      	mov	r3, r0
 8011d7c:	6039      	str	r1, [r7, #0]
 8011d7e:	71fb      	strb	r3, [r7, #7]
 8011d80:	4613      	mov	r3, r2
 8011d82:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8011d84:	79fb      	ldrb	r3, [r7, #7]
 8011d86:	2b23      	cmp	r3, #35	; 0x23
 8011d88:	f200 808c 	bhi.w	8011ea4 <CDC_Control_FS+0x130>
 8011d8c:	a201      	add	r2, pc, #4	; (adr r2, 8011d94 <CDC_Control_FS+0x20>)
 8011d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d92:	bf00      	nop
 8011d94:	08011ea5 	.word	0x08011ea5
 8011d98:	08011ea5 	.word	0x08011ea5
 8011d9c:	08011ea5 	.word	0x08011ea5
 8011da0:	08011ea5 	.word	0x08011ea5
 8011da4:	08011ea5 	.word	0x08011ea5
 8011da8:	08011ea5 	.word	0x08011ea5
 8011dac:	08011ea5 	.word	0x08011ea5
 8011db0:	08011ea5 	.word	0x08011ea5
 8011db4:	08011ea5 	.word	0x08011ea5
 8011db8:	08011ea5 	.word	0x08011ea5
 8011dbc:	08011ea5 	.word	0x08011ea5
 8011dc0:	08011ea5 	.word	0x08011ea5
 8011dc4:	08011ea5 	.word	0x08011ea5
 8011dc8:	08011ea5 	.word	0x08011ea5
 8011dcc:	08011ea5 	.word	0x08011ea5
 8011dd0:	08011ea5 	.word	0x08011ea5
 8011dd4:	08011ea5 	.word	0x08011ea5
 8011dd8:	08011ea5 	.word	0x08011ea5
 8011ddc:	08011ea5 	.word	0x08011ea5
 8011de0:	08011ea5 	.word	0x08011ea5
 8011de4:	08011ea5 	.word	0x08011ea5
 8011de8:	08011ea5 	.word	0x08011ea5
 8011dec:	08011ea5 	.word	0x08011ea5
 8011df0:	08011ea5 	.word	0x08011ea5
 8011df4:	08011ea5 	.word	0x08011ea5
 8011df8:	08011ea5 	.word	0x08011ea5
 8011dfc:	08011ea5 	.word	0x08011ea5
 8011e00:	08011ea5 	.word	0x08011ea5
 8011e04:	08011ea5 	.word	0x08011ea5
 8011e08:	08011ea5 	.word	0x08011ea5
 8011e0c:	08011ea5 	.word	0x08011ea5
 8011e10:	08011ea5 	.word	0x08011ea5
 8011e14:	08011e25 	.word	0x08011e25
 8011e18:	08011e5f 	.word	0x08011e5f
 8011e1c:	08011ea5 	.word	0x08011ea5
 8011e20:	08011ea5 	.word	0x08011ea5
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	TempBuf_USB[0]=pbuf[0];
 8011e24:	683b      	ldr	r3, [r7, #0]
 8011e26:	781a      	ldrb	r2, [r3, #0]
 8011e28:	4b22      	ldr	r3, [pc, #136]	; (8011eb4 <CDC_Control_FS+0x140>)
 8011e2a:	701a      	strb	r2, [r3, #0]
    	TempBuf_USB[1]=pbuf[1];
 8011e2c:	683b      	ldr	r3, [r7, #0]
 8011e2e:	785a      	ldrb	r2, [r3, #1]
 8011e30:	4b20      	ldr	r3, [pc, #128]	; (8011eb4 <CDC_Control_FS+0x140>)
 8011e32:	705a      	strb	r2, [r3, #1]
    	TempBuf_USB[2]=pbuf[2];
 8011e34:	683b      	ldr	r3, [r7, #0]
 8011e36:	789a      	ldrb	r2, [r3, #2]
 8011e38:	4b1e      	ldr	r3, [pc, #120]	; (8011eb4 <CDC_Control_FS+0x140>)
 8011e3a:	709a      	strb	r2, [r3, #2]
    	TempBuf_USB[3]=pbuf[3];
 8011e3c:	683b      	ldr	r3, [r7, #0]
 8011e3e:	78da      	ldrb	r2, [r3, #3]
 8011e40:	4b1c      	ldr	r3, [pc, #112]	; (8011eb4 <CDC_Control_FS+0x140>)
 8011e42:	70da      	strb	r2, [r3, #3]
    	TempBuf_USB[4]=pbuf[4];
 8011e44:	683b      	ldr	r3, [r7, #0]
 8011e46:	791a      	ldrb	r2, [r3, #4]
 8011e48:	4b1a      	ldr	r3, [pc, #104]	; (8011eb4 <CDC_Control_FS+0x140>)
 8011e4a:	711a      	strb	r2, [r3, #4]
    	TempBuf_USB[5]=pbuf[5];
 8011e4c:	683b      	ldr	r3, [r7, #0]
 8011e4e:	795a      	ldrb	r2, [r3, #5]
 8011e50:	4b18      	ldr	r3, [pc, #96]	; (8011eb4 <CDC_Control_FS+0x140>)
 8011e52:	715a      	strb	r2, [r3, #5]
    	TempBuf_USB[6]=pbuf[6];
 8011e54:	683b      	ldr	r3, [r7, #0]
 8011e56:	799a      	ldrb	r2, [r3, #6]
 8011e58:	4b16      	ldr	r3, [pc, #88]	; (8011eb4 <CDC_Control_FS+0x140>)
 8011e5a:	719a      	strb	r2, [r3, #6]
    	break;
 8011e5c:	e023      	b.n	8011ea6 <CDC_Control_FS+0x132>


    case CDC_GET_LINE_CODING:
        pbuf[0]=TempBuf_USB[0];
 8011e5e:	4b15      	ldr	r3, [pc, #84]	; (8011eb4 <CDC_Control_FS+0x140>)
 8011e60:	781a      	ldrb	r2, [r3, #0]
 8011e62:	683b      	ldr	r3, [r7, #0]
 8011e64:	701a      	strb	r2, [r3, #0]
        pbuf[1]=TempBuf_USB[1];
 8011e66:	683b      	ldr	r3, [r7, #0]
 8011e68:	3301      	adds	r3, #1
 8011e6a:	4a12      	ldr	r2, [pc, #72]	; (8011eb4 <CDC_Control_FS+0x140>)
 8011e6c:	7852      	ldrb	r2, [r2, #1]
 8011e6e:	701a      	strb	r2, [r3, #0]
        pbuf[2]=TempBuf_USB[2];
 8011e70:	683b      	ldr	r3, [r7, #0]
 8011e72:	3302      	adds	r3, #2
 8011e74:	4a0f      	ldr	r2, [pc, #60]	; (8011eb4 <CDC_Control_FS+0x140>)
 8011e76:	7892      	ldrb	r2, [r2, #2]
 8011e78:	701a      	strb	r2, [r3, #0]
        pbuf[3]=TempBuf_USB[3];
 8011e7a:	683b      	ldr	r3, [r7, #0]
 8011e7c:	3303      	adds	r3, #3
 8011e7e:	4a0d      	ldr	r2, [pc, #52]	; (8011eb4 <CDC_Control_FS+0x140>)
 8011e80:	78d2      	ldrb	r2, [r2, #3]
 8011e82:	701a      	strb	r2, [r3, #0]
        pbuf[4]=TempBuf_USB[4];
 8011e84:	683b      	ldr	r3, [r7, #0]
 8011e86:	3304      	adds	r3, #4
 8011e88:	4a0a      	ldr	r2, [pc, #40]	; (8011eb4 <CDC_Control_FS+0x140>)
 8011e8a:	7912      	ldrb	r2, [r2, #4]
 8011e8c:	701a      	strb	r2, [r3, #0]
        pbuf[5]=TempBuf_USB[5];
 8011e8e:	683b      	ldr	r3, [r7, #0]
 8011e90:	3305      	adds	r3, #5
 8011e92:	4a08      	ldr	r2, [pc, #32]	; (8011eb4 <CDC_Control_FS+0x140>)
 8011e94:	7952      	ldrb	r2, [r2, #5]
 8011e96:	701a      	strb	r2, [r3, #0]
        pbuf[6]=TempBuf_USB[6];
 8011e98:	683b      	ldr	r3, [r7, #0]
 8011e9a:	3306      	adds	r3, #6
 8011e9c:	4a05      	ldr	r2, [pc, #20]	; (8011eb4 <CDC_Control_FS+0x140>)
 8011e9e:	7992      	ldrb	r2, [r2, #6]
 8011ea0:	701a      	strb	r2, [r3, #0]
    break;
 8011ea2:	e000      	b.n	8011ea6 <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8011ea4:	bf00      	nop
  }

  return (USBD_OK);
 8011ea6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011ea8:	4618      	mov	r0, r3
 8011eaa:	370c      	adds	r7, #12
 8011eac:	46bd      	mov	sp, r7
 8011eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eb2:	4770      	bx	lr
 8011eb4:	20006580 	.word	0x20006580

08011eb8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8011eb8:	b580      	push	{r7, lr}
 8011eba:	b082      	sub	sp, #8
 8011ebc:	af00      	add	r7, sp, #0
 8011ebe:	6078      	str	r0, [r7, #4]
 8011ec0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	ringBuff_PushArray(&usb_rx_ringbuff, Buf, (uint16_t)*Len);
 8011ec2:	683b      	ldr	r3, [r7, #0]
 8011ec4:	681b      	ldr	r3, [r3, #0]
 8011ec6:	b29b      	uxth	r3, r3
 8011ec8:	461a      	mov	r2, r3
 8011eca:	6879      	ldr	r1, [r7, #4]
 8011ecc:	4807      	ldr	r0, [pc, #28]	; (8011eec <CDC_Receive_FS+0x34>)
 8011ece:	f7f1 faba 	bl	8003446 <ringBuff_PushArray>
//	if ( END_CHAR == Buf[*Len - 1]) {
//		osSignalSet(USB_RX_Check_Handle, 0x01);
//	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8011ed2:	6879      	ldr	r1, [r7, #4]
 8011ed4:	4806      	ldr	r0, [pc, #24]	; (8011ef0 <CDC_Receive_FS+0x38>)
 8011ed6:	f7fb fca2 	bl	800d81e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8011eda:	4805      	ldr	r0, [pc, #20]	; (8011ef0 <CDC_Receive_FS+0x38>)
 8011edc:	f7fb fce2 	bl	800d8a4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8011ee0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8011ee2:	4618      	mov	r0, r3
 8011ee4:	3708      	adds	r7, #8
 8011ee6:	46bd      	mov	sp, r7
 8011ee8:	bd80      	pop	{r7, pc}
 8011eea:	bf00      	nop
 8011eec:	20000054 	.word	0x20000054
 8011ef0:	20005ee4 	.word	0x20005ee4

08011ef4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8011ef4:	b580      	push	{r7, lr}
 8011ef6:	b084      	sub	sp, #16
 8011ef8:	af00      	add	r7, sp, #0
 8011efa:	6078      	str	r0, [r7, #4]
 8011efc:	460b      	mov	r3, r1
 8011efe:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8011f00:	2300      	movs	r3, #0
 8011f02:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8011f04:	4b0d      	ldr	r3, [pc, #52]	; (8011f3c <CDC_Transmit_FS+0x48>)
 8011f06:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8011f0a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8011f0c:	68bb      	ldr	r3, [r7, #8]
 8011f0e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d001      	beq.n	8011f1a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8011f16:	2301      	movs	r3, #1
 8011f18:	e00b      	b.n	8011f32 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8011f1a:	887b      	ldrh	r3, [r7, #2]
 8011f1c:	461a      	mov	r2, r3
 8011f1e:	6879      	ldr	r1, [r7, #4]
 8011f20:	4806      	ldr	r0, [pc, #24]	; (8011f3c <CDC_Transmit_FS+0x48>)
 8011f22:	f7fb fc62 	bl	800d7ea <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8011f26:	4805      	ldr	r0, [pc, #20]	; (8011f3c <CDC_Transmit_FS+0x48>)
 8011f28:	f7fb fc8d 	bl	800d846 <USBD_CDC_TransmitPacket>
 8011f2c:	4603      	mov	r3, r0
 8011f2e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8011f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f32:	4618      	mov	r0, r3
 8011f34:	3710      	adds	r7, #16
 8011f36:	46bd      	mov	sp, r7
 8011f38:	bd80      	pop	{r7, pc}
 8011f3a:	bf00      	nop
 8011f3c:	20005ee4 	.word	0x20005ee4

08011f40 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011f40:	b480      	push	{r7}
 8011f42:	b083      	sub	sp, #12
 8011f44:	af00      	add	r7, sp, #0
 8011f46:	4603      	mov	r3, r0
 8011f48:	6039      	str	r1, [r7, #0]
 8011f4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8011f4c:	683b      	ldr	r3, [r7, #0]
 8011f4e:	2212      	movs	r2, #18
 8011f50:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8011f52:	4b03      	ldr	r3, [pc, #12]	; (8011f60 <USBD_FS_DeviceDescriptor+0x20>)
}
 8011f54:	4618      	mov	r0, r3
 8011f56:	370c      	adds	r7, #12
 8011f58:	46bd      	mov	sp, r7
 8011f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f5e:	4770      	bx	lr
 8011f60:	20000e00 	.word	0x20000e00

08011f64 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011f64:	b480      	push	{r7}
 8011f66:	b083      	sub	sp, #12
 8011f68:	af00      	add	r7, sp, #0
 8011f6a:	4603      	mov	r3, r0
 8011f6c:	6039      	str	r1, [r7, #0]
 8011f6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8011f70:	683b      	ldr	r3, [r7, #0]
 8011f72:	2204      	movs	r2, #4
 8011f74:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8011f76:	4b03      	ldr	r3, [pc, #12]	; (8011f84 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8011f78:	4618      	mov	r0, r3
 8011f7a:	370c      	adds	r7, #12
 8011f7c:	46bd      	mov	sp, r7
 8011f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f82:	4770      	bx	lr
 8011f84:	20000e14 	.word	0x20000e14

08011f88 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011f88:	b580      	push	{r7, lr}
 8011f8a:	b082      	sub	sp, #8
 8011f8c:	af00      	add	r7, sp, #0
 8011f8e:	4603      	mov	r3, r0
 8011f90:	6039      	str	r1, [r7, #0]
 8011f92:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011f94:	79fb      	ldrb	r3, [r7, #7]
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d105      	bne.n	8011fa6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011f9a:	683a      	ldr	r2, [r7, #0]
 8011f9c:	4907      	ldr	r1, [pc, #28]	; (8011fbc <USBD_FS_ProductStrDescriptor+0x34>)
 8011f9e:	4808      	ldr	r0, [pc, #32]	; (8011fc0 <USBD_FS_ProductStrDescriptor+0x38>)
 8011fa0:	f7fc fc26 	bl	800e7f0 <USBD_GetString>
 8011fa4:	e004      	b.n	8011fb0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011fa6:	683a      	ldr	r2, [r7, #0]
 8011fa8:	4904      	ldr	r1, [pc, #16]	; (8011fbc <USBD_FS_ProductStrDescriptor+0x34>)
 8011faa:	4805      	ldr	r0, [pc, #20]	; (8011fc0 <USBD_FS_ProductStrDescriptor+0x38>)
 8011fac:	f7fc fc20 	bl	800e7f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011fb0:	4b02      	ldr	r3, [pc, #8]	; (8011fbc <USBD_FS_ProductStrDescriptor+0x34>)
}
 8011fb2:	4618      	mov	r0, r3
 8011fb4:	3708      	adds	r7, #8
 8011fb6:	46bd      	mov	sp, r7
 8011fb8:	bd80      	pop	{r7, pc}
 8011fba:	bf00      	nop
 8011fbc:	20006588 	.word	0x20006588
 8011fc0:	08018930 	.word	0x08018930

08011fc4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011fc4:	b580      	push	{r7, lr}
 8011fc6:	b082      	sub	sp, #8
 8011fc8:	af00      	add	r7, sp, #0
 8011fca:	4603      	mov	r3, r0
 8011fcc:	6039      	str	r1, [r7, #0]
 8011fce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8011fd0:	683a      	ldr	r2, [r7, #0]
 8011fd2:	4904      	ldr	r1, [pc, #16]	; (8011fe4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8011fd4:	4804      	ldr	r0, [pc, #16]	; (8011fe8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8011fd6:	f7fc fc0b 	bl	800e7f0 <USBD_GetString>
  return USBD_StrDesc;
 8011fda:	4b02      	ldr	r3, [pc, #8]	; (8011fe4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8011fdc:	4618      	mov	r0, r3
 8011fde:	3708      	adds	r7, #8
 8011fe0:	46bd      	mov	sp, r7
 8011fe2:	bd80      	pop	{r7, pc}
 8011fe4:	20006588 	.word	0x20006588
 8011fe8:	08018948 	.word	0x08018948

08011fec <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011fec:	b580      	push	{r7, lr}
 8011fee:	b082      	sub	sp, #8
 8011ff0:	af00      	add	r7, sp, #0
 8011ff2:	4603      	mov	r3, r0
 8011ff4:	6039      	str	r1, [r7, #0]
 8011ff6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011ff8:	683b      	ldr	r3, [r7, #0]
 8011ffa:	221a      	movs	r2, #26
 8011ffc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8011ffe:	f000 f843 	bl	8012088 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8012002:	4b02      	ldr	r3, [pc, #8]	; (801200c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8012004:	4618      	mov	r0, r3
 8012006:	3708      	adds	r7, #8
 8012008:	46bd      	mov	sp, r7
 801200a:	bd80      	pop	{r7, pc}
 801200c:	20000e18 	.word	0x20000e18

08012010 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012010:	b580      	push	{r7, lr}
 8012012:	b082      	sub	sp, #8
 8012014:	af00      	add	r7, sp, #0
 8012016:	4603      	mov	r3, r0
 8012018:	6039      	str	r1, [r7, #0]
 801201a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801201c:	79fb      	ldrb	r3, [r7, #7]
 801201e:	2b00      	cmp	r3, #0
 8012020:	d105      	bne.n	801202e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8012022:	683a      	ldr	r2, [r7, #0]
 8012024:	4907      	ldr	r1, [pc, #28]	; (8012044 <USBD_FS_ConfigStrDescriptor+0x34>)
 8012026:	4808      	ldr	r0, [pc, #32]	; (8012048 <USBD_FS_ConfigStrDescriptor+0x38>)
 8012028:	f7fc fbe2 	bl	800e7f0 <USBD_GetString>
 801202c:	e004      	b.n	8012038 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801202e:	683a      	ldr	r2, [r7, #0]
 8012030:	4904      	ldr	r1, [pc, #16]	; (8012044 <USBD_FS_ConfigStrDescriptor+0x34>)
 8012032:	4805      	ldr	r0, [pc, #20]	; (8012048 <USBD_FS_ConfigStrDescriptor+0x38>)
 8012034:	f7fc fbdc 	bl	800e7f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012038:	4b02      	ldr	r3, [pc, #8]	; (8012044 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801203a:	4618      	mov	r0, r3
 801203c:	3708      	adds	r7, #8
 801203e:	46bd      	mov	sp, r7
 8012040:	bd80      	pop	{r7, pc}
 8012042:	bf00      	nop
 8012044:	20006588 	.word	0x20006588
 8012048:	0801895c 	.word	0x0801895c

0801204c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801204c:	b580      	push	{r7, lr}
 801204e:	b082      	sub	sp, #8
 8012050:	af00      	add	r7, sp, #0
 8012052:	4603      	mov	r3, r0
 8012054:	6039      	str	r1, [r7, #0]
 8012056:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012058:	79fb      	ldrb	r3, [r7, #7]
 801205a:	2b00      	cmp	r3, #0
 801205c:	d105      	bne.n	801206a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801205e:	683a      	ldr	r2, [r7, #0]
 8012060:	4907      	ldr	r1, [pc, #28]	; (8012080 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8012062:	4808      	ldr	r0, [pc, #32]	; (8012084 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012064:	f7fc fbc4 	bl	800e7f0 <USBD_GetString>
 8012068:	e004      	b.n	8012074 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801206a:	683a      	ldr	r2, [r7, #0]
 801206c:	4904      	ldr	r1, [pc, #16]	; (8012080 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801206e:	4805      	ldr	r0, [pc, #20]	; (8012084 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012070:	f7fc fbbe 	bl	800e7f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012074:	4b02      	ldr	r3, [pc, #8]	; (8012080 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8012076:	4618      	mov	r0, r3
 8012078:	3708      	adds	r7, #8
 801207a:	46bd      	mov	sp, r7
 801207c:	bd80      	pop	{r7, pc}
 801207e:	bf00      	nop
 8012080:	20006588 	.word	0x20006588
 8012084:	08018968 	.word	0x08018968

08012088 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8012088:	b580      	push	{r7, lr}
 801208a:	b084      	sub	sp, #16
 801208c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801208e:	4b0f      	ldr	r3, [pc, #60]	; (80120cc <Get_SerialNum+0x44>)
 8012090:	681b      	ldr	r3, [r3, #0]
 8012092:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8012094:	4b0e      	ldr	r3, [pc, #56]	; (80120d0 <Get_SerialNum+0x48>)
 8012096:	681b      	ldr	r3, [r3, #0]
 8012098:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801209a:	4b0e      	ldr	r3, [pc, #56]	; (80120d4 <Get_SerialNum+0x4c>)
 801209c:	681b      	ldr	r3, [r3, #0]
 801209e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80120a0:	68fa      	ldr	r2, [r7, #12]
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	4413      	add	r3, r2
 80120a6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80120a8:	68fb      	ldr	r3, [r7, #12]
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	d009      	beq.n	80120c2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80120ae:	2208      	movs	r2, #8
 80120b0:	4909      	ldr	r1, [pc, #36]	; (80120d8 <Get_SerialNum+0x50>)
 80120b2:	68f8      	ldr	r0, [r7, #12]
 80120b4:	f000 f814 	bl	80120e0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80120b8:	2204      	movs	r2, #4
 80120ba:	4908      	ldr	r1, [pc, #32]	; (80120dc <Get_SerialNum+0x54>)
 80120bc:	68b8      	ldr	r0, [r7, #8]
 80120be:	f000 f80f 	bl	80120e0 <IntToUnicode>
  }
}
 80120c2:	bf00      	nop
 80120c4:	3710      	adds	r7, #16
 80120c6:	46bd      	mov	sp, r7
 80120c8:	bd80      	pop	{r7, pc}
 80120ca:	bf00      	nop
 80120cc:	1fff7a10 	.word	0x1fff7a10
 80120d0:	1fff7a14 	.word	0x1fff7a14
 80120d4:	1fff7a18 	.word	0x1fff7a18
 80120d8:	20000e1a 	.word	0x20000e1a
 80120dc:	20000e2a 	.word	0x20000e2a

080120e0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80120e0:	b480      	push	{r7}
 80120e2:	b087      	sub	sp, #28
 80120e4:	af00      	add	r7, sp, #0
 80120e6:	60f8      	str	r0, [r7, #12]
 80120e8:	60b9      	str	r1, [r7, #8]
 80120ea:	4613      	mov	r3, r2
 80120ec:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80120ee:	2300      	movs	r3, #0
 80120f0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80120f2:	2300      	movs	r3, #0
 80120f4:	75fb      	strb	r3, [r7, #23]
 80120f6:	e027      	b.n	8012148 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80120f8:	68fb      	ldr	r3, [r7, #12]
 80120fa:	0f1b      	lsrs	r3, r3, #28
 80120fc:	2b09      	cmp	r3, #9
 80120fe:	d80b      	bhi.n	8012118 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8012100:	68fb      	ldr	r3, [r7, #12]
 8012102:	0f1b      	lsrs	r3, r3, #28
 8012104:	b2da      	uxtb	r2, r3
 8012106:	7dfb      	ldrb	r3, [r7, #23]
 8012108:	005b      	lsls	r3, r3, #1
 801210a:	4619      	mov	r1, r3
 801210c:	68bb      	ldr	r3, [r7, #8]
 801210e:	440b      	add	r3, r1
 8012110:	3230      	adds	r2, #48	; 0x30
 8012112:	b2d2      	uxtb	r2, r2
 8012114:	701a      	strb	r2, [r3, #0]
 8012116:	e00a      	b.n	801212e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8012118:	68fb      	ldr	r3, [r7, #12]
 801211a:	0f1b      	lsrs	r3, r3, #28
 801211c:	b2da      	uxtb	r2, r3
 801211e:	7dfb      	ldrb	r3, [r7, #23]
 8012120:	005b      	lsls	r3, r3, #1
 8012122:	4619      	mov	r1, r3
 8012124:	68bb      	ldr	r3, [r7, #8]
 8012126:	440b      	add	r3, r1
 8012128:	3237      	adds	r2, #55	; 0x37
 801212a:	b2d2      	uxtb	r2, r2
 801212c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801212e:	68fb      	ldr	r3, [r7, #12]
 8012130:	011b      	lsls	r3, r3, #4
 8012132:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8012134:	7dfb      	ldrb	r3, [r7, #23]
 8012136:	005b      	lsls	r3, r3, #1
 8012138:	3301      	adds	r3, #1
 801213a:	68ba      	ldr	r2, [r7, #8]
 801213c:	4413      	add	r3, r2
 801213e:	2200      	movs	r2, #0
 8012140:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8012142:	7dfb      	ldrb	r3, [r7, #23]
 8012144:	3301      	adds	r3, #1
 8012146:	75fb      	strb	r3, [r7, #23]
 8012148:	7dfa      	ldrb	r2, [r7, #23]
 801214a:	79fb      	ldrb	r3, [r7, #7]
 801214c:	429a      	cmp	r2, r3
 801214e:	d3d3      	bcc.n	80120f8 <IntToUnicode+0x18>
  }
}
 8012150:	bf00      	nop
 8012152:	371c      	adds	r7, #28
 8012154:	46bd      	mov	sp, r7
 8012156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801215a:	4770      	bx	lr

0801215c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801215c:	b580      	push	{r7, lr}
 801215e:	b08a      	sub	sp, #40	; 0x28
 8012160:	af00      	add	r7, sp, #0
 8012162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012164:	f107 0314 	add.w	r3, r7, #20
 8012168:	2200      	movs	r2, #0
 801216a:	601a      	str	r2, [r3, #0]
 801216c:	605a      	str	r2, [r3, #4]
 801216e:	609a      	str	r2, [r3, #8]
 8012170:	60da      	str	r2, [r3, #12]
 8012172:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	681b      	ldr	r3, [r3, #0]
 8012178:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801217c:	d13a      	bne.n	80121f4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801217e:	2300      	movs	r3, #0
 8012180:	613b      	str	r3, [r7, #16]
 8012182:	4b1e      	ldr	r3, [pc, #120]	; (80121fc <HAL_PCD_MspInit+0xa0>)
 8012184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012186:	4a1d      	ldr	r2, [pc, #116]	; (80121fc <HAL_PCD_MspInit+0xa0>)
 8012188:	f043 0301 	orr.w	r3, r3, #1
 801218c:	6313      	str	r3, [r2, #48]	; 0x30
 801218e:	4b1b      	ldr	r3, [pc, #108]	; (80121fc <HAL_PCD_MspInit+0xa0>)
 8012190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012192:	f003 0301 	and.w	r3, r3, #1
 8012196:	613b      	str	r3, [r7, #16]
 8012198:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801219a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801219e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80121a0:	2302      	movs	r3, #2
 80121a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80121a4:	2300      	movs	r3, #0
 80121a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80121a8:	2303      	movs	r3, #3
 80121aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80121ac:	230a      	movs	r3, #10
 80121ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80121b0:	f107 0314 	add.w	r3, r7, #20
 80121b4:	4619      	mov	r1, r3
 80121b6:	4812      	ldr	r0, [pc, #72]	; (8012200 <HAL_PCD_MspInit+0xa4>)
 80121b8:	f7f6 fb38 	bl	800882c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80121bc:	4b0f      	ldr	r3, [pc, #60]	; (80121fc <HAL_PCD_MspInit+0xa0>)
 80121be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80121c0:	4a0e      	ldr	r2, [pc, #56]	; (80121fc <HAL_PCD_MspInit+0xa0>)
 80121c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80121c6:	6353      	str	r3, [r2, #52]	; 0x34
 80121c8:	2300      	movs	r3, #0
 80121ca:	60fb      	str	r3, [r7, #12]
 80121cc:	4b0b      	ldr	r3, [pc, #44]	; (80121fc <HAL_PCD_MspInit+0xa0>)
 80121ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80121d0:	4a0a      	ldr	r2, [pc, #40]	; (80121fc <HAL_PCD_MspInit+0xa0>)
 80121d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80121d6:	6453      	str	r3, [r2, #68]	; 0x44
 80121d8:	4b08      	ldr	r3, [pc, #32]	; (80121fc <HAL_PCD_MspInit+0xa0>)
 80121da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80121dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80121e0:	60fb      	str	r3, [r7, #12]
 80121e2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80121e4:	2200      	movs	r2, #0
 80121e6:	2105      	movs	r1, #5
 80121e8:	2043      	movs	r0, #67	; 0x43
 80121ea:	f7f5 ff57 	bl	800809c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80121ee:	2043      	movs	r0, #67	; 0x43
 80121f0:	f7f5 ff70 	bl	80080d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80121f4:	bf00      	nop
 80121f6:	3728      	adds	r7, #40	; 0x28
 80121f8:	46bd      	mov	sp, r7
 80121fa:	bd80      	pop	{r7, pc}
 80121fc:	40023800 	.word	0x40023800
 8012200:	40020000 	.word	0x40020000

08012204 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012204:	b580      	push	{r7, lr}
 8012206:	b082      	sub	sp, #8
 8012208:	af00      	add	r7, sp, #0
 801220a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8012218:	4619      	mov	r1, r3
 801221a:	4610      	mov	r0, r2
 801221c:	f7fb fbfa 	bl	800da14 <USBD_LL_SetupStage>
}
 8012220:	bf00      	nop
 8012222:	3708      	adds	r7, #8
 8012224:	46bd      	mov	sp, r7
 8012226:	bd80      	pop	{r7, pc}

08012228 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012228:	b580      	push	{r7, lr}
 801222a:	b082      	sub	sp, #8
 801222c:	af00      	add	r7, sp, #0
 801222e:	6078      	str	r0, [r7, #4]
 8012230:	460b      	mov	r3, r1
 8012232:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801223a:	78fa      	ldrb	r2, [r7, #3]
 801223c:	6879      	ldr	r1, [r7, #4]
 801223e:	4613      	mov	r3, r2
 8012240:	00db      	lsls	r3, r3, #3
 8012242:	1a9b      	subs	r3, r3, r2
 8012244:	009b      	lsls	r3, r3, #2
 8012246:	440b      	add	r3, r1
 8012248:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801224c:	681a      	ldr	r2, [r3, #0]
 801224e:	78fb      	ldrb	r3, [r7, #3]
 8012250:	4619      	mov	r1, r3
 8012252:	f7fb fc2a 	bl	800daaa <USBD_LL_DataOutStage>
}
 8012256:	bf00      	nop
 8012258:	3708      	adds	r7, #8
 801225a:	46bd      	mov	sp, r7
 801225c:	bd80      	pop	{r7, pc}

0801225e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801225e:	b580      	push	{r7, lr}
 8012260:	b082      	sub	sp, #8
 8012262:	af00      	add	r7, sp, #0
 8012264:	6078      	str	r0, [r7, #4]
 8012266:	460b      	mov	r3, r1
 8012268:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8012270:	78fa      	ldrb	r2, [r7, #3]
 8012272:	6879      	ldr	r1, [r7, #4]
 8012274:	4613      	mov	r3, r2
 8012276:	00db      	lsls	r3, r3, #3
 8012278:	1a9b      	subs	r3, r3, r2
 801227a:	009b      	lsls	r3, r3, #2
 801227c:	440b      	add	r3, r1
 801227e:	3348      	adds	r3, #72	; 0x48
 8012280:	681a      	ldr	r2, [r3, #0]
 8012282:	78fb      	ldrb	r3, [r7, #3]
 8012284:	4619      	mov	r1, r3
 8012286:	f7fb fc81 	bl	800db8c <USBD_LL_DataInStage>
}
 801228a:	bf00      	nop
 801228c:	3708      	adds	r7, #8
 801228e:	46bd      	mov	sp, r7
 8012290:	bd80      	pop	{r7, pc}

08012292 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012292:	b580      	push	{r7, lr}
 8012294:	b082      	sub	sp, #8
 8012296:	af00      	add	r7, sp, #0
 8012298:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80122a0:	4618      	mov	r0, r3
 80122a2:	f7fb fd8f 	bl	800ddc4 <USBD_LL_SOF>
}
 80122a6:	bf00      	nop
 80122a8:	3708      	adds	r7, #8
 80122aa:	46bd      	mov	sp, r7
 80122ac:	bd80      	pop	{r7, pc}

080122ae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 80122ae:	b580      	push	{r7, lr}
 80122b0:	b084      	sub	sp, #16
 80122b2:	af00      	add	r7, sp, #0
 80122b4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80122b6:	2301      	movs	r3, #1
 80122b8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	68db      	ldr	r3, [r3, #12]
 80122be:	2b00      	cmp	r3, #0
 80122c0:	d102      	bne.n	80122c8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80122c2:	2300      	movs	r3, #0
 80122c4:	73fb      	strb	r3, [r7, #15]
 80122c6:	e008      	b.n	80122da <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	68db      	ldr	r3, [r3, #12]
 80122cc:	2b02      	cmp	r3, #2
 80122ce:	d102      	bne.n	80122d6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80122d0:	2301      	movs	r3, #1
 80122d2:	73fb      	strb	r3, [r7, #15]
 80122d4:	e001      	b.n	80122da <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80122d6:	f7f1 f83f 	bl	8003358 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80122e0:	7bfa      	ldrb	r2, [r7, #15]
 80122e2:	4611      	mov	r1, r2
 80122e4:	4618      	mov	r0, r3
 80122e6:	f7fb fd37 	bl	800dd58 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80122f0:	4618      	mov	r0, r3
 80122f2:	f7fb fcf0 	bl	800dcd6 <USBD_LL_Reset>
}
 80122f6:	bf00      	nop
 80122f8:	3710      	adds	r7, #16
 80122fa:	46bd      	mov	sp, r7
 80122fc:	bd80      	pop	{r7, pc}
	...

08012300 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012300:	b580      	push	{r7, lr}
 8012302:	b082      	sub	sp, #8
 8012304:	af00      	add	r7, sp, #0
 8012306:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801230e:	4618      	mov	r0, r3
 8012310:	f7fb fd32 	bl	800dd78 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	681b      	ldr	r3, [r3, #0]
 8012318:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801231c:	681b      	ldr	r3, [r3, #0]
 801231e:	687a      	ldr	r2, [r7, #4]
 8012320:	6812      	ldr	r2, [r2, #0]
 8012322:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8012326:	f043 0301 	orr.w	r3, r3, #1
 801232a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	6a1b      	ldr	r3, [r3, #32]
 8012330:	2b00      	cmp	r3, #0
 8012332:	d005      	beq.n	8012340 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012334:	4b04      	ldr	r3, [pc, #16]	; (8012348 <HAL_PCD_SuspendCallback+0x48>)
 8012336:	691b      	ldr	r3, [r3, #16]
 8012338:	4a03      	ldr	r2, [pc, #12]	; (8012348 <HAL_PCD_SuspendCallback+0x48>)
 801233a:	f043 0306 	orr.w	r3, r3, #6
 801233e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8012340:	bf00      	nop
 8012342:	3708      	adds	r7, #8
 8012344:	46bd      	mov	sp, r7
 8012346:	bd80      	pop	{r7, pc}
 8012348:	e000ed00 	.word	0xe000ed00

0801234c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801234c:	b580      	push	{r7, lr}
 801234e:	b082      	sub	sp, #8
 8012350:	af00      	add	r7, sp, #0
 8012352:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801235a:	4618      	mov	r0, r3
 801235c:	f7fb fd21 	bl	800dda2 <USBD_LL_Resume>
}
 8012360:	bf00      	nop
 8012362:	3708      	adds	r7, #8
 8012364:	46bd      	mov	sp, r7
 8012366:	bd80      	pop	{r7, pc}

08012368 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012368:	b580      	push	{r7, lr}
 801236a:	b082      	sub	sp, #8
 801236c:	af00      	add	r7, sp, #0
 801236e:	6078      	str	r0, [r7, #4]
 8012370:	460b      	mov	r3, r1
 8012372:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801237a:	78fa      	ldrb	r2, [r7, #3]
 801237c:	4611      	mov	r1, r2
 801237e:	4618      	mov	r0, r3
 8012380:	f7fb fd47 	bl	800de12 <USBD_LL_IsoOUTIncomplete>
}
 8012384:	bf00      	nop
 8012386:	3708      	adds	r7, #8
 8012388:	46bd      	mov	sp, r7
 801238a:	bd80      	pop	{r7, pc}

0801238c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801238c:	b580      	push	{r7, lr}
 801238e:	b082      	sub	sp, #8
 8012390:	af00      	add	r7, sp, #0
 8012392:	6078      	str	r0, [r7, #4]
 8012394:	460b      	mov	r3, r1
 8012396:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801239e:	78fa      	ldrb	r2, [r7, #3]
 80123a0:	4611      	mov	r1, r2
 80123a2:	4618      	mov	r0, r3
 80123a4:	f7fb fd28 	bl	800ddf8 <USBD_LL_IsoINIncomplete>
}
 80123a8:	bf00      	nop
 80123aa:	3708      	adds	r7, #8
 80123ac:	46bd      	mov	sp, r7
 80123ae:	bd80      	pop	{r7, pc}

080123b0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80123b0:	b580      	push	{r7, lr}
 80123b2:	b082      	sub	sp, #8
 80123b4:	af00      	add	r7, sp, #0
 80123b6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80123be:	4618      	mov	r0, r3
 80123c0:	f7fb fd34 	bl	800de2c <USBD_LL_DevConnected>
}
 80123c4:	bf00      	nop
 80123c6:	3708      	adds	r7, #8
 80123c8:	46bd      	mov	sp, r7
 80123ca:	bd80      	pop	{r7, pc}

080123cc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80123cc:	b580      	push	{r7, lr}
 80123ce:	b082      	sub	sp, #8
 80123d0:	af00      	add	r7, sp, #0
 80123d2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80123da:	4618      	mov	r0, r3
 80123dc:	f7fb fd31 	bl	800de42 <USBD_LL_DevDisconnected>
}
 80123e0:	bf00      	nop
 80123e2:	3708      	adds	r7, #8
 80123e4:	46bd      	mov	sp, r7
 80123e6:	bd80      	pop	{r7, pc}

080123e8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80123e8:	b580      	push	{r7, lr}
 80123ea:	b082      	sub	sp, #8
 80123ec:	af00      	add	r7, sp, #0
 80123ee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	781b      	ldrb	r3, [r3, #0]
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d13c      	bne.n	8012472 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80123f8:	4a20      	ldr	r2, [pc, #128]	; (801247c <USBD_LL_Init+0x94>)
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	4a1e      	ldr	r2, [pc, #120]	; (801247c <USBD_LL_Init+0x94>)
 8012404:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8012408:	4b1c      	ldr	r3, [pc, #112]	; (801247c <USBD_LL_Init+0x94>)
 801240a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801240e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8012410:	4b1a      	ldr	r3, [pc, #104]	; (801247c <USBD_LL_Init+0x94>)
 8012412:	2204      	movs	r2, #4
 8012414:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8012416:	4b19      	ldr	r3, [pc, #100]	; (801247c <USBD_LL_Init+0x94>)
 8012418:	2202      	movs	r2, #2
 801241a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801241c:	4b17      	ldr	r3, [pc, #92]	; (801247c <USBD_LL_Init+0x94>)
 801241e:	2200      	movs	r2, #0
 8012420:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8012422:	4b16      	ldr	r3, [pc, #88]	; (801247c <USBD_LL_Init+0x94>)
 8012424:	2202      	movs	r2, #2
 8012426:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8012428:	4b14      	ldr	r3, [pc, #80]	; (801247c <USBD_LL_Init+0x94>)
 801242a:	2200      	movs	r2, #0
 801242c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801242e:	4b13      	ldr	r3, [pc, #76]	; (801247c <USBD_LL_Init+0x94>)
 8012430:	2200      	movs	r2, #0
 8012432:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8012434:	4b11      	ldr	r3, [pc, #68]	; (801247c <USBD_LL_Init+0x94>)
 8012436:	2200      	movs	r2, #0
 8012438:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801243a:	4b10      	ldr	r3, [pc, #64]	; (801247c <USBD_LL_Init+0x94>)
 801243c:	2200      	movs	r2, #0
 801243e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8012440:	4b0e      	ldr	r3, [pc, #56]	; (801247c <USBD_LL_Init+0x94>)
 8012442:	2200      	movs	r2, #0
 8012444:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8012446:	480d      	ldr	r0, [pc, #52]	; (801247c <USBD_LL_Init+0x94>)
 8012448:	f7f6 fbfa 	bl	8008c40 <HAL_PCD_Init>
 801244c:	4603      	mov	r3, r0
 801244e:	2b00      	cmp	r3, #0
 8012450:	d001      	beq.n	8012456 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8012452:	f7f0 ff81 	bl	8003358 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8012456:	2180      	movs	r1, #128	; 0x80
 8012458:	4808      	ldr	r0, [pc, #32]	; (801247c <USBD_LL_Init+0x94>)
 801245a:	f7f7 fd5e 	bl	8009f1a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801245e:	2240      	movs	r2, #64	; 0x40
 8012460:	2100      	movs	r1, #0
 8012462:	4806      	ldr	r0, [pc, #24]	; (801247c <USBD_LL_Init+0x94>)
 8012464:	f7f7 fd12 	bl	8009e8c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8012468:	2280      	movs	r2, #128	; 0x80
 801246a:	2101      	movs	r1, #1
 801246c:	4803      	ldr	r0, [pc, #12]	; (801247c <USBD_LL_Init+0x94>)
 801246e:	f7f7 fd0d 	bl	8009e8c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8012472:	2300      	movs	r3, #0
}
 8012474:	4618      	mov	r0, r3
 8012476:	3708      	adds	r7, #8
 8012478:	46bd      	mov	sp, r7
 801247a:	bd80      	pop	{r7, pc}
 801247c:	20006788 	.word	0x20006788

08012480 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8012480:	b580      	push	{r7, lr}
 8012482:	b084      	sub	sp, #16
 8012484:	af00      	add	r7, sp, #0
 8012486:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012488:	2300      	movs	r3, #0
 801248a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801248c:	2300      	movs	r3, #0
 801248e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8012496:	4618      	mov	r0, r3
 8012498:	f7f6 fcef 	bl	8008e7a <HAL_PCD_Start>
 801249c:	4603      	mov	r3, r0
 801249e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 80124a0:	7bfb      	ldrb	r3, [r7, #15]
 80124a2:	4618      	mov	r0, r3
 80124a4:	f000 f92e 	bl	8012704 <USBD_Get_USB_Status>
 80124a8:	4603      	mov	r3, r0
 80124aa:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80124ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80124ae:	4618      	mov	r0, r3
 80124b0:	3710      	adds	r7, #16
 80124b2:	46bd      	mov	sp, r7
 80124b4:	bd80      	pop	{r7, pc}

080124b6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80124b6:	b580      	push	{r7, lr}
 80124b8:	b084      	sub	sp, #16
 80124ba:	af00      	add	r7, sp, #0
 80124bc:	6078      	str	r0, [r7, #4]
 80124be:	4608      	mov	r0, r1
 80124c0:	4611      	mov	r1, r2
 80124c2:	461a      	mov	r2, r3
 80124c4:	4603      	mov	r3, r0
 80124c6:	70fb      	strb	r3, [r7, #3]
 80124c8:	460b      	mov	r3, r1
 80124ca:	70bb      	strb	r3, [r7, #2]
 80124cc:	4613      	mov	r3, r2
 80124ce:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80124d0:	2300      	movs	r3, #0
 80124d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80124d4:	2300      	movs	r3, #0
 80124d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80124de:	78bb      	ldrb	r3, [r7, #2]
 80124e0:	883a      	ldrh	r2, [r7, #0]
 80124e2:	78f9      	ldrb	r1, [r7, #3]
 80124e4:	f7f7 f8c4 	bl	8009670 <HAL_PCD_EP_Open>
 80124e8:	4603      	mov	r3, r0
 80124ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80124ec:	7bfb      	ldrb	r3, [r7, #15]
 80124ee:	4618      	mov	r0, r3
 80124f0:	f000 f908 	bl	8012704 <USBD_Get_USB_Status>
 80124f4:	4603      	mov	r3, r0
 80124f6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80124f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80124fa:	4618      	mov	r0, r3
 80124fc:	3710      	adds	r7, #16
 80124fe:	46bd      	mov	sp, r7
 8012500:	bd80      	pop	{r7, pc}

08012502 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012502:	b580      	push	{r7, lr}
 8012504:	b084      	sub	sp, #16
 8012506:	af00      	add	r7, sp, #0
 8012508:	6078      	str	r0, [r7, #4]
 801250a:	460b      	mov	r3, r1
 801250c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801250e:	2300      	movs	r3, #0
 8012510:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012512:	2300      	movs	r3, #0
 8012514:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801251c:	78fa      	ldrb	r2, [r7, #3]
 801251e:	4611      	mov	r1, r2
 8012520:	4618      	mov	r0, r3
 8012522:	f7f7 f90d 	bl	8009740 <HAL_PCD_EP_Close>
 8012526:	4603      	mov	r3, r0
 8012528:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 801252a:	7bfb      	ldrb	r3, [r7, #15]
 801252c:	4618      	mov	r0, r3
 801252e:	f000 f8e9 	bl	8012704 <USBD_Get_USB_Status>
 8012532:	4603      	mov	r3, r0
 8012534:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8012536:	7bbb      	ldrb	r3, [r7, #14]
}
 8012538:	4618      	mov	r0, r3
 801253a:	3710      	adds	r7, #16
 801253c:	46bd      	mov	sp, r7
 801253e:	bd80      	pop	{r7, pc}

08012540 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012540:	b580      	push	{r7, lr}
 8012542:	b084      	sub	sp, #16
 8012544:	af00      	add	r7, sp, #0
 8012546:	6078      	str	r0, [r7, #4]
 8012548:	460b      	mov	r3, r1
 801254a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801254c:	2300      	movs	r3, #0
 801254e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012550:	2300      	movs	r3, #0
 8012552:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801255a:	78fa      	ldrb	r2, [r7, #3]
 801255c:	4611      	mov	r1, r2
 801255e:	4618      	mov	r0, r3
 8012560:	f7f7 f9e5 	bl	800992e <HAL_PCD_EP_SetStall>
 8012564:	4603      	mov	r3, r0
 8012566:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012568:	7bfb      	ldrb	r3, [r7, #15]
 801256a:	4618      	mov	r0, r3
 801256c:	f000 f8ca 	bl	8012704 <USBD_Get_USB_Status>
 8012570:	4603      	mov	r3, r0
 8012572:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8012574:	7bbb      	ldrb	r3, [r7, #14]
}
 8012576:	4618      	mov	r0, r3
 8012578:	3710      	adds	r7, #16
 801257a:	46bd      	mov	sp, r7
 801257c:	bd80      	pop	{r7, pc}

0801257e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801257e:	b580      	push	{r7, lr}
 8012580:	b084      	sub	sp, #16
 8012582:	af00      	add	r7, sp, #0
 8012584:	6078      	str	r0, [r7, #4]
 8012586:	460b      	mov	r3, r1
 8012588:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801258a:	2300      	movs	r3, #0
 801258c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801258e:	2300      	movs	r3, #0
 8012590:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8012598:	78fa      	ldrb	r2, [r7, #3]
 801259a:	4611      	mov	r1, r2
 801259c:	4618      	mov	r0, r3
 801259e:	f7f7 fa2a 	bl	80099f6 <HAL_PCD_EP_ClrStall>
 80125a2:	4603      	mov	r3, r0
 80125a4:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 80125a6:	7bfb      	ldrb	r3, [r7, #15]
 80125a8:	4618      	mov	r0, r3
 80125aa:	f000 f8ab 	bl	8012704 <USBD_Get_USB_Status>
 80125ae:	4603      	mov	r3, r0
 80125b0:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 80125b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80125b4:	4618      	mov	r0, r3
 80125b6:	3710      	adds	r7, #16
 80125b8:	46bd      	mov	sp, r7
 80125ba:	bd80      	pop	{r7, pc}

080125bc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80125bc:	b480      	push	{r7}
 80125be:	b085      	sub	sp, #20
 80125c0:	af00      	add	r7, sp, #0
 80125c2:	6078      	str	r0, [r7, #4]
 80125c4:	460b      	mov	r3, r1
 80125c6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80125ce:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80125d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	da0b      	bge.n	80125f0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80125d8:	78fb      	ldrb	r3, [r7, #3]
 80125da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80125de:	68f9      	ldr	r1, [r7, #12]
 80125e0:	4613      	mov	r3, r2
 80125e2:	00db      	lsls	r3, r3, #3
 80125e4:	1a9b      	subs	r3, r3, r2
 80125e6:	009b      	lsls	r3, r3, #2
 80125e8:	440b      	add	r3, r1
 80125ea:	333e      	adds	r3, #62	; 0x3e
 80125ec:	781b      	ldrb	r3, [r3, #0]
 80125ee:	e00b      	b.n	8012608 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80125f0:	78fb      	ldrb	r3, [r7, #3]
 80125f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80125f6:	68f9      	ldr	r1, [r7, #12]
 80125f8:	4613      	mov	r3, r2
 80125fa:	00db      	lsls	r3, r3, #3
 80125fc:	1a9b      	subs	r3, r3, r2
 80125fe:	009b      	lsls	r3, r3, #2
 8012600:	440b      	add	r3, r1
 8012602:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012606:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012608:	4618      	mov	r0, r3
 801260a:	3714      	adds	r7, #20
 801260c:	46bd      	mov	sp, r7
 801260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012612:	4770      	bx	lr

08012614 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8012614:	b580      	push	{r7, lr}
 8012616:	b084      	sub	sp, #16
 8012618:	af00      	add	r7, sp, #0
 801261a:	6078      	str	r0, [r7, #4]
 801261c:	460b      	mov	r3, r1
 801261e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012620:	2300      	movs	r3, #0
 8012622:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012624:	2300      	movs	r3, #0
 8012626:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801262e:	78fa      	ldrb	r2, [r7, #3]
 8012630:	4611      	mov	r1, r2
 8012632:	4618      	mov	r0, r3
 8012634:	f7f6 fff7 	bl	8009626 <HAL_PCD_SetAddress>
 8012638:	4603      	mov	r3, r0
 801263a:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 801263c:	7bfb      	ldrb	r3, [r7, #15]
 801263e:	4618      	mov	r0, r3
 8012640:	f000 f860 	bl	8012704 <USBD_Get_USB_Status>
 8012644:	4603      	mov	r3, r0
 8012646:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8012648:	7bbb      	ldrb	r3, [r7, #14]
}
 801264a:	4618      	mov	r0, r3
 801264c:	3710      	adds	r7, #16
 801264e:	46bd      	mov	sp, r7
 8012650:	bd80      	pop	{r7, pc}

08012652 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8012652:	b580      	push	{r7, lr}
 8012654:	b086      	sub	sp, #24
 8012656:	af00      	add	r7, sp, #0
 8012658:	60f8      	str	r0, [r7, #12]
 801265a:	607a      	str	r2, [r7, #4]
 801265c:	461a      	mov	r2, r3
 801265e:	460b      	mov	r3, r1
 8012660:	72fb      	strb	r3, [r7, #11]
 8012662:	4613      	mov	r3, r2
 8012664:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012666:	2300      	movs	r3, #0
 8012668:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801266a:	2300      	movs	r3, #0
 801266c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801266e:	68fb      	ldr	r3, [r7, #12]
 8012670:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8012674:	893b      	ldrh	r3, [r7, #8]
 8012676:	7af9      	ldrb	r1, [r7, #11]
 8012678:	687a      	ldr	r2, [r7, #4]
 801267a:	f7f7 f90e 	bl	800989a <HAL_PCD_EP_Transmit>
 801267e:	4603      	mov	r3, r0
 8012680:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8012682:	7dfb      	ldrb	r3, [r7, #23]
 8012684:	4618      	mov	r0, r3
 8012686:	f000 f83d 	bl	8012704 <USBD_Get_USB_Status>
 801268a:	4603      	mov	r3, r0
 801268c:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 801268e:	7dbb      	ldrb	r3, [r7, #22]
}
 8012690:	4618      	mov	r0, r3
 8012692:	3718      	adds	r7, #24
 8012694:	46bd      	mov	sp, r7
 8012696:	bd80      	pop	{r7, pc}

08012698 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8012698:	b580      	push	{r7, lr}
 801269a:	b086      	sub	sp, #24
 801269c:	af00      	add	r7, sp, #0
 801269e:	60f8      	str	r0, [r7, #12]
 80126a0:	607a      	str	r2, [r7, #4]
 80126a2:	461a      	mov	r2, r3
 80126a4:	460b      	mov	r3, r1
 80126a6:	72fb      	strb	r3, [r7, #11]
 80126a8:	4613      	mov	r3, r2
 80126aa:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80126ac:	2300      	movs	r3, #0
 80126ae:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80126b0:	2300      	movs	r3, #0
 80126b2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80126b4:	68fb      	ldr	r3, [r7, #12]
 80126b6:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80126ba:	893b      	ldrh	r3, [r7, #8]
 80126bc:	7af9      	ldrb	r1, [r7, #11]
 80126be:	687a      	ldr	r2, [r7, #4]
 80126c0:	f7f7 f888 	bl	80097d4 <HAL_PCD_EP_Receive>
 80126c4:	4603      	mov	r3, r0
 80126c6:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 80126c8:	7dfb      	ldrb	r3, [r7, #23]
 80126ca:	4618      	mov	r0, r3
 80126cc:	f000 f81a 	bl	8012704 <USBD_Get_USB_Status>
 80126d0:	4603      	mov	r3, r0
 80126d2:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 80126d4:	7dbb      	ldrb	r3, [r7, #22]
}
 80126d6:	4618      	mov	r0, r3
 80126d8:	3718      	adds	r7, #24
 80126da:	46bd      	mov	sp, r7
 80126dc:	bd80      	pop	{r7, pc}

080126de <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80126de:	b580      	push	{r7, lr}
 80126e0:	b082      	sub	sp, #8
 80126e2:	af00      	add	r7, sp, #0
 80126e4:	6078      	str	r0, [r7, #4]
 80126e6:	460b      	mov	r3, r1
 80126e8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80126f0:	78fa      	ldrb	r2, [r7, #3]
 80126f2:	4611      	mov	r1, r2
 80126f4:	4618      	mov	r0, r3
 80126f6:	f7f7 f8b8 	bl	800986a <HAL_PCD_EP_GetRxCount>
 80126fa:	4603      	mov	r3, r0
}
 80126fc:	4618      	mov	r0, r3
 80126fe:	3708      	adds	r7, #8
 8012700:	46bd      	mov	sp, r7
 8012702:	bd80      	pop	{r7, pc}

08012704 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012704:	b480      	push	{r7}
 8012706:	b085      	sub	sp, #20
 8012708:	af00      	add	r7, sp, #0
 801270a:	4603      	mov	r3, r0
 801270c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801270e:	2300      	movs	r3, #0
 8012710:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8012712:	79fb      	ldrb	r3, [r7, #7]
 8012714:	2b03      	cmp	r3, #3
 8012716:	d817      	bhi.n	8012748 <USBD_Get_USB_Status+0x44>
 8012718:	a201      	add	r2, pc, #4	; (adr r2, 8012720 <USBD_Get_USB_Status+0x1c>)
 801271a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801271e:	bf00      	nop
 8012720:	08012731 	.word	0x08012731
 8012724:	08012737 	.word	0x08012737
 8012728:	0801273d 	.word	0x0801273d
 801272c:	08012743 	.word	0x08012743
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8012730:	2300      	movs	r3, #0
 8012732:	73fb      	strb	r3, [r7, #15]
    break;
 8012734:	e00b      	b.n	801274e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012736:	2302      	movs	r3, #2
 8012738:	73fb      	strb	r3, [r7, #15]
    break;
 801273a:	e008      	b.n	801274e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801273c:	2301      	movs	r3, #1
 801273e:	73fb      	strb	r3, [r7, #15]
    break;
 8012740:	e005      	b.n	801274e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012742:	2302      	movs	r3, #2
 8012744:	73fb      	strb	r3, [r7, #15]
    break;
 8012746:	e002      	b.n	801274e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8012748:	2302      	movs	r3, #2
 801274a:	73fb      	strb	r3, [r7, #15]
    break;
 801274c:	bf00      	nop
  }
  return usb_status;
 801274e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012750:	4618      	mov	r0, r3
 8012752:	3714      	adds	r7, #20
 8012754:	46bd      	mov	sp, r7
 8012756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801275a:	4770      	bx	lr

0801275c <__errno>:
 801275c:	4b01      	ldr	r3, [pc, #4]	; (8012764 <__errno+0x8>)
 801275e:	6818      	ldr	r0, [r3, #0]
 8012760:	4770      	bx	lr
 8012762:	bf00      	nop
 8012764:	20000e34 	.word	0x20000e34

08012768 <__libc_init_array>:
 8012768:	b570      	push	{r4, r5, r6, lr}
 801276a:	4e0d      	ldr	r6, [pc, #52]	; (80127a0 <__libc_init_array+0x38>)
 801276c:	4c0d      	ldr	r4, [pc, #52]	; (80127a4 <__libc_init_array+0x3c>)
 801276e:	1ba4      	subs	r4, r4, r6
 8012770:	10a4      	asrs	r4, r4, #2
 8012772:	2500      	movs	r5, #0
 8012774:	42a5      	cmp	r5, r4
 8012776:	d109      	bne.n	801278c <__libc_init_array+0x24>
 8012778:	4e0b      	ldr	r6, [pc, #44]	; (80127a8 <__libc_init_array+0x40>)
 801277a:	4c0c      	ldr	r4, [pc, #48]	; (80127ac <__libc_init_array+0x44>)
 801277c:	f005 fe82 	bl	8018484 <_init>
 8012780:	1ba4      	subs	r4, r4, r6
 8012782:	10a4      	asrs	r4, r4, #2
 8012784:	2500      	movs	r5, #0
 8012786:	42a5      	cmp	r5, r4
 8012788:	d105      	bne.n	8012796 <__libc_init_array+0x2e>
 801278a:	bd70      	pop	{r4, r5, r6, pc}
 801278c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012790:	4798      	blx	r3
 8012792:	3501      	adds	r5, #1
 8012794:	e7ee      	b.n	8012774 <__libc_init_array+0xc>
 8012796:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801279a:	4798      	blx	r3
 801279c:	3501      	adds	r5, #1
 801279e:	e7f2      	b.n	8012786 <__libc_init_array+0x1e>
 80127a0:	08018f00 	.word	0x08018f00
 80127a4:	08018f00 	.word	0x08018f00
 80127a8:	08018f00 	.word	0x08018f00
 80127ac:	08018f04 	.word	0x08018f04

080127b0 <malloc>:
 80127b0:	4b02      	ldr	r3, [pc, #8]	; (80127bc <malloc+0xc>)
 80127b2:	4601      	mov	r1, r0
 80127b4:	6818      	ldr	r0, [r3, #0]
 80127b6:	f000 b885 	b.w	80128c4 <_malloc_r>
 80127ba:	bf00      	nop
 80127bc:	20000e34 	.word	0x20000e34

080127c0 <free>:
 80127c0:	4b02      	ldr	r3, [pc, #8]	; (80127cc <free+0xc>)
 80127c2:	4601      	mov	r1, r0
 80127c4:	6818      	ldr	r0, [r3, #0]
 80127c6:	f000 b82f 	b.w	8012828 <_free_r>
 80127ca:	bf00      	nop
 80127cc:	20000e34 	.word	0x20000e34

080127d0 <memcpy>:
 80127d0:	b510      	push	{r4, lr}
 80127d2:	1e43      	subs	r3, r0, #1
 80127d4:	440a      	add	r2, r1
 80127d6:	4291      	cmp	r1, r2
 80127d8:	d100      	bne.n	80127dc <memcpy+0xc>
 80127da:	bd10      	pop	{r4, pc}
 80127dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80127e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80127e4:	e7f7      	b.n	80127d6 <memcpy+0x6>

080127e6 <memmove>:
 80127e6:	4288      	cmp	r0, r1
 80127e8:	b510      	push	{r4, lr}
 80127ea:	eb01 0302 	add.w	r3, r1, r2
 80127ee:	d807      	bhi.n	8012800 <memmove+0x1a>
 80127f0:	1e42      	subs	r2, r0, #1
 80127f2:	4299      	cmp	r1, r3
 80127f4:	d00a      	beq.n	801280c <memmove+0x26>
 80127f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80127fa:	f802 4f01 	strb.w	r4, [r2, #1]!
 80127fe:	e7f8      	b.n	80127f2 <memmove+0xc>
 8012800:	4283      	cmp	r3, r0
 8012802:	d9f5      	bls.n	80127f0 <memmove+0xa>
 8012804:	1881      	adds	r1, r0, r2
 8012806:	1ad2      	subs	r2, r2, r3
 8012808:	42d3      	cmn	r3, r2
 801280a:	d100      	bne.n	801280e <memmove+0x28>
 801280c:	bd10      	pop	{r4, pc}
 801280e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012812:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8012816:	e7f7      	b.n	8012808 <memmove+0x22>

08012818 <memset>:
 8012818:	4402      	add	r2, r0
 801281a:	4603      	mov	r3, r0
 801281c:	4293      	cmp	r3, r2
 801281e:	d100      	bne.n	8012822 <memset+0xa>
 8012820:	4770      	bx	lr
 8012822:	f803 1b01 	strb.w	r1, [r3], #1
 8012826:	e7f9      	b.n	801281c <memset+0x4>

08012828 <_free_r>:
 8012828:	b538      	push	{r3, r4, r5, lr}
 801282a:	4605      	mov	r5, r0
 801282c:	2900      	cmp	r1, #0
 801282e:	d045      	beq.n	80128bc <_free_r+0x94>
 8012830:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012834:	1f0c      	subs	r4, r1, #4
 8012836:	2b00      	cmp	r3, #0
 8012838:	bfb8      	it	lt
 801283a:	18e4      	addlt	r4, r4, r3
 801283c:	f002 ffce 	bl	80157dc <__malloc_lock>
 8012840:	4a1f      	ldr	r2, [pc, #124]	; (80128c0 <_free_r+0x98>)
 8012842:	6813      	ldr	r3, [r2, #0]
 8012844:	4610      	mov	r0, r2
 8012846:	b933      	cbnz	r3, 8012856 <_free_r+0x2e>
 8012848:	6063      	str	r3, [r4, #4]
 801284a:	6014      	str	r4, [r2, #0]
 801284c:	4628      	mov	r0, r5
 801284e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012852:	f002 bfc4 	b.w	80157de <__malloc_unlock>
 8012856:	42a3      	cmp	r3, r4
 8012858:	d90c      	bls.n	8012874 <_free_r+0x4c>
 801285a:	6821      	ldr	r1, [r4, #0]
 801285c:	1862      	adds	r2, r4, r1
 801285e:	4293      	cmp	r3, r2
 8012860:	bf04      	itt	eq
 8012862:	681a      	ldreq	r2, [r3, #0]
 8012864:	685b      	ldreq	r3, [r3, #4]
 8012866:	6063      	str	r3, [r4, #4]
 8012868:	bf04      	itt	eq
 801286a:	1852      	addeq	r2, r2, r1
 801286c:	6022      	streq	r2, [r4, #0]
 801286e:	6004      	str	r4, [r0, #0]
 8012870:	e7ec      	b.n	801284c <_free_r+0x24>
 8012872:	4613      	mov	r3, r2
 8012874:	685a      	ldr	r2, [r3, #4]
 8012876:	b10a      	cbz	r2, 801287c <_free_r+0x54>
 8012878:	42a2      	cmp	r2, r4
 801287a:	d9fa      	bls.n	8012872 <_free_r+0x4a>
 801287c:	6819      	ldr	r1, [r3, #0]
 801287e:	1858      	adds	r0, r3, r1
 8012880:	42a0      	cmp	r0, r4
 8012882:	d10b      	bne.n	801289c <_free_r+0x74>
 8012884:	6820      	ldr	r0, [r4, #0]
 8012886:	4401      	add	r1, r0
 8012888:	1858      	adds	r0, r3, r1
 801288a:	4282      	cmp	r2, r0
 801288c:	6019      	str	r1, [r3, #0]
 801288e:	d1dd      	bne.n	801284c <_free_r+0x24>
 8012890:	6810      	ldr	r0, [r2, #0]
 8012892:	6852      	ldr	r2, [r2, #4]
 8012894:	605a      	str	r2, [r3, #4]
 8012896:	4401      	add	r1, r0
 8012898:	6019      	str	r1, [r3, #0]
 801289a:	e7d7      	b.n	801284c <_free_r+0x24>
 801289c:	d902      	bls.n	80128a4 <_free_r+0x7c>
 801289e:	230c      	movs	r3, #12
 80128a0:	602b      	str	r3, [r5, #0]
 80128a2:	e7d3      	b.n	801284c <_free_r+0x24>
 80128a4:	6820      	ldr	r0, [r4, #0]
 80128a6:	1821      	adds	r1, r4, r0
 80128a8:	428a      	cmp	r2, r1
 80128aa:	bf04      	itt	eq
 80128ac:	6811      	ldreq	r1, [r2, #0]
 80128ae:	6852      	ldreq	r2, [r2, #4]
 80128b0:	6062      	str	r2, [r4, #4]
 80128b2:	bf04      	itt	eq
 80128b4:	1809      	addeq	r1, r1, r0
 80128b6:	6021      	streq	r1, [r4, #0]
 80128b8:	605c      	str	r4, [r3, #4]
 80128ba:	e7c7      	b.n	801284c <_free_r+0x24>
 80128bc:	bd38      	pop	{r3, r4, r5, pc}
 80128be:	bf00      	nop
 80128c0:	200051d4 	.word	0x200051d4

080128c4 <_malloc_r>:
 80128c4:	b570      	push	{r4, r5, r6, lr}
 80128c6:	1ccd      	adds	r5, r1, #3
 80128c8:	f025 0503 	bic.w	r5, r5, #3
 80128cc:	3508      	adds	r5, #8
 80128ce:	2d0c      	cmp	r5, #12
 80128d0:	bf38      	it	cc
 80128d2:	250c      	movcc	r5, #12
 80128d4:	2d00      	cmp	r5, #0
 80128d6:	4606      	mov	r6, r0
 80128d8:	db01      	blt.n	80128de <_malloc_r+0x1a>
 80128da:	42a9      	cmp	r1, r5
 80128dc:	d903      	bls.n	80128e6 <_malloc_r+0x22>
 80128de:	230c      	movs	r3, #12
 80128e0:	6033      	str	r3, [r6, #0]
 80128e2:	2000      	movs	r0, #0
 80128e4:	bd70      	pop	{r4, r5, r6, pc}
 80128e6:	f002 ff79 	bl	80157dc <__malloc_lock>
 80128ea:	4a21      	ldr	r2, [pc, #132]	; (8012970 <_malloc_r+0xac>)
 80128ec:	6814      	ldr	r4, [r2, #0]
 80128ee:	4621      	mov	r1, r4
 80128f0:	b991      	cbnz	r1, 8012918 <_malloc_r+0x54>
 80128f2:	4c20      	ldr	r4, [pc, #128]	; (8012974 <_malloc_r+0xb0>)
 80128f4:	6823      	ldr	r3, [r4, #0]
 80128f6:	b91b      	cbnz	r3, 8012900 <_malloc_r+0x3c>
 80128f8:	4630      	mov	r0, r6
 80128fa:	f000 fe7b 	bl	80135f4 <_sbrk_r>
 80128fe:	6020      	str	r0, [r4, #0]
 8012900:	4629      	mov	r1, r5
 8012902:	4630      	mov	r0, r6
 8012904:	f000 fe76 	bl	80135f4 <_sbrk_r>
 8012908:	1c43      	adds	r3, r0, #1
 801290a:	d124      	bne.n	8012956 <_malloc_r+0x92>
 801290c:	230c      	movs	r3, #12
 801290e:	6033      	str	r3, [r6, #0]
 8012910:	4630      	mov	r0, r6
 8012912:	f002 ff64 	bl	80157de <__malloc_unlock>
 8012916:	e7e4      	b.n	80128e2 <_malloc_r+0x1e>
 8012918:	680b      	ldr	r3, [r1, #0]
 801291a:	1b5b      	subs	r3, r3, r5
 801291c:	d418      	bmi.n	8012950 <_malloc_r+0x8c>
 801291e:	2b0b      	cmp	r3, #11
 8012920:	d90f      	bls.n	8012942 <_malloc_r+0x7e>
 8012922:	600b      	str	r3, [r1, #0]
 8012924:	50cd      	str	r5, [r1, r3]
 8012926:	18cc      	adds	r4, r1, r3
 8012928:	4630      	mov	r0, r6
 801292a:	f002 ff58 	bl	80157de <__malloc_unlock>
 801292e:	f104 000b 	add.w	r0, r4, #11
 8012932:	1d23      	adds	r3, r4, #4
 8012934:	f020 0007 	bic.w	r0, r0, #7
 8012938:	1ac3      	subs	r3, r0, r3
 801293a:	d0d3      	beq.n	80128e4 <_malloc_r+0x20>
 801293c:	425a      	negs	r2, r3
 801293e:	50e2      	str	r2, [r4, r3]
 8012940:	e7d0      	b.n	80128e4 <_malloc_r+0x20>
 8012942:	428c      	cmp	r4, r1
 8012944:	684b      	ldr	r3, [r1, #4]
 8012946:	bf16      	itet	ne
 8012948:	6063      	strne	r3, [r4, #4]
 801294a:	6013      	streq	r3, [r2, #0]
 801294c:	460c      	movne	r4, r1
 801294e:	e7eb      	b.n	8012928 <_malloc_r+0x64>
 8012950:	460c      	mov	r4, r1
 8012952:	6849      	ldr	r1, [r1, #4]
 8012954:	e7cc      	b.n	80128f0 <_malloc_r+0x2c>
 8012956:	1cc4      	adds	r4, r0, #3
 8012958:	f024 0403 	bic.w	r4, r4, #3
 801295c:	42a0      	cmp	r0, r4
 801295e:	d005      	beq.n	801296c <_malloc_r+0xa8>
 8012960:	1a21      	subs	r1, r4, r0
 8012962:	4630      	mov	r0, r6
 8012964:	f000 fe46 	bl	80135f4 <_sbrk_r>
 8012968:	3001      	adds	r0, #1
 801296a:	d0cf      	beq.n	801290c <_malloc_r+0x48>
 801296c:	6025      	str	r5, [r4, #0]
 801296e:	e7db      	b.n	8012928 <_malloc_r+0x64>
 8012970:	200051d4 	.word	0x200051d4
 8012974:	200051d8 	.word	0x200051d8

08012978 <__cvt>:
 8012978:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801297c:	ec55 4b10 	vmov	r4, r5, d0
 8012980:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8012982:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8012986:	2d00      	cmp	r5, #0
 8012988:	460e      	mov	r6, r1
 801298a:	4691      	mov	r9, r2
 801298c:	4619      	mov	r1, r3
 801298e:	bfb8      	it	lt
 8012990:	4622      	movlt	r2, r4
 8012992:	462b      	mov	r3, r5
 8012994:	f027 0720 	bic.w	r7, r7, #32
 8012998:	bfbb      	ittet	lt
 801299a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801299e:	461d      	movlt	r5, r3
 80129a0:	2300      	movge	r3, #0
 80129a2:	232d      	movlt	r3, #45	; 0x2d
 80129a4:	bfb8      	it	lt
 80129a6:	4614      	movlt	r4, r2
 80129a8:	2f46      	cmp	r7, #70	; 0x46
 80129aa:	700b      	strb	r3, [r1, #0]
 80129ac:	d004      	beq.n	80129b8 <__cvt+0x40>
 80129ae:	2f45      	cmp	r7, #69	; 0x45
 80129b0:	d100      	bne.n	80129b4 <__cvt+0x3c>
 80129b2:	3601      	adds	r6, #1
 80129b4:	2102      	movs	r1, #2
 80129b6:	e000      	b.n	80129ba <__cvt+0x42>
 80129b8:	2103      	movs	r1, #3
 80129ba:	ab03      	add	r3, sp, #12
 80129bc:	9301      	str	r3, [sp, #4]
 80129be:	ab02      	add	r3, sp, #8
 80129c0:	9300      	str	r3, [sp, #0]
 80129c2:	4632      	mov	r2, r6
 80129c4:	4653      	mov	r3, sl
 80129c6:	ec45 4b10 	vmov	d0, r4, r5
 80129ca:	f001 fdf5 	bl	80145b8 <_dtoa_r>
 80129ce:	2f47      	cmp	r7, #71	; 0x47
 80129d0:	4680      	mov	r8, r0
 80129d2:	d102      	bne.n	80129da <__cvt+0x62>
 80129d4:	f019 0f01 	tst.w	r9, #1
 80129d8:	d026      	beq.n	8012a28 <__cvt+0xb0>
 80129da:	2f46      	cmp	r7, #70	; 0x46
 80129dc:	eb08 0906 	add.w	r9, r8, r6
 80129e0:	d111      	bne.n	8012a06 <__cvt+0x8e>
 80129e2:	f898 3000 	ldrb.w	r3, [r8]
 80129e6:	2b30      	cmp	r3, #48	; 0x30
 80129e8:	d10a      	bne.n	8012a00 <__cvt+0x88>
 80129ea:	2200      	movs	r2, #0
 80129ec:	2300      	movs	r3, #0
 80129ee:	4620      	mov	r0, r4
 80129f0:	4629      	mov	r1, r5
 80129f2:	f7ee f879 	bl	8000ae8 <__aeabi_dcmpeq>
 80129f6:	b918      	cbnz	r0, 8012a00 <__cvt+0x88>
 80129f8:	f1c6 0601 	rsb	r6, r6, #1
 80129fc:	f8ca 6000 	str.w	r6, [sl]
 8012a00:	f8da 3000 	ldr.w	r3, [sl]
 8012a04:	4499      	add	r9, r3
 8012a06:	2200      	movs	r2, #0
 8012a08:	2300      	movs	r3, #0
 8012a0a:	4620      	mov	r0, r4
 8012a0c:	4629      	mov	r1, r5
 8012a0e:	f7ee f86b 	bl	8000ae8 <__aeabi_dcmpeq>
 8012a12:	b938      	cbnz	r0, 8012a24 <__cvt+0xac>
 8012a14:	2230      	movs	r2, #48	; 0x30
 8012a16:	9b03      	ldr	r3, [sp, #12]
 8012a18:	454b      	cmp	r3, r9
 8012a1a:	d205      	bcs.n	8012a28 <__cvt+0xb0>
 8012a1c:	1c59      	adds	r1, r3, #1
 8012a1e:	9103      	str	r1, [sp, #12]
 8012a20:	701a      	strb	r2, [r3, #0]
 8012a22:	e7f8      	b.n	8012a16 <__cvt+0x9e>
 8012a24:	f8cd 900c 	str.w	r9, [sp, #12]
 8012a28:	9b03      	ldr	r3, [sp, #12]
 8012a2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012a2c:	eba3 0308 	sub.w	r3, r3, r8
 8012a30:	4640      	mov	r0, r8
 8012a32:	6013      	str	r3, [r2, #0]
 8012a34:	b004      	add	sp, #16
 8012a36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08012a3a <__exponent>:
 8012a3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012a3c:	2900      	cmp	r1, #0
 8012a3e:	4604      	mov	r4, r0
 8012a40:	bfba      	itte	lt
 8012a42:	4249      	neglt	r1, r1
 8012a44:	232d      	movlt	r3, #45	; 0x2d
 8012a46:	232b      	movge	r3, #43	; 0x2b
 8012a48:	2909      	cmp	r1, #9
 8012a4a:	f804 2b02 	strb.w	r2, [r4], #2
 8012a4e:	7043      	strb	r3, [r0, #1]
 8012a50:	dd20      	ble.n	8012a94 <__exponent+0x5a>
 8012a52:	f10d 0307 	add.w	r3, sp, #7
 8012a56:	461f      	mov	r7, r3
 8012a58:	260a      	movs	r6, #10
 8012a5a:	fb91 f5f6 	sdiv	r5, r1, r6
 8012a5e:	fb06 1115 	mls	r1, r6, r5, r1
 8012a62:	3130      	adds	r1, #48	; 0x30
 8012a64:	2d09      	cmp	r5, #9
 8012a66:	f803 1c01 	strb.w	r1, [r3, #-1]
 8012a6a:	f103 32ff 	add.w	r2, r3, #4294967295
 8012a6e:	4629      	mov	r1, r5
 8012a70:	dc09      	bgt.n	8012a86 <__exponent+0x4c>
 8012a72:	3130      	adds	r1, #48	; 0x30
 8012a74:	3b02      	subs	r3, #2
 8012a76:	f802 1c01 	strb.w	r1, [r2, #-1]
 8012a7a:	42bb      	cmp	r3, r7
 8012a7c:	4622      	mov	r2, r4
 8012a7e:	d304      	bcc.n	8012a8a <__exponent+0x50>
 8012a80:	1a10      	subs	r0, r2, r0
 8012a82:	b003      	add	sp, #12
 8012a84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012a86:	4613      	mov	r3, r2
 8012a88:	e7e7      	b.n	8012a5a <__exponent+0x20>
 8012a8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012a8e:	f804 2b01 	strb.w	r2, [r4], #1
 8012a92:	e7f2      	b.n	8012a7a <__exponent+0x40>
 8012a94:	2330      	movs	r3, #48	; 0x30
 8012a96:	4419      	add	r1, r3
 8012a98:	7083      	strb	r3, [r0, #2]
 8012a9a:	1d02      	adds	r2, r0, #4
 8012a9c:	70c1      	strb	r1, [r0, #3]
 8012a9e:	e7ef      	b.n	8012a80 <__exponent+0x46>

08012aa0 <_printf_float>:
 8012aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012aa4:	b08d      	sub	sp, #52	; 0x34
 8012aa6:	460c      	mov	r4, r1
 8012aa8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8012aac:	4616      	mov	r6, r2
 8012aae:	461f      	mov	r7, r3
 8012ab0:	4605      	mov	r5, r0
 8012ab2:	f002 fe73 	bl	801579c <_localeconv_r>
 8012ab6:	6803      	ldr	r3, [r0, #0]
 8012ab8:	9304      	str	r3, [sp, #16]
 8012aba:	4618      	mov	r0, r3
 8012abc:	f7ed fb92 	bl	80001e4 <strlen>
 8012ac0:	2300      	movs	r3, #0
 8012ac2:	930a      	str	r3, [sp, #40]	; 0x28
 8012ac4:	f8d8 3000 	ldr.w	r3, [r8]
 8012ac8:	9005      	str	r0, [sp, #20]
 8012aca:	3307      	adds	r3, #7
 8012acc:	f023 0307 	bic.w	r3, r3, #7
 8012ad0:	f103 0208 	add.w	r2, r3, #8
 8012ad4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8012ad8:	f8d4 b000 	ldr.w	fp, [r4]
 8012adc:	f8c8 2000 	str.w	r2, [r8]
 8012ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ae4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8012ae8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8012aec:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012af0:	9307      	str	r3, [sp, #28]
 8012af2:	f8cd 8018 	str.w	r8, [sp, #24]
 8012af6:	f04f 32ff 	mov.w	r2, #4294967295
 8012afa:	4ba7      	ldr	r3, [pc, #668]	; (8012d98 <_printf_float+0x2f8>)
 8012afc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012b00:	f7ee f824 	bl	8000b4c <__aeabi_dcmpun>
 8012b04:	bb70      	cbnz	r0, 8012b64 <_printf_float+0xc4>
 8012b06:	f04f 32ff 	mov.w	r2, #4294967295
 8012b0a:	4ba3      	ldr	r3, [pc, #652]	; (8012d98 <_printf_float+0x2f8>)
 8012b0c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012b10:	f7ed fffe 	bl	8000b10 <__aeabi_dcmple>
 8012b14:	bb30      	cbnz	r0, 8012b64 <_printf_float+0xc4>
 8012b16:	2200      	movs	r2, #0
 8012b18:	2300      	movs	r3, #0
 8012b1a:	4640      	mov	r0, r8
 8012b1c:	4649      	mov	r1, r9
 8012b1e:	f7ed ffed 	bl	8000afc <__aeabi_dcmplt>
 8012b22:	b110      	cbz	r0, 8012b2a <_printf_float+0x8a>
 8012b24:	232d      	movs	r3, #45	; 0x2d
 8012b26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012b2a:	4a9c      	ldr	r2, [pc, #624]	; (8012d9c <_printf_float+0x2fc>)
 8012b2c:	4b9c      	ldr	r3, [pc, #624]	; (8012da0 <_printf_float+0x300>)
 8012b2e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8012b32:	bf8c      	ite	hi
 8012b34:	4690      	movhi	r8, r2
 8012b36:	4698      	movls	r8, r3
 8012b38:	2303      	movs	r3, #3
 8012b3a:	f02b 0204 	bic.w	r2, fp, #4
 8012b3e:	6123      	str	r3, [r4, #16]
 8012b40:	6022      	str	r2, [r4, #0]
 8012b42:	f04f 0900 	mov.w	r9, #0
 8012b46:	9700      	str	r7, [sp, #0]
 8012b48:	4633      	mov	r3, r6
 8012b4a:	aa0b      	add	r2, sp, #44	; 0x2c
 8012b4c:	4621      	mov	r1, r4
 8012b4e:	4628      	mov	r0, r5
 8012b50:	f000 f9e6 	bl	8012f20 <_printf_common>
 8012b54:	3001      	adds	r0, #1
 8012b56:	f040 808d 	bne.w	8012c74 <_printf_float+0x1d4>
 8012b5a:	f04f 30ff 	mov.w	r0, #4294967295
 8012b5e:	b00d      	add	sp, #52	; 0x34
 8012b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b64:	4642      	mov	r2, r8
 8012b66:	464b      	mov	r3, r9
 8012b68:	4640      	mov	r0, r8
 8012b6a:	4649      	mov	r1, r9
 8012b6c:	f7ed ffee 	bl	8000b4c <__aeabi_dcmpun>
 8012b70:	b110      	cbz	r0, 8012b78 <_printf_float+0xd8>
 8012b72:	4a8c      	ldr	r2, [pc, #560]	; (8012da4 <_printf_float+0x304>)
 8012b74:	4b8c      	ldr	r3, [pc, #560]	; (8012da8 <_printf_float+0x308>)
 8012b76:	e7da      	b.n	8012b2e <_printf_float+0x8e>
 8012b78:	6861      	ldr	r1, [r4, #4]
 8012b7a:	1c4b      	adds	r3, r1, #1
 8012b7c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8012b80:	a80a      	add	r0, sp, #40	; 0x28
 8012b82:	d13e      	bne.n	8012c02 <_printf_float+0x162>
 8012b84:	2306      	movs	r3, #6
 8012b86:	6063      	str	r3, [r4, #4]
 8012b88:	2300      	movs	r3, #0
 8012b8a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8012b8e:	ab09      	add	r3, sp, #36	; 0x24
 8012b90:	9300      	str	r3, [sp, #0]
 8012b92:	ec49 8b10 	vmov	d0, r8, r9
 8012b96:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012b9a:	6022      	str	r2, [r4, #0]
 8012b9c:	f8cd a004 	str.w	sl, [sp, #4]
 8012ba0:	6861      	ldr	r1, [r4, #4]
 8012ba2:	4628      	mov	r0, r5
 8012ba4:	f7ff fee8 	bl	8012978 <__cvt>
 8012ba8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8012bac:	2b47      	cmp	r3, #71	; 0x47
 8012bae:	4680      	mov	r8, r0
 8012bb0:	d109      	bne.n	8012bc6 <_printf_float+0x126>
 8012bb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012bb4:	1cd8      	adds	r0, r3, #3
 8012bb6:	db02      	blt.n	8012bbe <_printf_float+0x11e>
 8012bb8:	6862      	ldr	r2, [r4, #4]
 8012bba:	4293      	cmp	r3, r2
 8012bbc:	dd47      	ble.n	8012c4e <_printf_float+0x1ae>
 8012bbe:	f1aa 0a02 	sub.w	sl, sl, #2
 8012bc2:	fa5f fa8a 	uxtb.w	sl, sl
 8012bc6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8012bca:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012bcc:	d824      	bhi.n	8012c18 <_printf_float+0x178>
 8012bce:	3901      	subs	r1, #1
 8012bd0:	4652      	mov	r2, sl
 8012bd2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012bd6:	9109      	str	r1, [sp, #36]	; 0x24
 8012bd8:	f7ff ff2f 	bl	8012a3a <__exponent>
 8012bdc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012bde:	1813      	adds	r3, r2, r0
 8012be0:	2a01      	cmp	r2, #1
 8012be2:	4681      	mov	r9, r0
 8012be4:	6123      	str	r3, [r4, #16]
 8012be6:	dc02      	bgt.n	8012bee <_printf_float+0x14e>
 8012be8:	6822      	ldr	r2, [r4, #0]
 8012bea:	07d1      	lsls	r1, r2, #31
 8012bec:	d501      	bpl.n	8012bf2 <_printf_float+0x152>
 8012bee:	3301      	adds	r3, #1
 8012bf0:	6123      	str	r3, [r4, #16]
 8012bf2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8012bf6:	2b00      	cmp	r3, #0
 8012bf8:	d0a5      	beq.n	8012b46 <_printf_float+0xa6>
 8012bfa:	232d      	movs	r3, #45	; 0x2d
 8012bfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012c00:	e7a1      	b.n	8012b46 <_printf_float+0xa6>
 8012c02:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8012c06:	f000 8177 	beq.w	8012ef8 <_printf_float+0x458>
 8012c0a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8012c0e:	d1bb      	bne.n	8012b88 <_printf_float+0xe8>
 8012c10:	2900      	cmp	r1, #0
 8012c12:	d1b9      	bne.n	8012b88 <_printf_float+0xe8>
 8012c14:	2301      	movs	r3, #1
 8012c16:	e7b6      	b.n	8012b86 <_printf_float+0xe6>
 8012c18:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8012c1c:	d119      	bne.n	8012c52 <_printf_float+0x1b2>
 8012c1e:	2900      	cmp	r1, #0
 8012c20:	6863      	ldr	r3, [r4, #4]
 8012c22:	dd0c      	ble.n	8012c3e <_printf_float+0x19e>
 8012c24:	6121      	str	r1, [r4, #16]
 8012c26:	b913      	cbnz	r3, 8012c2e <_printf_float+0x18e>
 8012c28:	6822      	ldr	r2, [r4, #0]
 8012c2a:	07d2      	lsls	r2, r2, #31
 8012c2c:	d502      	bpl.n	8012c34 <_printf_float+0x194>
 8012c2e:	3301      	adds	r3, #1
 8012c30:	440b      	add	r3, r1
 8012c32:	6123      	str	r3, [r4, #16]
 8012c34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c36:	65a3      	str	r3, [r4, #88]	; 0x58
 8012c38:	f04f 0900 	mov.w	r9, #0
 8012c3c:	e7d9      	b.n	8012bf2 <_printf_float+0x152>
 8012c3e:	b913      	cbnz	r3, 8012c46 <_printf_float+0x1a6>
 8012c40:	6822      	ldr	r2, [r4, #0]
 8012c42:	07d0      	lsls	r0, r2, #31
 8012c44:	d501      	bpl.n	8012c4a <_printf_float+0x1aa>
 8012c46:	3302      	adds	r3, #2
 8012c48:	e7f3      	b.n	8012c32 <_printf_float+0x192>
 8012c4a:	2301      	movs	r3, #1
 8012c4c:	e7f1      	b.n	8012c32 <_printf_float+0x192>
 8012c4e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8012c52:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8012c56:	4293      	cmp	r3, r2
 8012c58:	db05      	blt.n	8012c66 <_printf_float+0x1c6>
 8012c5a:	6822      	ldr	r2, [r4, #0]
 8012c5c:	6123      	str	r3, [r4, #16]
 8012c5e:	07d1      	lsls	r1, r2, #31
 8012c60:	d5e8      	bpl.n	8012c34 <_printf_float+0x194>
 8012c62:	3301      	adds	r3, #1
 8012c64:	e7e5      	b.n	8012c32 <_printf_float+0x192>
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	bfd4      	ite	le
 8012c6a:	f1c3 0302 	rsble	r3, r3, #2
 8012c6e:	2301      	movgt	r3, #1
 8012c70:	4413      	add	r3, r2
 8012c72:	e7de      	b.n	8012c32 <_printf_float+0x192>
 8012c74:	6823      	ldr	r3, [r4, #0]
 8012c76:	055a      	lsls	r2, r3, #21
 8012c78:	d407      	bmi.n	8012c8a <_printf_float+0x1ea>
 8012c7a:	6923      	ldr	r3, [r4, #16]
 8012c7c:	4642      	mov	r2, r8
 8012c7e:	4631      	mov	r1, r6
 8012c80:	4628      	mov	r0, r5
 8012c82:	47b8      	blx	r7
 8012c84:	3001      	adds	r0, #1
 8012c86:	d12b      	bne.n	8012ce0 <_printf_float+0x240>
 8012c88:	e767      	b.n	8012b5a <_printf_float+0xba>
 8012c8a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8012c8e:	f240 80dc 	bls.w	8012e4a <_printf_float+0x3aa>
 8012c92:	2200      	movs	r2, #0
 8012c94:	2300      	movs	r3, #0
 8012c96:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012c9a:	f7ed ff25 	bl	8000ae8 <__aeabi_dcmpeq>
 8012c9e:	2800      	cmp	r0, #0
 8012ca0:	d033      	beq.n	8012d0a <_printf_float+0x26a>
 8012ca2:	2301      	movs	r3, #1
 8012ca4:	4a41      	ldr	r2, [pc, #260]	; (8012dac <_printf_float+0x30c>)
 8012ca6:	4631      	mov	r1, r6
 8012ca8:	4628      	mov	r0, r5
 8012caa:	47b8      	blx	r7
 8012cac:	3001      	adds	r0, #1
 8012cae:	f43f af54 	beq.w	8012b5a <_printf_float+0xba>
 8012cb2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012cb6:	429a      	cmp	r2, r3
 8012cb8:	db02      	blt.n	8012cc0 <_printf_float+0x220>
 8012cba:	6823      	ldr	r3, [r4, #0]
 8012cbc:	07d8      	lsls	r0, r3, #31
 8012cbe:	d50f      	bpl.n	8012ce0 <_printf_float+0x240>
 8012cc0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012cc4:	4631      	mov	r1, r6
 8012cc6:	4628      	mov	r0, r5
 8012cc8:	47b8      	blx	r7
 8012cca:	3001      	adds	r0, #1
 8012ccc:	f43f af45 	beq.w	8012b5a <_printf_float+0xba>
 8012cd0:	f04f 0800 	mov.w	r8, #0
 8012cd4:	f104 091a 	add.w	r9, r4, #26
 8012cd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012cda:	3b01      	subs	r3, #1
 8012cdc:	4543      	cmp	r3, r8
 8012cde:	dc09      	bgt.n	8012cf4 <_printf_float+0x254>
 8012ce0:	6823      	ldr	r3, [r4, #0]
 8012ce2:	079b      	lsls	r3, r3, #30
 8012ce4:	f100 8103 	bmi.w	8012eee <_printf_float+0x44e>
 8012ce8:	68e0      	ldr	r0, [r4, #12]
 8012cea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012cec:	4298      	cmp	r0, r3
 8012cee:	bfb8      	it	lt
 8012cf0:	4618      	movlt	r0, r3
 8012cf2:	e734      	b.n	8012b5e <_printf_float+0xbe>
 8012cf4:	2301      	movs	r3, #1
 8012cf6:	464a      	mov	r2, r9
 8012cf8:	4631      	mov	r1, r6
 8012cfa:	4628      	mov	r0, r5
 8012cfc:	47b8      	blx	r7
 8012cfe:	3001      	adds	r0, #1
 8012d00:	f43f af2b 	beq.w	8012b5a <_printf_float+0xba>
 8012d04:	f108 0801 	add.w	r8, r8, #1
 8012d08:	e7e6      	b.n	8012cd8 <_printf_float+0x238>
 8012d0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	dc2b      	bgt.n	8012d68 <_printf_float+0x2c8>
 8012d10:	2301      	movs	r3, #1
 8012d12:	4a26      	ldr	r2, [pc, #152]	; (8012dac <_printf_float+0x30c>)
 8012d14:	4631      	mov	r1, r6
 8012d16:	4628      	mov	r0, r5
 8012d18:	47b8      	blx	r7
 8012d1a:	3001      	adds	r0, #1
 8012d1c:	f43f af1d 	beq.w	8012b5a <_printf_float+0xba>
 8012d20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d22:	b923      	cbnz	r3, 8012d2e <_printf_float+0x28e>
 8012d24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012d26:	b913      	cbnz	r3, 8012d2e <_printf_float+0x28e>
 8012d28:	6823      	ldr	r3, [r4, #0]
 8012d2a:	07d9      	lsls	r1, r3, #31
 8012d2c:	d5d8      	bpl.n	8012ce0 <_printf_float+0x240>
 8012d2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012d32:	4631      	mov	r1, r6
 8012d34:	4628      	mov	r0, r5
 8012d36:	47b8      	blx	r7
 8012d38:	3001      	adds	r0, #1
 8012d3a:	f43f af0e 	beq.w	8012b5a <_printf_float+0xba>
 8012d3e:	f04f 0900 	mov.w	r9, #0
 8012d42:	f104 0a1a 	add.w	sl, r4, #26
 8012d46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d48:	425b      	negs	r3, r3
 8012d4a:	454b      	cmp	r3, r9
 8012d4c:	dc01      	bgt.n	8012d52 <_printf_float+0x2b2>
 8012d4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012d50:	e794      	b.n	8012c7c <_printf_float+0x1dc>
 8012d52:	2301      	movs	r3, #1
 8012d54:	4652      	mov	r2, sl
 8012d56:	4631      	mov	r1, r6
 8012d58:	4628      	mov	r0, r5
 8012d5a:	47b8      	blx	r7
 8012d5c:	3001      	adds	r0, #1
 8012d5e:	f43f aefc 	beq.w	8012b5a <_printf_float+0xba>
 8012d62:	f109 0901 	add.w	r9, r9, #1
 8012d66:	e7ee      	b.n	8012d46 <_printf_float+0x2a6>
 8012d68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012d6a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012d6c:	429a      	cmp	r2, r3
 8012d6e:	bfa8      	it	ge
 8012d70:	461a      	movge	r2, r3
 8012d72:	2a00      	cmp	r2, #0
 8012d74:	4691      	mov	r9, r2
 8012d76:	dd07      	ble.n	8012d88 <_printf_float+0x2e8>
 8012d78:	4613      	mov	r3, r2
 8012d7a:	4631      	mov	r1, r6
 8012d7c:	4642      	mov	r2, r8
 8012d7e:	4628      	mov	r0, r5
 8012d80:	47b8      	blx	r7
 8012d82:	3001      	adds	r0, #1
 8012d84:	f43f aee9 	beq.w	8012b5a <_printf_float+0xba>
 8012d88:	f104 031a 	add.w	r3, r4, #26
 8012d8c:	f04f 0b00 	mov.w	fp, #0
 8012d90:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012d94:	9306      	str	r3, [sp, #24]
 8012d96:	e015      	b.n	8012dc4 <_printf_float+0x324>
 8012d98:	7fefffff 	.word	0x7fefffff
 8012d9c:	080189a8 	.word	0x080189a8
 8012da0:	080189a4 	.word	0x080189a4
 8012da4:	080189b0 	.word	0x080189b0
 8012da8:	080189ac 	.word	0x080189ac
 8012dac:	08018b6b 	.word	0x08018b6b
 8012db0:	2301      	movs	r3, #1
 8012db2:	9a06      	ldr	r2, [sp, #24]
 8012db4:	4631      	mov	r1, r6
 8012db6:	4628      	mov	r0, r5
 8012db8:	47b8      	blx	r7
 8012dba:	3001      	adds	r0, #1
 8012dbc:	f43f aecd 	beq.w	8012b5a <_printf_float+0xba>
 8012dc0:	f10b 0b01 	add.w	fp, fp, #1
 8012dc4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8012dc8:	ebaa 0309 	sub.w	r3, sl, r9
 8012dcc:	455b      	cmp	r3, fp
 8012dce:	dcef      	bgt.n	8012db0 <_printf_float+0x310>
 8012dd0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012dd4:	429a      	cmp	r2, r3
 8012dd6:	44d0      	add	r8, sl
 8012dd8:	db15      	blt.n	8012e06 <_printf_float+0x366>
 8012dda:	6823      	ldr	r3, [r4, #0]
 8012ddc:	07da      	lsls	r2, r3, #31
 8012dde:	d412      	bmi.n	8012e06 <_printf_float+0x366>
 8012de0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012de2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012de4:	eba3 020a 	sub.w	r2, r3, sl
 8012de8:	eba3 0a01 	sub.w	sl, r3, r1
 8012dec:	4592      	cmp	sl, r2
 8012dee:	bfa8      	it	ge
 8012df0:	4692      	movge	sl, r2
 8012df2:	f1ba 0f00 	cmp.w	sl, #0
 8012df6:	dc0e      	bgt.n	8012e16 <_printf_float+0x376>
 8012df8:	f04f 0800 	mov.w	r8, #0
 8012dfc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012e00:	f104 091a 	add.w	r9, r4, #26
 8012e04:	e019      	b.n	8012e3a <_printf_float+0x39a>
 8012e06:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012e0a:	4631      	mov	r1, r6
 8012e0c:	4628      	mov	r0, r5
 8012e0e:	47b8      	blx	r7
 8012e10:	3001      	adds	r0, #1
 8012e12:	d1e5      	bne.n	8012de0 <_printf_float+0x340>
 8012e14:	e6a1      	b.n	8012b5a <_printf_float+0xba>
 8012e16:	4653      	mov	r3, sl
 8012e18:	4642      	mov	r2, r8
 8012e1a:	4631      	mov	r1, r6
 8012e1c:	4628      	mov	r0, r5
 8012e1e:	47b8      	blx	r7
 8012e20:	3001      	adds	r0, #1
 8012e22:	d1e9      	bne.n	8012df8 <_printf_float+0x358>
 8012e24:	e699      	b.n	8012b5a <_printf_float+0xba>
 8012e26:	2301      	movs	r3, #1
 8012e28:	464a      	mov	r2, r9
 8012e2a:	4631      	mov	r1, r6
 8012e2c:	4628      	mov	r0, r5
 8012e2e:	47b8      	blx	r7
 8012e30:	3001      	adds	r0, #1
 8012e32:	f43f ae92 	beq.w	8012b5a <_printf_float+0xba>
 8012e36:	f108 0801 	add.w	r8, r8, #1
 8012e3a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012e3e:	1a9b      	subs	r3, r3, r2
 8012e40:	eba3 030a 	sub.w	r3, r3, sl
 8012e44:	4543      	cmp	r3, r8
 8012e46:	dcee      	bgt.n	8012e26 <_printf_float+0x386>
 8012e48:	e74a      	b.n	8012ce0 <_printf_float+0x240>
 8012e4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012e4c:	2a01      	cmp	r2, #1
 8012e4e:	dc01      	bgt.n	8012e54 <_printf_float+0x3b4>
 8012e50:	07db      	lsls	r3, r3, #31
 8012e52:	d53a      	bpl.n	8012eca <_printf_float+0x42a>
 8012e54:	2301      	movs	r3, #1
 8012e56:	4642      	mov	r2, r8
 8012e58:	4631      	mov	r1, r6
 8012e5a:	4628      	mov	r0, r5
 8012e5c:	47b8      	blx	r7
 8012e5e:	3001      	adds	r0, #1
 8012e60:	f43f ae7b 	beq.w	8012b5a <_printf_float+0xba>
 8012e64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012e68:	4631      	mov	r1, r6
 8012e6a:	4628      	mov	r0, r5
 8012e6c:	47b8      	blx	r7
 8012e6e:	3001      	adds	r0, #1
 8012e70:	f108 0801 	add.w	r8, r8, #1
 8012e74:	f43f ae71 	beq.w	8012b5a <_printf_float+0xba>
 8012e78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012e7a:	2200      	movs	r2, #0
 8012e7c:	f103 3aff 	add.w	sl, r3, #4294967295
 8012e80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012e84:	2300      	movs	r3, #0
 8012e86:	f7ed fe2f 	bl	8000ae8 <__aeabi_dcmpeq>
 8012e8a:	b9c8      	cbnz	r0, 8012ec0 <_printf_float+0x420>
 8012e8c:	4653      	mov	r3, sl
 8012e8e:	4642      	mov	r2, r8
 8012e90:	4631      	mov	r1, r6
 8012e92:	4628      	mov	r0, r5
 8012e94:	47b8      	blx	r7
 8012e96:	3001      	adds	r0, #1
 8012e98:	d10e      	bne.n	8012eb8 <_printf_float+0x418>
 8012e9a:	e65e      	b.n	8012b5a <_printf_float+0xba>
 8012e9c:	2301      	movs	r3, #1
 8012e9e:	4652      	mov	r2, sl
 8012ea0:	4631      	mov	r1, r6
 8012ea2:	4628      	mov	r0, r5
 8012ea4:	47b8      	blx	r7
 8012ea6:	3001      	adds	r0, #1
 8012ea8:	f43f ae57 	beq.w	8012b5a <_printf_float+0xba>
 8012eac:	f108 0801 	add.w	r8, r8, #1
 8012eb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012eb2:	3b01      	subs	r3, #1
 8012eb4:	4543      	cmp	r3, r8
 8012eb6:	dcf1      	bgt.n	8012e9c <_printf_float+0x3fc>
 8012eb8:	464b      	mov	r3, r9
 8012eba:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012ebe:	e6de      	b.n	8012c7e <_printf_float+0x1de>
 8012ec0:	f04f 0800 	mov.w	r8, #0
 8012ec4:	f104 0a1a 	add.w	sl, r4, #26
 8012ec8:	e7f2      	b.n	8012eb0 <_printf_float+0x410>
 8012eca:	2301      	movs	r3, #1
 8012ecc:	e7df      	b.n	8012e8e <_printf_float+0x3ee>
 8012ece:	2301      	movs	r3, #1
 8012ed0:	464a      	mov	r2, r9
 8012ed2:	4631      	mov	r1, r6
 8012ed4:	4628      	mov	r0, r5
 8012ed6:	47b8      	blx	r7
 8012ed8:	3001      	adds	r0, #1
 8012eda:	f43f ae3e 	beq.w	8012b5a <_printf_float+0xba>
 8012ede:	f108 0801 	add.w	r8, r8, #1
 8012ee2:	68e3      	ldr	r3, [r4, #12]
 8012ee4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012ee6:	1a9b      	subs	r3, r3, r2
 8012ee8:	4543      	cmp	r3, r8
 8012eea:	dcf0      	bgt.n	8012ece <_printf_float+0x42e>
 8012eec:	e6fc      	b.n	8012ce8 <_printf_float+0x248>
 8012eee:	f04f 0800 	mov.w	r8, #0
 8012ef2:	f104 0919 	add.w	r9, r4, #25
 8012ef6:	e7f4      	b.n	8012ee2 <_printf_float+0x442>
 8012ef8:	2900      	cmp	r1, #0
 8012efa:	f43f ae8b 	beq.w	8012c14 <_printf_float+0x174>
 8012efe:	2300      	movs	r3, #0
 8012f00:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8012f04:	ab09      	add	r3, sp, #36	; 0x24
 8012f06:	9300      	str	r3, [sp, #0]
 8012f08:	ec49 8b10 	vmov	d0, r8, r9
 8012f0c:	6022      	str	r2, [r4, #0]
 8012f0e:	f8cd a004 	str.w	sl, [sp, #4]
 8012f12:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012f16:	4628      	mov	r0, r5
 8012f18:	f7ff fd2e 	bl	8012978 <__cvt>
 8012f1c:	4680      	mov	r8, r0
 8012f1e:	e648      	b.n	8012bb2 <_printf_float+0x112>

08012f20 <_printf_common>:
 8012f20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012f24:	4691      	mov	r9, r2
 8012f26:	461f      	mov	r7, r3
 8012f28:	688a      	ldr	r2, [r1, #8]
 8012f2a:	690b      	ldr	r3, [r1, #16]
 8012f2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012f30:	4293      	cmp	r3, r2
 8012f32:	bfb8      	it	lt
 8012f34:	4613      	movlt	r3, r2
 8012f36:	f8c9 3000 	str.w	r3, [r9]
 8012f3a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012f3e:	4606      	mov	r6, r0
 8012f40:	460c      	mov	r4, r1
 8012f42:	b112      	cbz	r2, 8012f4a <_printf_common+0x2a>
 8012f44:	3301      	adds	r3, #1
 8012f46:	f8c9 3000 	str.w	r3, [r9]
 8012f4a:	6823      	ldr	r3, [r4, #0]
 8012f4c:	0699      	lsls	r1, r3, #26
 8012f4e:	bf42      	ittt	mi
 8012f50:	f8d9 3000 	ldrmi.w	r3, [r9]
 8012f54:	3302      	addmi	r3, #2
 8012f56:	f8c9 3000 	strmi.w	r3, [r9]
 8012f5a:	6825      	ldr	r5, [r4, #0]
 8012f5c:	f015 0506 	ands.w	r5, r5, #6
 8012f60:	d107      	bne.n	8012f72 <_printf_common+0x52>
 8012f62:	f104 0a19 	add.w	sl, r4, #25
 8012f66:	68e3      	ldr	r3, [r4, #12]
 8012f68:	f8d9 2000 	ldr.w	r2, [r9]
 8012f6c:	1a9b      	subs	r3, r3, r2
 8012f6e:	42ab      	cmp	r3, r5
 8012f70:	dc28      	bgt.n	8012fc4 <_printf_common+0xa4>
 8012f72:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8012f76:	6822      	ldr	r2, [r4, #0]
 8012f78:	3300      	adds	r3, #0
 8012f7a:	bf18      	it	ne
 8012f7c:	2301      	movne	r3, #1
 8012f7e:	0692      	lsls	r2, r2, #26
 8012f80:	d42d      	bmi.n	8012fde <_printf_common+0xbe>
 8012f82:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012f86:	4639      	mov	r1, r7
 8012f88:	4630      	mov	r0, r6
 8012f8a:	47c0      	blx	r8
 8012f8c:	3001      	adds	r0, #1
 8012f8e:	d020      	beq.n	8012fd2 <_printf_common+0xb2>
 8012f90:	6823      	ldr	r3, [r4, #0]
 8012f92:	68e5      	ldr	r5, [r4, #12]
 8012f94:	f8d9 2000 	ldr.w	r2, [r9]
 8012f98:	f003 0306 	and.w	r3, r3, #6
 8012f9c:	2b04      	cmp	r3, #4
 8012f9e:	bf08      	it	eq
 8012fa0:	1aad      	subeq	r5, r5, r2
 8012fa2:	68a3      	ldr	r3, [r4, #8]
 8012fa4:	6922      	ldr	r2, [r4, #16]
 8012fa6:	bf0c      	ite	eq
 8012fa8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012fac:	2500      	movne	r5, #0
 8012fae:	4293      	cmp	r3, r2
 8012fb0:	bfc4      	itt	gt
 8012fb2:	1a9b      	subgt	r3, r3, r2
 8012fb4:	18ed      	addgt	r5, r5, r3
 8012fb6:	f04f 0900 	mov.w	r9, #0
 8012fba:	341a      	adds	r4, #26
 8012fbc:	454d      	cmp	r5, r9
 8012fbe:	d11a      	bne.n	8012ff6 <_printf_common+0xd6>
 8012fc0:	2000      	movs	r0, #0
 8012fc2:	e008      	b.n	8012fd6 <_printf_common+0xb6>
 8012fc4:	2301      	movs	r3, #1
 8012fc6:	4652      	mov	r2, sl
 8012fc8:	4639      	mov	r1, r7
 8012fca:	4630      	mov	r0, r6
 8012fcc:	47c0      	blx	r8
 8012fce:	3001      	adds	r0, #1
 8012fd0:	d103      	bne.n	8012fda <_printf_common+0xba>
 8012fd2:	f04f 30ff 	mov.w	r0, #4294967295
 8012fd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012fda:	3501      	adds	r5, #1
 8012fdc:	e7c3      	b.n	8012f66 <_printf_common+0x46>
 8012fde:	18e1      	adds	r1, r4, r3
 8012fe0:	1c5a      	adds	r2, r3, #1
 8012fe2:	2030      	movs	r0, #48	; 0x30
 8012fe4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012fe8:	4422      	add	r2, r4
 8012fea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012fee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012ff2:	3302      	adds	r3, #2
 8012ff4:	e7c5      	b.n	8012f82 <_printf_common+0x62>
 8012ff6:	2301      	movs	r3, #1
 8012ff8:	4622      	mov	r2, r4
 8012ffa:	4639      	mov	r1, r7
 8012ffc:	4630      	mov	r0, r6
 8012ffe:	47c0      	blx	r8
 8013000:	3001      	adds	r0, #1
 8013002:	d0e6      	beq.n	8012fd2 <_printf_common+0xb2>
 8013004:	f109 0901 	add.w	r9, r9, #1
 8013008:	e7d8      	b.n	8012fbc <_printf_common+0x9c>
	...

0801300c <_printf_i>:
 801300c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013010:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8013014:	460c      	mov	r4, r1
 8013016:	7e09      	ldrb	r1, [r1, #24]
 8013018:	b085      	sub	sp, #20
 801301a:	296e      	cmp	r1, #110	; 0x6e
 801301c:	4617      	mov	r7, r2
 801301e:	4606      	mov	r6, r0
 8013020:	4698      	mov	r8, r3
 8013022:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013024:	f000 80b3 	beq.w	801318e <_printf_i+0x182>
 8013028:	d822      	bhi.n	8013070 <_printf_i+0x64>
 801302a:	2963      	cmp	r1, #99	; 0x63
 801302c:	d036      	beq.n	801309c <_printf_i+0x90>
 801302e:	d80a      	bhi.n	8013046 <_printf_i+0x3a>
 8013030:	2900      	cmp	r1, #0
 8013032:	f000 80b9 	beq.w	80131a8 <_printf_i+0x19c>
 8013036:	2958      	cmp	r1, #88	; 0x58
 8013038:	f000 8083 	beq.w	8013142 <_printf_i+0x136>
 801303c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013040:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8013044:	e032      	b.n	80130ac <_printf_i+0xa0>
 8013046:	2964      	cmp	r1, #100	; 0x64
 8013048:	d001      	beq.n	801304e <_printf_i+0x42>
 801304a:	2969      	cmp	r1, #105	; 0x69
 801304c:	d1f6      	bne.n	801303c <_printf_i+0x30>
 801304e:	6820      	ldr	r0, [r4, #0]
 8013050:	6813      	ldr	r3, [r2, #0]
 8013052:	0605      	lsls	r5, r0, #24
 8013054:	f103 0104 	add.w	r1, r3, #4
 8013058:	d52a      	bpl.n	80130b0 <_printf_i+0xa4>
 801305a:	681b      	ldr	r3, [r3, #0]
 801305c:	6011      	str	r1, [r2, #0]
 801305e:	2b00      	cmp	r3, #0
 8013060:	da03      	bge.n	801306a <_printf_i+0x5e>
 8013062:	222d      	movs	r2, #45	; 0x2d
 8013064:	425b      	negs	r3, r3
 8013066:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801306a:	486f      	ldr	r0, [pc, #444]	; (8013228 <_printf_i+0x21c>)
 801306c:	220a      	movs	r2, #10
 801306e:	e039      	b.n	80130e4 <_printf_i+0xd8>
 8013070:	2973      	cmp	r1, #115	; 0x73
 8013072:	f000 809d 	beq.w	80131b0 <_printf_i+0x1a4>
 8013076:	d808      	bhi.n	801308a <_printf_i+0x7e>
 8013078:	296f      	cmp	r1, #111	; 0x6f
 801307a:	d020      	beq.n	80130be <_printf_i+0xb2>
 801307c:	2970      	cmp	r1, #112	; 0x70
 801307e:	d1dd      	bne.n	801303c <_printf_i+0x30>
 8013080:	6823      	ldr	r3, [r4, #0]
 8013082:	f043 0320 	orr.w	r3, r3, #32
 8013086:	6023      	str	r3, [r4, #0]
 8013088:	e003      	b.n	8013092 <_printf_i+0x86>
 801308a:	2975      	cmp	r1, #117	; 0x75
 801308c:	d017      	beq.n	80130be <_printf_i+0xb2>
 801308e:	2978      	cmp	r1, #120	; 0x78
 8013090:	d1d4      	bne.n	801303c <_printf_i+0x30>
 8013092:	2378      	movs	r3, #120	; 0x78
 8013094:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013098:	4864      	ldr	r0, [pc, #400]	; (801322c <_printf_i+0x220>)
 801309a:	e055      	b.n	8013148 <_printf_i+0x13c>
 801309c:	6813      	ldr	r3, [r2, #0]
 801309e:	1d19      	adds	r1, r3, #4
 80130a0:	681b      	ldr	r3, [r3, #0]
 80130a2:	6011      	str	r1, [r2, #0]
 80130a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80130a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80130ac:	2301      	movs	r3, #1
 80130ae:	e08c      	b.n	80131ca <_printf_i+0x1be>
 80130b0:	681b      	ldr	r3, [r3, #0]
 80130b2:	6011      	str	r1, [r2, #0]
 80130b4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80130b8:	bf18      	it	ne
 80130ba:	b21b      	sxthne	r3, r3
 80130bc:	e7cf      	b.n	801305e <_printf_i+0x52>
 80130be:	6813      	ldr	r3, [r2, #0]
 80130c0:	6825      	ldr	r5, [r4, #0]
 80130c2:	1d18      	adds	r0, r3, #4
 80130c4:	6010      	str	r0, [r2, #0]
 80130c6:	0628      	lsls	r0, r5, #24
 80130c8:	d501      	bpl.n	80130ce <_printf_i+0xc2>
 80130ca:	681b      	ldr	r3, [r3, #0]
 80130cc:	e002      	b.n	80130d4 <_printf_i+0xc8>
 80130ce:	0668      	lsls	r0, r5, #25
 80130d0:	d5fb      	bpl.n	80130ca <_printf_i+0xbe>
 80130d2:	881b      	ldrh	r3, [r3, #0]
 80130d4:	4854      	ldr	r0, [pc, #336]	; (8013228 <_printf_i+0x21c>)
 80130d6:	296f      	cmp	r1, #111	; 0x6f
 80130d8:	bf14      	ite	ne
 80130da:	220a      	movne	r2, #10
 80130dc:	2208      	moveq	r2, #8
 80130de:	2100      	movs	r1, #0
 80130e0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80130e4:	6865      	ldr	r5, [r4, #4]
 80130e6:	60a5      	str	r5, [r4, #8]
 80130e8:	2d00      	cmp	r5, #0
 80130ea:	f2c0 8095 	blt.w	8013218 <_printf_i+0x20c>
 80130ee:	6821      	ldr	r1, [r4, #0]
 80130f0:	f021 0104 	bic.w	r1, r1, #4
 80130f4:	6021      	str	r1, [r4, #0]
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	d13d      	bne.n	8013176 <_printf_i+0x16a>
 80130fa:	2d00      	cmp	r5, #0
 80130fc:	f040 808e 	bne.w	801321c <_printf_i+0x210>
 8013100:	4665      	mov	r5, ip
 8013102:	2a08      	cmp	r2, #8
 8013104:	d10b      	bne.n	801311e <_printf_i+0x112>
 8013106:	6823      	ldr	r3, [r4, #0]
 8013108:	07db      	lsls	r3, r3, #31
 801310a:	d508      	bpl.n	801311e <_printf_i+0x112>
 801310c:	6923      	ldr	r3, [r4, #16]
 801310e:	6862      	ldr	r2, [r4, #4]
 8013110:	429a      	cmp	r2, r3
 8013112:	bfde      	ittt	le
 8013114:	2330      	movle	r3, #48	; 0x30
 8013116:	f805 3c01 	strble.w	r3, [r5, #-1]
 801311a:	f105 35ff 	addle.w	r5, r5, #4294967295
 801311e:	ebac 0305 	sub.w	r3, ip, r5
 8013122:	6123      	str	r3, [r4, #16]
 8013124:	f8cd 8000 	str.w	r8, [sp]
 8013128:	463b      	mov	r3, r7
 801312a:	aa03      	add	r2, sp, #12
 801312c:	4621      	mov	r1, r4
 801312e:	4630      	mov	r0, r6
 8013130:	f7ff fef6 	bl	8012f20 <_printf_common>
 8013134:	3001      	adds	r0, #1
 8013136:	d14d      	bne.n	80131d4 <_printf_i+0x1c8>
 8013138:	f04f 30ff 	mov.w	r0, #4294967295
 801313c:	b005      	add	sp, #20
 801313e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013142:	4839      	ldr	r0, [pc, #228]	; (8013228 <_printf_i+0x21c>)
 8013144:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8013148:	6813      	ldr	r3, [r2, #0]
 801314a:	6821      	ldr	r1, [r4, #0]
 801314c:	1d1d      	adds	r5, r3, #4
 801314e:	681b      	ldr	r3, [r3, #0]
 8013150:	6015      	str	r5, [r2, #0]
 8013152:	060a      	lsls	r2, r1, #24
 8013154:	d50b      	bpl.n	801316e <_printf_i+0x162>
 8013156:	07ca      	lsls	r2, r1, #31
 8013158:	bf44      	itt	mi
 801315a:	f041 0120 	orrmi.w	r1, r1, #32
 801315e:	6021      	strmi	r1, [r4, #0]
 8013160:	b91b      	cbnz	r3, 801316a <_printf_i+0x15e>
 8013162:	6822      	ldr	r2, [r4, #0]
 8013164:	f022 0220 	bic.w	r2, r2, #32
 8013168:	6022      	str	r2, [r4, #0]
 801316a:	2210      	movs	r2, #16
 801316c:	e7b7      	b.n	80130de <_printf_i+0xd2>
 801316e:	064d      	lsls	r5, r1, #25
 8013170:	bf48      	it	mi
 8013172:	b29b      	uxthmi	r3, r3
 8013174:	e7ef      	b.n	8013156 <_printf_i+0x14a>
 8013176:	4665      	mov	r5, ip
 8013178:	fbb3 f1f2 	udiv	r1, r3, r2
 801317c:	fb02 3311 	mls	r3, r2, r1, r3
 8013180:	5cc3      	ldrb	r3, [r0, r3]
 8013182:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8013186:	460b      	mov	r3, r1
 8013188:	2900      	cmp	r1, #0
 801318a:	d1f5      	bne.n	8013178 <_printf_i+0x16c>
 801318c:	e7b9      	b.n	8013102 <_printf_i+0xf6>
 801318e:	6813      	ldr	r3, [r2, #0]
 8013190:	6825      	ldr	r5, [r4, #0]
 8013192:	6961      	ldr	r1, [r4, #20]
 8013194:	1d18      	adds	r0, r3, #4
 8013196:	6010      	str	r0, [r2, #0]
 8013198:	0628      	lsls	r0, r5, #24
 801319a:	681b      	ldr	r3, [r3, #0]
 801319c:	d501      	bpl.n	80131a2 <_printf_i+0x196>
 801319e:	6019      	str	r1, [r3, #0]
 80131a0:	e002      	b.n	80131a8 <_printf_i+0x19c>
 80131a2:	066a      	lsls	r2, r5, #25
 80131a4:	d5fb      	bpl.n	801319e <_printf_i+0x192>
 80131a6:	8019      	strh	r1, [r3, #0]
 80131a8:	2300      	movs	r3, #0
 80131aa:	6123      	str	r3, [r4, #16]
 80131ac:	4665      	mov	r5, ip
 80131ae:	e7b9      	b.n	8013124 <_printf_i+0x118>
 80131b0:	6813      	ldr	r3, [r2, #0]
 80131b2:	1d19      	adds	r1, r3, #4
 80131b4:	6011      	str	r1, [r2, #0]
 80131b6:	681d      	ldr	r5, [r3, #0]
 80131b8:	6862      	ldr	r2, [r4, #4]
 80131ba:	2100      	movs	r1, #0
 80131bc:	4628      	mov	r0, r5
 80131be:	f7ed f81f 	bl	8000200 <memchr>
 80131c2:	b108      	cbz	r0, 80131c8 <_printf_i+0x1bc>
 80131c4:	1b40      	subs	r0, r0, r5
 80131c6:	6060      	str	r0, [r4, #4]
 80131c8:	6863      	ldr	r3, [r4, #4]
 80131ca:	6123      	str	r3, [r4, #16]
 80131cc:	2300      	movs	r3, #0
 80131ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80131d2:	e7a7      	b.n	8013124 <_printf_i+0x118>
 80131d4:	6923      	ldr	r3, [r4, #16]
 80131d6:	462a      	mov	r2, r5
 80131d8:	4639      	mov	r1, r7
 80131da:	4630      	mov	r0, r6
 80131dc:	47c0      	blx	r8
 80131de:	3001      	adds	r0, #1
 80131e0:	d0aa      	beq.n	8013138 <_printf_i+0x12c>
 80131e2:	6823      	ldr	r3, [r4, #0]
 80131e4:	079b      	lsls	r3, r3, #30
 80131e6:	d413      	bmi.n	8013210 <_printf_i+0x204>
 80131e8:	68e0      	ldr	r0, [r4, #12]
 80131ea:	9b03      	ldr	r3, [sp, #12]
 80131ec:	4298      	cmp	r0, r3
 80131ee:	bfb8      	it	lt
 80131f0:	4618      	movlt	r0, r3
 80131f2:	e7a3      	b.n	801313c <_printf_i+0x130>
 80131f4:	2301      	movs	r3, #1
 80131f6:	464a      	mov	r2, r9
 80131f8:	4639      	mov	r1, r7
 80131fa:	4630      	mov	r0, r6
 80131fc:	47c0      	blx	r8
 80131fe:	3001      	adds	r0, #1
 8013200:	d09a      	beq.n	8013138 <_printf_i+0x12c>
 8013202:	3501      	adds	r5, #1
 8013204:	68e3      	ldr	r3, [r4, #12]
 8013206:	9a03      	ldr	r2, [sp, #12]
 8013208:	1a9b      	subs	r3, r3, r2
 801320a:	42ab      	cmp	r3, r5
 801320c:	dcf2      	bgt.n	80131f4 <_printf_i+0x1e8>
 801320e:	e7eb      	b.n	80131e8 <_printf_i+0x1dc>
 8013210:	2500      	movs	r5, #0
 8013212:	f104 0919 	add.w	r9, r4, #25
 8013216:	e7f5      	b.n	8013204 <_printf_i+0x1f8>
 8013218:	2b00      	cmp	r3, #0
 801321a:	d1ac      	bne.n	8013176 <_printf_i+0x16a>
 801321c:	7803      	ldrb	r3, [r0, #0]
 801321e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013222:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013226:	e76c      	b.n	8013102 <_printf_i+0xf6>
 8013228:	080189b4 	.word	0x080189b4
 801322c:	080189c5 	.word	0x080189c5

08013230 <_scanf_float>:
 8013230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013234:	469a      	mov	sl, r3
 8013236:	688b      	ldr	r3, [r1, #8]
 8013238:	4616      	mov	r6, r2
 801323a:	1e5a      	subs	r2, r3, #1
 801323c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8013240:	b087      	sub	sp, #28
 8013242:	bf83      	ittte	hi
 8013244:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8013248:	189b      	addhi	r3, r3, r2
 801324a:	9301      	strhi	r3, [sp, #4]
 801324c:	2300      	movls	r3, #0
 801324e:	bf86      	itte	hi
 8013250:	f240 135d 	movwhi	r3, #349	; 0x15d
 8013254:	608b      	strhi	r3, [r1, #8]
 8013256:	9301      	strls	r3, [sp, #4]
 8013258:	680b      	ldr	r3, [r1, #0]
 801325a:	4688      	mov	r8, r1
 801325c:	f04f 0b00 	mov.w	fp, #0
 8013260:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8013264:	f848 3b1c 	str.w	r3, [r8], #28
 8013268:	e9cd bb03 	strd	fp, fp, [sp, #12]
 801326c:	4607      	mov	r7, r0
 801326e:	460c      	mov	r4, r1
 8013270:	4645      	mov	r5, r8
 8013272:	465a      	mov	r2, fp
 8013274:	46d9      	mov	r9, fp
 8013276:	f8cd b008 	str.w	fp, [sp, #8]
 801327a:	68a1      	ldr	r1, [r4, #8]
 801327c:	b181      	cbz	r1, 80132a0 <_scanf_float+0x70>
 801327e:	6833      	ldr	r3, [r6, #0]
 8013280:	781b      	ldrb	r3, [r3, #0]
 8013282:	2b49      	cmp	r3, #73	; 0x49
 8013284:	d071      	beq.n	801336a <_scanf_float+0x13a>
 8013286:	d84d      	bhi.n	8013324 <_scanf_float+0xf4>
 8013288:	2b39      	cmp	r3, #57	; 0x39
 801328a:	d840      	bhi.n	801330e <_scanf_float+0xde>
 801328c:	2b31      	cmp	r3, #49	; 0x31
 801328e:	f080 8088 	bcs.w	80133a2 <_scanf_float+0x172>
 8013292:	2b2d      	cmp	r3, #45	; 0x2d
 8013294:	f000 8090 	beq.w	80133b8 <_scanf_float+0x188>
 8013298:	d815      	bhi.n	80132c6 <_scanf_float+0x96>
 801329a:	2b2b      	cmp	r3, #43	; 0x2b
 801329c:	f000 808c 	beq.w	80133b8 <_scanf_float+0x188>
 80132a0:	f1b9 0f00 	cmp.w	r9, #0
 80132a4:	d003      	beq.n	80132ae <_scanf_float+0x7e>
 80132a6:	6823      	ldr	r3, [r4, #0]
 80132a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80132ac:	6023      	str	r3, [r4, #0]
 80132ae:	3a01      	subs	r2, #1
 80132b0:	2a01      	cmp	r2, #1
 80132b2:	f200 80ea 	bhi.w	801348a <_scanf_float+0x25a>
 80132b6:	4545      	cmp	r5, r8
 80132b8:	f200 80dc 	bhi.w	8013474 <_scanf_float+0x244>
 80132bc:	2601      	movs	r6, #1
 80132be:	4630      	mov	r0, r6
 80132c0:	b007      	add	sp, #28
 80132c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132c6:	2b2e      	cmp	r3, #46	; 0x2e
 80132c8:	f000 809f 	beq.w	801340a <_scanf_float+0x1da>
 80132cc:	2b30      	cmp	r3, #48	; 0x30
 80132ce:	d1e7      	bne.n	80132a0 <_scanf_float+0x70>
 80132d0:	6820      	ldr	r0, [r4, #0]
 80132d2:	f410 7f80 	tst.w	r0, #256	; 0x100
 80132d6:	d064      	beq.n	80133a2 <_scanf_float+0x172>
 80132d8:	9b01      	ldr	r3, [sp, #4]
 80132da:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 80132de:	6020      	str	r0, [r4, #0]
 80132e0:	f109 0901 	add.w	r9, r9, #1
 80132e4:	b11b      	cbz	r3, 80132ee <_scanf_float+0xbe>
 80132e6:	3b01      	subs	r3, #1
 80132e8:	3101      	adds	r1, #1
 80132ea:	9301      	str	r3, [sp, #4]
 80132ec:	60a1      	str	r1, [r4, #8]
 80132ee:	68a3      	ldr	r3, [r4, #8]
 80132f0:	3b01      	subs	r3, #1
 80132f2:	60a3      	str	r3, [r4, #8]
 80132f4:	6923      	ldr	r3, [r4, #16]
 80132f6:	3301      	adds	r3, #1
 80132f8:	6123      	str	r3, [r4, #16]
 80132fa:	6873      	ldr	r3, [r6, #4]
 80132fc:	3b01      	subs	r3, #1
 80132fe:	2b00      	cmp	r3, #0
 8013300:	6073      	str	r3, [r6, #4]
 8013302:	f340 80ac 	ble.w	801345e <_scanf_float+0x22e>
 8013306:	6833      	ldr	r3, [r6, #0]
 8013308:	3301      	adds	r3, #1
 801330a:	6033      	str	r3, [r6, #0]
 801330c:	e7b5      	b.n	801327a <_scanf_float+0x4a>
 801330e:	2b45      	cmp	r3, #69	; 0x45
 8013310:	f000 8085 	beq.w	801341e <_scanf_float+0x1ee>
 8013314:	2b46      	cmp	r3, #70	; 0x46
 8013316:	d06a      	beq.n	80133ee <_scanf_float+0x1be>
 8013318:	2b41      	cmp	r3, #65	; 0x41
 801331a:	d1c1      	bne.n	80132a0 <_scanf_float+0x70>
 801331c:	2a01      	cmp	r2, #1
 801331e:	d1bf      	bne.n	80132a0 <_scanf_float+0x70>
 8013320:	2202      	movs	r2, #2
 8013322:	e046      	b.n	80133b2 <_scanf_float+0x182>
 8013324:	2b65      	cmp	r3, #101	; 0x65
 8013326:	d07a      	beq.n	801341e <_scanf_float+0x1ee>
 8013328:	d818      	bhi.n	801335c <_scanf_float+0x12c>
 801332a:	2b54      	cmp	r3, #84	; 0x54
 801332c:	d066      	beq.n	80133fc <_scanf_float+0x1cc>
 801332e:	d811      	bhi.n	8013354 <_scanf_float+0x124>
 8013330:	2b4e      	cmp	r3, #78	; 0x4e
 8013332:	d1b5      	bne.n	80132a0 <_scanf_float+0x70>
 8013334:	2a00      	cmp	r2, #0
 8013336:	d146      	bne.n	80133c6 <_scanf_float+0x196>
 8013338:	f1b9 0f00 	cmp.w	r9, #0
 801333c:	d145      	bne.n	80133ca <_scanf_float+0x19a>
 801333e:	6821      	ldr	r1, [r4, #0]
 8013340:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8013344:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8013348:	d13f      	bne.n	80133ca <_scanf_float+0x19a>
 801334a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801334e:	6021      	str	r1, [r4, #0]
 8013350:	2201      	movs	r2, #1
 8013352:	e02e      	b.n	80133b2 <_scanf_float+0x182>
 8013354:	2b59      	cmp	r3, #89	; 0x59
 8013356:	d01e      	beq.n	8013396 <_scanf_float+0x166>
 8013358:	2b61      	cmp	r3, #97	; 0x61
 801335a:	e7de      	b.n	801331a <_scanf_float+0xea>
 801335c:	2b6e      	cmp	r3, #110	; 0x6e
 801335e:	d0e9      	beq.n	8013334 <_scanf_float+0x104>
 8013360:	d815      	bhi.n	801338e <_scanf_float+0x15e>
 8013362:	2b66      	cmp	r3, #102	; 0x66
 8013364:	d043      	beq.n	80133ee <_scanf_float+0x1be>
 8013366:	2b69      	cmp	r3, #105	; 0x69
 8013368:	d19a      	bne.n	80132a0 <_scanf_float+0x70>
 801336a:	f1bb 0f00 	cmp.w	fp, #0
 801336e:	d138      	bne.n	80133e2 <_scanf_float+0x1b2>
 8013370:	f1b9 0f00 	cmp.w	r9, #0
 8013374:	d197      	bne.n	80132a6 <_scanf_float+0x76>
 8013376:	6821      	ldr	r1, [r4, #0]
 8013378:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 801337c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8013380:	d195      	bne.n	80132ae <_scanf_float+0x7e>
 8013382:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8013386:	6021      	str	r1, [r4, #0]
 8013388:	f04f 0b01 	mov.w	fp, #1
 801338c:	e011      	b.n	80133b2 <_scanf_float+0x182>
 801338e:	2b74      	cmp	r3, #116	; 0x74
 8013390:	d034      	beq.n	80133fc <_scanf_float+0x1cc>
 8013392:	2b79      	cmp	r3, #121	; 0x79
 8013394:	d184      	bne.n	80132a0 <_scanf_float+0x70>
 8013396:	f1bb 0f07 	cmp.w	fp, #7
 801339a:	d181      	bne.n	80132a0 <_scanf_float+0x70>
 801339c:	f04f 0b08 	mov.w	fp, #8
 80133a0:	e007      	b.n	80133b2 <_scanf_float+0x182>
 80133a2:	eb12 0f0b 	cmn.w	r2, fp
 80133a6:	f47f af7b 	bne.w	80132a0 <_scanf_float+0x70>
 80133aa:	6821      	ldr	r1, [r4, #0]
 80133ac:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80133b0:	6021      	str	r1, [r4, #0]
 80133b2:	702b      	strb	r3, [r5, #0]
 80133b4:	3501      	adds	r5, #1
 80133b6:	e79a      	b.n	80132ee <_scanf_float+0xbe>
 80133b8:	6821      	ldr	r1, [r4, #0]
 80133ba:	0608      	lsls	r0, r1, #24
 80133bc:	f57f af70 	bpl.w	80132a0 <_scanf_float+0x70>
 80133c0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80133c4:	e7f4      	b.n	80133b0 <_scanf_float+0x180>
 80133c6:	2a02      	cmp	r2, #2
 80133c8:	d047      	beq.n	801345a <_scanf_float+0x22a>
 80133ca:	f1bb 0f01 	cmp.w	fp, #1
 80133ce:	d003      	beq.n	80133d8 <_scanf_float+0x1a8>
 80133d0:	f1bb 0f04 	cmp.w	fp, #4
 80133d4:	f47f af64 	bne.w	80132a0 <_scanf_float+0x70>
 80133d8:	f10b 0b01 	add.w	fp, fp, #1
 80133dc:	fa5f fb8b 	uxtb.w	fp, fp
 80133e0:	e7e7      	b.n	80133b2 <_scanf_float+0x182>
 80133e2:	f1bb 0f03 	cmp.w	fp, #3
 80133e6:	d0f7      	beq.n	80133d8 <_scanf_float+0x1a8>
 80133e8:	f1bb 0f05 	cmp.w	fp, #5
 80133ec:	e7f2      	b.n	80133d4 <_scanf_float+0x1a4>
 80133ee:	f1bb 0f02 	cmp.w	fp, #2
 80133f2:	f47f af55 	bne.w	80132a0 <_scanf_float+0x70>
 80133f6:	f04f 0b03 	mov.w	fp, #3
 80133fa:	e7da      	b.n	80133b2 <_scanf_float+0x182>
 80133fc:	f1bb 0f06 	cmp.w	fp, #6
 8013400:	f47f af4e 	bne.w	80132a0 <_scanf_float+0x70>
 8013404:	f04f 0b07 	mov.w	fp, #7
 8013408:	e7d3      	b.n	80133b2 <_scanf_float+0x182>
 801340a:	6821      	ldr	r1, [r4, #0]
 801340c:	0588      	lsls	r0, r1, #22
 801340e:	f57f af47 	bpl.w	80132a0 <_scanf_float+0x70>
 8013412:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8013416:	6021      	str	r1, [r4, #0]
 8013418:	f8cd 9008 	str.w	r9, [sp, #8]
 801341c:	e7c9      	b.n	80133b2 <_scanf_float+0x182>
 801341e:	6821      	ldr	r1, [r4, #0]
 8013420:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8013424:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8013428:	d006      	beq.n	8013438 <_scanf_float+0x208>
 801342a:	0548      	lsls	r0, r1, #21
 801342c:	f57f af38 	bpl.w	80132a0 <_scanf_float+0x70>
 8013430:	f1b9 0f00 	cmp.w	r9, #0
 8013434:	f43f af3b 	beq.w	80132ae <_scanf_float+0x7e>
 8013438:	0588      	lsls	r0, r1, #22
 801343a:	bf58      	it	pl
 801343c:	9802      	ldrpl	r0, [sp, #8]
 801343e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8013442:	bf58      	it	pl
 8013444:	eba9 0000 	subpl.w	r0, r9, r0
 8013448:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 801344c:	bf58      	it	pl
 801344e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8013452:	6021      	str	r1, [r4, #0]
 8013454:	f04f 0900 	mov.w	r9, #0
 8013458:	e7ab      	b.n	80133b2 <_scanf_float+0x182>
 801345a:	2203      	movs	r2, #3
 801345c:	e7a9      	b.n	80133b2 <_scanf_float+0x182>
 801345e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013462:	9205      	str	r2, [sp, #20]
 8013464:	4631      	mov	r1, r6
 8013466:	4638      	mov	r0, r7
 8013468:	4798      	blx	r3
 801346a:	9a05      	ldr	r2, [sp, #20]
 801346c:	2800      	cmp	r0, #0
 801346e:	f43f af04 	beq.w	801327a <_scanf_float+0x4a>
 8013472:	e715      	b.n	80132a0 <_scanf_float+0x70>
 8013474:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013478:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801347c:	4632      	mov	r2, r6
 801347e:	4638      	mov	r0, r7
 8013480:	4798      	blx	r3
 8013482:	6923      	ldr	r3, [r4, #16]
 8013484:	3b01      	subs	r3, #1
 8013486:	6123      	str	r3, [r4, #16]
 8013488:	e715      	b.n	80132b6 <_scanf_float+0x86>
 801348a:	f10b 33ff 	add.w	r3, fp, #4294967295
 801348e:	2b06      	cmp	r3, #6
 8013490:	d80a      	bhi.n	80134a8 <_scanf_float+0x278>
 8013492:	f1bb 0f02 	cmp.w	fp, #2
 8013496:	d968      	bls.n	801356a <_scanf_float+0x33a>
 8013498:	f1ab 0b03 	sub.w	fp, fp, #3
 801349c:	fa5f fb8b 	uxtb.w	fp, fp
 80134a0:	eba5 0b0b 	sub.w	fp, r5, fp
 80134a4:	455d      	cmp	r5, fp
 80134a6:	d14b      	bne.n	8013540 <_scanf_float+0x310>
 80134a8:	6823      	ldr	r3, [r4, #0]
 80134aa:	05da      	lsls	r2, r3, #23
 80134ac:	d51f      	bpl.n	80134ee <_scanf_float+0x2be>
 80134ae:	055b      	lsls	r3, r3, #21
 80134b0:	d468      	bmi.n	8013584 <_scanf_float+0x354>
 80134b2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80134b6:	6923      	ldr	r3, [r4, #16]
 80134b8:	2965      	cmp	r1, #101	; 0x65
 80134ba:	f103 33ff 	add.w	r3, r3, #4294967295
 80134be:	f105 3bff 	add.w	fp, r5, #4294967295
 80134c2:	6123      	str	r3, [r4, #16]
 80134c4:	d00d      	beq.n	80134e2 <_scanf_float+0x2b2>
 80134c6:	2945      	cmp	r1, #69	; 0x45
 80134c8:	d00b      	beq.n	80134e2 <_scanf_float+0x2b2>
 80134ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80134ce:	4632      	mov	r2, r6
 80134d0:	4638      	mov	r0, r7
 80134d2:	4798      	blx	r3
 80134d4:	6923      	ldr	r3, [r4, #16]
 80134d6:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80134da:	3b01      	subs	r3, #1
 80134dc:	f1a5 0b02 	sub.w	fp, r5, #2
 80134e0:	6123      	str	r3, [r4, #16]
 80134e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80134e6:	4632      	mov	r2, r6
 80134e8:	4638      	mov	r0, r7
 80134ea:	4798      	blx	r3
 80134ec:	465d      	mov	r5, fp
 80134ee:	6826      	ldr	r6, [r4, #0]
 80134f0:	f016 0610 	ands.w	r6, r6, #16
 80134f4:	d17a      	bne.n	80135ec <_scanf_float+0x3bc>
 80134f6:	702e      	strb	r6, [r5, #0]
 80134f8:	6823      	ldr	r3, [r4, #0]
 80134fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80134fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013502:	d142      	bne.n	801358a <_scanf_float+0x35a>
 8013504:	9b02      	ldr	r3, [sp, #8]
 8013506:	eba9 0303 	sub.w	r3, r9, r3
 801350a:	425a      	negs	r2, r3
 801350c:	2b00      	cmp	r3, #0
 801350e:	d149      	bne.n	80135a4 <_scanf_float+0x374>
 8013510:	2200      	movs	r2, #0
 8013512:	4641      	mov	r1, r8
 8013514:	4638      	mov	r0, r7
 8013516:	f000 ff23 	bl	8014360 <_strtod_r>
 801351a:	6825      	ldr	r5, [r4, #0]
 801351c:	f8da 3000 	ldr.w	r3, [sl]
 8013520:	f015 0f02 	tst.w	r5, #2
 8013524:	f103 0204 	add.w	r2, r3, #4
 8013528:	ec59 8b10 	vmov	r8, r9, d0
 801352c:	f8ca 2000 	str.w	r2, [sl]
 8013530:	d043      	beq.n	80135ba <_scanf_float+0x38a>
 8013532:	681b      	ldr	r3, [r3, #0]
 8013534:	e9c3 8900 	strd	r8, r9, [r3]
 8013538:	68e3      	ldr	r3, [r4, #12]
 801353a:	3301      	adds	r3, #1
 801353c:	60e3      	str	r3, [r4, #12]
 801353e:	e6be      	b.n	80132be <_scanf_float+0x8e>
 8013540:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013544:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8013548:	4632      	mov	r2, r6
 801354a:	4638      	mov	r0, r7
 801354c:	4798      	blx	r3
 801354e:	6923      	ldr	r3, [r4, #16]
 8013550:	3b01      	subs	r3, #1
 8013552:	6123      	str	r3, [r4, #16]
 8013554:	e7a6      	b.n	80134a4 <_scanf_float+0x274>
 8013556:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801355a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801355e:	4632      	mov	r2, r6
 8013560:	4638      	mov	r0, r7
 8013562:	4798      	blx	r3
 8013564:	6923      	ldr	r3, [r4, #16]
 8013566:	3b01      	subs	r3, #1
 8013568:	6123      	str	r3, [r4, #16]
 801356a:	4545      	cmp	r5, r8
 801356c:	d8f3      	bhi.n	8013556 <_scanf_float+0x326>
 801356e:	e6a5      	b.n	80132bc <_scanf_float+0x8c>
 8013570:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013574:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8013578:	4632      	mov	r2, r6
 801357a:	4638      	mov	r0, r7
 801357c:	4798      	blx	r3
 801357e:	6923      	ldr	r3, [r4, #16]
 8013580:	3b01      	subs	r3, #1
 8013582:	6123      	str	r3, [r4, #16]
 8013584:	4545      	cmp	r5, r8
 8013586:	d8f3      	bhi.n	8013570 <_scanf_float+0x340>
 8013588:	e698      	b.n	80132bc <_scanf_float+0x8c>
 801358a:	9b03      	ldr	r3, [sp, #12]
 801358c:	2b00      	cmp	r3, #0
 801358e:	d0bf      	beq.n	8013510 <_scanf_float+0x2e0>
 8013590:	9904      	ldr	r1, [sp, #16]
 8013592:	230a      	movs	r3, #10
 8013594:	4632      	mov	r2, r6
 8013596:	3101      	adds	r1, #1
 8013598:	4638      	mov	r0, r7
 801359a:	f000 ff6d 	bl	8014478 <_strtol_r>
 801359e:	9b03      	ldr	r3, [sp, #12]
 80135a0:	9d04      	ldr	r5, [sp, #16]
 80135a2:	1ac2      	subs	r2, r0, r3
 80135a4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80135a8:	429d      	cmp	r5, r3
 80135aa:	bf28      	it	cs
 80135ac:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80135b0:	490f      	ldr	r1, [pc, #60]	; (80135f0 <_scanf_float+0x3c0>)
 80135b2:	4628      	mov	r0, r5
 80135b4:	f000 f868 	bl	8013688 <siprintf>
 80135b8:	e7aa      	b.n	8013510 <_scanf_float+0x2e0>
 80135ba:	f015 0504 	ands.w	r5, r5, #4
 80135be:	d1b8      	bne.n	8013532 <_scanf_float+0x302>
 80135c0:	681f      	ldr	r7, [r3, #0]
 80135c2:	ee10 2a10 	vmov	r2, s0
 80135c6:	464b      	mov	r3, r9
 80135c8:	ee10 0a10 	vmov	r0, s0
 80135cc:	4649      	mov	r1, r9
 80135ce:	f7ed fabd 	bl	8000b4c <__aeabi_dcmpun>
 80135d2:	b128      	cbz	r0, 80135e0 <_scanf_float+0x3b0>
 80135d4:	4628      	mov	r0, r5
 80135d6:	f000 f81d 	bl	8013614 <nanf>
 80135da:	ed87 0a00 	vstr	s0, [r7]
 80135de:	e7ab      	b.n	8013538 <_scanf_float+0x308>
 80135e0:	4640      	mov	r0, r8
 80135e2:	4649      	mov	r1, r9
 80135e4:	f7ed fb10 	bl	8000c08 <__aeabi_d2f>
 80135e8:	6038      	str	r0, [r7, #0]
 80135ea:	e7a5      	b.n	8013538 <_scanf_float+0x308>
 80135ec:	2600      	movs	r6, #0
 80135ee:	e666      	b.n	80132be <_scanf_float+0x8e>
 80135f0:	080189d6 	.word	0x080189d6

080135f4 <_sbrk_r>:
 80135f4:	b538      	push	{r3, r4, r5, lr}
 80135f6:	4c06      	ldr	r4, [pc, #24]	; (8013610 <_sbrk_r+0x1c>)
 80135f8:	2300      	movs	r3, #0
 80135fa:	4605      	mov	r5, r0
 80135fc:	4608      	mov	r0, r1
 80135fe:	6023      	str	r3, [r4, #0]
 8013600:	f7f4 fa92 	bl	8007b28 <_sbrk>
 8013604:	1c43      	adds	r3, r0, #1
 8013606:	d102      	bne.n	801360e <_sbrk_r+0x1a>
 8013608:	6823      	ldr	r3, [r4, #0]
 801360a:	b103      	cbz	r3, 801360e <_sbrk_r+0x1a>
 801360c:	602b      	str	r3, [r5, #0]
 801360e:	bd38      	pop	{r3, r4, r5, pc}
 8013610:	20006b90 	.word	0x20006b90

08013614 <nanf>:
 8013614:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801361c <nanf+0x8>
 8013618:	4770      	bx	lr
 801361a:	bf00      	nop
 801361c:	7fc00000 	.word	0x7fc00000

08013620 <sniprintf>:
 8013620:	b40c      	push	{r2, r3}
 8013622:	b530      	push	{r4, r5, lr}
 8013624:	4b17      	ldr	r3, [pc, #92]	; (8013684 <sniprintf+0x64>)
 8013626:	1e0c      	subs	r4, r1, #0
 8013628:	b09d      	sub	sp, #116	; 0x74
 801362a:	681d      	ldr	r5, [r3, #0]
 801362c:	da08      	bge.n	8013640 <sniprintf+0x20>
 801362e:	238b      	movs	r3, #139	; 0x8b
 8013630:	602b      	str	r3, [r5, #0]
 8013632:	f04f 30ff 	mov.w	r0, #4294967295
 8013636:	b01d      	add	sp, #116	; 0x74
 8013638:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801363c:	b002      	add	sp, #8
 801363e:	4770      	bx	lr
 8013640:	f44f 7302 	mov.w	r3, #520	; 0x208
 8013644:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013648:	bf14      	ite	ne
 801364a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801364e:	4623      	moveq	r3, r4
 8013650:	9304      	str	r3, [sp, #16]
 8013652:	9307      	str	r3, [sp, #28]
 8013654:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013658:	9002      	str	r0, [sp, #8]
 801365a:	9006      	str	r0, [sp, #24]
 801365c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013660:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8013662:	ab21      	add	r3, sp, #132	; 0x84
 8013664:	a902      	add	r1, sp, #8
 8013666:	4628      	mov	r0, r5
 8013668:	9301      	str	r3, [sp, #4]
 801366a:	f002 fd21 	bl	80160b0 <_svfiprintf_r>
 801366e:	1c43      	adds	r3, r0, #1
 8013670:	bfbc      	itt	lt
 8013672:	238b      	movlt	r3, #139	; 0x8b
 8013674:	602b      	strlt	r3, [r5, #0]
 8013676:	2c00      	cmp	r4, #0
 8013678:	d0dd      	beq.n	8013636 <sniprintf+0x16>
 801367a:	9b02      	ldr	r3, [sp, #8]
 801367c:	2200      	movs	r2, #0
 801367e:	701a      	strb	r2, [r3, #0]
 8013680:	e7d9      	b.n	8013636 <sniprintf+0x16>
 8013682:	bf00      	nop
 8013684:	20000e34 	.word	0x20000e34

08013688 <siprintf>:
 8013688:	b40e      	push	{r1, r2, r3}
 801368a:	b500      	push	{lr}
 801368c:	b09c      	sub	sp, #112	; 0x70
 801368e:	ab1d      	add	r3, sp, #116	; 0x74
 8013690:	9002      	str	r0, [sp, #8]
 8013692:	9006      	str	r0, [sp, #24]
 8013694:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013698:	4809      	ldr	r0, [pc, #36]	; (80136c0 <siprintf+0x38>)
 801369a:	9107      	str	r1, [sp, #28]
 801369c:	9104      	str	r1, [sp, #16]
 801369e:	4909      	ldr	r1, [pc, #36]	; (80136c4 <siprintf+0x3c>)
 80136a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80136a4:	9105      	str	r1, [sp, #20]
 80136a6:	6800      	ldr	r0, [r0, #0]
 80136a8:	9301      	str	r3, [sp, #4]
 80136aa:	a902      	add	r1, sp, #8
 80136ac:	f002 fd00 	bl	80160b0 <_svfiprintf_r>
 80136b0:	9b02      	ldr	r3, [sp, #8]
 80136b2:	2200      	movs	r2, #0
 80136b4:	701a      	strb	r2, [r3, #0]
 80136b6:	b01c      	add	sp, #112	; 0x70
 80136b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80136bc:	b003      	add	sp, #12
 80136be:	4770      	bx	lr
 80136c0:	20000e34 	.word	0x20000e34
 80136c4:	ffff0208 	.word	0xffff0208

080136c8 <siscanf>:
 80136c8:	b40e      	push	{r1, r2, r3}
 80136ca:	b530      	push	{r4, r5, lr}
 80136cc:	b09c      	sub	sp, #112	; 0x70
 80136ce:	ac1f      	add	r4, sp, #124	; 0x7c
 80136d0:	f44f 7201 	mov.w	r2, #516	; 0x204
 80136d4:	f854 5b04 	ldr.w	r5, [r4], #4
 80136d8:	f8ad 2014 	strh.w	r2, [sp, #20]
 80136dc:	9002      	str	r0, [sp, #8]
 80136de:	9006      	str	r0, [sp, #24]
 80136e0:	f7ec fd80 	bl	80001e4 <strlen>
 80136e4:	4b0b      	ldr	r3, [pc, #44]	; (8013714 <siscanf+0x4c>)
 80136e6:	9003      	str	r0, [sp, #12]
 80136e8:	9007      	str	r0, [sp, #28]
 80136ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80136ec:	480a      	ldr	r0, [pc, #40]	; (8013718 <siscanf+0x50>)
 80136ee:	9401      	str	r4, [sp, #4]
 80136f0:	2300      	movs	r3, #0
 80136f2:	930f      	str	r3, [sp, #60]	; 0x3c
 80136f4:	9314      	str	r3, [sp, #80]	; 0x50
 80136f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80136fa:	f8ad 3016 	strh.w	r3, [sp, #22]
 80136fe:	462a      	mov	r2, r5
 8013700:	4623      	mov	r3, r4
 8013702:	a902      	add	r1, sp, #8
 8013704:	6800      	ldr	r0, [r0, #0]
 8013706:	f002 fe25 	bl	8016354 <__ssvfiscanf_r>
 801370a:	b01c      	add	sp, #112	; 0x70
 801370c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013710:	b003      	add	sp, #12
 8013712:	4770      	bx	lr
 8013714:	0801371d 	.word	0x0801371d
 8013718:	20000e34 	.word	0x20000e34

0801371c <__seofread>:
 801371c:	2000      	movs	r0, #0
 801371e:	4770      	bx	lr

08013720 <strcat>:
 8013720:	b510      	push	{r4, lr}
 8013722:	4603      	mov	r3, r0
 8013724:	781a      	ldrb	r2, [r3, #0]
 8013726:	1c5c      	adds	r4, r3, #1
 8013728:	b93a      	cbnz	r2, 801373a <strcat+0x1a>
 801372a:	3b01      	subs	r3, #1
 801372c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013730:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013734:	2a00      	cmp	r2, #0
 8013736:	d1f9      	bne.n	801372c <strcat+0xc>
 8013738:	bd10      	pop	{r4, pc}
 801373a:	4623      	mov	r3, r4
 801373c:	e7f2      	b.n	8013724 <strcat+0x4>

0801373e <sulp>:
 801373e:	b570      	push	{r4, r5, r6, lr}
 8013740:	4604      	mov	r4, r0
 8013742:	460d      	mov	r5, r1
 8013744:	ec45 4b10 	vmov	d0, r4, r5
 8013748:	4616      	mov	r6, r2
 801374a:	f002 fb15 	bl	8015d78 <__ulp>
 801374e:	ec51 0b10 	vmov	r0, r1, d0
 8013752:	b17e      	cbz	r6, 8013774 <sulp+0x36>
 8013754:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8013758:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801375c:	2b00      	cmp	r3, #0
 801375e:	dd09      	ble.n	8013774 <sulp+0x36>
 8013760:	051b      	lsls	r3, r3, #20
 8013762:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8013766:	2400      	movs	r4, #0
 8013768:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801376c:	4622      	mov	r2, r4
 801376e:	462b      	mov	r3, r5
 8013770:	f7ec ff52 	bl	8000618 <__aeabi_dmul>
 8013774:	bd70      	pop	{r4, r5, r6, pc}
	...

08013778 <_strtod_l>:
 8013778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801377c:	461f      	mov	r7, r3
 801377e:	b0a1      	sub	sp, #132	; 0x84
 8013780:	2300      	movs	r3, #0
 8013782:	4681      	mov	r9, r0
 8013784:	4638      	mov	r0, r7
 8013786:	460e      	mov	r6, r1
 8013788:	9217      	str	r2, [sp, #92]	; 0x5c
 801378a:	931c      	str	r3, [sp, #112]	; 0x70
 801378c:	f002 f804 	bl	8015798 <__localeconv_l>
 8013790:	4680      	mov	r8, r0
 8013792:	6800      	ldr	r0, [r0, #0]
 8013794:	f7ec fd26 	bl	80001e4 <strlen>
 8013798:	f04f 0a00 	mov.w	sl, #0
 801379c:	4604      	mov	r4, r0
 801379e:	f04f 0b00 	mov.w	fp, #0
 80137a2:	961b      	str	r6, [sp, #108]	; 0x6c
 80137a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80137a6:	781a      	ldrb	r2, [r3, #0]
 80137a8:	2a0d      	cmp	r2, #13
 80137aa:	d832      	bhi.n	8013812 <_strtod_l+0x9a>
 80137ac:	2a09      	cmp	r2, #9
 80137ae:	d236      	bcs.n	801381e <_strtod_l+0xa6>
 80137b0:	2a00      	cmp	r2, #0
 80137b2:	d03e      	beq.n	8013832 <_strtod_l+0xba>
 80137b4:	2300      	movs	r3, #0
 80137b6:	930d      	str	r3, [sp, #52]	; 0x34
 80137b8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80137ba:	782b      	ldrb	r3, [r5, #0]
 80137bc:	2b30      	cmp	r3, #48	; 0x30
 80137be:	f040 80ac 	bne.w	801391a <_strtod_l+0x1a2>
 80137c2:	786b      	ldrb	r3, [r5, #1]
 80137c4:	2b58      	cmp	r3, #88	; 0x58
 80137c6:	d001      	beq.n	80137cc <_strtod_l+0x54>
 80137c8:	2b78      	cmp	r3, #120	; 0x78
 80137ca:	d167      	bne.n	801389c <_strtod_l+0x124>
 80137cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80137ce:	9301      	str	r3, [sp, #4]
 80137d0:	ab1c      	add	r3, sp, #112	; 0x70
 80137d2:	9300      	str	r3, [sp, #0]
 80137d4:	9702      	str	r7, [sp, #8]
 80137d6:	ab1d      	add	r3, sp, #116	; 0x74
 80137d8:	4a88      	ldr	r2, [pc, #544]	; (80139fc <_strtod_l+0x284>)
 80137da:	a91b      	add	r1, sp, #108	; 0x6c
 80137dc:	4648      	mov	r0, r9
 80137de:	f001 fcf2 	bl	80151c6 <__gethex>
 80137e2:	f010 0407 	ands.w	r4, r0, #7
 80137e6:	4606      	mov	r6, r0
 80137e8:	d005      	beq.n	80137f6 <_strtod_l+0x7e>
 80137ea:	2c06      	cmp	r4, #6
 80137ec:	d12b      	bne.n	8013846 <_strtod_l+0xce>
 80137ee:	3501      	adds	r5, #1
 80137f0:	2300      	movs	r3, #0
 80137f2:	951b      	str	r5, [sp, #108]	; 0x6c
 80137f4:	930d      	str	r3, [sp, #52]	; 0x34
 80137f6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	f040 859a 	bne.w	8014332 <_strtod_l+0xbba>
 80137fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013800:	b1e3      	cbz	r3, 801383c <_strtod_l+0xc4>
 8013802:	4652      	mov	r2, sl
 8013804:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8013808:	ec43 2b10 	vmov	d0, r2, r3
 801380c:	b021      	add	sp, #132	; 0x84
 801380e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013812:	2a2b      	cmp	r2, #43	; 0x2b
 8013814:	d015      	beq.n	8013842 <_strtod_l+0xca>
 8013816:	2a2d      	cmp	r2, #45	; 0x2d
 8013818:	d004      	beq.n	8013824 <_strtod_l+0xac>
 801381a:	2a20      	cmp	r2, #32
 801381c:	d1ca      	bne.n	80137b4 <_strtod_l+0x3c>
 801381e:	3301      	adds	r3, #1
 8013820:	931b      	str	r3, [sp, #108]	; 0x6c
 8013822:	e7bf      	b.n	80137a4 <_strtod_l+0x2c>
 8013824:	2201      	movs	r2, #1
 8013826:	920d      	str	r2, [sp, #52]	; 0x34
 8013828:	1c5a      	adds	r2, r3, #1
 801382a:	921b      	str	r2, [sp, #108]	; 0x6c
 801382c:	785b      	ldrb	r3, [r3, #1]
 801382e:	2b00      	cmp	r3, #0
 8013830:	d1c2      	bne.n	80137b8 <_strtod_l+0x40>
 8013832:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013834:	961b      	str	r6, [sp, #108]	; 0x6c
 8013836:	2b00      	cmp	r3, #0
 8013838:	f040 8579 	bne.w	801432e <_strtod_l+0xbb6>
 801383c:	4652      	mov	r2, sl
 801383e:	465b      	mov	r3, fp
 8013840:	e7e2      	b.n	8013808 <_strtod_l+0x90>
 8013842:	2200      	movs	r2, #0
 8013844:	e7ef      	b.n	8013826 <_strtod_l+0xae>
 8013846:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013848:	b13a      	cbz	r2, 801385a <_strtod_l+0xe2>
 801384a:	2135      	movs	r1, #53	; 0x35
 801384c:	a81e      	add	r0, sp, #120	; 0x78
 801384e:	f002 fb8b 	bl	8015f68 <__copybits>
 8013852:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013854:	4648      	mov	r0, r9
 8013856:	f001 fff7 	bl	8015848 <_Bfree>
 801385a:	3c01      	subs	r4, #1
 801385c:	2c04      	cmp	r4, #4
 801385e:	d806      	bhi.n	801386e <_strtod_l+0xf6>
 8013860:	e8df f004 	tbb	[pc, r4]
 8013864:	1714030a 	.word	0x1714030a
 8013868:	0a          	.byte	0x0a
 8013869:	00          	.byte	0x00
 801386a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 801386e:	0730      	lsls	r0, r6, #28
 8013870:	d5c1      	bpl.n	80137f6 <_strtod_l+0x7e>
 8013872:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8013876:	e7be      	b.n	80137f6 <_strtod_l+0x7e>
 8013878:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 801387c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801387e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8013882:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8013886:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801388a:	e7f0      	b.n	801386e <_strtod_l+0xf6>
 801388c:	f8df b170 	ldr.w	fp, [pc, #368]	; 8013a00 <_strtod_l+0x288>
 8013890:	e7ed      	b.n	801386e <_strtod_l+0xf6>
 8013892:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8013896:	f04f 3aff 	mov.w	sl, #4294967295
 801389a:	e7e8      	b.n	801386e <_strtod_l+0xf6>
 801389c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801389e:	1c5a      	adds	r2, r3, #1
 80138a0:	921b      	str	r2, [sp, #108]	; 0x6c
 80138a2:	785b      	ldrb	r3, [r3, #1]
 80138a4:	2b30      	cmp	r3, #48	; 0x30
 80138a6:	d0f9      	beq.n	801389c <_strtod_l+0x124>
 80138a8:	2b00      	cmp	r3, #0
 80138aa:	d0a4      	beq.n	80137f6 <_strtod_l+0x7e>
 80138ac:	2301      	movs	r3, #1
 80138ae:	2500      	movs	r5, #0
 80138b0:	9306      	str	r3, [sp, #24]
 80138b2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80138b4:	9308      	str	r3, [sp, #32]
 80138b6:	9507      	str	r5, [sp, #28]
 80138b8:	9505      	str	r5, [sp, #20]
 80138ba:	220a      	movs	r2, #10
 80138bc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80138be:	7807      	ldrb	r7, [r0, #0]
 80138c0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80138c4:	b2d9      	uxtb	r1, r3
 80138c6:	2909      	cmp	r1, #9
 80138c8:	d929      	bls.n	801391e <_strtod_l+0x1a6>
 80138ca:	4622      	mov	r2, r4
 80138cc:	f8d8 1000 	ldr.w	r1, [r8]
 80138d0:	f003 f81a 	bl	8016908 <strncmp>
 80138d4:	2800      	cmp	r0, #0
 80138d6:	d031      	beq.n	801393c <_strtod_l+0x1c4>
 80138d8:	2000      	movs	r0, #0
 80138da:	9c05      	ldr	r4, [sp, #20]
 80138dc:	9004      	str	r0, [sp, #16]
 80138de:	463b      	mov	r3, r7
 80138e0:	4602      	mov	r2, r0
 80138e2:	2b65      	cmp	r3, #101	; 0x65
 80138e4:	d001      	beq.n	80138ea <_strtod_l+0x172>
 80138e6:	2b45      	cmp	r3, #69	; 0x45
 80138e8:	d114      	bne.n	8013914 <_strtod_l+0x19c>
 80138ea:	b924      	cbnz	r4, 80138f6 <_strtod_l+0x17e>
 80138ec:	b910      	cbnz	r0, 80138f4 <_strtod_l+0x17c>
 80138ee:	9b06      	ldr	r3, [sp, #24]
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	d09e      	beq.n	8013832 <_strtod_l+0xba>
 80138f4:	2400      	movs	r4, #0
 80138f6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80138f8:	1c73      	adds	r3, r6, #1
 80138fa:	931b      	str	r3, [sp, #108]	; 0x6c
 80138fc:	7873      	ldrb	r3, [r6, #1]
 80138fe:	2b2b      	cmp	r3, #43	; 0x2b
 8013900:	d078      	beq.n	80139f4 <_strtod_l+0x27c>
 8013902:	2b2d      	cmp	r3, #45	; 0x2d
 8013904:	d070      	beq.n	80139e8 <_strtod_l+0x270>
 8013906:	f04f 0c00 	mov.w	ip, #0
 801390a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 801390e:	2f09      	cmp	r7, #9
 8013910:	d97c      	bls.n	8013a0c <_strtod_l+0x294>
 8013912:	961b      	str	r6, [sp, #108]	; 0x6c
 8013914:	f04f 0e00 	mov.w	lr, #0
 8013918:	e09a      	b.n	8013a50 <_strtod_l+0x2d8>
 801391a:	2300      	movs	r3, #0
 801391c:	e7c7      	b.n	80138ae <_strtod_l+0x136>
 801391e:	9905      	ldr	r1, [sp, #20]
 8013920:	2908      	cmp	r1, #8
 8013922:	bfdd      	ittte	le
 8013924:	9907      	ldrle	r1, [sp, #28]
 8013926:	fb02 3301 	mlale	r3, r2, r1, r3
 801392a:	9307      	strle	r3, [sp, #28]
 801392c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8013930:	9b05      	ldr	r3, [sp, #20]
 8013932:	3001      	adds	r0, #1
 8013934:	3301      	adds	r3, #1
 8013936:	9305      	str	r3, [sp, #20]
 8013938:	901b      	str	r0, [sp, #108]	; 0x6c
 801393a:	e7bf      	b.n	80138bc <_strtod_l+0x144>
 801393c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801393e:	191a      	adds	r2, r3, r4
 8013940:	921b      	str	r2, [sp, #108]	; 0x6c
 8013942:	9a05      	ldr	r2, [sp, #20]
 8013944:	5d1b      	ldrb	r3, [r3, r4]
 8013946:	2a00      	cmp	r2, #0
 8013948:	d037      	beq.n	80139ba <_strtod_l+0x242>
 801394a:	9c05      	ldr	r4, [sp, #20]
 801394c:	4602      	mov	r2, r0
 801394e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8013952:	2909      	cmp	r1, #9
 8013954:	d913      	bls.n	801397e <_strtod_l+0x206>
 8013956:	2101      	movs	r1, #1
 8013958:	9104      	str	r1, [sp, #16]
 801395a:	e7c2      	b.n	80138e2 <_strtod_l+0x16a>
 801395c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801395e:	1c5a      	adds	r2, r3, #1
 8013960:	921b      	str	r2, [sp, #108]	; 0x6c
 8013962:	785b      	ldrb	r3, [r3, #1]
 8013964:	3001      	adds	r0, #1
 8013966:	2b30      	cmp	r3, #48	; 0x30
 8013968:	d0f8      	beq.n	801395c <_strtod_l+0x1e4>
 801396a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801396e:	2a08      	cmp	r2, #8
 8013970:	f200 84e4 	bhi.w	801433c <_strtod_l+0xbc4>
 8013974:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8013976:	9208      	str	r2, [sp, #32]
 8013978:	4602      	mov	r2, r0
 801397a:	2000      	movs	r0, #0
 801397c:	4604      	mov	r4, r0
 801397e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8013982:	f100 0101 	add.w	r1, r0, #1
 8013986:	d012      	beq.n	80139ae <_strtod_l+0x236>
 8013988:	440a      	add	r2, r1
 801398a:	eb00 0c04 	add.w	ip, r0, r4
 801398e:	4621      	mov	r1, r4
 8013990:	270a      	movs	r7, #10
 8013992:	458c      	cmp	ip, r1
 8013994:	d113      	bne.n	80139be <_strtod_l+0x246>
 8013996:	1821      	adds	r1, r4, r0
 8013998:	2908      	cmp	r1, #8
 801399a:	f104 0401 	add.w	r4, r4, #1
 801399e:	4404      	add	r4, r0
 80139a0:	dc19      	bgt.n	80139d6 <_strtod_l+0x25e>
 80139a2:	9b07      	ldr	r3, [sp, #28]
 80139a4:	210a      	movs	r1, #10
 80139a6:	fb01 e303 	mla	r3, r1, r3, lr
 80139aa:	9307      	str	r3, [sp, #28]
 80139ac:	2100      	movs	r1, #0
 80139ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80139b0:	1c58      	adds	r0, r3, #1
 80139b2:	901b      	str	r0, [sp, #108]	; 0x6c
 80139b4:	785b      	ldrb	r3, [r3, #1]
 80139b6:	4608      	mov	r0, r1
 80139b8:	e7c9      	b.n	801394e <_strtod_l+0x1d6>
 80139ba:	9805      	ldr	r0, [sp, #20]
 80139bc:	e7d3      	b.n	8013966 <_strtod_l+0x1ee>
 80139be:	2908      	cmp	r1, #8
 80139c0:	f101 0101 	add.w	r1, r1, #1
 80139c4:	dc03      	bgt.n	80139ce <_strtod_l+0x256>
 80139c6:	9b07      	ldr	r3, [sp, #28]
 80139c8:	437b      	muls	r3, r7
 80139ca:	9307      	str	r3, [sp, #28]
 80139cc:	e7e1      	b.n	8013992 <_strtod_l+0x21a>
 80139ce:	2910      	cmp	r1, #16
 80139d0:	bfd8      	it	le
 80139d2:	437d      	mulle	r5, r7
 80139d4:	e7dd      	b.n	8013992 <_strtod_l+0x21a>
 80139d6:	2c10      	cmp	r4, #16
 80139d8:	bfdc      	itt	le
 80139da:	210a      	movle	r1, #10
 80139dc:	fb01 e505 	mlale	r5, r1, r5, lr
 80139e0:	e7e4      	b.n	80139ac <_strtod_l+0x234>
 80139e2:	2301      	movs	r3, #1
 80139e4:	9304      	str	r3, [sp, #16]
 80139e6:	e781      	b.n	80138ec <_strtod_l+0x174>
 80139e8:	f04f 0c01 	mov.w	ip, #1
 80139ec:	1cb3      	adds	r3, r6, #2
 80139ee:	931b      	str	r3, [sp, #108]	; 0x6c
 80139f0:	78b3      	ldrb	r3, [r6, #2]
 80139f2:	e78a      	b.n	801390a <_strtod_l+0x192>
 80139f4:	f04f 0c00 	mov.w	ip, #0
 80139f8:	e7f8      	b.n	80139ec <_strtod_l+0x274>
 80139fa:	bf00      	nop
 80139fc:	080189dc 	.word	0x080189dc
 8013a00:	7ff00000 	.word	0x7ff00000
 8013a04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013a06:	1c5f      	adds	r7, r3, #1
 8013a08:	971b      	str	r7, [sp, #108]	; 0x6c
 8013a0a:	785b      	ldrb	r3, [r3, #1]
 8013a0c:	2b30      	cmp	r3, #48	; 0x30
 8013a0e:	d0f9      	beq.n	8013a04 <_strtod_l+0x28c>
 8013a10:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8013a14:	2f08      	cmp	r7, #8
 8013a16:	f63f af7d 	bhi.w	8013914 <_strtod_l+0x19c>
 8013a1a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8013a1e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013a20:	930a      	str	r3, [sp, #40]	; 0x28
 8013a22:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013a24:	1c5f      	adds	r7, r3, #1
 8013a26:	971b      	str	r7, [sp, #108]	; 0x6c
 8013a28:	785b      	ldrb	r3, [r3, #1]
 8013a2a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8013a2e:	f1b8 0f09 	cmp.w	r8, #9
 8013a32:	d937      	bls.n	8013aa4 <_strtod_l+0x32c>
 8013a34:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013a36:	1a7f      	subs	r7, r7, r1
 8013a38:	2f08      	cmp	r7, #8
 8013a3a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8013a3e:	dc37      	bgt.n	8013ab0 <_strtod_l+0x338>
 8013a40:	45be      	cmp	lr, r7
 8013a42:	bfa8      	it	ge
 8013a44:	46be      	movge	lr, r7
 8013a46:	f1bc 0f00 	cmp.w	ip, #0
 8013a4a:	d001      	beq.n	8013a50 <_strtod_l+0x2d8>
 8013a4c:	f1ce 0e00 	rsb	lr, lr, #0
 8013a50:	2c00      	cmp	r4, #0
 8013a52:	d151      	bne.n	8013af8 <_strtod_l+0x380>
 8013a54:	2800      	cmp	r0, #0
 8013a56:	f47f aece 	bne.w	80137f6 <_strtod_l+0x7e>
 8013a5a:	9a06      	ldr	r2, [sp, #24]
 8013a5c:	2a00      	cmp	r2, #0
 8013a5e:	f47f aeca 	bne.w	80137f6 <_strtod_l+0x7e>
 8013a62:	9a04      	ldr	r2, [sp, #16]
 8013a64:	2a00      	cmp	r2, #0
 8013a66:	f47f aee4 	bne.w	8013832 <_strtod_l+0xba>
 8013a6a:	2b4e      	cmp	r3, #78	; 0x4e
 8013a6c:	d027      	beq.n	8013abe <_strtod_l+0x346>
 8013a6e:	dc21      	bgt.n	8013ab4 <_strtod_l+0x33c>
 8013a70:	2b49      	cmp	r3, #73	; 0x49
 8013a72:	f47f aede 	bne.w	8013832 <_strtod_l+0xba>
 8013a76:	49a0      	ldr	r1, [pc, #640]	; (8013cf8 <_strtod_l+0x580>)
 8013a78:	a81b      	add	r0, sp, #108	; 0x6c
 8013a7a:	f001 fdd7 	bl	801562c <__match>
 8013a7e:	2800      	cmp	r0, #0
 8013a80:	f43f aed7 	beq.w	8013832 <_strtod_l+0xba>
 8013a84:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013a86:	499d      	ldr	r1, [pc, #628]	; (8013cfc <_strtod_l+0x584>)
 8013a88:	3b01      	subs	r3, #1
 8013a8a:	a81b      	add	r0, sp, #108	; 0x6c
 8013a8c:	931b      	str	r3, [sp, #108]	; 0x6c
 8013a8e:	f001 fdcd 	bl	801562c <__match>
 8013a92:	b910      	cbnz	r0, 8013a9a <_strtod_l+0x322>
 8013a94:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013a96:	3301      	adds	r3, #1
 8013a98:	931b      	str	r3, [sp, #108]	; 0x6c
 8013a9a:	f8df b274 	ldr.w	fp, [pc, #628]	; 8013d10 <_strtod_l+0x598>
 8013a9e:	f04f 0a00 	mov.w	sl, #0
 8013aa2:	e6a8      	b.n	80137f6 <_strtod_l+0x7e>
 8013aa4:	210a      	movs	r1, #10
 8013aa6:	fb01 3e0e 	mla	lr, r1, lr, r3
 8013aaa:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8013aae:	e7b8      	b.n	8013a22 <_strtod_l+0x2aa>
 8013ab0:	46be      	mov	lr, r7
 8013ab2:	e7c8      	b.n	8013a46 <_strtod_l+0x2ce>
 8013ab4:	2b69      	cmp	r3, #105	; 0x69
 8013ab6:	d0de      	beq.n	8013a76 <_strtod_l+0x2fe>
 8013ab8:	2b6e      	cmp	r3, #110	; 0x6e
 8013aba:	f47f aeba 	bne.w	8013832 <_strtod_l+0xba>
 8013abe:	4990      	ldr	r1, [pc, #576]	; (8013d00 <_strtod_l+0x588>)
 8013ac0:	a81b      	add	r0, sp, #108	; 0x6c
 8013ac2:	f001 fdb3 	bl	801562c <__match>
 8013ac6:	2800      	cmp	r0, #0
 8013ac8:	f43f aeb3 	beq.w	8013832 <_strtod_l+0xba>
 8013acc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013ace:	781b      	ldrb	r3, [r3, #0]
 8013ad0:	2b28      	cmp	r3, #40	; 0x28
 8013ad2:	d10e      	bne.n	8013af2 <_strtod_l+0x37a>
 8013ad4:	aa1e      	add	r2, sp, #120	; 0x78
 8013ad6:	498b      	ldr	r1, [pc, #556]	; (8013d04 <_strtod_l+0x58c>)
 8013ad8:	a81b      	add	r0, sp, #108	; 0x6c
 8013ada:	f001 fdbb 	bl	8015654 <__hexnan>
 8013ade:	2805      	cmp	r0, #5
 8013ae0:	d107      	bne.n	8013af2 <_strtod_l+0x37a>
 8013ae2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013ae4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8013ae8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8013aec:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8013af0:	e681      	b.n	80137f6 <_strtod_l+0x7e>
 8013af2:	f8df b224 	ldr.w	fp, [pc, #548]	; 8013d18 <_strtod_l+0x5a0>
 8013af6:	e7d2      	b.n	8013a9e <_strtod_l+0x326>
 8013af8:	ebae 0302 	sub.w	r3, lr, r2
 8013afc:	9306      	str	r3, [sp, #24]
 8013afe:	9b05      	ldr	r3, [sp, #20]
 8013b00:	9807      	ldr	r0, [sp, #28]
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	bf08      	it	eq
 8013b06:	4623      	moveq	r3, r4
 8013b08:	2c10      	cmp	r4, #16
 8013b0a:	9305      	str	r3, [sp, #20]
 8013b0c:	46a0      	mov	r8, r4
 8013b0e:	bfa8      	it	ge
 8013b10:	f04f 0810 	movge.w	r8, #16
 8013b14:	f7ec fd06 	bl	8000524 <__aeabi_ui2d>
 8013b18:	2c09      	cmp	r4, #9
 8013b1a:	4682      	mov	sl, r0
 8013b1c:	468b      	mov	fp, r1
 8013b1e:	dc13      	bgt.n	8013b48 <_strtod_l+0x3d0>
 8013b20:	9b06      	ldr	r3, [sp, #24]
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	f43f ae67 	beq.w	80137f6 <_strtod_l+0x7e>
 8013b28:	9b06      	ldr	r3, [sp, #24]
 8013b2a:	dd7a      	ble.n	8013c22 <_strtod_l+0x4aa>
 8013b2c:	2b16      	cmp	r3, #22
 8013b2e:	dc61      	bgt.n	8013bf4 <_strtod_l+0x47c>
 8013b30:	4a75      	ldr	r2, [pc, #468]	; (8013d08 <_strtod_l+0x590>)
 8013b32:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8013b36:	e9de 0100 	ldrd	r0, r1, [lr]
 8013b3a:	4652      	mov	r2, sl
 8013b3c:	465b      	mov	r3, fp
 8013b3e:	f7ec fd6b 	bl	8000618 <__aeabi_dmul>
 8013b42:	4682      	mov	sl, r0
 8013b44:	468b      	mov	fp, r1
 8013b46:	e656      	b.n	80137f6 <_strtod_l+0x7e>
 8013b48:	4b6f      	ldr	r3, [pc, #444]	; (8013d08 <_strtod_l+0x590>)
 8013b4a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8013b4e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8013b52:	f7ec fd61 	bl	8000618 <__aeabi_dmul>
 8013b56:	4606      	mov	r6, r0
 8013b58:	4628      	mov	r0, r5
 8013b5a:	460f      	mov	r7, r1
 8013b5c:	f7ec fce2 	bl	8000524 <__aeabi_ui2d>
 8013b60:	4602      	mov	r2, r0
 8013b62:	460b      	mov	r3, r1
 8013b64:	4630      	mov	r0, r6
 8013b66:	4639      	mov	r1, r7
 8013b68:	f7ec fba0 	bl	80002ac <__adddf3>
 8013b6c:	2c0f      	cmp	r4, #15
 8013b6e:	4682      	mov	sl, r0
 8013b70:	468b      	mov	fp, r1
 8013b72:	ddd5      	ble.n	8013b20 <_strtod_l+0x3a8>
 8013b74:	9b06      	ldr	r3, [sp, #24]
 8013b76:	eba4 0808 	sub.w	r8, r4, r8
 8013b7a:	4498      	add	r8, r3
 8013b7c:	f1b8 0f00 	cmp.w	r8, #0
 8013b80:	f340 8096 	ble.w	8013cb0 <_strtod_l+0x538>
 8013b84:	f018 030f 	ands.w	r3, r8, #15
 8013b88:	d00a      	beq.n	8013ba0 <_strtod_l+0x428>
 8013b8a:	495f      	ldr	r1, [pc, #380]	; (8013d08 <_strtod_l+0x590>)
 8013b8c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013b90:	4652      	mov	r2, sl
 8013b92:	465b      	mov	r3, fp
 8013b94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013b98:	f7ec fd3e 	bl	8000618 <__aeabi_dmul>
 8013b9c:	4682      	mov	sl, r0
 8013b9e:	468b      	mov	fp, r1
 8013ba0:	f038 080f 	bics.w	r8, r8, #15
 8013ba4:	d073      	beq.n	8013c8e <_strtod_l+0x516>
 8013ba6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8013baa:	dd47      	ble.n	8013c3c <_strtod_l+0x4c4>
 8013bac:	2400      	movs	r4, #0
 8013bae:	46a0      	mov	r8, r4
 8013bb0:	9407      	str	r4, [sp, #28]
 8013bb2:	9405      	str	r4, [sp, #20]
 8013bb4:	2322      	movs	r3, #34	; 0x22
 8013bb6:	f8df b158 	ldr.w	fp, [pc, #344]	; 8013d10 <_strtod_l+0x598>
 8013bba:	f8c9 3000 	str.w	r3, [r9]
 8013bbe:	f04f 0a00 	mov.w	sl, #0
 8013bc2:	9b07      	ldr	r3, [sp, #28]
 8013bc4:	2b00      	cmp	r3, #0
 8013bc6:	f43f ae16 	beq.w	80137f6 <_strtod_l+0x7e>
 8013bca:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013bcc:	4648      	mov	r0, r9
 8013bce:	f001 fe3b 	bl	8015848 <_Bfree>
 8013bd2:	9905      	ldr	r1, [sp, #20]
 8013bd4:	4648      	mov	r0, r9
 8013bd6:	f001 fe37 	bl	8015848 <_Bfree>
 8013bda:	4641      	mov	r1, r8
 8013bdc:	4648      	mov	r0, r9
 8013bde:	f001 fe33 	bl	8015848 <_Bfree>
 8013be2:	9907      	ldr	r1, [sp, #28]
 8013be4:	4648      	mov	r0, r9
 8013be6:	f001 fe2f 	bl	8015848 <_Bfree>
 8013bea:	4621      	mov	r1, r4
 8013bec:	4648      	mov	r0, r9
 8013bee:	f001 fe2b 	bl	8015848 <_Bfree>
 8013bf2:	e600      	b.n	80137f6 <_strtod_l+0x7e>
 8013bf4:	9a06      	ldr	r2, [sp, #24]
 8013bf6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8013bfa:	4293      	cmp	r3, r2
 8013bfc:	dbba      	blt.n	8013b74 <_strtod_l+0x3fc>
 8013bfe:	4d42      	ldr	r5, [pc, #264]	; (8013d08 <_strtod_l+0x590>)
 8013c00:	f1c4 040f 	rsb	r4, r4, #15
 8013c04:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8013c08:	4652      	mov	r2, sl
 8013c0a:	465b      	mov	r3, fp
 8013c0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013c10:	f7ec fd02 	bl	8000618 <__aeabi_dmul>
 8013c14:	9b06      	ldr	r3, [sp, #24]
 8013c16:	1b1c      	subs	r4, r3, r4
 8013c18:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8013c1c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013c20:	e78d      	b.n	8013b3e <_strtod_l+0x3c6>
 8013c22:	f113 0f16 	cmn.w	r3, #22
 8013c26:	dba5      	blt.n	8013b74 <_strtod_l+0x3fc>
 8013c28:	4a37      	ldr	r2, [pc, #220]	; (8013d08 <_strtod_l+0x590>)
 8013c2a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8013c2e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8013c32:	4650      	mov	r0, sl
 8013c34:	4659      	mov	r1, fp
 8013c36:	f7ec fe19 	bl	800086c <__aeabi_ddiv>
 8013c3a:	e782      	b.n	8013b42 <_strtod_l+0x3ca>
 8013c3c:	2300      	movs	r3, #0
 8013c3e:	4e33      	ldr	r6, [pc, #204]	; (8013d0c <_strtod_l+0x594>)
 8013c40:	ea4f 1828 	mov.w	r8, r8, asr #4
 8013c44:	4650      	mov	r0, sl
 8013c46:	4659      	mov	r1, fp
 8013c48:	461d      	mov	r5, r3
 8013c4a:	f1b8 0f01 	cmp.w	r8, #1
 8013c4e:	dc21      	bgt.n	8013c94 <_strtod_l+0x51c>
 8013c50:	b10b      	cbz	r3, 8013c56 <_strtod_l+0x4de>
 8013c52:	4682      	mov	sl, r0
 8013c54:	468b      	mov	fp, r1
 8013c56:	4b2d      	ldr	r3, [pc, #180]	; (8013d0c <_strtod_l+0x594>)
 8013c58:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8013c5c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8013c60:	4652      	mov	r2, sl
 8013c62:	465b      	mov	r3, fp
 8013c64:	e9d5 0100 	ldrd	r0, r1, [r5]
 8013c68:	f7ec fcd6 	bl	8000618 <__aeabi_dmul>
 8013c6c:	4b28      	ldr	r3, [pc, #160]	; (8013d10 <_strtod_l+0x598>)
 8013c6e:	460a      	mov	r2, r1
 8013c70:	400b      	ands	r3, r1
 8013c72:	4928      	ldr	r1, [pc, #160]	; (8013d14 <_strtod_l+0x59c>)
 8013c74:	428b      	cmp	r3, r1
 8013c76:	4682      	mov	sl, r0
 8013c78:	d898      	bhi.n	8013bac <_strtod_l+0x434>
 8013c7a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8013c7e:	428b      	cmp	r3, r1
 8013c80:	bf86      	itte	hi
 8013c82:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8013d1c <_strtod_l+0x5a4>
 8013c86:	f04f 3aff 	movhi.w	sl, #4294967295
 8013c8a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8013c8e:	2300      	movs	r3, #0
 8013c90:	9304      	str	r3, [sp, #16]
 8013c92:	e077      	b.n	8013d84 <_strtod_l+0x60c>
 8013c94:	f018 0f01 	tst.w	r8, #1
 8013c98:	d006      	beq.n	8013ca8 <_strtod_l+0x530>
 8013c9a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8013c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ca2:	f7ec fcb9 	bl	8000618 <__aeabi_dmul>
 8013ca6:	2301      	movs	r3, #1
 8013ca8:	3501      	adds	r5, #1
 8013caa:	ea4f 0868 	mov.w	r8, r8, asr #1
 8013cae:	e7cc      	b.n	8013c4a <_strtod_l+0x4d2>
 8013cb0:	d0ed      	beq.n	8013c8e <_strtod_l+0x516>
 8013cb2:	f1c8 0800 	rsb	r8, r8, #0
 8013cb6:	f018 020f 	ands.w	r2, r8, #15
 8013cba:	d00a      	beq.n	8013cd2 <_strtod_l+0x55a>
 8013cbc:	4b12      	ldr	r3, [pc, #72]	; (8013d08 <_strtod_l+0x590>)
 8013cbe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013cc2:	4650      	mov	r0, sl
 8013cc4:	4659      	mov	r1, fp
 8013cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cca:	f7ec fdcf 	bl	800086c <__aeabi_ddiv>
 8013cce:	4682      	mov	sl, r0
 8013cd0:	468b      	mov	fp, r1
 8013cd2:	ea5f 1828 	movs.w	r8, r8, asr #4
 8013cd6:	d0da      	beq.n	8013c8e <_strtod_l+0x516>
 8013cd8:	f1b8 0f1f 	cmp.w	r8, #31
 8013cdc:	dd20      	ble.n	8013d20 <_strtod_l+0x5a8>
 8013cde:	2400      	movs	r4, #0
 8013ce0:	46a0      	mov	r8, r4
 8013ce2:	9407      	str	r4, [sp, #28]
 8013ce4:	9405      	str	r4, [sp, #20]
 8013ce6:	2322      	movs	r3, #34	; 0x22
 8013ce8:	f04f 0a00 	mov.w	sl, #0
 8013cec:	f04f 0b00 	mov.w	fp, #0
 8013cf0:	f8c9 3000 	str.w	r3, [r9]
 8013cf4:	e765      	b.n	8013bc2 <_strtod_l+0x44a>
 8013cf6:	bf00      	nop
 8013cf8:	080189a9 	.word	0x080189a9
 8013cfc:	08018a33 	.word	0x08018a33
 8013d00:	080189b1 	.word	0x080189b1
 8013d04:	080189f0 	.word	0x080189f0
 8013d08:	08018a70 	.word	0x08018a70
 8013d0c:	08018a48 	.word	0x08018a48
 8013d10:	7ff00000 	.word	0x7ff00000
 8013d14:	7ca00000 	.word	0x7ca00000
 8013d18:	fff80000 	.word	0xfff80000
 8013d1c:	7fefffff 	.word	0x7fefffff
 8013d20:	f018 0310 	ands.w	r3, r8, #16
 8013d24:	bf18      	it	ne
 8013d26:	236a      	movne	r3, #106	; 0x6a
 8013d28:	4da0      	ldr	r5, [pc, #640]	; (8013fac <_strtod_l+0x834>)
 8013d2a:	9304      	str	r3, [sp, #16]
 8013d2c:	4650      	mov	r0, sl
 8013d2e:	4659      	mov	r1, fp
 8013d30:	2300      	movs	r3, #0
 8013d32:	f1b8 0f00 	cmp.w	r8, #0
 8013d36:	f300 810a 	bgt.w	8013f4e <_strtod_l+0x7d6>
 8013d3a:	b10b      	cbz	r3, 8013d40 <_strtod_l+0x5c8>
 8013d3c:	4682      	mov	sl, r0
 8013d3e:	468b      	mov	fp, r1
 8013d40:	9b04      	ldr	r3, [sp, #16]
 8013d42:	b1bb      	cbz	r3, 8013d74 <_strtod_l+0x5fc>
 8013d44:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8013d48:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013d4c:	2b00      	cmp	r3, #0
 8013d4e:	4659      	mov	r1, fp
 8013d50:	dd10      	ble.n	8013d74 <_strtod_l+0x5fc>
 8013d52:	2b1f      	cmp	r3, #31
 8013d54:	f340 8107 	ble.w	8013f66 <_strtod_l+0x7ee>
 8013d58:	2b34      	cmp	r3, #52	; 0x34
 8013d5a:	bfde      	ittt	le
 8013d5c:	3b20      	suble	r3, #32
 8013d5e:	f04f 32ff 	movle.w	r2, #4294967295
 8013d62:	fa02 f303 	lslle.w	r3, r2, r3
 8013d66:	f04f 0a00 	mov.w	sl, #0
 8013d6a:	bfcc      	ite	gt
 8013d6c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8013d70:	ea03 0b01 	andle.w	fp, r3, r1
 8013d74:	2200      	movs	r2, #0
 8013d76:	2300      	movs	r3, #0
 8013d78:	4650      	mov	r0, sl
 8013d7a:	4659      	mov	r1, fp
 8013d7c:	f7ec feb4 	bl	8000ae8 <__aeabi_dcmpeq>
 8013d80:	2800      	cmp	r0, #0
 8013d82:	d1ac      	bne.n	8013cde <_strtod_l+0x566>
 8013d84:	9b07      	ldr	r3, [sp, #28]
 8013d86:	9300      	str	r3, [sp, #0]
 8013d88:	9a05      	ldr	r2, [sp, #20]
 8013d8a:	9908      	ldr	r1, [sp, #32]
 8013d8c:	4623      	mov	r3, r4
 8013d8e:	4648      	mov	r0, r9
 8013d90:	f001 fdac 	bl	80158ec <__s2b>
 8013d94:	9007      	str	r0, [sp, #28]
 8013d96:	2800      	cmp	r0, #0
 8013d98:	f43f af08 	beq.w	8013bac <_strtod_l+0x434>
 8013d9c:	9a06      	ldr	r2, [sp, #24]
 8013d9e:	9b06      	ldr	r3, [sp, #24]
 8013da0:	2a00      	cmp	r2, #0
 8013da2:	f1c3 0300 	rsb	r3, r3, #0
 8013da6:	bfa8      	it	ge
 8013da8:	2300      	movge	r3, #0
 8013daa:	930e      	str	r3, [sp, #56]	; 0x38
 8013dac:	2400      	movs	r4, #0
 8013dae:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8013db2:	9316      	str	r3, [sp, #88]	; 0x58
 8013db4:	46a0      	mov	r8, r4
 8013db6:	9b07      	ldr	r3, [sp, #28]
 8013db8:	4648      	mov	r0, r9
 8013dba:	6859      	ldr	r1, [r3, #4]
 8013dbc:	f001 fd10 	bl	80157e0 <_Balloc>
 8013dc0:	9005      	str	r0, [sp, #20]
 8013dc2:	2800      	cmp	r0, #0
 8013dc4:	f43f aef6 	beq.w	8013bb4 <_strtod_l+0x43c>
 8013dc8:	9b07      	ldr	r3, [sp, #28]
 8013dca:	691a      	ldr	r2, [r3, #16]
 8013dcc:	3202      	adds	r2, #2
 8013dce:	f103 010c 	add.w	r1, r3, #12
 8013dd2:	0092      	lsls	r2, r2, #2
 8013dd4:	300c      	adds	r0, #12
 8013dd6:	f7fe fcfb 	bl	80127d0 <memcpy>
 8013dda:	aa1e      	add	r2, sp, #120	; 0x78
 8013ddc:	a91d      	add	r1, sp, #116	; 0x74
 8013dde:	ec4b ab10 	vmov	d0, sl, fp
 8013de2:	4648      	mov	r0, r9
 8013de4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8013de8:	f002 f83c 	bl	8015e64 <__d2b>
 8013dec:	901c      	str	r0, [sp, #112]	; 0x70
 8013dee:	2800      	cmp	r0, #0
 8013df0:	f43f aee0 	beq.w	8013bb4 <_strtod_l+0x43c>
 8013df4:	2101      	movs	r1, #1
 8013df6:	4648      	mov	r0, r9
 8013df8:	f001 fe04 	bl	8015a04 <__i2b>
 8013dfc:	4680      	mov	r8, r0
 8013dfe:	2800      	cmp	r0, #0
 8013e00:	f43f aed8 	beq.w	8013bb4 <_strtod_l+0x43c>
 8013e04:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8013e06:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8013e08:	2e00      	cmp	r6, #0
 8013e0a:	bfab      	itete	ge
 8013e0c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8013e0e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8013e10:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8013e12:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8013e14:	bfac      	ite	ge
 8013e16:	18f7      	addge	r7, r6, r3
 8013e18:	1b9d      	sublt	r5, r3, r6
 8013e1a:	9b04      	ldr	r3, [sp, #16]
 8013e1c:	1af6      	subs	r6, r6, r3
 8013e1e:	4416      	add	r6, r2
 8013e20:	4b63      	ldr	r3, [pc, #396]	; (8013fb0 <_strtod_l+0x838>)
 8013e22:	3e01      	subs	r6, #1
 8013e24:	429e      	cmp	r6, r3
 8013e26:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8013e2a:	f280 80af 	bge.w	8013f8c <_strtod_l+0x814>
 8013e2e:	1b9b      	subs	r3, r3, r6
 8013e30:	2b1f      	cmp	r3, #31
 8013e32:	eba2 0203 	sub.w	r2, r2, r3
 8013e36:	f04f 0101 	mov.w	r1, #1
 8013e3a:	f300 809b 	bgt.w	8013f74 <_strtod_l+0x7fc>
 8013e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8013e42:	930f      	str	r3, [sp, #60]	; 0x3c
 8013e44:	2300      	movs	r3, #0
 8013e46:	930a      	str	r3, [sp, #40]	; 0x28
 8013e48:	18be      	adds	r6, r7, r2
 8013e4a:	9b04      	ldr	r3, [sp, #16]
 8013e4c:	42b7      	cmp	r7, r6
 8013e4e:	4415      	add	r5, r2
 8013e50:	441d      	add	r5, r3
 8013e52:	463b      	mov	r3, r7
 8013e54:	bfa8      	it	ge
 8013e56:	4633      	movge	r3, r6
 8013e58:	42ab      	cmp	r3, r5
 8013e5a:	bfa8      	it	ge
 8013e5c:	462b      	movge	r3, r5
 8013e5e:	2b00      	cmp	r3, #0
 8013e60:	bfc2      	ittt	gt
 8013e62:	1af6      	subgt	r6, r6, r3
 8013e64:	1aed      	subgt	r5, r5, r3
 8013e66:	1aff      	subgt	r7, r7, r3
 8013e68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013e6a:	b1bb      	cbz	r3, 8013e9c <_strtod_l+0x724>
 8013e6c:	4641      	mov	r1, r8
 8013e6e:	461a      	mov	r2, r3
 8013e70:	4648      	mov	r0, r9
 8013e72:	f001 fe67 	bl	8015b44 <__pow5mult>
 8013e76:	4680      	mov	r8, r0
 8013e78:	2800      	cmp	r0, #0
 8013e7a:	f43f ae9b 	beq.w	8013bb4 <_strtod_l+0x43c>
 8013e7e:	4601      	mov	r1, r0
 8013e80:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013e82:	4648      	mov	r0, r9
 8013e84:	f001 fdc7 	bl	8015a16 <__multiply>
 8013e88:	900c      	str	r0, [sp, #48]	; 0x30
 8013e8a:	2800      	cmp	r0, #0
 8013e8c:	f43f ae92 	beq.w	8013bb4 <_strtod_l+0x43c>
 8013e90:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013e92:	4648      	mov	r0, r9
 8013e94:	f001 fcd8 	bl	8015848 <_Bfree>
 8013e98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013e9a:	931c      	str	r3, [sp, #112]	; 0x70
 8013e9c:	2e00      	cmp	r6, #0
 8013e9e:	dc7a      	bgt.n	8013f96 <_strtod_l+0x81e>
 8013ea0:	9b06      	ldr	r3, [sp, #24]
 8013ea2:	2b00      	cmp	r3, #0
 8013ea4:	dd08      	ble.n	8013eb8 <_strtod_l+0x740>
 8013ea6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8013ea8:	9905      	ldr	r1, [sp, #20]
 8013eaa:	4648      	mov	r0, r9
 8013eac:	f001 fe4a 	bl	8015b44 <__pow5mult>
 8013eb0:	9005      	str	r0, [sp, #20]
 8013eb2:	2800      	cmp	r0, #0
 8013eb4:	f43f ae7e 	beq.w	8013bb4 <_strtod_l+0x43c>
 8013eb8:	2d00      	cmp	r5, #0
 8013eba:	dd08      	ble.n	8013ece <_strtod_l+0x756>
 8013ebc:	462a      	mov	r2, r5
 8013ebe:	9905      	ldr	r1, [sp, #20]
 8013ec0:	4648      	mov	r0, r9
 8013ec2:	f001 fe8d 	bl	8015be0 <__lshift>
 8013ec6:	9005      	str	r0, [sp, #20]
 8013ec8:	2800      	cmp	r0, #0
 8013eca:	f43f ae73 	beq.w	8013bb4 <_strtod_l+0x43c>
 8013ece:	2f00      	cmp	r7, #0
 8013ed0:	dd08      	ble.n	8013ee4 <_strtod_l+0x76c>
 8013ed2:	4641      	mov	r1, r8
 8013ed4:	463a      	mov	r2, r7
 8013ed6:	4648      	mov	r0, r9
 8013ed8:	f001 fe82 	bl	8015be0 <__lshift>
 8013edc:	4680      	mov	r8, r0
 8013ede:	2800      	cmp	r0, #0
 8013ee0:	f43f ae68 	beq.w	8013bb4 <_strtod_l+0x43c>
 8013ee4:	9a05      	ldr	r2, [sp, #20]
 8013ee6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013ee8:	4648      	mov	r0, r9
 8013eea:	f001 fee7 	bl	8015cbc <__mdiff>
 8013eee:	4604      	mov	r4, r0
 8013ef0:	2800      	cmp	r0, #0
 8013ef2:	f43f ae5f 	beq.w	8013bb4 <_strtod_l+0x43c>
 8013ef6:	68c3      	ldr	r3, [r0, #12]
 8013ef8:	930c      	str	r3, [sp, #48]	; 0x30
 8013efa:	2300      	movs	r3, #0
 8013efc:	60c3      	str	r3, [r0, #12]
 8013efe:	4641      	mov	r1, r8
 8013f00:	f001 fec2 	bl	8015c88 <__mcmp>
 8013f04:	2800      	cmp	r0, #0
 8013f06:	da55      	bge.n	8013fb4 <_strtod_l+0x83c>
 8013f08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013f0a:	b9e3      	cbnz	r3, 8013f46 <_strtod_l+0x7ce>
 8013f0c:	f1ba 0f00 	cmp.w	sl, #0
 8013f10:	d119      	bne.n	8013f46 <_strtod_l+0x7ce>
 8013f12:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013f16:	b9b3      	cbnz	r3, 8013f46 <_strtod_l+0x7ce>
 8013f18:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013f1c:	0d1b      	lsrs	r3, r3, #20
 8013f1e:	051b      	lsls	r3, r3, #20
 8013f20:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8013f24:	d90f      	bls.n	8013f46 <_strtod_l+0x7ce>
 8013f26:	6963      	ldr	r3, [r4, #20]
 8013f28:	b913      	cbnz	r3, 8013f30 <_strtod_l+0x7b8>
 8013f2a:	6923      	ldr	r3, [r4, #16]
 8013f2c:	2b01      	cmp	r3, #1
 8013f2e:	dd0a      	ble.n	8013f46 <_strtod_l+0x7ce>
 8013f30:	4621      	mov	r1, r4
 8013f32:	2201      	movs	r2, #1
 8013f34:	4648      	mov	r0, r9
 8013f36:	f001 fe53 	bl	8015be0 <__lshift>
 8013f3a:	4641      	mov	r1, r8
 8013f3c:	4604      	mov	r4, r0
 8013f3e:	f001 fea3 	bl	8015c88 <__mcmp>
 8013f42:	2800      	cmp	r0, #0
 8013f44:	dc67      	bgt.n	8014016 <_strtod_l+0x89e>
 8013f46:	9b04      	ldr	r3, [sp, #16]
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	d171      	bne.n	8014030 <_strtod_l+0x8b8>
 8013f4c:	e63d      	b.n	8013bca <_strtod_l+0x452>
 8013f4e:	f018 0f01 	tst.w	r8, #1
 8013f52:	d004      	beq.n	8013f5e <_strtod_l+0x7e6>
 8013f54:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013f58:	f7ec fb5e 	bl	8000618 <__aeabi_dmul>
 8013f5c:	2301      	movs	r3, #1
 8013f5e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8013f62:	3508      	adds	r5, #8
 8013f64:	e6e5      	b.n	8013d32 <_strtod_l+0x5ba>
 8013f66:	f04f 32ff 	mov.w	r2, #4294967295
 8013f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8013f6e:	ea03 0a0a 	and.w	sl, r3, sl
 8013f72:	e6ff      	b.n	8013d74 <_strtod_l+0x5fc>
 8013f74:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8013f78:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8013f7c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8013f80:	36e2      	adds	r6, #226	; 0xe2
 8013f82:	fa01 f306 	lsl.w	r3, r1, r6
 8013f86:	930a      	str	r3, [sp, #40]	; 0x28
 8013f88:	910f      	str	r1, [sp, #60]	; 0x3c
 8013f8a:	e75d      	b.n	8013e48 <_strtod_l+0x6d0>
 8013f8c:	2300      	movs	r3, #0
 8013f8e:	930a      	str	r3, [sp, #40]	; 0x28
 8013f90:	2301      	movs	r3, #1
 8013f92:	930f      	str	r3, [sp, #60]	; 0x3c
 8013f94:	e758      	b.n	8013e48 <_strtod_l+0x6d0>
 8013f96:	4632      	mov	r2, r6
 8013f98:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013f9a:	4648      	mov	r0, r9
 8013f9c:	f001 fe20 	bl	8015be0 <__lshift>
 8013fa0:	901c      	str	r0, [sp, #112]	; 0x70
 8013fa2:	2800      	cmp	r0, #0
 8013fa4:	f47f af7c 	bne.w	8013ea0 <_strtod_l+0x728>
 8013fa8:	e604      	b.n	8013bb4 <_strtod_l+0x43c>
 8013faa:	bf00      	nop
 8013fac:	08018a08 	.word	0x08018a08
 8013fb0:	fffffc02 	.word	0xfffffc02
 8013fb4:	465d      	mov	r5, fp
 8013fb6:	f040 8086 	bne.w	80140c6 <_strtod_l+0x94e>
 8013fba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013fbc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013fc0:	b32a      	cbz	r2, 801400e <_strtod_l+0x896>
 8013fc2:	4aaf      	ldr	r2, [pc, #700]	; (8014280 <_strtod_l+0xb08>)
 8013fc4:	4293      	cmp	r3, r2
 8013fc6:	d153      	bne.n	8014070 <_strtod_l+0x8f8>
 8013fc8:	9b04      	ldr	r3, [sp, #16]
 8013fca:	4650      	mov	r0, sl
 8013fcc:	b1d3      	cbz	r3, 8014004 <_strtod_l+0x88c>
 8013fce:	4aad      	ldr	r2, [pc, #692]	; (8014284 <_strtod_l+0xb0c>)
 8013fd0:	402a      	ands	r2, r5
 8013fd2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8013fd6:	f04f 31ff 	mov.w	r1, #4294967295
 8013fda:	d816      	bhi.n	801400a <_strtod_l+0x892>
 8013fdc:	0d12      	lsrs	r2, r2, #20
 8013fde:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8013fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8013fe6:	4298      	cmp	r0, r3
 8013fe8:	d142      	bne.n	8014070 <_strtod_l+0x8f8>
 8013fea:	4ba7      	ldr	r3, [pc, #668]	; (8014288 <_strtod_l+0xb10>)
 8013fec:	429d      	cmp	r5, r3
 8013fee:	d102      	bne.n	8013ff6 <_strtod_l+0x87e>
 8013ff0:	3001      	adds	r0, #1
 8013ff2:	f43f addf 	beq.w	8013bb4 <_strtod_l+0x43c>
 8013ff6:	4ba3      	ldr	r3, [pc, #652]	; (8014284 <_strtod_l+0xb0c>)
 8013ff8:	402b      	ands	r3, r5
 8013ffa:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8013ffe:	f04f 0a00 	mov.w	sl, #0
 8014002:	e7a0      	b.n	8013f46 <_strtod_l+0x7ce>
 8014004:	f04f 33ff 	mov.w	r3, #4294967295
 8014008:	e7ed      	b.n	8013fe6 <_strtod_l+0x86e>
 801400a:	460b      	mov	r3, r1
 801400c:	e7eb      	b.n	8013fe6 <_strtod_l+0x86e>
 801400e:	bb7b      	cbnz	r3, 8014070 <_strtod_l+0x8f8>
 8014010:	f1ba 0f00 	cmp.w	sl, #0
 8014014:	d12c      	bne.n	8014070 <_strtod_l+0x8f8>
 8014016:	9904      	ldr	r1, [sp, #16]
 8014018:	4a9a      	ldr	r2, [pc, #616]	; (8014284 <_strtod_l+0xb0c>)
 801401a:	465b      	mov	r3, fp
 801401c:	b1f1      	cbz	r1, 801405c <_strtod_l+0x8e4>
 801401e:	ea02 010b 	and.w	r1, r2, fp
 8014022:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8014026:	dc19      	bgt.n	801405c <_strtod_l+0x8e4>
 8014028:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801402c:	f77f ae5b 	ble.w	8013ce6 <_strtod_l+0x56e>
 8014030:	4a96      	ldr	r2, [pc, #600]	; (801428c <_strtod_l+0xb14>)
 8014032:	2300      	movs	r3, #0
 8014034:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8014038:	4650      	mov	r0, sl
 801403a:	4659      	mov	r1, fp
 801403c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8014040:	f7ec faea 	bl	8000618 <__aeabi_dmul>
 8014044:	4682      	mov	sl, r0
 8014046:	468b      	mov	fp, r1
 8014048:	2900      	cmp	r1, #0
 801404a:	f47f adbe 	bne.w	8013bca <_strtod_l+0x452>
 801404e:	2800      	cmp	r0, #0
 8014050:	f47f adbb 	bne.w	8013bca <_strtod_l+0x452>
 8014054:	2322      	movs	r3, #34	; 0x22
 8014056:	f8c9 3000 	str.w	r3, [r9]
 801405a:	e5b6      	b.n	8013bca <_strtod_l+0x452>
 801405c:	4013      	ands	r3, r2
 801405e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8014062:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8014066:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801406a:	f04f 3aff 	mov.w	sl, #4294967295
 801406e:	e76a      	b.n	8013f46 <_strtod_l+0x7ce>
 8014070:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014072:	b193      	cbz	r3, 801409a <_strtod_l+0x922>
 8014074:	422b      	tst	r3, r5
 8014076:	f43f af66 	beq.w	8013f46 <_strtod_l+0x7ce>
 801407a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801407c:	9a04      	ldr	r2, [sp, #16]
 801407e:	4650      	mov	r0, sl
 8014080:	4659      	mov	r1, fp
 8014082:	b173      	cbz	r3, 80140a2 <_strtod_l+0x92a>
 8014084:	f7ff fb5b 	bl	801373e <sulp>
 8014088:	4602      	mov	r2, r0
 801408a:	460b      	mov	r3, r1
 801408c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014090:	f7ec f90c 	bl	80002ac <__adddf3>
 8014094:	4682      	mov	sl, r0
 8014096:	468b      	mov	fp, r1
 8014098:	e755      	b.n	8013f46 <_strtod_l+0x7ce>
 801409a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801409c:	ea13 0f0a 	tst.w	r3, sl
 80140a0:	e7e9      	b.n	8014076 <_strtod_l+0x8fe>
 80140a2:	f7ff fb4c 	bl	801373e <sulp>
 80140a6:	4602      	mov	r2, r0
 80140a8:	460b      	mov	r3, r1
 80140aa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80140ae:	f7ec f8fb 	bl	80002a8 <__aeabi_dsub>
 80140b2:	2200      	movs	r2, #0
 80140b4:	2300      	movs	r3, #0
 80140b6:	4682      	mov	sl, r0
 80140b8:	468b      	mov	fp, r1
 80140ba:	f7ec fd15 	bl	8000ae8 <__aeabi_dcmpeq>
 80140be:	2800      	cmp	r0, #0
 80140c0:	f47f ae11 	bne.w	8013ce6 <_strtod_l+0x56e>
 80140c4:	e73f      	b.n	8013f46 <_strtod_l+0x7ce>
 80140c6:	4641      	mov	r1, r8
 80140c8:	4620      	mov	r0, r4
 80140ca:	f001 ff1a 	bl	8015f02 <__ratio>
 80140ce:	ec57 6b10 	vmov	r6, r7, d0
 80140d2:	2200      	movs	r2, #0
 80140d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80140d8:	ee10 0a10 	vmov	r0, s0
 80140dc:	4639      	mov	r1, r7
 80140de:	f7ec fd17 	bl	8000b10 <__aeabi_dcmple>
 80140e2:	2800      	cmp	r0, #0
 80140e4:	d077      	beq.n	80141d6 <_strtod_l+0xa5e>
 80140e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80140e8:	2b00      	cmp	r3, #0
 80140ea:	d04a      	beq.n	8014182 <_strtod_l+0xa0a>
 80140ec:	4b68      	ldr	r3, [pc, #416]	; (8014290 <_strtod_l+0xb18>)
 80140ee:	2200      	movs	r2, #0
 80140f0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80140f4:	4f66      	ldr	r7, [pc, #408]	; (8014290 <_strtod_l+0xb18>)
 80140f6:	2600      	movs	r6, #0
 80140f8:	4b62      	ldr	r3, [pc, #392]	; (8014284 <_strtod_l+0xb0c>)
 80140fa:	402b      	ands	r3, r5
 80140fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80140fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014100:	4b64      	ldr	r3, [pc, #400]	; (8014294 <_strtod_l+0xb1c>)
 8014102:	429a      	cmp	r2, r3
 8014104:	f040 80ce 	bne.w	80142a4 <_strtod_l+0xb2c>
 8014108:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801410c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014110:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8014114:	ec4b ab10 	vmov	d0, sl, fp
 8014118:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 801411c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8014120:	f001 fe2a 	bl	8015d78 <__ulp>
 8014124:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014128:	ec53 2b10 	vmov	r2, r3, d0
 801412c:	f7ec fa74 	bl	8000618 <__aeabi_dmul>
 8014130:	4652      	mov	r2, sl
 8014132:	465b      	mov	r3, fp
 8014134:	f7ec f8ba 	bl	80002ac <__adddf3>
 8014138:	460b      	mov	r3, r1
 801413a:	4952      	ldr	r1, [pc, #328]	; (8014284 <_strtod_l+0xb0c>)
 801413c:	4a56      	ldr	r2, [pc, #344]	; (8014298 <_strtod_l+0xb20>)
 801413e:	4019      	ands	r1, r3
 8014140:	4291      	cmp	r1, r2
 8014142:	4682      	mov	sl, r0
 8014144:	d95b      	bls.n	80141fe <_strtod_l+0xa86>
 8014146:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014148:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801414c:	4293      	cmp	r3, r2
 801414e:	d103      	bne.n	8014158 <_strtod_l+0x9e0>
 8014150:	9b08      	ldr	r3, [sp, #32]
 8014152:	3301      	adds	r3, #1
 8014154:	f43f ad2e 	beq.w	8013bb4 <_strtod_l+0x43c>
 8014158:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8014288 <_strtod_l+0xb10>
 801415c:	f04f 3aff 	mov.w	sl, #4294967295
 8014160:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014162:	4648      	mov	r0, r9
 8014164:	f001 fb70 	bl	8015848 <_Bfree>
 8014168:	9905      	ldr	r1, [sp, #20]
 801416a:	4648      	mov	r0, r9
 801416c:	f001 fb6c 	bl	8015848 <_Bfree>
 8014170:	4641      	mov	r1, r8
 8014172:	4648      	mov	r0, r9
 8014174:	f001 fb68 	bl	8015848 <_Bfree>
 8014178:	4621      	mov	r1, r4
 801417a:	4648      	mov	r0, r9
 801417c:	f001 fb64 	bl	8015848 <_Bfree>
 8014180:	e619      	b.n	8013db6 <_strtod_l+0x63e>
 8014182:	f1ba 0f00 	cmp.w	sl, #0
 8014186:	d11a      	bne.n	80141be <_strtod_l+0xa46>
 8014188:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801418c:	b9eb      	cbnz	r3, 80141ca <_strtod_l+0xa52>
 801418e:	2200      	movs	r2, #0
 8014190:	4b3f      	ldr	r3, [pc, #252]	; (8014290 <_strtod_l+0xb18>)
 8014192:	4630      	mov	r0, r6
 8014194:	4639      	mov	r1, r7
 8014196:	f7ec fcb1 	bl	8000afc <__aeabi_dcmplt>
 801419a:	b9c8      	cbnz	r0, 80141d0 <_strtod_l+0xa58>
 801419c:	4630      	mov	r0, r6
 801419e:	4639      	mov	r1, r7
 80141a0:	2200      	movs	r2, #0
 80141a2:	4b3e      	ldr	r3, [pc, #248]	; (801429c <_strtod_l+0xb24>)
 80141a4:	f7ec fa38 	bl	8000618 <__aeabi_dmul>
 80141a8:	4606      	mov	r6, r0
 80141aa:	460f      	mov	r7, r1
 80141ac:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80141b0:	9618      	str	r6, [sp, #96]	; 0x60
 80141b2:	9319      	str	r3, [sp, #100]	; 0x64
 80141b4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80141b8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80141bc:	e79c      	b.n	80140f8 <_strtod_l+0x980>
 80141be:	f1ba 0f01 	cmp.w	sl, #1
 80141c2:	d102      	bne.n	80141ca <_strtod_l+0xa52>
 80141c4:	2d00      	cmp	r5, #0
 80141c6:	f43f ad8e 	beq.w	8013ce6 <_strtod_l+0x56e>
 80141ca:	2200      	movs	r2, #0
 80141cc:	4b34      	ldr	r3, [pc, #208]	; (80142a0 <_strtod_l+0xb28>)
 80141ce:	e78f      	b.n	80140f0 <_strtod_l+0x978>
 80141d0:	2600      	movs	r6, #0
 80141d2:	4f32      	ldr	r7, [pc, #200]	; (801429c <_strtod_l+0xb24>)
 80141d4:	e7ea      	b.n	80141ac <_strtod_l+0xa34>
 80141d6:	4b31      	ldr	r3, [pc, #196]	; (801429c <_strtod_l+0xb24>)
 80141d8:	4630      	mov	r0, r6
 80141da:	4639      	mov	r1, r7
 80141dc:	2200      	movs	r2, #0
 80141de:	f7ec fa1b 	bl	8000618 <__aeabi_dmul>
 80141e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80141e4:	4606      	mov	r6, r0
 80141e6:	460f      	mov	r7, r1
 80141e8:	b933      	cbnz	r3, 80141f8 <_strtod_l+0xa80>
 80141ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80141ee:	9010      	str	r0, [sp, #64]	; 0x40
 80141f0:	9311      	str	r3, [sp, #68]	; 0x44
 80141f2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80141f6:	e7df      	b.n	80141b8 <_strtod_l+0xa40>
 80141f8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80141fc:	e7f9      	b.n	80141f2 <_strtod_l+0xa7a>
 80141fe:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8014202:	9b04      	ldr	r3, [sp, #16]
 8014204:	2b00      	cmp	r3, #0
 8014206:	d1ab      	bne.n	8014160 <_strtod_l+0x9e8>
 8014208:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801420c:	0d1b      	lsrs	r3, r3, #20
 801420e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014210:	051b      	lsls	r3, r3, #20
 8014212:	429a      	cmp	r2, r3
 8014214:	465d      	mov	r5, fp
 8014216:	d1a3      	bne.n	8014160 <_strtod_l+0x9e8>
 8014218:	4639      	mov	r1, r7
 801421a:	4630      	mov	r0, r6
 801421c:	f7ec fcac 	bl	8000b78 <__aeabi_d2iz>
 8014220:	f7ec f990 	bl	8000544 <__aeabi_i2d>
 8014224:	460b      	mov	r3, r1
 8014226:	4602      	mov	r2, r0
 8014228:	4639      	mov	r1, r7
 801422a:	4630      	mov	r0, r6
 801422c:	f7ec f83c 	bl	80002a8 <__aeabi_dsub>
 8014230:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014232:	4606      	mov	r6, r0
 8014234:	460f      	mov	r7, r1
 8014236:	b933      	cbnz	r3, 8014246 <_strtod_l+0xace>
 8014238:	f1ba 0f00 	cmp.w	sl, #0
 801423c:	d103      	bne.n	8014246 <_strtod_l+0xace>
 801423e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8014242:	2d00      	cmp	r5, #0
 8014244:	d06d      	beq.n	8014322 <_strtod_l+0xbaa>
 8014246:	a30a      	add	r3, pc, #40	; (adr r3, 8014270 <_strtod_l+0xaf8>)
 8014248:	e9d3 2300 	ldrd	r2, r3, [r3]
 801424c:	4630      	mov	r0, r6
 801424e:	4639      	mov	r1, r7
 8014250:	f7ec fc54 	bl	8000afc <__aeabi_dcmplt>
 8014254:	2800      	cmp	r0, #0
 8014256:	f47f acb8 	bne.w	8013bca <_strtod_l+0x452>
 801425a:	a307      	add	r3, pc, #28	; (adr r3, 8014278 <_strtod_l+0xb00>)
 801425c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014260:	4630      	mov	r0, r6
 8014262:	4639      	mov	r1, r7
 8014264:	f7ec fc68 	bl	8000b38 <__aeabi_dcmpgt>
 8014268:	2800      	cmp	r0, #0
 801426a:	f43f af79 	beq.w	8014160 <_strtod_l+0x9e8>
 801426e:	e4ac      	b.n	8013bca <_strtod_l+0x452>
 8014270:	94a03595 	.word	0x94a03595
 8014274:	3fdfffff 	.word	0x3fdfffff
 8014278:	35afe535 	.word	0x35afe535
 801427c:	3fe00000 	.word	0x3fe00000
 8014280:	000fffff 	.word	0x000fffff
 8014284:	7ff00000 	.word	0x7ff00000
 8014288:	7fefffff 	.word	0x7fefffff
 801428c:	39500000 	.word	0x39500000
 8014290:	3ff00000 	.word	0x3ff00000
 8014294:	7fe00000 	.word	0x7fe00000
 8014298:	7c9fffff 	.word	0x7c9fffff
 801429c:	3fe00000 	.word	0x3fe00000
 80142a0:	bff00000 	.word	0xbff00000
 80142a4:	9b04      	ldr	r3, [sp, #16]
 80142a6:	b333      	cbz	r3, 80142f6 <_strtod_l+0xb7e>
 80142a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80142aa:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80142ae:	d822      	bhi.n	80142f6 <_strtod_l+0xb7e>
 80142b0:	a327      	add	r3, pc, #156	; (adr r3, 8014350 <_strtod_l+0xbd8>)
 80142b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142b6:	4630      	mov	r0, r6
 80142b8:	4639      	mov	r1, r7
 80142ba:	f7ec fc29 	bl	8000b10 <__aeabi_dcmple>
 80142be:	b1a0      	cbz	r0, 80142ea <_strtod_l+0xb72>
 80142c0:	4639      	mov	r1, r7
 80142c2:	4630      	mov	r0, r6
 80142c4:	f7ec fc80 	bl	8000bc8 <__aeabi_d2uiz>
 80142c8:	2800      	cmp	r0, #0
 80142ca:	bf08      	it	eq
 80142cc:	2001      	moveq	r0, #1
 80142ce:	f7ec f929 	bl	8000524 <__aeabi_ui2d>
 80142d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80142d4:	4606      	mov	r6, r0
 80142d6:	460f      	mov	r7, r1
 80142d8:	bb03      	cbnz	r3, 801431c <_strtod_l+0xba4>
 80142da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80142de:	9012      	str	r0, [sp, #72]	; 0x48
 80142e0:	9313      	str	r3, [sp, #76]	; 0x4c
 80142e2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80142e6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80142ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80142ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80142ee:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80142f2:	1a9b      	subs	r3, r3, r2
 80142f4:	930b      	str	r3, [sp, #44]	; 0x2c
 80142f6:	ed9d 0b08 	vldr	d0, [sp, #32]
 80142fa:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80142fe:	f001 fd3b 	bl	8015d78 <__ulp>
 8014302:	4650      	mov	r0, sl
 8014304:	ec53 2b10 	vmov	r2, r3, d0
 8014308:	4659      	mov	r1, fp
 801430a:	f7ec f985 	bl	8000618 <__aeabi_dmul>
 801430e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014312:	f7eb ffcb 	bl	80002ac <__adddf3>
 8014316:	4682      	mov	sl, r0
 8014318:	468b      	mov	fp, r1
 801431a:	e772      	b.n	8014202 <_strtod_l+0xa8a>
 801431c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8014320:	e7df      	b.n	80142e2 <_strtod_l+0xb6a>
 8014322:	a30d      	add	r3, pc, #52	; (adr r3, 8014358 <_strtod_l+0xbe0>)
 8014324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014328:	f7ec fbe8 	bl	8000afc <__aeabi_dcmplt>
 801432c:	e79c      	b.n	8014268 <_strtod_l+0xaf0>
 801432e:	2300      	movs	r3, #0
 8014330:	930d      	str	r3, [sp, #52]	; 0x34
 8014332:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014334:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014336:	6013      	str	r3, [r2, #0]
 8014338:	f7ff ba61 	b.w	80137fe <_strtod_l+0x86>
 801433c:	2b65      	cmp	r3, #101	; 0x65
 801433e:	f04f 0200 	mov.w	r2, #0
 8014342:	f43f ab4e 	beq.w	80139e2 <_strtod_l+0x26a>
 8014346:	2101      	movs	r1, #1
 8014348:	4614      	mov	r4, r2
 801434a:	9104      	str	r1, [sp, #16]
 801434c:	f7ff bacb 	b.w	80138e6 <_strtod_l+0x16e>
 8014350:	ffc00000 	.word	0xffc00000
 8014354:	41dfffff 	.word	0x41dfffff
 8014358:	94a03595 	.word	0x94a03595
 801435c:	3fcfffff 	.word	0x3fcfffff

08014360 <_strtod_r>:
 8014360:	4b05      	ldr	r3, [pc, #20]	; (8014378 <_strtod_r+0x18>)
 8014362:	681b      	ldr	r3, [r3, #0]
 8014364:	b410      	push	{r4}
 8014366:	6a1b      	ldr	r3, [r3, #32]
 8014368:	4c04      	ldr	r4, [pc, #16]	; (801437c <_strtod_r+0x1c>)
 801436a:	2b00      	cmp	r3, #0
 801436c:	bf08      	it	eq
 801436e:	4623      	moveq	r3, r4
 8014370:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014374:	f7ff ba00 	b.w	8013778 <_strtod_l>
 8014378:	20000e34 	.word	0x20000e34
 801437c:	20000e98 	.word	0x20000e98

08014380 <_strtol_l.isra.0>:
 8014380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014384:	4680      	mov	r8, r0
 8014386:	4689      	mov	r9, r1
 8014388:	4692      	mov	sl, r2
 801438a:	461e      	mov	r6, r3
 801438c:	460f      	mov	r7, r1
 801438e:	463d      	mov	r5, r7
 8014390:	9808      	ldr	r0, [sp, #32]
 8014392:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014396:	f001 f9ed 	bl	8015774 <__locale_ctype_ptr_l>
 801439a:	4420      	add	r0, r4
 801439c:	7843      	ldrb	r3, [r0, #1]
 801439e:	f013 0308 	ands.w	r3, r3, #8
 80143a2:	d132      	bne.n	801440a <_strtol_l.isra.0+0x8a>
 80143a4:	2c2d      	cmp	r4, #45	; 0x2d
 80143a6:	d132      	bne.n	801440e <_strtol_l.isra.0+0x8e>
 80143a8:	787c      	ldrb	r4, [r7, #1]
 80143aa:	1cbd      	adds	r5, r7, #2
 80143ac:	2201      	movs	r2, #1
 80143ae:	2e00      	cmp	r6, #0
 80143b0:	d05d      	beq.n	801446e <_strtol_l.isra.0+0xee>
 80143b2:	2e10      	cmp	r6, #16
 80143b4:	d109      	bne.n	80143ca <_strtol_l.isra.0+0x4a>
 80143b6:	2c30      	cmp	r4, #48	; 0x30
 80143b8:	d107      	bne.n	80143ca <_strtol_l.isra.0+0x4a>
 80143ba:	782b      	ldrb	r3, [r5, #0]
 80143bc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80143c0:	2b58      	cmp	r3, #88	; 0x58
 80143c2:	d14f      	bne.n	8014464 <_strtol_l.isra.0+0xe4>
 80143c4:	786c      	ldrb	r4, [r5, #1]
 80143c6:	2610      	movs	r6, #16
 80143c8:	3502      	adds	r5, #2
 80143ca:	2a00      	cmp	r2, #0
 80143cc:	bf14      	ite	ne
 80143ce:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80143d2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80143d6:	2700      	movs	r7, #0
 80143d8:	fbb1 fcf6 	udiv	ip, r1, r6
 80143dc:	4638      	mov	r0, r7
 80143de:	fb06 1e1c 	mls	lr, r6, ip, r1
 80143e2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80143e6:	2b09      	cmp	r3, #9
 80143e8:	d817      	bhi.n	801441a <_strtol_l.isra.0+0x9a>
 80143ea:	461c      	mov	r4, r3
 80143ec:	42a6      	cmp	r6, r4
 80143ee:	dd23      	ble.n	8014438 <_strtol_l.isra.0+0xb8>
 80143f0:	1c7b      	adds	r3, r7, #1
 80143f2:	d007      	beq.n	8014404 <_strtol_l.isra.0+0x84>
 80143f4:	4584      	cmp	ip, r0
 80143f6:	d31c      	bcc.n	8014432 <_strtol_l.isra.0+0xb2>
 80143f8:	d101      	bne.n	80143fe <_strtol_l.isra.0+0x7e>
 80143fa:	45a6      	cmp	lr, r4
 80143fc:	db19      	blt.n	8014432 <_strtol_l.isra.0+0xb2>
 80143fe:	fb00 4006 	mla	r0, r0, r6, r4
 8014402:	2701      	movs	r7, #1
 8014404:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014408:	e7eb      	b.n	80143e2 <_strtol_l.isra.0+0x62>
 801440a:	462f      	mov	r7, r5
 801440c:	e7bf      	b.n	801438e <_strtol_l.isra.0+0xe>
 801440e:	2c2b      	cmp	r4, #43	; 0x2b
 8014410:	bf04      	itt	eq
 8014412:	1cbd      	addeq	r5, r7, #2
 8014414:	787c      	ldrbeq	r4, [r7, #1]
 8014416:	461a      	mov	r2, r3
 8014418:	e7c9      	b.n	80143ae <_strtol_l.isra.0+0x2e>
 801441a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 801441e:	2b19      	cmp	r3, #25
 8014420:	d801      	bhi.n	8014426 <_strtol_l.isra.0+0xa6>
 8014422:	3c37      	subs	r4, #55	; 0x37
 8014424:	e7e2      	b.n	80143ec <_strtol_l.isra.0+0x6c>
 8014426:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 801442a:	2b19      	cmp	r3, #25
 801442c:	d804      	bhi.n	8014438 <_strtol_l.isra.0+0xb8>
 801442e:	3c57      	subs	r4, #87	; 0x57
 8014430:	e7dc      	b.n	80143ec <_strtol_l.isra.0+0x6c>
 8014432:	f04f 37ff 	mov.w	r7, #4294967295
 8014436:	e7e5      	b.n	8014404 <_strtol_l.isra.0+0x84>
 8014438:	1c7b      	adds	r3, r7, #1
 801443a:	d108      	bne.n	801444e <_strtol_l.isra.0+0xce>
 801443c:	2322      	movs	r3, #34	; 0x22
 801443e:	f8c8 3000 	str.w	r3, [r8]
 8014442:	4608      	mov	r0, r1
 8014444:	f1ba 0f00 	cmp.w	sl, #0
 8014448:	d107      	bne.n	801445a <_strtol_l.isra.0+0xda>
 801444a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801444e:	b102      	cbz	r2, 8014452 <_strtol_l.isra.0+0xd2>
 8014450:	4240      	negs	r0, r0
 8014452:	f1ba 0f00 	cmp.w	sl, #0
 8014456:	d0f8      	beq.n	801444a <_strtol_l.isra.0+0xca>
 8014458:	b10f      	cbz	r7, 801445e <_strtol_l.isra.0+0xde>
 801445a:	f105 39ff 	add.w	r9, r5, #4294967295
 801445e:	f8ca 9000 	str.w	r9, [sl]
 8014462:	e7f2      	b.n	801444a <_strtol_l.isra.0+0xca>
 8014464:	2430      	movs	r4, #48	; 0x30
 8014466:	2e00      	cmp	r6, #0
 8014468:	d1af      	bne.n	80143ca <_strtol_l.isra.0+0x4a>
 801446a:	2608      	movs	r6, #8
 801446c:	e7ad      	b.n	80143ca <_strtol_l.isra.0+0x4a>
 801446e:	2c30      	cmp	r4, #48	; 0x30
 8014470:	d0a3      	beq.n	80143ba <_strtol_l.isra.0+0x3a>
 8014472:	260a      	movs	r6, #10
 8014474:	e7a9      	b.n	80143ca <_strtol_l.isra.0+0x4a>
	...

08014478 <_strtol_r>:
 8014478:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801447a:	4c06      	ldr	r4, [pc, #24]	; (8014494 <_strtol_r+0x1c>)
 801447c:	4d06      	ldr	r5, [pc, #24]	; (8014498 <_strtol_r+0x20>)
 801447e:	6824      	ldr	r4, [r4, #0]
 8014480:	6a24      	ldr	r4, [r4, #32]
 8014482:	2c00      	cmp	r4, #0
 8014484:	bf08      	it	eq
 8014486:	462c      	moveq	r4, r5
 8014488:	9400      	str	r4, [sp, #0]
 801448a:	f7ff ff79 	bl	8014380 <_strtol_l.isra.0>
 801448e:	b003      	add	sp, #12
 8014490:	bd30      	pop	{r4, r5, pc}
 8014492:	bf00      	nop
 8014494:	20000e34 	.word	0x20000e34
 8014498:	20000e98 	.word	0x20000e98

0801449c <quorem>:
 801449c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144a0:	6903      	ldr	r3, [r0, #16]
 80144a2:	690c      	ldr	r4, [r1, #16]
 80144a4:	42a3      	cmp	r3, r4
 80144a6:	4680      	mov	r8, r0
 80144a8:	f2c0 8082 	blt.w	80145b0 <quorem+0x114>
 80144ac:	3c01      	subs	r4, #1
 80144ae:	f101 0714 	add.w	r7, r1, #20
 80144b2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80144b6:	f100 0614 	add.w	r6, r0, #20
 80144ba:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80144be:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80144c2:	eb06 030c 	add.w	r3, r6, ip
 80144c6:	3501      	adds	r5, #1
 80144c8:	eb07 090c 	add.w	r9, r7, ip
 80144cc:	9301      	str	r3, [sp, #4]
 80144ce:	fbb0 f5f5 	udiv	r5, r0, r5
 80144d2:	b395      	cbz	r5, 801453a <quorem+0x9e>
 80144d4:	f04f 0a00 	mov.w	sl, #0
 80144d8:	4638      	mov	r0, r7
 80144da:	46b6      	mov	lr, r6
 80144dc:	46d3      	mov	fp, sl
 80144de:	f850 2b04 	ldr.w	r2, [r0], #4
 80144e2:	b293      	uxth	r3, r2
 80144e4:	fb05 a303 	mla	r3, r5, r3, sl
 80144e8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80144ec:	b29b      	uxth	r3, r3
 80144ee:	ebab 0303 	sub.w	r3, fp, r3
 80144f2:	0c12      	lsrs	r2, r2, #16
 80144f4:	f8de b000 	ldr.w	fp, [lr]
 80144f8:	fb05 a202 	mla	r2, r5, r2, sl
 80144fc:	fa13 f38b 	uxtah	r3, r3, fp
 8014500:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8014504:	fa1f fb82 	uxth.w	fp, r2
 8014508:	f8de 2000 	ldr.w	r2, [lr]
 801450c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8014510:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014514:	b29b      	uxth	r3, r3
 8014516:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801451a:	4581      	cmp	r9, r0
 801451c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8014520:	f84e 3b04 	str.w	r3, [lr], #4
 8014524:	d2db      	bcs.n	80144de <quorem+0x42>
 8014526:	f856 300c 	ldr.w	r3, [r6, ip]
 801452a:	b933      	cbnz	r3, 801453a <quorem+0x9e>
 801452c:	9b01      	ldr	r3, [sp, #4]
 801452e:	3b04      	subs	r3, #4
 8014530:	429e      	cmp	r6, r3
 8014532:	461a      	mov	r2, r3
 8014534:	d330      	bcc.n	8014598 <quorem+0xfc>
 8014536:	f8c8 4010 	str.w	r4, [r8, #16]
 801453a:	4640      	mov	r0, r8
 801453c:	f001 fba4 	bl	8015c88 <__mcmp>
 8014540:	2800      	cmp	r0, #0
 8014542:	db25      	blt.n	8014590 <quorem+0xf4>
 8014544:	3501      	adds	r5, #1
 8014546:	4630      	mov	r0, r6
 8014548:	f04f 0c00 	mov.w	ip, #0
 801454c:	f857 2b04 	ldr.w	r2, [r7], #4
 8014550:	f8d0 e000 	ldr.w	lr, [r0]
 8014554:	b293      	uxth	r3, r2
 8014556:	ebac 0303 	sub.w	r3, ip, r3
 801455a:	0c12      	lsrs	r2, r2, #16
 801455c:	fa13 f38e 	uxtah	r3, r3, lr
 8014560:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8014564:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014568:	b29b      	uxth	r3, r3
 801456a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801456e:	45b9      	cmp	r9, r7
 8014570:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8014574:	f840 3b04 	str.w	r3, [r0], #4
 8014578:	d2e8      	bcs.n	801454c <quorem+0xb0>
 801457a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801457e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8014582:	b92a      	cbnz	r2, 8014590 <quorem+0xf4>
 8014584:	3b04      	subs	r3, #4
 8014586:	429e      	cmp	r6, r3
 8014588:	461a      	mov	r2, r3
 801458a:	d30b      	bcc.n	80145a4 <quorem+0x108>
 801458c:	f8c8 4010 	str.w	r4, [r8, #16]
 8014590:	4628      	mov	r0, r5
 8014592:	b003      	add	sp, #12
 8014594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014598:	6812      	ldr	r2, [r2, #0]
 801459a:	3b04      	subs	r3, #4
 801459c:	2a00      	cmp	r2, #0
 801459e:	d1ca      	bne.n	8014536 <quorem+0x9a>
 80145a0:	3c01      	subs	r4, #1
 80145a2:	e7c5      	b.n	8014530 <quorem+0x94>
 80145a4:	6812      	ldr	r2, [r2, #0]
 80145a6:	3b04      	subs	r3, #4
 80145a8:	2a00      	cmp	r2, #0
 80145aa:	d1ef      	bne.n	801458c <quorem+0xf0>
 80145ac:	3c01      	subs	r4, #1
 80145ae:	e7ea      	b.n	8014586 <quorem+0xea>
 80145b0:	2000      	movs	r0, #0
 80145b2:	e7ee      	b.n	8014592 <quorem+0xf6>
 80145b4:	0000      	movs	r0, r0
	...

080145b8 <_dtoa_r>:
 80145b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145bc:	ec57 6b10 	vmov	r6, r7, d0
 80145c0:	b097      	sub	sp, #92	; 0x5c
 80145c2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80145c4:	9106      	str	r1, [sp, #24]
 80145c6:	4604      	mov	r4, r0
 80145c8:	920b      	str	r2, [sp, #44]	; 0x2c
 80145ca:	9312      	str	r3, [sp, #72]	; 0x48
 80145cc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80145d0:	e9cd 6700 	strd	r6, r7, [sp]
 80145d4:	b93d      	cbnz	r5, 80145e6 <_dtoa_r+0x2e>
 80145d6:	2010      	movs	r0, #16
 80145d8:	f7fe f8ea 	bl	80127b0 <malloc>
 80145dc:	6260      	str	r0, [r4, #36]	; 0x24
 80145de:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80145e2:	6005      	str	r5, [r0, #0]
 80145e4:	60c5      	str	r5, [r0, #12]
 80145e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80145e8:	6819      	ldr	r1, [r3, #0]
 80145ea:	b151      	cbz	r1, 8014602 <_dtoa_r+0x4a>
 80145ec:	685a      	ldr	r2, [r3, #4]
 80145ee:	604a      	str	r2, [r1, #4]
 80145f0:	2301      	movs	r3, #1
 80145f2:	4093      	lsls	r3, r2
 80145f4:	608b      	str	r3, [r1, #8]
 80145f6:	4620      	mov	r0, r4
 80145f8:	f001 f926 	bl	8015848 <_Bfree>
 80145fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80145fe:	2200      	movs	r2, #0
 8014600:	601a      	str	r2, [r3, #0]
 8014602:	1e3b      	subs	r3, r7, #0
 8014604:	bfbb      	ittet	lt
 8014606:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801460a:	9301      	strlt	r3, [sp, #4]
 801460c:	2300      	movge	r3, #0
 801460e:	2201      	movlt	r2, #1
 8014610:	bfac      	ite	ge
 8014612:	f8c8 3000 	strge.w	r3, [r8]
 8014616:	f8c8 2000 	strlt.w	r2, [r8]
 801461a:	4baf      	ldr	r3, [pc, #700]	; (80148d8 <_dtoa_r+0x320>)
 801461c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014620:	ea33 0308 	bics.w	r3, r3, r8
 8014624:	d114      	bne.n	8014650 <_dtoa_r+0x98>
 8014626:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014628:	f242 730f 	movw	r3, #9999	; 0x270f
 801462c:	6013      	str	r3, [r2, #0]
 801462e:	9b00      	ldr	r3, [sp, #0]
 8014630:	b923      	cbnz	r3, 801463c <_dtoa_r+0x84>
 8014632:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8014636:	2800      	cmp	r0, #0
 8014638:	f000 8542 	beq.w	80150c0 <_dtoa_r+0xb08>
 801463c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801463e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80148ec <_dtoa_r+0x334>
 8014642:	2b00      	cmp	r3, #0
 8014644:	f000 8544 	beq.w	80150d0 <_dtoa_r+0xb18>
 8014648:	f10b 0303 	add.w	r3, fp, #3
 801464c:	f000 bd3e 	b.w	80150cc <_dtoa_r+0xb14>
 8014650:	e9dd 6700 	ldrd	r6, r7, [sp]
 8014654:	2200      	movs	r2, #0
 8014656:	2300      	movs	r3, #0
 8014658:	4630      	mov	r0, r6
 801465a:	4639      	mov	r1, r7
 801465c:	f7ec fa44 	bl	8000ae8 <__aeabi_dcmpeq>
 8014660:	4681      	mov	r9, r0
 8014662:	b168      	cbz	r0, 8014680 <_dtoa_r+0xc8>
 8014664:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014666:	2301      	movs	r3, #1
 8014668:	6013      	str	r3, [r2, #0]
 801466a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801466c:	2b00      	cmp	r3, #0
 801466e:	f000 8524 	beq.w	80150ba <_dtoa_r+0xb02>
 8014672:	4b9a      	ldr	r3, [pc, #616]	; (80148dc <_dtoa_r+0x324>)
 8014674:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014676:	f103 3bff 	add.w	fp, r3, #4294967295
 801467a:	6013      	str	r3, [r2, #0]
 801467c:	f000 bd28 	b.w	80150d0 <_dtoa_r+0xb18>
 8014680:	aa14      	add	r2, sp, #80	; 0x50
 8014682:	a915      	add	r1, sp, #84	; 0x54
 8014684:	ec47 6b10 	vmov	d0, r6, r7
 8014688:	4620      	mov	r0, r4
 801468a:	f001 fbeb 	bl	8015e64 <__d2b>
 801468e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8014692:	9004      	str	r0, [sp, #16]
 8014694:	2d00      	cmp	r5, #0
 8014696:	d07c      	beq.n	8014792 <_dtoa_r+0x1da>
 8014698:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801469c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80146a0:	46b2      	mov	sl, r6
 80146a2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80146a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80146aa:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80146ae:	2200      	movs	r2, #0
 80146b0:	4b8b      	ldr	r3, [pc, #556]	; (80148e0 <_dtoa_r+0x328>)
 80146b2:	4650      	mov	r0, sl
 80146b4:	4659      	mov	r1, fp
 80146b6:	f7eb fdf7 	bl	80002a8 <__aeabi_dsub>
 80146ba:	a381      	add	r3, pc, #516	; (adr r3, 80148c0 <_dtoa_r+0x308>)
 80146bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146c0:	f7eb ffaa 	bl	8000618 <__aeabi_dmul>
 80146c4:	a380      	add	r3, pc, #512	; (adr r3, 80148c8 <_dtoa_r+0x310>)
 80146c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146ca:	f7eb fdef 	bl	80002ac <__adddf3>
 80146ce:	4606      	mov	r6, r0
 80146d0:	4628      	mov	r0, r5
 80146d2:	460f      	mov	r7, r1
 80146d4:	f7eb ff36 	bl	8000544 <__aeabi_i2d>
 80146d8:	a37d      	add	r3, pc, #500	; (adr r3, 80148d0 <_dtoa_r+0x318>)
 80146da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146de:	f7eb ff9b 	bl	8000618 <__aeabi_dmul>
 80146e2:	4602      	mov	r2, r0
 80146e4:	460b      	mov	r3, r1
 80146e6:	4630      	mov	r0, r6
 80146e8:	4639      	mov	r1, r7
 80146ea:	f7eb fddf 	bl	80002ac <__adddf3>
 80146ee:	4606      	mov	r6, r0
 80146f0:	460f      	mov	r7, r1
 80146f2:	f7ec fa41 	bl	8000b78 <__aeabi_d2iz>
 80146f6:	2200      	movs	r2, #0
 80146f8:	4682      	mov	sl, r0
 80146fa:	2300      	movs	r3, #0
 80146fc:	4630      	mov	r0, r6
 80146fe:	4639      	mov	r1, r7
 8014700:	f7ec f9fc 	bl	8000afc <__aeabi_dcmplt>
 8014704:	b148      	cbz	r0, 801471a <_dtoa_r+0x162>
 8014706:	4650      	mov	r0, sl
 8014708:	f7eb ff1c 	bl	8000544 <__aeabi_i2d>
 801470c:	4632      	mov	r2, r6
 801470e:	463b      	mov	r3, r7
 8014710:	f7ec f9ea 	bl	8000ae8 <__aeabi_dcmpeq>
 8014714:	b908      	cbnz	r0, 801471a <_dtoa_r+0x162>
 8014716:	f10a 3aff 	add.w	sl, sl, #4294967295
 801471a:	f1ba 0f16 	cmp.w	sl, #22
 801471e:	d859      	bhi.n	80147d4 <_dtoa_r+0x21c>
 8014720:	4970      	ldr	r1, [pc, #448]	; (80148e4 <_dtoa_r+0x32c>)
 8014722:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8014726:	e9dd 2300 	ldrd	r2, r3, [sp]
 801472a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801472e:	f7ec fa03 	bl	8000b38 <__aeabi_dcmpgt>
 8014732:	2800      	cmp	r0, #0
 8014734:	d050      	beq.n	80147d8 <_dtoa_r+0x220>
 8014736:	f10a 3aff 	add.w	sl, sl, #4294967295
 801473a:	2300      	movs	r3, #0
 801473c:	930f      	str	r3, [sp, #60]	; 0x3c
 801473e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014740:	1b5d      	subs	r5, r3, r5
 8014742:	f1b5 0801 	subs.w	r8, r5, #1
 8014746:	bf49      	itett	mi
 8014748:	f1c5 0301 	rsbmi	r3, r5, #1
 801474c:	2300      	movpl	r3, #0
 801474e:	9305      	strmi	r3, [sp, #20]
 8014750:	f04f 0800 	movmi.w	r8, #0
 8014754:	bf58      	it	pl
 8014756:	9305      	strpl	r3, [sp, #20]
 8014758:	f1ba 0f00 	cmp.w	sl, #0
 801475c:	db3e      	blt.n	80147dc <_dtoa_r+0x224>
 801475e:	2300      	movs	r3, #0
 8014760:	44d0      	add	r8, sl
 8014762:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8014766:	9307      	str	r3, [sp, #28]
 8014768:	9b06      	ldr	r3, [sp, #24]
 801476a:	2b09      	cmp	r3, #9
 801476c:	f200 8090 	bhi.w	8014890 <_dtoa_r+0x2d8>
 8014770:	2b05      	cmp	r3, #5
 8014772:	bfc4      	itt	gt
 8014774:	3b04      	subgt	r3, #4
 8014776:	9306      	strgt	r3, [sp, #24]
 8014778:	9b06      	ldr	r3, [sp, #24]
 801477a:	f1a3 0302 	sub.w	r3, r3, #2
 801477e:	bfcc      	ite	gt
 8014780:	2500      	movgt	r5, #0
 8014782:	2501      	movle	r5, #1
 8014784:	2b03      	cmp	r3, #3
 8014786:	f200 808f 	bhi.w	80148a8 <_dtoa_r+0x2f0>
 801478a:	e8df f003 	tbb	[pc, r3]
 801478e:	7f7d      	.short	0x7f7d
 8014790:	7131      	.short	0x7131
 8014792:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8014796:	441d      	add	r5, r3
 8014798:	f205 4032 	addw	r0, r5, #1074	; 0x432
 801479c:	2820      	cmp	r0, #32
 801479e:	dd13      	ble.n	80147c8 <_dtoa_r+0x210>
 80147a0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80147a4:	9b00      	ldr	r3, [sp, #0]
 80147a6:	fa08 f800 	lsl.w	r8, r8, r0
 80147aa:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80147ae:	fa23 f000 	lsr.w	r0, r3, r0
 80147b2:	ea48 0000 	orr.w	r0, r8, r0
 80147b6:	f7eb feb5 	bl	8000524 <__aeabi_ui2d>
 80147ba:	2301      	movs	r3, #1
 80147bc:	4682      	mov	sl, r0
 80147be:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80147c2:	3d01      	subs	r5, #1
 80147c4:	9313      	str	r3, [sp, #76]	; 0x4c
 80147c6:	e772      	b.n	80146ae <_dtoa_r+0xf6>
 80147c8:	9b00      	ldr	r3, [sp, #0]
 80147ca:	f1c0 0020 	rsb	r0, r0, #32
 80147ce:	fa03 f000 	lsl.w	r0, r3, r0
 80147d2:	e7f0      	b.n	80147b6 <_dtoa_r+0x1fe>
 80147d4:	2301      	movs	r3, #1
 80147d6:	e7b1      	b.n	801473c <_dtoa_r+0x184>
 80147d8:	900f      	str	r0, [sp, #60]	; 0x3c
 80147da:	e7b0      	b.n	801473e <_dtoa_r+0x186>
 80147dc:	9b05      	ldr	r3, [sp, #20]
 80147de:	eba3 030a 	sub.w	r3, r3, sl
 80147e2:	9305      	str	r3, [sp, #20]
 80147e4:	f1ca 0300 	rsb	r3, sl, #0
 80147e8:	9307      	str	r3, [sp, #28]
 80147ea:	2300      	movs	r3, #0
 80147ec:	930e      	str	r3, [sp, #56]	; 0x38
 80147ee:	e7bb      	b.n	8014768 <_dtoa_r+0x1b0>
 80147f0:	2301      	movs	r3, #1
 80147f2:	930a      	str	r3, [sp, #40]	; 0x28
 80147f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80147f6:	2b00      	cmp	r3, #0
 80147f8:	dd59      	ble.n	80148ae <_dtoa_r+0x2f6>
 80147fa:	9302      	str	r3, [sp, #8]
 80147fc:	4699      	mov	r9, r3
 80147fe:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8014800:	2200      	movs	r2, #0
 8014802:	6072      	str	r2, [r6, #4]
 8014804:	2204      	movs	r2, #4
 8014806:	f102 0014 	add.w	r0, r2, #20
 801480a:	4298      	cmp	r0, r3
 801480c:	6871      	ldr	r1, [r6, #4]
 801480e:	d953      	bls.n	80148b8 <_dtoa_r+0x300>
 8014810:	4620      	mov	r0, r4
 8014812:	f000 ffe5 	bl	80157e0 <_Balloc>
 8014816:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014818:	6030      	str	r0, [r6, #0]
 801481a:	f1b9 0f0e 	cmp.w	r9, #14
 801481e:	f8d3 b000 	ldr.w	fp, [r3]
 8014822:	f200 80e6 	bhi.w	80149f2 <_dtoa_r+0x43a>
 8014826:	2d00      	cmp	r5, #0
 8014828:	f000 80e3 	beq.w	80149f2 <_dtoa_r+0x43a>
 801482c:	ed9d 7b00 	vldr	d7, [sp]
 8014830:	f1ba 0f00 	cmp.w	sl, #0
 8014834:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8014838:	dd74      	ble.n	8014924 <_dtoa_r+0x36c>
 801483a:	4a2a      	ldr	r2, [pc, #168]	; (80148e4 <_dtoa_r+0x32c>)
 801483c:	f00a 030f 	and.w	r3, sl, #15
 8014840:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8014844:	ed93 7b00 	vldr	d7, [r3]
 8014848:	ea4f 162a 	mov.w	r6, sl, asr #4
 801484c:	06f0      	lsls	r0, r6, #27
 801484e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8014852:	d565      	bpl.n	8014920 <_dtoa_r+0x368>
 8014854:	4b24      	ldr	r3, [pc, #144]	; (80148e8 <_dtoa_r+0x330>)
 8014856:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801485a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801485e:	f7ec f805 	bl	800086c <__aeabi_ddiv>
 8014862:	e9cd 0100 	strd	r0, r1, [sp]
 8014866:	f006 060f 	and.w	r6, r6, #15
 801486a:	2503      	movs	r5, #3
 801486c:	4f1e      	ldr	r7, [pc, #120]	; (80148e8 <_dtoa_r+0x330>)
 801486e:	e04c      	b.n	801490a <_dtoa_r+0x352>
 8014870:	2301      	movs	r3, #1
 8014872:	930a      	str	r3, [sp, #40]	; 0x28
 8014874:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014876:	4453      	add	r3, sl
 8014878:	f103 0901 	add.w	r9, r3, #1
 801487c:	9302      	str	r3, [sp, #8]
 801487e:	464b      	mov	r3, r9
 8014880:	2b01      	cmp	r3, #1
 8014882:	bfb8      	it	lt
 8014884:	2301      	movlt	r3, #1
 8014886:	e7ba      	b.n	80147fe <_dtoa_r+0x246>
 8014888:	2300      	movs	r3, #0
 801488a:	e7b2      	b.n	80147f2 <_dtoa_r+0x23a>
 801488c:	2300      	movs	r3, #0
 801488e:	e7f0      	b.n	8014872 <_dtoa_r+0x2ba>
 8014890:	2501      	movs	r5, #1
 8014892:	2300      	movs	r3, #0
 8014894:	9306      	str	r3, [sp, #24]
 8014896:	950a      	str	r5, [sp, #40]	; 0x28
 8014898:	f04f 33ff 	mov.w	r3, #4294967295
 801489c:	9302      	str	r3, [sp, #8]
 801489e:	4699      	mov	r9, r3
 80148a0:	2200      	movs	r2, #0
 80148a2:	2312      	movs	r3, #18
 80148a4:	920b      	str	r2, [sp, #44]	; 0x2c
 80148a6:	e7aa      	b.n	80147fe <_dtoa_r+0x246>
 80148a8:	2301      	movs	r3, #1
 80148aa:	930a      	str	r3, [sp, #40]	; 0x28
 80148ac:	e7f4      	b.n	8014898 <_dtoa_r+0x2e0>
 80148ae:	2301      	movs	r3, #1
 80148b0:	9302      	str	r3, [sp, #8]
 80148b2:	4699      	mov	r9, r3
 80148b4:	461a      	mov	r2, r3
 80148b6:	e7f5      	b.n	80148a4 <_dtoa_r+0x2ec>
 80148b8:	3101      	adds	r1, #1
 80148ba:	6071      	str	r1, [r6, #4]
 80148bc:	0052      	lsls	r2, r2, #1
 80148be:	e7a2      	b.n	8014806 <_dtoa_r+0x24e>
 80148c0:	636f4361 	.word	0x636f4361
 80148c4:	3fd287a7 	.word	0x3fd287a7
 80148c8:	8b60c8b3 	.word	0x8b60c8b3
 80148cc:	3fc68a28 	.word	0x3fc68a28
 80148d0:	509f79fb 	.word	0x509f79fb
 80148d4:	3fd34413 	.word	0x3fd34413
 80148d8:	7ff00000 	.word	0x7ff00000
 80148dc:	08018b6c 	.word	0x08018b6c
 80148e0:	3ff80000 	.word	0x3ff80000
 80148e4:	08018a70 	.word	0x08018a70
 80148e8:	08018a48 	.word	0x08018a48
 80148ec:	08018a39 	.word	0x08018a39
 80148f0:	07f1      	lsls	r1, r6, #31
 80148f2:	d508      	bpl.n	8014906 <_dtoa_r+0x34e>
 80148f4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80148f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80148fc:	f7eb fe8c 	bl	8000618 <__aeabi_dmul>
 8014900:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014904:	3501      	adds	r5, #1
 8014906:	1076      	asrs	r6, r6, #1
 8014908:	3708      	adds	r7, #8
 801490a:	2e00      	cmp	r6, #0
 801490c:	d1f0      	bne.n	80148f0 <_dtoa_r+0x338>
 801490e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014912:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014916:	f7eb ffa9 	bl	800086c <__aeabi_ddiv>
 801491a:	e9cd 0100 	strd	r0, r1, [sp]
 801491e:	e01a      	b.n	8014956 <_dtoa_r+0x39e>
 8014920:	2502      	movs	r5, #2
 8014922:	e7a3      	b.n	801486c <_dtoa_r+0x2b4>
 8014924:	f000 80a0 	beq.w	8014a68 <_dtoa_r+0x4b0>
 8014928:	f1ca 0600 	rsb	r6, sl, #0
 801492c:	4b9f      	ldr	r3, [pc, #636]	; (8014bac <_dtoa_r+0x5f4>)
 801492e:	4fa0      	ldr	r7, [pc, #640]	; (8014bb0 <_dtoa_r+0x5f8>)
 8014930:	f006 020f 	and.w	r2, r6, #15
 8014934:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014938:	e9d3 2300 	ldrd	r2, r3, [r3]
 801493c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8014940:	f7eb fe6a 	bl	8000618 <__aeabi_dmul>
 8014944:	e9cd 0100 	strd	r0, r1, [sp]
 8014948:	1136      	asrs	r6, r6, #4
 801494a:	2300      	movs	r3, #0
 801494c:	2502      	movs	r5, #2
 801494e:	2e00      	cmp	r6, #0
 8014950:	d17f      	bne.n	8014a52 <_dtoa_r+0x49a>
 8014952:	2b00      	cmp	r3, #0
 8014954:	d1e1      	bne.n	801491a <_dtoa_r+0x362>
 8014956:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014958:	2b00      	cmp	r3, #0
 801495a:	f000 8087 	beq.w	8014a6c <_dtoa_r+0x4b4>
 801495e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8014962:	2200      	movs	r2, #0
 8014964:	4b93      	ldr	r3, [pc, #588]	; (8014bb4 <_dtoa_r+0x5fc>)
 8014966:	4630      	mov	r0, r6
 8014968:	4639      	mov	r1, r7
 801496a:	f7ec f8c7 	bl	8000afc <__aeabi_dcmplt>
 801496e:	2800      	cmp	r0, #0
 8014970:	d07c      	beq.n	8014a6c <_dtoa_r+0x4b4>
 8014972:	f1b9 0f00 	cmp.w	r9, #0
 8014976:	d079      	beq.n	8014a6c <_dtoa_r+0x4b4>
 8014978:	9b02      	ldr	r3, [sp, #8]
 801497a:	2b00      	cmp	r3, #0
 801497c:	dd35      	ble.n	80149ea <_dtoa_r+0x432>
 801497e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8014982:	9308      	str	r3, [sp, #32]
 8014984:	4639      	mov	r1, r7
 8014986:	2200      	movs	r2, #0
 8014988:	4b8b      	ldr	r3, [pc, #556]	; (8014bb8 <_dtoa_r+0x600>)
 801498a:	4630      	mov	r0, r6
 801498c:	f7eb fe44 	bl	8000618 <__aeabi_dmul>
 8014990:	e9cd 0100 	strd	r0, r1, [sp]
 8014994:	9f02      	ldr	r7, [sp, #8]
 8014996:	3501      	adds	r5, #1
 8014998:	4628      	mov	r0, r5
 801499a:	f7eb fdd3 	bl	8000544 <__aeabi_i2d>
 801499e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80149a2:	f7eb fe39 	bl	8000618 <__aeabi_dmul>
 80149a6:	2200      	movs	r2, #0
 80149a8:	4b84      	ldr	r3, [pc, #528]	; (8014bbc <_dtoa_r+0x604>)
 80149aa:	f7eb fc7f 	bl	80002ac <__adddf3>
 80149ae:	4605      	mov	r5, r0
 80149b0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80149b4:	2f00      	cmp	r7, #0
 80149b6:	d15d      	bne.n	8014a74 <_dtoa_r+0x4bc>
 80149b8:	2200      	movs	r2, #0
 80149ba:	4b81      	ldr	r3, [pc, #516]	; (8014bc0 <_dtoa_r+0x608>)
 80149bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80149c0:	f7eb fc72 	bl	80002a8 <__aeabi_dsub>
 80149c4:	462a      	mov	r2, r5
 80149c6:	4633      	mov	r3, r6
 80149c8:	e9cd 0100 	strd	r0, r1, [sp]
 80149cc:	f7ec f8b4 	bl	8000b38 <__aeabi_dcmpgt>
 80149d0:	2800      	cmp	r0, #0
 80149d2:	f040 8288 	bne.w	8014ee6 <_dtoa_r+0x92e>
 80149d6:	462a      	mov	r2, r5
 80149d8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80149dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80149e0:	f7ec f88c 	bl	8000afc <__aeabi_dcmplt>
 80149e4:	2800      	cmp	r0, #0
 80149e6:	f040 827c 	bne.w	8014ee2 <_dtoa_r+0x92a>
 80149ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80149ee:	e9cd 2300 	strd	r2, r3, [sp]
 80149f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80149f4:	2b00      	cmp	r3, #0
 80149f6:	f2c0 8150 	blt.w	8014c9a <_dtoa_r+0x6e2>
 80149fa:	f1ba 0f0e 	cmp.w	sl, #14
 80149fe:	f300 814c 	bgt.w	8014c9a <_dtoa_r+0x6e2>
 8014a02:	4b6a      	ldr	r3, [pc, #424]	; (8014bac <_dtoa_r+0x5f4>)
 8014a04:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8014a08:	ed93 7b00 	vldr	d7, [r3]
 8014a0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014a0e:	2b00      	cmp	r3, #0
 8014a10:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014a14:	f280 80d8 	bge.w	8014bc8 <_dtoa_r+0x610>
 8014a18:	f1b9 0f00 	cmp.w	r9, #0
 8014a1c:	f300 80d4 	bgt.w	8014bc8 <_dtoa_r+0x610>
 8014a20:	f040 825e 	bne.w	8014ee0 <_dtoa_r+0x928>
 8014a24:	2200      	movs	r2, #0
 8014a26:	4b66      	ldr	r3, [pc, #408]	; (8014bc0 <_dtoa_r+0x608>)
 8014a28:	ec51 0b17 	vmov	r0, r1, d7
 8014a2c:	f7eb fdf4 	bl	8000618 <__aeabi_dmul>
 8014a30:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014a34:	f7ec f876 	bl	8000b24 <__aeabi_dcmpge>
 8014a38:	464f      	mov	r7, r9
 8014a3a:	464e      	mov	r6, r9
 8014a3c:	2800      	cmp	r0, #0
 8014a3e:	f040 8234 	bne.w	8014eaa <_dtoa_r+0x8f2>
 8014a42:	2331      	movs	r3, #49	; 0x31
 8014a44:	f10b 0501 	add.w	r5, fp, #1
 8014a48:	f88b 3000 	strb.w	r3, [fp]
 8014a4c:	f10a 0a01 	add.w	sl, sl, #1
 8014a50:	e22f      	b.n	8014eb2 <_dtoa_r+0x8fa>
 8014a52:	07f2      	lsls	r2, r6, #31
 8014a54:	d505      	bpl.n	8014a62 <_dtoa_r+0x4aa>
 8014a56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014a5a:	f7eb fddd 	bl	8000618 <__aeabi_dmul>
 8014a5e:	3501      	adds	r5, #1
 8014a60:	2301      	movs	r3, #1
 8014a62:	1076      	asrs	r6, r6, #1
 8014a64:	3708      	adds	r7, #8
 8014a66:	e772      	b.n	801494e <_dtoa_r+0x396>
 8014a68:	2502      	movs	r5, #2
 8014a6a:	e774      	b.n	8014956 <_dtoa_r+0x39e>
 8014a6c:	f8cd a020 	str.w	sl, [sp, #32]
 8014a70:	464f      	mov	r7, r9
 8014a72:	e791      	b.n	8014998 <_dtoa_r+0x3e0>
 8014a74:	4b4d      	ldr	r3, [pc, #308]	; (8014bac <_dtoa_r+0x5f4>)
 8014a76:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8014a7a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8014a7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	d047      	beq.n	8014b14 <_dtoa_r+0x55c>
 8014a84:	4602      	mov	r2, r0
 8014a86:	460b      	mov	r3, r1
 8014a88:	2000      	movs	r0, #0
 8014a8a:	494e      	ldr	r1, [pc, #312]	; (8014bc4 <_dtoa_r+0x60c>)
 8014a8c:	f7eb feee 	bl	800086c <__aeabi_ddiv>
 8014a90:	462a      	mov	r2, r5
 8014a92:	4633      	mov	r3, r6
 8014a94:	f7eb fc08 	bl	80002a8 <__aeabi_dsub>
 8014a98:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8014a9c:	465d      	mov	r5, fp
 8014a9e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014aa2:	f7ec f869 	bl	8000b78 <__aeabi_d2iz>
 8014aa6:	4606      	mov	r6, r0
 8014aa8:	f7eb fd4c 	bl	8000544 <__aeabi_i2d>
 8014aac:	4602      	mov	r2, r0
 8014aae:	460b      	mov	r3, r1
 8014ab0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014ab4:	f7eb fbf8 	bl	80002a8 <__aeabi_dsub>
 8014ab8:	3630      	adds	r6, #48	; 0x30
 8014aba:	f805 6b01 	strb.w	r6, [r5], #1
 8014abe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8014ac2:	e9cd 0100 	strd	r0, r1, [sp]
 8014ac6:	f7ec f819 	bl	8000afc <__aeabi_dcmplt>
 8014aca:	2800      	cmp	r0, #0
 8014acc:	d163      	bne.n	8014b96 <_dtoa_r+0x5de>
 8014ace:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014ad2:	2000      	movs	r0, #0
 8014ad4:	4937      	ldr	r1, [pc, #220]	; (8014bb4 <_dtoa_r+0x5fc>)
 8014ad6:	f7eb fbe7 	bl	80002a8 <__aeabi_dsub>
 8014ada:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8014ade:	f7ec f80d 	bl	8000afc <__aeabi_dcmplt>
 8014ae2:	2800      	cmp	r0, #0
 8014ae4:	f040 80b7 	bne.w	8014c56 <_dtoa_r+0x69e>
 8014ae8:	eba5 030b 	sub.w	r3, r5, fp
 8014aec:	429f      	cmp	r7, r3
 8014aee:	f77f af7c 	ble.w	80149ea <_dtoa_r+0x432>
 8014af2:	2200      	movs	r2, #0
 8014af4:	4b30      	ldr	r3, [pc, #192]	; (8014bb8 <_dtoa_r+0x600>)
 8014af6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014afa:	f7eb fd8d 	bl	8000618 <__aeabi_dmul>
 8014afe:	2200      	movs	r2, #0
 8014b00:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8014b04:	4b2c      	ldr	r3, [pc, #176]	; (8014bb8 <_dtoa_r+0x600>)
 8014b06:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014b0a:	f7eb fd85 	bl	8000618 <__aeabi_dmul>
 8014b0e:	e9cd 0100 	strd	r0, r1, [sp]
 8014b12:	e7c4      	b.n	8014a9e <_dtoa_r+0x4e6>
 8014b14:	462a      	mov	r2, r5
 8014b16:	4633      	mov	r3, r6
 8014b18:	f7eb fd7e 	bl	8000618 <__aeabi_dmul>
 8014b1c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8014b20:	eb0b 0507 	add.w	r5, fp, r7
 8014b24:	465e      	mov	r6, fp
 8014b26:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014b2a:	f7ec f825 	bl	8000b78 <__aeabi_d2iz>
 8014b2e:	4607      	mov	r7, r0
 8014b30:	f7eb fd08 	bl	8000544 <__aeabi_i2d>
 8014b34:	3730      	adds	r7, #48	; 0x30
 8014b36:	4602      	mov	r2, r0
 8014b38:	460b      	mov	r3, r1
 8014b3a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014b3e:	f7eb fbb3 	bl	80002a8 <__aeabi_dsub>
 8014b42:	f806 7b01 	strb.w	r7, [r6], #1
 8014b46:	42ae      	cmp	r6, r5
 8014b48:	e9cd 0100 	strd	r0, r1, [sp]
 8014b4c:	f04f 0200 	mov.w	r2, #0
 8014b50:	d126      	bne.n	8014ba0 <_dtoa_r+0x5e8>
 8014b52:	4b1c      	ldr	r3, [pc, #112]	; (8014bc4 <_dtoa_r+0x60c>)
 8014b54:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014b58:	f7eb fba8 	bl	80002ac <__adddf3>
 8014b5c:	4602      	mov	r2, r0
 8014b5e:	460b      	mov	r3, r1
 8014b60:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014b64:	f7eb ffe8 	bl	8000b38 <__aeabi_dcmpgt>
 8014b68:	2800      	cmp	r0, #0
 8014b6a:	d174      	bne.n	8014c56 <_dtoa_r+0x69e>
 8014b6c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8014b70:	2000      	movs	r0, #0
 8014b72:	4914      	ldr	r1, [pc, #80]	; (8014bc4 <_dtoa_r+0x60c>)
 8014b74:	f7eb fb98 	bl	80002a8 <__aeabi_dsub>
 8014b78:	4602      	mov	r2, r0
 8014b7a:	460b      	mov	r3, r1
 8014b7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014b80:	f7eb ffbc 	bl	8000afc <__aeabi_dcmplt>
 8014b84:	2800      	cmp	r0, #0
 8014b86:	f43f af30 	beq.w	80149ea <_dtoa_r+0x432>
 8014b8a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014b8e:	2b30      	cmp	r3, #48	; 0x30
 8014b90:	f105 32ff 	add.w	r2, r5, #4294967295
 8014b94:	d002      	beq.n	8014b9c <_dtoa_r+0x5e4>
 8014b96:	f8dd a020 	ldr.w	sl, [sp, #32]
 8014b9a:	e04a      	b.n	8014c32 <_dtoa_r+0x67a>
 8014b9c:	4615      	mov	r5, r2
 8014b9e:	e7f4      	b.n	8014b8a <_dtoa_r+0x5d2>
 8014ba0:	4b05      	ldr	r3, [pc, #20]	; (8014bb8 <_dtoa_r+0x600>)
 8014ba2:	f7eb fd39 	bl	8000618 <__aeabi_dmul>
 8014ba6:	e9cd 0100 	strd	r0, r1, [sp]
 8014baa:	e7bc      	b.n	8014b26 <_dtoa_r+0x56e>
 8014bac:	08018a70 	.word	0x08018a70
 8014bb0:	08018a48 	.word	0x08018a48
 8014bb4:	3ff00000 	.word	0x3ff00000
 8014bb8:	40240000 	.word	0x40240000
 8014bbc:	401c0000 	.word	0x401c0000
 8014bc0:	40140000 	.word	0x40140000
 8014bc4:	3fe00000 	.word	0x3fe00000
 8014bc8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8014bcc:	465d      	mov	r5, fp
 8014bce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014bd2:	4630      	mov	r0, r6
 8014bd4:	4639      	mov	r1, r7
 8014bd6:	f7eb fe49 	bl	800086c <__aeabi_ddiv>
 8014bda:	f7eb ffcd 	bl	8000b78 <__aeabi_d2iz>
 8014bde:	4680      	mov	r8, r0
 8014be0:	f7eb fcb0 	bl	8000544 <__aeabi_i2d>
 8014be4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014be8:	f7eb fd16 	bl	8000618 <__aeabi_dmul>
 8014bec:	4602      	mov	r2, r0
 8014bee:	460b      	mov	r3, r1
 8014bf0:	4630      	mov	r0, r6
 8014bf2:	4639      	mov	r1, r7
 8014bf4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8014bf8:	f7eb fb56 	bl	80002a8 <__aeabi_dsub>
 8014bfc:	f805 6b01 	strb.w	r6, [r5], #1
 8014c00:	eba5 060b 	sub.w	r6, r5, fp
 8014c04:	45b1      	cmp	r9, r6
 8014c06:	4602      	mov	r2, r0
 8014c08:	460b      	mov	r3, r1
 8014c0a:	d139      	bne.n	8014c80 <_dtoa_r+0x6c8>
 8014c0c:	f7eb fb4e 	bl	80002ac <__adddf3>
 8014c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014c14:	4606      	mov	r6, r0
 8014c16:	460f      	mov	r7, r1
 8014c18:	f7eb ff8e 	bl	8000b38 <__aeabi_dcmpgt>
 8014c1c:	b9c8      	cbnz	r0, 8014c52 <_dtoa_r+0x69a>
 8014c1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014c22:	4630      	mov	r0, r6
 8014c24:	4639      	mov	r1, r7
 8014c26:	f7eb ff5f 	bl	8000ae8 <__aeabi_dcmpeq>
 8014c2a:	b110      	cbz	r0, 8014c32 <_dtoa_r+0x67a>
 8014c2c:	f018 0f01 	tst.w	r8, #1
 8014c30:	d10f      	bne.n	8014c52 <_dtoa_r+0x69a>
 8014c32:	9904      	ldr	r1, [sp, #16]
 8014c34:	4620      	mov	r0, r4
 8014c36:	f000 fe07 	bl	8015848 <_Bfree>
 8014c3a:	2300      	movs	r3, #0
 8014c3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014c3e:	702b      	strb	r3, [r5, #0]
 8014c40:	f10a 0301 	add.w	r3, sl, #1
 8014c44:	6013      	str	r3, [r2, #0]
 8014c46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014c48:	2b00      	cmp	r3, #0
 8014c4a:	f000 8241 	beq.w	80150d0 <_dtoa_r+0xb18>
 8014c4e:	601d      	str	r5, [r3, #0]
 8014c50:	e23e      	b.n	80150d0 <_dtoa_r+0xb18>
 8014c52:	f8cd a020 	str.w	sl, [sp, #32]
 8014c56:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8014c5a:	2a39      	cmp	r2, #57	; 0x39
 8014c5c:	f105 33ff 	add.w	r3, r5, #4294967295
 8014c60:	d108      	bne.n	8014c74 <_dtoa_r+0x6bc>
 8014c62:	459b      	cmp	fp, r3
 8014c64:	d10a      	bne.n	8014c7c <_dtoa_r+0x6c4>
 8014c66:	9b08      	ldr	r3, [sp, #32]
 8014c68:	3301      	adds	r3, #1
 8014c6a:	9308      	str	r3, [sp, #32]
 8014c6c:	2330      	movs	r3, #48	; 0x30
 8014c6e:	f88b 3000 	strb.w	r3, [fp]
 8014c72:	465b      	mov	r3, fp
 8014c74:	781a      	ldrb	r2, [r3, #0]
 8014c76:	3201      	adds	r2, #1
 8014c78:	701a      	strb	r2, [r3, #0]
 8014c7a:	e78c      	b.n	8014b96 <_dtoa_r+0x5de>
 8014c7c:	461d      	mov	r5, r3
 8014c7e:	e7ea      	b.n	8014c56 <_dtoa_r+0x69e>
 8014c80:	2200      	movs	r2, #0
 8014c82:	4b9b      	ldr	r3, [pc, #620]	; (8014ef0 <_dtoa_r+0x938>)
 8014c84:	f7eb fcc8 	bl	8000618 <__aeabi_dmul>
 8014c88:	2200      	movs	r2, #0
 8014c8a:	2300      	movs	r3, #0
 8014c8c:	4606      	mov	r6, r0
 8014c8e:	460f      	mov	r7, r1
 8014c90:	f7eb ff2a 	bl	8000ae8 <__aeabi_dcmpeq>
 8014c94:	2800      	cmp	r0, #0
 8014c96:	d09a      	beq.n	8014bce <_dtoa_r+0x616>
 8014c98:	e7cb      	b.n	8014c32 <_dtoa_r+0x67a>
 8014c9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014c9c:	2a00      	cmp	r2, #0
 8014c9e:	f000 808b 	beq.w	8014db8 <_dtoa_r+0x800>
 8014ca2:	9a06      	ldr	r2, [sp, #24]
 8014ca4:	2a01      	cmp	r2, #1
 8014ca6:	dc6e      	bgt.n	8014d86 <_dtoa_r+0x7ce>
 8014ca8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014caa:	2a00      	cmp	r2, #0
 8014cac:	d067      	beq.n	8014d7e <_dtoa_r+0x7c6>
 8014cae:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8014cb2:	9f07      	ldr	r7, [sp, #28]
 8014cb4:	9d05      	ldr	r5, [sp, #20]
 8014cb6:	9a05      	ldr	r2, [sp, #20]
 8014cb8:	2101      	movs	r1, #1
 8014cba:	441a      	add	r2, r3
 8014cbc:	4620      	mov	r0, r4
 8014cbe:	9205      	str	r2, [sp, #20]
 8014cc0:	4498      	add	r8, r3
 8014cc2:	f000 fe9f 	bl	8015a04 <__i2b>
 8014cc6:	4606      	mov	r6, r0
 8014cc8:	2d00      	cmp	r5, #0
 8014cca:	dd0c      	ble.n	8014ce6 <_dtoa_r+0x72e>
 8014ccc:	f1b8 0f00 	cmp.w	r8, #0
 8014cd0:	dd09      	ble.n	8014ce6 <_dtoa_r+0x72e>
 8014cd2:	4545      	cmp	r5, r8
 8014cd4:	9a05      	ldr	r2, [sp, #20]
 8014cd6:	462b      	mov	r3, r5
 8014cd8:	bfa8      	it	ge
 8014cda:	4643      	movge	r3, r8
 8014cdc:	1ad2      	subs	r2, r2, r3
 8014cde:	9205      	str	r2, [sp, #20]
 8014ce0:	1aed      	subs	r5, r5, r3
 8014ce2:	eba8 0803 	sub.w	r8, r8, r3
 8014ce6:	9b07      	ldr	r3, [sp, #28]
 8014ce8:	b1eb      	cbz	r3, 8014d26 <_dtoa_r+0x76e>
 8014cea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014cec:	2b00      	cmp	r3, #0
 8014cee:	d067      	beq.n	8014dc0 <_dtoa_r+0x808>
 8014cf0:	b18f      	cbz	r7, 8014d16 <_dtoa_r+0x75e>
 8014cf2:	4631      	mov	r1, r6
 8014cf4:	463a      	mov	r2, r7
 8014cf6:	4620      	mov	r0, r4
 8014cf8:	f000 ff24 	bl	8015b44 <__pow5mult>
 8014cfc:	9a04      	ldr	r2, [sp, #16]
 8014cfe:	4601      	mov	r1, r0
 8014d00:	4606      	mov	r6, r0
 8014d02:	4620      	mov	r0, r4
 8014d04:	f000 fe87 	bl	8015a16 <__multiply>
 8014d08:	9904      	ldr	r1, [sp, #16]
 8014d0a:	9008      	str	r0, [sp, #32]
 8014d0c:	4620      	mov	r0, r4
 8014d0e:	f000 fd9b 	bl	8015848 <_Bfree>
 8014d12:	9b08      	ldr	r3, [sp, #32]
 8014d14:	9304      	str	r3, [sp, #16]
 8014d16:	9b07      	ldr	r3, [sp, #28]
 8014d18:	1bda      	subs	r2, r3, r7
 8014d1a:	d004      	beq.n	8014d26 <_dtoa_r+0x76e>
 8014d1c:	9904      	ldr	r1, [sp, #16]
 8014d1e:	4620      	mov	r0, r4
 8014d20:	f000 ff10 	bl	8015b44 <__pow5mult>
 8014d24:	9004      	str	r0, [sp, #16]
 8014d26:	2101      	movs	r1, #1
 8014d28:	4620      	mov	r0, r4
 8014d2a:	f000 fe6b 	bl	8015a04 <__i2b>
 8014d2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014d30:	4607      	mov	r7, r0
 8014d32:	2b00      	cmp	r3, #0
 8014d34:	f000 81d0 	beq.w	80150d8 <_dtoa_r+0xb20>
 8014d38:	461a      	mov	r2, r3
 8014d3a:	4601      	mov	r1, r0
 8014d3c:	4620      	mov	r0, r4
 8014d3e:	f000 ff01 	bl	8015b44 <__pow5mult>
 8014d42:	9b06      	ldr	r3, [sp, #24]
 8014d44:	2b01      	cmp	r3, #1
 8014d46:	4607      	mov	r7, r0
 8014d48:	dc40      	bgt.n	8014dcc <_dtoa_r+0x814>
 8014d4a:	9b00      	ldr	r3, [sp, #0]
 8014d4c:	2b00      	cmp	r3, #0
 8014d4e:	d139      	bne.n	8014dc4 <_dtoa_r+0x80c>
 8014d50:	9b01      	ldr	r3, [sp, #4]
 8014d52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014d56:	2b00      	cmp	r3, #0
 8014d58:	d136      	bne.n	8014dc8 <_dtoa_r+0x810>
 8014d5a:	9b01      	ldr	r3, [sp, #4]
 8014d5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014d60:	0d1b      	lsrs	r3, r3, #20
 8014d62:	051b      	lsls	r3, r3, #20
 8014d64:	b12b      	cbz	r3, 8014d72 <_dtoa_r+0x7ba>
 8014d66:	9b05      	ldr	r3, [sp, #20]
 8014d68:	3301      	adds	r3, #1
 8014d6a:	9305      	str	r3, [sp, #20]
 8014d6c:	f108 0801 	add.w	r8, r8, #1
 8014d70:	2301      	movs	r3, #1
 8014d72:	9307      	str	r3, [sp, #28]
 8014d74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014d76:	2b00      	cmp	r3, #0
 8014d78:	d12a      	bne.n	8014dd0 <_dtoa_r+0x818>
 8014d7a:	2001      	movs	r0, #1
 8014d7c:	e030      	b.n	8014de0 <_dtoa_r+0x828>
 8014d7e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014d80:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8014d84:	e795      	b.n	8014cb2 <_dtoa_r+0x6fa>
 8014d86:	9b07      	ldr	r3, [sp, #28]
 8014d88:	f109 37ff 	add.w	r7, r9, #4294967295
 8014d8c:	42bb      	cmp	r3, r7
 8014d8e:	bfbf      	itttt	lt
 8014d90:	9b07      	ldrlt	r3, [sp, #28]
 8014d92:	9707      	strlt	r7, [sp, #28]
 8014d94:	1afa      	sublt	r2, r7, r3
 8014d96:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8014d98:	bfbb      	ittet	lt
 8014d9a:	189b      	addlt	r3, r3, r2
 8014d9c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8014d9e:	1bdf      	subge	r7, r3, r7
 8014da0:	2700      	movlt	r7, #0
 8014da2:	f1b9 0f00 	cmp.w	r9, #0
 8014da6:	bfb5      	itete	lt
 8014da8:	9b05      	ldrlt	r3, [sp, #20]
 8014daa:	9d05      	ldrge	r5, [sp, #20]
 8014dac:	eba3 0509 	sublt.w	r5, r3, r9
 8014db0:	464b      	movge	r3, r9
 8014db2:	bfb8      	it	lt
 8014db4:	2300      	movlt	r3, #0
 8014db6:	e77e      	b.n	8014cb6 <_dtoa_r+0x6fe>
 8014db8:	9f07      	ldr	r7, [sp, #28]
 8014dba:	9d05      	ldr	r5, [sp, #20]
 8014dbc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8014dbe:	e783      	b.n	8014cc8 <_dtoa_r+0x710>
 8014dc0:	9a07      	ldr	r2, [sp, #28]
 8014dc2:	e7ab      	b.n	8014d1c <_dtoa_r+0x764>
 8014dc4:	2300      	movs	r3, #0
 8014dc6:	e7d4      	b.n	8014d72 <_dtoa_r+0x7ba>
 8014dc8:	9b00      	ldr	r3, [sp, #0]
 8014dca:	e7d2      	b.n	8014d72 <_dtoa_r+0x7ba>
 8014dcc:	2300      	movs	r3, #0
 8014dce:	9307      	str	r3, [sp, #28]
 8014dd0:	693b      	ldr	r3, [r7, #16]
 8014dd2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8014dd6:	6918      	ldr	r0, [r3, #16]
 8014dd8:	f000 fdc6 	bl	8015968 <__hi0bits>
 8014ddc:	f1c0 0020 	rsb	r0, r0, #32
 8014de0:	4440      	add	r0, r8
 8014de2:	f010 001f 	ands.w	r0, r0, #31
 8014de6:	d047      	beq.n	8014e78 <_dtoa_r+0x8c0>
 8014de8:	f1c0 0320 	rsb	r3, r0, #32
 8014dec:	2b04      	cmp	r3, #4
 8014dee:	dd3b      	ble.n	8014e68 <_dtoa_r+0x8b0>
 8014df0:	9b05      	ldr	r3, [sp, #20]
 8014df2:	f1c0 001c 	rsb	r0, r0, #28
 8014df6:	4403      	add	r3, r0
 8014df8:	9305      	str	r3, [sp, #20]
 8014dfa:	4405      	add	r5, r0
 8014dfc:	4480      	add	r8, r0
 8014dfe:	9b05      	ldr	r3, [sp, #20]
 8014e00:	2b00      	cmp	r3, #0
 8014e02:	dd05      	ble.n	8014e10 <_dtoa_r+0x858>
 8014e04:	461a      	mov	r2, r3
 8014e06:	9904      	ldr	r1, [sp, #16]
 8014e08:	4620      	mov	r0, r4
 8014e0a:	f000 fee9 	bl	8015be0 <__lshift>
 8014e0e:	9004      	str	r0, [sp, #16]
 8014e10:	f1b8 0f00 	cmp.w	r8, #0
 8014e14:	dd05      	ble.n	8014e22 <_dtoa_r+0x86a>
 8014e16:	4639      	mov	r1, r7
 8014e18:	4642      	mov	r2, r8
 8014e1a:	4620      	mov	r0, r4
 8014e1c:	f000 fee0 	bl	8015be0 <__lshift>
 8014e20:	4607      	mov	r7, r0
 8014e22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014e24:	b353      	cbz	r3, 8014e7c <_dtoa_r+0x8c4>
 8014e26:	4639      	mov	r1, r7
 8014e28:	9804      	ldr	r0, [sp, #16]
 8014e2a:	f000 ff2d 	bl	8015c88 <__mcmp>
 8014e2e:	2800      	cmp	r0, #0
 8014e30:	da24      	bge.n	8014e7c <_dtoa_r+0x8c4>
 8014e32:	2300      	movs	r3, #0
 8014e34:	220a      	movs	r2, #10
 8014e36:	9904      	ldr	r1, [sp, #16]
 8014e38:	4620      	mov	r0, r4
 8014e3a:	f000 fd1c 	bl	8015876 <__multadd>
 8014e3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014e40:	9004      	str	r0, [sp, #16]
 8014e42:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014e46:	2b00      	cmp	r3, #0
 8014e48:	f000 814d 	beq.w	80150e6 <_dtoa_r+0xb2e>
 8014e4c:	2300      	movs	r3, #0
 8014e4e:	4631      	mov	r1, r6
 8014e50:	220a      	movs	r2, #10
 8014e52:	4620      	mov	r0, r4
 8014e54:	f000 fd0f 	bl	8015876 <__multadd>
 8014e58:	9b02      	ldr	r3, [sp, #8]
 8014e5a:	2b00      	cmp	r3, #0
 8014e5c:	4606      	mov	r6, r0
 8014e5e:	dc4f      	bgt.n	8014f00 <_dtoa_r+0x948>
 8014e60:	9b06      	ldr	r3, [sp, #24]
 8014e62:	2b02      	cmp	r3, #2
 8014e64:	dd4c      	ble.n	8014f00 <_dtoa_r+0x948>
 8014e66:	e011      	b.n	8014e8c <_dtoa_r+0x8d4>
 8014e68:	d0c9      	beq.n	8014dfe <_dtoa_r+0x846>
 8014e6a:	9a05      	ldr	r2, [sp, #20]
 8014e6c:	331c      	adds	r3, #28
 8014e6e:	441a      	add	r2, r3
 8014e70:	9205      	str	r2, [sp, #20]
 8014e72:	441d      	add	r5, r3
 8014e74:	4498      	add	r8, r3
 8014e76:	e7c2      	b.n	8014dfe <_dtoa_r+0x846>
 8014e78:	4603      	mov	r3, r0
 8014e7a:	e7f6      	b.n	8014e6a <_dtoa_r+0x8b2>
 8014e7c:	f1b9 0f00 	cmp.w	r9, #0
 8014e80:	dc38      	bgt.n	8014ef4 <_dtoa_r+0x93c>
 8014e82:	9b06      	ldr	r3, [sp, #24]
 8014e84:	2b02      	cmp	r3, #2
 8014e86:	dd35      	ble.n	8014ef4 <_dtoa_r+0x93c>
 8014e88:	f8cd 9008 	str.w	r9, [sp, #8]
 8014e8c:	9b02      	ldr	r3, [sp, #8]
 8014e8e:	b963      	cbnz	r3, 8014eaa <_dtoa_r+0x8f2>
 8014e90:	4639      	mov	r1, r7
 8014e92:	2205      	movs	r2, #5
 8014e94:	4620      	mov	r0, r4
 8014e96:	f000 fcee 	bl	8015876 <__multadd>
 8014e9a:	4601      	mov	r1, r0
 8014e9c:	4607      	mov	r7, r0
 8014e9e:	9804      	ldr	r0, [sp, #16]
 8014ea0:	f000 fef2 	bl	8015c88 <__mcmp>
 8014ea4:	2800      	cmp	r0, #0
 8014ea6:	f73f adcc 	bgt.w	8014a42 <_dtoa_r+0x48a>
 8014eaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014eac:	465d      	mov	r5, fp
 8014eae:	ea6f 0a03 	mvn.w	sl, r3
 8014eb2:	f04f 0900 	mov.w	r9, #0
 8014eb6:	4639      	mov	r1, r7
 8014eb8:	4620      	mov	r0, r4
 8014eba:	f000 fcc5 	bl	8015848 <_Bfree>
 8014ebe:	2e00      	cmp	r6, #0
 8014ec0:	f43f aeb7 	beq.w	8014c32 <_dtoa_r+0x67a>
 8014ec4:	f1b9 0f00 	cmp.w	r9, #0
 8014ec8:	d005      	beq.n	8014ed6 <_dtoa_r+0x91e>
 8014eca:	45b1      	cmp	r9, r6
 8014ecc:	d003      	beq.n	8014ed6 <_dtoa_r+0x91e>
 8014ece:	4649      	mov	r1, r9
 8014ed0:	4620      	mov	r0, r4
 8014ed2:	f000 fcb9 	bl	8015848 <_Bfree>
 8014ed6:	4631      	mov	r1, r6
 8014ed8:	4620      	mov	r0, r4
 8014eda:	f000 fcb5 	bl	8015848 <_Bfree>
 8014ede:	e6a8      	b.n	8014c32 <_dtoa_r+0x67a>
 8014ee0:	2700      	movs	r7, #0
 8014ee2:	463e      	mov	r6, r7
 8014ee4:	e7e1      	b.n	8014eaa <_dtoa_r+0x8f2>
 8014ee6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8014eea:	463e      	mov	r6, r7
 8014eec:	e5a9      	b.n	8014a42 <_dtoa_r+0x48a>
 8014eee:	bf00      	nop
 8014ef0:	40240000 	.word	0x40240000
 8014ef4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014ef6:	f8cd 9008 	str.w	r9, [sp, #8]
 8014efa:	2b00      	cmp	r3, #0
 8014efc:	f000 80fa 	beq.w	80150f4 <_dtoa_r+0xb3c>
 8014f00:	2d00      	cmp	r5, #0
 8014f02:	dd05      	ble.n	8014f10 <_dtoa_r+0x958>
 8014f04:	4631      	mov	r1, r6
 8014f06:	462a      	mov	r2, r5
 8014f08:	4620      	mov	r0, r4
 8014f0a:	f000 fe69 	bl	8015be0 <__lshift>
 8014f0e:	4606      	mov	r6, r0
 8014f10:	9b07      	ldr	r3, [sp, #28]
 8014f12:	2b00      	cmp	r3, #0
 8014f14:	d04c      	beq.n	8014fb0 <_dtoa_r+0x9f8>
 8014f16:	6871      	ldr	r1, [r6, #4]
 8014f18:	4620      	mov	r0, r4
 8014f1a:	f000 fc61 	bl	80157e0 <_Balloc>
 8014f1e:	6932      	ldr	r2, [r6, #16]
 8014f20:	3202      	adds	r2, #2
 8014f22:	4605      	mov	r5, r0
 8014f24:	0092      	lsls	r2, r2, #2
 8014f26:	f106 010c 	add.w	r1, r6, #12
 8014f2a:	300c      	adds	r0, #12
 8014f2c:	f7fd fc50 	bl	80127d0 <memcpy>
 8014f30:	2201      	movs	r2, #1
 8014f32:	4629      	mov	r1, r5
 8014f34:	4620      	mov	r0, r4
 8014f36:	f000 fe53 	bl	8015be0 <__lshift>
 8014f3a:	9b00      	ldr	r3, [sp, #0]
 8014f3c:	f8cd b014 	str.w	fp, [sp, #20]
 8014f40:	f003 0301 	and.w	r3, r3, #1
 8014f44:	46b1      	mov	r9, r6
 8014f46:	9307      	str	r3, [sp, #28]
 8014f48:	4606      	mov	r6, r0
 8014f4a:	4639      	mov	r1, r7
 8014f4c:	9804      	ldr	r0, [sp, #16]
 8014f4e:	f7ff faa5 	bl	801449c <quorem>
 8014f52:	4649      	mov	r1, r9
 8014f54:	4605      	mov	r5, r0
 8014f56:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8014f5a:	9804      	ldr	r0, [sp, #16]
 8014f5c:	f000 fe94 	bl	8015c88 <__mcmp>
 8014f60:	4632      	mov	r2, r6
 8014f62:	9000      	str	r0, [sp, #0]
 8014f64:	4639      	mov	r1, r7
 8014f66:	4620      	mov	r0, r4
 8014f68:	f000 fea8 	bl	8015cbc <__mdiff>
 8014f6c:	68c3      	ldr	r3, [r0, #12]
 8014f6e:	4602      	mov	r2, r0
 8014f70:	bb03      	cbnz	r3, 8014fb4 <_dtoa_r+0x9fc>
 8014f72:	4601      	mov	r1, r0
 8014f74:	9008      	str	r0, [sp, #32]
 8014f76:	9804      	ldr	r0, [sp, #16]
 8014f78:	f000 fe86 	bl	8015c88 <__mcmp>
 8014f7c:	9a08      	ldr	r2, [sp, #32]
 8014f7e:	4603      	mov	r3, r0
 8014f80:	4611      	mov	r1, r2
 8014f82:	4620      	mov	r0, r4
 8014f84:	9308      	str	r3, [sp, #32]
 8014f86:	f000 fc5f 	bl	8015848 <_Bfree>
 8014f8a:	9b08      	ldr	r3, [sp, #32]
 8014f8c:	b9a3      	cbnz	r3, 8014fb8 <_dtoa_r+0xa00>
 8014f8e:	9a06      	ldr	r2, [sp, #24]
 8014f90:	b992      	cbnz	r2, 8014fb8 <_dtoa_r+0xa00>
 8014f92:	9a07      	ldr	r2, [sp, #28]
 8014f94:	b982      	cbnz	r2, 8014fb8 <_dtoa_r+0xa00>
 8014f96:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8014f9a:	d029      	beq.n	8014ff0 <_dtoa_r+0xa38>
 8014f9c:	9b00      	ldr	r3, [sp, #0]
 8014f9e:	2b00      	cmp	r3, #0
 8014fa0:	dd01      	ble.n	8014fa6 <_dtoa_r+0x9ee>
 8014fa2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8014fa6:	9b05      	ldr	r3, [sp, #20]
 8014fa8:	1c5d      	adds	r5, r3, #1
 8014faa:	f883 8000 	strb.w	r8, [r3]
 8014fae:	e782      	b.n	8014eb6 <_dtoa_r+0x8fe>
 8014fb0:	4630      	mov	r0, r6
 8014fb2:	e7c2      	b.n	8014f3a <_dtoa_r+0x982>
 8014fb4:	2301      	movs	r3, #1
 8014fb6:	e7e3      	b.n	8014f80 <_dtoa_r+0x9c8>
 8014fb8:	9a00      	ldr	r2, [sp, #0]
 8014fba:	2a00      	cmp	r2, #0
 8014fbc:	db04      	blt.n	8014fc8 <_dtoa_r+0xa10>
 8014fbe:	d125      	bne.n	801500c <_dtoa_r+0xa54>
 8014fc0:	9a06      	ldr	r2, [sp, #24]
 8014fc2:	bb1a      	cbnz	r2, 801500c <_dtoa_r+0xa54>
 8014fc4:	9a07      	ldr	r2, [sp, #28]
 8014fc6:	bb0a      	cbnz	r2, 801500c <_dtoa_r+0xa54>
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	ddec      	ble.n	8014fa6 <_dtoa_r+0x9ee>
 8014fcc:	2201      	movs	r2, #1
 8014fce:	9904      	ldr	r1, [sp, #16]
 8014fd0:	4620      	mov	r0, r4
 8014fd2:	f000 fe05 	bl	8015be0 <__lshift>
 8014fd6:	4639      	mov	r1, r7
 8014fd8:	9004      	str	r0, [sp, #16]
 8014fda:	f000 fe55 	bl	8015c88 <__mcmp>
 8014fde:	2800      	cmp	r0, #0
 8014fe0:	dc03      	bgt.n	8014fea <_dtoa_r+0xa32>
 8014fe2:	d1e0      	bne.n	8014fa6 <_dtoa_r+0x9ee>
 8014fe4:	f018 0f01 	tst.w	r8, #1
 8014fe8:	d0dd      	beq.n	8014fa6 <_dtoa_r+0x9ee>
 8014fea:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8014fee:	d1d8      	bne.n	8014fa2 <_dtoa_r+0x9ea>
 8014ff0:	9b05      	ldr	r3, [sp, #20]
 8014ff2:	9a05      	ldr	r2, [sp, #20]
 8014ff4:	1c5d      	adds	r5, r3, #1
 8014ff6:	2339      	movs	r3, #57	; 0x39
 8014ff8:	7013      	strb	r3, [r2, #0]
 8014ffa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014ffe:	2b39      	cmp	r3, #57	; 0x39
 8015000:	f105 32ff 	add.w	r2, r5, #4294967295
 8015004:	d04f      	beq.n	80150a6 <_dtoa_r+0xaee>
 8015006:	3301      	adds	r3, #1
 8015008:	7013      	strb	r3, [r2, #0]
 801500a:	e754      	b.n	8014eb6 <_dtoa_r+0x8fe>
 801500c:	9a05      	ldr	r2, [sp, #20]
 801500e:	2b00      	cmp	r3, #0
 8015010:	f102 0501 	add.w	r5, r2, #1
 8015014:	dd06      	ble.n	8015024 <_dtoa_r+0xa6c>
 8015016:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801501a:	d0e9      	beq.n	8014ff0 <_dtoa_r+0xa38>
 801501c:	f108 0801 	add.w	r8, r8, #1
 8015020:	9b05      	ldr	r3, [sp, #20]
 8015022:	e7c2      	b.n	8014faa <_dtoa_r+0x9f2>
 8015024:	9a02      	ldr	r2, [sp, #8]
 8015026:	f805 8c01 	strb.w	r8, [r5, #-1]
 801502a:	eba5 030b 	sub.w	r3, r5, fp
 801502e:	4293      	cmp	r3, r2
 8015030:	d021      	beq.n	8015076 <_dtoa_r+0xabe>
 8015032:	2300      	movs	r3, #0
 8015034:	220a      	movs	r2, #10
 8015036:	9904      	ldr	r1, [sp, #16]
 8015038:	4620      	mov	r0, r4
 801503a:	f000 fc1c 	bl	8015876 <__multadd>
 801503e:	45b1      	cmp	r9, r6
 8015040:	9004      	str	r0, [sp, #16]
 8015042:	f04f 0300 	mov.w	r3, #0
 8015046:	f04f 020a 	mov.w	r2, #10
 801504a:	4649      	mov	r1, r9
 801504c:	4620      	mov	r0, r4
 801504e:	d105      	bne.n	801505c <_dtoa_r+0xaa4>
 8015050:	f000 fc11 	bl	8015876 <__multadd>
 8015054:	4681      	mov	r9, r0
 8015056:	4606      	mov	r6, r0
 8015058:	9505      	str	r5, [sp, #20]
 801505a:	e776      	b.n	8014f4a <_dtoa_r+0x992>
 801505c:	f000 fc0b 	bl	8015876 <__multadd>
 8015060:	4631      	mov	r1, r6
 8015062:	4681      	mov	r9, r0
 8015064:	2300      	movs	r3, #0
 8015066:	220a      	movs	r2, #10
 8015068:	4620      	mov	r0, r4
 801506a:	f000 fc04 	bl	8015876 <__multadd>
 801506e:	4606      	mov	r6, r0
 8015070:	e7f2      	b.n	8015058 <_dtoa_r+0xaa0>
 8015072:	f04f 0900 	mov.w	r9, #0
 8015076:	2201      	movs	r2, #1
 8015078:	9904      	ldr	r1, [sp, #16]
 801507a:	4620      	mov	r0, r4
 801507c:	f000 fdb0 	bl	8015be0 <__lshift>
 8015080:	4639      	mov	r1, r7
 8015082:	9004      	str	r0, [sp, #16]
 8015084:	f000 fe00 	bl	8015c88 <__mcmp>
 8015088:	2800      	cmp	r0, #0
 801508a:	dcb6      	bgt.n	8014ffa <_dtoa_r+0xa42>
 801508c:	d102      	bne.n	8015094 <_dtoa_r+0xadc>
 801508e:	f018 0f01 	tst.w	r8, #1
 8015092:	d1b2      	bne.n	8014ffa <_dtoa_r+0xa42>
 8015094:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015098:	2b30      	cmp	r3, #48	; 0x30
 801509a:	f105 32ff 	add.w	r2, r5, #4294967295
 801509e:	f47f af0a 	bne.w	8014eb6 <_dtoa_r+0x8fe>
 80150a2:	4615      	mov	r5, r2
 80150a4:	e7f6      	b.n	8015094 <_dtoa_r+0xadc>
 80150a6:	4593      	cmp	fp, r2
 80150a8:	d105      	bne.n	80150b6 <_dtoa_r+0xafe>
 80150aa:	2331      	movs	r3, #49	; 0x31
 80150ac:	f10a 0a01 	add.w	sl, sl, #1
 80150b0:	f88b 3000 	strb.w	r3, [fp]
 80150b4:	e6ff      	b.n	8014eb6 <_dtoa_r+0x8fe>
 80150b6:	4615      	mov	r5, r2
 80150b8:	e79f      	b.n	8014ffa <_dtoa_r+0xa42>
 80150ba:	f8df b064 	ldr.w	fp, [pc, #100]	; 8015120 <_dtoa_r+0xb68>
 80150be:	e007      	b.n	80150d0 <_dtoa_r+0xb18>
 80150c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80150c2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8015124 <_dtoa_r+0xb6c>
 80150c6:	b11b      	cbz	r3, 80150d0 <_dtoa_r+0xb18>
 80150c8:	f10b 0308 	add.w	r3, fp, #8
 80150cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80150ce:	6013      	str	r3, [r2, #0]
 80150d0:	4658      	mov	r0, fp
 80150d2:	b017      	add	sp, #92	; 0x5c
 80150d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150d8:	9b06      	ldr	r3, [sp, #24]
 80150da:	2b01      	cmp	r3, #1
 80150dc:	f77f ae35 	ble.w	8014d4a <_dtoa_r+0x792>
 80150e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80150e2:	9307      	str	r3, [sp, #28]
 80150e4:	e649      	b.n	8014d7a <_dtoa_r+0x7c2>
 80150e6:	9b02      	ldr	r3, [sp, #8]
 80150e8:	2b00      	cmp	r3, #0
 80150ea:	dc03      	bgt.n	80150f4 <_dtoa_r+0xb3c>
 80150ec:	9b06      	ldr	r3, [sp, #24]
 80150ee:	2b02      	cmp	r3, #2
 80150f0:	f73f aecc 	bgt.w	8014e8c <_dtoa_r+0x8d4>
 80150f4:	465d      	mov	r5, fp
 80150f6:	4639      	mov	r1, r7
 80150f8:	9804      	ldr	r0, [sp, #16]
 80150fa:	f7ff f9cf 	bl	801449c <quorem>
 80150fe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8015102:	f805 8b01 	strb.w	r8, [r5], #1
 8015106:	9a02      	ldr	r2, [sp, #8]
 8015108:	eba5 030b 	sub.w	r3, r5, fp
 801510c:	429a      	cmp	r2, r3
 801510e:	ddb0      	ble.n	8015072 <_dtoa_r+0xaba>
 8015110:	2300      	movs	r3, #0
 8015112:	220a      	movs	r2, #10
 8015114:	9904      	ldr	r1, [sp, #16]
 8015116:	4620      	mov	r0, r4
 8015118:	f000 fbad 	bl	8015876 <__multadd>
 801511c:	9004      	str	r0, [sp, #16]
 801511e:	e7ea      	b.n	80150f6 <_dtoa_r+0xb3e>
 8015120:	08018b6b 	.word	0x08018b6b
 8015124:	08018a30 	.word	0x08018a30

08015128 <rshift>:
 8015128:	b5f0      	push	{r4, r5, r6, r7, lr}
 801512a:	6906      	ldr	r6, [r0, #16]
 801512c:	114b      	asrs	r3, r1, #5
 801512e:	429e      	cmp	r6, r3
 8015130:	f100 0414 	add.w	r4, r0, #20
 8015134:	dd30      	ble.n	8015198 <rshift+0x70>
 8015136:	f011 011f 	ands.w	r1, r1, #31
 801513a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 801513e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8015142:	d108      	bne.n	8015156 <rshift+0x2e>
 8015144:	4621      	mov	r1, r4
 8015146:	42b2      	cmp	r2, r6
 8015148:	460b      	mov	r3, r1
 801514a:	d211      	bcs.n	8015170 <rshift+0x48>
 801514c:	f852 3b04 	ldr.w	r3, [r2], #4
 8015150:	f841 3b04 	str.w	r3, [r1], #4
 8015154:	e7f7      	b.n	8015146 <rshift+0x1e>
 8015156:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 801515a:	f1c1 0c20 	rsb	ip, r1, #32
 801515e:	40cd      	lsrs	r5, r1
 8015160:	3204      	adds	r2, #4
 8015162:	4623      	mov	r3, r4
 8015164:	42b2      	cmp	r2, r6
 8015166:	4617      	mov	r7, r2
 8015168:	d30c      	bcc.n	8015184 <rshift+0x5c>
 801516a:	601d      	str	r5, [r3, #0]
 801516c:	b105      	cbz	r5, 8015170 <rshift+0x48>
 801516e:	3304      	adds	r3, #4
 8015170:	1b1a      	subs	r2, r3, r4
 8015172:	42a3      	cmp	r3, r4
 8015174:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8015178:	bf08      	it	eq
 801517a:	2300      	moveq	r3, #0
 801517c:	6102      	str	r2, [r0, #16]
 801517e:	bf08      	it	eq
 8015180:	6143      	streq	r3, [r0, #20]
 8015182:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015184:	683f      	ldr	r7, [r7, #0]
 8015186:	fa07 f70c 	lsl.w	r7, r7, ip
 801518a:	433d      	orrs	r5, r7
 801518c:	f843 5b04 	str.w	r5, [r3], #4
 8015190:	f852 5b04 	ldr.w	r5, [r2], #4
 8015194:	40cd      	lsrs	r5, r1
 8015196:	e7e5      	b.n	8015164 <rshift+0x3c>
 8015198:	4623      	mov	r3, r4
 801519a:	e7e9      	b.n	8015170 <rshift+0x48>

0801519c <__hexdig_fun>:
 801519c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80151a0:	2b09      	cmp	r3, #9
 80151a2:	d802      	bhi.n	80151aa <__hexdig_fun+0xe>
 80151a4:	3820      	subs	r0, #32
 80151a6:	b2c0      	uxtb	r0, r0
 80151a8:	4770      	bx	lr
 80151aa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80151ae:	2b05      	cmp	r3, #5
 80151b0:	d801      	bhi.n	80151b6 <__hexdig_fun+0x1a>
 80151b2:	3847      	subs	r0, #71	; 0x47
 80151b4:	e7f7      	b.n	80151a6 <__hexdig_fun+0xa>
 80151b6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80151ba:	2b05      	cmp	r3, #5
 80151bc:	d801      	bhi.n	80151c2 <__hexdig_fun+0x26>
 80151be:	3827      	subs	r0, #39	; 0x27
 80151c0:	e7f1      	b.n	80151a6 <__hexdig_fun+0xa>
 80151c2:	2000      	movs	r0, #0
 80151c4:	4770      	bx	lr

080151c6 <__gethex>:
 80151c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151ca:	b08b      	sub	sp, #44	; 0x2c
 80151cc:	468a      	mov	sl, r1
 80151ce:	9002      	str	r0, [sp, #8]
 80151d0:	9816      	ldr	r0, [sp, #88]	; 0x58
 80151d2:	9306      	str	r3, [sp, #24]
 80151d4:	4690      	mov	r8, r2
 80151d6:	f000 fadf 	bl	8015798 <__localeconv_l>
 80151da:	6803      	ldr	r3, [r0, #0]
 80151dc:	9303      	str	r3, [sp, #12]
 80151de:	4618      	mov	r0, r3
 80151e0:	f7eb f800 	bl	80001e4 <strlen>
 80151e4:	9b03      	ldr	r3, [sp, #12]
 80151e6:	9001      	str	r0, [sp, #4]
 80151e8:	4403      	add	r3, r0
 80151ea:	f04f 0b00 	mov.w	fp, #0
 80151ee:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80151f2:	9307      	str	r3, [sp, #28]
 80151f4:	f8da 3000 	ldr.w	r3, [sl]
 80151f8:	3302      	adds	r3, #2
 80151fa:	461f      	mov	r7, r3
 80151fc:	f813 0b01 	ldrb.w	r0, [r3], #1
 8015200:	2830      	cmp	r0, #48	; 0x30
 8015202:	d06c      	beq.n	80152de <__gethex+0x118>
 8015204:	f7ff ffca 	bl	801519c <__hexdig_fun>
 8015208:	4604      	mov	r4, r0
 801520a:	2800      	cmp	r0, #0
 801520c:	d16a      	bne.n	80152e4 <__gethex+0x11e>
 801520e:	9a01      	ldr	r2, [sp, #4]
 8015210:	9903      	ldr	r1, [sp, #12]
 8015212:	4638      	mov	r0, r7
 8015214:	f001 fb78 	bl	8016908 <strncmp>
 8015218:	2800      	cmp	r0, #0
 801521a:	d166      	bne.n	80152ea <__gethex+0x124>
 801521c:	9b01      	ldr	r3, [sp, #4]
 801521e:	5cf8      	ldrb	r0, [r7, r3]
 8015220:	18fe      	adds	r6, r7, r3
 8015222:	f7ff ffbb 	bl	801519c <__hexdig_fun>
 8015226:	2800      	cmp	r0, #0
 8015228:	d062      	beq.n	80152f0 <__gethex+0x12a>
 801522a:	4633      	mov	r3, r6
 801522c:	7818      	ldrb	r0, [r3, #0]
 801522e:	2830      	cmp	r0, #48	; 0x30
 8015230:	461f      	mov	r7, r3
 8015232:	f103 0301 	add.w	r3, r3, #1
 8015236:	d0f9      	beq.n	801522c <__gethex+0x66>
 8015238:	f7ff ffb0 	bl	801519c <__hexdig_fun>
 801523c:	fab0 f580 	clz	r5, r0
 8015240:	096d      	lsrs	r5, r5, #5
 8015242:	4634      	mov	r4, r6
 8015244:	f04f 0b01 	mov.w	fp, #1
 8015248:	463a      	mov	r2, r7
 801524a:	4616      	mov	r6, r2
 801524c:	3201      	adds	r2, #1
 801524e:	7830      	ldrb	r0, [r6, #0]
 8015250:	f7ff ffa4 	bl	801519c <__hexdig_fun>
 8015254:	2800      	cmp	r0, #0
 8015256:	d1f8      	bne.n	801524a <__gethex+0x84>
 8015258:	9a01      	ldr	r2, [sp, #4]
 801525a:	9903      	ldr	r1, [sp, #12]
 801525c:	4630      	mov	r0, r6
 801525e:	f001 fb53 	bl	8016908 <strncmp>
 8015262:	b950      	cbnz	r0, 801527a <__gethex+0xb4>
 8015264:	b954      	cbnz	r4, 801527c <__gethex+0xb6>
 8015266:	9b01      	ldr	r3, [sp, #4]
 8015268:	18f4      	adds	r4, r6, r3
 801526a:	4622      	mov	r2, r4
 801526c:	4616      	mov	r6, r2
 801526e:	3201      	adds	r2, #1
 8015270:	7830      	ldrb	r0, [r6, #0]
 8015272:	f7ff ff93 	bl	801519c <__hexdig_fun>
 8015276:	2800      	cmp	r0, #0
 8015278:	d1f8      	bne.n	801526c <__gethex+0xa6>
 801527a:	b10c      	cbz	r4, 8015280 <__gethex+0xba>
 801527c:	1ba4      	subs	r4, r4, r6
 801527e:	00a4      	lsls	r4, r4, #2
 8015280:	7833      	ldrb	r3, [r6, #0]
 8015282:	2b50      	cmp	r3, #80	; 0x50
 8015284:	d001      	beq.n	801528a <__gethex+0xc4>
 8015286:	2b70      	cmp	r3, #112	; 0x70
 8015288:	d140      	bne.n	801530c <__gethex+0x146>
 801528a:	7873      	ldrb	r3, [r6, #1]
 801528c:	2b2b      	cmp	r3, #43	; 0x2b
 801528e:	d031      	beq.n	80152f4 <__gethex+0x12e>
 8015290:	2b2d      	cmp	r3, #45	; 0x2d
 8015292:	d033      	beq.n	80152fc <__gethex+0x136>
 8015294:	1c71      	adds	r1, r6, #1
 8015296:	f04f 0900 	mov.w	r9, #0
 801529a:	7808      	ldrb	r0, [r1, #0]
 801529c:	f7ff ff7e 	bl	801519c <__hexdig_fun>
 80152a0:	1e43      	subs	r3, r0, #1
 80152a2:	b2db      	uxtb	r3, r3
 80152a4:	2b18      	cmp	r3, #24
 80152a6:	d831      	bhi.n	801530c <__gethex+0x146>
 80152a8:	f1a0 0210 	sub.w	r2, r0, #16
 80152ac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80152b0:	f7ff ff74 	bl	801519c <__hexdig_fun>
 80152b4:	1e43      	subs	r3, r0, #1
 80152b6:	b2db      	uxtb	r3, r3
 80152b8:	2b18      	cmp	r3, #24
 80152ba:	d922      	bls.n	8015302 <__gethex+0x13c>
 80152bc:	f1b9 0f00 	cmp.w	r9, #0
 80152c0:	d000      	beq.n	80152c4 <__gethex+0xfe>
 80152c2:	4252      	negs	r2, r2
 80152c4:	4414      	add	r4, r2
 80152c6:	f8ca 1000 	str.w	r1, [sl]
 80152ca:	b30d      	cbz	r5, 8015310 <__gethex+0x14a>
 80152cc:	f1bb 0f00 	cmp.w	fp, #0
 80152d0:	bf0c      	ite	eq
 80152d2:	2706      	moveq	r7, #6
 80152d4:	2700      	movne	r7, #0
 80152d6:	4638      	mov	r0, r7
 80152d8:	b00b      	add	sp, #44	; 0x2c
 80152da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152de:	f10b 0b01 	add.w	fp, fp, #1
 80152e2:	e78a      	b.n	80151fa <__gethex+0x34>
 80152e4:	2500      	movs	r5, #0
 80152e6:	462c      	mov	r4, r5
 80152e8:	e7ae      	b.n	8015248 <__gethex+0x82>
 80152ea:	463e      	mov	r6, r7
 80152ec:	2501      	movs	r5, #1
 80152ee:	e7c7      	b.n	8015280 <__gethex+0xba>
 80152f0:	4604      	mov	r4, r0
 80152f2:	e7fb      	b.n	80152ec <__gethex+0x126>
 80152f4:	f04f 0900 	mov.w	r9, #0
 80152f8:	1cb1      	adds	r1, r6, #2
 80152fa:	e7ce      	b.n	801529a <__gethex+0xd4>
 80152fc:	f04f 0901 	mov.w	r9, #1
 8015300:	e7fa      	b.n	80152f8 <__gethex+0x132>
 8015302:	230a      	movs	r3, #10
 8015304:	fb03 0202 	mla	r2, r3, r2, r0
 8015308:	3a10      	subs	r2, #16
 801530a:	e7cf      	b.n	80152ac <__gethex+0xe6>
 801530c:	4631      	mov	r1, r6
 801530e:	e7da      	b.n	80152c6 <__gethex+0x100>
 8015310:	1bf3      	subs	r3, r6, r7
 8015312:	3b01      	subs	r3, #1
 8015314:	4629      	mov	r1, r5
 8015316:	2b07      	cmp	r3, #7
 8015318:	dc49      	bgt.n	80153ae <__gethex+0x1e8>
 801531a:	9802      	ldr	r0, [sp, #8]
 801531c:	f000 fa60 	bl	80157e0 <_Balloc>
 8015320:	9b01      	ldr	r3, [sp, #4]
 8015322:	f100 0914 	add.w	r9, r0, #20
 8015326:	f04f 0b00 	mov.w	fp, #0
 801532a:	f1c3 0301 	rsb	r3, r3, #1
 801532e:	4605      	mov	r5, r0
 8015330:	f8cd 9010 	str.w	r9, [sp, #16]
 8015334:	46da      	mov	sl, fp
 8015336:	9308      	str	r3, [sp, #32]
 8015338:	42b7      	cmp	r7, r6
 801533a:	d33b      	bcc.n	80153b4 <__gethex+0x1ee>
 801533c:	9804      	ldr	r0, [sp, #16]
 801533e:	f840 ab04 	str.w	sl, [r0], #4
 8015342:	eba0 0009 	sub.w	r0, r0, r9
 8015346:	1080      	asrs	r0, r0, #2
 8015348:	6128      	str	r0, [r5, #16]
 801534a:	0147      	lsls	r7, r0, #5
 801534c:	4650      	mov	r0, sl
 801534e:	f000 fb0b 	bl	8015968 <__hi0bits>
 8015352:	f8d8 6000 	ldr.w	r6, [r8]
 8015356:	1a3f      	subs	r7, r7, r0
 8015358:	42b7      	cmp	r7, r6
 801535a:	dd64      	ble.n	8015426 <__gethex+0x260>
 801535c:	1bbf      	subs	r7, r7, r6
 801535e:	4639      	mov	r1, r7
 8015360:	4628      	mov	r0, r5
 8015362:	f000 fe1b 	bl	8015f9c <__any_on>
 8015366:	4682      	mov	sl, r0
 8015368:	b178      	cbz	r0, 801538a <__gethex+0x1c4>
 801536a:	1e7b      	subs	r3, r7, #1
 801536c:	1159      	asrs	r1, r3, #5
 801536e:	f003 021f 	and.w	r2, r3, #31
 8015372:	f04f 0a01 	mov.w	sl, #1
 8015376:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801537a:	fa0a f202 	lsl.w	r2, sl, r2
 801537e:	420a      	tst	r2, r1
 8015380:	d003      	beq.n	801538a <__gethex+0x1c4>
 8015382:	4553      	cmp	r3, sl
 8015384:	dc46      	bgt.n	8015414 <__gethex+0x24e>
 8015386:	f04f 0a02 	mov.w	sl, #2
 801538a:	4639      	mov	r1, r7
 801538c:	4628      	mov	r0, r5
 801538e:	f7ff fecb 	bl	8015128 <rshift>
 8015392:	443c      	add	r4, r7
 8015394:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015398:	42a3      	cmp	r3, r4
 801539a:	da52      	bge.n	8015442 <__gethex+0x27c>
 801539c:	4629      	mov	r1, r5
 801539e:	9802      	ldr	r0, [sp, #8]
 80153a0:	f000 fa52 	bl	8015848 <_Bfree>
 80153a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80153a6:	2300      	movs	r3, #0
 80153a8:	6013      	str	r3, [r2, #0]
 80153aa:	27a3      	movs	r7, #163	; 0xa3
 80153ac:	e793      	b.n	80152d6 <__gethex+0x110>
 80153ae:	3101      	adds	r1, #1
 80153b0:	105b      	asrs	r3, r3, #1
 80153b2:	e7b0      	b.n	8015316 <__gethex+0x150>
 80153b4:	1e73      	subs	r3, r6, #1
 80153b6:	9305      	str	r3, [sp, #20]
 80153b8:	9a07      	ldr	r2, [sp, #28]
 80153ba:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80153be:	4293      	cmp	r3, r2
 80153c0:	d018      	beq.n	80153f4 <__gethex+0x22e>
 80153c2:	f1bb 0f20 	cmp.w	fp, #32
 80153c6:	d107      	bne.n	80153d8 <__gethex+0x212>
 80153c8:	9b04      	ldr	r3, [sp, #16]
 80153ca:	f8c3 a000 	str.w	sl, [r3]
 80153ce:	3304      	adds	r3, #4
 80153d0:	f04f 0a00 	mov.w	sl, #0
 80153d4:	9304      	str	r3, [sp, #16]
 80153d6:	46d3      	mov	fp, sl
 80153d8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80153dc:	f7ff fede 	bl	801519c <__hexdig_fun>
 80153e0:	f000 000f 	and.w	r0, r0, #15
 80153e4:	fa00 f00b 	lsl.w	r0, r0, fp
 80153e8:	ea4a 0a00 	orr.w	sl, sl, r0
 80153ec:	f10b 0b04 	add.w	fp, fp, #4
 80153f0:	9b05      	ldr	r3, [sp, #20]
 80153f2:	e00d      	b.n	8015410 <__gethex+0x24a>
 80153f4:	9b05      	ldr	r3, [sp, #20]
 80153f6:	9a08      	ldr	r2, [sp, #32]
 80153f8:	4413      	add	r3, r2
 80153fa:	42bb      	cmp	r3, r7
 80153fc:	d3e1      	bcc.n	80153c2 <__gethex+0x1fc>
 80153fe:	4618      	mov	r0, r3
 8015400:	9a01      	ldr	r2, [sp, #4]
 8015402:	9903      	ldr	r1, [sp, #12]
 8015404:	9309      	str	r3, [sp, #36]	; 0x24
 8015406:	f001 fa7f 	bl	8016908 <strncmp>
 801540a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801540c:	2800      	cmp	r0, #0
 801540e:	d1d8      	bne.n	80153c2 <__gethex+0x1fc>
 8015410:	461e      	mov	r6, r3
 8015412:	e791      	b.n	8015338 <__gethex+0x172>
 8015414:	1eb9      	subs	r1, r7, #2
 8015416:	4628      	mov	r0, r5
 8015418:	f000 fdc0 	bl	8015f9c <__any_on>
 801541c:	2800      	cmp	r0, #0
 801541e:	d0b2      	beq.n	8015386 <__gethex+0x1c0>
 8015420:	f04f 0a03 	mov.w	sl, #3
 8015424:	e7b1      	b.n	801538a <__gethex+0x1c4>
 8015426:	da09      	bge.n	801543c <__gethex+0x276>
 8015428:	1bf7      	subs	r7, r6, r7
 801542a:	4629      	mov	r1, r5
 801542c:	463a      	mov	r2, r7
 801542e:	9802      	ldr	r0, [sp, #8]
 8015430:	f000 fbd6 	bl	8015be0 <__lshift>
 8015434:	1be4      	subs	r4, r4, r7
 8015436:	4605      	mov	r5, r0
 8015438:	f100 0914 	add.w	r9, r0, #20
 801543c:	f04f 0a00 	mov.w	sl, #0
 8015440:	e7a8      	b.n	8015394 <__gethex+0x1ce>
 8015442:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8015446:	42a0      	cmp	r0, r4
 8015448:	dd6a      	ble.n	8015520 <__gethex+0x35a>
 801544a:	1b04      	subs	r4, r0, r4
 801544c:	42a6      	cmp	r6, r4
 801544e:	dc2e      	bgt.n	80154ae <__gethex+0x2e8>
 8015450:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015454:	2b02      	cmp	r3, #2
 8015456:	d022      	beq.n	801549e <__gethex+0x2d8>
 8015458:	2b03      	cmp	r3, #3
 801545a:	d024      	beq.n	80154a6 <__gethex+0x2e0>
 801545c:	2b01      	cmp	r3, #1
 801545e:	d115      	bne.n	801548c <__gethex+0x2c6>
 8015460:	42a6      	cmp	r6, r4
 8015462:	d113      	bne.n	801548c <__gethex+0x2c6>
 8015464:	2e01      	cmp	r6, #1
 8015466:	dc0b      	bgt.n	8015480 <__gethex+0x2ba>
 8015468:	9a06      	ldr	r2, [sp, #24]
 801546a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801546e:	6013      	str	r3, [r2, #0]
 8015470:	2301      	movs	r3, #1
 8015472:	612b      	str	r3, [r5, #16]
 8015474:	f8c9 3000 	str.w	r3, [r9]
 8015478:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801547a:	2762      	movs	r7, #98	; 0x62
 801547c:	601d      	str	r5, [r3, #0]
 801547e:	e72a      	b.n	80152d6 <__gethex+0x110>
 8015480:	1e71      	subs	r1, r6, #1
 8015482:	4628      	mov	r0, r5
 8015484:	f000 fd8a 	bl	8015f9c <__any_on>
 8015488:	2800      	cmp	r0, #0
 801548a:	d1ed      	bne.n	8015468 <__gethex+0x2a2>
 801548c:	4629      	mov	r1, r5
 801548e:	9802      	ldr	r0, [sp, #8]
 8015490:	f000 f9da 	bl	8015848 <_Bfree>
 8015494:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015496:	2300      	movs	r3, #0
 8015498:	6013      	str	r3, [r2, #0]
 801549a:	2750      	movs	r7, #80	; 0x50
 801549c:	e71b      	b.n	80152d6 <__gethex+0x110>
 801549e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80154a0:	2b00      	cmp	r3, #0
 80154a2:	d0e1      	beq.n	8015468 <__gethex+0x2a2>
 80154a4:	e7f2      	b.n	801548c <__gethex+0x2c6>
 80154a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80154a8:	2b00      	cmp	r3, #0
 80154aa:	d1dd      	bne.n	8015468 <__gethex+0x2a2>
 80154ac:	e7ee      	b.n	801548c <__gethex+0x2c6>
 80154ae:	1e67      	subs	r7, r4, #1
 80154b0:	f1ba 0f00 	cmp.w	sl, #0
 80154b4:	d131      	bne.n	801551a <__gethex+0x354>
 80154b6:	b127      	cbz	r7, 80154c2 <__gethex+0x2fc>
 80154b8:	4639      	mov	r1, r7
 80154ba:	4628      	mov	r0, r5
 80154bc:	f000 fd6e 	bl	8015f9c <__any_on>
 80154c0:	4682      	mov	sl, r0
 80154c2:	117a      	asrs	r2, r7, #5
 80154c4:	2301      	movs	r3, #1
 80154c6:	f007 071f 	and.w	r7, r7, #31
 80154ca:	fa03 f707 	lsl.w	r7, r3, r7
 80154ce:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80154d2:	4621      	mov	r1, r4
 80154d4:	421f      	tst	r7, r3
 80154d6:	4628      	mov	r0, r5
 80154d8:	bf18      	it	ne
 80154da:	f04a 0a02 	orrne.w	sl, sl, #2
 80154de:	1b36      	subs	r6, r6, r4
 80154e0:	f7ff fe22 	bl	8015128 <rshift>
 80154e4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80154e8:	2702      	movs	r7, #2
 80154ea:	f1ba 0f00 	cmp.w	sl, #0
 80154ee:	d048      	beq.n	8015582 <__gethex+0x3bc>
 80154f0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80154f4:	2b02      	cmp	r3, #2
 80154f6:	d015      	beq.n	8015524 <__gethex+0x35e>
 80154f8:	2b03      	cmp	r3, #3
 80154fa:	d017      	beq.n	801552c <__gethex+0x366>
 80154fc:	2b01      	cmp	r3, #1
 80154fe:	d109      	bne.n	8015514 <__gethex+0x34e>
 8015500:	f01a 0f02 	tst.w	sl, #2
 8015504:	d006      	beq.n	8015514 <__gethex+0x34e>
 8015506:	f8d9 3000 	ldr.w	r3, [r9]
 801550a:	ea4a 0a03 	orr.w	sl, sl, r3
 801550e:	f01a 0f01 	tst.w	sl, #1
 8015512:	d10e      	bne.n	8015532 <__gethex+0x36c>
 8015514:	f047 0710 	orr.w	r7, r7, #16
 8015518:	e033      	b.n	8015582 <__gethex+0x3bc>
 801551a:	f04f 0a01 	mov.w	sl, #1
 801551e:	e7d0      	b.n	80154c2 <__gethex+0x2fc>
 8015520:	2701      	movs	r7, #1
 8015522:	e7e2      	b.n	80154ea <__gethex+0x324>
 8015524:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015526:	f1c3 0301 	rsb	r3, r3, #1
 801552a:	9315      	str	r3, [sp, #84]	; 0x54
 801552c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801552e:	2b00      	cmp	r3, #0
 8015530:	d0f0      	beq.n	8015514 <__gethex+0x34e>
 8015532:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8015536:	f105 0314 	add.w	r3, r5, #20
 801553a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 801553e:	eb03 010a 	add.w	r1, r3, sl
 8015542:	f04f 0c00 	mov.w	ip, #0
 8015546:	4618      	mov	r0, r3
 8015548:	f853 2b04 	ldr.w	r2, [r3], #4
 801554c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8015550:	d01c      	beq.n	801558c <__gethex+0x3c6>
 8015552:	3201      	adds	r2, #1
 8015554:	6002      	str	r2, [r0, #0]
 8015556:	2f02      	cmp	r7, #2
 8015558:	f105 0314 	add.w	r3, r5, #20
 801555c:	d138      	bne.n	80155d0 <__gethex+0x40a>
 801555e:	f8d8 2000 	ldr.w	r2, [r8]
 8015562:	3a01      	subs	r2, #1
 8015564:	42b2      	cmp	r2, r6
 8015566:	d10a      	bne.n	801557e <__gethex+0x3b8>
 8015568:	1171      	asrs	r1, r6, #5
 801556a:	2201      	movs	r2, #1
 801556c:	f006 061f 	and.w	r6, r6, #31
 8015570:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015574:	fa02 f606 	lsl.w	r6, r2, r6
 8015578:	421e      	tst	r6, r3
 801557a:	bf18      	it	ne
 801557c:	4617      	movne	r7, r2
 801557e:	f047 0720 	orr.w	r7, r7, #32
 8015582:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015584:	601d      	str	r5, [r3, #0]
 8015586:	9b06      	ldr	r3, [sp, #24]
 8015588:	601c      	str	r4, [r3, #0]
 801558a:	e6a4      	b.n	80152d6 <__gethex+0x110>
 801558c:	4299      	cmp	r1, r3
 801558e:	f843 cc04 	str.w	ip, [r3, #-4]
 8015592:	d8d8      	bhi.n	8015546 <__gethex+0x380>
 8015594:	68ab      	ldr	r3, [r5, #8]
 8015596:	4599      	cmp	r9, r3
 8015598:	db12      	blt.n	80155c0 <__gethex+0x3fa>
 801559a:	6869      	ldr	r1, [r5, #4]
 801559c:	9802      	ldr	r0, [sp, #8]
 801559e:	3101      	adds	r1, #1
 80155a0:	f000 f91e 	bl	80157e0 <_Balloc>
 80155a4:	692a      	ldr	r2, [r5, #16]
 80155a6:	3202      	adds	r2, #2
 80155a8:	f105 010c 	add.w	r1, r5, #12
 80155ac:	4683      	mov	fp, r0
 80155ae:	0092      	lsls	r2, r2, #2
 80155b0:	300c      	adds	r0, #12
 80155b2:	f7fd f90d 	bl	80127d0 <memcpy>
 80155b6:	4629      	mov	r1, r5
 80155b8:	9802      	ldr	r0, [sp, #8]
 80155ba:	f000 f945 	bl	8015848 <_Bfree>
 80155be:	465d      	mov	r5, fp
 80155c0:	692b      	ldr	r3, [r5, #16]
 80155c2:	1c5a      	adds	r2, r3, #1
 80155c4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80155c8:	612a      	str	r2, [r5, #16]
 80155ca:	2201      	movs	r2, #1
 80155cc:	615a      	str	r2, [r3, #20]
 80155ce:	e7c2      	b.n	8015556 <__gethex+0x390>
 80155d0:	692a      	ldr	r2, [r5, #16]
 80155d2:	454a      	cmp	r2, r9
 80155d4:	dd0b      	ble.n	80155ee <__gethex+0x428>
 80155d6:	2101      	movs	r1, #1
 80155d8:	4628      	mov	r0, r5
 80155da:	f7ff fda5 	bl	8015128 <rshift>
 80155de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80155e2:	3401      	adds	r4, #1
 80155e4:	42a3      	cmp	r3, r4
 80155e6:	f6ff aed9 	blt.w	801539c <__gethex+0x1d6>
 80155ea:	2701      	movs	r7, #1
 80155ec:	e7c7      	b.n	801557e <__gethex+0x3b8>
 80155ee:	f016 061f 	ands.w	r6, r6, #31
 80155f2:	d0fa      	beq.n	80155ea <__gethex+0x424>
 80155f4:	449a      	add	sl, r3
 80155f6:	f1c6 0620 	rsb	r6, r6, #32
 80155fa:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80155fe:	f000 f9b3 	bl	8015968 <__hi0bits>
 8015602:	42b0      	cmp	r0, r6
 8015604:	dbe7      	blt.n	80155d6 <__gethex+0x410>
 8015606:	e7f0      	b.n	80155ea <__gethex+0x424>

08015608 <L_shift>:
 8015608:	f1c2 0208 	rsb	r2, r2, #8
 801560c:	0092      	lsls	r2, r2, #2
 801560e:	b570      	push	{r4, r5, r6, lr}
 8015610:	f1c2 0620 	rsb	r6, r2, #32
 8015614:	6843      	ldr	r3, [r0, #4]
 8015616:	6804      	ldr	r4, [r0, #0]
 8015618:	fa03 f506 	lsl.w	r5, r3, r6
 801561c:	432c      	orrs	r4, r5
 801561e:	40d3      	lsrs	r3, r2
 8015620:	6004      	str	r4, [r0, #0]
 8015622:	f840 3f04 	str.w	r3, [r0, #4]!
 8015626:	4288      	cmp	r0, r1
 8015628:	d3f4      	bcc.n	8015614 <L_shift+0xc>
 801562a:	bd70      	pop	{r4, r5, r6, pc}

0801562c <__match>:
 801562c:	b530      	push	{r4, r5, lr}
 801562e:	6803      	ldr	r3, [r0, #0]
 8015630:	3301      	adds	r3, #1
 8015632:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015636:	b914      	cbnz	r4, 801563e <__match+0x12>
 8015638:	6003      	str	r3, [r0, #0]
 801563a:	2001      	movs	r0, #1
 801563c:	bd30      	pop	{r4, r5, pc}
 801563e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015642:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8015646:	2d19      	cmp	r5, #25
 8015648:	bf98      	it	ls
 801564a:	3220      	addls	r2, #32
 801564c:	42a2      	cmp	r2, r4
 801564e:	d0f0      	beq.n	8015632 <__match+0x6>
 8015650:	2000      	movs	r0, #0
 8015652:	e7f3      	b.n	801563c <__match+0x10>

08015654 <__hexnan>:
 8015654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015658:	680b      	ldr	r3, [r1, #0]
 801565a:	6801      	ldr	r1, [r0, #0]
 801565c:	115f      	asrs	r7, r3, #5
 801565e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8015662:	f013 031f 	ands.w	r3, r3, #31
 8015666:	b087      	sub	sp, #28
 8015668:	bf18      	it	ne
 801566a:	3704      	addne	r7, #4
 801566c:	2500      	movs	r5, #0
 801566e:	1f3e      	subs	r6, r7, #4
 8015670:	4682      	mov	sl, r0
 8015672:	4690      	mov	r8, r2
 8015674:	9301      	str	r3, [sp, #4]
 8015676:	f847 5c04 	str.w	r5, [r7, #-4]
 801567a:	46b1      	mov	r9, r6
 801567c:	4634      	mov	r4, r6
 801567e:	9502      	str	r5, [sp, #8]
 8015680:	46ab      	mov	fp, r5
 8015682:	784a      	ldrb	r2, [r1, #1]
 8015684:	1c4b      	adds	r3, r1, #1
 8015686:	9303      	str	r3, [sp, #12]
 8015688:	b342      	cbz	r2, 80156dc <__hexnan+0x88>
 801568a:	4610      	mov	r0, r2
 801568c:	9105      	str	r1, [sp, #20]
 801568e:	9204      	str	r2, [sp, #16]
 8015690:	f7ff fd84 	bl	801519c <__hexdig_fun>
 8015694:	2800      	cmp	r0, #0
 8015696:	d143      	bne.n	8015720 <__hexnan+0xcc>
 8015698:	9a04      	ldr	r2, [sp, #16]
 801569a:	9905      	ldr	r1, [sp, #20]
 801569c:	2a20      	cmp	r2, #32
 801569e:	d818      	bhi.n	80156d2 <__hexnan+0x7e>
 80156a0:	9b02      	ldr	r3, [sp, #8]
 80156a2:	459b      	cmp	fp, r3
 80156a4:	dd13      	ble.n	80156ce <__hexnan+0x7a>
 80156a6:	454c      	cmp	r4, r9
 80156a8:	d206      	bcs.n	80156b8 <__hexnan+0x64>
 80156aa:	2d07      	cmp	r5, #7
 80156ac:	dc04      	bgt.n	80156b8 <__hexnan+0x64>
 80156ae:	462a      	mov	r2, r5
 80156b0:	4649      	mov	r1, r9
 80156b2:	4620      	mov	r0, r4
 80156b4:	f7ff ffa8 	bl	8015608 <L_shift>
 80156b8:	4544      	cmp	r4, r8
 80156ba:	d944      	bls.n	8015746 <__hexnan+0xf2>
 80156bc:	2300      	movs	r3, #0
 80156be:	f1a4 0904 	sub.w	r9, r4, #4
 80156c2:	f844 3c04 	str.w	r3, [r4, #-4]
 80156c6:	f8cd b008 	str.w	fp, [sp, #8]
 80156ca:	464c      	mov	r4, r9
 80156cc:	461d      	mov	r5, r3
 80156ce:	9903      	ldr	r1, [sp, #12]
 80156d0:	e7d7      	b.n	8015682 <__hexnan+0x2e>
 80156d2:	2a29      	cmp	r2, #41	; 0x29
 80156d4:	d14a      	bne.n	801576c <__hexnan+0x118>
 80156d6:	3102      	adds	r1, #2
 80156d8:	f8ca 1000 	str.w	r1, [sl]
 80156dc:	f1bb 0f00 	cmp.w	fp, #0
 80156e0:	d044      	beq.n	801576c <__hexnan+0x118>
 80156e2:	454c      	cmp	r4, r9
 80156e4:	d206      	bcs.n	80156f4 <__hexnan+0xa0>
 80156e6:	2d07      	cmp	r5, #7
 80156e8:	dc04      	bgt.n	80156f4 <__hexnan+0xa0>
 80156ea:	462a      	mov	r2, r5
 80156ec:	4649      	mov	r1, r9
 80156ee:	4620      	mov	r0, r4
 80156f0:	f7ff ff8a 	bl	8015608 <L_shift>
 80156f4:	4544      	cmp	r4, r8
 80156f6:	d928      	bls.n	801574a <__hexnan+0xf6>
 80156f8:	4643      	mov	r3, r8
 80156fa:	f854 2b04 	ldr.w	r2, [r4], #4
 80156fe:	f843 2b04 	str.w	r2, [r3], #4
 8015702:	42a6      	cmp	r6, r4
 8015704:	d2f9      	bcs.n	80156fa <__hexnan+0xa6>
 8015706:	2200      	movs	r2, #0
 8015708:	f843 2b04 	str.w	r2, [r3], #4
 801570c:	429e      	cmp	r6, r3
 801570e:	d2fb      	bcs.n	8015708 <__hexnan+0xb4>
 8015710:	6833      	ldr	r3, [r6, #0]
 8015712:	b91b      	cbnz	r3, 801571c <__hexnan+0xc8>
 8015714:	4546      	cmp	r6, r8
 8015716:	d127      	bne.n	8015768 <__hexnan+0x114>
 8015718:	2301      	movs	r3, #1
 801571a:	6033      	str	r3, [r6, #0]
 801571c:	2005      	movs	r0, #5
 801571e:	e026      	b.n	801576e <__hexnan+0x11a>
 8015720:	3501      	adds	r5, #1
 8015722:	2d08      	cmp	r5, #8
 8015724:	f10b 0b01 	add.w	fp, fp, #1
 8015728:	dd06      	ble.n	8015738 <__hexnan+0xe4>
 801572a:	4544      	cmp	r4, r8
 801572c:	d9cf      	bls.n	80156ce <__hexnan+0x7a>
 801572e:	2300      	movs	r3, #0
 8015730:	f844 3c04 	str.w	r3, [r4, #-4]
 8015734:	2501      	movs	r5, #1
 8015736:	3c04      	subs	r4, #4
 8015738:	6822      	ldr	r2, [r4, #0]
 801573a:	f000 000f 	and.w	r0, r0, #15
 801573e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8015742:	6020      	str	r0, [r4, #0]
 8015744:	e7c3      	b.n	80156ce <__hexnan+0x7a>
 8015746:	2508      	movs	r5, #8
 8015748:	e7c1      	b.n	80156ce <__hexnan+0x7a>
 801574a:	9b01      	ldr	r3, [sp, #4]
 801574c:	2b00      	cmp	r3, #0
 801574e:	d0df      	beq.n	8015710 <__hexnan+0xbc>
 8015750:	f04f 32ff 	mov.w	r2, #4294967295
 8015754:	f1c3 0320 	rsb	r3, r3, #32
 8015758:	fa22 f303 	lsr.w	r3, r2, r3
 801575c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8015760:	401a      	ands	r2, r3
 8015762:	f847 2c04 	str.w	r2, [r7, #-4]
 8015766:	e7d3      	b.n	8015710 <__hexnan+0xbc>
 8015768:	3e04      	subs	r6, #4
 801576a:	e7d1      	b.n	8015710 <__hexnan+0xbc>
 801576c:	2004      	movs	r0, #4
 801576e:	b007      	add	sp, #28
 8015770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015774 <__locale_ctype_ptr_l>:
 8015774:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8015778:	4770      	bx	lr
	...

0801577c <__locale_ctype_ptr>:
 801577c:	4b04      	ldr	r3, [pc, #16]	; (8015790 <__locale_ctype_ptr+0x14>)
 801577e:	4a05      	ldr	r2, [pc, #20]	; (8015794 <__locale_ctype_ptr+0x18>)
 8015780:	681b      	ldr	r3, [r3, #0]
 8015782:	6a1b      	ldr	r3, [r3, #32]
 8015784:	2b00      	cmp	r3, #0
 8015786:	bf08      	it	eq
 8015788:	4613      	moveq	r3, r2
 801578a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 801578e:	4770      	bx	lr
 8015790:	20000e34 	.word	0x20000e34
 8015794:	20000e98 	.word	0x20000e98

08015798 <__localeconv_l>:
 8015798:	30f0      	adds	r0, #240	; 0xf0
 801579a:	4770      	bx	lr

0801579c <_localeconv_r>:
 801579c:	4b04      	ldr	r3, [pc, #16]	; (80157b0 <_localeconv_r+0x14>)
 801579e:	681b      	ldr	r3, [r3, #0]
 80157a0:	6a18      	ldr	r0, [r3, #32]
 80157a2:	4b04      	ldr	r3, [pc, #16]	; (80157b4 <_localeconv_r+0x18>)
 80157a4:	2800      	cmp	r0, #0
 80157a6:	bf08      	it	eq
 80157a8:	4618      	moveq	r0, r3
 80157aa:	30f0      	adds	r0, #240	; 0xf0
 80157ac:	4770      	bx	lr
 80157ae:	bf00      	nop
 80157b0:	20000e34 	.word	0x20000e34
 80157b4:	20000e98 	.word	0x20000e98

080157b8 <__ascii_mbtowc>:
 80157b8:	b082      	sub	sp, #8
 80157ba:	b901      	cbnz	r1, 80157be <__ascii_mbtowc+0x6>
 80157bc:	a901      	add	r1, sp, #4
 80157be:	b142      	cbz	r2, 80157d2 <__ascii_mbtowc+0x1a>
 80157c0:	b14b      	cbz	r3, 80157d6 <__ascii_mbtowc+0x1e>
 80157c2:	7813      	ldrb	r3, [r2, #0]
 80157c4:	600b      	str	r3, [r1, #0]
 80157c6:	7812      	ldrb	r2, [r2, #0]
 80157c8:	1c10      	adds	r0, r2, #0
 80157ca:	bf18      	it	ne
 80157cc:	2001      	movne	r0, #1
 80157ce:	b002      	add	sp, #8
 80157d0:	4770      	bx	lr
 80157d2:	4610      	mov	r0, r2
 80157d4:	e7fb      	b.n	80157ce <__ascii_mbtowc+0x16>
 80157d6:	f06f 0001 	mvn.w	r0, #1
 80157da:	e7f8      	b.n	80157ce <__ascii_mbtowc+0x16>

080157dc <__malloc_lock>:
 80157dc:	4770      	bx	lr

080157de <__malloc_unlock>:
 80157de:	4770      	bx	lr

080157e0 <_Balloc>:
 80157e0:	b570      	push	{r4, r5, r6, lr}
 80157e2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80157e4:	4604      	mov	r4, r0
 80157e6:	460e      	mov	r6, r1
 80157e8:	b93d      	cbnz	r5, 80157fa <_Balloc+0x1a>
 80157ea:	2010      	movs	r0, #16
 80157ec:	f7fc ffe0 	bl	80127b0 <malloc>
 80157f0:	6260      	str	r0, [r4, #36]	; 0x24
 80157f2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80157f6:	6005      	str	r5, [r0, #0]
 80157f8:	60c5      	str	r5, [r0, #12]
 80157fa:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80157fc:	68eb      	ldr	r3, [r5, #12]
 80157fe:	b183      	cbz	r3, 8015822 <_Balloc+0x42>
 8015800:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015802:	68db      	ldr	r3, [r3, #12]
 8015804:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8015808:	b9b8      	cbnz	r0, 801583a <_Balloc+0x5a>
 801580a:	2101      	movs	r1, #1
 801580c:	fa01 f506 	lsl.w	r5, r1, r6
 8015810:	1d6a      	adds	r2, r5, #5
 8015812:	0092      	lsls	r2, r2, #2
 8015814:	4620      	mov	r0, r4
 8015816:	f000 fbe2 	bl	8015fde <_calloc_r>
 801581a:	b160      	cbz	r0, 8015836 <_Balloc+0x56>
 801581c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8015820:	e00e      	b.n	8015840 <_Balloc+0x60>
 8015822:	2221      	movs	r2, #33	; 0x21
 8015824:	2104      	movs	r1, #4
 8015826:	4620      	mov	r0, r4
 8015828:	f000 fbd9 	bl	8015fde <_calloc_r>
 801582c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801582e:	60e8      	str	r0, [r5, #12]
 8015830:	68db      	ldr	r3, [r3, #12]
 8015832:	2b00      	cmp	r3, #0
 8015834:	d1e4      	bne.n	8015800 <_Balloc+0x20>
 8015836:	2000      	movs	r0, #0
 8015838:	bd70      	pop	{r4, r5, r6, pc}
 801583a:	6802      	ldr	r2, [r0, #0]
 801583c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8015840:	2300      	movs	r3, #0
 8015842:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015846:	e7f7      	b.n	8015838 <_Balloc+0x58>

08015848 <_Bfree>:
 8015848:	b570      	push	{r4, r5, r6, lr}
 801584a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801584c:	4606      	mov	r6, r0
 801584e:	460d      	mov	r5, r1
 8015850:	b93c      	cbnz	r4, 8015862 <_Bfree+0x1a>
 8015852:	2010      	movs	r0, #16
 8015854:	f7fc ffac 	bl	80127b0 <malloc>
 8015858:	6270      	str	r0, [r6, #36]	; 0x24
 801585a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801585e:	6004      	str	r4, [r0, #0]
 8015860:	60c4      	str	r4, [r0, #12]
 8015862:	b13d      	cbz	r5, 8015874 <_Bfree+0x2c>
 8015864:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8015866:	686a      	ldr	r2, [r5, #4]
 8015868:	68db      	ldr	r3, [r3, #12]
 801586a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801586e:	6029      	str	r1, [r5, #0]
 8015870:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8015874:	bd70      	pop	{r4, r5, r6, pc}

08015876 <__multadd>:
 8015876:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801587a:	690d      	ldr	r5, [r1, #16]
 801587c:	461f      	mov	r7, r3
 801587e:	4606      	mov	r6, r0
 8015880:	460c      	mov	r4, r1
 8015882:	f101 0c14 	add.w	ip, r1, #20
 8015886:	2300      	movs	r3, #0
 8015888:	f8dc 0000 	ldr.w	r0, [ip]
 801588c:	b281      	uxth	r1, r0
 801588e:	fb02 7101 	mla	r1, r2, r1, r7
 8015892:	0c0f      	lsrs	r7, r1, #16
 8015894:	0c00      	lsrs	r0, r0, #16
 8015896:	fb02 7000 	mla	r0, r2, r0, r7
 801589a:	b289      	uxth	r1, r1
 801589c:	3301      	adds	r3, #1
 801589e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80158a2:	429d      	cmp	r5, r3
 80158a4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80158a8:	f84c 1b04 	str.w	r1, [ip], #4
 80158ac:	dcec      	bgt.n	8015888 <__multadd+0x12>
 80158ae:	b1d7      	cbz	r7, 80158e6 <__multadd+0x70>
 80158b0:	68a3      	ldr	r3, [r4, #8]
 80158b2:	42ab      	cmp	r3, r5
 80158b4:	dc12      	bgt.n	80158dc <__multadd+0x66>
 80158b6:	6861      	ldr	r1, [r4, #4]
 80158b8:	4630      	mov	r0, r6
 80158ba:	3101      	adds	r1, #1
 80158bc:	f7ff ff90 	bl	80157e0 <_Balloc>
 80158c0:	6922      	ldr	r2, [r4, #16]
 80158c2:	3202      	adds	r2, #2
 80158c4:	f104 010c 	add.w	r1, r4, #12
 80158c8:	4680      	mov	r8, r0
 80158ca:	0092      	lsls	r2, r2, #2
 80158cc:	300c      	adds	r0, #12
 80158ce:	f7fc ff7f 	bl	80127d0 <memcpy>
 80158d2:	4621      	mov	r1, r4
 80158d4:	4630      	mov	r0, r6
 80158d6:	f7ff ffb7 	bl	8015848 <_Bfree>
 80158da:	4644      	mov	r4, r8
 80158dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80158e0:	3501      	adds	r5, #1
 80158e2:	615f      	str	r7, [r3, #20]
 80158e4:	6125      	str	r5, [r4, #16]
 80158e6:	4620      	mov	r0, r4
 80158e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080158ec <__s2b>:
 80158ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80158f0:	460c      	mov	r4, r1
 80158f2:	4615      	mov	r5, r2
 80158f4:	461f      	mov	r7, r3
 80158f6:	2209      	movs	r2, #9
 80158f8:	3308      	adds	r3, #8
 80158fa:	4606      	mov	r6, r0
 80158fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8015900:	2100      	movs	r1, #0
 8015902:	2201      	movs	r2, #1
 8015904:	429a      	cmp	r2, r3
 8015906:	db20      	blt.n	801594a <__s2b+0x5e>
 8015908:	4630      	mov	r0, r6
 801590a:	f7ff ff69 	bl	80157e0 <_Balloc>
 801590e:	9b08      	ldr	r3, [sp, #32]
 8015910:	6143      	str	r3, [r0, #20]
 8015912:	2d09      	cmp	r5, #9
 8015914:	f04f 0301 	mov.w	r3, #1
 8015918:	6103      	str	r3, [r0, #16]
 801591a:	dd19      	ble.n	8015950 <__s2b+0x64>
 801591c:	f104 0809 	add.w	r8, r4, #9
 8015920:	46c1      	mov	r9, r8
 8015922:	442c      	add	r4, r5
 8015924:	f819 3b01 	ldrb.w	r3, [r9], #1
 8015928:	4601      	mov	r1, r0
 801592a:	3b30      	subs	r3, #48	; 0x30
 801592c:	220a      	movs	r2, #10
 801592e:	4630      	mov	r0, r6
 8015930:	f7ff ffa1 	bl	8015876 <__multadd>
 8015934:	45a1      	cmp	r9, r4
 8015936:	d1f5      	bne.n	8015924 <__s2b+0x38>
 8015938:	eb08 0405 	add.w	r4, r8, r5
 801593c:	3c08      	subs	r4, #8
 801593e:	1b2d      	subs	r5, r5, r4
 8015940:	1963      	adds	r3, r4, r5
 8015942:	42bb      	cmp	r3, r7
 8015944:	db07      	blt.n	8015956 <__s2b+0x6a>
 8015946:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801594a:	0052      	lsls	r2, r2, #1
 801594c:	3101      	adds	r1, #1
 801594e:	e7d9      	b.n	8015904 <__s2b+0x18>
 8015950:	340a      	adds	r4, #10
 8015952:	2509      	movs	r5, #9
 8015954:	e7f3      	b.n	801593e <__s2b+0x52>
 8015956:	f814 3b01 	ldrb.w	r3, [r4], #1
 801595a:	4601      	mov	r1, r0
 801595c:	3b30      	subs	r3, #48	; 0x30
 801595e:	220a      	movs	r2, #10
 8015960:	4630      	mov	r0, r6
 8015962:	f7ff ff88 	bl	8015876 <__multadd>
 8015966:	e7eb      	b.n	8015940 <__s2b+0x54>

08015968 <__hi0bits>:
 8015968:	0c02      	lsrs	r2, r0, #16
 801596a:	0412      	lsls	r2, r2, #16
 801596c:	4603      	mov	r3, r0
 801596e:	b9b2      	cbnz	r2, 801599e <__hi0bits+0x36>
 8015970:	0403      	lsls	r3, r0, #16
 8015972:	2010      	movs	r0, #16
 8015974:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8015978:	bf04      	itt	eq
 801597a:	021b      	lsleq	r3, r3, #8
 801597c:	3008      	addeq	r0, #8
 801597e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8015982:	bf04      	itt	eq
 8015984:	011b      	lsleq	r3, r3, #4
 8015986:	3004      	addeq	r0, #4
 8015988:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801598c:	bf04      	itt	eq
 801598e:	009b      	lsleq	r3, r3, #2
 8015990:	3002      	addeq	r0, #2
 8015992:	2b00      	cmp	r3, #0
 8015994:	db06      	blt.n	80159a4 <__hi0bits+0x3c>
 8015996:	005b      	lsls	r3, r3, #1
 8015998:	d503      	bpl.n	80159a2 <__hi0bits+0x3a>
 801599a:	3001      	adds	r0, #1
 801599c:	4770      	bx	lr
 801599e:	2000      	movs	r0, #0
 80159a0:	e7e8      	b.n	8015974 <__hi0bits+0xc>
 80159a2:	2020      	movs	r0, #32
 80159a4:	4770      	bx	lr

080159a6 <__lo0bits>:
 80159a6:	6803      	ldr	r3, [r0, #0]
 80159a8:	f013 0207 	ands.w	r2, r3, #7
 80159ac:	4601      	mov	r1, r0
 80159ae:	d00b      	beq.n	80159c8 <__lo0bits+0x22>
 80159b0:	07da      	lsls	r2, r3, #31
 80159b2:	d423      	bmi.n	80159fc <__lo0bits+0x56>
 80159b4:	0798      	lsls	r0, r3, #30
 80159b6:	bf49      	itett	mi
 80159b8:	085b      	lsrmi	r3, r3, #1
 80159ba:	089b      	lsrpl	r3, r3, #2
 80159bc:	2001      	movmi	r0, #1
 80159be:	600b      	strmi	r3, [r1, #0]
 80159c0:	bf5c      	itt	pl
 80159c2:	600b      	strpl	r3, [r1, #0]
 80159c4:	2002      	movpl	r0, #2
 80159c6:	4770      	bx	lr
 80159c8:	b298      	uxth	r0, r3
 80159ca:	b9a8      	cbnz	r0, 80159f8 <__lo0bits+0x52>
 80159cc:	0c1b      	lsrs	r3, r3, #16
 80159ce:	2010      	movs	r0, #16
 80159d0:	f013 0fff 	tst.w	r3, #255	; 0xff
 80159d4:	bf04      	itt	eq
 80159d6:	0a1b      	lsreq	r3, r3, #8
 80159d8:	3008      	addeq	r0, #8
 80159da:	071a      	lsls	r2, r3, #28
 80159dc:	bf04      	itt	eq
 80159de:	091b      	lsreq	r3, r3, #4
 80159e0:	3004      	addeq	r0, #4
 80159e2:	079a      	lsls	r2, r3, #30
 80159e4:	bf04      	itt	eq
 80159e6:	089b      	lsreq	r3, r3, #2
 80159e8:	3002      	addeq	r0, #2
 80159ea:	07da      	lsls	r2, r3, #31
 80159ec:	d402      	bmi.n	80159f4 <__lo0bits+0x4e>
 80159ee:	085b      	lsrs	r3, r3, #1
 80159f0:	d006      	beq.n	8015a00 <__lo0bits+0x5a>
 80159f2:	3001      	adds	r0, #1
 80159f4:	600b      	str	r3, [r1, #0]
 80159f6:	4770      	bx	lr
 80159f8:	4610      	mov	r0, r2
 80159fa:	e7e9      	b.n	80159d0 <__lo0bits+0x2a>
 80159fc:	2000      	movs	r0, #0
 80159fe:	4770      	bx	lr
 8015a00:	2020      	movs	r0, #32
 8015a02:	4770      	bx	lr

08015a04 <__i2b>:
 8015a04:	b510      	push	{r4, lr}
 8015a06:	460c      	mov	r4, r1
 8015a08:	2101      	movs	r1, #1
 8015a0a:	f7ff fee9 	bl	80157e0 <_Balloc>
 8015a0e:	2201      	movs	r2, #1
 8015a10:	6144      	str	r4, [r0, #20]
 8015a12:	6102      	str	r2, [r0, #16]
 8015a14:	bd10      	pop	{r4, pc}

08015a16 <__multiply>:
 8015a16:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a1a:	4614      	mov	r4, r2
 8015a1c:	690a      	ldr	r2, [r1, #16]
 8015a1e:	6923      	ldr	r3, [r4, #16]
 8015a20:	429a      	cmp	r2, r3
 8015a22:	bfb8      	it	lt
 8015a24:	460b      	movlt	r3, r1
 8015a26:	4688      	mov	r8, r1
 8015a28:	bfbc      	itt	lt
 8015a2a:	46a0      	movlt	r8, r4
 8015a2c:	461c      	movlt	r4, r3
 8015a2e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8015a32:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8015a36:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015a3a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8015a3e:	eb07 0609 	add.w	r6, r7, r9
 8015a42:	42b3      	cmp	r3, r6
 8015a44:	bfb8      	it	lt
 8015a46:	3101      	addlt	r1, #1
 8015a48:	f7ff feca 	bl	80157e0 <_Balloc>
 8015a4c:	f100 0514 	add.w	r5, r0, #20
 8015a50:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8015a54:	462b      	mov	r3, r5
 8015a56:	2200      	movs	r2, #0
 8015a58:	4573      	cmp	r3, lr
 8015a5a:	d316      	bcc.n	8015a8a <__multiply+0x74>
 8015a5c:	f104 0214 	add.w	r2, r4, #20
 8015a60:	f108 0114 	add.w	r1, r8, #20
 8015a64:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8015a68:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8015a6c:	9300      	str	r3, [sp, #0]
 8015a6e:	9b00      	ldr	r3, [sp, #0]
 8015a70:	9201      	str	r2, [sp, #4]
 8015a72:	4293      	cmp	r3, r2
 8015a74:	d80c      	bhi.n	8015a90 <__multiply+0x7a>
 8015a76:	2e00      	cmp	r6, #0
 8015a78:	dd03      	ble.n	8015a82 <__multiply+0x6c>
 8015a7a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8015a7e:	2b00      	cmp	r3, #0
 8015a80:	d05d      	beq.n	8015b3e <__multiply+0x128>
 8015a82:	6106      	str	r6, [r0, #16]
 8015a84:	b003      	add	sp, #12
 8015a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a8a:	f843 2b04 	str.w	r2, [r3], #4
 8015a8e:	e7e3      	b.n	8015a58 <__multiply+0x42>
 8015a90:	f8b2 b000 	ldrh.w	fp, [r2]
 8015a94:	f1bb 0f00 	cmp.w	fp, #0
 8015a98:	d023      	beq.n	8015ae2 <__multiply+0xcc>
 8015a9a:	4689      	mov	r9, r1
 8015a9c:	46ac      	mov	ip, r5
 8015a9e:	f04f 0800 	mov.w	r8, #0
 8015aa2:	f859 4b04 	ldr.w	r4, [r9], #4
 8015aa6:	f8dc a000 	ldr.w	sl, [ip]
 8015aaa:	b2a3      	uxth	r3, r4
 8015aac:	fa1f fa8a 	uxth.w	sl, sl
 8015ab0:	fb0b a303 	mla	r3, fp, r3, sl
 8015ab4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8015ab8:	f8dc 4000 	ldr.w	r4, [ip]
 8015abc:	4443      	add	r3, r8
 8015abe:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8015ac2:	fb0b 840a 	mla	r4, fp, sl, r8
 8015ac6:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8015aca:	46e2      	mov	sl, ip
 8015acc:	b29b      	uxth	r3, r3
 8015ace:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8015ad2:	454f      	cmp	r7, r9
 8015ad4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8015ad8:	f84a 3b04 	str.w	r3, [sl], #4
 8015adc:	d82b      	bhi.n	8015b36 <__multiply+0x120>
 8015ade:	f8cc 8004 	str.w	r8, [ip, #4]
 8015ae2:	9b01      	ldr	r3, [sp, #4]
 8015ae4:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8015ae8:	3204      	adds	r2, #4
 8015aea:	f1ba 0f00 	cmp.w	sl, #0
 8015aee:	d020      	beq.n	8015b32 <__multiply+0x11c>
 8015af0:	682b      	ldr	r3, [r5, #0]
 8015af2:	4689      	mov	r9, r1
 8015af4:	46a8      	mov	r8, r5
 8015af6:	f04f 0b00 	mov.w	fp, #0
 8015afa:	f8b9 c000 	ldrh.w	ip, [r9]
 8015afe:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8015b02:	fb0a 440c 	mla	r4, sl, ip, r4
 8015b06:	445c      	add	r4, fp
 8015b08:	46c4      	mov	ip, r8
 8015b0a:	b29b      	uxth	r3, r3
 8015b0c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8015b10:	f84c 3b04 	str.w	r3, [ip], #4
 8015b14:	f859 3b04 	ldr.w	r3, [r9], #4
 8015b18:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8015b1c:	0c1b      	lsrs	r3, r3, #16
 8015b1e:	fb0a b303 	mla	r3, sl, r3, fp
 8015b22:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8015b26:	454f      	cmp	r7, r9
 8015b28:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8015b2c:	d805      	bhi.n	8015b3a <__multiply+0x124>
 8015b2e:	f8c8 3004 	str.w	r3, [r8, #4]
 8015b32:	3504      	adds	r5, #4
 8015b34:	e79b      	b.n	8015a6e <__multiply+0x58>
 8015b36:	46d4      	mov	ip, sl
 8015b38:	e7b3      	b.n	8015aa2 <__multiply+0x8c>
 8015b3a:	46e0      	mov	r8, ip
 8015b3c:	e7dd      	b.n	8015afa <__multiply+0xe4>
 8015b3e:	3e01      	subs	r6, #1
 8015b40:	e799      	b.n	8015a76 <__multiply+0x60>
	...

08015b44 <__pow5mult>:
 8015b44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015b48:	4615      	mov	r5, r2
 8015b4a:	f012 0203 	ands.w	r2, r2, #3
 8015b4e:	4606      	mov	r6, r0
 8015b50:	460f      	mov	r7, r1
 8015b52:	d007      	beq.n	8015b64 <__pow5mult+0x20>
 8015b54:	3a01      	subs	r2, #1
 8015b56:	4c21      	ldr	r4, [pc, #132]	; (8015bdc <__pow5mult+0x98>)
 8015b58:	2300      	movs	r3, #0
 8015b5a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015b5e:	f7ff fe8a 	bl	8015876 <__multadd>
 8015b62:	4607      	mov	r7, r0
 8015b64:	10ad      	asrs	r5, r5, #2
 8015b66:	d035      	beq.n	8015bd4 <__pow5mult+0x90>
 8015b68:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8015b6a:	b93c      	cbnz	r4, 8015b7c <__pow5mult+0x38>
 8015b6c:	2010      	movs	r0, #16
 8015b6e:	f7fc fe1f 	bl	80127b0 <malloc>
 8015b72:	6270      	str	r0, [r6, #36]	; 0x24
 8015b74:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015b78:	6004      	str	r4, [r0, #0]
 8015b7a:	60c4      	str	r4, [r0, #12]
 8015b7c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8015b80:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015b84:	b94c      	cbnz	r4, 8015b9a <__pow5mult+0x56>
 8015b86:	f240 2171 	movw	r1, #625	; 0x271
 8015b8a:	4630      	mov	r0, r6
 8015b8c:	f7ff ff3a 	bl	8015a04 <__i2b>
 8015b90:	2300      	movs	r3, #0
 8015b92:	f8c8 0008 	str.w	r0, [r8, #8]
 8015b96:	4604      	mov	r4, r0
 8015b98:	6003      	str	r3, [r0, #0]
 8015b9a:	f04f 0800 	mov.w	r8, #0
 8015b9e:	07eb      	lsls	r3, r5, #31
 8015ba0:	d50a      	bpl.n	8015bb8 <__pow5mult+0x74>
 8015ba2:	4639      	mov	r1, r7
 8015ba4:	4622      	mov	r2, r4
 8015ba6:	4630      	mov	r0, r6
 8015ba8:	f7ff ff35 	bl	8015a16 <__multiply>
 8015bac:	4639      	mov	r1, r7
 8015bae:	4681      	mov	r9, r0
 8015bb0:	4630      	mov	r0, r6
 8015bb2:	f7ff fe49 	bl	8015848 <_Bfree>
 8015bb6:	464f      	mov	r7, r9
 8015bb8:	106d      	asrs	r5, r5, #1
 8015bba:	d00b      	beq.n	8015bd4 <__pow5mult+0x90>
 8015bbc:	6820      	ldr	r0, [r4, #0]
 8015bbe:	b938      	cbnz	r0, 8015bd0 <__pow5mult+0x8c>
 8015bc0:	4622      	mov	r2, r4
 8015bc2:	4621      	mov	r1, r4
 8015bc4:	4630      	mov	r0, r6
 8015bc6:	f7ff ff26 	bl	8015a16 <__multiply>
 8015bca:	6020      	str	r0, [r4, #0]
 8015bcc:	f8c0 8000 	str.w	r8, [r0]
 8015bd0:	4604      	mov	r4, r0
 8015bd2:	e7e4      	b.n	8015b9e <__pow5mult+0x5a>
 8015bd4:	4638      	mov	r0, r7
 8015bd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015bda:	bf00      	nop
 8015bdc:	08018b38 	.word	0x08018b38

08015be0 <__lshift>:
 8015be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015be4:	460c      	mov	r4, r1
 8015be6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015bea:	6923      	ldr	r3, [r4, #16]
 8015bec:	6849      	ldr	r1, [r1, #4]
 8015bee:	eb0a 0903 	add.w	r9, sl, r3
 8015bf2:	68a3      	ldr	r3, [r4, #8]
 8015bf4:	4607      	mov	r7, r0
 8015bf6:	4616      	mov	r6, r2
 8015bf8:	f109 0501 	add.w	r5, r9, #1
 8015bfc:	42ab      	cmp	r3, r5
 8015bfe:	db32      	blt.n	8015c66 <__lshift+0x86>
 8015c00:	4638      	mov	r0, r7
 8015c02:	f7ff fded 	bl	80157e0 <_Balloc>
 8015c06:	2300      	movs	r3, #0
 8015c08:	4680      	mov	r8, r0
 8015c0a:	f100 0114 	add.w	r1, r0, #20
 8015c0e:	461a      	mov	r2, r3
 8015c10:	4553      	cmp	r3, sl
 8015c12:	db2b      	blt.n	8015c6c <__lshift+0x8c>
 8015c14:	6920      	ldr	r0, [r4, #16]
 8015c16:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015c1a:	f104 0314 	add.w	r3, r4, #20
 8015c1e:	f016 021f 	ands.w	r2, r6, #31
 8015c22:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015c26:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015c2a:	d025      	beq.n	8015c78 <__lshift+0x98>
 8015c2c:	f1c2 0e20 	rsb	lr, r2, #32
 8015c30:	2000      	movs	r0, #0
 8015c32:	681e      	ldr	r6, [r3, #0]
 8015c34:	468a      	mov	sl, r1
 8015c36:	4096      	lsls	r6, r2
 8015c38:	4330      	orrs	r0, r6
 8015c3a:	f84a 0b04 	str.w	r0, [sl], #4
 8015c3e:	f853 0b04 	ldr.w	r0, [r3], #4
 8015c42:	459c      	cmp	ip, r3
 8015c44:	fa20 f00e 	lsr.w	r0, r0, lr
 8015c48:	d814      	bhi.n	8015c74 <__lshift+0x94>
 8015c4a:	6048      	str	r0, [r1, #4]
 8015c4c:	b108      	cbz	r0, 8015c52 <__lshift+0x72>
 8015c4e:	f109 0502 	add.w	r5, r9, #2
 8015c52:	3d01      	subs	r5, #1
 8015c54:	4638      	mov	r0, r7
 8015c56:	f8c8 5010 	str.w	r5, [r8, #16]
 8015c5a:	4621      	mov	r1, r4
 8015c5c:	f7ff fdf4 	bl	8015848 <_Bfree>
 8015c60:	4640      	mov	r0, r8
 8015c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015c66:	3101      	adds	r1, #1
 8015c68:	005b      	lsls	r3, r3, #1
 8015c6a:	e7c7      	b.n	8015bfc <__lshift+0x1c>
 8015c6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8015c70:	3301      	adds	r3, #1
 8015c72:	e7cd      	b.n	8015c10 <__lshift+0x30>
 8015c74:	4651      	mov	r1, sl
 8015c76:	e7dc      	b.n	8015c32 <__lshift+0x52>
 8015c78:	3904      	subs	r1, #4
 8015c7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8015c7e:	f841 2f04 	str.w	r2, [r1, #4]!
 8015c82:	459c      	cmp	ip, r3
 8015c84:	d8f9      	bhi.n	8015c7a <__lshift+0x9a>
 8015c86:	e7e4      	b.n	8015c52 <__lshift+0x72>

08015c88 <__mcmp>:
 8015c88:	6903      	ldr	r3, [r0, #16]
 8015c8a:	690a      	ldr	r2, [r1, #16]
 8015c8c:	1a9b      	subs	r3, r3, r2
 8015c8e:	b530      	push	{r4, r5, lr}
 8015c90:	d10c      	bne.n	8015cac <__mcmp+0x24>
 8015c92:	0092      	lsls	r2, r2, #2
 8015c94:	3014      	adds	r0, #20
 8015c96:	3114      	adds	r1, #20
 8015c98:	1884      	adds	r4, r0, r2
 8015c9a:	4411      	add	r1, r2
 8015c9c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8015ca0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8015ca4:	4295      	cmp	r5, r2
 8015ca6:	d003      	beq.n	8015cb0 <__mcmp+0x28>
 8015ca8:	d305      	bcc.n	8015cb6 <__mcmp+0x2e>
 8015caa:	2301      	movs	r3, #1
 8015cac:	4618      	mov	r0, r3
 8015cae:	bd30      	pop	{r4, r5, pc}
 8015cb0:	42a0      	cmp	r0, r4
 8015cb2:	d3f3      	bcc.n	8015c9c <__mcmp+0x14>
 8015cb4:	e7fa      	b.n	8015cac <__mcmp+0x24>
 8015cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8015cba:	e7f7      	b.n	8015cac <__mcmp+0x24>

08015cbc <__mdiff>:
 8015cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015cc0:	460d      	mov	r5, r1
 8015cc2:	4607      	mov	r7, r0
 8015cc4:	4611      	mov	r1, r2
 8015cc6:	4628      	mov	r0, r5
 8015cc8:	4614      	mov	r4, r2
 8015cca:	f7ff ffdd 	bl	8015c88 <__mcmp>
 8015cce:	1e06      	subs	r6, r0, #0
 8015cd0:	d108      	bne.n	8015ce4 <__mdiff+0x28>
 8015cd2:	4631      	mov	r1, r6
 8015cd4:	4638      	mov	r0, r7
 8015cd6:	f7ff fd83 	bl	80157e0 <_Balloc>
 8015cda:	2301      	movs	r3, #1
 8015cdc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8015ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015ce4:	bfa4      	itt	ge
 8015ce6:	4623      	movge	r3, r4
 8015ce8:	462c      	movge	r4, r5
 8015cea:	4638      	mov	r0, r7
 8015cec:	6861      	ldr	r1, [r4, #4]
 8015cee:	bfa6      	itte	ge
 8015cf0:	461d      	movge	r5, r3
 8015cf2:	2600      	movge	r6, #0
 8015cf4:	2601      	movlt	r6, #1
 8015cf6:	f7ff fd73 	bl	80157e0 <_Balloc>
 8015cfa:	692b      	ldr	r3, [r5, #16]
 8015cfc:	60c6      	str	r6, [r0, #12]
 8015cfe:	6926      	ldr	r6, [r4, #16]
 8015d00:	f105 0914 	add.w	r9, r5, #20
 8015d04:	f104 0214 	add.w	r2, r4, #20
 8015d08:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8015d0c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8015d10:	f100 0514 	add.w	r5, r0, #20
 8015d14:	f04f 0e00 	mov.w	lr, #0
 8015d18:	f852 ab04 	ldr.w	sl, [r2], #4
 8015d1c:	f859 4b04 	ldr.w	r4, [r9], #4
 8015d20:	fa1e f18a 	uxtah	r1, lr, sl
 8015d24:	b2a3      	uxth	r3, r4
 8015d26:	1ac9      	subs	r1, r1, r3
 8015d28:	0c23      	lsrs	r3, r4, #16
 8015d2a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8015d2e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8015d32:	b289      	uxth	r1, r1
 8015d34:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8015d38:	45c8      	cmp	r8, r9
 8015d3a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8015d3e:	4694      	mov	ip, r2
 8015d40:	f845 3b04 	str.w	r3, [r5], #4
 8015d44:	d8e8      	bhi.n	8015d18 <__mdiff+0x5c>
 8015d46:	45bc      	cmp	ip, r7
 8015d48:	d304      	bcc.n	8015d54 <__mdiff+0x98>
 8015d4a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8015d4e:	b183      	cbz	r3, 8015d72 <__mdiff+0xb6>
 8015d50:	6106      	str	r6, [r0, #16]
 8015d52:	e7c5      	b.n	8015ce0 <__mdiff+0x24>
 8015d54:	f85c 1b04 	ldr.w	r1, [ip], #4
 8015d58:	fa1e f381 	uxtah	r3, lr, r1
 8015d5c:	141a      	asrs	r2, r3, #16
 8015d5e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8015d62:	b29b      	uxth	r3, r3
 8015d64:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015d68:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8015d6c:	f845 3b04 	str.w	r3, [r5], #4
 8015d70:	e7e9      	b.n	8015d46 <__mdiff+0x8a>
 8015d72:	3e01      	subs	r6, #1
 8015d74:	e7e9      	b.n	8015d4a <__mdiff+0x8e>
	...

08015d78 <__ulp>:
 8015d78:	4b12      	ldr	r3, [pc, #72]	; (8015dc4 <__ulp+0x4c>)
 8015d7a:	ee10 2a90 	vmov	r2, s1
 8015d7e:	401a      	ands	r2, r3
 8015d80:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8015d84:	2b00      	cmp	r3, #0
 8015d86:	dd04      	ble.n	8015d92 <__ulp+0x1a>
 8015d88:	2000      	movs	r0, #0
 8015d8a:	4619      	mov	r1, r3
 8015d8c:	ec41 0b10 	vmov	d0, r0, r1
 8015d90:	4770      	bx	lr
 8015d92:	425b      	negs	r3, r3
 8015d94:	151b      	asrs	r3, r3, #20
 8015d96:	2b13      	cmp	r3, #19
 8015d98:	f04f 0000 	mov.w	r0, #0
 8015d9c:	f04f 0100 	mov.w	r1, #0
 8015da0:	dc04      	bgt.n	8015dac <__ulp+0x34>
 8015da2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8015da6:	fa42 f103 	asr.w	r1, r2, r3
 8015daa:	e7ef      	b.n	8015d8c <__ulp+0x14>
 8015dac:	3b14      	subs	r3, #20
 8015dae:	2b1e      	cmp	r3, #30
 8015db0:	f04f 0201 	mov.w	r2, #1
 8015db4:	bfda      	itte	le
 8015db6:	f1c3 031f 	rsble	r3, r3, #31
 8015dba:	fa02 f303 	lslle.w	r3, r2, r3
 8015dbe:	4613      	movgt	r3, r2
 8015dc0:	4618      	mov	r0, r3
 8015dc2:	e7e3      	b.n	8015d8c <__ulp+0x14>
 8015dc4:	7ff00000 	.word	0x7ff00000

08015dc8 <__b2d>:
 8015dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015dca:	6905      	ldr	r5, [r0, #16]
 8015dcc:	f100 0714 	add.w	r7, r0, #20
 8015dd0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8015dd4:	1f2e      	subs	r6, r5, #4
 8015dd6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8015dda:	4620      	mov	r0, r4
 8015ddc:	f7ff fdc4 	bl	8015968 <__hi0bits>
 8015de0:	f1c0 0320 	rsb	r3, r0, #32
 8015de4:	280a      	cmp	r0, #10
 8015de6:	600b      	str	r3, [r1, #0]
 8015de8:	f8df c074 	ldr.w	ip, [pc, #116]	; 8015e60 <__b2d+0x98>
 8015dec:	dc14      	bgt.n	8015e18 <__b2d+0x50>
 8015dee:	f1c0 0e0b 	rsb	lr, r0, #11
 8015df2:	fa24 f10e 	lsr.w	r1, r4, lr
 8015df6:	42b7      	cmp	r7, r6
 8015df8:	ea41 030c 	orr.w	r3, r1, ip
 8015dfc:	bf34      	ite	cc
 8015dfe:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8015e02:	2100      	movcs	r1, #0
 8015e04:	3015      	adds	r0, #21
 8015e06:	fa04 f000 	lsl.w	r0, r4, r0
 8015e0a:	fa21 f10e 	lsr.w	r1, r1, lr
 8015e0e:	ea40 0201 	orr.w	r2, r0, r1
 8015e12:	ec43 2b10 	vmov	d0, r2, r3
 8015e16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015e18:	42b7      	cmp	r7, r6
 8015e1a:	bf3a      	itte	cc
 8015e1c:	f1a5 0608 	subcc.w	r6, r5, #8
 8015e20:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8015e24:	2100      	movcs	r1, #0
 8015e26:	380b      	subs	r0, #11
 8015e28:	d015      	beq.n	8015e56 <__b2d+0x8e>
 8015e2a:	4084      	lsls	r4, r0
 8015e2c:	f1c0 0520 	rsb	r5, r0, #32
 8015e30:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8015e34:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8015e38:	42be      	cmp	r6, r7
 8015e3a:	fa21 fc05 	lsr.w	ip, r1, r5
 8015e3e:	ea44 030c 	orr.w	r3, r4, ip
 8015e42:	bf8c      	ite	hi
 8015e44:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8015e48:	2400      	movls	r4, #0
 8015e4a:	fa01 f000 	lsl.w	r0, r1, r0
 8015e4e:	40ec      	lsrs	r4, r5
 8015e50:	ea40 0204 	orr.w	r2, r0, r4
 8015e54:	e7dd      	b.n	8015e12 <__b2d+0x4a>
 8015e56:	ea44 030c 	orr.w	r3, r4, ip
 8015e5a:	460a      	mov	r2, r1
 8015e5c:	e7d9      	b.n	8015e12 <__b2d+0x4a>
 8015e5e:	bf00      	nop
 8015e60:	3ff00000 	.word	0x3ff00000

08015e64 <__d2b>:
 8015e64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015e68:	460e      	mov	r6, r1
 8015e6a:	2101      	movs	r1, #1
 8015e6c:	ec59 8b10 	vmov	r8, r9, d0
 8015e70:	4615      	mov	r5, r2
 8015e72:	f7ff fcb5 	bl	80157e0 <_Balloc>
 8015e76:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8015e7a:	4607      	mov	r7, r0
 8015e7c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015e80:	bb34      	cbnz	r4, 8015ed0 <__d2b+0x6c>
 8015e82:	9301      	str	r3, [sp, #4]
 8015e84:	f1b8 0300 	subs.w	r3, r8, #0
 8015e88:	d027      	beq.n	8015eda <__d2b+0x76>
 8015e8a:	a802      	add	r0, sp, #8
 8015e8c:	f840 3d08 	str.w	r3, [r0, #-8]!
 8015e90:	f7ff fd89 	bl	80159a6 <__lo0bits>
 8015e94:	9900      	ldr	r1, [sp, #0]
 8015e96:	b1f0      	cbz	r0, 8015ed6 <__d2b+0x72>
 8015e98:	9a01      	ldr	r2, [sp, #4]
 8015e9a:	f1c0 0320 	rsb	r3, r0, #32
 8015e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8015ea2:	430b      	orrs	r3, r1
 8015ea4:	40c2      	lsrs	r2, r0
 8015ea6:	617b      	str	r3, [r7, #20]
 8015ea8:	9201      	str	r2, [sp, #4]
 8015eaa:	9b01      	ldr	r3, [sp, #4]
 8015eac:	61bb      	str	r3, [r7, #24]
 8015eae:	2b00      	cmp	r3, #0
 8015eb0:	bf14      	ite	ne
 8015eb2:	2102      	movne	r1, #2
 8015eb4:	2101      	moveq	r1, #1
 8015eb6:	6139      	str	r1, [r7, #16]
 8015eb8:	b1c4      	cbz	r4, 8015eec <__d2b+0x88>
 8015eba:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8015ebe:	4404      	add	r4, r0
 8015ec0:	6034      	str	r4, [r6, #0]
 8015ec2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8015ec6:	6028      	str	r0, [r5, #0]
 8015ec8:	4638      	mov	r0, r7
 8015eca:	b003      	add	sp, #12
 8015ecc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015ed0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015ed4:	e7d5      	b.n	8015e82 <__d2b+0x1e>
 8015ed6:	6179      	str	r1, [r7, #20]
 8015ed8:	e7e7      	b.n	8015eaa <__d2b+0x46>
 8015eda:	a801      	add	r0, sp, #4
 8015edc:	f7ff fd63 	bl	80159a6 <__lo0bits>
 8015ee0:	9b01      	ldr	r3, [sp, #4]
 8015ee2:	617b      	str	r3, [r7, #20]
 8015ee4:	2101      	movs	r1, #1
 8015ee6:	6139      	str	r1, [r7, #16]
 8015ee8:	3020      	adds	r0, #32
 8015eea:	e7e5      	b.n	8015eb8 <__d2b+0x54>
 8015eec:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8015ef0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8015ef4:	6030      	str	r0, [r6, #0]
 8015ef6:	6918      	ldr	r0, [r3, #16]
 8015ef8:	f7ff fd36 	bl	8015968 <__hi0bits>
 8015efc:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8015f00:	e7e1      	b.n	8015ec6 <__d2b+0x62>

08015f02 <__ratio>:
 8015f02:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f06:	4688      	mov	r8, r1
 8015f08:	4669      	mov	r1, sp
 8015f0a:	4681      	mov	r9, r0
 8015f0c:	f7ff ff5c 	bl	8015dc8 <__b2d>
 8015f10:	a901      	add	r1, sp, #4
 8015f12:	4640      	mov	r0, r8
 8015f14:	ec57 6b10 	vmov	r6, r7, d0
 8015f18:	f7ff ff56 	bl	8015dc8 <__b2d>
 8015f1c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015f20:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8015f24:	eba3 0c02 	sub.w	ip, r3, r2
 8015f28:	e9dd 3200 	ldrd	r3, r2, [sp]
 8015f2c:	1a9b      	subs	r3, r3, r2
 8015f2e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8015f32:	ec5b ab10 	vmov	sl, fp, d0
 8015f36:	2b00      	cmp	r3, #0
 8015f38:	bfce      	itee	gt
 8015f3a:	463a      	movgt	r2, r7
 8015f3c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8015f40:	465a      	movle	r2, fp
 8015f42:	4659      	mov	r1, fp
 8015f44:	463d      	mov	r5, r7
 8015f46:	bfd4      	ite	le
 8015f48:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8015f4c:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8015f50:	4630      	mov	r0, r6
 8015f52:	ee10 2a10 	vmov	r2, s0
 8015f56:	460b      	mov	r3, r1
 8015f58:	4629      	mov	r1, r5
 8015f5a:	f7ea fc87 	bl	800086c <__aeabi_ddiv>
 8015f5e:	ec41 0b10 	vmov	d0, r0, r1
 8015f62:	b003      	add	sp, #12
 8015f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015f68 <__copybits>:
 8015f68:	3901      	subs	r1, #1
 8015f6a:	b510      	push	{r4, lr}
 8015f6c:	1149      	asrs	r1, r1, #5
 8015f6e:	6914      	ldr	r4, [r2, #16]
 8015f70:	3101      	adds	r1, #1
 8015f72:	f102 0314 	add.w	r3, r2, #20
 8015f76:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8015f7a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8015f7e:	42a3      	cmp	r3, r4
 8015f80:	4602      	mov	r2, r0
 8015f82:	d303      	bcc.n	8015f8c <__copybits+0x24>
 8015f84:	2300      	movs	r3, #0
 8015f86:	428a      	cmp	r2, r1
 8015f88:	d305      	bcc.n	8015f96 <__copybits+0x2e>
 8015f8a:	bd10      	pop	{r4, pc}
 8015f8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8015f90:	f840 2b04 	str.w	r2, [r0], #4
 8015f94:	e7f3      	b.n	8015f7e <__copybits+0x16>
 8015f96:	f842 3b04 	str.w	r3, [r2], #4
 8015f9a:	e7f4      	b.n	8015f86 <__copybits+0x1e>

08015f9c <__any_on>:
 8015f9c:	f100 0214 	add.w	r2, r0, #20
 8015fa0:	6900      	ldr	r0, [r0, #16]
 8015fa2:	114b      	asrs	r3, r1, #5
 8015fa4:	4298      	cmp	r0, r3
 8015fa6:	b510      	push	{r4, lr}
 8015fa8:	db11      	blt.n	8015fce <__any_on+0x32>
 8015faa:	dd0a      	ble.n	8015fc2 <__any_on+0x26>
 8015fac:	f011 011f 	ands.w	r1, r1, #31
 8015fb0:	d007      	beq.n	8015fc2 <__any_on+0x26>
 8015fb2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8015fb6:	fa24 f001 	lsr.w	r0, r4, r1
 8015fba:	fa00 f101 	lsl.w	r1, r0, r1
 8015fbe:	428c      	cmp	r4, r1
 8015fc0:	d10b      	bne.n	8015fda <__any_on+0x3e>
 8015fc2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015fc6:	4293      	cmp	r3, r2
 8015fc8:	d803      	bhi.n	8015fd2 <__any_on+0x36>
 8015fca:	2000      	movs	r0, #0
 8015fcc:	bd10      	pop	{r4, pc}
 8015fce:	4603      	mov	r3, r0
 8015fd0:	e7f7      	b.n	8015fc2 <__any_on+0x26>
 8015fd2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015fd6:	2900      	cmp	r1, #0
 8015fd8:	d0f5      	beq.n	8015fc6 <__any_on+0x2a>
 8015fda:	2001      	movs	r0, #1
 8015fdc:	e7f6      	b.n	8015fcc <__any_on+0x30>

08015fde <_calloc_r>:
 8015fde:	b538      	push	{r3, r4, r5, lr}
 8015fe0:	fb02 f401 	mul.w	r4, r2, r1
 8015fe4:	4621      	mov	r1, r4
 8015fe6:	f7fc fc6d 	bl	80128c4 <_malloc_r>
 8015fea:	4605      	mov	r5, r0
 8015fec:	b118      	cbz	r0, 8015ff6 <_calloc_r+0x18>
 8015fee:	4622      	mov	r2, r4
 8015ff0:	2100      	movs	r1, #0
 8015ff2:	f7fc fc11 	bl	8012818 <memset>
 8015ff6:	4628      	mov	r0, r5
 8015ff8:	bd38      	pop	{r3, r4, r5, pc}

08015ffa <__ssputs_r>:
 8015ffa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015ffe:	688e      	ldr	r6, [r1, #8]
 8016000:	429e      	cmp	r6, r3
 8016002:	4682      	mov	sl, r0
 8016004:	460c      	mov	r4, r1
 8016006:	4690      	mov	r8, r2
 8016008:	4699      	mov	r9, r3
 801600a:	d837      	bhi.n	801607c <__ssputs_r+0x82>
 801600c:	898a      	ldrh	r2, [r1, #12]
 801600e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016012:	d031      	beq.n	8016078 <__ssputs_r+0x7e>
 8016014:	6825      	ldr	r5, [r4, #0]
 8016016:	6909      	ldr	r1, [r1, #16]
 8016018:	1a6f      	subs	r7, r5, r1
 801601a:	6965      	ldr	r5, [r4, #20]
 801601c:	2302      	movs	r3, #2
 801601e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016022:	fb95 f5f3 	sdiv	r5, r5, r3
 8016026:	f109 0301 	add.w	r3, r9, #1
 801602a:	443b      	add	r3, r7
 801602c:	429d      	cmp	r5, r3
 801602e:	bf38      	it	cc
 8016030:	461d      	movcc	r5, r3
 8016032:	0553      	lsls	r3, r2, #21
 8016034:	d530      	bpl.n	8016098 <__ssputs_r+0x9e>
 8016036:	4629      	mov	r1, r5
 8016038:	f7fc fc44 	bl	80128c4 <_malloc_r>
 801603c:	4606      	mov	r6, r0
 801603e:	b950      	cbnz	r0, 8016056 <__ssputs_r+0x5c>
 8016040:	230c      	movs	r3, #12
 8016042:	f8ca 3000 	str.w	r3, [sl]
 8016046:	89a3      	ldrh	r3, [r4, #12]
 8016048:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801604c:	81a3      	strh	r3, [r4, #12]
 801604e:	f04f 30ff 	mov.w	r0, #4294967295
 8016052:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016056:	463a      	mov	r2, r7
 8016058:	6921      	ldr	r1, [r4, #16]
 801605a:	f7fc fbb9 	bl	80127d0 <memcpy>
 801605e:	89a3      	ldrh	r3, [r4, #12]
 8016060:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016068:	81a3      	strh	r3, [r4, #12]
 801606a:	6126      	str	r6, [r4, #16]
 801606c:	6165      	str	r5, [r4, #20]
 801606e:	443e      	add	r6, r7
 8016070:	1bed      	subs	r5, r5, r7
 8016072:	6026      	str	r6, [r4, #0]
 8016074:	60a5      	str	r5, [r4, #8]
 8016076:	464e      	mov	r6, r9
 8016078:	454e      	cmp	r6, r9
 801607a:	d900      	bls.n	801607e <__ssputs_r+0x84>
 801607c:	464e      	mov	r6, r9
 801607e:	4632      	mov	r2, r6
 8016080:	4641      	mov	r1, r8
 8016082:	6820      	ldr	r0, [r4, #0]
 8016084:	f7fc fbaf 	bl	80127e6 <memmove>
 8016088:	68a3      	ldr	r3, [r4, #8]
 801608a:	1b9b      	subs	r3, r3, r6
 801608c:	60a3      	str	r3, [r4, #8]
 801608e:	6823      	ldr	r3, [r4, #0]
 8016090:	441e      	add	r6, r3
 8016092:	6026      	str	r6, [r4, #0]
 8016094:	2000      	movs	r0, #0
 8016096:	e7dc      	b.n	8016052 <__ssputs_r+0x58>
 8016098:	462a      	mov	r2, r5
 801609a:	f000 fd1a 	bl	8016ad2 <_realloc_r>
 801609e:	4606      	mov	r6, r0
 80160a0:	2800      	cmp	r0, #0
 80160a2:	d1e2      	bne.n	801606a <__ssputs_r+0x70>
 80160a4:	6921      	ldr	r1, [r4, #16]
 80160a6:	4650      	mov	r0, sl
 80160a8:	f7fc fbbe 	bl	8012828 <_free_r>
 80160ac:	e7c8      	b.n	8016040 <__ssputs_r+0x46>
	...

080160b0 <_svfiprintf_r>:
 80160b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160b4:	461d      	mov	r5, r3
 80160b6:	898b      	ldrh	r3, [r1, #12]
 80160b8:	061f      	lsls	r7, r3, #24
 80160ba:	b09d      	sub	sp, #116	; 0x74
 80160bc:	4680      	mov	r8, r0
 80160be:	460c      	mov	r4, r1
 80160c0:	4616      	mov	r6, r2
 80160c2:	d50f      	bpl.n	80160e4 <_svfiprintf_r+0x34>
 80160c4:	690b      	ldr	r3, [r1, #16]
 80160c6:	b96b      	cbnz	r3, 80160e4 <_svfiprintf_r+0x34>
 80160c8:	2140      	movs	r1, #64	; 0x40
 80160ca:	f7fc fbfb 	bl	80128c4 <_malloc_r>
 80160ce:	6020      	str	r0, [r4, #0]
 80160d0:	6120      	str	r0, [r4, #16]
 80160d2:	b928      	cbnz	r0, 80160e0 <_svfiprintf_r+0x30>
 80160d4:	230c      	movs	r3, #12
 80160d6:	f8c8 3000 	str.w	r3, [r8]
 80160da:	f04f 30ff 	mov.w	r0, #4294967295
 80160de:	e0c8      	b.n	8016272 <_svfiprintf_r+0x1c2>
 80160e0:	2340      	movs	r3, #64	; 0x40
 80160e2:	6163      	str	r3, [r4, #20]
 80160e4:	2300      	movs	r3, #0
 80160e6:	9309      	str	r3, [sp, #36]	; 0x24
 80160e8:	2320      	movs	r3, #32
 80160ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80160ee:	2330      	movs	r3, #48	; 0x30
 80160f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80160f4:	9503      	str	r5, [sp, #12]
 80160f6:	f04f 0b01 	mov.w	fp, #1
 80160fa:	4637      	mov	r7, r6
 80160fc:	463d      	mov	r5, r7
 80160fe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016102:	b10b      	cbz	r3, 8016108 <_svfiprintf_r+0x58>
 8016104:	2b25      	cmp	r3, #37	; 0x25
 8016106:	d13e      	bne.n	8016186 <_svfiprintf_r+0xd6>
 8016108:	ebb7 0a06 	subs.w	sl, r7, r6
 801610c:	d00b      	beq.n	8016126 <_svfiprintf_r+0x76>
 801610e:	4653      	mov	r3, sl
 8016110:	4632      	mov	r2, r6
 8016112:	4621      	mov	r1, r4
 8016114:	4640      	mov	r0, r8
 8016116:	f7ff ff70 	bl	8015ffa <__ssputs_r>
 801611a:	3001      	adds	r0, #1
 801611c:	f000 80a4 	beq.w	8016268 <_svfiprintf_r+0x1b8>
 8016120:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016122:	4453      	add	r3, sl
 8016124:	9309      	str	r3, [sp, #36]	; 0x24
 8016126:	783b      	ldrb	r3, [r7, #0]
 8016128:	2b00      	cmp	r3, #0
 801612a:	f000 809d 	beq.w	8016268 <_svfiprintf_r+0x1b8>
 801612e:	2300      	movs	r3, #0
 8016130:	f04f 32ff 	mov.w	r2, #4294967295
 8016134:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016138:	9304      	str	r3, [sp, #16]
 801613a:	9307      	str	r3, [sp, #28]
 801613c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016140:	931a      	str	r3, [sp, #104]	; 0x68
 8016142:	462f      	mov	r7, r5
 8016144:	2205      	movs	r2, #5
 8016146:	f817 1b01 	ldrb.w	r1, [r7], #1
 801614a:	4850      	ldr	r0, [pc, #320]	; (801628c <_svfiprintf_r+0x1dc>)
 801614c:	f7ea f858 	bl	8000200 <memchr>
 8016150:	9b04      	ldr	r3, [sp, #16]
 8016152:	b9d0      	cbnz	r0, 801618a <_svfiprintf_r+0xda>
 8016154:	06d9      	lsls	r1, r3, #27
 8016156:	bf44      	itt	mi
 8016158:	2220      	movmi	r2, #32
 801615a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801615e:	071a      	lsls	r2, r3, #28
 8016160:	bf44      	itt	mi
 8016162:	222b      	movmi	r2, #43	; 0x2b
 8016164:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016168:	782a      	ldrb	r2, [r5, #0]
 801616a:	2a2a      	cmp	r2, #42	; 0x2a
 801616c:	d015      	beq.n	801619a <_svfiprintf_r+0xea>
 801616e:	9a07      	ldr	r2, [sp, #28]
 8016170:	462f      	mov	r7, r5
 8016172:	2000      	movs	r0, #0
 8016174:	250a      	movs	r5, #10
 8016176:	4639      	mov	r1, r7
 8016178:	f811 3b01 	ldrb.w	r3, [r1], #1
 801617c:	3b30      	subs	r3, #48	; 0x30
 801617e:	2b09      	cmp	r3, #9
 8016180:	d94d      	bls.n	801621e <_svfiprintf_r+0x16e>
 8016182:	b1b8      	cbz	r0, 80161b4 <_svfiprintf_r+0x104>
 8016184:	e00f      	b.n	80161a6 <_svfiprintf_r+0xf6>
 8016186:	462f      	mov	r7, r5
 8016188:	e7b8      	b.n	80160fc <_svfiprintf_r+0x4c>
 801618a:	4a40      	ldr	r2, [pc, #256]	; (801628c <_svfiprintf_r+0x1dc>)
 801618c:	1a80      	subs	r0, r0, r2
 801618e:	fa0b f000 	lsl.w	r0, fp, r0
 8016192:	4318      	orrs	r0, r3
 8016194:	9004      	str	r0, [sp, #16]
 8016196:	463d      	mov	r5, r7
 8016198:	e7d3      	b.n	8016142 <_svfiprintf_r+0x92>
 801619a:	9a03      	ldr	r2, [sp, #12]
 801619c:	1d11      	adds	r1, r2, #4
 801619e:	6812      	ldr	r2, [r2, #0]
 80161a0:	9103      	str	r1, [sp, #12]
 80161a2:	2a00      	cmp	r2, #0
 80161a4:	db01      	blt.n	80161aa <_svfiprintf_r+0xfa>
 80161a6:	9207      	str	r2, [sp, #28]
 80161a8:	e004      	b.n	80161b4 <_svfiprintf_r+0x104>
 80161aa:	4252      	negs	r2, r2
 80161ac:	f043 0302 	orr.w	r3, r3, #2
 80161b0:	9207      	str	r2, [sp, #28]
 80161b2:	9304      	str	r3, [sp, #16]
 80161b4:	783b      	ldrb	r3, [r7, #0]
 80161b6:	2b2e      	cmp	r3, #46	; 0x2e
 80161b8:	d10c      	bne.n	80161d4 <_svfiprintf_r+0x124>
 80161ba:	787b      	ldrb	r3, [r7, #1]
 80161bc:	2b2a      	cmp	r3, #42	; 0x2a
 80161be:	d133      	bne.n	8016228 <_svfiprintf_r+0x178>
 80161c0:	9b03      	ldr	r3, [sp, #12]
 80161c2:	1d1a      	adds	r2, r3, #4
 80161c4:	681b      	ldr	r3, [r3, #0]
 80161c6:	9203      	str	r2, [sp, #12]
 80161c8:	2b00      	cmp	r3, #0
 80161ca:	bfb8      	it	lt
 80161cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80161d0:	3702      	adds	r7, #2
 80161d2:	9305      	str	r3, [sp, #20]
 80161d4:	4d2e      	ldr	r5, [pc, #184]	; (8016290 <_svfiprintf_r+0x1e0>)
 80161d6:	7839      	ldrb	r1, [r7, #0]
 80161d8:	2203      	movs	r2, #3
 80161da:	4628      	mov	r0, r5
 80161dc:	f7ea f810 	bl	8000200 <memchr>
 80161e0:	b138      	cbz	r0, 80161f2 <_svfiprintf_r+0x142>
 80161e2:	2340      	movs	r3, #64	; 0x40
 80161e4:	1b40      	subs	r0, r0, r5
 80161e6:	fa03 f000 	lsl.w	r0, r3, r0
 80161ea:	9b04      	ldr	r3, [sp, #16]
 80161ec:	4303      	orrs	r3, r0
 80161ee:	3701      	adds	r7, #1
 80161f0:	9304      	str	r3, [sp, #16]
 80161f2:	7839      	ldrb	r1, [r7, #0]
 80161f4:	4827      	ldr	r0, [pc, #156]	; (8016294 <_svfiprintf_r+0x1e4>)
 80161f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80161fa:	2206      	movs	r2, #6
 80161fc:	1c7e      	adds	r6, r7, #1
 80161fe:	f7e9 ffff 	bl	8000200 <memchr>
 8016202:	2800      	cmp	r0, #0
 8016204:	d038      	beq.n	8016278 <_svfiprintf_r+0x1c8>
 8016206:	4b24      	ldr	r3, [pc, #144]	; (8016298 <_svfiprintf_r+0x1e8>)
 8016208:	bb13      	cbnz	r3, 8016250 <_svfiprintf_r+0x1a0>
 801620a:	9b03      	ldr	r3, [sp, #12]
 801620c:	3307      	adds	r3, #7
 801620e:	f023 0307 	bic.w	r3, r3, #7
 8016212:	3308      	adds	r3, #8
 8016214:	9303      	str	r3, [sp, #12]
 8016216:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016218:	444b      	add	r3, r9
 801621a:	9309      	str	r3, [sp, #36]	; 0x24
 801621c:	e76d      	b.n	80160fa <_svfiprintf_r+0x4a>
 801621e:	fb05 3202 	mla	r2, r5, r2, r3
 8016222:	2001      	movs	r0, #1
 8016224:	460f      	mov	r7, r1
 8016226:	e7a6      	b.n	8016176 <_svfiprintf_r+0xc6>
 8016228:	2300      	movs	r3, #0
 801622a:	3701      	adds	r7, #1
 801622c:	9305      	str	r3, [sp, #20]
 801622e:	4619      	mov	r1, r3
 8016230:	250a      	movs	r5, #10
 8016232:	4638      	mov	r0, r7
 8016234:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016238:	3a30      	subs	r2, #48	; 0x30
 801623a:	2a09      	cmp	r2, #9
 801623c:	d903      	bls.n	8016246 <_svfiprintf_r+0x196>
 801623e:	2b00      	cmp	r3, #0
 8016240:	d0c8      	beq.n	80161d4 <_svfiprintf_r+0x124>
 8016242:	9105      	str	r1, [sp, #20]
 8016244:	e7c6      	b.n	80161d4 <_svfiprintf_r+0x124>
 8016246:	fb05 2101 	mla	r1, r5, r1, r2
 801624a:	2301      	movs	r3, #1
 801624c:	4607      	mov	r7, r0
 801624e:	e7f0      	b.n	8016232 <_svfiprintf_r+0x182>
 8016250:	ab03      	add	r3, sp, #12
 8016252:	9300      	str	r3, [sp, #0]
 8016254:	4622      	mov	r2, r4
 8016256:	4b11      	ldr	r3, [pc, #68]	; (801629c <_svfiprintf_r+0x1ec>)
 8016258:	a904      	add	r1, sp, #16
 801625a:	4640      	mov	r0, r8
 801625c:	f7fc fc20 	bl	8012aa0 <_printf_float>
 8016260:	f1b0 3fff 	cmp.w	r0, #4294967295
 8016264:	4681      	mov	r9, r0
 8016266:	d1d6      	bne.n	8016216 <_svfiprintf_r+0x166>
 8016268:	89a3      	ldrh	r3, [r4, #12]
 801626a:	065b      	lsls	r3, r3, #25
 801626c:	f53f af35 	bmi.w	80160da <_svfiprintf_r+0x2a>
 8016270:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016272:	b01d      	add	sp, #116	; 0x74
 8016274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016278:	ab03      	add	r3, sp, #12
 801627a:	9300      	str	r3, [sp, #0]
 801627c:	4622      	mov	r2, r4
 801627e:	4b07      	ldr	r3, [pc, #28]	; (801629c <_svfiprintf_r+0x1ec>)
 8016280:	a904      	add	r1, sp, #16
 8016282:	4640      	mov	r0, r8
 8016284:	f7fc fec2 	bl	801300c <_printf_i>
 8016288:	e7ea      	b.n	8016260 <_svfiprintf_r+0x1b0>
 801628a:	bf00      	nop
 801628c:	08018b44 	.word	0x08018b44
 8016290:	08018b4a 	.word	0x08018b4a
 8016294:	08018b4e 	.word	0x08018b4e
 8016298:	08012aa1 	.word	0x08012aa1
 801629c:	08015ffb 	.word	0x08015ffb

080162a0 <_sungetc_r>:
 80162a0:	b538      	push	{r3, r4, r5, lr}
 80162a2:	1c4b      	adds	r3, r1, #1
 80162a4:	4614      	mov	r4, r2
 80162a6:	d103      	bne.n	80162b0 <_sungetc_r+0x10>
 80162a8:	f04f 35ff 	mov.w	r5, #4294967295
 80162ac:	4628      	mov	r0, r5
 80162ae:	bd38      	pop	{r3, r4, r5, pc}
 80162b0:	8993      	ldrh	r3, [r2, #12]
 80162b2:	f023 0320 	bic.w	r3, r3, #32
 80162b6:	8193      	strh	r3, [r2, #12]
 80162b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80162ba:	6852      	ldr	r2, [r2, #4]
 80162bc:	b2cd      	uxtb	r5, r1
 80162be:	b18b      	cbz	r3, 80162e4 <_sungetc_r+0x44>
 80162c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80162c2:	4293      	cmp	r3, r2
 80162c4:	dd08      	ble.n	80162d8 <_sungetc_r+0x38>
 80162c6:	6823      	ldr	r3, [r4, #0]
 80162c8:	1e5a      	subs	r2, r3, #1
 80162ca:	6022      	str	r2, [r4, #0]
 80162cc:	f803 5c01 	strb.w	r5, [r3, #-1]
 80162d0:	6863      	ldr	r3, [r4, #4]
 80162d2:	3301      	adds	r3, #1
 80162d4:	6063      	str	r3, [r4, #4]
 80162d6:	e7e9      	b.n	80162ac <_sungetc_r+0xc>
 80162d8:	4621      	mov	r1, r4
 80162da:	f000 fbb3 	bl	8016a44 <__submore>
 80162de:	2800      	cmp	r0, #0
 80162e0:	d0f1      	beq.n	80162c6 <_sungetc_r+0x26>
 80162e2:	e7e1      	b.n	80162a8 <_sungetc_r+0x8>
 80162e4:	6921      	ldr	r1, [r4, #16]
 80162e6:	6823      	ldr	r3, [r4, #0]
 80162e8:	b151      	cbz	r1, 8016300 <_sungetc_r+0x60>
 80162ea:	4299      	cmp	r1, r3
 80162ec:	d208      	bcs.n	8016300 <_sungetc_r+0x60>
 80162ee:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80162f2:	42a9      	cmp	r1, r5
 80162f4:	d104      	bne.n	8016300 <_sungetc_r+0x60>
 80162f6:	3b01      	subs	r3, #1
 80162f8:	3201      	adds	r2, #1
 80162fa:	6023      	str	r3, [r4, #0]
 80162fc:	6062      	str	r2, [r4, #4]
 80162fe:	e7d5      	b.n	80162ac <_sungetc_r+0xc>
 8016300:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8016304:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016308:	6363      	str	r3, [r4, #52]	; 0x34
 801630a:	2303      	movs	r3, #3
 801630c:	63a3      	str	r3, [r4, #56]	; 0x38
 801630e:	4623      	mov	r3, r4
 8016310:	f803 5f46 	strb.w	r5, [r3, #70]!
 8016314:	6023      	str	r3, [r4, #0]
 8016316:	2301      	movs	r3, #1
 8016318:	e7dc      	b.n	80162d4 <_sungetc_r+0x34>

0801631a <__ssrefill_r>:
 801631a:	b510      	push	{r4, lr}
 801631c:	460c      	mov	r4, r1
 801631e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8016320:	b169      	cbz	r1, 801633e <__ssrefill_r+0x24>
 8016322:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016326:	4299      	cmp	r1, r3
 8016328:	d001      	beq.n	801632e <__ssrefill_r+0x14>
 801632a:	f7fc fa7d 	bl	8012828 <_free_r>
 801632e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016330:	6063      	str	r3, [r4, #4]
 8016332:	2000      	movs	r0, #0
 8016334:	6360      	str	r0, [r4, #52]	; 0x34
 8016336:	b113      	cbz	r3, 801633e <__ssrefill_r+0x24>
 8016338:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801633a:	6023      	str	r3, [r4, #0]
 801633c:	bd10      	pop	{r4, pc}
 801633e:	6923      	ldr	r3, [r4, #16]
 8016340:	6023      	str	r3, [r4, #0]
 8016342:	2300      	movs	r3, #0
 8016344:	6063      	str	r3, [r4, #4]
 8016346:	89a3      	ldrh	r3, [r4, #12]
 8016348:	f043 0320 	orr.w	r3, r3, #32
 801634c:	81a3      	strh	r3, [r4, #12]
 801634e:	f04f 30ff 	mov.w	r0, #4294967295
 8016352:	e7f3      	b.n	801633c <__ssrefill_r+0x22>

08016354 <__ssvfiscanf_r>:
 8016354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016358:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 801635c:	460c      	mov	r4, r1
 801635e:	2100      	movs	r1, #0
 8016360:	9144      	str	r1, [sp, #272]	; 0x110
 8016362:	9145      	str	r1, [sp, #276]	; 0x114
 8016364:	499f      	ldr	r1, [pc, #636]	; (80165e4 <__ssvfiscanf_r+0x290>)
 8016366:	91a0      	str	r1, [sp, #640]	; 0x280
 8016368:	f10d 0804 	add.w	r8, sp, #4
 801636c:	499e      	ldr	r1, [pc, #632]	; (80165e8 <__ssvfiscanf_r+0x294>)
 801636e:	f8df 927c 	ldr.w	r9, [pc, #636]	; 80165ec <__ssvfiscanf_r+0x298>
 8016372:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8016376:	4606      	mov	r6, r0
 8016378:	4692      	mov	sl, r2
 801637a:	91a1      	str	r1, [sp, #644]	; 0x284
 801637c:	9300      	str	r3, [sp, #0]
 801637e:	270a      	movs	r7, #10
 8016380:	f89a 3000 	ldrb.w	r3, [sl]
 8016384:	2b00      	cmp	r3, #0
 8016386:	f000 812a 	beq.w	80165de <__ssvfiscanf_r+0x28a>
 801638a:	4655      	mov	r5, sl
 801638c:	f7ff f9f6 	bl	801577c <__locale_ctype_ptr>
 8016390:	f815 bb01 	ldrb.w	fp, [r5], #1
 8016394:	4458      	add	r0, fp
 8016396:	7843      	ldrb	r3, [r0, #1]
 8016398:	f013 0308 	ands.w	r3, r3, #8
 801639c:	d01c      	beq.n	80163d8 <__ssvfiscanf_r+0x84>
 801639e:	6863      	ldr	r3, [r4, #4]
 80163a0:	2b00      	cmp	r3, #0
 80163a2:	dd12      	ble.n	80163ca <__ssvfiscanf_r+0x76>
 80163a4:	f7ff f9ea 	bl	801577c <__locale_ctype_ptr>
 80163a8:	6823      	ldr	r3, [r4, #0]
 80163aa:	781a      	ldrb	r2, [r3, #0]
 80163ac:	4410      	add	r0, r2
 80163ae:	7842      	ldrb	r2, [r0, #1]
 80163b0:	0712      	lsls	r2, r2, #28
 80163b2:	d401      	bmi.n	80163b8 <__ssvfiscanf_r+0x64>
 80163b4:	46aa      	mov	sl, r5
 80163b6:	e7e3      	b.n	8016380 <__ssvfiscanf_r+0x2c>
 80163b8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80163ba:	3201      	adds	r2, #1
 80163bc:	9245      	str	r2, [sp, #276]	; 0x114
 80163be:	6862      	ldr	r2, [r4, #4]
 80163c0:	3301      	adds	r3, #1
 80163c2:	3a01      	subs	r2, #1
 80163c4:	6062      	str	r2, [r4, #4]
 80163c6:	6023      	str	r3, [r4, #0]
 80163c8:	e7e9      	b.n	801639e <__ssvfiscanf_r+0x4a>
 80163ca:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80163cc:	4621      	mov	r1, r4
 80163ce:	4630      	mov	r0, r6
 80163d0:	4798      	blx	r3
 80163d2:	2800      	cmp	r0, #0
 80163d4:	d0e6      	beq.n	80163a4 <__ssvfiscanf_r+0x50>
 80163d6:	e7ed      	b.n	80163b4 <__ssvfiscanf_r+0x60>
 80163d8:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 80163dc:	f040 8082 	bne.w	80164e4 <__ssvfiscanf_r+0x190>
 80163e0:	9343      	str	r3, [sp, #268]	; 0x10c
 80163e2:	9341      	str	r3, [sp, #260]	; 0x104
 80163e4:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80163e8:	2b2a      	cmp	r3, #42	; 0x2a
 80163ea:	d103      	bne.n	80163f4 <__ssvfiscanf_r+0xa0>
 80163ec:	2310      	movs	r3, #16
 80163ee:	9341      	str	r3, [sp, #260]	; 0x104
 80163f0:	f10a 0502 	add.w	r5, sl, #2
 80163f4:	46aa      	mov	sl, r5
 80163f6:	f815 1b01 	ldrb.w	r1, [r5], #1
 80163fa:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80163fe:	2a09      	cmp	r2, #9
 8016400:	d922      	bls.n	8016448 <__ssvfiscanf_r+0xf4>
 8016402:	2203      	movs	r2, #3
 8016404:	4879      	ldr	r0, [pc, #484]	; (80165ec <__ssvfiscanf_r+0x298>)
 8016406:	f7e9 fefb 	bl	8000200 <memchr>
 801640a:	b138      	cbz	r0, 801641c <__ssvfiscanf_r+0xc8>
 801640c:	eba0 0309 	sub.w	r3, r0, r9
 8016410:	2001      	movs	r0, #1
 8016412:	4098      	lsls	r0, r3
 8016414:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016416:	4318      	orrs	r0, r3
 8016418:	9041      	str	r0, [sp, #260]	; 0x104
 801641a:	46aa      	mov	sl, r5
 801641c:	f89a 3000 	ldrb.w	r3, [sl]
 8016420:	2b67      	cmp	r3, #103	; 0x67
 8016422:	f10a 0501 	add.w	r5, sl, #1
 8016426:	d82b      	bhi.n	8016480 <__ssvfiscanf_r+0x12c>
 8016428:	2b65      	cmp	r3, #101	; 0x65
 801642a:	f080 809f 	bcs.w	801656c <__ssvfiscanf_r+0x218>
 801642e:	2b47      	cmp	r3, #71	; 0x47
 8016430:	d810      	bhi.n	8016454 <__ssvfiscanf_r+0x100>
 8016432:	2b45      	cmp	r3, #69	; 0x45
 8016434:	f080 809a 	bcs.w	801656c <__ssvfiscanf_r+0x218>
 8016438:	2b00      	cmp	r3, #0
 801643a:	d06c      	beq.n	8016516 <__ssvfiscanf_r+0x1c2>
 801643c:	2b25      	cmp	r3, #37	; 0x25
 801643e:	d051      	beq.n	80164e4 <__ssvfiscanf_r+0x190>
 8016440:	2303      	movs	r3, #3
 8016442:	9347      	str	r3, [sp, #284]	; 0x11c
 8016444:	9742      	str	r7, [sp, #264]	; 0x108
 8016446:	e027      	b.n	8016498 <__ssvfiscanf_r+0x144>
 8016448:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801644a:	fb07 1303 	mla	r3, r7, r3, r1
 801644e:	3b30      	subs	r3, #48	; 0x30
 8016450:	9343      	str	r3, [sp, #268]	; 0x10c
 8016452:	e7cf      	b.n	80163f4 <__ssvfiscanf_r+0xa0>
 8016454:	2b5b      	cmp	r3, #91	; 0x5b
 8016456:	d06a      	beq.n	801652e <__ssvfiscanf_r+0x1da>
 8016458:	d80c      	bhi.n	8016474 <__ssvfiscanf_r+0x120>
 801645a:	2b58      	cmp	r3, #88	; 0x58
 801645c:	d1f0      	bne.n	8016440 <__ssvfiscanf_r+0xec>
 801645e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8016460:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016464:	9241      	str	r2, [sp, #260]	; 0x104
 8016466:	2210      	movs	r2, #16
 8016468:	9242      	str	r2, [sp, #264]	; 0x108
 801646a:	2b6e      	cmp	r3, #110	; 0x6e
 801646c:	bf8c      	ite	hi
 801646e:	2304      	movhi	r3, #4
 8016470:	2303      	movls	r3, #3
 8016472:	e010      	b.n	8016496 <__ssvfiscanf_r+0x142>
 8016474:	2b63      	cmp	r3, #99	; 0x63
 8016476:	d065      	beq.n	8016544 <__ssvfiscanf_r+0x1f0>
 8016478:	2b64      	cmp	r3, #100	; 0x64
 801647a:	d1e1      	bne.n	8016440 <__ssvfiscanf_r+0xec>
 801647c:	9742      	str	r7, [sp, #264]	; 0x108
 801647e:	e7f4      	b.n	801646a <__ssvfiscanf_r+0x116>
 8016480:	2b70      	cmp	r3, #112	; 0x70
 8016482:	d04b      	beq.n	801651c <__ssvfiscanf_r+0x1c8>
 8016484:	d826      	bhi.n	80164d4 <__ssvfiscanf_r+0x180>
 8016486:	2b6e      	cmp	r3, #110	; 0x6e
 8016488:	d062      	beq.n	8016550 <__ssvfiscanf_r+0x1fc>
 801648a:	d84c      	bhi.n	8016526 <__ssvfiscanf_r+0x1d2>
 801648c:	2b69      	cmp	r3, #105	; 0x69
 801648e:	d1d7      	bne.n	8016440 <__ssvfiscanf_r+0xec>
 8016490:	2300      	movs	r3, #0
 8016492:	9342      	str	r3, [sp, #264]	; 0x108
 8016494:	2303      	movs	r3, #3
 8016496:	9347      	str	r3, [sp, #284]	; 0x11c
 8016498:	6863      	ldr	r3, [r4, #4]
 801649a:	2b00      	cmp	r3, #0
 801649c:	dd68      	ble.n	8016570 <__ssvfiscanf_r+0x21c>
 801649e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80164a0:	0659      	lsls	r1, r3, #25
 80164a2:	d407      	bmi.n	80164b4 <__ssvfiscanf_r+0x160>
 80164a4:	f7ff f96a 	bl	801577c <__locale_ctype_ptr>
 80164a8:	6823      	ldr	r3, [r4, #0]
 80164aa:	781a      	ldrb	r2, [r3, #0]
 80164ac:	4410      	add	r0, r2
 80164ae:	7842      	ldrb	r2, [r0, #1]
 80164b0:	0712      	lsls	r2, r2, #28
 80164b2:	d464      	bmi.n	801657e <__ssvfiscanf_r+0x22a>
 80164b4:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80164b6:	2b02      	cmp	r3, #2
 80164b8:	dc73      	bgt.n	80165a2 <__ssvfiscanf_r+0x24e>
 80164ba:	466b      	mov	r3, sp
 80164bc:	4622      	mov	r2, r4
 80164be:	a941      	add	r1, sp, #260	; 0x104
 80164c0:	4630      	mov	r0, r6
 80164c2:	f000 f897 	bl	80165f4 <_scanf_chars>
 80164c6:	2801      	cmp	r0, #1
 80164c8:	f000 8089 	beq.w	80165de <__ssvfiscanf_r+0x28a>
 80164cc:	2802      	cmp	r0, #2
 80164ce:	f47f af71 	bne.w	80163b4 <__ssvfiscanf_r+0x60>
 80164d2:	e01d      	b.n	8016510 <__ssvfiscanf_r+0x1bc>
 80164d4:	2b75      	cmp	r3, #117	; 0x75
 80164d6:	d0d1      	beq.n	801647c <__ssvfiscanf_r+0x128>
 80164d8:	2b78      	cmp	r3, #120	; 0x78
 80164da:	d0c0      	beq.n	801645e <__ssvfiscanf_r+0x10a>
 80164dc:	2b73      	cmp	r3, #115	; 0x73
 80164de:	d1af      	bne.n	8016440 <__ssvfiscanf_r+0xec>
 80164e0:	2302      	movs	r3, #2
 80164e2:	e7d8      	b.n	8016496 <__ssvfiscanf_r+0x142>
 80164e4:	6863      	ldr	r3, [r4, #4]
 80164e6:	2b00      	cmp	r3, #0
 80164e8:	dd0c      	ble.n	8016504 <__ssvfiscanf_r+0x1b0>
 80164ea:	6823      	ldr	r3, [r4, #0]
 80164ec:	781a      	ldrb	r2, [r3, #0]
 80164ee:	455a      	cmp	r2, fp
 80164f0:	d175      	bne.n	80165de <__ssvfiscanf_r+0x28a>
 80164f2:	3301      	adds	r3, #1
 80164f4:	6862      	ldr	r2, [r4, #4]
 80164f6:	6023      	str	r3, [r4, #0]
 80164f8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80164fa:	3a01      	subs	r2, #1
 80164fc:	3301      	adds	r3, #1
 80164fe:	6062      	str	r2, [r4, #4]
 8016500:	9345      	str	r3, [sp, #276]	; 0x114
 8016502:	e757      	b.n	80163b4 <__ssvfiscanf_r+0x60>
 8016504:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016506:	4621      	mov	r1, r4
 8016508:	4630      	mov	r0, r6
 801650a:	4798      	blx	r3
 801650c:	2800      	cmp	r0, #0
 801650e:	d0ec      	beq.n	80164ea <__ssvfiscanf_r+0x196>
 8016510:	9844      	ldr	r0, [sp, #272]	; 0x110
 8016512:	2800      	cmp	r0, #0
 8016514:	d159      	bne.n	80165ca <__ssvfiscanf_r+0x276>
 8016516:	f04f 30ff 	mov.w	r0, #4294967295
 801651a:	e05c      	b.n	80165d6 <__ssvfiscanf_r+0x282>
 801651c:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801651e:	f042 0220 	orr.w	r2, r2, #32
 8016522:	9241      	str	r2, [sp, #260]	; 0x104
 8016524:	e79b      	b.n	801645e <__ssvfiscanf_r+0x10a>
 8016526:	2308      	movs	r3, #8
 8016528:	9342      	str	r3, [sp, #264]	; 0x108
 801652a:	2304      	movs	r3, #4
 801652c:	e7b3      	b.n	8016496 <__ssvfiscanf_r+0x142>
 801652e:	4629      	mov	r1, r5
 8016530:	4640      	mov	r0, r8
 8016532:	f000 f9b7 	bl	80168a4 <__sccl>
 8016536:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016538:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801653c:	9341      	str	r3, [sp, #260]	; 0x104
 801653e:	4605      	mov	r5, r0
 8016540:	2301      	movs	r3, #1
 8016542:	e7a8      	b.n	8016496 <__ssvfiscanf_r+0x142>
 8016544:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016546:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801654a:	9341      	str	r3, [sp, #260]	; 0x104
 801654c:	2300      	movs	r3, #0
 801654e:	e7a2      	b.n	8016496 <__ssvfiscanf_r+0x142>
 8016550:	9841      	ldr	r0, [sp, #260]	; 0x104
 8016552:	06c3      	lsls	r3, r0, #27
 8016554:	f53f af2e 	bmi.w	80163b4 <__ssvfiscanf_r+0x60>
 8016558:	9b00      	ldr	r3, [sp, #0]
 801655a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801655c:	1d19      	adds	r1, r3, #4
 801655e:	9100      	str	r1, [sp, #0]
 8016560:	681b      	ldr	r3, [r3, #0]
 8016562:	07c0      	lsls	r0, r0, #31
 8016564:	bf4c      	ite	mi
 8016566:	801a      	strhmi	r2, [r3, #0]
 8016568:	601a      	strpl	r2, [r3, #0]
 801656a:	e723      	b.n	80163b4 <__ssvfiscanf_r+0x60>
 801656c:	2305      	movs	r3, #5
 801656e:	e792      	b.n	8016496 <__ssvfiscanf_r+0x142>
 8016570:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016572:	4621      	mov	r1, r4
 8016574:	4630      	mov	r0, r6
 8016576:	4798      	blx	r3
 8016578:	2800      	cmp	r0, #0
 801657a:	d090      	beq.n	801649e <__ssvfiscanf_r+0x14a>
 801657c:	e7c8      	b.n	8016510 <__ssvfiscanf_r+0x1bc>
 801657e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8016580:	3201      	adds	r2, #1
 8016582:	9245      	str	r2, [sp, #276]	; 0x114
 8016584:	6862      	ldr	r2, [r4, #4]
 8016586:	3a01      	subs	r2, #1
 8016588:	2a00      	cmp	r2, #0
 801658a:	6062      	str	r2, [r4, #4]
 801658c:	dd02      	ble.n	8016594 <__ssvfiscanf_r+0x240>
 801658e:	3301      	adds	r3, #1
 8016590:	6023      	str	r3, [r4, #0]
 8016592:	e787      	b.n	80164a4 <__ssvfiscanf_r+0x150>
 8016594:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016596:	4621      	mov	r1, r4
 8016598:	4630      	mov	r0, r6
 801659a:	4798      	blx	r3
 801659c:	2800      	cmp	r0, #0
 801659e:	d081      	beq.n	80164a4 <__ssvfiscanf_r+0x150>
 80165a0:	e7b6      	b.n	8016510 <__ssvfiscanf_r+0x1bc>
 80165a2:	2b04      	cmp	r3, #4
 80165a4:	dc06      	bgt.n	80165b4 <__ssvfiscanf_r+0x260>
 80165a6:	466b      	mov	r3, sp
 80165a8:	4622      	mov	r2, r4
 80165aa:	a941      	add	r1, sp, #260	; 0x104
 80165ac:	4630      	mov	r0, r6
 80165ae:	f000 f885 	bl	80166bc <_scanf_i>
 80165b2:	e788      	b.n	80164c6 <__ssvfiscanf_r+0x172>
 80165b4:	4b0e      	ldr	r3, [pc, #56]	; (80165f0 <__ssvfiscanf_r+0x29c>)
 80165b6:	2b00      	cmp	r3, #0
 80165b8:	f43f aefc 	beq.w	80163b4 <__ssvfiscanf_r+0x60>
 80165bc:	466b      	mov	r3, sp
 80165be:	4622      	mov	r2, r4
 80165c0:	a941      	add	r1, sp, #260	; 0x104
 80165c2:	4630      	mov	r0, r6
 80165c4:	f7fc fe34 	bl	8013230 <_scanf_float>
 80165c8:	e77d      	b.n	80164c6 <__ssvfiscanf_r+0x172>
 80165ca:	89a3      	ldrh	r3, [r4, #12]
 80165cc:	f013 0f40 	tst.w	r3, #64	; 0x40
 80165d0:	bf18      	it	ne
 80165d2:	f04f 30ff 	movne.w	r0, #4294967295
 80165d6:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80165da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80165de:	9844      	ldr	r0, [sp, #272]	; 0x110
 80165e0:	e7f9      	b.n	80165d6 <__ssvfiscanf_r+0x282>
 80165e2:	bf00      	nop
 80165e4:	080162a1 	.word	0x080162a1
 80165e8:	0801631b 	.word	0x0801631b
 80165ec:	08018b4a 	.word	0x08018b4a
 80165f0:	08013231 	.word	0x08013231

080165f4 <_scanf_chars>:
 80165f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80165f8:	4615      	mov	r5, r2
 80165fa:	688a      	ldr	r2, [r1, #8]
 80165fc:	4680      	mov	r8, r0
 80165fe:	460c      	mov	r4, r1
 8016600:	b932      	cbnz	r2, 8016610 <_scanf_chars+0x1c>
 8016602:	698a      	ldr	r2, [r1, #24]
 8016604:	2a00      	cmp	r2, #0
 8016606:	bf14      	ite	ne
 8016608:	f04f 32ff 	movne.w	r2, #4294967295
 801660c:	2201      	moveq	r2, #1
 801660e:	608a      	str	r2, [r1, #8]
 8016610:	6822      	ldr	r2, [r4, #0]
 8016612:	06d1      	lsls	r1, r2, #27
 8016614:	bf5f      	itttt	pl
 8016616:	681a      	ldrpl	r2, [r3, #0]
 8016618:	1d11      	addpl	r1, r2, #4
 801661a:	6019      	strpl	r1, [r3, #0]
 801661c:	6817      	ldrpl	r7, [r2, #0]
 801661e:	2600      	movs	r6, #0
 8016620:	69a3      	ldr	r3, [r4, #24]
 8016622:	b1db      	cbz	r3, 801665c <_scanf_chars+0x68>
 8016624:	2b01      	cmp	r3, #1
 8016626:	d107      	bne.n	8016638 <_scanf_chars+0x44>
 8016628:	682b      	ldr	r3, [r5, #0]
 801662a:	6962      	ldr	r2, [r4, #20]
 801662c:	781b      	ldrb	r3, [r3, #0]
 801662e:	5cd3      	ldrb	r3, [r2, r3]
 8016630:	b9a3      	cbnz	r3, 801665c <_scanf_chars+0x68>
 8016632:	2e00      	cmp	r6, #0
 8016634:	d132      	bne.n	801669c <_scanf_chars+0xa8>
 8016636:	e006      	b.n	8016646 <_scanf_chars+0x52>
 8016638:	2b02      	cmp	r3, #2
 801663a:	d007      	beq.n	801664c <_scanf_chars+0x58>
 801663c:	2e00      	cmp	r6, #0
 801663e:	d12d      	bne.n	801669c <_scanf_chars+0xa8>
 8016640:	69a3      	ldr	r3, [r4, #24]
 8016642:	2b01      	cmp	r3, #1
 8016644:	d12a      	bne.n	801669c <_scanf_chars+0xa8>
 8016646:	2001      	movs	r0, #1
 8016648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801664c:	f7ff f896 	bl	801577c <__locale_ctype_ptr>
 8016650:	682b      	ldr	r3, [r5, #0]
 8016652:	781b      	ldrb	r3, [r3, #0]
 8016654:	4418      	add	r0, r3
 8016656:	7843      	ldrb	r3, [r0, #1]
 8016658:	071b      	lsls	r3, r3, #28
 801665a:	d4ef      	bmi.n	801663c <_scanf_chars+0x48>
 801665c:	6823      	ldr	r3, [r4, #0]
 801665e:	06da      	lsls	r2, r3, #27
 8016660:	bf5e      	ittt	pl
 8016662:	682b      	ldrpl	r3, [r5, #0]
 8016664:	781b      	ldrbpl	r3, [r3, #0]
 8016666:	703b      	strbpl	r3, [r7, #0]
 8016668:	682a      	ldr	r2, [r5, #0]
 801666a:	686b      	ldr	r3, [r5, #4]
 801666c:	f102 0201 	add.w	r2, r2, #1
 8016670:	602a      	str	r2, [r5, #0]
 8016672:	68a2      	ldr	r2, [r4, #8]
 8016674:	f103 33ff 	add.w	r3, r3, #4294967295
 8016678:	f102 32ff 	add.w	r2, r2, #4294967295
 801667c:	606b      	str	r3, [r5, #4]
 801667e:	f106 0601 	add.w	r6, r6, #1
 8016682:	bf58      	it	pl
 8016684:	3701      	addpl	r7, #1
 8016686:	60a2      	str	r2, [r4, #8]
 8016688:	b142      	cbz	r2, 801669c <_scanf_chars+0xa8>
 801668a:	2b00      	cmp	r3, #0
 801668c:	dcc8      	bgt.n	8016620 <_scanf_chars+0x2c>
 801668e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016692:	4629      	mov	r1, r5
 8016694:	4640      	mov	r0, r8
 8016696:	4798      	blx	r3
 8016698:	2800      	cmp	r0, #0
 801669a:	d0c1      	beq.n	8016620 <_scanf_chars+0x2c>
 801669c:	6823      	ldr	r3, [r4, #0]
 801669e:	f013 0310 	ands.w	r3, r3, #16
 80166a2:	d105      	bne.n	80166b0 <_scanf_chars+0xbc>
 80166a4:	68e2      	ldr	r2, [r4, #12]
 80166a6:	3201      	adds	r2, #1
 80166a8:	60e2      	str	r2, [r4, #12]
 80166aa:	69a2      	ldr	r2, [r4, #24]
 80166ac:	b102      	cbz	r2, 80166b0 <_scanf_chars+0xbc>
 80166ae:	703b      	strb	r3, [r7, #0]
 80166b0:	6923      	ldr	r3, [r4, #16]
 80166b2:	441e      	add	r6, r3
 80166b4:	6126      	str	r6, [r4, #16]
 80166b6:	2000      	movs	r0, #0
 80166b8:	e7c6      	b.n	8016648 <_scanf_chars+0x54>
	...

080166bc <_scanf_i>:
 80166bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166c0:	469a      	mov	sl, r3
 80166c2:	4b74      	ldr	r3, [pc, #464]	; (8016894 <_scanf_i+0x1d8>)
 80166c4:	460c      	mov	r4, r1
 80166c6:	4683      	mov	fp, r0
 80166c8:	4616      	mov	r6, r2
 80166ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80166ce:	b087      	sub	sp, #28
 80166d0:	ab03      	add	r3, sp, #12
 80166d2:	68a7      	ldr	r7, [r4, #8]
 80166d4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80166d8:	4b6f      	ldr	r3, [pc, #444]	; (8016898 <_scanf_i+0x1dc>)
 80166da:	69a1      	ldr	r1, [r4, #24]
 80166dc:	4a6f      	ldr	r2, [pc, #444]	; (801689c <_scanf_i+0x1e0>)
 80166de:	2903      	cmp	r1, #3
 80166e0:	bf08      	it	eq
 80166e2:	461a      	moveq	r2, r3
 80166e4:	1e7b      	subs	r3, r7, #1
 80166e6:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 80166ea:	bf84      	itt	hi
 80166ec:	f240 135d 	movwhi	r3, #349	; 0x15d
 80166f0:	60a3      	strhi	r3, [r4, #8]
 80166f2:	6823      	ldr	r3, [r4, #0]
 80166f4:	9200      	str	r2, [sp, #0]
 80166f6:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80166fa:	bf88      	it	hi
 80166fc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8016700:	f104 091c 	add.w	r9, r4, #28
 8016704:	6023      	str	r3, [r4, #0]
 8016706:	bf8c      	ite	hi
 8016708:	197f      	addhi	r7, r7, r5
 801670a:	2700      	movls	r7, #0
 801670c:	464b      	mov	r3, r9
 801670e:	f04f 0800 	mov.w	r8, #0
 8016712:	9301      	str	r3, [sp, #4]
 8016714:	6831      	ldr	r1, [r6, #0]
 8016716:	ab03      	add	r3, sp, #12
 8016718:	2202      	movs	r2, #2
 801671a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801671e:	7809      	ldrb	r1, [r1, #0]
 8016720:	f7e9 fd6e 	bl	8000200 <memchr>
 8016724:	9b01      	ldr	r3, [sp, #4]
 8016726:	b330      	cbz	r0, 8016776 <_scanf_i+0xba>
 8016728:	f1b8 0f01 	cmp.w	r8, #1
 801672c:	d15a      	bne.n	80167e4 <_scanf_i+0x128>
 801672e:	6862      	ldr	r2, [r4, #4]
 8016730:	b92a      	cbnz	r2, 801673e <_scanf_i+0x82>
 8016732:	6822      	ldr	r2, [r4, #0]
 8016734:	2108      	movs	r1, #8
 8016736:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801673a:	6061      	str	r1, [r4, #4]
 801673c:	6022      	str	r2, [r4, #0]
 801673e:	6822      	ldr	r2, [r4, #0]
 8016740:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8016744:	6022      	str	r2, [r4, #0]
 8016746:	68a2      	ldr	r2, [r4, #8]
 8016748:	1e51      	subs	r1, r2, #1
 801674a:	60a1      	str	r1, [r4, #8]
 801674c:	b19a      	cbz	r2, 8016776 <_scanf_i+0xba>
 801674e:	6832      	ldr	r2, [r6, #0]
 8016750:	1c51      	adds	r1, r2, #1
 8016752:	6031      	str	r1, [r6, #0]
 8016754:	7812      	ldrb	r2, [r2, #0]
 8016756:	701a      	strb	r2, [r3, #0]
 8016758:	1c5d      	adds	r5, r3, #1
 801675a:	6873      	ldr	r3, [r6, #4]
 801675c:	3b01      	subs	r3, #1
 801675e:	2b00      	cmp	r3, #0
 8016760:	6073      	str	r3, [r6, #4]
 8016762:	dc07      	bgt.n	8016774 <_scanf_i+0xb8>
 8016764:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016768:	4631      	mov	r1, r6
 801676a:	4658      	mov	r0, fp
 801676c:	4798      	blx	r3
 801676e:	2800      	cmp	r0, #0
 8016770:	f040 8086 	bne.w	8016880 <_scanf_i+0x1c4>
 8016774:	462b      	mov	r3, r5
 8016776:	f108 0801 	add.w	r8, r8, #1
 801677a:	f1b8 0f03 	cmp.w	r8, #3
 801677e:	d1c8      	bne.n	8016712 <_scanf_i+0x56>
 8016780:	6862      	ldr	r2, [r4, #4]
 8016782:	b90a      	cbnz	r2, 8016788 <_scanf_i+0xcc>
 8016784:	220a      	movs	r2, #10
 8016786:	6062      	str	r2, [r4, #4]
 8016788:	6862      	ldr	r2, [r4, #4]
 801678a:	4945      	ldr	r1, [pc, #276]	; (80168a0 <_scanf_i+0x1e4>)
 801678c:	6960      	ldr	r0, [r4, #20]
 801678e:	9301      	str	r3, [sp, #4]
 8016790:	1a89      	subs	r1, r1, r2
 8016792:	f000 f887 	bl	80168a4 <__sccl>
 8016796:	9b01      	ldr	r3, [sp, #4]
 8016798:	f04f 0800 	mov.w	r8, #0
 801679c:	461d      	mov	r5, r3
 801679e:	68a3      	ldr	r3, [r4, #8]
 80167a0:	6822      	ldr	r2, [r4, #0]
 80167a2:	2b00      	cmp	r3, #0
 80167a4:	d03a      	beq.n	801681c <_scanf_i+0x160>
 80167a6:	6831      	ldr	r1, [r6, #0]
 80167a8:	6960      	ldr	r0, [r4, #20]
 80167aa:	f891 c000 	ldrb.w	ip, [r1]
 80167ae:	f810 000c 	ldrb.w	r0, [r0, ip]
 80167b2:	2800      	cmp	r0, #0
 80167b4:	d032      	beq.n	801681c <_scanf_i+0x160>
 80167b6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80167ba:	d121      	bne.n	8016800 <_scanf_i+0x144>
 80167bc:	0510      	lsls	r0, r2, #20
 80167be:	d51f      	bpl.n	8016800 <_scanf_i+0x144>
 80167c0:	f108 0801 	add.w	r8, r8, #1
 80167c4:	b117      	cbz	r7, 80167cc <_scanf_i+0x110>
 80167c6:	3301      	adds	r3, #1
 80167c8:	3f01      	subs	r7, #1
 80167ca:	60a3      	str	r3, [r4, #8]
 80167cc:	6873      	ldr	r3, [r6, #4]
 80167ce:	3b01      	subs	r3, #1
 80167d0:	2b00      	cmp	r3, #0
 80167d2:	6073      	str	r3, [r6, #4]
 80167d4:	dd1b      	ble.n	801680e <_scanf_i+0x152>
 80167d6:	6833      	ldr	r3, [r6, #0]
 80167d8:	3301      	adds	r3, #1
 80167da:	6033      	str	r3, [r6, #0]
 80167dc:	68a3      	ldr	r3, [r4, #8]
 80167de:	3b01      	subs	r3, #1
 80167e0:	60a3      	str	r3, [r4, #8]
 80167e2:	e7dc      	b.n	801679e <_scanf_i+0xe2>
 80167e4:	f1b8 0f02 	cmp.w	r8, #2
 80167e8:	d1ad      	bne.n	8016746 <_scanf_i+0x8a>
 80167ea:	6822      	ldr	r2, [r4, #0]
 80167ec:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80167f0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80167f4:	d1bf      	bne.n	8016776 <_scanf_i+0xba>
 80167f6:	2110      	movs	r1, #16
 80167f8:	6061      	str	r1, [r4, #4]
 80167fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80167fe:	e7a1      	b.n	8016744 <_scanf_i+0x88>
 8016800:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8016804:	6022      	str	r2, [r4, #0]
 8016806:	780b      	ldrb	r3, [r1, #0]
 8016808:	702b      	strb	r3, [r5, #0]
 801680a:	3501      	adds	r5, #1
 801680c:	e7de      	b.n	80167cc <_scanf_i+0x110>
 801680e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016812:	4631      	mov	r1, r6
 8016814:	4658      	mov	r0, fp
 8016816:	4798      	blx	r3
 8016818:	2800      	cmp	r0, #0
 801681a:	d0df      	beq.n	80167dc <_scanf_i+0x120>
 801681c:	6823      	ldr	r3, [r4, #0]
 801681e:	05d9      	lsls	r1, r3, #23
 8016820:	d50c      	bpl.n	801683c <_scanf_i+0x180>
 8016822:	454d      	cmp	r5, r9
 8016824:	d908      	bls.n	8016838 <_scanf_i+0x17c>
 8016826:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801682a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801682e:	4632      	mov	r2, r6
 8016830:	4658      	mov	r0, fp
 8016832:	4798      	blx	r3
 8016834:	1e6f      	subs	r7, r5, #1
 8016836:	463d      	mov	r5, r7
 8016838:	454d      	cmp	r5, r9
 801683a:	d029      	beq.n	8016890 <_scanf_i+0x1d4>
 801683c:	6822      	ldr	r2, [r4, #0]
 801683e:	f012 0210 	ands.w	r2, r2, #16
 8016842:	d113      	bne.n	801686c <_scanf_i+0x1b0>
 8016844:	702a      	strb	r2, [r5, #0]
 8016846:	6863      	ldr	r3, [r4, #4]
 8016848:	9e00      	ldr	r6, [sp, #0]
 801684a:	4649      	mov	r1, r9
 801684c:	4658      	mov	r0, fp
 801684e:	47b0      	blx	r6
 8016850:	f8da 3000 	ldr.w	r3, [sl]
 8016854:	6821      	ldr	r1, [r4, #0]
 8016856:	1d1a      	adds	r2, r3, #4
 8016858:	f8ca 2000 	str.w	r2, [sl]
 801685c:	f011 0f20 	tst.w	r1, #32
 8016860:	681b      	ldr	r3, [r3, #0]
 8016862:	d010      	beq.n	8016886 <_scanf_i+0x1ca>
 8016864:	6018      	str	r0, [r3, #0]
 8016866:	68e3      	ldr	r3, [r4, #12]
 8016868:	3301      	adds	r3, #1
 801686a:	60e3      	str	r3, [r4, #12]
 801686c:	eba5 0509 	sub.w	r5, r5, r9
 8016870:	44a8      	add	r8, r5
 8016872:	6925      	ldr	r5, [r4, #16]
 8016874:	4445      	add	r5, r8
 8016876:	6125      	str	r5, [r4, #16]
 8016878:	2000      	movs	r0, #0
 801687a:	b007      	add	sp, #28
 801687c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016880:	f04f 0800 	mov.w	r8, #0
 8016884:	e7ca      	b.n	801681c <_scanf_i+0x160>
 8016886:	07ca      	lsls	r2, r1, #31
 8016888:	bf4c      	ite	mi
 801688a:	8018      	strhmi	r0, [r3, #0]
 801688c:	6018      	strpl	r0, [r3, #0]
 801688e:	e7ea      	b.n	8016866 <_scanf_i+0x1aa>
 8016890:	2001      	movs	r0, #1
 8016892:	e7f2      	b.n	801687a <_scanf_i+0x1be>
 8016894:	08018978 	.word	0x08018978
 8016898:	08014479 	.word	0x08014479
 801689c:	08016a21 	.word	0x08016a21
 80168a0:	08018b65 	.word	0x08018b65

080168a4 <__sccl>:
 80168a4:	b570      	push	{r4, r5, r6, lr}
 80168a6:	780b      	ldrb	r3, [r1, #0]
 80168a8:	2b5e      	cmp	r3, #94	; 0x5e
 80168aa:	bf13      	iteet	ne
 80168ac:	1c4a      	addne	r2, r1, #1
 80168ae:	1c8a      	addeq	r2, r1, #2
 80168b0:	784b      	ldrbeq	r3, [r1, #1]
 80168b2:	2100      	movne	r1, #0
 80168b4:	bf08      	it	eq
 80168b6:	2101      	moveq	r1, #1
 80168b8:	1e44      	subs	r4, r0, #1
 80168ba:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 80168be:	f804 1f01 	strb.w	r1, [r4, #1]!
 80168c2:	42ac      	cmp	r4, r5
 80168c4:	d1fb      	bne.n	80168be <__sccl+0x1a>
 80168c6:	b913      	cbnz	r3, 80168ce <__sccl+0x2a>
 80168c8:	3a01      	subs	r2, #1
 80168ca:	4610      	mov	r0, r2
 80168cc:	bd70      	pop	{r4, r5, r6, pc}
 80168ce:	f081 0401 	eor.w	r4, r1, #1
 80168d2:	54c4      	strb	r4, [r0, r3]
 80168d4:	1c51      	adds	r1, r2, #1
 80168d6:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 80168da:	2d2d      	cmp	r5, #45	; 0x2d
 80168dc:	f101 36ff 	add.w	r6, r1, #4294967295
 80168e0:	460a      	mov	r2, r1
 80168e2:	d006      	beq.n	80168f2 <__sccl+0x4e>
 80168e4:	2d5d      	cmp	r5, #93	; 0x5d
 80168e6:	d0f0      	beq.n	80168ca <__sccl+0x26>
 80168e8:	b90d      	cbnz	r5, 80168ee <__sccl+0x4a>
 80168ea:	4632      	mov	r2, r6
 80168ec:	e7ed      	b.n	80168ca <__sccl+0x26>
 80168ee:	462b      	mov	r3, r5
 80168f0:	e7ef      	b.n	80168d2 <__sccl+0x2e>
 80168f2:	780e      	ldrb	r6, [r1, #0]
 80168f4:	2e5d      	cmp	r6, #93	; 0x5d
 80168f6:	d0fa      	beq.n	80168ee <__sccl+0x4a>
 80168f8:	42b3      	cmp	r3, r6
 80168fa:	dcf8      	bgt.n	80168ee <__sccl+0x4a>
 80168fc:	3301      	adds	r3, #1
 80168fe:	429e      	cmp	r6, r3
 8016900:	54c4      	strb	r4, [r0, r3]
 8016902:	dcfb      	bgt.n	80168fc <__sccl+0x58>
 8016904:	3102      	adds	r1, #2
 8016906:	e7e6      	b.n	80168d6 <__sccl+0x32>

08016908 <strncmp>:
 8016908:	b510      	push	{r4, lr}
 801690a:	b16a      	cbz	r2, 8016928 <strncmp+0x20>
 801690c:	3901      	subs	r1, #1
 801690e:	1884      	adds	r4, r0, r2
 8016910:	f810 3b01 	ldrb.w	r3, [r0], #1
 8016914:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8016918:	4293      	cmp	r3, r2
 801691a:	d103      	bne.n	8016924 <strncmp+0x1c>
 801691c:	42a0      	cmp	r0, r4
 801691e:	d001      	beq.n	8016924 <strncmp+0x1c>
 8016920:	2b00      	cmp	r3, #0
 8016922:	d1f5      	bne.n	8016910 <strncmp+0x8>
 8016924:	1a98      	subs	r0, r3, r2
 8016926:	bd10      	pop	{r4, pc}
 8016928:	4610      	mov	r0, r2
 801692a:	e7fc      	b.n	8016926 <strncmp+0x1e>

0801692c <_strtoul_l.isra.0>:
 801692c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016930:	4680      	mov	r8, r0
 8016932:	4689      	mov	r9, r1
 8016934:	4692      	mov	sl, r2
 8016936:	461e      	mov	r6, r3
 8016938:	460f      	mov	r7, r1
 801693a:	463d      	mov	r5, r7
 801693c:	9808      	ldr	r0, [sp, #32]
 801693e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016942:	f7fe ff17 	bl	8015774 <__locale_ctype_ptr_l>
 8016946:	4420      	add	r0, r4
 8016948:	7843      	ldrb	r3, [r0, #1]
 801694a:	f013 0308 	ands.w	r3, r3, #8
 801694e:	d130      	bne.n	80169b2 <_strtoul_l.isra.0+0x86>
 8016950:	2c2d      	cmp	r4, #45	; 0x2d
 8016952:	d130      	bne.n	80169b6 <_strtoul_l.isra.0+0x8a>
 8016954:	787c      	ldrb	r4, [r7, #1]
 8016956:	1cbd      	adds	r5, r7, #2
 8016958:	2101      	movs	r1, #1
 801695a:	2e00      	cmp	r6, #0
 801695c:	d05c      	beq.n	8016a18 <_strtoul_l.isra.0+0xec>
 801695e:	2e10      	cmp	r6, #16
 8016960:	d109      	bne.n	8016976 <_strtoul_l.isra.0+0x4a>
 8016962:	2c30      	cmp	r4, #48	; 0x30
 8016964:	d107      	bne.n	8016976 <_strtoul_l.isra.0+0x4a>
 8016966:	782b      	ldrb	r3, [r5, #0]
 8016968:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801696c:	2b58      	cmp	r3, #88	; 0x58
 801696e:	d14e      	bne.n	8016a0e <_strtoul_l.isra.0+0xe2>
 8016970:	786c      	ldrb	r4, [r5, #1]
 8016972:	2610      	movs	r6, #16
 8016974:	3502      	adds	r5, #2
 8016976:	f04f 32ff 	mov.w	r2, #4294967295
 801697a:	2300      	movs	r3, #0
 801697c:	fbb2 f2f6 	udiv	r2, r2, r6
 8016980:	fb06 fc02 	mul.w	ip, r6, r2
 8016984:	ea6f 0c0c 	mvn.w	ip, ip
 8016988:	4618      	mov	r0, r3
 801698a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801698e:	2f09      	cmp	r7, #9
 8016990:	d817      	bhi.n	80169c2 <_strtoul_l.isra.0+0x96>
 8016992:	463c      	mov	r4, r7
 8016994:	42a6      	cmp	r6, r4
 8016996:	dd23      	ble.n	80169e0 <_strtoul_l.isra.0+0xb4>
 8016998:	2b00      	cmp	r3, #0
 801699a:	db1e      	blt.n	80169da <_strtoul_l.isra.0+0xae>
 801699c:	4282      	cmp	r2, r0
 801699e:	d31c      	bcc.n	80169da <_strtoul_l.isra.0+0xae>
 80169a0:	d101      	bne.n	80169a6 <_strtoul_l.isra.0+0x7a>
 80169a2:	45a4      	cmp	ip, r4
 80169a4:	db19      	blt.n	80169da <_strtoul_l.isra.0+0xae>
 80169a6:	fb00 4006 	mla	r0, r0, r6, r4
 80169aa:	2301      	movs	r3, #1
 80169ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 80169b0:	e7eb      	b.n	801698a <_strtoul_l.isra.0+0x5e>
 80169b2:	462f      	mov	r7, r5
 80169b4:	e7c1      	b.n	801693a <_strtoul_l.isra.0+0xe>
 80169b6:	2c2b      	cmp	r4, #43	; 0x2b
 80169b8:	bf04      	itt	eq
 80169ba:	1cbd      	addeq	r5, r7, #2
 80169bc:	787c      	ldrbeq	r4, [r7, #1]
 80169be:	4619      	mov	r1, r3
 80169c0:	e7cb      	b.n	801695a <_strtoul_l.isra.0+0x2e>
 80169c2:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80169c6:	2f19      	cmp	r7, #25
 80169c8:	d801      	bhi.n	80169ce <_strtoul_l.isra.0+0xa2>
 80169ca:	3c37      	subs	r4, #55	; 0x37
 80169cc:	e7e2      	b.n	8016994 <_strtoul_l.isra.0+0x68>
 80169ce:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80169d2:	2f19      	cmp	r7, #25
 80169d4:	d804      	bhi.n	80169e0 <_strtoul_l.isra.0+0xb4>
 80169d6:	3c57      	subs	r4, #87	; 0x57
 80169d8:	e7dc      	b.n	8016994 <_strtoul_l.isra.0+0x68>
 80169da:	f04f 33ff 	mov.w	r3, #4294967295
 80169de:	e7e5      	b.n	80169ac <_strtoul_l.isra.0+0x80>
 80169e0:	2b00      	cmp	r3, #0
 80169e2:	da09      	bge.n	80169f8 <_strtoul_l.isra.0+0xcc>
 80169e4:	2322      	movs	r3, #34	; 0x22
 80169e6:	f8c8 3000 	str.w	r3, [r8]
 80169ea:	f04f 30ff 	mov.w	r0, #4294967295
 80169ee:	f1ba 0f00 	cmp.w	sl, #0
 80169f2:	d107      	bne.n	8016a04 <_strtoul_l.isra.0+0xd8>
 80169f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80169f8:	b101      	cbz	r1, 80169fc <_strtoul_l.isra.0+0xd0>
 80169fa:	4240      	negs	r0, r0
 80169fc:	f1ba 0f00 	cmp.w	sl, #0
 8016a00:	d0f8      	beq.n	80169f4 <_strtoul_l.isra.0+0xc8>
 8016a02:	b10b      	cbz	r3, 8016a08 <_strtoul_l.isra.0+0xdc>
 8016a04:	f105 39ff 	add.w	r9, r5, #4294967295
 8016a08:	f8ca 9000 	str.w	r9, [sl]
 8016a0c:	e7f2      	b.n	80169f4 <_strtoul_l.isra.0+0xc8>
 8016a0e:	2430      	movs	r4, #48	; 0x30
 8016a10:	2e00      	cmp	r6, #0
 8016a12:	d1b0      	bne.n	8016976 <_strtoul_l.isra.0+0x4a>
 8016a14:	2608      	movs	r6, #8
 8016a16:	e7ae      	b.n	8016976 <_strtoul_l.isra.0+0x4a>
 8016a18:	2c30      	cmp	r4, #48	; 0x30
 8016a1a:	d0a4      	beq.n	8016966 <_strtoul_l.isra.0+0x3a>
 8016a1c:	260a      	movs	r6, #10
 8016a1e:	e7aa      	b.n	8016976 <_strtoul_l.isra.0+0x4a>

08016a20 <_strtoul_r>:
 8016a20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016a22:	4c06      	ldr	r4, [pc, #24]	; (8016a3c <_strtoul_r+0x1c>)
 8016a24:	4d06      	ldr	r5, [pc, #24]	; (8016a40 <_strtoul_r+0x20>)
 8016a26:	6824      	ldr	r4, [r4, #0]
 8016a28:	6a24      	ldr	r4, [r4, #32]
 8016a2a:	2c00      	cmp	r4, #0
 8016a2c:	bf08      	it	eq
 8016a2e:	462c      	moveq	r4, r5
 8016a30:	9400      	str	r4, [sp, #0]
 8016a32:	f7ff ff7b 	bl	801692c <_strtoul_l.isra.0>
 8016a36:	b003      	add	sp, #12
 8016a38:	bd30      	pop	{r4, r5, pc}
 8016a3a:	bf00      	nop
 8016a3c:	20000e34 	.word	0x20000e34
 8016a40:	20000e98 	.word	0x20000e98

08016a44 <__submore>:
 8016a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a48:	460c      	mov	r4, r1
 8016a4a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8016a4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016a50:	4299      	cmp	r1, r3
 8016a52:	d11d      	bne.n	8016a90 <__submore+0x4c>
 8016a54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8016a58:	f7fb ff34 	bl	80128c4 <_malloc_r>
 8016a5c:	b918      	cbnz	r0, 8016a66 <__submore+0x22>
 8016a5e:	f04f 30ff 	mov.w	r0, #4294967295
 8016a62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016a6a:	63a3      	str	r3, [r4, #56]	; 0x38
 8016a6c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8016a70:	6360      	str	r0, [r4, #52]	; 0x34
 8016a72:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8016a76:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8016a7a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8016a7e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8016a82:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8016a86:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8016a8a:	6020      	str	r0, [r4, #0]
 8016a8c:	2000      	movs	r0, #0
 8016a8e:	e7e8      	b.n	8016a62 <__submore+0x1e>
 8016a90:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8016a92:	0077      	lsls	r7, r6, #1
 8016a94:	463a      	mov	r2, r7
 8016a96:	f000 f81c 	bl	8016ad2 <_realloc_r>
 8016a9a:	4605      	mov	r5, r0
 8016a9c:	2800      	cmp	r0, #0
 8016a9e:	d0de      	beq.n	8016a5e <__submore+0x1a>
 8016aa0:	eb00 0806 	add.w	r8, r0, r6
 8016aa4:	4601      	mov	r1, r0
 8016aa6:	4632      	mov	r2, r6
 8016aa8:	4640      	mov	r0, r8
 8016aaa:	f7fb fe91 	bl	80127d0 <memcpy>
 8016aae:	f8c4 8000 	str.w	r8, [r4]
 8016ab2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8016ab6:	e7e9      	b.n	8016a8c <__submore+0x48>

08016ab8 <__ascii_wctomb>:
 8016ab8:	b149      	cbz	r1, 8016ace <__ascii_wctomb+0x16>
 8016aba:	2aff      	cmp	r2, #255	; 0xff
 8016abc:	bf85      	ittet	hi
 8016abe:	238a      	movhi	r3, #138	; 0x8a
 8016ac0:	6003      	strhi	r3, [r0, #0]
 8016ac2:	700a      	strbls	r2, [r1, #0]
 8016ac4:	f04f 30ff 	movhi.w	r0, #4294967295
 8016ac8:	bf98      	it	ls
 8016aca:	2001      	movls	r0, #1
 8016acc:	4770      	bx	lr
 8016ace:	4608      	mov	r0, r1
 8016ad0:	4770      	bx	lr

08016ad2 <_realloc_r>:
 8016ad2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016ad4:	4607      	mov	r7, r0
 8016ad6:	4614      	mov	r4, r2
 8016ad8:	460e      	mov	r6, r1
 8016ada:	b921      	cbnz	r1, 8016ae6 <_realloc_r+0x14>
 8016adc:	4611      	mov	r1, r2
 8016ade:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8016ae2:	f7fb beef 	b.w	80128c4 <_malloc_r>
 8016ae6:	b922      	cbnz	r2, 8016af2 <_realloc_r+0x20>
 8016ae8:	f7fb fe9e 	bl	8012828 <_free_r>
 8016aec:	4625      	mov	r5, r4
 8016aee:	4628      	mov	r0, r5
 8016af0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016af2:	f000 f814 	bl	8016b1e <_malloc_usable_size_r>
 8016af6:	42a0      	cmp	r0, r4
 8016af8:	d20f      	bcs.n	8016b1a <_realloc_r+0x48>
 8016afa:	4621      	mov	r1, r4
 8016afc:	4638      	mov	r0, r7
 8016afe:	f7fb fee1 	bl	80128c4 <_malloc_r>
 8016b02:	4605      	mov	r5, r0
 8016b04:	2800      	cmp	r0, #0
 8016b06:	d0f2      	beq.n	8016aee <_realloc_r+0x1c>
 8016b08:	4631      	mov	r1, r6
 8016b0a:	4622      	mov	r2, r4
 8016b0c:	f7fb fe60 	bl	80127d0 <memcpy>
 8016b10:	4631      	mov	r1, r6
 8016b12:	4638      	mov	r0, r7
 8016b14:	f7fb fe88 	bl	8012828 <_free_r>
 8016b18:	e7e9      	b.n	8016aee <_realloc_r+0x1c>
 8016b1a:	4635      	mov	r5, r6
 8016b1c:	e7e7      	b.n	8016aee <_realloc_r+0x1c>

08016b1e <_malloc_usable_size_r>:
 8016b1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016b22:	1f18      	subs	r0, r3, #4
 8016b24:	2b00      	cmp	r3, #0
 8016b26:	bfbc      	itt	lt
 8016b28:	580b      	ldrlt	r3, [r1, r0]
 8016b2a:	18c0      	addlt	r0, r0, r3
 8016b2c:	4770      	bx	lr
	...

08016b30 <ceil>:
 8016b30:	ec51 0b10 	vmov	r0, r1, d0
 8016b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b38:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8016b3c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8016b40:	2e13      	cmp	r6, #19
 8016b42:	460c      	mov	r4, r1
 8016b44:	ee10 5a10 	vmov	r5, s0
 8016b48:	4680      	mov	r8, r0
 8016b4a:	dc30      	bgt.n	8016bae <ceil+0x7e>
 8016b4c:	2e00      	cmp	r6, #0
 8016b4e:	da12      	bge.n	8016b76 <ceil+0x46>
 8016b50:	a333      	add	r3, pc, #204	; (adr r3, 8016c20 <ceil+0xf0>)
 8016b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b56:	f7e9 fba9 	bl	80002ac <__adddf3>
 8016b5a:	2200      	movs	r2, #0
 8016b5c:	2300      	movs	r3, #0
 8016b5e:	f7e9 ffeb 	bl	8000b38 <__aeabi_dcmpgt>
 8016b62:	b128      	cbz	r0, 8016b70 <ceil+0x40>
 8016b64:	2c00      	cmp	r4, #0
 8016b66:	db55      	blt.n	8016c14 <ceil+0xe4>
 8016b68:	432c      	orrs	r4, r5
 8016b6a:	d057      	beq.n	8016c1c <ceil+0xec>
 8016b6c:	4c2e      	ldr	r4, [pc, #184]	; (8016c28 <ceil+0xf8>)
 8016b6e:	2500      	movs	r5, #0
 8016b70:	4621      	mov	r1, r4
 8016b72:	4628      	mov	r0, r5
 8016b74:	e025      	b.n	8016bc2 <ceil+0x92>
 8016b76:	4f2d      	ldr	r7, [pc, #180]	; (8016c2c <ceil+0xfc>)
 8016b78:	4137      	asrs	r7, r6
 8016b7a:	ea01 0307 	and.w	r3, r1, r7
 8016b7e:	4303      	orrs	r3, r0
 8016b80:	d01f      	beq.n	8016bc2 <ceil+0x92>
 8016b82:	a327      	add	r3, pc, #156	; (adr r3, 8016c20 <ceil+0xf0>)
 8016b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b88:	f7e9 fb90 	bl	80002ac <__adddf3>
 8016b8c:	2200      	movs	r2, #0
 8016b8e:	2300      	movs	r3, #0
 8016b90:	f7e9 ffd2 	bl	8000b38 <__aeabi_dcmpgt>
 8016b94:	2800      	cmp	r0, #0
 8016b96:	d0eb      	beq.n	8016b70 <ceil+0x40>
 8016b98:	2c00      	cmp	r4, #0
 8016b9a:	bfc2      	ittt	gt
 8016b9c:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8016ba0:	fa43 f606 	asrgt.w	r6, r3, r6
 8016ba4:	19a4      	addgt	r4, r4, r6
 8016ba6:	ea24 0407 	bic.w	r4, r4, r7
 8016baa:	2500      	movs	r5, #0
 8016bac:	e7e0      	b.n	8016b70 <ceil+0x40>
 8016bae:	2e33      	cmp	r6, #51	; 0x33
 8016bb0:	dd0b      	ble.n	8016bca <ceil+0x9a>
 8016bb2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8016bb6:	d104      	bne.n	8016bc2 <ceil+0x92>
 8016bb8:	ee10 2a10 	vmov	r2, s0
 8016bbc:	460b      	mov	r3, r1
 8016bbe:	f7e9 fb75 	bl	80002ac <__adddf3>
 8016bc2:	ec41 0b10 	vmov	d0, r0, r1
 8016bc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016bca:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8016bce:	f04f 33ff 	mov.w	r3, #4294967295
 8016bd2:	fa23 f707 	lsr.w	r7, r3, r7
 8016bd6:	4207      	tst	r7, r0
 8016bd8:	d0f3      	beq.n	8016bc2 <ceil+0x92>
 8016bda:	a311      	add	r3, pc, #68	; (adr r3, 8016c20 <ceil+0xf0>)
 8016bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016be0:	f7e9 fb64 	bl	80002ac <__adddf3>
 8016be4:	2200      	movs	r2, #0
 8016be6:	2300      	movs	r3, #0
 8016be8:	f7e9 ffa6 	bl	8000b38 <__aeabi_dcmpgt>
 8016bec:	2800      	cmp	r0, #0
 8016bee:	d0bf      	beq.n	8016b70 <ceil+0x40>
 8016bf0:	2c00      	cmp	r4, #0
 8016bf2:	dd02      	ble.n	8016bfa <ceil+0xca>
 8016bf4:	2e14      	cmp	r6, #20
 8016bf6:	d103      	bne.n	8016c00 <ceil+0xd0>
 8016bf8:	3401      	adds	r4, #1
 8016bfa:	ea25 0507 	bic.w	r5, r5, r7
 8016bfe:	e7b7      	b.n	8016b70 <ceil+0x40>
 8016c00:	2301      	movs	r3, #1
 8016c02:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8016c06:	fa03 f606 	lsl.w	r6, r3, r6
 8016c0a:	4435      	add	r5, r6
 8016c0c:	4545      	cmp	r5, r8
 8016c0e:	bf38      	it	cc
 8016c10:	18e4      	addcc	r4, r4, r3
 8016c12:	e7f2      	b.n	8016bfa <ceil+0xca>
 8016c14:	2500      	movs	r5, #0
 8016c16:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8016c1a:	e7a9      	b.n	8016b70 <ceil+0x40>
 8016c1c:	4625      	mov	r5, r4
 8016c1e:	e7a7      	b.n	8016b70 <ceil+0x40>
 8016c20:	8800759c 	.word	0x8800759c
 8016c24:	7e37e43c 	.word	0x7e37e43c
 8016c28:	3ff00000 	.word	0x3ff00000
 8016c2c:	000fffff 	.word	0x000fffff

08016c30 <cos>:
 8016c30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016c32:	ec51 0b10 	vmov	r0, r1, d0
 8016c36:	4a1e      	ldr	r2, [pc, #120]	; (8016cb0 <cos+0x80>)
 8016c38:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8016c3c:	4293      	cmp	r3, r2
 8016c3e:	dc06      	bgt.n	8016c4e <cos+0x1e>
 8016c40:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8016ca8 <cos+0x78>
 8016c44:	f000 fca0 	bl	8017588 <__kernel_cos>
 8016c48:	ec51 0b10 	vmov	r0, r1, d0
 8016c4c:	e007      	b.n	8016c5e <cos+0x2e>
 8016c4e:	4a19      	ldr	r2, [pc, #100]	; (8016cb4 <cos+0x84>)
 8016c50:	4293      	cmp	r3, r2
 8016c52:	dd09      	ble.n	8016c68 <cos+0x38>
 8016c54:	ee10 2a10 	vmov	r2, s0
 8016c58:	460b      	mov	r3, r1
 8016c5a:	f7e9 fb25 	bl	80002a8 <__aeabi_dsub>
 8016c5e:	ec41 0b10 	vmov	d0, r0, r1
 8016c62:	b005      	add	sp, #20
 8016c64:	f85d fb04 	ldr.w	pc, [sp], #4
 8016c68:	4668      	mov	r0, sp
 8016c6a:	f000 f9e9 	bl	8017040 <__ieee754_rem_pio2>
 8016c6e:	f000 0003 	and.w	r0, r0, #3
 8016c72:	2801      	cmp	r0, #1
 8016c74:	ed9d 1b02 	vldr	d1, [sp, #8]
 8016c78:	ed9d 0b00 	vldr	d0, [sp]
 8016c7c:	d007      	beq.n	8016c8e <cos+0x5e>
 8016c7e:	2802      	cmp	r0, #2
 8016c80:	d00e      	beq.n	8016ca0 <cos+0x70>
 8016c82:	2800      	cmp	r0, #0
 8016c84:	d0de      	beq.n	8016c44 <cos+0x14>
 8016c86:	2001      	movs	r0, #1
 8016c88:	f001 f886 	bl	8017d98 <__kernel_sin>
 8016c8c:	e7dc      	b.n	8016c48 <cos+0x18>
 8016c8e:	f001 f883 	bl	8017d98 <__kernel_sin>
 8016c92:	ec53 2b10 	vmov	r2, r3, d0
 8016c96:	ee10 0a10 	vmov	r0, s0
 8016c9a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8016c9e:	e7de      	b.n	8016c5e <cos+0x2e>
 8016ca0:	f000 fc72 	bl	8017588 <__kernel_cos>
 8016ca4:	e7f5      	b.n	8016c92 <cos+0x62>
 8016ca6:	bf00      	nop
	...
 8016cb0:	3fe921fb 	.word	0x3fe921fb
 8016cb4:	7fefffff 	.word	0x7fefffff

08016cb8 <sin>:
 8016cb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016cba:	ec51 0b10 	vmov	r0, r1, d0
 8016cbe:	4a20      	ldr	r2, [pc, #128]	; (8016d40 <sin+0x88>)
 8016cc0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8016cc4:	4293      	cmp	r3, r2
 8016cc6:	dc07      	bgt.n	8016cd8 <sin+0x20>
 8016cc8:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8016d38 <sin+0x80>
 8016ccc:	2000      	movs	r0, #0
 8016cce:	f001 f863 	bl	8017d98 <__kernel_sin>
 8016cd2:	ec51 0b10 	vmov	r0, r1, d0
 8016cd6:	e007      	b.n	8016ce8 <sin+0x30>
 8016cd8:	4a1a      	ldr	r2, [pc, #104]	; (8016d44 <sin+0x8c>)
 8016cda:	4293      	cmp	r3, r2
 8016cdc:	dd09      	ble.n	8016cf2 <sin+0x3a>
 8016cde:	ee10 2a10 	vmov	r2, s0
 8016ce2:	460b      	mov	r3, r1
 8016ce4:	f7e9 fae0 	bl	80002a8 <__aeabi_dsub>
 8016ce8:	ec41 0b10 	vmov	d0, r0, r1
 8016cec:	b005      	add	sp, #20
 8016cee:	f85d fb04 	ldr.w	pc, [sp], #4
 8016cf2:	4668      	mov	r0, sp
 8016cf4:	f000 f9a4 	bl	8017040 <__ieee754_rem_pio2>
 8016cf8:	f000 0003 	and.w	r0, r0, #3
 8016cfc:	2801      	cmp	r0, #1
 8016cfe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8016d02:	ed9d 0b00 	vldr	d0, [sp]
 8016d06:	d004      	beq.n	8016d12 <sin+0x5a>
 8016d08:	2802      	cmp	r0, #2
 8016d0a:	d005      	beq.n	8016d18 <sin+0x60>
 8016d0c:	b970      	cbnz	r0, 8016d2c <sin+0x74>
 8016d0e:	2001      	movs	r0, #1
 8016d10:	e7dd      	b.n	8016cce <sin+0x16>
 8016d12:	f000 fc39 	bl	8017588 <__kernel_cos>
 8016d16:	e7dc      	b.n	8016cd2 <sin+0x1a>
 8016d18:	2001      	movs	r0, #1
 8016d1a:	f001 f83d 	bl	8017d98 <__kernel_sin>
 8016d1e:	ec53 2b10 	vmov	r2, r3, d0
 8016d22:	ee10 0a10 	vmov	r0, s0
 8016d26:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8016d2a:	e7dd      	b.n	8016ce8 <sin+0x30>
 8016d2c:	f000 fc2c 	bl	8017588 <__kernel_cos>
 8016d30:	e7f5      	b.n	8016d1e <sin+0x66>
 8016d32:	bf00      	nop
 8016d34:	f3af 8000 	nop.w
	...
 8016d40:	3fe921fb 	.word	0x3fe921fb
 8016d44:	7fefffff 	.word	0x7fefffff

08016d48 <ceilf>:
 8016d48:	ee10 3a10 	vmov	r3, s0
 8016d4c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8016d50:	0dca      	lsrs	r2, r1, #23
 8016d52:	3a7f      	subs	r2, #127	; 0x7f
 8016d54:	2a16      	cmp	r2, #22
 8016d56:	dc2a      	bgt.n	8016dae <ceilf+0x66>
 8016d58:	2a00      	cmp	r2, #0
 8016d5a:	da11      	bge.n	8016d80 <ceilf+0x38>
 8016d5c:	eddf 7a18 	vldr	s15, [pc, #96]	; 8016dc0 <ceilf+0x78>
 8016d60:	ee30 0a27 	vadd.f32	s0, s0, s15
 8016d64:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8016d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d6c:	dd05      	ble.n	8016d7a <ceilf+0x32>
 8016d6e:	2b00      	cmp	r3, #0
 8016d70:	db23      	blt.n	8016dba <ceilf+0x72>
 8016d72:	2900      	cmp	r1, #0
 8016d74:	bf18      	it	ne
 8016d76:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 8016d7a:	ee00 3a10 	vmov	s0, r3
 8016d7e:	4770      	bx	lr
 8016d80:	4910      	ldr	r1, [pc, #64]	; (8016dc4 <ceilf+0x7c>)
 8016d82:	4111      	asrs	r1, r2
 8016d84:	420b      	tst	r3, r1
 8016d86:	d0fa      	beq.n	8016d7e <ceilf+0x36>
 8016d88:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8016dc0 <ceilf+0x78>
 8016d8c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8016d90:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8016d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d98:	ddef      	ble.n	8016d7a <ceilf+0x32>
 8016d9a:	2b00      	cmp	r3, #0
 8016d9c:	bfc2      	ittt	gt
 8016d9e:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 8016da2:	fa40 f202 	asrgt.w	r2, r0, r2
 8016da6:	189b      	addgt	r3, r3, r2
 8016da8:	ea23 0301 	bic.w	r3, r3, r1
 8016dac:	e7e5      	b.n	8016d7a <ceilf+0x32>
 8016dae:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8016db2:	d3e4      	bcc.n	8016d7e <ceilf+0x36>
 8016db4:	ee30 0a00 	vadd.f32	s0, s0, s0
 8016db8:	4770      	bx	lr
 8016dba:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8016dbe:	e7dc      	b.n	8016d7a <ceilf+0x32>
 8016dc0:	7149f2ca 	.word	0x7149f2ca
 8016dc4:	007fffff 	.word	0x007fffff

08016dc8 <atan2>:
 8016dc8:	f000 b85a 	b.w	8016e80 <__ieee754_atan2>

08016dcc <sqrt>:
 8016dcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016dd0:	ed2d 8b02 	vpush	{d8}
 8016dd4:	b08b      	sub	sp, #44	; 0x2c
 8016dd6:	ec55 4b10 	vmov	r4, r5, d0
 8016dda:	f000 fb23 	bl	8017424 <__ieee754_sqrt>
 8016dde:	4b26      	ldr	r3, [pc, #152]	; (8016e78 <sqrt+0xac>)
 8016de0:	eeb0 8a40 	vmov.f32	s16, s0
 8016de4:	eef0 8a60 	vmov.f32	s17, s1
 8016de8:	f993 6000 	ldrsb.w	r6, [r3]
 8016dec:	1c73      	adds	r3, r6, #1
 8016dee:	d02a      	beq.n	8016e46 <sqrt+0x7a>
 8016df0:	4622      	mov	r2, r4
 8016df2:	462b      	mov	r3, r5
 8016df4:	4620      	mov	r0, r4
 8016df6:	4629      	mov	r1, r5
 8016df8:	f7e9 fea8 	bl	8000b4c <__aeabi_dcmpun>
 8016dfc:	4607      	mov	r7, r0
 8016dfe:	bb10      	cbnz	r0, 8016e46 <sqrt+0x7a>
 8016e00:	f04f 0800 	mov.w	r8, #0
 8016e04:	f04f 0900 	mov.w	r9, #0
 8016e08:	4642      	mov	r2, r8
 8016e0a:	464b      	mov	r3, r9
 8016e0c:	4620      	mov	r0, r4
 8016e0e:	4629      	mov	r1, r5
 8016e10:	f7e9 fe74 	bl	8000afc <__aeabi_dcmplt>
 8016e14:	b1b8      	cbz	r0, 8016e46 <sqrt+0x7a>
 8016e16:	2301      	movs	r3, #1
 8016e18:	9300      	str	r3, [sp, #0]
 8016e1a:	4b18      	ldr	r3, [pc, #96]	; (8016e7c <sqrt+0xb0>)
 8016e1c:	9301      	str	r3, [sp, #4]
 8016e1e:	9708      	str	r7, [sp, #32]
 8016e20:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8016e24:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8016e28:	b9b6      	cbnz	r6, 8016e58 <sqrt+0x8c>
 8016e2a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8016e2e:	4668      	mov	r0, sp
 8016e30:	f001 fa9e 	bl	8018370 <matherr>
 8016e34:	b1d0      	cbz	r0, 8016e6c <sqrt+0xa0>
 8016e36:	9b08      	ldr	r3, [sp, #32]
 8016e38:	b11b      	cbz	r3, 8016e42 <sqrt+0x76>
 8016e3a:	f7fb fc8f 	bl	801275c <__errno>
 8016e3e:	9b08      	ldr	r3, [sp, #32]
 8016e40:	6003      	str	r3, [r0, #0]
 8016e42:	ed9d 8b06 	vldr	d8, [sp, #24]
 8016e46:	eeb0 0a48 	vmov.f32	s0, s16
 8016e4a:	eef0 0a68 	vmov.f32	s1, s17
 8016e4e:	b00b      	add	sp, #44	; 0x2c
 8016e50:	ecbd 8b02 	vpop	{d8}
 8016e54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016e58:	4642      	mov	r2, r8
 8016e5a:	464b      	mov	r3, r9
 8016e5c:	4640      	mov	r0, r8
 8016e5e:	4649      	mov	r1, r9
 8016e60:	f7e9 fd04 	bl	800086c <__aeabi_ddiv>
 8016e64:	2e02      	cmp	r6, #2
 8016e66:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8016e6a:	d1e0      	bne.n	8016e2e <sqrt+0x62>
 8016e6c:	f7fb fc76 	bl	801275c <__errno>
 8016e70:	2321      	movs	r3, #33	; 0x21
 8016e72:	6003      	str	r3, [r0, #0]
 8016e74:	e7df      	b.n	8016e36 <sqrt+0x6a>
 8016e76:	bf00      	nop
 8016e78:	20001004 	.word	0x20001004
 8016e7c:	08018cd4 	.word	0x08018cd4

08016e80 <__ieee754_atan2>:
 8016e80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016e84:	ec57 6b11 	vmov	r6, r7, d1
 8016e88:	4273      	negs	r3, r6
 8016e8a:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8016e8e:	4333      	orrs	r3, r6
 8016e90:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8017038 <__ieee754_atan2+0x1b8>
 8016e94:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8016e98:	4573      	cmp	r3, lr
 8016e9a:	ec51 0b10 	vmov	r0, r1, d0
 8016e9e:	ee11 8a10 	vmov	r8, s2
 8016ea2:	d80a      	bhi.n	8016eba <__ieee754_atan2+0x3a>
 8016ea4:	4244      	negs	r4, r0
 8016ea6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8016eaa:	4304      	orrs	r4, r0
 8016eac:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8016eb0:	4574      	cmp	r4, lr
 8016eb2:	468c      	mov	ip, r1
 8016eb4:	ee10 9a10 	vmov	r9, s0
 8016eb8:	d907      	bls.n	8016eca <__ieee754_atan2+0x4a>
 8016eba:	4632      	mov	r2, r6
 8016ebc:	463b      	mov	r3, r7
 8016ebe:	f7e9 f9f5 	bl	80002ac <__adddf3>
 8016ec2:	ec41 0b10 	vmov	d0, r0, r1
 8016ec6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016eca:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8016ece:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8016ed2:	4334      	orrs	r4, r6
 8016ed4:	d103      	bne.n	8016ede <__ieee754_atan2+0x5e>
 8016ed6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016eda:	f001 b819 	b.w	8017f10 <atan>
 8016ede:	17bc      	asrs	r4, r7, #30
 8016ee0:	f004 0402 	and.w	r4, r4, #2
 8016ee4:	ea53 0909 	orrs.w	r9, r3, r9
 8016ee8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8016eec:	d107      	bne.n	8016efe <__ieee754_atan2+0x7e>
 8016eee:	2c02      	cmp	r4, #2
 8016ef0:	d073      	beq.n	8016fda <__ieee754_atan2+0x15a>
 8016ef2:	2c03      	cmp	r4, #3
 8016ef4:	d1e5      	bne.n	8016ec2 <__ieee754_atan2+0x42>
 8016ef6:	a13e      	add	r1, pc, #248	; (adr r1, 8016ff0 <__ieee754_atan2+0x170>)
 8016ef8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016efc:	e7e1      	b.n	8016ec2 <__ieee754_atan2+0x42>
 8016efe:	ea52 0808 	orrs.w	r8, r2, r8
 8016f02:	d106      	bne.n	8016f12 <__ieee754_atan2+0x92>
 8016f04:	f1bc 0f00 	cmp.w	ip, #0
 8016f08:	da6b      	bge.n	8016fe2 <__ieee754_atan2+0x162>
 8016f0a:	a13b      	add	r1, pc, #236	; (adr r1, 8016ff8 <__ieee754_atan2+0x178>)
 8016f0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016f10:	e7d7      	b.n	8016ec2 <__ieee754_atan2+0x42>
 8016f12:	4572      	cmp	r2, lr
 8016f14:	d120      	bne.n	8016f58 <__ieee754_atan2+0xd8>
 8016f16:	4293      	cmp	r3, r2
 8016f18:	d111      	bne.n	8016f3e <__ieee754_atan2+0xbe>
 8016f1a:	2c02      	cmp	r4, #2
 8016f1c:	d007      	beq.n	8016f2e <__ieee754_atan2+0xae>
 8016f1e:	2c03      	cmp	r4, #3
 8016f20:	d009      	beq.n	8016f36 <__ieee754_atan2+0xb6>
 8016f22:	2c01      	cmp	r4, #1
 8016f24:	d155      	bne.n	8016fd2 <__ieee754_atan2+0x152>
 8016f26:	a136      	add	r1, pc, #216	; (adr r1, 8017000 <__ieee754_atan2+0x180>)
 8016f28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016f2c:	e7c9      	b.n	8016ec2 <__ieee754_atan2+0x42>
 8016f2e:	a136      	add	r1, pc, #216	; (adr r1, 8017008 <__ieee754_atan2+0x188>)
 8016f30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016f34:	e7c5      	b.n	8016ec2 <__ieee754_atan2+0x42>
 8016f36:	a136      	add	r1, pc, #216	; (adr r1, 8017010 <__ieee754_atan2+0x190>)
 8016f38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016f3c:	e7c1      	b.n	8016ec2 <__ieee754_atan2+0x42>
 8016f3e:	2c02      	cmp	r4, #2
 8016f40:	d04b      	beq.n	8016fda <__ieee754_atan2+0x15a>
 8016f42:	2c03      	cmp	r4, #3
 8016f44:	d0d7      	beq.n	8016ef6 <__ieee754_atan2+0x76>
 8016f46:	2c01      	cmp	r4, #1
 8016f48:	f04f 0000 	mov.w	r0, #0
 8016f4c:	d102      	bne.n	8016f54 <__ieee754_atan2+0xd4>
 8016f4e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8016f52:	e7b6      	b.n	8016ec2 <__ieee754_atan2+0x42>
 8016f54:	2100      	movs	r1, #0
 8016f56:	e7b4      	b.n	8016ec2 <__ieee754_atan2+0x42>
 8016f58:	4573      	cmp	r3, lr
 8016f5a:	d0d3      	beq.n	8016f04 <__ieee754_atan2+0x84>
 8016f5c:	1a9b      	subs	r3, r3, r2
 8016f5e:	151b      	asrs	r3, r3, #20
 8016f60:	2b3c      	cmp	r3, #60	; 0x3c
 8016f62:	dc1e      	bgt.n	8016fa2 <__ieee754_atan2+0x122>
 8016f64:	2f00      	cmp	r7, #0
 8016f66:	da01      	bge.n	8016f6c <__ieee754_atan2+0xec>
 8016f68:	333c      	adds	r3, #60	; 0x3c
 8016f6a:	db1e      	blt.n	8016faa <__ieee754_atan2+0x12a>
 8016f6c:	4632      	mov	r2, r6
 8016f6e:	463b      	mov	r3, r7
 8016f70:	f7e9 fc7c 	bl	800086c <__aeabi_ddiv>
 8016f74:	ec41 0b10 	vmov	d0, r0, r1
 8016f78:	f001 f96a 	bl	8018250 <fabs>
 8016f7c:	f000 ffc8 	bl	8017f10 <atan>
 8016f80:	ec51 0b10 	vmov	r0, r1, d0
 8016f84:	2c01      	cmp	r4, #1
 8016f86:	d013      	beq.n	8016fb0 <__ieee754_atan2+0x130>
 8016f88:	2c02      	cmp	r4, #2
 8016f8a:	d015      	beq.n	8016fb8 <__ieee754_atan2+0x138>
 8016f8c:	2c00      	cmp	r4, #0
 8016f8e:	d098      	beq.n	8016ec2 <__ieee754_atan2+0x42>
 8016f90:	a321      	add	r3, pc, #132	; (adr r3, 8017018 <__ieee754_atan2+0x198>)
 8016f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f96:	f7e9 f987 	bl	80002a8 <__aeabi_dsub>
 8016f9a:	a321      	add	r3, pc, #132	; (adr r3, 8017020 <__ieee754_atan2+0x1a0>)
 8016f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fa0:	e014      	b.n	8016fcc <__ieee754_atan2+0x14c>
 8016fa2:	a121      	add	r1, pc, #132	; (adr r1, 8017028 <__ieee754_atan2+0x1a8>)
 8016fa4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016fa8:	e7ec      	b.n	8016f84 <__ieee754_atan2+0x104>
 8016faa:	2000      	movs	r0, #0
 8016fac:	2100      	movs	r1, #0
 8016fae:	e7e9      	b.n	8016f84 <__ieee754_atan2+0x104>
 8016fb0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016fb4:	4619      	mov	r1, r3
 8016fb6:	e784      	b.n	8016ec2 <__ieee754_atan2+0x42>
 8016fb8:	a317      	add	r3, pc, #92	; (adr r3, 8017018 <__ieee754_atan2+0x198>)
 8016fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fbe:	f7e9 f973 	bl	80002a8 <__aeabi_dsub>
 8016fc2:	4602      	mov	r2, r0
 8016fc4:	460b      	mov	r3, r1
 8016fc6:	a116      	add	r1, pc, #88	; (adr r1, 8017020 <__ieee754_atan2+0x1a0>)
 8016fc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016fcc:	f7e9 f96c 	bl	80002a8 <__aeabi_dsub>
 8016fd0:	e777      	b.n	8016ec2 <__ieee754_atan2+0x42>
 8016fd2:	a117      	add	r1, pc, #92	; (adr r1, 8017030 <__ieee754_atan2+0x1b0>)
 8016fd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016fd8:	e773      	b.n	8016ec2 <__ieee754_atan2+0x42>
 8016fda:	a111      	add	r1, pc, #68	; (adr r1, 8017020 <__ieee754_atan2+0x1a0>)
 8016fdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016fe0:	e76f      	b.n	8016ec2 <__ieee754_atan2+0x42>
 8016fe2:	a111      	add	r1, pc, #68	; (adr r1, 8017028 <__ieee754_atan2+0x1a8>)
 8016fe4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016fe8:	e76b      	b.n	8016ec2 <__ieee754_atan2+0x42>
 8016fea:	bf00      	nop
 8016fec:	f3af 8000 	nop.w
 8016ff0:	54442d18 	.word	0x54442d18
 8016ff4:	c00921fb 	.word	0xc00921fb
 8016ff8:	54442d18 	.word	0x54442d18
 8016ffc:	bff921fb 	.word	0xbff921fb
 8017000:	54442d18 	.word	0x54442d18
 8017004:	bfe921fb 	.word	0xbfe921fb
 8017008:	7f3321d2 	.word	0x7f3321d2
 801700c:	4002d97c 	.word	0x4002d97c
 8017010:	7f3321d2 	.word	0x7f3321d2
 8017014:	c002d97c 	.word	0xc002d97c
 8017018:	33145c07 	.word	0x33145c07
 801701c:	3ca1a626 	.word	0x3ca1a626
 8017020:	54442d18 	.word	0x54442d18
 8017024:	400921fb 	.word	0x400921fb
 8017028:	54442d18 	.word	0x54442d18
 801702c:	3ff921fb 	.word	0x3ff921fb
 8017030:	54442d18 	.word	0x54442d18
 8017034:	3fe921fb 	.word	0x3fe921fb
 8017038:	7ff00000 	.word	0x7ff00000
 801703c:	00000000 	.word	0x00000000

08017040 <__ieee754_rem_pio2>:
 8017040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017044:	ec57 6b10 	vmov	r6, r7, d0
 8017048:	4bc3      	ldr	r3, [pc, #780]	; (8017358 <__ieee754_rem_pio2+0x318>)
 801704a:	b08d      	sub	sp, #52	; 0x34
 801704c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8017050:	4598      	cmp	r8, r3
 8017052:	4604      	mov	r4, r0
 8017054:	9704      	str	r7, [sp, #16]
 8017056:	dc07      	bgt.n	8017068 <__ieee754_rem_pio2+0x28>
 8017058:	2200      	movs	r2, #0
 801705a:	2300      	movs	r3, #0
 801705c:	ed84 0b00 	vstr	d0, [r4]
 8017060:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8017064:	2500      	movs	r5, #0
 8017066:	e027      	b.n	80170b8 <__ieee754_rem_pio2+0x78>
 8017068:	4bbc      	ldr	r3, [pc, #752]	; (801735c <__ieee754_rem_pio2+0x31c>)
 801706a:	4598      	cmp	r8, r3
 801706c:	dc75      	bgt.n	801715a <__ieee754_rem_pio2+0x11a>
 801706e:	9b04      	ldr	r3, [sp, #16]
 8017070:	4dbb      	ldr	r5, [pc, #748]	; (8017360 <__ieee754_rem_pio2+0x320>)
 8017072:	2b00      	cmp	r3, #0
 8017074:	ee10 0a10 	vmov	r0, s0
 8017078:	a3a9      	add	r3, pc, #676	; (adr r3, 8017320 <__ieee754_rem_pio2+0x2e0>)
 801707a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801707e:	4639      	mov	r1, r7
 8017080:	dd36      	ble.n	80170f0 <__ieee754_rem_pio2+0xb0>
 8017082:	f7e9 f911 	bl	80002a8 <__aeabi_dsub>
 8017086:	45a8      	cmp	r8, r5
 8017088:	4606      	mov	r6, r0
 801708a:	460f      	mov	r7, r1
 801708c:	d018      	beq.n	80170c0 <__ieee754_rem_pio2+0x80>
 801708e:	a3a6      	add	r3, pc, #664	; (adr r3, 8017328 <__ieee754_rem_pio2+0x2e8>)
 8017090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017094:	f7e9 f908 	bl	80002a8 <__aeabi_dsub>
 8017098:	4602      	mov	r2, r0
 801709a:	460b      	mov	r3, r1
 801709c:	e9c4 2300 	strd	r2, r3, [r4]
 80170a0:	4630      	mov	r0, r6
 80170a2:	4639      	mov	r1, r7
 80170a4:	f7e9 f900 	bl	80002a8 <__aeabi_dsub>
 80170a8:	a39f      	add	r3, pc, #636	; (adr r3, 8017328 <__ieee754_rem_pio2+0x2e8>)
 80170aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170ae:	f7e9 f8fb 	bl	80002a8 <__aeabi_dsub>
 80170b2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80170b6:	2501      	movs	r5, #1
 80170b8:	4628      	mov	r0, r5
 80170ba:	b00d      	add	sp, #52	; 0x34
 80170bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170c0:	a39b      	add	r3, pc, #620	; (adr r3, 8017330 <__ieee754_rem_pio2+0x2f0>)
 80170c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170c6:	f7e9 f8ef 	bl	80002a8 <__aeabi_dsub>
 80170ca:	a39b      	add	r3, pc, #620	; (adr r3, 8017338 <__ieee754_rem_pio2+0x2f8>)
 80170cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170d0:	4606      	mov	r6, r0
 80170d2:	460f      	mov	r7, r1
 80170d4:	f7e9 f8e8 	bl	80002a8 <__aeabi_dsub>
 80170d8:	4602      	mov	r2, r0
 80170da:	460b      	mov	r3, r1
 80170dc:	e9c4 2300 	strd	r2, r3, [r4]
 80170e0:	4630      	mov	r0, r6
 80170e2:	4639      	mov	r1, r7
 80170e4:	f7e9 f8e0 	bl	80002a8 <__aeabi_dsub>
 80170e8:	a393      	add	r3, pc, #588	; (adr r3, 8017338 <__ieee754_rem_pio2+0x2f8>)
 80170ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170ee:	e7de      	b.n	80170ae <__ieee754_rem_pio2+0x6e>
 80170f0:	f7e9 f8dc 	bl	80002ac <__adddf3>
 80170f4:	45a8      	cmp	r8, r5
 80170f6:	4606      	mov	r6, r0
 80170f8:	460f      	mov	r7, r1
 80170fa:	d016      	beq.n	801712a <__ieee754_rem_pio2+0xea>
 80170fc:	a38a      	add	r3, pc, #552	; (adr r3, 8017328 <__ieee754_rem_pio2+0x2e8>)
 80170fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017102:	f7e9 f8d3 	bl	80002ac <__adddf3>
 8017106:	4602      	mov	r2, r0
 8017108:	460b      	mov	r3, r1
 801710a:	e9c4 2300 	strd	r2, r3, [r4]
 801710e:	4630      	mov	r0, r6
 8017110:	4639      	mov	r1, r7
 8017112:	f7e9 f8c9 	bl	80002a8 <__aeabi_dsub>
 8017116:	a384      	add	r3, pc, #528	; (adr r3, 8017328 <__ieee754_rem_pio2+0x2e8>)
 8017118:	e9d3 2300 	ldrd	r2, r3, [r3]
 801711c:	f7e9 f8c6 	bl	80002ac <__adddf3>
 8017120:	f04f 35ff 	mov.w	r5, #4294967295
 8017124:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8017128:	e7c6      	b.n	80170b8 <__ieee754_rem_pio2+0x78>
 801712a:	a381      	add	r3, pc, #516	; (adr r3, 8017330 <__ieee754_rem_pio2+0x2f0>)
 801712c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017130:	f7e9 f8bc 	bl	80002ac <__adddf3>
 8017134:	a380      	add	r3, pc, #512	; (adr r3, 8017338 <__ieee754_rem_pio2+0x2f8>)
 8017136:	e9d3 2300 	ldrd	r2, r3, [r3]
 801713a:	4606      	mov	r6, r0
 801713c:	460f      	mov	r7, r1
 801713e:	f7e9 f8b5 	bl	80002ac <__adddf3>
 8017142:	4602      	mov	r2, r0
 8017144:	460b      	mov	r3, r1
 8017146:	e9c4 2300 	strd	r2, r3, [r4]
 801714a:	4630      	mov	r0, r6
 801714c:	4639      	mov	r1, r7
 801714e:	f7e9 f8ab 	bl	80002a8 <__aeabi_dsub>
 8017152:	a379      	add	r3, pc, #484	; (adr r3, 8017338 <__ieee754_rem_pio2+0x2f8>)
 8017154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017158:	e7e0      	b.n	801711c <__ieee754_rem_pio2+0xdc>
 801715a:	4b82      	ldr	r3, [pc, #520]	; (8017364 <__ieee754_rem_pio2+0x324>)
 801715c:	4598      	cmp	r8, r3
 801715e:	f300 80d0 	bgt.w	8017302 <__ieee754_rem_pio2+0x2c2>
 8017162:	f001 f875 	bl	8018250 <fabs>
 8017166:	ec57 6b10 	vmov	r6, r7, d0
 801716a:	ee10 0a10 	vmov	r0, s0
 801716e:	a374      	add	r3, pc, #464	; (adr r3, 8017340 <__ieee754_rem_pio2+0x300>)
 8017170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017174:	4639      	mov	r1, r7
 8017176:	f7e9 fa4f 	bl	8000618 <__aeabi_dmul>
 801717a:	2200      	movs	r2, #0
 801717c:	4b7a      	ldr	r3, [pc, #488]	; (8017368 <__ieee754_rem_pio2+0x328>)
 801717e:	f7e9 f895 	bl	80002ac <__adddf3>
 8017182:	f7e9 fcf9 	bl	8000b78 <__aeabi_d2iz>
 8017186:	4605      	mov	r5, r0
 8017188:	f7e9 f9dc 	bl	8000544 <__aeabi_i2d>
 801718c:	a364      	add	r3, pc, #400	; (adr r3, 8017320 <__ieee754_rem_pio2+0x2e0>)
 801718e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017192:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017196:	f7e9 fa3f 	bl	8000618 <__aeabi_dmul>
 801719a:	4602      	mov	r2, r0
 801719c:	460b      	mov	r3, r1
 801719e:	4630      	mov	r0, r6
 80171a0:	4639      	mov	r1, r7
 80171a2:	f7e9 f881 	bl	80002a8 <__aeabi_dsub>
 80171a6:	a360      	add	r3, pc, #384	; (adr r3, 8017328 <__ieee754_rem_pio2+0x2e8>)
 80171a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171ac:	4682      	mov	sl, r0
 80171ae:	468b      	mov	fp, r1
 80171b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80171b4:	f7e9 fa30 	bl	8000618 <__aeabi_dmul>
 80171b8:	2d1f      	cmp	r5, #31
 80171ba:	4606      	mov	r6, r0
 80171bc:	460f      	mov	r7, r1
 80171be:	dc0c      	bgt.n	80171da <__ieee754_rem_pio2+0x19a>
 80171c0:	1e6a      	subs	r2, r5, #1
 80171c2:	4b6a      	ldr	r3, [pc, #424]	; (801736c <__ieee754_rem_pio2+0x32c>)
 80171c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80171c8:	4543      	cmp	r3, r8
 80171ca:	d006      	beq.n	80171da <__ieee754_rem_pio2+0x19a>
 80171cc:	4632      	mov	r2, r6
 80171ce:	463b      	mov	r3, r7
 80171d0:	4650      	mov	r0, sl
 80171d2:	4659      	mov	r1, fp
 80171d4:	f7e9 f868 	bl	80002a8 <__aeabi_dsub>
 80171d8:	e00e      	b.n	80171f8 <__ieee754_rem_pio2+0x1b8>
 80171da:	4632      	mov	r2, r6
 80171dc:	463b      	mov	r3, r7
 80171de:	4650      	mov	r0, sl
 80171e0:	4659      	mov	r1, fp
 80171e2:	f7e9 f861 	bl	80002a8 <__aeabi_dsub>
 80171e6:	ea4f 5328 	mov.w	r3, r8, asr #20
 80171ea:	9305      	str	r3, [sp, #20]
 80171ec:	9a05      	ldr	r2, [sp, #20]
 80171ee:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80171f2:	1ad3      	subs	r3, r2, r3
 80171f4:	2b10      	cmp	r3, #16
 80171f6:	dc02      	bgt.n	80171fe <__ieee754_rem_pio2+0x1be>
 80171f8:	e9c4 0100 	strd	r0, r1, [r4]
 80171fc:	e039      	b.n	8017272 <__ieee754_rem_pio2+0x232>
 80171fe:	a34c      	add	r3, pc, #304	; (adr r3, 8017330 <__ieee754_rem_pio2+0x2f0>)
 8017200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017204:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017208:	f7e9 fa06 	bl	8000618 <__aeabi_dmul>
 801720c:	4606      	mov	r6, r0
 801720e:	460f      	mov	r7, r1
 8017210:	4602      	mov	r2, r0
 8017212:	460b      	mov	r3, r1
 8017214:	4650      	mov	r0, sl
 8017216:	4659      	mov	r1, fp
 8017218:	f7e9 f846 	bl	80002a8 <__aeabi_dsub>
 801721c:	4602      	mov	r2, r0
 801721e:	460b      	mov	r3, r1
 8017220:	4680      	mov	r8, r0
 8017222:	4689      	mov	r9, r1
 8017224:	4650      	mov	r0, sl
 8017226:	4659      	mov	r1, fp
 8017228:	f7e9 f83e 	bl	80002a8 <__aeabi_dsub>
 801722c:	4632      	mov	r2, r6
 801722e:	463b      	mov	r3, r7
 8017230:	f7e9 f83a 	bl	80002a8 <__aeabi_dsub>
 8017234:	a340      	add	r3, pc, #256	; (adr r3, 8017338 <__ieee754_rem_pio2+0x2f8>)
 8017236:	e9d3 2300 	ldrd	r2, r3, [r3]
 801723a:	4606      	mov	r6, r0
 801723c:	460f      	mov	r7, r1
 801723e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017242:	f7e9 f9e9 	bl	8000618 <__aeabi_dmul>
 8017246:	4632      	mov	r2, r6
 8017248:	463b      	mov	r3, r7
 801724a:	f7e9 f82d 	bl	80002a8 <__aeabi_dsub>
 801724e:	4602      	mov	r2, r0
 8017250:	460b      	mov	r3, r1
 8017252:	4606      	mov	r6, r0
 8017254:	460f      	mov	r7, r1
 8017256:	4640      	mov	r0, r8
 8017258:	4649      	mov	r1, r9
 801725a:	f7e9 f825 	bl	80002a8 <__aeabi_dsub>
 801725e:	9a05      	ldr	r2, [sp, #20]
 8017260:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8017264:	1ad3      	subs	r3, r2, r3
 8017266:	2b31      	cmp	r3, #49	; 0x31
 8017268:	dc20      	bgt.n	80172ac <__ieee754_rem_pio2+0x26c>
 801726a:	e9c4 0100 	strd	r0, r1, [r4]
 801726e:	46c2      	mov	sl, r8
 8017270:	46cb      	mov	fp, r9
 8017272:	e9d4 8900 	ldrd	r8, r9, [r4]
 8017276:	4650      	mov	r0, sl
 8017278:	4642      	mov	r2, r8
 801727a:	464b      	mov	r3, r9
 801727c:	4659      	mov	r1, fp
 801727e:	f7e9 f813 	bl	80002a8 <__aeabi_dsub>
 8017282:	463b      	mov	r3, r7
 8017284:	4632      	mov	r2, r6
 8017286:	f7e9 f80f 	bl	80002a8 <__aeabi_dsub>
 801728a:	9b04      	ldr	r3, [sp, #16]
 801728c:	2b00      	cmp	r3, #0
 801728e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8017292:	f6bf af11 	bge.w	80170b8 <__ieee754_rem_pio2+0x78>
 8017296:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801729a:	6063      	str	r3, [r4, #4]
 801729c:	f8c4 8000 	str.w	r8, [r4]
 80172a0:	60a0      	str	r0, [r4, #8]
 80172a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80172a6:	60e3      	str	r3, [r4, #12]
 80172a8:	426d      	negs	r5, r5
 80172aa:	e705      	b.n	80170b8 <__ieee754_rem_pio2+0x78>
 80172ac:	a326      	add	r3, pc, #152	; (adr r3, 8017348 <__ieee754_rem_pio2+0x308>)
 80172ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80172b6:	f7e9 f9af 	bl	8000618 <__aeabi_dmul>
 80172ba:	4606      	mov	r6, r0
 80172bc:	460f      	mov	r7, r1
 80172be:	4602      	mov	r2, r0
 80172c0:	460b      	mov	r3, r1
 80172c2:	4640      	mov	r0, r8
 80172c4:	4649      	mov	r1, r9
 80172c6:	f7e8 ffef 	bl	80002a8 <__aeabi_dsub>
 80172ca:	4602      	mov	r2, r0
 80172cc:	460b      	mov	r3, r1
 80172ce:	4682      	mov	sl, r0
 80172d0:	468b      	mov	fp, r1
 80172d2:	4640      	mov	r0, r8
 80172d4:	4649      	mov	r1, r9
 80172d6:	f7e8 ffe7 	bl	80002a8 <__aeabi_dsub>
 80172da:	4632      	mov	r2, r6
 80172dc:	463b      	mov	r3, r7
 80172de:	f7e8 ffe3 	bl	80002a8 <__aeabi_dsub>
 80172e2:	a31b      	add	r3, pc, #108	; (adr r3, 8017350 <__ieee754_rem_pio2+0x310>)
 80172e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172e8:	4606      	mov	r6, r0
 80172ea:	460f      	mov	r7, r1
 80172ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80172f0:	f7e9 f992 	bl	8000618 <__aeabi_dmul>
 80172f4:	4632      	mov	r2, r6
 80172f6:	463b      	mov	r3, r7
 80172f8:	f7e8 ffd6 	bl	80002a8 <__aeabi_dsub>
 80172fc:	4606      	mov	r6, r0
 80172fe:	460f      	mov	r7, r1
 8017300:	e764      	b.n	80171cc <__ieee754_rem_pio2+0x18c>
 8017302:	4b1b      	ldr	r3, [pc, #108]	; (8017370 <__ieee754_rem_pio2+0x330>)
 8017304:	4598      	cmp	r8, r3
 8017306:	dd35      	ble.n	8017374 <__ieee754_rem_pio2+0x334>
 8017308:	ee10 2a10 	vmov	r2, s0
 801730c:	463b      	mov	r3, r7
 801730e:	4630      	mov	r0, r6
 8017310:	4639      	mov	r1, r7
 8017312:	f7e8 ffc9 	bl	80002a8 <__aeabi_dsub>
 8017316:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801731a:	e9c4 0100 	strd	r0, r1, [r4]
 801731e:	e6a1      	b.n	8017064 <__ieee754_rem_pio2+0x24>
 8017320:	54400000 	.word	0x54400000
 8017324:	3ff921fb 	.word	0x3ff921fb
 8017328:	1a626331 	.word	0x1a626331
 801732c:	3dd0b461 	.word	0x3dd0b461
 8017330:	1a600000 	.word	0x1a600000
 8017334:	3dd0b461 	.word	0x3dd0b461
 8017338:	2e037073 	.word	0x2e037073
 801733c:	3ba3198a 	.word	0x3ba3198a
 8017340:	6dc9c883 	.word	0x6dc9c883
 8017344:	3fe45f30 	.word	0x3fe45f30
 8017348:	2e000000 	.word	0x2e000000
 801734c:	3ba3198a 	.word	0x3ba3198a
 8017350:	252049c1 	.word	0x252049c1
 8017354:	397b839a 	.word	0x397b839a
 8017358:	3fe921fb 	.word	0x3fe921fb
 801735c:	4002d97b 	.word	0x4002d97b
 8017360:	3ff921fb 	.word	0x3ff921fb
 8017364:	413921fb 	.word	0x413921fb
 8017368:	3fe00000 	.word	0x3fe00000
 801736c:	08018cdc 	.word	0x08018cdc
 8017370:	7fefffff 	.word	0x7fefffff
 8017374:	ea4f 5528 	mov.w	r5, r8, asr #20
 8017378:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 801737c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8017380:	4630      	mov	r0, r6
 8017382:	460f      	mov	r7, r1
 8017384:	f7e9 fbf8 	bl	8000b78 <__aeabi_d2iz>
 8017388:	f7e9 f8dc 	bl	8000544 <__aeabi_i2d>
 801738c:	4602      	mov	r2, r0
 801738e:	460b      	mov	r3, r1
 8017390:	4630      	mov	r0, r6
 8017392:	4639      	mov	r1, r7
 8017394:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8017398:	f7e8 ff86 	bl	80002a8 <__aeabi_dsub>
 801739c:	2200      	movs	r2, #0
 801739e:	4b1f      	ldr	r3, [pc, #124]	; (801741c <__ieee754_rem_pio2+0x3dc>)
 80173a0:	f7e9 f93a 	bl	8000618 <__aeabi_dmul>
 80173a4:	460f      	mov	r7, r1
 80173a6:	4606      	mov	r6, r0
 80173a8:	f7e9 fbe6 	bl	8000b78 <__aeabi_d2iz>
 80173ac:	f7e9 f8ca 	bl	8000544 <__aeabi_i2d>
 80173b0:	4602      	mov	r2, r0
 80173b2:	460b      	mov	r3, r1
 80173b4:	4630      	mov	r0, r6
 80173b6:	4639      	mov	r1, r7
 80173b8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80173bc:	f7e8 ff74 	bl	80002a8 <__aeabi_dsub>
 80173c0:	2200      	movs	r2, #0
 80173c2:	4b16      	ldr	r3, [pc, #88]	; (801741c <__ieee754_rem_pio2+0x3dc>)
 80173c4:	f7e9 f928 	bl	8000618 <__aeabi_dmul>
 80173c8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80173cc:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80173d0:	f04f 0803 	mov.w	r8, #3
 80173d4:	2600      	movs	r6, #0
 80173d6:	2700      	movs	r7, #0
 80173d8:	4632      	mov	r2, r6
 80173da:	463b      	mov	r3, r7
 80173dc:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80173e0:	f108 3aff 	add.w	sl, r8, #4294967295
 80173e4:	f7e9 fb80 	bl	8000ae8 <__aeabi_dcmpeq>
 80173e8:	b9b0      	cbnz	r0, 8017418 <__ieee754_rem_pio2+0x3d8>
 80173ea:	4b0d      	ldr	r3, [pc, #52]	; (8017420 <__ieee754_rem_pio2+0x3e0>)
 80173ec:	9301      	str	r3, [sp, #4]
 80173ee:	2302      	movs	r3, #2
 80173f0:	9300      	str	r3, [sp, #0]
 80173f2:	462a      	mov	r2, r5
 80173f4:	4643      	mov	r3, r8
 80173f6:	4621      	mov	r1, r4
 80173f8:	a806      	add	r0, sp, #24
 80173fa:	f000 f98d 	bl	8017718 <__kernel_rem_pio2>
 80173fe:	9b04      	ldr	r3, [sp, #16]
 8017400:	2b00      	cmp	r3, #0
 8017402:	4605      	mov	r5, r0
 8017404:	f6bf ae58 	bge.w	80170b8 <__ieee754_rem_pio2+0x78>
 8017408:	6863      	ldr	r3, [r4, #4]
 801740a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801740e:	6063      	str	r3, [r4, #4]
 8017410:	68e3      	ldr	r3, [r4, #12]
 8017412:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8017416:	e746      	b.n	80172a6 <__ieee754_rem_pio2+0x266>
 8017418:	46d0      	mov	r8, sl
 801741a:	e7dd      	b.n	80173d8 <__ieee754_rem_pio2+0x398>
 801741c:	41700000 	.word	0x41700000
 8017420:	08018d5c 	.word	0x08018d5c

08017424 <__ieee754_sqrt>:
 8017424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017428:	4955      	ldr	r1, [pc, #340]	; (8017580 <__ieee754_sqrt+0x15c>)
 801742a:	ec55 4b10 	vmov	r4, r5, d0
 801742e:	43a9      	bics	r1, r5
 8017430:	462b      	mov	r3, r5
 8017432:	462a      	mov	r2, r5
 8017434:	d112      	bne.n	801745c <__ieee754_sqrt+0x38>
 8017436:	ee10 2a10 	vmov	r2, s0
 801743a:	ee10 0a10 	vmov	r0, s0
 801743e:	4629      	mov	r1, r5
 8017440:	f7e9 f8ea 	bl	8000618 <__aeabi_dmul>
 8017444:	4602      	mov	r2, r0
 8017446:	460b      	mov	r3, r1
 8017448:	4620      	mov	r0, r4
 801744a:	4629      	mov	r1, r5
 801744c:	f7e8 ff2e 	bl	80002ac <__adddf3>
 8017450:	4604      	mov	r4, r0
 8017452:	460d      	mov	r5, r1
 8017454:	ec45 4b10 	vmov	d0, r4, r5
 8017458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801745c:	2d00      	cmp	r5, #0
 801745e:	ee10 0a10 	vmov	r0, s0
 8017462:	4621      	mov	r1, r4
 8017464:	dc0f      	bgt.n	8017486 <__ieee754_sqrt+0x62>
 8017466:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801746a:	4330      	orrs	r0, r6
 801746c:	d0f2      	beq.n	8017454 <__ieee754_sqrt+0x30>
 801746e:	b155      	cbz	r5, 8017486 <__ieee754_sqrt+0x62>
 8017470:	ee10 2a10 	vmov	r2, s0
 8017474:	4620      	mov	r0, r4
 8017476:	4629      	mov	r1, r5
 8017478:	f7e8 ff16 	bl	80002a8 <__aeabi_dsub>
 801747c:	4602      	mov	r2, r0
 801747e:	460b      	mov	r3, r1
 8017480:	f7e9 f9f4 	bl	800086c <__aeabi_ddiv>
 8017484:	e7e4      	b.n	8017450 <__ieee754_sqrt+0x2c>
 8017486:	151b      	asrs	r3, r3, #20
 8017488:	d073      	beq.n	8017572 <__ieee754_sqrt+0x14e>
 801748a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801748e:	07dd      	lsls	r5, r3, #31
 8017490:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8017494:	bf48      	it	mi
 8017496:	0fc8      	lsrmi	r0, r1, #31
 8017498:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801749c:	bf44      	itt	mi
 801749e:	0049      	lslmi	r1, r1, #1
 80174a0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 80174a4:	2500      	movs	r5, #0
 80174a6:	1058      	asrs	r0, r3, #1
 80174a8:	0fcb      	lsrs	r3, r1, #31
 80174aa:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80174ae:	0049      	lsls	r1, r1, #1
 80174b0:	2316      	movs	r3, #22
 80174b2:	462c      	mov	r4, r5
 80174b4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80174b8:	19a7      	adds	r7, r4, r6
 80174ba:	4297      	cmp	r7, r2
 80174bc:	bfde      	ittt	le
 80174be:	19bc      	addle	r4, r7, r6
 80174c0:	1bd2      	suble	r2, r2, r7
 80174c2:	19ad      	addle	r5, r5, r6
 80174c4:	0fcf      	lsrs	r7, r1, #31
 80174c6:	3b01      	subs	r3, #1
 80174c8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 80174cc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80174d0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80174d4:	d1f0      	bne.n	80174b8 <__ieee754_sqrt+0x94>
 80174d6:	f04f 0c20 	mov.w	ip, #32
 80174da:	469e      	mov	lr, r3
 80174dc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80174e0:	42a2      	cmp	r2, r4
 80174e2:	eb06 070e 	add.w	r7, r6, lr
 80174e6:	dc02      	bgt.n	80174ee <__ieee754_sqrt+0xca>
 80174e8:	d112      	bne.n	8017510 <__ieee754_sqrt+0xec>
 80174ea:	428f      	cmp	r7, r1
 80174ec:	d810      	bhi.n	8017510 <__ieee754_sqrt+0xec>
 80174ee:	2f00      	cmp	r7, #0
 80174f0:	eb07 0e06 	add.w	lr, r7, r6
 80174f4:	da42      	bge.n	801757c <__ieee754_sqrt+0x158>
 80174f6:	f1be 0f00 	cmp.w	lr, #0
 80174fa:	db3f      	blt.n	801757c <__ieee754_sqrt+0x158>
 80174fc:	f104 0801 	add.w	r8, r4, #1
 8017500:	1b12      	subs	r2, r2, r4
 8017502:	428f      	cmp	r7, r1
 8017504:	bf88      	it	hi
 8017506:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801750a:	1bc9      	subs	r1, r1, r7
 801750c:	4433      	add	r3, r6
 801750e:	4644      	mov	r4, r8
 8017510:	0052      	lsls	r2, r2, #1
 8017512:	f1bc 0c01 	subs.w	ip, ip, #1
 8017516:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 801751a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801751e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8017522:	d1dd      	bne.n	80174e0 <__ieee754_sqrt+0xbc>
 8017524:	430a      	orrs	r2, r1
 8017526:	d006      	beq.n	8017536 <__ieee754_sqrt+0x112>
 8017528:	1c5c      	adds	r4, r3, #1
 801752a:	bf13      	iteet	ne
 801752c:	3301      	addne	r3, #1
 801752e:	3501      	addeq	r5, #1
 8017530:	4663      	moveq	r3, ip
 8017532:	f023 0301 	bicne.w	r3, r3, #1
 8017536:	106a      	asrs	r2, r5, #1
 8017538:	085b      	lsrs	r3, r3, #1
 801753a:	07e9      	lsls	r1, r5, #31
 801753c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8017540:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8017544:	bf48      	it	mi
 8017546:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801754a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 801754e:	461c      	mov	r4, r3
 8017550:	e780      	b.n	8017454 <__ieee754_sqrt+0x30>
 8017552:	0aca      	lsrs	r2, r1, #11
 8017554:	3815      	subs	r0, #21
 8017556:	0549      	lsls	r1, r1, #21
 8017558:	2a00      	cmp	r2, #0
 801755a:	d0fa      	beq.n	8017552 <__ieee754_sqrt+0x12e>
 801755c:	02d6      	lsls	r6, r2, #11
 801755e:	d50a      	bpl.n	8017576 <__ieee754_sqrt+0x152>
 8017560:	f1c3 0420 	rsb	r4, r3, #32
 8017564:	fa21 f404 	lsr.w	r4, r1, r4
 8017568:	1e5d      	subs	r5, r3, #1
 801756a:	4099      	lsls	r1, r3
 801756c:	4322      	orrs	r2, r4
 801756e:	1b43      	subs	r3, r0, r5
 8017570:	e78b      	b.n	801748a <__ieee754_sqrt+0x66>
 8017572:	4618      	mov	r0, r3
 8017574:	e7f0      	b.n	8017558 <__ieee754_sqrt+0x134>
 8017576:	0052      	lsls	r2, r2, #1
 8017578:	3301      	adds	r3, #1
 801757a:	e7ef      	b.n	801755c <__ieee754_sqrt+0x138>
 801757c:	46a0      	mov	r8, r4
 801757e:	e7bf      	b.n	8017500 <__ieee754_sqrt+0xdc>
 8017580:	7ff00000 	.word	0x7ff00000
 8017584:	00000000 	.word	0x00000000

08017588 <__kernel_cos>:
 8017588:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801758c:	ec59 8b10 	vmov	r8, r9, d0
 8017590:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8017594:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8017598:	ed2d 8b02 	vpush	{d8}
 801759c:	eeb0 8a41 	vmov.f32	s16, s2
 80175a0:	eef0 8a61 	vmov.f32	s17, s3
 80175a4:	da07      	bge.n	80175b6 <__kernel_cos+0x2e>
 80175a6:	ee10 0a10 	vmov	r0, s0
 80175aa:	4649      	mov	r1, r9
 80175ac:	f7e9 fae4 	bl	8000b78 <__aeabi_d2iz>
 80175b0:	2800      	cmp	r0, #0
 80175b2:	f000 8089 	beq.w	80176c8 <__kernel_cos+0x140>
 80175b6:	4642      	mov	r2, r8
 80175b8:	464b      	mov	r3, r9
 80175ba:	4640      	mov	r0, r8
 80175bc:	4649      	mov	r1, r9
 80175be:	f7e9 f82b 	bl	8000618 <__aeabi_dmul>
 80175c2:	2200      	movs	r2, #0
 80175c4:	4b4e      	ldr	r3, [pc, #312]	; (8017700 <__kernel_cos+0x178>)
 80175c6:	4604      	mov	r4, r0
 80175c8:	460d      	mov	r5, r1
 80175ca:	f7e9 f825 	bl	8000618 <__aeabi_dmul>
 80175ce:	a340      	add	r3, pc, #256	; (adr r3, 80176d0 <__kernel_cos+0x148>)
 80175d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175d4:	4682      	mov	sl, r0
 80175d6:	468b      	mov	fp, r1
 80175d8:	4620      	mov	r0, r4
 80175da:	4629      	mov	r1, r5
 80175dc:	f7e9 f81c 	bl	8000618 <__aeabi_dmul>
 80175e0:	a33d      	add	r3, pc, #244	; (adr r3, 80176d8 <__kernel_cos+0x150>)
 80175e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175e6:	f7e8 fe61 	bl	80002ac <__adddf3>
 80175ea:	4622      	mov	r2, r4
 80175ec:	462b      	mov	r3, r5
 80175ee:	f7e9 f813 	bl	8000618 <__aeabi_dmul>
 80175f2:	a33b      	add	r3, pc, #236	; (adr r3, 80176e0 <__kernel_cos+0x158>)
 80175f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175f8:	f7e8 fe56 	bl	80002a8 <__aeabi_dsub>
 80175fc:	4622      	mov	r2, r4
 80175fe:	462b      	mov	r3, r5
 8017600:	f7e9 f80a 	bl	8000618 <__aeabi_dmul>
 8017604:	a338      	add	r3, pc, #224	; (adr r3, 80176e8 <__kernel_cos+0x160>)
 8017606:	e9d3 2300 	ldrd	r2, r3, [r3]
 801760a:	f7e8 fe4f 	bl	80002ac <__adddf3>
 801760e:	4622      	mov	r2, r4
 8017610:	462b      	mov	r3, r5
 8017612:	f7e9 f801 	bl	8000618 <__aeabi_dmul>
 8017616:	a336      	add	r3, pc, #216	; (adr r3, 80176f0 <__kernel_cos+0x168>)
 8017618:	e9d3 2300 	ldrd	r2, r3, [r3]
 801761c:	f7e8 fe44 	bl	80002a8 <__aeabi_dsub>
 8017620:	4622      	mov	r2, r4
 8017622:	462b      	mov	r3, r5
 8017624:	f7e8 fff8 	bl	8000618 <__aeabi_dmul>
 8017628:	a333      	add	r3, pc, #204	; (adr r3, 80176f8 <__kernel_cos+0x170>)
 801762a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801762e:	f7e8 fe3d 	bl	80002ac <__adddf3>
 8017632:	4622      	mov	r2, r4
 8017634:	462b      	mov	r3, r5
 8017636:	f7e8 ffef 	bl	8000618 <__aeabi_dmul>
 801763a:	4622      	mov	r2, r4
 801763c:	462b      	mov	r3, r5
 801763e:	f7e8 ffeb 	bl	8000618 <__aeabi_dmul>
 8017642:	ec53 2b18 	vmov	r2, r3, d8
 8017646:	4604      	mov	r4, r0
 8017648:	460d      	mov	r5, r1
 801764a:	4640      	mov	r0, r8
 801764c:	4649      	mov	r1, r9
 801764e:	f7e8 ffe3 	bl	8000618 <__aeabi_dmul>
 8017652:	460b      	mov	r3, r1
 8017654:	4602      	mov	r2, r0
 8017656:	4629      	mov	r1, r5
 8017658:	4620      	mov	r0, r4
 801765a:	f7e8 fe25 	bl	80002a8 <__aeabi_dsub>
 801765e:	4b29      	ldr	r3, [pc, #164]	; (8017704 <__kernel_cos+0x17c>)
 8017660:	429e      	cmp	r6, r3
 8017662:	4680      	mov	r8, r0
 8017664:	4689      	mov	r9, r1
 8017666:	dc11      	bgt.n	801768c <__kernel_cos+0x104>
 8017668:	4602      	mov	r2, r0
 801766a:	460b      	mov	r3, r1
 801766c:	4650      	mov	r0, sl
 801766e:	4659      	mov	r1, fp
 8017670:	f7e8 fe1a 	bl	80002a8 <__aeabi_dsub>
 8017674:	460b      	mov	r3, r1
 8017676:	4924      	ldr	r1, [pc, #144]	; (8017708 <__kernel_cos+0x180>)
 8017678:	4602      	mov	r2, r0
 801767a:	2000      	movs	r0, #0
 801767c:	f7e8 fe14 	bl	80002a8 <__aeabi_dsub>
 8017680:	ecbd 8b02 	vpop	{d8}
 8017684:	ec41 0b10 	vmov	d0, r0, r1
 8017688:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801768c:	4b1f      	ldr	r3, [pc, #124]	; (801770c <__kernel_cos+0x184>)
 801768e:	491e      	ldr	r1, [pc, #120]	; (8017708 <__kernel_cos+0x180>)
 8017690:	429e      	cmp	r6, r3
 8017692:	bfcc      	ite	gt
 8017694:	4d1e      	ldrgt	r5, [pc, #120]	; (8017710 <__kernel_cos+0x188>)
 8017696:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 801769a:	2400      	movs	r4, #0
 801769c:	4622      	mov	r2, r4
 801769e:	462b      	mov	r3, r5
 80176a0:	2000      	movs	r0, #0
 80176a2:	f7e8 fe01 	bl	80002a8 <__aeabi_dsub>
 80176a6:	4622      	mov	r2, r4
 80176a8:	4606      	mov	r6, r0
 80176aa:	460f      	mov	r7, r1
 80176ac:	462b      	mov	r3, r5
 80176ae:	4650      	mov	r0, sl
 80176b0:	4659      	mov	r1, fp
 80176b2:	f7e8 fdf9 	bl	80002a8 <__aeabi_dsub>
 80176b6:	4642      	mov	r2, r8
 80176b8:	464b      	mov	r3, r9
 80176ba:	f7e8 fdf5 	bl	80002a8 <__aeabi_dsub>
 80176be:	4602      	mov	r2, r0
 80176c0:	460b      	mov	r3, r1
 80176c2:	4630      	mov	r0, r6
 80176c4:	4639      	mov	r1, r7
 80176c6:	e7d9      	b.n	801767c <__kernel_cos+0xf4>
 80176c8:	2000      	movs	r0, #0
 80176ca:	490f      	ldr	r1, [pc, #60]	; (8017708 <__kernel_cos+0x180>)
 80176cc:	e7d8      	b.n	8017680 <__kernel_cos+0xf8>
 80176ce:	bf00      	nop
 80176d0:	be8838d4 	.word	0xbe8838d4
 80176d4:	bda8fae9 	.word	0xbda8fae9
 80176d8:	bdb4b1c4 	.word	0xbdb4b1c4
 80176dc:	3e21ee9e 	.word	0x3e21ee9e
 80176e0:	809c52ad 	.word	0x809c52ad
 80176e4:	3e927e4f 	.word	0x3e927e4f
 80176e8:	19cb1590 	.word	0x19cb1590
 80176ec:	3efa01a0 	.word	0x3efa01a0
 80176f0:	16c15177 	.word	0x16c15177
 80176f4:	3f56c16c 	.word	0x3f56c16c
 80176f8:	5555554c 	.word	0x5555554c
 80176fc:	3fa55555 	.word	0x3fa55555
 8017700:	3fe00000 	.word	0x3fe00000
 8017704:	3fd33332 	.word	0x3fd33332
 8017708:	3ff00000 	.word	0x3ff00000
 801770c:	3fe90000 	.word	0x3fe90000
 8017710:	3fd20000 	.word	0x3fd20000
 8017714:	00000000 	.word	0x00000000

08017718 <__kernel_rem_pio2>:
 8017718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801771c:	ed2d 8b02 	vpush	{d8}
 8017720:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8017724:	1ed4      	subs	r4, r2, #3
 8017726:	9308      	str	r3, [sp, #32]
 8017728:	9101      	str	r1, [sp, #4]
 801772a:	4bc5      	ldr	r3, [pc, #788]	; (8017a40 <__kernel_rem_pio2+0x328>)
 801772c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 801772e:	9009      	str	r0, [sp, #36]	; 0x24
 8017730:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017734:	9304      	str	r3, [sp, #16]
 8017736:	9b08      	ldr	r3, [sp, #32]
 8017738:	3b01      	subs	r3, #1
 801773a:	9307      	str	r3, [sp, #28]
 801773c:	2318      	movs	r3, #24
 801773e:	fb94 f4f3 	sdiv	r4, r4, r3
 8017742:	f06f 0317 	mvn.w	r3, #23
 8017746:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801774a:	fb04 3303 	mla	r3, r4, r3, r3
 801774e:	eb03 0a02 	add.w	sl, r3, r2
 8017752:	9b04      	ldr	r3, [sp, #16]
 8017754:	9a07      	ldr	r2, [sp, #28]
 8017756:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8017a30 <__kernel_rem_pio2+0x318>
 801775a:	eb03 0802 	add.w	r8, r3, r2
 801775e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8017760:	1aa7      	subs	r7, r4, r2
 8017762:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8017766:	ae22      	add	r6, sp, #136	; 0x88
 8017768:	2500      	movs	r5, #0
 801776a:	4545      	cmp	r5, r8
 801776c:	dd13      	ble.n	8017796 <__kernel_rem_pio2+0x7e>
 801776e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8017a30 <__kernel_rem_pio2+0x318>
 8017772:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8017776:	2600      	movs	r6, #0
 8017778:	9b04      	ldr	r3, [sp, #16]
 801777a:	429e      	cmp	r6, r3
 801777c:	dc32      	bgt.n	80177e4 <__kernel_rem_pio2+0xcc>
 801777e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017780:	9302      	str	r3, [sp, #8]
 8017782:	9b08      	ldr	r3, [sp, #32]
 8017784:	199d      	adds	r5, r3, r6
 8017786:	ab22      	add	r3, sp, #136	; 0x88
 8017788:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801778c:	9306      	str	r3, [sp, #24]
 801778e:	ec59 8b18 	vmov	r8, r9, d8
 8017792:	2700      	movs	r7, #0
 8017794:	e01f      	b.n	80177d6 <__kernel_rem_pio2+0xbe>
 8017796:	42ef      	cmn	r7, r5
 8017798:	d407      	bmi.n	80177aa <__kernel_rem_pio2+0x92>
 801779a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801779e:	f7e8 fed1 	bl	8000544 <__aeabi_i2d>
 80177a2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80177a6:	3501      	adds	r5, #1
 80177a8:	e7df      	b.n	801776a <__kernel_rem_pio2+0x52>
 80177aa:	ec51 0b18 	vmov	r0, r1, d8
 80177ae:	e7f8      	b.n	80177a2 <__kernel_rem_pio2+0x8a>
 80177b0:	9906      	ldr	r1, [sp, #24]
 80177b2:	9d02      	ldr	r5, [sp, #8]
 80177b4:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80177b8:	9106      	str	r1, [sp, #24]
 80177ba:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80177be:	9502      	str	r5, [sp, #8]
 80177c0:	f7e8 ff2a 	bl	8000618 <__aeabi_dmul>
 80177c4:	4602      	mov	r2, r0
 80177c6:	460b      	mov	r3, r1
 80177c8:	4640      	mov	r0, r8
 80177ca:	4649      	mov	r1, r9
 80177cc:	f7e8 fd6e 	bl	80002ac <__adddf3>
 80177d0:	3701      	adds	r7, #1
 80177d2:	4680      	mov	r8, r0
 80177d4:	4689      	mov	r9, r1
 80177d6:	9b07      	ldr	r3, [sp, #28]
 80177d8:	429f      	cmp	r7, r3
 80177da:	dde9      	ble.n	80177b0 <__kernel_rem_pio2+0x98>
 80177dc:	e8eb 8902 	strd	r8, r9, [fp], #8
 80177e0:	3601      	adds	r6, #1
 80177e2:	e7c9      	b.n	8017778 <__kernel_rem_pio2+0x60>
 80177e4:	9b04      	ldr	r3, [sp, #16]
 80177e6:	aa0e      	add	r2, sp, #56	; 0x38
 80177e8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80177ec:	930c      	str	r3, [sp, #48]	; 0x30
 80177ee:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80177f0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80177f4:	9c04      	ldr	r4, [sp, #16]
 80177f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80177f8:	ab9a      	add	r3, sp, #616	; 0x268
 80177fa:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 80177fe:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8017802:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017806:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 801780a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801780e:	ab9a      	add	r3, sp, #616	; 0x268
 8017810:	445b      	add	r3, fp
 8017812:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8017816:	2500      	movs	r5, #0
 8017818:	1b63      	subs	r3, r4, r5
 801781a:	2b00      	cmp	r3, #0
 801781c:	dc78      	bgt.n	8017910 <__kernel_rem_pio2+0x1f8>
 801781e:	4650      	mov	r0, sl
 8017820:	ec49 8b10 	vmov	d0, r8, r9
 8017824:	f000 fda8 	bl	8018378 <scalbn>
 8017828:	ec57 6b10 	vmov	r6, r7, d0
 801782c:	2200      	movs	r2, #0
 801782e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8017832:	ee10 0a10 	vmov	r0, s0
 8017836:	4639      	mov	r1, r7
 8017838:	f7e8 feee 	bl	8000618 <__aeabi_dmul>
 801783c:	ec41 0b10 	vmov	d0, r0, r1
 8017840:	f000 fd12 	bl	8018268 <floor>
 8017844:	2200      	movs	r2, #0
 8017846:	ec51 0b10 	vmov	r0, r1, d0
 801784a:	4b7e      	ldr	r3, [pc, #504]	; (8017a44 <__kernel_rem_pio2+0x32c>)
 801784c:	f7e8 fee4 	bl	8000618 <__aeabi_dmul>
 8017850:	4602      	mov	r2, r0
 8017852:	460b      	mov	r3, r1
 8017854:	4630      	mov	r0, r6
 8017856:	4639      	mov	r1, r7
 8017858:	f7e8 fd26 	bl	80002a8 <__aeabi_dsub>
 801785c:	460f      	mov	r7, r1
 801785e:	4606      	mov	r6, r0
 8017860:	f7e9 f98a 	bl	8000b78 <__aeabi_d2iz>
 8017864:	9006      	str	r0, [sp, #24]
 8017866:	f7e8 fe6d 	bl	8000544 <__aeabi_i2d>
 801786a:	4602      	mov	r2, r0
 801786c:	460b      	mov	r3, r1
 801786e:	4630      	mov	r0, r6
 8017870:	4639      	mov	r1, r7
 8017872:	f7e8 fd19 	bl	80002a8 <__aeabi_dsub>
 8017876:	f1ba 0f00 	cmp.w	sl, #0
 801787a:	4606      	mov	r6, r0
 801787c:	460f      	mov	r7, r1
 801787e:	dd6c      	ble.n	801795a <__kernel_rem_pio2+0x242>
 8017880:	1e62      	subs	r2, r4, #1
 8017882:	ab0e      	add	r3, sp, #56	; 0x38
 8017884:	f1ca 0118 	rsb	r1, sl, #24
 8017888:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801788c:	9d06      	ldr	r5, [sp, #24]
 801788e:	fa40 f301 	asr.w	r3, r0, r1
 8017892:	441d      	add	r5, r3
 8017894:	408b      	lsls	r3, r1
 8017896:	1ac0      	subs	r0, r0, r3
 8017898:	ab0e      	add	r3, sp, #56	; 0x38
 801789a:	9506      	str	r5, [sp, #24]
 801789c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80178a0:	f1ca 0317 	rsb	r3, sl, #23
 80178a4:	fa40 f303 	asr.w	r3, r0, r3
 80178a8:	9302      	str	r3, [sp, #8]
 80178aa:	9b02      	ldr	r3, [sp, #8]
 80178ac:	2b00      	cmp	r3, #0
 80178ae:	dd62      	ble.n	8017976 <__kernel_rem_pio2+0x25e>
 80178b0:	9b06      	ldr	r3, [sp, #24]
 80178b2:	2200      	movs	r2, #0
 80178b4:	3301      	adds	r3, #1
 80178b6:	9306      	str	r3, [sp, #24]
 80178b8:	4615      	mov	r5, r2
 80178ba:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80178be:	4294      	cmp	r4, r2
 80178c0:	f300 8095 	bgt.w	80179ee <__kernel_rem_pio2+0x2d6>
 80178c4:	f1ba 0f00 	cmp.w	sl, #0
 80178c8:	dd07      	ble.n	80178da <__kernel_rem_pio2+0x1c2>
 80178ca:	f1ba 0f01 	cmp.w	sl, #1
 80178ce:	f000 80a2 	beq.w	8017a16 <__kernel_rem_pio2+0x2fe>
 80178d2:	f1ba 0f02 	cmp.w	sl, #2
 80178d6:	f000 80c1 	beq.w	8017a5c <__kernel_rem_pio2+0x344>
 80178da:	9b02      	ldr	r3, [sp, #8]
 80178dc:	2b02      	cmp	r3, #2
 80178de:	d14a      	bne.n	8017976 <__kernel_rem_pio2+0x25e>
 80178e0:	4632      	mov	r2, r6
 80178e2:	463b      	mov	r3, r7
 80178e4:	2000      	movs	r0, #0
 80178e6:	4958      	ldr	r1, [pc, #352]	; (8017a48 <__kernel_rem_pio2+0x330>)
 80178e8:	f7e8 fcde 	bl	80002a8 <__aeabi_dsub>
 80178ec:	4606      	mov	r6, r0
 80178ee:	460f      	mov	r7, r1
 80178f0:	2d00      	cmp	r5, #0
 80178f2:	d040      	beq.n	8017976 <__kernel_rem_pio2+0x25e>
 80178f4:	4650      	mov	r0, sl
 80178f6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8017a38 <__kernel_rem_pio2+0x320>
 80178fa:	f000 fd3d 	bl	8018378 <scalbn>
 80178fe:	4630      	mov	r0, r6
 8017900:	4639      	mov	r1, r7
 8017902:	ec53 2b10 	vmov	r2, r3, d0
 8017906:	f7e8 fccf 	bl	80002a8 <__aeabi_dsub>
 801790a:	4606      	mov	r6, r0
 801790c:	460f      	mov	r7, r1
 801790e:	e032      	b.n	8017976 <__kernel_rem_pio2+0x25e>
 8017910:	2200      	movs	r2, #0
 8017912:	4b4e      	ldr	r3, [pc, #312]	; (8017a4c <__kernel_rem_pio2+0x334>)
 8017914:	4640      	mov	r0, r8
 8017916:	4649      	mov	r1, r9
 8017918:	f7e8 fe7e 	bl	8000618 <__aeabi_dmul>
 801791c:	f7e9 f92c 	bl	8000b78 <__aeabi_d2iz>
 8017920:	f7e8 fe10 	bl	8000544 <__aeabi_i2d>
 8017924:	2200      	movs	r2, #0
 8017926:	4b4a      	ldr	r3, [pc, #296]	; (8017a50 <__kernel_rem_pio2+0x338>)
 8017928:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801792c:	f7e8 fe74 	bl	8000618 <__aeabi_dmul>
 8017930:	4602      	mov	r2, r0
 8017932:	460b      	mov	r3, r1
 8017934:	4640      	mov	r0, r8
 8017936:	4649      	mov	r1, r9
 8017938:	f7e8 fcb6 	bl	80002a8 <__aeabi_dsub>
 801793c:	f7e9 f91c 	bl	8000b78 <__aeabi_d2iz>
 8017940:	ab0e      	add	r3, sp, #56	; 0x38
 8017942:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8017946:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 801794a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801794e:	f7e8 fcad 	bl	80002ac <__adddf3>
 8017952:	3501      	adds	r5, #1
 8017954:	4680      	mov	r8, r0
 8017956:	4689      	mov	r9, r1
 8017958:	e75e      	b.n	8017818 <__kernel_rem_pio2+0x100>
 801795a:	d105      	bne.n	8017968 <__kernel_rem_pio2+0x250>
 801795c:	1e63      	subs	r3, r4, #1
 801795e:	aa0e      	add	r2, sp, #56	; 0x38
 8017960:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8017964:	15c3      	asrs	r3, r0, #23
 8017966:	e79f      	b.n	80178a8 <__kernel_rem_pio2+0x190>
 8017968:	2200      	movs	r2, #0
 801796a:	4b3a      	ldr	r3, [pc, #232]	; (8017a54 <__kernel_rem_pio2+0x33c>)
 801796c:	f7e9 f8da 	bl	8000b24 <__aeabi_dcmpge>
 8017970:	2800      	cmp	r0, #0
 8017972:	d139      	bne.n	80179e8 <__kernel_rem_pio2+0x2d0>
 8017974:	9002      	str	r0, [sp, #8]
 8017976:	2200      	movs	r2, #0
 8017978:	2300      	movs	r3, #0
 801797a:	4630      	mov	r0, r6
 801797c:	4639      	mov	r1, r7
 801797e:	f7e9 f8b3 	bl	8000ae8 <__aeabi_dcmpeq>
 8017982:	2800      	cmp	r0, #0
 8017984:	f000 80c7 	beq.w	8017b16 <__kernel_rem_pio2+0x3fe>
 8017988:	1e65      	subs	r5, r4, #1
 801798a:	462b      	mov	r3, r5
 801798c:	2200      	movs	r2, #0
 801798e:	9904      	ldr	r1, [sp, #16]
 8017990:	428b      	cmp	r3, r1
 8017992:	da6a      	bge.n	8017a6a <__kernel_rem_pio2+0x352>
 8017994:	2a00      	cmp	r2, #0
 8017996:	f000 8088 	beq.w	8017aaa <__kernel_rem_pio2+0x392>
 801799a:	ab0e      	add	r3, sp, #56	; 0x38
 801799c:	f1aa 0a18 	sub.w	sl, sl, #24
 80179a0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80179a4:	2b00      	cmp	r3, #0
 80179a6:	f000 80b4 	beq.w	8017b12 <__kernel_rem_pio2+0x3fa>
 80179aa:	4650      	mov	r0, sl
 80179ac:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8017a38 <__kernel_rem_pio2+0x320>
 80179b0:	f000 fce2 	bl	8018378 <scalbn>
 80179b4:	00ec      	lsls	r4, r5, #3
 80179b6:	ab72      	add	r3, sp, #456	; 0x1c8
 80179b8:	191e      	adds	r6, r3, r4
 80179ba:	ec59 8b10 	vmov	r8, r9, d0
 80179be:	f106 0a08 	add.w	sl, r6, #8
 80179c2:	462f      	mov	r7, r5
 80179c4:	2f00      	cmp	r7, #0
 80179c6:	f280 80df 	bge.w	8017b88 <__kernel_rem_pio2+0x470>
 80179ca:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8017a30 <__kernel_rem_pio2+0x318>
 80179ce:	f04f 0a00 	mov.w	sl, #0
 80179d2:	eba5 030a 	sub.w	r3, r5, sl
 80179d6:	2b00      	cmp	r3, #0
 80179d8:	f2c0 810a 	blt.w	8017bf0 <__kernel_rem_pio2+0x4d8>
 80179dc:	f8df b078 	ldr.w	fp, [pc, #120]	; 8017a58 <__kernel_rem_pio2+0x340>
 80179e0:	ec59 8b18 	vmov	r8, r9, d8
 80179e4:	2700      	movs	r7, #0
 80179e6:	e0f5      	b.n	8017bd4 <__kernel_rem_pio2+0x4bc>
 80179e8:	2302      	movs	r3, #2
 80179ea:	9302      	str	r3, [sp, #8]
 80179ec:	e760      	b.n	80178b0 <__kernel_rem_pio2+0x198>
 80179ee:	ab0e      	add	r3, sp, #56	; 0x38
 80179f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80179f4:	b94d      	cbnz	r5, 8017a0a <__kernel_rem_pio2+0x2f2>
 80179f6:	b12b      	cbz	r3, 8017a04 <__kernel_rem_pio2+0x2ec>
 80179f8:	a80e      	add	r0, sp, #56	; 0x38
 80179fa:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80179fe:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8017a02:	2301      	movs	r3, #1
 8017a04:	3201      	adds	r2, #1
 8017a06:	461d      	mov	r5, r3
 8017a08:	e759      	b.n	80178be <__kernel_rem_pio2+0x1a6>
 8017a0a:	a80e      	add	r0, sp, #56	; 0x38
 8017a0c:	1acb      	subs	r3, r1, r3
 8017a0e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8017a12:	462b      	mov	r3, r5
 8017a14:	e7f6      	b.n	8017a04 <__kernel_rem_pio2+0x2ec>
 8017a16:	1e62      	subs	r2, r4, #1
 8017a18:	ab0e      	add	r3, sp, #56	; 0x38
 8017a1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017a1e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8017a22:	a90e      	add	r1, sp, #56	; 0x38
 8017a24:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8017a28:	e757      	b.n	80178da <__kernel_rem_pio2+0x1c2>
 8017a2a:	bf00      	nop
 8017a2c:	f3af 8000 	nop.w
	...
 8017a3c:	3ff00000 	.word	0x3ff00000
 8017a40:	08018ea8 	.word	0x08018ea8
 8017a44:	40200000 	.word	0x40200000
 8017a48:	3ff00000 	.word	0x3ff00000
 8017a4c:	3e700000 	.word	0x3e700000
 8017a50:	41700000 	.word	0x41700000
 8017a54:	3fe00000 	.word	0x3fe00000
 8017a58:	08018e68 	.word	0x08018e68
 8017a5c:	1e62      	subs	r2, r4, #1
 8017a5e:	ab0e      	add	r3, sp, #56	; 0x38
 8017a60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017a64:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8017a68:	e7db      	b.n	8017a22 <__kernel_rem_pio2+0x30a>
 8017a6a:	a90e      	add	r1, sp, #56	; 0x38
 8017a6c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8017a70:	3b01      	subs	r3, #1
 8017a72:	430a      	orrs	r2, r1
 8017a74:	e78b      	b.n	801798e <__kernel_rem_pio2+0x276>
 8017a76:	3301      	adds	r3, #1
 8017a78:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8017a7c:	2900      	cmp	r1, #0
 8017a7e:	d0fa      	beq.n	8017a76 <__kernel_rem_pio2+0x35e>
 8017a80:	9a08      	ldr	r2, [sp, #32]
 8017a82:	4422      	add	r2, r4
 8017a84:	00d2      	lsls	r2, r2, #3
 8017a86:	a922      	add	r1, sp, #136	; 0x88
 8017a88:	18e3      	adds	r3, r4, r3
 8017a8a:	9206      	str	r2, [sp, #24]
 8017a8c:	440a      	add	r2, r1
 8017a8e:	9302      	str	r3, [sp, #8]
 8017a90:	f10b 0108 	add.w	r1, fp, #8
 8017a94:	f102 0308 	add.w	r3, r2, #8
 8017a98:	1c66      	adds	r6, r4, #1
 8017a9a:	910a      	str	r1, [sp, #40]	; 0x28
 8017a9c:	2500      	movs	r5, #0
 8017a9e:	930d      	str	r3, [sp, #52]	; 0x34
 8017aa0:	9b02      	ldr	r3, [sp, #8]
 8017aa2:	42b3      	cmp	r3, r6
 8017aa4:	da04      	bge.n	8017ab0 <__kernel_rem_pio2+0x398>
 8017aa6:	461c      	mov	r4, r3
 8017aa8:	e6a6      	b.n	80177f8 <__kernel_rem_pio2+0xe0>
 8017aaa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017aac:	2301      	movs	r3, #1
 8017aae:	e7e3      	b.n	8017a78 <__kernel_rem_pio2+0x360>
 8017ab0:	9b06      	ldr	r3, [sp, #24]
 8017ab2:	18ef      	adds	r7, r5, r3
 8017ab4:	ab22      	add	r3, sp, #136	; 0x88
 8017ab6:	441f      	add	r7, r3
 8017ab8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017aba:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8017abe:	f7e8 fd41 	bl	8000544 <__aeabi_i2d>
 8017ac2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017ac4:	461c      	mov	r4, r3
 8017ac6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017ac8:	e9c7 0100 	strd	r0, r1, [r7]
 8017acc:	eb03 0b05 	add.w	fp, r3, r5
 8017ad0:	2700      	movs	r7, #0
 8017ad2:	f04f 0800 	mov.w	r8, #0
 8017ad6:	f04f 0900 	mov.w	r9, #0
 8017ada:	9b07      	ldr	r3, [sp, #28]
 8017adc:	429f      	cmp	r7, r3
 8017ade:	dd08      	ble.n	8017af2 <__kernel_rem_pio2+0x3da>
 8017ae0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017ae2:	aa72      	add	r2, sp, #456	; 0x1c8
 8017ae4:	18eb      	adds	r3, r5, r3
 8017ae6:	4413      	add	r3, r2
 8017ae8:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8017aec:	3601      	adds	r6, #1
 8017aee:	3508      	adds	r5, #8
 8017af0:	e7d6      	b.n	8017aa0 <__kernel_rem_pio2+0x388>
 8017af2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8017af6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8017afa:	f7e8 fd8d 	bl	8000618 <__aeabi_dmul>
 8017afe:	4602      	mov	r2, r0
 8017b00:	460b      	mov	r3, r1
 8017b02:	4640      	mov	r0, r8
 8017b04:	4649      	mov	r1, r9
 8017b06:	f7e8 fbd1 	bl	80002ac <__adddf3>
 8017b0a:	3701      	adds	r7, #1
 8017b0c:	4680      	mov	r8, r0
 8017b0e:	4689      	mov	r9, r1
 8017b10:	e7e3      	b.n	8017ada <__kernel_rem_pio2+0x3c2>
 8017b12:	3d01      	subs	r5, #1
 8017b14:	e741      	b.n	801799a <__kernel_rem_pio2+0x282>
 8017b16:	f1ca 0000 	rsb	r0, sl, #0
 8017b1a:	ec47 6b10 	vmov	d0, r6, r7
 8017b1e:	f000 fc2b 	bl	8018378 <scalbn>
 8017b22:	ec57 6b10 	vmov	r6, r7, d0
 8017b26:	2200      	movs	r2, #0
 8017b28:	4b99      	ldr	r3, [pc, #612]	; (8017d90 <__kernel_rem_pio2+0x678>)
 8017b2a:	ee10 0a10 	vmov	r0, s0
 8017b2e:	4639      	mov	r1, r7
 8017b30:	f7e8 fff8 	bl	8000b24 <__aeabi_dcmpge>
 8017b34:	b1f8      	cbz	r0, 8017b76 <__kernel_rem_pio2+0x45e>
 8017b36:	2200      	movs	r2, #0
 8017b38:	4b96      	ldr	r3, [pc, #600]	; (8017d94 <__kernel_rem_pio2+0x67c>)
 8017b3a:	4630      	mov	r0, r6
 8017b3c:	4639      	mov	r1, r7
 8017b3e:	f7e8 fd6b 	bl	8000618 <__aeabi_dmul>
 8017b42:	f7e9 f819 	bl	8000b78 <__aeabi_d2iz>
 8017b46:	4680      	mov	r8, r0
 8017b48:	f7e8 fcfc 	bl	8000544 <__aeabi_i2d>
 8017b4c:	2200      	movs	r2, #0
 8017b4e:	4b90      	ldr	r3, [pc, #576]	; (8017d90 <__kernel_rem_pio2+0x678>)
 8017b50:	f7e8 fd62 	bl	8000618 <__aeabi_dmul>
 8017b54:	460b      	mov	r3, r1
 8017b56:	4602      	mov	r2, r0
 8017b58:	4639      	mov	r1, r7
 8017b5a:	4630      	mov	r0, r6
 8017b5c:	f7e8 fba4 	bl	80002a8 <__aeabi_dsub>
 8017b60:	f7e9 f80a 	bl	8000b78 <__aeabi_d2iz>
 8017b64:	1c65      	adds	r5, r4, #1
 8017b66:	ab0e      	add	r3, sp, #56	; 0x38
 8017b68:	f10a 0a18 	add.w	sl, sl, #24
 8017b6c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8017b70:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8017b74:	e719      	b.n	80179aa <__kernel_rem_pio2+0x292>
 8017b76:	4630      	mov	r0, r6
 8017b78:	4639      	mov	r1, r7
 8017b7a:	f7e8 fffd 	bl	8000b78 <__aeabi_d2iz>
 8017b7e:	ab0e      	add	r3, sp, #56	; 0x38
 8017b80:	4625      	mov	r5, r4
 8017b82:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8017b86:	e710      	b.n	80179aa <__kernel_rem_pio2+0x292>
 8017b88:	ab0e      	add	r3, sp, #56	; 0x38
 8017b8a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8017b8e:	f7e8 fcd9 	bl	8000544 <__aeabi_i2d>
 8017b92:	4642      	mov	r2, r8
 8017b94:	464b      	mov	r3, r9
 8017b96:	f7e8 fd3f 	bl	8000618 <__aeabi_dmul>
 8017b9a:	2200      	movs	r2, #0
 8017b9c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8017ba0:	4b7c      	ldr	r3, [pc, #496]	; (8017d94 <__kernel_rem_pio2+0x67c>)
 8017ba2:	4640      	mov	r0, r8
 8017ba4:	4649      	mov	r1, r9
 8017ba6:	f7e8 fd37 	bl	8000618 <__aeabi_dmul>
 8017baa:	3f01      	subs	r7, #1
 8017bac:	4680      	mov	r8, r0
 8017bae:	4689      	mov	r9, r1
 8017bb0:	e708      	b.n	80179c4 <__kernel_rem_pio2+0x2ac>
 8017bb2:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8017bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017bba:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8017bbe:	f7e8 fd2b 	bl	8000618 <__aeabi_dmul>
 8017bc2:	4602      	mov	r2, r0
 8017bc4:	460b      	mov	r3, r1
 8017bc6:	4640      	mov	r0, r8
 8017bc8:	4649      	mov	r1, r9
 8017bca:	f7e8 fb6f 	bl	80002ac <__adddf3>
 8017bce:	3701      	adds	r7, #1
 8017bd0:	4680      	mov	r8, r0
 8017bd2:	4689      	mov	r9, r1
 8017bd4:	9b04      	ldr	r3, [sp, #16]
 8017bd6:	429f      	cmp	r7, r3
 8017bd8:	dc01      	bgt.n	8017bde <__kernel_rem_pio2+0x4c6>
 8017bda:	45ba      	cmp	sl, r7
 8017bdc:	dae9      	bge.n	8017bb2 <__kernel_rem_pio2+0x49a>
 8017bde:	ab4a      	add	r3, sp, #296	; 0x128
 8017be0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8017be4:	e9c3 8900 	strd	r8, r9, [r3]
 8017be8:	f10a 0a01 	add.w	sl, sl, #1
 8017bec:	3e08      	subs	r6, #8
 8017bee:	e6f0      	b.n	80179d2 <__kernel_rem_pio2+0x2ba>
 8017bf0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8017bf2:	2b03      	cmp	r3, #3
 8017bf4:	d85b      	bhi.n	8017cae <__kernel_rem_pio2+0x596>
 8017bf6:	e8df f003 	tbb	[pc, r3]
 8017bfa:	264a      	.short	0x264a
 8017bfc:	0226      	.short	0x0226
 8017bfe:	ab9a      	add	r3, sp, #616	; 0x268
 8017c00:	441c      	add	r4, r3
 8017c02:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8017c06:	46a2      	mov	sl, r4
 8017c08:	46ab      	mov	fp, r5
 8017c0a:	f1bb 0f00 	cmp.w	fp, #0
 8017c0e:	dc6c      	bgt.n	8017cea <__kernel_rem_pio2+0x5d2>
 8017c10:	46a2      	mov	sl, r4
 8017c12:	46ab      	mov	fp, r5
 8017c14:	f1bb 0f01 	cmp.w	fp, #1
 8017c18:	f300 8086 	bgt.w	8017d28 <__kernel_rem_pio2+0x610>
 8017c1c:	2000      	movs	r0, #0
 8017c1e:	2100      	movs	r1, #0
 8017c20:	2d01      	cmp	r5, #1
 8017c22:	f300 80a0 	bgt.w	8017d66 <__kernel_rem_pio2+0x64e>
 8017c26:	9b02      	ldr	r3, [sp, #8]
 8017c28:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8017c2c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8017c30:	2b00      	cmp	r3, #0
 8017c32:	f040 809e 	bne.w	8017d72 <__kernel_rem_pio2+0x65a>
 8017c36:	9b01      	ldr	r3, [sp, #4]
 8017c38:	e9c3 7800 	strd	r7, r8, [r3]
 8017c3c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8017c40:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8017c44:	e033      	b.n	8017cae <__kernel_rem_pio2+0x596>
 8017c46:	3408      	adds	r4, #8
 8017c48:	ab4a      	add	r3, sp, #296	; 0x128
 8017c4a:	441c      	add	r4, r3
 8017c4c:	462e      	mov	r6, r5
 8017c4e:	2000      	movs	r0, #0
 8017c50:	2100      	movs	r1, #0
 8017c52:	2e00      	cmp	r6, #0
 8017c54:	da3a      	bge.n	8017ccc <__kernel_rem_pio2+0x5b4>
 8017c56:	9b02      	ldr	r3, [sp, #8]
 8017c58:	2b00      	cmp	r3, #0
 8017c5a:	d03d      	beq.n	8017cd8 <__kernel_rem_pio2+0x5c0>
 8017c5c:	4602      	mov	r2, r0
 8017c5e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017c62:	9c01      	ldr	r4, [sp, #4]
 8017c64:	e9c4 2300 	strd	r2, r3, [r4]
 8017c68:	4602      	mov	r2, r0
 8017c6a:	460b      	mov	r3, r1
 8017c6c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8017c70:	f7e8 fb1a 	bl	80002a8 <__aeabi_dsub>
 8017c74:	ae4c      	add	r6, sp, #304	; 0x130
 8017c76:	2401      	movs	r4, #1
 8017c78:	42a5      	cmp	r5, r4
 8017c7a:	da30      	bge.n	8017cde <__kernel_rem_pio2+0x5c6>
 8017c7c:	9b02      	ldr	r3, [sp, #8]
 8017c7e:	b113      	cbz	r3, 8017c86 <__kernel_rem_pio2+0x56e>
 8017c80:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017c84:	4619      	mov	r1, r3
 8017c86:	9b01      	ldr	r3, [sp, #4]
 8017c88:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8017c8c:	e00f      	b.n	8017cae <__kernel_rem_pio2+0x596>
 8017c8e:	ab9a      	add	r3, sp, #616	; 0x268
 8017c90:	441c      	add	r4, r3
 8017c92:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8017c96:	2000      	movs	r0, #0
 8017c98:	2100      	movs	r1, #0
 8017c9a:	2d00      	cmp	r5, #0
 8017c9c:	da10      	bge.n	8017cc0 <__kernel_rem_pio2+0x5a8>
 8017c9e:	9b02      	ldr	r3, [sp, #8]
 8017ca0:	b113      	cbz	r3, 8017ca8 <__kernel_rem_pio2+0x590>
 8017ca2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017ca6:	4619      	mov	r1, r3
 8017ca8:	9b01      	ldr	r3, [sp, #4]
 8017caa:	e9c3 0100 	strd	r0, r1, [r3]
 8017cae:	9b06      	ldr	r3, [sp, #24]
 8017cb0:	f003 0007 	and.w	r0, r3, #7
 8017cb4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8017cb8:	ecbd 8b02 	vpop	{d8}
 8017cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017cc0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8017cc4:	f7e8 faf2 	bl	80002ac <__adddf3>
 8017cc8:	3d01      	subs	r5, #1
 8017cca:	e7e6      	b.n	8017c9a <__kernel_rem_pio2+0x582>
 8017ccc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8017cd0:	f7e8 faec 	bl	80002ac <__adddf3>
 8017cd4:	3e01      	subs	r6, #1
 8017cd6:	e7bc      	b.n	8017c52 <__kernel_rem_pio2+0x53a>
 8017cd8:	4602      	mov	r2, r0
 8017cda:	460b      	mov	r3, r1
 8017cdc:	e7c1      	b.n	8017c62 <__kernel_rem_pio2+0x54a>
 8017cde:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8017ce2:	f7e8 fae3 	bl	80002ac <__adddf3>
 8017ce6:	3401      	adds	r4, #1
 8017ce8:	e7c6      	b.n	8017c78 <__kernel_rem_pio2+0x560>
 8017cea:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8017cee:	ed3a 7b02 	vldmdb	sl!, {d7}
 8017cf2:	4640      	mov	r0, r8
 8017cf4:	ec53 2b17 	vmov	r2, r3, d7
 8017cf8:	4649      	mov	r1, r9
 8017cfa:	ed8d 7b04 	vstr	d7, [sp, #16]
 8017cfe:	f7e8 fad5 	bl	80002ac <__adddf3>
 8017d02:	4602      	mov	r2, r0
 8017d04:	460b      	mov	r3, r1
 8017d06:	4606      	mov	r6, r0
 8017d08:	460f      	mov	r7, r1
 8017d0a:	4640      	mov	r0, r8
 8017d0c:	4649      	mov	r1, r9
 8017d0e:	f7e8 facb 	bl	80002a8 <__aeabi_dsub>
 8017d12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017d16:	f7e8 fac9 	bl	80002ac <__adddf3>
 8017d1a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017d1e:	e9ca 0100 	strd	r0, r1, [sl]
 8017d22:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8017d26:	e770      	b.n	8017c0a <__kernel_rem_pio2+0x4f2>
 8017d28:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8017d2c:	ed3a 7b02 	vldmdb	sl!, {d7}
 8017d30:	4630      	mov	r0, r6
 8017d32:	ec53 2b17 	vmov	r2, r3, d7
 8017d36:	4639      	mov	r1, r7
 8017d38:	ed8d 7b04 	vstr	d7, [sp, #16]
 8017d3c:	f7e8 fab6 	bl	80002ac <__adddf3>
 8017d40:	4602      	mov	r2, r0
 8017d42:	460b      	mov	r3, r1
 8017d44:	4680      	mov	r8, r0
 8017d46:	4689      	mov	r9, r1
 8017d48:	4630      	mov	r0, r6
 8017d4a:	4639      	mov	r1, r7
 8017d4c:	f7e8 faac 	bl	80002a8 <__aeabi_dsub>
 8017d50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017d54:	f7e8 faaa 	bl	80002ac <__adddf3>
 8017d58:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017d5c:	e9ca 0100 	strd	r0, r1, [sl]
 8017d60:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8017d64:	e756      	b.n	8017c14 <__kernel_rem_pio2+0x4fc>
 8017d66:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8017d6a:	f7e8 fa9f 	bl	80002ac <__adddf3>
 8017d6e:	3d01      	subs	r5, #1
 8017d70:	e756      	b.n	8017c20 <__kernel_rem_pio2+0x508>
 8017d72:	9b01      	ldr	r3, [sp, #4]
 8017d74:	9a01      	ldr	r2, [sp, #4]
 8017d76:	601f      	str	r7, [r3, #0]
 8017d78:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8017d7c:	605c      	str	r4, [r3, #4]
 8017d7e:	609d      	str	r5, [r3, #8]
 8017d80:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8017d84:	60d3      	str	r3, [r2, #12]
 8017d86:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017d8a:	6110      	str	r0, [r2, #16]
 8017d8c:	6153      	str	r3, [r2, #20]
 8017d8e:	e78e      	b.n	8017cae <__kernel_rem_pio2+0x596>
 8017d90:	41700000 	.word	0x41700000
 8017d94:	3e700000 	.word	0x3e700000

08017d98 <__kernel_sin>:
 8017d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d9c:	ec55 4b10 	vmov	r4, r5, d0
 8017da0:	b085      	sub	sp, #20
 8017da2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8017da6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8017daa:	ed8d 1b00 	vstr	d1, [sp]
 8017dae:	9002      	str	r0, [sp, #8]
 8017db0:	da06      	bge.n	8017dc0 <__kernel_sin+0x28>
 8017db2:	ee10 0a10 	vmov	r0, s0
 8017db6:	4629      	mov	r1, r5
 8017db8:	f7e8 fede 	bl	8000b78 <__aeabi_d2iz>
 8017dbc:	2800      	cmp	r0, #0
 8017dbe:	d051      	beq.n	8017e64 <__kernel_sin+0xcc>
 8017dc0:	4622      	mov	r2, r4
 8017dc2:	462b      	mov	r3, r5
 8017dc4:	4620      	mov	r0, r4
 8017dc6:	4629      	mov	r1, r5
 8017dc8:	f7e8 fc26 	bl	8000618 <__aeabi_dmul>
 8017dcc:	4682      	mov	sl, r0
 8017dce:	468b      	mov	fp, r1
 8017dd0:	4602      	mov	r2, r0
 8017dd2:	460b      	mov	r3, r1
 8017dd4:	4620      	mov	r0, r4
 8017dd6:	4629      	mov	r1, r5
 8017dd8:	f7e8 fc1e 	bl	8000618 <__aeabi_dmul>
 8017ddc:	a341      	add	r3, pc, #260	; (adr r3, 8017ee4 <__kernel_sin+0x14c>)
 8017dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017de2:	4680      	mov	r8, r0
 8017de4:	4689      	mov	r9, r1
 8017de6:	4650      	mov	r0, sl
 8017de8:	4659      	mov	r1, fp
 8017dea:	f7e8 fc15 	bl	8000618 <__aeabi_dmul>
 8017dee:	a33f      	add	r3, pc, #252	; (adr r3, 8017eec <__kernel_sin+0x154>)
 8017df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017df4:	f7e8 fa58 	bl	80002a8 <__aeabi_dsub>
 8017df8:	4652      	mov	r2, sl
 8017dfa:	465b      	mov	r3, fp
 8017dfc:	f7e8 fc0c 	bl	8000618 <__aeabi_dmul>
 8017e00:	a33c      	add	r3, pc, #240	; (adr r3, 8017ef4 <__kernel_sin+0x15c>)
 8017e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e06:	f7e8 fa51 	bl	80002ac <__adddf3>
 8017e0a:	4652      	mov	r2, sl
 8017e0c:	465b      	mov	r3, fp
 8017e0e:	f7e8 fc03 	bl	8000618 <__aeabi_dmul>
 8017e12:	a33a      	add	r3, pc, #232	; (adr r3, 8017efc <__kernel_sin+0x164>)
 8017e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e18:	f7e8 fa46 	bl	80002a8 <__aeabi_dsub>
 8017e1c:	4652      	mov	r2, sl
 8017e1e:	465b      	mov	r3, fp
 8017e20:	f7e8 fbfa 	bl	8000618 <__aeabi_dmul>
 8017e24:	a337      	add	r3, pc, #220	; (adr r3, 8017f04 <__kernel_sin+0x16c>)
 8017e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e2a:	f7e8 fa3f 	bl	80002ac <__adddf3>
 8017e2e:	9b02      	ldr	r3, [sp, #8]
 8017e30:	4606      	mov	r6, r0
 8017e32:	460f      	mov	r7, r1
 8017e34:	b9db      	cbnz	r3, 8017e6e <__kernel_sin+0xd6>
 8017e36:	4602      	mov	r2, r0
 8017e38:	460b      	mov	r3, r1
 8017e3a:	4650      	mov	r0, sl
 8017e3c:	4659      	mov	r1, fp
 8017e3e:	f7e8 fbeb 	bl	8000618 <__aeabi_dmul>
 8017e42:	a325      	add	r3, pc, #148	; (adr r3, 8017ed8 <__kernel_sin+0x140>)
 8017e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e48:	f7e8 fa2e 	bl	80002a8 <__aeabi_dsub>
 8017e4c:	4642      	mov	r2, r8
 8017e4e:	464b      	mov	r3, r9
 8017e50:	f7e8 fbe2 	bl	8000618 <__aeabi_dmul>
 8017e54:	4602      	mov	r2, r0
 8017e56:	460b      	mov	r3, r1
 8017e58:	4620      	mov	r0, r4
 8017e5a:	4629      	mov	r1, r5
 8017e5c:	f7e8 fa26 	bl	80002ac <__adddf3>
 8017e60:	4604      	mov	r4, r0
 8017e62:	460d      	mov	r5, r1
 8017e64:	ec45 4b10 	vmov	d0, r4, r5
 8017e68:	b005      	add	sp, #20
 8017e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e6e:	2200      	movs	r2, #0
 8017e70:	4b1b      	ldr	r3, [pc, #108]	; (8017ee0 <__kernel_sin+0x148>)
 8017e72:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017e76:	f7e8 fbcf 	bl	8000618 <__aeabi_dmul>
 8017e7a:	4632      	mov	r2, r6
 8017e7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017e80:	463b      	mov	r3, r7
 8017e82:	4640      	mov	r0, r8
 8017e84:	4649      	mov	r1, r9
 8017e86:	f7e8 fbc7 	bl	8000618 <__aeabi_dmul>
 8017e8a:	4602      	mov	r2, r0
 8017e8c:	460b      	mov	r3, r1
 8017e8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017e92:	f7e8 fa09 	bl	80002a8 <__aeabi_dsub>
 8017e96:	4652      	mov	r2, sl
 8017e98:	465b      	mov	r3, fp
 8017e9a:	f7e8 fbbd 	bl	8000618 <__aeabi_dmul>
 8017e9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017ea2:	f7e8 fa01 	bl	80002a8 <__aeabi_dsub>
 8017ea6:	a30c      	add	r3, pc, #48	; (adr r3, 8017ed8 <__kernel_sin+0x140>)
 8017ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017eac:	4606      	mov	r6, r0
 8017eae:	460f      	mov	r7, r1
 8017eb0:	4640      	mov	r0, r8
 8017eb2:	4649      	mov	r1, r9
 8017eb4:	f7e8 fbb0 	bl	8000618 <__aeabi_dmul>
 8017eb8:	4602      	mov	r2, r0
 8017eba:	460b      	mov	r3, r1
 8017ebc:	4630      	mov	r0, r6
 8017ebe:	4639      	mov	r1, r7
 8017ec0:	f7e8 f9f4 	bl	80002ac <__adddf3>
 8017ec4:	4602      	mov	r2, r0
 8017ec6:	460b      	mov	r3, r1
 8017ec8:	4620      	mov	r0, r4
 8017eca:	4629      	mov	r1, r5
 8017ecc:	f7e8 f9ec 	bl	80002a8 <__aeabi_dsub>
 8017ed0:	e7c6      	b.n	8017e60 <__kernel_sin+0xc8>
 8017ed2:	bf00      	nop
 8017ed4:	f3af 8000 	nop.w
 8017ed8:	55555549 	.word	0x55555549
 8017edc:	3fc55555 	.word	0x3fc55555
 8017ee0:	3fe00000 	.word	0x3fe00000
 8017ee4:	5acfd57c 	.word	0x5acfd57c
 8017ee8:	3de5d93a 	.word	0x3de5d93a
 8017eec:	8a2b9ceb 	.word	0x8a2b9ceb
 8017ef0:	3e5ae5e6 	.word	0x3e5ae5e6
 8017ef4:	57b1fe7d 	.word	0x57b1fe7d
 8017ef8:	3ec71de3 	.word	0x3ec71de3
 8017efc:	19c161d5 	.word	0x19c161d5
 8017f00:	3f2a01a0 	.word	0x3f2a01a0
 8017f04:	1110f8a6 	.word	0x1110f8a6
 8017f08:	3f811111 	.word	0x3f811111
 8017f0c:	00000000 	.word	0x00000000

08017f10 <atan>:
 8017f10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f14:	ec55 4b10 	vmov	r4, r5, d0
 8017f18:	4bc3      	ldr	r3, [pc, #780]	; (8018228 <atan+0x318>)
 8017f1a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8017f1e:	429e      	cmp	r6, r3
 8017f20:	46ab      	mov	fp, r5
 8017f22:	dd18      	ble.n	8017f56 <atan+0x46>
 8017f24:	4bc1      	ldr	r3, [pc, #772]	; (801822c <atan+0x31c>)
 8017f26:	429e      	cmp	r6, r3
 8017f28:	dc01      	bgt.n	8017f2e <atan+0x1e>
 8017f2a:	d109      	bne.n	8017f40 <atan+0x30>
 8017f2c:	b144      	cbz	r4, 8017f40 <atan+0x30>
 8017f2e:	4622      	mov	r2, r4
 8017f30:	462b      	mov	r3, r5
 8017f32:	4620      	mov	r0, r4
 8017f34:	4629      	mov	r1, r5
 8017f36:	f7e8 f9b9 	bl	80002ac <__adddf3>
 8017f3a:	4604      	mov	r4, r0
 8017f3c:	460d      	mov	r5, r1
 8017f3e:	e006      	b.n	8017f4e <atan+0x3e>
 8017f40:	f1bb 0f00 	cmp.w	fp, #0
 8017f44:	f340 8131 	ble.w	80181aa <atan+0x29a>
 8017f48:	a59b      	add	r5, pc, #620	; (adr r5, 80181b8 <atan+0x2a8>)
 8017f4a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8017f4e:	ec45 4b10 	vmov	d0, r4, r5
 8017f52:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f56:	4bb6      	ldr	r3, [pc, #728]	; (8018230 <atan+0x320>)
 8017f58:	429e      	cmp	r6, r3
 8017f5a:	dc14      	bgt.n	8017f86 <atan+0x76>
 8017f5c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8017f60:	429e      	cmp	r6, r3
 8017f62:	dc0d      	bgt.n	8017f80 <atan+0x70>
 8017f64:	a396      	add	r3, pc, #600	; (adr r3, 80181c0 <atan+0x2b0>)
 8017f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f6a:	ee10 0a10 	vmov	r0, s0
 8017f6e:	4629      	mov	r1, r5
 8017f70:	f7e8 f99c 	bl	80002ac <__adddf3>
 8017f74:	2200      	movs	r2, #0
 8017f76:	4baf      	ldr	r3, [pc, #700]	; (8018234 <atan+0x324>)
 8017f78:	f7e8 fdde 	bl	8000b38 <__aeabi_dcmpgt>
 8017f7c:	2800      	cmp	r0, #0
 8017f7e:	d1e6      	bne.n	8017f4e <atan+0x3e>
 8017f80:	f04f 3aff 	mov.w	sl, #4294967295
 8017f84:	e02b      	b.n	8017fde <atan+0xce>
 8017f86:	f000 f963 	bl	8018250 <fabs>
 8017f8a:	4bab      	ldr	r3, [pc, #684]	; (8018238 <atan+0x328>)
 8017f8c:	429e      	cmp	r6, r3
 8017f8e:	ec55 4b10 	vmov	r4, r5, d0
 8017f92:	f300 80bf 	bgt.w	8018114 <atan+0x204>
 8017f96:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8017f9a:	429e      	cmp	r6, r3
 8017f9c:	f300 80a0 	bgt.w	80180e0 <atan+0x1d0>
 8017fa0:	ee10 2a10 	vmov	r2, s0
 8017fa4:	ee10 0a10 	vmov	r0, s0
 8017fa8:	462b      	mov	r3, r5
 8017faa:	4629      	mov	r1, r5
 8017fac:	f7e8 f97e 	bl	80002ac <__adddf3>
 8017fb0:	2200      	movs	r2, #0
 8017fb2:	4ba0      	ldr	r3, [pc, #640]	; (8018234 <atan+0x324>)
 8017fb4:	f7e8 f978 	bl	80002a8 <__aeabi_dsub>
 8017fb8:	2200      	movs	r2, #0
 8017fba:	4606      	mov	r6, r0
 8017fbc:	460f      	mov	r7, r1
 8017fbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017fc2:	4620      	mov	r0, r4
 8017fc4:	4629      	mov	r1, r5
 8017fc6:	f7e8 f971 	bl	80002ac <__adddf3>
 8017fca:	4602      	mov	r2, r0
 8017fcc:	460b      	mov	r3, r1
 8017fce:	4630      	mov	r0, r6
 8017fd0:	4639      	mov	r1, r7
 8017fd2:	f7e8 fc4b 	bl	800086c <__aeabi_ddiv>
 8017fd6:	f04f 0a00 	mov.w	sl, #0
 8017fda:	4604      	mov	r4, r0
 8017fdc:	460d      	mov	r5, r1
 8017fde:	4622      	mov	r2, r4
 8017fe0:	462b      	mov	r3, r5
 8017fe2:	4620      	mov	r0, r4
 8017fe4:	4629      	mov	r1, r5
 8017fe6:	f7e8 fb17 	bl	8000618 <__aeabi_dmul>
 8017fea:	4602      	mov	r2, r0
 8017fec:	460b      	mov	r3, r1
 8017fee:	4680      	mov	r8, r0
 8017ff0:	4689      	mov	r9, r1
 8017ff2:	f7e8 fb11 	bl	8000618 <__aeabi_dmul>
 8017ff6:	a374      	add	r3, pc, #464	; (adr r3, 80181c8 <atan+0x2b8>)
 8017ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ffc:	4606      	mov	r6, r0
 8017ffe:	460f      	mov	r7, r1
 8018000:	f7e8 fb0a 	bl	8000618 <__aeabi_dmul>
 8018004:	a372      	add	r3, pc, #456	; (adr r3, 80181d0 <atan+0x2c0>)
 8018006:	e9d3 2300 	ldrd	r2, r3, [r3]
 801800a:	f7e8 f94f 	bl	80002ac <__adddf3>
 801800e:	4632      	mov	r2, r6
 8018010:	463b      	mov	r3, r7
 8018012:	f7e8 fb01 	bl	8000618 <__aeabi_dmul>
 8018016:	a370      	add	r3, pc, #448	; (adr r3, 80181d8 <atan+0x2c8>)
 8018018:	e9d3 2300 	ldrd	r2, r3, [r3]
 801801c:	f7e8 f946 	bl	80002ac <__adddf3>
 8018020:	4632      	mov	r2, r6
 8018022:	463b      	mov	r3, r7
 8018024:	f7e8 faf8 	bl	8000618 <__aeabi_dmul>
 8018028:	a36d      	add	r3, pc, #436	; (adr r3, 80181e0 <atan+0x2d0>)
 801802a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801802e:	f7e8 f93d 	bl	80002ac <__adddf3>
 8018032:	4632      	mov	r2, r6
 8018034:	463b      	mov	r3, r7
 8018036:	f7e8 faef 	bl	8000618 <__aeabi_dmul>
 801803a:	a36b      	add	r3, pc, #428	; (adr r3, 80181e8 <atan+0x2d8>)
 801803c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018040:	f7e8 f934 	bl	80002ac <__adddf3>
 8018044:	4632      	mov	r2, r6
 8018046:	463b      	mov	r3, r7
 8018048:	f7e8 fae6 	bl	8000618 <__aeabi_dmul>
 801804c:	a368      	add	r3, pc, #416	; (adr r3, 80181f0 <atan+0x2e0>)
 801804e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018052:	f7e8 f92b 	bl	80002ac <__adddf3>
 8018056:	4642      	mov	r2, r8
 8018058:	464b      	mov	r3, r9
 801805a:	f7e8 fadd 	bl	8000618 <__aeabi_dmul>
 801805e:	a366      	add	r3, pc, #408	; (adr r3, 80181f8 <atan+0x2e8>)
 8018060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018064:	4680      	mov	r8, r0
 8018066:	4689      	mov	r9, r1
 8018068:	4630      	mov	r0, r6
 801806a:	4639      	mov	r1, r7
 801806c:	f7e8 fad4 	bl	8000618 <__aeabi_dmul>
 8018070:	a363      	add	r3, pc, #396	; (adr r3, 8018200 <atan+0x2f0>)
 8018072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018076:	f7e8 f917 	bl	80002a8 <__aeabi_dsub>
 801807a:	4632      	mov	r2, r6
 801807c:	463b      	mov	r3, r7
 801807e:	f7e8 facb 	bl	8000618 <__aeabi_dmul>
 8018082:	a361      	add	r3, pc, #388	; (adr r3, 8018208 <atan+0x2f8>)
 8018084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018088:	f7e8 f90e 	bl	80002a8 <__aeabi_dsub>
 801808c:	4632      	mov	r2, r6
 801808e:	463b      	mov	r3, r7
 8018090:	f7e8 fac2 	bl	8000618 <__aeabi_dmul>
 8018094:	a35e      	add	r3, pc, #376	; (adr r3, 8018210 <atan+0x300>)
 8018096:	e9d3 2300 	ldrd	r2, r3, [r3]
 801809a:	f7e8 f905 	bl	80002a8 <__aeabi_dsub>
 801809e:	4632      	mov	r2, r6
 80180a0:	463b      	mov	r3, r7
 80180a2:	f7e8 fab9 	bl	8000618 <__aeabi_dmul>
 80180a6:	a35c      	add	r3, pc, #368	; (adr r3, 8018218 <atan+0x308>)
 80180a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180ac:	f7e8 f8fc 	bl	80002a8 <__aeabi_dsub>
 80180b0:	4632      	mov	r2, r6
 80180b2:	463b      	mov	r3, r7
 80180b4:	f7e8 fab0 	bl	8000618 <__aeabi_dmul>
 80180b8:	4602      	mov	r2, r0
 80180ba:	460b      	mov	r3, r1
 80180bc:	4640      	mov	r0, r8
 80180be:	4649      	mov	r1, r9
 80180c0:	f7e8 f8f4 	bl	80002ac <__adddf3>
 80180c4:	4622      	mov	r2, r4
 80180c6:	462b      	mov	r3, r5
 80180c8:	f7e8 faa6 	bl	8000618 <__aeabi_dmul>
 80180cc:	f1ba 3fff 	cmp.w	sl, #4294967295
 80180d0:	4602      	mov	r2, r0
 80180d2:	460b      	mov	r3, r1
 80180d4:	d14b      	bne.n	801816e <atan+0x25e>
 80180d6:	4620      	mov	r0, r4
 80180d8:	4629      	mov	r1, r5
 80180da:	f7e8 f8e5 	bl	80002a8 <__aeabi_dsub>
 80180de:	e72c      	b.n	8017f3a <atan+0x2a>
 80180e0:	ee10 0a10 	vmov	r0, s0
 80180e4:	2200      	movs	r2, #0
 80180e6:	4b53      	ldr	r3, [pc, #332]	; (8018234 <atan+0x324>)
 80180e8:	4629      	mov	r1, r5
 80180ea:	f7e8 f8dd 	bl	80002a8 <__aeabi_dsub>
 80180ee:	2200      	movs	r2, #0
 80180f0:	4606      	mov	r6, r0
 80180f2:	460f      	mov	r7, r1
 80180f4:	4b4f      	ldr	r3, [pc, #316]	; (8018234 <atan+0x324>)
 80180f6:	4620      	mov	r0, r4
 80180f8:	4629      	mov	r1, r5
 80180fa:	f7e8 f8d7 	bl	80002ac <__adddf3>
 80180fe:	4602      	mov	r2, r0
 8018100:	460b      	mov	r3, r1
 8018102:	4630      	mov	r0, r6
 8018104:	4639      	mov	r1, r7
 8018106:	f7e8 fbb1 	bl	800086c <__aeabi_ddiv>
 801810a:	f04f 0a01 	mov.w	sl, #1
 801810e:	4604      	mov	r4, r0
 8018110:	460d      	mov	r5, r1
 8018112:	e764      	b.n	8017fde <atan+0xce>
 8018114:	4b49      	ldr	r3, [pc, #292]	; (801823c <atan+0x32c>)
 8018116:	429e      	cmp	r6, r3
 8018118:	dc1d      	bgt.n	8018156 <atan+0x246>
 801811a:	ee10 0a10 	vmov	r0, s0
 801811e:	2200      	movs	r2, #0
 8018120:	4b47      	ldr	r3, [pc, #284]	; (8018240 <atan+0x330>)
 8018122:	4629      	mov	r1, r5
 8018124:	f7e8 f8c0 	bl	80002a8 <__aeabi_dsub>
 8018128:	2200      	movs	r2, #0
 801812a:	4606      	mov	r6, r0
 801812c:	460f      	mov	r7, r1
 801812e:	4b44      	ldr	r3, [pc, #272]	; (8018240 <atan+0x330>)
 8018130:	4620      	mov	r0, r4
 8018132:	4629      	mov	r1, r5
 8018134:	f7e8 fa70 	bl	8000618 <__aeabi_dmul>
 8018138:	2200      	movs	r2, #0
 801813a:	4b3e      	ldr	r3, [pc, #248]	; (8018234 <atan+0x324>)
 801813c:	f7e8 f8b6 	bl	80002ac <__adddf3>
 8018140:	4602      	mov	r2, r0
 8018142:	460b      	mov	r3, r1
 8018144:	4630      	mov	r0, r6
 8018146:	4639      	mov	r1, r7
 8018148:	f7e8 fb90 	bl	800086c <__aeabi_ddiv>
 801814c:	f04f 0a02 	mov.w	sl, #2
 8018150:	4604      	mov	r4, r0
 8018152:	460d      	mov	r5, r1
 8018154:	e743      	b.n	8017fde <atan+0xce>
 8018156:	462b      	mov	r3, r5
 8018158:	ee10 2a10 	vmov	r2, s0
 801815c:	2000      	movs	r0, #0
 801815e:	4939      	ldr	r1, [pc, #228]	; (8018244 <atan+0x334>)
 8018160:	f7e8 fb84 	bl	800086c <__aeabi_ddiv>
 8018164:	f04f 0a03 	mov.w	sl, #3
 8018168:	4604      	mov	r4, r0
 801816a:	460d      	mov	r5, r1
 801816c:	e737      	b.n	8017fde <atan+0xce>
 801816e:	4b36      	ldr	r3, [pc, #216]	; (8018248 <atan+0x338>)
 8018170:	4e36      	ldr	r6, [pc, #216]	; (801824c <atan+0x33c>)
 8018172:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8018176:	4456      	add	r6, sl
 8018178:	449a      	add	sl, r3
 801817a:	e9da 2300 	ldrd	r2, r3, [sl]
 801817e:	f7e8 f893 	bl	80002a8 <__aeabi_dsub>
 8018182:	4622      	mov	r2, r4
 8018184:	462b      	mov	r3, r5
 8018186:	f7e8 f88f 	bl	80002a8 <__aeabi_dsub>
 801818a:	4602      	mov	r2, r0
 801818c:	460b      	mov	r3, r1
 801818e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8018192:	f7e8 f889 	bl	80002a8 <__aeabi_dsub>
 8018196:	f1bb 0f00 	cmp.w	fp, #0
 801819a:	4604      	mov	r4, r0
 801819c:	460d      	mov	r5, r1
 801819e:	f6bf aed6 	bge.w	8017f4e <atan+0x3e>
 80181a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80181a6:	461d      	mov	r5, r3
 80181a8:	e6d1      	b.n	8017f4e <atan+0x3e>
 80181aa:	a51d      	add	r5, pc, #116	; (adr r5, 8018220 <atan+0x310>)
 80181ac:	e9d5 4500 	ldrd	r4, r5, [r5]
 80181b0:	e6cd      	b.n	8017f4e <atan+0x3e>
 80181b2:	bf00      	nop
 80181b4:	f3af 8000 	nop.w
 80181b8:	54442d18 	.word	0x54442d18
 80181bc:	3ff921fb 	.word	0x3ff921fb
 80181c0:	8800759c 	.word	0x8800759c
 80181c4:	7e37e43c 	.word	0x7e37e43c
 80181c8:	e322da11 	.word	0xe322da11
 80181cc:	3f90ad3a 	.word	0x3f90ad3a
 80181d0:	24760deb 	.word	0x24760deb
 80181d4:	3fa97b4b 	.word	0x3fa97b4b
 80181d8:	a0d03d51 	.word	0xa0d03d51
 80181dc:	3fb10d66 	.word	0x3fb10d66
 80181e0:	c54c206e 	.word	0xc54c206e
 80181e4:	3fb745cd 	.word	0x3fb745cd
 80181e8:	920083ff 	.word	0x920083ff
 80181ec:	3fc24924 	.word	0x3fc24924
 80181f0:	5555550d 	.word	0x5555550d
 80181f4:	3fd55555 	.word	0x3fd55555
 80181f8:	2c6a6c2f 	.word	0x2c6a6c2f
 80181fc:	bfa2b444 	.word	0xbfa2b444
 8018200:	52defd9a 	.word	0x52defd9a
 8018204:	3fadde2d 	.word	0x3fadde2d
 8018208:	af749a6d 	.word	0xaf749a6d
 801820c:	3fb3b0f2 	.word	0x3fb3b0f2
 8018210:	fe231671 	.word	0xfe231671
 8018214:	3fbc71c6 	.word	0x3fbc71c6
 8018218:	9998ebc4 	.word	0x9998ebc4
 801821c:	3fc99999 	.word	0x3fc99999
 8018220:	54442d18 	.word	0x54442d18
 8018224:	bff921fb 	.word	0xbff921fb
 8018228:	440fffff 	.word	0x440fffff
 801822c:	7ff00000 	.word	0x7ff00000
 8018230:	3fdbffff 	.word	0x3fdbffff
 8018234:	3ff00000 	.word	0x3ff00000
 8018238:	3ff2ffff 	.word	0x3ff2ffff
 801823c:	40037fff 	.word	0x40037fff
 8018240:	3ff80000 	.word	0x3ff80000
 8018244:	bff00000 	.word	0xbff00000
 8018248:	08018ed8 	.word	0x08018ed8
 801824c:	08018eb8 	.word	0x08018eb8

08018250 <fabs>:
 8018250:	ec51 0b10 	vmov	r0, r1, d0
 8018254:	ee10 2a10 	vmov	r2, s0
 8018258:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801825c:	ec43 2b10 	vmov	d0, r2, r3
 8018260:	4770      	bx	lr
 8018262:	0000      	movs	r0, r0
 8018264:	0000      	movs	r0, r0
	...

08018268 <floor>:
 8018268:	ec51 0b10 	vmov	r0, r1, d0
 801826c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018270:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8018274:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8018278:	2e13      	cmp	r6, #19
 801827a:	460c      	mov	r4, r1
 801827c:	ee10 5a10 	vmov	r5, s0
 8018280:	4680      	mov	r8, r0
 8018282:	dc34      	bgt.n	80182ee <floor+0x86>
 8018284:	2e00      	cmp	r6, #0
 8018286:	da16      	bge.n	80182b6 <floor+0x4e>
 8018288:	a335      	add	r3, pc, #212	; (adr r3, 8018360 <floor+0xf8>)
 801828a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801828e:	f7e8 f80d 	bl	80002ac <__adddf3>
 8018292:	2200      	movs	r2, #0
 8018294:	2300      	movs	r3, #0
 8018296:	f7e8 fc4f 	bl	8000b38 <__aeabi_dcmpgt>
 801829a:	b148      	cbz	r0, 80182b0 <floor+0x48>
 801829c:	2c00      	cmp	r4, #0
 801829e:	da59      	bge.n	8018354 <floor+0xec>
 80182a0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80182a4:	4a30      	ldr	r2, [pc, #192]	; (8018368 <floor+0x100>)
 80182a6:	432b      	orrs	r3, r5
 80182a8:	2500      	movs	r5, #0
 80182aa:	42ab      	cmp	r3, r5
 80182ac:	bf18      	it	ne
 80182ae:	4614      	movne	r4, r2
 80182b0:	4621      	mov	r1, r4
 80182b2:	4628      	mov	r0, r5
 80182b4:	e025      	b.n	8018302 <floor+0x9a>
 80182b6:	4f2d      	ldr	r7, [pc, #180]	; (801836c <floor+0x104>)
 80182b8:	4137      	asrs	r7, r6
 80182ba:	ea01 0307 	and.w	r3, r1, r7
 80182be:	4303      	orrs	r3, r0
 80182c0:	d01f      	beq.n	8018302 <floor+0x9a>
 80182c2:	a327      	add	r3, pc, #156	; (adr r3, 8018360 <floor+0xf8>)
 80182c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80182c8:	f7e7 fff0 	bl	80002ac <__adddf3>
 80182cc:	2200      	movs	r2, #0
 80182ce:	2300      	movs	r3, #0
 80182d0:	f7e8 fc32 	bl	8000b38 <__aeabi_dcmpgt>
 80182d4:	2800      	cmp	r0, #0
 80182d6:	d0eb      	beq.n	80182b0 <floor+0x48>
 80182d8:	2c00      	cmp	r4, #0
 80182da:	bfbe      	ittt	lt
 80182dc:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80182e0:	fa43 f606 	asrlt.w	r6, r3, r6
 80182e4:	19a4      	addlt	r4, r4, r6
 80182e6:	ea24 0407 	bic.w	r4, r4, r7
 80182ea:	2500      	movs	r5, #0
 80182ec:	e7e0      	b.n	80182b0 <floor+0x48>
 80182ee:	2e33      	cmp	r6, #51	; 0x33
 80182f0:	dd0b      	ble.n	801830a <floor+0xa2>
 80182f2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80182f6:	d104      	bne.n	8018302 <floor+0x9a>
 80182f8:	ee10 2a10 	vmov	r2, s0
 80182fc:	460b      	mov	r3, r1
 80182fe:	f7e7 ffd5 	bl	80002ac <__adddf3>
 8018302:	ec41 0b10 	vmov	d0, r0, r1
 8018306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801830a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801830e:	f04f 33ff 	mov.w	r3, #4294967295
 8018312:	fa23 f707 	lsr.w	r7, r3, r7
 8018316:	4207      	tst	r7, r0
 8018318:	d0f3      	beq.n	8018302 <floor+0x9a>
 801831a:	a311      	add	r3, pc, #68	; (adr r3, 8018360 <floor+0xf8>)
 801831c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018320:	f7e7 ffc4 	bl	80002ac <__adddf3>
 8018324:	2200      	movs	r2, #0
 8018326:	2300      	movs	r3, #0
 8018328:	f7e8 fc06 	bl	8000b38 <__aeabi_dcmpgt>
 801832c:	2800      	cmp	r0, #0
 801832e:	d0bf      	beq.n	80182b0 <floor+0x48>
 8018330:	2c00      	cmp	r4, #0
 8018332:	da02      	bge.n	801833a <floor+0xd2>
 8018334:	2e14      	cmp	r6, #20
 8018336:	d103      	bne.n	8018340 <floor+0xd8>
 8018338:	3401      	adds	r4, #1
 801833a:	ea25 0507 	bic.w	r5, r5, r7
 801833e:	e7b7      	b.n	80182b0 <floor+0x48>
 8018340:	2301      	movs	r3, #1
 8018342:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8018346:	fa03 f606 	lsl.w	r6, r3, r6
 801834a:	4435      	add	r5, r6
 801834c:	4545      	cmp	r5, r8
 801834e:	bf38      	it	cc
 8018350:	18e4      	addcc	r4, r4, r3
 8018352:	e7f2      	b.n	801833a <floor+0xd2>
 8018354:	2500      	movs	r5, #0
 8018356:	462c      	mov	r4, r5
 8018358:	e7aa      	b.n	80182b0 <floor+0x48>
 801835a:	bf00      	nop
 801835c:	f3af 8000 	nop.w
 8018360:	8800759c 	.word	0x8800759c
 8018364:	7e37e43c 	.word	0x7e37e43c
 8018368:	bff00000 	.word	0xbff00000
 801836c:	000fffff 	.word	0x000fffff

08018370 <matherr>:
 8018370:	2000      	movs	r0, #0
 8018372:	4770      	bx	lr
 8018374:	0000      	movs	r0, r0
	...

08018378 <scalbn>:
 8018378:	b570      	push	{r4, r5, r6, lr}
 801837a:	ec55 4b10 	vmov	r4, r5, d0
 801837e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8018382:	4606      	mov	r6, r0
 8018384:	462b      	mov	r3, r5
 8018386:	b9aa      	cbnz	r2, 80183b4 <scalbn+0x3c>
 8018388:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801838c:	4323      	orrs	r3, r4
 801838e:	d03b      	beq.n	8018408 <scalbn+0x90>
 8018390:	4b31      	ldr	r3, [pc, #196]	; (8018458 <scalbn+0xe0>)
 8018392:	4629      	mov	r1, r5
 8018394:	2200      	movs	r2, #0
 8018396:	ee10 0a10 	vmov	r0, s0
 801839a:	f7e8 f93d 	bl	8000618 <__aeabi_dmul>
 801839e:	4b2f      	ldr	r3, [pc, #188]	; (801845c <scalbn+0xe4>)
 80183a0:	429e      	cmp	r6, r3
 80183a2:	4604      	mov	r4, r0
 80183a4:	460d      	mov	r5, r1
 80183a6:	da12      	bge.n	80183ce <scalbn+0x56>
 80183a8:	a327      	add	r3, pc, #156	; (adr r3, 8018448 <scalbn+0xd0>)
 80183aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80183ae:	f7e8 f933 	bl	8000618 <__aeabi_dmul>
 80183b2:	e009      	b.n	80183c8 <scalbn+0x50>
 80183b4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80183b8:	428a      	cmp	r2, r1
 80183ba:	d10c      	bne.n	80183d6 <scalbn+0x5e>
 80183bc:	ee10 2a10 	vmov	r2, s0
 80183c0:	4620      	mov	r0, r4
 80183c2:	4629      	mov	r1, r5
 80183c4:	f7e7 ff72 	bl	80002ac <__adddf3>
 80183c8:	4604      	mov	r4, r0
 80183ca:	460d      	mov	r5, r1
 80183cc:	e01c      	b.n	8018408 <scalbn+0x90>
 80183ce:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80183d2:	460b      	mov	r3, r1
 80183d4:	3a36      	subs	r2, #54	; 0x36
 80183d6:	4432      	add	r2, r6
 80183d8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80183dc:	428a      	cmp	r2, r1
 80183de:	dd0b      	ble.n	80183f8 <scalbn+0x80>
 80183e0:	ec45 4b11 	vmov	d1, r4, r5
 80183e4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8018450 <scalbn+0xd8>
 80183e8:	f000 f83c 	bl	8018464 <copysign>
 80183ec:	a318      	add	r3, pc, #96	; (adr r3, 8018450 <scalbn+0xd8>)
 80183ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80183f2:	ec51 0b10 	vmov	r0, r1, d0
 80183f6:	e7da      	b.n	80183ae <scalbn+0x36>
 80183f8:	2a00      	cmp	r2, #0
 80183fa:	dd08      	ble.n	801840e <scalbn+0x96>
 80183fc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8018400:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8018404:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8018408:	ec45 4b10 	vmov	d0, r4, r5
 801840c:	bd70      	pop	{r4, r5, r6, pc}
 801840e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8018412:	da0d      	bge.n	8018430 <scalbn+0xb8>
 8018414:	f24c 3350 	movw	r3, #50000	; 0xc350
 8018418:	429e      	cmp	r6, r3
 801841a:	ec45 4b11 	vmov	d1, r4, r5
 801841e:	dce1      	bgt.n	80183e4 <scalbn+0x6c>
 8018420:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8018448 <scalbn+0xd0>
 8018424:	f000 f81e 	bl	8018464 <copysign>
 8018428:	a307      	add	r3, pc, #28	; (adr r3, 8018448 <scalbn+0xd0>)
 801842a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801842e:	e7e0      	b.n	80183f2 <scalbn+0x7a>
 8018430:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8018434:	3236      	adds	r2, #54	; 0x36
 8018436:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801843a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801843e:	4620      	mov	r0, r4
 8018440:	4629      	mov	r1, r5
 8018442:	2200      	movs	r2, #0
 8018444:	4b06      	ldr	r3, [pc, #24]	; (8018460 <scalbn+0xe8>)
 8018446:	e7b2      	b.n	80183ae <scalbn+0x36>
 8018448:	c2f8f359 	.word	0xc2f8f359
 801844c:	01a56e1f 	.word	0x01a56e1f
 8018450:	8800759c 	.word	0x8800759c
 8018454:	7e37e43c 	.word	0x7e37e43c
 8018458:	43500000 	.word	0x43500000
 801845c:	ffff3cb0 	.word	0xffff3cb0
 8018460:	3c900000 	.word	0x3c900000

08018464 <copysign>:
 8018464:	ec51 0b10 	vmov	r0, r1, d0
 8018468:	ee11 0a90 	vmov	r0, s3
 801846c:	ee10 2a10 	vmov	r2, s0
 8018470:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8018474:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8018478:	ea41 0300 	orr.w	r3, r1, r0
 801847c:	ec43 2b10 	vmov	d0, r2, r3
 8018480:	4770      	bx	lr
	...

08018484 <_init>:
 8018484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018486:	bf00      	nop
 8018488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801848a:	bc08      	pop	{r3}
 801848c:	469e      	mov	lr, r3
 801848e:	4770      	bx	lr

08018490 <_fini>:
 8018490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018492:	bf00      	nop
 8018494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018496:	bc08      	pop	{r3}
 8018498:	469e      	mov	lr, r3
 801849a:	4770      	bx	lr
