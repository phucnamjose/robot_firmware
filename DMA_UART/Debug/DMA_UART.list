
DMA_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b6f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b48  0801b888  0801b888  0002b888  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c3d0  0801c3d0  00031034  2**0
                  CONTENTS
  4 .ARM          00000008  0801c3d0  0801c3d0  0002c3d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c3d8  0801c3d8  00031034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c3d8  0801c3d8  0002c3d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c3dc  0801c3dc  0002c3dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001034  20000000  0801c3e0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005e54  20001038  0801d414  00031038  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20006e8c  0801d414  00036e8c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00031034  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e185  00000000  00000000  00031064  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006211  00000000  00000000  0005f1e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001d38  00000000  00000000  00065400  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001ae0  00000000  00000000  00067138  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000299c4  00000000  00000000  00068c18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001f1dd  00000000  00000000  000925dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dca46  00000000  00000000  000b17b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018e1ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008d70  00000000  00000000  0018e27c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20001038 	.word	0x20001038
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801b86c 	.word	0x0801b86c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000103c 	.word	0x2000103c
 80001cc:	0801b86c 	.word	0x0801b86c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b972 	b.w	8000fa4 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9e08      	ldr	r6, [sp, #32]
 8000cde:	4604      	mov	r4, r0
 8000ce0:	4688      	mov	r8, r1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d14b      	bne.n	8000d7e <__udivmoddi4+0xa6>
 8000ce6:	428a      	cmp	r2, r1
 8000ce8:	4615      	mov	r5, r2
 8000cea:	d967      	bls.n	8000dbc <__udivmoddi4+0xe4>
 8000cec:	fab2 f282 	clz	r2, r2
 8000cf0:	b14a      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf2:	f1c2 0720 	rsb	r7, r2, #32
 8000cf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cfe:	4095      	lsls	r5, r2
 8000d00:	ea47 0803 	orr.w	r8, r7, r3
 8000d04:	4094      	lsls	r4, r2
 8000d06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d0a:	0c23      	lsrs	r3, r4, #16
 8000d0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d10:	fa1f fc85 	uxth.w	ip, r5
 8000d14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x60>
 8000d24:	18eb      	adds	r3, r5, r3
 8000d26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d2a:	f080 811b 	bcs.w	8000f64 <__udivmoddi4+0x28c>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 8118 	bls.w	8000f64 <__udivmoddi4+0x28c>
 8000d34:	3f02      	subs	r7, #2
 8000d36:	442b      	add	r3, r5
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d4c:	45a4      	cmp	ip, r4
 8000d4e:	d909      	bls.n	8000d64 <__udivmoddi4+0x8c>
 8000d50:	192c      	adds	r4, r5, r4
 8000d52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d56:	f080 8107 	bcs.w	8000f68 <__udivmoddi4+0x290>
 8000d5a:	45a4      	cmp	ip, r4
 8000d5c:	f240 8104 	bls.w	8000f68 <__udivmoddi4+0x290>
 8000d60:	3802      	subs	r0, #2
 8000d62:	442c      	add	r4, r5
 8000d64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d68:	eba4 040c 	sub.w	r4, r4, ip
 8000d6c:	2700      	movs	r7, #0
 8000d6e:	b11e      	cbz	r6, 8000d78 <__udivmoddi4+0xa0>
 8000d70:	40d4      	lsrs	r4, r2
 8000d72:	2300      	movs	r3, #0
 8000d74:	e9c6 4300 	strd	r4, r3, [r6]
 8000d78:	4639      	mov	r1, r7
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0xbe>
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	f000 80eb 	beq.w	8000f5e <__udivmoddi4+0x286>
 8000d88:	2700      	movs	r7, #0
 8000d8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d8e:	4638      	mov	r0, r7
 8000d90:	4639      	mov	r1, r7
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	fab3 f783 	clz	r7, r3
 8000d9a:	2f00      	cmp	r7, #0
 8000d9c:	d147      	bne.n	8000e2e <__udivmoddi4+0x156>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d302      	bcc.n	8000da8 <__udivmoddi4+0xd0>
 8000da2:	4282      	cmp	r2, r0
 8000da4:	f200 80fa 	bhi.w	8000f9c <__udivmoddi4+0x2c4>
 8000da8:	1a84      	subs	r4, r0, r2
 8000daa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	4698      	mov	r8, r3
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	d0e0      	beq.n	8000d78 <__udivmoddi4+0xa0>
 8000db6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dba:	e7dd      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000dbc:	b902      	cbnz	r2, 8000dc0 <__udivmoddi4+0xe8>
 8000dbe:	deff      	udf	#255	; 0xff
 8000dc0:	fab2 f282 	clz	r2, r2
 8000dc4:	2a00      	cmp	r2, #0
 8000dc6:	f040 808f 	bne.w	8000ee8 <__udivmoddi4+0x210>
 8000dca:	1b49      	subs	r1, r1, r5
 8000dcc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dd0:	fa1f f885 	uxth.w	r8, r5
 8000dd4:	2701      	movs	r7, #1
 8000dd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dda:	0c23      	lsrs	r3, r4, #16
 8000ddc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000de0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000de4:	fb08 f10c 	mul.w	r1, r8, ip
 8000de8:	4299      	cmp	r1, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x124>
 8000dec:	18eb      	adds	r3, r5, r3
 8000dee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x122>
 8000df4:	4299      	cmp	r1, r3
 8000df6:	f200 80cd 	bhi.w	8000f94 <__udivmoddi4+0x2bc>
 8000dfa:	4684      	mov	ip, r0
 8000dfc:	1a59      	subs	r1, r3, r1
 8000dfe:	b2a3      	uxth	r3, r4
 8000e00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e0c:	fb08 f800 	mul.w	r8, r8, r0
 8000e10:	45a0      	cmp	r8, r4
 8000e12:	d907      	bls.n	8000e24 <__udivmoddi4+0x14c>
 8000e14:	192c      	adds	r4, r5, r4
 8000e16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x14a>
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	f200 80b6 	bhi.w	8000f8e <__udivmoddi4+0x2b6>
 8000e22:	4618      	mov	r0, r3
 8000e24:	eba4 0408 	sub.w	r4, r4, r8
 8000e28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e2c:	e79f      	b.n	8000d6e <__udivmoddi4+0x96>
 8000e2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e32:	40bb      	lsls	r3, r7
 8000e34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e4c:	4325      	orrs	r5, r4
 8000e4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e52:	0c2c      	lsrs	r4, r5, #16
 8000e54:	fb08 3319 	mls	r3, r8, r9, r3
 8000e58:	fa1f fa8e 	uxth.w	sl, lr
 8000e5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e60:	fb09 f40a 	mul.w	r4, r9, sl
 8000e64:	429c      	cmp	r4, r3
 8000e66:	fa02 f207 	lsl.w	r2, r2, r7
 8000e6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e6e:	d90b      	bls.n	8000e88 <__udivmoddi4+0x1b0>
 8000e70:	eb1e 0303 	adds.w	r3, lr, r3
 8000e74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e78:	f080 8087 	bcs.w	8000f8a <__udivmoddi4+0x2b2>
 8000e7c:	429c      	cmp	r4, r3
 8000e7e:	f240 8084 	bls.w	8000f8a <__udivmoddi4+0x2b2>
 8000e82:	f1a9 0902 	sub.w	r9, r9, #2
 8000e86:	4473      	add	r3, lr
 8000e88:	1b1b      	subs	r3, r3, r4
 8000e8a:	b2ad      	uxth	r5, r5
 8000e8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e90:	fb08 3310 	mls	r3, r8, r0, r3
 8000e94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e9c:	45a2      	cmp	sl, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x1da>
 8000ea0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ea4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ea8:	d26b      	bcs.n	8000f82 <__udivmoddi4+0x2aa>
 8000eaa:	45a2      	cmp	sl, r4
 8000eac:	d969      	bls.n	8000f82 <__udivmoddi4+0x2aa>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	4474      	add	r4, lr
 8000eb2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eba:	eba4 040a 	sub.w	r4, r4, sl
 8000ebe:	454c      	cmp	r4, r9
 8000ec0:	46c2      	mov	sl, r8
 8000ec2:	464b      	mov	r3, r9
 8000ec4:	d354      	bcc.n	8000f70 <__udivmoddi4+0x298>
 8000ec6:	d051      	beq.n	8000f6c <__udivmoddi4+0x294>
 8000ec8:	2e00      	cmp	r6, #0
 8000eca:	d069      	beq.n	8000fa0 <__udivmoddi4+0x2c8>
 8000ecc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ed0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ed4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ed8:	40fd      	lsrs	r5, r7
 8000eda:	40fc      	lsrs	r4, r7
 8000edc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ee0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ee4:	2700      	movs	r7, #0
 8000ee6:	e747      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000ee8:	f1c2 0320 	rsb	r3, r2, #32
 8000eec:	fa20 f703 	lsr.w	r7, r0, r3
 8000ef0:	4095      	lsls	r5, r2
 8000ef2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ef6:	fa21 f303 	lsr.w	r3, r1, r3
 8000efa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000efe:	4338      	orrs	r0, r7
 8000f00:	0c01      	lsrs	r1, r0, #16
 8000f02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f06:	fa1f f885 	uxth.w	r8, r5
 8000f0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb07 f308 	mul.w	r3, r7, r8
 8000f16:	428b      	cmp	r3, r1
 8000f18:	fa04 f402 	lsl.w	r4, r4, r2
 8000f1c:	d907      	bls.n	8000f2e <__udivmoddi4+0x256>
 8000f1e:	1869      	adds	r1, r5, r1
 8000f20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f24:	d22f      	bcs.n	8000f86 <__udivmoddi4+0x2ae>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	d92d      	bls.n	8000f86 <__udivmoddi4+0x2ae>
 8000f2a:	3f02      	subs	r7, #2
 8000f2c:	4429      	add	r1, r5
 8000f2e:	1acb      	subs	r3, r1, r3
 8000f30:	b281      	uxth	r1, r0
 8000f32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f3e:	fb00 f308 	mul.w	r3, r0, r8
 8000f42:	428b      	cmp	r3, r1
 8000f44:	d907      	bls.n	8000f56 <__udivmoddi4+0x27e>
 8000f46:	1869      	adds	r1, r5, r1
 8000f48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f4c:	d217      	bcs.n	8000f7e <__udivmoddi4+0x2a6>
 8000f4e:	428b      	cmp	r3, r1
 8000f50:	d915      	bls.n	8000f7e <__udivmoddi4+0x2a6>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4429      	add	r1, r5
 8000f56:	1ac9      	subs	r1, r1, r3
 8000f58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f5c:	e73b      	b.n	8000dd6 <__udivmoddi4+0xfe>
 8000f5e:	4637      	mov	r7, r6
 8000f60:	4630      	mov	r0, r6
 8000f62:	e709      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000f64:	4607      	mov	r7, r0
 8000f66:	e6e7      	b.n	8000d38 <__udivmoddi4+0x60>
 8000f68:	4618      	mov	r0, r3
 8000f6a:	e6fb      	b.n	8000d64 <__udivmoddi4+0x8c>
 8000f6c:	4541      	cmp	r1, r8
 8000f6e:	d2ab      	bcs.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f74:	eb69 020e 	sbc.w	r2, r9, lr
 8000f78:	3801      	subs	r0, #1
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	e7a4      	b.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f7e:	4660      	mov	r0, ip
 8000f80:	e7e9      	b.n	8000f56 <__udivmoddi4+0x27e>
 8000f82:	4618      	mov	r0, r3
 8000f84:	e795      	b.n	8000eb2 <__udivmoddi4+0x1da>
 8000f86:	4667      	mov	r7, ip
 8000f88:	e7d1      	b.n	8000f2e <__udivmoddi4+0x256>
 8000f8a:	4681      	mov	r9, r0
 8000f8c:	e77c      	b.n	8000e88 <__udivmoddi4+0x1b0>
 8000f8e:	3802      	subs	r0, #2
 8000f90:	442c      	add	r4, r5
 8000f92:	e747      	b.n	8000e24 <__udivmoddi4+0x14c>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	442b      	add	r3, r5
 8000f9a:	e72f      	b.n	8000dfc <__udivmoddi4+0x124>
 8000f9c:	4638      	mov	r0, r7
 8000f9e:	e708      	b.n	8000db2 <__udivmoddi4+0xda>
 8000fa0:	4637      	mov	r7, r6
 8000fa2:	e6e9      	b.n	8000d78 <__udivmoddi4+0xa0>

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <commandRead>:
												"STOP",
												"ERRO",
												"OKAY"};


Robot_CommandTypedef 	commandRead	(uint8_t *message, int32_t *id_command, DUTY_Command_TypeDef *duty_cmd) {
 8000fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fac:	b0b6      	sub	sp, #216	; 0xd8
 8000fae:	af0a      	add	r7, sp, #40	; 0x28
 8000fb0:	60f8      	str	r0, [r7, #12]
 8000fb2:	60b9      	str	r1, [r7, #8]
 8000fb4:	607a      	str	r2, [r7, #4]
	char command[10];
	char para[70];
	int32_t result;
	memset(para, 0, 70*sizeof(char));
 8000fb6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000fba:	2246      	movs	r2, #70	; 0x46
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f014 fdd2 	bl	8015b68 <memset>
	result = sscanf((char*)message, "%d %s %70c",(int*) id_command, command, para);
 8000fc4:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8000fc8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000fcc:	9300      	str	r3, [sp, #0]
 8000fce:	4613      	mov	r3, r2
 8000fd0:	68ba      	ldr	r2, [r7, #8]
 8000fd2:	49b0      	ldr	r1, [pc, #704]	; (8001294 <commandRead+0x2ec>)
 8000fd4:	68f8      	ldr	r0, [r7, #12]
 8000fd6:	f015 fd1f 	bl	8016a18 <siscanf>
 8000fda:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
	duty_cmd->id_command = *id_command;
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	609a      	str	r2, [r3, #8]
	// Stop Now
	if ( 0 == strcmp( command, ROBOTCOMMAND[CMD_STOPNOW])) {
 8000fe6:	4bac      	ldr	r3, [pc, #688]	; (8001298 <commandRead+0x2f0>)
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000fee:	4611      	mov	r1, r2
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff f8ed 	bl	80001d0 <strcmp>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d10a      	bne.n	8001012 <commandRead+0x6a>
		duty_cmd->robot_mode = SCARA_MODE_STOP;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2200      	movs	r2, #0
 8001000:	709a      	strb	r2, [r3, #2]
		duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2201      	movs	r2, #1
 8001006:	705a      	strb	r2, [r3, #1]
		duty_cmd->change_method = FALSE;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2200      	movs	r2, #0
 800100c:	701a      	strb	r2, [r3, #0]
		return CMD_STOPNOW;
 800100e:	2300      	movs	r3, #0
 8001010:	e3a6      	b.n	8001760 <commandRead+0x7b8>

	// Scan Limit
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_SCAN_LIMIT])) {
 8001012:	4ba1      	ldr	r3, [pc, #644]	; (8001298 <commandRead+0x2f0>)
 8001014:	685a      	ldr	r2, [r3, #4]
 8001016:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800101a:	4611      	mov	r1, r2
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff f8d7 	bl	80001d0 <strcmp>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d10a      	bne.n	800103e <commandRead+0x96>
		duty_cmd->robot_mode = SCARA_MODE_SCAN;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2201      	movs	r2, #1
 800102c:	709a      	strb	r2, [r3, #2]
		duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2201      	movs	r2, #1
 8001032:	705a      	strb	r2, [r3, #1]
		duty_cmd->change_method = FALSE;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2200      	movs	r2, #0
 8001038:	701a      	strb	r2, [r3, #0]
		return CMD_SCAN_LIMIT;
 800103a:	2301      	movs	r3, #1
 800103c:	e390      	b.n	8001760 <commandRead+0x7b8>

	// Move Home
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_MOVE_HOME])) {
 800103e:	4b96      	ldr	r3, [pc, #600]	; (8001298 <commandRead+0x2f0>)
 8001040:	689a      	ldr	r2, [r3, #8]
 8001042:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001046:	4611      	mov	r1, r2
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff f8c1 	bl	80001d0 <strcmp>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d145      	bne.n	80010e0 <commandRead+0x138>
		if (3 == result) {
 8001054:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001058:	2b03      	cmp	r3, #3
 800105a:	d112      	bne.n	8001082 <commandRead+0xda>
			result = sscanf( para, "%lf %lf",
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8001068:	f107 0058 	add.w	r0, r7, #88	; 0x58
 800106c:	498b      	ldr	r1, [pc, #556]	; (800129c <commandRead+0x2f4>)
 800106e:	f015 fcd3 	bl	8016a18 <siscanf>
 8001072:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
							&(duty_cmd->v_factor),
							&(duty_cmd->a_factor));
			if (2 != result) {
 8001076:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800107a:	2b02      	cmp	r3, #2
 800107c:	d003      	beq.n	8001086 <commandRead+0xde>
				return CMD_ERROR;
 800107e:	2315      	movs	r3, #21
 8001080:	e36e      	b.n	8001760 <commandRead+0x7b8>
			}
		} else {
			return CMD_ERROR;
 8001082:	2315      	movs	r3, #21
 8001084:	e36c      	b.n	8001760 <commandRead+0x7b8>
		}
		duty_cmd->target_point.x = 250;
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	f04f 0300 	mov.w	r3, #0
 800108c:	4c84      	ldr	r4, [pc, #528]	; (80012a0 <commandRead+0x2f8>)
 800108e:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		duty_cmd->target_point.y = -200;
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	f04f 0300 	mov.w	r3, #0
 8001098:	4c82      	ldr	r4, [pc, #520]	; (80012a4 <commandRead+0x2fc>)
 800109a:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
		duty_cmd->target_point.z = 120;
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	f04f 0300 	mov.w	r3, #0
 80010a4:	4c80      	ldr	r4, [pc, #512]	; (80012a8 <commandRead+0x300>)
 80010a6:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
		duty_cmd->target_point.roll = 0;
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	f04f 0300 	mov.w	r3, #0
 80010b0:	f04f 0400 	mov.w	r4, #0
 80010b4:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88

		duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2200      	movs	r2, #0
 80010bc:	745a      	strb	r2, [r3, #17]
		duty_cmd->space_type = DUTY_SPACE_JOINT;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2201      	movs	r2, #1
 80010c2:	735a      	strb	r2, [r3, #13]
		duty_cmd->joint_type = DUTY_JOINT_4DOF;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2201      	movs	r2, #1
 80010c8:	73da      	strb	r2, [r3, #15]
		duty_cmd->robot_mode = SCARA_MODE_DUTY;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2202      	movs	r2, #2
 80010ce:	709a      	strb	r2, [r3, #2]
		duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2201      	movs	r2, #1
 80010d4:	705a      	strb	r2, [r3, #1]
		duty_cmd->change_method = FALSE;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2200      	movs	r2, #0
 80010da:	701a      	strb	r2, [r3, #0]
		return CMD_MOVE_HOME;
 80010dc:	2302      	movs	r3, #2
 80010de:	e33f      	b.n	8001760 <commandRead+0x7b8>

	// Move Line
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_MOVE_LINE])) {
 80010e0:	4b6d      	ldr	r3, [pc, #436]	; (8001298 <commandRead+0x2f0>)
 80010e2:	68da      	ldr	r2, [r3, #12]
 80010e4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80010e8:	4611      	mov	r1, r2
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff f870 	bl	80001d0 <strcmp>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d158      	bne.n	80011a8 <commandRead+0x200>
		if (3 == result) {
 80010f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80010fa:	2b03      	cmp	r3, #3
 80010fc:	d147      	bne.n	800118e <commandRead+0x1e6>
			double temp_fl;
			int8_t mode_init;
			result = sscanf( para, "%lf %lf %lf %lf %lf %d %lf",
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	f103 0570 	add.w	r5, r3, #112	; 0x70
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f103 0678 	add.w	r6, r3, #120	; 0x78
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	3380      	adds	r3, #128	; 0x80
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	3288      	adds	r2, #136	; 0x88
 8001112:	6879      	ldr	r1, [r7, #4]
 8001114:	f501 71cc 	add.w	r1, r1, #408	; 0x198
 8001118:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800111c:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8001120:	9004      	str	r0, [sp, #16]
 8001122:	f107 004f 	add.w	r0, r7, #79	; 0x4f
 8001126:	9003      	str	r0, [sp, #12]
 8001128:	9102      	str	r1, [sp, #8]
 800112a:	9201      	str	r2, [sp, #4]
 800112c:	9300      	str	r3, [sp, #0]
 800112e:	4633      	mov	r3, r6
 8001130:	462a      	mov	r2, r5
 8001132:	495e      	ldr	r1, [pc, #376]	; (80012ac <commandRead+0x304>)
 8001134:	4620      	mov	r0, r4
 8001136:	f015 fc6f 	bl	8016a18 <siscanf>
 800113a:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
							&(duty_cmd->target_point.roll),
							&(duty_cmd->v_factor),
							(int *)&mode_init,
							&temp_fl);

			if (7 != result) {
 800113e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001142:	2b07      	cmp	r3, #7
 8001144:	d001      	beq.n	800114a <commandRead+0x1a2>
				return CMD_ERROR;
 8001146:	2315      	movs	r3, #21
 8001148:	e30a      	b.n	8001760 <commandRead+0x7b8>
			}
			duty_cmd->path_type = DUTY_PATH_LINE;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2200      	movs	r2, #0
 800114e:	739a      	strb	r2, [r3, #14]
			duty_cmd->space_type = DUTY_SPACE_TASK;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2200      	movs	r2, #0
 8001154:	735a      	strb	r2, [r3, #13]

			if ( DUTY_MODE_INIT_QVA == mode_init) {
 8001156:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800115a:	2b00      	cmp	r3, #0
 800115c:	d108      	bne.n	8001170 <commandRead+0x1c8>
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2200      	movs	r2, #0
 8001162:	745a      	strb	r2, [r3, #17]
				duty_cmd->a_factor		= temp_fl;
 8001164:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8001168:	687a      	ldr	r2, [r7, #4]
 800116a:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0
 800116e:	e010      	b.n	8001192 <commandRead+0x1ea>
			} else if ( DUTY_MODE_INIT_QVT == mode_init) {
 8001170:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8001174:	2b01      	cmp	r3, #1
 8001176:	d108      	bne.n	800118a <commandRead+0x1e2>
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2201      	movs	r2, #1
 800117c:	745a      	strb	r2, [r3, #17]
				duty_cmd->time_total	= temp_fl;
 800117e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	e9c2 3408 	strd	r3, r4, [r2, #32]
 8001188:	e003      	b.n	8001192 <commandRead+0x1ea>
			} else {
				return CMD_ERROR;
 800118a:	2315      	movs	r3, #21
 800118c:	e2e8      	b.n	8001760 <commandRead+0x7b8>
			}
		} else {
			return CMD_ERROR;
 800118e:	2315      	movs	r3, #21
 8001190:	e2e6      	b.n	8001760 <commandRead+0x7b8>
		}
		duty_cmd->robot_mode = SCARA_MODE_DUTY;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2202      	movs	r2, #2
 8001196:	709a      	strb	r2, [r3, #2]
		duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2201      	movs	r2, #1
 800119c:	705a      	strb	r2, [r3, #1]
		duty_cmd->change_method = FALSE;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2200      	movs	r2, #0
 80011a2:	701a      	strb	r2, [r3, #0]
		return CMD_MOVE_LINE;
 80011a4:	2303      	movs	r3, #3
 80011a6:	e2db      	b.n	8001760 <commandRead+0x7b8>

	// Move Circle
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_MOVE_CIRCLE])) {
 80011a8:	4b3b      	ldr	r3, [pc, #236]	; (8001298 <commandRead+0x2f0>)
 80011aa:	691a      	ldr	r2, [r3, #16]
 80011ac:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80011b0:	4611      	mov	r1, r2
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff f80c 	bl	80001d0 <strcmp>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d17a      	bne.n	80012b4 <commandRead+0x30c>
		if (3 == result) {
 80011be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80011c2:	2b03      	cmp	r3, #3
 80011c4:	d158      	bne.n	8001278 <commandRead+0x2d0>
			double temp_fl;
			int8_t mode_init;
			result = sscanf( para, "%lf %lf %lf %lf %lf %lf %lf %d %lf %d %lf",
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	f103 0e70 	add.w	lr, r3, #112	; 0x70
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f103 0878 	add.w	r8, r3, #120	; 0x78
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	3380      	adds	r3, #128	; 0x80
 80011d6:	603b      	str	r3, [r7, #0]
 80011d8:	687a      	ldr	r2, [r7, #4]
 80011da:	3288      	adds	r2, #136	; 0x88
 80011dc:	6879      	ldr	r1, [r7, #4]
 80011de:	f501 7194 	add.w	r1, r1, #296	; 0x128
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f500 7098 	add.w	r0, r0, #304	; 0x130
 80011e8:	687c      	ldr	r4, [r7, #4]
 80011ea:	f504 749c 	add.w	r4, r4, #312	; 0x138
							&(duty_cmd->target_point.z),
							&(duty_cmd->target_point.roll),
							&(duty_cmd->sub_point.x),
							&(duty_cmd->sub_point.y),
							&(duty_cmd->sub_point.z),
							(int *)&(duty_cmd->sub_para_int), // dir
 80011ee:	687d      	ldr	r5, [r7, #4]
 80011f0:	3514      	adds	r5, #20
			result = sscanf( para, "%lf %lf %lf %lf %lf %lf %lf %d %lf %d %lf",
 80011f2:	687e      	ldr	r6, [r7, #4]
 80011f4:	f506 76cc 	add.w	r6, r6, #408	; 0x198
 80011f8:	f107 0c58 	add.w	ip, r7, #88	; 0x58
 80011fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001200:	9308      	str	r3, [sp, #32]
 8001202:	f107 033f 	add.w	r3, r7, #63	; 0x3f
 8001206:	9307      	str	r3, [sp, #28]
 8001208:	9606      	str	r6, [sp, #24]
 800120a:	9505      	str	r5, [sp, #20]
 800120c:	9404      	str	r4, [sp, #16]
 800120e:	9003      	str	r0, [sp, #12]
 8001210:	9102      	str	r1, [sp, #8]
 8001212:	9201      	str	r2, [sp, #4]
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	9300      	str	r3, [sp, #0]
 8001218:	4643      	mov	r3, r8
 800121a:	4672      	mov	r2, lr
 800121c:	4924      	ldr	r1, [pc, #144]	; (80012b0 <commandRead+0x308>)
 800121e:	4660      	mov	r0, ip
 8001220:	f015 fbfa 	bl	8016a18 <siscanf>
 8001224:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
							&(duty_cmd->v_factor),
							(int *)&mode_init,
							&temp_fl);

			if (11 != result) {
 8001228:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800122c:	2b0b      	cmp	r3, #11
 800122e:	d001      	beq.n	8001234 <commandRead+0x28c>
				return CMD_ERROR;
 8001230:	2315      	movs	r3, #21
 8001232:	e295      	b.n	8001760 <commandRead+0x7b8>
			}
			duty_cmd->path_type = DUTY_PATH_CIRCLE;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2201      	movs	r2, #1
 8001238:	739a      	strb	r2, [r3, #14]
			duty_cmd->space_type = DUTY_SPACE_TASK;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2200      	movs	r2, #0
 800123e:	735a      	strb	r2, [r3, #13]

			if ( DUTY_MODE_INIT_QVA == mode_init) {
 8001240:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8001244:	2b00      	cmp	r3, #0
 8001246:	d108      	bne.n	800125a <commandRead+0x2b2>
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2200      	movs	r2, #0
 800124c:	745a      	strb	r2, [r3, #17]
				duty_cmd->a_factor		= temp_fl;
 800124e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0
 8001258:	e010      	b.n	800127c <commandRead+0x2d4>
			} else if ( DUTY_MODE_INIT_QVT == mode_init) {
 800125a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800125e:	2b01      	cmp	r3, #1
 8001260:	d108      	bne.n	8001274 <commandRead+0x2cc>
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2201      	movs	r2, #1
 8001266:	745a      	strb	r2, [r3, #17]
				duty_cmd->time_total	= temp_fl;
 8001268:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	e9c2 3408 	strd	r3, r4, [r2, #32]
 8001272:	e003      	b.n	800127c <commandRead+0x2d4>
			} else {
				return CMD_ERROR;
 8001274:	2315      	movs	r3, #21
 8001276:	e273      	b.n	8001760 <commandRead+0x7b8>
			}
		} else {
			return CMD_ERROR;
 8001278:	2315      	movs	r3, #21
 800127a:	e271      	b.n	8001760 <commandRead+0x7b8>
		}
		duty_cmd->robot_mode = SCARA_MODE_DUTY;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2202      	movs	r2, #2
 8001280:	709a      	strb	r2, [r3, #2]
		duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2201      	movs	r2, #1
 8001286:	705a      	strb	r2, [r3, #1]
		duty_cmd->change_method = FALSE;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2200      	movs	r2, #0
 800128c:	701a      	strb	r2, [r3, #0]
		return CMD_MOVE_CIRCLE;
 800128e:	2304      	movs	r3, #4
 8001290:	e266      	b.n	8001760 <commandRead+0x7b8>
 8001292:	bf00      	nop
 8001294:	0801b968 	.word	0x0801b968
 8001298:	20000000 	.word	0x20000000
 800129c:	0801b974 	.word	0x0801b974
 80012a0:	406f4000 	.word	0x406f4000
 80012a4:	c0690000 	.word	0xc0690000
 80012a8:	405e0000 	.word	0x405e0000
 80012ac:	0801b97c 	.word	0x0801b97c
 80012b0:	0801b998 	.word	0x0801b998

	// Move Joint
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_MOVE_JOINT])) {
 80012b4:	4bba      	ldr	r3, [pc, #744]	; (80015a0 <commandRead+0x5f8>)
 80012b6:	695a      	ldr	r2, [r3, #20]
 80012b8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80012bc:	4611      	mov	r1, r2
 80012be:	4618      	mov	r0, r3
 80012c0:	f7fe ff86 	bl	80001d0 <strcmp>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d158      	bne.n	800137c <commandRead+0x3d4>
		if (3 == result) {
 80012ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80012ce:	2b03      	cmp	r3, #3
 80012d0:	d147      	bne.n	8001362 <commandRead+0x3ba>
			double temp_fl;
			int8_t mode_init;
			result = sscanf( para, "%lf %lf %lf %lf %lf %d %lf",
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f103 0570 	add.w	r5, r3, #112	; 0x70
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f103 0678 	add.w	r6, r3, #120	; 0x78
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	3380      	adds	r3, #128	; 0x80
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	3288      	adds	r2, #136	; 0x88
 80012e6:	6879      	ldr	r1, [r7, #4]
 80012e8:	f501 71cc 	add.w	r1, r1, #408	; 0x198
 80012ec:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80012f0:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80012f4:	9004      	str	r0, [sp, #16]
 80012f6:	f107 002f 	add.w	r0, r7, #47	; 0x2f
 80012fa:	9003      	str	r0, [sp, #12]
 80012fc:	9102      	str	r1, [sp, #8]
 80012fe:	9201      	str	r2, [sp, #4]
 8001300:	9300      	str	r3, [sp, #0]
 8001302:	4633      	mov	r3, r6
 8001304:	462a      	mov	r2, r5
 8001306:	49a7      	ldr	r1, [pc, #668]	; (80015a4 <commandRead+0x5fc>)
 8001308:	4620      	mov	r0, r4
 800130a:	f015 fb85 	bl	8016a18 <siscanf>
 800130e:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
							&(duty_cmd->target_point.roll),
							&(duty_cmd->v_factor),
							(int *)&mode_init,
							&temp_fl);

			if (7 != result) {
 8001312:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001316:	2b07      	cmp	r3, #7
 8001318:	d001      	beq.n	800131e <commandRead+0x376>
				return CMD_ERROR;
 800131a:	2315      	movs	r3, #21
 800131c:	e220      	b.n	8001760 <commandRead+0x7b8>
			}
			duty_cmd->space_type = DUTY_SPACE_JOINT;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2201      	movs	r2, #1
 8001322:	735a      	strb	r2, [r3, #13]
			duty_cmd->joint_type = DUTY_JOINT_4DOF;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2201      	movs	r2, #1
 8001328:	73da      	strb	r2, [r3, #15]

			if ( DUTY_MODE_INIT_QVA == mode_init) {
 800132a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800132e:	2b00      	cmp	r3, #0
 8001330:	d108      	bne.n	8001344 <commandRead+0x39c>
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2200      	movs	r2, #0
 8001336:	745a      	strb	r2, [r3, #17]
				duty_cmd->a_factor		= temp_fl;
 8001338:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800133c:	687a      	ldr	r2, [r7, #4]
 800133e:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0
 8001342:	e010      	b.n	8001366 <commandRead+0x3be>
			} else if ( DUTY_MODE_INIT_QVT == mode_init) {
 8001344:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001348:	2b01      	cmp	r3, #1
 800134a:	d108      	bne.n	800135e <commandRead+0x3b6>
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2201      	movs	r2, #1
 8001350:	745a      	strb	r2, [r3, #17]
				duty_cmd->time_total	= temp_fl;
 8001352:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	e9c2 3408 	strd	r3, r4, [r2, #32]
 800135c:	e003      	b.n	8001366 <commandRead+0x3be>
			} else {
				return CMD_ERROR;
 800135e:	2315      	movs	r3, #21
 8001360:	e1fe      	b.n	8001760 <commandRead+0x7b8>
			}
		} else {
			return CMD_ERROR;
 8001362:	2315      	movs	r3, #21
 8001364:	e1fc      	b.n	8001760 <commandRead+0x7b8>
		}
		duty_cmd->robot_mode = SCARA_MODE_DUTY;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2202      	movs	r2, #2
 800136a:	709a      	strb	r2, [r3, #2]
		duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2201      	movs	r2, #1
 8001370:	705a      	strb	r2, [r3, #1]
		duty_cmd->change_method = FALSE;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2200      	movs	r2, #0
 8001376:	701a      	strb	r2, [r3, #0]

		return CMD_MOVE_JOINT;
 8001378:	2305      	movs	r3, #5
 800137a:	e1f1      	b.n	8001760 <commandRead+0x7b8>

	// Rotate Single
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_ROTATE_SINGLE])) {
 800137c:	4b88      	ldr	r3, [pc, #544]	; (80015a0 <commandRead+0x5f8>)
 800137e:	699a      	ldr	r2, [r3, #24]
 8001380:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001384:	4611      	mov	r1, r2
 8001386:	4618      	mov	r0, r3
 8001388:	f7fe ff22 	bl	80001d0 <strcmp>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d151      	bne.n	8001436 <commandRead+0x48e>
		if (3 == result) {
 8001392:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001396:	2b03      	cmp	r3, #3
 8001398:	d140      	bne.n	800141c <commandRead+0x474>
			double temp_fl;
			int8_t mode_init;
			result = sscanf( para, "%d %lf %lf %d %lf",
							(int *)&(duty_cmd->sub_para_int),
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	f103 0114 	add.w	r1, r3, #20
			result = sscanf( para, "%d %lf %lf %d %lf",
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f103 0418 	add.w	r4, r3, #24
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 80013ac:	f107 0058 	add.w	r0, r7, #88	; 0x58
 80013b0:	f107 0220 	add.w	r2, r7, #32
 80013b4:	9202      	str	r2, [sp, #8]
 80013b6:	f107 021f 	add.w	r2, r7, #31
 80013ba:	9201      	str	r2, [sp, #4]
 80013bc:	9300      	str	r3, [sp, #0]
 80013be:	4623      	mov	r3, r4
 80013c0:	460a      	mov	r2, r1
 80013c2:	4979      	ldr	r1, [pc, #484]	; (80015a8 <commandRead+0x600>)
 80013c4:	f015 fb28 	bl	8016a18 <siscanf>
 80013c8:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
							&(duty_cmd->sub_para_double),
							&(duty_cmd->v_factor),
							(int *)&mode_init,
							&temp_fl);

			if (5 != result) {
 80013cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80013d0:	2b05      	cmp	r3, #5
 80013d2:	d001      	beq.n	80013d8 <commandRead+0x430>
				return CMD_ERROR;
 80013d4:	2315      	movs	r3, #21
 80013d6:	e1c3      	b.n	8001760 <commandRead+0x7b8>
			}
			duty_cmd->space_type = DUTY_SPACE_JOINT;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2201      	movs	r2, #1
 80013dc:	735a      	strb	r2, [r3, #13]
			duty_cmd->joint_type = DUTY_JOINT_SINGLE;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2200      	movs	r2, #0
 80013e2:	73da      	strb	r2, [r3, #15]

			if ( DUTY_MODE_INIT_QVA == mode_init) {
 80013e4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d108      	bne.n	80013fe <commandRead+0x456>
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2200      	movs	r2, #0
 80013f0:	745a      	strb	r2, [r3, #17]
				duty_cmd->a_factor		= temp_fl;
 80013f2:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0
 80013fc:	e010      	b.n	8001420 <commandRead+0x478>
			} else if ( DUTY_MODE_INIT_QVT == mode_init) {
 80013fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d108      	bne.n	8001418 <commandRead+0x470>
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2201      	movs	r2, #1
 800140a:	745a      	strb	r2, [r3, #17]
				duty_cmd->time_total	= temp_fl;
 800140c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	e9c2 3408 	strd	r3, r4, [r2, #32]
 8001416:	e003      	b.n	8001420 <commandRead+0x478>
			} else {
				return CMD_ERROR;
 8001418:	2315      	movs	r3, #21
 800141a:	e1a1      	b.n	8001760 <commandRead+0x7b8>
			}
		} else {
			return CMD_ERROR;
 800141c:	2315      	movs	r3, #21
 800141e:	e19f      	b.n	8001760 <commandRead+0x7b8>
		}
		duty_cmd->robot_mode = SCARA_MODE_DUTY;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2202      	movs	r2, #2
 8001424:	709a      	strb	r2, [r3, #2]
		duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2201      	movs	r2, #1
 800142a:	705a      	strb	r2, [r3, #1]
		duty_cmd->change_method = FALSE;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2200      	movs	r2, #0
 8001430:	701a      	strb	r2, [r3, #0]

		return CMD_ROTATE_SINGLE;
 8001432:	2306      	movs	r3, #6
 8001434:	e194      	b.n	8001760 <commandRead+0x7b8>

	// Set Output
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_OUTPUT])) {
 8001436:	4b5a      	ldr	r3, [pc, #360]	; (80015a0 <commandRead+0x5f8>)
 8001438:	69da      	ldr	r2, [r3, #28]
 800143a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800143e:	4611      	mov	r1, r2
 8001440:	4618      	mov	r0, r3
 8001442:	f7fe fec5 	bl	80001d0 <strcmp>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d112      	bne.n	8001472 <commandRead+0x4ca>
		result = sscanf( para, "%d",(int *)&(duty_cmd->sub_para_int));
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f103 0214 	add.w	r2, r3, #20
 8001452:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001456:	4955      	ldr	r1, [pc, #340]	; (80015ac <commandRead+0x604>)
 8001458:	4618      	mov	r0, r3
 800145a:	f015 fadd 	bl	8016a18 <siscanf>
 800145e:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac

		if (1 != result) {
 8001462:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001466:	2b01      	cmp	r3, #1
 8001468:	d001      	beq.n	800146e <commandRead+0x4c6>
			return CMD_ERROR;
 800146a:	2315      	movs	r3, #21
 800146c:	e178      	b.n	8001760 <commandRead+0x7b8>
		}

		return CMD_OUTPUT;
 800146e:	2307      	movs	r3, #7
 8001470:	e176      	b.n	8001760 <commandRead+0x7b8>

	// Read Status
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_READ_STATUS])) {
 8001472:	4b4b      	ldr	r3, [pc, #300]	; (80015a0 <commandRead+0x5f8>)
 8001474:	6a1a      	ldr	r2, [r3, #32]
 8001476:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800147a:	4611      	mov	r1, r2
 800147c:	4618      	mov	r0, r3
 800147e:	f7fe fea7 	bl	80001d0 <strcmp>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d101      	bne.n	800148c <commandRead+0x4e4>
		return CMD_READ_STATUS;
 8001488:	2308      	movs	r3, #8
 800148a:	e169      	b.n	8001760 <commandRead+0x7b8>

	// Read Position
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_READ_POSITION])) {
 800148c:	4b44      	ldr	r3, [pc, #272]	; (80015a0 <commandRead+0x5f8>)
 800148e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001490:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001494:	4611      	mov	r1, r2
 8001496:	4618      	mov	r0, r3
 8001498:	f7fe fe9a 	bl	80001d0 <strcmp>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d101      	bne.n	80014a6 <commandRead+0x4fe>
			return CMD_READ_POSITION;
 80014a2:	2309      	movs	r3, #9
 80014a4:	e15c      	b.n	8001760 <commandRead+0x7b8>

	// Setting
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_SETTING])) {
 80014a6:	4b3e      	ldr	r3, [pc, #248]	; (80015a0 <commandRead+0x5f8>)
 80014a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014aa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80014ae:	4611      	mov	r1, r2
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7fe fe8d 	bl	80001d0 <strcmp>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d136      	bne.n	800152a <commandRead+0x582>
		int8_t mode_trajec;
		int8_t mode_coordinate;
		result = sscanf( para, "%d %d",
 80014bc:	f107 031e 	add.w	r3, r7, #30
 80014c0:	f107 021d 	add.w	r2, r7, #29
 80014c4:	f107 0058 	add.w	r0, r7, #88	; 0x58
 80014c8:	4939      	ldr	r1, [pc, #228]	; (80015b0 <commandRead+0x608>)
 80014ca:	f015 faa5 	bl	8016a18 <siscanf>
 80014ce:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
						(int *)&mode_coordinate,
						(int *)&mode_trajec);

		if (2 != result) {
 80014d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d001      	beq.n	80014de <commandRead+0x536>
			return CMD_ERROR;
 80014da:	2315      	movs	r3, #21
 80014dc:	e140      	b.n	8001760 <commandRead+0x7b8>
		}

		if ( DUTY_COORDINATES_ABS == mode_coordinate) {
 80014de:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d103      	bne.n	80014ee <commandRead+0x546>
			duty_cmd->coordinate_type = DUTY_COORDINATES_ABS;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	731a      	strb	r2, [r3, #12]
 80014ec:	e009      	b.n	8001502 <commandRead+0x55a>
		} else if ( DUTY_COORDINATES_REL == mode_coordinate) {
 80014ee:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d103      	bne.n	80014fe <commandRead+0x556>
			duty_cmd->coordinate_type = DUTY_COORDINATES_REL;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2201      	movs	r2, #1
 80014fa:	731a      	strb	r2, [r3, #12]
 80014fc:	e001      	b.n	8001502 <commandRead+0x55a>
		} else {
			return CMD_ERROR;
 80014fe:	2315      	movs	r3, #21
 8001500:	e12e      	b.n	8001760 <commandRead+0x7b8>
		}

		if ( DUTY_TRAJECTORY_LSPB == mode_trajec) {
 8001502:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d103      	bne.n	8001512 <commandRead+0x56a>
			duty_cmd->trajec_type = DUTY_TRAJECTORY_LSPB;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2200      	movs	r2, #0
 800150e:	741a      	strb	r2, [r3, #16]
 8001510:	e009      	b.n	8001526 <commandRead+0x57e>
		} else if ( DUTY_TRAJECTORY_SCURVE == mode_trajec) {
 8001512:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001516:	2b01      	cmp	r3, #1
 8001518:	d103      	bne.n	8001522 <commandRead+0x57a>
			duty_cmd->trajec_type = DUTY_TRAJECTORY_SCURVE;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2201      	movs	r2, #1
 800151e:	741a      	strb	r2, [r3, #16]
 8001520:	e001      	b.n	8001526 <commandRead+0x57e>
		} else {
			return CMD_ERROR;
 8001522:	2315      	movs	r3, #21
 8001524:	e11c      	b.n	8001760 <commandRead+0x7b8>
		}
		return CMD_SETTING;
 8001526:	230a      	movs	r3, #10
 8001528:	e11a      	b.n	8001760 <commandRead+0x7b8>

	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_METHOD_CHANGE])) {
 800152a:	4b1d      	ldr	r3, [pc, #116]	; (80015a0 <commandRead+0x5f8>)
 800152c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800152e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001532:	4611      	mov	r1, r2
 8001534:	4618      	mov	r0, r3
 8001536:	f7fe fe4b 	bl	80001d0 <strcmp>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d139      	bne.n	80015b4 <commandRead+0x60c>
		int8_t method;
		result = sscanf( para, "%d",
 8001540:	f107 021c 	add.w	r2, r7, #28
 8001544:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001548:	4918      	ldr	r1, [pc, #96]	; (80015ac <commandRead+0x604>)
 800154a:	4618      	mov	r0, r3
 800154c:	f015 fa64 	bl	8016a18 <siscanf>
 8001550:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
						(int *)&method);
		if (1 != result) {
 8001554:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001558:	2b01      	cmp	r3, #1
 800155a:	d001      	beq.n	8001560 <commandRead+0x5b8>
			return CMD_ERROR;
 800155c:	2315      	movs	r3, #21
 800155e:	e0ff      	b.n	8001760 <commandRead+0x7b8>
		}
		if (SCARA_METHOD_MANUAL == method) {
 8001560:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d103      	bne.n	8001570 <commandRead+0x5c8>
			duty_cmd->robot_method = SCARA_METHOD_MANUAL;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2200      	movs	r2, #0
 800156c:	705a      	strb	r2, [r3, #1]
 800156e:	e011      	b.n	8001594 <commandRead+0x5ec>
		} else if (SCARA_METHOD_SEMI_AUTO == method) {
 8001570:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8001574:	2b01      	cmp	r3, #1
 8001576:	d103      	bne.n	8001580 <commandRead+0x5d8>
			duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2201      	movs	r2, #1
 800157c:	705a      	strb	r2, [r3, #1]
 800157e:	e009      	b.n	8001594 <commandRead+0x5ec>
		} else if (SCARA_METHOD_AUTO == method) {
 8001580:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8001584:	2b02      	cmp	r3, #2
 8001586:	d103      	bne.n	8001590 <commandRead+0x5e8>
			duty_cmd->robot_method = SCARA_METHOD_AUTO;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2202      	movs	r2, #2
 800158c:	705a      	strb	r2, [r3, #1]
 800158e:	e001      	b.n	8001594 <commandRead+0x5ec>
		} else {
			return CMD_ERROR;
 8001590:	2315      	movs	r3, #21
 8001592:	e0e5      	b.n	8001760 <commandRead+0x7b8>
		}
		duty_cmd->change_method = TRUE;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2201      	movs	r2, #1
 8001598:	701a      	strb	r2, [r3, #0]
		return CMD_METHOD_CHANGE;
 800159a:	230b      	movs	r3, #11
 800159c:	e0e0      	b.n	8001760 <commandRead+0x7b8>
 800159e:	bf00      	nop
 80015a0:	20000000 	.word	0x20000000
 80015a4:	0801b97c 	.word	0x0801b97c
 80015a8:	0801b9c4 	.word	0x0801b9c4
 80015ac:	0801b9d8 	.word	0x0801b9d8
 80015b0:	0801b9dc 	.word	0x0801b9dc
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_JOB_NEW])) {
 80015b4:	4b6d      	ldr	r3, [pc, #436]	; (800176c <commandRead+0x7c4>)
 80015b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015b8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80015bc:	4611      	mov	r1, r2
 80015be:	4618      	mov	r0, r3
 80015c0:	f7fe fe06 	bl	80001d0 <strcmp>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d107      	bne.n	80015da <commandRead+0x632>
		duty_cmd->robot_method = SCARA_METHOD_AUTO;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2202      	movs	r2, #2
 80015ce:	705a      	strb	r2, [r3, #1]
		duty_cmd->change_method = FALSE;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2200      	movs	r2, #0
 80015d4:	701a      	strb	r2, [r3, #0]
		return CMD_JOB_NEW;
 80015d6:	230c      	movs	r3, #12
 80015d8:	e0c2      	b.n	8001760 <commandRead+0x7b8>
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_JOB_DELETE])) {
 80015da:	4b64      	ldr	r3, [pc, #400]	; (800176c <commandRead+0x7c4>)
 80015dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015de:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80015e2:	4611      	mov	r1, r2
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7fe fdf3 	bl	80001d0 <strcmp>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d107      	bne.n	8001600 <commandRead+0x658>
		duty_cmd->robot_method = SCARA_METHOD_AUTO;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2202      	movs	r2, #2
 80015f4:	705a      	strb	r2, [r3, #1]
		duty_cmd->change_method = FALSE;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2200      	movs	r2, #0
 80015fa:	701a      	strb	r2, [r3, #0]
		return CMD_JOB_DELETE;
 80015fc:	230d      	movs	r3, #13
 80015fe:	e0af      	b.n	8001760 <commandRead+0x7b8>
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_JOB_PUSH_MOVE_LINE])) {
 8001600:	4b5a      	ldr	r3, [pc, #360]	; (800176c <commandRead+0x7c4>)
 8001602:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001604:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001608:	4611      	mov	r1, r2
 800160a:	4618      	mov	r0, r3
 800160c:	f7fe fde0 	bl	80001d0 <strcmp>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d107      	bne.n	8001626 <commandRead+0x67e>
		duty_cmd->robot_method = SCARA_METHOD_AUTO;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2202      	movs	r2, #2
 800161a:	705a      	strb	r2, [r3, #1]
		duty_cmd->change_method = FALSE;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2200      	movs	r2, #0
 8001620:	701a      	strb	r2, [r3, #0]
		return CMD_JOB_PUSH_MOVE_LINE;
 8001622:	230e      	movs	r3, #14
 8001624:	e09c      	b.n	8001760 <commandRead+0x7b8>
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_JOB_PUSH_MOVE_JOINT])) {
 8001626:	4b51      	ldr	r3, [pc, #324]	; (800176c <commandRead+0x7c4>)
 8001628:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800162a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800162e:	4611      	mov	r1, r2
 8001630:	4618      	mov	r0, r3
 8001632:	f7fe fdcd 	bl	80001d0 <strcmp>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d107      	bne.n	800164c <commandRead+0x6a4>
		duty_cmd->robot_method = SCARA_METHOD_AUTO;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2202      	movs	r2, #2
 8001640:	705a      	strb	r2, [r3, #1]
		duty_cmd->change_method = FALSE;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2200      	movs	r2, #0
 8001646:	701a      	strb	r2, [r3, #0]
		return CMD_JOB_PUSH_MOVE_JOINT;
 8001648:	230f      	movs	r3, #15
 800164a:	e089      	b.n	8001760 <commandRead+0x7b8>
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_JOB_PUSH_OUTPUT])) {
 800164c:	4b47      	ldr	r3, [pc, #284]	; (800176c <commandRead+0x7c4>)
 800164e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001650:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001654:	4611      	mov	r1, r2
 8001656:	4618      	mov	r0, r3
 8001658:	f7fe fdba 	bl	80001d0 <strcmp>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d107      	bne.n	8001672 <commandRead+0x6ca>
		duty_cmd->robot_method = SCARA_METHOD_AUTO;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2202      	movs	r2, #2
 8001666:	705a      	strb	r2, [r3, #1]
		duty_cmd->change_method = FALSE;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2200      	movs	r2, #0
 800166c:	701a      	strb	r2, [r3, #0]
		return CMD_JOB_PUSH_OUTPUT;
 800166e:	2310      	movs	r3, #16
 8001670:	e076      	b.n	8001760 <commandRead+0x7b8>
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_JOB_TEST])) {
 8001672:	4b3e      	ldr	r3, [pc, #248]	; (800176c <commandRead+0x7c4>)
 8001674:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001676:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800167a:	4611      	mov	r1, r2
 800167c:	4618      	mov	r0, r3
 800167e:	f7fe fda7 	bl	80001d0 <strcmp>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d107      	bne.n	8001698 <commandRead+0x6f0>
		duty_cmd->robot_method = SCARA_METHOD_AUTO;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2202      	movs	r2, #2
 800168c:	705a      	strb	r2, [r3, #1]
		duty_cmd->change_method = FALSE;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	701a      	strb	r2, [r3, #0]
		return CMD_JOB_TEST;
 8001694:	2311      	movs	r3, #17
 8001696:	e063      	b.n	8001760 <commandRead+0x7b8>
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_JOB_RUN])) {
 8001698:	4b34      	ldr	r3, [pc, #208]	; (800176c <commandRead+0x7c4>)
 800169a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800169c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80016a0:	4611      	mov	r1, r2
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7fe fd94 	bl	80001d0 <strcmp>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d107      	bne.n	80016be <commandRead+0x716>
		duty_cmd->robot_method = SCARA_METHOD_AUTO;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2202      	movs	r2, #2
 80016b2:	705a      	strb	r2, [r3, #1]
		duty_cmd->change_method = FALSE;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2200      	movs	r2, #0
 80016b8:	701a      	strb	r2, [r3, #0]
		return CMD_JOB_RUN;
 80016ba:	2312      	movs	r3, #18
 80016bc:	e050      	b.n	8001760 <commandRead+0x7b8>
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_KEYBOARD])) {
 80016be:	4b2b      	ldr	r3, [pc, #172]	; (800176c <commandRead+0x7c4>)
 80016c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016c2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80016c6:	4611      	mov	r1, r2
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7fe fd81 	bl	80001d0 <strcmp>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d11c      	bne.n	800170e <commandRead+0x766>
		int8_t key_num;
		result = sscanf( para, "%d",
 80016d4:	f107 021b 	add.w	r2, r7, #27
 80016d8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80016dc:	4924      	ldr	r1, [pc, #144]	; (8001770 <commandRead+0x7c8>)
 80016de:	4618      	mov	r0, r3
 80016e0:	f015 f99a 	bl	8016a18 <siscanf>
 80016e4:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
						(int *)&key_num);
		if (1 != result) {
 80016e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d001      	beq.n	80016f4 <commandRead+0x74c>
			return CMD_ERROR;
 80016f0:	2315      	movs	r3, #21
 80016f2:	e035      	b.n	8001760 <commandRead+0x7b8>
		}
		duty_cmd->keyboard = (SCARA_KeyTypeDef)key_num;
 80016f4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80016f8:	b2da      	uxtb	r2, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	70da      	strb	r2, [r3, #3]
		duty_cmd->robot_method = SCARA_METHOD_MANUAL;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2200      	movs	r2, #0
 8001702:	705a      	strb	r2, [r3, #1]
		duty_cmd->change_method = FALSE;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2200      	movs	r2, #0
 8001708:	701a      	strb	r2, [r3, #0]
		return CMD_KEYBOARD;
 800170a:	2313      	movs	r3, #19
 800170c:	e028      	b.n	8001760 <commandRead+0x7b8>
	}
	else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_KEY_SPEED])) {
 800170e:	4b17      	ldr	r3, [pc, #92]	; (800176c <commandRead+0x7c4>)
 8001710:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001712:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001716:	4611      	mov	r1, r2
 8001718:	4618      	mov	r0, r3
 800171a:	f7fe fd59 	bl	80001d0 <strcmp>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d11c      	bne.n	800175e <commandRead+0x7b6>
		int32_t speed;
		result = sscanf( para, "%d",
 8001724:	f107 0214 	add.w	r2, r7, #20
 8001728:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800172c:	4910      	ldr	r1, [pc, #64]	; (8001770 <commandRead+0x7c8>)
 800172e:	4618      	mov	r0, r3
 8001730:	f015 f972 	bl	8016a18 <siscanf>
 8001734:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
						(int *)&speed);
		if (1 != result) {
 8001738:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800173c:	2b01      	cmp	r3, #1
 800173e:	d001      	beq.n	8001744 <commandRead+0x79c>
			return CMD_ERROR;
 8001740:	2315      	movs	r3, #21
 8001742:	e00d      	b.n	8001760 <commandRead+0x7b8>
		}
		// check limit
		if ((speed < SHIFT_SPEED_MIN) || (speed > SHIFT_SPPED_MAX)) {
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	2b00      	cmp	r3, #0
 8001748:	dd02      	ble.n	8001750 <commandRead+0x7a8>
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	2b07      	cmp	r3, #7
 800174e:	dd01      	ble.n	8001754 <commandRead+0x7ac>
			return CMD_ERROR;
 8001750:	2315      	movs	r3, #21
 8001752:	e005      	b.n	8001760 <commandRead+0x7b8>
		}
		duty_cmd->key_speed = speed;
 8001754:	697a      	ldr	r2, [r7, #20]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	605a      	str	r2, [r3, #4]
		return CMD_KEY_SPEED;
 800175a:	2314      	movs	r3, #20
 800175c:	e000      	b.n	8001760 <commandRead+0x7b8>
	}
	// Error command
	else {
		return CMD_ERROR;
 800175e:	2315      	movs	r3, #21
	}
}
 8001760:	4618      	mov	r0, r3
 8001762:	37b0      	adds	r7, #176	; 0xb0
 8001764:	46bd      	mov	sp, r7
 8001766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800176a:	bf00      	nop
 800176c:	20000000 	.word	0x20000000
 8001770:	0801b9d8 	.word	0x0801b9d8

08001774 <commandReply>:

Robot_RespondTypedef	commandReply	(Robot_CommandTypedef cmd_type,
										DUTY_Command_TypeDef duty_cmd,
										uint8_t *detail) {
 8001774:	b082      	sub	sp, #8
 8001776:	b5b0      	push	{r4, r5, r7, lr}
 8001778:	b0de      	sub	sp, #376	; 0x178
 800177a:	af2c      	add	r7, sp, #176	; 0xb0
 800177c:	4601      	mov	r1, r0
 800177e:	f107 00d8 	add.w	r0, r7, #216	; 0xd8
 8001782:	e880 000c 	stmia.w	r0, {r2, r3}
 8001786:	460b      	mov	r3, r1
 8001788:	71fb      	strb	r3, [r7, #7]
	Robot_RespondTypedef ret;

	switch(cmd_type) {
 800178a:	79fb      	ldrb	r3, [r7, #7]
 800178c:	2b15      	cmp	r3, #21
 800178e:	f200 811e 	bhi.w	80019ce <commandReply+0x25a>
 8001792:	a201      	add	r2, pc, #4	; (adr r2, 8001798 <commandReply+0x24>)
 8001794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001798:	080017f1 	.word	0x080017f1
 800179c:	080017f1 	.word	0x080017f1
 80017a0:	080017f1 	.word	0x080017f1
 80017a4:	080017f1 	.word	0x080017f1
 80017a8:	080017f1 	.word	0x080017f1
 80017ac:	080017f1 	.word	0x080017f1
 80017b0:	080017f1 	.word	0x080017f1
 80017b4:	080017f9 	.word	0x080017f9
 80017b8:	08001863 	.word	0x08001863
 80017bc:	08001897 	.word	0x08001897
 80017c0:	080018c5 	.word	0x080018c5
 80017c4:	0800197f 	.word	0x0800197f
 80017c8:	080019eb 	.word	0x080019eb
 80017cc:	080019eb 	.word	0x080019eb
 80017d0:	080019eb 	.word	0x080019eb
 80017d4:	080019eb 	.word	0x080019eb
 80017d8:	080019eb 	.word	0x080019eb
 80017dc:	080019eb 	.word	0x080019eb
 80017e0:	08001987 	.word	0x08001987
 80017e4:	0800198f 	.word	0x0800198f
 80017e8:	08001997 	.word	0x08001997
 80017ec:	080019af 	.word	0x080019af
	case CMD_MOVE_HOME:
	case CMD_MOVE_LINE:
	case CMD_MOVE_CIRCLE:
	case CMD_MOVE_JOINT:
	case CMD_ROTATE_SINGLE:
		ret = RPD_DUTY;
 80017f0:	2309      	movs	r3, #9
 80017f2:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		break;
 80017f6:	e0f9      	b.n	80019ec <commandReply+0x278>
	case CMD_OUTPUT:
		{
			if (1 == duty_cmd.sub_para_int) {
 80017f8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d10d      	bne.n	800181c <commandReply+0xa8>
				scaraSetOutput(1);
 8001800:	2001      	movs	r0, #1
 8001802:	f007 fd39 	bl	8009278 <scaraSetOutput>
				strcpy( (char *)detail, "Output ON");
 8001806:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 800180a:	497d      	ldr	r1, [pc, #500]	; (8001a00 <commandReply+0x28c>)
 800180c:	461a      	mov	r2, r3
 800180e:	460b      	mov	r3, r1
 8001810:	cb03      	ldmia	r3!, {r0, r1}
 8001812:	6010      	str	r0, [r2, #0]
 8001814:	6051      	str	r1, [r2, #4]
 8001816:	881b      	ldrh	r3, [r3, #0]
 8001818:	8113      	strh	r3, [r2, #8]
 800181a:	e01e      	b.n	800185a <commandReply+0xe6>
			} else if (0 == duty_cmd.sub_para_int) {
 800181c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001820:	2b00      	cmp	r3, #0
 8001822:	d10f      	bne.n	8001844 <commandReply+0xd0>
				scaraSetOutput(0);
 8001824:	2000      	movs	r0, #0
 8001826:	f007 fd27 	bl	8009278 <scaraSetOutput>
				strcpy( (char *)detail, "Output OFF");
 800182a:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 800182e:	4975      	ldr	r1, [pc, #468]	; (8001a04 <commandReply+0x290>)
 8001830:	461a      	mov	r2, r3
 8001832:	460b      	mov	r3, r1
 8001834:	cb03      	ldmia	r3!, {r0, r1}
 8001836:	6010      	str	r0, [r2, #0]
 8001838:	6051      	str	r1, [r2, #4]
 800183a:	8819      	ldrh	r1, [r3, #0]
 800183c:	789b      	ldrb	r3, [r3, #2]
 800183e:	8111      	strh	r1, [r2, #8]
 8001840:	7293      	strb	r3, [r2, #10]
 8001842:	e00a      	b.n	800185a <commandReply+0xe6>
			} else {
				strcpy( (char *)detail, "Wrong Value");
 8001844:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 8001848:	4a6f      	ldr	r2, [pc, #444]	; (8001a08 <commandReply+0x294>)
 800184a:	461c      	mov	r4, r3
 800184c:	4613      	mov	r3, r2
 800184e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001850:	6020      	str	r0, [r4, #0]
 8001852:	6061      	str	r1, [r4, #4]
 8001854:	60a2      	str	r2, [r4, #8]
				return RPD_ERROR;
 8001856:	2307      	movs	r3, #7
 8001858:	e0ca      	b.n	80019f0 <commandReply+0x27c>
			}
			ret = RPD_OK;
 800185a:	2308      	movs	r3, #8
 800185c:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		}
		break;
 8001860:	e0c4      	b.n	80019ec <commandReply+0x278>
	case CMD_READ_STATUS:
		{
			SCARA_ModeTypeDef		current_mode;
			SCARA_DutyStateTypeDef 	current_state;
			current_mode	 = scaraGetMode();
 8001862:	f007 fd5b 	bl	800931c <scaraGetMode>
 8001866:	4603      	mov	r3, r0
 8001868:	f887 30c6 	strb.w	r3, [r7, #198]	; 0xc6
			current_state	 = scaraGetDutyState();
 800186c:	f007 fd6e 	bl	800934c <scaraGetDutyState>
 8001870:	4603      	mov	r3, r0
 8001872:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5
			if ( SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_state) {
 8001876:	f897 30c6 	ldrb.w	r3, [r7, #198]	; 0xc6
 800187a:	2b02      	cmp	r3, #2
 800187c:	d107      	bne.n	800188e <commandReply+0x11a>
 800187e:	f897 30c5 	ldrb.w	r3, [r7, #197]	; 0xc5
 8001882:	2b00      	cmp	r3, #0
 8001884:	d103      	bne.n	800188e <commandReply+0x11a>
				ret = RPD_IDLE;
 8001886:	2300      	movs	r3, #0
 8001888:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
			} else {
				ret = RPD_BUSY;
			}
		}
		break;
 800188c:	e0ae      	b.n	80019ec <commandReply+0x278>
				ret = RPD_BUSY;
 800188e:	2301      	movs	r3, #1
 8001890:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		break;
 8001894:	e0aa      	b.n	80019ec <commandReply+0x278>
	case CMD_READ_POSITION:
		{
			SCARA_PositionTypeDef position;
			scaraGetPosition(&position);
 8001896:	f107 0308 	add.w	r3, r7, #8
 800189a:	4618      	mov	r0, r3
 800189c:	f007 fd2e 	bl	80092fc <scaraGetPosition>
			scaraPosition2String((char *)detail, position);
 80018a0:	4668      	mov	r0, sp
 80018a2:	f107 0310 	add.w	r3, r7, #16
 80018a6:	22b0      	movs	r2, #176	; 0xb0
 80018a8:	4619      	mov	r1, r3
 80018aa:	f014 f939 	bl	8015b20 <memcpy>
 80018ae:	f107 0308 	add.w	r3, r7, #8
 80018b2:	cb0c      	ldmia	r3, {r2, r3}
 80018b4:	f8d7 0280 	ldr.w	r0, [r7, #640]	; 0x280
 80018b8:	f007 fd8e 	bl	80093d8 <scaraPosition2String>
			ret =  RPD_POSITION;
 80018bc:	2302      	movs	r3, #2
 80018be:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		}
		break;
 80018c2:	e093      	b.n	80019ec <commandReply+0x278>
	case CMD_SETTING:
		if ( DUTY_COORDINATES_ABS == duty_cmd.coordinate_type) {
 80018c4:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d10a      	bne.n	80018e2 <commandReply+0x16e>
			strcpy( (char *)detail, "ABSOLUTE.");
 80018cc:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 80018d0:	494e      	ldr	r1, [pc, #312]	; (8001a0c <commandReply+0x298>)
 80018d2:	461a      	mov	r2, r3
 80018d4:	460b      	mov	r3, r1
 80018d6:	cb03      	ldmia	r3!, {r0, r1}
 80018d8:	6010      	str	r0, [r2, #0]
 80018da:	6051      	str	r1, [r2, #4]
 80018dc:	881b      	ldrh	r3, [r3, #0]
 80018de:	8113      	strh	r3, [r2, #8]
 80018e0:	e017      	b.n	8001912 <commandReply+0x19e>
		} else if ( DUTY_COORDINATES_REL == duty_cmd.coordinate_type) {
 80018e2:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d10a      	bne.n	8001900 <commandReply+0x18c>
			strcpy( (char *)detail, "RELATIVE.");
 80018ea:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 80018ee:	4948      	ldr	r1, [pc, #288]	; (8001a10 <commandReply+0x29c>)
 80018f0:	461a      	mov	r2, r3
 80018f2:	460b      	mov	r3, r1
 80018f4:	cb03      	ldmia	r3!, {r0, r1}
 80018f6:	6010      	str	r0, [r2, #0]
 80018f8:	6051      	str	r1, [r2, #4]
 80018fa:	881b      	ldrh	r3, [r3, #0]
 80018fc:	8113      	strh	r3, [r2, #8]
 80018fe:	e008      	b.n	8001912 <commandReply+0x19e>
		} else {
			strcat((char *)detail, DETAIL_STATUS[SCARA_STATUS_ERROR_COORDINATE]);
 8001900:	4b44      	ldr	r3, [pc, #272]	; (8001a14 <commandReply+0x2a0>)
 8001902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001904:	4619      	mov	r1, r3
 8001906:	f8d7 0280 	ldr.w	r0, [r7, #640]	; 0x280
 800190a:	f015 f8b1 	bl	8016a70 <strcat>
			return RPD_ERROR;
 800190e:	2307      	movs	r3, #7
 8001910:	e06e      	b.n	80019f0 <commandReply+0x27c>
		}

		if ( DUTY_TRAJECTORY_LSPB == duty_cmd.trajec_type) {
 8001912:	f897 30e8 	ldrb.w	r3, [r7, #232]	; 0xe8
 8001916:	2b00      	cmp	r3, #0
 8001918:	d10e      	bne.n	8001938 <commandReply+0x1c4>
			strcat((char *)detail, " LSPB");
 800191a:	f8d7 0280 	ldr.w	r0, [r7, #640]	; 0x280
 800191e:	f7fe fc61 	bl	80001e4 <strlen>
 8001922:	4603      	mov	r3, r0
 8001924:	461a      	mov	r2, r3
 8001926:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 800192a:	4413      	add	r3, r2
 800192c:	4a3a      	ldr	r2, [pc, #232]	; (8001a18 <commandReply+0x2a4>)
 800192e:	6810      	ldr	r0, [r2, #0]
 8001930:	6018      	str	r0, [r3, #0]
 8001932:	8892      	ldrh	r2, [r2, #4]
 8001934:	809a      	strh	r2, [r3, #4]
 8001936:	e01e      	b.n	8001976 <commandReply+0x202>
		} else if ( DUTY_TRAJECTORY_SCURVE == duty_cmd.trajec_type) {
 8001938:	f897 30e8 	ldrb.w	r3, [r7, #232]	; 0xe8
 800193c:	2b01      	cmp	r3, #1
 800193e:	d111      	bne.n	8001964 <commandReply+0x1f0>
			strcat((char *)detail, " S-CURVE");
 8001940:	f8d7 0280 	ldr.w	r0, [r7, #640]	; 0x280
 8001944:	f7fe fc4e 	bl	80001e4 <strlen>
 8001948:	4603      	mov	r3, r0
 800194a:	461a      	mov	r2, r3
 800194c:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 8001950:	4413      	add	r3, r2
 8001952:	4932      	ldr	r1, [pc, #200]	; (8001a1c <commandReply+0x2a8>)
 8001954:	461a      	mov	r2, r3
 8001956:	460b      	mov	r3, r1
 8001958:	cb03      	ldmia	r3!, {r0, r1}
 800195a:	6010      	str	r0, [r2, #0]
 800195c:	6051      	str	r1, [r2, #4]
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	7213      	strb	r3, [r2, #8]
 8001962:	e008      	b.n	8001976 <commandReply+0x202>
		} else {
			strcat((char *)detail, DETAIL_STATUS[SCARA_STATUS_ERROR_TRAJECTORY]);
 8001964:	4b2b      	ldr	r3, [pc, #172]	; (8001a14 <commandReply+0x2a0>)
 8001966:	695b      	ldr	r3, [r3, #20]
 8001968:	4619      	mov	r1, r3
 800196a:	f8d7 0280 	ldr.w	r0, [r7, #640]	; 0x280
 800196e:	f015 f87f 	bl	8016a70 <strcat>
			return RPD_ERROR;
 8001972:	2307      	movs	r3, #7
 8001974:	e03c      	b.n	80019f0 <commandReply+0x27c>
		}
		ret = RPD_OK;
 8001976:	2308      	movs	r3, #8
 8001978:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		break;
 800197c:	e036      	b.n	80019ec <commandReply+0x278>
	case CMD_METHOD_CHANGE:
		ret = RPD_DUTY;
 800197e:	2309      	movs	r3, #9
 8001980:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		break;
 8001984:	e032      	b.n	80019ec <commandReply+0x278>
	case CMD_JOB_PUSH_OUTPUT:
		break;
	case CMD_JOB_TEST:
		break;
	case CMD_JOB_RUN:
		ret = RPD_DUTY;
 8001986:	2309      	movs	r3, #9
 8001988:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		break;
 800198c:	e02e      	b.n	80019ec <commandReply+0x278>
	case CMD_KEYBOARD:
		ret = RPD_DUTY;
 800198e:	2309      	movs	r3, #9
 8001990:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		break;
 8001994:	e02a      	b.n	80019ec <commandReply+0x278>
	case CMD_KEY_SPEED:
		sprintf((char*) detail, "MANUAL SPEED = %d", duty_cmd.key_speed);
 8001996:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800199a:	461a      	mov	r2, r3
 800199c:	4920      	ldr	r1, [pc, #128]	; (8001a20 <commandReply+0x2ac>)
 800199e:	f8d7 0280 	ldr.w	r0, [r7, #640]	; 0x280
 80019a2:	f015 f819 	bl	80169d8 <siprintf>
		ret = RPD_OK;
 80019a6:	2308      	movs	r3, #8
 80019a8:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		break;
 80019ac:	e01e      	b.n	80019ec <commandReply+0x278>
	case CMD_ERROR:
		strcpy( (char *)detail, "Check parameters");
 80019ae:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 80019b2:	4a1c      	ldr	r2, [pc, #112]	; (8001a24 <commandReply+0x2b0>)
 80019b4:	461d      	mov	r5, r3
 80019b6:	4614      	mov	r4, r2
 80019b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019ba:	6028      	str	r0, [r5, #0]
 80019bc:	6069      	str	r1, [r5, #4]
 80019be:	60aa      	str	r2, [r5, #8]
 80019c0:	60eb      	str	r3, [r5, #12]
 80019c2:	7823      	ldrb	r3, [r4, #0]
 80019c4:	742b      	strb	r3, [r5, #16]
		ret = RPD_ERROR;
 80019c6:	2307      	movs	r3, #7
 80019c8:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		break;
 80019cc:	e00e      	b.n	80019ec <commandReply+0x278>
	default:
		strcpy( (char *)detail, "Unknown command");
 80019ce:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 80019d2:	4a15      	ldr	r2, [pc, #84]	; (8001a28 <commandReply+0x2b4>)
 80019d4:	461c      	mov	r4, r3
 80019d6:	4615      	mov	r5, r2
 80019d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019da:	6020      	str	r0, [r4, #0]
 80019dc:	6061      	str	r1, [r4, #4]
 80019de:	60a2      	str	r2, [r4, #8]
 80019e0:	60e3      	str	r3, [r4, #12]
		ret = RPD_ERROR;
 80019e2:	2307      	movs	r3, #7
 80019e4:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
 80019e8:	e000      	b.n	80019ec <commandReply+0x278>
		break;
 80019ea:	bf00      	nop
	}
	return ret;
 80019ec:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	37c8      	adds	r7, #200	; 0xc8
 80019f4:	46bd      	mov	sp, r7
 80019f6:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80019fa:	b002      	add	sp, #8
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	0801b9e4 	.word	0x0801b9e4
 8001a04:	0801b9f0 	.word	0x0801b9f0
 8001a08:	0801b9fc 	.word	0x0801b9fc
 8001a0c:	0801ba08 	.word	0x0801ba08
 8001a10:	0801ba14 	.word	0x0801ba14
 8001a14:	20000cac 	.word	0x20000cac
 8001a18:	0801ba20 	.word	0x0801ba20
 8001a1c:	0801ba28 	.word	0x0801ba28
 8001a20:	0801ba34 	.word	0x0801ba34
 8001a24:	0801ba48 	.word	0x0801ba48
 8001a28:	0801ba5c 	.word	0x0801ba5c

08001a2c <commandRespond>:


int32_t				commandRespond	(Robot_RespondTypedef rpd,
										int32_t id_command,
										char *detail,
										char *respond) {
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b088      	sub	sp, #32
 8001a30:	af02      	add	r7, sp, #8
 8001a32:	60b9      	str	r1, [r7, #8]
 8001a34:	607a      	str	r2, [r7, #4]
 8001a36:	603b      	str	r3, [r7, #0]
 8001a38:	4603      	mov	r3, r0
 8001a3a:	73fb      	strb	r3, [r7, #15]
	int out_lenght;
	switch(rpd) {
 8001a3c:	7bfb      	ldrb	r3, [r7, #15]
 8001a3e:	2b08      	cmp	r3, #8
 8001a40:	d836      	bhi.n	8001ab0 <commandRespond+0x84>
 8001a42:	a201      	add	r2, pc, #4	; (adr r2, 8001a48 <commandRespond+0x1c>)
 8001a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a48:	08001a6d 	.word	0x08001a6d
 8001a4c:	08001a6d 	.word	0x08001a6d
 8001a50:	08001a93 	.word	0x08001a93
 8001a54:	08001a93 	.word	0x08001a93
 8001a58:	08001a93 	.word	0x08001a93
 8001a5c:	08001a93 	.word	0x08001a93
 8001a60:	08001a93 	.word	0x08001a93
 8001a64:	08001a93 	.word	0x08001a93
 8001a68:	08001a93 	.word	0x08001a93
	case RPD_IDLE:
	case RPD_BUSY:
		{
			uint8_t		isScanLitmit;
			isScanLitmit = scaraIsScanLimit();
 8001a6c:	f007 fc7a 	bl	8009364 <scaraIsScanLimit>
 8001a70:	4603      	mov	r3, r0
 8001a72:	74fb      	strb	r3, [r7, #19]
			out_lenght = snprintf( (char *)respond,
 8001a74:	7bfb      	ldrb	r3, [r7, #15]
 8001a76:	4a12      	ldr	r2, [pc, #72]	; (8001ac0 <commandRespond+0x94>)
 8001a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a7c:	7cfa      	ldrb	r2, [r7, #19]
 8001a7e:	9201      	str	r2, [sp, #4]
 8001a80:	9300      	str	r3, [sp, #0]
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	4a0f      	ldr	r2, [pc, #60]	; (8001ac4 <commandRespond+0x98>)
 8001a86:	2114      	movs	r1, #20
 8001a88:	6838      	ldr	r0, [r7, #0]
 8001a8a:	f014 ff71 	bl	8016970 <sniprintf>
 8001a8e:	6178      	str	r0, [r7, #20]
									"%d %s %d",
									(int)id_command,
									ROBOTRESPOND[rpd],
									(int)isScanLitmit);
		}
		break;
 8001a90:	e010      	b.n	8001ab4 <commandRespond+0x88>
	case RPD_STOP:
	case RPD_ERROR:
	case RPD_OK:

		{
			out_lenght = snprintf( (char *)respond,
 8001a92:	7bfb      	ldrb	r3, [r7, #15]
 8001a94:	4a0a      	ldr	r2, [pc, #40]	; (8001ac0 <commandRespond+0x94>)
 8001a96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	9201      	str	r2, [sp, #4]
 8001a9e:	9300      	str	r3, [sp, #0]
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	4a09      	ldr	r2, [pc, #36]	; (8001ac8 <commandRespond+0x9c>)
 8001aa4:	2191      	movs	r1, #145	; 0x91
 8001aa6:	6838      	ldr	r0, [r7, #0]
 8001aa8:	f014 ff62 	bl	8016970 <sniprintf>
 8001aac:	6178      	str	r0, [r7, #20]
									"%d %s %s",
									(int)id_command,
									ROBOTRESPOND[rpd],
									(char *)detail);
		}
		break;
 8001aae:	e001      	b.n	8001ab4 <commandRespond+0x88>
	default:
		out_lenght = 0;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	617b      	str	r3, [r7, #20]
	}

	return (int32_t)out_lenght;
 8001ab4:	697b      	ldr	r3, [r7, #20]
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3718      	adds	r7, #24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	20000054 	.word	0x20000054
 8001ac4:	0801ba6c 	.word	0x0801ba6c
 8001ac8:	0801ba78 	.word	0x0801ba78

08001acc <LOG_REPORT>:
 *  line		: line code number
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t LOG_REPORT(char *message, uint16_t line) {
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b096      	sub	sp, #88	; 0x58
 8001ad0:	af02      	add	r7, sp, #8
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	807b      	strh	r3, [r7, #2]
	uint8_t temp_buff[64];
	int32_t len;

	len = snprintf((char*)temp_buff, 63, "%d, %s \r\n", line, message);
 8001ad8:	887a      	ldrh	r2, [r7, #2]
 8001ada:	f107 0008 	add.w	r0, r7, #8
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	9300      	str	r3, [sp, #0]
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	4a17      	ldr	r2, [pc, #92]	; (8001b44 <LOG_REPORT+0x78>)
 8001ae6:	213f      	movs	r1, #63	; 0x3f
 8001ae8:	f014 ff42 	bl	8016970 <sniprintf>
 8001aec:	64f8      	str	r0, [r7, #76]	; 0x4c
	if (-1 == len) {
 8001aee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001af4:	d101      	bne.n	8001afa <LOG_REPORT+0x2e>
		return FALSE;
 8001af6:	2300      	movs	r3, #0
 8001af8:	e01f      	b.n	8001b3a <LOG_REPORT+0x6e>
	}
	ringBuff_PushArray(&uart_tx_ringbuff, temp_buff, len);
 8001afa:	f107 0308 	add.w	r3, r7, #8
 8001afe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001b00:	4619      	mov	r1, r3
 8001b02:	4811      	ldr	r0, [pc, #68]	; (8001b48 <LOG_REPORT+0x7c>)
 8001b04:	f002 f897 	bl	8003c36 <ringBuff_PushArray>
	if (HAL_DMA_GetState(&hdma_uart4_tx) == HAL_DMA_STATE_BUSY) {
 8001b08:	4810      	ldr	r0, [pc, #64]	; (8001b4c <LOG_REPORT+0x80>)
 8001b0a:	f009 ff47 	bl	800b99c <HAL_DMA_GetState>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d101      	bne.n	8001b18 <LOG_REPORT+0x4c>
		return TRUE;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e010      	b.n	8001b3a <LOG_REPORT+0x6e>
	}// dma busy
	uint16_t size_dma;
	size_dma = ringBuff_PopArray(&uart_tx_ringbuff, log_uart_dma_buff, LOG_BUFFER_SIZE);
 8001b18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b1c:	490c      	ldr	r1, [pc, #48]	; (8001b50 <LOG_REPORT+0x84>)
 8001b1e:	480a      	ldr	r0, [pc, #40]	; (8001b48 <LOG_REPORT+0x7c>)
 8001b20:	f002 f8b1 	bl	8003c86 <ringBuff_PopArray>
 8001b24:	4603      	mov	r3, r0
 8001b26:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	HAL_UART_Transmit_DMA(&huart4, log_uart_dma_buff, size_dma);
 8001b2a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001b2e:	461a      	mov	r2, r3
 8001b30:	4907      	ldr	r1, [pc, #28]	; (8001b50 <LOG_REPORT+0x84>)
 8001b32:	4808      	ldr	r0, [pc, #32]	; (8001b54 <LOG_REPORT+0x88>)
 8001b34:	f00c fb44 	bl	800e1c0 <HAL_UART_Transmit_DMA>
	return TRUE;
 8001b38:	2301      	movs	r3, #1
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3750      	adds	r7, #80	; 0x50
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	0801ba84 	.word	0x0801ba84
 8001b48:	20000894 	.word	0x20000894
 8001b4c:	20006178 	.word	0x20006178
 8001b50:	2000520c 	.word	0x2000520c
 8001b54:	20006138 	.word	0x20006138

08001b58 <double2string>:

int32_t	double2string( uint8_t *result, double value, uint8_t precision) {
 8001b58:	b5b0      	push	{r4, r5, r7, lr}
 8001b5a:	b090      	sub	sp, #64	; 0x40
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	ed87 0b00 	vstr	d0, [r7]
 8001b64:	460b      	mov	r3, r1
 8001b66:	72fb      	strb	r3, [r7, #11]
	uint8_t le[6];
	int8_t sign;
	double temp1, temp2;
	int32_t index;

	if((precision < 0) || (6 < precision)) {
 8001b68:	7afb      	ldrb	r3, [r7, #11]
 8001b6a:	2b06      	cmp	r3, #6
 8001b6c:	d901      	bls.n	8001b72 <double2string+0x1a>
		precision = 6;
 8001b6e:	2306      	movs	r3, #6
 8001b70:	72fb      	strb	r3, [r7, #11]
	}

	if(value < 0) {
 8001b72:	f04f 0200 	mov.w	r2, #0
 8001b76:	f04f 0300 	mov.w	r3, #0
 8001b7a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b7e:	f7fe ffbd 	bl	8000afc <__aeabi_dcmplt>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d003      	beq.n	8001b90 <double2string+0x38>
		sign = -1;
 8001b88:	23ff      	movs	r3, #255	; 0xff
 8001b8a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001b8e:	e002      	b.n	8001b96 <double2string+0x3e>
	} else {
		sign = 1;
 8001b90:	2301      	movs	r3, #1
 8001b92:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}
	value = value*sign;
 8001b96:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7fe fcd2 	bl	8000544 <__aeabi_i2d>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	460c      	mov	r4, r1
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	4623      	mov	r3, r4
 8001ba8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001bac:	f7fe fd34 	bl	8000618 <__aeabi_dmul>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	460c      	mov	r4, r1
 8001bb4:	e9c7 3400 	strd	r3, r4, [r7]

	if (value > 10000.0f) {
 8001bb8:	a307      	add	r3, pc, #28	; (adr r3, 8001bd8 <double2string+0x80>)
 8001bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bbe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001bc2:	f7fe ffb9 	bl	8000b38 <__aeabi_dcmpgt>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d009      	beq.n	8001be0 <double2string+0x88>
		return -1;
 8001bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8001bd0:	e265      	b.n	800209e <double2string+0x546>
 8001bd2:	bf00      	nop
 8001bd4:	f3af 8000 	nop.w
 8001bd8:	00000000 	.word	0x00000000
 8001bdc:	40c38800 	.word	0x40c38800
	}

	nguyen[0] 	= (int32_t)value/1000;
 8001be0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001be4:	f7fe ffc8 	bl	8000b78 <__aeabi_d2iz>
 8001be8:	4603      	mov	r3, r0
 8001bea:	4acf      	ldr	r2, [pc, #828]	; (8001f28 <double2string+0x3d0>)
 8001bec:	fb82 1203 	smull	r1, r2, r2, r3
 8001bf0:	1192      	asrs	r2, r2, #6
 8001bf2:	17db      	asrs	r3, r3, #31
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	773b      	strb	r3, [r7, #28]
	nguyen[1]	= (int32_t)value/100 - nguyen[0]*10;
 8001bfa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001bfe:	f7fe ffbb 	bl	8000b78 <__aeabi_d2iz>
 8001c02:	4603      	mov	r3, r0
 8001c04:	4ac9      	ldr	r2, [pc, #804]	; (8001f2c <double2string+0x3d4>)
 8001c06:	fb82 1203 	smull	r1, r2, r2, r3
 8001c0a:	1152      	asrs	r2, r2, #5
 8001c0c:	17db      	asrs	r3, r3, #31
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	b2da      	uxtb	r2, r3
 8001c12:	7f3b      	ldrb	r3, [r7, #28]
 8001c14:	4619      	mov	r1, r3
 8001c16:	0149      	lsls	r1, r1, #5
 8001c18:	1ac9      	subs	r1, r1, r3
 8001c1a:	0089      	lsls	r1, r1, #2
 8001c1c:	1acb      	subs	r3, r1, r3
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	4413      	add	r3, r2
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	777b      	strb	r3, [r7, #29]
	nguyen[2]	= (int32_t)value/10 - nguyen[0]*100 - nguyen[1]*10;
 8001c28:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c2c:	f7fe ffa4 	bl	8000b78 <__aeabi_d2iz>
 8001c30:	4603      	mov	r3, r0
 8001c32:	4abf      	ldr	r2, [pc, #764]	; (8001f30 <double2string+0x3d8>)
 8001c34:	fb82 1203 	smull	r1, r2, r2, r3
 8001c38:	1092      	asrs	r2, r2, #2
 8001c3a:	17db      	asrs	r3, r3, #31
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	b2da      	uxtb	r2, r3
 8001c40:	7f7b      	ldrb	r3, [r7, #29]
 8001c42:	4619      	mov	r1, r3
 8001c44:	0149      	lsls	r1, r1, #5
 8001c46:	1ac9      	subs	r1, r1, r3
 8001c48:	0089      	lsls	r1, r1, #2
 8001c4a:	1acb      	subs	r3, r1, r3
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	b2d9      	uxtb	r1, r3
 8001c50:	7f3b      	ldrb	r3, [r7, #28]
 8001c52:	4618      	mov	r0, r3
 8001c54:	0080      	lsls	r0, r0, #2
 8001c56:	4418      	add	r0, r3
 8001c58:	00c0      	lsls	r0, r0, #3
 8001c5a:	1ac3      	subs	r3, r0, r3
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	440b      	add	r3, r1
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	4413      	add	r3, r2
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	77bb      	strb	r3, [r7, #30]
	nguyen[3]	= (int32_t)value - nguyen[0]*1000 - nguyen[1]*100 - nguyen[2]*10;
 8001c6a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c6e:	f7fe ff83 	bl	8000b78 <__aeabi_d2iz>
 8001c72:	4603      	mov	r3, r0
 8001c74:	b2da      	uxtb	r2, r3
 8001c76:	7f7b      	ldrb	r3, [r7, #29]
 8001c78:	4619      	mov	r1, r3
 8001c7a:	0089      	lsls	r1, r1, #2
 8001c7c:	4419      	add	r1, r3
 8001c7e:	00c9      	lsls	r1, r1, #3
 8001c80:	1acb      	subs	r3, r1, r3
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	b2d9      	uxtb	r1, r3
 8001c86:	7f3b      	ldrb	r3, [r7, #28]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	0040      	lsls	r0, r0, #1
 8001c8c:	4403      	add	r3, r0
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	440b      	add	r3, r1
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	4413      	add	r3, r2
 8001c98:	b2da      	uxtb	r2, r3
 8001c9a:	7fbb      	ldrb	r3, [r7, #30]
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	0149      	lsls	r1, r1, #5
 8001ca0:	1ac9      	subs	r1, r1, r3
 8001ca2:	0089      	lsls	r1, r1, #2
 8001ca4:	1acb      	subs	r3, r1, r3
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	4413      	add	r3, r2
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	77fb      	strb	r3, [r7, #31]

	temp1	= (value - nguyen[0]*1000 - nguyen[1]*100 - nguyen[2]*10 - nguyen[3])*1000;
 8001cb0:	7f3b      	ldrb	r3, [r7, #28]
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cb8:	fb03 f302 	mul.w	r3, r3, r2
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7fe fc41 	bl	8000544 <__aeabi_i2d>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	460c      	mov	r4, r1
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	4623      	mov	r3, r4
 8001cca:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001cce:	f7fe faeb 	bl	80002a8 <__aeabi_dsub>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	460c      	mov	r4, r1
 8001cd6:	4625      	mov	r5, r4
 8001cd8:	461c      	mov	r4, r3
 8001cda:	7f7b      	ldrb	r3, [r7, #29]
 8001cdc:	461a      	mov	r2, r3
 8001cde:	2364      	movs	r3, #100	; 0x64
 8001ce0:	fb03 f302 	mul.w	r3, r3, r2
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7fe fc2d 	bl	8000544 <__aeabi_i2d>
 8001cea:	4602      	mov	r2, r0
 8001cec:	460b      	mov	r3, r1
 8001cee:	4620      	mov	r0, r4
 8001cf0:	4629      	mov	r1, r5
 8001cf2:	f7fe fad9 	bl	80002a8 <__aeabi_dsub>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	460c      	mov	r4, r1
 8001cfa:	4625      	mov	r5, r4
 8001cfc:	461c      	mov	r4, r3
 8001cfe:	7fbb      	ldrb	r3, [r7, #30]
 8001d00:	461a      	mov	r2, r3
 8001d02:	4613      	mov	r3, r2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	4413      	add	r3, r2
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7fe fc1a 	bl	8000544 <__aeabi_i2d>
 8001d10:	4602      	mov	r2, r0
 8001d12:	460b      	mov	r3, r1
 8001d14:	4620      	mov	r0, r4
 8001d16:	4629      	mov	r1, r5
 8001d18:	f7fe fac6 	bl	80002a8 <__aeabi_dsub>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	460c      	mov	r4, r1
 8001d20:	4625      	mov	r5, r4
 8001d22:	461c      	mov	r4, r3
 8001d24:	7ffb      	ldrb	r3, [r7, #31]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7fe fc0c 	bl	8000544 <__aeabi_i2d>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	460b      	mov	r3, r1
 8001d30:	4620      	mov	r0, r4
 8001d32:	4629      	mov	r1, r5
 8001d34:	f7fe fab8 	bl	80002a8 <__aeabi_dsub>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	460c      	mov	r4, r1
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	4621      	mov	r1, r4
 8001d40:	f04f 0200 	mov.w	r2, #0
 8001d44:	4b7b      	ldr	r3, [pc, #492]	; (8001f34 <double2string+0x3dc>)
 8001d46:	f7fe fc67 	bl	8000618 <__aeabi_dmul>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	460c      	mov	r4, r1
 8001d4e:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	le[0] 	= (int32_t)temp1/100;
 8001d52:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001d56:	f7fe ff0f 	bl	8000b78 <__aeabi_d2iz>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	4a73      	ldr	r2, [pc, #460]	; (8001f2c <double2string+0x3d4>)
 8001d5e:	fb82 1203 	smull	r1, r2, r2, r3
 8001d62:	1152      	asrs	r2, r2, #5
 8001d64:	17db      	asrs	r3, r3, #31
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	753b      	strb	r3, [r7, #20]
	le[1] 	= (int32_t)temp1/10 - le[0]*10;
 8001d6c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001d70:	f7fe ff02 	bl	8000b78 <__aeabi_d2iz>
 8001d74:	4603      	mov	r3, r0
 8001d76:	4a6e      	ldr	r2, [pc, #440]	; (8001f30 <double2string+0x3d8>)
 8001d78:	fb82 1203 	smull	r1, r2, r2, r3
 8001d7c:	1092      	asrs	r2, r2, #2
 8001d7e:	17db      	asrs	r3, r3, #31
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	b2da      	uxtb	r2, r3
 8001d84:	7d3b      	ldrb	r3, [r7, #20]
 8001d86:	4619      	mov	r1, r3
 8001d88:	0149      	lsls	r1, r1, #5
 8001d8a:	1ac9      	subs	r1, r1, r3
 8001d8c:	0089      	lsls	r1, r1, #2
 8001d8e:	1acb      	subs	r3, r1, r3
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	4413      	add	r3, r2
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	757b      	strb	r3, [r7, #21]
	le[2]	= (int32_t)temp1 - le[0]*100 - le[1]*10;
 8001d9a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001d9e:	f7fe feeb 	bl	8000b78 <__aeabi_d2iz>
 8001da2:	4603      	mov	r3, r0
 8001da4:	b2da      	uxtb	r2, r3
 8001da6:	7d7b      	ldrb	r3, [r7, #21]
 8001da8:	4619      	mov	r1, r3
 8001daa:	0149      	lsls	r1, r1, #5
 8001dac:	1ac9      	subs	r1, r1, r3
 8001dae:	0089      	lsls	r1, r1, #2
 8001db0:	1acb      	subs	r3, r1, r3
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	b2d9      	uxtb	r1, r3
 8001db6:	7d3b      	ldrb	r3, [r7, #20]
 8001db8:	4618      	mov	r0, r3
 8001dba:	0080      	lsls	r0, r0, #2
 8001dbc:	4418      	add	r0, r3
 8001dbe:	00c0      	lsls	r0, r0, #3
 8001dc0:	1ac3      	subs	r3, r0, r3
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	440b      	add	r3, r1
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	4413      	add	r3, r2
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	75bb      	strb	r3, [r7, #22]

	temp2	= (temp1 - le[0]*100 - le[1]*10 - le[2])*1000;
 8001dd0:	7d3b      	ldrb	r3, [r7, #20]
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	2364      	movs	r3, #100	; 0x64
 8001dd6:	fb03 f302 	mul.w	r3, r3, r2
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7fe fbb2 	bl	8000544 <__aeabi_i2d>
 8001de0:	4603      	mov	r3, r0
 8001de2:	460c      	mov	r4, r1
 8001de4:	461a      	mov	r2, r3
 8001de6:	4623      	mov	r3, r4
 8001de8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001dec:	f7fe fa5c 	bl	80002a8 <__aeabi_dsub>
 8001df0:	4603      	mov	r3, r0
 8001df2:	460c      	mov	r4, r1
 8001df4:	4625      	mov	r5, r4
 8001df6:	461c      	mov	r4, r3
 8001df8:	7d7b      	ldrb	r3, [r7, #21]
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	4413      	add	r3, r2
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7fe fb9d 	bl	8000544 <__aeabi_i2d>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	4620      	mov	r0, r4
 8001e10:	4629      	mov	r1, r5
 8001e12:	f7fe fa49 	bl	80002a8 <__aeabi_dsub>
 8001e16:	4603      	mov	r3, r0
 8001e18:	460c      	mov	r4, r1
 8001e1a:	4625      	mov	r5, r4
 8001e1c:	461c      	mov	r4, r3
 8001e1e:	7dbb      	ldrb	r3, [r7, #22]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7fe fb8f 	bl	8000544 <__aeabi_i2d>
 8001e26:	4602      	mov	r2, r0
 8001e28:	460b      	mov	r3, r1
 8001e2a:	4620      	mov	r0, r4
 8001e2c:	4629      	mov	r1, r5
 8001e2e:	f7fe fa3b 	bl	80002a8 <__aeabi_dsub>
 8001e32:	4603      	mov	r3, r0
 8001e34:	460c      	mov	r4, r1
 8001e36:	4618      	mov	r0, r3
 8001e38:	4621      	mov	r1, r4
 8001e3a:	f04f 0200 	mov.w	r2, #0
 8001e3e:	4b3d      	ldr	r3, [pc, #244]	; (8001f34 <double2string+0x3dc>)
 8001e40:	f7fe fbea 	bl	8000618 <__aeabi_dmul>
 8001e44:	4603      	mov	r3, r0
 8001e46:	460c      	mov	r4, r1
 8001e48:	e9c7 3408 	strd	r3, r4, [r7, #32]
	le[3] 	= (int32_t)temp2/100;
 8001e4c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e50:	f7fe fe92 	bl	8000b78 <__aeabi_d2iz>
 8001e54:	4603      	mov	r3, r0
 8001e56:	4a35      	ldr	r2, [pc, #212]	; (8001f2c <double2string+0x3d4>)
 8001e58:	fb82 1203 	smull	r1, r2, r2, r3
 8001e5c:	1152      	asrs	r2, r2, #5
 8001e5e:	17db      	asrs	r3, r3, #31
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	75fb      	strb	r3, [r7, #23]
	le[4] 	= (int32_t)temp2/10 - le[3]*10;
 8001e66:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e6a:	f7fe fe85 	bl	8000b78 <__aeabi_d2iz>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	4a2f      	ldr	r2, [pc, #188]	; (8001f30 <double2string+0x3d8>)
 8001e72:	fb82 1203 	smull	r1, r2, r2, r3
 8001e76:	1092      	asrs	r2, r2, #2
 8001e78:	17db      	asrs	r3, r3, #31
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	b2da      	uxtb	r2, r3
 8001e7e:	7dfb      	ldrb	r3, [r7, #23]
 8001e80:	4619      	mov	r1, r3
 8001e82:	0149      	lsls	r1, r1, #5
 8001e84:	1ac9      	subs	r1, r1, r3
 8001e86:	0089      	lsls	r1, r1, #2
 8001e88:	1acb      	subs	r3, r1, r3
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	4413      	add	r3, r2
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	763b      	strb	r3, [r7, #24]
	le[5]	= (int32_t)temp2 - le[3]*100 - le[4]*10;
 8001e94:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e98:	f7fe fe6e 	bl	8000b78 <__aeabi_d2iz>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	b2da      	uxtb	r2, r3
 8001ea0:	7e3b      	ldrb	r3, [r7, #24]
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	0149      	lsls	r1, r1, #5
 8001ea6:	1ac9      	subs	r1, r1, r3
 8001ea8:	0089      	lsls	r1, r1, #2
 8001eaa:	1acb      	subs	r3, r1, r3
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	b2d9      	uxtb	r1, r3
 8001eb0:	7dfb      	ldrb	r3, [r7, #23]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	0080      	lsls	r0, r0, #2
 8001eb6:	4418      	add	r0, r3
 8001eb8:	00c0      	lsls	r0, r0, #3
 8001eba:	1ac3      	subs	r3, r0, r3
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	440b      	add	r3, r1
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	4413      	add	r3, r2
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	767b      	strb	r3, [r7, #25]
	// Rounding
	if ((temp2 - le[3]*1000 - le[4]*100 - le[5]) >= 0.5) {
 8001eca:	7dfb      	ldrb	r3, [r7, #23]
 8001ecc:	461a      	mov	r2, r3
 8001ece:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ed2:	fb03 f302 	mul.w	r3, r3, r2
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7fe fb34 	bl	8000544 <__aeabi_i2d>
 8001edc:	4603      	mov	r3, r0
 8001ede:	460c      	mov	r4, r1
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	4623      	mov	r3, r4
 8001ee4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001ee8:	f7fe f9de 	bl	80002a8 <__aeabi_dsub>
 8001eec:	4603      	mov	r3, r0
 8001eee:	460c      	mov	r4, r1
 8001ef0:	4625      	mov	r5, r4
 8001ef2:	461c      	mov	r4, r3
 8001ef4:	7e3b      	ldrb	r3, [r7, #24]
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	2364      	movs	r3, #100	; 0x64
 8001efa:	fb03 f302 	mul.w	r3, r3, r2
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7fe fb20 	bl	8000544 <__aeabi_i2d>
 8001f04:	4602      	mov	r2, r0
 8001f06:	460b      	mov	r3, r1
 8001f08:	4620      	mov	r0, r4
 8001f0a:	4629      	mov	r1, r5
 8001f0c:	f7fe f9cc 	bl	80002a8 <__aeabi_dsub>
 8001f10:	4603      	mov	r3, r0
 8001f12:	460c      	mov	r4, r1
 8001f14:	4625      	mov	r5, r4
 8001f16:	461c      	mov	r4, r3
 8001f18:	7e7b      	ldrb	r3, [r7, #25]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7fe fb12 	bl	8000544 <__aeabi_i2d>
 8001f20:	4602      	mov	r2, r0
 8001f22:	460b      	mov	r3, r1
 8001f24:	e008      	b.n	8001f38 <double2string+0x3e0>
 8001f26:	bf00      	nop
 8001f28:	10624dd3 	.word	0x10624dd3
 8001f2c:	51eb851f 	.word	0x51eb851f
 8001f30:	66666667 	.word	0x66666667
 8001f34:	408f4000 	.word	0x408f4000
 8001f38:	4620      	mov	r0, r4
 8001f3a:	4629      	mov	r1, r5
 8001f3c:	f7fe f9b4 	bl	80002a8 <__aeabi_dsub>
 8001f40:	4603      	mov	r3, r0
 8001f42:	460c      	mov	r4, r1
 8001f44:	4618      	mov	r0, r3
 8001f46:	4621      	mov	r1, r4
 8001f48:	f04f 0200 	mov.w	r2, #0
 8001f4c:	4b56      	ldr	r3, [pc, #344]	; (80020a8 <double2string+0x550>)
 8001f4e:	f7fe fde9 	bl	8000b24 <__aeabi_dcmpge>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d003      	beq.n	8001f60 <double2string+0x408>
		le[5]++;
 8001f58:	7e7b      	ldrb	r3, [r7, #25]
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	767b      	strb	r3, [r7, #25]
	}

	index = 0;
 8001f60:	2300      	movs	r3, #0
 8001f62:	63bb      	str	r3, [r7, #56]	; 0x38

	if( -1 == sign) {
 8001f64:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8001f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f6c:	d107      	bne.n	8001f7e <double2string+0x426>
		*(result + index++) = '-'; // Negative
 8001f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f70:	1c5a      	adds	r2, r3, #1
 8001f72:	63ba      	str	r2, [r7, #56]	; 0x38
 8001f74:	461a      	mov	r2, r3
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	4413      	add	r3, r2
 8001f7a:	222d      	movs	r2, #45	; 0x2d
 8001f7c:	701a      	strb	r2, [r3, #0]
	}
	// Find first position
	if ( value < 1) {
 8001f7e:	f04f 0200 	mov.w	r2, #0
 8001f82:	4b4a      	ldr	r3, [pc, #296]	; (80020ac <double2string+0x554>)
 8001f84:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f88:	f7fe fdb8 	bl	8000afc <__aeabi_dcmplt>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d008      	beq.n	8001fa4 <double2string+0x44c>
		*(result + index++) = 0x30;
 8001f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f94:	1c5a      	adds	r2, r3, #1
 8001f96:	63ba      	str	r2, [r7, #56]	; 0x38
 8001f98:	461a      	mov	r2, r3
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	2230      	movs	r2, #48	; 0x30
 8001fa0:	701a      	strb	r2, [r3, #0]
 8001fa2:	e04b      	b.n	800203c <double2string+0x4e4>
	} else {
		int8_t i = 0;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		for( ; i < 4; i++) {
 8001faa:	e027      	b.n	8001ffc <double2string+0x4a4>
			if (nguyen[i] > 0) {
 8001fac:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001fb0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001fb4:	4413      	add	r3, r2
 8001fb6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d017      	beq.n	8001fee <double2string+0x496>
				*(result + index++) = nguyen[i] + 0x30;
 8001fbe:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001fc2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001fc6:	4413      	add	r3, r2
 8001fc8:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 8001fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fce:	1c59      	adds	r1, r3, #1
 8001fd0:	63b9      	str	r1, [r7, #56]	; 0x38
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	440b      	add	r3, r1
 8001fd8:	3230      	adds	r2, #48	; 0x30
 8001fda:	b2d2      	uxtb	r2, r2
 8001fdc:	701a      	strb	r2, [r3, #0]
				i++;
 8001fde:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;
 8001fec:	e00a      	b.n	8002004 <double2string+0x4ac>
		for( ; i < 4; i++) {
 8001fee:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001ffc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002000:	2b03      	cmp	r3, #3
 8002002:	ddd3      	ble.n	8001fac <double2string+0x454>
			}
		}

		for( ; i < 4; i++) {
 8002004:	e016      	b.n	8002034 <double2string+0x4dc>
		*(result + index++) = nguyen[i] + 0x30;
 8002006:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800200a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800200e:	4413      	add	r3, r2
 8002010:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 8002014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002016:	1c59      	adds	r1, r3, #1
 8002018:	63b9      	str	r1, [r7, #56]	; 0x38
 800201a:	4619      	mov	r1, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	440b      	add	r3, r1
 8002020:	3230      	adds	r2, #48	; 0x30
 8002022:	b2d2      	uxtb	r2, r2
 8002024:	701a      	strb	r2, [r3, #0]
		for( ; i < 4; i++) {
 8002026:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800202a:	b2db      	uxtb	r3, r3
 800202c:	3301      	adds	r3, #1
 800202e:	b2db      	uxtb	r3, r3
 8002030:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002034:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002038:	2b03      	cmp	r3, #3
 800203a:	dde4      	ble.n	8002006 <double2string+0x4ae>
		}
	}
	*(result + index++) = '.';
 800203c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800203e:	1c5a      	adds	r2, r3, #1
 8002040:	63ba      	str	r2, [r7, #56]	; 0x38
 8002042:	461a      	mov	r2, r3
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	4413      	add	r3, r2
 8002048:	222e      	movs	r2, #46	; 0x2e
 800204a:	701a      	strb	r2, [r3, #0]
	for( int8_t i = 0; i < precision; i++) {
 800204c:	2300      	movs	r3, #0
 800204e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002052:	e016      	b.n	8002082 <double2string+0x52a>
			*(result + index++) = le[i] + 0x30;
 8002054:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8002058:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800205c:	4413      	add	r3, r2
 800205e:	f813 2c2c 	ldrb.w	r2, [r3, #-44]
 8002062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002064:	1c59      	adds	r1, r3, #1
 8002066:	63b9      	str	r1, [r7, #56]	; 0x38
 8002068:	4619      	mov	r1, r3
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	440b      	add	r3, r1
 800206e:	3230      	adds	r2, #48	; 0x30
 8002070:	b2d2      	uxtb	r2, r2
 8002072:	701a      	strb	r2, [r3, #0]
	for( int8_t i = 0; i < precision; i++) {
 8002074:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8002078:	b2db      	uxtb	r3, r3
 800207a:	3301      	adds	r3, #1
 800207c:	b2db      	uxtb	r3, r3
 800207e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002082:	f997 2036 	ldrsb.w	r2, [r7, #54]	; 0x36
 8002086:	7afb      	ldrb	r3, [r7, #11]
 8002088:	429a      	cmp	r2, r3
 800208a:	dbe3      	blt.n	8002054 <double2string+0x4fc>
	}

	// Chua giai quyet van de lam tron chu so thap phan
	*(result + index++) = 0;
 800208c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800208e:	1c5a      	adds	r2, r3, #1
 8002090:	63ba      	str	r2, [r7, #56]	; 0x38
 8002092:	461a      	mov	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	4413      	add	r3, r2
 8002098:	2200      	movs	r2, #0
 800209a:	701a      	strb	r2, [r3, #0]
	return index;
 800209c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3740      	adds	r7, #64	; 0x40
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bdb0      	pop	{r4, r5, r7, pc}
 80020a6:	bf00      	nop
 80020a8:	3fe00000 	.word	0x3fe00000
 80020ac:	3ff00000 	.word	0x3ff00000

080020b0 <packPayload>:
 *  in_lenght		: lenght of input_buff
 *
 *  returns:		: lenght of output_buff
 *  				  -1 if error
 */
int32_t	packPayload		(uint8_t *input_buff, uint8_t *output_buff, int32_t in_lenght) {
 80020b0:	b5b0      	push	{r4, r5, r7, lr}
 80020b2:	b088      	sub	sp, #32
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	607a      	str	r2, [r7, #4]
 80020bc:	466b      	mov	r3, sp
 80020be:	461d      	mov	r5, r3
	if (NULL == input_buff) {
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d102      	bne.n	80020cc <packPayload+0x1c>
		return -1;
 80020c6:	f04f 33ff 	mov.w	r3, #4294967295
 80020ca:	e056      	b.n	800217a <packPayload+0xca>
	}

	if (NULL == output_buff) {
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d102      	bne.n	80020d8 <packPayload+0x28>
		return -1;
 80020d2:	f04f 33ff 	mov.w	r3, #4294967295
 80020d6:	e050      	b.n	800217a <packPayload+0xca>
	}

	int32_t out_lenght = 0;
 80020d8:	2300      	movs	r3, #0
 80020da:	61bb      	str	r3, [r7, #24]

	out_lenght = in_lenght + 2;//lenght of start char and end char
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	3302      	adds	r3, #2
 80020e0:	61bb      	str	r3, [r7, #24]
//		if ( (START_CHAR == input_buff[i]) ||	(END_CHAR == input_buff[i])	|| (ADD_CHAR == input_buff[i]) ) {
//			out_lenght++;
//		}
//	}// compute output buffer lenght

	uint8_t temp_buff[out_lenght];
 80020e2:	69b8      	ldr	r0, [r7, #24]
 80020e4:	1e43      	subs	r3, r0, #1
 80020e6:	617b      	str	r3, [r7, #20]
 80020e8:	4603      	mov	r3, r0
 80020ea:	4619      	mov	r1, r3
 80020ec:	f04f 0200 	mov.w	r2, #0
 80020f0:	f04f 0300 	mov.w	r3, #0
 80020f4:	f04f 0400 	mov.w	r4, #0
 80020f8:	00d4      	lsls	r4, r2, #3
 80020fa:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80020fe:	00cb      	lsls	r3, r1, #3
 8002100:	4603      	mov	r3, r0
 8002102:	4619      	mov	r1, r3
 8002104:	f04f 0200 	mov.w	r2, #0
 8002108:	f04f 0300 	mov.w	r3, #0
 800210c:	f04f 0400 	mov.w	r4, #0
 8002110:	00d4      	lsls	r4, r2, #3
 8002112:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002116:	00cb      	lsls	r3, r1, #3
 8002118:	4603      	mov	r3, r0
 800211a:	3307      	adds	r3, #7
 800211c:	08db      	lsrs	r3, r3, #3
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	ebad 0d03 	sub.w	sp, sp, r3
 8002124:	466b      	mov	r3, sp
 8002126:	3300      	adds	r3, #0
 8002128:	613b      	str	r3, [r7, #16]

	out_lenght = 0;
 800212a:	2300      	movs	r3, #0
 800212c:	61bb      	str	r3, [r7, #24]
	temp_buff[out_lenght++] = START_CHAR;
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	1c5a      	adds	r2, r3, #1
 8002132:	61ba      	str	r2, [r7, #24]
 8002134:	693a      	ldr	r2, [r7, #16]
 8002136:	2128      	movs	r1, #40	; 0x28
 8002138:	54d1      	strb	r1, [r2, r3]
	for (int32_t i = 0; i < in_lenght; i++) {
 800213a:	2300      	movs	r3, #0
 800213c:	61fb      	str	r3, [r7, #28]
 800213e:	e00b      	b.n	8002158 <packPayload+0xa8>
//			temp_buff[out_lenght++] = ADD_CHAR;
//			temp_buff[out_lenght++] = input_buff[i] ^ XOR_CHAR;
//		} else {
//			temp_buff[out_lenght++] = input_buff[i];
//		}
		temp_buff[out_lenght++] = input_buff[i];
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	441a      	add	r2, r3
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	1c59      	adds	r1, r3, #1
 800214a:	61b9      	str	r1, [r7, #24]
 800214c:	7811      	ldrb	r1, [r2, #0]
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	54d1      	strb	r1, [r2, r3]
	for (int32_t i = 0; i < in_lenght; i++) {
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	3301      	adds	r3, #1
 8002156:	61fb      	str	r3, [r7, #28]
 8002158:	69fa      	ldr	r2, [r7, #28]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	429a      	cmp	r2, r3
 800215e:	dbef      	blt.n	8002140 <packPayload+0x90>
	}
	temp_buff[out_lenght++] = END_CHAR;
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	1c5a      	adds	r2, r3, #1
 8002164:	61ba      	str	r2, [r7, #24]
 8002166:	693a      	ldr	r2, [r7, #16]
 8002168:	2129      	movs	r1, #41	; 0x29
 800216a:	54d1      	strb	r1, [r2, r3]

	memmove(output_buff, temp_buff, out_lenght);
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	4619      	mov	r1, r3
 8002172:	68b8      	ldr	r0, [r7, #8]
 8002174:	f013 fcdf 	bl	8015b36 <memmove>

	return out_lenght;
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	46ad      	mov	sp, r5
}
 800217c:	4618      	mov	r0, r3
 800217e:	3720      	adds	r7, #32
 8002180:	46bd      	mov	sp, r7
 8002182:	bdb0      	pop	{r4, r5, r7, pc}

08002184 <unPackPayload>:
 *  in_lenght		: lenght of input_buff
 *
 *  returns:		: lenght of output_buff
 *  				  -1 if error
 */
int32_t	unPackPayload	(uint8_t *message_buff, int32_t in_lenght) {
 8002184:	b5b0      	push	{r4, r5, r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
 800218e:	466b      	mov	r3, sp
 8002190:	461d      	mov	r5, r3
	if (in_lenght < MIN_MESSAGE_LENGHT) {
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	2b05      	cmp	r3, #5
 8002196:	dc02      	bgt.n	800219e <unPackPayload+0x1a>
		return -1;
 8002198:	f04f 33ff 	mov.w	r3, #4294967295
 800219c:	e063      	b.n	8002266 <unPackPayload+0xe2>
	}// check minimum lenght

	if ( (START_CHAR != message_buff[0]) || (END_CHAR != message_buff[in_lenght - 1]) ) {
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	2b28      	cmp	r3, #40	; 0x28
 80021a4:	d106      	bne.n	80021b4 <unPackPayload+0x30>
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	3b01      	subs	r3, #1
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	4413      	add	r3, r2
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	2b29      	cmp	r3, #41	; 0x29
 80021b2:	d002      	beq.n	80021ba <unPackPayload+0x36>
		return -1;
 80021b4:	f04f 33ff 	mov.w	r3, #4294967295
 80021b8:	e055      	b.n	8002266 <unPackPayload+0xe2>
	}// check start char and end char

	int32_t out_lenght = in_lenght - 2;
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	3b02      	subs	r3, #2
 80021be:	613b      	str	r3, [r7, #16]
//		if ( (START_CHAR == message_buff[i]) || (END_CHAR == message_buff[i]) || (ADD_CHAR == message_buff[i]) ) {
//			out_lenght--;
//		}
//	}// compute output buffer lenght

	uint8_t temp_buff[out_lenght];
 80021c0:	6938      	ldr	r0, [r7, #16]
 80021c2:	1e43      	subs	r3, r0, #1
 80021c4:	60fb      	str	r3, [r7, #12]
 80021c6:	4603      	mov	r3, r0
 80021c8:	4619      	mov	r1, r3
 80021ca:	f04f 0200 	mov.w	r2, #0
 80021ce:	f04f 0300 	mov.w	r3, #0
 80021d2:	f04f 0400 	mov.w	r4, #0
 80021d6:	00d4      	lsls	r4, r2, #3
 80021d8:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80021dc:	00cb      	lsls	r3, r1, #3
 80021de:	4603      	mov	r3, r0
 80021e0:	4619      	mov	r1, r3
 80021e2:	f04f 0200 	mov.w	r2, #0
 80021e6:	f04f 0300 	mov.w	r3, #0
 80021ea:	f04f 0400 	mov.w	r4, #0
 80021ee:	00d4      	lsls	r4, r2, #3
 80021f0:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80021f4:	00cb      	lsls	r3, r1, #3
 80021f6:	4603      	mov	r3, r0
 80021f8:	3307      	adds	r3, #7
 80021fa:	08db      	lsrs	r3, r3, #3
 80021fc:	00db      	lsls	r3, r3, #3
 80021fe:	ebad 0d03 	sub.w	sp, sp, r3
 8002202:	466b      	mov	r3, sp
 8002204:	3300      	adds	r3, #0
 8002206:	60bb      	str	r3, [r7, #8]

	out_lenght = 0;
 8002208:	2300      	movs	r3, #0
 800220a:	613b      	str	r3, [r7, #16]
	for (int32_t i = 0; i < (in_lenght - 1); i++) {
 800220c:	2300      	movs	r3, #0
 800220e:	617b      	str	r3, [r7, #20]
 8002210:	e017      	b.n	8002242 <unPackPayload+0xbe>
		if ( (START_CHAR == message_buff[i]) ||	(END_CHAR == message_buff[i]) ) {
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	4413      	add	r3, r2
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	2b28      	cmp	r3, #40	; 0x28
 800221c:	d00e      	beq.n	800223c <unPackPayload+0xb8>
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	4413      	add	r3, r2
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	2b29      	cmp	r3, #41	; 0x29
 8002228:	d008      	beq.n	800223c <unPackPayload+0xb8>
			;
//		} else if ( (ADD_CHAR == message_buff[i]) ) {
//			temp_buff[out_lenght++] = message_buff[++i] ^ XOR_CHAR;
		}
		else {
			temp_buff[out_lenght++] = message_buff[i];
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	441a      	add	r2, r3
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	1c59      	adds	r1, r3, #1
 8002234:	6139      	str	r1, [r7, #16]
 8002236:	7811      	ldrb	r1, [r2, #0]
 8002238:	68ba      	ldr	r2, [r7, #8]
 800223a:	54d1      	strb	r1, [r2, r3]
	for (int32_t i = 0; i < (in_lenght - 1); i++) {
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	3301      	adds	r3, #1
 8002240:	617b      	str	r3, [r7, #20]
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	3b01      	subs	r3, #1
 8002246:	697a      	ldr	r2, [r7, #20]
 8002248:	429a      	cmp	r2, r3
 800224a:	dbe2      	blt.n	8002212 <unPackPayload+0x8e>
		}
	}
	memset((uint8_t*)message_buff, 0, in_lenght);
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	461a      	mov	r2, r3
 8002250:	2100      	movs	r1, #0
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f013 fc88 	bl	8015b68 <memset>
	memmove(message_buff, temp_buff, out_lenght);
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	4619      	mov	r1, r3
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f013 fc69 	bl	8015b36 <memmove>

	return out_lenght;
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	46ad      	mov	sp, r5
}
 8002268:	4618      	mov	r0, r3
 800226a:	3718      	adds	r7, #24
 800226c:	46bd      	mov	sp, r7
 800226e:	bdb0      	pop	{r4, r5, r7, pc}

08002270 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002276:	2300      	movs	r3, #0
 8002278:	607b      	str	r3, [r7, #4]
 800227a:	4b0c      	ldr	r3, [pc, #48]	; (80022ac <MX_DMA_Init+0x3c>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227e:	4a0b      	ldr	r2, [pc, #44]	; (80022ac <MX_DMA_Init+0x3c>)
 8002280:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002284:	6313      	str	r3, [r2, #48]	; 0x30
 8002286:	4b09      	ldr	r3, [pc, #36]	; (80022ac <MX_DMA_Init+0x3c>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800228e:	607b      	str	r3, [r7, #4]
 8002290:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8002292:	2200      	movs	r2, #0
 8002294:	2105      	movs	r1, #5
 8002296:	200f      	movs	r0, #15
 8002298:	f009 f8a4 	bl	800b3e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800229c:	200f      	movs	r0, #15
 800229e:	f009 f8bd 	bl	800b41c <HAL_NVIC_EnableIRQ>

}
 80022a2:	bf00      	nop
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	40023800 	.word	0x40023800

080022b0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80022b0:	b480      	push	{r7}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	4a07      	ldr	r2, [pc, #28]	; (80022dc <vApplicationGetIdleTaskMemory+0x2c>)
 80022c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	4a06      	ldr	r2, [pc, #24]	; (80022e0 <vApplicationGetIdleTaskMemory+0x30>)
 80022c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022ce:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80022d0:	bf00      	nop
 80022d2:	3714      	adds	r7, #20
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr
 80022dc:	20001054 	.word	0x20001054
 80022e0:	200010a8 	.word	0x200010a8

080022e4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80022e4:	b5b0      	push	{r4, r5, r7, lr}
 80022e6:	b094      	sub	sp, #80	; 0x50
 80022e8:	af00      	add	r7, sp, #0
       
  /* USER CODE END Init */

  /* Create the mutex(es) */
  /* definition and creation of usbTxMutex */
  osMutexDef(usbTxMutex);
 80022ea:	2300      	movs	r3, #0
 80022ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80022ee:	2300      	movs	r3, #0
 80022f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  usbTxMutexHandle = osMutexCreate(osMutex(usbTxMutex));
 80022f2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80022f6:	4618      	mov	r0, r3
 80022f8:	f00f fe1a 	bl	8011f30 <osMutexCreate>
 80022fc:	4602      	mov	r2, r0
 80022fe:	4b1d      	ldr	r3, [pc, #116]	; (8002374 <MX_FREERTOS_Init+0x90>)
 8002300:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
	  /* Create the queue(s) */
	  /* definition and creation of commandMail */
	  osMailQDef(commandMail, 1, DUTY_Command_TypeDef);
 8002302:	2301      	movs	r3, #1
 8002304:	63bb      	str	r3, [r7, #56]	; 0x38
 8002306:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
 800230a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800230c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002310:	643b      	str	r3, [r7, #64]	; 0x40
	  commandMailHandle = osMailCreate(osMailQ(commandMail), NULL);
 8002312:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002316:	2100      	movs	r1, #0
 8002318:	4618      	mov	r0, r3
 800231a:	f00f ffa5 	bl	8012268 <osMailCreate>
 800231e:	4602      	mov	r2, r0
 8002320:	4b15      	ldr	r3, [pc, #84]	; (8002378 <MX_FREERTOS_Init+0x94>)
 8002322:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityHigh, 0, 2048);
 8002324:	4b15      	ldr	r3, [pc, #84]	; (800237c <MX_FREERTOS_Init+0x98>)
 8002326:	f107 041c 	add.w	r4, r7, #28
 800232a:	461d      	mov	r5, r3
 800232c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800232e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002330:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002334:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002338:	f107 031c 	add.w	r3, r7, #28
 800233c:	2100      	movs	r1, #0
 800233e:	4618      	mov	r0, r3
 8002340:	f00f fd09 	bl	8011d56 <osThreadCreate>
 8002344:	4602      	mov	r2, r0
 8002346:	4b0e      	ldr	r3, [pc, #56]	; (8002380 <MX_FREERTOS_Init+0x9c>)
 8002348:	601a      	str	r2, [r3, #0]

  /* definition and creation of USB_RX_Check_ */
  osThreadDef(USB_RX_Check_, Start_USB_RX_Task, osPriorityNormal, 0, 1024);
 800234a:	4b0e      	ldr	r3, [pc, #56]	; (8002384 <MX_FREERTOS_Init+0xa0>)
 800234c:	463c      	mov	r4, r7
 800234e:	461d      	mov	r5, r3
 8002350:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002352:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002354:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002358:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  USB_RX_Check_Handle = osThreadCreate(osThread(USB_RX_Check_), NULL);
 800235c:	463b      	mov	r3, r7
 800235e:	2100      	movs	r1, #0
 8002360:	4618      	mov	r0, r3
 8002362:	f00f fcf8 	bl	8011d56 <osThreadCreate>
 8002366:	4602      	mov	r2, r0
 8002368:	4b07      	ldr	r3, [pc, #28]	; (8002388 <MX_FREERTOS_Init+0xa4>)
 800236a:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800236c:	bf00      	nop
 800236e:	3750      	adds	r7, #80	; 0x50
 8002370:	46bd      	mov	sp, r7
 8002372:	bdb0      	pop	{r4, r5, r7, pc}
 8002374:	20005310 	.word	0x20005310
 8002378:	20005314 	.word	0x20005314
 800237c:	0801ba9c 	.word	0x0801ba9c
 8002380:	2000530c 	.word	0x2000530c
 8002384:	0801bac8 	.word	0x0801bac8
 8002388:	20005318 	.word	0x20005318
 800238c:	00000000 	.word	0x00000000

08002390 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002390:	b5b0      	push	{r4, r5, r7, lr}
 8002392:	ed2d 8b02 	vpush	{d8}
 8002396:	f5ad 6df5 	sub.w	sp, sp, #1960	; 0x7a8
 800239a:	af66      	add	r7, sp, #408	; 0x198
 800239c:	f107 0314 	add.w	r3, r7, #20
 80023a0:	6018      	str	r0, [r3, #0]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80023a2:	f012 fe43 	bl	801502c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  HAL_GPIO_WritePin(USB_SIGN_GPIO_Port, USB_SIGN_Pin, GPIO_PIN_SET); // Pull-up Resistor
 80023a6:	2201      	movs	r2, #1
 80023a8:	2110      	movs	r1, #16
 80023aa:	48c5      	ldr	r0, [pc, #788]	; (80026c0 <StartDefaultTask+0x330>)
 80023ac:	f009 fd7c 	bl	800bea8 <HAL_GPIO_WritePin>

  osEvent 				ret_mail;
  DUTY_Command_TypeDef 	duty_cmd;
  DUTY_Command_TypeDef 	*dataMail;
  uint8_t 				isNewDuty = FALSE;
 80023b0:	2300      	movs	r3, #0
 80023b2:	f887 360f 	strb.w	r3, [r7, #1551]	; 0x60f
  SCARA_KeyStateTypeDef		current_key_state;
  SCARA_KeyTypeDef			current_key;
  int32_t					current_key_speed;
  double						run_time;

  LOG_REPORT("free_rtos.c: PROGRAM START...", __LINE__);
 80023b6:	21cd      	movs	r1, #205	; 0xcd
 80023b8:	48c2      	ldr	r0, [pc, #776]	; (80026c4 <StartDefaultTask+0x334>)
 80023ba:	f7ff fb87 	bl	8001acc <LOG_REPORT>

  // Init value
  current_method = scaraGetMethod();
 80023be:	f006 ffb9 	bl	8009334 <scaraGetMethod>
 80023c2:	4603      	mov	r3, r0
 80023c4:	f887 35fb 	strb.w	r3, [r7, #1531]	; 0x5fb
  current_mode	 = scaraGetMode();
 80023c8:	f006 ffa8 	bl	800931c <scaraGetMode>
 80023cc:	4603      	mov	r3, r0
 80023ce:	f887 35fa 	strb.w	r3, [r7, #1530]	; 0x5fa
  current_duty_state	 = scaraGetDutyState();
 80023d2:	f006 ffbb 	bl	800934c <scaraGetDutyState>
 80023d6:	4603      	mov	r3, r0
 80023d8:	f887 35f9 	strb.w	r3, [r7, #1529]	; 0x5f9

  // Start up robot
  scaraStartup();
 80023dc:	f002 fbf0 	bl	8004bc0 <scaraStartup>
  osDelay(10);
 80023e0:	200a      	movs	r0, #10
 80023e2:	f00f fd04 	bl	8011dee <osDelay>

  positionNext.Theta1 = -PI/3;
 80023e6:	4ab8      	ldr	r2, [pc, #736]	; (80026c8 <StartDefaultTask+0x338>)
 80023e8:	a4b1      	add	r4, pc, #708	; (adr r4, 80026b0 <StartDefaultTask+0x320>)
 80023ea:	e9d4 3400 	ldrd	r3, r4, [r4]
 80023ee:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
  positionNext.Theta2 = PI/3;
 80023f2:	4ab5      	ldr	r2, [pc, #724]	; (80026c8 <StartDefaultTask+0x338>)
 80023f4:	a4b0      	add	r4, pc, #704	; (adr r4, 80026b8 <StartDefaultTask+0x328>)
 80023f6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80023fa:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
  positionNext.D3 = 10;
 80023fe:	4ab2      	ldr	r2, [pc, #712]	; (80026c8 <StartDefaultTask+0x338>)
 8002400:	f04f 0300 	mov.w	r3, #0
 8002404:	4cb1      	ldr	r4, [pc, #708]	; (80026cc <StartDefaultTask+0x33c>)
 8002406:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
  positionNext.Theta4 = 0;
 800240a:	4aaf      	ldr	r2, [pc, #700]	; (80026c8 <StartDefaultTask+0x338>)
 800240c:	f04f 0300 	mov.w	r3, #0
 8002410:	f04f 0400 	mov.w	r4, #0
 8002414:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
  positionNext.t = 0;
 8002418:	4aab      	ldr	r2, [pc, #684]	; (80026c8 <StartDefaultTask+0x338>)
 800241a:	f04f 0300 	mov.w	r3, #0
 800241e:	f04f 0400 	mov.w	r4, #0
 8002422:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
  kinematicForward(&positionNext);
 8002426:	48a8      	ldr	r0, [pc, #672]	; (80026c8 <StartDefaultTask+0x338>)
 8002428:	f000 ffc2 	bl	80033b0 <kinematicForward>
  /* Infinite loop */
//Start Timer 7
	  HAL_TIM_Base_Start_IT(&htim7);
 800242c:	48a8      	ldr	r0, [pc, #672]	; (80026d0 <StartDefaultTask+0x340>)
 800242e:	f00b fbf4 	bl	800dc1a <HAL_TIM_Base_Start_IT>
  for(;;)
  {
	  /*---------Wait for Timer Trigger-----------*/
	  osSignalWait(0x01, osWaitForever); // Very Important
 8002432:	463b      	mov	r3, r7
 8002434:	f04f 32ff 	mov.w	r2, #4294967295
 8002438:	2101      	movs	r1, #1
 800243a:	4618      	mov	r0, r3
 800243c:	f00f fd2c 	bl	8011e98 <osSignalWait>
	  /* 1--- Reset Value ---*/
	  respond_lenght		= 0;
 8002440:	2300      	movs	r3, #0
 8002442:	f8c7 3608 	str.w	r3, [r7, #1544]	; 0x608
	  respond_packed_lenght = 0;
 8002446:	2300      	movs	r3, #0
 8002448:	f8c7 3600 	str.w	r3, [r7, #1536]	; 0x600
	  infor_lenght			= 0;
 800244c:	2300      	movs	r3, #0
 800244e:	f8c7 3604 	str.w	r3, [r7, #1540]	; 0x604
	  infor_packed_lenght	= 0;
 8002452:	2300      	movs	r3, #0
 8002454:	f8c7 35fc 	str.w	r3, [r7, #1532]	; 0x5fc
	  task_usb_lenght		= 0;
 8002458:	2300      	movs	r3, #0
 800245a:	f8c7 35ec 	str.w	r3, [r7, #1516]	; 0x5ec
	  usb_lenght			= 0;
 800245e:	2300      	movs	r3, #0
 8002460:	f8c7 35e8 	str.w	r3, [r7, #1512]	; 0x5e8
	  // Update new position
	  memcpy(&positionPrevios, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 8002464:	4a9b      	ldr	r2, [pc, #620]	; (80026d4 <StartDefaultTask+0x344>)
 8002466:	4b9c      	ldr	r3, [pc, #624]	; (80026d8 <StartDefaultTask+0x348>)
 8002468:	4610      	mov	r0, r2
 800246a:	4619      	mov	r1, r3
 800246c:	23b8      	movs	r3, #184	; 0xb8
 800246e:	461a      	mov	r2, r3
 8002470:	f013 fb56 	bl	8015b20 <memcpy>
	  memcpy(&positionCurrent, &positionNext, sizeof(SCARA_PositionTypeDef));
 8002474:	4a98      	ldr	r2, [pc, #608]	; (80026d8 <StartDefaultTask+0x348>)
 8002476:	4b94      	ldr	r3, [pc, #592]	; (80026c8 <StartDefaultTask+0x338>)
 8002478:	4610      	mov	r0, r2
 800247a:	4619      	mov	r1, r3
 800247c:	23b8      	movs	r3, #184	; 0xb8
 800247e:	461a      	mov	r2, r3
 8002480:	f013 fb4e 	bl	8015b20 <memcpy>
#ifndef SIMULATION
	  if(scaraIsScanLimit()) {
 8002484:	f006 ff6e 	bl	8009364 <scaraIsScanLimit>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d017      	beq.n	80024be <StartDefaultTask+0x12e>
		  lowlayer_readTruePosition(&positionTrue);
 800248e:	4893      	ldr	r0, [pc, #588]	; (80026dc <StartDefaultTask+0x34c>)
 8002490:	f001 fe7e 	bl	8004190 <lowlayer_readTruePosition>
		  kinematicForward(&positionTrue);
 8002494:	4891      	ldr	r0, [pc, #580]	; (80026dc <StartDefaultTask+0x34c>)
 8002496:	f000 ff8b 	bl	80033b0 <kinematicForward>
		  positionTrue.t = positionCurrent.t;
 800249a:	4b8f      	ldr	r3, [pc, #572]	; (80026d8 <StartDefaultTask+0x348>)
 800249c:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 80024a0:	4a8e      	ldr	r2, [pc, #568]	; (80026dc <StartDefaultTask+0x34c>)
 80024a2:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
		  positionTrue.total_time = positionCurrent.total_time;
 80024a6:	4b8c      	ldr	r3, [pc, #560]	; (80026d8 <StartDefaultTask+0x348>)
 80024a8:	e9d3 3410 	ldrd	r3, r4, [r3, #64]	; 0x40
 80024ac:	4a8b      	ldr	r2, [pc, #556]	; (80026dc <StartDefaultTask+0x34c>)
 80024ae:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
		  positionTrue.q = positionCurrent.q;
 80024b2:	4b89      	ldr	r3, [pc, #548]	; (80026d8 <StartDefaultTask+0x348>)
 80024b4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80024b8:	4a88      	ldr	r2, [pc, #544]	; (80026dc <StartDefaultTask+0x34c>)
 80024ba:	e9c2 3400 	strd	r3, r4, [r2]
	  }
#endif
	  /* 2--- Check New Duty Phase ---*/
	  // Check mail
	  ret_mail = osMailGet(commandMailHandle, 0);
 80024be:	4b88      	ldr	r3, [pc, #544]	; (80026e0 <StartDefaultTask+0x350>)
 80024c0:	6819      	ldr	r1, [r3, #0]
 80024c2:	f207 53d4 	addw	r3, r7, #1492	; 0x5d4
 80024c6:	2200      	movs	r2, #0
 80024c8:	4618      	mov	r0, r3
 80024ca:	f00f ff79 	bl	80123c0 <osMailGet>
	  if ( ret_mail.status == osEventMail) {
 80024ce:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 80024d2:	2b20      	cmp	r3, #32
 80024d4:	d116      	bne.n	8002504 <StartDefaultTask+0x174>
		   dataMail = ret_mail.value.p;
 80024d6:	f8d7 35d8 	ldr.w	r3, [r7, #1496]	; 0x5d8
 80024da:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
		   memcpy( &duty_cmd, dataMail, sizeof(DUTY_Command_TypeDef));
 80024de:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80024e2:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
 80024e6:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 80024ea:	4618      	mov	r0, r3
 80024ec:	f013 fb18 	bl	8015b20 <memcpy>
		   isNewDuty = TRUE;
 80024f0:	2301      	movs	r3, #1
 80024f2:	f887 360f 	strb.w	r3, [r7, #1551]	; 0x60f
		   osMailFree(commandMailHandle, dataMail);/* free memory allocated for mail */
 80024f6:	4b7a      	ldr	r3, [pc, #488]	; (80026e0 <StartDefaultTask+0x350>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 80024fe:	4618      	mov	r0, r3
 8002500:	f00f ffd2 	bl	80124a8 <osMailFree>
	  }
	  if(isNewDuty) {
 8002504:	f897 360f 	ldrb.w	r3, [r7, #1551]	; 0x60f
 8002508:	2b00      	cmp	r3, #0
 800250a:	f000 8151 	beq.w	80027b0 <StartDefaultTask+0x420>
		  memset(respond, 0, 40);
 800250e:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8002512:	2228      	movs	r2, #40	; 0x28
 8002514:	2100      	movs	r1, #0
 8002516:	4618      	mov	r0, r3
 8002518:	f013 fb26 	bl	8015b68 <memset>
		  // Check change method
		  if (duty_cmd.change_method == TRUE) {
 800251c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	2b01      	cmp	r3, #1
 8002524:	d13c      	bne.n	80025a0 <StartDefaultTask+0x210>
			  if (SCARA_METHOD_MANUAL == duty_cmd.robot_method) {
 8002526:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800252a:	785b      	ldrb	r3, [r3, #1]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d10e      	bne.n	800254e <StartDefaultTask+0x1be>
				  // Need add check condition idle in each method
				  current_method = SCARA_METHOD_MANUAL;
 8002530:	2300      	movs	r3, #0
 8002532:	f887 35fb 	strb.w	r3, [r7, #1531]	; 0x5fb
				  respond_lenght = commandRespond(RPD_OK,
 8002536:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800253a:	6899      	ldr	r1, [r3, #8]
 800253c:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8002540:	4a68      	ldr	r2, [pc, #416]	; (80026e4 <StartDefaultTask+0x354>)
 8002542:	2008      	movs	r0, #8
 8002544:	f7ff fa72 	bl	8001a2c <commandRespond>
 8002548:	f8c7 0608 	str.w	r0, [r7, #1544]	; 0x608
 800254c:	e12d      	b.n	80027aa <StartDefaultTask+0x41a>
												duty_cmd.id_command,
												"Changed MANUAL Method",
												(char *)respond);
			  } else if (SCARA_METHOD_SEMI_AUTO == duty_cmd.robot_method) {
 800254e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002552:	785b      	ldrb	r3, [r3, #1]
 8002554:	2b01      	cmp	r3, #1
 8002556:	d10e      	bne.n	8002576 <StartDefaultTask+0x1e6>
				  current_method = SCARA_METHOD_SEMI_AUTO;
 8002558:	2301      	movs	r3, #1
 800255a:	f887 35fb 	strb.w	r3, [r7, #1531]	; 0x5fb
				  respond_lenght = commandRespond(RPD_OK,
 800255e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002562:	6899      	ldr	r1, [r3, #8]
 8002564:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8002568:	4a5f      	ldr	r2, [pc, #380]	; (80026e8 <StartDefaultTask+0x358>)
 800256a:	2008      	movs	r0, #8
 800256c:	f7ff fa5e 	bl	8001a2c <commandRespond>
 8002570:	f8c7 0608 	str.w	r0, [r7, #1544]	; 0x608
 8002574:	e119      	b.n	80027aa <StartDefaultTask+0x41a>
												duty_cmd.id_command,
												"Changed SEMI AUTO Method",
												(char *)respond);
			  } else if (SCARA_METHOD_AUTO == duty_cmd.robot_method) {
 8002576:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800257a:	785b      	ldrb	r3, [r3, #1]
 800257c:	2b02      	cmp	r3, #2
 800257e:	f040 8114 	bne.w	80027aa <StartDefaultTask+0x41a>
				  current_method = SCARA_METHOD_AUTO;
 8002582:	2302      	movs	r3, #2
 8002584:	f887 35fb 	strb.w	r3, [r7, #1531]	; 0x5fb
				  respond_lenght = commandRespond(RPD_OK,
 8002588:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800258c:	6899      	ldr	r1, [r3, #8]
 800258e:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8002592:	4a56      	ldr	r2, [pc, #344]	; (80026ec <StartDefaultTask+0x35c>)
 8002594:	2008      	movs	r0, #8
 8002596:	f7ff fa49 	bl	8001a2c <commandRespond>
 800259a:	f8c7 0608 	str.w	r0, [r7, #1544]	; 0x608
 800259e:	e104      	b.n	80027aa <StartDefaultTask+0x41a>
												"Changed AUTO Method",
												(char *)respond);
			  }
		  } else {
			  	  // Check current method & cmd method
			  	  if (current_method == duty_cmd.robot_method) {
 80025a0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80025a4:	785b      	ldrb	r3, [r3, #1]
 80025a6:	f897 25fb 	ldrb.w	r2, [r7, #1531]	; 0x5fb
 80025aa:	429a      	cmp	r2, r3
 80025ac:	f040 80ee 	bne.w	800278c <StartDefaultTask+0x3fc>
				  	  switch( duty_cmd.robot_method) {
 80025b0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80025b4:	785b      	ldrb	r3, [r3, #1]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d030      	beq.n	800261c <StartDefaultTask+0x28c>
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	f000 80f2 	beq.w	80027a4 <StartDefaultTask+0x414>
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	f040 80dd 	bne.w	8002780 <StartDefaultTask+0x3f0>
				  	  case SCARA_METHOD_MANUAL:
				  	  {
				  		  if (current_key_state == SCARA_KEY_STATE_READY) {
 80025c6:	f897 35f7 	ldrb.w	r3, [r7, #1527]	; 0x5f7
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d10d      	bne.n	80025ea <StartDefaultTask+0x25a>
				  			  current_key = duty_cmd.keyboard;
 80025ce:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80025d2:	78db      	ldrb	r3, [r3, #3]
 80025d4:	f887 35f6 	strb.w	r3, [r7, #1526]	; 0x5f6
				  			  current_key_state = SCARA_KEY_STATE_INIT;// Init new path
 80025d8:	2301      	movs	r3, #1
 80025da:	f887 35f7 	strb.w	r3, [r7, #1527]	; 0x5f7
				  			  current_key_speed = duty_cmd.key_speed;
 80025de:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f8c7 35f0 	str.w	r3, [r7, #1520]	; 0x5f0
				  				  	  && current_key_state == SCARA_KEY_STATE_FLOW
									  && current_key_speed == duty_cmd.key_speed) {
				  			  current_key_state = SCARA_KEY_STATE_INIT;// Continue old path
				  		  }
				  	  }
				  	  break;
 80025e8:	e0de      	b.n	80027a8 <StartDefaultTask+0x418>
				  		  } else if (current_key == duty_cmd.keyboard
 80025ea:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80025ee:	78db      	ldrb	r3, [r3, #3]
 80025f0:	f897 25f6 	ldrb.w	r2, [r7, #1526]	; 0x5f6
 80025f4:	429a      	cmp	r2, r3
 80025f6:	f040 80d7 	bne.w	80027a8 <StartDefaultTask+0x418>
				  				  	  && current_key_state == SCARA_KEY_STATE_FLOW
 80025fa:	f897 35f7 	ldrb.w	r3, [r7, #1527]	; 0x5f7
 80025fe:	2b02      	cmp	r3, #2
 8002600:	f040 80d2 	bne.w	80027a8 <StartDefaultTask+0x418>
									  && current_key_speed == duty_cmd.key_speed) {
 8002604:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f8d7 25f0 	ldr.w	r2, [r7, #1520]	; 0x5f0
 800260e:	429a      	cmp	r2, r3
 8002610:	f040 80ca 	bne.w	80027a8 <StartDefaultTask+0x418>
				  			  current_key_state = SCARA_KEY_STATE_INIT;// Continue old path
 8002614:	2301      	movs	r3, #1
 8002616:	f887 35f7 	strb.w	r3, [r7, #1527]	; 0x5f7
				  	  break;
 800261a:	e0c5      	b.n	80027a8 <StartDefaultTask+0x418>
				  	  case SCARA_METHOD_SEMI_AUTO:
				  	  {
						  switch( duty_cmd.robot_mode) {
 800261c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002620:	789b      	ldrb	r3, [r3, #2]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d018      	beq.n	8002658 <StartDefaultTask+0x2c8>
 8002626:	2b02      	cmp	r3, #2
 8002628:	d06c      	beq.n	8002704 <StartDefaultTask+0x374>
 800262a:	2b00      	cmp	r3, #0
 800262c:	f040 80a1 	bne.w	8002772 <StartDefaultTask+0x3e2>
						  case SCARA_MODE_STOP:
							  {
								  current_mode	 = SCARA_MODE_STOP;
 8002630:	2300      	movs	r3, #0
 8002632:	f887 35fa 	strb.w	r3, [r7, #1530]	; 0x5fa
								  respond_lenght = commandRespond(RPD_OK,
 8002636:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800263a:	6899      	ldr	r1, [r3, #8]
 800263c:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8002640:	4a2b      	ldr	r2, [pc, #172]	; (80026f0 <StartDefaultTask+0x360>)
 8002642:	2008      	movs	r0, #8
 8002644:	f7ff f9f2 	bl	8001a2c <commandRespond>
 8002648:	f8c7 0608 	str.w	r0, [r7, #1544]	; 0x608
																  duty_cmd.id_command,
																  "Stop Now",
																  (char *)respond);
								  LOG_REPORT("ROBOT STOP !!!", __LINE__);
 800264c:	f44f 719a 	mov.w	r1, #308	; 0x134
 8002650:	4828      	ldr	r0, [pc, #160]	; (80026f4 <StartDefaultTask+0x364>)
 8002652:	f7ff fa3b 	bl	8001acc <LOG_REPORT>
							  }
							  break;
 8002656:	e092      	b.n	800277e <StartDefaultTask+0x3ee>

						  case SCARA_MODE_SCAN:
							  {
								  if (SCARA_MODE_DUTY == current_mode
 8002658:	f897 35fa 	ldrb.w	r3, [r7, #1530]	; 0x5fa
 800265c:	2b02      	cmp	r3, #2
 800265e:	d115      	bne.n	800268c <StartDefaultTask+0x2fc>
									  && SCARA_DUTY_STATE_READY == current_duty_state) {
 8002660:	f897 35f9 	ldrb.w	r3, [r7, #1529]	; 0x5f9
 8002664:	2b00      	cmp	r3, #0
 8002666:	d111      	bne.n	800268c <StartDefaultTask+0x2fc>
									  current_mode = SCARA_MODE_SCAN;
 8002668:	2301      	movs	r3, #1
 800266a:	f887 35fa 	strb.w	r3, [r7, #1530]	; 0x5fa
									  current_scan_state = SCARA_SCAN_STATE_INIT;
 800266e:	2300      	movs	r3, #0
 8002670:	f887 35f8 	strb.w	r3, [r7, #1528]	; 0x5f8
									  respond_lenght = commandRespond(RPD_OK,
 8002674:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002678:	6899      	ldr	r1, [r3, #8]
 800267a:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 800267e:	4a1e      	ldr	r2, [pc, #120]	; (80026f8 <StartDefaultTask+0x368>)
 8002680:	2008      	movs	r0, #8
 8002682:	f7ff f9d3 	bl	8001a2c <commandRespond>
 8002686:	f8c7 0608 	str.w	r0, [r7, #1544]	; 0x608
																	  "Busy",
																	  (char *)respond);
									  LOG_REPORT("SCAN FAIL: BUSY", __LINE__);
								  }
							  }
							  break;
 800268a:	e078      	b.n	800277e <StartDefaultTask+0x3ee>
									  respond_lenght = commandRespond(RPD_ERROR,
 800268c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002690:	6899      	ldr	r1, [r3, #8]
 8002692:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8002696:	4a19      	ldr	r2, [pc, #100]	; (80026fc <StartDefaultTask+0x36c>)
 8002698:	2007      	movs	r0, #7
 800269a:	f7ff f9c7 	bl	8001a2c <commandRespond>
 800269e:	f8c7 0608 	str.w	r0, [r7, #1544]	; 0x608
									  LOG_REPORT("SCAN FAIL: BUSY", __LINE__);
 80026a2:	f240 1147 	movw	r1, #327	; 0x147
 80026a6:	4816      	ldr	r0, [pc, #88]	; (8002700 <StartDefaultTask+0x370>)
 80026a8:	f7ff fa10 	bl	8001acc <LOG_REPORT>
							  break;
 80026ac:	e067      	b.n	800277e <StartDefaultTask+0x3ee>
 80026ae:	bf00      	nop
 80026b0:	40000000 	.word	0x40000000
 80026b4:	bff0c152 	.word	0xbff0c152
 80026b8:	40000000 	.word	0x40000000
 80026bc:	3ff0c152 	.word	0x3ff0c152
 80026c0:	40020400 	.word	0x40020400
 80026c4:	0801bae4 	.word	0x0801bae4
 80026c8:	20006000 	.word	0x20006000
 80026cc:	40240000 	.word	0x40240000
 80026d0:	200060f8 	.word	0x200060f8
 80026d4:	20005d20 	.word	0x20005d20
 80026d8:	20005e90 	.word	0x20005e90
 80026dc:	20005f48 	.word	0x20005f48
 80026e0:	20005314 	.word	0x20005314
 80026e4:	0801bb04 	.word	0x0801bb04
 80026e8:	0801bb1c 	.word	0x0801bb1c
 80026ec:	0801bb38 	.word	0x0801bb38
 80026f0:	0801bb4c 	.word	0x0801bb4c
 80026f4:	0801bb58 	.word	0x0801bb58
 80026f8:	0801bb68 	.word	0x0801bb68
 80026fc:	0801bb74 	.word	0x0801bb74
 8002700:	0801bb7c 	.word	0x0801bb7c

						  case SCARA_MODE_DUTY:
							  {
								  if (SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_duty_state) {
 8002704:	f897 35fa 	ldrb.w	r3, [r7, #1530]	; 0x5fa
 8002708:	2b02      	cmp	r3, #2
 800270a:	d120      	bne.n	800274e <StartDefaultTask+0x3be>
 800270c:	f897 35f9 	ldrb.w	r3, [r7, #1529]	; 0x5f9
 8002710:	2b00      	cmp	r3, #0
 8002712:	d11c      	bne.n	800274e <StartDefaultTask+0x3be>
									  if (scaraIsScanLimit()) {
 8002714:	f006 fe26 	bl	8009364 <scaraIsScanLimit>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d006      	beq.n	800272c <StartDefaultTask+0x39c>
										  current_mode	 = SCARA_MODE_DUTY;
 800271e:	2302      	movs	r3, #2
 8002720:	f887 35fa 	strb.w	r3, [r7, #1530]	; 0x5fa
										  current_duty_state	 = SCARA_DUTY_STATE_INIT;
 8002724:	2301      	movs	r3, #1
 8002726:	f887 35f9 	strb.w	r3, [r7, #1529]	; 0x5f9
									  if (scaraIsScanLimit()) {
 800272a:	e021      	b.n	8002770 <StartDefaultTask+0x3e0>
									  } else {
										  respond_lenght = commandRespond(RPD_ERROR,
 800272c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002730:	6899      	ldr	r1, [r3, #8]
 8002732:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8002736:	4ad0      	ldr	r2, [pc, #832]	; (8002a78 <StartDefaultTask+0x6e8>)
 8002738:	2007      	movs	r0, #7
 800273a:	f7ff f977 	bl	8001a2c <commandRespond>
 800273e:	f8c7 0608 	str.w	r0, [r7, #1544]	; 0x608
																		  duty_cmd.id_command,
																		  "Has Not Scan Yet.",
																		  (char *)respond);
										  LOG_REPORT("MOVE FAIL:NOT SCAN", __LINE__);
 8002742:	f240 1157 	movw	r1, #343	; 0x157
 8002746:	48cd      	ldr	r0, [pc, #820]	; (8002a7c <StartDefaultTask+0x6ec>)
 8002748:	f7ff f9c0 	bl	8001acc <LOG_REPORT>
									  if (scaraIsScanLimit()) {
 800274c:	e010      	b.n	8002770 <StartDefaultTask+0x3e0>
									  }
								  } else {
									  respond_lenght	= commandRespond(RPD_ERROR,
 800274e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002752:	6899      	ldr	r1, [r3, #8]
 8002754:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8002758:	4ac9      	ldr	r2, [pc, #804]	; (8002a80 <StartDefaultTask+0x6f0>)
 800275a:	2007      	movs	r0, #7
 800275c:	f7ff f966 	bl	8001a2c <commandRespond>
 8002760:	f8c7 0608 	str.w	r0, [r7, #1544]	; 0x608
																		  duty_cmd.id_command,
																		  "Busy.",
																		  (char *)respond);
									  LOG_REPORT("MOVE FAIL:BUSY", __LINE__);
 8002764:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8002768:	48c6      	ldr	r0, [pc, #792]	; (8002a84 <StartDefaultTask+0x6f4>)
 800276a:	f7ff f9af 	bl	8001acc <LOG_REPORT>
								  }
							  }
							  break;
 800276e:	e006      	b.n	800277e <StartDefaultTask+0x3ee>
 8002770:	e005      	b.n	800277e <StartDefaultTask+0x3ee>
						  default:
							  {
								  LOG_REPORT("CMD Error Mode !!!", __LINE__);
 8002772:	f44f 71b2 	mov.w	r1, #356	; 0x164
 8002776:	48c4      	ldr	r0, [pc, #784]	; (8002a88 <StartDefaultTask+0x6f8>)
 8002778:	f7ff f9a8 	bl	8001acc <LOG_REPORT>
							  }
						  }
					  }
					  break;
 800277c:	e015      	b.n	80027aa <StartDefaultTask+0x41a>
 800277e:	e014      	b.n	80027aa <StartDefaultTask+0x41a>

				  	  }
				  	  break;
				  	  default:
				  	  {
				  		  LOG_REPORT("CMD Error Method !!!", __LINE__);
 8002780:	f44f 71b8 	mov.w	r1, #368	; 0x170
 8002784:	48c1      	ldr	r0, [pc, #772]	; (8002a8c <StartDefaultTask+0x6fc>)
 8002786:	f7ff f9a1 	bl	8001acc <LOG_REPORT>
 800278a:	e00e      	b.n	80027aa <StartDefaultTask+0x41a>
				  	  }
				  	  }
			  	  } else {
					  respond_lenght = commandRespond(RPD_ERROR,
 800278c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002790:	6899      	ldr	r1, [r3, #8]
 8002792:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8002796:	4abe      	ldr	r2, [pc, #760]	; (8002a90 <StartDefaultTask+0x700>)
 8002798:	2007      	movs	r0, #7
 800279a:	f7ff f947 	bl	8001a2c <commandRespond>
 800279e:	f8c7 0608 	str.w	r0, [r7, #1544]	; 0x608
 80027a2:	e002      	b.n	80027aa <StartDefaultTask+0x41a>
				  	  break;
 80027a4:	bf00      	nop
 80027a6:	e000      	b.n	80027aa <StartDefaultTask+0x41a>
				  	  break;
 80027a8:	bf00      	nop
													"METHOD isn't correct",
													(char *)respond);
			  	  }

			  }
		  isNewDuty = FALSE;
 80027aa:	2300      	movs	r3, #0
 80027ac:	f887 360f 	strb.w	r3, [r7, #1551]	; 0x60f
	  }

	  /* 3--- Execute Phase ---*/
	  switch(current_method) {
 80027b0:	f897 35fb 	ldrb.w	r3, [r7, #1531]	; 0x5fb
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	f000 80de 	beq.w	8002976 <StartDefaultTask+0x5e6>
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	f000 82b7 	beq.w	8002d2e <StartDefaultTask+0x99e>
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	f040 82b7 	bne.w	8002d34 <StartDefaultTask+0x9a4>
	  case SCARA_METHOD_MANUAL:
	  {
		  switch( current_key_state) {
 80027c6:	f897 35f7 	ldrb.w	r3, [r7, #1527]	; 0x5f7
 80027ca:	2b03      	cmp	r3, #3
 80027cc:	f200 82b1 	bhi.w	8002d32 <StartDefaultTask+0x9a2>
 80027d0:	a201      	add	r2, pc, #4	; (adr r2, 80027d8 <StartDefaultTask+0x448>)
 80027d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027d6:	bf00      	nop
 80027d8:	08002973 	.word	0x08002973
 80027dc:	080027e9 	.word	0x080027e9
 80027e0:	08002843 	.word	0x08002843
 80027e4:	08002941 	.word	0x08002941
		  case SCARA_KEY_STATE_READY:
			  /* Wait for application keyboard , do nothing*/
		  break;
		  case SCARA_KEY_STATE_INIT:
		  {
			  if (scaraKeyInit(current_key, current_key_speed, &run_time) == SCARA_STATUS_OK) {
 80027e8:	f107 0218 	add.w	r2, r7, #24
 80027ec:	f897 35f6 	ldrb.w	r3, [r7, #1526]	; 0x5f6
 80027f0:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 80027f4:	4618      	mov	r0, r3
 80027f6:	f006 feff 	bl	80095f8 <scaraKeyInit>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d11c      	bne.n	800283a <StartDefaultTask+0x4aa>
				  current_key_state = SCARA_KEY_STATE_FLOW;
 8002800:	2302      	movs	r3, #2
 8002802:	f887 35f7 	strb.w	r3, [r7, #1527]	; 0x5f7
#ifdef SIMULATION
				  scaraPosition2String((char *)position, positionCurrent);
#else
				  scaraPosition2String((char *)position, positionTrue);
 8002806:	4ca3      	ldr	r4, [pc, #652]	; (8002a94 <StartDefaultTask+0x704>)
 8002808:	f507 755e 	add.w	r5, r7, #888	; 0x378
 800280c:	4668      	mov	r0, sp
 800280e:	f104 0308 	add.w	r3, r4, #8
 8002812:	22b0      	movs	r2, #176	; 0xb0
 8002814:	4619      	mov	r1, r3
 8002816:	f013 f983 	bl	8015b20 <memcpy>
 800281a:	e894 000c 	ldmia.w	r4, {r2, r3}
 800281e:	4628      	mov	r0, r5
 8002820:	f006 fdda 	bl	80093d8 <scaraPosition2String>
#endif
				  infor_lenght 		= commandRespond(RPD_START,
 8002824:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8002828:	f507 725e 	add.w	r2, r7, #888	; 0x378
 800282c:	2100      	movs	r1, #0
 800282e:	2003      	movs	r0, #3
 8002830:	f7ff f8fc 	bl	8001a2c <commandRespond>
 8002834:	f8c7 0604 	str.w	r0, [r7, #1540]	; 0x604
													  (char *)infor);
			  } else {
				  current_key_state = SCARA_KEY_STATE_READY;
			  }
		  }
		  break;
 8002838:	e09c      	b.n	8002974 <StartDefaultTask+0x5e4>
				  current_key_state = SCARA_KEY_STATE_READY;
 800283a:	2300      	movs	r3, #0
 800283c:	f887 35f7 	strb.w	r3, [r7, #1527]	; 0x5f7
		  break;
 8002840:	e098      	b.n	8002974 <StartDefaultTask+0x5e4>
		  case SCARA_KEY_STATE_FLOW:
		  {
			  SCARA_StatusTypeDef status;
			  // Increase run time
			  run_time += T_SAMPLING;
 8002842:	f107 0318 	add.w	r3, r7, #24
 8002846:	e9d3 0100 	ldrd	r0, r1, [r3]
 800284a:	a389      	add	r3, pc, #548	; (adr r3, 8002a70 <StartDefaultTask+0x6e0>)
 800284c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002850:	f7fd fd2c 	bl	80002ac <__adddf3>
 8002854:	4603      	mov	r3, r0
 8002856:	460c      	mov	r4, r1
 8002858:	f107 0218 	add.w	r2, r7, #24
 800285c:	e9c2 3400 	strd	r3, r4, [r2]
			  // Check Time Out
			  if (scaraIsFinish(run_time)) {
 8002860:	f107 0318 	add.w	r3, r7, #24
 8002864:	ed93 7b00 	vldr	d7, [r3]
 8002868:	eeb0 0a47 	vmov.f32	s0, s14
 800286c:	eef0 0a67 	vmov.f32	s1, s15
 8002870:	f006 fd86 	bl	8009380 <scaraIsFinish>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d003      	beq.n	8002882 <StartDefaultTask+0x4f2>
				  current_key_state = SCARA_KEY_STATE_FINISH;// Key Done
 800287a:	2303      	movs	r3, #3
 800287c:	f887 35f7 	strb.w	r3, [r7, #1527]	; 0x5f7
													(char *)infor);
					  LOG_REPORT("STOP KEY", __LINE__);
				  }
			  }
		  }
		  break;
 8002880:	e078      	b.n	8002974 <StartDefaultTask+0x5e4>
				  status = scaraKeyFlow(run_time, &positionNext, positionCurrent);
 8002882:	f107 0318 	add.w	r3, r7, #24
 8002886:	ed93 8b00 	vldr	d8, [r3]
 800288a:	4c83      	ldr	r4, [pc, #524]	; (8002a98 <StartDefaultTask+0x708>)
 800288c:	4668      	mov	r0, sp
 800288e:	f104 0308 	add.w	r3, r4, #8
 8002892:	22b0      	movs	r2, #176	; 0xb0
 8002894:	4619      	mov	r1, r3
 8002896:	f013 f943 	bl	8015b20 <memcpy>
 800289a:	e894 000c 	ldmia.w	r4, {r2, r3}
 800289e:	487f      	ldr	r0, [pc, #508]	; (8002a9c <StartDefaultTask+0x70c>)
 80028a0:	eeb0 0a48 	vmov.f32	s0, s16
 80028a4:	eef0 0a68 	vmov.f32	s1, s17
 80028a8:	f007 ff24 	bl	800a6f4 <scaraKeyFlow>
 80028ac:	4603      	mov	r3, r0
 80028ae:	f887 35e0 	strb.w	r3, [r7, #1504]	; 0x5e0
				  if ( SCARA_STATUS_OK == status) {
 80028b2:	f897 35e0 	ldrb.w	r3, [r7, #1504]	; 0x5e0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d12c      	bne.n	8002914 <StartDefaultTask+0x584>
					  lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 80028ba:	4c77      	ldr	r4, [pc, #476]	; (8002a98 <StartDefaultTask+0x708>)
 80028bc:	4a77      	ldr	r2, [pc, #476]	; (8002a9c <StartDefaultTask+0x70c>)
 80028be:	ab2a      	add	r3, sp, #168	; 0xa8
 80028c0:	4611      	mov	r1, r2
 80028c2:	22b8      	movs	r2, #184	; 0xb8
 80028c4:	4618      	mov	r0, r3
 80028c6:	f013 f92b 	bl	8015b20 <memcpy>
 80028ca:	4668      	mov	r0, sp
 80028cc:	f104 0310 	add.w	r3, r4, #16
 80028d0:	22a8      	movs	r2, #168	; 0xa8
 80028d2:	4619      	mov	r1, r3
 80028d4:	f013 f924 	bl	8015b20 <memcpy>
 80028d8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80028dc:	f001 fde8 	bl	80044b0 <lowlayer_computeAndWritePulse>
					  scaraPosition2String((char *)position, positionTrue);
 80028e0:	4c6c      	ldr	r4, [pc, #432]	; (8002a94 <StartDefaultTask+0x704>)
 80028e2:	f507 755e 	add.w	r5, r7, #888	; 0x378
 80028e6:	4668      	mov	r0, sp
 80028e8:	f104 0308 	add.w	r3, r4, #8
 80028ec:	22b0      	movs	r2, #176	; 0xb0
 80028ee:	4619      	mov	r1, r3
 80028f0:	f013 f916 	bl	8015b20 <memcpy>
 80028f4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80028f8:	4628      	mov	r0, r5
 80028fa:	f006 fd6d 	bl	80093d8 <scaraPosition2String>
					  infor_lenght = commandRespond(RPD_RUNNING,
 80028fe:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8002902:	f507 725e 	add.w	r2, r7, #888	; 0x378
 8002906:	2100      	movs	r1, #0
 8002908:	2004      	movs	r0, #4
 800290a:	f7ff f88f 	bl	8001a2c <commandRespond>
 800290e:	f8c7 0604 	str.w	r0, [r7, #1540]	; 0x604
		  break;
 8002912:	e02f      	b.n	8002974 <StartDefaultTask+0x5e4>
					  current_key_state = SCARA_KEY_STATE_FINISH;
 8002914:	2303      	movs	r3, #3
 8002916:	f887 35f7 	strb.w	r3, [r7, #1527]	; 0x5f7
					  infor_lenght = commandRespond(RPD_STOP,
 800291a:	f897 35e0 	ldrb.w	r3, [r7, #1504]	; 0x5e0
													(char *)DETAIL_STATUS[status],
 800291e:	4a60      	ldr	r2, [pc, #384]	; (8002aa0 <StartDefaultTask+0x710>)
 8002920:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
					  infor_lenght = commandRespond(RPD_STOP,
 8002924:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8002928:	2100      	movs	r1, #0
 800292a:	2006      	movs	r0, #6
 800292c:	f7ff f87e 	bl	8001a2c <commandRespond>
 8002930:	f8c7 0604 	str.w	r0, [r7, #1540]	; 0x604
					  LOG_REPORT("STOP KEY", __LINE__);
 8002934:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8002938:	485a      	ldr	r0, [pc, #360]	; (8002aa4 <StartDefaultTask+0x714>)
 800293a:	f7ff f8c7 	bl	8001acc <LOG_REPORT>
		  break;
 800293e:	e019      	b.n	8002974 <StartDefaultTask+0x5e4>
		  case SCARA_KEY_STATE_FINISH:
		  {
			  current_key_state = SCARA_KEY_STATE_READY;
 8002940:	2300      	movs	r3, #0
 8002942:	f887 35f7 	strb.w	r3, [r7, #1527]	; 0x5f7
			  positionNext.t = 0;
 8002946:	4a55      	ldr	r2, [pc, #340]	; (8002a9c <StartDefaultTask+0x70c>)
 8002948:	f04f 0300 	mov.w	r3, #0
 800294c:	f04f 0400 	mov.w	r4, #0
 8002950:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
			  positionNext.total_time = 0;
 8002954:	4a51      	ldr	r2, [pc, #324]	; (8002a9c <StartDefaultTask+0x70c>)
 8002956:	f04f 0300 	mov.w	r3, #0
 800295a:	f04f 0400 	mov.w	r4, #0
 800295e:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
			  positionNext.q = 0;
 8002962:	4a4e      	ldr	r2, [pc, #312]	; (8002a9c <StartDefaultTask+0x70c>)
 8002964:	f04f 0300 	mov.w	r3, #0
 8002968:	f04f 0400 	mov.w	r4, #0
 800296c:	e9c2 3400 	strd	r3, r4, [r2]
		  }
		  break;
 8002970:	e000      	b.n	8002974 <StartDefaultTask+0x5e4>
		  break;
 8002972:	bf00      	nop
		  }
	  }
	  break;
 8002974:	e1dd      	b.n	8002d32 <StartDefaultTask+0x9a2>

	  case SCARA_METHOD_SEMI_AUTO:
	  {
		  switch( current_mode) {
 8002976:	f897 35fa 	ldrb.w	r3, [r7, #1530]	; 0x5fa
 800297a:	2b01      	cmp	r3, #1
 800297c:	d00b      	beq.n	8002996 <StartDefaultTask+0x606>
 800297e:	2b02      	cmp	r3, #2
 8002980:	d063      	beq.n	8002a4a <StartDefaultTask+0x6ba>
 8002982:	2b00      	cmp	r3, #0
 8002984:	f040 81cc 	bne.w	8002d20 <StartDefaultTask+0x990>
		  case SCARA_MODE_STOP:
			  {
				  current_mode 	= SCARA_MODE_DUTY;
 8002988:	2302      	movs	r3, #2
 800298a:	f887 35fa 	strb.w	r3, [r7, #1530]	; 0x5fa
				  current_duty_state = SCARA_DUTY_STATE_READY;
 800298e:	2300      	movs	r3, #0
 8002990:	f887 35f9 	strb.w	r3, [r7, #1529]	; 0x5f9
			  }
			  break;
 8002994:	e1ca      	b.n	8002d2c <StartDefaultTask+0x99c>

		  case SCARA_MODE_SCAN:
			  {
				  switch (current_scan_state) {
 8002996:	f897 35f8 	ldrb.w	r3, [r7, #1528]	; 0x5f8
 800299a:	2b03      	cmp	r3, #3
 800299c:	d84b      	bhi.n	8002a36 <StartDefaultTask+0x6a6>
 800299e:	a201      	add	r2, pc, #4	; (adr r2, 80029a4 <StartDefaultTask+0x614>)
 80029a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029a4:	080029b5 	.word	0x080029b5
 80029a8:	080029c1 	.word	0x080029c1
 80029ac:	080029d3 	.word	0x080029d3
 80029b0:	080029e7 	.word	0x080029e7
				  case SCARA_SCAN_STATE_INIT:
					  {
						  lowlayer_scanReset();
 80029b4:	f001 f9e4 	bl	8003d80 <lowlayer_scanReset>
						  current_scan_state = SCARA_SCAN_STATE_HARD;
 80029b8:	2301      	movs	r3, #1
 80029ba:	f887 35f8 	strb.w	r3, [r7, #1528]	; 0x5f8
					  }
					  break;
 80029be:	e043      	b.n	8002a48 <StartDefaultTask+0x6b8>
				  case SCARA_SCAN_STATE_HARD:
					  {
						  if(lowlayer_scanFlow()) {
 80029c0:	f001 fa0e 	bl	8003de0 <lowlayer_scanFlow>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d03b      	beq.n	8002a42 <StartDefaultTask+0x6b2>
							  current_scan_state = SCARA_SCAN_STATE_SOFT;
 80029ca:	2302      	movs	r3, #2
 80029cc:	f887 35f8 	strb.w	r3, [r7, #1528]	; 0x5f8
						  }
					  }
					  break;
 80029d0:	e037      	b.n	8002a42 <StartDefaultTask+0x6b2>
				  case SCARA_SCAN_STATE_SOFT:
					  {
						  if(lowlayer_goToSoftLimit(&positionNext)) {
 80029d2:	4832      	ldr	r0, [pc, #200]	; (8002a9c <StartDefaultTask+0x70c>)
 80029d4:	f001 fb60 	bl	8004098 <lowlayer_goToSoftLimit>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d033      	beq.n	8002a46 <StartDefaultTask+0x6b6>
							  current_scan_state = SCARA_SCAN_STATE_FINISH;
 80029de:	2303      	movs	r3, #3
 80029e0:	f887 35f8 	strb.w	r3, [r7, #1528]	; 0x5f8
							}
					  }
					  break;
 80029e4:	e02f      	b.n	8002a46 <StartDefaultTask+0x6b6>
				  case SCARA_SCAN_STATE_FINISH:
					  {
						  lowlayer_readSetPosition(&positionNext);
 80029e6:	482d      	ldr	r0, [pc, #180]	; (8002a9c <StartDefaultTask+0x70c>)
 80029e8:	f001 fcae 	bl	8004348 <lowlayer_readSetPosition>
						  current_mode 	= SCARA_MODE_DUTY;
 80029ec:	2302      	movs	r3, #2
 80029ee:	f887 35fa 	strb.w	r3, [r7, #1530]	; 0x5fa
						  current_duty_state = SCARA_DUTY_STATE_READY;
 80029f2:	2300      	movs	r3, #0
 80029f4:	f887 35f9 	strb.w	r3, [r7, #1529]	; 0x5f9
						  kinematicForward(&positionNext);
 80029f8:	4828      	ldr	r0, [pc, #160]	; (8002a9c <StartDefaultTask+0x70c>)
 80029fa:	f000 fcd9 	bl	80033b0 <kinematicForward>
						  scaraSetScanFlag();
 80029fe:	f006 fc2f 	bl	8009260 <scaraSetScanFlag>
						  //Done Inform
						  scaraPosition2String((char *)position, positionNext);
 8002a02:	4c26      	ldr	r4, [pc, #152]	; (8002a9c <StartDefaultTask+0x70c>)
 8002a04:	f507 755e 	add.w	r5, r7, #888	; 0x378
 8002a08:	4668      	mov	r0, sp
 8002a0a:	f104 0308 	add.w	r3, r4, #8
 8002a0e:	22b0      	movs	r2, #176	; 0xb0
 8002a10:	4619      	mov	r1, r3
 8002a12:	f013 f885 	bl	8015b20 <memcpy>
 8002a16:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002a1a:	4628      	mov	r0, r5
 8002a1c:	f006 fcdc 	bl	80093d8 <scaraPosition2String>
						  infor_lenght 		= commandRespond(RPD_DONE,
 8002a20:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8002a24:	f507 725e 	add.w	r2, r7, #888	; 0x378
 8002a28:	2100      	movs	r1, #0
 8002a2a:	2005      	movs	r0, #5
 8002a2c:	f7fe fffe 	bl	8001a2c <commandRespond>
 8002a30:	f8c7 0604 	str.w	r0, [r7, #1540]	; 0x604
															 0,
															(char *)position,
															(char *)infor);
					  }
					  break;
 8002a34:	e008      	b.n	8002a48 <StartDefaultTask+0x6b8>
				  default:
					  {
						  LOG_REPORT("ERROR STATE !!!", __LINE__);
 8002a36:	f240 11f9 	movw	r1, #505	; 0x1f9
 8002a3a:	481b      	ldr	r0, [pc, #108]	; (8002aa8 <StartDefaultTask+0x718>)
 8002a3c:	f7ff f846 	bl	8001acc <LOG_REPORT>
						  while(1);
 8002a40:	e7fe      	b.n	8002a40 <StartDefaultTask+0x6b0>
					  break;
 8002a42:	bf00      	nop
 8002a44:	e172      	b.n	8002d2c <StartDefaultTask+0x99c>
					  break;
 8002a46:	bf00      	nop
					  }
				  }

			  }
			  break;
 8002a48:	e170      	b.n	8002d2c <StartDefaultTask+0x99c>

		  case SCARA_MODE_DUTY:
			  {
				  switch (current_duty_state) {
 8002a4a:	f897 35f9 	ldrb.w	r3, [r7, #1529]	; 0x5f9
 8002a4e:	2b03      	cmp	r3, #3
 8002a50:	f200 815f 	bhi.w	8002d12 <StartDefaultTask+0x982>
 8002a54:	a201      	add	r2, pc, #4	; (adr r2, 8002a5c <StartDefaultTask+0x6cc>)
 8002a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a5a:	bf00      	nop
 8002a5c:	08002a6d 	.word	0x08002a6d
 8002a60:	08002aad 	.word	0x08002aad
 8002a64:	08002bb1 	.word	0x08002bb1
 8002a68:	08002caf 	.word	0x08002caf
				  case SCARA_DUTY_STATE_READY:
					  {
						  // Do nothing();
						  __NOP();
 8002a6c:	bf00      	nop
					  }
				  break;
 8002a6e:	e156      	b.n	8002d1e <StartDefaultTask+0x98e>
 8002a70:	40000000 	.word	0x40000000
 8002a74:	3f847ae1 	.word	0x3f847ae1
 8002a78:	0801bb8c 	.word	0x0801bb8c
 8002a7c:	0801bba0 	.word	0x0801bba0
 8002a80:	0801bbb4 	.word	0x0801bbb4
 8002a84:	0801bbbc 	.word	0x0801bbbc
 8002a88:	0801bbcc 	.word	0x0801bbcc
 8002a8c:	0801bbe0 	.word	0x0801bbe0
 8002a90:	0801bbf8 	.word	0x0801bbf8
 8002a94:	20005f48 	.word	0x20005f48
 8002a98:	20005e90 	.word	0x20005e90
 8002a9c:	20006000 	.word	0x20006000
 8002aa0:	20000cac 	.word	0x20000cac
 8002aa4:	0801bc10 	.word	0x0801bc10
 8002aa8:	0801bc1c 	.word	0x0801bc1c

				  case SCARA_DUTY_STATE_INIT:
					  {
						  SCARA_StatusTypeDef status1, status2;
						  status1 = scaraInitDuty(duty_cmd);
 8002aac:	f507 6485 	add.w	r4, r7, #1064	; 0x428
 8002ab0:	4668      	mov	r0, sp
 8002ab2:	f104 0310 	add.w	r3, r4, #16
 8002ab6:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8002aba:	4619      	mov	r1, r3
 8002abc:	f013 f830 	bl	8015b20 <memcpy>
 8002ac0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002ac4:	f002 f88c 	bl	8004be0 <scaraInitDuty>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	f887 35e2 	strb.w	r3, [r7, #1506]	; 0x5e2
						  if ( SCARA_STATUS_OK == status1) {
 8002ace:	f897 35e2 	ldrb.w	r3, [r7, #1506]	; 0x5e2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d154      	bne.n	8002b80 <StartDefaultTask+0x7f0>
							  status2 = scaraTestDuty();
 8002ad6:	f006 fb47 	bl	8009168 <scaraTestDuty>
 8002ada:	4603      	mov	r3, r0
 8002adc:	f887 35e1 	strb.w	r3, [r7, #1505]	; 0x5e1
							  if (SCARA_STATUS_OK == status2) {
 8002ae0:	f897 35e1 	ldrb.w	r3, [r7, #1505]	; 0x5e1
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d133      	bne.n	8002b50 <StartDefaultTask+0x7c0>
							  current_duty_state		= SCARA_DUTY_STATE_FLOW;
 8002ae8:	2302      	movs	r3, #2
 8002aea:	f887 35f9 	strb.w	r3, [r7, #1529]	; 0x5f9
							  run_time			= 0;
 8002aee:	f107 0218 	add.w	r2, r7, #24
 8002af2:	f04f 0300 	mov.w	r3, #0
 8002af6:	f04f 0400 	mov.w	r4, #0
 8002afa:	e9c2 3400 	strd	r3, r4, [r2]
							  // Respond
							  respond_lenght 	= commandRespond(RPD_OK,
 8002afe:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002b02:	6899      	ldr	r1, [r3, #8]
 8002b04:	f897 35e2 	ldrb.w	r3, [r7, #1506]	; 0x5e2
																  duty_cmd.id_command,
																  (char *)DETAIL_STATUS[status1],
 8002b08:	4ad1      	ldr	r2, [pc, #836]	; (8002e50 <StartDefaultTask+0xac0>)
 8002b0a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
							  respond_lenght 	= commandRespond(RPD_OK,
 8002b0e:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8002b12:	2008      	movs	r0, #8
 8002b14:	f7fe ff8a 	bl	8001a2c <commandRespond>
 8002b18:	f8c7 0608 	str.w	r0, [r7, #1544]	; 0x608
																  (char *)respond);
#ifdef SIMULATION
							  scaraPosition2String((char *)position, positionCurrent);
#else
							  scaraPosition2String((char *)position, positionTrue);
 8002b1c:	4ccd      	ldr	r4, [pc, #820]	; (8002e54 <StartDefaultTask+0xac4>)
 8002b1e:	f507 755e 	add.w	r5, r7, #888	; 0x378
 8002b22:	4668      	mov	r0, sp
 8002b24:	f104 0308 	add.w	r3, r4, #8
 8002b28:	22b0      	movs	r2, #176	; 0xb0
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	f012 fff8 	bl	8015b20 <memcpy>
 8002b30:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002b34:	4628      	mov	r0, r5
 8002b36:	f006 fc4f 	bl	80093d8 <scaraPosition2String>
#endif
							  // Start Inform
							  infor_lenght 		= commandRespond(RPD_START,
 8002b3a:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8002b3e:	f507 725e 	add.w	r2, r7, #888	; 0x378
 8002b42:	2100      	movs	r1, #0
 8002b44:	2003      	movs	r0, #3
 8002b46:	f7fe ff71 	bl	8001a2c <commandRespond>
 8002b4a:	f8c7 0604 	str.w	r0, [r7, #1540]	; 0x604
																  (char *)DETAIL_STATUS[status1],
																  (char *)respond);
							  LOG_REPORT("INIT FAIL", __LINE__);
						  }
					  }
				  break;
 8002b4e:	e0e6      	b.n	8002d1e <StartDefaultTask+0x98e>
								  current_duty_state 	= SCARA_DUTY_STATE_READY;
 8002b50:	2300      	movs	r3, #0
 8002b52:	f887 35f9 	strb.w	r3, [r7, #1529]	; 0x5f9
								  respond_lenght	= commandRespond(RPD_ERROR,
 8002b56:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002b5a:	6899      	ldr	r1, [r3, #8]
 8002b5c:	f897 35e1 	ldrb.w	r3, [r7, #1505]	; 0x5e1
																	  (char *)DETAIL_STATUS[status2],
 8002b60:	4abb      	ldr	r2, [pc, #748]	; (8002e50 <StartDefaultTask+0xac0>)
 8002b62:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
								  respond_lenght	= commandRespond(RPD_ERROR,
 8002b66:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8002b6a:	2007      	movs	r0, #7
 8002b6c:	f7fe ff5e 	bl	8001a2c <commandRespond>
 8002b70:	f8c7 0608 	str.w	r0, [r7, #1544]	; 0x608
								  LOG_REPORT("TEST FAIL", __LINE__);
 8002b74:	f240 2129 	movw	r1, #553	; 0x229
 8002b78:	48b7      	ldr	r0, [pc, #732]	; (8002e58 <StartDefaultTask+0xac8>)
 8002b7a:	f7fe ffa7 	bl	8001acc <LOG_REPORT>
				  break;
 8002b7e:	e0ce      	b.n	8002d1e <StartDefaultTask+0x98e>
							  current_duty_state 	= SCARA_DUTY_STATE_READY;
 8002b80:	2300      	movs	r3, #0
 8002b82:	f887 35f9 	strb.w	r3, [r7, #1529]	; 0x5f9
							  respond_lenght	= commandRespond(RPD_ERROR,
 8002b86:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002b8a:	6899      	ldr	r1, [r3, #8]
 8002b8c:	f897 35e2 	ldrb.w	r3, [r7, #1506]	; 0x5e2
																  (char *)DETAIL_STATUS[status1],
 8002b90:	4aaf      	ldr	r2, [pc, #700]	; (8002e50 <StartDefaultTask+0xac0>)
 8002b92:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
							  respond_lenght	= commandRespond(RPD_ERROR,
 8002b96:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8002b9a:	2007      	movs	r0, #7
 8002b9c:	f7fe ff46 	bl	8001a2c <commandRespond>
 8002ba0:	f8c7 0608 	str.w	r0, [r7, #1544]	; 0x608
							  LOG_REPORT("INIT FAIL", __LINE__);
 8002ba4:	f240 2131 	movw	r1, #561	; 0x231
 8002ba8:	48ac      	ldr	r0, [pc, #688]	; (8002e5c <StartDefaultTask+0xacc>)
 8002baa:	f7fe ff8f 	bl	8001acc <LOG_REPORT>
				  break;
 8002bae:	e0b6      	b.n	8002d1e <StartDefaultTask+0x98e>

				  case SCARA_DUTY_STATE_FLOW:
					  {
						  SCARA_StatusTypeDef status;
						  // Increase run time
						  run_time += T_SAMPLING;
 8002bb0:	f107 0318 	add.w	r3, r7, #24
 8002bb4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002bb8:	a3a3      	add	r3, pc, #652	; (adr r3, 8002e48 <StartDefaultTask+0xab8>)
 8002bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bbe:	f7fd fb75 	bl	80002ac <__adddf3>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	460c      	mov	r4, r1
 8002bc6:	f107 0218 	add.w	r2, r7, #24
 8002bca:	e9c2 3400 	strd	r3, r4, [r2]
						  // Check Time Out
						  if (scaraIsFinish(run_time)) {
 8002bce:	f107 0318 	add.w	r3, r7, #24
 8002bd2:	ed93 7b00 	vldr	d7, [r3]
 8002bd6:	eeb0 0a47 	vmov.f32	s0, s14
 8002bda:	eef0 0a67 	vmov.f32	s1, s15
 8002bde:	f006 fbcf 	bl	8009380 <scaraIsFinish>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d003      	beq.n	8002bf0 <StartDefaultTask+0x860>
							  current_duty_state = SCARA_DUTY_STATE_FINISH;// Work Done
 8002be8:	2303      	movs	r3, #3
 8002bea:	f887 35f9 	strb.w	r3, [r7, #1529]	; 0x5f9
																(char *)infor);
								  LOG_REPORT("STOP DUTY", __LINE__);
							  }
						  }
					  }
				  break;
 8002bee:	e096      	b.n	8002d1e <StartDefaultTask+0x98e>
							  status = scaraFlowDuty(run_time , &positionNext, positionCurrent);
 8002bf0:	f107 0318 	add.w	r3, r7, #24
 8002bf4:	ed93 8b00 	vldr	d8, [r3]
 8002bf8:	4c99      	ldr	r4, [pc, #612]	; (8002e60 <StartDefaultTask+0xad0>)
 8002bfa:	4668      	mov	r0, sp
 8002bfc:	f104 0308 	add.w	r3, r4, #8
 8002c00:	22b0      	movs	r2, #176	; 0xb0
 8002c02:	4619      	mov	r1, r3
 8002c04:	f012 ff8c 	bl	8015b20 <memcpy>
 8002c08:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002c0c:	4895      	ldr	r0, [pc, #596]	; (8002e64 <StartDefaultTask+0xad4>)
 8002c0e:	eeb0 0a48 	vmov.f32	s0, s16
 8002c12:	eef0 0a68 	vmov.f32	s1, s17
 8002c16:	f004 fc89 	bl	800752c <scaraFlowDuty>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	f887 35e3 	strb.w	r3, [r7, #1507]	; 0x5e3
							  if ( SCARA_STATUS_OK == status) {
 8002c20:	f897 35e3 	ldrb.w	r3, [r7, #1507]	; 0x5e3
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d12c      	bne.n	8002c82 <StartDefaultTask+0x8f2>
								  lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 8002c28:	4c8d      	ldr	r4, [pc, #564]	; (8002e60 <StartDefaultTask+0xad0>)
 8002c2a:	4a8e      	ldr	r2, [pc, #568]	; (8002e64 <StartDefaultTask+0xad4>)
 8002c2c:	ab2a      	add	r3, sp, #168	; 0xa8
 8002c2e:	4611      	mov	r1, r2
 8002c30:	22b8      	movs	r2, #184	; 0xb8
 8002c32:	4618      	mov	r0, r3
 8002c34:	f012 ff74 	bl	8015b20 <memcpy>
 8002c38:	4668      	mov	r0, sp
 8002c3a:	f104 0310 	add.w	r3, r4, #16
 8002c3e:	22a8      	movs	r2, #168	; 0xa8
 8002c40:	4619      	mov	r1, r3
 8002c42:	f012 ff6d 	bl	8015b20 <memcpy>
 8002c46:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002c4a:	f001 fc31 	bl	80044b0 <lowlayer_computeAndWritePulse>
								  scaraPosition2String((char *)position, positionTrue);
 8002c4e:	4c81      	ldr	r4, [pc, #516]	; (8002e54 <StartDefaultTask+0xac4>)
 8002c50:	f507 755e 	add.w	r5, r7, #888	; 0x378
 8002c54:	4668      	mov	r0, sp
 8002c56:	f104 0308 	add.w	r3, r4, #8
 8002c5a:	22b0      	movs	r2, #176	; 0xb0
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	f012 ff5f 	bl	8015b20 <memcpy>
 8002c62:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002c66:	4628      	mov	r0, r5
 8002c68:	f006 fbb6 	bl	80093d8 <scaraPosition2String>
								  infor_lenght = commandRespond(RPD_RUNNING,
 8002c6c:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8002c70:	f507 725e 	add.w	r2, r7, #888	; 0x378
 8002c74:	2100      	movs	r1, #0
 8002c76:	2004      	movs	r0, #4
 8002c78:	f7fe fed8 	bl	8001a2c <commandRespond>
 8002c7c:	f8c7 0604 	str.w	r0, [r7, #1540]	; 0x604
				  break;
 8002c80:	e04d      	b.n	8002d1e <StartDefaultTask+0x98e>
								  current_duty_state = SCARA_DUTY_STATE_FINISH;
 8002c82:	2303      	movs	r3, #3
 8002c84:	f887 35f9 	strb.w	r3, [r7, #1529]	; 0x5f9
								  infor_lenght = commandRespond(RPD_STOP,
 8002c88:	f897 35e3 	ldrb.w	r3, [r7, #1507]	; 0x5e3
																(char *)DETAIL_STATUS[status],
 8002c8c:	4a70      	ldr	r2, [pc, #448]	; (8002e50 <StartDefaultTask+0xac0>)
 8002c8e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
								  infor_lenght = commandRespond(RPD_STOP,
 8002c92:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8002c96:	2100      	movs	r1, #0
 8002c98:	2006      	movs	r0, #6
 8002c9a:	f7fe fec7 	bl	8001a2c <commandRespond>
 8002c9e:	f8c7 0604 	str.w	r0, [r7, #1540]	; 0x604
								  LOG_REPORT("STOP DUTY", __LINE__);
 8002ca2:	f44f 7115 	mov.w	r1, #596	; 0x254
 8002ca6:	4870      	ldr	r0, [pc, #448]	; (8002e68 <StartDefaultTask+0xad8>)
 8002ca8:	f7fe ff10 	bl	8001acc <LOG_REPORT>
				  break;
 8002cac:	e037      	b.n	8002d1e <StartDefaultTask+0x98e>

				  case SCARA_DUTY_STATE_FINISH:
					  {
						  current_duty_state = SCARA_DUTY_STATE_READY;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	f887 35f9 	strb.w	r3, [r7, #1529]	; 0x5f9
						  positionNext.t = 0;
 8002cb4:	4a6b      	ldr	r2, [pc, #428]	; (8002e64 <StartDefaultTask+0xad4>)
 8002cb6:	f04f 0300 	mov.w	r3, #0
 8002cba:	f04f 0400 	mov.w	r4, #0
 8002cbe:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
						  positionNext.total_time = 0;
 8002cc2:	4a68      	ldr	r2, [pc, #416]	; (8002e64 <StartDefaultTask+0xad4>)
 8002cc4:	f04f 0300 	mov.w	r3, #0
 8002cc8:	f04f 0400 	mov.w	r4, #0
 8002ccc:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
						  positionNext.q = 0;
 8002cd0:	4a64      	ldr	r2, [pc, #400]	; (8002e64 <StartDefaultTask+0xad4>)
 8002cd2:	f04f 0300 	mov.w	r3, #0
 8002cd6:	f04f 0400 	mov.w	r4, #0
 8002cda:	e9c2 3400 	strd	r3, r4, [r2]
						  // Done Inform
#ifdef SIMULATION
						  scaraPosition2String((char *)position, positionCurrent);
#else
						  scaraPosition2String((char *)position, positionTrue);
 8002cde:	4c5d      	ldr	r4, [pc, #372]	; (8002e54 <StartDefaultTask+0xac4>)
 8002ce0:	f507 755e 	add.w	r5, r7, #888	; 0x378
 8002ce4:	4668      	mov	r0, sp
 8002ce6:	f104 0308 	add.w	r3, r4, #8
 8002cea:	22b0      	movs	r2, #176	; 0xb0
 8002cec:	4619      	mov	r1, r3
 8002cee:	f012 ff17 	bl	8015b20 <memcpy>
 8002cf2:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002cf6:	4628      	mov	r0, r5
 8002cf8:	f006 fb6e 	bl	80093d8 <scaraPosition2String>
#endif
						  infor_lenght 		= commandRespond(RPD_DONE,
 8002cfc:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8002d00:	f507 725e 	add.w	r2, r7, #888	; 0x378
 8002d04:	2100      	movs	r1, #0
 8002d06:	2005      	movs	r0, #5
 8002d08:	f7fe fe90 	bl	8001a2c <commandRespond>
 8002d0c:	f8c7 0604 	str.w	r0, [r7, #1540]	; 0x604
															 0,
															 (char *)position,
															 (char *)infor);
					  }
				  break;
 8002d10:	e005      	b.n	8002d1e <StartDefaultTask+0x98e>

				  default:
					  {
						  LOG_REPORT("ERROR STATE !!!", __LINE__);
 8002d12:	f240 216f 	movw	r1, #623	; 0x26f
 8002d16:	4855      	ldr	r0, [pc, #340]	; (8002e6c <StartDefaultTask+0xadc>)
 8002d18:	f7fe fed8 	bl	8001acc <LOG_REPORT>
						  while(1);
 8002d1c:	e7fe      	b.n	8002d1c <StartDefaultTask+0x98c>
					  }
				  }

			  }
			  break;
 8002d1e:	e005      	b.n	8002d2c <StartDefaultTask+0x99c>

		  default:
			  {
				  LOG_REPORT("ERROR MODE !!!", __LINE__);
 8002d20:	f240 2179 	movw	r1, #633	; 0x279
 8002d24:	4852      	ldr	r0, [pc, #328]	; (8002e70 <StartDefaultTask+0xae0>)
 8002d26:	f7fe fed1 	bl	8001acc <LOG_REPORT>
				  while(1);
 8002d2a:	e7fe      	b.n	8002d2a <StartDefaultTask+0x99a>
			  }
		  }
	  }
	  break;
 8002d2c:	e002      	b.n	8002d34 <StartDefaultTask+0x9a4>
	  case SCARA_METHOD_AUTO:
	  {

	  }

	  break;
 8002d2e:	bf00      	nop
 8002d30:	e000      	b.n	8002d34 <StartDefaultTask+0x9a4>
	  break;
 8002d32:	bf00      	nop
	  }
	  }

	  /* 4--- Send to PC Phase ---*/
	  // Check buffer from USB task
	  osMutexWait(usbTxMutexHandle, osWaitForever);
 8002d34:	4b4f      	ldr	r3, [pc, #316]	; (8002e74 <StartDefaultTask+0xae4>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f04f 31ff 	mov.w	r1, #4294967295
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f00f f90f 	bl	8011f60 <osMutexWait>
	  task_usb_lenght = ringBuff_PopArray(&cmd_tx_ringbuff, task_usb, RINGBUFFER_SIZE);
 8002d42:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 8002d46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	484a      	ldr	r0, [pc, #296]	; (8002e78 <StartDefaultTask+0xae8>)
 8002d4e:	f000 ff9a 	bl	8003c86 <ringBuff_PopArray>
 8002d52:	f8c7 05ec 	str.w	r0, [r7, #1516]	; 0x5ec
	  osMutexRelease(usbTxMutexHandle);
 8002d56:	4b47      	ldr	r3, [pc, #284]	; (8002e74 <StartDefaultTask+0xae4>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f00f f94e 	bl	8011ffc <osMutexRelease>
	  // Intergrate to 1 buffer
	  if (respond_lenght > 0) {
 8002d60:	f8d7 3608 	ldr.w	r3, [r7, #1544]	; 0x608
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	dd13      	ble.n	8002d90 <StartDefaultTask+0xa00>
		  respond_packed_lenght = packPayload(respond, respond_packed, respond_lenght);
 8002d68:	f507 7106 	add.w	r1, r7, #536	; 0x218
 8002d6c:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8002d70:	f8d7 2608 	ldr.w	r2, [r7, #1544]	; 0x608
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff f99b 	bl	80020b0 <packPayload>
 8002d7a:	f8c7 0600 	str.w	r0, [r7, #1536]	; 0x600
		  memcpy(usb_buff, respond_packed, respond_packed_lenght);
 8002d7e:	f8d7 2600 	ldr.w	r2, [r7, #1536]	; 0x600
 8002d82:	f507 7106 	add.w	r1, r7, #536	; 0x218
 8002d86:	f107 0320 	add.w	r3, r7, #32
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f012 fec8 	bl	8015b20 <memcpy>
	  }
	  if (task_usb_lenght > 0) {
 8002d90:	f8d7 35ec 	ldr.w	r3, [r7, #1516]	; 0x5ec
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	dd0b      	ble.n	8002db0 <StartDefaultTask+0xa20>
		  memcpy(usb_buff + respond_packed_lenght, task_usb, task_usb_lenght);
 8002d98:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 8002d9c:	f107 0220 	add.w	r2, r7, #32
 8002da0:	4413      	add	r3, r2
 8002da2:	f8d7 25ec 	ldr.w	r2, [r7, #1516]	; 0x5ec
 8002da6:	f507 7113 	add.w	r1, r7, #588	; 0x24c
 8002daa:	4618      	mov	r0, r3
 8002dac:	f012 feb8 	bl	8015b20 <memcpy>
	  }
	  if (infor_lenght > 0) {
 8002db0:	f8d7 3604 	ldr.w	r3, [r7, #1540]	; 0x604
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	dd19      	ble.n	8002dec <StartDefaultTask+0xa5c>
		  infor_packed_lenght 	= packPayload(infor, infor_packed, infor_lenght);
 8002db8:	f507 71c0 	add.w	r1, r7, #384	; 0x180
 8002dbc:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8002dc0:	f8d7 2604 	ldr.w	r2, [r7, #1540]	; 0x604
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7ff f973 	bl	80020b0 <packPayload>
 8002dca:	f8c7 05fc 	str.w	r0, [r7, #1532]	; 0x5fc
		  memcpy(usb_buff + respond_packed_lenght + task_usb_lenght, infor_packed, infor_packed_lenght);
 8002dce:	f8d7 2600 	ldr.w	r2, [r7, #1536]	; 0x600
 8002dd2:	f8d7 35ec 	ldr.w	r3, [r7, #1516]	; 0x5ec
 8002dd6:	4413      	add	r3, r2
 8002dd8:	f107 0220 	add.w	r2, r7, #32
 8002ddc:	4413      	add	r3, r2
 8002dde:	f8d7 25fc 	ldr.w	r2, [r7, #1532]	; 0x5fc
 8002de2:	f507 71c0 	add.w	r1, r7, #384	; 0x180
 8002de6:	4618      	mov	r0, r3
 8002de8:	f012 fe9a 	bl	8015b20 <memcpy>
	  }
	  usb_lenght = respond_packed_lenght + task_usb_lenght + infor_packed_lenght;
 8002dec:	f8d7 2600 	ldr.w	r2, [r7, #1536]	; 0x600
 8002df0:	f8d7 35ec 	ldr.w	r3, [r7, #1516]	; 0x5ec
 8002df4:	4413      	add	r3, r2
 8002df6:	f8d7 25fc 	ldr.w	r2, [r7, #1532]	; 0x5fc
 8002dfa:	4413      	add	r3, r2
 8002dfc:	f8c7 35e8 	str.w	r3, [r7, #1512]	; 0x5e8
	  // Send through USB
	  if (usb_lenght > 0) {
 8002e00:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	; 0x5e8
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	dd08      	ble.n	8002e1a <StartDefaultTask+0xa8a>
		  CDC_Transmit_FS(usb_buff, (uint16_t)usb_lenght);
 8002e08:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	; 0x5e8
 8002e0c:	b29a      	uxth	r2, r3
 8002e0e:	f107 0320 	add.w	r3, r7, #32
 8002e12:	4611      	mov	r1, r2
 8002e14:	4618      	mov	r0, r3
 8002e16:	f012 fa15 	bl	8015244 <CDC_Transmit_FS>
	  }

	  /* 5--- Update ---*/
	  scaraSetMethod(current_method);
 8002e1a:	f897 35fb 	ldrb.w	r3, [r7, #1531]	; 0x5fb
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f006 fa5c 	bl	80092dc <scaraSetMethod>
	  scaraSetMode(current_mode);
 8002e24:	f897 35fa 	ldrb.w	r3, [r7, #1530]	; 0x5fa
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f006 fa47 	bl	80092bc <scaraSetMode>
	  scaraSetDutyState(current_duty_state);
 8002e2e:	f897 35f9 	ldrb.w	r3, [r7, #1529]	; 0x5f9
 8002e32:	4618      	mov	r0, r3
 8002e34:	f006 fa32 	bl	800929c <scaraSetDutyState>

    osDelay(1);
 8002e38:	2001      	movs	r0, #1
 8002e3a:	f00e ffd8 	bl	8011dee <osDelay>
	  osSignalWait(0x01, osWaitForever); // Very Important
 8002e3e:	f7ff baf8 	b.w	8002432 <StartDefaultTask+0xa2>
 8002e42:	bf00      	nop
 8002e44:	f3af 8000 	nop.w
 8002e48:	40000000 	.word	0x40000000
 8002e4c:	3f847ae1 	.word	0x3f847ae1
 8002e50:	20000cac 	.word	0x20000cac
 8002e54:	20005f48 	.word	0x20005f48
 8002e58:	0801bc2c 	.word	0x0801bc2c
 8002e5c:	0801bc38 	.word	0x0801bc38
 8002e60:	20005e90 	.word	0x20005e90
 8002e64:	20006000 	.word	0x20006000
 8002e68:	0801bc44 	.word	0x0801bc44
 8002e6c:	0801bc1c 	.word	0x0801bc1c
 8002e70:	0801bc50 	.word	0x0801bc50
 8002e74:	20005310 	.word	0x20005310
 8002e78:	20000488 	.word	0x20000488

08002e7c <Start_USB_RX_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_USB_RX_Task */
void Start_USB_RX_Task(void const * argument)
{
 8002e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e7e:	f2ad 5d3c 	subw	sp, sp, #1340	; 0x53c
 8002e82:	af6a      	add	r7, sp, #424	; 0x1a8
 8002e84:	1d3b      	adds	r3, r7, #4
 8002e86:	6018      	str	r0, [r3, #0]
	uint8_t				message[150];
	int32_t				respond_lenght;
	int32_t				message_lenght;

	// Default value
	duty_cmd.key_speed = 1;
 8002e88:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	605a      	str	r2, [r3, #4]

  /* Infinite loop */
  for(;;)
  {
	  for(;;) {
		  distance = ringBuff_DistanceOf(&usb_rx_ringbuff, END_CHAR);
 8002e90:	2129      	movs	r1, #41	; 0x29
 8002e92:	4873      	ldr	r0, [pc, #460]	; (8003060 <Start_USB_RX_Task+0x1e4>)
 8002e94:	f000 ff18 	bl	8003cc8 <ringBuff_DistanceOf>
 8002e98:	f8c7 0388 	str.w	r0, [r7, #904]	; 0x388
		  if ( -1 != distance ) {
 8002e9c:	f8d7 3388 	ldr.w	r3, [r7, #904]	; 0x388
 8002ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea4:	d0f4      	beq.n	8002e90 <Start_USB_RX_Task+0x14>
 8002ea6:	466b      	mov	r3, sp
 8002ea8:	461e      	mov	r6, r3
			  uint8_t temp[distance+1];
 8002eaa:	f8d7 3388 	ldr.w	r3, [r7, #904]	; 0x388
 8002eae:	1c58      	adds	r0, r3, #1
 8002eb0:	1e43      	subs	r3, r0, #1
 8002eb2:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	4619      	mov	r1, r3
 8002eba:	f04f 0200 	mov.w	r2, #0
 8002ebe:	f04f 0300 	mov.w	r3, #0
 8002ec2:	f04f 0400 	mov.w	r4, #0
 8002ec6:	00d4      	lsls	r4, r2, #3
 8002ec8:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002ecc:	00cb      	lsls	r3, r1, #3
 8002ece:	4603      	mov	r3, r0
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	f04f 0200 	mov.w	r2, #0
 8002ed6:	f04f 0300 	mov.w	r3, #0
 8002eda:	f04f 0400 	mov.w	r4, #0
 8002ede:	00d4      	lsls	r4, r2, #3
 8002ee0:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002ee4:	00cb      	lsls	r3, r1, #3
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	3307      	adds	r3, #7
 8002eea:	08db      	lsrs	r3, r3, #3
 8002eec:	00db      	lsls	r3, r3, #3
 8002eee:	ebad 0d03 	sub.w	sp, sp, r3
 8002ef2:	ab6a      	add	r3, sp, #424	; 0x1a8
 8002ef4:	3300      	adds	r3, #0
 8002ef6:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380
			  int32_t ret;
			  ringBuff_PopArray(&usb_rx_ringbuff, temp, distance + 1);
 8002efa:	f8d7 1380 	ldr.w	r1, [r7, #896]	; 0x380
 8002efe:	f8d7 3388 	ldr.w	r3, [r7, #904]	; 0x388
 8002f02:	3301      	adds	r3, #1
 8002f04:	461a      	mov	r2, r3
 8002f06:	4856      	ldr	r0, [pc, #344]	; (8003060 <Start_USB_RX_Task+0x1e4>)
 8002f08:	f000 febd 	bl	8003c86 <ringBuff_PopArray>
			  ret = unPackPayload(temp, distance + 1);
 8002f0c:	f8d7 2380 	ldr.w	r2, [r7, #896]	; 0x380
 8002f10:	f8d7 3388 	ldr.w	r3, [r7, #904]	; 0x388
 8002f14:	3301      	adds	r3, #1
 8002f16:	4619      	mov	r1, r3
 8002f18:	4610      	mov	r0, r2
 8002f1a:	f7ff f933 	bl	8002184 <unPackPayload>
 8002f1e:	f8c7 037c 	str.w	r0, [r7, #892]	; 0x37c
			  if( -1 == ret) {
 8002f22:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 8002f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f2a:	d105      	bne.n	8002f38 <Start_USB_RX_Task+0xbc>
				  LOG_REPORT("UNPACK FAIL", __LINE__);
 8002f2c:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 8002f30:	484c      	ldr	r0, [pc, #304]	; (8003064 <Start_USB_RX_Task+0x1e8>)
 8002f32:	f7fe fdcb 	bl	8001acc <LOG_REPORT>
 8002f36:	e091      	b.n	800305c <Start_USB_RX_Task+0x1e0>
			  } else {
				  LOG_REPORT((char*) temp, __LINE__);
 8002f38:	f8d7 3380 	ldr.w	r3, [r7, #896]	; 0x380
 8002f3c:	f240 21d2 	movw	r1, #722	; 0x2d2
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7fe fdc3 	bl	8001acc <LOG_REPORT>
				  cmd_type = commandRead(temp, &id_command, &duty_cmd);
 8002f46:	f8d7 3380 	ldr.w	r3, [r7, #896]	; 0x380
 8002f4a:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
 8002f4e:	f507 715a 	add.w	r1, r7, #872	; 0x368
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7fe f828 	bl	8000fa8 <commandRead>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	f887 337b 	strb.w	r3, [r7, #891]	; 0x37b
				  memset(detail, 0, sizeof(detail));
 8002f5e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002f62:	2287      	movs	r2, #135	; 0x87
 8002f64:	2100      	movs	r1, #0
 8002f66:	4618      	mov	r0, r3
 8002f68:	f012 fdfe 	bl	8015b68 <memset>
				  rpd_type = commandReply(cmd_type, duty_cmd, detail);
 8002f6c:	f507 74e0 	add.w	r4, r7, #448	; 0x1c0
 8002f70:	f897 537b 	ldrb.w	r5, [r7, #891]	; 0x37b
 8002f74:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002f78:	9368      	str	r3, [sp, #416]	; 0x1a0
 8002f7a:	4668      	mov	r0, sp
 8002f7c:	f104 0308 	add.w	r3, r4, #8
 8002f80:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8002f84:	4619      	mov	r1, r3
 8002f86:	f012 fdcb 	bl	8015b20 <memcpy>
 8002f8a:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002f8e:	4628      	mov	r0, r5
 8002f90:	f7fe fbf0 	bl	8001774 <commandReply>
 8002f94:	4603      	mov	r3, r0
 8002f96:	f887 337a 	strb.w	r3, [r7, #890]	; 0x37a

				  if ( RPD_DUTY == rpd_type) {
 8002f9a:	f897 337a 	ldrb.w	r3, [r7, #890]	; 0x37a
 8002f9e:	2b09      	cmp	r3, #9
 8002fa0:	d123      	bne.n	8002fea <Start_USB_RX_Task+0x16e>
					  DUTY_Command_TypeDef *dataMail;
					  dataMail = NULL;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
					  // Wait allocate
					  while (dataMail == NULL) {
 8002fa8:	e008      	b.n	8002fbc <Start_USB_RX_Task+0x140>
						  dataMail = osMailAlloc(commandMailHandle, osWaitForever);
 8002faa:	4b2f      	ldr	r3, [pc, #188]	; (8003068 <Start_USB_RX_Task+0x1ec>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f04f 31ff 	mov.w	r1, #4294967295
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f00f f9b0 	bl	8012318 <osMailAlloc>
 8002fb8:	f8c7 038c 	str.w	r0, [r7, #908]	; 0x38c
					  while (dataMail == NULL) {
 8002fbc:	f8d7 338c 	ldr.w	r3, [r7, #908]	; 0x38c
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d0f2      	beq.n	8002faa <Start_USB_RX_Task+0x12e>
					  }
					  memcpy( dataMail, &duty_cmd, sizeof(DUTY_Command_TypeDef));
 8002fc4:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8002fc8:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
 8002fcc:	4619      	mov	r1, r3
 8002fce:	f8d7 038c 	ldr.w	r0, [r7, #908]	; 0x38c
 8002fd2:	f012 fda5 	bl	8015b20 <memcpy>
					  osStatus result;
					  result = osMailPut(commandMailHandle, dataMail);
 8002fd6:	4b24      	ldr	r3, [pc, #144]	; (8003068 <Start_USB_RX_Task+0x1ec>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f8d7 138c 	ldr.w	r1, [r7, #908]	; 0x38c
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f00f f9b0 	bl	8012344 <osMailPut>
 8002fe4:	f8c7 036c 	str.w	r0, [r7, #876]	; 0x36c
 8002fe8:	e038      	b.n	800305c <Start_USB_RX_Task+0x1e0>
					  if (osOK == result) {
						  //LOG_REPORT("DUTY SEND", __LINE__);
					  }

				  } else {
					  memset(respond, 0, sizeof(respond));
 8002fea:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002fee:	2291      	movs	r2, #145	; 0x91
 8002ff0:	2100      	movs	r1, #0
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f012 fdb8 	bl	8015b68 <memset>
					  memset(message, 0, sizeof(message));
 8002ff8:	f107 030c 	add.w	r3, r7, #12
 8002ffc:	2296      	movs	r2, #150	; 0x96
 8002ffe:	2100      	movs	r1, #0
 8003000:	4618      	mov	r0, r3
 8003002:	f012 fdb1 	bl	8015b68 <memset>
					  respond_lenght	= commandRespond(rpd_type, id_command,
 8003006:	f8d7 1368 	ldr.w	r1, [r7, #872]	; 0x368
 800300a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800300e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8003012:	f897 037a 	ldrb.w	r0, [r7, #890]	; 0x37a
 8003016:	f7fe fd09 	bl	8001a2c <commandRespond>
 800301a:	f8c7 0374 	str.w	r0, [r7, #884]	; 0x374
							  	  	  	  (char *)detail,
										  (char *)respond);
					  message_lenght	= packPayload(respond, message, respond_lenght);
 800301e:	f107 010c 	add.w	r1, r7, #12
 8003022:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003026:	f8d7 2374 	ldr.w	r2, [r7, #884]	; 0x374
 800302a:	4618      	mov	r0, r3
 800302c:	f7ff f840 	bl	80020b0 <packPayload>
 8003030:	f8c7 0370 	str.w	r0, [r7, #880]	; 0x370
					  // Mutex
					  osMutexWait(usbTxMutexHandle, osWaitForever);
 8003034:	4b0d      	ldr	r3, [pc, #52]	; (800306c <Start_USB_RX_Task+0x1f0>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f04f 31ff 	mov.w	r1, #4294967295
 800303c:	4618      	mov	r0, r3
 800303e:	f00e ff8f 	bl	8011f60 <osMutexWait>
					  ringBuff_PushArray(&cmd_tx_ringbuff, message, message_lenght);
 8003042:	f107 030c 	add.w	r3, r7, #12
 8003046:	f8d7 2370 	ldr.w	r2, [r7, #880]	; 0x370
 800304a:	4619      	mov	r1, r3
 800304c:	4808      	ldr	r0, [pc, #32]	; (8003070 <Start_USB_RX_Task+0x1f4>)
 800304e:	f000 fdf2 	bl	8003c36 <ringBuff_PushArray>
					  osMutexRelease(usbTxMutexHandle);
 8003052:	4b06      	ldr	r3, [pc, #24]	; (800306c <Start_USB_RX_Task+0x1f0>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4618      	mov	r0, r3
 8003058:	f00e ffd0 	bl	8011ffc <osMutexRelease>
 800305c:	46b5      	mov	sp, r6
		  distance = ringBuff_DistanceOf(&usb_rx_ringbuff, END_CHAR);
 800305e:	e717      	b.n	8002e90 <Start_USB_RX_Task+0x14>
 8003060:	2000007c 	.word	0x2000007c
 8003064:	0801bc60 	.word	0x0801bc60
 8003068:	20005314 	.word	0x20005314
 800306c:	20005310 	.word	0x20005310
 8003070:	20000488 	.word	0x20000488

08003074 <FSMC_Write>:
/* Includes ------------------------------------------------------------------*/
#include "fsmc.h"

/* USER CODE BEGIN 0 */
void FSMC_Write(uint32_t ui_address, uint32_t ui_data)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]
	*(volatile uint16_t *)ui_address = ui_data;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	683a      	ldr	r2, [r7, #0]
 8003082:	b292      	uxth	r2, r2
 8003084:	801a      	strh	r2, [r3, #0]
}
 8003086:	bf00      	nop
 8003088:	370c      	adds	r7, #12
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr

08003092 <FSMC_Read>:

uint16_t FSMC_Read(uint32_t ui_address) {
 8003092:	b480      	push	{r7}
 8003094:	b083      	sub	sp, #12
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
	return *(volatile uint16_t *)ui_address;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	881b      	ldrh	r3, [r3, #0]
 800309e:	b29b      	uxth	r3, r3
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <MX_FSMC_Init>:

NOR_HandleTypeDef hnor1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b088      	sub	sp, #32
 80030b0:	af00      	add	r7, sp, #0
  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80030b2:	1d3b      	adds	r3, r7, #4
 80030b4:	2200      	movs	r2, #0
 80030b6:	601a      	str	r2, [r3, #0]
 80030b8:	605a      	str	r2, [r3, #4]
 80030ba:	609a      	str	r2, [r3, #8]
 80030bc:	60da      	str	r2, [r3, #12]
 80030be:	611a      	str	r2, [r3, #16]
 80030c0:	615a      	str	r2, [r3, #20]
 80030c2:	619a      	str	r2, [r3, #24]

  /** Perform the NOR1 memory initialization sequence
  */
  hnor1.Instance = FSMC_NORSRAM_DEVICE;
 80030c4:	4b27      	ldr	r3, [pc, #156]	; (8003164 <MX_FSMC_Init+0xb8>)
 80030c6:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80030ca:	601a      	str	r2, [r3, #0]
  hnor1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80030cc:	4b25      	ldr	r3, [pc, #148]	; (8003164 <MX_FSMC_Init+0xb8>)
 80030ce:	4a26      	ldr	r2, [pc, #152]	; (8003168 <MX_FSMC_Init+0xbc>)
 80030d0:	605a      	str	r2, [r3, #4]
  /* hnor1.Init */
  hnor1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80030d2:	4b24      	ldr	r3, [pc, #144]	; (8003164 <MX_FSMC_Init+0xb8>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	609a      	str	r2, [r3, #8]
  hnor1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_ENABLE;
 80030d8:	4b22      	ldr	r3, [pc, #136]	; (8003164 <MX_FSMC_Init+0xb8>)
 80030da:	2202      	movs	r2, #2
 80030dc:	60da      	str	r2, [r3, #12]
  hnor1.Init.MemoryType = FSMC_MEMORY_TYPE_NOR;
 80030de:	4b21      	ldr	r3, [pc, #132]	; (8003164 <MX_FSMC_Init+0xb8>)
 80030e0:	2208      	movs	r2, #8
 80030e2:	611a      	str	r2, [r3, #16]
  hnor1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80030e4:	4b1f      	ldr	r3, [pc, #124]	; (8003164 <MX_FSMC_Init+0xb8>)
 80030e6:	2210      	movs	r2, #16
 80030e8:	615a      	str	r2, [r3, #20]
  hnor1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80030ea:	4b1e      	ldr	r3, [pc, #120]	; (8003164 <MX_FSMC_Init+0xb8>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	619a      	str	r2, [r3, #24]
  hnor1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80030f0:	4b1c      	ldr	r3, [pc, #112]	; (8003164 <MX_FSMC_Init+0xb8>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	61da      	str	r2, [r3, #28]
  hnor1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80030f6:	4b1b      	ldr	r3, [pc, #108]	; (8003164 <MX_FSMC_Init+0xb8>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	621a      	str	r2, [r3, #32]
  hnor1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80030fc:	4b19      	ldr	r3, [pc, #100]	; (8003164 <MX_FSMC_Init+0xb8>)
 80030fe:	2200      	movs	r2, #0
 8003100:	625a      	str	r2, [r3, #36]	; 0x24
  hnor1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8003102:	4b18      	ldr	r3, [pc, #96]	; (8003164 <MX_FSMC_Init+0xb8>)
 8003104:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003108:	629a      	str	r2, [r3, #40]	; 0x28
  hnor1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800310a:	4b16      	ldr	r3, [pc, #88]	; (8003164 <MX_FSMC_Init+0xb8>)
 800310c:	2200      	movs	r2, #0
 800310e:	62da      	str	r2, [r3, #44]	; 0x2c
  hnor1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8003110:	4b14      	ldr	r3, [pc, #80]	; (8003164 <MX_FSMC_Init+0xb8>)
 8003112:	2200      	movs	r2, #0
 8003114:	631a      	str	r2, [r3, #48]	; 0x30
  hnor1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8003116:	4b13      	ldr	r3, [pc, #76]	; (8003164 <MX_FSMC_Init+0xb8>)
 8003118:	2200      	movs	r2, #0
 800311a:	635a      	str	r2, [r3, #52]	; 0x34
  hnor1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800311c:	4b11      	ldr	r3, [pc, #68]	; (8003164 <MX_FSMC_Init+0xb8>)
 800311e:	2200      	movs	r2, #0
 8003120:	639a      	str	r2, [r3, #56]	; 0x38
  hnor1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8003122:	4b10      	ldr	r3, [pc, #64]	; (8003164 <MX_FSMC_Init+0xb8>)
 8003124:	2200      	movs	r2, #0
 8003126:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8003128:	230f      	movs	r3, #15
 800312a:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 800312c:	230f      	movs	r3, #15
 800312e:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8003130:	23ff      	movs	r3, #255	; 0xff
 8003132:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8003134:	230f      	movs	r3, #15
 8003136:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8003138:	2310      	movs	r3, #16
 800313a:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800313c:	2311      	movs	r3, #17
 800313e:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8003140:	2300      	movs	r3, #0
 8003142:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_NOR_Init(&hnor1, &Timing, NULL) != HAL_OK)
 8003144:	1d3b      	adds	r3, r7, #4
 8003146:	2200      	movs	r2, #0
 8003148:	4619      	mov	r1, r3
 800314a:	4806      	ldr	r0, [pc, #24]	; (8003164 <MX_FSMC_Init+0xb8>)
 800314c:	f008 fec6 	bl	800bedc <HAL_NOR_Init>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d001      	beq.n	800315a <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 8003156:	f000 fcf7 	bl	8003b48 <Error_Handler>
  }

}
 800315a:	bf00      	nop
 800315c:	3720      	adds	r7, #32
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	2000531c 	.word	0x2000531c
 8003168:	a0000104 	.word	0xa0000104

0800316c <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 800316c:	b580      	push	{r7, lr}
 800316e:	b086      	sub	sp, #24
 8003170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003172:	1d3b      	adds	r3, r7, #4
 8003174:	2200      	movs	r2, #0
 8003176:	601a      	str	r2, [r3, #0]
 8003178:	605a      	str	r2, [r3, #4]
 800317a:	609a      	str	r2, [r3, #8]
 800317c:	60da      	str	r2, [r3, #12]
 800317e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8003180:	4b24      	ldr	r3, [pc, #144]	; (8003214 <HAL_FSMC_MspInit+0xa8>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d140      	bne.n	800320a <HAL_FSMC_MspInit+0x9e>
    return;
  }
  FSMC_Initialized = 1;
 8003188:	4b22      	ldr	r3, [pc, #136]	; (8003214 <HAL_FSMC_MspInit+0xa8>)
 800318a:	2201      	movs	r2, #1
 800318c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800318e:	2300      	movs	r3, #0
 8003190:	603b      	str	r3, [r7, #0]
 8003192:	4b21      	ldr	r3, [pc, #132]	; (8003218 <HAL_FSMC_MspInit+0xac>)
 8003194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003196:	4a20      	ldr	r2, [pc, #128]	; (8003218 <HAL_FSMC_MspInit+0xac>)
 8003198:	f043 0301 	orr.w	r3, r3, #1
 800319c:	6393      	str	r3, [r2, #56]	; 0x38
 800319e:	4b1e      	ldr	r3, [pc, #120]	; (8003218 <HAL_FSMC_MspInit+0xac>)
 80031a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	603b      	str	r3, [r7, #0]
 80031a8:	683b      	ldr	r3, [r7, #0]
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  PB7   ------> FSMC_NL
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 80031aa:	f64f 7380 	movw	r3, #65408	; 0xff80
 80031ae:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031b0:	2302      	movs	r3, #2
 80031b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b4:	2300      	movs	r3, #0
 80031b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031b8:	2303      	movs	r3, #3
 80031ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80031bc:	230c      	movs	r3, #12
 80031be:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80031c0:	1d3b      	adds	r3, r7, #4
 80031c2:	4619      	mov	r1, r3
 80031c4:	4815      	ldr	r0, [pc, #84]	; (800321c <HAL_FSMC_MspInit+0xb0>)
 80031c6:	f008 fcd5 	bl	800bb74 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14 
 80031ca:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 80031ce:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4 
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031d0:	2302      	movs	r3, #2
 80031d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031d4:	2300      	movs	r3, #0
 80031d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031d8:	2303      	movs	r3, #3
 80031da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80031dc:	230c      	movs	r3, #12
 80031de:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031e0:	1d3b      	adds	r3, r7, #4
 80031e2:	4619      	mov	r1, r3
 80031e4:	480e      	ldr	r0, [pc, #56]	; (8003220 <HAL_FSMC_MspInit+0xb4>)
 80031e6:	f008 fcc5 	bl	800bb74 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80031ea:	2380      	movs	r3, #128	; 0x80
 80031ec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ee:	2302      	movs	r3, #2
 80031f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f2:	2300      	movs	r3, #0
 80031f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031f6:	2303      	movs	r3, #3
 80031f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80031fa:	230c      	movs	r3, #12
 80031fc:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031fe:	1d3b      	adds	r3, r7, #4
 8003200:	4619      	mov	r1, r3
 8003202:	4808      	ldr	r0, [pc, #32]	; (8003224 <HAL_FSMC_MspInit+0xb8>)
 8003204:	f008 fcb6 	bl	800bb74 <HAL_GPIO_Init>
 8003208:	e000      	b.n	800320c <HAL_FSMC_MspInit+0xa0>
    return;
 800320a:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800320c:	3718      	adds	r7, #24
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	200014a8 	.word	0x200014a8
 8003218:	40023800 	.word	0x40023800
 800321c:	40021000 	.word	0x40021000
 8003220:	40020c00 	.word	0x40020c00
 8003224:	40020400 	.word	0x40020400

08003228 <HAL_NOR_MspInit>:

void HAL_NOR_MspInit(NOR_HandleTypeDef* norHandle){
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NOR_MspInit 0 */

  /* USER CODE END NOR_MspInit 0 */
  HAL_FSMC_MspInit();
 8003230:	f7ff ff9c 	bl	800316c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN NOR_MspInit 1 */

  /* USER CODE END NOR_MspInit 1 */
}
 8003234:	bf00      	nop
 8003236:	3708      	adds	r7, #8
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b08a      	sub	sp, #40	; 0x28
 8003240:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003242:	f107 0314 	add.w	r3, r7, #20
 8003246:	2200      	movs	r2, #0
 8003248:	601a      	str	r2, [r3, #0]
 800324a:	605a      	str	r2, [r3, #4]
 800324c:	609a      	str	r2, [r3, #8]
 800324e:	60da      	str	r2, [r3, #12]
 8003250:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003252:	2300      	movs	r3, #0
 8003254:	613b      	str	r3, [r7, #16]
 8003256:	4b51      	ldr	r3, [pc, #324]	; (800339c <MX_GPIO_Init+0x160>)
 8003258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325a:	4a50      	ldr	r2, [pc, #320]	; (800339c <MX_GPIO_Init+0x160>)
 800325c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003260:	6313      	str	r3, [r2, #48]	; 0x30
 8003262:	4b4e      	ldr	r3, [pc, #312]	; (800339c <MX_GPIO_Init+0x160>)
 8003264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800326a:	613b      	str	r3, [r7, #16]
 800326c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800326e:	2300      	movs	r3, #0
 8003270:	60fb      	str	r3, [r7, #12]
 8003272:	4b4a      	ldr	r3, [pc, #296]	; (800339c <MX_GPIO_Init+0x160>)
 8003274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003276:	4a49      	ldr	r2, [pc, #292]	; (800339c <MX_GPIO_Init+0x160>)
 8003278:	f043 0301 	orr.w	r3, r3, #1
 800327c:	6313      	str	r3, [r2, #48]	; 0x30
 800327e:	4b47      	ldr	r3, [pc, #284]	; (800339c <MX_GPIO_Init+0x160>)
 8003280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	60fb      	str	r3, [r7, #12]
 8003288:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800328a:	2300      	movs	r3, #0
 800328c:	60bb      	str	r3, [r7, #8]
 800328e:	4b43      	ldr	r3, [pc, #268]	; (800339c <MX_GPIO_Init+0x160>)
 8003290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003292:	4a42      	ldr	r2, [pc, #264]	; (800339c <MX_GPIO_Init+0x160>)
 8003294:	f043 0310 	orr.w	r3, r3, #16
 8003298:	6313      	str	r3, [r2, #48]	; 0x30
 800329a:	4b40      	ldr	r3, [pc, #256]	; (800339c <MX_GPIO_Init+0x160>)
 800329c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329e:	f003 0310 	and.w	r3, r3, #16
 80032a2:	60bb      	str	r3, [r7, #8]
 80032a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80032a6:	2300      	movs	r3, #0
 80032a8:	607b      	str	r3, [r7, #4]
 80032aa:	4b3c      	ldr	r3, [pc, #240]	; (800339c <MX_GPIO_Init+0x160>)
 80032ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ae:	4a3b      	ldr	r2, [pc, #236]	; (800339c <MX_GPIO_Init+0x160>)
 80032b0:	f043 0302 	orr.w	r3, r3, #2
 80032b4:	6313      	str	r3, [r2, #48]	; 0x30
 80032b6:	4b39      	ldr	r3, [pc, #228]	; (800339c <MX_GPIO_Init+0x160>)
 80032b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	607b      	str	r3, [r7, #4]
 80032c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80032c2:	2300      	movs	r3, #0
 80032c4:	603b      	str	r3, [r7, #0]
 80032c6:	4b35      	ldr	r3, [pc, #212]	; (800339c <MX_GPIO_Init+0x160>)
 80032c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ca:	4a34      	ldr	r2, [pc, #208]	; (800339c <MX_GPIO_Init+0x160>)
 80032cc:	f043 0308 	orr.w	r3, r3, #8
 80032d0:	6313      	str	r3, [r2, #48]	; 0x30
 80032d2:	4b32      	ldr	r3, [pc, #200]	; (800339c <MX_GPIO_Init+0x160>)
 80032d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d6:	f003 0308 	and.w	r3, r3, #8
 80032da:	603b      	str	r3, [r7, #0]
 80032dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUTPUT_1_Pin|OUTPUT_2_Pin|USB_SIGN_Pin, GPIO_PIN_RESET);
 80032de:	2200      	movs	r2, #0
 80032e0:	f44f 6141 	mov.w	r1, #3088	; 0xc10
 80032e4:	482e      	ldr	r0, [pc, #184]	; (80033a0 <MX_GPIO_Init+0x164>)
 80032e6:	f008 fddf 	bl	800bea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ENCODER_RESET_Pin|PULSE_WRITE_Pin|CAPTURE_ENABLE_Pin|STOP_Pin, GPIO_PIN_RESET);
 80032ea:	2200      	movs	r2, #0
 80032ec:	f641 0148 	movw	r1, #6216	; 0x1848
 80032f0:	482c      	ldr	r0, [pc, #176]	; (80033a4 <MX_GPIO_Init+0x168>)
 80032f2:	f008 fdd9 	bl	800bea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STEP_SLEEP_Pin|STEP_RESET_Pin|STEP_ENABLE_Pin, GPIO_PIN_RESET);
 80032f6:	2200      	movs	r2, #0
 80032f8:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80032fc:	482a      	ldr	r0, [pc, #168]	; (80033a8 <MX_GPIO_Init+0x16c>)
 80032fe:	f008 fdd3 	bl	800bea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OUTPUT_1_Pin|OUTPUT_2_Pin|USB_SIGN_Pin;
 8003302:	f44f 6341 	mov.w	r3, #3088	; 0xc10
 8003306:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003308:	2301      	movs	r3, #1
 800330a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800330c:	2300      	movs	r3, #0
 800330e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003310:	2300      	movs	r3, #0
 8003312:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003314:	f107 0314 	add.w	r3, r7, #20
 8003318:	4619      	mov	r1, r3
 800331a:	4821      	ldr	r0, [pc, #132]	; (80033a0 <MX_GPIO_Init+0x164>)
 800331c:	f008 fc2a 	bl	800bb74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = ENCODER_RESET_Pin|CAPTURE_ENABLE_Pin|STOP_Pin;
 8003320:	f640 0348 	movw	r3, #2120	; 0x848
 8003324:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003326:	2301      	movs	r3, #1
 8003328:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800332a:	2300      	movs	r3, #0
 800332c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800332e:	2300      	movs	r3, #0
 8003330:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003332:	f107 0314 	add.w	r3, r7, #20
 8003336:	4619      	mov	r1, r3
 8003338:	481a      	ldr	r0, [pc, #104]	; (80033a4 <MX_GPIO_Init+0x168>)
 800333a:	f008 fc1b 	bl	800bb74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PULSE_WRITE_Pin;
 800333e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003342:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003344:	2301      	movs	r3, #1
 8003346:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003348:	2300      	movs	r3, #0
 800334a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800334c:	2303      	movs	r3, #3
 800334e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PULSE_WRITE_GPIO_Port, &GPIO_InitStruct);
 8003350:	f107 0314 	add.w	r3, r7, #20
 8003354:	4619      	mov	r1, r3
 8003356:	4813      	ldr	r0, [pc, #76]	; (80033a4 <MX_GPIO_Init+0x168>)
 8003358:	f008 fc0c 	bl	800bb74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = CPLD_LIMIT_Pin|CPLD_BUSY_Pin;
 800335c:	f242 0304 	movw	r3, #8196	; 0x2004
 8003360:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003362:	2300      	movs	r3, #0
 8003364:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003366:	2301      	movs	r3, #1
 8003368:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800336a:	f107 0314 	add.w	r3, r7, #20
 800336e:	4619      	mov	r1, r3
 8003370:	480c      	ldr	r0, [pc, #48]	; (80033a4 <MX_GPIO_Init+0x168>)
 8003372:	f008 fbff 	bl	800bb74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = STEP_SLEEP_Pin|STEP_RESET_Pin|STEP_ENABLE_Pin;
 8003376:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800337a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800337c:	2301      	movs	r3, #1
 800337e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003380:	2300      	movs	r3, #0
 8003382:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003384:	2300      	movs	r3, #0
 8003386:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003388:	f107 0314 	add.w	r3, r7, #20
 800338c:	4619      	mov	r1, r3
 800338e:	4806      	ldr	r0, [pc, #24]	; (80033a8 <MX_GPIO_Init+0x16c>)
 8003390:	f008 fbf0 	bl	800bb74 <HAL_GPIO_Init>

}
 8003394:	bf00      	nop
 8003396:	3728      	adds	r7, #40	; 0x28
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	40023800 	.word	0x40023800
 80033a0:	40020400 	.word	0x40020400
 80033a4:	40020c00 	.word	0x40020c00
 80033a8:	40020000 	.word	0x40020000
 80033ac:	00000000 	.word	0x00000000

080033b0 <kinematicForward>:
#include "kinematic.h"
#include "common_def.h"
#include "math.h"
#include "system_params.h"

uint8_t		kinematicForward(SCARA_PositionTypeDef *pnt) {
 80033b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033b2:	b08b      	sub	sp, #44	; 0x2c
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
	double x, y, z, roll;

	x =   a1*cos(pnt->Theta1)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 80033be:	eeb0 0a47 	vmov.f32	s0, s14
 80033c2:	eef0 0a67 	vmov.f32	s1, s15
 80033c6:	f016 fddb 	bl	8019f80 <cos>
 80033ca:	ec51 0b10 	vmov	r0, r1, d0
 80033ce:	a38e      	add	r3, pc, #568	; (adr r3, 8003608 <kinematicForward+0x258>)
 80033d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d4:	f7fd f920 	bl	8000618 <__aeabi_dmul>
 80033d8:	4603      	mov	r3, r0
 80033da:	460c      	mov	r4, r1
 80033dc:	461d      	mov	r5, r3
 80033de:	4626      	mov	r6, r4
		+ a2*cos(pnt->Theta1 + pnt->Theta2)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 80033ec:	461a      	mov	r2, r3
 80033ee:	4623      	mov	r3, r4
 80033f0:	f7fc ff5c 	bl	80002ac <__adddf3>
 80033f4:	4603      	mov	r3, r0
 80033f6:	460c      	mov	r4, r1
 80033f8:	ec44 3b17 	vmov	d7, r3, r4
 80033fc:	eeb0 0a47 	vmov.f32	s0, s14
 8003400:	eef0 0a67 	vmov.f32	s1, s15
 8003404:	f016 fdbc 	bl	8019f80 <cos>
 8003408:	ec51 0b10 	vmov	r0, r1, d0
 800340c:	f04f 0200 	mov.w	r2, #0
 8003410:	4b83      	ldr	r3, [pc, #524]	; (8003620 <kinematicForward+0x270>)
 8003412:	f7fd f901 	bl	8000618 <__aeabi_dmul>
 8003416:	4603      	mov	r3, r0
 8003418:	460c      	mov	r4, r1
 800341a:	461a      	mov	r2, r3
 800341c:	4623      	mov	r3, r4
 800341e:	4628      	mov	r0, r5
 8003420:	4631      	mov	r1, r6
 8003422:	f7fc ff43 	bl	80002ac <__adddf3>
 8003426:	4603      	mov	r3, r0
 8003428:	460c      	mov	r4, r1
 800342a:	461d      	mov	r5, r3
 800342c:	4626      	mov	r6, r4
		+ a4*cos(pnt->Theta1 + pnt->Theta2 - pnt->Theta4);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 800343a:	461a      	mov	r2, r3
 800343c:	4623      	mov	r3, r4
 800343e:	f7fc ff35 	bl	80002ac <__adddf3>
 8003442:	4603      	mov	r3, r0
 8003444:	460c      	mov	r4, r1
 8003446:	4618      	mov	r0, r3
 8003448:	4621      	mov	r1, r4
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 8003450:	461a      	mov	r2, r3
 8003452:	4623      	mov	r3, r4
 8003454:	f7fc ff28 	bl	80002a8 <__aeabi_dsub>
 8003458:	4603      	mov	r3, r0
 800345a:	460c      	mov	r4, r1
 800345c:	ec44 3b17 	vmov	d7, r3, r4
 8003460:	eeb0 0a47 	vmov.f32	s0, s14
 8003464:	eef0 0a67 	vmov.f32	s1, s15
 8003468:	f016 fd8a 	bl	8019f80 <cos>
 800346c:	ec51 0b10 	vmov	r0, r1, d0
 8003470:	a363      	add	r3, pc, #396	; (adr r3, 8003600 <kinematicForward+0x250>)
 8003472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003476:	f7fd f8cf 	bl	8000618 <__aeabi_dmul>
 800347a:	4603      	mov	r3, r0
 800347c:	460c      	mov	r4, r1
	x =   a1*cos(pnt->Theta1)
 800347e:	461a      	mov	r2, r3
 8003480:	4623      	mov	r3, r4
 8003482:	4628      	mov	r0, r5
 8003484:	4631      	mov	r1, r6
 8003486:	f7fc ff11 	bl	80002ac <__adddf3>
 800348a:	4603      	mov	r3, r0
 800348c:	460c      	mov	r4, r1
 800348e:	e9c7 3408 	strd	r3, r4, [r7, #32]
	y =   a1*sin(pnt->Theta1)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8003498:	eeb0 0a47 	vmov.f32	s0, s14
 800349c:	eef0 0a67 	vmov.f32	s1, s15
 80034a0:	f016 fdfe 	bl	801a0a0 <sin>
 80034a4:	ec51 0b10 	vmov	r0, r1, d0
 80034a8:	a357      	add	r3, pc, #348	; (adr r3, 8003608 <kinematicForward+0x258>)
 80034aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ae:	f7fd f8b3 	bl	8000618 <__aeabi_dmul>
 80034b2:	4603      	mov	r3, r0
 80034b4:	460c      	mov	r4, r1
 80034b6:	461d      	mov	r5, r3
 80034b8:	4626      	mov	r6, r4
		+ a2*sin(pnt->Theta1 + pnt->Theta2)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 80034c6:	461a      	mov	r2, r3
 80034c8:	4623      	mov	r3, r4
 80034ca:	f7fc feef 	bl	80002ac <__adddf3>
 80034ce:	4603      	mov	r3, r0
 80034d0:	460c      	mov	r4, r1
 80034d2:	ec44 3b17 	vmov	d7, r3, r4
 80034d6:	eeb0 0a47 	vmov.f32	s0, s14
 80034da:	eef0 0a67 	vmov.f32	s1, s15
 80034de:	f016 fddf 	bl	801a0a0 <sin>
 80034e2:	ec51 0b10 	vmov	r0, r1, d0
 80034e6:	f04f 0200 	mov.w	r2, #0
 80034ea:	4b4d      	ldr	r3, [pc, #308]	; (8003620 <kinematicForward+0x270>)
 80034ec:	f7fd f894 	bl	8000618 <__aeabi_dmul>
 80034f0:	4603      	mov	r3, r0
 80034f2:	460c      	mov	r4, r1
 80034f4:	461a      	mov	r2, r3
 80034f6:	4623      	mov	r3, r4
 80034f8:	4628      	mov	r0, r5
 80034fa:	4631      	mov	r1, r6
 80034fc:	f7fc fed6 	bl	80002ac <__adddf3>
 8003500:	4603      	mov	r3, r0
 8003502:	460c      	mov	r4, r1
 8003504:	461d      	mov	r5, r3
 8003506:	4626      	mov	r6, r4
		+ a4*sin(pnt->Theta1 + pnt->Theta2 - pnt->Theta4);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8003514:	461a      	mov	r2, r3
 8003516:	4623      	mov	r3, r4
 8003518:	f7fc fec8 	bl	80002ac <__adddf3>
 800351c:	4603      	mov	r3, r0
 800351e:	460c      	mov	r4, r1
 8003520:	4618      	mov	r0, r3
 8003522:	4621      	mov	r1, r4
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 800352a:	461a      	mov	r2, r3
 800352c:	4623      	mov	r3, r4
 800352e:	f7fc febb 	bl	80002a8 <__aeabi_dsub>
 8003532:	4603      	mov	r3, r0
 8003534:	460c      	mov	r4, r1
 8003536:	ec44 3b17 	vmov	d7, r3, r4
 800353a:	eeb0 0a47 	vmov.f32	s0, s14
 800353e:	eef0 0a67 	vmov.f32	s1, s15
 8003542:	f016 fdad 	bl	801a0a0 <sin>
 8003546:	ec51 0b10 	vmov	r0, r1, d0
 800354a:	a32d      	add	r3, pc, #180	; (adr r3, 8003600 <kinematicForward+0x250>)
 800354c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003550:	f7fd f862 	bl	8000618 <__aeabi_dmul>
 8003554:	4603      	mov	r3, r0
 8003556:	460c      	mov	r4, r1
	y =   a1*sin(pnt->Theta1)
 8003558:	461a      	mov	r2, r3
 800355a:	4623      	mov	r3, r4
 800355c:	4628      	mov	r0, r5
 800355e:	4631      	mov	r1, r6
 8003560:	f7fc fea4 	bl	80002ac <__adddf3>
 8003564:	4603      	mov	r3, r0
 8003566:	460c      	mov	r4, r1
 8003568:	e9c7 3406 	strd	r3, r4, [r7, #24]
	z =   d1 - pnt->D3 - d4;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 8003572:	461a      	mov	r2, r3
 8003574:	4623      	mov	r3, r4
 8003576:	a126      	add	r1, pc, #152	; (adr r1, 8003610 <kinematicForward+0x260>)
 8003578:	e9d1 0100 	ldrd	r0, r1, [r1]
 800357c:	f7fc fe94 	bl	80002a8 <__aeabi_dsub>
 8003580:	4603      	mov	r3, r0
 8003582:	460c      	mov	r4, r1
 8003584:	4618      	mov	r0, r3
 8003586:	4621      	mov	r1, r4
 8003588:	a323      	add	r3, pc, #140	; (adr r3, 8003618 <kinematicForward+0x268>)
 800358a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800358e:	f7fc fe8b 	bl	80002a8 <__aeabi_dsub>
 8003592:	4603      	mov	r3, r0
 8003594:	460c      	mov	r4, r1
 8003596:	e9c7 3404 	strd	r3, r4, [r7, #16]
	roll = pnt->Theta1 + pnt->Theta2 - pnt->Theta4;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 80035a6:	461a      	mov	r2, r3
 80035a8:	4623      	mov	r3, r4
 80035aa:	f7fc fe7f 	bl	80002ac <__adddf3>
 80035ae:	4603      	mov	r3, r0
 80035b0:	460c      	mov	r4, r1
 80035b2:	4618      	mov	r0, r3
 80035b4:	4621      	mov	r1, r4
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 80035bc:	461a      	mov	r2, r3
 80035be:	4623      	mov	r3, r4
 80035c0:	f7fc fe72 	bl	80002a8 <__aeabi_dsub>
 80035c4:	4603      	mov	r3, r0
 80035c6:	460c      	mov	r4, r1
 80035c8:	e9c7 3402 	strd	r3, r4, [r7, #8]

	pnt->x = x;
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80035d2:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	pnt->y = y;
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80035dc:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	pnt->z = z;
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80035e6:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	pnt->roll = roll;
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80035f0:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

	return TRUE;
 80035f4:	2301      	movs	r3, #1
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	372c      	adds	r7, #44	; 0x2c
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035fe:	bf00      	nop
 8003600:	80000000 	.word	0x80000000
 8003604:	40402e14 	.word	0x40402e14
 8003608:	00000000 	.word	0x00000000
 800360c:	4068a000 	.word	0x4068a000
 8003610:	00000000 	.word	0x00000000
 8003614:	406a6000 	.word	0x406a6000
 8003618:	e0000000 	.word	0xe0000000
 800361c:	40536b22 	.word	0x40536b22
 8003620:	40640000 	.word	0x40640000
 8003624:	00000000 	.word	0x00000000

08003628 <kinematicInverse>:

uint8_t		kinematicInverse(SCARA_PositionTypeDef *pnt, SCARA_PositionTypeDef current) {
 8003628:	b082      	sub	sp, #8
 800362a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800362e:	b0a0      	sub	sp, #128	; 0x80
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8003638:	e881 000c 	stmia.w	r1, {r2, r3}
	double theta1, theta2, theta2_positive, theta2_negative, d3, theta4 , pWx, pWy;
	double s1, c1, s2, s2_positive, s2_negative, c2 , temp;

	d3  = d1 - d4 - pnt->z;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8003642:	a1f2      	add	r1, pc, #968	; (adr r1, 8003a0c <kinematicInverse+0x3e4>)
 8003644:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003648:	f7fc fe2e 	bl	80002a8 <__aeabi_dsub>
 800364c:	4602      	mov	r2, r0
 800364e:	460b      	mov	r3, r1
 8003650:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	pWx = pnt->x - a4*cos(pnt->roll);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	e9d3 ab12 	ldrd	sl, fp, [r3, #72]	; 0x48
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8003660:	eeb0 0a47 	vmov.f32	s0, s14
 8003664:	eef0 0a67 	vmov.f32	s1, s15
 8003668:	f016 fc8a 	bl	8019f80 <cos>
 800366c:	ec51 0b10 	vmov	r0, r1, d0
 8003670:	a3e8      	add	r3, pc, #928	; (adr r3, 8003a14 <kinematicInverse+0x3ec>)
 8003672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003676:	f7fc ffcf 	bl	8000618 <__aeabi_dmul>
 800367a:	4602      	mov	r2, r0
 800367c:	460b      	mov	r3, r1
 800367e:	4650      	mov	r0, sl
 8003680:	4659      	mov	r1, fp
 8003682:	f7fc fe11 	bl	80002a8 <__aeabi_dsub>
 8003686:	4602      	mov	r2, r0
 8003688:	460b      	mov	r3, r1
 800368a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	pWy = pnt->y - a4*sin(pnt->roll);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	e9d3 ab14 	ldrd	sl, fp, [r3, #80]	; 0x50
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 800369a:	eeb0 0a47 	vmov.f32	s0, s14
 800369e:	eef0 0a67 	vmov.f32	s1, s15
 80036a2:	f016 fcfd 	bl	801a0a0 <sin>
 80036a6:	ec51 0b10 	vmov	r0, r1, d0
 80036aa:	a3da      	add	r3, pc, #872	; (adr r3, 8003a14 <kinematicInverse+0x3ec>)
 80036ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b0:	f7fc ffb2 	bl	8000618 <__aeabi_dmul>
 80036b4:	4602      	mov	r2, r0
 80036b6:	460b      	mov	r3, r1
 80036b8:	4650      	mov	r0, sl
 80036ba:	4659      	mov	r1, fp
 80036bc:	f7fc fdf4 	bl	80002a8 <__aeabi_dsub>
 80036c0:	4602      	mov	r2, r0
 80036c2:	460b      	mov	r3, r1
 80036c4:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	c2  = (pWx*pWx + pWy*pWy - a1*a1 - a2*a2) / (2*a1*a2);
 80036c8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80036cc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80036d0:	f7fc ffa2 	bl	8000618 <__aeabi_dmul>
 80036d4:	4602      	mov	r2, r0
 80036d6:	460b      	mov	r3, r1
 80036d8:	4692      	mov	sl, r2
 80036da:	469b      	mov	fp, r3
 80036dc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80036e0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80036e4:	f7fc ff98 	bl	8000618 <__aeabi_dmul>
 80036e8:	4602      	mov	r2, r0
 80036ea:	460b      	mov	r3, r1
 80036ec:	4650      	mov	r0, sl
 80036ee:	4659      	mov	r1, fp
 80036f0:	f7fc fddc 	bl	80002ac <__adddf3>
 80036f4:	4602      	mov	r2, r0
 80036f6:	460b      	mov	r3, r1
 80036f8:	4610      	mov	r0, r2
 80036fa:	4619      	mov	r1, r3
 80036fc:	a3c7      	add	r3, pc, #796	; (adr r3, 8003a1c <kinematicInverse+0x3f4>)
 80036fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003702:	f7fc fdd1 	bl	80002a8 <__aeabi_dsub>
 8003706:	4602      	mov	r2, r0
 8003708:	460b      	mov	r3, r1
 800370a:	4610      	mov	r0, r2
 800370c:	4619      	mov	r1, r3
 800370e:	f04f 0200 	mov.w	r2, #0
 8003712:	4bbb      	ldr	r3, [pc, #748]	; (8003a00 <kinematicInverse+0x3d8>)
 8003714:	f7fc fdc8 	bl	80002a8 <__aeabi_dsub>
 8003718:	4602      	mov	r2, r0
 800371a:	460b      	mov	r3, r1
 800371c:	4610      	mov	r0, r2
 800371e:	4619      	mov	r1, r3
 8003720:	a3b3      	add	r3, pc, #716	; (adr r3, 80039f0 <kinematicInverse+0x3c8>)
 8003722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003726:	f7fd f8a1 	bl	800086c <__aeabi_ddiv>
 800372a:	4602      	mov	r2, r0
 800372c:	460b      	mov	r3, r1
 800372e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	temp = 1 - c2*c2;
 8003732:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003736:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800373a:	f7fc ff6d 	bl	8000618 <__aeabi_dmul>
 800373e:	4602      	mov	r2, r0
 8003740:	460b      	mov	r3, r1
 8003742:	f04f 0000 	mov.w	r0, #0
 8003746:	49af      	ldr	r1, [pc, #700]	; (8003a04 <kinematicInverse+0x3dc>)
 8003748:	f7fc fdae 	bl	80002a8 <__aeabi_dsub>
 800374c:	4602      	mov	r2, r0
 800374e:	460b      	mov	r3, r1
 8003750:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	if ( temp < 0 ) {
 8003754:	f04f 0200 	mov.w	r2, #0
 8003758:	f04f 0300 	mov.w	r3, #0
 800375c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003760:	f7fd f9cc 	bl	8000afc <__aeabi_dcmplt>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d001      	beq.n	800376e <kinematicInverse+0x146>
		return FALSE;
 800376a:	2300      	movs	r3, #0
 800376c:	e136      	b.n	80039dc <kinematicInverse+0x3b4>
	}
	s2_positive  = sqrt(temp); // Note that there are 2 solution: elbow up & elbow down
 800376e:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 8003772:	f016 fd1f 	bl	801a1b4 <sqrt>
 8003776:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
	s2_negative	 = -s2_positive;
 800377a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800377c:	63bb      	str	r3, [r7, #56]	; 0x38
 800377e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003780:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003784:	63fb      	str	r3, [r7, #60]	; 0x3c

	theta2_positive = atan2(s2_positive,c2);
 8003786:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 800378a:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 800378e:	f016 fd0f 	bl	801a1b0 <atan2>
 8003792:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
	theta2_negative = atan2(s2_negative,c2);
 8003796:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 800379a:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 800379e:	f016 fd07 	bl	801a1b0 <atan2>
 80037a2:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	// Choose relevant situation : nearest
	if ( fabs( theta2_positive - current.Theta2) <= fabs( theta2_negative - current.Theta2)) {
 80037a6:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80037aa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80037ae:	f7fc fd7b 	bl	80002a8 <__aeabi_dsub>
 80037b2:	4602      	mov	r2, r0
 80037b4:	460b      	mov	r3, r1
 80037b6:	4614      	mov	r4, r2
 80037b8:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80037bc:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80037c0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80037c4:	f7fc fd70 	bl	80002a8 <__aeabi_dsub>
 80037c8:	4602      	mov	r2, r0
 80037ca:	460b      	mov	r3, r1
 80037cc:	4690      	mov	r8, r2
 80037ce:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80037d2:	4642      	mov	r2, r8
 80037d4:	464b      	mov	r3, r9
 80037d6:	4620      	mov	r0, r4
 80037d8:	4629      	mov	r1, r5
 80037da:	f7fd f999 	bl	8000b10 <__aeabi_dcmple>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d008      	beq.n	80037f6 <kinematicInverse+0x1ce>
		s2 		= s2_positive;
 80037e4:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80037e8:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
		theta2 	= theta2_positive;
 80037ec:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80037f0:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
 80037f4:	e007      	b.n	8003806 <kinematicInverse+0x1de>
	} else {
		s2 		= s2_negative;
 80037f6:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80037fa:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
		theta2 	= theta2_negative;
 80037fe:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8003802:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	}

	s1 = ((a1 + a2*c2)*pWy - a2*s2*pWx) / (pWx*pWx + pWy*pWy);
 8003806:	f04f 0200 	mov.w	r2, #0
 800380a:	4b7f      	ldr	r3, [pc, #508]	; (8003a08 <kinematicInverse+0x3e0>)
 800380c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003810:	f7fc ff02 	bl	8000618 <__aeabi_dmul>
 8003814:	4603      	mov	r3, r0
 8003816:	460c      	mov	r4, r1
 8003818:	4618      	mov	r0, r3
 800381a:	4621      	mov	r1, r4
 800381c:	a376      	add	r3, pc, #472	; (adr r3, 80039f8 <kinematicInverse+0x3d0>)
 800381e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003822:	f7fc fd43 	bl	80002ac <__adddf3>
 8003826:	4603      	mov	r3, r0
 8003828:	460c      	mov	r4, r1
 800382a:	4618      	mov	r0, r3
 800382c:	4621      	mov	r1, r4
 800382e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003832:	f7fc fef1 	bl	8000618 <__aeabi_dmul>
 8003836:	4603      	mov	r3, r0
 8003838:	460c      	mov	r4, r1
 800383a:	4625      	mov	r5, r4
 800383c:	461c      	mov	r4, r3
 800383e:	f04f 0200 	mov.w	r2, #0
 8003842:	4b71      	ldr	r3, [pc, #452]	; (8003a08 <kinematicInverse+0x3e0>)
 8003844:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003848:	f7fc fee6 	bl	8000618 <__aeabi_dmul>
 800384c:	4602      	mov	r2, r0
 800384e:	460b      	mov	r3, r1
 8003850:	4610      	mov	r0, r2
 8003852:	4619      	mov	r1, r3
 8003854:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003858:	f7fc fede 	bl	8000618 <__aeabi_dmul>
 800385c:	4602      	mov	r2, r0
 800385e:	460b      	mov	r3, r1
 8003860:	4620      	mov	r0, r4
 8003862:	4629      	mov	r1, r5
 8003864:	f7fc fd20 	bl	80002a8 <__aeabi_dsub>
 8003868:	4603      	mov	r3, r0
 800386a:	460c      	mov	r4, r1
 800386c:	4625      	mov	r5, r4
 800386e:	461c      	mov	r4, r3
 8003870:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003874:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003878:	f7fc fece 	bl	8000618 <__aeabi_dmul>
 800387c:	4602      	mov	r2, r0
 800387e:	460b      	mov	r3, r1
 8003880:	4690      	mov	r8, r2
 8003882:	4699      	mov	r9, r3
 8003884:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003888:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800388c:	f7fc fec4 	bl	8000618 <__aeabi_dmul>
 8003890:	4602      	mov	r2, r0
 8003892:	460b      	mov	r3, r1
 8003894:	4640      	mov	r0, r8
 8003896:	4649      	mov	r1, r9
 8003898:	f7fc fd08 	bl	80002ac <__adddf3>
 800389c:	4602      	mov	r2, r0
 800389e:	460b      	mov	r3, r1
 80038a0:	4620      	mov	r0, r4
 80038a2:	4629      	mov	r1, r5
 80038a4:	f7fc ffe2 	bl	800086c <__aeabi_ddiv>
 80038a8:	4603      	mov	r3, r0
 80038aa:	460c      	mov	r4, r1
 80038ac:	e9c7 3408 	strd	r3, r4, [r7, #32]
	c1 = ((a1 + a2*c2)*pWx + a2*s2*pWy) / (pWx*pWx + pWy*pWy);
 80038b0:	f04f 0200 	mov.w	r2, #0
 80038b4:	4b54      	ldr	r3, [pc, #336]	; (8003a08 <kinematicInverse+0x3e0>)
 80038b6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80038ba:	f7fc fead 	bl	8000618 <__aeabi_dmul>
 80038be:	4603      	mov	r3, r0
 80038c0:	460c      	mov	r4, r1
 80038c2:	4618      	mov	r0, r3
 80038c4:	4621      	mov	r1, r4
 80038c6:	a34c      	add	r3, pc, #304	; (adr r3, 80039f8 <kinematicInverse+0x3d0>)
 80038c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038cc:	f7fc fcee 	bl	80002ac <__adddf3>
 80038d0:	4603      	mov	r3, r0
 80038d2:	460c      	mov	r4, r1
 80038d4:	4618      	mov	r0, r3
 80038d6:	4621      	mov	r1, r4
 80038d8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80038dc:	f7fc fe9c 	bl	8000618 <__aeabi_dmul>
 80038e0:	4603      	mov	r3, r0
 80038e2:	460c      	mov	r4, r1
 80038e4:	4625      	mov	r5, r4
 80038e6:	461c      	mov	r4, r3
 80038e8:	f04f 0200 	mov.w	r2, #0
 80038ec:	4b46      	ldr	r3, [pc, #280]	; (8003a08 <kinematicInverse+0x3e0>)
 80038ee:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80038f2:	f7fc fe91 	bl	8000618 <__aeabi_dmul>
 80038f6:	4602      	mov	r2, r0
 80038f8:	460b      	mov	r3, r1
 80038fa:	4610      	mov	r0, r2
 80038fc:	4619      	mov	r1, r3
 80038fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003902:	f7fc fe89 	bl	8000618 <__aeabi_dmul>
 8003906:	4602      	mov	r2, r0
 8003908:	460b      	mov	r3, r1
 800390a:	4620      	mov	r0, r4
 800390c:	4629      	mov	r1, r5
 800390e:	f7fc fccd 	bl	80002ac <__adddf3>
 8003912:	4603      	mov	r3, r0
 8003914:	460c      	mov	r4, r1
 8003916:	4625      	mov	r5, r4
 8003918:	461c      	mov	r4, r3
 800391a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800391e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003922:	f7fc fe79 	bl	8000618 <__aeabi_dmul>
 8003926:	4602      	mov	r2, r0
 8003928:	460b      	mov	r3, r1
 800392a:	4690      	mov	r8, r2
 800392c:	4699      	mov	r9, r3
 800392e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003932:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003936:	f7fc fe6f 	bl	8000618 <__aeabi_dmul>
 800393a:	4602      	mov	r2, r0
 800393c:	460b      	mov	r3, r1
 800393e:	4640      	mov	r0, r8
 8003940:	4649      	mov	r1, r9
 8003942:	f7fc fcb3 	bl	80002ac <__adddf3>
 8003946:	4602      	mov	r2, r0
 8003948:	460b      	mov	r3, r1
 800394a:	4620      	mov	r0, r4
 800394c:	4629      	mov	r1, r5
 800394e:	f7fc ff8d 	bl	800086c <__aeabi_ddiv>
 8003952:	4603      	mov	r3, r0
 8003954:	460c      	mov	r4, r1
 8003956:	e9c7 3406 	strd	r3, r4, [r7, #24]
	theta1 = atan2(s1,c1);
 800395a:	ed97 1b06 	vldr	d1, [r7, #24]
 800395e:	ed97 0b08 	vldr	d0, [r7, #32]
 8003962:	f016 fc25 	bl	801a1b0 <atan2>
 8003966:	ed87 0b04 	vstr	d0, [r7, #16]
 	theta4 = theta1 + theta2 - pnt->roll;
 800396a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800396e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003972:	f7fc fc9b 	bl	80002ac <__adddf3>
 8003976:	4603      	mov	r3, r0
 8003978:	460c      	mov	r4, r1
 800397a:	4618      	mov	r0, r3
 800397c:	4621      	mov	r1, r4
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8003984:	461a      	mov	r2, r3
 8003986:	4623      	mov	r3, r4
 8003988:	f7fc fc8e 	bl	80002a8 <__aeabi_dsub>
 800398c:	4603      	mov	r3, r0
 800398e:	460c      	mov	r4, r1
 8003990:	e9c7 3402 	strd	r3, r4, [r7, #8]

	if ( SCARA_STATUS_OK != scaraCheckWorkSpace4(theta1, theta2, d3, theta4)) {
 8003994:	ed97 3b02 	vldr	d3, [r7, #8]
 8003998:	ed97 2b1a 	vldr	d2, [r7, #104]	; 0x68
 800399c:	ed97 1b1e 	vldr	d1, [r7, #120]	; 0x78
 80039a0:	ed97 0b04 	vldr	d0, [r7, #16]
 80039a4:	f005 fac0 	bl	8008f28 <scaraCheckWorkSpace4>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d001      	beq.n	80039b2 <kinematicInverse+0x38a>
		return FALSE; // Over workspace !!!
 80039ae:	2300      	movs	r3, #0
 80039b0:	e014      	b.n	80039dc <kinematicInverse+0x3b4>
	}
	pnt->Theta1 = theta1;
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80039b8:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
	pnt->Theta2 = theta2;
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 80039c2:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	pnt->D3		= d3;
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80039cc:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	pnt->Theta4 = theta4;
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80039d6:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80

	return TRUE; // All is well
 80039da:	2301      	movs	r3, #1
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3780      	adds	r7, #128	; 0x80
 80039e0:	46bd      	mov	sp, r7
 80039e2:	e8bd 4fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039e6:	b002      	add	sp, #8
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	f3af 8000 	nop.w
 80039f0:	00000000 	.word	0x00000000
 80039f4:	40eec800 	.word	0x40eec800
 80039f8:	00000000 	.word	0x00000000
 80039fc:	4068a000 	.word	0x4068a000
 8003a00:	40d90000 	.word	0x40d90000
 8003a04:	3ff00000 	.word	0x3ff00000
 8003a08:	40640000 	.word	0x40640000
 8003a0c:	80000000 	.word	0x80000000
 8003a10:	4060aa6e 	.word	0x4060aa6e
 8003a14:	80000000 	.word	0x80000000
 8003a18:	40402e14 	.word	0x40402e14
 8003a1c:	00000000 	.word	0x00000000
 8003a20:	40e2f320 	.word	0x40e2f320

08003a24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003a28:	f007 fbc0 	bl	800b1ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003a2c:	f000 f810 	bl	8003a50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003a30:	f7ff fc04 	bl	800323c <MX_GPIO_Init>
  MX_DMA_Init();
 8003a34:	f7fe fc1c 	bl	8002270 <MX_DMA_Init>
  MX_UART4_Init();
 8003a38:	f007 faba 	bl	800afb0 <MX_UART4_Init>
  MX_FSMC_Init();
 8003a3c:	f7ff fb36 	bl	80030ac <MX_FSMC_Init>
  MX_TIM7_Init();
 8003a40:	f007 fa58 	bl	800aef4 <MX_TIM7_Init>
  //lowlayer_writePulse(0, 0, 0, 0);
  //HAL_Delay(10);
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8003a44:	f7fe fc4e 	bl	80022e4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8003a48:	f00e f97e 	bl	8011d48 <osKernelStart>
//  		  HAL_Delay(10);
//  	  }
//  lowlayer_writePulse(0, 0, 0, 0);
//  __NOP();

  while (1)
 8003a4c:	e7fe      	b.n	8003a4c <main+0x28>
	...

08003a50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b094      	sub	sp, #80	; 0x50
 8003a54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003a56:	f107 0320 	add.w	r3, r7, #32
 8003a5a:	2230      	movs	r2, #48	; 0x30
 8003a5c:	2100      	movs	r1, #0
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f012 f882 	bl	8015b68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003a64:	f107 030c 	add.w	r3, r7, #12
 8003a68:	2200      	movs	r2, #0
 8003a6a:	601a      	str	r2, [r3, #0]
 8003a6c:	605a      	str	r2, [r3, #4]
 8003a6e:	609a      	str	r2, [r3, #8]
 8003a70:	60da      	str	r2, [r3, #12]
 8003a72:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a74:	2300      	movs	r3, #0
 8003a76:	60bb      	str	r3, [r7, #8]
 8003a78:	4b28      	ldr	r3, [pc, #160]	; (8003b1c <SystemClock_Config+0xcc>)
 8003a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7c:	4a27      	ldr	r2, [pc, #156]	; (8003b1c <SystemClock_Config+0xcc>)
 8003a7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a82:	6413      	str	r3, [r2, #64]	; 0x40
 8003a84:	4b25      	ldr	r3, [pc, #148]	; (8003b1c <SystemClock_Config+0xcc>)
 8003a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a8c:	60bb      	str	r3, [r7, #8]
 8003a8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a90:	2300      	movs	r3, #0
 8003a92:	607b      	str	r3, [r7, #4]
 8003a94:	4b22      	ldr	r3, [pc, #136]	; (8003b20 <SystemClock_Config+0xd0>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a21      	ldr	r2, [pc, #132]	; (8003b20 <SystemClock_Config+0xd0>)
 8003a9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a9e:	6013      	str	r3, [r2, #0]
 8003aa0:	4b1f      	ldr	r3, [pc, #124]	; (8003b20 <SystemClock_Config+0xd0>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003aa8:	607b      	str	r3, [r7, #4]
 8003aaa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003aac:	2301      	movs	r3, #1
 8003aae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003ab0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ab4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003ab6:	2302      	movs	r3, #2
 8003ab8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003aba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003abe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003ac0:	2308      	movs	r3, #8
 8003ac2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003ac4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8003ac8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003aca:	2302      	movs	r3, #2
 8003acc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003ace:	2307      	movs	r3, #7
 8003ad0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003ad2:	f107 0320 	add.w	r3, r7, #32
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f009 fbe0 	bl	800d29c <HAL_RCC_OscConfig>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d001      	beq.n	8003ae6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8003ae2:	f000 f831 	bl	8003b48 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003ae6:	230f      	movs	r3, #15
 8003ae8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003aea:	2302      	movs	r3, #2
 8003aec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003aee:	2300      	movs	r3, #0
 8003af0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003af2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003af6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003af8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003afc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003afe:	f107 030c 	add.w	r3, r7, #12
 8003b02:	2105      	movs	r1, #5
 8003b04:	4618      	mov	r0, r3
 8003b06:	f009 fe39 	bl	800d77c <HAL_RCC_ClockConfig>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d001      	beq.n	8003b14 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8003b10:	f000 f81a 	bl	8003b48 <Error_Handler>
  }
}
 8003b14:	bf00      	nop
 8003b16:	3750      	adds	r7, #80	; 0x50
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	40023800 	.word	0x40023800
 8003b20:	40007000 	.word	0x40007000

08003b24 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b082      	sub	sp, #8
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a04      	ldr	r2, [pc, #16]	; (8003b44 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d101      	bne.n	8003b3a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003b36:	f007 fb5b 	bl	800b1f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003b3a:	bf00      	nop
 8003b3c:	3708      	adds	r7, #8
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	40001000 	.word	0x40001000

08003b48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003b4c:	bf00      	nop
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr

08003b56 <ringBuff_PushChar>:
 *  data		: data to write
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t	ringBuff_PushChar(RINGBUFFER_TypeDef *ringbuff, uint8_t data) {
 8003b56:	b480      	push	{r7}
 8003b58:	b083      	sub	sp, #12
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
 8003b5e:	460b      	mov	r3, r1
 8003b60:	70fb      	strb	r3, [r7, #3]
	if (ringbuff->isFull_Flag) {
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d001      	beq.n	8003b70 <ringBuff_PushChar+0x1a>
		return FALSE;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	e024      	b.n	8003bba <ringBuff_PushChar+0x64>
	} else {
			ringbuff->Array[ringbuff->head]	= data;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	78f9      	ldrb	r1, [r7, #3]
 8003b7a:	54d1      	strb	r1, [r2, r3]
			ringbuff->head					= (ringbuff->head + 1) % RINGBUFFER_SIZE;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003b82:	3301      	adds	r3, #1
 8003b84:	425a      	negs	r2, r3
 8003b86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b8a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003b8e:	bf58      	it	pl
 8003b90:	4253      	negpl	r3, r2
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
			if (ringbuff->head == ringbuff->tail) {
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d103      	bne.n	8003bb0 <ringBuff_PushChar+0x5a>
				ringbuff->isFull_Flag = TRUE;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
			}
			ringbuff->isEmpty_Flag = FALSE;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 2409 	strb.w	r2, [r3, #1033]	; 0x409
			return TRUE;
 8003bb8:	2301      	movs	r3, #1
	}
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	370c      	adds	r7, #12
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr

08003bc6 <ringBuff_PopChar>:
 *  *ptr_data	: pointer of destination
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t	ringBuff_PopChar(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data) {
 8003bc6:	b480      	push	{r7}
 8003bc8:	b083      	sub	sp, #12
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
 8003bce:	6039      	str	r1, [r7, #0]
	if (ringbuff->isEmpty_Flag) {
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f893 3409 	ldrb.w	r3, [r3, #1033]	; 0x409
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d001      	beq.n	8003bde <ringBuff_PopChar+0x18>
		return FALSE;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	e025      	b.n	8003c2a <ringBuff_PopChar+0x64>
	} else {
			*ptr_data		= ringbuff->Array[ringbuff->tail];
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	5cd2      	ldrb	r2, [r2, r3]
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	701a      	strb	r2, [r3, #0]
			ringbuff->tail	= (ringbuff->tail +1) % RINGBUFFER_SIZE;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	425a      	negs	r2, r3
 8003bf6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bfa:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003bfe:	bf58      	it	pl
 8003c00:	4253      	negpl	r3, r2
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
			if (ringbuff->head == ringbuff->tail) {
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d103      	bne.n	8003c20 <ringBuff_PopChar+0x5a>
				ringbuff->isEmpty_Flag = TRUE;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 2409 	strb.w	r2, [r3, #1033]	; 0x409
			}
			ringbuff->isFull_Flag = FALSE;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
			return TRUE;
 8003c28:	2301      	movs	r3, #1
	}
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr

08003c36 <ringBuff_PushArray>:
 *  *ptr_data	: pointer of source
 *  len			: maximum number of bytes that want to copy
 *
 *  returns:	: number of bytes copied
 */
int32_t ringBuff_PushArray(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data, int32_t len) {
 8003c36:	b580      	push	{r7, lr}
 8003c38:	b086      	sub	sp, #24
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	60f8      	str	r0, [r7, #12]
 8003c3e:	60b9      	str	r1, [r7, #8]
 8003c40:	607a      	str	r2, [r7, #4]
	int16_t success_number;

	for (success_number = 0; success_number < len; success_number++) {
 8003c42:	2300      	movs	r3, #0
 8003c44:	82fb      	strh	r3, [r7, #22]
 8003c46:	e011      	b.n	8003c6c <ringBuff_PushArray+0x36>
		if ( !ringBuff_PushChar(ringbuff, *(ptr_data + success_number))) {
 8003c48:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003c4c:	68ba      	ldr	r2, [r7, #8]
 8003c4e:	4413      	add	r3, r2
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	4619      	mov	r1, r3
 8003c54:	68f8      	ldr	r0, [r7, #12]
 8003c56:	f7ff ff7e 	bl	8003b56 <ringBuff_PushChar>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d00b      	beq.n	8003c78 <ringBuff_PushArray+0x42>
	for (success_number = 0; success_number < len; success_number++) {
 8003c60:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	3301      	adds	r3, #1
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	82fb      	strh	r3, [r7, #22]
 8003c6c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	dce8      	bgt.n	8003c48 <ringBuff_PushArray+0x12>
 8003c76:	e000      	b.n	8003c7a <ringBuff_PushArray+0x44>
			break;
 8003c78:	bf00      	nop
		}// stop when ring buffer FULL
	}
	return success_number;
 8003c7a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3718      	adds	r7, #24
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}

08003c86 <ringBuff_PopArray>:
 *  *ptr_data	: pointer of destination
 *  len			: maximum number of bytes that want to copy
 *
 *  returns:	: number of bytes copied
 */
int32_t ringBuff_PopArray(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data, int32_t len) {
 8003c86:	b580      	push	{r7, lr}
 8003c88:	b086      	sub	sp, #24
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	60f8      	str	r0, [r7, #12]
 8003c8e:	60b9      	str	r1, [r7, #8]
 8003c90:	607a      	str	r2, [r7, #4]
	int32_t success_number;

	for (success_number = 0; success_number < len; success_number++) {
 8003c92:	2300      	movs	r3, #0
 8003c94:	617b      	str	r3, [r7, #20]
 8003c96:	e00c      	b.n	8003cb2 <ringBuff_PopArray+0x2c>
		if ( !ringBuff_PopChar(ringbuff, (ptr_data + success_number))) {
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	68ba      	ldr	r2, [r7, #8]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	68f8      	ldr	r0, [r7, #12]
 8003ca2:	f7ff ff90 	bl	8003bc6 <ringBuff_PopChar>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d007      	beq.n	8003cbc <ringBuff_PopArray+0x36>
	for (success_number = 0; success_number < len; success_number++) {
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	3301      	adds	r3, #1
 8003cb0:	617b      	str	r3, [r7, #20]
 8003cb2:	697a      	ldr	r2, [r7, #20]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	dbee      	blt.n	8003c98 <ringBuff_PopArray+0x12>
 8003cba:	e000      	b.n	8003cbe <ringBuff_PopArray+0x38>
			break;
 8003cbc:	bf00      	nop
		}// stop when ring buffer EMPTY
	}
	return success_number;
 8003cbe:	697b      	ldr	r3, [r7, #20]
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3718      	adds	r7, #24
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <ringBuff_DistanceOf>:
 *  cmp_char	: compare character
 *
 *  returns:	: distance from 'tail' to 'cmp_char'
 *  			  -1 'cmp_char' could not be found.
 */
int32_t	ringBuff_DistanceOf	(RINGBUFFER_TypeDef *ringbuff, uint8_t cmp_char) {
 8003cc8:	b480      	push	{r7}
 8003cca:	b087      	sub	sp, #28
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	460b      	mov	r3, r1
 8003cd2:	70fb      	strb	r3, [r7, #3]
	int32_t index;
	int32_t distance = 0;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	613b      	str	r3, [r7, #16]

	index = ringbuff->tail;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003cde:	617b      	str	r3, [r7, #20]
	if (ringbuff->isFull_Flag) {
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d036      	beq.n	8003d58 <ringBuff_DistanceOf+0x90>
		for ( int32_t i = 0; i < RINGBUFFER_SIZE; i++, index = (index + 1) % RINGBUFFER_SIZE) {
 8003cea:	2300      	movs	r3, #0
 8003cec:	60fb      	str	r3, [r7, #12]
 8003cee:	e018      	b.n	8003d22 <ringBuff_DistanceOf+0x5a>
				if ( cmp_char == ringbuff->Array[index]) {
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	4413      	add	r3, r2
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	78fa      	ldrb	r2, [r7, #3]
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d101      	bne.n	8003d02 <ringBuff_DistanceOf+0x3a>
					return distance;
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	e037      	b.n	8003d72 <ringBuff_DistanceOf+0xaa>
				}
				distance++;
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	3301      	adds	r3, #1
 8003d06:	613b      	str	r3, [r7, #16]
		for ( int32_t i = 0; i < RINGBUFFER_SIZE; i++, index = (index + 1) % RINGBUFFER_SIZE) {
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	60fb      	str	r3, [r7, #12]
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	3301      	adds	r3, #1
 8003d12:	425a      	negs	r2, r3
 8003d14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d18:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003d1c:	bf58      	it	pl
 8003d1e:	4253      	negpl	r3, r2
 8003d20:	617b      	str	r3, [r7, #20]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d28:	dbe2      	blt.n	8003cf0 <ringBuff_DistanceOf+0x28>
 8003d2a:	e020      	b.n	8003d6e <ringBuff_DistanceOf+0xa6>
			}

	} else {
		for ( ; (index != ringbuff->head) || !ringbuff->isEmpty_Flag; index = (index + 1) % RINGBUFFER_SIZE) {
				if ( cmp_char == ringbuff->Array[index]) {
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	4413      	add	r3, r2
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	78fa      	ldrb	r2, [r7, #3]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d101      	bne.n	8003d3e <ringBuff_DistanceOf+0x76>
					return distance;
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	e019      	b.n	8003d72 <ringBuff_DistanceOf+0xaa>
				}
				distance++;
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	3301      	adds	r3, #1
 8003d42:	613b      	str	r3, [r7, #16]
		for ( ; (index != ringbuff->head) || !ringbuff->isEmpty_Flag; index = (index + 1) % RINGBUFFER_SIZE) {
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	3301      	adds	r3, #1
 8003d48:	425a      	negs	r2, r3
 8003d4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d4e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003d52:	bf58      	it	pl
 8003d54:	4253      	negpl	r3, r2
 8003d56:	617b      	str	r3, [r7, #20]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003d5e:	697a      	ldr	r2, [r7, #20]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d1e3      	bne.n	8003d2c <ringBuff_DistanceOf+0x64>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f893 3409 	ldrb.w	r3, [r3, #1033]	; 0x409
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d0de      	beq.n	8003d2c <ringBuff_DistanceOf+0x64>
			}
	}
	return -1;
 8003d6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	371c      	adds	r7, #28
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
	...

08003d80 <lowlayer_scanReset>:
uint8_t state_scan;
uint8_t scan_flag;

const int8_t	pulse_scan[4] = {3, 5, 5, 10};

void	lowlayer_scanReset(void) {
 8003d80:	b580      	push	{r7, lr}
 8003d82:	af00      	add	r7, sp, #0
	pulse_accumulate[0] = 0;
 8003d84:	4b10      	ldr	r3, [pc, #64]	; (8003dc8 <lowlayer_scanReset+0x48>)
 8003d86:	2200      	movs	r2, #0
 8003d88:	601a      	str	r2, [r3, #0]
	pulse_accumulate[1] = 0;
 8003d8a:	4b0f      	ldr	r3, [pc, #60]	; (8003dc8 <lowlayer_scanReset+0x48>)
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	605a      	str	r2, [r3, #4]
	pulse_accumulate[2] = 0;
 8003d90:	4b0d      	ldr	r3, [pc, #52]	; (8003dc8 <lowlayer_scanReset+0x48>)
 8003d92:	2200      	movs	r2, #0
 8003d94:	609a      	str	r2, [r3, #8]
	pulse_accumulate[3] = 0;
 8003d96:	4b0c      	ldr	r3, [pc, #48]	; (8003dc8 <lowlayer_scanReset+0x48>)
 8003d98:	2200      	movs	r2, #0
 8003d9a:	60da      	str	r2, [r3, #12]

	position_encoder[0] = 0;
 8003d9c:	4b0b      	ldr	r3, [pc, #44]	; (8003dcc <lowlayer_scanReset+0x4c>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	601a      	str	r2, [r3, #0]
	position_encoder[1] = 0;
 8003da2:	4b0a      	ldr	r3, [pc, #40]	; (8003dcc <lowlayer_scanReset+0x4c>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	605a      	str	r2, [r3, #4]
	position_encoder[2] = 0;
 8003da8:	4b08      	ldr	r3, [pc, #32]	; (8003dcc <lowlayer_scanReset+0x4c>)
 8003daa:	2200      	movs	r2, #0
 8003dac:	609a      	str	r2, [r3, #8]

	scan_flag = 0;
 8003dae:	4b08      	ldr	r3, [pc, #32]	; (8003dd0 <lowlayer_scanReset+0x50>)
 8003db0:	2200      	movs	r2, #0
 8003db2:	701a      	strb	r2, [r3, #0]
	state_scan = 0;
 8003db4:	4b07      	ldr	r3, [pc, #28]	; (8003dd4 <lowlayer_scanReset+0x54>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(CAPTURE_ENABLE_GPIO_Port, CAPTURE_ENABLE_Pin, GPIO_PIN_RESET);
 8003dba:	2200      	movs	r2, #0
 8003dbc:	2108      	movs	r1, #8
 8003dbe:	4806      	ldr	r0, [pc, #24]	; (8003dd8 <lowlayer_scanReset+0x58>)
 8003dc0:	f008 f872 	bl	800bea8 <HAL_GPIO_WritePin>
}
 8003dc4:	bf00      	nop
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	20005368 	.word	0x20005368
 8003dcc:	2000537c 	.word	0x2000537c
 8003dd0:	20005378 	.word	0x20005378
 8003dd4:	20005398 	.word	0x20005398
 8003dd8:	40020c00 	.word	0x40020c00
 8003ddc:	00000000 	.word	0x00000000

08003de0 <lowlayer_scanFlow>:

uint8_t	lowlayer_scanFlow(void) {
 8003de0:	b590      	push	{r4, r7, lr}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
	// Scan limit switch from 3 to 0
	int8_t pulse[4] = {0, 0, 0 ,0};
 8003de6:	2300      	movs	r3, #0
 8003de8:	607b      	str	r3, [r7, #4]
	lowlayer_updateLimit();
 8003dea:	f000 fe87 	bl	8004afc <lowlayer_updateLimit>
	if (state_scan < 4) {
 8003dee:	4b98      	ldr	r3, [pc, #608]	; (8004050 <lowlayer_scanFlow+0x270>)
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	2b03      	cmp	r3, #3
 8003df4:	d837      	bhi.n	8003e66 <lowlayer_scanFlow+0x86>
		if (limit_switch[3 - state_scan] == 0) {
 8003df6:	4b96      	ldr	r3, [pc, #600]	; (8004050 <lowlayer_scanFlow+0x270>)
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	f1c3 0303 	rsb	r3, r3, #3
 8003dfe:	4a95      	ldr	r2, [pc, #596]	; (8004054 <lowlayer_scanFlow+0x274>)
 8003e00:	5cd3      	ldrb	r3, [r2, r3]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d121      	bne.n	8003e4a <lowlayer_scanFlow+0x6a>
			pulse[3 - state_scan] = pulse_scan[3 - state_scan];
 8003e06:	4b92      	ldr	r3, [pc, #584]	; (8004050 <lowlayer_scanFlow+0x270>)
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	f1c3 0203 	rsb	r2, r3, #3
 8003e0e:	4b90      	ldr	r3, [pc, #576]	; (8004050 <lowlayer_scanFlow+0x270>)
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	f1c3 0303 	rsb	r3, r3, #3
 8003e16:	4990      	ldr	r1, [pc, #576]	; (8004058 <lowlayer_scanFlow+0x278>)
 8003e18:	568a      	ldrsb	r2, [r1, r2]
 8003e1a:	f107 0108 	add.w	r1, r7, #8
 8003e1e:	440b      	add	r3, r1
 8003e20:	f803 2c04 	strb.w	r2, [r3, #-4]
			lowlayer_writePulse(-pulse[0], pulse[1], -pulse[2], pulse[3]);
 8003e24:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	425b      	negs	r3, r3
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	b258      	sxtb	r0, r3
 8003e30:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8003e34:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	425b      	negs	r3, r3
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	b25a      	sxtb	r2, r3
 8003e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e44:	f000 fcd8 	bl	80047f8 <lowlayer_writePulse>
 8003e48:	e00b      	b.n	8003e62 <lowlayer_scanFlow+0x82>
		} else {
			state_scan++;
 8003e4a:	4b81      	ldr	r3, [pc, #516]	; (8004050 <lowlayer_scanFlow+0x270>)
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	3301      	adds	r3, #1
 8003e50:	b2da      	uxtb	r2, r3
 8003e52:	4b7f      	ldr	r3, [pc, #508]	; (8004050 <lowlayer_scanFlow+0x270>)
 8003e54:	701a      	strb	r2, [r3, #0]
			lowlayer_writePulse(0, 0, 0, 0);
 8003e56:	2300      	movs	r3, #0
 8003e58:	2200      	movs	r2, #0
 8003e5a:	2100      	movs	r1, #0
 8003e5c:	2000      	movs	r0, #0
 8003e5e:	f000 fccb 	bl	80047f8 <lowlayer_writePulse>
		}

		return FALSE;
 8003e62:	2300      	movs	r3, #0
 8003e64:	e0d8      	b.n	8004018 <lowlayer_scanFlow+0x238>
	} else {
		HAL_GPIO_WritePin(CAPTURE_ENABLE_GPIO_Port, CAPTURE_ENABLE_Pin, GPIO_PIN_SET);
 8003e66:	2201      	movs	r2, #1
 8003e68:	2108      	movs	r1, #8
 8003e6a:	487c      	ldr	r0, [pc, #496]	; (800405c <lowlayer_scanFlow+0x27c>)
 8003e6c:	f008 f81c 	bl	800bea8 <HAL_GPIO_WritePin>
		lowlayer_updateCapture();
 8003e70:	f000 fe28 	bl	8004ac4 <lowlayer_updateCapture>
		lowlayer_writePulse(0, 0, 0, 0);
 8003e74:	2300      	movs	r3, #0
 8003e76:	2200      	movs	r2, #0
 8003e78:	2100      	movs	r1, #0
 8003e7a:	2000      	movs	r0, #0
 8003e7c:	f000 fcbc 	bl	80047f8 <lowlayer_writePulse>
		scan_flag = 1;
 8003e80:	4b77      	ldr	r3, [pc, #476]	; (8004060 <lowlayer_scanFlow+0x280>)
 8003e82:	2201      	movs	r2, #1
 8003e84:	701a      	strb	r2, [r3, #0]
		// Update offset
		offset_encoder[0] 	= position_capture[0];
 8003e86:	4b77      	ldr	r3, [pc, #476]	; (8004064 <lowlayer_scanFlow+0x284>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a77      	ldr	r2, [pc, #476]	; (8004068 <lowlayer_scanFlow+0x288>)
 8003e8c:	6013      	str	r3, [r2, #0]
		offset_encoder[1] 	= position_capture[1];
 8003e8e:	4b75      	ldr	r3, [pc, #468]	; (8004064 <lowlayer_scanFlow+0x284>)
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	4a75      	ldr	r2, [pc, #468]	; (8004068 <lowlayer_scanFlow+0x288>)
 8003e94:	6053      	str	r3, [r2, #4]
		offset_encoder[2] 	= position_capture[2];
 8003e96:	4b73      	ldr	r3, [pc, #460]	; (8004064 <lowlayer_scanFlow+0x284>)
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	4a73      	ldr	r2, [pc, #460]	; (8004068 <lowlayer_scanFlow+0x288>)
 8003e9c:	6093      	str	r3, [r2, #8]
		offset_stepper		= pulse_accumulate[3];
 8003e9e:	4b73      	ldr	r3, [pc, #460]	; (800406c <lowlayer_scanFlow+0x28c>)
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	4a73      	ldr	r2, [pc, #460]	; (8004070 <lowlayer_scanFlow+0x290>)
 8003ea4:	6013      	str	r3, [r2, #0]
		// LOG offset
		LOG_REPORT("offset encoder 0", offset_encoder[0]);
 8003ea6:	4b70      	ldr	r3, [pc, #448]	; (8004068 <lowlayer_scanFlow+0x288>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	4619      	mov	r1, r3
 8003eae:	4871      	ldr	r0, [pc, #452]	; (8004074 <lowlayer_scanFlow+0x294>)
 8003eb0:	f7fd fe0c 	bl	8001acc <LOG_REPORT>
		LOG_REPORT("offset encoder 1", offset_encoder[1]);
 8003eb4:	4b6c      	ldr	r3, [pc, #432]	; (8004068 <lowlayer_scanFlow+0x288>)
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	4619      	mov	r1, r3
 8003ebc:	486e      	ldr	r0, [pc, #440]	; (8004078 <lowlayer_scanFlow+0x298>)
 8003ebe:	f7fd fe05 	bl	8001acc <LOG_REPORT>
		LOG_REPORT("offset encoder 2", offset_encoder[2]);
 8003ec2:	4b69      	ldr	r3, [pc, #420]	; (8004068 <lowlayer_scanFlow+0x288>)
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	4619      	mov	r1, r3
 8003eca:	486c      	ldr	r0, [pc, #432]	; (800407c <lowlayer_scanFlow+0x29c>)
 8003ecc:	f7fd fdfe 	bl	8001acc <LOG_REPORT>
		LOG_REPORT("offset stepper", offset_stepper);
 8003ed0:	4b67      	ldr	r3, [pc, #412]	; (8004070 <lowlayer_scanFlow+0x290>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	4869      	ldr	r0, [pc, #420]	; (8004080 <lowlayer_scanFlow+0x2a0>)
 8003eda:	f7fd fdf7 	bl	8001acc <LOG_REPORT>

		offset_setpoint[0]	= HARD_LIM0_NEG
				- DIR_ENCODER_0*offset_encoder[0]*2.0*PI/ENCODER_J0;
 8003ede:	4b62      	ldr	r3, [pc, #392]	; (8004068 <lowlayer_scanFlow+0x288>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	ee07 3a90 	vmov	s15, r3
 8003ee6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003eea:	ee17 0a90 	vmov	r0, s15
 8003eee:	f7fc fb3b 	bl	8000568 <__aeabi_f2d>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	f7fc f9d9 	bl	80002ac <__adddf3>
 8003efa:	4603      	mov	r3, r0
 8003efc:	460c      	mov	r4, r1
 8003efe:	4618      	mov	r0, r3
 8003f00:	4621      	mov	r1, r4
 8003f02:	a347      	add	r3, pc, #284	; (adr r3, 8004020 <lowlayer_scanFlow+0x240>)
 8003f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f08:	f7fc fb86 	bl	8000618 <__aeabi_dmul>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	460c      	mov	r4, r1
 8003f10:	4618      	mov	r0, r3
 8003f12:	4621      	mov	r1, r4
 8003f14:	a344      	add	r3, pc, #272	; (adr r3, 8004028 <lowlayer_scanFlow+0x248>)
 8003f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f1a:	f7fc fca7 	bl	800086c <__aeabi_ddiv>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	460c      	mov	r4, r1
 8003f22:	461a      	mov	r2, r3
 8003f24:	4623      	mov	r3, r4
 8003f26:	a142      	add	r1, pc, #264	; (adr r1, 8004030 <lowlayer_scanFlow+0x250>)
 8003f28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003f2c:	f7fc f9bc 	bl	80002a8 <__aeabi_dsub>
 8003f30:	4603      	mov	r3, r0
 8003f32:	460c      	mov	r4, r1
		offset_setpoint[0]	= HARD_LIM0_NEG
 8003f34:	4a53      	ldr	r2, [pc, #332]	; (8004084 <lowlayer_scanFlow+0x2a4>)
 8003f36:	e9c2 3400 	strd	r3, r4, [r2]
		offset_setpoint[1]	= HARD_LIM1_POS
				- DIR_ENCODER_1*offset_encoder[1]*2.0*PI/ENCODER_J1;
 8003f3a:	4b4b      	ldr	r3, [pc, #300]	; (8004068 <lowlayer_scanFlow+0x288>)
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	ee07 3a90 	vmov	s15, r3
 8003f42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f46:	ee17 0a90 	vmov	r0, s15
 8003f4a:	f7fc fb0d 	bl	8000568 <__aeabi_f2d>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	460b      	mov	r3, r1
 8003f52:	f7fc f9ab 	bl	80002ac <__adddf3>
 8003f56:	4603      	mov	r3, r0
 8003f58:	460c      	mov	r4, r1
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	4621      	mov	r1, r4
 8003f5e:	a330      	add	r3, pc, #192	; (adr r3, 8004020 <lowlayer_scanFlow+0x240>)
 8003f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f64:	f7fc fb58 	bl	8000618 <__aeabi_dmul>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	460c      	mov	r4, r1
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	4621      	mov	r1, r4
 8003f70:	f04f 0200 	mov.w	r2, #0
 8003f74:	4b44      	ldr	r3, [pc, #272]	; (8004088 <lowlayer_scanFlow+0x2a8>)
 8003f76:	f7fc fc79 	bl	800086c <__aeabi_ddiv>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	460c      	mov	r4, r1
 8003f7e:	461a      	mov	r2, r3
 8003f80:	4623      	mov	r3, r4
 8003f82:	a12d      	add	r1, pc, #180	; (adr r1, 8004038 <lowlayer_scanFlow+0x258>)
 8003f84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003f88:	f7fc f98e 	bl	80002a8 <__aeabi_dsub>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	460c      	mov	r4, r1
		offset_setpoint[1]	= HARD_LIM1_POS
 8003f90:	4a3c      	ldr	r2, [pc, #240]	; (8004084 <lowlayer_scanFlow+0x2a4>)
 8003f92:	e9c2 3402 	strd	r3, r4, [r2, #8]
		offset_setpoint[2]	= HARD_LIM2_NEG
				- DIR_ENCODER_2*offset_encoder[2]/ENCODER_J2;
 8003f96:	4b34      	ldr	r3, [pc, #208]	; (8004068 <lowlayer_scanFlow+0x288>)
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	ee07 3a90 	vmov	s15, r3
 8003f9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003fa2:	eddf 6a3a 	vldr	s13, [pc, #232]	; 800408c <lowlayer_scanFlow+0x2ac>
 8003fa6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003faa:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8004090 <lowlayer_scanFlow+0x2b0>
 8003fae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003fb2:	ee17 0a90 	vmov	r0, s15
 8003fb6:	f7fc fad7 	bl	8000568 <__aeabi_f2d>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	460c      	mov	r4, r1
		offset_setpoint[2]	= HARD_LIM2_NEG
 8003fbe:	4a31      	ldr	r2, [pc, #196]	; (8004084 <lowlayer_scanFlow+0x2a4>)
 8003fc0:	e9c2 3404 	strd	r3, r4, [r2, #16]
		offset_setpoint[3]  = HARD_LIM3_POS
				- offset_stepper*2.0*PI/GEAR_J3;
 8003fc4:	4b2a      	ldr	r3, [pc, #168]	; (8004070 <lowlayer_scanFlow+0x290>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7fc fabb 	bl	8000544 <__aeabi_i2d>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	f7fc f96b 	bl	80002ac <__adddf3>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	460c      	mov	r4, r1
 8003fda:	4618      	mov	r0, r3
 8003fdc:	4621      	mov	r1, r4
 8003fde:	a310      	add	r3, pc, #64	; (adr r3, 8004020 <lowlayer_scanFlow+0x240>)
 8003fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe4:	f7fc fb18 	bl	8000618 <__aeabi_dmul>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	460c      	mov	r4, r1
 8003fec:	4618      	mov	r0, r3
 8003fee:	4621      	mov	r1, r4
 8003ff0:	a313      	add	r3, pc, #76	; (adr r3, 8004040 <lowlayer_scanFlow+0x260>)
 8003ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff6:	f7fc fc39 	bl	800086c <__aeabi_ddiv>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	460c      	mov	r4, r1
 8003ffe:	461a      	mov	r2, r3
 8004000:	4623      	mov	r3, r4
 8004002:	a111      	add	r1, pc, #68	; (adr r1, 8004048 <lowlayer_scanFlow+0x268>)
 8004004:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004008:	f7fc f94e 	bl	80002a8 <__aeabi_dsub>
 800400c:	4603      	mov	r3, r0
 800400e:	460c      	mov	r4, r1
		offset_setpoint[3]  = HARD_LIM3_POS
 8004010:	4a1c      	ldr	r2, [pc, #112]	; (8004084 <lowlayer_scanFlow+0x2a4>)
 8004012:	e9c2 3406 	strd	r3, r4, [r2, #24]

		return TRUE;
 8004016:	2301      	movs	r3, #1
	}
}
 8004018:	4618      	mov	r0, r3
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	bd90      	pop	{r4, r7, pc}
 8004020:	60000000 	.word	0x60000000
 8004024:	400921fb 	.word	0x400921fb
 8004028:	00000000 	.word	0x00000000
 800402c:	40f38800 	.word	0x40f38800
 8004030:	40000000 	.word	0x40000000
 8004034:	bff9f17a 	.word	0xbff9f17a
 8004038:	80000000 	.word	0x80000000
 800403c:	40039716 	.word	0x40039716
 8004040:	a0000000 	.word	0xa0000000
 8004044:	40d3bca1 	.word	0x40d3bca1
 8004048:	a0000000 	.word	0xa0000000
 800404c:	4008330d 	.word	0x4008330d
 8004050:	20005398 	.word	0x20005398
 8004054:	20005388 	.word	0x20005388
 8004058:	0801be58 	.word	0x0801be58
 800405c:	40020c00 	.word	0x40020c00
 8004060:	20005378 	.word	0x20005378
 8004064:	2000538c 	.word	0x2000538c
 8004068:	200053c0 	.word	0x200053c0
 800406c:	20005368 	.word	0x20005368
 8004070:	2000539c 	.word	0x2000539c
 8004074:	0801bc6c 	.word	0x0801bc6c
 8004078:	0801bc80 	.word	0x0801bc80
 800407c:	0801bc94 	.word	0x0801bc94
 8004080:	0801bca8 	.word	0x0801bca8
 8004084:	200053a0 	.word	0x200053a0
 8004088:	40ff4000 	.word	0x40ff4000
 800408c:	4426aaab 	.word	0x4426aaab
 8004090:	400f1aa0 	.word	0x400f1aa0
 8004094:	00000000 	.word	0x00000000

08004098 <lowlayer_goToSoftLimit>:

uint8_t	lowlayer_goToSoftLimit(SCARA_PositionTypeDef *setpoint) {
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
	int8_t pulse[4] = {0, 0, 0 ,0};
 80040a0:	2300      	movs	r3, #0
 80040a2:	60bb      	str	r3, [r7, #8]
	uint8_t check = 0;
 80040a4:	2300      	movs	r3, #0
 80040a6:	73fb      	strb	r3, [r7, #15]
	lowlayer_readSetPosition(setpoint);
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f000 f94d 	bl	8004348 <lowlayer_readSetPosition>
	if (setpoint->Theta1 < LIM_MIN_J0) {
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80040b4:	a330      	add	r3, pc, #192	; (adr r3, 8004178 <lowlayer_goToSoftLimit+0xe0>)
 80040b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ba:	f7fc fd1f 	bl	8000afc <__aeabi_dcmplt>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d004      	beq.n	80040ce <lowlayer_goToSoftLimit+0x36>
		pulse[0] = pulse_scan[0];
 80040c4:	2303      	movs	r3, #3
 80040c6:	723b      	strb	r3, [r7, #8]
		check++;
 80040c8:	7bfb      	ldrb	r3, [r7, #15]
 80040ca:	3301      	adds	r3, #1
 80040cc:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->Theta2 > LIM_MAX_J1) {
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 80040d4:	a32a      	add	r3, pc, #168	; (adr r3, 8004180 <lowlayer_goToSoftLimit+0xe8>)
 80040d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040da:	f7fc fd2d 	bl	8000b38 <__aeabi_dcmpgt>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d004      	beq.n	80040ee <lowlayer_goToSoftLimit+0x56>
		pulse[1] = pulse_scan[1];
 80040e4:	2305      	movs	r3, #5
 80040e6:	727b      	strb	r3, [r7, #9]
		check++;
 80040e8:	7bfb      	ldrb	r3, [r7, #15]
 80040ea:	3301      	adds	r3, #1
 80040ec:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->D3 < LIM_MIN_J2) {
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 80040f4:	f04f 0200 	mov.w	r2, #0
 80040f8:	f04f 0300 	mov.w	r3, #0
 80040fc:	f7fc fcfe 	bl	8000afc <__aeabi_dcmplt>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d004      	beq.n	8004110 <lowlayer_goToSoftLimit+0x78>
		pulse[2] = pulse_scan[2];
 8004106:	2305      	movs	r3, #5
 8004108:	72bb      	strb	r3, [r7, #10]
		check++;
 800410a:	7bfb      	ldrb	r3, [r7, #15]
 800410c:	3301      	adds	r3, #1
 800410e:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->Theta4 > LIM_MAX_J3) {
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 8004116:	a31c      	add	r3, pc, #112	; (adr r3, 8004188 <lowlayer_goToSoftLimit+0xf0>)
 8004118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800411c:	f7fc fd0c 	bl	8000b38 <__aeabi_dcmpgt>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d004      	beq.n	8004130 <lowlayer_goToSoftLimit+0x98>
		pulse[3] = pulse_scan[3];
 8004126:	230a      	movs	r3, #10
 8004128:	72fb      	strb	r3, [r7, #11]
		check++;
 800412a:	7bfb      	ldrb	r3, [r7, #15]
 800412c:	3301      	adds	r3, #1
 800412e:	73fb      	strb	r3, [r7, #15]
	}

	if (check > 0) {
 8004130:	7bfb      	ldrb	r3, [r7, #15]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d013      	beq.n	800415e <lowlayer_goToSoftLimit+0xc6>
		lowlayer_writePulse(pulse[0], -pulse[1], pulse[2], -pulse[3]);
 8004136:	f997 0008 	ldrsb.w	r0, [r7, #8]
 800413a:	f997 3009 	ldrsb.w	r3, [r7, #9]
 800413e:	b2db      	uxtb	r3, r3
 8004140:	425b      	negs	r3, r3
 8004142:	b2db      	uxtb	r3, r3
 8004144:	b259      	sxtb	r1, r3
 8004146:	f997 200a 	ldrsb.w	r2, [r7, #10]
 800414a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800414e:	b2db      	uxtb	r3, r3
 8004150:	425b      	negs	r3, r3
 8004152:	b2db      	uxtb	r3, r3
 8004154:	b25b      	sxtb	r3, r3
 8004156:	f000 fb4f 	bl	80047f8 <lowlayer_writePulse>
		return FALSE;
 800415a:	2300      	movs	r3, #0
 800415c:	e006      	b.n	800416c <lowlayer_goToSoftLimit+0xd4>
	} else {
		lowlayer_writePulse(0, 0, 0, 0);
 800415e:	2300      	movs	r3, #0
 8004160:	2200      	movs	r2, #0
 8004162:	2100      	movs	r1, #0
 8004164:	2000      	movs	r0, #0
 8004166:	f000 fb47 	bl	80047f8 <lowlayer_writePulse>
		return TRUE;
 800416a:	2301      	movs	r3, #1
	}
}
 800416c:	4618      	mov	r0, r3
 800416e:	3710      	adds	r7, #16
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}
 8004174:	f3af 8000 	nop.w
 8004178:	daaaaaab 	.word	0xdaaaaaab
 800417c:	bff7bc89 	.word	0xbff7bc89
 8004180:	88000000 	.word	0x88000000
 8004184:	4002d97c 	.word	0x4002d97c
 8004188:	daaaaaab 	.word	0xdaaaaaab
 800418c:	4007bc89 	.word	0x4007bc89

08004190 <lowlayer_readTruePosition>:

void	lowlayer_readTruePosition(SCARA_PositionTypeDef *true) {
 8004190:	b590      	push	{r4, r7, lr}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
	lowlayer_updateEncoder();
 8004198:	f000 fc78 	bl	8004a8c <lowlayer_updateEncoder>
	true->Theta1 = HARD_LIM0_NEG
			+ DIR_ENCODER_0*(position_encoder[0] - offset_encoder[0])*2.0*PI/ENCODER_J0; // Servo Motor
 800419c:	4b62      	ldr	r3, [pc, #392]	; (8004328 <lowlayer_readTruePosition+0x198>)
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	4b62      	ldr	r3, [pc, #392]	; (800432c <lowlayer_readTruePosition+0x19c>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	ee07 3a90 	vmov	s15, r3
 80041aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041ae:	ee17 0a90 	vmov	r0, s15
 80041b2:	f7fc f9d9 	bl	8000568 <__aeabi_f2d>
 80041b6:	4602      	mov	r2, r0
 80041b8:	460b      	mov	r3, r1
 80041ba:	f7fc f877 	bl	80002ac <__adddf3>
 80041be:	4603      	mov	r3, r0
 80041c0:	460c      	mov	r4, r1
 80041c2:	4618      	mov	r0, r3
 80041c4:	4621      	mov	r1, r4
 80041c6:	a34c      	add	r3, pc, #304	; (adr r3, 80042f8 <lowlayer_readTruePosition+0x168>)
 80041c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041cc:	f7fc fa24 	bl	8000618 <__aeabi_dmul>
 80041d0:	4603      	mov	r3, r0
 80041d2:	460c      	mov	r4, r1
 80041d4:	4618      	mov	r0, r3
 80041d6:	4621      	mov	r1, r4
 80041d8:	a349      	add	r3, pc, #292	; (adr r3, 8004300 <lowlayer_readTruePosition+0x170>)
 80041da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041de:	f7fc fb45 	bl	800086c <__aeabi_ddiv>
 80041e2:	4603      	mov	r3, r0
 80041e4:	460c      	mov	r4, r1
 80041e6:	4618      	mov	r0, r3
 80041e8:	4621      	mov	r1, r4
 80041ea:	a347      	add	r3, pc, #284	; (adr r3, 8004308 <lowlayer_readTruePosition+0x178>)
 80041ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f0:	f7fc f85a 	bl	80002a8 <__aeabi_dsub>
 80041f4:	4603      	mov	r3, r0
 80041f6:	460c      	mov	r4, r1
	true->Theta1 = HARD_LIM0_NEG
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68

	true->Theta2 = HARD_LIM1_POS
			+ DIR_ENCODER_1*(position_encoder[1] - offset_encoder[1])*2.0*PI/ENCODER_J1; // Servo Motor
 80041fe:	4b4a      	ldr	r3, [pc, #296]	; (8004328 <lowlayer_readTruePosition+0x198>)
 8004200:	685a      	ldr	r2, [r3, #4]
 8004202:	4b4a      	ldr	r3, [pc, #296]	; (800432c <lowlayer_readTruePosition+0x19c>)
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	ee07 3a90 	vmov	s15, r3
 800420c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004210:	ee17 0a90 	vmov	r0, s15
 8004214:	f7fc f9a8 	bl	8000568 <__aeabi_f2d>
 8004218:	4602      	mov	r2, r0
 800421a:	460b      	mov	r3, r1
 800421c:	f7fc f846 	bl	80002ac <__adddf3>
 8004220:	4603      	mov	r3, r0
 8004222:	460c      	mov	r4, r1
 8004224:	4618      	mov	r0, r3
 8004226:	4621      	mov	r1, r4
 8004228:	a333      	add	r3, pc, #204	; (adr r3, 80042f8 <lowlayer_readTruePosition+0x168>)
 800422a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800422e:	f7fc f9f3 	bl	8000618 <__aeabi_dmul>
 8004232:	4603      	mov	r3, r0
 8004234:	460c      	mov	r4, r1
 8004236:	4618      	mov	r0, r3
 8004238:	4621      	mov	r1, r4
 800423a:	f04f 0200 	mov.w	r2, #0
 800423e:	4b3c      	ldr	r3, [pc, #240]	; (8004330 <lowlayer_readTruePosition+0x1a0>)
 8004240:	f7fc fb14 	bl	800086c <__aeabi_ddiv>
 8004244:	4603      	mov	r3, r0
 8004246:	460c      	mov	r4, r1
 8004248:	4618      	mov	r0, r3
 800424a:	4621      	mov	r1, r4
 800424c:	a330      	add	r3, pc, #192	; (adr r3, 8004310 <lowlayer_readTruePosition+0x180>)
 800424e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004252:	f7fc f82b 	bl	80002ac <__adddf3>
 8004256:	4603      	mov	r3, r0
 8004258:	460c      	mov	r4, r1
	true->Theta2 = HARD_LIM1_POS
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70

	true->D3	 = HARD_LIM2_NEG
			+ DIR_ENCODER_2*(position_encoder[2] - offset_encoder[2])/ENCODER_J2; // Servo Motor
 8004260:	4b31      	ldr	r3, [pc, #196]	; (8004328 <lowlayer_readTruePosition+0x198>)
 8004262:	689a      	ldr	r2, [r3, #8]
 8004264:	4b31      	ldr	r3, [pc, #196]	; (800432c <lowlayer_readTruePosition+0x19c>)
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	ee07 3a90 	vmov	s15, r3
 800426e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004272:	eeb1 7a67 	vneg.f32	s14, s15
 8004276:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8004334 <lowlayer_readTruePosition+0x1a4>
 800427a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800427e:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8004338 <lowlayer_readTruePosition+0x1a8>
 8004282:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004286:	ee17 0a90 	vmov	r0, s15
 800428a:	f7fc f96d 	bl	8000568 <__aeabi_f2d>
 800428e:	4603      	mov	r3, r0
 8004290:	460c      	mov	r4, r1
	true->D3	 = HARD_LIM2_NEG
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78

	true->Theta4 = HARD_LIM3_POS
			+ (pulse_accumulate[3] - offset_stepper)*2.0*PI/GEAR_J3; // Stepper Motor
 8004298:	4b28      	ldr	r3, [pc, #160]	; (800433c <lowlayer_readTruePosition+0x1ac>)
 800429a:	68da      	ldr	r2, [r3, #12]
 800429c:	4b28      	ldr	r3, [pc, #160]	; (8004340 <lowlayer_readTruePosition+0x1b0>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	4618      	mov	r0, r3
 80042a4:	f7fc f94e 	bl	8000544 <__aeabi_i2d>
 80042a8:	4602      	mov	r2, r0
 80042aa:	460b      	mov	r3, r1
 80042ac:	f7fb fffe 	bl	80002ac <__adddf3>
 80042b0:	4603      	mov	r3, r0
 80042b2:	460c      	mov	r4, r1
 80042b4:	4618      	mov	r0, r3
 80042b6:	4621      	mov	r1, r4
 80042b8:	a30f      	add	r3, pc, #60	; (adr r3, 80042f8 <lowlayer_readTruePosition+0x168>)
 80042ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042be:	f7fc f9ab 	bl	8000618 <__aeabi_dmul>
 80042c2:	4603      	mov	r3, r0
 80042c4:	460c      	mov	r4, r1
 80042c6:	4618      	mov	r0, r3
 80042c8:	4621      	mov	r1, r4
 80042ca:	a313      	add	r3, pc, #76	; (adr r3, 8004318 <lowlayer_readTruePosition+0x188>)
 80042cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d0:	f7fc facc 	bl	800086c <__aeabi_ddiv>
 80042d4:	4603      	mov	r3, r0
 80042d6:	460c      	mov	r4, r1
 80042d8:	4618      	mov	r0, r3
 80042da:	4621      	mov	r1, r4
 80042dc:	a310      	add	r3, pc, #64	; (adr r3, 8004320 <lowlayer_readTruePosition+0x190>)
 80042de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e2:	f7fb ffe3 	bl	80002ac <__adddf3>
 80042e6:	4603      	mov	r3, r0
 80042e8:	460c      	mov	r4, r1
	true->Theta4 = HARD_LIM3_POS
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
}
 80042f0:	bf00      	nop
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd90      	pop	{r4, r7, pc}
 80042f8:	60000000 	.word	0x60000000
 80042fc:	400921fb 	.word	0x400921fb
 8004300:	00000000 	.word	0x00000000
 8004304:	40f38800 	.word	0x40f38800
 8004308:	40000000 	.word	0x40000000
 800430c:	3ff9f17a 	.word	0x3ff9f17a
 8004310:	80000000 	.word	0x80000000
 8004314:	40039716 	.word	0x40039716
 8004318:	a0000000 	.word	0xa0000000
 800431c:	40d3bca1 	.word	0x40d3bca1
 8004320:	a0000000 	.word	0xa0000000
 8004324:	4008330d 	.word	0x4008330d
 8004328:	2000537c 	.word	0x2000537c
 800432c:	200053c0 	.word	0x200053c0
 8004330:	40ff4000 	.word	0x40ff4000
 8004334:	4426aaab 	.word	0x4426aaab
 8004338:	400f1aa0 	.word	0x400f1aa0
 800433c:	20005368 	.word	0x20005368
 8004340:	2000539c 	.word	0x2000539c
 8004344:	00000000 	.word	0x00000000

08004348 <lowlayer_readSetPosition>:

void	lowlayer_readSetPosition(SCARA_PositionTypeDef *setpoint) {
 8004348:	b5b0      	push	{r4, r5, r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
	setpoint->Theta1 = offset_setpoint[0] + pulse_accumulate[0]*2.0*PI/GEAR_J0;
 8004350:	4b53      	ldr	r3, [pc, #332]	; (80044a0 <lowlayer_readSetPosition+0x158>)
 8004352:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004356:	4b53      	ldr	r3, [pc, #332]	; (80044a4 <lowlayer_readSetPosition+0x15c>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4618      	mov	r0, r3
 800435c:	f7fc f8f2 	bl	8000544 <__aeabi_i2d>
 8004360:	4602      	mov	r2, r0
 8004362:	460b      	mov	r3, r1
 8004364:	f7fb ffa2 	bl	80002ac <__adddf3>
 8004368:	4602      	mov	r2, r0
 800436a:	460b      	mov	r3, r1
 800436c:	4610      	mov	r0, r2
 800436e:	4619      	mov	r1, r3
 8004370:	a345      	add	r3, pc, #276	; (adr r3, 8004488 <lowlayer_readSetPosition+0x140>)
 8004372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004376:	f7fc f94f 	bl	8000618 <__aeabi_dmul>
 800437a:	4602      	mov	r2, r0
 800437c:	460b      	mov	r3, r1
 800437e:	4610      	mov	r0, r2
 8004380:	4619      	mov	r1, r3
 8004382:	a343      	add	r3, pc, #268	; (adr r3, 8004490 <lowlayer_readSetPosition+0x148>)
 8004384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004388:	f7fc fa70 	bl	800086c <__aeabi_ddiv>
 800438c:	4602      	mov	r2, r0
 800438e:	460b      	mov	r3, r1
 8004390:	4620      	mov	r0, r4
 8004392:	4629      	mov	r1, r5
 8004394:	f7fb ff8a 	bl	80002ac <__adddf3>
 8004398:	4603      	mov	r3, r0
 800439a:	460c      	mov	r4, r1
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68

	setpoint->Theta2 = offset_setpoint[1] + pulse_accumulate[1]*2.0*PI/GEAR_J1;
 80043a2:	4b3f      	ldr	r3, [pc, #252]	; (80044a0 <lowlayer_readSetPosition+0x158>)
 80043a4:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80043a8:	4b3e      	ldr	r3, [pc, #248]	; (80044a4 <lowlayer_readSetPosition+0x15c>)
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	4618      	mov	r0, r3
 80043ae:	f7fc f8c9 	bl	8000544 <__aeabi_i2d>
 80043b2:	4602      	mov	r2, r0
 80043b4:	460b      	mov	r3, r1
 80043b6:	f7fb ff79 	bl	80002ac <__adddf3>
 80043ba:	4602      	mov	r2, r0
 80043bc:	460b      	mov	r3, r1
 80043be:	4610      	mov	r0, r2
 80043c0:	4619      	mov	r1, r3
 80043c2:	a331      	add	r3, pc, #196	; (adr r3, 8004488 <lowlayer_readSetPosition+0x140>)
 80043c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c8:	f7fc f926 	bl	8000618 <__aeabi_dmul>
 80043cc:	4602      	mov	r2, r0
 80043ce:	460b      	mov	r3, r1
 80043d0:	4610      	mov	r0, r2
 80043d2:	4619      	mov	r1, r3
 80043d4:	f04f 0200 	mov.w	r2, #0
 80043d8:	4b33      	ldr	r3, [pc, #204]	; (80044a8 <lowlayer_readSetPosition+0x160>)
 80043da:	f7fc fa47 	bl	800086c <__aeabi_ddiv>
 80043de:	4602      	mov	r2, r0
 80043e0:	460b      	mov	r3, r1
 80043e2:	4620      	mov	r0, r4
 80043e4:	4629      	mov	r1, r5
 80043e6:	f7fb ff61 	bl	80002ac <__adddf3>
 80043ea:	4603      	mov	r3, r0
 80043ec:	460c      	mov	r4, r1
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70

	setpoint->D3	 = offset_setpoint[2] + pulse_accumulate[2]/GEAR_J2;
 80043f4:	4b2a      	ldr	r3, [pc, #168]	; (80044a0 <lowlayer_readSetPosition+0x158>)
 80043f6:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80043fa:	4b2a      	ldr	r3, [pc, #168]	; (80044a4 <lowlayer_readSetPosition+0x15c>)
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	ee07 3a90 	vmov	s15, r3
 8004402:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004406:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80044ac <lowlayer_readSetPosition+0x164>
 800440a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800440e:	ee16 0a90 	vmov	r0, s13
 8004412:	f7fc f8a9 	bl	8000568 <__aeabi_f2d>
 8004416:	4602      	mov	r2, r0
 8004418:	460b      	mov	r3, r1
 800441a:	4620      	mov	r0, r4
 800441c:	4629      	mov	r1, r5
 800441e:	f7fb ff45 	bl	80002ac <__adddf3>
 8004422:	4603      	mov	r3, r0
 8004424:	460c      	mov	r4, r1
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78

	setpoint->Theta4 = offset_setpoint[3] + pulse_accumulate[3]*2.0*PI/GEAR_J3;
 800442c:	4b1c      	ldr	r3, [pc, #112]	; (80044a0 <lowlayer_readSetPosition+0x158>)
 800442e:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8004432:	4b1c      	ldr	r3, [pc, #112]	; (80044a4 <lowlayer_readSetPosition+0x15c>)
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	4618      	mov	r0, r3
 8004438:	f7fc f884 	bl	8000544 <__aeabi_i2d>
 800443c:	4602      	mov	r2, r0
 800443e:	460b      	mov	r3, r1
 8004440:	f7fb ff34 	bl	80002ac <__adddf3>
 8004444:	4602      	mov	r2, r0
 8004446:	460b      	mov	r3, r1
 8004448:	4610      	mov	r0, r2
 800444a:	4619      	mov	r1, r3
 800444c:	a30e      	add	r3, pc, #56	; (adr r3, 8004488 <lowlayer_readSetPosition+0x140>)
 800444e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004452:	f7fc f8e1 	bl	8000618 <__aeabi_dmul>
 8004456:	4602      	mov	r2, r0
 8004458:	460b      	mov	r3, r1
 800445a:	4610      	mov	r0, r2
 800445c:	4619      	mov	r1, r3
 800445e:	a30e      	add	r3, pc, #56	; (adr r3, 8004498 <lowlayer_readSetPosition+0x150>)
 8004460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004464:	f7fc fa02 	bl	800086c <__aeabi_ddiv>
 8004468:	4602      	mov	r2, r0
 800446a:	460b      	mov	r3, r1
 800446c:	4620      	mov	r0, r4
 800446e:	4629      	mov	r1, r5
 8004470:	f7fb ff1c 	bl	80002ac <__adddf3>
 8004474:	4603      	mov	r3, r0
 8004476:	460c      	mov	r4, r1
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
}
 800447e:	bf00      	nop
 8004480:	3708      	adds	r7, #8
 8004482:	46bd      	mov	sp, r7
 8004484:	bdb0      	pop	{r4, r5, r7, pc}
 8004486:	bf00      	nop
 8004488:	60000000 	.word	0x60000000
 800448c:	400921fb 	.word	0x400921fb
 8004490:	00000000 	.word	0x00000000
 8004494:	40d38800 	.word	0x40d38800
 8004498:	a0000000 	.word	0xa0000000
 800449c:	40d3bca1 	.word	0x40d3bca1
 80044a0:	200053a0 	.word	0x200053a0
 80044a4:	20005368 	.word	0x20005368
 80044a8:	40df4000 	.word	0x40df4000
 80044ac:	42c80000 	.word	0x42c80000

080044b0 <lowlayer_computeAndWritePulse>:

uint8_t	lowlayer_computeAndWritePulse(SCARA_PositionTypeDef current, SCARA_PositionTypeDef next) {
 80044b0:	b084      	sub	sp, #16
 80044b2:	b590      	push	{r4, r7, lr}
 80044b4:	b093      	sub	sp, #76	; 0x4c
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80044bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint32_t	current_var0, current_var1, current_var2, current_var3;
	uint32_t	next_var0, next_var1, next_var2, next_var3;
	int64_t		delta_var0, delta_var1, delta_var2, delta_var3;
	uint8_t 	result;

	current_var0	= round((current.Theta1 - LIM_MIN_J0) * GEAR_J0/(2*PI));
 80044c0:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80044c4:	a3c4      	add	r3, pc, #784	; (adr r3, 80047d8 <lowlayer_computeAndWritePulse+0x328>)
 80044c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ca:	f7fb feef 	bl	80002ac <__adddf3>
 80044ce:	4603      	mov	r3, r0
 80044d0:	460c      	mov	r4, r1
 80044d2:	4618      	mov	r0, r3
 80044d4:	4621      	mov	r1, r4
 80044d6:	a3c2      	add	r3, pc, #776	; (adr r3, 80047e0 <lowlayer_computeAndWritePulse+0x330>)
 80044d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044dc:	f7fc f89c 	bl	8000618 <__aeabi_dmul>
 80044e0:	4603      	mov	r3, r0
 80044e2:	460c      	mov	r4, r1
 80044e4:	4618      	mov	r0, r3
 80044e6:	4621      	mov	r1, r4
 80044e8:	a3b5      	add	r3, pc, #724	; (adr r3, 80047c0 <lowlayer_computeAndWritePulse+0x310>)
 80044ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ee:	f7fc f9bd 	bl	800086c <__aeabi_ddiv>
 80044f2:	4603      	mov	r3, r0
 80044f4:	460c      	mov	r4, r1
 80044f6:	ec44 3b17 	vmov	d7, r3, r4
 80044fa:	eeb0 0a47 	vmov.f32	s0, s14
 80044fe:	eef0 0a67 	vmov.f32	s1, s15
 8004502:	f015 fd81 	bl	801a008 <round>
 8004506:	ec54 3b10 	vmov	r3, r4, d0
 800450a:	4618      	mov	r0, r3
 800450c:	4621      	mov	r1, r4
 800450e:	f7fc fb5b 	bl	8000bc8 <__aeabi_d2uiz>
 8004512:	4603      	mov	r3, r0
 8004514:	647b      	str	r3, [r7, #68]	; 0x44
	current_var1 	= round((current.Theta2 - LIM_MIN_J1) * GEAR_J1/(2*PI));
 8004516:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800451a:	a3b3      	add	r3, pc, #716	; (adr r3, 80047e8 <lowlayer_computeAndWritePulse+0x338>)
 800451c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004520:	f7fb fec4 	bl	80002ac <__adddf3>
 8004524:	4603      	mov	r3, r0
 8004526:	460c      	mov	r4, r1
 8004528:	4618      	mov	r0, r3
 800452a:	4621      	mov	r1, r4
 800452c:	f04f 0200 	mov.w	r2, #0
 8004530:	4baf      	ldr	r3, [pc, #700]	; (80047f0 <lowlayer_computeAndWritePulse+0x340>)
 8004532:	f7fc f871 	bl	8000618 <__aeabi_dmul>
 8004536:	4603      	mov	r3, r0
 8004538:	460c      	mov	r4, r1
 800453a:	4618      	mov	r0, r3
 800453c:	4621      	mov	r1, r4
 800453e:	a3a0      	add	r3, pc, #640	; (adr r3, 80047c0 <lowlayer_computeAndWritePulse+0x310>)
 8004540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004544:	f7fc f992 	bl	800086c <__aeabi_ddiv>
 8004548:	4603      	mov	r3, r0
 800454a:	460c      	mov	r4, r1
 800454c:	ec44 3b17 	vmov	d7, r3, r4
 8004550:	eeb0 0a47 	vmov.f32	s0, s14
 8004554:	eef0 0a67 	vmov.f32	s1, s15
 8004558:	f015 fd56 	bl	801a008 <round>
 800455c:	ec54 3b10 	vmov	r3, r4, d0
 8004560:	4618      	mov	r0, r3
 8004562:	4621      	mov	r1, r4
 8004564:	f7fc fb30 	bl	8000bc8 <__aeabi_d2uiz>
 8004568:	4603      	mov	r3, r0
 800456a:	643b      	str	r3, [r7, #64]	; 0x40
	current_var2 	= round((current.D3 - LIM_MIN_J2) * GEAR_J2);
 800456c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8004570:	f04f 0200 	mov.w	r2, #0
 8004574:	4b9f      	ldr	r3, [pc, #636]	; (80047f4 <lowlayer_computeAndWritePulse+0x344>)
 8004576:	f7fc f84f 	bl	8000618 <__aeabi_dmul>
 800457a:	4603      	mov	r3, r0
 800457c:	460c      	mov	r4, r1
 800457e:	ec44 3b17 	vmov	d7, r3, r4
 8004582:	eeb0 0a47 	vmov.f32	s0, s14
 8004586:	eef0 0a67 	vmov.f32	s1, s15
 800458a:	f015 fd3d 	bl	801a008 <round>
 800458e:	ec54 3b10 	vmov	r3, r4, d0
 8004592:	4618      	mov	r0, r3
 8004594:	4621      	mov	r1, r4
 8004596:	f7fc fb17 	bl	8000bc8 <__aeabi_d2uiz>
 800459a:	4603      	mov	r3, r0
 800459c:	63fb      	str	r3, [r7, #60]	; 0x3c
	current_var3 	= round((current.Theta4 - LIM_MIN_J3) * GEAR_J3/(2*PI));
 800459e:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 80045a2:	a389      	add	r3, pc, #548	; (adr r3, 80047c8 <lowlayer_computeAndWritePulse+0x318>)
 80045a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a8:	f7fb fe80 	bl	80002ac <__adddf3>
 80045ac:	4603      	mov	r3, r0
 80045ae:	460c      	mov	r4, r1
 80045b0:	4618      	mov	r0, r3
 80045b2:	4621      	mov	r1, r4
 80045b4:	a386      	add	r3, pc, #536	; (adr r3, 80047d0 <lowlayer_computeAndWritePulse+0x320>)
 80045b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ba:	f7fc f82d 	bl	8000618 <__aeabi_dmul>
 80045be:	4603      	mov	r3, r0
 80045c0:	460c      	mov	r4, r1
 80045c2:	4618      	mov	r0, r3
 80045c4:	4621      	mov	r1, r4
 80045c6:	a37e      	add	r3, pc, #504	; (adr r3, 80047c0 <lowlayer_computeAndWritePulse+0x310>)
 80045c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045cc:	f7fc f94e 	bl	800086c <__aeabi_ddiv>
 80045d0:	4603      	mov	r3, r0
 80045d2:	460c      	mov	r4, r1
 80045d4:	ec44 3b17 	vmov	d7, r3, r4
 80045d8:	eeb0 0a47 	vmov.f32	s0, s14
 80045dc:	eef0 0a67 	vmov.f32	s1, s15
 80045e0:	f015 fd12 	bl	801a008 <round>
 80045e4:	ec54 3b10 	vmov	r3, r4, d0
 80045e8:	4618      	mov	r0, r3
 80045ea:	4621      	mov	r1, r4
 80045ec:	f7fc faec 	bl	8000bc8 <__aeabi_d2uiz>
 80045f0:	4603      	mov	r3, r0
 80045f2:	63bb      	str	r3, [r7, #56]	; 0x38
	next_var0 		= round((next.Theta1 - LIM_MIN_J0) * GEAR_J0/(2*PI));
 80045f4:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 80045f8:	a377      	add	r3, pc, #476	; (adr r3, 80047d8 <lowlayer_computeAndWritePulse+0x328>)
 80045fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045fe:	f7fb fe55 	bl	80002ac <__adddf3>
 8004602:	4603      	mov	r3, r0
 8004604:	460c      	mov	r4, r1
 8004606:	4618      	mov	r0, r3
 8004608:	4621      	mov	r1, r4
 800460a:	a375      	add	r3, pc, #468	; (adr r3, 80047e0 <lowlayer_computeAndWritePulse+0x330>)
 800460c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004610:	f7fc f802 	bl	8000618 <__aeabi_dmul>
 8004614:	4603      	mov	r3, r0
 8004616:	460c      	mov	r4, r1
 8004618:	4618      	mov	r0, r3
 800461a:	4621      	mov	r1, r4
 800461c:	a368      	add	r3, pc, #416	; (adr r3, 80047c0 <lowlayer_computeAndWritePulse+0x310>)
 800461e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004622:	f7fc f923 	bl	800086c <__aeabi_ddiv>
 8004626:	4603      	mov	r3, r0
 8004628:	460c      	mov	r4, r1
 800462a:	ec44 3b17 	vmov	d7, r3, r4
 800462e:	eeb0 0a47 	vmov.f32	s0, s14
 8004632:	eef0 0a67 	vmov.f32	s1, s15
 8004636:	f015 fce7 	bl	801a008 <round>
 800463a:	ec54 3b10 	vmov	r3, r4, d0
 800463e:	4618      	mov	r0, r3
 8004640:	4621      	mov	r1, r4
 8004642:	f7fc fac1 	bl	8000bc8 <__aeabi_d2uiz>
 8004646:	4603      	mov	r3, r0
 8004648:	637b      	str	r3, [r7, #52]	; 0x34
	next_var1 		= round((next.Theta2 - LIM_MIN_J1) * GEAR_J1/(2*PI));
 800464a:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 800464e:	a366      	add	r3, pc, #408	; (adr r3, 80047e8 <lowlayer_computeAndWritePulse+0x338>)
 8004650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004654:	f7fb fe2a 	bl	80002ac <__adddf3>
 8004658:	4603      	mov	r3, r0
 800465a:	460c      	mov	r4, r1
 800465c:	4618      	mov	r0, r3
 800465e:	4621      	mov	r1, r4
 8004660:	f04f 0200 	mov.w	r2, #0
 8004664:	4b62      	ldr	r3, [pc, #392]	; (80047f0 <lowlayer_computeAndWritePulse+0x340>)
 8004666:	f7fb ffd7 	bl	8000618 <__aeabi_dmul>
 800466a:	4603      	mov	r3, r0
 800466c:	460c      	mov	r4, r1
 800466e:	4618      	mov	r0, r3
 8004670:	4621      	mov	r1, r4
 8004672:	a353      	add	r3, pc, #332	; (adr r3, 80047c0 <lowlayer_computeAndWritePulse+0x310>)
 8004674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004678:	f7fc f8f8 	bl	800086c <__aeabi_ddiv>
 800467c:	4603      	mov	r3, r0
 800467e:	460c      	mov	r4, r1
 8004680:	ec44 3b17 	vmov	d7, r3, r4
 8004684:	eeb0 0a47 	vmov.f32	s0, s14
 8004688:	eef0 0a67 	vmov.f32	s1, s15
 800468c:	f015 fcbc 	bl	801a008 <round>
 8004690:	ec54 3b10 	vmov	r3, r4, d0
 8004694:	4618      	mov	r0, r3
 8004696:	4621      	mov	r1, r4
 8004698:	f7fc fa96 	bl	8000bc8 <__aeabi_d2uiz>
 800469c:	4603      	mov	r3, r0
 800469e:	633b      	str	r3, [r7, #48]	; 0x30
	next_var2 		= round((next.D3 - LIM_MIN_J2) * GEAR_J2);
 80046a0:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80046a4:	f04f 0200 	mov.w	r2, #0
 80046a8:	4b52      	ldr	r3, [pc, #328]	; (80047f4 <lowlayer_computeAndWritePulse+0x344>)
 80046aa:	f7fb ffb5 	bl	8000618 <__aeabi_dmul>
 80046ae:	4603      	mov	r3, r0
 80046b0:	460c      	mov	r4, r1
 80046b2:	ec44 3b17 	vmov	d7, r3, r4
 80046b6:	eeb0 0a47 	vmov.f32	s0, s14
 80046ba:	eef0 0a67 	vmov.f32	s1, s15
 80046be:	f015 fca3 	bl	801a008 <round>
 80046c2:	ec54 3b10 	vmov	r3, r4, d0
 80046c6:	4618      	mov	r0, r3
 80046c8:	4621      	mov	r1, r4
 80046ca:	f7fc fa7d 	bl	8000bc8 <__aeabi_d2uiz>
 80046ce:	4603      	mov	r3, r0
 80046d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	next_var3 		= round((next.Theta4 - LIM_MIN_J3) * GEAR_J3/(2*PI));
 80046d2:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80046d6:	a33c      	add	r3, pc, #240	; (adr r3, 80047c8 <lowlayer_computeAndWritePulse+0x318>)
 80046d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046dc:	f7fb fde6 	bl	80002ac <__adddf3>
 80046e0:	4603      	mov	r3, r0
 80046e2:	460c      	mov	r4, r1
 80046e4:	4618      	mov	r0, r3
 80046e6:	4621      	mov	r1, r4
 80046e8:	a339      	add	r3, pc, #228	; (adr r3, 80047d0 <lowlayer_computeAndWritePulse+0x320>)
 80046ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ee:	f7fb ff93 	bl	8000618 <__aeabi_dmul>
 80046f2:	4603      	mov	r3, r0
 80046f4:	460c      	mov	r4, r1
 80046f6:	4618      	mov	r0, r3
 80046f8:	4621      	mov	r1, r4
 80046fa:	a331      	add	r3, pc, #196	; (adr r3, 80047c0 <lowlayer_computeAndWritePulse+0x310>)
 80046fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004700:	f7fc f8b4 	bl	800086c <__aeabi_ddiv>
 8004704:	4603      	mov	r3, r0
 8004706:	460c      	mov	r4, r1
 8004708:	ec44 3b17 	vmov	d7, r3, r4
 800470c:	eeb0 0a47 	vmov.f32	s0, s14
 8004710:	eef0 0a67 	vmov.f32	s1, s15
 8004714:	f015 fc78 	bl	801a008 <round>
 8004718:	ec54 3b10 	vmov	r3, r4, d0
 800471c:	4618      	mov	r0, r3
 800471e:	4621      	mov	r1, r4
 8004720:	f7fc fa52 	bl	8000bc8 <__aeabi_d2uiz>
 8004724:	4603      	mov	r3, r0
 8004726:	62bb      	str	r3, [r7, #40]	; 0x28

	delta_var0 = next_var0 - current_var0;
 8004728:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800472a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	f04f 0400 	mov.w	r4, #0
 8004732:	e9c7 3408 	strd	r3, r4, [r7, #32]
	delta_var1 = next_var1 - current_var1;
 8004736:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004738:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	f04f 0400 	mov.w	r4, #0
 8004740:	e9c7 3406 	strd	r3, r4, [r7, #24]
	delta_var2 = next_var2 - current_var2;
 8004744:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	f04f 0400 	mov.w	r4, #0
 800474e:	e9c7 3404 	strd	r3, r4, [r7, #16]
	delta_var3 = next_var3 - current_var3;
 8004752:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	f04f 0400 	mov.w	r4, #0
 800475c:	e9c7 3402 	strd	r3, r4, [r7, #8]

	if (abs(delta_var0) > 127
 8004760:	6a3b      	ldr	r3, [r7, #32]
 8004762:	2b00      	cmp	r3, #0
 8004764:	bfb8      	it	lt
 8004766:	425b      	neglt	r3, r3
 8004768:	2b7f      	cmp	r3, #127	; 0x7f
 800476a:	dc11      	bgt.n	8004790 <lowlayer_computeAndWritePulse+0x2e0>
		|| abs(delta_var1) > 127
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	2b00      	cmp	r3, #0
 8004770:	bfb8      	it	lt
 8004772:	425b      	neglt	r3, r3
 8004774:	2b7f      	cmp	r3, #127	; 0x7f
 8004776:	dc0b      	bgt.n	8004790 <lowlayer_computeAndWritePulse+0x2e0>
		|| abs(delta_var2) > 127
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	2b00      	cmp	r3, #0
 800477c:	bfb8      	it	lt
 800477e:	425b      	neglt	r3, r3
 8004780:	2b7f      	cmp	r3, #127	; 0x7f
 8004782:	dc05      	bgt.n	8004790 <lowlayer_computeAndWritePulse+0x2e0>
		|| abs(delta_var3) > 127) {
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	2b00      	cmp	r3, #0
 8004788:	bfb8      	it	lt
 800478a:	425b      	neglt	r3, r3
 800478c:	2b7f      	cmp	r3, #127	; 0x7f
 800478e:	dd01      	ble.n	8004794 <lowlayer_computeAndWritePulse+0x2e4>
		return FALSE;
 8004790:	2300      	movs	r3, #0
 8004792:	e00c      	b.n	80047ae <lowlayer_computeAndWritePulse+0x2fe>
	} // Can't convert to int8_t , over range

	result = lowlayer_writePulse((int8_t)delta_var0,
 8004794:	f997 0020 	ldrsb.w	r0, [r7, #32]
 8004798:	f997 1018 	ldrsb.w	r1, [r7, #24]
 800479c:	f997 2010 	ldrsb.w	r2, [r7, #16]
 80047a0:	f997 3008 	ldrsb.w	r3, [r7, #8]
 80047a4:	f000 f828 	bl	80047f8 <lowlayer_writePulse>
 80047a8:	4603      	mov	r3, r0
 80047aa:	71fb      	strb	r3, [r7, #7]
								 (int8_t)delta_var1,
								 (int8_t)delta_var2,
								 (int8_t)delta_var3);

	return result;
 80047ac:	79fb      	ldrb	r3, [r7, #7]
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	374c      	adds	r7, #76	; 0x4c
 80047b2:	46bd      	mov	sp, r7
 80047b4:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80047b8:	b004      	add	sp, #16
 80047ba:	4770      	bx	lr
 80047bc:	f3af 8000 	nop.w
 80047c0:	60000000 	.word	0x60000000
 80047c4:	401921fb 	.word	0x401921fb
 80047c8:	daaaaaab 	.word	0xdaaaaaab
 80047cc:	4007bc89 	.word	0x4007bc89
 80047d0:	a0000000 	.word	0xa0000000
 80047d4:	40d3bca1 	.word	0x40d3bca1
 80047d8:	daaaaaab 	.word	0xdaaaaaab
 80047dc:	3ff7bc89 	.word	0x3ff7bc89
 80047e0:	00000000 	.word	0x00000000
 80047e4:	40d38800 	.word	0x40d38800
 80047e8:	88000000 	.word	0x88000000
 80047ec:	4002d97c 	.word	0x4002d97c
 80047f0:	40df4000 	.word	0x40df4000
 80047f4:	40590000 	.word	0x40590000

080047f8 <lowlayer_writePulse>:


uint8_t	lowlayer_writePulse(int8_t pulse0, int8_t pulse1, int8_t pulse2, int8_t pulse3) {
 80047f8:	b590      	push	{r4, r7, lr}
 80047fa:	b087      	sub	sp, #28
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	4604      	mov	r4, r0
 8004800:	4608      	mov	r0, r1
 8004802:	4611      	mov	r1, r2
 8004804:	461a      	mov	r2, r3
 8004806:	4623      	mov	r3, r4
 8004808:	71fb      	strb	r3, [r7, #7]
 800480a:	4603      	mov	r3, r0
 800480c:	71bb      	strb	r3, [r7, #6]
 800480e:	460b      	mov	r3, r1
 8004810:	717b      	strb	r3, [r7, #5]
 8004812:	4613      	mov	r3, r2
 8004814:	713b      	strb	r3, [r7, #4]
	uint8_t pulse0_combine, pulse1_combine, pulse2_combine, pulse3_combine;
	uint8_t pulse0_abs, pulse1_abs, pulse2_abs, pulse3_abs;

	// Var 0
	if (pulse0 < 0) {
 8004816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800481a:	2b00      	cmp	r3, #0
 800481c:	da06      	bge.n	800482c <lowlayer_writePulse+0x34>
		pulse0_abs = -pulse0;
 800481e:	79fb      	ldrb	r3, [r7, #7]
 8004820:	425b      	negs	r3, r3
 8004822:	74fb      	strb	r3, [r7, #19]
		pulse0_combine = -pulse0 | ((!DIR_J0) << 7); // Negative : Clockwise
 8004824:	79fb      	ldrb	r3, [r7, #7]
 8004826:	425b      	negs	r3, r3
 8004828:	75fb      	strb	r3, [r7, #23]
 800482a:	e006      	b.n	800483a <lowlayer_writePulse+0x42>
	} else {
		pulse0_abs = pulse0;
 800482c:	79fb      	ldrb	r3, [r7, #7]
 800482e:	74fb      	strb	r3, [r7, #19]
		pulse0_combine = pulse0 | (DIR_J0 << 7); // Positive : Anti-Clockwise
 8004830:	79fb      	ldrb	r3, [r7, #7]
 8004832:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004836:	b25b      	sxtb	r3, r3
 8004838:	75fb      	strb	r3, [r7, #23]
	}
	// Var 1
	if (pulse1 < 0) {
 800483a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800483e:	2b00      	cmp	r3, #0
 8004840:	da06      	bge.n	8004850 <lowlayer_writePulse+0x58>
		pulse1_abs = -pulse1;
 8004842:	79bb      	ldrb	r3, [r7, #6]
 8004844:	425b      	negs	r3, r3
 8004846:	74bb      	strb	r3, [r7, #18]
		pulse1_combine = -pulse1 | ((!DIR_J1) << 7);
 8004848:	79bb      	ldrb	r3, [r7, #6]
 800484a:	425b      	negs	r3, r3
 800484c:	75bb      	strb	r3, [r7, #22]
 800484e:	e006      	b.n	800485e <lowlayer_writePulse+0x66>
	} else {
		pulse1_abs = pulse1;
 8004850:	79bb      	ldrb	r3, [r7, #6]
 8004852:	74bb      	strb	r3, [r7, #18]
		pulse1_combine = pulse1 | (DIR_J1 << 7);
 8004854:	79bb      	ldrb	r3, [r7, #6]
 8004856:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800485a:	b25b      	sxtb	r3, r3
 800485c:	75bb      	strb	r3, [r7, #22]
	}
	// Var 2
	if (pulse2 < 0) {
 800485e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004862:	2b00      	cmp	r3, #0
 8004864:	da0b      	bge.n	800487e <lowlayer_writePulse+0x86>
		pulse2_abs = -pulse2;
 8004866:	797b      	ldrb	r3, [r7, #5]
 8004868:	425b      	negs	r3, r3
 800486a:	747b      	strb	r3, [r7, #17]
		pulse2_combine = -pulse2 | ((!DIR_J2) << 7);
 800486c:	797b      	ldrb	r3, [r7, #5]
 800486e:	425b      	negs	r3, r3
 8004870:	b2db      	uxtb	r3, r3
 8004872:	b25b      	sxtb	r3, r3
 8004874:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004878:	b25b      	sxtb	r3, r3
 800487a:	757b      	strb	r3, [r7, #21]
 800487c:	e003      	b.n	8004886 <lowlayer_writePulse+0x8e>
	} else {
		pulse2_abs = pulse2;
 800487e:	797b      	ldrb	r3, [r7, #5]
 8004880:	747b      	strb	r3, [r7, #17]
		pulse2_combine = pulse2 | (DIR_J2 << 7);
 8004882:	797b      	ldrb	r3, [r7, #5]
 8004884:	757b      	strb	r3, [r7, #21]
	}
	// Var 3
	if (pulse3 < 0) {
 8004886:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800488a:	2b00      	cmp	r3, #0
 800488c:	da06      	bge.n	800489c <lowlayer_writePulse+0xa4>
		pulse3_abs = -pulse3;
 800488e:	793b      	ldrb	r3, [r7, #4]
 8004890:	425b      	negs	r3, r3
 8004892:	743b      	strb	r3, [r7, #16]
		pulse3_combine = -pulse3 | ((!DIR_J3) << 7);
 8004894:	793b      	ldrb	r3, [r7, #4]
 8004896:	425b      	negs	r3, r3
 8004898:	753b      	strb	r3, [r7, #20]
 800489a:	e006      	b.n	80048aa <lowlayer_writePulse+0xb2>
	} else {
		pulse3_abs = pulse3;
 800489c:	793b      	ldrb	r3, [r7, #4]
 800489e:	743b      	strb	r3, [r7, #16]
		pulse3_combine = pulse3 | (DIR_J3 << 7);
 80048a0:	793b      	ldrb	r3, [r7, #4]
 80048a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80048a6:	b25b      	sxtb	r3, r3
 80048a8:	753b      	strb	r3, [r7, #20]
	}

	// Check limit
	if (pulse0_abs > LIM_PULSE_J0
 80048aa:	7cfb      	ldrb	r3, [r7, #19]
 80048ac:	2b4b      	cmp	r3, #75	; 0x4b
 80048ae:	d808      	bhi.n	80048c2 <lowlayer_writePulse+0xca>
		|| pulse1_abs > LIM_PULSE_J1
 80048b0:	7cbb      	ldrb	r3, [r7, #18]
 80048b2:	2b78      	cmp	r3, #120	; 0x78
 80048b4:	d805      	bhi.n	80048c2 <lowlayer_writePulse+0xca>
		|| pulse2_abs > LIM_PULSE_J2
 80048b6:	7c7b      	ldrb	r3, [r7, #17]
 80048b8:	2b7d      	cmp	r3, #125	; 0x7d
 80048ba:	d802      	bhi.n	80048c2 <lowlayer_writePulse+0xca>
		|| pulse3_abs > LIM_PULSE_J3) {
 80048bc:	7c3b      	ldrb	r3, [r7, #16]
 80048be:	2b65      	cmp	r3, #101	; 0x65
 80048c0:	d901      	bls.n	80048c6 <lowlayer_writePulse+0xce>
		return FALSE;
 80048c2:	2300      	movs	r3, #0
 80048c4:	e04b      	b.n	800495e <lowlayer_writePulse+0x166>
//	if (pulse3_abs == 0) {
//		HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_SET); // Disable
//	} else {
//		HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_RESET);
//	}
	HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_RESET);
 80048c6:	2200      	movs	r2, #0
 80048c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80048cc:	4826      	ldr	r0, [pc, #152]	; (8004968 <lowlayer_writePulse+0x170>)
 80048ce:	f007 faeb 	bl	800bea8 <HAL_GPIO_WritePin>

	// Write to Module DDA
	FSMC_Write(ADDRESS_DDA_0, (uint32_t)pulse0_combine);
 80048d2:	7dfb      	ldrb	r3, [r7, #23]
 80048d4:	4619      	mov	r1, r3
 80048d6:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
 80048da:	f7fe fbcb 	bl	8003074 <FSMC_Write>
	FSMC_Write(ADDRESS_DDA_1, (uint32_t)pulse1_combine);
 80048de:	7dbb      	ldrb	r3, [r7, #22]
 80048e0:	4619      	mov	r1, r3
 80048e2:	4822      	ldr	r0, [pc, #136]	; (800496c <lowlayer_writePulse+0x174>)
 80048e4:	f7fe fbc6 	bl	8003074 <FSMC_Write>
	FSMC_Write(ADDRESS_DDA_2, (uint32_t)pulse2_combine);
 80048e8:	7d7b      	ldrb	r3, [r7, #21]
 80048ea:	4619      	mov	r1, r3
 80048ec:	4820      	ldr	r0, [pc, #128]	; (8004970 <lowlayer_writePulse+0x178>)
 80048ee:	f7fe fbc1 	bl	8003074 <FSMC_Write>
	FSMC_Write(ADDRESS_DDA_3, (uint32_t)pulse3_combine);
 80048f2:	7d3b      	ldrb	r3, [r7, #20]
 80048f4:	4619      	mov	r1, r3
 80048f6:	481f      	ldr	r0, [pc, #124]	; (8004974 <lowlayer_writePulse+0x17c>)
 80048f8:	f7fe fbbc 	bl	8003074 <FSMC_Write>

	// Trigger
	uint8_t delay = 100;
 80048fc:	2364      	movs	r3, #100	; 0x64
 80048fe:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(PULSE_WRITE_GPIO_Port, PULSE_WRITE_Pin, GPIO_PIN_RESET);
 8004900:	2200      	movs	r2, #0
 8004902:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004906:	481c      	ldr	r0, [pc, #112]	; (8004978 <lowlayer_writePulse+0x180>)
 8004908:	f007 face 	bl	800bea8 <HAL_GPIO_WritePin>
	while (delay--);
 800490c:	bf00      	nop
 800490e:	7bfb      	ldrb	r3, [r7, #15]
 8004910:	1e5a      	subs	r2, r3, #1
 8004912:	73fa      	strb	r2, [r7, #15]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d1fa      	bne.n	800490e <lowlayer_writePulse+0x116>
	HAL_GPIO_WritePin(PULSE_WRITE_GPIO_Port, PULSE_WRITE_Pin, GPIO_PIN_SET);
 8004918:	2201      	movs	r2, #1
 800491a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800491e:	4816      	ldr	r0, [pc, #88]	; (8004978 <lowlayer_writePulse+0x180>)
 8004920:	f007 fac2 	bl	800bea8 <HAL_GPIO_WritePin>

	// Accumulate
	pulse_accumulate[0] += pulse0;
 8004924:	4b15      	ldr	r3, [pc, #84]	; (800497c <lowlayer_writePulse+0x184>)
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800492c:	4413      	add	r3, r2
 800492e:	4a13      	ldr	r2, [pc, #76]	; (800497c <lowlayer_writePulse+0x184>)
 8004930:	6013      	str	r3, [r2, #0]
	pulse_accumulate[1] += pulse1;
 8004932:	4b12      	ldr	r3, [pc, #72]	; (800497c <lowlayer_writePulse+0x184>)
 8004934:	685a      	ldr	r2, [r3, #4]
 8004936:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800493a:	4413      	add	r3, r2
 800493c:	4a0f      	ldr	r2, [pc, #60]	; (800497c <lowlayer_writePulse+0x184>)
 800493e:	6053      	str	r3, [r2, #4]
	pulse_accumulate[2] += pulse2;
 8004940:	4b0e      	ldr	r3, [pc, #56]	; (800497c <lowlayer_writePulse+0x184>)
 8004942:	689a      	ldr	r2, [r3, #8]
 8004944:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004948:	4413      	add	r3, r2
 800494a:	4a0c      	ldr	r2, [pc, #48]	; (800497c <lowlayer_writePulse+0x184>)
 800494c:	6093      	str	r3, [r2, #8]
	pulse_accumulate[3] += pulse3;
 800494e:	4b0b      	ldr	r3, [pc, #44]	; (800497c <lowlayer_writePulse+0x184>)
 8004950:	68da      	ldr	r2, [r3, #12]
 8004952:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8004956:	4413      	add	r3, r2
 8004958:	4a08      	ldr	r2, [pc, #32]	; (800497c <lowlayer_writePulse+0x184>)
 800495a:	60d3      	str	r3, [r2, #12]

	return TRUE;
 800495c:	2301      	movs	r3, #1
}
 800495e:	4618      	mov	r0, r3
 8004960:	371c      	adds	r7, #28
 8004962:	46bd      	mov	sp, r7
 8004964:	bd90      	pop	{r4, r7, pc}
 8004966:	bf00      	nop
 8004968:	40020000 	.word	0x40020000
 800496c:	60000002 	.word	0x60000002
 8004970:	60000004 	.word	0x60000004
 8004974:	60000006 	.word	0x60000006
 8004978:	40020c00 	.word	0x40020c00
 800497c:	20005368 	.word	0x20005368

08004980 <lowlayer_resetEncoder>:

void	lowlayer_resetEncoder(void) {
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
	// Trigger
	uint8_t delay = 100;
 8004986:	2364      	movs	r3, #100	; 0x64
 8004988:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ENCODER_RESET_GPIO_Port, ENCODER_RESET_Pin, GPIO_PIN_SET);
 800498a:	2201      	movs	r2, #1
 800498c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004990:	4809      	ldr	r0, [pc, #36]	; (80049b8 <lowlayer_resetEncoder+0x38>)
 8004992:	f007 fa89 	bl	800bea8 <HAL_GPIO_WritePin>
	while (delay--);
 8004996:	bf00      	nop
 8004998:	79fb      	ldrb	r3, [r7, #7]
 800499a:	1e5a      	subs	r2, r3, #1
 800499c:	71fa      	strb	r2, [r7, #7]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d1fa      	bne.n	8004998 <lowlayer_resetEncoder+0x18>
	HAL_GPIO_WritePin(ENCODER_RESET_GPIO_Port, ENCODER_RESET_Pin, GPIO_PIN_RESET);
 80049a2:	2200      	movs	r2, #0
 80049a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80049a8:	4803      	ldr	r0, [pc, #12]	; (80049b8 <lowlayer_resetEncoder+0x38>)
 80049aa:	f007 fa7d 	bl	800bea8 <HAL_GPIO_WritePin>
}
 80049ae:	bf00      	nop
 80049b0:	3708      	adds	r7, #8
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	40020c00 	.word	0x40020c00

080049bc <lowlayer_readLimitSwitch>:

uint8_t lowlayer_readLimitSwitch(void) {
 80049bc:	b580      	push	{r7, lr}
 80049be:	b082      	sub	sp, #8
 80049c0:	af00      	add	r7, sp, #0
	uint16_t read_data = FSMC_Read(ADDRESS_LIMIT);
 80049c2:	4805      	ldr	r0, [pc, #20]	; (80049d8 <lowlayer_readLimitSwitch+0x1c>)
 80049c4:	f7fe fb65 	bl	8003092 <FSMC_Read>
 80049c8:	4603      	mov	r3, r0
 80049ca:	80fb      	strh	r3, [r7, #6]

	return (uint8_t)read_data;
 80049cc:	88fb      	ldrh	r3, [r7, #6]
 80049ce:	b2db      	uxtb	r3, r3
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3708      	adds	r7, #8
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}
 80049d8:	60000020 	.word	0x60000020

080049dc <lowlayer_readEncoder>:

int32_t lowlayer_readEncoder(uint8_t encoder_num) {
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	4603      	mov	r3, r0
 80049e4:	71fb      	strb	r3, [r7, #7]
	int32_t data;
	if (encoder_num <= 2) {
 80049e6:	79fb      	ldrb	r3, [r7, #7]
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	d81c      	bhi.n	8004a26 <lowlayer_readEncoder+0x4a>
		uint16_t low_word = FSMC_Read(ADDRESS_ENC0_LOW + encoder_num*4);
 80049ec:	79fb      	ldrb	r3, [r7, #7]
 80049ee:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 80049f2:	3310      	adds	r3, #16
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	4618      	mov	r0, r3
 80049f8:	f7fe fb4b 	bl	8003092 <FSMC_Read>
 80049fc:	4603      	mov	r3, r0
 80049fe:	817b      	strh	r3, [r7, #10]
		uint16_t high_word = FSMC_Read(ADDRESS_ENC0_LOW + encoder_num*4 + 2);
 8004a00:	79fb      	ldrb	r3, [r7, #7]
 8004a02:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 8004a06:	3310      	adds	r3, #16
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	3302      	adds	r3, #2
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f7fe fb40 	bl	8003092 <FSMC_Read>
 8004a12:	4603      	mov	r3, r0
 8004a14:	813b      	strh	r3, [r7, #8]
		data = high_word;
 8004a16:	893b      	ldrh	r3, [r7, #8]
 8004a18:	60fb      	str	r3, [r7, #12]
		data = (data << 16) | low_word;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	041a      	lsls	r2, r3, #16
 8004a1e:	897b      	ldrh	r3, [r7, #10]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	60fb      	str	r3, [r7, #12]
 8004a24:	e001      	b.n	8004a2a <lowlayer_readEncoder+0x4e>
	} else {
		data = 0;
 8004a26:	2300      	movs	r3, #0
 8004a28:	60fb      	str	r3, [r7, #12]
	}
	return data;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3710      	adds	r7, #16
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <lowlayer_readCapture>:

int32_t lowlayer_readCapture(uint8_t capture_num) {
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	71fb      	strb	r3, [r7, #7]
	int32_t data;
	if (capture_num <= 2) {
 8004a3e:	79fb      	ldrb	r3, [r7, #7]
 8004a40:	2b02      	cmp	r3, #2
 8004a42:	d81c      	bhi.n	8004a7e <lowlayer_readCapture+0x4a>
		uint16_t low_word = FSMC_Read(ADDRESS_CAP0_LOW + capture_num*4);
 8004a44:	79fb      	ldrb	r3, [r7, #7]
 8004a46:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 8004a4a:	3318      	adds	r3, #24
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f7fe fb1f 	bl	8003092 <FSMC_Read>
 8004a54:	4603      	mov	r3, r0
 8004a56:	817b      	strh	r3, [r7, #10]
		uint16_t high_word = FSMC_Read(ADDRESS_CAP0_LOW + capture_num*4 + 2);
 8004a58:	79fb      	ldrb	r3, [r7, #7]
 8004a5a:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 8004a5e:	3318      	adds	r3, #24
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	3302      	adds	r3, #2
 8004a64:	4618      	mov	r0, r3
 8004a66:	f7fe fb14 	bl	8003092 <FSMC_Read>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	813b      	strh	r3, [r7, #8]
		data = high_word;
 8004a6e:	893b      	ldrh	r3, [r7, #8]
 8004a70:	60fb      	str	r3, [r7, #12]
		data = (data << 16) | low_word;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	041a      	lsls	r2, r3, #16
 8004a76:	897b      	ldrh	r3, [r7, #10]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	60fb      	str	r3, [r7, #12]
 8004a7c:	e001      	b.n	8004a82 <lowlayer_readCapture+0x4e>
	} else {
		data = 0;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	60fb      	str	r3, [r7, #12]
	}
	return data;
 8004a82:	68fb      	ldr	r3, [r7, #12]
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3710      	adds	r7, #16
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <lowlayer_updateEncoder>:

void	lowlayer_updateEncoder(void) {
 8004a8c:	b590      	push	{r4, r7, lr}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 3; i++) {
 8004a92:	2300      	movs	r3, #0
 8004a94:	71fb      	strb	r3, [r7, #7]
 8004a96:	e00b      	b.n	8004ab0 <lowlayer_updateEncoder+0x24>
		position_encoder[i] = lowlayer_readEncoder(i);
 8004a98:	79fc      	ldrb	r4, [r7, #7]
 8004a9a:	79fb      	ldrb	r3, [r7, #7]
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f7ff ff9d 	bl	80049dc <lowlayer_readEncoder>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	4b06      	ldr	r3, [pc, #24]	; (8004ac0 <lowlayer_updateEncoder+0x34>)
 8004aa6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	for (uint8_t i = 0; i < 3; i++) {
 8004aaa:	79fb      	ldrb	r3, [r7, #7]
 8004aac:	3301      	adds	r3, #1
 8004aae:	71fb      	strb	r3, [r7, #7]
 8004ab0:	79fb      	ldrb	r3, [r7, #7]
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	d9f0      	bls.n	8004a98 <lowlayer_updateEncoder+0xc>
	}
}
 8004ab6:	bf00      	nop
 8004ab8:	370c      	adds	r7, #12
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd90      	pop	{r4, r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	2000537c 	.word	0x2000537c

08004ac4 <lowlayer_updateCapture>:

void	lowlayer_updateCapture(void) {
 8004ac4:	b590      	push	{r4, r7, lr}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 3; i++) {
 8004aca:	2300      	movs	r3, #0
 8004acc:	71fb      	strb	r3, [r7, #7]
 8004ace:	e00b      	b.n	8004ae8 <lowlayer_updateCapture+0x24>
			position_capture[i] = lowlayer_readCapture(i);
 8004ad0:	79fc      	ldrb	r4, [r7, #7]
 8004ad2:	79fb      	ldrb	r3, [r7, #7]
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f7ff ffad 	bl	8004a34 <lowlayer_readCapture>
 8004ada:	4602      	mov	r2, r0
 8004adc:	4b06      	ldr	r3, [pc, #24]	; (8004af8 <lowlayer_updateCapture+0x34>)
 8004ade:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	for (uint8_t i = 0; i < 3; i++) {
 8004ae2:	79fb      	ldrb	r3, [r7, #7]
 8004ae4:	3301      	adds	r3, #1
 8004ae6:	71fb      	strb	r3, [r7, #7]
 8004ae8:	79fb      	ldrb	r3, [r7, #7]
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	d9f0      	bls.n	8004ad0 <lowlayer_updateCapture+0xc>
	}
}
 8004aee:	bf00      	nop
 8004af0:	370c      	adds	r7, #12
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd90      	pop	{r4, r7, pc}
 8004af6:	bf00      	nop
 8004af8:	2000538c 	.word	0x2000538c

08004afc <lowlayer_updateLimit>:

void	lowlayer_updateLimit(void) {
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
	uint8_t limit_data = lowlayer_readLimitSwitch();
 8004b02:	f7ff ff5b 	bl	80049bc <lowlayer_readLimitSwitch>
 8004b06:	4603      	mov	r3, r0
 8004b08:	71bb      	strb	r3, [r7, #6]
	for (uint8_t i = 0; i < 4; i++) {
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	71fb      	strb	r3, [r7, #7]
 8004b0e:	e00d      	b.n	8004b2c <lowlayer_updateLimit+0x30>
			limit_switch[i] = (limit_data & (0x01 << i)) ? 1 : 0;
 8004b10:	79ba      	ldrb	r2, [r7, #6]
 8004b12:	79fb      	ldrb	r3, [r7, #7]
 8004b14:	fa42 f303 	asr.w	r3, r2, r3
 8004b18:	b2da      	uxtb	r2, r3
 8004b1a:	79fb      	ldrb	r3, [r7, #7]
 8004b1c:	f002 0201 	and.w	r2, r2, #1
 8004b20:	b2d1      	uxtb	r1, r2
 8004b22:	4a06      	ldr	r2, [pc, #24]	; (8004b3c <lowlayer_updateLimit+0x40>)
 8004b24:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 4; i++) {
 8004b26:	79fb      	ldrb	r3, [r7, #7]
 8004b28:	3301      	adds	r3, #1
 8004b2a:	71fb      	strb	r3, [r7, #7]
 8004b2c:	79fb      	ldrb	r3, [r7, #7]
 8004b2e:	2b03      	cmp	r3, #3
 8004b30:	d9ee      	bls.n	8004b10 <lowlayer_updateLimit+0x14>
	}
}
 8004b32:	bf00      	nop
 8004b34:	3708      	adds	r7, #8
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	20005388 	.word	0x20005388

08004b40 <lowlayer_setOutput>:

void	lowlayer_setOutput(uint8_t value) {
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	4603      	mov	r3, r0
 8004b48:	71fb      	strb	r3, [r7, #7]
	if (value > 0) {
 8004b4a:	79fb      	ldrb	r3, [r7, #7]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d006      	beq.n	8004b5e <lowlayer_setOutput+0x1e>
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_SET);
 8004b50:	2201      	movs	r2, #1
 8004b52:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004b56:	4807      	ldr	r0, [pc, #28]	; (8004b74 <lowlayer_setOutput+0x34>)
 8004b58:	f007 f9a6 	bl	800bea8 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_RESET);
	}
}
 8004b5c:	e005      	b.n	8004b6a <lowlayer_setOutput+0x2a>
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_RESET);
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004b64:	4803      	ldr	r0, [pc, #12]	; (8004b74 <lowlayer_setOutput+0x34>)
 8004b66:	f007 f99f 	bl	800bea8 <HAL_GPIO_WritePin>
}
 8004b6a:	bf00      	nop
 8004b6c:	3708      	adds	r7, #8
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	40020400 	.word	0x40020400

08004b78 <lowlayer_CPLD_Init>:

void	lowlayer_CPLD_Init(void) {
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(STOP_GPIO_Port, STOP_Pin, GPIO_PIN_SET); // STOP low active
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	2140      	movs	r1, #64	; 0x40
 8004b80:	4802      	ldr	r0, [pc, #8]	; (8004b8c <lowlayer_CPLD_Init+0x14>)
 8004b82:	f007 f991 	bl	800bea8 <HAL_GPIO_WritePin>
}
 8004b86:	bf00      	nop
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	40020c00 	.word	0x40020c00

08004b90 <lowlayer_stepMotorInit>:

void	lowlayer_stepMotorInit(void) {
 8004b90:	b580      	push	{r7, lr}
 8004b92:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_SET); // ENABLE low active
 8004b94:	2201      	movs	r2, #1
 8004b96:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004b9a:	4808      	ldr	r0, [pc, #32]	; (8004bbc <lowlayer_stepMotorInit+0x2c>)
 8004b9c:	f007 f984 	bl	800bea8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEP_RESET_GPIO_Port, STEP_RESET_Pin, GPIO_PIN_SET); // RESET low active
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004ba6:	4805      	ldr	r0, [pc, #20]	; (8004bbc <lowlayer_stepMotorInit+0x2c>)
 8004ba8:	f007 f97e 	bl	800bea8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEP_SLEEP_GPIO_Port, STEP_SLEEP_Pin, GPIO_PIN_SET); // SLEEP low active
 8004bac:	2201      	movs	r2, #1
 8004bae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004bb2:	4802      	ldr	r0, [pc, #8]	; (8004bbc <lowlayer_stepMotorInit+0x2c>)
 8004bb4:	f007 f978 	bl	800bea8 <HAL_GPIO_WritePin>
}
 8004bb8:	bf00      	nop
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	40020000 	.word	0x40020000

08004bc0 <scaraStartup>:
											 "Over Accelerate",
											 "Wrong Joint Num",
											 "Wrong Coordinate"
											};

void				scaraStartup(void) {
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	af00      	add	r7, sp, #0
#ifdef SIMULATION
	scaraSetScanFlag();
#endif
	lowlayer_CPLD_Init();
 8004bc4:	f7ff ffd8 	bl	8004b78 <lowlayer_CPLD_Init>
	lowlayer_stepMotorInit();
 8004bc8:	f7ff ffe2 	bl	8004b90 <lowlayer_stepMotorInit>
	lowlayer_resetEncoder();
 8004bcc:	f7ff fed8 	bl	8004980 <lowlayer_resetEncoder>
	lowlayer_writePulse(0, 0, 0, 0);
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	2100      	movs	r1, #0
 8004bd6:	2000      	movs	r0, #0
 8004bd8:	f7ff fe0e 	bl	80047f8 <lowlayer_writePulse>
}
 8004bdc:	bf00      	nop
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <scaraInitDuty>:

/* Compute duty corresponding to new command */
SCARA_StatusTypeDef	scaraInitDuty		(DUTY_Command_TypeDef command) {
 8004be0:	b084      	sub	sp, #16
 8004be2:	b5b0      	push	{r4, r5, r7, lr}
 8004be4:	f5ad 7d76 	sub.w	sp, sp, #984	; 0x3d8
 8004be8:	af8a      	add	r7, sp, #552	; 0x228
 8004bea:	f507 7ce0 	add.w	ip, r7, #448	; 0x1c0
 8004bee:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	SCARA_StatusTypeDef status, status1, status2;

	/*----------- Space Task ------------*/
	if 			(DUTY_SPACE_TASK == command.space_type) {
 8004bf2:	f897 31cd 	ldrb.w	r3, [r7, #461]	; 0x1cd
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	f040 834c 	bne.w	8005294 <scaraInitDuty+0x6b4>
		double total_s, angle_s;
		int8_t dir_angle;
		SCARA_PositionTypeDef	target_point;
		// Change Degree --> Radian
		command.target_point.roll = command.target_point.roll*PI/180.0;
 8004bfc:	e9d7 0192 	ldrd	r0, r1, [r7, #584]	; 0x248
 8004c00:	a3ab      	add	r3, pc, #684	; (adr r3, 8004eb0 <scaraInitDuty+0x2d0>)
 8004c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c06:	f7fb fd07 	bl	8000618 <__aeabi_dmul>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	460b      	mov	r3, r1
 8004c0e:	4610      	mov	r0, r2
 8004c10:	4619      	mov	r1, r3
 8004c12:	f04f 0200 	mov.w	r2, #0
 8004c16:	4ba8      	ldr	r3, [pc, #672]	; (8004eb8 <scaraInitDuty+0x2d8>)
 8004c18:	f7fb fe28 	bl	800086c <__aeabi_ddiv>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	460b      	mov	r3, r1
 8004c20:	e9c7 2392 	strd	r2, r3, [r7, #584]	; 0x248
		// Coordinate
		if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8004c24:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d130      	bne.n	8004c8e <scaraInitDuty+0xae>
			target_point.x 		= positionCurrent.x + command.target_point.x;
 8004c2c:	4ba3      	ldr	r3, [pc, #652]	; (8004ebc <scaraInitDuty+0x2dc>)
 8004c2e:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8004c32:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	; 0x230
 8004c36:	f7fb fb39 	bl	80002ac <__adddf3>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	4639      	mov	r1, r7
 8004c40:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
			target_point.y 		= positionCurrent.y + command.target_point.y;
 8004c44:	4b9d      	ldr	r3, [pc, #628]	; (8004ebc <scaraInitDuty+0x2dc>)
 8004c46:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8004c4a:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	; 0x238
 8004c4e:	f7fb fb2d 	bl	80002ac <__adddf3>
 8004c52:	4602      	mov	r2, r0
 8004c54:	460b      	mov	r3, r1
 8004c56:	4639      	mov	r1, r7
 8004c58:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
			target_point.z 		= positionCurrent.z + command.target_point.z;
 8004c5c:	4b97      	ldr	r3, [pc, #604]	; (8004ebc <scaraInitDuty+0x2dc>)
 8004c5e:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8004c62:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 8004c66:	f7fb fb21 	bl	80002ac <__adddf3>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	460b      	mov	r3, r1
 8004c6e:	4639      	mov	r1, r7
 8004c70:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
			target_point.roll	= positionCurrent.roll + command.target_point.roll;
 8004c74:	4b91      	ldr	r3, [pc, #580]	; (8004ebc <scaraInitDuty+0x2dc>)
 8004c76:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8004c7a:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 8004c7e:	f7fb fb15 	bl	80002ac <__adddf3>
 8004c82:	4602      	mov	r2, r0
 8004c84:	460b      	mov	r3, r1
 8004c86:	4639      	mov	r1, r7
 8004c88:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 8004c8c:	e01b      	b.n	8004cc6 <scaraInitDuty+0xe6>
		} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8004c8e:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d114      	bne.n	8004cc0 <scaraInitDuty+0xe0>
			target_point.x 		= command.target_point.x;
 8004c96:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	; 0x230
 8004c9a:	4639      	mov	r1, r7
 8004c9c:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
			target_point.y 		= command.target_point.y;
 8004ca0:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	; 0x238
 8004ca4:	4639      	mov	r1, r7
 8004ca6:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
			target_point.z 		= command.target_point.z;
 8004caa:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 8004cae:	4639      	mov	r1, r7
 8004cb0:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
			target_point.roll	= command.target_point.roll;
 8004cb4:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 8004cb8:	4639      	mov	r1, r7
 8004cba:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 8004cbe:	e002      	b.n	8004cc6 <scaraInitDuty+0xe6>
		} else {
			return SCARA_STATUS_ERROR_COORDINATE;
 8004cc0:	230c      	movs	r3, #12
 8004cc2:	f001 ba71 	b.w	80061a8 <scaraInitDuty+0x15c8>
		}

		angle_s = target_point.roll - positionCurrent.roll;
 8004cc6:	463b      	mov	r3, r7
 8004cc8:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8004ccc:	4b7b      	ldr	r3, [pc, #492]	; (8004ebc <scaraInitDuty+0x2dc>)
 8004cce:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8004cd2:	f7fb fae9 	bl	80002a8 <__aeabi_dsub>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	460b      	mov	r3, r1
 8004cda:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
		dir_angle = 1;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
		if ( angle_s < 0) {
 8004ce4:	f04f 0200 	mov.w	r2, #0
 8004ce8:	f04f 0300 	mov.w	r3, #0
 8004cec:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8004cf0:	f7fb ff04 	bl	8000afc <__aeabi_dcmplt>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d002      	beq.n	8004d00 <scaraInitDuty+0x120>
			dir_angle = -1;
 8004cfa:	23ff      	movs	r3, #255	; 0xff
 8004cfc:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
		}
		if ( fabs(angle_s) > PI) {
 8004d00:	f8d7 4198 	ldr.w	r4, [r7, #408]	; 0x198
 8004d04:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8004d08:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8004d0c:	a368      	add	r3, pc, #416	; (adr r3, 8004eb0 <scaraInitDuty+0x2d0>)
 8004d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d12:	4620      	mov	r0, r4
 8004d14:	4629      	mov	r1, r5
 8004d16:	f7fb ff0f 	bl	8000b38 <__aeabi_dcmpgt>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d021      	beq.n	8004d64 <scaraInitDuty+0x184>
			dir_angle = -dir_angle;
 8004d20:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8004d24:	425b      	negs	r3, r3
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
			angle_s = (2*PI - fabsf(angle_s))*dir_angle;
 8004d2c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8004d30:	f7fb ff6a 	bl	8000c08 <__aeabi_d2f>
 8004d34:	ee07 0a90 	vmov	s15, r0
 8004d38:	eef0 7ae7 	vabs.f32	s15, s15
 8004d3c:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8004ec0 <scaraInitDuty+0x2e0>
 8004d40:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004d44:	f997 3197 	ldrsb.w	r3, [r7, #407]	; 0x197
 8004d48:	ee07 3a90 	vmov	s15, r3
 8004d4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d54:	ee17 0a90 	vmov	r0, s15
 8004d58:	f7fb fc06 	bl	8000568 <__aeabi_f2d>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	460c      	mov	r4, r1
 8004d60:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
		}


		myDUTY.space_type = DUTY_SPACE_TASK;// Change type
 8004d64:	4b57      	ldr	r3, [pc, #348]	; (8004ec4 <scaraInitDuty+0x2e4>)
 8004d66:	2200      	movs	r2, #0
 8004d68:	701a      	strb	r2, [r3, #0]
		myDUTY.task.roll_start = positionCurrent.roll;
 8004d6a:	4b54      	ldr	r3, [pc, #336]	; (8004ebc <scaraInitDuty+0x2dc>)
 8004d6c:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8004d70:	4a54      	ldr	r2, [pc, #336]	; (8004ec4 <scaraInitDuty+0x2e4>)
 8004d72:	e9c2 34f0 	strd	r3, r4, [r2, #960]	; 0x3c0
		// 1-Path Planning
			// Straight Line
		if ( DUTY_PATH_LINE == command.path_type ) {
 8004d76:	f897 31ce 	ldrb.w	r3, [r7, #462]	; 0x1ce
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d11f      	bne.n	8004dbe <scaraInitDuty+0x1de>
			myDUTY.task.path.path_type = DUTY_PATH_LINE;
 8004d7e:	4b51      	ldr	r3, [pc, #324]	; (8004ec4 <scaraInitDuty+0x2e4>)
 8004d80:	2200      	movs	r2, #0
 8004d82:	721a      	strb	r2, [r3, #8]
			status = scaraInitLine(&(myDUTY.task.path.line), positionCurrent, target_point);
 8004d84:	4c4d      	ldr	r4, [pc, #308]	; (8004ebc <scaraInitDuty+0x2dc>)
 8004d86:	463b      	mov	r3, r7
 8004d88:	a82c      	add	r0, sp, #176	; 0xb0
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	23b8      	movs	r3, #184	; 0xb8
 8004d8e:	461a      	mov	r2, r3
 8004d90:	f010 fec6 	bl	8015b20 <memcpy>
 8004d94:	4668      	mov	r0, sp
 8004d96:	f104 0308 	add.w	r3, r4, #8
 8004d9a:	22b0      	movs	r2, #176	; 0xb0
 8004d9c:	4619      	mov	r1, r3
 8004d9e:	f010 febf 	bl	8015b20 <memcpy>
 8004da2:	e894 000c 	ldmia.w	r4, {r2, r3}
 8004da6:	4848      	ldr	r0, [pc, #288]	; (8004ec8 <scaraInitDuty+0x2e8>)
 8004da8:	f001 fa10 	bl	80061cc <scaraInitLine>
 8004dac:	4603      	mov	r3, r0
 8004dae:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
			total_s = myDUTY.task.path.line.total_s;
 8004db2:	4b44      	ldr	r3, [pc, #272]	; (8004ec4 <scaraInitDuty+0x2e4>)
 8004db4:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 8004db8:	e9c7 3468 	strd	r3, r4, [r7, #416]	; 0x1a0
 8004dbc:	e070      	b.n	8004ea0 <scaraInitDuty+0x2c0>
			// Circular
		} else if ( DUTY_PATH_CIRCLE == command.path_type ) {
 8004dbe:	f897 31ce 	ldrb.w	r3, [r7, #462]	; 0x1ce
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d169      	bne.n	8004e9a <scaraInitDuty+0x2ba>
			SCARA_PositionTypeDef	center_point;
			if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8004dc6:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d127      	bne.n	8004e1e <scaraInitDuty+0x23e>
				center_point.x 		= positionCurrent.x + command.sub_point.x;
 8004dce:	4b3b      	ldr	r3, [pc, #236]	; (8004ebc <scaraInitDuty+0x2dc>)
 8004dd0:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8004dd4:	e9d7 34ba 	ldrd	r3, r4, [r7, #744]	; 0x2e8
 8004dd8:	461a      	mov	r2, r3
 8004dda:	4623      	mov	r3, r4
 8004ddc:	f7fb fa66 	bl	80002ac <__adddf3>
 8004de0:	4603      	mov	r3, r0
 8004de2:	460c      	mov	r4, r1
 8004de4:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
				center_point.y 		= positionCurrent.y + command.sub_point.y;
 8004de8:	4b34      	ldr	r3, [pc, #208]	; (8004ebc <scaraInitDuty+0x2dc>)
 8004dea:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8004dee:	e9d7 34bc 	ldrd	r3, r4, [r7, #752]	; 0x2f0
 8004df2:	461a      	mov	r2, r3
 8004df4:	4623      	mov	r3, r4
 8004df6:	f7fb fa59 	bl	80002ac <__adddf3>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	460c      	mov	r4, r1
 8004dfe:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
				center_point.z 		= positionCurrent.z + command.sub_point.z;
 8004e02:	4b2e      	ldr	r3, [pc, #184]	; (8004ebc <scaraInitDuty+0x2dc>)
 8004e04:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8004e08:	e9d7 34be 	ldrd	r3, r4, [r7, #760]	; 0x2f8
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	4623      	mov	r3, r4
 8004e10:	f7fb fa4c 	bl	80002ac <__adddf3>
 8004e14:	4603      	mov	r3, r0
 8004e16:	460c      	mov	r4, r1
 8004e18:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
 8004e1c:	e013      	b.n	8004e46 <scaraInitDuty+0x266>
			} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8004e1e:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d10c      	bne.n	8004e40 <scaraInitDuty+0x260>
				center_point.x 		= command.target_point.x;
 8004e26:	e9d7 348c 	ldrd	r3, r4, [r7, #560]	; 0x230
 8004e2a:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
				center_point.y 		= command.target_point.y;
 8004e2e:	e9d7 348e 	ldrd	r3, r4, [r7, #568]	; 0x238
 8004e32:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
				center_point.z 		= command.target_point.z;
 8004e36:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 8004e3a:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
 8004e3e:	e002      	b.n	8004e46 <scaraInitDuty+0x266>
			} else {
				return SCARA_STATUS_ERROR_COORDINATE;
 8004e40:	230c      	movs	r3, #12
			return SCARA_STATUS_ERROR_COORDINATE;
 8004e42:	f001 b9b1 	b.w	80061a8 <scaraInitDuty+0x15c8>
			}

			myDUTY.task.path.path_type = DUTY_PATH_CIRCLE;
 8004e46:	4b1f      	ldr	r3, [pc, #124]	; (8004ec4 <scaraInitDuty+0x2e4>)
 8004e48:	2201      	movs	r2, #1
 8004e4a:	721a      	strb	r2, [r3, #8]
			status = scaraInitCircle(&(myDUTY.task.path.circle),
 8004e4c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8004e50:	4c1a      	ldr	r4, [pc, #104]	; (8004ebc <scaraInitDuty+0x2dc>)
 8004e52:	9388      	str	r3, [sp, #544]	; 0x220
 8004e54:	a85a      	add	r0, sp, #360	; 0x168
 8004e56:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004e5a:	22b8      	movs	r2, #184	; 0xb8
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	f010 fe5f 	bl	8015b20 <memcpy>
 8004e62:	463b      	mov	r3, r7
 8004e64:	a82c      	add	r0, sp, #176	; 0xb0
 8004e66:	4619      	mov	r1, r3
 8004e68:	23b8      	movs	r3, #184	; 0xb8
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	f010 fe58 	bl	8015b20 <memcpy>
 8004e70:	4668      	mov	r0, sp
 8004e72:	f104 0308 	add.w	r3, r4, #8
 8004e76:	22b0      	movs	r2, #176	; 0xb0
 8004e78:	4619      	mov	r1, r3
 8004e7a:	f010 fe51 	bl	8015b20 <memcpy>
 8004e7e:	e894 000c 	ldmia.w	r4, {r2, r3}
 8004e82:	4812      	ldr	r0, [pc, #72]	; (8004ecc <scaraInitDuty+0x2ec>)
 8004e84:	f001 fa68 	bl	8006358 <scaraInitCircle>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
										positionCurrent,
										target_point,
										center_point,
										command.sub_para_int );
			total_s = myDUTY.task.path.circle.total_s;
 8004e8e:	4b0d      	ldr	r3, [pc, #52]	; (8004ec4 <scaraInitDuty+0x2e4>)
 8004e90:	e9d3 343a 	ldrd	r3, r4, [r3, #232]	; 0xe8
 8004e94:	e9c7 3468 	strd	r3, r4, [r7, #416]	; 0x1a0
 8004e98:	e002      	b.n	8004ea0 <scaraInitDuty+0x2c0>

		} else {
			return SCARA_STATUS_ERROR_TASK;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	f001 b984 	b.w	80061a8 <scaraInitDuty+0x15c8>
		}

		if ( SCARA_STATUS_OK != status) {
 8004ea0:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d013      	beq.n	8004ed0 <scaraInitDuty+0x2f0>
			return status;
 8004ea8:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 8004eac:	f001 b97c 	b.w	80061a8 <scaraInitDuty+0x15c8>
 8004eb0:	60000000 	.word	0x60000000
 8004eb4:	400921fb 	.word	0x400921fb
 8004eb8:	40668000 	.word	0x40668000
 8004ebc:	20005e90 	.word	0x20005e90
 8004ec0:	40c90fdb 	.word	0x40c90fdb
 8004ec4:	200053d0 	.word	0x200053d0
 8004ec8:	200053e0 	.word	0x200053e0
 8004ecc:	20005450 	.word	0x20005450
		}

		// 2-Trajectory Planning
			// LSPB
		if ( DUTY_TRAJECTORY_LSPB == command.trajec_type ) {
 8004ed0:	f897 31d0 	ldrb.w	r3, [r7, #464]	; 0x1d0
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	f040 80dd 	bne.w	8005094 <scaraInitDuty+0x4b4>

			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8004eda:	f897 31d1 	ldrb.w	r3, [r7, #465]	; 0x1d1
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d145      	bne.n	8004f6e <scaraInitDuty+0x38e>
				myDUTY.task.trajectory_3d.lspb.Tf = command.time_total;
 8004ee2:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 8004ee6:	4ac8      	ldr	r2, [pc, #800]	; (8005208 <scaraInitDuty+0x628>)
 8004ee8:	e9c2 345a 	strd	r3, r4, [r2, #360]	; 0x168
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LSPB;
 8004eec:	4bc6      	ldr	r3, [pc, #792]	; (8005208 <scaraInitDuty+0x628>)
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitLSPB(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 8004ef4:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8004ef8:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8004efc:	eeb0 2a46 	vmov.f32	s4, s12
 8004f00:	eef0 2a66 	vmov.f32	s5, s13
 8004f04:	eeb0 1a47 	vmov.f32	s2, s14
 8004f08:	eef0 1a67 	vmov.f32	s3, s15
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 8004f12:	2104      	movs	r1, #4
 8004f14:	48bd      	ldr	r0, [pc, #756]	; (800520c <scaraInitDuty+0x62c>)
 8004f16:	f001 fb97 	bl	8006648 <scaraInitLSPB>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
						 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);

				myDUTY.task.trajectory_roll.lspb.Tf = command.time_total;
 8004f20:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 8004f24:	4ab8      	ldr	r2, [pc, #736]	; (8005208 <scaraInitDuty+0x628>)
 8004f26:	e9c2 34b0 	strd	r3, r4, [r2, #704]	; 0x2c0
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LSPB;
 8004f2a:	4bb7      	ldr	r3, [pc, #732]	; (8005208 <scaraInitDuty+0x628>)
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 2268 	strb.w	r2, [r3, #616]	; 0x268
				status2 = scaraInitLSPB(&(myDUTY.task.trajectory_roll.lspb), TRAJECTORY_ROLL,
 8004f32:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8004f36:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8004f3a:	eeb0 2a46 	vmov.f32	s4, s12
 8004f3e:	eef0 2a66 	vmov.f32	s5, s13
 8004f42:	eeb0 1a47 	vmov.f32	s2, s14
 8004f46:	eef0 1a67 	vmov.f32	s3, s15
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	ed97 0b66 	vldr	d0, [r7, #408]	; 0x198
 8004f50:	2105      	movs	r1, #5
 8004f52:	48af      	ldr	r0, [pc, #700]	; (8005210 <scaraInitDuty+0x630>)
 8004f54:	f001 fb78 	bl	8006648 <scaraInitLSPB>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
						 angle_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
				myDUTY.time_total = command.time_total;
 8004f5e:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 8004f62:	4aa9      	ldr	r2, [pc, #676]	; (8005208 <scaraInitDuty+0x628>)
 8004f64:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8004f68:	e9c2 3400 	strd	r3, r4, [r2]
 8004f6c:	e181      	b.n	8005272 <scaraInitDuty+0x692>

			} else if (DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8004f6e:	f897 31d1 	ldrb.w	r3, [r7, #465]	; 0x1d1
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	f040 808b 	bne.w	800508e <scaraInitDuty+0x4ae>
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LSPB;
 8004f78:	4ba3      	ldr	r3, [pc, #652]	; (8005208 <scaraInitDuty+0x628>)
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitLSPB(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 8004f80:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8004f84:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8004f88:	eeb0 2a46 	vmov.f32	s4, s12
 8004f8c:	eef0 2a66 	vmov.f32	s5, s13
 8004f90:	eeb0 1a47 	vmov.f32	s2, s14
 8004f94:	eef0 1a67 	vmov.f32	s3, s15
 8004f98:	2200      	movs	r2, #0
 8004f9a:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 8004f9e:	2104      	movs	r1, #4
 8004fa0:	489a      	ldr	r0, [pc, #616]	; (800520c <scaraInitDuty+0x62c>)
 8004fa2:	f001 fb51 	bl	8006648 <scaraInitLSPB>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
						 total_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LSPB;
 8004fac:	4b96      	ldr	r3, [pc, #600]	; (8005208 <scaraInitDuty+0x628>)
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f883 2268 	strb.w	r2, [r3, #616]	; 0x268
				status2 = scaraInitLSPB(&(myDUTY.task.trajectory_roll.lspb), TRAJECTORY_ROLL,
 8004fb4:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8004fb8:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8004fbc:	eeb0 2a46 	vmov.f32	s4, s12
 8004fc0:	eef0 2a66 	vmov.f32	s5, s13
 8004fc4:	eeb0 1a47 	vmov.f32	s2, s14
 8004fc8:	eef0 1a67 	vmov.f32	s3, s15
 8004fcc:	2200      	movs	r2, #0
 8004fce:	ed97 0b66 	vldr	d0, [r7, #408]	; 0x198
 8004fd2:	2105      	movs	r1, #5
 8004fd4:	488e      	ldr	r0, [pc, #568]	; (8005210 <scaraInitDuty+0x630>)
 8004fd6:	f001 fb37 	bl	8006648 <scaraInitLSPB>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
						 angle_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				// Synchronous time end
				if(myDUTY.task.trajectory_3d.lspb.Tf > myDUTY.task.trajectory_roll.lspb.Tf) {
 8004fe0:	4b89      	ldr	r3, [pc, #548]	; (8005208 <scaraInitDuty+0x628>)
 8004fe2:	e9d3 015a 	ldrd	r0, r1, [r3, #360]	; 0x168
 8004fe6:	4b88      	ldr	r3, [pc, #544]	; (8005208 <scaraInitDuty+0x628>)
 8004fe8:	e9d3 34b0 	ldrd	r3, r4, [r3, #704]	; 0x2c0
 8004fec:	461a      	mov	r2, r3
 8004fee:	4623      	mov	r3, r4
 8004ff0:	f7fb fda2 	bl	8000b38 <__aeabi_dcmpgt>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d024      	beq.n	8005044 <scaraInitDuty+0x464>
					myDUTY.task.trajectory_roll.lspb.Tf = myDUTY.task.trajectory_3d.lspb.Tf;
 8004ffa:	4b83      	ldr	r3, [pc, #524]	; (8005208 <scaraInitDuty+0x628>)
 8004ffc:	e9d3 345a 	ldrd	r3, r4, [r3, #360]	; 0x168
 8005000:	4a81      	ldr	r2, [pc, #516]	; (8005208 <scaraInitDuty+0x628>)
 8005002:	e9c2 34b0 	strd	r3, r4, [r2, #704]	; 0x2c0
					status2 = scaraInitLSPB(&(myDUTY.task.trajectory_roll.lspb), TRAJECTORY_ROLL,
 8005006:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 800500a:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 800500e:	eeb0 2a46 	vmov.f32	s4, s12
 8005012:	eef0 2a66 	vmov.f32	s5, s13
 8005016:	eeb0 1a47 	vmov.f32	s2, s14
 800501a:	eef0 1a67 	vmov.f32	s3, s15
 800501e:	2201      	movs	r2, #1
 8005020:	ed97 0b66 	vldr	d0, [r7, #408]	; 0x198
 8005024:	2105      	movs	r1, #5
 8005026:	487a      	ldr	r0, [pc, #488]	; (8005210 <scaraInitDuty+0x630>)
 8005028:	f001 fb0e 	bl	8006648 <scaraInitLSPB>
 800502c:	4603      	mov	r3, r0
 800502e:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
							 angle_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_3d.lspb.Tf;
 8005032:	4b75      	ldr	r3, [pc, #468]	; (8005208 <scaraInitDuty+0x628>)
 8005034:	e9d3 345a 	ldrd	r3, r4, [r3, #360]	; 0x168
 8005038:	4a73      	ldr	r2, [pc, #460]	; (8005208 <scaraInitDuty+0x628>)
 800503a:	f602 1248 	addw	r2, r2, #2376	; 0x948
 800503e:	e9c2 3400 	strd	r3, r4, [r2]
 8005042:	e116      	b.n	8005272 <scaraInitDuty+0x692>
				} else {
					myDUTY.task.trajectory_3d.lspb.Tf = myDUTY.task.trajectory_roll.lspb.Tf;
 8005044:	4b70      	ldr	r3, [pc, #448]	; (8005208 <scaraInitDuty+0x628>)
 8005046:	e9d3 34b0 	ldrd	r3, r4, [r3, #704]	; 0x2c0
 800504a:	4a6f      	ldr	r2, [pc, #444]	; (8005208 <scaraInitDuty+0x628>)
 800504c:	e9c2 345a 	strd	r3, r4, [r2, #360]	; 0x168
					status1 = scaraInitLSPB(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 8005050:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8005054:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8005058:	eeb0 2a46 	vmov.f32	s4, s12
 800505c:	eef0 2a66 	vmov.f32	s5, s13
 8005060:	eeb0 1a47 	vmov.f32	s2, s14
 8005064:	eef0 1a67 	vmov.f32	s3, s15
 8005068:	2201      	movs	r2, #1
 800506a:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 800506e:	2104      	movs	r1, #4
 8005070:	4866      	ldr	r0, [pc, #408]	; (800520c <scaraInitDuty+0x62c>)
 8005072:	f001 fae9 	bl	8006648 <scaraInitLSPB>
 8005076:	4603      	mov	r3, r0
 8005078:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
							 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_roll.lspb.Tf;
 800507c:	4b62      	ldr	r3, [pc, #392]	; (8005208 <scaraInitDuty+0x628>)
 800507e:	e9d3 34b0 	ldrd	r3, r4, [r3, #704]	; 0x2c0
 8005082:	4a61      	ldr	r2, [pc, #388]	; (8005208 <scaraInitDuty+0x628>)
 8005084:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8005088:	e9c2 3400 	strd	r3, r4, [r2]
 800508c:	e0f1      	b.n	8005272 <scaraInitDuty+0x692>
				}
			} else {
				return SCARA_STATUS_ERROR_MODE_INIT ;
 800508e:	2308      	movs	r3, #8
 8005090:	f001 b88a 	b.w	80061a8 <scaraInitDuty+0x15c8>
			}
			// SCURVE
		} else if 	( DUTY_TRAJECTORY_SCURVE == command.trajec_type ){
 8005094:	f897 31d0 	ldrb.w	r3, [r7, #464]	; 0x1d0
 8005098:	2b01      	cmp	r3, #1
 800509a:	f040 80e7 	bne.w	800526c <scaraInitDuty+0x68c>

			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 800509e:	f897 31d1 	ldrb.w	r3, [r7, #465]	; 0x1d1
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d145      	bne.n	8005132 <scaraInitDuty+0x552>
				myDUTY.task.trajectory_3d.scurve.Tf = command.time_total;
 80050a6:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 80050aa:	4a57      	ldr	r2, [pc, #348]	; (8005208 <scaraInitDuty+0x628>)
 80050ac:	e9c2 347e 	strd	r3, r4, [r2, #504]	; 0x1f8
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 80050b0:	4b55      	ldr	r3, [pc, #340]	; (8005208 <scaraInitDuty+0x628>)
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitScurve(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 80050b8:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 80050bc:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 80050c0:	eeb0 2a46 	vmov.f32	s4, s12
 80050c4:	eef0 2a66 	vmov.f32	s5, s13
 80050c8:	eeb0 1a47 	vmov.f32	s2, s14
 80050cc:	eef0 1a67 	vmov.f32	s3, s15
 80050d0:	2201      	movs	r2, #1
 80050d2:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 80050d6:	2104      	movs	r1, #4
 80050d8:	484e      	ldr	r0, [pc, #312]	; (8005214 <scaraInitDuty+0x634>)
 80050da:	f001 fea1 	bl	8006e20 <scaraInitScurve>
 80050de:	4603      	mov	r3, r0
 80050e0:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
						 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);

				myDUTY.task.trajectory_roll.scurve.Tf = command.time_total;
 80050e4:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 80050e8:	4a47      	ldr	r2, [pc, #284]	; (8005208 <scaraInitDuty+0x628>)
 80050ea:	e9c2 34d4 	strd	r3, r4, [r2, #848]	; 0x350
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 80050ee:	4b46      	ldr	r3, [pc, #280]	; (8005208 <scaraInitDuty+0x628>)
 80050f0:	2201      	movs	r2, #1
 80050f2:	f883 2268 	strb.w	r2, [r3, #616]	; 0x268
				status2 = scaraInitScurve(&(myDUTY.task.trajectory_roll.scurve), TRAJECTORY_ROLL,
 80050f6:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 80050fa:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 80050fe:	eeb0 2a46 	vmov.f32	s4, s12
 8005102:	eef0 2a66 	vmov.f32	s5, s13
 8005106:	eeb0 1a47 	vmov.f32	s2, s14
 800510a:	eef0 1a67 	vmov.f32	s3, s15
 800510e:	2201      	movs	r2, #1
 8005110:	ed97 0b66 	vldr	d0, [r7, #408]	; 0x198
 8005114:	2105      	movs	r1, #5
 8005116:	4840      	ldr	r0, [pc, #256]	; (8005218 <scaraInitDuty+0x638>)
 8005118:	f001 fe82 	bl	8006e20 <scaraInitScurve>
 800511c:	4603      	mov	r3, r0
 800511e:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
						 angle_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
				myDUTY.time_total = command.time_total;
 8005122:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 8005126:	4a38      	ldr	r2, [pc, #224]	; (8005208 <scaraInitDuty+0x628>)
 8005128:	f602 1248 	addw	r2, r2, #2376	; 0x948
 800512c:	e9c2 3400 	strd	r3, r4, [r2]
 8005130:	e09f      	b.n	8005272 <scaraInitDuty+0x692>

			} else if (DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8005132:	f897 31d1 	ldrb.w	r3, [r7, #465]	; 0x1d1
 8005136:	2b00      	cmp	r3, #0
 8005138:	f040 8095 	bne.w	8005266 <scaraInitDuty+0x686>
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 800513c:	4b32      	ldr	r3, [pc, #200]	; (8005208 <scaraInitDuty+0x628>)
 800513e:	2201      	movs	r2, #1
 8005140:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitScurve(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 8005144:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8005148:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 800514c:	eeb0 2a46 	vmov.f32	s4, s12
 8005150:	eef0 2a66 	vmov.f32	s5, s13
 8005154:	eeb0 1a47 	vmov.f32	s2, s14
 8005158:	eef0 1a67 	vmov.f32	s3, s15
 800515c:	2200      	movs	r2, #0
 800515e:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 8005162:	2104      	movs	r1, #4
 8005164:	482b      	ldr	r0, [pc, #172]	; (8005214 <scaraInitDuty+0x634>)
 8005166:	f001 fe5b 	bl	8006e20 <scaraInitScurve>
 800516a:	4603      	mov	r3, r0
 800516c:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
						 total_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8005170:	4b25      	ldr	r3, [pc, #148]	; (8005208 <scaraInitDuty+0x628>)
 8005172:	2201      	movs	r2, #1
 8005174:	f883 2268 	strb.w	r2, [r3, #616]	; 0x268
				status2 = scaraInitScurve(&(myDUTY.task.trajectory_roll.scurve), TRAJECTORY_ROLL,
 8005178:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 800517c:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8005180:	eeb0 2a46 	vmov.f32	s4, s12
 8005184:	eef0 2a66 	vmov.f32	s5, s13
 8005188:	eeb0 1a47 	vmov.f32	s2, s14
 800518c:	eef0 1a67 	vmov.f32	s3, s15
 8005190:	2200      	movs	r2, #0
 8005192:	ed97 0b66 	vldr	d0, [r7, #408]	; 0x198
 8005196:	2105      	movs	r1, #5
 8005198:	481f      	ldr	r0, [pc, #124]	; (8005218 <scaraInitDuty+0x638>)
 800519a:	f001 fe41 	bl	8006e20 <scaraInitScurve>
 800519e:	4603      	mov	r3, r0
 80051a0:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
						 angle_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				// synchronous time end
				if(myDUTY.task.trajectory_3d.scurve.Tf > myDUTY.task.trajectory_roll.scurve.Tf) {
 80051a4:	4b18      	ldr	r3, [pc, #96]	; (8005208 <scaraInitDuty+0x628>)
 80051a6:	e9d3 017e 	ldrd	r0, r1, [r3, #504]	; 0x1f8
 80051aa:	4b17      	ldr	r3, [pc, #92]	; (8005208 <scaraInitDuty+0x628>)
 80051ac:	e9d3 34d4 	ldrd	r3, r4, [r3, #848]	; 0x350
 80051b0:	461a      	mov	r2, r3
 80051b2:	4623      	mov	r3, r4
 80051b4:	f7fb fcc0 	bl	8000b38 <__aeabi_dcmpgt>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d02e      	beq.n	800521c <scaraInitDuty+0x63c>
					myDUTY.task.trajectory_roll.scurve.Tf = myDUTY.task.trajectory_3d.scurve.Tf;
 80051be:	4b12      	ldr	r3, [pc, #72]	; (8005208 <scaraInitDuty+0x628>)
 80051c0:	e9d3 347e 	ldrd	r3, r4, [r3, #504]	; 0x1f8
 80051c4:	4a10      	ldr	r2, [pc, #64]	; (8005208 <scaraInitDuty+0x628>)
 80051c6:	e9c2 34d4 	strd	r3, r4, [r2, #848]	; 0x350
					status2 = scaraInitScurve(&(myDUTY.task.trajectory_roll.scurve), TRAJECTORY_ROLL,
 80051ca:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 80051ce:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 80051d2:	eeb0 2a46 	vmov.f32	s4, s12
 80051d6:	eef0 2a66 	vmov.f32	s5, s13
 80051da:	eeb0 1a47 	vmov.f32	s2, s14
 80051de:	eef0 1a67 	vmov.f32	s3, s15
 80051e2:	2201      	movs	r2, #1
 80051e4:	ed97 0b66 	vldr	d0, [r7, #408]	; 0x198
 80051e8:	2105      	movs	r1, #5
 80051ea:	480b      	ldr	r0, [pc, #44]	; (8005218 <scaraInitDuty+0x638>)
 80051ec:	f001 fe18 	bl	8006e20 <scaraInitScurve>
 80051f0:	4603      	mov	r3, r0
 80051f2:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
							 angle_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_3d.scurve.Tf;
 80051f6:	4b04      	ldr	r3, [pc, #16]	; (8005208 <scaraInitDuty+0x628>)
 80051f8:	e9d3 347e 	ldrd	r3, r4, [r3, #504]	; 0x1f8
 80051fc:	4a02      	ldr	r2, [pc, #8]	; (8005208 <scaraInitDuty+0x628>)
 80051fe:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8005202:	e9c2 3400 	strd	r3, r4, [r2]
 8005206:	e034      	b.n	8005272 <scaraInitDuty+0x692>
 8005208:	200053d0 	.word	0x200053d0
 800520c:	200054e8 	.word	0x200054e8
 8005210:	20005640 	.word	0x20005640
 8005214:	20005568 	.word	0x20005568
 8005218:	200056c0 	.word	0x200056c0
				} else {
					myDUTY.task.trajectory_3d.scurve.Tf = myDUTY.task.trajectory_roll.scurve.Tf;
 800521c:	4bb0      	ldr	r3, [pc, #704]	; (80054e0 <scaraInitDuty+0x900>)
 800521e:	e9d3 34d4 	ldrd	r3, r4, [r3, #848]	; 0x350
 8005222:	4aaf      	ldr	r2, [pc, #700]	; (80054e0 <scaraInitDuty+0x900>)
 8005224:	e9c2 347e 	strd	r3, r4, [r2, #504]	; 0x1f8
					status1 = scaraInitScurve(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 8005228:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 800522c:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8005230:	eeb0 2a46 	vmov.f32	s4, s12
 8005234:	eef0 2a66 	vmov.f32	s5, s13
 8005238:	eeb0 1a47 	vmov.f32	s2, s14
 800523c:	eef0 1a67 	vmov.f32	s3, s15
 8005240:	2201      	movs	r2, #1
 8005242:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 8005246:	2104      	movs	r1, #4
 8005248:	48a6      	ldr	r0, [pc, #664]	; (80054e4 <scaraInitDuty+0x904>)
 800524a:	f001 fde9 	bl	8006e20 <scaraInitScurve>
 800524e:	4603      	mov	r3, r0
 8005250:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
							 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_roll.scurve.Tf;
 8005254:	4ba2      	ldr	r3, [pc, #648]	; (80054e0 <scaraInitDuty+0x900>)
 8005256:	e9d3 34d4 	ldrd	r3, r4, [r3, #848]	; 0x350
 800525a:	4aa1      	ldr	r2, [pc, #644]	; (80054e0 <scaraInitDuty+0x900>)
 800525c:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8005260:	e9c2 3400 	strd	r3, r4, [r2]
 8005264:	e005      	b.n	8005272 <scaraInitDuty+0x692>
				}
			} else {
				return SCARA_STATUS_ERROR_MODE_INIT;
 8005266:	2308      	movs	r3, #8
 8005268:	f000 bf9e 	b.w	80061a8 <scaraInitDuty+0x15c8>
			}
		} else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 800526c:	2305      	movs	r3, #5
 800526e:	f000 bf9b 	b.w	80061a8 <scaraInitDuty+0x15c8>
		}
		// Check Init Status
		if ( SCARA_STATUS_OK != status1) {
 8005272:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8005276:	2b00      	cmp	r3, #0
 8005278:	d003      	beq.n	8005282 <scaraInitDuty+0x6a2>
			return status1;
 800527a:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 800527e:	f000 bf93 	b.w	80061a8 <scaraInitDuty+0x15c8>
		}
		if ( SCARA_STATUS_OK != status2) {
 8005282:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 8005286:	2b00      	cmp	r3, #0
 8005288:	f000 8760 	beq.w	800614c <scaraInitDuty+0x156c>
			return status2;
 800528c:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 8005290:	f000 bf8a 	b.w	80061a8 <scaraInitDuty+0x15c8>
		}


	/*----------- Space Joint ------------*/
	} else if (DUTY_SPACE_JOINT == command.space_type) {
 8005294:	f897 31cd 	ldrb.w	r3, [r7, #461]	; 0x1cd
 8005298:	2b01      	cmp	r3, #1
 800529a:	f040 8755 	bne.w	8006148 <scaraInitDuty+0x1568>

		myDUTY.space_type = DUTY_SPACE_JOINT;// Change type
 800529e:	4b90      	ldr	r3, [pc, #576]	; (80054e0 <scaraInitDuty+0x900>)
 80052a0:	2201      	movs	r2, #1
 80052a2:	701a      	strb	r2, [r3, #0]
		myDUTY.joint.theta1_start	 = positionCurrent.Theta1;
 80052a4:	4b90      	ldr	r3, [pc, #576]	; (80054e8 <scaraInitDuty+0x908>)
 80052a6:	e9d3 341a 	ldrd	r3, r4, [r3, #104]	; 0x68
 80052aa:	4a8d      	ldr	r2, [pc, #564]	; (80054e0 <scaraInitDuty+0x900>)
 80052ac:	f602 1228 	addw	r2, r2, #2344	; 0x928
 80052b0:	e9c2 3400 	strd	r3, r4, [r2]
		myDUTY.joint.theta2_start	 = positionCurrent.Theta2;
 80052b4:	4b8c      	ldr	r3, [pc, #560]	; (80054e8 <scaraInitDuty+0x908>)
 80052b6:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 80052ba:	4a89      	ldr	r2, [pc, #548]	; (80054e0 <scaraInitDuty+0x900>)
 80052bc:	f502 6213 	add.w	r2, r2, #2352	; 0x930
 80052c0:	e9c2 3400 	strd	r3, r4, [r2]
		myDUTY.joint.d3_start		 = positionCurrent.D3;
 80052c4:	4b88      	ldr	r3, [pc, #544]	; (80054e8 <scaraInitDuty+0x908>)
 80052c6:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 80052ca:	4a85      	ldr	r2, [pc, #532]	; (80054e0 <scaraInitDuty+0x900>)
 80052cc:	f602 1238 	addw	r2, r2, #2360	; 0x938
 80052d0:	e9c2 3400 	strd	r3, r4, [r2]
		myDUTY.joint.theta4_start 	 = positionCurrent.Theta4;
 80052d4:	4b84      	ldr	r3, [pc, #528]	; (80054e8 <scaraInitDuty+0x908>)
 80052d6:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 80052da:	4a81      	ldr	r2, [pc, #516]	; (80054e0 <scaraInitDuty+0x900>)
 80052dc:	f502 6214 	add.w	r2, r2, #2368	; 0x940
 80052e0:	e9c2 3400 	strd	r3, r4, [r2]

		//-----Joint Single
		if ( DUTY_JOINT_SINGLE == command.joint_type) {
 80052e4:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	f040 83d6 	bne.w	8005a9a <scaraInitDuty+0xeba>
			// Trajectory 1 profile
			double s, abs_position;
			switch(command.sub_para_int) {
 80052ee:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80052f2:	2b03      	cmp	r3, #3
 80052f4:	f200 814e 	bhi.w	8005594 <scaraInitDuty+0x9b4>
 80052f8:	a201      	add	r2, pc, #4	; (adr r2, 8005300 <scaraInitDuty+0x720>)
 80052fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052fe:	bf00      	nop
 8005300:	08005311 	.word	0x08005311
 8005304:	080053b7 	.word	0x080053b7
 8005308:	0800545d 	.word	0x0800545d
 800530c:	080054f1 	.word	0x080054f1
			case 0:
				// Change Degree --> Radian
				command.sub_para_double = command.sub_para_double*PI/180.0;
 8005310:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	; 0x1d8
 8005314:	a370      	add	r3, pc, #448	; (adr r3, 80054d8 <scaraInitDuty+0x8f8>)
 8005316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800531a:	f7fb f97d 	bl	8000618 <__aeabi_dmul>
 800531e:	4603      	mov	r3, r0
 8005320:	460c      	mov	r4, r1
 8005322:	4618      	mov	r0, r3
 8005324:	4621      	mov	r1, r4
 8005326:	f04f 0200 	mov.w	r2, #0
 800532a:	4b70      	ldr	r3, [pc, #448]	; (80054ec <scaraInitDuty+0x90c>)
 800532c:	f7fb fa9e 	bl	800086c <__aeabi_ddiv>
 8005330:	4603      	mov	r3, r0
 8005332:	460c      	mov	r4, r1
 8005334:	e9c7 3476 	strd	r3, r4, [r7, #472]	; 0x1d8
				// Coordinate
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8005338:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 800533c:	2b01      	cmp	r3, #1
 800533e:	d113      	bne.n	8005368 <scaraInitDuty+0x788>
					abs_position = myDUTY.joint.theta1_start + command.sub_para_double;
 8005340:	4b67      	ldr	r3, [pc, #412]	; (80054e0 <scaraInitDuty+0x900>)
 8005342:	f603 1328 	addw	r3, r3, #2344	; 0x928
 8005346:	e9d3 0100 	ldrd	r0, r1, [r3]
 800534a:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 800534e:	461a      	mov	r2, r3
 8005350:	4623      	mov	r3, r4
 8005352:	f7fa ffab 	bl	80002ac <__adddf3>
 8005356:	4603      	mov	r3, r0
 8005358:	460c      	mov	r4, r1
 800535a:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
					s			 = command.sub_para_double;
 800535e:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 8005362:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
 8005366:	e01a      	b.n	800539e <scaraInitDuty+0x7be>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8005368:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 800536c:	2b00      	cmp	r3, #0
 800536e:	d113      	bne.n	8005398 <scaraInitDuty+0x7b8>
					abs_position = command.sub_para_double;
 8005370:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 8005374:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
					s			 = command.sub_para_double - myDUTY.joint.theta1_start;
 8005378:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	; 0x1d8
 800537c:	4b58      	ldr	r3, [pc, #352]	; (80054e0 <scaraInitDuty+0x900>)
 800537e:	f603 1328 	addw	r3, r3, #2344	; 0x928
 8005382:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005386:	461a      	mov	r2, r3
 8005388:	4623      	mov	r3, r4
 800538a:	f7fa ff8d 	bl	80002a8 <__aeabi_dsub>
 800538e:	4603      	mov	r3, r0
 8005390:	460c      	mov	r4, r1
 8005392:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
 8005396:	e002      	b.n	800539e <scaraInitDuty+0x7be>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 8005398:	230c      	movs	r3, #12
 800539a:	f000 bf05 	b.w	80061a8 <scaraInitDuty+0x15c8>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J0, abs_position)) {
 800539e:	ed97 0b60 	vldr	d0, [r7, #384]	; 0x180
 80053a2:	2000      	movs	r0, #0
 80053a4:	f003 fe48 	bl	8009038 <scaraCheckWorkSpace1>
 80053a8:	4603      	mov	r3, r0
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	f000 80f5 	beq.w	800559a <scaraInitDuty+0x9ba>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 80053b0:	2307      	movs	r3, #7
 80053b2:	f000 bef9 	b.w	80061a8 <scaraInitDuty+0x15c8>
				}
				break;
			case 1:
				// Change Degree --> Radian
				command.sub_para_double = command.sub_para_double*PI/180.0;
 80053b6:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	; 0x1d8
 80053ba:	a347      	add	r3, pc, #284	; (adr r3, 80054d8 <scaraInitDuty+0x8f8>)
 80053bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c0:	f7fb f92a 	bl	8000618 <__aeabi_dmul>
 80053c4:	4603      	mov	r3, r0
 80053c6:	460c      	mov	r4, r1
 80053c8:	4618      	mov	r0, r3
 80053ca:	4621      	mov	r1, r4
 80053cc:	f04f 0200 	mov.w	r2, #0
 80053d0:	4b46      	ldr	r3, [pc, #280]	; (80054ec <scaraInitDuty+0x90c>)
 80053d2:	f7fb fa4b 	bl	800086c <__aeabi_ddiv>
 80053d6:	4603      	mov	r3, r0
 80053d8:	460c      	mov	r4, r1
 80053da:	e9c7 3476 	strd	r3, r4, [r7, #472]	; 0x1d8
				// Coordinate
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 80053de:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d113      	bne.n	800540e <scaraInitDuty+0x82e>
					abs_position = myDUTY.joint.theta2_start + command.sub_para_double;
 80053e6:	4b3e      	ldr	r3, [pc, #248]	; (80054e0 <scaraInitDuty+0x900>)
 80053e8:	f503 6313 	add.w	r3, r3, #2352	; 0x930
 80053ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80053f0:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 80053f4:	461a      	mov	r2, r3
 80053f6:	4623      	mov	r3, r4
 80053f8:	f7fa ff58 	bl	80002ac <__adddf3>
 80053fc:	4603      	mov	r3, r0
 80053fe:	460c      	mov	r4, r1
 8005400:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
					s			 = command.sub_para_double;
 8005404:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 8005408:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
 800540c:	e01a      	b.n	8005444 <scaraInitDuty+0x864>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 800540e:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 8005412:	2b00      	cmp	r3, #0
 8005414:	d113      	bne.n	800543e <scaraInitDuty+0x85e>
					abs_position = command.sub_para_double;
 8005416:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 800541a:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
					s			 = command.sub_para_double - myDUTY.joint.theta2_start;
 800541e:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	; 0x1d8
 8005422:	4b2f      	ldr	r3, [pc, #188]	; (80054e0 <scaraInitDuty+0x900>)
 8005424:	f503 6313 	add.w	r3, r3, #2352	; 0x930
 8005428:	e9d3 3400 	ldrd	r3, r4, [r3]
 800542c:	461a      	mov	r2, r3
 800542e:	4623      	mov	r3, r4
 8005430:	f7fa ff3a 	bl	80002a8 <__aeabi_dsub>
 8005434:	4603      	mov	r3, r0
 8005436:	460c      	mov	r4, r1
 8005438:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
 800543c:	e002      	b.n	8005444 <scaraInitDuty+0x864>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 800543e:	230c      	movs	r3, #12
 8005440:	f000 beb2 	b.w	80061a8 <scaraInitDuty+0x15c8>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J1, abs_position)) {
 8005444:	ed97 0b60 	vldr	d0, [r7, #384]	; 0x180
 8005448:	2001      	movs	r0, #1
 800544a:	f003 fdf5 	bl	8009038 <scaraCheckWorkSpace1>
 800544e:	4603      	mov	r3, r0
 8005450:	2b00      	cmp	r3, #0
 8005452:	f000 80a4 	beq.w	800559e <scaraInitDuty+0x9be>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8005456:	2307      	movs	r3, #7
 8005458:	f000 bea6 	b.w	80061a8 <scaraInitDuty+0x15c8>
				}
				break;
			case 2:
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 800545c:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 8005460:	2b01      	cmp	r3, #1
 8005462:	d113      	bne.n	800548c <scaraInitDuty+0x8ac>
					abs_position = myDUTY.joint.d3_start + command.sub_para_double;
 8005464:	4b1e      	ldr	r3, [pc, #120]	; (80054e0 <scaraInitDuty+0x900>)
 8005466:	f603 1338 	addw	r3, r3, #2360	; 0x938
 800546a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800546e:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 8005472:	461a      	mov	r2, r3
 8005474:	4623      	mov	r3, r4
 8005476:	f7fa ff19 	bl	80002ac <__adddf3>
 800547a:	4603      	mov	r3, r0
 800547c:	460c      	mov	r4, r1
 800547e:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
					s			 = command.sub_para_double;
 8005482:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 8005486:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
 800548a:	e01a      	b.n	80054c2 <scaraInitDuty+0x8e2>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 800548c:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 8005490:	2b00      	cmp	r3, #0
 8005492:	d113      	bne.n	80054bc <scaraInitDuty+0x8dc>
					abs_position = command.sub_para_double;
 8005494:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 8005498:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
					s			 = command.sub_para_double - myDUTY.joint.d3_start;
 800549c:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	; 0x1d8
 80054a0:	4b0f      	ldr	r3, [pc, #60]	; (80054e0 <scaraInitDuty+0x900>)
 80054a2:	f603 1338 	addw	r3, r3, #2360	; 0x938
 80054a6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80054aa:	461a      	mov	r2, r3
 80054ac:	4623      	mov	r3, r4
 80054ae:	f7fa fefb 	bl	80002a8 <__aeabi_dsub>
 80054b2:	4603      	mov	r3, r0
 80054b4:	460c      	mov	r4, r1
 80054b6:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
 80054ba:	e002      	b.n	80054c2 <scaraInitDuty+0x8e2>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 80054bc:	230c      	movs	r3, #12
 80054be:	f000 be73 	b.w	80061a8 <scaraInitDuty+0x15c8>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J2, abs_position)) {
 80054c2:	ed97 0b60 	vldr	d0, [r7, #384]	; 0x180
 80054c6:	2002      	movs	r0, #2
 80054c8:	f003 fdb6 	bl	8009038 <scaraCheckWorkSpace1>
 80054cc:	4603      	mov	r3, r0
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d067      	beq.n	80055a2 <scaraInitDuty+0x9c2>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 80054d2:	2307      	movs	r3, #7
 80054d4:	f000 be68 	b.w	80061a8 <scaraInitDuty+0x15c8>
 80054d8:	60000000 	.word	0x60000000
 80054dc:	400921fb 	.word	0x400921fb
 80054e0:	200053d0 	.word	0x200053d0
 80054e4:	20005568 	.word	0x20005568
 80054e8:	20005e90 	.word	0x20005e90
 80054ec:	40668000 	.word	0x40668000
				}
				break;
			case 3:
				// Change Degree --> Radian
				command.sub_para_double = command.sub_para_double*PI/180.0;
 80054f0:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	; 0x1d8
 80054f4:	a3cf      	add	r3, pc, #828	; (adr r3, 8005834 <scaraInitDuty+0xc54>)
 80054f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054fa:	f7fb f88d 	bl	8000618 <__aeabi_dmul>
 80054fe:	4603      	mov	r3, r0
 8005500:	460c      	mov	r4, r1
 8005502:	4618      	mov	r0, r3
 8005504:	4621      	mov	r1, r4
 8005506:	f04f 0200 	mov.w	r2, #0
 800550a:	4bc7      	ldr	r3, [pc, #796]	; (8005828 <scaraInitDuty+0xc48>)
 800550c:	f7fb f9ae 	bl	800086c <__aeabi_ddiv>
 8005510:	4603      	mov	r3, r0
 8005512:	460c      	mov	r4, r1
 8005514:	e9c7 3476 	strd	r3, r4, [r7, #472]	; 0x1d8
				// Coordinate
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8005518:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 800551c:	2b01      	cmp	r3, #1
 800551e:	d113      	bne.n	8005548 <scaraInitDuty+0x968>
					abs_position = myDUTY.joint.theta4_start + command.sub_para_double;
 8005520:	4bc2      	ldr	r3, [pc, #776]	; (800582c <scaraInitDuty+0xc4c>)
 8005522:	f503 6314 	add.w	r3, r3, #2368	; 0x940
 8005526:	e9d3 0100 	ldrd	r0, r1, [r3]
 800552a:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 800552e:	461a      	mov	r2, r3
 8005530:	4623      	mov	r3, r4
 8005532:	f7fa febb 	bl	80002ac <__adddf3>
 8005536:	4603      	mov	r3, r0
 8005538:	460c      	mov	r4, r1
 800553a:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
					s			 = command.sub_para_double;
 800553e:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 8005542:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
 8005546:	e01a      	b.n	800557e <scaraInitDuty+0x99e>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8005548:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 800554c:	2b00      	cmp	r3, #0
 800554e:	d113      	bne.n	8005578 <scaraInitDuty+0x998>
					abs_position = command.sub_para_double;
 8005550:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 8005554:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
					s			 = command.sub_para_double - myDUTY.joint.theta4_start;
 8005558:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	; 0x1d8
 800555c:	4bb3      	ldr	r3, [pc, #716]	; (800582c <scaraInitDuty+0xc4c>)
 800555e:	f503 6314 	add.w	r3, r3, #2368	; 0x940
 8005562:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005566:	461a      	mov	r2, r3
 8005568:	4623      	mov	r3, r4
 800556a:	f7fa fe9d 	bl	80002a8 <__aeabi_dsub>
 800556e:	4603      	mov	r3, r0
 8005570:	460c      	mov	r4, r1
 8005572:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
 8005576:	e002      	b.n	800557e <scaraInitDuty+0x99e>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 8005578:	230c      	movs	r3, #12
 800557a:	f000 be15 	b.w	80061a8 <scaraInitDuty+0x15c8>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J3, abs_position)) {
 800557e:	ed97 0b60 	vldr	d0, [r7, #384]	; 0x180
 8005582:	2003      	movs	r0, #3
 8005584:	f003 fd58 	bl	8009038 <scaraCheckWorkSpace1>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d00b      	beq.n	80055a6 <scaraInitDuty+0x9c6>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800558e:	2307      	movs	r3, #7
 8005590:	f000 be0a 	b.w	80061a8 <scaraInitDuty+0x15c8>
				}
				break;
			default:
				return SCARA_STATUS_ERROR_JOINT_NUM;
 8005594:	230b      	movs	r3, #11
 8005596:	f000 be07 	b.w	80061a8 <scaraInitDuty+0x15c8>
				break;
 800559a:	bf00      	nop
 800559c:	e004      	b.n	80055a8 <scaraInitDuty+0x9c8>
				break;
 800559e:	bf00      	nop
 80055a0:	e002      	b.n	80055a8 <scaraInitDuty+0x9c8>
				break;
 80055a2:	bf00      	nop
 80055a4:	e000      	b.n	80055a8 <scaraInitDuty+0x9c8>
				break;
 80055a6:	bf00      	nop
			}

			// LSPB
			if ( DUTY_TRAJECTORY_LSPB == command.trajec_type) {
 80055a8:	f897 31d0 	ldrb.w	r3, [r7, #464]	; 0x1d0
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	f040 8128 	bne.w	8005802 <scaraInitDuty+0xc22>
				// Mode Init Time
				if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 80055b2:	f897 31d1 	ldrb.w	r3, [r7, #465]	; 0x1d1
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	f040 8097 	bne.w	80056ea <scaraInitDuty+0xb0a>
					for ( uint8_t i = 0; i < 4; i++) {
 80055bc:	2300      	movs	r3, #0
 80055be:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
 80055c2:	e08c      	b.n	80056de <scaraInitDuty+0xafe>
						if ( i == command.sub_para_int) {
 80055c4:	f897 217f 	ldrb.w	r2, [r7, #383]	; 0x17f
 80055c8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d13d      	bne.n	800564c <scaraInitDuty+0xa6c>
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 80055d0:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 80055d4:	4a95      	ldr	r2, [pc, #596]	; (800582c <scaraInitDuty+0xc4c>)
 80055d6:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80055da:	fb01 f303 	mul.w	r3, r1, r3
 80055de:	4413      	add	r3, r2
 80055e0:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 80055e4:	2200      	movs	r2, #0
 80055e6:	701a      	strb	r2, [r3, #0]
							myDUTY.joint.trajectory[i].lspb.Tf = command.time_total;
 80055e8:	f897 217f 	ldrb.w	r2, [r7, #383]	; 0x17f
 80055ec:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 80055f0:	498e      	ldr	r1, [pc, #568]	; (800582c <scaraInitDuty+0xc4c>)
 80055f2:	f44f 70ac 	mov.w	r0, #344	; 0x158
 80055f6:	fb00 f202 	mul.w	r2, r0, r2
 80055fa:	440a      	add	r2, r1
 80055fc:	f502 6284 	add.w	r2, r2, #1056	; 0x420
 8005600:	e9c2 3400 	strd	r3, r4, [r2]
							status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8005604:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 8005608:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800560c:	fb02 f303 	mul.w	r3, r2, r3
 8005610:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 8005614:	4a85      	ldr	r2, [pc, #532]	; (800582c <scaraInitDuty+0xc4c>)
 8005616:	1898      	adds	r0, r3, r2
 8005618:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 800561c:	4a84      	ldr	r2, [pc, #528]	; (8005830 <scaraInitDuty+0xc50>)
 800561e:	5cd3      	ldrb	r3, [r2, r3]
 8005620:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8005624:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8005628:	eeb0 2a46 	vmov.f32	s4, s12
 800562c:	eef0 2a66 	vmov.f32	s5, s13
 8005630:	eeb0 1a47 	vmov.f32	s2, s14
 8005634:	eef0 1a67 	vmov.f32	s3, s15
 8005638:	2201      	movs	r2, #1
 800563a:	ed97 0b62 	vldr	d0, [r7, #392]	; 0x188
 800563e:	4619      	mov	r1, r3
 8005640:	f001 f802 	bl	8006648 <scaraInitLSPB>
 8005644:	4603      	mov	r3, r0
 8005646:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
 800564a:	e03c      	b.n	80056c6 <scaraInitDuty+0xae6>
											s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
						} else {
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 800564c:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 8005650:	4a76      	ldr	r2, [pc, #472]	; (800582c <scaraInitDuty+0xc4c>)
 8005652:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005656:	fb01 f303 	mul.w	r3, r1, r3
 800565a:	4413      	add	r3, r2
 800565c:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8005660:	2200      	movs	r2, #0
 8005662:	701a      	strb	r2, [r3, #0]
							myDUTY.joint.trajectory[i].lspb.Tf = command.time_total;
 8005664:	f897 217f 	ldrb.w	r2, [r7, #383]	; 0x17f
 8005668:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 800566c:	496f      	ldr	r1, [pc, #444]	; (800582c <scaraInitDuty+0xc4c>)
 800566e:	f44f 70ac 	mov.w	r0, #344	; 0x158
 8005672:	fb00 f202 	mul.w	r2, r0, r2
 8005676:	440a      	add	r2, r1
 8005678:	f502 6284 	add.w	r2, r2, #1056	; 0x420
 800567c:	e9c2 3400 	strd	r3, r4, [r2]
							status2 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8005680:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 8005684:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8005688:	fb02 f303 	mul.w	r3, r2, r3
 800568c:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 8005690:	4a66      	ldr	r2, [pc, #408]	; (800582c <scaraInitDuty+0xc4c>)
 8005692:	1898      	adds	r0, r3, r2
 8005694:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 8005698:	4a65      	ldr	r2, [pc, #404]	; (8005830 <scaraInitDuty+0xc50>)
 800569a:	5cd3      	ldrb	r3, [r2, r3]
 800569c:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 80056a0:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 80056a4:	eeb0 2a46 	vmov.f32	s4, s12
 80056a8:	eef0 2a66 	vmov.f32	s5, s13
 80056ac:	eeb0 1a47 	vmov.f32	s2, s14
 80056b0:	eef0 1a67 	vmov.f32	s3, s15
 80056b4:	2201      	movs	r2, #1
 80056b6:	ed9f 0b5a 	vldr	d0, [pc, #360]	; 8005820 <scaraInitDuty+0xc40>
 80056ba:	4619      	mov	r1, r3
 80056bc:	f000 ffc4 	bl	8006648 <scaraInitLSPB>
 80056c0:	4603      	mov	r3, r0
 80056c2:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
											0, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
						}
						myDUTY.time_total = command.time_total;
 80056c6:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 80056ca:	4a58      	ldr	r2, [pc, #352]	; (800582c <scaraInitDuty+0xc4c>)
 80056cc:	f602 1248 	addw	r2, r2, #2376	; 0x948
 80056d0:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 80056d4:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 80056d8:	3301      	adds	r3, #1
 80056da:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
 80056de:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 80056e2:	2b03      	cmp	r3, #3
 80056e4:	f67f af6e 	bls.w	80055c4 <scaraInitDuty+0x9e4>
 80056e8:	e1c8      	b.n	8005a7c <scaraInitDuty+0xe9c>
					}
				// Mode Init Acc
				} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 80056ea:	f897 31d1 	ldrb.w	r3, [r7, #465]	; 0x1d1
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	f040 8084 	bne.w	80057fc <scaraInitDuty+0xc1c>
					for ( uint8_t i = 0; i < 4; i++) {
 80056f4:	2300      	movs	r3, #0
 80056f6:	f887 317e 	strb.w	r3, [r7, #382]	; 0x17e
 80056fa:	e07a      	b.n	80057f2 <scaraInitDuty+0xc12>
						if ( i == command.sub_para_int) {
 80056fc:	f897 217e 	ldrb.w	r2, [r7, #382]	; 0x17e
 8005700:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8005704:	429a      	cmp	r2, r3
 8005706:	d140      	bne.n	800578a <scaraInitDuty+0xbaa>
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8005708:	f897 317e 	ldrb.w	r3, [r7, #382]	; 0x17e
 800570c:	4a47      	ldr	r2, [pc, #284]	; (800582c <scaraInitDuty+0xc4c>)
 800570e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005712:	fb01 f303 	mul.w	r3, r1, r3
 8005716:	4413      	add	r3, r2
 8005718:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 800571c:	2200      	movs	r2, #0
 800571e:	701a      	strb	r2, [r3, #0]
							status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8005720:	f897 317e 	ldrb.w	r3, [r7, #382]	; 0x17e
 8005724:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8005728:	fb02 f303 	mul.w	r3, r2, r3
 800572c:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 8005730:	4a3e      	ldr	r2, [pc, #248]	; (800582c <scaraInitDuty+0xc4c>)
 8005732:	1898      	adds	r0, r3, r2
 8005734:	f897 317e 	ldrb.w	r3, [r7, #382]	; 0x17e
 8005738:	4a3d      	ldr	r2, [pc, #244]	; (8005830 <scaraInitDuty+0xc50>)
 800573a:	5cd3      	ldrb	r3, [r2, r3]
 800573c:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8005740:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8005744:	eeb0 2a46 	vmov.f32	s4, s12
 8005748:	eef0 2a66 	vmov.f32	s5, s13
 800574c:	eeb0 1a47 	vmov.f32	s2, s14
 8005750:	eef0 1a67 	vmov.f32	s3, s15
 8005754:	2200      	movs	r2, #0
 8005756:	ed97 0b62 	vldr	d0, [r7, #392]	; 0x188
 800575a:	4619      	mov	r1, r3
 800575c:	f000 ff74 	bl	8006648 <scaraInitLSPB>
 8005760:	4603      	mov	r3, r0
 8005762:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
											s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
							myDUTY.time_total = myDUTY.joint.trajectory[i].lspb.Tf;
 8005766:	f897 317e 	ldrb.w	r3, [r7, #382]	; 0x17e
 800576a:	4a30      	ldr	r2, [pc, #192]	; (800582c <scaraInitDuty+0xc4c>)
 800576c:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005770:	fb01 f303 	mul.w	r3, r1, r3
 8005774:	4413      	add	r3, r2
 8005776:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 800577a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800577e:	4a2b      	ldr	r2, [pc, #172]	; (800582c <scaraInitDuty+0xc4c>)
 8005780:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8005784:	e9c2 3400 	strd	r3, r4, [r2]
 8005788:	e02e      	b.n	80057e8 <scaraInitDuty+0xc08>
						} else {
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 800578a:	f897 317e 	ldrb.w	r3, [r7, #382]	; 0x17e
 800578e:	4a27      	ldr	r2, [pc, #156]	; (800582c <scaraInitDuty+0xc4c>)
 8005790:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005794:	fb01 f303 	mul.w	r3, r1, r3
 8005798:	4413      	add	r3, r2
 800579a:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 800579e:	2200      	movs	r2, #0
 80057a0:	701a      	strb	r2, [r3, #0]
							status2 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 80057a2:	f897 317e 	ldrb.w	r3, [r7, #382]	; 0x17e
 80057a6:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80057aa:	fb02 f303 	mul.w	r3, r2, r3
 80057ae:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 80057b2:	4a1e      	ldr	r2, [pc, #120]	; (800582c <scaraInitDuty+0xc4c>)
 80057b4:	1898      	adds	r0, r3, r2
 80057b6:	f897 317e 	ldrb.w	r3, [r7, #382]	; 0x17e
 80057ba:	4a1d      	ldr	r2, [pc, #116]	; (8005830 <scaraInitDuty+0xc50>)
 80057bc:	5cd3      	ldrb	r3, [r2, r3]
 80057be:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 80057c2:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 80057c6:	eeb0 2a46 	vmov.f32	s4, s12
 80057ca:	eef0 2a66 	vmov.f32	s5, s13
 80057ce:	eeb0 1a47 	vmov.f32	s2, s14
 80057d2:	eef0 1a67 	vmov.f32	s3, s15
 80057d6:	2200      	movs	r2, #0
 80057d8:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8005820 <scaraInitDuty+0xc40>
 80057dc:	4619      	mov	r1, r3
 80057de:	f000 ff33 	bl	8006648 <scaraInitLSPB>
 80057e2:	4603      	mov	r3, r0
 80057e4:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
					for ( uint8_t i = 0; i < 4; i++) {
 80057e8:	f897 317e 	ldrb.w	r3, [r7, #382]	; 0x17e
 80057ec:	3301      	adds	r3, #1
 80057ee:	f887 317e 	strb.w	r3, [r7, #382]	; 0x17e
 80057f2:	f897 317e 	ldrb.w	r3, [r7, #382]	; 0x17e
 80057f6:	2b03      	cmp	r3, #3
 80057f8:	d980      	bls.n	80056fc <scaraInitDuty+0xb1c>
 80057fa:	e13f      	b.n	8005a7c <scaraInitDuty+0xe9c>
											0, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
						}
					}
				} else {
					return SCARA_STATUS_ERROR_MODE_INIT;
 80057fc:	2308      	movs	r3, #8
 80057fe:	f000 bcd3 	b.w	80061a8 <scaraInitDuty+0x15c8>
				}
			// SCURVE
			} else if ( DUTY_TRAJECTORY_SCURVE == command.trajec_type) {
 8005802:	f897 31d0 	ldrb.w	r3, [r7, #464]	; 0x1d0
 8005806:	2b01      	cmp	r3, #1
 8005808:	f040 8136 	bne.w	8005a78 <scaraInitDuty+0xe98>
					// Mode Init Time
					if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 800580c:	f897 31d1 	ldrb.w	r3, [r7, #465]	; 0x1d1
 8005810:	2b01      	cmp	r3, #1
 8005812:	f040 80a6 	bne.w	8005962 <scaraInitDuty+0xd82>
						for ( uint8_t i = 0; i < 4; i++) {
 8005816:	2300      	movs	r3, #0
 8005818:	f887 317d 	strb.w	r3, [r7, #381]	; 0x17d
 800581c:	e09b      	b.n	8005956 <scaraInitDuty+0xd76>
 800581e:	bf00      	nop
	...
 8005828:	40668000 	.word	0x40668000
 800582c:	200053d0 	.word	0x200053d0
 8005830:	20000ca8 	.word	0x20000ca8
 8005834:	60000000 	.word	0x60000000
 8005838:	400921fb 	.word	0x400921fb
							if ( i == command.sub_para_int) {
 800583c:	f897 217d 	ldrb.w	r2, [r7, #381]	; 0x17d
 8005840:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8005844:	429a      	cmp	r2, r3
 8005846:	d13d      	bne.n	80058c4 <scaraInitDuty+0xce4>
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8005848:	f897 317d 	ldrb.w	r3, [r7, #381]	; 0x17d
 800584c:	4ac0      	ldr	r2, [pc, #768]	; (8005b50 <scaraInitDuty+0xf70>)
 800584e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005852:	fb01 f303 	mul.w	r3, r1, r3
 8005856:	4413      	add	r3, r2
 8005858:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 800585c:	2201      	movs	r2, #1
 800585e:	701a      	strb	r2, [r3, #0]
								myDUTY.joint.trajectory[i].scurve.Tf = command.time_total;
 8005860:	f897 217d 	ldrb.w	r2, [r7, #381]	; 0x17d
 8005864:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 8005868:	49b9      	ldr	r1, [pc, #740]	; (8005b50 <scaraInitDuty+0xf70>)
 800586a:	f44f 70ac 	mov.w	r0, #344	; 0x158
 800586e:	fb00 f202 	mul.w	r2, r0, r2
 8005872:	440a      	add	r2, r1
 8005874:	f502 6296 	add.w	r2, r2, #1200	; 0x4b0
 8005878:	e9c2 3400 	strd	r3, r4, [r2]
								status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve),
 800587c:	f897 317d 	ldrb.w	r3, [r7, #381]	; 0x17d
 8005880:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8005884:	fb02 f303 	mul.w	r3, r2, r3
 8005888:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 800588c:	4ab0      	ldr	r2, [pc, #704]	; (8005b50 <scaraInitDuty+0xf70>)
 800588e:	1898      	adds	r0, r3, r2
 8005890:	f897 317d 	ldrb.w	r3, [r7, #381]	; 0x17d
 8005894:	4aaf      	ldr	r2, [pc, #700]	; (8005b54 <scaraInitDuty+0xf74>)
 8005896:	5cd3      	ldrb	r3, [r2, r3]
 8005898:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 800589c:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 80058a0:	eeb0 2a46 	vmov.f32	s4, s12
 80058a4:	eef0 2a66 	vmov.f32	s5, s13
 80058a8:	eeb0 1a47 	vmov.f32	s2, s14
 80058ac:	eef0 1a67 	vmov.f32	s3, s15
 80058b0:	2201      	movs	r2, #1
 80058b2:	ed97 0b62 	vldr	d0, [r7, #392]	; 0x188
 80058b6:	4619      	mov	r1, r3
 80058b8:	f001 fab2 	bl	8006e20 <scaraInitScurve>
 80058bc:	4603      	mov	r3, r0
 80058be:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
 80058c2:	e03c      	b.n	800593e <scaraInitDuty+0xd5e>
											joint_taget[i],
											s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
							} else {
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 80058c4:	f897 317d 	ldrb.w	r3, [r7, #381]	; 0x17d
 80058c8:	4aa1      	ldr	r2, [pc, #644]	; (8005b50 <scaraInitDuty+0xf70>)
 80058ca:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80058ce:	fb01 f303 	mul.w	r3, r1, r3
 80058d2:	4413      	add	r3, r2
 80058d4:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 80058d8:	2201      	movs	r2, #1
 80058da:	701a      	strb	r2, [r3, #0]
								myDUTY.joint.trajectory[i].scurve.Tf = command.time_total;
 80058dc:	f897 217d 	ldrb.w	r2, [r7, #381]	; 0x17d
 80058e0:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 80058e4:	499a      	ldr	r1, [pc, #616]	; (8005b50 <scaraInitDuty+0xf70>)
 80058e6:	f44f 70ac 	mov.w	r0, #344	; 0x158
 80058ea:	fb00 f202 	mul.w	r2, r0, r2
 80058ee:	440a      	add	r2, r1
 80058f0:	f502 6296 	add.w	r2, r2, #1200	; 0x4b0
 80058f4:	e9c2 3400 	strd	r3, r4, [r2]
								status2 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve),
 80058f8:	f897 317d 	ldrb.w	r3, [r7, #381]	; 0x17d
 80058fc:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8005900:	fb02 f303 	mul.w	r3, r2, r3
 8005904:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8005908:	4a91      	ldr	r2, [pc, #580]	; (8005b50 <scaraInitDuty+0xf70>)
 800590a:	1898      	adds	r0, r3, r2
 800590c:	f897 317d 	ldrb.w	r3, [r7, #381]	; 0x17d
 8005910:	4a90      	ldr	r2, [pc, #576]	; (8005b54 <scaraInitDuty+0xf74>)
 8005912:	5cd3      	ldrb	r3, [r2, r3]
 8005914:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8005918:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 800591c:	eeb0 2a46 	vmov.f32	s4, s12
 8005920:	eef0 2a66 	vmov.f32	s5, s13
 8005924:	eeb0 1a47 	vmov.f32	s2, s14
 8005928:	eef0 1a67 	vmov.f32	s3, s15
 800592c:	2201      	movs	r2, #1
 800592e:	ed9f 0b84 	vldr	d0, [pc, #528]	; 8005b40 <scaraInitDuty+0xf60>
 8005932:	4619      	mov	r1, r3
 8005934:	f001 fa74 	bl	8006e20 <scaraInitScurve>
 8005938:	4603      	mov	r3, r0
 800593a:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
											joint_taget[i],
											0, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
							}
							myDUTY.time_total = command.time_total;
 800593e:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 8005942:	4a83      	ldr	r2, [pc, #524]	; (8005b50 <scaraInitDuty+0xf70>)
 8005944:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8005948:	e9c2 3400 	strd	r3, r4, [r2]
						for ( uint8_t i = 0; i < 4; i++) {
 800594c:	f897 317d 	ldrb.w	r3, [r7, #381]	; 0x17d
 8005950:	3301      	adds	r3, #1
 8005952:	f887 317d 	strb.w	r3, [r7, #381]	; 0x17d
 8005956:	f897 317d 	ldrb.w	r3, [r7, #381]	; 0x17d
 800595a:	2b03      	cmp	r3, #3
 800595c:	f67f af6e 	bls.w	800583c <scaraInitDuty+0xc5c>
 8005960:	e08c      	b.n	8005a7c <scaraInitDuty+0xe9c>
						}
					// Mode Init Acc
					} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8005962:	f897 31d1 	ldrb.w	r3, [r7, #465]	; 0x1d1
 8005966:	2b00      	cmp	r3, #0
 8005968:	f040 8084 	bne.w	8005a74 <scaraInitDuty+0xe94>
						for ( uint8_t i = 0; i < 4; i++) {
 800596c:	2300      	movs	r3, #0
 800596e:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
 8005972:	e07a      	b.n	8005a6a <scaraInitDuty+0xe8a>
							if ( i == command.sub_para_int) {
 8005974:	f897 217c 	ldrb.w	r2, [r7, #380]	; 0x17c
 8005978:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800597c:	429a      	cmp	r2, r3
 800597e:	d140      	bne.n	8005a02 <scaraInitDuty+0xe22>
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8005980:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 8005984:	4a72      	ldr	r2, [pc, #456]	; (8005b50 <scaraInitDuty+0xf70>)
 8005986:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800598a:	fb01 f303 	mul.w	r3, r1, r3
 800598e:	4413      	add	r3, r2
 8005990:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8005994:	2201      	movs	r2, #1
 8005996:	701a      	strb	r2, [r3, #0]
								status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve),
 8005998:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 800599c:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80059a0:	fb02 f303 	mul.w	r3, r2, r3
 80059a4:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 80059a8:	4a69      	ldr	r2, [pc, #420]	; (8005b50 <scaraInitDuty+0xf70>)
 80059aa:	1898      	adds	r0, r3, r2
 80059ac:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 80059b0:	4a68      	ldr	r2, [pc, #416]	; (8005b54 <scaraInitDuty+0xf74>)
 80059b2:	5cd3      	ldrb	r3, [r2, r3]
 80059b4:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 80059b8:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 80059bc:	eeb0 2a46 	vmov.f32	s4, s12
 80059c0:	eef0 2a66 	vmov.f32	s5, s13
 80059c4:	eeb0 1a47 	vmov.f32	s2, s14
 80059c8:	eef0 1a67 	vmov.f32	s3, s15
 80059cc:	2200      	movs	r2, #0
 80059ce:	ed97 0b62 	vldr	d0, [r7, #392]	; 0x188
 80059d2:	4619      	mov	r1, r3
 80059d4:	f001 fa24 	bl	8006e20 <scaraInitScurve>
 80059d8:	4603      	mov	r3, r0
 80059da:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
											joint_taget[i],
											s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
								myDUTY.time_total = myDUTY.joint.trajectory[i].scurve.Tf;
 80059de:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 80059e2:	4a5b      	ldr	r2, [pc, #364]	; (8005b50 <scaraInitDuty+0xf70>)
 80059e4:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80059e8:	fb01 f303 	mul.w	r3, r1, r3
 80059ec:	4413      	add	r3, r2
 80059ee:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 80059f2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80059f6:	4a56      	ldr	r2, [pc, #344]	; (8005b50 <scaraInitDuty+0xf70>)
 80059f8:	f602 1248 	addw	r2, r2, #2376	; 0x948
 80059fc:	e9c2 3400 	strd	r3, r4, [r2]
 8005a00:	e02e      	b.n	8005a60 <scaraInitDuty+0xe80>
							} else {
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8005a02:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 8005a06:	4a52      	ldr	r2, [pc, #328]	; (8005b50 <scaraInitDuty+0xf70>)
 8005a08:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005a0c:	fb01 f303 	mul.w	r3, r1, r3
 8005a10:	4413      	add	r3, r2
 8005a12:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8005a16:	2201      	movs	r2, #1
 8005a18:	701a      	strb	r2, [r3, #0]
								status2 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve),
 8005a1a:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 8005a1e:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8005a22:	fb02 f303 	mul.w	r3, r2, r3
 8005a26:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8005a2a:	4a49      	ldr	r2, [pc, #292]	; (8005b50 <scaraInitDuty+0xf70>)
 8005a2c:	1898      	adds	r0, r3, r2
 8005a2e:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 8005a32:	4a48      	ldr	r2, [pc, #288]	; (8005b54 <scaraInitDuty+0xf74>)
 8005a34:	5cd3      	ldrb	r3, [r2, r3]
 8005a36:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8005a3a:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8005a3e:	eeb0 2a46 	vmov.f32	s4, s12
 8005a42:	eef0 2a66 	vmov.f32	s5, s13
 8005a46:	eeb0 1a47 	vmov.f32	s2, s14
 8005a4a:	eef0 1a67 	vmov.f32	s3, s15
 8005a4e:	2200      	movs	r2, #0
 8005a50:	ed9f 0b3b 	vldr	d0, [pc, #236]	; 8005b40 <scaraInitDuty+0xf60>
 8005a54:	4619      	mov	r1, r3
 8005a56:	f001 f9e3 	bl	8006e20 <scaraInitScurve>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
						for ( uint8_t i = 0; i < 4; i++) {
 8005a60:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 8005a64:	3301      	adds	r3, #1
 8005a66:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
 8005a6a:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 8005a6e:	2b03      	cmp	r3, #3
 8005a70:	d980      	bls.n	8005974 <scaraInitDuty+0xd94>
 8005a72:	e003      	b.n	8005a7c <scaraInitDuty+0xe9c>
											0, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
							}
						}

					} else {
						return SCARA_STATUS_ERROR_MODE_INIT;
 8005a74:	2308      	movs	r3, #8
 8005a76:	e397      	b.n	80061a8 <scaraInitDuty+0x15c8>
					}

			} else {
				return SCARA_STATUS_ERROR_TRAJECTORY;
 8005a78:	2305      	movs	r3, #5
 8005a7a:	e395      	b.n	80061a8 <scaraInitDuty+0x15c8>
			}
		// Check Init Status
			if ( SCARA_STATUS_OK != status1) {
 8005a7c:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d002      	beq.n	8005a8a <scaraInitDuty+0xeaa>
				return status1;
 8005a84:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8005a88:	e38e      	b.n	80061a8 <scaraInitDuty+0x15c8>
			}
			if ( SCARA_STATUS_OK != status2) {
 8005a8a:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	f000 835c 	beq.w	800614c <scaraInitDuty+0x156c>
				return status2;
 8005a94:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 8005a98:	e386      	b.n	80061a8 <scaraInitDuty+0x15c8>
			}

		//----Joint Quadra
		} else if 	( DUTY_JOINT_4DOF == command.joint_type) {
 8005a9a:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	f040 8350 	bne.w	8006144 <scaraInitDuty+0x1564>
			SCARA_PositionTypeDef	target_point;
			// Change Degree --> Radian
			command.target_point.roll = command.target_point.roll*PI/180.0;
 8005aa4:	e9d7 0192 	ldrd	r0, r1, [r7, #584]	; 0x248
 8005aa8:	a327      	add	r3, pc, #156	; (adr r3, 8005b48 <scaraInitDuty+0xf68>)
 8005aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aae:	f7fa fdb3 	bl	8000618 <__aeabi_dmul>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	460c      	mov	r4, r1
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	4621      	mov	r1, r4
 8005aba:	f04f 0200 	mov.w	r2, #0
 8005abe:	4b26      	ldr	r3, [pc, #152]	; (8005b58 <scaraInitDuty+0xf78>)
 8005ac0:	f7fa fed4 	bl	800086c <__aeabi_ddiv>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	460c      	mov	r4, r1
 8005ac8:	e9c7 3492 	strd	r3, r4, [r7, #584]	; 0x248
			// Coordinate
			if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8005acc:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d145      	bne.n	8005b60 <scaraInitDuty+0xf80>
				target_point.x 		= positionCurrent.x + command.target_point.x;
 8005ad4:	4b21      	ldr	r3, [pc, #132]	; (8005b5c <scaraInitDuty+0xf7c>)
 8005ad6:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8005ada:	e9d7 348c 	ldrd	r3, r4, [r7, #560]	; 0x230
 8005ade:	461a      	mov	r2, r3
 8005ae0:	4623      	mov	r3, r4
 8005ae2:	f7fa fbe3 	bl	80002ac <__adddf3>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	460c      	mov	r4, r1
 8005aea:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
				target_point.y 		= positionCurrent.y + command.target_point.y;
 8005aee:	4b1b      	ldr	r3, [pc, #108]	; (8005b5c <scaraInitDuty+0xf7c>)
 8005af0:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8005af4:	e9d7 348e 	ldrd	r3, r4, [r7, #568]	; 0x238
 8005af8:	461a      	mov	r2, r3
 8005afa:	4623      	mov	r3, r4
 8005afc:	f7fa fbd6 	bl	80002ac <__adddf3>
 8005b00:	4603      	mov	r3, r0
 8005b02:	460c      	mov	r4, r1
 8005b04:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
				target_point.z 		= positionCurrent.z + command.target_point.z;
 8005b08:	4b14      	ldr	r3, [pc, #80]	; (8005b5c <scaraInitDuty+0xf7c>)
 8005b0a:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8005b0e:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 8005b12:	461a      	mov	r2, r3
 8005b14:	4623      	mov	r3, r4
 8005b16:	f7fa fbc9 	bl	80002ac <__adddf3>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	460c      	mov	r4, r1
 8005b1e:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
				target_point.roll	= positionCurrent.roll + command.target_point.roll;
 8005b22:	4b0e      	ldr	r3, [pc, #56]	; (8005b5c <scaraInitDuty+0xf7c>)
 8005b24:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8005b28:	e9d7 3492 	ldrd	r3, r4, [r7, #584]	; 0x248
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	4623      	mov	r3, r4
 8005b30:	f7fa fbbc 	bl	80002ac <__adddf3>
 8005b34:	4603      	mov	r3, r0
 8005b36:	460c      	mov	r4, r1
 8005b38:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 8005b3c:	e027      	b.n	8005b8e <scaraInitDuty+0xfae>
 8005b3e:	bf00      	nop
	...
 8005b48:	60000000 	.word	0x60000000
 8005b4c:	400921fb 	.word	0x400921fb
 8005b50:	200053d0 	.word	0x200053d0
 8005b54:	20000ca8 	.word	0x20000ca8
 8005b58:	40668000 	.word	0x40668000
 8005b5c:	20005e90 	.word	0x20005e90
			} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8005b60:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d110      	bne.n	8005b8a <scaraInitDuty+0xfaa>
				target_point.x 		= command.target_point.x;
 8005b68:	e9d7 348c 	ldrd	r3, r4, [r7, #560]	; 0x230
 8005b6c:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
				target_point.y 		= command.target_point.y;
 8005b70:	e9d7 348e 	ldrd	r3, r4, [r7, #568]	; 0x238
 8005b74:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
				target_point.z 		= command.target_point.z;
 8005b78:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 8005b7c:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
				target_point.roll	= command.target_point.roll;
 8005b80:	e9d7 3492 	ldrd	r3, r4, [r7, #584]	; 0x248
 8005b84:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 8005b88:	e001      	b.n	8005b8e <scaraInitDuty+0xfae>
			} else {
				return SCARA_STATUS_ERROR_COORDINATE;
 8005b8a:	230c      	movs	r3, #12
 8005b8c:	e30c      	b.n	80061a8 <scaraInitDuty+0x15c8>
			}

			if( FALSE == kinematicInverse(&target_point, positionCurrent)) {
 8005b8e:	4cce      	ldr	r4, [pc, #824]	; (8005ec8 <scaraInitDuty+0x12e8>)
 8005b90:	f107 05b8 	add.w	r5, r7, #184	; 0xb8
 8005b94:	4668      	mov	r0, sp
 8005b96:	f104 0308 	add.w	r3, r4, #8
 8005b9a:	22b0      	movs	r2, #176	; 0xb0
 8005b9c:	4619      	mov	r1, r3
 8005b9e:	f00f ffbf 	bl	8015b20 <memcpy>
 8005ba2:	e894 000c 	ldmia.w	r4, {r2, r3}
 8005ba6:	4628      	mov	r0, r5
 8005ba8:	f7fd fd3e 	bl	8003628 <kinematicInverse>
 8005bac:	4603      	mov	r3, r0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d101      	bne.n	8005bb6 <scaraInitDuty+0xfd6>
				return SCARA_STATUS_ERROR_OVER_WORKSPACE;// Exit with error
 8005bb2:	2307      	movs	r3, #7
 8005bb4:	e2f8      	b.n	80061a8 <scaraInitDuty+0x15c8>
			}
			// Trajectory 4 profile
			double q[4];
			q[0] = target_point.Theta1 - positionCurrent.Theta1;
 8005bb6:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8005bba:	4bc3      	ldr	r3, [pc, #780]	; (8005ec8 <scaraInitDuty+0x12e8>)
 8005bbc:	e9d3 341a 	ldrd	r3, r4, [r3, #104]	; 0x68
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	4623      	mov	r3, r4
 8005bc4:	f7fa fb70 	bl	80002a8 <__aeabi_dsub>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	460c      	mov	r4, r1
 8005bcc:	463a      	mov	r2, r7
 8005bce:	e9c2 3400 	strd	r3, r4, [r2]
			q[1] = target_point.Theta2 - positionCurrent.Theta2;
 8005bd2:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8005bd6:	4bbc      	ldr	r3, [pc, #752]	; (8005ec8 <scaraInitDuty+0x12e8>)
 8005bd8:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8005bdc:	461a      	mov	r2, r3
 8005bde:	4623      	mov	r3, r4
 8005be0:	f7fa fb62 	bl	80002a8 <__aeabi_dsub>
 8005be4:	4603      	mov	r3, r0
 8005be6:	460c      	mov	r4, r1
 8005be8:	463a      	mov	r2, r7
 8005bea:	e9c2 3402 	strd	r3, r4, [r2, #8]
			q[2] = target_point.D3 	   - positionCurrent.D3;
 8005bee:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 8005bf2:	4bb5      	ldr	r3, [pc, #724]	; (8005ec8 <scaraInitDuty+0x12e8>)
 8005bf4:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	4623      	mov	r3, r4
 8005bfc:	f7fa fb54 	bl	80002a8 <__aeabi_dsub>
 8005c00:	4603      	mov	r3, r0
 8005c02:	460c      	mov	r4, r1
 8005c04:	463a      	mov	r2, r7
 8005c06:	e9c2 3404 	strd	r3, r4, [r2, #16]
			q[3] = target_point.Theta4 - positionCurrent.Theta4;
 8005c0a:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8005c0e:	4bae      	ldr	r3, [pc, #696]	; (8005ec8 <scaraInitDuty+0x12e8>)
 8005c10:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 8005c14:	461a      	mov	r2, r3
 8005c16:	4623      	mov	r3, r4
 8005c18:	f7fa fb46 	bl	80002a8 <__aeabi_dsub>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	460c      	mov	r4, r1
 8005c20:	463a      	mov	r2, r7
 8005c22:	e9c2 3406 	strd	r3, r4, [r2, #24]

			// LSPB
			if ( DUTY_TRAJECTORY_LSPB == command.trajec_type) {
 8005c26:	f897 31d0 	ldrb.w	r3, [r7, #464]	; 0x1d0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	f040 813e 	bne.w	8005eac <scaraInitDuty+0x12cc>
				// Mode Init Time
				if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8005c30:	f897 31d1 	ldrb.w	r3, [r7, #465]	; 0x1d1
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d159      	bne.n	8005cec <scaraInitDuty+0x110c>
					for ( uint8_t i = 0; i < 4; i++) {
 8005c38:	2300      	movs	r3, #0
 8005c3a:	f887 317b 	strb.w	r3, [r7, #379]	; 0x17b
 8005c3e:	e049      	b.n	8005cd4 <scaraInitDuty+0x10f4>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8005c40:	f897 317b 	ldrb.w	r3, [r7, #379]	; 0x17b
 8005c44:	4aa1      	ldr	r2, [pc, #644]	; (8005ecc <scaraInitDuty+0x12ec>)
 8005c46:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005c4a:	fb01 f303 	mul.w	r3, r1, r3
 8005c4e:	4413      	add	r3, r2
 8005c50:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8005c54:	2200      	movs	r2, #0
 8005c56:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].lspb.Tf = command.time_total;
 8005c58:	f897 217b 	ldrb.w	r2, [r7, #379]	; 0x17b
 8005c5c:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 8005c60:	499a      	ldr	r1, [pc, #616]	; (8005ecc <scaraInitDuty+0x12ec>)
 8005c62:	f44f 70ac 	mov.w	r0, #344	; 0x158
 8005c66:	fb00 f202 	mul.w	r2, r0, r2
 8005c6a:	440a      	add	r2, r1
 8005c6c:	f502 6284 	add.w	r2, r2, #1056	; 0x420
 8005c70:	e9c2 3400 	strd	r3, r4, [r2]
						status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8005c74:	f897 317b 	ldrb.w	r3, [r7, #379]	; 0x17b
 8005c78:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8005c7c:	fb02 f303 	mul.w	r3, r2, r3
 8005c80:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 8005c84:	4a91      	ldr	r2, [pc, #580]	; (8005ecc <scaraInitDuty+0x12ec>)
 8005c86:	1898      	adds	r0, r3, r2
 8005c88:	f897 317b 	ldrb.w	r3, [r7, #379]	; 0x17b
 8005c8c:	4a90      	ldr	r2, [pc, #576]	; (8005ed0 <scaraInitDuty+0x12f0>)
 8005c8e:	5cd1      	ldrb	r1, [r2, r3]
 8005c90:	f897 317b 	ldrb.w	r3, [r7, #379]	; 0x17b
 8005c94:	463a      	mov	r2, r7
 8005c96:	00db      	lsls	r3, r3, #3
 8005c98:	4413      	add	r3, r2
 8005c9a:	ed93 7b00 	vldr	d7, [r3]
 8005c9e:	ed97 6bd6 	vldr	d6, [r7, #856]	; 0x358
 8005ca2:	ed97 5bd8 	vldr	d5, [r7, #864]	; 0x360
 8005ca6:	eeb0 2a45 	vmov.f32	s4, s10
 8005caa:	eef0 2a65 	vmov.f32	s5, s11
 8005cae:	eeb0 1a46 	vmov.f32	s2, s12
 8005cb2:	eef0 1a66 	vmov.f32	s3, s13
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	eeb0 0a47 	vmov.f32	s0, s14
 8005cbc:	eef0 0a67 	vmov.f32	s1, s15
 8005cc0:	f000 fcc2 	bl	8006648 <scaraInitLSPB>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
					for ( uint8_t i = 0; i < 4; i++) {
 8005cca:	f897 317b 	ldrb.w	r3, [r7, #379]	; 0x17b
 8005cce:	3301      	adds	r3, #1
 8005cd0:	f887 317b 	strb.w	r3, [r7, #379]	; 0x17b
 8005cd4:	f897 317b 	ldrb.w	r3, [r7, #379]	; 0x17b
 8005cd8:	2b03      	cmp	r3, #3
 8005cda:	d9b1      	bls.n	8005c40 <scaraInitDuty+0x1060>
											q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);

					}
					myDUTY.time_total = command.time_total;
 8005cdc:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 8005ce0:	4a7a      	ldr	r2, [pc, #488]	; (8005ecc <scaraInitDuty+0x12ec>)
 8005ce2:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8005ce6:	e9c2 3400 	strd	r3, r4, [r2]
 8005cea:	e22f      	b.n	800614c <scaraInitDuty+0x156c>
				// Mode Init Acc
				} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8005cec:	f897 31d1 	ldrb.w	r3, [r7, #465]	; 0x1d1
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	f040 80d9 	bne.w	8005ea8 <scaraInitDuty+0x12c8>
					for ( uint8_t i = 0; i < 4; i++) {
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	f887 317a 	strb.w	r3, [r7, #378]	; 0x17a
 8005cfc:	e03b      	b.n	8005d76 <scaraInitDuty+0x1196>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8005cfe:	f897 317a 	ldrb.w	r3, [r7, #378]	; 0x17a
 8005d02:	4a72      	ldr	r2, [pc, #456]	; (8005ecc <scaraInitDuty+0x12ec>)
 8005d04:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005d08:	fb01 f303 	mul.w	r3, r1, r3
 8005d0c:	4413      	add	r3, r2
 8005d0e:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8005d12:	2200      	movs	r2, #0
 8005d14:	701a      	strb	r2, [r3, #0]
						status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8005d16:	f897 317a 	ldrb.w	r3, [r7, #378]	; 0x17a
 8005d1a:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8005d1e:	fb02 f303 	mul.w	r3, r2, r3
 8005d22:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 8005d26:	4a69      	ldr	r2, [pc, #420]	; (8005ecc <scaraInitDuty+0x12ec>)
 8005d28:	1898      	adds	r0, r3, r2
 8005d2a:	f897 317a 	ldrb.w	r3, [r7, #378]	; 0x17a
 8005d2e:	4a68      	ldr	r2, [pc, #416]	; (8005ed0 <scaraInitDuty+0x12f0>)
 8005d30:	5cd1      	ldrb	r1, [r2, r3]
 8005d32:	f897 317a 	ldrb.w	r3, [r7, #378]	; 0x17a
 8005d36:	463a      	mov	r2, r7
 8005d38:	00db      	lsls	r3, r3, #3
 8005d3a:	4413      	add	r3, r2
 8005d3c:	ed93 7b00 	vldr	d7, [r3]
 8005d40:	ed97 6bd6 	vldr	d6, [r7, #856]	; 0x358
 8005d44:	ed97 5bd8 	vldr	d5, [r7, #864]	; 0x360
 8005d48:	eeb0 2a45 	vmov.f32	s4, s10
 8005d4c:	eef0 2a65 	vmov.f32	s5, s11
 8005d50:	eeb0 1a46 	vmov.f32	s2, s12
 8005d54:	eef0 1a66 	vmov.f32	s3, s13
 8005d58:	2200      	movs	r2, #0
 8005d5a:	eeb0 0a47 	vmov.f32	s0, s14
 8005d5e:	eef0 0a67 	vmov.f32	s1, s15
 8005d62:	f000 fc71 	bl	8006648 <scaraInitLSPB>
 8005d66:	4603      	mov	r3, r0
 8005d68:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
					for ( uint8_t i = 0; i < 4; i++) {
 8005d6c:	f897 317a 	ldrb.w	r3, [r7, #378]	; 0x17a
 8005d70:	3301      	adds	r3, #1
 8005d72:	f887 317a 	strb.w	r3, [r7, #378]	; 0x17a
 8005d76:	f897 317a 	ldrb.w	r3, [r7, #378]	; 0x17a
 8005d7a:	2b03      	cmp	r3, #3
 8005d7c:	d9bf      	bls.n	8005cfe <scaraInitDuty+0x111e>
											q[i], DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
					}
					myDUTY.time_total = 0;
 8005d7e:	4b53      	ldr	r3, [pc, #332]	; (8005ecc <scaraInitDuty+0x12ec>)
 8005d80:	f603 1248 	addw	r2, r3, #2376	; 0x948
 8005d84:	f04f 0300 	mov.w	r3, #0
 8005d88:	f04f 0400 	mov.w	r4, #0
 8005d8c:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 8005d90:	2300      	movs	r3, #0
 8005d92:	f887 3179 	strb.w	r3, [r7, #377]	; 0x179
 8005d96:	e02d      	b.n	8005df4 <scaraInitDuty+0x1214>
						if ( myDUTY.joint.trajectory[i].lspb.Tf > myDUTY.time_total) {
 8005d98:	f897 3179 	ldrb.w	r3, [r7, #377]	; 0x179
 8005d9c:	4a4b      	ldr	r2, [pc, #300]	; (8005ecc <scaraInitDuty+0x12ec>)
 8005d9e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005da2:	fb01 f303 	mul.w	r3, r1, r3
 8005da6:	4413      	add	r3, r2
 8005da8:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8005dac:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005db0:	4b46      	ldr	r3, [pc, #280]	; (8005ecc <scaraInitDuty+0x12ec>)
 8005db2:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8005db6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005dba:	461a      	mov	r2, r3
 8005dbc:	4623      	mov	r3, r4
 8005dbe:	f7fa febb 	bl	8000b38 <__aeabi_dcmpgt>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d010      	beq.n	8005dea <scaraInitDuty+0x120a>
							myDUTY.time_total = myDUTY.joint.trajectory[i].lspb.Tf;
 8005dc8:	f897 3179 	ldrb.w	r3, [r7, #377]	; 0x179
 8005dcc:	4a3f      	ldr	r2, [pc, #252]	; (8005ecc <scaraInitDuty+0x12ec>)
 8005dce:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005dd2:	fb01 f303 	mul.w	r3, r1, r3
 8005dd6:	4413      	add	r3, r2
 8005dd8:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8005ddc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005de0:	4a3a      	ldr	r2, [pc, #232]	; (8005ecc <scaraInitDuty+0x12ec>)
 8005de2:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8005de6:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 8005dea:	f897 3179 	ldrb.w	r3, [r7, #377]	; 0x179
 8005dee:	3301      	adds	r3, #1
 8005df0:	f887 3179 	strb.w	r3, [r7, #377]	; 0x179
 8005df4:	f897 3179 	ldrb.w	r3, [r7, #377]	; 0x179
 8005df8:	2b03      	cmp	r3, #3
 8005dfa:	d9cd      	bls.n	8005d98 <scaraInitDuty+0x11b8>
						}
					}
					for ( uint8_t i = 0; i < 4; i++) {
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	f887 3178 	strb.w	r3, [r7, #376]	; 0x178
 8005e02:	e04c      	b.n	8005e9e <scaraInitDuty+0x12be>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8005e04:	f897 3178 	ldrb.w	r3, [r7, #376]	; 0x178
 8005e08:	4a30      	ldr	r2, [pc, #192]	; (8005ecc <scaraInitDuty+0x12ec>)
 8005e0a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005e0e:	fb01 f303 	mul.w	r3, r1, r3
 8005e12:	4413      	add	r3, r2
 8005e14:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8005e18:	2200      	movs	r2, #0
 8005e1a:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].lspb.Tf = myDUTY.time_total;
 8005e1c:	f897 2178 	ldrb.w	r2, [r7, #376]	; 0x178
 8005e20:	4b2a      	ldr	r3, [pc, #168]	; (8005ecc <scaraInitDuty+0x12ec>)
 8005e22:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8005e26:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005e2a:	4928      	ldr	r1, [pc, #160]	; (8005ecc <scaraInitDuty+0x12ec>)
 8005e2c:	f44f 70ac 	mov.w	r0, #344	; 0x158
 8005e30:	fb00 f202 	mul.w	r2, r0, r2
 8005e34:	440a      	add	r2, r1
 8005e36:	f502 6284 	add.w	r2, r2, #1056	; 0x420
 8005e3a:	e9c2 3400 	strd	r3, r4, [r2]
						status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8005e3e:	f897 3178 	ldrb.w	r3, [r7, #376]	; 0x178
 8005e42:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8005e46:	fb02 f303 	mul.w	r3, r2, r3
 8005e4a:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 8005e4e:	4a1f      	ldr	r2, [pc, #124]	; (8005ecc <scaraInitDuty+0x12ec>)
 8005e50:	1898      	adds	r0, r3, r2
 8005e52:	f897 3178 	ldrb.w	r3, [r7, #376]	; 0x178
 8005e56:	4a1e      	ldr	r2, [pc, #120]	; (8005ed0 <scaraInitDuty+0x12f0>)
 8005e58:	5cd1      	ldrb	r1, [r2, r3]
 8005e5a:	f897 3178 	ldrb.w	r3, [r7, #376]	; 0x178
 8005e5e:	463a      	mov	r2, r7
 8005e60:	00db      	lsls	r3, r3, #3
 8005e62:	4413      	add	r3, r2
 8005e64:	ed93 7b00 	vldr	d7, [r3]
 8005e68:	ed97 6bd6 	vldr	d6, [r7, #856]	; 0x358
 8005e6c:	ed97 5bd8 	vldr	d5, [r7, #864]	; 0x360
 8005e70:	eeb0 2a45 	vmov.f32	s4, s10
 8005e74:	eef0 2a65 	vmov.f32	s5, s11
 8005e78:	eeb0 1a46 	vmov.f32	s2, s12
 8005e7c:	eef0 1a66 	vmov.f32	s3, s13
 8005e80:	2201      	movs	r2, #1
 8005e82:	eeb0 0a47 	vmov.f32	s0, s14
 8005e86:	eef0 0a67 	vmov.f32	s1, s15
 8005e8a:	f000 fbdd 	bl	8006648 <scaraInitLSPB>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
					for ( uint8_t i = 0; i < 4; i++) {
 8005e94:	f897 3178 	ldrb.w	r3, [r7, #376]	; 0x178
 8005e98:	3301      	adds	r3, #1
 8005e9a:	f887 3178 	strb.w	r3, [r7, #376]	; 0x178
 8005e9e:	f897 3178 	ldrb.w	r3, [r7, #376]	; 0x178
 8005ea2:	2b03      	cmp	r3, #3
 8005ea4:	d9ae      	bls.n	8005e04 <scaraInitDuty+0x1224>
 8005ea6:	e151      	b.n	800614c <scaraInitDuty+0x156c>
											q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					}

				} else {
					return SCARA_STATUS_ERROR_MODE_INIT;
 8005ea8:	2308      	movs	r3, #8
 8005eaa:	e17d      	b.n	80061a8 <scaraInitDuty+0x15c8>
				}
				// SCURVE
			} else if ( DUTY_TRAJECTORY_SCURVE == command.trajec_type) {
 8005eac:	f897 31d0 	ldrb.w	r3, [r7, #464]	; 0x1d0
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	f040 8145 	bne.w	8006140 <scaraInitDuty+0x1560>
				// Mode Init Time
				if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8005eb6:	f897 31d1 	ldrb.w	r3, [r7, #465]	; 0x1d1
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d160      	bne.n	8005f80 <scaraInitDuty+0x13a0>
					for ( uint8_t i = 0; i < 4; i++) {
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
 8005ec4:	e050      	b.n	8005f68 <scaraInitDuty+0x1388>
 8005ec6:	bf00      	nop
 8005ec8:	20005e90 	.word	0x20005e90
 8005ecc:	200053d0 	.word	0x200053d0
 8005ed0:	20000ca8 	.word	0x20000ca8
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8005ed4:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8005ed8:	4ab7      	ldr	r2, [pc, #732]	; (80061b8 <scaraInitDuty+0x15d8>)
 8005eda:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005ede:	fb01 f303 	mul.w	r3, r1, r3
 8005ee2:	4413      	add	r3, r2
 8005ee4:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8005ee8:	2201      	movs	r2, #1
 8005eea:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].scurve.Tf = command.time_total;
 8005eec:	f897 2177 	ldrb.w	r2, [r7, #375]	; 0x177
 8005ef0:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 8005ef4:	49b0      	ldr	r1, [pc, #704]	; (80061b8 <scaraInitDuty+0x15d8>)
 8005ef6:	f44f 70ac 	mov.w	r0, #344	; 0x158
 8005efa:	fb00 f202 	mul.w	r2, r0, r2
 8005efe:	440a      	add	r2, r1
 8005f00:	f502 6296 	add.w	r2, r2, #1200	; 0x4b0
 8005f04:	e9c2 3400 	strd	r3, r4, [r2]
						status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 8005f08:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8005f0c:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8005f10:	fb02 f303 	mul.w	r3, r2, r3
 8005f14:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8005f18:	4aa7      	ldr	r2, [pc, #668]	; (80061b8 <scaraInitDuty+0x15d8>)
 8005f1a:	1898      	adds	r0, r3, r2
 8005f1c:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8005f20:	4aa6      	ldr	r2, [pc, #664]	; (80061bc <scaraInitDuty+0x15dc>)
 8005f22:	5cd1      	ldrb	r1, [r2, r3]
 8005f24:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8005f28:	463a      	mov	r2, r7
 8005f2a:	00db      	lsls	r3, r3, #3
 8005f2c:	4413      	add	r3, r2
 8005f2e:	ed93 7b00 	vldr	d7, [r3]
 8005f32:	ed97 6bd6 	vldr	d6, [r7, #856]	; 0x358
 8005f36:	ed97 5bd8 	vldr	d5, [r7, #864]	; 0x360
 8005f3a:	eeb0 2a45 	vmov.f32	s4, s10
 8005f3e:	eef0 2a65 	vmov.f32	s5, s11
 8005f42:	eeb0 1a46 	vmov.f32	s2, s12
 8005f46:	eef0 1a66 	vmov.f32	s3, s13
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	eeb0 0a47 	vmov.f32	s0, s14
 8005f50:	eef0 0a67 	vmov.f32	s1, s15
 8005f54:	f000 ff64 	bl	8006e20 <scaraInitScurve>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
					for ( uint8_t i = 0; i < 4; i++) {
 8005f5e:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8005f62:	3301      	adds	r3, #1
 8005f64:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
 8005f68:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8005f6c:	2b03      	cmp	r3, #3
 8005f6e:	d9b1      	bls.n	8005ed4 <scaraInitDuty+0x12f4>
											q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);

					}
					myDUTY.time_total = command.time_total;
 8005f70:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 8005f74:	4a90      	ldr	r2, [pc, #576]	; (80061b8 <scaraInitDuty+0x15d8>)
 8005f76:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8005f7a:	e9c2 3400 	strd	r3, r4, [r2]
 8005f7e:	e0e5      	b.n	800614c <scaraInitDuty+0x156c>
				// Mode Init Acc
				} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8005f80:	f897 31d1 	ldrb.w	r3, [r7, #465]	; 0x1d1
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	f040 80d9 	bne.w	800613c <scaraInitDuty+0x155c>
					for ( uint8_t i = 0; i < 4; i++) {
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	f887 3176 	strb.w	r3, [r7, #374]	; 0x176
 8005f90:	e03b      	b.n	800600a <scaraInitDuty+0x142a>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8005f92:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 8005f96:	4a88      	ldr	r2, [pc, #544]	; (80061b8 <scaraInitDuty+0x15d8>)
 8005f98:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005f9c:	fb01 f303 	mul.w	r3, r1, r3
 8005fa0:	4413      	add	r3, r2
 8005fa2:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	701a      	strb	r2, [r3, #0]
						status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 8005faa:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 8005fae:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8005fb2:	fb02 f303 	mul.w	r3, r2, r3
 8005fb6:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8005fba:	4a7f      	ldr	r2, [pc, #508]	; (80061b8 <scaraInitDuty+0x15d8>)
 8005fbc:	1898      	adds	r0, r3, r2
 8005fbe:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 8005fc2:	4a7e      	ldr	r2, [pc, #504]	; (80061bc <scaraInitDuty+0x15dc>)
 8005fc4:	5cd1      	ldrb	r1, [r2, r3]
 8005fc6:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 8005fca:	463a      	mov	r2, r7
 8005fcc:	00db      	lsls	r3, r3, #3
 8005fce:	4413      	add	r3, r2
 8005fd0:	ed93 7b00 	vldr	d7, [r3]
 8005fd4:	ed97 6bd6 	vldr	d6, [r7, #856]	; 0x358
 8005fd8:	ed97 5bd8 	vldr	d5, [r7, #864]	; 0x360
 8005fdc:	eeb0 2a45 	vmov.f32	s4, s10
 8005fe0:	eef0 2a65 	vmov.f32	s5, s11
 8005fe4:	eeb0 1a46 	vmov.f32	s2, s12
 8005fe8:	eef0 1a66 	vmov.f32	s3, s13
 8005fec:	2200      	movs	r2, #0
 8005fee:	eeb0 0a47 	vmov.f32	s0, s14
 8005ff2:	eef0 0a67 	vmov.f32	s1, s15
 8005ff6:	f000 ff13 	bl	8006e20 <scaraInitScurve>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
					for ( uint8_t i = 0; i < 4; i++) {
 8006000:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 8006004:	3301      	adds	r3, #1
 8006006:	f887 3176 	strb.w	r3, [r7, #374]	; 0x176
 800600a:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 800600e:	2b03      	cmp	r3, #3
 8006010:	d9bf      	bls.n	8005f92 <scaraInitDuty+0x13b2>
											q[i], DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
					}
					myDUTY.time_total = 0;
 8006012:	4b69      	ldr	r3, [pc, #420]	; (80061b8 <scaraInitDuty+0x15d8>)
 8006014:	f603 1248 	addw	r2, r3, #2376	; 0x948
 8006018:	f04f 0300 	mov.w	r3, #0
 800601c:	f04f 0400 	mov.w	r4, #0
 8006020:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 8006024:	2300      	movs	r3, #0
 8006026:	f887 3175 	strb.w	r3, [r7, #373]	; 0x175
 800602a:	e02d      	b.n	8006088 <scaraInitDuty+0x14a8>
						if ( myDUTY.joint.trajectory[i].scurve.Tf > myDUTY.time_total) {
 800602c:	f897 3175 	ldrb.w	r3, [r7, #373]	; 0x175
 8006030:	4a61      	ldr	r2, [pc, #388]	; (80061b8 <scaraInitDuty+0x15d8>)
 8006032:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8006036:	fb01 f303 	mul.w	r3, r1, r3
 800603a:	4413      	add	r3, r2
 800603c:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8006040:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006044:	4b5c      	ldr	r3, [pc, #368]	; (80061b8 <scaraInitDuty+0x15d8>)
 8006046:	f603 1348 	addw	r3, r3, #2376	; 0x948
 800604a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800604e:	461a      	mov	r2, r3
 8006050:	4623      	mov	r3, r4
 8006052:	f7fa fd71 	bl	8000b38 <__aeabi_dcmpgt>
 8006056:	4603      	mov	r3, r0
 8006058:	2b00      	cmp	r3, #0
 800605a:	d010      	beq.n	800607e <scaraInitDuty+0x149e>
							myDUTY.time_total = myDUTY.joint.trajectory[i].scurve.Tf;
 800605c:	f897 3175 	ldrb.w	r3, [r7, #373]	; 0x175
 8006060:	4a55      	ldr	r2, [pc, #340]	; (80061b8 <scaraInitDuty+0x15d8>)
 8006062:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8006066:	fb01 f303 	mul.w	r3, r1, r3
 800606a:	4413      	add	r3, r2
 800606c:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8006070:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006074:	4a50      	ldr	r2, [pc, #320]	; (80061b8 <scaraInitDuty+0x15d8>)
 8006076:	f602 1248 	addw	r2, r2, #2376	; 0x948
 800607a:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 800607e:	f897 3175 	ldrb.w	r3, [r7, #373]	; 0x175
 8006082:	3301      	adds	r3, #1
 8006084:	f887 3175 	strb.w	r3, [r7, #373]	; 0x175
 8006088:	f897 3175 	ldrb.w	r3, [r7, #373]	; 0x175
 800608c:	2b03      	cmp	r3, #3
 800608e:	d9cd      	bls.n	800602c <scaraInitDuty+0x144c>
						}
					}
					for ( uint8_t i = 0; i < 4; i++) {
 8006090:	2300      	movs	r3, #0
 8006092:	f887 3174 	strb.w	r3, [r7, #372]	; 0x174
 8006096:	e04c      	b.n	8006132 <scaraInitDuty+0x1552>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8006098:	f897 3174 	ldrb.w	r3, [r7, #372]	; 0x174
 800609c:	4a46      	ldr	r2, [pc, #280]	; (80061b8 <scaraInitDuty+0x15d8>)
 800609e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80060a2:	fb01 f303 	mul.w	r3, r1, r3
 80060a6:	4413      	add	r3, r2
 80060a8:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 80060ac:	2201      	movs	r2, #1
 80060ae:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].scurve.Tf = myDUTY.time_total;
 80060b0:	f897 2174 	ldrb.w	r2, [r7, #372]	; 0x174
 80060b4:	4b40      	ldr	r3, [pc, #256]	; (80061b8 <scaraInitDuty+0x15d8>)
 80060b6:	f603 1348 	addw	r3, r3, #2376	; 0x948
 80060ba:	e9d3 3400 	ldrd	r3, r4, [r3]
 80060be:	493e      	ldr	r1, [pc, #248]	; (80061b8 <scaraInitDuty+0x15d8>)
 80060c0:	f44f 70ac 	mov.w	r0, #344	; 0x158
 80060c4:	fb00 f202 	mul.w	r2, r0, r2
 80060c8:	440a      	add	r2, r1
 80060ca:	f502 6296 	add.w	r2, r2, #1200	; 0x4b0
 80060ce:	e9c2 3400 	strd	r3, r4, [r2]
						status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 80060d2:	f897 3174 	ldrb.w	r3, [r7, #372]	; 0x174
 80060d6:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80060da:	fb02 f303 	mul.w	r3, r2, r3
 80060de:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 80060e2:	4a35      	ldr	r2, [pc, #212]	; (80061b8 <scaraInitDuty+0x15d8>)
 80060e4:	1898      	adds	r0, r3, r2
 80060e6:	f897 3174 	ldrb.w	r3, [r7, #372]	; 0x174
 80060ea:	4a34      	ldr	r2, [pc, #208]	; (80061bc <scaraInitDuty+0x15dc>)
 80060ec:	5cd1      	ldrb	r1, [r2, r3]
 80060ee:	f897 3174 	ldrb.w	r3, [r7, #372]	; 0x174
 80060f2:	463a      	mov	r2, r7
 80060f4:	00db      	lsls	r3, r3, #3
 80060f6:	4413      	add	r3, r2
 80060f8:	ed93 7b00 	vldr	d7, [r3]
 80060fc:	ed97 6bd6 	vldr	d6, [r7, #856]	; 0x358
 8006100:	ed97 5bd8 	vldr	d5, [r7, #864]	; 0x360
 8006104:	eeb0 2a45 	vmov.f32	s4, s10
 8006108:	eef0 2a65 	vmov.f32	s5, s11
 800610c:	eeb0 1a46 	vmov.f32	s2, s12
 8006110:	eef0 1a66 	vmov.f32	s3, s13
 8006114:	2201      	movs	r2, #1
 8006116:	eeb0 0a47 	vmov.f32	s0, s14
 800611a:	eef0 0a67 	vmov.f32	s1, s15
 800611e:	f000 fe7f 	bl	8006e20 <scaraInitScurve>
 8006122:	4603      	mov	r3, r0
 8006124:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
					for ( uint8_t i = 0; i < 4; i++) {
 8006128:	f897 3174 	ldrb.w	r3, [r7, #372]	; 0x174
 800612c:	3301      	adds	r3, #1
 800612e:	f887 3174 	strb.w	r3, [r7, #372]	; 0x174
 8006132:	f897 3174 	ldrb.w	r3, [r7, #372]	; 0x174
 8006136:	2b03      	cmp	r3, #3
 8006138:	d9ae      	bls.n	8006098 <scaraInitDuty+0x14b8>
 800613a:	e007      	b.n	800614c <scaraInitDuty+0x156c>
											q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					}

				} else {
					return SCARA_STATUS_ERROR_MODE_INIT;
 800613c:	2308      	movs	r3, #8
 800613e:	e033      	b.n	80061a8 <scaraInitDuty+0x15c8>
				}

			} else {
				return SCARA_STATUS_ERROR_TRAJECTORY;
 8006140:	2305      	movs	r3, #5
 8006142:	e031      	b.n	80061a8 <scaraInitDuty+0x15c8>
			}

		} else {
			return SCARA_STATUS_ERROR_JOINT;
 8006144:	2304      	movs	r3, #4
 8006146:	e02f      	b.n	80061a8 <scaraInitDuty+0x15c8>
		}

	} else {
		return SCARA_STATUS_ERROR_SPACE;
 8006148:	2302      	movs	r3, #2
 800614a:	e02d      	b.n	80061a8 <scaraInitDuty+0x15c8>
	}

	// Reset time and distance
	positionCurrent.t = 0;
 800614c:	4a1c      	ldr	r2, [pc, #112]	; (80061c0 <scaraInitDuty+0x15e0>)
 800614e:	f04f 0300 	mov.w	r3, #0
 8006152:	f04f 0400 	mov.w	r4, #0
 8006156:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	positionCurrent.total_time = myDUTY.time_total;
 800615a:	4b17      	ldr	r3, [pc, #92]	; (80061b8 <scaraInitDuty+0x15d8>)
 800615c:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8006160:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006164:	4a16      	ldr	r2, [pc, #88]	; (80061c0 <scaraInitDuty+0x15e0>)
 8006166:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	positionNext.t = 0;
 800616a:	4a16      	ldr	r2, [pc, #88]	; (80061c4 <scaraInitDuty+0x15e4>)
 800616c:	f04f 0300 	mov.w	r3, #0
 8006170:	f04f 0400 	mov.w	r4, #0
 8006174:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	positionNext.total_time = myDUTY.time_total;
 8006178:	4b0f      	ldr	r3, [pc, #60]	; (80061b8 <scaraInitDuty+0x15d8>)
 800617a:	f603 1348 	addw	r3, r3, #2376	; 0x948
 800617e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006182:	4a10      	ldr	r2, [pc, #64]	; (80061c4 <scaraInitDuty+0x15e4>)
 8006184:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	positionTrue.t = 0;
 8006188:	4a0f      	ldr	r2, [pc, #60]	; (80061c8 <scaraInitDuty+0x15e8>)
 800618a:	f04f 0300 	mov.w	r3, #0
 800618e:	f04f 0400 	mov.w	r4, #0
 8006192:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	positionTrue.total_time = myDUTY.time_total;
 8006196:	4b08      	ldr	r3, [pc, #32]	; (80061b8 <scaraInitDuty+0x15d8>)
 8006198:	f603 1348 	addw	r3, r3, #2376	; 0x948
 800619c:	e9d3 3400 	ldrd	r3, r4, [r3]
 80061a0:	4a09      	ldr	r2, [pc, #36]	; (80061c8 <scaraInitDuty+0x15e8>)
 80061a2:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

	return SCARA_STATUS_OK;
 80061a6:	2300      	movs	r3, #0
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	f507 77d8 	add.w	r7, r7, #432	; 0x1b0
 80061ae:	46bd      	mov	sp, r7
 80061b0:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80061b4:	b004      	add	sp, #16
 80061b6:	4770      	bx	lr
 80061b8:	200053d0 	.word	0x200053d0
 80061bc:	20000ca8 	.word	0x20000ca8
 80061c0:	20005e90 	.word	0x20005e90
 80061c4:	20006000 	.word	0x20006000
 80061c8:	20005f48 	.word	0x20005f48

080061cc <scaraInitLine>:

/* Compute straight line path parameters */
SCARA_StatusTypeDef	scaraInitLine		(Path_Line_TypeDef *line,
										SCARA_PositionTypeDef start,
										SCARA_PositionTypeDef end) {
 80061cc:	b082      	sub	sp, #8
 80061ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061d0:	b0af      	sub	sp, #188	; 0xbc
 80061d2:	af2c      	add	r7, sp, #176	; 0xb0
 80061d4:	6078      	str	r0, [r7, #4]
 80061d6:	f107 0120 	add.w	r1, r7, #32
 80061da:	e881 000c 	stmia.w	r1, {r2, r3}
	// Check limit workspace
	if ( FALSE ==  kinematicInverse(&end, start)) {
 80061de:	f107 04d8 	add.w	r4, r7, #216	; 0xd8
 80061e2:	4668      	mov	r0, sp
 80061e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80061e8:	22b0      	movs	r2, #176	; 0xb0
 80061ea:	4619      	mov	r1, r3
 80061ec:	f00f fc98 	bl	8015b20 <memcpy>
 80061f0:	f107 0320 	add.w	r3, r7, #32
 80061f4:	cb0c      	ldmia	r3, {r2, r3}
 80061f6:	4620      	mov	r0, r4
 80061f8:	f7fd fa16 	bl	8003628 <kinematicInverse>
 80061fc:	4603      	mov	r3, r0
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d101      	bne.n	8006206 <scaraInitLine+0x3a>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8006202:	2307      	movs	r3, #7
 8006204:	e09e      	b.n	8006344 <scaraInitLine+0x178>
	}
	// Init line params
	line->x1 = end.x;
 8006206:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 800620a:	687a      	ldr	r2, [r7, #4]
 800620c:	e9c2 3402 	strd	r3, r4, [r2, #8]
	line->y1 = end.y;
 8006210:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	e9c2 3406 	strd	r3, r4, [r2, #24]
	line->z1 = end.z;
 800621a:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	line->x0 = start.x;
 8006224:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	e9c2 3400 	strd	r3, r4, [r2]
	line->y0 = start.y;
 800622e:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	e9c2 3404 	strd	r3, r4, [r2, #16]
	line->z0 = start.z;
 8006238:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	e9c2 3408 	strd	r3, r4, [r2, #32]
	line->denta_x = end.x  -  start.x;
 8006242:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8006246:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 800624a:	461a      	mov	r2, r3
 800624c:	4623      	mov	r3, r4
 800624e:	f7fa f82b 	bl	80002a8 <__aeabi_dsub>
 8006252:	4603      	mov	r3, r0
 8006254:	460c      	mov	r4, r1
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	line->denta_y = end.y  -  start.y;
 800625c:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8006260:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8006264:	461a      	mov	r2, r3
 8006266:	4623      	mov	r3, r4
 8006268:	f7fa f81e 	bl	80002a8 <__aeabi_dsub>
 800626c:	4603      	mov	r3, r0
 800626e:	460c      	mov	r4, r1
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	line->denta_z = end.z  -  start.z;
 8006276:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 800627a:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800627e:	461a      	mov	r2, r3
 8006280:	4623      	mov	r3, r4
 8006282:	f7fa f811 	bl	80002a8 <__aeabi_dsub>
 8006286:	4603      	mov	r3, r0
 8006288:	460c      	mov	r4, r1
 800628a:	687a      	ldr	r2, [r7, #4]
 800628c:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	line->total_s = sqrt((line->denta_x)*(line->denta_x)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 800629c:	461a      	mov	r2, r3
 800629e:	4623      	mov	r3, r4
 80062a0:	f7fa f9ba 	bl	8000618 <__aeabi_dmul>
 80062a4:	4603      	mov	r3, r0
 80062a6:	460c      	mov	r4, r1
 80062a8:	461d      	mov	r5, r3
 80062aa:	4626      	mov	r6, r4
			       +(line->denta_y)*(line->denta_y)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 80062b8:	461a      	mov	r2, r3
 80062ba:	4623      	mov	r3, r4
 80062bc:	f7fa f9ac 	bl	8000618 <__aeabi_dmul>
 80062c0:	4603      	mov	r3, r0
 80062c2:	460c      	mov	r4, r1
 80062c4:	461a      	mov	r2, r3
 80062c6:	4623      	mov	r3, r4
 80062c8:	4628      	mov	r0, r5
 80062ca:	4631      	mov	r1, r6
 80062cc:	f7f9 ffee 	bl	80002ac <__adddf3>
 80062d0:	4603      	mov	r3, r0
 80062d2:	460c      	mov	r4, r1
 80062d4:	461d      	mov	r5, r3
 80062d6:	4626      	mov	r6, r4
				   +(line->denta_z)*(line->denta_z));
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	e9d3 3410 	ldrd	r3, r4, [r3, #64]	; 0x40
 80062e4:	461a      	mov	r2, r3
 80062e6:	4623      	mov	r3, r4
 80062e8:	f7fa f996 	bl	8000618 <__aeabi_dmul>
 80062ec:	4603      	mov	r3, r0
 80062ee:	460c      	mov	r4, r1
	line->total_s = sqrt((line->denta_x)*(line->denta_x)
 80062f0:	461a      	mov	r2, r3
 80062f2:	4623      	mov	r3, r4
 80062f4:	4628      	mov	r0, r5
 80062f6:	4631      	mov	r1, r6
 80062f8:	f7f9 ffd8 	bl	80002ac <__adddf3>
 80062fc:	4603      	mov	r3, r0
 80062fe:	460c      	mov	r4, r1
 8006300:	ec44 3b17 	vmov	d7, r3, r4
 8006304:	eeb0 0a47 	vmov.f32	s0, s14
 8006308:	eef0 0a67 	vmov.f32	s1, s15
 800630c:	f013 ff52 	bl	801a1b4 <sqrt>
 8006310:	eeb0 7a40 	vmov.f32	s14, s0
 8006314:	eef0 7a60 	vmov.f32	s15, s1
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
	line->x_current = line->x0;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	line->y_current = line->y0;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	line->z_current = line->z0;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68

	return SCARA_STATUS_OK;
 8006342:	2300      	movs	r3, #0
}
 8006344:	4618      	mov	r0, r3
 8006346:	370c      	adds	r7, #12
 8006348:	46bd      	mov	sp, r7
 800634a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800634e:	b002      	add	sp, #8
 8006350:	4770      	bx	lr
 8006352:	0000      	movs	r0, r0
 8006354:	0000      	movs	r0, r0
	...

08006358 <scaraInitCircle>:
/* Compute circular path parameters */
SCARA_StatusTypeDef	scaraInitCircle		(Path_Circle_TypeDef *circle,
										SCARA_PositionTypeDef start,
										SCARA_PositionTypeDef end,
										SCARA_PositionTypeDef center,
										int32_t dir){
 8006358:	b082      	sub	sp, #8
 800635a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800635e:	b0c1      	sub	sp, #260	; 0x104
 8006360:	af2c      	add	r7, sp, #176	; 0xb0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8006368:	e881 000c 	stmia.w	r1, {r2, r3}
	// Check limit workspace
	if ( FALSE == kinematicInverse(&end, start) ) {
 800636c:	f507 7694 	add.w	r6, r7, #296	; 0x128
 8006370:	4668      	mov	r0, sp
 8006372:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006376:	22b0      	movs	r2, #176	; 0xb0
 8006378:	4619      	mov	r1, r3
 800637a:	f00f fbd1 	bl	8015b20 <memcpy>
 800637e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006382:	cb0c      	ldmia	r3, {r2, r3}
 8006384:	4630      	mov	r0, r6
 8006386:	f7fd f94f 	bl	8003628 <kinematicInverse>
 800638a:	4603      	mov	r3, r0
 800638c:	2b00      	cmp	r3, #0
 800638e:	d101      	bne.n	8006394 <scaraInitCircle+0x3c>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8006390:	2307      	movs	r3, #7
 8006392:	e146      	b.n	8006622 <scaraInitCircle+0x2ca>
	}

	if( 1 != dir && -1 != dir) {
 8006394:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006398:	2b01      	cmp	r3, #1
 800639a:	d006      	beq.n	80063aa <scaraInitCircle+0x52>
 800639c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80063a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063a4:	d001      	beq.n	80063aa <scaraInitCircle+0x52>
		return SCARA_STATUS_ERROR_PARA;// error direction param !!!
 80063a6:	2306      	movs	r3, #6
 80063a8:	e13b      	b.n	8006622 <scaraInitCircle+0x2ca>
	}

	double v_x_start, v_y_start, v_x_stop, v_y_stop;
	double r1, r2, angle_start, angle_stop, delta_angle;
	v_x_start = start.x - center.x;
 80063aa:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80063ae:	e9d7 238a 	ldrd	r2, r3, [r7, #552]	; 0x228
 80063b2:	f7f9 ff79 	bl	80002a8 <__aeabi_dsub>
 80063b6:	4602      	mov	r2, r0
 80063b8:	460b      	mov	r3, r1
 80063ba:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	v_y_start = start.y - center.y;
 80063be:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80063c2:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	; 0x230
 80063c6:	f7f9 ff6f 	bl	80002a8 <__aeabi_dsub>
 80063ca:	4602      	mov	r2, r0
 80063cc:	460b      	mov	r3, r1
 80063ce:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	v_x_stop  = end.x  - center.x;
 80063d2:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 80063d6:	e9d7 238a 	ldrd	r2, r3, [r7, #552]	; 0x228
 80063da:	f7f9 ff65 	bl	80002a8 <__aeabi_dsub>
 80063de:	4602      	mov	r2, r0
 80063e0:	460b      	mov	r3, r1
 80063e2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	v_y_stop  = end.y  - center.y;
 80063e6:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 80063ea:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	; 0x230
 80063ee:	f7f9 ff5b 	bl	80002a8 <__aeabi_dsub>
 80063f2:	4602      	mov	r2, r0
 80063f4:	460b      	mov	r3, r1
 80063f6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	r1 = sqrt(v_x_start*v_x_start + v_y_start*v_y_start);
 80063fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80063fe:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006402:	f7fa f909 	bl	8000618 <__aeabi_dmul>
 8006406:	4602      	mov	r2, r0
 8006408:	460b      	mov	r3, r1
 800640a:	4690      	mov	r8, r2
 800640c:	4699      	mov	r9, r3
 800640e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006412:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006416:	f7fa f8ff 	bl	8000618 <__aeabi_dmul>
 800641a:	4602      	mov	r2, r0
 800641c:	460b      	mov	r3, r1
 800641e:	4640      	mov	r0, r8
 8006420:	4649      	mov	r1, r9
 8006422:	f7f9 ff43 	bl	80002ac <__adddf3>
 8006426:	4602      	mov	r2, r0
 8006428:	460b      	mov	r3, r1
 800642a:	ec43 2b17 	vmov	d7, r2, r3
 800642e:	eeb0 0a47 	vmov.f32	s0, s14
 8006432:	eef0 0a67 	vmov.f32	s1, s15
 8006436:	f013 febd 	bl	801a1b4 <sqrt>
 800643a:	ed87 0b08 	vstr	d0, [r7, #32]
	r2 = sqrt(v_x_stop*v_x_stop + v_y_stop*v_y_stop);
 800643e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006442:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8006446:	f7fa f8e7 	bl	8000618 <__aeabi_dmul>
 800644a:	4602      	mov	r2, r0
 800644c:	460b      	mov	r3, r1
 800644e:	4690      	mov	r8, r2
 8006450:	4699      	mov	r9, r3
 8006452:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006456:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800645a:	f7fa f8dd 	bl	8000618 <__aeabi_dmul>
 800645e:	4602      	mov	r2, r0
 8006460:	460b      	mov	r3, r1
 8006462:	4640      	mov	r0, r8
 8006464:	4649      	mov	r1, r9
 8006466:	f7f9 ff21 	bl	80002ac <__adddf3>
 800646a:	4602      	mov	r2, r0
 800646c:	460b      	mov	r3, r1
 800646e:	ec43 2b17 	vmov	d7, r2, r3
 8006472:	eeb0 0a47 	vmov.f32	s0, s14
 8006476:	eef0 0a67 	vmov.f32	s1, s15
 800647a:	f013 fe9b 	bl	801a1b4 <sqrt>
 800647e:	ed87 0b06 	vstr	d0, [r7, #24]

	if( 1.0 < fabs(r1 - r2)) {
 8006482:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006486:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800648a:	f7f9 ff0d 	bl	80002a8 <__aeabi_dsub>
 800648e:	4602      	mov	r2, r0
 8006490:	460b      	mov	r3, r1
 8006492:	4614      	mov	r4, r2
 8006494:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8006498:	f04f 0200 	mov.w	r2, #0
 800649c:	4b68      	ldr	r3, [pc, #416]	; (8006640 <scaraInitCircle+0x2e8>)
 800649e:	4620      	mov	r0, r4
 80064a0:	4629      	mov	r1, r5
 80064a2:	f7fa fb49 	bl	8000b38 <__aeabi_dcmpgt>
 80064a6:	4603      	mov	r3, r0
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d001      	beq.n	80064b0 <scaraInitCircle+0x158>
		return SCARA_STATUS_ERROR_PARA; //start & stop are not in a circle together !!
 80064ac:	2306      	movs	r3, #6
 80064ae:	e0b8      	b.n	8006622 <scaraInitCircle+0x2ca>
	}

	if (r1 < 0.1 || r2 < 0.1) {
 80064b0:	a35f      	add	r3, pc, #380	; (adr r3, 8006630 <scaraInitCircle+0x2d8>)
 80064b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80064ba:	f7fa fb1f 	bl	8000afc <__aeabi_dcmplt>
 80064be:	4603      	mov	r3, r0
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d109      	bne.n	80064d8 <scaraInitCircle+0x180>
 80064c4:	a35a      	add	r3, pc, #360	; (adr r3, 8006630 <scaraInitCircle+0x2d8>)
 80064c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ca:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80064ce:	f7fa fb15 	bl	8000afc <__aeabi_dcmplt>
 80064d2:	4603      	mov	r3, r0
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d001      	beq.n	80064dc <scaraInitCircle+0x184>
		return SCARA_STATUS_ERROR_PARA; //start and center almost in the same phace, radius = 0 !!
 80064d8:	2306      	movs	r3, #6
 80064da:	e0a2      	b.n	8006622 <scaraInitCircle+0x2ca>
	}

	angle_start = atan2(v_y_start, v_x_start);
 80064dc:	ed97 1b10 	vldr	d1, [r7, #64]	; 0x40
 80064e0:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 80064e4:	f013 fe64 	bl	801a1b0 <atan2>
 80064e8:	ed87 0b04 	vstr	d0, [r7, #16]
	angle_stop  = atan2(v_y_stop, v_x_stop);
 80064ec:	ed97 1b0c 	vldr	d1, [r7, #48]	; 0x30
 80064f0:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 80064f4:	f013 fe5c 	bl	801a1b0 <atan2>
 80064f8:	ed87 0b02 	vstr	d0, [r7, #8]
	delta_angle = angle_stop - angle_start;
 80064fc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006500:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006504:	f7f9 fed0 	bl	80002a8 <__aeabi_dsub>
 8006508:	4603      	mov	r3, r0
 800650a:	460c      	mov	r4, r1
 800650c:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48

	if ( 0 > delta_angle) {
 8006510:	f04f 0200 	mov.w	r2, #0
 8006514:	f04f 0300 	mov.w	r3, #0
 8006518:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800651c:	f7fa faee 	bl	8000afc <__aeabi_dcmplt>
 8006520:	4603      	mov	r3, r0
 8006522:	2b00      	cmp	r3, #0
 8006524:	d00a      	beq.n	800653c <scaraInitCircle+0x1e4>
		delta_angle += 2*PI;
 8006526:	a344      	add	r3, pc, #272	; (adr r3, 8006638 <scaraInitCircle+0x2e0>)
 8006528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800652c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006530:	f7f9 febc 	bl	80002ac <__adddf3>
 8006534:	4603      	mov	r3, r0
 8006536:	460c      	mov	r4, r1
 8006538:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
	} // atan2 range : -PI --> PI

	if ( 0 > dir) {
 800653c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006540:	2b00      	cmp	r3, #0
 8006542:	da0a      	bge.n	800655a <scaraInitCircle+0x202>
		delta_angle = 2*PI - delta_angle;
 8006544:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006548:	a13b      	add	r1, pc, #236	; (adr r1, 8006638 <scaraInitCircle+0x2e0>)
 800654a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800654e:	f7f9 feab 	bl	80002a8 <__aeabi_dsub>
 8006552:	4603      	mov	r3, r0
 8006554:	460c      	mov	r4, r1
 8006556:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
	}
	// Init circle params
	circle->dir = dir;
 800655a:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800655e:	b25a      	sxtb	r2, r3
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	701a      	strb	r2, [r3, #0]
	circle->radius = r1;
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800656a:	e9c2 3402 	strd	r3, r4, [r2, #8]
	circle->angle_start = angle_start;
 800656e:	687a      	ldr	r2, [r7, #4]
 8006570:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8006574:	e9c2 3404 	strd	r3, r4, [r2, #16]
	circle->angle_stop  = angle_stop;
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800657e:	e9c2 3406 	strd	r3, r4, [r2, #24]
	circle->total_angle = delta_angle;
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8006588:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	circle->total_s = delta_angle*r1;
 800658c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006590:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006594:	f7fa f840 	bl	8000618 <__aeabi_dmul>
 8006598:	4603      	mov	r3, r0
 800659a:	460c      	mov	r4, r1
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
	circle->x0 = start.x;
 80065a2:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	e9c2 3408 	strd	r3, r4, [r2, #32]
	circle->y0 = start.y;
 80065ac:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	circle->x1 = end.x;
 80065b6:	e9d7 345c 	ldrd	r3, r4, [r7, #368]	; 0x170
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	circle->y1 = end.y;
 80065c0:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	circle->xi = center.x;
 80065ca:	e9d7 348a 	ldrd	r3, r4, [r7, #552]	; 0x228
 80065ce:	687a      	ldr	r2, [r7, #4]
 80065d0:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	circle->yi = center.y;
 80065d4:	e9d7 348c 	ldrd	r3, r4, [r7, #560]	; 0x230
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	circle->z0 = start.z;
 80065de:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	circle->z1 = start.z;
 80065e8:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	circle->zi = start.z;
 80065f2:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	circle->x_current = circle->x0;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	circle->y_current = circle->y0;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
	circle->z_current = circle->z0;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88

	return SCARA_STATUS_OK;
 8006620:	2300      	movs	r3, #0
}
 8006622:	4618      	mov	r0, r3
 8006624:	3754      	adds	r7, #84	; 0x54
 8006626:	46bd      	mov	sp, r7
 8006628:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800662c:	b002      	add	sp, #8
 800662e:	4770      	bx	lr
 8006630:	9999999a 	.word	0x9999999a
 8006634:	3fb99999 	.word	0x3fb99999
 8006638:	60000000 	.word	0x60000000
 800663c:	401921fb 	.word	0x401921fb
 8006640:	3ff00000 	.word	0x3ff00000
 8006644:	00000000 	.word	0x00000000

08006648 <scaraInitLSPB>:
SCARA_StatusTypeDef	scaraInitLSPB		(Trajectory_LSPB_TypeDef *lspb,
										Trajectory_TargetTypeDef target,
										double total_s,
										ModeInitTypeDef modeinit,
										double v_factor,
										double a_factor) {
 8006648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800664c:	b0ad      	sub	sp, #180	; 0xb4
 800664e:	af00      	add	r7, sp, #0
 8006650:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006652:	460b      	mov	r3, r1
 8006654:	ed87 0b08 	vstr	d0, [r7, #32]
 8006658:	ed87 1b06 	vstr	d1, [r7, #24]
 800665c:	ed87 2b04 	vstr	d2, [r7, #16]
 8006660:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006664:	4613      	mov	r3, r2
 8006666:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	 double v_design, a_design, v_lim, q0, q1, v0, v1, ta, td, tf;
	 uint32_t	no_sample;
	 int8_t	dir;

	 if ( TRAJECTORY_3D == target) {
 800666a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800666e:	2b04      	cmp	r3, #4
 8006670:	d118      	bne.n	80066a4 <scaraInitLSPB+0x5c>
		 v_design = V_DESIGN_3D*v_factor;
 8006672:	f20f 7380 	addw	r3, pc, #1920	; 0x780
 8006676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800667a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800667e:	f7f9 ffcb 	bl	8000618 <__aeabi_dmul>
 8006682:	4603      	mov	r3, r0
 8006684:	460c      	mov	r4, r1
 8006686:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_3D*a_factor;
 800668a:	f20f 7368 	addw	r3, pc, #1896	; 0x768
 800668e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006692:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006696:	f7f9 ffbf 	bl	8000618 <__aeabi_dmul>
 800669a:	4603      	mov	r3, r0
 800669c:	460c      	mov	r4, r1
 800669e:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 80066a2:	e092      	b.n	80067ca <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_ROLL == target) {
 80066a4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80066a8:	2b05      	cmp	r3, #5
 80066aa:	d118      	bne.n	80066de <scaraInitLSPB+0x96>
		 v_design = V_DESIGN_ROLL*v_factor;
 80066ac:	f20f 734c 	addw	r3, pc, #1868	; 0x74c
 80066b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80066b8:	f7f9 ffae 	bl	8000618 <__aeabi_dmul>
 80066bc:	4603      	mov	r3, r0
 80066be:	460c      	mov	r4, r1
 80066c0:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_ROLL*a_factor;
 80066c4:	f20f 7334 	addw	r3, pc, #1844	; 0x734
 80066c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066cc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80066d0:	f7f9 ffa2 	bl	8000618 <__aeabi_dmul>
 80066d4:	4603      	mov	r3, r0
 80066d6:	460c      	mov	r4, r1
 80066d8:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 80066dc:	e075      	b.n	80067ca <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J0 == target) {
 80066de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d118      	bne.n	8006718 <scaraInitLSPB+0xd0>
		 v_design = V_DESIGN_J0*v_factor;
 80066e6:	f20f 7314 	addw	r3, pc, #1812	; 0x714
 80066ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ee:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80066f2:	f7f9 ff91 	bl	8000618 <__aeabi_dmul>
 80066f6:	4603      	mov	r3, r0
 80066f8:	460c      	mov	r4, r1
 80066fa:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J0*a_factor;
 80066fe:	f20f 63fc 	addw	r3, pc, #1788	; 0x6fc
 8006702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006706:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800670a:	f7f9 ff85 	bl	8000618 <__aeabi_dmul>
 800670e:	4603      	mov	r3, r0
 8006710:	460c      	mov	r4, r1
 8006712:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 8006716:	e058      	b.n	80067ca <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J1 == target) {
 8006718:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800671c:	2b01      	cmp	r3, #1
 800671e:	d118      	bne.n	8006752 <scaraInitLSPB+0x10a>
		 v_design = V_DESIGN_J1*v_factor;
 8006720:	f20f 63d8 	addw	r3, pc, #1752	; 0x6d8
 8006724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006728:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800672c:	f7f9 ff74 	bl	8000618 <__aeabi_dmul>
 8006730:	4603      	mov	r3, r0
 8006732:	460c      	mov	r4, r1
 8006734:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J1*a_factor;
 8006738:	f20f 63c0 	addw	r3, pc, #1728	; 0x6c0
 800673c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006740:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006744:	f7f9 ff68 	bl	8000618 <__aeabi_dmul>
 8006748:	4603      	mov	r3, r0
 800674a:	460c      	mov	r4, r1
 800674c:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 8006750:	e03b      	b.n	80067ca <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J2 == target) {
 8006752:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006756:	2b02      	cmp	r3, #2
 8006758:	d118      	bne.n	800678c <scaraInitLSPB+0x144>
		 v_design = V_DESIGN_J2*v_factor;
 800675a:	f20f 6398 	addw	r3, pc, #1688	; 0x698
 800675e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006762:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006766:	f7f9 ff57 	bl	8000618 <__aeabi_dmul>
 800676a:	4603      	mov	r3, r0
 800676c:	460c      	mov	r4, r1
 800676e:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J2*a_factor;
 8006772:	f20f 6380 	addw	r3, pc, #1664	; 0x680
 8006776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800677a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800677e:	f7f9 ff4b 	bl	8000618 <__aeabi_dmul>
 8006782:	4603      	mov	r3, r0
 8006784:	460c      	mov	r4, r1
 8006786:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 800678a:	e01e      	b.n	80067ca <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J3 == target) {
 800678c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006790:	2b03      	cmp	r3, #3
 8006792:	d118      	bne.n	80067c6 <scaraInitLSPB+0x17e>
		 v_design = V_DESIGN_J3*v_factor;
 8006794:	f20f 636c 	addw	r3, pc, #1644	; 0x66c
 8006798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800679c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80067a0:	f7f9 ff3a 	bl	8000618 <__aeabi_dmul>
 80067a4:	4603      	mov	r3, r0
 80067a6:	460c      	mov	r4, r1
 80067a8:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J3*a_factor;
 80067ac:	f20f 6354 	addw	r3, pc, #1620	; 0x654
 80067b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80067b8:	f7f9 ff2e 	bl	8000618 <__aeabi_dmul>
 80067bc:	4603      	mov	r3, r0
 80067be:	460c      	mov	r4, r1
 80067c0:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 80067c4:	e001      	b.n	80067ca <scaraInitLSPB+0x182>
	 } else {
		 return SCARA_STATUS_ERROR_PARA;
 80067c6:	2306      	movs	r3, #6
 80067c8:	e309      	b.n	8006dde <scaraInitLSPB+0x796>
	 }

	 q0 = 0;
 80067ca:	f04f 0300 	mov.w	r3, #0
 80067ce:	f04f 0400 	mov.w	r4, #0
 80067d2:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	 q1 = total_s;
 80067d6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80067da:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
	 v0 = 0;
 80067de:	f04f 0300 	mov.w	r3, #0
 80067e2:	f04f 0400 	mov.w	r4, #0
 80067e6:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	 v1 = 0;
 80067ea:	f04f 0300 	mov.w	r3, #0
 80067ee:	f04f 0400 	mov.w	r4, #0
 80067f2:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50

	 if ( q0 <= q1) {
 80067f6:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80067fa:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80067fe:	f7fa f987 	bl	8000b10 <__aeabi_dcmple>
 8006802:	4603      	mov	r3, r0
 8006804:	2b00      	cmp	r3, #0
 8006806:	d003      	beq.n	8006810 <scaraInitLSPB+0x1c8>
		 dir = 1;
 8006808:	2301      	movs	r3, #1
 800680a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800680e:	e00c      	b.n	800682a <scaraInitLSPB+0x1e2>
	 } else {
		 dir = -1;
 8006810:	23ff      	movs	r3, #255	; 0xff
 8006812:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		 q1 = -q1;
 8006816:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800681a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800681e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006822:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006826:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	 }

	 if (DUTY_MODE_INIT_QVT == modeinit) {
 800682a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800682e:	2b01      	cmp	r3, #1
 8006830:	f040 80ad 	bne.w	800698e <scaraInitLSPB+0x346>
		 double v_lower, v_upper, tc_upper, a_upper;
		 tf = lspb->Tf;
 8006834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006836:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 800683a:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
		 // Avoid division by 0
		 if (tf > 0.001) {
 800683e:	f20f 53cc 	addw	r3, pc, #1484	; 0x5cc
 8006842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006846:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800684a:	f7fa f975 	bl	8000b38 <__aeabi_dcmpgt>
 800684e:	4603      	mov	r3, r0
 8006850:	2b00      	cmp	r3, #0
 8006852:	f000 8090 	beq.w	8006976 <scaraInitLSPB+0x32e>
			 v_lower 	= (q1 - q0) / tf;
 8006856:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800685a:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800685e:	f7f9 fd23 	bl	80002a8 <__aeabi_dsub>
 8006862:	4603      	mov	r3, r0
 8006864:	460c      	mov	r4, r1
 8006866:	4618      	mov	r0, r3
 8006868:	4621      	mov	r1, r4
 800686a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800686e:	f7f9 fffd 	bl	800086c <__aeabi_ddiv>
 8006872:	4603      	mov	r3, r0
 8006874:	460c      	mov	r4, r1
 8006876:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
			 v_upper 	= 2*(q1 - q0) / tf;
 800687a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800687e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8006882:	f7f9 fd11 	bl	80002a8 <__aeabi_dsub>
 8006886:	4603      	mov	r3, r0
 8006888:	460c      	mov	r4, r1
 800688a:	4618      	mov	r0, r3
 800688c:	4621      	mov	r1, r4
 800688e:	4602      	mov	r2, r0
 8006890:	460b      	mov	r3, r1
 8006892:	f7f9 fd0b 	bl	80002ac <__adddf3>
 8006896:	4603      	mov	r3, r0
 8006898:	460c      	mov	r4, r1
 800689a:	4618      	mov	r0, r3
 800689c:	4621      	mov	r1, r4
 800689e:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80068a2:	f7f9 ffe3 	bl	800086c <__aeabi_ddiv>
 80068a6:	4603      	mov	r3, r0
 80068a8:	460c      	mov	r4, r1
 80068aa:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

			 if ( v_design < v_lower) {
 80068ae:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80068b2:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80068b6:	f7fa f921 	bl	8000afc <__aeabi_dcmplt>
 80068ba:	4603      	mov	r3, r0
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d001      	beq.n	80068c4 <scaraInitLSPB+0x27c>
				 return SCARA_STATUS_ERROR_OVER_VELOC;
 80068c0:	2309      	movs	r3, #9
 80068c2:	e28c      	b.n	8006dde <scaraInitLSPB+0x796>
			 } else {
				 if ( v_upper <= v_design) {
 80068c4:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80068c8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80068cc:	f7fa f920 	bl	8000b10 <__aeabi_dcmple>
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d003      	beq.n	80068de <scaraInitLSPB+0x296>
					 v_design = v_upper;
 80068d6:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80068da:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
				 }
				 // Avoid division by 0
				 if (v_design > 0.0000001) {
 80068de:	f20f 5334 	addw	r3, pc, #1332	; 0x534
 80068e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e6:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80068ea:	f7fa f925 	bl	8000b38 <__aeabi_dcmpgt>
 80068ee:	4603      	mov	r3, r0
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d01a      	beq.n	800692a <scaraInitLSPB+0x2e2>
					 tc_upper	= tf - (q1 - q0)/v_design;
 80068f4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80068f8:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80068fc:	f7f9 fcd4 	bl	80002a8 <__aeabi_dsub>
 8006900:	4603      	mov	r3, r0
 8006902:	460c      	mov	r4, r1
 8006904:	4618      	mov	r0, r3
 8006906:	4621      	mov	r1, r4
 8006908:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800690c:	f7f9 ffae 	bl	800086c <__aeabi_ddiv>
 8006910:	4603      	mov	r3, r0
 8006912:	460c      	mov	r4, r1
 8006914:	461a      	mov	r2, r3
 8006916:	4623      	mov	r3, r4
 8006918:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800691c:	f7f9 fcc4 	bl	80002a8 <__aeabi_dsub>
 8006920:	4603      	mov	r3, r0
 8006922:	460c      	mov	r4, r1
 8006924:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
 8006928:	e00b      	b.n	8006942 <scaraInitLSPB+0x2fa>
				 } else {
					 tc_upper = tf / 2;
 800692a:	f04f 0200 	mov.w	r2, #0
 800692e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006932:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8006936:	f7f9 ff99 	bl	800086c <__aeabi_ddiv>
 800693a:	4603      	mov	r3, r0
 800693c:	460c      	mov	r4, r1
 800693e:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
				 }
				 a_upper	= v_design/tc_upper;
 8006942:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8006946:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800694a:	f7f9 ff8f 	bl	800086c <__aeabi_ddiv>
 800694e:	4603      	mov	r3, r0
 8006950:	460c      	mov	r4, r1
 8006952:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
				 if ( a_upper > a_design) {
 8006956:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800695a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800695e:	f7fa f8eb 	bl	8000b38 <__aeabi_dcmpgt>
 8006962:	4603      	mov	r3, r0
 8006964:	2b00      	cmp	r3, #0
 8006966:	d001      	beq.n	800696c <scaraInitLSPB+0x324>
					 return SCARA_STATUS_ERROR_OVER_ACCEL;
 8006968:	230a      	movs	r3, #10
 800696a:	e238      	b.n	8006dde <scaraInitLSPB+0x796>
				 } else {
					 a_design = a_upper;
 800696c:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8006970:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 8006974:	e00b      	b.n	800698e <scaraInitLSPB+0x346>
				 }
			 }
		 } else {
			 v_design = 0;
 8006976:	f04f 0300 	mov.w	r3, #0
 800697a:	f04f 0400 	mov.w	r4, #0
 800697e:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
			 a_design = 0;
 8006982:	f04f 0300 	mov.w	r3, #0
 8006986:	f04f 0400 	mov.w	r4, #0
 800698a:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
		 }
	}

	 // Check condition trapezoidal ---> triangle
	 // Avoid division by 0
	 if (a_design > 0.0000001 && v_design > 0.0000001) {
 800698e:	f20f 4384 	addw	r3, pc, #1156	; 0x484
 8006992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006996:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800699a:	f7fa f8cd 	bl	8000b38 <__aeabi_dcmpgt>
 800699e:	4603      	mov	r3, r0
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	f000 819c 	beq.w	8006cde <scaraInitLSPB+0x696>
 80069a6:	f20f 436c 	addw	r3, pc, #1132	; 0x46c
 80069aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ae:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80069b2:	f7fa f8c1 	bl	8000b38 <__aeabi_dcmpgt>
 80069b6:	4603      	mov	r3, r0
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	f000 8190 	beq.w	8006cde <scaraInitLSPB+0x696>
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 80069be:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80069c2:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80069c6:	f7f9 fc6f 	bl	80002a8 <__aeabi_dsub>
 80069ca:	4603      	mov	r3, r0
 80069cc:	460c      	mov	r4, r1
 80069ce:	461d      	mov	r5, r3
 80069d0:	f024 4600 	bic.w	r6, r4, #2147483648	; 0x80000000
 80069d4:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80069d8:	4628      	mov	r0, r5
 80069da:	4631      	mov	r1, r6
 80069dc:	f7f9 fe1c 	bl	8000618 <__aeabi_dmul>
 80069e0:	4603      	mov	r3, r0
 80069e2:	460c      	mov	r4, r1
 80069e4:	e9c7 3402 	strd	r3, r4, [r7, #8]
 80069e8:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80069ec:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80069f0:	f7f9 fe12 	bl	8000618 <__aeabi_dmul>
 80069f4:	4603      	mov	r3, r0
 80069f6:	460c      	mov	r4, r1
 80069f8:	e9c7 3400 	strd	r3, r4, [r7]
 80069fc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006a00:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006a04:	f7f9 fe08 	bl	8000618 <__aeabi_dmul>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	460c      	mov	r4, r1
 8006a0c:	461d      	mov	r5, r3
 8006a0e:	4626      	mov	r6, r4
 8006a10:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006a14:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006a18:	f7f9 fdfe 	bl	8000618 <__aeabi_dmul>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	460c      	mov	r4, r1
 8006a20:	461a      	mov	r2, r3
 8006a22:	4623      	mov	r3, r4
 8006a24:	4628      	mov	r0, r5
 8006a26:	4631      	mov	r1, r6
 8006a28:	f7f9 fc40 	bl	80002ac <__adddf3>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	460c      	mov	r4, r1
 8006a30:	4618      	mov	r0, r3
 8006a32:	4621      	mov	r1, r4
 8006a34:	f04f 0200 	mov.w	r2, #0
 8006a38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006a3c:	f7f9 ff16 	bl	800086c <__aeabi_ddiv>
 8006a40:	4603      	mov	r3, r0
 8006a42:	460c      	mov	r4, r1
 8006a44:	461a      	mov	r2, r3
 8006a46:	4623      	mov	r3, r4
 8006a48:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a4c:	f7f9 fc2c 	bl	80002a8 <__aeabi_dsub>
 8006a50:	4603      	mov	r3, r0
 8006a52:	460c      	mov	r4, r1
 8006a54:	461a      	mov	r2, r3
 8006a56:	4623      	mov	r3, r4
 8006a58:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006a5c:	f7fa f858 	bl	8000b10 <__aeabi_dcmple>
 8006a60:	4603      	mov	r3, r0
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d075      	beq.n	8006b52 <scaraInitLSPB+0x50a>
			 v_lim 	= sqrt(fabs(q1 - q0)*a_design + (v0*v0 + v1*v1)/2);
 8006a66:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8006a6a:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8006a6e:	f7f9 fc1b 	bl	80002a8 <__aeabi_dsub>
 8006a72:	4603      	mov	r3, r0
 8006a74:	460c      	mov	r4, r1
 8006a76:	469a      	mov	sl, r3
 8006a78:	f024 4b00 	bic.w	fp, r4, #2147483648	; 0x80000000
 8006a7c:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8006a80:	4650      	mov	r0, sl
 8006a82:	4659      	mov	r1, fp
 8006a84:	f7f9 fdc8 	bl	8000618 <__aeabi_dmul>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	460c      	mov	r4, r1
 8006a8c:	4625      	mov	r5, r4
 8006a8e:	461c      	mov	r4, r3
 8006a90:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006a94:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006a98:	f7f9 fdbe 	bl	8000618 <__aeabi_dmul>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	460b      	mov	r3, r1
 8006aa0:	4690      	mov	r8, r2
 8006aa2:	4699      	mov	r9, r3
 8006aa4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006aa8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006aac:	f7f9 fdb4 	bl	8000618 <__aeabi_dmul>
 8006ab0:	4602      	mov	r2, r0
 8006ab2:	460b      	mov	r3, r1
 8006ab4:	4640      	mov	r0, r8
 8006ab6:	4649      	mov	r1, r9
 8006ab8:	f7f9 fbf8 	bl	80002ac <__adddf3>
 8006abc:	4602      	mov	r2, r0
 8006abe:	460b      	mov	r3, r1
 8006ac0:	4610      	mov	r0, r2
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	f04f 0200 	mov.w	r2, #0
 8006ac8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006acc:	f7f9 fece 	bl	800086c <__aeabi_ddiv>
 8006ad0:	4602      	mov	r2, r0
 8006ad2:	460b      	mov	r3, r1
 8006ad4:	4620      	mov	r0, r4
 8006ad6:	4629      	mov	r1, r5
 8006ad8:	f7f9 fbe8 	bl	80002ac <__adddf3>
 8006adc:	4603      	mov	r3, r0
 8006ade:	460c      	mov	r4, r1
 8006ae0:	ec44 3b17 	vmov	d7, r3, r4
 8006ae4:	eeb0 0a47 	vmov.f32	s0, s14
 8006ae8:	eef0 0a67 	vmov.f32	s1, s15
 8006aec:	f013 fb62 	bl	801a1b4 <sqrt>
 8006af0:	ed87 0b26 	vstr	d0, [r7, #152]	; 0x98
			 ta		= (v_lim - v0)/a_design;
 8006af4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006af8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006afc:	f7f9 fbd4 	bl	80002a8 <__aeabi_dsub>
 8006b00:	4603      	mov	r3, r0
 8006b02:	460c      	mov	r4, r1
 8006b04:	4618      	mov	r0, r3
 8006b06:	4621      	mov	r1, r4
 8006b08:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8006b0c:	f7f9 feae 	bl	800086c <__aeabi_ddiv>
 8006b10:	4603      	mov	r3, r0
 8006b12:	460c      	mov	r4, r1
 8006b14:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
			 td		= (v_lim - v1)/a_design;
 8006b18:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006b1c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006b20:	f7f9 fbc2 	bl	80002a8 <__aeabi_dsub>
 8006b24:	4603      	mov	r3, r0
 8006b26:	460c      	mov	r4, r1
 8006b28:	4618      	mov	r0, r3
 8006b2a:	4621      	mov	r1, r4
 8006b2c:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8006b30:	f7f9 fe9c 	bl	800086c <__aeabi_ddiv>
 8006b34:	4603      	mov	r3, r0
 8006b36:	460c      	mov	r4, r1
 8006b38:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
			 tf		= ta + td;
 8006b3c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8006b40:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8006b44:	f7f9 fbb2 	bl	80002ac <__adddf3>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	460c      	mov	r4, r1
 8006b4c:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 8006b50:	e0e3      	b.n	8006d1a <scaraInitLSPB+0x6d2>
		 } else {
			 v_lim	= v_design;
 8006b52:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8006b56:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
			 ta		= (v_lim - v0)/a_design;
 8006b5a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006b5e:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006b62:	f7f9 fba1 	bl	80002a8 <__aeabi_dsub>
 8006b66:	4603      	mov	r3, r0
 8006b68:	460c      	mov	r4, r1
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	4621      	mov	r1, r4
 8006b6e:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8006b72:	f7f9 fe7b 	bl	800086c <__aeabi_ddiv>
 8006b76:	4603      	mov	r3, r0
 8006b78:	460c      	mov	r4, r1
 8006b7a:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
			 td		= (v_lim - v1)/a_design;
 8006b7e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006b82:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006b86:	f7f9 fb8f 	bl	80002a8 <__aeabi_dsub>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	460c      	mov	r4, r1
 8006b8e:	4618      	mov	r0, r3
 8006b90:	4621      	mov	r1, r4
 8006b92:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8006b96:	f7f9 fe69 	bl	800086c <__aeabi_ddiv>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	460c      	mov	r4, r1
 8006b9e:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
			 tf		= fabs(q0 - q1)/v_lim + v_lim/(2*a_design)*(1 - v0/v_lim)*(1 - v0/v_lim)
 8006ba2:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8006ba6:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006baa:	f7f9 fb7d 	bl	80002a8 <__aeabi_dsub>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	460c      	mov	r4, r1
 8006bb2:	4698      	mov	r8, r3
 8006bb4:	f024 4900 	bic.w	r9, r4, #2147483648	; 0x80000000
 8006bb8:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8006bbc:	4640      	mov	r0, r8
 8006bbe:	4649      	mov	r1, r9
 8006bc0:	f7f9 fe54 	bl	800086c <__aeabi_ddiv>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	460c      	mov	r4, r1
 8006bc8:	4625      	mov	r5, r4
 8006bca:	461c      	mov	r4, r3
 8006bcc:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	460b      	mov	r3, r1
 8006bd4:	f7f9 fb6a 	bl	80002ac <__adddf3>
 8006bd8:	4602      	mov	r2, r0
 8006bda:	460b      	mov	r3, r1
 8006bdc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006be0:	f7f9 fe44 	bl	800086c <__aeabi_ddiv>
 8006be4:	4602      	mov	r2, r0
 8006be6:	460b      	mov	r3, r1
 8006be8:	4690      	mov	r8, r2
 8006bea:	4699      	mov	r9, r3
 8006bec:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8006bf0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006bf4:	f7f9 fe3a 	bl	800086c <__aeabi_ddiv>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	460b      	mov	r3, r1
 8006bfc:	f04f 0000 	mov.w	r0, #0
 8006c00:	497b      	ldr	r1, [pc, #492]	; (8006df0 <scaraInitLSPB+0x7a8>)
 8006c02:	f7f9 fb51 	bl	80002a8 <__aeabi_dsub>
 8006c06:	4602      	mov	r2, r0
 8006c08:	460b      	mov	r3, r1
 8006c0a:	4640      	mov	r0, r8
 8006c0c:	4649      	mov	r1, r9
 8006c0e:	f7f9 fd03 	bl	8000618 <__aeabi_dmul>
 8006c12:	4602      	mov	r2, r0
 8006c14:	460b      	mov	r3, r1
 8006c16:	4690      	mov	r8, r2
 8006c18:	4699      	mov	r9, r3
 8006c1a:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8006c1e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006c22:	f7f9 fe23 	bl	800086c <__aeabi_ddiv>
 8006c26:	4602      	mov	r2, r0
 8006c28:	460b      	mov	r3, r1
 8006c2a:	f04f 0000 	mov.w	r0, #0
 8006c2e:	4970      	ldr	r1, [pc, #448]	; (8006df0 <scaraInitLSPB+0x7a8>)
 8006c30:	f7f9 fb3a 	bl	80002a8 <__aeabi_dsub>
 8006c34:	4602      	mov	r2, r0
 8006c36:	460b      	mov	r3, r1
 8006c38:	4640      	mov	r0, r8
 8006c3a:	4649      	mov	r1, r9
 8006c3c:	f7f9 fcec 	bl	8000618 <__aeabi_dmul>
 8006c40:	4602      	mov	r2, r0
 8006c42:	460b      	mov	r3, r1
 8006c44:	4620      	mov	r0, r4
 8006c46:	4629      	mov	r1, r5
 8006c48:	f7f9 fb30 	bl	80002ac <__adddf3>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	460c      	mov	r4, r1
 8006c50:	4625      	mov	r5, r4
 8006c52:	461c      	mov	r4, r3
							+ v_lim/(2*a_design)*(1 - v1/v_lim)*(1 - v1/v_lim);
 8006c54:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8006c58:	4602      	mov	r2, r0
 8006c5a:	460b      	mov	r3, r1
 8006c5c:	f7f9 fb26 	bl	80002ac <__adddf3>
 8006c60:	4602      	mov	r2, r0
 8006c62:	460b      	mov	r3, r1
 8006c64:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006c68:	f7f9 fe00 	bl	800086c <__aeabi_ddiv>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	460b      	mov	r3, r1
 8006c70:	4690      	mov	r8, r2
 8006c72:	4699      	mov	r9, r3
 8006c74:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8006c78:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006c7c:	f7f9 fdf6 	bl	800086c <__aeabi_ddiv>
 8006c80:	4602      	mov	r2, r0
 8006c82:	460b      	mov	r3, r1
 8006c84:	f04f 0000 	mov.w	r0, #0
 8006c88:	4959      	ldr	r1, [pc, #356]	; (8006df0 <scaraInitLSPB+0x7a8>)
 8006c8a:	f7f9 fb0d 	bl	80002a8 <__aeabi_dsub>
 8006c8e:	4602      	mov	r2, r0
 8006c90:	460b      	mov	r3, r1
 8006c92:	4640      	mov	r0, r8
 8006c94:	4649      	mov	r1, r9
 8006c96:	f7f9 fcbf 	bl	8000618 <__aeabi_dmul>
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	460b      	mov	r3, r1
 8006c9e:	4690      	mov	r8, r2
 8006ca0:	4699      	mov	r9, r3
 8006ca2:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8006ca6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006caa:	f7f9 fddf 	bl	800086c <__aeabi_ddiv>
 8006cae:	4602      	mov	r2, r0
 8006cb0:	460b      	mov	r3, r1
 8006cb2:	f04f 0000 	mov.w	r0, #0
 8006cb6:	494e      	ldr	r1, [pc, #312]	; (8006df0 <scaraInitLSPB+0x7a8>)
 8006cb8:	f7f9 faf6 	bl	80002a8 <__aeabi_dsub>
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	460b      	mov	r3, r1
 8006cc0:	4640      	mov	r0, r8
 8006cc2:	4649      	mov	r1, r9
 8006cc4:	f7f9 fca8 	bl	8000618 <__aeabi_dmul>
 8006cc8:	4602      	mov	r2, r0
 8006cca:	460b      	mov	r3, r1
			 tf		= fabs(q0 - q1)/v_lim + v_lim/(2*a_design)*(1 - v0/v_lim)*(1 - v0/v_lim)
 8006ccc:	4620      	mov	r0, r4
 8006cce:	4629      	mov	r1, r5
 8006cd0:	f7f9 faec 	bl	80002ac <__adddf3>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	460c      	mov	r4, r1
 8006cd8:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 8006cdc:	e01d      	b.n	8006d1a <scaraInitLSPB+0x6d2>
		 }
	 } else {
		 v_lim	= 0;
 8006cde:	f04f 0300 	mov.w	r3, #0
 8006ce2:	f04f 0400 	mov.w	r4, #0
 8006ce6:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
		 ta = tf/2;
 8006cea:	f04f 0200 	mov.w	r2, #0
 8006cee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006cf2:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8006cf6:	f7f9 fdb9 	bl	800086c <__aeabi_ddiv>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	460c      	mov	r4, r1
 8006cfe:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
		 td = tf/2;
 8006d02:	f04f 0200 	mov.w	r2, #0
 8006d06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006d0a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8006d0e:	f7f9 fdad 	bl	800086c <__aeabi_ddiv>
 8006d12:	4603      	mov	r3, r0
 8006d14:	460c      	mov	r4, r1
 8006d16:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
	 }

	 no_sample = ceilf(tf / T_SAMPLING); // ceiling
 8006d1a:	a333      	add	r3, pc, #204	; (adr r3, 8006de8 <scaraInitLSPB+0x7a0>)
 8006d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d20:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8006d24:	f7f9 fda2 	bl	800086c <__aeabi_ddiv>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	460c      	mov	r4, r1
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	4621      	mov	r1, r4
 8006d30:	f7f9 ff6a 	bl	8000c08 <__aeabi_d2f>
 8006d34:	4603      	mov	r3, r0
 8006d36:	ee00 3a10 	vmov	s0, r3
 8006d3a:	f013 f9f9 	bl	801a130 <ceilf>
 8006d3e:	eef0 7a40 	vmov.f32	s15, s0
 8006d42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d46:	ee17 3a90 	vmov	r3, s15
 8006d4a:	637b      	str	r3, [r7, #52]	; 0x34
	 // Init lspb params
	 lspb->dir= dir;
 8006d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d4e:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8006d52:	701a      	strb	r2, [r3, #0]
	 lspb->s0 = q0;
 8006d54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d56:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8006d5a:	e9c2 3402 	strd	r3, r4, [r2, #8]
	 lspb->s1 = q1;
 8006d5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d60:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8006d64:	e9c2 3404 	strd	r3, r4, [r2, #16]
	 lspb->Ta = ta;
 8006d68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d6a:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8006d6e:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	 lspb->Td = td;
 8006d72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d74:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8006d78:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	 lspb->Tf = tf;
 8006d7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d7e:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8006d82:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	 lspb->a_design = a_design;
 8006d86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d88:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 8006d8c:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	 lspb->v_design = v_design;
 8006d90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d92:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8006d96:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	 lspb->v_lim = v_lim;
 8006d9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d9c:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8006da0:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	 lspb->v0 = v0;
 8006da4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006da6:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8006daa:	e9c2 3406 	strd	r3, r4, [r2, #24]
	 lspb->v1 = v1;
 8006dae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006db0:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8006db4:	e9c2 3408 	strd	r3, r4, [r2, #32]
	 lspb->num_of_sampling = no_sample;
 8006db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006dbc:	659a      	str	r2, [r3, #88]	; 0x58
	 lspb->total_s = lspb->s1 - lspb->s0;
 8006dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dc0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8006dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dc6:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8006dca:	461a      	mov	r2, r3
 8006dcc:	4623      	mov	r3, r4
 8006dce:	f7f9 fa6b 	bl	80002a8 <__aeabi_dsub>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	460c      	mov	r4, r1
 8006dd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006dd8:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

	 return SCARA_STATUS_OK;
 8006ddc:	2300      	movs	r3, #0
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	37b4      	adds	r7, #180	; 0xb4
 8006de2:	46bd      	mov	sp, r7
 8006de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006de8:	40000000 	.word	0x40000000
 8006dec:	3f847ae1 	.word	0x3f847ae1
 8006df0:	3ff00000 	.word	0x3ff00000
 8006df4:	00000000 	.word	0x00000000
 8006df8:	405c2000 	.word	0x405c2000
 8006dfc:	14000000 	.word	0x14000000
 8006e00:	4000f6f0 	.word	0x4000f6f0
 8006e04:	6b259425 	.word	0x6b259425
 8006e08:	40069b91 	.word	0x40069b91
 8006e0c:	d2f1a9fc 	.word	0xd2f1a9fc
 8006e10:	3f50624d 	.word	0x3f50624d
 8006e14:	9abcaf48 	.word	0x9abcaf48
 8006e18:	3e7ad7f2 	.word	0x3e7ad7f2
 8006e1c:	00000000 	.word	0x00000000

08006e20 <scaraInitScurve>:
SCARA_StatusTypeDef	scaraInitScurve		(Trajectory_Scurve_TypeDef *scurve,
										Trajectory_TargetTypeDef target,
										double total_s,
										ModeInitTypeDef modeinit,
										double v_factor,
										double a_factor) {
 8006e20:	b5b0      	push	{r4, r5, r7, lr}
 8006e22:	b0ba      	sub	sp, #232	; 0xe8
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	61f8      	str	r0, [r7, #28]
 8006e28:	460b      	mov	r3, r1
 8006e2a:	ed87 0b04 	vstr	d0, [r7, #16]
 8006e2e:	ed87 1b02 	vstr	d1, [r7, #8]
 8006e32:	ed87 2b00 	vstr	d2, [r7]
 8006e36:	76fb      	strb	r3, [r7, #27]
 8006e38:	4613      	mov	r3, r2
 8006e3a:	76bb      	strb	r3, [r7, #26]
	 double v_design, a_design, q0, q1, v0, v1, v_lim, j_max, tm, tc, tf, dir;
	 double v_1, s_1, v_2, s_2, v_3, s_3, v_4, s_4;
	 uint32_t	 no_sample;
	 uint8_t	 no_phases;

	 if ( TRAJECTORY_3D == target) {
 8006e3c:	7efb      	ldrb	r3, [r7, #27]
 8006e3e:	2b04      	cmp	r3, #4
 8006e40:	d118      	bne.n	8006e74 <scaraInitScurve+0x54>
		 v_design = V_DESIGN_3D*v_factor;
 8006e42:	f20f 4320 	addw	r3, pc, #1056	; 0x420
 8006e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e4a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006e4e:	f7f9 fbe3 	bl	8000618 <__aeabi_dmul>
 8006e52:	4603      	mov	r3, r0
 8006e54:	460c      	mov	r4, r1
 8006e56:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_3D*a_factor;
 8006e5a:	f20f 4308 	addw	r3, pc, #1032	; 0x408
 8006e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e62:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e66:	f7f9 fbd7 	bl	8000618 <__aeabi_dmul>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	460c      	mov	r4, r1
 8006e6e:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8006e72:	e083      	b.n	8006f7c <scaraInitScurve+0x15c>
	 } else if (TRAJECTORY_ROLL == target) {
 8006e74:	7efb      	ldrb	r3, [r7, #27]
 8006e76:	2b05      	cmp	r3, #5
 8006e78:	d116      	bne.n	8006ea8 <scaraInitScurve+0x88>
		 v_design = V_DESIGN_ROLL*v_factor;
 8006e7a:	a3fc      	add	r3, pc, #1008	; (adr r3, 800726c <scaraInitScurve+0x44c>)
 8006e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e80:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006e84:	f7f9 fbc8 	bl	8000618 <__aeabi_dmul>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	460c      	mov	r4, r1
 8006e8c:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_ROLL*a_factor;
 8006e90:	a3f6      	add	r3, pc, #984	; (adr r3, 800726c <scaraInitScurve+0x44c>)
 8006e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e96:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e9a:	f7f9 fbbd 	bl	8000618 <__aeabi_dmul>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	460c      	mov	r4, r1
 8006ea2:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8006ea6:	e069      	b.n	8006f7c <scaraInitScurve+0x15c>
	 } else if (TRAJECTORY_J0 == target) {
 8006ea8:	7efb      	ldrb	r3, [r7, #27]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d116      	bne.n	8006edc <scaraInitScurve+0xbc>
		 v_design = V_DESIGN_J0*v_factor;
 8006eae:	a3ef      	add	r3, pc, #956	; (adr r3, 800726c <scaraInitScurve+0x44c>)
 8006eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006eb8:	f7f9 fbae 	bl	8000618 <__aeabi_dmul>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	460c      	mov	r4, r1
 8006ec0:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_J0*a_factor;
 8006ec4:	a3e9      	add	r3, pc, #932	; (adr r3, 800726c <scaraInitScurve+0x44c>)
 8006ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eca:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ece:	f7f9 fba3 	bl	8000618 <__aeabi_dmul>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	460c      	mov	r4, r1
 8006ed6:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8006eda:	e04f      	b.n	8006f7c <scaraInitScurve+0x15c>
	 } else if (TRAJECTORY_J1 == target) {
 8006edc:	7efb      	ldrb	r3, [r7, #27]
 8006ede:	2b01      	cmp	r3, #1
 8006ee0:	d116      	bne.n	8006f10 <scaraInitScurve+0xf0>
		 v_design = V_DESIGN_J1*v_factor;
 8006ee2:	a3e2      	add	r3, pc, #904	; (adr r3, 800726c <scaraInitScurve+0x44c>)
 8006ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006eec:	f7f9 fb94 	bl	8000618 <__aeabi_dmul>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	460c      	mov	r4, r1
 8006ef4:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_J1*a_factor;
 8006ef8:	a3dc      	add	r3, pc, #880	; (adr r3, 800726c <scaraInitScurve+0x44c>)
 8006efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006efe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f02:	f7f9 fb89 	bl	8000618 <__aeabi_dmul>
 8006f06:	4603      	mov	r3, r0
 8006f08:	460c      	mov	r4, r1
 8006f0a:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8006f0e:	e035      	b.n	8006f7c <scaraInitScurve+0x15c>
	 } else if (TRAJECTORY_J2 == target) {
 8006f10:	7efb      	ldrb	r3, [r7, #27]
 8006f12:	2b02      	cmp	r3, #2
 8006f14:	d116      	bne.n	8006f44 <scaraInitScurve+0x124>
		 v_design = V_DESIGN_J2*v_factor;
 8006f16:	a3d3      	add	r3, pc, #844	; (adr r3, 8007264 <scaraInitScurve+0x444>)
 8006f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f1c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006f20:	f7f9 fb7a 	bl	8000618 <__aeabi_dmul>
 8006f24:	4603      	mov	r3, r0
 8006f26:	460c      	mov	r4, r1
 8006f28:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_J2*a_factor;
 8006f2c:	a3cd      	add	r3, pc, #820	; (adr r3, 8007264 <scaraInitScurve+0x444>)
 8006f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f32:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f36:	f7f9 fb6f 	bl	8000618 <__aeabi_dmul>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	460c      	mov	r4, r1
 8006f3e:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8006f42:	e01b      	b.n	8006f7c <scaraInitScurve+0x15c>
	 } else if (TRAJECTORY_J3 == target) {
 8006f44:	7efb      	ldrb	r3, [r7, #27]
 8006f46:	2b03      	cmp	r3, #3
 8006f48:	d116      	bne.n	8006f78 <scaraInitScurve+0x158>
		 v_design = V_DESIGN_J3*v_factor;
 8006f4a:	a3ca      	add	r3, pc, #808	; (adr r3, 8007274 <scaraInitScurve+0x454>)
 8006f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f50:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006f54:	f7f9 fb60 	bl	8000618 <__aeabi_dmul>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	460c      	mov	r4, r1
 8006f5c:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_J3*a_factor;
 8006f60:	a3c4      	add	r3, pc, #784	; (adr r3, 8007274 <scaraInitScurve+0x454>)
 8006f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f66:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f6a:	f7f9 fb55 	bl	8000618 <__aeabi_dmul>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	460c      	mov	r4, r1
 8006f72:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8006f76:	e001      	b.n	8006f7c <scaraInitScurve+0x15c>
	 } else {
		 return SCARA_STATUS_ERROR_PARA;
 8006f78:	2306      	movs	r3, #6
 8006f7a:	e2c8      	b.n	800750e <scaraInitScurve+0x6ee>
	 }

	 v0 = 0;
 8006f7c:	f04f 0300 	mov.w	r3, #0
 8006f80:	f04f 0400 	mov.w	r4, #0
 8006f84:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
	 v1 = 0;
 8006f88:	f04f 0300 	mov.w	r3, #0
 8006f8c:	f04f 0400 	mov.w	r4, #0
 8006f90:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
	 q0 = 0;
 8006f94:	f04f 0300 	mov.w	r3, #0
 8006f98:	f04f 0400 	mov.w	r4, #0
 8006f9c:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	 q1 = total_s;
 8006fa0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8006fa4:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0

	 if ( total_s < 0) {
 8006fa8:	f04f 0200 	mov.w	r2, #0
 8006fac:	f04f 0300 	mov.w	r3, #0
 8006fb0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006fb4:	f7f9 fda2 	bl	8000afc <__aeabi_dcmplt>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d015      	beq.n	8006fea <scaraInitScurve+0x1ca>
		 dir = -1;
 8006fbe:	f04f 0300 	mov.w	r3, #0
 8006fc2:	4ca5      	ldr	r4, [pc, #660]	; (8007258 <scaraInitScurve+0x438>)
 8006fc4:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
		 q1 = -q1;
 8006fc8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006fcc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006fd0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006fd4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006fd8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		 total_s = -total_s;
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	613b      	str	r3, [r7, #16]
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006fe6:	617b      	str	r3, [r7, #20]
 8006fe8:	e004      	b.n	8006ff4 <scaraInitScurve+0x1d4>
	 } else {
		 dir = 1;
 8006fea:	f04f 0300 	mov.w	r3, #0
 8006fee:	4c9b      	ldr	r4, [pc, #620]	; (800725c <scaraInitScurve+0x43c>)
 8006ff0:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
	 }


	 if (DUTY_MODE_INIT_QVT == modeinit) {
 8006ff4:	7ebb      	ldrb	r3, [r7, #26]
 8006ff6:	2b01      	cmp	r3, #1
 8006ff8:	f040 8082 	bne.w	8007100 <scaraInitScurve+0x2e0>
		 double t_upper, v_upper, a_upper;
		 tf = scurve->Tf;
 8006ffc:	69fb      	ldr	r3, [r7, #28]
 8006ffe:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8007002:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 // Avoid division by 0
		 if (tf > 0.001) {
 8007006:	a390      	add	r3, pc, #576	; (adr r3, 8007248 <scaraInitScurve+0x428>)
 8007008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800700c:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8007010:	f7f9 fd92 	bl	8000b38 <__aeabi_dcmpgt>
 8007014:	4603      	mov	r3, r0
 8007016:	2b00      	cmp	r3, #0
 8007018:	d066      	beq.n	80070e8 <scaraInitScurve+0x2c8>
			 // Assume 4 phase
			 t_upper = tf / 4;
 800701a:	f04f 0200 	mov.w	r2, #0
 800701e:	4b90      	ldr	r3, [pc, #576]	; (8007260 <scaraInitScurve+0x440>)
 8007020:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8007024:	f7f9 fc22 	bl	800086c <__aeabi_ddiv>
 8007028:	4603      	mov	r3, r0
 800702a:	460c      	mov	r4, r1
 800702c:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
			 v_upper = total_s / (2*t_upper);
 8007030:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8007034:	4602      	mov	r2, r0
 8007036:	460b      	mov	r3, r1
 8007038:	f7f9 f938 	bl	80002ac <__adddf3>
 800703c:	4603      	mov	r3, r0
 800703e:	460c      	mov	r4, r1
 8007040:	461a      	mov	r2, r3
 8007042:	4623      	mov	r3, r4
 8007044:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007048:	f7f9 fc10 	bl	800086c <__aeabi_ddiv>
 800704c:	4603      	mov	r3, r0
 800704e:	460c      	mov	r4, r1
 8007050:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
			 // Check 4 phase --> 5 phase
			 if ( v_upper > v_design) {
 8007054:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8007058:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800705c:	f7f9 fd6c 	bl	8000b38 <__aeabi_dcmpgt>
 8007060:	4603      	mov	r3, r0
 8007062:	2b00      	cmp	r3, #0
 8007064:	d022      	beq.n	80070ac <scaraInitScurve+0x28c>
				 t_upper = tf/2 - total_s/(2*v_design);
 8007066:	f04f 0200 	mov.w	r2, #0
 800706a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800706e:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8007072:	f7f9 fbfb 	bl	800086c <__aeabi_ddiv>
 8007076:	4603      	mov	r3, r0
 8007078:	460c      	mov	r4, r1
 800707a:	4625      	mov	r5, r4
 800707c:	461c      	mov	r4, r3
 800707e:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007082:	4602      	mov	r2, r0
 8007084:	460b      	mov	r3, r1
 8007086:	f7f9 f911 	bl	80002ac <__adddf3>
 800708a:	4602      	mov	r2, r0
 800708c:	460b      	mov	r3, r1
 800708e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007092:	f7f9 fbeb 	bl	800086c <__aeabi_ddiv>
 8007096:	4602      	mov	r2, r0
 8007098:	460b      	mov	r3, r1
 800709a:	4620      	mov	r0, r4
 800709c:	4629      	mov	r1, r5
 800709e:	f7f9 f903 	bl	80002a8 <__aeabi_dsub>
 80070a2:	4603      	mov	r3, r0
 80070a4:	460c      	mov	r4, r1
 80070a6:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
 80070aa:	e003      	b.n	80070b4 <scaraInitScurve+0x294>
			 } else {
				 v_design = v_upper;
 80070ac:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 80070b0:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
			 }
			 a_upper  = v_design / t_upper;
 80070b4:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80070b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80070bc:	f7f9 fbd6 	bl	800086c <__aeabi_ddiv>
 80070c0:	4603      	mov	r3, r0
 80070c2:	460c      	mov	r4, r1
 80070c4:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
			 if ( a_upper > a_design) {
 80070c8:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 80070cc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80070d0:	f7f9 fd32 	bl	8000b38 <__aeabi_dcmpgt>
 80070d4:	4603      	mov	r3, r0
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d001      	beq.n	80070de <scaraInitScurve+0x2be>
				 return SCARA_STATUS_ERROR_OVER_ACCEL;
 80070da:	230a      	movs	r3, #10
 80070dc:	e217      	b.n	800750e <scaraInitScurve+0x6ee>
			 } else {
				 a_design = a_upper;
 80070de:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80070e2:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 80070e6:	e00b      	b.n	8007100 <scaraInitScurve+0x2e0>
			 }
		 } else {
			 v_design = 0;
 80070e8:	f04f 0300 	mov.w	r3, #0
 80070ec:	f04f 0400 	mov.w	r4, #0
 80070f0:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
			 a_design = 0;
 80070f4:	f04f 0300 	mov.w	r3, #0
 80070f8:	f04f 0400 	mov.w	r4, #0
 80070fc:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
		 }
	 }
	 // Avoid division by 0
	 if (a_design > 0.0000001 && v_design > 0.0000001) {
 8007100:	a353      	add	r3, pc, #332	; (adr r3, 8007250 <scaraInitScurve+0x430>)
 8007102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007106:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800710a:	f7f9 fd15 	bl	8000b38 <__aeabi_dcmpgt>
 800710e:	4603      	mov	r3, r0
 8007110:	2b00      	cmp	r3, #0
 8007112:	f000 80b3 	beq.w	800727c <scaraInitScurve+0x45c>
 8007116:	a34e      	add	r3, pc, #312	; (adr r3, 8007250 <scaraInitScurve+0x430>)
 8007118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800711c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007120:	f7f9 fd0a 	bl	8000b38 <__aeabi_dcmpgt>
 8007124:	4603      	mov	r3, r0
 8007126:	2b00      	cmp	r3, #0
 8007128:	f000 80a8 	beq.w	800727c <scaraInitScurve+0x45c>
		 no_phases = 5;
 800712c:	2305      	movs	r3, #5
 800712e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		 tm = v_design/a_design;
 8007132:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8007136:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800713a:	f7f9 fb97 	bl	800086c <__aeabi_ddiv>
 800713e:	4603      	mov	r3, r0
 8007140:	460c      	mov	r4, r1
 8007142:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
		 tc = total_s/v_design - 2*tm;
 8007146:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800714a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800714e:	f7f9 fb8d 	bl	800086c <__aeabi_ddiv>
 8007152:	4603      	mov	r3, r0
 8007154:	460c      	mov	r4, r1
 8007156:	4625      	mov	r5, r4
 8007158:	461c      	mov	r4, r3
 800715a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800715e:	4602      	mov	r2, r0
 8007160:	460b      	mov	r3, r1
 8007162:	f7f9 f8a3 	bl	80002ac <__adddf3>
 8007166:	4602      	mov	r2, r0
 8007168:	460b      	mov	r3, r1
 800716a:	4620      	mov	r0, r4
 800716c:	4629      	mov	r1, r5
 800716e:	f7f9 f89b 	bl	80002a8 <__aeabi_dsub>
 8007172:	4603      	mov	r3, r0
 8007174:	460c      	mov	r4, r1
 8007176:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
		 // Check condition 5 phase ---> 4 phase
		 if (tc < 0.0) {
 800717a:	f04f 0200 	mov.w	r2, #0
 800717e:	f04f 0300 	mov.w	r3, #0
 8007182:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007186:	f7f9 fcb9 	bl	8000afc <__aeabi_dcmplt>
 800718a:	4603      	mov	r3, r0
 800718c:	2b00      	cmp	r3, #0
 800718e:	d022      	beq.n	80071d6 <scaraInitScurve+0x3b6>
			 tc = 0;
 8007190:	f04f 0300 	mov.w	r3, #0
 8007194:	f04f 0400 	mov.w	r4, #0
 8007198:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
			 no_phases = 4;
 800719c:	2304      	movs	r3, #4
 800719e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			 tm = sqrt(total_s/(2*a_design));
 80071a2:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 80071a6:	4602      	mov	r2, r0
 80071a8:	460b      	mov	r3, r1
 80071aa:	f7f9 f87f 	bl	80002ac <__adddf3>
 80071ae:	4603      	mov	r3, r0
 80071b0:	460c      	mov	r4, r1
 80071b2:	461a      	mov	r2, r3
 80071b4:	4623      	mov	r3, r4
 80071b6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80071ba:	f7f9 fb57 	bl	800086c <__aeabi_ddiv>
 80071be:	4603      	mov	r3, r0
 80071c0:	460c      	mov	r4, r1
 80071c2:	ec44 3b17 	vmov	d7, r3, r4
 80071c6:	eeb0 0a47 	vmov.f32	s0, s14
 80071ca:	eef0 0a67 	vmov.f32	s1, s15
 80071ce:	f012 fff1 	bl	801a1b4 <sqrt>
 80071d2:	ed87 0b2e 	vstr	d0, [r7, #184]	; 0xb8
		 }
		 if (tm < 0.001) {
 80071d6:	a31c      	add	r3, pc, #112	; (adr r3, 8007248 <scaraInitScurve+0x428>)
 80071d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071dc:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80071e0:	f7f9 fc8c 	bl	8000afc <__aeabi_dcmplt>
 80071e4:	4603      	mov	r3, r0
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d006      	beq.n	80071f8 <scaraInitScurve+0x3d8>
			 j_max = 0;
 80071ea:	f04f 0300 	mov.w	r3, #0
 80071ee:	f04f 0400 	mov.w	r4, #0
 80071f2:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
 80071f6:	e009      	b.n	800720c <scaraInitScurve+0x3ec>
		 } else {
			 j_max = a_design/tm;
 80071f8:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80071fc:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8007200:	f7f9 fb34 	bl	800086c <__aeabi_ddiv>
 8007204:	4603      	mov	r3, r0
 8007206:	460c      	mov	r4, r1
 8007208:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
		 }
		 v_lim = a_design*tm;
 800720c:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8007210:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8007214:	f7f9 fa00 	bl	8000618 <__aeabi_dmul>
 8007218:	4603      	mov	r3, r0
 800721a:	460c      	mov	r4, r1
 800721c:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
		 tf    = 4*tm + tc;
 8007220:	f04f 0200 	mov.w	r2, #0
 8007224:	4b0e      	ldr	r3, [pc, #56]	; (8007260 <scaraInitScurve+0x440>)
 8007226:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800722a:	f7f9 f9f5 	bl	8000618 <__aeabi_dmul>
 800722e:	4603      	mov	r3, r0
 8007230:	460c      	mov	r4, r1
 8007232:	461a      	mov	r2, r3
 8007234:	4623      	mov	r3, r4
 8007236:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800723a:	f7f9 f837 	bl	80002ac <__adddf3>
 800723e:	4603      	mov	r3, r0
 8007240:	460c      	mov	r4, r1
 8007242:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
 8007246:	e039      	b.n	80072bc <scaraInitScurve+0x49c>
 8007248:	d2f1a9fc 	.word	0xd2f1a9fc
 800724c:	3f50624d 	.word	0x3f50624d
 8007250:	9abcaf48 	.word	0x9abcaf48
 8007254:	3e7ad7f2 	.word	0x3e7ad7f2
 8007258:	bff00000 	.word	0xbff00000
 800725c:	3ff00000 	.word	0x3ff00000
 8007260:	40100000 	.word	0x40100000
 8007264:	00000000 	.word	0x00000000
 8007268:	405c2000 	.word	0x405c2000
 800726c:	14000000 	.word	0x14000000
 8007270:	4000f6f0 	.word	0x4000f6f0
 8007274:	6b259425 	.word	0x6b259425
 8007278:	40069b91 	.word	0x40069b91
	 } else {
		 j_max = 0;
 800727c:	f04f 0300 	mov.w	r3, #0
 8007280:	f04f 0400 	mov.w	r4, #0
 8007284:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
		 tc = 0;
 8007288:	f04f 0300 	mov.w	r3, #0
 800728c:	f04f 0400 	mov.w	r4, #0
 8007290:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
		 no_phases = 4;
 8007294:	2304      	movs	r3, #4
 8007296:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		 tm = tf / 4;
 800729a:	f04f 0200 	mov.w	r2, #0
 800729e:	4ba0      	ldr	r3, [pc, #640]	; (8007520 <scaraInitScurve+0x700>)
 80072a0:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80072a4:	f7f9 fae2 	bl	800086c <__aeabi_ddiv>
 80072a8:	4603      	mov	r3, r0
 80072aa:	460c      	mov	r4, r1
 80072ac:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
		 v_lim = 0;
 80072b0:	f04f 0300 	mov.w	r3, #0
 80072b4:	f04f 0400 	mov.w	r4, #0
 80072b8:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
	 }

	 no_sample = ceil(tf / T_SAMPLING);
 80072bc:	a396      	add	r3, pc, #600	; (adr r3, 8007518 <scaraInitScurve+0x6f8>)
 80072be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072c2:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80072c6:	f7f9 fad1 	bl	800086c <__aeabi_ddiv>
 80072ca:	4603      	mov	r3, r0
 80072cc:	460c      	mov	r4, r1
 80072ce:	ec44 3b17 	vmov	d7, r3, r4
 80072d2:	eeb0 0a47 	vmov.f32	s0, s14
 80072d6:	eef0 0a67 	vmov.f32	s1, s15
 80072da:	f012 fdd1 	bl	8019e80 <ceil>
 80072de:	ec54 3b10 	vmov	r3, r4, d0
 80072e2:	4618      	mov	r0, r3
 80072e4:	4621      	mov	r1, r4
 80072e6:	f7f9 fc6f 	bl	8000bc8 <__aeabi_d2uiz>
 80072ea:	4603      	mov	r3, r0
 80072ec:	667b      	str	r3, [r7, #100]	; 0x64
	 v_1 = 0.5*j_max*tm*tm;
 80072ee:	f04f 0200 	mov.w	r2, #0
 80072f2:	4b8c      	ldr	r3, [pc, #560]	; (8007524 <scaraInitScurve+0x704>)
 80072f4:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80072f8:	f7f9 f98e 	bl	8000618 <__aeabi_dmul>
 80072fc:	4603      	mov	r3, r0
 80072fe:	460c      	mov	r4, r1
 8007300:	4618      	mov	r0, r3
 8007302:	4621      	mov	r1, r4
 8007304:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8007308:	f7f9 f986 	bl	8000618 <__aeabi_dmul>
 800730c:	4603      	mov	r3, r0
 800730e:	460c      	mov	r4, r1
 8007310:	461a      	mov	r2, r3
 8007312:	4623      	mov	r3, r4
 8007314:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8007318:	f7f9 f97e 	bl	8000618 <__aeabi_dmul>
 800731c:	4603      	mov	r3, r0
 800731e:	460c      	mov	r4, r1
 8007320:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	 s_1 = j_max*tm*tm*tm/6;
 8007324:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8007328:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800732c:	f7f9 f974 	bl	8000618 <__aeabi_dmul>
 8007330:	4603      	mov	r3, r0
 8007332:	460c      	mov	r4, r1
 8007334:	4618      	mov	r0, r3
 8007336:	4621      	mov	r1, r4
 8007338:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800733c:	f7f9 f96c 	bl	8000618 <__aeabi_dmul>
 8007340:	4603      	mov	r3, r0
 8007342:	460c      	mov	r4, r1
 8007344:	4618      	mov	r0, r3
 8007346:	4621      	mov	r1, r4
 8007348:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800734c:	f7f9 f964 	bl	8000618 <__aeabi_dmul>
 8007350:	4603      	mov	r3, r0
 8007352:	460c      	mov	r4, r1
 8007354:	4618      	mov	r0, r3
 8007356:	4621      	mov	r1, r4
 8007358:	f04f 0200 	mov.w	r2, #0
 800735c:	4b72      	ldr	r3, [pc, #456]	; (8007528 <scaraInitScurve+0x708>)
 800735e:	f7f9 fa85 	bl	800086c <__aeabi_ddiv>
 8007362:	4603      	mov	r3, r0
 8007364:	460c      	mov	r4, r1
 8007366:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	 v_2 = j_max*tm*tm;
 800736a:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800736e:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8007372:	f7f9 f951 	bl	8000618 <__aeabi_dmul>
 8007376:	4603      	mov	r3, r0
 8007378:	460c      	mov	r4, r1
 800737a:	461a      	mov	r2, r3
 800737c:	4623      	mov	r3, r4
 800737e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8007382:	f7f9 f949 	bl	8000618 <__aeabi_dmul>
 8007386:	4603      	mov	r3, r0
 8007388:	460c      	mov	r4, r1
 800738a:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
	 s_2 = v_2*tm;
 800738e:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8007392:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007396:	f7f9 f93f 	bl	8000618 <__aeabi_dmul>
 800739a:	4603      	mov	r3, r0
 800739c:	460c      	mov	r4, r1
 800739e:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
	 v_3 = v_2;
 80073a2:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 80073a6:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	 s_3 = s_2 + v_2*tc;
 80073aa:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 80073ae:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80073b2:	f7f9 f931 	bl	8000618 <__aeabi_dmul>
 80073b6:	4603      	mov	r3, r0
 80073b8:	460c      	mov	r4, r1
 80073ba:	461a      	mov	r2, r3
 80073bc:	4623      	mov	r3, r4
 80073be:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80073c2:	f7f8 ff73 	bl	80002ac <__adddf3>
 80073c6:	4603      	mov	r3, r0
 80073c8:	460c      	mov	r4, r1
 80073ca:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	 v_4 = v_1;
 80073ce:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 80073d2:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	 s_4 = s_3 + s_2 - s_1;
 80073d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80073da:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80073de:	f7f8 ff65 	bl	80002ac <__adddf3>
 80073e2:	4603      	mov	r3, r0
 80073e4:	460c      	mov	r4, r1
 80073e6:	4618      	mov	r0, r3
 80073e8:	4621      	mov	r1, r4
 80073ea:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80073ee:	f7f8 ff5b 	bl	80002a8 <__aeabi_dsub>
 80073f2:	4603      	mov	r3, r0
 80073f4:	460c      	mov	r4, r1
 80073f6:	e9c7 3408 	strd	r3, r4, [r7, #32]

	 scurve->Tc = tc;
 80073fa:	69fa      	ldr	r2, [r7, #28]
 80073fc:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 8007400:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	 scurve->Tf = tf;
 8007404:	69fa      	ldr	r2, [r7, #28]
 8007406:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 800740a:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	 scurve->Tm = tm;
 800740e:	69fa      	ldr	r2, [r7, #28]
 8007410:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8007414:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	 scurve->a_design = a_design;
 8007418:	69fa      	ldr	r2, [r7, #28]
 800741a:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 800741e:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	 scurve->v_design = v_design;
 8007422:	69fa      	ldr	r2, [r7, #28]
 8007424:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8007428:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	 scurve->v_lim = v_lim;
 800742c:	69fa      	ldr	r2, [r7, #28]
 800742e:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8007432:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	 scurve->v0 = v0;
 8007436:	69fa      	ldr	r2, [r7, #28]
 8007438:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 800743c:	e9c2 3406 	strd	r3, r4, [r2, #24]
	 scurve->v1 = v1;
 8007440:	69fa      	ldr	r2, [r7, #28]
 8007442:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8007446:	e9c2 3408 	strd	r3, r4, [r2, #32]
	 scurve->j_max = j_max;
 800744a:	69fa      	ldr	r2, [r7, #28]
 800744c:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8007450:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	 scurve->s0   = q0;
 8007454:	69fa      	ldr	r2, [r7, #28]
 8007456:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800745a:	e9c2 3402 	strd	r3, r4, [r2, #8]
	 scurve->s1   = q1;
 800745e:	69fa      	ldr	r2, [r7, #28]
 8007460:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 8007464:	e9c2 3404 	strd	r3, r4, [r2, #16]
	 scurve->num_of_phase = no_phases;
 8007468:	69fb      	ldr	r3, [r7, #28]
 800746a:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 800746e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	 scurve->num_of_sampling = no_sample;
 8007472:	69fb      	ldr	r3, [r7, #28]
 8007474:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007476:	669a      	str	r2, [r3, #104]	; 0x68
	 scurve->total_s = total_s;
 8007478:	69fa      	ldr	r2, [r7, #28]
 800747a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800747e:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	 scurve->dir = dir;
 8007482:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8007486:	f7f9 fb77 	bl	8000b78 <__aeabi_d2iz>
 800748a:	4603      	mov	r3, r0
 800748c:	b25a      	sxtb	r2, r3
 800748e:	69fb      	ldr	r3, [r7, #28]
 8007490:	701a      	strb	r2, [r3, #0]

	 scurve->a_current = 0;
 8007492:	69fa      	ldr	r2, [r7, #28]
 8007494:	f04f 0300 	mov.w	r3, #0
 8007498:	f04f 0400 	mov.w	r4, #0
 800749c:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
	 scurve->v_current = 0;
 80074a0:	69fa      	ldr	r2, [r7, #28]
 80074a2:	f04f 0300 	mov.w	r3, #0
 80074a6:	f04f 0400 	mov.w	r4, #0
 80074aa:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
	 scurve->s_current = 0;
 80074ae:	69fa      	ldr	r2, [r7, #28]
 80074b0:	f04f 0300 	mov.w	r3, #0
 80074b4:	f04f 0400 	mov.w	r4, #0
 80074b8:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
	 scurve->v_1 = v_1;
 80074bc:	69fa      	ldr	r2, [r7, #28]
 80074be:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 80074c2:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	 scurve->v_2 = v_2;
 80074c6:	69fa      	ldr	r2, [r7, #28]
 80074c8:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 80074cc:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
	 scurve->v_3 = v_3;
 80074d0:	69fa      	ldr	r2, [r7, #28]
 80074d2:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80074d6:	e9c2 3426 	strd	r3, r4, [r2, #152]	; 0x98
	 scurve->v_4 = v_4;
 80074da:	69fa      	ldr	r2, [r7, #28]
 80074dc:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80074e0:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
	 scurve->s_1 = s_1;
 80074e4:	69fa      	ldr	r2, [r7, #28]
 80074e6:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 80074ea:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
	 scurve->s_2 = s_2;
 80074ee:	69fa      	ldr	r2, [r7, #28]
 80074f0:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80074f4:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
	 scurve->s_3 = s_3;
 80074f8:	69fa      	ldr	r2, [r7, #28]
 80074fa:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80074fe:	e9c2 3428 	strd	r3, r4, [r2, #160]	; 0xa0
	 scurve->s_4 = s_4;
 8007502:	69fa      	ldr	r2, [r7, #28]
 8007504:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8007508:	e9c2 342c 	strd	r3, r4, [r2, #176]	; 0xb0

	 return SCARA_STATUS_OK;
 800750c:	2300      	movs	r3, #0
}
 800750e:	4618      	mov	r0, r3
 8007510:	37e8      	adds	r7, #232	; 0xe8
 8007512:	46bd      	mov	sp, r7
 8007514:	bdb0      	pop	{r4, r5, r7, pc}
 8007516:	bf00      	nop
 8007518:	40000000 	.word	0x40000000
 800751c:	3f847ae1 	.word	0x3f847ae1
 8007520:	40100000 	.word	0x40100000
 8007524:	3fe00000 	.word	0x3fe00000
 8007528:	40180000 	.word	0x40180000

0800752c <scaraFlowDuty>:

/* Compute new x, y , z, theta1, theta2 , d3, theta4 corresponding to time */
SCARA_StatusTypeDef	scaraFlowDuty		(double time,
										SCARA_PositionTypeDef *pos_Next ,
										SCARA_PositionTypeDef pos_Current) {
 800752c:	b082      	sub	sp, #8
 800752e:	b5b0      	push	{r4, r5, r7, lr}
 8007530:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8007534:	af2c      	add	r7, sp, #176	; 0xb0
 8007536:	f107 0108 	add.w	r1, r7, #8
 800753a:	ed81 0b00 	vstr	d0, [r1]
 800753e:	1d39      	adds	r1, r7, #4
 8007540:	6008      	str	r0, [r1, #0]
 8007542:	f507 71b4 	add.w	r1, r7, #360	; 0x168
 8007546:	e881 000c 	stmia.w	r1, {r2, r3}
	SCARA_StatusTypeDef status1, status2, status3, status4;
	SCARA_PositionTypeDef	positionCompute;
	// Update time
	positionCompute.t = time;
 800754a:	f107 0210 	add.w	r2, r7, #16
 800754e:	f107 0308 	add.w	r3, r7, #8
 8007552:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007556:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	/*---- Task space ----*/
	if ( DUTY_SPACE_TASK == myDUTY.space_type) {
 800755a:	4b92      	ldr	r3, [pc, #584]	; (80077a4 <scaraFlowDuty+0x278>)
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	2b00      	cmp	r3, #0
 8007560:	f040 812e 	bne.w	80077c0 <scaraFlowDuty+0x294>
		double s, angle, x, y, z, v, v_angle;
		int8_t	dir_roll;
		//---Trajectory flowing
			// LSPB
		if( DUTY_TRAJECTORY_LSPB == myDUTY.task.trajectory_3d.trajectory_type) {
 8007564:	4b8f      	ldr	r3, [pc, #572]	; (80077a4 <scaraFlowDuty+0x278>)
 8007566:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800756a:	2b00      	cmp	r3, #0
 800756c:	d12d      	bne.n	80075ca <scaraFlowDuty+0x9e>
			status1 = scaraFlowLSPB(&(myDUTY.task.trajectory_3d.lspb), time);
 800756e:	f107 0308 	add.w	r3, r7, #8
 8007572:	ed93 0b00 	vldr	d0, [r3]
 8007576:	488c      	ldr	r0, [pc, #560]	; (80077a8 <scaraFlowDuty+0x27c>)
 8007578:	f000 fc46 	bl	8007e08 <scaraFlowLSPB>
 800757c:	4603      	mov	r3, r0
 800757e:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
			status2 = scaraFlowLSPB(&(myDUTY.task.trajectory_roll.lspb), time);
 8007582:	f107 0308 	add.w	r3, r7, #8
 8007586:	ed93 0b00 	vldr	d0, [r3]
 800758a:	4888      	ldr	r0, [pc, #544]	; (80077ac <scaraFlowDuty+0x280>)
 800758c:	f000 fc3c 	bl	8007e08 <scaraFlowLSPB>
 8007590:	4603      	mov	r3, r0
 8007592:	f887 3156 	strb.w	r3, [r7, #342]	; 0x156
			s = myDUTY.task.trajectory_3d.lspb.s_current;
 8007596:	4b83      	ldr	r3, [pc, #524]	; (80077a4 <scaraFlowDuty+0x278>)
 8007598:	e9d3 3464 	ldrd	r3, r4, [r3, #400]	; 0x190
 800759c:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			v = myDUTY.task.trajectory_3d.lspb.v_current;
 80075a0:	4b80      	ldr	r3, [pc, #512]	; (80077a4 <scaraFlowDuty+0x278>)
 80075a2:	e9d3 3462 	ldrd	r3, r4, [r3, #392]	; 0x188
 80075a6:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
			angle = myDUTY.task.trajectory_roll.lspb.s_current;
 80075aa:	4b7e      	ldr	r3, [pc, #504]	; (80077a4 <scaraFlowDuty+0x278>)
 80075ac:	e9d3 34ba 	ldrd	r3, r4, [r3, #744]	; 0x2e8
 80075b0:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
			v_angle = myDUTY.task.trajectory_roll.lspb.v_current;
 80075b4:	4b7b      	ldr	r3, [pc, #492]	; (80077a4 <scaraFlowDuty+0x278>)
 80075b6:	e9d3 34b8 	ldrd	r3, r4, [r3, #736]	; 0x2e0
 80075ba:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
			dir_roll = myDUTY.task.trajectory_roll.lspb.dir;
 80075be:	4b79      	ldr	r3, [pc, #484]	; (80077a4 <scaraFlowDuty+0x278>)
 80075c0:	f893 3270 	ldrb.w	r3, [r3, #624]	; 0x270
 80075c4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 80075c8:	e034      	b.n	8007634 <scaraFlowDuty+0x108>
			// SCURVE
		} else if ( DUTY_TRAJECTORY_SCURVE == myDUTY.task.trajectory_3d.trajectory_type) {
 80075ca:	4b76      	ldr	r3, [pc, #472]	; (80077a4 <scaraFlowDuty+0x278>)
 80075cc:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d12d      	bne.n	8007630 <scaraFlowDuty+0x104>
			status1 = scaraFLowScurve(&(myDUTY.task.trajectory_3d.scurve), time);
 80075d4:	f107 0308 	add.w	r3, r7, #8
 80075d8:	ed93 0b00 	vldr	d0, [r3]
 80075dc:	4874      	ldr	r0, [pc, #464]	; (80077b0 <scaraFlowDuty+0x284>)
 80075de:	f000 fdbf 	bl	8008160 <scaraFLowScurve>
 80075e2:	4603      	mov	r3, r0
 80075e4:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
			status2 = scaraFLowScurve(&(myDUTY.task.trajectory_roll.scurve), time);
 80075e8:	f107 0308 	add.w	r3, r7, #8
 80075ec:	ed93 0b00 	vldr	d0, [r3]
 80075f0:	4870      	ldr	r0, [pc, #448]	; (80077b4 <scaraFlowDuty+0x288>)
 80075f2:	f000 fdb5 	bl	8008160 <scaraFLowScurve>
 80075f6:	4603      	mov	r3, r0
 80075f8:	f887 3156 	strb.w	r3, [r7, #342]	; 0x156
			s = myDUTY.task.trajectory_3d.scurve.s_current;
 80075fc:	4b69      	ldr	r3, [pc, #420]	; (80077a4 <scaraFlowDuty+0x278>)
 80075fe:	e9d3 3498 	ldrd	r3, r4, [r3, #608]	; 0x260
 8007602:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			v = myDUTY.task.trajectory_3d.scurve.v_current;
 8007606:	4b67      	ldr	r3, [pc, #412]	; (80077a4 <scaraFlowDuty+0x278>)
 8007608:	e9d3 3496 	ldrd	r3, r4, [r3, #600]	; 0x258
 800760c:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
			angle = myDUTY.task.trajectory_roll.scurve.s_current;
 8007610:	4b64      	ldr	r3, [pc, #400]	; (80077a4 <scaraFlowDuty+0x278>)
 8007612:	e9d3 34ee 	ldrd	r3, r4, [r3, #952]	; 0x3b8
 8007616:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
			v_angle = myDUTY.task.trajectory_roll.scurve.v_current;
 800761a:	4b62      	ldr	r3, [pc, #392]	; (80077a4 <scaraFlowDuty+0x278>)
 800761c:	e9d3 34ec 	ldrd	r3, r4, [r3, #944]	; 0x3b0
 8007620:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
			dir_roll = myDUTY.task.trajectory_roll.scurve.dir;
 8007624:	4b5f      	ldr	r3, [pc, #380]	; (80077a4 <scaraFlowDuty+0x278>)
 8007626:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
 800762a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 800762e:	e001      	b.n	8007634 <scaraFlowDuty+0x108>
		} else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 8007630:	2305      	movs	r3, #5
 8007632:	e2ce      	b.n	8007bd2 <scaraFlowDuty+0x6a6>
		}

		if ( SCARA_STATUS_OK != status1) {
 8007634:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8007638:	2b00      	cmp	r3, #0
 800763a:	d002      	beq.n	8007642 <scaraFlowDuty+0x116>
			return status1;
 800763c:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8007640:	e2c7      	b.n	8007bd2 <scaraFlowDuty+0x6a6>
		}
		if ( SCARA_STATUS_OK != status2) {
 8007642:	f897 3156 	ldrb.w	r3, [r7, #342]	; 0x156
 8007646:	2b00      	cmp	r3, #0
 8007648:	d002      	beq.n	8007650 <scaraFlowDuty+0x124>
			return status2;
 800764a:	f897 3156 	ldrb.w	r3, [r7, #342]	; 0x156
 800764e:	e2c0      	b.n	8007bd2 <scaraFlowDuty+0x6a6>
		}

		//---Path flowing
			// Straight line
		if( DUTY_PATH_LINE == myDUTY.task.path.path_type) {
 8007650:	4b54      	ldr	r3, [pc, #336]	; (80077a4 <scaraFlowDuty+0x278>)
 8007652:	7a1b      	ldrb	r3, [r3, #8]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d117      	bne.n	8007688 <scaraFlowDuty+0x15c>
			status1 = scaraFlowLine(&(myDUTY.task.path.line), s);
 8007658:	ed97 0b52 	vldr	d0, [r7, #328]	; 0x148
 800765c:	4856      	ldr	r0, [pc, #344]	; (80077b8 <scaraFlowDuty+0x28c>)
 800765e:	f000 fac3 	bl	8007be8 <scaraFlowLine>
 8007662:	4603      	mov	r3, r0
 8007664:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
			x = myDUTY.task.path.line.x_current;
 8007668:	4b4e      	ldr	r3, [pc, #312]	; (80077a4 <scaraFlowDuty+0x278>)
 800766a:	e9d3 341a 	ldrd	r3, r4, [r3, #104]	; 0x68
 800766e:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
			y = myDUTY.task.path.line.y_current;
 8007672:	4b4c      	ldr	r3, [pc, #304]	; (80077a4 <scaraFlowDuty+0x278>)
 8007674:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8007678:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
			z = myDUTY.task.path.line.z_current;
 800767c:	4b49      	ldr	r3, [pc, #292]	; (80077a4 <scaraFlowDuty+0x278>)
 800767e:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 8007682:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
 8007686:	e01d      	b.n	80076c4 <scaraFlowDuty+0x198>
			// Circular
		} else if ( DUTY_PATH_CIRCLE == myDUTY.task.path.path_type) {
 8007688:	4b46      	ldr	r3, [pc, #280]	; (80077a4 <scaraFlowDuty+0x278>)
 800768a:	7a1b      	ldrb	r3, [r3, #8]
 800768c:	2b01      	cmp	r3, #1
 800768e:	d117      	bne.n	80076c0 <scaraFlowDuty+0x194>
			status1 = scaraFlowCircle(&(myDUTY.task.path.circle), s);
 8007690:	ed97 0b52 	vldr	d0, [r7, #328]	; 0x148
 8007694:	4849      	ldr	r0, [pc, #292]	; (80077bc <scaraFlowDuty+0x290>)
 8007696:	f000 fb2f 	bl	8007cf8 <scaraFlowCircle>
 800769a:	4603      	mov	r3, r0
 800769c:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
			x = myDUTY.task.path.circle.x_current;
 80076a0:	4b40      	ldr	r3, [pc, #256]	; (80077a4 <scaraFlowDuty+0x278>)
 80076a2:	e9d3 343e 	ldrd	r3, r4, [r3, #248]	; 0xf8
 80076a6:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
			y = myDUTY.task.path.circle.y_current;
 80076aa:	4b3e      	ldr	r3, [pc, #248]	; (80077a4 <scaraFlowDuty+0x278>)
 80076ac:	e9d3 3440 	ldrd	r3, r4, [r3, #256]	; 0x100
 80076b0:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
			z = myDUTY.task.path.circle.z_current;
 80076b4:	4b3b      	ldr	r3, [pc, #236]	; (80077a4 <scaraFlowDuty+0x278>)
 80076b6:	e9d3 3442 	ldrd	r3, r4, [r3, #264]	; 0x108
 80076ba:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
 80076be:	e001      	b.n	80076c4 <scaraFlowDuty+0x198>
		} else {
			return SCARA_STATUS_ERROR_TASK;
 80076c0:	2303      	movs	r3, #3
 80076c2:	e286      	b.n	8007bd2 <scaraFlowDuty+0x6a6>
		}

		positionCompute.x 		= x;
 80076c4:	f107 0210 	add.w	r2, r7, #16
 80076c8:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 80076cc:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
		positionCompute.y		= y;
 80076d0:	f107 0210 	add.w	r2, r7, #16
 80076d4:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 80076d8:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
		positionCompute.z 		= z;
 80076dc:	f107 0210 	add.w	r2, r7, #16
 80076e0:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 80076e4:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
		positionCompute.roll 	= myDUTY.task.roll_start + angle*dir_roll;
 80076e8:	4b2e      	ldr	r3, [pc, #184]	; (80077a4 <scaraFlowDuty+0x278>)
 80076ea:	e9d3 45f0 	ldrd	r4, r5, [r3, #960]	; 0x3c0
 80076ee:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80076f2:	4618      	mov	r0, r3
 80076f4:	f7f8 ff26 	bl	8000544 <__aeabi_i2d>
 80076f8:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80076fc:	f7f8 ff8c 	bl	8000618 <__aeabi_dmul>
 8007700:	4602      	mov	r2, r0
 8007702:	460b      	mov	r3, r1
 8007704:	4620      	mov	r0, r4
 8007706:	4629      	mov	r1, r5
 8007708:	f7f8 fdd0 	bl	80002ac <__adddf3>
 800770c:	4603      	mov	r3, r0
 800770e:	460c      	mov	r4, r1
 8007710:	f107 0210 	add.w	r2, r7, #16
 8007714:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

		positionCompute.q		= s;
 8007718:	f107 0210 	add.w	r2, r7, #16
 800771c:	e9d7 3452 	ldrd	r3, r4, [r7, #328]	; 0x148
 8007720:	e9c2 3400 	strd	r3, r4, [r2]
		positionCompute.q_roll  = angle;
 8007724:	f107 0210 	add.w	r2, r7, #16
 8007728:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 800772c:	e9c2 3402 	strd	r3, r4, [r2, #8]

		positionCompute.v_3d    = v;
 8007730:	f107 0210 	add.w	r2, r7, #16
 8007734:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8007738:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
		positionCompute.v_roll  = v_angle;
 800773c:	f107 0210 	add.w	r2, r7, #16
 8007740:	e9d7 3446 	ldrd	r3, r4, [r7, #280]	; 0x118
 8007744:	e9c2 342c 	strd	r3, r4, [r2, #176]	; 0xb0

		positionCompute.total_time = myDUTY.time_total;
 8007748:	4b16      	ldr	r3, [pc, #88]	; (80077a4 <scaraFlowDuty+0x278>)
 800774a:	f603 1348 	addw	r3, r3, #2376	; 0x948
 800774e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007752:	f107 0210 	add.w	r2, r7, #16
 8007756:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
		positionCompute.t		= time;
 800775a:	f107 0210 	add.w	r2, r7, #16
 800775e:	f107 0308 	add.w	r3, r7, #8
 8007762:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007766:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
		if ( FALSE == kinematicInverse(&positionCompute, pos_Current)) {
 800776a:	f107 0410 	add.w	r4, r7, #16
 800776e:	4668      	mov	r0, sp
 8007770:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8007774:	22b0      	movs	r2, #176	; 0xb0
 8007776:	4619      	mov	r1, r3
 8007778:	f00e f9d2 	bl	8015b20 <memcpy>
 800777c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8007780:	cb0c      	ldmia	r3, {r2, r3}
 8007782:	4620      	mov	r0, r4
 8007784:	f7fb ff50 	bl	8003628 <kinematicInverse>
 8007788:	4603      	mov	r3, r0
 800778a:	2b00      	cmp	r3, #0
 800778c:	d101      	bne.n	8007792 <scaraFlowDuty+0x266>
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800778e:	2307      	movs	r3, #7
 8007790:	e21f      	b.n	8007bd2 <scaraFlowDuty+0x6a6>
		} else {
			memcpy(pos_Next, &positionCompute, sizeof(SCARA_PositionTypeDef));
 8007792:	f107 0110 	add.w	r1, r7, #16
 8007796:	1d3b      	adds	r3, r7, #4
 8007798:	22b8      	movs	r2, #184	; 0xb8
 800779a:	6818      	ldr	r0, [r3, #0]
 800779c:	f00e f9c0 	bl	8015b20 <memcpy>
 80077a0:	e216      	b.n	8007bd0 <scaraFlowDuty+0x6a4>
 80077a2:	bf00      	nop
 80077a4:	200053d0 	.word	0x200053d0
 80077a8:	200054e8 	.word	0x200054e8
 80077ac:	20005640 	.word	0x20005640
 80077b0:	20005568 	.word	0x20005568
 80077b4:	200056c0 	.word	0x200056c0
 80077b8:	200053e0 	.word	0x200053e0
 80077bc:	20005450 	.word	0x20005450
		}

	/*---- Joint space -----*/
	} else if (DUTY_SPACE_JOINT == myDUTY.space_type) {
 80077c0:	4b8b      	ldr	r3, [pc, #556]	; (80079f0 <scaraFlowDuty+0x4c4>)
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	f040 8201 	bne.w	8007bcc <scaraFlowDuty+0x6a0>
		double s0, s1, s2, s3;
		double v0, v1, v2, v3;
		int8_t dir0, dir1, dir2, dir3;
		// Trajectory flowing
			// LSPB
		if( DUTY_TRAJECTORY_LSPB == myDUTY.joint.trajectory[0].trajectory_type) {
 80077ca:	4b89      	ldr	r3, [pc, #548]	; (80079f0 <scaraFlowDuty+0x4c4>)
 80077cc:	f893 33c8 	ldrb.w	r3, [r3, #968]	; 0x3c8
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d174      	bne.n	80078be <scaraFlowDuty+0x392>
			status1 = scaraFlowLSPB(&(myDUTY.joint.trajectory[0].lspb), time);
 80077d4:	f107 0308 	add.w	r3, r7, #8
 80077d8:	ed93 0b00 	vldr	d0, [r3]
 80077dc:	4885      	ldr	r0, [pc, #532]	; (80079f4 <scaraFlowDuty+0x4c8>)
 80077de:	f000 fb13 	bl	8007e08 <scaraFlowLSPB>
 80077e2:	4603      	mov	r3, r0
 80077e4:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
			status2 = scaraFlowLSPB(&(myDUTY.joint.trajectory[1].lspb), time);
 80077e8:	f107 0308 	add.w	r3, r7, #8
 80077ec:	ed93 0b00 	vldr	d0, [r3]
 80077f0:	4881      	ldr	r0, [pc, #516]	; (80079f8 <scaraFlowDuty+0x4cc>)
 80077f2:	f000 fb09 	bl	8007e08 <scaraFlowLSPB>
 80077f6:	4603      	mov	r3, r0
 80077f8:	f887 3156 	strb.w	r3, [r7, #342]	; 0x156
			status3 = scaraFlowLSPB(&(myDUTY.joint.trajectory[2].lspb), time);
 80077fc:	f107 0308 	add.w	r3, r7, #8
 8007800:	ed93 0b00 	vldr	d0, [r3]
 8007804:	487d      	ldr	r0, [pc, #500]	; (80079fc <scaraFlowDuty+0x4d0>)
 8007806:	f000 faff 	bl	8007e08 <scaraFlowLSPB>
 800780a:	4603      	mov	r3, r0
 800780c:	f887 3155 	strb.w	r3, [r7, #341]	; 0x155
			status4 = scaraFlowLSPB(&(myDUTY.joint.trajectory[3].lspb), time);
 8007810:	f107 0308 	add.w	r3, r7, #8
 8007814:	ed93 0b00 	vldr	d0, [r3]
 8007818:	4879      	ldr	r0, [pc, #484]	; (8007a00 <scaraFlowDuty+0x4d4>)
 800781a:	f000 faf5 	bl	8007e08 <scaraFlowLSPB>
 800781e:	4603      	mov	r3, r0
 8007820:	f887 3154 	strb.w	r3, [r7, #340]	; 0x154

			dir0 = myDUTY.joint.trajectory[0].lspb.dir;
 8007824:	4b72      	ldr	r3, [pc, #456]	; (80079f0 <scaraFlowDuty+0x4c4>)
 8007826:	f893 33d0 	ldrb.w	r3, [r3, #976]	; 0x3d0
 800782a:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			dir1 = myDUTY.joint.trajectory[1].lspb.dir;
 800782e:	4b70      	ldr	r3, [pc, #448]	; (80079f0 <scaraFlowDuty+0x4c4>)
 8007830:	f893 3528 	ldrb.w	r3, [r3, #1320]	; 0x528
 8007834:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
			dir2 = myDUTY.joint.trajectory[2].lspb.dir;
 8007838:	4b6d      	ldr	r3, [pc, #436]	; (80079f0 <scaraFlowDuty+0x4c4>)
 800783a:	f893 3680 	ldrb.w	r3, [r3, #1664]	; 0x680
 800783e:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
			dir3 = myDUTY.joint.trajectory[3].lspb.dir;
 8007842:	4b6b      	ldr	r3, [pc, #428]	; (80079f0 <scaraFlowDuty+0x4c4>)
 8007844:	f893 37d8 	ldrb.w	r3, [r3, #2008]	; 0x7d8
 8007848:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc

			s0 = myDUTY.joint.trajectory[0].lspb.s_current;
 800784c:	4b68      	ldr	r3, [pc, #416]	; (80079f0 <scaraFlowDuty+0x4c4>)
 800784e:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 8007852:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007856:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
			s1 = myDUTY.joint.trajectory[1].lspb.s_current;
 800785a:	4b65      	ldr	r3, [pc, #404]	; (80079f0 <scaraFlowDuty+0x4c4>)
 800785c:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 8007860:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007864:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
			s2 = myDUTY.joint.trajectory[2].lspb.s_current;
 8007868:	4b61      	ldr	r3, [pc, #388]	; (80079f0 <scaraFlowDuty+0x4c4>)
 800786a:	f503 63df 	add.w	r3, r3, #1784	; 0x6f8
 800786e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007872:	e9c7 343e 	strd	r3, r4, [r7, #248]	; 0xf8
			s3 = myDUTY.joint.trajectory[3].lspb.s_current;
 8007876:	4b5e      	ldr	r3, [pc, #376]	; (80079f0 <scaraFlowDuty+0x4c4>)
 8007878:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 800787c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007880:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0

			v0 = myDUTY.joint.trajectory[0].lspb.v_current;
 8007884:	4b5a      	ldr	r3, [pc, #360]	; (80079f0 <scaraFlowDuty+0x4c4>)
 8007886:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800788a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800788e:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
			v1 = myDUTY.joint.trajectory[1].lspb.v_current;
 8007892:	4b57      	ldr	r3, [pc, #348]	; (80079f0 <scaraFlowDuty+0x4c4>)
 8007894:	f503 63b3 	add.w	r3, r3, #1432	; 0x598
 8007898:	e9d3 3400 	ldrd	r3, r4, [r3]
 800789c:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
			v2 = myDUTY.joint.trajectory[2].lspb.v_current;
 80078a0:	4b53      	ldr	r3, [pc, #332]	; (80079f0 <scaraFlowDuty+0x4c4>)
 80078a2:	f503 63de 	add.w	r3, r3, #1776	; 0x6f0
 80078a6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80078aa:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
			v3 = myDUTY.joint.trajectory[3].lspb.v_current;
 80078ae:	4b50      	ldr	r3, [pc, #320]	; (80079f0 <scaraFlowDuty+0x4c4>)
 80078b0:	f603 0348 	addw	r3, r3, #2120	; 0x848
 80078b4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80078b8:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
 80078bc:	e07b      	b.n	80079b6 <scaraFlowDuty+0x48a>

			// SCURVE
		} else if ( DUTY_TRAJECTORY_SCURVE == myDUTY.joint.trajectory[0].trajectory_type) {
 80078be:	4b4c      	ldr	r3, [pc, #304]	; (80079f0 <scaraFlowDuty+0x4c4>)
 80078c0:	f893 33c8 	ldrb.w	r3, [r3, #968]	; 0x3c8
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d174      	bne.n	80079b2 <scaraFlowDuty+0x486>
			status1 = scaraFLowScurve(&(myDUTY.joint.trajectory[0].scurve), time);
 80078c8:	f107 0308 	add.w	r3, r7, #8
 80078cc:	ed93 0b00 	vldr	d0, [r3]
 80078d0:	484c      	ldr	r0, [pc, #304]	; (8007a04 <scaraFlowDuty+0x4d8>)
 80078d2:	f000 fc45 	bl	8008160 <scaraFLowScurve>
 80078d6:	4603      	mov	r3, r0
 80078d8:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
			status2 = scaraFLowScurve(&(myDUTY.joint.trajectory[1].scurve), time);
 80078dc:	f107 0308 	add.w	r3, r7, #8
 80078e0:	ed93 0b00 	vldr	d0, [r3]
 80078e4:	4848      	ldr	r0, [pc, #288]	; (8007a08 <scaraFlowDuty+0x4dc>)
 80078e6:	f000 fc3b 	bl	8008160 <scaraFLowScurve>
 80078ea:	4603      	mov	r3, r0
 80078ec:	f887 3156 	strb.w	r3, [r7, #342]	; 0x156
			status3 = scaraFLowScurve(&(myDUTY.joint.trajectory[2].scurve), time);
 80078f0:	f107 0308 	add.w	r3, r7, #8
 80078f4:	ed93 0b00 	vldr	d0, [r3]
 80078f8:	4844      	ldr	r0, [pc, #272]	; (8007a0c <scaraFlowDuty+0x4e0>)
 80078fa:	f000 fc31 	bl	8008160 <scaraFLowScurve>
 80078fe:	4603      	mov	r3, r0
 8007900:	f887 3155 	strb.w	r3, [r7, #341]	; 0x155
			status4 = scaraFLowScurve(&(myDUTY.joint.trajectory[3].scurve), time);
 8007904:	f107 0308 	add.w	r3, r7, #8
 8007908:	ed93 0b00 	vldr	d0, [r3]
 800790c:	4840      	ldr	r0, [pc, #256]	; (8007a10 <scaraFlowDuty+0x4e4>)
 800790e:	f000 fc27 	bl	8008160 <scaraFLowScurve>
 8007912:	4603      	mov	r3, r0
 8007914:	f887 3154 	strb.w	r3, [r7, #340]	; 0x154
			dir0 = myDUTY.joint.trajectory[0].scurve.dir;
 8007918:	4b35      	ldr	r3, [pc, #212]	; (80079f0 <scaraFlowDuty+0x4c4>)
 800791a:	f893 3450 	ldrb.w	r3, [r3, #1104]	; 0x450
 800791e:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			dir1 = myDUTY.joint.trajectory[1].scurve.dir;
 8007922:	4b33      	ldr	r3, [pc, #204]	; (80079f0 <scaraFlowDuty+0x4c4>)
 8007924:	f893 35a8 	ldrb.w	r3, [r3, #1448]	; 0x5a8
 8007928:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
			dir2 = myDUTY.joint.trajectory[2].scurve.dir;
 800792c:	4b30      	ldr	r3, [pc, #192]	; (80079f0 <scaraFlowDuty+0x4c4>)
 800792e:	f893 3700 	ldrb.w	r3, [r3, #1792]	; 0x700
 8007932:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
			dir3 = myDUTY.joint.trajectory[3].scurve.dir;
 8007936:	4b2e      	ldr	r3, [pc, #184]	; (80079f0 <scaraFlowDuty+0x4c4>)
 8007938:	f893 3858 	ldrb.w	r3, [r3, #2136]	; 0x858
 800793c:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
			s0 = myDUTY.joint.trajectory[0].scurve.s_current;
 8007940:	4b2b      	ldr	r3, [pc, #172]	; (80079f0 <scaraFlowDuty+0x4c4>)
 8007942:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 8007946:	e9d3 3400 	ldrd	r3, r4, [r3]
 800794a:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
			s1 = myDUTY.joint.trajectory[1].scurve.s_current;
 800794e:	4b28      	ldr	r3, [pc, #160]	; (80079f0 <scaraFlowDuty+0x4c4>)
 8007950:	f503 63ce 	add.w	r3, r3, #1648	; 0x670
 8007954:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007958:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
			s2 = myDUTY.joint.trajectory[2].scurve.s_current;
 800795c:	4b24      	ldr	r3, [pc, #144]	; (80079f0 <scaraFlowDuty+0x4c4>)
 800795e:	f503 63f9 	add.w	r3, r3, #1992	; 0x7c8
 8007962:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007966:	e9c7 343e 	strd	r3, r4, [r7, #248]	; 0xf8
			s3 = myDUTY.joint.trajectory[3].scurve.s_current;
 800796a:	4b21      	ldr	r3, [pc, #132]	; (80079f0 <scaraFlowDuty+0x4c4>)
 800796c:	f503 6312 	add.w	r3, r3, #2336	; 0x920
 8007970:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007974:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0

			v0 = myDUTY.joint.trajectory[0].scurve.v_current;
 8007978:	4b1d      	ldr	r3, [pc, #116]	; (80079f0 <scaraFlowDuty+0x4c4>)
 800797a:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 800797e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007982:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
			v1 = myDUTY.joint.trajectory[1].scurve.v_current;
 8007986:	4b1a      	ldr	r3, [pc, #104]	; (80079f0 <scaraFlowDuty+0x4c4>)
 8007988:	f503 63cd 	add.w	r3, r3, #1640	; 0x668
 800798c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007990:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
			v2 = myDUTY.joint.trajectory[2].scurve.v_current;
 8007994:	4b16      	ldr	r3, [pc, #88]	; (80079f0 <scaraFlowDuty+0x4c4>)
 8007996:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 800799a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800799e:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
			v3 = myDUTY.joint.trajectory[3].scurve.v_current;
 80079a2:	4b13      	ldr	r3, [pc, #76]	; (80079f0 <scaraFlowDuty+0x4c4>)
 80079a4:	f603 1318 	addw	r3, r3, #2328	; 0x918
 80079a8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80079ac:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
 80079b0:	e001      	b.n	80079b6 <scaraFlowDuty+0x48a>

		} else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 80079b2:	2305      	movs	r3, #5
 80079b4:	e10d      	b.n	8007bd2 <scaraFlowDuty+0x6a6>
		}
		// Check init status
		if ( SCARA_STATUS_OK != status1) {
 80079b6:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d002      	beq.n	80079c4 <scaraFlowDuty+0x498>
			return status1;
 80079be:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 80079c2:	e106      	b.n	8007bd2 <scaraFlowDuty+0x6a6>
		}
		if ( SCARA_STATUS_OK != status2) {
 80079c4:	f897 3156 	ldrb.w	r3, [r7, #342]	; 0x156
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d002      	beq.n	80079d2 <scaraFlowDuty+0x4a6>
			return status2;
 80079cc:	f897 3156 	ldrb.w	r3, [r7, #342]	; 0x156
 80079d0:	e0ff      	b.n	8007bd2 <scaraFlowDuty+0x6a6>
		}
		if ( SCARA_STATUS_OK != status3) {
 80079d2:	f897 3155 	ldrb.w	r3, [r7, #341]	; 0x155
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d002      	beq.n	80079e0 <scaraFlowDuty+0x4b4>
			return status3;
 80079da:	f897 3155 	ldrb.w	r3, [r7, #341]	; 0x155
 80079de:	e0f8      	b.n	8007bd2 <scaraFlowDuty+0x6a6>
		}
		if ( SCARA_STATUS_OK != status4) {
 80079e0:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d015      	beq.n	8007a14 <scaraFlowDuty+0x4e8>
			return status4;
 80079e8:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80079ec:	e0f1      	b.n	8007bd2 <scaraFlowDuty+0x6a6>
 80079ee:	bf00      	nop
 80079f0:	200053d0 	.word	0x200053d0
 80079f4:	200057a0 	.word	0x200057a0
 80079f8:	200058f8 	.word	0x200058f8
 80079fc:	20005a50 	.word	0x20005a50
 8007a00:	20005ba8 	.word	0x20005ba8
 8007a04:	20005820 	.word	0x20005820
 8007a08:	20005978 	.word	0x20005978
 8007a0c:	20005ad0 	.word	0x20005ad0
 8007a10:	20005c28 	.word	0x20005c28
		}

		positionCompute.Theta1 	= myDUTY.joint.theta1_start + s0*dir0;
 8007a14:	4b73      	ldr	r3, [pc, #460]	; (8007be4 <scaraFlowDuty+0x6b8>)
 8007a16:	f603 1328 	addw	r3, r3, #2344	; 0x928
 8007a1a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007a1e:	f997 30cf 	ldrsb.w	r3, [r7, #207]	; 0xcf
 8007a22:	4618      	mov	r0, r3
 8007a24:	f7f8 fd8e 	bl	8000544 <__aeabi_i2d>
 8007a28:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 8007a2c:	f7f8 fdf4 	bl	8000618 <__aeabi_dmul>
 8007a30:	4602      	mov	r2, r0
 8007a32:	460b      	mov	r3, r1
 8007a34:	4620      	mov	r0, r4
 8007a36:	4629      	mov	r1, r5
 8007a38:	f7f8 fc38 	bl	80002ac <__adddf3>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	460c      	mov	r4, r1
 8007a40:	f107 0210 	add.w	r2, r7, #16
 8007a44:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		positionCompute.Theta2 	= myDUTY.joint.theta2_start + s1*dir1;
 8007a48:	4b66      	ldr	r3, [pc, #408]	; (8007be4 <scaraFlowDuty+0x6b8>)
 8007a4a:	f503 6313 	add.w	r3, r3, #2352	; 0x930
 8007a4e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007a52:	f997 30ce 	ldrsb.w	r3, [r7, #206]	; 0xce
 8007a56:	4618      	mov	r0, r3
 8007a58:	f7f8 fd74 	bl	8000544 <__aeabi_i2d>
 8007a5c:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8007a60:	f7f8 fdda 	bl	8000618 <__aeabi_dmul>
 8007a64:	4602      	mov	r2, r0
 8007a66:	460b      	mov	r3, r1
 8007a68:	4620      	mov	r0, r4
 8007a6a:	4629      	mov	r1, r5
 8007a6c:	f7f8 fc1e 	bl	80002ac <__adddf3>
 8007a70:	4603      	mov	r3, r0
 8007a72:	460c      	mov	r4, r1
 8007a74:	f107 0210 	add.w	r2, r7, #16
 8007a78:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		positionCompute.D3 		= myDUTY.joint.d3_start 	+ s2*dir2;
 8007a7c:	4b59      	ldr	r3, [pc, #356]	; (8007be4 <scaraFlowDuty+0x6b8>)
 8007a7e:	f603 1338 	addw	r3, r3, #2360	; 0x938
 8007a82:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007a86:	f997 30cd 	ldrsb.w	r3, [r7, #205]	; 0xcd
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f7f8 fd5a 	bl	8000544 <__aeabi_i2d>
 8007a90:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 8007a94:	f7f8 fdc0 	bl	8000618 <__aeabi_dmul>
 8007a98:	4602      	mov	r2, r0
 8007a9a:	460b      	mov	r3, r1
 8007a9c:	4620      	mov	r0, r4
 8007a9e:	4629      	mov	r1, r5
 8007aa0:	f7f8 fc04 	bl	80002ac <__adddf3>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	460c      	mov	r4, r1
 8007aa8:	f107 0210 	add.w	r2, r7, #16
 8007aac:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
		positionCompute.Theta4 	= myDUTY.joint.theta4_start + s3*dir3;
 8007ab0:	4b4c      	ldr	r3, [pc, #304]	; (8007be4 <scaraFlowDuty+0x6b8>)
 8007ab2:	f503 6314 	add.w	r3, r3, #2368	; 0x940
 8007ab6:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007aba:	f997 30cc 	ldrsb.w	r3, [r7, #204]	; 0xcc
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f7f8 fd40 	bl	8000544 <__aeabi_i2d>
 8007ac4:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8007ac8:	f7f8 fda6 	bl	8000618 <__aeabi_dmul>
 8007acc:	4602      	mov	r2, r0
 8007ace:	460b      	mov	r3, r1
 8007ad0:	4620      	mov	r0, r4
 8007ad2:	4629      	mov	r1, r5
 8007ad4:	f7f8 fbea 	bl	80002ac <__adddf3>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	460c      	mov	r4, r1
 8007adc:	f107 0210 	add.w	r2, r7, #16
 8007ae0:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80

		positionCompute.v_theta1 	= v0;
 8007ae4:	f107 0210 	add.w	r2, r7, #16
 8007ae8:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 8007aec:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
		positionCompute.v_theta2 	= v1;
 8007af0:	f107 0210 	add.w	r2, r7, #16
 8007af4:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8007af8:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
		positionCompute.v_d3 		= v2;
 8007afc:	f107 0210 	add.w	r2, r7, #16
 8007b00:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 8007b04:	e9c2 3426 	strd	r3, r4, [r2, #152]	; 0x98
		positionCompute.v_theta4 	= v3;
 8007b08:	f107 0210 	add.w	r2, r7, #16
 8007b0c:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 8007b10:	e9c2 3428 	strd	r3, r4, [r2, #160]	; 0xa0

		positionCompute.q_theta1 = s0;
 8007b14:	f107 0210 	add.w	r2, r7, #16
 8007b18:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 8007b1c:	e9c2 3404 	strd	r3, r4, [r2, #16]
		positionCompute.q_theta2 = s1;
 8007b20:	f107 0210 	add.w	r2, r7, #16
 8007b24:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8007b28:	e9c2 3406 	strd	r3, r4, [r2, #24]
		positionCompute.q_d3	 = s2;
 8007b2c:	f107 0210 	add.w	r2, r7, #16
 8007b30:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 8007b34:	e9c2 3408 	strd	r3, r4, [r2, #32]
		positionCompute.q_theta4 = s3;
 8007b38:	f107 0210 	add.w	r2, r7, #16
 8007b3c:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8007b40:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28

		positionCompute.total_time = myDUTY.time_total;
 8007b44:	4b27      	ldr	r3, [pc, #156]	; (8007be4 <scaraFlowDuty+0x6b8>)
 8007b46:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8007b4a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007b4e:	f107 0210 	add.w	r2, r7, #16
 8007b52:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
		positionCompute.t		= time;
 8007b56:	f107 0210 	add.w	r2, r7, #16
 8007b5a:	f107 0308 	add.w	r3, r7, #8
 8007b5e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007b62:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
		// Check workspace
		if( SCARA_STATUS_OK != scaraCheckWorkSpace4(positionCompute.Theta1,
 8007b66:	f107 0310 	add.w	r3, r7, #16
 8007b6a:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8007b6e:	f107 0310 	add.w	r3, r7, #16
 8007b72:	ed93 6b1c 	vldr	d6, [r3, #112]	; 0x70
 8007b76:	f107 0310 	add.w	r3, r7, #16
 8007b7a:	ed93 5b1e 	vldr	d5, [r3, #120]	; 0x78
 8007b7e:	f107 0310 	add.w	r3, r7, #16
 8007b82:	ed93 4b20 	vldr	d4, [r3, #128]	; 0x80
 8007b86:	eeb0 3a44 	vmov.f32	s6, s8
 8007b8a:	eef0 3a64 	vmov.f32	s7, s9
 8007b8e:	eeb0 2a45 	vmov.f32	s4, s10
 8007b92:	eef0 2a65 	vmov.f32	s5, s11
 8007b96:	eeb0 1a46 	vmov.f32	s2, s12
 8007b9a:	eef0 1a66 	vmov.f32	s3, s13
 8007b9e:	eeb0 0a47 	vmov.f32	s0, s14
 8007ba2:	eef0 0a67 	vmov.f32	s1, s15
 8007ba6:	f001 f9bf 	bl	8008f28 <scaraCheckWorkSpace4>
 8007baa:	4603      	mov	r3, r0
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d001      	beq.n	8007bb4 <scaraFlowDuty+0x688>
							 	 	 	  positionCompute.Theta2,
										  positionCompute.D3,
										  positionCompute.Theta4)) {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8007bb0:	2307      	movs	r3, #7
 8007bb2:	e00e      	b.n	8007bd2 <scaraFlowDuty+0x6a6>
		} else {
			memcpy(pos_Next, &positionCompute, sizeof(SCARA_PositionTypeDef));
 8007bb4:	f107 0110 	add.w	r1, r7, #16
 8007bb8:	1d3b      	adds	r3, r7, #4
 8007bba:	22b8      	movs	r2, #184	; 0xb8
 8007bbc:	6818      	ldr	r0, [r3, #0]
 8007bbe:	f00d ffaf 	bl	8015b20 <memcpy>
		}
		kinematicForward(pos_Next);
 8007bc2:	1d3b      	adds	r3, r7, #4
 8007bc4:	6818      	ldr	r0, [r3, #0]
 8007bc6:	f7fb fbf3 	bl	80033b0 <kinematicForward>
 8007bca:	e001      	b.n	8007bd0 <scaraFlowDuty+0x6a4>

	} else {
		return SCARA_STATUS_ERROR_SPACE;
 8007bcc:	2302      	movs	r3, #2
 8007bce:	e000      	b.n	8007bd2 <scaraFlowDuty+0x6a6>
	}

	return SCARA_STATUS_OK;
 8007bd0:	2300      	movs	r3, #0
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8007bde:	b002      	add	sp, #8
 8007be0:	4770      	bx	lr
 8007be2:	bf00      	nop
 8007be4:	200053d0 	.word	0x200053d0

08007be8 <scaraFlowLine>:

/* Compute new x, y ,z corresponding to s */
SCARA_StatusTypeDef	scaraFlowLine		(Path_Line_TypeDef *line, double s) {
 8007be8:	b5b0      	push	{r4, r5, r7, lr}
 8007bea:	b084      	sub	sp, #16
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	60f8      	str	r0, [r7, #12]
 8007bf0:	ed87 0b00 	vstr	d0, [r7]
	// Avoid div with 0
	if ( line->total_s > 0.01) {
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8007bfa:	a33d      	add	r3, pc, #244	; (adr r3, 8007cf0 <scaraFlowLine+0x108>)
 8007bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c00:	f7f8 ff9a 	bl	8000b38 <__aeabi_dcmpgt>
 8007c04:	4603      	mov	r3, r0
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d05a      	beq.n	8007cc0 <scaraFlowLine+0xd8>
		line->x_current	 = line->x0 + line->denta_x*s/line->total_s;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8007c16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c1a:	f7f8 fcfd 	bl	8000618 <__aeabi_dmul>
 8007c1e:	4602      	mov	r2, r0
 8007c20:	460b      	mov	r3, r1
 8007c22:	4610      	mov	r0, r2
 8007c24:	4619      	mov	r1, r3
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8007c2c:	f7f8 fe1e 	bl	800086c <__aeabi_ddiv>
 8007c30:	4602      	mov	r2, r0
 8007c32:	460b      	mov	r3, r1
 8007c34:	4620      	mov	r0, r4
 8007c36:	4629      	mov	r1, r5
 8007c38:	f7f8 fb38 	bl	80002ac <__adddf3>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	460c      	mov	r4, r1
 8007c40:	68fa      	ldr	r2, [r7, #12]
 8007c42:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
		line->y_current	 = line->y0 + line->denta_y*s/line->total_s;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8007c52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c56:	f7f8 fcdf 	bl	8000618 <__aeabi_dmul>
 8007c5a:	4602      	mov	r2, r0
 8007c5c:	460b      	mov	r3, r1
 8007c5e:	4610      	mov	r0, r2
 8007c60:	4619      	mov	r1, r3
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8007c68:	f7f8 fe00 	bl	800086c <__aeabi_ddiv>
 8007c6c:	4602      	mov	r2, r0
 8007c6e:	460b      	mov	r3, r1
 8007c70:	4620      	mov	r0, r4
 8007c72:	4629      	mov	r1, r5
 8007c74:	f7f8 fb1a 	bl	80002ac <__adddf3>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	460c      	mov	r4, r1
 8007c7c:	68fa      	ldr	r2, [r7, #12]
 8007c7e:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
		line->z_current	 = line->z0 + line->denta_z*s/line->total_s;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8007c8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c92:	f7f8 fcc1 	bl	8000618 <__aeabi_dmul>
 8007c96:	4602      	mov	r2, r0
 8007c98:	460b      	mov	r3, r1
 8007c9a:	4610      	mov	r0, r2
 8007c9c:	4619      	mov	r1, r3
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8007ca4:	f7f8 fde2 	bl	800086c <__aeabi_ddiv>
 8007ca8:	4602      	mov	r2, r0
 8007caa:	460b      	mov	r3, r1
 8007cac:	4620      	mov	r0, r4
 8007cae:	4629      	mov	r1, r5
 8007cb0:	f7f8 fafc 	bl	80002ac <__adddf3>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	460c      	mov	r4, r1
 8007cb8:	68fa      	ldr	r2, [r7, #12]
 8007cba:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
 8007cbe:	e011      	b.n	8007ce4 <scaraFlowLine+0xfc>
	} else {
		line->x_current = line->x1;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8007cc6:	68fa      	ldr	r2, [r7, #12]
 8007cc8:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
		line->y_current = line->y1;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8007cd2:	68fa      	ldr	r2, [r7, #12]
 8007cd4:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
		line->z_current = line->z1;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8007cde:	68fa      	ldr	r2, [r7, #12]
 8007ce0:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
	}

	return SCARA_STATUS_OK;
 8007ce4:	2300      	movs	r3, #0
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3710      	adds	r7, #16
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bdb0      	pop	{r4, r5, r7, pc}
 8007cee:	bf00      	nop
 8007cf0:	47ae147b 	.word	0x47ae147b
 8007cf4:	3f847ae1 	.word	0x3f847ae1

08007cf8 <scaraFlowCircle>:

/* Compute new x, y ,z corresponding to s */
SCARA_StatusTypeDef	scaraFlowCircle		(Path_Circle_TypeDef *circle, double s) {
 8007cf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007cfc:	b086      	sub	sp, #24
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	60f8      	str	r0, [r7, #12]
 8007d02:	ed87 0b00 	vstr	d0, [r7]
	double angle;
	angle = s/(circle->radius);
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8007d0c:	461a      	mov	r2, r3
 8007d0e:	4623      	mov	r3, r4
 8007d10:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d14:	f7f8 fdaa 	bl	800086c <__aeabi_ddiv>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	460c      	mov	r4, r1
 8007d1c:	e9c7 3404 	strd	r3, r4, [r7, #16]
	circle->x_current = circle->xi + circle->radius*cos(circle->angle_start + circle->dir*angle);
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	e9d3 ab04 	ldrd	sl, fp, [r3, #16]
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	f993 3000 	ldrsb.w	r3, [r3]
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f7f8 fc03 	bl	8000544 <__aeabi_i2d>
 8007d3e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007d42:	f7f8 fc69 	bl	8000618 <__aeabi_dmul>
 8007d46:	4602      	mov	r2, r0
 8007d48:	460b      	mov	r3, r1
 8007d4a:	4650      	mov	r0, sl
 8007d4c:	4659      	mov	r1, fp
 8007d4e:	f7f8 faad 	bl	80002ac <__adddf3>
 8007d52:	4602      	mov	r2, r0
 8007d54:	460b      	mov	r3, r1
 8007d56:	ec43 2b17 	vmov	d7, r2, r3
 8007d5a:	eeb0 0a47 	vmov.f32	s0, s14
 8007d5e:	eef0 0a67 	vmov.f32	s1, s15
 8007d62:	f012 f90d 	bl	8019f80 <cos>
 8007d66:	ec53 2b10 	vmov	r2, r3, d0
 8007d6a:	4640      	mov	r0, r8
 8007d6c:	4649      	mov	r1, r9
 8007d6e:	f7f8 fc53 	bl	8000618 <__aeabi_dmul>
 8007d72:	4602      	mov	r2, r0
 8007d74:	460b      	mov	r3, r1
 8007d76:	4620      	mov	r0, r4
 8007d78:	4629      	mov	r1, r5
 8007d7a:	f7f8 fa97 	bl	80002ac <__adddf3>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	460c      	mov	r4, r1
 8007d82:	68fa      	ldr	r2, [r7, #12]
 8007d84:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	circle->y_current = circle->yi + circle->radius*sin(circle->angle_start + circle->dir*angle);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	e9d3 ab04 	ldrd	sl, fp, [r3, #16]
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	f993 3000 	ldrsb.w	r3, [r3]
 8007da0:	4618      	mov	r0, r3
 8007da2:	f7f8 fbcf 	bl	8000544 <__aeabi_i2d>
 8007da6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007daa:	f7f8 fc35 	bl	8000618 <__aeabi_dmul>
 8007dae:	4602      	mov	r2, r0
 8007db0:	460b      	mov	r3, r1
 8007db2:	4650      	mov	r0, sl
 8007db4:	4659      	mov	r1, fp
 8007db6:	f7f8 fa79 	bl	80002ac <__adddf3>
 8007dba:	4602      	mov	r2, r0
 8007dbc:	460b      	mov	r3, r1
 8007dbe:	ec43 2b17 	vmov	d7, r2, r3
 8007dc2:	eeb0 0a47 	vmov.f32	s0, s14
 8007dc6:	eef0 0a67 	vmov.f32	s1, s15
 8007dca:	f012 f969 	bl	801a0a0 <sin>
 8007dce:	ec53 2b10 	vmov	r2, r3, d0
 8007dd2:	4640      	mov	r0, r8
 8007dd4:	4649      	mov	r1, r9
 8007dd6:	f7f8 fc1f 	bl	8000618 <__aeabi_dmul>
 8007dda:	4602      	mov	r2, r0
 8007ddc:	460b      	mov	r3, r1
 8007dde:	4620      	mov	r0, r4
 8007de0:	4629      	mov	r1, r5
 8007de2:	f7f8 fa63 	bl	80002ac <__adddf3>
 8007de6:	4603      	mov	r3, r0
 8007de8:	460c      	mov	r4, r1
 8007dea:	68fa      	ldr	r2, [r7, #12]
 8007dec:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
	circle->z_current = circle->zi; // XY plane
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8007df6:	68fa      	ldr	r2, [r7, #12]
 8007df8:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88

	return SCARA_STATUS_OK;
 8007dfc:	2300      	movs	r3, #0
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3718      	adds	r7, #24
 8007e02:	46bd      	mov	sp, r7
 8007e04:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007e08 <scaraFlowLSPB>:

/* Compute new s corresponding to time */
SCARA_StatusTypeDef	scaraFlowLSPB		(Trajectory_LSPB_TypeDef *lspb, double time) {
 8007e08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007e0c:	b08b      	sub	sp, #44	; 0x2c
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	60f8      	str	r0, [r7, #12]
 8007e12:	ed87 0b00 	vstr	d0, [r7]
	double tf, td, ta;

	tf = lspb->Tf;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8007e1c:	e9c7 2308 	strd	r2, r3, [r7, #32]
	td = lspb->Td;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8007e26:	e9c7 2306 	strd	r2, r3, [r7, #24]
	ta = lspb->Ta;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8007e30:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Accelerate
	if ( 0.0f <= time && time <= ta) {
 8007e34:	f04f 0200 	mov.w	r2, #0
 8007e38:	f04f 0300 	mov.w	r3, #0
 8007e3c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e40:	f7f8 fe70 	bl	8000b24 <__aeabi_dcmpge>
 8007e44:	4603      	mov	r3, r0
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d05b      	beq.n	8007f02 <scaraFlowLSPB+0xfa>
 8007e4a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007e4e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e52:	f7f8 fe5d 	bl	8000b10 <__aeabi_dcmple>
 8007e56:	4603      	mov	r3, r0
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d052      	beq.n	8007f02 <scaraFlowLSPB+0xfa>
		lspb->a_current		=	lspb->a_design;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8007e62:	68fa      	ldr	r2, [r7, #12]
 8007e64:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		lspb->v_current		=	lspb->v0 + lspb->a_design*time;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8007e74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e78:	f7f8 fbce 	bl	8000618 <__aeabi_dmul>
 8007e7c:	4602      	mov	r2, r0
 8007e7e:	460b      	mov	r3, r1
 8007e80:	4620      	mov	r0, r4
 8007e82:	4629      	mov	r1, r5
 8007e84:	f7f8 fa12 	bl	80002ac <__adddf3>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	460c      	mov	r4, r1
 8007e8c:	68fa      	ldr	r2, [r7, #12]
 8007e8e:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->s0 + lspb->v0*time + 0.5*lspb->a_design*time*time;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8007e9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ea2:	f7f8 fbb9 	bl	8000618 <__aeabi_dmul>
 8007ea6:	4602      	mov	r2, r0
 8007ea8:	460b      	mov	r3, r1
 8007eaa:	4620      	mov	r0, r4
 8007eac:	4629      	mov	r1, r5
 8007eae:	f7f8 f9fd 	bl	80002ac <__adddf3>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	460c      	mov	r4, r1
 8007eb6:	4625      	mov	r5, r4
 8007eb8:	461c      	mov	r4, r3
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8007ec0:	f04f 0200 	mov.w	r2, #0
 8007ec4:	4ba5      	ldr	r3, [pc, #660]	; (800815c <scaraFlowLSPB+0x354>)
 8007ec6:	f7f8 fba7 	bl	8000618 <__aeabi_dmul>
 8007eca:	4602      	mov	r2, r0
 8007ecc:	460b      	mov	r3, r1
 8007ece:	4610      	mov	r0, r2
 8007ed0:	4619      	mov	r1, r3
 8007ed2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ed6:	f7f8 fb9f 	bl	8000618 <__aeabi_dmul>
 8007eda:	4602      	mov	r2, r0
 8007edc:	460b      	mov	r3, r1
 8007ede:	4610      	mov	r0, r2
 8007ee0:	4619      	mov	r1, r3
 8007ee2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ee6:	f7f8 fb97 	bl	8000618 <__aeabi_dmul>
 8007eea:	4602      	mov	r2, r0
 8007eec:	460b      	mov	r3, r1
 8007eee:	4620      	mov	r0, r4
 8007ef0:	4629      	mov	r1, r5
 8007ef2:	f7f8 f9db 	bl	80002ac <__adddf3>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	460c      	mov	r4, r1
 8007efa:	68fa      	ldr	r2, [r7, #12]
 8007efc:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 8007f00:	e125      	b.n	800814e <scaraFlowLSPB+0x346>
	// Constant velocity
	} else if (ta <= time && time <= (tf - td)) {
 8007f02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f06:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007f0a:	f7f8 fe01 	bl	8000b10 <__aeabi_dcmple>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d05e      	beq.n	8007fd2 <scaraFlowLSPB+0x1ca>
 8007f14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007f18:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007f1c:	f7f8 f9c4 	bl	80002a8 <__aeabi_dsub>
 8007f20:	4602      	mov	r2, r0
 8007f22:	460b      	mov	r3, r1
 8007f24:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f28:	f7f8 fdf2 	bl	8000b10 <__aeabi_dcmple>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d04f      	beq.n	8007fd2 <scaraFlowLSPB+0x1ca>
		lspb->a_current		=	0;
 8007f32:	68fa      	ldr	r2, [r7, #12]
 8007f34:	f04f 0300 	mov.w	r3, #0
 8007f38:	f04f 0400 	mov.w	r4, #0
 8007f3c:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		lspb->v_current		=	lspb->v_lim;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8007f46:	68fa      	ldr	r2, [r7, #12]
 8007f48:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->s0 + lspb->v0*ta/2 + lspb->v_lim*(time - ta/2);
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8007f58:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007f5c:	f7f8 fb5c 	bl	8000618 <__aeabi_dmul>
 8007f60:	4602      	mov	r2, r0
 8007f62:	460b      	mov	r3, r1
 8007f64:	4610      	mov	r0, r2
 8007f66:	4619      	mov	r1, r3
 8007f68:	f04f 0200 	mov.w	r2, #0
 8007f6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007f70:	f7f8 fc7c 	bl	800086c <__aeabi_ddiv>
 8007f74:	4602      	mov	r2, r0
 8007f76:	460b      	mov	r3, r1
 8007f78:	4620      	mov	r0, r4
 8007f7a:	4629      	mov	r1, r5
 8007f7c:	f7f8 f996 	bl	80002ac <__adddf3>
 8007f80:	4603      	mov	r3, r0
 8007f82:	460c      	mov	r4, r1
 8007f84:	4698      	mov	r8, r3
 8007f86:	46a1      	mov	r9, r4
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8007f8e:	f04f 0200 	mov.w	r2, #0
 8007f92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007f96:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007f9a:	f7f8 fc67 	bl	800086c <__aeabi_ddiv>
 8007f9e:	4602      	mov	r2, r0
 8007fa0:	460b      	mov	r3, r1
 8007fa2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007fa6:	f7f8 f97f 	bl	80002a8 <__aeabi_dsub>
 8007faa:	4602      	mov	r2, r0
 8007fac:	460b      	mov	r3, r1
 8007fae:	4620      	mov	r0, r4
 8007fb0:	4629      	mov	r1, r5
 8007fb2:	f7f8 fb31 	bl	8000618 <__aeabi_dmul>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	460c      	mov	r4, r1
 8007fba:	461a      	mov	r2, r3
 8007fbc:	4623      	mov	r3, r4
 8007fbe:	4640      	mov	r0, r8
 8007fc0:	4649      	mov	r1, r9
 8007fc2:	f7f8 f973 	bl	80002ac <__adddf3>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	460c      	mov	r4, r1
 8007fca:	68fa      	ldr	r2, [r7, #12]
 8007fcc:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 8007fd0:	e0bd      	b.n	800814e <scaraFlowLSPB+0x346>
	// Decelerate
	} else if ((tf - td) <= time && time <= tf) {
 8007fd2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007fd6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007fda:	f7f8 f965 	bl	80002a8 <__aeabi_dsub>
 8007fde:	4602      	mov	r2, r0
 8007fe0:	460b      	mov	r3, r1
 8007fe2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007fe6:	f7f8 fd9d 	bl	8000b24 <__aeabi_dcmpge>
 8007fea:	4603      	mov	r3, r0
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	f000 809a 	beq.w	8008126 <scaraFlowLSPB+0x31e>
 8007ff2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007ff6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ffa:	f7f8 fd89 	bl	8000b10 <__aeabi_dcmple>
 8007ffe:	4603      	mov	r3, r0
 8008000:	2b00      	cmp	r3, #0
 8008002:	f000 8090 	beq.w	8008126 <scaraFlowLSPB+0x31e>
		lspb->a_current		=	-lspb->a_design;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800800c:	4614      	mov	r4, r2
 800800e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	e9c3 451a 	strd	r4, r5, [r3, #104]	; 0x68
		lspb->v_current		=	lspb->v1 + lspb->a_design*(tf - time);
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	e9d3 890c 	ldrd	r8, r9, [r3, #48]	; 0x30
 8008024:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008028:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800802c:	f7f8 f93c 	bl	80002a8 <__aeabi_dsub>
 8008030:	4602      	mov	r2, r0
 8008032:	460b      	mov	r3, r1
 8008034:	4640      	mov	r0, r8
 8008036:	4649      	mov	r1, r9
 8008038:	f7f8 faee 	bl	8000618 <__aeabi_dmul>
 800803c:	4602      	mov	r2, r0
 800803e:	460b      	mov	r3, r1
 8008040:	4620      	mov	r0, r4
 8008042:	4629      	mov	r1, r5
 8008044:	f7f8 f932 	bl	80002ac <__adddf3>
 8008048:	4603      	mov	r3, r0
 800804a:	460c      	mov	r4, r1
 800804c:	68fa      	ldr	r2, [r7, #12]
 800804e:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->s1 - lspb->v1*(tf - time)
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 800805e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008062:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008066:	f7f8 f91f 	bl	80002a8 <__aeabi_dsub>
 800806a:	4602      	mov	r2, r0
 800806c:	460b      	mov	r3, r1
 800806e:	4640      	mov	r0, r8
 8008070:	4649      	mov	r1, r9
 8008072:	f7f8 fad1 	bl	8000618 <__aeabi_dmul>
 8008076:	4602      	mov	r2, r0
 8008078:	460b      	mov	r3, r1
 800807a:	4620      	mov	r0, r4
 800807c:	4629      	mov	r1, r5
 800807e:	f7f8 f913 	bl	80002a8 <__aeabi_dsub>
 8008082:	4603      	mov	r3, r0
 8008084:	460c      	mov	r4, r1
 8008086:	461d      	mov	r5, r3
 8008088:	4626      	mov	r6, r4
								- (lspb->v_lim - lspb->v1)*(tf - time)*(tf - time)/(2*td);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8008096:	461a      	mov	r2, r3
 8008098:	4623      	mov	r3, r4
 800809a:	f7f8 f905 	bl	80002a8 <__aeabi_dsub>
 800809e:	4603      	mov	r3, r0
 80080a0:	460c      	mov	r4, r1
 80080a2:	4698      	mov	r8, r3
 80080a4:	46a1      	mov	r9, r4
 80080a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080aa:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80080ae:	f7f8 f8fb 	bl	80002a8 <__aeabi_dsub>
 80080b2:	4603      	mov	r3, r0
 80080b4:	460c      	mov	r4, r1
 80080b6:	461a      	mov	r2, r3
 80080b8:	4623      	mov	r3, r4
 80080ba:	4640      	mov	r0, r8
 80080bc:	4649      	mov	r1, r9
 80080be:	f7f8 faab 	bl	8000618 <__aeabi_dmul>
 80080c2:	4603      	mov	r3, r0
 80080c4:	460c      	mov	r4, r1
 80080c6:	4698      	mov	r8, r3
 80080c8:	46a1      	mov	r9, r4
 80080ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080ce:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80080d2:	f7f8 f8e9 	bl	80002a8 <__aeabi_dsub>
 80080d6:	4603      	mov	r3, r0
 80080d8:	460c      	mov	r4, r1
 80080da:	461a      	mov	r2, r3
 80080dc:	4623      	mov	r3, r4
 80080de:	4640      	mov	r0, r8
 80080e0:	4649      	mov	r1, r9
 80080e2:	f7f8 fa99 	bl	8000618 <__aeabi_dmul>
 80080e6:	4603      	mov	r3, r0
 80080e8:	460c      	mov	r4, r1
 80080ea:	4698      	mov	r8, r3
 80080ec:	46a1      	mov	r9, r4
 80080ee:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80080f2:	4602      	mov	r2, r0
 80080f4:	460b      	mov	r3, r1
 80080f6:	f7f8 f8d9 	bl	80002ac <__adddf3>
 80080fa:	4603      	mov	r3, r0
 80080fc:	460c      	mov	r4, r1
 80080fe:	461a      	mov	r2, r3
 8008100:	4623      	mov	r3, r4
 8008102:	4640      	mov	r0, r8
 8008104:	4649      	mov	r1, r9
 8008106:	f7f8 fbb1 	bl	800086c <__aeabi_ddiv>
 800810a:	4603      	mov	r3, r0
 800810c:	460c      	mov	r4, r1
 800810e:	461a      	mov	r2, r3
 8008110:	4623      	mov	r3, r4
 8008112:	4628      	mov	r0, r5
 8008114:	4631      	mov	r1, r6
 8008116:	f7f8 f8c7 	bl	80002a8 <__aeabi_dsub>
 800811a:	4603      	mov	r3, r0
 800811c:	460c      	mov	r4, r1
		lspb->s_current		=	lspb->s1 - lspb->v1*(tf - time)
 800811e:	68fa      	ldr	r2, [r7, #12]
 8008120:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 8008124:	e013      	b.n	800814e <scaraFlowLSPB+0x346>
	} else {
		lspb->a_current 	=	0;
 8008126:	68fa      	ldr	r2, [r7, #12]
 8008128:	f04f 0300 	mov.w	r3, #0
 800812c:	f04f 0400 	mov.w	r4, #0
 8008130:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		lspb->v_current		=	0;
 8008134:	68fa      	ldr	r2, [r7, #12]
 8008136:	f04f 0300 	mov.w	r3, #0
 800813a:	f04f 0400 	mov.w	r4, #0
 800813e:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->total_s;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8008148:	68fa      	ldr	r2, [r7, #12]
 800814a:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	}

	return SCARA_STATUS_OK;
 800814e:	2300      	movs	r3, #0
}
 8008150:	4618      	mov	r0, r3
 8008152:	372c      	adds	r7, #44	; 0x2c
 8008154:	46bd      	mov	sp, r7
 8008156:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800815a:	bf00      	nop
 800815c:	3fe00000 	.word	0x3fe00000

08008160 <scaraFLowScurve>:

/* Compute new s corresponding to time */
SCARA_StatusTypeDef	scaraFLowScurve		(Trajectory_Scurve_TypeDef *scurve, double time) {
 8008160:	b5b0      	push	{r4, r5, r7, lr}
 8008162:	b092      	sub	sp, #72	; 0x48
 8008164:	af00      	add	r7, sp, #0
 8008166:	6278      	str	r0, [r7, #36]	; 0x24
 8008168:	ed87 0b06 	vstr	d0, [r7, #24]
	double j_max, tm, tc, t;

	j_max = scurve->j_max;
 800816c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800816e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8008172:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	tm	  = scurve->Tm;
 8008176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008178:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800817c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	tc	  = scurve->Tc;
 8008180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008182:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8008186:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	 // SCURVE 4 PHASE: tc = 0;
	 if ( 4 == scurve->num_of_phase) {
 800818a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800818c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008190:	2b04      	cmp	r3, #4
 8008192:	f040 8321 	bne.w	80087d8 <scaraFLowScurve+0x678>
		 // Phase 1
		 if ( (0.0f <= time) && ( time < tm)) {
 8008196:	f04f 0200 	mov.w	r2, #0
 800819a:	f04f 0300 	mov.w	r3, #0
 800819e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80081a2:	f7f8 fcbf 	bl	8000b24 <__aeabi_dcmpge>
 80081a6:	4603      	mov	r3, r0
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d059      	beq.n	8008260 <scaraFLowScurve+0x100>
 80081ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80081b0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80081b4:	f7f8 fca2 	bl	8000afc <__aeabi_dcmplt>
 80081b8:	4603      	mov	r3, r0
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d050      	beq.n	8008260 <scaraFLowScurve+0x100>
			 t = time;
 80081be:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80081c2:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	= 	j_max*t;
 80081c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80081ca:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80081ce:	f7f8 fa23 	bl	8000618 <__aeabi_dmul>
 80081d2:	4603      	mov	r3, r0
 80081d4:	460c      	mov	r4, r1
 80081d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081d8:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	= 	0.5*j_max*t*t;
 80081dc:	f04f 0200 	mov.w	r2, #0
 80081e0:	4b93      	ldr	r3, [pc, #588]	; (8008430 <scaraFLowScurve+0x2d0>)
 80081e2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80081e6:	f7f8 fa17 	bl	8000618 <__aeabi_dmul>
 80081ea:	4603      	mov	r3, r0
 80081ec:	460c      	mov	r4, r1
 80081ee:	4618      	mov	r0, r3
 80081f0:	4621      	mov	r1, r4
 80081f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80081f6:	f7f8 fa0f 	bl	8000618 <__aeabi_dmul>
 80081fa:	4603      	mov	r3, r0
 80081fc:	460c      	mov	r4, r1
 80081fe:	4618      	mov	r0, r3
 8008200:	4621      	mov	r1, r4
 8008202:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008206:	f7f8 fa07 	bl	8000618 <__aeabi_dmul>
 800820a:	4603      	mov	r3, r0
 800820c:	460c      	mov	r4, r1
 800820e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008210:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current 	= 	j_max*t*t*t/6;
 8008214:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008218:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800821c:	f7f8 f9fc 	bl	8000618 <__aeabi_dmul>
 8008220:	4603      	mov	r3, r0
 8008222:	460c      	mov	r4, r1
 8008224:	4618      	mov	r0, r3
 8008226:	4621      	mov	r1, r4
 8008228:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800822c:	f7f8 f9f4 	bl	8000618 <__aeabi_dmul>
 8008230:	4603      	mov	r3, r0
 8008232:	460c      	mov	r4, r1
 8008234:	4618      	mov	r0, r3
 8008236:	4621      	mov	r1, r4
 8008238:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800823c:	f7f8 f9ec 	bl	8000618 <__aeabi_dmul>
 8008240:	4603      	mov	r3, r0
 8008242:	460c      	mov	r4, r1
 8008244:	4618      	mov	r0, r3
 8008246:	4621      	mov	r1, r4
 8008248:	f04f 0200 	mov.w	r2, #0
 800824c:	4b79      	ldr	r3, [pc, #484]	; (8008434 <scaraFLowScurve+0x2d4>)
 800824e:	f7f8 fb0d 	bl	800086c <__aeabi_ddiv>
 8008252:	4603      	mov	r3, r0
 8008254:	460c      	mov	r4, r1
 8008256:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008258:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 800825c:	f000 be56 	b.w	8008f0c <scaraFLowScurve+0xdac>
		 // Phase 2
		 } else if ( (tm <= time) && ( time < (2*tm) ) ) {
 8008260:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008264:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008268:	f7f8 fc52 	bl	8000b10 <__aeabi_dcmple>
 800826c:	4603      	mov	r3, r0
 800826e:	2b00      	cmp	r3, #0
 8008270:	f000 80e2 	beq.w	8008438 <scaraFLowScurve+0x2d8>
 8008274:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008278:	4602      	mov	r2, r0
 800827a:	460b      	mov	r3, r1
 800827c:	f7f8 f816 	bl	80002ac <__adddf3>
 8008280:	4603      	mov	r3, r0
 8008282:	460c      	mov	r4, r1
 8008284:	461a      	mov	r2, r3
 8008286:	4623      	mov	r3, r4
 8008288:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800828c:	f7f8 fc36 	bl	8000afc <__aeabi_dcmplt>
 8008290:	4603      	mov	r3, r0
 8008292:	2b00      	cmp	r3, #0
 8008294:	f000 80d0 	beq.w	8008438 <scaraFLowScurve+0x2d8>
			 t = time - tm;
 8008298:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800829c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80082a0:	f7f8 f802 	bl	80002a8 <__aeabi_dsub>
 80082a4:	4603      	mov	r3, r0
 80082a6:	460c      	mov	r4, r1
 80082a8:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	= 	j_max*tm - j_max*t;
 80082ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80082b0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80082b4:	f7f8 f9b0 	bl	8000618 <__aeabi_dmul>
 80082b8:	4603      	mov	r3, r0
 80082ba:	460c      	mov	r4, r1
 80082bc:	4625      	mov	r5, r4
 80082be:	461c      	mov	r4, r3
 80082c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80082c4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80082c8:	f7f8 f9a6 	bl	8000618 <__aeabi_dmul>
 80082cc:	4602      	mov	r2, r0
 80082ce:	460b      	mov	r3, r1
 80082d0:	4620      	mov	r0, r4
 80082d2:	4629      	mov	r1, r5
 80082d4:	f7f7 ffe8 	bl	80002a8 <__aeabi_dsub>
 80082d8:	4603      	mov	r3, r0
 80082da:	460c      	mov	r4, r1
 80082dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082de:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current 	= 	scurve->v_1 + j_max*tm*t - 0.5*j_max*t*t;
 80082e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e4:	e9d3 451e 	ldrd	r4, r5, [r3, #120]	; 0x78
 80082e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80082ec:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80082f0:	f7f8 f992 	bl	8000618 <__aeabi_dmul>
 80082f4:	4602      	mov	r2, r0
 80082f6:	460b      	mov	r3, r1
 80082f8:	4610      	mov	r0, r2
 80082fa:	4619      	mov	r1, r3
 80082fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008300:	f7f8 f98a 	bl	8000618 <__aeabi_dmul>
 8008304:	4602      	mov	r2, r0
 8008306:	460b      	mov	r3, r1
 8008308:	4620      	mov	r0, r4
 800830a:	4629      	mov	r1, r5
 800830c:	f7f7 ffce 	bl	80002ac <__adddf3>
 8008310:	4603      	mov	r3, r0
 8008312:	460c      	mov	r4, r1
 8008314:	4625      	mov	r5, r4
 8008316:	461c      	mov	r4, r3
 8008318:	f04f 0200 	mov.w	r2, #0
 800831c:	4b44      	ldr	r3, [pc, #272]	; (8008430 <scaraFLowScurve+0x2d0>)
 800831e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008322:	f7f8 f979 	bl	8000618 <__aeabi_dmul>
 8008326:	4602      	mov	r2, r0
 8008328:	460b      	mov	r3, r1
 800832a:	4610      	mov	r0, r2
 800832c:	4619      	mov	r1, r3
 800832e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008332:	f7f8 f971 	bl	8000618 <__aeabi_dmul>
 8008336:	4602      	mov	r2, r0
 8008338:	460b      	mov	r3, r1
 800833a:	4610      	mov	r0, r2
 800833c:	4619      	mov	r1, r3
 800833e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008342:	f7f8 f969 	bl	8000618 <__aeabi_dmul>
 8008346:	4602      	mov	r2, r0
 8008348:	460b      	mov	r3, r1
 800834a:	4620      	mov	r0, r4
 800834c:	4629      	mov	r1, r5
 800834e:	f7f7 ffab 	bl	80002a8 <__aeabi_dsub>
 8008352:	4603      	mov	r3, r0
 8008354:	460c      	mov	r4, r1
 8008356:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008358:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current 	=	scurve->s_1 + scurve->v_1*t + 0.5*j_max*tm*t*t - j_max*t*t*t/6;
 800835c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800835e:	e9d3 4520 	ldrd	r4, r5, [r3, #128]	; 0x80
 8008362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008364:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8008368:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800836c:	f7f8 f954 	bl	8000618 <__aeabi_dmul>
 8008370:	4602      	mov	r2, r0
 8008372:	460b      	mov	r3, r1
 8008374:	4620      	mov	r0, r4
 8008376:	4629      	mov	r1, r5
 8008378:	f7f7 ff98 	bl	80002ac <__adddf3>
 800837c:	4603      	mov	r3, r0
 800837e:	460c      	mov	r4, r1
 8008380:	4625      	mov	r5, r4
 8008382:	461c      	mov	r4, r3
 8008384:	f04f 0200 	mov.w	r2, #0
 8008388:	4b29      	ldr	r3, [pc, #164]	; (8008430 <scaraFLowScurve+0x2d0>)
 800838a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800838e:	f7f8 f943 	bl	8000618 <__aeabi_dmul>
 8008392:	4602      	mov	r2, r0
 8008394:	460b      	mov	r3, r1
 8008396:	4610      	mov	r0, r2
 8008398:	4619      	mov	r1, r3
 800839a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800839e:	f7f8 f93b 	bl	8000618 <__aeabi_dmul>
 80083a2:	4602      	mov	r2, r0
 80083a4:	460b      	mov	r3, r1
 80083a6:	4610      	mov	r0, r2
 80083a8:	4619      	mov	r1, r3
 80083aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80083ae:	f7f8 f933 	bl	8000618 <__aeabi_dmul>
 80083b2:	4602      	mov	r2, r0
 80083b4:	460b      	mov	r3, r1
 80083b6:	4610      	mov	r0, r2
 80083b8:	4619      	mov	r1, r3
 80083ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80083be:	f7f8 f92b 	bl	8000618 <__aeabi_dmul>
 80083c2:	4602      	mov	r2, r0
 80083c4:	460b      	mov	r3, r1
 80083c6:	4620      	mov	r0, r4
 80083c8:	4629      	mov	r1, r5
 80083ca:	f7f7 ff6f 	bl	80002ac <__adddf3>
 80083ce:	4603      	mov	r3, r0
 80083d0:	460c      	mov	r4, r1
 80083d2:	4625      	mov	r5, r4
 80083d4:	461c      	mov	r4, r3
 80083d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80083da:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80083de:	f7f8 f91b 	bl	8000618 <__aeabi_dmul>
 80083e2:	4602      	mov	r2, r0
 80083e4:	460b      	mov	r3, r1
 80083e6:	4610      	mov	r0, r2
 80083e8:	4619      	mov	r1, r3
 80083ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80083ee:	f7f8 f913 	bl	8000618 <__aeabi_dmul>
 80083f2:	4602      	mov	r2, r0
 80083f4:	460b      	mov	r3, r1
 80083f6:	4610      	mov	r0, r2
 80083f8:	4619      	mov	r1, r3
 80083fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80083fe:	f7f8 f90b 	bl	8000618 <__aeabi_dmul>
 8008402:	4602      	mov	r2, r0
 8008404:	460b      	mov	r3, r1
 8008406:	4610      	mov	r0, r2
 8008408:	4619      	mov	r1, r3
 800840a:	f04f 0200 	mov.w	r2, #0
 800840e:	4b09      	ldr	r3, [pc, #36]	; (8008434 <scaraFLowScurve+0x2d4>)
 8008410:	f7f8 fa2c 	bl	800086c <__aeabi_ddiv>
 8008414:	4602      	mov	r2, r0
 8008416:	460b      	mov	r3, r1
 8008418:	4620      	mov	r0, r4
 800841a:	4629      	mov	r1, r5
 800841c:	f7f7 ff44 	bl	80002a8 <__aeabi_dsub>
 8008420:	4603      	mov	r3, r0
 8008422:	460c      	mov	r4, r1
 8008424:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008426:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 800842a:	f000 bd6f 	b.w	8008f0c <scaraFLowScurve+0xdac>
 800842e:	bf00      	nop
 8008430:	3fe00000 	.word	0x3fe00000
 8008434:	40180000 	.word	0x40180000
		 // Phase 3: does not exist
		 // Phase 4
		 } else if ( ((2*tm) <= time) && ( time < (3*tm)) ) {
 8008438:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800843c:	4602      	mov	r2, r0
 800843e:	460b      	mov	r3, r1
 8008440:	f7f7 ff34 	bl	80002ac <__adddf3>
 8008444:	4603      	mov	r3, r0
 8008446:	460c      	mov	r4, r1
 8008448:	461a      	mov	r2, r3
 800844a:	4623      	mov	r3, r4
 800844c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008450:	f7f8 fb68 	bl	8000b24 <__aeabi_dcmpge>
 8008454:	4603      	mov	r3, r0
 8008456:	2b00      	cmp	r3, #0
 8008458:	f000 80a2 	beq.w	80085a0 <scaraFLowScurve+0x440>
 800845c:	f04f 0200 	mov.w	r2, #0
 8008460:	4b4c      	ldr	r3, [pc, #304]	; (8008594 <scaraFLowScurve+0x434>)
 8008462:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008466:	f7f8 f8d7 	bl	8000618 <__aeabi_dmul>
 800846a:	4603      	mov	r3, r0
 800846c:	460c      	mov	r4, r1
 800846e:	461a      	mov	r2, r3
 8008470:	4623      	mov	r3, r4
 8008472:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008476:	f7f8 fb41 	bl	8000afc <__aeabi_dcmplt>
 800847a:	4603      	mov	r3, r0
 800847c:	2b00      	cmp	r3, #0
 800847e:	f000 808f 	beq.w	80085a0 <scaraFLowScurve+0x440>
			 t = time - 2*tm;
 8008482:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008486:	4602      	mov	r2, r0
 8008488:	460b      	mov	r3, r1
 800848a:	f7f7 ff0f 	bl	80002ac <__adddf3>
 800848e:	4603      	mov	r3, r0
 8008490:	460c      	mov	r4, r1
 8008492:	461a      	mov	r2, r3
 8008494:	4623      	mov	r3, r4
 8008496:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800849a:	f7f7 ff05 	bl	80002a8 <__aeabi_dsub>
 800849e:	4603      	mov	r3, r0
 80084a0:	460c      	mov	r4, r1
 80084a2:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	=	-j_max*t;
 80084a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084a8:	613b      	str	r3, [r7, #16]
 80084aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80084b0:	617b      	str	r3, [r7, #20]
 80084b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80084b6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80084ba:	f7f8 f8ad 	bl	8000618 <__aeabi_dmul>
 80084be:	4603      	mov	r3, r0
 80084c0:	460c      	mov	r4, r1
 80084c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084c4:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_2 - 0.5*j_max*t*t;
 80084c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ca:	e9d3 4522 	ldrd	r4, r5, [r3, #136]	; 0x88
 80084ce:	f04f 0200 	mov.w	r2, #0
 80084d2:	4b31      	ldr	r3, [pc, #196]	; (8008598 <scaraFLowScurve+0x438>)
 80084d4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80084d8:	f7f8 f89e 	bl	8000618 <__aeabi_dmul>
 80084dc:	4602      	mov	r2, r0
 80084de:	460b      	mov	r3, r1
 80084e0:	4610      	mov	r0, r2
 80084e2:	4619      	mov	r1, r3
 80084e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80084e8:	f7f8 f896 	bl	8000618 <__aeabi_dmul>
 80084ec:	4602      	mov	r2, r0
 80084ee:	460b      	mov	r3, r1
 80084f0:	4610      	mov	r0, r2
 80084f2:	4619      	mov	r1, r3
 80084f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80084f8:	f7f8 f88e 	bl	8000618 <__aeabi_dmul>
 80084fc:	4602      	mov	r2, r0
 80084fe:	460b      	mov	r3, r1
 8008500:	4620      	mov	r0, r4
 8008502:	4629      	mov	r1, r5
 8008504:	f7f7 fed0 	bl	80002a8 <__aeabi_dsub>
 8008508:	4603      	mov	r3, r0
 800850a:	460c      	mov	r4, r1
 800850c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800850e:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_2 + scurve->v_2*t - j_max*t*t*t/6;
 8008512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008514:	e9d3 4524 	ldrd	r4, r5, [r3, #144]	; 0x90
 8008518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800851a:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 800851e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008522:	f7f8 f879 	bl	8000618 <__aeabi_dmul>
 8008526:	4602      	mov	r2, r0
 8008528:	460b      	mov	r3, r1
 800852a:	4620      	mov	r0, r4
 800852c:	4629      	mov	r1, r5
 800852e:	f7f7 febd 	bl	80002ac <__adddf3>
 8008532:	4603      	mov	r3, r0
 8008534:	460c      	mov	r4, r1
 8008536:	4625      	mov	r5, r4
 8008538:	461c      	mov	r4, r3
 800853a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800853e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008542:	f7f8 f869 	bl	8000618 <__aeabi_dmul>
 8008546:	4602      	mov	r2, r0
 8008548:	460b      	mov	r3, r1
 800854a:	4610      	mov	r0, r2
 800854c:	4619      	mov	r1, r3
 800854e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008552:	f7f8 f861 	bl	8000618 <__aeabi_dmul>
 8008556:	4602      	mov	r2, r0
 8008558:	460b      	mov	r3, r1
 800855a:	4610      	mov	r0, r2
 800855c:	4619      	mov	r1, r3
 800855e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008562:	f7f8 f859 	bl	8000618 <__aeabi_dmul>
 8008566:	4602      	mov	r2, r0
 8008568:	460b      	mov	r3, r1
 800856a:	4610      	mov	r0, r2
 800856c:	4619      	mov	r1, r3
 800856e:	f04f 0200 	mov.w	r2, #0
 8008572:	4b0a      	ldr	r3, [pc, #40]	; (800859c <scaraFLowScurve+0x43c>)
 8008574:	f7f8 f97a 	bl	800086c <__aeabi_ddiv>
 8008578:	4602      	mov	r2, r0
 800857a:	460b      	mov	r3, r1
 800857c:	4620      	mov	r0, r4
 800857e:	4629      	mov	r1, r5
 8008580:	f7f7 fe92 	bl	80002a8 <__aeabi_dsub>
 8008584:	4603      	mov	r3, r0
 8008586:	460c      	mov	r4, r1
 8008588:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800858a:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 800858e:	f000 bcbd 	b.w	8008f0c <scaraFLowScurve+0xdac>
 8008592:	bf00      	nop
 8008594:	40080000 	.word	0x40080000
 8008598:	3fe00000 	.word	0x3fe00000
 800859c:	40180000 	.word	0x40180000
		 // Phase 5
		 } else if ( ((3*tm) <= time) && ( time < (4*tm)) ) {
 80085a0:	f04f 0200 	mov.w	r2, #0
 80085a4:	4b88      	ldr	r3, [pc, #544]	; (80087c8 <scaraFLowScurve+0x668>)
 80085a6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80085aa:	f7f8 f835 	bl	8000618 <__aeabi_dmul>
 80085ae:	4603      	mov	r3, r0
 80085b0:	460c      	mov	r4, r1
 80085b2:	461a      	mov	r2, r3
 80085b4:	4623      	mov	r3, r4
 80085b6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80085ba:	f7f8 fab3 	bl	8000b24 <__aeabi_dcmpge>
 80085be:	4603      	mov	r3, r0
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	f000 80ec 	beq.w	800879e <scaraFLowScurve+0x63e>
 80085c6:	f04f 0200 	mov.w	r2, #0
 80085ca:	4b80      	ldr	r3, [pc, #512]	; (80087cc <scaraFLowScurve+0x66c>)
 80085cc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80085d0:	f7f8 f822 	bl	8000618 <__aeabi_dmul>
 80085d4:	4603      	mov	r3, r0
 80085d6:	460c      	mov	r4, r1
 80085d8:	461a      	mov	r2, r3
 80085da:	4623      	mov	r3, r4
 80085dc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80085e0:	f7f8 fa8c 	bl	8000afc <__aeabi_dcmplt>
 80085e4:	4603      	mov	r3, r0
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	f000 80d9 	beq.w	800879e <scaraFLowScurve+0x63e>
			 t = time - 3*tm;
 80085ec:	f04f 0200 	mov.w	r2, #0
 80085f0:	4b75      	ldr	r3, [pc, #468]	; (80087c8 <scaraFLowScurve+0x668>)
 80085f2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80085f6:	f7f8 f80f 	bl	8000618 <__aeabi_dmul>
 80085fa:	4603      	mov	r3, r0
 80085fc:	460c      	mov	r4, r1
 80085fe:	461a      	mov	r2, r3
 8008600:	4623      	mov	r3, r4
 8008602:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008606:	f7f7 fe4f 	bl	80002a8 <__aeabi_dsub>
 800860a:	4603      	mov	r3, r0
 800860c:	460c      	mov	r4, r1
 800860e:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current	=	-j_max*tm + j_max*t;
 8008612:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008614:	60bb      	str	r3, [r7, #8]
 8008616:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008618:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800861c:	60fb      	str	r3, [r7, #12]
 800861e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008622:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008626:	f7f7 fff7 	bl	8000618 <__aeabi_dmul>
 800862a:	4603      	mov	r3, r0
 800862c:	460c      	mov	r4, r1
 800862e:	4625      	mov	r5, r4
 8008630:	461c      	mov	r4, r3
 8008632:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008636:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800863a:	f7f7 ffed 	bl	8000618 <__aeabi_dmul>
 800863e:	4602      	mov	r2, r0
 8008640:	460b      	mov	r3, r1
 8008642:	4620      	mov	r0, r4
 8008644:	4629      	mov	r1, r5
 8008646:	f7f7 fe31 	bl	80002ac <__adddf3>
 800864a:	4603      	mov	r3, r0
 800864c:	460c      	mov	r4, r1
 800864e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008650:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_4 - j_max*tm*t + 0.5*j_max*t*t;
 8008654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008656:	e9d3 452a 	ldrd	r4, r5, [r3, #168]	; 0xa8
 800865a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800865e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008662:	f7f7 ffd9 	bl	8000618 <__aeabi_dmul>
 8008666:	4602      	mov	r2, r0
 8008668:	460b      	mov	r3, r1
 800866a:	4610      	mov	r0, r2
 800866c:	4619      	mov	r1, r3
 800866e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008672:	f7f7 ffd1 	bl	8000618 <__aeabi_dmul>
 8008676:	4602      	mov	r2, r0
 8008678:	460b      	mov	r3, r1
 800867a:	4620      	mov	r0, r4
 800867c:	4629      	mov	r1, r5
 800867e:	f7f7 fe13 	bl	80002a8 <__aeabi_dsub>
 8008682:	4603      	mov	r3, r0
 8008684:	460c      	mov	r4, r1
 8008686:	4625      	mov	r5, r4
 8008688:	461c      	mov	r4, r3
 800868a:	f04f 0200 	mov.w	r2, #0
 800868e:	4b50      	ldr	r3, [pc, #320]	; (80087d0 <scaraFLowScurve+0x670>)
 8008690:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008694:	f7f7 ffc0 	bl	8000618 <__aeabi_dmul>
 8008698:	4602      	mov	r2, r0
 800869a:	460b      	mov	r3, r1
 800869c:	4610      	mov	r0, r2
 800869e:	4619      	mov	r1, r3
 80086a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80086a4:	f7f7 ffb8 	bl	8000618 <__aeabi_dmul>
 80086a8:	4602      	mov	r2, r0
 80086aa:	460b      	mov	r3, r1
 80086ac:	4610      	mov	r0, r2
 80086ae:	4619      	mov	r1, r3
 80086b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80086b4:	f7f7 ffb0 	bl	8000618 <__aeabi_dmul>
 80086b8:	4602      	mov	r2, r0
 80086ba:	460b      	mov	r3, r1
 80086bc:	4620      	mov	r0, r4
 80086be:	4629      	mov	r1, r5
 80086c0:	f7f7 fdf4 	bl	80002ac <__adddf3>
 80086c4:	4603      	mov	r3, r0
 80086c6:	460c      	mov	r4, r1
 80086c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086ca:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_4 + scurve->v_4*t
 80086ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d0:	e9d3 452c 	ldrd	r4, r5, [r3, #176]	; 0xb0
 80086d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d6:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
 80086da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80086de:	f7f7 ff9b 	bl	8000618 <__aeabi_dmul>
 80086e2:	4602      	mov	r2, r0
 80086e4:	460b      	mov	r3, r1
 80086e6:	4620      	mov	r0, r4
 80086e8:	4629      	mov	r1, r5
 80086ea:	f7f7 fddf 	bl	80002ac <__adddf3>
 80086ee:	4603      	mov	r3, r0
 80086f0:	460c      	mov	r4, r1
 80086f2:	4625      	mov	r5, r4
 80086f4:	461c      	mov	r4, r3
									- 0.5*j_max*tm*t*t
 80086f6:	f04f 0200 	mov.w	r2, #0
 80086fa:	4b35      	ldr	r3, [pc, #212]	; (80087d0 <scaraFLowScurve+0x670>)
 80086fc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008700:	f7f7 ff8a 	bl	8000618 <__aeabi_dmul>
 8008704:	4602      	mov	r2, r0
 8008706:	460b      	mov	r3, r1
 8008708:	4610      	mov	r0, r2
 800870a:	4619      	mov	r1, r3
 800870c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008710:	f7f7 ff82 	bl	8000618 <__aeabi_dmul>
 8008714:	4602      	mov	r2, r0
 8008716:	460b      	mov	r3, r1
 8008718:	4610      	mov	r0, r2
 800871a:	4619      	mov	r1, r3
 800871c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008720:	f7f7 ff7a 	bl	8000618 <__aeabi_dmul>
 8008724:	4602      	mov	r2, r0
 8008726:	460b      	mov	r3, r1
 8008728:	4610      	mov	r0, r2
 800872a:	4619      	mov	r1, r3
 800872c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008730:	f7f7 ff72 	bl	8000618 <__aeabi_dmul>
 8008734:	4602      	mov	r2, r0
 8008736:	460b      	mov	r3, r1
 8008738:	4620      	mov	r0, r4
 800873a:	4629      	mov	r1, r5
 800873c:	f7f7 fdb4 	bl	80002a8 <__aeabi_dsub>
 8008740:	4603      	mov	r3, r0
 8008742:	460c      	mov	r4, r1
 8008744:	4625      	mov	r5, r4
 8008746:	461c      	mov	r4, r3
									+ j_max*t*t*t/6;
 8008748:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800874c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008750:	f7f7 ff62 	bl	8000618 <__aeabi_dmul>
 8008754:	4602      	mov	r2, r0
 8008756:	460b      	mov	r3, r1
 8008758:	4610      	mov	r0, r2
 800875a:	4619      	mov	r1, r3
 800875c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008760:	f7f7 ff5a 	bl	8000618 <__aeabi_dmul>
 8008764:	4602      	mov	r2, r0
 8008766:	460b      	mov	r3, r1
 8008768:	4610      	mov	r0, r2
 800876a:	4619      	mov	r1, r3
 800876c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008770:	f7f7 ff52 	bl	8000618 <__aeabi_dmul>
 8008774:	4602      	mov	r2, r0
 8008776:	460b      	mov	r3, r1
 8008778:	4610      	mov	r0, r2
 800877a:	4619      	mov	r1, r3
 800877c:	f04f 0200 	mov.w	r2, #0
 8008780:	4b14      	ldr	r3, [pc, #80]	; (80087d4 <scaraFLowScurve+0x674>)
 8008782:	f7f8 f873 	bl	800086c <__aeabi_ddiv>
 8008786:	4602      	mov	r2, r0
 8008788:	460b      	mov	r3, r1
 800878a:	4620      	mov	r0, r4
 800878c:	4629      	mov	r1, r5
 800878e:	f7f7 fd8d 	bl	80002ac <__adddf3>
 8008792:	4603      	mov	r3, r0
 8008794:	460c      	mov	r4, r1
			 scurve->s_current	=	scurve->s_4 + scurve->v_4*t
 8008796:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008798:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 800879c:	e3b6      	b.n	8008f0c <scaraFLowScurve+0xdac>
		 } else {
			 scurve->a_current = 0;
 800879e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087a0:	f04f 0300 	mov.w	r3, #0
 80087a4:	f04f 0400 	mov.w	r4, #0
 80087a8:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current = 0;
 80087ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087ae:	f04f 0300 	mov.w	r3, #0
 80087b2:	f04f 0400 	mov.w	r4, #0
 80087b6:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current = scurve->total_s;
 80087ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087bc:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 80087c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087c2:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 80087c6:	e3a1      	b.n	8008f0c <scaraFLowScurve+0xdac>
 80087c8:	40080000 	.word	0x40080000
 80087cc:	40100000 	.word	0x40100000
 80087d0:	3fe00000 	.word	0x3fe00000
 80087d4:	40180000 	.word	0x40180000
		 }

	 // SCURVE 5 PHASE: tc > 0
	 } else if ( 5 == scurve->num_of_phase) {
 80087d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80087de:	2b05      	cmp	r3, #5
 80087e0:	f040 8392 	bne.w	8008f08 <scaraFLowScurve+0xda8>
		 // Phase 1
		 if ( (0 <= time) && ( time < tm)) {
 80087e4:	f04f 0200 	mov.w	r2, #0
 80087e8:	f04f 0300 	mov.w	r3, #0
 80087ec:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80087f0:	f7f8 f998 	bl	8000b24 <__aeabi_dcmpge>
 80087f4:	4603      	mov	r3, r0
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d058      	beq.n	80088ac <scaraFLowScurve+0x74c>
 80087fa:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80087fe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008802:	f7f8 f97b 	bl	8000afc <__aeabi_dcmplt>
 8008806:	4603      	mov	r3, r0
 8008808:	2b00      	cmp	r3, #0
 800880a:	d04f      	beq.n	80088ac <scaraFLowScurve+0x74c>
			 t = time;
 800880c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8008810:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	= 	j_max*t;
 8008814:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008818:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800881c:	f7f7 fefc 	bl	8000618 <__aeabi_dmul>
 8008820:	4603      	mov	r3, r0
 8008822:	460c      	mov	r4, r1
 8008824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008826:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	= 	0.5*j_max*t*t;
 800882a:	f04f 0200 	mov.w	r2, #0
 800882e:	4b91      	ldr	r3, [pc, #580]	; (8008a74 <scaraFLowScurve+0x914>)
 8008830:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008834:	f7f7 fef0 	bl	8000618 <__aeabi_dmul>
 8008838:	4603      	mov	r3, r0
 800883a:	460c      	mov	r4, r1
 800883c:	4618      	mov	r0, r3
 800883e:	4621      	mov	r1, r4
 8008840:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008844:	f7f7 fee8 	bl	8000618 <__aeabi_dmul>
 8008848:	4603      	mov	r3, r0
 800884a:	460c      	mov	r4, r1
 800884c:	4618      	mov	r0, r3
 800884e:	4621      	mov	r1, r4
 8008850:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008854:	f7f7 fee0 	bl	8000618 <__aeabi_dmul>
 8008858:	4603      	mov	r3, r0
 800885a:	460c      	mov	r4, r1
 800885c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800885e:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current 	= 	j_max*t*t*t/6;
 8008862:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008866:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800886a:	f7f7 fed5 	bl	8000618 <__aeabi_dmul>
 800886e:	4603      	mov	r3, r0
 8008870:	460c      	mov	r4, r1
 8008872:	4618      	mov	r0, r3
 8008874:	4621      	mov	r1, r4
 8008876:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800887a:	f7f7 fecd 	bl	8000618 <__aeabi_dmul>
 800887e:	4603      	mov	r3, r0
 8008880:	460c      	mov	r4, r1
 8008882:	4618      	mov	r0, r3
 8008884:	4621      	mov	r1, r4
 8008886:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800888a:	f7f7 fec5 	bl	8000618 <__aeabi_dmul>
 800888e:	4603      	mov	r3, r0
 8008890:	460c      	mov	r4, r1
 8008892:	4618      	mov	r0, r3
 8008894:	4621      	mov	r1, r4
 8008896:	f04f 0200 	mov.w	r2, #0
 800889a:	4b77      	ldr	r3, [pc, #476]	; (8008a78 <scaraFLowScurve+0x918>)
 800889c:	f7f7 ffe6 	bl	800086c <__aeabi_ddiv>
 80088a0:	4603      	mov	r3, r0
 80088a2:	460c      	mov	r4, r1
 80088a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088a6:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 80088aa:	e32f      	b.n	8008f0c <scaraFLowScurve+0xdac>
		 // Phase 2
		 } else if ( (tm <= time) && ( time < (2*tm) ) ) {
 80088ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80088b0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80088b4:	f7f8 f92c 	bl	8000b10 <__aeabi_dcmple>
 80088b8:	4603      	mov	r3, r0
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	f000 80de 	beq.w	8008a7c <scaraFLowScurve+0x91c>
 80088c0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80088c4:	4602      	mov	r2, r0
 80088c6:	460b      	mov	r3, r1
 80088c8:	f7f7 fcf0 	bl	80002ac <__adddf3>
 80088cc:	4602      	mov	r2, r0
 80088ce:	460b      	mov	r3, r1
 80088d0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80088d4:	f7f8 f912 	bl	8000afc <__aeabi_dcmplt>
 80088d8:	4603      	mov	r3, r0
 80088da:	2b00      	cmp	r3, #0
 80088dc:	f000 80ce 	beq.w	8008a7c <scaraFLowScurve+0x91c>
			 t = time - tm;
 80088e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80088e4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80088e8:	f7f7 fcde 	bl	80002a8 <__aeabi_dsub>
 80088ec:	4603      	mov	r3, r0
 80088ee:	460c      	mov	r4, r1
 80088f0:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	= 	j_max*tm - j_max*t;
 80088f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80088f8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80088fc:	f7f7 fe8c 	bl	8000618 <__aeabi_dmul>
 8008900:	4603      	mov	r3, r0
 8008902:	460c      	mov	r4, r1
 8008904:	4625      	mov	r5, r4
 8008906:	461c      	mov	r4, r3
 8008908:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800890c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008910:	f7f7 fe82 	bl	8000618 <__aeabi_dmul>
 8008914:	4602      	mov	r2, r0
 8008916:	460b      	mov	r3, r1
 8008918:	4620      	mov	r0, r4
 800891a:	4629      	mov	r1, r5
 800891c:	f7f7 fcc4 	bl	80002a8 <__aeabi_dsub>
 8008920:	4603      	mov	r3, r0
 8008922:	460c      	mov	r4, r1
 8008924:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008926:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current 	= 	scurve->v_1 + j_max*tm*t - 0.5*j_max*t*t;
 800892a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800892c:	e9d3 451e 	ldrd	r4, r5, [r3, #120]	; 0x78
 8008930:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008934:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008938:	f7f7 fe6e 	bl	8000618 <__aeabi_dmul>
 800893c:	4602      	mov	r2, r0
 800893e:	460b      	mov	r3, r1
 8008940:	4610      	mov	r0, r2
 8008942:	4619      	mov	r1, r3
 8008944:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008948:	f7f7 fe66 	bl	8000618 <__aeabi_dmul>
 800894c:	4602      	mov	r2, r0
 800894e:	460b      	mov	r3, r1
 8008950:	4620      	mov	r0, r4
 8008952:	4629      	mov	r1, r5
 8008954:	f7f7 fcaa 	bl	80002ac <__adddf3>
 8008958:	4603      	mov	r3, r0
 800895a:	460c      	mov	r4, r1
 800895c:	4625      	mov	r5, r4
 800895e:	461c      	mov	r4, r3
 8008960:	f04f 0200 	mov.w	r2, #0
 8008964:	4b43      	ldr	r3, [pc, #268]	; (8008a74 <scaraFLowScurve+0x914>)
 8008966:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800896a:	f7f7 fe55 	bl	8000618 <__aeabi_dmul>
 800896e:	4602      	mov	r2, r0
 8008970:	460b      	mov	r3, r1
 8008972:	4610      	mov	r0, r2
 8008974:	4619      	mov	r1, r3
 8008976:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800897a:	f7f7 fe4d 	bl	8000618 <__aeabi_dmul>
 800897e:	4602      	mov	r2, r0
 8008980:	460b      	mov	r3, r1
 8008982:	4610      	mov	r0, r2
 8008984:	4619      	mov	r1, r3
 8008986:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800898a:	f7f7 fe45 	bl	8000618 <__aeabi_dmul>
 800898e:	4602      	mov	r2, r0
 8008990:	460b      	mov	r3, r1
 8008992:	4620      	mov	r0, r4
 8008994:	4629      	mov	r1, r5
 8008996:	f7f7 fc87 	bl	80002a8 <__aeabi_dsub>
 800899a:	4603      	mov	r3, r0
 800899c:	460c      	mov	r4, r1
 800899e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089a0:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current 	=	scurve->s_1 + scurve->v_1*t + 0.5*j_max*tm*t*t - j_max*t*t*t/6;
 80089a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a6:	e9d3 4520 	ldrd	r4, r5, [r3, #128]	; 0x80
 80089aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ac:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 80089b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80089b4:	f7f7 fe30 	bl	8000618 <__aeabi_dmul>
 80089b8:	4602      	mov	r2, r0
 80089ba:	460b      	mov	r3, r1
 80089bc:	4620      	mov	r0, r4
 80089be:	4629      	mov	r1, r5
 80089c0:	f7f7 fc74 	bl	80002ac <__adddf3>
 80089c4:	4603      	mov	r3, r0
 80089c6:	460c      	mov	r4, r1
 80089c8:	4625      	mov	r5, r4
 80089ca:	461c      	mov	r4, r3
 80089cc:	f04f 0200 	mov.w	r2, #0
 80089d0:	4b28      	ldr	r3, [pc, #160]	; (8008a74 <scaraFLowScurve+0x914>)
 80089d2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80089d6:	f7f7 fe1f 	bl	8000618 <__aeabi_dmul>
 80089da:	4602      	mov	r2, r0
 80089dc:	460b      	mov	r3, r1
 80089de:	4610      	mov	r0, r2
 80089e0:	4619      	mov	r1, r3
 80089e2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80089e6:	f7f7 fe17 	bl	8000618 <__aeabi_dmul>
 80089ea:	4602      	mov	r2, r0
 80089ec:	460b      	mov	r3, r1
 80089ee:	4610      	mov	r0, r2
 80089f0:	4619      	mov	r1, r3
 80089f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80089f6:	f7f7 fe0f 	bl	8000618 <__aeabi_dmul>
 80089fa:	4602      	mov	r2, r0
 80089fc:	460b      	mov	r3, r1
 80089fe:	4610      	mov	r0, r2
 8008a00:	4619      	mov	r1, r3
 8008a02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008a06:	f7f7 fe07 	bl	8000618 <__aeabi_dmul>
 8008a0a:	4602      	mov	r2, r0
 8008a0c:	460b      	mov	r3, r1
 8008a0e:	4620      	mov	r0, r4
 8008a10:	4629      	mov	r1, r5
 8008a12:	f7f7 fc4b 	bl	80002ac <__adddf3>
 8008a16:	4603      	mov	r3, r0
 8008a18:	460c      	mov	r4, r1
 8008a1a:	4625      	mov	r5, r4
 8008a1c:	461c      	mov	r4, r3
 8008a1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008a22:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008a26:	f7f7 fdf7 	bl	8000618 <__aeabi_dmul>
 8008a2a:	4602      	mov	r2, r0
 8008a2c:	460b      	mov	r3, r1
 8008a2e:	4610      	mov	r0, r2
 8008a30:	4619      	mov	r1, r3
 8008a32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008a36:	f7f7 fdef 	bl	8000618 <__aeabi_dmul>
 8008a3a:	4602      	mov	r2, r0
 8008a3c:	460b      	mov	r3, r1
 8008a3e:	4610      	mov	r0, r2
 8008a40:	4619      	mov	r1, r3
 8008a42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008a46:	f7f7 fde7 	bl	8000618 <__aeabi_dmul>
 8008a4a:	4602      	mov	r2, r0
 8008a4c:	460b      	mov	r3, r1
 8008a4e:	4610      	mov	r0, r2
 8008a50:	4619      	mov	r1, r3
 8008a52:	f04f 0200 	mov.w	r2, #0
 8008a56:	4b08      	ldr	r3, [pc, #32]	; (8008a78 <scaraFLowScurve+0x918>)
 8008a58:	f7f7 ff08 	bl	800086c <__aeabi_ddiv>
 8008a5c:	4602      	mov	r2, r0
 8008a5e:	460b      	mov	r3, r1
 8008a60:	4620      	mov	r0, r4
 8008a62:	4629      	mov	r1, r5
 8008a64:	f7f7 fc20 	bl	80002a8 <__aeabi_dsub>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	460c      	mov	r4, r1
 8008a6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a6e:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8008a72:	e24b      	b.n	8008f0c <scaraFLowScurve+0xdac>
 8008a74:	3fe00000 	.word	0x3fe00000
 8008a78:	40180000 	.word	0x40180000
		 // Phase 3
		 } else if ( ((2*tm) <= time) && ( time < (2*tm + tc)) ) {
 8008a7c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008a80:	4602      	mov	r2, r0
 8008a82:	460b      	mov	r3, r1
 8008a84:	f7f7 fc12 	bl	80002ac <__adddf3>
 8008a88:	4602      	mov	r2, r0
 8008a8a:	460b      	mov	r3, r1
 8008a8c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008a90:	f7f8 f848 	bl	8000b24 <__aeabi_dcmpge>
 8008a94:	4603      	mov	r3, r0
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d04b      	beq.n	8008b32 <scaraFLowScurve+0x9d2>
 8008a9a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008a9e:	4602      	mov	r2, r0
 8008aa0:	460b      	mov	r3, r1
 8008aa2:	f7f7 fc03 	bl	80002ac <__adddf3>
 8008aa6:	4602      	mov	r2, r0
 8008aa8:	460b      	mov	r3, r1
 8008aaa:	4610      	mov	r0, r2
 8008aac:	4619      	mov	r1, r3
 8008aae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008ab2:	f7f7 fbfb 	bl	80002ac <__adddf3>
 8008ab6:	4602      	mov	r2, r0
 8008ab8:	460b      	mov	r3, r1
 8008aba:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008abe:	f7f8 f81d 	bl	8000afc <__aeabi_dcmplt>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d034      	beq.n	8008b32 <scaraFLowScurve+0x9d2>
			 t = time - 2*tm;
 8008ac8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008acc:	4602      	mov	r2, r0
 8008ace:	460b      	mov	r3, r1
 8008ad0:	f7f7 fbec 	bl	80002ac <__adddf3>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	460c      	mov	r4, r1
 8008ad8:	461a      	mov	r2, r3
 8008ada:	4623      	mov	r3, r4
 8008adc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008ae0:	f7f7 fbe2 	bl	80002a8 <__aeabi_dsub>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	460c      	mov	r4, r1
 8008ae8:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	=	0;
 8008aec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008aee:	f04f 0300 	mov.w	r3, #0
 8008af2:	f04f 0400 	mov.w	r4, #0
 8008af6:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_2;
 8008afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008afc:	e9d3 3422 	ldrd	r3, r4, [r3, #136]	; 0x88
 8008b00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b02:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_2 + scurve->v_2*t;
 8008b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b08:	e9d3 4524 	ldrd	r4, r5, [r3, #144]	; 0x90
 8008b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b0e:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 8008b12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008b16:	f7f7 fd7f 	bl	8000618 <__aeabi_dmul>
 8008b1a:	4602      	mov	r2, r0
 8008b1c:	460b      	mov	r3, r1
 8008b1e:	4620      	mov	r0, r4
 8008b20:	4629      	mov	r1, r5
 8008b22:	f7f7 fbc3 	bl	80002ac <__adddf3>
 8008b26:	4603      	mov	r3, r0
 8008b28:	460c      	mov	r4, r1
 8008b2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b2c:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8008b30:	e1ec      	b.n	8008f0c <scaraFLowScurve+0xdac>
		 // Phase 4
		 } else if ( ((2*tm + tc) <= time) && ( time < (3*tm + tc)) ) {
 8008b32:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008b36:	4602      	mov	r2, r0
 8008b38:	460b      	mov	r3, r1
 8008b3a:	f7f7 fbb7 	bl	80002ac <__adddf3>
 8008b3e:	4602      	mov	r2, r0
 8008b40:	460b      	mov	r3, r1
 8008b42:	4610      	mov	r0, r2
 8008b44:	4619      	mov	r1, r3
 8008b46:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008b4a:	f7f7 fbaf 	bl	80002ac <__adddf3>
 8008b4e:	4602      	mov	r2, r0
 8008b50:	460b      	mov	r3, r1
 8008b52:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008b56:	f7f7 ffe5 	bl	8000b24 <__aeabi_dcmpge>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	f000 80af 	beq.w	8008cc0 <scaraFLowScurve+0xb60>
 8008b62:	f04f 0200 	mov.w	r2, #0
 8008b66:	4b53      	ldr	r3, [pc, #332]	; (8008cb4 <scaraFLowScurve+0xb54>)
 8008b68:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008b6c:	f7f7 fd54 	bl	8000618 <__aeabi_dmul>
 8008b70:	4602      	mov	r2, r0
 8008b72:	460b      	mov	r3, r1
 8008b74:	4610      	mov	r0, r2
 8008b76:	4619      	mov	r1, r3
 8008b78:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008b7c:	f7f7 fb96 	bl	80002ac <__adddf3>
 8008b80:	4602      	mov	r2, r0
 8008b82:	460b      	mov	r3, r1
 8008b84:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008b88:	f7f7 ffb8 	bl	8000afc <__aeabi_dcmplt>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	f000 8096 	beq.w	8008cc0 <scaraFLowScurve+0xb60>
			 t = time - (2*tm + tc);
 8008b94:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008b98:	4602      	mov	r2, r0
 8008b9a:	460b      	mov	r3, r1
 8008b9c:	f7f7 fb86 	bl	80002ac <__adddf3>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	460c      	mov	r4, r1
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	4621      	mov	r1, r4
 8008ba8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008bac:	f7f7 fb7e 	bl	80002ac <__adddf3>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	460c      	mov	r4, r1
 8008bb4:	461a      	mov	r2, r3
 8008bb6:	4623      	mov	r3, r4
 8008bb8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008bbc:	f7f7 fb74 	bl	80002a8 <__aeabi_dsub>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	460c      	mov	r4, r1
 8008bc4:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	=	-j_max*t;
 8008bc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008bca:	603b      	str	r3, [r7, #0]
 8008bcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bce:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008bd2:	607b      	str	r3, [r7, #4]
 8008bd4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008bd8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008bdc:	f7f7 fd1c 	bl	8000618 <__aeabi_dmul>
 8008be0:	4603      	mov	r3, r0
 8008be2:	460c      	mov	r4, r1
 8008be4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008be6:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_3 - 0.5*j_max*t*t;
 8008bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bec:	e9d3 4526 	ldrd	r4, r5, [r3, #152]	; 0x98
 8008bf0:	f04f 0200 	mov.w	r2, #0
 8008bf4:	4b30      	ldr	r3, [pc, #192]	; (8008cb8 <scaraFLowScurve+0xb58>)
 8008bf6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008bfa:	f7f7 fd0d 	bl	8000618 <__aeabi_dmul>
 8008bfe:	4602      	mov	r2, r0
 8008c00:	460b      	mov	r3, r1
 8008c02:	4610      	mov	r0, r2
 8008c04:	4619      	mov	r1, r3
 8008c06:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008c0a:	f7f7 fd05 	bl	8000618 <__aeabi_dmul>
 8008c0e:	4602      	mov	r2, r0
 8008c10:	460b      	mov	r3, r1
 8008c12:	4610      	mov	r0, r2
 8008c14:	4619      	mov	r1, r3
 8008c16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008c1a:	f7f7 fcfd 	bl	8000618 <__aeabi_dmul>
 8008c1e:	4602      	mov	r2, r0
 8008c20:	460b      	mov	r3, r1
 8008c22:	4620      	mov	r0, r4
 8008c24:	4629      	mov	r1, r5
 8008c26:	f7f7 fb3f 	bl	80002a8 <__aeabi_dsub>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	460c      	mov	r4, r1
 8008c2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c30:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_3 + scurve->v_3*t - j_max*t*t*t/6;
 8008c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c36:	e9d3 4528 	ldrd	r4, r5, [r3, #160]	; 0xa0
 8008c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c3c:	e9d3 0126 	ldrd	r0, r1, [r3, #152]	; 0x98
 8008c40:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008c44:	f7f7 fce8 	bl	8000618 <__aeabi_dmul>
 8008c48:	4602      	mov	r2, r0
 8008c4a:	460b      	mov	r3, r1
 8008c4c:	4620      	mov	r0, r4
 8008c4e:	4629      	mov	r1, r5
 8008c50:	f7f7 fb2c 	bl	80002ac <__adddf3>
 8008c54:	4603      	mov	r3, r0
 8008c56:	460c      	mov	r4, r1
 8008c58:	4625      	mov	r5, r4
 8008c5a:	461c      	mov	r4, r3
 8008c5c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008c60:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008c64:	f7f7 fcd8 	bl	8000618 <__aeabi_dmul>
 8008c68:	4602      	mov	r2, r0
 8008c6a:	460b      	mov	r3, r1
 8008c6c:	4610      	mov	r0, r2
 8008c6e:	4619      	mov	r1, r3
 8008c70:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008c74:	f7f7 fcd0 	bl	8000618 <__aeabi_dmul>
 8008c78:	4602      	mov	r2, r0
 8008c7a:	460b      	mov	r3, r1
 8008c7c:	4610      	mov	r0, r2
 8008c7e:	4619      	mov	r1, r3
 8008c80:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008c84:	f7f7 fcc8 	bl	8000618 <__aeabi_dmul>
 8008c88:	4602      	mov	r2, r0
 8008c8a:	460b      	mov	r3, r1
 8008c8c:	4610      	mov	r0, r2
 8008c8e:	4619      	mov	r1, r3
 8008c90:	f04f 0200 	mov.w	r2, #0
 8008c94:	4b09      	ldr	r3, [pc, #36]	; (8008cbc <scaraFLowScurve+0xb5c>)
 8008c96:	f7f7 fde9 	bl	800086c <__aeabi_ddiv>
 8008c9a:	4602      	mov	r2, r0
 8008c9c:	460b      	mov	r3, r1
 8008c9e:	4620      	mov	r0, r4
 8008ca0:	4629      	mov	r1, r5
 8008ca2:	f7f7 fb01 	bl	80002a8 <__aeabi_dsub>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	460c      	mov	r4, r1
 8008caa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cac:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8008cb0:	e12c      	b.n	8008f0c <scaraFLowScurve+0xdac>
 8008cb2:	bf00      	nop
 8008cb4:	40080000 	.word	0x40080000
 8008cb8:	3fe00000 	.word	0x3fe00000
 8008cbc:	40180000 	.word	0x40180000
		 // Phase 5
		 } else if ( ((3*tm + tc) <= time) && ( time < (4*tm + tc)) ) {
 8008cc0:	f04f 0200 	mov.w	r2, #0
 8008cc4:	4b94      	ldr	r3, [pc, #592]	; (8008f18 <scaraFLowScurve+0xdb8>)
 8008cc6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008cca:	f7f7 fca5 	bl	8000618 <__aeabi_dmul>
 8008cce:	4602      	mov	r2, r0
 8008cd0:	460b      	mov	r3, r1
 8008cd2:	4610      	mov	r0, r2
 8008cd4:	4619      	mov	r1, r3
 8008cd6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008cda:	f7f7 fae7 	bl	80002ac <__adddf3>
 8008cde:	4602      	mov	r2, r0
 8008ce0:	460b      	mov	r3, r1
 8008ce2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008ce6:	f7f7 ff1d 	bl	8000b24 <__aeabi_dcmpge>
 8008cea:	4603      	mov	r3, r0
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	f000 80f6 	beq.w	8008ede <scaraFLowScurve+0xd7e>
 8008cf2:	f04f 0200 	mov.w	r2, #0
 8008cf6:	4b89      	ldr	r3, [pc, #548]	; (8008f1c <scaraFLowScurve+0xdbc>)
 8008cf8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008cfc:	f7f7 fc8c 	bl	8000618 <__aeabi_dmul>
 8008d00:	4602      	mov	r2, r0
 8008d02:	460b      	mov	r3, r1
 8008d04:	4610      	mov	r0, r2
 8008d06:	4619      	mov	r1, r3
 8008d08:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008d0c:	f7f7 face 	bl	80002ac <__adddf3>
 8008d10:	4602      	mov	r2, r0
 8008d12:	460b      	mov	r3, r1
 8008d14:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008d18:	f7f7 fef0 	bl	8000afc <__aeabi_dcmplt>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	f000 80dd 	beq.w	8008ede <scaraFLowScurve+0xd7e>
			 t = time - (3*tm + tc);
 8008d24:	f04f 0200 	mov.w	r2, #0
 8008d28:	4b7b      	ldr	r3, [pc, #492]	; (8008f18 <scaraFLowScurve+0xdb8>)
 8008d2a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008d2e:	f7f7 fc73 	bl	8000618 <__aeabi_dmul>
 8008d32:	4602      	mov	r2, r0
 8008d34:	460b      	mov	r3, r1
 8008d36:	4610      	mov	r0, r2
 8008d38:	4619      	mov	r1, r3
 8008d3a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008d3e:	f7f7 fab5 	bl	80002ac <__adddf3>
 8008d42:	4602      	mov	r2, r0
 8008d44:	460b      	mov	r3, r1
 8008d46:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008d4a:	f7f7 faad 	bl	80002a8 <__aeabi_dsub>
 8008d4e:	4602      	mov	r2, r0
 8008d50:	460b      	mov	r3, r1
 8008d52:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			 scurve->a_current	=	-j_max*tm + j_max*t;
 8008d56:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8008d58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d5a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8008d5e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008d62:	4620      	mov	r0, r4
 8008d64:	4629      	mov	r1, r5
 8008d66:	f7f7 fc57 	bl	8000618 <__aeabi_dmul>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	460c      	mov	r4, r1
 8008d6e:	4625      	mov	r5, r4
 8008d70:	461c      	mov	r4, r3
 8008d72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008d76:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008d7a:	f7f7 fc4d 	bl	8000618 <__aeabi_dmul>
 8008d7e:	4602      	mov	r2, r0
 8008d80:	460b      	mov	r3, r1
 8008d82:	4620      	mov	r0, r4
 8008d84:	4629      	mov	r1, r5
 8008d86:	f7f7 fa91 	bl	80002ac <__adddf3>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	460c      	mov	r4, r1
 8008d8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d90:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_4 - j_max*tm*t + 0.5*j_max*t*t;
 8008d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d96:	e9d3 452a 	ldrd	r4, r5, [r3, #168]	; 0xa8
 8008d9a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008d9e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008da2:	f7f7 fc39 	bl	8000618 <__aeabi_dmul>
 8008da6:	4602      	mov	r2, r0
 8008da8:	460b      	mov	r3, r1
 8008daa:	4610      	mov	r0, r2
 8008dac:	4619      	mov	r1, r3
 8008dae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008db2:	f7f7 fc31 	bl	8000618 <__aeabi_dmul>
 8008db6:	4602      	mov	r2, r0
 8008db8:	460b      	mov	r3, r1
 8008dba:	4620      	mov	r0, r4
 8008dbc:	4629      	mov	r1, r5
 8008dbe:	f7f7 fa73 	bl	80002a8 <__aeabi_dsub>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	460c      	mov	r4, r1
 8008dc6:	4625      	mov	r5, r4
 8008dc8:	461c      	mov	r4, r3
 8008dca:	f04f 0200 	mov.w	r2, #0
 8008dce:	4b54      	ldr	r3, [pc, #336]	; (8008f20 <scaraFLowScurve+0xdc0>)
 8008dd0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008dd4:	f7f7 fc20 	bl	8000618 <__aeabi_dmul>
 8008dd8:	4602      	mov	r2, r0
 8008dda:	460b      	mov	r3, r1
 8008ddc:	4610      	mov	r0, r2
 8008dde:	4619      	mov	r1, r3
 8008de0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008de4:	f7f7 fc18 	bl	8000618 <__aeabi_dmul>
 8008de8:	4602      	mov	r2, r0
 8008dea:	460b      	mov	r3, r1
 8008dec:	4610      	mov	r0, r2
 8008dee:	4619      	mov	r1, r3
 8008df0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008df4:	f7f7 fc10 	bl	8000618 <__aeabi_dmul>
 8008df8:	4602      	mov	r2, r0
 8008dfa:	460b      	mov	r3, r1
 8008dfc:	4620      	mov	r0, r4
 8008dfe:	4629      	mov	r1, r5
 8008e00:	f7f7 fa54 	bl	80002ac <__adddf3>
 8008e04:	4603      	mov	r3, r0
 8008e06:	460c      	mov	r4, r1
 8008e08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e0a:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_4 + scurve->v_4*t - 0.5*j_max*tm*t*t + j_max*t*t*t/6;
 8008e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e10:	e9d3 452c 	ldrd	r4, r5, [r3, #176]	; 0xb0
 8008e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e16:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
 8008e1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008e1e:	f7f7 fbfb 	bl	8000618 <__aeabi_dmul>
 8008e22:	4602      	mov	r2, r0
 8008e24:	460b      	mov	r3, r1
 8008e26:	4620      	mov	r0, r4
 8008e28:	4629      	mov	r1, r5
 8008e2a:	f7f7 fa3f 	bl	80002ac <__adddf3>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	460c      	mov	r4, r1
 8008e32:	4625      	mov	r5, r4
 8008e34:	461c      	mov	r4, r3
 8008e36:	f04f 0200 	mov.w	r2, #0
 8008e3a:	4b39      	ldr	r3, [pc, #228]	; (8008f20 <scaraFLowScurve+0xdc0>)
 8008e3c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008e40:	f7f7 fbea 	bl	8000618 <__aeabi_dmul>
 8008e44:	4602      	mov	r2, r0
 8008e46:	460b      	mov	r3, r1
 8008e48:	4610      	mov	r0, r2
 8008e4a:	4619      	mov	r1, r3
 8008e4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008e50:	f7f7 fbe2 	bl	8000618 <__aeabi_dmul>
 8008e54:	4602      	mov	r2, r0
 8008e56:	460b      	mov	r3, r1
 8008e58:	4610      	mov	r0, r2
 8008e5a:	4619      	mov	r1, r3
 8008e5c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008e60:	f7f7 fbda 	bl	8000618 <__aeabi_dmul>
 8008e64:	4602      	mov	r2, r0
 8008e66:	460b      	mov	r3, r1
 8008e68:	4610      	mov	r0, r2
 8008e6a:	4619      	mov	r1, r3
 8008e6c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008e70:	f7f7 fbd2 	bl	8000618 <__aeabi_dmul>
 8008e74:	4602      	mov	r2, r0
 8008e76:	460b      	mov	r3, r1
 8008e78:	4620      	mov	r0, r4
 8008e7a:	4629      	mov	r1, r5
 8008e7c:	f7f7 fa14 	bl	80002a8 <__aeabi_dsub>
 8008e80:	4603      	mov	r3, r0
 8008e82:	460c      	mov	r4, r1
 8008e84:	4625      	mov	r5, r4
 8008e86:	461c      	mov	r4, r3
 8008e88:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008e8c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008e90:	f7f7 fbc2 	bl	8000618 <__aeabi_dmul>
 8008e94:	4602      	mov	r2, r0
 8008e96:	460b      	mov	r3, r1
 8008e98:	4610      	mov	r0, r2
 8008e9a:	4619      	mov	r1, r3
 8008e9c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008ea0:	f7f7 fbba 	bl	8000618 <__aeabi_dmul>
 8008ea4:	4602      	mov	r2, r0
 8008ea6:	460b      	mov	r3, r1
 8008ea8:	4610      	mov	r0, r2
 8008eaa:	4619      	mov	r1, r3
 8008eac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008eb0:	f7f7 fbb2 	bl	8000618 <__aeabi_dmul>
 8008eb4:	4602      	mov	r2, r0
 8008eb6:	460b      	mov	r3, r1
 8008eb8:	4610      	mov	r0, r2
 8008eba:	4619      	mov	r1, r3
 8008ebc:	f04f 0200 	mov.w	r2, #0
 8008ec0:	4b18      	ldr	r3, [pc, #96]	; (8008f24 <scaraFLowScurve+0xdc4>)
 8008ec2:	f7f7 fcd3 	bl	800086c <__aeabi_ddiv>
 8008ec6:	4602      	mov	r2, r0
 8008ec8:	460b      	mov	r3, r1
 8008eca:	4620      	mov	r0, r4
 8008ecc:	4629      	mov	r1, r5
 8008ece:	f7f7 f9ed 	bl	80002ac <__adddf3>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	460c      	mov	r4, r1
 8008ed6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ed8:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8008edc:	e016      	b.n	8008f0c <scaraFLowScurve+0xdac>
		 } else {
			 scurve->a_current = 0;
 8008ede:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ee0:	f04f 0300 	mov.w	r3, #0
 8008ee4:	f04f 0400 	mov.w	r4, #0
 8008ee8:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current = 0;
 8008eec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008eee:	f04f 0300 	mov.w	r3, #0
 8008ef2:	f04f 0400 	mov.w	r4, #0
 8008ef6:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current = scurve->total_s;
 8008efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008efc:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8008f00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f02:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8008f06:	e001      	b.n	8008f0c <scaraFLowScurve+0xdac>
		 }

	 } else {
		 return SCARA_STATUS_ERROR;
 8008f08:	2301      	movs	r3, #1
 8008f0a:	e000      	b.n	8008f0e <scaraFLowScurve+0xdae>
	 }

	 return SCARA_STATUS_OK;
 8008f0c:	2300      	movs	r3, #0
}
 8008f0e:	4618      	mov	r0, r3
 8008f10:	3748      	adds	r7, #72	; 0x48
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bdb0      	pop	{r4, r5, r7, pc}
 8008f16:	bf00      	nop
 8008f18:	40080000 	.word	0x40080000
 8008f1c:	40100000 	.word	0x40100000
 8008f20:	3fe00000 	.word	0x3fe00000
 8008f24:	40180000 	.word	0x40180000

08008f28 <scaraCheckWorkSpace4>:

/* Check limit 4 joint variable */
SCARA_StatusTypeDef	scaraCheckWorkSpace4 (double theta1, double theta2, double d3, double theta4) {
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b088      	sub	sp, #32
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	ed87 0b06 	vstr	d0, [r7, #24]
 8008f32:	ed87 1b04 	vstr	d1, [r7, #16]
 8008f36:	ed87 2b02 	vstr	d2, [r7, #8]
 8008f3a:	ed87 3b00 	vstr	d3, [r7]
	// check theta 1
	if ( theta1 < LIM_MIN_J0 || theta1 > LIM_MAX_J0) {
 8008f3e:	a335      	add	r3, pc, #212	; (adr r3, 8009014 <scaraCheckWorkSpace4+0xec>)
 8008f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f44:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008f48:	f7f7 fdd8 	bl	8000afc <__aeabi_dcmplt>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d109      	bne.n	8008f66 <scaraCheckWorkSpace4+0x3e>
 8008f52:	a332      	add	r3, pc, #200	; (adr r3, 800901c <scaraCheckWorkSpace4+0xf4>)
 8008f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f58:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008f5c:	f7f7 fdec 	bl	8000b38 <__aeabi_dcmpgt>
 8008f60:	4603      	mov	r3, r0
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d001      	beq.n	8008f6a <scaraCheckWorkSpace4+0x42>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8008f66:	2307      	movs	r3, #7
 8008f68:	e043      	b.n	8008ff2 <scaraCheckWorkSpace4+0xca>
	}
	// check theta 2
	if ( theta2 < LIM_MIN_J1 || theta2 > LIM_MAX_J1) {
 8008f6a:	a32e      	add	r3, pc, #184	; (adr r3, 8009024 <scaraCheckWorkSpace4+0xfc>)
 8008f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f70:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008f74:	f7f7 fdc2 	bl	8000afc <__aeabi_dcmplt>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d109      	bne.n	8008f92 <scaraCheckWorkSpace4+0x6a>
 8008f7e:	a32b      	add	r3, pc, #172	; (adr r3, 800902c <scaraCheckWorkSpace4+0x104>)
 8008f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f84:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008f88:	f7f7 fdd6 	bl	8000b38 <__aeabi_dcmpgt>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d001      	beq.n	8008f96 <scaraCheckWorkSpace4+0x6e>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8008f92:	2307      	movs	r3, #7
 8008f94:	e02d      	b.n	8008ff2 <scaraCheckWorkSpace4+0xca>
	}
	// check d 3
	if ( d3 < LIM_MIN_J2 || d3 > LIM_MAX_J2) {
 8008f96:	f04f 0200 	mov.w	r2, #0
 8008f9a:	f04f 0300 	mov.w	r3, #0
 8008f9e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008fa2:	f7f7 fdab 	bl	8000afc <__aeabi_dcmplt>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d109      	bne.n	8008fc0 <scaraCheckWorkSpace4+0x98>
 8008fac:	f04f 0200 	mov.w	r2, #0
 8008fb0:	4b17      	ldr	r3, [pc, #92]	; (8009010 <scaraCheckWorkSpace4+0xe8>)
 8008fb2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008fb6:	f7f7 fdbf 	bl	8000b38 <__aeabi_dcmpgt>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d001      	beq.n	8008fc4 <scaraCheckWorkSpace4+0x9c>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8008fc0:	2307      	movs	r3, #7
 8008fc2:	e016      	b.n	8008ff2 <scaraCheckWorkSpace4+0xca>
	}
	// check theta 4
	if ( theta4 < LIM_MIN_J3 || theta4 > LIM_MAX_J3) {
 8008fc4:	a30e      	add	r3, pc, #56	; (adr r3, 8009000 <scaraCheckWorkSpace4+0xd8>)
 8008fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fca:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008fce:	f7f7 fd95 	bl	8000afc <__aeabi_dcmplt>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d109      	bne.n	8008fec <scaraCheckWorkSpace4+0xc4>
 8008fd8:	a30b      	add	r3, pc, #44	; (adr r3, 8009008 <scaraCheckWorkSpace4+0xe0>)
 8008fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fde:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008fe2:	f7f7 fda9 	bl	8000b38 <__aeabi_dcmpgt>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d001      	beq.n	8008ff0 <scaraCheckWorkSpace4+0xc8>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8008fec:	2307      	movs	r3, #7
 8008fee:	e000      	b.n	8008ff2 <scaraCheckWorkSpace4+0xca>
	}
	return SCARA_STATUS_OK;
 8008ff0:	2300      	movs	r3, #0
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3720      	adds	r7, #32
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}
 8008ffa:	bf00      	nop
 8008ffc:	f3af 8000 	nop.w
 8009000:	daaaaaab 	.word	0xdaaaaaab
 8009004:	c007bc89 	.word	0xc007bc89
 8009008:	daaaaaab 	.word	0xdaaaaaab
 800900c:	4007bc89 	.word	0x4007bc89
 8009010:	40590000 	.word	0x40590000
 8009014:	daaaaaab 	.word	0xdaaaaaab
 8009018:	bff7bc89 	.word	0xbff7bc89
 800901c:	daaaaaab 	.word	0xdaaaaaab
 8009020:	3ff7bc89 	.word	0x3ff7bc89
 8009024:	88000000 	.word	0x88000000
 8009028:	c002d97c 	.word	0xc002d97c
 800902c:	88000000 	.word	0x88000000
 8009030:	4002d97c 	.word	0x4002d97c
 8009034:	00000000 	.word	0x00000000

08009038 <scaraCheckWorkSpace1>:

/* Check limit 1 joint variable */
SCARA_StatusTypeDef	scaraCheckWorkSpace1 (Trajectory_TargetTypeDef target, double value) {
 8009038:	b580      	push	{r7, lr}
 800903a:	b084      	sub	sp, #16
 800903c:	af00      	add	r7, sp, #0
 800903e:	4603      	mov	r3, r0
 8009040:	ed87 0b00 	vstr	d0, [r7]
 8009044:	73fb      	strb	r3, [r7, #15]
	if ( TRAJECTORY_J0 == target) {
 8009046:	7bfb      	ldrb	r3, [r7, #15]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d117      	bne.n	800907c <scaraCheckWorkSpace1+0x44>
		if ( (LIM_MIN_J0 <= value) && ( value <= LIM_MAX_J0)) {
 800904c:	a33d      	add	r3, pc, #244	; (adr r3, 8009144 <scaraCheckWorkSpace1+0x10c>)
 800904e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009052:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009056:	f7f7 fd65 	bl	8000b24 <__aeabi_dcmpge>
 800905a:	4603      	mov	r3, r0
 800905c:	2b00      	cmp	r3, #0
 800905e:	d00b      	beq.n	8009078 <scaraCheckWorkSpace1+0x40>
 8009060:	a33a      	add	r3, pc, #232	; (adr r3, 800914c <scaraCheckWorkSpace1+0x114>)
 8009062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009066:	e9d7 0100 	ldrd	r0, r1, [r7]
 800906a:	f7f7 fd51 	bl	8000b10 <__aeabi_dcmple>
 800906e:	4603      	mov	r3, r0
 8009070:	2b00      	cmp	r3, #0
 8009072:	d001      	beq.n	8009078 <scaraCheckWorkSpace1+0x40>
			return SCARA_STATUS_OK;
 8009074:	2300      	movs	r3, #0
 8009076:	e054      	b.n	8009122 <scaraCheckWorkSpace1+0xea>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8009078:	2307      	movs	r3, #7
 800907a:	e052      	b.n	8009122 <scaraCheckWorkSpace1+0xea>
		}
	} else if (TRAJECTORY_J1 == target) {
 800907c:	7bfb      	ldrb	r3, [r7, #15]
 800907e:	2b01      	cmp	r3, #1
 8009080:	d117      	bne.n	80090b2 <scaraCheckWorkSpace1+0x7a>
		if ( (LIM_MIN_J1 <= value) && ( value <= LIM_MAX_J1)) {
 8009082:	a334      	add	r3, pc, #208	; (adr r3, 8009154 <scaraCheckWorkSpace1+0x11c>)
 8009084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009088:	e9d7 0100 	ldrd	r0, r1, [r7]
 800908c:	f7f7 fd4a 	bl	8000b24 <__aeabi_dcmpge>
 8009090:	4603      	mov	r3, r0
 8009092:	2b00      	cmp	r3, #0
 8009094:	d00b      	beq.n	80090ae <scaraCheckWorkSpace1+0x76>
 8009096:	a331      	add	r3, pc, #196	; (adr r3, 800915c <scaraCheckWorkSpace1+0x124>)
 8009098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800909c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80090a0:	f7f7 fd36 	bl	8000b10 <__aeabi_dcmple>
 80090a4:	4603      	mov	r3, r0
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d001      	beq.n	80090ae <scaraCheckWorkSpace1+0x76>
			return SCARA_STATUS_OK;
 80090aa:	2300      	movs	r3, #0
 80090ac:	e039      	b.n	8009122 <scaraCheckWorkSpace1+0xea>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 80090ae:	2307      	movs	r3, #7
 80090b0:	e037      	b.n	8009122 <scaraCheckWorkSpace1+0xea>
		}
	} else if (TRAJECTORY_J2 == target) {
 80090b2:	7bfb      	ldrb	r3, [r7, #15]
 80090b4:	2b02      	cmp	r3, #2
 80090b6:	d118      	bne.n	80090ea <scaraCheckWorkSpace1+0xb2>
		if ( (LIM_MIN_J2 <= value) && ( value <= LIM_MAX_J2)) {
 80090b8:	f04f 0200 	mov.w	r2, #0
 80090bc:	f04f 0300 	mov.w	r3, #0
 80090c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80090c4:	f7f7 fd2e 	bl	8000b24 <__aeabi_dcmpge>
 80090c8:	4603      	mov	r3, r0
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d00b      	beq.n	80090e6 <scaraCheckWorkSpace1+0xae>
 80090ce:	f04f 0200 	mov.w	r2, #0
 80090d2:	4b1b      	ldr	r3, [pc, #108]	; (8009140 <scaraCheckWorkSpace1+0x108>)
 80090d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80090d8:	f7f7 fd1a 	bl	8000b10 <__aeabi_dcmple>
 80090dc:	4603      	mov	r3, r0
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d001      	beq.n	80090e6 <scaraCheckWorkSpace1+0xae>
			return SCARA_STATUS_OK;
 80090e2:	2300      	movs	r3, #0
 80090e4:	e01d      	b.n	8009122 <scaraCheckWorkSpace1+0xea>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 80090e6:	2307      	movs	r3, #7
 80090e8:	e01b      	b.n	8009122 <scaraCheckWorkSpace1+0xea>
		}
	} else if (TRAJECTORY_J3 == target) {
 80090ea:	7bfb      	ldrb	r3, [r7, #15]
 80090ec:	2b03      	cmp	r3, #3
 80090ee:	d117      	bne.n	8009120 <scaraCheckWorkSpace1+0xe8>
		if ( (LIM_MIN_J3 <= value) && ( value <= LIM_MAX_J3)) {
 80090f0:	a30f      	add	r3, pc, #60	; (adr r3, 8009130 <scaraCheckWorkSpace1+0xf8>)
 80090f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80090fa:	f7f7 fd13 	bl	8000b24 <__aeabi_dcmpge>
 80090fe:	4603      	mov	r3, r0
 8009100:	2b00      	cmp	r3, #0
 8009102:	d00b      	beq.n	800911c <scaraCheckWorkSpace1+0xe4>
 8009104:	a30c      	add	r3, pc, #48	; (adr r3, 8009138 <scaraCheckWorkSpace1+0x100>)
 8009106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800910a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800910e:	f7f7 fcff 	bl	8000b10 <__aeabi_dcmple>
 8009112:	4603      	mov	r3, r0
 8009114:	2b00      	cmp	r3, #0
 8009116:	d001      	beq.n	800911c <scaraCheckWorkSpace1+0xe4>
			return SCARA_STATUS_OK;
 8009118:	2300      	movs	r3, #0
 800911a:	e002      	b.n	8009122 <scaraCheckWorkSpace1+0xea>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800911c:	2307      	movs	r3, #7
 800911e:	e000      	b.n	8009122 <scaraCheckWorkSpace1+0xea>
		}
	} else {
		return SCARA_STATUS_ERROR;
 8009120:	2301      	movs	r3, #1
	}
}
 8009122:	4618      	mov	r0, r3
 8009124:	3710      	adds	r7, #16
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}
 800912a:	bf00      	nop
 800912c:	f3af 8000 	nop.w
 8009130:	daaaaaab 	.word	0xdaaaaaab
 8009134:	c007bc89 	.word	0xc007bc89
 8009138:	daaaaaab 	.word	0xdaaaaaab
 800913c:	4007bc89 	.word	0x4007bc89
 8009140:	40590000 	.word	0x40590000
 8009144:	daaaaaab 	.word	0xdaaaaaab
 8009148:	bff7bc89 	.word	0xbff7bc89
 800914c:	daaaaaab 	.word	0xdaaaaaab
 8009150:	3ff7bc89 	.word	0x3ff7bc89
 8009154:	88000000 	.word	0x88000000
 8009158:	c002d97c 	.word	0xc002d97c
 800915c:	88000000 	.word	0x88000000
 8009160:	4002d97c 	.word	0x4002d97c
 8009164:	00000000 	.word	0x00000000

08009168 <scaraTestDuty>:

/* Check all of point in travel */
SCARA_StatusTypeDef	scaraTestDuty(void) {
 8009168:	b5b0      	push	{r4, r5, r7, lr}
 800916a:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 800916e:	af2c      	add	r7, sp, #176	; 0xb0
	int32_t sample_count;
	double run_time = 0;
 8009170:	f04f 0300 	mov.w	r3, #0
 8009174:	f04f 0400 	mov.w	r4, #0
 8009178:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
	SCARA_PositionTypeDef test_Next, test_Current;
	SCARA_StatusTypeDef status;
	memcpy(&test_Current, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 800917c:	463b      	mov	r3, r7
 800917e:	4a36      	ldr	r2, [pc, #216]	; (8009258 <scaraTestDuty+0xf0>)
 8009180:	4618      	mov	r0, r3
 8009182:	4611      	mov	r1, r2
 8009184:	23b8      	movs	r3, #184	; 0xb8
 8009186:	461a      	mov	r2, r3
 8009188:	f00c fcca 	bl	8015b20 <memcpy>
	sample_count = ceil(myDUTY.time_total/T_SAMPLING);
 800918c:	4b33      	ldr	r3, [pc, #204]	; (800925c <scaraTestDuty+0xf4>)
 800918e:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8009192:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009196:	a32e      	add	r3, pc, #184	; (adr r3, 8009250 <scaraTestDuty+0xe8>)
 8009198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800919c:	f7f7 fb66 	bl	800086c <__aeabi_ddiv>
 80091a0:	4603      	mov	r3, r0
 80091a2:	460c      	mov	r4, r1
 80091a4:	ec44 3b17 	vmov	d7, r3, r4
 80091a8:	eeb0 0a47 	vmov.f32	s0, s14
 80091ac:	eef0 0a67 	vmov.f32	s1, s15
 80091b0:	f010 fe66 	bl	8019e80 <ceil>
 80091b4:	ec54 3b10 	vmov	r3, r4, d0
 80091b8:	4618      	mov	r0, r3
 80091ba:	4621      	mov	r1, r4
 80091bc:	f7f7 fcdc 	bl	8000b78 <__aeabi_d2iz>
 80091c0:	4603      	mov	r3, r0
 80091c2:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
	for (int32_t i = 1; i < sample_count; i++) {
 80091c6:	2301      	movs	r3, #1
 80091c8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80091cc:	e032      	b.n	8009234 <scaraTestDuty+0xcc>
		run_time += T_SAMPLING;
 80091ce:	a320      	add	r3, pc, #128	; (adr r3, 8009250 <scaraTestDuty+0xe8>)
 80091d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091d4:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 80091d8:	f7f7 f868 	bl	80002ac <__adddf3>
 80091dc:	4603      	mov	r3, r0
 80091de:	460c      	mov	r4, r1
 80091e0:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
		status = scaraFlowDuty(run_time, &test_Next, test_Current);
 80091e4:	463c      	mov	r4, r7
 80091e6:	f107 05b8 	add.w	r5, r7, #184	; 0xb8
 80091ea:	4668      	mov	r0, sp
 80091ec:	f104 0308 	add.w	r3, r4, #8
 80091f0:	22b0      	movs	r2, #176	; 0xb0
 80091f2:	4619      	mov	r1, r3
 80091f4:	f00c fc94 	bl	8015b20 <memcpy>
 80091f8:	e894 000c 	ldmia.w	r4, {r2, r3}
 80091fc:	4628      	mov	r0, r5
 80091fe:	ed97 0b60 	vldr	d0, [r7, #384]	; 0x180
 8009202:	f7fe f993 	bl	800752c <scaraFlowDuty>
 8009206:	4603      	mov	r3, r0
 8009208:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
		if (status != SCARA_STATUS_OK) {
 800920c:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8009210:	2b00      	cmp	r3, #0
 8009212:	d002      	beq.n	800921a <scaraTestDuty+0xb2>
			return status;
 8009214:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8009218:	e013      	b.n	8009242 <scaraTestDuty+0xda>
		}
		memcpy(&test_Next, &test_Current, sizeof(SCARA_PositionTypeDef));
 800921a:	463a      	mov	r2, r7
 800921c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8009220:	4611      	mov	r1, r2
 8009222:	22b8      	movs	r2, #184	; 0xb8
 8009224:	4618      	mov	r0, r3
 8009226:	f00c fc7b 	bl	8015b20 <memcpy>
	for (int32_t i = 1; i < sample_count; i++) {
 800922a:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800922e:	3301      	adds	r3, #1
 8009230:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8009234:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8009238:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800923c:	429a      	cmp	r2, r3
 800923e:	dbc6      	blt.n	80091ce <scaraTestDuty+0x66>
	}
	return SCARA_STATUS_OK;
 8009240:	2300      	movs	r3, #0
}
 8009242:	4618      	mov	r0, r3
 8009244:	f507 77c4 	add.w	r7, r7, #392	; 0x188
 8009248:	46bd      	mov	sp, r7
 800924a:	bdb0      	pop	{r4, r5, r7, pc}
 800924c:	f3af 8000 	nop.w
 8009250:	40000000 	.word	0x40000000
 8009254:	3f847ae1 	.word	0x3f847ae1
 8009258:	20005e90 	.word	0x20005e90
 800925c:	200053d0 	.word	0x200053d0

08009260 <scaraSetScanFlag>:

void				scaraSetScanFlag(void) {
 8009260:	b480      	push	{r7}
 8009262:	af00      	add	r7, sp, #0
	mySCARA.isScanLitmit = TRUE;
 8009264:	4b03      	ldr	r3, [pc, #12]	; (8009274 <scaraSetScanFlag+0x14>)
 8009266:	2201      	movs	r2, #1
 8009268:	70da      	strb	r2, [r3, #3]
}
 800926a:	bf00      	nop
 800926c:	46bd      	mov	sp, r7
 800926e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009272:	4770      	bx	lr
 8009274:	20000ca0 	.word	0x20000ca0

08009278 <scaraSetOutput>:

void				scaraSetOutput		(uint8_t level) {
 8009278:	b580      	push	{r7, lr}
 800927a:	b082      	sub	sp, #8
 800927c:	af00      	add	r7, sp, #0
 800927e:	4603      	mov	r3, r0
 8009280:	71fb      	strb	r3, [r7, #7]
	mySCARA.outputSet	 = level;
 8009282:	4a05      	ldr	r2, [pc, #20]	; (8009298 <scaraSetOutput+0x20>)
 8009284:	79fb      	ldrb	r3, [r7, #7]
 8009286:	7113      	strb	r3, [r2, #4]
	lowlayer_setOutput(level);
 8009288:	79fb      	ldrb	r3, [r7, #7]
 800928a:	4618      	mov	r0, r3
 800928c:	f7fb fc58 	bl	8004b40 <lowlayer_setOutput>
}
 8009290:	bf00      	nop
 8009292:	3708      	adds	r7, #8
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}
 8009298:	20000ca0 	.word	0x20000ca0

0800929c <scaraSetDutyState>:

void				scaraSetDutyState(SCARA_DutyStateTypeDef state) {
 800929c:	b480      	push	{r7}
 800929e:	b083      	sub	sp, #12
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	4603      	mov	r3, r0
 80092a4:	71fb      	strb	r3, [r7, #7]
	mySCARA.duty_State = state;
 80092a6:	4a04      	ldr	r2, [pc, #16]	; (80092b8 <scaraSetDutyState+0x1c>)
 80092a8:	79fb      	ldrb	r3, [r7, #7]
 80092aa:	7093      	strb	r3, [r2, #2]
}
 80092ac:	bf00      	nop
 80092ae:	370c      	adds	r7, #12
 80092b0:	46bd      	mov	sp, r7
 80092b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b6:	4770      	bx	lr
 80092b8:	20000ca0 	.word	0x20000ca0

080092bc <scaraSetMode>:

void				scaraSetMode(SCARA_ModeTypeDef mode) {
 80092bc:	b480      	push	{r7}
 80092be:	b083      	sub	sp, #12
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	4603      	mov	r3, r0
 80092c4:	71fb      	strb	r3, [r7, #7]
	mySCARA.mode = mode;
 80092c6:	4a04      	ldr	r2, [pc, #16]	; (80092d8 <scaraSetMode+0x1c>)
 80092c8:	79fb      	ldrb	r3, [r7, #7]
 80092ca:	7053      	strb	r3, [r2, #1]
}
 80092cc:	bf00      	nop
 80092ce:	370c      	adds	r7, #12
 80092d0:	46bd      	mov	sp, r7
 80092d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d6:	4770      	bx	lr
 80092d8:	20000ca0 	.word	0x20000ca0

080092dc <scaraSetMethod>:

void				scaraSetMethod(SCARA_MethodTypeDef method) {
 80092dc:	b480      	push	{r7}
 80092de:	b083      	sub	sp, #12
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	4603      	mov	r3, r0
 80092e4:	71fb      	strb	r3, [r7, #7]
	mySCARA.method = method;
 80092e6:	4a04      	ldr	r2, [pc, #16]	; (80092f8 <scaraSetMethod+0x1c>)
 80092e8:	79fb      	ldrb	r3, [r7, #7]
 80092ea:	7013      	strb	r3, [r2, #0]
}
 80092ec:	bf00      	nop
 80092ee:	370c      	adds	r7, #12
 80092f0:	46bd      	mov	sp, r7
 80092f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f6:	4770      	bx	lr
 80092f8:	20000ca0 	.word	0x20000ca0

080092fc <scaraGetPosition>:


void				scaraGetPosition	(SCARA_PositionTypeDef *pos) {
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b082      	sub	sp, #8
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
	memcpy(pos, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 8009304:	22b8      	movs	r2, #184	; 0xb8
 8009306:	4904      	ldr	r1, [pc, #16]	; (8009318 <scaraGetPosition+0x1c>)
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f00c fc09 	bl	8015b20 <memcpy>
}
 800930e:	bf00      	nop
 8009310:	3708      	adds	r7, #8
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}
 8009316:	bf00      	nop
 8009318:	20005e90 	.word	0x20005e90

0800931c <scaraGetMode>:


SCARA_ModeTypeDef	scaraGetMode(void) {
 800931c:	b480      	push	{r7}
 800931e:	af00      	add	r7, sp, #0
	return mySCARA.mode;
 8009320:	4b03      	ldr	r3, [pc, #12]	; (8009330 <scaraGetMode+0x14>)
 8009322:	785b      	ldrb	r3, [r3, #1]
}
 8009324:	4618      	mov	r0, r3
 8009326:	46bd      	mov	sp, r7
 8009328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932c:	4770      	bx	lr
 800932e:	bf00      	nop
 8009330:	20000ca0 	.word	0x20000ca0

08009334 <scaraGetMethod>:

SCARA_MethodTypeDef	scaraGetMethod(void) {
 8009334:	b480      	push	{r7}
 8009336:	af00      	add	r7, sp, #0
	return mySCARA.method;
 8009338:	4b03      	ldr	r3, [pc, #12]	; (8009348 <scaraGetMethod+0x14>)
 800933a:	781b      	ldrb	r3, [r3, #0]
}
 800933c:	4618      	mov	r0, r3
 800933e:	46bd      	mov	sp, r7
 8009340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009344:	4770      	bx	lr
 8009346:	bf00      	nop
 8009348:	20000ca0 	.word	0x20000ca0

0800934c <scaraGetDutyState>:

SCARA_DutyStateTypeDef	scaraGetDutyState(void) {
 800934c:	b480      	push	{r7}
 800934e:	af00      	add	r7, sp, #0
	return mySCARA.duty_State;
 8009350:	4b03      	ldr	r3, [pc, #12]	; (8009360 <scaraGetDutyState+0x14>)
 8009352:	789b      	ldrb	r3, [r3, #2]
}
 8009354:	4618      	mov	r0, r3
 8009356:	46bd      	mov	sp, r7
 8009358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935c:	4770      	bx	lr
 800935e:	bf00      	nop
 8009360:	20000ca0 	.word	0x20000ca0

08009364 <scaraIsScanLimit>:

uint8_t					scaraIsScanLimit(void) {
 8009364:	b480      	push	{r7}
 8009366:	af00      	add	r7, sp, #0
	return mySCARA.isScanLitmit;
 8009368:	4b03      	ldr	r3, [pc, #12]	; (8009378 <scaraIsScanLimit+0x14>)
 800936a:	78db      	ldrb	r3, [r3, #3]
}
 800936c:	4618      	mov	r0, r3
 800936e:	46bd      	mov	sp, r7
 8009370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009374:	4770      	bx	lr
 8009376:	bf00      	nop
 8009378:	20000ca0 	.word	0x20000ca0
 800937c:	00000000 	.word	0x00000000

08009380 <scaraIsFinish>:

uint8_t					scaraIsFinish		(double run_time) {
 8009380:	b590      	push	{r4, r7, lr}
 8009382:	b083      	sub	sp, #12
 8009384:	af00      	add	r7, sp, #0
 8009386:	ed87 0b00 	vstr	d0, [r7]
	if(myDUTY.time_total + 0.03 < run_time) {
 800938a:	4b11      	ldr	r3, [pc, #68]	; (80093d0 <scaraIsFinish+0x50>)
 800938c:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8009390:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009394:	a30c      	add	r3, pc, #48	; (adr r3, 80093c8 <scaraIsFinish+0x48>)
 8009396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800939a:	f7f6 ff87 	bl	80002ac <__adddf3>
 800939e:	4603      	mov	r3, r0
 80093a0:	460c      	mov	r4, r1
 80093a2:	461a      	mov	r2, r3
 80093a4:	4623      	mov	r3, r4
 80093a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80093aa:	f7f7 fbc5 	bl	8000b38 <__aeabi_dcmpgt>
 80093ae:	4603      	mov	r3, r0
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d001      	beq.n	80093b8 <scaraIsFinish+0x38>
		return TRUE;
 80093b4:	2301      	movs	r3, #1
 80093b6:	e000      	b.n	80093ba <scaraIsFinish+0x3a>
	} else {
		return FALSE;
 80093b8:	2300      	movs	r3, #0
	}
}
 80093ba:	4618      	mov	r0, r3
 80093bc:	370c      	adds	r7, #12
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd90      	pop	{r4, r7, pc}
 80093c2:	bf00      	nop
 80093c4:	f3af 8000 	nop.w
 80093c8:	eb851eb8 	.word	0xeb851eb8
 80093cc:	3f9eb851 	.word	0x3f9eb851
 80093d0:	200053d0 	.word	0x200053d0
 80093d4:	00000000 	.word	0x00000000

080093d8 <scaraPosition2String>:

/* Convert position to string*/
int32_t					scaraPosition2String(char *result, SCARA_PositionTypeDef position) {
 80093d8:	b082      	sub	sp, #8
 80093da:	b590      	push	{r4, r7, lr}
 80093dc:	b0af      	sub	sp, #188	; 0xbc
 80093de:	af0a      	add	r7, sp, #40	; 0x28
 80093e0:	6078      	str	r0, [r7, #4]
 80093e2:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80093e6:	e881 000c 	stmia.w	r1, {r2, r3}
	uint8_t time[12];
	uint8_t total_time[12];

	int32_t lenght_buff;

	double2string(theta1, position.Theta1*180/PI, 6);
 80093ea:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 80093ee:	f04f 0200 	mov.w	r2, #0
 80093f2:	4b7f      	ldr	r3, [pc, #508]	; (80095f0 <scaraPosition2String+0x218>)
 80093f4:	f7f7 f910 	bl	8000618 <__aeabi_dmul>
 80093f8:	4603      	mov	r3, r0
 80093fa:	460c      	mov	r4, r1
 80093fc:	4618      	mov	r0, r3
 80093fe:	4621      	mov	r1, r4
 8009400:	a379      	add	r3, pc, #484	; (adr r3, 80095e8 <scaraPosition2String+0x210>)
 8009402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009406:	f7f7 fa31 	bl	800086c <__aeabi_ddiv>
 800940a:	4603      	mov	r3, r0
 800940c:	460c      	mov	r4, r1
 800940e:	ec44 3b17 	vmov	d7, r3, r4
 8009412:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009416:	2106      	movs	r1, #6
 8009418:	eeb0 0a47 	vmov.f32	s0, s14
 800941c:	eef0 0a67 	vmov.f32	s1, s15
 8009420:	4618      	mov	r0, r3
 8009422:	f7f8 fb99 	bl	8001b58 <double2string>
	double2string(theta2, position.Theta2*180/PI, 6);
 8009426:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 800942a:	f04f 0200 	mov.w	r2, #0
 800942e:	4b70      	ldr	r3, [pc, #448]	; (80095f0 <scaraPosition2String+0x218>)
 8009430:	f7f7 f8f2 	bl	8000618 <__aeabi_dmul>
 8009434:	4603      	mov	r3, r0
 8009436:	460c      	mov	r4, r1
 8009438:	4618      	mov	r0, r3
 800943a:	4621      	mov	r1, r4
 800943c:	a36a      	add	r3, pc, #424	; (adr r3, 80095e8 <scaraPosition2String+0x210>)
 800943e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009442:	f7f7 fa13 	bl	800086c <__aeabi_ddiv>
 8009446:	4603      	mov	r3, r0
 8009448:	460c      	mov	r4, r1
 800944a:	ec44 3b17 	vmov	d7, r3, r4
 800944e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8009452:	2106      	movs	r1, #6
 8009454:	eeb0 0a47 	vmov.f32	s0, s14
 8009458:	eef0 0a67 	vmov.f32	s1, s15
 800945c:	4618      	mov	r0, r3
 800945e:	f7f8 fb7b 	bl	8001b58 <double2string>
	double2string(d3, position.D3, 6);
 8009462:	ed97 7b46 	vldr	d7, [r7, #280]	; 0x118
 8009466:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800946a:	2106      	movs	r1, #6
 800946c:	eeb0 0a47 	vmov.f32	s0, s14
 8009470:	eef0 0a67 	vmov.f32	s1, s15
 8009474:	4618      	mov	r0, r3
 8009476:	f7f8 fb6f 	bl	8001b58 <double2string>
	double2string(theta4, position.Theta4*180/PI, 6);
 800947a:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800947e:	f04f 0200 	mov.w	r2, #0
 8009482:	4b5b      	ldr	r3, [pc, #364]	; (80095f0 <scaraPosition2String+0x218>)
 8009484:	f7f7 f8c8 	bl	8000618 <__aeabi_dmul>
 8009488:	4603      	mov	r3, r0
 800948a:	460c      	mov	r4, r1
 800948c:	4618      	mov	r0, r3
 800948e:	4621      	mov	r1, r4
 8009490:	a355      	add	r3, pc, #340	; (adr r3, 80095e8 <scaraPosition2String+0x210>)
 8009492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009496:	f7f7 f9e9 	bl	800086c <__aeabi_ddiv>
 800949a:	4603      	mov	r3, r0
 800949c:	460c      	mov	r4, r1
 800949e:	ec44 3b17 	vmov	d7, r3, r4
 80094a2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80094a6:	2106      	movs	r1, #6
 80094a8:	eeb0 0a47 	vmov.f32	s0, s14
 80094ac:	eef0 0a67 	vmov.f32	s1, s15
 80094b0:	4618      	mov	r0, r3
 80094b2:	f7f8 fb51 	bl	8001b58 <double2string>
	double2string(x, position.x, 6);
 80094b6:	ed97 7b3a 	vldr	d7, [r7, #232]	; 0xe8
 80094ba:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80094be:	2106      	movs	r1, #6
 80094c0:	eeb0 0a47 	vmov.f32	s0, s14
 80094c4:	eef0 0a67 	vmov.f32	s1, s15
 80094c8:	4618      	mov	r0, r3
 80094ca:	f7f8 fb45 	bl	8001b58 <double2string>
	double2string(y, position.y, 6);
 80094ce:	ed97 7b3c 	vldr	d7, [r7, #240]	; 0xf0
 80094d2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80094d6:	2106      	movs	r1, #6
 80094d8:	eeb0 0a47 	vmov.f32	s0, s14
 80094dc:	eef0 0a67 	vmov.f32	s1, s15
 80094e0:	4618      	mov	r0, r3
 80094e2:	f7f8 fb39 	bl	8001b58 <double2string>
	double2string(z, position.z, 6);
 80094e6:	ed97 7b3e 	vldr	d7, [r7, #248]	; 0xf8
 80094ea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80094ee:	2106      	movs	r1, #6
 80094f0:	eeb0 0a47 	vmov.f32	s0, s14
 80094f4:	eef0 0a67 	vmov.f32	s1, s15
 80094f8:	4618      	mov	r0, r3
 80094fa:	f7f8 fb2d 	bl	8001b58 <double2string>
	double2string(roll, position.roll*180/PI, 6);
 80094fe:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 8009502:	f04f 0200 	mov.w	r2, #0
 8009506:	4b3a      	ldr	r3, [pc, #232]	; (80095f0 <scaraPosition2String+0x218>)
 8009508:	f7f7 f886 	bl	8000618 <__aeabi_dmul>
 800950c:	4603      	mov	r3, r0
 800950e:	460c      	mov	r4, r1
 8009510:	4618      	mov	r0, r3
 8009512:	4621      	mov	r1, r4
 8009514:	a334      	add	r3, pc, #208	; (adr r3, 80095e8 <scaraPosition2String+0x210>)
 8009516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800951a:	f7f7 f9a7 	bl	800086c <__aeabi_ddiv>
 800951e:	4603      	mov	r3, r0
 8009520:	460c      	mov	r4, r1
 8009522:	ec44 3b17 	vmov	d7, r3, r4
 8009526:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800952a:	2106      	movs	r1, #6
 800952c:	eeb0 0a47 	vmov.f32	s0, s14
 8009530:	eef0 0a67 	vmov.f32	s1, s15
 8009534:	4618      	mov	r0, r3
 8009536:	f7f8 fb0f 	bl	8001b58 <double2string>
	double2string(lenght, position.q, 6);
 800953a:	ed97 7b28 	vldr	d7, [r7, #160]	; 0xa0
 800953e:	f107 0320 	add.w	r3, r7, #32
 8009542:	2106      	movs	r1, #6
 8009544:	eeb0 0a47 	vmov.f32	s0, s14
 8009548:	eef0 0a67 	vmov.f32	s1, s15
 800954c:	4618      	mov	r0, r3
 800954e:	f7f8 fb03 	bl	8001b58 <double2string>
	double2string(total_time, position.total_time, 4);
 8009552:	ed97 7b38 	vldr	d7, [r7, #224]	; 0xe0
 8009556:	f107 0308 	add.w	r3, r7, #8
 800955a:	2104      	movs	r1, #4
 800955c:	eeb0 0a47 	vmov.f32	s0, s14
 8009560:	eef0 0a67 	vmov.f32	s1, s15
 8009564:	4618      	mov	r0, r3
 8009566:	f7f8 faf7 	bl	8001b58 <double2string>
	double2string(time, position.t, 4);
 800956a:	ed97 7b36 	vldr	d7, [r7, #216]	; 0xd8
 800956e:	f107 0314 	add.w	r3, r7, #20
 8009572:	2104      	movs	r1, #4
 8009574:	eeb0 0a47 	vmov.f32	s0, s14
 8009578:	eef0 0a67 	vmov.f32	s1, s15
 800957c:	4618      	mov	r0, r3
 800957e:	f7f8 faeb 	bl	8001b58 <double2string>
	lenght_buff = snprintf( (char *)result, 144,
 8009582:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8009586:	f107 0314 	add.w	r3, r7, #20
 800958a:	9309      	str	r3, [sp, #36]	; 0x24
 800958c:	f107 0308 	add.w	r3, r7, #8
 8009590:	9308      	str	r3, [sp, #32]
 8009592:	f107 0320 	add.w	r3, r7, #32
 8009596:	9307      	str	r3, [sp, #28]
 8009598:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800959c:	9306      	str	r3, [sp, #24]
 800959e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80095a2:	9305      	str	r3, [sp, #20]
 80095a4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80095a8:	9304      	str	r3, [sp, #16]
 80095aa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80095ae:	9303      	str	r3, [sp, #12]
 80095b0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80095b4:	9302      	str	r3, [sp, #8]
 80095b6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80095ba:	9301      	str	r3, [sp, #4]
 80095bc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80095c0:	9300      	str	r3, [sp, #0]
 80095c2:	4613      	mov	r3, r2
 80095c4:	4a0b      	ldr	r2, [pc, #44]	; (80095f4 <scaraPosition2String+0x21c>)
 80095c6:	2190      	movs	r1, #144	; 0x90
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	f00d f9d1 	bl	8016970 <sniprintf>
 80095ce:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
						z,
						roll,
						lenght,
						total_time,
						time);
	return lenght_buff;
 80095d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	3794      	adds	r7, #148	; 0x94
 80095da:	46bd      	mov	sp, r7
 80095dc:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80095e0:	b002      	add	sp, #8
 80095e2:	4770      	bx	lr
 80095e4:	f3af 8000 	nop.w
 80095e8:	60000000 	.word	0x60000000
 80095ec:	400921fb 	.word	0x400921fb
 80095f0:	40668000 	.word	0x40668000
 80095f4:	0801bd9c 	.word	0x0801bd9c

080095f8 <scaraKeyInit>:

/* Convert key command to duty */
SCARA_StatusTypeDef		scaraKeyInit(SCARA_KeyTypeDef key,int32_t speed, double *runtime) {
 80095f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095fa:	ed2d 8b02 	vpush	{d8}
 80095fe:	f5ad 7d6f 	sub.w	sp, sp, #956	; 0x3bc
 8009602:	af66      	add	r7, sp, #408	; 0x198
 8009604:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009608:	6019      	str	r1, [r3, #0]
 800960a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800960e:	601a      	str	r2, [r3, #0]
 8009610:	f107 0247 	add.w	r2, r7, #71	; 0x47
 8009614:	4603      	mov	r3, r0
 8009616:	7013      	strb	r3, [r2, #0]
	DUTY_Command_TypeDef cmd;
	SCARA_StatusTypeDef  status;
	double s, v, a;
	cmd.coordinate_type = DUTY_COORDINATES_REL;
 8009618:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800961c:	2301      	movs	r3, #1
 800961e:	7313      	strb	r3, [r2, #12]
	cmd.trajec_type = DUTY_TRAJECTORY_LSPB;
 8009620:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009624:	2300      	movs	r3, #0
 8009626:	7413      	strb	r3, [r2, #16]
	cmd.modeInit_type = DUTY_MODE_INIT_QVA;
 8009628:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800962c:	2300      	movs	r3, #0
 800962e:	7453      	strb	r3, [r2, #17]
	double v_current;
	Trajectory_LSPB_TypeDef *lspb;
	if (speed < SHIFT_SPEED_MIN || speed > SHIFT_SPPED_MAX) {
 8009630:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	2b00      	cmp	r3, #0
 8009638:	dd04      	ble.n	8009644 <scaraKeyInit+0x4c>
 800963a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	2b07      	cmp	r3, #7
 8009642:	dd02      	ble.n	800964a <scaraKeyInit+0x52>
		return SCARA_STATUS_ERROR_PARA;
 8009644:	2306      	movs	r3, #6
 8009646:	f001 b832 	b.w	800a6ae <scaraKeyInit+0x10b6>
	}
	switch(key) {
 800964a:	f107 0347 	add.w	r3, r7, #71	; 0x47
 800964e:	781b      	ldrb	r3, [r3, #0]
 8009650:	2b0f      	cmp	r3, #15
 8009652:	f200 87d3 	bhi.w	800a5fc <scaraKeyInit+0x1004>
 8009656:	a201      	add	r2, pc, #4	; (adr r2, 800965c <scaraKeyInit+0x64>)
 8009658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800965c:	0800969d 	.word	0x0800969d
 8009660:	08009783 	.word	0x08009783
 8009664:	08009879 	.word	0x08009879
 8009668:	0800995f 	.word	0x0800995f
 800966c:	08009a79 	.word	0x08009a79
 8009670:	08009b5f 	.word	0x08009b5f
 8009674:	08009c55 	.word	0x08009c55
 8009678:	08009d9d 	.word	0x08009d9d
 800967c:	08009eb1 	.word	0x08009eb1
 8009680:	08009f8d 	.word	0x08009f8d
 8009684:	0800a0ad 	.word	0x0800a0ad
 8009688:	0800a189 	.word	0x0800a189
 800968c:	0800a275 	.word	0x0800a275
 8009690:	0800a331 	.word	0x0800a331
 8009694:	0800a435 	.word	0x0800a435
 8009698:	0800a511 	.word	0x0800a511
	case SCARA_KEY_X_INC:
	{
		s = SHIFT_3D*speed;
 800969c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	ee07 3a90 	vmov	s15, r3
 80096a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80096aa:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80096ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80096b2:	ee17 0a90 	vmov	r0, s15
 80096b6:	f7f6 ff57 	bl	8000568 <__aeabi_f2d>
 80096ba:	4603      	mov	r3, r0
 80096bc:	460c      	mov	r4, r1
 80096be:	e9c7 3482 	strd	r3, r4, [r7, #520]	; 0x208
		v = s/(SHIFT_PERIOD - SHIFT_T_UP);
 80096c2:	a3e5      	add	r3, pc, #916	; (adr r3, 8009a58 <scaraKeyInit+0x460>)
 80096c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c8:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 80096cc:	f7f7 f8ce 	bl	800086c <__aeabi_ddiv>
 80096d0:	4603      	mov	r3, r0
 80096d2:	460c      	mov	r4, r1
 80096d4:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
		a = v/(SHIFT_T_UP);
 80096d8:	a3e1      	add	r3, pc, #900	; (adr r3, 8009a60 <scaraKeyInit+0x468>)
 80096da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096de:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 80096e2:	f7f7 f8c3 	bl	800086c <__aeabi_ddiv>
 80096e6:	4603      	mov	r3, r0
 80096e8:	460c      	mov	r4, r1
 80096ea:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
		cmd.v_factor = v/(V_DESIGN_3D);
 80096ee:	a3de      	add	r3, pc, #888	; (adr r3, 8009a68 <scaraKeyInit+0x470>)
 80096f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096f4:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 80096f8:	f7f7 f8b8 	bl	800086c <__aeabi_ddiv>
 80096fc:	4603      	mov	r3, r0
 80096fe:	460c      	mov	r4, r1
 8009700:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009704:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
		cmd.a_factor = a/(A_DESIGN_3D);
 8009708:	a3d7      	add	r3, pc, #860	; (adr r3, 8009a68 <scaraKeyInit+0x470>)
 800970a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800970e:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 8009712:	f7f7 f8ab 	bl	800086c <__aeabi_ddiv>
 8009716:	4603      	mov	r3, r0
 8009718:	460c      	mov	r4, r1
 800971a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800971e:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

		cmd.space_type = DUTY_SPACE_TASK;
 8009722:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009726:	2200      	movs	r2, #0
 8009728:	735a      	strb	r2, [r3, #13]
		cmd.path_type = DUTY_PATH_LINE;
 800972a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800972e:	2200      	movs	r2, #0
 8009730:	739a      	strb	r2, [r3, #14]
		cmd.target_point.x 		= s;
 8009732:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009736:	e9d7 3482 	ldrd	r3, r4, [r7, #520]	; 0x208
 800973a:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		cmd.target_point.y 		= 0;
 800973e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009742:	f04f 0300 	mov.w	r3, #0
 8009746:	f04f 0400 	mov.w	r4, #0
 800974a:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
		cmd.target_point.z 		= 0;
 800974e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009752:	f04f 0300 	mov.w	r3, #0
 8009756:	f04f 0400 	mov.w	r4, #0
 800975a:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
		cmd.target_point.roll 	= 0;
 800975e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009762:	f04f 0300 	mov.w	r3, #0
 8009766:	f04f 0400 	mov.w	r4, #0
 800976a:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
		v_current = positionCurrent.v_3d;
 800976e:	4bc0      	ldr	r3, [pc, #768]	; (8009a70 <scaraKeyInit+0x478>)
 8009770:	e9d3 342a 	ldrd	r3, r4, [r3, #168]	; 0xa8
 8009774:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
		lspb = &(myDUTY.task.trajectory_3d.lspb);
 8009778:	4bbe      	ldr	r3, [pc, #760]	; (8009a74 <scaraKeyInit+0x47c>)
 800977a:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	}
	break;
 800977e:	f000 bf3d 	b.w	800a5fc <scaraKeyInit+0x1004>
	case SCARA_KEY_X_DEC:
	{
		s = SHIFT_3D*speed;
 8009782:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	ee07 3a90 	vmov	s15, r3
 800978c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009790:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8009794:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009798:	ee17 0a90 	vmov	r0, s15
 800979c:	f7f6 fee4 	bl	8000568 <__aeabi_f2d>
 80097a0:	4603      	mov	r3, r0
 80097a2:	460c      	mov	r4, r1
 80097a4:	e9c7 3482 	strd	r3, r4, [r7, #520]	; 0x208
		v = s/(SHIFT_PERIOD - SHIFT_T_UP);
 80097a8:	a3ab      	add	r3, pc, #684	; (adr r3, 8009a58 <scaraKeyInit+0x460>)
 80097aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ae:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 80097b2:	f7f7 f85b 	bl	800086c <__aeabi_ddiv>
 80097b6:	4603      	mov	r3, r0
 80097b8:	460c      	mov	r4, r1
 80097ba:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
		a = v/(SHIFT_T_UP);
 80097be:	a3a8      	add	r3, pc, #672	; (adr r3, 8009a60 <scaraKeyInit+0x468>)
 80097c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097c4:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 80097c8:	f7f7 f850 	bl	800086c <__aeabi_ddiv>
 80097cc:	4603      	mov	r3, r0
 80097ce:	460c      	mov	r4, r1
 80097d0:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
		cmd.v_factor = v/(V_DESIGN_3D);
 80097d4:	a3a4      	add	r3, pc, #656	; (adr r3, 8009a68 <scaraKeyInit+0x470>)
 80097d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097da:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 80097de:	f7f7 f845 	bl	800086c <__aeabi_ddiv>
 80097e2:	4603      	mov	r3, r0
 80097e4:	460c      	mov	r4, r1
 80097e6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80097ea:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
		cmd.a_factor = a/(A_DESIGN_3D);
 80097ee:	a39e      	add	r3, pc, #632	; (adr r3, 8009a68 <scaraKeyInit+0x470>)
 80097f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f4:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 80097f8:	f7f7 f838 	bl	800086c <__aeabi_ddiv>
 80097fc:	4603      	mov	r3, r0
 80097fe:	460c      	mov	r4, r1
 8009800:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009804:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

		cmd.space_type = DUTY_SPACE_TASK;
 8009808:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800980c:	2200      	movs	r2, #0
 800980e:	735a      	strb	r2, [r3, #13]
		cmd.path_type = DUTY_PATH_LINE;
 8009810:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009814:	2200      	movs	r2, #0
 8009816:	739a      	strb	r2, [r3, #14]
		cmd.target_point.x 		= -s;
 8009818:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800981c:	633b      	str	r3, [r7, #48]	; 0x30
 800981e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8009822:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8009826:	637b      	str	r3, [r7, #52]	; 0x34
 8009828:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800982c:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8009830:	ed83 7b1c 	vstr	d7, [r3, #112]	; 0x70
		cmd.target_point.y 		= 0;
 8009834:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009838:	f04f 0300 	mov.w	r3, #0
 800983c:	f04f 0400 	mov.w	r4, #0
 8009840:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
		cmd.target_point.z 		= 0;
 8009844:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009848:	f04f 0300 	mov.w	r3, #0
 800984c:	f04f 0400 	mov.w	r4, #0
 8009850:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
		cmd.target_point.roll 	= 0;
 8009854:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009858:	f04f 0300 	mov.w	r3, #0
 800985c:	f04f 0400 	mov.w	r4, #0
 8009860:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
		v_current = positionCurrent.v_3d;
 8009864:	4b82      	ldr	r3, [pc, #520]	; (8009a70 <scaraKeyInit+0x478>)
 8009866:	e9d3 342a 	ldrd	r3, r4, [r3, #168]	; 0xa8
 800986a:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
		lspb = &(myDUTY.task.trajectory_3d.lspb);
 800986e:	4b81      	ldr	r3, [pc, #516]	; (8009a74 <scaraKeyInit+0x47c>)
 8009870:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	}
	break;
 8009874:	f000 bec2 	b.w	800a5fc <scaraKeyInit+0x1004>
	case SCARA_KEY_Y_INC:
	{
		s = SHIFT_3D*speed;
 8009878:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	ee07 3a90 	vmov	s15, r3
 8009882:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009886:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800988a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800988e:	ee17 0a90 	vmov	r0, s15
 8009892:	f7f6 fe69 	bl	8000568 <__aeabi_f2d>
 8009896:	4603      	mov	r3, r0
 8009898:	460c      	mov	r4, r1
 800989a:	e9c7 3482 	strd	r3, r4, [r7, #520]	; 0x208
		v = s/(SHIFT_PERIOD - SHIFT_T_UP);
 800989e:	a36e      	add	r3, pc, #440	; (adr r3, 8009a58 <scaraKeyInit+0x460>)
 80098a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098a4:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 80098a8:	f7f6 ffe0 	bl	800086c <__aeabi_ddiv>
 80098ac:	4603      	mov	r3, r0
 80098ae:	460c      	mov	r4, r1
 80098b0:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
		a = v/(SHIFT_T_UP);
 80098b4:	a36a      	add	r3, pc, #424	; (adr r3, 8009a60 <scaraKeyInit+0x468>)
 80098b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ba:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 80098be:	f7f6 ffd5 	bl	800086c <__aeabi_ddiv>
 80098c2:	4603      	mov	r3, r0
 80098c4:	460c      	mov	r4, r1
 80098c6:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
		cmd.v_factor = v/(V_DESIGN_3D);
 80098ca:	a367      	add	r3, pc, #412	; (adr r3, 8009a68 <scaraKeyInit+0x470>)
 80098cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d0:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 80098d4:	f7f6 ffca 	bl	800086c <__aeabi_ddiv>
 80098d8:	4603      	mov	r3, r0
 80098da:	460c      	mov	r4, r1
 80098dc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80098e0:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
		cmd.a_factor = a/(A_DESIGN_3D);
 80098e4:	a360      	add	r3, pc, #384	; (adr r3, 8009a68 <scaraKeyInit+0x470>)
 80098e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ea:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 80098ee:	f7f6 ffbd 	bl	800086c <__aeabi_ddiv>
 80098f2:	4603      	mov	r3, r0
 80098f4:	460c      	mov	r4, r1
 80098f6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80098fa:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

		cmd.space_type = DUTY_SPACE_TASK;
 80098fe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009902:	2200      	movs	r2, #0
 8009904:	735a      	strb	r2, [r3, #13]
		cmd.path_type = DUTY_PATH_LINE;
 8009906:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800990a:	2200      	movs	r2, #0
 800990c:	739a      	strb	r2, [r3, #14]
		cmd.target_point.x 		= 0;
 800990e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009912:	f04f 0300 	mov.w	r3, #0
 8009916:	f04f 0400 	mov.w	r4, #0
 800991a:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		cmd.target_point.y 		= s;
 800991e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009922:	e9d7 3482 	ldrd	r3, r4, [r7, #520]	; 0x208
 8009926:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
		cmd.target_point.z 		= 0;
 800992a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800992e:	f04f 0300 	mov.w	r3, #0
 8009932:	f04f 0400 	mov.w	r4, #0
 8009936:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
		cmd.target_point.roll	= 0;
 800993a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800993e:	f04f 0300 	mov.w	r3, #0
 8009942:	f04f 0400 	mov.w	r4, #0
 8009946:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
		v_current = positionCurrent.v_3d;
 800994a:	4b49      	ldr	r3, [pc, #292]	; (8009a70 <scaraKeyInit+0x478>)
 800994c:	e9d3 342a 	ldrd	r3, r4, [r3, #168]	; 0xa8
 8009950:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
		lspb = &(myDUTY.task.trajectory_3d.lspb);
 8009954:	4b47      	ldr	r3, [pc, #284]	; (8009a74 <scaraKeyInit+0x47c>)
 8009956:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	}
			break;
 800995a:	f000 be4f 	b.w	800a5fc <scaraKeyInit+0x1004>
	case SCARA_KEY_Y_DEC:
	{
		s = SHIFT_3D*speed;
 800995e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	ee07 3a90 	vmov	s15, r3
 8009968:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800996c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8009970:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009974:	ee17 0a90 	vmov	r0, s15
 8009978:	f7f6 fdf6 	bl	8000568 <__aeabi_f2d>
 800997c:	4603      	mov	r3, r0
 800997e:	460c      	mov	r4, r1
 8009980:	e9c7 3482 	strd	r3, r4, [r7, #520]	; 0x208
		v = s/(SHIFT_PERIOD - SHIFT_T_UP);
 8009984:	a334      	add	r3, pc, #208	; (adr r3, 8009a58 <scaraKeyInit+0x460>)
 8009986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800998a:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 800998e:	f7f6 ff6d 	bl	800086c <__aeabi_ddiv>
 8009992:	4603      	mov	r3, r0
 8009994:	460c      	mov	r4, r1
 8009996:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
		a = v/(SHIFT_T_UP);
 800999a:	a331      	add	r3, pc, #196	; (adr r3, 8009a60 <scaraKeyInit+0x468>)
 800999c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099a0:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 80099a4:	f7f6 ff62 	bl	800086c <__aeabi_ddiv>
 80099a8:	4603      	mov	r3, r0
 80099aa:	460c      	mov	r4, r1
 80099ac:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
		cmd.v_factor = v/(V_DESIGN_3D);
 80099b0:	a32d      	add	r3, pc, #180	; (adr r3, 8009a68 <scaraKeyInit+0x470>)
 80099b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099b6:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 80099ba:	f7f6 ff57 	bl	800086c <__aeabi_ddiv>
 80099be:	4603      	mov	r3, r0
 80099c0:	460c      	mov	r4, r1
 80099c2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80099c6:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
		cmd.a_factor = a/(A_DESIGN_3D);
 80099ca:	a327      	add	r3, pc, #156	; (adr r3, 8009a68 <scaraKeyInit+0x470>)
 80099cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099d0:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 80099d4:	f7f6 ff4a 	bl	800086c <__aeabi_ddiv>
 80099d8:	4603      	mov	r3, r0
 80099da:	460c      	mov	r4, r1
 80099dc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80099e0:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

		cmd.space_type = DUTY_SPACE_TASK;
 80099e4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80099e8:	2200      	movs	r2, #0
 80099ea:	735a      	strb	r2, [r3, #13]
		cmd.path_type = DUTY_PATH_LINE;
 80099ec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80099f0:	2200      	movs	r2, #0
 80099f2:	739a      	strb	r2, [r3, #14]
		cmd.target_point.x 		= 0;
 80099f4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80099f8:	f04f 0300 	mov.w	r3, #0
 80099fc:	f04f 0400 	mov.w	r4, #0
 8009a00:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		cmd.target_point.y 		= -s;
 8009a04:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8009a08:	62bb      	str	r3, [r7, #40]	; 0x28
 8009a0a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8009a0e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8009a12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009a14:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009a18:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8009a1c:	ed83 7b1e 	vstr	d7, [r3, #120]	; 0x78
		cmd.target_point.z 		= 0;
 8009a20:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009a24:	f04f 0300 	mov.w	r3, #0
 8009a28:	f04f 0400 	mov.w	r4, #0
 8009a2c:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
		cmd.target_point.roll 	= 0;
 8009a30:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009a34:	f04f 0300 	mov.w	r3, #0
 8009a38:	f04f 0400 	mov.w	r4, #0
 8009a3c:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
		v_current = positionCurrent.v_3d;
 8009a40:	4b0b      	ldr	r3, [pc, #44]	; (8009a70 <scaraKeyInit+0x478>)
 8009a42:	e9d3 342a 	ldrd	r3, r4, [r3, #168]	; 0xa8
 8009a46:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
		lspb = &(myDUTY.task.trajectory_3d.lspb);
 8009a4a:	4b0a      	ldr	r3, [pc, #40]	; (8009a74 <scaraKeyInit+0x47c>)
 8009a4c:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	}
			break;
 8009a50:	f000 bdd4 	b.w	800a5fc <scaraKeyInit+0x1004>
 8009a54:	f3af 8000 	nop.w
 8009a58:	60000000 	.word	0x60000000
 8009a5c:	3fedf3b6 	.word	0x3fedf3b6
 8009a60:	40000000 	.word	0x40000000
 8009a64:	3fd0e560 	.word	0x3fd0e560
 8009a68:	00000000 	.word	0x00000000
 8009a6c:	405c2000 	.word	0x405c2000
 8009a70:	20005e90 	.word	0x20005e90
 8009a74:	200054e8 	.word	0x200054e8
	case SCARA_KEY_Z_INC:
	{
		s = SHIFT_3D*speed;
 8009a78:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	ee07 3a90 	vmov	s15, r3
 8009a82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a86:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8009a8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009a8e:	ee17 0a90 	vmov	r0, s15
 8009a92:	f7f6 fd69 	bl	8000568 <__aeabi_f2d>
 8009a96:	4603      	mov	r3, r0
 8009a98:	460c      	mov	r4, r1
 8009a9a:	e9c7 3482 	strd	r3, r4, [r7, #520]	; 0x208
		v = s/(SHIFT_PERIOD - SHIFT_T_UP);
 8009a9e:	a3b0      	add	r3, pc, #704	; (adr r3, 8009d60 <scaraKeyInit+0x768>)
 8009aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa4:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 8009aa8:	f7f6 fee0 	bl	800086c <__aeabi_ddiv>
 8009aac:	4603      	mov	r3, r0
 8009aae:	460c      	mov	r4, r1
 8009ab0:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
		a = v/(SHIFT_T_UP);
 8009ab4:	a3ac      	add	r3, pc, #688	; (adr r3, 8009d68 <scaraKeyInit+0x770>)
 8009ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aba:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009abe:	f7f6 fed5 	bl	800086c <__aeabi_ddiv>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	460c      	mov	r4, r1
 8009ac6:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
		cmd.v_factor = v/(V_DESIGN_3D);
 8009aca:	a3a9      	add	r3, pc, #676	; (adr r3, 8009d70 <scaraKeyInit+0x778>)
 8009acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad0:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009ad4:	f7f6 feca 	bl	800086c <__aeabi_ddiv>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	460c      	mov	r4, r1
 8009adc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009ae0:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
		cmd.a_factor = a/(A_DESIGN_3D);
 8009ae4:	a3a2      	add	r3, pc, #648	; (adr r3, 8009d70 <scaraKeyInit+0x778>)
 8009ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aea:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 8009aee:	f7f6 febd 	bl	800086c <__aeabi_ddiv>
 8009af2:	4603      	mov	r3, r0
 8009af4:	460c      	mov	r4, r1
 8009af6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009afa:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

		cmd.space_type = DUTY_SPACE_TASK;
 8009afe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009b02:	2200      	movs	r2, #0
 8009b04:	735a      	strb	r2, [r3, #13]
		cmd.path_type = DUTY_PATH_LINE;
 8009b06:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	739a      	strb	r2, [r3, #14]
		cmd.target_point.x 		= 0;
 8009b0e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009b12:	f04f 0300 	mov.w	r3, #0
 8009b16:	f04f 0400 	mov.w	r4, #0
 8009b1a:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		cmd.target_point.y 		= 0;
 8009b1e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009b22:	f04f 0300 	mov.w	r3, #0
 8009b26:	f04f 0400 	mov.w	r4, #0
 8009b2a:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
		cmd.target_point.z 		= s;
 8009b2e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009b32:	e9d7 3482 	ldrd	r3, r4, [r7, #520]	; 0x208
 8009b36:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
		cmd.target_point.roll 	= 0;
 8009b3a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009b3e:	f04f 0300 	mov.w	r3, #0
 8009b42:	f04f 0400 	mov.w	r4, #0
 8009b46:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
		v_current = positionCurrent.v_3d;
 8009b4a:	4b8f      	ldr	r3, [pc, #572]	; (8009d88 <scaraKeyInit+0x790>)
 8009b4c:	e9d3 342a 	ldrd	r3, r4, [r3, #168]	; 0xa8
 8009b50:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
		lspb = &(myDUTY.task.trajectory_3d.lspb);
 8009b54:	4b8d      	ldr	r3, [pc, #564]	; (8009d8c <scaraKeyInit+0x794>)
 8009b56:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	}
			break;
 8009b5a:	f000 bd4f 	b.w	800a5fc <scaraKeyInit+0x1004>
	case SCARA_KEY_Z_DEC:
	{
		s = SHIFT_3D*speed;
 8009b5e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	ee07 3a90 	vmov	s15, r3
 8009b68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009b6c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8009b70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009b74:	ee17 0a90 	vmov	r0, s15
 8009b78:	f7f6 fcf6 	bl	8000568 <__aeabi_f2d>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	460c      	mov	r4, r1
 8009b80:	e9c7 3482 	strd	r3, r4, [r7, #520]	; 0x208
		v = s/(SHIFT_PERIOD - SHIFT_T_UP);
 8009b84:	a376      	add	r3, pc, #472	; (adr r3, 8009d60 <scaraKeyInit+0x768>)
 8009b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b8a:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 8009b8e:	f7f6 fe6d 	bl	800086c <__aeabi_ddiv>
 8009b92:	4603      	mov	r3, r0
 8009b94:	460c      	mov	r4, r1
 8009b96:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
		a = v/(SHIFT_T_UP);
 8009b9a:	a373      	add	r3, pc, #460	; (adr r3, 8009d68 <scaraKeyInit+0x770>)
 8009b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba0:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009ba4:	f7f6 fe62 	bl	800086c <__aeabi_ddiv>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	460c      	mov	r4, r1
 8009bac:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
		cmd.v_factor = v/(V_DESIGN_3D);
 8009bb0:	a36f      	add	r3, pc, #444	; (adr r3, 8009d70 <scaraKeyInit+0x778>)
 8009bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bb6:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009bba:	f7f6 fe57 	bl	800086c <__aeabi_ddiv>
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	460c      	mov	r4, r1
 8009bc2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009bc6:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
		cmd.a_factor = a/(A_DESIGN_3D);
 8009bca:	a369      	add	r3, pc, #420	; (adr r3, 8009d70 <scaraKeyInit+0x778>)
 8009bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bd0:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 8009bd4:	f7f6 fe4a 	bl	800086c <__aeabi_ddiv>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	460c      	mov	r4, r1
 8009bdc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009be0:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

		cmd.space_type = DUTY_SPACE_TASK;
 8009be4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009be8:	2200      	movs	r2, #0
 8009bea:	735a      	strb	r2, [r3, #13]
		cmd.path_type = DUTY_PATH_LINE;
 8009bec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	739a      	strb	r2, [r3, #14]
		cmd.target_point.x 		= 0;
 8009bf4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009bf8:	f04f 0300 	mov.w	r3, #0
 8009bfc:	f04f 0400 	mov.w	r4, #0
 8009c00:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		cmd.target_point.y 		= 0;
 8009c04:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009c08:	f04f 0300 	mov.w	r3, #0
 8009c0c:	f04f 0400 	mov.w	r4, #0
 8009c10:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
		cmd.target_point.z 		= -s;
 8009c14:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8009c18:	623b      	str	r3, [r7, #32]
 8009c1a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8009c1e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8009c22:	627b      	str	r3, [r7, #36]	; 0x24
 8009c24:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009c28:	ed97 7b08 	vldr	d7, [r7, #32]
 8009c2c:	ed83 7b20 	vstr	d7, [r3, #128]	; 0x80
		cmd.target_point.roll 	= 0;
 8009c30:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009c34:	f04f 0300 	mov.w	r3, #0
 8009c38:	f04f 0400 	mov.w	r4, #0
 8009c3c:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
		v_current = positionCurrent.v_3d;
 8009c40:	4b51      	ldr	r3, [pc, #324]	; (8009d88 <scaraKeyInit+0x790>)
 8009c42:	e9d3 342a 	ldrd	r3, r4, [r3, #168]	; 0xa8
 8009c46:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
		lspb = &(myDUTY.task.trajectory_3d.lspb);
 8009c4a:	4b50      	ldr	r3, [pc, #320]	; (8009d8c <scaraKeyInit+0x794>)
 8009c4c:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	}
			break;
 8009c50:	f000 bcd4 	b.w	800a5fc <scaraKeyInit+0x1004>
	case SCARA_KEY_ROLL_INC:
	{
		s = SHIFT_ROLL*speed;
 8009c54:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	ee07 3a90 	vmov	s15, r3
 8009c5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009c62:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8009d98 <scaraKeyInit+0x7a0>
 8009c66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009c6a:	ee17 0a90 	vmov	r0, s15
 8009c6e:	f7f6 fc7b 	bl	8000568 <__aeabi_f2d>
 8009c72:	4603      	mov	r3, r0
 8009c74:	460c      	mov	r4, r1
 8009c76:	e9c7 3482 	strd	r3, r4, [r7, #520]	; 0x208
		v = s/(SHIFT_PERIOD - SHIFT_T_UP);
 8009c7a:	a339      	add	r3, pc, #228	; (adr r3, 8009d60 <scaraKeyInit+0x768>)
 8009c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c80:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 8009c84:	f7f6 fdf2 	bl	800086c <__aeabi_ddiv>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	460c      	mov	r4, r1
 8009c8c:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
		a = v/(SHIFT_T_UP);
 8009c90:	a335      	add	r3, pc, #212	; (adr r3, 8009d68 <scaraKeyInit+0x770>)
 8009c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c96:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009c9a:	f7f6 fde7 	bl	800086c <__aeabi_ddiv>
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	460c      	mov	r4, r1
 8009ca2:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
		cmd.v_factor = v/(V_DESIGN_ROLL);
 8009ca6:	a334      	add	r3, pc, #208	; (adr r3, 8009d78 <scaraKeyInit+0x780>)
 8009ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cac:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009cb0:	f7f6 fddc 	bl	800086c <__aeabi_ddiv>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	460c      	mov	r4, r1
 8009cb8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009cbc:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
		cmd.a_factor = a/(A_DESIGN_ROLL);
 8009cc0:	a32d      	add	r3, pc, #180	; (adr r3, 8009d78 <scaraKeyInit+0x780>)
 8009cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cc6:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 8009cca:	f7f6 fdcf 	bl	800086c <__aeabi_ddiv>
 8009cce:	4603      	mov	r3, r0
 8009cd0:	460c      	mov	r4, r1
 8009cd2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009cd6:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

		cmd.space_type = DUTY_SPACE_TASK;
 8009cda:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009cde:	2200      	movs	r2, #0
 8009ce0:	735a      	strb	r2, [r3, #13]
		cmd.path_type = DUTY_PATH_LINE;
 8009ce2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	739a      	strb	r2, [r3, #14]
		cmd.target_point.x 		= 0;
 8009cea:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009cee:	f04f 0300 	mov.w	r3, #0
 8009cf2:	f04f 0400 	mov.w	r4, #0
 8009cf6:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		cmd.target_point.y 		= 0;
 8009cfa:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009cfe:	f04f 0300 	mov.w	r3, #0
 8009d02:	f04f 0400 	mov.w	r4, #0
 8009d06:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
		cmd.target_point.z 		= 0;
 8009d0a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009d0e:	f04f 0300 	mov.w	r3, #0
 8009d12:	f04f 0400 	mov.w	r4, #0
 8009d16:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
		cmd.target_point.roll 	= s*180/PI;
 8009d1a:	f04f 0200 	mov.w	r2, #0
 8009d1e:	4b1c      	ldr	r3, [pc, #112]	; (8009d90 <scaraKeyInit+0x798>)
 8009d20:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 8009d24:	f7f6 fc78 	bl	8000618 <__aeabi_dmul>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	460c      	mov	r4, r1
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	4621      	mov	r1, r4
 8009d30:	a313      	add	r3, pc, #76	; (adr r3, 8009d80 <scaraKeyInit+0x788>)
 8009d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d36:	f7f6 fd99 	bl	800086c <__aeabi_ddiv>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	460c      	mov	r4, r1
 8009d3e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009d42:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
		v_current = positionCurrent.v_roll;
 8009d46:	4b10      	ldr	r3, [pc, #64]	; (8009d88 <scaraKeyInit+0x790>)
 8009d48:	e9d3 342c 	ldrd	r3, r4, [r3, #176]	; 0xb0
 8009d4c:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
		lspb = &(myDUTY.task.trajectory_roll.lspb);
 8009d50:	4b10      	ldr	r3, [pc, #64]	; (8009d94 <scaraKeyInit+0x79c>)
 8009d52:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	}
			break;
 8009d56:	f000 bc51 	b.w	800a5fc <scaraKeyInit+0x1004>
 8009d5a:	bf00      	nop
 8009d5c:	f3af 8000 	nop.w
 8009d60:	60000000 	.word	0x60000000
 8009d64:	3fedf3b6 	.word	0x3fedf3b6
 8009d68:	40000000 	.word	0x40000000
 8009d6c:	3fd0e560 	.word	0x3fd0e560
 8009d70:	00000000 	.word	0x00000000
 8009d74:	405c2000 	.word	0x405c2000
 8009d78:	14000000 	.word	0x14000000
 8009d7c:	4000f6f0 	.word	0x4000f6f0
 8009d80:	60000000 	.word	0x60000000
 8009d84:	400921fb 	.word	0x400921fb
 8009d88:	20005e90 	.word	0x20005e90
 8009d8c:	200054e8 	.word	0x200054e8
 8009d90:	40668000 	.word	0x40668000
 8009d94:	20005640 	.word	0x20005640
 8009d98:	3d567750 	.word	0x3d567750
	case SCARA_KEY_ROLL_DEC:
	{
		s = SHIFT_ROLL*speed;
 8009d9c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	ee07 3a90 	vmov	s15, r3
 8009da6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009daa:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 8009d98 <scaraKeyInit+0x7a0>
 8009dae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009db2:	ee17 0a90 	vmov	r0, s15
 8009db6:	f7f6 fbd7 	bl	8000568 <__aeabi_f2d>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	460c      	mov	r4, r1
 8009dbe:	e9c7 3482 	strd	r3, r4, [r7, #520]	; 0x208
		v = s/(SHIFT_PERIOD - SHIFT_T_UP);
 8009dc2:	a3af      	add	r3, pc, #700	; (adr r3, 800a080 <scaraKeyInit+0xa88>)
 8009dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dc8:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 8009dcc:	f7f6 fd4e 	bl	800086c <__aeabi_ddiv>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	460c      	mov	r4, r1
 8009dd4:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
		a = v/(SHIFT_T_UP);
 8009dd8:	a3ab      	add	r3, pc, #684	; (adr r3, 800a088 <scaraKeyInit+0xa90>)
 8009dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dde:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009de2:	f7f6 fd43 	bl	800086c <__aeabi_ddiv>
 8009de6:	4603      	mov	r3, r0
 8009de8:	460c      	mov	r4, r1
 8009dea:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
		cmd.v_factor = v/(V_DESIGN_ROLL);
 8009dee:	a3a8      	add	r3, pc, #672	; (adr r3, 800a090 <scaraKeyInit+0xa98>)
 8009df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009df4:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009df8:	f7f6 fd38 	bl	800086c <__aeabi_ddiv>
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	460c      	mov	r4, r1
 8009e00:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009e04:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
		cmd.a_factor = a/(A_DESIGN_ROLL);
 8009e08:	a3a1      	add	r3, pc, #644	; (adr r3, 800a090 <scaraKeyInit+0xa98>)
 8009e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e0e:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 8009e12:	f7f6 fd2b 	bl	800086c <__aeabi_ddiv>
 8009e16:	4603      	mov	r3, r0
 8009e18:	460c      	mov	r4, r1
 8009e1a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009e1e:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

		cmd.space_type = DUTY_SPACE_TASK;
 8009e22:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009e26:	2200      	movs	r2, #0
 8009e28:	735a      	strb	r2, [r3, #13]
		cmd.path_type = DUTY_PATH_LINE;
 8009e2a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009e2e:	2200      	movs	r2, #0
 8009e30:	739a      	strb	r2, [r3, #14]
		cmd.target_point.x 		= 0;
 8009e32:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009e36:	f04f 0300 	mov.w	r3, #0
 8009e3a:	f04f 0400 	mov.w	r4, #0
 8009e3e:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		cmd.target_point.y 		= 0;
 8009e42:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009e46:	f04f 0300 	mov.w	r3, #0
 8009e4a:	f04f 0400 	mov.w	r4, #0
 8009e4e:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
		cmd.target_point.z 		= 0;
 8009e52:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009e56:	f04f 0300 	mov.w	r3, #0
 8009e5a:	f04f 0400 	mov.w	r4, #0
 8009e5e:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
		cmd.target_point.roll 	= -s*180/PI;
 8009e62:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8009e66:	61bb      	str	r3, [r7, #24]
 8009e68:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8009e6c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8009e70:	61fb      	str	r3, [r7, #28]
 8009e72:	f04f 0200 	mov.w	r2, #0
 8009e76:	4b88      	ldr	r3, [pc, #544]	; (800a098 <scaraKeyInit+0xaa0>)
 8009e78:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009e7c:	f7f6 fbcc 	bl	8000618 <__aeabi_dmul>
 8009e80:	4603      	mov	r3, r0
 8009e82:	460c      	mov	r4, r1
 8009e84:	4618      	mov	r0, r3
 8009e86:	4621      	mov	r1, r4
 8009e88:	a37b      	add	r3, pc, #492	; (adr r3, 800a078 <scaraKeyInit+0xa80>)
 8009e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e8e:	f7f6 fced 	bl	800086c <__aeabi_ddiv>
 8009e92:	4603      	mov	r3, r0
 8009e94:	460c      	mov	r4, r1
 8009e96:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009e9a:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
		v_current = positionCurrent.v_roll;
 8009e9e:	4b7f      	ldr	r3, [pc, #508]	; (800a09c <scaraKeyInit+0xaa4>)
 8009ea0:	e9d3 342c 	ldrd	r3, r4, [r3, #176]	; 0xb0
 8009ea4:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
		lspb = &(myDUTY.task.trajectory_roll.lspb);
 8009ea8:	4b7d      	ldr	r3, [pc, #500]	; (800a0a0 <scaraKeyInit+0xaa8>)
 8009eaa:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	}
			break;
 8009eae:	e3a5      	b.n	800a5fc <scaraKeyInit+0x1004>
	case SCARA_KEY_VAR0_INC:
	{
		s = SHIFT_VAR0*speed;
 8009eb0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	ee07 3a90 	vmov	s15, r3
 8009eba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009ebe:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 800a0a8 <scaraKeyInit+0xab0>
 8009ec2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009ec6:	ee17 0a90 	vmov	r0, s15
 8009eca:	f7f6 fb4d 	bl	8000568 <__aeabi_f2d>
 8009ece:	4603      	mov	r3, r0
 8009ed0:	460c      	mov	r4, r1
 8009ed2:	e9c7 3482 	strd	r3, r4, [r7, #520]	; 0x208
		v = s/(SHIFT_PERIOD - SHIFT_T_UP);
 8009ed6:	a36a      	add	r3, pc, #424	; (adr r3, 800a080 <scaraKeyInit+0xa88>)
 8009ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009edc:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 8009ee0:	f7f6 fcc4 	bl	800086c <__aeabi_ddiv>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	460c      	mov	r4, r1
 8009ee8:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
		a = v/(SHIFT_T_UP);
 8009eec:	a366      	add	r3, pc, #408	; (adr r3, 800a088 <scaraKeyInit+0xa90>)
 8009eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ef2:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009ef6:	f7f6 fcb9 	bl	800086c <__aeabi_ddiv>
 8009efa:	4603      	mov	r3, r0
 8009efc:	460c      	mov	r4, r1
 8009efe:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
		cmd.v_factor = v/(V_DESIGN_J0);
 8009f02:	a363      	add	r3, pc, #396	; (adr r3, 800a090 <scaraKeyInit+0xa98>)
 8009f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f08:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009f0c:	f7f6 fcae 	bl	800086c <__aeabi_ddiv>
 8009f10:	4603      	mov	r3, r0
 8009f12:	460c      	mov	r4, r1
 8009f14:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009f18:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
		cmd.a_factor = a/(A_DESIGN_J0);
 8009f1c:	a35c      	add	r3, pc, #368	; (adr r3, 800a090 <scaraKeyInit+0xa98>)
 8009f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f22:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 8009f26:	f7f6 fca1 	bl	800086c <__aeabi_ddiv>
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	460c      	mov	r4, r1
 8009f2e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009f32:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

		cmd.space_type = DUTY_SPACE_JOINT;
 8009f36:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009f3a:	2201      	movs	r2, #1
 8009f3c:	735a      	strb	r2, [r3, #13]
		cmd.joint_type = DUTY_JOINT_SINGLE;
 8009f3e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009f42:	2200      	movs	r2, #0
 8009f44:	73da      	strb	r2, [r3, #15]
		cmd.sub_para_int 	= 0;
 8009f46:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	615a      	str	r2, [r3, #20]
		cmd.sub_para_double = s*180/PI;
 8009f4e:	f04f 0200 	mov.w	r2, #0
 8009f52:	4b51      	ldr	r3, [pc, #324]	; (800a098 <scaraKeyInit+0xaa0>)
 8009f54:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 8009f58:	f7f6 fb5e 	bl	8000618 <__aeabi_dmul>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	460c      	mov	r4, r1
 8009f60:	4618      	mov	r0, r3
 8009f62:	4621      	mov	r1, r4
 8009f64:	a344      	add	r3, pc, #272	; (adr r3, 800a078 <scaraKeyInit+0xa80>)
 8009f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f6a:	f7f6 fc7f 	bl	800086c <__aeabi_ddiv>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	460c      	mov	r4, r1
 8009f72:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009f76:	e9c2 3406 	strd	r3, r4, [r2, #24]
		v_current = positionCurrent.v_theta1;
 8009f7a:	4b48      	ldr	r3, [pc, #288]	; (800a09c <scaraKeyInit+0xaa4>)
 8009f7c:	e9d3 3422 	ldrd	r3, r4, [r3, #136]	; 0x88
 8009f80:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
		lspb = &(myDUTY.joint.trajectory[0].lspb);
 8009f84:	4b47      	ldr	r3, [pc, #284]	; (800a0a4 <scaraKeyInit+0xaac>)
 8009f86:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	}
			break;
 8009f8a:	e337      	b.n	800a5fc <scaraKeyInit+0x1004>
	case SCARA_KEY_VAR0_DEC:
	{
		s = SHIFT_VAR0*speed;
 8009f8c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	ee07 3a90 	vmov	s15, r3
 8009f96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009f9a:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800a0a8 <scaraKeyInit+0xab0>
 8009f9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009fa2:	ee17 0a90 	vmov	r0, s15
 8009fa6:	f7f6 fadf 	bl	8000568 <__aeabi_f2d>
 8009faa:	4603      	mov	r3, r0
 8009fac:	460c      	mov	r4, r1
 8009fae:	e9c7 3482 	strd	r3, r4, [r7, #520]	; 0x208
		v = s/(SHIFT_PERIOD - SHIFT_T_UP);
 8009fb2:	a333      	add	r3, pc, #204	; (adr r3, 800a080 <scaraKeyInit+0xa88>)
 8009fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb8:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 8009fbc:	f7f6 fc56 	bl	800086c <__aeabi_ddiv>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	460c      	mov	r4, r1
 8009fc4:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
		a = v/(SHIFT_T_UP);
 8009fc8:	a32f      	add	r3, pc, #188	; (adr r3, 800a088 <scaraKeyInit+0xa90>)
 8009fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fce:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009fd2:	f7f6 fc4b 	bl	800086c <__aeabi_ddiv>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	460c      	mov	r4, r1
 8009fda:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
		cmd.v_factor = v/(V_DESIGN_J0);
 8009fde:	a32c      	add	r3, pc, #176	; (adr r3, 800a090 <scaraKeyInit+0xa98>)
 8009fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fe4:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009fe8:	f7f6 fc40 	bl	800086c <__aeabi_ddiv>
 8009fec:	4603      	mov	r3, r0
 8009fee:	460c      	mov	r4, r1
 8009ff0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009ff4:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
		cmd.a_factor = a/(A_DESIGN_J0);
 8009ff8:	a325      	add	r3, pc, #148	; (adr r3, 800a090 <scaraKeyInit+0xa98>)
 8009ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ffe:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 800a002:	f7f6 fc33 	bl	800086c <__aeabi_ddiv>
 800a006:	4603      	mov	r3, r0
 800a008:	460c      	mov	r4, r1
 800a00a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a00e:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

		cmd.space_type = DUTY_SPACE_JOINT;
 800a012:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a016:	2201      	movs	r2, #1
 800a018:	735a      	strb	r2, [r3, #13]
		cmd.joint_type = DUTY_JOINT_SINGLE;
 800a01a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a01e:	2200      	movs	r2, #0
 800a020:	73da      	strb	r2, [r3, #15]
		cmd.sub_para_int 	= 0;
 800a022:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a026:	2200      	movs	r2, #0
 800a028:	615a      	str	r2, [r3, #20]
		cmd.sub_para_double = -s*180/PI;
 800a02a:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800a02e:	613b      	str	r3, [r7, #16]
 800a030:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800a034:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800a038:	617b      	str	r3, [r7, #20]
 800a03a:	f04f 0200 	mov.w	r2, #0
 800a03e:	4b16      	ldr	r3, [pc, #88]	; (800a098 <scaraKeyInit+0xaa0>)
 800a040:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a044:	f7f6 fae8 	bl	8000618 <__aeabi_dmul>
 800a048:	4603      	mov	r3, r0
 800a04a:	460c      	mov	r4, r1
 800a04c:	4618      	mov	r0, r3
 800a04e:	4621      	mov	r1, r4
 800a050:	a309      	add	r3, pc, #36	; (adr r3, 800a078 <scaraKeyInit+0xa80>)
 800a052:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a056:	f7f6 fc09 	bl	800086c <__aeabi_ddiv>
 800a05a:	4603      	mov	r3, r0
 800a05c:	460c      	mov	r4, r1
 800a05e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a062:	e9c2 3406 	strd	r3, r4, [r2, #24]
		v_current = positionCurrent.v_theta1;
 800a066:	4b0d      	ldr	r3, [pc, #52]	; (800a09c <scaraKeyInit+0xaa4>)
 800a068:	e9d3 3422 	ldrd	r3, r4, [r3, #136]	; 0x88
 800a06c:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
		lspb = &(myDUTY.joint.trajectory[0].lspb);
 800a070:	4b0c      	ldr	r3, [pc, #48]	; (800a0a4 <scaraKeyInit+0xaac>)
 800a072:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	}
			break;
 800a076:	e2c1      	b.n	800a5fc <scaraKeyInit+0x1004>
 800a078:	60000000 	.word	0x60000000
 800a07c:	400921fb 	.word	0x400921fb
 800a080:	60000000 	.word	0x60000000
 800a084:	3fedf3b6 	.word	0x3fedf3b6
 800a088:	40000000 	.word	0x40000000
 800a08c:	3fd0e560 	.word	0x3fd0e560
 800a090:	14000000 	.word	0x14000000
 800a094:	4000f6f0 	.word	0x4000f6f0
 800a098:	40668000 	.word	0x40668000
 800a09c:	20005e90 	.word	0x20005e90
 800a0a0:	20005640 	.word	0x20005640
 800a0a4:	200057a0 	.word	0x200057a0
 800a0a8:	3d567750 	.word	0x3d567750
	case SCARA_KEY_VAR1_INC:
	{
		s = SHIFT_VAR1*speed;
 800a0ac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	ee07 3a90 	vmov	s15, r3
 800a0b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a0ba:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 800a0a8 <scaraKeyInit+0xab0>
 800a0be:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a0c2:	ee17 0a90 	vmov	r0, s15
 800a0c6:	f7f6 fa4f 	bl	8000568 <__aeabi_f2d>
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	460c      	mov	r4, r1
 800a0ce:	e9c7 3482 	strd	r3, r4, [r7, #520]	; 0x208
		v = s/(SHIFT_PERIOD - SHIFT_T_UP);
 800a0d2:	a3cb      	add	r3, pc, #812	; (adr r3, 800a400 <scaraKeyInit+0xe08>)
 800a0d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d8:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 800a0dc:	f7f6 fbc6 	bl	800086c <__aeabi_ddiv>
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	460c      	mov	r4, r1
 800a0e4:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
		a = v/(SHIFT_T_UP);
 800a0e8:	a3c7      	add	r3, pc, #796	; (adr r3, 800a408 <scaraKeyInit+0xe10>)
 800a0ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ee:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 800a0f2:	f7f6 fbbb 	bl	800086c <__aeabi_ddiv>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	460c      	mov	r4, r1
 800a0fa:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
		cmd.v_factor = v/(V_DESIGN_J1);
 800a0fe:	a3c4      	add	r3, pc, #784	; (adr r3, 800a410 <scaraKeyInit+0xe18>)
 800a100:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a104:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 800a108:	f7f6 fbb0 	bl	800086c <__aeabi_ddiv>
 800a10c:	4603      	mov	r3, r0
 800a10e:	460c      	mov	r4, r1
 800a110:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a114:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
		cmd.a_factor = a/(A_DESIGN_J1);
 800a118:	a3bd      	add	r3, pc, #756	; (adr r3, 800a410 <scaraKeyInit+0xe18>)
 800a11a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a11e:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 800a122:	f7f6 fba3 	bl	800086c <__aeabi_ddiv>
 800a126:	4603      	mov	r3, r0
 800a128:	460c      	mov	r4, r1
 800a12a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a12e:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

		cmd.space_type = DUTY_SPACE_JOINT;
 800a132:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a136:	2201      	movs	r2, #1
 800a138:	735a      	strb	r2, [r3, #13]
		cmd.joint_type = DUTY_JOINT_SINGLE;
 800a13a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a13e:	2200      	movs	r2, #0
 800a140:	73da      	strb	r2, [r3, #15]
		cmd.sub_para_int 	= 1;
 800a142:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a146:	2201      	movs	r2, #1
 800a148:	615a      	str	r2, [r3, #20]
		cmd.sub_para_double = s*180/PI;
 800a14a:	f04f 0200 	mov.w	r2, #0
 800a14e:	4bb4      	ldr	r3, [pc, #720]	; (800a420 <scaraKeyInit+0xe28>)
 800a150:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 800a154:	f7f6 fa60 	bl	8000618 <__aeabi_dmul>
 800a158:	4603      	mov	r3, r0
 800a15a:	460c      	mov	r4, r1
 800a15c:	4618      	mov	r0, r3
 800a15e:	4621      	mov	r1, r4
 800a160:	a3a5      	add	r3, pc, #660	; (adr r3, 800a3f8 <scaraKeyInit+0xe00>)
 800a162:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a166:	f7f6 fb81 	bl	800086c <__aeabi_ddiv>
 800a16a:	4603      	mov	r3, r0
 800a16c:	460c      	mov	r4, r1
 800a16e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a172:	e9c2 3406 	strd	r3, r4, [r2, #24]
		v_current = positionCurrent.v_theta2;
 800a176:	4bab      	ldr	r3, [pc, #684]	; (800a424 <scaraKeyInit+0xe2c>)
 800a178:	e9d3 3424 	ldrd	r3, r4, [r3, #144]	; 0x90
 800a17c:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
		lspb = &(myDUTY.joint.trajectory[1].lspb);
 800a180:	4ba9      	ldr	r3, [pc, #676]	; (800a428 <scaraKeyInit+0xe30>)
 800a182:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	}
			break;
 800a186:	e239      	b.n	800a5fc <scaraKeyInit+0x1004>
	case SCARA_KEY_VAR1_DEC:
	{
		s = SHIFT_VAR1*speed;
 800a188:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	ee07 3a90 	vmov	s15, r3
 800a192:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a196:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 800a430 <scaraKeyInit+0xe38>
 800a19a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a19e:	ee17 0a90 	vmov	r0, s15
 800a1a2:	f7f6 f9e1 	bl	8000568 <__aeabi_f2d>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	460c      	mov	r4, r1
 800a1aa:	e9c7 3482 	strd	r3, r4, [r7, #520]	; 0x208
		v = s/(SHIFT_PERIOD - SHIFT_T_UP);
 800a1ae:	a394      	add	r3, pc, #592	; (adr r3, 800a400 <scaraKeyInit+0xe08>)
 800a1b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1b4:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 800a1b8:	f7f6 fb58 	bl	800086c <__aeabi_ddiv>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	460c      	mov	r4, r1
 800a1c0:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
		a = v/(SHIFT_T_UP);
 800a1c4:	a390      	add	r3, pc, #576	; (adr r3, 800a408 <scaraKeyInit+0xe10>)
 800a1c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ca:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 800a1ce:	f7f6 fb4d 	bl	800086c <__aeabi_ddiv>
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	460c      	mov	r4, r1
 800a1d6:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
		cmd.v_factor = v/(V_DESIGN_J1);
 800a1da:	a38d      	add	r3, pc, #564	; (adr r3, 800a410 <scaraKeyInit+0xe18>)
 800a1dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1e0:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 800a1e4:	f7f6 fb42 	bl	800086c <__aeabi_ddiv>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	460c      	mov	r4, r1
 800a1ec:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a1f0:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
		cmd.a_factor = a/(A_DESIGN_J1);
 800a1f4:	a386      	add	r3, pc, #536	; (adr r3, 800a410 <scaraKeyInit+0xe18>)
 800a1f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1fa:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 800a1fe:	f7f6 fb35 	bl	800086c <__aeabi_ddiv>
 800a202:	4603      	mov	r3, r0
 800a204:	460c      	mov	r4, r1
 800a206:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a20a:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

		cmd.space_type = DUTY_SPACE_JOINT;
 800a20e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a212:	2201      	movs	r2, #1
 800a214:	735a      	strb	r2, [r3, #13]
		cmd.joint_type = DUTY_JOINT_SINGLE;
 800a216:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a21a:	2200      	movs	r2, #0
 800a21c:	73da      	strb	r2, [r3, #15]
		cmd.sub_para_int 	= 1;
 800a21e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a222:	2201      	movs	r2, #1
 800a224:	615a      	str	r2, [r3, #20]
		cmd.sub_para_double = -s*180/PI;
 800a226:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800a22a:	60bb      	str	r3, [r7, #8]
 800a22c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800a230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800a234:	60fb      	str	r3, [r7, #12]
 800a236:	f04f 0200 	mov.w	r2, #0
 800a23a:	4b79      	ldr	r3, [pc, #484]	; (800a420 <scaraKeyInit+0xe28>)
 800a23c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a240:	f7f6 f9ea 	bl	8000618 <__aeabi_dmul>
 800a244:	4603      	mov	r3, r0
 800a246:	460c      	mov	r4, r1
 800a248:	4618      	mov	r0, r3
 800a24a:	4621      	mov	r1, r4
 800a24c:	a36a      	add	r3, pc, #424	; (adr r3, 800a3f8 <scaraKeyInit+0xe00>)
 800a24e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a252:	f7f6 fb0b 	bl	800086c <__aeabi_ddiv>
 800a256:	4603      	mov	r3, r0
 800a258:	460c      	mov	r4, r1
 800a25a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a25e:	e9c2 3406 	strd	r3, r4, [r2, #24]
		v_current = positionCurrent.v_theta2;
 800a262:	4b70      	ldr	r3, [pc, #448]	; (800a424 <scaraKeyInit+0xe2c>)
 800a264:	e9d3 3424 	ldrd	r3, r4, [r3, #144]	; 0x90
 800a268:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
		lspb = &(myDUTY.joint.trajectory[1].lspb);
 800a26c:	4b6e      	ldr	r3, [pc, #440]	; (800a428 <scaraKeyInit+0xe30>)
 800a26e:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	}
			break;
 800a272:	e1c3      	b.n	800a5fc <scaraKeyInit+0x1004>
	case SCARA_KEY_VAR2_INC:
	{
		s = SHIFT_VAR2*speed;
 800a274:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	ee07 3a90 	vmov	s15, r3
 800a27e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a282:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800a286:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a28a:	ee17 0a90 	vmov	r0, s15
 800a28e:	f7f6 f96b 	bl	8000568 <__aeabi_f2d>
 800a292:	4603      	mov	r3, r0
 800a294:	460c      	mov	r4, r1
 800a296:	e9c7 3482 	strd	r3, r4, [r7, #520]	; 0x208
		v = s/(SHIFT_PERIOD - SHIFT_T_UP);
 800a29a:	a359      	add	r3, pc, #356	; (adr r3, 800a400 <scaraKeyInit+0xe08>)
 800a29c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2a0:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 800a2a4:	f7f6 fae2 	bl	800086c <__aeabi_ddiv>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	460c      	mov	r4, r1
 800a2ac:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
		a = v/(SHIFT_T_UP);
 800a2b0:	a355      	add	r3, pc, #340	; (adr r3, 800a408 <scaraKeyInit+0xe10>)
 800a2b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2b6:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 800a2ba:	f7f6 fad7 	bl	800086c <__aeabi_ddiv>
 800a2be:	4603      	mov	r3, r0
 800a2c0:	460c      	mov	r4, r1
 800a2c2:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
		cmd.v_factor = v/(V_DESIGN_J2);
 800a2c6:	a354      	add	r3, pc, #336	; (adr r3, 800a418 <scaraKeyInit+0xe20>)
 800a2c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2cc:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 800a2d0:	f7f6 facc 	bl	800086c <__aeabi_ddiv>
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	460c      	mov	r4, r1
 800a2d8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a2dc:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
		cmd.a_factor = a/(A_DESIGN_J2);
 800a2e0:	a34d      	add	r3, pc, #308	; (adr r3, 800a418 <scaraKeyInit+0xe20>)
 800a2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e6:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 800a2ea:	f7f6 fabf 	bl	800086c <__aeabi_ddiv>
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	460c      	mov	r4, r1
 800a2f2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a2f6:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

		cmd.space_type = DUTY_SPACE_JOINT;
 800a2fa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a2fe:	2201      	movs	r2, #1
 800a300:	735a      	strb	r2, [r3, #13]
		cmd.joint_type = DUTY_JOINT_SINGLE;
 800a302:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a306:	2200      	movs	r2, #0
 800a308:	73da      	strb	r2, [r3, #15]
		cmd.sub_para_int 	= 2;
 800a30a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a30e:	2202      	movs	r2, #2
 800a310:	615a      	str	r2, [r3, #20]
		cmd.sub_para_double = s;
 800a312:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a316:	e9d7 3482 	ldrd	r3, r4, [r7, #520]	; 0x208
 800a31a:	e9c2 3406 	strd	r3, r4, [r2, #24]
		v_current = positionCurrent.v_d3;
 800a31e:	4b41      	ldr	r3, [pc, #260]	; (800a424 <scaraKeyInit+0xe2c>)
 800a320:	e9d3 3426 	ldrd	r3, r4, [r3, #152]	; 0x98
 800a324:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
		lspb = &(myDUTY.joint.trajectory[2].lspb);
 800a328:	4b40      	ldr	r3, [pc, #256]	; (800a42c <scaraKeyInit+0xe34>)
 800a32a:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	}
			break;
 800a32e:	e165      	b.n	800a5fc <scaraKeyInit+0x1004>
	case SCARA_KEY_VAR2_DEC:
	{
		s = SHIFT_VAR2*speed;
 800a330:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	ee07 3a90 	vmov	s15, r3
 800a33a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a33e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800a342:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a346:	ee17 0a90 	vmov	r0, s15
 800a34a:	f7f6 f90d 	bl	8000568 <__aeabi_f2d>
 800a34e:	4603      	mov	r3, r0
 800a350:	460c      	mov	r4, r1
 800a352:	e9c7 3482 	strd	r3, r4, [r7, #520]	; 0x208
		v = s/(SHIFT_PERIOD - SHIFT_T_UP);
 800a356:	a32a      	add	r3, pc, #168	; (adr r3, 800a400 <scaraKeyInit+0xe08>)
 800a358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a35c:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 800a360:	f7f6 fa84 	bl	800086c <__aeabi_ddiv>
 800a364:	4603      	mov	r3, r0
 800a366:	460c      	mov	r4, r1
 800a368:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
		a = v/(SHIFT_T_UP);
 800a36c:	a326      	add	r3, pc, #152	; (adr r3, 800a408 <scaraKeyInit+0xe10>)
 800a36e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a372:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 800a376:	f7f6 fa79 	bl	800086c <__aeabi_ddiv>
 800a37a:	4603      	mov	r3, r0
 800a37c:	460c      	mov	r4, r1
 800a37e:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
		cmd.v_factor = v/(V_DESIGN_J2);
 800a382:	a325      	add	r3, pc, #148	; (adr r3, 800a418 <scaraKeyInit+0xe20>)
 800a384:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a388:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 800a38c:	f7f6 fa6e 	bl	800086c <__aeabi_ddiv>
 800a390:	4603      	mov	r3, r0
 800a392:	460c      	mov	r4, r1
 800a394:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a398:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
		cmd.a_factor = a/(A_DESIGN_J2);
 800a39c:	a31e      	add	r3, pc, #120	; (adr r3, 800a418 <scaraKeyInit+0xe20>)
 800a39e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a2:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 800a3a6:	f7f6 fa61 	bl	800086c <__aeabi_ddiv>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	460c      	mov	r4, r1
 800a3ae:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a3b2:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

		cmd.space_type = DUTY_SPACE_JOINT;
 800a3b6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a3ba:	2201      	movs	r2, #1
 800a3bc:	735a      	strb	r2, [r3, #13]
		cmd.joint_type = DUTY_JOINT_SINGLE;
 800a3be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	73da      	strb	r2, [r3, #15]
		cmd.sub_para_int 	= 2;
 800a3c6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a3ca:	2202      	movs	r2, #2
 800a3cc:	615a      	str	r2, [r3, #20]
		cmd.sub_para_double = -s;
 800a3ce:	f8d7 5208 	ldr.w	r5, [r7, #520]	; 0x208
 800a3d2:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800a3d6:	f083 4600 	eor.w	r6, r3, #2147483648	; 0x80000000
 800a3da:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a3de:	e9c3 5606 	strd	r5, r6, [r3, #24]
		v_current = positionCurrent.v_d3;
 800a3e2:	4b10      	ldr	r3, [pc, #64]	; (800a424 <scaraKeyInit+0xe2c>)
 800a3e4:	e9d3 3426 	ldrd	r3, r4, [r3, #152]	; 0x98
 800a3e8:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
		lspb = &(myDUTY.joint.trajectory[2].lspb);
 800a3ec:	4b0f      	ldr	r3, [pc, #60]	; (800a42c <scaraKeyInit+0xe34>)
 800a3ee:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	}
			break;
 800a3f2:	e103      	b.n	800a5fc <scaraKeyInit+0x1004>
 800a3f4:	f3af 8000 	nop.w
 800a3f8:	60000000 	.word	0x60000000
 800a3fc:	400921fb 	.word	0x400921fb
 800a400:	60000000 	.word	0x60000000
 800a404:	3fedf3b6 	.word	0x3fedf3b6
 800a408:	40000000 	.word	0x40000000
 800a40c:	3fd0e560 	.word	0x3fd0e560
 800a410:	14000000 	.word	0x14000000
 800a414:	4000f6f0 	.word	0x4000f6f0
 800a418:	00000000 	.word	0x00000000
 800a41c:	405c2000 	.word	0x405c2000
 800a420:	40668000 	.word	0x40668000
 800a424:	20005e90 	.word	0x20005e90
 800a428:	200058f8 	.word	0x200058f8
 800a42c:	20005a50 	.word	0x20005a50
 800a430:	3d567750 	.word	0x3d567750
	case SCARA_KEY_VAR3_INC:
	{
		s = SHIFT_VAR3*speed;
 800a434:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	ee07 3a90 	vmov	s15, r3
 800a43e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a442:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 800a430 <scaraKeyInit+0xe38>
 800a446:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a44a:	ee17 0a90 	vmov	r0, s15
 800a44e:	f7f6 f88b 	bl	8000568 <__aeabi_f2d>
 800a452:	4603      	mov	r3, r0
 800a454:	460c      	mov	r4, r1
 800a456:	e9c7 3482 	strd	r3, r4, [r7, #520]	; 0x208
		v = s/(SHIFT_PERIOD - SHIFT_T_UP);
 800a45a:	a39b      	add	r3, pc, #620	; (adr r3, 800a6c8 <scaraKeyInit+0x10d0>)
 800a45c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a460:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 800a464:	f7f6 fa02 	bl	800086c <__aeabi_ddiv>
 800a468:	4603      	mov	r3, r0
 800a46a:	460c      	mov	r4, r1
 800a46c:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
		a = v/(SHIFT_T_UP);
 800a470:	a397      	add	r3, pc, #604	; (adr r3, 800a6d0 <scaraKeyInit+0x10d8>)
 800a472:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a476:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 800a47a:	f7f6 f9f7 	bl	800086c <__aeabi_ddiv>
 800a47e:	4603      	mov	r3, r0
 800a480:	460c      	mov	r4, r1
 800a482:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
		cmd.v_factor = v/(V_DESIGN_J3);
 800a486:	a394      	add	r3, pc, #592	; (adr r3, 800a6d8 <scaraKeyInit+0x10e0>)
 800a488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a48c:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 800a490:	f7f6 f9ec 	bl	800086c <__aeabi_ddiv>
 800a494:	4603      	mov	r3, r0
 800a496:	460c      	mov	r4, r1
 800a498:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a49c:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
		cmd.a_factor = a/(A_DESIGN_J3);
 800a4a0:	a38d      	add	r3, pc, #564	; (adr r3, 800a6d8 <scaraKeyInit+0x10e0>)
 800a4a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4a6:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 800a4aa:	f7f6 f9df 	bl	800086c <__aeabi_ddiv>
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	460c      	mov	r4, r1
 800a4b2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a4b6:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

		cmd.space_type = DUTY_SPACE_JOINT;
 800a4ba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a4be:	2201      	movs	r2, #1
 800a4c0:	735a      	strb	r2, [r3, #13]
		cmd.joint_type = DUTY_JOINT_SINGLE;
 800a4c2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	73da      	strb	r2, [r3, #15]
		cmd.sub_para_int 	= 3;
 800a4ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a4ce:	2203      	movs	r2, #3
 800a4d0:	615a      	str	r2, [r3, #20]
		cmd.sub_para_double = s*180/PI;
 800a4d2:	f04f 0200 	mov.w	r2, #0
 800a4d6:	4b82      	ldr	r3, [pc, #520]	; (800a6e0 <scaraKeyInit+0x10e8>)
 800a4d8:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 800a4dc:	f7f6 f89c 	bl	8000618 <__aeabi_dmul>
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	460c      	mov	r4, r1
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	4621      	mov	r1, r4
 800a4e8:	a375      	add	r3, pc, #468	; (adr r3, 800a6c0 <scaraKeyInit+0x10c8>)
 800a4ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ee:	f7f6 f9bd 	bl	800086c <__aeabi_ddiv>
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	460c      	mov	r4, r1
 800a4f6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a4fa:	e9c2 3406 	strd	r3, r4, [r2, #24]
		v_current = positionCurrent.v_theta4;
 800a4fe:	4b79      	ldr	r3, [pc, #484]	; (800a6e4 <scaraKeyInit+0x10ec>)
 800a500:	e9d3 3428 	ldrd	r3, r4, [r3, #160]	; 0xa0
 800a504:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
		lspb = &(myDUTY.joint.trajectory[3].lspb);
 800a508:	4b77      	ldr	r3, [pc, #476]	; (800a6e8 <scaraKeyInit+0x10f0>)
 800a50a:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	}
			break;
 800a50e:	e075      	b.n	800a5fc <scaraKeyInit+0x1004>
	case SCARA_KEY_VAR3_DEC:
	{
		s = SHIFT_VAR3*speed;
 800a510:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	ee07 3a90 	vmov	s15, r3
 800a51a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a51e:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800a6ec <scaraKeyInit+0x10f4>
 800a522:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a526:	ee17 0a90 	vmov	r0, s15
 800a52a:	f7f6 f81d 	bl	8000568 <__aeabi_f2d>
 800a52e:	4603      	mov	r3, r0
 800a530:	460c      	mov	r4, r1
 800a532:	e9c7 3482 	strd	r3, r4, [r7, #520]	; 0x208
		v = s/(SHIFT_PERIOD - SHIFT_T_UP);
 800a536:	a364      	add	r3, pc, #400	; (adr r3, 800a6c8 <scaraKeyInit+0x10d0>)
 800a538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a53c:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 800a540:	f7f6 f994 	bl	800086c <__aeabi_ddiv>
 800a544:	4603      	mov	r3, r0
 800a546:	460c      	mov	r4, r1
 800a548:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
		a = v/(SHIFT_T_UP);
 800a54c:	a360      	add	r3, pc, #384	; (adr r3, 800a6d0 <scaraKeyInit+0x10d8>)
 800a54e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a552:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 800a556:	f7f6 f989 	bl	800086c <__aeabi_ddiv>
 800a55a:	4603      	mov	r3, r0
 800a55c:	460c      	mov	r4, r1
 800a55e:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
		cmd.v_factor = v/(V_DESIGN_J3);
 800a562:	a35d      	add	r3, pc, #372	; (adr r3, 800a6d8 <scaraKeyInit+0x10e0>)
 800a564:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a568:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 800a56c:	f7f6 f97e 	bl	800086c <__aeabi_ddiv>
 800a570:	4603      	mov	r3, r0
 800a572:	460c      	mov	r4, r1
 800a574:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a578:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
		cmd.a_factor = a/(A_DESIGN_J3);
 800a57c:	a356      	add	r3, pc, #344	; (adr r3, 800a6d8 <scaraKeyInit+0x10e0>)
 800a57e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a582:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 800a586:	f7f6 f971 	bl	800086c <__aeabi_ddiv>
 800a58a:	4603      	mov	r3, r0
 800a58c:	460c      	mov	r4, r1
 800a58e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a592:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

		cmd.space_type = DUTY_SPACE_JOINT;
 800a596:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a59a:	2201      	movs	r2, #1
 800a59c:	735a      	strb	r2, [r3, #13]
		cmd.joint_type = DUTY_JOINT_SINGLE;
 800a59e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	73da      	strb	r2, [r3, #15]
		cmd.sub_para_int 	= 3;
 800a5a6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a5aa:	2203      	movs	r2, #3
 800a5ac:	615a      	str	r2, [r3, #20]
		cmd.sub_para_double = -s*180/PI;
 800a5ae:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800a5b2:	603b      	str	r3, [r7, #0]
 800a5b4:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800a5b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800a5bc:	607b      	str	r3, [r7, #4]
 800a5be:	f04f 0200 	mov.w	r2, #0
 800a5c2:	4b47      	ldr	r3, [pc, #284]	; (800a6e0 <scaraKeyInit+0x10e8>)
 800a5c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a5c8:	f7f6 f826 	bl	8000618 <__aeabi_dmul>
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	460c      	mov	r4, r1
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	4621      	mov	r1, r4
 800a5d4:	a33a      	add	r3, pc, #232	; (adr r3, 800a6c0 <scaraKeyInit+0x10c8>)
 800a5d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5da:	f7f6 f947 	bl	800086c <__aeabi_ddiv>
 800a5de:	4603      	mov	r3, r0
 800a5e0:	460c      	mov	r4, r1
 800a5e2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a5e6:	e9c2 3406 	strd	r3, r4, [r2, #24]
		v_current = positionCurrent.v_theta4;
 800a5ea:	4b3e      	ldr	r3, [pc, #248]	; (800a6e4 <scaraKeyInit+0x10ec>)
 800a5ec:	e9d3 3428 	ldrd	r3, r4, [r3, #160]	; 0xa0
 800a5f0:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
		lspb = &(myDUTY.joint.trajectory[3].lspb);
 800a5f4:	4b3c      	ldr	r3, [pc, #240]	; (800a6e8 <scaraKeyInit+0x10f0>)
 800a5f6:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	}
			break;
 800a5fa:	bf00      	nop
	}
	// Initial
	status = scaraInitDuty(cmd);
 800a5fc:	f107 0448 	add.w	r4, r7, #72	; 0x48
 800a600:	4668      	mov	r0, sp
 800a602:	f104 0310 	add.w	r3, r4, #16
 800a606:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800a60a:	4619      	mov	r1, r3
 800a60c:	f00b fa88 	bl	8015b20 <memcpy>
 800a610:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800a614:	f7fa fae4 	bl	8004be0 <scaraInitDuty>
 800a618:	4603      	mov	r3, r0
 800a61a:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
	if (status == SCARA_STATUS_OK) {
 800a61e:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 800a622:	2b00      	cmp	r3, #0
 800a624:	d141      	bne.n	800a6aa <scaraKeyInit+0x10b2>
		status = scaraTestDuty();
 800a626:	f7fe fd9f 	bl	8009168 <scaraTestDuty>
 800a62a:	4603      	mov	r3, r0
 800a62c:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
		if (status != SCARA_STATUS_OK) {
 800a630:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 800a634:	2b00      	cmp	r3, #0
 800a636:	d002      	beq.n	800a63e <scaraKeyInit+0x1046>
			return status;
 800a638:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 800a63c:	e037      	b.n	800a6ae <scaraKeyInit+0x10b6>
		}
		// tinh lai run time so vs v hien tai
		*(runtime) = (v_current - lspb->v0)/(lspb->a_design);
 800a63e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800a642:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 800a646:	461a      	mov	r2, r3
 800a648:	4623      	mov	r3, r4
 800a64a:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 800a64e:	f7f5 fe2b 	bl	80002a8 <__aeabi_dsub>
 800a652:	4603      	mov	r3, r0
 800a654:	460c      	mov	r4, r1
 800a656:	4618      	mov	r0, r3
 800a658:	4621      	mov	r1, r4
 800a65a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800a65e:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 800a662:	461a      	mov	r2, r3
 800a664:	4623      	mov	r3, r4
 800a666:	f7f6 f901 	bl	800086c <__aeabi_ddiv>
 800a66a:	4603      	mov	r3, r0
 800a66c:	460c      	mov	r4, r1
 800a66e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800a672:	6812      	ldr	r2, [r2, #0]
 800a674:	e9c2 3400 	strd	r3, r4, [r2]
		scaraFlowDuty(*runtime, &positionKeyInit, positionCurrent);
 800a678:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	ed93 8b00 	vldr	d8, [r3]
 800a682:	4c18      	ldr	r4, [pc, #96]	; (800a6e4 <scaraKeyInit+0x10ec>)
 800a684:	4668      	mov	r0, sp
 800a686:	f104 0308 	add.w	r3, r4, #8
 800a68a:	22b0      	movs	r2, #176	; 0xb0
 800a68c:	4619      	mov	r1, r3
 800a68e:	f00b fa47 	bl	8015b20 <memcpy>
 800a692:	e894 000c 	ldmia.w	r4, {r2, r3}
 800a696:	4816      	ldr	r0, [pc, #88]	; (800a6f0 <scaraKeyInit+0x10f8>)
 800a698:	eeb0 0a48 	vmov.f32	s0, s16
 800a69c:	eef0 0a68 	vmov.f32	s1, s17
 800a6a0:	f7fc ff44 	bl	800752c <scaraFlowDuty>
		return status;
 800a6a4:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 800a6a8:	e001      	b.n	800a6ae <scaraKeyInit+0x10b6>
	} else {
		return status;
 800a6aa:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
	}
}
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	f507 7709 	add.w	r7, r7, #548	; 0x224
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	ecbd 8b02 	vpop	{d8}
 800a6ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6bc:	f3af 8000 	nop.w
 800a6c0:	60000000 	.word	0x60000000
 800a6c4:	400921fb 	.word	0x400921fb
 800a6c8:	60000000 	.word	0x60000000
 800a6cc:	3fedf3b6 	.word	0x3fedf3b6
 800a6d0:	40000000 	.word	0x40000000
 800a6d4:	3fd0e560 	.word	0x3fd0e560
 800a6d8:	6b259425 	.word	0x6b259425
 800a6dc:	40069b91 	.word	0x40069b91
 800a6e0:	40668000 	.word	0x40668000
 800a6e4:	20005e90 	.word	0x20005e90
 800a6e8:	20005ba8 	.word	0x20005ba8
 800a6ec:	3d567750 	.word	0x3d567750
 800a6f0:	20005dd8 	.word	0x20005dd8

0800a6f4 <scaraKeyFlow>:

SCARA_StatusTypeDef		scaraKeyFlow(double time,
									SCARA_PositionTypeDef *pos_Next,
									SCARA_PositionTypeDef pos_Current) {
 800a6f4:	b082      	sub	sp, #8
 800a6f6:	b5b0      	push	{r4, r5, r7, lr}
 800a6f8:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 800a6fc:	af2c      	add	r7, sp, #176	; 0xb0
 800a6fe:	f107 0108 	add.w	r1, r7, #8
 800a702:	ed81 0b00 	vstr	d0, [r1]
 800a706:	1d39      	adds	r1, r7, #4
 800a708:	6008      	str	r0, [r1, #0]
 800a70a:	f507 71cc 	add.w	r1, r7, #408	; 0x198
 800a70e:	e881 000c 	stmia.w	r1, {r2, r3}
	SCARA_StatusTypeDef status1, status2, status3, status4;
	SCARA_PositionTypeDef	positionCompute;
	// Update time
	positionCompute.t = time;
 800a712:	f107 0210 	add.w	r2, r7, #16
 800a716:	f107 0308 	add.w	r3, r7, #8
 800a71a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a71e:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	/*---- Task space ----*/
	if ( DUTY_SPACE_TASK == myDUTY.space_type) {
 800a722:	4b74      	ldr	r3, [pc, #464]	; (800a8f4 <scaraKeyFlow+0x200>)
 800a724:	781b      	ldrb	r3, [r3, #0]
 800a726:	2b00      	cmp	r3, #0
 800a728:	f040 80ee 	bne.w	800a908 <scaraKeyFlow+0x214>
		double s, angle, x, y, z, v, v_angle;
		double s_shift, angle_shift;
		int8_t	dir_roll;
		//---Trajectory flowing
			// LSPB
		if( DUTY_TRAJECTORY_LSPB == myDUTY.task.trajectory_3d.trajectory_type) {
 800a72c:	4b71      	ldr	r3, [pc, #452]	; (800a8f4 <scaraKeyFlow+0x200>)
 800a72e:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800a732:	2b00      	cmp	r3, #0
 800a734:	d12c      	bne.n	800a790 <scaraKeyFlow+0x9c>
			status1 = scaraFlowLSPB(&(myDUTY.task.trajectory_3d.lspb), time);
 800a736:	f107 0308 	add.w	r3, r7, #8
 800a73a:	ed93 0b00 	vldr	d0, [r3]
 800a73e:	486e      	ldr	r0, [pc, #440]	; (800a8f8 <scaraKeyFlow+0x204>)
 800a740:	f7fd fb62 	bl	8007e08 <scaraFlowLSPB>
 800a744:	4603      	mov	r3, r0
 800a746:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
			status2 = scaraFlowLSPB(&(myDUTY.task.trajectory_roll.lspb), time);
 800a74a:	f107 0308 	add.w	r3, r7, #8
 800a74e:	ed93 0b00 	vldr	d0, [r3]
 800a752:	486a      	ldr	r0, [pc, #424]	; (800a8fc <scaraKeyFlow+0x208>)
 800a754:	f7fd fb58 	bl	8007e08 <scaraFlowLSPB>
 800a758:	4603      	mov	r3, r0
 800a75a:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
			s = myDUTY.task.trajectory_3d.lspb.s_current;
 800a75e:	4b65      	ldr	r3, [pc, #404]	; (800a8f4 <scaraKeyFlow+0x200>)
 800a760:	e9d3 3464 	ldrd	r3, r4, [r3, #400]	; 0x190
 800a764:	e9c7 345e 	strd	r3, r4, [r7, #376]	; 0x178
			v = myDUTY.task.trajectory_3d.lspb.v_current;
 800a768:	4b62      	ldr	r3, [pc, #392]	; (800a8f4 <scaraKeyFlow+0x200>)
 800a76a:	e9d3 3462 	ldrd	r3, r4, [r3, #392]	; 0x188
 800a76e:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
			angle = myDUTY.task.trajectory_roll.lspb.s_current;
 800a772:	4b60      	ldr	r3, [pc, #384]	; (800a8f4 <scaraKeyFlow+0x200>)
 800a774:	e9d3 34ba 	ldrd	r3, r4, [r3, #744]	; 0x2e8
 800a778:	e9c7 345c 	strd	r3, r4, [r7, #368]	; 0x170
			v_angle = myDUTY.task.trajectory_roll.lspb.v_current;
 800a77c:	4b5d      	ldr	r3, [pc, #372]	; (800a8f4 <scaraKeyFlow+0x200>)
 800a77e:	e9d3 34b8 	ldrd	r3, r4, [r3, #736]	; 0x2e0
 800a782:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			dir_roll = myDUTY.task.trajectory_roll.lspb.dir;
 800a786:	4b5b      	ldr	r3, [pc, #364]	; (800a8f4 <scaraKeyFlow+0x200>)
 800a788:	f893 3270 	ldrb.w	r3, [r3, #624]	; 0x270
 800a78c:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
		}

		if ( SCARA_STATUS_OK != status1) {
 800a790:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800a794:	2b00      	cmp	r3, #0
 800a796:	d002      	beq.n	800a79e <scaraKeyFlow+0xaa>
			return status1;
 800a798:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800a79c:	e26b      	b.n	800ac76 <scaraKeyFlow+0x582>
		}
		if ( SCARA_STATUS_OK != status2) {
 800a79e:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d002      	beq.n	800a7ac <scaraKeyFlow+0xb8>
			return status2;
 800a7a6:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 800a7aa:	e264      	b.n	800ac76 <scaraKeyFlow+0x582>
		}

		// Shift q , q_roll
		s_shift = s - positionKeyInit.q;
 800a7ac:	4b54      	ldr	r3, [pc, #336]	; (800a900 <scaraKeyFlow+0x20c>)
 800a7ae:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a7b2:	461a      	mov	r2, r3
 800a7b4:	4623      	mov	r3, r4
 800a7b6:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 800a7ba:	f7f5 fd75 	bl	80002a8 <__aeabi_dsub>
 800a7be:	4603      	mov	r3, r0
 800a7c0:	460c      	mov	r4, r1
 800a7c2:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
		angle_shift = angle - positionKeyInit.q_roll;
 800a7c6:	4b4e      	ldr	r3, [pc, #312]	; (800a900 <scaraKeyFlow+0x20c>)
 800a7c8:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 800a7cc:	461a      	mov	r2, r3
 800a7ce:	4623      	mov	r3, r4
 800a7d0:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800a7d4:	f7f5 fd68 	bl	80002a8 <__aeabi_dsub>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	460c      	mov	r4, r1
 800a7dc:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8

		//---Path flowing
			// Straight line
		if( DUTY_PATH_LINE == myDUTY.task.path.path_type) {
 800a7e0:	4b44      	ldr	r3, [pc, #272]	; (800a8f4 <scaraKeyFlow+0x200>)
 800a7e2:	7a1b      	ldrb	r3, [r3, #8]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d116      	bne.n	800a816 <scaraKeyFlow+0x122>
			status1 = scaraFlowLine(&(myDUTY.task.path.line), s_shift);//shift
 800a7e8:	ed97 0b34 	vldr	d0, [r7, #208]	; 0xd0
 800a7ec:	4845      	ldr	r0, [pc, #276]	; (800a904 <scaraKeyFlow+0x210>)
 800a7ee:	f7fd f9fb 	bl	8007be8 <scaraFlowLine>
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
			x = myDUTY.task.path.line.x_current;
 800a7f8:	4b3e      	ldr	r3, [pc, #248]	; (800a8f4 <scaraKeyFlow+0x200>)
 800a7fa:	e9d3 341a 	ldrd	r3, r4, [r3, #104]	; 0x68
 800a7fe:	e9c7 345a 	strd	r3, r4, [r7, #360]	; 0x168
			y = myDUTY.task.path.line.y_current;
 800a802:	4b3c      	ldr	r3, [pc, #240]	; (800a8f4 <scaraKeyFlow+0x200>)
 800a804:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 800a808:	e9c7 3458 	strd	r3, r4, [r7, #352]	; 0x160
			z = myDUTY.task.path.line.z_current;
 800a80c:	4b39      	ldr	r3, [pc, #228]	; (800a8f4 <scaraKeyFlow+0x200>)
 800a80e:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 800a812:	e9c7 3456 	strd	r3, r4, [r7, #344]	; 0x158
		}

		positionCompute.x 		= x;
 800a816:	f107 0210 	add.w	r2, r7, #16
 800a81a:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 800a81e:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
		positionCompute.y		= y;
 800a822:	f107 0210 	add.w	r2, r7, #16
 800a826:	e9d7 3458 	ldrd	r3, r4, [r7, #352]	; 0x160
 800a82a:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
		positionCompute.z 		= z;
 800a82e:	f107 0210 	add.w	r2, r7, #16
 800a832:	e9d7 3456 	ldrd	r3, r4, [r7, #344]	; 0x158
 800a836:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
		positionCompute.roll 	= myDUTY.task.roll_start + angle_shift*dir_roll;// shift
 800a83a:	4b2e      	ldr	r3, [pc, #184]	; (800a8f4 <scaraKeyFlow+0x200>)
 800a83c:	e9d3 45f0 	ldrd	r4, r5, [r3, #960]	; 0x3c0
 800a840:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 800a844:	4618      	mov	r0, r3
 800a846:	f7f5 fe7d 	bl	8000544 <__aeabi_i2d>
 800a84a:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 800a84e:	f7f5 fee3 	bl	8000618 <__aeabi_dmul>
 800a852:	4602      	mov	r2, r0
 800a854:	460b      	mov	r3, r1
 800a856:	4620      	mov	r0, r4
 800a858:	4629      	mov	r1, r5
 800a85a:	f7f5 fd27 	bl	80002ac <__adddf3>
 800a85e:	4603      	mov	r3, r0
 800a860:	460c      	mov	r4, r1
 800a862:	f107 0210 	add.w	r2, r7, #16
 800a866:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

		positionCompute.q		= s;
 800a86a:	f107 0210 	add.w	r2, r7, #16
 800a86e:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 800a872:	e9c2 3400 	strd	r3, r4, [r2]
		positionCompute.q_roll  = angle;
 800a876:	f107 0210 	add.w	r2, r7, #16
 800a87a:	e9d7 345c 	ldrd	r3, r4, [r7, #368]	; 0x170
 800a87e:	e9c2 3402 	strd	r3, r4, [r2, #8]

		positionCompute.v_3d    = v;
 800a882:	f107 0210 	add.w	r2, r7, #16
 800a886:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 800a88a:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
		positionCompute.v_roll  = v_angle;
 800a88e:	f107 0210 	add.w	r2, r7, #16
 800a892:	e9d7 3452 	ldrd	r3, r4, [r7, #328]	; 0x148
 800a896:	e9c2 342c 	strd	r3, r4, [r2, #176]	; 0xb0

		positionCompute.total_time = myDUTY.time_total;
 800a89a:	4b16      	ldr	r3, [pc, #88]	; (800a8f4 <scaraKeyFlow+0x200>)
 800a89c:	f603 1348 	addw	r3, r3, #2376	; 0x948
 800a8a0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a8a4:	f107 0210 	add.w	r2, r7, #16
 800a8a8:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
		positionCompute.t		= time;
 800a8ac:	f107 0210 	add.w	r2, r7, #16
 800a8b0:	f107 0308 	add.w	r3, r7, #8
 800a8b4:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a8b8:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
		if ( FALSE == kinematicInverse(&positionCompute, pos_Current)) {
 800a8bc:	f107 0410 	add.w	r4, r7, #16
 800a8c0:	4668      	mov	r0, sp
 800a8c2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800a8c6:	22b0      	movs	r2, #176	; 0xb0
 800a8c8:	4619      	mov	r1, r3
 800a8ca:	f00b f929 	bl	8015b20 <memcpy>
 800a8ce:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800a8d2:	cb0c      	ldmia	r3, {r2, r3}
 800a8d4:	4620      	mov	r0, r4
 800a8d6:	f7f8 fea7 	bl	8003628 <kinematicInverse>
 800a8da:	4603      	mov	r3, r0
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d101      	bne.n	800a8e4 <scaraKeyFlow+0x1f0>
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a8e0:	2307      	movs	r3, #7
 800a8e2:	e1c8      	b.n	800ac76 <scaraKeyFlow+0x582>
		} else {
			memcpy(pos_Next, &positionCompute, sizeof(SCARA_PositionTypeDef));
 800a8e4:	f107 0110 	add.w	r1, r7, #16
 800a8e8:	1d3b      	adds	r3, r7, #4
 800a8ea:	22b8      	movs	r2, #184	; 0xb8
 800a8ec:	6818      	ldr	r0, [r3, #0]
 800a8ee:	f00b f917 	bl	8015b20 <memcpy>
 800a8f2:	e1bf      	b.n	800ac74 <scaraKeyFlow+0x580>
 800a8f4:	200053d0 	.word	0x200053d0
 800a8f8:	200054e8 	.word	0x200054e8
 800a8fc:	20005640 	.word	0x20005640
 800a900:	20005dd8 	.word	0x20005dd8
 800a904:	200053e0 	.word	0x200053e0
		}

	/*---- Joint space -----*/
	} else if (DUTY_SPACE_JOINT == myDUTY.space_type) {
 800a908:	4b4c      	ldr	r3, [pc, #304]	; (800aa3c <scaraKeyFlow+0x348>)
 800a90a:	781b      	ldrb	r3, [r3, #0]
 800a90c:	2b01      	cmp	r3, #1
 800a90e:	f040 81af 	bne.w	800ac70 <scaraKeyFlow+0x57c>
		double v0, v1, v2, v3;
		double s0_shift, s1_shift, s2_shift, s3_shift;
		int8_t dir0, dir1, dir2, dir3;
		// Trajectory flowing
			// LSPB
		if( DUTY_TRAJECTORY_LSPB == myDUTY.joint.trajectory[0].trajectory_type) {
 800a912:	4b4a      	ldr	r3, [pc, #296]	; (800aa3c <scaraKeyFlow+0x348>)
 800a914:	f893 33c8 	ldrb.w	r3, [r3, #968]	; 0x3c8
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d173      	bne.n	800aa04 <scaraKeyFlow+0x310>
			status1 = scaraFlowLSPB(&(myDUTY.joint.trajectory[0].lspb), time);
 800a91c:	f107 0308 	add.w	r3, r7, #8
 800a920:	ed93 0b00 	vldr	d0, [r3]
 800a924:	4846      	ldr	r0, [pc, #280]	; (800aa40 <scaraKeyFlow+0x34c>)
 800a926:	f7fd fa6f 	bl	8007e08 <scaraFlowLSPB>
 800a92a:	4603      	mov	r3, r0
 800a92c:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
			status2 = scaraFlowLSPB(&(myDUTY.joint.trajectory[1].lspb), time);
 800a930:	f107 0308 	add.w	r3, r7, #8
 800a934:	ed93 0b00 	vldr	d0, [r3]
 800a938:	4842      	ldr	r0, [pc, #264]	; (800aa44 <scaraKeyFlow+0x350>)
 800a93a:	f7fd fa65 	bl	8007e08 <scaraFlowLSPB>
 800a93e:	4603      	mov	r3, r0
 800a940:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
			status3 = scaraFlowLSPB(&(myDUTY.joint.trajectory[2].lspb), time);
 800a944:	f107 0308 	add.w	r3, r7, #8
 800a948:	ed93 0b00 	vldr	d0, [r3]
 800a94c:	483e      	ldr	r0, [pc, #248]	; (800aa48 <scaraKeyFlow+0x354>)
 800a94e:	f7fd fa5b 	bl	8007e08 <scaraFlowLSPB>
 800a952:	4603      	mov	r3, r0
 800a954:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
			status4 = scaraFlowLSPB(&(myDUTY.joint.trajectory[3].lspb), time);
 800a958:	f107 0308 	add.w	r3, r7, #8
 800a95c:	ed93 0b00 	vldr	d0, [r3]
 800a960:	483a      	ldr	r0, [pc, #232]	; (800aa4c <scaraKeyFlow+0x358>)
 800a962:	f7fd fa51 	bl	8007e08 <scaraFlowLSPB>
 800a966:	4603      	mov	r3, r0
 800a968:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184

			dir0 = myDUTY.joint.trajectory[0].lspb.dir;
 800a96c:	4b33      	ldr	r3, [pc, #204]	; (800aa3c <scaraKeyFlow+0x348>)
 800a96e:	f893 33d0 	ldrb.w	r3, [r3, #976]	; 0x3d0
 800a972:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
			dir1 = myDUTY.joint.trajectory[1].lspb.dir;
 800a976:	4b31      	ldr	r3, [pc, #196]	; (800aa3c <scaraKeyFlow+0x348>)
 800a978:	f893 3528 	ldrb.w	r3, [r3, #1320]	; 0x528
 800a97c:	f887 30fe 	strb.w	r3, [r7, #254]	; 0xfe
			dir2 = myDUTY.joint.trajectory[2].lspb.dir;
 800a980:	4b2e      	ldr	r3, [pc, #184]	; (800aa3c <scaraKeyFlow+0x348>)
 800a982:	f893 3680 	ldrb.w	r3, [r3, #1664]	; 0x680
 800a986:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
			dir3 = myDUTY.joint.trajectory[3].lspb.dir;
 800a98a:	4b2c      	ldr	r3, [pc, #176]	; (800aa3c <scaraKeyFlow+0x348>)
 800a98c:	f893 37d8 	ldrb.w	r3, [r3, #2008]	; 0x7d8
 800a990:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc

			s0 = myDUTY.joint.trajectory[0].lspb.s_current;
 800a994:	4b29      	ldr	r3, [pc, #164]	; (800aa3c <scaraKeyFlow+0x348>)
 800a996:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 800a99a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a99e:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
			s1 = myDUTY.joint.trajectory[1].lspb.s_current;
 800a9a2:	4b26      	ldr	r3, [pc, #152]	; (800aa3c <scaraKeyFlow+0x348>)
 800a9a4:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 800a9a8:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a9ac:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
			s2 = myDUTY.joint.trajectory[2].lspb.s_current;
 800a9b0:	4b22      	ldr	r3, [pc, #136]	; (800aa3c <scaraKeyFlow+0x348>)
 800a9b2:	f503 63df 	add.w	r3, r3, #1784	; 0x6f8
 800a9b6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a9ba:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
			s3 = myDUTY.joint.trajectory[3].lspb.s_current;
 800a9be:	4b1f      	ldr	r3, [pc, #124]	; (800aa3c <scaraKeyFlow+0x348>)
 800a9c0:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 800a9c4:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a9c8:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120

			v0 = myDUTY.joint.trajectory[0].lspb.v_current;
 800a9cc:	4b1b      	ldr	r3, [pc, #108]	; (800aa3c <scaraKeyFlow+0x348>)
 800a9ce:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a9d2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a9d6:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
			v1 = myDUTY.joint.trajectory[1].lspb.v_current;
 800a9da:	4b18      	ldr	r3, [pc, #96]	; (800aa3c <scaraKeyFlow+0x348>)
 800a9dc:	f503 63b3 	add.w	r3, r3, #1432	; 0x598
 800a9e0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a9e4:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
			v2 = myDUTY.joint.trajectory[2].lspb.v_current;
 800a9e8:	4b14      	ldr	r3, [pc, #80]	; (800aa3c <scaraKeyFlow+0x348>)
 800a9ea:	f503 63de 	add.w	r3, r3, #1776	; 0x6f0
 800a9ee:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a9f2:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
			v3 = myDUTY.joint.trajectory[3].lspb.v_current;
 800a9f6:	4b11      	ldr	r3, [pc, #68]	; (800aa3c <scaraKeyFlow+0x348>)
 800a9f8:	f603 0348 	addw	r3, r3, #2120	; 0x848
 800a9fc:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aa00:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100

		}
		// Check init status
		if ( SCARA_STATUS_OK != status1) {
 800aa04:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d002      	beq.n	800aa12 <scaraKeyFlow+0x31e>
			return status1;
 800aa0c:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800aa10:	e131      	b.n	800ac76 <scaraKeyFlow+0x582>
		}
		if ( SCARA_STATUS_OK != status2) {
 800aa12:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d002      	beq.n	800aa20 <scaraKeyFlow+0x32c>
			return status2;
 800aa1a:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 800aa1e:	e12a      	b.n	800ac76 <scaraKeyFlow+0x582>
		}
		if ( SCARA_STATUS_OK != status3) {
 800aa20:	f897 3185 	ldrb.w	r3, [r7, #389]	; 0x185
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d002      	beq.n	800aa2e <scaraKeyFlow+0x33a>
			return status3;
 800aa28:	f897 3185 	ldrb.w	r3, [r7, #389]	; 0x185
 800aa2c:	e123      	b.n	800ac76 <scaraKeyFlow+0x582>
		}
		if ( SCARA_STATUS_OK != status4) {
 800aa2e:	f897 3184 	ldrb.w	r3, [r7, #388]	; 0x184
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d00c      	beq.n	800aa50 <scaraKeyFlow+0x35c>
			return status4;
 800aa36:	f897 3184 	ldrb.w	r3, [r7, #388]	; 0x184
 800aa3a:	e11c      	b.n	800ac76 <scaraKeyFlow+0x582>
 800aa3c:	200053d0 	.word	0x200053d0
 800aa40:	200057a0 	.word	0x200057a0
 800aa44:	200058f8 	.word	0x200058f8
 800aa48:	20005a50 	.word	0x20005a50
 800aa4c:	20005ba8 	.word	0x20005ba8
		}
		// shift s0, s1, s2, s3
		s0_shift = s0 - positionKeyInit.q_theta1;
 800aa50:	4b8d      	ldr	r3, [pc, #564]	; (800ac88 <scaraKeyFlow+0x594>)
 800aa52:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800aa56:	461a      	mov	r2, r3
 800aa58:	4623      	mov	r3, r4
 800aa5a:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 800aa5e:	f7f5 fc23 	bl	80002a8 <__aeabi_dsub>
 800aa62:	4603      	mov	r3, r0
 800aa64:	460c      	mov	r4, r1
 800aa66:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0
		s1_shift = s1 - positionKeyInit.q_theta2;
 800aa6a:	4b87      	ldr	r3, [pc, #540]	; (800ac88 <scaraKeyFlow+0x594>)
 800aa6c:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 800aa70:	461a      	mov	r2, r3
 800aa72:	4623      	mov	r3, r4
 800aa74:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 800aa78:	f7f5 fc16 	bl	80002a8 <__aeabi_dsub>
 800aa7c:	4603      	mov	r3, r0
 800aa7e:	460c      	mov	r4, r1
 800aa80:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
		s2_shift = s2 - positionKeyInit.q_d3;
 800aa84:	4b80      	ldr	r3, [pc, #512]	; (800ac88 <scaraKeyFlow+0x594>)
 800aa86:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 800aa8a:	461a      	mov	r2, r3
 800aa8c:	4623      	mov	r3, r4
 800aa8e:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800aa92:	f7f5 fc09 	bl	80002a8 <__aeabi_dsub>
 800aa96:	4603      	mov	r3, r0
 800aa98:	460c      	mov	r4, r1
 800aa9a:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		s3_shift = s3 - positionKeyInit.q_theta4;
 800aa9e:	4b7a      	ldr	r3, [pc, #488]	; (800ac88 <scaraKeyFlow+0x594>)
 800aaa0:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 800aaa4:	461a      	mov	r2, r3
 800aaa6:	4623      	mov	r3, r4
 800aaa8:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800aaac:	f7f5 fbfc 	bl	80002a8 <__aeabi_dsub>
 800aab0:	4603      	mov	r3, r0
 800aab2:	460c      	mov	r4, r1
 800aab4:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8

		positionCompute.Theta1 	= myDUTY.joint.theta1_start + s0_shift*dir0;
 800aab8:	4b74      	ldr	r3, [pc, #464]	; (800ac8c <scaraKeyFlow+0x598>)
 800aaba:	f603 1328 	addw	r3, r3, #2344	; 0x928
 800aabe:	e9d3 4500 	ldrd	r4, r5, [r3]
 800aac2:	f997 30ff 	ldrsb.w	r3, [r7, #255]	; 0xff
 800aac6:	4618      	mov	r0, r3
 800aac8:	f7f5 fd3c 	bl	8000544 <__aeabi_i2d>
 800aacc:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 800aad0:	f7f5 fda2 	bl	8000618 <__aeabi_dmul>
 800aad4:	4602      	mov	r2, r0
 800aad6:	460b      	mov	r3, r1
 800aad8:	4620      	mov	r0, r4
 800aada:	4629      	mov	r1, r5
 800aadc:	f7f5 fbe6 	bl	80002ac <__adddf3>
 800aae0:	4603      	mov	r3, r0
 800aae2:	460c      	mov	r4, r1
 800aae4:	f107 0210 	add.w	r2, r7, #16
 800aae8:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		positionCompute.Theta2 	= myDUTY.joint.theta2_start + s1_shift*dir1;
 800aaec:	4b67      	ldr	r3, [pc, #412]	; (800ac8c <scaraKeyFlow+0x598>)
 800aaee:	f503 6313 	add.w	r3, r3, #2352	; 0x930
 800aaf2:	e9d3 4500 	ldrd	r4, r5, [r3]
 800aaf6:	f997 30fe 	ldrsb.w	r3, [r7, #254]	; 0xfe
 800aafa:	4618      	mov	r0, r3
 800aafc:	f7f5 fd22 	bl	8000544 <__aeabi_i2d>
 800ab00:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800ab04:	f7f5 fd88 	bl	8000618 <__aeabi_dmul>
 800ab08:	4602      	mov	r2, r0
 800ab0a:	460b      	mov	r3, r1
 800ab0c:	4620      	mov	r0, r4
 800ab0e:	4629      	mov	r1, r5
 800ab10:	f7f5 fbcc 	bl	80002ac <__adddf3>
 800ab14:	4603      	mov	r3, r0
 800ab16:	460c      	mov	r4, r1
 800ab18:	f107 0210 	add.w	r2, r7, #16
 800ab1c:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		positionCompute.D3 		= myDUTY.joint.d3_start 	+ s2_shift*dir2;
 800ab20:	4b5a      	ldr	r3, [pc, #360]	; (800ac8c <scaraKeyFlow+0x598>)
 800ab22:	f603 1338 	addw	r3, r3, #2360	; 0x938
 800ab26:	e9d3 4500 	ldrd	r4, r5, [r3]
 800ab2a:	f997 30fd 	ldrsb.w	r3, [r7, #253]	; 0xfd
 800ab2e:	4618      	mov	r0, r3
 800ab30:	f7f5 fd08 	bl	8000544 <__aeabi_i2d>
 800ab34:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800ab38:	f7f5 fd6e 	bl	8000618 <__aeabi_dmul>
 800ab3c:	4602      	mov	r2, r0
 800ab3e:	460b      	mov	r3, r1
 800ab40:	4620      	mov	r0, r4
 800ab42:	4629      	mov	r1, r5
 800ab44:	f7f5 fbb2 	bl	80002ac <__adddf3>
 800ab48:	4603      	mov	r3, r0
 800ab4a:	460c      	mov	r4, r1
 800ab4c:	f107 0210 	add.w	r2, r7, #16
 800ab50:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
		positionCompute.Theta4 	= myDUTY.joint.theta4_start + s3_shift*dir3;
 800ab54:	4b4d      	ldr	r3, [pc, #308]	; (800ac8c <scaraKeyFlow+0x598>)
 800ab56:	f503 6314 	add.w	r3, r3, #2368	; 0x940
 800ab5a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800ab5e:	f997 30fc 	ldrsb.w	r3, [r7, #252]	; 0xfc
 800ab62:	4618      	mov	r0, r3
 800ab64:	f7f5 fcee 	bl	8000544 <__aeabi_i2d>
 800ab68:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 800ab6c:	f7f5 fd54 	bl	8000618 <__aeabi_dmul>
 800ab70:	4602      	mov	r2, r0
 800ab72:	460b      	mov	r3, r1
 800ab74:	4620      	mov	r0, r4
 800ab76:	4629      	mov	r1, r5
 800ab78:	f7f5 fb98 	bl	80002ac <__adddf3>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	460c      	mov	r4, r1
 800ab80:	f107 0210 	add.w	r2, r7, #16
 800ab84:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80

		positionCompute.v_theta1 	= v0;
 800ab88:	f107 0210 	add.w	r2, r7, #16
 800ab8c:	e9d7 3446 	ldrd	r3, r4, [r7, #280]	; 0x118
 800ab90:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
		positionCompute.v_theta2 	= v1;
 800ab94:	f107 0210 	add.w	r2, r7, #16
 800ab98:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 800ab9c:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
		positionCompute.v_d3 		= v2;
 800aba0:	f107 0210 	add.w	r2, r7, #16
 800aba4:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 800aba8:	e9c2 3426 	strd	r3, r4, [r2, #152]	; 0x98
		positionCompute.v_theta4 	= v3;
 800abac:	f107 0210 	add.w	r2, r7, #16
 800abb0:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 800abb4:	e9c2 3428 	strd	r3, r4, [r2, #160]	; 0xa0

		positionCompute.q_theta1 = s0;
 800abb8:	f107 0210 	add.w	r2, r7, #16
 800abbc:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 800abc0:	e9c2 3404 	strd	r3, r4, [r2, #16]
		positionCompute.q_theta2 = s1;
 800abc4:	f107 0210 	add.w	r2, r7, #16
 800abc8:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 800abcc:	e9c2 3406 	strd	r3, r4, [r2, #24]
		positionCompute.q_d3	 = s2;
 800abd0:	f107 0210 	add.w	r2, r7, #16
 800abd4:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 800abd8:	e9c2 3408 	strd	r3, r4, [r2, #32]
		positionCompute.q_theta4 = s3;
 800abdc:	f107 0210 	add.w	r2, r7, #16
 800abe0:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 800abe4:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28

		positionCompute.total_time = myDUTY.time_total;
 800abe8:	4b28      	ldr	r3, [pc, #160]	; (800ac8c <scaraKeyFlow+0x598>)
 800abea:	f603 1348 	addw	r3, r3, #2376	; 0x948
 800abee:	e9d3 3400 	ldrd	r3, r4, [r3]
 800abf2:	f107 0210 	add.w	r2, r7, #16
 800abf6:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
		positionCompute.t		= time;
 800abfa:	f107 0210 	add.w	r2, r7, #16
 800abfe:	f107 0308 	add.w	r3, r7, #8
 800ac02:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ac06:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
		// Check workspace
		if( SCARA_STATUS_OK != scaraCheckWorkSpace4(positionCompute.Theta1,
 800ac0a:	f107 0310 	add.w	r3, r7, #16
 800ac0e:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 800ac12:	f107 0310 	add.w	r3, r7, #16
 800ac16:	ed93 6b1c 	vldr	d6, [r3, #112]	; 0x70
 800ac1a:	f107 0310 	add.w	r3, r7, #16
 800ac1e:	ed93 5b1e 	vldr	d5, [r3, #120]	; 0x78
 800ac22:	f107 0310 	add.w	r3, r7, #16
 800ac26:	ed93 4b20 	vldr	d4, [r3, #128]	; 0x80
 800ac2a:	eeb0 3a44 	vmov.f32	s6, s8
 800ac2e:	eef0 3a64 	vmov.f32	s7, s9
 800ac32:	eeb0 2a45 	vmov.f32	s4, s10
 800ac36:	eef0 2a65 	vmov.f32	s5, s11
 800ac3a:	eeb0 1a46 	vmov.f32	s2, s12
 800ac3e:	eef0 1a66 	vmov.f32	s3, s13
 800ac42:	eeb0 0a47 	vmov.f32	s0, s14
 800ac46:	eef0 0a67 	vmov.f32	s1, s15
 800ac4a:	f7fe f96d 	bl	8008f28 <scaraCheckWorkSpace4>
 800ac4e:	4603      	mov	r3, r0
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d001      	beq.n	800ac58 <scaraKeyFlow+0x564>
							 	 	 	  positionCompute.Theta2,
										  positionCompute.D3,
										  positionCompute.Theta4)) {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800ac54:	2307      	movs	r3, #7
 800ac56:	e00e      	b.n	800ac76 <scaraKeyFlow+0x582>
		} else {
			memcpy(pos_Next, &positionCompute, sizeof(SCARA_PositionTypeDef));
 800ac58:	f107 0110 	add.w	r1, r7, #16
 800ac5c:	1d3b      	adds	r3, r7, #4
 800ac5e:	22b8      	movs	r2, #184	; 0xb8
 800ac60:	6818      	ldr	r0, [r3, #0]
 800ac62:	f00a ff5d 	bl	8015b20 <memcpy>
		}
		kinematicForward(pos_Next);
 800ac66:	1d3b      	adds	r3, r7, #4
 800ac68:	6818      	ldr	r0, [r3, #0]
 800ac6a:	f7f8 fba1 	bl	80033b0 <kinematicForward>
 800ac6e:	e001      	b.n	800ac74 <scaraKeyFlow+0x580>

	} else {
		return SCARA_STATUS_ERROR_SPACE;
 800ac70:	2302      	movs	r3, #2
 800ac72:	e000      	b.n	800ac76 <scaraKeyFlow+0x582>
	}

	return SCARA_STATUS_OK;
 800ac74:	2300      	movs	r3, #0
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	f507 77c4 	add.w	r7, r7, #392	; 0x188
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800ac82:	b002      	add	sp, #8
 800ac84:	4770      	bx	lr
 800ac86:	bf00      	nop
 800ac88:	20005dd8 	.word	0x20005dd8
 800ac8c:	200053d0 	.word	0x200053d0

0800ac90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b082      	sub	sp, #8
 800ac94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ac96:	2300      	movs	r3, #0
 800ac98:	607b      	str	r3, [r7, #4]
 800ac9a:	4b12      	ldr	r3, [pc, #72]	; (800ace4 <HAL_MspInit+0x54>)
 800ac9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac9e:	4a11      	ldr	r2, [pc, #68]	; (800ace4 <HAL_MspInit+0x54>)
 800aca0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800aca4:	6453      	str	r3, [r2, #68]	; 0x44
 800aca6:	4b0f      	ldr	r3, [pc, #60]	; (800ace4 <HAL_MspInit+0x54>)
 800aca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800acae:	607b      	str	r3, [r7, #4]
 800acb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800acb2:	2300      	movs	r3, #0
 800acb4:	603b      	str	r3, [r7, #0]
 800acb6:	4b0b      	ldr	r3, [pc, #44]	; (800ace4 <HAL_MspInit+0x54>)
 800acb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acba:	4a0a      	ldr	r2, [pc, #40]	; (800ace4 <HAL_MspInit+0x54>)
 800acbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800acc0:	6413      	str	r3, [r2, #64]	; 0x40
 800acc2:	4b08      	ldr	r3, [pc, #32]	; (800ace4 <HAL_MspInit+0x54>)
 800acc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800acca:	603b      	str	r3, [r7, #0]
 800accc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800acce:	2200      	movs	r2, #0
 800acd0:	210f      	movs	r1, #15
 800acd2:	f06f 0001 	mvn.w	r0, #1
 800acd6:	f000 fb85 	bl	800b3e4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800acda:	bf00      	nop
 800acdc:	3708      	adds	r7, #8
 800acde:	46bd      	mov	sp, r7
 800ace0:	bd80      	pop	{r7, pc}
 800ace2:	bf00      	nop
 800ace4:	40023800 	.word	0x40023800

0800ace8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b08c      	sub	sp, #48	; 0x30
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800acf0:	2300      	movs	r3, #0
 800acf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800acf4:	2300      	movs	r3, #0
 800acf6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 800acf8:	2200      	movs	r2, #0
 800acfa:	6879      	ldr	r1, [r7, #4]
 800acfc:	2036      	movs	r0, #54	; 0x36
 800acfe:	f000 fb71 	bl	800b3e4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 800ad02:	2036      	movs	r0, #54	; 0x36
 800ad04:	f000 fb8a 	bl	800b41c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800ad08:	2300      	movs	r3, #0
 800ad0a:	60fb      	str	r3, [r7, #12]
 800ad0c:	4b1f      	ldr	r3, [pc, #124]	; (800ad8c <HAL_InitTick+0xa4>)
 800ad0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad10:	4a1e      	ldr	r2, [pc, #120]	; (800ad8c <HAL_InitTick+0xa4>)
 800ad12:	f043 0310 	orr.w	r3, r3, #16
 800ad16:	6413      	str	r3, [r2, #64]	; 0x40
 800ad18:	4b1c      	ldr	r3, [pc, #112]	; (800ad8c <HAL_InitTick+0xa4>)
 800ad1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad1c:	f003 0310 	and.w	r3, r3, #16
 800ad20:	60fb      	str	r3, [r7, #12]
 800ad22:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800ad24:	f107 0210 	add.w	r2, r7, #16
 800ad28:	f107 0314 	add.w	r3, r7, #20
 800ad2c:	4611      	mov	r1, r2
 800ad2e:	4618      	mov	r0, r3
 800ad30:	f002 ff16 	bl	800db60 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800ad34:	f002 feec 	bl	800db10 <HAL_RCC_GetPCLK1Freq>
 800ad38:	4603      	mov	r3, r0
 800ad3a:	005b      	lsls	r3, r3, #1
 800ad3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800ad3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad40:	4a13      	ldr	r2, [pc, #76]	; (800ad90 <HAL_InitTick+0xa8>)
 800ad42:	fba2 2303 	umull	r2, r3, r2, r3
 800ad46:	0c9b      	lsrs	r3, r3, #18
 800ad48:	3b01      	subs	r3, #1
 800ad4a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800ad4c:	4b11      	ldr	r3, [pc, #68]	; (800ad94 <HAL_InitTick+0xac>)
 800ad4e:	4a12      	ldr	r2, [pc, #72]	; (800ad98 <HAL_InitTick+0xb0>)
 800ad50:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800ad52:	4b10      	ldr	r3, [pc, #64]	; (800ad94 <HAL_InitTick+0xac>)
 800ad54:	f240 32e7 	movw	r2, #999	; 0x3e7
 800ad58:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800ad5a:	4a0e      	ldr	r2, [pc, #56]	; (800ad94 <HAL_InitTick+0xac>)
 800ad5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad5e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800ad60:	4b0c      	ldr	r3, [pc, #48]	; (800ad94 <HAL_InitTick+0xac>)
 800ad62:	2200      	movs	r2, #0
 800ad64:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ad66:	4b0b      	ldr	r3, [pc, #44]	; (800ad94 <HAL_InitTick+0xac>)
 800ad68:	2200      	movs	r2, #0
 800ad6a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800ad6c:	4809      	ldr	r0, [pc, #36]	; (800ad94 <HAL_InitTick+0xac>)
 800ad6e:	f002 ff29 	bl	800dbc4 <HAL_TIM_Base_Init>
 800ad72:	4603      	mov	r3, r0
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d104      	bne.n	800ad82 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800ad78:	4806      	ldr	r0, [pc, #24]	; (800ad94 <HAL_InitTick+0xac>)
 800ad7a:	f002 ff4e 	bl	800dc1a <HAL_TIM_Base_Start_IT>
 800ad7e:	4603      	mov	r3, r0
 800ad80:	e000      	b.n	800ad84 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800ad82:	2301      	movs	r3, #1
}
 800ad84:	4618      	mov	r0, r3
 800ad86:	3730      	adds	r7, #48	; 0x30
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	bd80      	pop	{r7, pc}
 800ad8c:	40023800 	.word	0x40023800
 800ad90:	431bde83 	.word	0x431bde83
 800ad94:	200060b8 	.word	0x200060b8
 800ad98:	40001000 	.word	0x40001000

0800ad9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800ad9c:	b480      	push	{r7}
 800ad9e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800ada0:	bf00      	nop
 800ada2:	46bd      	mov	sp, r7
 800ada4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada8:	4770      	bx	lr
	...

0800adac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  LOG_REPORT("ic.c: HARDFAULT ERROR", __LINE__);
 800adb0:	2164      	movs	r1, #100	; 0x64
 800adb2:	4802      	ldr	r0, [pc, #8]	; (800adbc <HardFault_Handler+0x10>)
 800adb4:	f7f6 fe8a 	bl	8001acc <LOG_REPORT>
 800adb8:	e7fa      	b.n	800adb0 <HardFault_Handler+0x4>
 800adba:	bf00      	nop
 800adbc:	0801bdc0 	.word	0x0801bdc0

0800adc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  LOG_REPORT("ic.c: MEMORY ERROR", __LINE__);
 800adc4:	2174      	movs	r1, #116	; 0x74
 800adc6:	4802      	ldr	r0, [pc, #8]	; (800add0 <MemManage_Handler+0x10>)
 800adc8:	f7f6 fe80 	bl	8001acc <LOG_REPORT>
 800adcc:	e7fa      	b.n	800adc4 <MemManage_Handler+0x4>
 800adce:	bf00      	nop
 800add0:	0801bdd8 	.word	0x0801bdd8

0800add4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  LOG_REPORT("ic.c: BUS ERROR", __LINE__);
 800add8:	2184      	movs	r1, #132	; 0x84
 800adda:	4802      	ldr	r0, [pc, #8]	; (800ade4 <BusFault_Handler+0x10>)
 800addc:	f7f6 fe76 	bl	8001acc <LOG_REPORT>
 800ade0:	e7fa      	b.n	800add8 <BusFault_Handler+0x4>
 800ade2:	bf00      	nop
 800ade4:	0801bdec 	.word	0x0801bdec

0800ade8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800ade8:	b480      	push	{r7}
 800adea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800adec:	e7fe      	b.n	800adec <UsageFault_Handler+0x4>

0800adee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800adee:	b480      	push	{r7}
 800adf0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800adf2:	bf00      	nop
 800adf4:	46bd      	mov	sp, r7
 800adf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfa:	4770      	bx	lr

0800adfc <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 800ae00:	4802      	ldr	r0, [pc, #8]	; (800ae0c <DMA1_Stream4_IRQHandler+0x10>)
 800ae02:	f000 fc41 	bl	800b688 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800ae06:	bf00      	nop
 800ae08:	bd80      	pop	{r7, pc}
 800ae0a:	bf00      	nop
 800ae0c:	20006178 	.word	0x20006178

0800ae10 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800ae14:	4802      	ldr	r0, [pc, #8]	; (800ae20 <UART4_IRQHandler+0x10>)
 800ae16:	f003 fa3f 	bl	800e298 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800ae1a:	bf00      	nop
 800ae1c:	bd80      	pop	{r7, pc}
 800ae1e:	bf00      	nop
 800ae20:	20006138 	.word	0x20006138

0800ae24 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800ae28:	4802      	ldr	r0, [pc, #8]	; (800ae34 <TIM6_DAC_IRQHandler+0x10>)
 800ae2a:	f002 ff1a 	bl	800dc62 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800ae2e:	bf00      	nop
 800ae30:	bd80      	pop	{r7, pc}
 800ae32:	bf00      	nop
 800ae34:	200060b8 	.word	0x200060b8

0800ae38 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	osSignalSet(defaultTaskHandle, 0x01);
 800ae3c:	4b05      	ldr	r3, [pc, #20]	; (800ae54 <TIM7_IRQHandler+0x1c>)
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	2101      	movs	r1, #1
 800ae42:	4618      	mov	r0, r3
 800ae44:	f006 ffe8 	bl	8011e18 <osSignalSet>
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800ae48:	4803      	ldr	r0, [pc, #12]	; (800ae58 <TIM7_IRQHandler+0x20>)
 800ae4a:	f002 ff0a 	bl	800dc62 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
  /* USER CODE END TIM7_IRQn 1 */
}
 800ae4e:	bf00      	nop
 800ae50:	bd80      	pop	{r7, pc}
 800ae52:	bf00      	nop
 800ae54:	2000530c 	.word	0x2000530c
 800ae58:	200060f8 	.word	0x200060f8

0800ae5c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800ae60:	4802      	ldr	r0, [pc, #8]	; (800ae6c <OTG_FS_IRQHandler+0x10>)
 800ae62:	f001 f9e1 	bl	800c228 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800ae66:	bf00      	nop
 800ae68:	bd80      	pop	{r7, pc}
 800ae6a:	bf00      	nop
 800ae6c:	20006a80 	.word	0x20006a80

0800ae70 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b084      	sub	sp, #16
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800ae78:	4b11      	ldr	r3, [pc, #68]	; (800aec0 <_sbrk+0x50>)
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d102      	bne.n	800ae86 <_sbrk+0x16>
		heap_end = &end;
 800ae80:	4b0f      	ldr	r3, [pc, #60]	; (800aec0 <_sbrk+0x50>)
 800ae82:	4a10      	ldr	r2, [pc, #64]	; (800aec4 <_sbrk+0x54>)
 800ae84:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800ae86:	4b0e      	ldr	r3, [pc, #56]	; (800aec0 <_sbrk+0x50>)
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800ae8c:	4b0c      	ldr	r3, [pc, #48]	; (800aec0 <_sbrk+0x50>)
 800ae8e:	681a      	ldr	r2, [r3, #0]
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	4413      	add	r3, r2
 800ae94:	466a      	mov	r2, sp
 800ae96:	4293      	cmp	r3, r2
 800ae98:	d907      	bls.n	800aeaa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800ae9a:	f00a fe07 	bl	8015aac <__errno>
 800ae9e:	4602      	mov	r2, r0
 800aea0:	230c      	movs	r3, #12
 800aea2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800aea4:	f04f 33ff 	mov.w	r3, #4294967295
 800aea8:	e006      	b.n	800aeb8 <_sbrk+0x48>
	}

	heap_end += incr;
 800aeaa:	4b05      	ldr	r3, [pc, #20]	; (800aec0 <_sbrk+0x50>)
 800aeac:	681a      	ldr	r2, [r3, #0]
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	4413      	add	r3, r2
 800aeb2:	4a03      	ldr	r2, [pc, #12]	; (800aec0 <_sbrk+0x50>)
 800aeb4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
}
 800aeb8:	4618      	mov	r0, r3
 800aeba:	3710      	adds	r7, #16
 800aebc:	46bd      	mov	sp, r7
 800aebe:	bd80      	pop	{r7, pc}
 800aec0:	200014ac 	.word	0x200014ac
 800aec4:	20006e90 	.word	0x20006e90

0800aec8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800aec8:	b480      	push	{r7}
 800aeca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800aecc:	4b08      	ldr	r3, [pc, #32]	; (800aef0 <SystemInit+0x28>)
 800aece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aed2:	4a07      	ldr	r2, [pc, #28]	; (800aef0 <SystemInit+0x28>)
 800aed4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800aed8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800aedc:	4b04      	ldr	r3, [pc, #16]	; (800aef0 <SystemInit+0x28>)
 800aede:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800aee2:	609a      	str	r2, [r3, #8]
#endif
}
 800aee4:	bf00      	nop
 800aee6:	46bd      	mov	sp, r7
 800aee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeec:	4770      	bx	lr
 800aeee:	bf00      	nop
 800aef0:	e000ed00 	.word	0xe000ed00

0800aef4 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b082      	sub	sp, #8
 800aef8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800aefa:	463b      	mov	r3, r7
 800aefc:	2200      	movs	r2, #0
 800aefe:	601a      	str	r2, [r3, #0]
 800af00:	605a      	str	r2, [r3, #4]

  htim7.Instance = TIM7;
 800af02:	4b15      	ldr	r3, [pc, #84]	; (800af58 <MX_TIM7_Init+0x64>)
 800af04:	4a15      	ldr	r2, [pc, #84]	; (800af5c <MX_TIM7_Init+0x68>)
 800af06:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 800af08:	4b13      	ldr	r3, [pc, #76]	; (800af58 <MX_TIM7_Init+0x64>)
 800af0a:	2253      	movs	r2, #83	; 0x53
 800af0c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800af0e:	4b12      	ldr	r3, [pc, #72]	; (800af58 <MX_TIM7_Init+0x64>)
 800af10:	2200      	movs	r2, #0
 800af12:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 800af14:	4b10      	ldr	r3, [pc, #64]	; (800af58 <MX_TIM7_Init+0x64>)
 800af16:	f242 720f 	movw	r2, #9999	; 0x270f
 800af1a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800af1c:	4b0e      	ldr	r3, [pc, #56]	; (800af58 <MX_TIM7_Init+0x64>)
 800af1e:	2200      	movs	r2, #0
 800af20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800af22:	480d      	ldr	r0, [pc, #52]	; (800af58 <MX_TIM7_Init+0x64>)
 800af24:	f002 fe4e 	bl	800dbc4 <HAL_TIM_Base_Init>
 800af28:	4603      	mov	r3, r0
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d001      	beq.n	800af32 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800af2e:	f7f8 fe0b 	bl	8003b48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800af32:	2300      	movs	r3, #0
 800af34:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800af36:	2300      	movs	r3, #0
 800af38:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800af3a:	463b      	mov	r3, r7
 800af3c:	4619      	mov	r1, r3
 800af3e:	4806      	ldr	r0, [pc, #24]	; (800af58 <MX_TIM7_Init+0x64>)
 800af40:	f003 f860 	bl	800e004 <HAL_TIMEx_MasterConfigSynchronization>
 800af44:	4603      	mov	r3, r0
 800af46:	2b00      	cmp	r3, #0
 800af48:	d001      	beq.n	800af4e <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800af4a:	f7f8 fdfd 	bl	8003b48 <Error_Handler>
  }

}
 800af4e:	bf00      	nop
 800af50:	3708      	adds	r7, #8
 800af52:	46bd      	mov	sp, r7
 800af54:	bd80      	pop	{r7, pc}
 800af56:	bf00      	nop
 800af58:	200060f8 	.word	0x200060f8
 800af5c:	40001400 	.word	0x40001400

0800af60 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b084      	sub	sp, #16
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	4a0e      	ldr	r2, [pc, #56]	; (800afa8 <HAL_TIM_Base_MspInit+0x48>)
 800af6e:	4293      	cmp	r3, r2
 800af70:	d115      	bne.n	800af9e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800af72:	2300      	movs	r3, #0
 800af74:	60fb      	str	r3, [r7, #12]
 800af76:	4b0d      	ldr	r3, [pc, #52]	; (800afac <HAL_TIM_Base_MspInit+0x4c>)
 800af78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af7a:	4a0c      	ldr	r2, [pc, #48]	; (800afac <HAL_TIM_Base_MspInit+0x4c>)
 800af7c:	f043 0320 	orr.w	r3, r3, #32
 800af80:	6413      	str	r3, [r2, #64]	; 0x40
 800af82:	4b0a      	ldr	r3, [pc, #40]	; (800afac <HAL_TIM_Base_MspInit+0x4c>)
 800af84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af86:	f003 0320 	and.w	r3, r3, #32
 800af8a:	60fb      	str	r3, [r7, #12]
 800af8c:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 800af8e:	2200      	movs	r2, #0
 800af90:	2105      	movs	r1, #5
 800af92:	2037      	movs	r0, #55	; 0x37
 800af94:	f000 fa26 	bl	800b3e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800af98:	2037      	movs	r0, #55	; 0x37
 800af9a:	f000 fa3f 	bl	800b41c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800af9e:	bf00      	nop
 800afa0:	3710      	adds	r7, #16
 800afa2:	46bd      	mov	sp, r7
 800afa4:	bd80      	pop	{r7, pc}
 800afa6:	bf00      	nop
 800afa8:	40001400 	.word	0x40001400
 800afac:	40023800 	.word	0x40023800

0800afb0 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
DMA_HandleTypeDef hdma_uart4_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 800afb4:	4b11      	ldr	r3, [pc, #68]	; (800affc <MX_UART4_Init+0x4c>)
 800afb6:	4a12      	ldr	r2, [pc, #72]	; (800b000 <MX_UART4_Init+0x50>)
 800afb8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800afba:	4b10      	ldr	r3, [pc, #64]	; (800affc <MX_UART4_Init+0x4c>)
 800afbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800afc0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800afc2:	4b0e      	ldr	r3, [pc, #56]	; (800affc <MX_UART4_Init+0x4c>)
 800afc4:	2200      	movs	r2, #0
 800afc6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800afc8:	4b0c      	ldr	r3, [pc, #48]	; (800affc <MX_UART4_Init+0x4c>)
 800afca:	2200      	movs	r2, #0
 800afcc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800afce:	4b0b      	ldr	r3, [pc, #44]	; (800affc <MX_UART4_Init+0x4c>)
 800afd0:	2200      	movs	r2, #0
 800afd2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800afd4:	4b09      	ldr	r3, [pc, #36]	; (800affc <MX_UART4_Init+0x4c>)
 800afd6:	220c      	movs	r2, #12
 800afd8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800afda:	4b08      	ldr	r3, [pc, #32]	; (800affc <MX_UART4_Init+0x4c>)
 800afdc:	2200      	movs	r2, #0
 800afde:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800afe0:	4b06      	ldr	r3, [pc, #24]	; (800affc <MX_UART4_Init+0x4c>)
 800afe2:	2200      	movs	r2, #0
 800afe4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800afe6:	4805      	ldr	r0, [pc, #20]	; (800affc <MX_UART4_Init+0x4c>)
 800afe8:	f003 f89c 	bl	800e124 <HAL_UART_Init>
 800afec:	4603      	mov	r3, r0
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d001      	beq.n	800aff6 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800aff2:	f7f8 fda9 	bl	8003b48 <Error_Handler>
  }

}
 800aff6:	bf00      	nop
 800aff8:	bd80      	pop	{r7, pc}
 800affa:	bf00      	nop
 800affc:	20006138 	.word	0x20006138
 800b000:	40004c00 	.word	0x40004c00

0800b004 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b08a      	sub	sp, #40	; 0x28
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b00c:	f107 0314 	add.w	r3, r7, #20
 800b010:	2200      	movs	r2, #0
 800b012:	601a      	str	r2, [r3, #0]
 800b014:	605a      	str	r2, [r3, #4]
 800b016:	609a      	str	r2, [r3, #8]
 800b018:	60da      	str	r2, [r3, #12]
 800b01a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	4a34      	ldr	r2, [pc, #208]	; (800b0f4 <HAL_UART_MspInit+0xf0>)
 800b022:	4293      	cmp	r3, r2
 800b024:	d161      	bne.n	800b0ea <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800b026:	2300      	movs	r3, #0
 800b028:	613b      	str	r3, [r7, #16]
 800b02a:	4b33      	ldr	r3, [pc, #204]	; (800b0f8 <HAL_UART_MspInit+0xf4>)
 800b02c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b02e:	4a32      	ldr	r2, [pc, #200]	; (800b0f8 <HAL_UART_MspInit+0xf4>)
 800b030:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b034:	6413      	str	r3, [r2, #64]	; 0x40
 800b036:	4b30      	ldr	r3, [pc, #192]	; (800b0f8 <HAL_UART_MspInit+0xf4>)
 800b038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b03a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b03e:	613b      	str	r3, [r7, #16]
 800b040:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b042:	2300      	movs	r3, #0
 800b044:	60fb      	str	r3, [r7, #12]
 800b046:	4b2c      	ldr	r3, [pc, #176]	; (800b0f8 <HAL_UART_MspInit+0xf4>)
 800b048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b04a:	4a2b      	ldr	r2, [pc, #172]	; (800b0f8 <HAL_UART_MspInit+0xf4>)
 800b04c:	f043 0301 	orr.w	r3, r3, #1
 800b050:	6313      	str	r3, [r2, #48]	; 0x30
 800b052:	4b29      	ldr	r3, [pc, #164]	; (800b0f8 <HAL_UART_MspInit+0xf4>)
 800b054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b056:	f003 0301 	and.w	r3, r3, #1
 800b05a:	60fb      	str	r3, [r7, #12]
 800b05c:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration    
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800b05e:	2303      	movs	r3, #3
 800b060:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b062:	2302      	movs	r3, #2
 800b064:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b066:	2301      	movs	r3, #1
 800b068:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b06a:	2303      	movs	r3, #3
 800b06c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800b06e:	2308      	movs	r3, #8
 800b070:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b072:	f107 0314 	add.w	r3, r7, #20
 800b076:	4619      	mov	r1, r3
 800b078:	4820      	ldr	r0, [pc, #128]	; (800b0fc <HAL_UART_MspInit+0xf8>)
 800b07a:	f000 fd7b 	bl	800bb74 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 800b07e:	4b20      	ldr	r3, [pc, #128]	; (800b100 <HAL_UART_MspInit+0xfc>)
 800b080:	4a20      	ldr	r2, [pc, #128]	; (800b104 <HAL_UART_MspInit+0x100>)
 800b082:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 800b084:	4b1e      	ldr	r3, [pc, #120]	; (800b100 <HAL_UART_MspInit+0xfc>)
 800b086:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b08a:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b08c:	4b1c      	ldr	r3, [pc, #112]	; (800b100 <HAL_UART_MspInit+0xfc>)
 800b08e:	2240      	movs	r2, #64	; 0x40
 800b090:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b092:	4b1b      	ldr	r3, [pc, #108]	; (800b100 <HAL_UART_MspInit+0xfc>)
 800b094:	2200      	movs	r2, #0
 800b096:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800b098:	4b19      	ldr	r3, [pc, #100]	; (800b100 <HAL_UART_MspInit+0xfc>)
 800b09a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b09e:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b0a0:	4b17      	ldr	r3, [pc, #92]	; (800b100 <HAL_UART_MspInit+0xfc>)
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b0a6:	4b16      	ldr	r3, [pc, #88]	; (800b100 <HAL_UART_MspInit+0xfc>)
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800b0ac:	4b14      	ldr	r3, [pc, #80]	; (800b100 <HAL_UART_MspInit+0xfc>)
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800b0b2:	4b13      	ldr	r3, [pc, #76]	; (800b100 <HAL_UART_MspInit+0xfc>)
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b0b8:	4b11      	ldr	r3, [pc, #68]	; (800b100 <HAL_UART_MspInit+0xfc>)
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800b0be:	4810      	ldr	r0, [pc, #64]	; (800b100 <HAL_UART_MspInit+0xfc>)
 800b0c0:	f000 f9ba 	bl	800b438 <HAL_DMA_Init>
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d001      	beq.n	800b0ce <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800b0ca:	f7f8 fd3d 	bl	8003b48 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	4a0b      	ldr	r2, [pc, #44]	; (800b100 <HAL_UART_MspInit+0xfc>)
 800b0d2:	631a      	str	r2, [r3, #48]	; 0x30
 800b0d4:	4a0a      	ldr	r2, [pc, #40]	; (800b100 <HAL_UART_MspInit+0xfc>)
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800b0da:	2200      	movs	r2, #0
 800b0dc:	2105      	movs	r1, #5
 800b0de:	2034      	movs	r0, #52	; 0x34
 800b0e0:	f000 f980 	bl	800b3e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800b0e4:	2034      	movs	r0, #52	; 0x34
 800b0e6:	f000 f999 	bl	800b41c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 800b0ea:	bf00      	nop
 800b0ec:	3728      	adds	r7, #40	; 0x28
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	bd80      	pop	{r7, pc}
 800b0f2:	bf00      	nop
 800b0f4:	40004c00 	.word	0x40004c00
 800b0f8:	40023800 	.word	0x40023800
 800b0fc:	40020000 	.word	0x40020000
 800b100:	20006178 	.word	0x20006178
 800b104:	40026070 	.word	0x40026070

0800b108 <HAL_UART_TxCpltCallback>:
  /* USER CODE END UART4_MspDeInit 1 */
  }
} 

/* USER CODE BEGIN 1 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800b108:	b580      	push	{r7, lr}
 800b10a:	b084      	sub	sp, #16
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
	if (UART4 == huart->Instance) {
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	4a0c      	ldr	r2, [pc, #48]	; (800b148 <HAL_UART_TxCpltCallback+0x40>)
 800b116:	4293      	cmp	r3, r2
 800b118:	d112      	bne.n	800b140 <HAL_UART_TxCpltCallback+0x38>
		uint16_t size_dma;
		size_dma = ringBuff_PopArray(&uart_tx_ringbuff, log_uart_dma_buff, LOG_BUFFER_SIZE);
 800b11a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b11e:	490b      	ldr	r1, [pc, #44]	; (800b14c <HAL_UART_TxCpltCallback+0x44>)
 800b120:	480b      	ldr	r0, [pc, #44]	; (800b150 <HAL_UART_TxCpltCallback+0x48>)
 800b122:	f7f8 fdb0 	bl	8003c86 <ringBuff_PopArray>
 800b126:	4603      	mov	r3, r0
 800b128:	81fb      	strh	r3, [r7, #14]
		if (0 == size_dma) {
 800b12a:	89fb      	ldrh	r3, [r7, #14]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d006      	beq.n	800b13e <HAL_UART_TxCpltCallback+0x36>
			return;
		}
		HAL_UART_Transmit_DMA(&huart4, log_uart_dma_buff, size_dma);
 800b130:	89fb      	ldrh	r3, [r7, #14]
 800b132:	461a      	mov	r2, r3
 800b134:	4905      	ldr	r1, [pc, #20]	; (800b14c <HAL_UART_TxCpltCallback+0x44>)
 800b136:	4807      	ldr	r0, [pc, #28]	; (800b154 <HAL_UART_TxCpltCallback+0x4c>)
 800b138:	f003 f842 	bl	800e1c0 <HAL_UART_Transmit_DMA>
 800b13c:	e000      	b.n	800b140 <HAL_UART_TxCpltCallback+0x38>
			return;
 800b13e:	bf00      	nop
	}
}
 800b140:	3710      	adds	r7, #16
 800b142:	46bd      	mov	sp, r7
 800b144:	bd80      	pop	{r7, pc}
 800b146:	bf00      	nop
 800b148:	40004c00 	.word	0x40004c00
 800b14c:	2000520c 	.word	0x2000520c
 800b150:	20000894 	.word	0x20000894
 800b154:	20006138 	.word	0x20006138

0800b158 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800b158:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b190 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800b15c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800b15e:	e003      	b.n	800b168 <LoopCopyDataInit>

0800b160 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800b160:	4b0c      	ldr	r3, [pc, #48]	; (800b194 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800b162:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800b164:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800b166:	3104      	adds	r1, #4

0800b168 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800b168:	480b      	ldr	r0, [pc, #44]	; (800b198 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800b16a:	4b0c      	ldr	r3, [pc, #48]	; (800b19c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800b16c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800b16e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800b170:	d3f6      	bcc.n	800b160 <CopyDataInit>
  ldr  r2, =_sbss
 800b172:	4a0b      	ldr	r2, [pc, #44]	; (800b1a0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800b174:	e002      	b.n	800b17c <LoopFillZerobss>

0800b176 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800b176:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800b178:	f842 3b04 	str.w	r3, [r2], #4

0800b17c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800b17c:	4b09      	ldr	r3, [pc, #36]	; (800b1a4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800b17e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800b180:	d3f9      	bcc.n	800b176 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800b182:	f7ff fea1 	bl	800aec8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b186:	f00a fc97 	bl	8015ab8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b18a:	f7f8 fc4b 	bl	8003a24 <main>
  bx  lr    
 800b18e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800b190:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800b194:	0801c3e0 	.word	0x0801c3e0
  ldr  r0, =_sdata
 800b198:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800b19c:	20001034 	.word	0x20001034
  ldr  r2, =_sbss
 800b1a0:	20001038 	.word	0x20001038
  ldr  r3, = _ebss
 800b1a4:	20006e8c 	.word	0x20006e8c

0800b1a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b1a8:	e7fe      	b.n	800b1a8 <ADC_IRQHandler>
	...

0800b1ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800b1b0:	4b0e      	ldr	r3, [pc, #56]	; (800b1ec <HAL_Init+0x40>)
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	4a0d      	ldr	r2, [pc, #52]	; (800b1ec <HAL_Init+0x40>)
 800b1b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b1ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800b1bc:	4b0b      	ldr	r3, [pc, #44]	; (800b1ec <HAL_Init+0x40>)
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	4a0a      	ldr	r2, [pc, #40]	; (800b1ec <HAL_Init+0x40>)
 800b1c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b1c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800b1c8:	4b08      	ldr	r3, [pc, #32]	; (800b1ec <HAL_Init+0x40>)
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	4a07      	ldr	r2, [pc, #28]	; (800b1ec <HAL_Init+0x40>)
 800b1ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b1d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b1d4:	2003      	movs	r0, #3
 800b1d6:	f000 f8fa 	bl	800b3ce <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800b1da:	2000      	movs	r0, #0
 800b1dc:	f7ff fd84 	bl	800ace8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800b1e0:	f7ff fd56 	bl	800ac90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800b1e4:	2300      	movs	r3, #0
}
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	bd80      	pop	{r7, pc}
 800b1ea:	bf00      	nop
 800b1ec:	40023c00 	.word	0x40023c00

0800b1f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b1f0:	b480      	push	{r7}
 800b1f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800b1f4:	4b06      	ldr	r3, [pc, #24]	; (800b210 <HAL_IncTick+0x20>)
 800b1f6:	781b      	ldrb	r3, [r3, #0]
 800b1f8:	461a      	mov	r2, r3
 800b1fa:	4b06      	ldr	r3, [pc, #24]	; (800b214 <HAL_IncTick+0x24>)
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	4413      	add	r3, r2
 800b200:	4a04      	ldr	r2, [pc, #16]	; (800b214 <HAL_IncTick+0x24>)
 800b202:	6013      	str	r3, [r2, #0]
}
 800b204:	bf00      	nop
 800b206:	46bd      	mov	sp, r7
 800b208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20c:	4770      	bx	lr
 800b20e:	bf00      	nop
 800b210:	20000ce8 	.word	0x20000ce8
 800b214:	200061d8 	.word	0x200061d8

0800b218 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b218:	b480      	push	{r7}
 800b21a:	af00      	add	r7, sp, #0
  return uwTick;
 800b21c:	4b03      	ldr	r3, [pc, #12]	; (800b22c <HAL_GetTick+0x14>)
 800b21e:	681b      	ldr	r3, [r3, #0]
}
 800b220:	4618      	mov	r0, r3
 800b222:	46bd      	mov	sp, r7
 800b224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b228:	4770      	bx	lr
 800b22a:	bf00      	nop
 800b22c:	200061d8 	.word	0x200061d8

0800b230 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b230:	b580      	push	{r7, lr}
 800b232:	b084      	sub	sp, #16
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b238:	f7ff ffee 	bl	800b218 <HAL_GetTick>
 800b23c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b248:	d005      	beq.n	800b256 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800b24a:	4b09      	ldr	r3, [pc, #36]	; (800b270 <HAL_Delay+0x40>)
 800b24c:	781b      	ldrb	r3, [r3, #0]
 800b24e:	461a      	mov	r2, r3
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	4413      	add	r3, r2
 800b254:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800b256:	bf00      	nop
 800b258:	f7ff ffde 	bl	800b218 <HAL_GetTick>
 800b25c:	4602      	mov	r2, r0
 800b25e:	68bb      	ldr	r3, [r7, #8]
 800b260:	1ad3      	subs	r3, r2, r3
 800b262:	68fa      	ldr	r2, [r7, #12]
 800b264:	429a      	cmp	r2, r3
 800b266:	d8f7      	bhi.n	800b258 <HAL_Delay+0x28>
  {
  }
}
 800b268:	bf00      	nop
 800b26a:	3710      	adds	r7, #16
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bd80      	pop	{r7, pc}
 800b270:	20000ce8 	.word	0x20000ce8

0800b274 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b274:	b480      	push	{r7}
 800b276:	b085      	sub	sp, #20
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	f003 0307 	and.w	r3, r3, #7
 800b282:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b284:	4b0c      	ldr	r3, [pc, #48]	; (800b2b8 <__NVIC_SetPriorityGrouping+0x44>)
 800b286:	68db      	ldr	r3, [r3, #12]
 800b288:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b28a:	68ba      	ldr	r2, [r7, #8]
 800b28c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800b290:	4013      	ands	r3, r2
 800b292:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b298:	68bb      	ldr	r3, [r7, #8]
 800b29a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800b29c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800b2a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b2a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b2a6:	4a04      	ldr	r2, [pc, #16]	; (800b2b8 <__NVIC_SetPriorityGrouping+0x44>)
 800b2a8:	68bb      	ldr	r3, [r7, #8]
 800b2aa:	60d3      	str	r3, [r2, #12]
}
 800b2ac:	bf00      	nop
 800b2ae:	3714      	adds	r7, #20
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b6:	4770      	bx	lr
 800b2b8:	e000ed00 	.word	0xe000ed00

0800b2bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800b2bc:	b480      	push	{r7}
 800b2be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b2c0:	4b04      	ldr	r3, [pc, #16]	; (800b2d4 <__NVIC_GetPriorityGrouping+0x18>)
 800b2c2:	68db      	ldr	r3, [r3, #12]
 800b2c4:	0a1b      	lsrs	r3, r3, #8
 800b2c6:	f003 0307 	and.w	r3, r3, #7
}
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d2:	4770      	bx	lr
 800b2d4:	e000ed00 	.word	0xe000ed00

0800b2d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b2d8:	b480      	push	{r7}
 800b2da:	b083      	sub	sp, #12
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	4603      	mov	r3, r0
 800b2e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b2e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	db0b      	blt.n	800b302 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b2ea:	79fb      	ldrb	r3, [r7, #7]
 800b2ec:	f003 021f 	and.w	r2, r3, #31
 800b2f0:	4907      	ldr	r1, [pc, #28]	; (800b310 <__NVIC_EnableIRQ+0x38>)
 800b2f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b2f6:	095b      	lsrs	r3, r3, #5
 800b2f8:	2001      	movs	r0, #1
 800b2fa:	fa00 f202 	lsl.w	r2, r0, r2
 800b2fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800b302:	bf00      	nop
 800b304:	370c      	adds	r7, #12
 800b306:	46bd      	mov	sp, r7
 800b308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30c:	4770      	bx	lr
 800b30e:	bf00      	nop
 800b310:	e000e100 	.word	0xe000e100

0800b314 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800b314:	b480      	push	{r7}
 800b316:	b083      	sub	sp, #12
 800b318:	af00      	add	r7, sp, #0
 800b31a:	4603      	mov	r3, r0
 800b31c:	6039      	str	r1, [r7, #0]
 800b31e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b324:	2b00      	cmp	r3, #0
 800b326:	db0a      	blt.n	800b33e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b328:	683b      	ldr	r3, [r7, #0]
 800b32a:	b2da      	uxtb	r2, r3
 800b32c:	490c      	ldr	r1, [pc, #48]	; (800b360 <__NVIC_SetPriority+0x4c>)
 800b32e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b332:	0112      	lsls	r2, r2, #4
 800b334:	b2d2      	uxtb	r2, r2
 800b336:	440b      	add	r3, r1
 800b338:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800b33c:	e00a      	b.n	800b354 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	b2da      	uxtb	r2, r3
 800b342:	4908      	ldr	r1, [pc, #32]	; (800b364 <__NVIC_SetPriority+0x50>)
 800b344:	79fb      	ldrb	r3, [r7, #7]
 800b346:	f003 030f 	and.w	r3, r3, #15
 800b34a:	3b04      	subs	r3, #4
 800b34c:	0112      	lsls	r2, r2, #4
 800b34e:	b2d2      	uxtb	r2, r2
 800b350:	440b      	add	r3, r1
 800b352:	761a      	strb	r2, [r3, #24]
}
 800b354:	bf00      	nop
 800b356:	370c      	adds	r7, #12
 800b358:	46bd      	mov	sp, r7
 800b35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35e:	4770      	bx	lr
 800b360:	e000e100 	.word	0xe000e100
 800b364:	e000ed00 	.word	0xe000ed00

0800b368 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b368:	b480      	push	{r7}
 800b36a:	b089      	sub	sp, #36	; 0x24
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	60f8      	str	r0, [r7, #12]
 800b370:	60b9      	str	r1, [r7, #8]
 800b372:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	f003 0307 	and.w	r3, r3, #7
 800b37a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b37c:	69fb      	ldr	r3, [r7, #28]
 800b37e:	f1c3 0307 	rsb	r3, r3, #7
 800b382:	2b04      	cmp	r3, #4
 800b384:	bf28      	it	cs
 800b386:	2304      	movcs	r3, #4
 800b388:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b38a:	69fb      	ldr	r3, [r7, #28]
 800b38c:	3304      	adds	r3, #4
 800b38e:	2b06      	cmp	r3, #6
 800b390:	d902      	bls.n	800b398 <NVIC_EncodePriority+0x30>
 800b392:	69fb      	ldr	r3, [r7, #28]
 800b394:	3b03      	subs	r3, #3
 800b396:	e000      	b.n	800b39a <NVIC_EncodePriority+0x32>
 800b398:	2300      	movs	r3, #0
 800b39a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b39c:	f04f 32ff 	mov.w	r2, #4294967295
 800b3a0:	69bb      	ldr	r3, [r7, #24]
 800b3a2:	fa02 f303 	lsl.w	r3, r2, r3
 800b3a6:	43da      	mvns	r2, r3
 800b3a8:	68bb      	ldr	r3, [r7, #8]
 800b3aa:	401a      	ands	r2, r3
 800b3ac:	697b      	ldr	r3, [r7, #20]
 800b3ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b3b0:	f04f 31ff 	mov.w	r1, #4294967295
 800b3b4:	697b      	ldr	r3, [r7, #20]
 800b3b6:	fa01 f303 	lsl.w	r3, r1, r3
 800b3ba:	43d9      	mvns	r1, r3
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b3c0:	4313      	orrs	r3, r2
         );
}
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	3724      	adds	r7, #36	; 0x24
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3cc:	4770      	bx	lr

0800b3ce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b3ce:	b580      	push	{r7, lr}
 800b3d0:	b082      	sub	sp, #8
 800b3d2:	af00      	add	r7, sp, #0
 800b3d4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b3d6:	6878      	ldr	r0, [r7, #4]
 800b3d8:	f7ff ff4c 	bl	800b274 <__NVIC_SetPriorityGrouping>
}
 800b3dc:	bf00      	nop
 800b3de:	3708      	adds	r7, #8
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	bd80      	pop	{r7, pc}

0800b3e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b086      	sub	sp, #24
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	60b9      	str	r1, [r7, #8]
 800b3ee:	607a      	str	r2, [r7, #4]
 800b3f0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800b3f6:	f7ff ff61 	bl	800b2bc <__NVIC_GetPriorityGrouping>
 800b3fa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b3fc:	687a      	ldr	r2, [r7, #4]
 800b3fe:	68b9      	ldr	r1, [r7, #8]
 800b400:	6978      	ldr	r0, [r7, #20]
 800b402:	f7ff ffb1 	bl	800b368 <NVIC_EncodePriority>
 800b406:	4602      	mov	r2, r0
 800b408:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b40c:	4611      	mov	r1, r2
 800b40e:	4618      	mov	r0, r3
 800b410:	f7ff ff80 	bl	800b314 <__NVIC_SetPriority>
}
 800b414:	bf00      	nop
 800b416:	3718      	adds	r7, #24
 800b418:	46bd      	mov	sp, r7
 800b41a:	bd80      	pop	{r7, pc}

0800b41c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b082      	sub	sp, #8
 800b420:	af00      	add	r7, sp, #0
 800b422:	4603      	mov	r3, r0
 800b424:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b42a:	4618      	mov	r0, r3
 800b42c:	f7ff ff54 	bl	800b2d8 <__NVIC_EnableIRQ>
}
 800b430:	bf00      	nop
 800b432:	3708      	adds	r7, #8
 800b434:	46bd      	mov	sp, r7
 800b436:	bd80      	pop	{r7, pc}

0800b438 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b086      	sub	sp, #24
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800b440:	2300      	movs	r3, #0
 800b442:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800b444:	f7ff fee8 	bl	800b218 <HAL_GetTick>
 800b448:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d101      	bne.n	800b454 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800b450:	2301      	movs	r3, #1
 800b452:	e099      	b.n	800b588 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	2200      	movs	r2, #0
 800b458:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2202      	movs	r2, #2
 800b460:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	681a      	ldr	r2, [r3, #0]
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	f022 0201 	bic.w	r2, r2, #1
 800b472:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b474:	e00f      	b.n	800b496 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b476:	f7ff fecf 	bl	800b218 <HAL_GetTick>
 800b47a:	4602      	mov	r2, r0
 800b47c:	693b      	ldr	r3, [r7, #16]
 800b47e:	1ad3      	subs	r3, r2, r3
 800b480:	2b05      	cmp	r3, #5
 800b482:	d908      	bls.n	800b496 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2220      	movs	r2, #32
 800b488:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	2203      	movs	r2, #3
 800b48e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800b492:	2303      	movs	r3, #3
 800b494:	e078      	b.n	800b588 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	f003 0301 	and.w	r3, r3, #1
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d1e8      	bne.n	800b476 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800b4ac:	697a      	ldr	r2, [r7, #20]
 800b4ae:	4b38      	ldr	r3, [pc, #224]	; (800b590 <HAL_DMA_Init+0x158>)
 800b4b0:	4013      	ands	r3, r2
 800b4b2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	685a      	ldr	r2, [r3, #4]
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	689b      	ldr	r3, [r3, #8]
 800b4bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b4c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	691b      	ldr	r3, [r3, #16]
 800b4c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b4ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	699b      	ldr	r3, [r3, #24]
 800b4d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b4da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	6a1b      	ldr	r3, [r3, #32]
 800b4e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b4e2:	697a      	ldr	r2, [r7, #20]
 800b4e4:	4313      	orrs	r3, r2
 800b4e6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4ec:	2b04      	cmp	r3, #4
 800b4ee:	d107      	bne.n	800b500 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4f8:	4313      	orrs	r3, r2
 800b4fa:	697a      	ldr	r2, [r7, #20]
 800b4fc:	4313      	orrs	r3, r2
 800b4fe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	697a      	ldr	r2, [r7, #20]
 800b506:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	695b      	ldr	r3, [r3, #20]
 800b50e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800b510:	697b      	ldr	r3, [r7, #20]
 800b512:	f023 0307 	bic.w	r3, r3, #7
 800b516:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b51c:	697a      	ldr	r2, [r7, #20]
 800b51e:	4313      	orrs	r3, r2
 800b520:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b526:	2b04      	cmp	r3, #4
 800b528:	d117      	bne.n	800b55a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b52e:	697a      	ldr	r2, [r7, #20]
 800b530:	4313      	orrs	r3, r2
 800b532:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d00e      	beq.n	800b55a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800b53c:	6878      	ldr	r0, [r7, #4]
 800b53e:	f000 fa9f 	bl	800ba80 <DMA_CheckFifoParam>
 800b542:	4603      	mov	r3, r0
 800b544:	2b00      	cmp	r3, #0
 800b546:	d008      	beq.n	800b55a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	2240      	movs	r2, #64	; 0x40
 800b54c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	2201      	movs	r2, #1
 800b552:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800b556:	2301      	movs	r3, #1
 800b558:	e016      	b.n	800b588 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	697a      	ldr	r2, [r7, #20]
 800b560:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b562:	6878      	ldr	r0, [r7, #4]
 800b564:	f000 fa56 	bl	800ba14 <DMA_CalcBaseAndBitshift>
 800b568:	4603      	mov	r3, r0
 800b56a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b570:	223f      	movs	r2, #63	; 0x3f
 800b572:	409a      	lsls	r2, r3
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2200      	movs	r2, #0
 800b57c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	2201      	movs	r2, #1
 800b582:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800b586:	2300      	movs	r3, #0
}
 800b588:	4618      	mov	r0, r3
 800b58a:	3718      	adds	r7, #24
 800b58c:	46bd      	mov	sp, r7
 800b58e:	bd80      	pop	{r7, pc}
 800b590:	f010803f 	.word	0xf010803f

0800b594 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b594:	b580      	push	{r7, lr}
 800b596:	b086      	sub	sp, #24
 800b598:	af00      	add	r7, sp, #0
 800b59a:	60f8      	str	r0, [r7, #12]
 800b59c:	60b9      	str	r1, [r7, #8]
 800b59e:	607a      	str	r2, [r7, #4]
 800b5a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5aa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b5b2:	2b01      	cmp	r3, #1
 800b5b4:	d101      	bne.n	800b5ba <HAL_DMA_Start_IT+0x26>
 800b5b6:	2302      	movs	r3, #2
 800b5b8:	e040      	b.n	800b63c <HAL_DMA_Start_IT+0xa8>
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	2201      	movs	r2, #1
 800b5be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b5c8:	b2db      	uxtb	r3, r3
 800b5ca:	2b01      	cmp	r3, #1
 800b5cc:	d12f      	bne.n	800b62e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	2202      	movs	r2, #2
 800b5d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	2200      	movs	r2, #0
 800b5da:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800b5dc:	683b      	ldr	r3, [r7, #0]
 800b5de:	687a      	ldr	r2, [r7, #4]
 800b5e0:	68b9      	ldr	r1, [r7, #8]
 800b5e2:	68f8      	ldr	r0, [r7, #12]
 800b5e4:	f000 f9e8 	bl	800b9b8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b5ec:	223f      	movs	r2, #63	; 0x3f
 800b5ee:	409a      	lsls	r2, r3
 800b5f0:	693b      	ldr	r3, [r7, #16]
 800b5f2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	681a      	ldr	r2, [r3, #0]
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	f042 0216 	orr.w	r2, r2, #22
 800b602:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d007      	beq.n	800b61c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	681a      	ldr	r2, [r3, #0]
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	f042 0208 	orr.w	r2, r2, #8
 800b61a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	681a      	ldr	r2, [r3, #0]
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	f042 0201 	orr.w	r2, r2, #1
 800b62a:	601a      	str	r2, [r3, #0]
 800b62c:	e005      	b.n	800b63a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	2200      	movs	r2, #0
 800b632:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800b636:	2302      	movs	r3, #2
 800b638:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800b63a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b63c:	4618      	mov	r0, r3
 800b63e:	3718      	adds	r7, #24
 800b640:	46bd      	mov	sp, r7
 800b642:	bd80      	pop	{r7, pc}

0800b644 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800b644:	b480      	push	{r7}
 800b646:	b083      	sub	sp, #12
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b652:	b2db      	uxtb	r3, r3
 800b654:	2b02      	cmp	r3, #2
 800b656:	d004      	beq.n	800b662 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2280      	movs	r2, #128	; 0x80
 800b65c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800b65e:	2301      	movs	r3, #1
 800b660:	e00c      	b.n	800b67c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	2205      	movs	r2, #5
 800b666:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	681a      	ldr	r2, [r3, #0]
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	f022 0201 	bic.w	r2, r2, #1
 800b678:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800b67a:	2300      	movs	r3, #0
}
 800b67c:	4618      	mov	r0, r3
 800b67e:	370c      	adds	r7, #12
 800b680:	46bd      	mov	sp, r7
 800b682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b686:	4770      	bx	lr

0800b688 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b086      	sub	sp, #24
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800b690:	2300      	movs	r3, #0
 800b692:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800b694:	4b92      	ldr	r3, [pc, #584]	; (800b8e0 <HAL_DMA_IRQHandler+0x258>)
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	4a92      	ldr	r2, [pc, #584]	; (800b8e4 <HAL_DMA_IRQHandler+0x25c>)
 800b69a:	fba2 2303 	umull	r2, r3, r2, r3
 800b69e:	0a9b      	lsrs	r3, r3, #10
 800b6a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800b6a8:	693b      	ldr	r3, [r7, #16]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b6b2:	2208      	movs	r2, #8
 800b6b4:	409a      	lsls	r2, r3
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	4013      	ands	r3, r2
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d01a      	beq.n	800b6f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	f003 0304 	and.w	r3, r3, #4
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d013      	beq.n	800b6f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	681a      	ldr	r2, [r3, #0]
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	f022 0204 	bic.w	r2, r2, #4
 800b6da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b6e0:	2208      	movs	r2, #8
 800b6e2:	409a      	lsls	r2, r3
 800b6e4:	693b      	ldr	r3, [r7, #16]
 800b6e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6ec:	f043 0201 	orr.w	r2, r3, #1
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b6f8:	2201      	movs	r2, #1
 800b6fa:	409a      	lsls	r2, r3
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	4013      	ands	r3, r2
 800b700:	2b00      	cmp	r3, #0
 800b702:	d012      	beq.n	800b72a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	695b      	ldr	r3, [r3, #20]
 800b70a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d00b      	beq.n	800b72a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b716:	2201      	movs	r2, #1
 800b718:	409a      	lsls	r2, r3
 800b71a:	693b      	ldr	r3, [r7, #16]
 800b71c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b722:	f043 0202 	orr.w	r2, r3, #2
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b72e:	2204      	movs	r2, #4
 800b730:	409a      	lsls	r2, r3
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	4013      	ands	r3, r2
 800b736:	2b00      	cmp	r3, #0
 800b738:	d012      	beq.n	800b760 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	f003 0302 	and.w	r3, r3, #2
 800b744:	2b00      	cmp	r3, #0
 800b746:	d00b      	beq.n	800b760 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b74c:	2204      	movs	r2, #4
 800b74e:	409a      	lsls	r2, r3
 800b750:	693b      	ldr	r3, [r7, #16]
 800b752:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b758:	f043 0204 	orr.w	r2, r3, #4
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b764:	2210      	movs	r2, #16
 800b766:	409a      	lsls	r2, r3
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	4013      	ands	r3, r2
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d043      	beq.n	800b7f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	f003 0308 	and.w	r3, r3, #8
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d03c      	beq.n	800b7f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b782:	2210      	movs	r2, #16
 800b784:	409a      	lsls	r2, r3
 800b786:	693b      	ldr	r3, [r7, #16]
 800b788:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b794:	2b00      	cmp	r3, #0
 800b796:	d018      	beq.n	800b7ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d108      	bne.n	800b7b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d024      	beq.n	800b7f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7b2:	6878      	ldr	r0, [r7, #4]
 800b7b4:	4798      	blx	r3
 800b7b6:	e01f      	b.n	800b7f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d01b      	beq.n	800b7f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b7c4:	6878      	ldr	r0, [r7, #4]
 800b7c6:	4798      	blx	r3
 800b7c8:	e016      	b.n	800b7f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d107      	bne.n	800b7e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	681a      	ldr	r2, [r3, #0]
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	f022 0208 	bic.w	r2, r2, #8
 800b7e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d003      	beq.n	800b7f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7f4:	6878      	ldr	r0, [r7, #4]
 800b7f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b7fc:	2220      	movs	r2, #32
 800b7fe:	409a      	lsls	r2, r3
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	4013      	ands	r3, r2
 800b804:	2b00      	cmp	r3, #0
 800b806:	f000 808e 	beq.w	800b926 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	f003 0310 	and.w	r3, r3, #16
 800b814:	2b00      	cmp	r3, #0
 800b816:	f000 8086 	beq.w	800b926 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b81e:	2220      	movs	r2, #32
 800b820:	409a      	lsls	r2, r3
 800b822:	693b      	ldr	r3, [r7, #16]
 800b824:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b82c:	b2db      	uxtb	r3, r3
 800b82e:	2b05      	cmp	r3, #5
 800b830:	d136      	bne.n	800b8a0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	681a      	ldr	r2, [r3, #0]
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	f022 0216 	bic.w	r2, r2, #22
 800b840:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	695a      	ldr	r2, [r3, #20]
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b850:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b856:	2b00      	cmp	r3, #0
 800b858:	d103      	bne.n	800b862 <HAL_DMA_IRQHandler+0x1da>
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d007      	beq.n	800b872 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	681a      	ldr	r2, [r3, #0]
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	f022 0208 	bic.w	r2, r2, #8
 800b870:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b876:	223f      	movs	r2, #63	; 0x3f
 800b878:	409a      	lsls	r2, r3
 800b87a:	693b      	ldr	r3, [r7, #16]
 800b87c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	2200      	movs	r2, #0
 800b882:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	2201      	movs	r2, #1
 800b88a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b892:	2b00      	cmp	r3, #0
 800b894:	d07d      	beq.n	800b992 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b89a:	6878      	ldr	r0, [r7, #4]
 800b89c:	4798      	blx	r3
        }
        return;
 800b89e:	e078      	b.n	800b992 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d01c      	beq.n	800b8e8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d108      	bne.n	800b8ce <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d030      	beq.n	800b926 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8c8:	6878      	ldr	r0, [r7, #4]
 800b8ca:	4798      	blx	r3
 800b8cc:	e02b      	b.n	800b926 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d027      	beq.n	800b926 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8da:	6878      	ldr	r0, [r7, #4]
 800b8dc:	4798      	blx	r3
 800b8de:	e022      	b.n	800b926 <HAL_DMA_IRQHandler+0x29e>
 800b8e0:	20000ce0 	.word	0x20000ce0
 800b8e4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d10f      	bne.n	800b916 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	681a      	ldr	r2, [r3, #0]
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	f022 0210 	bic.w	r2, r2, #16
 800b904:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	2200      	movs	r2, #0
 800b90a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	2201      	movs	r2, #1
 800b912:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d003      	beq.n	800b926 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b922:	6878      	ldr	r0, [r7, #4]
 800b924:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d032      	beq.n	800b994 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b932:	f003 0301 	and.w	r3, r3, #1
 800b936:	2b00      	cmp	r3, #0
 800b938:	d022      	beq.n	800b980 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	2205      	movs	r2, #5
 800b93e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	681a      	ldr	r2, [r3, #0]
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	f022 0201 	bic.w	r2, r2, #1
 800b950:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800b952:	68bb      	ldr	r3, [r7, #8]
 800b954:	3301      	adds	r3, #1
 800b956:	60bb      	str	r3, [r7, #8]
 800b958:	697a      	ldr	r2, [r7, #20]
 800b95a:	429a      	cmp	r2, r3
 800b95c:	d307      	bcc.n	800b96e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	f003 0301 	and.w	r3, r3, #1
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d1f2      	bne.n	800b952 <HAL_DMA_IRQHandler+0x2ca>
 800b96c:	e000      	b.n	800b970 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800b96e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	2200      	movs	r2, #0
 800b974:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	2201      	movs	r2, #1
 800b97c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b984:	2b00      	cmp	r3, #0
 800b986:	d005      	beq.n	800b994 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b98c:	6878      	ldr	r0, [r7, #4]
 800b98e:	4798      	blx	r3
 800b990:	e000      	b.n	800b994 <HAL_DMA_IRQHandler+0x30c>
        return;
 800b992:	bf00      	nop
    }
  }
}
 800b994:	3718      	adds	r7, #24
 800b996:	46bd      	mov	sp, r7
 800b998:	bd80      	pop	{r7, pc}
 800b99a:	bf00      	nop

0800b99c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800b99c:	b480      	push	{r7}
 800b99e:	b083      	sub	sp, #12
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b9aa:	b2db      	uxtb	r3, r3
}
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	370c      	adds	r7, #12
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b6:	4770      	bx	lr

0800b9b8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b9b8:	b480      	push	{r7}
 800b9ba:	b085      	sub	sp, #20
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	60f8      	str	r0, [r7, #12]
 800b9c0:	60b9      	str	r1, [r7, #8]
 800b9c2:	607a      	str	r2, [r7, #4]
 800b9c4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	681a      	ldr	r2, [r3, #0]
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b9d4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	683a      	ldr	r2, [r7, #0]
 800b9dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	689b      	ldr	r3, [r3, #8]
 800b9e2:	2b40      	cmp	r3, #64	; 0x40
 800b9e4:	d108      	bne.n	800b9f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	687a      	ldr	r2, [r7, #4]
 800b9ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	68ba      	ldr	r2, [r7, #8]
 800b9f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800b9f6:	e007      	b.n	800ba08 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	68ba      	ldr	r2, [r7, #8]
 800b9fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	687a      	ldr	r2, [r7, #4]
 800ba06:	60da      	str	r2, [r3, #12]
}
 800ba08:	bf00      	nop
 800ba0a:	3714      	adds	r7, #20
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba12:	4770      	bx	lr

0800ba14 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800ba14:	b480      	push	{r7}
 800ba16:	b085      	sub	sp, #20
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	b2db      	uxtb	r3, r3
 800ba22:	3b10      	subs	r3, #16
 800ba24:	4a14      	ldr	r2, [pc, #80]	; (800ba78 <DMA_CalcBaseAndBitshift+0x64>)
 800ba26:	fba2 2303 	umull	r2, r3, r2, r3
 800ba2a:	091b      	lsrs	r3, r3, #4
 800ba2c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800ba2e:	4a13      	ldr	r2, [pc, #76]	; (800ba7c <DMA_CalcBaseAndBitshift+0x68>)
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	4413      	add	r3, r2
 800ba34:	781b      	ldrb	r3, [r3, #0]
 800ba36:	461a      	mov	r2, r3
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	2b03      	cmp	r3, #3
 800ba40:	d909      	bls.n	800ba56 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800ba4a:	f023 0303 	bic.w	r3, r3, #3
 800ba4e:	1d1a      	adds	r2, r3, #4
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	659a      	str	r2, [r3, #88]	; 0x58
 800ba54:	e007      	b.n	800ba66 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800ba5e:	f023 0303 	bic.w	r3, r3, #3
 800ba62:	687a      	ldr	r2, [r7, #4]
 800ba64:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	3714      	adds	r7, #20
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba74:	4770      	bx	lr
 800ba76:	bf00      	nop
 800ba78:	aaaaaaab 	.word	0xaaaaaaab
 800ba7c:	0801be74 	.word	0x0801be74

0800ba80 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800ba80:	b480      	push	{r7}
 800ba82:	b085      	sub	sp, #20
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ba88:	2300      	movs	r3, #0
 800ba8a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba90:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	699b      	ldr	r3, [r3, #24]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d11f      	bne.n	800bada <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800ba9a:	68bb      	ldr	r3, [r7, #8]
 800ba9c:	2b03      	cmp	r3, #3
 800ba9e:	d855      	bhi.n	800bb4c <DMA_CheckFifoParam+0xcc>
 800baa0:	a201      	add	r2, pc, #4	; (adr r2, 800baa8 <DMA_CheckFifoParam+0x28>)
 800baa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baa6:	bf00      	nop
 800baa8:	0800bab9 	.word	0x0800bab9
 800baac:	0800bacb 	.word	0x0800bacb
 800bab0:	0800bab9 	.word	0x0800bab9
 800bab4:	0800bb4d 	.word	0x0800bb4d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800babc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d045      	beq.n	800bb50 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800bac4:	2301      	movs	r3, #1
 800bac6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bac8:	e042      	b.n	800bb50 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bace:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800bad2:	d13f      	bne.n	800bb54 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800bad4:	2301      	movs	r3, #1
 800bad6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bad8:	e03c      	b.n	800bb54 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	699b      	ldr	r3, [r3, #24]
 800bade:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bae2:	d121      	bne.n	800bb28 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800bae4:	68bb      	ldr	r3, [r7, #8]
 800bae6:	2b03      	cmp	r3, #3
 800bae8:	d836      	bhi.n	800bb58 <DMA_CheckFifoParam+0xd8>
 800baea:	a201      	add	r2, pc, #4	; (adr r2, 800baf0 <DMA_CheckFifoParam+0x70>)
 800baec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baf0:	0800bb01 	.word	0x0800bb01
 800baf4:	0800bb07 	.word	0x0800bb07
 800baf8:	0800bb01 	.word	0x0800bb01
 800bafc:	0800bb19 	.word	0x0800bb19
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800bb00:	2301      	movs	r3, #1
 800bb02:	73fb      	strb	r3, [r7, #15]
      break;
 800bb04:	e02f      	b.n	800bb66 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d024      	beq.n	800bb5c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800bb12:	2301      	movs	r3, #1
 800bb14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bb16:	e021      	b.n	800bb5c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb1c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800bb20:	d11e      	bne.n	800bb60 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800bb22:	2301      	movs	r3, #1
 800bb24:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800bb26:	e01b      	b.n	800bb60 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800bb28:	68bb      	ldr	r3, [r7, #8]
 800bb2a:	2b02      	cmp	r3, #2
 800bb2c:	d902      	bls.n	800bb34 <DMA_CheckFifoParam+0xb4>
 800bb2e:	2b03      	cmp	r3, #3
 800bb30:	d003      	beq.n	800bb3a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800bb32:	e018      	b.n	800bb66 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800bb34:	2301      	movs	r3, #1
 800bb36:	73fb      	strb	r3, [r7, #15]
      break;
 800bb38:	e015      	b.n	800bb66 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d00e      	beq.n	800bb64 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800bb46:	2301      	movs	r3, #1
 800bb48:	73fb      	strb	r3, [r7, #15]
      break;
 800bb4a:	e00b      	b.n	800bb64 <DMA_CheckFifoParam+0xe4>
      break;
 800bb4c:	bf00      	nop
 800bb4e:	e00a      	b.n	800bb66 <DMA_CheckFifoParam+0xe6>
      break;
 800bb50:	bf00      	nop
 800bb52:	e008      	b.n	800bb66 <DMA_CheckFifoParam+0xe6>
      break;
 800bb54:	bf00      	nop
 800bb56:	e006      	b.n	800bb66 <DMA_CheckFifoParam+0xe6>
      break;
 800bb58:	bf00      	nop
 800bb5a:	e004      	b.n	800bb66 <DMA_CheckFifoParam+0xe6>
      break;
 800bb5c:	bf00      	nop
 800bb5e:	e002      	b.n	800bb66 <DMA_CheckFifoParam+0xe6>
      break;   
 800bb60:	bf00      	nop
 800bb62:	e000      	b.n	800bb66 <DMA_CheckFifoParam+0xe6>
      break;
 800bb64:	bf00      	nop
    }
  } 
  
  return status; 
 800bb66:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb68:	4618      	mov	r0, r3
 800bb6a:	3714      	adds	r7, #20
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb72:	4770      	bx	lr

0800bb74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800bb74:	b480      	push	{r7}
 800bb76:	b089      	sub	sp, #36	; 0x24
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
 800bb7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800bb7e:	2300      	movs	r3, #0
 800bb80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800bb82:	2300      	movs	r3, #0
 800bb84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800bb86:	2300      	movs	r3, #0
 800bb88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	61fb      	str	r3, [r7, #28]
 800bb8e:	e16b      	b.n	800be68 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800bb90:	2201      	movs	r2, #1
 800bb92:	69fb      	ldr	r3, [r7, #28]
 800bb94:	fa02 f303 	lsl.w	r3, r2, r3
 800bb98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800bb9a:	683b      	ldr	r3, [r7, #0]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	697a      	ldr	r2, [r7, #20]
 800bba0:	4013      	ands	r3, r2
 800bba2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800bba4:	693a      	ldr	r2, [r7, #16]
 800bba6:	697b      	ldr	r3, [r7, #20]
 800bba8:	429a      	cmp	r2, r3
 800bbaa:	f040 815a 	bne.w	800be62 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	685b      	ldr	r3, [r3, #4]
 800bbb2:	2b01      	cmp	r3, #1
 800bbb4:	d00b      	beq.n	800bbce <HAL_GPIO_Init+0x5a>
 800bbb6:	683b      	ldr	r3, [r7, #0]
 800bbb8:	685b      	ldr	r3, [r3, #4]
 800bbba:	2b02      	cmp	r3, #2
 800bbbc:	d007      	beq.n	800bbce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800bbbe:	683b      	ldr	r3, [r7, #0]
 800bbc0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800bbc2:	2b11      	cmp	r3, #17
 800bbc4:	d003      	beq.n	800bbce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800bbc6:	683b      	ldr	r3, [r7, #0]
 800bbc8:	685b      	ldr	r3, [r3, #4]
 800bbca:	2b12      	cmp	r3, #18
 800bbcc:	d130      	bne.n	800bc30 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	689b      	ldr	r3, [r3, #8]
 800bbd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800bbd4:	69fb      	ldr	r3, [r7, #28]
 800bbd6:	005b      	lsls	r3, r3, #1
 800bbd8:	2203      	movs	r2, #3
 800bbda:	fa02 f303 	lsl.w	r3, r2, r3
 800bbde:	43db      	mvns	r3, r3
 800bbe0:	69ba      	ldr	r2, [r7, #24]
 800bbe2:	4013      	ands	r3, r2
 800bbe4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	68da      	ldr	r2, [r3, #12]
 800bbea:	69fb      	ldr	r3, [r7, #28]
 800bbec:	005b      	lsls	r3, r3, #1
 800bbee:	fa02 f303 	lsl.w	r3, r2, r3
 800bbf2:	69ba      	ldr	r2, [r7, #24]
 800bbf4:	4313      	orrs	r3, r2
 800bbf6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	69ba      	ldr	r2, [r7, #24]
 800bbfc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	685b      	ldr	r3, [r3, #4]
 800bc02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800bc04:	2201      	movs	r2, #1
 800bc06:	69fb      	ldr	r3, [r7, #28]
 800bc08:	fa02 f303 	lsl.w	r3, r2, r3
 800bc0c:	43db      	mvns	r3, r3
 800bc0e:	69ba      	ldr	r2, [r7, #24]
 800bc10:	4013      	ands	r3, r2
 800bc12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800bc14:	683b      	ldr	r3, [r7, #0]
 800bc16:	685b      	ldr	r3, [r3, #4]
 800bc18:	091b      	lsrs	r3, r3, #4
 800bc1a:	f003 0201 	and.w	r2, r3, #1
 800bc1e:	69fb      	ldr	r3, [r7, #28]
 800bc20:	fa02 f303 	lsl.w	r3, r2, r3
 800bc24:	69ba      	ldr	r2, [r7, #24]
 800bc26:	4313      	orrs	r3, r2
 800bc28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	69ba      	ldr	r2, [r7, #24]
 800bc2e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	68db      	ldr	r3, [r3, #12]
 800bc34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800bc36:	69fb      	ldr	r3, [r7, #28]
 800bc38:	005b      	lsls	r3, r3, #1
 800bc3a:	2203      	movs	r2, #3
 800bc3c:	fa02 f303 	lsl.w	r3, r2, r3
 800bc40:	43db      	mvns	r3, r3
 800bc42:	69ba      	ldr	r2, [r7, #24]
 800bc44:	4013      	ands	r3, r2
 800bc46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800bc48:	683b      	ldr	r3, [r7, #0]
 800bc4a:	689a      	ldr	r2, [r3, #8]
 800bc4c:	69fb      	ldr	r3, [r7, #28]
 800bc4e:	005b      	lsls	r3, r3, #1
 800bc50:	fa02 f303 	lsl.w	r3, r2, r3
 800bc54:	69ba      	ldr	r2, [r7, #24]
 800bc56:	4313      	orrs	r3, r2
 800bc58:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	69ba      	ldr	r2, [r7, #24]
 800bc5e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800bc60:	683b      	ldr	r3, [r7, #0]
 800bc62:	685b      	ldr	r3, [r3, #4]
 800bc64:	2b02      	cmp	r3, #2
 800bc66:	d003      	beq.n	800bc70 <HAL_GPIO_Init+0xfc>
 800bc68:	683b      	ldr	r3, [r7, #0]
 800bc6a:	685b      	ldr	r3, [r3, #4]
 800bc6c:	2b12      	cmp	r3, #18
 800bc6e:	d123      	bne.n	800bcb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800bc70:	69fb      	ldr	r3, [r7, #28]
 800bc72:	08da      	lsrs	r2, r3, #3
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	3208      	adds	r2, #8
 800bc78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800bc7e:	69fb      	ldr	r3, [r7, #28]
 800bc80:	f003 0307 	and.w	r3, r3, #7
 800bc84:	009b      	lsls	r3, r3, #2
 800bc86:	220f      	movs	r2, #15
 800bc88:	fa02 f303 	lsl.w	r3, r2, r3
 800bc8c:	43db      	mvns	r3, r3
 800bc8e:	69ba      	ldr	r2, [r7, #24]
 800bc90:	4013      	ands	r3, r2
 800bc92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800bc94:	683b      	ldr	r3, [r7, #0]
 800bc96:	691a      	ldr	r2, [r3, #16]
 800bc98:	69fb      	ldr	r3, [r7, #28]
 800bc9a:	f003 0307 	and.w	r3, r3, #7
 800bc9e:	009b      	lsls	r3, r3, #2
 800bca0:	fa02 f303 	lsl.w	r3, r2, r3
 800bca4:	69ba      	ldr	r2, [r7, #24]
 800bca6:	4313      	orrs	r3, r2
 800bca8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800bcaa:	69fb      	ldr	r3, [r7, #28]
 800bcac:	08da      	lsrs	r2, r3, #3
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	3208      	adds	r2, #8
 800bcb2:	69b9      	ldr	r1, [r7, #24]
 800bcb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800bcbe:	69fb      	ldr	r3, [r7, #28]
 800bcc0:	005b      	lsls	r3, r3, #1
 800bcc2:	2203      	movs	r2, #3
 800bcc4:	fa02 f303 	lsl.w	r3, r2, r3
 800bcc8:	43db      	mvns	r3, r3
 800bcca:	69ba      	ldr	r2, [r7, #24]
 800bccc:	4013      	ands	r3, r2
 800bcce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	685b      	ldr	r3, [r3, #4]
 800bcd4:	f003 0203 	and.w	r2, r3, #3
 800bcd8:	69fb      	ldr	r3, [r7, #28]
 800bcda:	005b      	lsls	r3, r3, #1
 800bcdc:	fa02 f303 	lsl.w	r3, r2, r3
 800bce0:	69ba      	ldr	r2, [r7, #24]
 800bce2:	4313      	orrs	r3, r2
 800bce4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	69ba      	ldr	r2, [r7, #24]
 800bcea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800bcec:	683b      	ldr	r3, [r7, #0]
 800bcee:	685b      	ldr	r3, [r3, #4]
 800bcf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	f000 80b4 	beq.w	800be62 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	60fb      	str	r3, [r7, #12]
 800bcfe:	4b5f      	ldr	r3, [pc, #380]	; (800be7c <HAL_GPIO_Init+0x308>)
 800bd00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd02:	4a5e      	ldr	r2, [pc, #376]	; (800be7c <HAL_GPIO_Init+0x308>)
 800bd04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bd08:	6453      	str	r3, [r2, #68]	; 0x44
 800bd0a:	4b5c      	ldr	r3, [pc, #368]	; (800be7c <HAL_GPIO_Init+0x308>)
 800bd0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bd12:	60fb      	str	r3, [r7, #12]
 800bd14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800bd16:	4a5a      	ldr	r2, [pc, #360]	; (800be80 <HAL_GPIO_Init+0x30c>)
 800bd18:	69fb      	ldr	r3, [r7, #28]
 800bd1a:	089b      	lsrs	r3, r3, #2
 800bd1c:	3302      	adds	r3, #2
 800bd1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800bd24:	69fb      	ldr	r3, [r7, #28]
 800bd26:	f003 0303 	and.w	r3, r3, #3
 800bd2a:	009b      	lsls	r3, r3, #2
 800bd2c:	220f      	movs	r2, #15
 800bd2e:	fa02 f303 	lsl.w	r3, r2, r3
 800bd32:	43db      	mvns	r3, r3
 800bd34:	69ba      	ldr	r2, [r7, #24]
 800bd36:	4013      	ands	r3, r2
 800bd38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	4a51      	ldr	r2, [pc, #324]	; (800be84 <HAL_GPIO_Init+0x310>)
 800bd3e:	4293      	cmp	r3, r2
 800bd40:	d02b      	beq.n	800bd9a <HAL_GPIO_Init+0x226>
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	4a50      	ldr	r2, [pc, #320]	; (800be88 <HAL_GPIO_Init+0x314>)
 800bd46:	4293      	cmp	r3, r2
 800bd48:	d025      	beq.n	800bd96 <HAL_GPIO_Init+0x222>
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	4a4f      	ldr	r2, [pc, #316]	; (800be8c <HAL_GPIO_Init+0x318>)
 800bd4e:	4293      	cmp	r3, r2
 800bd50:	d01f      	beq.n	800bd92 <HAL_GPIO_Init+0x21e>
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	4a4e      	ldr	r2, [pc, #312]	; (800be90 <HAL_GPIO_Init+0x31c>)
 800bd56:	4293      	cmp	r3, r2
 800bd58:	d019      	beq.n	800bd8e <HAL_GPIO_Init+0x21a>
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	4a4d      	ldr	r2, [pc, #308]	; (800be94 <HAL_GPIO_Init+0x320>)
 800bd5e:	4293      	cmp	r3, r2
 800bd60:	d013      	beq.n	800bd8a <HAL_GPIO_Init+0x216>
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	4a4c      	ldr	r2, [pc, #304]	; (800be98 <HAL_GPIO_Init+0x324>)
 800bd66:	4293      	cmp	r3, r2
 800bd68:	d00d      	beq.n	800bd86 <HAL_GPIO_Init+0x212>
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	4a4b      	ldr	r2, [pc, #300]	; (800be9c <HAL_GPIO_Init+0x328>)
 800bd6e:	4293      	cmp	r3, r2
 800bd70:	d007      	beq.n	800bd82 <HAL_GPIO_Init+0x20e>
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	4a4a      	ldr	r2, [pc, #296]	; (800bea0 <HAL_GPIO_Init+0x32c>)
 800bd76:	4293      	cmp	r3, r2
 800bd78:	d101      	bne.n	800bd7e <HAL_GPIO_Init+0x20a>
 800bd7a:	2307      	movs	r3, #7
 800bd7c:	e00e      	b.n	800bd9c <HAL_GPIO_Init+0x228>
 800bd7e:	2308      	movs	r3, #8
 800bd80:	e00c      	b.n	800bd9c <HAL_GPIO_Init+0x228>
 800bd82:	2306      	movs	r3, #6
 800bd84:	e00a      	b.n	800bd9c <HAL_GPIO_Init+0x228>
 800bd86:	2305      	movs	r3, #5
 800bd88:	e008      	b.n	800bd9c <HAL_GPIO_Init+0x228>
 800bd8a:	2304      	movs	r3, #4
 800bd8c:	e006      	b.n	800bd9c <HAL_GPIO_Init+0x228>
 800bd8e:	2303      	movs	r3, #3
 800bd90:	e004      	b.n	800bd9c <HAL_GPIO_Init+0x228>
 800bd92:	2302      	movs	r3, #2
 800bd94:	e002      	b.n	800bd9c <HAL_GPIO_Init+0x228>
 800bd96:	2301      	movs	r3, #1
 800bd98:	e000      	b.n	800bd9c <HAL_GPIO_Init+0x228>
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	69fa      	ldr	r2, [r7, #28]
 800bd9e:	f002 0203 	and.w	r2, r2, #3
 800bda2:	0092      	lsls	r2, r2, #2
 800bda4:	4093      	lsls	r3, r2
 800bda6:	69ba      	ldr	r2, [r7, #24]
 800bda8:	4313      	orrs	r3, r2
 800bdaa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800bdac:	4934      	ldr	r1, [pc, #208]	; (800be80 <HAL_GPIO_Init+0x30c>)
 800bdae:	69fb      	ldr	r3, [r7, #28]
 800bdb0:	089b      	lsrs	r3, r3, #2
 800bdb2:	3302      	adds	r3, #2
 800bdb4:	69ba      	ldr	r2, [r7, #24]
 800bdb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800bdba:	4b3a      	ldr	r3, [pc, #232]	; (800bea4 <HAL_GPIO_Init+0x330>)
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bdc0:	693b      	ldr	r3, [r7, #16]
 800bdc2:	43db      	mvns	r3, r3
 800bdc4:	69ba      	ldr	r2, [r7, #24]
 800bdc6:	4013      	ands	r3, r2
 800bdc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800bdca:	683b      	ldr	r3, [r7, #0]
 800bdcc:	685b      	ldr	r3, [r3, #4]
 800bdce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d003      	beq.n	800bdde <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800bdd6:	69ba      	ldr	r2, [r7, #24]
 800bdd8:	693b      	ldr	r3, [r7, #16]
 800bdda:	4313      	orrs	r3, r2
 800bddc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800bdde:	4a31      	ldr	r2, [pc, #196]	; (800bea4 <HAL_GPIO_Init+0x330>)
 800bde0:	69bb      	ldr	r3, [r7, #24]
 800bde2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800bde4:	4b2f      	ldr	r3, [pc, #188]	; (800bea4 <HAL_GPIO_Init+0x330>)
 800bde6:	685b      	ldr	r3, [r3, #4]
 800bde8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bdea:	693b      	ldr	r3, [r7, #16]
 800bdec:	43db      	mvns	r3, r3
 800bdee:	69ba      	ldr	r2, [r7, #24]
 800bdf0:	4013      	ands	r3, r2
 800bdf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800bdf4:	683b      	ldr	r3, [r7, #0]
 800bdf6:	685b      	ldr	r3, [r3, #4]
 800bdf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d003      	beq.n	800be08 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800be00:	69ba      	ldr	r2, [r7, #24]
 800be02:	693b      	ldr	r3, [r7, #16]
 800be04:	4313      	orrs	r3, r2
 800be06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800be08:	4a26      	ldr	r2, [pc, #152]	; (800bea4 <HAL_GPIO_Init+0x330>)
 800be0a:	69bb      	ldr	r3, [r7, #24]
 800be0c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800be0e:	4b25      	ldr	r3, [pc, #148]	; (800bea4 <HAL_GPIO_Init+0x330>)
 800be10:	689b      	ldr	r3, [r3, #8]
 800be12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800be14:	693b      	ldr	r3, [r7, #16]
 800be16:	43db      	mvns	r3, r3
 800be18:	69ba      	ldr	r2, [r7, #24]
 800be1a:	4013      	ands	r3, r2
 800be1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800be1e:	683b      	ldr	r3, [r7, #0]
 800be20:	685b      	ldr	r3, [r3, #4]
 800be22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800be26:	2b00      	cmp	r3, #0
 800be28:	d003      	beq.n	800be32 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800be2a:	69ba      	ldr	r2, [r7, #24]
 800be2c:	693b      	ldr	r3, [r7, #16]
 800be2e:	4313      	orrs	r3, r2
 800be30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800be32:	4a1c      	ldr	r2, [pc, #112]	; (800bea4 <HAL_GPIO_Init+0x330>)
 800be34:	69bb      	ldr	r3, [r7, #24]
 800be36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800be38:	4b1a      	ldr	r3, [pc, #104]	; (800bea4 <HAL_GPIO_Init+0x330>)
 800be3a:	68db      	ldr	r3, [r3, #12]
 800be3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800be3e:	693b      	ldr	r3, [r7, #16]
 800be40:	43db      	mvns	r3, r3
 800be42:	69ba      	ldr	r2, [r7, #24]
 800be44:	4013      	ands	r3, r2
 800be46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	685b      	ldr	r3, [r3, #4]
 800be4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800be50:	2b00      	cmp	r3, #0
 800be52:	d003      	beq.n	800be5c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800be54:	69ba      	ldr	r2, [r7, #24]
 800be56:	693b      	ldr	r3, [r7, #16]
 800be58:	4313      	orrs	r3, r2
 800be5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800be5c:	4a11      	ldr	r2, [pc, #68]	; (800bea4 <HAL_GPIO_Init+0x330>)
 800be5e:	69bb      	ldr	r3, [r7, #24]
 800be60:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800be62:	69fb      	ldr	r3, [r7, #28]
 800be64:	3301      	adds	r3, #1
 800be66:	61fb      	str	r3, [r7, #28]
 800be68:	69fb      	ldr	r3, [r7, #28]
 800be6a:	2b0f      	cmp	r3, #15
 800be6c:	f67f ae90 	bls.w	800bb90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800be70:	bf00      	nop
 800be72:	3724      	adds	r7, #36	; 0x24
 800be74:	46bd      	mov	sp, r7
 800be76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7a:	4770      	bx	lr
 800be7c:	40023800 	.word	0x40023800
 800be80:	40013800 	.word	0x40013800
 800be84:	40020000 	.word	0x40020000
 800be88:	40020400 	.word	0x40020400
 800be8c:	40020800 	.word	0x40020800
 800be90:	40020c00 	.word	0x40020c00
 800be94:	40021000 	.word	0x40021000
 800be98:	40021400 	.word	0x40021400
 800be9c:	40021800 	.word	0x40021800
 800bea0:	40021c00 	.word	0x40021c00
 800bea4:	40013c00 	.word	0x40013c00

0800bea8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800bea8:	b480      	push	{r7}
 800beaa:	b083      	sub	sp, #12
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
 800beb0:	460b      	mov	r3, r1
 800beb2:	807b      	strh	r3, [r7, #2]
 800beb4:	4613      	mov	r3, r2
 800beb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800beb8:	787b      	ldrb	r3, [r7, #1]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d003      	beq.n	800bec6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800bebe:	887a      	ldrh	r2, [r7, #2]
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800bec4:	e003      	b.n	800bece <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800bec6:	887b      	ldrh	r3, [r7, #2]
 800bec8:	041a      	lsls	r2, r3, #16
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	619a      	str	r2, [r3, #24]
}
 800bece:	bf00      	nop
 800bed0:	370c      	adds	r7, #12
 800bed2:	46bd      	mov	sp, r7
 800bed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed8:	4770      	bx	lr
	...

0800bedc <HAL_NOR_Init>:
  * @param  Timing pointer to NOR control timing structure 
  * @param  ExtTiming pointer to NOR extended mode timing structure    
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NOR_Init(NOR_HandleTypeDef *hnor, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b084      	sub	sp, #16
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	60f8      	str	r0, [r7, #12]
 800bee4:	60b9      	str	r1, [r7, #8]
 800bee6:	607a      	str	r2, [r7, #4]
  /* Check the NOR handle parameter */
  if(hnor == NULL)
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	2b00      	cmp	r3, #0
 800beec:	d101      	bne.n	800bef2 <HAL_NOR_Init+0x16>
  {
     return HAL_ERROR;
 800beee:	2301      	movs	r3, #1
 800bef0:	e043      	b.n	800bf7a <HAL_NOR_Init+0x9e>
  }
  
  if(hnor->State == HAL_NOR_STATE_RESET)
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800bef8:	b2db      	uxtb	r3, r3
 800befa:	2b00      	cmp	r3, #0
 800befc:	d106      	bne.n	800bf0c <HAL_NOR_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnor->Lock = HAL_UNLOCKED;
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	2200      	movs	r2, #0
 800bf02:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hnor->MspInitCallback(hnor);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NOR_MspInit(hnor);
 800bf06:	68f8      	ldr	r0, [r7, #12]
 800bf08:	f7f7 f98e 	bl	8003228 <HAL_NOR_MspInit>
#endif /* (USE_HAL_NOR_REGISTER_CALLBACKS) */
  }
  
  /* Initialize NOR control Interface */
  FMC_NORSRAM_Init(hnor->Instance, &(hnor->Init));
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	681a      	ldr	r2, [r3, #0]
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	3308      	adds	r3, #8
 800bf14:	4619      	mov	r1, r3
 800bf16:	4610      	mov	r0, r2
 800bf18:	f003 f810 	bl	800ef3c <FSMC_NORSRAM_Init>

  /* Initialize NOR timing Interface */
  FMC_NORSRAM_Timing_Init(hnor->Instance, Timing, hnor->Init.NSBank); 
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	6818      	ldr	r0, [r3, #0]
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	689b      	ldr	r3, [r3, #8]
 800bf24:	461a      	mov	r2, r3
 800bf26:	68b9      	ldr	r1, [r7, #8]
 800bf28:	f003 f85a 	bl	800efe0 <FSMC_NORSRAM_Timing_Init>

  /* Initialize NOR extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hnor->Extended, ExtTiming, hnor->Init.NSBank, hnor->Init.ExtendedMode);
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	6858      	ldr	r0, [r3, #4]
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	689a      	ldr	r2, [r3, #8]
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf38:	6879      	ldr	r1, [r7, #4]
 800bf3a:	f003 f88f 	bl	800f05c <FSMC_NORSRAM_Extended_Timing_Init>

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hnor->Instance, hnor->Init.NSBank);
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	68fa      	ldr	r2, [r7, #12]
 800bf44:	6892      	ldr	r2, [r2, #8]
 800bf46:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	68fa      	ldr	r2, [r7, #12]
 800bf50:	6892      	ldr	r2, [r2, #8]
 800bf52:	f041 0101 	orr.w	r1, r1, #1
 800bf56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize NOR Memory Data Width*/
  if (hnor->Init.MemoryDataWidth == FMC_NORSRAM_MEM_BUS_WIDTH_8)
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	695b      	ldr	r3, [r3, #20]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d103      	bne.n	800bf6a <HAL_NOR_Init+0x8e>
  {
    uwNORMemoryDataWidth = NOR_MEMORY_8B;
 800bf62:	4b08      	ldr	r3, [pc, #32]	; (800bf84 <HAL_NOR_Init+0xa8>)
 800bf64:	2200      	movs	r2, #0
 800bf66:	601a      	str	r2, [r3, #0]
 800bf68:	e002      	b.n	800bf70 <HAL_NOR_Init+0x94>
  }
  else
  {
    uwNORMemoryDataWidth = NOR_MEMORY_16B;
 800bf6a:	4b06      	ldr	r3, [pc, #24]	; (800bf84 <HAL_NOR_Init+0xa8>)
 800bf6c:	2201      	movs	r2, #1
 800bf6e:	601a      	str	r2, [r3, #0]
  }

  /* Check the NOR controller state */
  hnor->State = HAL_NOR_STATE_READY; 
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	2201      	movs	r2, #1
 800bf74:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  return HAL_OK;
 800bf78:	2300      	movs	r3, #0
}
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	3710      	adds	r7, #16
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	bd80      	pop	{r7, pc}
 800bf82:	bf00      	nop
 800bf84:	200014b0 	.word	0x200014b0

0800bf88 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800bf88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf8a:	b08f      	sub	sp, #60	; 0x3c
 800bf8c:	af0a      	add	r7, sp, #40	; 0x28
 800bf8e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d101      	bne.n	800bf9a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800bf96:	2301      	movs	r3, #1
 800bf98:	e10f      	b.n	800c1ba <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800bfa6:	b2db      	uxtb	r3, r3
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d106      	bne.n	800bfba <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2200      	movs	r2, #0
 800bfb0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800bfb4:	6878      	ldr	r0, [r7, #4]
 800bfb6:	f009 fa79 	bl	80154ac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	2203      	movs	r2, #3
 800bfbe:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800bfc2:	68bb      	ldr	r3, [r7, #8]
 800bfc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d102      	bne.n	800bfd4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	4618      	mov	r0, r3
 800bfda:	f003 f994 	bl	800f306 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	603b      	str	r3, [r7, #0]
 800bfe4:	687e      	ldr	r6, [r7, #4]
 800bfe6:	466d      	mov	r5, sp
 800bfe8:	f106 0410 	add.w	r4, r6, #16
 800bfec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bfee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bff0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bff2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bff4:	e894 0003 	ldmia.w	r4, {r0, r1}
 800bff8:	e885 0003 	stmia.w	r5, {r0, r1}
 800bffc:	1d33      	adds	r3, r6, #4
 800bffe:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c000:	6838      	ldr	r0, [r7, #0]
 800c002:	f003 f86b 	bl	800f0dc <USB_CoreInit>
 800c006:	4603      	mov	r3, r0
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d005      	beq.n	800c018 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2202      	movs	r2, #2
 800c010:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800c014:	2301      	movs	r3, #1
 800c016:	e0d0      	b.n	800c1ba <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	2100      	movs	r1, #0
 800c01e:	4618      	mov	r0, r3
 800c020:	f003 f982 	bl	800f328 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c024:	2300      	movs	r3, #0
 800c026:	73fb      	strb	r3, [r7, #15]
 800c028:	e04a      	b.n	800c0c0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800c02a:	7bfa      	ldrb	r2, [r7, #15]
 800c02c:	6879      	ldr	r1, [r7, #4]
 800c02e:	4613      	mov	r3, r2
 800c030:	00db      	lsls	r3, r3, #3
 800c032:	1a9b      	subs	r3, r3, r2
 800c034:	009b      	lsls	r3, r3, #2
 800c036:	440b      	add	r3, r1
 800c038:	333d      	adds	r3, #61	; 0x3d
 800c03a:	2201      	movs	r2, #1
 800c03c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800c03e:	7bfa      	ldrb	r2, [r7, #15]
 800c040:	6879      	ldr	r1, [r7, #4]
 800c042:	4613      	mov	r3, r2
 800c044:	00db      	lsls	r3, r3, #3
 800c046:	1a9b      	subs	r3, r3, r2
 800c048:	009b      	lsls	r3, r3, #2
 800c04a:	440b      	add	r3, r1
 800c04c:	333c      	adds	r3, #60	; 0x3c
 800c04e:	7bfa      	ldrb	r2, [r7, #15]
 800c050:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800c052:	7bfa      	ldrb	r2, [r7, #15]
 800c054:	7bfb      	ldrb	r3, [r7, #15]
 800c056:	b298      	uxth	r0, r3
 800c058:	6879      	ldr	r1, [r7, #4]
 800c05a:	4613      	mov	r3, r2
 800c05c:	00db      	lsls	r3, r3, #3
 800c05e:	1a9b      	subs	r3, r3, r2
 800c060:	009b      	lsls	r3, r3, #2
 800c062:	440b      	add	r3, r1
 800c064:	3342      	adds	r3, #66	; 0x42
 800c066:	4602      	mov	r2, r0
 800c068:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800c06a:	7bfa      	ldrb	r2, [r7, #15]
 800c06c:	6879      	ldr	r1, [r7, #4]
 800c06e:	4613      	mov	r3, r2
 800c070:	00db      	lsls	r3, r3, #3
 800c072:	1a9b      	subs	r3, r3, r2
 800c074:	009b      	lsls	r3, r3, #2
 800c076:	440b      	add	r3, r1
 800c078:	333f      	adds	r3, #63	; 0x3f
 800c07a:	2200      	movs	r2, #0
 800c07c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800c07e:	7bfa      	ldrb	r2, [r7, #15]
 800c080:	6879      	ldr	r1, [r7, #4]
 800c082:	4613      	mov	r3, r2
 800c084:	00db      	lsls	r3, r3, #3
 800c086:	1a9b      	subs	r3, r3, r2
 800c088:	009b      	lsls	r3, r3, #2
 800c08a:	440b      	add	r3, r1
 800c08c:	3344      	adds	r3, #68	; 0x44
 800c08e:	2200      	movs	r2, #0
 800c090:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800c092:	7bfa      	ldrb	r2, [r7, #15]
 800c094:	6879      	ldr	r1, [r7, #4]
 800c096:	4613      	mov	r3, r2
 800c098:	00db      	lsls	r3, r3, #3
 800c09a:	1a9b      	subs	r3, r3, r2
 800c09c:	009b      	lsls	r3, r3, #2
 800c09e:	440b      	add	r3, r1
 800c0a0:	3348      	adds	r3, #72	; 0x48
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800c0a6:	7bfa      	ldrb	r2, [r7, #15]
 800c0a8:	6879      	ldr	r1, [r7, #4]
 800c0aa:	4613      	mov	r3, r2
 800c0ac:	00db      	lsls	r3, r3, #3
 800c0ae:	1a9b      	subs	r3, r3, r2
 800c0b0:	009b      	lsls	r3, r3, #2
 800c0b2:	440b      	add	r3, r1
 800c0b4:	3350      	adds	r3, #80	; 0x50
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c0ba:	7bfb      	ldrb	r3, [r7, #15]
 800c0bc:	3301      	adds	r3, #1
 800c0be:	73fb      	strb	r3, [r7, #15]
 800c0c0:	7bfa      	ldrb	r2, [r7, #15]
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	685b      	ldr	r3, [r3, #4]
 800c0c6:	429a      	cmp	r2, r3
 800c0c8:	d3af      	bcc.n	800c02a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	73fb      	strb	r3, [r7, #15]
 800c0ce:	e044      	b.n	800c15a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800c0d0:	7bfa      	ldrb	r2, [r7, #15]
 800c0d2:	6879      	ldr	r1, [r7, #4]
 800c0d4:	4613      	mov	r3, r2
 800c0d6:	00db      	lsls	r3, r3, #3
 800c0d8:	1a9b      	subs	r3, r3, r2
 800c0da:	009b      	lsls	r3, r3, #2
 800c0dc:	440b      	add	r3, r1
 800c0de:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800c0e6:	7bfa      	ldrb	r2, [r7, #15]
 800c0e8:	6879      	ldr	r1, [r7, #4]
 800c0ea:	4613      	mov	r3, r2
 800c0ec:	00db      	lsls	r3, r3, #3
 800c0ee:	1a9b      	subs	r3, r3, r2
 800c0f0:	009b      	lsls	r3, r3, #2
 800c0f2:	440b      	add	r3, r1
 800c0f4:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800c0f8:	7bfa      	ldrb	r2, [r7, #15]
 800c0fa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800c0fc:	7bfa      	ldrb	r2, [r7, #15]
 800c0fe:	6879      	ldr	r1, [r7, #4]
 800c100:	4613      	mov	r3, r2
 800c102:	00db      	lsls	r3, r3, #3
 800c104:	1a9b      	subs	r3, r3, r2
 800c106:	009b      	lsls	r3, r3, #2
 800c108:	440b      	add	r3, r1
 800c10a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800c10e:	2200      	movs	r2, #0
 800c110:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800c112:	7bfa      	ldrb	r2, [r7, #15]
 800c114:	6879      	ldr	r1, [r7, #4]
 800c116:	4613      	mov	r3, r2
 800c118:	00db      	lsls	r3, r3, #3
 800c11a:	1a9b      	subs	r3, r3, r2
 800c11c:	009b      	lsls	r3, r3, #2
 800c11e:	440b      	add	r3, r1
 800c120:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800c124:	2200      	movs	r2, #0
 800c126:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800c128:	7bfa      	ldrb	r2, [r7, #15]
 800c12a:	6879      	ldr	r1, [r7, #4]
 800c12c:	4613      	mov	r3, r2
 800c12e:	00db      	lsls	r3, r3, #3
 800c130:	1a9b      	subs	r3, r3, r2
 800c132:	009b      	lsls	r3, r3, #2
 800c134:	440b      	add	r3, r1
 800c136:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c13a:	2200      	movs	r2, #0
 800c13c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800c13e:	7bfa      	ldrb	r2, [r7, #15]
 800c140:	6879      	ldr	r1, [r7, #4]
 800c142:	4613      	mov	r3, r2
 800c144:	00db      	lsls	r3, r3, #3
 800c146:	1a9b      	subs	r3, r3, r2
 800c148:	009b      	lsls	r3, r3, #2
 800c14a:	440b      	add	r3, r1
 800c14c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800c150:	2200      	movs	r2, #0
 800c152:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c154:	7bfb      	ldrb	r3, [r7, #15]
 800c156:	3301      	adds	r3, #1
 800c158:	73fb      	strb	r3, [r7, #15]
 800c15a:	7bfa      	ldrb	r2, [r7, #15]
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	685b      	ldr	r3, [r3, #4]
 800c160:	429a      	cmp	r2, r3
 800c162:	d3b5      	bcc.n	800c0d0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	603b      	str	r3, [r7, #0]
 800c16a:	687e      	ldr	r6, [r7, #4]
 800c16c:	466d      	mov	r5, sp
 800c16e:	f106 0410 	add.w	r4, r6, #16
 800c172:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c174:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c176:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c178:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c17a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c17e:	e885 0003 	stmia.w	r5, {r0, r1}
 800c182:	1d33      	adds	r3, r6, #4
 800c184:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c186:	6838      	ldr	r0, [r7, #0]
 800c188:	f003 f8f8 	bl	800f37c <USB_DevInit>
 800c18c:	4603      	mov	r3, r0
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d005      	beq.n	800c19e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	2202      	movs	r2, #2
 800c196:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800c19a:	2301      	movs	r3, #1
 800c19c:	e00d      	b.n	800c1ba <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	2201      	movs	r2, #1
 800c1aa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	f004 f8ed 	bl	8010392 <USB_DevDisconnect>

  return HAL_OK;
 800c1b8:	2300      	movs	r3, #0
}
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	3714      	adds	r7, #20
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c1c2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800c1c2:	b580      	push	{r7, lr}
 800c1c4:	b084      	sub	sp, #16
 800c1c6:	af00      	add	r7, sp, #0
 800c1c8:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800c1d6:	2b01      	cmp	r3, #1
 800c1d8:	d101      	bne.n	800c1de <HAL_PCD_Start+0x1c>
 800c1da:	2302      	movs	r3, #2
 800c1dc:	e020      	b.n	800c220 <HAL_PCD_Start+0x5e>
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	2201      	movs	r2, #1
 800c1e2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1ea:	2b01      	cmp	r3, #1
 800c1ec:	d109      	bne.n	800c202 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800c1f2:	2b01      	cmp	r3, #1
 800c1f4:	d005      	beq.n	800c202 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1fa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	4618      	mov	r0, r3
 800c208:	f004 f8ab 	bl	8010362 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	4618      	mov	r0, r3
 800c212:	f003 f867 	bl	800f2e4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	2200      	movs	r2, #0
 800c21a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800c21e:	2300      	movs	r3, #0
}
 800c220:	4618      	mov	r0, r3
 800c222:	3710      	adds	r7, #16
 800c224:	46bd      	mov	sp, r7
 800c226:	bd80      	pop	{r7, pc}

0800c228 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800c228:	b590      	push	{r4, r7, lr}
 800c22a:	b08d      	sub	sp, #52	; 0x34
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c236:	6a3b      	ldr	r3, [r7, #32]
 800c238:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	4618      	mov	r0, r3
 800c240:	f004 f952 	bl	80104e8 <USB_GetMode>
 800c244:	4603      	mov	r3, r0
 800c246:	2b00      	cmp	r3, #0
 800c248:	f040 838e 	bne.w	800c968 <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	4618      	mov	r0, r3
 800c252:	f004 f8b6 	bl	80103c2 <USB_ReadInterrupts>
 800c256:	4603      	mov	r3, r0
 800c258:	2b00      	cmp	r3, #0
 800c25a:	f000 8384 	beq.w	800c966 <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	4618      	mov	r0, r3
 800c264:	f004 f8ad 	bl	80103c2 <USB_ReadInterrupts>
 800c268:	4603      	mov	r3, r0
 800c26a:	f003 0302 	and.w	r3, r3, #2
 800c26e:	2b02      	cmp	r3, #2
 800c270:	d107      	bne.n	800c282 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	695a      	ldr	r2, [r3, #20]
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	f002 0202 	and.w	r2, r2, #2
 800c280:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	4618      	mov	r0, r3
 800c288:	f004 f89b 	bl	80103c2 <USB_ReadInterrupts>
 800c28c:	4603      	mov	r3, r0
 800c28e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c292:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c296:	d17b      	bne.n	800c390 <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 800c298:	2300      	movs	r3, #0
 800c29a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	f004 f8a1 	bl	80103e8 <USB_ReadDevAllOutEpInterrupt>
 800c2a6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800c2a8:	e06f      	b.n	800c38a <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 800c2aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2ac:	f003 0301 	and.w	r3, r3, #1
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d064      	beq.n	800c37e <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2ba:	b2d2      	uxtb	r2, r2
 800c2bc:	4611      	mov	r1, r2
 800c2be:	4618      	mov	r0, r3
 800c2c0:	f004 f8c6 	bl	8010450 <USB_ReadDevOutEPInterrupt>
 800c2c4:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800c2c6:	69bb      	ldr	r3, [r7, #24]
 800c2c8:	f003 0301 	and.w	r3, r3, #1
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d00c      	beq.n	800c2ea <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800c2d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2d2:	015a      	lsls	r2, r3, #5
 800c2d4:	69fb      	ldr	r3, [r7, #28]
 800c2d6:	4413      	add	r3, r2
 800c2d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2dc:	461a      	mov	r2, r3
 800c2de:	2301      	movs	r3, #1
 800c2e0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800c2e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c2e4:	6878      	ldr	r0, [r7, #4]
 800c2e6:	f000 fe0d 	bl	800cf04 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800c2ea:	69bb      	ldr	r3, [r7, #24]
 800c2ec:	f003 0308 	and.w	r3, r3, #8
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d00c      	beq.n	800c30e <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800c2f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c2f6:	6878      	ldr	r0, [r7, #4]
 800c2f8:	f000 ff0c 	bl	800d114 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800c2fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2fe:	015a      	lsls	r2, r3, #5
 800c300:	69fb      	ldr	r3, [r7, #28]
 800c302:	4413      	add	r3, r2
 800c304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c308:	461a      	mov	r2, r3
 800c30a:	2308      	movs	r3, #8
 800c30c:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800c30e:	69bb      	ldr	r3, [r7, #24]
 800c310:	f003 0310 	and.w	r3, r3, #16
 800c314:	2b00      	cmp	r3, #0
 800c316:	d008      	beq.n	800c32a <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800c318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c31a:	015a      	lsls	r2, r3, #5
 800c31c:	69fb      	ldr	r3, [r7, #28]
 800c31e:	4413      	add	r3, r2
 800c320:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c324:	461a      	mov	r2, r3
 800c326:	2310      	movs	r3, #16
 800c328:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800c32a:	69bb      	ldr	r3, [r7, #24]
 800c32c:	f003 0320 	and.w	r3, r3, #32
 800c330:	2b00      	cmp	r3, #0
 800c332:	d015      	beq.n	800c360 <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	691b      	ldr	r3, [r3, #16]
 800c338:	2b01      	cmp	r3, #1
 800c33a:	d108      	bne.n	800c34e <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	6818      	ldr	r0, [r3, #0]
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c346:	461a      	mov	r2, r3
 800c348:	2101      	movs	r1, #1
 800c34a:	f004 f911 	bl	8010570 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c34e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c350:	015a      	lsls	r2, r3, #5
 800c352:	69fb      	ldr	r3, [r7, #28]
 800c354:	4413      	add	r3, r2
 800c356:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c35a:	461a      	mov	r2, r3
 800c35c:	2320      	movs	r3, #32
 800c35e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800c360:	69bb      	ldr	r3, [r7, #24]
 800c362:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c366:	2b00      	cmp	r3, #0
 800c368:	d009      	beq.n	800c37e <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800c36a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c36c:	015a      	lsls	r2, r3, #5
 800c36e:	69fb      	ldr	r3, [r7, #28]
 800c370:	4413      	add	r3, r2
 800c372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c376:	461a      	mov	r2, r3
 800c378:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c37c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800c37e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c380:	3301      	adds	r3, #1
 800c382:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800c384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c386:	085b      	lsrs	r3, r3, #1
 800c388:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800c38a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d18c      	bne.n	800c2aa <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	4618      	mov	r0, r3
 800c396:	f004 f814 	bl	80103c2 <USB_ReadInterrupts>
 800c39a:	4603      	mov	r3, r0
 800c39c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c3a0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c3a4:	f040 80c4 	bne.w	800c530 <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	f004 f835 	bl	801041c <USB_ReadDevAllInEpInterrupt>
 800c3b2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800c3b8:	e0b6      	b.n	800c528 <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800c3ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3bc:	f003 0301 	and.w	r3, r3, #1
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	f000 80ab 	beq.w	800c51c <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3cc:	b2d2      	uxtb	r2, r2
 800c3ce:	4611      	mov	r1, r2
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	f004 f85b 	bl	801048c <USB_ReadDevInEPInterrupt>
 800c3d6:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800c3d8:	69bb      	ldr	r3, [r7, #24]
 800c3da:	f003 0301 	and.w	r3, r3, #1
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d05b      	beq.n	800c49a <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800c3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3e4:	f003 030f 	and.w	r3, r3, #15
 800c3e8:	2201      	movs	r2, #1
 800c3ea:	fa02 f303 	lsl.w	r3, r2, r3
 800c3ee:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800c3f0:	69fb      	ldr	r3, [r7, #28]
 800c3f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c3f8:	697b      	ldr	r3, [r7, #20]
 800c3fa:	43db      	mvns	r3, r3
 800c3fc:	69f9      	ldr	r1, [r7, #28]
 800c3fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c402:	4013      	ands	r3, r2
 800c404:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800c406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c408:	015a      	lsls	r2, r3, #5
 800c40a:	69fb      	ldr	r3, [r7, #28]
 800c40c:	4413      	add	r3, r2
 800c40e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c412:	461a      	mov	r2, r3
 800c414:	2301      	movs	r3, #1
 800c416:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	691b      	ldr	r3, [r3, #16]
 800c41c:	2b01      	cmp	r3, #1
 800c41e:	d11b      	bne.n	800c458 <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800c420:	6879      	ldr	r1, [r7, #4]
 800c422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c424:	4613      	mov	r3, r2
 800c426:	00db      	lsls	r3, r3, #3
 800c428:	1a9b      	subs	r3, r3, r2
 800c42a:	009b      	lsls	r3, r3, #2
 800c42c:	440b      	add	r3, r1
 800c42e:	3348      	adds	r3, #72	; 0x48
 800c430:	6819      	ldr	r1, [r3, #0]
 800c432:	6878      	ldr	r0, [r7, #4]
 800c434:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c436:	4613      	mov	r3, r2
 800c438:	00db      	lsls	r3, r3, #3
 800c43a:	1a9b      	subs	r3, r3, r2
 800c43c:	009b      	lsls	r3, r3, #2
 800c43e:	4403      	add	r3, r0
 800c440:	3344      	adds	r3, #68	; 0x44
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	4419      	add	r1, r3
 800c446:	6878      	ldr	r0, [r7, #4]
 800c448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c44a:	4613      	mov	r3, r2
 800c44c:	00db      	lsls	r3, r3, #3
 800c44e:	1a9b      	subs	r3, r3, r2
 800c450:	009b      	lsls	r3, r3, #2
 800c452:	4403      	add	r3, r0
 800c454:	3348      	adds	r3, #72	; 0x48
 800c456:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800c458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c45a:	b2db      	uxtb	r3, r3
 800c45c:	4619      	mov	r1, r3
 800c45e:	6878      	ldr	r0, [r7, #4]
 800c460:	f009 f8a5 	bl	80155ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	691b      	ldr	r3, [r3, #16]
 800c468:	2b01      	cmp	r3, #1
 800c46a:	d116      	bne.n	800c49a <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800c46c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d113      	bne.n	800c49a <HAL_PCD_IRQHandler+0x272>
 800c472:	6879      	ldr	r1, [r7, #4]
 800c474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c476:	4613      	mov	r3, r2
 800c478:	00db      	lsls	r3, r3, #3
 800c47a:	1a9b      	subs	r3, r3, r2
 800c47c:	009b      	lsls	r3, r3, #2
 800c47e:	440b      	add	r3, r1
 800c480:	3350      	adds	r3, #80	; 0x50
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d108      	bne.n	800c49a <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	6818      	ldr	r0, [r3, #0]
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c492:	461a      	mov	r2, r3
 800c494:	2101      	movs	r1, #1
 800c496:	f004 f86b 	bl	8010570 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800c49a:	69bb      	ldr	r3, [r7, #24]
 800c49c:	f003 0308 	and.w	r3, r3, #8
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d008      	beq.n	800c4b6 <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800c4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4a6:	015a      	lsls	r2, r3, #5
 800c4a8:	69fb      	ldr	r3, [r7, #28]
 800c4aa:	4413      	add	r3, r2
 800c4ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4b0:	461a      	mov	r2, r3
 800c4b2:	2308      	movs	r3, #8
 800c4b4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800c4b6:	69bb      	ldr	r3, [r7, #24]
 800c4b8:	f003 0310 	and.w	r3, r3, #16
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d008      	beq.n	800c4d2 <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800c4c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4c2:	015a      	lsls	r2, r3, #5
 800c4c4:	69fb      	ldr	r3, [r7, #28]
 800c4c6:	4413      	add	r3, r2
 800c4c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4cc:	461a      	mov	r2, r3
 800c4ce:	2310      	movs	r3, #16
 800c4d0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800c4d2:	69bb      	ldr	r3, [r7, #24]
 800c4d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d008      	beq.n	800c4ee <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800c4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4de:	015a      	lsls	r2, r3, #5
 800c4e0:	69fb      	ldr	r3, [r7, #28]
 800c4e2:	4413      	add	r3, r2
 800c4e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4e8:	461a      	mov	r2, r3
 800c4ea:	2340      	movs	r3, #64	; 0x40
 800c4ec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800c4ee:	69bb      	ldr	r3, [r7, #24]
 800c4f0:	f003 0302 	and.w	r3, r3, #2
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d008      	beq.n	800c50a <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800c4f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4fa:	015a      	lsls	r2, r3, #5
 800c4fc:	69fb      	ldr	r3, [r7, #28]
 800c4fe:	4413      	add	r3, r2
 800c500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c504:	461a      	mov	r2, r3
 800c506:	2302      	movs	r3, #2
 800c508:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800c50a:	69bb      	ldr	r3, [r7, #24]
 800c50c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c510:	2b00      	cmp	r3, #0
 800c512:	d003      	beq.n	800c51c <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800c514:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c516:	6878      	ldr	r0, [r7, #4]
 800c518:	f000 fc67 	bl	800cdea <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800c51c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c51e:	3301      	adds	r3, #1
 800c520:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800c522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c524:	085b      	lsrs	r3, r3, #1
 800c526:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800c528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	f47f af45 	bne.w	800c3ba <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	4618      	mov	r0, r3
 800c536:	f003 ff44 	bl	80103c2 <USB_ReadInterrupts>
 800c53a:	4603      	mov	r3, r0
 800c53c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c540:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c544:	d122      	bne.n	800c58c <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800c546:	69fb      	ldr	r3, [r7, #28]
 800c548:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c54c:	685b      	ldr	r3, [r3, #4]
 800c54e:	69fa      	ldr	r2, [r7, #28]
 800c550:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c554:	f023 0301 	bic.w	r3, r3, #1
 800c558:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800c560:	2b01      	cmp	r3, #1
 800c562:	d108      	bne.n	800c576 <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	2200      	movs	r2, #0
 800c568:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800c56c:	2100      	movs	r1, #0
 800c56e:	6878      	ldr	r0, [r7, #4]
 800c570:	f000 fe88 	bl	800d284 <HAL_PCDEx_LPM_Callback>
 800c574:	e002      	b.n	800c57c <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800c576:	6878      	ldr	r0, [r7, #4]
 800c578:	f009 f890 	bl	801569c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	695a      	ldr	r2, [r3, #20]
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800c58a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	4618      	mov	r0, r3
 800c592:	f003 ff16 	bl	80103c2 <USB_ReadInterrupts>
 800c596:	4603      	mov	r3, r0
 800c598:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c59c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c5a0:	d112      	bne.n	800c5c8 <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800c5a2:	69fb      	ldr	r3, [r7, #28]
 800c5a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5a8:	689b      	ldr	r3, [r3, #8]
 800c5aa:	f003 0301 	and.w	r3, r3, #1
 800c5ae:	2b01      	cmp	r3, #1
 800c5b0:	d102      	bne.n	800c5b8 <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800c5b2:	6878      	ldr	r0, [r7, #4]
 800c5b4:	f009 f84c 	bl	8015650 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	695a      	ldr	r2, [r3, #20]
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800c5c6:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	f003 fef8 	bl	80103c2 <USB_ReadInterrupts>
 800c5d2:	4603      	mov	r3, r0
 800c5d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c5d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c5dc:	f040 80a7 	bne.w	800c72e <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800c5e0:	69fb      	ldr	r3, [r7, #28]
 800c5e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5e6:	685b      	ldr	r3, [r3, #4]
 800c5e8:	69fa      	ldr	r2, [r7, #28]
 800c5ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c5ee:	f023 0301 	bic.w	r3, r3, #1
 800c5f2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	2110      	movs	r1, #16
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	f003 f830 	bl	800f660 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c600:	2300      	movs	r3, #0
 800c602:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c604:	e036      	b.n	800c674 <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800c606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c608:	015a      	lsls	r2, r3, #5
 800c60a:	69fb      	ldr	r3, [r7, #28]
 800c60c:	4413      	add	r3, r2
 800c60e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c612:	461a      	mov	r2, r3
 800c614:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c618:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c61a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c61c:	015a      	lsls	r2, r3, #5
 800c61e:	69fb      	ldr	r3, [r7, #28]
 800c620:	4413      	add	r3, r2
 800c622:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c62a:	0151      	lsls	r1, r2, #5
 800c62c:	69fa      	ldr	r2, [r7, #28]
 800c62e:	440a      	add	r2, r1
 800c630:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c634:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c638:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800c63a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c63c:	015a      	lsls	r2, r3, #5
 800c63e:	69fb      	ldr	r3, [r7, #28]
 800c640:	4413      	add	r3, r2
 800c642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c646:	461a      	mov	r2, r3
 800c648:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c64c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c64e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c650:	015a      	lsls	r2, r3, #5
 800c652:	69fb      	ldr	r3, [r7, #28]
 800c654:	4413      	add	r3, r2
 800c656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c65e:	0151      	lsls	r1, r2, #5
 800c660:	69fa      	ldr	r2, [r7, #28]
 800c662:	440a      	add	r2, r1
 800c664:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c668:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c66c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c66e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c670:	3301      	adds	r3, #1
 800c672:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	685b      	ldr	r3, [r3, #4]
 800c678:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c67a:	429a      	cmp	r2, r3
 800c67c:	d3c3      	bcc.n	800c606 <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800c67e:	69fb      	ldr	r3, [r7, #28]
 800c680:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c684:	69db      	ldr	r3, [r3, #28]
 800c686:	69fa      	ldr	r2, [r7, #28]
 800c688:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c68c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800c690:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c696:	2b00      	cmp	r3, #0
 800c698:	d016      	beq.n	800c6c8 <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800c69a:	69fb      	ldr	r3, [r7, #28]
 800c69c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c6a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c6a4:	69fa      	ldr	r2, [r7, #28]
 800c6a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c6aa:	f043 030b 	orr.w	r3, r3, #11
 800c6ae:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800c6b2:	69fb      	ldr	r3, [r7, #28]
 800c6b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c6b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c6ba:	69fa      	ldr	r2, [r7, #28]
 800c6bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c6c0:	f043 030b 	orr.w	r3, r3, #11
 800c6c4:	6453      	str	r3, [r2, #68]	; 0x44
 800c6c6:	e015      	b.n	800c6f4 <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800c6c8:	69fb      	ldr	r3, [r7, #28]
 800c6ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c6ce:	695b      	ldr	r3, [r3, #20]
 800c6d0:	69fa      	ldr	r2, [r7, #28]
 800c6d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c6d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c6da:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800c6de:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800c6e0:	69fb      	ldr	r3, [r7, #28]
 800c6e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c6e6:	691b      	ldr	r3, [r3, #16]
 800c6e8:	69fa      	ldr	r2, [r7, #28]
 800c6ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c6ee:	f043 030b 	orr.w	r3, r3, #11
 800c6f2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800c6f4:	69fb      	ldr	r3, [r7, #28]
 800c6f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	69fa      	ldr	r2, [r7, #28]
 800c6fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c702:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800c706:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	6818      	ldr	r0, [r3, #0]
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	691b      	ldr	r3, [r3, #16]
 800c710:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800c718:	461a      	mov	r2, r3
 800c71a:	f003 ff29 	bl	8010570 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	695a      	ldr	r2, [r3, #20]
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800c72c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	4618      	mov	r0, r3
 800c734:	f003 fe45 	bl	80103c2 <USB_ReadInterrupts>
 800c738:	4603      	mov	r3, r0
 800c73a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c73e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c742:	d124      	bne.n	800c78e <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	4618      	mov	r0, r3
 800c74a:	f003 fedb 	bl	8010504 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	4618      	mov	r0, r3
 800c754:	f002 ffe5 	bl	800f722 <USB_GetDevSpeed>
 800c758:	4603      	mov	r3, r0
 800c75a:	461a      	mov	r2, r3
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681c      	ldr	r4, [r3, #0]
 800c764:	f001 f9c8 	bl	800daf8 <HAL_RCC_GetHCLKFreq>
 800c768:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800c76e:	b2db      	uxtb	r3, r3
 800c770:	461a      	mov	r2, r3
 800c772:	4620      	mov	r0, r4
 800c774:	f002 fd14 	bl	800f1a0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800c778:	6878      	ldr	r0, [r7, #4]
 800c77a:	f008 ff40 	bl	80155fe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	695a      	ldr	r2, [r3, #20]
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800c78c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	4618      	mov	r0, r3
 800c794:	f003 fe15 	bl	80103c2 <USB_ReadInterrupts>
 800c798:	4603      	mov	r3, r0
 800c79a:	f003 0310 	and.w	r3, r3, #16
 800c79e:	2b10      	cmp	r3, #16
 800c7a0:	d161      	bne.n	800c866 <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	699a      	ldr	r2, [r3, #24]
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	f022 0210 	bic.w	r2, r2, #16
 800c7b0:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800c7b2:	6a3b      	ldr	r3, [r7, #32]
 800c7b4:	6a1b      	ldr	r3, [r3, #32]
 800c7b6:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800c7b8:	693b      	ldr	r3, [r7, #16]
 800c7ba:	f003 020f 	and.w	r2, r3, #15
 800c7be:	4613      	mov	r3, r2
 800c7c0:	00db      	lsls	r3, r3, #3
 800c7c2:	1a9b      	subs	r3, r3, r2
 800c7c4:	009b      	lsls	r3, r3, #2
 800c7c6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800c7ca:	687a      	ldr	r2, [r7, #4]
 800c7cc:	4413      	add	r3, r2
 800c7ce:	3304      	adds	r3, #4
 800c7d0:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800c7d2:	693b      	ldr	r3, [r7, #16]
 800c7d4:	0c5b      	lsrs	r3, r3, #17
 800c7d6:	f003 030f 	and.w	r3, r3, #15
 800c7da:	2b02      	cmp	r3, #2
 800c7dc:	d124      	bne.n	800c828 <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800c7de:	693a      	ldr	r2, [r7, #16]
 800c7e0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800c7e4:	4013      	ands	r3, r2
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d035      	beq.n	800c856 <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800c7ee:	693b      	ldr	r3, [r7, #16]
 800c7f0:	091b      	lsrs	r3, r3, #4
 800c7f2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800c7f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c7f8:	b29b      	uxth	r3, r3
 800c7fa:	461a      	mov	r2, r3
 800c7fc:	6a38      	ldr	r0, [r7, #32]
 800c7fe:	f003 fc8d 	bl	801011c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	68da      	ldr	r2, [r3, #12]
 800c806:	693b      	ldr	r3, [r7, #16]
 800c808:	091b      	lsrs	r3, r3, #4
 800c80a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c80e:	441a      	add	r2, r3
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	699a      	ldr	r2, [r3, #24]
 800c818:	693b      	ldr	r3, [r7, #16]
 800c81a:	091b      	lsrs	r3, r3, #4
 800c81c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c820:	441a      	add	r2, r3
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	619a      	str	r2, [r3, #24]
 800c826:	e016      	b.n	800c856 <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800c828:	693b      	ldr	r3, [r7, #16]
 800c82a:	0c5b      	lsrs	r3, r3, #17
 800c82c:	f003 030f 	and.w	r3, r3, #15
 800c830:	2b06      	cmp	r3, #6
 800c832:	d110      	bne.n	800c856 <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c83a:	2208      	movs	r2, #8
 800c83c:	4619      	mov	r1, r3
 800c83e:	6a38      	ldr	r0, [r7, #32]
 800c840:	f003 fc6c 	bl	801011c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	699a      	ldr	r2, [r3, #24]
 800c848:	693b      	ldr	r3, [r7, #16]
 800c84a:	091b      	lsrs	r3, r3, #4
 800c84c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c850:	441a      	add	r2, r3
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	699a      	ldr	r2, [r3, #24]
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	f042 0210 	orr.w	r2, r2, #16
 800c864:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	4618      	mov	r0, r3
 800c86c:	f003 fda9 	bl	80103c2 <USB_ReadInterrupts>
 800c870:	4603      	mov	r3, r0
 800c872:	f003 0308 	and.w	r3, r3, #8
 800c876:	2b08      	cmp	r3, #8
 800c878:	d10a      	bne.n	800c890 <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800c87a:	6878      	ldr	r0, [r7, #4]
 800c87c:	f008 feb1 	bl	80155e2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	695a      	ldr	r2, [r3, #20]
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	f002 0208 	and.w	r2, r2, #8
 800c88e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	4618      	mov	r0, r3
 800c896:	f003 fd94 	bl	80103c2 <USB_ReadInterrupts>
 800c89a:	4603      	mov	r3, r0
 800c89c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c8a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c8a4:	d10f      	bne.n	800c8c6 <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800c8aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ac:	b2db      	uxtb	r3, r3
 800c8ae:	4619      	mov	r1, r3
 800c8b0:	6878      	ldr	r0, [r7, #4]
 800c8b2:	f008 ff13 	bl	80156dc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	695a      	ldr	r2, [r3, #20]
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800c8c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	f003 fd79 	bl	80103c2 <USB_ReadInterrupts>
 800c8d0:	4603      	mov	r3, r0
 800c8d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c8d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c8da:	d10f      	bne.n	800c8fc <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800c8dc:	2300      	movs	r3, #0
 800c8de:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800c8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8e2:	b2db      	uxtb	r3, r3
 800c8e4:	4619      	mov	r1, r3
 800c8e6:	6878      	ldr	r0, [r7, #4]
 800c8e8:	f008 fee6 	bl	80156b8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	695a      	ldr	r2, [r3, #20]
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800c8fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	4618      	mov	r0, r3
 800c902:	f003 fd5e 	bl	80103c2 <USB_ReadInterrupts>
 800c906:	4603      	mov	r3, r0
 800c908:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c90c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c910:	d10a      	bne.n	800c928 <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800c912:	6878      	ldr	r0, [r7, #4]
 800c914:	f008 fef4 	bl	8015700 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	695a      	ldr	r2, [r3, #20]
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800c926:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	4618      	mov	r0, r3
 800c92e:	f003 fd48 	bl	80103c2 <USB_ReadInterrupts>
 800c932:	4603      	mov	r3, r0
 800c934:	f003 0304 	and.w	r3, r3, #4
 800c938:	2b04      	cmp	r3, #4
 800c93a:	d115      	bne.n	800c968 <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	685b      	ldr	r3, [r3, #4]
 800c942:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800c944:	693b      	ldr	r3, [r7, #16]
 800c946:	f003 0304 	and.w	r3, r3, #4
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d002      	beq.n	800c954 <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800c94e:	6878      	ldr	r0, [r7, #4]
 800c950:	f008 fee4 	bl	801571c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	6859      	ldr	r1, [r3, #4]
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	693a      	ldr	r2, [r7, #16]
 800c960:	430a      	orrs	r2, r1
 800c962:	605a      	str	r2, [r3, #4]
 800c964:	e000      	b.n	800c968 <HAL_PCD_IRQHandler+0x740>
      return;
 800c966:	bf00      	nop
    }
  }
}
 800c968:	3734      	adds	r7, #52	; 0x34
 800c96a:	46bd      	mov	sp, r7
 800c96c:	bd90      	pop	{r4, r7, pc}

0800c96e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800c96e:	b580      	push	{r7, lr}
 800c970:	b082      	sub	sp, #8
 800c972:	af00      	add	r7, sp, #0
 800c974:	6078      	str	r0, [r7, #4]
 800c976:	460b      	mov	r3, r1
 800c978:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800c980:	2b01      	cmp	r3, #1
 800c982:	d101      	bne.n	800c988 <HAL_PCD_SetAddress+0x1a>
 800c984:	2302      	movs	r3, #2
 800c986:	e013      	b.n	800c9b0 <HAL_PCD_SetAddress+0x42>
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	2201      	movs	r2, #1
 800c98c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	78fa      	ldrb	r2, [r7, #3]
 800c994:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	78fa      	ldrb	r2, [r7, #3]
 800c99e:	4611      	mov	r1, r2
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	f003 fcb8 	bl	8010316 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	2200      	movs	r2, #0
 800c9aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800c9ae:	2300      	movs	r3, #0
}
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	3708      	adds	r7, #8
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	bd80      	pop	{r7, pc}

0800c9b8 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b084      	sub	sp, #16
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	6078      	str	r0, [r7, #4]
 800c9c0:	4608      	mov	r0, r1
 800c9c2:	4611      	mov	r1, r2
 800c9c4:	461a      	mov	r2, r3
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	70fb      	strb	r3, [r7, #3]
 800c9ca:	460b      	mov	r3, r1
 800c9cc:	803b      	strh	r3, [r7, #0]
 800c9ce:	4613      	mov	r3, r2
 800c9d0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800c9d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	da0f      	bge.n	800c9fe <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c9de:	78fb      	ldrb	r3, [r7, #3]
 800c9e0:	f003 020f 	and.w	r2, r3, #15
 800c9e4:	4613      	mov	r3, r2
 800c9e6:	00db      	lsls	r3, r3, #3
 800c9e8:	1a9b      	subs	r3, r3, r2
 800c9ea:	009b      	lsls	r3, r3, #2
 800c9ec:	3338      	adds	r3, #56	; 0x38
 800c9ee:	687a      	ldr	r2, [r7, #4]
 800c9f0:	4413      	add	r3, r2
 800c9f2:	3304      	adds	r3, #4
 800c9f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	2201      	movs	r2, #1
 800c9fa:	705a      	strb	r2, [r3, #1]
 800c9fc:	e00f      	b.n	800ca1e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c9fe:	78fb      	ldrb	r3, [r7, #3]
 800ca00:	f003 020f 	and.w	r2, r3, #15
 800ca04:	4613      	mov	r3, r2
 800ca06:	00db      	lsls	r3, r3, #3
 800ca08:	1a9b      	subs	r3, r3, r2
 800ca0a:	009b      	lsls	r3, r3, #2
 800ca0c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800ca10:	687a      	ldr	r2, [r7, #4]
 800ca12:	4413      	add	r3, r2
 800ca14:	3304      	adds	r3, #4
 800ca16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	2200      	movs	r2, #0
 800ca1c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800ca1e:	78fb      	ldrb	r3, [r7, #3]
 800ca20:	f003 030f 	and.w	r3, r3, #15
 800ca24:	b2da      	uxtb	r2, r3
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800ca2a:	883a      	ldrh	r2, [r7, #0]
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	78ba      	ldrb	r2, [r7, #2]
 800ca34:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	785b      	ldrb	r3, [r3, #1]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d004      	beq.n	800ca48 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	781b      	ldrb	r3, [r3, #0]
 800ca42:	b29a      	uxth	r2, r3
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800ca48:	78bb      	ldrb	r3, [r7, #2]
 800ca4a:	2b02      	cmp	r3, #2
 800ca4c:	d102      	bne.n	800ca54 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	2200      	movs	r2, #0
 800ca52:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800ca5a:	2b01      	cmp	r3, #1
 800ca5c:	d101      	bne.n	800ca62 <HAL_PCD_EP_Open+0xaa>
 800ca5e:	2302      	movs	r3, #2
 800ca60:	e00e      	b.n	800ca80 <HAL_PCD_EP_Open+0xc8>
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	2201      	movs	r2, #1
 800ca66:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	68f9      	ldr	r1, [r7, #12]
 800ca70:	4618      	mov	r0, r3
 800ca72:	f002 fe7b 	bl	800f76c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	2200      	movs	r2, #0
 800ca7a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800ca7e:	7afb      	ldrb	r3, [r7, #11]
}
 800ca80:	4618      	mov	r0, r3
 800ca82:	3710      	adds	r7, #16
 800ca84:	46bd      	mov	sp, r7
 800ca86:	bd80      	pop	{r7, pc}

0800ca88 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	b084      	sub	sp, #16
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
 800ca90:	460b      	mov	r3, r1
 800ca92:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800ca94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	da0f      	bge.n	800cabc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ca9c:	78fb      	ldrb	r3, [r7, #3]
 800ca9e:	f003 020f 	and.w	r2, r3, #15
 800caa2:	4613      	mov	r3, r2
 800caa4:	00db      	lsls	r3, r3, #3
 800caa6:	1a9b      	subs	r3, r3, r2
 800caa8:	009b      	lsls	r3, r3, #2
 800caaa:	3338      	adds	r3, #56	; 0x38
 800caac:	687a      	ldr	r2, [r7, #4]
 800caae:	4413      	add	r3, r2
 800cab0:	3304      	adds	r3, #4
 800cab2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	2201      	movs	r2, #1
 800cab8:	705a      	strb	r2, [r3, #1]
 800caba:	e00f      	b.n	800cadc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cabc:	78fb      	ldrb	r3, [r7, #3]
 800cabe:	f003 020f 	and.w	r2, r3, #15
 800cac2:	4613      	mov	r3, r2
 800cac4:	00db      	lsls	r3, r3, #3
 800cac6:	1a9b      	subs	r3, r3, r2
 800cac8:	009b      	lsls	r3, r3, #2
 800caca:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800cace:	687a      	ldr	r2, [r7, #4]
 800cad0:	4413      	add	r3, r2
 800cad2:	3304      	adds	r3, #4
 800cad4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	2200      	movs	r2, #0
 800cada:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800cadc:	78fb      	ldrb	r3, [r7, #3]
 800cade:	f003 030f 	and.w	r3, r3, #15
 800cae2:	b2da      	uxtb	r2, r3
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800caee:	2b01      	cmp	r3, #1
 800caf0:	d101      	bne.n	800caf6 <HAL_PCD_EP_Close+0x6e>
 800caf2:	2302      	movs	r3, #2
 800caf4:	e00e      	b.n	800cb14 <HAL_PCD_EP_Close+0x8c>
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	2201      	movs	r2, #1
 800cafa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	68f9      	ldr	r1, [r7, #12]
 800cb04:	4618      	mov	r0, r3
 800cb06:	f002 feb9 	bl	800f87c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	2200      	movs	r2, #0
 800cb0e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800cb12:	2300      	movs	r3, #0
}
 800cb14:	4618      	mov	r0, r3
 800cb16:	3710      	adds	r7, #16
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	bd80      	pop	{r7, pc}

0800cb1c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800cb1c:	b580      	push	{r7, lr}
 800cb1e:	b086      	sub	sp, #24
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	60f8      	str	r0, [r7, #12]
 800cb24:	607a      	str	r2, [r7, #4]
 800cb26:	603b      	str	r3, [r7, #0]
 800cb28:	460b      	mov	r3, r1
 800cb2a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cb2c:	7afb      	ldrb	r3, [r7, #11]
 800cb2e:	f003 020f 	and.w	r2, r3, #15
 800cb32:	4613      	mov	r3, r2
 800cb34:	00db      	lsls	r3, r3, #3
 800cb36:	1a9b      	subs	r3, r3, r2
 800cb38:	009b      	lsls	r3, r3, #2
 800cb3a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800cb3e:	68fa      	ldr	r2, [r7, #12]
 800cb40:	4413      	add	r3, r2
 800cb42:	3304      	adds	r3, #4
 800cb44:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800cb46:	697b      	ldr	r3, [r7, #20]
 800cb48:	687a      	ldr	r2, [r7, #4]
 800cb4a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800cb4c:	697b      	ldr	r3, [r7, #20]
 800cb4e:	683a      	ldr	r2, [r7, #0]
 800cb50:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800cb52:	697b      	ldr	r3, [r7, #20]
 800cb54:	2200      	movs	r2, #0
 800cb56:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800cb58:	697b      	ldr	r3, [r7, #20]
 800cb5a:	2200      	movs	r2, #0
 800cb5c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800cb5e:	7afb      	ldrb	r3, [r7, #11]
 800cb60:	f003 030f 	and.w	r3, r3, #15
 800cb64:	b2da      	uxtb	r2, r3
 800cb66:	697b      	ldr	r3, [r7, #20]
 800cb68:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	691b      	ldr	r3, [r3, #16]
 800cb6e:	2b01      	cmp	r3, #1
 800cb70:	d102      	bne.n	800cb78 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800cb72:	687a      	ldr	r2, [r7, #4]
 800cb74:	697b      	ldr	r3, [r7, #20]
 800cb76:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800cb78:	7afb      	ldrb	r3, [r7, #11]
 800cb7a:	f003 030f 	and.w	r3, r3, #15
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d109      	bne.n	800cb96 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	6818      	ldr	r0, [r3, #0]
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	691b      	ldr	r3, [r3, #16]
 800cb8a:	b2db      	uxtb	r3, r3
 800cb8c:	461a      	mov	r2, r3
 800cb8e:	6979      	ldr	r1, [r7, #20]
 800cb90:	f003 f93c 	bl	800fe0c <USB_EP0StartXfer>
 800cb94:	e008      	b.n	800cba8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	6818      	ldr	r0, [r3, #0]
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	691b      	ldr	r3, [r3, #16]
 800cb9e:	b2db      	uxtb	r3, r3
 800cba0:	461a      	mov	r2, r3
 800cba2:	6979      	ldr	r1, [r7, #20]
 800cba4:	f002 feee 	bl	800f984 <USB_EPStartXfer>
  }

  return HAL_OK;
 800cba8:	2300      	movs	r3, #0
}
 800cbaa:	4618      	mov	r0, r3
 800cbac:	3718      	adds	r7, #24
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	bd80      	pop	{r7, pc}

0800cbb2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800cbb2:	b480      	push	{r7}
 800cbb4:	b083      	sub	sp, #12
 800cbb6:	af00      	add	r7, sp, #0
 800cbb8:	6078      	str	r0, [r7, #4]
 800cbba:	460b      	mov	r3, r1
 800cbbc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800cbbe:	78fb      	ldrb	r3, [r7, #3]
 800cbc0:	f003 020f 	and.w	r2, r3, #15
 800cbc4:	6879      	ldr	r1, [r7, #4]
 800cbc6:	4613      	mov	r3, r2
 800cbc8:	00db      	lsls	r3, r3, #3
 800cbca:	1a9b      	subs	r3, r3, r2
 800cbcc:	009b      	lsls	r3, r3, #2
 800cbce:	440b      	add	r3, r1
 800cbd0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800cbd4:	681b      	ldr	r3, [r3, #0]
}
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	370c      	adds	r7, #12
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe0:	4770      	bx	lr

0800cbe2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800cbe2:	b580      	push	{r7, lr}
 800cbe4:	b086      	sub	sp, #24
 800cbe6:	af00      	add	r7, sp, #0
 800cbe8:	60f8      	str	r0, [r7, #12]
 800cbea:	607a      	str	r2, [r7, #4]
 800cbec:	603b      	str	r3, [r7, #0]
 800cbee:	460b      	mov	r3, r1
 800cbf0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cbf2:	7afb      	ldrb	r3, [r7, #11]
 800cbf4:	f003 020f 	and.w	r2, r3, #15
 800cbf8:	4613      	mov	r3, r2
 800cbfa:	00db      	lsls	r3, r3, #3
 800cbfc:	1a9b      	subs	r3, r3, r2
 800cbfe:	009b      	lsls	r3, r3, #2
 800cc00:	3338      	adds	r3, #56	; 0x38
 800cc02:	68fa      	ldr	r2, [r7, #12]
 800cc04:	4413      	add	r3, r2
 800cc06:	3304      	adds	r3, #4
 800cc08:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800cc0a:	697b      	ldr	r3, [r7, #20]
 800cc0c:	687a      	ldr	r2, [r7, #4]
 800cc0e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800cc10:	697b      	ldr	r3, [r7, #20]
 800cc12:	683a      	ldr	r2, [r7, #0]
 800cc14:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800cc16:	697b      	ldr	r3, [r7, #20]
 800cc18:	2200      	movs	r2, #0
 800cc1a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800cc1c:	697b      	ldr	r3, [r7, #20]
 800cc1e:	2201      	movs	r2, #1
 800cc20:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800cc22:	7afb      	ldrb	r3, [r7, #11]
 800cc24:	f003 030f 	and.w	r3, r3, #15
 800cc28:	b2da      	uxtb	r2, r3
 800cc2a:	697b      	ldr	r3, [r7, #20]
 800cc2c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	691b      	ldr	r3, [r3, #16]
 800cc32:	2b01      	cmp	r3, #1
 800cc34:	d102      	bne.n	800cc3c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800cc36:	687a      	ldr	r2, [r7, #4]
 800cc38:	697b      	ldr	r3, [r7, #20]
 800cc3a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800cc3c:	7afb      	ldrb	r3, [r7, #11]
 800cc3e:	f003 030f 	and.w	r3, r3, #15
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d109      	bne.n	800cc5a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	6818      	ldr	r0, [r3, #0]
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	691b      	ldr	r3, [r3, #16]
 800cc4e:	b2db      	uxtb	r3, r3
 800cc50:	461a      	mov	r2, r3
 800cc52:	6979      	ldr	r1, [r7, #20]
 800cc54:	f003 f8da 	bl	800fe0c <USB_EP0StartXfer>
 800cc58:	e008      	b.n	800cc6c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	6818      	ldr	r0, [r3, #0]
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	691b      	ldr	r3, [r3, #16]
 800cc62:	b2db      	uxtb	r3, r3
 800cc64:	461a      	mov	r2, r3
 800cc66:	6979      	ldr	r1, [r7, #20]
 800cc68:	f002 fe8c 	bl	800f984 <USB_EPStartXfer>
  }

  return HAL_OK;
 800cc6c:	2300      	movs	r3, #0
}
 800cc6e:	4618      	mov	r0, r3
 800cc70:	3718      	adds	r7, #24
 800cc72:	46bd      	mov	sp, r7
 800cc74:	bd80      	pop	{r7, pc}

0800cc76 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800cc76:	b580      	push	{r7, lr}
 800cc78:	b084      	sub	sp, #16
 800cc7a:	af00      	add	r7, sp, #0
 800cc7c:	6078      	str	r0, [r7, #4]
 800cc7e:	460b      	mov	r3, r1
 800cc80:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800cc82:	78fb      	ldrb	r3, [r7, #3]
 800cc84:	f003 020f 	and.w	r2, r3, #15
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	685b      	ldr	r3, [r3, #4]
 800cc8c:	429a      	cmp	r2, r3
 800cc8e:	d901      	bls.n	800cc94 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800cc90:	2301      	movs	r3, #1
 800cc92:	e050      	b.n	800cd36 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800cc94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	da0f      	bge.n	800ccbc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cc9c:	78fb      	ldrb	r3, [r7, #3]
 800cc9e:	f003 020f 	and.w	r2, r3, #15
 800cca2:	4613      	mov	r3, r2
 800cca4:	00db      	lsls	r3, r3, #3
 800cca6:	1a9b      	subs	r3, r3, r2
 800cca8:	009b      	lsls	r3, r3, #2
 800ccaa:	3338      	adds	r3, #56	; 0x38
 800ccac:	687a      	ldr	r2, [r7, #4]
 800ccae:	4413      	add	r3, r2
 800ccb0:	3304      	adds	r3, #4
 800ccb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	2201      	movs	r2, #1
 800ccb8:	705a      	strb	r2, [r3, #1]
 800ccba:	e00d      	b.n	800ccd8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800ccbc:	78fa      	ldrb	r2, [r7, #3]
 800ccbe:	4613      	mov	r3, r2
 800ccc0:	00db      	lsls	r3, r3, #3
 800ccc2:	1a9b      	subs	r3, r3, r2
 800ccc4:	009b      	lsls	r3, r3, #2
 800ccc6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800ccca:	687a      	ldr	r2, [r7, #4]
 800cccc:	4413      	add	r3, r2
 800ccce:	3304      	adds	r3, #4
 800ccd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	2201      	movs	r2, #1
 800ccdc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ccde:	78fb      	ldrb	r3, [r7, #3]
 800cce0:	f003 030f 	and.w	r3, r3, #15
 800cce4:	b2da      	uxtb	r2, r3
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800ccf0:	2b01      	cmp	r3, #1
 800ccf2:	d101      	bne.n	800ccf8 <HAL_PCD_EP_SetStall+0x82>
 800ccf4:	2302      	movs	r3, #2
 800ccf6:	e01e      	b.n	800cd36 <HAL_PCD_EP_SetStall+0xc0>
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	2201      	movs	r2, #1
 800ccfc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	68f9      	ldr	r1, [r7, #12]
 800cd06:	4618      	mov	r0, r3
 800cd08:	f003 fa31 	bl	801016e <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800cd0c:	78fb      	ldrb	r3, [r7, #3]
 800cd0e:	f003 030f 	and.w	r3, r3, #15
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d10a      	bne.n	800cd2c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	6818      	ldr	r0, [r3, #0]
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	691b      	ldr	r3, [r3, #16]
 800cd1e:	b2d9      	uxtb	r1, r3
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800cd26:	461a      	mov	r2, r3
 800cd28:	f003 fc22 	bl	8010570 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	2200      	movs	r2, #0
 800cd30:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800cd34:	2300      	movs	r3, #0
}
 800cd36:	4618      	mov	r0, r3
 800cd38:	3710      	adds	r7, #16
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	bd80      	pop	{r7, pc}

0800cd3e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800cd3e:	b580      	push	{r7, lr}
 800cd40:	b084      	sub	sp, #16
 800cd42:	af00      	add	r7, sp, #0
 800cd44:	6078      	str	r0, [r7, #4]
 800cd46:	460b      	mov	r3, r1
 800cd48:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800cd4a:	78fb      	ldrb	r3, [r7, #3]
 800cd4c:	f003 020f 	and.w	r2, r3, #15
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	685b      	ldr	r3, [r3, #4]
 800cd54:	429a      	cmp	r2, r3
 800cd56:	d901      	bls.n	800cd5c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800cd58:	2301      	movs	r3, #1
 800cd5a:	e042      	b.n	800cde2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800cd5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	da0f      	bge.n	800cd84 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cd64:	78fb      	ldrb	r3, [r7, #3]
 800cd66:	f003 020f 	and.w	r2, r3, #15
 800cd6a:	4613      	mov	r3, r2
 800cd6c:	00db      	lsls	r3, r3, #3
 800cd6e:	1a9b      	subs	r3, r3, r2
 800cd70:	009b      	lsls	r3, r3, #2
 800cd72:	3338      	adds	r3, #56	; 0x38
 800cd74:	687a      	ldr	r2, [r7, #4]
 800cd76:	4413      	add	r3, r2
 800cd78:	3304      	adds	r3, #4
 800cd7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	2201      	movs	r2, #1
 800cd80:	705a      	strb	r2, [r3, #1]
 800cd82:	e00f      	b.n	800cda4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cd84:	78fb      	ldrb	r3, [r7, #3]
 800cd86:	f003 020f 	and.w	r2, r3, #15
 800cd8a:	4613      	mov	r3, r2
 800cd8c:	00db      	lsls	r3, r3, #3
 800cd8e:	1a9b      	subs	r3, r3, r2
 800cd90:	009b      	lsls	r3, r3, #2
 800cd92:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800cd96:	687a      	ldr	r2, [r7, #4]
 800cd98:	4413      	add	r3, r2
 800cd9a:	3304      	adds	r3, #4
 800cd9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	2200      	movs	r2, #0
 800cda2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	2200      	movs	r2, #0
 800cda8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800cdaa:	78fb      	ldrb	r3, [r7, #3]
 800cdac:	f003 030f 	and.w	r3, r3, #15
 800cdb0:	b2da      	uxtb	r2, r3
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800cdbc:	2b01      	cmp	r3, #1
 800cdbe:	d101      	bne.n	800cdc4 <HAL_PCD_EP_ClrStall+0x86>
 800cdc0:	2302      	movs	r3, #2
 800cdc2:	e00e      	b.n	800cde2 <HAL_PCD_EP_ClrStall+0xa4>
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	2201      	movs	r2, #1
 800cdc8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	68f9      	ldr	r1, [r7, #12]
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	f003 fa39 	bl	801024a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	2200      	movs	r2, #0
 800cddc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800cde0:	2300      	movs	r3, #0
}
 800cde2:	4618      	mov	r0, r3
 800cde4:	3710      	adds	r7, #16
 800cde6:	46bd      	mov	sp, r7
 800cde8:	bd80      	pop	{r7, pc}

0800cdea <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800cdea:	b580      	push	{r7, lr}
 800cdec:	b08a      	sub	sp, #40	; 0x28
 800cdee:	af02      	add	r7, sp, #8
 800cdf0:	6078      	str	r0, [r7, #4]
 800cdf2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cdfa:	697b      	ldr	r3, [r7, #20]
 800cdfc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800cdfe:	683a      	ldr	r2, [r7, #0]
 800ce00:	4613      	mov	r3, r2
 800ce02:	00db      	lsls	r3, r3, #3
 800ce04:	1a9b      	subs	r3, r3, r2
 800ce06:	009b      	lsls	r3, r3, #2
 800ce08:	3338      	adds	r3, #56	; 0x38
 800ce0a:	687a      	ldr	r2, [r7, #4]
 800ce0c:	4413      	add	r3, r2
 800ce0e:	3304      	adds	r3, #4
 800ce10:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	699a      	ldr	r2, [r3, #24]
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	695b      	ldr	r3, [r3, #20]
 800ce1a:	429a      	cmp	r2, r3
 800ce1c:	d901      	bls.n	800ce22 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800ce1e:	2301      	movs	r3, #1
 800ce20:	e06c      	b.n	800cefc <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	695a      	ldr	r2, [r3, #20]
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	699b      	ldr	r3, [r3, #24]
 800ce2a:	1ad3      	subs	r3, r2, r3
 800ce2c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	689b      	ldr	r3, [r3, #8]
 800ce32:	69fa      	ldr	r2, [r7, #28]
 800ce34:	429a      	cmp	r2, r3
 800ce36:	d902      	bls.n	800ce3e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	689b      	ldr	r3, [r3, #8]
 800ce3c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800ce3e:	69fb      	ldr	r3, [r7, #28]
 800ce40:	3303      	adds	r3, #3
 800ce42:	089b      	lsrs	r3, r3, #2
 800ce44:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800ce46:	e02b      	b.n	800cea0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	695a      	ldr	r2, [r3, #20]
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	699b      	ldr	r3, [r3, #24]
 800ce50:	1ad3      	subs	r3, r2, r3
 800ce52:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	689b      	ldr	r3, [r3, #8]
 800ce58:	69fa      	ldr	r2, [r7, #28]
 800ce5a:	429a      	cmp	r2, r3
 800ce5c:	d902      	bls.n	800ce64 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	689b      	ldr	r3, [r3, #8]
 800ce62:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800ce64:	69fb      	ldr	r3, [r7, #28]
 800ce66:	3303      	adds	r3, #3
 800ce68:	089b      	lsrs	r3, r3, #2
 800ce6a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	68d9      	ldr	r1, [r3, #12]
 800ce70:	683b      	ldr	r3, [r7, #0]
 800ce72:	b2da      	uxtb	r2, r3
 800ce74:	69fb      	ldr	r3, [r7, #28]
 800ce76:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800ce7c:	b2db      	uxtb	r3, r3
 800ce7e:	9300      	str	r3, [sp, #0]
 800ce80:	4603      	mov	r3, r0
 800ce82:	6978      	ldr	r0, [r7, #20]
 800ce84:	f003 f915 	bl	80100b2 <USB_WritePacket>

    ep->xfer_buff  += len;
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	68da      	ldr	r2, [r3, #12]
 800ce8c:	69fb      	ldr	r3, [r7, #28]
 800ce8e:	441a      	add	r2, r3
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	699a      	ldr	r2, [r3, #24]
 800ce98:	69fb      	ldr	r3, [r7, #28]
 800ce9a:	441a      	add	r2, r3
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800cea0:	683b      	ldr	r3, [r7, #0]
 800cea2:	015a      	lsls	r2, r3, #5
 800cea4:	693b      	ldr	r3, [r7, #16]
 800cea6:	4413      	add	r3, r2
 800cea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ceac:	699b      	ldr	r3, [r3, #24]
 800ceae:	b29b      	uxth	r3, r3
 800ceb0:	69ba      	ldr	r2, [r7, #24]
 800ceb2:	429a      	cmp	r2, r3
 800ceb4:	d809      	bhi.n	800ceca <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	699a      	ldr	r2, [r3, #24]
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800cebe:	429a      	cmp	r2, r3
 800cec0:	d203      	bcs.n	800ceca <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	695b      	ldr	r3, [r3, #20]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d1be      	bne.n	800ce48 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	695a      	ldr	r2, [r3, #20]
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	699b      	ldr	r3, [r3, #24]
 800ced2:	429a      	cmp	r2, r3
 800ced4:	d811      	bhi.n	800cefa <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800ced6:	683b      	ldr	r3, [r7, #0]
 800ced8:	f003 030f 	and.w	r3, r3, #15
 800cedc:	2201      	movs	r2, #1
 800cede:	fa02 f303 	lsl.w	r3, r2, r3
 800cee2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800cee4:	693b      	ldr	r3, [r7, #16]
 800cee6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ceea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ceec:	68bb      	ldr	r3, [r7, #8]
 800ceee:	43db      	mvns	r3, r3
 800cef0:	6939      	ldr	r1, [r7, #16]
 800cef2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cef6:	4013      	ands	r3, r2
 800cef8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800cefa:	2300      	movs	r3, #0
}
 800cefc:	4618      	mov	r0, r3
 800cefe:	3720      	adds	r7, #32
 800cf00:	46bd      	mov	sp, r7
 800cf02:	bd80      	pop	{r7, pc}

0800cf04 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800cf04:	b580      	push	{r7, lr}
 800cf06:	b086      	sub	sp, #24
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	6078      	str	r0, [r7, #4]
 800cf0c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf14:	697b      	ldr	r3, [r7, #20]
 800cf16:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800cf18:	697b      	ldr	r3, [r7, #20]
 800cf1a:	333c      	adds	r3, #60	; 0x3c
 800cf1c:	3304      	adds	r3, #4
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800cf22:	683b      	ldr	r3, [r7, #0]
 800cf24:	015a      	lsls	r2, r3, #5
 800cf26:	693b      	ldr	r3, [r7, #16]
 800cf28:	4413      	add	r3, r2
 800cf2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf2e:	689b      	ldr	r3, [r3, #8]
 800cf30:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	691b      	ldr	r3, [r3, #16]
 800cf36:	2b01      	cmp	r3, #1
 800cf38:	f040 80b3 	bne.w	800d0a2 <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800cf3c:	68bb      	ldr	r3, [r7, #8]
 800cf3e:	f003 0308 	and.w	r3, r3, #8
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d028      	beq.n	800cf98 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	4a70      	ldr	r2, [pc, #448]	; (800d10c <PCD_EP_OutXfrComplete_int+0x208>)
 800cf4a:	4293      	cmp	r3, r2
 800cf4c:	d90e      	bls.n	800cf6c <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800cf4e:	68bb      	ldr	r3, [r7, #8]
 800cf50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d009      	beq.n	800cf6c <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800cf58:	683b      	ldr	r3, [r7, #0]
 800cf5a:	015a      	lsls	r2, r3, #5
 800cf5c:	693b      	ldr	r3, [r7, #16]
 800cf5e:	4413      	add	r3, r2
 800cf60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf64:	461a      	mov	r2, r3
 800cf66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cf6a:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 800cf6c:	6878      	ldr	r0, [r7, #4]
 800cf6e:	f008 faf1 	bl	8015554 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	6818      	ldr	r0, [r3, #0]
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800cf7c:	461a      	mov	r2, r3
 800cf7e:	2101      	movs	r1, #1
 800cf80:	f003 faf6 	bl	8010570 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800cf84:	683b      	ldr	r3, [r7, #0]
 800cf86:	015a      	lsls	r2, r3, #5
 800cf88:	693b      	ldr	r3, [r7, #16]
 800cf8a:	4413      	add	r3, r2
 800cf8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf90:	461a      	mov	r2, r3
 800cf92:	2308      	movs	r3, #8
 800cf94:	6093      	str	r3, [r2, #8]
 800cf96:	e0b3      	b.n	800d100 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800cf98:	68bb      	ldr	r3, [r7, #8]
 800cf9a:	f003 0320 	and.w	r3, r3, #32
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d009      	beq.n	800cfb6 <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800cfa2:	683b      	ldr	r3, [r7, #0]
 800cfa4:	015a      	lsls	r2, r3, #5
 800cfa6:	693b      	ldr	r3, [r7, #16]
 800cfa8:	4413      	add	r3, r2
 800cfaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cfae:	461a      	mov	r2, r3
 800cfb0:	2320      	movs	r3, #32
 800cfb2:	6093      	str	r3, [r2, #8]
 800cfb4:	e0a4      	b.n	800d100 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800cfb6:	68bb      	ldr	r3, [r7, #8]
 800cfb8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	f040 809f 	bne.w	800d100 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	4a51      	ldr	r2, [pc, #324]	; (800d10c <PCD_EP_OutXfrComplete_int+0x208>)
 800cfc6:	4293      	cmp	r3, r2
 800cfc8:	d90f      	bls.n	800cfea <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800cfca:	68bb      	ldr	r3, [r7, #8]
 800cfcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d00a      	beq.n	800cfea <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800cfd4:	683b      	ldr	r3, [r7, #0]
 800cfd6:	015a      	lsls	r2, r3, #5
 800cfd8:	693b      	ldr	r3, [r7, #16]
 800cfda:	4413      	add	r3, r2
 800cfdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cfe0:	461a      	mov	r2, r3
 800cfe2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cfe6:	6093      	str	r3, [r2, #8]
 800cfe8:	e08a      	b.n	800d100 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800cfea:	6879      	ldr	r1, [r7, #4]
 800cfec:	683a      	ldr	r2, [r7, #0]
 800cfee:	4613      	mov	r3, r2
 800cff0:	00db      	lsls	r3, r3, #3
 800cff2:	1a9b      	subs	r3, r3, r2
 800cff4:	009b      	lsls	r3, r3, #2
 800cff6:	440b      	add	r3, r1
 800cff8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800cffc:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800cffe:	683b      	ldr	r3, [r7, #0]
 800d000:	0159      	lsls	r1, r3, #5
 800d002:	693b      	ldr	r3, [r7, #16]
 800d004:	440b      	add	r3, r1
 800d006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d00a:	691b      	ldr	r3, [r3, #16]
 800d00c:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800d010:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800d012:	6878      	ldr	r0, [r7, #4]
 800d014:	683a      	ldr	r2, [r7, #0]
 800d016:	4613      	mov	r3, r2
 800d018:	00db      	lsls	r3, r3, #3
 800d01a:	1a9b      	subs	r3, r3, r2
 800d01c:	009b      	lsls	r3, r3, #2
 800d01e:	4403      	add	r3, r0
 800d020:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800d024:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800d026:	6879      	ldr	r1, [r7, #4]
 800d028:	683a      	ldr	r2, [r7, #0]
 800d02a:	4613      	mov	r3, r2
 800d02c:	00db      	lsls	r3, r3, #3
 800d02e:	1a9b      	subs	r3, r3, r2
 800d030:	009b      	lsls	r3, r3, #2
 800d032:	440b      	add	r3, r1
 800d034:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d038:	6819      	ldr	r1, [r3, #0]
 800d03a:	6878      	ldr	r0, [r7, #4]
 800d03c:	683a      	ldr	r2, [r7, #0]
 800d03e:	4613      	mov	r3, r2
 800d040:	00db      	lsls	r3, r3, #3
 800d042:	1a9b      	subs	r3, r3, r2
 800d044:	009b      	lsls	r3, r3, #2
 800d046:	4403      	add	r3, r0
 800d048:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	4419      	add	r1, r3
 800d050:	6878      	ldr	r0, [r7, #4]
 800d052:	683a      	ldr	r2, [r7, #0]
 800d054:	4613      	mov	r3, r2
 800d056:	00db      	lsls	r3, r3, #3
 800d058:	1a9b      	subs	r3, r3, r2
 800d05a:	009b      	lsls	r3, r3, #2
 800d05c:	4403      	add	r3, r0
 800d05e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d062:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d064:	683b      	ldr	r3, [r7, #0]
 800d066:	b2db      	uxtb	r3, r3
 800d068:	4619      	mov	r1, r3
 800d06a:	6878      	ldr	r0, [r7, #4]
 800d06c:	f008 fa84 	bl	8015578 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800d070:	683b      	ldr	r3, [r7, #0]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d144      	bne.n	800d100 <PCD_EP_OutXfrComplete_int+0x1fc>
 800d076:	6879      	ldr	r1, [r7, #4]
 800d078:	683a      	ldr	r2, [r7, #0]
 800d07a:	4613      	mov	r3, r2
 800d07c:	00db      	lsls	r3, r3, #3
 800d07e:	1a9b      	subs	r3, r3, r2
 800d080:	009b      	lsls	r3, r3, #2
 800d082:	440b      	add	r3, r1
 800d084:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d138      	bne.n	800d100 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	6818      	ldr	r0, [r3, #0]
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d098:	461a      	mov	r2, r3
 800d09a:	2101      	movs	r1, #1
 800d09c:	f003 fa68 	bl	8010570 <USB_EP0_OutStart>
 800d0a0:	e02e      	b.n	800d100 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	4a1a      	ldr	r2, [pc, #104]	; (800d110 <PCD_EP_OutXfrComplete_int+0x20c>)
 800d0a6:	4293      	cmp	r3, r2
 800d0a8:	d124      	bne.n	800d0f4 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800d0aa:	68bb      	ldr	r3, [r7, #8]
 800d0ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d00a      	beq.n	800d0ca <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d0b4:	683b      	ldr	r3, [r7, #0]
 800d0b6:	015a      	lsls	r2, r3, #5
 800d0b8:	693b      	ldr	r3, [r7, #16]
 800d0ba:	4413      	add	r3, r2
 800d0bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0c0:	461a      	mov	r2, r3
 800d0c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d0c6:	6093      	str	r3, [r2, #8]
 800d0c8:	e01a      	b.n	800d100 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800d0ca:	68bb      	ldr	r3, [r7, #8]
 800d0cc:	f003 0320 	and.w	r3, r3, #32
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d008      	beq.n	800d0e6 <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800d0d4:	683b      	ldr	r3, [r7, #0]
 800d0d6:	015a      	lsls	r2, r3, #5
 800d0d8:	693b      	ldr	r3, [r7, #16]
 800d0da:	4413      	add	r3, r2
 800d0dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0e0:	461a      	mov	r2, r3
 800d0e2:	2320      	movs	r3, #32
 800d0e4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d0e6:	683b      	ldr	r3, [r7, #0]
 800d0e8:	b2db      	uxtb	r3, r3
 800d0ea:	4619      	mov	r1, r3
 800d0ec:	6878      	ldr	r0, [r7, #4]
 800d0ee:	f008 fa43 	bl	8015578 <HAL_PCD_DataOutStageCallback>
 800d0f2:	e005      	b.n	800d100 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d0f4:	683b      	ldr	r3, [r7, #0]
 800d0f6:	b2db      	uxtb	r3, r3
 800d0f8:	4619      	mov	r1, r3
 800d0fa:	6878      	ldr	r0, [r7, #4]
 800d0fc:	f008 fa3c 	bl	8015578 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800d100:	2300      	movs	r3, #0
}
 800d102:	4618      	mov	r0, r3
 800d104:	3718      	adds	r7, #24
 800d106:	46bd      	mov	sp, r7
 800d108:	bd80      	pop	{r7, pc}
 800d10a:	bf00      	nop
 800d10c:	4f54300a 	.word	0x4f54300a
 800d110:	4f54310a 	.word	0x4f54310a

0800d114 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d114:	b580      	push	{r7, lr}
 800d116:	b086      	sub	sp, #24
 800d118:	af00      	add	r7, sp, #0
 800d11a:	6078      	str	r0, [r7, #4]
 800d11c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d124:	697b      	ldr	r3, [r7, #20]
 800d126:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d128:	697b      	ldr	r3, [r7, #20]
 800d12a:	333c      	adds	r3, #60	; 0x3c
 800d12c:	3304      	adds	r3, #4
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800d132:	683b      	ldr	r3, [r7, #0]
 800d134:	015a      	lsls	r2, r3, #5
 800d136:	693b      	ldr	r3, [r7, #16]
 800d138:	4413      	add	r3, r2
 800d13a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d13e:	689b      	ldr	r3, [r3, #8]
 800d140:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	691b      	ldr	r3, [r3, #16]
 800d146:	2b01      	cmp	r3, #1
 800d148:	d113      	bne.n	800d172 <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	4a1f      	ldr	r2, [pc, #124]	; (800d1cc <PCD_EP_OutSetupPacket_int+0xb8>)
 800d14e:	4293      	cmp	r3, r2
 800d150:	d922      	bls.n	800d198 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d152:	68bb      	ldr	r3, [r7, #8]
 800d154:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d01d      	beq.n	800d198 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d15c:	683b      	ldr	r3, [r7, #0]
 800d15e:	015a      	lsls	r2, r3, #5
 800d160:	693b      	ldr	r3, [r7, #16]
 800d162:	4413      	add	r3, r2
 800d164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d168:	461a      	mov	r2, r3
 800d16a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d16e:	6093      	str	r3, [r2, #8]
 800d170:	e012      	b.n	800d198 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	4a16      	ldr	r2, [pc, #88]	; (800d1d0 <PCD_EP_OutSetupPacket_int+0xbc>)
 800d176:	4293      	cmp	r3, r2
 800d178:	d10e      	bne.n	800d198 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d17a:	68bb      	ldr	r3, [r7, #8]
 800d17c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 800d180:	2b00      	cmp	r3, #0
 800d182:	d009      	beq.n	800d198 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d184:	683b      	ldr	r3, [r7, #0]
 800d186:	015a      	lsls	r2, r3, #5
 800d188:	693b      	ldr	r3, [r7, #16]
 800d18a:	4413      	add	r3, r2
 800d18c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d190:	461a      	mov	r2, r3
 800d192:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d196:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800d198:	6878      	ldr	r0, [r7, #4]
 800d19a:	f008 f9db 	bl	8015554 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	4a0a      	ldr	r2, [pc, #40]	; (800d1cc <PCD_EP_OutSetupPacket_int+0xb8>)
 800d1a2:	4293      	cmp	r3, r2
 800d1a4:	d90c      	bls.n	800d1c0 <PCD_EP_OutSetupPacket_int+0xac>
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	691b      	ldr	r3, [r3, #16]
 800d1aa:	2b01      	cmp	r3, #1
 800d1ac:	d108      	bne.n	800d1c0 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	6818      	ldr	r0, [r3, #0]
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d1b8:	461a      	mov	r2, r3
 800d1ba:	2101      	movs	r1, #1
 800d1bc:	f003 f9d8 	bl	8010570 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800d1c0:	2300      	movs	r3, #0
}
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	3718      	adds	r7, #24
 800d1c6:	46bd      	mov	sp, r7
 800d1c8:	bd80      	pop	{r7, pc}
 800d1ca:	bf00      	nop
 800d1cc:	4f54300a 	.word	0x4f54300a
 800d1d0:	4f54310a 	.word	0x4f54310a

0800d1d4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800d1d4:	b480      	push	{r7}
 800d1d6:	b085      	sub	sp, #20
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	6078      	str	r0, [r7, #4]
 800d1dc:	460b      	mov	r3, r1
 800d1de:	70fb      	strb	r3, [r7, #3]
 800d1e0:	4613      	mov	r3, r2
 800d1e2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1ea:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800d1ec:	78fb      	ldrb	r3, [r7, #3]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d107      	bne.n	800d202 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800d1f2:	883b      	ldrh	r3, [r7, #0]
 800d1f4:	0419      	lsls	r1, r3, #16
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	68ba      	ldr	r2, [r7, #8]
 800d1fc:	430a      	orrs	r2, r1
 800d1fe:	629a      	str	r2, [r3, #40]	; 0x28
 800d200:	e028      	b.n	800d254 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d208:	0c1b      	lsrs	r3, r3, #16
 800d20a:	68ba      	ldr	r2, [r7, #8]
 800d20c:	4413      	add	r3, r2
 800d20e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800d210:	2300      	movs	r3, #0
 800d212:	73fb      	strb	r3, [r7, #15]
 800d214:	e00d      	b.n	800d232 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	681a      	ldr	r2, [r3, #0]
 800d21a:	7bfb      	ldrb	r3, [r7, #15]
 800d21c:	3340      	adds	r3, #64	; 0x40
 800d21e:	009b      	lsls	r3, r3, #2
 800d220:	4413      	add	r3, r2
 800d222:	685b      	ldr	r3, [r3, #4]
 800d224:	0c1b      	lsrs	r3, r3, #16
 800d226:	68ba      	ldr	r2, [r7, #8]
 800d228:	4413      	add	r3, r2
 800d22a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800d22c:	7bfb      	ldrb	r3, [r7, #15]
 800d22e:	3301      	adds	r3, #1
 800d230:	73fb      	strb	r3, [r7, #15]
 800d232:	7bfa      	ldrb	r2, [r7, #15]
 800d234:	78fb      	ldrb	r3, [r7, #3]
 800d236:	3b01      	subs	r3, #1
 800d238:	429a      	cmp	r2, r3
 800d23a:	d3ec      	bcc.n	800d216 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800d23c:	883b      	ldrh	r3, [r7, #0]
 800d23e:	0418      	lsls	r0, r3, #16
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	6819      	ldr	r1, [r3, #0]
 800d244:	78fb      	ldrb	r3, [r7, #3]
 800d246:	3b01      	subs	r3, #1
 800d248:	68ba      	ldr	r2, [r7, #8]
 800d24a:	4302      	orrs	r2, r0
 800d24c:	3340      	adds	r3, #64	; 0x40
 800d24e:	009b      	lsls	r3, r3, #2
 800d250:	440b      	add	r3, r1
 800d252:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800d254:	2300      	movs	r3, #0
}
 800d256:	4618      	mov	r0, r3
 800d258:	3714      	adds	r7, #20
 800d25a:	46bd      	mov	sp, r7
 800d25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d260:	4770      	bx	lr

0800d262 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800d262:	b480      	push	{r7}
 800d264:	b083      	sub	sp, #12
 800d266:	af00      	add	r7, sp, #0
 800d268:	6078      	str	r0, [r7, #4]
 800d26a:	460b      	mov	r3, r1
 800d26c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	887a      	ldrh	r2, [r7, #2]
 800d274:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800d276:	2300      	movs	r3, #0
}
 800d278:	4618      	mov	r0, r3
 800d27a:	370c      	adds	r7, #12
 800d27c:	46bd      	mov	sp, r7
 800d27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d282:	4770      	bx	lr

0800d284 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d284:	b480      	push	{r7}
 800d286:	b083      	sub	sp, #12
 800d288:	af00      	add	r7, sp, #0
 800d28a:	6078      	str	r0, [r7, #4]
 800d28c:	460b      	mov	r3, r1
 800d28e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800d290:	bf00      	nop
 800d292:	370c      	adds	r7, #12
 800d294:	46bd      	mov	sp, r7
 800d296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d29a:	4770      	bx	lr

0800d29c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d29c:	b580      	push	{r7, lr}
 800d29e:	b086      	sub	sp, #24
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d101      	bne.n	800d2ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d2aa:	2301      	movs	r3, #1
 800d2ac:	e25b      	b.n	800d766 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	f003 0301 	and.w	r3, r3, #1
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d075      	beq.n	800d3a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800d2ba:	4ba3      	ldr	r3, [pc, #652]	; (800d548 <HAL_RCC_OscConfig+0x2ac>)
 800d2bc:	689b      	ldr	r3, [r3, #8]
 800d2be:	f003 030c 	and.w	r3, r3, #12
 800d2c2:	2b04      	cmp	r3, #4
 800d2c4:	d00c      	beq.n	800d2e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d2c6:	4ba0      	ldr	r3, [pc, #640]	; (800d548 <HAL_RCC_OscConfig+0x2ac>)
 800d2c8:	689b      	ldr	r3, [r3, #8]
 800d2ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800d2ce:	2b08      	cmp	r3, #8
 800d2d0:	d112      	bne.n	800d2f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d2d2:	4b9d      	ldr	r3, [pc, #628]	; (800d548 <HAL_RCC_OscConfig+0x2ac>)
 800d2d4:	685b      	ldr	r3, [r3, #4]
 800d2d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d2da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d2de:	d10b      	bne.n	800d2f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d2e0:	4b99      	ldr	r3, [pc, #612]	; (800d548 <HAL_RCC_OscConfig+0x2ac>)
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d05b      	beq.n	800d3a4 <HAL_RCC_OscConfig+0x108>
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	685b      	ldr	r3, [r3, #4]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d157      	bne.n	800d3a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800d2f4:	2301      	movs	r3, #1
 800d2f6:	e236      	b.n	800d766 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	685b      	ldr	r3, [r3, #4]
 800d2fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d300:	d106      	bne.n	800d310 <HAL_RCC_OscConfig+0x74>
 800d302:	4b91      	ldr	r3, [pc, #580]	; (800d548 <HAL_RCC_OscConfig+0x2ac>)
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	4a90      	ldr	r2, [pc, #576]	; (800d548 <HAL_RCC_OscConfig+0x2ac>)
 800d308:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d30c:	6013      	str	r3, [r2, #0]
 800d30e:	e01d      	b.n	800d34c <HAL_RCC_OscConfig+0xb0>
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	685b      	ldr	r3, [r3, #4]
 800d314:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d318:	d10c      	bne.n	800d334 <HAL_RCC_OscConfig+0x98>
 800d31a:	4b8b      	ldr	r3, [pc, #556]	; (800d548 <HAL_RCC_OscConfig+0x2ac>)
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	4a8a      	ldr	r2, [pc, #552]	; (800d548 <HAL_RCC_OscConfig+0x2ac>)
 800d320:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d324:	6013      	str	r3, [r2, #0]
 800d326:	4b88      	ldr	r3, [pc, #544]	; (800d548 <HAL_RCC_OscConfig+0x2ac>)
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	4a87      	ldr	r2, [pc, #540]	; (800d548 <HAL_RCC_OscConfig+0x2ac>)
 800d32c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d330:	6013      	str	r3, [r2, #0]
 800d332:	e00b      	b.n	800d34c <HAL_RCC_OscConfig+0xb0>
 800d334:	4b84      	ldr	r3, [pc, #528]	; (800d548 <HAL_RCC_OscConfig+0x2ac>)
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	4a83      	ldr	r2, [pc, #524]	; (800d548 <HAL_RCC_OscConfig+0x2ac>)
 800d33a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d33e:	6013      	str	r3, [r2, #0]
 800d340:	4b81      	ldr	r3, [pc, #516]	; (800d548 <HAL_RCC_OscConfig+0x2ac>)
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	4a80      	ldr	r2, [pc, #512]	; (800d548 <HAL_RCC_OscConfig+0x2ac>)
 800d346:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d34a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	685b      	ldr	r3, [r3, #4]
 800d350:	2b00      	cmp	r3, #0
 800d352:	d013      	beq.n	800d37c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d354:	f7fd ff60 	bl	800b218 <HAL_GetTick>
 800d358:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d35a:	e008      	b.n	800d36e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d35c:	f7fd ff5c 	bl	800b218 <HAL_GetTick>
 800d360:	4602      	mov	r2, r0
 800d362:	693b      	ldr	r3, [r7, #16]
 800d364:	1ad3      	subs	r3, r2, r3
 800d366:	2b64      	cmp	r3, #100	; 0x64
 800d368:	d901      	bls.n	800d36e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800d36a:	2303      	movs	r3, #3
 800d36c:	e1fb      	b.n	800d766 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d36e:	4b76      	ldr	r3, [pc, #472]	; (800d548 <HAL_RCC_OscConfig+0x2ac>)
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d376:	2b00      	cmp	r3, #0
 800d378:	d0f0      	beq.n	800d35c <HAL_RCC_OscConfig+0xc0>
 800d37a:	e014      	b.n	800d3a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d37c:	f7fd ff4c 	bl	800b218 <HAL_GetTick>
 800d380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d382:	e008      	b.n	800d396 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d384:	f7fd ff48 	bl	800b218 <HAL_GetTick>
 800d388:	4602      	mov	r2, r0
 800d38a:	693b      	ldr	r3, [r7, #16]
 800d38c:	1ad3      	subs	r3, r2, r3
 800d38e:	2b64      	cmp	r3, #100	; 0x64
 800d390:	d901      	bls.n	800d396 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800d392:	2303      	movs	r3, #3
 800d394:	e1e7      	b.n	800d766 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d396:	4b6c      	ldr	r3, [pc, #432]	; (800d548 <HAL_RCC_OscConfig+0x2ac>)
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d1f0      	bne.n	800d384 <HAL_RCC_OscConfig+0xe8>
 800d3a2:	e000      	b.n	800d3a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d3a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	f003 0302 	and.w	r3, r3, #2
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d063      	beq.n	800d47a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800d3b2:	4b65      	ldr	r3, [pc, #404]	; (800d548 <HAL_RCC_OscConfig+0x2ac>)
 800d3b4:	689b      	ldr	r3, [r3, #8]
 800d3b6:	f003 030c 	and.w	r3, r3, #12
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d00b      	beq.n	800d3d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d3be:	4b62      	ldr	r3, [pc, #392]	; (800d548 <HAL_RCC_OscConfig+0x2ac>)
 800d3c0:	689b      	ldr	r3, [r3, #8]
 800d3c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800d3c6:	2b08      	cmp	r3, #8
 800d3c8:	d11c      	bne.n	800d404 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d3ca:	4b5f      	ldr	r3, [pc, #380]	; (800d548 <HAL_RCC_OscConfig+0x2ac>)
 800d3cc:	685b      	ldr	r3, [r3, #4]
 800d3ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d116      	bne.n	800d404 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d3d6:	4b5c      	ldr	r3, [pc, #368]	; (800d548 <HAL_RCC_OscConfig+0x2ac>)
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	f003 0302 	and.w	r3, r3, #2
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d005      	beq.n	800d3ee <HAL_RCC_OscConfig+0x152>
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	68db      	ldr	r3, [r3, #12]
 800d3e6:	2b01      	cmp	r3, #1
 800d3e8:	d001      	beq.n	800d3ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800d3ea:	2301      	movs	r3, #1
 800d3ec:	e1bb      	b.n	800d766 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d3ee:	4b56      	ldr	r3, [pc, #344]	; (800d548 <HAL_RCC_OscConfig+0x2ac>)
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	691b      	ldr	r3, [r3, #16]
 800d3fa:	00db      	lsls	r3, r3, #3
 800d3fc:	4952      	ldr	r1, [pc, #328]	; (800d548 <HAL_RCC_OscConfig+0x2ac>)
 800d3fe:	4313      	orrs	r3, r2
 800d400:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d402:	e03a      	b.n	800d47a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	68db      	ldr	r3, [r3, #12]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d020      	beq.n	800d44e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d40c:	4b4f      	ldr	r3, [pc, #316]	; (800d54c <HAL_RCC_OscConfig+0x2b0>)
 800d40e:	2201      	movs	r2, #1
 800d410:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d412:	f7fd ff01 	bl	800b218 <HAL_GetTick>
 800d416:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d418:	e008      	b.n	800d42c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d41a:	f7fd fefd 	bl	800b218 <HAL_GetTick>
 800d41e:	4602      	mov	r2, r0
 800d420:	693b      	ldr	r3, [r7, #16]
 800d422:	1ad3      	subs	r3, r2, r3
 800d424:	2b02      	cmp	r3, #2
 800d426:	d901      	bls.n	800d42c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800d428:	2303      	movs	r3, #3
 800d42a:	e19c      	b.n	800d766 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d42c:	4b46      	ldr	r3, [pc, #280]	; (800d548 <HAL_RCC_OscConfig+0x2ac>)
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	f003 0302 	and.w	r3, r3, #2
 800d434:	2b00      	cmp	r3, #0
 800d436:	d0f0      	beq.n	800d41a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d438:	4b43      	ldr	r3, [pc, #268]	; (800d548 <HAL_RCC_OscConfig+0x2ac>)
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	691b      	ldr	r3, [r3, #16]
 800d444:	00db      	lsls	r3, r3, #3
 800d446:	4940      	ldr	r1, [pc, #256]	; (800d548 <HAL_RCC_OscConfig+0x2ac>)
 800d448:	4313      	orrs	r3, r2
 800d44a:	600b      	str	r3, [r1, #0]
 800d44c:	e015      	b.n	800d47a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d44e:	4b3f      	ldr	r3, [pc, #252]	; (800d54c <HAL_RCC_OscConfig+0x2b0>)
 800d450:	2200      	movs	r2, #0
 800d452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d454:	f7fd fee0 	bl	800b218 <HAL_GetTick>
 800d458:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d45a:	e008      	b.n	800d46e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d45c:	f7fd fedc 	bl	800b218 <HAL_GetTick>
 800d460:	4602      	mov	r2, r0
 800d462:	693b      	ldr	r3, [r7, #16]
 800d464:	1ad3      	subs	r3, r2, r3
 800d466:	2b02      	cmp	r3, #2
 800d468:	d901      	bls.n	800d46e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800d46a:	2303      	movs	r3, #3
 800d46c:	e17b      	b.n	800d766 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d46e:	4b36      	ldr	r3, [pc, #216]	; (800d548 <HAL_RCC_OscConfig+0x2ac>)
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	f003 0302 	and.w	r3, r3, #2
 800d476:	2b00      	cmp	r3, #0
 800d478:	d1f0      	bne.n	800d45c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	f003 0308 	and.w	r3, r3, #8
 800d482:	2b00      	cmp	r3, #0
 800d484:	d030      	beq.n	800d4e8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	695b      	ldr	r3, [r3, #20]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d016      	beq.n	800d4bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d48e:	4b30      	ldr	r3, [pc, #192]	; (800d550 <HAL_RCC_OscConfig+0x2b4>)
 800d490:	2201      	movs	r2, #1
 800d492:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d494:	f7fd fec0 	bl	800b218 <HAL_GetTick>
 800d498:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d49a:	e008      	b.n	800d4ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d49c:	f7fd febc 	bl	800b218 <HAL_GetTick>
 800d4a0:	4602      	mov	r2, r0
 800d4a2:	693b      	ldr	r3, [r7, #16]
 800d4a4:	1ad3      	subs	r3, r2, r3
 800d4a6:	2b02      	cmp	r3, #2
 800d4a8:	d901      	bls.n	800d4ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800d4aa:	2303      	movs	r3, #3
 800d4ac:	e15b      	b.n	800d766 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d4ae:	4b26      	ldr	r3, [pc, #152]	; (800d548 <HAL_RCC_OscConfig+0x2ac>)
 800d4b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d4b2:	f003 0302 	and.w	r3, r3, #2
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d0f0      	beq.n	800d49c <HAL_RCC_OscConfig+0x200>
 800d4ba:	e015      	b.n	800d4e8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d4bc:	4b24      	ldr	r3, [pc, #144]	; (800d550 <HAL_RCC_OscConfig+0x2b4>)
 800d4be:	2200      	movs	r2, #0
 800d4c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d4c2:	f7fd fea9 	bl	800b218 <HAL_GetTick>
 800d4c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d4c8:	e008      	b.n	800d4dc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d4ca:	f7fd fea5 	bl	800b218 <HAL_GetTick>
 800d4ce:	4602      	mov	r2, r0
 800d4d0:	693b      	ldr	r3, [r7, #16]
 800d4d2:	1ad3      	subs	r3, r2, r3
 800d4d4:	2b02      	cmp	r3, #2
 800d4d6:	d901      	bls.n	800d4dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800d4d8:	2303      	movs	r3, #3
 800d4da:	e144      	b.n	800d766 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d4dc:	4b1a      	ldr	r3, [pc, #104]	; (800d548 <HAL_RCC_OscConfig+0x2ac>)
 800d4de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d4e0:	f003 0302 	and.w	r3, r3, #2
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d1f0      	bne.n	800d4ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	f003 0304 	and.w	r3, r3, #4
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	f000 80a0 	beq.w	800d636 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d4fa:	4b13      	ldr	r3, [pc, #76]	; (800d548 <HAL_RCC_OscConfig+0x2ac>)
 800d4fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d502:	2b00      	cmp	r3, #0
 800d504:	d10f      	bne.n	800d526 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d506:	2300      	movs	r3, #0
 800d508:	60bb      	str	r3, [r7, #8]
 800d50a:	4b0f      	ldr	r3, [pc, #60]	; (800d548 <HAL_RCC_OscConfig+0x2ac>)
 800d50c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d50e:	4a0e      	ldr	r2, [pc, #56]	; (800d548 <HAL_RCC_OscConfig+0x2ac>)
 800d510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d514:	6413      	str	r3, [r2, #64]	; 0x40
 800d516:	4b0c      	ldr	r3, [pc, #48]	; (800d548 <HAL_RCC_OscConfig+0x2ac>)
 800d518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d51a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d51e:	60bb      	str	r3, [r7, #8]
 800d520:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d522:	2301      	movs	r3, #1
 800d524:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d526:	4b0b      	ldr	r3, [pc, #44]	; (800d554 <HAL_RCC_OscConfig+0x2b8>)
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d121      	bne.n	800d576 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800d532:	4b08      	ldr	r3, [pc, #32]	; (800d554 <HAL_RCC_OscConfig+0x2b8>)
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	4a07      	ldr	r2, [pc, #28]	; (800d554 <HAL_RCC_OscConfig+0x2b8>)
 800d538:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d53c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d53e:	f7fd fe6b 	bl	800b218 <HAL_GetTick>
 800d542:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d544:	e011      	b.n	800d56a <HAL_RCC_OscConfig+0x2ce>
 800d546:	bf00      	nop
 800d548:	40023800 	.word	0x40023800
 800d54c:	42470000 	.word	0x42470000
 800d550:	42470e80 	.word	0x42470e80
 800d554:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d558:	f7fd fe5e 	bl	800b218 <HAL_GetTick>
 800d55c:	4602      	mov	r2, r0
 800d55e:	693b      	ldr	r3, [r7, #16]
 800d560:	1ad3      	subs	r3, r2, r3
 800d562:	2b02      	cmp	r3, #2
 800d564:	d901      	bls.n	800d56a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800d566:	2303      	movs	r3, #3
 800d568:	e0fd      	b.n	800d766 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d56a:	4b81      	ldr	r3, [pc, #516]	; (800d770 <HAL_RCC_OscConfig+0x4d4>)
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d572:	2b00      	cmp	r3, #0
 800d574:	d0f0      	beq.n	800d558 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	689b      	ldr	r3, [r3, #8]
 800d57a:	2b01      	cmp	r3, #1
 800d57c:	d106      	bne.n	800d58c <HAL_RCC_OscConfig+0x2f0>
 800d57e:	4b7d      	ldr	r3, [pc, #500]	; (800d774 <HAL_RCC_OscConfig+0x4d8>)
 800d580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d582:	4a7c      	ldr	r2, [pc, #496]	; (800d774 <HAL_RCC_OscConfig+0x4d8>)
 800d584:	f043 0301 	orr.w	r3, r3, #1
 800d588:	6713      	str	r3, [r2, #112]	; 0x70
 800d58a:	e01c      	b.n	800d5c6 <HAL_RCC_OscConfig+0x32a>
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	689b      	ldr	r3, [r3, #8]
 800d590:	2b05      	cmp	r3, #5
 800d592:	d10c      	bne.n	800d5ae <HAL_RCC_OscConfig+0x312>
 800d594:	4b77      	ldr	r3, [pc, #476]	; (800d774 <HAL_RCC_OscConfig+0x4d8>)
 800d596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d598:	4a76      	ldr	r2, [pc, #472]	; (800d774 <HAL_RCC_OscConfig+0x4d8>)
 800d59a:	f043 0304 	orr.w	r3, r3, #4
 800d59e:	6713      	str	r3, [r2, #112]	; 0x70
 800d5a0:	4b74      	ldr	r3, [pc, #464]	; (800d774 <HAL_RCC_OscConfig+0x4d8>)
 800d5a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d5a4:	4a73      	ldr	r2, [pc, #460]	; (800d774 <HAL_RCC_OscConfig+0x4d8>)
 800d5a6:	f043 0301 	orr.w	r3, r3, #1
 800d5aa:	6713      	str	r3, [r2, #112]	; 0x70
 800d5ac:	e00b      	b.n	800d5c6 <HAL_RCC_OscConfig+0x32a>
 800d5ae:	4b71      	ldr	r3, [pc, #452]	; (800d774 <HAL_RCC_OscConfig+0x4d8>)
 800d5b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d5b2:	4a70      	ldr	r2, [pc, #448]	; (800d774 <HAL_RCC_OscConfig+0x4d8>)
 800d5b4:	f023 0301 	bic.w	r3, r3, #1
 800d5b8:	6713      	str	r3, [r2, #112]	; 0x70
 800d5ba:	4b6e      	ldr	r3, [pc, #440]	; (800d774 <HAL_RCC_OscConfig+0x4d8>)
 800d5bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d5be:	4a6d      	ldr	r2, [pc, #436]	; (800d774 <HAL_RCC_OscConfig+0x4d8>)
 800d5c0:	f023 0304 	bic.w	r3, r3, #4
 800d5c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	689b      	ldr	r3, [r3, #8]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d015      	beq.n	800d5fa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d5ce:	f7fd fe23 	bl	800b218 <HAL_GetTick>
 800d5d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d5d4:	e00a      	b.n	800d5ec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d5d6:	f7fd fe1f 	bl	800b218 <HAL_GetTick>
 800d5da:	4602      	mov	r2, r0
 800d5dc:	693b      	ldr	r3, [r7, #16]
 800d5de:	1ad3      	subs	r3, r2, r3
 800d5e0:	f241 3288 	movw	r2, #5000	; 0x1388
 800d5e4:	4293      	cmp	r3, r2
 800d5e6:	d901      	bls.n	800d5ec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800d5e8:	2303      	movs	r3, #3
 800d5ea:	e0bc      	b.n	800d766 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d5ec:	4b61      	ldr	r3, [pc, #388]	; (800d774 <HAL_RCC_OscConfig+0x4d8>)
 800d5ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d5f0:	f003 0302 	and.w	r3, r3, #2
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d0ee      	beq.n	800d5d6 <HAL_RCC_OscConfig+0x33a>
 800d5f8:	e014      	b.n	800d624 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d5fa:	f7fd fe0d 	bl	800b218 <HAL_GetTick>
 800d5fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d600:	e00a      	b.n	800d618 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d602:	f7fd fe09 	bl	800b218 <HAL_GetTick>
 800d606:	4602      	mov	r2, r0
 800d608:	693b      	ldr	r3, [r7, #16]
 800d60a:	1ad3      	subs	r3, r2, r3
 800d60c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d610:	4293      	cmp	r3, r2
 800d612:	d901      	bls.n	800d618 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800d614:	2303      	movs	r3, #3
 800d616:	e0a6      	b.n	800d766 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d618:	4b56      	ldr	r3, [pc, #344]	; (800d774 <HAL_RCC_OscConfig+0x4d8>)
 800d61a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d61c:	f003 0302 	and.w	r3, r3, #2
 800d620:	2b00      	cmp	r3, #0
 800d622:	d1ee      	bne.n	800d602 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d624:	7dfb      	ldrb	r3, [r7, #23]
 800d626:	2b01      	cmp	r3, #1
 800d628:	d105      	bne.n	800d636 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d62a:	4b52      	ldr	r3, [pc, #328]	; (800d774 <HAL_RCC_OscConfig+0x4d8>)
 800d62c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d62e:	4a51      	ldr	r2, [pc, #324]	; (800d774 <HAL_RCC_OscConfig+0x4d8>)
 800d630:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d634:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	699b      	ldr	r3, [r3, #24]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	f000 8092 	beq.w	800d764 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800d640:	4b4c      	ldr	r3, [pc, #304]	; (800d774 <HAL_RCC_OscConfig+0x4d8>)
 800d642:	689b      	ldr	r3, [r3, #8]
 800d644:	f003 030c 	and.w	r3, r3, #12
 800d648:	2b08      	cmp	r3, #8
 800d64a:	d05c      	beq.n	800d706 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	699b      	ldr	r3, [r3, #24]
 800d650:	2b02      	cmp	r3, #2
 800d652:	d141      	bne.n	800d6d8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d654:	4b48      	ldr	r3, [pc, #288]	; (800d778 <HAL_RCC_OscConfig+0x4dc>)
 800d656:	2200      	movs	r2, #0
 800d658:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d65a:	f7fd fddd 	bl	800b218 <HAL_GetTick>
 800d65e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d660:	e008      	b.n	800d674 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d662:	f7fd fdd9 	bl	800b218 <HAL_GetTick>
 800d666:	4602      	mov	r2, r0
 800d668:	693b      	ldr	r3, [r7, #16]
 800d66a:	1ad3      	subs	r3, r2, r3
 800d66c:	2b02      	cmp	r3, #2
 800d66e:	d901      	bls.n	800d674 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800d670:	2303      	movs	r3, #3
 800d672:	e078      	b.n	800d766 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d674:	4b3f      	ldr	r3, [pc, #252]	; (800d774 <HAL_RCC_OscConfig+0x4d8>)
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d1f0      	bne.n	800d662 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	69da      	ldr	r2, [r3, #28]
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	6a1b      	ldr	r3, [r3, #32]
 800d688:	431a      	orrs	r2, r3
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d68e:	019b      	lsls	r3, r3, #6
 800d690:	431a      	orrs	r2, r3
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d696:	085b      	lsrs	r3, r3, #1
 800d698:	3b01      	subs	r3, #1
 800d69a:	041b      	lsls	r3, r3, #16
 800d69c:	431a      	orrs	r2, r3
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6a2:	061b      	lsls	r3, r3, #24
 800d6a4:	4933      	ldr	r1, [pc, #204]	; (800d774 <HAL_RCC_OscConfig+0x4d8>)
 800d6a6:	4313      	orrs	r3, r2
 800d6a8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d6aa:	4b33      	ldr	r3, [pc, #204]	; (800d778 <HAL_RCC_OscConfig+0x4dc>)
 800d6ac:	2201      	movs	r2, #1
 800d6ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d6b0:	f7fd fdb2 	bl	800b218 <HAL_GetTick>
 800d6b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d6b6:	e008      	b.n	800d6ca <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d6b8:	f7fd fdae 	bl	800b218 <HAL_GetTick>
 800d6bc:	4602      	mov	r2, r0
 800d6be:	693b      	ldr	r3, [r7, #16]
 800d6c0:	1ad3      	subs	r3, r2, r3
 800d6c2:	2b02      	cmp	r3, #2
 800d6c4:	d901      	bls.n	800d6ca <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800d6c6:	2303      	movs	r3, #3
 800d6c8:	e04d      	b.n	800d766 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d6ca:	4b2a      	ldr	r3, [pc, #168]	; (800d774 <HAL_RCC_OscConfig+0x4d8>)
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d0f0      	beq.n	800d6b8 <HAL_RCC_OscConfig+0x41c>
 800d6d6:	e045      	b.n	800d764 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d6d8:	4b27      	ldr	r3, [pc, #156]	; (800d778 <HAL_RCC_OscConfig+0x4dc>)
 800d6da:	2200      	movs	r2, #0
 800d6dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d6de:	f7fd fd9b 	bl	800b218 <HAL_GetTick>
 800d6e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d6e4:	e008      	b.n	800d6f8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d6e6:	f7fd fd97 	bl	800b218 <HAL_GetTick>
 800d6ea:	4602      	mov	r2, r0
 800d6ec:	693b      	ldr	r3, [r7, #16]
 800d6ee:	1ad3      	subs	r3, r2, r3
 800d6f0:	2b02      	cmp	r3, #2
 800d6f2:	d901      	bls.n	800d6f8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800d6f4:	2303      	movs	r3, #3
 800d6f6:	e036      	b.n	800d766 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d6f8:	4b1e      	ldr	r3, [pc, #120]	; (800d774 <HAL_RCC_OscConfig+0x4d8>)
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d700:	2b00      	cmp	r3, #0
 800d702:	d1f0      	bne.n	800d6e6 <HAL_RCC_OscConfig+0x44a>
 800d704:	e02e      	b.n	800d764 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	699b      	ldr	r3, [r3, #24]
 800d70a:	2b01      	cmp	r3, #1
 800d70c:	d101      	bne.n	800d712 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800d70e:	2301      	movs	r3, #1
 800d710:	e029      	b.n	800d766 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800d712:	4b18      	ldr	r3, [pc, #96]	; (800d774 <HAL_RCC_OscConfig+0x4d8>)
 800d714:	689b      	ldr	r3, [r3, #8]
 800d716:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	69db      	ldr	r3, [r3, #28]
 800d722:	429a      	cmp	r2, r3
 800d724:	d11c      	bne.n	800d760 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d730:	429a      	cmp	r2, r3
 800d732:	d115      	bne.n	800d760 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800d734:	68fa      	ldr	r2, [r7, #12]
 800d736:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800d73a:	4013      	ands	r3, r2
 800d73c:	687a      	ldr	r2, [r7, #4]
 800d73e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d740:	4293      	cmp	r3, r2
 800d742:	d10d      	bne.n	800d760 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800d74e:	429a      	cmp	r2, r3
 800d750:	d106      	bne.n	800d760 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800d75c:	429a      	cmp	r2, r3
 800d75e:	d001      	beq.n	800d764 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800d760:	2301      	movs	r3, #1
 800d762:	e000      	b.n	800d766 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800d764:	2300      	movs	r3, #0
}
 800d766:	4618      	mov	r0, r3
 800d768:	3718      	adds	r7, #24
 800d76a:	46bd      	mov	sp, r7
 800d76c:	bd80      	pop	{r7, pc}
 800d76e:	bf00      	nop
 800d770:	40007000 	.word	0x40007000
 800d774:	40023800 	.word	0x40023800
 800d778:	42470060 	.word	0x42470060

0800d77c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b084      	sub	sp, #16
 800d780:	af00      	add	r7, sp, #0
 800d782:	6078      	str	r0, [r7, #4]
 800d784:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d101      	bne.n	800d790 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d78c:	2301      	movs	r3, #1
 800d78e:	e0cc      	b.n	800d92a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800d790:	4b68      	ldr	r3, [pc, #416]	; (800d934 <HAL_RCC_ClockConfig+0x1b8>)
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	f003 030f 	and.w	r3, r3, #15
 800d798:	683a      	ldr	r2, [r7, #0]
 800d79a:	429a      	cmp	r2, r3
 800d79c:	d90c      	bls.n	800d7b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d79e:	4b65      	ldr	r3, [pc, #404]	; (800d934 <HAL_RCC_ClockConfig+0x1b8>)
 800d7a0:	683a      	ldr	r2, [r7, #0]
 800d7a2:	b2d2      	uxtb	r2, r2
 800d7a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d7a6:	4b63      	ldr	r3, [pc, #396]	; (800d934 <HAL_RCC_ClockConfig+0x1b8>)
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	f003 030f 	and.w	r3, r3, #15
 800d7ae:	683a      	ldr	r2, [r7, #0]
 800d7b0:	429a      	cmp	r2, r3
 800d7b2:	d001      	beq.n	800d7b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800d7b4:	2301      	movs	r3, #1
 800d7b6:	e0b8      	b.n	800d92a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	f003 0302 	and.w	r3, r3, #2
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d020      	beq.n	800d806 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	f003 0304 	and.w	r3, r3, #4
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d005      	beq.n	800d7dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800d7d0:	4b59      	ldr	r3, [pc, #356]	; (800d938 <HAL_RCC_ClockConfig+0x1bc>)
 800d7d2:	689b      	ldr	r3, [r3, #8]
 800d7d4:	4a58      	ldr	r2, [pc, #352]	; (800d938 <HAL_RCC_ClockConfig+0x1bc>)
 800d7d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800d7da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	f003 0308 	and.w	r3, r3, #8
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d005      	beq.n	800d7f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800d7e8:	4b53      	ldr	r3, [pc, #332]	; (800d938 <HAL_RCC_ClockConfig+0x1bc>)
 800d7ea:	689b      	ldr	r3, [r3, #8]
 800d7ec:	4a52      	ldr	r2, [pc, #328]	; (800d938 <HAL_RCC_ClockConfig+0x1bc>)
 800d7ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800d7f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d7f4:	4b50      	ldr	r3, [pc, #320]	; (800d938 <HAL_RCC_ClockConfig+0x1bc>)
 800d7f6:	689b      	ldr	r3, [r3, #8]
 800d7f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	689b      	ldr	r3, [r3, #8]
 800d800:	494d      	ldr	r1, [pc, #308]	; (800d938 <HAL_RCC_ClockConfig+0x1bc>)
 800d802:	4313      	orrs	r3, r2
 800d804:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	f003 0301 	and.w	r3, r3, #1
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d044      	beq.n	800d89c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	685b      	ldr	r3, [r3, #4]
 800d816:	2b01      	cmp	r3, #1
 800d818:	d107      	bne.n	800d82a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d81a:	4b47      	ldr	r3, [pc, #284]	; (800d938 <HAL_RCC_ClockConfig+0x1bc>)
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d822:	2b00      	cmp	r3, #0
 800d824:	d119      	bne.n	800d85a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d826:	2301      	movs	r3, #1
 800d828:	e07f      	b.n	800d92a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	685b      	ldr	r3, [r3, #4]
 800d82e:	2b02      	cmp	r3, #2
 800d830:	d003      	beq.n	800d83a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800d836:	2b03      	cmp	r3, #3
 800d838:	d107      	bne.n	800d84a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d83a:	4b3f      	ldr	r3, [pc, #252]	; (800d938 <HAL_RCC_ClockConfig+0x1bc>)
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d842:	2b00      	cmp	r3, #0
 800d844:	d109      	bne.n	800d85a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d846:	2301      	movs	r3, #1
 800d848:	e06f      	b.n	800d92a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d84a:	4b3b      	ldr	r3, [pc, #236]	; (800d938 <HAL_RCC_ClockConfig+0x1bc>)
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	f003 0302 	and.w	r3, r3, #2
 800d852:	2b00      	cmp	r3, #0
 800d854:	d101      	bne.n	800d85a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d856:	2301      	movs	r3, #1
 800d858:	e067      	b.n	800d92a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800d85a:	4b37      	ldr	r3, [pc, #220]	; (800d938 <HAL_RCC_ClockConfig+0x1bc>)
 800d85c:	689b      	ldr	r3, [r3, #8]
 800d85e:	f023 0203 	bic.w	r2, r3, #3
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	685b      	ldr	r3, [r3, #4]
 800d866:	4934      	ldr	r1, [pc, #208]	; (800d938 <HAL_RCC_ClockConfig+0x1bc>)
 800d868:	4313      	orrs	r3, r2
 800d86a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800d86c:	f7fd fcd4 	bl	800b218 <HAL_GetTick>
 800d870:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d872:	e00a      	b.n	800d88a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d874:	f7fd fcd0 	bl	800b218 <HAL_GetTick>
 800d878:	4602      	mov	r2, r0
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	1ad3      	subs	r3, r2, r3
 800d87e:	f241 3288 	movw	r2, #5000	; 0x1388
 800d882:	4293      	cmp	r3, r2
 800d884:	d901      	bls.n	800d88a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800d886:	2303      	movs	r3, #3
 800d888:	e04f      	b.n	800d92a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d88a:	4b2b      	ldr	r3, [pc, #172]	; (800d938 <HAL_RCC_ClockConfig+0x1bc>)
 800d88c:	689b      	ldr	r3, [r3, #8]
 800d88e:	f003 020c 	and.w	r2, r3, #12
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	685b      	ldr	r3, [r3, #4]
 800d896:	009b      	lsls	r3, r3, #2
 800d898:	429a      	cmp	r2, r3
 800d89a:	d1eb      	bne.n	800d874 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800d89c:	4b25      	ldr	r3, [pc, #148]	; (800d934 <HAL_RCC_ClockConfig+0x1b8>)
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	f003 030f 	and.w	r3, r3, #15
 800d8a4:	683a      	ldr	r2, [r7, #0]
 800d8a6:	429a      	cmp	r2, r3
 800d8a8:	d20c      	bcs.n	800d8c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d8aa:	4b22      	ldr	r3, [pc, #136]	; (800d934 <HAL_RCC_ClockConfig+0x1b8>)
 800d8ac:	683a      	ldr	r2, [r7, #0]
 800d8ae:	b2d2      	uxtb	r2, r2
 800d8b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d8b2:	4b20      	ldr	r3, [pc, #128]	; (800d934 <HAL_RCC_ClockConfig+0x1b8>)
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	f003 030f 	and.w	r3, r3, #15
 800d8ba:	683a      	ldr	r2, [r7, #0]
 800d8bc:	429a      	cmp	r2, r3
 800d8be:	d001      	beq.n	800d8c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800d8c0:	2301      	movs	r3, #1
 800d8c2:	e032      	b.n	800d92a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	f003 0304 	and.w	r3, r3, #4
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d008      	beq.n	800d8e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d8d0:	4b19      	ldr	r3, [pc, #100]	; (800d938 <HAL_RCC_ClockConfig+0x1bc>)
 800d8d2:	689b      	ldr	r3, [r3, #8]
 800d8d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	68db      	ldr	r3, [r3, #12]
 800d8dc:	4916      	ldr	r1, [pc, #88]	; (800d938 <HAL_RCC_ClockConfig+0x1bc>)
 800d8de:	4313      	orrs	r3, r2
 800d8e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	f003 0308 	and.w	r3, r3, #8
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d009      	beq.n	800d902 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800d8ee:	4b12      	ldr	r3, [pc, #72]	; (800d938 <HAL_RCC_ClockConfig+0x1bc>)
 800d8f0:	689b      	ldr	r3, [r3, #8]
 800d8f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	691b      	ldr	r3, [r3, #16]
 800d8fa:	00db      	lsls	r3, r3, #3
 800d8fc:	490e      	ldr	r1, [pc, #56]	; (800d938 <HAL_RCC_ClockConfig+0x1bc>)
 800d8fe:	4313      	orrs	r3, r2
 800d900:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800d902:	f000 f821 	bl	800d948 <HAL_RCC_GetSysClockFreq>
 800d906:	4601      	mov	r1, r0
 800d908:	4b0b      	ldr	r3, [pc, #44]	; (800d938 <HAL_RCC_ClockConfig+0x1bc>)
 800d90a:	689b      	ldr	r3, [r3, #8]
 800d90c:	091b      	lsrs	r3, r3, #4
 800d90e:	f003 030f 	and.w	r3, r3, #15
 800d912:	4a0a      	ldr	r2, [pc, #40]	; (800d93c <HAL_RCC_ClockConfig+0x1c0>)
 800d914:	5cd3      	ldrb	r3, [r2, r3]
 800d916:	fa21 f303 	lsr.w	r3, r1, r3
 800d91a:	4a09      	ldr	r2, [pc, #36]	; (800d940 <HAL_RCC_ClockConfig+0x1c4>)
 800d91c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800d91e:	4b09      	ldr	r3, [pc, #36]	; (800d944 <HAL_RCC_ClockConfig+0x1c8>)
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	4618      	mov	r0, r3
 800d924:	f7fd f9e0 	bl	800ace8 <HAL_InitTick>

  return HAL_OK;
 800d928:	2300      	movs	r3, #0
}
 800d92a:	4618      	mov	r0, r3
 800d92c:	3710      	adds	r7, #16
 800d92e:	46bd      	mov	sp, r7
 800d930:	bd80      	pop	{r7, pc}
 800d932:	bf00      	nop
 800d934:	40023c00 	.word	0x40023c00
 800d938:	40023800 	.word	0x40023800
 800d93c:	0801be5c 	.word	0x0801be5c
 800d940:	20000ce0 	.word	0x20000ce0
 800d944:	20000ce4 	.word	0x20000ce4

0800d948 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d94a:	b085      	sub	sp, #20
 800d94c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800d94e:	2300      	movs	r3, #0
 800d950:	607b      	str	r3, [r7, #4]
 800d952:	2300      	movs	r3, #0
 800d954:	60fb      	str	r3, [r7, #12]
 800d956:	2300      	movs	r3, #0
 800d958:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800d95a:	2300      	movs	r3, #0
 800d95c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d95e:	4b63      	ldr	r3, [pc, #396]	; (800daec <HAL_RCC_GetSysClockFreq+0x1a4>)
 800d960:	689b      	ldr	r3, [r3, #8]
 800d962:	f003 030c 	and.w	r3, r3, #12
 800d966:	2b04      	cmp	r3, #4
 800d968:	d007      	beq.n	800d97a <HAL_RCC_GetSysClockFreq+0x32>
 800d96a:	2b08      	cmp	r3, #8
 800d96c:	d008      	beq.n	800d980 <HAL_RCC_GetSysClockFreq+0x38>
 800d96e:	2b00      	cmp	r3, #0
 800d970:	f040 80b4 	bne.w	800dadc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800d974:	4b5e      	ldr	r3, [pc, #376]	; (800daf0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800d976:	60bb      	str	r3, [r7, #8]
       break;
 800d978:	e0b3      	b.n	800dae2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800d97a:	4b5e      	ldr	r3, [pc, #376]	; (800daf4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800d97c:	60bb      	str	r3, [r7, #8]
      break;
 800d97e:	e0b0      	b.n	800dae2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800d980:	4b5a      	ldr	r3, [pc, #360]	; (800daec <HAL_RCC_GetSysClockFreq+0x1a4>)
 800d982:	685b      	ldr	r3, [r3, #4]
 800d984:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d988:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800d98a:	4b58      	ldr	r3, [pc, #352]	; (800daec <HAL_RCC_GetSysClockFreq+0x1a4>)
 800d98c:	685b      	ldr	r3, [r3, #4]
 800d98e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d992:	2b00      	cmp	r3, #0
 800d994:	d04a      	beq.n	800da2c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d996:	4b55      	ldr	r3, [pc, #340]	; (800daec <HAL_RCC_GetSysClockFreq+0x1a4>)
 800d998:	685b      	ldr	r3, [r3, #4]
 800d99a:	099b      	lsrs	r3, r3, #6
 800d99c:	f04f 0400 	mov.w	r4, #0
 800d9a0:	f240 11ff 	movw	r1, #511	; 0x1ff
 800d9a4:	f04f 0200 	mov.w	r2, #0
 800d9a8:	ea03 0501 	and.w	r5, r3, r1
 800d9ac:	ea04 0602 	and.w	r6, r4, r2
 800d9b0:	4629      	mov	r1, r5
 800d9b2:	4632      	mov	r2, r6
 800d9b4:	f04f 0300 	mov.w	r3, #0
 800d9b8:	f04f 0400 	mov.w	r4, #0
 800d9bc:	0154      	lsls	r4, r2, #5
 800d9be:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800d9c2:	014b      	lsls	r3, r1, #5
 800d9c4:	4619      	mov	r1, r3
 800d9c6:	4622      	mov	r2, r4
 800d9c8:	1b49      	subs	r1, r1, r5
 800d9ca:	eb62 0206 	sbc.w	r2, r2, r6
 800d9ce:	f04f 0300 	mov.w	r3, #0
 800d9d2:	f04f 0400 	mov.w	r4, #0
 800d9d6:	0194      	lsls	r4, r2, #6
 800d9d8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800d9dc:	018b      	lsls	r3, r1, #6
 800d9de:	1a5b      	subs	r3, r3, r1
 800d9e0:	eb64 0402 	sbc.w	r4, r4, r2
 800d9e4:	f04f 0100 	mov.w	r1, #0
 800d9e8:	f04f 0200 	mov.w	r2, #0
 800d9ec:	00e2      	lsls	r2, r4, #3
 800d9ee:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800d9f2:	00d9      	lsls	r1, r3, #3
 800d9f4:	460b      	mov	r3, r1
 800d9f6:	4614      	mov	r4, r2
 800d9f8:	195b      	adds	r3, r3, r5
 800d9fa:	eb44 0406 	adc.w	r4, r4, r6
 800d9fe:	f04f 0100 	mov.w	r1, #0
 800da02:	f04f 0200 	mov.w	r2, #0
 800da06:	0262      	lsls	r2, r4, #9
 800da08:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800da0c:	0259      	lsls	r1, r3, #9
 800da0e:	460b      	mov	r3, r1
 800da10:	4614      	mov	r4, r2
 800da12:	4618      	mov	r0, r3
 800da14:	4621      	mov	r1, r4
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	f04f 0400 	mov.w	r4, #0
 800da1c:	461a      	mov	r2, r3
 800da1e:	4623      	mov	r3, r4
 800da20:	f7f3 f942 	bl	8000ca8 <__aeabi_uldivmod>
 800da24:	4603      	mov	r3, r0
 800da26:	460c      	mov	r4, r1
 800da28:	60fb      	str	r3, [r7, #12]
 800da2a:	e049      	b.n	800dac0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800da2c:	4b2f      	ldr	r3, [pc, #188]	; (800daec <HAL_RCC_GetSysClockFreq+0x1a4>)
 800da2e:	685b      	ldr	r3, [r3, #4]
 800da30:	099b      	lsrs	r3, r3, #6
 800da32:	f04f 0400 	mov.w	r4, #0
 800da36:	f240 11ff 	movw	r1, #511	; 0x1ff
 800da3a:	f04f 0200 	mov.w	r2, #0
 800da3e:	ea03 0501 	and.w	r5, r3, r1
 800da42:	ea04 0602 	and.w	r6, r4, r2
 800da46:	4629      	mov	r1, r5
 800da48:	4632      	mov	r2, r6
 800da4a:	f04f 0300 	mov.w	r3, #0
 800da4e:	f04f 0400 	mov.w	r4, #0
 800da52:	0154      	lsls	r4, r2, #5
 800da54:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800da58:	014b      	lsls	r3, r1, #5
 800da5a:	4619      	mov	r1, r3
 800da5c:	4622      	mov	r2, r4
 800da5e:	1b49      	subs	r1, r1, r5
 800da60:	eb62 0206 	sbc.w	r2, r2, r6
 800da64:	f04f 0300 	mov.w	r3, #0
 800da68:	f04f 0400 	mov.w	r4, #0
 800da6c:	0194      	lsls	r4, r2, #6
 800da6e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800da72:	018b      	lsls	r3, r1, #6
 800da74:	1a5b      	subs	r3, r3, r1
 800da76:	eb64 0402 	sbc.w	r4, r4, r2
 800da7a:	f04f 0100 	mov.w	r1, #0
 800da7e:	f04f 0200 	mov.w	r2, #0
 800da82:	00e2      	lsls	r2, r4, #3
 800da84:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800da88:	00d9      	lsls	r1, r3, #3
 800da8a:	460b      	mov	r3, r1
 800da8c:	4614      	mov	r4, r2
 800da8e:	195b      	adds	r3, r3, r5
 800da90:	eb44 0406 	adc.w	r4, r4, r6
 800da94:	f04f 0100 	mov.w	r1, #0
 800da98:	f04f 0200 	mov.w	r2, #0
 800da9c:	02a2      	lsls	r2, r4, #10
 800da9e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800daa2:	0299      	lsls	r1, r3, #10
 800daa4:	460b      	mov	r3, r1
 800daa6:	4614      	mov	r4, r2
 800daa8:	4618      	mov	r0, r3
 800daaa:	4621      	mov	r1, r4
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	f04f 0400 	mov.w	r4, #0
 800dab2:	461a      	mov	r2, r3
 800dab4:	4623      	mov	r3, r4
 800dab6:	f7f3 f8f7 	bl	8000ca8 <__aeabi_uldivmod>
 800daba:	4603      	mov	r3, r0
 800dabc:	460c      	mov	r4, r1
 800dabe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800dac0:	4b0a      	ldr	r3, [pc, #40]	; (800daec <HAL_RCC_GetSysClockFreq+0x1a4>)
 800dac2:	685b      	ldr	r3, [r3, #4]
 800dac4:	0c1b      	lsrs	r3, r3, #16
 800dac6:	f003 0303 	and.w	r3, r3, #3
 800daca:	3301      	adds	r3, #1
 800dacc:	005b      	lsls	r3, r3, #1
 800dace:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800dad0:	68fa      	ldr	r2, [r7, #12]
 800dad2:	683b      	ldr	r3, [r7, #0]
 800dad4:	fbb2 f3f3 	udiv	r3, r2, r3
 800dad8:	60bb      	str	r3, [r7, #8]
      break;
 800dada:	e002      	b.n	800dae2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800dadc:	4b04      	ldr	r3, [pc, #16]	; (800daf0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800dade:	60bb      	str	r3, [r7, #8]
      break;
 800dae0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800dae2:	68bb      	ldr	r3, [r7, #8]
}
 800dae4:	4618      	mov	r0, r3
 800dae6:	3714      	adds	r7, #20
 800dae8:	46bd      	mov	sp, r7
 800daea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800daec:	40023800 	.word	0x40023800
 800daf0:	00f42400 	.word	0x00f42400
 800daf4:	007a1200 	.word	0x007a1200

0800daf8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800daf8:	b480      	push	{r7}
 800dafa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800dafc:	4b03      	ldr	r3, [pc, #12]	; (800db0c <HAL_RCC_GetHCLKFreq+0x14>)
 800dafe:	681b      	ldr	r3, [r3, #0]
}
 800db00:	4618      	mov	r0, r3
 800db02:	46bd      	mov	sp, r7
 800db04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db08:	4770      	bx	lr
 800db0a:	bf00      	nop
 800db0c:	20000ce0 	.word	0x20000ce0

0800db10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800db10:	b580      	push	{r7, lr}
 800db12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800db14:	f7ff fff0 	bl	800daf8 <HAL_RCC_GetHCLKFreq>
 800db18:	4601      	mov	r1, r0
 800db1a:	4b05      	ldr	r3, [pc, #20]	; (800db30 <HAL_RCC_GetPCLK1Freq+0x20>)
 800db1c:	689b      	ldr	r3, [r3, #8]
 800db1e:	0a9b      	lsrs	r3, r3, #10
 800db20:	f003 0307 	and.w	r3, r3, #7
 800db24:	4a03      	ldr	r2, [pc, #12]	; (800db34 <HAL_RCC_GetPCLK1Freq+0x24>)
 800db26:	5cd3      	ldrb	r3, [r2, r3]
 800db28:	fa21 f303 	lsr.w	r3, r1, r3
}
 800db2c:	4618      	mov	r0, r3
 800db2e:	bd80      	pop	{r7, pc}
 800db30:	40023800 	.word	0x40023800
 800db34:	0801be6c 	.word	0x0801be6c

0800db38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800db38:	b580      	push	{r7, lr}
 800db3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800db3c:	f7ff ffdc 	bl	800daf8 <HAL_RCC_GetHCLKFreq>
 800db40:	4601      	mov	r1, r0
 800db42:	4b05      	ldr	r3, [pc, #20]	; (800db58 <HAL_RCC_GetPCLK2Freq+0x20>)
 800db44:	689b      	ldr	r3, [r3, #8]
 800db46:	0b5b      	lsrs	r3, r3, #13
 800db48:	f003 0307 	and.w	r3, r3, #7
 800db4c:	4a03      	ldr	r2, [pc, #12]	; (800db5c <HAL_RCC_GetPCLK2Freq+0x24>)
 800db4e:	5cd3      	ldrb	r3, [r2, r3]
 800db50:	fa21 f303 	lsr.w	r3, r1, r3
}
 800db54:	4618      	mov	r0, r3
 800db56:	bd80      	pop	{r7, pc}
 800db58:	40023800 	.word	0x40023800
 800db5c:	0801be6c 	.word	0x0801be6c

0800db60 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800db60:	b480      	push	{r7}
 800db62:	b083      	sub	sp, #12
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
 800db68:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	220f      	movs	r2, #15
 800db6e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800db70:	4b12      	ldr	r3, [pc, #72]	; (800dbbc <HAL_RCC_GetClockConfig+0x5c>)
 800db72:	689b      	ldr	r3, [r3, #8]
 800db74:	f003 0203 	and.w	r2, r3, #3
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800db7c:	4b0f      	ldr	r3, [pc, #60]	; (800dbbc <HAL_RCC_GetClockConfig+0x5c>)
 800db7e:	689b      	ldr	r3, [r3, #8]
 800db80:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800db88:	4b0c      	ldr	r3, [pc, #48]	; (800dbbc <HAL_RCC_GetClockConfig+0x5c>)
 800db8a:	689b      	ldr	r3, [r3, #8]
 800db8c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800db94:	4b09      	ldr	r3, [pc, #36]	; (800dbbc <HAL_RCC_GetClockConfig+0x5c>)
 800db96:	689b      	ldr	r3, [r3, #8]
 800db98:	08db      	lsrs	r3, r3, #3
 800db9a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800dba2:	4b07      	ldr	r3, [pc, #28]	; (800dbc0 <HAL_RCC_GetClockConfig+0x60>)
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	f003 020f 	and.w	r2, r3, #15
 800dbaa:	683b      	ldr	r3, [r7, #0]
 800dbac:	601a      	str	r2, [r3, #0]
}
 800dbae:	bf00      	nop
 800dbb0:	370c      	adds	r7, #12
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb8:	4770      	bx	lr
 800dbba:	bf00      	nop
 800dbbc:	40023800 	.word	0x40023800
 800dbc0:	40023c00 	.word	0x40023c00

0800dbc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800dbc4:	b580      	push	{r7, lr}
 800dbc6:	b082      	sub	sp, #8
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d101      	bne.n	800dbd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800dbd2:	2301      	movs	r3, #1
 800dbd4:	e01d      	b.n	800dc12 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dbdc:	b2db      	uxtb	r3, r3
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d106      	bne.n	800dbf0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	2200      	movs	r2, #0
 800dbe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800dbea:	6878      	ldr	r0, [r7, #4]
 800dbec:	f7fd f9b8 	bl	800af60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	2202      	movs	r2, #2
 800dbf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	681a      	ldr	r2, [r3, #0]
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	3304      	adds	r3, #4
 800dc00:	4619      	mov	r1, r3
 800dc02:	4610      	mov	r0, r2
 800dc04:	f000 f95e 	bl	800dec4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	2201      	movs	r2, #1
 800dc0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800dc10:	2300      	movs	r3, #0
}
 800dc12:	4618      	mov	r0, r3
 800dc14:	3708      	adds	r7, #8
 800dc16:	46bd      	mov	sp, r7
 800dc18:	bd80      	pop	{r7, pc}

0800dc1a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800dc1a:	b480      	push	{r7}
 800dc1c:	b085      	sub	sp, #20
 800dc1e:	af00      	add	r7, sp, #0
 800dc20:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	68da      	ldr	r2, [r3, #12]
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	f042 0201 	orr.w	r2, r2, #1
 800dc30:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	689b      	ldr	r3, [r3, #8]
 800dc38:	f003 0307 	and.w	r3, r3, #7
 800dc3c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	2b06      	cmp	r3, #6
 800dc42:	d007      	beq.n	800dc54 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	681a      	ldr	r2, [r3, #0]
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	f042 0201 	orr.w	r2, r2, #1
 800dc52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800dc54:	2300      	movs	r3, #0
}
 800dc56:	4618      	mov	r0, r3
 800dc58:	3714      	adds	r7, #20
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc60:	4770      	bx	lr

0800dc62 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800dc62:	b580      	push	{r7, lr}
 800dc64:	b082      	sub	sp, #8
 800dc66:	af00      	add	r7, sp, #0
 800dc68:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	691b      	ldr	r3, [r3, #16]
 800dc70:	f003 0302 	and.w	r3, r3, #2
 800dc74:	2b02      	cmp	r3, #2
 800dc76:	d122      	bne.n	800dcbe <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	68db      	ldr	r3, [r3, #12]
 800dc7e:	f003 0302 	and.w	r3, r3, #2
 800dc82:	2b02      	cmp	r3, #2
 800dc84:	d11b      	bne.n	800dcbe <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	f06f 0202 	mvn.w	r2, #2
 800dc8e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	2201      	movs	r2, #1
 800dc94:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	699b      	ldr	r3, [r3, #24]
 800dc9c:	f003 0303 	and.w	r3, r3, #3
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d003      	beq.n	800dcac <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800dca4:	6878      	ldr	r0, [r7, #4]
 800dca6:	f000 f8ee 	bl	800de86 <HAL_TIM_IC_CaptureCallback>
 800dcaa:	e005      	b.n	800dcb8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800dcac:	6878      	ldr	r0, [r7, #4]
 800dcae:	f000 f8e0 	bl	800de72 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dcb2:	6878      	ldr	r0, [r7, #4]
 800dcb4:	f000 f8f1 	bl	800de9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	2200      	movs	r2, #0
 800dcbc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	691b      	ldr	r3, [r3, #16]
 800dcc4:	f003 0304 	and.w	r3, r3, #4
 800dcc8:	2b04      	cmp	r3, #4
 800dcca:	d122      	bne.n	800dd12 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	68db      	ldr	r3, [r3, #12]
 800dcd2:	f003 0304 	and.w	r3, r3, #4
 800dcd6:	2b04      	cmp	r3, #4
 800dcd8:	d11b      	bne.n	800dd12 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	f06f 0204 	mvn.w	r2, #4
 800dce2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	2202      	movs	r2, #2
 800dce8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	699b      	ldr	r3, [r3, #24]
 800dcf0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d003      	beq.n	800dd00 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dcf8:	6878      	ldr	r0, [r7, #4]
 800dcfa:	f000 f8c4 	bl	800de86 <HAL_TIM_IC_CaptureCallback>
 800dcfe:	e005      	b.n	800dd0c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dd00:	6878      	ldr	r0, [r7, #4]
 800dd02:	f000 f8b6 	bl	800de72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dd06:	6878      	ldr	r0, [r7, #4]
 800dd08:	f000 f8c7 	bl	800de9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	2200      	movs	r2, #0
 800dd10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	691b      	ldr	r3, [r3, #16]
 800dd18:	f003 0308 	and.w	r3, r3, #8
 800dd1c:	2b08      	cmp	r3, #8
 800dd1e:	d122      	bne.n	800dd66 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	68db      	ldr	r3, [r3, #12]
 800dd26:	f003 0308 	and.w	r3, r3, #8
 800dd2a:	2b08      	cmp	r3, #8
 800dd2c:	d11b      	bne.n	800dd66 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	f06f 0208 	mvn.w	r2, #8
 800dd36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	2204      	movs	r2, #4
 800dd3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	69db      	ldr	r3, [r3, #28]
 800dd44:	f003 0303 	and.w	r3, r3, #3
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d003      	beq.n	800dd54 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dd4c:	6878      	ldr	r0, [r7, #4]
 800dd4e:	f000 f89a 	bl	800de86 <HAL_TIM_IC_CaptureCallback>
 800dd52:	e005      	b.n	800dd60 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dd54:	6878      	ldr	r0, [r7, #4]
 800dd56:	f000 f88c 	bl	800de72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dd5a:	6878      	ldr	r0, [r7, #4]
 800dd5c:	f000 f89d 	bl	800de9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	2200      	movs	r2, #0
 800dd64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	691b      	ldr	r3, [r3, #16]
 800dd6c:	f003 0310 	and.w	r3, r3, #16
 800dd70:	2b10      	cmp	r3, #16
 800dd72:	d122      	bne.n	800ddba <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	68db      	ldr	r3, [r3, #12]
 800dd7a:	f003 0310 	and.w	r3, r3, #16
 800dd7e:	2b10      	cmp	r3, #16
 800dd80:	d11b      	bne.n	800ddba <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	f06f 0210 	mvn.w	r2, #16
 800dd8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	2208      	movs	r2, #8
 800dd90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	69db      	ldr	r3, [r3, #28]
 800dd98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d003      	beq.n	800dda8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dda0:	6878      	ldr	r0, [r7, #4]
 800dda2:	f000 f870 	bl	800de86 <HAL_TIM_IC_CaptureCallback>
 800dda6:	e005      	b.n	800ddb4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dda8:	6878      	ldr	r0, [r7, #4]
 800ddaa:	f000 f862 	bl	800de72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ddae:	6878      	ldr	r0, [r7, #4]
 800ddb0:	f000 f873 	bl	800de9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	2200      	movs	r2, #0
 800ddb8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	691b      	ldr	r3, [r3, #16]
 800ddc0:	f003 0301 	and.w	r3, r3, #1
 800ddc4:	2b01      	cmp	r3, #1
 800ddc6:	d10e      	bne.n	800dde6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	68db      	ldr	r3, [r3, #12]
 800ddce:	f003 0301 	and.w	r3, r3, #1
 800ddd2:	2b01      	cmp	r3, #1
 800ddd4:	d107      	bne.n	800dde6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	f06f 0201 	mvn.w	r2, #1
 800ddde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800dde0:	6878      	ldr	r0, [r7, #4]
 800dde2:	f7f5 fe9f 	bl	8003b24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	691b      	ldr	r3, [r3, #16]
 800ddec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ddf0:	2b80      	cmp	r3, #128	; 0x80
 800ddf2:	d10e      	bne.n	800de12 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	68db      	ldr	r3, [r3, #12]
 800ddfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ddfe:	2b80      	cmp	r3, #128	; 0x80
 800de00:	d107      	bne.n	800de12 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800de0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800de0c:	6878      	ldr	r0, [r7, #4]
 800de0e:	f000 f97f 	bl	800e110 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	691b      	ldr	r3, [r3, #16]
 800de18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de1c:	2b40      	cmp	r3, #64	; 0x40
 800de1e:	d10e      	bne.n	800de3e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	68db      	ldr	r3, [r3, #12]
 800de26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de2a:	2b40      	cmp	r3, #64	; 0x40
 800de2c:	d107      	bne.n	800de3e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800de36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800de38:	6878      	ldr	r0, [r7, #4]
 800de3a:	f000 f838 	bl	800deae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	691b      	ldr	r3, [r3, #16]
 800de44:	f003 0320 	and.w	r3, r3, #32
 800de48:	2b20      	cmp	r3, #32
 800de4a:	d10e      	bne.n	800de6a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	68db      	ldr	r3, [r3, #12]
 800de52:	f003 0320 	and.w	r3, r3, #32
 800de56:	2b20      	cmp	r3, #32
 800de58:	d107      	bne.n	800de6a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	f06f 0220 	mvn.w	r2, #32
 800de62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800de64:	6878      	ldr	r0, [r7, #4]
 800de66:	f000 f949 	bl	800e0fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800de6a:	bf00      	nop
 800de6c:	3708      	adds	r7, #8
 800de6e:	46bd      	mov	sp, r7
 800de70:	bd80      	pop	{r7, pc}

0800de72 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800de72:	b480      	push	{r7}
 800de74:	b083      	sub	sp, #12
 800de76:	af00      	add	r7, sp, #0
 800de78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800de7a:	bf00      	nop
 800de7c:	370c      	adds	r7, #12
 800de7e:	46bd      	mov	sp, r7
 800de80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de84:	4770      	bx	lr

0800de86 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800de86:	b480      	push	{r7}
 800de88:	b083      	sub	sp, #12
 800de8a:	af00      	add	r7, sp, #0
 800de8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800de8e:	bf00      	nop
 800de90:	370c      	adds	r7, #12
 800de92:	46bd      	mov	sp, r7
 800de94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de98:	4770      	bx	lr

0800de9a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800de9a:	b480      	push	{r7}
 800de9c:	b083      	sub	sp, #12
 800de9e:	af00      	add	r7, sp, #0
 800dea0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800dea2:	bf00      	nop
 800dea4:	370c      	adds	r7, #12
 800dea6:	46bd      	mov	sp, r7
 800dea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deac:	4770      	bx	lr

0800deae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800deae:	b480      	push	{r7}
 800deb0:	b083      	sub	sp, #12
 800deb2:	af00      	add	r7, sp, #0
 800deb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800deb6:	bf00      	nop
 800deb8:	370c      	adds	r7, #12
 800deba:	46bd      	mov	sp, r7
 800debc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec0:	4770      	bx	lr
	...

0800dec4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800dec4:	b480      	push	{r7}
 800dec6:	b085      	sub	sp, #20
 800dec8:	af00      	add	r7, sp, #0
 800deca:	6078      	str	r0, [r7, #4]
 800decc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	4a40      	ldr	r2, [pc, #256]	; (800dfd8 <TIM_Base_SetConfig+0x114>)
 800ded8:	4293      	cmp	r3, r2
 800deda:	d013      	beq.n	800df04 <TIM_Base_SetConfig+0x40>
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dee2:	d00f      	beq.n	800df04 <TIM_Base_SetConfig+0x40>
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	4a3d      	ldr	r2, [pc, #244]	; (800dfdc <TIM_Base_SetConfig+0x118>)
 800dee8:	4293      	cmp	r3, r2
 800deea:	d00b      	beq.n	800df04 <TIM_Base_SetConfig+0x40>
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	4a3c      	ldr	r2, [pc, #240]	; (800dfe0 <TIM_Base_SetConfig+0x11c>)
 800def0:	4293      	cmp	r3, r2
 800def2:	d007      	beq.n	800df04 <TIM_Base_SetConfig+0x40>
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	4a3b      	ldr	r2, [pc, #236]	; (800dfe4 <TIM_Base_SetConfig+0x120>)
 800def8:	4293      	cmp	r3, r2
 800defa:	d003      	beq.n	800df04 <TIM_Base_SetConfig+0x40>
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	4a3a      	ldr	r2, [pc, #232]	; (800dfe8 <TIM_Base_SetConfig+0x124>)
 800df00:	4293      	cmp	r3, r2
 800df02:	d108      	bne.n	800df16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800df0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800df0c:	683b      	ldr	r3, [r7, #0]
 800df0e:	685b      	ldr	r3, [r3, #4]
 800df10:	68fa      	ldr	r2, [r7, #12]
 800df12:	4313      	orrs	r3, r2
 800df14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	4a2f      	ldr	r2, [pc, #188]	; (800dfd8 <TIM_Base_SetConfig+0x114>)
 800df1a:	4293      	cmp	r3, r2
 800df1c:	d02b      	beq.n	800df76 <TIM_Base_SetConfig+0xb2>
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800df24:	d027      	beq.n	800df76 <TIM_Base_SetConfig+0xb2>
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	4a2c      	ldr	r2, [pc, #176]	; (800dfdc <TIM_Base_SetConfig+0x118>)
 800df2a:	4293      	cmp	r3, r2
 800df2c:	d023      	beq.n	800df76 <TIM_Base_SetConfig+0xb2>
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	4a2b      	ldr	r2, [pc, #172]	; (800dfe0 <TIM_Base_SetConfig+0x11c>)
 800df32:	4293      	cmp	r3, r2
 800df34:	d01f      	beq.n	800df76 <TIM_Base_SetConfig+0xb2>
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	4a2a      	ldr	r2, [pc, #168]	; (800dfe4 <TIM_Base_SetConfig+0x120>)
 800df3a:	4293      	cmp	r3, r2
 800df3c:	d01b      	beq.n	800df76 <TIM_Base_SetConfig+0xb2>
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	4a29      	ldr	r2, [pc, #164]	; (800dfe8 <TIM_Base_SetConfig+0x124>)
 800df42:	4293      	cmp	r3, r2
 800df44:	d017      	beq.n	800df76 <TIM_Base_SetConfig+0xb2>
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	4a28      	ldr	r2, [pc, #160]	; (800dfec <TIM_Base_SetConfig+0x128>)
 800df4a:	4293      	cmp	r3, r2
 800df4c:	d013      	beq.n	800df76 <TIM_Base_SetConfig+0xb2>
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	4a27      	ldr	r2, [pc, #156]	; (800dff0 <TIM_Base_SetConfig+0x12c>)
 800df52:	4293      	cmp	r3, r2
 800df54:	d00f      	beq.n	800df76 <TIM_Base_SetConfig+0xb2>
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	4a26      	ldr	r2, [pc, #152]	; (800dff4 <TIM_Base_SetConfig+0x130>)
 800df5a:	4293      	cmp	r3, r2
 800df5c:	d00b      	beq.n	800df76 <TIM_Base_SetConfig+0xb2>
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	4a25      	ldr	r2, [pc, #148]	; (800dff8 <TIM_Base_SetConfig+0x134>)
 800df62:	4293      	cmp	r3, r2
 800df64:	d007      	beq.n	800df76 <TIM_Base_SetConfig+0xb2>
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	4a24      	ldr	r2, [pc, #144]	; (800dffc <TIM_Base_SetConfig+0x138>)
 800df6a:	4293      	cmp	r3, r2
 800df6c:	d003      	beq.n	800df76 <TIM_Base_SetConfig+0xb2>
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	4a23      	ldr	r2, [pc, #140]	; (800e000 <TIM_Base_SetConfig+0x13c>)
 800df72:	4293      	cmp	r3, r2
 800df74:	d108      	bne.n	800df88 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800df7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800df7e:	683b      	ldr	r3, [r7, #0]
 800df80:	68db      	ldr	r3, [r3, #12]
 800df82:	68fa      	ldr	r2, [r7, #12]
 800df84:	4313      	orrs	r3, r2
 800df86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800df8e:	683b      	ldr	r3, [r7, #0]
 800df90:	695b      	ldr	r3, [r3, #20]
 800df92:	4313      	orrs	r3, r2
 800df94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	68fa      	ldr	r2, [r7, #12]
 800df9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800df9c:	683b      	ldr	r3, [r7, #0]
 800df9e:	689a      	ldr	r2, [r3, #8]
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800dfa4:	683b      	ldr	r3, [r7, #0]
 800dfa6:	681a      	ldr	r2, [r3, #0]
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	4a0a      	ldr	r2, [pc, #40]	; (800dfd8 <TIM_Base_SetConfig+0x114>)
 800dfb0:	4293      	cmp	r3, r2
 800dfb2:	d003      	beq.n	800dfbc <TIM_Base_SetConfig+0xf8>
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	4a0c      	ldr	r2, [pc, #48]	; (800dfe8 <TIM_Base_SetConfig+0x124>)
 800dfb8:	4293      	cmp	r3, r2
 800dfba:	d103      	bne.n	800dfc4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800dfbc:	683b      	ldr	r3, [r7, #0]
 800dfbe:	691a      	ldr	r2, [r3, #16]
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	2201      	movs	r2, #1
 800dfc8:	615a      	str	r2, [r3, #20]
}
 800dfca:	bf00      	nop
 800dfcc:	3714      	adds	r7, #20
 800dfce:	46bd      	mov	sp, r7
 800dfd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd4:	4770      	bx	lr
 800dfd6:	bf00      	nop
 800dfd8:	40010000 	.word	0x40010000
 800dfdc:	40000400 	.word	0x40000400
 800dfe0:	40000800 	.word	0x40000800
 800dfe4:	40000c00 	.word	0x40000c00
 800dfe8:	40010400 	.word	0x40010400
 800dfec:	40014000 	.word	0x40014000
 800dff0:	40014400 	.word	0x40014400
 800dff4:	40014800 	.word	0x40014800
 800dff8:	40001800 	.word	0x40001800
 800dffc:	40001c00 	.word	0x40001c00
 800e000:	40002000 	.word	0x40002000

0800e004 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e004:	b480      	push	{r7}
 800e006:	b085      	sub	sp, #20
 800e008:	af00      	add	r7, sp, #0
 800e00a:	6078      	str	r0, [r7, #4]
 800e00c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e014:	2b01      	cmp	r3, #1
 800e016:	d101      	bne.n	800e01c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e018:	2302      	movs	r3, #2
 800e01a:	e05a      	b.n	800e0d2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	2201      	movs	r2, #1
 800e020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	2202      	movs	r2, #2
 800e028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	685b      	ldr	r3, [r3, #4]
 800e032:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	689b      	ldr	r3, [r3, #8]
 800e03a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e042:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e044:	683b      	ldr	r3, [r7, #0]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	68fa      	ldr	r2, [r7, #12]
 800e04a:	4313      	orrs	r3, r2
 800e04c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	68fa      	ldr	r2, [r7, #12]
 800e054:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	4a21      	ldr	r2, [pc, #132]	; (800e0e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800e05c:	4293      	cmp	r3, r2
 800e05e:	d022      	beq.n	800e0a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e068:	d01d      	beq.n	800e0a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	4a1d      	ldr	r2, [pc, #116]	; (800e0e4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800e070:	4293      	cmp	r3, r2
 800e072:	d018      	beq.n	800e0a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	4a1b      	ldr	r2, [pc, #108]	; (800e0e8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800e07a:	4293      	cmp	r3, r2
 800e07c:	d013      	beq.n	800e0a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	4a1a      	ldr	r2, [pc, #104]	; (800e0ec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800e084:	4293      	cmp	r3, r2
 800e086:	d00e      	beq.n	800e0a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	4a18      	ldr	r2, [pc, #96]	; (800e0f0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800e08e:	4293      	cmp	r3, r2
 800e090:	d009      	beq.n	800e0a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	4a17      	ldr	r2, [pc, #92]	; (800e0f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800e098:	4293      	cmp	r3, r2
 800e09a:	d004      	beq.n	800e0a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	4a15      	ldr	r2, [pc, #84]	; (800e0f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800e0a2:	4293      	cmp	r3, r2
 800e0a4:	d10c      	bne.n	800e0c0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e0a6:	68bb      	ldr	r3, [r7, #8]
 800e0a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e0ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e0ae:	683b      	ldr	r3, [r7, #0]
 800e0b0:	685b      	ldr	r3, [r3, #4]
 800e0b2:	68ba      	ldr	r2, [r7, #8]
 800e0b4:	4313      	orrs	r3, r2
 800e0b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	68ba      	ldr	r2, [r7, #8]
 800e0be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	2201      	movs	r2, #1
 800e0c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	2200      	movs	r2, #0
 800e0cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e0d0:	2300      	movs	r3, #0
}
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	3714      	adds	r7, #20
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0dc:	4770      	bx	lr
 800e0de:	bf00      	nop
 800e0e0:	40010000 	.word	0x40010000
 800e0e4:	40000400 	.word	0x40000400
 800e0e8:	40000800 	.word	0x40000800
 800e0ec:	40000c00 	.word	0x40000c00
 800e0f0:	40010400 	.word	0x40010400
 800e0f4:	40014000 	.word	0x40014000
 800e0f8:	40001800 	.word	0x40001800

0800e0fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e0fc:	b480      	push	{r7}
 800e0fe:	b083      	sub	sp, #12
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e104:	bf00      	nop
 800e106:	370c      	adds	r7, #12
 800e108:	46bd      	mov	sp, r7
 800e10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e10e:	4770      	bx	lr

0800e110 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e110:	b480      	push	{r7}
 800e112:	b083      	sub	sp, #12
 800e114:	af00      	add	r7, sp, #0
 800e116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e118:	bf00      	nop
 800e11a:	370c      	adds	r7, #12
 800e11c:	46bd      	mov	sp, r7
 800e11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e122:	4770      	bx	lr

0800e124 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e124:	b580      	push	{r7, lr}
 800e126:	b082      	sub	sp, #8
 800e128:	af00      	add	r7, sp, #0
 800e12a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d101      	bne.n	800e136 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e132:	2301      	movs	r3, #1
 800e134:	e03f      	b.n	800e1b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800e13c:	b2db      	uxtb	r3, r3
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d106      	bne.n	800e150 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	2200      	movs	r2, #0
 800e146:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e14a:	6878      	ldr	r0, [r7, #4]
 800e14c:	f7fc ff5a 	bl	800b004 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	2224      	movs	r2, #36	; 0x24
 800e154:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	68da      	ldr	r2, [r3, #12]
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e166:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800e168:	6878      	ldr	r0, [r7, #4]
 800e16a:	f000 fb6b 	bl	800e844 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	691a      	ldr	r2, [r3, #16]
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e17c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	695a      	ldr	r2, [r3, #20]
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e18c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	68da      	ldr	r2, [r3, #12]
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e19c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	2200      	movs	r2, #0
 800e1a2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	2220      	movs	r2, #32
 800e1a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	2220      	movs	r2, #32
 800e1b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800e1b4:	2300      	movs	r3, #0
}
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	3708      	adds	r7, #8
 800e1ba:	46bd      	mov	sp, r7
 800e1bc:	bd80      	pop	{r7, pc}
	...

0800e1c0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e1c0:	b580      	push	{r7, lr}
 800e1c2:	b086      	sub	sp, #24
 800e1c4:	af00      	add	r7, sp, #0
 800e1c6:	60f8      	str	r0, [r7, #12]
 800e1c8:	60b9      	str	r1, [r7, #8]
 800e1ca:	4613      	mov	r3, r2
 800e1cc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800e1d4:	b2db      	uxtb	r3, r3
 800e1d6:	2b20      	cmp	r3, #32
 800e1d8:	d153      	bne.n	800e282 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800e1da:	68bb      	ldr	r3, [r7, #8]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d002      	beq.n	800e1e6 <HAL_UART_Transmit_DMA+0x26>
 800e1e0:	88fb      	ldrh	r3, [r7, #6]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d101      	bne.n	800e1ea <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800e1e6:	2301      	movs	r3, #1
 800e1e8:	e04c      	b.n	800e284 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e1f0:	2b01      	cmp	r3, #1
 800e1f2:	d101      	bne.n	800e1f8 <HAL_UART_Transmit_DMA+0x38>
 800e1f4:	2302      	movs	r3, #2
 800e1f6:	e045      	b.n	800e284 <HAL_UART_Transmit_DMA+0xc4>
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	2201      	movs	r2, #1
 800e1fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800e200:	68ba      	ldr	r2, [r7, #8]
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	88fa      	ldrh	r2, [r7, #6]
 800e20a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	88fa      	ldrh	r2, [r7, #6]
 800e210:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	2200      	movs	r2, #0
 800e216:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	2221      	movs	r2, #33	; 0x21
 800e21c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e224:	4a19      	ldr	r2, [pc, #100]	; (800e28c <HAL_UART_Transmit_DMA+0xcc>)
 800e226:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e22c:	4a18      	ldr	r2, [pc, #96]	; (800e290 <HAL_UART_Transmit_DMA+0xd0>)
 800e22e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e234:	4a17      	ldr	r2, [pc, #92]	; (800e294 <HAL_UART_Transmit_DMA+0xd4>)
 800e236:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e23c:	2200      	movs	r2, #0
 800e23e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800e240:	f107 0308 	add.w	r3, r7, #8
 800e244:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e24a:	697b      	ldr	r3, [r7, #20]
 800e24c:	6819      	ldr	r1, [r3, #0]
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	3304      	adds	r3, #4
 800e254:	461a      	mov	r2, r3
 800e256:	88fb      	ldrh	r3, [r7, #6]
 800e258:	f7fd f99c 	bl	800b594 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e264:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	2200      	movs	r2, #0
 800e26a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	695a      	ldr	r2, [r3, #20]
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e27c:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800e27e:	2300      	movs	r3, #0
 800e280:	e000      	b.n	800e284 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800e282:	2302      	movs	r3, #2
  }
}
 800e284:	4618      	mov	r0, r3
 800e286:	3718      	adds	r7, #24
 800e288:	46bd      	mov	sp, r7
 800e28a:	bd80      	pop	{r7, pc}
 800e28c:	0800e4d5 	.word	0x0800e4d5
 800e290:	0800e527 	.word	0x0800e527
 800e294:	0800e543 	.word	0x0800e543

0800e298 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e298:	b580      	push	{r7, lr}
 800e29a:	b088      	sub	sp, #32
 800e29c:	af00      	add	r7, sp, #0
 800e29e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	68db      	ldr	r3, [r3, #12]
 800e2ae:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	695b      	ldr	r3, [r3, #20]
 800e2b6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800e2b8:	2300      	movs	r3, #0
 800e2ba:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800e2bc:	2300      	movs	r3, #0
 800e2be:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800e2c0:	69fb      	ldr	r3, [r7, #28]
 800e2c2:	f003 030f 	and.w	r3, r3, #15
 800e2c6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800e2c8:	693b      	ldr	r3, [r7, #16]
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d10d      	bne.n	800e2ea <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800e2ce:	69fb      	ldr	r3, [r7, #28]
 800e2d0:	f003 0320 	and.w	r3, r3, #32
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d008      	beq.n	800e2ea <HAL_UART_IRQHandler+0x52>
 800e2d8:	69bb      	ldr	r3, [r7, #24]
 800e2da:	f003 0320 	and.w	r3, r3, #32
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d003      	beq.n	800e2ea <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800e2e2:	6878      	ldr	r0, [r7, #4]
 800e2e4:	f000 fa2d 	bl	800e742 <UART_Receive_IT>
      return;
 800e2e8:	e0d1      	b.n	800e48e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800e2ea:	693b      	ldr	r3, [r7, #16]
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	f000 80b0 	beq.w	800e452 <HAL_UART_IRQHandler+0x1ba>
 800e2f2:	697b      	ldr	r3, [r7, #20]
 800e2f4:	f003 0301 	and.w	r3, r3, #1
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d105      	bne.n	800e308 <HAL_UART_IRQHandler+0x70>
 800e2fc:	69bb      	ldr	r3, [r7, #24]
 800e2fe:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800e302:	2b00      	cmp	r3, #0
 800e304:	f000 80a5 	beq.w	800e452 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800e308:	69fb      	ldr	r3, [r7, #28]
 800e30a:	f003 0301 	and.w	r3, r3, #1
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d00a      	beq.n	800e328 <HAL_UART_IRQHandler+0x90>
 800e312:	69bb      	ldr	r3, [r7, #24]
 800e314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d005      	beq.n	800e328 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e320:	f043 0201 	orr.w	r2, r3, #1
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800e328:	69fb      	ldr	r3, [r7, #28]
 800e32a:	f003 0304 	and.w	r3, r3, #4
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d00a      	beq.n	800e348 <HAL_UART_IRQHandler+0xb0>
 800e332:	697b      	ldr	r3, [r7, #20]
 800e334:	f003 0301 	and.w	r3, r3, #1
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d005      	beq.n	800e348 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e340:	f043 0202 	orr.w	r2, r3, #2
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800e348:	69fb      	ldr	r3, [r7, #28]
 800e34a:	f003 0302 	and.w	r3, r3, #2
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d00a      	beq.n	800e368 <HAL_UART_IRQHandler+0xd0>
 800e352:	697b      	ldr	r3, [r7, #20]
 800e354:	f003 0301 	and.w	r3, r3, #1
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d005      	beq.n	800e368 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e360:	f043 0204 	orr.w	r2, r3, #4
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800e368:	69fb      	ldr	r3, [r7, #28]
 800e36a:	f003 0308 	and.w	r3, r3, #8
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d00f      	beq.n	800e392 <HAL_UART_IRQHandler+0xfa>
 800e372:	69bb      	ldr	r3, [r7, #24]
 800e374:	f003 0320 	and.w	r3, r3, #32
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d104      	bne.n	800e386 <HAL_UART_IRQHandler+0xee>
 800e37c:	697b      	ldr	r3, [r7, #20]
 800e37e:	f003 0301 	and.w	r3, r3, #1
 800e382:	2b00      	cmp	r3, #0
 800e384:	d005      	beq.n	800e392 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e38a:	f043 0208 	orr.w	r2, r3, #8
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e396:	2b00      	cmp	r3, #0
 800e398:	d078      	beq.n	800e48c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800e39a:	69fb      	ldr	r3, [r7, #28]
 800e39c:	f003 0320 	and.w	r3, r3, #32
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d007      	beq.n	800e3b4 <HAL_UART_IRQHandler+0x11c>
 800e3a4:	69bb      	ldr	r3, [r7, #24]
 800e3a6:	f003 0320 	and.w	r3, r3, #32
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d002      	beq.n	800e3b4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800e3ae:	6878      	ldr	r0, [r7, #4]
 800e3b0:	f000 f9c7 	bl	800e742 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	695b      	ldr	r3, [r3, #20]
 800e3ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3be:	2b40      	cmp	r3, #64	; 0x40
 800e3c0:	bf0c      	ite	eq
 800e3c2:	2301      	moveq	r3, #1
 800e3c4:	2300      	movne	r3, #0
 800e3c6:	b2db      	uxtb	r3, r3
 800e3c8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e3ce:	f003 0308 	and.w	r3, r3, #8
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d102      	bne.n	800e3dc <HAL_UART_IRQHandler+0x144>
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d031      	beq.n	800e440 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e3dc:	6878      	ldr	r0, [r7, #4]
 800e3de:	f000 f910 	bl	800e602 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	695b      	ldr	r3, [r3, #20]
 800e3e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3ec:	2b40      	cmp	r3, #64	; 0x40
 800e3ee:	d123      	bne.n	800e438 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	695a      	ldr	r2, [r3, #20]
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e3fe:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e404:	2b00      	cmp	r3, #0
 800e406:	d013      	beq.n	800e430 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e40c:	4a21      	ldr	r2, [pc, #132]	; (800e494 <HAL_UART_IRQHandler+0x1fc>)
 800e40e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e414:	4618      	mov	r0, r3
 800e416:	f7fd f915 	bl	800b644 <HAL_DMA_Abort_IT>
 800e41a:	4603      	mov	r3, r0
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d016      	beq.n	800e44e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e424:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e426:	687a      	ldr	r2, [r7, #4]
 800e428:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800e42a:	4610      	mov	r0, r2
 800e42c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e42e:	e00e      	b.n	800e44e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e430:	6878      	ldr	r0, [r7, #4]
 800e432:	f000 f845 	bl	800e4c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e436:	e00a      	b.n	800e44e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e438:	6878      	ldr	r0, [r7, #4]
 800e43a:	f000 f841 	bl	800e4c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e43e:	e006      	b.n	800e44e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e440:	6878      	ldr	r0, [r7, #4]
 800e442:	f000 f83d 	bl	800e4c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	2200      	movs	r2, #0
 800e44a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800e44c:	e01e      	b.n	800e48c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e44e:	bf00      	nop
    return;
 800e450:	e01c      	b.n	800e48c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800e452:	69fb      	ldr	r3, [r7, #28]
 800e454:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d008      	beq.n	800e46e <HAL_UART_IRQHandler+0x1d6>
 800e45c:	69bb      	ldr	r3, [r7, #24]
 800e45e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e462:	2b00      	cmp	r3, #0
 800e464:	d003      	beq.n	800e46e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800e466:	6878      	ldr	r0, [r7, #4]
 800e468:	f000 f8fd 	bl	800e666 <UART_Transmit_IT>
    return;
 800e46c:	e00f      	b.n	800e48e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800e46e:	69fb      	ldr	r3, [r7, #28]
 800e470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e474:	2b00      	cmp	r3, #0
 800e476:	d00a      	beq.n	800e48e <HAL_UART_IRQHandler+0x1f6>
 800e478:	69bb      	ldr	r3, [r7, #24]
 800e47a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d005      	beq.n	800e48e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800e482:	6878      	ldr	r0, [r7, #4]
 800e484:	f000 f945 	bl	800e712 <UART_EndTransmit_IT>
    return;
 800e488:	bf00      	nop
 800e48a:	e000      	b.n	800e48e <HAL_UART_IRQHandler+0x1f6>
    return;
 800e48c:	bf00      	nop
  }
}
 800e48e:	3720      	adds	r7, #32
 800e490:	46bd      	mov	sp, r7
 800e492:	bd80      	pop	{r7, pc}
 800e494:	0800e63f 	.word	0x0800e63f

0800e498 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e498:	b480      	push	{r7}
 800e49a:	b083      	sub	sp, #12
 800e49c:	af00      	add	r7, sp, #0
 800e49e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800e4a0:	bf00      	nop
 800e4a2:	370c      	adds	r7, #12
 800e4a4:	46bd      	mov	sp, r7
 800e4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4aa:	4770      	bx	lr

0800e4ac <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800e4ac:	b480      	push	{r7}
 800e4ae:	b083      	sub	sp, #12
 800e4b0:	af00      	add	r7, sp, #0
 800e4b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800e4b4:	bf00      	nop
 800e4b6:	370c      	adds	r7, #12
 800e4b8:	46bd      	mov	sp, r7
 800e4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4be:	4770      	bx	lr

0800e4c0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e4c0:	b480      	push	{r7}
 800e4c2:	b083      	sub	sp, #12
 800e4c4:	af00      	add	r7, sp, #0
 800e4c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800e4c8:	bf00      	nop
 800e4ca:	370c      	adds	r7, #12
 800e4cc:	46bd      	mov	sp, r7
 800e4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d2:	4770      	bx	lr

0800e4d4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e4d4:	b580      	push	{r7, lr}
 800e4d6:	b084      	sub	sp, #16
 800e4d8:	af00      	add	r7, sp, #0
 800e4da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4e0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d113      	bne.n	800e518 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	2200      	movs	r2, #0
 800e4f4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	695a      	ldr	r2, [r3, #20]
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e504:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	68da      	ldr	r2, [r3, #12]
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e514:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e516:	e002      	b.n	800e51e <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800e518:	68f8      	ldr	r0, [r7, #12]
 800e51a:	f7fc fdf5 	bl	800b108 <HAL_UART_TxCpltCallback>
}
 800e51e:	bf00      	nop
 800e520:	3710      	adds	r7, #16
 800e522:	46bd      	mov	sp, r7
 800e524:	bd80      	pop	{r7, pc}

0800e526 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e526:	b580      	push	{r7, lr}
 800e528:	b084      	sub	sp, #16
 800e52a:	af00      	add	r7, sp, #0
 800e52c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e532:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800e534:	68f8      	ldr	r0, [r7, #12]
 800e536:	f7ff ffaf 	bl	800e498 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e53a:	bf00      	nop
 800e53c:	3710      	adds	r7, #16
 800e53e:	46bd      	mov	sp, r7
 800e540:	bd80      	pop	{r7, pc}

0800e542 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e542:	b580      	push	{r7, lr}
 800e544:	b084      	sub	sp, #16
 800e546:	af00      	add	r7, sp, #0
 800e548:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800e54a:	2300      	movs	r3, #0
 800e54c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e552:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800e554:	68bb      	ldr	r3, [r7, #8]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	695b      	ldr	r3, [r3, #20]
 800e55a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e55e:	2b80      	cmp	r3, #128	; 0x80
 800e560:	bf0c      	ite	eq
 800e562:	2301      	moveq	r3, #1
 800e564:	2300      	movne	r3, #0
 800e566:	b2db      	uxtb	r3, r3
 800e568:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800e56a:	68bb      	ldr	r3, [r7, #8]
 800e56c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800e570:	b2db      	uxtb	r3, r3
 800e572:	2b21      	cmp	r3, #33	; 0x21
 800e574:	d108      	bne.n	800e588 <UART_DMAError+0x46>
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d005      	beq.n	800e588 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800e57c:	68bb      	ldr	r3, [r7, #8]
 800e57e:	2200      	movs	r2, #0
 800e580:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800e582:	68b8      	ldr	r0, [r7, #8]
 800e584:	f000 f827 	bl	800e5d6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800e588:	68bb      	ldr	r3, [r7, #8]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	695b      	ldr	r3, [r3, #20]
 800e58e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e592:	2b40      	cmp	r3, #64	; 0x40
 800e594:	bf0c      	ite	eq
 800e596:	2301      	moveq	r3, #1
 800e598:	2300      	movne	r3, #0
 800e59a:	b2db      	uxtb	r3, r3
 800e59c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800e59e:	68bb      	ldr	r3, [r7, #8]
 800e5a0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800e5a4:	b2db      	uxtb	r3, r3
 800e5a6:	2b22      	cmp	r3, #34	; 0x22
 800e5a8:	d108      	bne.n	800e5bc <UART_DMAError+0x7a>
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d005      	beq.n	800e5bc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800e5b0:	68bb      	ldr	r3, [r7, #8]
 800e5b2:	2200      	movs	r2, #0
 800e5b4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800e5b6:	68b8      	ldr	r0, [r7, #8]
 800e5b8:	f000 f823 	bl	800e602 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e5bc:	68bb      	ldr	r3, [r7, #8]
 800e5be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5c0:	f043 0210 	orr.w	r2, r3, #16
 800e5c4:	68bb      	ldr	r3, [r7, #8]
 800e5c6:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e5c8:	68b8      	ldr	r0, [r7, #8]
 800e5ca:	f7ff ff79 	bl	800e4c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e5ce:	bf00      	nop
 800e5d0:	3710      	adds	r7, #16
 800e5d2:	46bd      	mov	sp, r7
 800e5d4:	bd80      	pop	{r7, pc}

0800e5d6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e5d6:	b480      	push	{r7}
 800e5d8:	b083      	sub	sp, #12
 800e5da:	af00      	add	r7, sp, #0
 800e5dc:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	68da      	ldr	r2, [r3, #12]
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800e5ec:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	2220      	movs	r2, #32
 800e5f2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800e5f6:	bf00      	nop
 800e5f8:	370c      	adds	r7, #12
 800e5fa:	46bd      	mov	sp, r7
 800e5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e600:	4770      	bx	lr

0800e602 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e602:	b480      	push	{r7}
 800e604:	b083      	sub	sp, #12
 800e606:	af00      	add	r7, sp, #0
 800e608:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	68da      	ldr	r2, [r3, #12]
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800e618:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	695a      	ldr	r2, [r3, #20]
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	f022 0201 	bic.w	r2, r2, #1
 800e628:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	2220      	movs	r2, #32
 800e62e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800e632:	bf00      	nop
 800e634:	370c      	adds	r7, #12
 800e636:	46bd      	mov	sp, r7
 800e638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e63c:	4770      	bx	lr

0800e63e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e63e:	b580      	push	{r7, lr}
 800e640:	b084      	sub	sp, #16
 800e642:	af00      	add	r7, sp, #0
 800e644:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e64a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	2200      	movs	r2, #0
 800e650:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	2200      	movs	r2, #0
 800e656:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e658:	68f8      	ldr	r0, [r7, #12]
 800e65a:	f7ff ff31 	bl	800e4c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e65e:	bf00      	nop
 800e660:	3710      	adds	r7, #16
 800e662:	46bd      	mov	sp, r7
 800e664:	bd80      	pop	{r7, pc}

0800e666 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800e666:	b480      	push	{r7}
 800e668:	b085      	sub	sp, #20
 800e66a:	af00      	add	r7, sp, #0
 800e66c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800e674:	b2db      	uxtb	r3, r3
 800e676:	2b21      	cmp	r3, #33	; 0x21
 800e678:	d144      	bne.n	800e704 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	689b      	ldr	r3, [r3, #8]
 800e67e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e682:	d11a      	bne.n	800e6ba <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	6a1b      	ldr	r3, [r3, #32]
 800e688:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	881b      	ldrh	r3, [r3, #0]
 800e68e:	461a      	mov	r2, r3
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e698:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	691b      	ldr	r3, [r3, #16]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d105      	bne.n	800e6ae <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	6a1b      	ldr	r3, [r3, #32]
 800e6a6:	1c9a      	adds	r2, r3, #2
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	621a      	str	r2, [r3, #32]
 800e6ac:	e00e      	b.n	800e6cc <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	6a1b      	ldr	r3, [r3, #32]
 800e6b2:	1c5a      	adds	r2, r3, #1
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	621a      	str	r2, [r3, #32]
 800e6b8:	e008      	b.n	800e6cc <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	6a1b      	ldr	r3, [r3, #32]
 800e6be:	1c59      	adds	r1, r3, #1
 800e6c0:	687a      	ldr	r2, [r7, #4]
 800e6c2:	6211      	str	r1, [r2, #32]
 800e6c4:	781a      	ldrb	r2, [r3, #0]
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e6d0:	b29b      	uxth	r3, r3
 800e6d2:	3b01      	subs	r3, #1
 800e6d4:	b29b      	uxth	r3, r3
 800e6d6:	687a      	ldr	r2, [r7, #4]
 800e6d8:	4619      	mov	r1, r3
 800e6da:	84d1      	strh	r1, [r2, #38]	; 0x26
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d10f      	bne.n	800e700 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	68da      	ldr	r2, [r3, #12]
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e6ee:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	68da      	ldr	r2, [r3, #12]
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e6fe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800e700:	2300      	movs	r3, #0
 800e702:	e000      	b.n	800e706 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800e704:	2302      	movs	r3, #2
  }
}
 800e706:	4618      	mov	r0, r3
 800e708:	3714      	adds	r7, #20
 800e70a:	46bd      	mov	sp, r7
 800e70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e710:	4770      	bx	lr

0800e712 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e712:	b580      	push	{r7, lr}
 800e714:	b082      	sub	sp, #8
 800e716:	af00      	add	r7, sp, #0
 800e718:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	68da      	ldr	r2, [r3, #12]
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e728:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	2220      	movs	r2, #32
 800e72e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e732:	6878      	ldr	r0, [r7, #4]
 800e734:	f7fc fce8 	bl	800b108 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800e738:	2300      	movs	r3, #0
}
 800e73a:	4618      	mov	r0, r3
 800e73c:	3708      	adds	r7, #8
 800e73e:	46bd      	mov	sp, r7
 800e740:	bd80      	pop	{r7, pc}

0800e742 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800e742:	b580      	push	{r7, lr}
 800e744:	b084      	sub	sp, #16
 800e746:	af00      	add	r7, sp, #0
 800e748:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800e750:	b2db      	uxtb	r3, r3
 800e752:	2b22      	cmp	r3, #34	; 0x22
 800e754:	d171      	bne.n	800e83a <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	689b      	ldr	r3, [r3, #8]
 800e75a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e75e:	d123      	bne.n	800e7a8 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e764:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	691b      	ldr	r3, [r3, #16]
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d10e      	bne.n	800e78c <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	685b      	ldr	r3, [r3, #4]
 800e774:	b29b      	uxth	r3, r3
 800e776:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e77a:	b29a      	uxth	r2, r3
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e784:	1c9a      	adds	r2, r3, #2
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	629a      	str	r2, [r3, #40]	; 0x28
 800e78a:	e029      	b.n	800e7e0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	685b      	ldr	r3, [r3, #4]
 800e792:	b29b      	uxth	r3, r3
 800e794:	b2db      	uxtb	r3, r3
 800e796:	b29a      	uxth	r2, r3
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7a0:	1c5a      	adds	r2, r3, #1
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	629a      	str	r2, [r3, #40]	; 0x28
 800e7a6:	e01b      	b.n	800e7e0 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	691b      	ldr	r3, [r3, #16]
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d10a      	bne.n	800e7c6 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	6858      	ldr	r0, [r3, #4]
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7ba:	1c59      	adds	r1, r3, #1
 800e7bc:	687a      	ldr	r2, [r7, #4]
 800e7be:	6291      	str	r1, [r2, #40]	; 0x28
 800e7c0:	b2c2      	uxtb	r2, r0
 800e7c2:	701a      	strb	r2, [r3, #0]
 800e7c4:	e00c      	b.n	800e7e0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	685b      	ldr	r3, [r3, #4]
 800e7cc:	b2da      	uxtb	r2, r3
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7d2:	1c58      	adds	r0, r3, #1
 800e7d4:	6879      	ldr	r1, [r7, #4]
 800e7d6:	6288      	str	r0, [r1, #40]	; 0x28
 800e7d8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e7dc:	b2d2      	uxtb	r2, r2
 800e7de:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e7e4:	b29b      	uxth	r3, r3
 800e7e6:	3b01      	subs	r3, #1
 800e7e8:	b29b      	uxth	r3, r3
 800e7ea:	687a      	ldr	r2, [r7, #4]
 800e7ec:	4619      	mov	r1, r3
 800e7ee:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d120      	bne.n	800e836 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	68da      	ldr	r2, [r3, #12]
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	f022 0220 	bic.w	r2, r2, #32
 800e802:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	68da      	ldr	r2, [r3, #12]
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e812:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	695a      	ldr	r2, [r3, #20]
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	f022 0201 	bic.w	r2, r2, #1
 800e822:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	2220      	movs	r2, #32
 800e828:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800e82c:	6878      	ldr	r0, [r7, #4]
 800e82e:	f7ff fe3d 	bl	800e4ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800e832:	2300      	movs	r3, #0
 800e834:	e002      	b.n	800e83c <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800e836:	2300      	movs	r3, #0
 800e838:	e000      	b.n	800e83c <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800e83a:	2302      	movs	r3, #2
  }
}
 800e83c:	4618      	mov	r0, r3
 800e83e:	3710      	adds	r7, #16
 800e840:	46bd      	mov	sp, r7
 800e842:	bd80      	pop	{r7, pc}

0800e844 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e848:	b085      	sub	sp, #20
 800e84a:	af00      	add	r7, sp, #0
 800e84c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	691b      	ldr	r3, [r3, #16]
 800e854:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	68da      	ldr	r2, [r3, #12]
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	430a      	orrs	r2, r1
 800e862:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	689a      	ldr	r2, [r3, #8]
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	691b      	ldr	r3, [r3, #16]
 800e86c:	431a      	orrs	r2, r3
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	695b      	ldr	r3, [r3, #20]
 800e872:	431a      	orrs	r2, r3
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	69db      	ldr	r3, [r3, #28]
 800e878:	4313      	orrs	r3, r2
 800e87a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	68db      	ldr	r3, [r3, #12]
 800e882:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800e886:	f023 030c 	bic.w	r3, r3, #12
 800e88a:	687a      	ldr	r2, [r7, #4]
 800e88c:	6812      	ldr	r2, [r2, #0]
 800e88e:	68f9      	ldr	r1, [r7, #12]
 800e890:	430b      	orrs	r3, r1
 800e892:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	695b      	ldr	r3, [r3, #20]
 800e89a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	699a      	ldr	r2, [r3, #24]
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	430a      	orrs	r2, r1
 800e8a8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	69db      	ldr	r3, [r3, #28]
 800e8ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e8b2:	f040 818b 	bne.w	800ebcc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	4ac1      	ldr	r2, [pc, #772]	; (800ebc0 <UART_SetConfig+0x37c>)
 800e8bc:	4293      	cmp	r3, r2
 800e8be:	d005      	beq.n	800e8cc <UART_SetConfig+0x88>
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	4abf      	ldr	r2, [pc, #764]	; (800ebc4 <UART_SetConfig+0x380>)
 800e8c6:	4293      	cmp	r3, r2
 800e8c8:	f040 80bd 	bne.w	800ea46 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800e8cc:	f7ff f934 	bl	800db38 <HAL_RCC_GetPCLK2Freq>
 800e8d0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800e8d2:	68bb      	ldr	r3, [r7, #8]
 800e8d4:	461d      	mov	r5, r3
 800e8d6:	f04f 0600 	mov.w	r6, #0
 800e8da:	46a8      	mov	r8, r5
 800e8dc:	46b1      	mov	r9, r6
 800e8de:	eb18 0308 	adds.w	r3, r8, r8
 800e8e2:	eb49 0409 	adc.w	r4, r9, r9
 800e8e6:	4698      	mov	r8, r3
 800e8e8:	46a1      	mov	r9, r4
 800e8ea:	eb18 0805 	adds.w	r8, r8, r5
 800e8ee:	eb49 0906 	adc.w	r9, r9, r6
 800e8f2:	f04f 0100 	mov.w	r1, #0
 800e8f6:	f04f 0200 	mov.w	r2, #0
 800e8fa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800e8fe:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800e902:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800e906:	4688      	mov	r8, r1
 800e908:	4691      	mov	r9, r2
 800e90a:	eb18 0005 	adds.w	r0, r8, r5
 800e90e:	eb49 0106 	adc.w	r1, r9, r6
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	685b      	ldr	r3, [r3, #4]
 800e916:	461d      	mov	r5, r3
 800e918:	f04f 0600 	mov.w	r6, #0
 800e91c:	196b      	adds	r3, r5, r5
 800e91e:	eb46 0406 	adc.w	r4, r6, r6
 800e922:	461a      	mov	r2, r3
 800e924:	4623      	mov	r3, r4
 800e926:	f7f2 f9bf 	bl	8000ca8 <__aeabi_uldivmod>
 800e92a:	4603      	mov	r3, r0
 800e92c:	460c      	mov	r4, r1
 800e92e:	461a      	mov	r2, r3
 800e930:	4ba5      	ldr	r3, [pc, #660]	; (800ebc8 <UART_SetConfig+0x384>)
 800e932:	fba3 2302 	umull	r2, r3, r3, r2
 800e936:	095b      	lsrs	r3, r3, #5
 800e938:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800e93c:	68bb      	ldr	r3, [r7, #8]
 800e93e:	461d      	mov	r5, r3
 800e940:	f04f 0600 	mov.w	r6, #0
 800e944:	46a9      	mov	r9, r5
 800e946:	46b2      	mov	sl, r6
 800e948:	eb19 0309 	adds.w	r3, r9, r9
 800e94c:	eb4a 040a 	adc.w	r4, sl, sl
 800e950:	4699      	mov	r9, r3
 800e952:	46a2      	mov	sl, r4
 800e954:	eb19 0905 	adds.w	r9, r9, r5
 800e958:	eb4a 0a06 	adc.w	sl, sl, r6
 800e95c:	f04f 0100 	mov.w	r1, #0
 800e960:	f04f 0200 	mov.w	r2, #0
 800e964:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e968:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e96c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e970:	4689      	mov	r9, r1
 800e972:	4692      	mov	sl, r2
 800e974:	eb19 0005 	adds.w	r0, r9, r5
 800e978:	eb4a 0106 	adc.w	r1, sl, r6
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	685b      	ldr	r3, [r3, #4]
 800e980:	461d      	mov	r5, r3
 800e982:	f04f 0600 	mov.w	r6, #0
 800e986:	196b      	adds	r3, r5, r5
 800e988:	eb46 0406 	adc.w	r4, r6, r6
 800e98c:	461a      	mov	r2, r3
 800e98e:	4623      	mov	r3, r4
 800e990:	f7f2 f98a 	bl	8000ca8 <__aeabi_uldivmod>
 800e994:	4603      	mov	r3, r0
 800e996:	460c      	mov	r4, r1
 800e998:	461a      	mov	r2, r3
 800e99a:	4b8b      	ldr	r3, [pc, #556]	; (800ebc8 <UART_SetConfig+0x384>)
 800e99c:	fba3 1302 	umull	r1, r3, r3, r2
 800e9a0:	095b      	lsrs	r3, r3, #5
 800e9a2:	2164      	movs	r1, #100	; 0x64
 800e9a4:	fb01 f303 	mul.w	r3, r1, r3
 800e9a8:	1ad3      	subs	r3, r2, r3
 800e9aa:	00db      	lsls	r3, r3, #3
 800e9ac:	3332      	adds	r3, #50	; 0x32
 800e9ae:	4a86      	ldr	r2, [pc, #536]	; (800ebc8 <UART_SetConfig+0x384>)
 800e9b0:	fba2 2303 	umull	r2, r3, r2, r3
 800e9b4:	095b      	lsrs	r3, r3, #5
 800e9b6:	005b      	lsls	r3, r3, #1
 800e9b8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800e9bc:	4498      	add	r8, r3
 800e9be:	68bb      	ldr	r3, [r7, #8]
 800e9c0:	461d      	mov	r5, r3
 800e9c2:	f04f 0600 	mov.w	r6, #0
 800e9c6:	46a9      	mov	r9, r5
 800e9c8:	46b2      	mov	sl, r6
 800e9ca:	eb19 0309 	adds.w	r3, r9, r9
 800e9ce:	eb4a 040a 	adc.w	r4, sl, sl
 800e9d2:	4699      	mov	r9, r3
 800e9d4:	46a2      	mov	sl, r4
 800e9d6:	eb19 0905 	adds.w	r9, r9, r5
 800e9da:	eb4a 0a06 	adc.w	sl, sl, r6
 800e9de:	f04f 0100 	mov.w	r1, #0
 800e9e2:	f04f 0200 	mov.w	r2, #0
 800e9e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e9ea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e9ee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e9f2:	4689      	mov	r9, r1
 800e9f4:	4692      	mov	sl, r2
 800e9f6:	eb19 0005 	adds.w	r0, r9, r5
 800e9fa:	eb4a 0106 	adc.w	r1, sl, r6
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	685b      	ldr	r3, [r3, #4]
 800ea02:	461d      	mov	r5, r3
 800ea04:	f04f 0600 	mov.w	r6, #0
 800ea08:	196b      	adds	r3, r5, r5
 800ea0a:	eb46 0406 	adc.w	r4, r6, r6
 800ea0e:	461a      	mov	r2, r3
 800ea10:	4623      	mov	r3, r4
 800ea12:	f7f2 f949 	bl	8000ca8 <__aeabi_uldivmod>
 800ea16:	4603      	mov	r3, r0
 800ea18:	460c      	mov	r4, r1
 800ea1a:	461a      	mov	r2, r3
 800ea1c:	4b6a      	ldr	r3, [pc, #424]	; (800ebc8 <UART_SetConfig+0x384>)
 800ea1e:	fba3 1302 	umull	r1, r3, r3, r2
 800ea22:	095b      	lsrs	r3, r3, #5
 800ea24:	2164      	movs	r1, #100	; 0x64
 800ea26:	fb01 f303 	mul.w	r3, r1, r3
 800ea2a:	1ad3      	subs	r3, r2, r3
 800ea2c:	00db      	lsls	r3, r3, #3
 800ea2e:	3332      	adds	r3, #50	; 0x32
 800ea30:	4a65      	ldr	r2, [pc, #404]	; (800ebc8 <UART_SetConfig+0x384>)
 800ea32:	fba2 2303 	umull	r2, r3, r2, r3
 800ea36:	095b      	lsrs	r3, r3, #5
 800ea38:	f003 0207 	and.w	r2, r3, #7
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	4442      	add	r2, r8
 800ea42:	609a      	str	r2, [r3, #8]
 800ea44:	e26f      	b.n	800ef26 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ea46:	f7ff f863 	bl	800db10 <HAL_RCC_GetPCLK1Freq>
 800ea4a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ea4c:	68bb      	ldr	r3, [r7, #8]
 800ea4e:	461d      	mov	r5, r3
 800ea50:	f04f 0600 	mov.w	r6, #0
 800ea54:	46a8      	mov	r8, r5
 800ea56:	46b1      	mov	r9, r6
 800ea58:	eb18 0308 	adds.w	r3, r8, r8
 800ea5c:	eb49 0409 	adc.w	r4, r9, r9
 800ea60:	4698      	mov	r8, r3
 800ea62:	46a1      	mov	r9, r4
 800ea64:	eb18 0805 	adds.w	r8, r8, r5
 800ea68:	eb49 0906 	adc.w	r9, r9, r6
 800ea6c:	f04f 0100 	mov.w	r1, #0
 800ea70:	f04f 0200 	mov.w	r2, #0
 800ea74:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800ea78:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800ea7c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ea80:	4688      	mov	r8, r1
 800ea82:	4691      	mov	r9, r2
 800ea84:	eb18 0005 	adds.w	r0, r8, r5
 800ea88:	eb49 0106 	adc.w	r1, r9, r6
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	685b      	ldr	r3, [r3, #4]
 800ea90:	461d      	mov	r5, r3
 800ea92:	f04f 0600 	mov.w	r6, #0
 800ea96:	196b      	adds	r3, r5, r5
 800ea98:	eb46 0406 	adc.w	r4, r6, r6
 800ea9c:	461a      	mov	r2, r3
 800ea9e:	4623      	mov	r3, r4
 800eaa0:	f7f2 f902 	bl	8000ca8 <__aeabi_uldivmod>
 800eaa4:	4603      	mov	r3, r0
 800eaa6:	460c      	mov	r4, r1
 800eaa8:	461a      	mov	r2, r3
 800eaaa:	4b47      	ldr	r3, [pc, #284]	; (800ebc8 <UART_SetConfig+0x384>)
 800eaac:	fba3 2302 	umull	r2, r3, r3, r2
 800eab0:	095b      	lsrs	r3, r3, #5
 800eab2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800eab6:	68bb      	ldr	r3, [r7, #8]
 800eab8:	461d      	mov	r5, r3
 800eaba:	f04f 0600 	mov.w	r6, #0
 800eabe:	46a9      	mov	r9, r5
 800eac0:	46b2      	mov	sl, r6
 800eac2:	eb19 0309 	adds.w	r3, r9, r9
 800eac6:	eb4a 040a 	adc.w	r4, sl, sl
 800eaca:	4699      	mov	r9, r3
 800eacc:	46a2      	mov	sl, r4
 800eace:	eb19 0905 	adds.w	r9, r9, r5
 800ead2:	eb4a 0a06 	adc.w	sl, sl, r6
 800ead6:	f04f 0100 	mov.w	r1, #0
 800eada:	f04f 0200 	mov.w	r2, #0
 800eade:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800eae2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800eae6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800eaea:	4689      	mov	r9, r1
 800eaec:	4692      	mov	sl, r2
 800eaee:	eb19 0005 	adds.w	r0, r9, r5
 800eaf2:	eb4a 0106 	adc.w	r1, sl, r6
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	685b      	ldr	r3, [r3, #4]
 800eafa:	461d      	mov	r5, r3
 800eafc:	f04f 0600 	mov.w	r6, #0
 800eb00:	196b      	adds	r3, r5, r5
 800eb02:	eb46 0406 	adc.w	r4, r6, r6
 800eb06:	461a      	mov	r2, r3
 800eb08:	4623      	mov	r3, r4
 800eb0a:	f7f2 f8cd 	bl	8000ca8 <__aeabi_uldivmod>
 800eb0e:	4603      	mov	r3, r0
 800eb10:	460c      	mov	r4, r1
 800eb12:	461a      	mov	r2, r3
 800eb14:	4b2c      	ldr	r3, [pc, #176]	; (800ebc8 <UART_SetConfig+0x384>)
 800eb16:	fba3 1302 	umull	r1, r3, r3, r2
 800eb1a:	095b      	lsrs	r3, r3, #5
 800eb1c:	2164      	movs	r1, #100	; 0x64
 800eb1e:	fb01 f303 	mul.w	r3, r1, r3
 800eb22:	1ad3      	subs	r3, r2, r3
 800eb24:	00db      	lsls	r3, r3, #3
 800eb26:	3332      	adds	r3, #50	; 0x32
 800eb28:	4a27      	ldr	r2, [pc, #156]	; (800ebc8 <UART_SetConfig+0x384>)
 800eb2a:	fba2 2303 	umull	r2, r3, r2, r3
 800eb2e:	095b      	lsrs	r3, r3, #5
 800eb30:	005b      	lsls	r3, r3, #1
 800eb32:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800eb36:	4498      	add	r8, r3
 800eb38:	68bb      	ldr	r3, [r7, #8]
 800eb3a:	461d      	mov	r5, r3
 800eb3c:	f04f 0600 	mov.w	r6, #0
 800eb40:	46a9      	mov	r9, r5
 800eb42:	46b2      	mov	sl, r6
 800eb44:	eb19 0309 	adds.w	r3, r9, r9
 800eb48:	eb4a 040a 	adc.w	r4, sl, sl
 800eb4c:	4699      	mov	r9, r3
 800eb4e:	46a2      	mov	sl, r4
 800eb50:	eb19 0905 	adds.w	r9, r9, r5
 800eb54:	eb4a 0a06 	adc.w	sl, sl, r6
 800eb58:	f04f 0100 	mov.w	r1, #0
 800eb5c:	f04f 0200 	mov.w	r2, #0
 800eb60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800eb64:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800eb68:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800eb6c:	4689      	mov	r9, r1
 800eb6e:	4692      	mov	sl, r2
 800eb70:	eb19 0005 	adds.w	r0, r9, r5
 800eb74:	eb4a 0106 	adc.w	r1, sl, r6
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	685b      	ldr	r3, [r3, #4]
 800eb7c:	461d      	mov	r5, r3
 800eb7e:	f04f 0600 	mov.w	r6, #0
 800eb82:	196b      	adds	r3, r5, r5
 800eb84:	eb46 0406 	adc.w	r4, r6, r6
 800eb88:	461a      	mov	r2, r3
 800eb8a:	4623      	mov	r3, r4
 800eb8c:	f7f2 f88c 	bl	8000ca8 <__aeabi_uldivmod>
 800eb90:	4603      	mov	r3, r0
 800eb92:	460c      	mov	r4, r1
 800eb94:	461a      	mov	r2, r3
 800eb96:	4b0c      	ldr	r3, [pc, #48]	; (800ebc8 <UART_SetConfig+0x384>)
 800eb98:	fba3 1302 	umull	r1, r3, r3, r2
 800eb9c:	095b      	lsrs	r3, r3, #5
 800eb9e:	2164      	movs	r1, #100	; 0x64
 800eba0:	fb01 f303 	mul.w	r3, r1, r3
 800eba4:	1ad3      	subs	r3, r2, r3
 800eba6:	00db      	lsls	r3, r3, #3
 800eba8:	3332      	adds	r3, #50	; 0x32
 800ebaa:	4a07      	ldr	r2, [pc, #28]	; (800ebc8 <UART_SetConfig+0x384>)
 800ebac:	fba2 2303 	umull	r2, r3, r2, r3
 800ebb0:	095b      	lsrs	r3, r3, #5
 800ebb2:	f003 0207 	and.w	r2, r3, #7
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	4442      	add	r2, r8
 800ebbc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800ebbe:	e1b2      	b.n	800ef26 <UART_SetConfig+0x6e2>
 800ebc0:	40011000 	.word	0x40011000
 800ebc4:	40011400 	.word	0x40011400
 800ebc8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	4ad7      	ldr	r2, [pc, #860]	; (800ef30 <UART_SetConfig+0x6ec>)
 800ebd2:	4293      	cmp	r3, r2
 800ebd4:	d005      	beq.n	800ebe2 <UART_SetConfig+0x39e>
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	4ad6      	ldr	r2, [pc, #856]	; (800ef34 <UART_SetConfig+0x6f0>)
 800ebdc:	4293      	cmp	r3, r2
 800ebde:	f040 80d1 	bne.w	800ed84 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800ebe2:	f7fe ffa9 	bl	800db38 <HAL_RCC_GetPCLK2Freq>
 800ebe6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ebe8:	68bb      	ldr	r3, [r7, #8]
 800ebea:	469a      	mov	sl, r3
 800ebec:	f04f 0b00 	mov.w	fp, #0
 800ebf0:	46d0      	mov	r8, sl
 800ebf2:	46d9      	mov	r9, fp
 800ebf4:	eb18 0308 	adds.w	r3, r8, r8
 800ebf8:	eb49 0409 	adc.w	r4, r9, r9
 800ebfc:	4698      	mov	r8, r3
 800ebfe:	46a1      	mov	r9, r4
 800ec00:	eb18 080a 	adds.w	r8, r8, sl
 800ec04:	eb49 090b 	adc.w	r9, r9, fp
 800ec08:	f04f 0100 	mov.w	r1, #0
 800ec0c:	f04f 0200 	mov.w	r2, #0
 800ec10:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800ec14:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800ec18:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ec1c:	4688      	mov	r8, r1
 800ec1e:	4691      	mov	r9, r2
 800ec20:	eb1a 0508 	adds.w	r5, sl, r8
 800ec24:	eb4b 0609 	adc.w	r6, fp, r9
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	685b      	ldr	r3, [r3, #4]
 800ec2c:	4619      	mov	r1, r3
 800ec2e:	f04f 0200 	mov.w	r2, #0
 800ec32:	f04f 0300 	mov.w	r3, #0
 800ec36:	f04f 0400 	mov.w	r4, #0
 800ec3a:	0094      	lsls	r4, r2, #2
 800ec3c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ec40:	008b      	lsls	r3, r1, #2
 800ec42:	461a      	mov	r2, r3
 800ec44:	4623      	mov	r3, r4
 800ec46:	4628      	mov	r0, r5
 800ec48:	4631      	mov	r1, r6
 800ec4a:	f7f2 f82d 	bl	8000ca8 <__aeabi_uldivmod>
 800ec4e:	4603      	mov	r3, r0
 800ec50:	460c      	mov	r4, r1
 800ec52:	461a      	mov	r2, r3
 800ec54:	4bb8      	ldr	r3, [pc, #736]	; (800ef38 <UART_SetConfig+0x6f4>)
 800ec56:	fba3 2302 	umull	r2, r3, r3, r2
 800ec5a:	095b      	lsrs	r3, r3, #5
 800ec5c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ec60:	68bb      	ldr	r3, [r7, #8]
 800ec62:	469b      	mov	fp, r3
 800ec64:	f04f 0c00 	mov.w	ip, #0
 800ec68:	46d9      	mov	r9, fp
 800ec6a:	46e2      	mov	sl, ip
 800ec6c:	eb19 0309 	adds.w	r3, r9, r9
 800ec70:	eb4a 040a 	adc.w	r4, sl, sl
 800ec74:	4699      	mov	r9, r3
 800ec76:	46a2      	mov	sl, r4
 800ec78:	eb19 090b 	adds.w	r9, r9, fp
 800ec7c:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ec80:	f04f 0100 	mov.w	r1, #0
 800ec84:	f04f 0200 	mov.w	r2, #0
 800ec88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ec8c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ec90:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ec94:	4689      	mov	r9, r1
 800ec96:	4692      	mov	sl, r2
 800ec98:	eb1b 0509 	adds.w	r5, fp, r9
 800ec9c:	eb4c 060a 	adc.w	r6, ip, sl
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	685b      	ldr	r3, [r3, #4]
 800eca4:	4619      	mov	r1, r3
 800eca6:	f04f 0200 	mov.w	r2, #0
 800ecaa:	f04f 0300 	mov.w	r3, #0
 800ecae:	f04f 0400 	mov.w	r4, #0
 800ecb2:	0094      	lsls	r4, r2, #2
 800ecb4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ecb8:	008b      	lsls	r3, r1, #2
 800ecba:	461a      	mov	r2, r3
 800ecbc:	4623      	mov	r3, r4
 800ecbe:	4628      	mov	r0, r5
 800ecc0:	4631      	mov	r1, r6
 800ecc2:	f7f1 fff1 	bl	8000ca8 <__aeabi_uldivmod>
 800ecc6:	4603      	mov	r3, r0
 800ecc8:	460c      	mov	r4, r1
 800ecca:	461a      	mov	r2, r3
 800eccc:	4b9a      	ldr	r3, [pc, #616]	; (800ef38 <UART_SetConfig+0x6f4>)
 800ecce:	fba3 1302 	umull	r1, r3, r3, r2
 800ecd2:	095b      	lsrs	r3, r3, #5
 800ecd4:	2164      	movs	r1, #100	; 0x64
 800ecd6:	fb01 f303 	mul.w	r3, r1, r3
 800ecda:	1ad3      	subs	r3, r2, r3
 800ecdc:	011b      	lsls	r3, r3, #4
 800ecde:	3332      	adds	r3, #50	; 0x32
 800ece0:	4a95      	ldr	r2, [pc, #596]	; (800ef38 <UART_SetConfig+0x6f4>)
 800ece2:	fba2 2303 	umull	r2, r3, r2, r3
 800ece6:	095b      	lsrs	r3, r3, #5
 800ece8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ecec:	4498      	add	r8, r3
 800ecee:	68bb      	ldr	r3, [r7, #8]
 800ecf0:	469b      	mov	fp, r3
 800ecf2:	f04f 0c00 	mov.w	ip, #0
 800ecf6:	46d9      	mov	r9, fp
 800ecf8:	46e2      	mov	sl, ip
 800ecfa:	eb19 0309 	adds.w	r3, r9, r9
 800ecfe:	eb4a 040a 	adc.w	r4, sl, sl
 800ed02:	4699      	mov	r9, r3
 800ed04:	46a2      	mov	sl, r4
 800ed06:	eb19 090b 	adds.w	r9, r9, fp
 800ed0a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ed0e:	f04f 0100 	mov.w	r1, #0
 800ed12:	f04f 0200 	mov.w	r2, #0
 800ed16:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ed1a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ed1e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ed22:	4689      	mov	r9, r1
 800ed24:	4692      	mov	sl, r2
 800ed26:	eb1b 0509 	adds.w	r5, fp, r9
 800ed2a:	eb4c 060a 	adc.w	r6, ip, sl
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	685b      	ldr	r3, [r3, #4]
 800ed32:	4619      	mov	r1, r3
 800ed34:	f04f 0200 	mov.w	r2, #0
 800ed38:	f04f 0300 	mov.w	r3, #0
 800ed3c:	f04f 0400 	mov.w	r4, #0
 800ed40:	0094      	lsls	r4, r2, #2
 800ed42:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ed46:	008b      	lsls	r3, r1, #2
 800ed48:	461a      	mov	r2, r3
 800ed4a:	4623      	mov	r3, r4
 800ed4c:	4628      	mov	r0, r5
 800ed4e:	4631      	mov	r1, r6
 800ed50:	f7f1 ffaa 	bl	8000ca8 <__aeabi_uldivmod>
 800ed54:	4603      	mov	r3, r0
 800ed56:	460c      	mov	r4, r1
 800ed58:	461a      	mov	r2, r3
 800ed5a:	4b77      	ldr	r3, [pc, #476]	; (800ef38 <UART_SetConfig+0x6f4>)
 800ed5c:	fba3 1302 	umull	r1, r3, r3, r2
 800ed60:	095b      	lsrs	r3, r3, #5
 800ed62:	2164      	movs	r1, #100	; 0x64
 800ed64:	fb01 f303 	mul.w	r3, r1, r3
 800ed68:	1ad3      	subs	r3, r2, r3
 800ed6a:	011b      	lsls	r3, r3, #4
 800ed6c:	3332      	adds	r3, #50	; 0x32
 800ed6e:	4a72      	ldr	r2, [pc, #456]	; (800ef38 <UART_SetConfig+0x6f4>)
 800ed70:	fba2 2303 	umull	r2, r3, r2, r3
 800ed74:	095b      	lsrs	r3, r3, #5
 800ed76:	f003 020f 	and.w	r2, r3, #15
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	4442      	add	r2, r8
 800ed80:	609a      	str	r2, [r3, #8]
 800ed82:	e0d0      	b.n	800ef26 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800ed84:	f7fe fec4 	bl	800db10 <HAL_RCC_GetPCLK1Freq>
 800ed88:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ed8a:	68bb      	ldr	r3, [r7, #8]
 800ed8c:	469a      	mov	sl, r3
 800ed8e:	f04f 0b00 	mov.w	fp, #0
 800ed92:	46d0      	mov	r8, sl
 800ed94:	46d9      	mov	r9, fp
 800ed96:	eb18 0308 	adds.w	r3, r8, r8
 800ed9a:	eb49 0409 	adc.w	r4, r9, r9
 800ed9e:	4698      	mov	r8, r3
 800eda0:	46a1      	mov	r9, r4
 800eda2:	eb18 080a 	adds.w	r8, r8, sl
 800eda6:	eb49 090b 	adc.w	r9, r9, fp
 800edaa:	f04f 0100 	mov.w	r1, #0
 800edae:	f04f 0200 	mov.w	r2, #0
 800edb2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800edb6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800edba:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800edbe:	4688      	mov	r8, r1
 800edc0:	4691      	mov	r9, r2
 800edc2:	eb1a 0508 	adds.w	r5, sl, r8
 800edc6:	eb4b 0609 	adc.w	r6, fp, r9
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	685b      	ldr	r3, [r3, #4]
 800edce:	4619      	mov	r1, r3
 800edd0:	f04f 0200 	mov.w	r2, #0
 800edd4:	f04f 0300 	mov.w	r3, #0
 800edd8:	f04f 0400 	mov.w	r4, #0
 800eddc:	0094      	lsls	r4, r2, #2
 800edde:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ede2:	008b      	lsls	r3, r1, #2
 800ede4:	461a      	mov	r2, r3
 800ede6:	4623      	mov	r3, r4
 800ede8:	4628      	mov	r0, r5
 800edea:	4631      	mov	r1, r6
 800edec:	f7f1 ff5c 	bl	8000ca8 <__aeabi_uldivmod>
 800edf0:	4603      	mov	r3, r0
 800edf2:	460c      	mov	r4, r1
 800edf4:	461a      	mov	r2, r3
 800edf6:	4b50      	ldr	r3, [pc, #320]	; (800ef38 <UART_SetConfig+0x6f4>)
 800edf8:	fba3 2302 	umull	r2, r3, r3, r2
 800edfc:	095b      	lsrs	r3, r3, #5
 800edfe:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ee02:	68bb      	ldr	r3, [r7, #8]
 800ee04:	469b      	mov	fp, r3
 800ee06:	f04f 0c00 	mov.w	ip, #0
 800ee0a:	46d9      	mov	r9, fp
 800ee0c:	46e2      	mov	sl, ip
 800ee0e:	eb19 0309 	adds.w	r3, r9, r9
 800ee12:	eb4a 040a 	adc.w	r4, sl, sl
 800ee16:	4699      	mov	r9, r3
 800ee18:	46a2      	mov	sl, r4
 800ee1a:	eb19 090b 	adds.w	r9, r9, fp
 800ee1e:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ee22:	f04f 0100 	mov.w	r1, #0
 800ee26:	f04f 0200 	mov.w	r2, #0
 800ee2a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ee2e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ee32:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ee36:	4689      	mov	r9, r1
 800ee38:	4692      	mov	sl, r2
 800ee3a:	eb1b 0509 	adds.w	r5, fp, r9
 800ee3e:	eb4c 060a 	adc.w	r6, ip, sl
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	685b      	ldr	r3, [r3, #4]
 800ee46:	4619      	mov	r1, r3
 800ee48:	f04f 0200 	mov.w	r2, #0
 800ee4c:	f04f 0300 	mov.w	r3, #0
 800ee50:	f04f 0400 	mov.w	r4, #0
 800ee54:	0094      	lsls	r4, r2, #2
 800ee56:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ee5a:	008b      	lsls	r3, r1, #2
 800ee5c:	461a      	mov	r2, r3
 800ee5e:	4623      	mov	r3, r4
 800ee60:	4628      	mov	r0, r5
 800ee62:	4631      	mov	r1, r6
 800ee64:	f7f1 ff20 	bl	8000ca8 <__aeabi_uldivmod>
 800ee68:	4603      	mov	r3, r0
 800ee6a:	460c      	mov	r4, r1
 800ee6c:	461a      	mov	r2, r3
 800ee6e:	4b32      	ldr	r3, [pc, #200]	; (800ef38 <UART_SetConfig+0x6f4>)
 800ee70:	fba3 1302 	umull	r1, r3, r3, r2
 800ee74:	095b      	lsrs	r3, r3, #5
 800ee76:	2164      	movs	r1, #100	; 0x64
 800ee78:	fb01 f303 	mul.w	r3, r1, r3
 800ee7c:	1ad3      	subs	r3, r2, r3
 800ee7e:	011b      	lsls	r3, r3, #4
 800ee80:	3332      	adds	r3, #50	; 0x32
 800ee82:	4a2d      	ldr	r2, [pc, #180]	; (800ef38 <UART_SetConfig+0x6f4>)
 800ee84:	fba2 2303 	umull	r2, r3, r2, r3
 800ee88:	095b      	lsrs	r3, r3, #5
 800ee8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ee8e:	4498      	add	r8, r3
 800ee90:	68bb      	ldr	r3, [r7, #8]
 800ee92:	469b      	mov	fp, r3
 800ee94:	f04f 0c00 	mov.w	ip, #0
 800ee98:	46d9      	mov	r9, fp
 800ee9a:	46e2      	mov	sl, ip
 800ee9c:	eb19 0309 	adds.w	r3, r9, r9
 800eea0:	eb4a 040a 	adc.w	r4, sl, sl
 800eea4:	4699      	mov	r9, r3
 800eea6:	46a2      	mov	sl, r4
 800eea8:	eb19 090b 	adds.w	r9, r9, fp
 800eeac:	eb4a 0a0c 	adc.w	sl, sl, ip
 800eeb0:	f04f 0100 	mov.w	r1, #0
 800eeb4:	f04f 0200 	mov.w	r2, #0
 800eeb8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800eebc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800eec0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800eec4:	4689      	mov	r9, r1
 800eec6:	4692      	mov	sl, r2
 800eec8:	eb1b 0509 	adds.w	r5, fp, r9
 800eecc:	eb4c 060a 	adc.w	r6, ip, sl
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	685b      	ldr	r3, [r3, #4]
 800eed4:	4619      	mov	r1, r3
 800eed6:	f04f 0200 	mov.w	r2, #0
 800eeda:	f04f 0300 	mov.w	r3, #0
 800eede:	f04f 0400 	mov.w	r4, #0
 800eee2:	0094      	lsls	r4, r2, #2
 800eee4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800eee8:	008b      	lsls	r3, r1, #2
 800eeea:	461a      	mov	r2, r3
 800eeec:	4623      	mov	r3, r4
 800eeee:	4628      	mov	r0, r5
 800eef0:	4631      	mov	r1, r6
 800eef2:	f7f1 fed9 	bl	8000ca8 <__aeabi_uldivmod>
 800eef6:	4603      	mov	r3, r0
 800eef8:	460c      	mov	r4, r1
 800eefa:	461a      	mov	r2, r3
 800eefc:	4b0e      	ldr	r3, [pc, #56]	; (800ef38 <UART_SetConfig+0x6f4>)
 800eefe:	fba3 1302 	umull	r1, r3, r3, r2
 800ef02:	095b      	lsrs	r3, r3, #5
 800ef04:	2164      	movs	r1, #100	; 0x64
 800ef06:	fb01 f303 	mul.w	r3, r1, r3
 800ef0a:	1ad3      	subs	r3, r2, r3
 800ef0c:	011b      	lsls	r3, r3, #4
 800ef0e:	3332      	adds	r3, #50	; 0x32
 800ef10:	4a09      	ldr	r2, [pc, #36]	; (800ef38 <UART_SetConfig+0x6f4>)
 800ef12:	fba2 2303 	umull	r2, r3, r2, r3
 800ef16:	095b      	lsrs	r3, r3, #5
 800ef18:	f003 020f 	and.w	r2, r3, #15
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	4442      	add	r2, r8
 800ef22:	609a      	str	r2, [r3, #8]
}
 800ef24:	e7ff      	b.n	800ef26 <UART_SetConfig+0x6e2>
 800ef26:	bf00      	nop
 800ef28:	3714      	adds	r7, #20
 800ef2a:	46bd      	mov	sp, r7
 800ef2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef30:	40011000 	.word	0x40011000
 800ef34:	40011400 	.word	0x40011400
 800ef38:	51eb851f 	.word	0x51eb851f

0800ef3c <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800ef3c:	b480      	push	{r7}
 800ef3e:	b085      	sub	sp, #20
 800ef40:	af00      	add	r7, sp, #0
 800ef42:	6078      	str	r0, [r7, #4]
 800ef44:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800ef46:	2300      	movs	r3, #0
 800ef48:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800ef4a:	683b      	ldr	r3, [r7, #0]
 800ef4c:	681a      	ldr	r2, [r3, #0]
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef54:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800ef56:	68fa      	ldr	r2, [r7, #12]
 800ef58:	4b20      	ldr	r3, [pc, #128]	; (800efdc <FSMC_NORSRAM_Init+0xa0>)
 800ef5a:	4013      	ands	r3, r2
 800ef5c:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800ef5e:	683b      	ldr	r3, [r7, #0]
 800ef60:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800ef62:	683b      	ldr	r3, [r7, #0]
 800ef64:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800ef66:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800ef68:	683b      	ldr	r3, [r7, #0]
 800ef6a:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800ef6c:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800ef6e:	683b      	ldr	r3, [r7, #0]
 800ef70:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800ef72:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800ef74:	683b      	ldr	r3, [r7, #0]
 800ef76:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800ef78:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800ef7a:	683b      	ldr	r3, [r7, #0]
 800ef7c:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800ef7e:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800ef80:	683b      	ldr	r3, [r7, #0]
 800ef82:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 800ef84:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800ef86:	683b      	ldr	r3, [r7, #0]
 800ef88:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800ef8a:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800ef8c:	683b      	ldr	r3, [r7, #0]
 800ef8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800ef90:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800ef92:	683b      	ldr	r3, [r7, #0]
 800ef94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800ef96:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800ef98:	683b      	ldr	r3, [r7, #0]
 800ef9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800ef9c:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800ef9e:	683b      	ldr	r3, [r7, #0]
 800efa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800efa2:	431a      	orrs	r2, r3
                     Init->WriteBurst
 800efa4:	683b      	ldr	r3, [r7, #0]
 800efa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 800efa8:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800efaa:	68fa      	ldr	r2, [r7, #12]
 800efac:	4313      	orrs	r3, r2
 800efae:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800efb0:	683b      	ldr	r3, [r7, #0]
 800efb2:	689b      	ldr	r3, [r3, #8]
 800efb4:	2b08      	cmp	r3, #8
 800efb6:	d103      	bne.n	800efc0 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800efbe:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800efc0:	683b      	ldr	r3, [r7, #0]
 800efc2:	681a      	ldr	r2, [r3, #0]
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	68f9      	ldr	r1, [r7, #12]
 800efc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800efcc:	2300      	movs	r3, #0
}
 800efce:	4618      	mov	r0, r3
 800efd0:	3714      	adds	r7, #20
 800efd2:	46bd      	mov	sp, r7
 800efd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd8:	4770      	bx	lr
 800efda:	bf00      	nop
 800efdc:	fff00080 	.word	0xfff00080

0800efe0 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800efe0:	b480      	push	{r7}
 800efe2:	b087      	sub	sp, #28
 800efe4:	af00      	add	r7, sp, #0
 800efe6:	60f8      	str	r0, [r7, #12]
 800efe8:	60b9      	str	r1, [r7, #8]
 800efea:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800efec:	2300      	movs	r3, #0
 800efee:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	1c5a      	adds	r2, r3, #1
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800effa:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800effc:	697b      	ldr	r3, [r7, #20]
 800effe:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800f002:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f004:	68bb      	ldr	r3, [r7, #8]
 800f006:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800f008:	68bb      	ldr	r3, [r7, #8]
 800f00a:	685b      	ldr	r3, [r3, #4]
 800f00c:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f00e:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800f010:	68bb      	ldr	r3, [r7, #8]
 800f012:	689b      	ldr	r3, [r3, #8]
 800f014:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800f016:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800f018:	68bb      	ldr	r3, [r7, #8]
 800f01a:	68db      	ldr	r3, [r3, #12]
 800f01c:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800f01e:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800f020:	68bb      	ldr	r3, [r7, #8]
 800f022:	691b      	ldr	r3, [r3, #16]
 800f024:	3b01      	subs	r3, #1
 800f026:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800f028:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800f02a:	68bb      	ldr	r3, [r7, #8]
 800f02c:	695b      	ldr	r3, [r3, #20]
 800f02e:	3b02      	subs	r3, #2
 800f030:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800f032:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800f034:	68bb      	ldr	r3, [r7, #8]
 800f036:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f038:	4313      	orrs	r3, r2
 800f03a:	697a      	ldr	r2, [r7, #20]
 800f03c:	4313      	orrs	r3, r2
 800f03e:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	1c5a      	adds	r2, r3, #1
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	6979      	ldr	r1, [r7, #20]
 800f048:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800f04c:	2300      	movs	r3, #0
}
 800f04e:	4618      	mov	r0, r3
 800f050:	371c      	adds	r7, #28
 800f052:	46bd      	mov	sp, r7
 800f054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f058:	4770      	bx	lr
	...

0800f05c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800f05c:	b480      	push	{r7}
 800f05e:	b087      	sub	sp, #28
 800f060:	af00      	add	r7, sp, #0
 800f062:	60f8      	str	r0, [r7, #12]
 800f064:	60b9      	str	r1, [r7, #8]
 800f066:	607a      	str	r2, [r7, #4]
 800f068:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800f06a:	2300      	movs	r3, #0
 800f06c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800f06e:	683b      	ldr	r3, [r7, #0]
 800f070:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f074:	d122      	bne.n	800f0bc <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	687a      	ldr	r2, [r7, #4]
 800f07a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f07e:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800f080:	697a      	ldr	r2, [r7, #20]
 800f082:	4b15      	ldr	r3, [pc, #84]	; (800f0d8 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800f084:	4013      	ands	r3, r2
 800f086:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f088:	68bb      	ldr	r3, [r7, #8]
 800f08a:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800f08c:	68bb      	ldr	r3, [r7, #8]
 800f08e:	685b      	ldr	r3, [r3, #4]
 800f090:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f092:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800f094:	68bb      	ldr	r3, [r7, #8]
 800f096:	689b      	ldr	r3, [r3, #8]
 800f098:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800f09a:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800f09c:	68bb      	ldr	r3, [r7, #8]
 800f09e:	68db      	ldr	r3, [r3, #12]
 800f0a0:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800f0a2:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800f0a4:	68bb      	ldr	r3, [r7, #8]
 800f0a6:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800f0a8:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800f0aa:	697a      	ldr	r2, [r7, #20]
 800f0ac:	4313      	orrs	r3, r2
 800f0ae:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	687a      	ldr	r2, [r7, #4]
 800f0b4:	6979      	ldr	r1, [r7, #20]
 800f0b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800f0ba:	e005      	b.n	800f0c8 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	687a      	ldr	r2, [r7, #4]
 800f0c0:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800f0c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800f0c8:	2300      	movs	r3, #0
}
 800f0ca:	4618      	mov	r0, r3
 800f0cc:	371c      	adds	r7, #28
 800f0ce:	46bd      	mov	sp, r7
 800f0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0d4:	4770      	bx	lr
 800f0d6:	bf00      	nop
 800f0d8:	cff00000 	.word	0xcff00000

0800f0dc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f0dc:	b084      	sub	sp, #16
 800f0de:	b580      	push	{r7, lr}
 800f0e0:	b084      	sub	sp, #16
 800f0e2:	af00      	add	r7, sp, #0
 800f0e4:	6078      	str	r0, [r7, #4]
 800f0e6:	f107 001c 	add.w	r0, r7, #28
 800f0ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f0ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0f0:	2b01      	cmp	r3, #1
 800f0f2:	d122      	bne.n	800f13a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f0f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	68db      	ldr	r3, [r3, #12]
 800f104:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800f108:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f10c:	687a      	ldr	r2, [r7, #4]
 800f10e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	68db      	ldr	r3, [r3, #12]
 800f114:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800f11c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f11e:	2b01      	cmp	r3, #1
 800f120:	d105      	bne.n	800f12e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	68db      	ldr	r3, [r3, #12]
 800f126:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800f12e:	6878      	ldr	r0, [r7, #4]
 800f130:	f001 fa7c 	bl	801062c <USB_CoreReset>
 800f134:	4603      	mov	r3, r0
 800f136:	73fb      	strb	r3, [r7, #15]
 800f138:	e01a      	b.n	800f170 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	68db      	ldr	r3, [r3, #12]
 800f13e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800f146:	6878      	ldr	r0, [r7, #4]
 800f148:	f001 fa70 	bl	801062c <USB_CoreReset>
 800f14c:	4603      	mov	r3, r0
 800f14e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800f150:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f152:	2b00      	cmp	r3, #0
 800f154:	d106      	bne.n	800f164 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f15a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	639a      	str	r2, [r3, #56]	; 0x38
 800f162:	e005      	b.n	800f170 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f168:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800f170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f172:	2b01      	cmp	r3, #1
 800f174:	d10b      	bne.n	800f18e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	689b      	ldr	r3, [r3, #8]
 800f17a:	f043 0206 	orr.w	r2, r3, #6
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	689b      	ldr	r3, [r3, #8]
 800f186:	f043 0220 	orr.w	r2, r3, #32
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800f18e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f190:	4618      	mov	r0, r3
 800f192:	3710      	adds	r7, #16
 800f194:	46bd      	mov	sp, r7
 800f196:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f19a:	b004      	add	sp, #16
 800f19c:	4770      	bx	lr
	...

0800f1a0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800f1a0:	b480      	push	{r7}
 800f1a2:	b087      	sub	sp, #28
 800f1a4:	af00      	add	r7, sp, #0
 800f1a6:	60f8      	str	r0, [r7, #12]
 800f1a8:	60b9      	str	r1, [r7, #8]
 800f1aa:	4613      	mov	r3, r2
 800f1ac:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800f1ae:	79fb      	ldrb	r3, [r7, #7]
 800f1b0:	2b02      	cmp	r3, #2
 800f1b2:	d165      	bne.n	800f280 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800f1b4:	68bb      	ldr	r3, [r7, #8]
 800f1b6:	4a41      	ldr	r2, [pc, #260]	; (800f2bc <USB_SetTurnaroundTime+0x11c>)
 800f1b8:	4293      	cmp	r3, r2
 800f1ba:	d906      	bls.n	800f1ca <USB_SetTurnaroundTime+0x2a>
 800f1bc:	68bb      	ldr	r3, [r7, #8]
 800f1be:	4a40      	ldr	r2, [pc, #256]	; (800f2c0 <USB_SetTurnaroundTime+0x120>)
 800f1c0:	4293      	cmp	r3, r2
 800f1c2:	d802      	bhi.n	800f1ca <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800f1c4:	230f      	movs	r3, #15
 800f1c6:	617b      	str	r3, [r7, #20]
 800f1c8:	e062      	b.n	800f290 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800f1ca:	68bb      	ldr	r3, [r7, #8]
 800f1cc:	4a3c      	ldr	r2, [pc, #240]	; (800f2c0 <USB_SetTurnaroundTime+0x120>)
 800f1ce:	4293      	cmp	r3, r2
 800f1d0:	d906      	bls.n	800f1e0 <USB_SetTurnaroundTime+0x40>
 800f1d2:	68bb      	ldr	r3, [r7, #8]
 800f1d4:	4a3b      	ldr	r2, [pc, #236]	; (800f2c4 <USB_SetTurnaroundTime+0x124>)
 800f1d6:	4293      	cmp	r3, r2
 800f1d8:	d802      	bhi.n	800f1e0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800f1da:	230e      	movs	r3, #14
 800f1dc:	617b      	str	r3, [r7, #20]
 800f1de:	e057      	b.n	800f290 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800f1e0:	68bb      	ldr	r3, [r7, #8]
 800f1e2:	4a38      	ldr	r2, [pc, #224]	; (800f2c4 <USB_SetTurnaroundTime+0x124>)
 800f1e4:	4293      	cmp	r3, r2
 800f1e6:	d906      	bls.n	800f1f6 <USB_SetTurnaroundTime+0x56>
 800f1e8:	68bb      	ldr	r3, [r7, #8]
 800f1ea:	4a37      	ldr	r2, [pc, #220]	; (800f2c8 <USB_SetTurnaroundTime+0x128>)
 800f1ec:	4293      	cmp	r3, r2
 800f1ee:	d802      	bhi.n	800f1f6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800f1f0:	230d      	movs	r3, #13
 800f1f2:	617b      	str	r3, [r7, #20]
 800f1f4:	e04c      	b.n	800f290 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800f1f6:	68bb      	ldr	r3, [r7, #8]
 800f1f8:	4a33      	ldr	r2, [pc, #204]	; (800f2c8 <USB_SetTurnaroundTime+0x128>)
 800f1fa:	4293      	cmp	r3, r2
 800f1fc:	d906      	bls.n	800f20c <USB_SetTurnaroundTime+0x6c>
 800f1fe:	68bb      	ldr	r3, [r7, #8]
 800f200:	4a32      	ldr	r2, [pc, #200]	; (800f2cc <USB_SetTurnaroundTime+0x12c>)
 800f202:	4293      	cmp	r3, r2
 800f204:	d802      	bhi.n	800f20c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800f206:	230c      	movs	r3, #12
 800f208:	617b      	str	r3, [r7, #20]
 800f20a:	e041      	b.n	800f290 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800f20c:	68bb      	ldr	r3, [r7, #8]
 800f20e:	4a2f      	ldr	r2, [pc, #188]	; (800f2cc <USB_SetTurnaroundTime+0x12c>)
 800f210:	4293      	cmp	r3, r2
 800f212:	d906      	bls.n	800f222 <USB_SetTurnaroundTime+0x82>
 800f214:	68bb      	ldr	r3, [r7, #8]
 800f216:	4a2e      	ldr	r2, [pc, #184]	; (800f2d0 <USB_SetTurnaroundTime+0x130>)
 800f218:	4293      	cmp	r3, r2
 800f21a:	d802      	bhi.n	800f222 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800f21c:	230b      	movs	r3, #11
 800f21e:	617b      	str	r3, [r7, #20]
 800f220:	e036      	b.n	800f290 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800f222:	68bb      	ldr	r3, [r7, #8]
 800f224:	4a2a      	ldr	r2, [pc, #168]	; (800f2d0 <USB_SetTurnaroundTime+0x130>)
 800f226:	4293      	cmp	r3, r2
 800f228:	d906      	bls.n	800f238 <USB_SetTurnaroundTime+0x98>
 800f22a:	68bb      	ldr	r3, [r7, #8]
 800f22c:	4a29      	ldr	r2, [pc, #164]	; (800f2d4 <USB_SetTurnaroundTime+0x134>)
 800f22e:	4293      	cmp	r3, r2
 800f230:	d802      	bhi.n	800f238 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800f232:	230a      	movs	r3, #10
 800f234:	617b      	str	r3, [r7, #20]
 800f236:	e02b      	b.n	800f290 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800f238:	68bb      	ldr	r3, [r7, #8]
 800f23a:	4a26      	ldr	r2, [pc, #152]	; (800f2d4 <USB_SetTurnaroundTime+0x134>)
 800f23c:	4293      	cmp	r3, r2
 800f23e:	d906      	bls.n	800f24e <USB_SetTurnaroundTime+0xae>
 800f240:	68bb      	ldr	r3, [r7, #8]
 800f242:	4a25      	ldr	r2, [pc, #148]	; (800f2d8 <USB_SetTurnaroundTime+0x138>)
 800f244:	4293      	cmp	r3, r2
 800f246:	d802      	bhi.n	800f24e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800f248:	2309      	movs	r3, #9
 800f24a:	617b      	str	r3, [r7, #20]
 800f24c:	e020      	b.n	800f290 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800f24e:	68bb      	ldr	r3, [r7, #8]
 800f250:	4a21      	ldr	r2, [pc, #132]	; (800f2d8 <USB_SetTurnaroundTime+0x138>)
 800f252:	4293      	cmp	r3, r2
 800f254:	d906      	bls.n	800f264 <USB_SetTurnaroundTime+0xc4>
 800f256:	68bb      	ldr	r3, [r7, #8]
 800f258:	4a20      	ldr	r2, [pc, #128]	; (800f2dc <USB_SetTurnaroundTime+0x13c>)
 800f25a:	4293      	cmp	r3, r2
 800f25c:	d802      	bhi.n	800f264 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800f25e:	2308      	movs	r3, #8
 800f260:	617b      	str	r3, [r7, #20]
 800f262:	e015      	b.n	800f290 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800f264:	68bb      	ldr	r3, [r7, #8]
 800f266:	4a1d      	ldr	r2, [pc, #116]	; (800f2dc <USB_SetTurnaroundTime+0x13c>)
 800f268:	4293      	cmp	r3, r2
 800f26a:	d906      	bls.n	800f27a <USB_SetTurnaroundTime+0xda>
 800f26c:	68bb      	ldr	r3, [r7, #8]
 800f26e:	4a1c      	ldr	r2, [pc, #112]	; (800f2e0 <USB_SetTurnaroundTime+0x140>)
 800f270:	4293      	cmp	r3, r2
 800f272:	d802      	bhi.n	800f27a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800f274:	2307      	movs	r3, #7
 800f276:	617b      	str	r3, [r7, #20]
 800f278:	e00a      	b.n	800f290 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800f27a:	2306      	movs	r3, #6
 800f27c:	617b      	str	r3, [r7, #20]
 800f27e:	e007      	b.n	800f290 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800f280:	79fb      	ldrb	r3, [r7, #7]
 800f282:	2b00      	cmp	r3, #0
 800f284:	d102      	bne.n	800f28c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800f286:	2309      	movs	r3, #9
 800f288:	617b      	str	r3, [r7, #20]
 800f28a:	e001      	b.n	800f290 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800f28c:	2309      	movs	r3, #9
 800f28e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	68db      	ldr	r3, [r3, #12]
 800f294:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	68da      	ldr	r2, [r3, #12]
 800f2a0:	697b      	ldr	r3, [r7, #20]
 800f2a2:	029b      	lsls	r3, r3, #10
 800f2a4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800f2a8:	431a      	orrs	r2, r3
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800f2ae:	2300      	movs	r3, #0
}
 800f2b0:	4618      	mov	r0, r3
 800f2b2:	371c      	adds	r7, #28
 800f2b4:	46bd      	mov	sp, r7
 800f2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ba:	4770      	bx	lr
 800f2bc:	00d8acbf 	.word	0x00d8acbf
 800f2c0:	00e4e1bf 	.word	0x00e4e1bf
 800f2c4:	00f423ff 	.word	0x00f423ff
 800f2c8:	0106737f 	.word	0x0106737f
 800f2cc:	011a499f 	.word	0x011a499f
 800f2d0:	01312cff 	.word	0x01312cff
 800f2d4:	014ca43f 	.word	0x014ca43f
 800f2d8:	016e35ff 	.word	0x016e35ff
 800f2dc:	01a6ab1f 	.word	0x01a6ab1f
 800f2e0:	01e847ff 	.word	0x01e847ff

0800f2e4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f2e4:	b480      	push	{r7}
 800f2e6:	b083      	sub	sp, #12
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	689b      	ldr	r3, [r3, #8]
 800f2f0:	f043 0201 	orr.w	r2, r3, #1
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f2f8:	2300      	movs	r3, #0
}
 800f2fa:	4618      	mov	r0, r3
 800f2fc:	370c      	adds	r7, #12
 800f2fe:	46bd      	mov	sp, r7
 800f300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f304:	4770      	bx	lr

0800f306 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f306:	b480      	push	{r7}
 800f308:	b083      	sub	sp, #12
 800f30a:	af00      	add	r7, sp, #0
 800f30c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	689b      	ldr	r3, [r3, #8]
 800f312:	f023 0201 	bic.w	r2, r3, #1
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f31a:	2300      	movs	r3, #0
}
 800f31c:	4618      	mov	r0, r3
 800f31e:	370c      	adds	r7, #12
 800f320:	46bd      	mov	sp, r7
 800f322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f326:	4770      	bx	lr

0800f328 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800f328:	b580      	push	{r7, lr}
 800f32a:	b082      	sub	sp, #8
 800f32c:	af00      	add	r7, sp, #0
 800f32e:	6078      	str	r0, [r7, #4]
 800f330:	460b      	mov	r3, r1
 800f332:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	68db      	ldr	r3, [r3, #12]
 800f338:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800f340:	78fb      	ldrb	r3, [r7, #3]
 800f342:	2b01      	cmp	r3, #1
 800f344:	d106      	bne.n	800f354 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	68db      	ldr	r3, [r3, #12]
 800f34a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	60da      	str	r2, [r3, #12]
 800f352:	e00b      	b.n	800f36c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800f354:	78fb      	ldrb	r3, [r7, #3]
 800f356:	2b00      	cmp	r3, #0
 800f358:	d106      	bne.n	800f368 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	68db      	ldr	r3, [r3, #12]
 800f35e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	60da      	str	r2, [r3, #12]
 800f366:	e001      	b.n	800f36c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800f368:	2301      	movs	r3, #1
 800f36a:	e003      	b.n	800f374 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800f36c:	2032      	movs	r0, #50	; 0x32
 800f36e:	f7fb ff5f 	bl	800b230 <HAL_Delay>

  return HAL_OK;
 800f372:	2300      	movs	r3, #0
}
 800f374:	4618      	mov	r0, r3
 800f376:	3708      	adds	r7, #8
 800f378:	46bd      	mov	sp, r7
 800f37a:	bd80      	pop	{r7, pc}

0800f37c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f37c:	b084      	sub	sp, #16
 800f37e:	b580      	push	{r7, lr}
 800f380:	b086      	sub	sp, #24
 800f382:	af00      	add	r7, sp, #0
 800f384:	6078      	str	r0, [r7, #4]
 800f386:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800f38a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800f38e:	2300      	movs	r3, #0
 800f390:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800f396:	2300      	movs	r3, #0
 800f398:	613b      	str	r3, [r7, #16]
 800f39a:	e009      	b.n	800f3b0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800f39c:	687a      	ldr	r2, [r7, #4]
 800f39e:	693b      	ldr	r3, [r7, #16]
 800f3a0:	3340      	adds	r3, #64	; 0x40
 800f3a2:	009b      	lsls	r3, r3, #2
 800f3a4:	4413      	add	r3, r2
 800f3a6:	2200      	movs	r2, #0
 800f3a8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800f3aa:	693b      	ldr	r3, [r7, #16]
 800f3ac:	3301      	adds	r3, #1
 800f3ae:	613b      	str	r3, [r7, #16]
 800f3b0:	693b      	ldr	r3, [r7, #16]
 800f3b2:	2b0e      	cmp	r3, #14
 800f3b4:	d9f2      	bls.n	800f39c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800f3b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d112      	bne.n	800f3e2 <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f3c0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f3cc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f3d8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	639a      	str	r2, [r3, #56]	; 0x38
 800f3e0:	e00b      	b.n	800f3fa <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f3f2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f400:	461a      	mov	r2, r3
 800f402:	2300      	movs	r3, #0
 800f404:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f40c:	4619      	mov	r1, r3
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f414:	461a      	mov	r2, r3
 800f416:	680b      	ldr	r3, [r1, #0]
 800f418:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f41a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f41c:	2b01      	cmp	r3, #1
 800f41e:	d10c      	bne.n	800f43a <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800f420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f422:	2b00      	cmp	r3, #0
 800f424:	d104      	bne.n	800f430 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800f426:	2100      	movs	r1, #0
 800f428:	6878      	ldr	r0, [r7, #4]
 800f42a:	f000 f961 	bl	800f6f0 <USB_SetDevSpeed>
 800f42e:	e008      	b.n	800f442 <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800f430:	2101      	movs	r1, #1
 800f432:	6878      	ldr	r0, [r7, #4]
 800f434:	f000 f95c 	bl	800f6f0 <USB_SetDevSpeed>
 800f438:	e003      	b.n	800f442 <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800f43a:	2103      	movs	r1, #3
 800f43c:	6878      	ldr	r0, [r7, #4]
 800f43e:	f000 f957 	bl	800f6f0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800f442:	2110      	movs	r1, #16
 800f444:	6878      	ldr	r0, [r7, #4]
 800f446:	f000 f90b 	bl	800f660 <USB_FlushTxFifo>
 800f44a:	4603      	mov	r3, r0
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d001      	beq.n	800f454 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 800f450:	2301      	movs	r3, #1
 800f452:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800f454:	6878      	ldr	r0, [r7, #4]
 800f456:	f000 f929 	bl	800f6ac <USB_FlushRxFifo>
 800f45a:	4603      	mov	r3, r0
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d001      	beq.n	800f464 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 800f460:	2301      	movs	r3, #1
 800f462:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f46a:	461a      	mov	r2, r3
 800f46c:	2300      	movs	r3, #0
 800f46e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f476:	461a      	mov	r2, r3
 800f478:	2300      	movs	r3, #0
 800f47a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f482:	461a      	mov	r2, r3
 800f484:	2300      	movs	r3, #0
 800f486:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f488:	2300      	movs	r3, #0
 800f48a:	613b      	str	r3, [r7, #16]
 800f48c:	e043      	b.n	800f516 <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f48e:	693b      	ldr	r3, [r7, #16]
 800f490:	015a      	lsls	r2, r3, #5
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	4413      	add	r3, r2
 800f496:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f4a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f4a4:	d118      	bne.n	800f4d8 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 800f4a6:	693b      	ldr	r3, [r7, #16]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d10a      	bne.n	800f4c2 <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800f4ac:	693b      	ldr	r3, [r7, #16]
 800f4ae:	015a      	lsls	r2, r3, #5
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	4413      	add	r3, r2
 800f4b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f4b8:	461a      	mov	r2, r3
 800f4ba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f4be:	6013      	str	r3, [r2, #0]
 800f4c0:	e013      	b.n	800f4ea <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800f4c2:	693b      	ldr	r3, [r7, #16]
 800f4c4:	015a      	lsls	r2, r3, #5
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	4413      	add	r3, r2
 800f4ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f4ce:	461a      	mov	r2, r3
 800f4d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f4d4:	6013      	str	r3, [r2, #0]
 800f4d6:	e008      	b.n	800f4ea <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800f4d8:	693b      	ldr	r3, [r7, #16]
 800f4da:	015a      	lsls	r2, r3, #5
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	4413      	add	r3, r2
 800f4e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f4e4:	461a      	mov	r2, r3
 800f4e6:	2300      	movs	r3, #0
 800f4e8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800f4ea:	693b      	ldr	r3, [r7, #16]
 800f4ec:	015a      	lsls	r2, r3, #5
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	4413      	add	r3, r2
 800f4f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f4f6:	461a      	mov	r2, r3
 800f4f8:	2300      	movs	r3, #0
 800f4fa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800f4fc:	693b      	ldr	r3, [r7, #16]
 800f4fe:	015a      	lsls	r2, r3, #5
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	4413      	add	r3, r2
 800f504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f508:	461a      	mov	r2, r3
 800f50a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f50e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f510:	693b      	ldr	r3, [r7, #16]
 800f512:	3301      	adds	r3, #1
 800f514:	613b      	str	r3, [r7, #16]
 800f516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f518:	693a      	ldr	r2, [r7, #16]
 800f51a:	429a      	cmp	r2, r3
 800f51c:	d3b7      	bcc.n	800f48e <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f51e:	2300      	movs	r3, #0
 800f520:	613b      	str	r3, [r7, #16]
 800f522:	e043      	b.n	800f5ac <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f524:	693b      	ldr	r3, [r7, #16]
 800f526:	015a      	lsls	r2, r3, #5
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	4413      	add	r3, r2
 800f52c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f536:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f53a:	d118      	bne.n	800f56e <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 800f53c:	693b      	ldr	r3, [r7, #16]
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d10a      	bne.n	800f558 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800f542:	693b      	ldr	r3, [r7, #16]
 800f544:	015a      	lsls	r2, r3, #5
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	4413      	add	r3, r2
 800f54a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f54e:	461a      	mov	r2, r3
 800f550:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f554:	6013      	str	r3, [r2, #0]
 800f556:	e013      	b.n	800f580 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800f558:	693b      	ldr	r3, [r7, #16]
 800f55a:	015a      	lsls	r2, r3, #5
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	4413      	add	r3, r2
 800f560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f564:	461a      	mov	r2, r3
 800f566:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f56a:	6013      	str	r3, [r2, #0]
 800f56c:	e008      	b.n	800f580 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800f56e:	693b      	ldr	r3, [r7, #16]
 800f570:	015a      	lsls	r2, r3, #5
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	4413      	add	r3, r2
 800f576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f57a:	461a      	mov	r2, r3
 800f57c:	2300      	movs	r3, #0
 800f57e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800f580:	693b      	ldr	r3, [r7, #16]
 800f582:	015a      	lsls	r2, r3, #5
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	4413      	add	r3, r2
 800f588:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f58c:	461a      	mov	r2, r3
 800f58e:	2300      	movs	r3, #0
 800f590:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800f592:	693b      	ldr	r3, [r7, #16]
 800f594:	015a      	lsls	r2, r3, #5
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	4413      	add	r3, r2
 800f59a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f59e:	461a      	mov	r2, r3
 800f5a0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f5a4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f5a6:	693b      	ldr	r3, [r7, #16]
 800f5a8:	3301      	adds	r3, #1
 800f5aa:	613b      	str	r3, [r7, #16]
 800f5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5ae:	693a      	ldr	r2, [r7, #16]
 800f5b0:	429a      	cmp	r2, r3
 800f5b2:	d3b7      	bcc.n	800f524 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f5ba:	691b      	ldr	r3, [r3, #16]
 800f5bc:	68fa      	ldr	r2, [r7, #12]
 800f5be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f5c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f5c6:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 800f5c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5ca:	2b01      	cmp	r3, #1
 800f5cc:	d111      	bne.n	800f5f2 <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f5d4:	461a      	mov	r2, r3
 800f5d6:	4b20      	ldr	r3, [pc, #128]	; (800f658 <USB_DevInit+0x2dc>)
 800f5d8:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f5e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f5e2:	68fa      	ldr	r2, [r7, #12]
 800f5e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f5e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f5ec:	f043 0303 	orr.w	r3, r3, #3
 800f5f0:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	2200      	movs	r2, #0
 800f5f6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800f5fe:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800f600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f602:	2b00      	cmp	r3, #0
 800f604:	d105      	bne.n	800f612 <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	699b      	ldr	r3, [r3, #24]
 800f60a:	f043 0210 	orr.w	r2, r3, #16
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	699a      	ldr	r2, [r3, #24]
 800f616:	4b11      	ldr	r3, [pc, #68]	; (800f65c <USB_DevInit+0x2e0>)
 800f618:	4313      	orrs	r3, r2
 800f61a:	687a      	ldr	r2, [r7, #4]
 800f61c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800f61e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f620:	2b00      	cmp	r3, #0
 800f622:	d005      	beq.n	800f630 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	699b      	ldr	r3, [r3, #24]
 800f628:	f043 0208 	orr.w	r2, r3, #8
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800f630:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f632:	2b01      	cmp	r3, #1
 800f634:	d107      	bne.n	800f646 <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	699b      	ldr	r3, [r3, #24]
 800f63a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f63e:	f043 0304 	orr.w	r3, r3, #4
 800f642:	687a      	ldr	r2, [r7, #4]
 800f644:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800f646:	7dfb      	ldrb	r3, [r7, #23]
}
 800f648:	4618      	mov	r0, r3
 800f64a:	3718      	adds	r7, #24
 800f64c:	46bd      	mov	sp, r7
 800f64e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f652:	b004      	add	sp, #16
 800f654:	4770      	bx	lr
 800f656:	bf00      	nop
 800f658:	00800100 	.word	0x00800100
 800f65c:	803c3800 	.word	0x803c3800

0800f660 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800f660:	b480      	push	{r7}
 800f662:	b085      	sub	sp, #20
 800f664:	af00      	add	r7, sp, #0
 800f666:	6078      	str	r0, [r7, #4]
 800f668:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800f66a:	2300      	movs	r3, #0
 800f66c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800f66e:	683b      	ldr	r3, [r7, #0]
 800f670:	019b      	lsls	r3, r3, #6
 800f672:	f043 0220 	orr.w	r2, r3, #32
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	3301      	adds	r3, #1
 800f67e:	60fb      	str	r3, [r7, #12]
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	4a09      	ldr	r2, [pc, #36]	; (800f6a8 <USB_FlushTxFifo+0x48>)
 800f684:	4293      	cmp	r3, r2
 800f686:	d901      	bls.n	800f68c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800f688:	2303      	movs	r3, #3
 800f68a:	e006      	b.n	800f69a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	691b      	ldr	r3, [r3, #16]
 800f690:	f003 0320 	and.w	r3, r3, #32
 800f694:	2b20      	cmp	r3, #32
 800f696:	d0f0      	beq.n	800f67a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800f698:	2300      	movs	r3, #0
}
 800f69a:	4618      	mov	r0, r3
 800f69c:	3714      	adds	r7, #20
 800f69e:	46bd      	mov	sp, r7
 800f6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a4:	4770      	bx	lr
 800f6a6:	bf00      	nop
 800f6a8:	00030d40 	.word	0x00030d40

0800f6ac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800f6ac:	b480      	push	{r7}
 800f6ae:	b085      	sub	sp, #20
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800f6b4:	2300      	movs	r3, #0
 800f6b6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	2210      	movs	r2, #16
 800f6bc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	3301      	adds	r3, #1
 800f6c2:	60fb      	str	r3, [r7, #12]
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	4a09      	ldr	r2, [pc, #36]	; (800f6ec <USB_FlushRxFifo+0x40>)
 800f6c8:	4293      	cmp	r3, r2
 800f6ca:	d901      	bls.n	800f6d0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800f6cc:	2303      	movs	r3, #3
 800f6ce:	e006      	b.n	800f6de <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	691b      	ldr	r3, [r3, #16]
 800f6d4:	f003 0310 	and.w	r3, r3, #16
 800f6d8:	2b10      	cmp	r3, #16
 800f6da:	d0f0      	beq.n	800f6be <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800f6dc:	2300      	movs	r3, #0
}
 800f6de:	4618      	mov	r0, r3
 800f6e0:	3714      	adds	r7, #20
 800f6e2:	46bd      	mov	sp, r7
 800f6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e8:	4770      	bx	lr
 800f6ea:	bf00      	nop
 800f6ec:	00030d40 	.word	0x00030d40

0800f6f0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800f6f0:	b480      	push	{r7}
 800f6f2:	b085      	sub	sp, #20
 800f6f4:	af00      	add	r7, sp, #0
 800f6f6:	6078      	str	r0, [r7, #4]
 800f6f8:	460b      	mov	r3, r1
 800f6fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f706:	681a      	ldr	r2, [r3, #0]
 800f708:	78fb      	ldrb	r3, [r7, #3]
 800f70a:	68f9      	ldr	r1, [r7, #12]
 800f70c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f710:	4313      	orrs	r3, r2
 800f712:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800f714:	2300      	movs	r3, #0
}
 800f716:	4618      	mov	r0, r3
 800f718:	3714      	adds	r7, #20
 800f71a:	46bd      	mov	sp, r7
 800f71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f720:	4770      	bx	lr

0800f722 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800f722:	b480      	push	{r7}
 800f724:	b087      	sub	sp, #28
 800f726:	af00      	add	r7, sp, #0
 800f728:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800f72e:	693b      	ldr	r3, [r7, #16]
 800f730:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f734:	689b      	ldr	r3, [r3, #8]
 800f736:	f003 0306 	and.w	r3, r3, #6
 800f73a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d102      	bne.n	800f748 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800f742:	2300      	movs	r3, #0
 800f744:	75fb      	strb	r3, [r7, #23]
 800f746:	e00a      	b.n	800f75e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	2b02      	cmp	r3, #2
 800f74c:	d002      	beq.n	800f754 <USB_GetDevSpeed+0x32>
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	2b06      	cmp	r3, #6
 800f752:	d102      	bne.n	800f75a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800f754:	2302      	movs	r3, #2
 800f756:	75fb      	strb	r3, [r7, #23]
 800f758:	e001      	b.n	800f75e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800f75a:	230f      	movs	r3, #15
 800f75c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800f75e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f760:	4618      	mov	r0, r3
 800f762:	371c      	adds	r7, #28
 800f764:	46bd      	mov	sp, r7
 800f766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f76a:	4770      	bx	lr

0800f76c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f76c:	b480      	push	{r7}
 800f76e:	b085      	sub	sp, #20
 800f770:	af00      	add	r7, sp, #0
 800f772:	6078      	str	r0, [r7, #4]
 800f774:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f77a:	683b      	ldr	r3, [r7, #0]
 800f77c:	781b      	ldrb	r3, [r3, #0]
 800f77e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f780:	683b      	ldr	r3, [r7, #0]
 800f782:	785b      	ldrb	r3, [r3, #1]
 800f784:	2b01      	cmp	r3, #1
 800f786:	d13a      	bne.n	800f7fe <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f78e:	69da      	ldr	r2, [r3, #28]
 800f790:	683b      	ldr	r3, [r7, #0]
 800f792:	781b      	ldrb	r3, [r3, #0]
 800f794:	f003 030f 	and.w	r3, r3, #15
 800f798:	2101      	movs	r1, #1
 800f79a:	fa01 f303 	lsl.w	r3, r1, r3
 800f79e:	b29b      	uxth	r3, r3
 800f7a0:	68f9      	ldr	r1, [r7, #12]
 800f7a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f7a6:	4313      	orrs	r3, r2
 800f7a8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800f7aa:	68bb      	ldr	r3, [r7, #8]
 800f7ac:	015a      	lsls	r2, r3, #5
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	4413      	add	r3, r2
 800f7b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d155      	bne.n	800f86c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f7c0:	68bb      	ldr	r3, [r7, #8]
 800f7c2:	015a      	lsls	r2, r3, #5
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	4413      	add	r3, r2
 800f7c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f7cc:	681a      	ldr	r2, [r3, #0]
 800f7ce:	683b      	ldr	r3, [r7, #0]
 800f7d0:	689b      	ldr	r3, [r3, #8]
 800f7d2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800f7d6:	683b      	ldr	r3, [r7, #0]
 800f7d8:	78db      	ldrb	r3, [r3, #3]
 800f7da:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f7dc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800f7de:	68bb      	ldr	r3, [r7, #8]
 800f7e0:	059b      	lsls	r3, r3, #22
 800f7e2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f7e4:	4313      	orrs	r3, r2
 800f7e6:	68ba      	ldr	r2, [r7, #8]
 800f7e8:	0151      	lsls	r1, r2, #5
 800f7ea:	68fa      	ldr	r2, [r7, #12]
 800f7ec:	440a      	add	r2, r1
 800f7ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f7f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f7f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f7fa:	6013      	str	r3, [r2, #0]
 800f7fc:	e036      	b.n	800f86c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f804:	69da      	ldr	r2, [r3, #28]
 800f806:	683b      	ldr	r3, [r7, #0]
 800f808:	781b      	ldrb	r3, [r3, #0]
 800f80a:	f003 030f 	and.w	r3, r3, #15
 800f80e:	2101      	movs	r1, #1
 800f810:	fa01 f303 	lsl.w	r3, r1, r3
 800f814:	041b      	lsls	r3, r3, #16
 800f816:	68f9      	ldr	r1, [r7, #12]
 800f818:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f81c:	4313      	orrs	r3, r2
 800f81e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800f820:	68bb      	ldr	r3, [r7, #8]
 800f822:	015a      	lsls	r2, r3, #5
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	4413      	add	r3, r2
 800f828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f832:	2b00      	cmp	r3, #0
 800f834:	d11a      	bne.n	800f86c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f836:	68bb      	ldr	r3, [r7, #8]
 800f838:	015a      	lsls	r2, r3, #5
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	4413      	add	r3, r2
 800f83e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f842:	681a      	ldr	r2, [r3, #0]
 800f844:	683b      	ldr	r3, [r7, #0]
 800f846:	689b      	ldr	r3, [r3, #8]
 800f848:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800f84c:	683b      	ldr	r3, [r7, #0]
 800f84e:	78db      	ldrb	r3, [r3, #3]
 800f850:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f852:	430b      	orrs	r3, r1
 800f854:	4313      	orrs	r3, r2
 800f856:	68ba      	ldr	r2, [r7, #8]
 800f858:	0151      	lsls	r1, r2, #5
 800f85a:	68fa      	ldr	r2, [r7, #12]
 800f85c:	440a      	add	r2, r1
 800f85e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f862:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f866:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f86a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800f86c:	2300      	movs	r3, #0
}
 800f86e:	4618      	mov	r0, r3
 800f870:	3714      	adds	r7, #20
 800f872:	46bd      	mov	sp, r7
 800f874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f878:	4770      	bx	lr
	...

0800f87c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f87c:	b480      	push	{r7}
 800f87e:	b085      	sub	sp, #20
 800f880:	af00      	add	r7, sp, #0
 800f882:	6078      	str	r0, [r7, #4]
 800f884:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f88a:	683b      	ldr	r3, [r7, #0]
 800f88c:	781b      	ldrb	r3, [r3, #0]
 800f88e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800f890:	683b      	ldr	r3, [r7, #0]
 800f892:	785b      	ldrb	r3, [r3, #1]
 800f894:	2b01      	cmp	r3, #1
 800f896:	d135      	bne.n	800f904 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f89e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f8a0:	683b      	ldr	r3, [r7, #0]
 800f8a2:	781b      	ldrb	r3, [r3, #0]
 800f8a4:	f003 030f 	and.w	r3, r3, #15
 800f8a8:	2101      	movs	r1, #1
 800f8aa:	fa01 f303 	lsl.w	r3, r1, r3
 800f8ae:	b29b      	uxth	r3, r3
 800f8b0:	43db      	mvns	r3, r3
 800f8b2:	68f9      	ldr	r1, [r7, #12]
 800f8b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f8b8:	4013      	ands	r3, r2
 800f8ba:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f8c2:	69da      	ldr	r2, [r3, #28]
 800f8c4:	683b      	ldr	r3, [r7, #0]
 800f8c6:	781b      	ldrb	r3, [r3, #0]
 800f8c8:	f003 030f 	and.w	r3, r3, #15
 800f8cc:	2101      	movs	r1, #1
 800f8ce:	fa01 f303 	lsl.w	r3, r1, r3
 800f8d2:	b29b      	uxth	r3, r3
 800f8d4:	43db      	mvns	r3, r3
 800f8d6:	68f9      	ldr	r1, [r7, #12]
 800f8d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f8dc:	4013      	ands	r3, r2
 800f8de:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800f8e0:	68bb      	ldr	r3, [r7, #8]
 800f8e2:	015a      	lsls	r2, r3, #5
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	4413      	add	r3, r2
 800f8e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f8ec:	681a      	ldr	r2, [r3, #0]
 800f8ee:	68bb      	ldr	r3, [r7, #8]
 800f8f0:	0159      	lsls	r1, r3, #5
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	440b      	add	r3, r1
 800f8f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f8fa:	4619      	mov	r1, r3
 800f8fc:	4b1f      	ldr	r3, [pc, #124]	; (800f97c <USB_DeactivateEndpoint+0x100>)
 800f8fe:	4013      	ands	r3, r2
 800f900:	600b      	str	r3, [r1, #0]
 800f902:	e034      	b.n	800f96e <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f90a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f90c:	683b      	ldr	r3, [r7, #0]
 800f90e:	781b      	ldrb	r3, [r3, #0]
 800f910:	f003 030f 	and.w	r3, r3, #15
 800f914:	2101      	movs	r1, #1
 800f916:	fa01 f303 	lsl.w	r3, r1, r3
 800f91a:	041b      	lsls	r3, r3, #16
 800f91c:	43db      	mvns	r3, r3
 800f91e:	68f9      	ldr	r1, [r7, #12]
 800f920:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f924:	4013      	ands	r3, r2
 800f926:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f92e:	69da      	ldr	r2, [r3, #28]
 800f930:	683b      	ldr	r3, [r7, #0]
 800f932:	781b      	ldrb	r3, [r3, #0]
 800f934:	f003 030f 	and.w	r3, r3, #15
 800f938:	2101      	movs	r1, #1
 800f93a:	fa01 f303 	lsl.w	r3, r1, r3
 800f93e:	041b      	lsls	r3, r3, #16
 800f940:	43db      	mvns	r3, r3
 800f942:	68f9      	ldr	r1, [r7, #12]
 800f944:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f948:	4013      	ands	r3, r2
 800f94a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800f94c:	68bb      	ldr	r3, [r7, #8]
 800f94e:	015a      	lsls	r2, r3, #5
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	4413      	add	r3, r2
 800f954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f958:	681a      	ldr	r2, [r3, #0]
 800f95a:	68bb      	ldr	r3, [r7, #8]
 800f95c:	0159      	lsls	r1, r3, #5
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	440b      	add	r3, r1
 800f962:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f966:	4619      	mov	r1, r3
 800f968:	4b05      	ldr	r3, [pc, #20]	; (800f980 <USB_DeactivateEndpoint+0x104>)
 800f96a:	4013      	ands	r3, r2
 800f96c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800f96e:	2300      	movs	r3, #0
}
 800f970:	4618      	mov	r0, r3
 800f972:	3714      	adds	r7, #20
 800f974:	46bd      	mov	sp, r7
 800f976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f97a:	4770      	bx	lr
 800f97c:	ec337800 	.word	0xec337800
 800f980:	eff37800 	.word	0xeff37800

0800f984 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800f984:	b580      	push	{r7, lr}
 800f986:	b08a      	sub	sp, #40	; 0x28
 800f988:	af02      	add	r7, sp, #8
 800f98a:	60f8      	str	r0, [r7, #12]
 800f98c:	60b9      	str	r1, [r7, #8]
 800f98e:	4613      	mov	r3, r2
 800f990:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800f996:	68bb      	ldr	r3, [r7, #8]
 800f998:	781b      	ldrb	r3, [r3, #0]
 800f99a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f99c:	68bb      	ldr	r3, [r7, #8]
 800f99e:	785b      	ldrb	r3, [r3, #1]
 800f9a0:	2b01      	cmp	r3, #1
 800f9a2:	f040 815c 	bne.w	800fc5e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800f9a6:	68bb      	ldr	r3, [r7, #8]
 800f9a8:	695b      	ldr	r3, [r3, #20]
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d132      	bne.n	800fa14 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f9ae:	69bb      	ldr	r3, [r7, #24]
 800f9b0:	015a      	lsls	r2, r3, #5
 800f9b2:	69fb      	ldr	r3, [r7, #28]
 800f9b4:	4413      	add	r3, r2
 800f9b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f9ba:	691b      	ldr	r3, [r3, #16]
 800f9bc:	69ba      	ldr	r2, [r7, #24]
 800f9be:	0151      	lsls	r1, r2, #5
 800f9c0:	69fa      	ldr	r2, [r7, #28]
 800f9c2:	440a      	add	r2, r1
 800f9c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f9c8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f9cc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f9d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f9d2:	69bb      	ldr	r3, [r7, #24]
 800f9d4:	015a      	lsls	r2, r3, #5
 800f9d6:	69fb      	ldr	r3, [r7, #28]
 800f9d8:	4413      	add	r3, r2
 800f9da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f9de:	691b      	ldr	r3, [r3, #16]
 800f9e0:	69ba      	ldr	r2, [r7, #24]
 800f9e2:	0151      	lsls	r1, r2, #5
 800f9e4:	69fa      	ldr	r2, [r7, #28]
 800f9e6:	440a      	add	r2, r1
 800f9e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f9ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f9f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f9f2:	69bb      	ldr	r3, [r7, #24]
 800f9f4:	015a      	lsls	r2, r3, #5
 800f9f6:	69fb      	ldr	r3, [r7, #28]
 800f9f8:	4413      	add	r3, r2
 800f9fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f9fe:	691b      	ldr	r3, [r3, #16]
 800fa00:	69ba      	ldr	r2, [r7, #24]
 800fa02:	0151      	lsls	r1, r2, #5
 800fa04:	69fa      	ldr	r2, [r7, #28]
 800fa06:	440a      	add	r2, r1
 800fa08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fa0c:	0cdb      	lsrs	r3, r3, #19
 800fa0e:	04db      	lsls	r3, r3, #19
 800fa10:	6113      	str	r3, [r2, #16]
 800fa12:	e074      	b.n	800fafe <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800fa14:	69bb      	ldr	r3, [r7, #24]
 800fa16:	015a      	lsls	r2, r3, #5
 800fa18:	69fb      	ldr	r3, [r7, #28]
 800fa1a:	4413      	add	r3, r2
 800fa1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa20:	691b      	ldr	r3, [r3, #16]
 800fa22:	69ba      	ldr	r2, [r7, #24]
 800fa24:	0151      	lsls	r1, r2, #5
 800fa26:	69fa      	ldr	r2, [r7, #28]
 800fa28:	440a      	add	r2, r1
 800fa2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fa2e:	0cdb      	lsrs	r3, r3, #19
 800fa30:	04db      	lsls	r3, r3, #19
 800fa32:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800fa34:	69bb      	ldr	r3, [r7, #24]
 800fa36:	015a      	lsls	r2, r3, #5
 800fa38:	69fb      	ldr	r3, [r7, #28]
 800fa3a:	4413      	add	r3, r2
 800fa3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa40:	691b      	ldr	r3, [r3, #16]
 800fa42:	69ba      	ldr	r2, [r7, #24]
 800fa44:	0151      	lsls	r1, r2, #5
 800fa46:	69fa      	ldr	r2, [r7, #28]
 800fa48:	440a      	add	r2, r1
 800fa4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fa4e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800fa52:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800fa56:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800fa58:	69bb      	ldr	r3, [r7, #24]
 800fa5a:	015a      	lsls	r2, r3, #5
 800fa5c:	69fb      	ldr	r3, [r7, #28]
 800fa5e:	4413      	add	r3, r2
 800fa60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa64:	691a      	ldr	r2, [r3, #16]
 800fa66:	68bb      	ldr	r3, [r7, #8]
 800fa68:	6959      	ldr	r1, [r3, #20]
 800fa6a:	68bb      	ldr	r3, [r7, #8]
 800fa6c:	689b      	ldr	r3, [r3, #8]
 800fa6e:	440b      	add	r3, r1
 800fa70:	1e59      	subs	r1, r3, #1
 800fa72:	68bb      	ldr	r3, [r7, #8]
 800fa74:	689b      	ldr	r3, [r3, #8]
 800fa76:	fbb1 f3f3 	udiv	r3, r1, r3
 800fa7a:	04d9      	lsls	r1, r3, #19
 800fa7c:	4b9d      	ldr	r3, [pc, #628]	; (800fcf4 <USB_EPStartXfer+0x370>)
 800fa7e:	400b      	ands	r3, r1
 800fa80:	69b9      	ldr	r1, [r7, #24]
 800fa82:	0148      	lsls	r0, r1, #5
 800fa84:	69f9      	ldr	r1, [r7, #28]
 800fa86:	4401      	add	r1, r0
 800fa88:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800fa8c:	4313      	orrs	r3, r2
 800fa8e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800fa90:	69bb      	ldr	r3, [r7, #24]
 800fa92:	015a      	lsls	r2, r3, #5
 800fa94:	69fb      	ldr	r3, [r7, #28]
 800fa96:	4413      	add	r3, r2
 800fa98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa9c:	691a      	ldr	r2, [r3, #16]
 800fa9e:	68bb      	ldr	r3, [r7, #8]
 800faa0:	695b      	ldr	r3, [r3, #20]
 800faa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800faa6:	69b9      	ldr	r1, [r7, #24]
 800faa8:	0148      	lsls	r0, r1, #5
 800faaa:	69f9      	ldr	r1, [r7, #28]
 800faac:	4401      	add	r1, r0
 800faae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800fab2:	4313      	orrs	r3, r2
 800fab4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800fab6:	68bb      	ldr	r3, [r7, #8]
 800fab8:	78db      	ldrb	r3, [r3, #3]
 800faba:	2b01      	cmp	r3, #1
 800fabc:	d11f      	bne.n	800fafe <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800fabe:	69bb      	ldr	r3, [r7, #24]
 800fac0:	015a      	lsls	r2, r3, #5
 800fac2:	69fb      	ldr	r3, [r7, #28]
 800fac4:	4413      	add	r3, r2
 800fac6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800faca:	691b      	ldr	r3, [r3, #16]
 800facc:	69ba      	ldr	r2, [r7, #24]
 800face:	0151      	lsls	r1, r2, #5
 800fad0:	69fa      	ldr	r2, [r7, #28]
 800fad2:	440a      	add	r2, r1
 800fad4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fad8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800fadc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800fade:	69bb      	ldr	r3, [r7, #24]
 800fae0:	015a      	lsls	r2, r3, #5
 800fae2:	69fb      	ldr	r3, [r7, #28]
 800fae4:	4413      	add	r3, r2
 800fae6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800faea:	691b      	ldr	r3, [r3, #16]
 800faec:	69ba      	ldr	r2, [r7, #24]
 800faee:	0151      	lsls	r1, r2, #5
 800faf0:	69fa      	ldr	r2, [r7, #28]
 800faf2:	440a      	add	r2, r1
 800faf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800faf8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800fafc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800fafe:	79fb      	ldrb	r3, [r7, #7]
 800fb00:	2b01      	cmp	r3, #1
 800fb02:	d14b      	bne.n	800fb9c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800fb04:	68bb      	ldr	r3, [r7, #8]
 800fb06:	691b      	ldr	r3, [r3, #16]
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d009      	beq.n	800fb20 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800fb0c:	69bb      	ldr	r3, [r7, #24]
 800fb0e:	015a      	lsls	r2, r3, #5
 800fb10:	69fb      	ldr	r3, [r7, #28]
 800fb12:	4413      	add	r3, r2
 800fb14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb18:	461a      	mov	r2, r3
 800fb1a:	68bb      	ldr	r3, [r7, #8]
 800fb1c:	691b      	ldr	r3, [r3, #16]
 800fb1e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800fb20:	68bb      	ldr	r3, [r7, #8]
 800fb22:	78db      	ldrb	r3, [r3, #3]
 800fb24:	2b01      	cmp	r3, #1
 800fb26:	d128      	bne.n	800fb7a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800fb28:	69fb      	ldr	r3, [r7, #28]
 800fb2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb2e:	689b      	ldr	r3, [r3, #8]
 800fb30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d110      	bne.n	800fb5a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800fb38:	69bb      	ldr	r3, [r7, #24]
 800fb3a:	015a      	lsls	r2, r3, #5
 800fb3c:	69fb      	ldr	r3, [r7, #28]
 800fb3e:	4413      	add	r3, r2
 800fb40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	69ba      	ldr	r2, [r7, #24]
 800fb48:	0151      	lsls	r1, r2, #5
 800fb4a:	69fa      	ldr	r2, [r7, #28]
 800fb4c:	440a      	add	r2, r1
 800fb4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fb52:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800fb56:	6013      	str	r3, [r2, #0]
 800fb58:	e00f      	b.n	800fb7a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800fb5a:	69bb      	ldr	r3, [r7, #24]
 800fb5c:	015a      	lsls	r2, r3, #5
 800fb5e:	69fb      	ldr	r3, [r7, #28]
 800fb60:	4413      	add	r3, r2
 800fb62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	69ba      	ldr	r2, [r7, #24]
 800fb6a:	0151      	lsls	r1, r2, #5
 800fb6c:	69fa      	ldr	r2, [r7, #28]
 800fb6e:	440a      	add	r2, r1
 800fb70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fb74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fb78:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800fb7a:	69bb      	ldr	r3, [r7, #24]
 800fb7c:	015a      	lsls	r2, r3, #5
 800fb7e:	69fb      	ldr	r3, [r7, #28]
 800fb80:	4413      	add	r3, r2
 800fb82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	69ba      	ldr	r2, [r7, #24]
 800fb8a:	0151      	lsls	r1, r2, #5
 800fb8c:	69fa      	ldr	r2, [r7, #28]
 800fb8e:	440a      	add	r2, r1
 800fb90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fb94:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fb98:	6013      	str	r3, [r2, #0]
 800fb9a:	e12f      	b.n	800fdfc <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800fb9c:	69bb      	ldr	r3, [r7, #24]
 800fb9e:	015a      	lsls	r2, r3, #5
 800fba0:	69fb      	ldr	r3, [r7, #28]
 800fba2:	4413      	add	r3, r2
 800fba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	69ba      	ldr	r2, [r7, #24]
 800fbac:	0151      	lsls	r1, r2, #5
 800fbae:	69fa      	ldr	r2, [r7, #28]
 800fbb0:	440a      	add	r2, r1
 800fbb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fbb6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fbba:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800fbbc:	68bb      	ldr	r3, [r7, #8]
 800fbbe:	78db      	ldrb	r3, [r3, #3]
 800fbc0:	2b01      	cmp	r3, #1
 800fbc2:	d015      	beq.n	800fbf0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800fbc4:	68bb      	ldr	r3, [r7, #8]
 800fbc6:	695b      	ldr	r3, [r3, #20]
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	f000 8117 	beq.w	800fdfc <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800fbce:	69fb      	ldr	r3, [r7, #28]
 800fbd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fbd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fbd6:	68bb      	ldr	r3, [r7, #8]
 800fbd8:	781b      	ldrb	r3, [r3, #0]
 800fbda:	f003 030f 	and.w	r3, r3, #15
 800fbde:	2101      	movs	r1, #1
 800fbe0:	fa01 f303 	lsl.w	r3, r1, r3
 800fbe4:	69f9      	ldr	r1, [r7, #28]
 800fbe6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fbea:	4313      	orrs	r3, r2
 800fbec:	634b      	str	r3, [r1, #52]	; 0x34
 800fbee:	e105      	b.n	800fdfc <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800fbf0:	69fb      	ldr	r3, [r7, #28]
 800fbf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fbf6:	689b      	ldr	r3, [r3, #8]
 800fbf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d110      	bne.n	800fc22 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800fc00:	69bb      	ldr	r3, [r7, #24]
 800fc02:	015a      	lsls	r2, r3, #5
 800fc04:	69fb      	ldr	r3, [r7, #28]
 800fc06:	4413      	add	r3, r2
 800fc08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	69ba      	ldr	r2, [r7, #24]
 800fc10:	0151      	lsls	r1, r2, #5
 800fc12:	69fa      	ldr	r2, [r7, #28]
 800fc14:	440a      	add	r2, r1
 800fc16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fc1a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800fc1e:	6013      	str	r3, [r2, #0]
 800fc20:	e00f      	b.n	800fc42 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800fc22:	69bb      	ldr	r3, [r7, #24]
 800fc24:	015a      	lsls	r2, r3, #5
 800fc26:	69fb      	ldr	r3, [r7, #28]
 800fc28:	4413      	add	r3, r2
 800fc2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	69ba      	ldr	r2, [r7, #24]
 800fc32:	0151      	lsls	r1, r2, #5
 800fc34:	69fa      	ldr	r2, [r7, #28]
 800fc36:	440a      	add	r2, r1
 800fc38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fc3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fc40:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800fc42:	68bb      	ldr	r3, [r7, #8]
 800fc44:	68d9      	ldr	r1, [r3, #12]
 800fc46:	68bb      	ldr	r3, [r7, #8]
 800fc48:	781a      	ldrb	r2, [r3, #0]
 800fc4a:	68bb      	ldr	r3, [r7, #8]
 800fc4c:	695b      	ldr	r3, [r3, #20]
 800fc4e:	b298      	uxth	r0, r3
 800fc50:	79fb      	ldrb	r3, [r7, #7]
 800fc52:	9300      	str	r3, [sp, #0]
 800fc54:	4603      	mov	r3, r0
 800fc56:	68f8      	ldr	r0, [r7, #12]
 800fc58:	f000 fa2b 	bl	80100b2 <USB_WritePacket>
 800fc5c:	e0ce      	b.n	800fdfc <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800fc5e:	69bb      	ldr	r3, [r7, #24]
 800fc60:	015a      	lsls	r2, r3, #5
 800fc62:	69fb      	ldr	r3, [r7, #28]
 800fc64:	4413      	add	r3, r2
 800fc66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc6a:	691b      	ldr	r3, [r3, #16]
 800fc6c:	69ba      	ldr	r2, [r7, #24]
 800fc6e:	0151      	lsls	r1, r2, #5
 800fc70:	69fa      	ldr	r2, [r7, #28]
 800fc72:	440a      	add	r2, r1
 800fc74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fc78:	0cdb      	lsrs	r3, r3, #19
 800fc7a:	04db      	lsls	r3, r3, #19
 800fc7c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800fc7e:	69bb      	ldr	r3, [r7, #24]
 800fc80:	015a      	lsls	r2, r3, #5
 800fc82:	69fb      	ldr	r3, [r7, #28]
 800fc84:	4413      	add	r3, r2
 800fc86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc8a:	691b      	ldr	r3, [r3, #16]
 800fc8c:	69ba      	ldr	r2, [r7, #24]
 800fc8e:	0151      	lsls	r1, r2, #5
 800fc90:	69fa      	ldr	r2, [r7, #28]
 800fc92:	440a      	add	r2, r1
 800fc94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fc98:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800fc9c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800fca0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800fca2:	68bb      	ldr	r3, [r7, #8]
 800fca4:	695b      	ldr	r3, [r3, #20]
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d126      	bne.n	800fcf8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800fcaa:	69bb      	ldr	r3, [r7, #24]
 800fcac:	015a      	lsls	r2, r3, #5
 800fcae:	69fb      	ldr	r3, [r7, #28]
 800fcb0:	4413      	add	r3, r2
 800fcb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fcb6:	691a      	ldr	r2, [r3, #16]
 800fcb8:	68bb      	ldr	r3, [r7, #8]
 800fcba:	689b      	ldr	r3, [r3, #8]
 800fcbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fcc0:	69b9      	ldr	r1, [r7, #24]
 800fcc2:	0148      	lsls	r0, r1, #5
 800fcc4:	69f9      	ldr	r1, [r7, #28]
 800fcc6:	4401      	add	r1, r0
 800fcc8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800fccc:	4313      	orrs	r3, r2
 800fcce:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800fcd0:	69bb      	ldr	r3, [r7, #24]
 800fcd2:	015a      	lsls	r2, r3, #5
 800fcd4:	69fb      	ldr	r3, [r7, #28]
 800fcd6:	4413      	add	r3, r2
 800fcd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fcdc:	691b      	ldr	r3, [r3, #16]
 800fcde:	69ba      	ldr	r2, [r7, #24]
 800fce0:	0151      	lsls	r1, r2, #5
 800fce2:	69fa      	ldr	r2, [r7, #28]
 800fce4:	440a      	add	r2, r1
 800fce6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fcea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fcee:	6113      	str	r3, [r2, #16]
 800fcf0:	e036      	b.n	800fd60 <USB_EPStartXfer+0x3dc>
 800fcf2:	bf00      	nop
 800fcf4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800fcf8:	68bb      	ldr	r3, [r7, #8]
 800fcfa:	695a      	ldr	r2, [r3, #20]
 800fcfc:	68bb      	ldr	r3, [r7, #8]
 800fcfe:	689b      	ldr	r3, [r3, #8]
 800fd00:	4413      	add	r3, r2
 800fd02:	1e5a      	subs	r2, r3, #1
 800fd04:	68bb      	ldr	r3, [r7, #8]
 800fd06:	689b      	ldr	r3, [r3, #8]
 800fd08:	fbb2 f3f3 	udiv	r3, r2, r3
 800fd0c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800fd0e:	69bb      	ldr	r3, [r7, #24]
 800fd10:	015a      	lsls	r2, r3, #5
 800fd12:	69fb      	ldr	r3, [r7, #28]
 800fd14:	4413      	add	r3, r2
 800fd16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd1a:	691a      	ldr	r2, [r3, #16]
 800fd1c:	8afb      	ldrh	r3, [r7, #22]
 800fd1e:	04d9      	lsls	r1, r3, #19
 800fd20:	4b39      	ldr	r3, [pc, #228]	; (800fe08 <USB_EPStartXfer+0x484>)
 800fd22:	400b      	ands	r3, r1
 800fd24:	69b9      	ldr	r1, [r7, #24]
 800fd26:	0148      	lsls	r0, r1, #5
 800fd28:	69f9      	ldr	r1, [r7, #28]
 800fd2a:	4401      	add	r1, r0
 800fd2c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800fd30:	4313      	orrs	r3, r2
 800fd32:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800fd34:	69bb      	ldr	r3, [r7, #24]
 800fd36:	015a      	lsls	r2, r3, #5
 800fd38:	69fb      	ldr	r3, [r7, #28]
 800fd3a:	4413      	add	r3, r2
 800fd3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd40:	691a      	ldr	r2, [r3, #16]
 800fd42:	68bb      	ldr	r3, [r7, #8]
 800fd44:	689b      	ldr	r3, [r3, #8]
 800fd46:	8af9      	ldrh	r1, [r7, #22]
 800fd48:	fb01 f303 	mul.w	r3, r1, r3
 800fd4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fd50:	69b9      	ldr	r1, [r7, #24]
 800fd52:	0148      	lsls	r0, r1, #5
 800fd54:	69f9      	ldr	r1, [r7, #28]
 800fd56:	4401      	add	r1, r0
 800fd58:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800fd5c:	4313      	orrs	r3, r2
 800fd5e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800fd60:	79fb      	ldrb	r3, [r7, #7]
 800fd62:	2b01      	cmp	r3, #1
 800fd64:	d10d      	bne.n	800fd82 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800fd66:	68bb      	ldr	r3, [r7, #8]
 800fd68:	68db      	ldr	r3, [r3, #12]
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d009      	beq.n	800fd82 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800fd6e:	68bb      	ldr	r3, [r7, #8]
 800fd70:	68d9      	ldr	r1, [r3, #12]
 800fd72:	69bb      	ldr	r3, [r7, #24]
 800fd74:	015a      	lsls	r2, r3, #5
 800fd76:	69fb      	ldr	r3, [r7, #28]
 800fd78:	4413      	add	r3, r2
 800fd7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd7e:	460a      	mov	r2, r1
 800fd80:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800fd82:	68bb      	ldr	r3, [r7, #8]
 800fd84:	78db      	ldrb	r3, [r3, #3]
 800fd86:	2b01      	cmp	r3, #1
 800fd88:	d128      	bne.n	800fddc <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800fd8a:	69fb      	ldr	r3, [r7, #28]
 800fd8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd90:	689b      	ldr	r3, [r3, #8]
 800fd92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d110      	bne.n	800fdbc <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800fd9a:	69bb      	ldr	r3, [r7, #24]
 800fd9c:	015a      	lsls	r2, r3, #5
 800fd9e:	69fb      	ldr	r3, [r7, #28]
 800fda0:	4413      	add	r3, r2
 800fda2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	69ba      	ldr	r2, [r7, #24]
 800fdaa:	0151      	lsls	r1, r2, #5
 800fdac:	69fa      	ldr	r2, [r7, #28]
 800fdae:	440a      	add	r2, r1
 800fdb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fdb4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800fdb8:	6013      	str	r3, [r2, #0]
 800fdba:	e00f      	b.n	800fddc <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800fdbc:	69bb      	ldr	r3, [r7, #24]
 800fdbe:	015a      	lsls	r2, r3, #5
 800fdc0:	69fb      	ldr	r3, [r7, #28]
 800fdc2:	4413      	add	r3, r2
 800fdc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	69ba      	ldr	r2, [r7, #24]
 800fdcc:	0151      	lsls	r1, r2, #5
 800fdce:	69fa      	ldr	r2, [r7, #28]
 800fdd0:	440a      	add	r2, r1
 800fdd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fdd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fdda:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800fddc:	69bb      	ldr	r3, [r7, #24]
 800fdde:	015a      	lsls	r2, r3, #5
 800fde0:	69fb      	ldr	r3, [r7, #28]
 800fde2:	4413      	add	r3, r2
 800fde4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	69ba      	ldr	r2, [r7, #24]
 800fdec:	0151      	lsls	r1, r2, #5
 800fdee:	69fa      	ldr	r2, [r7, #28]
 800fdf0:	440a      	add	r2, r1
 800fdf2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fdf6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fdfa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800fdfc:	2300      	movs	r3, #0
}
 800fdfe:	4618      	mov	r0, r3
 800fe00:	3720      	adds	r7, #32
 800fe02:	46bd      	mov	sp, r7
 800fe04:	bd80      	pop	{r7, pc}
 800fe06:	bf00      	nop
 800fe08:	1ff80000 	.word	0x1ff80000

0800fe0c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800fe0c:	b480      	push	{r7}
 800fe0e:	b087      	sub	sp, #28
 800fe10:	af00      	add	r7, sp, #0
 800fe12:	60f8      	str	r0, [r7, #12]
 800fe14:	60b9      	str	r1, [r7, #8]
 800fe16:	4613      	mov	r3, r2
 800fe18:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800fe1e:	68bb      	ldr	r3, [r7, #8]
 800fe20:	781b      	ldrb	r3, [r3, #0]
 800fe22:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800fe24:	68bb      	ldr	r3, [r7, #8]
 800fe26:	785b      	ldrb	r3, [r3, #1]
 800fe28:	2b01      	cmp	r3, #1
 800fe2a:	f040 80cd 	bne.w	800ffc8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800fe2e:	68bb      	ldr	r3, [r7, #8]
 800fe30:	695b      	ldr	r3, [r3, #20]
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d132      	bne.n	800fe9c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800fe36:	693b      	ldr	r3, [r7, #16]
 800fe38:	015a      	lsls	r2, r3, #5
 800fe3a:	697b      	ldr	r3, [r7, #20]
 800fe3c:	4413      	add	r3, r2
 800fe3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe42:	691b      	ldr	r3, [r3, #16]
 800fe44:	693a      	ldr	r2, [r7, #16]
 800fe46:	0151      	lsls	r1, r2, #5
 800fe48:	697a      	ldr	r2, [r7, #20]
 800fe4a:	440a      	add	r2, r1
 800fe4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fe50:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800fe54:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800fe58:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800fe5a:	693b      	ldr	r3, [r7, #16]
 800fe5c:	015a      	lsls	r2, r3, #5
 800fe5e:	697b      	ldr	r3, [r7, #20]
 800fe60:	4413      	add	r3, r2
 800fe62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe66:	691b      	ldr	r3, [r3, #16]
 800fe68:	693a      	ldr	r2, [r7, #16]
 800fe6a:	0151      	lsls	r1, r2, #5
 800fe6c:	697a      	ldr	r2, [r7, #20]
 800fe6e:	440a      	add	r2, r1
 800fe70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fe74:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fe78:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800fe7a:	693b      	ldr	r3, [r7, #16]
 800fe7c:	015a      	lsls	r2, r3, #5
 800fe7e:	697b      	ldr	r3, [r7, #20]
 800fe80:	4413      	add	r3, r2
 800fe82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe86:	691b      	ldr	r3, [r3, #16]
 800fe88:	693a      	ldr	r2, [r7, #16]
 800fe8a:	0151      	lsls	r1, r2, #5
 800fe8c:	697a      	ldr	r2, [r7, #20]
 800fe8e:	440a      	add	r2, r1
 800fe90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fe94:	0cdb      	lsrs	r3, r3, #19
 800fe96:	04db      	lsls	r3, r3, #19
 800fe98:	6113      	str	r3, [r2, #16]
 800fe9a:	e04e      	b.n	800ff3a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800fe9c:	693b      	ldr	r3, [r7, #16]
 800fe9e:	015a      	lsls	r2, r3, #5
 800fea0:	697b      	ldr	r3, [r7, #20]
 800fea2:	4413      	add	r3, r2
 800fea4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fea8:	691b      	ldr	r3, [r3, #16]
 800feaa:	693a      	ldr	r2, [r7, #16]
 800feac:	0151      	lsls	r1, r2, #5
 800feae:	697a      	ldr	r2, [r7, #20]
 800feb0:	440a      	add	r2, r1
 800feb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800feb6:	0cdb      	lsrs	r3, r3, #19
 800feb8:	04db      	lsls	r3, r3, #19
 800feba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800febc:	693b      	ldr	r3, [r7, #16]
 800febe:	015a      	lsls	r2, r3, #5
 800fec0:	697b      	ldr	r3, [r7, #20]
 800fec2:	4413      	add	r3, r2
 800fec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fec8:	691b      	ldr	r3, [r3, #16]
 800feca:	693a      	ldr	r2, [r7, #16]
 800fecc:	0151      	lsls	r1, r2, #5
 800fece:	697a      	ldr	r2, [r7, #20]
 800fed0:	440a      	add	r2, r1
 800fed2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fed6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800feda:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800fede:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800fee0:	68bb      	ldr	r3, [r7, #8]
 800fee2:	695a      	ldr	r2, [r3, #20]
 800fee4:	68bb      	ldr	r3, [r7, #8]
 800fee6:	689b      	ldr	r3, [r3, #8]
 800fee8:	429a      	cmp	r2, r3
 800feea:	d903      	bls.n	800fef4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800feec:	68bb      	ldr	r3, [r7, #8]
 800feee:	689a      	ldr	r2, [r3, #8]
 800fef0:	68bb      	ldr	r3, [r7, #8]
 800fef2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800fef4:	693b      	ldr	r3, [r7, #16]
 800fef6:	015a      	lsls	r2, r3, #5
 800fef8:	697b      	ldr	r3, [r7, #20]
 800fefa:	4413      	add	r3, r2
 800fefc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff00:	691b      	ldr	r3, [r3, #16]
 800ff02:	693a      	ldr	r2, [r7, #16]
 800ff04:	0151      	lsls	r1, r2, #5
 800ff06:	697a      	ldr	r2, [r7, #20]
 800ff08:	440a      	add	r2, r1
 800ff0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ff0e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ff12:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ff14:	693b      	ldr	r3, [r7, #16]
 800ff16:	015a      	lsls	r2, r3, #5
 800ff18:	697b      	ldr	r3, [r7, #20]
 800ff1a:	4413      	add	r3, r2
 800ff1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff20:	691a      	ldr	r2, [r3, #16]
 800ff22:	68bb      	ldr	r3, [r7, #8]
 800ff24:	695b      	ldr	r3, [r3, #20]
 800ff26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ff2a:	6939      	ldr	r1, [r7, #16]
 800ff2c:	0148      	lsls	r0, r1, #5
 800ff2e:	6979      	ldr	r1, [r7, #20]
 800ff30:	4401      	add	r1, r0
 800ff32:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ff36:	4313      	orrs	r3, r2
 800ff38:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ff3a:	79fb      	ldrb	r3, [r7, #7]
 800ff3c:	2b01      	cmp	r3, #1
 800ff3e:	d11e      	bne.n	800ff7e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ff40:	68bb      	ldr	r3, [r7, #8]
 800ff42:	691b      	ldr	r3, [r3, #16]
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d009      	beq.n	800ff5c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ff48:	693b      	ldr	r3, [r7, #16]
 800ff4a:	015a      	lsls	r2, r3, #5
 800ff4c:	697b      	ldr	r3, [r7, #20]
 800ff4e:	4413      	add	r3, r2
 800ff50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff54:	461a      	mov	r2, r3
 800ff56:	68bb      	ldr	r3, [r7, #8]
 800ff58:	691b      	ldr	r3, [r3, #16]
 800ff5a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ff5c:	693b      	ldr	r3, [r7, #16]
 800ff5e:	015a      	lsls	r2, r3, #5
 800ff60:	697b      	ldr	r3, [r7, #20]
 800ff62:	4413      	add	r3, r2
 800ff64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	693a      	ldr	r2, [r7, #16]
 800ff6c:	0151      	lsls	r1, r2, #5
 800ff6e:	697a      	ldr	r2, [r7, #20]
 800ff70:	440a      	add	r2, r1
 800ff72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ff76:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ff7a:	6013      	str	r3, [r2, #0]
 800ff7c:	e092      	b.n	80100a4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ff7e:	693b      	ldr	r3, [r7, #16]
 800ff80:	015a      	lsls	r2, r3, #5
 800ff82:	697b      	ldr	r3, [r7, #20]
 800ff84:	4413      	add	r3, r2
 800ff86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	693a      	ldr	r2, [r7, #16]
 800ff8e:	0151      	lsls	r1, r2, #5
 800ff90:	697a      	ldr	r2, [r7, #20]
 800ff92:	440a      	add	r2, r1
 800ff94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ff98:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ff9c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800ff9e:	68bb      	ldr	r3, [r7, #8]
 800ffa0:	695b      	ldr	r3, [r3, #20]
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d07e      	beq.n	80100a4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ffa6:	697b      	ldr	r3, [r7, #20]
 800ffa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ffac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ffae:	68bb      	ldr	r3, [r7, #8]
 800ffb0:	781b      	ldrb	r3, [r3, #0]
 800ffb2:	f003 030f 	and.w	r3, r3, #15
 800ffb6:	2101      	movs	r1, #1
 800ffb8:	fa01 f303 	lsl.w	r3, r1, r3
 800ffbc:	6979      	ldr	r1, [r7, #20]
 800ffbe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ffc2:	4313      	orrs	r3, r2
 800ffc4:	634b      	str	r3, [r1, #52]	; 0x34
 800ffc6:	e06d      	b.n	80100a4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ffc8:	693b      	ldr	r3, [r7, #16]
 800ffca:	015a      	lsls	r2, r3, #5
 800ffcc:	697b      	ldr	r3, [r7, #20]
 800ffce:	4413      	add	r3, r2
 800ffd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ffd4:	691b      	ldr	r3, [r3, #16]
 800ffd6:	693a      	ldr	r2, [r7, #16]
 800ffd8:	0151      	lsls	r1, r2, #5
 800ffda:	697a      	ldr	r2, [r7, #20]
 800ffdc:	440a      	add	r2, r1
 800ffde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ffe2:	0cdb      	lsrs	r3, r3, #19
 800ffe4:	04db      	lsls	r3, r3, #19
 800ffe6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ffe8:	693b      	ldr	r3, [r7, #16]
 800ffea:	015a      	lsls	r2, r3, #5
 800ffec:	697b      	ldr	r3, [r7, #20]
 800ffee:	4413      	add	r3, r2
 800fff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fff4:	691b      	ldr	r3, [r3, #16]
 800fff6:	693a      	ldr	r2, [r7, #16]
 800fff8:	0151      	lsls	r1, r2, #5
 800fffa:	697a      	ldr	r2, [r7, #20]
 800fffc:	440a      	add	r2, r1
 800fffe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010002:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010006:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801000a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 801000c:	68bb      	ldr	r3, [r7, #8]
 801000e:	695b      	ldr	r3, [r3, #20]
 8010010:	2b00      	cmp	r3, #0
 8010012:	d003      	beq.n	801001c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8010014:	68bb      	ldr	r3, [r7, #8]
 8010016:	689a      	ldr	r2, [r3, #8]
 8010018:	68bb      	ldr	r3, [r7, #8]
 801001a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801001c:	693b      	ldr	r3, [r7, #16]
 801001e:	015a      	lsls	r2, r3, #5
 8010020:	697b      	ldr	r3, [r7, #20]
 8010022:	4413      	add	r3, r2
 8010024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010028:	691b      	ldr	r3, [r3, #16]
 801002a:	693a      	ldr	r2, [r7, #16]
 801002c:	0151      	lsls	r1, r2, #5
 801002e:	697a      	ldr	r2, [r7, #20]
 8010030:	440a      	add	r2, r1
 8010032:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010036:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801003a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 801003c:	693b      	ldr	r3, [r7, #16]
 801003e:	015a      	lsls	r2, r3, #5
 8010040:	697b      	ldr	r3, [r7, #20]
 8010042:	4413      	add	r3, r2
 8010044:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010048:	691a      	ldr	r2, [r3, #16]
 801004a:	68bb      	ldr	r3, [r7, #8]
 801004c:	689b      	ldr	r3, [r3, #8]
 801004e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010052:	6939      	ldr	r1, [r7, #16]
 8010054:	0148      	lsls	r0, r1, #5
 8010056:	6979      	ldr	r1, [r7, #20]
 8010058:	4401      	add	r1, r0
 801005a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801005e:	4313      	orrs	r3, r2
 8010060:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8010062:	79fb      	ldrb	r3, [r7, #7]
 8010064:	2b01      	cmp	r3, #1
 8010066:	d10d      	bne.n	8010084 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8010068:	68bb      	ldr	r3, [r7, #8]
 801006a:	68db      	ldr	r3, [r3, #12]
 801006c:	2b00      	cmp	r3, #0
 801006e:	d009      	beq.n	8010084 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8010070:	68bb      	ldr	r3, [r7, #8]
 8010072:	68d9      	ldr	r1, [r3, #12]
 8010074:	693b      	ldr	r3, [r7, #16]
 8010076:	015a      	lsls	r2, r3, #5
 8010078:	697b      	ldr	r3, [r7, #20]
 801007a:	4413      	add	r3, r2
 801007c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010080:	460a      	mov	r2, r1
 8010082:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8010084:	693b      	ldr	r3, [r7, #16]
 8010086:	015a      	lsls	r2, r3, #5
 8010088:	697b      	ldr	r3, [r7, #20]
 801008a:	4413      	add	r3, r2
 801008c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	693a      	ldr	r2, [r7, #16]
 8010094:	0151      	lsls	r1, r2, #5
 8010096:	697a      	ldr	r2, [r7, #20]
 8010098:	440a      	add	r2, r1
 801009a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801009e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80100a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80100a4:	2300      	movs	r3, #0
}
 80100a6:	4618      	mov	r0, r3
 80100a8:	371c      	adds	r7, #28
 80100aa:	46bd      	mov	sp, r7
 80100ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b0:	4770      	bx	lr

080100b2 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80100b2:	b480      	push	{r7}
 80100b4:	b089      	sub	sp, #36	; 0x24
 80100b6:	af00      	add	r7, sp, #0
 80100b8:	60f8      	str	r0, [r7, #12]
 80100ba:	60b9      	str	r1, [r7, #8]
 80100bc:	4611      	mov	r1, r2
 80100be:	461a      	mov	r2, r3
 80100c0:	460b      	mov	r3, r1
 80100c2:	71fb      	strb	r3, [r7, #7]
 80100c4:	4613      	mov	r3, r2
 80100c6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80100cc:	68bb      	ldr	r3, [r7, #8]
 80100ce:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80100d0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d11a      	bne.n	801010e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80100d8:	88bb      	ldrh	r3, [r7, #4]
 80100da:	3303      	adds	r3, #3
 80100dc:	089b      	lsrs	r3, r3, #2
 80100de:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80100e0:	2300      	movs	r3, #0
 80100e2:	61bb      	str	r3, [r7, #24]
 80100e4:	e00f      	b.n	8010106 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80100e6:	79fb      	ldrb	r3, [r7, #7]
 80100e8:	031a      	lsls	r2, r3, #12
 80100ea:	697b      	ldr	r3, [r7, #20]
 80100ec:	4413      	add	r3, r2
 80100ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80100f2:	461a      	mov	r2, r3
 80100f4:	69fb      	ldr	r3, [r7, #28]
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	6013      	str	r3, [r2, #0]
      pSrc++;
 80100fa:	69fb      	ldr	r3, [r7, #28]
 80100fc:	3304      	adds	r3, #4
 80100fe:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8010100:	69bb      	ldr	r3, [r7, #24]
 8010102:	3301      	adds	r3, #1
 8010104:	61bb      	str	r3, [r7, #24]
 8010106:	69ba      	ldr	r2, [r7, #24]
 8010108:	693b      	ldr	r3, [r7, #16]
 801010a:	429a      	cmp	r2, r3
 801010c:	d3eb      	bcc.n	80100e6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801010e:	2300      	movs	r3, #0
}
 8010110:	4618      	mov	r0, r3
 8010112:	3724      	adds	r7, #36	; 0x24
 8010114:	46bd      	mov	sp, r7
 8010116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801011a:	4770      	bx	lr

0801011c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 801011c:	b480      	push	{r7}
 801011e:	b089      	sub	sp, #36	; 0x24
 8010120:	af00      	add	r7, sp, #0
 8010122:	60f8      	str	r0, [r7, #12]
 8010124:	60b9      	str	r1, [r7, #8]
 8010126:	4613      	mov	r3, r2
 8010128:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 801012e:	68bb      	ldr	r3, [r7, #8]
 8010130:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8010132:	88fb      	ldrh	r3, [r7, #6]
 8010134:	3303      	adds	r3, #3
 8010136:	089b      	lsrs	r3, r3, #2
 8010138:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 801013a:	2300      	movs	r3, #0
 801013c:	61bb      	str	r3, [r7, #24]
 801013e:	e00b      	b.n	8010158 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8010140:	697b      	ldr	r3, [r7, #20]
 8010142:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010146:	681a      	ldr	r2, [r3, #0]
 8010148:	69fb      	ldr	r3, [r7, #28]
 801014a:	601a      	str	r2, [r3, #0]
    pDest++;
 801014c:	69fb      	ldr	r3, [r7, #28]
 801014e:	3304      	adds	r3, #4
 8010150:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8010152:	69bb      	ldr	r3, [r7, #24]
 8010154:	3301      	adds	r3, #1
 8010156:	61bb      	str	r3, [r7, #24]
 8010158:	69ba      	ldr	r2, [r7, #24]
 801015a:	693b      	ldr	r3, [r7, #16]
 801015c:	429a      	cmp	r2, r3
 801015e:	d3ef      	bcc.n	8010140 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8010160:	69fb      	ldr	r3, [r7, #28]
}
 8010162:	4618      	mov	r0, r3
 8010164:	3724      	adds	r7, #36	; 0x24
 8010166:	46bd      	mov	sp, r7
 8010168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801016c:	4770      	bx	lr

0801016e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801016e:	b480      	push	{r7}
 8010170:	b085      	sub	sp, #20
 8010172:	af00      	add	r7, sp, #0
 8010174:	6078      	str	r0, [r7, #4]
 8010176:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801017c:	683b      	ldr	r3, [r7, #0]
 801017e:	781b      	ldrb	r3, [r3, #0]
 8010180:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010182:	683b      	ldr	r3, [r7, #0]
 8010184:	785b      	ldrb	r3, [r3, #1]
 8010186:	2b01      	cmp	r3, #1
 8010188:	d12c      	bne.n	80101e4 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 801018a:	68bb      	ldr	r3, [r7, #8]
 801018c:	015a      	lsls	r2, r3, #5
 801018e:	68fb      	ldr	r3, [r7, #12]
 8010190:	4413      	add	r3, r2
 8010192:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	2b00      	cmp	r3, #0
 801019a:	db12      	blt.n	80101c2 <USB_EPSetStall+0x54>
 801019c:	68bb      	ldr	r3, [r7, #8]
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d00f      	beq.n	80101c2 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80101a2:	68bb      	ldr	r3, [r7, #8]
 80101a4:	015a      	lsls	r2, r3, #5
 80101a6:	68fb      	ldr	r3, [r7, #12]
 80101a8:	4413      	add	r3, r2
 80101aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	68ba      	ldr	r2, [r7, #8]
 80101b2:	0151      	lsls	r1, r2, #5
 80101b4:	68fa      	ldr	r2, [r7, #12]
 80101b6:	440a      	add	r2, r1
 80101b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80101bc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80101c0:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80101c2:	68bb      	ldr	r3, [r7, #8]
 80101c4:	015a      	lsls	r2, r3, #5
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	4413      	add	r3, r2
 80101ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	68ba      	ldr	r2, [r7, #8]
 80101d2:	0151      	lsls	r1, r2, #5
 80101d4:	68fa      	ldr	r2, [r7, #12]
 80101d6:	440a      	add	r2, r1
 80101d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80101dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80101e0:	6013      	str	r3, [r2, #0]
 80101e2:	e02b      	b.n	801023c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80101e4:	68bb      	ldr	r3, [r7, #8]
 80101e6:	015a      	lsls	r2, r3, #5
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	4413      	add	r3, r2
 80101ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	db12      	blt.n	801021c <USB_EPSetStall+0xae>
 80101f6:	68bb      	ldr	r3, [r7, #8]
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d00f      	beq.n	801021c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80101fc:	68bb      	ldr	r3, [r7, #8]
 80101fe:	015a      	lsls	r2, r3, #5
 8010200:	68fb      	ldr	r3, [r7, #12]
 8010202:	4413      	add	r3, r2
 8010204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	68ba      	ldr	r2, [r7, #8]
 801020c:	0151      	lsls	r1, r2, #5
 801020e:	68fa      	ldr	r2, [r7, #12]
 8010210:	440a      	add	r2, r1
 8010212:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010216:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801021a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801021c:	68bb      	ldr	r3, [r7, #8]
 801021e:	015a      	lsls	r2, r3, #5
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	4413      	add	r3, r2
 8010224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	68ba      	ldr	r2, [r7, #8]
 801022c:	0151      	lsls	r1, r2, #5
 801022e:	68fa      	ldr	r2, [r7, #12]
 8010230:	440a      	add	r2, r1
 8010232:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010236:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801023a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801023c:	2300      	movs	r3, #0
}
 801023e:	4618      	mov	r0, r3
 8010240:	3714      	adds	r7, #20
 8010242:	46bd      	mov	sp, r7
 8010244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010248:	4770      	bx	lr

0801024a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801024a:	b480      	push	{r7}
 801024c:	b085      	sub	sp, #20
 801024e:	af00      	add	r7, sp, #0
 8010250:	6078      	str	r0, [r7, #4]
 8010252:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010258:	683b      	ldr	r3, [r7, #0]
 801025a:	781b      	ldrb	r3, [r3, #0]
 801025c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801025e:	683b      	ldr	r3, [r7, #0]
 8010260:	785b      	ldrb	r3, [r3, #1]
 8010262:	2b01      	cmp	r3, #1
 8010264:	d128      	bne.n	80102b8 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8010266:	68bb      	ldr	r3, [r7, #8]
 8010268:	015a      	lsls	r2, r3, #5
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	4413      	add	r3, r2
 801026e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	68ba      	ldr	r2, [r7, #8]
 8010276:	0151      	lsls	r1, r2, #5
 8010278:	68fa      	ldr	r2, [r7, #12]
 801027a:	440a      	add	r2, r1
 801027c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010280:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010284:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010286:	683b      	ldr	r3, [r7, #0]
 8010288:	78db      	ldrb	r3, [r3, #3]
 801028a:	2b03      	cmp	r3, #3
 801028c:	d003      	beq.n	8010296 <USB_EPClearStall+0x4c>
 801028e:	683b      	ldr	r3, [r7, #0]
 8010290:	78db      	ldrb	r3, [r3, #3]
 8010292:	2b02      	cmp	r3, #2
 8010294:	d138      	bne.n	8010308 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010296:	68bb      	ldr	r3, [r7, #8]
 8010298:	015a      	lsls	r2, r3, #5
 801029a:	68fb      	ldr	r3, [r7, #12]
 801029c:	4413      	add	r3, r2
 801029e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80102a2:	681b      	ldr	r3, [r3, #0]
 80102a4:	68ba      	ldr	r2, [r7, #8]
 80102a6:	0151      	lsls	r1, r2, #5
 80102a8:	68fa      	ldr	r2, [r7, #12]
 80102aa:	440a      	add	r2, r1
 80102ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80102b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80102b4:	6013      	str	r3, [r2, #0]
 80102b6:	e027      	b.n	8010308 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80102b8:	68bb      	ldr	r3, [r7, #8]
 80102ba:	015a      	lsls	r2, r3, #5
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	4413      	add	r3, r2
 80102c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	68ba      	ldr	r2, [r7, #8]
 80102c8:	0151      	lsls	r1, r2, #5
 80102ca:	68fa      	ldr	r2, [r7, #12]
 80102cc:	440a      	add	r2, r1
 80102ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80102d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80102d6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80102d8:	683b      	ldr	r3, [r7, #0]
 80102da:	78db      	ldrb	r3, [r3, #3]
 80102dc:	2b03      	cmp	r3, #3
 80102de:	d003      	beq.n	80102e8 <USB_EPClearStall+0x9e>
 80102e0:	683b      	ldr	r3, [r7, #0]
 80102e2:	78db      	ldrb	r3, [r3, #3]
 80102e4:	2b02      	cmp	r3, #2
 80102e6:	d10f      	bne.n	8010308 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80102e8:	68bb      	ldr	r3, [r7, #8]
 80102ea:	015a      	lsls	r2, r3, #5
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	4413      	add	r3, r2
 80102f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	68ba      	ldr	r2, [r7, #8]
 80102f8:	0151      	lsls	r1, r2, #5
 80102fa:	68fa      	ldr	r2, [r7, #12]
 80102fc:	440a      	add	r2, r1
 80102fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010302:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010306:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8010308:	2300      	movs	r3, #0
}
 801030a:	4618      	mov	r0, r3
 801030c:	3714      	adds	r7, #20
 801030e:	46bd      	mov	sp, r7
 8010310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010314:	4770      	bx	lr

08010316 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8010316:	b480      	push	{r7}
 8010318:	b085      	sub	sp, #20
 801031a:	af00      	add	r7, sp, #0
 801031c:	6078      	str	r0, [r7, #4]
 801031e:	460b      	mov	r3, r1
 8010320:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	68fa      	ldr	r2, [r7, #12]
 8010330:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010334:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8010338:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010340:	681a      	ldr	r2, [r3, #0]
 8010342:	78fb      	ldrb	r3, [r7, #3]
 8010344:	011b      	lsls	r3, r3, #4
 8010346:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 801034a:	68f9      	ldr	r1, [r7, #12]
 801034c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010350:	4313      	orrs	r3, r2
 8010352:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8010354:	2300      	movs	r3, #0
}
 8010356:	4618      	mov	r0, r3
 8010358:	3714      	adds	r7, #20
 801035a:	46bd      	mov	sp, r7
 801035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010360:	4770      	bx	lr

08010362 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8010362:	b580      	push	{r7, lr}
 8010364:	b084      	sub	sp, #16
 8010366:	af00      	add	r7, sp, #0
 8010368:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 801036e:	68fb      	ldr	r3, [r7, #12]
 8010370:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010374:	685b      	ldr	r3, [r3, #4]
 8010376:	68fa      	ldr	r2, [r7, #12]
 8010378:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801037c:	f023 0302 	bic.w	r3, r3, #2
 8010380:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8010382:	2003      	movs	r0, #3
 8010384:	f7fa ff54 	bl	800b230 <HAL_Delay>

  return HAL_OK;
 8010388:	2300      	movs	r3, #0
}
 801038a:	4618      	mov	r0, r3
 801038c:	3710      	adds	r7, #16
 801038e:	46bd      	mov	sp, r7
 8010390:	bd80      	pop	{r7, pc}

08010392 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8010392:	b580      	push	{r7, lr}
 8010394:	b084      	sub	sp, #16
 8010396:	af00      	add	r7, sp, #0
 8010398:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80103a4:	685b      	ldr	r3, [r3, #4]
 80103a6:	68fa      	ldr	r2, [r7, #12]
 80103a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80103ac:	f043 0302 	orr.w	r3, r3, #2
 80103b0:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80103b2:	2003      	movs	r0, #3
 80103b4:	f7fa ff3c 	bl	800b230 <HAL_Delay>

  return HAL_OK;
 80103b8:	2300      	movs	r3, #0
}
 80103ba:	4618      	mov	r0, r3
 80103bc:	3710      	adds	r7, #16
 80103be:	46bd      	mov	sp, r7
 80103c0:	bd80      	pop	{r7, pc}

080103c2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80103c2:	b480      	push	{r7}
 80103c4:	b085      	sub	sp, #20
 80103c6:	af00      	add	r7, sp, #0
 80103c8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	695b      	ldr	r3, [r3, #20]
 80103ce:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	699b      	ldr	r3, [r3, #24]
 80103d4:	68fa      	ldr	r2, [r7, #12]
 80103d6:	4013      	ands	r3, r2
 80103d8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80103da:	68fb      	ldr	r3, [r7, #12]
}
 80103dc:	4618      	mov	r0, r3
 80103de:	3714      	adds	r7, #20
 80103e0:	46bd      	mov	sp, r7
 80103e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e6:	4770      	bx	lr

080103e8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80103e8:	b480      	push	{r7}
 80103ea:	b085      	sub	sp, #20
 80103ec:	af00      	add	r7, sp, #0
 80103ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80103f4:	68fb      	ldr	r3, [r7, #12]
 80103f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80103fa:	699b      	ldr	r3, [r3, #24]
 80103fc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010404:	69db      	ldr	r3, [r3, #28]
 8010406:	68ba      	ldr	r2, [r7, #8]
 8010408:	4013      	ands	r3, r2
 801040a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801040c:	68bb      	ldr	r3, [r7, #8]
 801040e:	0c1b      	lsrs	r3, r3, #16
}
 8010410:	4618      	mov	r0, r3
 8010412:	3714      	adds	r7, #20
 8010414:	46bd      	mov	sp, r7
 8010416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801041a:	4770      	bx	lr

0801041c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801041c:	b480      	push	{r7}
 801041e:	b085      	sub	sp, #20
 8010420:	af00      	add	r7, sp, #0
 8010422:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801042e:	699b      	ldr	r3, [r3, #24]
 8010430:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010438:	69db      	ldr	r3, [r3, #28]
 801043a:	68ba      	ldr	r2, [r7, #8]
 801043c:	4013      	ands	r3, r2
 801043e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8010440:	68bb      	ldr	r3, [r7, #8]
 8010442:	b29b      	uxth	r3, r3
}
 8010444:	4618      	mov	r0, r3
 8010446:	3714      	adds	r7, #20
 8010448:	46bd      	mov	sp, r7
 801044a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801044e:	4770      	bx	lr

08010450 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010450:	b480      	push	{r7}
 8010452:	b085      	sub	sp, #20
 8010454:	af00      	add	r7, sp, #0
 8010456:	6078      	str	r0, [r7, #4]
 8010458:	460b      	mov	r3, r1
 801045a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8010460:	78fb      	ldrb	r3, [r7, #3]
 8010462:	015a      	lsls	r2, r3, #5
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	4413      	add	r3, r2
 8010468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801046c:	689b      	ldr	r3, [r3, #8]
 801046e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010476:	695b      	ldr	r3, [r3, #20]
 8010478:	68ba      	ldr	r2, [r7, #8]
 801047a:	4013      	ands	r3, r2
 801047c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801047e:	68bb      	ldr	r3, [r7, #8]
}
 8010480:	4618      	mov	r0, r3
 8010482:	3714      	adds	r7, #20
 8010484:	46bd      	mov	sp, r7
 8010486:	f85d 7b04 	ldr.w	r7, [sp], #4
 801048a:	4770      	bx	lr

0801048c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801048c:	b480      	push	{r7}
 801048e:	b087      	sub	sp, #28
 8010490:	af00      	add	r7, sp, #0
 8010492:	6078      	str	r0, [r7, #4]
 8010494:	460b      	mov	r3, r1
 8010496:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 801049c:	697b      	ldr	r3, [r7, #20]
 801049e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80104a2:	691b      	ldr	r3, [r3, #16]
 80104a4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80104a6:	697b      	ldr	r3, [r7, #20]
 80104a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80104ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80104ae:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80104b0:	78fb      	ldrb	r3, [r7, #3]
 80104b2:	f003 030f 	and.w	r3, r3, #15
 80104b6:	68fa      	ldr	r2, [r7, #12]
 80104b8:	fa22 f303 	lsr.w	r3, r2, r3
 80104bc:	01db      	lsls	r3, r3, #7
 80104be:	b2db      	uxtb	r3, r3
 80104c0:	693a      	ldr	r2, [r7, #16]
 80104c2:	4313      	orrs	r3, r2
 80104c4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80104c6:	78fb      	ldrb	r3, [r7, #3]
 80104c8:	015a      	lsls	r2, r3, #5
 80104ca:	697b      	ldr	r3, [r7, #20]
 80104cc:	4413      	add	r3, r2
 80104ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80104d2:	689b      	ldr	r3, [r3, #8]
 80104d4:	693a      	ldr	r2, [r7, #16]
 80104d6:	4013      	ands	r3, r2
 80104d8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80104da:	68bb      	ldr	r3, [r7, #8]
}
 80104dc:	4618      	mov	r0, r3
 80104de:	371c      	adds	r7, #28
 80104e0:	46bd      	mov	sp, r7
 80104e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104e6:	4770      	bx	lr

080104e8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80104e8:	b480      	push	{r7}
 80104ea:	b083      	sub	sp, #12
 80104ec:	af00      	add	r7, sp, #0
 80104ee:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	695b      	ldr	r3, [r3, #20]
 80104f4:	f003 0301 	and.w	r3, r3, #1
}
 80104f8:	4618      	mov	r0, r3
 80104fa:	370c      	adds	r7, #12
 80104fc:	46bd      	mov	sp, r7
 80104fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010502:	4770      	bx	lr

08010504 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8010504:	b480      	push	{r7}
 8010506:	b085      	sub	sp, #20
 8010508:	af00      	add	r7, sp, #0
 801050a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	68fa      	ldr	r2, [r7, #12]
 801051a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801051e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8010522:	f023 0307 	bic.w	r3, r3, #7
 8010526:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801052e:	689b      	ldr	r3, [r3, #8]
 8010530:	f003 0306 	and.w	r3, r3, #6
 8010534:	2b04      	cmp	r3, #4
 8010536:	d109      	bne.n	801054c <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	68fa      	ldr	r2, [r7, #12]
 8010542:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010546:	f043 0303 	orr.w	r3, r3, #3
 801054a:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010552:	685b      	ldr	r3, [r3, #4]
 8010554:	68fa      	ldr	r2, [r7, #12]
 8010556:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801055a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801055e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010560:	2300      	movs	r3, #0
}
 8010562:	4618      	mov	r0, r3
 8010564:	3714      	adds	r7, #20
 8010566:	46bd      	mov	sp, r7
 8010568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801056c:	4770      	bx	lr
	...

08010570 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8010570:	b480      	push	{r7}
 8010572:	b087      	sub	sp, #28
 8010574:	af00      	add	r7, sp, #0
 8010576:	60f8      	str	r0, [r7, #12]
 8010578:	460b      	mov	r3, r1
 801057a:	607a      	str	r2, [r7, #4]
 801057c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	333c      	adds	r3, #60	; 0x3c
 8010586:	3304      	adds	r3, #4
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 801058c:	693b      	ldr	r3, [r7, #16]
 801058e:	4a26      	ldr	r2, [pc, #152]	; (8010628 <USB_EP0_OutStart+0xb8>)
 8010590:	4293      	cmp	r3, r2
 8010592:	d90a      	bls.n	80105aa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010594:	697b      	ldr	r3, [r7, #20]
 8010596:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80105a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80105a4:	d101      	bne.n	80105aa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80105a6:	2300      	movs	r3, #0
 80105a8:	e037      	b.n	801061a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80105aa:	697b      	ldr	r3, [r7, #20]
 80105ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80105b0:	461a      	mov	r2, r3
 80105b2:	2300      	movs	r3, #0
 80105b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80105b6:	697b      	ldr	r3, [r7, #20]
 80105b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80105bc:	691b      	ldr	r3, [r3, #16]
 80105be:	697a      	ldr	r2, [r7, #20]
 80105c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80105c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80105c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80105ca:	697b      	ldr	r3, [r7, #20]
 80105cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80105d0:	691b      	ldr	r3, [r3, #16]
 80105d2:	697a      	ldr	r2, [r7, #20]
 80105d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80105d8:	f043 0318 	orr.w	r3, r3, #24
 80105dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80105de:	697b      	ldr	r3, [r7, #20]
 80105e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80105e4:	691b      	ldr	r3, [r3, #16]
 80105e6:	697a      	ldr	r2, [r7, #20]
 80105e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80105ec:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80105f0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80105f2:	7afb      	ldrb	r3, [r7, #11]
 80105f4:	2b01      	cmp	r3, #1
 80105f6:	d10f      	bne.n	8010618 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80105f8:	697b      	ldr	r3, [r7, #20]
 80105fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80105fe:	461a      	mov	r2, r3
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8010604:	697b      	ldr	r3, [r7, #20]
 8010606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	697a      	ldr	r2, [r7, #20]
 801060e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010612:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8010616:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010618:	2300      	movs	r3, #0
}
 801061a:	4618      	mov	r0, r3
 801061c:	371c      	adds	r7, #28
 801061e:	46bd      	mov	sp, r7
 8010620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010624:	4770      	bx	lr
 8010626:	bf00      	nop
 8010628:	4f54300a 	.word	0x4f54300a

0801062c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801062c:	b480      	push	{r7}
 801062e:	b085      	sub	sp, #20
 8010630:	af00      	add	r7, sp, #0
 8010632:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8010634:	2300      	movs	r3, #0
 8010636:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	3301      	adds	r3, #1
 801063c:	60fb      	str	r3, [r7, #12]
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	4a13      	ldr	r2, [pc, #76]	; (8010690 <USB_CoreReset+0x64>)
 8010642:	4293      	cmp	r3, r2
 8010644:	d901      	bls.n	801064a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8010646:	2303      	movs	r3, #3
 8010648:	e01b      	b.n	8010682 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	691b      	ldr	r3, [r3, #16]
 801064e:	2b00      	cmp	r3, #0
 8010650:	daf2      	bge.n	8010638 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8010652:	2300      	movs	r3, #0
 8010654:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	691b      	ldr	r3, [r3, #16]
 801065a:	f043 0201 	orr.w	r2, r3, #1
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8010662:	68fb      	ldr	r3, [r7, #12]
 8010664:	3301      	adds	r3, #1
 8010666:	60fb      	str	r3, [r7, #12]
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	4a09      	ldr	r2, [pc, #36]	; (8010690 <USB_CoreReset+0x64>)
 801066c:	4293      	cmp	r3, r2
 801066e:	d901      	bls.n	8010674 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8010670:	2303      	movs	r3, #3
 8010672:	e006      	b.n	8010682 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	691b      	ldr	r3, [r3, #16]
 8010678:	f003 0301 	and.w	r3, r3, #1
 801067c:	2b01      	cmp	r3, #1
 801067e:	d0f0      	beq.n	8010662 <USB_CoreReset+0x36>

  return HAL_OK;
 8010680:	2300      	movs	r3, #0
}
 8010682:	4618      	mov	r0, r3
 8010684:	3714      	adds	r7, #20
 8010686:	46bd      	mov	sp, r7
 8010688:	f85d 7b04 	ldr.w	r7, [sp], #4
 801068c:	4770      	bx	lr
 801068e:	bf00      	nop
 8010690:	00030d40 	.word	0x00030d40

08010694 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010694:	b580      	push	{r7, lr}
 8010696:	b084      	sub	sp, #16
 8010698:	af00      	add	r7, sp, #0
 801069a:	6078      	str	r0, [r7, #4]
 801069c:	460b      	mov	r3, r1
 801069e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80106a0:	2300      	movs	r3, #0
 80106a2:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	7c1b      	ldrb	r3, [r3, #16]
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d115      	bne.n	80106d8 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80106ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80106b0:	2202      	movs	r2, #2
 80106b2:	2181      	movs	r1, #129	; 0x81
 80106b4:	6878      	ldr	r0, [r7, #4]
 80106b6:	f005 f8a6 	bl	8015806 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	2201      	movs	r2, #1
 80106be:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80106c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80106c4:	2202      	movs	r2, #2
 80106c6:	2101      	movs	r1, #1
 80106c8:	6878      	ldr	r0, [r7, #4]
 80106ca:	f005 f89c 	bl	8015806 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	2201      	movs	r2, #1
 80106d2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 80106d6:	e012      	b.n	80106fe <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80106d8:	2340      	movs	r3, #64	; 0x40
 80106da:	2202      	movs	r2, #2
 80106dc:	2181      	movs	r1, #129	; 0x81
 80106de:	6878      	ldr	r0, [r7, #4]
 80106e0:	f005 f891 	bl	8015806 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	2201      	movs	r2, #1
 80106e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80106ea:	2340      	movs	r3, #64	; 0x40
 80106ec:	2202      	movs	r2, #2
 80106ee:	2101      	movs	r1, #1
 80106f0:	6878      	ldr	r0, [r7, #4]
 80106f2:	f005 f888 	bl	8015806 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	2201      	movs	r2, #1
 80106fa:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80106fe:	2308      	movs	r3, #8
 8010700:	2203      	movs	r2, #3
 8010702:	2182      	movs	r1, #130	; 0x82
 8010704:	6878      	ldr	r0, [r7, #4]
 8010706:	f005 f87e 	bl	8015806 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	2201      	movs	r2, #1
 801070e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8010710:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8010714:	f005 f9f4 	bl	8015b00 <malloc>
 8010718:	4603      	mov	r3, r0
 801071a:	461a      	mov	r2, r3
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010728:	2b00      	cmp	r3, #0
 801072a:	d102      	bne.n	8010732 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 801072c:	2301      	movs	r3, #1
 801072e:	73fb      	strb	r3, [r7, #15]
 8010730:	e026      	b.n	8010780 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010738:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8010744:	68bb      	ldr	r3, [r7, #8]
 8010746:	2200      	movs	r2, #0
 8010748:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 801074c:	68bb      	ldr	r3, [r7, #8]
 801074e:	2200      	movs	r2, #0
 8010750:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	7c1b      	ldrb	r3, [r3, #16]
 8010758:	2b00      	cmp	r3, #0
 801075a:	d109      	bne.n	8010770 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801075c:	68bb      	ldr	r3, [r7, #8]
 801075e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010762:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010766:	2101      	movs	r1, #1
 8010768:	6878      	ldr	r0, [r7, #4]
 801076a:	f005 f93d 	bl	80159e8 <USBD_LL_PrepareReceive>
 801076e:	e007      	b.n	8010780 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010770:	68bb      	ldr	r3, [r7, #8]
 8010772:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010776:	2340      	movs	r3, #64	; 0x40
 8010778:	2101      	movs	r1, #1
 801077a:	6878      	ldr	r0, [r7, #4]
 801077c:	f005 f934 	bl	80159e8 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8010780:	7bfb      	ldrb	r3, [r7, #15]
}
 8010782:	4618      	mov	r0, r3
 8010784:	3710      	adds	r7, #16
 8010786:	46bd      	mov	sp, r7
 8010788:	bd80      	pop	{r7, pc}

0801078a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801078a:	b580      	push	{r7, lr}
 801078c:	b084      	sub	sp, #16
 801078e:	af00      	add	r7, sp, #0
 8010790:	6078      	str	r0, [r7, #4]
 8010792:	460b      	mov	r3, r1
 8010794:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8010796:	2300      	movs	r3, #0
 8010798:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801079a:	2181      	movs	r1, #129	; 0x81
 801079c:	6878      	ldr	r0, [r7, #4]
 801079e:	f005 f858 	bl	8015852 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	2200      	movs	r2, #0
 80107a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80107a8:	2101      	movs	r1, #1
 80107aa:	6878      	ldr	r0, [r7, #4]
 80107ac:	f005 f851 	bl	8015852 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	2200      	movs	r2, #0
 80107b4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80107b8:	2182      	movs	r1, #130	; 0x82
 80107ba:	6878      	ldr	r0, [r7, #4]
 80107bc:	f005 f849 	bl	8015852 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	2200      	movs	r2, #0
 80107c4:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d00e      	beq.n	80107ee <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80107d6:	685b      	ldr	r3, [r3, #4]
 80107d8:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80107e0:	4618      	mov	r0, r3
 80107e2:	f005 f995 	bl	8015b10 <free>
    pdev->pClassData = NULL;
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	2200      	movs	r2, #0
 80107ea:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 80107ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80107f0:	4618      	mov	r0, r3
 80107f2:	3710      	adds	r7, #16
 80107f4:	46bd      	mov	sp, r7
 80107f6:	bd80      	pop	{r7, pc}

080107f8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 80107f8:	b580      	push	{r7, lr}
 80107fa:	b086      	sub	sp, #24
 80107fc:	af00      	add	r7, sp, #0
 80107fe:	6078      	str	r0, [r7, #4]
 8010800:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010808:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 801080a:	2300      	movs	r3, #0
 801080c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 801080e:	2300      	movs	r3, #0
 8010810:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8010812:	2300      	movs	r3, #0
 8010814:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010816:	683b      	ldr	r3, [r7, #0]
 8010818:	781b      	ldrb	r3, [r3, #0]
 801081a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801081e:	2b00      	cmp	r3, #0
 8010820:	d039      	beq.n	8010896 <USBD_CDC_Setup+0x9e>
 8010822:	2b20      	cmp	r3, #32
 8010824:	d17c      	bne.n	8010920 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8010826:	683b      	ldr	r3, [r7, #0]
 8010828:	88db      	ldrh	r3, [r3, #6]
 801082a:	2b00      	cmp	r3, #0
 801082c:	d029      	beq.n	8010882 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 801082e:	683b      	ldr	r3, [r7, #0]
 8010830:	781b      	ldrb	r3, [r3, #0]
 8010832:	b25b      	sxtb	r3, r3
 8010834:	2b00      	cmp	r3, #0
 8010836:	da11      	bge.n	801085c <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801083e:	689b      	ldr	r3, [r3, #8]
 8010840:	683a      	ldr	r2, [r7, #0]
 8010842:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8010844:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010846:	683a      	ldr	r2, [r7, #0]
 8010848:	88d2      	ldrh	r2, [r2, #6]
 801084a:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801084c:	6939      	ldr	r1, [r7, #16]
 801084e:	683b      	ldr	r3, [r7, #0]
 8010850:	88db      	ldrh	r3, [r3, #6]
 8010852:	461a      	mov	r2, r3
 8010854:	6878      	ldr	r0, [r7, #4]
 8010856:	f001 f9c9 	bl	8011bec <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 801085a:	e068      	b.n	801092e <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 801085c:	683b      	ldr	r3, [r7, #0]
 801085e:	785a      	ldrb	r2, [r3, #1]
 8010860:	693b      	ldr	r3, [r7, #16]
 8010862:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8010866:	683b      	ldr	r3, [r7, #0]
 8010868:	88db      	ldrh	r3, [r3, #6]
 801086a:	b2da      	uxtb	r2, r3
 801086c:	693b      	ldr	r3, [r7, #16]
 801086e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8010872:	6939      	ldr	r1, [r7, #16]
 8010874:	683b      	ldr	r3, [r7, #0]
 8010876:	88db      	ldrh	r3, [r3, #6]
 8010878:	461a      	mov	r2, r3
 801087a:	6878      	ldr	r0, [r7, #4]
 801087c:	f001 f9e4 	bl	8011c48 <USBD_CtlPrepareRx>
    break;
 8010880:	e055      	b.n	801092e <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8010888:	689b      	ldr	r3, [r3, #8]
 801088a:	683a      	ldr	r2, [r7, #0]
 801088c:	7850      	ldrb	r0, [r2, #1]
 801088e:	2200      	movs	r2, #0
 8010890:	6839      	ldr	r1, [r7, #0]
 8010892:	4798      	blx	r3
    break;
 8010894:	e04b      	b.n	801092e <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8010896:	683b      	ldr	r3, [r7, #0]
 8010898:	785b      	ldrb	r3, [r3, #1]
 801089a:	2b0a      	cmp	r3, #10
 801089c:	d017      	beq.n	80108ce <USBD_CDC_Setup+0xd6>
 801089e:	2b0b      	cmp	r3, #11
 80108a0:	d029      	beq.n	80108f6 <USBD_CDC_Setup+0xfe>
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d133      	bne.n	801090e <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80108ac:	2b03      	cmp	r3, #3
 80108ae:	d107      	bne.n	80108c0 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 80108b0:	f107 030c 	add.w	r3, r7, #12
 80108b4:	2202      	movs	r2, #2
 80108b6:	4619      	mov	r1, r3
 80108b8:	6878      	ldr	r0, [r7, #4]
 80108ba:	f001 f997 	bl	8011bec <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80108be:	e02e      	b.n	801091e <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 80108c0:	6839      	ldr	r1, [r7, #0]
 80108c2:	6878      	ldr	r0, [r7, #4]
 80108c4:	f001 f927 	bl	8011b16 <USBD_CtlError>
			  ret = USBD_FAIL;
 80108c8:	2302      	movs	r3, #2
 80108ca:	75fb      	strb	r3, [r7, #23]
      break;
 80108cc:	e027      	b.n	801091e <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80108d4:	2b03      	cmp	r3, #3
 80108d6:	d107      	bne.n	80108e8 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 80108d8:	f107 030f 	add.w	r3, r7, #15
 80108dc:	2201      	movs	r2, #1
 80108de:	4619      	mov	r1, r3
 80108e0:	6878      	ldr	r0, [r7, #4]
 80108e2:	f001 f983 	bl	8011bec <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80108e6:	e01a      	b.n	801091e <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 80108e8:	6839      	ldr	r1, [r7, #0]
 80108ea:	6878      	ldr	r0, [r7, #4]
 80108ec:	f001 f913 	bl	8011b16 <USBD_CtlError>
			  ret = USBD_FAIL;
 80108f0:	2302      	movs	r3, #2
 80108f2:	75fb      	strb	r3, [r7, #23]
      break;
 80108f4:	e013      	b.n	801091e <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80108fc:	2b03      	cmp	r3, #3
 80108fe:	d00d      	beq.n	801091c <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 8010900:	6839      	ldr	r1, [r7, #0]
 8010902:	6878      	ldr	r0, [r7, #4]
 8010904:	f001 f907 	bl	8011b16 <USBD_CtlError>
			  ret = USBD_FAIL;
 8010908:	2302      	movs	r3, #2
 801090a:	75fb      	strb	r3, [r7, #23]
      }
      break;
 801090c:	e006      	b.n	801091c <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 801090e:	6839      	ldr	r1, [r7, #0]
 8010910:	6878      	ldr	r0, [r7, #4]
 8010912:	f001 f900 	bl	8011b16 <USBD_CtlError>
      ret = USBD_FAIL;
 8010916:	2302      	movs	r3, #2
 8010918:	75fb      	strb	r3, [r7, #23]
      break;
 801091a:	e000      	b.n	801091e <USBD_CDC_Setup+0x126>
      break;
 801091c:	bf00      	nop
    }
    break;
 801091e:	e006      	b.n	801092e <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 8010920:	6839      	ldr	r1, [r7, #0]
 8010922:	6878      	ldr	r0, [r7, #4]
 8010924:	f001 f8f7 	bl	8011b16 <USBD_CtlError>
    ret = USBD_FAIL;
 8010928:	2302      	movs	r3, #2
 801092a:	75fb      	strb	r3, [r7, #23]
    break;
 801092c:	bf00      	nop
  }

  return ret;
 801092e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010930:	4618      	mov	r0, r3
 8010932:	3718      	adds	r7, #24
 8010934:	46bd      	mov	sp, r7
 8010936:	bd80      	pop	{r7, pc}

08010938 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010938:	b580      	push	{r7, lr}
 801093a:	b084      	sub	sp, #16
 801093c:	af00      	add	r7, sp, #0
 801093e:	6078      	str	r0, [r7, #4]
 8010940:	460b      	mov	r3, r1
 8010942:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 801094a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8010952:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 801095a:	2b00      	cmp	r3, #0
 801095c:	d03a      	beq.n	80109d4 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 801095e:	78fa      	ldrb	r2, [r7, #3]
 8010960:	6879      	ldr	r1, [r7, #4]
 8010962:	4613      	mov	r3, r2
 8010964:	009b      	lsls	r3, r3, #2
 8010966:	4413      	add	r3, r2
 8010968:	009b      	lsls	r3, r3, #2
 801096a:	440b      	add	r3, r1
 801096c:	331c      	adds	r3, #28
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	2b00      	cmp	r3, #0
 8010972:	d029      	beq.n	80109c8 <USBD_CDC_DataIn+0x90>
 8010974:	78fa      	ldrb	r2, [r7, #3]
 8010976:	6879      	ldr	r1, [r7, #4]
 8010978:	4613      	mov	r3, r2
 801097a:	009b      	lsls	r3, r3, #2
 801097c:	4413      	add	r3, r2
 801097e:	009b      	lsls	r3, r3, #2
 8010980:	440b      	add	r3, r1
 8010982:	331c      	adds	r3, #28
 8010984:	681a      	ldr	r2, [r3, #0]
 8010986:	78f9      	ldrb	r1, [r7, #3]
 8010988:	68b8      	ldr	r0, [r7, #8]
 801098a:	460b      	mov	r3, r1
 801098c:	00db      	lsls	r3, r3, #3
 801098e:	1a5b      	subs	r3, r3, r1
 8010990:	009b      	lsls	r3, r3, #2
 8010992:	4403      	add	r3, r0
 8010994:	3344      	adds	r3, #68	; 0x44
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	fbb2 f1f3 	udiv	r1, r2, r3
 801099c:	fb03 f301 	mul.w	r3, r3, r1
 80109a0:	1ad3      	subs	r3, r2, r3
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d110      	bne.n	80109c8 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80109a6:	78fa      	ldrb	r2, [r7, #3]
 80109a8:	6879      	ldr	r1, [r7, #4]
 80109aa:	4613      	mov	r3, r2
 80109ac:	009b      	lsls	r3, r3, #2
 80109ae:	4413      	add	r3, r2
 80109b0:	009b      	lsls	r3, r3, #2
 80109b2:	440b      	add	r3, r1
 80109b4:	331c      	adds	r3, #28
 80109b6:	2200      	movs	r2, #0
 80109b8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 80109ba:	78f9      	ldrb	r1, [r7, #3]
 80109bc:	2300      	movs	r3, #0
 80109be:	2200      	movs	r2, #0
 80109c0:	6878      	ldr	r0, [r7, #4]
 80109c2:	f004 ffee 	bl	80159a2 <USBD_LL_Transmit>
 80109c6:	e003      	b.n	80109d0 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80109c8:	68fb      	ldr	r3, [r7, #12]
 80109ca:	2200      	movs	r2, #0
 80109cc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80109d0:	2300      	movs	r3, #0
 80109d2:	e000      	b.n	80109d6 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80109d4:	2302      	movs	r3, #2
  }
}
 80109d6:	4618      	mov	r0, r3
 80109d8:	3710      	adds	r7, #16
 80109da:	46bd      	mov	sp, r7
 80109dc:	bd80      	pop	{r7, pc}

080109de <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80109de:	b580      	push	{r7, lr}
 80109e0:	b084      	sub	sp, #16
 80109e2:	af00      	add	r7, sp, #0
 80109e4:	6078      	str	r0, [r7, #4]
 80109e6:	460b      	mov	r3, r1
 80109e8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80109f0:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 80109f2:	78fb      	ldrb	r3, [r7, #3]
 80109f4:	4619      	mov	r1, r3
 80109f6:	6878      	ldr	r0, [r7, #4]
 80109f8:	f005 f819 	bl	8015a2e <USBD_LL_GetRxDataSize>
 80109fc:	4602      	mov	r2, r0
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d00d      	beq.n	8010a2a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8010a14:	68db      	ldr	r3, [r3, #12]
 8010a16:	68fa      	ldr	r2, [r7, #12]
 8010a18:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8010a1c:	68fa      	ldr	r2, [r7, #12]
 8010a1e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8010a22:	4611      	mov	r1, r2
 8010a24:	4798      	blx	r3

    return USBD_OK;
 8010a26:	2300      	movs	r3, #0
 8010a28:	e000      	b.n	8010a2c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8010a2a:	2302      	movs	r3, #2
  }
}
 8010a2c:	4618      	mov	r0, r3
 8010a2e:	3710      	adds	r7, #16
 8010a30:	46bd      	mov	sp, r7
 8010a32:	bd80      	pop	{r7, pc}

08010a34 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8010a34:	b580      	push	{r7, lr}
 8010a36:	b084      	sub	sp, #16
 8010a38:	af00      	add	r7, sp, #0
 8010a3a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010a42:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d015      	beq.n	8010a7a <USBD_CDC_EP0_RxReady+0x46>
 8010a4e:	68fb      	ldr	r3, [r7, #12]
 8010a50:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8010a54:	2bff      	cmp	r3, #255	; 0xff
 8010a56:	d010      	beq.n	8010a7a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8010a5e:	689b      	ldr	r3, [r3, #8]
 8010a60:	68fa      	ldr	r2, [r7, #12]
 8010a62:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8010a66:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8010a68:	68fa      	ldr	r2, [r7, #12]
 8010a6a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8010a6e:	b292      	uxth	r2, r2
 8010a70:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	22ff      	movs	r2, #255	; 0xff
 8010a76:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8010a7a:	2300      	movs	r3, #0
}
 8010a7c:	4618      	mov	r0, r3
 8010a7e:	3710      	adds	r7, #16
 8010a80:	46bd      	mov	sp, r7
 8010a82:	bd80      	pop	{r7, pc}

08010a84 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8010a84:	b480      	push	{r7}
 8010a86:	b083      	sub	sp, #12
 8010a88:	af00      	add	r7, sp, #0
 8010a8a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	2243      	movs	r2, #67	; 0x43
 8010a90:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8010a92:	4b03      	ldr	r3, [pc, #12]	; (8010aa0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8010a94:	4618      	mov	r0, r3
 8010a96:	370c      	adds	r7, #12
 8010a98:	46bd      	mov	sp, r7
 8010a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a9e:	4770      	bx	lr
 8010aa0:	20000d74 	.word	0x20000d74

08010aa4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8010aa4:	b480      	push	{r7}
 8010aa6:	b083      	sub	sp, #12
 8010aa8:	af00      	add	r7, sp, #0
 8010aaa:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	2243      	movs	r2, #67	; 0x43
 8010ab0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8010ab2:	4b03      	ldr	r3, [pc, #12]	; (8010ac0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8010ab4:	4618      	mov	r0, r3
 8010ab6:	370c      	adds	r7, #12
 8010ab8:	46bd      	mov	sp, r7
 8010aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010abe:	4770      	bx	lr
 8010ac0:	20000d30 	.word	0x20000d30

08010ac4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8010ac4:	b480      	push	{r7}
 8010ac6:	b083      	sub	sp, #12
 8010ac8:	af00      	add	r7, sp, #0
 8010aca:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	2243      	movs	r2, #67	; 0x43
 8010ad0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8010ad2:	4b03      	ldr	r3, [pc, #12]	; (8010ae0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8010ad4:	4618      	mov	r0, r3
 8010ad6:	370c      	adds	r7, #12
 8010ad8:	46bd      	mov	sp, r7
 8010ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ade:	4770      	bx	lr
 8010ae0:	20000db8 	.word	0x20000db8

08010ae4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8010ae4:	b480      	push	{r7}
 8010ae6:	b083      	sub	sp, #12
 8010ae8:	af00      	add	r7, sp, #0
 8010aea:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	220a      	movs	r2, #10
 8010af0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8010af2:	4b03      	ldr	r3, [pc, #12]	; (8010b00 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8010af4:	4618      	mov	r0, r3
 8010af6:	370c      	adds	r7, #12
 8010af8:	46bd      	mov	sp, r7
 8010afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010afe:	4770      	bx	lr
 8010b00:	20000cec 	.word	0x20000cec

08010b04 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8010b04:	b480      	push	{r7}
 8010b06:	b085      	sub	sp, #20
 8010b08:	af00      	add	r7, sp, #0
 8010b0a:	6078      	str	r0, [r7, #4]
 8010b0c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8010b0e:	2302      	movs	r3, #2
 8010b10:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8010b12:	683b      	ldr	r3, [r7, #0]
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d005      	beq.n	8010b24 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	683a      	ldr	r2, [r7, #0]
 8010b1c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8010b20:	2300      	movs	r3, #0
 8010b22:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8010b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b26:	4618      	mov	r0, r3
 8010b28:	3714      	adds	r7, #20
 8010b2a:	46bd      	mov	sp, r7
 8010b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b30:	4770      	bx	lr

08010b32 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8010b32:	b480      	push	{r7}
 8010b34:	b087      	sub	sp, #28
 8010b36:	af00      	add	r7, sp, #0
 8010b38:	60f8      	str	r0, [r7, #12]
 8010b3a:	60b9      	str	r1, [r7, #8]
 8010b3c:	4613      	mov	r3, r2
 8010b3e:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8010b40:	68fb      	ldr	r3, [r7, #12]
 8010b42:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010b46:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8010b48:	697b      	ldr	r3, [r7, #20]
 8010b4a:	68ba      	ldr	r2, [r7, #8]
 8010b4c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8010b50:	88fa      	ldrh	r2, [r7, #6]
 8010b52:	697b      	ldr	r3, [r7, #20]
 8010b54:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8010b58:	2300      	movs	r3, #0
}
 8010b5a:	4618      	mov	r0, r3
 8010b5c:	371c      	adds	r7, #28
 8010b5e:	46bd      	mov	sp, r7
 8010b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b64:	4770      	bx	lr

08010b66 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8010b66:	b480      	push	{r7}
 8010b68:	b085      	sub	sp, #20
 8010b6a:	af00      	add	r7, sp, #0
 8010b6c:	6078      	str	r0, [r7, #4]
 8010b6e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010b76:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8010b78:	68fb      	ldr	r3, [r7, #12]
 8010b7a:	683a      	ldr	r2, [r7, #0]
 8010b7c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8010b80:	2300      	movs	r3, #0
}
 8010b82:	4618      	mov	r0, r3
 8010b84:	3714      	adds	r7, #20
 8010b86:	46bd      	mov	sp, r7
 8010b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b8c:	4770      	bx	lr

08010b8e <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8010b8e:	b580      	push	{r7, lr}
 8010b90:	b084      	sub	sp, #16
 8010b92:	af00      	add	r7, sp, #0
 8010b94:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010b9c:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d01c      	beq.n	8010be2 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 8010ba8:	68fb      	ldr	r3, [r7, #12]
 8010baa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d115      	bne.n	8010bde <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8010bb2:	68fb      	ldr	r3, [r7, #12]
 8010bb4:	2201      	movs	r2, #1
 8010bb6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8010bc4:	68fb      	ldr	r3, [r7, #12]
 8010bc6:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8010bca:	68fb      	ldr	r3, [r7, #12]
 8010bcc:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8010bd0:	b29b      	uxth	r3, r3
 8010bd2:	2181      	movs	r1, #129	; 0x81
 8010bd4:	6878      	ldr	r0, [r7, #4]
 8010bd6:	f004 fee4 	bl	80159a2 <USBD_LL_Transmit>

      return USBD_OK;
 8010bda:	2300      	movs	r3, #0
 8010bdc:	e002      	b.n	8010be4 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8010bde:	2301      	movs	r3, #1
 8010be0:	e000      	b.n	8010be4 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8010be2:	2302      	movs	r3, #2
  }
}
 8010be4:	4618      	mov	r0, r3
 8010be6:	3710      	adds	r7, #16
 8010be8:	46bd      	mov	sp, r7
 8010bea:	bd80      	pop	{r7, pc}

08010bec <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8010bec:	b580      	push	{r7, lr}
 8010bee:	b084      	sub	sp, #16
 8010bf0:	af00      	add	r7, sp, #0
 8010bf2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010bfa:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d017      	beq.n	8010c36 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	7c1b      	ldrb	r3, [r3, #16]
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d109      	bne.n	8010c22 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010c14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010c18:	2101      	movs	r1, #1
 8010c1a:	6878      	ldr	r0, [r7, #4]
 8010c1c:	f004 fee4 	bl	80159e8 <USBD_LL_PrepareReceive>
 8010c20:	e007      	b.n	8010c32 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8010c22:	68fb      	ldr	r3, [r7, #12]
 8010c24:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010c28:	2340      	movs	r3, #64	; 0x40
 8010c2a:	2101      	movs	r1, #1
 8010c2c:	6878      	ldr	r0, [r7, #4]
 8010c2e:	f004 fedb 	bl	80159e8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8010c32:	2300      	movs	r3, #0
 8010c34:	e000      	b.n	8010c38 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8010c36:	2302      	movs	r3, #2
  }
}
 8010c38:	4618      	mov	r0, r3
 8010c3a:	3710      	adds	r7, #16
 8010c3c:	46bd      	mov	sp, r7
 8010c3e:	bd80      	pop	{r7, pc}

08010c40 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8010c40:	b580      	push	{r7, lr}
 8010c42:	b084      	sub	sp, #16
 8010c44:	af00      	add	r7, sp, #0
 8010c46:	60f8      	str	r0, [r7, #12]
 8010c48:	60b9      	str	r1, [r7, #8]
 8010c4a:	4613      	mov	r3, r2
 8010c4c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d101      	bne.n	8010c58 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8010c54:	2302      	movs	r3, #2
 8010c56:	e01a      	b.n	8010c8e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d003      	beq.n	8010c6a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8010c62:	68fb      	ldr	r3, [r7, #12]
 8010c64:	2200      	movs	r2, #0
 8010c66:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8010c6a:	68bb      	ldr	r3, [r7, #8]
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d003      	beq.n	8010c78 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8010c70:	68fb      	ldr	r3, [r7, #12]
 8010c72:	68ba      	ldr	r2, [r7, #8]
 8010c74:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8010c78:	68fb      	ldr	r3, [r7, #12]
 8010c7a:	2201      	movs	r2, #1
 8010c7c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8010c80:	68fb      	ldr	r3, [r7, #12]
 8010c82:	79fa      	ldrb	r2, [r7, #7]
 8010c84:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8010c86:	68f8      	ldr	r0, [r7, #12]
 8010c88:	f004 fd56 	bl	8015738 <USBD_LL_Init>

  return USBD_OK;
 8010c8c:	2300      	movs	r3, #0
}
 8010c8e:	4618      	mov	r0, r3
 8010c90:	3710      	adds	r7, #16
 8010c92:	46bd      	mov	sp, r7
 8010c94:	bd80      	pop	{r7, pc}

08010c96 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8010c96:	b480      	push	{r7}
 8010c98:	b085      	sub	sp, #20
 8010c9a:	af00      	add	r7, sp, #0
 8010c9c:	6078      	str	r0, [r7, #4]
 8010c9e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8010ca0:	2300      	movs	r3, #0
 8010ca2:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8010ca4:	683b      	ldr	r3, [r7, #0]
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d006      	beq.n	8010cb8 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	683a      	ldr	r2, [r7, #0]
 8010cae:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8010cb2:	2300      	movs	r3, #0
 8010cb4:	73fb      	strb	r3, [r7, #15]
 8010cb6:	e001      	b.n	8010cbc <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8010cb8:	2302      	movs	r3, #2
 8010cba:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8010cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8010cbe:	4618      	mov	r0, r3
 8010cc0:	3714      	adds	r7, #20
 8010cc2:	46bd      	mov	sp, r7
 8010cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cc8:	4770      	bx	lr

08010cca <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8010cca:	b580      	push	{r7, lr}
 8010ccc:	b082      	sub	sp, #8
 8010cce:	af00      	add	r7, sp, #0
 8010cd0:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8010cd2:	6878      	ldr	r0, [r7, #4]
 8010cd4:	f004 fd7c 	bl	80157d0 <USBD_LL_Start>

  return USBD_OK;
 8010cd8:	2300      	movs	r3, #0
}
 8010cda:	4618      	mov	r0, r3
 8010cdc:	3708      	adds	r7, #8
 8010cde:	46bd      	mov	sp, r7
 8010ce0:	bd80      	pop	{r7, pc}

08010ce2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8010ce2:	b480      	push	{r7}
 8010ce4:	b083      	sub	sp, #12
 8010ce6:	af00      	add	r7, sp, #0
 8010ce8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010cea:	2300      	movs	r3, #0
}
 8010cec:	4618      	mov	r0, r3
 8010cee:	370c      	adds	r7, #12
 8010cf0:	46bd      	mov	sp, r7
 8010cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cf6:	4770      	bx	lr

08010cf8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8010cf8:	b580      	push	{r7, lr}
 8010cfa:	b084      	sub	sp, #16
 8010cfc:	af00      	add	r7, sp, #0
 8010cfe:	6078      	str	r0, [r7, #4]
 8010d00:	460b      	mov	r3, r1
 8010d02:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8010d04:	2302      	movs	r3, #2
 8010d06:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d00c      	beq.n	8010d2c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010d18:	681b      	ldr	r3, [r3, #0]
 8010d1a:	78fa      	ldrb	r2, [r7, #3]
 8010d1c:	4611      	mov	r1, r2
 8010d1e:	6878      	ldr	r0, [r7, #4]
 8010d20:	4798      	blx	r3
 8010d22:	4603      	mov	r3, r0
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d101      	bne.n	8010d2c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8010d28:	2300      	movs	r3, #0
 8010d2a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8010d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d2e:	4618      	mov	r0, r3
 8010d30:	3710      	adds	r7, #16
 8010d32:	46bd      	mov	sp, r7
 8010d34:	bd80      	pop	{r7, pc}

08010d36 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8010d36:	b580      	push	{r7, lr}
 8010d38:	b082      	sub	sp, #8
 8010d3a:	af00      	add	r7, sp, #0
 8010d3c:	6078      	str	r0, [r7, #4]
 8010d3e:	460b      	mov	r3, r1
 8010d40:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010d48:	685b      	ldr	r3, [r3, #4]
 8010d4a:	78fa      	ldrb	r2, [r7, #3]
 8010d4c:	4611      	mov	r1, r2
 8010d4e:	6878      	ldr	r0, [r7, #4]
 8010d50:	4798      	blx	r3
  return USBD_OK;
 8010d52:	2300      	movs	r3, #0
}
 8010d54:	4618      	mov	r0, r3
 8010d56:	3708      	adds	r7, #8
 8010d58:	46bd      	mov	sp, r7
 8010d5a:	bd80      	pop	{r7, pc}

08010d5c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8010d5c:	b580      	push	{r7, lr}
 8010d5e:	b082      	sub	sp, #8
 8010d60:	af00      	add	r7, sp, #0
 8010d62:	6078      	str	r0, [r7, #4]
 8010d64:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8010d6c:	6839      	ldr	r1, [r7, #0]
 8010d6e:	4618      	mov	r0, r3
 8010d70:	f000 fe94 	bl	8011a9c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	2201      	movs	r2, #1
 8010d78:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8010d82:	461a      	mov	r2, r3
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8010d90:	f003 031f 	and.w	r3, r3, #31
 8010d94:	2b01      	cmp	r3, #1
 8010d96:	d00c      	beq.n	8010db2 <USBD_LL_SetupStage+0x56>
 8010d98:	2b01      	cmp	r3, #1
 8010d9a:	d302      	bcc.n	8010da2 <USBD_LL_SetupStage+0x46>
 8010d9c:	2b02      	cmp	r3, #2
 8010d9e:	d010      	beq.n	8010dc2 <USBD_LL_SetupStage+0x66>
 8010da0:	e017      	b.n	8010dd2 <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8010da8:	4619      	mov	r1, r3
 8010daa:	6878      	ldr	r0, [r7, #4]
 8010dac:	f000 fa04 	bl	80111b8 <USBD_StdDevReq>
    break;
 8010db0:	e01a      	b.n	8010de8 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8010db8:	4619      	mov	r1, r3
 8010dba:	6878      	ldr	r0, [r7, #4]
 8010dbc:	f000 fa66 	bl	801128c <USBD_StdItfReq>
    break;
 8010dc0:	e012      	b.n	8010de8 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8010dc8:	4619      	mov	r1, r3
 8010dca:	6878      	ldr	r0, [r7, #4]
 8010dcc:	f000 faa4 	bl	8011318 <USBD_StdEPReq>
    break;
 8010dd0:	e00a      	b.n	8010de8 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8010dd8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8010ddc:	b2db      	uxtb	r3, r3
 8010dde:	4619      	mov	r1, r3
 8010de0:	6878      	ldr	r0, [r7, #4]
 8010de2:	f004 fd55 	bl	8015890 <USBD_LL_StallEP>
    break;
 8010de6:	bf00      	nop
  }

  return USBD_OK;
 8010de8:	2300      	movs	r3, #0
}
 8010dea:	4618      	mov	r0, r3
 8010dec:	3708      	adds	r7, #8
 8010dee:	46bd      	mov	sp, r7
 8010df0:	bd80      	pop	{r7, pc}

08010df2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8010df2:	b580      	push	{r7, lr}
 8010df4:	b086      	sub	sp, #24
 8010df6:	af00      	add	r7, sp, #0
 8010df8:	60f8      	str	r0, [r7, #12]
 8010dfa:	460b      	mov	r3, r1
 8010dfc:	607a      	str	r2, [r7, #4]
 8010dfe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8010e00:	7afb      	ldrb	r3, [r7, #11]
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d14b      	bne.n	8010e9e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8010e06:	68fb      	ldr	r3, [r7, #12]
 8010e08:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8010e0c:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8010e0e:	68fb      	ldr	r3, [r7, #12]
 8010e10:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8010e14:	2b03      	cmp	r3, #3
 8010e16:	d134      	bne.n	8010e82 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8010e18:	697b      	ldr	r3, [r7, #20]
 8010e1a:	68da      	ldr	r2, [r3, #12]
 8010e1c:	697b      	ldr	r3, [r7, #20]
 8010e1e:	691b      	ldr	r3, [r3, #16]
 8010e20:	429a      	cmp	r2, r3
 8010e22:	d919      	bls.n	8010e58 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8010e24:	697b      	ldr	r3, [r7, #20]
 8010e26:	68da      	ldr	r2, [r3, #12]
 8010e28:	697b      	ldr	r3, [r7, #20]
 8010e2a:	691b      	ldr	r3, [r3, #16]
 8010e2c:	1ad2      	subs	r2, r2, r3
 8010e2e:	697b      	ldr	r3, [r7, #20]
 8010e30:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8010e32:	697b      	ldr	r3, [r7, #20]
 8010e34:	68da      	ldr	r2, [r3, #12]
 8010e36:	697b      	ldr	r3, [r7, #20]
 8010e38:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8010e3a:	429a      	cmp	r2, r3
 8010e3c:	d203      	bcs.n	8010e46 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8010e3e:	697b      	ldr	r3, [r7, #20]
 8010e40:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8010e42:	b29b      	uxth	r3, r3
 8010e44:	e002      	b.n	8010e4c <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8010e46:	697b      	ldr	r3, [r7, #20]
 8010e48:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8010e4a:	b29b      	uxth	r3, r3
 8010e4c:	461a      	mov	r2, r3
 8010e4e:	6879      	ldr	r1, [r7, #4]
 8010e50:	68f8      	ldr	r0, [r7, #12]
 8010e52:	f000 ff17 	bl	8011c84 <USBD_CtlContinueRx>
 8010e56:	e038      	b.n	8010eca <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8010e58:	68fb      	ldr	r3, [r7, #12]
 8010e5a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010e5e:	691b      	ldr	r3, [r3, #16]
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d00a      	beq.n	8010e7a <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8010e6a:	2b03      	cmp	r3, #3
 8010e6c:	d105      	bne.n	8010e7a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8010e6e:	68fb      	ldr	r3, [r7, #12]
 8010e70:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010e74:	691b      	ldr	r3, [r3, #16]
 8010e76:	68f8      	ldr	r0, [r7, #12]
 8010e78:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8010e7a:	68f8      	ldr	r0, [r7, #12]
 8010e7c:	f000 ff14 	bl	8011ca8 <USBD_CtlSendStatus>
 8010e80:	e023      	b.n	8010eca <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8010e82:	68fb      	ldr	r3, [r7, #12]
 8010e84:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8010e88:	2b05      	cmp	r3, #5
 8010e8a:	d11e      	bne.n	8010eca <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8010e8c:	68fb      	ldr	r3, [r7, #12]
 8010e8e:	2200      	movs	r2, #0
 8010e90:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8010e94:	2100      	movs	r1, #0
 8010e96:	68f8      	ldr	r0, [r7, #12]
 8010e98:	f004 fcfa 	bl	8015890 <USBD_LL_StallEP>
 8010e9c:	e015      	b.n	8010eca <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8010e9e:	68fb      	ldr	r3, [r7, #12]
 8010ea0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010ea4:	699b      	ldr	r3, [r3, #24]
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d00d      	beq.n	8010ec6 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8010eaa:	68fb      	ldr	r3, [r7, #12]
 8010eac:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8010eb0:	2b03      	cmp	r3, #3
 8010eb2:	d108      	bne.n	8010ec6 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8010eb4:	68fb      	ldr	r3, [r7, #12]
 8010eb6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010eba:	699b      	ldr	r3, [r3, #24]
 8010ebc:	7afa      	ldrb	r2, [r7, #11]
 8010ebe:	4611      	mov	r1, r2
 8010ec0:	68f8      	ldr	r0, [r7, #12]
 8010ec2:	4798      	blx	r3
 8010ec4:	e001      	b.n	8010eca <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8010ec6:	2302      	movs	r3, #2
 8010ec8:	e000      	b.n	8010ecc <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8010eca:	2300      	movs	r3, #0
}
 8010ecc:	4618      	mov	r0, r3
 8010ece:	3718      	adds	r7, #24
 8010ed0:	46bd      	mov	sp, r7
 8010ed2:	bd80      	pop	{r7, pc}

08010ed4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8010ed4:	b580      	push	{r7, lr}
 8010ed6:	b086      	sub	sp, #24
 8010ed8:	af00      	add	r7, sp, #0
 8010eda:	60f8      	str	r0, [r7, #12]
 8010edc:	460b      	mov	r3, r1
 8010ede:	607a      	str	r2, [r7, #4]
 8010ee0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8010ee2:	7afb      	ldrb	r3, [r7, #11]
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d17f      	bne.n	8010fe8 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8010ee8:	68fb      	ldr	r3, [r7, #12]
 8010eea:	3314      	adds	r3, #20
 8010eec:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8010eee:	68fb      	ldr	r3, [r7, #12]
 8010ef0:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8010ef4:	2b02      	cmp	r3, #2
 8010ef6:	d15c      	bne.n	8010fb2 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8010ef8:	697b      	ldr	r3, [r7, #20]
 8010efa:	68da      	ldr	r2, [r3, #12]
 8010efc:	697b      	ldr	r3, [r7, #20]
 8010efe:	691b      	ldr	r3, [r3, #16]
 8010f00:	429a      	cmp	r2, r3
 8010f02:	d915      	bls.n	8010f30 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8010f04:	697b      	ldr	r3, [r7, #20]
 8010f06:	68da      	ldr	r2, [r3, #12]
 8010f08:	697b      	ldr	r3, [r7, #20]
 8010f0a:	691b      	ldr	r3, [r3, #16]
 8010f0c:	1ad2      	subs	r2, r2, r3
 8010f0e:	697b      	ldr	r3, [r7, #20]
 8010f10:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8010f12:	697b      	ldr	r3, [r7, #20]
 8010f14:	68db      	ldr	r3, [r3, #12]
 8010f16:	b29b      	uxth	r3, r3
 8010f18:	461a      	mov	r2, r3
 8010f1a:	6879      	ldr	r1, [r7, #4]
 8010f1c:	68f8      	ldr	r0, [r7, #12]
 8010f1e:	f000 fe81 	bl	8011c24 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8010f22:	2300      	movs	r3, #0
 8010f24:	2200      	movs	r2, #0
 8010f26:	2100      	movs	r1, #0
 8010f28:	68f8      	ldr	r0, [r7, #12]
 8010f2a:	f004 fd5d 	bl	80159e8 <USBD_LL_PrepareReceive>
 8010f2e:	e04e      	b.n	8010fce <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8010f30:	697b      	ldr	r3, [r7, #20]
 8010f32:	689b      	ldr	r3, [r3, #8]
 8010f34:	697a      	ldr	r2, [r7, #20]
 8010f36:	6912      	ldr	r2, [r2, #16]
 8010f38:	fbb3 f1f2 	udiv	r1, r3, r2
 8010f3c:	fb02 f201 	mul.w	r2, r2, r1
 8010f40:	1a9b      	subs	r3, r3, r2
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d11c      	bne.n	8010f80 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8010f46:	697b      	ldr	r3, [r7, #20]
 8010f48:	689a      	ldr	r2, [r3, #8]
 8010f4a:	697b      	ldr	r3, [r7, #20]
 8010f4c:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8010f4e:	429a      	cmp	r2, r3
 8010f50:	d316      	bcc.n	8010f80 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8010f52:	697b      	ldr	r3, [r7, #20]
 8010f54:	689a      	ldr	r2, [r3, #8]
 8010f56:	68fb      	ldr	r3, [r7, #12]
 8010f58:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8010f5c:	429a      	cmp	r2, r3
 8010f5e:	d20f      	bcs.n	8010f80 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8010f60:	2200      	movs	r2, #0
 8010f62:	2100      	movs	r1, #0
 8010f64:	68f8      	ldr	r0, [r7, #12]
 8010f66:	f000 fe5d 	bl	8011c24 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8010f6a:	68fb      	ldr	r3, [r7, #12]
 8010f6c:	2200      	movs	r2, #0
 8010f6e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8010f72:	2300      	movs	r3, #0
 8010f74:	2200      	movs	r2, #0
 8010f76:	2100      	movs	r1, #0
 8010f78:	68f8      	ldr	r0, [r7, #12]
 8010f7a:	f004 fd35 	bl	80159e8 <USBD_LL_PrepareReceive>
 8010f7e:	e026      	b.n	8010fce <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8010f80:	68fb      	ldr	r3, [r7, #12]
 8010f82:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010f86:	68db      	ldr	r3, [r3, #12]
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d00a      	beq.n	8010fa2 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8010f8c:	68fb      	ldr	r3, [r7, #12]
 8010f8e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8010f92:	2b03      	cmp	r3, #3
 8010f94:	d105      	bne.n	8010fa2 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8010f96:	68fb      	ldr	r3, [r7, #12]
 8010f98:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010f9c:	68db      	ldr	r3, [r3, #12]
 8010f9e:	68f8      	ldr	r0, [r7, #12]
 8010fa0:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8010fa2:	2180      	movs	r1, #128	; 0x80
 8010fa4:	68f8      	ldr	r0, [r7, #12]
 8010fa6:	f004 fc73 	bl	8015890 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8010faa:	68f8      	ldr	r0, [r7, #12]
 8010fac:	f000 fe8f 	bl	8011cce <USBD_CtlReceiveStatus>
 8010fb0:	e00d      	b.n	8010fce <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8010fb2:	68fb      	ldr	r3, [r7, #12]
 8010fb4:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8010fb8:	2b04      	cmp	r3, #4
 8010fba:	d004      	beq.n	8010fc6 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8010fbc:	68fb      	ldr	r3, [r7, #12]
 8010fbe:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d103      	bne.n	8010fce <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8010fc6:	2180      	movs	r1, #128	; 0x80
 8010fc8:	68f8      	ldr	r0, [r7, #12]
 8010fca:	f004 fc61 	bl	8015890 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8010fce:	68fb      	ldr	r3, [r7, #12]
 8010fd0:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8010fd4:	2b01      	cmp	r3, #1
 8010fd6:	d11d      	bne.n	8011014 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8010fd8:	68f8      	ldr	r0, [r7, #12]
 8010fda:	f7ff fe82 	bl	8010ce2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	2200      	movs	r2, #0
 8010fe2:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8010fe6:	e015      	b.n	8011014 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8010fe8:	68fb      	ldr	r3, [r7, #12]
 8010fea:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010fee:	695b      	ldr	r3, [r3, #20]
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d00d      	beq.n	8011010 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8010ff4:	68fb      	ldr	r3, [r7, #12]
 8010ff6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8010ffa:	2b03      	cmp	r3, #3
 8010ffc:	d108      	bne.n	8011010 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8010ffe:	68fb      	ldr	r3, [r7, #12]
 8011000:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8011004:	695b      	ldr	r3, [r3, #20]
 8011006:	7afa      	ldrb	r2, [r7, #11]
 8011008:	4611      	mov	r1, r2
 801100a:	68f8      	ldr	r0, [r7, #12]
 801100c:	4798      	blx	r3
 801100e:	e001      	b.n	8011014 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8011010:	2302      	movs	r3, #2
 8011012:	e000      	b.n	8011016 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8011014:	2300      	movs	r3, #0
}
 8011016:	4618      	mov	r0, r3
 8011018:	3718      	adds	r7, #24
 801101a:	46bd      	mov	sp, r7
 801101c:	bd80      	pop	{r7, pc}

0801101e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 801101e:	b580      	push	{r7, lr}
 8011020:	b082      	sub	sp, #8
 8011022:	af00      	add	r7, sp, #0
 8011024:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011026:	2340      	movs	r3, #64	; 0x40
 8011028:	2200      	movs	r2, #0
 801102a:	2100      	movs	r1, #0
 801102c:	6878      	ldr	r0, [r7, #4]
 801102e:	f004 fbea 	bl	8015806 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	2201      	movs	r2, #1
 8011036:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	2240      	movs	r2, #64	; 0x40
 801103e:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011042:	2340      	movs	r3, #64	; 0x40
 8011044:	2200      	movs	r2, #0
 8011046:	2180      	movs	r1, #128	; 0x80
 8011048:	6878      	ldr	r0, [r7, #4]
 801104a:	f004 fbdc 	bl	8015806 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	2201      	movs	r2, #1
 8011052:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	2240      	movs	r2, #64	; 0x40
 8011058:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	2201      	movs	r2, #1
 801105e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	2200      	movs	r2, #0
 8011066:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	2200      	movs	r2, #0
 801106e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	2200      	movs	r2, #0
 8011074:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 801107e:	2b00      	cmp	r3, #0
 8011080:	d009      	beq.n	8011096 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8011088:	685b      	ldr	r3, [r3, #4]
 801108a:	687a      	ldr	r2, [r7, #4]
 801108c:	6852      	ldr	r2, [r2, #4]
 801108e:	b2d2      	uxtb	r2, r2
 8011090:	4611      	mov	r1, r2
 8011092:	6878      	ldr	r0, [r7, #4]
 8011094:	4798      	blx	r3
  }

  return USBD_OK;
 8011096:	2300      	movs	r3, #0
}
 8011098:	4618      	mov	r0, r3
 801109a:	3708      	adds	r7, #8
 801109c:	46bd      	mov	sp, r7
 801109e:	bd80      	pop	{r7, pc}

080110a0 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 80110a0:	b480      	push	{r7}
 80110a2:	b083      	sub	sp, #12
 80110a4:	af00      	add	r7, sp, #0
 80110a6:	6078      	str	r0, [r7, #4]
 80110a8:	460b      	mov	r3, r1
 80110aa:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	78fa      	ldrb	r2, [r7, #3]
 80110b0:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 80110b2:	2300      	movs	r3, #0
}
 80110b4:	4618      	mov	r0, r3
 80110b6:	370c      	adds	r7, #12
 80110b8:	46bd      	mov	sp, r7
 80110ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110be:	4770      	bx	lr

080110c0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 80110c0:	b480      	push	{r7}
 80110c2:	b083      	sub	sp, #12
 80110c4:	af00      	add	r7, sp, #0
 80110c6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	2204      	movs	r2, #4
 80110d8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 80110dc:	2300      	movs	r3, #0
}
 80110de:	4618      	mov	r0, r3
 80110e0:	370c      	adds	r7, #12
 80110e2:	46bd      	mov	sp, r7
 80110e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110e8:	4770      	bx	lr

080110ea <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 80110ea:	b480      	push	{r7}
 80110ec:	b083      	sub	sp, #12
 80110ee:	af00      	add	r7, sp, #0
 80110f0:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 80110fe:	2300      	movs	r3, #0
}
 8011100:	4618      	mov	r0, r3
 8011102:	370c      	adds	r7, #12
 8011104:	46bd      	mov	sp, r7
 8011106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801110a:	4770      	bx	lr

0801110c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 801110c:	b580      	push	{r7, lr}
 801110e:	b082      	sub	sp, #8
 8011110:	af00      	add	r7, sp, #0
 8011112:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 801111a:	2b03      	cmp	r3, #3
 801111c:	d10b      	bne.n	8011136 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8011124:	69db      	ldr	r3, [r3, #28]
 8011126:	2b00      	cmp	r3, #0
 8011128:	d005      	beq.n	8011136 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8011130:	69db      	ldr	r3, [r3, #28]
 8011132:	6878      	ldr	r0, [r7, #4]
 8011134:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8011136:	2300      	movs	r3, #0
}
 8011138:	4618      	mov	r0, r3
 801113a:	3708      	adds	r7, #8
 801113c:	46bd      	mov	sp, r7
 801113e:	bd80      	pop	{r7, pc}

08011140 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8011140:	b480      	push	{r7}
 8011142:	b083      	sub	sp, #12
 8011144:	af00      	add	r7, sp, #0
 8011146:	6078      	str	r0, [r7, #4]
 8011148:	460b      	mov	r3, r1
 801114a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 801114c:	2300      	movs	r3, #0
}
 801114e:	4618      	mov	r0, r3
 8011150:	370c      	adds	r7, #12
 8011152:	46bd      	mov	sp, r7
 8011154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011158:	4770      	bx	lr

0801115a <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 801115a:	b480      	push	{r7}
 801115c:	b083      	sub	sp, #12
 801115e:	af00      	add	r7, sp, #0
 8011160:	6078      	str	r0, [r7, #4]
 8011162:	460b      	mov	r3, r1
 8011164:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8011166:	2300      	movs	r3, #0
}
 8011168:	4618      	mov	r0, r3
 801116a:	370c      	adds	r7, #12
 801116c:	46bd      	mov	sp, r7
 801116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011172:	4770      	bx	lr

08011174 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 8011174:	b480      	push	{r7}
 8011176:	b083      	sub	sp, #12
 8011178:	af00      	add	r7, sp, #0
 801117a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801117c:	2300      	movs	r3, #0
}
 801117e:	4618      	mov	r0, r3
 8011180:	370c      	adds	r7, #12
 8011182:	46bd      	mov	sp, r7
 8011184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011188:	4770      	bx	lr

0801118a <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 801118a:	b580      	push	{r7, lr}
 801118c:	b082      	sub	sp, #8
 801118e:	af00      	add	r7, sp, #0
 8011190:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	2201      	movs	r2, #1
 8011196:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80111a0:	685b      	ldr	r3, [r3, #4]
 80111a2:	687a      	ldr	r2, [r7, #4]
 80111a4:	6852      	ldr	r2, [r2, #4]
 80111a6:	b2d2      	uxtb	r2, r2
 80111a8:	4611      	mov	r1, r2
 80111aa:	6878      	ldr	r0, [r7, #4]
 80111ac:	4798      	blx	r3

  return USBD_OK;
 80111ae:	2300      	movs	r3, #0
}
 80111b0:	4618      	mov	r0, r3
 80111b2:	3708      	adds	r7, #8
 80111b4:	46bd      	mov	sp, r7
 80111b6:	bd80      	pop	{r7, pc}

080111b8 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80111b8:	b580      	push	{r7, lr}
 80111ba:	b084      	sub	sp, #16
 80111bc:	af00      	add	r7, sp, #0
 80111be:	6078      	str	r0, [r7, #4]
 80111c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80111c2:	2300      	movs	r3, #0
 80111c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80111c6:	683b      	ldr	r3, [r7, #0]
 80111c8:	781b      	ldrb	r3, [r3, #0]
 80111ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80111ce:	2b20      	cmp	r3, #32
 80111d0:	d004      	beq.n	80111dc <USBD_StdDevReq+0x24>
 80111d2:	2b40      	cmp	r3, #64	; 0x40
 80111d4:	d002      	beq.n	80111dc <USBD_StdDevReq+0x24>
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d008      	beq.n	80111ec <USBD_StdDevReq+0x34>
 80111da:	e04c      	b.n	8011276 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80111e2:	689b      	ldr	r3, [r3, #8]
 80111e4:	6839      	ldr	r1, [r7, #0]
 80111e6:	6878      	ldr	r0, [r7, #4]
 80111e8:	4798      	blx	r3
    break;
 80111ea:	e049      	b.n	8011280 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 80111ec:	683b      	ldr	r3, [r7, #0]
 80111ee:	785b      	ldrb	r3, [r3, #1]
 80111f0:	2b09      	cmp	r3, #9
 80111f2:	d83a      	bhi.n	801126a <USBD_StdDevReq+0xb2>
 80111f4:	a201      	add	r2, pc, #4	; (adr r2, 80111fc <USBD_StdDevReq+0x44>)
 80111f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111fa:	bf00      	nop
 80111fc:	0801124d 	.word	0x0801124d
 8011200:	08011261 	.word	0x08011261
 8011204:	0801126b 	.word	0x0801126b
 8011208:	08011257 	.word	0x08011257
 801120c:	0801126b 	.word	0x0801126b
 8011210:	0801122f 	.word	0x0801122f
 8011214:	08011225 	.word	0x08011225
 8011218:	0801126b 	.word	0x0801126b
 801121c:	08011243 	.word	0x08011243
 8011220:	08011239 	.word	0x08011239
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8011224:	6839      	ldr	r1, [r7, #0]
 8011226:	6878      	ldr	r0, [r7, #4]
 8011228:	f000 f9d2 	bl	80115d0 <USBD_GetDescriptor>
      break;
 801122c:	e022      	b.n	8011274 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 801122e:	6839      	ldr	r1, [r7, #0]
 8011230:	6878      	ldr	r0, [r7, #4]
 8011232:	f000 fac7 	bl	80117c4 <USBD_SetAddress>
      break;
 8011236:	e01d      	b.n	8011274 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8011238:	6839      	ldr	r1, [r7, #0]
 801123a:	6878      	ldr	r0, [r7, #4]
 801123c:	f000 fb04 	bl	8011848 <USBD_SetConfig>
      break;
 8011240:	e018      	b.n	8011274 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8011242:	6839      	ldr	r1, [r7, #0]
 8011244:	6878      	ldr	r0, [r7, #4]
 8011246:	f000 fb8d 	bl	8011964 <USBD_GetConfig>
      break;
 801124a:	e013      	b.n	8011274 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 801124c:	6839      	ldr	r1, [r7, #0]
 801124e:	6878      	ldr	r0, [r7, #4]
 8011250:	f000 fbbc 	bl	80119cc <USBD_GetStatus>
      break;
 8011254:	e00e      	b.n	8011274 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8011256:	6839      	ldr	r1, [r7, #0]
 8011258:	6878      	ldr	r0, [r7, #4]
 801125a:	f000 fbea 	bl	8011a32 <USBD_SetFeature>
      break;
 801125e:	e009      	b.n	8011274 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8011260:	6839      	ldr	r1, [r7, #0]
 8011262:	6878      	ldr	r0, [r7, #4]
 8011264:	f000 fbf9 	bl	8011a5a <USBD_ClrFeature>
      break;
 8011268:	e004      	b.n	8011274 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 801126a:	6839      	ldr	r1, [r7, #0]
 801126c:	6878      	ldr	r0, [r7, #4]
 801126e:	f000 fc52 	bl	8011b16 <USBD_CtlError>
      break;
 8011272:	bf00      	nop
    }
    break;
 8011274:	e004      	b.n	8011280 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8011276:	6839      	ldr	r1, [r7, #0]
 8011278:	6878      	ldr	r0, [r7, #4]
 801127a:	f000 fc4c 	bl	8011b16 <USBD_CtlError>
    break;
 801127e:	bf00      	nop
  }

  return ret;
 8011280:	7bfb      	ldrb	r3, [r7, #15]
}
 8011282:	4618      	mov	r0, r3
 8011284:	3710      	adds	r7, #16
 8011286:	46bd      	mov	sp, r7
 8011288:	bd80      	pop	{r7, pc}
 801128a:	bf00      	nop

0801128c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 801128c:	b580      	push	{r7, lr}
 801128e:	b084      	sub	sp, #16
 8011290:	af00      	add	r7, sp, #0
 8011292:	6078      	str	r0, [r7, #4]
 8011294:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011296:	2300      	movs	r3, #0
 8011298:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801129a:	683b      	ldr	r3, [r7, #0]
 801129c:	781b      	ldrb	r3, [r3, #0]
 801129e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80112a2:	2b20      	cmp	r3, #32
 80112a4:	d003      	beq.n	80112ae <USBD_StdItfReq+0x22>
 80112a6:	2b40      	cmp	r3, #64	; 0x40
 80112a8:	d001      	beq.n	80112ae <USBD_StdItfReq+0x22>
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d12a      	bne.n	8011304 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80112b4:	3b01      	subs	r3, #1
 80112b6:	2b02      	cmp	r3, #2
 80112b8:	d81d      	bhi.n	80112f6 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80112ba:	683b      	ldr	r3, [r7, #0]
 80112bc:	889b      	ldrh	r3, [r3, #4]
 80112be:	b2db      	uxtb	r3, r3
 80112c0:	2b01      	cmp	r3, #1
 80112c2:	d813      	bhi.n	80112ec <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80112ca:	689b      	ldr	r3, [r3, #8]
 80112cc:	6839      	ldr	r1, [r7, #0]
 80112ce:	6878      	ldr	r0, [r7, #4]
 80112d0:	4798      	blx	r3
 80112d2:	4603      	mov	r3, r0
 80112d4:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80112d6:	683b      	ldr	r3, [r7, #0]
 80112d8:	88db      	ldrh	r3, [r3, #6]
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d110      	bne.n	8011300 <USBD_StdItfReq+0x74>
 80112de:	7bfb      	ldrb	r3, [r7, #15]
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d10d      	bne.n	8011300 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 80112e4:	6878      	ldr	r0, [r7, #4]
 80112e6:	f000 fcdf 	bl	8011ca8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80112ea:	e009      	b.n	8011300 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80112ec:	6839      	ldr	r1, [r7, #0]
 80112ee:	6878      	ldr	r0, [r7, #4]
 80112f0:	f000 fc11 	bl	8011b16 <USBD_CtlError>
      break;
 80112f4:	e004      	b.n	8011300 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80112f6:	6839      	ldr	r1, [r7, #0]
 80112f8:	6878      	ldr	r0, [r7, #4]
 80112fa:	f000 fc0c 	bl	8011b16 <USBD_CtlError>
      break;
 80112fe:	e000      	b.n	8011302 <USBD_StdItfReq+0x76>
      break;
 8011300:	bf00      	nop
    }
    break;
 8011302:	e004      	b.n	801130e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8011304:	6839      	ldr	r1, [r7, #0]
 8011306:	6878      	ldr	r0, [r7, #4]
 8011308:	f000 fc05 	bl	8011b16 <USBD_CtlError>
    break;
 801130c:	bf00      	nop
  }

  return USBD_OK;
 801130e:	2300      	movs	r3, #0
}
 8011310:	4618      	mov	r0, r3
 8011312:	3710      	adds	r7, #16
 8011314:	46bd      	mov	sp, r7
 8011316:	bd80      	pop	{r7, pc}

08011318 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8011318:	b580      	push	{r7, lr}
 801131a:	b084      	sub	sp, #16
 801131c:	af00      	add	r7, sp, #0
 801131e:	6078      	str	r0, [r7, #4]
 8011320:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8011322:	2300      	movs	r3, #0
 8011324:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8011326:	683b      	ldr	r3, [r7, #0]
 8011328:	889b      	ldrh	r3, [r3, #4]
 801132a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801132c:	683b      	ldr	r3, [r7, #0]
 801132e:	781b      	ldrb	r3, [r3, #0]
 8011330:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011334:	2b20      	cmp	r3, #32
 8011336:	d004      	beq.n	8011342 <USBD_StdEPReq+0x2a>
 8011338:	2b40      	cmp	r3, #64	; 0x40
 801133a:	d002      	beq.n	8011342 <USBD_StdEPReq+0x2a>
 801133c:	2b00      	cmp	r3, #0
 801133e:	d008      	beq.n	8011352 <USBD_StdEPReq+0x3a>
 8011340:	e13b      	b.n	80115ba <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8011348:	689b      	ldr	r3, [r3, #8]
 801134a:	6839      	ldr	r1, [r7, #0]
 801134c:	6878      	ldr	r0, [r7, #4]
 801134e:	4798      	blx	r3
    break;
 8011350:	e138      	b.n	80115c4 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8011352:	683b      	ldr	r3, [r7, #0]
 8011354:	781b      	ldrb	r3, [r3, #0]
 8011356:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801135a:	2b20      	cmp	r3, #32
 801135c:	d10a      	bne.n	8011374 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8011364:	689b      	ldr	r3, [r3, #8]
 8011366:	6839      	ldr	r1, [r7, #0]
 8011368:	6878      	ldr	r0, [r7, #4]
 801136a:	4798      	blx	r3
 801136c:	4603      	mov	r3, r0
 801136e:	73fb      	strb	r3, [r7, #15]

      return ret;
 8011370:	7bfb      	ldrb	r3, [r7, #15]
 8011372:	e128      	b.n	80115c6 <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 8011374:	683b      	ldr	r3, [r7, #0]
 8011376:	785b      	ldrb	r3, [r3, #1]
 8011378:	2b01      	cmp	r3, #1
 801137a:	d03e      	beq.n	80113fa <USBD_StdEPReq+0xe2>
 801137c:	2b03      	cmp	r3, #3
 801137e:	d002      	beq.n	8011386 <USBD_StdEPReq+0x6e>
 8011380:	2b00      	cmp	r3, #0
 8011382:	d070      	beq.n	8011466 <USBD_StdEPReq+0x14e>
 8011384:	e113      	b.n	80115ae <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 801138c:	2b02      	cmp	r3, #2
 801138e:	d002      	beq.n	8011396 <USBD_StdEPReq+0x7e>
 8011390:	2b03      	cmp	r3, #3
 8011392:	d015      	beq.n	80113c0 <USBD_StdEPReq+0xa8>
 8011394:	e02b      	b.n	80113ee <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011396:	7bbb      	ldrb	r3, [r7, #14]
 8011398:	2b00      	cmp	r3, #0
 801139a:	d00c      	beq.n	80113b6 <USBD_StdEPReq+0x9e>
 801139c:	7bbb      	ldrb	r3, [r7, #14]
 801139e:	2b80      	cmp	r3, #128	; 0x80
 80113a0:	d009      	beq.n	80113b6 <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 80113a2:	7bbb      	ldrb	r3, [r7, #14]
 80113a4:	4619      	mov	r1, r3
 80113a6:	6878      	ldr	r0, [r7, #4]
 80113a8:	f004 fa72 	bl	8015890 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80113ac:	2180      	movs	r1, #128	; 0x80
 80113ae:	6878      	ldr	r0, [r7, #4]
 80113b0:	f004 fa6e 	bl	8015890 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80113b4:	e020      	b.n	80113f8 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 80113b6:	6839      	ldr	r1, [r7, #0]
 80113b8:	6878      	ldr	r0, [r7, #4]
 80113ba:	f000 fbac 	bl	8011b16 <USBD_CtlError>
        break;
 80113be:	e01b      	b.n	80113f8 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80113c0:	683b      	ldr	r3, [r7, #0]
 80113c2:	885b      	ldrh	r3, [r3, #2]
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d10e      	bne.n	80113e6 <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80113c8:	7bbb      	ldrb	r3, [r7, #14]
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d00b      	beq.n	80113e6 <USBD_StdEPReq+0xce>
 80113ce:	7bbb      	ldrb	r3, [r7, #14]
 80113d0:	2b80      	cmp	r3, #128	; 0x80
 80113d2:	d008      	beq.n	80113e6 <USBD_StdEPReq+0xce>
 80113d4:	683b      	ldr	r3, [r7, #0]
 80113d6:	88db      	ldrh	r3, [r3, #6]
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d104      	bne.n	80113e6 <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 80113dc:	7bbb      	ldrb	r3, [r7, #14]
 80113de:	4619      	mov	r1, r3
 80113e0:	6878      	ldr	r0, [r7, #4]
 80113e2:	f004 fa55 	bl	8015890 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 80113e6:	6878      	ldr	r0, [r7, #4]
 80113e8:	f000 fc5e 	bl	8011ca8 <USBD_CtlSendStatus>

        break;
 80113ec:	e004      	b.n	80113f8 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 80113ee:	6839      	ldr	r1, [r7, #0]
 80113f0:	6878      	ldr	r0, [r7, #4]
 80113f2:	f000 fb90 	bl	8011b16 <USBD_CtlError>
        break;
 80113f6:	bf00      	nop
      }
      break;
 80113f8:	e0de      	b.n	80115b8 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8011400:	2b02      	cmp	r3, #2
 8011402:	d002      	beq.n	801140a <USBD_StdEPReq+0xf2>
 8011404:	2b03      	cmp	r3, #3
 8011406:	d015      	beq.n	8011434 <USBD_StdEPReq+0x11c>
 8011408:	e026      	b.n	8011458 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801140a:	7bbb      	ldrb	r3, [r7, #14]
 801140c:	2b00      	cmp	r3, #0
 801140e:	d00c      	beq.n	801142a <USBD_StdEPReq+0x112>
 8011410:	7bbb      	ldrb	r3, [r7, #14]
 8011412:	2b80      	cmp	r3, #128	; 0x80
 8011414:	d009      	beq.n	801142a <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8011416:	7bbb      	ldrb	r3, [r7, #14]
 8011418:	4619      	mov	r1, r3
 801141a:	6878      	ldr	r0, [r7, #4]
 801141c:	f004 fa38 	bl	8015890 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8011420:	2180      	movs	r1, #128	; 0x80
 8011422:	6878      	ldr	r0, [r7, #4]
 8011424:	f004 fa34 	bl	8015890 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8011428:	e01c      	b.n	8011464 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 801142a:	6839      	ldr	r1, [r7, #0]
 801142c:	6878      	ldr	r0, [r7, #4]
 801142e:	f000 fb72 	bl	8011b16 <USBD_CtlError>
        break;
 8011432:	e017      	b.n	8011464 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8011434:	683b      	ldr	r3, [r7, #0]
 8011436:	885b      	ldrh	r3, [r3, #2]
 8011438:	2b00      	cmp	r3, #0
 801143a:	d112      	bne.n	8011462 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 801143c:	7bbb      	ldrb	r3, [r7, #14]
 801143e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011442:	2b00      	cmp	r3, #0
 8011444:	d004      	beq.n	8011450 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8011446:	7bbb      	ldrb	r3, [r7, #14]
 8011448:	4619      	mov	r1, r3
 801144a:	6878      	ldr	r0, [r7, #4]
 801144c:	f004 fa3f 	bl	80158ce <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8011450:	6878      	ldr	r0, [r7, #4]
 8011452:	f000 fc29 	bl	8011ca8 <USBD_CtlSendStatus>
        }
        break;
 8011456:	e004      	b.n	8011462 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8011458:	6839      	ldr	r1, [r7, #0]
 801145a:	6878      	ldr	r0, [r7, #4]
 801145c:	f000 fb5b 	bl	8011b16 <USBD_CtlError>
        break;
 8011460:	e000      	b.n	8011464 <USBD_StdEPReq+0x14c>
        break;
 8011462:	bf00      	nop
      }
      break;
 8011464:	e0a8      	b.n	80115b8 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 801146c:	2b02      	cmp	r3, #2
 801146e:	d002      	beq.n	8011476 <USBD_StdEPReq+0x15e>
 8011470:	2b03      	cmp	r3, #3
 8011472:	d031      	beq.n	80114d8 <USBD_StdEPReq+0x1c0>
 8011474:	e095      	b.n	80115a2 <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011476:	7bbb      	ldrb	r3, [r7, #14]
 8011478:	2b00      	cmp	r3, #0
 801147a:	d007      	beq.n	801148c <USBD_StdEPReq+0x174>
 801147c:	7bbb      	ldrb	r3, [r7, #14]
 801147e:	2b80      	cmp	r3, #128	; 0x80
 8011480:	d004      	beq.n	801148c <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 8011482:	6839      	ldr	r1, [r7, #0]
 8011484:	6878      	ldr	r0, [r7, #4]
 8011486:	f000 fb46 	bl	8011b16 <USBD_CtlError>
          break;
 801148a:	e08f      	b.n	80115ac <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 801148c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011490:	2b00      	cmp	r3, #0
 8011492:	da0b      	bge.n	80114ac <USBD_StdEPReq+0x194>
 8011494:	7bbb      	ldrb	r3, [r7, #14]
 8011496:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801149a:	4613      	mov	r3, r2
 801149c:	009b      	lsls	r3, r3, #2
 801149e:	4413      	add	r3, r2
 80114a0:	009b      	lsls	r3, r3, #2
 80114a2:	3310      	adds	r3, #16
 80114a4:	687a      	ldr	r2, [r7, #4]
 80114a6:	4413      	add	r3, r2
 80114a8:	3304      	adds	r3, #4
 80114aa:	e00a      	b.n	80114c2 <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 80114ac:	7bbb      	ldrb	r3, [r7, #14]
 80114ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80114b2:	4613      	mov	r3, r2
 80114b4:	009b      	lsls	r3, r3, #2
 80114b6:	4413      	add	r3, r2
 80114b8:	009b      	lsls	r3, r3, #2
 80114ba:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80114be:	687a      	ldr	r2, [r7, #4]
 80114c0:	4413      	add	r3, r2
 80114c2:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 80114c4:	68bb      	ldr	r3, [r7, #8]
 80114c6:	2200      	movs	r2, #0
 80114c8:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80114ca:	68bb      	ldr	r3, [r7, #8]
 80114cc:	2202      	movs	r2, #2
 80114ce:	4619      	mov	r1, r3
 80114d0:	6878      	ldr	r0, [r7, #4]
 80114d2:	f000 fb8b 	bl	8011bec <USBD_CtlSendData>
          break;
 80114d6:	e069      	b.n	80115ac <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 80114d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80114dc:	2b00      	cmp	r3, #0
 80114de:	da11      	bge.n	8011504 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80114e0:	7bbb      	ldrb	r3, [r7, #14]
 80114e2:	f003 020f 	and.w	r2, r3, #15
 80114e6:	6879      	ldr	r1, [r7, #4]
 80114e8:	4613      	mov	r3, r2
 80114ea:	009b      	lsls	r3, r3, #2
 80114ec:	4413      	add	r3, r2
 80114ee:	009b      	lsls	r3, r3, #2
 80114f0:	440b      	add	r3, r1
 80114f2:	3318      	adds	r3, #24
 80114f4:	681b      	ldr	r3, [r3, #0]
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d117      	bne.n	801152a <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 80114fa:	6839      	ldr	r1, [r7, #0]
 80114fc:	6878      	ldr	r0, [r7, #4]
 80114fe:	f000 fb0a 	bl	8011b16 <USBD_CtlError>
            break;
 8011502:	e053      	b.n	80115ac <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8011504:	7bbb      	ldrb	r3, [r7, #14]
 8011506:	f003 020f 	and.w	r2, r3, #15
 801150a:	6879      	ldr	r1, [r7, #4]
 801150c:	4613      	mov	r3, r2
 801150e:	009b      	lsls	r3, r3, #2
 8011510:	4413      	add	r3, r2
 8011512:	009b      	lsls	r3, r3, #2
 8011514:	440b      	add	r3, r1
 8011516:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801151a:	681b      	ldr	r3, [r3, #0]
 801151c:	2b00      	cmp	r3, #0
 801151e:	d104      	bne.n	801152a <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8011520:	6839      	ldr	r1, [r7, #0]
 8011522:	6878      	ldr	r0, [r7, #4]
 8011524:	f000 faf7 	bl	8011b16 <USBD_CtlError>
            break;
 8011528:	e040      	b.n	80115ac <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 801152a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801152e:	2b00      	cmp	r3, #0
 8011530:	da0b      	bge.n	801154a <USBD_StdEPReq+0x232>
 8011532:	7bbb      	ldrb	r3, [r7, #14]
 8011534:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011538:	4613      	mov	r3, r2
 801153a:	009b      	lsls	r3, r3, #2
 801153c:	4413      	add	r3, r2
 801153e:	009b      	lsls	r3, r3, #2
 8011540:	3310      	adds	r3, #16
 8011542:	687a      	ldr	r2, [r7, #4]
 8011544:	4413      	add	r3, r2
 8011546:	3304      	adds	r3, #4
 8011548:	e00a      	b.n	8011560 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 801154a:	7bbb      	ldrb	r3, [r7, #14]
 801154c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8011550:	4613      	mov	r3, r2
 8011552:	009b      	lsls	r3, r3, #2
 8011554:	4413      	add	r3, r2
 8011556:	009b      	lsls	r3, r3, #2
 8011558:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 801155c:	687a      	ldr	r2, [r7, #4]
 801155e:	4413      	add	r3, r2
 8011560:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8011562:	7bbb      	ldrb	r3, [r7, #14]
 8011564:	2b00      	cmp	r3, #0
 8011566:	d002      	beq.n	801156e <USBD_StdEPReq+0x256>
 8011568:	7bbb      	ldrb	r3, [r7, #14]
 801156a:	2b80      	cmp	r3, #128	; 0x80
 801156c:	d103      	bne.n	8011576 <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 801156e:	68bb      	ldr	r3, [r7, #8]
 8011570:	2200      	movs	r2, #0
 8011572:	601a      	str	r2, [r3, #0]
 8011574:	e00e      	b.n	8011594 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8011576:	7bbb      	ldrb	r3, [r7, #14]
 8011578:	4619      	mov	r1, r3
 801157a:	6878      	ldr	r0, [r7, #4]
 801157c:	f004 f9c6 	bl	801590c <USBD_LL_IsStallEP>
 8011580:	4603      	mov	r3, r0
 8011582:	2b00      	cmp	r3, #0
 8011584:	d003      	beq.n	801158e <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 8011586:	68bb      	ldr	r3, [r7, #8]
 8011588:	2201      	movs	r2, #1
 801158a:	601a      	str	r2, [r3, #0]
 801158c:	e002      	b.n	8011594 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 801158e:	68bb      	ldr	r3, [r7, #8]
 8011590:	2200      	movs	r2, #0
 8011592:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8011594:	68bb      	ldr	r3, [r7, #8]
 8011596:	2202      	movs	r2, #2
 8011598:	4619      	mov	r1, r3
 801159a:	6878      	ldr	r0, [r7, #4]
 801159c:	f000 fb26 	bl	8011bec <USBD_CtlSendData>
          break;
 80115a0:	e004      	b.n	80115ac <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 80115a2:	6839      	ldr	r1, [r7, #0]
 80115a4:	6878      	ldr	r0, [r7, #4]
 80115a6:	f000 fab6 	bl	8011b16 <USBD_CtlError>
        break;
 80115aa:	bf00      	nop
      }
      break;
 80115ac:	e004      	b.n	80115b8 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 80115ae:	6839      	ldr	r1, [r7, #0]
 80115b0:	6878      	ldr	r0, [r7, #4]
 80115b2:	f000 fab0 	bl	8011b16 <USBD_CtlError>
      break;
 80115b6:	bf00      	nop
    }
    break;
 80115b8:	e004      	b.n	80115c4 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 80115ba:	6839      	ldr	r1, [r7, #0]
 80115bc:	6878      	ldr	r0, [r7, #4]
 80115be:	f000 faaa 	bl	8011b16 <USBD_CtlError>
    break;
 80115c2:	bf00      	nop
  }

  return ret;
 80115c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80115c6:	4618      	mov	r0, r3
 80115c8:	3710      	adds	r7, #16
 80115ca:	46bd      	mov	sp, r7
 80115cc:	bd80      	pop	{r7, pc}
	...

080115d0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 80115d0:	b580      	push	{r7, lr}
 80115d2:	b084      	sub	sp, #16
 80115d4:	af00      	add	r7, sp, #0
 80115d6:	6078      	str	r0, [r7, #4]
 80115d8:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 80115da:	683b      	ldr	r3, [r7, #0]
 80115dc:	885b      	ldrh	r3, [r3, #2]
 80115de:	0a1b      	lsrs	r3, r3, #8
 80115e0:	b29b      	uxth	r3, r3
 80115e2:	3b01      	subs	r3, #1
 80115e4:	2b06      	cmp	r3, #6
 80115e6:	f200 80c9 	bhi.w	801177c <USBD_GetDescriptor+0x1ac>
 80115ea:	a201      	add	r2, pc, #4	; (adr r2, 80115f0 <USBD_GetDescriptor+0x20>)
 80115ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115f0:	0801160d 	.word	0x0801160d
 80115f4:	08011625 	.word	0x08011625
 80115f8:	08011665 	.word	0x08011665
 80115fc:	0801177d 	.word	0x0801177d
 8011600:	0801177d 	.word	0x0801177d
 8011604:	08011729 	.word	0x08011729
 8011608:	0801174f 	.word	0x0801174f
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8011612:	681b      	ldr	r3, [r3, #0]
 8011614:	687a      	ldr	r2, [r7, #4]
 8011616:	7c12      	ldrb	r2, [r2, #16]
 8011618:	f107 010a 	add.w	r1, r7, #10
 801161c:	4610      	mov	r0, r2
 801161e:	4798      	blx	r3
 8011620:	60f8      	str	r0, [r7, #12]
    break;
 8011622:	e0b0      	b.n	8011786 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	7c1b      	ldrb	r3, [r3, #16]
 8011628:	2b00      	cmp	r3, #0
 801162a:	d10d      	bne.n	8011648 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8011632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011634:	f107 020a 	add.w	r2, r7, #10
 8011638:	4610      	mov	r0, r2
 801163a:	4798      	blx	r3
 801163c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801163e:	68fb      	ldr	r3, [r7, #12]
 8011640:	3301      	adds	r3, #1
 8011642:	2202      	movs	r2, #2
 8011644:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8011646:	e09e      	b.n	8011786 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 801164e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011650:	f107 020a 	add.w	r2, r7, #10
 8011654:	4610      	mov	r0, r2
 8011656:	4798      	blx	r3
 8011658:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801165a:	68fb      	ldr	r3, [r7, #12]
 801165c:	3301      	adds	r3, #1
 801165e:	2202      	movs	r2, #2
 8011660:	701a      	strb	r2, [r3, #0]
    break;
 8011662:	e090      	b.n	8011786 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8011664:	683b      	ldr	r3, [r7, #0]
 8011666:	885b      	ldrh	r3, [r3, #2]
 8011668:	b2db      	uxtb	r3, r3
 801166a:	2b05      	cmp	r3, #5
 801166c:	d856      	bhi.n	801171c <USBD_GetDescriptor+0x14c>
 801166e:	a201      	add	r2, pc, #4	; (adr r2, 8011674 <USBD_GetDescriptor+0xa4>)
 8011670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011674:	0801168d 	.word	0x0801168d
 8011678:	080116a5 	.word	0x080116a5
 801167c:	080116bd 	.word	0x080116bd
 8011680:	080116d5 	.word	0x080116d5
 8011684:	080116ed 	.word	0x080116ed
 8011688:	08011705 	.word	0x08011705
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8011692:	685b      	ldr	r3, [r3, #4]
 8011694:	687a      	ldr	r2, [r7, #4]
 8011696:	7c12      	ldrb	r2, [r2, #16]
 8011698:	f107 010a 	add.w	r1, r7, #10
 801169c:	4610      	mov	r0, r2
 801169e:	4798      	blx	r3
 80116a0:	60f8      	str	r0, [r7, #12]
      break;
 80116a2:	e040      	b.n	8011726 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80116aa:	689b      	ldr	r3, [r3, #8]
 80116ac:	687a      	ldr	r2, [r7, #4]
 80116ae:	7c12      	ldrb	r2, [r2, #16]
 80116b0:	f107 010a 	add.w	r1, r7, #10
 80116b4:	4610      	mov	r0, r2
 80116b6:	4798      	blx	r3
 80116b8:	60f8      	str	r0, [r7, #12]
      break;
 80116ba:	e034      	b.n	8011726 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80116c2:	68db      	ldr	r3, [r3, #12]
 80116c4:	687a      	ldr	r2, [r7, #4]
 80116c6:	7c12      	ldrb	r2, [r2, #16]
 80116c8:	f107 010a 	add.w	r1, r7, #10
 80116cc:	4610      	mov	r0, r2
 80116ce:	4798      	blx	r3
 80116d0:	60f8      	str	r0, [r7, #12]
      break;
 80116d2:	e028      	b.n	8011726 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80116da:	691b      	ldr	r3, [r3, #16]
 80116dc:	687a      	ldr	r2, [r7, #4]
 80116de:	7c12      	ldrb	r2, [r2, #16]
 80116e0:	f107 010a 	add.w	r1, r7, #10
 80116e4:	4610      	mov	r0, r2
 80116e6:	4798      	blx	r3
 80116e8:	60f8      	str	r0, [r7, #12]
      break;
 80116ea:	e01c      	b.n	8011726 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80116f2:	695b      	ldr	r3, [r3, #20]
 80116f4:	687a      	ldr	r2, [r7, #4]
 80116f6:	7c12      	ldrb	r2, [r2, #16]
 80116f8:	f107 010a 	add.w	r1, r7, #10
 80116fc:	4610      	mov	r0, r2
 80116fe:	4798      	blx	r3
 8011700:	60f8      	str	r0, [r7, #12]
      break;
 8011702:	e010      	b.n	8011726 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 801170a:	699b      	ldr	r3, [r3, #24]
 801170c:	687a      	ldr	r2, [r7, #4]
 801170e:	7c12      	ldrb	r2, [r2, #16]
 8011710:	f107 010a 	add.w	r1, r7, #10
 8011714:	4610      	mov	r0, r2
 8011716:	4798      	blx	r3
 8011718:	60f8      	str	r0, [r7, #12]
      break;
 801171a:	e004      	b.n	8011726 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 801171c:	6839      	ldr	r1, [r7, #0]
 801171e:	6878      	ldr	r0, [r7, #4]
 8011720:	f000 f9f9 	bl	8011b16 <USBD_CtlError>
      return;
 8011724:	e04b      	b.n	80117be <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 8011726:	e02e      	b.n	8011786 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	7c1b      	ldrb	r3, [r3, #16]
 801172c:	2b00      	cmp	r3, #0
 801172e:	d109      	bne.n	8011744 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8011736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011738:	f107 020a 	add.w	r2, r7, #10
 801173c:	4610      	mov	r0, r2
 801173e:	4798      	blx	r3
 8011740:	60f8      	str	r0, [r7, #12]
      break;
 8011742:	e020      	b.n	8011786 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8011744:	6839      	ldr	r1, [r7, #0]
 8011746:	6878      	ldr	r0, [r7, #4]
 8011748:	f000 f9e5 	bl	8011b16 <USBD_CtlError>
      return;
 801174c:	e037      	b.n	80117be <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	7c1b      	ldrb	r3, [r3, #16]
 8011752:	2b00      	cmp	r3, #0
 8011754:	d10d      	bne.n	8011772 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 801175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801175e:	f107 020a 	add.w	r2, r7, #10
 8011762:	4610      	mov	r0, r2
 8011764:	4798      	blx	r3
 8011766:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8011768:	68fb      	ldr	r3, [r7, #12]
 801176a:	3301      	adds	r3, #1
 801176c:	2207      	movs	r2, #7
 801176e:	701a      	strb	r2, [r3, #0]
      break;
 8011770:	e009      	b.n	8011786 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8011772:	6839      	ldr	r1, [r7, #0]
 8011774:	6878      	ldr	r0, [r7, #4]
 8011776:	f000 f9ce 	bl	8011b16 <USBD_CtlError>
      return;
 801177a:	e020      	b.n	80117be <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 801177c:	6839      	ldr	r1, [r7, #0]
 801177e:	6878      	ldr	r0, [r7, #4]
 8011780:	f000 f9c9 	bl	8011b16 <USBD_CtlError>
    return;
 8011784:	e01b      	b.n	80117be <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 8011786:	897b      	ldrh	r3, [r7, #10]
 8011788:	2b00      	cmp	r3, #0
 801178a:	d011      	beq.n	80117b0 <USBD_GetDescriptor+0x1e0>
 801178c:	683b      	ldr	r3, [r7, #0]
 801178e:	88db      	ldrh	r3, [r3, #6]
 8011790:	2b00      	cmp	r3, #0
 8011792:	d00d      	beq.n	80117b0 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 8011794:	683b      	ldr	r3, [r7, #0]
 8011796:	88da      	ldrh	r2, [r3, #6]
 8011798:	897b      	ldrh	r3, [r7, #10]
 801179a:	4293      	cmp	r3, r2
 801179c:	bf28      	it	cs
 801179e:	4613      	movcs	r3, r2
 80117a0:	b29b      	uxth	r3, r3
 80117a2:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 80117a4:	897b      	ldrh	r3, [r7, #10]
 80117a6:	461a      	mov	r2, r3
 80117a8:	68f9      	ldr	r1, [r7, #12]
 80117aa:	6878      	ldr	r0, [r7, #4]
 80117ac:	f000 fa1e 	bl	8011bec <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 80117b0:	683b      	ldr	r3, [r7, #0]
 80117b2:	88db      	ldrh	r3, [r3, #6]
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d102      	bne.n	80117be <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 80117b8:	6878      	ldr	r0, [r7, #4]
 80117ba:	f000 fa75 	bl	8011ca8 <USBD_CtlSendStatus>
  }
}
 80117be:	3710      	adds	r7, #16
 80117c0:	46bd      	mov	sp, r7
 80117c2:	bd80      	pop	{r7, pc}

080117c4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80117c4:	b580      	push	{r7, lr}
 80117c6:	b084      	sub	sp, #16
 80117c8:	af00      	add	r7, sp, #0
 80117ca:	6078      	str	r0, [r7, #4]
 80117cc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80117ce:	683b      	ldr	r3, [r7, #0]
 80117d0:	889b      	ldrh	r3, [r3, #4]
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d130      	bne.n	8011838 <USBD_SetAddress+0x74>
 80117d6:	683b      	ldr	r3, [r7, #0]
 80117d8:	88db      	ldrh	r3, [r3, #6]
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d12c      	bne.n	8011838 <USBD_SetAddress+0x74>
 80117de:	683b      	ldr	r3, [r7, #0]
 80117e0:	885b      	ldrh	r3, [r3, #2]
 80117e2:	2b7f      	cmp	r3, #127	; 0x7f
 80117e4:	d828      	bhi.n	8011838 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80117e6:	683b      	ldr	r3, [r7, #0]
 80117e8:	885b      	ldrh	r3, [r3, #2]
 80117ea:	b2db      	uxtb	r3, r3
 80117ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80117f0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80117f8:	2b03      	cmp	r3, #3
 80117fa:	d104      	bne.n	8011806 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 80117fc:	6839      	ldr	r1, [r7, #0]
 80117fe:	6878      	ldr	r0, [r7, #4]
 8011800:	f000 f989 	bl	8011b16 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011804:	e01c      	b.n	8011840 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	7bfa      	ldrb	r2, [r7, #15]
 801180a:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 801180e:	7bfb      	ldrb	r3, [r7, #15]
 8011810:	4619      	mov	r1, r3
 8011812:	6878      	ldr	r0, [r7, #4]
 8011814:	f004 f8a6 	bl	8015964 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8011818:	6878      	ldr	r0, [r7, #4]
 801181a:	f000 fa45 	bl	8011ca8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801181e:	7bfb      	ldrb	r3, [r7, #15]
 8011820:	2b00      	cmp	r3, #0
 8011822:	d004      	beq.n	801182e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	2202      	movs	r2, #2
 8011828:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801182c:	e008      	b.n	8011840 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	2201      	movs	r2, #1
 8011832:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011836:	e003      	b.n	8011840 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8011838:	6839      	ldr	r1, [r7, #0]
 801183a:	6878      	ldr	r0, [r7, #4]
 801183c:	f000 f96b 	bl	8011b16 <USBD_CtlError>
  }
}
 8011840:	bf00      	nop
 8011842:	3710      	adds	r7, #16
 8011844:	46bd      	mov	sp, r7
 8011846:	bd80      	pop	{r7, pc}

08011848 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011848:	b580      	push	{r7, lr}
 801184a:	b082      	sub	sp, #8
 801184c:	af00      	add	r7, sp, #0
 801184e:	6078      	str	r0, [r7, #4]
 8011850:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8011852:	683b      	ldr	r3, [r7, #0]
 8011854:	885b      	ldrh	r3, [r3, #2]
 8011856:	b2da      	uxtb	r2, r3
 8011858:	4b41      	ldr	r3, [pc, #260]	; (8011960 <USBD_SetConfig+0x118>)
 801185a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801185c:	4b40      	ldr	r3, [pc, #256]	; (8011960 <USBD_SetConfig+0x118>)
 801185e:	781b      	ldrb	r3, [r3, #0]
 8011860:	2b01      	cmp	r3, #1
 8011862:	d904      	bls.n	801186e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8011864:	6839      	ldr	r1, [r7, #0]
 8011866:	6878      	ldr	r0, [r7, #4]
 8011868:	f000 f955 	bl	8011b16 <USBD_CtlError>
 801186c:	e075      	b.n	801195a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8011874:	2b02      	cmp	r3, #2
 8011876:	d002      	beq.n	801187e <USBD_SetConfig+0x36>
 8011878:	2b03      	cmp	r3, #3
 801187a:	d023      	beq.n	80118c4 <USBD_SetConfig+0x7c>
 801187c:	e062      	b.n	8011944 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 801187e:	4b38      	ldr	r3, [pc, #224]	; (8011960 <USBD_SetConfig+0x118>)
 8011880:	781b      	ldrb	r3, [r3, #0]
 8011882:	2b00      	cmp	r3, #0
 8011884:	d01a      	beq.n	80118bc <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 8011886:	4b36      	ldr	r3, [pc, #216]	; (8011960 <USBD_SetConfig+0x118>)
 8011888:	781b      	ldrb	r3, [r3, #0]
 801188a:	461a      	mov	r2, r3
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	2203      	movs	r2, #3
 8011894:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8011898:	4b31      	ldr	r3, [pc, #196]	; (8011960 <USBD_SetConfig+0x118>)
 801189a:	781b      	ldrb	r3, [r3, #0]
 801189c:	4619      	mov	r1, r3
 801189e:	6878      	ldr	r0, [r7, #4]
 80118a0:	f7ff fa2a 	bl	8010cf8 <USBD_SetClassConfig>
 80118a4:	4603      	mov	r3, r0
 80118a6:	2b02      	cmp	r3, #2
 80118a8:	d104      	bne.n	80118b4 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 80118aa:	6839      	ldr	r1, [r7, #0]
 80118ac:	6878      	ldr	r0, [r7, #4]
 80118ae:	f000 f932 	bl	8011b16 <USBD_CtlError>
          return;
 80118b2:	e052      	b.n	801195a <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 80118b4:	6878      	ldr	r0, [r7, #4]
 80118b6:	f000 f9f7 	bl	8011ca8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80118ba:	e04e      	b.n	801195a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80118bc:	6878      	ldr	r0, [r7, #4]
 80118be:	f000 f9f3 	bl	8011ca8 <USBD_CtlSendStatus>
      break;
 80118c2:	e04a      	b.n	801195a <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80118c4:	4b26      	ldr	r3, [pc, #152]	; (8011960 <USBD_SetConfig+0x118>)
 80118c6:	781b      	ldrb	r3, [r3, #0]
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	d112      	bne.n	80118f2 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	2202      	movs	r2, #2
 80118d0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 80118d4:	4b22      	ldr	r3, [pc, #136]	; (8011960 <USBD_SetConfig+0x118>)
 80118d6:	781b      	ldrb	r3, [r3, #0]
 80118d8:	461a      	mov	r2, r3
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 80118de:	4b20      	ldr	r3, [pc, #128]	; (8011960 <USBD_SetConfig+0x118>)
 80118e0:	781b      	ldrb	r3, [r3, #0]
 80118e2:	4619      	mov	r1, r3
 80118e4:	6878      	ldr	r0, [r7, #4]
 80118e6:	f7ff fa26 	bl	8010d36 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 80118ea:	6878      	ldr	r0, [r7, #4]
 80118ec:	f000 f9dc 	bl	8011ca8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80118f0:	e033      	b.n	801195a <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 80118f2:	4b1b      	ldr	r3, [pc, #108]	; (8011960 <USBD_SetConfig+0x118>)
 80118f4:	781b      	ldrb	r3, [r3, #0]
 80118f6:	461a      	mov	r2, r3
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	685b      	ldr	r3, [r3, #4]
 80118fc:	429a      	cmp	r2, r3
 80118fe:	d01d      	beq.n	801193c <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	685b      	ldr	r3, [r3, #4]
 8011904:	b2db      	uxtb	r3, r3
 8011906:	4619      	mov	r1, r3
 8011908:	6878      	ldr	r0, [r7, #4]
 801190a:	f7ff fa14 	bl	8010d36 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801190e:	4b14      	ldr	r3, [pc, #80]	; (8011960 <USBD_SetConfig+0x118>)
 8011910:	781b      	ldrb	r3, [r3, #0]
 8011912:	461a      	mov	r2, r3
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8011918:	4b11      	ldr	r3, [pc, #68]	; (8011960 <USBD_SetConfig+0x118>)
 801191a:	781b      	ldrb	r3, [r3, #0]
 801191c:	4619      	mov	r1, r3
 801191e:	6878      	ldr	r0, [r7, #4]
 8011920:	f7ff f9ea 	bl	8010cf8 <USBD_SetClassConfig>
 8011924:	4603      	mov	r3, r0
 8011926:	2b02      	cmp	r3, #2
 8011928:	d104      	bne.n	8011934 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 801192a:	6839      	ldr	r1, [r7, #0]
 801192c:	6878      	ldr	r0, [r7, #4]
 801192e:	f000 f8f2 	bl	8011b16 <USBD_CtlError>
          return;
 8011932:	e012      	b.n	801195a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8011934:	6878      	ldr	r0, [r7, #4]
 8011936:	f000 f9b7 	bl	8011ca8 <USBD_CtlSendStatus>
      break;
 801193a:	e00e      	b.n	801195a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 801193c:	6878      	ldr	r0, [r7, #4]
 801193e:	f000 f9b3 	bl	8011ca8 <USBD_CtlSendStatus>
      break;
 8011942:	e00a      	b.n	801195a <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8011944:	6839      	ldr	r1, [r7, #0]
 8011946:	6878      	ldr	r0, [r7, #4]
 8011948:	f000 f8e5 	bl	8011b16 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 801194c:	4b04      	ldr	r3, [pc, #16]	; (8011960 <USBD_SetConfig+0x118>)
 801194e:	781b      	ldrb	r3, [r3, #0]
 8011950:	4619      	mov	r1, r3
 8011952:	6878      	ldr	r0, [r7, #4]
 8011954:	f7ff f9ef 	bl	8010d36 <USBD_ClrClassConfig>
      break;
 8011958:	bf00      	nop
    }
  }
}
 801195a:	3708      	adds	r7, #8
 801195c:	46bd      	mov	sp, r7
 801195e:	bd80      	pop	{r7, pc}
 8011960:	200014b4 	.word	0x200014b4

08011964 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011964:	b580      	push	{r7, lr}
 8011966:	b082      	sub	sp, #8
 8011968:	af00      	add	r7, sp, #0
 801196a:	6078      	str	r0, [r7, #4]
 801196c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801196e:	683b      	ldr	r3, [r7, #0]
 8011970:	88db      	ldrh	r3, [r3, #6]
 8011972:	2b01      	cmp	r3, #1
 8011974:	d004      	beq.n	8011980 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 8011976:	6839      	ldr	r1, [r7, #0]
 8011978:	6878      	ldr	r0, [r7, #4]
 801197a:	f000 f8cc 	bl	8011b16 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 801197e:	e021      	b.n	80119c4 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8011986:	2b01      	cmp	r3, #1
 8011988:	db17      	blt.n	80119ba <USBD_GetConfig+0x56>
 801198a:	2b02      	cmp	r3, #2
 801198c:	dd02      	ble.n	8011994 <USBD_GetConfig+0x30>
 801198e:	2b03      	cmp	r3, #3
 8011990:	d00b      	beq.n	80119aa <USBD_GetConfig+0x46>
 8011992:	e012      	b.n	80119ba <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	2200      	movs	r2, #0
 8011998:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	3308      	adds	r3, #8
 801199e:	2201      	movs	r2, #1
 80119a0:	4619      	mov	r1, r3
 80119a2:	6878      	ldr	r0, [r7, #4]
 80119a4:	f000 f922 	bl	8011bec <USBD_CtlSendData>
      break;
 80119a8:	e00c      	b.n	80119c4 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	3304      	adds	r3, #4
 80119ae:	2201      	movs	r2, #1
 80119b0:	4619      	mov	r1, r3
 80119b2:	6878      	ldr	r0, [r7, #4]
 80119b4:	f000 f91a 	bl	8011bec <USBD_CtlSendData>
      break;
 80119b8:	e004      	b.n	80119c4 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 80119ba:	6839      	ldr	r1, [r7, #0]
 80119bc:	6878      	ldr	r0, [r7, #4]
 80119be:	f000 f8aa 	bl	8011b16 <USBD_CtlError>
      break;
 80119c2:	bf00      	nop
}
 80119c4:	bf00      	nop
 80119c6:	3708      	adds	r7, #8
 80119c8:	46bd      	mov	sp, r7
 80119ca:	bd80      	pop	{r7, pc}

080119cc <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80119cc:	b580      	push	{r7, lr}
 80119ce:	b082      	sub	sp, #8
 80119d0:	af00      	add	r7, sp, #0
 80119d2:	6078      	str	r0, [r7, #4]
 80119d4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80119dc:	3b01      	subs	r3, #1
 80119de:	2b02      	cmp	r3, #2
 80119e0:	d81e      	bhi.n	8011a20 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 80119e2:	683b      	ldr	r3, [r7, #0]
 80119e4:	88db      	ldrh	r3, [r3, #6]
 80119e6:	2b02      	cmp	r3, #2
 80119e8:	d004      	beq.n	80119f4 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80119ea:	6839      	ldr	r1, [r7, #0]
 80119ec:	6878      	ldr	r0, [r7, #4]
 80119ee:	f000 f892 	bl	8011b16 <USBD_CtlError>
      break;
 80119f2:	e01a      	b.n	8011a2a <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	2201      	movs	r2, #1
 80119f8:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d005      	beq.n	8011a10 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	68db      	ldr	r3, [r3, #12]
 8011a08:	f043 0202 	orr.w	r2, r3, #2
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	330c      	adds	r3, #12
 8011a14:	2202      	movs	r2, #2
 8011a16:	4619      	mov	r1, r3
 8011a18:	6878      	ldr	r0, [r7, #4]
 8011a1a:	f000 f8e7 	bl	8011bec <USBD_CtlSendData>
    break;
 8011a1e:	e004      	b.n	8011a2a <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8011a20:	6839      	ldr	r1, [r7, #0]
 8011a22:	6878      	ldr	r0, [r7, #4]
 8011a24:	f000 f877 	bl	8011b16 <USBD_CtlError>
    break;
 8011a28:	bf00      	nop
  }
}
 8011a2a:	bf00      	nop
 8011a2c:	3708      	adds	r7, #8
 8011a2e:	46bd      	mov	sp, r7
 8011a30:	bd80      	pop	{r7, pc}

08011a32 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8011a32:	b580      	push	{r7, lr}
 8011a34:	b082      	sub	sp, #8
 8011a36:	af00      	add	r7, sp, #0
 8011a38:	6078      	str	r0, [r7, #4]
 8011a3a:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011a3c:	683b      	ldr	r3, [r7, #0]
 8011a3e:	885b      	ldrh	r3, [r3, #2]
 8011a40:	2b01      	cmp	r3, #1
 8011a42:	d106      	bne.n	8011a52 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	2201      	movs	r2, #1
 8011a48:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8011a4c:	6878      	ldr	r0, [r7, #4]
 8011a4e:	f000 f92b 	bl	8011ca8 <USBD_CtlSendStatus>
  }

}
 8011a52:	bf00      	nop
 8011a54:	3708      	adds	r7, #8
 8011a56:	46bd      	mov	sp, r7
 8011a58:	bd80      	pop	{r7, pc}

08011a5a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8011a5a:	b580      	push	{r7, lr}
 8011a5c:	b082      	sub	sp, #8
 8011a5e:	af00      	add	r7, sp, #0
 8011a60:	6078      	str	r0, [r7, #4]
 8011a62:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8011a6a:	3b01      	subs	r3, #1
 8011a6c:	2b02      	cmp	r3, #2
 8011a6e:	d80b      	bhi.n	8011a88 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011a70:	683b      	ldr	r3, [r7, #0]
 8011a72:	885b      	ldrh	r3, [r3, #2]
 8011a74:	2b01      	cmp	r3, #1
 8011a76:	d10c      	bne.n	8011a92 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	2200      	movs	r2, #0
 8011a7c:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8011a80:	6878      	ldr	r0, [r7, #4]
 8011a82:	f000 f911 	bl	8011ca8 <USBD_CtlSendStatus>
    }
    break;
 8011a86:	e004      	b.n	8011a92 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8011a88:	6839      	ldr	r1, [r7, #0]
 8011a8a:	6878      	ldr	r0, [r7, #4]
 8011a8c:	f000 f843 	bl	8011b16 <USBD_CtlError>
    break;
 8011a90:	e000      	b.n	8011a94 <USBD_ClrFeature+0x3a>
    break;
 8011a92:	bf00      	nop
  }
}
 8011a94:	bf00      	nop
 8011a96:	3708      	adds	r7, #8
 8011a98:	46bd      	mov	sp, r7
 8011a9a:	bd80      	pop	{r7, pc}

08011a9c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8011a9c:	b480      	push	{r7}
 8011a9e:	b083      	sub	sp, #12
 8011aa0:	af00      	add	r7, sp, #0
 8011aa2:	6078      	str	r0, [r7, #4]
 8011aa4:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8011aa6:	683b      	ldr	r3, [r7, #0]
 8011aa8:	781a      	ldrb	r2, [r3, #0]
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8011aae:	683b      	ldr	r3, [r7, #0]
 8011ab0:	785a      	ldrb	r2, [r3, #1]
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8011ab6:	683b      	ldr	r3, [r7, #0]
 8011ab8:	3302      	adds	r3, #2
 8011aba:	781b      	ldrb	r3, [r3, #0]
 8011abc:	b29a      	uxth	r2, r3
 8011abe:	683b      	ldr	r3, [r7, #0]
 8011ac0:	3303      	adds	r3, #3
 8011ac2:	781b      	ldrb	r3, [r3, #0]
 8011ac4:	b29b      	uxth	r3, r3
 8011ac6:	021b      	lsls	r3, r3, #8
 8011ac8:	b29b      	uxth	r3, r3
 8011aca:	4413      	add	r3, r2
 8011acc:	b29a      	uxth	r2, r3
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8011ad2:	683b      	ldr	r3, [r7, #0]
 8011ad4:	3304      	adds	r3, #4
 8011ad6:	781b      	ldrb	r3, [r3, #0]
 8011ad8:	b29a      	uxth	r2, r3
 8011ada:	683b      	ldr	r3, [r7, #0]
 8011adc:	3305      	adds	r3, #5
 8011ade:	781b      	ldrb	r3, [r3, #0]
 8011ae0:	b29b      	uxth	r3, r3
 8011ae2:	021b      	lsls	r3, r3, #8
 8011ae4:	b29b      	uxth	r3, r3
 8011ae6:	4413      	add	r3, r2
 8011ae8:	b29a      	uxth	r2, r3
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8011aee:	683b      	ldr	r3, [r7, #0]
 8011af0:	3306      	adds	r3, #6
 8011af2:	781b      	ldrb	r3, [r3, #0]
 8011af4:	b29a      	uxth	r2, r3
 8011af6:	683b      	ldr	r3, [r7, #0]
 8011af8:	3307      	adds	r3, #7
 8011afa:	781b      	ldrb	r3, [r3, #0]
 8011afc:	b29b      	uxth	r3, r3
 8011afe:	021b      	lsls	r3, r3, #8
 8011b00:	b29b      	uxth	r3, r3
 8011b02:	4413      	add	r3, r2
 8011b04:	b29a      	uxth	r2, r3
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	80da      	strh	r2, [r3, #6]

}
 8011b0a:	bf00      	nop
 8011b0c:	370c      	adds	r7, #12
 8011b0e:	46bd      	mov	sp, r7
 8011b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b14:	4770      	bx	lr

08011b16 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8011b16:	b580      	push	{r7, lr}
 8011b18:	b082      	sub	sp, #8
 8011b1a:	af00      	add	r7, sp, #0
 8011b1c:	6078      	str	r0, [r7, #4]
 8011b1e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8011b20:	2180      	movs	r1, #128	; 0x80
 8011b22:	6878      	ldr	r0, [r7, #4]
 8011b24:	f003 feb4 	bl	8015890 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8011b28:	2100      	movs	r1, #0
 8011b2a:	6878      	ldr	r0, [r7, #4]
 8011b2c:	f003 feb0 	bl	8015890 <USBD_LL_StallEP>
}
 8011b30:	bf00      	nop
 8011b32:	3708      	adds	r7, #8
 8011b34:	46bd      	mov	sp, r7
 8011b36:	bd80      	pop	{r7, pc}

08011b38 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8011b38:	b580      	push	{r7, lr}
 8011b3a:	b086      	sub	sp, #24
 8011b3c:	af00      	add	r7, sp, #0
 8011b3e:	60f8      	str	r0, [r7, #12]
 8011b40:	60b9      	str	r1, [r7, #8]
 8011b42:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8011b44:	2300      	movs	r3, #0
 8011b46:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8011b48:	68fb      	ldr	r3, [r7, #12]
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d032      	beq.n	8011bb4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8011b4e:	68f8      	ldr	r0, [r7, #12]
 8011b50:	f000 f834 	bl	8011bbc <USBD_GetLen>
 8011b54:	4603      	mov	r3, r0
 8011b56:	3301      	adds	r3, #1
 8011b58:	b29b      	uxth	r3, r3
 8011b5a:	005b      	lsls	r3, r3, #1
 8011b5c:	b29a      	uxth	r2, r3
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8011b62:	7dfb      	ldrb	r3, [r7, #23]
 8011b64:	1c5a      	adds	r2, r3, #1
 8011b66:	75fa      	strb	r2, [r7, #23]
 8011b68:	461a      	mov	r2, r3
 8011b6a:	68bb      	ldr	r3, [r7, #8]
 8011b6c:	4413      	add	r3, r2
 8011b6e:	687a      	ldr	r2, [r7, #4]
 8011b70:	7812      	ldrb	r2, [r2, #0]
 8011b72:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8011b74:	7dfb      	ldrb	r3, [r7, #23]
 8011b76:	1c5a      	adds	r2, r3, #1
 8011b78:	75fa      	strb	r2, [r7, #23]
 8011b7a:	461a      	mov	r2, r3
 8011b7c:	68bb      	ldr	r3, [r7, #8]
 8011b7e:	4413      	add	r3, r2
 8011b80:	2203      	movs	r2, #3
 8011b82:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8011b84:	e012      	b.n	8011bac <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8011b86:	68fb      	ldr	r3, [r7, #12]
 8011b88:	1c5a      	adds	r2, r3, #1
 8011b8a:	60fa      	str	r2, [r7, #12]
 8011b8c:	7dfa      	ldrb	r2, [r7, #23]
 8011b8e:	1c51      	adds	r1, r2, #1
 8011b90:	75f9      	strb	r1, [r7, #23]
 8011b92:	4611      	mov	r1, r2
 8011b94:	68ba      	ldr	r2, [r7, #8]
 8011b96:	440a      	add	r2, r1
 8011b98:	781b      	ldrb	r3, [r3, #0]
 8011b9a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8011b9c:	7dfb      	ldrb	r3, [r7, #23]
 8011b9e:	1c5a      	adds	r2, r3, #1
 8011ba0:	75fa      	strb	r2, [r7, #23]
 8011ba2:	461a      	mov	r2, r3
 8011ba4:	68bb      	ldr	r3, [r7, #8]
 8011ba6:	4413      	add	r3, r2
 8011ba8:	2200      	movs	r2, #0
 8011baa:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8011bac:	68fb      	ldr	r3, [r7, #12]
 8011bae:	781b      	ldrb	r3, [r3, #0]
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d1e8      	bne.n	8011b86 <USBD_GetString+0x4e>
    }
  }
}
 8011bb4:	bf00      	nop
 8011bb6:	3718      	adds	r7, #24
 8011bb8:	46bd      	mov	sp, r7
 8011bba:	bd80      	pop	{r7, pc}

08011bbc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8011bbc:	b480      	push	{r7}
 8011bbe:	b085      	sub	sp, #20
 8011bc0:	af00      	add	r7, sp, #0
 8011bc2:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8011bc4:	2300      	movs	r3, #0
 8011bc6:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8011bc8:	e005      	b.n	8011bd6 <USBD_GetLen+0x1a>
    {
        len++;
 8011bca:	7bfb      	ldrb	r3, [r7, #15]
 8011bcc:	3301      	adds	r3, #1
 8011bce:	73fb      	strb	r3, [r7, #15]
        buf++;
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	3301      	adds	r3, #1
 8011bd4:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	781b      	ldrb	r3, [r3, #0]
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d1f5      	bne.n	8011bca <USBD_GetLen+0xe>
    }

    return len;
 8011bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8011be0:	4618      	mov	r0, r3
 8011be2:	3714      	adds	r7, #20
 8011be4:	46bd      	mov	sp, r7
 8011be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bea:	4770      	bx	lr

08011bec <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8011bec:	b580      	push	{r7, lr}
 8011bee:	b084      	sub	sp, #16
 8011bf0:	af00      	add	r7, sp, #0
 8011bf2:	60f8      	str	r0, [r7, #12]
 8011bf4:	60b9      	str	r1, [r7, #8]
 8011bf6:	4613      	mov	r3, r2
 8011bf8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8011bfa:	68fb      	ldr	r3, [r7, #12]
 8011bfc:	2202      	movs	r2, #2
 8011bfe:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8011c02:	88fa      	ldrh	r2, [r7, #6]
 8011c04:	68fb      	ldr	r3, [r7, #12]
 8011c06:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8011c08:	88fa      	ldrh	r2, [r7, #6]
 8011c0a:	68fb      	ldr	r3, [r7, #12]
 8011c0c:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8011c0e:	88fb      	ldrh	r3, [r7, #6]
 8011c10:	68ba      	ldr	r2, [r7, #8]
 8011c12:	2100      	movs	r1, #0
 8011c14:	68f8      	ldr	r0, [r7, #12]
 8011c16:	f003 fec4 	bl	80159a2 <USBD_LL_Transmit>

  return USBD_OK;
 8011c1a:	2300      	movs	r3, #0
}
 8011c1c:	4618      	mov	r0, r3
 8011c1e:	3710      	adds	r7, #16
 8011c20:	46bd      	mov	sp, r7
 8011c22:	bd80      	pop	{r7, pc}

08011c24 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8011c24:	b580      	push	{r7, lr}
 8011c26:	b084      	sub	sp, #16
 8011c28:	af00      	add	r7, sp, #0
 8011c2a:	60f8      	str	r0, [r7, #12]
 8011c2c:	60b9      	str	r1, [r7, #8]
 8011c2e:	4613      	mov	r3, r2
 8011c30:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8011c32:	88fb      	ldrh	r3, [r7, #6]
 8011c34:	68ba      	ldr	r2, [r7, #8]
 8011c36:	2100      	movs	r1, #0
 8011c38:	68f8      	ldr	r0, [r7, #12]
 8011c3a:	f003 feb2 	bl	80159a2 <USBD_LL_Transmit>

  return USBD_OK;
 8011c3e:	2300      	movs	r3, #0
}
 8011c40:	4618      	mov	r0, r3
 8011c42:	3710      	adds	r7, #16
 8011c44:	46bd      	mov	sp, r7
 8011c46:	bd80      	pop	{r7, pc}

08011c48 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8011c48:	b580      	push	{r7, lr}
 8011c4a:	b084      	sub	sp, #16
 8011c4c:	af00      	add	r7, sp, #0
 8011c4e:	60f8      	str	r0, [r7, #12]
 8011c50:	60b9      	str	r1, [r7, #8]
 8011c52:	4613      	mov	r3, r2
 8011c54:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8011c56:	68fb      	ldr	r3, [r7, #12]
 8011c58:	2203      	movs	r2, #3
 8011c5a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8011c5e:	88fa      	ldrh	r2, [r7, #6]
 8011c60:	68fb      	ldr	r3, [r7, #12]
 8011c62:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8011c66:	88fa      	ldrh	r2, [r7, #6]
 8011c68:	68fb      	ldr	r3, [r7, #12]
 8011c6a:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8011c6e:	88fb      	ldrh	r3, [r7, #6]
 8011c70:	68ba      	ldr	r2, [r7, #8]
 8011c72:	2100      	movs	r1, #0
 8011c74:	68f8      	ldr	r0, [r7, #12]
 8011c76:	f003 feb7 	bl	80159e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011c7a:	2300      	movs	r3, #0
}
 8011c7c:	4618      	mov	r0, r3
 8011c7e:	3710      	adds	r7, #16
 8011c80:	46bd      	mov	sp, r7
 8011c82:	bd80      	pop	{r7, pc}

08011c84 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8011c84:	b580      	push	{r7, lr}
 8011c86:	b084      	sub	sp, #16
 8011c88:	af00      	add	r7, sp, #0
 8011c8a:	60f8      	str	r0, [r7, #12]
 8011c8c:	60b9      	str	r1, [r7, #8]
 8011c8e:	4613      	mov	r3, r2
 8011c90:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011c92:	88fb      	ldrh	r3, [r7, #6]
 8011c94:	68ba      	ldr	r2, [r7, #8]
 8011c96:	2100      	movs	r1, #0
 8011c98:	68f8      	ldr	r0, [r7, #12]
 8011c9a:	f003 fea5 	bl	80159e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011c9e:	2300      	movs	r3, #0
}
 8011ca0:	4618      	mov	r0, r3
 8011ca2:	3710      	adds	r7, #16
 8011ca4:	46bd      	mov	sp, r7
 8011ca6:	bd80      	pop	{r7, pc}

08011ca8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8011ca8:	b580      	push	{r7, lr}
 8011caa:	b082      	sub	sp, #8
 8011cac:	af00      	add	r7, sp, #0
 8011cae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	2204      	movs	r2, #4
 8011cb4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8011cb8:	2300      	movs	r3, #0
 8011cba:	2200      	movs	r2, #0
 8011cbc:	2100      	movs	r1, #0
 8011cbe:	6878      	ldr	r0, [r7, #4]
 8011cc0:	f003 fe6f 	bl	80159a2 <USBD_LL_Transmit>

  return USBD_OK;
 8011cc4:	2300      	movs	r3, #0
}
 8011cc6:	4618      	mov	r0, r3
 8011cc8:	3708      	adds	r7, #8
 8011cca:	46bd      	mov	sp, r7
 8011ccc:	bd80      	pop	{r7, pc}

08011cce <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8011cce:	b580      	push	{r7, lr}
 8011cd0:	b082      	sub	sp, #8
 8011cd2:	af00      	add	r7, sp, #0
 8011cd4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	2205      	movs	r2, #5
 8011cda:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8011cde:	2300      	movs	r3, #0
 8011ce0:	2200      	movs	r2, #0
 8011ce2:	2100      	movs	r1, #0
 8011ce4:	6878      	ldr	r0, [r7, #4]
 8011ce6:	f003 fe7f 	bl	80159e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011cea:	2300      	movs	r3, #0
}
 8011cec:	4618      	mov	r0, r3
 8011cee:	3708      	adds	r7, #8
 8011cf0:	46bd      	mov	sp, r7
 8011cf2:	bd80      	pop	{r7, pc}

08011cf4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8011cf4:	b480      	push	{r7}
 8011cf6:	b085      	sub	sp, #20
 8011cf8:	af00      	add	r7, sp, #0
 8011cfa:	4603      	mov	r3, r0
 8011cfc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8011cfe:	2300      	movs	r3, #0
 8011d00:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8011d02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011d06:	2b84      	cmp	r3, #132	; 0x84
 8011d08:	d005      	beq.n	8011d16 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8011d0a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011d0e:	68fb      	ldr	r3, [r7, #12]
 8011d10:	4413      	add	r3, r2
 8011d12:	3303      	adds	r3, #3
 8011d14:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8011d16:	68fb      	ldr	r3, [r7, #12]
}
 8011d18:	4618      	mov	r0, r3
 8011d1a:	3714      	adds	r7, #20
 8011d1c:	46bd      	mov	sp, r7
 8011d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d22:	4770      	bx	lr

08011d24 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8011d24:	b480      	push	{r7}
 8011d26:	b083      	sub	sp, #12
 8011d28:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011d2a:	f3ef 8305 	mrs	r3, IPSR
 8011d2e:	607b      	str	r3, [r7, #4]
  return(result);
 8011d30:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	bf14      	ite	ne
 8011d36:	2301      	movne	r3, #1
 8011d38:	2300      	moveq	r3, #0
 8011d3a:	b2db      	uxtb	r3, r3
}
 8011d3c:	4618      	mov	r0, r3
 8011d3e:	370c      	adds	r7, #12
 8011d40:	46bd      	mov	sp, r7
 8011d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d46:	4770      	bx	lr

08011d48 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8011d48:	b580      	push	{r7, lr}
 8011d4a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8011d4c:	f001 fd56 	bl	80137fc <vTaskStartScheduler>
  
  return osOK;
 8011d50:	2300      	movs	r3, #0
}
 8011d52:	4618      	mov	r0, r3
 8011d54:	bd80      	pop	{r7, pc}

08011d56 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8011d56:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011d58:	b089      	sub	sp, #36	; 0x24
 8011d5a:	af04      	add	r7, sp, #16
 8011d5c:	6078      	str	r0, [r7, #4]
 8011d5e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	695b      	ldr	r3, [r3, #20]
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	d020      	beq.n	8011daa <osThreadCreate+0x54>
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	699b      	ldr	r3, [r3, #24]
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d01c      	beq.n	8011daa <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	685c      	ldr	r4, [r3, #4]
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	681d      	ldr	r5, [r3, #0]
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	691e      	ldr	r6, [r3, #16]
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8011d82:	4618      	mov	r0, r3
 8011d84:	f7ff ffb6 	bl	8011cf4 <makeFreeRtosPriority>
 8011d88:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	695b      	ldr	r3, [r3, #20]
 8011d8e:	687a      	ldr	r2, [r7, #4]
 8011d90:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011d92:	9202      	str	r2, [sp, #8]
 8011d94:	9301      	str	r3, [sp, #4]
 8011d96:	9100      	str	r1, [sp, #0]
 8011d98:	683b      	ldr	r3, [r7, #0]
 8011d9a:	4632      	mov	r2, r6
 8011d9c:	4629      	mov	r1, r5
 8011d9e:	4620      	mov	r0, r4
 8011da0:	f001 fb71 	bl	8013486 <xTaskCreateStatic>
 8011da4:	4603      	mov	r3, r0
 8011da6:	60fb      	str	r3, [r7, #12]
 8011da8:	e01c      	b.n	8011de4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	685c      	ldr	r4, [r3, #4]
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011db6:	b29e      	uxth	r6, r3
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8011dbe:	4618      	mov	r0, r3
 8011dc0:	f7ff ff98 	bl	8011cf4 <makeFreeRtosPriority>
 8011dc4:	4602      	mov	r2, r0
 8011dc6:	f107 030c 	add.w	r3, r7, #12
 8011dca:	9301      	str	r3, [sp, #4]
 8011dcc:	9200      	str	r2, [sp, #0]
 8011dce:	683b      	ldr	r3, [r7, #0]
 8011dd0:	4632      	mov	r2, r6
 8011dd2:	4629      	mov	r1, r5
 8011dd4:	4620      	mov	r0, r4
 8011dd6:	f001 fbaf 	bl	8013538 <xTaskCreate>
 8011dda:	4603      	mov	r3, r0
 8011ddc:	2b01      	cmp	r3, #1
 8011dde:	d001      	beq.n	8011de4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8011de0:	2300      	movs	r3, #0
 8011de2:	e000      	b.n	8011de6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8011de4:	68fb      	ldr	r3, [r7, #12]
}
 8011de6:	4618      	mov	r0, r3
 8011de8:	3714      	adds	r7, #20
 8011dea:	46bd      	mov	sp, r7
 8011dec:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011dee <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8011dee:	b580      	push	{r7, lr}
 8011df0:	b084      	sub	sp, #16
 8011df2:	af00      	add	r7, sp, #0
 8011df4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8011dfa:	68fb      	ldr	r3, [r7, #12]
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d001      	beq.n	8011e04 <osDelay+0x16>
 8011e00:	68fb      	ldr	r3, [r7, #12]
 8011e02:	e000      	b.n	8011e06 <osDelay+0x18>
 8011e04:	2301      	movs	r3, #1
 8011e06:	4618      	mov	r0, r3
 8011e08:	f001 fcc4 	bl	8013794 <vTaskDelay>
  
  return osOK;
 8011e0c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8011e0e:	4618      	mov	r0, r3
 8011e10:	3710      	adds	r7, #16
 8011e12:	46bd      	mov	sp, r7
 8011e14:	bd80      	pop	{r7, pc}
	...

08011e18 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8011e18:	b580      	push	{r7, lr}
 8011e1a:	b086      	sub	sp, #24
 8011e1c:	af02      	add	r7, sp, #8
 8011e1e:	6078      	str	r0, [r7, #4]
 8011e20:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8011e22:	2300      	movs	r3, #0
 8011e24:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 8011e26:	2300      	movs	r3, #0
 8011e28:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 8011e2a:	f7ff ff7b 	bl	8011d24 <inHandlerMode>
 8011e2e:	4603      	mov	r3, r0
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d01c      	beq.n	8011e6e <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8011e34:	6839      	ldr	r1, [r7, #0]
 8011e36:	f107 0208 	add.w	r2, r7, #8
 8011e3a:	f107 030c 	add.w	r3, r7, #12
 8011e3e:	9300      	str	r3, [sp, #0]
 8011e40:	4613      	mov	r3, r2
 8011e42:	2201      	movs	r2, #1
 8011e44:	6878      	ldr	r0, [r7, #4]
 8011e46:	f002 fbab 	bl	80145a0 <xTaskGenericNotifyFromISR>
 8011e4a:	4603      	mov	r3, r0
 8011e4c:	2b01      	cmp	r3, #1
 8011e4e:	d002      	beq.n	8011e56 <osSignalSet+0x3e>
      return 0x80000000;
 8011e50:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011e54:	e019      	b.n	8011e8a <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8011e56:	68fb      	ldr	r3, [r7, #12]
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d015      	beq.n	8011e88 <osSignalSet+0x70>
 8011e5c:	4b0d      	ldr	r3, [pc, #52]	; (8011e94 <osSignalSet+0x7c>)
 8011e5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011e62:	601a      	str	r2, [r3, #0]
 8011e64:	f3bf 8f4f 	dsb	sy
 8011e68:	f3bf 8f6f 	isb	sy
 8011e6c:	e00c      	b.n	8011e88 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 8011e6e:	6839      	ldr	r1, [r7, #0]
 8011e70:	f107 0308 	add.w	r3, r7, #8
 8011e74:	2201      	movs	r2, #1
 8011e76:	6878      	ldr	r0, [r7, #4]
 8011e78:	f002 faf2 	bl	8014460 <xTaskGenericNotify>
 8011e7c:	4603      	mov	r3, r0
 8011e7e:	2b01      	cmp	r3, #1
 8011e80:	d002      	beq.n	8011e88 <osSignalSet+0x70>
    return 0x80000000;
 8011e82:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011e86:	e000      	b.n	8011e8a <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8011e88:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8011e8a:	4618      	mov	r0, r3
 8011e8c:	3710      	adds	r7, #16
 8011e8e:	46bd      	mov	sp, r7
 8011e90:	bd80      	pop	{r7, pc}
 8011e92:	bf00      	nop
 8011e94:	e000ed04 	.word	0xe000ed04

08011e98 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8011e98:	b590      	push	{r4, r7, lr}
 8011e9a:	b089      	sub	sp, #36	; 0x24
 8011e9c:	af00      	add	r7, sp, #0
 8011e9e:	60f8      	str	r0, [r7, #12]
 8011ea0:	60b9      	str	r1, [r7, #8]
 8011ea2:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8011ea4:	2300      	movs	r3, #0
 8011ea6:	617b      	str	r3, [r7, #20]
  ticks = 0;
 8011ea8:	2300      	movs	r3, #0
 8011eaa:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011eb2:	d103      	bne.n	8011ebc <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 8011eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8011eb8:	61fb      	str	r3, [r7, #28]
 8011eba:	e009      	b.n	8011ed0 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d006      	beq.n	8011ed0 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 8011ec6:	69fb      	ldr	r3, [r7, #28]
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d101      	bne.n	8011ed0 <osSignalWait+0x38>
      ticks = 1;
 8011ecc:	2301      	movs	r3, #1
 8011ece:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 8011ed0:	f7ff ff28 	bl	8011d24 <inHandlerMode>
 8011ed4:	4603      	mov	r3, r0
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d002      	beq.n	8011ee0 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 8011eda:	2382      	movs	r3, #130	; 0x82
 8011edc:	613b      	str	r3, [r7, #16]
 8011ede:	e01b      	b.n	8011f18 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8011ee0:	68b9      	ldr	r1, [r7, #8]
 8011ee2:	f107 0310 	add.w	r3, r7, #16
 8011ee6:	1d1a      	adds	r2, r3, #4
 8011ee8:	69fb      	ldr	r3, [r7, #28]
 8011eea:	2000      	movs	r0, #0
 8011eec:	f002 fa5e 	bl	80143ac <xTaskNotifyWait>
 8011ef0:	4603      	mov	r3, r0
 8011ef2:	2b01      	cmp	r3, #1
 8011ef4:	d008      	beq.n	8011f08 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 8011ef6:	69fb      	ldr	r3, [r7, #28]
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d102      	bne.n	8011f02 <osSignalWait+0x6a>
 8011efc:	2300      	movs	r3, #0
 8011efe:	613b      	str	r3, [r7, #16]
 8011f00:	e00a      	b.n	8011f18 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 8011f02:	2340      	movs	r3, #64	; 0x40
 8011f04:	613b      	str	r3, [r7, #16]
 8011f06:	e007      	b.n	8011f18 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 8011f08:	697b      	ldr	r3, [r7, #20]
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	da02      	bge.n	8011f14 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 8011f0e:	2386      	movs	r3, #134	; 0x86
 8011f10:	613b      	str	r3, [r7, #16]
 8011f12:	e001      	b.n	8011f18 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 8011f14:	2308      	movs	r3, #8
 8011f16:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8011f18:	68fb      	ldr	r3, [r7, #12]
 8011f1a:	461c      	mov	r4, r3
 8011f1c:	f107 0310 	add.w	r3, r7, #16
 8011f20:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011f24:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8011f28:	68f8      	ldr	r0, [r7, #12]
 8011f2a:	3724      	adds	r7, #36	; 0x24
 8011f2c:	46bd      	mov	sp, r7
 8011f2e:	bd90      	pop	{r4, r7, pc}

08011f30 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8011f30:	b580      	push	{r7, lr}
 8011f32:	b082      	sub	sp, #8
 8011f34:	af00      	add	r7, sp, #0
 8011f36:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	685b      	ldr	r3, [r3, #4]
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d007      	beq.n	8011f50 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	685b      	ldr	r3, [r3, #4]
 8011f44:	4619      	mov	r1, r3
 8011f46:	2001      	movs	r0, #1
 8011f48:	f000 fce0 	bl	801290c <xQueueCreateMutexStatic>
 8011f4c:	4603      	mov	r3, r0
 8011f4e:	e003      	b.n	8011f58 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8011f50:	2001      	movs	r0, #1
 8011f52:	f000 fcc3 	bl	80128dc <xQueueCreateMutex>
 8011f56:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8011f58:	4618      	mov	r0, r3
 8011f5a:	3708      	adds	r7, #8
 8011f5c:	46bd      	mov	sp, r7
 8011f5e:	bd80      	pop	{r7, pc}

08011f60 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8011f60:	b580      	push	{r7, lr}
 8011f62:	b084      	sub	sp, #16
 8011f64:	af00      	add	r7, sp, #0
 8011f66:	6078      	str	r0, [r7, #4]
 8011f68:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8011f6a:	2300      	movs	r3, #0
 8011f6c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d101      	bne.n	8011f78 <osMutexWait+0x18>
    return osErrorParameter;
 8011f74:	2380      	movs	r3, #128	; 0x80
 8011f76:	e03a      	b.n	8011fee <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8011f78:	2300      	movs	r3, #0
 8011f7a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8011f7c:	683b      	ldr	r3, [r7, #0]
 8011f7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f82:	d103      	bne.n	8011f8c <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8011f84:	f04f 33ff 	mov.w	r3, #4294967295
 8011f88:	60fb      	str	r3, [r7, #12]
 8011f8a:	e009      	b.n	8011fa0 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8011f8c:	683b      	ldr	r3, [r7, #0]
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d006      	beq.n	8011fa0 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8011f92:	683b      	ldr	r3, [r7, #0]
 8011f94:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8011f96:	68fb      	ldr	r3, [r7, #12]
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	d101      	bne.n	8011fa0 <osMutexWait+0x40>
      ticks = 1;
 8011f9c:	2301      	movs	r3, #1
 8011f9e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8011fa0:	f7ff fec0 	bl	8011d24 <inHandlerMode>
 8011fa4:	4603      	mov	r3, r0
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d017      	beq.n	8011fda <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8011faa:	f107 0308 	add.w	r3, r7, #8
 8011fae:	461a      	mov	r2, r3
 8011fb0:	2100      	movs	r1, #0
 8011fb2:	6878      	ldr	r0, [r7, #4]
 8011fb4:	f001 f8c2 	bl	801313c <xQueueReceiveFromISR>
 8011fb8:	4603      	mov	r3, r0
 8011fba:	2b01      	cmp	r3, #1
 8011fbc:	d001      	beq.n	8011fc2 <osMutexWait+0x62>
      return osErrorOS;
 8011fbe:	23ff      	movs	r3, #255	; 0xff
 8011fc0:	e015      	b.n	8011fee <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8011fc2:	68bb      	ldr	r3, [r7, #8]
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d011      	beq.n	8011fec <osMutexWait+0x8c>
 8011fc8:	4b0b      	ldr	r3, [pc, #44]	; (8011ff8 <osMutexWait+0x98>)
 8011fca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011fce:	601a      	str	r2, [r3, #0]
 8011fd0:	f3bf 8f4f 	dsb	sy
 8011fd4:	f3bf 8f6f 	isb	sy
 8011fd8:	e008      	b.n	8011fec <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8011fda:	68f9      	ldr	r1, [r7, #12]
 8011fdc:	6878      	ldr	r0, [r7, #4]
 8011fde:	f000 ffa5 	bl	8012f2c <xQueueSemaphoreTake>
 8011fe2:	4603      	mov	r3, r0
 8011fe4:	2b01      	cmp	r3, #1
 8011fe6:	d001      	beq.n	8011fec <osMutexWait+0x8c>
    return osErrorOS;
 8011fe8:	23ff      	movs	r3, #255	; 0xff
 8011fea:	e000      	b.n	8011fee <osMutexWait+0x8e>
  }
  
  return osOK;
 8011fec:	2300      	movs	r3, #0
}
 8011fee:	4618      	mov	r0, r3
 8011ff0:	3710      	adds	r7, #16
 8011ff2:	46bd      	mov	sp, r7
 8011ff4:	bd80      	pop	{r7, pc}
 8011ff6:	bf00      	nop
 8011ff8:	e000ed04 	.word	0xe000ed04

08011ffc <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8011ffc:	b580      	push	{r7, lr}
 8011ffe:	b084      	sub	sp, #16
 8012000:	af00      	add	r7, sp, #0
 8012002:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8012004:	2300      	movs	r3, #0
 8012006:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8012008:	2300      	movs	r3, #0
 801200a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 801200c:	f7ff fe8a 	bl	8011d24 <inHandlerMode>
 8012010:	4603      	mov	r3, r0
 8012012:	2b00      	cmp	r3, #0
 8012014:	d016      	beq.n	8012044 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8012016:	f107 0308 	add.w	r3, r7, #8
 801201a:	4619      	mov	r1, r3
 801201c:	6878      	ldr	r0, [r7, #4]
 801201e:	f000 fe1f 	bl	8012c60 <xQueueGiveFromISR>
 8012022:	4603      	mov	r3, r0
 8012024:	2b01      	cmp	r3, #1
 8012026:	d001      	beq.n	801202c <osMutexRelease+0x30>
      return osErrorOS;
 8012028:	23ff      	movs	r3, #255	; 0xff
 801202a:	e017      	b.n	801205c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 801202c:	68bb      	ldr	r3, [r7, #8]
 801202e:	2b00      	cmp	r3, #0
 8012030:	d013      	beq.n	801205a <osMutexRelease+0x5e>
 8012032:	4b0c      	ldr	r3, [pc, #48]	; (8012064 <osMutexRelease+0x68>)
 8012034:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012038:	601a      	str	r2, [r3, #0]
 801203a:	f3bf 8f4f 	dsb	sy
 801203e:	f3bf 8f6f 	isb	sy
 8012042:	e00a      	b.n	801205a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8012044:	2300      	movs	r3, #0
 8012046:	2200      	movs	r2, #0
 8012048:	2100      	movs	r1, #0
 801204a:	6878      	ldr	r0, [r7, #4]
 801204c:	f000 fc7a 	bl	8012944 <xQueueGenericSend>
 8012050:	4603      	mov	r3, r0
 8012052:	2b01      	cmp	r3, #1
 8012054:	d001      	beq.n	801205a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8012056:	23ff      	movs	r3, #255	; 0xff
 8012058:	60fb      	str	r3, [r7, #12]
  }
  return result;
 801205a:	68fb      	ldr	r3, [r7, #12]
}
 801205c:	4618      	mov	r0, r3
 801205e:	3710      	adds	r7, #16
 8012060:	46bd      	mov	sp, r7
 8012062:	bd80      	pop	{r7, pc}
 8012064:	e000ed04 	.word	0xe000ed04

08012068 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8012068:	b580      	push	{r7, lr}
 801206a:	b086      	sub	sp, #24
 801206c:	af00      	add	r7, sp, #0
 801206e:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	685b      	ldr	r3, [r3, #4]
 8012074:	3303      	adds	r3, #3
 8012076:	f023 0303 	bic.w	r3, r3, #3
 801207a:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 801207c:	2014      	movs	r0, #20
 801207e:	f002 fdff 	bl	8014c80 <pvPortMalloc>
 8012082:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 8012084:	697b      	ldr	r3, [r7, #20]
 8012086:	2b00      	cmp	r3, #0
 8012088:	d046      	beq.n	8012118 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	681a      	ldr	r2, [r3, #0]
 801208e:	697b      	ldr	r3, [r7, #20]
 8012090:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 8012092:	68fa      	ldr	r2, [r7, #12]
 8012094:	697b      	ldr	r3, [r7, #20]
 8012096:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 8012098:	697b      	ldr	r3, [r7, #20]
 801209a:	2200      	movs	r2, #0
 801209c:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	681b      	ldr	r3, [r3, #0]
 80120a2:	4618      	mov	r0, r3
 80120a4:	f002 fdec 	bl	8014c80 <pvPortMalloc>
 80120a8:	4602      	mov	r2, r0
 80120aa:	697b      	ldr	r3, [r7, #20]
 80120ac:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 80120ae:	697b      	ldr	r3, [r7, #20]
 80120b0:	685b      	ldr	r3, [r3, #4]
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	d02b      	beq.n	801210e <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	681b      	ldr	r3, [r3, #0]
 80120ba:	68fa      	ldr	r2, [r7, #12]
 80120bc:	fb02 f303 	mul.w	r3, r2, r3
 80120c0:	4618      	mov	r0, r3
 80120c2:	f002 fddd 	bl	8014c80 <pvPortMalloc>
 80120c6:	4602      	mov	r2, r0
 80120c8:	697b      	ldr	r3, [r7, #20]
 80120ca:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 80120cc:	697b      	ldr	r3, [r7, #20]
 80120ce:	681b      	ldr	r3, [r3, #0]
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	d011      	beq.n	80120f8 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 80120d4:	2300      	movs	r3, #0
 80120d6:	613b      	str	r3, [r7, #16]
 80120d8:	e008      	b.n	80120ec <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 80120da:	697b      	ldr	r3, [r7, #20]
 80120dc:	685a      	ldr	r2, [r3, #4]
 80120de:	693b      	ldr	r3, [r7, #16]
 80120e0:	4413      	add	r3, r2
 80120e2:	2200      	movs	r2, #0
 80120e4:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 80120e6:	693b      	ldr	r3, [r7, #16]
 80120e8:	3301      	adds	r3, #1
 80120ea:	613b      	str	r3, [r7, #16]
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	681b      	ldr	r3, [r3, #0]
 80120f0:	693a      	ldr	r2, [r7, #16]
 80120f2:	429a      	cmp	r2, r3
 80120f4:	d3f1      	bcc.n	80120da <osPoolCreate+0x72>
 80120f6:	e00f      	b.n	8012118 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 80120f8:	697b      	ldr	r3, [r7, #20]
 80120fa:	685b      	ldr	r3, [r3, #4]
 80120fc:	4618      	mov	r0, r3
 80120fe:	f002 fe81 	bl	8014e04 <vPortFree>
        vPortFree(thePool);
 8012102:	6978      	ldr	r0, [r7, #20]
 8012104:	f002 fe7e 	bl	8014e04 <vPortFree>
        thePool = NULL;
 8012108:	2300      	movs	r3, #0
 801210a:	617b      	str	r3, [r7, #20]
 801210c:	e004      	b.n	8012118 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 801210e:	6978      	ldr	r0, [r7, #20]
 8012110:	f002 fe78 	bl	8014e04 <vPortFree>
      thePool = NULL;
 8012114:	2300      	movs	r3, #0
 8012116:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 8012118:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 801211a:	4618      	mov	r0, r3
 801211c:	3718      	adds	r7, #24
 801211e:	46bd      	mov	sp, r7
 8012120:	bd80      	pop	{r7, pc}

08012122 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 8012122:	b580      	push	{r7, lr}
 8012124:	b08a      	sub	sp, #40	; 0x28
 8012126:	af00      	add	r7, sp, #0
 8012128:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 801212a:	2300      	movs	r3, #0
 801212c:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 801212e:	2300      	movs	r3, #0
 8012130:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 8012132:	f7ff fdf7 	bl	8011d24 <inHandlerMode>
 8012136:	4603      	mov	r3, r0
 8012138:	2b00      	cmp	r3, #0
 801213a:	d00e      	beq.n	801215a <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801213c:	f3ef 8211 	mrs	r2, BASEPRI
 8012140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012144:	f383 8811 	msr	BASEPRI, r3
 8012148:	f3bf 8f6f 	isb	sy
 801214c:	f3bf 8f4f 	dsb	sy
 8012150:	617a      	str	r2, [r7, #20]
 8012152:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8012154:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8012156:	627b      	str	r3, [r7, #36]	; 0x24
 8012158:	e001      	b.n	801215e <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 801215a:	f002 fc77 	bl	8014a4c <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 801215e:	2300      	movs	r3, #0
 8012160:	61fb      	str	r3, [r7, #28]
 8012162:	e029      	b.n	80121b8 <osPoolAlloc+0x96>
    index = pool_id->currentIndex + i;
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	691b      	ldr	r3, [r3, #16]
 8012168:	69fa      	ldr	r2, [r7, #28]
 801216a:	4413      	add	r3, r2
 801216c:	61bb      	str	r3, [r7, #24]
    if (index >= pool_id->pool_sz) {
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	689b      	ldr	r3, [r3, #8]
 8012172:	69ba      	ldr	r2, [r7, #24]
 8012174:	429a      	cmp	r2, r3
 8012176:	d301      	bcc.n	801217c <osPoolAlloc+0x5a>
      index = 0;
 8012178:	2300      	movs	r3, #0
 801217a:	61bb      	str	r3, [r7, #24]
    }
    
    if (pool_id->markers[index] == 0) {
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	685a      	ldr	r2, [r3, #4]
 8012180:	69bb      	ldr	r3, [r7, #24]
 8012182:	4413      	add	r3, r2
 8012184:	781b      	ldrb	r3, [r3, #0]
 8012186:	2b00      	cmp	r3, #0
 8012188:	d113      	bne.n	80121b2 <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	685a      	ldr	r2, [r3, #4]
 801218e:	69bb      	ldr	r3, [r7, #24]
 8012190:	4413      	add	r3, r2
 8012192:	2201      	movs	r2, #1
 8012194:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	681b      	ldr	r3, [r3, #0]
 801219a:	4619      	mov	r1, r3
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	68db      	ldr	r3, [r3, #12]
 80121a0:	69ba      	ldr	r2, [r7, #24]
 80121a2:	fb02 f303 	mul.w	r3, r2, r3
 80121a6:	440b      	add	r3, r1
 80121a8:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	69ba      	ldr	r2, [r7, #24]
 80121ae:	611a      	str	r2, [r3, #16]
      break;
 80121b0:	e007      	b.n	80121c2 <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 80121b2:	69fb      	ldr	r3, [r7, #28]
 80121b4:	3301      	adds	r3, #1
 80121b6:	61fb      	str	r3, [r7, #28]
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	689b      	ldr	r3, [r3, #8]
 80121bc:	69fa      	ldr	r2, [r7, #28]
 80121be:	429a      	cmp	r2, r3
 80121c0:	d3d0      	bcc.n	8012164 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 80121c2:	f7ff fdaf 	bl	8011d24 <inHandlerMode>
 80121c6:	4603      	mov	r3, r0
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d005      	beq.n	80121d8 <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 80121cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121ce:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80121d0:	68fb      	ldr	r3, [r7, #12]
 80121d2:	f383 8811 	msr	BASEPRI, r3
 80121d6:	e001      	b.n	80121dc <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 80121d8:	f002 fc66 	bl	8014aa8 <vPortExitCritical>
  }
  
  return p;
 80121dc:	6a3b      	ldr	r3, [r7, #32]
}
 80121de:	4618      	mov	r0, r3
 80121e0:	3728      	adds	r7, #40	; 0x28
 80121e2:	46bd      	mov	sp, r7
 80121e4:	bd80      	pop	{r7, pc}

080121e6 <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 80121e6:	b480      	push	{r7}
 80121e8:	b085      	sub	sp, #20
 80121ea:	af00      	add	r7, sp, #0
 80121ec:	6078      	str	r0, [r7, #4]
 80121ee:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	d101      	bne.n	80121fa <osPoolFree+0x14>
    return osErrorParameter;
 80121f6:	2380      	movs	r3, #128	; 0x80
 80121f8:	e030      	b.n	801225c <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 80121fa:	683b      	ldr	r3, [r7, #0]
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d101      	bne.n	8012204 <osPoolFree+0x1e>
    return osErrorParameter;
 8012200:	2380      	movs	r3, #128	; 0x80
 8012202:	e02b      	b.n	801225c <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	681b      	ldr	r3, [r3, #0]
 8012208:	683a      	ldr	r2, [r7, #0]
 801220a:	429a      	cmp	r2, r3
 801220c:	d201      	bcs.n	8012212 <osPoolFree+0x2c>
    return osErrorParameter;
 801220e:	2380      	movs	r3, #128	; 0x80
 8012210:	e024      	b.n	801225c <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 8012212:	683b      	ldr	r3, [r7, #0]
 8012214:	687a      	ldr	r2, [r7, #4]
 8012216:	6812      	ldr	r2, [r2, #0]
 8012218:	1a9b      	subs	r3, r3, r2
 801221a:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	68da      	ldr	r2, [r3, #12]
 8012220:	68fb      	ldr	r3, [r7, #12]
 8012222:	fbb3 f1f2 	udiv	r1, r3, r2
 8012226:	fb02 f201 	mul.w	r2, r2, r1
 801222a:	1a9b      	subs	r3, r3, r2
 801222c:	2b00      	cmp	r3, #0
 801222e:	d001      	beq.n	8012234 <osPoolFree+0x4e>
    return osErrorParameter;
 8012230:	2380      	movs	r3, #128	; 0x80
 8012232:	e013      	b.n	801225c <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	68db      	ldr	r3, [r3, #12]
 8012238:	68fa      	ldr	r2, [r7, #12]
 801223a:	fbb2 f3f3 	udiv	r3, r2, r3
 801223e:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	689b      	ldr	r3, [r3, #8]
 8012244:	68fa      	ldr	r2, [r7, #12]
 8012246:	429a      	cmp	r2, r3
 8012248:	d301      	bcc.n	801224e <osPoolFree+0x68>
    return osErrorParameter;
 801224a:	2380      	movs	r3, #128	; 0x80
 801224c:	e006      	b.n	801225c <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	685a      	ldr	r2, [r3, #4]
 8012252:	68fb      	ldr	r3, [r7, #12]
 8012254:	4413      	add	r3, r2
 8012256:	2200      	movs	r2, #0
 8012258:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 801225a:	2300      	movs	r3, #0
}
 801225c:	4618      	mov	r0, r3
 801225e:	3714      	adds	r7, #20
 8012260:	46bd      	mov	sp, r7
 8012262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012266:	4770      	bx	lr

08012268 <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 8012268:	b590      	push	{r4, r7, lr}
 801226a:	b087      	sub	sp, #28
 801226c:	af00      	add	r7, sp, #0
 801226e:	6078      	str	r0, [r7, #4]
 8012270:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	60fb      	str	r3, [r7, #12]
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	685b      	ldr	r3, [r3, #4]
 801227c:	613b      	str	r3, [r7, #16]
 801227e:	2300      	movs	r3, #0
 8012280:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	689c      	ldr	r4, [r3, #8]
 8012286:	200c      	movs	r0, #12
 8012288:	f002 fcfa 	bl	8014c80 <pvPortMalloc>
 801228c:	4603      	mov	r3, r0
 801228e:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	689b      	ldr	r3, [r3, #8]
 8012294:	681b      	ldr	r3, [r3, #0]
 8012296:	2b00      	cmp	r3, #0
 8012298:	d101      	bne.n	801229e <osMailCreate+0x36>
    return NULL;
 801229a:	2300      	movs	r3, #0
 801229c:	e038      	b.n	8012310 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	689b      	ldr	r3, [r3, #8]
 80122a2:	681b      	ldr	r3, [r3, #0]
 80122a4:	687a      	ldr	r2, [r7, #4]
 80122a6:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	6818      	ldr	r0, [r3, #0]
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	689b      	ldr	r3, [r3, #8]
 80122b0:	681c      	ldr	r4, [r3, #0]
 80122b2:	2200      	movs	r2, #0
 80122b4:	2104      	movs	r1, #4
 80122b6:	f000 fa9b 	bl	80127f0 <xQueueGenericCreate>
 80122ba:	4603      	mov	r3, r0
 80122bc:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	689b      	ldr	r3, [r3, #8]
 80122c2:	681b      	ldr	r3, [r3, #0]
 80122c4:	685b      	ldr	r3, [r3, #4]
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d107      	bne.n	80122da <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	689b      	ldr	r3, [r3, #8]
 80122ce:	681b      	ldr	r3, [r3, #0]
 80122d0:	4618      	mov	r0, r3
 80122d2:	f002 fd97 	bl	8014e04 <vPortFree>
    return NULL;
 80122d6:	2300      	movs	r3, #0
 80122d8:	e01a      	b.n	8012310 <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	689b      	ldr	r3, [r3, #8]
 80122de:	681c      	ldr	r4, [r3, #0]
 80122e0:	f107 030c 	add.w	r3, r7, #12
 80122e4:	4618      	mov	r0, r3
 80122e6:	f7ff febf 	bl	8012068 <osPoolCreate>
 80122ea:	4603      	mov	r3, r0
 80122ec:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	689b      	ldr	r3, [r3, #8]
 80122f2:	681b      	ldr	r3, [r3, #0]
 80122f4:	689b      	ldr	r3, [r3, #8]
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	d107      	bne.n	801230a <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	689b      	ldr	r3, [r3, #8]
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	4618      	mov	r0, r3
 8012302:	f002 fd7f 	bl	8014e04 <vPortFree>
    return NULL;
 8012306:	2300      	movs	r3, #0
 8012308:	e002      	b.n	8012310 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	689b      	ldr	r3, [r3, #8]
 801230e:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 8012310:	4618      	mov	r0, r3
 8012312:	371c      	adds	r7, #28
 8012314:	46bd      	mov	sp, r7
 8012316:	bd90      	pop	{r4, r7, pc}

08012318 <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 8012318:	b580      	push	{r7, lr}
 801231a:	b084      	sub	sp, #16
 801231c:	af00      	add	r7, sp, #0
 801231e:	6078      	str	r0, [r7, #4]
 8012320:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	2b00      	cmp	r3, #0
 8012326:	d101      	bne.n	801232c <osMailAlloc+0x14>
    return NULL;
 8012328:	2300      	movs	r3, #0
 801232a:	e006      	b.n	801233a <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	689b      	ldr	r3, [r3, #8]
 8012330:	4618      	mov	r0, r3
 8012332:	f7ff fef6 	bl	8012122 <osPoolAlloc>
 8012336:	60f8      	str	r0, [r7, #12]
  
  return p;
 8012338:	68fb      	ldr	r3, [r7, #12]
}
 801233a:	4618      	mov	r0, r3
 801233c:	3710      	adds	r7, #16
 801233e:	46bd      	mov	sp, r7
 8012340:	bd80      	pop	{r7, pc}
	...

08012344 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 8012344:	b580      	push	{r7, lr}
 8012346:	b084      	sub	sp, #16
 8012348:	af00      	add	r7, sp, #0
 801234a:	6078      	str	r0, [r7, #4]
 801234c:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	2b00      	cmp	r3, #0
 8012352:	d101      	bne.n	8012358 <osMailPut+0x14>
    return osErrorParameter;
 8012354:	2380      	movs	r3, #128	; 0x80
 8012356:	e02c      	b.n	80123b2 <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 8012358:	2300      	movs	r3, #0
 801235a:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 801235c:	f7ff fce2 	bl	8011d24 <inHandlerMode>
 8012360:	4603      	mov	r3, r0
 8012362:	2b00      	cmp	r3, #0
 8012364:	d018      	beq.n	8012398 <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	6858      	ldr	r0, [r3, #4]
 801236a:	f107 020c 	add.w	r2, r7, #12
 801236e:	4639      	mov	r1, r7
 8012370:	2300      	movs	r3, #0
 8012372:	f000 fbe1 	bl	8012b38 <xQueueGenericSendFromISR>
 8012376:	4603      	mov	r3, r0
 8012378:	2b01      	cmp	r3, #1
 801237a:	d001      	beq.n	8012380 <osMailPut+0x3c>
      return osErrorOS;
 801237c:	23ff      	movs	r3, #255	; 0xff
 801237e:	e018      	b.n	80123b2 <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012380:	68fb      	ldr	r3, [r7, #12]
 8012382:	2b00      	cmp	r3, #0
 8012384:	d014      	beq.n	80123b0 <osMailPut+0x6c>
 8012386:	4b0d      	ldr	r3, [pc, #52]	; (80123bc <osMailPut+0x78>)
 8012388:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801238c:	601a      	str	r2, [r3, #0]
 801238e:	f3bf 8f4f 	dsb	sy
 8012392:	f3bf 8f6f 	isb	sy
 8012396:	e00b      	b.n	80123b0 <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	6858      	ldr	r0, [r3, #4]
 801239c:	4639      	mov	r1, r7
 801239e:	2300      	movs	r3, #0
 80123a0:	2200      	movs	r2, #0
 80123a2:	f000 facf 	bl	8012944 <xQueueGenericSend>
 80123a6:	4603      	mov	r3, r0
 80123a8:	2b01      	cmp	r3, #1
 80123aa:	d001      	beq.n	80123b0 <osMailPut+0x6c>
      return osErrorOS;
 80123ac:	23ff      	movs	r3, #255	; 0xff
 80123ae:	e000      	b.n	80123b2 <osMailPut+0x6e>
    }
  }
  
  return osOK;
 80123b0:	2300      	movs	r3, #0
}
 80123b2:	4618      	mov	r0, r3
 80123b4:	3710      	adds	r7, #16
 80123b6:	46bd      	mov	sp, r7
 80123b8:	bd80      	pop	{r7, pc}
 80123ba:	bf00      	nop
 80123bc:	e000ed04 	.word	0xe000ed04

080123c0 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 80123c0:	b590      	push	{r4, r7, lr}
 80123c2:	b08b      	sub	sp, #44	; 0x2c
 80123c4:	af00      	add	r7, sp, #0
 80123c6:	60f8      	str	r0, [r7, #12]
 80123c8:	60b9      	str	r1, [r7, #8]
 80123ca:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 80123cc:	68bb      	ldr	r3, [r7, #8]
 80123ce:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 80123d0:	68bb      	ldr	r3, [r7, #8]
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	d10a      	bne.n	80123ec <osMailGet+0x2c>
    event.status = osErrorParameter;
 80123d6:	2380      	movs	r3, #128	; 0x80
 80123d8:	617b      	str	r3, [r7, #20]
    return event;
 80123da:	68fb      	ldr	r3, [r7, #12]
 80123dc:	461c      	mov	r4, r3
 80123de:	f107 0314 	add.w	r3, r7, #20
 80123e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80123e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80123ea:	e056      	b.n	801249a <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80123ec:	2300      	movs	r3, #0
 80123ee:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80123f0:	2300      	movs	r3, #0
 80123f2:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80123fa:	d103      	bne.n	8012404 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 80123fc:	f04f 33ff 	mov.w	r3, #4294967295
 8012400:	627b      	str	r3, [r7, #36]	; 0x24
 8012402:	e009      	b.n	8012418 <osMailGet+0x58>
  }
  else if (millisec != 0) {
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	2b00      	cmp	r3, #0
 8012408:	d006      	beq.n	8012418 <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 801240e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012410:	2b00      	cmp	r3, #0
 8012412:	d101      	bne.n	8012418 <osMailGet+0x58>
      ticks = 1;
 8012414:	2301      	movs	r3, #1
 8012416:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8012418:	f7ff fc84 	bl	8011d24 <inHandlerMode>
 801241c:	4603      	mov	r3, r0
 801241e:	2b00      	cmp	r3, #0
 8012420:	d01d      	beq.n	801245e <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 8012422:	68bb      	ldr	r3, [r7, #8]
 8012424:	6858      	ldr	r0, [r3, #4]
 8012426:	f107 0220 	add.w	r2, r7, #32
 801242a:	f107 0314 	add.w	r3, r7, #20
 801242e:	3304      	adds	r3, #4
 8012430:	4619      	mov	r1, r3
 8012432:	f000 fe83 	bl	801313c <xQueueReceiveFromISR>
 8012436:	4603      	mov	r3, r0
 8012438:	2b01      	cmp	r3, #1
 801243a:	d102      	bne.n	8012442 <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 801243c:	2320      	movs	r3, #32
 801243e:	617b      	str	r3, [r7, #20]
 8012440:	e001      	b.n	8012446 <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 8012442:	2300      	movs	r3, #0
 8012444:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012446:	6a3b      	ldr	r3, [r7, #32]
 8012448:	2b00      	cmp	r3, #0
 801244a:	d01e      	beq.n	801248a <osMailGet+0xca>
 801244c:	4b15      	ldr	r3, [pc, #84]	; (80124a4 <osMailGet+0xe4>)
 801244e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012452:	601a      	str	r2, [r3, #0]
 8012454:	f3bf 8f4f 	dsb	sy
 8012458:	f3bf 8f6f 	isb	sy
 801245c:	e015      	b.n	801248a <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 801245e:	68bb      	ldr	r3, [r7, #8]
 8012460:	6858      	ldr	r0, [r3, #4]
 8012462:	f107 0314 	add.w	r3, r7, #20
 8012466:	3304      	adds	r3, #4
 8012468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801246a:	4619      	mov	r1, r3
 801246c:	f000 fc82 	bl	8012d74 <xQueueReceive>
 8012470:	4603      	mov	r3, r0
 8012472:	2b01      	cmp	r3, #1
 8012474:	d102      	bne.n	801247c <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 8012476:	2320      	movs	r3, #32
 8012478:	617b      	str	r3, [r7, #20]
 801247a:	e006      	b.n	801248a <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 801247c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801247e:	2b00      	cmp	r3, #0
 8012480:	d101      	bne.n	8012486 <osMailGet+0xc6>
 8012482:	2300      	movs	r3, #0
 8012484:	e000      	b.n	8012488 <osMailGet+0xc8>
 8012486:	2340      	movs	r3, #64	; 0x40
 8012488:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 801248a:	68fb      	ldr	r3, [r7, #12]
 801248c:	461c      	mov	r4, r3
 801248e:	f107 0314 	add.w	r3, r7, #20
 8012492:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012496:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 801249a:	68f8      	ldr	r0, [r7, #12]
 801249c:	372c      	adds	r7, #44	; 0x2c
 801249e:	46bd      	mov	sp, r7
 80124a0:	bd90      	pop	{r4, r7, pc}
 80124a2:	bf00      	nop
 80124a4:	e000ed04 	.word	0xe000ed04

080124a8 <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 80124a8:	b580      	push	{r7, lr}
 80124aa:	b082      	sub	sp, #8
 80124ac:	af00      	add	r7, sp, #0
 80124ae:	6078      	str	r0, [r7, #4]
 80124b0:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d101      	bne.n	80124bc <osMailFree+0x14>
    return osErrorParameter;
 80124b8:	2380      	movs	r3, #128	; 0x80
 80124ba:	e006      	b.n	80124ca <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	689b      	ldr	r3, [r3, #8]
 80124c0:	6839      	ldr	r1, [r7, #0]
 80124c2:	4618      	mov	r0, r3
 80124c4:	f7ff fe8f 	bl	80121e6 <osPoolFree>
 80124c8:	4603      	mov	r3, r0
}
 80124ca:	4618      	mov	r0, r3
 80124cc:	3708      	adds	r7, #8
 80124ce:	46bd      	mov	sp, r7
 80124d0:	bd80      	pop	{r7, pc}

080124d2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80124d2:	b480      	push	{r7}
 80124d4:	b083      	sub	sp, #12
 80124d6:	af00      	add	r7, sp, #0
 80124d8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	f103 0208 	add.w	r2, r3, #8
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	f04f 32ff 	mov.w	r2, #4294967295
 80124ea:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	f103 0208 	add.w	r2, r3, #8
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	f103 0208 	add.w	r2, r3, #8
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	2200      	movs	r2, #0
 8012504:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8012506:	bf00      	nop
 8012508:	370c      	adds	r7, #12
 801250a:	46bd      	mov	sp, r7
 801250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012510:	4770      	bx	lr

08012512 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8012512:	b480      	push	{r7}
 8012514:	b083      	sub	sp, #12
 8012516:	af00      	add	r7, sp, #0
 8012518:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	2200      	movs	r2, #0
 801251e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8012520:	bf00      	nop
 8012522:	370c      	adds	r7, #12
 8012524:	46bd      	mov	sp, r7
 8012526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801252a:	4770      	bx	lr

0801252c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801252c:	b480      	push	{r7}
 801252e:	b085      	sub	sp, #20
 8012530:	af00      	add	r7, sp, #0
 8012532:	6078      	str	r0, [r7, #4]
 8012534:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	685b      	ldr	r3, [r3, #4]
 801253a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801253c:	683b      	ldr	r3, [r7, #0]
 801253e:	68fa      	ldr	r2, [r7, #12]
 8012540:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012542:	68fb      	ldr	r3, [r7, #12]
 8012544:	689a      	ldr	r2, [r3, #8]
 8012546:	683b      	ldr	r3, [r7, #0]
 8012548:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801254a:	68fb      	ldr	r3, [r7, #12]
 801254c:	689b      	ldr	r3, [r3, #8]
 801254e:	683a      	ldr	r2, [r7, #0]
 8012550:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012552:	68fb      	ldr	r3, [r7, #12]
 8012554:	683a      	ldr	r2, [r7, #0]
 8012556:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8012558:	683b      	ldr	r3, [r7, #0]
 801255a:	687a      	ldr	r2, [r7, #4]
 801255c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	681b      	ldr	r3, [r3, #0]
 8012562:	1c5a      	adds	r2, r3, #1
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	601a      	str	r2, [r3, #0]
}
 8012568:	bf00      	nop
 801256a:	3714      	adds	r7, #20
 801256c:	46bd      	mov	sp, r7
 801256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012572:	4770      	bx	lr

08012574 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012574:	b480      	push	{r7}
 8012576:	b085      	sub	sp, #20
 8012578:	af00      	add	r7, sp, #0
 801257a:	6078      	str	r0, [r7, #4]
 801257c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801257e:	683b      	ldr	r3, [r7, #0]
 8012580:	681b      	ldr	r3, [r3, #0]
 8012582:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012584:	68bb      	ldr	r3, [r7, #8]
 8012586:	f1b3 3fff 	cmp.w	r3, #4294967295
 801258a:	d103      	bne.n	8012594 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	691b      	ldr	r3, [r3, #16]
 8012590:	60fb      	str	r3, [r7, #12]
 8012592:	e00c      	b.n	80125ae <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	3308      	adds	r3, #8
 8012598:	60fb      	str	r3, [r7, #12]
 801259a:	e002      	b.n	80125a2 <vListInsert+0x2e>
 801259c:	68fb      	ldr	r3, [r7, #12]
 801259e:	685b      	ldr	r3, [r3, #4]
 80125a0:	60fb      	str	r3, [r7, #12]
 80125a2:	68fb      	ldr	r3, [r7, #12]
 80125a4:	685b      	ldr	r3, [r3, #4]
 80125a6:	681b      	ldr	r3, [r3, #0]
 80125a8:	68ba      	ldr	r2, [r7, #8]
 80125aa:	429a      	cmp	r2, r3
 80125ac:	d2f6      	bcs.n	801259c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80125ae:	68fb      	ldr	r3, [r7, #12]
 80125b0:	685a      	ldr	r2, [r3, #4]
 80125b2:	683b      	ldr	r3, [r7, #0]
 80125b4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80125b6:	683b      	ldr	r3, [r7, #0]
 80125b8:	685b      	ldr	r3, [r3, #4]
 80125ba:	683a      	ldr	r2, [r7, #0]
 80125bc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80125be:	683b      	ldr	r3, [r7, #0]
 80125c0:	68fa      	ldr	r2, [r7, #12]
 80125c2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80125c4:	68fb      	ldr	r3, [r7, #12]
 80125c6:	683a      	ldr	r2, [r7, #0]
 80125c8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80125ca:	683b      	ldr	r3, [r7, #0]
 80125cc:	687a      	ldr	r2, [r7, #4]
 80125ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	681b      	ldr	r3, [r3, #0]
 80125d4:	1c5a      	adds	r2, r3, #1
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	601a      	str	r2, [r3, #0]
}
 80125da:	bf00      	nop
 80125dc:	3714      	adds	r7, #20
 80125de:	46bd      	mov	sp, r7
 80125e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125e4:	4770      	bx	lr

080125e6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80125e6:	b480      	push	{r7}
 80125e8:	b085      	sub	sp, #20
 80125ea:	af00      	add	r7, sp, #0
 80125ec:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	691b      	ldr	r3, [r3, #16]
 80125f2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	685b      	ldr	r3, [r3, #4]
 80125f8:	687a      	ldr	r2, [r7, #4]
 80125fa:	6892      	ldr	r2, [r2, #8]
 80125fc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	689b      	ldr	r3, [r3, #8]
 8012602:	687a      	ldr	r2, [r7, #4]
 8012604:	6852      	ldr	r2, [r2, #4]
 8012606:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8012608:	68fb      	ldr	r3, [r7, #12]
 801260a:	685b      	ldr	r3, [r3, #4]
 801260c:	687a      	ldr	r2, [r7, #4]
 801260e:	429a      	cmp	r2, r3
 8012610:	d103      	bne.n	801261a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	689a      	ldr	r2, [r3, #8]
 8012616:	68fb      	ldr	r3, [r7, #12]
 8012618:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	2200      	movs	r2, #0
 801261e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8012620:	68fb      	ldr	r3, [r7, #12]
 8012622:	681b      	ldr	r3, [r3, #0]
 8012624:	1e5a      	subs	r2, r3, #1
 8012626:	68fb      	ldr	r3, [r7, #12]
 8012628:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801262a:	68fb      	ldr	r3, [r7, #12]
 801262c:	681b      	ldr	r3, [r3, #0]
}
 801262e:	4618      	mov	r0, r3
 8012630:	3714      	adds	r7, #20
 8012632:	46bd      	mov	sp, r7
 8012634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012638:	4770      	bx	lr
	...

0801263c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801263c:	b580      	push	{r7, lr}
 801263e:	b084      	sub	sp, #16
 8012640:	af00      	add	r7, sp, #0
 8012642:	6078      	str	r0, [r7, #4]
 8012644:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801264a:	68fb      	ldr	r3, [r7, #12]
 801264c:	2b00      	cmp	r3, #0
 801264e:	d109      	bne.n	8012664 <xQueueGenericReset+0x28>
	__asm volatile
 8012650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012654:	f383 8811 	msr	BASEPRI, r3
 8012658:	f3bf 8f6f 	isb	sy
 801265c:	f3bf 8f4f 	dsb	sy
 8012660:	60bb      	str	r3, [r7, #8]
 8012662:	e7fe      	b.n	8012662 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8012664:	f002 f9f2 	bl	8014a4c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8012668:	68fb      	ldr	r3, [r7, #12]
 801266a:	681a      	ldr	r2, [r3, #0]
 801266c:	68fb      	ldr	r3, [r7, #12]
 801266e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012670:	68f9      	ldr	r1, [r7, #12]
 8012672:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012674:	fb01 f303 	mul.w	r3, r1, r3
 8012678:	441a      	add	r2, r3
 801267a:	68fb      	ldr	r3, [r7, #12]
 801267c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801267e:	68fb      	ldr	r3, [r7, #12]
 8012680:	2200      	movs	r2, #0
 8012682:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8012684:	68fb      	ldr	r3, [r7, #12]
 8012686:	681a      	ldr	r2, [r3, #0]
 8012688:	68fb      	ldr	r3, [r7, #12]
 801268a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 801268c:	68fb      	ldr	r3, [r7, #12]
 801268e:	681a      	ldr	r2, [r3, #0]
 8012690:	68fb      	ldr	r3, [r7, #12]
 8012692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012694:	3b01      	subs	r3, #1
 8012696:	68f9      	ldr	r1, [r7, #12]
 8012698:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801269a:	fb01 f303 	mul.w	r3, r1, r3
 801269e:	441a      	add	r2, r3
 80126a0:	68fb      	ldr	r3, [r7, #12]
 80126a2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80126a4:	68fb      	ldr	r3, [r7, #12]
 80126a6:	22ff      	movs	r2, #255	; 0xff
 80126a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80126ac:	68fb      	ldr	r3, [r7, #12]
 80126ae:	22ff      	movs	r2, #255	; 0xff
 80126b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80126b4:	683b      	ldr	r3, [r7, #0]
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d114      	bne.n	80126e4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80126ba:	68fb      	ldr	r3, [r7, #12]
 80126bc:	691b      	ldr	r3, [r3, #16]
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d01a      	beq.n	80126f8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80126c2:	68fb      	ldr	r3, [r7, #12]
 80126c4:	3310      	adds	r3, #16
 80126c6:	4618      	mov	r0, r3
 80126c8:	f001 fada 	bl	8013c80 <xTaskRemoveFromEventList>
 80126cc:	4603      	mov	r3, r0
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	d012      	beq.n	80126f8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80126d2:	4b0d      	ldr	r3, [pc, #52]	; (8012708 <xQueueGenericReset+0xcc>)
 80126d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80126d8:	601a      	str	r2, [r3, #0]
 80126da:	f3bf 8f4f 	dsb	sy
 80126de:	f3bf 8f6f 	isb	sy
 80126e2:	e009      	b.n	80126f8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80126e4:	68fb      	ldr	r3, [r7, #12]
 80126e6:	3310      	adds	r3, #16
 80126e8:	4618      	mov	r0, r3
 80126ea:	f7ff fef2 	bl	80124d2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80126ee:	68fb      	ldr	r3, [r7, #12]
 80126f0:	3324      	adds	r3, #36	; 0x24
 80126f2:	4618      	mov	r0, r3
 80126f4:	f7ff feed 	bl	80124d2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80126f8:	f002 f9d6 	bl	8014aa8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80126fc:	2301      	movs	r3, #1
}
 80126fe:	4618      	mov	r0, r3
 8012700:	3710      	adds	r7, #16
 8012702:	46bd      	mov	sp, r7
 8012704:	bd80      	pop	{r7, pc}
 8012706:	bf00      	nop
 8012708:	e000ed04 	.word	0xe000ed04

0801270c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801270c:	b580      	push	{r7, lr}
 801270e:	b08e      	sub	sp, #56	; 0x38
 8012710:	af02      	add	r7, sp, #8
 8012712:	60f8      	str	r0, [r7, #12]
 8012714:	60b9      	str	r1, [r7, #8]
 8012716:	607a      	str	r2, [r7, #4]
 8012718:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801271a:	68fb      	ldr	r3, [r7, #12]
 801271c:	2b00      	cmp	r3, #0
 801271e:	d109      	bne.n	8012734 <xQueueGenericCreateStatic+0x28>
 8012720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012724:	f383 8811 	msr	BASEPRI, r3
 8012728:	f3bf 8f6f 	isb	sy
 801272c:	f3bf 8f4f 	dsb	sy
 8012730:	62bb      	str	r3, [r7, #40]	; 0x28
 8012732:	e7fe      	b.n	8012732 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8012734:	683b      	ldr	r3, [r7, #0]
 8012736:	2b00      	cmp	r3, #0
 8012738:	d109      	bne.n	801274e <xQueueGenericCreateStatic+0x42>
 801273a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801273e:	f383 8811 	msr	BASEPRI, r3
 8012742:	f3bf 8f6f 	isb	sy
 8012746:	f3bf 8f4f 	dsb	sy
 801274a:	627b      	str	r3, [r7, #36]	; 0x24
 801274c:	e7fe      	b.n	801274c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	2b00      	cmp	r3, #0
 8012752:	d002      	beq.n	801275a <xQueueGenericCreateStatic+0x4e>
 8012754:	68bb      	ldr	r3, [r7, #8]
 8012756:	2b00      	cmp	r3, #0
 8012758:	d001      	beq.n	801275e <xQueueGenericCreateStatic+0x52>
 801275a:	2301      	movs	r3, #1
 801275c:	e000      	b.n	8012760 <xQueueGenericCreateStatic+0x54>
 801275e:	2300      	movs	r3, #0
 8012760:	2b00      	cmp	r3, #0
 8012762:	d109      	bne.n	8012778 <xQueueGenericCreateStatic+0x6c>
 8012764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012768:	f383 8811 	msr	BASEPRI, r3
 801276c:	f3bf 8f6f 	isb	sy
 8012770:	f3bf 8f4f 	dsb	sy
 8012774:	623b      	str	r3, [r7, #32]
 8012776:	e7fe      	b.n	8012776 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	2b00      	cmp	r3, #0
 801277c:	d102      	bne.n	8012784 <xQueueGenericCreateStatic+0x78>
 801277e:	68bb      	ldr	r3, [r7, #8]
 8012780:	2b00      	cmp	r3, #0
 8012782:	d101      	bne.n	8012788 <xQueueGenericCreateStatic+0x7c>
 8012784:	2301      	movs	r3, #1
 8012786:	e000      	b.n	801278a <xQueueGenericCreateStatic+0x7e>
 8012788:	2300      	movs	r3, #0
 801278a:	2b00      	cmp	r3, #0
 801278c:	d109      	bne.n	80127a2 <xQueueGenericCreateStatic+0x96>
 801278e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012792:	f383 8811 	msr	BASEPRI, r3
 8012796:	f3bf 8f6f 	isb	sy
 801279a:	f3bf 8f4f 	dsb	sy
 801279e:	61fb      	str	r3, [r7, #28]
 80127a0:	e7fe      	b.n	80127a0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80127a2:	2348      	movs	r3, #72	; 0x48
 80127a4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80127a6:	697b      	ldr	r3, [r7, #20]
 80127a8:	2b48      	cmp	r3, #72	; 0x48
 80127aa:	d009      	beq.n	80127c0 <xQueueGenericCreateStatic+0xb4>
 80127ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127b0:	f383 8811 	msr	BASEPRI, r3
 80127b4:	f3bf 8f6f 	isb	sy
 80127b8:	f3bf 8f4f 	dsb	sy
 80127bc:	61bb      	str	r3, [r7, #24]
 80127be:	e7fe      	b.n	80127be <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80127c0:	683b      	ldr	r3, [r7, #0]
 80127c2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80127c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127c6:	2b00      	cmp	r3, #0
 80127c8:	d00d      	beq.n	80127e6 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80127ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127cc:	2201      	movs	r2, #1
 80127ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80127d2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80127d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127d8:	9300      	str	r3, [sp, #0]
 80127da:	4613      	mov	r3, r2
 80127dc:	687a      	ldr	r2, [r7, #4]
 80127de:	68b9      	ldr	r1, [r7, #8]
 80127e0:	68f8      	ldr	r0, [r7, #12]
 80127e2:	f000 f842 	bl	801286a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80127e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80127e8:	4618      	mov	r0, r3
 80127ea:	3730      	adds	r7, #48	; 0x30
 80127ec:	46bd      	mov	sp, r7
 80127ee:	bd80      	pop	{r7, pc}

080127f0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80127f0:	b580      	push	{r7, lr}
 80127f2:	b08a      	sub	sp, #40	; 0x28
 80127f4:	af02      	add	r7, sp, #8
 80127f6:	60f8      	str	r0, [r7, #12]
 80127f8:	60b9      	str	r1, [r7, #8]
 80127fa:	4613      	mov	r3, r2
 80127fc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80127fe:	68fb      	ldr	r3, [r7, #12]
 8012800:	2b00      	cmp	r3, #0
 8012802:	d109      	bne.n	8012818 <xQueueGenericCreate+0x28>
 8012804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012808:	f383 8811 	msr	BASEPRI, r3
 801280c:	f3bf 8f6f 	isb	sy
 8012810:	f3bf 8f4f 	dsb	sy
 8012814:	613b      	str	r3, [r7, #16]
 8012816:	e7fe      	b.n	8012816 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8012818:	68bb      	ldr	r3, [r7, #8]
 801281a:	2b00      	cmp	r3, #0
 801281c:	d102      	bne.n	8012824 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 801281e:	2300      	movs	r3, #0
 8012820:	61fb      	str	r3, [r7, #28]
 8012822:	e004      	b.n	801282e <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012824:	68fb      	ldr	r3, [r7, #12]
 8012826:	68ba      	ldr	r2, [r7, #8]
 8012828:	fb02 f303 	mul.w	r3, r2, r3
 801282c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 801282e:	69fb      	ldr	r3, [r7, #28]
 8012830:	3348      	adds	r3, #72	; 0x48
 8012832:	4618      	mov	r0, r3
 8012834:	f002 fa24 	bl	8014c80 <pvPortMalloc>
 8012838:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 801283a:	69bb      	ldr	r3, [r7, #24]
 801283c:	2b00      	cmp	r3, #0
 801283e:	d00f      	beq.n	8012860 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8012840:	69bb      	ldr	r3, [r7, #24]
 8012842:	3348      	adds	r3, #72	; 0x48
 8012844:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8012846:	69bb      	ldr	r3, [r7, #24]
 8012848:	2200      	movs	r2, #0
 801284a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801284e:	79fa      	ldrb	r2, [r7, #7]
 8012850:	69bb      	ldr	r3, [r7, #24]
 8012852:	9300      	str	r3, [sp, #0]
 8012854:	4613      	mov	r3, r2
 8012856:	697a      	ldr	r2, [r7, #20]
 8012858:	68b9      	ldr	r1, [r7, #8]
 801285a:	68f8      	ldr	r0, [r7, #12]
 801285c:	f000 f805 	bl	801286a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8012860:	69bb      	ldr	r3, [r7, #24]
	}
 8012862:	4618      	mov	r0, r3
 8012864:	3720      	adds	r7, #32
 8012866:	46bd      	mov	sp, r7
 8012868:	bd80      	pop	{r7, pc}

0801286a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801286a:	b580      	push	{r7, lr}
 801286c:	b084      	sub	sp, #16
 801286e:	af00      	add	r7, sp, #0
 8012870:	60f8      	str	r0, [r7, #12]
 8012872:	60b9      	str	r1, [r7, #8]
 8012874:	607a      	str	r2, [r7, #4]
 8012876:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8012878:	68bb      	ldr	r3, [r7, #8]
 801287a:	2b00      	cmp	r3, #0
 801287c:	d103      	bne.n	8012886 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801287e:	69bb      	ldr	r3, [r7, #24]
 8012880:	69ba      	ldr	r2, [r7, #24]
 8012882:	601a      	str	r2, [r3, #0]
 8012884:	e002      	b.n	801288c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8012886:	69bb      	ldr	r3, [r7, #24]
 8012888:	687a      	ldr	r2, [r7, #4]
 801288a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801288c:	69bb      	ldr	r3, [r7, #24]
 801288e:	68fa      	ldr	r2, [r7, #12]
 8012890:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8012892:	69bb      	ldr	r3, [r7, #24]
 8012894:	68ba      	ldr	r2, [r7, #8]
 8012896:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8012898:	2101      	movs	r1, #1
 801289a:	69b8      	ldr	r0, [r7, #24]
 801289c:	f7ff fece 	bl	801263c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80128a0:	bf00      	nop
 80128a2:	3710      	adds	r7, #16
 80128a4:	46bd      	mov	sp, r7
 80128a6:	bd80      	pop	{r7, pc}

080128a8 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80128a8:	b580      	push	{r7, lr}
 80128aa:	b082      	sub	sp, #8
 80128ac:	af00      	add	r7, sp, #0
 80128ae:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	d00e      	beq.n	80128d4 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	2200      	movs	r2, #0
 80128ba:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	2200      	movs	r2, #0
 80128c0:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	2200      	movs	r2, #0
 80128c6:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80128c8:	2300      	movs	r3, #0
 80128ca:	2200      	movs	r2, #0
 80128cc:	2100      	movs	r1, #0
 80128ce:	6878      	ldr	r0, [r7, #4]
 80128d0:	f000 f838 	bl	8012944 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80128d4:	bf00      	nop
 80128d6:	3708      	adds	r7, #8
 80128d8:	46bd      	mov	sp, r7
 80128da:	bd80      	pop	{r7, pc}

080128dc <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80128dc:	b580      	push	{r7, lr}
 80128de:	b086      	sub	sp, #24
 80128e0:	af00      	add	r7, sp, #0
 80128e2:	4603      	mov	r3, r0
 80128e4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80128e6:	2301      	movs	r3, #1
 80128e8:	617b      	str	r3, [r7, #20]
 80128ea:	2300      	movs	r3, #0
 80128ec:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80128ee:	79fb      	ldrb	r3, [r7, #7]
 80128f0:	461a      	mov	r2, r3
 80128f2:	6939      	ldr	r1, [r7, #16]
 80128f4:	6978      	ldr	r0, [r7, #20]
 80128f6:	f7ff ff7b 	bl	80127f0 <xQueueGenericCreate>
 80128fa:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80128fc:	68f8      	ldr	r0, [r7, #12]
 80128fe:	f7ff ffd3 	bl	80128a8 <prvInitialiseMutex>

		return pxNewQueue;
 8012902:	68fb      	ldr	r3, [r7, #12]
	}
 8012904:	4618      	mov	r0, r3
 8012906:	3718      	adds	r7, #24
 8012908:	46bd      	mov	sp, r7
 801290a:	bd80      	pop	{r7, pc}

0801290c <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 801290c:	b580      	push	{r7, lr}
 801290e:	b088      	sub	sp, #32
 8012910:	af02      	add	r7, sp, #8
 8012912:	4603      	mov	r3, r0
 8012914:	6039      	str	r1, [r7, #0]
 8012916:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8012918:	2301      	movs	r3, #1
 801291a:	617b      	str	r3, [r7, #20]
 801291c:	2300      	movs	r3, #0
 801291e:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8012920:	79fb      	ldrb	r3, [r7, #7]
 8012922:	9300      	str	r3, [sp, #0]
 8012924:	683b      	ldr	r3, [r7, #0]
 8012926:	2200      	movs	r2, #0
 8012928:	6939      	ldr	r1, [r7, #16]
 801292a:	6978      	ldr	r0, [r7, #20]
 801292c:	f7ff feee 	bl	801270c <xQueueGenericCreateStatic>
 8012930:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8012932:	68f8      	ldr	r0, [r7, #12]
 8012934:	f7ff ffb8 	bl	80128a8 <prvInitialiseMutex>

		return pxNewQueue;
 8012938:	68fb      	ldr	r3, [r7, #12]
	}
 801293a:	4618      	mov	r0, r3
 801293c:	3718      	adds	r7, #24
 801293e:	46bd      	mov	sp, r7
 8012940:	bd80      	pop	{r7, pc}
	...

08012944 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8012944:	b580      	push	{r7, lr}
 8012946:	b08e      	sub	sp, #56	; 0x38
 8012948:	af00      	add	r7, sp, #0
 801294a:	60f8      	str	r0, [r7, #12]
 801294c:	60b9      	str	r1, [r7, #8]
 801294e:	607a      	str	r2, [r7, #4]
 8012950:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8012952:	2300      	movs	r3, #0
 8012954:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8012956:	68fb      	ldr	r3, [r7, #12]
 8012958:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801295a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801295c:	2b00      	cmp	r3, #0
 801295e:	d109      	bne.n	8012974 <xQueueGenericSend+0x30>
 8012960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012964:	f383 8811 	msr	BASEPRI, r3
 8012968:	f3bf 8f6f 	isb	sy
 801296c:	f3bf 8f4f 	dsb	sy
 8012970:	62bb      	str	r3, [r7, #40]	; 0x28
 8012972:	e7fe      	b.n	8012972 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012974:	68bb      	ldr	r3, [r7, #8]
 8012976:	2b00      	cmp	r3, #0
 8012978:	d103      	bne.n	8012982 <xQueueGenericSend+0x3e>
 801297a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801297e:	2b00      	cmp	r3, #0
 8012980:	d101      	bne.n	8012986 <xQueueGenericSend+0x42>
 8012982:	2301      	movs	r3, #1
 8012984:	e000      	b.n	8012988 <xQueueGenericSend+0x44>
 8012986:	2300      	movs	r3, #0
 8012988:	2b00      	cmp	r3, #0
 801298a:	d109      	bne.n	80129a0 <xQueueGenericSend+0x5c>
 801298c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012990:	f383 8811 	msr	BASEPRI, r3
 8012994:	f3bf 8f6f 	isb	sy
 8012998:	f3bf 8f4f 	dsb	sy
 801299c:	627b      	str	r3, [r7, #36]	; 0x24
 801299e:	e7fe      	b.n	801299e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80129a0:	683b      	ldr	r3, [r7, #0]
 80129a2:	2b02      	cmp	r3, #2
 80129a4:	d103      	bne.n	80129ae <xQueueGenericSend+0x6a>
 80129a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80129aa:	2b01      	cmp	r3, #1
 80129ac:	d101      	bne.n	80129b2 <xQueueGenericSend+0x6e>
 80129ae:	2301      	movs	r3, #1
 80129b0:	e000      	b.n	80129b4 <xQueueGenericSend+0x70>
 80129b2:	2300      	movs	r3, #0
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d109      	bne.n	80129cc <xQueueGenericSend+0x88>
 80129b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129bc:	f383 8811 	msr	BASEPRI, r3
 80129c0:	f3bf 8f6f 	isb	sy
 80129c4:	f3bf 8f4f 	dsb	sy
 80129c8:	623b      	str	r3, [r7, #32]
 80129ca:	e7fe      	b.n	80129ca <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80129cc:	f001 fb14 	bl	8013ff8 <xTaskGetSchedulerState>
 80129d0:	4603      	mov	r3, r0
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d102      	bne.n	80129dc <xQueueGenericSend+0x98>
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d101      	bne.n	80129e0 <xQueueGenericSend+0x9c>
 80129dc:	2301      	movs	r3, #1
 80129de:	e000      	b.n	80129e2 <xQueueGenericSend+0x9e>
 80129e0:	2300      	movs	r3, #0
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d109      	bne.n	80129fa <xQueueGenericSend+0xb6>
 80129e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129ea:	f383 8811 	msr	BASEPRI, r3
 80129ee:	f3bf 8f6f 	isb	sy
 80129f2:	f3bf 8f4f 	dsb	sy
 80129f6:	61fb      	str	r3, [r7, #28]
 80129f8:	e7fe      	b.n	80129f8 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80129fa:	f002 f827 	bl	8014a4c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80129fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012a06:	429a      	cmp	r2, r3
 8012a08:	d302      	bcc.n	8012a10 <xQueueGenericSend+0xcc>
 8012a0a:	683b      	ldr	r3, [r7, #0]
 8012a0c:	2b02      	cmp	r3, #2
 8012a0e:	d129      	bne.n	8012a64 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012a10:	683a      	ldr	r2, [r7, #0]
 8012a12:	68b9      	ldr	r1, [r7, #8]
 8012a14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012a16:	f000 fc26 	bl	8013266 <prvCopyDataToQueue>
 8012a1a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	d010      	beq.n	8012a46 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a26:	3324      	adds	r3, #36	; 0x24
 8012a28:	4618      	mov	r0, r3
 8012a2a:	f001 f929 	bl	8013c80 <xTaskRemoveFromEventList>
 8012a2e:	4603      	mov	r3, r0
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d013      	beq.n	8012a5c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8012a34:	4b3f      	ldr	r3, [pc, #252]	; (8012b34 <xQueueGenericSend+0x1f0>)
 8012a36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012a3a:	601a      	str	r2, [r3, #0]
 8012a3c:	f3bf 8f4f 	dsb	sy
 8012a40:	f3bf 8f6f 	isb	sy
 8012a44:	e00a      	b.n	8012a5c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8012a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d007      	beq.n	8012a5c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8012a4c:	4b39      	ldr	r3, [pc, #228]	; (8012b34 <xQueueGenericSend+0x1f0>)
 8012a4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012a52:	601a      	str	r2, [r3, #0]
 8012a54:	f3bf 8f4f 	dsb	sy
 8012a58:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8012a5c:	f002 f824 	bl	8014aa8 <vPortExitCritical>
				return pdPASS;
 8012a60:	2301      	movs	r3, #1
 8012a62:	e063      	b.n	8012b2c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	d103      	bne.n	8012a72 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012a6a:	f002 f81d 	bl	8014aa8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8012a6e:	2300      	movs	r3, #0
 8012a70:	e05c      	b.n	8012b2c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	d106      	bne.n	8012a86 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012a78:	f107 0314 	add.w	r3, r7, #20
 8012a7c:	4618      	mov	r0, r3
 8012a7e:	f001 f961 	bl	8013d44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012a82:	2301      	movs	r3, #1
 8012a84:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012a86:	f002 f80f 	bl	8014aa8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012a8a:	f000 ff15 	bl	80138b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012a8e:	f001 ffdd 	bl	8014a4c <vPortEnterCritical>
 8012a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012a98:	b25b      	sxtb	r3, r3
 8012a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a9e:	d103      	bne.n	8012aa8 <xQueueGenericSend+0x164>
 8012aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012aa2:	2200      	movs	r2, #0
 8012aa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012aaa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012aae:	b25b      	sxtb	r3, r3
 8012ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ab4:	d103      	bne.n	8012abe <xQueueGenericSend+0x17a>
 8012ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ab8:	2200      	movs	r2, #0
 8012aba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012abe:	f001 fff3 	bl	8014aa8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012ac2:	1d3a      	adds	r2, r7, #4
 8012ac4:	f107 0314 	add.w	r3, r7, #20
 8012ac8:	4611      	mov	r1, r2
 8012aca:	4618      	mov	r0, r3
 8012acc:	f001 f950 	bl	8013d70 <xTaskCheckForTimeOut>
 8012ad0:	4603      	mov	r3, r0
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	d124      	bne.n	8012b20 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8012ad6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012ad8:	f000 fcbd 	bl	8013456 <prvIsQueueFull>
 8012adc:	4603      	mov	r3, r0
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d018      	beq.n	8012b14 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8012ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ae4:	3310      	adds	r3, #16
 8012ae6:	687a      	ldr	r2, [r7, #4]
 8012ae8:	4611      	mov	r1, r2
 8012aea:	4618      	mov	r0, r3
 8012aec:	f001 f8a4 	bl	8013c38 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8012af0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012af2:	f000 fc48 	bl	8013386 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8012af6:	f000 feed 	bl	80138d4 <xTaskResumeAll>
 8012afa:	4603      	mov	r3, r0
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	f47f af7c 	bne.w	80129fa <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8012b02:	4b0c      	ldr	r3, [pc, #48]	; (8012b34 <xQueueGenericSend+0x1f0>)
 8012b04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012b08:	601a      	str	r2, [r3, #0]
 8012b0a:	f3bf 8f4f 	dsb	sy
 8012b0e:	f3bf 8f6f 	isb	sy
 8012b12:	e772      	b.n	80129fa <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8012b14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012b16:	f000 fc36 	bl	8013386 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012b1a:	f000 fedb 	bl	80138d4 <xTaskResumeAll>
 8012b1e:	e76c      	b.n	80129fa <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8012b20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012b22:	f000 fc30 	bl	8013386 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012b26:	f000 fed5 	bl	80138d4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8012b2a:	2300      	movs	r3, #0
		}
	}
}
 8012b2c:	4618      	mov	r0, r3
 8012b2e:	3738      	adds	r7, #56	; 0x38
 8012b30:	46bd      	mov	sp, r7
 8012b32:	bd80      	pop	{r7, pc}
 8012b34:	e000ed04 	.word	0xe000ed04

08012b38 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8012b38:	b580      	push	{r7, lr}
 8012b3a:	b08e      	sub	sp, #56	; 0x38
 8012b3c:	af00      	add	r7, sp, #0
 8012b3e:	60f8      	str	r0, [r7, #12]
 8012b40:	60b9      	str	r1, [r7, #8]
 8012b42:	607a      	str	r2, [r7, #4]
 8012b44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8012b46:	68fb      	ldr	r3, [r7, #12]
 8012b48:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d109      	bne.n	8012b64 <xQueueGenericSendFromISR+0x2c>
 8012b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b54:	f383 8811 	msr	BASEPRI, r3
 8012b58:	f3bf 8f6f 	isb	sy
 8012b5c:	f3bf 8f4f 	dsb	sy
 8012b60:	627b      	str	r3, [r7, #36]	; 0x24
 8012b62:	e7fe      	b.n	8012b62 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012b64:	68bb      	ldr	r3, [r7, #8]
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	d103      	bne.n	8012b72 <xQueueGenericSendFromISR+0x3a>
 8012b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	d101      	bne.n	8012b76 <xQueueGenericSendFromISR+0x3e>
 8012b72:	2301      	movs	r3, #1
 8012b74:	e000      	b.n	8012b78 <xQueueGenericSendFromISR+0x40>
 8012b76:	2300      	movs	r3, #0
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	d109      	bne.n	8012b90 <xQueueGenericSendFromISR+0x58>
 8012b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b80:	f383 8811 	msr	BASEPRI, r3
 8012b84:	f3bf 8f6f 	isb	sy
 8012b88:	f3bf 8f4f 	dsb	sy
 8012b8c:	623b      	str	r3, [r7, #32]
 8012b8e:	e7fe      	b.n	8012b8e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012b90:	683b      	ldr	r3, [r7, #0]
 8012b92:	2b02      	cmp	r3, #2
 8012b94:	d103      	bne.n	8012b9e <xQueueGenericSendFromISR+0x66>
 8012b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012b9a:	2b01      	cmp	r3, #1
 8012b9c:	d101      	bne.n	8012ba2 <xQueueGenericSendFromISR+0x6a>
 8012b9e:	2301      	movs	r3, #1
 8012ba0:	e000      	b.n	8012ba4 <xQueueGenericSendFromISR+0x6c>
 8012ba2:	2300      	movs	r3, #0
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	d109      	bne.n	8012bbc <xQueueGenericSendFromISR+0x84>
 8012ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bac:	f383 8811 	msr	BASEPRI, r3
 8012bb0:	f3bf 8f6f 	isb	sy
 8012bb4:	f3bf 8f4f 	dsb	sy
 8012bb8:	61fb      	str	r3, [r7, #28]
 8012bba:	e7fe      	b.n	8012bba <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012bbc:	f002 f822 	bl	8014c04 <vPortValidateInterruptPriority>
	__asm volatile
 8012bc0:	f3ef 8211 	mrs	r2, BASEPRI
 8012bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bc8:	f383 8811 	msr	BASEPRI, r3
 8012bcc:	f3bf 8f6f 	isb	sy
 8012bd0:	f3bf 8f4f 	dsb	sy
 8012bd4:	61ba      	str	r2, [r7, #24]
 8012bd6:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8012bd8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012bda:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012be4:	429a      	cmp	r2, r3
 8012be6:	d302      	bcc.n	8012bee <xQueueGenericSendFromISR+0xb6>
 8012be8:	683b      	ldr	r3, [r7, #0]
 8012bea:	2b02      	cmp	r3, #2
 8012bec:	d12c      	bne.n	8012c48 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bf0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012bf4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012bf8:	683a      	ldr	r2, [r7, #0]
 8012bfa:	68b9      	ldr	r1, [r7, #8]
 8012bfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012bfe:	f000 fb32 	bl	8013266 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012c02:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8012c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c0a:	d112      	bne.n	8012c32 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d016      	beq.n	8012c42 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c16:	3324      	adds	r3, #36	; 0x24
 8012c18:	4618      	mov	r0, r3
 8012c1a:	f001 f831 	bl	8013c80 <xTaskRemoveFromEventList>
 8012c1e:	4603      	mov	r3, r0
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d00e      	beq.n	8012c42 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	d00b      	beq.n	8012c42 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	2201      	movs	r2, #1
 8012c2e:	601a      	str	r2, [r3, #0]
 8012c30:	e007      	b.n	8012c42 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012c32:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012c36:	3301      	adds	r3, #1
 8012c38:	b2db      	uxtb	r3, r3
 8012c3a:	b25a      	sxtb	r2, r3
 8012c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012c42:	2301      	movs	r3, #1
 8012c44:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8012c46:	e001      	b.n	8012c4c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012c48:	2300      	movs	r3, #0
 8012c4a:	637b      	str	r3, [r7, #52]	; 0x34
 8012c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c4e:	613b      	str	r3, [r7, #16]
	__asm volatile
 8012c50:	693b      	ldr	r3, [r7, #16]
 8012c52:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012c58:	4618      	mov	r0, r3
 8012c5a:	3738      	adds	r7, #56	; 0x38
 8012c5c:	46bd      	mov	sp, r7
 8012c5e:	bd80      	pop	{r7, pc}

08012c60 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012c60:	b580      	push	{r7, lr}
 8012c62:	b08e      	sub	sp, #56	; 0x38
 8012c64:	af00      	add	r7, sp, #0
 8012c66:	6078      	str	r0, [r7, #4]
 8012c68:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8012c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d109      	bne.n	8012c88 <xQueueGiveFromISR+0x28>
	__asm volatile
 8012c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c78:	f383 8811 	msr	BASEPRI, r3
 8012c7c:	f3bf 8f6f 	isb	sy
 8012c80:	f3bf 8f4f 	dsb	sy
 8012c84:	623b      	str	r3, [r7, #32]
 8012c86:	e7fe      	b.n	8012c86 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d009      	beq.n	8012ca4 <xQueueGiveFromISR+0x44>
 8012c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c94:	f383 8811 	msr	BASEPRI, r3
 8012c98:	f3bf 8f6f 	isb	sy
 8012c9c:	f3bf 8f4f 	dsb	sy
 8012ca0:	61fb      	str	r3, [r7, #28]
 8012ca2:	e7fe      	b.n	8012ca2 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8012ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ca6:	681b      	ldr	r3, [r3, #0]
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	d103      	bne.n	8012cb4 <xQueueGiveFromISR+0x54>
 8012cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cae:	685b      	ldr	r3, [r3, #4]
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	d101      	bne.n	8012cb8 <xQueueGiveFromISR+0x58>
 8012cb4:	2301      	movs	r3, #1
 8012cb6:	e000      	b.n	8012cba <xQueueGiveFromISR+0x5a>
 8012cb8:	2300      	movs	r3, #0
 8012cba:	2b00      	cmp	r3, #0
 8012cbc:	d109      	bne.n	8012cd2 <xQueueGiveFromISR+0x72>
 8012cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cc2:	f383 8811 	msr	BASEPRI, r3
 8012cc6:	f3bf 8f6f 	isb	sy
 8012cca:	f3bf 8f4f 	dsb	sy
 8012cce:	61bb      	str	r3, [r7, #24]
 8012cd0:	e7fe      	b.n	8012cd0 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012cd2:	f001 ff97 	bl	8014c04 <vPortValidateInterruptPriority>
	__asm volatile
 8012cd6:	f3ef 8211 	mrs	r2, BASEPRI
 8012cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cde:	f383 8811 	msr	BASEPRI, r3
 8012ce2:	f3bf 8f6f 	isb	sy
 8012ce6:	f3bf 8f4f 	dsb	sy
 8012cea:	617a      	str	r2, [r7, #20]
 8012cec:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8012cee:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012cf6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8012cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012cfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012cfe:	429a      	cmp	r2, r3
 8012d00:	d22b      	bcs.n	8012d5a <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012d08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d0e:	1c5a      	adds	r2, r3, #1
 8012d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d12:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012d14:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d1c:	d112      	bne.n	8012d44 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d016      	beq.n	8012d54 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d28:	3324      	adds	r3, #36	; 0x24
 8012d2a:	4618      	mov	r0, r3
 8012d2c:	f000 ffa8 	bl	8013c80 <xTaskRemoveFromEventList>
 8012d30:	4603      	mov	r3, r0
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	d00e      	beq.n	8012d54 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012d36:	683b      	ldr	r3, [r7, #0]
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	d00b      	beq.n	8012d54 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012d3c:	683b      	ldr	r3, [r7, #0]
 8012d3e:	2201      	movs	r2, #1
 8012d40:	601a      	str	r2, [r3, #0]
 8012d42:	e007      	b.n	8012d54 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012d44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012d48:	3301      	adds	r3, #1
 8012d4a:	b2db      	uxtb	r3, r3
 8012d4c:	b25a      	sxtb	r2, r3
 8012d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012d54:	2301      	movs	r3, #1
 8012d56:	637b      	str	r3, [r7, #52]	; 0x34
 8012d58:	e001      	b.n	8012d5e <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012d5a:	2300      	movs	r3, #0
 8012d5c:	637b      	str	r3, [r7, #52]	; 0x34
 8012d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d60:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8012d62:	68fb      	ldr	r3, [r7, #12]
 8012d64:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012d6a:	4618      	mov	r0, r3
 8012d6c:	3738      	adds	r7, #56	; 0x38
 8012d6e:	46bd      	mov	sp, r7
 8012d70:	bd80      	pop	{r7, pc}
	...

08012d74 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8012d74:	b580      	push	{r7, lr}
 8012d76:	b08c      	sub	sp, #48	; 0x30
 8012d78:	af00      	add	r7, sp, #0
 8012d7a:	60f8      	str	r0, [r7, #12]
 8012d7c:	60b9      	str	r1, [r7, #8]
 8012d7e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8012d80:	2300      	movs	r3, #0
 8012d82:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8012d84:	68fb      	ldr	r3, [r7, #12]
 8012d86:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d8a:	2b00      	cmp	r3, #0
 8012d8c:	d109      	bne.n	8012da2 <xQueueReceive+0x2e>
	__asm volatile
 8012d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d92:	f383 8811 	msr	BASEPRI, r3
 8012d96:	f3bf 8f6f 	isb	sy
 8012d9a:	f3bf 8f4f 	dsb	sy
 8012d9e:	623b      	str	r3, [r7, #32]
 8012da0:	e7fe      	b.n	8012da0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012da2:	68bb      	ldr	r3, [r7, #8]
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	d103      	bne.n	8012db0 <xQueueReceive+0x3c>
 8012da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012dac:	2b00      	cmp	r3, #0
 8012dae:	d101      	bne.n	8012db4 <xQueueReceive+0x40>
 8012db0:	2301      	movs	r3, #1
 8012db2:	e000      	b.n	8012db6 <xQueueReceive+0x42>
 8012db4:	2300      	movs	r3, #0
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	d109      	bne.n	8012dce <xQueueReceive+0x5a>
 8012dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dbe:	f383 8811 	msr	BASEPRI, r3
 8012dc2:	f3bf 8f6f 	isb	sy
 8012dc6:	f3bf 8f4f 	dsb	sy
 8012dca:	61fb      	str	r3, [r7, #28]
 8012dcc:	e7fe      	b.n	8012dcc <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012dce:	f001 f913 	bl	8013ff8 <xTaskGetSchedulerState>
 8012dd2:	4603      	mov	r3, r0
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	d102      	bne.n	8012dde <xQueueReceive+0x6a>
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	d101      	bne.n	8012de2 <xQueueReceive+0x6e>
 8012dde:	2301      	movs	r3, #1
 8012de0:	e000      	b.n	8012de4 <xQueueReceive+0x70>
 8012de2:	2300      	movs	r3, #0
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	d109      	bne.n	8012dfc <xQueueReceive+0x88>
 8012de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dec:	f383 8811 	msr	BASEPRI, r3
 8012df0:	f3bf 8f6f 	isb	sy
 8012df4:	f3bf 8f4f 	dsb	sy
 8012df8:	61bb      	str	r3, [r7, #24]
 8012dfa:	e7fe      	b.n	8012dfa <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8012dfc:	f001 fe26 	bl	8014a4c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012e04:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d01f      	beq.n	8012e4c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012e0c:	68b9      	ldr	r1, [r7, #8]
 8012e0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012e10:	f000 fa93 	bl	801333a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e16:	1e5a      	subs	r2, r3, #1
 8012e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e1a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e1e:	691b      	ldr	r3, [r3, #16]
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	d00f      	beq.n	8012e44 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e26:	3310      	adds	r3, #16
 8012e28:	4618      	mov	r0, r3
 8012e2a:	f000 ff29 	bl	8013c80 <xTaskRemoveFromEventList>
 8012e2e:	4603      	mov	r3, r0
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	d007      	beq.n	8012e44 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012e34:	4b3c      	ldr	r3, [pc, #240]	; (8012f28 <xQueueReceive+0x1b4>)
 8012e36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012e3a:	601a      	str	r2, [r3, #0]
 8012e3c:	f3bf 8f4f 	dsb	sy
 8012e40:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012e44:	f001 fe30 	bl	8014aa8 <vPortExitCritical>
				return pdPASS;
 8012e48:	2301      	movs	r3, #1
 8012e4a:	e069      	b.n	8012f20 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	d103      	bne.n	8012e5a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012e52:	f001 fe29 	bl	8014aa8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012e56:	2300      	movs	r3, #0
 8012e58:	e062      	b.n	8012f20 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	d106      	bne.n	8012e6e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012e60:	f107 0310 	add.w	r3, r7, #16
 8012e64:	4618      	mov	r0, r3
 8012e66:	f000 ff6d 	bl	8013d44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012e6a:	2301      	movs	r3, #1
 8012e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012e6e:	f001 fe1b 	bl	8014aa8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012e72:	f000 fd21 	bl	80138b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012e76:	f001 fde9 	bl	8014a4c <vPortEnterCritical>
 8012e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012e80:	b25b      	sxtb	r3, r3
 8012e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e86:	d103      	bne.n	8012e90 <xQueueReceive+0x11c>
 8012e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e8a:	2200      	movs	r2, #0
 8012e8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012e96:	b25b      	sxtb	r3, r3
 8012e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e9c:	d103      	bne.n	8012ea6 <xQueueReceive+0x132>
 8012e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ea0:	2200      	movs	r2, #0
 8012ea2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012ea6:	f001 fdff 	bl	8014aa8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012eaa:	1d3a      	adds	r2, r7, #4
 8012eac:	f107 0310 	add.w	r3, r7, #16
 8012eb0:	4611      	mov	r1, r2
 8012eb2:	4618      	mov	r0, r3
 8012eb4:	f000 ff5c 	bl	8013d70 <xTaskCheckForTimeOut>
 8012eb8:	4603      	mov	r3, r0
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	d123      	bne.n	8012f06 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012ebe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012ec0:	f000 fab3 	bl	801342a <prvIsQueueEmpty>
 8012ec4:	4603      	mov	r3, r0
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d017      	beq.n	8012efa <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ecc:	3324      	adds	r3, #36	; 0x24
 8012ece:	687a      	ldr	r2, [r7, #4]
 8012ed0:	4611      	mov	r1, r2
 8012ed2:	4618      	mov	r0, r3
 8012ed4:	f000 feb0 	bl	8013c38 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012ed8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012eda:	f000 fa54 	bl	8013386 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012ede:	f000 fcf9 	bl	80138d4 <xTaskResumeAll>
 8012ee2:	4603      	mov	r3, r0
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d189      	bne.n	8012dfc <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8012ee8:	4b0f      	ldr	r3, [pc, #60]	; (8012f28 <xQueueReceive+0x1b4>)
 8012eea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012eee:	601a      	str	r2, [r3, #0]
 8012ef0:	f3bf 8f4f 	dsb	sy
 8012ef4:	f3bf 8f6f 	isb	sy
 8012ef8:	e780      	b.n	8012dfc <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8012efa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012efc:	f000 fa43 	bl	8013386 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012f00:	f000 fce8 	bl	80138d4 <xTaskResumeAll>
 8012f04:	e77a      	b.n	8012dfc <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8012f06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012f08:	f000 fa3d 	bl	8013386 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012f0c:	f000 fce2 	bl	80138d4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012f10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012f12:	f000 fa8a 	bl	801342a <prvIsQueueEmpty>
 8012f16:	4603      	mov	r3, r0
 8012f18:	2b00      	cmp	r3, #0
 8012f1a:	f43f af6f 	beq.w	8012dfc <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012f1e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8012f20:	4618      	mov	r0, r3
 8012f22:	3730      	adds	r7, #48	; 0x30
 8012f24:	46bd      	mov	sp, r7
 8012f26:	bd80      	pop	{r7, pc}
 8012f28:	e000ed04 	.word	0xe000ed04

08012f2c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8012f2c:	b580      	push	{r7, lr}
 8012f2e:	b08e      	sub	sp, #56	; 0x38
 8012f30:	af00      	add	r7, sp, #0
 8012f32:	6078      	str	r0, [r7, #4]
 8012f34:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8012f36:	2300      	movs	r3, #0
 8012f38:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8012f3e:	2300      	movs	r3, #0
 8012f40:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f44:	2b00      	cmp	r3, #0
 8012f46:	d109      	bne.n	8012f5c <xQueueSemaphoreTake+0x30>
 8012f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f4c:	f383 8811 	msr	BASEPRI, r3
 8012f50:	f3bf 8f6f 	isb	sy
 8012f54:	f3bf 8f4f 	dsb	sy
 8012f58:	623b      	str	r3, [r7, #32]
 8012f5a:	e7fe      	b.n	8012f5a <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	d009      	beq.n	8012f78 <xQueueSemaphoreTake+0x4c>
 8012f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f68:	f383 8811 	msr	BASEPRI, r3
 8012f6c:	f3bf 8f6f 	isb	sy
 8012f70:	f3bf 8f4f 	dsb	sy
 8012f74:	61fb      	str	r3, [r7, #28]
 8012f76:	e7fe      	b.n	8012f76 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012f78:	f001 f83e 	bl	8013ff8 <xTaskGetSchedulerState>
 8012f7c:	4603      	mov	r3, r0
 8012f7e:	2b00      	cmp	r3, #0
 8012f80:	d102      	bne.n	8012f88 <xQueueSemaphoreTake+0x5c>
 8012f82:	683b      	ldr	r3, [r7, #0]
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	d101      	bne.n	8012f8c <xQueueSemaphoreTake+0x60>
 8012f88:	2301      	movs	r3, #1
 8012f8a:	e000      	b.n	8012f8e <xQueueSemaphoreTake+0x62>
 8012f8c:	2300      	movs	r3, #0
 8012f8e:	2b00      	cmp	r3, #0
 8012f90:	d109      	bne.n	8012fa6 <xQueueSemaphoreTake+0x7a>
 8012f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f96:	f383 8811 	msr	BASEPRI, r3
 8012f9a:	f3bf 8f6f 	isb	sy
 8012f9e:	f3bf 8f4f 	dsb	sy
 8012fa2:	61bb      	str	r3, [r7, #24]
 8012fa4:	e7fe      	b.n	8012fa4 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8012fa6:	f001 fd51 	bl	8014a4c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8012faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012fae:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8012fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fb2:	2b00      	cmp	r3, #0
 8012fb4:	d024      	beq.n	8013000 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8012fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fb8:	1e5a      	subs	r2, r3, #1
 8012fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fbc:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fc0:	681b      	ldr	r3, [r3, #0]
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d104      	bne.n	8012fd0 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8012fc6:	f001 f9dd 	bl	8014384 <pvTaskIncrementMutexHeldCount>
 8012fca:	4602      	mov	r2, r0
 8012fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fce:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fd2:	691b      	ldr	r3, [r3, #16]
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d00f      	beq.n	8012ff8 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fda:	3310      	adds	r3, #16
 8012fdc:	4618      	mov	r0, r3
 8012fde:	f000 fe4f 	bl	8013c80 <xTaskRemoveFromEventList>
 8012fe2:	4603      	mov	r3, r0
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	d007      	beq.n	8012ff8 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012fe8:	4b53      	ldr	r3, [pc, #332]	; (8013138 <xQueueSemaphoreTake+0x20c>)
 8012fea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012fee:	601a      	str	r2, [r3, #0]
 8012ff0:	f3bf 8f4f 	dsb	sy
 8012ff4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012ff8:	f001 fd56 	bl	8014aa8 <vPortExitCritical>
				return pdPASS;
 8012ffc:	2301      	movs	r3, #1
 8012ffe:	e096      	b.n	801312e <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013000:	683b      	ldr	r3, [r7, #0]
 8013002:	2b00      	cmp	r3, #0
 8013004:	d110      	bne.n	8013028 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8013006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013008:	2b00      	cmp	r3, #0
 801300a:	d009      	beq.n	8013020 <xQueueSemaphoreTake+0xf4>
 801300c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013010:	f383 8811 	msr	BASEPRI, r3
 8013014:	f3bf 8f6f 	isb	sy
 8013018:	f3bf 8f4f 	dsb	sy
 801301c:	617b      	str	r3, [r7, #20]
 801301e:	e7fe      	b.n	801301e <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8013020:	f001 fd42 	bl	8014aa8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013024:	2300      	movs	r3, #0
 8013026:	e082      	b.n	801312e <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801302a:	2b00      	cmp	r3, #0
 801302c:	d106      	bne.n	801303c <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801302e:	f107 030c 	add.w	r3, r7, #12
 8013032:	4618      	mov	r0, r3
 8013034:	f000 fe86 	bl	8013d44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013038:	2301      	movs	r3, #1
 801303a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801303c:	f001 fd34 	bl	8014aa8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013040:	f000 fc3a 	bl	80138b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013044:	f001 fd02 	bl	8014a4c <vPortEnterCritical>
 8013048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801304a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801304e:	b25b      	sxtb	r3, r3
 8013050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013054:	d103      	bne.n	801305e <xQueueSemaphoreTake+0x132>
 8013056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013058:	2200      	movs	r2, #0
 801305a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801305e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013060:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013064:	b25b      	sxtb	r3, r3
 8013066:	f1b3 3fff 	cmp.w	r3, #4294967295
 801306a:	d103      	bne.n	8013074 <xQueueSemaphoreTake+0x148>
 801306c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801306e:	2200      	movs	r2, #0
 8013070:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013074:	f001 fd18 	bl	8014aa8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013078:	463a      	mov	r2, r7
 801307a:	f107 030c 	add.w	r3, r7, #12
 801307e:	4611      	mov	r1, r2
 8013080:	4618      	mov	r0, r3
 8013082:	f000 fe75 	bl	8013d70 <xTaskCheckForTimeOut>
 8013086:	4603      	mov	r3, r0
 8013088:	2b00      	cmp	r3, #0
 801308a:	d132      	bne.n	80130f2 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801308c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801308e:	f000 f9cc 	bl	801342a <prvIsQueueEmpty>
 8013092:	4603      	mov	r3, r0
 8013094:	2b00      	cmp	r3, #0
 8013096:	d026      	beq.n	80130e6 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801309a:	681b      	ldr	r3, [r3, #0]
 801309c:	2b00      	cmp	r3, #0
 801309e:	d109      	bne.n	80130b4 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 80130a0:	f001 fcd4 	bl	8014a4c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80130a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130a6:	685b      	ldr	r3, [r3, #4]
 80130a8:	4618      	mov	r0, r3
 80130aa:	f000 ffc3 	bl	8014034 <xTaskPriorityInherit>
 80130ae:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80130b0:	f001 fcfa 	bl	8014aa8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80130b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130b6:	3324      	adds	r3, #36	; 0x24
 80130b8:	683a      	ldr	r2, [r7, #0]
 80130ba:	4611      	mov	r1, r2
 80130bc:	4618      	mov	r0, r3
 80130be:	f000 fdbb 	bl	8013c38 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80130c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80130c4:	f000 f95f 	bl	8013386 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80130c8:	f000 fc04 	bl	80138d4 <xTaskResumeAll>
 80130cc:	4603      	mov	r3, r0
 80130ce:	2b00      	cmp	r3, #0
 80130d0:	f47f af69 	bne.w	8012fa6 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 80130d4:	4b18      	ldr	r3, [pc, #96]	; (8013138 <xQueueSemaphoreTake+0x20c>)
 80130d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80130da:	601a      	str	r2, [r3, #0]
 80130dc:	f3bf 8f4f 	dsb	sy
 80130e0:	f3bf 8f6f 	isb	sy
 80130e4:	e75f      	b.n	8012fa6 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80130e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80130e8:	f000 f94d 	bl	8013386 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80130ec:	f000 fbf2 	bl	80138d4 <xTaskResumeAll>
 80130f0:	e759      	b.n	8012fa6 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80130f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80130f4:	f000 f947 	bl	8013386 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80130f8:	f000 fbec 	bl	80138d4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80130fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80130fe:	f000 f994 	bl	801342a <prvIsQueueEmpty>
 8013102:	4603      	mov	r3, r0
 8013104:	2b00      	cmp	r3, #0
 8013106:	f43f af4e 	beq.w	8012fa6 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801310a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801310c:	2b00      	cmp	r3, #0
 801310e:	d00d      	beq.n	801312c <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8013110:	f001 fc9c 	bl	8014a4c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8013114:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013116:	f000 f88e 	bl	8013236 <prvGetDisinheritPriorityAfterTimeout>
 801311a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 801311c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801311e:	685b      	ldr	r3, [r3, #4]
 8013120:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013122:	4618      	mov	r0, r3
 8013124:	f001 f890 	bl	8014248 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8013128:	f001 fcbe 	bl	8014aa8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801312c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 801312e:	4618      	mov	r0, r3
 8013130:	3738      	adds	r7, #56	; 0x38
 8013132:	46bd      	mov	sp, r7
 8013134:	bd80      	pop	{r7, pc}
 8013136:	bf00      	nop
 8013138:	e000ed04 	.word	0xe000ed04

0801313c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801313c:	b580      	push	{r7, lr}
 801313e:	b08e      	sub	sp, #56	; 0x38
 8013140:	af00      	add	r7, sp, #0
 8013142:	60f8      	str	r0, [r7, #12]
 8013144:	60b9      	str	r1, [r7, #8]
 8013146:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8013148:	68fb      	ldr	r3, [r7, #12]
 801314a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801314c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801314e:	2b00      	cmp	r3, #0
 8013150:	d109      	bne.n	8013166 <xQueueReceiveFromISR+0x2a>
 8013152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013156:	f383 8811 	msr	BASEPRI, r3
 801315a:	f3bf 8f6f 	isb	sy
 801315e:	f3bf 8f4f 	dsb	sy
 8013162:	623b      	str	r3, [r7, #32]
 8013164:	e7fe      	b.n	8013164 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013166:	68bb      	ldr	r3, [r7, #8]
 8013168:	2b00      	cmp	r3, #0
 801316a:	d103      	bne.n	8013174 <xQueueReceiveFromISR+0x38>
 801316c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801316e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013170:	2b00      	cmp	r3, #0
 8013172:	d101      	bne.n	8013178 <xQueueReceiveFromISR+0x3c>
 8013174:	2301      	movs	r3, #1
 8013176:	e000      	b.n	801317a <xQueueReceiveFromISR+0x3e>
 8013178:	2300      	movs	r3, #0
 801317a:	2b00      	cmp	r3, #0
 801317c:	d109      	bne.n	8013192 <xQueueReceiveFromISR+0x56>
 801317e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013182:	f383 8811 	msr	BASEPRI, r3
 8013186:	f3bf 8f6f 	isb	sy
 801318a:	f3bf 8f4f 	dsb	sy
 801318e:	61fb      	str	r3, [r7, #28]
 8013190:	e7fe      	b.n	8013190 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013192:	f001 fd37 	bl	8014c04 <vPortValidateInterruptPriority>
	__asm volatile
 8013196:	f3ef 8211 	mrs	r2, BASEPRI
 801319a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801319e:	f383 8811 	msr	BASEPRI, r3
 80131a2:	f3bf 8f6f 	isb	sy
 80131a6:	f3bf 8f4f 	dsb	sy
 80131aa:	61ba      	str	r2, [r7, #24]
 80131ac:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80131ae:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80131b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80131b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80131b6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80131b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	d02f      	beq.n	801321e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80131be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80131c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80131c8:	68b9      	ldr	r1, [r7, #8]
 80131ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80131cc:	f000 f8b5 	bl	801333a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80131d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131d2:	1e5a      	subs	r2, r3, #1
 80131d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131d6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80131d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80131dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80131e0:	d112      	bne.n	8013208 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80131e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131e4:	691b      	ldr	r3, [r3, #16]
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	d016      	beq.n	8013218 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80131ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131ec:	3310      	adds	r3, #16
 80131ee:	4618      	mov	r0, r3
 80131f0:	f000 fd46 	bl	8013c80 <xTaskRemoveFromEventList>
 80131f4:	4603      	mov	r3, r0
 80131f6:	2b00      	cmp	r3, #0
 80131f8:	d00e      	beq.n	8013218 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d00b      	beq.n	8013218 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	2201      	movs	r2, #1
 8013204:	601a      	str	r2, [r3, #0]
 8013206:	e007      	b.n	8013218 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8013208:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801320c:	3301      	adds	r3, #1
 801320e:	b2db      	uxtb	r3, r3
 8013210:	b25a      	sxtb	r2, r3
 8013212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013214:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8013218:	2301      	movs	r3, #1
 801321a:	637b      	str	r3, [r7, #52]	; 0x34
 801321c:	e001      	b.n	8013222 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 801321e:	2300      	movs	r3, #0
 8013220:	637b      	str	r3, [r7, #52]	; 0x34
 8013222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013224:	613b      	str	r3, [r7, #16]
	__asm volatile
 8013226:	693b      	ldr	r3, [r7, #16]
 8013228:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801322c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801322e:	4618      	mov	r0, r3
 8013230:	3738      	adds	r7, #56	; 0x38
 8013232:	46bd      	mov	sp, r7
 8013234:	bd80      	pop	{r7, pc}

08013236 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8013236:	b480      	push	{r7}
 8013238:	b085      	sub	sp, #20
 801323a:	af00      	add	r7, sp, #0
 801323c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013242:	2b00      	cmp	r3, #0
 8013244:	d006      	beq.n	8013254 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801324a:	681b      	ldr	r3, [r3, #0]
 801324c:	f1c3 0307 	rsb	r3, r3, #7
 8013250:	60fb      	str	r3, [r7, #12]
 8013252:	e001      	b.n	8013258 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8013254:	2300      	movs	r3, #0
 8013256:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8013258:	68fb      	ldr	r3, [r7, #12]
	}
 801325a:	4618      	mov	r0, r3
 801325c:	3714      	adds	r7, #20
 801325e:	46bd      	mov	sp, r7
 8013260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013264:	4770      	bx	lr

08013266 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8013266:	b580      	push	{r7, lr}
 8013268:	b086      	sub	sp, #24
 801326a:	af00      	add	r7, sp, #0
 801326c:	60f8      	str	r0, [r7, #12]
 801326e:	60b9      	str	r1, [r7, #8]
 8013270:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8013272:	2300      	movs	r3, #0
 8013274:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013276:	68fb      	ldr	r3, [r7, #12]
 8013278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801327a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801327c:	68fb      	ldr	r3, [r7, #12]
 801327e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013280:	2b00      	cmp	r3, #0
 8013282:	d10d      	bne.n	80132a0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013284:	68fb      	ldr	r3, [r7, #12]
 8013286:	681b      	ldr	r3, [r3, #0]
 8013288:	2b00      	cmp	r3, #0
 801328a:	d14d      	bne.n	8013328 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 801328c:	68fb      	ldr	r3, [r7, #12]
 801328e:	685b      	ldr	r3, [r3, #4]
 8013290:	4618      	mov	r0, r3
 8013292:	f000 ff55 	bl	8014140 <xTaskPriorityDisinherit>
 8013296:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8013298:	68fb      	ldr	r3, [r7, #12]
 801329a:	2200      	movs	r2, #0
 801329c:	605a      	str	r2, [r3, #4]
 801329e:	e043      	b.n	8013328 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	d119      	bne.n	80132da <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80132a6:	68fb      	ldr	r3, [r7, #12]
 80132a8:	6898      	ldr	r0, [r3, #8]
 80132aa:	68fb      	ldr	r3, [r7, #12]
 80132ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80132ae:	461a      	mov	r2, r3
 80132b0:	68b9      	ldr	r1, [r7, #8]
 80132b2:	f002 fc35 	bl	8015b20 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80132b6:	68fb      	ldr	r3, [r7, #12]
 80132b8:	689a      	ldr	r2, [r3, #8]
 80132ba:	68fb      	ldr	r3, [r7, #12]
 80132bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80132be:	441a      	add	r2, r3
 80132c0:	68fb      	ldr	r3, [r7, #12]
 80132c2:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80132c4:	68fb      	ldr	r3, [r7, #12]
 80132c6:	689a      	ldr	r2, [r3, #8]
 80132c8:	68fb      	ldr	r3, [r7, #12]
 80132ca:	685b      	ldr	r3, [r3, #4]
 80132cc:	429a      	cmp	r2, r3
 80132ce:	d32b      	bcc.n	8013328 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80132d0:	68fb      	ldr	r3, [r7, #12]
 80132d2:	681a      	ldr	r2, [r3, #0]
 80132d4:	68fb      	ldr	r3, [r7, #12]
 80132d6:	609a      	str	r2, [r3, #8]
 80132d8:	e026      	b.n	8013328 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80132da:	68fb      	ldr	r3, [r7, #12]
 80132dc:	68d8      	ldr	r0, [r3, #12]
 80132de:	68fb      	ldr	r3, [r7, #12]
 80132e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80132e2:	461a      	mov	r2, r3
 80132e4:	68b9      	ldr	r1, [r7, #8]
 80132e6:	f002 fc1b 	bl	8015b20 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80132ea:	68fb      	ldr	r3, [r7, #12]
 80132ec:	68da      	ldr	r2, [r3, #12]
 80132ee:	68fb      	ldr	r3, [r7, #12]
 80132f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80132f2:	425b      	negs	r3, r3
 80132f4:	441a      	add	r2, r3
 80132f6:	68fb      	ldr	r3, [r7, #12]
 80132f8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80132fa:	68fb      	ldr	r3, [r7, #12]
 80132fc:	68da      	ldr	r2, [r3, #12]
 80132fe:	68fb      	ldr	r3, [r7, #12]
 8013300:	681b      	ldr	r3, [r3, #0]
 8013302:	429a      	cmp	r2, r3
 8013304:	d207      	bcs.n	8013316 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8013306:	68fb      	ldr	r3, [r7, #12]
 8013308:	685a      	ldr	r2, [r3, #4]
 801330a:	68fb      	ldr	r3, [r7, #12]
 801330c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801330e:	425b      	negs	r3, r3
 8013310:	441a      	add	r2, r3
 8013312:	68fb      	ldr	r3, [r7, #12]
 8013314:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	2b02      	cmp	r3, #2
 801331a:	d105      	bne.n	8013328 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801331c:	693b      	ldr	r3, [r7, #16]
 801331e:	2b00      	cmp	r3, #0
 8013320:	d002      	beq.n	8013328 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8013322:	693b      	ldr	r3, [r7, #16]
 8013324:	3b01      	subs	r3, #1
 8013326:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013328:	693b      	ldr	r3, [r7, #16]
 801332a:	1c5a      	adds	r2, r3, #1
 801332c:	68fb      	ldr	r3, [r7, #12]
 801332e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8013330:	697b      	ldr	r3, [r7, #20]
}
 8013332:	4618      	mov	r0, r3
 8013334:	3718      	adds	r7, #24
 8013336:	46bd      	mov	sp, r7
 8013338:	bd80      	pop	{r7, pc}

0801333a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801333a:	b580      	push	{r7, lr}
 801333c:	b082      	sub	sp, #8
 801333e:	af00      	add	r7, sp, #0
 8013340:	6078      	str	r0, [r7, #4]
 8013342:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013348:	2b00      	cmp	r3, #0
 801334a:	d018      	beq.n	801337e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	68da      	ldr	r2, [r3, #12]
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013354:	441a      	add	r2, r3
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	68da      	ldr	r2, [r3, #12]
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	685b      	ldr	r3, [r3, #4]
 8013362:	429a      	cmp	r2, r3
 8013364:	d303      	bcc.n	801336e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	681a      	ldr	r2, [r3, #0]
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	68d9      	ldr	r1, [r3, #12]
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013376:	461a      	mov	r2, r3
 8013378:	6838      	ldr	r0, [r7, #0]
 801337a:	f002 fbd1 	bl	8015b20 <memcpy>
	}
}
 801337e:	bf00      	nop
 8013380:	3708      	adds	r7, #8
 8013382:	46bd      	mov	sp, r7
 8013384:	bd80      	pop	{r7, pc}

08013386 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8013386:	b580      	push	{r7, lr}
 8013388:	b084      	sub	sp, #16
 801338a:	af00      	add	r7, sp, #0
 801338c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801338e:	f001 fb5d 	bl	8014a4c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013398:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801339a:	e011      	b.n	80133c0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d012      	beq.n	80133ca <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	3324      	adds	r3, #36	; 0x24
 80133a8:	4618      	mov	r0, r3
 80133aa:	f000 fc69 	bl	8013c80 <xTaskRemoveFromEventList>
 80133ae:	4603      	mov	r3, r0
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	d001      	beq.n	80133b8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80133b4:	f000 fd3c 	bl	8013e30 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80133b8:	7bfb      	ldrb	r3, [r7, #15]
 80133ba:	3b01      	subs	r3, #1
 80133bc:	b2db      	uxtb	r3, r3
 80133be:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80133c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	dce9      	bgt.n	801339c <prvUnlockQueue+0x16>
 80133c8:	e000      	b.n	80133cc <prvUnlockQueue+0x46>
					break;
 80133ca:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	22ff      	movs	r2, #255	; 0xff
 80133d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80133d4:	f001 fb68 	bl	8014aa8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80133d8:	f001 fb38 	bl	8014a4c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80133e2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80133e4:	e011      	b.n	801340a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	691b      	ldr	r3, [r3, #16]
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	d012      	beq.n	8013414 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	3310      	adds	r3, #16
 80133f2:	4618      	mov	r0, r3
 80133f4:	f000 fc44 	bl	8013c80 <xTaskRemoveFromEventList>
 80133f8:	4603      	mov	r3, r0
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	d001      	beq.n	8013402 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80133fe:	f000 fd17 	bl	8013e30 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013402:	7bbb      	ldrb	r3, [r7, #14]
 8013404:	3b01      	subs	r3, #1
 8013406:	b2db      	uxtb	r3, r3
 8013408:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801340a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801340e:	2b00      	cmp	r3, #0
 8013410:	dce9      	bgt.n	80133e6 <prvUnlockQueue+0x60>
 8013412:	e000      	b.n	8013416 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8013414:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	22ff      	movs	r2, #255	; 0xff
 801341a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801341e:	f001 fb43 	bl	8014aa8 <vPortExitCritical>
}
 8013422:	bf00      	nop
 8013424:	3710      	adds	r7, #16
 8013426:	46bd      	mov	sp, r7
 8013428:	bd80      	pop	{r7, pc}

0801342a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801342a:	b580      	push	{r7, lr}
 801342c:	b084      	sub	sp, #16
 801342e:	af00      	add	r7, sp, #0
 8013430:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013432:	f001 fb0b 	bl	8014a4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801343a:	2b00      	cmp	r3, #0
 801343c:	d102      	bne.n	8013444 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801343e:	2301      	movs	r3, #1
 8013440:	60fb      	str	r3, [r7, #12]
 8013442:	e001      	b.n	8013448 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8013444:	2300      	movs	r3, #0
 8013446:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013448:	f001 fb2e 	bl	8014aa8 <vPortExitCritical>

	return xReturn;
 801344c:	68fb      	ldr	r3, [r7, #12]
}
 801344e:	4618      	mov	r0, r3
 8013450:	3710      	adds	r7, #16
 8013452:	46bd      	mov	sp, r7
 8013454:	bd80      	pop	{r7, pc}

08013456 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8013456:	b580      	push	{r7, lr}
 8013458:	b084      	sub	sp, #16
 801345a:	af00      	add	r7, sp, #0
 801345c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801345e:	f001 faf5 	bl	8014a4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801346a:	429a      	cmp	r2, r3
 801346c:	d102      	bne.n	8013474 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801346e:	2301      	movs	r3, #1
 8013470:	60fb      	str	r3, [r7, #12]
 8013472:	e001      	b.n	8013478 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8013474:	2300      	movs	r3, #0
 8013476:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013478:	f001 fb16 	bl	8014aa8 <vPortExitCritical>

	return xReturn;
 801347c:	68fb      	ldr	r3, [r7, #12]
}
 801347e:	4618      	mov	r0, r3
 8013480:	3710      	adds	r7, #16
 8013482:	46bd      	mov	sp, r7
 8013484:	bd80      	pop	{r7, pc}

08013486 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8013486:	b580      	push	{r7, lr}
 8013488:	b08e      	sub	sp, #56	; 0x38
 801348a:	af04      	add	r7, sp, #16
 801348c:	60f8      	str	r0, [r7, #12]
 801348e:	60b9      	str	r1, [r7, #8]
 8013490:	607a      	str	r2, [r7, #4]
 8013492:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8013494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013496:	2b00      	cmp	r3, #0
 8013498:	d109      	bne.n	80134ae <xTaskCreateStatic+0x28>
	__asm volatile
 801349a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801349e:	f383 8811 	msr	BASEPRI, r3
 80134a2:	f3bf 8f6f 	isb	sy
 80134a6:	f3bf 8f4f 	dsb	sy
 80134aa:	623b      	str	r3, [r7, #32]
 80134ac:	e7fe      	b.n	80134ac <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80134ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d109      	bne.n	80134c8 <xTaskCreateStatic+0x42>
 80134b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134b8:	f383 8811 	msr	BASEPRI, r3
 80134bc:	f3bf 8f6f 	isb	sy
 80134c0:	f3bf 8f4f 	dsb	sy
 80134c4:	61fb      	str	r3, [r7, #28]
 80134c6:	e7fe      	b.n	80134c6 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80134c8:	2354      	movs	r3, #84	; 0x54
 80134ca:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80134cc:	693b      	ldr	r3, [r7, #16]
 80134ce:	2b54      	cmp	r3, #84	; 0x54
 80134d0:	d009      	beq.n	80134e6 <xTaskCreateStatic+0x60>
 80134d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134d6:	f383 8811 	msr	BASEPRI, r3
 80134da:	f3bf 8f6f 	isb	sy
 80134de:	f3bf 8f4f 	dsb	sy
 80134e2:	61bb      	str	r3, [r7, #24]
 80134e4:	e7fe      	b.n	80134e4 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80134e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	d01e      	beq.n	801352a <xTaskCreateStatic+0xa4>
 80134ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	d01b      	beq.n	801352a <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80134f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134f4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80134f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80134fa:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80134fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134fe:	2202      	movs	r2, #2
 8013500:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8013504:	2300      	movs	r3, #0
 8013506:	9303      	str	r3, [sp, #12]
 8013508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801350a:	9302      	str	r3, [sp, #8]
 801350c:	f107 0314 	add.w	r3, r7, #20
 8013510:	9301      	str	r3, [sp, #4]
 8013512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013514:	9300      	str	r3, [sp, #0]
 8013516:	683b      	ldr	r3, [r7, #0]
 8013518:	687a      	ldr	r2, [r7, #4]
 801351a:	68b9      	ldr	r1, [r7, #8]
 801351c:	68f8      	ldr	r0, [r7, #12]
 801351e:	f000 f850 	bl	80135c2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013522:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013524:	f000 f8cc 	bl	80136c0 <prvAddNewTaskToReadyList>
 8013528:	e001      	b.n	801352e <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 801352a:	2300      	movs	r3, #0
 801352c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801352e:	697b      	ldr	r3, [r7, #20]
	}
 8013530:	4618      	mov	r0, r3
 8013532:	3728      	adds	r7, #40	; 0x28
 8013534:	46bd      	mov	sp, r7
 8013536:	bd80      	pop	{r7, pc}

08013538 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8013538:	b580      	push	{r7, lr}
 801353a:	b08c      	sub	sp, #48	; 0x30
 801353c:	af04      	add	r7, sp, #16
 801353e:	60f8      	str	r0, [r7, #12]
 8013540:	60b9      	str	r1, [r7, #8]
 8013542:	603b      	str	r3, [r7, #0]
 8013544:	4613      	mov	r3, r2
 8013546:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013548:	88fb      	ldrh	r3, [r7, #6]
 801354a:	009b      	lsls	r3, r3, #2
 801354c:	4618      	mov	r0, r3
 801354e:	f001 fb97 	bl	8014c80 <pvPortMalloc>
 8013552:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8013554:	697b      	ldr	r3, [r7, #20]
 8013556:	2b00      	cmp	r3, #0
 8013558:	d00e      	beq.n	8013578 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 801355a:	2054      	movs	r0, #84	; 0x54
 801355c:	f001 fb90 	bl	8014c80 <pvPortMalloc>
 8013560:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8013562:	69fb      	ldr	r3, [r7, #28]
 8013564:	2b00      	cmp	r3, #0
 8013566:	d003      	beq.n	8013570 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8013568:	69fb      	ldr	r3, [r7, #28]
 801356a:	697a      	ldr	r2, [r7, #20]
 801356c:	631a      	str	r2, [r3, #48]	; 0x30
 801356e:	e005      	b.n	801357c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8013570:	6978      	ldr	r0, [r7, #20]
 8013572:	f001 fc47 	bl	8014e04 <vPortFree>
 8013576:	e001      	b.n	801357c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8013578:	2300      	movs	r3, #0
 801357a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801357c:	69fb      	ldr	r3, [r7, #28]
 801357e:	2b00      	cmp	r3, #0
 8013580:	d017      	beq.n	80135b2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8013582:	69fb      	ldr	r3, [r7, #28]
 8013584:	2200      	movs	r2, #0
 8013586:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801358a:	88fa      	ldrh	r2, [r7, #6]
 801358c:	2300      	movs	r3, #0
 801358e:	9303      	str	r3, [sp, #12]
 8013590:	69fb      	ldr	r3, [r7, #28]
 8013592:	9302      	str	r3, [sp, #8]
 8013594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013596:	9301      	str	r3, [sp, #4]
 8013598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801359a:	9300      	str	r3, [sp, #0]
 801359c:	683b      	ldr	r3, [r7, #0]
 801359e:	68b9      	ldr	r1, [r7, #8]
 80135a0:	68f8      	ldr	r0, [r7, #12]
 80135a2:	f000 f80e 	bl	80135c2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80135a6:	69f8      	ldr	r0, [r7, #28]
 80135a8:	f000 f88a 	bl	80136c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80135ac:	2301      	movs	r3, #1
 80135ae:	61bb      	str	r3, [r7, #24]
 80135b0:	e002      	b.n	80135b8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80135b2:	f04f 33ff 	mov.w	r3, #4294967295
 80135b6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80135b8:	69bb      	ldr	r3, [r7, #24]
	}
 80135ba:	4618      	mov	r0, r3
 80135bc:	3720      	adds	r7, #32
 80135be:	46bd      	mov	sp, r7
 80135c0:	bd80      	pop	{r7, pc}

080135c2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80135c2:	b580      	push	{r7, lr}
 80135c4:	b088      	sub	sp, #32
 80135c6:	af00      	add	r7, sp, #0
 80135c8:	60f8      	str	r0, [r7, #12]
 80135ca:	60b9      	str	r1, [r7, #8]
 80135cc:	607a      	str	r2, [r7, #4]
 80135ce:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80135d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80135da:	3b01      	subs	r3, #1
 80135dc:	009b      	lsls	r3, r3, #2
 80135de:	4413      	add	r3, r2
 80135e0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80135e2:	69bb      	ldr	r3, [r7, #24]
 80135e4:	f023 0307 	bic.w	r3, r3, #7
 80135e8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80135ea:	69bb      	ldr	r3, [r7, #24]
 80135ec:	f003 0307 	and.w	r3, r3, #7
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	d009      	beq.n	8013608 <prvInitialiseNewTask+0x46>
 80135f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135f8:	f383 8811 	msr	BASEPRI, r3
 80135fc:	f3bf 8f6f 	isb	sy
 8013600:	f3bf 8f4f 	dsb	sy
 8013604:	617b      	str	r3, [r7, #20]
 8013606:	e7fe      	b.n	8013606 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013608:	2300      	movs	r3, #0
 801360a:	61fb      	str	r3, [r7, #28]
 801360c:	e012      	b.n	8013634 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801360e:	68ba      	ldr	r2, [r7, #8]
 8013610:	69fb      	ldr	r3, [r7, #28]
 8013612:	4413      	add	r3, r2
 8013614:	7819      	ldrb	r1, [r3, #0]
 8013616:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013618:	69fb      	ldr	r3, [r7, #28]
 801361a:	4413      	add	r3, r2
 801361c:	3334      	adds	r3, #52	; 0x34
 801361e:	460a      	mov	r2, r1
 8013620:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8013622:	68ba      	ldr	r2, [r7, #8]
 8013624:	69fb      	ldr	r3, [r7, #28]
 8013626:	4413      	add	r3, r2
 8013628:	781b      	ldrb	r3, [r3, #0]
 801362a:	2b00      	cmp	r3, #0
 801362c:	d006      	beq.n	801363c <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801362e:	69fb      	ldr	r3, [r7, #28]
 8013630:	3301      	adds	r3, #1
 8013632:	61fb      	str	r3, [r7, #28]
 8013634:	69fb      	ldr	r3, [r7, #28]
 8013636:	2b0f      	cmp	r3, #15
 8013638:	d9e9      	bls.n	801360e <prvInitialiseNewTask+0x4c>
 801363a:	e000      	b.n	801363e <prvInitialiseNewTask+0x7c>
		{
			break;
 801363c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801363e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013640:	2200      	movs	r2, #0
 8013642:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8013646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013648:	2b06      	cmp	r3, #6
 801364a:	d901      	bls.n	8013650 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801364c:	2306      	movs	r3, #6
 801364e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8013650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013652:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013654:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8013656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013658:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801365a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 801365c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801365e:	2200      	movs	r2, #0
 8013660:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8013662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013664:	3304      	adds	r3, #4
 8013666:	4618      	mov	r0, r3
 8013668:	f7fe ff53 	bl	8012512 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801366c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801366e:	3318      	adds	r3, #24
 8013670:	4618      	mov	r0, r3
 8013672:	f7fe ff4e 	bl	8012512 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8013676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013678:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801367a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801367c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801367e:	f1c3 0207 	rsb	r2, r3, #7
 8013682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013684:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8013686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013688:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801368a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801368c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801368e:	2200      	movs	r2, #0
 8013690:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013694:	2200      	movs	r2, #0
 8013696:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801369a:	683a      	ldr	r2, [r7, #0]
 801369c:	68f9      	ldr	r1, [r7, #12]
 801369e:	69b8      	ldr	r0, [r7, #24]
 80136a0:	f001 f8aa 	bl	80147f8 <pxPortInitialiseStack>
 80136a4:	4602      	mov	r2, r0
 80136a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136a8:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80136aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	d002      	beq.n	80136b6 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80136b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80136b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80136b6:	bf00      	nop
 80136b8:	3720      	adds	r7, #32
 80136ba:	46bd      	mov	sp, r7
 80136bc:	bd80      	pop	{r7, pc}
	...

080136c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80136c0:	b580      	push	{r7, lr}
 80136c2:	b082      	sub	sp, #8
 80136c4:	af00      	add	r7, sp, #0
 80136c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80136c8:	f001 f9c0 	bl	8014a4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80136cc:	4b2a      	ldr	r3, [pc, #168]	; (8013778 <prvAddNewTaskToReadyList+0xb8>)
 80136ce:	681b      	ldr	r3, [r3, #0]
 80136d0:	3301      	adds	r3, #1
 80136d2:	4a29      	ldr	r2, [pc, #164]	; (8013778 <prvAddNewTaskToReadyList+0xb8>)
 80136d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80136d6:	4b29      	ldr	r3, [pc, #164]	; (801377c <prvAddNewTaskToReadyList+0xbc>)
 80136d8:	681b      	ldr	r3, [r3, #0]
 80136da:	2b00      	cmp	r3, #0
 80136dc:	d109      	bne.n	80136f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80136de:	4a27      	ldr	r2, [pc, #156]	; (801377c <prvAddNewTaskToReadyList+0xbc>)
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80136e4:	4b24      	ldr	r3, [pc, #144]	; (8013778 <prvAddNewTaskToReadyList+0xb8>)
 80136e6:	681b      	ldr	r3, [r3, #0]
 80136e8:	2b01      	cmp	r3, #1
 80136ea:	d110      	bne.n	801370e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80136ec:	f000 fbc4 	bl	8013e78 <prvInitialiseTaskLists>
 80136f0:	e00d      	b.n	801370e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80136f2:	4b23      	ldr	r3, [pc, #140]	; (8013780 <prvAddNewTaskToReadyList+0xc0>)
 80136f4:	681b      	ldr	r3, [r3, #0]
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	d109      	bne.n	801370e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80136fa:	4b20      	ldr	r3, [pc, #128]	; (801377c <prvAddNewTaskToReadyList+0xbc>)
 80136fc:	681b      	ldr	r3, [r3, #0]
 80136fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013700:	687b      	ldr	r3, [r7, #4]
 8013702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013704:	429a      	cmp	r2, r3
 8013706:	d802      	bhi.n	801370e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8013708:	4a1c      	ldr	r2, [pc, #112]	; (801377c <prvAddNewTaskToReadyList+0xbc>)
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801370e:	4b1d      	ldr	r3, [pc, #116]	; (8013784 <prvAddNewTaskToReadyList+0xc4>)
 8013710:	681b      	ldr	r3, [r3, #0]
 8013712:	3301      	adds	r3, #1
 8013714:	4a1b      	ldr	r2, [pc, #108]	; (8013784 <prvAddNewTaskToReadyList+0xc4>)
 8013716:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801371c:	2201      	movs	r2, #1
 801371e:	409a      	lsls	r2, r3
 8013720:	4b19      	ldr	r3, [pc, #100]	; (8013788 <prvAddNewTaskToReadyList+0xc8>)
 8013722:	681b      	ldr	r3, [r3, #0]
 8013724:	4313      	orrs	r3, r2
 8013726:	4a18      	ldr	r2, [pc, #96]	; (8013788 <prvAddNewTaskToReadyList+0xc8>)
 8013728:	6013      	str	r3, [r2, #0]
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801372e:	4613      	mov	r3, r2
 8013730:	009b      	lsls	r3, r3, #2
 8013732:	4413      	add	r3, r2
 8013734:	009b      	lsls	r3, r3, #2
 8013736:	4a15      	ldr	r2, [pc, #84]	; (801378c <prvAddNewTaskToReadyList+0xcc>)
 8013738:	441a      	add	r2, r3
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	3304      	adds	r3, #4
 801373e:	4619      	mov	r1, r3
 8013740:	4610      	mov	r0, r2
 8013742:	f7fe fef3 	bl	801252c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8013746:	f001 f9af 	bl	8014aa8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801374a:	4b0d      	ldr	r3, [pc, #52]	; (8013780 <prvAddNewTaskToReadyList+0xc0>)
 801374c:	681b      	ldr	r3, [r3, #0]
 801374e:	2b00      	cmp	r3, #0
 8013750:	d00e      	beq.n	8013770 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013752:	4b0a      	ldr	r3, [pc, #40]	; (801377c <prvAddNewTaskToReadyList+0xbc>)
 8013754:	681b      	ldr	r3, [r3, #0]
 8013756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801375c:	429a      	cmp	r2, r3
 801375e:	d207      	bcs.n	8013770 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8013760:	4b0b      	ldr	r3, [pc, #44]	; (8013790 <prvAddNewTaskToReadyList+0xd0>)
 8013762:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013766:	601a      	str	r2, [r3, #0]
 8013768:	f3bf 8f4f 	dsb	sy
 801376c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013770:	bf00      	nop
 8013772:	3708      	adds	r7, #8
 8013774:	46bd      	mov	sp, r7
 8013776:	bd80      	pop	{r7, pc}
 8013778:	200015b8 	.word	0x200015b8
 801377c:	200014b8 	.word	0x200014b8
 8013780:	200015c4 	.word	0x200015c4
 8013784:	200015d4 	.word	0x200015d4
 8013788:	200015c0 	.word	0x200015c0
 801378c:	200014bc 	.word	0x200014bc
 8013790:	e000ed04 	.word	0xe000ed04

08013794 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8013794:	b580      	push	{r7, lr}
 8013796:	b084      	sub	sp, #16
 8013798:	af00      	add	r7, sp, #0
 801379a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801379c:	2300      	movs	r3, #0
 801379e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	2b00      	cmp	r3, #0
 80137a4:	d016      	beq.n	80137d4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80137a6:	4b13      	ldr	r3, [pc, #76]	; (80137f4 <vTaskDelay+0x60>)
 80137a8:	681b      	ldr	r3, [r3, #0]
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d009      	beq.n	80137c2 <vTaskDelay+0x2e>
 80137ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137b2:	f383 8811 	msr	BASEPRI, r3
 80137b6:	f3bf 8f6f 	isb	sy
 80137ba:	f3bf 8f4f 	dsb	sy
 80137be:	60bb      	str	r3, [r7, #8]
 80137c0:	e7fe      	b.n	80137c0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80137c2:	f000 f879 	bl	80138b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80137c6:	2100      	movs	r1, #0
 80137c8:	6878      	ldr	r0, [r7, #4]
 80137ca:	f000 ffaf 	bl	801472c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80137ce:	f000 f881 	bl	80138d4 <xTaskResumeAll>
 80137d2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80137d4:	68fb      	ldr	r3, [r7, #12]
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	d107      	bne.n	80137ea <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80137da:	4b07      	ldr	r3, [pc, #28]	; (80137f8 <vTaskDelay+0x64>)
 80137dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80137e0:	601a      	str	r2, [r3, #0]
 80137e2:	f3bf 8f4f 	dsb	sy
 80137e6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80137ea:	bf00      	nop
 80137ec:	3710      	adds	r7, #16
 80137ee:	46bd      	mov	sp, r7
 80137f0:	bd80      	pop	{r7, pc}
 80137f2:	bf00      	nop
 80137f4:	200015e0 	.word	0x200015e0
 80137f8:	e000ed04 	.word	0xe000ed04

080137fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80137fc:	b580      	push	{r7, lr}
 80137fe:	b08a      	sub	sp, #40	; 0x28
 8013800:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8013802:	2300      	movs	r3, #0
 8013804:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8013806:	2300      	movs	r3, #0
 8013808:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801380a:	463a      	mov	r2, r7
 801380c:	1d39      	adds	r1, r7, #4
 801380e:	f107 0308 	add.w	r3, r7, #8
 8013812:	4618      	mov	r0, r3
 8013814:	f7ee fd4c 	bl	80022b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8013818:	6839      	ldr	r1, [r7, #0]
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	68ba      	ldr	r2, [r7, #8]
 801381e:	9202      	str	r2, [sp, #8]
 8013820:	9301      	str	r3, [sp, #4]
 8013822:	2300      	movs	r3, #0
 8013824:	9300      	str	r3, [sp, #0]
 8013826:	2300      	movs	r3, #0
 8013828:	460a      	mov	r2, r1
 801382a:	491d      	ldr	r1, [pc, #116]	; (80138a0 <vTaskStartScheduler+0xa4>)
 801382c:	481d      	ldr	r0, [pc, #116]	; (80138a4 <vTaskStartScheduler+0xa8>)
 801382e:	f7ff fe2a 	bl	8013486 <xTaskCreateStatic>
 8013832:	4602      	mov	r2, r0
 8013834:	4b1c      	ldr	r3, [pc, #112]	; (80138a8 <vTaskStartScheduler+0xac>)
 8013836:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8013838:	4b1b      	ldr	r3, [pc, #108]	; (80138a8 <vTaskStartScheduler+0xac>)
 801383a:	681b      	ldr	r3, [r3, #0]
 801383c:	2b00      	cmp	r3, #0
 801383e:	d002      	beq.n	8013846 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8013840:	2301      	movs	r3, #1
 8013842:	617b      	str	r3, [r7, #20]
 8013844:	e001      	b.n	801384a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8013846:	2300      	movs	r3, #0
 8013848:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801384a:	697b      	ldr	r3, [r7, #20]
 801384c:	2b01      	cmp	r3, #1
 801384e:	d115      	bne.n	801387c <vTaskStartScheduler+0x80>
 8013850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013854:	f383 8811 	msr	BASEPRI, r3
 8013858:	f3bf 8f6f 	isb	sy
 801385c:	f3bf 8f4f 	dsb	sy
 8013860:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8013862:	4b12      	ldr	r3, [pc, #72]	; (80138ac <vTaskStartScheduler+0xb0>)
 8013864:	f04f 32ff 	mov.w	r2, #4294967295
 8013868:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801386a:	4b11      	ldr	r3, [pc, #68]	; (80138b0 <vTaskStartScheduler+0xb4>)
 801386c:	2201      	movs	r2, #1
 801386e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8013870:	4b10      	ldr	r3, [pc, #64]	; (80138b4 <vTaskStartScheduler+0xb8>)
 8013872:	2200      	movs	r2, #0
 8013874:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8013876:	f001 f84b 	bl	8014910 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801387a:	e00d      	b.n	8013898 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801387c:	697b      	ldr	r3, [r7, #20]
 801387e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013882:	d109      	bne.n	8013898 <vTaskStartScheduler+0x9c>
 8013884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013888:	f383 8811 	msr	BASEPRI, r3
 801388c:	f3bf 8f6f 	isb	sy
 8013890:	f3bf 8f4f 	dsb	sy
 8013894:	60fb      	str	r3, [r7, #12]
 8013896:	e7fe      	b.n	8013896 <vTaskStartScheduler+0x9a>
}
 8013898:	bf00      	nop
 801389a:	3718      	adds	r7, #24
 801389c:	46bd      	mov	sp, r7
 801389e:	bd80      	pop	{r7, pc}
 80138a0:	0801bdfc 	.word	0x0801bdfc
 80138a4:	08013e49 	.word	0x08013e49
 80138a8:	200015dc 	.word	0x200015dc
 80138ac:	200015d8 	.word	0x200015d8
 80138b0:	200015c4 	.word	0x200015c4
 80138b4:	200015bc 	.word	0x200015bc

080138b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80138b8:	b480      	push	{r7}
 80138ba:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80138bc:	4b04      	ldr	r3, [pc, #16]	; (80138d0 <vTaskSuspendAll+0x18>)
 80138be:	681b      	ldr	r3, [r3, #0]
 80138c0:	3301      	adds	r3, #1
 80138c2:	4a03      	ldr	r2, [pc, #12]	; (80138d0 <vTaskSuspendAll+0x18>)
 80138c4:	6013      	str	r3, [r2, #0]
}
 80138c6:	bf00      	nop
 80138c8:	46bd      	mov	sp, r7
 80138ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138ce:	4770      	bx	lr
 80138d0:	200015e0 	.word	0x200015e0

080138d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80138d4:	b580      	push	{r7, lr}
 80138d6:	b084      	sub	sp, #16
 80138d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80138da:	2300      	movs	r3, #0
 80138dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80138de:	2300      	movs	r3, #0
 80138e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80138e2:	4b41      	ldr	r3, [pc, #260]	; (80139e8 <xTaskResumeAll+0x114>)
 80138e4:	681b      	ldr	r3, [r3, #0]
 80138e6:	2b00      	cmp	r3, #0
 80138e8:	d109      	bne.n	80138fe <xTaskResumeAll+0x2a>
 80138ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138ee:	f383 8811 	msr	BASEPRI, r3
 80138f2:	f3bf 8f6f 	isb	sy
 80138f6:	f3bf 8f4f 	dsb	sy
 80138fa:	603b      	str	r3, [r7, #0]
 80138fc:	e7fe      	b.n	80138fc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80138fe:	f001 f8a5 	bl	8014a4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8013902:	4b39      	ldr	r3, [pc, #228]	; (80139e8 <xTaskResumeAll+0x114>)
 8013904:	681b      	ldr	r3, [r3, #0]
 8013906:	3b01      	subs	r3, #1
 8013908:	4a37      	ldr	r2, [pc, #220]	; (80139e8 <xTaskResumeAll+0x114>)
 801390a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801390c:	4b36      	ldr	r3, [pc, #216]	; (80139e8 <xTaskResumeAll+0x114>)
 801390e:	681b      	ldr	r3, [r3, #0]
 8013910:	2b00      	cmp	r3, #0
 8013912:	d161      	bne.n	80139d8 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8013914:	4b35      	ldr	r3, [pc, #212]	; (80139ec <xTaskResumeAll+0x118>)
 8013916:	681b      	ldr	r3, [r3, #0]
 8013918:	2b00      	cmp	r3, #0
 801391a:	d05d      	beq.n	80139d8 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801391c:	e02e      	b.n	801397c <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 801391e:	4b34      	ldr	r3, [pc, #208]	; (80139f0 <xTaskResumeAll+0x11c>)
 8013920:	68db      	ldr	r3, [r3, #12]
 8013922:	68db      	ldr	r3, [r3, #12]
 8013924:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013926:	68fb      	ldr	r3, [r7, #12]
 8013928:	3318      	adds	r3, #24
 801392a:	4618      	mov	r0, r3
 801392c:	f7fe fe5b 	bl	80125e6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013930:	68fb      	ldr	r3, [r7, #12]
 8013932:	3304      	adds	r3, #4
 8013934:	4618      	mov	r0, r3
 8013936:	f7fe fe56 	bl	80125e6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801393a:	68fb      	ldr	r3, [r7, #12]
 801393c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801393e:	2201      	movs	r2, #1
 8013940:	409a      	lsls	r2, r3
 8013942:	4b2c      	ldr	r3, [pc, #176]	; (80139f4 <xTaskResumeAll+0x120>)
 8013944:	681b      	ldr	r3, [r3, #0]
 8013946:	4313      	orrs	r3, r2
 8013948:	4a2a      	ldr	r2, [pc, #168]	; (80139f4 <xTaskResumeAll+0x120>)
 801394a:	6013      	str	r3, [r2, #0]
 801394c:	68fb      	ldr	r3, [r7, #12]
 801394e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013950:	4613      	mov	r3, r2
 8013952:	009b      	lsls	r3, r3, #2
 8013954:	4413      	add	r3, r2
 8013956:	009b      	lsls	r3, r3, #2
 8013958:	4a27      	ldr	r2, [pc, #156]	; (80139f8 <xTaskResumeAll+0x124>)
 801395a:	441a      	add	r2, r3
 801395c:	68fb      	ldr	r3, [r7, #12]
 801395e:	3304      	adds	r3, #4
 8013960:	4619      	mov	r1, r3
 8013962:	4610      	mov	r0, r2
 8013964:	f7fe fde2 	bl	801252c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013968:	68fb      	ldr	r3, [r7, #12]
 801396a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801396c:	4b23      	ldr	r3, [pc, #140]	; (80139fc <xTaskResumeAll+0x128>)
 801396e:	681b      	ldr	r3, [r3, #0]
 8013970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013972:	429a      	cmp	r2, r3
 8013974:	d302      	bcc.n	801397c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8013976:	4b22      	ldr	r3, [pc, #136]	; (8013a00 <xTaskResumeAll+0x12c>)
 8013978:	2201      	movs	r2, #1
 801397a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801397c:	4b1c      	ldr	r3, [pc, #112]	; (80139f0 <xTaskResumeAll+0x11c>)
 801397e:	681b      	ldr	r3, [r3, #0]
 8013980:	2b00      	cmp	r3, #0
 8013982:	d1cc      	bne.n	801391e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8013984:	68fb      	ldr	r3, [r7, #12]
 8013986:	2b00      	cmp	r3, #0
 8013988:	d001      	beq.n	801398e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801398a:	f000 fb0f 	bl	8013fac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 801398e:	4b1d      	ldr	r3, [pc, #116]	; (8013a04 <xTaskResumeAll+0x130>)
 8013990:	681b      	ldr	r3, [r3, #0]
 8013992:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	2b00      	cmp	r3, #0
 8013998:	d010      	beq.n	80139bc <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801399a:	f000 f837 	bl	8013a0c <xTaskIncrementTick>
 801399e:	4603      	mov	r3, r0
 80139a0:	2b00      	cmp	r3, #0
 80139a2:	d002      	beq.n	80139aa <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80139a4:	4b16      	ldr	r3, [pc, #88]	; (8013a00 <xTaskResumeAll+0x12c>)
 80139a6:	2201      	movs	r2, #1
 80139a8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80139aa:	687b      	ldr	r3, [r7, #4]
 80139ac:	3b01      	subs	r3, #1
 80139ae:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	d1f1      	bne.n	801399a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80139b6:	4b13      	ldr	r3, [pc, #76]	; (8013a04 <xTaskResumeAll+0x130>)
 80139b8:	2200      	movs	r2, #0
 80139ba:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80139bc:	4b10      	ldr	r3, [pc, #64]	; (8013a00 <xTaskResumeAll+0x12c>)
 80139be:	681b      	ldr	r3, [r3, #0]
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	d009      	beq.n	80139d8 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80139c4:	2301      	movs	r3, #1
 80139c6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80139c8:	4b0f      	ldr	r3, [pc, #60]	; (8013a08 <xTaskResumeAll+0x134>)
 80139ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80139ce:	601a      	str	r2, [r3, #0]
 80139d0:	f3bf 8f4f 	dsb	sy
 80139d4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80139d8:	f001 f866 	bl	8014aa8 <vPortExitCritical>

	return xAlreadyYielded;
 80139dc:	68bb      	ldr	r3, [r7, #8]
}
 80139de:	4618      	mov	r0, r3
 80139e0:	3710      	adds	r7, #16
 80139e2:	46bd      	mov	sp, r7
 80139e4:	bd80      	pop	{r7, pc}
 80139e6:	bf00      	nop
 80139e8:	200015e0 	.word	0x200015e0
 80139ec:	200015b8 	.word	0x200015b8
 80139f0:	20001578 	.word	0x20001578
 80139f4:	200015c0 	.word	0x200015c0
 80139f8:	200014bc 	.word	0x200014bc
 80139fc:	200014b8 	.word	0x200014b8
 8013a00:	200015cc 	.word	0x200015cc
 8013a04:	200015c8 	.word	0x200015c8
 8013a08:	e000ed04 	.word	0xe000ed04

08013a0c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8013a0c:	b580      	push	{r7, lr}
 8013a0e:	b086      	sub	sp, #24
 8013a10:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8013a12:	2300      	movs	r3, #0
 8013a14:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013a16:	4b50      	ldr	r3, [pc, #320]	; (8013b58 <xTaskIncrementTick+0x14c>)
 8013a18:	681b      	ldr	r3, [r3, #0]
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	f040 808c 	bne.w	8013b38 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013a20:	4b4e      	ldr	r3, [pc, #312]	; (8013b5c <xTaskIncrementTick+0x150>)
 8013a22:	681b      	ldr	r3, [r3, #0]
 8013a24:	3301      	adds	r3, #1
 8013a26:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8013a28:	4a4c      	ldr	r2, [pc, #304]	; (8013b5c <xTaskIncrementTick+0x150>)
 8013a2a:	693b      	ldr	r3, [r7, #16]
 8013a2c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8013a2e:	693b      	ldr	r3, [r7, #16]
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	d11f      	bne.n	8013a74 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8013a34:	4b4a      	ldr	r3, [pc, #296]	; (8013b60 <xTaskIncrementTick+0x154>)
 8013a36:	681b      	ldr	r3, [r3, #0]
 8013a38:	681b      	ldr	r3, [r3, #0]
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	d009      	beq.n	8013a52 <xTaskIncrementTick+0x46>
 8013a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a42:	f383 8811 	msr	BASEPRI, r3
 8013a46:	f3bf 8f6f 	isb	sy
 8013a4a:	f3bf 8f4f 	dsb	sy
 8013a4e:	603b      	str	r3, [r7, #0]
 8013a50:	e7fe      	b.n	8013a50 <xTaskIncrementTick+0x44>
 8013a52:	4b43      	ldr	r3, [pc, #268]	; (8013b60 <xTaskIncrementTick+0x154>)
 8013a54:	681b      	ldr	r3, [r3, #0]
 8013a56:	60fb      	str	r3, [r7, #12]
 8013a58:	4b42      	ldr	r3, [pc, #264]	; (8013b64 <xTaskIncrementTick+0x158>)
 8013a5a:	681b      	ldr	r3, [r3, #0]
 8013a5c:	4a40      	ldr	r2, [pc, #256]	; (8013b60 <xTaskIncrementTick+0x154>)
 8013a5e:	6013      	str	r3, [r2, #0]
 8013a60:	4a40      	ldr	r2, [pc, #256]	; (8013b64 <xTaskIncrementTick+0x158>)
 8013a62:	68fb      	ldr	r3, [r7, #12]
 8013a64:	6013      	str	r3, [r2, #0]
 8013a66:	4b40      	ldr	r3, [pc, #256]	; (8013b68 <xTaskIncrementTick+0x15c>)
 8013a68:	681b      	ldr	r3, [r3, #0]
 8013a6a:	3301      	adds	r3, #1
 8013a6c:	4a3e      	ldr	r2, [pc, #248]	; (8013b68 <xTaskIncrementTick+0x15c>)
 8013a6e:	6013      	str	r3, [r2, #0]
 8013a70:	f000 fa9c 	bl	8013fac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8013a74:	4b3d      	ldr	r3, [pc, #244]	; (8013b6c <xTaskIncrementTick+0x160>)
 8013a76:	681b      	ldr	r3, [r3, #0]
 8013a78:	693a      	ldr	r2, [r7, #16]
 8013a7a:	429a      	cmp	r2, r3
 8013a7c:	d34d      	bcc.n	8013b1a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013a7e:	4b38      	ldr	r3, [pc, #224]	; (8013b60 <xTaskIncrementTick+0x154>)
 8013a80:	681b      	ldr	r3, [r3, #0]
 8013a82:	681b      	ldr	r3, [r3, #0]
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	d101      	bne.n	8013a8c <xTaskIncrementTick+0x80>
 8013a88:	2301      	movs	r3, #1
 8013a8a:	e000      	b.n	8013a8e <xTaskIncrementTick+0x82>
 8013a8c:	2300      	movs	r3, #0
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	d004      	beq.n	8013a9c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013a92:	4b36      	ldr	r3, [pc, #216]	; (8013b6c <xTaskIncrementTick+0x160>)
 8013a94:	f04f 32ff 	mov.w	r2, #4294967295
 8013a98:	601a      	str	r2, [r3, #0]
					break;
 8013a9a:	e03e      	b.n	8013b1a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8013a9c:	4b30      	ldr	r3, [pc, #192]	; (8013b60 <xTaskIncrementTick+0x154>)
 8013a9e:	681b      	ldr	r3, [r3, #0]
 8013aa0:	68db      	ldr	r3, [r3, #12]
 8013aa2:	68db      	ldr	r3, [r3, #12]
 8013aa4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8013aa6:	68bb      	ldr	r3, [r7, #8]
 8013aa8:	685b      	ldr	r3, [r3, #4]
 8013aaa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8013aac:	693a      	ldr	r2, [r7, #16]
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	429a      	cmp	r2, r3
 8013ab2:	d203      	bcs.n	8013abc <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8013ab4:	4a2d      	ldr	r2, [pc, #180]	; (8013b6c <xTaskIncrementTick+0x160>)
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	6013      	str	r3, [r2, #0]
						break;
 8013aba:	e02e      	b.n	8013b1a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013abc:	68bb      	ldr	r3, [r7, #8]
 8013abe:	3304      	adds	r3, #4
 8013ac0:	4618      	mov	r0, r3
 8013ac2:	f7fe fd90 	bl	80125e6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013ac6:	68bb      	ldr	r3, [r7, #8]
 8013ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	d004      	beq.n	8013ad8 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013ace:	68bb      	ldr	r3, [r7, #8]
 8013ad0:	3318      	adds	r3, #24
 8013ad2:	4618      	mov	r0, r3
 8013ad4:	f7fe fd87 	bl	80125e6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8013ad8:	68bb      	ldr	r3, [r7, #8]
 8013ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013adc:	2201      	movs	r2, #1
 8013ade:	409a      	lsls	r2, r3
 8013ae0:	4b23      	ldr	r3, [pc, #140]	; (8013b70 <xTaskIncrementTick+0x164>)
 8013ae2:	681b      	ldr	r3, [r3, #0]
 8013ae4:	4313      	orrs	r3, r2
 8013ae6:	4a22      	ldr	r2, [pc, #136]	; (8013b70 <xTaskIncrementTick+0x164>)
 8013ae8:	6013      	str	r3, [r2, #0]
 8013aea:	68bb      	ldr	r3, [r7, #8]
 8013aec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013aee:	4613      	mov	r3, r2
 8013af0:	009b      	lsls	r3, r3, #2
 8013af2:	4413      	add	r3, r2
 8013af4:	009b      	lsls	r3, r3, #2
 8013af6:	4a1f      	ldr	r2, [pc, #124]	; (8013b74 <xTaskIncrementTick+0x168>)
 8013af8:	441a      	add	r2, r3
 8013afa:	68bb      	ldr	r3, [r7, #8]
 8013afc:	3304      	adds	r3, #4
 8013afe:	4619      	mov	r1, r3
 8013b00:	4610      	mov	r0, r2
 8013b02:	f7fe fd13 	bl	801252c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013b06:	68bb      	ldr	r3, [r7, #8]
 8013b08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b0a:	4b1b      	ldr	r3, [pc, #108]	; (8013b78 <xTaskIncrementTick+0x16c>)
 8013b0c:	681b      	ldr	r3, [r3, #0]
 8013b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b10:	429a      	cmp	r2, r3
 8013b12:	d3b4      	bcc.n	8013a7e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8013b14:	2301      	movs	r3, #1
 8013b16:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013b18:	e7b1      	b.n	8013a7e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8013b1a:	4b17      	ldr	r3, [pc, #92]	; (8013b78 <xTaskIncrementTick+0x16c>)
 8013b1c:	681b      	ldr	r3, [r3, #0]
 8013b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b20:	4914      	ldr	r1, [pc, #80]	; (8013b74 <xTaskIncrementTick+0x168>)
 8013b22:	4613      	mov	r3, r2
 8013b24:	009b      	lsls	r3, r3, #2
 8013b26:	4413      	add	r3, r2
 8013b28:	009b      	lsls	r3, r3, #2
 8013b2a:	440b      	add	r3, r1
 8013b2c:	681b      	ldr	r3, [r3, #0]
 8013b2e:	2b01      	cmp	r3, #1
 8013b30:	d907      	bls.n	8013b42 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8013b32:	2301      	movs	r3, #1
 8013b34:	617b      	str	r3, [r7, #20]
 8013b36:	e004      	b.n	8013b42 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8013b38:	4b10      	ldr	r3, [pc, #64]	; (8013b7c <xTaskIncrementTick+0x170>)
 8013b3a:	681b      	ldr	r3, [r3, #0]
 8013b3c:	3301      	adds	r3, #1
 8013b3e:	4a0f      	ldr	r2, [pc, #60]	; (8013b7c <xTaskIncrementTick+0x170>)
 8013b40:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8013b42:	4b0f      	ldr	r3, [pc, #60]	; (8013b80 <xTaskIncrementTick+0x174>)
 8013b44:	681b      	ldr	r3, [r3, #0]
 8013b46:	2b00      	cmp	r3, #0
 8013b48:	d001      	beq.n	8013b4e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8013b4a:	2301      	movs	r3, #1
 8013b4c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8013b4e:	697b      	ldr	r3, [r7, #20]
}
 8013b50:	4618      	mov	r0, r3
 8013b52:	3718      	adds	r7, #24
 8013b54:	46bd      	mov	sp, r7
 8013b56:	bd80      	pop	{r7, pc}
 8013b58:	200015e0 	.word	0x200015e0
 8013b5c:	200015bc 	.word	0x200015bc
 8013b60:	20001570 	.word	0x20001570
 8013b64:	20001574 	.word	0x20001574
 8013b68:	200015d0 	.word	0x200015d0
 8013b6c:	200015d8 	.word	0x200015d8
 8013b70:	200015c0 	.word	0x200015c0
 8013b74:	200014bc 	.word	0x200014bc
 8013b78:	200014b8 	.word	0x200014b8
 8013b7c:	200015c8 	.word	0x200015c8
 8013b80:	200015cc 	.word	0x200015cc

08013b84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8013b84:	b480      	push	{r7}
 8013b86:	b087      	sub	sp, #28
 8013b88:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8013b8a:	4b26      	ldr	r3, [pc, #152]	; (8013c24 <vTaskSwitchContext+0xa0>)
 8013b8c:	681b      	ldr	r3, [r3, #0]
 8013b8e:	2b00      	cmp	r3, #0
 8013b90:	d003      	beq.n	8013b9a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8013b92:	4b25      	ldr	r3, [pc, #148]	; (8013c28 <vTaskSwitchContext+0xa4>)
 8013b94:	2201      	movs	r2, #1
 8013b96:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8013b98:	e03e      	b.n	8013c18 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8013b9a:	4b23      	ldr	r3, [pc, #140]	; (8013c28 <vTaskSwitchContext+0xa4>)
 8013b9c:	2200      	movs	r2, #0
 8013b9e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8013ba0:	4b22      	ldr	r3, [pc, #136]	; (8013c2c <vTaskSwitchContext+0xa8>)
 8013ba2:	681b      	ldr	r3, [r3, #0]
 8013ba4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8013ba6:	68fb      	ldr	r3, [r7, #12]
 8013ba8:	fab3 f383 	clz	r3, r3
 8013bac:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8013bae:	7afb      	ldrb	r3, [r7, #11]
 8013bb0:	f1c3 031f 	rsb	r3, r3, #31
 8013bb4:	617b      	str	r3, [r7, #20]
 8013bb6:	491e      	ldr	r1, [pc, #120]	; (8013c30 <vTaskSwitchContext+0xac>)
 8013bb8:	697a      	ldr	r2, [r7, #20]
 8013bba:	4613      	mov	r3, r2
 8013bbc:	009b      	lsls	r3, r3, #2
 8013bbe:	4413      	add	r3, r2
 8013bc0:	009b      	lsls	r3, r3, #2
 8013bc2:	440b      	add	r3, r1
 8013bc4:	681b      	ldr	r3, [r3, #0]
 8013bc6:	2b00      	cmp	r3, #0
 8013bc8:	d109      	bne.n	8013bde <vTaskSwitchContext+0x5a>
	__asm volatile
 8013bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bce:	f383 8811 	msr	BASEPRI, r3
 8013bd2:	f3bf 8f6f 	isb	sy
 8013bd6:	f3bf 8f4f 	dsb	sy
 8013bda:	607b      	str	r3, [r7, #4]
 8013bdc:	e7fe      	b.n	8013bdc <vTaskSwitchContext+0x58>
 8013bde:	697a      	ldr	r2, [r7, #20]
 8013be0:	4613      	mov	r3, r2
 8013be2:	009b      	lsls	r3, r3, #2
 8013be4:	4413      	add	r3, r2
 8013be6:	009b      	lsls	r3, r3, #2
 8013be8:	4a11      	ldr	r2, [pc, #68]	; (8013c30 <vTaskSwitchContext+0xac>)
 8013bea:	4413      	add	r3, r2
 8013bec:	613b      	str	r3, [r7, #16]
 8013bee:	693b      	ldr	r3, [r7, #16]
 8013bf0:	685b      	ldr	r3, [r3, #4]
 8013bf2:	685a      	ldr	r2, [r3, #4]
 8013bf4:	693b      	ldr	r3, [r7, #16]
 8013bf6:	605a      	str	r2, [r3, #4]
 8013bf8:	693b      	ldr	r3, [r7, #16]
 8013bfa:	685a      	ldr	r2, [r3, #4]
 8013bfc:	693b      	ldr	r3, [r7, #16]
 8013bfe:	3308      	adds	r3, #8
 8013c00:	429a      	cmp	r2, r3
 8013c02:	d104      	bne.n	8013c0e <vTaskSwitchContext+0x8a>
 8013c04:	693b      	ldr	r3, [r7, #16]
 8013c06:	685b      	ldr	r3, [r3, #4]
 8013c08:	685a      	ldr	r2, [r3, #4]
 8013c0a:	693b      	ldr	r3, [r7, #16]
 8013c0c:	605a      	str	r2, [r3, #4]
 8013c0e:	693b      	ldr	r3, [r7, #16]
 8013c10:	685b      	ldr	r3, [r3, #4]
 8013c12:	68db      	ldr	r3, [r3, #12]
 8013c14:	4a07      	ldr	r2, [pc, #28]	; (8013c34 <vTaskSwitchContext+0xb0>)
 8013c16:	6013      	str	r3, [r2, #0]
}
 8013c18:	bf00      	nop
 8013c1a:	371c      	adds	r7, #28
 8013c1c:	46bd      	mov	sp, r7
 8013c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c22:	4770      	bx	lr
 8013c24:	200015e0 	.word	0x200015e0
 8013c28:	200015cc 	.word	0x200015cc
 8013c2c:	200015c0 	.word	0x200015c0
 8013c30:	200014bc 	.word	0x200014bc
 8013c34:	200014b8 	.word	0x200014b8

08013c38 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8013c38:	b580      	push	{r7, lr}
 8013c3a:	b084      	sub	sp, #16
 8013c3c:	af00      	add	r7, sp, #0
 8013c3e:	6078      	str	r0, [r7, #4]
 8013c40:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	d109      	bne.n	8013c5c <vTaskPlaceOnEventList+0x24>
 8013c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c4c:	f383 8811 	msr	BASEPRI, r3
 8013c50:	f3bf 8f6f 	isb	sy
 8013c54:	f3bf 8f4f 	dsb	sy
 8013c58:	60fb      	str	r3, [r7, #12]
 8013c5a:	e7fe      	b.n	8013c5a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013c5c:	4b07      	ldr	r3, [pc, #28]	; (8013c7c <vTaskPlaceOnEventList+0x44>)
 8013c5e:	681b      	ldr	r3, [r3, #0]
 8013c60:	3318      	adds	r3, #24
 8013c62:	4619      	mov	r1, r3
 8013c64:	6878      	ldr	r0, [r7, #4]
 8013c66:	f7fe fc85 	bl	8012574 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013c6a:	2101      	movs	r1, #1
 8013c6c:	6838      	ldr	r0, [r7, #0]
 8013c6e:	f000 fd5d 	bl	801472c <prvAddCurrentTaskToDelayedList>
}
 8013c72:	bf00      	nop
 8013c74:	3710      	adds	r7, #16
 8013c76:	46bd      	mov	sp, r7
 8013c78:	bd80      	pop	{r7, pc}
 8013c7a:	bf00      	nop
 8013c7c:	200014b8 	.word	0x200014b8

08013c80 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8013c80:	b580      	push	{r7, lr}
 8013c82:	b086      	sub	sp, #24
 8013c84:	af00      	add	r7, sp, #0
 8013c86:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	68db      	ldr	r3, [r3, #12]
 8013c8c:	68db      	ldr	r3, [r3, #12]
 8013c8e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8013c90:	693b      	ldr	r3, [r7, #16]
 8013c92:	2b00      	cmp	r3, #0
 8013c94:	d109      	bne.n	8013caa <xTaskRemoveFromEventList+0x2a>
 8013c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c9a:	f383 8811 	msr	BASEPRI, r3
 8013c9e:	f3bf 8f6f 	isb	sy
 8013ca2:	f3bf 8f4f 	dsb	sy
 8013ca6:	60fb      	str	r3, [r7, #12]
 8013ca8:	e7fe      	b.n	8013ca8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8013caa:	693b      	ldr	r3, [r7, #16]
 8013cac:	3318      	adds	r3, #24
 8013cae:	4618      	mov	r0, r3
 8013cb0:	f7fe fc99 	bl	80125e6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013cb4:	4b1d      	ldr	r3, [pc, #116]	; (8013d2c <xTaskRemoveFromEventList+0xac>)
 8013cb6:	681b      	ldr	r3, [r3, #0]
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	d11c      	bne.n	8013cf6 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8013cbc:	693b      	ldr	r3, [r7, #16]
 8013cbe:	3304      	adds	r3, #4
 8013cc0:	4618      	mov	r0, r3
 8013cc2:	f7fe fc90 	bl	80125e6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8013cc6:	693b      	ldr	r3, [r7, #16]
 8013cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013cca:	2201      	movs	r2, #1
 8013ccc:	409a      	lsls	r2, r3
 8013cce:	4b18      	ldr	r3, [pc, #96]	; (8013d30 <xTaskRemoveFromEventList+0xb0>)
 8013cd0:	681b      	ldr	r3, [r3, #0]
 8013cd2:	4313      	orrs	r3, r2
 8013cd4:	4a16      	ldr	r2, [pc, #88]	; (8013d30 <xTaskRemoveFromEventList+0xb0>)
 8013cd6:	6013      	str	r3, [r2, #0]
 8013cd8:	693b      	ldr	r3, [r7, #16]
 8013cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013cdc:	4613      	mov	r3, r2
 8013cde:	009b      	lsls	r3, r3, #2
 8013ce0:	4413      	add	r3, r2
 8013ce2:	009b      	lsls	r3, r3, #2
 8013ce4:	4a13      	ldr	r2, [pc, #76]	; (8013d34 <xTaskRemoveFromEventList+0xb4>)
 8013ce6:	441a      	add	r2, r3
 8013ce8:	693b      	ldr	r3, [r7, #16]
 8013cea:	3304      	adds	r3, #4
 8013cec:	4619      	mov	r1, r3
 8013cee:	4610      	mov	r0, r2
 8013cf0:	f7fe fc1c 	bl	801252c <vListInsertEnd>
 8013cf4:	e005      	b.n	8013d02 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8013cf6:	693b      	ldr	r3, [r7, #16]
 8013cf8:	3318      	adds	r3, #24
 8013cfa:	4619      	mov	r1, r3
 8013cfc:	480e      	ldr	r0, [pc, #56]	; (8013d38 <xTaskRemoveFromEventList+0xb8>)
 8013cfe:	f7fe fc15 	bl	801252c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013d02:	693b      	ldr	r3, [r7, #16]
 8013d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d06:	4b0d      	ldr	r3, [pc, #52]	; (8013d3c <xTaskRemoveFromEventList+0xbc>)
 8013d08:	681b      	ldr	r3, [r3, #0]
 8013d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d0c:	429a      	cmp	r2, r3
 8013d0e:	d905      	bls.n	8013d1c <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8013d10:	2301      	movs	r3, #1
 8013d12:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8013d14:	4b0a      	ldr	r3, [pc, #40]	; (8013d40 <xTaskRemoveFromEventList+0xc0>)
 8013d16:	2201      	movs	r2, #1
 8013d18:	601a      	str	r2, [r3, #0]
 8013d1a:	e001      	b.n	8013d20 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8013d1c:	2300      	movs	r3, #0
 8013d1e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8013d20:	697b      	ldr	r3, [r7, #20]
}
 8013d22:	4618      	mov	r0, r3
 8013d24:	3718      	adds	r7, #24
 8013d26:	46bd      	mov	sp, r7
 8013d28:	bd80      	pop	{r7, pc}
 8013d2a:	bf00      	nop
 8013d2c:	200015e0 	.word	0x200015e0
 8013d30:	200015c0 	.word	0x200015c0
 8013d34:	200014bc 	.word	0x200014bc
 8013d38:	20001578 	.word	0x20001578
 8013d3c:	200014b8 	.word	0x200014b8
 8013d40:	200015cc 	.word	0x200015cc

08013d44 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8013d44:	b480      	push	{r7}
 8013d46:	b083      	sub	sp, #12
 8013d48:	af00      	add	r7, sp, #0
 8013d4a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8013d4c:	4b06      	ldr	r3, [pc, #24]	; (8013d68 <vTaskInternalSetTimeOutState+0x24>)
 8013d4e:	681a      	ldr	r2, [r3, #0]
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8013d54:	4b05      	ldr	r3, [pc, #20]	; (8013d6c <vTaskInternalSetTimeOutState+0x28>)
 8013d56:	681a      	ldr	r2, [r3, #0]
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	605a      	str	r2, [r3, #4]
}
 8013d5c:	bf00      	nop
 8013d5e:	370c      	adds	r7, #12
 8013d60:	46bd      	mov	sp, r7
 8013d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d66:	4770      	bx	lr
 8013d68:	200015d0 	.word	0x200015d0
 8013d6c:	200015bc 	.word	0x200015bc

08013d70 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8013d70:	b580      	push	{r7, lr}
 8013d72:	b088      	sub	sp, #32
 8013d74:	af00      	add	r7, sp, #0
 8013d76:	6078      	str	r0, [r7, #4]
 8013d78:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	d109      	bne.n	8013d94 <xTaskCheckForTimeOut+0x24>
 8013d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d84:	f383 8811 	msr	BASEPRI, r3
 8013d88:	f3bf 8f6f 	isb	sy
 8013d8c:	f3bf 8f4f 	dsb	sy
 8013d90:	613b      	str	r3, [r7, #16]
 8013d92:	e7fe      	b.n	8013d92 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8013d94:	683b      	ldr	r3, [r7, #0]
 8013d96:	2b00      	cmp	r3, #0
 8013d98:	d109      	bne.n	8013dae <xTaskCheckForTimeOut+0x3e>
 8013d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d9e:	f383 8811 	msr	BASEPRI, r3
 8013da2:	f3bf 8f6f 	isb	sy
 8013da6:	f3bf 8f4f 	dsb	sy
 8013daa:	60fb      	str	r3, [r7, #12]
 8013dac:	e7fe      	b.n	8013dac <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8013dae:	f000 fe4d 	bl	8014a4c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8013db2:	4b1d      	ldr	r3, [pc, #116]	; (8013e28 <xTaskCheckForTimeOut+0xb8>)
 8013db4:	681b      	ldr	r3, [r3, #0]
 8013db6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	685b      	ldr	r3, [r3, #4]
 8013dbc:	69ba      	ldr	r2, [r7, #24]
 8013dbe:	1ad3      	subs	r3, r2, r3
 8013dc0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8013dc2:	683b      	ldr	r3, [r7, #0]
 8013dc4:	681b      	ldr	r3, [r3, #0]
 8013dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013dca:	d102      	bne.n	8013dd2 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8013dcc:	2300      	movs	r3, #0
 8013dce:	61fb      	str	r3, [r7, #28]
 8013dd0:	e023      	b.n	8013e1a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	681a      	ldr	r2, [r3, #0]
 8013dd6:	4b15      	ldr	r3, [pc, #84]	; (8013e2c <xTaskCheckForTimeOut+0xbc>)
 8013dd8:	681b      	ldr	r3, [r3, #0]
 8013dda:	429a      	cmp	r2, r3
 8013ddc:	d007      	beq.n	8013dee <xTaskCheckForTimeOut+0x7e>
 8013dde:	687b      	ldr	r3, [r7, #4]
 8013de0:	685b      	ldr	r3, [r3, #4]
 8013de2:	69ba      	ldr	r2, [r7, #24]
 8013de4:	429a      	cmp	r2, r3
 8013de6:	d302      	bcc.n	8013dee <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8013de8:	2301      	movs	r3, #1
 8013dea:	61fb      	str	r3, [r7, #28]
 8013dec:	e015      	b.n	8013e1a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8013dee:	683b      	ldr	r3, [r7, #0]
 8013df0:	681b      	ldr	r3, [r3, #0]
 8013df2:	697a      	ldr	r2, [r7, #20]
 8013df4:	429a      	cmp	r2, r3
 8013df6:	d20b      	bcs.n	8013e10 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8013df8:	683b      	ldr	r3, [r7, #0]
 8013dfa:	681a      	ldr	r2, [r3, #0]
 8013dfc:	697b      	ldr	r3, [r7, #20]
 8013dfe:	1ad2      	subs	r2, r2, r3
 8013e00:	683b      	ldr	r3, [r7, #0]
 8013e02:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8013e04:	6878      	ldr	r0, [r7, #4]
 8013e06:	f7ff ff9d 	bl	8013d44 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8013e0a:	2300      	movs	r3, #0
 8013e0c:	61fb      	str	r3, [r7, #28]
 8013e0e:	e004      	b.n	8013e1a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8013e10:	683b      	ldr	r3, [r7, #0]
 8013e12:	2200      	movs	r2, #0
 8013e14:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8013e16:	2301      	movs	r3, #1
 8013e18:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8013e1a:	f000 fe45 	bl	8014aa8 <vPortExitCritical>

	return xReturn;
 8013e1e:	69fb      	ldr	r3, [r7, #28]
}
 8013e20:	4618      	mov	r0, r3
 8013e22:	3720      	adds	r7, #32
 8013e24:	46bd      	mov	sp, r7
 8013e26:	bd80      	pop	{r7, pc}
 8013e28:	200015bc 	.word	0x200015bc
 8013e2c:	200015d0 	.word	0x200015d0

08013e30 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8013e30:	b480      	push	{r7}
 8013e32:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8013e34:	4b03      	ldr	r3, [pc, #12]	; (8013e44 <vTaskMissedYield+0x14>)
 8013e36:	2201      	movs	r2, #1
 8013e38:	601a      	str	r2, [r3, #0]
}
 8013e3a:	bf00      	nop
 8013e3c:	46bd      	mov	sp, r7
 8013e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e42:	4770      	bx	lr
 8013e44:	200015cc 	.word	0x200015cc

08013e48 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8013e48:	b580      	push	{r7, lr}
 8013e4a:	b082      	sub	sp, #8
 8013e4c:	af00      	add	r7, sp, #0
 8013e4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8013e50:	f000 f852 	bl	8013ef8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8013e54:	4b06      	ldr	r3, [pc, #24]	; (8013e70 <prvIdleTask+0x28>)
 8013e56:	681b      	ldr	r3, [r3, #0]
 8013e58:	2b01      	cmp	r3, #1
 8013e5a:	d9f9      	bls.n	8013e50 <prvIdleTask+0x8>
			{
				taskYIELD();
 8013e5c:	4b05      	ldr	r3, [pc, #20]	; (8013e74 <prvIdleTask+0x2c>)
 8013e5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013e62:	601a      	str	r2, [r3, #0]
 8013e64:	f3bf 8f4f 	dsb	sy
 8013e68:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8013e6c:	e7f0      	b.n	8013e50 <prvIdleTask+0x8>
 8013e6e:	bf00      	nop
 8013e70:	200014bc 	.word	0x200014bc
 8013e74:	e000ed04 	.word	0xe000ed04

08013e78 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8013e78:	b580      	push	{r7, lr}
 8013e7a:	b082      	sub	sp, #8
 8013e7c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013e7e:	2300      	movs	r3, #0
 8013e80:	607b      	str	r3, [r7, #4]
 8013e82:	e00c      	b.n	8013e9e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8013e84:	687a      	ldr	r2, [r7, #4]
 8013e86:	4613      	mov	r3, r2
 8013e88:	009b      	lsls	r3, r3, #2
 8013e8a:	4413      	add	r3, r2
 8013e8c:	009b      	lsls	r3, r3, #2
 8013e8e:	4a12      	ldr	r2, [pc, #72]	; (8013ed8 <prvInitialiseTaskLists+0x60>)
 8013e90:	4413      	add	r3, r2
 8013e92:	4618      	mov	r0, r3
 8013e94:	f7fe fb1d 	bl	80124d2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	3301      	adds	r3, #1
 8013e9c:	607b      	str	r3, [r7, #4]
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	2b06      	cmp	r3, #6
 8013ea2:	d9ef      	bls.n	8013e84 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8013ea4:	480d      	ldr	r0, [pc, #52]	; (8013edc <prvInitialiseTaskLists+0x64>)
 8013ea6:	f7fe fb14 	bl	80124d2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8013eaa:	480d      	ldr	r0, [pc, #52]	; (8013ee0 <prvInitialiseTaskLists+0x68>)
 8013eac:	f7fe fb11 	bl	80124d2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8013eb0:	480c      	ldr	r0, [pc, #48]	; (8013ee4 <prvInitialiseTaskLists+0x6c>)
 8013eb2:	f7fe fb0e 	bl	80124d2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8013eb6:	480c      	ldr	r0, [pc, #48]	; (8013ee8 <prvInitialiseTaskLists+0x70>)
 8013eb8:	f7fe fb0b 	bl	80124d2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8013ebc:	480b      	ldr	r0, [pc, #44]	; (8013eec <prvInitialiseTaskLists+0x74>)
 8013ebe:	f7fe fb08 	bl	80124d2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8013ec2:	4b0b      	ldr	r3, [pc, #44]	; (8013ef0 <prvInitialiseTaskLists+0x78>)
 8013ec4:	4a05      	ldr	r2, [pc, #20]	; (8013edc <prvInitialiseTaskLists+0x64>)
 8013ec6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8013ec8:	4b0a      	ldr	r3, [pc, #40]	; (8013ef4 <prvInitialiseTaskLists+0x7c>)
 8013eca:	4a05      	ldr	r2, [pc, #20]	; (8013ee0 <prvInitialiseTaskLists+0x68>)
 8013ecc:	601a      	str	r2, [r3, #0]
}
 8013ece:	bf00      	nop
 8013ed0:	3708      	adds	r7, #8
 8013ed2:	46bd      	mov	sp, r7
 8013ed4:	bd80      	pop	{r7, pc}
 8013ed6:	bf00      	nop
 8013ed8:	200014bc 	.word	0x200014bc
 8013edc:	20001548 	.word	0x20001548
 8013ee0:	2000155c 	.word	0x2000155c
 8013ee4:	20001578 	.word	0x20001578
 8013ee8:	2000158c 	.word	0x2000158c
 8013eec:	200015a4 	.word	0x200015a4
 8013ef0:	20001570 	.word	0x20001570
 8013ef4:	20001574 	.word	0x20001574

08013ef8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8013ef8:	b580      	push	{r7, lr}
 8013efa:	b082      	sub	sp, #8
 8013efc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013efe:	e019      	b.n	8013f34 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8013f00:	f000 fda4 	bl	8014a4c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8013f04:	4b0f      	ldr	r3, [pc, #60]	; (8013f44 <prvCheckTasksWaitingTermination+0x4c>)
 8013f06:	68db      	ldr	r3, [r3, #12]
 8013f08:	68db      	ldr	r3, [r3, #12]
 8013f0a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	3304      	adds	r3, #4
 8013f10:	4618      	mov	r0, r3
 8013f12:	f7fe fb68 	bl	80125e6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8013f16:	4b0c      	ldr	r3, [pc, #48]	; (8013f48 <prvCheckTasksWaitingTermination+0x50>)
 8013f18:	681b      	ldr	r3, [r3, #0]
 8013f1a:	3b01      	subs	r3, #1
 8013f1c:	4a0a      	ldr	r2, [pc, #40]	; (8013f48 <prvCheckTasksWaitingTermination+0x50>)
 8013f1e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8013f20:	4b0a      	ldr	r3, [pc, #40]	; (8013f4c <prvCheckTasksWaitingTermination+0x54>)
 8013f22:	681b      	ldr	r3, [r3, #0]
 8013f24:	3b01      	subs	r3, #1
 8013f26:	4a09      	ldr	r2, [pc, #36]	; (8013f4c <prvCheckTasksWaitingTermination+0x54>)
 8013f28:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8013f2a:	f000 fdbd 	bl	8014aa8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8013f2e:	6878      	ldr	r0, [r7, #4]
 8013f30:	f000 f80e 	bl	8013f50 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013f34:	4b05      	ldr	r3, [pc, #20]	; (8013f4c <prvCheckTasksWaitingTermination+0x54>)
 8013f36:	681b      	ldr	r3, [r3, #0]
 8013f38:	2b00      	cmp	r3, #0
 8013f3a:	d1e1      	bne.n	8013f00 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8013f3c:	bf00      	nop
 8013f3e:	3708      	adds	r7, #8
 8013f40:	46bd      	mov	sp, r7
 8013f42:	bd80      	pop	{r7, pc}
 8013f44:	2000158c 	.word	0x2000158c
 8013f48:	200015b8 	.word	0x200015b8
 8013f4c:	200015a0 	.word	0x200015a0

08013f50 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8013f50:	b580      	push	{r7, lr}
 8013f52:	b084      	sub	sp, #16
 8013f54:	af00      	add	r7, sp, #0
 8013f56:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	d108      	bne.n	8013f74 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013f66:	4618      	mov	r0, r3
 8013f68:	f000 ff4c 	bl	8014e04 <vPortFree>
				vPortFree( pxTCB );
 8013f6c:	6878      	ldr	r0, [r7, #4]
 8013f6e:	f000 ff49 	bl	8014e04 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8013f72:	e017      	b.n	8013fa4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013f7a:	2b01      	cmp	r3, #1
 8013f7c:	d103      	bne.n	8013f86 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8013f7e:	6878      	ldr	r0, [r7, #4]
 8013f80:	f000 ff40 	bl	8014e04 <vPortFree>
	}
 8013f84:	e00e      	b.n	8013fa4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013f8c:	2b02      	cmp	r3, #2
 8013f8e:	d009      	beq.n	8013fa4 <prvDeleteTCB+0x54>
 8013f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f94:	f383 8811 	msr	BASEPRI, r3
 8013f98:	f3bf 8f6f 	isb	sy
 8013f9c:	f3bf 8f4f 	dsb	sy
 8013fa0:	60fb      	str	r3, [r7, #12]
 8013fa2:	e7fe      	b.n	8013fa2 <prvDeleteTCB+0x52>
	}
 8013fa4:	bf00      	nop
 8013fa6:	3710      	adds	r7, #16
 8013fa8:	46bd      	mov	sp, r7
 8013faa:	bd80      	pop	{r7, pc}

08013fac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8013fac:	b480      	push	{r7}
 8013fae:	b083      	sub	sp, #12
 8013fb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013fb2:	4b0f      	ldr	r3, [pc, #60]	; (8013ff0 <prvResetNextTaskUnblockTime+0x44>)
 8013fb4:	681b      	ldr	r3, [r3, #0]
 8013fb6:	681b      	ldr	r3, [r3, #0]
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	d101      	bne.n	8013fc0 <prvResetNextTaskUnblockTime+0x14>
 8013fbc:	2301      	movs	r3, #1
 8013fbe:	e000      	b.n	8013fc2 <prvResetNextTaskUnblockTime+0x16>
 8013fc0:	2300      	movs	r3, #0
 8013fc2:	2b00      	cmp	r3, #0
 8013fc4:	d004      	beq.n	8013fd0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8013fc6:	4b0b      	ldr	r3, [pc, #44]	; (8013ff4 <prvResetNextTaskUnblockTime+0x48>)
 8013fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8013fcc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8013fce:	e008      	b.n	8013fe2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8013fd0:	4b07      	ldr	r3, [pc, #28]	; (8013ff0 <prvResetNextTaskUnblockTime+0x44>)
 8013fd2:	681b      	ldr	r3, [r3, #0]
 8013fd4:	68db      	ldr	r3, [r3, #12]
 8013fd6:	68db      	ldr	r3, [r3, #12]
 8013fd8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	685b      	ldr	r3, [r3, #4]
 8013fde:	4a05      	ldr	r2, [pc, #20]	; (8013ff4 <prvResetNextTaskUnblockTime+0x48>)
 8013fe0:	6013      	str	r3, [r2, #0]
}
 8013fe2:	bf00      	nop
 8013fe4:	370c      	adds	r7, #12
 8013fe6:	46bd      	mov	sp, r7
 8013fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fec:	4770      	bx	lr
 8013fee:	bf00      	nop
 8013ff0:	20001570 	.word	0x20001570
 8013ff4:	200015d8 	.word	0x200015d8

08013ff8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8013ff8:	b480      	push	{r7}
 8013ffa:	b083      	sub	sp, #12
 8013ffc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8013ffe:	4b0b      	ldr	r3, [pc, #44]	; (801402c <xTaskGetSchedulerState+0x34>)
 8014000:	681b      	ldr	r3, [r3, #0]
 8014002:	2b00      	cmp	r3, #0
 8014004:	d102      	bne.n	801400c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8014006:	2301      	movs	r3, #1
 8014008:	607b      	str	r3, [r7, #4]
 801400a:	e008      	b.n	801401e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801400c:	4b08      	ldr	r3, [pc, #32]	; (8014030 <xTaskGetSchedulerState+0x38>)
 801400e:	681b      	ldr	r3, [r3, #0]
 8014010:	2b00      	cmp	r3, #0
 8014012:	d102      	bne.n	801401a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8014014:	2302      	movs	r3, #2
 8014016:	607b      	str	r3, [r7, #4]
 8014018:	e001      	b.n	801401e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801401a:	2300      	movs	r3, #0
 801401c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801401e:	687b      	ldr	r3, [r7, #4]
	}
 8014020:	4618      	mov	r0, r3
 8014022:	370c      	adds	r7, #12
 8014024:	46bd      	mov	sp, r7
 8014026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801402a:	4770      	bx	lr
 801402c:	200015c4 	.word	0x200015c4
 8014030:	200015e0 	.word	0x200015e0

08014034 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8014034:	b580      	push	{r7, lr}
 8014036:	b084      	sub	sp, #16
 8014038:	af00      	add	r7, sp, #0
 801403a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8014040:	2300      	movs	r3, #0
 8014042:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	2b00      	cmp	r3, #0
 8014048:	d06e      	beq.n	8014128 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801404a:	68bb      	ldr	r3, [r7, #8]
 801404c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801404e:	4b39      	ldr	r3, [pc, #228]	; (8014134 <xTaskPriorityInherit+0x100>)
 8014050:	681b      	ldr	r3, [r3, #0]
 8014052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014054:	429a      	cmp	r2, r3
 8014056:	d25e      	bcs.n	8014116 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014058:	68bb      	ldr	r3, [r7, #8]
 801405a:	699b      	ldr	r3, [r3, #24]
 801405c:	2b00      	cmp	r3, #0
 801405e:	db06      	blt.n	801406e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014060:	4b34      	ldr	r3, [pc, #208]	; (8014134 <xTaskPriorityInherit+0x100>)
 8014062:	681b      	ldr	r3, [r3, #0]
 8014064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014066:	f1c3 0207 	rsb	r2, r3, #7
 801406a:	68bb      	ldr	r3, [r7, #8]
 801406c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801406e:	68bb      	ldr	r3, [r7, #8]
 8014070:	6959      	ldr	r1, [r3, #20]
 8014072:	68bb      	ldr	r3, [r7, #8]
 8014074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014076:	4613      	mov	r3, r2
 8014078:	009b      	lsls	r3, r3, #2
 801407a:	4413      	add	r3, r2
 801407c:	009b      	lsls	r3, r3, #2
 801407e:	4a2e      	ldr	r2, [pc, #184]	; (8014138 <xTaskPriorityInherit+0x104>)
 8014080:	4413      	add	r3, r2
 8014082:	4299      	cmp	r1, r3
 8014084:	d101      	bne.n	801408a <xTaskPriorityInherit+0x56>
 8014086:	2301      	movs	r3, #1
 8014088:	e000      	b.n	801408c <xTaskPriorityInherit+0x58>
 801408a:	2300      	movs	r3, #0
 801408c:	2b00      	cmp	r3, #0
 801408e:	d03a      	beq.n	8014106 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014090:	68bb      	ldr	r3, [r7, #8]
 8014092:	3304      	adds	r3, #4
 8014094:	4618      	mov	r0, r3
 8014096:	f7fe faa6 	bl	80125e6 <uxListRemove>
 801409a:	4603      	mov	r3, r0
 801409c:	2b00      	cmp	r3, #0
 801409e:	d115      	bne.n	80140cc <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80140a0:	68bb      	ldr	r3, [r7, #8]
 80140a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80140a4:	4924      	ldr	r1, [pc, #144]	; (8014138 <xTaskPriorityInherit+0x104>)
 80140a6:	4613      	mov	r3, r2
 80140a8:	009b      	lsls	r3, r3, #2
 80140aa:	4413      	add	r3, r2
 80140ac:	009b      	lsls	r3, r3, #2
 80140ae:	440b      	add	r3, r1
 80140b0:	681b      	ldr	r3, [r3, #0]
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	d10a      	bne.n	80140cc <xTaskPriorityInherit+0x98>
 80140b6:	68bb      	ldr	r3, [r7, #8]
 80140b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140ba:	2201      	movs	r2, #1
 80140bc:	fa02 f303 	lsl.w	r3, r2, r3
 80140c0:	43da      	mvns	r2, r3
 80140c2:	4b1e      	ldr	r3, [pc, #120]	; (801413c <xTaskPriorityInherit+0x108>)
 80140c4:	681b      	ldr	r3, [r3, #0]
 80140c6:	4013      	ands	r3, r2
 80140c8:	4a1c      	ldr	r2, [pc, #112]	; (801413c <xTaskPriorityInherit+0x108>)
 80140ca:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80140cc:	4b19      	ldr	r3, [pc, #100]	; (8014134 <xTaskPriorityInherit+0x100>)
 80140ce:	681b      	ldr	r3, [r3, #0]
 80140d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80140d2:	68bb      	ldr	r3, [r7, #8]
 80140d4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80140d6:	68bb      	ldr	r3, [r7, #8]
 80140d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140da:	2201      	movs	r2, #1
 80140dc:	409a      	lsls	r2, r3
 80140de:	4b17      	ldr	r3, [pc, #92]	; (801413c <xTaskPriorityInherit+0x108>)
 80140e0:	681b      	ldr	r3, [r3, #0]
 80140e2:	4313      	orrs	r3, r2
 80140e4:	4a15      	ldr	r2, [pc, #84]	; (801413c <xTaskPriorityInherit+0x108>)
 80140e6:	6013      	str	r3, [r2, #0]
 80140e8:	68bb      	ldr	r3, [r7, #8]
 80140ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80140ec:	4613      	mov	r3, r2
 80140ee:	009b      	lsls	r3, r3, #2
 80140f0:	4413      	add	r3, r2
 80140f2:	009b      	lsls	r3, r3, #2
 80140f4:	4a10      	ldr	r2, [pc, #64]	; (8014138 <xTaskPriorityInherit+0x104>)
 80140f6:	441a      	add	r2, r3
 80140f8:	68bb      	ldr	r3, [r7, #8]
 80140fa:	3304      	adds	r3, #4
 80140fc:	4619      	mov	r1, r3
 80140fe:	4610      	mov	r0, r2
 8014100:	f7fe fa14 	bl	801252c <vListInsertEnd>
 8014104:	e004      	b.n	8014110 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014106:	4b0b      	ldr	r3, [pc, #44]	; (8014134 <xTaskPriorityInherit+0x100>)
 8014108:	681b      	ldr	r3, [r3, #0]
 801410a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801410c:	68bb      	ldr	r3, [r7, #8]
 801410e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8014110:	2301      	movs	r3, #1
 8014112:	60fb      	str	r3, [r7, #12]
 8014114:	e008      	b.n	8014128 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8014116:	68bb      	ldr	r3, [r7, #8]
 8014118:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801411a:	4b06      	ldr	r3, [pc, #24]	; (8014134 <xTaskPriorityInherit+0x100>)
 801411c:	681b      	ldr	r3, [r3, #0]
 801411e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014120:	429a      	cmp	r2, r3
 8014122:	d201      	bcs.n	8014128 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8014124:	2301      	movs	r3, #1
 8014126:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014128:	68fb      	ldr	r3, [r7, #12]
	}
 801412a:	4618      	mov	r0, r3
 801412c:	3710      	adds	r7, #16
 801412e:	46bd      	mov	sp, r7
 8014130:	bd80      	pop	{r7, pc}
 8014132:	bf00      	nop
 8014134:	200014b8 	.word	0x200014b8
 8014138:	200014bc 	.word	0x200014bc
 801413c:	200015c0 	.word	0x200015c0

08014140 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8014140:	b580      	push	{r7, lr}
 8014142:	b086      	sub	sp, #24
 8014144:	af00      	add	r7, sp, #0
 8014146:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801414c:	2300      	movs	r3, #0
 801414e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	2b00      	cmp	r3, #0
 8014154:	d06c      	beq.n	8014230 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8014156:	4b39      	ldr	r3, [pc, #228]	; (801423c <xTaskPriorityDisinherit+0xfc>)
 8014158:	681b      	ldr	r3, [r3, #0]
 801415a:	693a      	ldr	r2, [r7, #16]
 801415c:	429a      	cmp	r2, r3
 801415e:	d009      	beq.n	8014174 <xTaskPriorityDisinherit+0x34>
 8014160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014164:	f383 8811 	msr	BASEPRI, r3
 8014168:	f3bf 8f6f 	isb	sy
 801416c:	f3bf 8f4f 	dsb	sy
 8014170:	60fb      	str	r3, [r7, #12]
 8014172:	e7fe      	b.n	8014172 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8014174:	693b      	ldr	r3, [r7, #16]
 8014176:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014178:	2b00      	cmp	r3, #0
 801417a:	d109      	bne.n	8014190 <xTaskPriorityDisinherit+0x50>
 801417c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014180:	f383 8811 	msr	BASEPRI, r3
 8014184:	f3bf 8f6f 	isb	sy
 8014188:	f3bf 8f4f 	dsb	sy
 801418c:	60bb      	str	r3, [r7, #8]
 801418e:	e7fe      	b.n	801418e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8014190:	693b      	ldr	r3, [r7, #16]
 8014192:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014194:	1e5a      	subs	r2, r3, #1
 8014196:	693b      	ldr	r3, [r7, #16]
 8014198:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801419a:	693b      	ldr	r3, [r7, #16]
 801419c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801419e:	693b      	ldr	r3, [r7, #16]
 80141a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80141a2:	429a      	cmp	r2, r3
 80141a4:	d044      	beq.n	8014230 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80141a6:	693b      	ldr	r3, [r7, #16]
 80141a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80141aa:	2b00      	cmp	r3, #0
 80141ac:	d140      	bne.n	8014230 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80141ae:	693b      	ldr	r3, [r7, #16]
 80141b0:	3304      	adds	r3, #4
 80141b2:	4618      	mov	r0, r3
 80141b4:	f7fe fa17 	bl	80125e6 <uxListRemove>
 80141b8:	4603      	mov	r3, r0
 80141ba:	2b00      	cmp	r3, #0
 80141bc:	d115      	bne.n	80141ea <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80141be:	693b      	ldr	r3, [r7, #16]
 80141c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80141c2:	491f      	ldr	r1, [pc, #124]	; (8014240 <xTaskPriorityDisinherit+0x100>)
 80141c4:	4613      	mov	r3, r2
 80141c6:	009b      	lsls	r3, r3, #2
 80141c8:	4413      	add	r3, r2
 80141ca:	009b      	lsls	r3, r3, #2
 80141cc:	440b      	add	r3, r1
 80141ce:	681b      	ldr	r3, [r3, #0]
 80141d0:	2b00      	cmp	r3, #0
 80141d2:	d10a      	bne.n	80141ea <xTaskPriorityDisinherit+0xaa>
 80141d4:	693b      	ldr	r3, [r7, #16]
 80141d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80141d8:	2201      	movs	r2, #1
 80141da:	fa02 f303 	lsl.w	r3, r2, r3
 80141de:	43da      	mvns	r2, r3
 80141e0:	4b18      	ldr	r3, [pc, #96]	; (8014244 <xTaskPriorityDisinherit+0x104>)
 80141e2:	681b      	ldr	r3, [r3, #0]
 80141e4:	4013      	ands	r3, r2
 80141e6:	4a17      	ldr	r2, [pc, #92]	; (8014244 <xTaskPriorityDisinherit+0x104>)
 80141e8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80141ea:	693b      	ldr	r3, [r7, #16]
 80141ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80141ee:	693b      	ldr	r3, [r7, #16]
 80141f0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80141f2:	693b      	ldr	r3, [r7, #16]
 80141f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80141f6:	f1c3 0207 	rsb	r2, r3, #7
 80141fa:	693b      	ldr	r3, [r7, #16]
 80141fc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80141fe:	693b      	ldr	r3, [r7, #16]
 8014200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014202:	2201      	movs	r2, #1
 8014204:	409a      	lsls	r2, r3
 8014206:	4b0f      	ldr	r3, [pc, #60]	; (8014244 <xTaskPriorityDisinherit+0x104>)
 8014208:	681b      	ldr	r3, [r3, #0]
 801420a:	4313      	orrs	r3, r2
 801420c:	4a0d      	ldr	r2, [pc, #52]	; (8014244 <xTaskPriorityDisinherit+0x104>)
 801420e:	6013      	str	r3, [r2, #0]
 8014210:	693b      	ldr	r3, [r7, #16]
 8014212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014214:	4613      	mov	r3, r2
 8014216:	009b      	lsls	r3, r3, #2
 8014218:	4413      	add	r3, r2
 801421a:	009b      	lsls	r3, r3, #2
 801421c:	4a08      	ldr	r2, [pc, #32]	; (8014240 <xTaskPriorityDisinherit+0x100>)
 801421e:	441a      	add	r2, r3
 8014220:	693b      	ldr	r3, [r7, #16]
 8014222:	3304      	adds	r3, #4
 8014224:	4619      	mov	r1, r3
 8014226:	4610      	mov	r0, r2
 8014228:	f7fe f980 	bl	801252c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801422c:	2301      	movs	r3, #1
 801422e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014230:	697b      	ldr	r3, [r7, #20]
	}
 8014232:	4618      	mov	r0, r3
 8014234:	3718      	adds	r7, #24
 8014236:	46bd      	mov	sp, r7
 8014238:	bd80      	pop	{r7, pc}
 801423a:	bf00      	nop
 801423c:	200014b8 	.word	0x200014b8
 8014240:	200014bc 	.word	0x200014bc
 8014244:	200015c0 	.word	0x200015c0

08014248 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8014248:	b580      	push	{r7, lr}
 801424a:	b088      	sub	sp, #32
 801424c:	af00      	add	r7, sp, #0
 801424e:	6078      	str	r0, [r7, #4]
 8014250:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8014256:	2301      	movs	r3, #1
 8014258:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	2b00      	cmp	r3, #0
 801425e:	f000 8086 	beq.w	801436e <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8014262:	69bb      	ldr	r3, [r7, #24]
 8014264:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014266:	2b00      	cmp	r3, #0
 8014268:	d109      	bne.n	801427e <vTaskPriorityDisinheritAfterTimeout+0x36>
 801426a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801426e:	f383 8811 	msr	BASEPRI, r3
 8014272:	f3bf 8f6f 	isb	sy
 8014276:	f3bf 8f4f 	dsb	sy
 801427a:	60fb      	str	r3, [r7, #12]
 801427c:	e7fe      	b.n	801427c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801427e:	69bb      	ldr	r3, [r7, #24]
 8014280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014282:	683a      	ldr	r2, [r7, #0]
 8014284:	429a      	cmp	r2, r3
 8014286:	d902      	bls.n	801428e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8014288:	683b      	ldr	r3, [r7, #0]
 801428a:	61fb      	str	r3, [r7, #28]
 801428c:	e002      	b.n	8014294 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801428e:	69bb      	ldr	r3, [r7, #24]
 8014290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014292:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8014294:	69bb      	ldr	r3, [r7, #24]
 8014296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014298:	69fa      	ldr	r2, [r7, #28]
 801429a:	429a      	cmp	r2, r3
 801429c:	d067      	beq.n	801436e <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801429e:	69bb      	ldr	r3, [r7, #24]
 80142a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80142a2:	697a      	ldr	r2, [r7, #20]
 80142a4:	429a      	cmp	r2, r3
 80142a6:	d162      	bne.n	801436e <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80142a8:	4b33      	ldr	r3, [pc, #204]	; (8014378 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 80142aa:	681b      	ldr	r3, [r3, #0]
 80142ac:	69ba      	ldr	r2, [r7, #24]
 80142ae:	429a      	cmp	r2, r3
 80142b0:	d109      	bne.n	80142c6 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 80142b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142b6:	f383 8811 	msr	BASEPRI, r3
 80142ba:	f3bf 8f6f 	isb	sy
 80142be:	f3bf 8f4f 	dsb	sy
 80142c2:	60bb      	str	r3, [r7, #8]
 80142c4:	e7fe      	b.n	80142c4 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80142c6:	69bb      	ldr	r3, [r7, #24]
 80142c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80142ca:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80142cc:	69bb      	ldr	r3, [r7, #24]
 80142ce:	69fa      	ldr	r2, [r7, #28]
 80142d0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80142d2:	69bb      	ldr	r3, [r7, #24]
 80142d4:	699b      	ldr	r3, [r3, #24]
 80142d6:	2b00      	cmp	r3, #0
 80142d8:	db04      	blt.n	80142e4 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80142da:	69fb      	ldr	r3, [r7, #28]
 80142dc:	f1c3 0207 	rsb	r2, r3, #7
 80142e0:	69bb      	ldr	r3, [r7, #24]
 80142e2:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80142e4:	69bb      	ldr	r3, [r7, #24]
 80142e6:	6959      	ldr	r1, [r3, #20]
 80142e8:	693a      	ldr	r2, [r7, #16]
 80142ea:	4613      	mov	r3, r2
 80142ec:	009b      	lsls	r3, r3, #2
 80142ee:	4413      	add	r3, r2
 80142f0:	009b      	lsls	r3, r3, #2
 80142f2:	4a22      	ldr	r2, [pc, #136]	; (801437c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80142f4:	4413      	add	r3, r2
 80142f6:	4299      	cmp	r1, r3
 80142f8:	d101      	bne.n	80142fe <vTaskPriorityDisinheritAfterTimeout+0xb6>
 80142fa:	2301      	movs	r3, #1
 80142fc:	e000      	b.n	8014300 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 80142fe:	2300      	movs	r3, #0
 8014300:	2b00      	cmp	r3, #0
 8014302:	d034      	beq.n	801436e <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014304:	69bb      	ldr	r3, [r7, #24]
 8014306:	3304      	adds	r3, #4
 8014308:	4618      	mov	r0, r3
 801430a:	f7fe f96c 	bl	80125e6 <uxListRemove>
 801430e:	4603      	mov	r3, r0
 8014310:	2b00      	cmp	r3, #0
 8014312:	d115      	bne.n	8014340 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8014314:	69bb      	ldr	r3, [r7, #24]
 8014316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014318:	4918      	ldr	r1, [pc, #96]	; (801437c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 801431a:	4613      	mov	r3, r2
 801431c:	009b      	lsls	r3, r3, #2
 801431e:	4413      	add	r3, r2
 8014320:	009b      	lsls	r3, r3, #2
 8014322:	440b      	add	r3, r1
 8014324:	681b      	ldr	r3, [r3, #0]
 8014326:	2b00      	cmp	r3, #0
 8014328:	d10a      	bne.n	8014340 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 801432a:	69bb      	ldr	r3, [r7, #24]
 801432c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801432e:	2201      	movs	r2, #1
 8014330:	fa02 f303 	lsl.w	r3, r2, r3
 8014334:	43da      	mvns	r2, r3
 8014336:	4b12      	ldr	r3, [pc, #72]	; (8014380 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8014338:	681b      	ldr	r3, [r3, #0]
 801433a:	4013      	ands	r3, r2
 801433c:	4a10      	ldr	r2, [pc, #64]	; (8014380 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 801433e:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8014340:	69bb      	ldr	r3, [r7, #24]
 8014342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014344:	2201      	movs	r2, #1
 8014346:	409a      	lsls	r2, r3
 8014348:	4b0d      	ldr	r3, [pc, #52]	; (8014380 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 801434a:	681b      	ldr	r3, [r3, #0]
 801434c:	4313      	orrs	r3, r2
 801434e:	4a0c      	ldr	r2, [pc, #48]	; (8014380 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8014350:	6013      	str	r3, [r2, #0]
 8014352:	69bb      	ldr	r3, [r7, #24]
 8014354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014356:	4613      	mov	r3, r2
 8014358:	009b      	lsls	r3, r3, #2
 801435a:	4413      	add	r3, r2
 801435c:	009b      	lsls	r3, r3, #2
 801435e:	4a07      	ldr	r2, [pc, #28]	; (801437c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8014360:	441a      	add	r2, r3
 8014362:	69bb      	ldr	r3, [r7, #24]
 8014364:	3304      	adds	r3, #4
 8014366:	4619      	mov	r1, r3
 8014368:	4610      	mov	r0, r2
 801436a:	f7fe f8df 	bl	801252c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801436e:	bf00      	nop
 8014370:	3720      	adds	r7, #32
 8014372:	46bd      	mov	sp, r7
 8014374:	bd80      	pop	{r7, pc}
 8014376:	bf00      	nop
 8014378:	200014b8 	.word	0x200014b8
 801437c:	200014bc 	.word	0x200014bc
 8014380:	200015c0 	.word	0x200015c0

08014384 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8014384:	b480      	push	{r7}
 8014386:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8014388:	4b07      	ldr	r3, [pc, #28]	; (80143a8 <pvTaskIncrementMutexHeldCount+0x24>)
 801438a:	681b      	ldr	r3, [r3, #0]
 801438c:	2b00      	cmp	r3, #0
 801438e:	d004      	beq.n	801439a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8014390:	4b05      	ldr	r3, [pc, #20]	; (80143a8 <pvTaskIncrementMutexHeldCount+0x24>)
 8014392:	681b      	ldr	r3, [r3, #0]
 8014394:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8014396:	3201      	adds	r2, #1
 8014398:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 801439a:	4b03      	ldr	r3, [pc, #12]	; (80143a8 <pvTaskIncrementMutexHeldCount+0x24>)
 801439c:	681b      	ldr	r3, [r3, #0]
	}
 801439e:	4618      	mov	r0, r3
 80143a0:	46bd      	mov	sp, r7
 80143a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143a6:	4770      	bx	lr
 80143a8:	200014b8 	.word	0x200014b8

080143ac <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80143ac:	b580      	push	{r7, lr}
 80143ae:	b086      	sub	sp, #24
 80143b0:	af00      	add	r7, sp, #0
 80143b2:	60f8      	str	r0, [r7, #12]
 80143b4:	60b9      	str	r1, [r7, #8]
 80143b6:	607a      	str	r2, [r7, #4]
 80143b8:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80143ba:	f000 fb47 	bl	8014a4c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80143be:	4b26      	ldr	r3, [pc, #152]	; (8014458 <xTaskNotifyWait+0xac>)
 80143c0:	681b      	ldr	r3, [r3, #0]
 80143c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80143c6:	b2db      	uxtb	r3, r3
 80143c8:	2b02      	cmp	r3, #2
 80143ca:	d01a      	beq.n	8014402 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80143cc:	4b22      	ldr	r3, [pc, #136]	; (8014458 <xTaskNotifyWait+0xac>)
 80143ce:	681b      	ldr	r3, [r3, #0]
 80143d0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80143d2:	68fa      	ldr	r2, [r7, #12]
 80143d4:	43d2      	mvns	r2, r2
 80143d6:	400a      	ands	r2, r1
 80143d8:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80143da:	4b1f      	ldr	r3, [pc, #124]	; (8014458 <xTaskNotifyWait+0xac>)
 80143dc:	681b      	ldr	r3, [r3, #0]
 80143de:	2201      	movs	r2, #1
 80143e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 80143e4:	683b      	ldr	r3, [r7, #0]
 80143e6:	2b00      	cmp	r3, #0
 80143e8:	d00b      	beq.n	8014402 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80143ea:	2101      	movs	r1, #1
 80143ec:	6838      	ldr	r0, [r7, #0]
 80143ee:	f000 f99d 	bl	801472c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80143f2:	4b1a      	ldr	r3, [pc, #104]	; (801445c <xTaskNotifyWait+0xb0>)
 80143f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80143f8:	601a      	str	r2, [r3, #0]
 80143fa:	f3bf 8f4f 	dsb	sy
 80143fe:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8014402:	f000 fb51 	bl	8014aa8 <vPortExitCritical>

		taskENTER_CRITICAL();
 8014406:	f000 fb21 	bl	8014a4c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	2b00      	cmp	r3, #0
 801440e:	d004      	beq.n	801441a <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8014410:	4b11      	ldr	r3, [pc, #68]	; (8014458 <xTaskNotifyWait+0xac>)
 8014412:	681b      	ldr	r3, [r3, #0]
 8014414:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801441a:	4b0f      	ldr	r3, [pc, #60]	; (8014458 <xTaskNotifyWait+0xac>)
 801441c:	681b      	ldr	r3, [r3, #0]
 801441e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8014422:	b2db      	uxtb	r3, r3
 8014424:	2b02      	cmp	r3, #2
 8014426:	d002      	beq.n	801442e <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8014428:	2300      	movs	r3, #0
 801442a:	617b      	str	r3, [r7, #20]
 801442c:	e008      	b.n	8014440 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 801442e:	4b0a      	ldr	r3, [pc, #40]	; (8014458 <xTaskNotifyWait+0xac>)
 8014430:	681b      	ldr	r3, [r3, #0]
 8014432:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8014434:	68ba      	ldr	r2, [r7, #8]
 8014436:	43d2      	mvns	r2, r2
 8014438:	400a      	ands	r2, r1
 801443a:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 801443c:	2301      	movs	r3, #1
 801443e:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014440:	4b05      	ldr	r3, [pc, #20]	; (8014458 <xTaskNotifyWait+0xac>)
 8014442:	681b      	ldr	r3, [r3, #0]
 8014444:	2200      	movs	r2, #0
 8014446:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 801444a:	f000 fb2d 	bl	8014aa8 <vPortExitCritical>

		return xReturn;
 801444e:	697b      	ldr	r3, [r7, #20]
	}
 8014450:	4618      	mov	r0, r3
 8014452:	3718      	adds	r7, #24
 8014454:	46bd      	mov	sp, r7
 8014456:	bd80      	pop	{r7, pc}
 8014458:	200014b8 	.word	0x200014b8
 801445c:	e000ed04 	.word	0xe000ed04

08014460 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8014460:	b580      	push	{r7, lr}
 8014462:	b08a      	sub	sp, #40	; 0x28
 8014464:	af00      	add	r7, sp, #0
 8014466:	60f8      	str	r0, [r7, #12]
 8014468:	60b9      	str	r1, [r7, #8]
 801446a:	603b      	str	r3, [r7, #0]
 801446c:	4613      	mov	r3, r2
 801446e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8014470:	2301      	movs	r3, #1
 8014472:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8014474:	68fb      	ldr	r3, [r7, #12]
 8014476:	2b00      	cmp	r3, #0
 8014478:	d109      	bne.n	801448e <xTaskGenericNotify+0x2e>
 801447a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801447e:	f383 8811 	msr	BASEPRI, r3
 8014482:	f3bf 8f6f 	isb	sy
 8014486:	f3bf 8f4f 	dsb	sy
 801448a:	61bb      	str	r3, [r7, #24]
 801448c:	e7fe      	b.n	801448c <xTaskGenericNotify+0x2c>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 801448e:	68fb      	ldr	r3, [r7, #12]
 8014490:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8014492:	f000 fadb 	bl	8014a4c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8014496:	683b      	ldr	r3, [r7, #0]
 8014498:	2b00      	cmp	r3, #0
 801449a:	d003      	beq.n	80144a4 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 801449c:	6a3b      	ldr	r3, [r7, #32]
 801449e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80144a0:	683b      	ldr	r3, [r7, #0]
 80144a2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80144a4:	6a3b      	ldr	r3, [r7, #32]
 80144a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80144aa:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80144ac:	6a3b      	ldr	r3, [r7, #32]
 80144ae:	2202      	movs	r2, #2
 80144b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 80144b4:	79fb      	ldrb	r3, [r7, #7]
 80144b6:	2b04      	cmp	r3, #4
 80144b8:	d827      	bhi.n	801450a <xTaskGenericNotify+0xaa>
 80144ba:	a201      	add	r2, pc, #4	; (adr r2, 80144c0 <xTaskGenericNotify+0x60>)
 80144bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80144c0:	0801450b 	.word	0x0801450b
 80144c4:	080144d5 	.word	0x080144d5
 80144c8:	080144e3 	.word	0x080144e3
 80144cc:	080144ef 	.word	0x080144ef
 80144d0:	080144f7 	.word	0x080144f7
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80144d4:	6a3b      	ldr	r3, [r7, #32]
 80144d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80144d8:	68bb      	ldr	r3, [r7, #8]
 80144da:	431a      	orrs	r2, r3
 80144dc:	6a3b      	ldr	r3, [r7, #32]
 80144de:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80144e0:	e013      	b.n	801450a <xTaskGenericNotify+0xaa>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80144e2:	6a3b      	ldr	r3, [r7, #32]
 80144e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80144e6:	1c5a      	adds	r2, r3, #1
 80144e8:	6a3b      	ldr	r3, [r7, #32]
 80144ea:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80144ec:	e00d      	b.n	801450a <xTaskGenericNotify+0xaa>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80144ee:	6a3b      	ldr	r3, [r7, #32]
 80144f0:	68ba      	ldr	r2, [r7, #8]
 80144f2:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80144f4:	e009      	b.n	801450a <xTaskGenericNotify+0xaa>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80144f6:	7ffb      	ldrb	r3, [r7, #31]
 80144f8:	2b02      	cmp	r3, #2
 80144fa:	d003      	beq.n	8014504 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80144fc:	6a3b      	ldr	r3, [r7, #32]
 80144fe:	68ba      	ldr	r2, [r7, #8]
 8014500:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8014502:	e001      	b.n	8014508 <xTaskGenericNotify+0xa8>
						xReturn = pdFAIL;
 8014504:	2300      	movs	r3, #0
 8014506:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8014508:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801450a:	7ffb      	ldrb	r3, [r7, #31]
 801450c:	2b01      	cmp	r3, #1
 801450e:	d138      	bne.n	8014582 <xTaskGenericNotify+0x122>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014510:	6a3b      	ldr	r3, [r7, #32]
 8014512:	3304      	adds	r3, #4
 8014514:	4618      	mov	r0, r3
 8014516:	f7fe f866 	bl	80125e6 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 801451a:	6a3b      	ldr	r3, [r7, #32]
 801451c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801451e:	2201      	movs	r2, #1
 8014520:	409a      	lsls	r2, r3
 8014522:	4b1b      	ldr	r3, [pc, #108]	; (8014590 <xTaskGenericNotify+0x130>)
 8014524:	681b      	ldr	r3, [r3, #0]
 8014526:	4313      	orrs	r3, r2
 8014528:	4a19      	ldr	r2, [pc, #100]	; (8014590 <xTaskGenericNotify+0x130>)
 801452a:	6013      	str	r3, [r2, #0]
 801452c:	6a3b      	ldr	r3, [r7, #32]
 801452e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014530:	4613      	mov	r3, r2
 8014532:	009b      	lsls	r3, r3, #2
 8014534:	4413      	add	r3, r2
 8014536:	009b      	lsls	r3, r3, #2
 8014538:	4a16      	ldr	r2, [pc, #88]	; (8014594 <xTaskGenericNotify+0x134>)
 801453a:	441a      	add	r2, r3
 801453c:	6a3b      	ldr	r3, [r7, #32]
 801453e:	3304      	adds	r3, #4
 8014540:	4619      	mov	r1, r3
 8014542:	4610      	mov	r0, r2
 8014544:	f7fd fff2 	bl	801252c <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8014548:	6a3b      	ldr	r3, [r7, #32]
 801454a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801454c:	2b00      	cmp	r3, #0
 801454e:	d009      	beq.n	8014564 <xTaskGenericNotify+0x104>
 8014550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014554:	f383 8811 	msr	BASEPRI, r3
 8014558:	f3bf 8f6f 	isb	sy
 801455c:	f3bf 8f4f 	dsb	sy
 8014560:	617b      	str	r3, [r7, #20]
 8014562:	e7fe      	b.n	8014562 <xTaskGenericNotify+0x102>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014564:	6a3b      	ldr	r3, [r7, #32]
 8014566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014568:	4b0b      	ldr	r3, [pc, #44]	; (8014598 <xTaskGenericNotify+0x138>)
 801456a:	681b      	ldr	r3, [r3, #0]
 801456c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801456e:	429a      	cmp	r2, r3
 8014570:	d907      	bls.n	8014582 <xTaskGenericNotify+0x122>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8014572:	4b0a      	ldr	r3, [pc, #40]	; (801459c <xTaskGenericNotify+0x13c>)
 8014574:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014578:	601a      	str	r2, [r3, #0]
 801457a:	f3bf 8f4f 	dsb	sy
 801457e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8014582:	f000 fa91 	bl	8014aa8 <vPortExitCritical>

		return xReturn;
 8014586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8014588:	4618      	mov	r0, r3
 801458a:	3728      	adds	r7, #40	; 0x28
 801458c:	46bd      	mov	sp, r7
 801458e:	bd80      	pop	{r7, pc}
 8014590:	200015c0 	.word	0x200015c0
 8014594:	200014bc 	.word	0x200014bc
 8014598:	200014b8 	.word	0x200014b8
 801459c:	e000ed04 	.word	0xe000ed04

080145a0 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80145a0:	b580      	push	{r7, lr}
 80145a2:	b08e      	sub	sp, #56	; 0x38
 80145a4:	af00      	add	r7, sp, #0
 80145a6:	60f8      	str	r0, [r7, #12]
 80145a8:	60b9      	str	r1, [r7, #8]
 80145aa:	603b      	str	r3, [r7, #0]
 80145ac:	4613      	mov	r3, r2
 80145ae:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80145b0:	2301      	movs	r3, #1
 80145b2:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80145b4:	68fb      	ldr	r3, [r7, #12]
 80145b6:	2b00      	cmp	r3, #0
 80145b8:	d109      	bne.n	80145ce <xTaskGenericNotifyFromISR+0x2e>
 80145ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145be:	f383 8811 	msr	BASEPRI, r3
 80145c2:	f3bf 8f6f 	isb	sy
 80145c6:	f3bf 8f4f 	dsb	sy
 80145ca:	627b      	str	r3, [r7, #36]	; 0x24
 80145cc:	e7fe      	b.n	80145cc <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80145ce:	f000 fb19 	bl	8014c04 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 80145d2:	68fb      	ldr	r3, [r7, #12]
 80145d4:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 80145d6:	f3ef 8211 	mrs	r2, BASEPRI
 80145da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145de:	f383 8811 	msr	BASEPRI, r3
 80145e2:	f3bf 8f6f 	isb	sy
 80145e6:	f3bf 8f4f 	dsb	sy
 80145ea:	623a      	str	r2, [r7, #32]
 80145ec:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80145ee:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80145f0:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80145f2:	683b      	ldr	r3, [r7, #0]
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	d003      	beq.n	8014600 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80145f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80145fc:	683b      	ldr	r3, [r7, #0]
 80145fe:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8014600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014602:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8014606:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801460a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801460c:	2202      	movs	r2, #2
 801460e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8014612:	79fb      	ldrb	r3, [r7, #7]
 8014614:	2b04      	cmp	r3, #4
 8014616:	d829      	bhi.n	801466c <xTaskGenericNotifyFromISR+0xcc>
 8014618:	a201      	add	r2, pc, #4	; (adr r2, 8014620 <xTaskGenericNotifyFromISR+0x80>)
 801461a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801461e:	bf00      	nop
 8014620:	0801466d 	.word	0x0801466d
 8014624:	08014635 	.word	0x08014635
 8014628:	08014643 	.word	0x08014643
 801462c:	0801464f 	.word	0x0801464f
 8014630:	08014657 	.word	0x08014657
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8014634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014636:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014638:	68bb      	ldr	r3, [r7, #8]
 801463a:	431a      	orrs	r2, r3
 801463c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801463e:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8014640:	e014      	b.n	801466c <xTaskGenericNotifyFromISR+0xcc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8014642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014646:	1c5a      	adds	r2, r3, #1
 8014648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801464a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 801464c:	e00e      	b.n	801466c <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801464e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014650:	68ba      	ldr	r2, [r7, #8]
 8014652:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8014654:	e00a      	b.n	801466c <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8014656:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801465a:	2b02      	cmp	r3, #2
 801465c:	d003      	beq.n	8014666 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 801465e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014660:	68ba      	ldr	r2, [r7, #8]
 8014662:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8014664:	e001      	b.n	801466a <xTaskGenericNotifyFromISR+0xca>
						xReturn = pdFAIL;
 8014666:	2300      	movs	r3, #0
 8014668:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 801466a:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801466c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8014670:	2b01      	cmp	r3, #1
 8014672:	d145      	bne.n	8014700 <xTaskGenericNotifyFromISR+0x160>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8014674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014678:	2b00      	cmp	r3, #0
 801467a:	d009      	beq.n	8014690 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 801467c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014680:	f383 8811 	msr	BASEPRI, r3
 8014684:	f3bf 8f6f 	isb	sy
 8014688:	f3bf 8f4f 	dsb	sy
 801468c:	61bb      	str	r3, [r7, #24]
 801468e:	e7fe      	b.n	801468e <xTaskGenericNotifyFromISR+0xee>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014690:	4b20      	ldr	r3, [pc, #128]	; (8014714 <xTaskGenericNotifyFromISR+0x174>)
 8014692:	681b      	ldr	r3, [r3, #0]
 8014694:	2b00      	cmp	r3, #0
 8014696:	d11c      	bne.n	80146d2 <xTaskGenericNotifyFromISR+0x132>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801469a:	3304      	adds	r3, #4
 801469c:	4618      	mov	r0, r3
 801469e:	f7fd ffa2 	bl	80125e6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80146a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80146a6:	2201      	movs	r2, #1
 80146a8:	409a      	lsls	r2, r3
 80146aa:	4b1b      	ldr	r3, [pc, #108]	; (8014718 <xTaskGenericNotifyFromISR+0x178>)
 80146ac:	681b      	ldr	r3, [r3, #0]
 80146ae:	4313      	orrs	r3, r2
 80146b0:	4a19      	ldr	r2, [pc, #100]	; (8014718 <xTaskGenericNotifyFromISR+0x178>)
 80146b2:	6013      	str	r3, [r2, #0]
 80146b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80146b8:	4613      	mov	r3, r2
 80146ba:	009b      	lsls	r3, r3, #2
 80146bc:	4413      	add	r3, r2
 80146be:	009b      	lsls	r3, r3, #2
 80146c0:	4a16      	ldr	r2, [pc, #88]	; (801471c <xTaskGenericNotifyFromISR+0x17c>)
 80146c2:	441a      	add	r2, r3
 80146c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146c6:	3304      	adds	r3, #4
 80146c8:	4619      	mov	r1, r3
 80146ca:	4610      	mov	r0, r2
 80146cc:	f7fd ff2e 	bl	801252c <vListInsertEnd>
 80146d0:	e005      	b.n	80146de <xTaskGenericNotifyFromISR+0x13e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80146d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146d4:	3318      	adds	r3, #24
 80146d6:	4619      	mov	r1, r3
 80146d8:	4811      	ldr	r0, [pc, #68]	; (8014720 <xTaskGenericNotifyFromISR+0x180>)
 80146da:	f7fd ff27 	bl	801252c <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80146de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80146e2:	4b10      	ldr	r3, [pc, #64]	; (8014724 <xTaskGenericNotifyFromISR+0x184>)
 80146e4:	681b      	ldr	r3, [r3, #0]
 80146e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80146e8:	429a      	cmp	r2, r3
 80146ea:	d909      	bls.n	8014700 <xTaskGenericNotifyFromISR+0x160>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80146ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	d003      	beq.n	80146fa <xTaskGenericNotifyFromISR+0x15a>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80146f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80146f4:	2201      	movs	r2, #1
 80146f6:	601a      	str	r2, [r3, #0]
 80146f8:	e002      	b.n	8014700 <xTaskGenericNotifyFromISR+0x160>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 80146fa:	4b0b      	ldr	r3, [pc, #44]	; (8014728 <xTaskGenericNotifyFromISR+0x188>)
 80146fc:	2201      	movs	r2, #1
 80146fe:	601a      	str	r2, [r3, #0]
 8014700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014702:	617b      	str	r3, [r7, #20]
	__asm volatile
 8014704:	697b      	ldr	r3, [r7, #20]
 8014706:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 801470a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 801470c:	4618      	mov	r0, r3
 801470e:	3738      	adds	r7, #56	; 0x38
 8014710:	46bd      	mov	sp, r7
 8014712:	bd80      	pop	{r7, pc}
 8014714:	200015e0 	.word	0x200015e0
 8014718:	200015c0 	.word	0x200015c0
 801471c:	200014bc 	.word	0x200014bc
 8014720:	20001578 	.word	0x20001578
 8014724:	200014b8 	.word	0x200014b8
 8014728:	200015cc 	.word	0x200015cc

0801472c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801472c:	b580      	push	{r7, lr}
 801472e:	b084      	sub	sp, #16
 8014730:	af00      	add	r7, sp, #0
 8014732:	6078      	str	r0, [r7, #4]
 8014734:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8014736:	4b29      	ldr	r3, [pc, #164]	; (80147dc <prvAddCurrentTaskToDelayedList+0xb0>)
 8014738:	681b      	ldr	r3, [r3, #0]
 801473a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801473c:	4b28      	ldr	r3, [pc, #160]	; (80147e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 801473e:	681b      	ldr	r3, [r3, #0]
 8014740:	3304      	adds	r3, #4
 8014742:	4618      	mov	r0, r3
 8014744:	f7fd ff4f 	bl	80125e6 <uxListRemove>
 8014748:	4603      	mov	r3, r0
 801474a:	2b00      	cmp	r3, #0
 801474c:	d10b      	bne.n	8014766 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 801474e:	4b24      	ldr	r3, [pc, #144]	; (80147e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014750:	681b      	ldr	r3, [r3, #0]
 8014752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014754:	2201      	movs	r2, #1
 8014756:	fa02 f303 	lsl.w	r3, r2, r3
 801475a:	43da      	mvns	r2, r3
 801475c:	4b21      	ldr	r3, [pc, #132]	; (80147e4 <prvAddCurrentTaskToDelayedList+0xb8>)
 801475e:	681b      	ldr	r3, [r3, #0]
 8014760:	4013      	ands	r3, r2
 8014762:	4a20      	ldr	r2, [pc, #128]	; (80147e4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8014764:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	f1b3 3fff 	cmp.w	r3, #4294967295
 801476c:	d10a      	bne.n	8014784 <prvAddCurrentTaskToDelayedList+0x58>
 801476e:	683b      	ldr	r3, [r7, #0]
 8014770:	2b00      	cmp	r3, #0
 8014772:	d007      	beq.n	8014784 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014774:	4b1a      	ldr	r3, [pc, #104]	; (80147e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014776:	681b      	ldr	r3, [r3, #0]
 8014778:	3304      	adds	r3, #4
 801477a:	4619      	mov	r1, r3
 801477c:	481a      	ldr	r0, [pc, #104]	; (80147e8 <prvAddCurrentTaskToDelayedList+0xbc>)
 801477e:	f7fd fed5 	bl	801252c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8014782:	e026      	b.n	80147d2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8014784:	68fa      	ldr	r2, [r7, #12]
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	4413      	add	r3, r2
 801478a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801478c:	4b14      	ldr	r3, [pc, #80]	; (80147e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 801478e:	681b      	ldr	r3, [r3, #0]
 8014790:	68ba      	ldr	r2, [r7, #8]
 8014792:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8014794:	68ba      	ldr	r2, [r7, #8]
 8014796:	68fb      	ldr	r3, [r7, #12]
 8014798:	429a      	cmp	r2, r3
 801479a:	d209      	bcs.n	80147b0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801479c:	4b13      	ldr	r3, [pc, #76]	; (80147ec <prvAddCurrentTaskToDelayedList+0xc0>)
 801479e:	681a      	ldr	r2, [r3, #0]
 80147a0:	4b0f      	ldr	r3, [pc, #60]	; (80147e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80147a2:	681b      	ldr	r3, [r3, #0]
 80147a4:	3304      	adds	r3, #4
 80147a6:	4619      	mov	r1, r3
 80147a8:	4610      	mov	r0, r2
 80147aa:	f7fd fee3 	bl	8012574 <vListInsert>
}
 80147ae:	e010      	b.n	80147d2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80147b0:	4b0f      	ldr	r3, [pc, #60]	; (80147f0 <prvAddCurrentTaskToDelayedList+0xc4>)
 80147b2:	681a      	ldr	r2, [r3, #0]
 80147b4:	4b0a      	ldr	r3, [pc, #40]	; (80147e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80147b6:	681b      	ldr	r3, [r3, #0]
 80147b8:	3304      	adds	r3, #4
 80147ba:	4619      	mov	r1, r3
 80147bc:	4610      	mov	r0, r2
 80147be:	f7fd fed9 	bl	8012574 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80147c2:	4b0c      	ldr	r3, [pc, #48]	; (80147f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80147c4:	681b      	ldr	r3, [r3, #0]
 80147c6:	68ba      	ldr	r2, [r7, #8]
 80147c8:	429a      	cmp	r2, r3
 80147ca:	d202      	bcs.n	80147d2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80147cc:	4a09      	ldr	r2, [pc, #36]	; (80147f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80147ce:	68bb      	ldr	r3, [r7, #8]
 80147d0:	6013      	str	r3, [r2, #0]
}
 80147d2:	bf00      	nop
 80147d4:	3710      	adds	r7, #16
 80147d6:	46bd      	mov	sp, r7
 80147d8:	bd80      	pop	{r7, pc}
 80147da:	bf00      	nop
 80147dc:	200015bc 	.word	0x200015bc
 80147e0:	200014b8 	.word	0x200014b8
 80147e4:	200015c0 	.word	0x200015c0
 80147e8:	200015a4 	.word	0x200015a4
 80147ec:	20001574 	.word	0x20001574
 80147f0:	20001570 	.word	0x20001570
 80147f4:	200015d8 	.word	0x200015d8

080147f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80147f8:	b480      	push	{r7}
 80147fa:	b085      	sub	sp, #20
 80147fc:	af00      	add	r7, sp, #0
 80147fe:	60f8      	str	r0, [r7, #12]
 8014800:	60b9      	str	r1, [r7, #8]
 8014802:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8014804:	68fb      	ldr	r3, [r7, #12]
 8014806:	3b04      	subs	r3, #4
 8014808:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801480a:	68fb      	ldr	r3, [r7, #12]
 801480c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8014810:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014812:	68fb      	ldr	r3, [r7, #12]
 8014814:	3b04      	subs	r3, #4
 8014816:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014818:	68bb      	ldr	r3, [r7, #8]
 801481a:	f023 0201 	bic.w	r2, r3, #1
 801481e:	68fb      	ldr	r3, [r7, #12]
 8014820:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014822:	68fb      	ldr	r3, [r7, #12]
 8014824:	3b04      	subs	r3, #4
 8014826:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014828:	4a0c      	ldr	r2, [pc, #48]	; (801485c <pxPortInitialiseStack+0x64>)
 801482a:	68fb      	ldr	r3, [r7, #12]
 801482c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801482e:	68fb      	ldr	r3, [r7, #12]
 8014830:	3b14      	subs	r3, #20
 8014832:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8014834:	687a      	ldr	r2, [r7, #4]
 8014836:	68fb      	ldr	r3, [r7, #12]
 8014838:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801483a:	68fb      	ldr	r3, [r7, #12]
 801483c:	3b04      	subs	r3, #4
 801483e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8014840:	68fb      	ldr	r3, [r7, #12]
 8014842:	f06f 0202 	mvn.w	r2, #2
 8014846:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8014848:	68fb      	ldr	r3, [r7, #12]
 801484a:	3b20      	subs	r3, #32
 801484c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801484e:	68fb      	ldr	r3, [r7, #12]
}
 8014850:	4618      	mov	r0, r3
 8014852:	3714      	adds	r7, #20
 8014854:	46bd      	mov	sp, r7
 8014856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801485a:	4770      	bx	lr
 801485c:	08014861 	.word	0x08014861

08014860 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014860:	b480      	push	{r7}
 8014862:	b085      	sub	sp, #20
 8014864:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8014866:	2300      	movs	r3, #0
 8014868:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801486a:	4b11      	ldr	r3, [pc, #68]	; (80148b0 <prvTaskExitError+0x50>)
 801486c:	681b      	ldr	r3, [r3, #0]
 801486e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014872:	d009      	beq.n	8014888 <prvTaskExitError+0x28>
	__asm volatile
 8014874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014878:	f383 8811 	msr	BASEPRI, r3
 801487c:	f3bf 8f6f 	isb	sy
 8014880:	f3bf 8f4f 	dsb	sy
 8014884:	60fb      	str	r3, [r7, #12]
 8014886:	e7fe      	b.n	8014886 <prvTaskExitError+0x26>
 8014888:	f04f 0350 	mov.w	r3, #80	; 0x50
 801488c:	f383 8811 	msr	BASEPRI, r3
 8014890:	f3bf 8f6f 	isb	sy
 8014894:	f3bf 8f4f 	dsb	sy
 8014898:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801489a:	bf00      	nop
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	2b00      	cmp	r3, #0
 80148a0:	d0fc      	beq.n	801489c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80148a2:	bf00      	nop
 80148a4:	3714      	adds	r7, #20
 80148a6:	46bd      	mov	sp, r7
 80148a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148ac:	4770      	bx	lr
 80148ae:	bf00      	nop
 80148b0:	20000dfc 	.word	0x20000dfc
	...

080148c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80148c0:	4b07      	ldr	r3, [pc, #28]	; (80148e0 <pxCurrentTCBConst2>)
 80148c2:	6819      	ldr	r1, [r3, #0]
 80148c4:	6808      	ldr	r0, [r1, #0]
 80148c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148ca:	f380 8809 	msr	PSP, r0
 80148ce:	f3bf 8f6f 	isb	sy
 80148d2:	f04f 0000 	mov.w	r0, #0
 80148d6:	f380 8811 	msr	BASEPRI, r0
 80148da:	4770      	bx	lr
 80148dc:	f3af 8000 	nop.w

080148e0 <pxCurrentTCBConst2>:
 80148e0:	200014b8 	.word	0x200014b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80148e4:	bf00      	nop
 80148e6:	bf00      	nop

080148e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80148e8:	4808      	ldr	r0, [pc, #32]	; (801490c <prvPortStartFirstTask+0x24>)
 80148ea:	6800      	ldr	r0, [r0, #0]
 80148ec:	6800      	ldr	r0, [r0, #0]
 80148ee:	f380 8808 	msr	MSP, r0
 80148f2:	f04f 0000 	mov.w	r0, #0
 80148f6:	f380 8814 	msr	CONTROL, r0
 80148fa:	b662      	cpsie	i
 80148fc:	b661      	cpsie	f
 80148fe:	f3bf 8f4f 	dsb	sy
 8014902:	f3bf 8f6f 	isb	sy
 8014906:	df00      	svc	0
 8014908:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801490a:	bf00      	nop
 801490c:	e000ed08 	.word	0xe000ed08

08014910 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014910:	b580      	push	{r7, lr}
 8014912:	b086      	sub	sp, #24
 8014914:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8014916:	4b44      	ldr	r3, [pc, #272]	; (8014a28 <xPortStartScheduler+0x118>)
 8014918:	681b      	ldr	r3, [r3, #0]
 801491a:	4a44      	ldr	r2, [pc, #272]	; (8014a2c <xPortStartScheduler+0x11c>)
 801491c:	4293      	cmp	r3, r2
 801491e:	d109      	bne.n	8014934 <xPortStartScheduler+0x24>
 8014920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014924:	f383 8811 	msr	BASEPRI, r3
 8014928:	f3bf 8f6f 	isb	sy
 801492c:	f3bf 8f4f 	dsb	sy
 8014930:	613b      	str	r3, [r7, #16]
 8014932:	e7fe      	b.n	8014932 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8014934:	4b3c      	ldr	r3, [pc, #240]	; (8014a28 <xPortStartScheduler+0x118>)
 8014936:	681b      	ldr	r3, [r3, #0]
 8014938:	4a3d      	ldr	r2, [pc, #244]	; (8014a30 <xPortStartScheduler+0x120>)
 801493a:	4293      	cmp	r3, r2
 801493c:	d109      	bne.n	8014952 <xPortStartScheduler+0x42>
 801493e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014942:	f383 8811 	msr	BASEPRI, r3
 8014946:	f3bf 8f6f 	isb	sy
 801494a:	f3bf 8f4f 	dsb	sy
 801494e:	60fb      	str	r3, [r7, #12]
 8014950:	e7fe      	b.n	8014950 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014952:	4b38      	ldr	r3, [pc, #224]	; (8014a34 <xPortStartScheduler+0x124>)
 8014954:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8014956:	697b      	ldr	r3, [r7, #20]
 8014958:	781b      	ldrb	r3, [r3, #0]
 801495a:	b2db      	uxtb	r3, r3
 801495c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801495e:	697b      	ldr	r3, [r7, #20]
 8014960:	22ff      	movs	r2, #255	; 0xff
 8014962:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014964:	697b      	ldr	r3, [r7, #20]
 8014966:	781b      	ldrb	r3, [r3, #0]
 8014968:	b2db      	uxtb	r3, r3
 801496a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801496c:	78fb      	ldrb	r3, [r7, #3]
 801496e:	b2db      	uxtb	r3, r3
 8014970:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8014974:	b2da      	uxtb	r2, r3
 8014976:	4b30      	ldr	r3, [pc, #192]	; (8014a38 <xPortStartScheduler+0x128>)
 8014978:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801497a:	4b30      	ldr	r3, [pc, #192]	; (8014a3c <xPortStartScheduler+0x12c>)
 801497c:	2207      	movs	r2, #7
 801497e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014980:	e009      	b.n	8014996 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8014982:	4b2e      	ldr	r3, [pc, #184]	; (8014a3c <xPortStartScheduler+0x12c>)
 8014984:	681b      	ldr	r3, [r3, #0]
 8014986:	3b01      	subs	r3, #1
 8014988:	4a2c      	ldr	r2, [pc, #176]	; (8014a3c <xPortStartScheduler+0x12c>)
 801498a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801498c:	78fb      	ldrb	r3, [r7, #3]
 801498e:	b2db      	uxtb	r3, r3
 8014990:	005b      	lsls	r3, r3, #1
 8014992:	b2db      	uxtb	r3, r3
 8014994:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014996:	78fb      	ldrb	r3, [r7, #3]
 8014998:	b2db      	uxtb	r3, r3
 801499a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801499e:	2b80      	cmp	r3, #128	; 0x80
 80149a0:	d0ef      	beq.n	8014982 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80149a2:	4b26      	ldr	r3, [pc, #152]	; (8014a3c <xPortStartScheduler+0x12c>)
 80149a4:	681b      	ldr	r3, [r3, #0]
 80149a6:	f1c3 0307 	rsb	r3, r3, #7
 80149aa:	2b04      	cmp	r3, #4
 80149ac:	d009      	beq.n	80149c2 <xPortStartScheduler+0xb2>
 80149ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149b2:	f383 8811 	msr	BASEPRI, r3
 80149b6:	f3bf 8f6f 	isb	sy
 80149ba:	f3bf 8f4f 	dsb	sy
 80149be:	60bb      	str	r3, [r7, #8]
 80149c0:	e7fe      	b.n	80149c0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80149c2:	4b1e      	ldr	r3, [pc, #120]	; (8014a3c <xPortStartScheduler+0x12c>)
 80149c4:	681b      	ldr	r3, [r3, #0]
 80149c6:	021b      	lsls	r3, r3, #8
 80149c8:	4a1c      	ldr	r2, [pc, #112]	; (8014a3c <xPortStartScheduler+0x12c>)
 80149ca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80149cc:	4b1b      	ldr	r3, [pc, #108]	; (8014a3c <xPortStartScheduler+0x12c>)
 80149ce:	681b      	ldr	r3, [r3, #0]
 80149d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80149d4:	4a19      	ldr	r2, [pc, #100]	; (8014a3c <xPortStartScheduler+0x12c>)
 80149d6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	b2da      	uxtb	r2, r3
 80149dc:	697b      	ldr	r3, [r7, #20]
 80149de:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80149e0:	4b17      	ldr	r3, [pc, #92]	; (8014a40 <xPortStartScheduler+0x130>)
 80149e2:	681b      	ldr	r3, [r3, #0]
 80149e4:	4a16      	ldr	r2, [pc, #88]	; (8014a40 <xPortStartScheduler+0x130>)
 80149e6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80149ea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80149ec:	4b14      	ldr	r3, [pc, #80]	; (8014a40 <xPortStartScheduler+0x130>)
 80149ee:	681b      	ldr	r3, [r3, #0]
 80149f0:	4a13      	ldr	r2, [pc, #76]	; (8014a40 <xPortStartScheduler+0x130>)
 80149f2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80149f6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80149f8:	f000 f8d6 	bl	8014ba8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80149fc:	4b11      	ldr	r3, [pc, #68]	; (8014a44 <xPortStartScheduler+0x134>)
 80149fe:	2200      	movs	r2, #0
 8014a00:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8014a02:	f000 f8f5 	bl	8014bf0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8014a06:	4b10      	ldr	r3, [pc, #64]	; (8014a48 <xPortStartScheduler+0x138>)
 8014a08:	681b      	ldr	r3, [r3, #0]
 8014a0a:	4a0f      	ldr	r2, [pc, #60]	; (8014a48 <xPortStartScheduler+0x138>)
 8014a0c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8014a10:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8014a12:	f7ff ff69 	bl	80148e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8014a16:	f7ff f8b5 	bl	8013b84 <vTaskSwitchContext>
	prvTaskExitError();
 8014a1a:	f7ff ff21 	bl	8014860 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8014a1e:	2300      	movs	r3, #0
}
 8014a20:	4618      	mov	r0, r3
 8014a22:	3718      	adds	r7, #24
 8014a24:	46bd      	mov	sp, r7
 8014a26:	bd80      	pop	{r7, pc}
 8014a28:	e000ed00 	.word	0xe000ed00
 8014a2c:	410fc271 	.word	0x410fc271
 8014a30:	410fc270 	.word	0x410fc270
 8014a34:	e000e400 	.word	0xe000e400
 8014a38:	200015e4 	.word	0x200015e4
 8014a3c:	200015e8 	.word	0x200015e8
 8014a40:	e000ed20 	.word	0xe000ed20
 8014a44:	20000dfc 	.word	0x20000dfc
 8014a48:	e000ef34 	.word	0xe000ef34

08014a4c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8014a4c:	b480      	push	{r7}
 8014a4e:	b083      	sub	sp, #12
 8014a50:	af00      	add	r7, sp, #0
 8014a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a56:	f383 8811 	msr	BASEPRI, r3
 8014a5a:	f3bf 8f6f 	isb	sy
 8014a5e:	f3bf 8f4f 	dsb	sy
 8014a62:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8014a64:	4b0e      	ldr	r3, [pc, #56]	; (8014aa0 <vPortEnterCritical+0x54>)
 8014a66:	681b      	ldr	r3, [r3, #0]
 8014a68:	3301      	adds	r3, #1
 8014a6a:	4a0d      	ldr	r2, [pc, #52]	; (8014aa0 <vPortEnterCritical+0x54>)
 8014a6c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8014a6e:	4b0c      	ldr	r3, [pc, #48]	; (8014aa0 <vPortEnterCritical+0x54>)
 8014a70:	681b      	ldr	r3, [r3, #0]
 8014a72:	2b01      	cmp	r3, #1
 8014a74:	d10e      	bne.n	8014a94 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014a76:	4b0b      	ldr	r3, [pc, #44]	; (8014aa4 <vPortEnterCritical+0x58>)
 8014a78:	681b      	ldr	r3, [r3, #0]
 8014a7a:	b2db      	uxtb	r3, r3
 8014a7c:	2b00      	cmp	r3, #0
 8014a7e:	d009      	beq.n	8014a94 <vPortEnterCritical+0x48>
 8014a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a84:	f383 8811 	msr	BASEPRI, r3
 8014a88:	f3bf 8f6f 	isb	sy
 8014a8c:	f3bf 8f4f 	dsb	sy
 8014a90:	603b      	str	r3, [r7, #0]
 8014a92:	e7fe      	b.n	8014a92 <vPortEnterCritical+0x46>
	}
}
 8014a94:	bf00      	nop
 8014a96:	370c      	adds	r7, #12
 8014a98:	46bd      	mov	sp, r7
 8014a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a9e:	4770      	bx	lr
 8014aa0:	20000dfc 	.word	0x20000dfc
 8014aa4:	e000ed04 	.word	0xe000ed04

08014aa8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014aa8:	b480      	push	{r7}
 8014aaa:	b083      	sub	sp, #12
 8014aac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8014aae:	4b11      	ldr	r3, [pc, #68]	; (8014af4 <vPortExitCritical+0x4c>)
 8014ab0:	681b      	ldr	r3, [r3, #0]
 8014ab2:	2b00      	cmp	r3, #0
 8014ab4:	d109      	bne.n	8014aca <vPortExitCritical+0x22>
 8014ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014aba:	f383 8811 	msr	BASEPRI, r3
 8014abe:	f3bf 8f6f 	isb	sy
 8014ac2:	f3bf 8f4f 	dsb	sy
 8014ac6:	607b      	str	r3, [r7, #4]
 8014ac8:	e7fe      	b.n	8014ac8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8014aca:	4b0a      	ldr	r3, [pc, #40]	; (8014af4 <vPortExitCritical+0x4c>)
 8014acc:	681b      	ldr	r3, [r3, #0]
 8014ace:	3b01      	subs	r3, #1
 8014ad0:	4a08      	ldr	r2, [pc, #32]	; (8014af4 <vPortExitCritical+0x4c>)
 8014ad2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014ad4:	4b07      	ldr	r3, [pc, #28]	; (8014af4 <vPortExitCritical+0x4c>)
 8014ad6:	681b      	ldr	r3, [r3, #0]
 8014ad8:	2b00      	cmp	r3, #0
 8014ada:	d104      	bne.n	8014ae6 <vPortExitCritical+0x3e>
 8014adc:	2300      	movs	r3, #0
 8014ade:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014ae0:	683b      	ldr	r3, [r7, #0]
 8014ae2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8014ae6:	bf00      	nop
 8014ae8:	370c      	adds	r7, #12
 8014aea:	46bd      	mov	sp, r7
 8014aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014af0:	4770      	bx	lr
 8014af2:	bf00      	nop
 8014af4:	20000dfc 	.word	0x20000dfc
	...

08014b00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014b00:	f3ef 8009 	mrs	r0, PSP
 8014b04:	f3bf 8f6f 	isb	sy
 8014b08:	4b15      	ldr	r3, [pc, #84]	; (8014b60 <pxCurrentTCBConst>)
 8014b0a:	681a      	ldr	r2, [r3, #0]
 8014b0c:	f01e 0f10 	tst.w	lr, #16
 8014b10:	bf08      	it	eq
 8014b12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014b16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b1a:	6010      	str	r0, [r2, #0]
 8014b1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014b20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8014b24:	f380 8811 	msr	BASEPRI, r0
 8014b28:	f3bf 8f4f 	dsb	sy
 8014b2c:	f3bf 8f6f 	isb	sy
 8014b30:	f7ff f828 	bl	8013b84 <vTaskSwitchContext>
 8014b34:	f04f 0000 	mov.w	r0, #0
 8014b38:	f380 8811 	msr	BASEPRI, r0
 8014b3c:	bc09      	pop	{r0, r3}
 8014b3e:	6819      	ldr	r1, [r3, #0]
 8014b40:	6808      	ldr	r0, [r1, #0]
 8014b42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b46:	f01e 0f10 	tst.w	lr, #16
 8014b4a:	bf08      	it	eq
 8014b4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014b50:	f380 8809 	msr	PSP, r0
 8014b54:	f3bf 8f6f 	isb	sy
 8014b58:	4770      	bx	lr
 8014b5a:	bf00      	nop
 8014b5c:	f3af 8000 	nop.w

08014b60 <pxCurrentTCBConst>:
 8014b60:	200014b8 	.word	0x200014b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014b64:	bf00      	nop
 8014b66:	bf00      	nop

08014b68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014b68:	b580      	push	{r7, lr}
 8014b6a:	b082      	sub	sp, #8
 8014b6c:	af00      	add	r7, sp, #0
	__asm volatile
 8014b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b72:	f383 8811 	msr	BASEPRI, r3
 8014b76:	f3bf 8f6f 	isb	sy
 8014b7a:	f3bf 8f4f 	dsb	sy
 8014b7e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014b80:	f7fe ff44 	bl	8013a0c <xTaskIncrementTick>
 8014b84:	4603      	mov	r3, r0
 8014b86:	2b00      	cmp	r3, #0
 8014b88:	d003      	beq.n	8014b92 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8014b8a:	4b06      	ldr	r3, [pc, #24]	; (8014ba4 <SysTick_Handler+0x3c>)
 8014b8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014b90:	601a      	str	r2, [r3, #0]
 8014b92:	2300      	movs	r3, #0
 8014b94:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014b96:	683b      	ldr	r3, [r7, #0]
 8014b98:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8014b9c:	bf00      	nop
 8014b9e:	3708      	adds	r7, #8
 8014ba0:	46bd      	mov	sp, r7
 8014ba2:	bd80      	pop	{r7, pc}
 8014ba4:	e000ed04 	.word	0xe000ed04

08014ba8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8014ba8:	b480      	push	{r7}
 8014baa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014bac:	4b0b      	ldr	r3, [pc, #44]	; (8014bdc <vPortSetupTimerInterrupt+0x34>)
 8014bae:	2200      	movs	r2, #0
 8014bb0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014bb2:	4b0b      	ldr	r3, [pc, #44]	; (8014be0 <vPortSetupTimerInterrupt+0x38>)
 8014bb4:	2200      	movs	r2, #0
 8014bb6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8014bb8:	4b0a      	ldr	r3, [pc, #40]	; (8014be4 <vPortSetupTimerInterrupt+0x3c>)
 8014bba:	681b      	ldr	r3, [r3, #0]
 8014bbc:	4a0a      	ldr	r2, [pc, #40]	; (8014be8 <vPortSetupTimerInterrupt+0x40>)
 8014bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8014bc2:	099b      	lsrs	r3, r3, #6
 8014bc4:	4a09      	ldr	r2, [pc, #36]	; (8014bec <vPortSetupTimerInterrupt+0x44>)
 8014bc6:	3b01      	subs	r3, #1
 8014bc8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8014bca:	4b04      	ldr	r3, [pc, #16]	; (8014bdc <vPortSetupTimerInterrupt+0x34>)
 8014bcc:	2207      	movs	r2, #7
 8014bce:	601a      	str	r2, [r3, #0]
}
 8014bd0:	bf00      	nop
 8014bd2:	46bd      	mov	sp, r7
 8014bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bd8:	4770      	bx	lr
 8014bda:	bf00      	nop
 8014bdc:	e000e010 	.word	0xe000e010
 8014be0:	e000e018 	.word	0xe000e018
 8014be4:	20000ce0 	.word	0x20000ce0
 8014be8:	10624dd3 	.word	0x10624dd3
 8014bec:	e000e014 	.word	0xe000e014

08014bf0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8014bf0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8014c00 <vPortEnableVFP+0x10>
 8014bf4:	6801      	ldr	r1, [r0, #0]
 8014bf6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8014bfa:	6001      	str	r1, [r0, #0]
 8014bfc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8014bfe:	bf00      	nop
 8014c00:	e000ed88 	.word	0xe000ed88

08014c04 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8014c04:	b480      	push	{r7}
 8014c06:	b085      	sub	sp, #20
 8014c08:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8014c0a:	f3ef 8305 	mrs	r3, IPSR
 8014c0e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8014c10:	68fb      	ldr	r3, [r7, #12]
 8014c12:	2b0f      	cmp	r3, #15
 8014c14:	d913      	bls.n	8014c3e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8014c16:	4a16      	ldr	r2, [pc, #88]	; (8014c70 <vPortValidateInterruptPriority+0x6c>)
 8014c18:	68fb      	ldr	r3, [r7, #12]
 8014c1a:	4413      	add	r3, r2
 8014c1c:	781b      	ldrb	r3, [r3, #0]
 8014c1e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014c20:	4b14      	ldr	r3, [pc, #80]	; (8014c74 <vPortValidateInterruptPriority+0x70>)
 8014c22:	781b      	ldrb	r3, [r3, #0]
 8014c24:	7afa      	ldrb	r2, [r7, #11]
 8014c26:	429a      	cmp	r2, r3
 8014c28:	d209      	bcs.n	8014c3e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8014c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c2e:	f383 8811 	msr	BASEPRI, r3
 8014c32:	f3bf 8f6f 	isb	sy
 8014c36:	f3bf 8f4f 	dsb	sy
 8014c3a:	607b      	str	r3, [r7, #4]
 8014c3c:	e7fe      	b.n	8014c3c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8014c3e:	4b0e      	ldr	r3, [pc, #56]	; (8014c78 <vPortValidateInterruptPriority+0x74>)
 8014c40:	681b      	ldr	r3, [r3, #0]
 8014c42:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8014c46:	4b0d      	ldr	r3, [pc, #52]	; (8014c7c <vPortValidateInterruptPriority+0x78>)
 8014c48:	681b      	ldr	r3, [r3, #0]
 8014c4a:	429a      	cmp	r2, r3
 8014c4c:	d909      	bls.n	8014c62 <vPortValidateInterruptPriority+0x5e>
 8014c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c52:	f383 8811 	msr	BASEPRI, r3
 8014c56:	f3bf 8f6f 	isb	sy
 8014c5a:	f3bf 8f4f 	dsb	sy
 8014c5e:	603b      	str	r3, [r7, #0]
 8014c60:	e7fe      	b.n	8014c60 <vPortValidateInterruptPriority+0x5c>
	}
 8014c62:	bf00      	nop
 8014c64:	3714      	adds	r7, #20
 8014c66:	46bd      	mov	sp, r7
 8014c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c6c:	4770      	bx	lr
 8014c6e:	bf00      	nop
 8014c70:	e000e3f0 	.word	0xe000e3f0
 8014c74:	200015e4 	.word	0x200015e4
 8014c78:	e000ed0c 	.word	0xe000ed0c
 8014c7c:	200015e8 	.word	0x200015e8

08014c80 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014c80:	b580      	push	{r7, lr}
 8014c82:	b08a      	sub	sp, #40	; 0x28
 8014c84:	af00      	add	r7, sp, #0
 8014c86:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8014c88:	2300      	movs	r3, #0
 8014c8a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8014c8c:	f7fe fe14 	bl	80138b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014c90:	4b57      	ldr	r3, [pc, #348]	; (8014df0 <pvPortMalloc+0x170>)
 8014c92:	681b      	ldr	r3, [r3, #0]
 8014c94:	2b00      	cmp	r3, #0
 8014c96:	d101      	bne.n	8014c9c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8014c98:	f000 f90c 	bl	8014eb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8014c9c:	4b55      	ldr	r3, [pc, #340]	; (8014df4 <pvPortMalloc+0x174>)
 8014c9e:	681a      	ldr	r2, [r3, #0]
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	4013      	ands	r3, r2
 8014ca4:	2b00      	cmp	r3, #0
 8014ca6:	f040 808c 	bne.w	8014dc2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	d01c      	beq.n	8014cea <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8014cb0:	2208      	movs	r2, #8
 8014cb2:	687b      	ldr	r3, [r7, #4]
 8014cb4:	4413      	add	r3, r2
 8014cb6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	f003 0307 	and.w	r3, r3, #7
 8014cbe:	2b00      	cmp	r3, #0
 8014cc0:	d013      	beq.n	8014cea <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	f023 0307 	bic.w	r3, r3, #7
 8014cc8:	3308      	adds	r3, #8
 8014cca:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	f003 0307 	and.w	r3, r3, #7
 8014cd2:	2b00      	cmp	r3, #0
 8014cd4:	d009      	beq.n	8014cea <pvPortMalloc+0x6a>
 8014cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014cda:	f383 8811 	msr	BASEPRI, r3
 8014cde:	f3bf 8f6f 	isb	sy
 8014ce2:	f3bf 8f4f 	dsb	sy
 8014ce6:	617b      	str	r3, [r7, #20]
 8014ce8:	e7fe      	b.n	8014ce8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8014cea:	687b      	ldr	r3, [r7, #4]
 8014cec:	2b00      	cmp	r3, #0
 8014cee:	d068      	beq.n	8014dc2 <pvPortMalloc+0x142>
 8014cf0:	4b41      	ldr	r3, [pc, #260]	; (8014df8 <pvPortMalloc+0x178>)
 8014cf2:	681b      	ldr	r3, [r3, #0]
 8014cf4:	687a      	ldr	r2, [r7, #4]
 8014cf6:	429a      	cmp	r2, r3
 8014cf8:	d863      	bhi.n	8014dc2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8014cfa:	4b40      	ldr	r3, [pc, #256]	; (8014dfc <pvPortMalloc+0x17c>)
 8014cfc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8014cfe:	4b3f      	ldr	r3, [pc, #252]	; (8014dfc <pvPortMalloc+0x17c>)
 8014d00:	681b      	ldr	r3, [r3, #0]
 8014d02:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014d04:	e004      	b.n	8014d10 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8014d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d08:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8014d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d0c:	681b      	ldr	r3, [r3, #0]
 8014d0e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d12:	685b      	ldr	r3, [r3, #4]
 8014d14:	687a      	ldr	r2, [r7, #4]
 8014d16:	429a      	cmp	r2, r3
 8014d18:	d903      	bls.n	8014d22 <pvPortMalloc+0xa2>
 8014d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d1c:	681b      	ldr	r3, [r3, #0]
 8014d1e:	2b00      	cmp	r3, #0
 8014d20:	d1f1      	bne.n	8014d06 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8014d22:	4b33      	ldr	r3, [pc, #204]	; (8014df0 <pvPortMalloc+0x170>)
 8014d24:	681b      	ldr	r3, [r3, #0]
 8014d26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014d28:	429a      	cmp	r2, r3
 8014d2a:	d04a      	beq.n	8014dc2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8014d2c:	6a3b      	ldr	r3, [r7, #32]
 8014d2e:	681b      	ldr	r3, [r3, #0]
 8014d30:	2208      	movs	r2, #8
 8014d32:	4413      	add	r3, r2
 8014d34:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8014d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d38:	681a      	ldr	r2, [r3, #0]
 8014d3a:	6a3b      	ldr	r3, [r7, #32]
 8014d3c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8014d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d40:	685a      	ldr	r2, [r3, #4]
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	1ad2      	subs	r2, r2, r3
 8014d46:	2308      	movs	r3, #8
 8014d48:	005b      	lsls	r3, r3, #1
 8014d4a:	429a      	cmp	r2, r3
 8014d4c:	d91e      	bls.n	8014d8c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8014d4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014d50:	687b      	ldr	r3, [r7, #4]
 8014d52:	4413      	add	r3, r2
 8014d54:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014d56:	69bb      	ldr	r3, [r7, #24]
 8014d58:	f003 0307 	and.w	r3, r3, #7
 8014d5c:	2b00      	cmp	r3, #0
 8014d5e:	d009      	beq.n	8014d74 <pvPortMalloc+0xf4>
 8014d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d64:	f383 8811 	msr	BASEPRI, r3
 8014d68:	f3bf 8f6f 	isb	sy
 8014d6c:	f3bf 8f4f 	dsb	sy
 8014d70:	613b      	str	r3, [r7, #16]
 8014d72:	e7fe      	b.n	8014d72 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8014d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d76:	685a      	ldr	r2, [r3, #4]
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	1ad2      	subs	r2, r2, r3
 8014d7c:	69bb      	ldr	r3, [r7, #24]
 8014d7e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8014d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d82:	687a      	ldr	r2, [r7, #4]
 8014d84:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8014d86:	69b8      	ldr	r0, [r7, #24]
 8014d88:	f000 f8f6 	bl	8014f78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8014d8c:	4b1a      	ldr	r3, [pc, #104]	; (8014df8 <pvPortMalloc+0x178>)
 8014d8e:	681a      	ldr	r2, [r3, #0]
 8014d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d92:	685b      	ldr	r3, [r3, #4]
 8014d94:	1ad3      	subs	r3, r2, r3
 8014d96:	4a18      	ldr	r2, [pc, #96]	; (8014df8 <pvPortMalloc+0x178>)
 8014d98:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8014d9a:	4b17      	ldr	r3, [pc, #92]	; (8014df8 <pvPortMalloc+0x178>)
 8014d9c:	681a      	ldr	r2, [r3, #0]
 8014d9e:	4b18      	ldr	r3, [pc, #96]	; (8014e00 <pvPortMalloc+0x180>)
 8014da0:	681b      	ldr	r3, [r3, #0]
 8014da2:	429a      	cmp	r2, r3
 8014da4:	d203      	bcs.n	8014dae <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8014da6:	4b14      	ldr	r3, [pc, #80]	; (8014df8 <pvPortMalloc+0x178>)
 8014da8:	681b      	ldr	r3, [r3, #0]
 8014daa:	4a15      	ldr	r2, [pc, #84]	; (8014e00 <pvPortMalloc+0x180>)
 8014dac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8014dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014db0:	685a      	ldr	r2, [r3, #4]
 8014db2:	4b10      	ldr	r3, [pc, #64]	; (8014df4 <pvPortMalloc+0x174>)
 8014db4:	681b      	ldr	r3, [r3, #0]
 8014db6:	431a      	orrs	r2, r3
 8014db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014dba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8014dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014dbe:	2200      	movs	r2, #0
 8014dc0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8014dc2:	f7fe fd87 	bl	80138d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8014dc6:	69fb      	ldr	r3, [r7, #28]
 8014dc8:	f003 0307 	and.w	r3, r3, #7
 8014dcc:	2b00      	cmp	r3, #0
 8014dce:	d009      	beq.n	8014de4 <pvPortMalloc+0x164>
 8014dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014dd4:	f383 8811 	msr	BASEPRI, r3
 8014dd8:	f3bf 8f6f 	isb	sy
 8014ddc:	f3bf 8f4f 	dsb	sy
 8014de0:	60fb      	str	r3, [r7, #12]
 8014de2:	e7fe      	b.n	8014de2 <pvPortMalloc+0x162>
	return pvReturn;
 8014de4:	69fb      	ldr	r3, [r7, #28]
}
 8014de6:	4618      	mov	r0, r3
 8014de8:	3728      	adds	r7, #40	; 0x28
 8014dea:	46bd      	mov	sp, r7
 8014dec:	bd80      	pop	{r7, pc}
 8014dee:	bf00      	nop
 8014df0:	200051f4 	.word	0x200051f4
 8014df4:	20005200 	.word	0x20005200
 8014df8:	200051f8 	.word	0x200051f8
 8014dfc:	200051ec 	.word	0x200051ec
 8014e00:	200051fc 	.word	0x200051fc

08014e04 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8014e04:	b580      	push	{r7, lr}
 8014e06:	b086      	sub	sp, #24
 8014e08:	af00      	add	r7, sp, #0
 8014e0a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8014e0c:	687b      	ldr	r3, [r7, #4]
 8014e0e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	d046      	beq.n	8014ea4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8014e16:	2308      	movs	r3, #8
 8014e18:	425b      	negs	r3, r3
 8014e1a:	697a      	ldr	r2, [r7, #20]
 8014e1c:	4413      	add	r3, r2
 8014e1e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8014e20:	697b      	ldr	r3, [r7, #20]
 8014e22:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8014e24:	693b      	ldr	r3, [r7, #16]
 8014e26:	685a      	ldr	r2, [r3, #4]
 8014e28:	4b20      	ldr	r3, [pc, #128]	; (8014eac <vPortFree+0xa8>)
 8014e2a:	681b      	ldr	r3, [r3, #0]
 8014e2c:	4013      	ands	r3, r2
 8014e2e:	2b00      	cmp	r3, #0
 8014e30:	d109      	bne.n	8014e46 <vPortFree+0x42>
 8014e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e36:	f383 8811 	msr	BASEPRI, r3
 8014e3a:	f3bf 8f6f 	isb	sy
 8014e3e:	f3bf 8f4f 	dsb	sy
 8014e42:	60fb      	str	r3, [r7, #12]
 8014e44:	e7fe      	b.n	8014e44 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8014e46:	693b      	ldr	r3, [r7, #16]
 8014e48:	681b      	ldr	r3, [r3, #0]
 8014e4a:	2b00      	cmp	r3, #0
 8014e4c:	d009      	beq.n	8014e62 <vPortFree+0x5e>
 8014e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e52:	f383 8811 	msr	BASEPRI, r3
 8014e56:	f3bf 8f6f 	isb	sy
 8014e5a:	f3bf 8f4f 	dsb	sy
 8014e5e:	60bb      	str	r3, [r7, #8]
 8014e60:	e7fe      	b.n	8014e60 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8014e62:	693b      	ldr	r3, [r7, #16]
 8014e64:	685a      	ldr	r2, [r3, #4]
 8014e66:	4b11      	ldr	r3, [pc, #68]	; (8014eac <vPortFree+0xa8>)
 8014e68:	681b      	ldr	r3, [r3, #0]
 8014e6a:	4013      	ands	r3, r2
 8014e6c:	2b00      	cmp	r3, #0
 8014e6e:	d019      	beq.n	8014ea4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8014e70:	693b      	ldr	r3, [r7, #16]
 8014e72:	681b      	ldr	r3, [r3, #0]
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	d115      	bne.n	8014ea4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8014e78:	693b      	ldr	r3, [r7, #16]
 8014e7a:	685a      	ldr	r2, [r3, #4]
 8014e7c:	4b0b      	ldr	r3, [pc, #44]	; (8014eac <vPortFree+0xa8>)
 8014e7e:	681b      	ldr	r3, [r3, #0]
 8014e80:	43db      	mvns	r3, r3
 8014e82:	401a      	ands	r2, r3
 8014e84:	693b      	ldr	r3, [r7, #16]
 8014e86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8014e88:	f7fe fd16 	bl	80138b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8014e8c:	693b      	ldr	r3, [r7, #16]
 8014e8e:	685a      	ldr	r2, [r3, #4]
 8014e90:	4b07      	ldr	r3, [pc, #28]	; (8014eb0 <vPortFree+0xac>)
 8014e92:	681b      	ldr	r3, [r3, #0]
 8014e94:	4413      	add	r3, r2
 8014e96:	4a06      	ldr	r2, [pc, #24]	; (8014eb0 <vPortFree+0xac>)
 8014e98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8014e9a:	6938      	ldr	r0, [r7, #16]
 8014e9c:	f000 f86c 	bl	8014f78 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8014ea0:	f7fe fd18 	bl	80138d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8014ea4:	bf00      	nop
 8014ea6:	3718      	adds	r7, #24
 8014ea8:	46bd      	mov	sp, r7
 8014eaa:	bd80      	pop	{r7, pc}
 8014eac:	20005200 	.word	0x20005200
 8014eb0:	200051f8 	.word	0x200051f8

08014eb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8014eb4:	b480      	push	{r7}
 8014eb6:	b085      	sub	sp, #20
 8014eb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8014eba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8014ebe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8014ec0:	4b27      	ldr	r3, [pc, #156]	; (8014f60 <prvHeapInit+0xac>)
 8014ec2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8014ec4:	68fb      	ldr	r3, [r7, #12]
 8014ec6:	f003 0307 	and.w	r3, r3, #7
 8014eca:	2b00      	cmp	r3, #0
 8014ecc:	d00c      	beq.n	8014ee8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8014ece:	68fb      	ldr	r3, [r7, #12]
 8014ed0:	3307      	adds	r3, #7
 8014ed2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014ed4:	68fb      	ldr	r3, [r7, #12]
 8014ed6:	f023 0307 	bic.w	r3, r3, #7
 8014eda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8014edc:	68ba      	ldr	r2, [r7, #8]
 8014ede:	68fb      	ldr	r3, [r7, #12]
 8014ee0:	1ad3      	subs	r3, r2, r3
 8014ee2:	4a1f      	ldr	r2, [pc, #124]	; (8014f60 <prvHeapInit+0xac>)
 8014ee4:	4413      	add	r3, r2
 8014ee6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8014ee8:	68fb      	ldr	r3, [r7, #12]
 8014eea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8014eec:	4a1d      	ldr	r2, [pc, #116]	; (8014f64 <prvHeapInit+0xb0>)
 8014eee:	687b      	ldr	r3, [r7, #4]
 8014ef0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8014ef2:	4b1c      	ldr	r3, [pc, #112]	; (8014f64 <prvHeapInit+0xb0>)
 8014ef4:	2200      	movs	r2, #0
 8014ef6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	68ba      	ldr	r2, [r7, #8]
 8014efc:	4413      	add	r3, r2
 8014efe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8014f00:	2208      	movs	r2, #8
 8014f02:	68fb      	ldr	r3, [r7, #12]
 8014f04:	1a9b      	subs	r3, r3, r2
 8014f06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014f08:	68fb      	ldr	r3, [r7, #12]
 8014f0a:	f023 0307 	bic.w	r3, r3, #7
 8014f0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8014f10:	68fb      	ldr	r3, [r7, #12]
 8014f12:	4a15      	ldr	r2, [pc, #84]	; (8014f68 <prvHeapInit+0xb4>)
 8014f14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8014f16:	4b14      	ldr	r3, [pc, #80]	; (8014f68 <prvHeapInit+0xb4>)
 8014f18:	681b      	ldr	r3, [r3, #0]
 8014f1a:	2200      	movs	r2, #0
 8014f1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8014f1e:	4b12      	ldr	r3, [pc, #72]	; (8014f68 <prvHeapInit+0xb4>)
 8014f20:	681b      	ldr	r3, [r3, #0]
 8014f22:	2200      	movs	r2, #0
 8014f24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8014f2a:	683b      	ldr	r3, [r7, #0]
 8014f2c:	68fa      	ldr	r2, [r7, #12]
 8014f2e:	1ad2      	subs	r2, r2, r3
 8014f30:	683b      	ldr	r3, [r7, #0]
 8014f32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8014f34:	4b0c      	ldr	r3, [pc, #48]	; (8014f68 <prvHeapInit+0xb4>)
 8014f36:	681a      	ldr	r2, [r3, #0]
 8014f38:	683b      	ldr	r3, [r7, #0]
 8014f3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014f3c:	683b      	ldr	r3, [r7, #0]
 8014f3e:	685b      	ldr	r3, [r3, #4]
 8014f40:	4a0a      	ldr	r2, [pc, #40]	; (8014f6c <prvHeapInit+0xb8>)
 8014f42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014f44:	683b      	ldr	r3, [r7, #0]
 8014f46:	685b      	ldr	r3, [r3, #4]
 8014f48:	4a09      	ldr	r2, [pc, #36]	; (8014f70 <prvHeapInit+0xbc>)
 8014f4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8014f4c:	4b09      	ldr	r3, [pc, #36]	; (8014f74 <prvHeapInit+0xc0>)
 8014f4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8014f52:	601a      	str	r2, [r3, #0]
}
 8014f54:	bf00      	nop
 8014f56:	3714      	adds	r7, #20
 8014f58:	46bd      	mov	sp, r7
 8014f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f5e:	4770      	bx	lr
 8014f60:	200015ec 	.word	0x200015ec
 8014f64:	200051ec 	.word	0x200051ec
 8014f68:	200051f4 	.word	0x200051f4
 8014f6c:	200051fc 	.word	0x200051fc
 8014f70:	200051f8 	.word	0x200051f8
 8014f74:	20005200 	.word	0x20005200

08014f78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8014f78:	b480      	push	{r7}
 8014f7a:	b085      	sub	sp, #20
 8014f7c:	af00      	add	r7, sp, #0
 8014f7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8014f80:	4b28      	ldr	r3, [pc, #160]	; (8015024 <prvInsertBlockIntoFreeList+0xac>)
 8014f82:	60fb      	str	r3, [r7, #12]
 8014f84:	e002      	b.n	8014f8c <prvInsertBlockIntoFreeList+0x14>
 8014f86:	68fb      	ldr	r3, [r7, #12]
 8014f88:	681b      	ldr	r3, [r3, #0]
 8014f8a:	60fb      	str	r3, [r7, #12]
 8014f8c:	68fb      	ldr	r3, [r7, #12]
 8014f8e:	681b      	ldr	r3, [r3, #0]
 8014f90:	687a      	ldr	r2, [r7, #4]
 8014f92:	429a      	cmp	r2, r3
 8014f94:	d8f7      	bhi.n	8014f86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8014f96:	68fb      	ldr	r3, [r7, #12]
 8014f98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8014f9a:	68fb      	ldr	r3, [r7, #12]
 8014f9c:	685b      	ldr	r3, [r3, #4]
 8014f9e:	68ba      	ldr	r2, [r7, #8]
 8014fa0:	4413      	add	r3, r2
 8014fa2:	687a      	ldr	r2, [r7, #4]
 8014fa4:	429a      	cmp	r2, r3
 8014fa6:	d108      	bne.n	8014fba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8014fa8:	68fb      	ldr	r3, [r7, #12]
 8014faa:	685a      	ldr	r2, [r3, #4]
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	685b      	ldr	r3, [r3, #4]
 8014fb0:	441a      	add	r2, r3
 8014fb2:	68fb      	ldr	r3, [r7, #12]
 8014fb4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8014fb6:	68fb      	ldr	r3, [r7, #12]
 8014fb8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8014fba:	687b      	ldr	r3, [r7, #4]
 8014fbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	685b      	ldr	r3, [r3, #4]
 8014fc2:	68ba      	ldr	r2, [r7, #8]
 8014fc4:	441a      	add	r2, r3
 8014fc6:	68fb      	ldr	r3, [r7, #12]
 8014fc8:	681b      	ldr	r3, [r3, #0]
 8014fca:	429a      	cmp	r2, r3
 8014fcc:	d118      	bne.n	8015000 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8014fce:	68fb      	ldr	r3, [r7, #12]
 8014fd0:	681a      	ldr	r2, [r3, #0]
 8014fd2:	4b15      	ldr	r3, [pc, #84]	; (8015028 <prvInsertBlockIntoFreeList+0xb0>)
 8014fd4:	681b      	ldr	r3, [r3, #0]
 8014fd6:	429a      	cmp	r2, r3
 8014fd8:	d00d      	beq.n	8014ff6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	685a      	ldr	r2, [r3, #4]
 8014fde:	68fb      	ldr	r3, [r7, #12]
 8014fe0:	681b      	ldr	r3, [r3, #0]
 8014fe2:	685b      	ldr	r3, [r3, #4]
 8014fe4:	441a      	add	r2, r3
 8014fe6:	687b      	ldr	r3, [r7, #4]
 8014fe8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8014fea:	68fb      	ldr	r3, [r7, #12]
 8014fec:	681b      	ldr	r3, [r3, #0]
 8014fee:	681a      	ldr	r2, [r3, #0]
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	601a      	str	r2, [r3, #0]
 8014ff4:	e008      	b.n	8015008 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8014ff6:	4b0c      	ldr	r3, [pc, #48]	; (8015028 <prvInsertBlockIntoFreeList+0xb0>)
 8014ff8:	681a      	ldr	r2, [r3, #0]
 8014ffa:	687b      	ldr	r3, [r7, #4]
 8014ffc:	601a      	str	r2, [r3, #0]
 8014ffe:	e003      	b.n	8015008 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8015000:	68fb      	ldr	r3, [r7, #12]
 8015002:	681a      	ldr	r2, [r3, #0]
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8015008:	68fa      	ldr	r2, [r7, #12]
 801500a:	687b      	ldr	r3, [r7, #4]
 801500c:	429a      	cmp	r2, r3
 801500e:	d002      	beq.n	8015016 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8015010:	68fb      	ldr	r3, [r7, #12]
 8015012:	687a      	ldr	r2, [r7, #4]
 8015014:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015016:	bf00      	nop
 8015018:	3714      	adds	r7, #20
 801501a:	46bd      	mov	sp, r7
 801501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015020:	4770      	bx	lr
 8015022:	bf00      	nop
 8015024:	200051ec 	.word	0x200051ec
 8015028:	200051f4 	.word	0x200051f4

0801502c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801502c:	b580      	push	{r7, lr}
 801502e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8015030:	2200      	movs	r2, #0
 8015032:	4912      	ldr	r1, [pc, #72]	; (801507c <MX_USB_DEVICE_Init+0x50>)
 8015034:	4812      	ldr	r0, [pc, #72]	; (8015080 <MX_USB_DEVICE_Init+0x54>)
 8015036:	f7fb fe03 	bl	8010c40 <USBD_Init>
 801503a:	4603      	mov	r3, r0
 801503c:	2b00      	cmp	r3, #0
 801503e:	d001      	beq.n	8015044 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8015040:	f7ee fd82 	bl	8003b48 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8015044:	490f      	ldr	r1, [pc, #60]	; (8015084 <MX_USB_DEVICE_Init+0x58>)
 8015046:	480e      	ldr	r0, [pc, #56]	; (8015080 <MX_USB_DEVICE_Init+0x54>)
 8015048:	f7fb fe25 	bl	8010c96 <USBD_RegisterClass>
 801504c:	4603      	mov	r3, r0
 801504e:	2b00      	cmp	r3, #0
 8015050:	d001      	beq.n	8015056 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8015052:	f7ee fd79 	bl	8003b48 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8015056:	490c      	ldr	r1, [pc, #48]	; (8015088 <MX_USB_DEVICE_Init+0x5c>)
 8015058:	4809      	ldr	r0, [pc, #36]	; (8015080 <MX_USB_DEVICE_Init+0x54>)
 801505a:	f7fb fd53 	bl	8010b04 <USBD_CDC_RegisterInterface>
 801505e:	4603      	mov	r3, r0
 8015060:	2b00      	cmp	r3, #0
 8015062:	d001      	beq.n	8015068 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8015064:	f7ee fd70 	bl	8003b48 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8015068:	4805      	ldr	r0, [pc, #20]	; (8015080 <MX_USB_DEVICE_Init+0x54>)
 801506a:	f7fb fe2e 	bl	8010cca <USBD_Start>
 801506e:	4603      	mov	r3, r0
 8015070:	2b00      	cmp	r3, #0
 8015072:	d001      	beq.n	8015078 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8015074:	f7ee fd68 	bl	8003b48 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8015078:	bf00      	nop
 801507a:	bd80      	pop	{r7, pc}
 801507c:	20000e10 	.word	0x20000e10
 8015080:	200061dc 	.word	0x200061dc
 8015084:	20000cf8 	.word	0x20000cf8
 8015088:	20000e00 	.word	0x20000e00

0801508c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801508c:	b580      	push	{r7, lr}
 801508e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8015090:	2200      	movs	r2, #0
 8015092:	4905      	ldr	r1, [pc, #20]	; (80150a8 <CDC_Init_FS+0x1c>)
 8015094:	4805      	ldr	r0, [pc, #20]	; (80150ac <CDC_Init_FS+0x20>)
 8015096:	f7fb fd4c 	bl	8010b32 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801509a:	4905      	ldr	r1, [pc, #20]	; (80150b0 <CDC_Init_FS+0x24>)
 801509c:	4803      	ldr	r0, [pc, #12]	; (80150ac <CDC_Init_FS+0x20>)
 801509e:	f7fb fd62 	bl	8010b66 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80150a2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80150a4:	4618      	mov	r0, r3
 80150a6:	bd80      	pop	{r7, pc}
 80150a8:	20006678 	.word	0x20006678
 80150ac:	200061dc 	.word	0x200061dc
 80150b0:	20006478 	.word	0x20006478

080150b4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80150b4:	b480      	push	{r7}
 80150b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80150b8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80150ba:	4618      	mov	r0, r3
 80150bc:	46bd      	mov	sp, r7
 80150be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150c2:	4770      	bx	lr

080150c4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80150c4:	b480      	push	{r7}
 80150c6:	b083      	sub	sp, #12
 80150c8:	af00      	add	r7, sp, #0
 80150ca:	4603      	mov	r3, r0
 80150cc:	6039      	str	r1, [r7, #0]
 80150ce:	71fb      	strb	r3, [r7, #7]
 80150d0:	4613      	mov	r3, r2
 80150d2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80150d4:	79fb      	ldrb	r3, [r7, #7]
 80150d6:	2b23      	cmp	r3, #35	; 0x23
 80150d8:	f200 808c 	bhi.w	80151f4 <CDC_Control_FS+0x130>
 80150dc:	a201      	add	r2, pc, #4	; (adr r2, 80150e4 <CDC_Control_FS+0x20>)
 80150de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80150e2:	bf00      	nop
 80150e4:	080151f5 	.word	0x080151f5
 80150e8:	080151f5 	.word	0x080151f5
 80150ec:	080151f5 	.word	0x080151f5
 80150f0:	080151f5 	.word	0x080151f5
 80150f4:	080151f5 	.word	0x080151f5
 80150f8:	080151f5 	.word	0x080151f5
 80150fc:	080151f5 	.word	0x080151f5
 8015100:	080151f5 	.word	0x080151f5
 8015104:	080151f5 	.word	0x080151f5
 8015108:	080151f5 	.word	0x080151f5
 801510c:	080151f5 	.word	0x080151f5
 8015110:	080151f5 	.word	0x080151f5
 8015114:	080151f5 	.word	0x080151f5
 8015118:	080151f5 	.word	0x080151f5
 801511c:	080151f5 	.word	0x080151f5
 8015120:	080151f5 	.word	0x080151f5
 8015124:	080151f5 	.word	0x080151f5
 8015128:	080151f5 	.word	0x080151f5
 801512c:	080151f5 	.word	0x080151f5
 8015130:	080151f5 	.word	0x080151f5
 8015134:	080151f5 	.word	0x080151f5
 8015138:	080151f5 	.word	0x080151f5
 801513c:	080151f5 	.word	0x080151f5
 8015140:	080151f5 	.word	0x080151f5
 8015144:	080151f5 	.word	0x080151f5
 8015148:	080151f5 	.word	0x080151f5
 801514c:	080151f5 	.word	0x080151f5
 8015150:	080151f5 	.word	0x080151f5
 8015154:	080151f5 	.word	0x080151f5
 8015158:	080151f5 	.word	0x080151f5
 801515c:	080151f5 	.word	0x080151f5
 8015160:	080151f5 	.word	0x080151f5
 8015164:	08015175 	.word	0x08015175
 8015168:	080151af 	.word	0x080151af
 801516c:	080151f5 	.word	0x080151f5
 8015170:	080151f5 	.word	0x080151f5
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	TempBuf_USB[0]=pbuf[0];
 8015174:	683b      	ldr	r3, [r7, #0]
 8015176:	781a      	ldrb	r2, [r3, #0]
 8015178:	4b22      	ldr	r3, [pc, #136]	; (8015204 <CDC_Control_FS+0x140>)
 801517a:	701a      	strb	r2, [r3, #0]
    	TempBuf_USB[1]=pbuf[1];
 801517c:	683b      	ldr	r3, [r7, #0]
 801517e:	785a      	ldrb	r2, [r3, #1]
 8015180:	4b20      	ldr	r3, [pc, #128]	; (8015204 <CDC_Control_FS+0x140>)
 8015182:	705a      	strb	r2, [r3, #1]
    	TempBuf_USB[2]=pbuf[2];
 8015184:	683b      	ldr	r3, [r7, #0]
 8015186:	789a      	ldrb	r2, [r3, #2]
 8015188:	4b1e      	ldr	r3, [pc, #120]	; (8015204 <CDC_Control_FS+0x140>)
 801518a:	709a      	strb	r2, [r3, #2]
    	TempBuf_USB[3]=pbuf[3];
 801518c:	683b      	ldr	r3, [r7, #0]
 801518e:	78da      	ldrb	r2, [r3, #3]
 8015190:	4b1c      	ldr	r3, [pc, #112]	; (8015204 <CDC_Control_FS+0x140>)
 8015192:	70da      	strb	r2, [r3, #3]
    	TempBuf_USB[4]=pbuf[4];
 8015194:	683b      	ldr	r3, [r7, #0]
 8015196:	791a      	ldrb	r2, [r3, #4]
 8015198:	4b1a      	ldr	r3, [pc, #104]	; (8015204 <CDC_Control_FS+0x140>)
 801519a:	711a      	strb	r2, [r3, #4]
    	TempBuf_USB[5]=pbuf[5];
 801519c:	683b      	ldr	r3, [r7, #0]
 801519e:	795a      	ldrb	r2, [r3, #5]
 80151a0:	4b18      	ldr	r3, [pc, #96]	; (8015204 <CDC_Control_FS+0x140>)
 80151a2:	715a      	strb	r2, [r3, #5]
    	TempBuf_USB[6]=pbuf[6];
 80151a4:	683b      	ldr	r3, [r7, #0]
 80151a6:	799a      	ldrb	r2, [r3, #6]
 80151a8:	4b16      	ldr	r3, [pc, #88]	; (8015204 <CDC_Control_FS+0x140>)
 80151aa:	719a      	strb	r2, [r3, #6]
    	break;
 80151ac:	e023      	b.n	80151f6 <CDC_Control_FS+0x132>


    case CDC_GET_LINE_CODING:
        pbuf[0]=TempBuf_USB[0];
 80151ae:	4b15      	ldr	r3, [pc, #84]	; (8015204 <CDC_Control_FS+0x140>)
 80151b0:	781a      	ldrb	r2, [r3, #0]
 80151b2:	683b      	ldr	r3, [r7, #0]
 80151b4:	701a      	strb	r2, [r3, #0]
        pbuf[1]=TempBuf_USB[1];
 80151b6:	683b      	ldr	r3, [r7, #0]
 80151b8:	3301      	adds	r3, #1
 80151ba:	4a12      	ldr	r2, [pc, #72]	; (8015204 <CDC_Control_FS+0x140>)
 80151bc:	7852      	ldrb	r2, [r2, #1]
 80151be:	701a      	strb	r2, [r3, #0]
        pbuf[2]=TempBuf_USB[2];
 80151c0:	683b      	ldr	r3, [r7, #0]
 80151c2:	3302      	adds	r3, #2
 80151c4:	4a0f      	ldr	r2, [pc, #60]	; (8015204 <CDC_Control_FS+0x140>)
 80151c6:	7892      	ldrb	r2, [r2, #2]
 80151c8:	701a      	strb	r2, [r3, #0]
        pbuf[3]=TempBuf_USB[3];
 80151ca:	683b      	ldr	r3, [r7, #0]
 80151cc:	3303      	adds	r3, #3
 80151ce:	4a0d      	ldr	r2, [pc, #52]	; (8015204 <CDC_Control_FS+0x140>)
 80151d0:	78d2      	ldrb	r2, [r2, #3]
 80151d2:	701a      	strb	r2, [r3, #0]
        pbuf[4]=TempBuf_USB[4];
 80151d4:	683b      	ldr	r3, [r7, #0]
 80151d6:	3304      	adds	r3, #4
 80151d8:	4a0a      	ldr	r2, [pc, #40]	; (8015204 <CDC_Control_FS+0x140>)
 80151da:	7912      	ldrb	r2, [r2, #4]
 80151dc:	701a      	strb	r2, [r3, #0]
        pbuf[5]=TempBuf_USB[5];
 80151de:	683b      	ldr	r3, [r7, #0]
 80151e0:	3305      	adds	r3, #5
 80151e2:	4a08      	ldr	r2, [pc, #32]	; (8015204 <CDC_Control_FS+0x140>)
 80151e4:	7952      	ldrb	r2, [r2, #5]
 80151e6:	701a      	strb	r2, [r3, #0]
        pbuf[6]=TempBuf_USB[6];
 80151e8:	683b      	ldr	r3, [r7, #0]
 80151ea:	3306      	adds	r3, #6
 80151ec:	4a05      	ldr	r2, [pc, #20]	; (8015204 <CDC_Control_FS+0x140>)
 80151ee:	7992      	ldrb	r2, [r2, #6]
 80151f0:	701a      	strb	r2, [r3, #0]
    break;
 80151f2:	e000      	b.n	80151f6 <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80151f4:	bf00      	nop
  }

  return (USBD_OK);
 80151f6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80151f8:	4618      	mov	r0, r3
 80151fa:	370c      	adds	r7, #12
 80151fc:	46bd      	mov	sp, r7
 80151fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015202:	4770      	bx	lr
 8015204:	20006878 	.word	0x20006878

08015208 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8015208:	b580      	push	{r7, lr}
 801520a:	b082      	sub	sp, #8
 801520c:	af00      	add	r7, sp, #0
 801520e:	6078      	str	r0, [r7, #4]
 8015210:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	ringBuff_PushArray(&usb_rx_ringbuff, Buf, (uint16_t)*Len);
 8015212:	683b      	ldr	r3, [r7, #0]
 8015214:	681b      	ldr	r3, [r3, #0]
 8015216:	b29b      	uxth	r3, r3
 8015218:	461a      	mov	r2, r3
 801521a:	6879      	ldr	r1, [r7, #4]
 801521c:	4807      	ldr	r0, [pc, #28]	; (801523c <CDC_Receive_FS+0x34>)
 801521e:	f7ee fd0a 	bl	8003c36 <ringBuff_PushArray>
//	if ( END_CHAR == Buf[*Len - 1]) {
//		osSignalSet(USB_RX_Check_Handle, 0x01);
//	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8015222:	6879      	ldr	r1, [r7, #4]
 8015224:	4806      	ldr	r0, [pc, #24]	; (8015240 <CDC_Receive_FS+0x38>)
 8015226:	f7fb fc9e 	bl	8010b66 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801522a:	4805      	ldr	r0, [pc, #20]	; (8015240 <CDC_Receive_FS+0x38>)
 801522c:	f7fb fcde 	bl	8010bec <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8015230:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8015232:	4618      	mov	r0, r3
 8015234:	3708      	adds	r7, #8
 8015236:	46bd      	mov	sp, r7
 8015238:	bd80      	pop	{r7, pc}
 801523a:	bf00      	nop
 801523c:	2000007c 	.word	0x2000007c
 8015240:	200061dc 	.word	0x200061dc

08015244 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8015244:	b580      	push	{r7, lr}
 8015246:	b084      	sub	sp, #16
 8015248:	af00      	add	r7, sp, #0
 801524a:	6078      	str	r0, [r7, #4]
 801524c:	460b      	mov	r3, r1
 801524e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8015250:	2300      	movs	r3, #0
 8015252:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8015254:	4b0d      	ldr	r3, [pc, #52]	; (801528c <CDC_Transmit_FS+0x48>)
 8015256:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 801525a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801525c:	68bb      	ldr	r3, [r7, #8]
 801525e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8015262:	2b00      	cmp	r3, #0
 8015264:	d001      	beq.n	801526a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8015266:	2301      	movs	r3, #1
 8015268:	e00b      	b.n	8015282 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801526a:	887b      	ldrh	r3, [r7, #2]
 801526c:	461a      	mov	r2, r3
 801526e:	6879      	ldr	r1, [r7, #4]
 8015270:	4806      	ldr	r0, [pc, #24]	; (801528c <CDC_Transmit_FS+0x48>)
 8015272:	f7fb fc5e 	bl	8010b32 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8015276:	4805      	ldr	r0, [pc, #20]	; (801528c <CDC_Transmit_FS+0x48>)
 8015278:	f7fb fc89 	bl	8010b8e <USBD_CDC_TransmitPacket>
 801527c:	4603      	mov	r3, r0
 801527e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8015280:	7bfb      	ldrb	r3, [r7, #15]
}
 8015282:	4618      	mov	r0, r3
 8015284:	3710      	adds	r7, #16
 8015286:	46bd      	mov	sp, r7
 8015288:	bd80      	pop	{r7, pc}
 801528a:	bf00      	nop
 801528c:	200061dc 	.word	0x200061dc

08015290 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015290:	b480      	push	{r7}
 8015292:	b083      	sub	sp, #12
 8015294:	af00      	add	r7, sp, #0
 8015296:	4603      	mov	r3, r0
 8015298:	6039      	str	r1, [r7, #0]
 801529a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801529c:	683b      	ldr	r3, [r7, #0]
 801529e:	2212      	movs	r2, #18
 80152a0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80152a2:	4b03      	ldr	r3, [pc, #12]	; (80152b0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80152a4:	4618      	mov	r0, r3
 80152a6:	370c      	adds	r7, #12
 80152a8:	46bd      	mov	sp, r7
 80152aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152ae:	4770      	bx	lr
 80152b0:	20000e2c 	.word	0x20000e2c

080152b4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80152b4:	b480      	push	{r7}
 80152b6:	b083      	sub	sp, #12
 80152b8:	af00      	add	r7, sp, #0
 80152ba:	4603      	mov	r3, r0
 80152bc:	6039      	str	r1, [r7, #0]
 80152be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80152c0:	683b      	ldr	r3, [r7, #0]
 80152c2:	2204      	movs	r2, #4
 80152c4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80152c6:	4b03      	ldr	r3, [pc, #12]	; (80152d4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80152c8:	4618      	mov	r0, r3
 80152ca:	370c      	adds	r7, #12
 80152cc:	46bd      	mov	sp, r7
 80152ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152d2:	4770      	bx	lr
 80152d4:	20000e40 	.word	0x20000e40

080152d8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80152d8:	b580      	push	{r7, lr}
 80152da:	b082      	sub	sp, #8
 80152dc:	af00      	add	r7, sp, #0
 80152de:	4603      	mov	r3, r0
 80152e0:	6039      	str	r1, [r7, #0]
 80152e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80152e4:	79fb      	ldrb	r3, [r7, #7]
 80152e6:	2b00      	cmp	r3, #0
 80152e8:	d105      	bne.n	80152f6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80152ea:	683a      	ldr	r2, [r7, #0]
 80152ec:	4907      	ldr	r1, [pc, #28]	; (801530c <USBD_FS_ProductStrDescriptor+0x34>)
 80152ee:	4808      	ldr	r0, [pc, #32]	; (8015310 <USBD_FS_ProductStrDescriptor+0x38>)
 80152f0:	f7fc fc22 	bl	8011b38 <USBD_GetString>
 80152f4:	e004      	b.n	8015300 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80152f6:	683a      	ldr	r2, [r7, #0]
 80152f8:	4904      	ldr	r1, [pc, #16]	; (801530c <USBD_FS_ProductStrDescriptor+0x34>)
 80152fa:	4805      	ldr	r0, [pc, #20]	; (8015310 <USBD_FS_ProductStrDescriptor+0x38>)
 80152fc:	f7fc fc1c 	bl	8011b38 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015300:	4b02      	ldr	r3, [pc, #8]	; (801530c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8015302:	4618      	mov	r0, r3
 8015304:	3708      	adds	r7, #8
 8015306:	46bd      	mov	sp, r7
 8015308:	bd80      	pop	{r7, pc}
 801530a:	bf00      	nop
 801530c:	20006880 	.word	0x20006880
 8015310:	0801be04 	.word	0x0801be04

08015314 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015314:	b580      	push	{r7, lr}
 8015316:	b082      	sub	sp, #8
 8015318:	af00      	add	r7, sp, #0
 801531a:	4603      	mov	r3, r0
 801531c:	6039      	str	r1, [r7, #0]
 801531e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8015320:	683a      	ldr	r2, [r7, #0]
 8015322:	4904      	ldr	r1, [pc, #16]	; (8015334 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8015324:	4804      	ldr	r0, [pc, #16]	; (8015338 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8015326:	f7fc fc07 	bl	8011b38 <USBD_GetString>
  return USBD_StrDesc;
 801532a:	4b02      	ldr	r3, [pc, #8]	; (8015334 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801532c:	4618      	mov	r0, r3
 801532e:	3708      	adds	r7, #8
 8015330:	46bd      	mov	sp, r7
 8015332:	bd80      	pop	{r7, pc}
 8015334:	20006880 	.word	0x20006880
 8015338:	0801be1c 	.word	0x0801be1c

0801533c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801533c:	b580      	push	{r7, lr}
 801533e:	b082      	sub	sp, #8
 8015340:	af00      	add	r7, sp, #0
 8015342:	4603      	mov	r3, r0
 8015344:	6039      	str	r1, [r7, #0]
 8015346:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8015348:	683b      	ldr	r3, [r7, #0]
 801534a:	221a      	movs	r2, #26
 801534c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801534e:	f000 f843 	bl	80153d8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8015352:	4b02      	ldr	r3, [pc, #8]	; (801535c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8015354:	4618      	mov	r0, r3
 8015356:	3708      	adds	r7, #8
 8015358:	46bd      	mov	sp, r7
 801535a:	bd80      	pop	{r7, pc}
 801535c:	20000e44 	.word	0x20000e44

08015360 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015360:	b580      	push	{r7, lr}
 8015362:	b082      	sub	sp, #8
 8015364:	af00      	add	r7, sp, #0
 8015366:	4603      	mov	r3, r0
 8015368:	6039      	str	r1, [r7, #0]
 801536a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801536c:	79fb      	ldrb	r3, [r7, #7]
 801536e:	2b00      	cmp	r3, #0
 8015370:	d105      	bne.n	801537e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8015372:	683a      	ldr	r2, [r7, #0]
 8015374:	4907      	ldr	r1, [pc, #28]	; (8015394 <USBD_FS_ConfigStrDescriptor+0x34>)
 8015376:	4808      	ldr	r0, [pc, #32]	; (8015398 <USBD_FS_ConfigStrDescriptor+0x38>)
 8015378:	f7fc fbde 	bl	8011b38 <USBD_GetString>
 801537c:	e004      	b.n	8015388 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801537e:	683a      	ldr	r2, [r7, #0]
 8015380:	4904      	ldr	r1, [pc, #16]	; (8015394 <USBD_FS_ConfigStrDescriptor+0x34>)
 8015382:	4805      	ldr	r0, [pc, #20]	; (8015398 <USBD_FS_ConfigStrDescriptor+0x38>)
 8015384:	f7fc fbd8 	bl	8011b38 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015388:	4b02      	ldr	r3, [pc, #8]	; (8015394 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801538a:	4618      	mov	r0, r3
 801538c:	3708      	adds	r7, #8
 801538e:	46bd      	mov	sp, r7
 8015390:	bd80      	pop	{r7, pc}
 8015392:	bf00      	nop
 8015394:	20006880 	.word	0x20006880
 8015398:	0801be30 	.word	0x0801be30

0801539c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801539c:	b580      	push	{r7, lr}
 801539e:	b082      	sub	sp, #8
 80153a0:	af00      	add	r7, sp, #0
 80153a2:	4603      	mov	r3, r0
 80153a4:	6039      	str	r1, [r7, #0]
 80153a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80153a8:	79fb      	ldrb	r3, [r7, #7]
 80153aa:	2b00      	cmp	r3, #0
 80153ac:	d105      	bne.n	80153ba <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80153ae:	683a      	ldr	r2, [r7, #0]
 80153b0:	4907      	ldr	r1, [pc, #28]	; (80153d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80153b2:	4808      	ldr	r0, [pc, #32]	; (80153d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80153b4:	f7fc fbc0 	bl	8011b38 <USBD_GetString>
 80153b8:	e004      	b.n	80153c4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80153ba:	683a      	ldr	r2, [r7, #0]
 80153bc:	4904      	ldr	r1, [pc, #16]	; (80153d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80153be:	4805      	ldr	r0, [pc, #20]	; (80153d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80153c0:	f7fc fbba 	bl	8011b38 <USBD_GetString>
  }
  return USBD_StrDesc;
 80153c4:	4b02      	ldr	r3, [pc, #8]	; (80153d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80153c6:	4618      	mov	r0, r3
 80153c8:	3708      	adds	r7, #8
 80153ca:	46bd      	mov	sp, r7
 80153cc:	bd80      	pop	{r7, pc}
 80153ce:	bf00      	nop
 80153d0:	20006880 	.word	0x20006880
 80153d4:	0801be3c 	.word	0x0801be3c

080153d8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 80153d8:	b580      	push	{r7, lr}
 80153da:	b084      	sub	sp, #16
 80153dc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80153de:	4b0f      	ldr	r3, [pc, #60]	; (801541c <Get_SerialNum+0x44>)
 80153e0:	681b      	ldr	r3, [r3, #0]
 80153e2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80153e4:	4b0e      	ldr	r3, [pc, #56]	; (8015420 <Get_SerialNum+0x48>)
 80153e6:	681b      	ldr	r3, [r3, #0]
 80153e8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80153ea:	4b0e      	ldr	r3, [pc, #56]	; (8015424 <Get_SerialNum+0x4c>)
 80153ec:	681b      	ldr	r3, [r3, #0]
 80153ee:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80153f0:	68fa      	ldr	r2, [r7, #12]
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	4413      	add	r3, r2
 80153f6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80153f8:	68fb      	ldr	r3, [r7, #12]
 80153fa:	2b00      	cmp	r3, #0
 80153fc:	d009      	beq.n	8015412 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80153fe:	2208      	movs	r2, #8
 8015400:	4909      	ldr	r1, [pc, #36]	; (8015428 <Get_SerialNum+0x50>)
 8015402:	68f8      	ldr	r0, [r7, #12]
 8015404:	f000 f814 	bl	8015430 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8015408:	2204      	movs	r2, #4
 801540a:	4908      	ldr	r1, [pc, #32]	; (801542c <Get_SerialNum+0x54>)
 801540c:	68b8      	ldr	r0, [r7, #8]
 801540e:	f000 f80f 	bl	8015430 <IntToUnicode>
  }
}
 8015412:	bf00      	nop
 8015414:	3710      	adds	r7, #16
 8015416:	46bd      	mov	sp, r7
 8015418:	bd80      	pop	{r7, pc}
 801541a:	bf00      	nop
 801541c:	1fff7a10 	.word	0x1fff7a10
 8015420:	1fff7a14 	.word	0x1fff7a14
 8015424:	1fff7a18 	.word	0x1fff7a18
 8015428:	20000e46 	.word	0x20000e46
 801542c:	20000e56 	.word	0x20000e56

08015430 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8015430:	b480      	push	{r7}
 8015432:	b087      	sub	sp, #28
 8015434:	af00      	add	r7, sp, #0
 8015436:	60f8      	str	r0, [r7, #12]
 8015438:	60b9      	str	r1, [r7, #8]
 801543a:	4613      	mov	r3, r2
 801543c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801543e:	2300      	movs	r3, #0
 8015440:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8015442:	2300      	movs	r3, #0
 8015444:	75fb      	strb	r3, [r7, #23]
 8015446:	e027      	b.n	8015498 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8015448:	68fb      	ldr	r3, [r7, #12]
 801544a:	0f1b      	lsrs	r3, r3, #28
 801544c:	2b09      	cmp	r3, #9
 801544e:	d80b      	bhi.n	8015468 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8015450:	68fb      	ldr	r3, [r7, #12]
 8015452:	0f1b      	lsrs	r3, r3, #28
 8015454:	b2da      	uxtb	r2, r3
 8015456:	7dfb      	ldrb	r3, [r7, #23]
 8015458:	005b      	lsls	r3, r3, #1
 801545a:	4619      	mov	r1, r3
 801545c:	68bb      	ldr	r3, [r7, #8]
 801545e:	440b      	add	r3, r1
 8015460:	3230      	adds	r2, #48	; 0x30
 8015462:	b2d2      	uxtb	r2, r2
 8015464:	701a      	strb	r2, [r3, #0]
 8015466:	e00a      	b.n	801547e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8015468:	68fb      	ldr	r3, [r7, #12]
 801546a:	0f1b      	lsrs	r3, r3, #28
 801546c:	b2da      	uxtb	r2, r3
 801546e:	7dfb      	ldrb	r3, [r7, #23]
 8015470:	005b      	lsls	r3, r3, #1
 8015472:	4619      	mov	r1, r3
 8015474:	68bb      	ldr	r3, [r7, #8]
 8015476:	440b      	add	r3, r1
 8015478:	3237      	adds	r2, #55	; 0x37
 801547a:	b2d2      	uxtb	r2, r2
 801547c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801547e:	68fb      	ldr	r3, [r7, #12]
 8015480:	011b      	lsls	r3, r3, #4
 8015482:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8015484:	7dfb      	ldrb	r3, [r7, #23]
 8015486:	005b      	lsls	r3, r3, #1
 8015488:	3301      	adds	r3, #1
 801548a:	68ba      	ldr	r2, [r7, #8]
 801548c:	4413      	add	r3, r2
 801548e:	2200      	movs	r2, #0
 8015490:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8015492:	7dfb      	ldrb	r3, [r7, #23]
 8015494:	3301      	adds	r3, #1
 8015496:	75fb      	strb	r3, [r7, #23]
 8015498:	7dfa      	ldrb	r2, [r7, #23]
 801549a:	79fb      	ldrb	r3, [r7, #7]
 801549c:	429a      	cmp	r2, r3
 801549e:	d3d3      	bcc.n	8015448 <IntToUnicode+0x18>
  }
}
 80154a0:	bf00      	nop
 80154a2:	371c      	adds	r7, #28
 80154a4:	46bd      	mov	sp, r7
 80154a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154aa:	4770      	bx	lr

080154ac <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80154ac:	b580      	push	{r7, lr}
 80154ae:	b08a      	sub	sp, #40	; 0x28
 80154b0:	af00      	add	r7, sp, #0
 80154b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80154b4:	f107 0314 	add.w	r3, r7, #20
 80154b8:	2200      	movs	r2, #0
 80154ba:	601a      	str	r2, [r3, #0]
 80154bc:	605a      	str	r2, [r3, #4]
 80154be:	609a      	str	r2, [r3, #8]
 80154c0:	60da      	str	r2, [r3, #12]
 80154c2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80154c4:	687b      	ldr	r3, [r7, #4]
 80154c6:	681b      	ldr	r3, [r3, #0]
 80154c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80154cc:	d13a      	bne.n	8015544 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80154ce:	2300      	movs	r3, #0
 80154d0:	613b      	str	r3, [r7, #16]
 80154d2:	4b1e      	ldr	r3, [pc, #120]	; (801554c <HAL_PCD_MspInit+0xa0>)
 80154d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80154d6:	4a1d      	ldr	r2, [pc, #116]	; (801554c <HAL_PCD_MspInit+0xa0>)
 80154d8:	f043 0301 	orr.w	r3, r3, #1
 80154dc:	6313      	str	r3, [r2, #48]	; 0x30
 80154de:	4b1b      	ldr	r3, [pc, #108]	; (801554c <HAL_PCD_MspInit+0xa0>)
 80154e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80154e2:	f003 0301 	and.w	r3, r3, #1
 80154e6:	613b      	str	r3, [r7, #16]
 80154e8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80154ea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80154ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80154f0:	2302      	movs	r3, #2
 80154f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80154f4:	2300      	movs	r3, #0
 80154f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80154f8:	2303      	movs	r3, #3
 80154fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80154fc:	230a      	movs	r3, #10
 80154fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015500:	f107 0314 	add.w	r3, r7, #20
 8015504:	4619      	mov	r1, r3
 8015506:	4812      	ldr	r0, [pc, #72]	; (8015550 <HAL_PCD_MspInit+0xa4>)
 8015508:	f7f6 fb34 	bl	800bb74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801550c:	4b0f      	ldr	r3, [pc, #60]	; (801554c <HAL_PCD_MspInit+0xa0>)
 801550e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015510:	4a0e      	ldr	r2, [pc, #56]	; (801554c <HAL_PCD_MspInit+0xa0>)
 8015512:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015516:	6353      	str	r3, [r2, #52]	; 0x34
 8015518:	2300      	movs	r3, #0
 801551a:	60fb      	str	r3, [r7, #12]
 801551c:	4b0b      	ldr	r3, [pc, #44]	; (801554c <HAL_PCD_MspInit+0xa0>)
 801551e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015520:	4a0a      	ldr	r2, [pc, #40]	; (801554c <HAL_PCD_MspInit+0xa0>)
 8015522:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8015526:	6453      	str	r3, [r2, #68]	; 0x44
 8015528:	4b08      	ldr	r3, [pc, #32]	; (801554c <HAL_PCD_MspInit+0xa0>)
 801552a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801552c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015530:	60fb      	str	r3, [r7, #12]
 8015532:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8015534:	2200      	movs	r2, #0
 8015536:	2105      	movs	r1, #5
 8015538:	2043      	movs	r0, #67	; 0x43
 801553a:	f7f5 ff53 	bl	800b3e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801553e:	2043      	movs	r0, #67	; 0x43
 8015540:	f7f5 ff6c 	bl	800b41c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8015544:	bf00      	nop
 8015546:	3728      	adds	r7, #40	; 0x28
 8015548:	46bd      	mov	sp, r7
 801554a:	bd80      	pop	{r7, pc}
 801554c:	40023800 	.word	0x40023800
 8015550:	40020000 	.word	0x40020000

08015554 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015554:	b580      	push	{r7, lr}
 8015556:	b082      	sub	sp, #8
 8015558:	af00      	add	r7, sp, #0
 801555a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801555c:	687b      	ldr	r3, [r7, #4]
 801555e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8015562:	687b      	ldr	r3, [r7, #4]
 8015564:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8015568:	4619      	mov	r1, r3
 801556a:	4610      	mov	r0, r2
 801556c:	f7fb fbf6 	bl	8010d5c <USBD_LL_SetupStage>
}
 8015570:	bf00      	nop
 8015572:	3708      	adds	r7, #8
 8015574:	46bd      	mov	sp, r7
 8015576:	bd80      	pop	{r7, pc}

08015578 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015578:	b580      	push	{r7, lr}
 801557a:	b082      	sub	sp, #8
 801557c:	af00      	add	r7, sp, #0
 801557e:	6078      	str	r0, [r7, #4]
 8015580:	460b      	mov	r3, r1
 8015582:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8015584:	687b      	ldr	r3, [r7, #4]
 8015586:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801558a:	78fa      	ldrb	r2, [r7, #3]
 801558c:	6879      	ldr	r1, [r7, #4]
 801558e:	4613      	mov	r3, r2
 8015590:	00db      	lsls	r3, r3, #3
 8015592:	1a9b      	subs	r3, r3, r2
 8015594:	009b      	lsls	r3, r3, #2
 8015596:	440b      	add	r3, r1
 8015598:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801559c:	681a      	ldr	r2, [r3, #0]
 801559e:	78fb      	ldrb	r3, [r7, #3]
 80155a0:	4619      	mov	r1, r3
 80155a2:	f7fb fc26 	bl	8010df2 <USBD_LL_DataOutStage>
}
 80155a6:	bf00      	nop
 80155a8:	3708      	adds	r7, #8
 80155aa:	46bd      	mov	sp, r7
 80155ac:	bd80      	pop	{r7, pc}

080155ae <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80155ae:	b580      	push	{r7, lr}
 80155b0:	b082      	sub	sp, #8
 80155b2:	af00      	add	r7, sp, #0
 80155b4:	6078      	str	r0, [r7, #4]
 80155b6:	460b      	mov	r3, r1
 80155b8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80155ba:	687b      	ldr	r3, [r7, #4]
 80155bc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80155c0:	78fa      	ldrb	r2, [r7, #3]
 80155c2:	6879      	ldr	r1, [r7, #4]
 80155c4:	4613      	mov	r3, r2
 80155c6:	00db      	lsls	r3, r3, #3
 80155c8:	1a9b      	subs	r3, r3, r2
 80155ca:	009b      	lsls	r3, r3, #2
 80155cc:	440b      	add	r3, r1
 80155ce:	3348      	adds	r3, #72	; 0x48
 80155d0:	681a      	ldr	r2, [r3, #0]
 80155d2:	78fb      	ldrb	r3, [r7, #3]
 80155d4:	4619      	mov	r1, r3
 80155d6:	f7fb fc7d 	bl	8010ed4 <USBD_LL_DataInStage>
}
 80155da:	bf00      	nop
 80155dc:	3708      	adds	r7, #8
 80155de:	46bd      	mov	sp, r7
 80155e0:	bd80      	pop	{r7, pc}

080155e2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80155e2:	b580      	push	{r7, lr}
 80155e4:	b082      	sub	sp, #8
 80155e6:	af00      	add	r7, sp, #0
 80155e8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80155f0:	4618      	mov	r0, r3
 80155f2:	f7fb fd8b 	bl	801110c <USBD_LL_SOF>
}
 80155f6:	bf00      	nop
 80155f8:	3708      	adds	r7, #8
 80155fa:	46bd      	mov	sp, r7
 80155fc:	bd80      	pop	{r7, pc}

080155fe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 80155fe:	b580      	push	{r7, lr}
 8015600:	b084      	sub	sp, #16
 8015602:	af00      	add	r7, sp, #0
 8015604:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8015606:	2301      	movs	r3, #1
 8015608:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801560a:	687b      	ldr	r3, [r7, #4]
 801560c:	68db      	ldr	r3, [r3, #12]
 801560e:	2b00      	cmp	r3, #0
 8015610:	d102      	bne.n	8015618 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8015612:	2300      	movs	r3, #0
 8015614:	73fb      	strb	r3, [r7, #15]
 8015616:	e008      	b.n	801562a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	68db      	ldr	r3, [r3, #12]
 801561c:	2b02      	cmp	r3, #2
 801561e:	d102      	bne.n	8015626 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8015620:	2301      	movs	r3, #1
 8015622:	73fb      	strb	r3, [r7, #15]
 8015624:	e001      	b.n	801562a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8015626:	f7ee fa8f 	bl	8003b48 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801562a:	687b      	ldr	r3, [r7, #4]
 801562c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015630:	7bfa      	ldrb	r2, [r7, #15]
 8015632:	4611      	mov	r1, r2
 8015634:	4618      	mov	r0, r3
 8015636:	f7fb fd33 	bl	80110a0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801563a:	687b      	ldr	r3, [r7, #4]
 801563c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015640:	4618      	mov	r0, r3
 8015642:	f7fb fcec 	bl	801101e <USBD_LL_Reset>
}
 8015646:	bf00      	nop
 8015648:	3710      	adds	r7, #16
 801564a:	46bd      	mov	sp, r7
 801564c:	bd80      	pop	{r7, pc}
	...

08015650 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015650:	b580      	push	{r7, lr}
 8015652:	b082      	sub	sp, #8
 8015654:	af00      	add	r7, sp, #0
 8015656:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8015658:	687b      	ldr	r3, [r7, #4]
 801565a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801565e:	4618      	mov	r0, r3
 8015660:	f7fb fd2e 	bl	80110c0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8015664:	687b      	ldr	r3, [r7, #4]
 8015666:	681b      	ldr	r3, [r3, #0]
 8015668:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801566c:	681b      	ldr	r3, [r3, #0]
 801566e:	687a      	ldr	r2, [r7, #4]
 8015670:	6812      	ldr	r2, [r2, #0]
 8015672:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8015676:	f043 0301 	orr.w	r3, r3, #1
 801567a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801567c:	687b      	ldr	r3, [r7, #4]
 801567e:	6a1b      	ldr	r3, [r3, #32]
 8015680:	2b00      	cmp	r3, #0
 8015682:	d005      	beq.n	8015690 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015684:	4b04      	ldr	r3, [pc, #16]	; (8015698 <HAL_PCD_SuspendCallback+0x48>)
 8015686:	691b      	ldr	r3, [r3, #16]
 8015688:	4a03      	ldr	r2, [pc, #12]	; (8015698 <HAL_PCD_SuspendCallback+0x48>)
 801568a:	f043 0306 	orr.w	r3, r3, #6
 801568e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8015690:	bf00      	nop
 8015692:	3708      	adds	r7, #8
 8015694:	46bd      	mov	sp, r7
 8015696:	bd80      	pop	{r7, pc}
 8015698:	e000ed00 	.word	0xe000ed00

0801569c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801569c:	b580      	push	{r7, lr}
 801569e:	b082      	sub	sp, #8
 80156a0:	af00      	add	r7, sp, #0
 80156a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80156aa:	4618      	mov	r0, r3
 80156ac:	f7fb fd1d 	bl	80110ea <USBD_LL_Resume>
}
 80156b0:	bf00      	nop
 80156b2:	3708      	adds	r7, #8
 80156b4:	46bd      	mov	sp, r7
 80156b6:	bd80      	pop	{r7, pc}

080156b8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80156b8:	b580      	push	{r7, lr}
 80156ba:	b082      	sub	sp, #8
 80156bc:	af00      	add	r7, sp, #0
 80156be:	6078      	str	r0, [r7, #4]
 80156c0:	460b      	mov	r3, r1
 80156c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80156c4:	687b      	ldr	r3, [r7, #4]
 80156c6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80156ca:	78fa      	ldrb	r2, [r7, #3]
 80156cc:	4611      	mov	r1, r2
 80156ce:	4618      	mov	r0, r3
 80156d0:	f7fb fd43 	bl	801115a <USBD_LL_IsoOUTIncomplete>
}
 80156d4:	bf00      	nop
 80156d6:	3708      	adds	r7, #8
 80156d8:	46bd      	mov	sp, r7
 80156da:	bd80      	pop	{r7, pc}

080156dc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80156dc:	b580      	push	{r7, lr}
 80156de:	b082      	sub	sp, #8
 80156e0:	af00      	add	r7, sp, #0
 80156e2:	6078      	str	r0, [r7, #4]
 80156e4:	460b      	mov	r3, r1
 80156e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80156e8:	687b      	ldr	r3, [r7, #4]
 80156ea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80156ee:	78fa      	ldrb	r2, [r7, #3]
 80156f0:	4611      	mov	r1, r2
 80156f2:	4618      	mov	r0, r3
 80156f4:	f7fb fd24 	bl	8011140 <USBD_LL_IsoINIncomplete>
}
 80156f8:	bf00      	nop
 80156fa:	3708      	adds	r7, #8
 80156fc:	46bd      	mov	sp, r7
 80156fe:	bd80      	pop	{r7, pc}

08015700 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015700:	b580      	push	{r7, lr}
 8015702:	b082      	sub	sp, #8
 8015704:	af00      	add	r7, sp, #0
 8015706:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801570e:	4618      	mov	r0, r3
 8015710:	f7fb fd30 	bl	8011174 <USBD_LL_DevConnected>
}
 8015714:	bf00      	nop
 8015716:	3708      	adds	r7, #8
 8015718:	46bd      	mov	sp, r7
 801571a:	bd80      	pop	{r7, pc}

0801571c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801571c:	b580      	push	{r7, lr}
 801571e:	b082      	sub	sp, #8
 8015720:	af00      	add	r7, sp, #0
 8015722:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8015724:	687b      	ldr	r3, [r7, #4]
 8015726:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801572a:	4618      	mov	r0, r3
 801572c:	f7fb fd2d 	bl	801118a <USBD_LL_DevDisconnected>
}
 8015730:	bf00      	nop
 8015732:	3708      	adds	r7, #8
 8015734:	46bd      	mov	sp, r7
 8015736:	bd80      	pop	{r7, pc}

08015738 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8015738:	b580      	push	{r7, lr}
 801573a:	b082      	sub	sp, #8
 801573c:	af00      	add	r7, sp, #0
 801573e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	781b      	ldrb	r3, [r3, #0]
 8015744:	2b00      	cmp	r3, #0
 8015746:	d13c      	bne.n	80157c2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8015748:	4a20      	ldr	r2, [pc, #128]	; (80157cc <USBD_LL_Init+0x94>)
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	4a1e      	ldr	r2, [pc, #120]	; (80157cc <USBD_LL_Init+0x94>)
 8015754:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8015758:	4b1c      	ldr	r3, [pc, #112]	; (80157cc <USBD_LL_Init+0x94>)
 801575a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801575e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8015760:	4b1a      	ldr	r3, [pc, #104]	; (80157cc <USBD_LL_Init+0x94>)
 8015762:	2204      	movs	r2, #4
 8015764:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8015766:	4b19      	ldr	r3, [pc, #100]	; (80157cc <USBD_LL_Init+0x94>)
 8015768:	2202      	movs	r2, #2
 801576a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801576c:	4b17      	ldr	r3, [pc, #92]	; (80157cc <USBD_LL_Init+0x94>)
 801576e:	2200      	movs	r2, #0
 8015770:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8015772:	4b16      	ldr	r3, [pc, #88]	; (80157cc <USBD_LL_Init+0x94>)
 8015774:	2202      	movs	r2, #2
 8015776:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8015778:	4b14      	ldr	r3, [pc, #80]	; (80157cc <USBD_LL_Init+0x94>)
 801577a:	2200      	movs	r2, #0
 801577c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801577e:	4b13      	ldr	r3, [pc, #76]	; (80157cc <USBD_LL_Init+0x94>)
 8015780:	2200      	movs	r2, #0
 8015782:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8015784:	4b11      	ldr	r3, [pc, #68]	; (80157cc <USBD_LL_Init+0x94>)
 8015786:	2200      	movs	r2, #0
 8015788:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801578a:	4b10      	ldr	r3, [pc, #64]	; (80157cc <USBD_LL_Init+0x94>)
 801578c:	2200      	movs	r2, #0
 801578e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8015790:	4b0e      	ldr	r3, [pc, #56]	; (80157cc <USBD_LL_Init+0x94>)
 8015792:	2200      	movs	r2, #0
 8015794:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8015796:	480d      	ldr	r0, [pc, #52]	; (80157cc <USBD_LL_Init+0x94>)
 8015798:	f7f6 fbf6 	bl	800bf88 <HAL_PCD_Init>
 801579c:	4603      	mov	r3, r0
 801579e:	2b00      	cmp	r3, #0
 80157a0:	d001      	beq.n	80157a6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80157a2:	f7ee f9d1 	bl	8003b48 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80157a6:	2180      	movs	r1, #128	; 0x80
 80157a8:	4808      	ldr	r0, [pc, #32]	; (80157cc <USBD_LL_Init+0x94>)
 80157aa:	f7f7 fd5a 	bl	800d262 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80157ae:	2240      	movs	r2, #64	; 0x40
 80157b0:	2100      	movs	r1, #0
 80157b2:	4806      	ldr	r0, [pc, #24]	; (80157cc <USBD_LL_Init+0x94>)
 80157b4:	f7f7 fd0e 	bl	800d1d4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80157b8:	2280      	movs	r2, #128	; 0x80
 80157ba:	2101      	movs	r1, #1
 80157bc:	4803      	ldr	r0, [pc, #12]	; (80157cc <USBD_LL_Init+0x94>)
 80157be:	f7f7 fd09 	bl	800d1d4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80157c2:	2300      	movs	r3, #0
}
 80157c4:	4618      	mov	r0, r3
 80157c6:	3708      	adds	r7, #8
 80157c8:	46bd      	mov	sp, r7
 80157ca:	bd80      	pop	{r7, pc}
 80157cc:	20006a80 	.word	0x20006a80

080157d0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80157d0:	b580      	push	{r7, lr}
 80157d2:	b084      	sub	sp, #16
 80157d4:	af00      	add	r7, sp, #0
 80157d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80157d8:	2300      	movs	r3, #0
 80157da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80157dc:	2300      	movs	r3, #0
 80157de:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80157e0:	687b      	ldr	r3, [r7, #4]
 80157e2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80157e6:	4618      	mov	r0, r3
 80157e8:	f7f6 fceb 	bl	800c1c2 <HAL_PCD_Start>
 80157ec:	4603      	mov	r3, r0
 80157ee:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 80157f0:	7bfb      	ldrb	r3, [r7, #15]
 80157f2:	4618      	mov	r0, r3
 80157f4:	f000 f92e 	bl	8015a54 <USBD_Get_USB_Status>
 80157f8:	4603      	mov	r3, r0
 80157fa:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80157fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80157fe:	4618      	mov	r0, r3
 8015800:	3710      	adds	r7, #16
 8015802:	46bd      	mov	sp, r7
 8015804:	bd80      	pop	{r7, pc}

08015806 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8015806:	b580      	push	{r7, lr}
 8015808:	b084      	sub	sp, #16
 801580a:	af00      	add	r7, sp, #0
 801580c:	6078      	str	r0, [r7, #4]
 801580e:	4608      	mov	r0, r1
 8015810:	4611      	mov	r1, r2
 8015812:	461a      	mov	r2, r3
 8015814:	4603      	mov	r3, r0
 8015816:	70fb      	strb	r3, [r7, #3]
 8015818:	460b      	mov	r3, r1
 801581a:	70bb      	strb	r3, [r7, #2]
 801581c:	4613      	mov	r3, r2
 801581e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015820:	2300      	movs	r3, #0
 8015822:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015824:	2300      	movs	r3, #0
 8015826:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8015828:	687b      	ldr	r3, [r7, #4]
 801582a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 801582e:	78bb      	ldrb	r3, [r7, #2]
 8015830:	883a      	ldrh	r2, [r7, #0]
 8015832:	78f9      	ldrb	r1, [r7, #3]
 8015834:	f7f7 f8c0 	bl	800c9b8 <HAL_PCD_EP_Open>
 8015838:	4603      	mov	r3, r0
 801583a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801583c:	7bfb      	ldrb	r3, [r7, #15]
 801583e:	4618      	mov	r0, r3
 8015840:	f000 f908 	bl	8015a54 <USBD_Get_USB_Status>
 8015844:	4603      	mov	r3, r0
 8015846:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8015848:	7bbb      	ldrb	r3, [r7, #14]
}
 801584a:	4618      	mov	r0, r3
 801584c:	3710      	adds	r7, #16
 801584e:	46bd      	mov	sp, r7
 8015850:	bd80      	pop	{r7, pc}

08015852 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015852:	b580      	push	{r7, lr}
 8015854:	b084      	sub	sp, #16
 8015856:	af00      	add	r7, sp, #0
 8015858:	6078      	str	r0, [r7, #4]
 801585a:	460b      	mov	r3, r1
 801585c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801585e:	2300      	movs	r3, #0
 8015860:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015862:	2300      	movs	r3, #0
 8015864:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8015866:	687b      	ldr	r3, [r7, #4]
 8015868:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801586c:	78fa      	ldrb	r2, [r7, #3]
 801586e:	4611      	mov	r1, r2
 8015870:	4618      	mov	r0, r3
 8015872:	f7f7 f909 	bl	800ca88 <HAL_PCD_EP_Close>
 8015876:	4603      	mov	r3, r0
 8015878:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 801587a:	7bfb      	ldrb	r3, [r7, #15]
 801587c:	4618      	mov	r0, r3
 801587e:	f000 f8e9 	bl	8015a54 <USBD_Get_USB_Status>
 8015882:	4603      	mov	r3, r0
 8015884:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8015886:	7bbb      	ldrb	r3, [r7, #14]
}
 8015888:	4618      	mov	r0, r3
 801588a:	3710      	adds	r7, #16
 801588c:	46bd      	mov	sp, r7
 801588e:	bd80      	pop	{r7, pc}

08015890 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015890:	b580      	push	{r7, lr}
 8015892:	b084      	sub	sp, #16
 8015894:	af00      	add	r7, sp, #0
 8015896:	6078      	str	r0, [r7, #4]
 8015898:	460b      	mov	r3, r1
 801589a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801589c:	2300      	movs	r3, #0
 801589e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80158a0:	2300      	movs	r3, #0
 80158a2:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80158a4:	687b      	ldr	r3, [r7, #4]
 80158a6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80158aa:	78fa      	ldrb	r2, [r7, #3]
 80158ac:	4611      	mov	r1, r2
 80158ae:	4618      	mov	r0, r3
 80158b0:	f7f7 f9e1 	bl	800cc76 <HAL_PCD_EP_SetStall>
 80158b4:	4603      	mov	r3, r0
 80158b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80158b8:	7bfb      	ldrb	r3, [r7, #15]
 80158ba:	4618      	mov	r0, r3
 80158bc:	f000 f8ca 	bl	8015a54 <USBD_Get_USB_Status>
 80158c0:	4603      	mov	r3, r0
 80158c2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 80158c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80158c6:	4618      	mov	r0, r3
 80158c8:	3710      	adds	r7, #16
 80158ca:	46bd      	mov	sp, r7
 80158cc:	bd80      	pop	{r7, pc}

080158ce <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80158ce:	b580      	push	{r7, lr}
 80158d0:	b084      	sub	sp, #16
 80158d2:	af00      	add	r7, sp, #0
 80158d4:	6078      	str	r0, [r7, #4]
 80158d6:	460b      	mov	r3, r1
 80158d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80158da:	2300      	movs	r3, #0
 80158dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80158de:	2300      	movs	r3, #0
 80158e0:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80158e2:	687b      	ldr	r3, [r7, #4]
 80158e4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80158e8:	78fa      	ldrb	r2, [r7, #3]
 80158ea:	4611      	mov	r1, r2
 80158ec:	4618      	mov	r0, r3
 80158ee:	f7f7 fa26 	bl	800cd3e <HAL_PCD_EP_ClrStall>
 80158f2:	4603      	mov	r3, r0
 80158f4:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 80158f6:	7bfb      	ldrb	r3, [r7, #15]
 80158f8:	4618      	mov	r0, r3
 80158fa:	f000 f8ab 	bl	8015a54 <USBD_Get_USB_Status>
 80158fe:	4603      	mov	r3, r0
 8015900:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8015902:	7bbb      	ldrb	r3, [r7, #14]
}
 8015904:	4618      	mov	r0, r3
 8015906:	3710      	adds	r7, #16
 8015908:	46bd      	mov	sp, r7
 801590a:	bd80      	pop	{r7, pc}

0801590c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801590c:	b480      	push	{r7}
 801590e:	b085      	sub	sp, #20
 8015910:	af00      	add	r7, sp, #0
 8015912:	6078      	str	r0, [r7, #4]
 8015914:	460b      	mov	r3, r1
 8015916:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8015918:	687b      	ldr	r3, [r7, #4]
 801591a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801591e:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8015920:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015924:	2b00      	cmp	r3, #0
 8015926:	da0b      	bge.n	8015940 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8015928:	78fb      	ldrb	r3, [r7, #3]
 801592a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801592e:	68f9      	ldr	r1, [r7, #12]
 8015930:	4613      	mov	r3, r2
 8015932:	00db      	lsls	r3, r3, #3
 8015934:	1a9b      	subs	r3, r3, r2
 8015936:	009b      	lsls	r3, r3, #2
 8015938:	440b      	add	r3, r1
 801593a:	333e      	adds	r3, #62	; 0x3e
 801593c:	781b      	ldrb	r3, [r3, #0]
 801593e:	e00b      	b.n	8015958 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8015940:	78fb      	ldrb	r3, [r7, #3]
 8015942:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015946:	68f9      	ldr	r1, [r7, #12]
 8015948:	4613      	mov	r3, r2
 801594a:	00db      	lsls	r3, r3, #3
 801594c:	1a9b      	subs	r3, r3, r2
 801594e:	009b      	lsls	r3, r3, #2
 8015950:	440b      	add	r3, r1
 8015952:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8015956:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015958:	4618      	mov	r0, r3
 801595a:	3714      	adds	r7, #20
 801595c:	46bd      	mov	sp, r7
 801595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015962:	4770      	bx	lr

08015964 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015964:	b580      	push	{r7, lr}
 8015966:	b084      	sub	sp, #16
 8015968:	af00      	add	r7, sp, #0
 801596a:	6078      	str	r0, [r7, #4]
 801596c:	460b      	mov	r3, r1
 801596e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015970:	2300      	movs	r3, #0
 8015972:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015974:	2300      	movs	r3, #0
 8015976:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015978:	687b      	ldr	r3, [r7, #4]
 801597a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801597e:	78fa      	ldrb	r2, [r7, #3]
 8015980:	4611      	mov	r1, r2
 8015982:	4618      	mov	r0, r3
 8015984:	f7f6 fff3 	bl	800c96e <HAL_PCD_SetAddress>
 8015988:	4603      	mov	r3, r0
 801598a:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 801598c:	7bfb      	ldrb	r3, [r7, #15]
 801598e:	4618      	mov	r0, r3
 8015990:	f000 f860 	bl	8015a54 <USBD_Get_USB_Status>
 8015994:	4603      	mov	r3, r0
 8015996:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8015998:	7bbb      	ldrb	r3, [r7, #14]
}
 801599a:	4618      	mov	r0, r3
 801599c:	3710      	adds	r7, #16
 801599e:	46bd      	mov	sp, r7
 80159a0:	bd80      	pop	{r7, pc}

080159a2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80159a2:	b580      	push	{r7, lr}
 80159a4:	b086      	sub	sp, #24
 80159a6:	af00      	add	r7, sp, #0
 80159a8:	60f8      	str	r0, [r7, #12]
 80159aa:	607a      	str	r2, [r7, #4]
 80159ac:	461a      	mov	r2, r3
 80159ae:	460b      	mov	r3, r1
 80159b0:	72fb      	strb	r3, [r7, #11]
 80159b2:	4613      	mov	r3, r2
 80159b4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80159b6:	2300      	movs	r3, #0
 80159b8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80159ba:	2300      	movs	r3, #0
 80159bc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80159be:	68fb      	ldr	r3, [r7, #12]
 80159c0:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80159c4:	893b      	ldrh	r3, [r7, #8]
 80159c6:	7af9      	ldrb	r1, [r7, #11]
 80159c8:	687a      	ldr	r2, [r7, #4]
 80159ca:	f7f7 f90a 	bl	800cbe2 <HAL_PCD_EP_Transmit>
 80159ce:	4603      	mov	r3, r0
 80159d0:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 80159d2:	7dfb      	ldrb	r3, [r7, #23]
 80159d4:	4618      	mov	r0, r3
 80159d6:	f000 f83d 	bl	8015a54 <USBD_Get_USB_Status>
 80159da:	4603      	mov	r3, r0
 80159dc:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 80159de:	7dbb      	ldrb	r3, [r7, #22]
}
 80159e0:	4618      	mov	r0, r3
 80159e2:	3718      	adds	r7, #24
 80159e4:	46bd      	mov	sp, r7
 80159e6:	bd80      	pop	{r7, pc}

080159e8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80159e8:	b580      	push	{r7, lr}
 80159ea:	b086      	sub	sp, #24
 80159ec:	af00      	add	r7, sp, #0
 80159ee:	60f8      	str	r0, [r7, #12]
 80159f0:	607a      	str	r2, [r7, #4]
 80159f2:	461a      	mov	r2, r3
 80159f4:	460b      	mov	r3, r1
 80159f6:	72fb      	strb	r3, [r7, #11]
 80159f8:	4613      	mov	r3, r2
 80159fa:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80159fc:	2300      	movs	r3, #0
 80159fe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015a00:	2300      	movs	r3, #0
 8015a02:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8015a04:	68fb      	ldr	r3, [r7, #12]
 8015a06:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8015a0a:	893b      	ldrh	r3, [r7, #8]
 8015a0c:	7af9      	ldrb	r1, [r7, #11]
 8015a0e:	687a      	ldr	r2, [r7, #4]
 8015a10:	f7f7 f884 	bl	800cb1c <HAL_PCD_EP_Receive>
 8015a14:	4603      	mov	r3, r0
 8015a16:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8015a18:	7dfb      	ldrb	r3, [r7, #23]
 8015a1a:	4618      	mov	r0, r3
 8015a1c:	f000 f81a 	bl	8015a54 <USBD_Get_USB_Status>
 8015a20:	4603      	mov	r3, r0
 8015a22:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8015a24:	7dbb      	ldrb	r3, [r7, #22]
}
 8015a26:	4618      	mov	r0, r3
 8015a28:	3718      	adds	r7, #24
 8015a2a:	46bd      	mov	sp, r7
 8015a2c:	bd80      	pop	{r7, pc}

08015a2e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015a2e:	b580      	push	{r7, lr}
 8015a30:	b082      	sub	sp, #8
 8015a32:	af00      	add	r7, sp, #0
 8015a34:	6078      	str	r0, [r7, #4]
 8015a36:	460b      	mov	r3, r1
 8015a38:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8015a3a:	687b      	ldr	r3, [r7, #4]
 8015a3c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8015a40:	78fa      	ldrb	r2, [r7, #3]
 8015a42:	4611      	mov	r1, r2
 8015a44:	4618      	mov	r0, r3
 8015a46:	f7f7 f8b4 	bl	800cbb2 <HAL_PCD_EP_GetRxCount>
 8015a4a:	4603      	mov	r3, r0
}
 8015a4c:	4618      	mov	r0, r3
 8015a4e:	3708      	adds	r7, #8
 8015a50:	46bd      	mov	sp, r7
 8015a52:	bd80      	pop	{r7, pc}

08015a54 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015a54:	b480      	push	{r7}
 8015a56:	b085      	sub	sp, #20
 8015a58:	af00      	add	r7, sp, #0
 8015a5a:	4603      	mov	r3, r0
 8015a5c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015a5e:	2300      	movs	r3, #0
 8015a60:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8015a62:	79fb      	ldrb	r3, [r7, #7]
 8015a64:	2b03      	cmp	r3, #3
 8015a66:	d817      	bhi.n	8015a98 <USBD_Get_USB_Status+0x44>
 8015a68:	a201      	add	r2, pc, #4	; (adr r2, 8015a70 <USBD_Get_USB_Status+0x1c>)
 8015a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015a6e:	bf00      	nop
 8015a70:	08015a81 	.word	0x08015a81
 8015a74:	08015a87 	.word	0x08015a87
 8015a78:	08015a8d 	.word	0x08015a8d
 8015a7c:	08015a93 	.word	0x08015a93
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015a80:	2300      	movs	r3, #0
 8015a82:	73fb      	strb	r3, [r7, #15]
    break;
 8015a84:	e00b      	b.n	8015a9e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015a86:	2302      	movs	r3, #2
 8015a88:	73fb      	strb	r3, [r7, #15]
    break;
 8015a8a:	e008      	b.n	8015a9e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015a8c:	2301      	movs	r3, #1
 8015a8e:	73fb      	strb	r3, [r7, #15]
    break;
 8015a90:	e005      	b.n	8015a9e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015a92:	2302      	movs	r3, #2
 8015a94:	73fb      	strb	r3, [r7, #15]
    break;
 8015a96:	e002      	b.n	8015a9e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8015a98:	2302      	movs	r3, #2
 8015a9a:	73fb      	strb	r3, [r7, #15]
    break;
 8015a9c:	bf00      	nop
  }
  return usb_status;
 8015a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015aa0:	4618      	mov	r0, r3
 8015aa2:	3714      	adds	r7, #20
 8015aa4:	46bd      	mov	sp, r7
 8015aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015aaa:	4770      	bx	lr

08015aac <__errno>:
 8015aac:	4b01      	ldr	r3, [pc, #4]	; (8015ab4 <__errno+0x8>)
 8015aae:	6818      	ldr	r0, [r3, #0]
 8015ab0:	4770      	bx	lr
 8015ab2:	bf00      	nop
 8015ab4:	20000e60 	.word	0x20000e60

08015ab8 <__libc_init_array>:
 8015ab8:	b570      	push	{r4, r5, r6, lr}
 8015aba:	4e0d      	ldr	r6, [pc, #52]	; (8015af0 <__libc_init_array+0x38>)
 8015abc:	4c0d      	ldr	r4, [pc, #52]	; (8015af4 <__libc_init_array+0x3c>)
 8015abe:	1ba4      	subs	r4, r4, r6
 8015ac0:	10a4      	asrs	r4, r4, #2
 8015ac2:	2500      	movs	r5, #0
 8015ac4:	42a5      	cmp	r5, r4
 8015ac6:	d109      	bne.n	8015adc <__libc_init_array+0x24>
 8015ac8:	4e0b      	ldr	r6, [pc, #44]	; (8015af8 <__libc_init_array+0x40>)
 8015aca:	4c0c      	ldr	r4, [pc, #48]	; (8015afc <__libc_init_array+0x44>)
 8015acc:	f005 fece 	bl	801b86c <_init>
 8015ad0:	1ba4      	subs	r4, r4, r6
 8015ad2:	10a4      	asrs	r4, r4, #2
 8015ad4:	2500      	movs	r5, #0
 8015ad6:	42a5      	cmp	r5, r4
 8015ad8:	d105      	bne.n	8015ae6 <__libc_init_array+0x2e>
 8015ada:	bd70      	pop	{r4, r5, r6, pc}
 8015adc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015ae0:	4798      	blx	r3
 8015ae2:	3501      	adds	r5, #1
 8015ae4:	e7ee      	b.n	8015ac4 <__libc_init_array+0xc>
 8015ae6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015aea:	4798      	blx	r3
 8015aec:	3501      	adds	r5, #1
 8015aee:	e7f2      	b.n	8015ad6 <__libc_init_array+0x1e>
 8015af0:	0801c3d8 	.word	0x0801c3d8
 8015af4:	0801c3d8 	.word	0x0801c3d8
 8015af8:	0801c3d8 	.word	0x0801c3d8
 8015afc:	0801c3dc 	.word	0x0801c3dc

08015b00 <malloc>:
 8015b00:	4b02      	ldr	r3, [pc, #8]	; (8015b0c <malloc+0xc>)
 8015b02:	4601      	mov	r1, r0
 8015b04:	6818      	ldr	r0, [r3, #0]
 8015b06:	f000 b885 	b.w	8015c14 <_malloc_r>
 8015b0a:	bf00      	nop
 8015b0c:	20000e60 	.word	0x20000e60

08015b10 <free>:
 8015b10:	4b02      	ldr	r3, [pc, #8]	; (8015b1c <free+0xc>)
 8015b12:	4601      	mov	r1, r0
 8015b14:	6818      	ldr	r0, [r3, #0]
 8015b16:	f000 b82f 	b.w	8015b78 <_free_r>
 8015b1a:	bf00      	nop
 8015b1c:	20000e60 	.word	0x20000e60

08015b20 <memcpy>:
 8015b20:	b510      	push	{r4, lr}
 8015b22:	1e43      	subs	r3, r0, #1
 8015b24:	440a      	add	r2, r1
 8015b26:	4291      	cmp	r1, r2
 8015b28:	d100      	bne.n	8015b2c <memcpy+0xc>
 8015b2a:	bd10      	pop	{r4, pc}
 8015b2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015b30:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015b34:	e7f7      	b.n	8015b26 <memcpy+0x6>

08015b36 <memmove>:
 8015b36:	4288      	cmp	r0, r1
 8015b38:	b510      	push	{r4, lr}
 8015b3a:	eb01 0302 	add.w	r3, r1, r2
 8015b3e:	d807      	bhi.n	8015b50 <memmove+0x1a>
 8015b40:	1e42      	subs	r2, r0, #1
 8015b42:	4299      	cmp	r1, r3
 8015b44:	d00a      	beq.n	8015b5c <memmove+0x26>
 8015b46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015b4a:	f802 4f01 	strb.w	r4, [r2, #1]!
 8015b4e:	e7f8      	b.n	8015b42 <memmove+0xc>
 8015b50:	4283      	cmp	r3, r0
 8015b52:	d9f5      	bls.n	8015b40 <memmove+0xa>
 8015b54:	1881      	adds	r1, r0, r2
 8015b56:	1ad2      	subs	r2, r2, r3
 8015b58:	42d3      	cmn	r3, r2
 8015b5a:	d100      	bne.n	8015b5e <memmove+0x28>
 8015b5c:	bd10      	pop	{r4, pc}
 8015b5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015b62:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8015b66:	e7f7      	b.n	8015b58 <memmove+0x22>

08015b68 <memset>:
 8015b68:	4402      	add	r2, r0
 8015b6a:	4603      	mov	r3, r0
 8015b6c:	4293      	cmp	r3, r2
 8015b6e:	d100      	bne.n	8015b72 <memset+0xa>
 8015b70:	4770      	bx	lr
 8015b72:	f803 1b01 	strb.w	r1, [r3], #1
 8015b76:	e7f9      	b.n	8015b6c <memset+0x4>

08015b78 <_free_r>:
 8015b78:	b538      	push	{r3, r4, r5, lr}
 8015b7a:	4605      	mov	r5, r0
 8015b7c:	2900      	cmp	r1, #0
 8015b7e:	d045      	beq.n	8015c0c <_free_r+0x94>
 8015b80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015b84:	1f0c      	subs	r4, r1, #4
 8015b86:	2b00      	cmp	r3, #0
 8015b88:	bfb8      	it	lt
 8015b8a:	18e4      	addlt	r4, r4, r3
 8015b8c:	f002 ffce 	bl	8018b2c <__malloc_lock>
 8015b90:	4a1f      	ldr	r2, [pc, #124]	; (8015c10 <_free_r+0x98>)
 8015b92:	6813      	ldr	r3, [r2, #0]
 8015b94:	4610      	mov	r0, r2
 8015b96:	b933      	cbnz	r3, 8015ba6 <_free_r+0x2e>
 8015b98:	6063      	str	r3, [r4, #4]
 8015b9a:	6014      	str	r4, [r2, #0]
 8015b9c:	4628      	mov	r0, r5
 8015b9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015ba2:	f002 bfc4 	b.w	8018b2e <__malloc_unlock>
 8015ba6:	42a3      	cmp	r3, r4
 8015ba8:	d90c      	bls.n	8015bc4 <_free_r+0x4c>
 8015baa:	6821      	ldr	r1, [r4, #0]
 8015bac:	1862      	adds	r2, r4, r1
 8015bae:	4293      	cmp	r3, r2
 8015bb0:	bf04      	itt	eq
 8015bb2:	681a      	ldreq	r2, [r3, #0]
 8015bb4:	685b      	ldreq	r3, [r3, #4]
 8015bb6:	6063      	str	r3, [r4, #4]
 8015bb8:	bf04      	itt	eq
 8015bba:	1852      	addeq	r2, r2, r1
 8015bbc:	6022      	streq	r2, [r4, #0]
 8015bbe:	6004      	str	r4, [r0, #0]
 8015bc0:	e7ec      	b.n	8015b9c <_free_r+0x24>
 8015bc2:	4613      	mov	r3, r2
 8015bc4:	685a      	ldr	r2, [r3, #4]
 8015bc6:	b10a      	cbz	r2, 8015bcc <_free_r+0x54>
 8015bc8:	42a2      	cmp	r2, r4
 8015bca:	d9fa      	bls.n	8015bc2 <_free_r+0x4a>
 8015bcc:	6819      	ldr	r1, [r3, #0]
 8015bce:	1858      	adds	r0, r3, r1
 8015bd0:	42a0      	cmp	r0, r4
 8015bd2:	d10b      	bne.n	8015bec <_free_r+0x74>
 8015bd4:	6820      	ldr	r0, [r4, #0]
 8015bd6:	4401      	add	r1, r0
 8015bd8:	1858      	adds	r0, r3, r1
 8015bda:	4282      	cmp	r2, r0
 8015bdc:	6019      	str	r1, [r3, #0]
 8015bde:	d1dd      	bne.n	8015b9c <_free_r+0x24>
 8015be0:	6810      	ldr	r0, [r2, #0]
 8015be2:	6852      	ldr	r2, [r2, #4]
 8015be4:	605a      	str	r2, [r3, #4]
 8015be6:	4401      	add	r1, r0
 8015be8:	6019      	str	r1, [r3, #0]
 8015bea:	e7d7      	b.n	8015b9c <_free_r+0x24>
 8015bec:	d902      	bls.n	8015bf4 <_free_r+0x7c>
 8015bee:	230c      	movs	r3, #12
 8015bf0:	602b      	str	r3, [r5, #0]
 8015bf2:	e7d3      	b.n	8015b9c <_free_r+0x24>
 8015bf4:	6820      	ldr	r0, [r4, #0]
 8015bf6:	1821      	adds	r1, r4, r0
 8015bf8:	428a      	cmp	r2, r1
 8015bfa:	bf04      	itt	eq
 8015bfc:	6811      	ldreq	r1, [r2, #0]
 8015bfe:	6852      	ldreq	r2, [r2, #4]
 8015c00:	6062      	str	r2, [r4, #4]
 8015c02:	bf04      	itt	eq
 8015c04:	1809      	addeq	r1, r1, r0
 8015c06:	6021      	streq	r1, [r4, #0]
 8015c08:	605c      	str	r4, [r3, #4]
 8015c0a:	e7c7      	b.n	8015b9c <_free_r+0x24>
 8015c0c:	bd38      	pop	{r3, r4, r5, pc}
 8015c0e:	bf00      	nop
 8015c10:	20005204 	.word	0x20005204

08015c14 <_malloc_r>:
 8015c14:	b570      	push	{r4, r5, r6, lr}
 8015c16:	1ccd      	adds	r5, r1, #3
 8015c18:	f025 0503 	bic.w	r5, r5, #3
 8015c1c:	3508      	adds	r5, #8
 8015c1e:	2d0c      	cmp	r5, #12
 8015c20:	bf38      	it	cc
 8015c22:	250c      	movcc	r5, #12
 8015c24:	2d00      	cmp	r5, #0
 8015c26:	4606      	mov	r6, r0
 8015c28:	db01      	blt.n	8015c2e <_malloc_r+0x1a>
 8015c2a:	42a9      	cmp	r1, r5
 8015c2c:	d903      	bls.n	8015c36 <_malloc_r+0x22>
 8015c2e:	230c      	movs	r3, #12
 8015c30:	6033      	str	r3, [r6, #0]
 8015c32:	2000      	movs	r0, #0
 8015c34:	bd70      	pop	{r4, r5, r6, pc}
 8015c36:	f002 ff79 	bl	8018b2c <__malloc_lock>
 8015c3a:	4a21      	ldr	r2, [pc, #132]	; (8015cc0 <_malloc_r+0xac>)
 8015c3c:	6814      	ldr	r4, [r2, #0]
 8015c3e:	4621      	mov	r1, r4
 8015c40:	b991      	cbnz	r1, 8015c68 <_malloc_r+0x54>
 8015c42:	4c20      	ldr	r4, [pc, #128]	; (8015cc4 <_malloc_r+0xb0>)
 8015c44:	6823      	ldr	r3, [r4, #0]
 8015c46:	b91b      	cbnz	r3, 8015c50 <_malloc_r+0x3c>
 8015c48:	4630      	mov	r0, r6
 8015c4a:	f000 fe7b 	bl	8016944 <_sbrk_r>
 8015c4e:	6020      	str	r0, [r4, #0]
 8015c50:	4629      	mov	r1, r5
 8015c52:	4630      	mov	r0, r6
 8015c54:	f000 fe76 	bl	8016944 <_sbrk_r>
 8015c58:	1c43      	adds	r3, r0, #1
 8015c5a:	d124      	bne.n	8015ca6 <_malloc_r+0x92>
 8015c5c:	230c      	movs	r3, #12
 8015c5e:	6033      	str	r3, [r6, #0]
 8015c60:	4630      	mov	r0, r6
 8015c62:	f002 ff64 	bl	8018b2e <__malloc_unlock>
 8015c66:	e7e4      	b.n	8015c32 <_malloc_r+0x1e>
 8015c68:	680b      	ldr	r3, [r1, #0]
 8015c6a:	1b5b      	subs	r3, r3, r5
 8015c6c:	d418      	bmi.n	8015ca0 <_malloc_r+0x8c>
 8015c6e:	2b0b      	cmp	r3, #11
 8015c70:	d90f      	bls.n	8015c92 <_malloc_r+0x7e>
 8015c72:	600b      	str	r3, [r1, #0]
 8015c74:	50cd      	str	r5, [r1, r3]
 8015c76:	18cc      	adds	r4, r1, r3
 8015c78:	4630      	mov	r0, r6
 8015c7a:	f002 ff58 	bl	8018b2e <__malloc_unlock>
 8015c7e:	f104 000b 	add.w	r0, r4, #11
 8015c82:	1d23      	adds	r3, r4, #4
 8015c84:	f020 0007 	bic.w	r0, r0, #7
 8015c88:	1ac3      	subs	r3, r0, r3
 8015c8a:	d0d3      	beq.n	8015c34 <_malloc_r+0x20>
 8015c8c:	425a      	negs	r2, r3
 8015c8e:	50e2      	str	r2, [r4, r3]
 8015c90:	e7d0      	b.n	8015c34 <_malloc_r+0x20>
 8015c92:	428c      	cmp	r4, r1
 8015c94:	684b      	ldr	r3, [r1, #4]
 8015c96:	bf16      	itet	ne
 8015c98:	6063      	strne	r3, [r4, #4]
 8015c9a:	6013      	streq	r3, [r2, #0]
 8015c9c:	460c      	movne	r4, r1
 8015c9e:	e7eb      	b.n	8015c78 <_malloc_r+0x64>
 8015ca0:	460c      	mov	r4, r1
 8015ca2:	6849      	ldr	r1, [r1, #4]
 8015ca4:	e7cc      	b.n	8015c40 <_malloc_r+0x2c>
 8015ca6:	1cc4      	adds	r4, r0, #3
 8015ca8:	f024 0403 	bic.w	r4, r4, #3
 8015cac:	42a0      	cmp	r0, r4
 8015cae:	d005      	beq.n	8015cbc <_malloc_r+0xa8>
 8015cb0:	1a21      	subs	r1, r4, r0
 8015cb2:	4630      	mov	r0, r6
 8015cb4:	f000 fe46 	bl	8016944 <_sbrk_r>
 8015cb8:	3001      	adds	r0, #1
 8015cba:	d0cf      	beq.n	8015c5c <_malloc_r+0x48>
 8015cbc:	6025      	str	r5, [r4, #0]
 8015cbe:	e7db      	b.n	8015c78 <_malloc_r+0x64>
 8015cc0:	20005204 	.word	0x20005204
 8015cc4:	20005208 	.word	0x20005208

08015cc8 <__cvt>:
 8015cc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015ccc:	ec55 4b10 	vmov	r4, r5, d0
 8015cd0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8015cd2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8015cd6:	2d00      	cmp	r5, #0
 8015cd8:	460e      	mov	r6, r1
 8015cda:	4691      	mov	r9, r2
 8015cdc:	4619      	mov	r1, r3
 8015cde:	bfb8      	it	lt
 8015ce0:	4622      	movlt	r2, r4
 8015ce2:	462b      	mov	r3, r5
 8015ce4:	f027 0720 	bic.w	r7, r7, #32
 8015ce8:	bfbb      	ittet	lt
 8015cea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8015cee:	461d      	movlt	r5, r3
 8015cf0:	2300      	movge	r3, #0
 8015cf2:	232d      	movlt	r3, #45	; 0x2d
 8015cf4:	bfb8      	it	lt
 8015cf6:	4614      	movlt	r4, r2
 8015cf8:	2f46      	cmp	r7, #70	; 0x46
 8015cfa:	700b      	strb	r3, [r1, #0]
 8015cfc:	d004      	beq.n	8015d08 <__cvt+0x40>
 8015cfe:	2f45      	cmp	r7, #69	; 0x45
 8015d00:	d100      	bne.n	8015d04 <__cvt+0x3c>
 8015d02:	3601      	adds	r6, #1
 8015d04:	2102      	movs	r1, #2
 8015d06:	e000      	b.n	8015d0a <__cvt+0x42>
 8015d08:	2103      	movs	r1, #3
 8015d0a:	ab03      	add	r3, sp, #12
 8015d0c:	9301      	str	r3, [sp, #4]
 8015d0e:	ab02      	add	r3, sp, #8
 8015d10:	9300      	str	r3, [sp, #0]
 8015d12:	4632      	mov	r2, r6
 8015d14:	4653      	mov	r3, sl
 8015d16:	ec45 4b10 	vmov	d0, r4, r5
 8015d1a:	f001 fdf5 	bl	8017908 <_dtoa_r>
 8015d1e:	2f47      	cmp	r7, #71	; 0x47
 8015d20:	4680      	mov	r8, r0
 8015d22:	d102      	bne.n	8015d2a <__cvt+0x62>
 8015d24:	f019 0f01 	tst.w	r9, #1
 8015d28:	d026      	beq.n	8015d78 <__cvt+0xb0>
 8015d2a:	2f46      	cmp	r7, #70	; 0x46
 8015d2c:	eb08 0906 	add.w	r9, r8, r6
 8015d30:	d111      	bne.n	8015d56 <__cvt+0x8e>
 8015d32:	f898 3000 	ldrb.w	r3, [r8]
 8015d36:	2b30      	cmp	r3, #48	; 0x30
 8015d38:	d10a      	bne.n	8015d50 <__cvt+0x88>
 8015d3a:	2200      	movs	r2, #0
 8015d3c:	2300      	movs	r3, #0
 8015d3e:	4620      	mov	r0, r4
 8015d40:	4629      	mov	r1, r5
 8015d42:	f7ea fed1 	bl	8000ae8 <__aeabi_dcmpeq>
 8015d46:	b918      	cbnz	r0, 8015d50 <__cvt+0x88>
 8015d48:	f1c6 0601 	rsb	r6, r6, #1
 8015d4c:	f8ca 6000 	str.w	r6, [sl]
 8015d50:	f8da 3000 	ldr.w	r3, [sl]
 8015d54:	4499      	add	r9, r3
 8015d56:	2200      	movs	r2, #0
 8015d58:	2300      	movs	r3, #0
 8015d5a:	4620      	mov	r0, r4
 8015d5c:	4629      	mov	r1, r5
 8015d5e:	f7ea fec3 	bl	8000ae8 <__aeabi_dcmpeq>
 8015d62:	b938      	cbnz	r0, 8015d74 <__cvt+0xac>
 8015d64:	2230      	movs	r2, #48	; 0x30
 8015d66:	9b03      	ldr	r3, [sp, #12]
 8015d68:	454b      	cmp	r3, r9
 8015d6a:	d205      	bcs.n	8015d78 <__cvt+0xb0>
 8015d6c:	1c59      	adds	r1, r3, #1
 8015d6e:	9103      	str	r1, [sp, #12]
 8015d70:	701a      	strb	r2, [r3, #0]
 8015d72:	e7f8      	b.n	8015d66 <__cvt+0x9e>
 8015d74:	f8cd 900c 	str.w	r9, [sp, #12]
 8015d78:	9b03      	ldr	r3, [sp, #12]
 8015d7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015d7c:	eba3 0308 	sub.w	r3, r3, r8
 8015d80:	4640      	mov	r0, r8
 8015d82:	6013      	str	r3, [r2, #0]
 8015d84:	b004      	add	sp, #16
 8015d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08015d8a <__exponent>:
 8015d8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015d8c:	2900      	cmp	r1, #0
 8015d8e:	4604      	mov	r4, r0
 8015d90:	bfba      	itte	lt
 8015d92:	4249      	neglt	r1, r1
 8015d94:	232d      	movlt	r3, #45	; 0x2d
 8015d96:	232b      	movge	r3, #43	; 0x2b
 8015d98:	2909      	cmp	r1, #9
 8015d9a:	f804 2b02 	strb.w	r2, [r4], #2
 8015d9e:	7043      	strb	r3, [r0, #1]
 8015da0:	dd20      	ble.n	8015de4 <__exponent+0x5a>
 8015da2:	f10d 0307 	add.w	r3, sp, #7
 8015da6:	461f      	mov	r7, r3
 8015da8:	260a      	movs	r6, #10
 8015daa:	fb91 f5f6 	sdiv	r5, r1, r6
 8015dae:	fb06 1115 	mls	r1, r6, r5, r1
 8015db2:	3130      	adds	r1, #48	; 0x30
 8015db4:	2d09      	cmp	r5, #9
 8015db6:	f803 1c01 	strb.w	r1, [r3, #-1]
 8015dba:	f103 32ff 	add.w	r2, r3, #4294967295
 8015dbe:	4629      	mov	r1, r5
 8015dc0:	dc09      	bgt.n	8015dd6 <__exponent+0x4c>
 8015dc2:	3130      	adds	r1, #48	; 0x30
 8015dc4:	3b02      	subs	r3, #2
 8015dc6:	f802 1c01 	strb.w	r1, [r2, #-1]
 8015dca:	42bb      	cmp	r3, r7
 8015dcc:	4622      	mov	r2, r4
 8015dce:	d304      	bcc.n	8015dda <__exponent+0x50>
 8015dd0:	1a10      	subs	r0, r2, r0
 8015dd2:	b003      	add	sp, #12
 8015dd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015dd6:	4613      	mov	r3, r2
 8015dd8:	e7e7      	b.n	8015daa <__exponent+0x20>
 8015dda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015dde:	f804 2b01 	strb.w	r2, [r4], #1
 8015de2:	e7f2      	b.n	8015dca <__exponent+0x40>
 8015de4:	2330      	movs	r3, #48	; 0x30
 8015de6:	4419      	add	r1, r3
 8015de8:	7083      	strb	r3, [r0, #2]
 8015dea:	1d02      	adds	r2, r0, #4
 8015dec:	70c1      	strb	r1, [r0, #3]
 8015dee:	e7ef      	b.n	8015dd0 <__exponent+0x46>

08015df0 <_printf_float>:
 8015df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015df4:	b08d      	sub	sp, #52	; 0x34
 8015df6:	460c      	mov	r4, r1
 8015df8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8015dfc:	4616      	mov	r6, r2
 8015dfe:	461f      	mov	r7, r3
 8015e00:	4605      	mov	r5, r0
 8015e02:	f002 fe73 	bl	8018aec <_localeconv_r>
 8015e06:	6803      	ldr	r3, [r0, #0]
 8015e08:	9304      	str	r3, [sp, #16]
 8015e0a:	4618      	mov	r0, r3
 8015e0c:	f7ea f9ea 	bl	80001e4 <strlen>
 8015e10:	2300      	movs	r3, #0
 8015e12:	930a      	str	r3, [sp, #40]	; 0x28
 8015e14:	f8d8 3000 	ldr.w	r3, [r8]
 8015e18:	9005      	str	r0, [sp, #20]
 8015e1a:	3307      	adds	r3, #7
 8015e1c:	f023 0307 	bic.w	r3, r3, #7
 8015e20:	f103 0208 	add.w	r2, r3, #8
 8015e24:	f894 a018 	ldrb.w	sl, [r4, #24]
 8015e28:	f8d4 b000 	ldr.w	fp, [r4]
 8015e2c:	f8c8 2000 	str.w	r2, [r8]
 8015e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e34:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8015e38:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8015e3c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015e40:	9307      	str	r3, [sp, #28]
 8015e42:	f8cd 8018 	str.w	r8, [sp, #24]
 8015e46:	f04f 32ff 	mov.w	r2, #4294967295
 8015e4a:	4ba7      	ldr	r3, [pc, #668]	; (80160e8 <_printf_float+0x2f8>)
 8015e4c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015e50:	f7ea fe7c 	bl	8000b4c <__aeabi_dcmpun>
 8015e54:	bb70      	cbnz	r0, 8015eb4 <_printf_float+0xc4>
 8015e56:	f04f 32ff 	mov.w	r2, #4294967295
 8015e5a:	4ba3      	ldr	r3, [pc, #652]	; (80160e8 <_printf_float+0x2f8>)
 8015e5c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015e60:	f7ea fe56 	bl	8000b10 <__aeabi_dcmple>
 8015e64:	bb30      	cbnz	r0, 8015eb4 <_printf_float+0xc4>
 8015e66:	2200      	movs	r2, #0
 8015e68:	2300      	movs	r3, #0
 8015e6a:	4640      	mov	r0, r8
 8015e6c:	4649      	mov	r1, r9
 8015e6e:	f7ea fe45 	bl	8000afc <__aeabi_dcmplt>
 8015e72:	b110      	cbz	r0, 8015e7a <_printf_float+0x8a>
 8015e74:	232d      	movs	r3, #45	; 0x2d
 8015e76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015e7a:	4a9c      	ldr	r2, [pc, #624]	; (80160ec <_printf_float+0x2fc>)
 8015e7c:	4b9c      	ldr	r3, [pc, #624]	; (80160f0 <_printf_float+0x300>)
 8015e7e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8015e82:	bf8c      	ite	hi
 8015e84:	4690      	movhi	r8, r2
 8015e86:	4698      	movls	r8, r3
 8015e88:	2303      	movs	r3, #3
 8015e8a:	f02b 0204 	bic.w	r2, fp, #4
 8015e8e:	6123      	str	r3, [r4, #16]
 8015e90:	6022      	str	r2, [r4, #0]
 8015e92:	f04f 0900 	mov.w	r9, #0
 8015e96:	9700      	str	r7, [sp, #0]
 8015e98:	4633      	mov	r3, r6
 8015e9a:	aa0b      	add	r2, sp, #44	; 0x2c
 8015e9c:	4621      	mov	r1, r4
 8015e9e:	4628      	mov	r0, r5
 8015ea0:	f000 f9e6 	bl	8016270 <_printf_common>
 8015ea4:	3001      	adds	r0, #1
 8015ea6:	f040 808d 	bne.w	8015fc4 <_printf_float+0x1d4>
 8015eaa:	f04f 30ff 	mov.w	r0, #4294967295
 8015eae:	b00d      	add	sp, #52	; 0x34
 8015eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015eb4:	4642      	mov	r2, r8
 8015eb6:	464b      	mov	r3, r9
 8015eb8:	4640      	mov	r0, r8
 8015eba:	4649      	mov	r1, r9
 8015ebc:	f7ea fe46 	bl	8000b4c <__aeabi_dcmpun>
 8015ec0:	b110      	cbz	r0, 8015ec8 <_printf_float+0xd8>
 8015ec2:	4a8c      	ldr	r2, [pc, #560]	; (80160f4 <_printf_float+0x304>)
 8015ec4:	4b8c      	ldr	r3, [pc, #560]	; (80160f8 <_printf_float+0x308>)
 8015ec6:	e7da      	b.n	8015e7e <_printf_float+0x8e>
 8015ec8:	6861      	ldr	r1, [r4, #4]
 8015eca:	1c4b      	adds	r3, r1, #1
 8015ecc:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8015ed0:	a80a      	add	r0, sp, #40	; 0x28
 8015ed2:	d13e      	bne.n	8015f52 <_printf_float+0x162>
 8015ed4:	2306      	movs	r3, #6
 8015ed6:	6063      	str	r3, [r4, #4]
 8015ed8:	2300      	movs	r3, #0
 8015eda:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8015ede:	ab09      	add	r3, sp, #36	; 0x24
 8015ee0:	9300      	str	r3, [sp, #0]
 8015ee2:	ec49 8b10 	vmov	d0, r8, r9
 8015ee6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015eea:	6022      	str	r2, [r4, #0]
 8015eec:	f8cd a004 	str.w	sl, [sp, #4]
 8015ef0:	6861      	ldr	r1, [r4, #4]
 8015ef2:	4628      	mov	r0, r5
 8015ef4:	f7ff fee8 	bl	8015cc8 <__cvt>
 8015ef8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8015efc:	2b47      	cmp	r3, #71	; 0x47
 8015efe:	4680      	mov	r8, r0
 8015f00:	d109      	bne.n	8015f16 <_printf_float+0x126>
 8015f02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f04:	1cd8      	adds	r0, r3, #3
 8015f06:	db02      	blt.n	8015f0e <_printf_float+0x11e>
 8015f08:	6862      	ldr	r2, [r4, #4]
 8015f0a:	4293      	cmp	r3, r2
 8015f0c:	dd47      	ble.n	8015f9e <_printf_float+0x1ae>
 8015f0e:	f1aa 0a02 	sub.w	sl, sl, #2
 8015f12:	fa5f fa8a 	uxtb.w	sl, sl
 8015f16:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8015f1a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015f1c:	d824      	bhi.n	8015f68 <_printf_float+0x178>
 8015f1e:	3901      	subs	r1, #1
 8015f20:	4652      	mov	r2, sl
 8015f22:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8015f26:	9109      	str	r1, [sp, #36]	; 0x24
 8015f28:	f7ff ff2f 	bl	8015d8a <__exponent>
 8015f2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015f2e:	1813      	adds	r3, r2, r0
 8015f30:	2a01      	cmp	r2, #1
 8015f32:	4681      	mov	r9, r0
 8015f34:	6123      	str	r3, [r4, #16]
 8015f36:	dc02      	bgt.n	8015f3e <_printf_float+0x14e>
 8015f38:	6822      	ldr	r2, [r4, #0]
 8015f3a:	07d1      	lsls	r1, r2, #31
 8015f3c:	d501      	bpl.n	8015f42 <_printf_float+0x152>
 8015f3e:	3301      	adds	r3, #1
 8015f40:	6123      	str	r3, [r4, #16]
 8015f42:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8015f46:	2b00      	cmp	r3, #0
 8015f48:	d0a5      	beq.n	8015e96 <_printf_float+0xa6>
 8015f4a:	232d      	movs	r3, #45	; 0x2d
 8015f4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015f50:	e7a1      	b.n	8015e96 <_printf_float+0xa6>
 8015f52:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8015f56:	f000 8177 	beq.w	8016248 <_printf_float+0x458>
 8015f5a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8015f5e:	d1bb      	bne.n	8015ed8 <_printf_float+0xe8>
 8015f60:	2900      	cmp	r1, #0
 8015f62:	d1b9      	bne.n	8015ed8 <_printf_float+0xe8>
 8015f64:	2301      	movs	r3, #1
 8015f66:	e7b6      	b.n	8015ed6 <_printf_float+0xe6>
 8015f68:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8015f6c:	d119      	bne.n	8015fa2 <_printf_float+0x1b2>
 8015f6e:	2900      	cmp	r1, #0
 8015f70:	6863      	ldr	r3, [r4, #4]
 8015f72:	dd0c      	ble.n	8015f8e <_printf_float+0x19e>
 8015f74:	6121      	str	r1, [r4, #16]
 8015f76:	b913      	cbnz	r3, 8015f7e <_printf_float+0x18e>
 8015f78:	6822      	ldr	r2, [r4, #0]
 8015f7a:	07d2      	lsls	r2, r2, #31
 8015f7c:	d502      	bpl.n	8015f84 <_printf_float+0x194>
 8015f7e:	3301      	adds	r3, #1
 8015f80:	440b      	add	r3, r1
 8015f82:	6123      	str	r3, [r4, #16]
 8015f84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f86:	65a3      	str	r3, [r4, #88]	; 0x58
 8015f88:	f04f 0900 	mov.w	r9, #0
 8015f8c:	e7d9      	b.n	8015f42 <_printf_float+0x152>
 8015f8e:	b913      	cbnz	r3, 8015f96 <_printf_float+0x1a6>
 8015f90:	6822      	ldr	r2, [r4, #0]
 8015f92:	07d0      	lsls	r0, r2, #31
 8015f94:	d501      	bpl.n	8015f9a <_printf_float+0x1aa>
 8015f96:	3302      	adds	r3, #2
 8015f98:	e7f3      	b.n	8015f82 <_printf_float+0x192>
 8015f9a:	2301      	movs	r3, #1
 8015f9c:	e7f1      	b.n	8015f82 <_printf_float+0x192>
 8015f9e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8015fa2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8015fa6:	4293      	cmp	r3, r2
 8015fa8:	db05      	blt.n	8015fb6 <_printf_float+0x1c6>
 8015faa:	6822      	ldr	r2, [r4, #0]
 8015fac:	6123      	str	r3, [r4, #16]
 8015fae:	07d1      	lsls	r1, r2, #31
 8015fb0:	d5e8      	bpl.n	8015f84 <_printf_float+0x194>
 8015fb2:	3301      	adds	r3, #1
 8015fb4:	e7e5      	b.n	8015f82 <_printf_float+0x192>
 8015fb6:	2b00      	cmp	r3, #0
 8015fb8:	bfd4      	ite	le
 8015fba:	f1c3 0302 	rsble	r3, r3, #2
 8015fbe:	2301      	movgt	r3, #1
 8015fc0:	4413      	add	r3, r2
 8015fc2:	e7de      	b.n	8015f82 <_printf_float+0x192>
 8015fc4:	6823      	ldr	r3, [r4, #0]
 8015fc6:	055a      	lsls	r2, r3, #21
 8015fc8:	d407      	bmi.n	8015fda <_printf_float+0x1ea>
 8015fca:	6923      	ldr	r3, [r4, #16]
 8015fcc:	4642      	mov	r2, r8
 8015fce:	4631      	mov	r1, r6
 8015fd0:	4628      	mov	r0, r5
 8015fd2:	47b8      	blx	r7
 8015fd4:	3001      	adds	r0, #1
 8015fd6:	d12b      	bne.n	8016030 <_printf_float+0x240>
 8015fd8:	e767      	b.n	8015eaa <_printf_float+0xba>
 8015fda:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8015fde:	f240 80dc 	bls.w	801619a <_printf_float+0x3aa>
 8015fe2:	2200      	movs	r2, #0
 8015fe4:	2300      	movs	r3, #0
 8015fe6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015fea:	f7ea fd7d 	bl	8000ae8 <__aeabi_dcmpeq>
 8015fee:	2800      	cmp	r0, #0
 8015ff0:	d033      	beq.n	801605a <_printf_float+0x26a>
 8015ff2:	2301      	movs	r3, #1
 8015ff4:	4a41      	ldr	r2, [pc, #260]	; (80160fc <_printf_float+0x30c>)
 8015ff6:	4631      	mov	r1, r6
 8015ff8:	4628      	mov	r0, r5
 8015ffa:	47b8      	blx	r7
 8015ffc:	3001      	adds	r0, #1
 8015ffe:	f43f af54 	beq.w	8015eaa <_printf_float+0xba>
 8016002:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016006:	429a      	cmp	r2, r3
 8016008:	db02      	blt.n	8016010 <_printf_float+0x220>
 801600a:	6823      	ldr	r3, [r4, #0]
 801600c:	07d8      	lsls	r0, r3, #31
 801600e:	d50f      	bpl.n	8016030 <_printf_float+0x240>
 8016010:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016014:	4631      	mov	r1, r6
 8016016:	4628      	mov	r0, r5
 8016018:	47b8      	blx	r7
 801601a:	3001      	adds	r0, #1
 801601c:	f43f af45 	beq.w	8015eaa <_printf_float+0xba>
 8016020:	f04f 0800 	mov.w	r8, #0
 8016024:	f104 091a 	add.w	r9, r4, #26
 8016028:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801602a:	3b01      	subs	r3, #1
 801602c:	4543      	cmp	r3, r8
 801602e:	dc09      	bgt.n	8016044 <_printf_float+0x254>
 8016030:	6823      	ldr	r3, [r4, #0]
 8016032:	079b      	lsls	r3, r3, #30
 8016034:	f100 8103 	bmi.w	801623e <_printf_float+0x44e>
 8016038:	68e0      	ldr	r0, [r4, #12]
 801603a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801603c:	4298      	cmp	r0, r3
 801603e:	bfb8      	it	lt
 8016040:	4618      	movlt	r0, r3
 8016042:	e734      	b.n	8015eae <_printf_float+0xbe>
 8016044:	2301      	movs	r3, #1
 8016046:	464a      	mov	r2, r9
 8016048:	4631      	mov	r1, r6
 801604a:	4628      	mov	r0, r5
 801604c:	47b8      	blx	r7
 801604e:	3001      	adds	r0, #1
 8016050:	f43f af2b 	beq.w	8015eaa <_printf_float+0xba>
 8016054:	f108 0801 	add.w	r8, r8, #1
 8016058:	e7e6      	b.n	8016028 <_printf_float+0x238>
 801605a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801605c:	2b00      	cmp	r3, #0
 801605e:	dc2b      	bgt.n	80160b8 <_printf_float+0x2c8>
 8016060:	2301      	movs	r3, #1
 8016062:	4a26      	ldr	r2, [pc, #152]	; (80160fc <_printf_float+0x30c>)
 8016064:	4631      	mov	r1, r6
 8016066:	4628      	mov	r0, r5
 8016068:	47b8      	blx	r7
 801606a:	3001      	adds	r0, #1
 801606c:	f43f af1d 	beq.w	8015eaa <_printf_float+0xba>
 8016070:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016072:	b923      	cbnz	r3, 801607e <_printf_float+0x28e>
 8016074:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016076:	b913      	cbnz	r3, 801607e <_printf_float+0x28e>
 8016078:	6823      	ldr	r3, [r4, #0]
 801607a:	07d9      	lsls	r1, r3, #31
 801607c:	d5d8      	bpl.n	8016030 <_printf_float+0x240>
 801607e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016082:	4631      	mov	r1, r6
 8016084:	4628      	mov	r0, r5
 8016086:	47b8      	blx	r7
 8016088:	3001      	adds	r0, #1
 801608a:	f43f af0e 	beq.w	8015eaa <_printf_float+0xba>
 801608e:	f04f 0900 	mov.w	r9, #0
 8016092:	f104 0a1a 	add.w	sl, r4, #26
 8016096:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016098:	425b      	negs	r3, r3
 801609a:	454b      	cmp	r3, r9
 801609c:	dc01      	bgt.n	80160a2 <_printf_float+0x2b2>
 801609e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80160a0:	e794      	b.n	8015fcc <_printf_float+0x1dc>
 80160a2:	2301      	movs	r3, #1
 80160a4:	4652      	mov	r2, sl
 80160a6:	4631      	mov	r1, r6
 80160a8:	4628      	mov	r0, r5
 80160aa:	47b8      	blx	r7
 80160ac:	3001      	adds	r0, #1
 80160ae:	f43f aefc 	beq.w	8015eaa <_printf_float+0xba>
 80160b2:	f109 0901 	add.w	r9, r9, #1
 80160b6:	e7ee      	b.n	8016096 <_printf_float+0x2a6>
 80160b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80160ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80160bc:	429a      	cmp	r2, r3
 80160be:	bfa8      	it	ge
 80160c0:	461a      	movge	r2, r3
 80160c2:	2a00      	cmp	r2, #0
 80160c4:	4691      	mov	r9, r2
 80160c6:	dd07      	ble.n	80160d8 <_printf_float+0x2e8>
 80160c8:	4613      	mov	r3, r2
 80160ca:	4631      	mov	r1, r6
 80160cc:	4642      	mov	r2, r8
 80160ce:	4628      	mov	r0, r5
 80160d0:	47b8      	blx	r7
 80160d2:	3001      	adds	r0, #1
 80160d4:	f43f aee9 	beq.w	8015eaa <_printf_float+0xba>
 80160d8:	f104 031a 	add.w	r3, r4, #26
 80160dc:	f04f 0b00 	mov.w	fp, #0
 80160e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80160e4:	9306      	str	r3, [sp, #24]
 80160e6:	e015      	b.n	8016114 <_printf_float+0x324>
 80160e8:	7fefffff 	.word	0x7fefffff
 80160ec:	0801be80 	.word	0x0801be80
 80160f0:	0801be7c 	.word	0x0801be7c
 80160f4:	0801be88 	.word	0x0801be88
 80160f8:	0801be84 	.word	0x0801be84
 80160fc:	0801c043 	.word	0x0801c043
 8016100:	2301      	movs	r3, #1
 8016102:	9a06      	ldr	r2, [sp, #24]
 8016104:	4631      	mov	r1, r6
 8016106:	4628      	mov	r0, r5
 8016108:	47b8      	blx	r7
 801610a:	3001      	adds	r0, #1
 801610c:	f43f aecd 	beq.w	8015eaa <_printf_float+0xba>
 8016110:	f10b 0b01 	add.w	fp, fp, #1
 8016114:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8016118:	ebaa 0309 	sub.w	r3, sl, r9
 801611c:	455b      	cmp	r3, fp
 801611e:	dcef      	bgt.n	8016100 <_printf_float+0x310>
 8016120:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016124:	429a      	cmp	r2, r3
 8016126:	44d0      	add	r8, sl
 8016128:	db15      	blt.n	8016156 <_printf_float+0x366>
 801612a:	6823      	ldr	r3, [r4, #0]
 801612c:	07da      	lsls	r2, r3, #31
 801612e:	d412      	bmi.n	8016156 <_printf_float+0x366>
 8016130:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016132:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016134:	eba3 020a 	sub.w	r2, r3, sl
 8016138:	eba3 0a01 	sub.w	sl, r3, r1
 801613c:	4592      	cmp	sl, r2
 801613e:	bfa8      	it	ge
 8016140:	4692      	movge	sl, r2
 8016142:	f1ba 0f00 	cmp.w	sl, #0
 8016146:	dc0e      	bgt.n	8016166 <_printf_float+0x376>
 8016148:	f04f 0800 	mov.w	r8, #0
 801614c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016150:	f104 091a 	add.w	r9, r4, #26
 8016154:	e019      	b.n	801618a <_printf_float+0x39a>
 8016156:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801615a:	4631      	mov	r1, r6
 801615c:	4628      	mov	r0, r5
 801615e:	47b8      	blx	r7
 8016160:	3001      	adds	r0, #1
 8016162:	d1e5      	bne.n	8016130 <_printf_float+0x340>
 8016164:	e6a1      	b.n	8015eaa <_printf_float+0xba>
 8016166:	4653      	mov	r3, sl
 8016168:	4642      	mov	r2, r8
 801616a:	4631      	mov	r1, r6
 801616c:	4628      	mov	r0, r5
 801616e:	47b8      	blx	r7
 8016170:	3001      	adds	r0, #1
 8016172:	d1e9      	bne.n	8016148 <_printf_float+0x358>
 8016174:	e699      	b.n	8015eaa <_printf_float+0xba>
 8016176:	2301      	movs	r3, #1
 8016178:	464a      	mov	r2, r9
 801617a:	4631      	mov	r1, r6
 801617c:	4628      	mov	r0, r5
 801617e:	47b8      	blx	r7
 8016180:	3001      	adds	r0, #1
 8016182:	f43f ae92 	beq.w	8015eaa <_printf_float+0xba>
 8016186:	f108 0801 	add.w	r8, r8, #1
 801618a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801618e:	1a9b      	subs	r3, r3, r2
 8016190:	eba3 030a 	sub.w	r3, r3, sl
 8016194:	4543      	cmp	r3, r8
 8016196:	dcee      	bgt.n	8016176 <_printf_float+0x386>
 8016198:	e74a      	b.n	8016030 <_printf_float+0x240>
 801619a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801619c:	2a01      	cmp	r2, #1
 801619e:	dc01      	bgt.n	80161a4 <_printf_float+0x3b4>
 80161a0:	07db      	lsls	r3, r3, #31
 80161a2:	d53a      	bpl.n	801621a <_printf_float+0x42a>
 80161a4:	2301      	movs	r3, #1
 80161a6:	4642      	mov	r2, r8
 80161a8:	4631      	mov	r1, r6
 80161aa:	4628      	mov	r0, r5
 80161ac:	47b8      	blx	r7
 80161ae:	3001      	adds	r0, #1
 80161b0:	f43f ae7b 	beq.w	8015eaa <_printf_float+0xba>
 80161b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80161b8:	4631      	mov	r1, r6
 80161ba:	4628      	mov	r0, r5
 80161bc:	47b8      	blx	r7
 80161be:	3001      	adds	r0, #1
 80161c0:	f108 0801 	add.w	r8, r8, #1
 80161c4:	f43f ae71 	beq.w	8015eaa <_printf_float+0xba>
 80161c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80161ca:	2200      	movs	r2, #0
 80161cc:	f103 3aff 	add.w	sl, r3, #4294967295
 80161d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80161d4:	2300      	movs	r3, #0
 80161d6:	f7ea fc87 	bl	8000ae8 <__aeabi_dcmpeq>
 80161da:	b9c8      	cbnz	r0, 8016210 <_printf_float+0x420>
 80161dc:	4653      	mov	r3, sl
 80161de:	4642      	mov	r2, r8
 80161e0:	4631      	mov	r1, r6
 80161e2:	4628      	mov	r0, r5
 80161e4:	47b8      	blx	r7
 80161e6:	3001      	adds	r0, #1
 80161e8:	d10e      	bne.n	8016208 <_printf_float+0x418>
 80161ea:	e65e      	b.n	8015eaa <_printf_float+0xba>
 80161ec:	2301      	movs	r3, #1
 80161ee:	4652      	mov	r2, sl
 80161f0:	4631      	mov	r1, r6
 80161f2:	4628      	mov	r0, r5
 80161f4:	47b8      	blx	r7
 80161f6:	3001      	adds	r0, #1
 80161f8:	f43f ae57 	beq.w	8015eaa <_printf_float+0xba>
 80161fc:	f108 0801 	add.w	r8, r8, #1
 8016200:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016202:	3b01      	subs	r3, #1
 8016204:	4543      	cmp	r3, r8
 8016206:	dcf1      	bgt.n	80161ec <_printf_float+0x3fc>
 8016208:	464b      	mov	r3, r9
 801620a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801620e:	e6de      	b.n	8015fce <_printf_float+0x1de>
 8016210:	f04f 0800 	mov.w	r8, #0
 8016214:	f104 0a1a 	add.w	sl, r4, #26
 8016218:	e7f2      	b.n	8016200 <_printf_float+0x410>
 801621a:	2301      	movs	r3, #1
 801621c:	e7df      	b.n	80161de <_printf_float+0x3ee>
 801621e:	2301      	movs	r3, #1
 8016220:	464a      	mov	r2, r9
 8016222:	4631      	mov	r1, r6
 8016224:	4628      	mov	r0, r5
 8016226:	47b8      	blx	r7
 8016228:	3001      	adds	r0, #1
 801622a:	f43f ae3e 	beq.w	8015eaa <_printf_float+0xba>
 801622e:	f108 0801 	add.w	r8, r8, #1
 8016232:	68e3      	ldr	r3, [r4, #12]
 8016234:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016236:	1a9b      	subs	r3, r3, r2
 8016238:	4543      	cmp	r3, r8
 801623a:	dcf0      	bgt.n	801621e <_printf_float+0x42e>
 801623c:	e6fc      	b.n	8016038 <_printf_float+0x248>
 801623e:	f04f 0800 	mov.w	r8, #0
 8016242:	f104 0919 	add.w	r9, r4, #25
 8016246:	e7f4      	b.n	8016232 <_printf_float+0x442>
 8016248:	2900      	cmp	r1, #0
 801624a:	f43f ae8b 	beq.w	8015f64 <_printf_float+0x174>
 801624e:	2300      	movs	r3, #0
 8016250:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8016254:	ab09      	add	r3, sp, #36	; 0x24
 8016256:	9300      	str	r3, [sp, #0]
 8016258:	ec49 8b10 	vmov	d0, r8, r9
 801625c:	6022      	str	r2, [r4, #0]
 801625e:	f8cd a004 	str.w	sl, [sp, #4]
 8016262:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8016266:	4628      	mov	r0, r5
 8016268:	f7ff fd2e 	bl	8015cc8 <__cvt>
 801626c:	4680      	mov	r8, r0
 801626e:	e648      	b.n	8015f02 <_printf_float+0x112>

08016270 <_printf_common>:
 8016270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016274:	4691      	mov	r9, r2
 8016276:	461f      	mov	r7, r3
 8016278:	688a      	ldr	r2, [r1, #8]
 801627a:	690b      	ldr	r3, [r1, #16]
 801627c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016280:	4293      	cmp	r3, r2
 8016282:	bfb8      	it	lt
 8016284:	4613      	movlt	r3, r2
 8016286:	f8c9 3000 	str.w	r3, [r9]
 801628a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801628e:	4606      	mov	r6, r0
 8016290:	460c      	mov	r4, r1
 8016292:	b112      	cbz	r2, 801629a <_printf_common+0x2a>
 8016294:	3301      	adds	r3, #1
 8016296:	f8c9 3000 	str.w	r3, [r9]
 801629a:	6823      	ldr	r3, [r4, #0]
 801629c:	0699      	lsls	r1, r3, #26
 801629e:	bf42      	ittt	mi
 80162a0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80162a4:	3302      	addmi	r3, #2
 80162a6:	f8c9 3000 	strmi.w	r3, [r9]
 80162aa:	6825      	ldr	r5, [r4, #0]
 80162ac:	f015 0506 	ands.w	r5, r5, #6
 80162b0:	d107      	bne.n	80162c2 <_printf_common+0x52>
 80162b2:	f104 0a19 	add.w	sl, r4, #25
 80162b6:	68e3      	ldr	r3, [r4, #12]
 80162b8:	f8d9 2000 	ldr.w	r2, [r9]
 80162bc:	1a9b      	subs	r3, r3, r2
 80162be:	42ab      	cmp	r3, r5
 80162c0:	dc28      	bgt.n	8016314 <_printf_common+0xa4>
 80162c2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80162c6:	6822      	ldr	r2, [r4, #0]
 80162c8:	3300      	adds	r3, #0
 80162ca:	bf18      	it	ne
 80162cc:	2301      	movne	r3, #1
 80162ce:	0692      	lsls	r2, r2, #26
 80162d0:	d42d      	bmi.n	801632e <_printf_common+0xbe>
 80162d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80162d6:	4639      	mov	r1, r7
 80162d8:	4630      	mov	r0, r6
 80162da:	47c0      	blx	r8
 80162dc:	3001      	adds	r0, #1
 80162de:	d020      	beq.n	8016322 <_printf_common+0xb2>
 80162e0:	6823      	ldr	r3, [r4, #0]
 80162e2:	68e5      	ldr	r5, [r4, #12]
 80162e4:	f8d9 2000 	ldr.w	r2, [r9]
 80162e8:	f003 0306 	and.w	r3, r3, #6
 80162ec:	2b04      	cmp	r3, #4
 80162ee:	bf08      	it	eq
 80162f0:	1aad      	subeq	r5, r5, r2
 80162f2:	68a3      	ldr	r3, [r4, #8]
 80162f4:	6922      	ldr	r2, [r4, #16]
 80162f6:	bf0c      	ite	eq
 80162f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80162fc:	2500      	movne	r5, #0
 80162fe:	4293      	cmp	r3, r2
 8016300:	bfc4      	itt	gt
 8016302:	1a9b      	subgt	r3, r3, r2
 8016304:	18ed      	addgt	r5, r5, r3
 8016306:	f04f 0900 	mov.w	r9, #0
 801630a:	341a      	adds	r4, #26
 801630c:	454d      	cmp	r5, r9
 801630e:	d11a      	bne.n	8016346 <_printf_common+0xd6>
 8016310:	2000      	movs	r0, #0
 8016312:	e008      	b.n	8016326 <_printf_common+0xb6>
 8016314:	2301      	movs	r3, #1
 8016316:	4652      	mov	r2, sl
 8016318:	4639      	mov	r1, r7
 801631a:	4630      	mov	r0, r6
 801631c:	47c0      	blx	r8
 801631e:	3001      	adds	r0, #1
 8016320:	d103      	bne.n	801632a <_printf_common+0xba>
 8016322:	f04f 30ff 	mov.w	r0, #4294967295
 8016326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801632a:	3501      	adds	r5, #1
 801632c:	e7c3      	b.n	80162b6 <_printf_common+0x46>
 801632e:	18e1      	adds	r1, r4, r3
 8016330:	1c5a      	adds	r2, r3, #1
 8016332:	2030      	movs	r0, #48	; 0x30
 8016334:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016338:	4422      	add	r2, r4
 801633a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801633e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016342:	3302      	adds	r3, #2
 8016344:	e7c5      	b.n	80162d2 <_printf_common+0x62>
 8016346:	2301      	movs	r3, #1
 8016348:	4622      	mov	r2, r4
 801634a:	4639      	mov	r1, r7
 801634c:	4630      	mov	r0, r6
 801634e:	47c0      	blx	r8
 8016350:	3001      	adds	r0, #1
 8016352:	d0e6      	beq.n	8016322 <_printf_common+0xb2>
 8016354:	f109 0901 	add.w	r9, r9, #1
 8016358:	e7d8      	b.n	801630c <_printf_common+0x9c>
	...

0801635c <_printf_i>:
 801635c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016360:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8016364:	460c      	mov	r4, r1
 8016366:	7e09      	ldrb	r1, [r1, #24]
 8016368:	b085      	sub	sp, #20
 801636a:	296e      	cmp	r1, #110	; 0x6e
 801636c:	4617      	mov	r7, r2
 801636e:	4606      	mov	r6, r0
 8016370:	4698      	mov	r8, r3
 8016372:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016374:	f000 80b3 	beq.w	80164de <_printf_i+0x182>
 8016378:	d822      	bhi.n	80163c0 <_printf_i+0x64>
 801637a:	2963      	cmp	r1, #99	; 0x63
 801637c:	d036      	beq.n	80163ec <_printf_i+0x90>
 801637e:	d80a      	bhi.n	8016396 <_printf_i+0x3a>
 8016380:	2900      	cmp	r1, #0
 8016382:	f000 80b9 	beq.w	80164f8 <_printf_i+0x19c>
 8016386:	2958      	cmp	r1, #88	; 0x58
 8016388:	f000 8083 	beq.w	8016492 <_printf_i+0x136>
 801638c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016390:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8016394:	e032      	b.n	80163fc <_printf_i+0xa0>
 8016396:	2964      	cmp	r1, #100	; 0x64
 8016398:	d001      	beq.n	801639e <_printf_i+0x42>
 801639a:	2969      	cmp	r1, #105	; 0x69
 801639c:	d1f6      	bne.n	801638c <_printf_i+0x30>
 801639e:	6820      	ldr	r0, [r4, #0]
 80163a0:	6813      	ldr	r3, [r2, #0]
 80163a2:	0605      	lsls	r5, r0, #24
 80163a4:	f103 0104 	add.w	r1, r3, #4
 80163a8:	d52a      	bpl.n	8016400 <_printf_i+0xa4>
 80163aa:	681b      	ldr	r3, [r3, #0]
 80163ac:	6011      	str	r1, [r2, #0]
 80163ae:	2b00      	cmp	r3, #0
 80163b0:	da03      	bge.n	80163ba <_printf_i+0x5e>
 80163b2:	222d      	movs	r2, #45	; 0x2d
 80163b4:	425b      	negs	r3, r3
 80163b6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80163ba:	486f      	ldr	r0, [pc, #444]	; (8016578 <_printf_i+0x21c>)
 80163bc:	220a      	movs	r2, #10
 80163be:	e039      	b.n	8016434 <_printf_i+0xd8>
 80163c0:	2973      	cmp	r1, #115	; 0x73
 80163c2:	f000 809d 	beq.w	8016500 <_printf_i+0x1a4>
 80163c6:	d808      	bhi.n	80163da <_printf_i+0x7e>
 80163c8:	296f      	cmp	r1, #111	; 0x6f
 80163ca:	d020      	beq.n	801640e <_printf_i+0xb2>
 80163cc:	2970      	cmp	r1, #112	; 0x70
 80163ce:	d1dd      	bne.n	801638c <_printf_i+0x30>
 80163d0:	6823      	ldr	r3, [r4, #0]
 80163d2:	f043 0320 	orr.w	r3, r3, #32
 80163d6:	6023      	str	r3, [r4, #0]
 80163d8:	e003      	b.n	80163e2 <_printf_i+0x86>
 80163da:	2975      	cmp	r1, #117	; 0x75
 80163dc:	d017      	beq.n	801640e <_printf_i+0xb2>
 80163de:	2978      	cmp	r1, #120	; 0x78
 80163e0:	d1d4      	bne.n	801638c <_printf_i+0x30>
 80163e2:	2378      	movs	r3, #120	; 0x78
 80163e4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80163e8:	4864      	ldr	r0, [pc, #400]	; (801657c <_printf_i+0x220>)
 80163ea:	e055      	b.n	8016498 <_printf_i+0x13c>
 80163ec:	6813      	ldr	r3, [r2, #0]
 80163ee:	1d19      	adds	r1, r3, #4
 80163f0:	681b      	ldr	r3, [r3, #0]
 80163f2:	6011      	str	r1, [r2, #0]
 80163f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80163f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80163fc:	2301      	movs	r3, #1
 80163fe:	e08c      	b.n	801651a <_printf_i+0x1be>
 8016400:	681b      	ldr	r3, [r3, #0]
 8016402:	6011      	str	r1, [r2, #0]
 8016404:	f010 0f40 	tst.w	r0, #64	; 0x40
 8016408:	bf18      	it	ne
 801640a:	b21b      	sxthne	r3, r3
 801640c:	e7cf      	b.n	80163ae <_printf_i+0x52>
 801640e:	6813      	ldr	r3, [r2, #0]
 8016410:	6825      	ldr	r5, [r4, #0]
 8016412:	1d18      	adds	r0, r3, #4
 8016414:	6010      	str	r0, [r2, #0]
 8016416:	0628      	lsls	r0, r5, #24
 8016418:	d501      	bpl.n	801641e <_printf_i+0xc2>
 801641a:	681b      	ldr	r3, [r3, #0]
 801641c:	e002      	b.n	8016424 <_printf_i+0xc8>
 801641e:	0668      	lsls	r0, r5, #25
 8016420:	d5fb      	bpl.n	801641a <_printf_i+0xbe>
 8016422:	881b      	ldrh	r3, [r3, #0]
 8016424:	4854      	ldr	r0, [pc, #336]	; (8016578 <_printf_i+0x21c>)
 8016426:	296f      	cmp	r1, #111	; 0x6f
 8016428:	bf14      	ite	ne
 801642a:	220a      	movne	r2, #10
 801642c:	2208      	moveq	r2, #8
 801642e:	2100      	movs	r1, #0
 8016430:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016434:	6865      	ldr	r5, [r4, #4]
 8016436:	60a5      	str	r5, [r4, #8]
 8016438:	2d00      	cmp	r5, #0
 801643a:	f2c0 8095 	blt.w	8016568 <_printf_i+0x20c>
 801643e:	6821      	ldr	r1, [r4, #0]
 8016440:	f021 0104 	bic.w	r1, r1, #4
 8016444:	6021      	str	r1, [r4, #0]
 8016446:	2b00      	cmp	r3, #0
 8016448:	d13d      	bne.n	80164c6 <_printf_i+0x16a>
 801644a:	2d00      	cmp	r5, #0
 801644c:	f040 808e 	bne.w	801656c <_printf_i+0x210>
 8016450:	4665      	mov	r5, ip
 8016452:	2a08      	cmp	r2, #8
 8016454:	d10b      	bne.n	801646e <_printf_i+0x112>
 8016456:	6823      	ldr	r3, [r4, #0]
 8016458:	07db      	lsls	r3, r3, #31
 801645a:	d508      	bpl.n	801646e <_printf_i+0x112>
 801645c:	6923      	ldr	r3, [r4, #16]
 801645e:	6862      	ldr	r2, [r4, #4]
 8016460:	429a      	cmp	r2, r3
 8016462:	bfde      	ittt	le
 8016464:	2330      	movle	r3, #48	; 0x30
 8016466:	f805 3c01 	strble.w	r3, [r5, #-1]
 801646a:	f105 35ff 	addle.w	r5, r5, #4294967295
 801646e:	ebac 0305 	sub.w	r3, ip, r5
 8016472:	6123      	str	r3, [r4, #16]
 8016474:	f8cd 8000 	str.w	r8, [sp]
 8016478:	463b      	mov	r3, r7
 801647a:	aa03      	add	r2, sp, #12
 801647c:	4621      	mov	r1, r4
 801647e:	4630      	mov	r0, r6
 8016480:	f7ff fef6 	bl	8016270 <_printf_common>
 8016484:	3001      	adds	r0, #1
 8016486:	d14d      	bne.n	8016524 <_printf_i+0x1c8>
 8016488:	f04f 30ff 	mov.w	r0, #4294967295
 801648c:	b005      	add	sp, #20
 801648e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016492:	4839      	ldr	r0, [pc, #228]	; (8016578 <_printf_i+0x21c>)
 8016494:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8016498:	6813      	ldr	r3, [r2, #0]
 801649a:	6821      	ldr	r1, [r4, #0]
 801649c:	1d1d      	adds	r5, r3, #4
 801649e:	681b      	ldr	r3, [r3, #0]
 80164a0:	6015      	str	r5, [r2, #0]
 80164a2:	060a      	lsls	r2, r1, #24
 80164a4:	d50b      	bpl.n	80164be <_printf_i+0x162>
 80164a6:	07ca      	lsls	r2, r1, #31
 80164a8:	bf44      	itt	mi
 80164aa:	f041 0120 	orrmi.w	r1, r1, #32
 80164ae:	6021      	strmi	r1, [r4, #0]
 80164b0:	b91b      	cbnz	r3, 80164ba <_printf_i+0x15e>
 80164b2:	6822      	ldr	r2, [r4, #0]
 80164b4:	f022 0220 	bic.w	r2, r2, #32
 80164b8:	6022      	str	r2, [r4, #0]
 80164ba:	2210      	movs	r2, #16
 80164bc:	e7b7      	b.n	801642e <_printf_i+0xd2>
 80164be:	064d      	lsls	r5, r1, #25
 80164c0:	bf48      	it	mi
 80164c2:	b29b      	uxthmi	r3, r3
 80164c4:	e7ef      	b.n	80164a6 <_printf_i+0x14a>
 80164c6:	4665      	mov	r5, ip
 80164c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80164cc:	fb02 3311 	mls	r3, r2, r1, r3
 80164d0:	5cc3      	ldrb	r3, [r0, r3]
 80164d2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80164d6:	460b      	mov	r3, r1
 80164d8:	2900      	cmp	r1, #0
 80164da:	d1f5      	bne.n	80164c8 <_printf_i+0x16c>
 80164dc:	e7b9      	b.n	8016452 <_printf_i+0xf6>
 80164de:	6813      	ldr	r3, [r2, #0]
 80164e0:	6825      	ldr	r5, [r4, #0]
 80164e2:	6961      	ldr	r1, [r4, #20]
 80164e4:	1d18      	adds	r0, r3, #4
 80164e6:	6010      	str	r0, [r2, #0]
 80164e8:	0628      	lsls	r0, r5, #24
 80164ea:	681b      	ldr	r3, [r3, #0]
 80164ec:	d501      	bpl.n	80164f2 <_printf_i+0x196>
 80164ee:	6019      	str	r1, [r3, #0]
 80164f0:	e002      	b.n	80164f8 <_printf_i+0x19c>
 80164f2:	066a      	lsls	r2, r5, #25
 80164f4:	d5fb      	bpl.n	80164ee <_printf_i+0x192>
 80164f6:	8019      	strh	r1, [r3, #0]
 80164f8:	2300      	movs	r3, #0
 80164fa:	6123      	str	r3, [r4, #16]
 80164fc:	4665      	mov	r5, ip
 80164fe:	e7b9      	b.n	8016474 <_printf_i+0x118>
 8016500:	6813      	ldr	r3, [r2, #0]
 8016502:	1d19      	adds	r1, r3, #4
 8016504:	6011      	str	r1, [r2, #0]
 8016506:	681d      	ldr	r5, [r3, #0]
 8016508:	6862      	ldr	r2, [r4, #4]
 801650a:	2100      	movs	r1, #0
 801650c:	4628      	mov	r0, r5
 801650e:	f7e9 fe77 	bl	8000200 <memchr>
 8016512:	b108      	cbz	r0, 8016518 <_printf_i+0x1bc>
 8016514:	1b40      	subs	r0, r0, r5
 8016516:	6060      	str	r0, [r4, #4]
 8016518:	6863      	ldr	r3, [r4, #4]
 801651a:	6123      	str	r3, [r4, #16]
 801651c:	2300      	movs	r3, #0
 801651e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016522:	e7a7      	b.n	8016474 <_printf_i+0x118>
 8016524:	6923      	ldr	r3, [r4, #16]
 8016526:	462a      	mov	r2, r5
 8016528:	4639      	mov	r1, r7
 801652a:	4630      	mov	r0, r6
 801652c:	47c0      	blx	r8
 801652e:	3001      	adds	r0, #1
 8016530:	d0aa      	beq.n	8016488 <_printf_i+0x12c>
 8016532:	6823      	ldr	r3, [r4, #0]
 8016534:	079b      	lsls	r3, r3, #30
 8016536:	d413      	bmi.n	8016560 <_printf_i+0x204>
 8016538:	68e0      	ldr	r0, [r4, #12]
 801653a:	9b03      	ldr	r3, [sp, #12]
 801653c:	4298      	cmp	r0, r3
 801653e:	bfb8      	it	lt
 8016540:	4618      	movlt	r0, r3
 8016542:	e7a3      	b.n	801648c <_printf_i+0x130>
 8016544:	2301      	movs	r3, #1
 8016546:	464a      	mov	r2, r9
 8016548:	4639      	mov	r1, r7
 801654a:	4630      	mov	r0, r6
 801654c:	47c0      	blx	r8
 801654e:	3001      	adds	r0, #1
 8016550:	d09a      	beq.n	8016488 <_printf_i+0x12c>
 8016552:	3501      	adds	r5, #1
 8016554:	68e3      	ldr	r3, [r4, #12]
 8016556:	9a03      	ldr	r2, [sp, #12]
 8016558:	1a9b      	subs	r3, r3, r2
 801655a:	42ab      	cmp	r3, r5
 801655c:	dcf2      	bgt.n	8016544 <_printf_i+0x1e8>
 801655e:	e7eb      	b.n	8016538 <_printf_i+0x1dc>
 8016560:	2500      	movs	r5, #0
 8016562:	f104 0919 	add.w	r9, r4, #25
 8016566:	e7f5      	b.n	8016554 <_printf_i+0x1f8>
 8016568:	2b00      	cmp	r3, #0
 801656a:	d1ac      	bne.n	80164c6 <_printf_i+0x16a>
 801656c:	7803      	ldrb	r3, [r0, #0]
 801656e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016572:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016576:	e76c      	b.n	8016452 <_printf_i+0xf6>
 8016578:	0801be8c 	.word	0x0801be8c
 801657c:	0801be9d 	.word	0x0801be9d

08016580 <_scanf_float>:
 8016580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016584:	469a      	mov	sl, r3
 8016586:	688b      	ldr	r3, [r1, #8]
 8016588:	4616      	mov	r6, r2
 801658a:	1e5a      	subs	r2, r3, #1
 801658c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8016590:	b087      	sub	sp, #28
 8016592:	bf83      	ittte	hi
 8016594:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8016598:	189b      	addhi	r3, r3, r2
 801659a:	9301      	strhi	r3, [sp, #4]
 801659c:	2300      	movls	r3, #0
 801659e:	bf86      	itte	hi
 80165a0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80165a4:	608b      	strhi	r3, [r1, #8]
 80165a6:	9301      	strls	r3, [sp, #4]
 80165a8:	680b      	ldr	r3, [r1, #0]
 80165aa:	4688      	mov	r8, r1
 80165ac:	f04f 0b00 	mov.w	fp, #0
 80165b0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80165b4:	f848 3b1c 	str.w	r3, [r8], #28
 80165b8:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80165bc:	4607      	mov	r7, r0
 80165be:	460c      	mov	r4, r1
 80165c0:	4645      	mov	r5, r8
 80165c2:	465a      	mov	r2, fp
 80165c4:	46d9      	mov	r9, fp
 80165c6:	f8cd b008 	str.w	fp, [sp, #8]
 80165ca:	68a1      	ldr	r1, [r4, #8]
 80165cc:	b181      	cbz	r1, 80165f0 <_scanf_float+0x70>
 80165ce:	6833      	ldr	r3, [r6, #0]
 80165d0:	781b      	ldrb	r3, [r3, #0]
 80165d2:	2b49      	cmp	r3, #73	; 0x49
 80165d4:	d071      	beq.n	80166ba <_scanf_float+0x13a>
 80165d6:	d84d      	bhi.n	8016674 <_scanf_float+0xf4>
 80165d8:	2b39      	cmp	r3, #57	; 0x39
 80165da:	d840      	bhi.n	801665e <_scanf_float+0xde>
 80165dc:	2b31      	cmp	r3, #49	; 0x31
 80165de:	f080 8088 	bcs.w	80166f2 <_scanf_float+0x172>
 80165e2:	2b2d      	cmp	r3, #45	; 0x2d
 80165e4:	f000 8090 	beq.w	8016708 <_scanf_float+0x188>
 80165e8:	d815      	bhi.n	8016616 <_scanf_float+0x96>
 80165ea:	2b2b      	cmp	r3, #43	; 0x2b
 80165ec:	f000 808c 	beq.w	8016708 <_scanf_float+0x188>
 80165f0:	f1b9 0f00 	cmp.w	r9, #0
 80165f4:	d003      	beq.n	80165fe <_scanf_float+0x7e>
 80165f6:	6823      	ldr	r3, [r4, #0]
 80165f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80165fc:	6023      	str	r3, [r4, #0]
 80165fe:	3a01      	subs	r2, #1
 8016600:	2a01      	cmp	r2, #1
 8016602:	f200 80ea 	bhi.w	80167da <_scanf_float+0x25a>
 8016606:	4545      	cmp	r5, r8
 8016608:	f200 80dc 	bhi.w	80167c4 <_scanf_float+0x244>
 801660c:	2601      	movs	r6, #1
 801660e:	4630      	mov	r0, r6
 8016610:	b007      	add	sp, #28
 8016612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016616:	2b2e      	cmp	r3, #46	; 0x2e
 8016618:	f000 809f 	beq.w	801675a <_scanf_float+0x1da>
 801661c:	2b30      	cmp	r3, #48	; 0x30
 801661e:	d1e7      	bne.n	80165f0 <_scanf_float+0x70>
 8016620:	6820      	ldr	r0, [r4, #0]
 8016622:	f410 7f80 	tst.w	r0, #256	; 0x100
 8016626:	d064      	beq.n	80166f2 <_scanf_float+0x172>
 8016628:	9b01      	ldr	r3, [sp, #4]
 801662a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 801662e:	6020      	str	r0, [r4, #0]
 8016630:	f109 0901 	add.w	r9, r9, #1
 8016634:	b11b      	cbz	r3, 801663e <_scanf_float+0xbe>
 8016636:	3b01      	subs	r3, #1
 8016638:	3101      	adds	r1, #1
 801663a:	9301      	str	r3, [sp, #4]
 801663c:	60a1      	str	r1, [r4, #8]
 801663e:	68a3      	ldr	r3, [r4, #8]
 8016640:	3b01      	subs	r3, #1
 8016642:	60a3      	str	r3, [r4, #8]
 8016644:	6923      	ldr	r3, [r4, #16]
 8016646:	3301      	adds	r3, #1
 8016648:	6123      	str	r3, [r4, #16]
 801664a:	6873      	ldr	r3, [r6, #4]
 801664c:	3b01      	subs	r3, #1
 801664e:	2b00      	cmp	r3, #0
 8016650:	6073      	str	r3, [r6, #4]
 8016652:	f340 80ac 	ble.w	80167ae <_scanf_float+0x22e>
 8016656:	6833      	ldr	r3, [r6, #0]
 8016658:	3301      	adds	r3, #1
 801665a:	6033      	str	r3, [r6, #0]
 801665c:	e7b5      	b.n	80165ca <_scanf_float+0x4a>
 801665e:	2b45      	cmp	r3, #69	; 0x45
 8016660:	f000 8085 	beq.w	801676e <_scanf_float+0x1ee>
 8016664:	2b46      	cmp	r3, #70	; 0x46
 8016666:	d06a      	beq.n	801673e <_scanf_float+0x1be>
 8016668:	2b41      	cmp	r3, #65	; 0x41
 801666a:	d1c1      	bne.n	80165f0 <_scanf_float+0x70>
 801666c:	2a01      	cmp	r2, #1
 801666e:	d1bf      	bne.n	80165f0 <_scanf_float+0x70>
 8016670:	2202      	movs	r2, #2
 8016672:	e046      	b.n	8016702 <_scanf_float+0x182>
 8016674:	2b65      	cmp	r3, #101	; 0x65
 8016676:	d07a      	beq.n	801676e <_scanf_float+0x1ee>
 8016678:	d818      	bhi.n	80166ac <_scanf_float+0x12c>
 801667a:	2b54      	cmp	r3, #84	; 0x54
 801667c:	d066      	beq.n	801674c <_scanf_float+0x1cc>
 801667e:	d811      	bhi.n	80166a4 <_scanf_float+0x124>
 8016680:	2b4e      	cmp	r3, #78	; 0x4e
 8016682:	d1b5      	bne.n	80165f0 <_scanf_float+0x70>
 8016684:	2a00      	cmp	r2, #0
 8016686:	d146      	bne.n	8016716 <_scanf_float+0x196>
 8016688:	f1b9 0f00 	cmp.w	r9, #0
 801668c:	d145      	bne.n	801671a <_scanf_float+0x19a>
 801668e:	6821      	ldr	r1, [r4, #0]
 8016690:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8016694:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8016698:	d13f      	bne.n	801671a <_scanf_float+0x19a>
 801669a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801669e:	6021      	str	r1, [r4, #0]
 80166a0:	2201      	movs	r2, #1
 80166a2:	e02e      	b.n	8016702 <_scanf_float+0x182>
 80166a4:	2b59      	cmp	r3, #89	; 0x59
 80166a6:	d01e      	beq.n	80166e6 <_scanf_float+0x166>
 80166a8:	2b61      	cmp	r3, #97	; 0x61
 80166aa:	e7de      	b.n	801666a <_scanf_float+0xea>
 80166ac:	2b6e      	cmp	r3, #110	; 0x6e
 80166ae:	d0e9      	beq.n	8016684 <_scanf_float+0x104>
 80166b0:	d815      	bhi.n	80166de <_scanf_float+0x15e>
 80166b2:	2b66      	cmp	r3, #102	; 0x66
 80166b4:	d043      	beq.n	801673e <_scanf_float+0x1be>
 80166b6:	2b69      	cmp	r3, #105	; 0x69
 80166b8:	d19a      	bne.n	80165f0 <_scanf_float+0x70>
 80166ba:	f1bb 0f00 	cmp.w	fp, #0
 80166be:	d138      	bne.n	8016732 <_scanf_float+0x1b2>
 80166c0:	f1b9 0f00 	cmp.w	r9, #0
 80166c4:	d197      	bne.n	80165f6 <_scanf_float+0x76>
 80166c6:	6821      	ldr	r1, [r4, #0]
 80166c8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80166cc:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80166d0:	d195      	bne.n	80165fe <_scanf_float+0x7e>
 80166d2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80166d6:	6021      	str	r1, [r4, #0]
 80166d8:	f04f 0b01 	mov.w	fp, #1
 80166dc:	e011      	b.n	8016702 <_scanf_float+0x182>
 80166de:	2b74      	cmp	r3, #116	; 0x74
 80166e0:	d034      	beq.n	801674c <_scanf_float+0x1cc>
 80166e2:	2b79      	cmp	r3, #121	; 0x79
 80166e4:	d184      	bne.n	80165f0 <_scanf_float+0x70>
 80166e6:	f1bb 0f07 	cmp.w	fp, #7
 80166ea:	d181      	bne.n	80165f0 <_scanf_float+0x70>
 80166ec:	f04f 0b08 	mov.w	fp, #8
 80166f0:	e007      	b.n	8016702 <_scanf_float+0x182>
 80166f2:	eb12 0f0b 	cmn.w	r2, fp
 80166f6:	f47f af7b 	bne.w	80165f0 <_scanf_float+0x70>
 80166fa:	6821      	ldr	r1, [r4, #0]
 80166fc:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8016700:	6021      	str	r1, [r4, #0]
 8016702:	702b      	strb	r3, [r5, #0]
 8016704:	3501      	adds	r5, #1
 8016706:	e79a      	b.n	801663e <_scanf_float+0xbe>
 8016708:	6821      	ldr	r1, [r4, #0]
 801670a:	0608      	lsls	r0, r1, #24
 801670c:	f57f af70 	bpl.w	80165f0 <_scanf_float+0x70>
 8016710:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8016714:	e7f4      	b.n	8016700 <_scanf_float+0x180>
 8016716:	2a02      	cmp	r2, #2
 8016718:	d047      	beq.n	80167aa <_scanf_float+0x22a>
 801671a:	f1bb 0f01 	cmp.w	fp, #1
 801671e:	d003      	beq.n	8016728 <_scanf_float+0x1a8>
 8016720:	f1bb 0f04 	cmp.w	fp, #4
 8016724:	f47f af64 	bne.w	80165f0 <_scanf_float+0x70>
 8016728:	f10b 0b01 	add.w	fp, fp, #1
 801672c:	fa5f fb8b 	uxtb.w	fp, fp
 8016730:	e7e7      	b.n	8016702 <_scanf_float+0x182>
 8016732:	f1bb 0f03 	cmp.w	fp, #3
 8016736:	d0f7      	beq.n	8016728 <_scanf_float+0x1a8>
 8016738:	f1bb 0f05 	cmp.w	fp, #5
 801673c:	e7f2      	b.n	8016724 <_scanf_float+0x1a4>
 801673e:	f1bb 0f02 	cmp.w	fp, #2
 8016742:	f47f af55 	bne.w	80165f0 <_scanf_float+0x70>
 8016746:	f04f 0b03 	mov.w	fp, #3
 801674a:	e7da      	b.n	8016702 <_scanf_float+0x182>
 801674c:	f1bb 0f06 	cmp.w	fp, #6
 8016750:	f47f af4e 	bne.w	80165f0 <_scanf_float+0x70>
 8016754:	f04f 0b07 	mov.w	fp, #7
 8016758:	e7d3      	b.n	8016702 <_scanf_float+0x182>
 801675a:	6821      	ldr	r1, [r4, #0]
 801675c:	0588      	lsls	r0, r1, #22
 801675e:	f57f af47 	bpl.w	80165f0 <_scanf_float+0x70>
 8016762:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8016766:	6021      	str	r1, [r4, #0]
 8016768:	f8cd 9008 	str.w	r9, [sp, #8]
 801676c:	e7c9      	b.n	8016702 <_scanf_float+0x182>
 801676e:	6821      	ldr	r1, [r4, #0]
 8016770:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8016774:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8016778:	d006      	beq.n	8016788 <_scanf_float+0x208>
 801677a:	0548      	lsls	r0, r1, #21
 801677c:	f57f af38 	bpl.w	80165f0 <_scanf_float+0x70>
 8016780:	f1b9 0f00 	cmp.w	r9, #0
 8016784:	f43f af3b 	beq.w	80165fe <_scanf_float+0x7e>
 8016788:	0588      	lsls	r0, r1, #22
 801678a:	bf58      	it	pl
 801678c:	9802      	ldrpl	r0, [sp, #8]
 801678e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8016792:	bf58      	it	pl
 8016794:	eba9 0000 	subpl.w	r0, r9, r0
 8016798:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 801679c:	bf58      	it	pl
 801679e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80167a2:	6021      	str	r1, [r4, #0]
 80167a4:	f04f 0900 	mov.w	r9, #0
 80167a8:	e7ab      	b.n	8016702 <_scanf_float+0x182>
 80167aa:	2203      	movs	r2, #3
 80167ac:	e7a9      	b.n	8016702 <_scanf_float+0x182>
 80167ae:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80167b2:	9205      	str	r2, [sp, #20]
 80167b4:	4631      	mov	r1, r6
 80167b6:	4638      	mov	r0, r7
 80167b8:	4798      	blx	r3
 80167ba:	9a05      	ldr	r2, [sp, #20]
 80167bc:	2800      	cmp	r0, #0
 80167be:	f43f af04 	beq.w	80165ca <_scanf_float+0x4a>
 80167c2:	e715      	b.n	80165f0 <_scanf_float+0x70>
 80167c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80167c8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80167cc:	4632      	mov	r2, r6
 80167ce:	4638      	mov	r0, r7
 80167d0:	4798      	blx	r3
 80167d2:	6923      	ldr	r3, [r4, #16]
 80167d4:	3b01      	subs	r3, #1
 80167d6:	6123      	str	r3, [r4, #16]
 80167d8:	e715      	b.n	8016606 <_scanf_float+0x86>
 80167da:	f10b 33ff 	add.w	r3, fp, #4294967295
 80167de:	2b06      	cmp	r3, #6
 80167e0:	d80a      	bhi.n	80167f8 <_scanf_float+0x278>
 80167e2:	f1bb 0f02 	cmp.w	fp, #2
 80167e6:	d968      	bls.n	80168ba <_scanf_float+0x33a>
 80167e8:	f1ab 0b03 	sub.w	fp, fp, #3
 80167ec:	fa5f fb8b 	uxtb.w	fp, fp
 80167f0:	eba5 0b0b 	sub.w	fp, r5, fp
 80167f4:	455d      	cmp	r5, fp
 80167f6:	d14b      	bne.n	8016890 <_scanf_float+0x310>
 80167f8:	6823      	ldr	r3, [r4, #0]
 80167fa:	05da      	lsls	r2, r3, #23
 80167fc:	d51f      	bpl.n	801683e <_scanf_float+0x2be>
 80167fe:	055b      	lsls	r3, r3, #21
 8016800:	d468      	bmi.n	80168d4 <_scanf_float+0x354>
 8016802:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8016806:	6923      	ldr	r3, [r4, #16]
 8016808:	2965      	cmp	r1, #101	; 0x65
 801680a:	f103 33ff 	add.w	r3, r3, #4294967295
 801680e:	f105 3bff 	add.w	fp, r5, #4294967295
 8016812:	6123      	str	r3, [r4, #16]
 8016814:	d00d      	beq.n	8016832 <_scanf_float+0x2b2>
 8016816:	2945      	cmp	r1, #69	; 0x45
 8016818:	d00b      	beq.n	8016832 <_scanf_float+0x2b2>
 801681a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801681e:	4632      	mov	r2, r6
 8016820:	4638      	mov	r0, r7
 8016822:	4798      	blx	r3
 8016824:	6923      	ldr	r3, [r4, #16]
 8016826:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 801682a:	3b01      	subs	r3, #1
 801682c:	f1a5 0b02 	sub.w	fp, r5, #2
 8016830:	6123      	str	r3, [r4, #16]
 8016832:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016836:	4632      	mov	r2, r6
 8016838:	4638      	mov	r0, r7
 801683a:	4798      	blx	r3
 801683c:	465d      	mov	r5, fp
 801683e:	6826      	ldr	r6, [r4, #0]
 8016840:	f016 0610 	ands.w	r6, r6, #16
 8016844:	d17a      	bne.n	801693c <_scanf_float+0x3bc>
 8016846:	702e      	strb	r6, [r5, #0]
 8016848:	6823      	ldr	r3, [r4, #0]
 801684a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801684e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016852:	d142      	bne.n	80168da <_scanf_float+0x35a>
 8016854:	9b02      	ldr	r3, [sp, #8]
 8016856:	eba9 0303 	sub.w	r3, r9, r3
 801685a:	425a      	negs	r2, r3
 801685c:	2b00      	cmp	r3, #0
 801685e:	d149      	bne.n	80168f4 <_scanf_float+0x374>
 8016860:	2200      	movs	r2, #0
 8016862:	4641      	mov	r1, r8
 8016864:	4638      	mov	r0, r7
 8016866:	f000 ff23 	bl	80176b0 <_strtod_r>
 801686a:	6825      	ldr	r5, [r4, #0]
 801686c:	f8da 3000 	ldr.w	r3, [sl]
 8016870:	f015 0f02 	tst.w	r5, #2
 8016874:	f103 0204 	add.w	r2, r3, #4
 8016878:	ec59 8b10 	vmov	r8, r9, d0
 801687c:	f8ca 2000 	str.w	r2, [sl]
 8016880:	d043      	beq.n	801690a <_scanf_float+0x38a>
 8016882:	681b      	ldr	r3, [r3, #0]
 8016884:	e9c3 8900 	strd	r8, r9, [r3]
 8016888:	68e3      	ldr	r3, [r4, #12]
 801688a:	3301      	adds	r3, #1
 801688c:	60e3      	str	r3, [r4, #12]
 801688e:	e6be      	b.n	801660e <_scanf_float+0x8e>
 8016890:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016894:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016898:	4632      	mov	r2, r6
 801689a:	4638      	mov	r0, r7
 801689c:	4798      	blx	r3
 801689e:	6923      	ldr	r3, [r4, #16]
 80168a0:	3b01      	subs	r3, #1
 80168a2:	6123      	str	r3, [r4, #16]
 80168a4:	e7a6      	b.n	80167f4 <_scanf_float+0x274>
 80168a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80168aa:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80168ae:	4632      	mov	r2, r6
 80168b0:	4638      	mov	r0, r7
 80168b2:	4798      	blx	r3
 80168b4:	6923      	ldr	r3, [r4, #16]
 80168b6:	3b01      	subs	r3, #1
 80168b8:	6123      	str	r3, [r4, #16]
 80168ba:	4545      	cmp	r5, r8
 80168bc:	d8f3      	bhi.n	80168a6 <_scanf_float+0x326>
 80168be:	e6a5      	b.n	801660c <_scanf_float+0x8c>
 80168c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80168c4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80168c8:	4632      	mov	r2, r6
 80168ca:	4638      	mov	r0, r7
 80168cc:	4798      	blx	r3
 80168ce:	6923      	ldr	r3, [r4, #16]
 80168d0:	3b01      	subs	r3, #1
 80168d2:	6123      	str	r3, [r4, #16]
 80168d4:	4545      	cmp	r5, r8
 80168d6:	d8f3      	bhi.n	80168c0 <_scanf_float+0x340>
 80168d8:	e698      	b.n	801660c <_scanf_float+0x8c>
 80168da:	9b03      	ldr	r3, [sp, #12]
 80168dc:	2b00      	cmp	r3, #0
 80168de:	d0bf      	beq.n	8016860 <_scanf_float+0x2e0>
 80168e0:	9904      	ldr	r1, [sp, #16]
 80168e2:	230a      	movs	r3, #10
 80168e4:	4632      	mov	r2, r6
 80168e6:	3101      	adds	r1, #1
 80168e8:	4638      	mov	r0, r7
 80168ea:	f000 ff6d 	bl	80177c8 <_strtol_r>
 80168ee:	9b03      	ldr	r3, [sp, #12]
 80168f0:	9d04      	ldr	r5, [sp, #16]
 80168f2:	1ac2      	subs	r2, r0, r3
 80168f4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80168f8:	429d      	cmp	r5, r3
 80168fa:	bf28      	it	cs
 80168fc:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8016900:	490f      	ldr	r1, [pc, #60]	; (8016940 <_scanf_float+0x3c0>)
 8016902:	4628      	mov	r0, r5
 8016904:	f000 f868 	bl	80169d8 <siprintf>
 8016908:	e7aa      	b.n	8016860 <_scanf_float+0x2e0>
 801690a:	f015 0504 	ands.w	r5, r5, #4
 801690e:	d1b8      	bne.n	8016882 <_scanf_float+0x302>
 8016910:	681f      	ldr	r7, [r3, #0]
 8016912:	ee10 2a10 	vmov	r2, s0
 8016916:	464b      	mov	r3, r9
 8016918:	ee10 0a10 	vmov	r0, s0
 801691c:	4649      	mov	r1, r9
 801691e:	f7ea f915 	bl	8000b4c <__aeabi_dcmpun>
 8016922:	b128      	cbz	r0, 8016930 <_scanf_float+0x3b0>
 8016924:	4628      	mov	r0, r5
 8016926:	f000 f81d 	bl	8016964 <nanf>
 801692a:	ed87 0a00 	vstr	s0, [r7]
 801692e:	e7ab      	b.n	8016888 <_scanf_float+0x308>
 8016930:	4640      	mov	r0, r8
 8016932:	4649      	mov	r1, r9
 8016934:	f7ea f968 	bl	8000c08 <__aeabi_d2f>
 8016938:	6038      	str	r0, [r7, #0]
 801693a:	e7a5      	b.n	8016888 <_scanf_float+0x308>
 801693c:	2600      	movs	r6, #0
 801693e:	e666      	b.n	801660e <_scanf_float+0x8e>
 8016940:	0801beae 	.word	0x0801beae

08016944 <_sbrk_r>:
 8016944:	b538      	push	{r3, r4, r5, lr}
 8016946:	4c06      	ldr	r4, [pc, #24]	; (8016960 <_sbrk_r+0x1c>)
 8016948:	2300      	movs	r3, #0
 801694a:	4605      	mov	r5, r0
 801694c:	4608      	mov	r0, r1
 801694e:	6023      	str	r3, [r4, #0]
 8016950:	f7f4 fa8e 	bl	800ae70 <_sbrk>
 8016954:	1c43      	adds	r3, r0, #1
 8016956:	d102      	bne.n	801695e <_sbrk_r+0x1a>
 8016958:	6823      	ldr	r3, [r4, #0]
 801695a:	b103      	cbz	r3, 801695e <_sbrk_r+0x1a>
 801695c:	602b      	str	r3, [r5, #0]
 801695e:	bd38      	pop	{r3, r4, r5, pc}
 8016960:	20006e88 	.word	0x20006e88

08016964 <nanf>:
 8016964:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801696c <nanf+0x8>
 8016968:	4770      	bx	lr
 801696a:	bf00      	nop
 801696c:	7fc00000 	.word	0x7fc00000

08016970 <sniprintf>:
 8016970:	b40c      	push	{r2, r3}
 8016972:	b530      	push	{r4, r5, lr}
 8016974:	4b17      	ldr	r3, [pc, #92]	; (80169d4 <sniprintf+0x64>)
 8016976:	1e0c      	subs	r4, r1, #0
 8016978:	b09d      	sub	sp, #116	; 0x74
 801697a:	681d      	ldr	r5, [r3, #0]
 801697c:	da08      	bge.n	8016990 <sniprintf+0x20>
 801697e:	238b      	movs	r3, #139	; 0x8b
 8016980:	602b      	str	r3, [r5, #0]
 8016982:	f04f 30ff 	mov.w	r0, #4294967295
 8016986:	b01d      	add	sp, #116	; 0x74
 8016988:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801698c:	b002      	add	sp, #8
 801698e:	4770      	bx	lr
 8016990:	f44f 7302 	mov.w	r3, #520	; 0x208
 8016994:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016998:	bf14      	ite	ne
 801699a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801699e:	4623      	moveq	r3, r4
 80169a0:	9304      	str	r3, [sp, #16]
 80169a2:	9307      	str	r3, [sp, #28]
 80169a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80169a8:	9002      	str	r0, [sp, #8]
 80169aa:	9006      	str	r0, [sp, #24]
 80169ac:	f8ad 3016 	strh.w	r3, [sp, #22]
 80169b0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80169b2:	ab21      	add	r3, sp, #132	; 0x84
 80169b4:	a902      	add	r1, sp, #8
 80169b6:	4628      	mov	r0, r5
 80169b8:	9301      	str	r3, [sp, #4]
 80169ba:	f002 fd21 	bl	8019400 <_svfiprintf_r>
 80169be:	1c43      	adds	r3, r0, #1
 80169c0:	bfbc      	itt	lt
 80169c2:	238b      	movlt	r3, #139	; 0x8b
 80169c4:	602b      	strlt	r3, [r5, #0]
 80169c6:	2c00      	cmp	r4, #0
 80169c8:	d0dd      	beq.n	8016986 <sniprintf+0x16>
 80169ca:	9b02      	ldr	r3, [sp, #8]
 80169cc:	2200      	movs	r2, #0
 80169ce:	701a      	strb	r2, [r3, #0]
 80169d0:	e7d9      	b.n	8016986 <sniprintf+0x16>
 80169d2:	bf00      	nop
 80169d4:	20000e60 	.word	0x20000e60

080169d8 <siprintf>:
 80169d8:	b40e      	push	{r1, r2, r3}
 80169da:	b500      	push	{lr}
 80169dc:	b09c      	sub	sp, #112	; 0x70
 80169de:	ab1d      	add	r3, sp, #116	; 0x74
 80169e0:	9002      	str	r0, [sp, #8]
 80169e2:	9006      	str	r0, [sp, #24]
 80169e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80169e8:	4809      	ldr	r0, [pc, #36]	; (8016a10 <siprintf+0x38>)
 80169ea:	9107      	str	r1, [sp, #28]
 80169ec:	9104      	str	r1, [sp, #16]
 80169ee:	4909      	ldr	r1, [pc, #36]	; (8016a14 <siprintf+0x3c>)
 80169f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80169f4:	9105      	str	r1, [sp, #20]
 80169f6:	6800      	ldr	r0, [r0, #0]
 80169f8:	9301      	str	r3, [sp, #4]
 80169fa:	a902      	add	r1, sp, #8
 80169fc:	f002 fd00 	bl	8019400 <_svfiprintf_r>
 8016a00:	9b02      	ldr	r3, [sp, #8]
 8016a02:	2200      	movs	r2, #0
 8016a04:	701a      	strb	r2, [r3, #0]
 8016a06:	b01c      	add	sp, #112	; 0x70
 8016a08:	f85d eb04 	ldr.w	lr, [sp], #4
 8016a0c:	b003      	add	sp, #12
 8016a0e:	4770      	bx	lr
 8016a10:	20000e60 	.word	0x20000e60
 8016a14:	ffff0208 	.word	0xffff0208

08016a18 <siscanf>:
 8016a18:	b40e      	push	{r1, r2, r3}
 8016a1a:	b530      	push	{r4, r5, lr}
 8016a1c:	b09c      	sub	sp, #112	; 0x70
 8016a1e:	ac1f      	add	r4, sp, #124	; 0x7c
 8016a20:	f44f 7201 	mov.w	r2, #516	; 0x204
 8016a24:	f854 5b04 	ldr.w	r5, [r4], #4
 8016a28:	f8ad 2014 	strh.w	r2, [sp, #20]
 8016a2c:	9002      	str	r0, [sp, #8]
 8016a2e:	9006      	str	r0, [sp, #24]
 8016a30:	f7e9 fbd8 	bl	80001e4 <strlen>
 8016a34:	4b0b      	ldr	r3, [pc, #44]	; (8016a64 <siscanf+0x4c>)
 8016a36:	9003      	str	r0, [sp, #12]
 8016a38:	9007      	str	r0, [sp, #28]
 8016a3a:	930b      	str	r3, [sp, #44]	; 0x2c
 8016a3c:	480a      	ldr	r0, [pc, #40]	; (8016a68 <siscanf+0x50>)
 8016a3e:	9401      	str	r4, [sp, #4]
 8016a40:	2300      	movs	r3, #0
 8016a42:	930f      	str	r3, [sp, #60]	; 0x3c
 8016a44:	9314      	str	r3, [sp, #80]	; 0x50
 8016a46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016a4a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016a4e:	462a      	mov	r2, r5
 8016a50:	4623      	mov	r3, r4
 8016a52:	a902      	add	r1, sp, #8
 8016a54:	6800      	ldr	r0, [r0, #0]
 8016a56:	f002 fe25 	bl	80196a4 <__ssvfiscanf_r>
 8016a5a:	b01c      	add	sp, #112	; 0x70
 8016a5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016a60:	b003      	add	sp, #12
 8016a62:	4770      	bx	lr
 8016a64:	08016a6d 	.word	0x08016a6d
 8016a68:	20000e60 	.word	0x20000e60

08016a6c <__seofread>:
 8016a6c:	2000      	movs	r0, #0
 8016a6e:	4770      	bx	lr

08016a70 <strcat>:
 8016a70:	b510      	push	{r4, lr}
 8016a72:	4603      	mov	r3, r0
 8016a74:	781a      	ldrb	r2, [r3, #0]
 8016a76:	1c5c      	adds	r4, r3, #1
 8016a78:	b93a      	cbnz	r2, 8016a8a <strcat+0x1a>
 8016a7a:	3b01      	subs	r3, #1
 8016a7c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016a80:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016a84:	2a00      	cmp	r2, #0
 8016a86:	d1f9      	bne.n	8016a7c <strcat+0xc>
 8016a88:	bd10      	pop	{r4, pc}
 8016a8a:	4623      	mov	r3, r4
 8016a8c:	e7f2      	b.n	8016a74 <strcat+0x4>

08016a8e <sulp>:
 8016a8e:	b570      	push	{r4, r5, r6, lr}
 8016a90:	4604      	mov	r4, r0
 8016a92:	460d      	mov	r5, r1
 8016a94:	ec45 4b10 	vmov	d0, r4, r5
 8016a98:	4616      	mov	r6, r2
 8016a9a:	f002 fb15 	bl	80190c8 <__ulp>
 8016a9e:	ec51 0b10 	vmov	r0, r1, d0
 8016aa2:	b17e      	cbz	r6, 8016ac4 <sulp+0x36>
 8016aa4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8016aa8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016aac:	2b00      	cmp	r3, #0
 8016aae:	dd09      	ble.n	8016ac4 <sulp+0x36>
 8016ab0:	051b      	lsls	r3, r3, #20
 8016ab2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8016ab6:	2400      	movs	r4, #0
 8016ab8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8016abc:	4622      	mov	r2, r4
 8016abe:	462b      	mov	r3, r5
 8016ac0:	f7e9 fdaa 	bl	8000618 <__aeabi_dmul>
 8016ac4:	bd70      	pop	{r4, r5, r6, pc}
	...

08016ac8 <_strtod_l>:
 8016ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016acc:	461f      	mov	r7, r3
 8016ace:	b0a1      	sub	sp, #132	; 0x84
 8016ad0:	2300      	movs	r3, #0
 8016ad2:	4681      	mov	r9, r0
 8016ad4:	4638      	mov	r0, r7
 8016ad6:	460e      	mov	r6, r1
 8016ad8:	9217      	str	r2, [sp, #92]	; 0x5c
 8016ada:	931c      	str	r3, [sp, #112]	; 0x70
 8016adc:	f002 f804 	bl	8018ae8 <__localeconv_l>
 8016ae0:	4680      	mov	r8, r0
 8016ae2:	6800      	ldr	r0, [r0, #0]
 8016ae4:	f7e9 fb7e 	bl	80001e4 <strlen>
 8016ae8:	f04f 0a00 	mov.w	sl, #0
 8016aec:	4604      	mov	r4, r0
 8016aee:	f04f 0b00 	mov.w	fp, #0
 8016af2:	961b      	str	r6, [sp, #108]	; 0x6c
 8016af4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016af6:	781a      	ldrb	r2, [r3, #0]
 8016af8:	2a0d      	cmp	r2, #13
 8016afa:	d832      	bhi.n	8016b62 <_strtod_l+0x9a>
 8016afc:	2a09      	cmp	r2, #9
 8016afe:	d236      	bcs.n	8016b6e <_strtod_l+0xa6>
 8016b00:	2a00      	cmp	r2, #0
 8016b02:	d03e      	beq.n	8016b82 <_strtod_l+0xba>
 8016b04:	2300      	movs	r3, #0
 8016b06:	930d      	str	r3, [sp, #52]	; 0x34
 8016b08:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8016b0a:	782b      	ldrb	r3, [r5, #0]
 8016b0c:	2b30      	cmp	r3, #48	; 0x30
 8016b0e:	f040 80ac 	bne.w	8016c6a <_strtod_l+0x1a2>
 8016b12:	786b      	ldrb	r3, [r5, #1]
 8016b14:	2b58      	cmp	r3, #88	; 0x58
 8016b16:	d001      	beq.n	8016b1c <_strtod_l+0x54>
 8016b18:	2b78      	cmp	r3, #120	; 0x78
 8016b1a:	d167      	bne.n	8016bec <_strtod_l+0x124>
 8016b1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016b1e:	9301      	str	r3, [sp, #4]
 8016b20:	ab1c      	add	r3, sp, #112	; 0x70
 8016b22:	9300      	str	r3, [sp, #0]
 8016b24:	9702      	str	r7, [sp, #8]
 8016b26:	ab1d      	add	r3, sp, #116	; 0x74
 8016b28:	4a88      	ldr	r2, [pc, #544]	; (8016d4c <_strtod_l+0x284>)
 8016b2a:	a91b      	add	r1, sp, #108	; 0x6c
 8016b2c:	4648      	mov	r0, r9
 8016b2e:	f001 fcf2 	bl	8018516 <__gethex>
 8016b32:	f010 0407 	ands.w	r4, r0, #7
 8016b36:	4606      	mov	r6, r0
 8016b38:	d005      	beq.n	8016b46 <_strtod_l+0x7e>
 8016b3a:	2c06      	cmp	r4, #6
 8016b3c:	d12b      	bne.n	8016b96 <_strtod_l+0xce>
 8016b3e:	3501      	adds	r5, #1
 8016b40:	2300      	movs	r3, #0
 8016b42:	951b      	str	r5, [sp, #108]	; 0x6c
 8016b44:	930d      	str	r3, [sp, #52]	; 0x34
 8016b46:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016b48:	2b00      	cmp	r3, #0
 8016b4a:	f040 859a 	bne.w	8017682 <_strtod_l+0xbba>
 8016b4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016b50:	b1e3      	cbz	r3, 8016b8c <_strtod_l+0xc4>
 8016b52:	4652      	mov	r2, sl
 8016b54:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8016b58:	ec43 2b10 	vmov	d0, r2, r3
 8016b5c:	b021      	add	sp, #132	; 0x84
 8016b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b62:	2a2b      	cmp	r2, #43	; 0x2b
 8016b64:	d015      	beq.n	8016b92 <_strtod_l+0xca>
 8016b66:	2a2d      	cmp	r2, #45	; 0x2d
 8016b68:	d004      	beq.n	8016b74 <_strtod_l+0xac>
 8016b6a:	2a20      	cmp	r2, #32
 8016b6c:	d1ca      	bne.n	8016b04 <_strtod_l+0x3c>
 8016b6e:	3301      	adds	r3, #1
 8016b70:	931b      	str	r3, [sp, #108]	; 0x6c
 8016b72:	e7bf      	b.n	8016af4 <_strtod_l+0x2c>
 8016b74:	2201      	movs	r2, #1
 8016b76:	920d      	str	r2, [sp, #52]	; 0x34
 8016b78:	1c5a      	adds	r2, r3, #1
 8016b7a:	921b      	str	r2, [sp, #108]	; 0x6c
 8016b7c:	785b      	ldrb	r3, [r3, #1]
 8016b7e:	2b00      	cmp	r3, #0
 8016b80:	d1c2      	bne.n	8016b08 <_strtod_l+0x40>
 8016b82:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016b84:	961b      	str	r6, [sp, #108]	; 0x6c
 8016b86:	2b00      	cmp	r3, #0
 8016b88:	f040 8579 	bne.w	801767e <_strtod_l+0xbb6>
 8016b8c:	4652      	mov	r2, sl
 8016b8e:	465b      	mov	r3, fp
 8016b90:	e7e2      	b.n	8016b58 <_strtod_l+0x90>
 8016b92:	2200      	movs	r2, #0
 8016b94:	e7ef      	b.n	8016b76 <_strtod_l+0xae>
 8016b96:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016b98:	b13a      	cbz	r2, 8016baa <_strtod_l+0xe2>
 8016b9a:	2135      	movs	r1, #53	; 0x35
 8016b9c:	a81e      	add	r0, sp, #120	; 0x78
 8016b9e:	f002 fb8b 	bl	80192b8 <__copybits>
 8016ba2:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016ba4:	4648      	mov	r0, r9
 8016ba6:	f001 fff7 	bl	8018b98 <_Bfree>
 8016baa:	3c01      	subs	r4, #1
 8016bac:	2c04      	cmp	r4, #4
 8016bae:	d806      	bhi.n	8016bbe <_strtod_l+0xf6>
 8016bb0:	e8df f004 	tbb	[pc, r4]
 8016bb4:	1714030a 	.word	0x1714030a
 8016bb8:	0a          	.byte	0x0a
 8016bb9:	00          	.byte	0x00
 8016bba:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8016bbe:	0730      	lsls	r0, r6, #28
 8016bc0:	d5c1      	bpl.n	8016b46 <_strtod_l+0x7e>
 8016bc2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8016bc6:	e7be      	b.n	8016b46 <_strtod_l+0x7e>
 8016bc8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8016bcc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8016bce:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8016bd2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8016bd6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8016bda:	e7f0      	b.n	8016bbe <_strtod_l+0xf6>
 8016bdc:	f8df b170 	ldr.w	fp, [pc, #368]	; 8016d50 <_strtod_l+0x288>
 8016be0:	e7ed      	b.n	8016bbe <_strtod_l+0xf6>
 8016be2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8016be6:	f04f 3aff 	mov.w	sl, #4294967295
 8016bea:	e7e8      	b.n	8016bbe <_strtod_l+0xf6>
 8016bec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016bee:	1c5a      	adds	r2, r3, #1
 8016bf0:	921b      	str	r2, [sp, #108]	; 0x6c
 8016bf2:	785b      	ldrb	r3, [r3, #1]
 8016bf4:	2b30      	cmp	r3, #48	; 0x30
 8016bf6:	d0f9      	beq.n	8016bec <_strtod_l+0x124>
 8016bf8:	2b00      	cmp	r3, #0
 8016bfa:	d0a4      	beq.n	8016b46 <_strtod_l+0x7e>
 8016bfc:	2301      	movs	r3, #1
 8016bfe:	2500      	movs	r5, #0
 8016c00:	9306      	str	r3, [sp, #24]
 8016c02:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016c04:	9308      	str	r3, [sp, #32]
 8016c06:	9507      	str	r5, [sp, #28]
 8016c08:	9505      	str	r5, [sp, #20]
 8016c0a:	220a      	movs	r2, #10
 8016c0c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8016c0e:	7807      	ldrb	r7, [r0, #0]
 8016c10:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8016c14:	b2d9      	uxtb	r1, r3
 8016c16:	2909      	cmp	r1, #9
 8016c18:	d929      	bls.n	8016c6e <_strtod_l+0x1a6>
 8016c1a:	4622      	mov	r2, r4
 8016c1c:	f8d8 1000 	ldr.w	r1, [r8]
 8016c20:	f003 f81a 	bl	8019c58 <strncmp>
 8016c24:	2800      	cmp	r0, #0
 8016c26:	d031      	beq.n	8016c8c <_strtod_l+0x1c4>
 8016c28:	2000      	movs	r0, #0
 8016c2a:	9c05      	ldr	r4, [sp, #20]
 8016c2c:	9004      	str	r0, [sp, #16]
 8016c2e:	463b      	mov	r3, r7
 8016c30:	4602      	mov	r2, r0
 8016c32:	2b65      	cmp	r3, #101	; 0x65
 8016c34:	d001      	beq.n	8016c3a <_strtod_l+0x172>
 8016c36:	2b45      	cmp	r3, #69	; 0x45
 8016c38:	d114      	bne.n	8016c64 <_strtod_l+0x19c>
 8016c3a:	b924      	cbnz	r4, 8016c46 <_strtod_l+0x17e>
 8016c3c:	b910      	cbnz	r0, 8016c44 <_strtod_l+0x17c>
 8016c3e:	9b06      	ldr	r3, [sp, #24]
 8016c40:	2b00      	cmp	r3, #0
 8016c42:	d09e      	beq.n	8016b82 <_strtod_l+0xba>
 8016c44:	2400      	movs	r4, #0
 8016c46:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8016c48:	1c73      	adds	r3, r6, #1
 8016c4a:	931b      	str	r3, [sp, #108]	; 0x6c
 8016c4c:	7873      	ldrb	r3, [r6, #1]
 8016c4e:	2b2b      	cmp	r3, #43	; 0x2b
 8016c50:	d078      	beq.n	8016d44 <_strtod_l+0x27c>
 8016c52:	2b2d      	cmp	r3, #45	; 0x2d
 8016c54:	d070      	beq.n	8016d38 <_strtod_l+0x270>
 8016c56:	f04f 0c00 	mov.w	ip, #0
 8016c5a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8016c5e:	2f09      	cmp	r7, #9
 8016c60:	d97c      	bls.n	8016d5c <_strtod_l+0x294>
 8016c62:	961b      	str	r6, [sp, #108]	; 0x6c
 8016c64:	f04f 0e00 	mov.w	lr, #0
 8016c68:	e09a      	b.n	8016da0 <_strtod_l+0x2d8>
 8016c6a:	2300      	movs	r3, #0
 8016c6c:	e7c7      	b.n	8016bfe <_strtod_l+0x136>
 8016c6e:	9905      	ldr	r1, [sp, #20]
 8016c70:	2908      	cmp	r1, #8
 8016c72:	bfdd      	ittte	le
 8016c74:	9907      	ldrle	r1, [sp, #28]
 8016c76:	fb02 3301 	mlale	r3, r2, r1, r3
 8016c7a:	9307      	strle	r3, [sp, #28]
 8016c7c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8016c80:	9b05      	ldr	r3, [sp, #20]
 8016c82:	3001      	adds	r0, #1
 8016c84:	3301      	adds	r3, #1
 8016c86:	9305      	str	r3, [sp, #20]
 8016c88:	901b      	str	r0, [sp, #108]	; 0x6c
 8016c8a:	e7bf      	b.n	8016c0c <_strtod_l+0x144>
 8016c8c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016c8e:	191a      	adds	r2, r3, r4
 8016c90:	921b      	str	r2, [sp, #108]	; 0x6c
 8016c92:	9a05      	ldr	r2, [sp, #20]
 8016c94:	5d1b      	ldrb	r3, [r3, r4]
 8016c96:	2a00      	cmp	r2, #0
 8016c98:	d037      	beq.n	8016d0a <_strtod_l+0x242>
 8016c9a:	9c05      	ldr	r4, [sp, #20]
 8016c9c:	4602      	mov	r2, r0
 8016c9e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8016ca2:	2909      	cmp	r1, #9
 8016ca4:	d913      	bls.n	8016cce <_strtod_l+0x206>
 8016ca6:	2101      	movs	r1, #1
 8016ca8:	9104      	str	r1, [sp, #16]
 8016caa:	e7c2      	b.n	8016c32 <_strtod_l+0x16a>
 8016cac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016cae:	1c5a      	adds	r2, r3, #1
 8016cb0:	921b      	str	r2, [sp, #108]	; 0x6c
 8016cb2:	785b      	ldrb	r3, [r3, #1]
 8016cb4:	3001      	adds	r0, #1
 8016cb6:	2b30      	cmp	r3, #48	; 0x30
 8016cb8:	d0f8      	beq.n	8016cac <_strtod_l+0x1e4>
 8016cba:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8016cbe:	2a08      	cmp	r2, #8
 8016cc0:	f200 84e4 	bhi.w	801768c <_strtod_l+0xbc4>
 8016cc4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8016cc6:	9208      	str	r2, [sp, #32]
 8016cc8:	4602      	mov	r2, r0
 8016cca:	2000      	movs	r0, #0
 8016ccc:	4604      	mov	r4, r0
 8016cce:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8016cd2:	f100 0101 	add.w	r1, r0, #1
 8016cd6:	d012      	beq.n	8016cfe <_strtod_l+0x236>
 8016cd8:	440a      	add	r2, r1
 8016cda:	eb00 0c04 	add.w	ip, r0, r4
 8016cde:	4621      	mov	r1, r4
 8016ce0:	270a      	movs	r7, #10
 8016ce2:	458c      	cmp	ip, r1
 8016ce4:	d113      	bne.n	8016d0e <_strtod_l+0x246>
 8016ce6:	1821      	adds	r1, r4, r0
 8016ce8:	2908      	cmp	r1, #8
 8016cea:	f104 0401 	add.w	r4, r4, #1
 8016cee:	4404      	add	r4, r0
 8016cf0:	dc19      	bgt.n	8016d26 <_strtod_l+0x25e>
 8016cf2:	9b07      	ldr	r3, [sp, #28]
 8016cf4:	210a      	movs	r1, #10
 8016cf6:	fb01 e303 	mla	r3, r1, r3, lr
 8016cfa:	9307      	str	r3, [sp, #28]
 8016cfc:	2100      	movs	r1, #0
 8016cfe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016d00:	1c58      	adds	r0, r3, #1
 8016d02:	901b      	str	r0, [sp, #108]	; 0x6c
 8016d04:	785b      	ldrb	r3, [r3, #1]
 8016d06:	4608      	mov	r0, r1
 8016d08:	e7c9      	b.n	8016c9e <_strtod_l+0x1d6>
 8016d0a:	9805      	ldr	r0, [sp, #20]
 8016d0c:	e7d3      	b.n	8016cb6 <_strtod_l+0x1ee>
 8016d0e:	2908      	cmp	r1, #8
 8016d10:	f101 0101 	add.w	r1, r1, #1
 8016d14:	dc03      	bgt.n	8016d1e <_strtod_l+0x256>
 8016d16:	9b07      	ldr	r3, [sp, #28]
 8016d18:	437b      	muls	r3, r7
 8016d1a:	9307      	str	r3, [sp, #28]
 8016d1c:	e7e1      	b.n	8016ce2 <_strtod_l+0x21a>
 8016d1e:	2910      	cmp	r1, #16
 8016d20:	bfd8      	it	le
 8016d22:	437d      	mulle	r5, r7
 8016d24:	e7dd      	b.n	8016ce2 <_strtod_l+0x21a>
 8016d26:	2c10      	cmp	r4, #16
 8016d28:	bfdc      	itt	le
 8016d2a:	210a      	movle	r1, #10
 8016d2c:	fb01 e505 	mlale	r5, r1, r5, lr
 8016d30:	e7e4      	b.n	8016cfc <_strtod_l+0x234>
 8016d32:	2301      	movs	r3, #1
 8016d34:	9304      	str	r3, [sp, #16]
 8016d36:	e781      	b.n	8016c3c <_strtod_l+0x174>
 8016d38:	f04f 0c01 	mov.w	ip, #1
 8016d3c:	1cb3      	adds	r3, r6, #2
 8016d3e:	931b      	str	r3, [sp, #108]	; 0x6c
 8016d40:	78b3      	ldrb	r3, [r6, #2]
 8016d42:	e78a      	b.n	8016c5a <_strtod_l+0x192>
 8016d44:	f04f 0c00 	mov.w	ip, #0
 8016d48:	e7f8      	b.n	8016d3c <_strtod_l+0x274>
 8016d4a:	bf00      	nop
 8016d4c:	0801beb4 	.word	0x0801beb4
 8016d50:	7ff00000 	.word	0x7ff00000
 8016d54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016d56:	1c5f      	adds	r7, r3, #1
 8016d58:	971b      	str	r7, [sp, #108]	; 0x6c
 8016d5a:	785b      	ldrb	r3, [r3, #1]
 8016d5c:	2b30      	cmp	r3, #48	; 0x30
 8016d5e:	d0f9      	beq.n	8016d54 <_strtod_l+0x28c>
 8016d60:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8016d64:	2f08      	cmp	r7, #8
 8016d66:	f63f af7d 	bhi.w	8016c64 <_strtod_l+0x19c>
 8016d6a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8016d6e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016d70:	930a      	str	r3, [sp, #40]	; 0x28
 8016d72:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016d74:	1c5f      	adds	r7, r3, #1
 8016d76:	971b      	str	r7, [sp, #108]	; 0x6c
 8016d78:	785b      	ldrb	r3, [r3, #1]
 8016d7a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8016d7e:	f1b8 0f09 	cmp.w	r8, #9
 8016d82:	d937      	bls.n	8016df4 <_strtod_l+0x32c>
 8016d84:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016d86:	1a7f      	subs	r7, r7, r1
 8016d88:	2f08      	cmp	r7, #8
 8016d8a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8016d8e:	dc37      	bgt.n	8016e00 <_strtod_l+0x338>
 8016d90:	45be      	cmp	lr, r7
 8016d92:	bfa8      	it	ge
 8016d94:	46be      	movge	lr, r7
 8016d96:	f1bc 0f00 	cmp.w	ip, #0
 8016d9a:	d001      	beq.n	8016da0 <_strtod_l+0x2d8>
 8016d9c:	f1ce 0e00 	rsb	lr, lr, #0
 8016da0:	2c00      	cmp	r4, #0
 8016da2:	d151      	bne.n	8016e48 <_strtod_l+0x380>
 8016da4:	2800      	cmp	r0, #0
 8016da6:	f47f aece 	bne.w	8016b46 <_strtod_l+0x7e>
 8016daa:	9a06      	ldr	r2, [sp, #24]
 8016dac:	2a00      	cmp	r2, #0
 8016dae:	f47f aeca 	bne.w	8016b46 <_strtod_l+0x7e>
 8016db2:	9a04      	ldr	r2, [sp, #16]
 8016db4:	2a00      	cmp	r2, #0
 8016db6:	f47f aee4 	bne.w	8016b82 <_strtod_l+0xba>
 8016dba:	2b4e      	cmp	r3, #78	; 0x4e
 8016dbc:	d027      	beq.n	8016e0e <_strtod_l+0x346>
 8016dbe:	dc21      	bgt.n	8016e04 <_strtod_l+0x33c>
 8016dc0:	2b49      	cmp	r3, #73	; 0x49
 8016dc2:	f47f aede 	bne.w	8016b82 <_strtod_l+0xba>
 8016dc6:	49a0      	ldr	r1, [pc, #640]	; (8017048 <_strtod_l+0x580>)
 8016dc8:	a81b      	add	r0, sp, #108	; 0x6c
 8016dca:	f001 fdd7 	bl	801897c <__match>
 8016dce:	2800      	cmp	r0, #0
 8016dd0:	f43f aed7 	beq.w	8016b82 <_strtod_l+0xba>
 8016dd4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016dd6:	499d      	ldr	r1, [pc, #628]	; (801704c <_strtod_l+0x584>)
 8016dd8:	3b01      	subs	r3, #1
 8016dda:	a81b      	add	r0, sp, #108	; 0x6c
 8016ddc:	931b      	str	r3, [sp, #108]	; 0x6c
 8016dde:	f001 fdcd 	bl	801897c <__match>
 8016de2:	b910      	cbnz	r0, 8016dea <_strtod_l+0x322>
 8016de4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016de6:	3301      	adds	r3, #1
 8016de8:	931b      	str	r3, [sp, #108]	; 0x6c
 8016dea:	f8df b274 	ldr.w	fp, [pc, #628]	; 8017060 <_strtod_l+0x598>
 8016dee:	f04f 0a00 	mov.w	sl, #0
 8016df2:	e6a8      	b.n	8016b46 <_strtod_l+0x7e>
 8016df4:	210a      	movs	r1, #10
 8016df6:	fb01 3e0e 	mla	lr, r1, lr, r3
 8016dfa:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8016dfe:	e7b8      	b.n	8016d72 <_strtod_l+0x2aa>
 8016e00:	46be      	mov	lr, r7
 8016e02:	e7c8      	b.n	8016d96 <_strtod_l+0x2ce>
 8016e04:	2b69      	cmp	r3, #105	; 0x69
 8016e06:	d0de      	beq.n	8016dc6 <_strtod_l+0x2fe>
 8016e08:	2b6e      	cmp	r3, #110	; 0x6e
 8016e0a:	f47f aeba 	bne.w	8016b82 <_strtod_l+0xba>
 8016e0e:	4990      	ldr	r1, [pc, #576]	; (8017050 <_strtod_l+0x588>)
 8016e10:	a81b      	add	r0, sp, #108	; 0x6c
 8016e12:	f001 fdb3 	bl	801897c <__match>
 8016e16:	2800      	cmp	r0, #0
 8016e18:	f43f aeb3 	beq.w	8016b82 <_strtod_l+0xba>
 8016e1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016e1e:	781b      	ldrb	r3, [r3, #0]
 8016e20:	2b28      	cmp	r3, #40	; 0x28
 8016e22:	d10e      	bne.n	8016e42 <_strtod_l+0x37a>
 8016e24:	aa1e      	add	r2, sp, #120	; 0x78
 8016e26:	498b      	ldr	r1, [pc, #556]	; (8017054 <_strtod_l+0x58c>)
 8016e28:	a81b      	add	r0, sp, #108	; 0x6c
 8016e2a:	f001 fdbb 	bl	80189a4 <__hexnan>
 8016e2e:	2805      	cmp	r0, #5
 8016e30:	d107      	bne.n	8016e42 <_strtod_l+0x37a>
 8016e32:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016e34:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8016e38:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8016e3c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8016e40:	e681      	b.n	8016b46 <_strtod_l+0x7e>
 8016e42:	f8df b224 	ldr.w	fp, [pc, #548]	; 8017068 <_strtod_l+0x5a0>
 8016e46:	e7d2      	b.n	8016dee <_strtod_l+0x326>
 8016e48:	ebae 0302 	sub.w	r3, lr, r2
 8016e4c:	9306      	str	r3, [sp, #24]
 8016e4e:	9b05      	ldr	r3, [sp, #20]
 8016e50:	9807      	ldr	r0, [sp, #28]
 8016e52:	2b00      	cmp	r3, #0
 8016e54:	bf08      	it	eq
 8016e56:	4623      	moveq	r3, r4
 8016e58:	2c10      	cmp	r4, #16
 8016e5a:	9305      	str	r3, [sp, #20]
 8016e5c:	46a0      	mov	r8, r4
 8016e5e:	bfa8      	it	ge
 8016e60:	f04f 0810 	movge.w	r8, #16
 8016e64:	f7e9 fb5e 	bl	8000524 <__aeabi_ui2d>
 8016e68:	2c09      	cmp	r4, #9
 8016e6a:	4682      	mov	sl, r0
 8016e6c:	468b      	mov	fp, r1
 8016e6e:	dc13      	bgt.n	8016e98 <_strtod_l+0x3d0>
 8016e70:	9b06      	ldr	r3, [sp, #24]
 8016e72:	2b00      	cmp	r3, #0
 8016e74:	f43f ae67 	beq.w	8016b46 <_strtod_l+0x7e>
 8016e78:	9b06      	ldr	r3, [sp, #24]
 8016e7a:	dd7a      	ble.n	8016f72 <_strtod_l+0x4aa>
 8016e7c:	2b16      	cmp	r3, #22
 8016e7e:	dc61      	bgt.n	8016f44 <_strtod_l+0x47c>
 8016e80:	4a75      	ldr	r2, [pc, #468]	; (8017058 <_strtod_l+0x590>)
 8016e82:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8016e86:	e9de 0100 	ldrd	r0, r1, [lr]
 8016e8a:	4652      	mov	r2, sl
 8016e8c:	465b      	mov	r3, fp
 8016e8e:	f7e9 fbc3 	bl	8000618 <__aeabi_dmul>
 8016e92:	4682      	mov	sl, r0
 8016e94:	468b      	mov	fp, r1
 8016e96:	e656      	b.n	8016b46 <_strtod_l+0x7e>
 8016e98:	4b6f      	ldr	r3, [pc, #444]	; (8017058 <_strtod_l+0x590>)
 8016e9a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8016e9e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8016ea2:	f7e9 fbb9 	bl	8000618 <__aeabi_dmul>
 8016ea6:	4606      	mov	r6, r0
 8016ea8:	4628      	mov	r0, r5
 8016eaa:	460f      	mov	r7, r1
 8016eac:	f7e9 fb3a 	bl	8000524 <__aeabi_ui2d>
 8016eb0:	4602      	mov	r2, r0
 8016eb2:	460b      	mov	r3, r1
 8016eb4:	4630      	mov	r0, r6
 8016eb6:	4639      	mov	r1, r7
 8016eb8:	f7e9 f9f8 	bl	80002ac <__adddf3>
 8016ebc:	2c0f      	cmp	r4, #15
 8016ebe:	4682      	mov	sl, r0
 8016ec0:	468b      	mov	fp, r1
 8016ec2:	ddd5      	ble.n	8016e70 <_strtod_l+0x3a8>
 8016ec4:	9b06      	ldr	r3, [sp, #24]
 8016ec6:	eba4 0808 	sub.w	r8, r4, r8
 8016eca:	4498      	add	r8, r3
 8016ecc:	f1b8 0f00 	cmp.w	r8, #0
 8016ed0:	f340 8096 	ble.w	8017000 <_strtod_l+0x538>
 8016ed4:	f018 030f 	ands.w	r3, r8, #15
 8016ed8:	d00a      	beq.n	8016ef0 <_strtod_l+0x428>
 8016eda:	495f      	ldr	r1, [pc, #380]	; (8017058 <_strtod_l+0x590>)
 8016edc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8016ee0:	4652      	mov	r2, sl
 8016ee2:	465b      	mov	r3, fp
 8016ee4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016ee8:	f7e9 fb96 	bl	8000618 <__aeabi_dmul>
 8016eec:	4682      	mov	sl, r0
 8016eee:	468b      	mov	fp, r1
 8016ef0:	f038 080f 	bics.w	r8, r8, #15
 8016ef4:	d073      	beq.n	8016fde <_strtod_l+0x516>
 8016ef6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8016efa:	dd47      	ble.n	8016f8c <_strtod_l+0x4c4>
 8016efc:	2400      	movs	r4, #0
 8016efe:	46a0      	mov	r8, r4
 8016f00:	9407      	str	r4, [sp, #28]
 8016f02:	9405      	str	r4, [sp, #20]
 8016f04:	2322      	movs	r3, #34	; 0x22
 8016f06:	f8df b158 	ldr.w	fp, [pc, #344]	; 8017060 <_strtod_l+0x598>
 8016f0a:	f8c9 3000 	str.w	r3, [r9]
 8016f0e:	f04f 0a00 	mov.w	sl, #0
 8016f12:	9b07      	ldr	r3, [sp, #28]
 8016f14:	2b00      	cmp	r3, #0
 8016f16:	f43f ae16 	beq.w	8016b46 <_strtod_l+0x7e>
 8016f1a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016f1c:	4648      	mov	r0, r9
 8016f1e:	f001 fe3b 	bl	8018b98 <_Bfree>
 8016f22:	9905      	ldr	r1, [sp, #20]
 8016f24:	4648      	mov	r0, r9
 8016f26:	f001 fe37 	bl	8018b98 <_Bfree>
 8016f2a:	4641      	mov	r1, r8
 8016f2c:	4648      	mov	r0, r9
 8016f2e:	f001 fe33 	bl	8018b98 <_Bfree>
 8016f32:	9907      	ldr	r1, [sp, #28]
 8016f34:	4648      	mov	r0, r9
 8016f36:	f001 fe2f 	bl	8018b98 <_Bfree>
 8016f3a:	4621      	mov	r1, r4
 8016f3c:	4648      	mov	r0, r9
 8016f3e:	f001 fe2b 	bl	8018b98 <_Bfree>
 8016f42:	e600      	b.n	8016b46 <_strtod_l+0x7e>
 8016f44:	9a06      	ldr	r2, [sp, #24]
 8016f46:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8016f4a:	4293      	cmp	r3, r2
 8016f4c:	dbba      	blt.n	8016ec4 <_strtod_l+0x3fc>
 8016f4e:	4d42      	ldr	r5, [pc, #264]	; (8017058 <_strtod_l+0x590>)
 8016f50:	f1c4 040f 	rsb	r4, r4, #15
 8016f54:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8016f58:	4652      	mov	r2, sl
 8016f5a:	465b      	mov	r3, fp
 8016f5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016f60:	f7e9 fb5a 	bl	8000618 <__aeabi_dmul>
 8016f64:	9b06      	ldr	r3, [sp, #24]
 8016f66:	1b1c      	subs	r4, r3, r4
 8016f68:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8016f6c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016f70:	e78d      	b.n	8016e8e <_strtod_l+0x3c6>
 8016f72:	f113 0f16 	cmn.w	r3, #22
 8016f76:	dba5      	blt.n	8016ec4 <_strtod_l+0x3fc>
 8016f78:	4a37      	ldr	r2, [pc, #220]	; (8017058 <_strtod_l+0x590>)
 8016f7a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8016f7e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8016f82:	4650      	mov	r0, sl
 8016f84:	4659      	mov	r1, fp
 8016f86:	f7e9 fc71 	bl	800086c <__aeabi_ddiv>
 8016f8a:	e782      	b.n	8016e92 <_strtod_l+0x3ca>
 8016f8c:	2300      	movs	r3, #0
 8016f8e:	4e33      	ldr	r6, [pc, #204]	; (801705c <_strtod_l+0x594>)
 8016f90:	ea4f 1828 	mov.w	r8, r8, asr #4
 8016f94:	4650      	mov	r0, sl
 8016f96:	4659      	mov	r1, fp
 8016f98:	461d      	mov	r5, r3
 8016f9a:	f1b8 0f01 	cmp.w	r8, #1
 8016f9e:	dc21      	bgt.n	8016fe4 <_strtod_l+0x51c>
 8016fa0:	b10b      	cbz	r3, 8016fa6 <_strtod_l+0x4de>
 8016fa2:	4682      	mov	sl, r0
 8016fa4:	468b      	mov	fp, r1
 8016fa6:	4b2d      	ldr	r3, [pc, #180]	; (801705c <_strtod_l+0x594>)
 8016fa8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8016fac:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8016fb0:	4652      	mov	r2, sl
 8016fb2:	465b      	mov	r3, fp
 8016fb4:	e9d5 0100 	ldrd	r0, r1, [r5]
 8016fb8:	f7e9 fb2e 	bl	8000618 <__aeabi_dmul>
 8016fbc:	4b28      	ldr	r3, [pc, #160]	; (8017060 <_strtod_l+0x598>)
 8016fbe:	460a      	mov	r2, r1
 8016fc0:	400b      	ands	r3, r1
 8016fc2:	4928      	ldr	r1, [pc, #160]	; (8017064 <_strtod_l+0x59c>)
 8016fc4:	428b      	cmp	r3, r1
 8016fc6:	4682      	mov	sl, r0
 8016fc8:	d898      	bhi.n	8016efc <_strtod_l+0x434>
 8016fca:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8016fce:	428b      	cmp	r3, r1
 8016fd0:	bf86      	itte	hi
 8016fd2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801706c <_strtod_l+0x5a4>
 8016fd6:	f04f 3aff 	movhi.w	sl, #4294967295
 8016fda:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8016fde:	2300      	movs	r3, #0
 8016fe0:	9304      	str	r3, [sp, #16]
 8016fe2:	e077      	b.n	80170d4 <_strtod_l+0x60c>
 8016fe4:	f018 0f01 	tst.w	r8, #1
 8016fe8:	d006      	beq.n	8016ff8 <_strtod_l+0x530>
 8016fea:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8016fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ff2:	f7e9 fb11 	bl	8000618 <__aeabi_dmul>
 8016ff6:	2301      	movs	r3, #1
 8016ff8:	3501      	adds	r5, #1
 8016ffa:	ea4f 0868 	mov.w	r8, r8, asr #1
 8016ffe:	e7cc      	b.n	8016f9a <_strtod_l+0x4d2>
 8017000:	d0ed      	beq.n	8016fde <_strtod_l+0x516>
 8017002:	f1c8 0800 	rsb	r8, r8, #0
 8017006:	f018 020f 	ands.w	r2, r8, #15
 801700a:	d00a      	beq.n	8017022 <_strtod_l+0x55a>
 801700c:	4b12      	ldr	r3, [pc, #72]	; (8017058 <_strtod_l+0x590>)
 801700e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017012:	4650      	mov	r0, sl
 8017014:	4659      	mov	r1, fp
 8017016:	e9d3 2300 	ldrd	r2, r3, [r3]
 801701a:	f7e9 fc27 	bl	800086c <__aeabi_ddiv>
 801701e:	4682      	mov	sl, r0
 8017020:	468b      	mov	fp, r1
 8017022:	ea5f 1828 	movs.w	r8, r8, asr #4
 8017026:	d0da      	beq.n	8016fde <_strtod_l+0x516>
 8017028:	f1b8 0f1f 	cmp.w	r8, #31
 801702c:	dd20      	ble.n	8017070 <_strtod_l+0x5a8>
 801702e:	2400      	movs	r4, #0
 8017030:	46a0      	mov	r8, r4
 8017032:	9407      	str	r4, [sp, #28]
 8017034:	9405      	str	r4, [sp, #20]
 8017036:	2322      	movs	r3, #34	; 0x22
 8017038:	f04f 0a00 	mov.w	sl, #0
 801703c:	f04f 0b00 	mov.w	fp, #0
 8017040:	f8c9 3000 	str.w	r3, [r9]
 8017044:	e765      	b.n	8016f12 <_strtod_l+0x44a>
 8017046:	bf00      	nop
 8017048:	0801be81 	.word	0x0801be81
 801704c:	0801bf0b 	.word	0x0801bf0b
 8017050:	0801be89 	.word	0x0801be89
 8017054:	0801bec8 	.word	0x0801bec8
 8017058:	0801bf48 	.word	0x0801bf48
 801705c:	0801bf20 	.word	0x0801bf20
 8017060:	7ff00000 	.word	0x7ff00000
 8017064:	7ca00000 	.word	0x7ca00000
 8017068:	fff80000 	.word	0xfff80000
 801706c:	7fefffff 	.word	0x7fefffff
 8017070:	f018 0310 	ands.w	r3, r8, #16
 8017074:	bf18      	it	ne
 8017076:	236a      	movne	r3, #106	; 0x6a
 8017078:	4da0      	ldr	r5, [pc, #640]	; (80172fc <_strtod_l+0x834>)
 801707a:	9304      	str	r3, [sp, #16]
 801707c:	4650      	mov	r0, sl
 801707e:	4659      	mov	r1, fp
 8017080:	2300      	movs	r3, #0
 8017082:	f1b8 0f00 	cmp.w	r8, #0
 8017086:	f300 810a 	bgt.w	801729e <_strtod_l+0x7d6>
 801708a:	b10b      	cbz	r3, 8017090 <_strtod_l+0x5c8>
 801708c:	4682      	mov	sl, r0
 801708e:	468b      	mov	fp, r1
 8017090:	9b04      	ldr	r3, [sp, #16]
 8017092:	b1bb      	cbz	r3, 80170c4 <_strtod_l+0x5fc>
 8017094:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8017098:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801709c:	2b00      	cmp	r3, #0
 801709e:	4659      	mov	r1, fp
 80170a0:	dd10      	ble.n	80170c4 <_strtod_l+0x5fc>
 80170a2:	2b1f      	cmp	r3, #31
 80170a4:	f340 8107 	ble.w	80172b6 <_strtod_l+0x7ee>
 80170a8:	2b34      	cmp	r3, #52	; 0x34
 80170aa:	bfde      	ittt	le
 80170ac:	3b20      	suble	r3, #32
 80170ae:	f04f 32ff 	movle.w	r2, #4294967295
 80170b2:	fa02 f303 	lslle.w	r3, r2, r3
 80170b6:	f04f 0a00 	mov.w	sl, #0
 80170ba:	bfcc      	ite	gt
 80170bc:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80170c0:	ea03 0b01 	andle.w	fp, r3, r1
 80170c4:	2200      	movs	r2, #0
 80170c6:	2300      	movs	r3, #0
 80170c8:	4650      	mov	r0, sl
 80170ca:	4659      	mov	r1, fp
 80170cc:	f7e9 fd0c 	bl	8000ae8 <__aeabi_dcmpeq>
 80170d0:	2800      	cmp	r0, #0
 80170d2:	d1ac      	bne.n	801702e <_strtod_l+0x566>
 80170d4:	9b07      	ldr	r3, [sp, #28]
 80170d6:	9300      	str	r3, [sp, #0]
 80170d8:	9a05      	ldr	r2, [sp, #20]
 80170da:	9908      	ldr	r1, [sp, #32]
 80170dc:	4623      	mov	r3, r4
 80170de:	4648      	mov	r0, r9
 80170e0:	f001 fdac 	bl	8018c3c <__s2b>
 80170e4:	9007      	str	r0, [sp, #28]
 80170e6:	2800      	cmp	r0, #0
 80170e8:	f43f af08 	beq.w	8016efc <_strtod_l+0x434>
 80170ec:	9a06      	ldr	r2, [sp, #24]
 80170ee:	9b06      	ldr	r3, [sp, #24]
 80170f0:	2a00      	cmp	r2, #0
 80170f2:	f1c3 0300 	rsb	r3, r3, #0
 80170f6:	bfa8      	it	ge
 80170f8:	2300      	movge	r3, #0
 80170fa:	930e      	str	r3, [sp, #56]	; 0x38
 80170fc:	2400      	movs	r4, #0
 80170fe:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8017102:	9316      	str	r3, [sp, #88]	; 0x58
 8017104:	46a0      	mov	r8, r4
 8017106:	9b07      	ldr	r3, [sp, #28]
 8017108:	4648      	mov	r0, r9
 801710a:	6859      	ldr	r1, [r3, #4]
 801710c:	f001 fd10 	bl	8018b30 <_Balloc>
 8017110:	9005      	str	r0, [sp, #20]
 8017112:	2800      	cmp	r0, #0
 8017114:	f43f aef6 	beq.w	8016f04 <_strtod_l+0x43c>
 8017118:	9b07      	ldr	r3, [sp, #28]
 801711a:	691a      	ldr	r2, [r3, #16]
 801711c:	3202      	adds	r2, #2
 801711e:	f103 010c 	add.w	r1, r3, #12
 8017122:	0092      	lsls	r2, r2, #2
 8017124:	300c      	adds	r0, #12
 8017126:	f7fe fcfb 	bl	8015b20 <memcpy>
 801712a:	aa1e      	add	r2, sp, #120	; 0x78
 801712c:	a91d      	add	r1, sp, #116	; 0x74
 801712e:	ec4b ab10 	vmov	d0, sl, fp
 8017132:	4648      	mov	r0, r9
 8017134:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8017138:	f002 f83c 	bl	80191b4 <__d2b>
 801713c:	901c      	str	r0, [sp, #112]	; 0x70
 801713e:	2800      	cmp	r0, #0
 8017140:	f43f aee0 	beq.w	8016f04 <_strtod_l+0x43c>
 8017144:	2101      	movs	r1, #1
 8017146:	4648      	mov	r0, r9
 8017148:	f001 fe04 	bl	8018d54 <__i2b>
 801714c:	4680      	mov	r8, r0
 801714e:	2800      	cmp	r0, #0
 8017150:	f43f aed8 	beq.w	8016f04 <_strtod_l+0x43c>
 8017154:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8017156:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8017158:	2e00      	cmp	r6, #0
 801715a:	bfab      	itete	ge
 801715c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 801715e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8017160:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8017162:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8017164:	bfac      	ite	ge
 8017166:	18f7      	addge	r7, r6, r3
 8017168:	1b9d      	sublt	r5, r3, r6
 801716a:	9b04      	ldr	r3, [sp, #16]
 801716c:	1af6      	subs	r6, r6, r3
 801716e:	4416      	add	r6, r2
 8017170:	4b63      	ldr	r3, [pc, #396]	; (8017300 <_strtod_l+0x838>)
 8017172:	3e01      	subs	r6, #1
 8017174:	429e      	cmp	r6, r3
 8017176:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801717a:	f280 80af 	bge.w	80172dc <_strtod_l+0x814>
 801717e:	1b9b      	subs	r3, r3, r6
 8017180:	2b1f      	cmp	r3, #31
 8017182:	eba2 0203 	sub.w	r2, r2, r3
 8017186:	f04f 0101 	mov.w	r1, #1
 801718a:	f300 809b 	bgt.w	80172c4 <_strtod_l+0x7fc>
 801718e:	fa01 f303 	lsl.w	r3, r1, r3
 8017192:	930f      	str	r3, [sp, #60]	; 0x3c
 8017194:	2300      	movs	r3, #0
 8017196:	930a      	str	r3, [sp, #40]	; 0x28
 8017198:	18be      	adds	r6, r7, r2
 801719a:	9b04      	ldr	r3, [sp, #16]
 801719c:	42b7      	cmp	r7, r6
 801719e:	4415      	add	r5, r2
 80171a0:	441d      	add	r5, r3
 80171a2:	463b      	mov	r3, r7
 80171a4:	bfa8      	it	ge
 80171a6:	4633      	movge	r3, r6
 80171a8:	42ab      	cmp	r3, r5
 80171aa:	bfa8      	it	ge
 80171ac:	462b      	movge	r3, r5
 80171ae:	2b00      	cmp	r3, #0
 80171b0:	bfc2      	ittt	gt
 80171b2:	1af6      	subgt	r6, r6, r3
 80171b4:	1aed      	subgt	r5, r5, r3
 80171b6:	1aff      	subgt	r7, r7, r3
 80171b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80171ba:	b1bb      	cbz	r3, 80171ec <_strtod_l+0x724>
 80171bc:	4641      	mov	r1, r8
 80171be:	461a      	mov	r2, r3
 80171c0:	4648      	mov	r0, r9
 80171c2:	f001 fe67 	bl	8018e94 <__pow5mult>
 80171c6:	4680      	mov	r8, r0
 80171c8:	2800      	cmp	r0, #0
 80171ca:	f43f ae9b 	beq.w	8016f04 <_strtod_l+0x43c>
 80171ce:	4601      	mov	r1, r0
 80171d0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80171d2:	4648      	mov	r0, r9
 80171d4:	f001 fdc7 	bl	8018d66 <__multiply>
 80171d8:	900c      	str	r0, [sp, #48]	; 0x30
 80171da:	2800      	cmp	r0, #0
 80171dc:	f43f ae92 	beq.w	8016f04 <_strtod_l+0x43c>
 80171e0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80171e2:	4648      	mov	r0, r9
 80171e4:	f001 fcd8 	bl	8018b98 <_Bfree>
 80171e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80171ea:	931c      	str	r3, [sp, #112]	; 0x70
 80171ec:	2e00      	cmp	r6, #0
 80171ee:	dc7a      	bgt.n	80172e6 <_strtod_l+0x81e>
 80171f0:	9b06      	ldr	r3, [sp, #24]
 80171f2:	2b00      	cmp	r3, #0
 80171f4:	dd08      	ble.n	8017208 <_strtod_l+0x740>
 80171f6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80171f8:	9905      	ldr	r1, [sp, #20]
 80171fa:	4648      	mov	r0, r9
 80171fc:	f001 fe4a 	bl	8018e94 <__pow5mult>
 8017200:	9005      	str	r0, [sp, #20]
 8017202:	2800      	cmp	r0, #0
 8017204:	f43f ae7e 	beq.w	8016f04 <_strtod_l+0x43c>
 8017208:	2d00      	cmp	r5, #0
 801720a:	dd08      	ble.n	801721e <_strtod_l+0x756>
 801720c:	462a      	mov	r2, r5
 801720e:	9905      	ldr	r1, [sp, #20]
 8017210:	4648      	mov	r0, r9
 8017212:	f001 fe8d 	bl	8018f30 <__lshift>
 8017216:	9005      	str	r0, [sp, #20]
 8017218:	2800      	cmp	r0, #0
 801721a:	f43f ae73 	beq.w	8016f04 <_strtod_l+0x43c>
 801721e:	2f00      	cmp	r7, #0
 8017220:	dd08      	ble.n	8017234 <_strtod_l+0x76c>
 8017222:	4641      	mov	r1, r8
 8017224:	463a      	mov	r2, r7
 8017226:	4648      	mov	r0, r9
 8017228:	f001 fe82 	bl	8018f30 <__lshift>
 801722c:	4680      	mov	r8, r0
 801722e:	2800      	cmp	r0, #0
 8017230:	f43f ae68 	beq.w	8016f04 <_strtod_l+0x43c>
 8017234:	9a05      	ldr	r2, [sp, #20]
 8017236:	991c      	ldr	r1, [sp, #112]	; 0x70
 8017238:	4648      	mov	r0, r9
 801723a:	f001 fee7 	bl	801900c <__mdiff>
 801723e:	4604      	mov	r4, r0
 8017240:	2800      	cmp	r0, #0
 8017242:	f43f ae5f 	beq.w	8016f04 <_strtod_l+0x43c>
 8017246:	68c3      	ldr	r3, [r0, #12]
 8017248:	930c      	str	r3, [sp, #48]	; 0x30
 801724a:	2300      	movs	r3, #0
 801724c:	60c3      	str	r3, [r0, #12]
 801724e:	4641      	mov	r1, r8
 8017250:	f001 fec2 	bl	8018fd8 <__mcmp>
 8017254:	2800      	cmp	r0, #0
 8017256:	da55      	bge.n	8017304 <_strtod_l+0x83c>
 8017258:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801725a:	b9e3      	cbnz	r3, 8017296 <_strtod_l+0x7ce>
 801725c:	f1ba 0f00 	cmp.w	sl, #0
 8017260:	d119      	bne.n	8017296 <_strtod_l+0x7ce>
 8017262:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017266:	b9b3      	cbnz	r3, 8017296 <_strtod_l+0x7ce>
 8017268:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801726c:	0d1b      	lsrs	r3, r3, #20
 801726e:	051b      	lsls	r3, r3, #20
 8017270:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8017274:	d90f      	bls.n	8017296 <_strtod_l+0x7ce>
 8017276:	6963      	ldr	r3, [r4, #20]
 8017278:	b913      	cbnz	r3, 8017280 <_strtod_l+0x7b8>
 801727a:	6923      	ldr	r3, [r4, #16]
 801727c:	2b01      	cmp	r3, #1
 801727e:	dd0a      	ble.n	8017296 <_strtod_l+0x7ce>
 8017280:	4621      	mov	r1, r4
 8017282:	2201      	movs	r2, #1
 8017284:	4648      	mov	r0, r9
 8017286:	f001 fe53 	bl	8018f30 <__lshift>
 801728a:	4641      	mov	r1, r8
 801728c:	4604      	mov	r4, r0
 801728e:	f001 fea3 	bl	8018fd8 <__mcmp>
 8017292:	2800      	cmp	r0, #0
 8017294:	dc67      	bgt.n	8017366 <_strtod_l+0x89e>
 8017296:	9b04      	ldr	r3, [sp, #16]
 8017298:	2b00      	cmp	r3, #0
 801729a:	d171      	bne.n	8017380 <_strtod_l+0x8b8>
 801729c:	e63d      	b.n	8016f1a <_strtod_l+0x452>
 801729e:	f018 0f01 	tst.w	r8, #1
 80172a2:	d004      	beq.n	80172ae <_strtod_l+0x7e6>
 80172a4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80172a8:	f7e9 f9b6 	bl	8000618 <__aeabi_dmul>
 80172ac:	2301      	movs	r3, #1
 80172ae:	ea4f 0868 	mov.w	r8, r8, asr #1
 80172b2:	3508      	adds	r5, #8
 80172b4:	e6e5      	b.n	8017082 <_strtod_l+0x5ba>
 80172b6:	f04f 32ff 	mov.w	r2, #4294967295
 80172ba:	fa02 f303 	lsl.w	r3, r2, r3
 80172be:	ea03 0a0a 	and.w	sl, r3, sl
 80172c2:	e6ff      	b.n	80170c4 <_strtod_l+0x5fc>
 80172c4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80172c8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80172cc:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80172d0:	36e2      	adds	r6, #226	; 0xe2
 80172d2:	fa01 f306 	lsl.w	r3, r1, r6
 80172d6:	930a      	str	r3, [sp, #40]	; 0x28
 80172d8:	910f      	str	r1, [sp, #60]	; 0x3c
 80172da:	e75d      	b.n	8017198 <_strtod_l+0x6d0>
 80172dc:	2300      	movs	r3, #0
 80172de:	930a      	str	r3, [sp, #40]	; 0x28
 80172e0:	2301      	movs	r3, #1
 80172e2:	930f      	str	r3, [sp, #60]	; 0x3c
 80172e4:	e758      	b.n	8017198 <_strtod_l+0x6d0>
 80172e6:	4632      	mov	r2, r6
 80172e8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80172ea:	4648      	mov	r0, r9
 80172ec:	f001 fe20 	bl	8018f30 <__lshift>
 80172f0:	901c      	str	r0, [sp, #112]	; 0x70
 80172f2:	2800      	cmp	r0, #0
 80172f4:	f47f af7c 	bne.w	80171f0 <_strtod_l+0x728>
 80172f8:	e604      	b.n	8016f04 <_strtod_l+0x43c>
 80172fa:	bf00      	nop
 80172fc:	0801bee0 	.word	0x0801bee0
 8017300:	fffffc02 	.word	0xfffffc02
 8017304:	465d      	mov	r5, fp
 8017306:	f040 8086 	bne.w	8017416 <_strtod_l+0x94e>
 801730a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801730c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017310:	b32a      	cbz	r2, 801735e <_strtod_l+0x896>
 8017312:	4aaf      	ldr	r2, [pc, #700]	; (80175d0 <_strtod_l+0xb08>)
 8017314:	4293      	cmp	r3, r2
 8017316:	d153      	bne.n	80173c0 <_strtod_l+0x8f8>
 8017318:	9b04      	ldr	r3, [sp, #16]
 801731a:	4650      	mov	r0, sl
 801731c:	b1d3      	cbz	r3, 8017354 <_strtod_l+0x88c>
 801731e:	4aad      	ldr	r2, [pc, #692]	; (80175d4 <_strtod_l+0xb0c>)
 8017320:	402a      	ands	r2, r5
 8017322:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8017326:	f04f 31ff 	mov.w	r1, #4294967295
 801732a:	d816      	bhi.n	801735a <_strtod_l+0x892>
 801732c:	0d12      	lsrs	r2, r2, #20
 801732e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8017332:	fa01 f303 	lsl.w	r3, r1, r3
 8017336:	4298      	cmp	r0, r3
 8017338:	d142      	bne.n	80173c0 <_strtod_l+0x8f8>
 801733a:	4ba7      	ldr	r3, [pc, #668]	; (80175d8 <_strtod_l+0xb10>)
 801733c:	429d      	cmp	r5, r3
 801733e:	d102      	bne.n	8017346 <_strtod_l+0x87e>
 8017340:	3001      	adds	r0, #1
 8017342:	f43f addf 	beq.w	8016f04 <_strtod_l+0x43c>
 8017346:	4ba3      	ldr	r3, [pc, #652]	; (80175d4 <_strtod_l+0xb0c>)
 8017348:	402b      	ands	r3, r5
 801734a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801734e:	f04f 0a00 	mov.w	sl, #0
 8017352:	e7a0      	b.n	8017296 <_strtod_l+0x7ce>
 8017354:	f04f 33ff 	mov.w	r3, #4294967295
 8017358:	e7ed      	b.n	8017336 <_strtod_l+0x86e>
 801735a:	460b      	mov	r3, r1
 801735c:	e7eb      	b.n	8017336 <_strtod_l+0x86e>
 801735e:	bb7b      	cbnz	r3, 80173c0 <_strtod_l+0x8f8>
 8017360:	f1ba 0f00 	cmp.w	sl, #0
 8017364:	d12c      	bne.n	80173c0 <_strtod_l+0x8f8>
 8017366:	9904      	ldr	r1, [sp, #16]
 8017368:	4a9a      	ldr	r2, [pc, #616]	; (80175d4 <_strtod_l+0xb0c>)
 801736a:	465b      	mov	r3, fp
 801736c:	b1f1      	cbz	r1, 80173ac <_strtod_l+0x8e4>
 801736e:	ea02 010b 	and.w	r1, r2, fp
 8017372:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8017376:	dc19      	bgt.n	80173ac <_strtod_l+0x8e4>
 8017378:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801737c:	f77f ae5b 	ble.w	8017036 <_strtod_l+0x56e>
 8017380:	4a96      	ldr	r2, [pc, #600]	; (80175dc <_strtod_l+0xb14>)
 8017382:	2300      	movs	r3, #0
 8017384:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8017388:	4650      	mov	r0, sl
 801738a:	4659      	mov	r1, fp
 801738c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8017390:	f7e9 f942 	bl	8000618 <__aeabi_dmul>
 8017394:	4682      	mov	sl, r0
 8017396:	468b      	mov	fp, r1
 8017398:	2900      	cmp	r1, #0
 801739a:	f47f adbe 	bne.w	8016f1a <_strtod_l+0x452>
 801739e:	2800      	cmp	r0, #0
 80173a0:	f47f adbb 	bne.w	8016f1a <_strtod_l+0x452>
 80173a4:	2322      	movs	r3, #34	; 0x22
 80173a6:	f8c9 3000 	str.w	r3, [r9]
 80173aa:	e5b6      	b.n	8016f1a <_strtod_l+0x452>
 80173ac:	4013      	ands	r3, r2
 80173ae:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80173b2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80173b6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80173ba:	f04f 3aff 	mov.w	sl, #4294967295
 80173be:	e76a      	b.n	8017296 <_strtod_l+0x7ce>
 80173c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80173c2:	b193      	cbz	r3, 80173ea <_strtod_l+0x922>
 80173c4:	422b      	tst	r3, r5
 80173c6:	f43f af66 	beq.w	8017296 <_strtod_l+0x7ce>
 80173ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80173cc:	9a04      	ldr	r2, [sp, #16]
 80173ce:	4650      	mov	r0, sl
 80173d0:	4659      	mov	r1, fp
 80173d2:	b173      	cbz	r3, 80173f2 <_strtod_l+0x92a>
 80173d4:	f7ff fb5b 	bl	8016a8e <sulp>
 80173d8:	4602      	mov	r2, r0
 80173da:	460b      	mov	r3, r1
 80173dc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80173e0:	f7e8 ff64 	bl	80002ac <__adddf3>
 80173e4:	4682      	mov	sl, r0
 80173e6:	468b      	mov	fp, r1
 80173e8:	e755      	b.n	8017296 <_strtod_l+0x7ce>
 80173ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80173ec:	ea13 0f0a 	tst.w	r3, sl
 80173f0:	e7e9      	b.n	80173c6 <_strtod_l+0x8fe>
 80173f2:	f7ff fb4c 	bl	8016a8e <sulp>
 80173f6:	4602      	mov	r2, r0
 80173f8:	460b      	mov	r3, r1
 80173fa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80173fe:	f7e8 ff53 	bl	80002a8 <__aeabi_dsub>
 8017402:	2200      	movs	r2, #0
 8017404:	2300      	movs	r3, #0
 8017406:	4682      	mov	sl, r0
 8017408:	468b      	mov	fp, r1
 801740a:	f7e9 fb6d 	bl	8000ae8 <__aeabi_dcmpeq>
 801740e:	2800      	cmp	r0, #0
 8017410:	f47f ae11 	bne.w	8017036 <_strtod_l+0x56e>
 8017414:	e73f      	b.n	8017296 <_strtod_l+0x7ce>
 8017416:	4641      	mov	r1, r8
 8017418:	4620      	mov	r0, r4
 801741a:	f001 ff1a 	bl	8019252 <__ratio>
 801741e:	ec57 6b10 	vmov	r6, r7, d0
 8017422:	2200      	movs	r2, #0
 8017424:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017428:	ee10 0a10 	vmov	r0, s0
 801742c:	4639      	mov	r1, r7
 801742e:	f7e9 fb6f 	bl	8000b10 <__aeabi_dcmple>
 8017432:	2800      	cmp	r0, #0
 8017434:	d077      	beq.n	8017526 <_strtod_l+0xa5e>
 8017436:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017438:	2b00      	cmp	r3, #0
 801743a:	d04a      	beq.n	80174d2 <_strtod_l+0xa0a>
 801743c:	4b68      	ldr	r3, [pc, #416]	; (80175e0 <_strtod_l+0xb18>)
 801743e:	2200      	movs	r2, #0
 8017440:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8017444:	4f66      	ldr	r7, [pc, #408]	; (80175e0 <_strtod_l+0xb18>)
 8017446:	2600      	movs	r6, #0
 8017448:	4b62      	ldr	r3, [pc, #392]	; (80175d4 <_strtod_l+0xb0c>)
 801744a:	402b      	ands	r3, r5
 801744c:	930f      	str	r3, [sp, #60]	; 0x3c
 801744e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017450:	4b64      	ldr	r3, [pc, #400]	; (80175e4 <_strtod_l+0xb1c>)
 8017452:	429a      	cmp	r2, r3
 8017454:	f040 80ce 	bne.w	80175f4 <_strtod_l+0xb2c>
 8017458:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801745c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017460:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8017464:	ec4b ab10 	vmov	d0, sl, fp
 8017468:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 801746c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8017470:	f001 fe2a 	bl	80190c8 <__ulp>
 8017474:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017478:	ec53 2b10 	vmov	r2, r3, d0
 801747c:	f7e9 f8cc 	bl	8000618 <__aeabi_dmul>
 8017480:	4652      	mov	r2, sl
 8017482:	465b      	mov	r3, fp
 8017484:	f7e8 ff12 	bl	80002ac <__adddf3>
 8017488:	460b      	mov	r3, r1
 801748a:	4952      	ldr	r1, [pc, #328]	; (80175d4 <_strtod_l+0xb0c>)
 801748c:	4a56      	ldr	r2, [pc, #344]	; (80175e8 <_strtod_l+0xb20>)
 801748e:	4019      	ands	r1, r3
 8017490:	4291      	cmp	r1, r2
 8017492:	4682      	mov	sl, r0
 8017494:	d95b      	bls.n	801754e <_strtod_l+0xa86>
 8017496:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017498:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801749c:	4293      	cmp	r3, r2
 801749e:	d103      	bne.n	80174a8 <_strtod_l+0x9e0>
 80174a0:	9b08      	ldr	r3, [sp, #32]
 80174a2:	3301      	adds	r3, #1
 80174a4:	f43f ad2e 	beq.w	8016f04 <_strtod_l+0x43c>
 80174a8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80175d8 <_strtod_l+0xb10>
 80174ac:	f04f 3aff 	mov.w	sl, #4294967295
 80174b0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80174b2:	4648      	mov	r0, r9
 80174b4:	f001 fb70 	bl	8018b98 <_Bfree>
 80174b8:	9905      	ldr	r1, [sp, #20]
 80174ba:	4648      	mov	r0, r9
 80174bc:	f001 fb6c 	bl	8018b98 <_Bfree>
 80174c0:	4641      	mov	r1, r8
 80174c2:	4648      	mov	r0, r9
 80174c4:	f001 fb68 	bl	8018b98 <_Bfree>
 80174c8:	4621      	mov	r1, r4
 80174ca:	4648      	mov	r0, r9
 80174cc:	f001 fb64 	bl	8018b98 <_Bfree>
 80174d0:	e619      	b.n	8017106 <_strtod_l+0x63e>
 80174d2:	f1ba 0f00 	cmp.w	sl, #0
 80174d6:	d11a      	bne.n	801750e <_strtod_l+0xa46>
 80174d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80174dc:	b9eb      	cbnz	r3, 801751a <_strtod_l+0xa52>
 80174de:	2200      	movs	r2, #0
 80174e0:	4b3f      	ldr	r3, [pc, #252]	; (80175e0 <_strtod_l+0xb18>)
 80174e2:	4630      	mov	r0, r6
 80174e4:	4639      	mov	r1, r7
 80174e6:	f7e9 fb09 	bl	8000afc <__aeabi_dcmplt>
 80174ea:	b9c8      	cbnz	r0, 8017520 <_strtod_l+0xa58>
 80174ec:	4630      	mov	r0, r6
 80174ee:	4639      	mov	r1, r7
 80174f0:	2200      	movs	r2, #0
 80174f2:	4b3e      	ldr	r3, [pc, #248]	; (80175ec <_strtod_l+0xb24>)
 80174f4:	f7e9 f890 	bl	8000618 <__aeabi_dmul>
 80174f8:	4606      	mov	r6, r0
 80174fa:	460f      	mov	r7, r1
 80174fc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8017500:	9618      	str	r6, [sp, #96]	; 0x60
 8017502:	9319      	str	r3, [sp, #100]	; 0x64
 8017504:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8017508:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801750c:	e79c      	b.n	8017448 <_strtod_l+0x980>
 801750e:	f1ba 0f01 	cmp.w	sl, #1
 8017512:	d102      	bne.n	801751a <_strtod_l+0xa52>
 8017514:	2d00      	cmp	r5, #0
 8017516:	f43f ad8e 	beq.w	8017036 <_strtod_l+0x56e>
 801751a:	2200      	movs	r2, #0
 801751c:	4b34      	ldr	r3, [pc, #208]	; (80175f0 <_strtod_l+0xb28>)
 801751e:	e78f      	b.n	8017440 <_strtod_l+0x978>
 8017520:	2600      	movs	r6, #0
 8017522:	4f32      	ldr	r7, [pc, #200]	; (80175ec <_strtod_l+0xb24>)
 8017524:	e7ea      	b.n	80174fc <_strtod_l+0xa34>
 8017526:	4b31      	ldr	r3, [pc, #196]	; (80175ec <_strtod_l+0xb24>)
 8017528:	4630      	mov	r0, r6
 801752a:	4639      	mov	r1, r7
 801752c:	2200      	movs	r2, #0
 801752e:	f7e9 f873 	bl	8000618 <__aeabi_dmul>
 8017532:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017534:	4606      	mov	r6, r0
 8017536:	460f      	mov	r7, r1
 8017538:	b933      	cbnz	r3, 8017548 <_strtod_l+0xa80>
 801753a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801753e:	9010      	str	r0, [sp, #64]	; 0x40
 8017540:	9311      	str	r3, [sp, #68]	; 0x44
 8017542:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8017546:	e7df      	b.n	8017508 <_strtod_l+0xa40>
 8017548:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801754c:	e7f9      	b.n	8017542 <_strtod_l+0xa7a>
 801754e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8017552:	9b04      	ldr	r3, [sp, #16]
 8017554:	2b00      	cmp	r3, #0
 8017556:	d1ab      	bne.n	80174b0 <_strtod_l+0x9e8>
 8017558:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801755c:	0d1b      	lsrs	r3, r3, #20
 801755e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017560:	051b      	lsls	r3, r3, #20
 8017562:	429a      	cmp	r2, r3
 8017564:	465d      	mov	r5, fp
 8017566:	d1a3      	bne.n	80174b0 <_strtod_l+0x9e8>
 8017568:	4639      	mov	r1, r7
 801756a:	4630      	mov	r0, r6
 801756c:	f7e9 fb04 	bl	8000b78 <__aeabi_d2iz>
 8017570:	f7e8 ffe8 	bl	8000544 <__aeabi_i2d>
 8017574:	460b      	mov	r3, r1
 8017576:	4602      	mov	r2, r0
 8017578:	4639      	mov	r1, r7
 801757a:	4630      	mov	r0, r6
 801757c:	f7e8 fe94 	bl	80002a8 <__aeabi_dsub>
 8017580:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017582:	4606      	mov	r6, r0
 8017584:	460f      	mov	r7, r1
 8017586:	b933      	cbnz	r3, 8017596 <_strtod_l+0xace>
 8017588:	f1ba 0f00 	cmp.w	sl, #0
 801758c:	d103      	bne.n	8017596 <_strtod_l+0xace>
 801758e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8017592:	2d00      	cmp	r5, #0
 8017594:	d06d      	beq.n	8017672 <_strtod_l+0xbaa>
 8017596:	a30a      	add	r3, pc, #40	; (adr r3, 80175c0 <_strtod_l+0xaf8>)
 8017598:	e9d3 2300 	ldrd	r2, r3, [r3]
 801759c:	4630      	mov	r0, r6
 801759e:	4639      	mov	r1, r7
 80175a0:	f7e9 faac 	bl	8000afc <__aeabi_dcmplt>
 80175a4:	2800      	cmp	r0, #0
 80175a6:	f47f acb8 	bne.w	8016f1a <_strtod_l+0x452>
 80175aa:	a307      	add	r3, pc, #28	; (adr r3, 80175c8 <_strtod_l+0xb00>)
 80175ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175b0:	4630      	mov	r0, r6
 80175b2:	4639      	mov	r1, r7
 80175b4:	f7e9 fac0 	bl	8000b38 <__aeabi_dcmpgt>
 80175b8:	2800      	cmp	r0, #0
 80175ba:	f43f af79 	beq.w	80174b0 <_strtod_l+0x9e8>
 80175be:	e4ac      	b.n	8016f1a <_strtod_l+0x452>
 80175c0:	94a03595 	.word	0x94a03595
 80175c4:	3fdfffff 	.word	0x3fdfffff
 80175c8:	35afe535 	.word	0x35afe535
 80175cc:	3fe00000 	.word	0x3fe00000
 80175d0:	000fffff 	.word	0x000fffff
 80175d4:	7ff00000 	.word	0x7ff00000
 80175d8:	7fefffff 	.word	0x7fefffff
 80175dc:	39500000 	.word	0x39500000
 80175e0:	3ff00000 	.word	0x3ff00000
 80175e4:	7fe00000 	.word	0x7fe00000
 80175e8:	7c9fffff 	.word	0x7c9fffff
 80175ec:	3fe00000 	.word	0x3fe00000
 80175f0:	bff00000 	.word	0xbff00000
 80175f4:	9b04      	ldr	r3, [sp, #16]
 80175f6:	b333      	cbz	r3, 8017646 <_strtod_l+0xb7e>
 80175f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80175fa:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80175fe:	d822      	bhi.n	8017646 <_strtod_l+0xb7e>
 8017600:	a327      	add	r3, pc, #156	; (adr r3, 80176a0 <_strtod_l+0xbd8>)
 8017602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017606:	4630      	mov	r0, r6
 8017608:	4639      	mov	r1, r7
 801760a:	f7e9 fa81 	bl	8000b10 <__aeabi_dcmple>
 801760e:	b1a0      	cbz	r0, 801763a <_strtod_l+0xb72>
 8017610:	4639      	mov	r1, r7
 8017612:	4630      	mov	r0, r6
 8017614:	f7e9 fad8 	bl	8000bc8 <__aeabi_d2uiz>
 8017618:	2800      	cmp	r0, #0
 801761a:	bf08      	it	eq
 801761c:	2001      	moveq	r0, #1
 801761e:	f7e8 ff81 	bl	8000524 <__aeabi_ui2d>
 8017622:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017624:	4606      	mov	r6, r0
 8017626:	460f      	mov	r7, r1
 8017628:	bb03      	cbnz	r3, 801766c <_strtod_l+0xba4>
 801762a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801762e:	9012      	str	r0, [sp, #72]	; 0x48
 8017630:	9313      	str	r3, [sp, #76]	; 0x4c
 8017632:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8017636:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801763a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801763c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801763e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8017642:	1a9b      	subs	r3, r3, r2
 8017644:	930b      	str	r3, [sp, #44]	; 0x2c
 8017646:	ed9d 0b08 	vldr	d0, [sp, #32]
 801764a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 801764e:	f001 fd3b 	bl	80190c8 <__ulp>
 8017652:	4650      	mov	r0, sl
 8017654:	ec53 2b10 	vmov	r2, r3, d0
 8017658:	4659      	mov	r1, fp
 801765a:	f7e8 ffdd 	bl	8000618 <__aeabi_dmul>
 801765e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017662:	f7e8 fe23 	bl	80002ac <__adddf3>
 8017666:	4682      	mov	sl, r0
 8017668:	468b      	mov	fp, r1
 801766a:	e772      	b.n	8017552 <_strtod_l+0xa8a>
 801766c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8017670:	e7df      	b.n	8017632 <_strtod_l+0xb6a>
 8017672:	a30d      	add	r3, pc, #52	; (adr r3, 80176a8 <_strtod_l+0xbe0>)
 8017674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017678:	f7e9 fa40 	bl	8000afc <__aeabi_dcmplt>
 801767c:	e79c      	b.n	80175b8 <_strtod_l+0xaf0>
 801767e:	2300      	movs	r3, #0
 8017680:	930d      	str	r3, [sp, #52]	; 0x34
 8017682:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8017684:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017686:	6013      	str	r3, [r2, #0]
 8017688:	f7ff ba61 	b.w	8016b4e <_strtod_l+0x86>
 801768c:	2b65      	cmp	r3, #101	; 0x65
 801768e:	f04f 0200 	mov.w	r2, #0
 8017692:	f43f ab4e 	beq.w	8016d32 <_strtod_l+0x26a>
 8017696:	2101      	movs	r1, #1
 8017698:	4614      	mov	r4, r2
 801769a:	9104      	str	r1, [sp, #16]
 801769c:	f7ff bacb 	b.w	8016c36 <_strtod_l+0x16e>
 80176a0:	ffc00000 	.word	0xffc00000
 80176a4:	41dfffff 	.word	0x41dfffff
 80176a8:	94a03595 	.word	0x94a03595
 80176ac:	3fcfffff 	.word	0x3fcfffff

080176b0 <_strtod_r>:
 80176b0:	4b05      	ldr	r3, [pc, #20]	; (80176c8 <_strtod_r+0x18>)
 80176b2:	681b      	ldr	r3, [r3, #0]
 80176b4:	b410      	push	{r4}
 80176b6:	6a1b      	ldr	r3, [r3, #32]
 80176b8:	4c04      	ldr	r4, [pc, #16]	; (80176cc <_strtod_r+0x1c>)
 80176ba:	2b00      	cmp	r3, #0
 80176bc:	bf08      	it	eq
 80176be:	4623      	moveq	r3, r4
 80176c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80176c4:	f7ff ba00 	b.w	8016ac8 <_strtod_l>
 80176c8:	20000e60 	.word	0x20000e60
 80176cc:	20000ec4 	.word	0x20000ec4

080176d0 <_strtol_l.isra.0>:
 80176d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80176d4:	4680      	mov	r8, r0
 80176d6:	4689      	mov	r9, r1
 80176d8:	4692      	mov	sl, r2
 80176da:	461e      	mov	r6, r3
 80176dc:	460f      	mov	r7, r1
 80176de:	463d      	mov	r5, r7
 80176e0:	9808      	ldr	r0, [sp, #32]
 80176e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80176e6:	f001 f9ed 	bl	8018ac4 <__locale_ctype_ptr_l>
 80176ea:	4420      	add	r0, r4
 80176ec:	7843      	ldrb	r3, [r0, #1]
 80176ee:	f013 0308 	ands.w	r3, r3, #8
 80176f2:	d132      	bne.n	801775a <_strtol_l.isra.0+0x8a>
 80176f4:	2c2d      	cmp	r4, #45	; 0x2d
 80176f6:	d132      	bne.n	801775e <_strtol_l.isra.0+0x8e>
 80176f8:	787c      	ldrb	r4, [r7, #1]
 80176fa:	1cbd      	adds	r5, r7, #2
 80176fc:	2201      	movs	r2, #1
 80176fe:	2e00      	cmp	r6, #0
 8017700:	d05d      	beq.n	80177be <_strtol_l.isra.0+0xee>
 8017702:	2e10      	cmp	r6, #16
 8017704:	d109      	bne.n	801771a <_strtol_l.isra.0+0x4a>
 8017706:	2c30      	cmp	r4, #48	; 0x30
 8017708:	d107      	bne.n	801771a <_strtol_l.isra.0+0x4a>
 801770a:	782b      	ldrb	r3, [r5, #0]
 801770c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017710:	2b58      	cmp	r3, #88	; 0x58
 8017712:	d14f      	bne.n	80177b4 <_strtol_l.isra.0+0xe4>
 8017714:	786c      	ldrb	r4, [r5, #1]
 8017716:	2610      	movs	r6, #16
 8017718:	3502      	adds	r5, #2
 801771a:	2a00      	cmp	r2, #0
 801771c:	bf14      	ite	ne
 801771e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8017722:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8017726:	2700      	movs	r7, #0
 8017728:	fbb1 fcf6 	udiv	ip, r1, r6
 801772c:	4638      	mov	r0, r7
 801772e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8017732:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8017736:	2b09      	cmp	r3, #9
 8017738:	d817      	bhi.n	801776a <_strtol_l.isra.0+0x9a>
 801773a:	461c      	mov	r4, r3
 801773c:	42a6      	cmp	r6, r4
 801773e:	dd23      	ble.n	8017788 <_strtol_l.isra.0+0xb8>
 8017740:	1c7b      	adds	r3, r7, #1
 8017742:	d007      	beq.n	8017754 <_strtol_l.isra.0+0x84>
 8017744:	4584      	cmp	ip, r0
 8017746:	d31c      	bcc.n	8017782 <_strtol_l.isra.0+0xb2>
 8017748:	d101      	bne.n	801774e <_strtol_l.isra.0+0x7e>
 801774a:	45a6      	cmp	lr, r4
 801774c:	db19      	blt.n	8017782 <_strtol_l.isra.0+0xb2>
 801774e:	fb00 4006 	mla	r0, r0, r6, r4
 8017752:	2701      	movs	r7, #1
 8017754:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017758:	e7eb      	b.n	8017732 <_strtol_l.isra.0+0x62>
 801775a:	462f      	mov	r7, r5
 801775c:	e7bf      	b.n	80176de <_strtol_l.isra.0+0xe>
 801775e:	2c2b      	cmp	r4, #43	; 0x2b
 8017760:	bf04      	itt	eq
 8017762:	1cbd      	addeq	r5, r7, #2
 8017764:	787c      	ldrbeq	r4, [r7, #1]
 8017766:	461a      	mov	r2, r3
 8017768:	e7c9      	b.n	80176fe <_strtol_l.isra.0+0x2e>
 801776a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 801776e:	2b19      	cmp	r3, #25
 8017770:	d801      	bhi.n	8017776 <_strtol_l.isra.0+0xa6>
 8017772:	3c37      	subs	r4, #55	; 0x37
 8017774:	e7e2      	b.n	801773c <_strtol_l.isra.0+0x6c>
 8017776:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 801777a:	2b19      	cmp	r3, #25
 801777c:	d804      	bhi.n	8017788 <_strtol_l.isra.0+0xb8>
 801777e:	3c57      	subs	r4, #87	; 0x57
 8017780:	e7dc      	b.n	801773c <_strtol_l.isra.0+0x6c>
 8017782:	f04f 37ff 	mov.w	r7, #4294967295
 8017786:	e7e5      	b.n	8017754 <_strtol_l.isra.0+0x84>
 8017788:	1c7b      	adds	r3, r7, #1
 801778a:	d108      	bne.n	801779e <_strtol_l.isra.0+0xce>
 801778c:	2322      	movs	r3, #34	; 0x22
 801778e:	f8c8 3000 	str.w	r3, [r8]
 8017792:	4608      	mov	r0, r1
 8017794:	f1ba 0f00 	cmp.w	sl, #0
 8017798:	d107      	bne.n	80177aa <_strtol_l.isra.0+0xda>
 801779a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801779e:	b102      	cbz	r2, 80177a2 <_strtol_l.isra.0+0xd2>
 80177a0:	4240      	negs	r0, r0
 80177a2:	f1ba 0f00 	cmp.w	sl, #0
 80177a6:	d0f8      	beq.n	801779a <_strtol_l.isra.0+0xca>
 80177a8:	b10f      	cbz	r7, 80177ae <_strtol_l.isra.0+0xde>
 80177aa:	f105 39ff 	add.w	r9, r5, #4294967295
 80177ae:	f8ca 9000 	str.w	r9, [sl]
 80177b2:	e7f2      	b.n	801779a <_strtol_l.isra.0+0xca>
 80177b4:	2430      	movs	r4, #48	; 0x30
 80177b6:	2e00      	cmp	r6, #0
 80177b8:	d1af      	bne.n	801771a <_strtol_l.isra.0+0x4a>
 80177ba:	2608      	movs	r6, #8
 80177bc:	e7ad      	b.n	801771a <_strtol_l.isra.0+0x4a>
 80177be:	2c30      	cmp	r4, #48	; 0x30
 80177c0:	d0a3      	beq.n	801770a <_strtol_l.isra.0+0x3a>
 80177c2:	260a      	movs	r6, #10
 80177c4:	e7a9      	b.n	801771a <_strtol_l.isra.0+0x4a>
	...

080177c8 <_strtol_r>:
 80177c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80177ca:	4c06      	ldr	r4, [pc, #24]	; (80177e4 <_strtol_r+0x1c>)
 80177cc:	4d06      	ldr	r5, [pc, #24]	; (80177e8 <_strtol_r+0x20>)
 80177ce:	6824      	ldr	r4, [r4, #0]
 80177d0:	6a24      	ldr	r4, [r4, #32]
 80177d2:	2c00      	cmp	r4, #0
 80177d4:	bf08      	it	eq
 80177d6:	462c      	moveq	r4, r5
 80177d8:	9400      	str	r4, [sp, #0]
 80177da:	f7ff ff79 	bl	80176d0 <_strtol_l.isra.0>
 80177de:	b003      	add	sp, #12
 80177e0:	bd30      	pop	{r4, r5, pc}
 80177e2:	bf00      	nop
 80177e4:	20000e60 	.word	0x20000e60
 80177e8:	20000ec4 	.word	0x20000ec4

080177ec <quorem>:
 80177ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177f0:	6903      	ldr	r3, [r0, #16]
 80177f2:	690c      	ldr	r4, [r1, #16]
 80177f4:	42a3      	cmp	r3, r4
 80177f6:	4680      	mov	r8, r0
 80177f8:	f2c0 8082 	blt.w	8017900 <quorem+0x114>
 80177fc:	3c01      	subs	r4, #1
 80177fe:	f101 0714 	add.w	r7, r1, #20
 8017802:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8017806:	f100 0614 	add.w	r6, r0, #20
 801780a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801780e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8017812:	eb06 030c 	add.w	r3, r6, ip
 8017816:	3501      	adds	r5, #1
 8017818:	eb07 090c 	add.w	r9, r7, ip
 801781c:	9301      	str	r3, [sp, #4]
 801781e:	fbb0 f5f5 	udiv	r5, r0, r5
 8017822:	b395      	cbz	r5, 801788a <quorem+0x9e>
 8017824:	f04f 0a00 	mov.w	sl, #0
 8017828:	4638      	mov	r0, r7
 801782a:	46b6      	mov	lr, r6
 801782c:	46d3      	mov	fp, sl
 801782e:	f850 2b04 	ldr.w	r2, [r0], #4
 8017832:	b293      	uxth	r3, r2
 8017834:	fb05 a303 	mla	r3, r5, r3, sl
 8017838:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801783c:	b29b      	uxth	r3, r3
 801783e:	ebab 0303 	sub.w	r3, fp, r3
 8017842:	0c12      	lsrs	r2, r2, #16
 8017844:	f8de b000 	ldr.w	fp, [lr]
 8017848:	fb05 a202 	mla	r2, r5, r2, sl
 801784c:	fa13 f38b 	uxtah	r3, r3, fp
 8017850:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8017854:	fa1f fb82 	uxth.w	fp, r2
 8017858:	f8de 2000 	ldr.w	r2, [lr]
 801785c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8017860:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017864:	b29b      	uxth	r3, r3
 8017866:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801786a:	4581      	cmp	r9, r0
 801786c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8017870:	f84e 3b04 	str.w	r3, [lr], #4
 8017874:	d2db      	bcs.n	801782e <quorem+0x42>
 8017876:	f856 300c 	ldr.w	r3, [r6, ip]
 801787a:	b933      	cbnz	r3, 801788a <quorem+0x9e>
 801787c:	9b01      	ldr	r3, [sp, #4]
 801787e:	3b04      	subs	r3, #4
 8017880:	429e      	cmp	r6, r3
 8017882:	461a      	mov	r2, r3
 8017884:	d330      	bcc.n	80178e8 <quorem+0xfc>
 8017886:	f8c8 4010 	str.w	r4, [r8, #16]
 801788a:	4640      	mov	r0, r8
 801788c:	f001 fba4 	bl	8018fd8 <__mcmp>
 8017890:	2800      	cmp	r0, #0
 8017892:	db25      	blt.n	80178e0 <quorem+0xf4>
 8017894:	3501      	adds	r5, #1
 8017896:	4630      	mov	r0, r6
 8017898:	f04f 0c00 	mov.w	ip, #0
 801789c:	f857 2b04 	ldr.w	r2, [r7], #4
 80178a0:	f8d0 e000 	ldr.w	lr, [r0]
 80178a4:	b293      	uxth	r3, r2
 80178a6:	ebac 0303 	sub.w	r3, ip, r3
 80178aa:	0c12      	lsrs	r2, r2, #16
 80178ac:	fa13 f38e 	uxtah	r3, r3, lr
 80178b0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80178b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80178b8:	b29b      	uxth	r3, r3
 80178ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80178be:	45b9      	cmp	r9, r7
 80178c0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80178c4:	f840 3b04 	str.w	r3, [r0], #4
 80178c8:	d2e8      	bcs.n	801789c <quorem+0xb0>
 80178ca:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80178ce:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80178d2:	b92a      	cbnz	r2, 80178e0 <quorem+0xf4>
 80178d4:	3b04      	subs	r3, #4
 80178d6:	429e      	cmp	r6, r3
 80178d8:	461a      	mov	r2, r3
 80178da:	d30b      	bcc.n	80178f4 <quorem+0x108>
 80178dc:	f8c8 4010 	str.w	r4, [r8, #16]
 80178e0:	4628      	mov	r0, r5
 80178e2:	b003      	add	sp, #12
 80178e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80178e8:	6812      	ldr	r2, [r2, #0]
 80178ea:	3b04      	subs	r3, #4
 80178ec:	2a00      	cmp	r2, #0
 80178ee:	d1ca      	bne.n	8017886 <quorem+0x9a>
 80178f0:	3c01      	subs	r4, #1
 80178f2:	e7c5      	b.n	8017880 <quorem+0x94>
 80178f4:	6812      	ldr	r2, [r2, #0]
 80178f6:	3b04      	subs	r3, #4
 80178f8:	2a00      	cmp	r2, #0
 80178fa:	d1ef      	bne.n	80178dc <quorem+0xf0>
 80178fc:	3c01      	subs	r4, #1
 80178fe:	e7ea      	b.n	80178d6 <quorem+0xea>
 8017900:	2000      	movs	r0, #0
 8017902:	e7ee      	b.n	80178e2 <quorem+0xf6>
 8017904:	0000      	movs	r0, r0
	...

08017908 <_dtoa_r>:
 8017908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801790c:	ec57 6b10 	vmov	r6, r7, d0
 8017910:	b097      	sub	sp, #92	; 0x5c
 8017912:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017914:	9106      	str	r1, [sp, #24]
 8017916:	4604      	mov	r4, r0
 8017918:	920b      	str	r2, [sp, #44]	; 0x2c
 801791a:	9312      	str	r3, [sp, #72]	; 0x48
 801791c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8017920:	e9cd 6700 	strd	r6, r7, [sp]
 8017924:	b93d      	cbnz	r5, 8017936 <_dtoa_r+0x2e>
 8017926:	2010      	movs	r0, #16
 8017928:	f7fe f8ea 	bl	8015b00 <malloc>
 801792c:	6260      	str	r0, [r4, #36]	; 0x24
 801792e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017932:	6005      	str	r5, [r0, #0]
 8017934:	60c5      	str	r5, [r0, #12]
 8017936:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017938:	6819      	ldr	r1, [r3, #0]
 801793a:	b151      	cbz	r1, 8017952 <_dtoa_r+0x4a>
 801793c:	685a      	ldr	r2, [r3, #4]
 801793e:	604a      	str	r2, [r1, #4]
 8017940:	2301      	movs	r3, #1
 8017942:	4093      	lsls	r3, r2
 8017944:	608b      	str	r3, [r1, #8]
 8017946:	4620      	mov	r0, r4
 8017948:	f001 f926 	bl	8018b98 <_Bfree>
 801794c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801794e:	2200      	movs	r2, #0
 8017950:	601a      	str	r2, [r3, #0]
 8017952:	1e3b      	subs	r3, r7, #0
 8017954:	bfbb      	ittet	lt
 8017956:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801795a:	9301      	strlt	r3, [sp, #4]
 801795c:	2300      	movge	r3, #0
 801795e:	2201      	movlt	r2, #1
 8017960:	bfac      	ite	ge
 8017962:	f8c8 3000 	strge.w	r3, [r8]
 8017966:	f8c8 2000 	strlt.w	r2, [r8]
 801796a:	4baf      	ldr	r3, [pc, #700]	; (8017c28 <_dtoa_r+0x320>)
 801796c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8017970:	ea33 0308 	bics.w	r3, r3, r8
 8017974:	d114      	bne.n	80179a0 <_dtoa_r+0x98>
 8017976:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017978:	f242 730f 	movw	r3, #9999	; 0x270f
 801797c:	6013      	str	r3, [r2, #0]
 801797e:	9b00      	ldr	r3, [sp, #0]
 8017980:	b923      	cbnz	r3, 801798c <_dtoa_r+0x84>
 8017982:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8017986:	2800      	cmp	r0, #0
 8017988:	f000 8542 	beq.w	8018410 <_dtoa_r+0xb08>
 801798c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801798e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8017c3c <_dtoa_r+0x334>
 8017992:	2b00      	cmp	r3, #0
 8017994:	f000 8544 	beq.w	8018420 <_dtoa_r+0xb18>
 8017998:	f10b 0303 	add.w	r3, fp, #3
 801799c:	f000 bd3e 	b.w	801841c <_dtoa_r+0xb14>
 80179a0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80179a4:	2200      	movs	r2, #0
 80179a6:	2300      	movs	r3, #0
 80179a8:	4630      	mov	r0, r6
 80179aa:	4639      	mov	r1, r7
 80179ac:	f7e9 f89c 	bl	8000ae8 <__aeabi_dcmpeq>
 80179b0:	4681      	mov	r9, r0
 80179b2:	b168      	cbz	r0, 80179d0 <_dtoa_r+0xc8>
 80179b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80179b6:	2301      	movs	r3, #1
 80179b8:	6013      	str	r3, [r2, #0]
 80179ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80179bc:	2b00      	cmp	r3, #0
 80179be:	f000 8524 	beq.w	801840a <_dtoa_r+0xb02>
 80179c2:	4b9a      	ldr	r3, [pc, #616]	; (8017c2c <_dtoa_r+0x324>)
 80179c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80179c6:	f103 3bff 	add.w	fp, r3, #4294967295
 80179ca:	6013      	str	r3, [r2, #0]
 80179cc:	f000 bd28 	b.w	8018420 <_dtoa_r+0xb18>
 80179d0:	aa14      	add	r2, sp, #80	; 0x50
 80179d2:	a915      	add	r1, sp, #84	; 0x54
 80179d4:	ec47 6b10 	vmov	d0, r6, r7
 80179d8:	4620      	mov	r0, r4
 80179da:	f001 fbeb 	bl	80191b4 <__d2b>
 80179de:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80179e2:	9004      	str	r0, [sp, #16]
 80179e4:	2d00      	cmp	r5, #0
 80179e6:	d07c      	beq.n	8017ae2 <_dtoa_r+0x1da>
 80179e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80179ec:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80179f0:	46b2      	mov	sl, r6
 80179f2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80179f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80179fa:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80179fe:	2200      	movs	r2, #0
 8017a00:	4b8b      	ldr	r3, [pc, #556]	; (8017c30 <_dtoa_r+0x328>)
 8017a02:	4650      	mov	r0, sl
 8017a04:	4659      	mov	r1, fp
 8017a06:	f7e8 fc4f 	bl	80002a8 <__aeabi_dsub>
 8017a0a:	a381      	add	r3, pc, #516	; (adr r3, 8017c10 <_dtoa_r+0x308>)
 8017a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a10:	f7e8 fe02 	bl	8000618 <__aeabi_dmul>
 8017a14:	a380      	add	r3, pc, #512	; (adr r3, 8017c18 <_dtoa_r+0x310>)
 8017a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a1a:	f7e8 fc47 	bl	80002ac <__adddf3>
 8017a1e:	4606      	mov	r6, r0
 8017a20:	4628      	mov	r0, r5
 8017a22:	460f      	mov	r7, r1
 8017a24:	f7e8 fd8e 	bl	8000544 <__aeabi_i2d>
 8017a28:	a37d      	add	r3, pc, #500	; (adr r3, 8017c20 <_dtoa_r+0x318>)
 8017a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a2e:	f7e8 fdf3 	bl	8000618 <__aeabi_dmul>
 8017a32:	4602      	mov	r2, r0
 8017a34:	460b      	mov	r3, r1
 8017a36:	4630      	mov	r0, r6
 8017a38:	4639      	mov	r1, r7
 8017a3a:	f7e8 fc37 	bl	80002ac <__adddf3>
 8017a3e:	4606      	mov	r6, r0
 8017a40:	460f      	mov	r7, r1
 8017a42:	f7e9 f899 	bl	8000b78 <__aeabi_d2iz>
 8017a46:	2200      	movs	r2, #0
 8017a48:	4682      	mov	sl, r0
 8017a4a:	2300      	movs	r3, #0
 8017a4c:	4630      	mov	r0, r6
 8017a4e:	4639      	mov	r1, r7
 8017a50:	f7e9 f854 	bl	8000afc <__aeabi_dcmplt>
 8017a54:	b148      	cbz	r0, 8017a6a <_dtoa_r+0x162>
 8017a56:	4650      	mov	r0, sl
 8017a58:	f7e8 fd74 	bl	8000544 <__aeabi_i2d>
 8017a5c:	4632      	mov	r2, r6
 8017a5e:	463b      	mov	r3, r7
 8017a60:	f7e9 f842 	bl	8000ae8 <__aeabi_dcmpeq>
 8017a64:	b908      	cbnz	r0, 8017a6a <_dtoa_r+0x162>
 8017a66:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017a6a:	f1ba 0f16 	cmp.w	sl, #22
 8017a6e:	d859      	bhi.n	8017b24 <_dtoa_r+0x21c>
 8017a70:	4970      	ldr	r1, [pc, #448]	; (8017c34 <_dtoa_r+0x32c>)
 8017a72:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8017a76:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017a7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017a7e:	f7e9 f85b 	bl	8000b38 <__aeabi_dcmpgt>
 8017a82:	2800      	cmp	r0, #0
 8017a84:	d050      	beq.n	8017b28 <_dtoa_r+0x220>
 8017a86:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017a8a:	2300      	movs	r3, #0
 8017a8c:	930f      	str	r3, [sp, #60]	; 0x3c
 8017a8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017a90:	1b5d      	subs	r5, r3, r5
 8017a92:	f1b5 0801 	subs.w	r8, r5, #1
 8017a96:	bf49      	itett	mi
 8017a98:	f1c5 0301 	rsbmi	r3, r5, #1
 8017a9c:	2300      	movpl	r3, #0
 8017a9e:	9305      	strmi	r3, [sp, #20]
 8017aa0:	f04f 0800 	movmi.w	r8, #0
 8017aa4:	bf58      	it	pl
 8017aa6:	9305      	strpl	r3, [sp, #20]
 8017aa8:	f1ba 0f00 	cmp.w	sl, #0
 8017aac:	db3e      	blt.n	8017b2c <_dtoa_r+0x224>
 8017aae:	2300      	movs	r3, #0
 8017ab0:	44d0      	add	r8, sl
 8017ab2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8017ab6:	9307      	str	r3, [sp, #28]
 8017ab8:	9b06      	ldr	r3, [sp, #24]
 8017aba:	2b09      	cmp	r3, #9
 8017abc:	f200 8090 	bhi.w	8017be0 <_dtoa_r+0x2d8>
 8017ac0:	2b05      	cmp	r3, #5
 8017ac2:	bfc4      	itt	gt
 8017ac4:	3b04      	subgt	r3, #4
 8017ac6:	9306      	strgt	r3, [sp, #24]
 8017ac8:	9b06      	ldr	r3, [sp, #24]
 8017aca:	f1a3 0302 	sub.w	r3, r3, #2
 8017ace:	bfcc      	ite	gt
 8017ad0:	2500      	movgt	r5, #0
 8017ad2:	2501      	movle	r5, #1
 8017ad4:	2b03      	cmp	r3, #3
 8017ad6:	f200 808f 	bhi.w	8017bf8 <_dtoa_r+0x2f0>
 8017ada:	e8df f003 	tbb	[pc, r3]
 8017ade:	7f7d      	.short	0x7f7d
 8017ae0:	7131      	.short	0x7131
 8017ae2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8017ae6:	441d      	add	r5, r3
 8017ae8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8017aec:	2820      	cmp	r0, #32
 8017aee:	dd13      	ble.n	8017b18 <_dtoa_r+0x210>
 8017af0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8017af4:	9b00      	ldr	r3, [sp, #0]
 8017af6:	fa08 f800 	lsl.w	r8, r8, r0
 8017afa:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8017afe:	fa23 f000 	lsr.w	r0, r3, r0
 8017b02:	ea48 0000 	orr.w	r0, r8, r0
 8017b06:	f7e8 fd0d 	bl	8000524 <__aeabi_ui2d>
 8017b0a:	2301      	movs	r3, #1
 8017b0c:	4682      	mov	sl, r0
 8017b0e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8017b12:	3d01      	subs	r5, #1
 8017b14:	9313      	str	r3, [sp, #76]	; 0x4c
 8017b16:	e772      	b.n	80179fe <_dtoa_r+0xf6>
 8017b18:	9b00      	ldr	r3, [sp, #0]
 8017b1a:	f1c0 0020 	rsb	r0, r0, #32
 8017b1e:	fa03 f000 	lsl.w	r0, r3, r0
 8017b22:	e7f0      	b.n	8017b06 <_dtoa_r+0x1fe>
 8017b24:	2301      	movs	r3, #1
 8017b26:	e7b1      	b.n	8017a8c <_dtoa_r+0x184>
 8017b28:	900f      	str	r0, [sp, #60]	; 0x3c
 8017b2a:	e7b0      	b.n	8017a8e <_dtoa_r+0x186>
 8017b2c:	9b05      	ldr	r3, [sp, #20]
 8017b2e:	eba3 030a 	sub.w	r3, r3, sl
 8017b32:	9305      	str	r3, [sp, #20]
 8017b34:	f1ca 0300 	rsb	r3, sl, #0
 8017b38:	9307      	str	r3, [sp, #28]
 8017b3a:	2300      	movs	r3, #0
 8017b3c:	930e      	str	r3, [sp, #56]	; 0x38
 8017b3e:	e7bb      	b.n	8017ab8 <_dtoa_r+0x1b0>
 8017b40:	2301      	movs	r3, #1
 8017b42:	930a      	str	r3, [sp, #40]	; 0x28
 8017b44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017b46:	2b00      	cmp	r3, #0
 8017b48:	dd59      	ble.n	8017bfe <_dtoa_r+0x2f6>
 8017b4a:	9302      	str	r3, [sp, #8]
 8017b4c:	4699      	mov	r9, r3
 8017b4e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8017b50:	2200      	movs	r2, #0
 8017b52:	6072      	str	r2, [r6, #4]
 8017b54:	2204      	movs	r2, #4
 8017b56:	f102 0014 	add.w	r0, r2, #20
 8017b5a:	4298      	cmp	r0, r3
 8017b5c:	6871      	ldr	r1, [r6, #4]
 8017b5e:	d953      	bls.n	8017c08 <_dtoa_r+0x300>
 8017b60:	4620      	mov	r0, r4
 8017b62:	f000 ffe5 	bl	8018b30 <_Balloc>
 8017b66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017b68:	6030      	str	r0, [r6, #0]
 8017b6a:	f1b9 0f0e 	cmp.w	r9, #14
 8017b6e:	f8d3 b000 	ldr.w	fp, [r3]
 8017b72:	f200 80e6 	bhi.w	8017d42 <_dtoa_r+0x43a>
 8017b76:	2d00      	cmp	r5, #0
 8017b78:	f000 80e3 	beq.w	8017d42 <_dtoa_r+0x43a>
 8017b7c:	ed9d 7b00 	vldr	d7, [sp]
 8017b80:	f1ba 0f00 	cmp.w	sl, #0
 8017b84:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8017b88:	dd74      	ble.n	8017c74 <_dtoa_r+0x36c>
 8017b8a:	4a2a      	ldr	r2, [pc, #168]	; (8017c34 <_dtoa_r+0x32c>)
 8017b8c:	f00a 030f 	and.w	r3, sl, #15
 8017b90:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8017b94:	ed93 7b00 	vldr	d7, [r3]
 8017b98:	ea4f 162a 	mov.w	r6, sl, asr #4
 8017b9c:	06f0      	lsls	r0, r6, #27
 8017b9e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8017ba2:	d565      	bpl.n	8017c70 <_dtoa_r+0x368>
 8017ba4:	4b24      	ldr	r3, [pc, #144]	; (8017c38 <_dtoa_r+0x330>)
 8017ba6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8017baa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8017bae:	f7e8 fe5d 	bl	800086c <__aeabi_ddiv>
 8017bb2:	e9cd 0100 	strd	r0, r1, [sp]
 8017bb6:	f006 060f 	and.w	r6, r6, #15
 8017bba:	2503      	movs	r5, #3
 8017bbc:	4f1e      	ldr	r7, [pc, #120]	; (8017c38 <_dtoa_r+0x330>)
 8017bbe:	e04c      	b.n	8017c5a <_dtoa_r+0x352>
 8017bc0:	2301      	movs	r3, #1
 8017bc2:	930a      	str	r3, [sp, #40]	; 0x28
 8017bc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017bc6:	4453      	add	r3, sl
 8017bc8:	f103 0901 	add.w	r9, r3, #1
 8017bcc:	9302      	str	r3, [sp, #8]
 8017bce:	464b      	mov	r3, r9
 8017bd0:	2b01      	cmp	r3, #1
 8017bd2:	bfb8      	it	lt
 8017bd4:	2301      	movlt	r3, #1
 8017bd6:	e7ba      	b.n	8017b4e <_dtoa_r+0x246>
 8017bd8:	2300      	movs	r3, #0
 8017bda:	e7b2      	b.n	8017b42 <_dtoa_r+0x23a>
 8017bdc:	2300      	movs	r3, #0
 8017bde:	e7f0      	b.n	8017bc2 <_dtoa_r+0x2ba>
 8017be0:	2501      	movs	r5, #1
 8017be2:	2300      	movs	r3, #0
 8017be4:	9306      	str	r3, [sp, #24]
 8017be6:	950a      	str	r5, [sp, #40]	; 0x28
 8017be8:	f04f 33ff 	mov.w	r3, #4294967295
 8017bec:	9302      	str	r3, [sp, #8]
 8017bee:	4699      	mov	r9, r3
 8017bf0:	2200      	movs	r2, #0
 8017bf2:	2312      	movs	r3, #18
 8017bf4:	920b      	str	r2, [sp, #44]	; 0x2c
 8017bf6:	e7aa      	b.n	8017b4e <_dtoa_r+0x246>
 8017bf8:	2301      	movs	r3, #1
 8017bfa:	930a      	str	r3, [sp, #40]	; 0x28
 8017bfc:	e7f4      	b.n	8017be8 <_dtoa_r+0x2e0>
 8017bfe:	2301      	movs	r3, #1
 8017c00:	9302      	str	r3, [sp, #8]
 8017c02:	4699      	mov	r9, r3
 8017c04:	461a      	mov	r2, r3
 8017c06:	e7f5      	b.n	8017bf4 <_dtoa_r+0x2ec>
 8017c08:	3101      	adds	r1, #1
 8017c0a:	6071      	str	r1, [r6, #4]
 8017c0c:	0052      	lsls	r2, r2, #1
 8017c0e:	e7a2      	b.n	8017b56 <_dtoa_r+0x24e>
 8017c10:	636f4361 	.word	0x636f4361
 8017c14:	3fd287a7 	.word	0x3fd287a7
 8017c18:	8b60c8b3 	.word	0x8b60c8b3
 8017c1c:	3fc68a28 	.word	0x3fc68a28
 8017c20:	509f79fb 	.word	0x509f79fb
 8017c24:	3fd34413 	.word	0x3fd34413
 8017c28:	7ff00000 	.word	0x7ff00000
 8017c2c:	0801c044 	.word	0x0801c044
 8017c30:	3ff80000 	.word	0x3ff80000
 8017c34:	0801bf48 	.word	0x0801bf48
 8017c38:	0801bf20 	.word	0x0801bf20
 8017c3c:	0801bf11 	.word	0x0801bf11
 8017c40:	07f1      	lsls	r1, r6, #31
 8017c42:	d508      	bpl.n	8017c56 <_dtoa_r+0x34e>
 8017c44:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017c48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017c4c:	f7e8 fce4 	bl	8000618 <__aeabi_dmul>
 8017c50:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8017c54:	3501      	adds	r5, #1
 8017c56:	1076      	asrs	r6, r6, #1
 8017c58:	3708      	adds	r7, #8
 8017c5a:	2e00      	cmp	r6, #0
 8017c5c:	d1f0      	bne.n	8017c40 <_dtoa_r+0x338>
 8017c5e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017c62:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017c66:	f7e8 fe01 	bl	800086c <__aeabi_ddiv>
 8017c6a:	e9cd 0100 	strd	r0, r1, [sp]
 8017c6e:	e01a      	b.n	8017ca6 <_dtoa_r+0x39e>
 8017c70:	2502      	movs	r5, #2
 8017c72:	e7a3      	b.n	8017bbc <_dtoa_r+0x2b4>
 8017c74:	f000 80a0 	beq.w	8017db8 <_dtoa_r+0x4b0>
 8017c78:	f1ca 0600 	rsb	r6, sl, #0
 8017c7c:	4b9f      	ldr	r3, [pc, #636]	; (8017efc <_dtoa_r+0x5f4>)
 8017c7e:	4fa0      	ldr	r7, [pc, #640]	; (8017f00 <_dtoa_r+0x5f8>)
 8017c80:	f006 020f 	and.w	r2, r6, #15
 8017c84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c8c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8017c90:	f7e8 fcc2 	bl	8000618 <__aeabi_dmul>
 8017c94:	e9cd 0100 	strd	r0, r1, [sp]
 8017c98:	1136      	asrs	r6, r6, #4
 8017c9a:	2300      	movs	r3, #0
 8017c9c:	2502      	movs	r5, #2
 8017c9e:	2e00      	cmp	r6, #0
 8017ca0:	d17f      	bne.n	8017da2 <_dtoa_r+0x49a>
 8017ca2:	2b00      	cmp	r3, #0
 8017ca4:	d1e1      	bne.n	8017c6a <_dtoa_r+0x362>
 8017ca6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017ca8:	2b00      	cmp	r3, #0
 8017caa:	f000 8087 	beq.w	8017dbc <_dtoa_r+0x4b4>
 8017cae:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017cb2:	2200      	movs	r2, #0
 8017cb4:	4b93      	ldr	r3, [pc, #588]	; (8017f04 <_dtoa_r+0x5fc>)
 8017cb6:	4630      	mov	r0, r6
 8017cb8:	4639      	mov	r1, r7
 8017cba:	f7e8 ff1f 	bl	8000afc <__aeabi_dcmplt>
 8017cbe:	2800      	cmp	r0, #0
 8017cc0:	d07c      	beq.n	8017dbc <_dtoa_r+0x4b4>
 8017cc2:	f1b9 0f00 	cmp.w	r9, #0
 8017cc6:	d079      	beq.n	8017dbc <_dtoa_r+0x4b4>
 8017cc8:	9b02      	ldr	r3, [sp, #8]
 8017cca:	2b00      	cmp	r3, #0
 8017ccc:	dd35      	ble.n	8017d3a <_dtoa_r+0x432>
 8017cce:	f10a 33ff 	add.w	r3, sl, #4294967295
 8017cd2:	9308      	str	r3, [sp, #32]
 8017cd4:	4639      	mov	r1, r7
 8017cd6:	2200      	movs	r2, #0
 8017cd8:	4b8b      	ldr	r3, [pc, #556]	; (8017f08 <_dtoa_r+0x600>)
 8017cda:	4630      	mov	r0, r6
 8017cdc:	f7e8 fc9c 	bl	8000618 <__aeabi_dmul>
 8017ce0:	e9cd 0100 	strd	r0, r1, [sp]
 8017ce4:	9f02      	ldr	r7, [sp, #8]
 8017ce6:	3501      	adds	r5, #1
 8017ce8:	4628      	mov	r0, r5
 8017cea:	f7e8 fc2b 	bl	8000544 <__aeabi_i2d>
 8017cee:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017cf2:	f7e8 fc91 	bl	8000618 <__aeabi_dmul>
 8017cf6:	2200      	movs	r2, #0
 8017cf8:	4b84      	ldr	r3, [pc, #528]	; (8017f0c <_dtoa_r+0x604>)
 8017cfa:	f7e8 fad7 	bl	80002ac <__adddf3>
 8017cfe:	4605      	mov	r5, r0
 8017d00:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8017d04:	2f00      	cmp	r7, #0
 8017d06:	d15d      	bne.n	8017dc4 <_dtoa_r+0x4bc>
 8017d08:	2200      	movs	r2, #0
 8017d0a:	4b81      	ldr	r3, [pc, #516]	; (8017f10 <_dtoa_r+0x608>)
 8017d0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017d10:	f7e8 faca 	bl	80002a8 <__aeabi_dsub>
 8017d14:	462a      	mov	r2, r5
 8017d16:	4633      	mov	r3, r6
 8017d18:	e9cd 0100 	strd	r0, r1, [sp]
 8017d1c:	f7e8 ff0c 	bl	8000b38 <__aeabi_dcmpgt>
 8017d20:	2800      	cmp	r0, #0
 8017d22:	f040 8288 	bne.w	8018236 <_dtoa_r+0x92e>
 8017d26:	462a      	mov	r2, r5
 8017d28:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8017d2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017d30:	f7e8 fee4 	bl	8000afc <__aeabi_dcmplt>
 8017d34:	2800      	cmp	r0, #0
 8017d36:	f040 827c 	bne.w	8018232 <_dtoa_r+0x92a>
 8017d3a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8017d3e:	e9cd 2300 	strd	r2, r3, [sp]
 8017d42:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017d44:	2b00      	cmp	r3, #0
 8017d46:	f2c0 8150 	blt.w	8017fea <_dtoa_r+0x6e2>
 8017d4a:	f1ba 0f0e 	cmp.w	sl, #14
 8017d4e:	f300 814c 	bgt.w	8017fea <_dtoa_r+0x6e2>
 8017d52:	4b6a      	ldr	r3, [pc, #424]	; (8017efc <_dtoa_r+0x5f4>)
 8017d54:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8017d58:	ed93 7b00 	vldr	d7, [r3]
 8017d5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017d5e:	2b00      	cmp	r3, #0
 8017d60:	ed8d 7b02 	vstr	d7, [sp, #8]
 8017d64:	f280 80d8 	bge.w	8017f18 <_dtoa_r+0x610>
 8017d68:	f1b9 0f00 	cmp.w	r9, #0
 8017d6c:	f300 80d4 	bgt.w	8017f18 <_dtoa_r+0x610>
 8017d70:	f040 825e 	bne.w	8018230 <_dtoa_r+0x928>
 8017d74:	2200      	movs	r2, #0
 8017d76:	4b66      	ldr	r3, [pc, #408]	; (8017f10 <_dtoa_r+0x608>)
 8017d78:	ec51 0b17 	vmov	r0, r1, d7
 8017d7c:	f7e8 fc4c 	bl	8000618 <__aeabi_dmul>
 8017d80:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017d84:	f7e8 fece 	bl	8000b24 <__aeabi_dcmpge>
 8017d88:	464f      	mov	r7, r9
 8017d8a:	464e      	mov	r6, r9
 8017d8c:	2800      	cmp	r0, #0
 8017d8e:	f040 8234 	bne.w	80181fa <_dtoa_r+0x8f2>
 8017d92:	2331      	movs	r3, #49	; 0x31
 8017d94:	f10b 0501 	add.w	r5, fp, #1
 8017d98:	f88b 3000 	strb.w	r3, [fp]
 8017d9c:	f10a 0a01 	add.w	sl, sl, #1
 8017da0:	e22f      	b.n	8018202 <_dtoa_r+0x8fa>
 8017da2:	07f2      	lsls	r2, r6, #31
 8017da4:	d505      	bpl.n	8017db2 <_dtoa_r+0x4aa>
 8017da6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017daa:	f7e8 fc35 	bl	8000618 <__aeabi_dmul>
 8017dae:	3501      	adds	r5, #1
 8017db0:	2301      	movs	r3, #1
 8017db2:	1076      	asrs	r6, r6, #1
 8017db4:	3708      	adds	r7, #8
 8017db6:	e772      	b.n	8017c9e <_dtoa_r+0x396>
 8017db8:	2502      	movs	r5, #2
 8017dba:	e774      	b.n	8017ca6 <_dtoa_r+0x39e>
 8017dbc:	f8cd a020 	str.w	sl, [sp, #32]
 8017dc0:	464f      	mov	r7, r9
 8017dc2:	e791      	b.n	8017ce8 <_dtoa_r+0x3e0>
 8017dc4:	4b4d      	ldr	r3, [pc, #308]	; (8017efc <_dtoa_r+0x5f4>)
 8017dc6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8017dca:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8017dce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017dd0:	2b00      	cmp	r3, #0
 8017dd2:	d047      	beq.n	8017e64 <_dtoa_r+0x55c>
 8017dd4:	4602      	mov	r2, r0
 8017dd6:	460b      	mov	r3, r1
 8017dd8:	2000      	movs	r0, #0
 8017dda:	494e      	ldr	r1, [pc, #312]	; (8017f14 <_dtoa_r+0x60c>)
 8017ddc:	f7e8 fd46 	bl	800086c <__aeabi_ddiv>
 8017de0:	462a      	mov	r2, r5
 8017de2:	4633      	mov	r3, r6
 8017de4:	f7e8 fa60 	bl	80002a8 <__aeabi_dsub>
 8017de8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017dec:	465d      	mov	r5, fp
 8017dee:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017df2:	f7e8 fec1 	bl	8000b78 <__aeabi_d2iz>
 8017df6:	4606      	mov	r6, r0
 8017df8:	f7e8 fba4 	bl	8000544 <__aeabi_i2d>
 8017dfc:	4602      	mov	r2, r0
 8017dfe:	460b      	mov	r3, r1
 8017e00:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017e04:	f7e8 fa50 	bl	80002a8 <__aeabi_dsub>
 8017e08:	3630      	adds	r6, #48	; 0x30
 8017e0a:	f805 6b01 	strb.w	r6, [r5], #1
 8017e0e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017e12:	e9cd 0100 	strd	r0, r1, [sp]
 8017e16:	f7e8 fe71 	bl	8000afc <__aeabi_dcmplt>
 8017e1a:	2800      	cmp	r0, #0
 8017e1c:	d163      	bne.n	8017ee6 <_dtoa_r+0x5de>
 8017e1e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017e22:	2000      	movs	r0, #0
 8017e24:	4937      	ldr	r1, [pc, #220]	; (8017f04 <_dtoa_r+0x5fc>)
 8017e26:	f7e8 fa3f 	bl	80002a8 <__aeabi_dsub>
 8017e2a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017e2e:	f7e8 fe65 	bl	8000afc <__aeabi_dcmplt>
 8017e32:	2800      	cmp	r0, #0
 8017e34:	f040 80b7 	bne.w	8017fa6 <_dtoa_r+0x69e>
 8017e38:	eba5 030b 	sub.w	r3, r5, fp
 8017e3c:	429f      	cmp	r7, r3
 8017e3e:	f77f af7c 	ble.w	8017d3a <_dtoa_r+0x432>
 8017e42:	2200      	movs	r2, #0
 8017e44:	4b30      	ldr	r3, [pc, #192]	; (8017f08 <_dtoa_r+0x600>)
 8017e46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017e4a:	f7e8 fbe5 	bl	8000618 <__aeabi_dmul>
 8017e4e:	2200      	movs	r2, #0
 8017e50:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017e54:	4b2c      	ldr	r3, [pc, #176]	; (8017f08 <_dtoa_r+0x600>)
 8017e56:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017e5a:	f7e8 fbdd 	bl	8000618 <__aeabi_dmul>
 8017e5e:	e9cd 0100 	strd	r0, r1, [sp]
 8017e62:	e7c4      	b.n	8017dee <_dtoa_r+0x4e6>
 8017e64:	462a      	mov	r2, r5
 8017e66:	4633      	mov	r3, r6
 8017e68:	f7e8 fbd6 	bl	8000618 <__aeabi_dmul>
 8017e6c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017e70:	eb0b 0507 	add.w	r5, fp, r7
 8017e74:	465e      	mov	r6, fp
 8017e76:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017e7a:	f7e8 fe7d 	bl	8000b78 <__aeabi_d2iz>
 8017e7e:	4607      	mov	r7, r0
 8017e80:	f7e8 fb60 	bl	8000544 <__aeabi_i2d>
 8017e84:	3730      	adds	r7, #48	; 0x30
 8017e86:	4602      	mov	r2, r0
 8017e88:	460b      	mov	r3, r1
 8017e8a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017e8e:	f7e8 fa0b 	bl	80002a8 <__aeabi_dsub>
 8017e92:	f806 7b01 	strb.w	r7, [r6], #1
 8017e96:	42ae      	cmp	r6, r5
 8017e98:	e9cd 0100 	strd	r0, r1, [sp]
 8017e9c:	f04f 0200 	mov.w	r2, #0
 8017ea0:	d126      	bne.n	8017ef0 <_dtoa_r+0x5e8>
 8017ea2:	4b1c      	ldr	r3, [pc, #112]	; (8017f14 <_dtoa_r+0x60c>)
 8017ea4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017ea8:	f7e8 fa00 	bl	80002ac <__adddf3>
 8017eac:	4602      	mov	r2, r0
 8017eae:	460b      	mov	r3, r1
 8017eb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017eb4:	f7e8 fe40 	bl	8000b38 <__aeabi_dcmpgt>
 8017eb8:	2800      	cmp	r0, #0
 8017eba:	d174      	bne.n	8017fa6 <_dtoa_r+0x69e>
 8017ebc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017ec0:	2000      	movs	r0, #0
 8017ec2:	4914      	ldr	r1, [pc, #80]	; (8017f14 <_dtoa_r+0x60c>)
 8017ec4:	f7e8 f9f0 	bl	80002a8 <__aeabi_dsub>
 8017ec8:	4602      	mov	r2, r0
 8017eca:	460b      	mov	r3, r1
 8017ecc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017ed0:	f7e8 fe14 	bl	8000afc <__aeabi_dcmplt>
 8017ed4:	2800      	cmp	r0, #0
 8017ed6:	f43f af30 	beq.w	8017d3a <_dtoa_r+0x432>
 8017eda:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017ede:	2b30      	cmp	r3, #48	; 0x30
 8017ee0:	f105 32ff 	add.w	r2, r5, #4294967295
 8017ee4:	d002      	beq.n	8017eec <_dtoa_r+0x5e4>
 8017ee6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8017eea:	e04a      	b.n	8017f82 <_dtoa_r+0x67a>
 8017eec:	4615      	mov	r5, r2
 8017eee:	e7f4      	b.n	8017eda <_dtoa_r+0x5d2>
 8017ef0:	4b05      	ldr	r3, [pc, #20]	; (8017f08 <_dtoa_r+0x600>)
 8017ef2:	f7e8 fb91 	bl	8000618 <__aeabi_dmul>
 8017ef6:	e9cd 0100 	strd	r0, r1, [sp]
 8017efa:	e7bc      	b.n	8017e76 <_dtoa_r+0x56e>
 8017efc:	0801bf48 	.word	0x0801bf48
 8017f00:	0801bf20 	.word	0x0801bf20
 8017f04:	3ff00000 	.word	0x3ff00000
 8017f08:	40240000 	.word	0x40240000
 8017f0c:	401c0000 	.word	0x401c0000
 8017f10:	40140000 	.word	0x40140000
 8017f14:	3fe00000 	.word	0x3fe00000
 8017f18:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017f1c:	465d      	mov	r5, fp
 8017f1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017f22:	4630      	mov	r0, r6
 8017f24:	4639      	mov	r1, r7
 8017f26:	f7e8 fca1 	bl	800086c <__aeabi_ddiv>
 8017f2a:	f7e8 fe25 	bl	8000b78 <__aeabi_d2iz>
 8017f2e:	4680      	mov	r8, r0
 8017f30:	f7e8 fb08 	bl	8000544 <__aeabi_i2d>
 8017f34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017f38:	f7e8 fb6e 	bl	8000618 <__aeabi_dmul>
 8017f3c:	4602      	mov	r2, r0
 8017f3e:	460b      	mov	r3, r1
 8017f40:	4630      	mov	r0, r6
 8017f42:	4639      	mov	r1, r7
 8017f44:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8017f48:	f7e8 f9ae 	bl	80002a8 <__aeabi_dsub>
 8017f4c:	f805 6b01 	strb.w	r6, [r5], #1
 8017f50:	eba5 060b 	sub.w	r6, r5, fp
 8017f54:	45b1      	cmp	r9, r6
 8017f56:	4602      	mov	r2, r0
 8017f58:	460b      	mov	r3, r1
 8017f5a:	d139      	bne.n	8017fd0 <_dtoa_r+0x6c8>
 8017f5c:	f7e8 f9a6 	bl	80002ac <__adddf3>
 8017f60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017f64:	4606      	mov	r6, r0
 8017f66:	460f      	mov	r7, r1
 8017f68:	f7e8 fde6 	bl	8000b38 <__aeabi_dcmpgt>
 8017f6c:	b9c8      	cbnz	r0, 8017fa2 <_dtoa_r+0x69a>
 8017f6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017f72:	4630      	mov	r0, r6
 8017f74:	4639      	mov	r1, r7
 8017f76:	f7e8 fdb7 	bl	8000ae8 <__aeabi_dcmpeq>
 8017f7a:	b110      	cbz	r0, 8017f82 <_dtoa_r+0x67a>
 8017f7c:	f018 0f01 	tst.w	r8, #1
 8017f80:	d10f      	bne.n	8017fa2 <_dtoa_r+0x69a>
 8017f82:	9904      	ldr	r1, [sp, #16]
 8017f84:	4620      	mov	r0, r4
 8017f86:	f000 fe07 	bl	8018b98 <_Bfree>
 8017f8a:	2300      	movs	r3, #0
 8017f8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017f8e:	702b      	strb	r3, [r5, #0]
 8017f90:	f10a 0301 	add.w	r3, sl, #1
 8017f94:	6013      	str	r3, [r2, #0]
 8017f96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017f98:	2b00      	cmp	r3, #0
 8017f9a:	f000 8241 	beq.w	8018420 <_dtoa_r+0xb18>
 8017f9e:	601d      	str	r5, [r3, #0]
 8017fa0:	e23e      	b.n	8018420 <_dtoa_r+0xb18>
 8017fa2:	f8cd a020 	str.w	sl, [sp, #32]
 8017fa6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8017faa:	2a39      	cmp	r2, #57	; 0x39
 8017fac:	f105 33ff 	add.w	r3, r5, #4294967295
 8017fb0:	d108      	bne.n	8017fc4 <_dtoa_r+0x6bc>
 8017fb2:	459b      	cmp	fp, r3
 8017fb4:	d10a      	bne.n	8017fcc <_dtoa_r+0x6c4>
 8017fb6:	9b08      	ldr	r3, [sp, #32]
 8017fb8:	3301      	adds	r3, #1
 8017fba:	9308      	str	r3, [sp, #32]
 8017fbc:	2330      	movs	r3, #48	; 0x30
 8017fbe:	f88b 3000 	strb.w	r3, [fp]
 8017fc2:	465b      	mov	r3, fp
 8017fc4:	781a      	ldrb	r2, [r3, #0]
 8017fc6:	3201      	adds	r2, #1
 8017fc8:	701a      	strb	r2, [r3, #0]
 8017fca:	e78c      	b.n	8017ee6 <_dtoa_r+0x5de>
 8017fcc:	461d      	mov	r5, r3
 8017fce:	e7ea      	b.n	8017fa6 <_dtoa_r+0x69e>
 8017fd0:	2200      	movs	r2, #0
 8017fd2:	4b9b      	ldr	r3, [pc, #620]	; (8018240 <_dtoa_r+0x938>)
 8017fd4:	f7e8 fb20 	bl	8000618 <__aeabi_dmul>
 8017fd8:	2200      	movs	r2, #0
 8017fda:	2300      	movs	r3, #0
 8017fdc:	4606      	mov	r6, r0
 8017fde:	460f      	mov	r7, r1
 8017fe0:	f7e8 fd82 	bl	8000ae8 <__aeabi_dcmpeq>
 8017fe4:	2800      	cmp	r0, #0
 8017fe6:	d09a      	beq.n	8017f1e <_dtoa_r+0x616>
 8017fe8:	e7cb      	b.n	8017f82 <_dtoa_r+0x67a>
 8017fea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017fec:	2a00      	cmp	r2, #0
 8017fee:	f000 808b 	beq.w	8018108 <_dtoa_r+0x800>
 8017ff2:	9a06      	ldr	r2, [sp, #24]
 8017ff4:	2a01      	cmp	r2, #1
 8017ff6:	dc6e      	bgt.n	80180d6 <_dtoa_r+0x7ce>
 8017ff8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017ffa:	2a00      	cmp	r2, #0
 8017ffc:	d067      	beq.n	80180ce <_dtoa_r+0x7c6>
 8017ffe:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8018002:	9f07      	ldr	r7, [sp, #28]
 8018004:	9d05      	ldr	r5, [sp, #20]
 8018006:	9a05      	ldr	r2, [sp, #20]
 8018008:	2101      	movs	r1, #1
 801800a:	441a      	add	r2, r3
 801800c:	4620      	mov	r0, r4
 801800e:	9205      	str	r2, [sp, #20]
 8018010:	4498      	add	r8, r3
 8018012:	f000 fe9f 	bl	8018d54 <__i2b>
 8018016:	4606      	mov	r6, r0
 8018018:	2d00      	cmp	r5, #0
 801801a:	dd0c      	ble.n	8018036 <_dtoa_r+0x72e>
 801801c:	f1b8 0f00 	cmp.w	r8, #0
 8018020:	dd09      	ble.n	8018036 <_dtoa_r+0x72e>
 8018022:	4545      	cmp	r5, r8
 8018024:	9a05      	ldr	r2, [sp, #20]
 8018026:	462b      	mov	r3, r5
 8018028:	bfa8      	it	ge
 801802a:	4643      	movge	r3, r8
 801802c:	1ad2      	subs	r2, r2, r3
 801802e:	9205      	str	r2, [sp, #20]
 8018030:	1aed      	subs	r5, r5, r3
 8018032:	eba8 0803 	sub.w	r8, r8, r3
 8018036:	9b07      	ldr	r3, [sp, #28]
 8018038:	b1eb      	cbz	r3, 8018076 <_dtoa_r+0x76e>
 801803a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801803c:	2b00      	cmp	r3, #0
 801803e:	d067      	beq.n	8018110 <_dtoa_r+0x808>
 8018040:	b18f      	cbz	r7, 8018066 <_dtoa_r+0x75e>
 8018042:	4631      	mov	r1, r6
 8018044:	463a      	mov	r2, r7
 8018046:	4620      	mov	r0, r4
 8018048:	f000 ff24 	bl	8018e94 <__pow5mult>
 801804c:	9a04      	ldr	r2, [sp, #16]
 801804e:	4601      	mov	r1, r0
 8018050:	4606      	mov	r6, r0
 8018052:	4620      	mov	r0, r4
 8018054:	f000 fe87 	bl	8018d66 <__multiply>
 8018058:	9904      	ldr	r1, [sp, #16]
 801805a:	9008      	str	r0, [sp, #32]
 801805c:	4620      	mov	r0, r4
 801805e:	f000 fd9b 	bl	8018b98 <_Bfree>
 8018062:	9b08      	ldr	r3, [sp, #32]
 8018064:	9304      	str	r3, [sp, #16]
 8018066:	9b07      	ldr	r3, [sp, #28]
 8018068:	1bda      	subs	r2, r3, r7
 801806a:	d004      	beq.n	8018076 <_dtoa_r+0x76e>
 801806c:	9904      	ldr	r1, [sp, #16]
 801806e:	4620      	mov	r0, r4
 8018070:	f000 ff10 	bl	8018e94 <__pow5mult>
 8018074:	9004      	str	r0, [sp, #16]
 8018076:	2101      	movs	r1, #1
 8018078:	4620      	mov	r0, r4
 801807a:	f000 fe6b 	bl	8018d54 <__i2b>
 801807e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018080:	4607      	mov	r7, r0
 8018082:	2b00      	cmp	r3, #0
 8018084:	f000 81d0 	beq.w	8018428 <_dtoa_r+0xb20>
 8018088:	461a      	mov	r2, r3
 801808a:	4601      	mov	r1, r0
 801808c:	4620      	mov	r0, r4
 801808e:	f000 ff01 	bl	8018e94 <__pow5mult>
 8018092:	9b06      	ldr	r3, [sp, #24]
 8018094:	2b01      	cmp	r3, #1
 8018096:	4607      	mov	r7, r0
 8018098:	dc40      	bgt.n	801811c <_dtoa_r+0x814>
 801809a:	9b00      	ldr	r3, [sp, #0]
 801809c:	2b00      	cmp	r3, #0
 801809e:	d139      	bne.n	8018114 <_dtoa_r+0x80c>
 80180a0:	9b01      	ldr	r3, [sp, #4]
 80180a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80180a6:	2b00      	cmp	r3, #0
 80180a8:	d136      	bne.n	8018118 <_dtoa_r+0x810>
 80180aa:	9b01      	ldr	r3, [sp, #4]
 80180ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80180b0:	0d1b      	lsrs	r3, r3, #20
 80180b2:	051b      	lsls	r3, r3, #20
 80180b4:	b12b      	cbz	r3, 80180c2 <_dtoa_r+0x7ba>
 80180b6:	9b05      	ldr	r3, [sp, #20]
 80180b8:	3301      	adds	r3, #1
 80180ba:	9305      	str	r3, [sp, #20]
 80180bc:	f108 0801 	add.w	r8, r8, #1
 80180c0:	2301      	movs	r3, #1
 80180c2:	9307      	str	r3, [sp, #28]
 80180c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80180c6:	2b00      	cmp	r3, #0
 80180c8:	d12a      	bne.n	8018120 <_dtoa_r+0x818>
 80180ca:	2001      	movs	r0, #1
 80180cc:	e030      	b.n	8018130 <_dtoa_r+0x828>
 80180ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80180d0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80180d4:	e795      	b.n	8018002 <_dtoa_r+0x6fa>
 80180d6:	9b07      	ldr	r3, [sp, #28]
 80180d8:	f109 37ff 	add.w	r7, r9, #4294967295
 80180dc:	42bb      	cmp	r3, r7
 80180de:	bfbf      	itttt	lt
 80180e0:	9b07      	ldrlt	r3, [sp, #28]
 80180e2:	9707      	strlt	r7, [sp, #28]
 80180e4:	1afa      	sublt	r2, r7, r3
 80180e6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80180e8:	bfbb      	ittet	lt
 80180ea:	189b      	addlt	r3, r3, r2
 80180ec:	930e      	strlt	r3, [sp, #56]	; 0x38
 80180ee:	1bdf      	subge	r7, r3, r7
 80180f0:	2700      	movlt	r7, #0
 80180f2:	f1b9 0f00 	cmp.w	r9, #0
 80180f6:	bfb5      	itete	lt
 80180f8:	9b05      	ldrlt	r3, [sp, #20]
 80180fa:	9d05      	ldrge	r5, [sp, #20]
 80180fc:	eba3 0509 	sublt.w	r5, r3, r9
 8018100:	464b      	movge	r3, r9
 8018102:	bfb8      	it	lt
 8018104:	2300      	movlt	r3, #0
 8018106:	e77e      	b.n	8018006 <_dtoa_r+0x6fe>
 8018108:	9f07      	ldr	r7, [sp, #28]
 801810a:	9d05      	ldr	r5, [sp, #20]
 801810c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801810e:	e783      	b.n	8018018 <_dtoa_r+0x710>
 8018110:	9a07      	ldr	r2, [sp, #28]
 8018112:	e7ab      	b.n	801806c <_dtoa_r+0x764>
 8018114:	2300      	movs	r3, #0
 8018116:	e7d4      	b.n	80180c2 <_dtoa_r+0x7ba>
 8018118:	9b00      	ldr	r3, [sp, #0]
 801811a:	e7d2      	b.n	80180c2 <_dtoa_r+0x7ba>
 801811c:	2300      	movs	r3, #0
 801811e:	9307      	str	r3, [sp, #28]
 8018120:	693b      	ldr	r3, [r7, #16]
 8018122:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8018126:	6918      	ldr	r0, [r3, #16]
 8018128:	f000 fdc6 	bl	8018cb8 <__hi0bits>
 801812c:	f1c0 0020 	rsb	r0, r0, #32
 8018130:	4440      	add	r0, r8
 8018132:	f010 001f 	ands.w	r0, r0, #31
 8018136:	d047      	beq.n	80181c8 <_dtoa_r+0x8c0>
 8018138:	f1c0 0320 	rsb	r3, r0, #32
 801813c:	2b04      	cmp	r3, #4
 801813e:	dd3b      	ble.n	80181b8 <_dtoa_r+0x8b0>
 8018140:	9b05      	ldr	r3, [sp, #20]
 8018142:	f1c0 001c 	rsb	r0, r0, #28
 8018146:	4403      	add	r3, r0
 8018148:	9305      	str	r3, [sp, #20]
 801814a:	4405      	add	r5, r0
 801814c:	4480      	add	r8, r0
 801814e:	9b05      	ldr	r3, [sp, #20]
 8018150:	2b00      	cmp	r3, #0
 8018152:	dd05      	ble.n	8018160 <_dtoa_r+0x858>
 8018154:	461a      	mov	r2, r3
 8018156:	9904      	ldr	r1, [sp, #16]
 8018158:	4620      	mov	r0, r4
 801815a:	f000 fee9 	bl	8018f30 <__lshift>
 801815e:	9004      	str	r0, [sp, #16]
 8018160:	f1b8 0f00 	cmp.w	r8, #0
 8018164:	dd05      	ble.n	8018172 <_dtoa_r+0x86a>
 8018166:	4639      	mov	r1, r7
 8018168:	4642      	mov	r2, r8
 801816a:	4620      	mov	r0, r4
 801816c:	f000 fee0 	bl	8018f30 <__lshift>
 8018170:	4607      	mov	r7, r0
 8018172:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018174:	b353      	cbz	r3, 80181cc <_dtoa_r+0x8c4>
 8018176:	4639      	mov	r1, r7
 8018178:	9804      	ldr	r0, [sp, #16]
 801817a:	f000 ff2d 	bl	8018fd8 <__mcmp>
 801817e:	2800      	cmp	r0, #0
 8018180:	da24      	bge.n	80181cc <_dtoa_r+0x8c4>
 8018182:	2300      	movs	r3, #0
 8018184:	220a      	movs	r2, #10
 8018186:	9904      	ldr	r1, [sp, #16]
 8018188:	4620      	mov	r0, r4
 801818a:	f000 fd1c 	bl	8018bc6 <__multadd>
 801818e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018190:	9004      	str	r0, [sp, #16]
 8018192:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018196:	2b00      	cmp	r3, #0
 8018198:	f000 814d 	beq.w	8018436 <_dtoa_r+0xb2e>
 801819c:	2300      	movs	r3, #0
 801819e:	4631      	mov	r1, r6
 80181a0:	220a      	movs	r2, #10
 80181a2:	4620      	mov	r0, r4
 80181a4:	f000 fd0f 	bl	8018bc6 <__multadd>
 80181a8:	9b02      	ldr	r3, [sp, #8]
 80181aa:	2b00      	cmp	r3, #0
 80181ac:	4606      	mov	r6, r0
 80181ae:	dc4f      	bgt.n	8018250 <_dtoa_r+0x948>
 80181b0:	9b06      	ldr	r3, [sp, #24]
 80181b2:	2b02      	cmp	r3, #2
 80181b4:	dd4c      	ble.n	8018250 <_dtoa_r+0x948>
 80181b6:	e011      	b.n	80181dc <_dtoa_r+0x8d4>
 80181b8:	d0c9      	beq.n	801814e <_dtoa_r+0x846>
 80181ba:	9a05      	ldr	r2, [sp, #20]
 80181bc:	331c      	adds	r3, #28
 80181be:	441a      	add	r2, r3
 80181c0:	9205      	str	r2, [sp, #20]
 80181c2:	441d      	add	r5, r3
 80181c4:	4498      	add	r8, r3
 80181c6:	e7c2      	b.n	801814e <_dtoa_r+0x846>
 80181c8:	4603      	mov	r3, r0
 80181ca:	e7f6      	b.n	80181ba <_dtoa_r+0x8b2>
 80181cc:	f1b9 0f00 	cmp.w	r9, #0
 80181d0:	dc38      	bgt.n	8018244 <_dtoa_r+0x93c>
 80181d2:	9b06      	ldr	r3, [sp, #24]
 80181d4:	2b02      	cmp	r3, #2
 80181d6:	dd35      	ble.n	8018244 <_dtoa_r+0x93c>
 80181d8:	f8cd 9008 	str.w	r9, [sp, #8]
 80181dc:	9b02      	ldr	r3, [sp, #8]
 80181de:	b963      	cbnz	r3, 80181fa <_dtoa_r+0x8f2>
 80181e0:	4639      	mov	r1, r7
 80181e2:	2205      	movs	r2, #5
 80181e4:	4620      	mov	r0, r4
 80181e6:	f000 fcee 	bl	8018bc6 <__multadd>
 80181ea:	4601      	mov	r1, r0
 80181ec:	4607      	mov	r7, r0
 80181ee:	9804      	ldr	r0, [sp, #16]
 80181f0:	f000 fef2 	bl	8018fd8 <__mcmp>
 80181f4:	2800      	cmp	r0, #0
 80181f6:	f73f adcc 	bgt.w	8017d92 <_dtoa_r+0x48a>
 80181fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80181fc:	465d      	mov	r5, fp
 80181fe:	ea6f 0a03 	mvn.w	sl, r3
 8018202:	f04f 0900 	mov.w	r9, #0
 8018206:	4639      	mov	r1, r7
 8018208:	4620      	mov	r0, r4
 801820a:	f000 fcc5 	bl	8018b98 <_Bfree>
 801820e:	2e00      	cmp	r6, #0
 8018210:	f43f aeb7 	beq.w	8017f82 <_dtoa_r+0x67a>
 8018214:	f1b9 0f00 	cmp.w	r9, #0
 8018218:	d005      	beq.n	8018226 <_dtoa_r+0x91e>
 801821a:	45b1      	cmp	r9, r6
 801821c:	d003      	beq.n	8018226 <_dtoa_r+0x91e>
 801821e:	4649      	mov	r1, r9
 8018220:	4620      	mov	r0, r4
 8018222:	f000 fcb9 	bl	8018b98 <_Bfree>
 8018226:	4631      	mov	r1, r6
 8018228:	4620      	mov	r0, r4
 801822a:	f000 fcb5 	bl	8018b98 <_Bfree>
 801822e:	e6a8      	b.n	8017f82 <_dtoa_r+0x67a>
 8018230:	2700      	movs	r7, #0
 8018232:	463e      	mov	r6, r7
 8018234:	e7e1      	b.n	80181fa <_dtoa_r+0x8f2>
 8018236:	f8dd a020 	ldr.w	sl, [sp, #32]
 801823a:	463e      	mov	r6, r7
 801823c:	e5a9      	b.n	8017d92 <_dtoa_r+0x48a>
 801823e:	bf00      	nop
 8018240:	40240000 	.word	0x40240000
 8018244:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018246:	f8cd 9008 	str.w	r9, [sp, #8]
 801824a:	2b00      	cmp	r3, #0
 801824c:	f000 80fa 	beq.w	8018444 <_dtoa_r+0xb3c>
 8018250:	2d00      	cmp	r5, #0
 8018252:	dd05      	ble.n	8018260 <_dtoa_r+0x958>
 8018254:	4631      	mov	r1, r6
 8018256:	462a      	mov	r2, r5
 8018258:	4620      	mov	r0, r4
 801825a:	f000 fe69 	bl	8018f30 <__lshift>
 801825e:	4606      	mov	r6, r0
 8018260:	9b07      	ldr	r3, [sp, #28]
 8018262:	2b00      	cmp	r3, #0
 8018264:	d04c      	beq.n	8018300 <_dtoa_r+0x9f8>
 8018266:	6871      	ldr	r1, [r6, #4]
 8018268:	4620      	mov	r0, r4
 801826a:	f000 fc61 	bl	8018b30 <_Balloc>
 801826e:	6932      	ldr	r2, [r6, #16]
 8018270:	3202      	adds	r2, #2
 8018272:	4605      	mov	r5, r0
 8018274:	0092      	lsls	r2, r2, #2
 8018276:	f106 010c 	add.w	r1, r6, #12
 801827a:	300c      	adds	r0, #12
 801827c:	f7fd fc50 	bl	8015b20 <memcpy>
 8018280:	2201      	movs	r2, #1
 8018282:	4629      	mov	r1, r5
 8018284:	4620      	mov	r0, r4
 8018286:	f000 fe53 	bl	8018f30 <__lshift>
 801828a:	9b00      	ldr	r3, [sp, #0]
 801828c:	f8cd b014 	str.w	fp, [sp, #20]
 8018290:	f003 0301 	and.w	r3, r3, #1
 8018294:	46b1      	mov	r9, r6
 8018296:	9307      	str	r3, [sp, #28]
 8018298:	4606      	mov	r6, r0
 801829a:	4639      	mov	r1, r7
 801829c:	9804      	ldr	r0, [sp, #16]
 801829e:	f7ff faa5 	bl	80177ec <quorem>
 80182a2:	4649      	mov	r1, r9
 80182a4:	4605      	mov	r5, r0
 80182a6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80182aa:	9804      	ldr	r0, [sp, #16]
 80182ac:	f000 fe94 	bl	8018fd8 <__mcmp>
 80182b0:	4632      	mov	r2, r6
 80182b2:	9000      	str	r0, [sp, #0]
 80182b4:	4639      	mov	r1, r7
 80182b6:	4620      	mov	r0, r4
 80182b8:	f000 fea8 	bl	801900c <__mdiff>
 80182bc:	68c3      	ldr	r3, [r0, #12]
 80182be:	4602      	mov	r2, r0
 80182c0:	bb03      	cbnz	r3, 8018304 <_dtoa_r+0x9fc>
 80182c2:	4601      	mov	r1, r0
 80182c4:	9008      	str	r0, [sp, #32]
 80182c6:	9804      	ldr	r0, [sp, #16]
 80182c8:	f000 fe86 	bl	8018fd8 <__mcmp>
 80182cc:	9a08      	ldr	r2, [sp, #32]
 80182ce:	4603      	mov	r3, r0
 80182d0:	4611      	mov	r1, r2
 80182d2:	4620      	mov	r0, r4
 80182d4:	9308      	str	r3, [sp, #32]
 80182d6:	f000 fc5f 	bl	8018b98 <_Bfree>
 80182da:	9b08      	ldr	r3, [sp, #32]
 80182dc:	b9a3      	cbnz	r3, 8018308 <_dtoa_r+0xa00>
 80182de:	9a06      	ldr	r2, [sp, #24]
 80182e0:	b992      	cbnz	r2, 8018308 <_dtoa_r+0xa00>
 80182e2:	9a07      	ldr	r2, [sp, #28]
 80182e4:	b982      	cbnz	r2, 8018308 <_dtoa_r+0xa00>
 80182e6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80182ea:	d029      	beq.n	8018340 <_dtoa_r+0xa38>
 80182ec:	9b00      	ldr	r3, [sp, #0]
 80182ee:	2b00      	cmp	r3, #0
 80182f0:	dd01      	ble.n	80182f6 <_dtoa_r+0x9ee>
 80182f2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80182f6:	9b05      	ldr	r3, [sp, #20]
 80182f8:	1c5d      	adds	r5, r3, #1
 80182fa:	f883 8000 	strb.w	r8, [r3]
 80182fe:	e782      	b.n	8018206 <_dtoa_r+0x8fe>
 8018300:	4630      	mov	r0, r6
 8018302:	e7c2      	b.n	801828a <_dtoa_r+0x982>
 8018304:	2301      	movs	r3, #1
 8018306:	e7e3      	b.n	80182d0 <_dtoa_r+0x9c8>
 8018308:	9a00      	ldr	r2, [sp, #0]
 801830a:	2a00      	cmp	r2, #0
 801830c:	db04      	blt.n	8018318 <_dtoa_r+0xa10>
 801830e:	d125      	bne.n	801835c <_dtoa_r+0xa54>
 8018310:	9a06      	ldr	r2, [sp, #24]
 8018312:	bb1a      	cbnz	r2, 801835c <_dtoa_r+0xa54>
 8018314:	9a07      	ldr	r2, [sp, #28]
 8018316:	bb0a      	cbnz	r2, 801835c <_dtoa_r+0xa54>
 8018318:	2b00      	cmp	r3, #0
 801831a:	ddec      	ble.n	80182f6 <_dtoa_r+0x9ee>
 801831c:	2201      	movs	r2, #1
 801831e:	9904      	ldr	r1, [sp, #16]
 8018320:	4620      	mov	r0, r4
 8018322:	f000 fe05 	bl	8018f30 <__lshift>
 8018326:	4639      	mov	r1, r7
 8018328:	9004      	str	r0, [sp, #16]
 801832a:	f000 fe55 	bl	8018fd8 <__mcmp>
 801832e:	2800      	cmp	r0, #0
 8018330:	dc03      	bgt.n	801833a <_dtoa_r+0xa32>
 8018332:	d1e0      	bne.n	80182f6 <_dtoa_r+0x9ee>
 8018334:	f018 0f01 	tst.w	r8, #1
 8018338:	d0dd      	beq.n	80182f6 <_dtoa_r+0x9ee>
 801833a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801833e:	d1d8      	bne.n	80182f2 <_dtoa_r+0x9ea>
 8018340:	9b05      	ldr	r3, [sp, #20]
 8018342:	9a05      	ldr	r2, [sp, #20]
 8018344:	1c5d      	adds	r5, r3, #1
 8018346:	2339      	movs	r3, #57	; 0x39
 8018348:	7013      	strb	r3, [r2, #0]
 801834a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801834e:	2b39      	cmp	r3, #57	; 0x39
 8018350:	f105 32ff 	add.w	r2, r5, #4294967295
 8018354:	d04f      	beq.n	80183f6 <_dtoa_r+0xaee>
 8018356:	3301      	adds	r3, #1
 8018358:	7013      	strb	r3, [r2, #0]
 801835a:	e754      	b.n	8018206 <_dtoa_r+0x8fe>
 801835c:	9a05      	ldr	r2, [sp, #20]
 801835e:	2b00      	cmp	r3, #0
 8018360:	f102 0501 	add.w	r5, r2, #1
 8018364:	dd06      	ble.n	8018374 <_dtoa_r+0xa6c>
 8018366:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801836a:	d0e9      	beq.n	8018340 <_dtoa_r+0xa38>
 801836c:	f108 0801 	add.w	r8, r8, #1
 8018370:	9b05      	ldr	r3, [sp, #20]
 8018372:	e7c2      	b.n	80182fa <_dtoa_r+0x9f2>
 8018374:	9a02      	ldr	r2, [sp, #8]
 8018376:	f805 8c01 	strb.w	r8, [r5, #-1]
 801837a:	eba5 030b 	sub.w	r3, r5, fp
 801837e:	4293      	cmp	r3, r2
 8018380:	d021      	beq.n	80183c6 <_dtoa_r+0xabe>
 8018382:	2300      	movs	r3, #0
 8018384:	220a      	movs	r2, #10
 8018386:	9904      	ldr	r1, [sp, #16]
 8018388:	4620      	mov	r0, r4
 801838a:	f000 fc1c 	bl	8018bc6 <__multadd>
 801838e:	45b1      	cmp	r9, r6
 8018390:	9004      	str	r0, [sp, #16]
 8018392:	f04f 0300 	mov.w	r3, #0
 8018396:	f04f 020a 	mov.w	r2, #10
 801839a:	4649      	mov	r1, r9
 801839c:	4620      	mov	r0, r4
 801839e:	d105      	bne.n	80183ac <_dtoa_r+0xaa4>
 80183a0:	f000 fc11 	bl	8018bc6 <__multadd>
 80183a4:	4681      	mov	r9, r0
 80183a6:	4606      	mov	r6, r0
 80183a8:	9505      	str	r5, [sp, #20]
 80183aa:	e776      	b.n	801829a <_dtoa_r+0x992>
 80183ac:	f000 fc0b 	bl	8018bc6 <__multadd>
 80183b0:	4631      	mov	r1, r6
 80183b2:	4681      	mov	r9, r0
 80183b4:	2300      	movs	r3, #0
 80183b6:	220a      	movs	r2, #10
 80183b8:	4620      	mov	r0, r4
 80183ba:	f000 fc04 	bl	8018bc6 <__multadd>
 80183be:	4606      	mov	r6, r0
 80183c0:	e7f2      	b.n	80183a8 <_dtoa_r+0xaa0>
 80183c2:	f04f 0900 	mov.w	r9, #0
 80183c6:	2201      	movs	r2, #1
 80183c8:	9904      	ldr	r1, [sp, #16]
 80183ca:	4620      	mov	r0, r4
 80183cc:	f000 fdb0 	bl	8018f30 <__lshift>
 80183d0:	4639      	mov	r1, r7
 80183d2:	9004      	str	r0, [sp, #16]
 80183d4:	f000 fe00 	bl	8018fd8 <__mcmp>
 80183d8:	2800      	cmp	r0, #0
 80183da:	dcb6      	bgt.n	801834a <_dtoa_r+0xa42>
 80183dc:	d102      	bne.n	80183e4 <_dtoa_r+0xadc>
 80183de:	f018 0f01 	tst.w	r8, #1
 80183e2:	d1b2      	bne.n	801834a <_dtoa_r+0xa42>
 80183e4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80183e8:	2b30      	cmp	r3, #48	; 0x30
 80183ea:	f105 32ff 	add.w	r2, r5, #4294967295
 80183ee:	f47f af0a 	bne.w	8018206 <_dtoa_r+0x8fe>
 80183f2:	4615      	mov	r5, r2
 80183f4:	e7f6      	b.n	80183e4 <_dtoa_r+0xadc>
 80183f6:	4593      	cmp	fp, r2
 80183f8:	d105      	bne.n	8018406 <_dtoa_r+0xafe>
 80183fa:	2331      	movs	r3, #49	; 0x31
 80183fc:	f10a 0a01 	add.w	sl, sl, #1
 8018400:	f88b 3000 	strb.w	r3, [fp]
 8018404:	e6ff      	b.n	8018206 <_dtoa_r+0x8fe>
 8018406:	4615      	mov	r5, r2
 8018408:	e79f      	b.n	801834a <_dtoa_r+0xa42>
 801840a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8018470 <_dtoa_r+0xb68>
 801840e:	e007      	b.n	8018420 <_dtoa_r+0xb18>
 8018410:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018412:	f8df b060 	ldr.w	fp, [pc, #96]	; 8018474 <_dtoa_r+0xb6c>
 8018416:	b11b      	cbz	r3, 8018420 <_dtoa_r+0xb18>
 8018418:	f10b 0308 	add.w	r3, fp, #8
 801841c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801841e:	6013      	str	r3, [r2, #0]
 8018420:	4658      	mov	r0, fp
 8018422:	b017      	add	sp, #92	; 0x5c
 8018424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018428:	9b06      	ldr	r3, [sp, #24]
 801842a:	2b01      	cmp	r3, #1
 801842c:	f77f ae35 	ble.w	801809a <_dtoa_r+0x792>
 8018430:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018432:	9307      	str	r3, [sp, #28]
 8018434:	e649      	b.n	80180ca <_dtoa_r+0x7c2>
 8018436:	9b02      	ldr	r3, [sp, #8]
 8018438:	2b00      	cmp	r3, #0
 801843a:	dc03      	bgt.n	8018444 <_dtoa_r+0xb3c>
 801843c:	9b06      	ldr	r3, [sp, #24]
 801843e:	2b02      	cmp	r3, #2
 8018440:	f73f aecc 	bgt.w	80181dc <_dtoa_r+0x8d4>
 8018444:	465d      	mov	r5, fp
 8018446:	4639      	mov	r1, r7
 8018448:	9804      	ldr	r0, [sp, #16]
 801844a:	f7ff f9cf 	bl	80177ec <quorem>
 801844e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8018452:	f805 8b01 	strb.w	r8, [r5], #1
 8018456:	9a02      	ldr	r2, [sp, #8]
 8018458:	eba5 030b 	sub.w	r3, r5, fp
 801845c:	429a      	cmp	r2, r3
 801845e:	ddb0      	ble.n	80183c2 <_dtoa_r+0xaba>
 8018460:	2300      	movs	r3, #0
 8018462:	220a      	movs	r2, #10
 8018464:	9904      	ldr	r1, [sp, #16]
 8018466:	4620      	mov	r0, r4
 8018468:	f000 fbad 	bl	8018bc6 <__multadd>
 801846c:	9004      	str	r0, [sp, #16]
 801846e:	e7ea      	b.n	8018446 <_dtoa_r+0xb3e>
 8018470:	0801c043 	.word	0x0801c043
 8018474:	0801bf08 	.word	0x0801bf08

08018478 <rshift>:
 8018478:	b5f0      	push	{r4, r5, r6, r7, lr}
 801847a:	6906      	ldr	r6, [r0, #16]
 801847c:	114b      	asrs	r3, r1, #5
 801847e:	429e      	cmp	r6, r3
 8018480:	f100 0414 	add.w	r4, r0, #20
 8018484:	dd30      	ble.n	80184e8 <rshift+0x70>
 8018486:	f011 011f 	ands.w	r1, r1, #31
 801848a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 801848e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8018492:	d108      	bne.n	80184a6 <rshift+0x2e>
 8018494:	4621      	mov	r1, r4
 8018496:	42b2      	cmp	r2, r6
 8018498:	460b      	mov	r3, r1
 801849a:	d211      	bcs.n	80184c0 <rshift+0x48>
 801849c:	f852 3b04 	ldr.w	r3, [r2], #4
 80184a0:	f841 3b04 	str.w	r3, [r1], #4
 80184a4:	e7f7      	b.n	8018496 <rshift+0x1e>
 80184a6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80184aa:	f1c1 0c20 	rsb	ip, r1, #32
 80184ae:	40cd      	lsrs	r5, r1
 80184b0:	3204      	adds	r2, #4
 80184b2:	4623      	mov	r3, r4
 80184b4:	42b2      	cmp	r2, r6
 80184b6:	4617      	mov	r7, r2
 80184b8:	d30c      	bcc.n	80184d4 <rshift+0x5c>
 80184ba:	601d      	str	r5, [r3, #0]
 80184bc:	b105      	cbz	r5, 80184c0 <rshift+0x48>
 80184be:	3304      	adds	r3, #4
 80184c0:	1b1a      	subs	r2, r3, r4
 80184c2:	42a3      	cmp	r3, r4
 80184c4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80184c8:	bf08      	it	eq
 80184ca:	2300      	moveq	r3, #0
 80184cc:	6102      	str	r2, [r0, #16]
 80184ce:	bf08      	it	eq
 80184d0:	6143      	streq	r3, [r0, #20]
 80184d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80184d4:	683f      	ldr	r7, [r7, #0]
 80184d6:	fa07 f70c 	lsl.w	r7, r7, ip
 80184da:	433d      	orrs	r5, r7
 80184dc:	f843 5b04 	str.w	r5, [r3], #4
 80184e0:	f852 5b04 	ldr.w	r5, [r2], #4
 80184e4:	40cd      	lsrs	r5, r1
 80184e6:	e7e5      	b.n	80184b4 <rshift+0x3c>
 80184e8:	4623      	mov	r3, r4
 80184ea:	e7e9      	b.n	80184c0 <rshift+0x48>

080184ec <__hexdig_fun>:
 80184ec:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80184f0:	2b09      	cmp	r3, #9
 80184f2:	d802      	bhi.n	80184fa <__hexdig_fun+0xe>
 80184f4:	3820      	subs	r0, #32
 80184f6:	b2c0      	uxtb	r0, r0
 80184f8:	4770      	bx	lr
 80184fa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80184fe:	2b05      	cmp	r3, #5
 8018500:	d801      	bhi.n	8018506 <__hexdig_fun+0x1a>
 8018502:	3847      	subs	r0, #71	; 0x47
 8018504:	e7f7      	b.n	80184f6 <__hexdig_fun+0xa>
 8018506:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801850a:	2b05      	cmp	r3, #5
 801850c:	d801      	bhi.n	8018512 <__hexdig_fun+0x26>
 801850e:	3827      	subs	r0, #39	; 0x27
 8018510:	e7f1      	b.n	80184f6 <__hexdig_fun+0xa>
 8018512:	2000      	movs	r0, #0
 8018514:	4770      	bx	lr

08018516 <__gethex>:
 8018516:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801851a:	b08b      	sub	sp, #44	; 0x2c
 801851c:	468a      	mov	sl, r1
 801851e:	9002      	str	r0, [sp, #8]
 8018520:	9816      	ldr	r0, [sp, #88]	; 0x58
 8018522:	9306      	str	r3, [sp, #24]
 8018524:	4690      	mov	r8, r2
 8018526:	f000 fadf 	bl	8018ae8 <__localeconv_l>
 801852a:	6803      	ldr	r3, [r0, #0]
 801852c:	9303      	str	r3, [sp, #12]
 801852e:	4618      	mov	r0, r3
 8018530:	f7e7 fe58 	bl	80001e4 <strlen>
 8018534:	9b03      	ldr	r3, [sp, #12]
 8018536:	9001      	str	r0, [sp, #4]
 8018538:	4403      	add	r3, r0
 801853a:	f04f 0b00 	mov.w	fp, #0
 801853e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8018542:	9307      	str	r3, [sp, #28]
 8018544:	f8da 3000 	ldr.w	r3, [sl]
 8018548:	3302      	adds	r3, #2
 801854a:	461f      	mov	r7, r3
 801854c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8018550:	2830      	cmp	r0, #48	; 0x30
 8018552:	d06c      	beq.n	801862e <__gethex+0x118>
 8018554:	f7ff ffca 	bl	80184ec <__hexdig_fun>
 8018558:	4604      	mov	r4, r0
 801855a:	2800      	cmp	r0, #0
 801855c:	d16a      	bne.n	8018634 <__gethex+0x11e>
 801855e:	9a01      	ldr	r2, [sp, #4]
 8018560:	9903      	ldr	r1, [sp, #12]
 8018562:	4638      	mov	r0, r7
 8018564:	f001 fb78 	bl	8019c58 <strncmp>
 8018568:	2800      	cmp	r0, #0
 801856a:	d166      	bne.n	801863a <__gethex+0x124>
 801856c:	9b01      	ldr	r3, [sp, #4]
 801856e:	5cf8      	ldrb	r0, [r7, r3]
 8018570:	18fe      	adds	r6, r7, r3
 8018572:	f7ff ffbb 	bl	80184ec <__hexdig_fun>
 8018576:	2800      	cmp	r0, #0
 8018578:	d062      	beq.n	8018640 <__gethex+0x12a>
 801857a:	4633      	mov	r3, r6
 801857c:	7818      	ldrb	r0, [r3, #0]
 801857e:	2830      	cmp	r0, #48	; 0x30
 8018580:	461f      	mov	r7, r3
 8018582:	f103 0301 	add.w	r3, r3, #1
 8018586:	d0f9      	beq.n	801857c <__gethex+0x66>
 8018588:	f7ff ffb0 	bl	80184ec <__hexdig_fun>
 801858c:	fab0 f580 	clz	r5, r0
 8018590:	096d      	lsrs	r5, r5, #5
 8018592:	4634      	mov	r4, r6
 8018594:	f04f 0b01 	mov.w	fp, #1
 8018598:	463a      	mov	r2, r7
 801859a:	4616      	mov	r6, r2
 801859c:	3201      	adds	r2, #1
 801859e:	7830      	ldrb	r0, [r6, #0]
 80185a0:	f7ff ffa4 	bl	80184ec <__hexdig_fun>
 80185a4:	2800      	cmp	r0, #0
 80185a6:	d1f8      	bne.n	801859a <__gethex+0x84>
 80185a8:	9a01      	ldr	r2, [sp, #4]
 80185aa:	9903      	ldr	r1, [sp, #12]
 80185ac:	4630      	mov	r0, r6
 80185ae:	f001 fb53 	bl	8019c58 <strncmp>
 80185b2:	b950      	cbnz	r0, 80185ca <__gethex+0xb4>
 80185b4:	b954      	cbnz	r4, 80185cc <__gethex+0xb6>
 80185b6:	9b01      	ldr	r3, [sp, #4]
 80185b8:	18f4      	adds	r4, r6, r3
 80185ba:	4622      	mov	r2, r4
 80185bc:	4616      	mov	r6, r2
 80185be:	3201      	adds	r2, #1
 80185c0:	7830      	ldrb	r0, [r6, #0]
 80185c2:	f7ff ff93 	bl	80184ec <__hexdig_fun>
 80185c6:	2800      	cmp	r0, #0
 80185c8:	d1f8      	bne.n	80185bc <__gethex+0xa6>
 80185ca:	b10c      	cbz	r4, 80185d0 <__gethex+0xba>
 80185cc:	1ba4      	subs	r4, r4, r6
 80185ce:	00a4      	lsls	r4, r4, #2
 80185d0:	7833      	ldrb	r3, [r6, #0]
 80185d2:	2b50      	cmp	r3, #80	; 0x50
 80185d4:	d001      	beq.n	80185da <__gethex+0xc4>
 80185d6:	2b70      	cmp	r3, #112	; 0x70
 80185d8:	d140      	bne.n	801865c <__gethex+0x146>
 80185da:	7873      	ldrb	r3, [r6, #1]
 80185dc:	2b2b      	cmp	r3, #43	; 0x2b
 80185de:	d031      	beq.n	8018644 <__gethex+0x12e>
 80185e0:	2b2d      	cmp	r3, #45	; 0x2d
 80185e2:	d033      	beq.n	801864c <__gethex+0x136>
 80185e4:	1c71      	adds	r1, r6, #1
 80185e6:	f04f 0900 	mov.w	r9, #0
 80185ea:	7808      	ldrb	r0, [r1, #0]
 80185ec:	f7ff ff7e 	bl	80184ec <__hexdig_fun>
 80185f0:	1e43      	subs	r3, r0, #1
 80185f2:	b2db      	uxtb	r3, r3
 80185f4:	2b18      	cmp	r3, #24
 80185f6:	d831      	bhi.n	801865c <__gethex+0x146>
 80185f8:	f1a0 0210 	sub.w	r2, r0, #16
 80185fc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8018600:	f7ff ff74 	bl	80184ec <__hexdig_fun>
 8018604:	1e43      	subs	r3, r0, #1
 8018606:	b2db      	uxtb	r3, r3
 8018608:	2b18      	cmp	r3, #24
 801860a:	d922      	bls.n	8018652 <__gethex+0x13c>
 801860c:	f1b9 0f00 	cmp.w	r9, #0
 8018610:	d000      	beq.n	8018614 <__gethex+0xfe>
 8018612:	4252      	negs	r2, r2
 8018614:	4414      	add	r4, r2
 8018616:	f8ca 1000 	str.w	r1, [sl]
 801861a:	b30d      	cbz	r5, 8018660 <__gethex+0x14a>
 801861c:	f1bb 0f00 	cmp.w	fp, #0
 8018620:	bf0c      	ite	eq
 8018622:	2706      	moveq	r7, #6
 8018624:	2700      	movne	r7, #0
 8018626:	4638      	mov	r0, r7
 8018628:	b00b      	add	sp, #44	; 0x2c
 801862a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801862e:	f10b 0b01 	add.w	fp, fp, #1
 8018632:	e78a      	b.n	801854a <__gethex+0x34>
 8018634:	2500      	movs	r5, #0
 8018636:	462c      	mov	r4, r5
 8018638:	e7ae      	b.n	8018598 <__gethex+0x82>
 801863a:	463e      	mov	r6, r7
 801863c:	2501      	movs	r5, #1
 801863e:	e7c7      	b.n	80185d0 <__gethex+0xba>
 8018640:	4604      	mov	r4, r0
 8018642:	e7fb      	b.n	801863c <__gethex+0x126>
 8018644:	f04f 0900 	mov.w	r9, #0
 8018648:	1cb1      	adds	r1, r6, #2
 801864a:	e7ce      	b.n	80185ea <__gethex+0xd4>
 801864c:	f04f 0901 	mov.w	r9, #1
 8018650:	e7fa      	b.n	8018648 <__gethex+0x132>
 8018652:	230a      	movs	r3, #10
 8018654:	fb03 0202 	mla	r2, r3, r2, r0
 8018658:	3a10      	subs	r2, #16
 801865a:	e7cf      	b.n	80185fc <__gethex+0xe6>
 801865c:	4631      	mov	r1, r6
 801865e:	e7da      	b.n	8018616 <__gethex+0x100>
 8018660:	1bf3      	subs	r3, r6, r7
 8018662:	3b01      	subs	r3, #1
 8018664:	4629      	mov	r1, r5
 8018666:	2b07      	cmp	r3, #7
 8018668:	dc49      	bgt.n	80186fe <__gethex+0x1e8>
 801866a:	9802      	ldr	r0, [sp, #8]
 801866c:	f000 fa60 	bl	8018b30 <_Balloc>
 8018670:	9b01      	ldr	r3, [sp, #4]
 8018672:	f100 0914 	add.w	r9, r0, #20
 8018676:	f04f 0b00 	mov.w	fp, #0
 801867a:	f1c3 0301 	rsb	r3, r3, #1
 801867e:	4605      	mov	r5, r0
 8018680:	f8cd 9010 	str.w	r9, [sp, #16]
 8018684:	46da      	mov	sl, fp
 8018686:	9308      	str	r3, [sp, #32]
 8018688:	42b7      	cmp	r7, r6
 801868a:	d33b      	bcc.n	8018704 <__gethex+0x1ee>
 801868c:	9804      	ldr	r0, [sp, #16]
 801868e:	f840 ab04 	str.w	sl, [r0], #4
 8018692:	eba0 0009 	sub.w	r0, r0, r9
 8018696:	1080      	asrs	r0, r0, #2
 8018698:	6128      	str	r0, [r5, #16]
 801869a:	0147      	lsls	r7, r0, #5
 801869c:	4650      	mov	r0, sl
 801869e:	f000 fb0b 	bl	8018cb8 <__hi0bits>
 80186a2:	f8d8 6000 	ldr.w	r6, [r8]
 80186a6:	1a3f      	subs	r7, r7, r0
 80186a8:	42b7      	cmp	r7, r6
 80186aa:	dd64      	ble.n	8018776 <__gethex+0x260>
 80186ac:	1bbf      	subs	r7, r7, r6
 80186ae:	4639      	mov	r1, r7
 80186b0:	4628      	mov	r0, r5
 80186b2:	f000 fe1b 	bl	80192ec <__any_on>
 80186b6:	4682      	mov	sl, r0
 80186b8:	b178      	cbz	r0, 80186da <__gethex+0x1c4>
 80186ba:	1e7b      	subs	r3, r7, #1
 80186bc:	1159      	asrs	r1, r3, #5
 80186be:	f003 021f 	and.w	r2, r3, #31
 80186c2:	f04f 0a01 	mov.w	sl, #1
 80186c6:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80186ca:	fa0a f202 	lsl.w	r2, sl, r2
 80186ce:	420a      	tst	r2, r1
 80186d0:	d003      	beq.n	80186da <__gethex+0x1c4>
 80186d2:	4553      	cmp	r3, sl
 80186d4:	dc46      	bgt.n	8018764 <__gethex+0x24e>
 80186d6:	f04f 0a02 	mov.w	sl, #2
 80186da:	4639      	mov	r1, r7
 80186dc:	4628      	mov	r0, r5
 80186de:	f7ff fecb 	bl	8018478 <rshift>
 80186e2:	443c      	add	r4, r7
 80186e4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80186e8:	42a3      	cmp	r3, r4
 80186ea:	da52      	bge.n	8018792 <__gethex+0x27c>
 80186ec:	4629      	mov	r1, r5
 80186ee:	9802      	ldr	r0, [sp, #8]
 80186f0:	f000 fa52 	bl	8018b98 <_Bfree>
 80186f4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80186f6:	2300      	movs	r3, #0
 80186f8:	6013      	str	r3, [r2, #0]
 80186fa:	27a3      	movs	r7, #163	; 0xa3
 80186fc:	e793      	b.n	8018626 <__gethex+0x110>
 80186fe:	3101      	adds	r1, #1
 8018700:	105b      	asrs	r3, r3, #1
 8018702:	e7b0      	b.n	8018666 <__gethex+0x150>
 8018704:	1e73      	subs	r3, r6, #1
 8018706:	9305      	str	r3, [sp, #20]
 8018708:	9a07      	ldr	r2, [sp, #28]
 801870a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801870e:	4293      	cmp	r3, r2
 8018710:	d018      	beq.n	8018744 <__gethex+0x22e>
 8018712:	f1bb 0f20 	cmp.w	fp, #32
 8018716:	d107      	bne.n	8018728 <__gethex+0x212>
 8018718:	9b04      	ldr	r3, [sp, #16]
 801871a:	f8c3 a000 	str.w	sl, [r3]
 801871e:	3304      	adds	r3, #4
 8018720:	f04f 0a00 	mov.w	sl, #0
 8018724:	9304      	str	r3, [sp, #16]
 8018726:	46d3      	mov	fp, sl
 8018728:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801872c:	f7ff fede 	bl	80184ec <__hexdig_fun>
 8018730:	f000 000f 	and.w	r0, r0, #15
 8018734:	fa00 f00b 	lsl.w	r0, r0, fp
 8018738:	ea4a 0a00 	orr.w	sl, sl, r0
 801873c:	f10b 0b04 	add.w	fp, fp, #4
 8018740:	9b05      	ldr	r3, [sp, #20]
 8018742:	e00d      	b.n	8018760 <__gethex+0x24a>
 8018744:	9b05      	ldr	r3, [sp, #20]
 8018746:	9a08      	ldr	r2, [sp, #32]
 8018748:	4413      	add	r3, r2
 801874a:	42bb      	cmp	r3, r7
 801874c:	d3e1      	bcc.n	8018712 <__gethex+0x1fc>
 801874e:	4618      	mov	r0, r3
 8018750:	9a01      	ldr	r2, [sp, #4]
 8018752:	9903      	ldr	r1, [sp, #12]
 8018754:	9309      	str	r3, [sp, #36]	; 0x24
 8018756:	f001 fa7f 	bl	8019c58 <strncmp>
 801875a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801875c:	2800      	cmp	r0, #0
 801875e:	d1d8      	bne.n	8018712 <__gethex+0x1fc>
 8018760:	461e      	mov	r6, r3
 8018762:	e791      	b.n	8018688 <__gethex+0x172>
 8018764:	1eb9      	subs	r1, r7, #2
 8018766:	4628      	mov	r0, r5
 8018768:	f000 fdc0 	bl	80192ec <__any_on>
 801876c:	2800      	cmp	r0, #0
 801876e:	d0b2      	beq.n	80186d6 <__gethex+0x1c0>
 8018770:	f04f 0a03 	mov.w	sl, #3
 8018774:	e7b1      	b.n	80186da <__gethex+0x1c4>
 8018776:	da09      	bge.n	801878c <__gethex+0x276>
 8018778:	1bf7      	subs	r7, r6, r7
 801877a:	4629      	mov	r1, r5
 801877c:	463a      	mov	r2, r7
 801877e:	9802      	ldr	r0, [sp, #8]
 8018780:	f000 fbd6 	bl	8018f30 <__lshift>
 8018784:	1be4      	subs	r4, r4, r7
 8018786:	4605      	mov	r5, r0
 8018788:	f100 0914 	add.w	r9, r0, #20
 801878c:	f04f 0a00 	mov.w	sl, #0
 8018790:	e7a8      	b.n	80186e4 <__gethex+0x1ce>
 8018792:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8018796:	42a0      	cmp	r0, r4
 8018798:	dd6a      	ble.n	8018870 <__gethex+0x35a>
 801879a:	1b04      	subs	r4, r0, r4
 801879c:	42a6      	cmp	r6, r4
 801879e:	dc2e      	bgt.n	80187fe <__gethex+0x2e8>
 80187a0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80187a4:	2b02      	cmp	r3, #2
 80187a6:	d022      	beq.n	80187ee <__gethex+0x2d8>
 80187a8:	2b03      	cmp	r3, #3
 80187aa:	d024      	beq.n	80187f6 <__gethex+0x2e0>
 80187ac:	2b01      	cmp	r3, #1
 80187ae:	d115      	bne.n	80187dc <__gethex+0x2c6>
 80187b0:	42a6      	cmp	r6, r4
 80187b2:	d113      	bne.n	80187dc <__gethex+0x2c6>
 80187b4:	2e01      	cmp	r6, #1
 80187b6:	dc0b      	bgt.n	80187d0 <__gethex+0x2ba>
 80187b8:	9a06      	ldr	r2, [sp, #24]
 80187ba:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80187be:	6013      	str	r3, [r2, #0]
 80187c0:	2301      	movs	r3, #1
 80187c2:	612b      	str	r3, [r5, #16]
 80187c4:	f8c9 3000 	str.w	r3, [r9]
 80187c8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80187ca:	2762      	movs	r7, #98	; 0x62
 80187cc:	601d      	str	r5, [r3, #0]
 80187ce:	e72a      	b.n	8018626 <__gethex+0x110>
 80187d0:	1e71      	subs	r1, r6, #1
 80187d2:	4628      	mov	r0, r5
 80187d4:	f000 fd8a 	bl	80192ec <__any_on>
 80187d8:	2800      	cmp	r0, #0
 80187da:	d1ed      	bne.n	80187b8 <__gethex+0x2a2>
 80187dc:	4629      	mov	r1, r5
 80187de:	9802      	ldr	r0, [sp, #8]
 80187e0:	f000 f9da 	bl	8018b98 <_Bfree>
 80187e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80187e6:	2300      	movs	r3, #0
 80187e8:	6013      	str	r3, [r2, #0]
 80187ea:	2750      	movs	r7, #80	; 0x50
 80187ec:	e71b      	b.n	8018626 <__gethex+0x110>
 80187ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80187f0:	2b00      	cmp	r3, #0
 80187f2:	d0e1      	beq.n	80187b8 <__gethex+0x2a2>
 80187f4:	e7f2      	b.n	80187dc <__gethex+0x2c6>
 80187f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80187f8:	2b00      	cmp	r3, #0
 80187fa:	d1dd      	bne.n	80187b8 <__gethex+0x2a2>
 80187fc:	e7ee      	b.n	80187dc <__gethex+0x2c6>
 80187fe:	1e67      	subs	r7, r4, #1
 8018800:	f1ba 0f00 	cmp.w	sl, #0
 8018804:	d131      	bne.n	801886a <__gethex+0x354>
 8018806:	b127      	cbz	r7, 8018812 <__gethex+0x2fc>
 8018808:	4639      	mov	r1, r7
 801880a:	4628      	mov	r0, r5
 801880c:	f000 fd6e 	bl	80192ec <__any_on>
 8018810:	4682      	mov	sl, r0
 8018812:	117a      	asrs	r2, r7, #5
 8018814:	2301      	movs	r3, #1
 8018816:	f007 071f 	and.w	r7, r7, #31
 801881a:	fa03 f707 	lsl.w	r7, r3, r7
 801881e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8018822:	4621      	mov	r1, r4
 8018824:	421f      	tst	r7, r3
 8018826:	4628      	mov	r0, r5
 8018828:	bf18      	it	ne
 801882a:	f04a 0a02 	orrne.w	sl, sl, #2
 801882e:	1b36      	subs	r6, r6, r4
 8018830:	f7ff fe22 	bl	8018478 <rshift>
 8018834:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8018838:	2702      	movs	r7, #2
 801883a:	f1ba 0f00 	cmp.w	sl, #0
 801883e:	d048      	beq.n	80188d2 <__gethex+0x3bc>
 8018840:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018844:	2b02      	cmp	r3, #2
 8018846:	d015      	beq.n	8018874 <__gethex+0x35e>
 8018848:	2b03      	cmp	r3, #3
 801884a:	d017      	beq.n	801887c <__gethex+0x366>
 801884c:	2b01      	cmp	r3, #1
 801884e:	d109      	bne.n	8018864 <__gethex+0x34e>
 8018850:	f01a 0f02 	tst.w	sl, #2
 8018854:	d006      	beq.n	8018864 <__gethex+0x34e>
 8018856:	f8d9 3000 	ldr.w	r3, [r9]
 801885a:	ea4a 0a03 	orr.w	sl, sl, r3
 801885e:	f01a 0f01 	tst.w	sl, #1
 8018862:	d10e      	bne.n	8018882 <__gethex+0x36c>
 8018864:	f047 0710 	orr.w	r7, r7, #16
 8018868:	e033      	b.n	80188d2 <__gethex+0x3bc>
 801886a:	f04f 0a01 	mov.w	sl, #1
 801886e:	e7d0      	b.n	8018812 <__gethex+0x2fc>
 8018870:	2701      	movs	r7, #1
 8018872:	e7e2      	b.n	801883a <__gethex+0x324>
 8018874:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018876:	f1c3 0301 	rsb	r3, r3, #1
 801887a:	9315      	str	r3, [sp, #84]	; 0x54
 801887c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801887e:	2b00      	cmp	r3, #0
 8018880:	d0f0      	beq.n	8018864 <__gethex+0x34e>
 8018882:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8018886:	f105 0314 	add.w	r3, r5, #20
 801888a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 801888e:	eb03 010a 	add.w	r1, r3, sl
 8018892:	f04f 0c00 	mov.w	ip, #0
 8018896:	4618      	mov	r0, r3
 8018898:	f853 2b04 	ldr.w	r2, [r3], #4
 801889c:	f1b2 3fff 	cmp.w	r2, #4294967295
 80188a0:	d01c      	beq.n	80188dc <__gethex+0x3c6>
 80188a2:	3201      	adds	r2, #1
 80188a4:	6002      	str	r2, [r0, #0]
 80188a6:	2f02      	cmp	r7, #2
 80188a8:	f105 0314 	add.w	r3, r5, #20
 80188ac:	d138      	bne.n	8018920 <__gethex+0x40a>
 80188ae:	f8d8 2000 	ldr.w	r2, [r8]
 80188b2:	3a01      	subs	r2, #1
 80188b4:	42b2      	cmp	r2, r6
 80188b6:	d10a      	bne.n	80188ce <__gethex+0x3b8>
 80188b8:	1171      	asrs	r1, r6, #5
 80188ba:	2201      	movs	r2, #1
 80188bc:	f006 061f 	and.w	r6, r6, #31
 80188c0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80188c4:	fa02 f606 	lsl.w	r6, r2, r6
 80188c8:	421e      	tst	r6, r3
 80188ca:	bf18      	it	ne
 80188cc:	4617      	movne	r7, r2
 80188ce:	f047 0720 	orr.w	r7, r7, #32
 80188d2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80188d4:	601d      	str	r5, [r3, #0]
 80188d6:	9b06      	ldr	r3, [sp, #24]
 80188d8:	601c      	str	r4, [r3, #0]
 80188da:	e6a4      	b.n	8018626 <__gethex+0x110>
 80188dc:	4299      	cmp	r1, r3
 80188de:	f843 cc04 	str.w	ip, [r3, #-4]
 80188e2:	d8d8      	bhi.n	8018896 <__gethex+0x380>
 80188e4:	68ab      	ldr	r3, [r5, #8]
 80188e6:	4599      	cmp	r9, r3
 80188e8:	db12      	blt.n	8018910 <__gethex+0x3fa>
 80188ea:	6869      	ldr	r1, [r5, #4]
 80188ec:	9802      	ldr	r0, [sp, #8]
 80188ee:	3101      	adds	r1, #1
 80188f0:	f000 f91e 	bl	8018b30 <_Balloc>
 80188f4:	692a      	ldr	r2, [r5, #16]
 80188f6:	3202      	adds	r2, #2
 80188f8:	f105 010c 	add.w	r1, r5, #12
 80188fc:	4683      	mov	fp, r0
 80188fe:	0092      	lsls	r2, r2, #2
 8018900:	300c      	adds	r0, #12
 8018902:	f7fd f90d 	bl	8015b20 <memcpy>
 8018906:	4629      	mov	r1, r5
 8018908:	9802      	ldr	r0, [sp, #8]
 801890a:	f000 f945 	bl	8018b98 <_Bfree>
 801890e:	465d      	mov	r5, fp
 8018910:	692b      	ldr	r3, [r5, #16]
 8018912:	1c5a      	adds	r2, r3, #1
 8018914:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8018918:	612a      	str	r2, [r5, #16]
 801891a:	2201      	movs	r2, #1
 801891c:	615a      	str	r2, [r3, #20]
 801891e:	e7c2      	b.n	80188a6 <__gethex+0x390>
 8018920:	692a      	ldr	r2, [r5, #16]
 8018922:	454a      	cmp	r2, r9
 8018924:	dd0b      	ble.n	801893e <__gethex+0x428>
 8018926:	2101      	movs	r1, #1
 8018928:	4628      	mov	r0, r5
 801892a:	f7ff fda5 	bl	8018478 <rshift>
 801892e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018932:	3401      	adds	r4, #1
 8018934:	42a3      	cmp	r3, r4
 8018936:	f6ff aed9 	blt.w	80186ec <__gethex+0x1d6>
 801893a:	2701      	movs	r7, #1
 801893c:	e7c7      	b.n	80188ce <__gethex+0x3b8>
 801893e:	f016 061f 	ands.w	r6, r6, #31
 8018942:	d0fa      	beq.n	801893a <__gethex+0x424>
 8018944:	449a      	add	sl, r3
 8018946:	f1c6 0620 	rsb	r6, r6, #32
 801894a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801894e:	f000 f9b3 	bl	8018cb8 <__hi0bits>
 8018952:	42b0      	cmp	r0, r6
 8018954:	dbe7      	blt.n	8018926 <__gethex+0x410>
 8018956:	e7f0      	b.n	801893a <__gethex+0x424>

08018958 <L_shift>:
 8018958:	f1c2 0208 	rsb	r2, r2, #8
 801895c:	0092      	lsls	r2, r2, #2
 801895e:	b570      	push	{r4, r5, r6, lr}
 8018960:	f1c2 0620 	rsb	r6, r2, #32
 8018964:	6843      	ldr	r3, [r0, #4]
 8018966:	6804      	ldr	r4, [r0, #0]
 8018968:	fa03 f506 	lsl.w	r5, r3, r6
 801896c:	432c      	orrs	r4, r5
 801896e:	40d3      	lsrs	r3, r2
 8018970:	6004      	str	r4, [r0, #0]
 8018972:	f840 3f04 	str.w	r3, [r0, #4]!
 8018976:	4288      	cmp	r0, r1
 8018978:	d3f4      	bcc.n	8018964 <L_shift+0xc>
 801897a:	bd70      	pop	{r4, r5, r6, pc}

0801897c <__match>:
 801897c:	b530      	push	{r4, r5, lr}
 801897e:	6803      	ldr	r3, [r0, #0]
 8018980:	3301      	adds	r3, #1
 8018982:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018986:	b914      	cbnz	r4, 801898e <__match+0x12>
 8018988:	6003      	str	r3, [r0, #0]
 801898a:	2001      	movs	r0, #1
 801898c:	bd30      	pop	{r4, r5, pc}
 801898e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018992:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8018996:	2d19      	cmp	r5, #25
 8018998:	bf98      	it	ls
 801899a:	3220      	addls	r2, #32
 801899c:	42a2      	cmp	r2, r4
 801899e:	d0f0      	beq.n	8018982 <__match+0x6>
 80189a0:	2000      	movs	r0, #0
 80189a2:	e7f3      	b.n	801898c <__match+0x10>

080189a4 <__hexnan>:
 80189a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80189a8:	680b      	ldr	r3, [r1, #0]
 80189aa:	6801      	ldr	r1, [r0, #0]
 80189ac:	115f      	asrs	r7, r3, #5
 80189ae:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80189b2:	f013 031f 	ands.w	r3, r3, #31
 80189b6:	b087      	sub	sp, #28
 80189b8:	bf18      	it	ne
 80189ba:	3704      	addne	r7, #4
 80189bc:	2500      	movs	r5, #0
 80189be:	1f3e      	subs	r6, r7, #4
 80189c0:	4682      	mov	sl, r0
 80189c2:	4690      	mov	r8, r2
 80189c4:	9301      	str	r3, [sp, #4]
 80189c6:	f847 5c04 	str.w	r5, [r7, #-4]
 80189ca:	46b1      	mov	r9, r6
 80189cc:	4634      	mov	r4, r6
 80189ce:	9502      	str	r5, [sp, #8]
 80189d0:	46ab      	mov	fp, r5
 80189d2:	784a      	ldrb	r2, [r1, #1]
 80189d4:	1c4b      	adds	r3, r1, #1
 80189d6:	9303      	str	r3, [sp, #12]
 80189d8:	b342      	cbz	r2, 8018a2c <__hexnan+0x88>
 80189da:	4610      	mov	r0, r2
 80189dc:	9105      	str	r1, [sp, #20]
 80189de:	9204      	str	r2, [sp, #16]
 80189e0:	f7ff fd84 	bl	80184ec <__hexdig_fun>
 80189e4:	2800      	cmp	r0, #0
 80189e6:	d143      	bne.n	8018a70 <__hexnan+0xcc>
 80189e8:	9a04      	ldr	r2, [sp, #16]
 80189ea:	9905      	ldr	r1, [sp, #20]
 80189ec:	2a20      	cmp	r2, #32
 80189ee:	d818      	bhi.n	8018a22 <__hexnan+0x7e>
 80189f0:	9b02      	ldr	r3, [sp, #8]
 80189f2:	459b      	cmp	fp, r3
 80189f4:	dd13      	ble.n	8018a1e <__hexnan+0x7a>
 80189f6:	454c      	cmp	r4, r9
 80189f8:	d206      	bcs.n	8018a08 <__hexnan+0x64>
 80189fa:	2d07      	cmp	r5, #7
 80189fc:	dc04      	bgt.n	8018a08 <__hexnan+0x64>
 80189fe:	462a      	mov	r2, r5
 8018a00:	4649      	mov	r1, r9
 8018a02:	4620      	mov	r0, r4
 8018a04:	f7ff ffa8 	bl	8018958 <L_shift>
 8018a08:	4544      	cmp	r4, r8
 8018a0a:	d944      	bls.n	8018a96 <__hexnan+0xf2>
 8018a0c:	2300      	movs	r3, #0
 8018a0e:	f1a4 0904 	sub.w	r9, r4, #4
 8018a12:	f844 3c04 	str.w	r3, [r4, #-4]
 8018a16:	f8cd b008 	str.w	fp, [sp, #8]
 8018a1a:	464c      	mov	r4, r9
 8018a1c:	461d      	mov	r5, r3
 8018a1e:	9903      	ldr	r1, [sp, #12]
 8018a20:	e7d7      	b.n	80189d2 <__hexnan+0x2e>
 8018a22:	2a29      	cmp	r2, #41	; 0x29
 8018a24:	d14a      	bne.n	8018abc <__hexnan+0x118>
 8018a26:	3102      	adds	r1, #2
 8018a28:	f8ca 1000 	str.w	r1, [sl]
 8018a2c:	f1bb 0f00 	cmp.w	fp, #0
 8018a30:	d044      	beq.n	8018abc <__hexnan+0x118>
 8018a32:	454c      	cmp	r4, r9
 8018a34:	d206      	bcs.n	8018a44 <__hexnan+0xa0>
 8018a36:	2d07      	cmp	r5, #7
 8018a38:	dc04      	bgt.n	8018a44 <__hexnan+0xa0>
 8018a3a:	462a      	mov	r2, r5
 8018a3c:	4649      	mov	r1, r9
 8018a3e:	4620      	mov	r0, r4
 8018a40:	f7ff ff8a 	bl	8018958 <L_shift>
 8018a44:	4544      	cmp	r4, r8
 8018a46:	d928      	bls.n	8018a9a <__hexnan+0xf6>
 8018a48:	4643      	mov	r3, r8
 8018a4a:	f854 2b04 	ldr.w	r2, [r4], #4
 8018a4e:	f843 2b04 	str.w	r2, [r3], #4
 8018a52:	42a6      	cmp	r6, r4
 8018a54:	d2f9      	bcs.n	8018a4a <__hexnan+0xa6>
 8018a56:	2200      	movs	r2, #0
 8018a58:	f843 2b04 	str.w	r2, [r3], #4
 8018a5c:	429e      	cmp	r6, r3
 8018a5e:	d2fb      	bcs.n	8018a58 <__hexnan+0xb4>
 8018a60:	6833      	ldr	r3, [r6, #0]
 8018a62:	b91b      	cbnz	r3, 8018a6c <__hexnan+0xc8>
 8018a64:	4546      	cmp	r6, r8
 8018a66:	d127      	bne.n	8018ab8 <__hexnan+0x114>
 8018a68:	2301      	movs	r3, #1
 8018a6a:	6033      	str	r3, [r6, #0]
 8018a6c:	2005      	movs	r0, #5
 8018a6e:	e026      	b.n	8018abe <__hexnan+0x11a>
 8018a70:	3501      	adds	r5, #1
 8018a72:	2d08      	cmp	r5, #8
 8018a74:	f10b 0b01 	add.w	fp, fp, #1
 8018a78:	dd06      	ble.n	8018a88 <__hexnan+0xe4>
 8018a7a:	4544      	cmp	r4, r8
 8018a7c:	d9cf      	bls.n	8018a1e <__hexnan+0x7a>
 8018a7e:	2300      	movs	r3, #0
 8018a80:	f844 3c04 	str.w	r3, [r4, #-4]
 8018a84:	2501      	movs	r5, #1
 8018a86:	3c04      	subs	r4, #4
 8018a88:	6822      	ldr	r2, [r4, #0]
 8018a8a:	f000 000f 	and.w	r0, r0, #15
 8018a8e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8018a92:	6020      	str	r0, [r4, #0]
 8018a94:	e7c3      	b.n	8018a1e <__hexnan+0x7a>
 8018a96:	2508      	movs	r5, #8
 8018a98:	e7c1      	b.n	8018a1e <__hexnan+0x7a>
 8018a9a:	9b01      	ldr	r3, [sp, #4]
 8018a9c:	2b00      	cmp	r3, #0
 8018a9e:	d0df      	beq.n	8018a60 <__hexnan+0xbc>
 8018aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8018aa4:	f1c3 0320 	rsb	r3, r3, #32
 8018aa8:	fa22 f303 	lsr.w	r3, r2, r3
 8018aac:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8018ab0:	401a      	ands	r2, r3
 8018ab2:	f847 2c04 	str.w	r2, [r7, #-4]
 8018ab6:	e7d3      	b.n	8018a60 <__hexnan+0xbc>
 8018ab8:	3e04      	subs	r6, #4
 8018aba:	e7d1      	b.n	8018a60 <__hexnan+0xbc>
 8018abc:	2004      	movs	r0, #4
 8018abe:	b007      	add	sp, #28
 8018ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018ac4 <__locale_ctype_ptr_l>:
 8018ac4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8018ac8:	4770      	bx	lr
	...

08018acc <__locale_ctype_ptr>:
 8018acc:	4b04      	ldr	r3, [pc, #16]	; (8018ae0 <__locale_ctype_ptr+0x14>)
 8018ace:	4a05      	ldr	r2, [pc, #20]	; (8018ae4 <__locale_ctype_ptr+0x18>)
 8018ad0:	681b      	ldr	r3, [r3, #0]
 8018ad2:	6a1b      	ldr	r3, [r3, #32]
 8018ad4:	2b00      	cmp	r3, #0
 8018ad6:	bf08      	it	eq
 8018ad8:	4613      	moveq	r3, r2
 8018ada:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8018ade:	4770      	bx	lr
 8018ae0:	20000e60 	.word	0x20000e60
 8018ae4:	20000ec4 	.word	0x20000ec4

08018ae8 <__localeconv_l>:
 8018ae8:	30f0      	adds	r0, #240	; 0xf0
 8018aea:	4770      	bx	lr

08018aec <_localeconv_r>:
 8018aec:	4b04      	ldr	r3, [pc, #16]	; (8018b00 <_localeconv_r+0x14>)
 8018aee:	681b      	ldr	r3, [r3, #0]
 8018af0:	6a18      	ldr	r0, [r3, #32]
 8018af2:	4b04      	ldr	r3, [pc, #16]	; (8018b04 <_localeconv_r+0x18>)
 8018af4:	2800      	cmp	r0, #0
 8018af6:	bf08      	it	eq
 8018af8:	4618      	moveq	r0, r3
 8018afa:	30f0      	adds	r0, #240	; 0xf0
 8018afc:	4770      	bx	lr
 8018afe:	bf00      	nop
 8018b00:	20000e60 	.word	0x20000e60
 8018b04:	20000ec4 	.word	0x20000ec4

08018b08 <__ascii_mbtowc>:
 8018b08:	b082      	sub	sp, #8
 8018b0a:	b901      	cbnz	r1, 8018b0e <__ascii_mbtowc+0x6>
 8018b0c:	a901      	add	r1, sp, #4
 8018b0e:	b142      	cbz	r2, 8018b22 <__ascii_mbtowc+0x1a>
 8018b10:	b14b      	cbz	r3, 8018b26 <__ascii_mbtowc+0x1e>
 8018b12:	7813      	ldrb	r3, [r2, #0]
 8018b14:	600b      	str	r3, [r1, #0]
 8018b16:	7812      	ldrb	r2, [r2, #0]
 8018b18:	1c10      	adds	r0, r2, #0
 8018b1a:	bf18      	it	ne
 8018b1c:	2001      	movne	r0, #1
 8018b1e:	b002      	add	sp, #8
 8018b20:	4770      	bx	lr
 8018b22:	4610      	mov	r0, r2
 8018b24:	e7fb      	b.n	8018b1e <__ascii_mbtowc+0x16>
 8018b26:	f06f 0001 	mvn.w	r0, #1
 8018b2a:	e7f8      	b.n	8018b1e <__ascii_mbtowc+0x16>

08018b2c <__malloc_lock>:
 8018b2c:	4770      	bx	lr

08018b2e <__malloc_unlock>:
 8018b2e:	4770      	bx	lr

08018b30 <_Balloc>:
 8018b30:	b570      	push	{r4, r5, r6, lr}
 8018b32:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8018b34:	4604      	mov	r4, r0
 8018b36:	460e      	mov	r6, r1
 8018b38:	b93d      	cbnz	r5, 8018b4a <_Balloc+0x1a>
 8018b3a:	2010      	movs	r0, #16
 8018b3c:	f7fc ffe0 	bl	8015b00 <malloc>
 8018b40:	6260      	str	r0, [r4, #36]	; 0x24
 8018b42:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8018b46:	6005      	str	r5, [r0, #0]
 8018b48:	60c5      	str	r5, [r0, #12]
 8018b4a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8018b4c:	68eb      	ldr	r3, [r5, #12]
 8018b4e:	b183      	cbz	r3, 8018b72 <_Balloc+0x42>
 8018b50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018b52:	68db      	ldr	r3, [r3, #12]
 8018b54:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8018b58:	b9b8      	cbnz	r0, 8018b8a <_Balloc+0x5a>
 8018b5a:	2101      	movs	r1, #1
 8018b5c:	fa01 f506 	lsl.w	r5, r1, r6
 8018b60:	1d6a      	adds	r2, r5, #5
 8018b62:	0092      	lsls	r2, r2, #2
 8018b64:	4620      	mov	r0, r4
 8018b66:	f000 fbe2 	bl	801932e <_calloc_r>
 8018b6a:	b160      	cbz	r0, 8018b86 <_Balloc+0x56>
 8018b6c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8018b70:	e00e      	b.n	8018b90 <_Balloc+0x60>
 8018b72:	2221      	movs	r2, #33	; 0x21
 8018b74:	2104      	movs	r1, #4
 8018b76:	4620      	mov	r0, r4
 8018b78:	f000 fbd9 	bl	801932e <_calloc_r>
 8018b7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018b7e:	60e8      	str	r0, [r5, #12]
 8018b80:	68db      	ldr	r3, [r3, #12]
 8018b82:	2b00      	cmp	r3, #0
 8018b84:	d1e4      	bne.n	8018b50 <_Balloc+0x20>
 8018b86:	2000      	movs	r0, #0
 8018b88:	bd70      	pop	{r4, r5, r6, pc}
 8018b8a:	6802      	ldr	r2, [r0, #0]
 8018b8c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8018b90:	2300      	movs	r3, #0
 8018b92:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018b96:	e7f7      	b.n	8018b88 <_Balloc+0x58>

08018b98 <_Bfree>:
 8018b98:	b570      	push	{r4, r5, r6, lr}
 8018b9a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8018b9c:	4606      	mov	r6, r0
 8018b9e:	460d      	mov	r5, r1
 8018ba0:	b93c      	cbnz	r4, 8018bb2 <_Bfree+0x1a>
 8018ba2:	2010      	movs	r0, #16
 8018ba4:	f7fc ffac 	bl	8015b00 <malloc>
 8018ba8:	6270      	str	r0, [r6, #36]	; 0x24
 8018baa:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018bae:	6004      	str	r4, [r0, #0]
 8018bb0:	60c4      	str	r4, [r0, #12]
 8018bb2:	b13d      	cbz	r5, 8018bc4 <_Bfree+0x2c>
 8018bb4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8018bb6:	686a      	ldr	r2, [r5, #4]
 8018bb8:	68db      	ldr	r3, [r3, #12]
 8018bba:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018bbe:	6029      	str	r1, [r5, #0]
 8018bc0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8018bc4:	bd70      	pop	{r4, r5, r6, pc}

08018bc6 <__multadd>:
 8018bc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018bca:	690d      	ldr	r5, [r1, #16]
 8018bcc:	461f      	mov	r7, r3
 8018bce:	4606      	mov	r6, r0
 8018bd0:	460c      	mov	r4, r1
 8018bd2:	f101 0c14 	add.w	ip, r1, #20
 8018bd6:	2300      	movs	r3, #0
 8018bd8:	f8dc 0000 	ldr.w	r0, [ip]
 8018bdc:	b281      	uxth	r1, r0
 8018bde:	fb02 7101 	mla	r1, r2, r1, r7
 8018be2:	0c0f      	lsrs	r7, r1, #16
 8018be4:	0c00      	lsrs	r0, r0, #16
 8018be6:	fb02 7000 	mla	r0, r2, r0, r7
 8018bea:	b289      	uxth	r1, r1
 8018bec:	3301      	adds	r3, #1
 8018bee:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8018bf2:	429d      	cmp	r5, r3
 8018bf4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8018bf8:	f84c 1b04 	str.w	r1, [ip], #4
 8018bfc:	dcec      	bgt.n	8018bd8 <__multadd+0x12>
 8018bfe:	b1d7      	cbz	r7, 8018c36 <__multadd+0x70>
 8018c00:	68a3      	ldr	r3, [r4, #8]
 8018c02:	42ab      	cmp	r3, r5
 8018c04:	dc12      	bgt.n	8018c2c <__multadd+0x66>
 8018c06:	6861      	ldr	r1, [r4, #4]
 8018c08:	4630      	mov	r0, r6
 8018c0a:	3101      	adds	r1, #1
 8018c0c:	f7ff ff90 	bl	8018b30 <_Balloc>
 8018c10:	6922      	ldr	r2, [r4, #16]
 8018c12:	3202      	adds	r2, #2
 8018c14:	f104 010c 	add.w	r1, r4, #12
 8018c18:	4680      	mov	r8, r0
 8018c1a:	0092      	lsls	r2, r2, #2
 8018c1c:	300c      	adds	r0, #12
 8018c1e:	f7fc ff7f 	bl	8015b20 <memcpy>
 8018c22:	4621      	mov	r1, r4
 8018c24:	4630      	mov	r0, r6
 8018c26:	f7ff ffb7 	bl	8018b98 <_Bfree>
 8018c2a:	4644      	mov	r4, r8
 8018c2c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8018c30:	3501      	adds	r5, #1
 8018c32:	615f      	str	r7, [r3, #20]
 8018c34:	6125      	str	r5, [r4, #16]
 8018c36:	4620      	mov	r0, r4
 8018c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018c3c <__s2b>:
 8018c3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018c40:	460c      	mov	r4, r1
 8018c42:	4615      	mov	r5, r2
 8018c44:	461f      	mov	r7, r3
 8018c46:	2209      	movs	r2, #9
 8018c48:	3308      	adds	r3, #8
 8018c4a:	4606      	mov	r6, r0
 8018c4c:	fb93 f3f2 	sdiv	r3, r3, r2
 8018c50:	2100      	movs	r1, #0
 8018c52:	2201      	movs	r2, #1
 8018c54:	429a      	cmp	r2, r3
 8018c56:	db20      	blt.n	8018c9a <__s2b+0x5e>
 8018c58:	4630      	mov	r0, r6
 8018c5a:	f7ff ff69 	bl	8018b30 <_Balloc>
 8018c5e:	9b08      	ldr	r3, [sp, #32]
 8018c60:	6143      	str	r3, [r0, #20]
 8018c62:	2d09      	cmp	r5, #9
 8018c64:	f04f 0301 	mov.w	r3, #1
 8018c68:	6103      	str	r3, [r0, #16]
 8018c6a:	dd19      	ble.n	8018ca0 <__s2b+0x64>
 8018c6c:	f104 0809 	add.w	r8, r4, #9
 8018c70:	46c1      	mov	r9, r8
 8018c72:	442c      	add	r4, r5
 8018c74:	f819 3b01 	ldrb.w	r3, [r9], #1
 8018c78:	4601      	mov	r1, r0
 8018c7a:	3b30      	subs	r3, #48	; 0x30
 8018c7c:	220a      	movs	r2, #10
 8018c7e:	4630      	mov	r0, r6
 8018c80:	f7ff ffa1 	bl	8018bc6 <__multadd>
 8018c84:	45a1      	cmp	r9, r4
 8018c86:	d1f5      	bne.n	8018c74 <__s2b+0x38>
 8018c88:	eb08 0405 	add.w	r4, r8, r5
 8018c8c:	3c08      	subs	r4, #8
 8018c8e:	1b2d      	subs	r5, r5, r4
 8018c90:	1963      	adds	r3, r4, r5
 8018c92:	42bb      	cmp	r3, r7
 8018c94:	db07      	blt.n	8018ca6 <__s2b+0x6a>
 8018c96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018c9a:	0052      	lsls	r2, r2, #1
 8018c9c:	3101      	adds	r1, #1
 8018c9e:	e7d9      	b.n	8018c54 <__s2b+0x18>
 8018ca0:	340a      	adds	r4, #10
 8018ca2:	2509      	movs	r5, #9
 8018ca4:	e7f3      	b.n	8018c8e <__s2b+0x52>
 8018ca6:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018caa:	4601      	mov	r1, r0
 8018cac:	3b30      	subs	r3, #48	; 0x30
 8018cae:	220a      	movs	r2, #10
 8018cb0:	4630      	mov	r0, r6
 8018cb2:	f7ff ff88 	bl	8018bc6 <__multadd>
 8018cb6:	e7eb      	b.n	8018c90 <__s2b+0x54>

08018cb8 <__hi0bits>:
 8018cb8:	0c02      	lsrs	r2, r0, #16
 8018cba:	0412      	lsls	r2, r2, #16
 8018cbc:	4603      	mov	r3, r0
 8018cbe:	b9b2      	cbnz	r2, 8018cee <__hi0bits+0x36>
 8018cc0:	0403      	lsls	r3, r0, #16
 8018cc2:	2010      	movs	r0, #16
 8018cc4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8018cc8:	bf04      	itt	eq
 8018cca:	021b      	lsleq	r3, r3, #8
 8018ccc:	3008      	addeq	r0, #8
 8018cce:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8018cd2:	bf04      	itt	eq
 8018cd4:	011b      	lsleq	r3, r3, #4
 8018cd6:	3004      	addeq	r0, #4
 8018cd8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8018cdc:	bf04      	itt	eq
 8018cde:	009b      	lsleq	r3, r3, #2
 8018ce0:	3002      	addeq	r0, #2
 8018ce2:	2b00      	cmp	r3, #0
 8018ce4:	db06      	blt.n	8018cf4 <__hi0bits+0x3c>
 8018ce6:	005b      	lsls	r3, r3, #1
 8018ce8:	d503      	bpl.n	8018cf2 <__hi0bits+0x3a>
 8018cea:	3001      	adds	r0, #1
 8018cec:	4770      	bx	lr
 8018cee:	2000      	movs	r0, #0
 8018cf0:	e7e8      	b.n	8018cc4 <__hi0bits+0xc>
 8018cf2:	2020      	movs	r0, #32
 8018cf4:	4770      	bx	lr

08018cf6 <__lo0bits>:
 8018cf6:	6803      	ldr	r3, [r0, #0]
 8018cf8:	f013 0207 	ands.w	r2, r3, #7
 8018cfc:	4601      	mov	r1, r0
 8018cfe:	d00b      	beq.n	8018d18 <__lo0bits+0x22>
 8018d00:	07da      	lsls	r2, r3, #31
 8018d02:	d423      	bmi.n	8018d4c <__lo0bits+0x56>
 8018d04:	0798      	lsls	r0, r3, #30
 8018d06:	bf49      	itett	mi
 8018d08:	085b      	lsrmi	r3, r3, #1
 8018d0a:	089b      	lsrpl	r3, r3, #2
 8018d0c:	2001      	movmi	r0, #1
 8018d0e:	600b      	strmi	r3, [r1, #0]
 8018d10:	bf5c      	itt	pl
 8018d12:	600b      	strpl	r3, [r1, #0]
 8018d14:	2002      	movpl	r0, #2
 8018d16:	4770      	bx	lr
 8018d18:	b298      	uxth	r0, r3
 8018d1a:	b9a8      	cbnz	r0, 8018d48 <__lo0bits+0x52>
 8018d1c:	0c1b      	lsrs	r3, r3, #16
 8018d1e:	2010      	movs	r0, #16
 8018d20:	f013 0fff 	tst.w	r3, #255	; 0xff
 8018d24:	bf04      	itt	eq
 8018d26:	0a1b      	lsreq	r3, r3, #8
 8018d28:	3008      	addeq	r0, #8
 8018d2a:	071a      	lsls	r2, r3, #28
 8018d2c:	bf04      	itt	eq
 8018d2e:	091b      	lsreq	r3, r3, #4
 8018d30:	3004      	addeq	r0, #4
 8018d32:	079a      	lsls	r2, r3, #30
 8018d34:	bf04      	itt	eq
 8018d36:	089b      	lsreq	r3, r3, #2
 8018d38:	3002      	addeq	r0, #2
 8018d3a:	07da      	lsls	r2, r3, #31
 8018d3c:	d402      	bmi.n	8018d44 <__lo0bits+0x4e>
 8018d3e:	085b      	lsrs	r3, r3, #1
 8018d40:	d006      	beq.n	8018d50 <__lo0bits+0x5a>
 8018d42:	3001      	adds	r0, #1
 8018d44:	600b      	str	r3, [r1, #0]
 8018d46:	4770      	bx	lr
 8018d48:	4610      	mov	r0, r2
 8018d4a:	e7e9      	b.n	8018d20 <__lo0bits+0x2a>
 8018d4c:	2000      	movs	r0, #0
 8018d4e:	4770      	bx	lr
 8018d50:	2020      	movs	r0, #32
 8018d52:	4770      	bx	lr

08018d54 <__i2b>:
 8018d54:	b510      	push	{r4, lr}
 8018d56:	460c      	mov	r4, r1
 8018d58:	2101      	movs	r1, #1
 8018d5a:	f7ff fee9 	bl	8018b30 <_Balloc>
 8018d5e:	2201      	movs	r2, #1
 8018d60:	6144      	str	r4, [r0, #20]
 8018d62:	6102      	str	r2, [r0, #16]
 8018d64:	bd10      	pop	{r4, pc}

08018d66 <__multiply>:
 8018d66:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d6a:	4614      	mov	r4, r2
 8018d6c:	690a      	ldr	r2, [r1, #16]
 8018d6e:	6923      	ldr	r3, [r4, #16]
 8018d70:	429a      	cmp	r2, r3
 8018d72:	bfb8      	it	lt
 8018d74:	460b      	movlt	r3, r1
 8018d76:	4688      	mov	r8, r1
 8018d78:	bfbc      	itt	lt
 8018d7a:	46a0      	movlt	r8, r4
 8018d7c:	461c      	movlt	r4, r3
 8018d7e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8018d82:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8018d86:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018d8a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8018d8e:	eb07 0609 	add.w	r6, r7, r9
 8018d92:	42b3      	cmp	r3, r6
 8018d94:	bfb8      	it	lt
 8018d96:	3101      	addlt	r1, #1
 8018d98:	f7ff feca 	bl	8018b30 <_Balloc>
 8018d9c:	f100 0514 	add.w	r5, r0, #20
 8018da0:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8018da4:	462b      	mov	r3, r5
 8018da6:	2200      	movs	r2, #0
 8018da8:	4573      	cmp	r3, lr
 8018daa:	d316      	bcc.n	8018dda <__multiply+0x74>
 8018dac:	f104 0214 	add.w	r2, r4, #20
 8018db0:	f108 0114 	add.w	r1, r8, #20
 8018db4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8018db8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8018dbc:	9300      	str	r3, [sp, #0]
 8018dbe:	9b00      	ldr	r3, [sp, #0]
 8018dc0:	9201      	str	r2, [sp, #4]
 8018dc2:	4293      	cmp	r3, r2
 8018dc4:	d80c      	bhi.n	8018de0 <__multiply+0x7a>
 8018dc6:	2e00      	cmp	r6, #0
 8018dc8:	dd03      	ble.n	8018dd2 <__multiply+0x6c>
 8018dca:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8018dce:	2b00      	cmp	r3, #0
 8018dd0:	d05d      	beq.n	8018e8e <__multiply+0x128>
 8018dd2:	6106      	str	r6, [r0, #16]
 8018dd4:	b003      	add	sp, #12
 8018dd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018dda:	f843 2b04 	str.w	r2, [r3], #4
 8018dde:	e7e3      	b.n	8018da8 <__multiply+0x42>
 8018de0:	f8b2 b000 	ldrh.w	fp, [r2]
 8018de4:	f1bb 0f00 	cmp.w	fp, #0
 8018de8:	d023      	beq.n	8018e32 <__multiply+0xcc>
 8018dea:	4689      	mov	r9, r1
 8018dec:	46ac      	mov	ip, r5
 8018dee:	f04f 0800 	mov.w	r8, #0
 8018df2:	f859 4b04 	ldr.w	r4, [r9], #4
 8018df6:	f8dc a000 	ldr.w	sl, [ip]
 8018dfa:	b2a3      	uxth	r3, r4
 8018dfc:	fa1f fa8a 	uxth.w	sl, sl
 8018e00:	fb0b a303 	mla	r3, fp, r3, sl
 8018e04:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8018e08:	f8dc 4000 	ldr.w	r4, [ip]
 8018e0c:	4443      	add	r3, r8
 8018e0e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8018e12:	fb0b 840a 	mla	r4, fp, sl, r8
 8018e16:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8018e1a:	46e2      	mov	sl, ip
 8018e1c:	b29b      	uxth	r3, r3
 8018e1e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8018e22:	454f      	cmp	r7, r9
 8018e24:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8018e28:	f84a 3b04 	str.w	r3, [sl], #4
 8018e2c:	d82b      	bhi.n	8018e86 <__multiply+0x120>
 8018e2e:	f8cc 8004 	str.w	r8, [ip, #4]
 8018e32:	9b01      	ldr	r3, [sp, #4]
 8018e34:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8018e38:	3204      	adds	r2, #4
 8018e3a:	f1ba 0f00 	cmp.w	sl, #0
 8018e3e:	d020      	beq.n	8018e82 <__multiply+0x11c>
 8018e40:	682b      	ldr	r3, [r5, #0]
 8018e42:	4689      	mov	r9, r1
 8018e44:	46a8      	mov	r8, r5
 8018e46:	f04f 0b00 	mov.w	fp, #0
 8018e4a:	f8b9 c000 	ldrh.w	ip, [r9]
 8018e4e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8018e52:	fb0a 440c 	mla	r4, sl, ip, r4
 8018e56:	445c      	add	r4, fp
 8018e58:	46c4      	mov	ip, r8
 8018e5a:	b29b      	uxth	r3, r3
 8018e5c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8018e60:	f84c 3b04 	str.w	r3, [ip], #4
 8018e64:	f859 3b04 	ldr.w	r3, [r9], #4
 8018e68:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8018e6c:	0c1b      	lsrs	r3, r3, #16
 8018e6e:	fb0a b303 	mla	r3, sl, r3, fp
 8018e72:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8018e76:	454f      	cmp	r7, r9
 8018e78:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8018e7c:	d805      	bhi.n	8018e8a <__multiply+0x124>
 8018e7e:	f8c8 3004 	str.w	r3, [r8, #4]
 8018e82:	3504      	adds	r5, #4
 8018e84:	e79b      	b.n	8018dbe <__multiply+0x58>
 8018e86:	46d4      	mov	ip, sl
 8018e88:	e7b3      	b.n	8018df2 <__multiply+0x8c>
 8018e8a:	46e0      	mov	r8, ip
 8018e8c:	e7dd      	b.n	8018e4a <__multiply+0xe4>
 8018e8e:	3e01      	subs	r6, #1
 8018e90:	e799      	b.n	8018dc6 <__multiply+0x60>
	...

08018e94 <__pow5mult>:
 8018e94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018e98:	4615      	mov	r5, r2
 8018e9a:	f012 0203 	ands.w	r2, r2, #3
 8018e9e:	4606      	mov	r6, r0
 8018ea0:	460f      	mov	r7, r1
 8018ea2:	d007      	beq.n	8018eb4 <__pow5mult+0x20>
 8018ea4:	3a01      	subs	r2, #1
 8018ea6:	4c21      	ldr	r4, [pc, #132]	; (8018f2c <__pow5mult+0x98>)
 8018ea8:	2300      	movs	r3, #0
 8018eaa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018eae:	f7ff fe8a 	bl	8018bc6 <__multadd>
 8018eb2:	4607      	mov	r7, r0
 8018eb4:	10ad      	asrs	r5, r5, #2
 8018eb6:	d035      	beq.n	8018f24 <__pow5mult+0x90>
 8018eb8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8018eba:	b93c      	cbnz	r4, 8018ecc <__pow5mult+0x38>
 8018ebc:	2010      	movs	r0, #16
 8018ebe:	f7fc fe1f 	bl	8015b00 <malloc>
 8018ec2:	6270      	str	r0, [r6, #36]	; 0x24
 8018ec4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018ec8:	6004      	str	r4, [r0, #0]
 8018eca:	60c4      	str	r4, [r0, #12]
 8018ecc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8018ed0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018ed4:	b94c      	cbnz	r4, 8018eea <__pow5mult+0x56>
 8018ed6:	f240 2171 	movw	r1, #625	; 0x271
 8018eda:	4630      	mov	r0, r6
 8018edc:	f7ff ff3a 	bl	8018d54 <__i2b>
 8018ee0:	2300      	movs	r3, #0
 8018ee2:	f8c8 0008 	str.w	r0, [r8, #8]
 8018ee6:	4604      	mov	r4, r0
 8018ee8:	6003      	str	r3, [r0, #0]
 8018eea:	f04f 0800 	mov.w	r8, #0
 8018eee:	07eb      	lsls	r3, r5, #31
 8018ef0:	d50a      	bpl.n	8018f08 <__pow5mult+0x74>
 8018ef2:	4639      	mov	r1, r7
 8018ef4:	4622      	mov	r2, r4
 8018ef6:	4630      	mov	r0, r6
 8018ef8:	f7ff ff35 	bl	8018d66 <__multiply>
 8018efc:	4639      	mov	r1, r7
 8018efe:	4681      	mov	r9, r0
 8018f00:	4630      	mov	r0, r6
 8018f02:	f7ff fe49 	bl	8018b98 <_Bfree>
 8018f06:	464f      	mov	r7, r9
 8018f08:	106d      	asrs	r5, r5, #1
 8018f0a:	d00b      	beq.n	8018f24 <__pow5mult+0x90>
 8018f0c:	6820      	ldr	r0, [r4, #0]
 8018f0e:	b938      	cbnz	r0, 8018f20 <__pow5mult+0x8c>
 8018f10:	4622      	mov	r2, r4
 8018f12:	4621      	mov	r1, r4
 8018f14:	4630      	mov	r0, r6
 8018f16:	f7ff ff26 	bl	8018d66 <__multiply>
 8018f1a:	6020      	str	r0, [r4, #0]
 8018f1c:	f8c0 8000 	str.w	r8, [r0]
 8018f20:	4604      	mov	r4, r0
 8018f22:	e7e4      	b.n	8018eee <__pow5mult+0x5a>
 8018f24:	4638      	mov	r0, r7
 8018f26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018f2a:	bf00      	nop
 8018f2c:	0801c010 	.word	0x0801c010

08018f30 <__lshift>:
 8018f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018f34:	460c      	mov	r4, r1
 8018f36:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018f3a:	6923      	ldr	r3, [r4, #16]
 8018f3c:	6849      	ldr	r1, [r1, #4]
 8018f3e:	eb0a 0903 	add.w	r9, sl, r3
 8018f42:	68a3      	ldr	r3, [r4, #8]
 8018f44:	4607      	mov	r7, r0
 8018f46:	4616      	mov	r6, r2
 8018f48:	f109 0501 	add.w	r5, r9, #1
 8018f4c:	42ab      	cmp	r3, r5
 8018f4e:	db32      	blt.n	8018fb6 <__lshift+0x86>
 8018f50:	4638      	mov	r0, r7
 8018f52:	f7ff fded 	bl	8018b30 <_Balloc>
 8018f56:	2300      	movs	r3, #0
 8018f58:	4680      	mov	r8, r0
 8018f5a:	f100 0114 	add.w	r1, r0, #20
 8018f5e:	461a      	mov	r2, r3
 8018f60:	4553      	cmp	r3, sl
 8018f62:	db2b      	blt.n	8018fbc <__lshift+0x8c>
 8018f64:	6920      	ldr	r0, [r4, #16]
 8018f66:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018f6a:	f104 0314 	add.w	r3, r4, #20
 8018f6e:	f016 021f 	ands.w	r2, r6, #31
 8018f72:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018f76:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018f7a:	d025      	beq.n	8018fc8 <__lshift+0x98>
 8018f7c:	f1c2 0e20 	rsb	lr, r2, #32
 8018f80:	2000      	movs	r0, #0
 8018f82:	681e      	ldr	r6, [r3, #0]
 8018f84:	468a      	mov	sl, r1
 8018f86:	4096      	lsls	r6, r2
 8018f88:	4330      	orrs	r0, r6
 8018f8a:	f84a 0b04 	str.w	r0, [sl], #4
 8018f8e:	f853 0b04 	ldr.w	r0, [r3], #4
 8018f92:	459c      	cmp	ip, r3
 8018f94:	fa20 f00e 	lsr.w	r0, r0, lr
 8018f98:	d814      	bhi.n	8018fc4 <__lshift+0x94>
 8018f9a:	6048      	str	r0, [r1, #4]
 8018f9c:	b108      	cbz	r0, 8018fa2 <__lshift+0x72>
 8018f9e:	f109 0502 	add.w	r5, r9, #2
 8018fa2:	3d01      	subs	r5, #1
 8018fa4:	4638      	mov	r0, r7
 8018fa6:	f8c8 5010 	str.w	r5, [r8, #16]
 8018faa:	4621      	mov	r1, r4
 8018fac:	f7ff fdf4 	bl	8018b98 <_Bfree>
 8018fb0:	4640      	mov	r0, r8
 8018fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018fb6:	3101      	adds	r1, #1
 8018fb8:	005b      	lsls	r3, r3, #1
 8018fba:	e7c7      	b.n	8018f4c <__lshift+0x1c>
 8018fbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8018fc0:	3301      	adds	r3, #1
 8018fc2:	e7cd      	b.n	8018f60 <__lshift+0x30>
 8018fc4:	4651      	mov	r1, sl
 8018fc6:	e7dc      	b.n	8018f82 <__lshift+0x52>
 8018fc8:	3904      	subs	r1, #4
 8018fca:	f853 2b04 	ldr.w	r2, [r3], #4
 8018fce:	f841 2f04 	str.w	r2, [r1, #4]!
 8018fd2:	459c      	cmp	ip, r3
 8018fd4:	d8f9      	bhi.n	8018fca <__lshift+0x9a>
 8018fd6:	e7e4      	b.n	8018fa2 <__lshift+0x72>

08018fd8 <__mcmp>:
 8018fd8:	6903      	ldr	r3, [r0, #16]
 8018fda:	690a      	ldr	r2, [r1, #16]
 8018fdc:	1a9b      	subs	r3, r3, r2
 8018fde:	b530      	push	{r4, r5, lr}
 8018fe0:	d10c      	bne.n	8018ffc <__mcmp+0x24>
 8018fe2:	0092      	lsls	r2, r2, #2
 8018fe4:	3014      	adds	r0, #20
 8018fe6:	3114      	adds	r1, #20
 8018fe8:	1884      	adds	r4, r0, r2
 8018fea:	4411      	add	r1, r2
 8018fec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8018ff0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8018ff4:	4295      	cmp	r5, r2
 8018ff6:	d003      	beq.n	8019000 <__mcmp+0x28>
 8018ff8:	d305      	bcc.n	8019006 <__mcmp+0x2e>
 8018ffa:	2301      	movs	r3, #1
 8018ffc:	4618      	mov	r0, r3
 8018ffe:	bd30      	pop	{r4, r5, pc}
 8019000:	42a0      	cmp	r0, r4
 8019002:	d3f3      	bcc.n	8018fec <__mcmp+0x14>
 8019004:	e7fa      	b.n	8018ffc <__mcmp+0x24>
 8019006:	f04f 33ff 	mov.w	r3, #4294967295
 801900a:	e7f7      	b.n	8018ffc <__mcmp+0x24>

0801900c <__mdiff>:
 801900c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019010:	460d      	mov	r5, r1
 8019012:	4607      	mov	r7, r0
 8019014:	4611      	mov	r1, r2
 8019016:	4628      	mov	r0, r5
 8019018:	4614      	mov	r4, r2
 801901a:	f7ff ffdd 	bl	8018fd8 <__mcmp>
 801901e:	1e06      	subs	r6, r0, #0
 8019020:	d108      	bne.n	8019034 <__mdiff+0x28>
 8019022:	4631      	mov	r1, r6
 8019024:	4638      	mov	r0, r7
 8019026:	f7ff fd83 	bl	8018b30 <_Balloc>
 801902a:	2301      	movs	r3, #1
 801902c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8019030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019034:	bfa4      	itt	ge
 8019036:	4623      	movge	r3, r4
 8019038:	462c      	movge	r4, r5
 801903a:	4638      	mov	r0, r7
 801903c:	6861      	ldr	r1, [r4, #4]
 801903e:	bfa6      	itte	ge
 8019040:	461d      	movge	r5, r3
 8019042:	2600      	movge	r6, #0
 8019044:	2601      	movlt	r6, #1
 8019046:	f7ff fd73 	bl	8018b30 <_Balloc>
 801904a:	692b      	ldr	r3, [r5, #16]
 801904c:	60c6      	str	r6, [r0, #12]
 801904e:	6926      	ldr	r6, [r4, #16]
 8019050:	f105 0914 	add.w	r9, r5, #20
 8019054:	f104 0214 	add.w	r2, r4, #20
 8019058:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 801905c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8019060:	f100 0514 	add.w	r5, r0, #20
 8019064:	f04f 0e00 	mov.w	lr, #0
 8019068:	f852 ab04 	ldr.w	sl, [r2], #4
 801906c:	f859 4b04 	ldr.w	r4, [r9], #4
 8019070:	fa1e f18a 	uxtah	r1, lr, sl
 8019074:	b2a3      	uxth	r3, r4
 8019076:	1ac9      	subs	r1, r1, r3
 8019078:	0c23      	lsrs	r3, r4, #16
 801907a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801907e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8019082:	b289      	uxth	r1, r1
 8019084:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8019088:	45c8      	cmp	r8, r9
 801908a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801908e:	4694      	mov	ip, r2
 8019090:	f845 3b04 	str.w	r3, [r5], #4
 8019094:	d8e8      	bhi.n	8019068 <__mdiff+0x5c>
 8019096:	45bc      	cmp	ip, r7
 8019098:	d304      	bcc.n	80190a4 <__mdiff+0x98>
 801909a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801909e:	b183      	cbz	r3, 80190c2 <__mdiff+0xb6>
 80190a0:	6106      	str	r6, [r0, #16]
 80190a2:	e7c5      	b.n	8019030 <__mdiff+0x24>
 80190a4:	f85c 1b04 	ldr.w	r1, [ip], #4
 80190a8:	fa1e f381 	uxtah	r3, lr, r1
 80190ac:	141a      	asrs	r2, r3, #16
 80190ae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80190b2:	b29b      	uxth	r3, r3
 80190b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80190b8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80190bc:	f845 3b04 	str.w	r3, [r5], #4
 80190c0:	e7e9      	b.n	8019096 <__mdiff+0x8a>
 80190c2:	3e01      	subs	r6, #1
 80190c4:	e7e9      	b.n	801909a <__mdiff+0x8e>
	...

080190c8 <__ulp>:
 80190c8:	4b12      	ldr	r3, [pc, #72]	; (8019114 <__ulp+0x4c>)
 80190ca:	ee10 2a90 	vmov	r2, s1
 80190ce:	401a      	ands	r2, r3
 80190d0:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 80190d4:	2b00      	cmp	r3, #0
 80190d6:	dd04      	ble.n	80190e2 <__ulp+0x1a>
 80190d8:	2000      	movs	r0, #0
 80190da:	4619      	mov	r1, r3
 80190dc:	ec41 0b10 	vmov	d0, r0, r1
 80190e0:	4770      	bx	lr
 80190e2:	425b      	negs	r3, r3
 80190e4:	151b      	asrs	r3, r3, #20
 80190e6:	2b13      	cmp	r3, #19
 80190e8:	f04f 0000 	mov.w	r0, #0
 80190ec:	f04f 0100 	mov.w	r1, #0
 80190f0:	dc04      	bgt.n	80190fc <__ulp+0x34>
 80190f2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80190f6:	fa42 f103 	asr.w	r1, r2, r3
 80190fa:	e7ef      	b.n	80190dc <__ulp+0x14>
 80190fc:	3b14      	subs	r3, #20
 80190fe:	2b1e      	cmp	r3, #30
 8019100:	f04f 0201 	mov.w	r2, #1
 8019104:	bfda      	itte	le
 8019106:	f1c3 031f 	rsble	r3, r3, #31
 801910a:	fa02 f303 	lslle.w	r3, r2, r3
 801910e:	4613      	movgt	r3, r2
 8019110:	4618      	mov	r0, r3
 8019112:	e7e3      	b.n	80190dc <__ulp+0x14>
 8019114:	7ff00000 	.word	0x7ff00000

08019118 <__b2d>:
 8019118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801911a:	6905      	ldr	r5, [r0, #16]
 801911c:	f100 0714 	add.w	r7, r0, #20
 8019120:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8019124:	1f2e      	subs	r6, r5, #4
 8019126:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801912a:	4620      	mov	r0, r4
 801912c:	f7ff fdc4 	bl	8018cb8 <__hi0bits>
 8019130:	f1c0 0320 	rsb	r3, r0, #32
 8019134:	280a      	cmp	r0, #10
 8019136:	600b      	str	r3, [r1, #0]
 8019138:	f8df c074 	ldr.w	ip, [pc, #116]	; 80191b0 <__b2d+0x98>
 801913c:	dc14      	bgt.n	8019168 <__b2d+0x50>
 801913e:	f1c0 0e0b 	rsb	lr, r0, #11
 8019142:	fa24 f10e 	lsr.w	r1, r4, lr
 8019146:	42b7      	cmp	r7, r6
 8019148:	ea41 030c 	orr.w	r3, r1, ip
 801914c:	bf34      	ite	cc
 801914e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8019152:	2100      	movcs	r1, #0
 8019154:	3015      	adds	r0, #21
 8019156:	fa04 f000 	lsl.w	r0, r4, r0
 801915a:	fa21 f10e 	lsr.w	r1, r1, lr
 801915e:	ea40 0201 	orr.w	r2, r0, r1
 8019162:	ec43 2b10 	vmov	d0, r2, r3
 8019166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019168:	42b7      	cmp	r7, r6
 801916a:	bf3a      	itte	cc
 801916c:	f1a5 0608 	subcc.w	r6, r5, #8
 8019170:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8019174:	2100      	movcs	r1, #0
 8019176:	380b      	subs	r0, #11
 8019178:	d015      	beq.n	80191a6 <__b2d+0x8e>
 801917a:	4084      	lsls	r4, r0
 801917c:	f1c0 0520 	rsb	r5, r0, #32
 8019180:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8019184:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8019188:	42be      	cmp	r6, r7
 801918a:	fa21 fc05 	lsr.w	ip, r1, r5
 801918e:	ea44 030c 	orr.w	r3, r4, ip
 8019192:	bf8c      	ite	hi
 8019194:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8019198:	2400      	movls	r4, #0
 801919a:	fa01 f000 	lsl.w	r0, r1, r0
 801919e:	40ec      	lsrs	r4, r5
 80191a0:	ea40 0204 	orr.w	r2, r0, r4
 80191a4:	e7dd      	b.n	8019162 <__b2d+0x4a>
 80191a6:	ea44 030c 	orr.w	r3, r4, ip
 80191aa:	460a      	mov	r2, r1
 80191ac:	e7d9      	b.n	8019162 <__b2d+0x4a>
 80191ae:	bf00      	nop
 80191b0:	3ff00000 	.word	0x3ff00000

080191b4 <__d2b>:
 80191b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80191b8:	460e      	mov	r6, r1
 80191ba:	2101      	movs	r1, #1
 80191bc:	ec59 8b10 	vmov	r8, r9, d0
 80191c0:	4615      	mov	r5, r2
 80191c2:	f7ff fcb5 	bl	8018b30 <_Balloc>
 80191c6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80191ca:	4607      	mov	r7, r0
 80191cc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80191d0:	bb34      	cbnz	r4, 8019220 <__d2b+0x6c>
 80191d2:	9301      	str	r3, [sp, #4]
 80191d4:	f1b8 0300 	subs.w	r3, r8, #0
 80191d8:	d027      	beq.n	801922a <__d2b+0x76>
 80191da:	a802      	add	r0, sp, #8
 80191dc:	f840 3d08 	str.w	r3, [r0, #-8]!
 80191e0:	f7ff fd89 	bl	8018cf6 <__lo0bits>
 80191e4:	9900      	ldr	r1, [sp, #0]
 80191e6:	b1f0      	cbz	r0, 8019226 <__d2b+0x72>
 80191e8:	9a01      	ldr	r2, [sp, #4]
 80191ea:	f1c0 0320 	rsb	r3, r0, #32
 80191ee:	fa02 f303 	lsl.w	r3, r2, r3
 80191f2:	430b      	orrs	r3, r1
 80191f4:	40c2      	lsrs	r2, r0
 80191f6:	617b      	str	r3, [r7, #20]
 80191f8:	9201      	str	r2, [sp, #4]
 80191fa:	9b01      	ldr	r3, [sp, #4]
 80191fc:	61bb      	str	r3, [r7, #24]
 80191fe:	2b00      	cmp	r3, #0
 8019200:	bf14      	ite	ne
 8019202:	2102      	movne	r1, #2
 8019204:	2101      	moveq	r1, #1
 8019206:	6139      	str	r1, [r7, #16]
 8019208:	b1c4      	cbz	r4, 801923c <__d2b+0x88>
 801920a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801920e:	4404      	add	r4, r0
 8019210:	6034      	str	r4, [r6, #0]
 8019212:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8019216:	6028      	str	r0, [r5, #0]
 8019218:	4638      	mov	r0, r7
 801921a:	b003      	add	sp, #12
 801921c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019220:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019224:	e7d5      	b.n	80191d2 <__d2b+0x1e>
 8019226:	6179      	str	r1, [r7, #20]
 8019228:	e7e7      	b.n	80191fa <__d2b+0x46>
 801922a:	a801      	add	r0, sp, #4
 801922c:	f7ff fd63 	bl	8018cf6 <__lo0bits>
 8019230:	9b01      	ldr	r3, [sp, #4]
 8019232:	617b      	str	r3, [r7, #20]
 8019234:	2101      	movs	r1, #1
 8019236:	6139      	str	r1, [r7, #16]
 8019238:	3020      	adds	r0, #32
 801923a:	e7e5      	b.n	8019208 <__d2b+0x54>
 801923c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8019240:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8019244:	6030      	str	r0, [r6, #0]
 8019246:	6918      	ldr	r0, [r3, #16]
 8019248:	f7ff fd36 	bl	8018cb8 <__hi0bits>
 801924c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8019250:	e7e1      	b.n	8019216 <__d2b+0x62>

08019252 <__ratio>:
 8019252:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019256:	4688      	mov	r8, r1
 8019258:	4669      	mov	r1, sp
 801925a:	4681      	mov	r9, r0
 801925c:	f7ff ff5c 	bl	8019118 <__b2d>
 8019260:	a901      	add	r1, sp, #4
 8019262:	4640      	mov	r0, r8
 8019264:	ec57 6b10 	vmov	r6, r7, d0
 8019268:	f7ff ff56 	bl	8019118 <__b2d>
 801926c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019270:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8019274:	eba3 0c02 	sub.w	ip, r3, r2
 8019278:	e9dd 3200 	ldrd	r3, r2, [sp]
 801927c:	1a9b      	subs	r3, r3, r2
 801927e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8019282:	ec5b ab10 	vmov	sl, fp, d0
 8019286:	2b00      	cmp	r3, #0
 8019288:	bfce      	itee	gt
 801928a:	463a      	movgt	r2, r7
 801928c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8019290:	465a      	movle	r2, fp
 8019292:	4659      	mov	r1, fp
 8019294:	463d      	mov	r5, r7
 8019296:	bfd4      	ite	le
 8019298:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 801929c:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 80192a0:	4630      	mov	r0, r6
 80192a2:	ee10 2a10 	vmov	r2, s0
 80192a6:	460b      	mov	r3, r1
 80192a8:	4629      	mov	r1, r5
 80192aa:	f7e7 fadf 	bl	800086c <__aeabi_ddiv>
 80192ae:	ec41 0b10 	vmov	d0, r0, r1
 80192b2:	b003      	add	sp, #12
 80192b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080192b8 <__copybits>:
 80192b8:	3901      	subs	r1, #1
 80192ba:	b510      	push	{r4, lr}
 80192bc:	1149      	asrs	r1, r1, #5
 80192be:	6914      	ldr	r4, [r2, #16]
 80192c0:	3101      	adds	r1, #1
 80192c2:	f102 0314 	add.w	r3, r2, #20
 80192c6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80192ca:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80192ce:	42a3      	cmp	r3, r4
 80192d0:	4602      	mov	r2, r0
 80192d2:	d303      	bcc.n	80192dc <__copybits+0x24>
 80192d4:	2300      	movs	r3, #0
 80192d6:	428a      	cmp	r2, r1
 80192d8:	d305      	bcc.n	80192e6 <__copybits+0x2e>
 80192da:	bd10      	pop	{r4, pc}
 80192dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80192e0:	f840 2b04 	str.w	r2, [r0], #4
 80192e4:	e7f3      	b.n	80192ce <__copybits+0x16>
 80192e6:	f842 3b04 	str.w	r3, [r2], #4
 80192ea:	e7f4      	b.n	80192d6 <__copybits+0x1e>

080192ec <__any_on>:
 80192ec:	f100 0214 	add.w	r2, r0, #20
 80192f0:	6900      	ldr	r0, [r0, #16]
 80192f2:	114b      	asrs	r3, r1, #5
 80192f4:	4298      	cmp	r0, r3
 80192f6:	b510      	push	{r4, lr}
 80192f8:	db11      	blt.n	801931e <__any_on+0x32>
 80192fa:	dd0a      	ble.n	8019312 <__any_on+0x26>
 80192fc:	f011 011f 	ands.w	r1, r1, #31
 8019300:	d007      	beq.n	8019312 <__any_on+0x26>
 8019302:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8019306:	fa24 f001 	lsr.w	r0, r4, r1
 801930a:	fa00 f101 	lsl.w	r1, r0, r1
 801930e:	428c      	cmp	r4, r1
 8019310:	d10b      	bne.n	801932a <__any_on+0x3e>
 8019312:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019316:	4293      	cmp	r3, r2
 8019318:	d803      	bhi.n	8019322 <__any_on+0x36>
 801931a:	2000      	movs	r0, #0
 801931c:	bd10      	pop	{r4, pc}
 801931e:	4603      	mov	r3, r0
 8019320:	e7f7      	b.n	8019312 <__any_on+0x26>
 8019322:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8019326:	2900      	cmp	r1, #0
 8019328:	d0f5      	beq.n	8019316 <__any_on+0x2a>
 801932a:	2001      	movs	r0, #1
 801932c:	e7f6      	b.n	801931c <__any_on+0x30>

0801932e <_calloc_r>:
 801932e:	b538      	push	{r3, r4, r5, lr}
 8019330:	fb02 f401 	mul.w	r4, r2, r1
 8019334:	4621      	mov	r1, r4
 8019336:	f7fc fc6d 	bl	8015c14 <_malloc_r>
 801933a:	4605      	mov	r5, r0
 801933c:	b118      	cbz	r0, 8019346 <_calloc_r+0x18>
 801933e:	4622      	mov	r2, r4
 8019340:	2100      	movs	r1, #0
 8019342:	f7fc fc11 	bl	8015b68 <memset>
 8019346:	4628      	mov	r0, r5
 8019348:	bd38      	pop	{r3, r4, r5, pc}

0801934a <__ssputs_r>:
 801934a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801934e:	688e      	ldr	r6, [r1, #8]
 8019350:	429e      	cmp	r6, r3
 8019352:	4682      	mov	sl, r0
 8019354:	460c      	mov	r4, r1
 8019356:	4690      	mov	r8, r2
 8019358:	4699      	mov	r9, r3
 801935a:	d837      	bhi.n	80193cc <__ssputs_r+0x82>
 801935c:	898a      	ldrh	r2, [r1, #12]
 801935e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019362:	d031      	beq.n	80193c8 <__ssputs_r+0x7e>
 8019364:	6825      	ldr	r5, [r4, #0]
 8019366:	6909      	ldr	r1, [r1, #16]
 8019368:	1a6f      	subs	r7, r5, r1
 801936a:	6965      	ldr	r5, [r4, #20]
 801936c:	2302      	movs	r3, #2
 801936e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019372:	fb95 f5f3 	sdiv	r5, r5, r3
 8019376:	f109 0301 	add.w	r3, r9, #1
 801937a:	443b      	add	r3, r7
 801937c:	429d      	cmp	r5, r3
 801937e:	bf38      	it	cc
 8019380:	461d      	movcc	r5, r3
 8019382:	0553      	lsls	r3, r2, #21
 8019384:	d530      	bpl.n	80193e8 <__ssputs_r+0x9e>
 8019386:	4629      	mov	r1, r5
 8019388:	f7fc fc44 	bl	8015c14 <_malloc_r>
 801938c:	4606      	mov	r6, r0
 801938e:	b950      	cbnz	r0, 80193a6 <__ssputs_r+0x5c>
 8019390:	230c      	movs	r3, #12
 8019392:	f8ca 3000 	str.w	r3, [sl]
 8019396:	89a3      	ldrh	r3, [r4, #12]
 8019398:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801939c:	81a3      	strh	r3, [r4, #12]
 801939e:	f04f 30ff 	mov.w	r0, #4294967295
 80193a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80193a6:	463a      	mov	r2, r7
 80193a8:	6921      	ldr	r1, [r4, #16]
 80193aa:	f7fc fbb9 	bl	8015b20 <memcpy>
 80193ae:	89a3      	ldrh	r3, [r4, #12]
 80193b0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80193b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80193b8:	81a3      	strh	r3, [r4, #12]
 80193ba:	6126      	str	r6, [r4, #16]
 80193bc:	6165      	str	r5, [r4, #20]
 80193be:	443e      	add	r6, r7
 80193c0:	1bed      	subs	r5, r5, r7
 80193c2:	6026      	str	r6, [r4, #0]
 80193c4:	60a5      	str	r5, [r4, #8]
 80193c6:	464e      	mov	r6, r9
 80193c8:	454e      	cmp	r6, r9
 80193ca:	d900      	bls.n	80193ce <__ssputs_r+0x84>
 80193cc:	464e      	mov	r6, r9
 80193ce:	4632      	mov	r2, r6
 80193d0:	4641      	mov	r1, r8
 80193d2:	6820      	ldr	r0, [r4, #0]
 80193d4:	f7fc fbaf 	bl	8015b36 <memmove>
 80193d8:	68a3      	ldr	r3, [r4, #8]
 80193da:	1b9b      	subs	r3, r3, r6
 80193dc:	60a3      	str	r3, [r4, #8]
 80193de:	6823      	ldr	r3, [r4, #0]
 80193e0:	441e      	add	r6, r3
 80193e2:	6026      	str	r6, [r4, #0]
 80193e4:	2000      	movs	r0, #0
 80193e6:	e7dc      	b.n	80193a2 <__ssputs_r+0x58>
 80193e8:	462a      	mov	r2, r5
 80193ea:	f000 fd1a 	bl	8019e22 <_realloc_r>
 80193ee:	4606      	mov	r6, r0
 80193f0:	2800      	cmp	r0, #0
 80193f2:	d1e2      	bne.n	80193ba <__ssputs_r+0x70>
 80193f4:	6921      	ldr	r1, [r4, #16]
 80193f6:	4650      	mov	r0, sl
 80193f8:	f7fc fbbe 	bl	8015b78 <_free_r>
 80193fc:	e7c8      	b.n	8019390 <__ssputs_r+0x46>
	...

08019400 <_svfiprintf_r>:
 8019400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019404:	461d      	mov	r5, r3
 8019406:	898b      	ldrh	r3, [r1, #12]
 8019408:	061f      	lsls	r7, r3, #24
 801940a:	b09d      	sub	sp, #116	; 0x74
 801940c:	4680      	mov	r8, r0
 801940e:	460c      	mov	r4, r1
 8019410:	4616      	mov	r6, r2
 8019412:	d50f      	bpl.n	8019434 <_svfiprintf_r+0x34>
 8019414:	690b      	ldr	r3, [r1, #16]
 8019416:	b96b      	cbnz	r3, 8019434 <_svfiprintf_r+0x34>
 8019418:	2140      	movs	r1, #64	; 0x40
 801941a:	f7fc fbfb 	bl	8015c14 <_malloc_r>
 801941e:	6020      	str	r0, [r4, #0]
 8019420:	6120      	str	r0, [r4, #16]
 8019422:	b928      	cbnz	r0, 8019430 <_svfiprintf_r+0x30>
 8019424:	230c      	movs	r3, #12
 8019426:	f8c8 3000 	str.w	r3, [r8]
 801942a:	f04f 30ff 	mov.w	r0, #4294967295
 801942e:	e0c8      	b.n	80195c2 <_svfiprintf_r+0x1c2>
 8019430:	2340      	movs	r3, #64	; 0x40
 8019432:	6163      	str	r3, [r4, #20]
 8019434:	2300      	movs	r3, #0
 8019436:	9309      	str	r3, [sp, #36]	; 0x24
 8019438:	2320      	movs	r3, #32
 801943a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801943e:	2330      	movs	r3, #48	; 0x30
 8019440:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019444:	9503      	str	r5, [sp, #12]
 8019446:	f04f 0b01 	mov.w	fp, #1
 801944a:	4637      	mov	r7, r6
 801944c:	463d      	mov	r5, r7
 801944e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8019452:	b10b      	cbz	r3, 8019458 <_svfiprintf_r+0x58>
 8019454:	2b25      	cmp	r3, #37	; 0x25
 8019456:	d13e      	bne.n	80194d6 <_svfiprintf_r+0xd6>
 8019458:	ebb7 0a06 	subs.w	sl, r7, r6
 801945c:	d00b      	beq.n	8019476 <_svfiprintf_r+0x76>
 801945e:	4653      	mov	r3, sl
 8019460:	4632      	mov	r2, r6
 8019462:	4621      	mov	r1, r4
 8019464:	4640      	mov	r0, r8
 8019466:	f7ff ff70 	bl	801934a <__ssputs_r>
 801946a:	3001      	adds	r0, #1
 801946c:	f000 80a4 	beq.w	80195b8 <_svfiprintf_r+0x1b8>
 8019470:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019472:	4453      	add	r3, sl
 8019474:	9309      	str	r3, [sp, #36]	; 0x24
 8019476:	783b      	ldrb	r3, [r7, #0]
 8019478:	2b00      	cmp	r3, #0
 801947a:	f000 809d 	beq.w	80195b8 <_svfiprintf_r+0x1b8>
 801947e:	2300      	movs	r3, #0
 8019480:	f04f 32ff 	mov.w	r2, #4294967295
 8019484:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019488:	9304      	str	r3, [sp, #16]
 801948a:	9307      	str	r3, [sp, #28]
 801948c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019490:	931a      	str	r3, [sp, #104]	; 0x68
 8019492:	462f      	mov	r7, r5
 8019494:	2205      	movs	r2, #5
 8019496:	f817 1b01 	ldrb.w	r1, [r7], #1
 801949a:	4850      	ldr	r0, [pc, #320]	; (80195dc <_svfiprintf_r+0x1dc>)
 801949c:	f7e6 feb0 	bl	8000200 <memchr>
 80194a0:	9b04      	ldr	r3, [sp, #16]
 80194a2:	b9d0      	cbnz	r0, 80194da <_svfiprintf_r+0xda>
 80194a4:	06d9      	lsls	r1, r3, #27
 80194a6:	bf44      	itt	mi
 80194a8:	2220      	movmi	r2, #32
 80194aa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80194ae:	071a      	lsls	r2, r3, #28
 80194b0:	bf44      	itt	mi
 80194b2:	222b      	movmi	r2, #43	; 0x2b
 80194b4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80194b8:	782a      	ldrb	r2, [r5, #0]
 80194ba:	2a2a      	cmp	r2, #42	; 0x2a
 80194bc:	d015      	beq.n	80194ea <_svfiprintf_r+0xea>
 80194be:	9a07      	ldr	r2, [sp, #28]
 80194c0:	462f      	mov	r7, r5
 80194c2:	2000      	movs	r0, #0
 80194c4:	250a      	movs	r5, #10
 80194c6:	4639      	mov	r1, r7
 80194c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80194cc:	3b30      	subs	r3, #48	; 0x30
 80194ce:	2b09      	cmp	r3, #9
 80194d0:	d94d      	bls.n	801956e <_svfiprintf_r+0x16e>
 80194d2:	b1b8      	cbz	r0, 8019504 <_svfiprintf_r+0x104>
 80194d4:	e00f      	b.n	80194f6 <_svfiprintf_r+0xf6>
 80194d6:	462f      	mov	r7, r5
 80194d8:	e7b8      	b.n	801944c <_svfiprintf_r+0x4c>
 80194da:	4a40      	ldr	r2, [pc, #256]	; (80195dc <_svfiprintf_r+0x1dc>)
 80194dc:	1a80      	subs	r0, r0, r2
 80194de:	fa0b f000 	lsl.w	r0, fp, r0
 80194e2:	4318      	orrs	r0, r3
 80194e4:	9004      	str	r0, [sp, #16]
 80194e6:	463d      	mov	r5, r7
 80194e8:	e7d3      	b.n	8019492 <_svfiprintf_r+0x92>
 80194ea:	9a03      	ldr	r2, [sp, #12]
 80194ec:	1d11      	adds	r1, r2, #4
 80194ee:	6812      	ldr	r2, [r2, #0]
 80194f0:	9103      	str	r1, [sp, #12]
 80194f2:	2a00      	cmp	r2, #0
 80194f4:	db01      	blt.n	80194fa <_svfiprintf_r+0xfa>
 80194f6:	9207      	str	r2, [sp, #28]
 80194f8:	e004      	b.n	8019504 <_svfiprintf_r+0x104>
 80194fa:	4252      	negs	r2, r2
 80194fc:	f043 0302 	orr.w	r3, r3, #2
 8019500:	9207      	str	r2, [sp, #28]
 8019502:	9304      	str	r3, [sp, #16]
 8019504:	783b      	ldrb	r3, [r7, #0]
 8019506:	2b2e      	cmp	r3, #46	; 0x2e
 8019508:	d10c      	bne.n	8019524 <_svfiprintf_r+0x124>
 801950a:	787b      	ldrb	r3, [r7, #1]
 801950c:	2b2a      	cmp	r3, #42	; 0x2a
 801950e:	d133      	bne.n	8019578 <_svfiprintf_r+0x178>
 8019510:	9b03      	ldr	r3, [sp, #12]
 8019512:	1d1a      	adds	r2, r3, #4
 8019514:	681b      	ldr	r3, [r3, #0]
 8019516:	9203      	str	r2, [sp, #12]
 8019518:	2b00      	cmp	r3, #0
 801951a:	bfb8      	it	lt
 801951c:	f04f 33ff 	movlt.w	r3, #4294967295
 8019520:	3702      	adds	r7, #2
 8019522:	9305      	str	r3, [sp, #20]
 8019524:	4d2e      	ldr	r5, [pc, #184]	; (80195e0 <_svfiprintf_r+0x1e0>)
 8019526:	7839      	ldrb	r1, [r7, #0]
 8019528:	2203      	movs	r2, #3
 801952a:	4628      	mov	r0, r5
 801952c:	f7e6 fe68 	bl	8000200 <memchr>
 8019530:	b138      	cbz	r0, 8019542 <_svfiprintf_r+0x142>
 8019532:	2340      	movs	r3, #64	; 0x40
 8019534:	1b40      	subs	r0, r0, r5
 8019536:	fa03 f000 	lsl.w	r0, r3, r0
 801953a:	9b04      	ldr	r3, [sp, #16]
 801953c:	4303      	orrs	r3, r0
 801953e:	3701      	adds	r7, #1
 8019540:	9304      	str	r3, [sp, #16]
 8019542:	7839      	ldrb	r1, [r7, #0]
 8019544:	4827      	ldr	r0, [pc, #156]	; (80195e4 <_svfiprintf_r+0x1e4>)
 8019546:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801954a:	2206      	movs	r2, #6
 801954c:	1c7e      	adds	r6, r7, #1
 801954e:	f7e6 fe57 	bl	8000200 <memchr>
 8019552:	2800      	cmp	r0, #0
 8019554:	d038      	beq.n	80195c8 <_svfiprintf_r+0x1c8>
 8019556:	4b24      	ldr	r3, [pc, #144]	; (80195e8 <_svfiprintf_r+0x1e8>)
 8019558:	bb13      	cbnz	r3, 80195a0 <_svfiprintf_r+0x1a0>
 801955a:	9b03      	ldr	r3, [sp, #12]
 801955c:	3307      	adds	r3, #7
 801955e:	f023 0307 	bic.w	r3, r3, #7
 8019562:	3308      	adds	r3, #8
 8019564:	9303      	str	r3, [sp, #12]
 8019566:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019568:	444b      	add	r3, r9
 801956a:	9309      	str	r3, [sp, #36]	; 0x24
 801956c:	e76d      	b.n	801944a <_svfiprintf_r+0x4a>
 801956e:	fb05 3202 	mla	r2, r5, r2, r3
 8019572:	2001      	movs	r0, #1
 8019574:	460f      	mov	r7, r1
 8019576:	e7a6      	b.n	80194c6 <_svfiprintf_r+0xc6>
 8019578:	2300      	movs	r3, #0
 801957a:	3701      	adds	r7, #1
 801957c:	9305      	str	r3, [sp, #20]
 801957e:	4619      	mov	r1, r3
 8019580:	250a      	movs	r5, #10
 8019582:	4638      	mov	r0, r7
 8019584:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019588:	3a30      	subs	r2, #48	; 0x30
 801958a:	2a09      	cmp	r2, #9
 801958c:	d903      	bls.n	8019596 <_svfiprintf_r+0x196>
 801958e:	2b00      	cmp	r3, #0
 8019590:	d0c8      	beq.n	8019524 <_svfiprintf_r+0x124>
 8019592:	9105      	str	r1, [sp, #20]
 8019594:	e7c6      	b.n	8019524 <_svfiprintf_r+0x124>
 8019596:	fb05 2101 	mla	r1, r5, r1, r2
 801959a:	2301      	movs	r3, #1
 801959c:	4607      	mov	r7, r0
 801959e:	e7f0      	b.n	8019582 <_svfiprintf_r+0x182>
 80195a0:	ab03      	add	r3, sp, #12
 80195a2:	9300      	str	r3, [sp, #0]
 80195a4:	4622      	mov	r2, r4
 80195a6:	4b11      	ldr	r3, [pc, #68]	; (80195ec <_svfiprintf_r+0x1ec>)
 80195a8:	a904      	add	r1, sp, #16
 80195aa:	4640      	mov	r0, r8
 80195ac:	f7fc fc20 	bl	8015df0 <_printf_float>
 80195b0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80195b4:	4681      	mov	r9, r0
 80195b6:	d1d6      	bne.n	8019566 <_svfiprintf_r+0x166>
 80195b8:	89a3      	ldrh	r3, [r4, #12]
 80195ba:	065b      	lsls	r3, r3, #25
 80195bc:	f53f af35 	bmi.w	801942a <_svfiprintf_r+0x2a>
 80195c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80195c2:	b01d      	add	sp, #116	; 0x74
 80195c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80195c8:	ab03      	add	r3, sp, #12
 80195ca:	9300      	str	r3, [sp, #0]
 80195cc:	4622      	mov	r2, r4
 80195ce:	4b07      	ldr	r3, [pc, #28]	; (80195ec <_svfiprintf_r+0x1ec>)
 80195d0:	a904      	add	r1, sp, #16
 80195d2:	4640      	mov	r0, r8
 80195d4:	f7fc fec2 	bl	801635c <_printf_i>
 80195d8:	e7ea      	b.n	80195b0 <_svfiprintf_r+0x1b0>
 80195da:	bf00      	nop
 80195dc:	0801c01c 	.word	0x0801c01c
 80195e0:	0801c022 	.word	0x0801c022
 80195e4:	0801c026 	.word	0x0801c026
 80195e8:	08015df1 	.word	0x08015df1
 80195ec:	0801934b 	.word	0x0801934b

080195f0 <_sungetc_r>:
 80195f0:	b538      	push	{r3, r4, r5, lr}
 80195f2:	1c4b      	adds	r3, r1, #1
 80195f4:	4614      	mov	r4, r2
 80195f6:	d103      	bne.n	8019600 <_sungetc_r+0x10>
 80195f8:	f04f 35ff 	mov.w	r5, #4294967295
 80195fc:	4628      	mov	r0, r5
 80195fe:	bd38      	pop	{r3, r4, r5, pc}
 8019600:	8993      	ldrh	r3, [r2, #12]
 8019602:	f023 0320 	bic.w	r3, r3, #32
 8019606:	8193      	strh	r3, [r2, #12]
 8019608:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801960a:	6852      	ldr	r2, [r2, #4]
 801960c:	b2cd      	uxtb	r5, r1
 801960e:	b18b      	cbz	r3, 8019634 <_sungetc_r+0x44>
 8019610:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8019612:	4293      	cmp	r3, r2
 8019614:	dd08      	ble.n	8019628 <_sungetc_r+0x38>
 8019616:	6823      	ldr	r3, [r4, #0]
 8019618:	1e5a      	subs	r2, r3, #1
 801961a:	6022      	str	r2, [r4, #0]
 801961c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8019620:	6863      	ldr	r3, [r4, #4]
 8019622:	3301      	adds	r3, #1
 8019624:	6063      	str	r3, [r4, #4]
 8019626:	e7e9      	b.n	80195fc <_sungetc_r+0xc>
 8019628:	4621      	mov	r1, r4
 801962a:	f000 fbb3 	bl	8019d94 <__submore>
 801962e:	2800      	cmp	r0, #0
 8019630:	d0f1      	beq.n	8019616 <_sungetc_r+0x26>
 8019632:	e7e1      	b.n	80195f8 <_sungetc_r+0x8>
 8019634:	6921      	ldr	r1, [r4, #16]
 8019636:	6823      	ldr	r3, [r4, #0]
 8019638:	b151      	cbz	r1, 8019650 <_sungetc_r+0x60>
 801963a:	4299      	cmp	r1, r3
 801963c:	d208      	bcs.n	8019650 <_sungetc_r+0x60>
 801963e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8019642:	42a9      	cmp	r1, r5
 8019644:	d104      	bne.n	8019650 <_sungetc_r+0x60>
 8019646:	3b01      	subs	r3, #1
 8019648:	3201      	adds	r2, #1
 801964a:	6023      	str	r3, [r4, #0]
 801964c:	6062      	str	r2, [r4, #4]
 801964e:	e7d5      	b.n	80195fc <_sungetc_r+0xc>
 8019650:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8019654:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019658:	6363      	str	r3, [r4, #52]	; 0x34
 801965a:	2303      	movs	r3, #3
 801965c:	63a3      	str	r3, [r4, #56]	; 0x38
 801965e:	4623      	mov	r3, r4
 8019660:	f803 5f46 	strb.w	r5, [r3, #70]!
 8019664:	6023      	str	r3, [r4, #0]
 8019666:	2301      	movs	r3, #1
 8019668:	e7dc      	b.n	8019624 <_sungetc_r+0x34>

0801966a <__ssrefill_r>:
 801966a:	b510      	push	{r4, lr}
 801966c:	460c      	mov	r4, r1
 801966e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8019670:	b169      	cbz	r1, 801968e <__ssrefill_r+0x24>
 8019672:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019676:	4299      	cmp	r1, r3
 8019678:	d001      	beq.n	801967e <__ssrefill_r+0x14>
 801967a:	f7fc fa7d 	bl	8015b78 <_free_r>
 801967e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019680:	6063      	str	r3, [r4, #4]
 8019682:	2000      	movs	r0, #0
 8019684:	6360      	str	r0, [r4, #52]	; 0x34
 8019686:	b113      	cbz	r3, 801968e <__ssrefill_r+0x24>
 8019688:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801968a:	6023      	str	r3, [r4, #0]
 801968c:	bd10      	pop	{r4, pc}
 801968e:	6923      	ldr	r3, [r4, #16]
 8019690:	6023      	str	r3, [r4, #0]
 8019692:	2300      	movs	r3, #0
 8019694:	6063      	str	r3, [r4, #4]
 8019696:	89a3      	ldrh	r3, [r4, #12]
 8019698:	f043 0320 	orr.w	r3, r3, #32
 801969c:	81a3      	strh	r3, [r4, #12]
 801969e:	f04f 30ff 	mov.w	r0, #4294967295
 80196a2:	e7f3      	b.n	801968c <__ssrefill_r+0x22>

080196a4 <__ssvfiscanf_r>:
 80196a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80196a8:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80196ac:	460c      	mov	r4, r1
 80196ae:	2100      	movs	r1, #0
 80196b0:	9144      	str	r1, [sp, #272]	; 0x110
 80196b2:	9145      	str	r1, [sp, #276]	; 0x114
 80196b4:	499f      	ldr	r1, [pc, #636]	; (8019934 <__ssvfiscanf_r+0x290>)
 80196b6:	91a0      	str	r1, [sp, #640]	; 0x280
 80196b8:	f10d 0804 	add.w	r8, sp, #4
 80196bc:	499e      	ldr	r1, [pc, #632]	; (8019938 <__ssvfiscanf_r+0x294>)
 80196be:	f8df 927c 	ldr.w	r9, [pc, #636]	; 801993c <__ssvfiscanf_r+0x298>
 80196c2:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80196c6:	4606      	mov	r6, r0
 80196c8:	4692      	mov	sl, r2
 80196ca:	91a1      	str	r1, [sp, #644]	; 0x284
 80196cc:	9300      	str	r3, [sp, #0]
 80196ce:	270a      	movs	r7, #10
 80196d0:	f89a 3000 	ldrb.w	r3, [sl]
 80196d4:	2b00      	cmp	r3, #0
 80196d6:	f000 812a 	beq.w	801992e <__ssvfiscanf_r+0x28a>
 80196da:	4655      	mov	r5, sl
 80196dc:	f7ff f9f6 	bl	8018acc <__locale_ctype_ptr>
 80196e0:	f815 bb01 	ldrb.w	fp, [r5], #1
 80196e4:	4458      	add	r0, fp
 80196e6:	7843      	ldrb	r3, [r0, #1]
 80196e8:	f013 0308 	ands.w	r3, r3, #8
 80196ec:	d01c      	beq.n	8019728 <__ssvfiscanf_r+0x84>
 80196ee:	6863      	ldr	r3, [r4, #4]
 80196f0:	2b00      	cmp	r3, #0
 80196f2:	dd12      	ble.n	801971a <__ssvfiscanf_r+0x76>
 80196f4:	f7ff f9ea 	bl	8018acc <__locale_ctype_ptr>
 80196f8:	6823      	ldr	r3, [r4, #0]
 80196fa:	781a      	ldrb	r2, [r3, #0]
 80196fc:	4410      	add	r0, r2
 80196fe:	7842      	ldrb	r2, [r0, #1]
 8019700:	0712      	lsls	r2, r2, #28
 8019702:	d401      	bmi.n	8019708 <__ssvfiscanf_r+0x64>
 8019704:	46aa      	mov	sl, r5
 8019706:	e7e3      	b.n	80196d0 <__ssvfiscanf_r+0x2c>
 8019708:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801970a:	3201      	adds	r2, #1
 801970c:	9245      	str	r2, [sp, #276]	; 0x114
 801970e:	6862      	ldr	r2, [r4, #4]
 8019710:	3301      	adds	r3, #1
 8019712:	3a01      	subs	r2, #1
 8019714:	6062      	str	r2, [r4, #4]
 8019716:	6023      	str	r3, [r4, #0]
 8019718:	e7e9      	b.n	80196ee <__ssvfiscanf_r+0x4a>
 801971a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801971c:	4621      	mov	r1, r4
 801971e:	4630      	mov	r0, r6
 8019720:	4798      	blx	r3
 8019722:	2800      	cmp	r0, #0
 8019724:	d0e6      	beq.n	80196f4 <__ssvfiscanf_r+0x50>
 8019726:	e7ed      	b.n	8019704 <__ssvfiscanf_r+0x60>
 8019728:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 801972c:	f040 8082 	bne.w	8019834 <__ssvfiscanf_r+0x190>
 8019730:	9343      	str	r3, [sp, #268]	; 0x10c
 8019732:	9341      	str	r3, [sp, #260]	; 0x104
 8019734:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8019738:	2b2a      	cmp	r3, #42	; 0x2a
 801973a:	d103      	bne.n	8019744 <__ssvfiscanf_r+0xa0>
 801973c:	2310      	movs	r3, #16
 801973e:	9341      	str	r3, [sp, #260]	; 0x104
 8019740:	f10a 0502 	add.w	r5, sl, #2
 8019744:	46aa      	mov	sl, r5
 8019746:	f815 1b01 	ldrb.w	r1, [r5], #1
 801974a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 801974e:	2a09      	cmp	r2, #9
 8019750:	d922      	bls.n	8019798 <__ssvfiscanf_r+0xf4>
 8019752:	2203      	movs	r2, #3
 8019754:	4879      	ldr	r0, [pc, #484]	; (801993c <__ssvfiscanf_r+0x298>)
 8019756:	f7e6 fd53 	bl	8000200 <memchr>
 801975a:	b138      	cbz	r0, 801976c <__ssvfiscanf_r+0xc8>
 801975c:	eba0 0309 	sub.w	r3, r0, r9
 8019760:	2001      	movs	r0, #1
 8019762:	4098      	lsls	r0, r3
 8019764:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019766:	4318      	orrs	r0, r3
 8019768:	9041      	str	r0, [sp, #260]	; 0x104
 801976a:	46aa      	mov	sl, r5
 801976c:	f89a 3000 	ldrb.w	r3, [sl]
 8019770:	2b67      	cmp	r3, #103	; 0x67
 8019772:	f10a 0501 	add.w	r5, sl, #1
 8019776:	d82b      	bhi.n	80197d0 <__ssvfiscanf_r+0x12c>
 8019778:	2b65      	cmp	r3, #101	; 0x65
 801977a:	f080 809f 	bcs.w	80198bc <__ssvfiscanf_r+0x218>
 801977e:	2b47      	cmp	r3, #71	; 0x47
 8019780:	d810      	bhi.n	80197a4 <__ssvfiscanf_r+0x100>
 8019782:	2b45      	cmp	r3, #69	; 0x45
 8019784:	f080 809a 	bcs.w	80198bc <__ssvfiscanf_r+0x218>
 8019788:	2b00      	cmp	r3, #0
 801978a:	d06c      	beq.n	8019866 <__ssvfiscanf_r+0x1c2>
 801978c:	2b25      	cmp	r3, #37	; 0x25
 801978e:	d051      	beq.n	8019834 <__ssvfiscanf_r+0x190>
 8019790:	2303      	movs	r3, #3
 8019792:	9347      	str	r3, [sp, #284]	; 0x11c
 8019794:	9742      	str	r7, [sp, #264]	; 0x108
 8019796:	e027      	b.n	80197e8 <__ssvfiscanf_r+0x144>
 8019798:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801979a:	fb07 1303 	mla	r3, r7, r3, r1
 801979e:	3b30      	subs	r3, #48	; 0x30
 80197a0:	9343      	str	r3, [sp, #268]	; 0x10c
 80197a2:	e7cf      	b.n	8019744 <__ssvfiscanf_r+0xa0>
 80197a4:	2b5b      	cmp	r3, #91	; 0x5b
 80197a6:	d06a      	beq.n	801987e <__ssvfiscanf_r+0x1da>
 80197a8:	d80c      	bhi.n	80197c4 <__ssvfiscanf_r+0x120>
 80197aa:	2b58      	cmp	r3, #88	; 0x58
 80197ac:	d1f0      	bne.n	8019790 <__ssvfiscanf_r+0xec>
 80197ae:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80197b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80197b4:	9241      	str	r2, [sp, #260]	; 0x104
 80197b6:	2210      	movs	r2, #16
 80197b8:	9242      	str	r2, [sp, #264]	; 0x108
 80197ba:	2b6e      	cmp	r3, #110	; 0x6e
 80197bc:	bf8c      	ite	hi
 80197be:	2304      	movhi	r3, #4
 80197c0:	2303      	movls	r3, #3
 80197c2:	e010      	b.n	80197e6 <__ssvfiscanf_r+0x142>
 80197c4:	2b63      	cmp	r3, #99	; 0x63
 80197c6:	d065      	beq.n	8019894 <__ssvfiscanf_r+0x1f0>
 80197c8:	2b64      	cmp	r3, #100	; 0x64
 80197ca:	d1e1      	bne.n	8019790 <__ssvfiscanf_r+0xec>
 80197cc:	9742      	str	r7, [sp, #264]	; 0x108
 80197ce:	e7f4      	b.n	80197ba <__ssvfiscanf_r+0x116>
 80197d0:	2b70      	cmp	r3, #112	; 0x70
 80197d2:	d04b      	beq.n	801986c <__ssvfiscanf_r+0x1c8>
 80197d4:	d826      	bhi.n	8019824 <__ssvfiscanf_r+0x180>
 80197d6:	2b6e      	cmp	r3, #110	; 0x6e
 80197d8:	d062      	beq.n	80198a0 <__ssvfiscanf_r+0x1fc>
 80197da:	d84c      	bhi.n	8019876 <__ssvfiscanf_r+0x1d2>
 80197dc:	2b69      	cmp	r3, #105	; 0x69
 80197de:	d1d7      	bne.n	8019790 <__ssvfiscanf_r+0xec>
 80197e0:	2300      	movs	r3, #0
 80197e2:	9342      	str	r3, [sp, #264]	; 0x108
 80197e4:	2303      	movs	r3, #3
 80197e6:	9347      	str	r3, [sp, #284]	; 0x11c
 80197e8:	6863      	ldr	r3, [r4, #4]
 80197ea:	2b00      	cmp	r3, #0
 80197ec:	dd68      	ble.n	80198c0 <__ssvfiscanf_r+0x21c>
 80197ee:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80197f0:	0659      	lsls	r1, r3, #25
 80197f2:	d407      	bmi.n	8019804 <__ssvfiscanf_r+0x160>
 80197f4:	f7ff f96a 	bl	8018acc <__locale_ctype_ptr>
 80197f8:	6823      	ldr	r3, [r4, #0]
 80197fa:	781a      	ldrb	r2, [r3, #0]
 80197fc:	4410      	add	r0, r2
 80197fe:	7842      	ldrb	r2, [r0, #1]
 8019800:	0712      	lsls	r2, r2, #28
 8019802:	d464      	bmi.n	80198ce <__ssvfiscanf_r+0x22a>
 8019804:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8019806:	2b02      	cmp	r3, #2
 8019808:	dc73      	bgt.n	80198f2 <__ssvfiscanf_r+0x24e>
 801980a:	466b      	mov	r3, sp
 801980c:	4622      	mov	r2, r4
 801980e:	a941      	add	r1, sp, #260	; 0x104
 8019810:	4630      	mov	r0, r6
 8019812:	f000 f897 	bl	8019944 <_scanf_chars>
 8019816:	2801      	cmp	r0, #1
 8019818:	f000 8089 	beq.w	801992e <__ssvfiscanf_r+0x28a>
 801981c:	2802      	cmp	r0, #2
 801981e:	f47f af71 	bne.w	8019704 <__ssvfiscanf_r+0x60>
 8019822:	e01d      	b.n	8019860 <__ssvfiscanf_r+0x1bc>
 8019824:	2b75      	cmp	r3, #117	; 0x75
 8019826:	d0d1      	beq.n	80197cc <__ssvfiscanf_r+0x128>
 8019828:	2b78      	cmp	r3, #120	; 0x78
 801982a:	d0c0      	beq.n	80197ae <__ssvfiscanf_r+0x10a>
 801982c:	2b73      	cmp	r3, #115	; 0x73
 801982e:	d1af      	bne.n	8019790 <__ssvfiscanf_r+0xec>
 8019830:	2302      	movs	r3, #2
 8019832:	e7d8      	b.n	80197e6 <__ssvfiscanf_r+0x142>
 8019834:	6863      	ldr	r3, [r4, #4]
 8019836:	2b00      	cmp	r3, #0
 8019838:	dd0c      	ble.n	8019854 <__ssvfiscanf_r+0x1b0>
 801983a:	6823      	ldr	r3, [r4, #0]
 801983c:	781a      	ldrb	r2, [r3, #0]
 801983e:	455a      	cmp	r2, fp
 8019840:	d175      	bne.n	801992e <__ssvfiscanf_r+0x28a>
 8019842:	3301      	adds	r3, #1
 8019844:	6862      	ldr	r2, [r4, #4]
 8019846:	6023      	str	r3, [r4, #0]
 8019848:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801984a:	3a01      	subs	r2, #1
 801984c:	3301      	adds	r3, #1
 801984e:	6062      	str	r2, [r4, #4]
 8019850:	9345      	str	r3, [sp, #276]	; 0x114
 8019852:	e757      	b.n	8019704 <__ssvfiscanf_r+0x60>
 8019854:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019856:	4621      	mov	r1, r4
 8019858:	4630      	mov	r0, r6
 801985a:	4798      	blx	r3
 801985c:	2800      	cmp	r0, #0
 801985e:	d0ec      	beq.n	801983a <__ssvfiscanf_r+0x196>
 8019860:	9844      	ldr	r0, [sp, #272]	; 0x110
 8019862:	2800      	cmp	r0, #0
 8019864:	d159      	bne.n	801991a <__ssvfiscanf_r+0x276>
 8019866:	f04f 30ff 	mov.w	r0, #4294967295
 801986a:	e05c      	b.n	8019926 <__ssvfiscanf_r+0x282>
 801986c:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801986e:	f042 0220 	orr.w	r2, r2, #32
 8019872:	9241      	str	r2, [sp, #260]	; 0x104
 8019874:	e79b      	b.n	80197ae <__ssvfiscanf_r+0x10a>
 8019876:	2308      	movs	r3, #8
 8019878:	9342      	str	r3, [sp, #264]	; 0x108
 801987a:	2304      	movs	r3, #4
 801987c:	e7b3      	b.n	80197e6 <__ssvfiscanf_r+0x142>
 801987e:	4629      	mov	r1, r5
 8019880:	4640      	mov	r0, r8
 8019882:	f000 f9b7 	bl	8019bf4 <__sccl>
 8019886:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019888:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801988c:	9341      	str	r3, [sp, #260]	; 0x104
 801988e:	4605      	mov	r5, r0
 8019890:	2301      	movs	r3, #1
 8019892:	e7a8      	b.n	80197e6 <__ssvfiscanf_r+0x142>
 8019894:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019896:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801989a:	9341      	str	r3, [sp, #260]	; 0x104
 801989c:	2300      	movs	r3, #0
 801989e:	e7a2      	b.n	80197e6 <__ssvfiscanf_r+0x142>
 80198a0:	9841      	ldr	r0, [sp, #260]	; 0x104
 80198a2:	06c3      	lsls	r3, r0, #27
 80198a4:	f53f af2e 	bmi.w	8019704 <__ssvfiscanf_r+0x60>
 80198a8:	9b00      	ldr	r3, [sp, #0]
 80198aa:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80198ac:	1d19      	adds	r1, r3, #4
 80198ae:	9100      	str	r1, [sp, #0]
 80198b0:	681b      	ldr	r3, [r3, #0]
 80198b2:	07c0      	lsls	r0, r0, #31
 80198b4:	bf4c      	ite	mi
 80198b6:	801a      	strhmi	r2, [r3, #0]
 80198b8:	601a      	strpl	r2, [r3, #0]
 80198ba:	e723      	b.n	8019704 <__ssvfiscanf_r+0x60>
 80198bc:	2305      	movs	r3, #5
 80198be:	e792      	b.n	80197e6 <__ssvfiscanf_r+0x142>
 80198c0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80198c2:	4621      	mov	r1, r4
 80198c4:	4630      	mov	r0, r6
 80198c6:	4798      	blx	r3
 80198c8:	2800      	cmp	r0, #0
 80198ca:	d090      	beq.n	80197ee <__ssvfiscanf_r+0x14a>
 80198cc:	e7c8      	b.n	8019860 <__ssvfiscanf_r+0x1bc>
 80198ce:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80198d0:	3201      	adds	r2, #1
 80198d2:	9245      	str	r2, [sp, #276]	; 0x114
 80198d4:	6862      	ldr	r2, [r4, #4]
 80198d6:	3a01      	subs	r2, #1
 80198d8:	2a00      	cmp	r2, #0
 80198da:	6062      	str	r2, [r4, #4]
 80198dc:	dd02      	ble.n	80198e4 <__ssvfiscanf_r+0x240>
 80198de:	3301      	adds	r3, #1
 80198e0:	6023      	str	r3, [r4, #0]
 80198e2:	e787      	b.n	80197f4 <__ssvfiscanf_r+0x150>
 80198e4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80198e6:	4621      	mov	r1, r4
 80198e8:	4630      	mov	r0, r6
 80198ea:	4798      	blx	r3
 80198ec:	2800      	cmp	r0, #0
 80198ee:	d081      	beq.n	80197f4 <__ssvfiscanf_r+0x150>
 80198f0:	e7b6      	b.n	8019860 <__ssvfiscanf_r+0x1bc>
 80198f2:	2b04      	cmp	r3, #4
 80198f4:	dc06      	bgt.n	8019904 <__ssvfiscanf_r+0x260>
 80198f6:	466b      	mov	r3, sp
 80198f8:	4622      	mov	r2, r4
 80198fa:	a941      	add	r1, sp, #260	; 0x104
 80198fc:	4630      	mov	r0, r6
 80198fe:	f000 f885 	bl	8019a0c <_scanf_i>
 8019902:	e788      	b.n	8019816 <__ssvfiscanf_r+0x172>
 8019904:	4b0e      	ldr	r3, [pc, #56]	; (8019940 <__ssvfiscanf_r+0x29c>)
 8019906:	2b00      	cmp	r3, #0
 8019908:	f43f aefc 	beq.w	8019704 <__ssvfiscanf_r+0x60>
 801990c:	466b      	mov	r3, sp
 801990e:	4622      	mov	r2, r4
 8019910:	a941      	add	r1, sp, #260	; 0x104
 8019912:	4630      	mov	r0, r6
 8019914:	f7fc fe34 	bl	8016580 <_scanf_float>
 8019918:	e77d      	b.n	8019816 <__ssvfiscanf_r+0x172>
 801991a:	89a3      	ldrh	r3, [r4, #12]
 801991c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8019920:	bf18      	it	ne
 8019922:	f04f 30ff 	movne.w	r0, #4294967295
 8019926:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 801992a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801992e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8019930:	e7f9      	b.n	8019926 <__ssvfiscanf_r+0x282>
 8019932:	bf00      	nop
 8019934:	080195f1 	.word	0x080195f1
 8019938:	0801966b 	.word	0x0801966b
 801993c:	0801c022 	.word	0x0801c022
 8019940:	08016581 	.word	0x08016581

08019944 <_scanf_chars>:
 8019944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019948:	4615      	mov	r5, r2
 801994a:	688a      	ldr	r2, [r1, #8]
 801994c:	4680      	mov	r8, r0
 801994e:	460c      	mov	r4, r1
 8019950:	b932      	cbnz	r2, 8019960 <_scanf_chars+0x1c>
 8019952:	698a      	ldr	r2, [r1, #24]
 8019954:	2a00      	cmp	r2, #0
 8019956:	bf14      	ite	ne
 8019958:	f04f 32ff 	movne.w	r2, #4294967295
 801995c:	2201      	moveq	r2, #1
 801995e:	608a      	str	r2, [r1, #8]
 8019960:	6822      	ldr	r2, [r4, #0]
 8019962:	06d1      	lsls	r1, r2, #27
 8019964:	bf5f      	itttt	pl
 8019966:	681a      	ldrpl	r2, [r3, #0]
 8019968:	1d11      	addpl	r1, r2, #4
 801996a:	6019      	strpl	r1, [r3, #0]
 801996c:	6817      	ldrpl	r7, [r2, #0]
 801996e:	2600      	movs	r6, #0
 8019970:	69a3      	ldr	r3, [r4, #24]
 8019972:	b1db      	cbz	r3, 80199ac <_scanf_chars+0x68>
 8019974:	2b01      	cmp	r3, #1
 8019976:	d107      	bne.n	8019988 <_scanf_chars+0x44>
 8019978:	682b      	ldr	r3, [r5, #0]
 801997a:	6962      	ldr	r2, [r4, #20]
 801997c:	781b      	ldrb	r3, [r3, #0]
 801997e:	5cd3      	ldrb	r3, [r2, r3]
 8019980:	b9a3      	cbnz	r3, 80199ac <_scanf_chars+0x68>
 8019982:	2e00      	cmp	r6, #0
 8019984:	d132      	bne.n	80199ec <_scanf_chars+0xa8>
 8019986:	e006      	b.n	8019996 <_scanf_chars+0x52>
 8019988:	2b02      	cmp	r3, #2
 801998a:	d007      	beq.n	801999c <_scanf_chars+0x58>
 801998c:	2e00      	cmp	r6, #0
 801998e:	d12d      	bne.n	80199ec <_scanf_chars+0xa8>
 8019990:	69a3      	ldr	r3, [r4, #24]
 8019992:	2b01      	cmp	r3, #1
 8019994:	d12a      	bne.n	80199ec <_scanf_chars+0xa8>
 8019996:	2001      	movs	r0, #1
 8019998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801999c:	f7ff f896 	bl	8018acc <__locale_ctype_ptr>
 80199a0:	682b      	ldr	r3, [r5, #0]
 80199a2:	781b      	ldrb	r3, [r3, #0]
 80199a4:	4418      	add	r0, r3
 80199a6:	7843      	ldrb	r3, [r0, #1]
 80199a8:	071b      	lsls	r3, r3, #28
 80199aa:	d4ef      	bmi.n	801998c <_scanf_chars+0x48>
 80199ac:	6823      	ldr	r3, [r4, #0]
 80199ae:	06da      	lsls	r2, r3, #27
 80199b0:	bf5e      	ittt	pl
 80199b2:	682b      	ldrpl	r3, [r5, #0]
 80199b4:	781b      	ldrbpl	r3, [r3, #0]
 80199b6:	703b      	strbpl	r3, [r7, #0]
 80199b8:	682a      	ldr	r2, [r5, #0]
 80199ba:	686b      	ldr	r3, [r5, #4]
 80199bc:	f102 0201 	add.w	r2, r2, #1
 80199c0:	602a      	str	r2, [r5, #0]
 80199c2:	68a2      	ldr	r2, [r4, #8]
 80199c4:	f103 33ff 	add.w	r3, r3, #4294967295
 80199c8:	f102 32ff 	add.w	r2, r2, #4294967295
 80199cc:	606b      	str	r3, [r5, #4]
 80199ce:	f106 0601 	add.w	r6, r6, #1
 80199d2:	bf58      	it	pl
 80199d4:	3701      	addpl	r7, #1
 80199d6:	60a2      	str	r2, [r4, #8]
 80199d8:	b142      	cbz	r2, 80199ec <_scanf_chars+0xa8>
 80199da:	2b00      	cmp	r3, #0
 80199dc:	dcc8      	bgt.n	8019970 <_scanf_chars+0x2c>
 80199de:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80199e2:	4629      	mov	r1, r5
 80199e4:	4640      	mov	r0, r8
 80199e6:	4798      	blx	r3
 80199e8:	2800      	cmp	r0, #0
 80199ea:	d0c1      	beq.n	8019970 <_scanf_chars+0x2c>
 80199ec:	6823      	ldr	r3, [r4, #0]
 80199ee:	f013 0310 	ands.w	r3, r3, #16
 80199f2:	d105      	bne.n	8019a00 <_scanf_chars+0xbc>
 80199f4:	68e2      	ldr	r2, [r4, #12]
 80199f6:	3201      	adds	r2, #1
 80199f8:	60e2      	str	r2, [r4, #12]
 80199fa:	69a2      	ldr	r2, [r4, #24]
 80199fc:	b102      	cbz	r2, 8019a00 <_scanf_chars+0xbc>
 80199fe:	703b      	strb	r3, [r7, #0]
 8019a00:	6923      	ldr	r3, [r4, #16]
 8019a02:	441e      	add	r6, r3
 8019a04:	6126      	str	r6, [r4, #16]
 8019a06:	2000      	movs	r0, #0
 8019a08:	e7c6      	b.n	8019998 <_scanf_chars+0x54>
	...

08019a0c <_scanf_i>:
 8019a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a10:	469a      	mov	sl, r3
 8019a12:	4b74      	ldr	r3, [pc, #464]	; (8019be4 <_scanf_i+0x1d8>)
 8019a14:	460c      	mov	r4, r1
 8019a16:	4683      	mov	fp, r0
 8019a18:	4616      	mov	r6, r2
 8019a1a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019a1e:	b087      	sub	sp, #28
 8019a20:	ab03      	add	r3, sp, #12
 8019a22:	68a7      	ldr	r7, [r4, #8]
 8019a24:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8019a28:	4b6f      	ldr	r3, [pc, #444]	; (8019be8 <_scanf_i+0x1dc>)
 8019a2a:	69a1      	ldr	r1, [r4, #24]
 8019a2c:	4a6f      	ldr	r2, [pc, #444]	; (8019bec <_scanf_i+0x1e0>)
 8019a2e:	2903      	cmp	r1, #3
 8019a30:	bf08      	it	eq
 8019a32:	461a      	moveq	r2, r3
 8019a34:	1e7b      	subs	r3, r7, #1
 8019a36:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8019a3a:	bf84      	itt	hi
 8019a3c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8019a40:	60a3      	strhi	r3, [r4, #8]
 8019a42:	6823      	ldr	r3, [r4, #0]
 8019a44:	9200      	str	r2, [sp, #0]
 8019a46:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8019a4a:	bf88      	it	hi
 8019a4c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8019a50:	f104 091c 	add.w	r9, r4, #28
 8019a54:	6023      	str	r3, [r4, #0]
 8019a56:	bf8c      	ite	hi
 8019a58:	197f      	addhi	r7, r7, r5
 8019a5a:	2700      	movls	r7, #0
 8019a5c:	464b      	mov	r3, r9
 8019a5e:	f04f 0800 	mov.w	r8, #0
 8019a62:	9301      	str	r3, [sp, #4]
 8019a64:	6831      	ldr	r1, [r6, #0]
 8019a66:	ab03      	add	r3, sp, #12
 8019a68:	2202      	movs	r2, #2
 8019a6a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8019a6e:	7809      	ldrb	r1, [r1, #0]
 8019a70:	f7e6 fbc6 	bl	8000200 <memchr>
 8019a74:	9b01      	ldr	r3, [sp, #4]
 8019a76:	b330      	cbz	r0, 8019ac6 <_scanf_i+0xba>
 8019a78:	f1b8 0f01 	cmp.w	r8, #1
 8019a7c:	d15a      	bne.n	8019b34 <_scanf_i+0x128>
 8019a7e:	6862      	ldr	r2, [r4, #4]
 8019a80:	b92a      	cbnz	r2, 8019a8e <_scanf_i+0x82>
 8019a82:	6822      	ldr	r2, [r4, #0]
 8019a84:	2108      	movs	r1, #8
 8019a86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019a8a:	6061      	str	r1, [r4, #4]
 8019a8c:	6022      	str	r2, [r4, #0]
 8019a8e:	6822      	ldr	r2, [r4, #0]
 8019a90:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8019a94:	6022      	str	r2, [r4, #0]
 8019a96:	68a2      	ldr	r2, [r4, #8]
 8019a98:	1e51      	subs	r1, r2, #1
 8019a9a:	60a1      	str	r1, [r4, #8]
 8019a9c:	b19a      	cbz	r2, 8019ac6 <_scanf_i+0xba>
 8019a9e:	6832      	ldr	r2, [r6, #0]
 8019aa0:	1c51      	adds	r1, r2, #1
 8019aa2:	6031      	str	r1, [r6, #0]
 8019aa4:	7812      	ldrb	r2, [r2, #0]
 8019aa6:	701a      	strb	r2, [r3, #0]
 8019aa8:	1c5d      	adds	r5, r3, #1
 8019aaa:	6873      	ldr	r3, [r6, #4]
 8019aac:	3b01      	subs	r3, #1
 8019aae:	2b00      	cmp	r3, #0
 8019ab0:	6073      	str	r3, [r6, #4]
 8019ab2:	dc07      	bgt.n	8019ac4 <_scanf_i+0xb8>
 8019ab4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019ab8:	4631      	mov	r1, r6
 8019aba:	4658      	mov	r0, fp
 8019abc:	4798      	blx	r3
 8019abe:	2800      	cmp	r0, #0
 8019ac0:	f040 8086 	bne.w	8019bd0 <_scanf_i+0x1c4>
 8019ac4:	462b      	mov	r3, r5
 8019ac6:	f108 0801 	add.w	r8, r8, #1
 8019aca:	f1b8 0f03 	cmp.w	r8, #3
 8019ace:	d1c8      	bne.n	8019a62 <_scanf_i+0x56>
 8019ad0:	6862      	ldr	r2, [r4, #4]
 8019ad2:	b90a      	cbnz	r2, 8019ad8 <_scanf_i+0xcc>
 8019ad4:	220a      	movs	r2, #10
 8019ad6:	6062      	str	r2, [r4, #4]
 8019ad8:	6862      	ldr	r2, [r4, #4]
 8019ada:	4945      	ldr	r1, [pc, #276]	; (8019bf0 <_scanf_i+0x1e4>)
 8019adc:	6960      	ldr	r0, [r4, #20]
 8019ade:	9301      	str	r3, [sp, #4]
 8019ae0:	1a89      	subs	r1, r1, r2
 8019ae2:	f000 f887 	bl	8019bf4 <__sccl>
 8019ae6:	9b01      	ldr	r3, [sp, #4]
 8019ae8:	f04f 0800 	mov.w	r8, #0
 8019aec:	461d      	mov	r5, r3
 8019aee:	68a3      	ldr	r3, [r4, #8]
 8019af0:	6822      	ldr	r2, [r4, #0]
 8019af2:	2b00      	cmp	r3, #0
 8019af4:	d03a      	beq.n	8019b6c <_scanf_i+0x160>
 8019af6:	6831      	ldr	r1, [r6, #0]
 8019af8:	6960      	ldr	r0, [r4, #20]
 8019afa:	f891 c000 	ldrb.w	ip, [r1]
 8019afe:	f810 000c 	ldrb.w	r0, [r0, ip]
 8019b02:	2800      	cmp	r0, #0
 8019b04:	d032      	beq.n	8019b6c <_scanf_i+0x160>
 8019b06:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8019b0a:	d121      	bne.n	8019b50 <_scanf_i+0x144>
 8019b0c:	0510      	lsls	r0, r2, #20
 8019b0e:	d51f      	bpl.n	8019b50 <_scanf_i+0x144>
 8019b10:	f108 0801 	add.w	r8, r8, #1
 8019b14:	b117      	cbz	r7, 8019b1c <_scanf_i+0x110>
 8019b16:	3301      	adds	r3, #1
 8019b18:	3f01      	subs	r7, #1
 8019b1a:	60a3      	str	r3, [r4, #8]
 8019b1c:	6873      	ldr	r3, [r6, #4]
 8019b1e:	3b01      	subs	r3, #1
 8019b20:	2b00      	cmp	r3, #0
 8019b22:	6073      	str	r3, [r6, #4]
 8019b24:	dd1b      	ble.n	8019b5e <_scanf_i+0x152>
 8019b26:	6833      	ldr	r3, [r6, #0]
 8019b28:	3301      	adds	r3, #1
 8019b2a:	6033      	str	r3, [r6, #0]
 8019b2c:	68a3      	ldr	r3, [r4, #8]
 8019b2e:	3b01      	subs	r3, #1
 8019b30:	60a3      	str	r3, [r4, #8]
 8019b32:	e7dc      	b.n	8019aee <_scanf_i+0xe2>
 8019b34:	f1b8 0f02 	cmp.w	r8, #2
 8019b38:	d1ad      	bne.n	8019a96 <_scanf_i+0x8a>
 8019b3a:	6822      	ldr	r2, [r4, #0]
 8019b3c:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8019b40:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8019b44:	d1bf      	bne.n	8019ac6 <_scanf_i+0xba>
 8019b46:	2110      	movs	r1, #16
 8019b48:	6061      	str	r1, [r4, #4]
 8019b4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8019b4e:	e7a1      	b.n	8019a94 <_scanf_i+0x88>
 8019b50:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8019b54:	6022      	str	r2, [r4, #0]
 8019b56:	780b      	ldrb	r3, [r1, #0]
 8019b58:	702b      	strb	r3, [r5, #0]
 8019b5a:	3501      	adds	r5, #1
 8019b5c:	e7de      	b.n	8019b1c <_scanf_i+0x110>
 8019b5e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019b62:	4631      	mov	r1, r6
 8019b64:	4658      	mov	r0, fp
 8019b66:	4798      	blx	r3
 8019b68:	2800      	cmp	r0, #0
 8019b6a:	d0df      	beq.n	8019b2c <_scanf_i+0x120>
 8019b6c:	6823      	ldr	r3, [r4, #0]
 8019b6e:	05d9      	lsls	r1, r3, #23
 8019b70:	d50c      	bpl.n	8019b8c <_scanf_i+0x180>
 8019b72:	454d      	cmp	r5, r9
 8019b74:	d908      	bls.n	8019b88 <_scanf_i+0x17c>
 8019b76:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8019b7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019b7e:	4632      	mov	r2, r6
 8019b80:	4658      	mov	r0, fp
 8019b82:	4798      	blx	r3
 8019b84:	1e6f      	subs	r7, r5, #1
 8019b86:	463d      	mov	r5, r7
 8019b88:	454d      	cmp	r5, r9
 8019b8a:	d029      	beq.n	8019be0 <_scanf_i+0x1d4>
 8019b8c:	6822      	ldr	r2, [r4, #0]
 8019b8e:	f012 0210 	ands.w	r2, r2, #16
 8019b92:	d113      	bne.n	8019bbc <_scanf_i+0x1b0>
 8019b94:	702a      	strb	r2, [r5, #0]
 8019b96:	6863      	ldr	r3, [r4, #4]
 8019b98:	9e00      	ldr	r6, [sp, #0]
 8019b9a:	4649      	mov	r1, r9
 8019b9c:	4658      	mov	r0, fp
 8019b9e:	47b0      	blx	r6
 8019ba0:	f8da 3000 	ldr.w	r3, [sl]
 8019ba4:	6821      	ldr	r1, [r4, #0]
 8019ba6:	1d1a      	adds	r2, r3, #4
 8019ba8:	f8ca 2000 	str.w	r2, [sl]
 8019bac:	f011 0f20 	tst.w	r1, #32
 8019bb0:	681b      	ldr	r3, [r3, #0]
 8019bb2:	d010      	beq.n	8019bd6 <_scanf_i+0x1ca>
 8019bb4:	6018      	str	r0, [r3, #0]
 8019bb6:	68e3      	ldr	r3, [r4, #12]
 8019bb8:	3301      	adds	r3, #1
 8019bba:	60e3      	str	r3, [r4, #12]
 8019bbc:	eba5 0509 	sub.w	r5, r5, r9
 8019bc0:	44a8      	add	r8, r5
 8019bc2:	6925      	ldr	r5, [r4, #16]
 8019bc4:	4445      	add	r5, r8
 8019bc6:	6125      	str	r5, [r4, #16]
 8019bc8:	2000      	movs	r0, #0
 8019bca:	b007      	add	sp, #28
 8019bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019bd0:	f04f 0800 	mov.w	r8, #0
 8019bd4:	e7ca      	b.n	8019b6c <_scanf_i+0x160>
 8019bd6:	07ca      	lsls	r2, r1, #31
 8019bd8:	bf4c      	ite	mi
 8019bda:	8018      	strhmi	r0, [r3, #0]
 8019bdc:	6018      	strpl	r0, [r3, #0]
 8019bde:	e7ea      	b.n	8019bb6 <_scanf_i+0x1aa>
 8019be0:	2001      	movs	r0, #1
 8019be2:	e7f2      	b.n	8019bca <_scanf_i+0x1be>
 8019be4:	0801be4c 	.word	0x0801be4c
 8019be8:	080177c9 	.word	0x080177c9
 8019bec:	08019d71 	.word	0x08019d71
 8019bf0:	0801c03d 	.word	0x0801c03d

08019bf4 <__sccl>:
 8019bf4:	b570      	push	{r4, r5, r6, lr}
 8019bf6:	780b      	ldrb	r3, [r1, #0]
 8019bf8:	2b5e      	cmp	r3, #94	; 0x5e
 8019bfa:	bf13      	iteet	ne
 8019bfc:	1c4a      	addne	r2, r1, #1
 8019bfe:	1c8a      	addeq	r2, r1, #2
 8019c00:	784b      	ldrbeq	r3, [r1, #1]
 8019c02:	2100      	movne	r1, #0
 8019c04:	bf08      	it	eq
 8019c06:	2101      	moveq	r1, #1
 8019c08:	1e44      	subs	r4, r0, #1
 8019c0a:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8019c0e:	f804 1f01 	strb.w	r1, [r4, #1]!
 8019c12:	42ac      	cmp	r4, r5
 8019c14:	d1fb      	bne.n	8019c0e <__sccl+0x1a>
 8019c16:	b913      	cbnz	r3, 8019c1e <__sccl+0x2a>
 8019c18:	3a01      	subs	r2, #1
 8019c1a:	4610      	mov	r0, r2
 8019c1c:	bd70      	pop	{r4, r5, r6, pc}
 8019c1e:	f081 0401 	eor.w	r4, r1, #1
 8019c22:	54c4      	strb	r4, [r0, r3]
 8019c24:	1c51      	adds	r1, r2, #1
 8019c26:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8019c2a:	2d2d      	cmp	r5, #45	; 0x2d
 8019c2c:	f101 36ff 	add.w	r6, r1, #4294967295
 8019c30:	460a      	mov	r2, r1
 8019c32:	d006      	beq.n	8019c42 <__sccl+0x4e>
 8019c34:	2d5d      	cmp	r5, #93	; 0x5d
 8019c36:	d0f0      	beq.n	8019c1a <__sccl+0x26>
 8019c38:	b90d      	cbnz	r5, 8019c3e <__sccl+0x4a>
 8019c3a:	4632      	mov	r2, r6
 8019c3c:	e7ed      	b.n	8019c1a <__sccl+0x26>
 8019c3e:	462b      	mov	r3, r5
 8019c40:	e7ef      	b.n	8019c22 <__sccl+0x2e>
 8019c42:	780e      	ldrb	r6, [r1, #0]
 8019c44:	2e5d      	cmp	r6, #93	; 0x5d
 8019c46:	d0fa      	beq.n	8019c3e <__sccl+0x4a>
 8019c48:	42b3      	cmp	r3, r6
 8019c4a:	dcf8      	bgt.n	8019c3e <__sccl+0x4a>
 8019c4c:	3301      	adds	r3, #1
 8019c4e:	429e      	cmp	r6, r3
 8019c50:	54c4      	strb	r4, [r0, r3]
 8019c52:	dcfb      	bgt.n	8019c4c <__sccl+0x58>
 8019c54:	3102      	adds	r1, #2
 8019c56:	e7e6      	b.n	8019c26 <__sccl+0x32>

08019c58 <strncmp>:
 8019c58:	b510      	push	{r4, lr}
 8019c5a:	b16a      	cbz	r2, 8019c78 <strncmp+0x20>
 8019c5c:	3901      	subs	r1, #1
 8019c5e:	1884      	adds	r4, r0, r2
 8019c60:	f810 3b01 	ldrb.w	r3, [r0], #1
 8019c64:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8019c68:	4293      	cmp	r3, r2
 8019c6a:	d103      	bne.n	8019c74 <strncmp+0x1c>
 8019c6c:	42a0      	cmp	r0, r4
 8019c6e:	d001      	beq.n	8019c74 <strncmp+0x1c>
 8019c70:	2b00      	cmp	r3, #0
 8019c72:	d1f5      	bne.n	8019c60 <strncmp+0x8>
 8019c74:	1a98      	subs	r0, r3, r2
 8019c76:	bd10      	pop	{r4, pc}
 8019c78:	4610      	mov	r0, r2
 8019c7a:	e7fc      	b.n	8019c76 <strncmp+0x1e>

08019c7c <_strtoul_l.isra.0>:
 8019c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019c80:	4680      	mov	r8, r0
 8019c82:	4689      	mov	r9, r1
 8019c84:	4692      	mov	sl, r2
 8019c86:	461e      	mov	r6, r3
 8019c88:	460f      	mov	r7, r1
 8019c8a:	463d      	mov	r5, r7
 8019c8c:	9808      	ldr	r0, [sp, #32]
 8019c8e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019c92:	f7fe ff17 	bl	8018ac4 <__locale_ctype_ptr_l>
 8019c96:	4420      	add	r0, r4
 8019c98:	7843      	ldrb	r3, [r0, #1]
 8019c9a:	f013 0308 	ands.w	r3, r3, #8
 8019c9e:	d130      	bne.n	8019d02 <_strtoul_l.isra.0+0x86>
 8019ca0:	2c2d      	cmp	r4, #45	; 0x2d
 8019ca2:	d130      	bne.n	8019d06 <_strtoul_l.isra.0+0x8a>
 8019ca4:	787c      	ldrb	r4, [r7, #1]
 8019ca6:	1cbd      	adds	r5, r7, #2
 8019ca8:	2101      	movs	r1, #1
 8019caa:	2e00      	cmp	r6, #0
 8019cac:	d05c      	beq.n	8019d68 <_strtoul_l.isra.0+0xec>
 8019cae:	2e10      	cmp	r6, #16
 8019cb0:	d109      	bne.n	8019cc6 <_strtoul_l.isra.0+0x4a>
 8019cb2:	2c30      	cmp	r4, #48	; 0x30
 8019cb4:	d107      	bne.n	8019cc6 <_strtoul_l.isra.0+0x4a>
 8019cb6:	782b      	ldrb	r3, [r5, #0]
 8019cb8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8019cbc:	2b58      	cmp	r3, #88	; 0x58
 8019cbe:	d14e      	bne.n	8019d5e <_strtoul_l.isra.0+0xe2>
 8019cc0:	786c      	ldrb	r4, [r5, #1]
 8019cc2:	2610      	movs	r6, #16
 8019cc4:	3502      	adds	r5, #2
 8019cc6:	f04f 32ff 	mov.w	r2, #4294967295
 8019cca:	2300      	movs	r3, #0
 8019ccc:	fbb2 f2f6 	udiv	r2, r2, r6
 8019cd0:	fb06 fc02 	mul.w	ip, r6, r2
 8019cd4:	ea6f 0c0c 	mvn.w	ip, ip
 8019cd8:	4618      	mov	r0, r3
 8019cda:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8019cde:	2f09      	cmp	r7, #9
 8019ce0:	d817      	bhi.n	8019d12 <_strtoul_l.isra.0+0x96>
 8019ce2:	463c      	mov	r4, r7
 8019ce4:	42a6      	cmp	r6, r4
 8019ce6:	dd23      	ble.n	8019d30 <_strtoul_l.isra.0+0xb4>
 8019ce8:	2b00      	cmp	r3, #0
 8019cea:	db1e      	blt.n	8019d2a <_strtoul_l.isra.0+0xae>
 8019cec:	4282      	cmp	r2, r0
 8019cee:	d31c      	bcc.n	8019d2a <_strtoul_l.isra.0+0xae>
 8019cf0:	d101      	bne.n	8019cf6 <_strtoul_l.isra.0+0x7a>
 8019cf2:	45a4      	cmp	ip, r4
 8019cf4:	db19      	blt.n	8019d2a <_strtoul_l.isra.0+0xae>
 8019cf6:	fb00 4006 	mla	r0, r0, r6, r4
 8019cfa:	2301      	movs	r3, #1
 8019cfc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019d00:	e7eb      	b.n	8019cda <_strtoul_l.isra.0+0x5e>
 8019d02:	462f      	mov	r7, r5
 8019d04:	e7c1      	b.n	8019c8a <_strtoul_l.isra.0+0xe>
 8019d06:	2c2b      	cmp	r4, #43	; 0x2b
 8019d08:	bf04      	itt	eq
 8019d0a:	1cbd      	addeq	r5, r7, #2
 8019d0c:	787c      	ldrbeq	r4, [r7, #1]
 8019d0e:	4619      	mov	r1, r3
 8019d10:	e7cb      	b.n	8019caa <_strtoul_l.isra.0+0x2e>
 8019d12:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8019d16:	2f19      	cmp	r7, #25
 8019d18:	d801      	bhi.n	8019d1e <_strtoul_l.isra.0+0xa2>
 8019d1a:	3c37      	subs	r4, #55	; 0x37
 8019d1c:	e7e2      	b.n	8019ce4 <_strtoul_l.isra.0+0x68>
 8019d1e:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8019d22:	2f19      	cmp	r7, #25
 8019d24:	d804      	bhi.n	8019d30 <_strtoul_l.isra.0+0xb4>
 8019d26:	3c57      	subs	r4, #87	; 0x57
 8019d28:	e7dc      	b.n	8019ce4 <_strtoul_l.isra.0+0x68>
 8019d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8019d2e:	e7e5      	b.n	8019cfc <_strtoul_l.isra.0+0x80>
 8019d30:	2b00      	cmp	r3, #0
 8019d32:	da09      	bge.n	8019d48 <_strtoul_l.isra.0+0xcc>
 8019d34:	2322      	movs	r3, #34	; 0x22
 8019d36:	f8c8 3000 	str.w	r3, [r8]
 8019d3a:	f04f 30ff 	mov.w	r0, #4294967295
 8019d3e:	f1ba 0f00 	cmp.w	sl, #0
 8019d42:	d107      	bne.n	8019d54 <_strtoul_l.isra.0+0xd8>
 8019d44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019d48:	b101      	cbz	r1, 8019d4c <_strtoul_l.isra.0+0xd0>
 8019d4a:	4240      	negs	r0, r0
 8019d4c:	f1ba 0f00 	cmp.w	sl, #0
 8019d50:	d0f8      	beq.n	8019d44 <_strtoul_l.isra.0+0xc8>
 8019d52:	b10b      	cbz	r3, 8019d58 <_strtoul_l.isra.0+0xdc>
 8019d54:	f105 39ff 	add.w	r9, r5, #4294967295
 8019d58:	f8ca 9000 	str.w	r9, [sl]
 8019d5c:	e7f2      	b.n	8019d44 <_strtoul_l.isra.0+0xc8>
 8019d5e:	2430      	movs	r4, #48	; 0x30
 8019d60:	2e00      	cmp	r6, #0
 8019d62:	d1b0      	bne.n	8019cc6 <_strtoul_l.isra.0+0x4a>
 8019d64:	2608      	movs	r6, #8
 8019d66:	e7ae      	b.n	8019cc6 <_strtoul_l.isra.0+0x4a>
 8019d68:	2c30      	cmp	r4, #48	; 0x30
 8019d6a:	d0a4      	beq.n	8019cb6 <_strtoul_l.isra.0+0x3a>
 8019d6c:	260a      	movs	r6, #10
 8019d6e:	e7aa      	b.n	8019cc6 <_strtoul_l.isra.0+0x4a>

08019d70 <_strtoul_r>:
 8019d70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019d72:	4c06      	ldr	r4, [pc, #24]	; (8019d8c <_strtoul_r+0x1c>)
 8019d74:	4d06      	ldr	r5, [pc, #24]	; (8019d90 <_strtoul_r+0x20>)
 8019d76:	6824      	ldr	r4, [r4, #0]
 8019d78:	6a24      	ldr	r4, [r4, #32]
 8019d7a:	2c00      	cmp	r4, #0
 8019d7c:	bf08      	it	eq
 8019d7e:	462c      	moveq	r4, r5
 8019d80:	9400      	str	r4, [sp, #0]
 8019d82:	f7ff ff7b 	bl	8019c7c <_strtoul_l.isra.0>
 8019d86:	b003      	add	sp, #12
 8019d88:	bd30      	pop	{r4, r5, pc}
 8019d8a:	bf00      	nop
 8019d8c:	20000e60 	.word	0x20000e60
 8019d90:	20000ec4 	.word	0x20000ec4

08019d94 <__submore>:
 8019d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019d98:	460c      	mov	r4, r1
 8019d9a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8019d9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019da0:	4299      	cmp	r1, r3
 8019da2:	d11d      	bne.n	8019de0 <__submore+0x4c>
 8019da4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8019da8:	f7fb ff34 	bl	8015c14 <_malloc_r>
 8019dac:	b918      	cbnz	r0, 8019db6 <__submore+0x22>
 8019dae:	f04f 30ff 	mov.w	r0, #4294967295
 8019db2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019db6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019dba:	63a3      	str	r3, [r4, #56]	; 0x38
 8019dbc:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8019dc0:	6360      	str	r0, [r4, #52]	; 0x34
 8019dc2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8019dc6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8019dca:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8019dce:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8019dd2:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8019dd6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8019dda:	6020      	str	r0, [r4, #0]
 8019ddc:	2000      	movs	r0, #0
 8019dde:	e7e8      	b.n	8019db2 <__submore+0x1e>
 8019de0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8019de2:	0077      	lsls	r7, r6, #1
 8019de4:	463a      	mov	r2, r7
 8019de6:	f000 f81c 	bl	8019e22 <_realloc_r>
 8019dea:	4605      	mov	r5, r0
 8019dec:	2800      	cmp	r0, #0
 8019dee:	d0de      	beq.n	8019dae <__submore+0x1a>
 8019df0:	eb00 0806 	add.w	r8, r0, r6
 8019df4:	4601      	mov	r1, r0
 8019df6:	4632      	mov	r2, r6
 8019df8:	4640      	mov	r0, r8
 8019dfa:	f7fb fe91 	bl	8015b20 <memcpy>
 8019dfe:	f8c4 8000 	str.w	r8, [r4]
 8019e02:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8019e06:	e7e9      	b.n	8019ddc <__submore+0x48>

08019e08 <__ascii_wctomb>:
 8019e08:	b149      	cbz	r1, 8019e1e <__ascii_wctomb+0x16>
 8019e0a:	2aff      	cmp	r2, #255	; 0xff
 8019e0c:	bf85      	ittet	hi
 8019e0e:	238a      	movhi	r3, #138	; 0x8a
 8019e10:	6003      	strhi	r3, [r0, #0]
 8019e12:	700a      	strbls	r2, [r1, #0]
 8019e14:	f04f 30ff 	movhi.w	r0, #4294967295
 8019e18:	bf98      	it	ls
 8019e1a:	2001      	movls	r0, #1
 8019e1c:	4770      	bx	lr
 8019e1e:	4608      	mov	r0, r1
 8019e20:	4770      	bx	lr

08019e22 <_realloc_r>:
 8019e22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019e24:	4607      	mov	r7, r0
 8019e26:	4614      	mov	r4, r2
 8019e28:	460e      	mov	r6, r1
 8019e2a:	b921      	cbnz	r1, 8019e36 <_realloc_r+0x14>
 8019e2c:	4611      	mov	r1, r2
 8019e2e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8019e32:	f7fb beef 	b.w	8015c14 <_malloc_r>
 8019e36:	b922      	cbnz	r2, 8019e42 <_realloc_r+0x20>
 8019e38:	f7fb fe9e 	bl	8015b78 <_free_r>
 8019e3c:	4625      	mov	r5, r4
 8019e3e:	4628      	mov	r0, r5
 8019e40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019e42:	f000 f814 	bl	8019e6e <_malloc_usable_size_r>
 8019e46:	42a0      	cmp	r0, r4
 8019e48:	d20f      	bcs.n	8019e6a <_realloc_r+0x48>
 8019e4a:	4621      	mov	r1, r4
 8019e4c:	4638      	mov	r0, r7
 8019e4e:	f7fb fee1 	bl	8015c14 <_malloc_r>
 8019e52:	4605      	mov	r5, r0
 8019e54:	2800      	cmp	r0, #0
 8019e56:	d0f2      	beq.n	8019e3e <_realloc_r+0x1c>
 8019e58:	4631      	mov	r1, r6
 8019e5a:	4622      	mov	r2, r4
 8019e5c:	f7fb fe60 	bl	8015b20 <memcpy>
 8019e60:	4631      	mov	r1, r6
 8019e62:	4638      	mov	r0, r7
 8019e64:	f7fb fe88 	bl	8015b78 <_free_r>
 8019e68:	e7e9      	b.n	8019e3e <_realloc_r+0x1c>
 8019e6a:	4635      	mov	r5, r6
 8019e6c:	e7e7      	b.n	8019e3e <_realloc_r+0x1c>

08019e6e <_malloc_usable_size_r>:
 8019e6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019e72:	1f18      	subs	r0, r3, #4
 8019e74:	2b00      	cmp	r3, #0
 8019e76:	bfbc      	itt	lt
 8019e78:	580b      	ldrlt	r3, [r1, r0]
 8019e7a:	18c0      	addlt	r0, r0, r3
 8019e7c:	4770      	bx	lr
	...

08019e80 <ceil>:
 8019e80:	ec51 0b10 	vmov	r0, r1, d0
 8019e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019e88:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8019e8c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8019e90:	2e13      	cmp	r6, #19
 8019e92:	460c      	mov	r4, r1
 8019e94:	ee10 5a10 	vmov	r5, s0
 8019e98:	4680      	mov	r8, r0
 8019e9a:	dc30      	bgt.n	8019efe <ceil+0x7e>
 8019e9c:	2e00      	cmp	r6, #0
 8019e9e:	da12      	bge.n	8019ec6 <ceil+0x46>
 8019ea0:	a333      	add	r3, pc, #204	; (adr r3, 8019f70 <ceil+0xf0>)
 8019ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ea6:	f7e6 fa01 	bl	80002ac <__adddf3>
 8019eaa:	2200      	movs	r2, #0
 8019eac:	2300      	movs	r3, #0
 8019eae:	f7e6 fe43 	bl	8000b38 <__aeabi_dcmpgt>
 8019eb2:	b128      	cbz	r0, 8019ec0 <ceil+0x40>
 8019eb4:	2c00      	cmp	r4, #0
 8019eb6:	db55      	blt.n	8019f64 <ceil+0xe4>
 8019eb8:	432c      	orrs	r4, r5
 8019eba:	d057      	beq.n	8019f6c <ceil+0xec>
 8019ebc:	4c2e      	ldr	r4, [pc, #184]	; (8019f78 <ceil+0xf8>)
 8019ebe:	2500      	movs	r5, #0
 8019ec0:	4621      	mov	r1, r4
 8019ec2:	4628      	mov	r0, r5
 8019ec4:	e025      	b.n	8019f12 <ceil+0x92>
 8019ec6:	4f2d      	ldr	r7, [pc, #180]	; (8019f7c <ceil+0xfc>)
 8019ec8:	4137      	asrs	r7, r6
 8019eca:	ea01 0307 	and.w	r3, r1, r7
 8019ece:	4303      	orrs	r3, r0
 8019ed0:	d01f      	beq.n	8019f12 <ceil+0x92>
 8019ed2:	a327      	add	r3, pc, #156	; (adr r3, 8019f70 <ceil+0xf0>)
 8019ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ed8:	f7e6 f9e8 	bl	80002ac <__adddf3>
 8019edc:	2200      	movs	r2, #0
 8019ede:	2300      	movs	r3, #0
 8019ee0:	f7e6 fe2a 	bl	8000b38 <__aeabi_dcmpgt>
 8019ee4:	2800      	cmp	r0, #0
 8019ee6:	d0eb      	beq.n	8019ec0 <ceil+0x40>
 8019ee8:	2c00      	cmp	r4, #0
 8019eea:	bfc2      	ittt	gt
 8019eec:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8019ef0:	fa43 f606 	asrgt.w	r6, r3, r6
 8019ef4:	19a4      	addgt	r4, r4, r6
 8019ef6:	ea24 0407 	bic.w	r4, r4, r7
 8019efa:	2500      	movs	r5, #0
 8019efc:	e7e0      	b.n	8019ec0 <ceil+0x40>
 8019efe:	2e33      	cmp	r6, #51	; 0x33
 8019f00:	dd0b      	ble.n	8019f1a <ceil+0x9a>
 8019f02:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8019f06:	d104      	bne.n	8019f12 <ceil+0x92>
 8019f08:	ee10 2a10 	vmov	r2, s0
 8019f0c:	460b      	mov	r3, r1
 8019f0e:	f7e6 f9cd 	bl	80002ac <__adddf3>
 8019f12:	ec41 0b10 	vmov	d0, r0, r1
 8019f16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019f1a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8019f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8019f22:	fa23 f707 	lsr.w	r7, r3, r7
 8019f26:	4207      	tst	r7, r0
 8019f28:	d0f3      	beq.n	8019f12 <ceil+0x92>
 8019f2a:	a311      	add	r3, pc, #68	; (adr r3, 8019f70 <ceil+0xf0>)
 8019f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f30:	f7e6 f9bc 	bl	80002ac <__adddf3>
 8019f34:	2200      	movs	r2, #0
 8019f36:	2300      	movs	r3, #0
 8019f38:	f7e6 fdfe 	bl	8000b38 <__aeabi_dcmpgt>
 8019f3c:	2800      	cmp	r0, #0
 8019f3e:	d0bf      	beq.n	8019ec0 <ceil+0x40>
 8019f40:	2c00      	cmp	r4, #0
 8019f42:	dd02      	ble.n	8019f4a <ceil+0xca>
 8019f44:	2e14      	cmp	r6, #20
 8019f46:	d103      	bne.n	8019f50 <ceil+0xd0>
 8019f48:	3401      	adds	r4, #1
 8019f4a:	ea25 0507 	bic.w	r5, r5, r7
 8019f4e:	e7b7      	b.n	8019ec0 <ceil+0x40>
 8019f50:	2301      	movs	r3, #1
 8019f52:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8019f56:	fa03 f606 	lsl.w	r6, r3, r6
 8019f5a:	4435      	add	r5, r6
 8019f5c:	4545      	cmp	r5, r8
 8019f5e:	bf38      	it	cc
 8019f60:	18e4      	addcc	r4, r4, r3
 8019f62:	e7f2      	b.n	8019f4a <ceil+0xca>
 8019f64:	2500      	movs	r5, #0
 8019f66:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8019f6a:	e7a9      	b.n	8019ec0 <ceil+0x40>
 8019f6c:	4625      	mov	r5, r4
 8019f6e:	e7a7      	b.n	8019ec0 <ceil+0x40>
 8019f70:	8800759c 	.word	0x8800759c
 8019f74:	7e37e43c 	.word	0x7e37e43c
 8019f78:	3ff00000 	.word	0x3ff00000
 8019f7c:	000fffff 	.word	0x000fffff

08019f80 <cos>:
 8019f80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019f82:	ec51 0b10 	vmov	r0, r1, d0
 8019f86:	4a1e      	ldr	r2, [pc, #120]	; (801a000 <cos+0x80>)
 8019f88:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019f8c:	4293      	cmp	r3, r2
 8019f8e:	dc06      	bgt.n	8019f9e <cos+0x1e>
 8019f90:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8019ff8 <cos+0x78>
 8019f94:	f000 fcec 	bl	801a970 <__kernel_cos>
 8019f98:	ec51 0b10 	vmov	r0, r1, d0
 8019f9c:	e007      	b.n	8019fae <cos+0x2e>
 8019f9e:	4a19      	ldr	r2, [pc, #100]	; (801a004 <cos+0x84>)
 8019fa0:	4293      	cmp	r3, r2
 8019fa2:	dd09      	ble.n	8019fb8 <cos+0x38>
 8019fa4:	ee10 2a10 	vmov	r2, s0
 8019fa8:	460b      	mov	r3, r1
 8019faa:	f7e6 f97d 	bl	80002a8 <__aeabi_dsub>
 8019fae:	ec41 0b10 	vmov	d0, r0, r1
 8019fb2:	b005      	add	sp, #20
 8019fb4:	f85d fb04 	ldr.w	pc, [sp], #4
 8019fb8:	4668      	mov	r0, sp
 8019fba:	f000 fa35 	bl	801a428 <__ieee754_rem_pio2>
 8019fbe:	f000 0003 	and.w	r0, r0, #3
 8019fc2:	2801      	cmp	r0, #1
 8019fc4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019fc8:	ed9d 0b00 	vldr	d0, [sp]
 8019fcc:	d007      	beq.n	8019fde <cos+0x5e>
 8019fce:	2802      	cmp	r0, #2
 8019fd0:	d00e      	beq.n	8019ff0 <cos+0x70>
 8019fd2:	2800      	cmp	r0, #0
 8019fd4:	d0de      	beq.n	8019f94 <cos+0x14>
 8019fd6:	2001      	movs	r0, #1
 8019fd8:	f001 f8d2 	bl	801b180 <__kernel_sin>
 8019fdc:	e7dc      	b.n	8019f98 <cos+0x18>
 8019fde:	f001 f8cf 	bl	801b180 <__kernel_sin>
 8019fe2:	ec53 2b10 	vmov	r2, r3, d0
 8019fe6:	ee10 0a10 	vmov	r0, s0
 8019fea:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8019fee:	e7de      	b.n	8019fae <cos+0x2e>
 8019ff0:	f000 fcbe 	bl	801a970 <__kernel_cos>
 8019ff4:	e7f5      	b.n	8019fe2 <cos+0x62>
 8019ff6:	bf00      	nop
	...
 801a000:	3fe921fb 	.word	0x3fe921fb
 801a004:	7fefffff 	.word	0x7fefffff

0801a008 <round>:
 801a008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a00a:	ec57 6b10 	vmov	r6, r7, d0
 801a00e:	f3c7 500a 	ubfx	r0, r7, #20, #11
 801a012:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 801a016:	2c13      	cmp	r4, #19
 801a018:	463b      	mov	r3, r7
 801a01a:	463d      	mov	r5, r7
 801a01c:	dc17      	bgt.n	801a04e <round+0x46>
 801a01e:	2c00      	cmp	r4, #0
 801a020:	da09      	bge.n	801a036 <round+0x2e>
 801a022:	3401      	adds	r4, #1
 801a024:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 801a028:	d103      	bne.n	801a032 <round+0x2a>
 801a02a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801a02e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801a032:	2100      	movs	r1, #0
 801a034:	e02c      	b.n	801a090 <round+0x88>
 801a036:	4a18      	ldr	r2, [pc, #96]	; (801a098 <round+0x90>)
 801a038:	4122      	asrs	r2, r4
 801a03a:	4217      	tst	r7, r2
 801a03c:	d100      	bne.n	801a040 <round+0x38>
 801a03e:	b19e      	cbz	r6, 801a068 <round+0x60>
 801a040:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801a044:	4123      	asrs	r3, r4
 801a046:	442b      	add	r3, r5
 801a048:	ea23 0302 	bic.w	r3, r3, r2
 801a04c:	e7f1      	b.n	801a032 <round+0x2a>
 801a04e:	2c33      	cmp	r4, #51	; 0x33
 801a050:	dd0d      	ble.n	801a06e <round+0x66>
 801a052:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 801a056:	d107      	bne.n	801a068 <round+0x60>
 801a058:	4630      	mov	r0, r6
 801a05a:	4639      	mov	r1, r7
 801a05c:	ee10 2a10 	vmov	r2, s0
 801a060:	f7e6 f924 	bl	80002ac <__adddf3>
 801a064:	4606      	mov	r6, r0
 801a066:	460f      	mov	r7, r1
 801a068:	ec47 6b10 	vmov	d0, r6, r7
 801a06c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a06e:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 801a072:	f04f 30ff 	mov.w	r0, #4294967295
 801a076:	40d0      	lsrs	r0, r2
 801a078:	4206      	tst	r6, r0
 801a07a:	d0f5      	beq.n	801a068 <round+0x60>
 801a07c:	2201      	movs	r2, #1
 801a07e:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 801a082:	fa02 f404 	lsl.w	r4, r2, r4
 801a086:	1931      	adds	r1, r6, r4
 801a088:	bf28      	it	cs
 801a08a:	189b      	addcs	r3, r3, r2
 801a08c:	ea21 0100 	bic.w	r1, r1, r0
 801a090:	461f      	mov	r7, r3
 801a092:	460e      	mov	r6, r1
 801a094:	e7e8      	b.n	801a068 <round+0x60>
 801a096:	bf00      	nop
 801a098:	000fffff 	.word	0x000fffff
 801a09c:	00000000 	.word	0x00000000

0801a0a0 <sin>:
 801a0a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a0a2:	ec51 0b10 	vmov	r0, r1, d0
 801a0a6:	4a20      	ldr	r2, [pc, #128]	; (801a128 <sin+0x88>)
 801a0a8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801a0ac:	4293      	cmp	r3, r2
 801a0ae:	dc07      	bgt.n	801a0c0 <sin+0x20>
 801a0b0:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 801a120 <sin+0x80>
 801a0b4:	2000      	movs	r0, #0
 801a0b6:	f001 f863 	bl	801b180 <__kernel_sin>
 801a0ba:	ec51 0b10 	vmov	r0, r1, d0
 801a0be:	e007      	b.n	801a0d0 <sin+0x30>
 801a0c0:	4a1a      	ldr	r2, [pc, #104]	; (801a12c <sin+0x8c>)
 801a0c2:	4293      	cmp	r3, r2
 801a0c4:	dd09      	ble.n	801a0da <sin+0x3a>
 801a0c6:	ee10 2a10 	vmov	r2, s0
 801a0ca:	460b      	mov	r3, r1
 801a0cc:	f7e6 f8ec 	bl	80002a8 <__aeabi_dsub>
 801a0d0:	ec41 0b10 	vmov	d0, r0, r1
 801a0d4:	b005      	add	sp, #20
 801a0d6:	f85d fb04 	ldr.w	pc, [sp], #4
 801a0da:	4668      	mov	r0, sp
 801a0dc:	f000 f9a4 	bl	801a428 <__ieee754_rem_pio2>
 801a0e0:	f000 0003 	and.w	r0, r0, #3
 801a0e4:	2801      	cmp	r0, #1
 801a0e6:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a0ea:	ed9d 0b00 	vldr	d0, [sp]
 801a0ee:	d004      	beq.n	801a0fa <sin+0x5a>
 801a0f0:	2802      	cmp	r0, #2
 801a0f2:	d005      	beq.n	801a100 <sin+0x60>
 801a0f4:	b970      	cbnz	r0, 801a114 <sin+0x74>
 801a0f6:	2001      	movs	r0, #1
 801a0f8:	e7dd      	b.n	801a0b6 <sin+0x16>
 801a0fa:	f000 fc39 	bl	801a970 <__kernel_cos>
 801a0fe:	e7dc      	b.n	801a0ba <sin+0x1a>
 801a100:	2001      	movs	r0, #1
 801a102:	f001 f83d 	bl	801b180 <__kernel_sin>
 801a106:	ec53 2b10 	vmov	r2, r3, d0
 801a10a:	ee10 0a10 	vmov	r0, s0
 801a10e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801a112:	e7dd      	b.n	801a0d0 <sin+0x30>
 801a114:	f000 fc2c 	bl	801a970 <__kernel_cos>
 801a118:	e7f5      	b.n	801a106 <sin+0x66>
 801a11a:	bf00      	nop
 801a11c:	f3af 8000 	nop.w
	...
 801a128:	3fe921fb 	.word	0x3fe921fb
 801a12c:	7fefffff 	.word	0x7fefffff

0801a130 <ceilf>:
 801a130:	ee10 3a10 	vmov	r3, s0
 801a134:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801a138:	0dca      	lsrs	r2, r1, #23
 801a13a:	3a7f      	subs	r2, #127	; 0x7f
 801a13c:	2a16      	cmp	r2, #22
 801a13e:	dc2a      	bgt.n	801a196 <ceilf+0x66>
 801a140:	2a00      	cmp	r2, #0
 801a142:	da11      	bge.n	801a168 <ceilf+0x38>
 801a144:	eddf 7a18 	vldr	s15, [pc, #96]	; 801a1a8 <ceilf+0x78>
 801a148:	ee30 0a27 	vadd.f32	s0, s0, s15
 801a14c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801a150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a154:	dd05      	ble.n	801a162 <ceilf+0x32>
 801a156:	2b00      	cmp	r3, #0
 801a158:	db23      	blt.n	801a1a2 <ceilf+0x72>
 801a15a:	2900      	cmp	r1, #0
 801a15c:	bf18      	it	ne
 801a15e:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 801a162:	ee00 3a10 	vmov	s0, r3
 801a166:	4770      	bx	lr
 801a168:	4910      	ldr	r1, [pc, #64]	; (801a1ac <ceilf+0x7c>)
 801a16a:	4111      	asrs	r1, r2
 801a16c:	420b      	tst	r3, r1
 801a16e:	d0fa      	beq.n	801a166 <ceilf+0x36>
 801a170:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801a1a8 <ceilf+0x78>
 801a174:	ee30 0a27 	vadd.f32	s0, s0, s15
 801a178:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801a17c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a180:	ddef      	ble.n	801a162 <ceilf+0x32>
 801a182:	2b00      	cmp	r3, #0
 801a184:	bfc2      	ittt	gt
 801a186:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 801a18a:	fa40 f202 	asrgt.w	r2, r0, r2
 801a18e:	189b      	addgt	r3, r3, r2
 801a190:	ea23 0301 	bic.w	r3, r3, r1
 801a194:	e7e5      	b.n	801a162 <ceilf+0x32>
 801a196:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801a19a:	d3e4      	bcc.n	801a166 <ceilf+0x36>
 801a19c:	ee30 0a00 	vadd.f32	s0, s0, s0
 801a1a0:	4770      	bx	lr
 801a1a2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801a1a6:	e7dc      	b.n	801a162 <ceilf+0x32>
 801a1a8:	7149f2ca 	.word	0x7149f2ca
 801a1ac:	007fffff 	.word	0x007fffff

0801a1b0 <atan2>:
 801a1b0:	f000 b85a 	b.w	801a268 <__ieee754_atan2>

0801a1b4 <sqrt>:
 801a1b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a1b8:	ed2d 8b02 	vpush	{d8}
 801a1bc:	b08b      	sub	sp, #44	; 0x2c
 801a1be:	ec55 4b10 	vmov	r4, r5, d0
 801a1c2:	f000 fb23 	bl	801a80c <__ieee754_sqrt>
 801a1c6:	4b26      	ldr	r3, [pc, #152]	; (801a260 <sqrt+0xac>)
 801a1c8:	eeb0 8a40 	vmov.f32	s16, s0
 801a1cc:	eef0 8a60 	vmov.f32	s17, s1
 801a1d0:	f993 6000 	ldrsb.w	r6, [r3]
 801a1d4:	1c73      	adds	r3, r6, #1
 801a1d6:	d02a      	beq.n	801a22e <sqrt+0x7a>
 801a1d8:	4622      	mov	r2, r4
 801a1da:	462b      	mov	r3, r5
 801a1dc:	4620      	mov	r0, r4
 801a1de:	4629      	mov	r1, r5
 801a1e0:	f7e6 fcb4 	bl	8000b4c <__aeabi_dcmpun>
 801a1e4:	4607      	mov	r7, r0
 801a1e6:	bb10      	cbnz	r0, 801a22e <sqrt+0x7a>
 801a1e8:	f04f 0800 	mov.w	r8, #0
 801a1ec:	f04f 0900 	mov.w	r9, #0
 801a1f0:	4642      	mov	r2, r8
 801a1f2:	464b      	mov	r3, r9
 801a1f4:	4620      	mov	r0, r4
 801a1f6:	4629      	mov	r1, r5
 801a1f8:	f7e6 fc80 	bl	8000afc <__aeabi_dcmplt>
 801a1fc:	b1b8      	cbz	r0, 801a22e <sqrt+0x7a>
 801a1fe:	2301      	movs	r3, #1
 801a200:	9300      	str	r3, [sp, #0]
 801a202:	4b18      	ldr	r3, [pc, #96]	; (801a264 <sqrt+0xb0>)
 801a204:	9301      	str	r3, [sp, #4]
 801a206:	9708      	str	r7, [sp, #32]
 801a208:	e9cd 4504 	strd	r4, r5, [sp, #16]
 801a20c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 801a210:	b9b6      	cbnz	r6, 801a240 <sqrt+0x8c>
 801a212:	e9cd 8906 	strd	r8, r9, [sp, #24]
 801a216:	4668      	mov	r0, sp
 801a218:	f001 fa9e 	bl	801b758 <matherr>
 801a21c:	b1d0      	cbz	r0, 801a254 <sqrt+0xa0>
 801a21e:	9b08      	ldr	r3, [sp, #32]
 801a220:	b11b      	cbz	r3, 801a22a <sqrt+0x76>
 801a222:	f7fb fc43 	bl	8015aac <__errno>
 801a226:	9b08      	ldr	r3, [sp, #32]
 801a228:	6003      	str	r3, [r0, #0]
 801a22a:	ed9d 8b06 	vldr	d8, [sp, #24]
 801a22e:	eeb0 0a48 	vmov.f32	s0, s16
 801a232:	eef0 0a68 	vmov.f32	s1, s17
 801a236:	b00b      	add	sp, #44	; 0x2c
 801a238:	ecbd 8b02 	vpop	{d8}
 801a23c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a240:	4642      	mov	r2, r8
 801a242:	464b      	mov	r3, r9
 801a244:	4640      	mov	r0, r8
 801a246:	4649      	mov	r1, r9
 801a248:	f7e6 fb10 	bl	800086c <__aeabi_ddiv>
 801a24c:	2e02      	cmp	r6, #2
 801a24e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801a252:	d1e0      	bne.n	801a216 <sqrt+0x62>
 801a254:	f7fb fc2a 	bl	8015aac <__errno>
 801a258:	2321      	movs	r3, #33	; 0x21
 801a25a:	6003      	str	r3, [r0, #0]
 801a25c:	e7df      	b.n	801a21e <sqrt+0x6a>
 801a25e:	bf00      	nop
 801a260:	20001030 	.word	0x20001030
 801a264:	0801c1ac 	.word	0x0801c1ac

0801a268 <__ieee754_atan2>:
 801a268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a26c:	ec57 6b11 	vmov	r6, r7, d1
 801a270:	4273      	negs	r3, r6
 801a272:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 801a276:	4333      	orrs	r3, r6
 801a278:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 801a420 <__ieee754_atan2+0x1b8>
 801a27c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801a280:	4573      	cmp	r3, lr
 801a282:	ec51 0b10 	vmov	r0, r1, d0
 801a286:	ee11 8a10 	vmov	r8, s2
 801a28a:	d80a      	bhi.n	801a2a2 <__ieee754_atan2+0x3a>
 801a28c:	4244      	negs	r4, r0
 801a28e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801a292:	4304      	orrs	r4, r0
 801a294:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801a298:	4574      	cmp	r4, lr
 801a29a:	468c      	mov	ip, r1
 801a29c:	ee10 9a10 	vmov	r9, s0
 801a2a0:	d907      	bls.n	801a2b2 <__ieee754_atan2+0x4a>
 801a2a2:	4632      	mov	r2, r6
 801a2a4:	463b      	mov	r3, r7
 801a2a6:	f7e6 f801 	bl	80002ac <__adddf3>
 801a2aa:	ec41 0b10 	vmov	d0, r0, r1
 801a2ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a2b2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 801a2b6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801a2ba:	4334      	orrs	r4, r6
 801a2bc:	d103      	bne.n	801a2c6 <__ieee754_atan2+0x5e>
 801a2be:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a2c2:	f001 b819 	b.w	801b2f8 <atan>
 801a2c6:	17bc      	asrs	r4, r7, #30
 801a2c8:	f004 0402 	and.w	r4, r4, #2
 801a2cc:	ea53 0909 	orrs.w	r9, r3, r9
 801a2d0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801a2d4:	d107      	bne.n	801a2e6 <__ieee754_atan2+0x7e>
 801a2d6:	2c02      	cmp	r4, #2
 801a2d8:	d073      	beq.n	801a3c2 <__ieee754_atan2+0x15a>
 801a2da:	2c03      	cmp	r4, #3
 801a2dc:	d1e5      	bne.n	801a2aa <__ieee754_atan2+0x42>
 801a2de:	a13e      	add	r1, pc, #248	; (adr r1, 801a3d8 <__ieee754_atan2+0x170>)
 801a2e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a2e4:	e7e1      	b.n	801a2aa <__ieee754_atan2+0x42>
 801a2e6:	ea52 0808 	orrs.w	r8, r2, r8
 801a2ea:	d106      	bne.n	801a2fa <__ieee754_atan2+0x92>
 801a2ec:	f1bc 0f00 	cmp.w	ip, #0
 801a2f0:	da6b      	bge.n	801a3ca <__ieee754_atan2+0x162>
 801a2f2:	a13b      	add	r1, pc, #236	; (adr r1, 801a3e0 <__ieee754_atan2+0x178>)
 801a2f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a2f8:	e7d7      	b.n	801a2aa <__ieee754_atan2+0x42>
 801a2fa:	4572      	cmp	r2, lr
 801a2fc:	d120      	bne.n	801a340 <__ieee754_atan2+0xd8>
 801a2fe:	4293      	cmp	r3, r2
 801a300:	d111      	bne.n	801a326 <__ieee754_atan2+0xbe>
 801a302:	2c02      	cmp	r4, #2
 801a304:	d007      	beq.n	801a316 <__ieee754_atan2+0xae>
 801a306:	2c03      	cmp	r4, #3
 801a308:	d009      	beq.n	801a31e <__ieee754_atan2+0xb6>
 801a30a:	2c01      	cmp	r4, #1
 801a30c:	d155      	bne.n	801a3ba <__ieee754_atan2+0x152>
 801a30e:	a136      	add	r1, pc, #216	; (adr r1, 801a3e8 <__ieee754_atan2+0x180>)
 801a310:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a314:	e7c9      	b.n	801a2aa <__ieee754_atan2+0x42>
 801a316:	a136      	add	r1, pc, #216	; (adr r1, 801a3f0 <__ieee754_atan2+0x188>)
 801a318:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a31c:	e7c5      	b.n	801a2aa <__ieee754_atan2+0x42>
 801a31e:	a136      	add	r1, pc, #216	; (adr r1, 801a3f8 <__ieee754_atan2+0x190>)
 801a320:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a324:	e7c1      	b.n	801a2aa <__ieee754_atan2+0x42>
 801a326:	2c02      	cmp	r4, #2
 801a328:	d04b      	beq.n	801a3c2 <__ieee754_atan2+0x15a>
 801a32a:	2c03      	cmp	r4, #3
 801a32c:	d0d7      	beq.n	801a2de <__ieee754_atan2+0x76>
 801a32e:	2c01      	cmp	r4, #1
 801a330:	f04f 0000 	mov.w	r0, #0
 801a334:	d102      	bne.n	801a33c <__ieee754_atan2+0xd4>
 801a336:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801a33a:	e7b6      	b.n	801a2aa <__ieee754_atan2+0x42>
 801a33c:	2100      	movs	r1, #0
 801a33e:	e7b4      	b.n	801a2aa <__ieee754_atan2+0x42>
 801a340:	4573      	cmp	r3, lr
 801a342:	d0d3      	beq.n	801a2ec <__ieee754_atan2+0x84>
 801a344:	1a9b      	subs	r3, r3, r2
 801a346:	151b      	asrs	r3, r3, #20
 801a348:	2b3c      	cmp	r3, #60	; 0x3c
 801a34a:	dc1e      	bgt.n	801a38a <__ieee754_atan2+0x122>
 801a34c:	2f00      	cmp	r7, #0
 801a34e:	da01      	bge.n	801a354 <__ieee754_atan2+0xec>
 801a350:	333c      	adds	r3, #60	; 0x3c
 801a352:	db1e      	blt.n	801a392 <__ieee754_atan2+0x12a>
 801a354:	4632      	mov	r2, r6
 801a356:	463b      	mov	r3, r7
 801a358:	f7e6 fa88 	bl	800086c <__aeabi_ddiv>
 801a35c:	ec41 0b10 	vmov	d0, r0, r1
 801a360:	f001 f96a 	bl	801b638 <fabs>
 801a364:	f000 ffc8 	bl	801b2f8 <atan>
 801a368:	ec51 0b10 	vmov	r0, r1, d0
 801a36c:	2c01      	cmp	r4, #1
 801a36e:	d013      	beq.n	801a398 <__ieee754_atan2+0x130>
 801a370:	2c02      	cmp	r4, #2
 801a372:	d015      	beq.n	801a3a0 <__ieee754_atan2+0x138>
 801a374:	2c00      	cmp	r4, #0
 801a376:	d098      	beq.n	801a2aa <__ieee754_atan2+0x42>
 801a378:	a321      	add	r3, pc, #132	; (adr r3, 801a400 <__ieee754_atan2+0x198>)
 801a37a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a37e:	f7e5 ff93 	bl	80002a8 <__aeabi_dsub>
 801a382:	a321      	add	r3, pc, #132	; (adr r3, 801a408 <__ieee754_atan2+0x1a0>)
 801a384:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a388:	e014      	b.n	801a3b4 <__ieee754_atan2+0x14c>
 801a38a:	a121      	add	r1, pc, #132	; (adr r1, 801a410 <__ieee754_atan2+0x1a8>)
 801a38c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a390:	e7ec      	b.n	801a36c <__ieee754_atan2+0x104>
 801a392:	2000      	movs	r0, #0
 801a394:	2100      	movs	r1, #0
 801a396:	e7e9      	b.n	801a36c <__ieee754_atan2+0x104>
 801a398:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a39c:	4619      	mov	r1, r3
 801a39e:	e784      	b.n	801a2aa <__ieee754_atan2+0x42>
 801a3a0:	a317      	add	r3, pc, #92	; (adr r3, 801a400 <__ieee754_atan2+0x198>)
 801a3a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3a6:	f7e5 ff7f 	bl	80002a8 <__aeabi_dsub>
 801a3aa:	4602      	mov	r2, r0
 801a3ac:	460b      	mov	r3, r1
 801a3ae:	a116      	add	r1, pc, #88	; (adr r1, 801a408 <__ieee754_atan2+0x1a0>)
 801a3b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a3b4:	f7e5 ff78 	bl	80002a8 <__aeabi_dsub>
 801a3b8:	e777      	b.n	801a2aa <__ieee754_atan2+0x42>
 801a3ba:	a117      	add	r1, pc, #92	; (adr r1, 801a418 <__ieee754_atan2+0x1b0>)
 801a3bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a3c0:	e773      	b.n	801a2aa <__ieee754_atan2+0x42>
 801a3c2:	a111      	add	r1, pc, #68	; (adr r1, 801a408 <__ieee754_atan2+0x1a0>)
 801a3c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a3c8:	e76f      	b.n	801a2aa <__ieee754_atan2+0x42>
 801a3ca:	a111      	add	r1, pc, #68	; (adr r1, 801a410 <__ieee754_atan2+0x1a8>)
 801a3cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a3d0:	e76b      	b.n	801a2aa <__ieee754_atan2+0x42>
 801a3d2:	bf00      	nop
 801a3d4:	f3af 8000 	nop.w
 801a3d8:	54442d18 	.word	0x54442d18
 801a3dc:	c00921fb 	.word	0xc00921fb
 801a3e0:	54442d18 	.word	0x54442d18
 801a3e4:	bff921fb 	.word	0xbff921fb
 801a3e8:	54442d18 	.word	0x54442d18
 801a3ec:	bfe921fb 	.word	0xbfe921fb
 801a3f0:	7f3321d2 	.word	0x7f3321d2
 801a3f4:	4002d97c 	.word	0x4002d97c
 801a3f8:	7f3321d2 	.word	0x7f3321d2
 801a3fc:	c002d97c 	.word	0xc002d97c
 801a400:	33145c07 	.word	0x33145c07
 801a404:	3ca1a626 	.word	0x3ca1a626
 801a408:	54442d18 	.word	0x54442d18
 801a40c:	400921fb 	.word	0x400921fb
 801a410:	54442d18 	.word	0x54442d18
 801a414:	3ff921fb 	.word	0x3ff921fb
 801a418:	54442d18 	.word	0x54442d18
 801a41c:	3fe921fb 	.word	0x3fe921fb
 801a420:	7ff00000 	.word	0x7ff00000
 801a424:	00000000 	.word	0x00000000

0801a428 <__ieee754_rem_pio2>:
 801a428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a42c:	ec57 6b10 	vmov	r6, r7, d0
 801a430:	4bc3      	ldr	r3, [pc, #780]	; (801a740 <__ieee754_rem_pio2+0x318>)
 801a432:	b08d      	sub	sp, #52	; 0x34
 801a434:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801a438:	4598      	cmp	r8, r3
 801a43a:	4604      	mov	r4, r0
 801a43c:	9704      	str	r7, [sp, #16]
 801a43e:	dc07      	bgt.n	801a450 <__ieee754_rem_pio2+0x28>
 801a440:	2200      	movs	r2, #0
 801a442:	2300      	movs	r3, #0
 801a444:	ed84 0b00 	vstr	d0, [r4]
 801a448:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801a44c:	2500      	movs	r5, #0
 801a44e:	e027      	b.n	801a4a0 <__ieee754_rem_pio2+0x78>
 801a450:	4bbc      	ldr	r3, [pc, #752]	; (801a744 <__ieee754_rem_pio2+0x31c>)
 801a452:	4598      	cmp	r8, r3
 801a454:	dc75      	bgt.n	801a542 <__ieee754_rem_pio2+0x11a>
 801a456:	9b04      	ldr	r3, [sp, #16]
 801a458:	4dbb      	ldr	r5, [pc, #748]	; (801a748 <__ieee754_rem_pio2+0x320>)
 801a45a:	2b00      	cmp	r3, #0
 801a45c:	ee10 0a10 	vmov	r0, s0
 801a460:	a3a9      	add	r3, pc, #676	; (adr r3, 801a708 <__ieee754_rem_pio2+0x2e0>)
 801a462:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a466:	4639      	mov	r1, r7
 801a468:	dd36      	ble.n	801a4d8 <__ieee754_rem_pio2+0xb0>
 801a46a:	f7e5 ff1d 	bl	80002a8 <__aeabi_dsub>
 801a46e:	45a8      	cmp	r8, r5
 801a470:	4606      	mov	r6, r0
 801a472:	460f      	mov	r7, r1
 801a474:	d018      	beq.n	801a4a8 <__ieee754_rem_pio2+0x80>
 801a476:	a3a6      	add	r3, pc, #664	; (adr r3, 801a710 <__ieee754_rem_pio2+0x2e8>)
 801a478:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a47c:	f7e5 ff14 	bl	80002a8 <__aeabi_dsub>
 801a480:	4602      	mov	r2, r0
 801a482:	460b      	mov	r3, r1
 801a484:	e9c4 2300 	strd	r2, r3, [r4]
 801a488:	4630      	mov	r0, r6
 801a48a:	4639      	mov	r1, r7
 801a48c:	f7e5 ff0c 	bl	80002a8 <__aeabi_dsub>
 801a490:	a39f      	add	r3, pc, #636	; (adr r3, 801a710 <__ieee754_rem_pio2+0x2e8>)
 801a492:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a496:	f7e5 ff07 	bl	80002a8 <__aeabi_dsub>
 801a49a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801a49e:	2501      	movs	r5, #1
 801a4a0:	4628      	mov	r0, r5
 801a4a2:	b00d      	add	sp, #52	; 0x34
 801a4a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a4a8:	a39b      	add	r3, pc, #620	; (adr r3, 801a718 <__ieee754_rem_pio2+0x2f0>)
 801a4aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a4ae:	f7e5 fefb 	bl	80002a8 <__aeabi_dsub>
 801a4b2:	a39b      	add	r3, pc, #620	; (adr r3, 801a720 <__ieee754_rem_pio2+0x2f8>)
 801a4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a4b8:	4606      	mov	r6, r0
 801a4ba:	460f      	mov	r7, r1
 801a4bc:	f7e5 fef4 	bl	80002a8 <__aeabi_dsub>
 801a4c0:	4602      	mov	r2, r0
 801a4c2:	460b      	mov	r3, r1
 801a4c4:	e9c4 2300 	strd	r2, r3, [r4]
 801a4c8:	4630      	mov	r0, r6
 801a4ca:	4639      	mov	r1, r7
 801a4cc:	f7e5 feec 	bl	80002a8 <__aeabi_dsub>
 801a4d0:	a393      	add	r3, pc, #588	; (adr r3, 801a720 <__ieee754_rem_pio2+0x2f8>)
 801a4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a4d6:	e7de      	b.n	801a496 <__ieee754_rem_pio2+0x6e>
 801a4d8:	f7e5 fee8 	bl	80002ac <__adddf3>
 801a4dc:	45a8      	cmp	r8, r5
 801a4de:	4606      	mov	r6, r0
 801a4e0:	460f      	mov	r7, r1
 801a4e2:	d016      	beq.n	801a512 <__ieee754_rem_pio2+0xea>
 801a4e4:	a38a      	add	r3, pc, #552	; (adr r3, 801a710 <__ieee754_rem_pio2+0x2e8>)
 801a4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a4ea:	f7e5 fedf 	bl	80002ac <__adddf3>
 801a4ee:	4602      	mov	r2, r0
 801a4f0:	460b      	mov	r3, r1
 801a4f2:	e9c4 2300 	strd	r2, r3, [r4]
 801a4f6:	4630      	mov	r0, r6
 801a4f8:	4639      	mov	r1, r7
 801a4fa:	f7e5 fed5 	bl	80002a8 <__aeabi_dsub>
 801a4fe:	a384      	add	r3, pc, #528	; (adr r3, 801a710 <__ieee754_rem_pio2+0x2e8>)
 801a500:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a504:	f7e5 fed2 	bl	80002ac <__adddf3>
 801a508:	f04f 35ff 	mov.w	r5, #4294967295
 801a50c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801a510:	e7c6      	b.n	801a4a0 <__ieee754_rem_pio2+0x78>
 801a512:	a381      	add	r3, pc, #516	; (adr r3, 801a718 <__ieee754_rem_pio2+0x2f0>)
 801a514:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a518:	f7e5 fec8 	bl	80002ac <__adddf3>
 801a51c:	a380      	add	r3, pc, #512	; (adr r3, 801a720 <__ieee754_rem_pio2+0x2f8>)
 801a51e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a522:	4606      	mov	r6, r0
 801a524:	460f      	mov	r7, r1
 801a526:	f7e5 fec1 	bl	80002ac <__adddf3>
 801a52a:	4602      	mov	r2, r0
 801a52c:	460b      	mov	r3, r1
 801a52e:	e9c4 2300 	strd	r2, r3, [r4]
 801a532:	4630      	mov	r0, r6
 801a534:	4639      	mov	r1, r7
 801a536:	f7e5 feb7 	bl	80002a8 <__aeabi_dsub>
 801a53a:	a379      	add	r3, pc, #484	; (adr r3, 801a720 <__ieee754_rem_pio2+0x2f8>)
 801a53c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a540:	e7e0      	b.n	801a504 <__ieee754_rem_pio2+0xdc>
 801a542:	4b82      	ldr	r3, [pc, #520]	; (801a74c <__ieee754_rem_pio2+0x324>)
 801a544:	4598      	cmp	r8, r3
 801a546:	f300 80d0 	bgt.w	801a6ea <__ieee754_rem_pio2+0x2c2>
 801a54a:	f001 f875 	bl	801b638 <fabs>
 801a54e:	ec57 6b10 	vmov	r6, r7, d0
 801a552:	ee10 0a10 	vmov	r0, s0
 801a556:	a374      	add	r3, pc, #464	; (adr r3, 801a728 <__ieee754_rem_pio2+0x300>)
 801a558:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a55c:	4639      	mov	r1, r7
 801a55e:	f7e6 f85b 	bl	8000618 <__aeabi_dmul>
 801a562:	2200      	movs	r2, #0
 801a564:	4b7a      	ldr	r3, [pc, #488]	; (801a750 <__ieee754_rem_pio2+0x328>)
 801a566:	f7e5 fea1 	bl	80002ac <__adddf3>
 801a56a:	f7e6 fb05 	bl	8000b78 <__aeabi_d2iz>
 801a56e:	4605      	mov	r5, r0
 801a570:	f7e5 ffe8 	bl	8000544 <__aeabi_i2d>
 801a574:	a364      	add	r3, pc, #400	; (adr r3, 801a708 <__ieee754_rem_pio2+0x2e0>)
 801a576:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a57a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a57e:	f7e6 f84b 	bl	8000618 <__aeabi_dmul>
 801a582:	4602      	mov	r2, r0
 801a584:	460b      	mov	r3, r1
 801a586:	4630      	mov	r0, r6
 801a588:	4639      	mov	r1, r7
 801a58a:	f7e5 fe8d 	bl	80002a8 <__aeabi_dsub>
 801a58e:	a360      	add	r3, pc, #384	; (adr r3, 801a710 <__ieee754_rem_pio2+0x2e8>)
 801a590:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a594:	4682      	mov	sl, r0
 801a596:	468b      	mov	fp, r1
 801a598:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a59c:	f7e6 f83c 	bl	8000618 <__aeabi_dmul>
 801a5a0:	2d1f      	cmp	r5, #31
 801a5a2:	4606      	mov	r6, r0
 801a5a4:	460f      	mov	r7, r1
 801a5a6:	dc0c      	bgt.n	801a5c2 <__ieee754_rem_pio2+0x19a>
 801a5a8:	1e6a      	subs	r2, r5, #1
 801a5aa:	4b6a      	ldr	r3, [pc, #424]	; (801a754 <__ieee754_rem_pio2+0x32c>)
 801a5ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a5b0:	4543      	cmp	r3, r8
 801a5b2:	d006      	beq.n	801a5c2 <__ieee754_rem_pio2+0x19a>
 801a5b4:	4632      	mov	r2, r6
 801a5b6:	463b      	mov	r3, r7
 801a5b8:	4650      	mov	r0, sl
 801a5ba:	4659      	mov	r1, fp
 801a5bc:	f7e5 fe74 	bl	80002a8 <__aeabi_dsub>
 801a5c0:	e00e      	b.n	801a5e0 <__ieee754_rem_pio2+0x1b8>
 801a5c2:	4632      	mov	r2, r6
 801a5c4:	463b      	mov	r3, r7
 801a5c6:	4650      	mov	r0, sl
 801a5c8:	4659      	mov	r1, fp
 801a5ca:	f7e5 fe6d 	bl	80002a8 <__aeabi_dsub>
 801a5ce:	ea4f 5328 	mov.w	r3, r8, asr #20
 801a5d2:	9305      	str	r3, [sp, #20]
 801a5d4:	9a05      	ldr	r2, [sp, #20]
 801a5d6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801a5da:	1ad3      	subs	r3, r2, r3
 801a5dc:	2b10      	cmp	r3, #16
 801a5de:	dc02      	bgt.n	801a5e6 <__ieee754_rem_pio2+0x1be>
 801a5e0:	e9c4 0100 	strd	r0, r1, [r4]
 801a5e4:	e039      	b.n	801a65a <__ieee754_rem_pio2+0x232>
 801a5e6:	a34c      	add	r3, pc, #304	; (adr r3, 801a718 <__ieee754_rem_pio2+0x2f0>)
 801a5e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a5f0:	f7e6 f812 	bl	8000618 <__aeabi_dmul>
 801a5f4:	4606      	mov	r6, r0
 801a5f6:	460f      	mov	r7, r1
 801a5f8:	4602      	mov	r2, r0
 801a5fa:	460b      	mov	r3, r1
 801a5fc:	4650      	mov	r0, sl
 801a5fe:	4659      	mov	r1, fp
 801a600:	f7e5 fe52 	bl	80002a8 <__aeabi_dsub>
 801a604:	4602      	mov	r2, r0
 801a606:	460b      	mov	r3, r1
 801a608:	4680      	mov	r8, r0
 801a60a:	4689      	mov	r9, r1
 801a60c:	4650      	mov	r0, sl
 801a60e:	4659      	mov	r1, fp
 801a610:	f7e5 fe4a 	bl	80002a8 <__aeabi_dsub>
 801a614:	4632      	mov	r2, r6
 801a616:	463b      	mov	r3, r7
 801a618:	f7e5 fe46 	bl	80002a8 <__aeabi_dsub>
 801a61c:	a340      	add	r3, pc, #256	; (adr r3, 801a720 <__ieee754_rem_pio2+0x2f8>)
 801a61e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a622:	4606      	mov	r6, r0
 801a624:	460f      	mov	r7, r1
 801a626:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a62a:	f7e5 fff5 	bl	8000618 <__aeabi_dmul>
 801a62e:	4632      	mov	r2, r6
 801a630:	463b      	mov	r3, r7
 801a632:	f7e5 fe39 	bl	80002a8 <__aeabi_dsub>
 801a636:	4602      	mov	r2, r0
 801a638:	460b      	mov	r3, r1
 801a63a:	4606      	mov	r6, r0
 801a63c:	460f      	mov	r7, r1
 801a63e:	4640      	mov	r0, r8
 801a640:	4649      	mov	r1, r9
 801a642:	f7e5 fe31 	bl	80002a8 <__aeabi_dsub>
 801a646:	9a05      	ldr	r2, [sp, #20]
 801a648:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801a64c:	1ad3      	subs	r3, r2, r3
 801a64e:	2b31      	cmp	r3, #49	; 0x31
 801a650:	dc20      	bgt.n	801a694 <__ieee754_rem_pio2+0x26c>
 801a652:	e9c4 0100 	strd	r0, r1, [r4]
 801a656:	46c2      	mov	sl, r8
 801a658:	46cb      	mov	fp, r9
 801a65a:	e9d4 8900 	ldrd	r8, r9, [r4]
 801a65e:	4650      	mov	r0, sl
 801a660:	4642      	mov	r2, r8
 801a662:	464b      	mov	r3, r9
 801a664:	4659      	mov	r1, fp
 801a666:	f7e5 fe1f 	bl	80002a8 <__aeabi_dsub>
 801a66a:	463b      	mov	r3, r7
 801a66c:	4632      	mov	r2, r6
 801a66e:	f7e5 fe1b 	bl	80002a8 <__aeabi_dsub>
 801a672:	9b04      	ldr	r3, [sp, #16]
 801a674:	2b00      	cmp	r3, #0
 801a676:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801a67a:	f6bf af11 	bge.w	801a4a0 <__ieee754_rem_pio2+0x78>
 801a67e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801a682:	6063      	str	r3, [r4, #4]
 801a684:	f8c4 8000 	str.w	r8, [r4]
 801a688:	60a0      	str	r0, [r4, #8]
 801a68a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a68e:	60e3      	str	r3, [r4, #12]
 801a690:	426d      	negs	r5, r5
 801a692:	e705      	b.n	801a4a0 <__ieee754_rem_pio2+0x78>
 801a694:	a326      	add	r3, pc, #152	; (adr r3, 801a730 <__ieee754_rem_pio2+0x308>)
 801a696:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a69a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a69e:	f7e5 ffbb 	bl	8000618 <__aeabi_dmul>
 801a6a2:	4606      	mov	r6, r0
 801a6a4:	460f      	mov	r7, r1
 801a6a6:	4602      	mov	r2, r0
 801a6a8:	460b      	mov	r3, r1
 801a6aa:	4640      	mov	r0, r8
 801a6ac:	4649      	mov	r1, r9
 801a6ae:	f7e5 fdfb 	bl	80002a8 <__aeabi_dsub>
 801a6b2:	4602      	mov	r2, r0
 801a6b4:	460b      	mov	r3, r1
 801a6b6:	4682      	mov	sl, r0
 801a6b8:	468b      	mov	fp, r1
 801a6ba:	4640      	mov	r0, r8
 801a6bc:	4649      	mov	r1, r9
 801a6be:	f7e5 fdf3 	bl	80002a8 <__aeabi_dsub>
 801a6c2:	4632      	mov	r2, r6
 801a6c4:	463b      	mov	r3, r7
 801a6c6:	f7e5 fdef 	bl	80002a8 <__aeabi_dsub>
 801a6ca:	a31b      	add	r3, pc, #108	; (adr r3, 801a738 <__ieee754_rem_pio2+0x310>)
 801a6cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6d0:	4606      	mov	r6, r0
 801a6d2:	460f      	mov	r7, r1
 801a6d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a6d8:	f7e5 ff9e 	bl	8000618 <__aeabi_dmul>
 801a6dc:	4632      	mov	r2, r6
 801a6de:	463b      	mov	r3, r7
 801a6e0:	f7e5 fde2 	bl	80002a8 <__aeabi_dsub>
 801a6e4:	4606      	mov	r6, r0
 801a6e6:	460f      	mov	r7, r1
 801a6e8:	e764      	b.n	801a5b4 <__ieee754_rem_pio2+0x18c>
 801a6ea:	4b1b      	ldr	r3, [pc, #108]	; (801a758 <__ieee754_rem_pio2+0x330>)
 801a6ec:	4598      	cmp	r8, r3
 801a6ee:	dd35      	ble.n	801a75c <__ieee754_rem_pio2+0x334>
 801a6f0:	ee10 2a10 	vmov	r2, s0
 801a6f4:	463b      	mov	r3, r7
 801a6f6:	4630      	mov	r0, r6
 801a6f8:	4639      	mov	r1, r7
 801a6fa:	f7e5 fdd5 	bl	80002a8 <__aeabi_dsub>
 801a6fe:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801a702:	e9c4 0100 	strd	r0, r1, [r4]
 801a706:	e6a1      	b.n	801a44c <__ieee754_rem_pio2+0x24>
 801a708:	54400000 	.word	0x54400000
 801a70c:	3ff921fb 	.word	0x3ff921fb
 801a710:	1a626331 	.word	0x1a626331
 801a714:	3dd0b461 	.word	0x3dd0b461
 801a718:	1a600000 	.word	0x1a600000
 801a71c:	3dd0b461 	.word	0x3dd0b461
 801a720:	2e037073 	.word	0x2e037073
 801a724:	3ba3198a 	.word	0x3ba3198a
 801a728:	6dc9c883 	.word	0x6dc9c883
 801a72c:	3fe45f30 	.word	0x3fe45f30
 801a730:	2e000000 	.word	0x2e000000
 801a734:	3ba3198a 	.word	0x3ba3198a
 801a738:	252049c1 	.word	0x252049c1
 801a73c:	397b839a 	.word	0x397b839a
 801a740:	3fe921fb 	.word	0x3fe921fb
 801a744:	4002d97b 	.word	0x4002d97b
 801a748:	3ff921fb 	.word	0x3ff921fb
 801a74c:	413921fb 	.word	0x413921fb
 801a750:	3fe00000 	.word	0x3fe00000
 801a754:	0801c1b4 	.word	0x0801c1b4
 801a758:	7fefffff 	.word	0x7fefffff
 801a75c:	ea4f 5528 	mov.w	r5, r8, asr #20
 801a760:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 801a764:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 801a768:	4630      	mov	r0, r6
 801a76a:	460f      	mov	r7, r1
 801a76c:	f7e6 fa04 	bl	8000b78 <__aeabi_d2iz>
 801a770:	f7e5 fee8 	bl	8000544 <__aeabi_i2d>
 801a774:	4602      	mov	r2, r0
 801a776:	460b      	mov	r3, r1
 801a778:	4630      	mov	r0, r6
 801a77a:	4639      	mov	r1, r7
 801a77c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801a780:	f7e5 fd92 	bl	80002a8 <__aeabi_dsub>
 801a784:	2200      	movs	r2, #0
 801a786:	4b1f      	ldr	r3, [pc, #124]	; (801a804 <__ieee754_rem_pio2+0x3dc>)
 801a788:	f7e5 ff46 	bl	8000618 <__aeabi_dmul>
 801a78c:	460f      	mov	r7, r1
 801a78e:	4606      	mov	r6, r0
 801a790:	f7e6 f9f2 	bl	8000b78 <__aeabi_d2iz>
 801a794:	f7e5 fed6 	bl	8000544 <__aeabi_i2d>
 801a798:	4602      	mov	r2, r0
 801a79a:	460b      	mov	r3, r1
 801a79c:	4630      	mov	r0, r6
 801a79e:	4639      	mov	r1, r7
 801a7a0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801a7a4:	f7e5 fd80 	bl	80002a8 <__aeabi_dsub>
 801a7a8:	2200      	movs	r2, #0
 801a7aa:	4b16      	ldr	r3, [pc, #88]	; (801a804 <__ieee754_rem_pio2+0x3dc>)
 801a7ac:	f7e5 ff34 	bl	8000618 <__aeabi_dmul>
 801a7b0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801a7b4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 801a7b8:	f04f 0803 	mov.w	r8, #3
 801a7bc:	2600      	movs	r6, #0
 801a7be:	2700      	movs	r7, #0
 801a7c0:	4632      	mov	r2, r6
 801a7c2:	463b      	mov	r3, r7
 801a7c4:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 801a7c8:	f108 3aff 	add.w	sl, r8, #4294967295
 801a7cc:	f7e6 f98c 	bl	8000ae8 <__aeabi_dcmpeq>
 801a7d0:	b9b0      	cbnz	r0, 801a800 <__ieee754_rem_pio2+0x3d8>
 801a7d2:	4b0d      	ldr	r3, [pc, #52]	; (801a808 <__ieee754_rem_pio2+0x3e0>)
 801a7d4:	9301      	str	r3, [sp, #4]
 801a7d6:	2302      	movs	r3, #2
 801a7d8:	9300      	str	r3, [sp, #0]
 801a7da:	462a      	mov	r2, r5
 801a7dc:	4643      	mov	r3, r8
 801a7de:	4621      	mov	r1, r4
 801a7e0:	a806      	add	r0, sp, #24
 801a7e2:	f000 f98d 	bl	801ab00 <__kernel_rem_pio2>
 801a7e6:	9b04      	ldr	r3, [sp, #16]
 801a7e8:	2b00      	cmp	r3, #0
 801a7ea:	4605      	mov	r5, r0
 801a7ec:	f6bf ae58 	bge.w	801a4a0 <__ieee754_rem_pio2+0x78>
 801a7f0:	6863      	ldr	r3, [r4, #4]
 801a7f2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801a7f6:	6063      	str	r3, [r4, #4]
 801a7f8:	68e3      	ldr	r3, [r4, #12]
 801a7fa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801a7fe:	e746      	b.n	801a68e <__ieee754_rem_pio2+0x266>
 801a800:	46d0      	mov	r8, sl
 801a802:	e7dd      	b.n	801a7c0 <__ieee754_rem_pio2+0x398>
 801a804:	41700000 	.word	0x41700000
 801a808:	0801c234 	.word	0x0801c234

0801a80c <__ieee754_sqrt>:
 801a80c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a810:	4955      	ldr	r1, [pc, #340]	; (801a968 <__ieee754_sqrt+0x15c>)
 801a812:	ec55 4b10 	vmov	r4, r5, d0
 801a816:	43a9      	bics	r1, r5
 801a818:	462b      	mov	r3, r5
 801a81a:	462a      	mov	r2, r5
 801a81c:	d112      	bne.n	801a844 <__ieee754_sqrt+0x38>
 801a81e:	ee10 2a10 	vmov	r2, s0
 801a822:	ee10 0a10 	vmov	r0, s0
 801a826:	4629      	mov	r1, r5
 801a828:	f7e5 fef6 	bl	8000618 <__aeabi_dmul>
 801a82c:	4602      	mov	r2, r0
 801a82e:	460b      	mov	r3, r1
 801a830:	4620      	mov	r0, r4
 801a832:	4629      	mov	r1, r5
 801a834:	f7e5 fd3a 	bl	80002ac <__adddf3>
 801a838:	4604      	mov	r4, r0
 801a83a:	460d      	mov	r5, r1
 801a83c:	ec45 4b10 	vmov	d0, r4, r5
 801a840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a844:	2d00      	cmp	r5, #0
 801a846:	ee10 0a10 	vmov	r0, s0
 801a84a:	4621      	mov	r1, r4
 801a84c:	dc0f      	bgt.n	801a86e <__ieee754_sqrt+0x62>
 801a84e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801a852:	4330      	orrs	r0, r6
 801a854:	d0f2      	beq.n	801a83c <__ieee754_sqrt+0x30>
 801a856:	b155      	cbz	r5, 801a86e <__ieee754_sqrt+0x62>
 801a858:	ee10 2a10 	vmov	r2, s0
 801a85c:	4620      	mov	r0, r4
 801a85e:	4629      	mov	r1, r5
 801a860:	f7e5 fd22 	bl	80002a8 <__aeabi_dsub>
 801a864:	4602      	mov	r2, r0
 801a866:	460b      	mov	r3, r1
 801a868:	f7e6 f800 	bl	800086c <__aeabi_ddiv>
 801a86c:	e7e4      	b.n	801a838 <__ieee754_sqrt+0x2c>
 801a86e:	151b      	asrs	r3, r3, #20
 801a870:	d073      	beq.n	801a95a <__ieee754_sqrt+0x14e>
 801a872:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801a876:	07dd      	lsls	r5, r3, #31
 801a878:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801a87c:	bf48      	it	mi
 801a87e:	0fc8      	lsrmi	r0, r1, #31
 801a880:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801a884:	bf44      	itt	mi
 801a886:	0049      	lslmi	r1, r1, #1
 801a888:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 801a88c:	2500      	movs	r5, #0
 801a88e:	1058      	asrs	r0, r3, #1
 801a890:	0fcb      	lsrs	r3, r1, #31
 801a892:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 801a896:	0049      	lsls	r1, r1, #1
 801a898:	2316      	movs	r3, #22
 801a89a:	462c      	mov	r4, r5
 801a89c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 801a8a0:	19a7      	adds	r7, r4, r6
 801a8a2:	4297      	cmp	r7, r2
 801a8a4:	bfde      	ittt	le
 801a8a6:	19bc      	addle	r4, r7, r6
 801a8a8:	1bd2      	suble	r2, r2, r7
 801a8aa:	19ad      	addle	r5, r5, r6
 801a8ac:	0fcf      	lsrs	r7, r1, #31
 801a8ae:	3b01      	subs	r3, #1
 801a8b0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 801a8b4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801a8b8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801a8bc:	d1f0      	bne.n	801a8a0 <__ieee754_sqrt+0x94>
 801a8be:	f04f 0c20 	mov.w	ip, #32
 801a8c2:	469e      	mov	lr, r3
 801a8c4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801a8c8:	42a2      	cmp	r2, r4
 801a8ca:	eb06 070e 	add.w	r7, r6, lr
 801a8ce:	dc02      	bgt.n	801a8d6 <__ieee754_sqrt+0xca>
 801a8d0:	d112      	bne.n	801a8f8 <__ieee754_sqrt+0xec>
 801a8d2:	428f      	cmp	r7, r1
 801a8d4:	d810      	bhi.n	801a8f8 <__ieee754_sqrt+0xec>
 801a8d6:	2f00      	cmp	r7, #0
 801a8d8:	eb07 0e06 	add.w	lr, r7, r6
 801a8dc:	da42      	bge.n	801a964 <__ieee754_sqrt+0x158>
 801a8de:	f1be 0f00 	cmp.w	lr, #0
 801a8e2:	db3f      	blt.n	801a964 <__ieee754_sqrt+0x158>
 801a8e4:	f104 0801 	add.w	r8, r4, #1
 801a8e8:	1b12      	subs	r2, r2, r4
 801a8ea:	428f      	cmp	r7, r1
 801a8ec:	bf88      	it	hi
 801a8ee:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801a8f2:	1bc9      	subs	r1, r1, r7
 801a8f4:	4433      	add	r3, r6
 801a8f6:	4644      	mov	r4, r8
 801a8f8:	0052      	lsls	r2, r2, #1
 801a8fa:	f1bc 0c01 	subs.w	ip, ip, #1
 801a8fe:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 801a902:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801a906:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801a90a:	d1dd      	bne.n	801a8c8 <__ieee754_sqrt+0xbc>
 801a90c:	430a      	orrs	r2, r1
 801a90e:	d006      	beq.n	801a91e <__ieee754_sqrt+0x112>
 801a910:	1c5c      	adds	r4, r3, #1
 801a912:	bf13      	iteet	ne
 801a914:	3301      	addne	r3, #1
 801a916:	3501      	addeq	r5, #1
 801a918:	4663      	moveq	r3, ip
 801a91a:	f023 0301 	bicne.w	r3, r3, #1
 801a91e:	106a      	asrs	r2, r5, #1
 801a920:	085b      	lsrs	r3, r3, #1
 801a922:	07e9      	lsls	r1, r5, #31
 801a924:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801a928:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801a92c:	bf48      	it	mi
 801a92e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801a932:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 801a936:	461c      	mov	r4, r3
 801a938:	e780      	b.n	801a83c <__ieee754_sqrt+0x30>
 801a93a:	0aca      	lsrs	r2, r1, #11
 801a93c:	3815      	subs	r0, #21
 801a93e:	0549      	lsls	r1, r1, #21
 801a940:	2a00      	cmp	r2, #0
 801a942:	d0fa      	beq.n	801a93a <__ieee754_sqrt+0x12e>
 801a944:	02d6      	lsls	r6, r2, #11
 801a946:	d50a      	bpl.n	801a95e <__ieee754_sqrt+0x152>
 801a948:	f1c3 0420 	rsb	r4, r3, #32
 801a94c:	fa21 f404 	lsr.w	r4, r1, r4
 801a950:	1e5d      	subs	r5, r3, #1
 801a952:	4099      	lsls	r1, r3
 801a954:	4322      	orrs	r2, r4
 801a956:	1b43      	subs	r3, r0, r5
 801a958:	e78b      	b.n	801a872 <__ieee754_sqrt+0x66>
 801a95a:	4618      	mov	r0, r3
 801a95c:	e7f0      	b.n	801a940 <__ieee754_sqrt+0x134>
 801a95e:	0052      	lsls	r2, r2, #1
 801a960:	3301      	adds	r3, #1
 801a962:	e7ef      	b.n	801a944 <__ieee754_sqrt+0x138>
 801a964:	46a0      	mov	r8, r4
 801a966:	e7bf      	b.n	801a8e8 <__ieee754_sqrt+0xdc>
 801a968:	7ff00000 	.word	0x7ff00000
 801a96c:	00000000 	.word	0x00000000

0801a970 <__kernel_cos>:
 801a970:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a974:	ec59 8b10 	vmov	r8, r9, d0
 801a978:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 801a97c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 801a980:	ed2d 8b02 	vpush	{d8}
 801a984:	eeb0 8a41 	vmov.f32	s16, s2
 801a988:	eef0 8a61 	vmov.f32	s17, s3
 801a98c:	da07      	bge.n	801a99e <__kernel_cos+0x2e>
 801a98e:	ee10 0a10 	vmov	r0, s0
 801a992:	4649      	mov	r1, r9
 801a994:	f7e6 f8f0 	bl	8000b78 <__aeabi_d2iz>
 801a998:	2800      	cmp	r0, #0
 801a99a:	f000 8089 	beq.w	801aab0 <__kernel_cos+0x140>
 801a99e:	4642      	mov	r2, r8
 801a9a0:	464b      	mov	r3, r9
 801a9a2:	4640      	mov	r0, r8
 801a9a4:	4649      	mov	r1, r9
 801a9a6:	f7e5 fe37 	bl	8000618 <__aeabi_dmul>
 801a9aa:	2200      	movs	r2, #0
 801a9ac:	4b4e      	ldr	r3, [pc, #312]	; (801aae8 <__kernel_cos+0x178>)
 801a9ae:	4604      	mov	r4, r0
 801a9b0:	460d      	mov	r5, r1
 801a9b2:	f7e5 fe31 	bl	8000618 <__aeabi_dmul>
 801a9b6:	a340      	add	r3, pc, #256	; (adr r3, 801aab8 <__kernel_cos+0x148>)
 801a9b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a9bc:	4682      	mov	sl, r0
 801a9be:	468b      	mov	fp, r1
 801a9c0:	4620      	mov	r0, r4
 801a9c2:	4629      	mov	r1, r5
 801a9c4:	f7e5 fe28 	bl	8000618 <__aeabi_dmul>
 801a9c8:	a33d      	add	r3, pc, #244	; (adr r3, 801aac0 <__kernel_cos+0x150>)
 801a9ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a9ce:	f7e5 fc6d 	bl	80002ac <__adddf3>
 801a9d2:	4622      	mov	r2, r4
 801a9d4:	462b      	mov	r3, r5
 801a9d6:	f7e5 fe1f 	bl	8000618 <__aeabi_dmul>
 801a9da:	a33b      	add	r3, pc, #236	; (adr r3, 801aac8 <__kernel_cos+0x158>)
 801a9dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a9e0:	f7e5 fc62 	bl	80002a8 <__aeabi_dsub>
 801a9e4:	4622      	mov	r2, r4
 801a9e6:	462b      	mov	r3, r5
 801a9e8:	f7e5 fe16 	bl	8000618 <__aeabi_dmul>
 801a9ec:	a338      	add	r3, pc, #224	; (adr r3, 801aad0 <__kernel_cos+0x160>)
 801a9ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a9f2:	f7e5 fc5b 	bl	80002ac <__adddf3>
 801a9f6:	4622      	mov	r2, r4
 801a9f8:	462b      	mov	r3, r5
 801a9fa:	f7e5 fe0d 	bl	8000618 <__aeabi_dmul>
 801a9fe:	a336      	add	r3, pc, #216	; (adr r3, 801aad8 <__kernel_cos+0x168>)
 801aa00:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa04:	f7e5 fc50 	bl	80002a8 <__aeabi_dsub>
 801aa08:	4622      	mov	r2, r4
 801aa0a:	462b      	mov	r3, r5
 801aa0c:	f7e5 fe04 	bl	8000618 <__aeabi_dmul>
 801aa10:	a333      	add	r3, pc, #204	; (adr r3, 801aae0 <__kernel_cos+0x170>)
 801aa12:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa16:	f7e5 fc49 	bl	80002ac <__adddf3>
 801aa1a:	4622      	mov	r2, r4
 801aa1c:	462b      	mov	r3, r5
 801aa1e:	f7e5 fdfb 	bl	8000618 <__aeabi_dmul>
 801aa22:	4622      	mov	r2, r4
 801aa24:	462b      	mov	r3, r5
 801aa26:	f7e5 fdf7 	bl	8000618 <__aeabi_dmul>
 801aa2a:	ec53 2b18 	vmov	r2, r3, d8
 801aa2e:	4604      	mov	r4, r0
 801aa30:	460d      	mov	r5, r1
 801aa32:	4640      	mov	r0, r8
 801aa34:	4649      	mov	r1, r9
 801aa36:	f7e5 fdef 	bl	8000618 <__aeabi_dmul>
 801aa3a:	460b      	mov	r3, r1
 801aa3c:	4602      	mov	r2, r0
 801aa3e:	4629      	mov	r1, r5
 801aa40:	4620      	mov	r0, r4
 801aa42:	f7e5 fc31 	bl	80002a8 <__aeabi_dsub>
 801aa46:	4b29      	ldr	r3, [pc, #164]	; (801aaec <__kernel_cos+0x17c>)
 801aa48:	429e      	cmp	r6, r3
 801aa4a:	4680      	mov	r8, r0
 801aa4c:	4689      	mov	r9, r1
 801aa4e:	dc11      	bgt.n	801aa74 <__kernel_cos+0x104>
 801aa50:	4602      	mov	r2, r0
 801aa52:	460b      	mov	r3, r1
 801aa54:	4650      	mov	r0, sl
 801aa56:	4659      	mov	r1, fp
 801aa58:	f7e5 fc26 	bl	80002a8 <__aeabi_dsub>
 801aa5c:	460b      	mov	r3, r1
 801aa5e:	4924      	ldr	r1, [pc, #144]	; (801aaf0 <__kernel_cos+0x180>)
 801aa60:	4602      	mov	r2, r0
 801aa62:	2000      	movs	r0, #0
 801aa64:	f7e5 fc20 	bl	80002a8 <__aeabi_dsub>
 801aa68:	ecbd 8b02 	vpop	{d8}
 801aa6c:	ec41 0b10 	vmov	d0, r0, r1
 801aa70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa74:	4b1f      	ldr	r3, [pc, #124]	; (801aaf4 <__kernel_cos+0x184>)
 801aa76:	491e      	ldr	r1, [pc, #120]	; (801aaf0 <__kernel_cos+0x180>)
 801aa78:	429e      	cmp	r6, r3
 801aa7a:	bfcc      	ite	gt
 801aa7c:	4d1e      	ldrgt	r5, [pc, #120]	; (801aaf8 <__kernel_cos+0x188>)
 801aa7e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 801aa82:	2400      	movs	r4, #0
 801aa84:	4622      	mov	r2, r4
 801aa86:	462b      	mov	r3, r5
 801aa88:	2000      	movs	r0, #0
 801aa8a:	f7e5 fc0d 	bl	80002a8 <__aeabi_dsub>
 801aa8e:	4622      	mov	r2, r4
 801aa90:	4606      	mov	r6, r0
 801aa92:	460f      	mov	r7, r1
 801aa94:	462b      	mov	r3, r5
 801aa96:	4650      	mov	r0, sl
 801aa98:	4659      	mov	r1, fp
 801aa9a:	f7e5 fc05 	bl	80002a8 <__aeabi_dsub>
 801aa9e:	4642      	mov	r2, r8
 801aaa0:	464b      	mov	r3, r9
 801aaa2:	f7e5 fc01 	bl	80002a8 <__aeabi_dsub>
 801aaa6:	4602      	mov	r2, r0
 801aaa8:	460b      	mov	r3, r1
 801aaaa:	4630      	mov	r0, r6
 801aaac:	4639      	mov	r1, r7
 801aaae:	e7d9      	b.n	801aa64 <__kernel_cos+0xf4>
 801aab0:	2000      	movs	r0, #0
 801aab2:	490f      	ldr	r1, [pc, #60]	; (801aaf0 <__kernel_cos+0x180>)
 801aab4:	e7d8      	b.n	801aa68 <__kernel_cos+0xf8>
 801aab6:	bf00      	nop
 801aab8:	be8838d4 	.word	0xbe8838d4
 801aabc:	bda8fae9 	.word	0xbda8fae9
 801aac0:	bdb4b1c4 	.word	0xbdb4b1c4
 801aac4:	3e21ee9e 	.word	0x3e21ee9e
 801aac8:	809c52ad 	.word	0x809c52ad
 801aacc:	3e927e4f 	.word	0x3e927e4f
 801aad0:	19cb1590 	.word	0x19cb1590
 801aad4:	3efa01a0 	.word	0x3efa01a0
 801aad8:	16c15177 	.word	0x16c15177
 801aadc:	3f56c16c 	.word	0x3f56c16c
 801aae0:	5555554c 	.word	0x5555554c
 801aae4:	3fa55555 	.word	0x3fa55555
 801aae8:	3fe00000 	.word	0x3fe00000
 801aaec:	3fd33332 	.word	0x3fd33332
 801aaf0:	3ff00000 	.word	0x3ff00000
 801aaf4:	3fe90000 	.word	0x3fe90000
 801aaf8:	3fd20000 	.word	0x3fd20000
 801aafc:	00000000 	.word	0x00000000

0801ab00 <__kernel_rem_pio2>:
 801ab00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab04:	ed2d 8b02 	vpush	{d8}
 801ab08:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 801ab0c:	1ed4      	subs	r4, r2, #3
 801ab0e:	9308      	str	r3, [sp, #32]
 801ab10:	9101      	str	r1, [sp, #4]
 801ab12:	4bc5      	ldr	r3, [pc, #788]	; (801ae28 <__kernel_rem_pio2+0x328>)
 801ab14:	99a6      	ldr	r1, [sp, #664]	; 0x298
 801ab16:	9009      	str	r0, [sp, #36]	; 0x24
 801ab18:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801ab1c:	9304      	str	r3, [sp, #16]
 801ab1e:	9b08      	ldr	r3, [sp, #32]
 801ab20:	3b01      	subs	r3, #1
 801ab22:	9307      	str	r3, [sp, #28]
 801ab24:	2318      	movs	r3, #24
 801ab26:	fb94 f4f3 	sdiv	r4, r4, r3
 801ab2a:	f06f 0317 	mvn.w	r3, #23
 801ab2e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801ab32:	fb04 3303 	mla	r3, r4, r3, r3
 801ab36:	eb03 0a02 	add.w	sl, r3, r2
 801ab3a:	9b04      	ldr	r3, [sp, #16]
 801ab3c:	9a07      	ldr	r2, [sp, #28]
 801ab3e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 801ae18 <__kernel_rem_pio2+0x318>
 801ab42:	eb03 0802 	add.w	r8, r3, r2
 801ab46:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801ab48:	1aa7      	subs	r7, r4, r2
 801ab4a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801ab4e:	ae22      	add	r6, sp, #136	; 0x88
 801ab50:	2500      	movs	r5, #0
 801ab52:	4545      	cmp	r5, r8
 801ab54:	dd13      	ble.n	801ab7e <__kernel_rem_pio2+0x7e>
 801ab56:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 801ae18 <__kernel_rem_pio2+0x318>
 801ab5a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 801ab5e:	2600      	movs	r6, #0
 801ab60:	9b04      	ldr	r3, [sp, #16]
 801ab62:	429e      	cmp	r6, r3
 801ab64:	dc32      	bgt.n	801abcc <__kernel_rem_pio2+0xcc>
 801ab66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ab68:	9302      	str	r3, [sp, #8]
 801ab6a:	9b08      	ldr	r3, [sp, #32]
 801ab6c:	199d      	adds	r5, r3, r6
 801ab6e:	ab22      	add	r3, sp, #136	; 0x88
 801ab70:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801ab74:	9306      	str	r3, [sp, #24]
 801ab76:	ec59 8b18 	vmov	r8, r9, d8
 801ab7a:	2700      	movs	r7, #0
 801ab7c:	e01f      	b.n	801abbe <__kernel_rem_pio2+0xbe>
 801ab7e:	42ef      	cmn	r7, r5
 801ab80:	d407      	bmi.n	801ab92 <__kernel_rem_pio2+0x92>
 801ab82:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801ab86:	f7e5 fcdd 	bl	8000544 <__aeabi_i2d>
 801ab8a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801ab8e:	3501      	adds	r5, #1
 801ab90:	e7df      	b.n	801ab52 <__kernel_rem_pio2+0x52>
 801ab92:	ec51 0b18 	vmov	r0, r1, d8
 801ab96:	e7f8      	b.n	801ab8a <__kernel_rem_pio2+0x8a>
 801ab98:	9906      	ldr	r1, [sp, #24]
 801ab9a:	9d02      	ldr	r5, [sp, #8]
 801ab9c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 801aba0:	9106      	str	r1, [sp, #24]
 801aba2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 801aba6:	9502      	str	r5, [sp, #8]
 801aba8:	f7e5 fd36 	bl	8000618 <__aeabi_dmul>
 801abac:	4602      	mov	r2, r0
 801abae:	460b      	mov	r3, r1
 801abb0:	4640      	mov	r0, r8
 801abb2:	4649      	mov	r1, r9
 801abb4:	f7e5 fb7a 	bl	80002ac <__adddf3>
 801abb8:	3701      	adds	r7, #1
 801abba:	4680      	mov	r8, r0
 801abbc:	4689      	mov	r9, r1
 801abbe:	9b07      	ldr	r3, [sp, #28]
 801abc0:	429f      	cmp	r7, r3
 801abc2:	dde9      	ble.n	801ab98 <__kernel_rem_pio2+0x98>
 801abc4:	e8eb 8902 	strd	r8, r9, [fp], #8
 801abc8:	3601      	adds	r6, #1
 801abca:	e7c9      	b.n	801ab60 <__kernel_rem_pio2+0x60>
 801abcc:	9b04      	ldr	r3, [sp, #16]
 801abce:	aa0e      	add	r2, sp, #56	; 0x38
 801abd0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801abd4:	930c      	str	r3, [sp, #48]	; 0x30
 801abd6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801abd8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801abdc:	9c04      	ldr	r4, [sp, #16]
 801abde:	930b      	str	r3, [sp, #44]	; 0x2c
 801abe0:	ab9a      	add	r3, sp, #616	; 0x268
 801abe2:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 801abe6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801abea:	f10b 3bff 	add.w	fp, fp, #4294967295
 801abee:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 801abf2:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801abf6:	ab9a      	add	r3, sp, #616	; 0x268
 801abf8:	445b      	add	r3, fp
 801abfa:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 801abfe:	2500      	movs	r5, #0
 801ac00:	1b63      	subs	r3, r4, r5
 801ac02:	2b00      	cmp	r3, #0
 801ac04:	dc78      	bgt.n	801acf8 <__kernel_rem_pio2+0x1f8>
 801ac06:	4650      	mov	r0, sl
 801ac08:	ec49 8b10 	vmov	d0, r8, r9
 801ac0c:	f000 fda8 	bl	801b760 <scalbn>
 801ac10:	ec57 6b10 	vmov	r6, r7, d0
 801ac14:	2200      	movs	r2, #0
 801ac16:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801ac1a:	ee10 0a10 	vmov	r0, s0
 801ac1e:	4639      	mov	r1, r7
 801ac20:	f7e5 fcfa 	bl	8000618 <__aeabi_dmul>
 801ac24:	ec41 0b10 	vmov	d0, r0, r1
 801ac28:	f000 fd12 	bl	801b650 <floor>
 801ac2c:	2200      	movs	r2, #0
 801ac2e:	ec51 0b10 	vmov	r0, r1, d0
 801ac32:	4b7e      	ldr	r3, [pc, #504]	; (801ae2c <__kernel_rem_pio2+0x32c>)
 801ac34:	f7e5 fcf0 	bl	8000618 <__aeabi_dmul>
 801ac38:	4602      	mov	r2, r0
 801ac3a:	460b      	mov	r3, r1
 801ac3c:	4630      	mov	r0, r6
 801ac3e:	4639      	mov	r1, r7
 801ac40:	f7e5 fb32 	bl	80002a8 <__aeabi_dsub>
 801ac44:	460f      	mov	r7, r1
 801ac46:	4606      	mov	r6, r0
 801ac48:	f7e5 ff96 	bl	8000b78 <__aeabi_d2iz>
 801ac4c:	9006      	str	r0, [sp, #24]
 801ac4e:	f7e5 fc79 	bl	8000544 <__aeabi_i2d>
 801ac52:	4602      	mov	r2, r0
 801ac54:	460b      	mov	r3, r1
 801ac56:	4630      	mov	r0, r6
 801ac58:	4639      	mov	r1, r7
 801ac5a:	f7e5 fb25 	bl	80002a8 <__aeabi_dsub>
 801ac5e:	f1ba 0f00 	cmp.w	sl, #0
 801ac62:	4606      	mov	r6, r0
 801ac64:	460f      	mov	r7, r1
 801ac66:	dd6c      	ble.n	801ad42 <__kernel_rem_pio2+0x242>
 801ac68:	1e62      	subs	r2, r4, #1
 801ac6a:	ab0e      	add	r3, sp, #56	; 0x38
 801ac6c:	f1ca 0118 	rsb	r1, sl, #24
 801ac70:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801ac74:	9d06      	ldr	r5, [sp, #24]
 801ac76:	fa40 f301 	asr.w	r3, r0, r1
 801ac7a:	441d      	add	r5, r3
 801ac7c:	408b      	lsls	r3, r1
 801ac7e:	1ac0      	subs	r0, r0, r3
 801ac80:	ab0e      	add	r3, sp, #56	; 0x38
 801ac82:	9506      	str	r5, [sp, #24]
 801ac84:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 801ac88:	f1ca 0317 	rsb	r3, sl, #23
 801ac8c:	fa40 f303 	asr.w	r3, r0, r3
 801ac90:	9302      	str	r3, [sp, #8]
 801ac92:	9b02      	ldr	r3, [sp, #8]
 801ac94:	2b00      	cmp	r3, #0
 801ac96:	dd62      	ble.n	801ad5e <__kernel_rem_pio2+0x25e>
 801ac98:	9b06      	ldr	r3, [sp, #24]
 801ac9a:	2200      	movs	r2, #0
 801ac9c:	3301      	adds	r3, #1
 801ac9e:	9306      	str	r3, [sp, #24]
 801aca0:	4615      	mov	r5, r2
 801aca2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801aca6:	4294      	cmp	r4, r2
 801aca8:	f300 8095 	bgt.w	801add6 <__kernel_rem_pio2+0x2d6>
 801acac:	f1ba 0f00 	cmp.w	sl, #0
 801acb0:	dd07      	ble.n	801acc2 <__kernel_rem_pio2+0x1c2>
 801acb2:	f1ba 0f01 	cmp.w	sl, #1
 801acb6:	f000 80a2 	beq.w	801adfe <__kernel_rem_pio2+0x2fe>
 801acba:	f1ba 0f02 	cmp.w	sl, #2
 801acbe:	f000 80c1 	beq.w	801ae44 <__kernel_rem_pio2+0x344>
 801acc2:	9b02      	ldr	r3, [sp, #8]
 801acc4:	2b02      	cmp	r3, #2
 801acc6:	d14a      	bne.n	801ad5e <__kernel_rem_pio2+0x25e>
 801acc8:	4632      	mov	r2, r6
 801acca:	463b      	mov	r3, r7
 801accc:	2000      	movs	r0, #0
 801acce:	4958      	ldr	r1, [pc, #352]	; (801ae30 <__kernel_rem_pio2+0x330>)
 801acd0:	f7e5 faea 	bl	80002a8 <__aeabi_dsub>
 801acd4:	4606      	mov	r6, r0
 801acd6:	460f      	mov	r7, r1
 801acd8:	2d00      	cmp	r5, #0
 801acda:	d040      	beq.n	801ad5e <__kernel_rem_pio2+0x25e>
 801acdc:	4650      	mov	r0, sl
 801acde:	ed9f 0b50 	vldr	d0, [pc, #320]	; 801ae20 <__kernel_rem_pio2+0x320>
 801ace2:	f000 fd3d 	bl	801b760 <scalbn>
 801ace6:	4630      	mov	r0, r6
 801ace8:	4639      	mov	r1, r7
 801acea:	ec53 2b10 	vmov	r2, r3, d0
 801acee:	f7e5 fadb 	bl	80002a8 <__aeabi_dsub>
 801acf2:	4606      	mov	r6, r0
 801acf4:	460f      	mov	r7, r1
 801acf6:	e032      	b.n	801ad5e <__kernel_rem_pio2+0x25e>
 801acf8:	2200      	movs	r2, #0
 801acfa:	4b4e      	ldr	r3, [pc, #312]	; (801ae34 <__kernel_rem_pio2+0x334>)
 801acfc:	4640      	mov	r0, r8
 801acfe:	4649      	mov	r1, r9
 801ad00:	f7e5 fc8a 	bl	8000618 <__aeabi_dmul>
 801ad04:	f7e5 ff38 	bl	8000b78 <__aeabi_d2iz>
 801ad08:	f7e5 fc1c 	bl	8000544 <__aeabi_i2d>
 801ad0c:	2200      	movs	r2, #0
 801ad0e:	4b4a      	ldr	r3, [pc, #296]	; (801ae38 <__kernel_rem_pio2+0x338>)
 801ad10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ad14:	f7e5 fc80 	bl	8000618 <__aeabi_dmul>
 801ad18:	4602      	mov	r2, r0
 801ad1a:	460b      	mov	r3, r1
 801ad1c:	4640      	mov	r0, r8
 801ad1e:	4649      	mov	r1, r9
 801ad20:	f7e5 fac2 	bl	80002a8 <__aeabi_dsub>
 801ad24:	f7e5 ff28 	bl	8000b78 <__aeabi_d2iz>
 801ad28:	ab0e      	add	r3, sp, #56	; 0x38
 801ad2a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 801ad2e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 801ad32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ad36:	f7e5 fab9 	bl	80002ac <__adddf3>
 801ad3a:	3501      	adds	r5, #1
 801ad3c:	4680      	mov	r8, r0
 801ad3e:	4689      	mov	r9, r1
 801ad40:	e75e      	b.n	801ac00 <__kernel_rem_pio2+0x100>
 801ad42:	d105      	bne.n	801ad50 <__kernel_rem_pio2+0x250>
 801ad44:	1e63      	subs	r3, r4, #1
 801ad46:	aa0e      	add	r2, sp, #56	; 0x38
 801ad48:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801ad4c:	15c3      	asrs	r3, r0, #23
 801ad4e:	e79f      	b.n	801ac90 <__kernel_rem_pio2+0x190>
 801ad50:	2200      	movs	r2, #0
 801ad52:	4b3a      	ldr	r3, [pc, #232]	; (801ae3c <__kernel_rem_pio2+0x33c>)
 801ad54:	f7e5 fee6 	bl	8000b24 <__aeabi_dcmpge>
 801ad58:	2800      	cmp	r0, #0
 801ad5a:	d139      	bne.n	801add0 <__kernel_rem_pio2+0x2d0>
 801ad5c:	9002      	str	r0, [sp, #8]
 801ad5e:	2200      	movs	r2, #0
 801ad60:	2300      	movs	r3, #0
 801ad62:	4630      	mov	r0, r6
 801ad64:	4639      	mov	r1, r7
 801ad66:	f7e5 febf 	bl	8000ae8 <__aeabi_dcmpeq>
 801ad6a:	2800      	cmp	r0, #0
 801ad6c:	f000 80c7 	beq.w	801aefe <__kernel_rem_pio2+0x3fe>
 801ad70:	1e65      	subs	r5, r4, #1
 801ad72:	462b      	mov	r3, r5
 801ad74:	2200      	movs	r2, #0
 801ad76:	9904      	ldr	r1, [sp, #16]
 801ad78:	428b      	cmp	r3, r1
 801ad7a:	da6a      	bge.n	801ae52 <__kernel_rem_pio2+0x352>
 801ad7c:	2a00      	cmp	r2, #0
 801ad7e:	f000 8088 	beq.w	801ae92 <__kernel_rem_pio2+0x392>
 801ad82:	ab0e      	add	r3, sp, #56	; 0x38
 801ad84:	f1aa 0a18 	sub.w	sl, sl, #24
 801ad88:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801ad8c:	2b00      	cmp	r3, #0
 801ad8e:	f000 80b4 	beq.w	801aefa <__kernel_rem_pio2+0x3fa>
 801ad92:	4650      	mov	r0, sl
 801ad94:	ed9f 0b22 	vldr	d0, [pc, #136]	; 801ae20 <__kernel_rem_pio2+0x320>
 801ad98:	f000 fce2 	bl	801b760 <scalbn>
 801ad9c:	00ec      	lsls	r4, r5, #3
 801ad9e:	ab72      	add	r3, sp, #456	; 0x1c8
 801ada0:	191e      	adds	r6, r3, r4
 801ada2:	ec59 8b10 	vmov	r8, r9, d0
 801ada6:	f106 0a08 	add.w	sl, r6, #8
 801adaa:	462f      	mov	r7, r5
 801adac:	2f00      	cmp	r7, #0
 801adae:	f280 80df 	bge.w	801af70 <__kernel_rem_pio2+0x470>
 801adb2:	ed9f 8b19 	vldr	d8, [pc, #100]	; 801ae18 <__kernel_rem_pio2+0x318>
 801adb6:	f04f 0a00 	mov.w	sl, #0
 801adba:	eba5 030a 	sub.w	r3, r5, sl
 801adbe:	2b00      	cmp	r3, #0
 801adc0:	f2c0 810a 	blt.w	801afd8 <__kernel_rem_pio2+0x4d8>
 801adc4:	f8df b078 	ldr.w	fp, [pc, #120]	; 801ae40 <__kernel_rem_pio2+0x340>
 801adc8:	ec59 8b18 	vmov	r8, r9, d8
 801adcc:	2700      	movs	r7, #0
 801adce:	e0f5      	b.n	801afbc <__kernel_rem_pio2+0x4bc>
 801add0:	2302      	movs	r3, #2
 801add2:	9302      	str	r3, [sp, #8]
 801add4:	e760      	b.n	801ac98 <__kernel_rem_pio2+0x198>
 801add6:	ab0e      	add	r3, sp, #56	; 0x38
 801add8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801addc:	b94d      	cbnz	r5, 801adf2 <__kernel_rem_pio2+0x2f2>
 801adde:	b12b      	cbz	r3, 801adec <__kernel_rem_pio2+0x2ec>
 801ade0:	a80e      	add	r0, sp, #56	; 0x38
 801ade2:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801ade6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801adea:	2301      	movs	r3, #1
 801adec:	3201      	adds	r2, #1
 801adee:	461d      	mov	r5, r3
 801adf0:	e759      	b.n	801aca6 <__kernel_rem_pio2+0x1a6>
 801adf2:	a80e      	add	r0, sp, #56	; 0x38
 801adf4:	1acb      	subs	r3, r1, r3
 801adf6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801adfa:	462b      	mov	r3, r5
 801adfc:	e7f6      	b.n	801adec <__kernel_rem_pio2+0x2ec>
 801adfe:	1e62      	subs	r2, r4, #1
 801ae00:	ab0e      	add	r3, sp, #56	; 0x38
 801ae02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ae06:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801ae0a:	a90e      	add	r1, sp, #56	; 0x38
 801ae0c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801ae10:	e757      	b.n	801acc2 <__kernel_rem_pio2+0x1c2>
 801ae12:	bf00      	nop
 801ae14:	f3af 8000 	nop.w
	...
 801ae24:	3ff00000 	.word	0x3ff00000
 801ae28:	0801c380 	.word	0x0801c380
 801ae2c:	40200000 	.word	0x40200000
 801ae30:	3ff00000 	.word	0x3ff00000
 801ae34:	3e700000 	.word	0x3e700000
 801ae38:	41700000 	.word	0x41700000
 801ae3c:	3fe00000 	.word	0x3fe00000
 801ae40:	0801c340 	.word	0x0801c340
 801ae44:	1e62      	subs	r2, r4, #1
 801ae46:	ab0e      	add	r3, sp, #56	; 0x38
 801ae48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ae4c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801ae50:	e7db      	b.n	801ae0a <__kernel_rem_pio2+0x30a>
 801ae52:	a90e      	add	r1, sp, #56	; 0x38
 801ae54:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801ae58:	3b01      	subs	r3, #1
 801ae5a:	430a      	orrs	r2, r1
 801ae5c:	e78b      	b.n	801ad76 <__kernel_rem_pio2+0x276>
 801ae5e:	3301      	adds	r3, #1
 801ae60:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801ae64:	2900      	cmp	r1, #0
 801ae66:	d0fa      	beq.n	801ae5e <__kernel_rem_pio2+0x35e>
 801ae68:	9a08      	ldr	r2, [sp, #32]
 801ae6a:	4422      	add	r2, r4
 801ae6c:	00d2      	lsls	r2, r2, #3
 801ae6e:	a922      	add	r1, sp, #136	; 0x88
 801ae70:	18e3      	adds	r3, r4, r3
 801ae72:	9206      	str	r2, [sp, #24]
 801ae74:	440a      	add	r2, r1
 801ae76:	9302      	str	r3, [sp, #8]
 801ae78:	f10b 0108 	add.w	r1, fp, #8
 801ae7c:	f102 0308 	add.w	r3, r2, #8
 801ae80:	1c66      	adds	r6, r4, #1
 801ae82:	910a      	str	r1, [sp, #40]	; 0x28
 801ae84:	2500      	movs	r5, #0
 801ae86:	930d      	str	r3, [sp, #52]	; 0x34
 801ae88:	9b02      	ldr	r3, [sp, #8]
 801ae8a:	42b3      	cmp	r3, r6
 801ae8c:	da04      	bge.n	801ae98 <__kernel_rem_pio2+0x398>
 801ae8e:	461c      	mov	r4, r3
 801ae90:	e6a6      	b.n	801abe0 <__kernel_rem_pio2+0xe0>
 801ae92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ae94:	2301      	movs	r3, #1
 801ae96:	e7e3      	b.n	801ae60 <__kernel_rem_pio2+0x360>
 801ae98:	9b06      	ldr	r3, [sp, #24]
 801ae9a:	18ef      	adds	r7, r5, r3
 801ae9c:	ab22      	add	r3, sp, #136	; 0x88
 801ae9e:	441f      	add	r7, r3
 801aea0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801aea2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801aea6:	f7e5 fb4d 	bl	8000544 <__aeabi_i2d>
 801aeaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aeac:	461c      	mov	r4, r3
 801aeae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801aeb0:	e9c7 0100 	strd	r0, r1, [r7]
 801aeb4:	eb03 0b05 	add.w	fp, r3, r5
 801aeb8:	2700      	movs	r7, #0
 801aeba:	f04f 0800 	mov.w	r8, #0
 801aebe:	f04f 0900 	mov.w	r9, #0
 801aec2:	9b07      	ldr	r3, [sp, #28]
 801aec4:	429f      	cmp	r7, r3
 801aec6:	dd08      	ble.n	801aeda <__kernel_rem_pio2+0x3da>
 801aec8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801aeca:	aa72      	add	r2, sp, #456	; 0x1c8
 801aecc:	18eb      	adds	r3, r5, r3
 801aece:	4413      	add	r3, r2
 801aed0:	e9c3 8902 	strd	r8, r9, [r3, #8]
 801aed4:	3601      	adds	r6, #1
 801aed6:	3508      	adds	r5, #8
 801aed8:	e7d6      	b.n	801ae88 <__kernel_rem_pio2+0x388>
 801aeda:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801aede:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801aee2:	f7e5 fb99 	bl	8000618 <__aeabi_dmul>
 801aee6:	4602      	mov	r2, r0
 801aee8:	460b      	mov	r3, r1
 801aeea:	4640      	mov	r0, r8
 801aeec:	4649      	mov	r1, r9
 801aeee:	f7e5 f9dd 	bl	80002ac <__adddf3>
 801aef2:	3701      	adds	r7, #1
 801aef4:	4680      	mov	r8, r0
 801aef6:	4689      	mov	r9, r1
 801aef8:	e7e3      	b.n	801aec2 <__kernel_rem_pio2+0x3c2>
 801aefa:	3d01      	subs	r5, #1
 801aefc:	e741      	b.n	801ad82 <__kernel_rem_pio2+0x282>
 801aefe:	f1ca 0000 	rsb	r0, sl, #0
 801af02:	ec47 6b10 	vmov	d0, r6, r7
 801af06:	f000 fc2b 	bl	801b760 <scalbn>
 801af0a:	ec57 6b10 	vmov	r6, r7, d0
 801af0e:	2200      	movs	r2, #0
 801af10:	4b99      	ldr	r3, [pc, #612]	; (801b178 <__kernel_rem_pio2+0x678>)
 801af12:	ee10 0a10 	vmov	r0, s0
 801af16:	4639      	mov	r1, r7
 801af18:	f7e5 fe04 	bl	8000b24 <__aeabi_dcmpge>
 801af1c:	b1f8      	cbz	r0, 801af5e <__kernel_rem_pio2+0x45e>
 801af1e:	2200      	movs	r2, #0
 801af20:	4b96      	ldr	r3, [pc, #600]	; (801b17c <__kernel_rem_pio2+0x67c>)
 801af22:	4630      	mov	r0, r6
 801af24:	4639      	mov	r1, r7
 801af26:	f7e5 fb77 	bl	8000618 <__aeabi_dmul>
 801af2a:	f7e5 fe25 	bl	8000b78 <__aeabi_d2iz>
 801af2e:	4680      	mov	r8, r0
 801af30:	f7e5 fb08 	bl	8000544 <__aeabi_i2d>
 801af34:	2200      	movs	r2, #0
 801af36:	4b90      	ldr	r3, [pc, #576]	; (801b178 <__kernel_rem_pio2+0x678>)
 801af38:	f7e5 fb6e 	bl	8000618 <__aeabi_dmul>
 801af3c:	460b      	mov	r3, r1
 801af3e:	4602      	mov	r2, r0
 801af40:	4639      	mov	r1, r7
 801af42:	4630      	mov	r0, r6
 801af44:	f7e5 f9b0 	bl	80002a8 <__aeabi_dsub>
 801af48:	f7e5 fe16 	bl	8000b78 <__aeabi_d2iz>
 801af4c:	1c65      	adds	r5, r4, #1
 801af4e:	ab0e      	add	r3, sp, #56	; 0x38
 801af50:	f10a 0a18 	add.w	sl, sl, #24
 801af54:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801af58:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801af5c:	e719      	b.n	801ad92 <__kernel_rem_pio2+0x292>
 801af5e:	4630      	mov	r0, r6
 801af60:	4639      	mov	r1, r7
 801af62:	f7e5 fe09 	bl	8000b78 <__aeabi_d2iz>
 801af66:	ab0e      	add	r3, sp, #56	; 0x38
 801af68:	4625      	mov	r5, r4
 801af6a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801af6e:	e710      	b.n	801ad92 <__kernel_rem_pio2+0x292>
 801af70:	ab0e      	add	r3, sp, #56	; 0x38
 801af72:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801af76:	f7e5 fae5 	bl	8000544 <__aeabi_i2d>
 801af7a:	4642      	mov	r2, r8
 801af7c:	464b      	mov	r3, r9
 801af7e:	f7e5 fb4b 	bl	8000618 <__aeabi_dmul>
 801af82:	2200      	movs	r2, #0
 801af84:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 801af88:	4b7c      	ldr	r3, [pc, #496]	; (801b17c <__kernel_rem_pio2+0x67c>)
 801af8a:	4640      	mov	r0, r8
 801af8c:	4649      	mov	r1, r9
 801af8e:	f7e5 fb43 	bl	8000618 <__aeabi_dmul>
 801af92:	3f01      	subs	r7, #1
 801af94:	4680      	mov	r8, r0
 801af96:	4689      	mov	r9, r1
 801af98:	e708      	b.n	801adac <__kernel_rem_pio2+0x2ac>
 801af9a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 801af9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801afa2:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 801afa6:	f7e5 fb37 	bl	8000618 <__aeabi_dmul>
 801afaa:	4602      	mov	r2, r0
 801afac:	460b      	mov	r3, r1
 801afae:	4640      	mov	r0, r8
 801afb0:	4649      	mov	r1, r9
 801afb2:	f7e5 f97b 	bl	80002ac <__adddf3>
 801afb6:	3701      	adds	r7, #1
 801afb8:	4680      	mov	r8, r0
 801afba:	4689      	mov	r9, r1
 801afbc:	9b04      	ldr	r3, [sp, #16]
 801afbe:	429f      	cmp	r7, r3
 801afc0:	dc01      	bgt.n	801afc6 <__kernel_rem_pio2+0x4c6>
 801afc2:	45ba      	cmp	sl, r7
 801afc4:	dae9      	bge.n	801af9a <__kernel_rem_pio2+0x49a>
 801afc6:	ab4a      	add	r3, sp, #296	; 0x128
 801afc8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801afcc:	e9c3 8900 	strd	r8, r9, [r3]
 801afd0:	f10a 0a01 	add.w	sl, sl, #1
 801afd4:	3e08      	subs	r6, #8
 801afd6:	e6f0      	b.n	801adba <__kernel_rem_pio2+0x2ba>
 801afd8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801afda:	2b03      	cmp	r3, #3
 801afdc:	d85b      	bhi.n	801b096 <__kernel_rem_pio2+0x596>
 801afde:	e8df f003 	tbb	[pc, r3]
 801afe2:	264a      	.short	0x264a
 801afe4:	0226      	.short	0x0226
 801afe6:	ab9a      	add	r3, sp, #616	; 0x268
 801afe8:	441c      	add	r4, r3
 801afea:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801afee:	46a2      	mov	sl, r4
 801aff0:	46ab      	mov	fp, r5
 801aff2:	f1bb 0f00 	cmp.w	fp, #0
 801aff6:	dc6c      	bgt.n	801b0d2 <__kernel_rem_pio2+0x5d2>
 801aff8:	46a2      	mov	sl, r4
 801affa:	46ab      	mov	fp, r5
 801affc:	f1bb 0f01 	cmp.w	fp, #1
 801b000:	f300 8086 	bgt.w	801b110 <__kernel_rem_pio2+0x610>
 801b004:	2000      	movs	r0, #0
 801b006:	2100      	movs	r1, #0
 801b008:	2d01      	cmp	r5, #1
 801b00a:	f300 80a0 	bgt.w	801b14e <__kernel_rem_pio2+0x64e>
 801b00e:	9b02      	ldr	r3, [sp, #8]
 801b010:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 801b014:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 801b018:	2b00      	cmp	r3, #0
 801b01a:	f040 809e 	bne.w	801b15a <__kernel_rem_pio2+0x65a>
 801b01e:	9b01      	ldr	r3, [sp, #4]
 801b020:	e9c3 7800 	strd	r7, r8, [r3]
 801b024:	e9c3 5602 	strd	r5, r6, [r3, #8]
 801b028:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801b02c:	e033      	b.n	801b096 <__kernel_rem_pio2+0x596>
 801b02e:	3408      	adds	r4, #8
 801b030:	ab4a      	add	r3, sp, #296	; 0x128
 801b032:	441c      	add	r4, r3
 801b034:	462e      	mov	r6, r5
 801b036:	2000      	movs	r0, #0
 801b038:	2100      	movs	r1, #0
 801b03a:	2e00      	cmp	r6, #0
 801b03c:	da3a      	bge.n	801b0b4 <__kernel_rem_pio2+0x5b4>
 801b03e:	9b02      	ldr	r3, [sp, #8]
 801b040:	2b00      	cmp	r3, #0
 801b042:	d03d      	beq.n	801b0c0 <__kernel_rem_pio2+0x5c0>
 801b044:	4602      	mov	r2, r0
 801b046:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b04a:	9c01      	ldr	r4, [sp, #4]
 801b04c:	e9c4 2300 	strd	r2, r3, [r4]
 801b050:	4602      	mov	r2, r0
 801b052:	460b      	mov	r3, r1
 801b054:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 801b058:	f7e5 f926 	bl	80002a8 <__aeabi_dsub>
 801b05c:	ae4c      	add	r6, sp, #304	; 0x130
 801b05e:	2401      	movs	r4, #1
 801b060:	42a5      	cmp	r5, r4
 801b062:	da30      	bge.n	801b0c6 <__kernel_rem_pio2+0x5c6>
 801b064:	9b02      	ldr	r3, [sp, #8]
 801b066:	b113      	cbz	r3, 801b06e <__kernel_rem_pio2+0x56e>
 801b068:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b06c:	4619      	mov	r1, r3
 801b06e:	9b01      	ldr	r3, [sp, #4]
 801b070:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801b074:	e00f      	b.n	801b096 <__kernel_rem_pio2+0x596>
 801b076:	ab9a      	add	r3, sp, #616	; 0x268
 801b078:	441c      	add	r4, r3
 801b07a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801b07e:	2000      	movs	r0, #0
 801b080:	2100      	movs	r1, #0
 801b082:	2d00      	cmp	r5, #0
 801b084:	da10      	bge.n	801b0a8 <__kernel_rem_pio2+0x5a8>
 801b086:	9b02      	ldr	r3, [sp, #8]
 801b088:	b113      	cbz	r3, 801b090 <__kernel_rem_pio2+0x590>
 801b08a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b08e:	4619      	mov	r1, r3
 801b090:	9b01      	ldr	r3, [sp, #4]
 801b092:	e9c3 0100 	strd	r0, r1, [r3]
 801b096:	9b06      	ldr	r3, [sp, #24]
 801b098:	f003 0007 	and.w	r0, r3, #7
 801b09c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 801b0a0:	ecbd 8b02 	vpop	{d8}
 801b0a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b0a8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801b0ac:	f7e5 f8fe 	bl	80002ac <__adddf3>
 801b0b0:	3d01      	subs	r5, #1
 801b0b2:	e7e6      	b.n	801b082 <__kernel_rem_pio2+0x582>
 801b0b4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801b0b8:	f7e5 f8f8 	bl	80002ac <__adddf3>
 801b0bc:	3e01      	subs	r6, #1
 801b0be:	e7bc      	b.n	801b03a <__kernel_rem_pio2+0x53a>
 801b0c0:	4602      	mov	r2, r0
 801b0c2:	460b      	mov	r3, r1
 801b0c4:	e7c1      	b.n	801b04a <__kernel_rem_pio2+0x54a>
 801b0c6:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801b0ca:	f7e5 f8ef 	bl	80002ac <__adddf3>
 801b0ce:	3401      	adds	r4, #1
 801b0d0:	e7c6      	b.n	801b060 <__kernel_rem_pio2+0x560>
 801b0d2:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 801b0d6:	ed3a 7b02 	vldmdb	sl!, {d7}
 801b0da:	4640      	mov	r0, r8
 801b0dc:	ec53 2b17 	vmov	r2, r3, d7
 801b0e0:	4649      	mov	r1, r9
 801b0e2:	ed8d 7b04 	vstr	d7, [sp, #16]
 801b0e6:	f7e5 f8e1 	bl	80002ac <__adddf3>
 801b0ea:	4602      	mov	r2, r0
 801b0ec:	460b      	mov	r3, r1
 801b0ee:	4606      	mov	r6, r0
 801b0f0:	460f      	mov	r7, r1
 801b0f2:	4640      	mov	r0, r8
 801b0f4:	4649      	mov	r1, r9
 801b0f6:	f7e5 f8d7 	bl	80002a8 <__aeabi_dsub>
 801b0fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801b0fe:	f7e5 f8d5 	bl	80002ac <__adddf3>
 801b102:	f10b 3bff 	add.w	fp, fp, #4294967295
 801b106:	e9ca 0100 	strd	r0, r1, [sl]
 801b10a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 801b10e:	e770      	b.n	801aff2 <__kernel_rem_pio2+0x4f2>
 801b110:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 801b114:	ed3a 7b02 	vldmdb	sl!, {d7}
 801b118:	4630      	mov	r0, r6
 801b11a:	ec53 2b17 	vmov	r2, r3, d7
 801b11e:	4639      	mov	r1, r7
 801b120:	ed8d 7b04 	vstr	d7, [sp, #16]
 801b124:	f7e5 f8c2 	bl	80002ac <__adddf3>
 801b128:	4602      	mov	r2, r0
 801b12a:	460b      	mov	r3, r1
 801b12c:	4680      	mov	r8, r0
 801b12e:	4689      	mov	r9, r1
 801b130:	4630      	mov	r0, r6
 801b132:	4639      	mov	r1, r7
 801b134:	f7e5 f8b8 	bl	80002a8 <__aeabi_dsub>
 801b138:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801b13c:	f7e5 f8b6 	bl	80002ac <__adddf3>
 801b140:	f10b 3bff 	add.w	fp, fp, #4294967295
 801b144:	e9ca 0100 	strd	r0, r1, [sl]
 801b148:	e94a 8902 	strd	r8, r9, [sl, #-8]
 801b14c:	e756      	b.n	801affc <__kernel_rem_pio2+0x4fc>
 801b14e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801b152:	f7e5 f8ab 	bl	80002ac <__adddf3>
 801b156:	3d01      	subs	r5, #1
 801b158:	e756      	b.n	801b008 <__kernel_rem_pio2+0x508>
 801b15a:	9b01      	ldr	r3, [sp, #4]
 801b15c:	9a01      	ldr	r2, [sp, #4]
 801b15e:	601f      	str	r7, [r3, #0]
 801b160:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 801b164:	605c      	str	r4, [r3, #4]
 801b166:	609d      	str	r5, [r3, #8]
 801b168:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801b16c:	60d3      	str	r3, [r2, #12]
 801b16e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b172:	6110      	str	r0, [r2, #16]
 801b174:	6153      	str	r3, [r2, #20]
 801b176:	e78e      	b.n	801b096 <__kernel_rem_pio2+0x596>
 801b178:	41700000 	.word	0x41700000
 801b17c:	3e700000 	.word	0x3e700000

0801b180 <__kernel_sin>:
 801b180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b184:	ec55 4b10 	vmov	r4, r5, d0
 801b188:	b085      	sub	sp, #20
 801b18a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801b18e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801b192:	ed8d 1b00 	vstr	d1, [sp]
 801b196:	9002      	str	r0, [sp, #8]
 801b198:	da06      	bge.n	801b1a8 <__kernel_sin+0x28>
 801b19a:	ee10 0a10 	vmov	r0, s0
 801b19e:	4629      	mov	r1, r5
 801b1a0:	f7e5 fcea 	bl	8000b78 <__aeabi_d2iz>
 801b1a4:	2800      	cmp	r0, #0
 801b1a6:	d051      	beq.n	801b24c <__kernel_sin+0xcc>
 801b1a8:	4622      	mov	r2, r4
 801b1aa:	462b      	mov	r3, r5
 801b1ac:	4620      	mov	r0, r4
 801b1ae:	4629      	mov	r1, r5
 801b1b0:	f7e5 fa32 	bl	8000618 <__aeabi_dmul>
 801b1b4:	4682      	mov	sl, r0
 801b1b6:	468b      	mov	fp, r1
 801b1b8:	4602      	mov	r2, r0
 801b1ba:	460b      	mov	r3, r1
 801b1bc:	4620      	mov	r0, r4
 801b1be:	4629      	mov	r1, r5
 801b1c0:	f7e5 fa2a 	bl	8000618 <__aeabi_dmul>
 801b1c4:	a341      	add	r3, pc, #260	; (adr r3, 801b2cc <__kernel_sin+0x14c>)
 801b1c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1ca:	4680      	mov	r8, r0
 801b1cc:	4689      	mov	r9, r1
 801b1ce:	4650      	mov	r0, sl
 801b1d0:	4659      	mov	r1, fp
 801b1d2:	f7e5 fa21 	bl	8000618 <__aeabi_dmul>
 801b1d6:	a33f      	add	r3, pc, #252	; (adr r3, 801b2d4 <__kernel_sin+0x154>)
 801b1d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1dc:	f7e5 f864 	bl	80002a8 <__aeabi_dsub>
 801b1e0:	4652      	mov	r2, sl
 801b1e2:	465b      	mov	r3, fp
 801b1e4:	f7e5 fa18 	bl	8000618 <__aeabi_dmul>
 801b1e8:	a33c      	add	r3, pc, #240	; (adr r3, 801b2dc <__kernel_sin+0x15c>)
 801b1ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1ee:	f7e5 f85d 	bl	80002ac <__adddf3>
 801b1f2:	4652      	mov	r2, sl
 801b1f4:	465b      	mov	r3, fp
 801b1f6:	f7e5 fa0f 	bl	8000618 <__aeabi_dmul>
 801b1fa:	a33a      	add	r3, pc, #232	; (adr r3, 801b2e4 <__kernel_sin+0x164>)
 801b1fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b200:	f7e5 f852 	bl	80002a8 <__aeabi_dsub>
 801b204:	4652      	mov	r2, sl
 801b206:	465b      	mov	r3, fp
 801b208:	f7e5 fa06 	bl	8000618 <__aeabi_dmul>
 801b20c:	a337      	add	r3, pc, #220	; (adr r3, 801b2ec <__kernel_sin+0x16c>)
 801b20e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b212:	f7e5 f84b 	bl	80002ac <__adddf3>
 801b216:	9b02      	ldr	r3, [sp, #8]
 801b218:	4606      	mov	r6, r0
 801b21a:	460f      	mov	r7, r1
 801b21c:	b9db      	cbnz	r3, 801b256 <__kernel_sin+0xd6>
 801b21e:	4602      	mov	r2, r0
 801b220:	460b      	mov	r3, r1
 801b222:	4650      	mov	r0, sl
 801b224:	4659      	mov	r1, fp
 801b226:	f7e5 f9f7 	bl	8000618 <__aeabi_dmul>
 801b22a:	a325      	add	r3, pc, #148	; (adr r3, 801b2c0 <__kernel_sin+0x140>)
 801b22c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b230:	f7e5 f83a 	bl	80002a8 <__aeabi_dsub>
 801b234:	4642      	mov	r2, r8
 801b236:	464b      	mov	r3, r9
 801b238:	f7e5 f9ee 	bl	8000618 <__aeabi_dmul>
 801b23c:	4602      	mov	r2, r0
 801b23e:	460b      	mov	r3, r1
 801b240:	4620      	mov	r0, r4
 801b242:	4629      	mov	r1, r5
 801b244:	f7e5 f832 	bl	80002ac <__adddf3>
 801b248:	4604      	mov	r4, r0
 801b24a:	460d      	mov	r5, r1
 801b24c:	ec45 4b10 	vmov	d0, r4, r5
 801b250:	b005      	add	sp, #20
 801b252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b256:	2200      	movs	r2, #0
 801b258:	4b1b      	ldr	r3, [pc, #108]	; (801b2c8 <__kernel_sin+0x148>)
 801b25a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b25e:	f7e5 f9db 	bl	8000618 <__aeabi_dmul>
 801b262:	4632      	mov	r2, r6
 801b264:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b268:	463b      	mov	r3, r7
 801b26a:	4640      	mov	r0, r8
 801b26c:	4649      	mov	r1, r9
 801b26e:	f7e5 f9d3 	bl	8000618 <__aeabi_dmul>
 801b272:	4602      	mov	r2, r0
 801b274:	460b      	mov	r3, r1
 801b276:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b27a:	f7e5 f815 	bl	80002a8 <__aeabi_dsub>
 801b27e:	4652      	mov	r2, sl
 801b280:	465b      	mov	r3, fp
 801b282:	f7e5 f9c9 	bl	8000618 <__aeabi_dmul>
 801b286:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b28a:	f7e5 f80d 	bl	80002a8 <__aeabi_dsub>
 801b28e:	a30c      	add	r3, pc, #48	; (adr r3, 801b2c0 <__kernel_sin+0x140>)
 801b290:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b294:	4606      	mov	r6, r0
 801b296:	460f      	mov	r7, r1
 801b298:	4640      	mov	r0, r8
 801b29a:	4649      	mov	r1, r9
 801b29c:	f7e5 f9bc 	bl	8000618 <__aeabi_dmul>
 801b2a0:	4602      	mov	r2, r0
 801b2a2:	460b      	mov	r3, r1
 801b2a4:	4630      	mov	r0, r6
 801b2a6:	4639      	mov	r1, r7
 801b2a8:	f7e5 f800 	bl	80002ac <__adddf3>
 801b2ac:	4602      	mov	r2, r0
 801b2ae:	460b      	mov	r3, r1
 801b2b0:	4620      	mov	r0, r4
 801b2b2:	4629      	mov	r1, r5
 801b2b4:	f7e4 fff8 	bl	80002a8 <__aeabi_dsub>
 801b2b8:	e7c6      	b.n	801b248 <__kernel_sin+0xc8>
 801b2ba:	bf00      	nop
 801b2bc:	f3af 8000 	nop.w
 801b2c0:	55555549 	.word	0x55555549
 801b2c4:	3fc55555 	.word	0x3fc55555
 801b2c8:	3fe00000 	.word	0x3fe00000
 801b2cc:	5acfd57c 	.word	0x5acfd57c
 801b2d0:	3de5d93a 	.word	0x3de5d93a
 801b2d4:	8a2b9ceb 	.word	0x8a2b9ceb
 801b2d8:	3e5ae5e6 	.word	0x3e5ae5e6
 801b2dc:	57b1fe7d 	.word	0x57b1fe7d
 801b2e0:	3ec71de3 	.word	0x3ec71de3
 801b2e4:	19c161d5 	.word	0x19c161d5
 801b2e8:	3f2a01a0 	.word	0x3f2a01a0
 801b2ec:	1110f8a6 	.word	0x1110f8a6
 801b2f0:	3f811111 	.word	0x3f811111
 801b2f4:	00000000 	.word	0x00000000

0801b2f8 <atan>:
 801b2f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b2fc:	ec55 4b10 	vmov	r4, r5, d0
 801b300:	4bc3      	ldr	r3, [pc, #780]	; (801b610 <atan+0x318>)
 801b302:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801b306:	429e      	cmp	r6, r3
 801b308:	46ab      	mov	fp, r5
 801b30a:	dd18      	ble.n	801b33e <atan+0x46>
 801b30c:	4bc1      	ldr	r3, [pc, #772]	; (801b614 <atan+0x31c>)
 801b30e:	429e      	cmp	r6, r3
 801b310:	dc01      	bgt.n	801b316 <atan+0x1e>
 801b312:	d109      	bne.n	801b328 <atan+0x30>
 801b314:	b144      	cbz	r4, 801b328 <atan+0x30>
 801b316:	4622      	mov	r2, r4
 801b318:	462b      	mov	r3, r5
 801b31a:	4620      	mov	r0, r4
 801b31c:	4629      	mov	r1, r5
 801b31e:	f7e4 ffc5 	bl	80002ac <__adddf3>
 801b322:	4604      	mov	r4, r0
 801b324:	460d      	mov	r5, r1
 801b326:	e006      	b.n	801b336 <atan+0x3e>
 801b328:	f1bb 0f00 	cmp.w	fp, #0
 801b32c:	f340 8131 	ble.w	801b592 <atan+0x29a>
 801b330:	a59b      	add	r5, pc, #620	; (adr r5, 801b5a0 <atan+0x2a8>)
 801b332:	e9d5 4500 	ldrd	r4, r5, [r5]
 801b336:	ec45 4b10 	vmov	d0, r4, r5
 801b33a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b33e:	4bb6      	ldr	r3, [pc, #728]	; (801b618 <atan+0x320>)
 801b340:	429e      	cmp	r6, r3
 801b342:	dc14      	bgt.n	801b36e <atan+0x76>
 801b344:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 801b348:	429e      	cmp	r6, r3
 801b34a:	dc0d      	bgt.n	801b368 <atan+0x70>
 801b34c:	a396      	add	r3, pc, #600	; (adr r3, 801b5a8 <atan+0x2b0>)
 801b34e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b352:	ee10 0a10 	vmov	r0, s0
 801b356:	4629      	mov	r1, r5
 801b358:	f7e4 ffa8 	bl	80002ac <__adddf3>
 801b35c:	2200      	movs	r2, #0
 801b35e:	4baf      	ldr	r3, [pc, #700]	; (801b61c <atan+0x324>)
 801b360:	f7e5 fbea 	bl	8000b38 <__aeabi_dcmpgt>
 801b364:	2800      	cmp	r0, #0
 801b366:	d1e6      	bne.n	801b336 <atan+0x3e>
 801b368:	f04f 3aff 	mov.w	sl, #4294967295
 801b36c:	e02b      	b.n	801b3c6 <atan+0xce>
 801b36e:	f000 f963 	bl	801b638 <fabs>
 801b372:	4bab      	ldr	r3, [pc, #684]	; (801b620 <atan+0x328>)
 801b374:	429e      	cmp	r6, r3
 801b376:	ec55 4b10 	vmov	r4, r5, d0
 801b37a:	f300 80bf 	bgt.w	801b4fc <atan+0x204>
 801b37e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801b382:	429e      	cmp	r6, r3
 801b384:	f300 80a0 	bgt.w	801b4c8 <atan+0x1d0>
 801b388:	ee10 2a10 	vmov	r2, s0
 801b38c:	ee10 0a10 	vmov	r0, s0
 801b390:	462b      	mov	r3, r5
 801b392:	4629      	mov	r1, r5
 801b394:	f7e4 ff8a 	bl	80002ac <__adddf3>
 801b398:	2200      	movs	r2, #0
 801b39a:	4ba0      	ldr	r3, [pc, #640]	; (801b61c <atan+0x324>)
 801b39c:	f7e4 ff84 	bl	80002a8 <__aeabi_dsub>
 801b3a0:	2200      	movs	r2, #0
 801b3a2:	4606      	mov	r6, r0
 801b3a4:	460f      	mov	r7, r1
 801b3a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801b3aa:	4620      	mov	r0, r4
 801b3ac:	4629      	mov	r1, r5
 801b3ae:	f7e4 ff7d 	bl	80002ac <__adddf3>
 801b3b2:	4602      	mov	r2, r0
 801b3b4:	460b      	mov	r3, r1
 801b3b6:	4630      	mov	r0, r6
 801b3b8:	4639      	mov	r1, r7
 801b3ba:	f7e5 fa57 	bl	800086c <__aeabi_ddiv>
 801b3be:	f04f 0a00 	mov.w	sl, #0
 801b3c2:	4604      	mov	r4, r0
 801b3c4:	460d      	mov	r5, r1
 801b3c6:	4622      	mov	r2, r4
 801b3c8:	462b      	mov	r3, r5
 801b3ca:	4620      	mov	r0, r4
 801b3cc:	4629      	mov	r1, r5
 801b3ce:	f7e5 f923 	bl	8000618 <__aeabi_dmul>
 801b3d2:	4602      	mov	r2, r0
 801b3d4:	460b      	mov	r3, r1
 801b3d6:	4680      	mov	r8, r0
 801b3d8:	4689      	mov	r9, r1
 801b3da:	f7e5 f91d 	bl	8000618 <__aeabi_dmul>
 801b3de:	a374      	add	r3, pc, #464	; (adr r3, 801b5b0 <atan+0x2b8>)
 801b3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b3e4:	4606      	mov	r6, r0
 801b3e6:	460f      	mov	r7, r1
 801b3e8:	f7e5 f916 	bl	8000618 <__aeabi_dmul>
 801b3ec:	a372      	add	r3, pc, #456	; (adr r3, 801b5b8 <atan+0x2c0>)
 801b3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b3f2:	f7e4 ff5b 	bl	80002ac <__adddf3>
 801b3f6:	4632      	mov	r2, r6
 801b3f8:	463b      	mov	r3, r7
 801b3fa:	f7e5 f90d 	bl	8000618 <__aeabi_dmul>
 801b3fe:	a370      	add	r3, pc, #448	; (adr r3, 801b5c0 <atan+0x2c8>)
 801b400:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b404:	f7e4 ff52 	bl	80002ac <__adddf3>
 801b408:	4632      	mov	r2, r6
 801b40a:	463b      	mov	r3, r7
 801b40c:	f7e5 f904 	bl	8000618 <__aeabi_dmul>
 801b410:	a36d      	add	r3, pc, #436	; (adr r3, 801b5c8 <atan+0x2d0>)
 801b412:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b416:	f7e4 ff49 	bl	80002ac <__adddf3>
 801b41a:	4632      	mov	r2, r6
 801b41c:	463b      	mov	r3, r7
 801b41e:	f7e5 f8fb 	bl	8000618 <__aeabi_dmul>
 801b422:	a36b      	add	r3, pc, #428	; (adr r3, 801b5d0 <atan+0x2d8>)
 801b424:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b428:	f7e4 ff40 	bl	80002ac <__adddf3>
 801b42c:	4632      	mov	r2, r6
 801b42e:	463b      	mov	r3, r7
 801b430:	f7e5 f8f2 	bl	8000618 <__aeabi_dmul>
 801b434:	a368      	add	r3, pc, #416	; (adr r3, 801b5d8 <atan+0x2e0>)
 801b436:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b43a:	f7e4 ff37 	bl	80002ac <__adddf3>
 801b43e:	4642      	mov	r2, r8
 801b440:	464b      	mov	r3, r9
 801b442:	f7e5 f8e9 	bl	8000618 <__aeabi_dmul>
 801b446:	a366      	add	r3, pc, #408	; (adr r3, 801b5e0 <atan+0x2e8>)
 801b448:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b44c:	4680      	mov	r8, r0
 801b44e:	4689      	mov	r9, r1
 801b450:	4630      	mov	r0, r6
 801b452:	4639      	mov	r1, r7
 801b454:	f7e5 f8e0 	bl	8000618 <__aeabi_dmul>
 801b458:	a363      	add	r3, pc, #396	; (adr r3, 801b5e8 <atan+0x2f0>)
 801b45a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b45e:	f7e4 ff23 	bl	80002a8 <__aeabi_dsub>
 801b462:	4632      	mov	r2, r6
 801b464:	463b      	mov	r3, r7
 801b466:	f7e5 f8d7 	bl	8000618 <__aeabi_dmul>
 801b46a:	a361      	add	r3, pc, #388	; (adr r3, 801b5f0 <atan+0x2f8>)
 801b46c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b470:	f7e4 ff1a 	bl	80002a8 <__aeabi_dsub>
 801b474:	4632      	mov	r2, r6
 801b476:	463b      	mov	r3, r7
 801b478:	f7e5 f8ce 	bl	8000618 <__aeabi_dmul>
 801b47c:	a35e      	add	r3, pc, #376	; (adr r3, 801b5f8 <atan+0x300>)
 801b47e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b482:	f7e4 ff11 	bl	80002a8 <__aeabi_dsub>
 801b486:	4632      	mov	r2, r6
 801b488:	463b      	mov	r3, r7
 801b48a:	f7e5 f8c5 	bl	8000618 <__aeabi_dmul>
 801b48e:	a35c      	add	r3, pc, #368	; (adr r3, 801b600 <atan+0x308>)
 801b490:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b494:	f7e4 ff08 	bl	80002a8 <__aeabi_dsub>
 801b498:	4632      	mov	r2, r6
 801b49a:	463b      	mov	r3, r7
 801b49c:	f7e5 f8bc 	bl	8000618 <__aeabi_dmul>
 801b4a0:	4602      	mov	r2, r0
 801b4a2:	460b      	mov	r3, r1
 801b4a4:	4640      	mov	r0, r8
 801b4a6:	4649      	mov	r1, r9
 801b4a8:	f7e4 ff00 	bl	80002ac <__adddf3>
 801b4ac:	4622      	mov	r2, r4
 801b4ae:	462b      	mov	r3, r5
 801b4b0:	f7e5 f8b2 	bl	8000618 <__aeabi_dmul>
 801b4b4:	f1ba 3fff 	cmp.w	sl, #4294967295
 801b4b8:	4602      	mov	r2, r0
 801b4ba:	460b      	mov	r3, r1
 801b4bc:	d14b      	bne.n	801b556 <atan+0x25e>
 801b4be:	4620      	mov	r0, r4
 801b4c0:	4629      	mov	r1, r5
 801b4c2:	f7e4 fef1 	bl	80002a8 <__aeabi_dsub>
 801b4c6:	e72c      	b.n	801b322 <atan+0x2a>
 801b4c8:	ee10 0a10 	vmov	r0, s0
 801b4cc:	2200      	movs	r2, #0
 801b4ce:	4b53      	ldr	r3, [pc, #332]	; (801b61c <atan+0x324>)
 801b4d0:	4629      	mov	r1, r5
 801b4d2:	f7e4 fee9 	bl	80002a8 <__aeabi_dsub>
 801b4d6:	2200      	movs	r2, #0
 801b4d8:	4606      	mov	r6, r0
 801b4da:	460f      	mov	r7, r1
 801b4dc:	4b4f      	ldr	r3, [pc, #316]	; (801b61c <atan+0x324>)
 801b4de:	4620      	mov	r0, r4
 801b4e0:	4629      	mov	r1, r5
 801b4e2:	f7e4 fee3 	bl	80002ac <__adddf3>
 801b4e6:	4602      	mov	r2, r0
 801b4e8:	460b      	mov	r3, r1
 801b4ea:	4630      	mov	r0, r6
 801b4ec:	4639      	mov	r1, r7
 801b4ee:	f7e5 f9bd 	bl	800086c <__aeabi_ddiv>
 801b4f2:	f04f 0a01 	mov.w	sl, #1
 801b4f6:	4604      	mov	r4, r0
 801b4f8:	460d      	mov	r5, r1
 801b4fa:	e764      	b.n	801b3c6 <atan+0xce>
 801b4fc:	4b49      	ldr	r3, [pc, #292]	; (801b624 <atan+0x32c>)
 801b4fe:	429e      	cmp	r6, r3
 801b500:	dc1d      	bgt.n	801b53e <atan+0x246>
 801b502:	ee10 0a10 	vmov	r0, s0
 801b506:	2200      	movs	r2, #0
 801b508:	4b47      	ldr	r3, [pc, #284]	; (801b628 <atan+0x330>)
 801b50a:	4629      	mov	r1, r5
 801b50c:	f7e4 fecc 	bl	80002a8 <__aeabi_dsub>
 801b510:	2200      	movs	r2, #0
 801b512:	4606      	mov	r6, r0
 801b514:	460f      	mov	r7, r1
 801b516:	4b44      	ldr	r3, [pc, #272]	; (801b628 <atan+0x330>)
 801b518:	4620      	mov	r0, r4
 801b51a:	4629      	mov	r1, r5
 801b51c:	f7e5 f87c 	bl	8000618 <__aeabi_dmul>
 801b520:	2200      	movs	r2, #0
 801b522:	4b3e      	ldr	r3, [pc, #248]	; (801b61c <atan+0x324>)
 801b524:	f7e4 fec2 	bl	80002ac <__adddf3>
 801b528:	4602      	mov	r2, r0
 801b52a:	460b      	mov	r3, r1
 801b52c:	4630      	mov	r0, r6
 801b52e:	4639      	mov	r1, r7
 801b530:	f7e5 f99c 	bl	800086c <__aeabi_ddiv>
 801b534:	f04f 0a02 	mov.w	sl, #2
 801b538:	4604      	mov	r4, r0
 801b53a:	460d      	mov	r5, r1
 801b53c:	e743      	b.n	801b3c6 <atan+0xce>
 801b53e:	462b      	mov	r3, r5
 801b540:	ee10 2a10 	vmov	r2, s0
 801b544:	2000      	movs	r0, #0
 801b546:	4939      	ldr	r1, [pc, #228]	; (801b62c <atan+0x334>)
 801b548:	f7e5 f990 	bl	800086c <__aeabi_ddiv>
 801b54c:	f04f 0a03 	mov.w	sl, #3
 801b550:	4604      	mov	r4, r0
 801b552:	460d      	mov	r5, r1
 801b554:	e737      	b.n	801b3c6 <atan+0xce>
 801b556:	4b36      	ldr	r3, [pc, #216]	; (801b630 <atan+0x338>)
 801b558:	4e36      	ldr	r6, [pc, #216]	; (801b634 <atan+0x33c>)
 801b55a:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 801b55e:	4456      	add	r6, sl
 801b560:	449a      	add	sl, r3
 801b562:	e9da 2300 	ldrd	r2, r3, [sl]
 801b566:	f7e4 fe9f 	bl	80002a8 <__aeabi_dsub>
 801b56a:	4622      	mov	r2, r4
 801b56c:	462b      	mov	r3, r5
 801b56e:	f7e4 fe9b 	bl	80002a8 <__aeabi_dsub>
 801b572:	4602      	mov	r2, r0
 801b574:	460b      	mov	r3, r1
 801b576:	e9d6 0100 	ldrd	r0, r1, [r6]
 801b57a:	f7e4 fe95 	bl	80002a8 <__aeabi_dsub>
 801b57e:	f1bb 0f00 	cmp.w	fp, #0
 801b582:	4604      	mov	r4, r0
 801b584:	460d      	mov	r5, r1
 801b586:	f6bf aed6 	bge.w	801b336 <atan+0x3e>
 801b58a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b58e:	461d      	mov	r5, r3
 801b590:	e6d1      	b.n	801b336 <atan+0x3e>
 801b592:	a51d      	add	r5, pc, #116	; (adr r5, 801b608 <atan+0x310>)
 801b594:	e9d5 4500 	ldrd	r4, r5, [r5]
 801b598:	e6cd      	b.n	801b336 <atan+0x3e>
 801b59a:	bf00      	nop
 801b59c:	f3af 8000 	nop.w
 801b5a0:	54442d18 	.word	0x54442d18
 801b5a4:	3ff921fb 	.word	0x3ff921fb
 801b5a8:	8800759c 	.word	0x8800759c
 801b5ac:	7e37e43c 	.word	0x7e37e43c
 801b5b0:	e322da11 	.word	0xe322da11
 801b5b4:	3f90ad3a 	.word	0x3f90ad3a
 801b5b8:	24760deb 	.word	0x24760deb
 801b5bc:	3fa97b4b 	.word	0x3fa97b4b
 801b5c0:	a0d03d51 	.word	0xa0d03d51
 801b5c4:	3fb10d66 	.word	0x3fb10d66
 801b5c8:	c54c206e 	.word	0xc54c206e
 801b5cc:	3fb745cd 	.word	0x3fb745cd
 801b5d0:	920083ff 	.word	0x920083ff
 801b5d4:	3fc24924 	.word	0x3fc24924
 801b5d8:	5555550d 	.word	0x5555550d
 801b5dc:	3fd55555 	.word	0x3fd55555
 801b5e0:	2c6a6c2f 	.word	0x2c6a6c2f
 801b5e4:	bfa2b444 	.word	0xbfa2b444
 801b5e8:	52defd9a 	.word	0x52defd9a
 801b5ec:	3fadde2d 	.word	0x3fadde2d
 801b5f0:	af749a6d 	.word	0xaf749a6d
 801b5f4:	3fb3b0f2 	.word	0x3fb3b0f2
 801b5f8:	fe231671 	.word	0xfe231671
 801b5fc:	3fbc71c6 	.word	0x3fbc71c6
 801b600:	9998ebc4 	.word	0x9998ebc4
 801b604:	3fc99999 	.word	0x3fc99999
 801b608:	54442d18 	.word	0x54442d18
 801b60c:	bff921fb 	.word	0xbff921fb
 801b610:	440fffff 	.word	0x440fffff
 801b614:	7ff00000 	.word	0x7ff00000
 801b618:	3fdbffff 	.word	0x3fdbffff
 801b61c:	3ff00000 	.word	0x3ff00000
 801b620:	3ff2ffff 	.word	0x3ff2ffff
 801b624:	40037fff 	.word	0x40037fff
 801b628:	3ff80000 	.word	0x3ff80000
 801b62c:	bff00000 	.word	0xbff00000
 801b630:	0801c3b0 	.word	0x0801c3b0
 801b634:	0801c390 	.word	0x0801c390

0801b638 <fabs>:
 801b638:	ec51 0b10 	vmov	r0, r1, d0
 801b63c:	ee10 2a10 	vmov	r2, s0
 801b640:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801b644:	ec43 2b10 	vmov	d0, r2, r3
 801b648:	4770      	bx	lr
 801b64a:	0000      	movs	r0, r0
 801b64c:	0000      	movs	r0, r0
	...

0801b650 <floor>:
 801b650:	ec51 0b10 	vmov	r0, r1, d0
 801b654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b658:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801b65c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801b660:	2e13      	cmp	r6, #19
 801b662:	460c      	mov	r4, r1
 801b664:	ee10 5a10 	vmov	r5, s0
 801b668:	4680      	mov	r8, r0
 801b66a:	dc34      	bgt.n	801b6d6 <floor+0x86>
 801b66c:	2e00      	cmp	r6, #0
 801b66e:	da16      	bge.n	801b69e <floor+0x4e>
 801b670:	a335      	add	r3, pc, #212	; (adr r3, 801b748 <floor+0xf8>)
 801b672:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b676:	f7e4 fe19 	bl	80002ac <__adddf3>
 801b67a:	2200      	movs	r2, #0
 801b67c:	2300      	movs	r3, #0
 801b67e:	f7e5 fa5b 	bl	8000b38 <__aeabi_dcmpgt>
 801b682:	b148      	cbz	r0, 801b698 <floor+0x48>
 801b684:	2c00      	cmp	r4, #0
 801b686:	da59      	bge.n	801b73c <floor+0xec>
 801b688:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801b68c:	4a30      	ldr	r2, [pc, #192]	; (801b750 <floor+0x100>)
 801b68e:	432b      	orrs	r3, r5
 801b690:	2500      	movs	r5, #0
 801b692:	42ab      	cmp	r3, r5
 801b694:	bf18      	it	ne
 801b696:	4614      	movne	r4, r2
 801b698:	4621      	mov	r1, r4
 801b69a:	4628      	mov	r0, r5
 801b69c:	e025      	b.n	801b6ea <floor+0x9a>
 801b69e:	4f2d      	ldr	r7, [pc, #180]	; (801b754 <floor+0x104>)
 801b6a0:	4137      	asrs	r7, r6
 801b6a2:	ea01 0307 	and.w	r3, r1, r7
 801b6a6:	4303      	orrs	r3, r0
 801b6a8:	d01f      	beq.n	801b6ea <floor+0x9a>
 801b6aa:	a327      	add	r3, pc, #156	; (adr r3, 801b748 <floor+0xf8>)
 801b6ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b6b0:	f7e4 fdfc 	bl	80002ac <__adddf3>
 801b6b4:	2200      	movs	r2, #0
 801b6b6:	2300      	movs	r3, #0
 801b6b8:	f7e5 fa3e 	bl	8000b38 <__aeabi_dcmpgt>
 801b6bc:	2800      	cmp	r0, #0
 801b6be:	d0eb      	beq.n	801b698 <floor+0x48>
 801b6c0:	2c00      	cmp	r4, #0
 801b6c2:	bfbe      	ittt	lt
 801b6c4:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801b6c8:	fa43 f606 	asrlt.w	r6, r3, r6
 801b6cc:	19a4      	addlt	r4, r4, r6
 801b6ce:	ea24 0407 	bic.w	r4, r4, r7
 801b6d2:	2500      	movs	r5, #0
 801b6d4:	e7e0      	b.n	801b698 <floor+0x48>
 801b6d6:	2e33      	cmp	r6, #51	; 0x33
 801b6d8:	dd0b      	ble.n	801b6f2 <floor+0xa2>
 801b6da:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801b6de:	d104      	bne.n	801b6ea <floor+0x9a>
 801b6e0:	ee10 2a10 	vmov	r2, s0
 801b6e4:	460b      	mov	r3, r1
 801b6e6:	f7e4 fde1 	bl	80002ac <__adddf3>
 801b6ea:	ec41 0b10 	vmov	d0, r0, r1
 801b6ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b6f2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801b6f6:	f04f 33ff 	mov.w	r3, #4294967295
 801b6fa:	fa23 f707 	lsr.w	r7, r3, r7
 801b6fe:	4207      	tst	r7, r0
 801b700:	d0f3      	beq.n	801b6ea <floor+0x9a>
 801b702:	a311      	add	r3, pc, #68	; (adr r3, 801b748 <floor+0xf8>)
 801b704:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b708:	f7e4 fdd0 	bl	80002ac <__adddf3>
 801b70c:	2200      	movs	r2, #0
 801b70e:	2300      	movs	r3, #0
 801b710:	f7e5 fa12 	bl	8000b38 <__aeabi_dcmpgt>
 801b714:	2800      	cmp	r0, #0
 801b716:	d0bf      	beq.n	801b698 <floor+0x48>
 801b718:	2c00      	cmp	r4, #0
 801b71a:	da02      	bge.n	801b722 <floor+0xd2>
 801b71c:	2e14      	cmp	r6, #20
 801b71e:	d103      	bne.n	801b728 <floor+0xd8>
 801b720:	3401      	adds	r4, #1
 801b722:	ea25 0507 	bic.w	r5, r5, r7
 801b726:	e7b7      	b.n	801b698 <floor+0x48>
 801b728:	2301      	movs	r3, #1
 801b72a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801b72e:	fa03 f606 	lsl.w	r6, r3, r6
 801b732:	4435      	add	r5, r6
 801b734:	4545      	cmp	r5, r8
 801b736:	bf38      	it	cc
 801b738:	18e4      	addcc	r4, r4, r3
 801b73a:	e7f2      	b.n	801b722 <floor+0xd2>
 801b73c:	2500      	movs	r5, #0
 801b73e:	462c      	mov	r4, r5
 801b740:	e7aa      	b.n	801b698 <floor+0x48>
 801b742:	bf00      	nop
 801b744:	f3af 8000 	nop.w
 801b748:	8800759c 	.word	0x8800759c
 801b74c:	7e37e43c 	.word	0x7e37e43c
 801b750:	bff00000 	.word	0xbff00000
 801b754:	000fffff 	.word	0x000fffff

0801b758 <matherr>:
 801b758:	2000      	movs	r0, #0
 801b75a:	4770      	bx	lr
 801b75c:	0000      	movs	r0, r0
	...

0801b760 <scalbn>:
 801b760:	b570      	push	{r4, r5, r6, lr}
 801b762:	ec55 4b10 	vmov	r4, r5, d0
 801b766:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801b76a:	4606      	mov	r6, r0
 801b76c:	462b      	mov	r3, r5
 801b76e:	b9aa      	cbnz	r2, 801b79c <scalbn+0x3c>
 801b770:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801b774:	4323      	orrs	r3, r4
 801b776:	d03b      	beq.n	801b7f0 <scalbn+0x90>
 801b778:	4b31      	ldr	r3, [pc, #196]	; (801b840 <scalbn+0xe0>)
 801b77a:	4629      	mov	r1, r5
 801b77c:	2200      	movs	r2, #0
 801b77e:	ee10 0a10 	vmov	r0, s0
 801b782:	f7e4 ff49 	bl	8000618 <__aeabi_dmul>
 801b786:	4b2f      	ldr	r3, [pc, #188]	; (801b844 <scalbn+0xe4>)
 801b788:	429e      	cmp	r6, r3
 801b78a:	4604      	mov	r4, r0
 801b78c:	460d      	mov	r5, r1
 801b78e:	da12      	bge.n	801b7b6 <scalbn+0x56>
 801b790:	a327      	add	r3, pc, #156	; (adr r3, 801b830 <scalbn+0xd0>)
 801b792:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b796:	f7e4 ff3f 	bl	8000618 <__aeabi_dmul>
 801b79a:	e009      	b.n	801b7b0 <scalbn+0x50>
 801b79c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801b7a0:	428a      	cmp	r2, r1
 801b7a2:	d10c      	bne.n	801b7be <scalbn+0x5e>
 801b7a4:	ee10 2a10 	vmov	r2, s0
 801b7a8:	4620      	mov	r0, r4
 801b7aa:	4629      	mov	r1, r5
 801b7ac:	f7e4 fd7e 	bl	80002ac <__adddf3>
 801b7b0:	4604      	mov	r4, r0
 801b7b2:	460d      	mov	r5, r1
 801b7b4:	e01c      	b.n	801b7f0 <scalbn+0x90>
 801b7b6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801b7ba:	460b      	mov	r3, r1
 801b7bc:	3a36      	subs	r2, #54	; 0x36
 801b7be:	4432      	add	r2, r6
 801b7c0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801b7c4:	428a      	cmp	r2, r1
 801b7c6:	dd0b      	ble.n	801b7e0 <scalbn+0x80>
 801b7c8:	ec45 4b11 	vmov	d1, r4, r5
 801b7cc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 801b838 <scalbn+0xd8>
 801b7d0:	f000 f83c 	bl	801b84c <copysign>
 801b7d4:	a318      	add	r3, pc, #96	; (adr r3, 801b838 <scalbn+0xd8>)
 801b7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b7da:	ec51 0b10 	vmov	r0, r1, d0
 801b7de:	e7da      	b.n	801b796 <scalbn+0x36>
 801b7e0:	2a00      	cmp	r2, #0
 801b7e2:	dd08      	ble.n	801b7f6 <scalbn+0x96>
 801b7e4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b7e8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801b7ec:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801b7f0:	ec45 4b10 	vmov	d0, r4, r5
 801b7f4:	bd70      	pop	{r4, r5, r6, pc}
 801b7f6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801b7fa:	da0d      	bge.n	801b818 <scalbn+0xb8>
 801b7fc:	f24c 3350 	movw	r3, #50000	; 0xc350
 801b800:	429e      	cmp	r6, r3
 801b802:	ec45 4b11 	vmov	d1, r4, r5
 801b806:	dce1      	bgt.n	801b7cc <scalbn+0x6c>
 801b808:	ed9f 0b09 	vldr	d0, [pc, #36]	; 801b830 <scalbn+0xd0>
 801b80c:	f000 f81e 	bl	801b84c <copysign>
 801b810:	a307      	add	r3, pc, #28	; (adr r3, 801b830 <scalbn+0xd0>)
 801b812:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b816:	e7e0      	b.n	801b7da <scalbn+0x7a>
 801b818:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b81c:	3236      	adds	r2, #54	; 0x36
 801b81e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801b822:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801b826:	4620      	mov	r0, r4
 801b828:	4629      	mov	r1, r5
 801b82a:	2200      	movs	r2, #0
 801b82c:	4b06      	ldr	r3, [pc, #24]	; (801b848 <scalbn+0xe8>)
 801b82e:	e7b2      	b.n	801b796 <scalbn+0x36>
 801b830:	c2f8f359 	.word	0xc2f8f359
 801b834:	01a56e1f 	.word	0x01a56e1f
 801b838:	8800759c 	.word	0x8800759c
 801b83c:	7e37e43c 	.word	0x7e37e43c
 801b840:	43500000 	.word	0x43500000
 801b844:	ffff3cb0 	.word	0xffff3cb0
 801b848:	3c900000 	.word	0x3c900000

0801b84c <copysign>:
 801b84c:	ec51 0b10 	vmov	r0, r1, d0
 801b850:	ee11 0a90 	vmov	r0, s3
 801b854:	ee10 2a10 	vmov	r2, s0
 801b858:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801b85c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 801b860:	ea41 0300 	orr.w	r3, r1, r0
 801b864:	ec43 2b10 	vmov	d0, r2, r3
 801b868:	4770      	bx	lr
	...

0801b86c <_init>:
 801b86c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b86e:	bf00      	nop
 801b870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b872:	bc08      	pop	{r3}
 801b874:	469e      	mov	lr, r3
 801b876:	4770      	bx	lr

0801b878 <_fini>:
 801b878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b87a:	bf00      	nop
 801b87c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b87e:	bc08      	pop	{r3}
 801b880:	469e      	mov	lr, r3
 801b882:	4770      	bx	lr
