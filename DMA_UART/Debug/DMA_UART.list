
DMA_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000190b4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a00  08019248  08019248  00029248  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019c48  08019c48  00031008  2**0
                  CONTENTS
  4 .ARM          00000008  08019c48  08019c48  00029c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019c50  08019c50  00031008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019c50  08019c50  00029c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019c54  08019c54  00029c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001008  20000000  08019c58  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005bdc  20001008  0801ac60  00031008  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20006be4  0801ac60  00036be4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00031008  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d6f6  00000000  00000000  00031038  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006198  00000000  00000000  0005e72e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001d08  00000000  00000000  000648c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001a90  00000000  00000000  000665d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029977  00000000  00000000  00068060  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001eed8  00000000  00000000  000919d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dc4e1  00000000  00000000  000b08af  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018cd90  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008c50  00000000  00000000  0018ce0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20001008 	.word	0x20001008
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801922c 	.word	0x0801922c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000100c 	.word	0x2000100c
 80001cc:	0801922c 	.word	0x0801922c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b972 	b.w	8000fa4 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9e08      	ldr	r6, [sp, #32]
 8000cde:	4604      	mov	r4, r0
 8000ce0:	4688      	mov	r8, r1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d14b      	bne.n	8000d7e <__udivmoddi4+0xa6>
 8000ce6:	428a      	cmp	r2, r1
 8000ce8:	4615      	mov	r5, r2
 8000cea:	d967      	bls.n	8000dbc <__udivmoddi4+0xe4>
 8000cec:	fab2 f282 	clz	r2, r2
 8000cf0:	b14a      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf2:	f1c2 0720 	rsb	r7, r2, #32
 8000cf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cfe:	4095      	lsls	r5, r2
 8000d00:	ea47 0803 	orr.w	r8, r7, r3
 8000d04:	4094      	lsls	r4, r2
 8000d06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d0a:	0c23      	lsrs	r3, r4, #16
 8000d0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d10:	fa1f fc85 	uxth.w	ip, r5
 8000d14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x60>
 8000d24:	18eb      	adds	r3, r5, r3
 8000d26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d2a:	f080 811b 	bcs.w	8000f64 <__udivmoddi4+0x28c>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 8118 	bls.w	8000f64 <__udivmoddi4+0x28c>
 8000d34:	3f02      	subs	r7, #2
 8000d36:	442b      	add	r3, r5
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d4c:	45a4      	cmp	ip, r4
 8000d4e:	d909      	bls.n	8000d64 <__udivmoddi4+0x8c>
 8000d50:	192c      	adds	r4, r5, r4
 8000d52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d56:	f080 8107 	bcs.w	8000f68 <__udivmoddi4+0x290>
 8000d5a:	45a4      	cmp	ip, r4
 8000d5c:	f240 8104 	bls.w	8000f68 <__udivmoddi4+0x290>
 8000d60:	3802      	subs	r0, #2
 8000d62:	442c      	add	r4, r5
 8000d64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d68:	eba4 040c 	sub.w	r4, r4, ip
 8000d6c:	2700      	movs	r7, #0
 8000d6e:	b11e      	cbz	r6, 8000d78 <__udivmoddi4+0xa0>
 8000d70:	40d4      	lsrs	r4, r2
 8000d72:	2300      	movs	r3, #0
 8000d74:	e9c6 4300 	strd	r4, r3, [r6]
 8000d78:	4639      	mov	r1, r7
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0xbe>
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	f000 80eb 	beq.w	8000f5e <__udivmoddi4+0x286>
 8000d88:	2700      	movs	r7, #0
 8000d8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d8e:	4638      	mov	r0, r7
 8000d90:	4639      	mov	r1, r7
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	fab3 f783 	clz	r7, r3
 8000d9a:	2f00      	cmp	r7, #0
 8000d9c:	d147      	bne.n	8000e2e <__udivmoddi4+0x156>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d302      	bcc.n	8000da8 <__udivmoddi4+0xd0>
 8000da2:	4282      	cmp	r2, r0
 8000da4:	f200 80fa 	bhi.w	8000f9c <__udivmoddi4+0x2c4>
 8000da8:	1a84      	subs	r4, r0, r2
 8000daa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	4698      	mov	r8, r3
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	d0e0      	beq.n	8000d78 <__udivmoddi4+0xa0>
 8000db6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dba:	e7dd      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000dbc:	b902      	cbnz	r2, 8000dc0 <__udivmoddi4+0xe8>
 8000dbe:	deff      	udf	#255	; 0xff
 8000dc0:	fab2 f282 	clz	r2, r2
 8000dc4:	2a00      	cmp	r2, #0
 8000dc6:	f040 808f 	bne.w	8000ee8 <__udivmoddi4+0x210>
 8000dca:	1b49      	subs	r1, r1, r5
 8000dcc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dd0:	fa1f f885 	uxth.w	r8, r5
 8000dd4:	2701      	movs	r7, #1
 8000dd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dda:	0c23      	lsrs	r3, r4, #16
 8000ddc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000de0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000de4:	fb08 f10c 	mul.w	r1, r8, ip
 8000de8:	4299      	cmp	r1, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x124>
 8000dec:	18eb      	adds	r3, r5, r3
 8000dee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x122>
 8000df4:	4299      	cmp	r1, r3
 8000df6:	f200 80cd 	bhi.w	8000f94 <__udivmoddi4+0x2bc>
 8000dfa:	4684      	mov	ip, r0
 8000dfc:	1a59      	subs	r1, r3, r1
 8000dfe:	b2a3      	uxth	r3, r4
 8000e00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e0c:	fb08 f800 	mul.w	r8, r8, r0
 8000e10:	45a0      	cmp	r8, r4
 8000e12:	d907      	bls.n	8000e24 <__udivmoddi4+0x14c>
 8000e14:	192c      	adds	r4, r5, r4
 8000e16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x14a>
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	f200 80b6 	bhi.w	8000f8e <__udivmoddi4+0x2b6>
 8000e22:	4618      	mov	r0, r3
 8000e24:	eba4 0408 	sub.w	r4, r4, r8
 8000e28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e2c:	e79f      	b.n	8000d6e <__udivmoddi4+0x96>
 8000e2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e32:	40bb      	lsls	r3, r7
 8000e34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e4c:	4325      	orrs	r5, r4
 8000e4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e52:	0c2c      	lsrs	r4, r5, #16
 8000e54:	fb08 3319 	mls	r3, r8, r9, r3
 8000e58:	fa1f fa8e 	uxth.w	sl, lr
 8000e5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e60:	fb09 f40a 	mul.w	r4, r9, sl
 8000e64:	429c      	cmp	r4, r3
 8000e66:	fa02 f207 	lsl.w	r2, r2, r7
 8000e6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e6e:	d90b      	bls.n	8000e88 <__udivmoddi4+0x1b0>
 8000e70:	eb1e 0303 	adds.w	r3, lr, r3
 8000e74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e78:	f080 8087 	bcs.w	8000f8a <__udivmoddi4+0x2b2>
 8000e7c:	429c      	cmp	r4, r3
 8000e7e:	f240 8084 	bls.w	8000f8a <__udivmoddi4+0x2b2>
 8000e82:	f1a9 0902 	sub.w	r9, r9, #2
 8000e86:	4473      	add	r3, lr
 8000e88:	1b1b      	subs	r3, r3, r4
 8000e8a:	b2ad      	uxth	r5, r5
 8000e8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e90:	fb08 3310 	mls	r3, r8, r0, r3
 8000e94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e9c:	45a2      	cmp	sl, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x1da>
 8000ea0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ea4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ea8:	d26b      	bcs.n	8000f82 <__udivmoddi4+0x2aa>
 8000eaa:	45a2      	cmp	sl, r4
 8000eac:	d969      	bls.n	8000f82 <__udivmoddi4+0x2aa>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	4474      	add	r4, lr
 8000eb2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eba:	eba4 040a 	sub.w	r4, r4, sl
 8000ebe:	454c      	cmp	r4, r9
 8000ec0:	46c2      	mov	sl, r8
 8000ec2:	464b      	mov	r3, r9
 8000ec4:	d354      	bcc.n	8000f70 <__udivmoddi4+0x298>
 8000ec6:	d051      	beq.n	8000f6c <__udivmoddi4+0x294>
 8000ec8:	2e00      	cmp	r6, #0
 8000eca:	d069      	beq.n	8000fa0 <__udivmoddi4+0x2c8>
 8000ecc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ed0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ed4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ed8:	40fd      	lsrs	r5, r7
 8000eda:	40fc      	lsrs	r4, r7
 8000edc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ee0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ee4:	2700      	movs	r7, #0
 8000ee6:	e747      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000ee8:	f1c2 0320 	rsb	r3, r2, #32
 8000eec:	fa20 f703 	lsr.w	r7, r0, r3
 8000ef0:	4095      	lsls	r5, r2
 8000ef2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ef6:	fa21 f303 	lsr.w	r3, r1, r3
 8000efa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000efe:	4338      	orrs	r0, r7
 8000f00:	0c01      	lsrs	r1, r0, #16
 8000f02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f06:	fa1f f885 	uxth.w	r8, r5
 8000f0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb07 f308 	mul.w	r3, r7, r8
 8000f16:	428b      	cmp	r3, r1
 8000f18:	fa04 f402 	lsl.w	r4, r4, r2
 8000f1c:	d907      	bls.n	8000f2e <__udivmoddi4+0x256>
 8000f1e:	1869      	adds	r1, r5, r1
 8000f20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f24:	d22f      	bcs.n	8000f86 <__udivmoddi4+0x2ae>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	d92d      	bls.n	8000f86 <__udivmoddi4+0x2ae>
 8000f2a:	3f02      	subs	r7, #2
 8000f2c:	4429      	add	r1, r5
 8000f2e:	1acb      	subs	r3, r1, r3
 8000f30:	b281      	uxth	r1, r0
 8000f32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f3e:	fb00 f308 	mul.w	r3, r0, r8
 8000f42:	428b      	cmp	r3, r1
 8000f44:	d907      	bls.n	8000f56 <__udivmoddi4+0x27e>
 8000f46:	1869      	adds	r1, r5, r1
 8000f48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f4c:	d217      	bcs.n	8000f7e <__udivmoddi4+0x2a6>
 8000f4e:	428b      	cmp	r3, r1
 8000f50:	d915      	bls.n	8000f7e <__udivmoddi4+0x2a6>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4429      	add	r1, r5
 8000f56:	1ac9      	subs	r1, r1, r3
 8000f58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f5c:	e73b      	b.n	8000dd6 <__udivmoddi4+0xfe>
 8000f5e:	4637      	mov	r7, r6
 8000f60:	4630      	mov	r0, r6
 8000f62:	e709      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000f64:	4607      	mov	r7, r0
 8000f66:	e6e7      	b.n	8000d38 <__udivmoddi4+0x60>
 8000f68:	4618      	mov	r0, r3
 8000f6a:	e6fb      	b.n	8000d64 <__udivmoddi4+0x8c>
 8000f6c:	4541      	cmp	r1, r8
 8000f6e:	d2ab      	bcs.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f74:	eb69 020e 	sbc.w	r2, r9, lr
 8000f78:	3801      	subs	r0, #1
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	e7a4      	b.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f7e:	4660      	mov	r0, ip
 8000f80:	e7e9      	b.n	8000f56 <__udivmoddi4+0x27e>
 8000f82:	4618      	mov	r0, r3
 8000f84:	e795      	b.n	8000eb2 <__udivmoddi4+0x1da>
 8000f86:	4667      	mov	r7, ip
 8000f88:	e7d1      	b.n	8000f2e <__udivmoddi4+0x256>
 8000f8a:	4681      	mov	r9, r0
 8000f8c:	e77c      	b.n	8000e88 <__udivmoddi4+0x1b0>
 8000f8e:	3802      	subs	r0, #2
 8000f90:	442c      	add	r4, r5
 8000f92:	e747      	b.n	8000e24 <__udivmoddi4+0x14c>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	442b      	add	r3, r5
 8000f9a:	e72f      	b.n	8000dfc <__udivmoddi4+0x124>
 8000f9c:	4638      	mov	r0, r7
 8000f9e:	e708      	b.n	8000db2 <__udivmoddi4+0xda>
 8000fa0:	4637      	mov	r7, r6
 8000fa2:	e6e9      	b.n	8000d78 <__udivmoddi4+0xa0>

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <commandRead>:
												"STOP",
												"ERRO",
												"OKAY"};


Robot_CommandTypedef 	commandRead	(uint8_t *message, int32_t *id_command, DUTY_Command_TypeDef *duty_cmd) {
 8000fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fac:	b0b4      	sub	sp, #208	; 0xd0
 8000fae:	af0a      	add	r7, sp, #40	; 0x28
 8000fb0:	60f8      	str	r0, [r7, #12]
 8000fb2:	60b9      	str	r1, [r7, #8]
 8000fb4:	607a      	str	r2, [r7, #4]
	char command[10];
	char para[70];
	int32_t result;
	memset(para, 0, 70*sizeof(char));
 8000fb6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000fba:	2246      	movs	r2, #70	; 0x46
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f012 fab2 	bl	8013528 <memset>
	result = sscanf((char*)message, "%d %s %70c",(int*) id_command, command, para);
 8000fc4:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8000fc8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000fcc:	9300      	str	r3, [sp, #0]
 8000fce:	4613      	mov	r3, r2
 8000fd0:	68ba      	ldr	r2, [r7, #8]
 8000fd2:	49b4      	ldr	r1, [pc, #720]	; (80012a4 <commandRead+0x2fc>)
 8000fd4:	68f8      	ldr	r0, [r7, #12]
 8000fd6:	f013 f9ff 	bl	80143d8 <siscanf>
 8000fda:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
	duty_cmd->id_command = *id_command;
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	605a      	str	r2, [r3, #4]
	// Stop Now
	if ( 0 == strcmp( command, ROBOTCOMMAND[CMD_STOPNOW])) {
 8000fe6:	4bb0      	ldr	r3, [pc, #704]	; (80012a8 <commandRead+0x300>)
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000fee:	4611      	mov	r1, r2
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff f8ed 	bl	80001d0 <strcmp>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d104      	bne.n	8001006 <commandRead+0x5e>
		duty_cmd->robot_mode = SCARA_MODE_STOP;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2200      	movs	r2, #0
 8001000:	701a      	strb	r2, [r3, #0]
		return CMD_STOPNOW;
 8001002:	2300      	movs	r3, #0
 8001004:	e23c      	b.n	8001480 <commandRead+0x4d8>

	// Scan Limit
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_SCAN_LIMIT])) {
 8001006:	4ba8      	ldr	r3, [pc, #672]	; (80012a8 <commandRead+0x300>)
 8001008:	685a      	ldr	r2, [r3, #4]
 800100a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800100e:	4611      	mov	r1, r2
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff f8dd 	bl	80001d0 <strcmp>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d104      	bne.n	8001026 <commandRead+0x7e>
		duty_cmd->robot_mode = SCARA_MODE_SCAN;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2201      	movs	r2, #1
 8001020:	701a      	strb	r2, [r3, #0]
		return CMD_SCAN_LIMIT;
 8001022:	2301      	movs	r3, #1
 8001024:	e22c      	b.n	8001480 <commandRead+0x4d8>

	// Move Home
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_MOVE_HOME])) {
 8001026:	4ba0      	ldr	r3, [pc, #640]	; (80012a8 <commandRead+0x300>)
 8001028:	689a      	ldr	r2, [r3, #8]
 800102a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800102e:	4611      	mov	r1, r2
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff f8cd 	bl	80001d0 <strcmp>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d120      	bne.n	800107e <commandRead+0xd6>
		if (3 == result) {
 800103c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001040:	2b03      	cmp	r3, #3
 8001042:	d112      	bne.n	800106a <commandRead+0xc2>
			result = sscanf( para, "%lf %lf",
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f103 02f8 	add.w	r2, r3, #248	; 0xf8
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001050:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8001054:	4995      	ldr	r1, [pc, #596]	; (80012ac <commandRead+0x304>)
 8001056:	f013 f9bf 	bl	80143d8 <siscanf>
 800105a:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
							&(duty_cmd->v_factor),
							&(duty_cmd->a_factor));
			if (2 != result) {
 800105e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001062:	2b02      	cmp	r3, #2
 8001064:	d003      	beq.n	800106e <commandRead+0xc6>
				return CMD_ERROR;
 8001066:	230b      	movs	r3, #11
 8001068:	e20a      	b.n	8001480 <commandRead+0x4d8>
			}
		} else {
			return CMD_ERROR;
 800106a:	230b      	movs	r3, #11
 800106c:	e208      	b.n	8001480 <commandRead+0x4d8>
		}
		duty_cmd->space_type = DUTY_SPACE_JOINT;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2201      	movs	r2, #1
 8001072:	725a      	strb	r2, [r3, #9]
		duty_cmd->robot_mode = SCARA_MODE_DUTY;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2202      	movs	r2, #2
 8001078:	701a      	strb	r2, [r3, #0]
		return CMD_MOVE_HOME;
 800107a:	2302      	movs	r3, #2
 800107c:	e200      	b.n	8001480 <commandRead+0x4d8>

	// Move Line
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_MOVE_LINE])) {
 800107e:	4b8a      	ldr	r3, [pc, #552]	; (80012a8 <commandRead+0x300>)
 8001080:	68da      	ldr	r2, [r3, #12]
 8001082:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001086:	4611      	mov	r1, r2
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff f8a1 	bl	80001d0 <strcmp>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d151      	bne.n	8001138 <commandRead+0x190>
		if (3 == result) {
 8001094:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001098:	2b03      	cmp	r3, #3
 800109a:	d149      	bne.n	8001130 <commandRead+0x188>
			double temp_fl;
			int8_t mode_init;
			result = sscanf( para, "%lf %lf %lf %lf %lf %d %lf",
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f103 0550 	add.w	r5, r3, #80	; 0x50
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	f103 0658 	add.w	r6, r3, #88	; 0x58
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3360      	adds	r3, #96	; 0x60
 80010ac:	687a      	ldr	r2, [r7, #4]
 80010ae:	3268      	adds	r2, #104	; 0x68
 80010b0:	6879      	ldr	r1, [r7, #4]
 80010b2:	31f8      	adds	r1, #248	; 0xf8
 80010b4:	f107 0450 	add.w	r4, r7, #80	; 0x50
 80010b8:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80010bc:	9004      	str	r0, [sp, #16]
 80010be:	f107 0047 	add.w	r0, r7, #71	; 0x47
 80010c2:	9003      	str	r0, [sp, #12]
 80010c4:	9102      	str	r1, [sp, #8]
 80010c6:	9201      	str	r2, [sp, #4]
 80010c8:	9300      	str	r3, [sp, #0]
 80010ca:	4633      	mov	r3, r6
 80010cc:	462a      	mov	r2, r5
 80010ce:	4978      	ldr	r1, [pc, #480]	; (80012b0 <commandRead+0x308>)
 80010d0:	4620      	mov	r0, r4
 80010d2:	f013 f981 	bl	80143d8 <siscanf>
 80010d6:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
							&(duty_cmd->target_point.roll),
							&(duty_cmd->v_factor),
							(int *)&mode_init,
							&temp_fl);

			if (7 != result) {
 80010da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80010de:	2b07      	cmp	r3, #7
 80010e0:	d001      	beq.n	80010e6 <commandRead+0x13e>
				return CMD_ERROR;
 80010e2:	230b      	movs	r3, #11
 80010e4:	e1cc      	b.n	8001480 <commandRead+0x4d8>
			}
			duty_cmd->path_type = DUTY_PATH_LINE;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2200      	movs	r2, #0
 80010ea:	729a      	strb	r2, [r3, #10]
			duty_cmd->space_type = DUTY_SPACE_TASK;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2200      	movs	r2, #0
 80010f0:	725a      	strb	r2, [r3, #9]
			duty_cmd->robot_mode = SCARA_MODE_DUTY;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2202      	movs	r2, #2
 80010f6:	701a      	strb	r2, [r3, #0]

			if ( DUTY_MODE_INIT_QVA == mode_init) {
 80010f8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d108      	bne.n	8001112 <commandRead+0x16a>
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2200      	movs	r2, #0
 8001104:	735a      	strb	r2, [r3, #13]
				duty_cmd->a_factor		= temp_fl;
 8001106:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	e9c2 3440 	strd	r3, r4, [r2, #256]	; 0x100
 8001110:	e010      	b.n	8001134 <commandRead+0x18c>
			} else if ( DUTY_MODE_INIT_QVT == mode_init) {
 8001112:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8001116:	2b01      	cmp	r3, #1
 8001118:	d108      	bne.n	800112c <commandRead+0x184>
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2201      	movs	r2, #1
 800111e:	735a      	strb	r2, [r3, #13]
				duty_cmd->time_total	= temp_fl;
 8001120:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	e9c2 3408 	strd	r3, r4, [r2, #32]
 800112a:	e003      	b.n	8001134 <commandRead+0x18c>
			} else {
				return CMD_ERROR;
 800112c:	230b      	movs	r3, #11
 800112e:	e1a7      	b.n	8001480 <commandRead+0x4d8>
			}
		} else {
			return CMD_ERROR;
 8001130:	230b      	movs	r3, #11
 8001132:	e1a5      	b.n	8001480 <commandRead+0x4d8>
		}
		return CMD_MOVE_LINE;
 8001134:	2303      	movs	r3, #3
 8001136:	e1a3      	b.n	8001480 <commandRead+0x4d8>

	// Move Circle
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_MOVE_CIRCLE])) {
 8001138:	4b5b      	ldr	r3, [pc, #364]	; (80012a8 <commandRead+0x300>)
 800113a:	691a      	ldr	r2, [r3, #16]
 800113c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001140:	4611      	mov	r1, r2
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff f844 	bl	80001d0 <strcmp>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d15f      	bne.n	800120e <commandRead+0x266>
		if (3 == result) {
 800114e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001152:	2b03      	cmp	r3, #3
 8001154:	d157      	bne.n	8001206 <commandRead+0x25e>
			double temp_fl;
			int8_t mode_init;
			result = sscanf( para, "%lf %lf %lf %lf %lf %lf %lf %d %lf %d %lf",
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	f103 0e50 	add.w	lr, r3, #80	; 0x50
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f103 0858 	add.w	r8, r3, #88	; 0x58
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	3360      	adds	r3, #96	; 0x60
 8001166:	603b      	str	r3, [r7, #0]
 8001168:	687a      	ldr	r2, [r7, #4]
 800116a:	3268      	adds	r2, #104	; 0x68
 800116c:	6879      	ldr	r1, [r7, #4]
 800116e:	31b8      	adds	r1, #184	; 0xb8
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	30c0      	adds	r0, #192	; 0xc0
 8001174:	687c      	ldr	r4, [r7, #4]
 8001176:	34c8      	adds	r4, #200	; 0xc8
							&(duty_cmd->target_point.z),
							&(duty_cmd->target_point.roll),
							&(duty_cmd->sub_point.x),
							&(duty_cmd->sub_point.y),
							&(duty_cmd->sub_point.z),
							(int *)&(duty_cmd->sub_para_int), // dir
 8001178:	687d      	ldr	r5, [r7, #4]
 800117a:	3510      	adds	r5, #16
			result = sscanf( para, "%lf %lf %lf %lf %lf %lf %lf %d %lf %d %lf",
 800117c:	687e      	ldr	r6, [r7, #4]
 800117e:	36f8      	adds	r6, #248	; 0xf8
 8001180:	f107 0c50 	add.w	ip, r7, #80	; 0x50
 8001184:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001188:	9308      	str	r3, [sp, #32]
 800118a:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800118e:	9307      	str	r3, [sp, #28]
 8001190:	9606      	str	r6, [sp, #24]
 8001192:	9505      	str	r5, [sp, #20]
 8001194:	9404      	str	r4, [sp, #16]
 8001196:	9003      	str	r0, [sp, #12]
 8001198:	9102      	str	r1, [sp, #8]
 800119a:	9201      	str	r2, [sp, #4]
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	9300      	str	r3, [sp, #0]
 80011a0:	4643      	mov	r3, r8
 80011a2:	4672      	mov	r2, lr
 80011a4:	4943      	ldr	r1, [pc, #268]	; (80012b4 <commandRead+0x30c>)
 80011a6:	4660      	mov	r0, ip
 80011a8:	f013 f916 	bl	80143d8 <siscanf>
 80011ac:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
							&(duty_cmd->v_factor),
							(int *)&mode_init,
							&temp_fl);

			if (11 != result) {
 80011b0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80011b4:	2b0b      	cmp	r3, #11
 80011b6:	d001      	beq.n	80011bc <commandRead+0x214>
				return CMD_ERROR;
 80011b8:	230b      	movs	r3, #11
 80011ba:	e161      	b.n	8001480 <commandRead+0x4d8>
			}
			duty_cmd->path_type = DUTY_PATH_CIRCLE;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2201      	movs	r2, #1
 80011c0:	729a      	strb	r2, [r3, #10]
			duty_cmd->space_type = DUTY_SPACE_TASK;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2200      	movs	r2, #0
 80011c6:	725a      	strb	r2, [r3, #9]
			duty_cmd->robot_mode = SCARA_MODE_DUTY;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2202      	movs	r2, #2
 80011cc:	701a      	strb	r2, [r3, #0]

			if ( DUTY_MODE_INIT_QVA == mode_init) {
 80011ce:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d108      	bne.n	80011e8 <commandRead+0x240>
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2200      	movs	r2, #0
 80011da:	735a      	strb	r2, [r3, #13]
				duty_cmd->a_factor		= temp_fl;
 80011dc:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	e9c2 3440 	strd	r3, r4, [r2, #256]	; 0x100
 80011e6:	e010      	b.n	800120a <commandRead+0x262>
			} else if ( DUTY_MODE_INIT_QVT == mode_init) {
 80011e8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d108      	bne.n	8001202 <commandRead+0x25a>
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2201      	movs	r2, #1
 80011f4:	735a      	strb	r2, [r3, #13]
				duty_cmd->time_total	= temp_fl;
 80011f6:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	e9c2 3408 	strd	r3, r4, [r2, #32]
 8001200:	e003      	b.n	800120a <commandRead+0x262>
			} else {
				return CMD_ERROR;
 8001202:	230b      	movs	r3, #11
 8001204:	e13c      	b.n	8001480 <commandRead+0x4d8>
			}
		} else {
			return CMD_ERROR;
 8001206:	230b      	movs	r3, #11
 8001208:	e13a      	b.n	8001480 <commandRead+0x4d8>
		}
		return CMD_MOVE_CIRCLE;
 800120a:	2304      	movs	r3, #4
 800120c:	e138      	b.n	8001480 <commandRead+0x4d8>

	// Move Joint
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_MOVE_JOINT])) {
 800120e:	4b26      	ldr	r3, [pc, #152]	; (80012a8 <commandRead+0x300>)
 8001210:	695a      	ldr	r2, [r3, #20]
 8001212:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001216:	4611      	mov	r1, r2
 8001218:	4618      	mov	r0, r3
 800121a:	f7fe ffd9 	bl	80001d0 <strcmp>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d15c      	bne.n	80012de <commandRead+0x336>
		if (3 == result) {
 8001224:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001228:	2b03      	cmp	r3, #3
 800122a:	d154      	bne.n	80012d6 <commandRead+0x32e>
			double temp_fl;
			int8_t mode_init;
			result = sscanf( para, "%lf %lf %lf %lf %lf %d %lf",
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f103 0658 	add.w	r6, r3, #88	; 0x58
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3360      	adds	r3, #96	; 0x60
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	3268      	adds	r2, #104	; 0x68
 8001240:	6879      	ldr	r1, [r7, #4]
 8001242:	31f8      	adds	r1, #248	; 0xf8
 8001244:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8001248:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800124c:	9004      	str	r0, [sp, #16]
 800124e:	f107 0027 	add.w	r0, r7, #39	; 0x27
 8001252:	9003      	str	r0, [sp, #12]
 8001254:	9102      	str	r1, [sp, #8]
 8001256:	9201      	str	r2, [sp, #4]
 8001258:	9300      	str	r3, [sp, #0]
 800125a:	4633      	mov	r3, r6
 800125c:	462a      	mov	r2, r5
 800125e:	4914      	ldr	r1, [pc, #80]	; (80012b0 <commandRead+0x308>)
 8001260:	4620      	mov	r0, r4
 8001262:	f013 f8b9 	bl	80143d8 <siscanf>
 8001266:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
							&(duty_cmd->target_point.roll),
							&(duty_cmd->v_factor),
							(int *)&mode_init,
							&temp_fl);

			if (7 != result) {
 800126a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800126e:	2b07      	cmp	r3, #7
 8001270:	d001      	beq.n	8001276 <commandRead+0x2ce>
				return CMD_ERROR;
 8001272:	230b      	movs	r3, #11
 8001274:	e104      	b.n	8001480 <commandRead+0x4d8>
			}
			duty_cmd->space_type = DUTY_SPACE_JOINT;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2201      	movs	r2, #1
 800127a:	725a      	strb	r2, [r3, #9]
			duty_cmd->joint_type = DUTY_JOINT_4DOF;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2201      	movs	r2, #1
 8001280:	72da      	strb	r2, [r3, #11]
			duty_cmd->robot_mode = SCARA_MODE_DUTY;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2202      	movs	r2, #2
 8001286:	701a      	strb	r2, [r3, #0]

			if ( DUTY_MODE_INIT_QVA == mode_init) {
 8001288:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800128c:	2b00      	cmp	r3, #0
 800128e:	d113      	bne.n	80012b8 <commandRead+0x310>
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2200      	movs	r2, #0
 8001294:	735a      	strb	r2, [r3, #13]
				duty_cmd->a_factor		= temp_fl;
 8001296:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	e9c2 3440 	strd	r3, r4, [r2, #256]	; 0x100
 80012a0:	e01b      	b.n	80012da <commandRead+0x332>
 80012a2:	bf00      	nop
 80012a4:	080192d8 	.word	0x080192d8
 80012a8:	20000000 	.word	0x20000000
 80012ac:	080192e4 	.word	0x080192e4
 80012b0:	080192ec 	.word	0x080192ec
 80012b4:	08019308 	.word	0x08019308
			} else if ( DUTY_MODE_INIT_QVT == mode_init) {
 80012b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d108      	bne.n	80012d2 <commandRead+0x32a>
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2201      	movs	r2, #1
 80012c4:	735a      	strb	r2, [r3, #13]
				duty_cmd->time_total	= temp_fl;
 80012c6:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	e9c2 3408 	strd	r3, r4, [r2, #32]
 80012d0:	e003      	b.n	80012da <commandRead+0x332>
			} else {
				return CMD_ERROR;
 80012d2:	230b      	movs	r3, #11
 80012d4:	e0d4      	b.n	8001480 <commandRead+0x4d8>
			}
		} else {
			return CMD_ERROR;
 80012d6:	230b      	movs	r3, #11
 80012d8:	e0d2      	b.n	8001480 <commandRead+0x4d8>
		}
		return CMD_MOVE_JOINT;
 80012da:	2305      	movs	r3, #5
 80012dc:	e0d0      	b.n	8001480 <commandRead+0x4d8>

	// Rotate Single
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_ROTATE_SINGLE])) {
 80012de:	4b6b      	ldr	r3, [pc, #428]	; (800148c <commandRead+0x4e4>)
 80012e0:	699a      	ldr	r2, [r3, #24]
 80012e2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80012e6:	4611      	mov	r1, r2
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7fe ff71 	bl	80001d0 <strcmp>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d14a      	bne.n	800138a <commandRead+0x3e2>
		if (3 == result) {
 80012f4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80012f8:	2b03      	cmp	r3, #3
 80012fa:	d142      	bne.n	8001382 <commandRead+0x3da>
			double temp_fl;
			int8_t mode_init;
			result = sscanf( para, "%d %lf %lf %d %lf",
							(int *)&(duty_cmd->sub_para_int),
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f103 0110 	add.w	r1, r3, #16
			result = sscanf( para, "%d %lf %lf %d %lf",
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f103 0418 	add.w	r4, r3, #24
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	33f8      	adds	r3, #248	; 0xf8
 800130c:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8001310:	f107 0218 	add.w	r2, r7, #24
 8001314:	9202      	str	r2, [sp, #8]
 8001316:	f107 0217 	add.w	r2, r7, #23
 800131a:	9201      	str	r2, [sp, #4]
 800131c:	9300      	str	r3, [sp, #0]
 800131e:	4623      	mov	r3, r4
 8001320:	460a      	mov	r2, r1
 8001322:	495b      	ldr	r1, [pc, #364]	; (8001490 <commandRead+0x4e8>)
 8001324:	f013 f858 	bl	80143d8 <siscanf>
 8001328:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
							&(duty_cmd->sub_para_double),
							&(duty_cmd->v_factor),
							(int *)&mode_init,
							&temp_fl);

			if (5 != result) {
 800132c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001330:	2b05      	cmp	r3, #5
 8001332:	d001      	beq.n	8001338 <commandRead+0x390>
				return CMD_ERROR;
 8001334:	230b      	movs	r3, #11
 8001336:	e0a3      	b.n	8001480 <commandRead+0x4d8>
			}
			duty_cmd->space_type = DUTY_SPACE_JOINT;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2201      	movs	r2, #1
 800133c:	725a      	strb	r2, [r3, #9]
			duty_cmd->joint_type = DUTY_JOINT_SINGLE;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2200      	movs	r2, #0
 8001342:	72da      	strb	r2, [r3, #11]
			duty_cmd->robot_mode = SCARA_MODE_DUTY;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2202      	movs	r2, #2
 8001348:	701a      	strb	r2, [r3, #0]

			if ( DUTY_MODE_INIT_QVA == mode_init) {
 800134a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d108      	bne.n	8001364 <commandRead+0x3bc>
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2200      	movs	r2, #0
 8001356:	735a      	strb	r2, [r3, #13]
				duty_cmd->a_factor		= temp_fl;
 8001358:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	e9c2 3440 	strd	r3, r4, [r2, #256]	; 0x100
 8001362:	e010      	b.n	8001386 <commandRead+0x3de>
			} else if ( DUTY_MODE_INIT_QVT == mode_init) {
 8001364:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001368:	2b01      	cmp	r3, #1
 800136a:	d108      	bne.n	800137e <commandRead+0x3d6>
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2201      	movs	r2, #1
 8001370:	735a      	strb	r2, [r3, #13]
				duty_cmd->time_total	= temp_fl;
 8001372:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	e9c2 3408 	strd	r3, r4, [r2, #32]
 800137c:	e003      	b.n	8001386 <commandRead+0x3de>
			} else {
				return CMD_ERROR;
 800137e:	230b      	movs	r3, #11
 8001380:	e07e      	b.n	8001480 <commandRead+0x4d8>
			}
		} else {
			return CMD_ERROR;
 8001382:	230b      	movs	r3, #11
 8001384:	e07c      	b.n	8001480 <commandRead+0x4d8>
		}
		return CMD_ROTATE_SINGLE;
 8001386:	2306      	movs	r3, #6
 8001388:	e07a      	b.n	8001480 <commandRead+0x4d8>

	// Set Output
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_OUTPUT])) {
 800138a:	4b40      	ldr	r3, [pc, #256]	; (800148c <commandRead+0x4e4>)
 800138c:	69da      	ldr	r2, [r3, #28]
 800138e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001392:	4611      	mov	r1, r2
 8001394:	4618      	mov	r0, r3
 8001396:	f7fe ff1b 	bl	80001d0 <strcmp>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d112      	bne.n	80013c6 <commandRead+0x41e>
		result = sscanf( para, "%d",(int *)&(duty_cmd->sub_para_int));
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f103 0210 	add.w	r2, r3, #16
 80013a6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80013aa:	493a      	ldr	r1, [pc, #232]	; (8001494 <commandRead+0x4ec>)
 80013ac:	4618      	mov	r0, r3
 80013ae:	f013 f813 	bl	80143d8 <siscanf>
 80013b2:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4

		if (1 != result) {
 80013b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d001      	beq.n	80013c2 <commandRead+0x41a>
			return CMD_ERROR;
 80013be:	230b      	movs	r3, #11
 80013c0:	e05e      	b.n	8001480 <commandRead+0x4d8>
		}

		return CMD_OUTPUT;
 80013c2:	2307      	movs	r3, #7
 80013c4:	e05c      	b.n	8001480 <commandRead+0x4d8>

	// Read Status
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_READ_STATUS])) {
 80013c6:	4b31      	ldr	r3, [pc, #196]	; (800148c <commandRead+0x4e4>)
 80013c8:	6a1a      	ldr	r2, [r3, #32]
 80013ca:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80013ce:	4611      	mov	r1, r2
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7fe fefd 	bl	80001d0 <strcmp>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d101      	bne.n	80013e0 <commandRead+0x438>
		return CMD_READ_STATUS;
 80013dc:	2308      	movs	r3, #8
 80013de:	e04f      	b.n	8001480 <commandRead+0x4d8>

	// Read Position
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_READ_POSITION])) {
 80013e0:	4b2a      	ldr	r3, [pc, #168]	; (800148c <commandRead+0x4e4>)
 80013e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013e4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80013e8:	4611      	mov	r1, r2
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7fe fef0 	bl	80001d0 <strcmp>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d101      	bne.n	80013fa <commandRead+0x452>
			return CMD_READ_POSITION;
 80013f6:	2309      	movs	r3, #9
 80013f8:	e042      	b.n	8001480 <commandRead+0x4d8>

	// Setting
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_SETTING])) {
 80013fa:	4b24      	ldr	r3, [pc, #144]	; (800148c <commandRead+0x4e4>)
 80013fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013fe:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001402:	4611      	mov	r1, r2
 8001404:	4618      	mov	r0, r3
 8001406:	f7fe fee3 	bl	80001d0 <strcmp>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d136      	bne.n	800147e <commandRead+0x4d6>
		int8_t mode_trajec;
		int8_t mode_coordinate;
		result = sscanf( para, "%d %d",
 8001410:	f107 0316 	add.w	r3, r7, #22
 8001414:	f107 0215 	add.w	r2, r7, #21
 8001418:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800141c:	491e      	ldr	r1, [pc, #120]	; (8001498 <commandRead+0x4f0>)
 800141e:	f012 ffdb 	bl	80143d8 <siscanf>
 8001422:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
						(int *)&mode_coordinate,
						(int *)&mode_trajec);

		if (2 != result) {
 8001426:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800142a:	2b02      	cmp	r3, #2
 800142c:	d001      	beq.n	8001432 <commandRead+0x48a>
			return CMD_ERROR;
 800142e:	230b      	movs	r3, #11
 8001430:	e026      	b.n	8001480 <commandRead+0x4d8>
		}

		if ( DUTY_COORDINATES_ABS == mode_coordinate) {
 8001432:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d103      	bne.n	8001442 <commandRead+0x49a>
			duty_cmd->coordinate_type = DUTY_COORDINATES_ABS;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2200      	movs	r2, #0
 800143e:	721a      	strb	r2, [r3, #8]
 8001440:	e009      	b.n	8001456 <commandRead+0x4ae>
		} else if ( DUTY_COORDINATES_REL == mode_coordinate) {
 8001442:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d103      	bne.n	8001452 <commandRead+0x4aa>
			duty_cmd->coordinate_type = DUTY_COORDINATES_REL;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2201      	movs	r2, #1
 800144e:	721a      	strb	r2, [r3, #8]
 8001450:	e001      	b.n	8001456 <commandRead+0x4ae>
		} else {
			return CMD_ERROR;
 8001452:	230b      	movs	r3, #11
 8001454:	e014      	b.n	8001480 <commandRead+0x4d8>
		}

		if ( DUTY_TRAJECTORY_LSPB == mode_trajec) {
 8001456:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d103      	bne.n	8001466 <commandRead+0x4be>
			duty_cmd->trajec_type = DUTY_TRAJECTORY_LSPB;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2200      	movs	r2, #0
 8001462:	731a      	strb	r2, [r3, #12]
 8001464:	e009      	b.n	800147a <commandRead+0x4d2>
		} else if ( DUTY_TRAJECTORY_SCURVE == mode_trajec) {
 8001466:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800146a:	2b01      	cmp	r3, #1
 800146c:	d103      	bne.n	8001476 <commandRead+0x4ce>
			duty_cmd->trajec_type = DUTY_TRAJECTORY_SCURVE;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2201      	movs	r2, #1
 8001472:	731a      	strb	r2, [r3, #12]
 8001474:	e001      	b.n	800147a <commandRead+0x4d2>
		} else {
			return CMD_ERROR;
 8001476:	230b      	movs	r3, #11
 8001478:	e002      	b.n	8001480 <commandRead+0x4d8>
		}
		return CMD_SETTING;
 800147a:	230a      	movs	r3, #10
 800147c:	e000      	b.n	8001480 <commandRead+0x4d8>

	// Error command
	} else {
		return CMD_ERROR;
 800147e:	230b      	movs	r3, #11
	}
}
 8001480:	4618      	mov	r0, r3
 8001482:	37a8      	adds	r7, #168	; 0xa8
 8001484:	46bd      	mov	sp, r7
 8001486:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800148a:	bf00      	nop
 800148c:	20000000 	.word	0x20000000
 8001490:	08019334 	.word	0x08019334
 8001494:	08019348 	.word	0x08019348
 8001498:	0801934c 	.word	0x0801934c

0800149c <commandReply>:

Robot_RespondTypedef	commandReply	(Robot_CommandTypedef cmd_type,
										DUTY_Command_TypeDef duty_cmd,
										uint8_t *detail) {
 800149c:	b082      	sub	sp, #8
 800149e:	b5b0      	push	{r4, r5, r7, lr}
 80014a0:	b0b6      	sub	sp, #216	; 0xd8
 80014a2:	af18      	add	r7, sp, #96	; 0x60
 80014a4:	4601      	mov	r1, r0
 80014a6:	f107 0088 	add.w	r0, r7, #136	; 0x88
 80014aa:	e880 000c 	stmia.w	r0, {r2, r3}
 80014ae:	460b      	mov	r3, r1
 80014b0:	71fb      	strb	r3, [r7, #7]
	Robot_RespondTypedef ret;

	switch(cmd_type) {
 80014b2:	79fb      	ldrb	r3, [r7, #7]
 80014b4:	2b0b      	cmp	r3, #11
 80014b6:	f200 80f2 	bhi.w	800169e <commandReply+0x202>
 80014ba:	a201      	add	r2, pc, #4	; (adr r2, 80014c0 <commandReply+0x24>)
 80014bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014c0:	080014f1 	.word	0x080014f1
 80014c4:	080014f1 	.word	0x080014f1
 80014c8:	080014f1 	.word	0x080014f1
 80014cc:	080014f1 	.word	0x080014f1
 80014d0:	080014f1 	.word	0x080014f1
 80014d4:	080014f1 	.word	0x080014f1
 80014d8:	080014f1 	.word	0x080014f1
 80014dc:	080014f9 	.word	0x080014f9
 80014e0:	08001563 	.word	0x08001563
 80014e4:	08001597 	.word	0x08001597
 80014e8:	080015c5 	.word	0x080015c5
 80014ec:	0800167f 	.word	0x0800167f
	case CMD_MOVE_HOME:
	case CMD_MOVE_LINE:
	case CMD_MOVE_CIRCLE:
	case CMD_MOVE_JOINT:
	case CMD_ROTATE_SINGLE:
		ret = RPD_DUTY;
 80014f0:	2309      	movs	r3, #9
 80014f2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		break;
 80014f6:	e0e1      	b.n	80016bc <commandReply+0x220>
	case CMD_OUTPUT:
		{
			if (1 == duty_cmd.sub_para_int) {
 80014f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d10d      	bne.n	800151c <commandReply+0x80>
				scaraSetOutput(1);
 8001500:	2001      	movs	r0, #1
 8001502:	f006 ff01 	bl	8008308 <scaraSetOutput>
				strcpy( (char *)detail, "Output ON");
 8001506:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800150a:	4971      	ldr	r1, [pc, #452]	; (80016d0 <commandReply+0x234>)
 800150c:	461a      	mov	r2, r3
 800150e:	460b      	mov	r3, r1
 8001510:	cb03      	ldmia	r3!, {r0, r1}
 8001512:	6010      	str	r0, [r2, #0]
 8001514:	6051      	str	r1, [r2, #4]
 8001516:	881b      	ldrh	r3, [r3, #0]
 8001518:	8113      	strh	r3, [r2, #8]
 800151a:	e01e      	b.n	800155a <commandReply+0xbe>
			} else if (0 == duty_cmd.sub_para_int) {
 800151c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001520:	2b00      	cmp	r3, #0
 8001522:	d10f      	bne.n	8001544 <commandReply+0xa8>
				scaraSetOutput(0);
 8001524:	2000      	movs	r0, #0
 8001526:	f006 feef 	bl	8008308 <scaraSetOutput>
				strcpy( (char *)detail, "Output OFF");
 800152a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800152e:	4969      	ldr	r1, [pc, #420]	; (80016d4 <commandReply+0x238>)
 8001530:	461a      	mov	r2, r3
 8001532:	460b      	mov	r3, r1
 8001534:	cb03      	ldmia	r3!, {r0, r1}
 8001536:	6010      	str	r0, [r2, #0]
 8001538:	6051      	str	r1, [r2, #4]
 800153a:	8819      	ldrh	r1, [r3, #0]
 800153c:	789b      	ldrb	r3, [r3, #2]
 800153e:	8111      	strh	r1, [r2, #8]
 8001540:	7293      	strb	r3, [r2, #10]
 8001542:	e00a      	b.n	800155a <commandReply+0xbe>
			} else {
				strcpy( (char *)detail, "Wrong Value");
 8001544:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001548:	4a63      	ldr	r2, [pc, #396]	; (80016d8 <commandReply+0x23c>)
 800154a:	461c      	mov	r4, r3
 800154c:	4613      	mov	r3, r2
 800154e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001550:	6020      	str	r0, [r4, #0]
 8001552:	6061      	str	r1, [r4, #4]
 8001554:	60a2      	str	r2, [r4, #8]
				return RPD_ERROR;
 8001556:	2307      	movs	r3, #7
 8001558:	e0b2      	b.n	80016c0 <commandReply+0x224>
			}
			ret = RPD_OK;
 800155a:	2308      	movs	r3, #8
 800155c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
		break;
 8001560:	e0ac      	b.n	80016bc <commandReply+0x220>
	case CMD_READ_STATUS:
		{
			SCARA_ModeTypeDef		current_mode;
			SCARA_DutyStateTypeDef 	current_state;
			current_mode	 = scaraGetMode();
 8001562:	f006 ff13 	bl	800838c <scaraGetMode>
 8001566:	4603      	mov	r3, r0
 8001568:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
			current_state	 = scaraGetDutyState();
 800156c:	f006 ff1a 	bl	80083a4 <scaraGetDutyState>
 8001570:	4603      	mov	r3, r0
 8001572:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
			if ( SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_state) {
 8001576:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800157a:	2b02      	cmp	r3, #2
 800157c:	d107      	bne.n	800158e <commandReply+0xf2>
 800157e:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8001582:	2b00      	cmp	r3, #0
 8001584:	d103      	bne.n	800158e <commandReply+0xf2>
				ret = RPD_IDLE;
 8001586:	2300      	movs	r3, #0
 8001588:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			} else {
				ret = RPD_BUSY;
			}
		}
		break;
 800158c:	e096      	b.n	80016bc <commandReply+0x220>
				ret = RPD_BUSY;
 800158e:	2301      	movs	r3, #1
 8001590:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		break;
 8001594:	e092      	b.n	80016bc <commandReply+0x220>

	case CMD_READ_POSITION:
		{
			SCARA_PositionTypeDef position;
			scaraGetPosition(&position);
 8001596:	f107 0308 	add.w	r3, r7, #8
 800159a:	4618      	mov	r0, r3
 800159c:	f006 fed6 	bl	800834c <scaraGetPosition>
			scaraPosition2String((char *)detail, position);
 80015a0:	4668      	mov	r0, sp
 80015a2:	f107 0310 	add.w	r3, r7, #16
 80015a6:	2260      	movs	r2, #96	; 0x60
 80015a8:	4619      	mov	r1, r3
 80015aa:	f011 ff99 	bl	80134e0 <memcpy>
 80015ae:	f107 0308 	add.w	r3, r7, #8
 80015b2:	cb0c      	ldmia	r3, {r2, r3}
 80015b4:	f8d7 0190 	ldr.w	r0, [r7, #400]	; 0x190
 80015b8:	f006 ff3a 	bl	8008430 <scaraPosition2String>
			ret =  RPD_POSITION;
 80015bc:	2302      	movs	r3, #2
 80015be:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
		break;
 80015c2:	e07b      	b.n	80016bc <commandReply+0x220>

	case CMD_SETTING:
		if ( DUTY_COORDINATES_ABS == duty_cmd.coordinate_type) {
 80015c4:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d10a      	bne.n	80015e2 <commandReply+0x146>
			strcpy( (char *)detail, "Absolute.");
 80015cc:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80015d0:	4942      	ldr	r1, [pc, #264]	; (80016dc <commandReply+0x240>)
 80015d2:	461a      	mov	r2, r3
 80015d4:	460b      	mov	r3, r1
 80015d6:	cb03      	ldmia	r3!, {r0, r1}
 80015d8:	6010      	str	r0, [r2, #0]
 80015da:	6051      	str	r1, [r2, #4]
 80015dc:	881b      	ldrh	r3, [r3, #0]
 80015de:	8113      	strh	r3, [r2, #8]
 80015e0:	e017      	b.n	8001612 <commandReply+0x176>
		} else if ( DUTY_COORDINATES_REL == duty_cmd.coordinate_type) {
 80015e2:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d10a      	bne.n	8001600 <commandReply+0x164>
			strcpy( (char *)detail, "Relative.");
 80015ea:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80015ee:	493c      	ldr	r1, [pc, #240]	; (80016e0 <commandReply+0x244>)
 80015f0:	461a      	mov	r2, r3
 80015f2:	460b      	mov	r3, r1
 80015f4:	cb03      	ldmia	r3!, {r0, r1}
 80015f6:	6010      	str	r0, [r2, #0]
 80015f8:	6051      	str	r1, [r2, #4]
 80015fa:	881b      	ldrh	r3, [r3, #0]
 80015fc:	8113      	strh	r3, [r2, #8]
 80015fe:	e008      	b.n	8001612 <commandReply+0x176>
		} else {
			strcat((char *)detail, DETAIL_STATUS[SCARA_STATUS_ERROR_COORDINATE]);
 8001600:	4b38      	ldr	r3, [pc, #224]	; (80016e4 <commandReply+0x248>)
 8001602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001604:	4619      	mov	r1, r3
 8001606:	f8d7 0190 	ldr.w	r0, [r7, #400]	; 0x190
 800160a:	f012 ff11 	bl	8014430 <strcat>
			return RPD_ERROR;
 800160e:	2307      	movs	r3, #7
 8001610:	e056      	b.n	80016c0 <commandReply+0x224>
		}

		if ( DUTY_TRAJECTORY_LSPB == duty_cmd.trajec_type) {
 8001612:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8001616:	2b00      	cmp	r3, #0
 8001618:	d10e      	bne.n	8001638 <commandReply+0x19c>
			strcat((char *)detail, " LSPB");
 800161a:	f8d7 0190 	ldr.w	r0, [r7, #400]	; 0x190
 800161e:	f7fe fde1 	bl	80001e4 <strlen>
 8001622:	4603      	mov	r3, r0
 8001624:	461a      	mov	r2, r3
 8001626:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800162a:	4413      	add	r3, r2
 800162c:	4a2e      	ldr	r2, [pc, #184]	; (80016e8 <commandReply+0x24c>)
 800162e:	6810      	ldr	r0, [r2, #0]
 8001630:	6018      	str	r0, [r3, #0]
 8001632:	8892      	ldrh	r2, [r2, #4]
 8001634:	809a      	strh	r2, [r3, #4]
 8001636:	e01e      	b.n	8001676 <commandReply+0x1da>
		} else if ( DUTY_TRAJECTORY_SCURVE == duty_cmd.trajec_type) {
 8001638:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 800163c:	2b01      	cmp	r3, #1
 800163e:	d111      	bne.n	8001664 <commandReply+0x1c8>
			strcat((char *)detail, " S-curve");
 8001640:	f8d7 0190 	ldr.w	r0, [r7, #400]	; 0x190
 8001644:	f7fe fdce 	bl	80001e4 <strlen>
 8001648:	4603      	mov	r3, r0
 800164a:	461a      	mov	r2, r3
 800164c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001650:	4413      	add	r3, r2
 8001652:	4926      	ldr	r1, [pc, #152]	; (80016ec <commandReply+0x250>)
 8001654:	461a      	mov	r2, r3
 8001656:	460b      	mov	r3, r1
 8001658:	cb03      	ldmia	r3!, {r0, r1}
 800165a:	6010      	str	r0, [r2, #0]
 800165c:	6051      	str	r1, [r2, #4]
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	7213      	strb	r3, [r2, #8]
 8001662:	e008      	b.n	8001676 <commandReply+0x1da>
		} else {
			strcat((char *)detail, DETAIL_STATUS[SCARA_STATUS_ERROR_TRAJECTORY]);
 8001664:	4b1f      	ldr	r3, [pc, #124]	; (80016e4 <commandReply+0x248>)
 8001666:	695b      	ldr	r3, [r3, #20]
 8001668:	4619      	mov	r1, r3
 800166a:	f8d7 0190 	ldr.w	r0, [r7, #400]	; 0x190
 800166e:	f012 fedf 	bl	8014430 <strcat>
			return RPD_ERROR;
 8001672:	2307      	movs	r3, #7
 8001674:	e024      	b.n	80016c0 <commandReply+0x224>
		}
		ret = RPD_OK;
 8001676:	2308      	movs	r3, #8
 8001678:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		break;
 800167c:	e01e      	b.n	80016bc <commandReply+0x220>
	case CMD_ERROR:
		strcpy( (char *)detail, "Check parameters");
 800167e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001682:	4a1b      	ldr	r2, [pc, #108]	; (80016f0 <commandReply+0x254>)
 8001684:	461d      	mov	r5, r3
 8001686:	4614      	mov	r4, r2
 8001688:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800168a:	6028      	str	r0, [r5, #0]
 800168c:	6069      	str	r1, [r5, #4]
 800168e:	60aa      	str	r2, [r5, #8]
 8001690:	60eb      	str	r3, [r5, #12]
 8001692:	7823      	ldrb	r3, [r4, #0]
 8001694:	742b      	strb	r3, [r5, #16]
		ret = RPD_ERROR;
 8001696:	2307      	movs	r3, #7
 8001698:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		break;
 800169c:	e00e      	b.n	80016bc <commandReply+0x220>
	default:
		strcpy( (char *)detail, "Check parameters");
 800169e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80016a2:	4a13      	ldr	r2, [pc, #76]	; (80016f0 <commandReply+0x254>)
 80016a4:	461d      	mov	r5, r3
 80016a6:	4614      	mov	r4, r2
 80016a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016aa:	6028      	str	r0, [r5, #0]
 80016ac:	6069      	str	r1, [r5, #4]
 80016ae:	60aa      	str	r2, [r5, #8]
 80016b0:	60eb      	str	r3, [r5, #12]
 80016b2:	7823      	ldrb	r3, [r4, #0]
 80016b4:	742b      	strb	r3, [r5, #16]
		ret = RPD_ERROR;
 80016b6:	2307      	movs	r3, #7
 80016b8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	}
	return ret;
 80016bc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3778      	adds	r7, #120	; 0x78
 80016c4:	46bd      	mov	sp, r7
 80016c6:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80016ca:	b002      	add	sp, #8
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	08019354 	.word	0x08019354
 80016d4:	08019360 	.word	0x08019360
 80016d8:	0801936c 	.word	0x0801936c
 80016dc:	08019378 	.word	0x08019378
 80016e0:	08019384 	.word	0x08019384
 80016e4:	20000c80 	.word	0x20000c80
 80016e8:	08019390 	.word	0x08019390
 80016ec:	08019398 	.word	0x08019398
 80016f0:	080193a4 	.word	0x080193a4

080016f4 <commandRespond>:


int32_t				commandRespond	(Robot_RespondTypedef rpd,
										int32_t id_command,
										char *detail,
										char *respond) {
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b088      	sub	sp, #32
 80016f8:	af02      	add	r7, sp, #8
 80016fa:	60b9      	str	r1, [r7, #8]
 80016fc:	607a      	str	r2, [r7, #4]
 80016fe:	603b      	str	r3, [r7, #0]
 8001700:	4603      	mov	r3, r0
 8001702:	73fb      	strb	r3, [r7, #15]
	int out_lenght;
	switch(rpd) {
 8001704:	7bfb      	ldrb	r3, [r7, #15]
 8001706:	2b08      	cmp	r3, #8
 8001708:	d836      	bhi.n	8001778 <commandRespond+0x84>
 800170a:	a201      	add	r2, pc, #4	; (adr r2, 8001710 <commandRespond+0x1c>)
 800170c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001710:	08001735 	.word	0x08001735
 8001714:	08001735 	.word	0x08001735
 8001718:	0800175b 	.word	0x0800175b
 800171c:	0800175b 	.word	0x0800175b
 8001720:	0800175b 	.word	0x0800175b
 8001724:	0800175b 	.word	0x0800175b
 8001728:	0800175b 	.word	0x0800175b
 800172c:	0800175b 	.word	0x0800175b
 8001730:	0800175b 	.word	0x0800175b
	case RPD_IDLE:
	case RPD_BUSY:
		{
			uint8_t		isScanLitmit;
			isScanLitmit = scaraIsScanLimit();
 8001734:	f006 fe42 	bl	80083bc <scaraIsScanLimit>
 8001738:	4603      	mov	r3, r0
 800173a:	74fb      	strb	r3, [r7, #19]
			out_lenght = snprintf( (char *)respond,
 800173c:	7bfb      	ldrb	r3, [r7, #15]
 800173e:	4a12      	ldr	r2, [pc, #72]	; (8001788 <commandRespond+0x94>)
 8001740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001744:	7cfa      	ldrb	r2, [r7, #19]
 8001746:	9201      	str	r2, [sp, #4]
 8001748:	9300      	str	r3, [sp, #0]
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	4a0f      	ldr	r2, [pc, #60]	; (800178c <commandRespond+0x98>)
 800174e:	2114      	movs	r1, #20
 8001750:	6838      	ldr	r0, [r7, #0]
 8001752:	f012 fded 	bl	8014330 <sniprintf>
 8001756:	6178      	str	r0, [r7, #20]
									"%d %s %d",
									(int)id_command,
									ROBOTRESPOND[rpd],
									(int)isScanLitmit);
		}
		break;
 8001758:	e010      	b.n	800177c <commandRespond+0x88>
	case RPD_STOP:
	case RPD_ERROR:
	case RPD_OK:

		{
			out_lenght = snprintf( (char *)respond,
 800175a:	7bfb      	ldrb	r3, [r7, #15]
 800175c:	4a0a      	ldr	r2, [pc, #40]	; (8001788 <commandRespond+0x94>)
 800175e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	9201      	str	r2, [sp, #4]
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	4a09      	ldr	r2, [pc, #36]	; (8001790 <commandRespond+0x9c>)
 800176c:	2191      	movs	r1, #145	; 0x91
 800176e:	6838      	ldr	r0, [r7, #0]
 8001770:	f012 fdde 	bl	8014330 <sniprintf>
 8001774:	6178      	str	r0, [r7, #20]
									"%d %s %s",
									(int)id_command,
									ROBOTRESPOND[rpd],
									(char *)detail);
		}
		break;
 8001776:	e001      	b.n	800177c <commandRespond+0x88>
	default:
		out_lenght = 0;
 8001778:	2300      	movs	r3, #0
 800177a:	617b      	str	r3, [r7, #20]
	}

	return (int32_t)out_lenght;
 800177c:	697b      	ldr	r3, [r7, #20]
}
 800177e:	4618      	mov	r0, r3
 8001780:	3718      	adds	r7, #24
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	2000002c 	.word	0x2000002c
 800178c:	080193b8 	.word	0x080193b8
 8001790:	080193c4 	.word	0x080193c4

08001794 <LOG_REPORT>:
 *  line		: line code number
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t LOG_REPORT(char *message, uint16_t line) {
 8001794:	b580      	push	{r7, lr}
 8001796:	b096      	sub	sp, #88	; 0x58
 8001798:	af02      	add	r7, sp, #8
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	460b      	mov	r3, r1
 800179e:	807b      	strh	r3, [r7, #2]
	uint8_t temp_buff[64];
	int32_t len;

	len = snprintf((char*)temp_buff, 63, "LINE:%d, %s \r\n", line, message);
 80017a0:	887a      	ldrh	r2, [r7, #2]
 80017a2:	f107 0008 	add.w	r0, r7, #8
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	9300      	str	r3, [sp, #0]
 80017aa:	4613      	mov	r3, r2
 80017ac:	4a17      	ldr	r2, [pc, #92]	; (800180c <LOG_REPORT+0x78>)
 80017ae:	213f      	movs	r1, #63	; 0x3f
 80017b0:	f012 fdbe 	bl	8014330 <sniprintf>
 80017b4:	64f8      	str	r0, [r7, #76]	; 0x4c
	if (-1 == len) {
 80017b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017bc:	d101      	bne.n	80017c2 <LOG_REPORT+0x2e>
		return FALSE;
 80017be:	2300      	movs	r3, #0
 80017c0:	e01f      	b.n	8001802 <LOG_REPORT+0x6e>
	}
	ringBuff_PushArray(&uart_tx_ringbuff, temp_buff, len);
 80017c2:	f107 0308 	add.w	r3, r7, #8
 80017c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80017c8:	4619      	mov	r1, r3
 80017ca:	4811      	ldr	r0, [pc, #68]	; (8001810 <LOG_REPORT+0x7c>)
 80017cc:	f001 fec7 	bl	800355e <ringBuff_PushArray>
	if (HAL_DMA_GetState(&hdma_uart4_tx) == HAL_DMA_STATE_BUSY) {
 80017d0:	4810      	ldr	r0, [pc, #64]	; (8001814 <LOG_REPORT+0x80>)
 80017d2:	f007 fdc3 	bl	800935c <HAL_DMA_GetState>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d101      	bne.n	80017e0 <LOG_REPORT+0x4c>
		return TRUE;
 80017dc:	2301      	movs	r3, #1
 80017de:	e010      	b.n	8001802 <LOG_REPORT+0x6e>
	}// dma busy
	uint16_t size_dma;
	size_dma = ringBuff_PopArray(&uart_tx_ringbuff, log_uart_dma_buff, LOG_BUFFER_SIZE);
 80017e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017e4:	490c      	ldr	r1, [pc, #48]	; (8001818 <LOG_REPORT+0x84>)
 80017e6:	480a      	ldr	r0, [pc, #40]	; (8001810 <LOG_REPORT+0x7c>)
 80017e8:	f001 fee1 	bl	80035ae <ringBuff_PopArray>
 80017ec:	4603      	mov	r3, r0
 80017ee:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	HAL_UART_Transmit_DMA(&huart4, log_uart_dma_buff, size_dma);
 80017f2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80017f6:	461a      	mov	r2, r3
 80017f8:	4907      	ldr	r1, [pc, #28]	; (8001818 <LOG_REPORT+0x84>)
 80017fa:	4808      	ldr	r0, [pc, #32]	; (800181c <LOG_REPORT+0x88>)
 80017fc:	f00a f9c0 	bl	800bb80 <HAL_UART_Transmit_DMA>
	return TRUE;
 8001800:	2301      	movs	r3, #1
}
 8001802:	4618      	mov	r0, r3
 8001804:	3750      	adds	r7, #80	; 0x50
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	080193d0 	.word	0x080193d0
 8001810:	2000086c 	.word	0x2000086c
 8001814:	20005ed0 	.word	0x20005ed0
 8001818:	200051dc 	.word	0x200051dc
 800181c:	20005e90 	.word	0x20005e90

08001820 <double2string>:

int32_t	double2string( uint8_t *result, double value, uint8_t precision) {
 8001820:	b5b0      	push	{r4, r5, r7, lr}
 8001822:	b090      	sub	sp, #64	; 0x40
 8001824:	af00      	add	r7, sp, #0
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	ed87 0b00 	vstr	d0, [r7]
 800182c:	460b      	mov	r3, r1
 800182e:	72fb      	strb	r3, [r7, #11]
	uint8_t le[6];
	int8_t sign;
	double temp1, temp2;
	int32_t index;

	if((precision < 0) || (6 < precision)) {
 8001830:	7afb      	ldrb	r3, [r7, #11]
 8001832:	2b06      	cmp	r3, #6
 8001834:	d901      	bls.n	800183a <double2string+0x1a>
		precision = 6;
 8001836:	2306      	movs	r3, #6
 8001838:	72fb      	strb	r3, [r7, #11]
	}

	if(value < 0) {
 800183a:	f04f 0200 	mov.w	r2, #0
 800183e:	f04f 0300 	mov.w	r3, #0
 8001842:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001846:	f7ff f959 	bl	8000afc <__aeabi_dcmplt>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d003      	beq.n	8001858 <double2string+0x38>
		sign = -1;
 8001850:	23ff      	movs	r3, #255	; 0xff
 8001852:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001856:	e002      	b.n	800185e <double2string+0x3e>
	} else {
		sign = 1;
 8001858:	2301      	movs	r3, #1
 800185a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}
	value = value*sign;
 800185e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8001862:	4618      	mov	r0, r3
 8001864:	f7fe fe6e 	bl	8000544 <__aeabi_i2d>
 8001868:	4603      	mov	r3, r0
 800186a:	460c      	mov	r4, r1
 800186c:	461a      	mov	r2, r3
 800186e:	4623      	mov	r3, r4
 8001870:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001874:	f7fe fed0 	bl	8000618 <__aeabi_dmul>
 8001878:	4603      	mov	r3, r0
 800187a:	460c      	mov	r4, r1
 800187c:	e9c7 3400 	strd	r3, r4, [r7]

	if (value > 10000.0f) {
 8001880:	a307      	add	r3, pc, #28	; (adr r3, 80018a0 <double2string+0x80>)
 8001882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001886:	e9d7 0100 	ldrd	r0, r1, [r7]
 800188a:	f7ff f955 	bl	8000b38 <__aeabi_dcmpgt>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d009      	beq.n	80018a8 <double2string+0x88>
		return -1;
 8001894:	f04f 33ff 	mov.w	r3, #4294967295
 8001898:	e265      	b.n	8001d66 <double2string+0x546>
 800189a:	bf00      	nop
 800189c:	f3af 8000 	nop.w
 80018a0:	00000000 	.word	0x00000000
 80018a4:	40c38800 	.word	0x40c38800
	}

	nguyen[0] 	= (int32_t)value/1000;
 80018a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80018ac:	f7ff f964 	bl	8000b78 <__aeabi_d2iz>
 80018b0:	4603      	mov	r3, r0
 80018b2:	4acf      	ldr	r2, [pc, #828]	; (8001bf0 <double2string+0x3d0>)
 80018b4:	fb82 1203 	smull	r1, r2, r2, r3
 80018b8:	1192      	asrs	r2, r2, #6
 80018ba:	17db      	asrs	r3, r3, #31
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	773b      	strb	r3, [r7, #28]
	nguyen[1]	= (int32_t)value/100 - nguyen[0]*10;
 80018c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80018c6:	f7ff f957 	bl	8000b78 <__aeabi_d2iz>
 80018ca:	4603      	mov	r3, r0
 80018cc:	4ac9      	ldr	r2, [pc, #804]	; (8001bf4 <double2string+0x3d4>)
 80018ce:	fb82 1203 	smull	r1, r2, r2, r3
 80018d2:	1152      	asrs	r2, r2, #5
 80018d4:	17db      	asrs	r3, r3, #31
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	b2da      	uxtb	r2, r3
 80018da:	7f3b      	ldrb	r3, [r7, #28]
 80018dc:	4619      	mov	r1, r3
 80018de:	0149      	lsls	r1, r1, #5
 80018e0:	1ac9      	subs	r1, r1, r3
 80018e2:	0089      	lsls	r1, r1, #2
 80018e4:	1acb      	subs	r3, r1, r3
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	4413      	add	r3, r2
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	777b      	strb	r3, [r7, #29]
	nguyen[2]	= (int32_t)value/10 - nguyen[0]*100 - nguyen[1]*10;
 80018f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80018f4:	f7ff f940 	bl	8000b78 <__aeabi_d2iz>
 80018f8:	4603      	mov	r3, r0
 80018fa:	4abf      	ldr	r2, [pc, #764]	; (8001bf8 <double2string+0x3d8>)
 80018fc:	fb82 1203 	smull	r1, r2, r2, r3
 8001900:	1092      	asrs	r2, r2, #2
 8001902:	17db      	asrs	r3, r3, #31
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	b2da      	uxtb	r2, r3
 8001908:	7f7b      	ldrb	r3, [r7, #29]
 800190a:	4619      	mov	r1, r3
 800190c:	0149      	lsls	r1, r1, #5
 800190e:	1ac9      	subs	r1, r1, r3
 8001910:	0089      	lsls	r1, r1, #2
 8001912:	1acb      	subs	r3, r1, r3
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	b2d9      	uxtb	r1, r3
 8001918:	7f3b      	ldrb	r3, [r7, #28]
 800191a:	4618      	mov	r0, r3
 800191c:	0080      	lsls	r0, r0, #2
 800191e:	4418      	add	r0, r3
 8001920:	00c0      	lsls	r0, r0, #3
 8001922:	1ac3      	subs	r3, r0, r3
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	b2db      	uxtb	r3, r3
 8001928:	440b      	add	r3, r1
 800192a:	b2db      	uxtb	r3, r3
 800192c:	4413      	add	r3, r2
 800192e:	b2db      	uxtb	r3, r3
 8001930:	77bb      	strb	r3, [r7, #30]
	nguyen[3]	= (int32_t)value - nguyen[0]*1000 - nguyen[1]*100 - nguyen[2]*10;
 8001932:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001936:	f7ff f91f 	bl	8000b78 <__aeabi_d2iz>
 800193a:	4603      	mov	r3, r0
 800193c:	b2da      	uxtb	r2, r3
 800193e:	7f7b      	ldrb	r3, [r7, #29]
 8001940:	4619      	mov	r1, r3
 8001942:	0089      	lsls	r1, r1, #2
 8001944:	4419      	add	r1, r3
 8001946:	00c9      	lsls	r1, r1, #3
 8001948:	1acb      	subs	r3, r1, r3
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	b2d9      	uxtb	r1, r3
 800194e:	7f3b      	ldrb	r3, [r7, #28]
 8001950:	4618      	mov	r0, r3
 8001952:	0040      	lsls	r0, r0, #1
 8001954:	4403      	add	r3, r0
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	b2db      	uxtb	r3, r3
 800195a:	440b      	add	r3, r1
 800195c:	b2db      	uxtb	r3, r3
 800195e:	4413      	add	r3, r2
 8001960:	b2da      	uxtb	r2, r3
 8001962:	7fbb      	ldrb	r3, [r7, #30]
 8001964:	4619      	mov	r1, r3
 8001966:	0149      	lsls	r1, r1, #5
 8001968:	1ac9      	subs	r1, r1, r3
 800196a:	0089      	lsls	r1, r1, #2
 800196c:	1acb      	subs	r3, r1, r3
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	b2db      	uxtb	r3, r3
 8001972:	4413      	add	r3, r2
 8001974:	b2db      	uxtb	r3, r3
 8001976:	77fb      	strb	r3, [r7, #31]

	temp1	= (value - nguyen[0]*1000 - nguyen[1]*100 - nguyen[2]*10 - nguyen[3])*1000;
 8001978:	7f3b      	ldrb	r3, [r7, #28]
 800197a:	461a      	mov	r2, r3
 800197c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001980:	fb03 f302 	mul.w	r3, r3, r2
 8001984:	4618      	mov	r0, r3
 8001986:	f7fe fddd 	bl	8000544 <__aeabi_i2d>
 800198a:	4603      	mov	r3, r0
 800198c:	460c      	mov	r4, r1
 800198e:	461a      	mov	r2, r3
 8001990:	4623      	mov	r3, r4
 8001992:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001996:	f7fe fc87 	bl	80002a8 <__aeabi_dsub>
 800199a:	4603      	mov	r3, r0
 800199c:	460c      	mov	r4, r1
 800199e:	4625      	mov	r5, r4
 80019a0:	461c      	mov	r4, r3
 80019a2:	7f7b      	ldrb	r3, [r7, #29]
 80019a4:	461a      	mov	r2, r3
 80019a6:	2364      	movs	r3, #100	; 0x64
 80019a8:	fb03 f302 	mul.w	r3, r3, r2
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7fe fdc9 	bl	8000544 <__aeabi_i2d>
 80019b2:	4602      	mov	r2, r0
 80019b4:	460b      	mov	r3, r1
 80019b6:	4620      	mov	r0, r4
 80019b8:	4629      	mov	r1, r5
 80019ba:	f7fe fc75 	bl	80002a8 <__aeabi_dsub>
 80019be:	4603      	mov	r3, r0
 80019c0:	460c      	mov	r4, r1
 80019c2:	4625      	mov	r5, r4
 80019c4:	461c      	mov	r4, r3
 80019c6:	7fbb      	ldrb	r3, [r7, #30]
 80019c8:	461a      	mov	r2, r3
 80019ca:	4613      	mov	r3, r2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	4413      	add	r3, r2
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7fe fdb6 	bl	8000544 <__aeabi_i2d>
 80019d8:	4602      	mov	r2, r0
 80019da:	460b      	mov	r3, r1
 80019dc:	4620      	mov	r0, r4
 80019de:	4629      	mov	r1, r5
 80019e0:	f7fe fc62 	bl	80002a8 <__aeabi_dsub>
 80019e4:	4603      	mov	r3, r0
 80019e6:	460c      	mov	r4, r1
 80019e8:	4625      	mov	r5, r4
 80019ea:	461c      	mov	r4, r3
 80019ec:	7ffb      	ldrb	r3, [r7, #31]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7fe fda8 	bl	8000544 <__aeabi_i2d>
 80019f4:	4602      	mov	r2, r0
 80019f6:	460b      	mov	r3, r1
 80019f8:	4620      	mov	r0, r4
 80019fa:	4629      	mov	r1, r5
 80019fc:	f7fe fc54 	bl	80002a8 <__aeabi_dsub>
 8001a00:	4603      	mov	r3, r0
 8001a02:	460c      	mov	r4, r1
 8001a04:	4618      	mov	r0, r3
 8001a06:	4621      	mov	r1, r4
 8001a08:	f04f 0200 	mov.w	r2, #0
 8001a0c:	4b7b      	ldr	r3, [pc, #492]	; (8001bfc <double2string+0x3dc>)
 8001a0e:	f7fe fe03 	bl	8000618 <__aeabi_dmul>
 8001a12:	4603      	mov	r3, r0
 8001a14:	460c      	mov	r4, r1
 8001a16:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	le[0] 	= (int32_t)temp1/100;
 8001a1a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001a1e:	f7ff f8ab 	bl	8000b78 <__aeabi_d2iz>
 8001a22:	4603      	mov	r3, r0
 8001a24:	4a73      	ldr	r2, [pc, #460]	; (8001bf4 <double2string+0x3d4>)
 8001a26:	fb82 1203 	smull	r1, r2, r2, r3
 8001a2a:	1152      	asrs	r2, r2, #5
 8001a2c:	17db      	asrs	r3, r3, #31
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	753b      	strb	r3, [r7, #20]
	le[1] 	= (int32_t)temp1/10 - le[0]*10;
 8001a34:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001a38:	f7ff f89e 	bl	8000b78 <__aeabi_d2iz>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	4a6e      	ldr	r2, [pc, #440]	; (8001bf8 <double2string+0x3d8>)
 8001a40:	fb82 1203 	smull	r1, r2, r2, r3
 8001a44:	1092      	asrs	r2, r2, #2
 8001a46:	17db      	asrs	r3, r3, #31
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	b2da      	uxtb	r2, r3
 8001a4c:	7d3b      	ldrb	r3, [r7, #20]
 8001a4e:	4619      	mov	r1, r3
 8001a50:	0149      	lsls	r1, r1, #5
 8001a52:	1ac9      	subs	r1, r1, r3
 8001a54:	0089      	lsls	r1, r1, #2
 8001a56:	1acb      	subs	r3, r1, r3
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	4413      	add	r3, r2
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	757b      	strb	r3, [r7, #21]
	le[2]	= (int32_t)temp1 - le[0]*100 - le[1]*10;
 8001a62:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001a66:	f7ff f887 	bl	8000b78 <__aeabi_d2iz>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	b2da      	uxtb	r2, r3
 8001a6e:	7d7b      	ldrb	r3, [r7, #21]
 8001a70:	4619      	mov	r1, r3
 8001a72:	0149      	lsls	r1, r1, #5
 8001a74:	1ac9      	subs	r1, r1, r3
 8001a76:	0089      	lsls	r1, r1, #2
 8001a78:	1acb      	subs	r3, r1, r3
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	b2d9      	uxtb	r1, r3
 8001a7e:	7d3b      	ldrb	r3, [r7, #20]
 8001a80:	4618      	mov	r0, r3
 8001a82:	0080      	lsls	r0, r0, #2
 8001a84:	4418      	add	r0, r3
 8001a86:	00c0      	lsls	r0, r0, #3
 8001a88:	1ac3      	subs	r3, r0, r3
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	440b      	add	r3, r1
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	4413      	add	r3, r2
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	75bb      	strb	r3, [r7, #22]

	temp2	= (temp1 - le[0]*100 - le[1]*10 - le[2])*1000;
 8001a98:	7d3b      	ldrb	r3, [r7, #20]
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	2364      	movs	r3, #100	; 0x64
 8001a9e:	fb03 f302 	mul.w	r3, r3, r2
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7fe fd4e 	bl	8000544 <__aeabi_i2d>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	460c      	mov	r4, r1
 8001aac:	461a      	mov	r2, r3
 8001aae:	4623      	mov	r3, r4
 8001ab0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001ab4:	f7fe fbf8 	bl	80002a8 <__aeabi_dsub>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	460c      	mov	r4, r1
 8001abc:	4625      	mov	r5, r4
 8001abe:	461c      	mov	r4, r3
 8001ac0:	7d7b      	ldrb	r3, [r7, #21]
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	4413      	add	r3, r2
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7fe fd39 	bl	8000544 <__aeabi_i2d>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	4620      	mov	r0, r4
 8001ad8:	4629      	mov	r1, r5
 8001ada:	f7fe fbe5 	bl	80002a8 <__aeabi_dsub>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	460c      	mov	r4, r1
 8001ae2:	4625      	mov	r5, r4
 8001ae4:	461c      	mov	r4, r3
 8001ae6:	7dbb      	ldrb	r3, [r7, #22]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7fe fd2b 	bl	8000544 <__aeabi_i2d>
 8001aee:	4602      	mov	r2, r0
 8001af0:	460b      	mov	r3, r1
 8001af2:	4620      	mov	r0, r4
 8001af4:	4629      	mov	r1, r5
 8001af6:	f7fe fbd7 	bl	80002a8 <__aeabi_dsub>
 8001afa:	4603      	mov	r3, r0
 8001afc:	460c      	mov	r4, r1
 8001afe:	4618      	mov	r0, r3
 8001b00:	4621      	mov	r1, r4
 8001b02:	f04f 0200 	mov.w	r2, #0
 8001b06:	4b3d      	ldr	r3, [pc, #244]	; (8001bfc <double2string+0x3dc>)
 8001b08:	f7fe fd86 	bl	8000618 <__aeabi_dmul>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	460c      	mov	r4, r1
 8001b10:	e9c7 3408 	strd	r3, r4, [r7, #32]
	le[3] 	= (int32_t)temp2/100;
 8001b14:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001b18:	f7ff f82e 	bl	8000b78 <__aeabi_d2iz>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	4a35      	ldr	r2, [pc, #212]	; (8001bf4 <double2string+0x3d4>)
 8001b20:	fb82 1203 	smull	r1, r2, r2, r3
 8001b24:	1152      	asrs	r2, r2, #5
 8001b26:	17db      	asrs	r3, r3, #31
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	75fb      	strb	r3, [r7, #23]
	le[4] 	= (int32_t)temp2/10 - le[3]*10;
 8001b2e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001b32:	f7ff f821 	bl	8000b78 <__aeabi_d2iz>
 8001b36:	4603      	mov	r3, r0
 8001b38:	4a2f      	ldr	r2, [pc, #188]	; (8001bf8 <double2string+0x3d8>)
 8001b3a:	fb82 1203 	smull	r1, r2, r2, r3
 8001b3e:	1092      	asrs	r2, r2, #2
 8001b40:	17db      	asrs	r3, r3, #31
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	b2da      	uxtb	r2, r3
 8001b46:	7dfb      	ldrb	r3, [r7, #23]
 8001b48:	4619      	mov	r1, r3
 8001b4a:	0149      	lsls	r1, r1, #5
 8001b4c:	1ac9      	subs	r1, r1, r3
 8001b4e:	0089      	lsls	r1, r1, #2
 8001b50:	1acb      	subs	r3, r1, r3
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	4413      	add	r3, r2
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	763b      	strb	r3, [r7, #24]
	le[5]	= (int32_t)temp2 - le[3]*100 - le[4]*10;
 8001b5c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001b60:	f7ff f80a 	bl	8000b78 <__aeabi_d2iz>
 8001b64:	4603      	mov	r3, r0
 8001b66:	b2da      	uxtb	r2, r3
 8001b68:	7e3b      	ldrb	r3, [r7, #24]
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	0149      	lsls	r1, r1, #5
 8001b6e:	1ac9      	subs	r1, r1, r3
 8001b70:	0089      	lsls	r1, r1, #2
 8001b72:	1acb      	subs	r3, r1, r3
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	b2d9      	uxtb	r1, r3
 8001b78:	7dfb      	ldrb	r3, [r7, #23]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	0080      	lsls	r0, r0, #2
 8001b7e:	4418      	add	r0, r3
 8001b80:	00c0      	lsls	r0, r0, #3
 8001b82:	1ac3      	subs	r3, r0, r3
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	440b      	add	r3, r1
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	4413      	add	r3, r2
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	767b      	strb	r3, [r7, #25]
	// Rounding
	if ((temp2 - le[3]*1000 - le[4]*100 - le[5]) >= 0.5) {
 8001b92:	7dfb      	ldrb	r3, [r7, #23]
 8001b94:	461a      	mov	r2, r3
 8001b96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b9a:	fb03 f302 	mul.w	r3, r3, r2
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7fe fcd0 	bl	8000544 <__aeabi_i2d>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	460c      	mov	r4, r1
 8001ba8:	461a      	mov	r2, r3
 8001baa:	4623      	mov	r3, r4
 8001bac:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001bb0:	f7fe fb7a 	bl	80002a8 <__aeabi_dsub>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	460c      	mov	r4, r1
 8001bb8:	4625      	mov	r5, r4
 8001bba:	461c      	mov	r4, r3
 8001bbc:	7e3b      	ldrb	r3, [r7, #24]
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	2364      	movs	r3, #100	; 0x64
 8001bc2:	fb03 f302 	mul.w	r3, r3, r2
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7fe fcbc 	bl	8000544 <__aeabi_i2d>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	460b      	mov	r3, r1
 8001bd0:	4620      	mov	r0, r4
 8001bd2:	4629      	mov	r1, r5
 8001bd4:	f7fe fb68 	bl	80002a8 <__aeabi_dsub>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	460c      	mov	r4, r1
 8001bdc:	4625      	mov	r5, r4
 8001bde:	461c      	mov	r4, r3
 8001be0:	7e7b      	ldrb	r3, [r7, #25]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7fe fcae 	bl	8000544 <__aeabi_i2d>
 8001be8:	4602      	mov	r2, r0
 8001bea:	460b      	mov	r3, r1
 8001bec:	e008      	b.n	8001c00 <double2string+0x3e0>
 8001bee:	bf00      	nop
 8001bf0:	10624dd3 	.word	0x10624dd3
 8001bf4:	51eb851f 	.word	0x51eb851f
 8001bf8:	66666667 	.word	0x66666667
 8001bfc:	408f4000 	.word	0x408f4000
 8001c00:	4620      	mov	r0, r4
 8001c02:	4629      	mov	r1, r5
 8001c04:	f7fe fb50 	bl	80002a8 <__aeabi_dsub>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	460c      	mov	r4, r1
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	4621      	mov	r1, r4
 8001c10:	f04f 0200 	mov.w	r2, #0
 8001c14:	4b56      	ldr	r3, [pc, #344]	; (8001d70 <double2string+0x550>)
 8001c16:	f7fe ff85 	bl	8000b24 <__aeabi_dcmpge>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d003      	beq.n	8001c28 <double2string+0x408>
		le[5]++;
 8001c20:	7e7b      	ldrb	r3, [r7, #25]
 8001c22:	3301      	adds	r3, #1
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	767b      	strb	r3, [r7, #25]
	}

	index = 0;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	63bb      	str	r3, [r7, #56]	; 0x38

	if( -1 == sign) {
 8001c2c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8001c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c34:	d107      	bne.n	8001c46 <double2string+0x426>
		*(result + index++) = '-'; // Negative
 8001c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c38:	1c5a      	adds	r2, r3, #1
 8001c3a:	63ba      	str	r2, [r7, #56]	; 0x38
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	4413      	add	r3, r2
 8001c42:	222d      	movs	r2, #45	; 0x2d
 8001c44:	701a      	strb	r2, [r3, #0]
	}
	// Find first position
	if ( value < 1) {
 8001c46:	f04f 0200 	mov.w	r2, #0
 8001c4a:	4b4a      	ldr	r3, [pc, #296]	; (8001d74 <double2string+0x554>)
 8001c4c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c50:	f7fe ff54 	bl	8000afc <__aeabi_dcmplt>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d008      	beq.n	8001c6c <double2string+0x44c>
		*(result + index++) = 0x30;
 8001c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c5c:	1c5a      	adds	r2, r3, #1
 8001c5e:	63ba      	str	r2, [r7, #56]	; 0x38
 8001c60:	461a      	mov	r2, r3
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	4413      	add	r3, r2
 8001c66:	2230      	movs	r2, #48	; 0x30
 8001c68:	701a      	strb	r2, [r3, #0]
 8001c6a:	e04b      	b.n	8001d04 <double2string+0x4e4>
	} else {
		int8_t i = 0;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		for( ; i < 4; i++) {
 8001c72:	e027      	b.n	8001cc4 <double2string+0x4a4>
			if (nguyen[i] > 0) {
 8001c74:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001c78:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001c7c:	4413      	add	r3, r2
 8001c7e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d017      	beq.n	8001cb6 <double2string+0x496>
				*(result + index++) = nguyen[i] + 0x30;
 8001c86:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001c8a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001c8e:	4413      	add	r3, r2
 8001c90:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 8001c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c96:	1c59      	adds	r1, r3, #1
 8001c98:	63b9      	str	r1, [r7, #56]	; 0x38
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	440b      	add	r3, r1
 8001ca0:	3230      	adds	r2, #48	; 0x30
 8001ca2:	b2d2      	uxtb	r2, r2
 8001ca4:	701a      	strb	r2, [r3, #0]
				i++;
 8001ca6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	3301      	adds	r3, #1
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;
 8001cb4:	e00a      	b.n	8001ccc <double2string+0x4ac>
		for( ; i < 4; i++) {
 8001cb6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001cc4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001cc8:	2b03      	cmp	r3, #3
 8001cca:	ddd3      	ble.n	8001c74 <double2string+0x454>
			}
		}

		for( ; i < 4; i++) {
 8001ccc:	e016      	b.n	8001cfc <double2string+0x4dc>
		*(result + index++) = nguyen[i] + 0x30;
 8001cce:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001cd2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001cd6:	4413      	add	r3, r2
 8001cd8:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 8001cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cde:	1c59      	adds	r1, r3, #1
 8001ce0:	63b9      	str	r1, [r7, #56]	; 0x38
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	440b      	add	r3, r1
 8001ce8:	3230      	adds	r2, #48	; 0x30
 8001cea:	b2d2      	uxtb	r2, r2
 8001cec:	701a      	strb	r2, [r3, #0]
		for( ; i < 4; i++) {
 8001cee:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001cfc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001d00:	2b03      	cmp	r3, #3
 8001d02:	dde4      	ble.n	8001cce <double2string+0x4ae>
		}
	}
	*(result + index++) = '.';
 8001d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d06:	1c5a      	adds	r2, r3, #1
 8001d08:	63ba      	str	r2, [r7, #56]	; 0x38
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	4413      	add	r3, r2
 8001d10:	222e      	movs	r2, #46	; 0x2e
 8001d12:	701a      	strb	r2, [r3, #0]
	for( int8_t i = 0; i < precision; i++) {
 8001d14:	2300      	movs	r3, #0
 8001d16:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001d1a:	e016      	b.n	8001d4a <double2string+0x52a>
			*(result + index++) = le[i] + 0x30;
 8001d1c:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8001d20:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001d24:	4413      	add	r3, r2
 8001d26:	f813 2c2c 	ldrb.w	r2, [r3, #-44]
 8001d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d2c:	1c59      	adds	r1, r3, #1
 8001d2e:	63b9      	str	r1, [r7, #56]	; 0x38
 8001d30:	4619      	mov	r1, r3
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	440b      	add	r3, r1
 8001d36:	3230      	adds	r2, #48	; 0x30
 8001d38:	b2d2      	uxtb	r2, r2
 8001d3a:	701a      	strb	r2, [r3, #0]
	for( int8_t i = 0; i < precision; i++) {
 8001d3c:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	3301      	adds	r3, #1
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001d4a:	f997 2036 	ldrsb.w	r2, [r7, #54]	; 0x36
 8001d4e:	7afb      	ldrb	r3, [r7, #11]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	dbe3      	blt.n	8001d1c <double2string+0x4fc>
	}

	// Chua giai quyet van de lam tron chu so thap phan
	*(result + index++) = 0;
 8001d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d56:	1c5a      	adds	r2, r3, #1
 8001d58:	63ba      	str	r2, [r7, #56]	; 0x38
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	4413      	add	r3, r2
 8001d60:	2200      	movs	r2, #0
 8001d62:	701a      	strb	r2, [r3, #0]
	return index;
 8001d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3740      	adds	r7, #64	; 0x40
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bdb0      	pop	{r4, r5, r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	3fe00000 	.word	0x3fe00000
 8001d74:	3ff00000 	.word	0x3ff00000

08001d78 <packPayload>:
 *  in_lenght		: lenght of input_buff
 *
 *  returns:		: lenght of output_buff
 *  				  -1 if error
 */
int32_t	packPayload		(uint8_t *input_buff, uint8_t *output_buff, int32_t in_lenght) {
 8001d78:	b5b0      	push	{r4, r5, r7, lr}
 8001d7a:	b088      	sub	sp, #32
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	607a      	str	r2, [r7, #4]
 8001d84:	466b      	mov	r3, sp
 8001d86:	461d      	mov	r5, r3
	if (NULL == input_buff) {
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d102      	bne.n	8001d94 <packPayload+0x1c>
		return -1;
 8001d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d92:	e056      	b.n	8001e42 <packPayload+0xca>
	}

	if (NULL == output_buff) {
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d102      	bne.n	8001da0 <packPayload+0x28>
		return -1;
 8001d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d9e:	e050      	b.n	8001e42 <packPayload+0xca>
	}

	int32_t out_lenght = 0;
 8001da0:	2300      	movs	r3, #0
 8001da2:	61bb      	str	r3, [r7, #24]

	out_lenght = in_lenght + 2;//lenght of start char and end char
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	3302      	adds	r3, #2
 8001da8:	61bb      	str	r3, [r7, #24]
//		if ( (START_CHAR == input_buff[i]) ||	(END_CHAR == input_buff[i])	|| (ADD_CHAR == input_buff[i]) ) {
//			out_lenght++;
//		}
//	}// compute output buffer lenght

	uint8_t temp_buff[out_lenght];
 8001daa:	69b8      	ldr	r0, [r7, #24]
 8001dac:	1e43      	subs	r3, r0, #1
 8001dae:	617b      	str	r3, [r7, #20]
 8001db0:	4603      	mov	r3, r0
 8001db2:	4619      	mov	r1, r3
 8001db4:	f04f 0200 	mov.w	r2, #0
 8001db8:	f04f 0300 	mov.w	r3, #0
 8001dbc:	f04f 0400 	mov.w	r4, #0
 8001dc0:	00d4      	lsls	r4, r2, #3
 8001dc2:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001dc6:	00cb      	lsls	r3, r1, #3
 8001dc8:	4603      	mov	r3, r0
 8001dca:	4619      	mov	r1, r3
 8001dcc:	f04f 0200 	mov.w	r2, #0
 8001dd0:	f04f 0300 	mov.w	r3, #0
 8001dd4:	f04f 0400 	mov.w	r4, #0
 8001dd8:	00d4      	lsls	r4, r2, #3
 8001dda:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001dde:	00cb      	lsls	r3, r1, #3
 8001de0:	4603      	mov	r3, r0
 8001de2:	3307      	adds	r3, #7
 8001de4:	08db      	lsrs	r3, r3, #3
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	ebad 0d03 	sub.w	sp, sp, r3
 8001dec:	466b      	mov	r3, sp
 8001dee:	3300      	adds	r3, #0
 8001df0:	613b      	str	r3, [r7, #16]

	out_lenght = 0;
 8001df2:	2300      	movs	r3, #0
 8001df4:	61bb      	str	r3, [r7, #24]
	temp_buff[out_lenght++] = START_CHAR;
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	1c5a      	adds	r2, r3, #1
 8001dfa:	61ba      	str	r2, [r7, #24]
 8001dfc:	693a      	ldr	r2, [r7, #16]
 8001dfe:	2128      	movs	r1, #40	; 0x28
 8001e00:	54d1      	strb	r1, [r2, r3]
	for (int32_t i = 0; i < in_lenght; i++) {
 8001e02:	2300      	movs	r3, #0
 8001e04:	61fb      	str	r3, [r7, #28]
 8001e06:	e00b      	b.n	8001e20 <packPayload+0xa8>
//			temp_buff[out_lenght++] = ADD_CHAR;
//			temp_buff[out_lenght++] = input_buff[i] ^ XOR_CHAR;
//		} else {
//			temp_buff[out_lenght++] = input_buff[i];
//		}
		temp_buff[out_lenght++] = input_buff[i];
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	441a      	add	r2, r3
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	1c59      	adds	r1, r3, #1
 8001e12:	61b9      	str	r1, [r7, #24]
 8001e14:	7811      	ldrb	r1, [r2, #0]
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	54d1      	strb	r1, [r2, r3]
	for (int32_t i = 0; i < in_lenght; i++) {
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	61fb      	str	r3, [r7, #28]
 8001e20:	69fa      	ldr	r2, [r7, #28]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	dbef      	blt.n	8001e08 <packPayload+0x90>
	}
	temp_buff[out_lenght++] = END_CHAR;
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	1c5a      	adds	r2, r3, #1
 8001e2c:	61ba      	str	r2, [r7, #24]
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	2129      	movs	r1, #41	; 0x29
 8001e32:	54d1      	strb	r1, [r2, r3]

	memmove(output_buff, temp_buff, out_lenght);
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	4619      	mov	r1, r3
 8001e3a:	68b8      	ldr	r0, [r7, #8]
 8001e3c:	f011 fb5b 	bl	80134f6 <memmove>

	return out_lenght;
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	46ad      	mov	sp, r5
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3720      	adds	r7, #32
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bdb0      	pop	{r4, r5, r7, pc}

08001e4c <unPackPayload>:
 *  in_lenght		: lenght of input_buff
 *
 *  returns:		: lenght of output_buff
 *  				  -1 if error
 */
int32_t	unPackPayload	(uint8_t *message_buff, int32_t in_lenght) {
 8001e4c:	b5b0      	push	{r4, r5, r7, lr}
 8001e4e:	b086      	sub	sp, #24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
 8001e56:	466b      	mov	r3, sp
 8001e58:	461d      	mov	r5, r3
	if (in_lenght < MIN_MESSAGE_LENGHT) {
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	2b05      	cmp	r3, #5
 8001e5e:	dc02      	bgt.n	8001e66 <unPackPayload+0x1a>
		return -1;
 8001e60:	f04f 33ff 	mov.w	r3, #4294967295
 8001e64:	e063      	b.n	8001f2e <unPackPayload+0xe2>
	}// check minimum lenght

	if ( (START_CHAR != message_buff[0]) || (END_CHAR != message_buff[in_lenght - 1]) ) {
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	2b28      	cmp	r3, #40	; 0x28
 8001e6c:	d106      	bne.n	8001e7c <unPackPayload+0x30>
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	3b01      	subs	r3, #1
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	4413      	add	r3, r2
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	2b29      	cmp	r3, #41	; 0x29
 8001e7a:	d002      	beq.n	8001e82 <unPackPayload+0x36>
		return -1;
 8001e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e80:	e055      	b.n	8001f2e <unPackPayload+0xe2>
	}// check start char and end char

	int32_t out_lenght = in_lenght - 2;
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	3b02      	subs	r3, #2
 8001e86:	613b      	str	r3, [r7, #16]
//		if ( (START_CHAR == message_buff[i]) || (END_CHAR == message_buff[i]) || (ADD_CHAR == message_buff[i]) ) {
//			out_lenght--;
//		}
//	}// compute output buffer lenght

	uint8_t temp_buff[out_lenght];
 8001e88:	6938      	ldr	r0, [r7, #16]
 8001e8a:	1e43      	subs	r3, r0, #1
 8001e8c:	60fb      	str	r3, [r7, #12]
 8001e8e:	4603      	mov	r3, r0
 8001e90:	4619      	mov	r1, r3
 8001e92:	f04f 0200 	mov.w	r2, #0
 8001e96:	f04f 0300 	mov.w	r3, #0
 8001e9a:	f04f 0400 	mov.w	r4, #0
 8001e9e:	00d4      	lsls	r4, r2, #3
 8001ea0:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001ea4:	00cb      	lsls	r3, r1, #3
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	f04f 0200 	mov.w	r2, #0
 8001eae:	f04f 0300 	mov.w	r3, #0
 8001eb2:	f04f 0400 	mov.w	r4, #0
 8001eb6:	00d4      	lsls	r4, r2, #3
 8001eb8:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001ebc:	00cb      	lsls	r3, r1, #3
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	3307      	adds	r3, #7
 8001ec2:	08db      	lsrs	r3, r3, #3
 8001ec4:	00db      	lsls	r3, r3, #3
 8001ec6:	ebad 0d03 	sub.w	sp, sp, r3
 8001eca:	466b      	mov	r3, sp
 8001ecc:	3300      	adds	r3, #0
 8001ece:	60bb      	str	r3, [r7, #8]

	out_lenght = 0;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	613b      	str	r3, [r7, #16]
	for (int32_t i = 0; i < (in_lenght - 1); i++) {
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	617b      	str	r3, [r7, #20]
 8001ed8:	e017      	b.n	8001f0a <unPackPayload+0xbe>
		if ( (START_CHAR == message_buff[i]) ||	(END_CHAR == message_buff[i]) ) {
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	4413      	add	r3, r2
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	2b28      	cmp	r3, #40	; 0x28
 8001ee4:	d00e      	beq.n	8001f04 <unPackPayload+0xb8>
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	4413      	add	r3, r2
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	2b29      	cmp	r3, #41	; 0x29
 8001ef0:	d008      	beq.n	8001f04 <unPackPayload+0xb8>
			;
//		} else if ( (ADD_CHAR == message_buff[i]) ) {
//			temp_buff[out_lenght++] = message_buff[++i] ^ XOR_CHAR;
		}
		else {
			temp_buff[out_lenght++] = message_buff[i];
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	441a      	add	r2, r3
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	1c59      	adds	r1, r3, #1
 8001efc:	6139      	str	r1, [r7, #16]
 8001efe:	7811      	ldrb	r1, [r2, #0]
 8001f00:	68ba      	ldr	r2, [r7, #8]
 8001f02:	54d1      	strb	r1, [r2, r3]
	for (int32_t i = 0; i < (in_lenght - 1); i++) {
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	3301      	adds	r3, #1
 8001f08:	617b      	str	r3, [r7, #20]
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	3b01      	subs	r3, #1
 8001f0e:	697a      	ldr	r2, [r7, #20]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	dbe2      	blt.n	8001eda <unPackPayload+0x8e>
		}
	}
	memset((uint8_t*)message_buff, 0, in_lenght);
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	461a      	mov	r2, r3
 8001f18:	2100      	movs	r1, #0
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f011 fb04 	bl	8013528 <memset>
	memmove(message_buff, temp_buff, out_lenght);
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	4619      	mov	r1, r3
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f011 fae5 	bl	80134f6 <memmove>

	return out_lenght;
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	46ad      	mov	sp, r5
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3718      	adds	r7, #24
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bdb0      	pop	{r4, r5, r7, pc}

08001f38 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f3e:	2300      	movs	r3, #0
 8001f40:	607b      	str	r3, [r7, #4]
 8001f42:	4b0c      	ldr	r3, [pc, #48]	; (8001f74 <MX_DMA_Init+0x3c>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	4a0b      	ldr	r2, [pc, #44]	; (8001f74 <MX_DMA_Init+0x3c>)
 8001f48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f4e:	4b09      	ldr	r3, [pc, #36]	; (8001f74 <MX_DMA_Init+0x3c>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f56:	607b      	str	r3, [r7, #4]
 8001f58:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	2105      	movs	r1, #5
 8001f5e:	200f      	movs	r0, #15
 8001f60:	f006 ff20 	bl	8008da4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001f64:	200f      	movs	r0, #15
 8001f66:	f006 ff39 	bl	8008ddc <HAL_NVIC_EnableIRQ>

}
 8001f6a:	bf00      	nop
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	40023800 	.word	0x40023800

08001f78 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	4a07      	ldr	r2, [pc, #28]	; (8001fa4 <vApplicationGetIdleTaskMemory+0x2c>)
 8001f88:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	4a06      	ldr	r2, [pc, #24]	; (8001fa8 <vApplicationGetIdleTaskMemory+0x30>)
 8001f8e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f96:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8001f98:	bf00      	nop
 8001f9a:	3714      	adds	r7, #20
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr
 8001fa4:	20001024 	.word	0x20001024
 8001fa8:	20001078 	.word	0x20001078

08001fac <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001fac:	b5b0      	push	{r4, r5, r7, lr}
 8001fae:	b094      	sub	sp, #80	; 0x50
 8001fb0:	af00      	add	r7, sp, #0
       
  /* USER CODE END Init */

  /* Create the mutex(es) */
  /* definition and creation of usbTxMutex */
  osMutexDef(usbTxMutex);
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	64bb      	str	r3, [r7, #72]	; 0x48
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	64fb      	str	r3, [r7, #76]	; 0x4c
  usbTxMutexHandle = osMutexCreate(osMutex(usbTxMutex));
 8001fba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f00d fc96 	bl	800f8f0 <osMutexCreate>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	4b1d      	ldr	r3, [pc, #116]	; (800203c <MX_FREERTOS_Init+0x90>)
 8001fc8:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
	  /* Create the queue(s) */
	  /* definition and creation of commandMail */
	  osMailQDef(commandMail, 1, DUTY_Command_TypeDef);
 8001fca:	2301      	movs	r3, #1
 8001fcc:	63bb      	str	r3, [r7, #56]	; 0x38
 8001fce:	f44f 7384 	mov.w	r3, #264	; 0x108
 8001fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fd4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001fd8:	643b      	str	r3, [r7, #64]	; 0x40
	  commandMailHandle = osMailCreate(osMailQ(commandMail), NULL);
 8001fda:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001fde:	2100      	movs	r1, #0
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f00d fe21 	bl	800fc28 <osMailCreate>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	4b15      	ldr	r3, [pc, #84]	; (8002040 <MX_FREERTOS_Init+0x94>)
 8001fea:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityHigh, 0, 2048);
 8001fec:	4b15      	ldr	r3, [pc, #84]	; (8002044 <MX_FREERTOS_Init+0x98>)
 8001fee:	f107 041c 	add.w	r4, r7, #28
 8001ff2:	461d      	mov	r5, r3
 8001ff4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ff6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ff8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001ffc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002000:	f107 031c 	add.w	r3, r7, #28
 8002004:	2100      	movs	r1, #0
 8002006:	4618      	mov	r0, r3
 8002008:	f00d fb85 	bl	800f716 <osThreadCreate>
 800200c:	4602      	mov	r2, r0
 800200e:	4b0e      	ldr	r3, [pc, #56]	; (8002048 <MX_FREERTOS_Init+0x9c>)
 8002010:	601a      	str	r2, [r3, #0]

  /* definition and creation of USB_RX_Check_ */
  osThreadDef(USB_RX_Check_, Start_USB_RX_Task, osPriorityNormal, 0, 1024);
 8002012:	4b0e      	ldr	r3, [pc, #56]	; (800204c <MX_FREERTOS_Init+0xa0>)
 8002014:	463c      	mov	r4, r7
 8002016:	461d      	mov	r5, r3
 8002018:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800201a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800201c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002020:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  USB_RX_Check_Handle = osThreadCreate(osThread(USB_RX_Check_), NULL);
 8002024:	463b      	mov	r3, r7
 8002026:	2100      	movs	r1, #0
 8002028:	4618      	mov	r0, r3
 800202a:	f00d fb74 	bl	800f716 <osThreadCreate>
 800202e:	4602      	mov	r2, r0
 8002030:	4b07      	ldr	r3, [pc, #28]	; (8002050 <MX_FREERTOS_Init+0xa4>)
 8002032:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8002034:	bf00      	nop
 8002036:	3750      	adds	r7, #80	; 0x50
 8002038:	46bd      	mov	sp, r7
 800203a:	bdb0      	pop	{r4, r5, r7, pc}
 800203c:	200052e0 	.word	0x200052e0
 8002040:	200052e4 	.word	0x200052e4
 8002044:	080193ec 	.word	0x080193ec
 8002048:	200052dc 	.word	0x200052dc
 800204c:	08019418 	.word	0x08019418
 8002050:	200052e8 	.word	0x200052e8
 8002054:	00000000 	.word	0x00000000

08002058 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002058:	b5b0      	push	{r4, r5, r7, lr}
 800205a:	f5ad 6dcf 	sub.w	sp, sp, #1656	; 0x678
 800205e:	af3e      	add	r7, sp, #248	; 0xf8
 8002060:	f107 0314 	add.w	r3, r7, #20
 8002064:	6018      	str	r0, [r3, #0]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8002066:	f010 fcc1 	bl	80129ec <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  HAL_GPIO_WritePin(USB_SIGN_GPIO_Port, USB_SIGN_Pin, GPIO_PIN_SET); // Pull-up Resistor
 800206a:	2201      	movs	r2, #1
 800206c:	2110      	movs	r1, #16
 800206e:	48c0      	ldr	r0, [pc, #768]	; (8002370 <StartDefaultTask+0x318>)
 8002070:	f007 fbfa 	bl	8009868 <HAL_GPIO_WritePin>

  osEvent 				ret_mail;
  DUTY_Command_TypeDef 	duty_cmd;
  DUTY_Command_TypeDef 	*dataMail;
  uint8_t 				isNewDuty = FALSE;
 8002074:	2300      	movs	r3, #0
 8002076:	f887 357f 	strb.w	r3, [r7, #1407]	; 0x57f
  // Robot variables
  SCARA_ModeTypeDef			current_mode;
  SCARA_DutyStateTypeDef 	current_state;
  double						run_time;

  LOG_REPORT("free_rtos.c: PROGRAM START...", __LINE__);
 800207a:	21cb      	movs	r1, #203	; 0xcb
 800207c:	48bd      	ldr	r0, [pc, #756]	; (8002374 <StartDefaultTask+0x31c>)
 800207e:	f7ff fb89 	bl	8001794 <LOG_REPORT>

  // Init value
  no_stop = 0;
 8002082:	2300      	movs	r3, #0
 8002084:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
  no_scan = 0;
 8002088:	2300      	movs	r3, #0
 800208a:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
  no_duty = 0;
 800208e:	2300      	movs	r3, #0
 8002090:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
  no_duty_success	= 0;
 8002094:	2300      	movs	r3, #0
 8002096:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
  no_duty_fail		= 0;
 800209a:	2300      	movs	r3, #0
 800209c:	f8c7 3568 	str.w	r3, [r7, #1384]	; 0x568
  current_mode	 = scaraGetMode();
 80020a0:	f006 f974 	bl	800838c <scaraGetMode>
 80020a4:	4603      	mov	r3, r0
 80020a6:	f887 3557 	strb.w	r3, [r7, #1367]	; 0x557
  current_state	 = scaraGetDutyState();
 80020aa:	f006 f97b 	bl	80083a4 <scaraGetDutyState>
 80020ae:	4603      	mov	r3, r0
 80020b0:	f887 3556 	strb.w	r3, [r7, #1366]	; 0x556

  // Start up robot
  scaraStartup();
 80020b4:	f001 fe90 	bl	8003dd8 <scaraStartup>
  osDelay(10);
 80020b8:	200a      	movs	r0, #10
 80020ba:	f00d fb78 	bl	800f7ae <osDelay>

#ifdef SIMULATION
	  positionNext.Theta1 = -PI/3;
 80020be:	4aae      	ldr	r2, [pc, #696]	; (8002378 <StartDefaultTask+0x320>)
 80020c0:	a4a7      	add	r4, pc, #668	; (adr r4, 8002360 <StartDefaultTask+0x308>)
 80020c2:	e9d4 3400 	ldrd	r3, r4, [r4]
 80020c6:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	  positionNext.Theta2 = PI/3;
 80020ca:	4aab      	ldr	r2, [pc, #684]	; (8002378 <StartDefaultTask+0x320>)
 80020cc:	a4a6      	add	r4, pc, #664	; (adr r4, 8002368 <StartDefaultTask+0x310>)
 80020ce:	e9d4 3400 	ldrd	r3, r4, [r4]
 80020d2:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	  positionNext.D3 = 10;
 80020d6:	4aa8      	ldr	r2, [pc, #672]	; (8002378 <StartDefaultTask+0x320>)
 80020d8:	f04f 0300 	mov.w	r3, #0
 80020dc:	4ca7      	ldr	r4, [pc, #668]	; (800237c <StartDefaultTask+0x324>)
 80020de:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	  positionNext.Theta4 = 0;
 80020e2:	4aa5      	ldr	r2, [pc, #660]	; (8002378 <StartDefaultTask+0x320>)
 80020e4:	f04f 0300 	mov.w	r3, #0
 80020e8:	f04f 0400 	mov.w	r4, #0
 80020ec:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	  positionNext.t = 0;
 80020f0:	4aa1      	ldr	r2, [pc, #644]	; (8002378 <StartDefaultTask+0x320>)
 80020f2:	f04f 0300 	mov.w	r3, #0
 80020f6:	f04f 0400 	mov.w	r4, #0
 80020fa:	e9c2 3406 	strd	r3, r4, [r2, #24]
	  kinematicForward(&positionNext);
 80020fe:	489e      	ldr	r0, [pc, #632]	; (8002378 <StartDefaultTask+0x320>)
 8002100:	f000 fdea 	bl	8002cd8 <kinematicForward>
#endif
  /* Infinite loop */
//Start Timer 7
	  HAL_TIM_Base_Start_IT(&htim7);
 8002104:	489e      	ldr	r0, [pc, #632]	; (8002380 <StartDefaultTask+0x328>)
 8002106:	f009 fa68 	bl	800b5da <HAL_TIM_Base_Start_IT>
  for(;;)
  {
	  /*---------Wait for Timer Trigger-----------*/
	  osSignalWait(0x01, osWaitForever); // Very Important
 800210a:	463b      	mov	r3, r7
 800210c:	f04f 32ff 	mov.w	r2, #4294967295
 8002110:	2101      	movs	r1, #1
 8002112:	4618      	mov	r0, r3
 8002114:	f00d fba0 	bl	800f858 <osSignalWait>
	  /* 1--- Reset Value ---*/
	  respond_lenght		= 0;
 8002118:	2300      	movs	r3, #0
 800211a:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
	  respond_packed_lenght = 0;
 800211e:	2300      	movs	r3, #0
 8002120:	f8c7 355c 	str.w	r3, [r7, #1372]	; 0x55c
	  infor_lenght			= 0;
 8002124:	2300      	movs	r3, #0
 8002126:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
	  infor_packed_lenght	= 0;
 800212a:	2300      	movs	r3, #0
 800212c:	f8c7 3558 	str.w	r3, [r7, #1368]	; 0x558
	  task_usb_lenght		= 0;
 8002130:	2300      	movs	r3, #0
 8002132:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
	  usb_lenght			= 0;
 8002136:	2300      	movs	r3, #0
 8002138:	f8c7 3540 	str.w	r3, [r7, #1344]	; 0x540
	  // Update new position
#ifdef SIMULATION
	  memcpy(&positionPrevios, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 800213c:	4a91      	ldr	r2, [pc, #580]	; (8002384 <StartDefaultTask+0x32c>)
 800213e:	4b92      	ldr	r3, [pc, #584]	; (8002388 <StartDefaultTask+0x330>)
 8002140:	4610      	mov	r0, r2
 8002142:	4619      	mov	r1, r3
 8002144:	2368      	movs	r3, #104	; 0x68
 8002146:	461a      	mov	r2, r3
 8002148:	f011 f9ca 	bl	80134e0 <memcpy>
	  memcpy(&positionCurrent, &positionNext, sizeof(SCARA_PositionTypeDef));
 800214c:	4a8e      	ldr	r2, [pc, #568]	; (8002388 <StartDefaultTask+0x330>)
 800214e:	4b8a      	ldr	r3, [pc, #552]	; (8002378 <StartDefaultTask+0x320>)
 8002150:	4610      	mov	r0, r2
 8002152:	4619      	mov	r1, r3
 8002154:	2368      	movs	r3, #104	; 0x68
 8002156:	461a      	mov	r2, r3
 8002158:	f011 f9c2 	bl	80134e0 <memcpy>
#endif


	  /* 2--- Check New Duty Phase ---*/
	  // Check mail
	  ret_mail = osMailGet(commandMailHandle, 0);
 800215c:	4b8b      	ldr	r3, [pc, #556]	; (800238c <StartDefaultTask+0x334>)
 800215e:	6819      	ldr	r1, [r3, #0]
 8002160:	f207 532c 	addw	r3, r7, #1324	; 0x52c
 8002164:	2200      	movs	r2, #0
 8002166:	4618      	mov	r0, r3
 8002168:	f00d fe0a 	bl	800fd80 <osMailGet>
	  if ( ret_mail.status == osEventMail) {
 800216c:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 8002170:	2b20      	cmp	r3, #32
 8002172:	d116      	bne.n	80021a2 <StartDefaultTask+0x14a>
		   dataMail = ret_mail.value.p;
 8002174:	f8d7 3530 	ldr.w	r3, [r7, #1328]	; 0x530
 8002178:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
		   memcpy( &duty_cmd, dataMail, sizeof(DUTY_Command_TypeDef));
 800217c:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002180:	f44f 7284 	mov.w	r2, #264	; 0x108
 8002184:	f8d7 153c 	ldr.w	r1, [r7, #1340]	; 0x53c
 8002188:	4618      	mov	r0, r3
 800218a:	f011 f9a9 	bl	80134e0 <memcpy>
		   isNewDuty = TRUE;
 800218e:	2301      	movs	r3, #1
 8002190:	f887 357f 	strb.w	r3, [r7, #1407]	; 0x57f
		   osMailFree(commandMailHandle, dataMail);/* free memory allocated for mail */
 8002194:	4b7d      	ldr	r3, [pc, #500]	; (800238c <StartDefaultTask+0x334>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f8d7 153c 	ldr.w	r1, [r7, #1340]	; 0x53c
 800219c:	4618      	mov	r0, r3
 800219e:	f00d fe63 	bl	800fe68 <osMailFree>
	  }
	  if(isNewDuty) {
 80021a2:	f897 357f 	ldrb.w	r3, [r7, #1407]	; 0x57f
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f000 80a7 	beq.w	80022fa <StartDefaultTask+0x2a2>
		  memset(respond, 0, 40);
 80021ac:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80021b0:	2228      	movs	r2, #40	; 0x28
 80021b2:	2100      	movs	r1, #0
 80021b4:	4618      	mov	r0, r3
 80021b6:	f011 f9b7 	bl	8013528 <memset>
		  switch( duty_cmd.robot_mode) {
 80021ba:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d01d      	beq.n	8002200 <StartDefaultTask+0x1a8>
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d04a      	beq.n	800225e <StartDefaultTask+0x206>
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	f040 808e 	bne.w	80022ea <StartDefaultTask+0x292>
		  case SCARA_MODE_STOP:
			  {
				  no_stop++;
 80021ce:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80021d2:	3301      	adds	r3, #1
 80021d4:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
				  current_mode	 = SCARA_MODE_STOP;
 80021d8:	2300      	movs	r3, #0
 80021da:	f887 3557 	strb.w	r3, [r7, #1367]	; 0x557
				  respond_lenght = commandRespond(RPD_OK,
 80021de:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80021e2:	6859      	ldr	r1, [r3, #4]
 80021e4:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80021e8:	4a69      	ldr	r2, [pc, #420]	; (8002390 <StartDefaultTask+0x338>)
 80021ea:	2008      	movs	r0, #8
 80021ec:	f7ff fa82 	bl	80016f4 <commandRespond>
 80021f0:	f8c7 0564 	str.w	r0, [r7, #1380]	; 0x564
						  	  	  	  	  	  	  duty_cmd.id_command,
												  "Stop Now",
												  (char *)respond);
				  LOG_REPORT("ROBOT STOP !!!", __LINE__);
 80021f4:	f240 110b 	movw	r1, #267	; 0x10b
 80021f8:	4866      	ldr	r0, [pc, #408]	; (8002394 <StartDefaultTask+0x33c>)
 80021fa:	f7ff facb 	bl	8001794 <LOG_REPORT>
			  }
			  break;
 80021fe:	e079      	b.n	80022f4 <StartDefaultTask+0x29c>
		  case SCARA_MODE_SCAN:
			  {
				  if (SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_state) {
 8002200:	f897 3557 	ldrb.w	r3, [r7, #1367]	; 0x557
 8002204:	2b02      	cmp	r3, #2
 8002206:	d119      	bne.n	800223c <StartDefaultTask+0x1e4>
 8002208:	f897 3556 	ldrb.w	r3, [r7, #1366]	; 0x556
 800220c:	2b00      	cmp	r3, #0
 800220e:	d115      	bne.n	800223c <StartDefaultTask+0x1e4>
					  no_scan++;
 8002210:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8002214:	3301      	adds	r3, #1
 8002216:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
					  lowlayer_scanReset();
 800221a:	f001 fa45 	bl	80036a8 <lowlayer_scanReset>
					  current_mode = SCARA_MODE_SCAN;
 800221e:	2301      	movs	r3, #1
 8002220:	f887 3557 	strb.w	r3, [r7, #1367]	; 0x557
					  respond_lenght = commandRespond(RPD_OK,
 8002224:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002228:	6859      	ldr	r1, [r3, #4]
 800222a:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800222e:	4a5a      	ldr	r2, [pc, #360]	; (8002398 <StartDefaultTask+0x340>)
 8002230:	2008      	movs	r0, #8
 8002232:	f7ff fa5f 	bl	80016f4 <commandRespond>
 8002236:	f8c7 0564 	str.w	r0, [r7, #1380]	; 0x564
													  "Busy",
													  (char *)respond);
					  LOG_REPORT("SCAN FAIL: BUSY", __LINE__);
				  }
			  }
			  break;
 800223a:	e05b      	b.n	80022f4 <StartDefaultTask+0x29c>
					  respond_lenght = commandRespond(RPD_ERROR,
 800223c:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002240:	6859      	ldr	r1, [r3, #4]
 8002242:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8002246:	4a55      	ldr	r2, [pc, #340]	; (800239c <StartDefaultTask+0x344>)
 8002248:	2007      	movs	r0, #7
 800224a:	f7ff fa53 	bl	80016f4 <commandRespond>
 800224e:	f8c7 0564 	str.w	r0, [r7, #1380]	; 0x564
					  LOG_REPORT("SCAN FAIL: BUSY", __LINE__);
 8002252:	f240 111d 	movw	r1, #285	; 0x11d
 8002256:	4852      	ldr	r0, [pc, #328]	; (80023a0 <StartDefaultTask+0x348>)
 8002258:	f7ff fa9c 	bl	8001794 <LOG_REPORT>
			  break;
 800225c:	e04a      	b.n	80022f4 <StartDefaultTask+0x29c>
		  case SCARA_MODE_DUTY:
			  {
				  no_duty++;
 800225e:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8002262:	3301      	adds	r3, #1
 8002264:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
				  if (SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_state) {
 8002268:	f897 3557 	ldrb.w	r3, [r7, #1367]	; 0x557
 800226c:	2b02      	cmp	r3, #2
 800226e:	d125      	bne.n	80022bc <StartDefaultTask+0x264>
 8002270:	f897 3556 	ldrb.w	r3, [r7, #1366]	; 0x556
 8002274:	2b00      	cmp	r3, #0
 8002276:	d121      	bne.n	80022bc <StartDefaultTask+0x264>
					  if (scaraIsScanLimit()) {
 8002278:	f006 f8a0 	bl	80083bc <scaraIsScanLimit>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d006      	beq.n	8002290 <StartDefaultTask+0x238>
						  current_mode	 = SCARA_MODE_DUTY;
 8002282:	2302      	movs	r3, #2
 8002284:	f887 3557 	strb.w	r3, [r7, #1367]	; 0x557
						  current_state	 = SCARA_DUTY_STATE_INIT;
 8002288:	2301      	movs	r3, #1
 800228a:	f887 3556 	strb.w	r3, [r7, #1366]	; 0x556
					  if (scaraIsScanLimit()) {
 800228e:	e02b      	b.n	80022e8 <StartDefaultTask+0x290>
					  } else {
						  no_duty_fail++;
 8002290:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 8002294:	3301      	adds	r3, #1
 8002296:	f8c7 3568 	str.w	r3, [r7, #1384]	; 0x568
						  respond_lenght = commandRespond(RPD_ERROR,
 800229a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800229e:	6859      	ldr	r1, [r3, #4]
 80022a0:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80022a4:	4a3f      	ldr	r2, [pc, #252]	; (80023a4 <StartDefaultTask+0x34c>)
 80022a6:	2007      	movs	r0, #7
 80022a8:	f7ff fa24 	bl	80016f4 <commandRespond>
 80022ac:	f8c7 0564 	str.w	r0, [r7, #1380]	; 0x564
						  							  	  duty_cmd.id_command,
														  "Has Not Scan Yet.",
														  (char *)respond);
						  LOG_REPORT("MOVE FAIL:NOT SCAN", __LINE__);
 80022b0:	f44f 7197 	mov.w	r1, #302	; 0x12e
 80022b4:	483c      	ldr	r0, [pc, #240]	; (80023a8 <StartDefaultTask+0x350>)
 80022b6:	f7ff fa6d 	bl	8001794 <LOG_REPORT>
					  if (scaraIsScanLimit()) {
 80022ba:	e015      	b.n	80022e8 <StartDefaultTask+0x290>
					  }
				  } else {
					  no_duty_fail++;
 80022bc:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 80022c0:	3301      	adds	r3, #1
 80022c2:	f8c7 3568 	str.w	r3, [r7, #1384]	; 0x568
					  respond_lenght	= commandRespond(RPD_ERROR,
 80022c6:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80022ca:	6859      	ldr	r1, [r3, #4]
 80022cc:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80022d0:	4a36      	ldr	r2, [pc, #216]	; (80023ac <StartDefaultTask+0x354>)
 80022d2:	2007      	movs	r0, #7
 80022d4:	f7ff fa0e 	bl	80016f4 <commandRespond>
 80022d8:	f8c7 0564 	str.w	r0, [r7, #1380]	; 0x564
					  							  	  	  duty_cmd.id_command,
														  "Busy.",
														  (char *)respond);
					  LOG_REPORT("MOVE FAIL:BUSY", __LINE__);
 80022dc:	f44f 719b 	mov.w	r1, #310	; 0x136
 80022e0:	4833      	ldr	r0, [pc, #204]	; (80023b0 <StartDefaultTask+0x358>)
 80022e2:	f7ff fa57 	bl	8001794 <LOG_REPORT>
				  }
			  }
			  break;
 80022e6:	e005      	b.n	80022f4 <StartDefaultTask+0x29c>
 80022e8:	e004      	b.n	80022f4 <StartDefaultTask+0x29c>
		  default:
			  {
				  LOG_REPORT("CMD Error Mode !!!", __LINE__);
 80022ea:	f44f 719e 	mov.w	r1, #316	; 0x13c
 80022ee:	4831      	ldr	r0, [pc, #196]	; (80023b4 <StartDefaultTask+0x35c>)
 80022f0:	f7ff fa50 	bl	8001794 <LOG_REPORT>
			  }
		  }
		  isNewDuty = FALSE;
 80022f4:	2300      	movs	r3, #0
 80022f6:	f887 357f 	strb.w	r3, [r7, #1407]	; 0x57f
	  }

	/* 3--- Execute Phase ---*/
	  switch( current_mode) {
 80022fa:	f897 3557 	ldrb.w	r3, [r7, #1367]	; 0x557
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d00b      	beq.n	800231a <StartDefaultTask+0x2c2>
 8002302:	2b02      	cmp	r3, #2
 8002304:	d018      	beq.n	8002338 <StartDefaultTask+0x2e0>
 8002306:	2b00      	cmp	r3, #0
 8002308:	f040 819c 	bne.w	8002644 <StartDefaultTask+0x5ec>
	  case SCARA_MODE_STOP:
		  {
			  current_mode 	= SCARA_MODE_DUTY;
 800230c:	2302      	movs	r3, #2
 800230e:	f887 3557 	strb.w	r3, [r7, #1367]	; 0x557
			  current_state = SCARA_DUTY_STATE_READY;
 8002312:	2300      	movs	r3, #0
 8002314:	f887 3556 	strb.w	r3, [r7, #1366]	; 0x556
		  }
		  break;
 8002318:	e19b      	b.n	8002652 <StartDefaultTask+0x5fa>
	  case SCARA_MODE_SCAN:
		  {
			  if(lowlayer_scanFlow()) {
 800231a:	f001 f9db 	bl	80036d4 <lowlayer_scanFlow>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	f000 8195 	beq.w	8002650 <StartDefaultTask+0x5f8>
				  current_mode 	= SCARA_MODE_DUTY;
 8002326:	2302      	movs	r3, #2
 8002328:	f887 3557 	strb.w	r3, [r7, #1367]	; 0x557
				  current_state = SCARA_DUTY_STATE_READY;
 800232c:	2300      	movs	r3, #0
 800232e:	f887 3556 	strb.w	r3, [r7, #1366]	; 0x556
				  scaraSetScanFlag();
 8002332:	f005 ffdd 	bl	80082f0 <scaraSetScanFlag>
//				 										(char *)position,
//				 										(char *)infor);

			  }
		  }
		  break;
 8002336:	e18b      	b.n	8002650 <StartDefaultTask+0x5f8>
	  case SCARA_MODE_DUTY:
		  {
			  switch (current_state){
 8002338:	f897 3556 	ldrb.w	r3, [r7, #1366]	; 0x556
 800233c:	2b03      	cmp	r3, #3
 800233e:	f200 817a 	bhi.w	8002636 <StartDefaultTask+0x5de>
 8002342:	a201      	add	r2, pc, #4	; (adr r2, 8002348 <StartDefaultTask+0x2f0>)
 8002344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002348:	08002359 	.word	0x08002359
 800234c:	080023b9 	.word	0x080023b9
 8002350:	080024d9 	.word	0x080024d9
 8002354:	080025d3 	.word	0x080025d3
			  case SCARA_DUTY_STATE_READY:
				  {
					  // Do nothing();
					  __NOP();
 8002358:	bf00      	nop
				  }
			  break;
 800235a:	e172      	b.n	8002642 <StartDefaultTask+0x5ea>
 800235c:	f3af 8000 	nop.w
 8002360:	40000000 	.word	0x40000000
 8002364:	bff0c152 	.word	0xbff0c152
 8002368:	40000000 	.word	0x40000000
 800236c:	3ff0c152 	.word	0x3ff0c152
 8002370:	40020400 	.word	0x40020400
 8002374:	08019434 	.word	0x08019434
 8002378:	20005da8 	.word	0x20005da8
 800237c:	40240000 	.word	0x40240000
 8002380:	20005e50 	.word	0x20005e50
 8002384:	20005cd8 	.word	0x20005cd8
 8002388:	20005d40 	.word	0x20005d40
 800238c:	200052e4 	.word	0x200052e4
 8002390:	08019454 	.word	0x08019454
 8002394:	08019460 	.word	0x08019460
 8002398:	08019470 	.word	0x08019470
 800239c:	0801947c 	.word	0x0801947c
 80023a0:	08019484 	.word	0x08019484
 80023a4:	08019494 	.word	0x08019494
 80023a8:	080194a8 	.word	0x080194a8
 80023ac:	080194bc 	.word	0x080194bc
 80023b0:	080194c4 	.word	0x080194c4
 80023b4:	080194d4 	.word	0x080194d4
			  case SCARA_DUTY_STATE_INIT:
				  {
					  SCARA_StatusTypeDef status1, status2;
					  status1 = scaraInitDuty(duty_cmd);
 80023b8:	f507 6484 	add.w	r4, r7, #1056	; 0x420
 80023bc:	4668      	mov	r0, sp
 80023be:	f104 0310 	add.w	r3, r4, #16
 80023c2:	22f8      	movs	r2, #248	; 0xf8
 80023c4:	4619      	mov	r1, r3
 80023c6:	f011 f88b 	bl	80134e0 <memcpy>
 80023ca:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80023ce:	f001 fd13 	bl	8003df8 <scaraInitDuty>
 80023d2:	4603      	mov	r3, r0
 80023d4:	f887 353a 	strb.w	r3, [r7, #1338]	; 0x53a
					  if ( SCARA_STATUS_OK == status1) {
 80023d8:	f897 353a 	ldrb.w	r3, [r7, #1338]	; 0x53a
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d15e      	bne.n	800249e <StartDefaultTask+0x446>
						  status2 = scaraTestDuty();
 80023e0:	f005 ff0e 	bl	8008200 <scaraTestDuty>
 80023e4:	4603      	mov	r3, r0
 80023e6:	f887 3539 	strb.w	r3, [r7, #1337]	; 0x539
						  if (SCARA_STATUS_OK == status2) {
 80023ea:	f897 3539 	ldrb.w	r3, [r7, #1337]	; 0x539
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d138      	bne.n	8002464 <StartDefaultTask+0x40c>
						  no_duty_success++;
 80023f2:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 80023f6:	3301      	adds	r3, #1
 80023f8:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
						  current_state		= SCARA_DUTY_STATE_FLOW;
 80023fc:	2302      	movs	r3, #2
 80023fe:	f887 3556 	strb.w	r3, [r7, #1366]	; 0x556
						  run_time			= 0;
 8002402:	f04f 0300 	mov.w	r3, #0
 8002406:	f04f 0400 	mov.w	r4, #0
 800240a:	f507 62a9 	add.w	r2, r7, #1352	; 0x548
 800240e:	e9c2 3400 	strd	r3, r4, [r2]
						  // Respond
						  respond_lenght 	= commandRespond(RPD_OK,
 8002412:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002416:	6859      	ldr	r1, [r3, #4]
 8002418:	f897 353a 	ldrb.w	r3, [r7, #1338]	; 0x53a
								  	  	  	  	  	  	  	  duty_cmd.id_command,
															  (char *)DETAIL_STATUS[status1],
 800241c:	4ad0      	ldr	r2, [pc, #832]	; (8002760 <StartDefaultTask+0x708>)
 800241e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
						  respond_lenght 	= commandRespond(RPD_OK,
 8002422:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8002426:	2008      	movs	r0, #8
 8002428:	f7ff f964 	bl	80016f4 <commandRespond>
 800242c:	f8c7 0564 	str.w	r0, [r7, #1380]	; 0x564
															  (char *)respond);
						  scaraPosition2String((char *)position, positionCurrent);
 8002430:	4ccc      	ldr	r4, [pc, #816]	; (8002764 <StartDefaultTask+0x70c>)
 8002432:	f507 755c 	add.w	r5, r7, #880	; 0x370
 8002436:	4668      	mov	r0, sp
 8002438:	f104 0308 	add.w	r3, r4, #8
 800243c:	2260      	movs	r2, #96	; 0x60
 800243e:	4619      	mov	r1, r3
 8002440:	f011 f84e 	bl	80134e0 <memcpy>
 8002444:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002448:	4628      	mov	r0, r5
 800244a:	f005 fff1 	bl	8008430 <scaraPosition2String>
						  // Start Inform
						  infor_lenght 		= commandRespond(RPD_START,
 800244e:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 8002452:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8002456:	2100      	movs	r1, #0
 8002458:	2003      	movs	r0, #3
 800245a:	f7ff f94b 	bl	80016f4 <commandRespond>
 800245e:	f8c7 0560 	str.w	r0, [r7, #1376]	; 0x560
															  (char *)DETAIL_STATUS[status1],
															  (char *)respond);
						  LOG_REPORT("INIT FAIL", __LINE__);
					  }
				  }
			  break;
 8002462:	e0ee      	b.n	8002642 <StartDefaultTask+0x5ea>
							  no_duty_fail++;
 8002464:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 8002468:	3301      	adds	r3, #1
 800246a:	f8c7 3568 	str.w	r3, [r7, #1384]	; 0x568
							  current_state 	= SCARA_DUTY_STATE_READY;
 800246e:	2300      	movs	r3, #0
 8002470:	f887 3556 	strb.w	r3, [r7, #1366]	; 0x556
							  respond_lenght	= commandRespond(RPD_ERROR,
 8002474:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002478:	6859      	ldr	r1, [r3, #4]
 800247a:	f897 3539 	ldrb.w	r3, [r7, #1337]	; 0x539
																  (char *)DETAIL_STATUS[status2],
 800247e:	4ab8      	ldr	r2, [pc, #736]	; (8002760 <StartDefaultTask+0x708>)
 8002480:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
							  respond_lenght	= commandRespond(RPD_ERROR,
 8002484:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8002488:	2007      	movs	r0, #7
 800248a:	f7ff f933 	bl	80016f4 <commandRespond>
 800248e:	f8c7 0564 	str.w	r0, [r7, #1380]	; 0x564
							  LOG_REPORT("TEST FAIL", __LINE__);
 8002492:	f240 117f 	movw	r1, #383	; 0x17f
 8002496:	48b4      	ldr	r0, [pc, #720]	; (8002768 <StartDefaultTask+0x710>)
 8002498:	f7ff f97c 	bl	8001794 <LOG_REPORT>
			  break;
 800249c:	e0d1      	b.n	8002642 <StartDefaultTask+0x5ea>
						  no_duty_fail++;
 800249e:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 80024a2:	3301      	adds	r3, #1
 80024a4:	f8c7 3568 	str.w	r3, [r7, #1384]	; 0x568
						  current_state 	= SCARA_DUTY_STATE_READY;
 80024a8:	2300      	movs	r3, #0
 80024aa:	f887 3556 	strb.w	r3, [r7, #1366]	; 0x556
						  respond_lenght	= commandRespond(RPD_ERROR,
 80024ae:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80024b2:	6859      	ldr	r1, [r3, #4]
 80024b4:	f897 353a 	ldrb.w	r3, [r7, #1338]	; 0x53a
															  (char *)DETAIL_STATUS[status1],
 80024b8:	4aa9      	ldr	r2, [pc, #676]	; (8002760 <StartDefaultTask+0x708>)
 80024ba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
						  respond_lenght	= commandRespond(RPD_ERROR,
 80024be:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80024c2:	2007      	movs	r0, #7
 80024c4:	f7ff f916 	bl	80016f4 <commandRespond>
 80024c8:	f8c7 0564 	str.w	r0, [r7, #1380]	; 0x564
						  LOG_REPORT("INIT FAIL", __LINE__);
 80024cc:	f44f 71c4 	mov.w	r1, #392	; 0x188
 80024d0:	48a6      	ldr	r0, [pc, #664]	; (800276c <StartDefaultTask+0x714>)
 80024d2:	f7ff f95f 	bl	8001794 <LOG_REPORT>
			  break;
 80024d6:	e0b4      	b.n	8002642 <StartDefaultTask+0x5ea>
			  case SCARA_DUTY_STATE_FLOW:
				  {
					  HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_RESET);
 80024d8:	2200      	movs	r2, #0
 80024da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80024de:	48a4      	ldr	r0, [pc, #656]	; (8002770 <StartDefaultTask+0x718>)
 80024e0:	f007 f9c2 	bl	8009868 <HAL_GPIO_WritePin>
					  SCARA_StatusTypeDef status;
					  // Increase run time
					  run_time += T_SAMPLING;
 80024e4:	a39c      	add	r3, pc, #624	; (adr r3, 8002758 <StartDefaultTask+0x700>)
 80024e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ea:	f507 61a9 	add.w	r1, r7, #1352	; 0x548
 80024ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80024f2:	f7fd fedb 	bl	80002ac <__adddf3>
 80024f6:	4603      	mov	r3, r0
 80024f8:	460c      	mov	r4, r1
 80024fa:	f507 62a9 	add.w	r2, r7, #1352	; 0x548
 80024fe:	e9c2 3400 	strd	r3, r4, [r2]
					  // Check Time Out
					  if (scaraIsFinish(run_time)) {
 8002502:	f507 63a9 	add.w	r3, r7, #1352	; 0x548
 8002506:	ed93 0b00 	vldr	d0, [r3]
 800250a:	f005 ff65 	bl	80083d8 <scaraIsFinish>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d003      	beq.n	800251c <StartDefaultTask+0x4c4>
						  current_state = SCARA_DUTY_STATE_FINISH;// Work Done
 8002514:	2303      	movs	r3, #3
 8002516:	f887 3556 	strb.w	r3, [r7, #1366]	; 0x556
															(char *)infor);
							  LOG_REPORT("STOP", __LINE__);
						  }
					  }
				  }
			  break;
 800251a:	e092      	b.n	8002642 <StartDefaultTask+0x5ea>
						  status = scaraFlowDuty(run_time , &positionNext, positionCurrent);
 800251c:	4c91      	ldr	r4, [pc, #580]	; (8002764 <StartDefaultTask+0x70c>)
 800251e:	4668      	mov	r0, sp
 8002520:	f104 0308 	add.w	r3, r4, #8
 8002524:	2260      	movs	r2, #96	; 0x60
 8002526:	4619      	mov	r1, r3
 8002528:	f010 ffda 	bl	80134e0 <memcpy>
 800252c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002530:	4890      	ldr	r0, [pc, #576]	; (8002774 <StartDefaultTask+0x71c>)
 8002532:	f507 61a9 	add.w	r1, r7, #1352	; 0x548
 8002536:	ed91 0b00 	vldr	d0, [r1]
 800253a:	f004 f91b 	bl	8006774 <scaraFlowDuty>
 800253e:	4603      	mov	r3, r0
 8002540:	f887 353b 	strb.w	r3, [r7, #1339]	; 0x53b
						  if ( SCARA_STATUS_OK == status) {
 8002544:	f897 353b 	ldrb.w	r3, [r7, #1339]	; 0x53b
 8002548:	2b00      	cmp	r3, #0
 800254a:	d12c      	bne.n	80025a6 <StartDefaultTask+0x54e>
							  lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 800254c:	4c85      	ldr	r4, [pc, #532]	; (8002764 <StartDefaultTask+0x70c>)
 800254e:	4a89      	ldr	r2, [pc, #548]	; (8002774 <StartDefaultTask+0x71c>)
 8002550:	ab16      	add	r3, sp, #88	; 0x58
 8002552:	4611      	mov	r1, r2
 8002554:	2268      	movs	r2, #104	; 0x68
 8002556:	4618      	mov	r0, r3
 8002558:	f010 ffc2 	bl	80134e0 <memcpy>
 800255c:	4668      	mov	r0, sp
 800255e:	f104 0310 	add.w	r3, r4, #16
 8002562:	2258      	movs	r2, #88	; 0x58
 8002564:	4619      	mov	r1, r3
 8002566:	f010 ffbb 	bl	80134e0 <memcpy>
 800256a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800256e:	f001 f90f 	bl	8003790 <lowlayer_computeAndWritePulse>
							  scaraPosition2String((char *)position, positionCurrent);
 8002572:	4c7c      	ldr	r4, [pc, #496]	; (8002764 <StartDefaultTask+0x70c>)
 8002574:	f507 755c 	add.w	r5, r7, #880	; 0x370
 8002578:	4668      	mov	r0, sp
 800257a:	f104 0308 	add.w	r3, r4, #8
 800257e:	2260      	movs	r2, #96	; 0x60
 8002580:	4619      	mov	r1, r3
 8002582:	f010 ffad 	bl	80134e0 <memcpy>
 8002586:	e894 000c 	ldmia.w	r4, {r2, r3}
 800258a:	4628      	mov	r0, r5
 800258c:	f005 ff50 	bl	8008430 <scaraPosition2String>
							  infor_lenght = commandRespond(RPD_RUNNING,
 8002590:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 8002594:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8002598:	2100      	movs	r1, #0
 800259a:	2004      	movs	r0, #4
 800259c:	f7ff f8aa 	bl	80016f4 <commandRespond>
 80025a0:	f8c7 0560 	str.w	r0, [r7, #1376]	; 0x560
			  break;
 80025a4:	e04d      	b.n	8002642 <StartDefaultTask+0x5ea>
							  current_state = SCARA_DUTY_STATE_FINISH;
 80025a6:	2303      	movs	r3, #3
 80025a8:	f887 3556 	strb.w	r3, [r7, #1366]	; 0x556
							  infor_lenght = commandRespond(RPD_STOP,
 80025ac:	f897 353b 	ldrb.w	r3, [r7, #1339]	; 0x53b
															(char *)DETAIL_STATUS[status],
 80025b0:	4a6b      	ldr	r2, [pc, #428]	; (8002760 <StartDefaultTask+0x708>)
 80025b2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
							  infor_lenght = commandRespond(RPD_STOP,
 80025b6:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 80025ba:	2100      	movs	r1, #0
 80025bc:	2006      	movs	r0, #6
 80025be:	f7ff f899 	bl	80016f4 <commandRespond>
 80025c2:	f8c7 0560 	str.w	r0, [r7, #1376]	; 0x560
							  LOG_REPORT("STOP", __LINE__);
 80025c6:	f240 11a7 	movw	r1, #423	; 0x1a7
 80025ca:	486b      	ldr	r0, [pc, #428]	; (8002778 <StartDefaultTask+0x720>)
 80025cc:	f7ff f8e2 	bl	8001794 <LOG_REPORT>
			  break;
 80025d0:	e037      	b.n	8002642 <StartDefaultTask+0x5ea>
			  case SCARA_DUTY_STATE_FINISH:
				  {
					  //HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_SET);
					  current_state = SCARA_DUTY_STATE_READY;
 80025d2:	2300      	movs	r3, #0
 80025d4:	f887 3556 	strb.w	r3, [r7, #1366]	; 0x556
					  positionNext.t = 0;
 80025d8:	4a66      	ldr	r2, [pc, #408]	; (8002774 <StartDefaultTask+0x71c>)
 80025da:	f04f 0300 	mov.w	r3, #0
 80025de:	f04f 0400 	mov.w	r4, #0
 80025e2:	e9c2 3406 	strd	r3, r4, [r2, #24]
					  positionNext.total_time = 0;
 80025e6:	4a63      	ldr	r2, [pc, #396]	; (8002774 <StartDefaultTask+0x71c>)
 80025e8:	f04f 0300 	mov.w	r3, #0
 80025ec:	f04f 0400 	mov.w	r4, #0
 80025f0:	e9c2 3408 	strd	r3, r4, [r2, #32]
					  positionNext.q = 0;
 80025f4:	4a5f      	ldr	r2, [pc, #380]	; (8002774 <StartDefaultTask+0x71c>)
 80025f6:	f04f 0300 	mov.w	r3, #0
 80025fa:	f04f 0400 	mov.w	r4, #0
 80025fe:	e9c2 3400 	strd	r3, r4, [r2]
					  // Done Inform
					  scaraPosition2String((char *)position, positionCurrent);
 8002602:	4c58      	ldr	r4, [pc, #352]	; (8002764 <StartDefaultTask+0x70c>)
 8002604:	f507 755c 	add.w	r5, r7, #880	; 0x370
 8002608:	4668      	mov	r0, sp
 800260a:	f104 0308 	add.w	r3, r4, #8
 800260e:	2260      	movs	r2, #96	; 0x60
 8002610:	4619      	mov	r1, r3
 8002612:	f010 ff65 	bl	80134e0 <memcpy>
 8002616:	e894 000c 	ldmia.w	r4, {r2, r3}
 800261a:	4628      	mov	r0, r5
 800261c:	f005 ff08 	bl	8008430 <scaraPosition2String>
					  infor_lenght 		= commandRespond(RPD_DONE,
 8002620:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 8002624:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8002628:	2100      	movs	r1, #0
 800262a:	2005      	movs	r0, #5
 800262c:	f7ff f862 	bl	80016f4 <commandRespond>
 8002630:	f8c7 0560 	str.w	r0, [r7, #1376]	; 0x560
	  	  	  	  	  	  	  	  	  	  	  	  	  	 0,
														 (char *)position,
														 (char *)infor);
				  }
			  break;
 8002634:	e005      	b.n	8002642 <StartDefaultTask+0x5ea>
			  default:
				  {
					  LOG_REPORT("ERROR STATE !!!", __LINE__);
 8002636:	f240 11bd 	movw	r1, #445	; 0x1bd
 800263a:	4850      	ldr	r0, [pc, #320]	; (800277c <StartDefaultTask+0x724>)
 800263c:	f7ff f8aa 	bl	8001794 <LOG_REPORT>
					  while(1);
 8002640:	e7fe      	b.n	8002640 <StartDefaultTask+0x5e8>
				  }
			  }

		  }
		  break;
 8002642:	e006      	b.n	8002652 <StartDefaultTask+0x5fa>
	  default:
		  {
			  LOG_REPORT("ERROR MODE !!!", __LINE__);
 8002644:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8002648:	484d      	ldr	r0, [pc, #308]	; (8002780 <StartDefaultTask+0x728>)
 800264a:	f7ff f8a3 	bl	8001794 <LOG_REPORT>
			  while(1);
 800264e:	e7fe      	b.n	800264e <StartDefaultTask+0x5f6>
		  break;
 8002650:	bf00      	nop
		  }
	  }

	  /* 4--- Send to PC Phase ---*/
	  // Check buffer from USB task
	  osMutexWait(usbTxMutexHandle, osWaitForever);
 8002652:	4b4c      	ldr	r3, [pc, #304]	; (8002784 <StartDefaultTask+0x72c>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f04f 31ff 	mov.w	r1, #4294967295
 800265a:	4618      	mov	r0, r3
 800265c:	f00d f960 	bl	800f920 <osMutexWait>
	  task_usb_lenght = ringBuff_PopArray(&cmd_tx_ringbuff, task_usb, RINGBUFFER_SIZE);
 8002660:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8002664:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002668:	4619      	mov	r1, r3
 800266a:	4847      	ldr	r0, [pc, #284]	; (8002788 <StartDefaultTask+0x730>)
 800266c:	f000 ff9f 	bl	80035ae <ringBuff_PopArray>
 8002670:	f8c7 0544 	str.w	r0, [r7, #1348]	; 0x544
	  osMutexRelease(usbTxMutexHandle);
 8002674:	4b43      	ldr	r3, [pc, #268]	; (8002784 <StartDefaultTask+0x72c>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4618      	mov	r0, r3
 800267a:	f00d f99f 	bl	800f9bc <osMutexRelease>
	  // Intergrate to 1 buffer
	  if (respond_lenght > 0) {
 800267e:	f8d7 3564 	ldr.w	r3, [r7, #1380]	; 0x564
 8002682:	2b00      	cmp	r3, #0
 8002684:	dd13      	ble.n	80026ae <StartDefaultTask+0x656>
		  respond_packed_lenght = packPayload(respond, respond_packed, respond_lenght);
 8002686:	f507 7104 	add.w	r1, r7, #528	; 0x210
 800268a:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800268e:	f8d7 2564 	ldr.w	r2, [r7, #1380]	; 0x564
 8002692:	4618      	mov	r0, r3
 8002694:	f7ff fb70 	bl	8001d78 <packPayload>
 8002698:	f8c7 055c 	str.w	r0, [r7, #1372]	; 0x55c
		  memcpy(usb_buff, respond_packed, respond_packed_lenght);
 800269c:	f8d7 255c 	ldr.w	r2, [r7, #1372]	; 0x55c
 80026a0:	f507 7104 	add.w	r1, r7, #528	; 0x210
 80026a4:	f107 0318 	add.w	r3, r7, #24
 80026a8:	4618      	mov	r0, r3
 80026aa:	f010 ff19 	bl	80134e0 <memcpy>
	  }
	  if (task_usb_lenght > 0) {
 80026ae:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	dd0b      	ble.n	80026ce <StartDefaultTask+0x676>
		  memcpy(usb_buff + respond_packed_lenght, task_usb, task_usb_lenght);
 80026b6:	f8d7 355c 	ldr.w	r3, [r7, #1372]	; 0x55c
 80026ba:	f107 0218 	add.w	r2, r7, #24
 80026be:	4413      	add	r3, r2
 80026c0:	f8d7 2544 	ldr.w	r2, [r7, #1348]	; 0x544
 80026c4:	f507 7111 	add.w	r1, r7, #580	; 0x244
 80026c8:	4618      	mov	r0, r3
 80026ca:	f010 ff09 	bl	80134e0 <memcpy>
	  }
	  if (infor_lenght > 0) {
 80026ce:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	dd19      	ble.n	800270a <StartDefaultTask+0x6b2>
		  infor_packed_lenght 	= packPayload(infor, infor_packed, infor_lenght);
 80026d6:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 80026da:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 80026de:	f8d7 2560 	ldr.w	r2, [r7, #1376]	; 0x560
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7ff fb48 	bl	8001d78 <packPayload>
 80026e8:	f8c7 0558 	str.w	r0, [r7, #1368]	; 0x558
		  memcpy(usb_buff + respond_packed_lenght + task_usb_lenght, infor_packed, infor_packed_lenght);
 80026ec:	f8d7 255c 	ldr.w	r2, [r7, #1372]	; 0x55c
 80026f0:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 80026f4:	4413      	add	r3, r2
 80026f6:	f107 0218 	add.w	r2, r7, #24
 80026fa:	4413      	add	r3, r2
 80026fc:	f8d7 2558 	ldr.w	r2, [r7, #1368]	; 0x558
 8002700:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 8002704:	4618      	mov	r0, r3
 8002706:	f010 feeb 	bl	80134e0 <memcpy>
	  }
	  usb_lenght = respond_packed_lenght + task_usb_lenght + infor_packed_lenght;
 800270a:	f8d7 255c 	ldr.w	r2, [r7, #1372]	; 0x55c
 800270e:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 8002712:	4413      	add	r3, r2
 8002714:	f8d7 2558 	ldr.w	r2, [r7, #1368]	; 0x558
 8002718:	4413      	add	r3, r2
 800271a:	f8c7 3540 	str.w	r3, [r7, #1344]	; 0x540
	  // Send through USB
	  if (usb_lenght > 0) {
 800271e:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 8002722:	2b00      	cmp	r3, #0
 8002724:	dd08      	ble.n	8002738 <StartDefaultTask+0x6e0>
		  CDC_Transmit_FS(usb_buff, (uint16_t)usb_lenght);
 8002726:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 800272a:	b29a      	uxth	r2, r3
 800272c:	f107 0318 	add.w	r3, r7, #24
 8002730:	4611      	mov	r1, r2
 8002732:	4618      	mov	r0, r3
 8002734:	f010 fa66 	bl	8012c04 <CDC_Transmit_FS>
	  }

	  /* 5--- Update ---*/
	  scaraSetMode(current_mode);
 8002738:	f897 3557 	ldrb.w	r3, [r7, #1367]	; 0x557
 800273c:	4618      	mov	r0, r3
 800273e:	f005 fe15 	bl	800836c <scaraSetMode>
	  scaraSetDutyState(current_state);
 8002742:	f897 3556 	ldrb.w	r3, [r7, #1366]	; 0x556
 8002746:	4618      	mov	r0, r3
 8002748:	f005 fdf0 	bl	800832c <scaraSetDutyState>

    osDelay(1);
 800274c:	2001      	movs	r0, #1
 800274e:	f00d f82e 	bl	800f7ae <osDelay>
	  osSignalWait(0x01, osWaitForever); // Very Important
 8002752:	e4da      	b.n	800210a <StartDefaultTask+0xb2>
 8002754:	f3af 8000 	nop.w
 8002758:	40000000 	.word	0x40000000
 800275c:	3f847ae1 	.word	0x3f847ae1
 8002760:	20000c80 	.word	0x20000c80
 8002764:	20005d40 	.word	0x20005d40
 8002768:	080194e8 	.word	0x080194e8
 800276c:	080194f4 	.word	0x080194f4
 8002770:	40020000 	.word	0x40020000
 8002774:	20005da8 	.word	0x20005da8
 8002778:	08019500 	.word	0x08019500
 800277c:	08019508 	.word	0x08019508
 8002780:	08019518 	.word	0x08019518
 8002784:	200052e0 	.word	0x200052e0
 8002788:	20000460 	.word	0x20000460

0800278c <Start_USB_RX_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_USB_RX_Task */
void Start_USB_RX_Task(void const * argument)
{
 800278c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800278e:	f2ad 4d04 	subw	sp, sp, #1028	; 0x404
 8002792:	af42      	add	r7, sp, #264	; 0x108
 8002794:	1d3b      	adds	r3, r7, #4
 8002796:	6018      	str	r0, [r3, #0]
	uint8_t				respond[145];
	uint8_t				message[150];
	int32_t				respond_lenght;
	int32_t				message_lenght;

	no_duty	 = 0;
 8002798:	2300      	movs	r3, #0
 800279a:	f8c7 32f0 	str.w	r3, [r7, #752]	; 0x2f0
	no_other = 0;
 800279e:	2300      	movs	r3, #0
 80027a0:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4

  /* Infinite loop */
  for(;;)
  {
	  for(;;) {
		  distance = ringBuff_DistanceOf(&usb_rx_ringbuff, END_CHAR);
 80027a4:	2129      	movs	r1, #41	; 0x29
 80027a6:	4878      	ldr	r0, [pc, #480]	; (8002988 <Start_USB_RX_Task+0x1fc>)
 80027a8:	f000 ff22 	bl	80035f0 <ringBuff_DistanceOf>
 80027ac:	f8c7 02e8 	str.w	r0, [r7, #744]	; 0x2e8
		  if ( -1 != distance ) {
 80027b0:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 80027b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027b8:	d0f4      	beq.n	80027a4 <Start_USB_RX_Task+0x18>
 80027ba:	466b      	mov	r3, sp
 80027bc:	461e      	mov	r6, r3
			  uint8_t temp[distance+1];
 80027be:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 80027c2:	1c58      	adds	r0, r3, #1
 80027c4:	1e43      	subs	r3, r0, #1
 80027c6:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 80027ca:	4603      	mov	r3, r0
 80027cc:	4619      	mov	r1, r3
 80027ce:	f04f 0200 	mov.w	r2, #0
 80027d2:	f04f 0300 	mov.w	r3, #0
 80027d6:	f04f 0400 	mov.w	r4, #0
 80027da:	00d4      	lsls	r4, r2, #3
 80027dc:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80027e0:	00cb      	lsls	r3, r1, #3
 80027e2:	4603      	mov	r3, r0
 80027e4:	4619      	mov	r1, r3
 80027e6:	f04f 0200 	mov.w	r2, #0
 80027ea:	f04f 0300 	mov.w	r3, #0
 80027ee:	f04f 0400 	mov.w	r4, #0
 80027f2:	00d4      	lsls	r4, r2, #3
 80027f4:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80027f8:	00cb      	lsls	r3, r1, #3
 80027fa:	4603      	mov	r3, r0
 80027fc:	3307      	adds	r3, #7
 80027fe:	08db      	lsrs	r3, r3, #3
 8002800:	00db      	lsls	r3, r3, #3
 8002802:	ebad 0d03 	sub.w	sp, sp, r3
 8002806:	ab42      	add	r3, sp, #264	; 0x108
 8002808:	3300      	adds	r3, #0
 800280a:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
			  int32_t ret;
			  ringBuff_PopArray(&usb_rx_ringbuff, temp, distance + 1);
 800280e:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8002812:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8002816:	3301      	adds	r3, #1
 8002818:	461a      	mov	r2, r3
 800281a:	485b      	ldr	r0, [pc, #364]	; (8002988 <Start_USB_RX_Task+0x1fc>)
 800281c:	f000 fec7 	bl	80035ae <ringBuff_PopArray>
			  ret = unPackPayload(temp, distance + 1);
 8002820:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8002824:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8002828:	3301      	adds	r3, #1
 800282a:	4619      	mov	r1, r3
 800282c:	4610      	mov	r0, r2
 800282e:	f7ff fb0d 	bl	8001e4c <unPackPayload>
 8002832:	f8c7 02dc 	str.w	r0, [r7, #732]	; 0x2dc
			  if( -1 == ret) {
 8002836:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 800283a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800283e:	d105      	bne.n	800284c <Start_USB_RX_Task+0xc0>
				  LOG_REPORT("UNPACK FAIL", __LINE__);
 8002840:	f44f 7104 	mov.w	r1, #528	; 0x210
 8002844:	4851      	ldr	r0, [pc, #324]	; (800298c <Start_USB_RX_Task+0x200>)
 8002846:	f7fe ffa5 	bl	8001794 <LOG_REPORT>
 800284a:	e09b      	b.n	8002984 <Start_USB_RX_Task+0x1f8>
			  } else {
				  LOG_REPORT((char*) temp, __LINE__);
 800284c:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8002850:	f240 2112 	movw	r1, #530	; 0x212
 8002854:	4618      	mov	r0, r3
 8002856:	f7fe ff9d 	bl	8001794 <LOG_REPORT>
				  cmd_type = commandRead(temp, &id_command, &duty_cmd);
 800285a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800285e:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
 8002862:	f507 7132 	add.w	r1, r7, #712	; 0x2c8
 8002866:	4618      	mov	r0, r3
 8002868:	f7fe fb9e 	bl	8000fa8 <commandRead>
 800286c:	4603      	mov	r3, r0
 800286e:	f887 32db 	strb.w	r3, [r7, #731]	; 0x2db
				  memset(detail, 0, sizeof(detail));
 8002872:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002876:	2287      	movs	r2, #135	; 0x87
 8002878:	2100      	movs	r1, #0
 800287a:	4618      	mov	r0, r3
 800287c:	f010 fe54 	bl	8013528 <memset>
				  rpd_type = commandReply(cmd_type, duty_cmd, detail);
 8002880:	f507 74e0 	add.w	r4, r7, #448	; 0x1c0
 8002884:	f897 52db 	ldrb.w	r5, [r7, #731]	; 0x2db
 8002888:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800288c:	9340      	str	r3, [sp, #256]	; 0x100
 800288e:	4668      	mov	r0, sp
 8002890:	f104 0308 	add.w	r3, r4, #8
 8002894:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002898:	4619      	mov	r1, r3
 800289a:	f010 fe21 	bl	80134e0 <memcpy>
 800289e:	e894 000c 	ldmia.w	r4, {r2, r3}
 80028a2:	4628      	mov	r0, r5
 80028a4:	f7fe fdfa 	bl	800149c <commandReply>
 80028a8:	4603      	mov	r3, r0
 80028aa:	f887 32da 	strb.w	r3, [r7, #730]	; 0x2da

				  if ( RPD_DUTY == rpd_type) {
 80028ae:	f897 32da 	ldrb.w	r3, [r7, #730]	; 0x2da
 80028b2:	2b09      	cmp	r3, #9
 80028b4:	d128      	bne.n	8002908 <Start_USB_RX_Task+0x17c>
					  no_duty++;
 80028b6:	f8d7 32f0 	ldr.w	r3, [r7, #752]	; 0x2f0
 80028ba:	3301      	adds	r3, #1
 80028bc:	f8c7 32f0 	str.w	r3, [r7, #752]	; 0x2f0
					  DUTY_Command_TypeDef *dataMail;
					  dataMail = NULL;
 80028c0:	2300      	movs	r3, #0
 80028c2:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
					  // Wait allocate
					  while (dataMail == NULL) {
 80028c6:	e008      	b.n	80028da <Start_USB_RX_Task+0x14e>
						  dataMail = osMailAlloc(commandMailHandle, osWaitForever);
 80028c8:	4b31      	ldr	r3, [pc, #196]	; (8002990 <Start_USB_RX_Task+0x204>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f04f 31ff 	mov.w	r1, #4294967295
 80028d0:	4618      	mov	r0, r3
 80028d2:	f00d fa01 	bl	800fcd8 <osMailAlloc>
 80028d6:	f8c7 02ec 	str.w	r0, [r7, #748]	; 0x2ec
					  while (dataMail == NULL) {
 80028da:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d0f2      	beq.n	80028c8 <Start_USB_RX_Task+0x13c>
					  }
					  memcpy( dataMail, &duty_cmd, sizeof(DUTY_Command_TypeDef));
 80028e2:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80028e6:	f44f 7284 	mov.w	r2, #264	; 0x108
 80028ea:	4619      	mov	r1, r3
 80028ec:	f8d7 02ec 	ldr.w	r0, [r7, #748]	; 0x2ec
 80028f0:	f010 fdf6 	bl	80134e0 <memcpy>
					  osStatus result;
					  result = osMailPut(commandMailHandle, dataMail);
 80028f4:	4b26      	ldr	r3, [pc, #152]	; (8002990 <Start_USB_RX_Task+0x204>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f8d7 12ec 	ldr.w	r1, [r7, #748]	; 0x2ec
 80028fc:	4618      	mov	r0, r3
 80028fe:	f00d fa01 	bl	800fd04 <osMailPut>
 8002902:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
 8002906:	e03d      	b.n	8002984 <Start_USB_RX_Task+0x1f8>
					  if (osOK == result) {
						  //LOG_REPORT("DUTY SEND", __LINE__);
					  }

				  } else {
					  no_other++;
 8002908:	f8d7 32f4 	ldr.w	r3, [r7, #756]	; 0x2f4
 800290c:	3301      	adds	r3, #1
 800290e:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
					  memset(respond, 0, sizeof(respond));
 8002912:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002916:	2291      	movs	r2, #145	; 0x91
 8002918:	2100      	movs	r1, #0
 800291a:	4618      	mov	r0, r3
 800291c:	f010 fe04 	bl	8013528 <memset>
					  memset(message, 0, sizeof(message));
 8002920:	f107 030c 	add.w	r3, r7, #12
 8002924:	2296      	movs	r2, #150	; 0x96
 8002926:	2100      	movs	r1, #0
 8002928:	4618      	mov	r0, r3
 800292a:	f010 fdfd 	bl	8013528 <memset>
					  respond_lenght	= commandRespond(rpd_type, id_command,
 800292e:	f8d7 12c8 	ldr.w	r1, [r7, #712]	; 0x2c8
 8002932:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002936:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800293a:	f897 02da 	ldrb.w	r0, [r7, #730]	; 0x2da
 800293e:	f7fe fed9 	bl	80016f4 <commandRespond>
 8002942:	f8c7 02d4 	str.w	r0, [r7, #724]	; 0x2d4
							  	  	  	  (char *)detail,
										  (char *)respond);
					  message_lenght	= packPayload(respond, message, respond_lenght);
 8002946:	f107 010c 	add.w	r1, r7, #12
 800294a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800294e:	f8d7 22d4 	ldr.w	r2, [r7, #724]	; 0x2d4
 8002952:	4618      	mov	r0, r3
 8002954:	f7ff fa10 	bl	8001d78 <packPayload>
 8002958:	f8c7 02d0 	str.w	r0, [r7, #720]	; 0x2d0
					  // Mutex
					  osMutexWait(usbTxMutexHandle, osWaitForever);
 800295c:	4b0d      	ldr	r3, [pc, #52]	; (8002994 <Start_USB_RX_Task+0x208>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f04f 31ff 	mov.w	r1, #4294967295
 8002964:	4618      	mov	r0, r3
 8002966:	f00c ffdb 	bl	800f920 <osMutexWait>
					  ringBuff_PushArray(&cmd_tx_ringbuff, message, message_lenght);
 800296a:	f107 030c 	add.w	r3, r7, #12
 800296e:	f8d7 22d0 	ldr.w	r2, [r7, #720]	; 0x2d0
 8002972:	4619      	mov	r1, r3
 8002974:	4808      	ldr	r0, [pc, #32]	; (8002998 <Start_USB_RX_Task+0x20c>)
 8002976:	f000 fdf2 	bl	800355e <ringBuff_PushArray>
					  osMutexRelease(usbTxMutexHandle);
 800297a:	4b06      	ldr	r3, [pc, #24]	; (8002994 <Start_USB_RX_Task+0x208>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4618      	mov	r0, r3
 8002980:	f00d f81c 	bl	800f9bc <osMutexRelease>
 8002984:	46b5      	mov	sp, r6
		  distance = ringBuff_DistanceOf(&usb_rx_ringbuff, END_CHAR);
 8002986:	e70d      	b.n	80027a4 <Start_USB_RX_Task+0x18>
 8002988:	20000054 	.word	0x20000054
 800298c:	08019528 	.word	0x08019528
 8002990:	200052e4 	.word	0x200052e4
 8002994:	200052e0 	.word	0x200052e0
 8002998:	20000460 	.word	0x20000460

0800299c <FSMC_Write>:
/* Includes ------------------------------------------------------------------*/
#include "fsmc.h"

/* USER CODE BEGIN 0 */
void FSMC_Write(uint32_t ui_address, uint32_t ui_data)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
	*(volatile uint16_t *)ui_address = ui_data;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	683a      	ldr	r2, [r7, #0]
 80029aa:	b292      	uxth	r2, r2
 80029ac:	801a      	strh	r2, [r3, #0]
}
 80029ae:	bf00      	nop
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr

080029ba <FSMC_Read>:

uint16_t FSMC_Read(uint32_t ui_address) {
 80029ba:	b480      	push	{r7}
 80029bc:	b083      	sub	sp, #12
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
	return *(volatile uint16_t *)ui_address;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	881b      	ldrh	r3, [r3, #0]
 80029c6:	b29b      	uxth	r3, r3
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <MX_FSMC_Init>:

NOR_HandleTypeDef hnor1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b088      	sub	sp, #32
 80029d8:	af00      	add	r7, sp, #0
  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80029da:	1d3b      	adds	r3, r7, #4
 80029dc:	2200      	movs	r2, #0
 80029de:	601a      	str	r2, [r3, #0]
 80029e0:	605a      	str	r2, [r3, #4]
 80029e2:	609a      	str	r2, [r3, #8]
 80029e4:	60da      	str	r2, [r3, #12]
 80029e6:	611a      	str	r2, [r3, #16]
 80029e8:	615a      	str	r2, [r3, #20]
 80029ea:	619a      	str	r2, [r3, #24]

  /** Perform the NOR1 memory initialization sequence
  */
  hnor1.Instance = FSMC_NORSRAM_DEVICE;
 80029ec:	4b27      	ldr	r3, [pc, #156]	; (8002a8c <MX_FSMC_Init+0xb8>)
 80029ee:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80029f2:	601a      	str	r2, [r3, #0]
  hnor1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80029f4:	4b25      	ldr	r3, [pc, #148]	; (8002a8c <MX_FSMC_Init+0xb8>)
 80029f6:	4a26      	ldr	r2, [pc, #152]	; (8002a90 <MX_FSMC_Init+0xbc>)
 80029f8:	605a      	str	r2, [r3, #4]
  /* hnor1.Init */
  hnor1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80029fa:	4b24      	ldr	r3, [pc, #144]	; (8002a8c <MX_FSMC_Init+0xb8>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	609a      	str	r2, [r3, #8]
  hnor1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_ENABLE;
 8002a00:	4b22      	ldr	r3, [pc, #136]	; (8002a8c <MX_FSMC_Init+0xb8>)
 8002a02:	2202      	movs	r2, #2
 8002a04:	60da      	str	r2, [r3, #12]
  hnor1.Init.MemoryType = FSMC_MEMORY_TYPE_NOR;
 8002a06:	4b21      	ldr	r3, [pc, #132]	; (8002a8c <MX_FSMC_Init+0xb8>)
 8002a08:	2208      	movs	r2, #8
 8002a0a:	611a      	str	r2, [r3, #16]
  hnor1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8002a0c:	4b1f      	ldr	r3, [pc, #124]	; (8002a8c <MX_FSMC_Init+0xb8>)
 8002a0e:	2210      	movs	r2, #16
 8002a10:	615a      	str	r2, [r3, #20]
  hnor1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8002a12:	4b1e      	ldr	r3, [pc, #120]	; (8002a8c <MX_FSMC_Init+0xb8>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	619a      	str	r2, [r3, #24]
  hnor1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8002a18:	4b1c      	ldr	r3, [pc, #112]	; (8002a8c <MX_FSMC_Init+0xb8>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	61da      	str	r2, [r3, #28]
  hnor1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8002a1e:	4b1b      	ldr	r3, [pc, #108]	; (8002a8c <MX_FSMC_Init+0xb8>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	621a      	str	r2, [r3, #32]
  hnor1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8002a24:	4b19      	ldr	r3, [pc, #100]	; (8002a8c <MX_FSMC_Init+0xb8>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	625a      	str	r2, [r3, #36]	; 0x24
  hnor1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8002a2a:	4b18      	ldr	r3, [pc, #96]	; (8002a8c <MX_FSMC_Init+0xb8>)
 8002a2c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a30:	629a      	str	r2, [r3, #40]	; 0x28
  hnor1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8002a32:	4b16      	ldr	r3, [pc, #88]	; (8002a8c <MX_FSMC_Init+0xb8>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	62da      	str	r2, [r3, #44]	; 0x2c
  hnor1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8002a38:	4b14      	ldr	r3, [pc, #80]	; (8002a8c <MX_FSMC_Init+0xb8>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	631a      	str	r2, [r3, #48]	; 0x30
  hnor1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8002a3e:	4b13      	ldr	r3, [pc, #76]	; (8002a8c <MX_FSMC_Init+0xb8>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	635a      	str	r2, [r3, #52]	; 0x34
  hnor1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8002a44:	4b11      	ldr	r3, [pc, #68]	; (8002a8c <MX_FSMC_Init+0xb8>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	639a      	str	r2, [r3, #56]	; 0x38
  hnor1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8002a4a:	4b10      	ldr	r3, [pc, #64]	; (8002a8c <MX_FSMC_Init+0xb8>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8002a50:	230f      	movs	r3, #15
 8002a52:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8002a54:	230f      	movs	r3, #15
 8002a56:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8002a58:	23ff      	movs	r3, #255	; 0xff
 8002a5a:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8002a5c:	230f      	movs	r3, #15
 8002a5e:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8002a60:	2310      	movs	r3, #16
 8002a62:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8002a64:	2311      	movs	r3, #17
 8002a66:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_NOR_Init(&hnor1, &Timing, NULL) != HAL_OK)
 8002a6c:	1d3b      	adds	r3, r7, #4
 8002a6e:	2200      	movs	r2, #0
 8002a70:	4619      	mov	r1, r3
 8002a72:	4806      	ldr	r0, [pc, #24]	; (8002a8c <MX_FSMC_Init+0xb8>)
 8002a74:	f006 ff12 	bl	800989c <HAL_NOR_Init>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 8002a7e:	f000 fcf7 	bl	8003470 <Error_Handler>
  }

}
 8002a82:	bf00      	nop
 8002a84:	3720      	adds	r7, #32
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	200052ec 	.word	0x200052ec
 8002a90:	a0000104 	.word	0xa0000104

08002a94 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b086      	sub	sp, #24
 8002a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a9a:	1d3b      	adds	r3, r7, #4
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	601a      	str	r2, [r3, #0]
 8002aa0:	605a      	str	r2, [r3, #4]
 8002aa2:	609a      	str	r2, [r3, #8]
 8002aa4:	60da      	str	r2, [r3, #12]
 8002aa6:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8002aa8:	4b24      	ldr	r3, [pc, #144]	; (8002b3c <HAL_FSMC_MspInit+0xa8>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d140      	bne.n	8002b32 <HAL_FSMC_MspInit+0x9e>
    return;
  }
  FSMC_Initialized = 1;
 8002ab0:	4b22      	ldr	r3, [pc, #136]	; (8002b3c <HAL_FSMC_MspInit+0xa8>)
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	603b      	str	r3, [r7, #0]
 8002aba:	4b21      	ldr	r3, [pc, #132]	; (8002b40 <HAL_FSMC_MspInit+0xac>)
 8002abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002abe:	4a20      	ldr	r2, [pc, #128]	; (8002b40 <HAL_FSMC_MspInit+0xac>)
 8002ac0:	f043 0301 	orr.w	r3, r3, #1
 8002ac4:	6393      	str	r3, [r2, #56]	; 0x38
 8002ac6:	4b1e      	ldr	r3, [pc, #120]	; (8002b40 <HAL_FSMC_MspInit+0xac>)
 8002ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	603b      	str	r3, [r7, #0]
 8002ad0:	683b      	ldr	r3, [r7, #0]
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  PB7   ------> FSMC_NL
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 8002ad2:	f64f 7380 	movw	r3, #65408	; 0xff80
 8002ad6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad8:	2302      	movs	r3, #2
 8002ada:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002adc:	2300      	movs	r3, #0
 8002ade:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002ae4:	230c      	movs	r3, #12
 8002ae6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ae8:	1d3b      	adds	r3, r7, #4
 8002aea:	4619      	mov	r1, r3
 8002aec:	4815      	ldr	r0, [pc, #84]	; (8002b44 <HAL_FSMC_MspInit+0xb0>)
 8002aee:	f006 fd21 	bl	8009534 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14 
 8002af2:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8002af6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4 
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af8:	2302      	movs	r3, #2
 8002afa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afc:	2300      	movs	r3, #0
 8002afe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b00:	2303      	movs	r3, #3
 8002b02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002b04:	230c      	movs	r3, #12
 8002b06:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b08:	1d3b      	adds	r3, r7, #4
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	480e      	ldr	r0, [pc, #56]	; (8002b48 <HAL_FSMC_MspInit+0xb4>)
 8002b0e:	f006 fd11 	bl	8009534 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002b12:	2380      	movs	r3, #128	; 0x80
 8002b14:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b16:	2302      	movs	r3, #2
 8002b18:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002b22:	230c      	movs	r3, #12
 8002b24:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b26:	1d3b      	adds	r3, r7, #4
 8002b28:	4619      	mov	r1, r3
 8002b2a:	4808      	ldr	r0, [pc, #32]	; (8002b4c <HAL_FSMC_MspInit+0xb8>)
 8002b2c:	f006 fd02 	bl	8009534 <HAL_GPIO_Init>
 8002b30:	e000      	b.n	8002b34 <HAL_FSMC_MspInit+0xa0>
    return;
 8002b32:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8002b34:	3718      	adds	r7, #24
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	20001478 	.word	0x20001478
 8002b40:	40023800 	.word	0x40023800
 8002b44:	40021000 	.word	0x40021000
 8002b48:	40020c00 	.word	0x40020c00
 8002b4c:	40020400 	.word	0x40020400

08002b50 <HAL_NOR_MspInit>:

void HAL_NOR_MspInit(NOR_HandleTypeDef* norHandle){
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NOR_MspInit 0 */

  /* USER CODE END NOR_MspInit 0 */
  HAL_FSMC_MspInit();
 8002b58:	f7ff ff9c 	bl	8002a94 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN NOR_MspInit 1 */

  /* USER CODE END NOR_MspInit 1 */
}
 8002b5c:	bf00      	nop
 8002b5e:	3708      	adds	r7, #8
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b08a      	sub	sp, #40	; 0x28
 8002b68:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b6a:	f107 0314 	add.w	r3, r7, #20
 8002b6e:	2200      	movs	r2, #0
 8002b70:	601a      	str	r2, [r3, #0]
 8002b72:	605a      	str	r2, [r3, #4]
 8002b74:	609a      	str	r2, [r3, #8]
 8002b76:	60da      	str	r2, [r3, #12]
 8002b78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	613b      	str	r3, [r7, #16]
 8002b7e:	4b51      	ldr	r3, [pc, #324]	; (8002cc4 <MX_GPIO_Init+0x160>)
 8002b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b82:	4a50      	ldr	r2, [pc, #320]	; (8002cc4 <MX_GPIO_Init+0x160>)
 8002b84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b88:	6313      	str	r3, [r2, #48]	; 0x30
 8002b8a:	4b4e      	ldr	r3, [pc, #312]	; (8002cc4 <MX_GPIO_Init+0x160>)
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b92:	613b      	str	r3, [r7, #16]
 8002b94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b96:	2300      	movs	r3, #0
 8002b98:	60fb      	str	r3, [r7, #12]
 8002b9a:	4b4a      	ldr	r3, [pc, #296]	; (8002cc4 <MX_GPIO_Init+0x160>)
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9e:	4a49      	ldr	r2, [pc, #292]	; (8002cc4 <MX_GPIO_Init+0x160>)
 8002ba0:	f043 0301 	orr.w	r3, r3, #1
 8002ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ba6:	4b47      	ldr	r3, [pc, #284]	; (8002cc4 <MX_GPIO_Init+0x160>)
 8002ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	60fb      	str	r3, [r7, #12]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	60bb      	str	r3, [r7, #8]
 8002bb6:	4b43      	ldr	r3, [pc, #268]	; (8002cc4 <MX_GPIO_Init+0x160>)
 8002bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bba:	4a42      	ldr	r2, [pc, #264]	; (8002cc4 <MX_GPIO_Init+0x160>)
 8002bbc:	f043 0310 	orr.w	r3, r3, #16
 8002bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8002bc2:	4b40      	ldr	r3, [pc, #256]	; (8002cc4 <MX_GPIO_Init+0x160>)
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc6:	f003 0310 	and.w	r3, r3, #16
 8002bca:	60bb      	str	r3, [r7, #8]
 8002bcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bce:	2300      	movs	r3, #0
 8002bd0:	607b      	str	r3, [r7, #4]
 8002bd2:	4b3c      	ldr	r3, [pc, #240]	; (8002cc4 <MX_GPIO_Init+0x160>)
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd6:	4a3b      	ldr	r2, [pc, #236]	; (8002cc4 <MX_GPIO_Init+0x160>)
 8002bd8:	f043 0302 	orr.w	r3, r3, #2
 8002bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8002bde:	4b39      	ldr	r3, [pc, #228]	; (8002cc4 <MX_GPIO_Init+0x160>)
 8002be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	607b      	str	r3, [r7, #4]
 8002be8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bea:	2300      	movs	r3, #0
 8002bec:	603b      	str	r3, [r7, #0]
 8002bee:	4b35      	ldr	r3, [pc, #212]	; (8002cc4 <MX_GPIO_Init+0x160>)
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf2:	4a34      	ldr	r2, [pc, #208]	; (8002cc4 <MX_GPIO_Init+0x160>)
 8002bf4:	f043 0308 	orr.w	r3, r3, #8
 8002bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bfa:	4b32      	ldr	r3, [pc, #200]	; (8002cc4 <MX_GPIO_Init+0x160>)
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfe:	f003 0308 	and.w	r3, r3, #8
 8002c02:	603b      	str	r3, [r7, #0]
 8002c04:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUTPUT_1_Pin|OUTPUT_2_Pin|USB_SIGN_Pin, GPIO_PIN_RESET);
 8002c06:	2200      	movs	r2, #0
 8002c08:	f44f 6141 	mov.w	r1, #3088	; 0xc10
 8002c0c:	482e      	ldr	r0, [pc, #184]	; (8002cc8 <MX_GPIO_Init+0x164>)
 8002c0e:	f006 fe2b 	bl	8009868 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ENCODER_RESET_Pin|PULSE_WRITE_Pin|CAPTURE_ENABLE_Pin|STOP_Pin, GPIO_PIN_RESET);
 8002c12:	2200      	movs	r2, #0
 8002c14:	f641 0148 	movw	r1, #6216	; 0x1848
 8002c18:	482c      	ldr	r0, [pc, #176]	; (8002ccc <MX_GPIO_Init+0x168>)
 8002c1a:	f006 fe25 	bl	8009868 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STEP_SLEEP_Pin|STEP_RESET_Pin|STEP_ENABLE_Pin, GPIO_PIN_RESET);
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8002c24:	482a      	ldr	r0, [pc, #168]	; (8002cd0 <MX_GPIO_Init+0x16c>)
 8002c26:	f006 fe1f 	bl	8009868 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OUTPUT_1_Pin|OUTPUT_2_Pin|USB_SIGN_Pin;
 8002c2a:	f44f 6341 	mov.w	r3, #3088	; 0xc10
 8002c2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c30:	2301      	movs	r3, #1
 8002c32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c34:	2300      	movs	r3, #0
 8002c36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c3c:	f107 0314 	add.w	r3, r7, #20
 8002c40:	4619      	mov	r1, r3
 8002c42:	4821      	ldr	r0, [pc, #132]	; (8002cc8 <MX_GPIO_Init+0x164>)
 8002c44:	f006 fc76 	bl	8009534 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = ENCODER_RESET_Pin|CAPTURE_ENABLE_Pin|STOP_Pin;
 8002c48:	f640 0348 	movw	r3, #2120	; 0x848
 8002c4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c52:	2300      	movs	r3, #0
 8002c54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c56:	2300      	movs	r3, #0
 8002c58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c5a:	f107 0314 	add.w	r3, r7, #20
 8002c5e:	4619      	mov	r1, r3
 8002c60:	481a      	ldr	r0, [pc, #104]	; (8002ccc <MX_GPIO_Init+0x168>)
 8002c62:	f006 fc67 	bl	8009534 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PULSE_WRITE_Pin;
 8002c66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c70:	2300      	movs	r3, #0
 8002c72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c74:	2303      	movs	r3, #3
 8002c76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PULSE_WRITE_GPIO_Port, &GPIO_InitStruct);
 8002c78:	f107 0314 	add.w	r3, r7, #20
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	4813      	ldr	r0, [pc, #76]	; (8002ccc <MX_GPIO_Init+0x168>)
 8002c80:	f006 fc58 	bl	8009534 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = CPLD_LIMIT_Pin|CPLD_BUSY_Pin;
 8002c84:	f242 0304 	movw	r3, #8196	; 0x2004
 8002c88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c92:	f107 0314 	add.w	r3, r7, #20
 8002c96:	4619      	mov	r1, r3
 8002c98:	480c      	ldr	r0, [pc, #48]	; (8002ccc <MX_GPIO_Init+0x168>)
 8002c9a:	f006 fc4b 	bl	8009534 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = STEP_SLEEP_Pin|STEP_RESET_Pin|STEP_ENABLE_Pin;
 8002c9e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002ca2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cac:	2300      	movs	r3, #0
 8002cae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cb0:	f107 0314 	add.w	r3, r7, #20
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	4806      	ldr	r0, [pc, #24]	; (8002cd0 <MX_GPIO_Init+0x16c>)
 8002cb8:	f006 fc3c 	bl	8009534 <HAL_GPIO_Init>

}
 8002cbc:	bf00      	nop
 8002cbe:	3728      	adds	r7, #40	; 0x28
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	40023800 	.word	0x40023800
 8002cc8:	40020400 	.word	0x40020400
 8002ccc:	40020c00 	.word	0x40020c00
 8002cd0:	40020000 	.word	0x40020000
 8002cd4:	00000000 	.word	0x00000000

08002cd8 <kinematicForward>:
#include "kinematic.h"
#include "common_def.h"
#include "math.h"
#include "system_params.h"

uint8_t		kinematicForward(SCARA_PositionTypeDef *pnt) {
 8002cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cda:	b08b      	sub	sp, #44	; 0x2c
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
	double x, y, z, roll;

	x =   a1*cos(pnt->Theta1)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8002ce6:	eeb0 0a47 	vmov.f32	s0, s14
 8002cea:	eef0 0a67 	vmov.f32	s1, s15
 8002cee:	f014 fe27 	bl	8017940 <cos>
 8002cf2:	ec51 0b10 	vmov	r0, r1, d0
 8002cf6:	a38e      	add	r3, pc, #568	; (adr r3, 8002f30 <kinematicForward+0x258>)
 8002cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cfc:	f7fd fc8c 	bl	8000618 <__aeabi_dmul>
 8002d00:	4603      	mov	r3, r0
 8002d02:	460c      	mov	r4, r1
 8002d04:	461d      	mov	r5, r3
 8002d06:	4626      	mov	r6, r4
		+ a2*cos(pnt->Theta1 + pnt->Theta2)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 8002d14:	461a      	mov	r2, r3
 8002d16:	4623      	mov	r3, r4
 8002d18:	f7fd fac8 	bl	80002ac <__adddf3>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	460c      	mov	r4, r1
 8002d20:	ec44 3b17 	vmov	d7, r3, r4
 8002d24:	eeb0 0a47 	vmov.f32	s0, s14
 8002d28:	eef0 0a67 	vmov.f32	s1, s15
 8002d2c:	f014 fe08 	bl	8017940 <cos>
 8002d30:	ec51 0b10 	vmov	r0, r1, d0
 8002d34:	f04f 0200 	mov.w	r2, #0
 8002d38:	4b83      	ldr	r3, [pc, #524]	; (8002f48 <kinematicForward+0x270>)
 8002d3a:	f7fd fc6d 	bl	8000618 <__aeabi_dmul>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	460c      	mov	r4, r1
 8002d42:	461a      	mov	r2, r3
 8002d44:	4623      	mov	r3, r4
 8002d46:	4628      	mov	r0, r5
 8002d48:	4631      	mov	r1, r6
 8002d4a:	f7fd faaf 	bl	80002ac <__adddf3>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	460c      	mov	r4, r1
 8002d52:	461d      	mov	r5, r3
 8002d54:	4626      	mov	r6, r4
		+ a4*cos(pnt->Theta1 + pnt->Theta2 - pnt->Theta4);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 8002d62:	461a      	mov	r2, r3
 8002d64:	4623      	mov	r3, r4
 8002d66:	f7fd faa1 	bl	80002ac <__adddf3>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	460c      	mov	r4, r1
 8002d6e:	4618      	mov	r0, r3
 8002d70:	4621      	mov	r1, r4
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8002d78:	461a      	mov	r2, r3
 8002d7a:	4623      	mov	r3, r4
 8002d7c:	f7fd fa94 	bl	80002a8 <__aeabi_dsub>
 8002d80:	4603      	mov	r3, r0
 8002d82:	460c      	mov	r4, r1
 8002d84:	ec44 3b17 	vmov	d7, r3, r4
 8002d88:	eeb0 0a47 	vmov.f32	s0, s14
 8002d8c:	eef0 0a67 	vmov.f32	s1, s15
 8002d90:	f014 fdd6 	bl	8017940 <cos>
 8002d94:	ec51 0b10 	vmov	r0, r1, d0
 8002d98:	a363      	add	r3, pc, #396	; (adr r3, 8002f28 <kinematicForward+0x250>)
 8002d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d9e:	f7fd fc3b 	bl	8000618 <__aeabi_dmul>
 8002da2:	4603      	mov	r3, r0
 8002da4:	460c      	mov	r4, r1
	x =   a1*cos(pnt->Theta1)
 8002da6:	461a      	mov	r2, r3
 8002da8:	4623      	mov	r3, r4
 8002daa:	4628      	mov	r0, r5
 8002dac:	4631      	mov	r1, r6
 8002dae:	f7fd fa7d 	bl	80002ac <__adddf3>
 8002db2:	4603      	mov	r3, r0
 8002db4:	460c      	mov	r4, r1
 8002db6:	e9c7 3408 	strd	r3, r4, [r7, #32]
	y =   a1*sin(pnt->Theta1)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8002dc0:	eeb0 0a47 	vmov.f32	s0, s14
 8002dc4:	eef0 0a67 	vmov.f32	s1, s15
 8002dc8:	f014 fe4a 	bl	8017a60 <sin>
 8002dcc:	ec51 0b10 	vmov	r0, r1, d0
 8002dd0:	a357      	add	r3, pc, #348	; (adr r3, 8002f30 <kinematicForward+0x258>)
 8002dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd6:	f7fd fc1f 	bl	8000618 <__aeabi_dmul>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	460c      	mov	r4, r1
 8002dde:	461d      	mov	r5, r3
 8002de0:	4626      	mov	r6, r4
		+ a2*sin(pnt->Theta1 + pnt->Theta2)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 8002dee:	461a      	mov	r2, r3
 8002df0:	4623      	mov	r3, r4
 8002df2:	f7fd fa5b 	bl	80002ac <__adddf3>
 8002df6:	4603      	mov	r3, r0
 8002df8:	460c      	mov	r4, r1
 8002dfa:	ec44 3b17 	vmov	d7, r3, r4
 8002dfe:	eeb0 0a47 	vmov.f32	s0, s14
 8002e02:	eef0 0a67 	vmov.f32	s1, s15
 8002e06:	f014 fe2b 	bl	8017a60 <sin>
 8002e0a:	ec51 0b10 	vmov	r0, r1, d0
 8002e0e:	f04f 0200 	mov.w	r2, #0
 8002e12:	4b4d      	ldr	r3, [pc, #308]	; (8002f48 <kinematicForward+0x270>)
 8002e14:	f7fd fc00 	bl	8000618 <__aeabi_dmul>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	460c      	mov	r4, r1
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	4623      	mov	r3, r4
 8002e20:	4628      	mov	r0, r5
 8002e22:	4631      	mov	r1, r6
 8002e24:	f7fd fa42 	bl	80002ac <__adddf3>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	460c      	mov	r4, r1
 8002e2c:	461d      	mov	r5, r3
 8002e2e:	4626      	mov	r6, r4
		+ a4*sin(pnt->Theta1 + pnt->Theta2 - pnt->Theta4);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	4623      	mov	r3, r4
 8002e40:	f7fd fa34 	bl	80002ac <__adddf3>
 8002e44:	4603      	mov	r3, r0
 8002e46:	460c      	mov	r4, r1
 8002e48:	4618      	mov	r0, r3
 8002e4a:	4621      	mov	r1, r4
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8002e52:	461a      	mov	r2, r3
 8002e54:	4623      	mov	r3, r4
 8002e56:	f7fd fa27 	bl	80002a8 <__aeabi_dsub>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	460c      	mov	r4, r1
 8002e5e:	ec44 3b17 	vmov	d7, r3, r4
 8002e62:	eeb0 0a47 	vmov.f32	s0, s14
 8002e66:	eef0 0a67 	vmov.f32	s1, s15
 8002e6a:	f014 fdf9 	bl	8017a60 <sin>
 8002e6e:	ec51 0b10 	vmov	r0, r1, d0
 8002e72:	a32d      	add	r3, pc, #180	; (adr r3, 8002f28 <kinematicForward+0x250>)
 8002e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e78:	f7fd fbce 	bl	8000618 <__aeabi_dmul>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	460c      	mov	r4, r1
	y =   a1*sin(pnt->Theta1)
 8002e80:	461a      	mov	r2, r3
 8002e82:	4623      	mov	r3, r4
 8002e84:	4628      	mov	r0, r5
 8002e86:	4631      	mov	r1, r6
 8002e88:	f7fd fa10 	bl	80002ac <__adddf3>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	460c      	mov	r4, r1
 8002e90:	e9c7 3406 	strd	r3, r4, [r7, #24]
	z =   d1 - pnt->D3 - d4;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	4623      	mov	r3, r4
 8002e9e:	a126      	add	r1, pc, #152	; (adr r1, 8002f38 <kinematicForward+0x260>)
 8002ea0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002ea4:	f7fd fa00 	bl	80002a8 <__aeabi_dsub>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	460c      	mov	r4, r1
 8002eac:	4618      	mov	r0, r3
 8002eae:	4621      	mov	r1, r4
 8002eb0:	a323      	add	r3, pc, #140	; (adr r3, 8002f40 <kinematicForward+0x268>)
 8002eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eb6:	f7fd f9f7 	bl	80002a8 <__aeabi_dsub>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	460c      	mov	r4, r1
 8002ebe:	e9c7 3404 	strd	r3, r4, [r7, #16]
	roll = pnt->Theta1 + pnt->Theta2 - pnt->Theta4;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 8002ece:	461a      	mov	r2, r3
 8002ed0:	4623      	mov	r3, r4
 8002ed2:	f7fd f9eb 	bl	80002ac <__adddf3>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	460c      	mov	r4, r1
 8002eda:	4618      	mov	r0, r3
 8002edc:	4621      	mov	r1, r4
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	4623      	mov	r3, r4
 8002ee8:	f7fd f9de 	bl	80002a8 <__aeabi_dsub>
 8002eec:	4603      	mov	r3, r0
 8002eee:	460c      	mov	r4, r1
 8002ef0:	e9c7 3402 	strd	r3, r4, [r7, #8]

	pnt->x = x;
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002efa:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	pnt->y = y;
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002f04:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	pnt->z = z;
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002f0e:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	pnt->roll = roll;
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002f18:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

	return TRUE;
 8002f1c:	2301      	movs	r3, #1
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	372c      	adds	r7, #44	; 0x2c
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f26:	bf00      	nop
 8002f28:	80000000 	.word	0x80000000
 8002f2c:	40402e14 	.word	0x40402e14
 8002f30:	00000000 	.word	0x00000000
 8002f34:	4068a000 	.word	0x4068a000
 8002f38:	00000000 	.word	0x00000000
 8002f3c:	406a6000 	.word	0x406a6000
 8002f40:	e0000000 	.word	0xe0000000
 8002f44:	40536b22 	.word	0x40536b22
 8002f48:	40640000 	.word	0x40640000
 8002f4c:	00000000 	.word	0x00000000

08002f50 <kinematicInverse>:

uint8_t		kinematicInverse(SCARA_PositionTypeDef *pnt, SCARA_PositionTypeDef current) {
 8002f50:	b082      	sub	sp, #8
 8002f52:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f56:	b0a0      	sub	sp, #128	; 0x80
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8002f60:	e881 000c 	stmia.w	r1, {r2, r3}
	double theta1, theta2, theta2_positive, theta2_negative, d3, theta4 , pWx, pWy;
	double s1, c1, s2, s2_positive, s2_negative, c2 , temp;

	d3  = d1 - d4 - pnt->z;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002f6a:	a1f2      	add	r1, pc, #968	; (adr r1, 8003334 <kinematicInverse+0x3e4>)
 8002f6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002f70:	f7fd f99a 	bl	80002a8 <__aeabi_dsub>
 8002f74:	4602      	mov	r2, r0
 8002f76:	460b      	mov	r3, r1
 8002f78:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	pWx = pnt->x - a4*cos(pnt->roll);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	e9d3 ab0a 	ldrd	sl, fp, [r3, #40]	; 0x28
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8002f88:	eeb0 0a47 	vmov.f32	s0, s14
 8002f8c:	eef0 0a67 	vmov.f32	s1, s15
 8002f90:	f014 fcd6 	bl	8017940 <cos>
 8002f94:	ec51 0b10 	vmov	r0, r1, d0
 8002f98:	a3e8      	add	r3, pc, #928	; (adr r3, 800333c <kinematicInverse+0x3ec>)
 8002f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f9e:	f7fd fb3b 	bl	8000618 <__aeabi_dmul>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	4650      	mov	r0, sl
 8002fa8:	4659      	mov	r1, fp
 8002faa:	f7fd f97d 	bl	80002a8 <__aeabi_dsub>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	pWy = pnt->y - a4*sin(pnt->roll);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	e9d3 ab0c 	ldrd	sl, fp, [r3, #48]	; 0x30
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8002fc2:	eeb0 0a47 	vmov.f32	s0, s14
 8002fc6:	eef0 0a67 	vmov.f32	s1, s15
 8002fca:	f014 fd49 	bl	8017a60 <sin>
 8002fce:	ec51 0b10 	vmov	r0, r1, d0
 8002fd2:	a3da      	add	r3, pc, #872	; (adr r3, 800333c <kinematicInverse+0x3ec>)
 8002fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fd8:	f7fd fb1e 	bl	8000618 <__aeabi_dmul>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	460b      	mov	r3, r1
 8002fe0:	4650      	mov	r0, sl
 8002fe2:	4659      	mov	r1, fp
 8002fe4:	f7fd f960 	bl	80002a8 <__aeabi_dsub>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	460b      	mov	r3, r1
 8002fec:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	c2  = (pWx*pWx + pWy*pWy - a1*a1 - a2*a2) / (2*a1*a2);
 8002ff0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002ff4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002ff8:	f7fd fb0e 	bl	8000618 <__aeabi_dmul>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	460b      	mov	r3, r1
 8003000:	4692      	mov	sl, r2
 8003002:	469b      	mov	fp, r3
 8003004:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003008:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800300c:	f7fd fb04 	bl	8000618 <__aeabi_dmul>
 8003010:	4602      	mov	r2, r0
 8003012:	460b      	mov	r3, r1
 8003014:	4650      	mov	r0, sl
 8003016:	4659      	mov	r1, fp
 8003018:	f7fd f948 	bl	80002ac <__adddf3>
 800301c:	4602      	mov	r2, r0
 800301e:	460b      	mov	r3, r1
 8003020:	4610      	mov	r0, r2
 8003022:	4619      	mov	r1, r3
 8003024:	a3c7      	add	r3, pc, #796	; (adr r3, 8003344 <kinematicInverse+0x3f4>)
 8003026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800302a:	f7fd f93d 	bl	80002a8 <__aeabi_dsub>
 800302e:	4602      	mov	r2, r0
 8003030:	460b      	mov	r3, r1
 8003032:	4610      	mov	r0, r2
 8003034:	4619      	mov	r1, r3
 8003036:	f04f 0200 	mov.w	r2, #0
 800303a:	4bbb      	ldr	r3, [pc, #748]	; (8003328 <kinematicInverse+0x3d8>)
 800303c:	f7fd f934 	bl	80002a8 <__aeabi_dsub>
 8003040:	4602      	mov	r2, r0
 8003042:	460b      	mov	r3, r1
 8003044:	4610      	mov	r0, r2
 8003046:	4619      	mov	r1, r3
 8003048:	a3b3      	add	r3, pc, #716	; (adr r3, 8003318 <kinematicInverse+0x3c8>)
 800304a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800304e:	f7fd fc0d 	bl	800086c <__aeabi_ddiv>
 8003052:	4602      	mov	r2, r0
 8003054:	460b      	mov	r3, r1
 8003056:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	temp = 1 - c2*c2;
 800305a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800305e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003062:	f7fd fad9 	bl	8000618 <__aeabi_dmul>
 8003066:	4602      	mov	r2, r0
 8003068:	460b      	mov	r3, r1
 800306a:	f04f 0000 	mov.w	r0, #0
 800306e:	49af      	ldr	r1, [pc, #700]	; (800332c <kinematicInverse+0x3dc>)
 8003070:	f7fd f91a 	bl	80002a8 <__aeabi_dsub>
 8003074:	4602      	mov	r2, r0
 8003076:	460b      	mov	r3, r1
 8003078:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	if ( temp < 0 ) {
 800307c:	f04f 0200 	mov.w	r2, #0
 8003080:	f04f 0300 	mov.w	r3, #0
 8003084:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003088:	f7fd fd38 	bl	8000afc <__aeabi_dcmplt>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d001      	beq.n	8003096 <kinematicInverse+0x146>
		return FALSE;
 8003092:	2300      	movs	r3, #0
 8003094:	e136      	b.n	8003304 <kinematicInverse+0x3b4>
	}
	s2_positive  = sqrt(temp); // Note that there are 2 solution: elbow up & elbow down
 8003096:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 800309a:	f014 fd6b 	bl	8017b74 <sqrt>
 800309e:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
	s2_negative	 = -s2_positive;
 80030a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80030a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80030ac:	63fb      	str	r3, [r7, #60]	; 0x3c

	theta2_positive = atan2(s2_positive,c2);
 80030ae:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 80030b2:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 80030b6:	f014 fd5b 	bl	8017b70 <atan2>
 80030ba:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
	theta2_negative = atan2(s2_negative,c2);
 80030be:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 80030c2:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 80030c6:	f014 fd53 	bl	8017b70 <atan2>
 80030ca:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	// Choose relevant situation : nearest
	if ( fabs( theta2_positive - current.Theta2) <= fabs( theta2_negative - current.Theta2)) {
 80030ce:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 80030d2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80030d6:	f7fd f8e7 	bl	80002a8 <__aeabi_dsub>
 80030da:	4602      	mov	r2, r0
 80030dc:	460b      	mov	r3, r1
 80030de:	4614      	mov	r4, r2
 80030e0:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80030e4:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 80030e8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80030ec:	f7fd f8dc 	bl	80002a8 <__aeabi_dsub>
 80030f0:	4602      	mov	r2, r0
 80030f2:	460b      	mov	r3, r1
 80030f4:	4690      	mov	r8, r2
 80030f6:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80030fa:	4642      	mov	r2, r8
 80030fc:	464b      	mov	r3, r9
 80030fe:	4620      	mov	r0, r4
 8003100:	4629      	mov	r1, r5
 8003102:	f7fd fd05 	bl	8000b10 <__aeabi_dcmple>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d008      	beq.n	800311e <kinematicInverse+0x1ce>
		s2 		= s2_positive;
 800310c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8003110:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
		theta2 	= theta2_positive;
 8003114:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8003118:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
 800311c:	e007      	b.n	800312e <kinematicInverse+0x1de>
	} else {
		s2 		= s2_negative;
 800311e:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8003122:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
		theta2 	= theta2_negative;
 8003126:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800312a:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	}

	s1 = ((a1 + a2*c2)*pWy - a2*s2*pWx) / (pWx*pWx + pWy*pWy);
 800312e:	f04f 0200 	mov.w	r2, #0
 8003132:	4b7f      	ldr	r3, [pc, #508]	; (8003330 <kinematicInverse+0x3e0>)
 8003134:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003138:	f7fd fa6e 	bl	8000618 <__aeabi_dmul>
 800313c:	4603      	mov	r3, r0
 800313e:	460c      	mov	r4, r1
 8003140:	4618      	mov	r0, r3
 8003142:	4621      	mov	r1, r4
 8003144:	a376      	add	r3, pc, #472	; (adr r3, 8003320 <kinematicInverse+0x3d0>)
 8003146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800314a:	f7fd f8af 	bl	80002ac <__adddf3>
 800314e:	4603      	mov	r3, r0
 8003150:	460c      	mov	r4, r1
 8003152:	4618      	mov	r0, r3
 8003154:	4621      	mov	r1, r4
 8003156:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800315a:	f7fd fa5d 	bl	8000618 <__aeabi_dmul>
 800315e:	4603      	mov	r3, r0
 8003160:	460c      	mov	r4, r1
 8003162:	4625      	mov	r5, r4
 8003164:	461c      	mov	r4, r3
 8003166:	f04f 0200 	mov.w	r2, #0
 800316a:	4b71      	ldr	r3, [pc, #452]	; (8003330 <kinematicInverse+0x3e0>)
 800316c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003170:	f7fd fa52 	bl	8000618 <__aeabi_dmul>
 8003174:	4602      	mov	r2, r0
 8003176:	460b      	mov	r3, r1
 8003178:	4610      	mov	r0, r2
 800317a:	4619      	mov	r1, r3
 800317c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003180:	f7fd fa4a 	bl	8000618 <__aeabi_dmul>
 8003184:	4602      	mov	r2, r0
 8003186:	460b      	mov	r3, r1
 8003188:	4620      	mov	r0, r4
 800318a:	4629      	mov	r1, r5
 800318c:	f7fd f88c 	bl	80002a8 <__aeabi_dsub>
 8003190:	4603      	mov	r3, r0
 8003192:	460c      	mov	r4, r1
 8003194:	4625      	mov	r5, r4
 8003196:	461c      	mov	r4, r3
 8003198:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800319c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80031a0:	f7fd fa3a 	bl	8000618 <__aeabi_dmul>
 80031a4:	4602      	mov	r2, r0
 80031a6:	460b      	mov	r3, r1
 80031a8:	4690      	mov	r8, r2
 80031aa:	4699      	mov	r9, r3
 80031ac:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80031b0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80031b4:	f7fd fa30 	bl	8000618 <__aeabi_dmul>
 80031b8:	4602      	mov	r2, r0
 80031ba:	460b      	mov	r3, r1
 80031bc:	4640      	mov	r0, r8
 80031be:	4649      	mov	r1, r9
 80031c0:	f7fd f874 	bl	80002ac <__adddf3>
 80031c4:	4602      	mov	r2, r0
 80031c6:	460b      	mov	r3, r1
 80031c8:	4620      	mov	r0, r4
 80031ca:	4629      	mov	r1, r5
 80031cc:	f7fd fb4e 	bl	800086c <__aeabi_ddiv>
 80031d0:	4603      	mov	r3, r0
 80031d2:	460c      	mov	r4, r1
 80031d4:	e9c7 3408 	strd	r3, r4, [r7, #32]
	c1 = ((a1 + a2*c2)*pWx + a2*s2*pWy) / (pWx*pWx + pWy*pWy);
 80031d8:	f04f 0200 	mov.w	r2, #0
 80031dc:	4b54      	ldr	r3, [pc, #336]	; (8003330 <kinematicInverse+0x3e0>)
 80031de:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80031e2:	f7fd fa19 	bl	8000618 <__aeabi_dmul>
 80031e6:	4603      	mov	r3, r0
 80031e8:	460c      	mov	r4, r1
 80031ea:	4618      	mov	r0, r3
 80031ec:	4621      	mov	r1, r4
 80031ee:	a34c      	add	r3, pc, #304	; (adr r3, 8003320 <kinematicInverse+0x3d0>)
 80031f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f4:	f7fd f85a 	bl	80002ac <__adddf3>
 80031f8:	4603      	mov	r3, r0
 80031fa:	460c      	mov	r4, r1
 80031fc:	4618      	mov	r0, r3
 80031fe:	4621      	mov	r1, r4
 8003200:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003204:	f7fd fa08 	bl	8000618 <__aeabi_dmul>
 8003208:	4603      	mov	r3, r0
 800320a:	460c      	mov	r4, r1
 800320c:	4625      	mov	r5, r4
 800320e:	461c      	mov	r4, r3
 8003210:	f04f 0200 	mov.w	r2, #0
 8003214:	4b46      	ldr	r3, [pc, #280]	; (8003330 <kinematicInverse+0x3e0>)
 8003216:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800321a:	f7fd f9fd 	bl	8000618 <__aeabi_dmul>
 800321e:	4602      	mov	r2, r0
 8003220:	460b      	mov	r3, r1
 8003222:	4610      	mov	r0, r2
 8003224:	4619      	mov	r1, r3
 8003226:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800322a:	f7fd f9f5 	bl	8000618 <__aeabi_dmul>
 800322e:	4602      	mov	r2, r0
 8003230:	460b      	mov	r3, r1
 8003232:	4620      	mov	r0, r4
 8003234:	4629      	mov	r1, r5
 8003236:	f7fd f839 	bl	80002ac <__adddf3>
 800323a:	4603      	mov	r3, r0
 800323c:	460c      	mov	r4, r1
 800323e:	4625      	mov	r5, r4
 8003240:	461c      	mov	r4, r3
 8003242:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003246:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800324a:	f7fd f9e5 	bl	8000618 <__aeabi_dmul>
 800324e:	4602      	mov	r2, r0
 8003250:	460b      	mov	r3, r1
 8003252:	4690      	mov	r8, r2
 8003254:	4699      	mov	r9, r3
 8003256:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800325a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800325e:	f7fd f9db 	bl	8000618 <__aeabi_dmul>
 8003262:	4602      	mov	r2, r0
 8003264:	460b      	mov	r3, r1
 8003266:	4640      	mov	r0, r8
 8003268:	4649      	mov	r1, r9
 800326a:	f7fd f81f 	bl	80002ac <__adddf3>
 800326e:	4602      	mov	r2, r0
 8003270:	460b      	mov	r3, r1
 8003272:	4620      	mov	r0, r4
 8003274:	4629      	mov	r1, r5
 8003276:	f7fd faf9 	bl	800086c <__aeabi_ddiv>
 800327a:	4603      	mov	r3, r0
 800327c:	460c      	mov	r4, r1
 800327e:	e9c7 3406 	strd	r3, r4, [r7, #24]
	theta1 = atan2(s1,c1);
 8003282:	ed97 1b06 	vldr	d1, [r7, #24]
 8003286:	ed97 0b08 	vldr	d0, [r7, #32]
 800328a:	f014 fc71 	bl	8017b70 <atan2>
 800328e:	ed87 0b04 	vstr	d0, [r7, #16]
 	theta4 = theta1 + theta2 - pnt->roll;
 8003292:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8003296:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800329a:	f7fd f807 	bl	80002ac <__adddf3>
 800329e:	4603      	mov	r3, r0
 80032a0:	460c      	mov	r4, r1
 80032a2:	4618      	mov	r0, r3
 80032a4:	4621      	mov	r1, r4
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	e9d3 3410 	ldrd	r3, r4, [r3, #64]	; 0x40
 80032ac:	461a      	mov	r2, r3
 80032ae:	4623      	mov	r3, r4
 80032b0:	f7fc fffa 	bl	80002a8 <__aeabi_dsub>
 80032b4:	4603      	mov	r3, r0
 80032b6:	460c      	mov	r4, r1
 80032b8:	e9c7 3402 	strd	r3, r4, [r7, #8]

	if ( SCARA_STATUS_OK != scaraCheckWorkSpace4(theta1, theta2, d3, theta4)) {
 80032bc:	ed97 3b02 	vldr	d3, [r7, #8]
 80032c0:	ed97 2b1a 	vldr	d2, [r7, #104]	; 0x68
 80032c4:	ed97 1b1e 	vldr	d1, [r7, #120]	; 0x78
 80032c8:	ed97 0b04 	vldr	d0, [r7, #16]
 80032cc:	f004 fe78 	bl	8007fc0 <scaraCheckWorkSpace4>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <kinematicInverse+0x38a>
		return FALSE; // Over workspace !!!
 80032d6:	2300      	movs	r3, #0
 80032d8:	e014      	b.n	8003304 <kinematicInverse+0x3b4>
	}
	pnt->Theta1 = theta1;
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80032e0:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	pnt->Theta2 = theta2;
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 80032ea:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	pnt->D3		= d3;
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80032f4:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	pnt->Theta4 = theta4;
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80032fe:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

	return TRUE; // All is well
 8003302:	2301      	movs	r3, #1
}
 8003304:	4618      	mov	r0, r3
 8003306:	3780      	adds	r7, #128	; 0x80
 8003308:	46bd      	mov	sp, r7
 800330a:	e8bd 4fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800330e:	b002      	add	sp, #8
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	f3af 8000 	nop.w
 8003318:	00000000 	.word	0x00000000
 800331c:	40eec800 	.word	0x40eec800
 8003320:	00000000 	.word	0x00000000
 8003324:	4068a000 	.word	0x4068a000
 8003328:	40d90000 	.word	0x40d90000
 800332c:	3ff00000 	.word	0x3ff00000
 8003330:	40640000 	.word	0x40640000
 8003334:	80000000 	.word	0x80000000
 8003338:	4060aa6e 	.word	0x4060aa6e
 800333c:	80000000 	.word	0x80000000
 8003340:	40402e14 	.word	0x40402e14
 8003344:	00000000 	.word	0x00000000
 8003348:	40e2f320 	.word	0x40e2f320

0800334c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003350:	f005 fc0c 	bl	8008b6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003354:	f000 f810 	bl	8003378 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003358:	f7ff fc04 	bl	8002b64 <MX_GPIO_Init>
  MX_DMA_Init();
 800335c:	f7fe fdec 	bl	8001f38 <MX_DMA_Init>
  MX_UART4_Init();
 8003360:	f005 fb06 	bl	8008970 <MX_UART4_Init>
  MX_FSMC_Init();
 8003364:	f7ff fb36 	bl	80029d4 <MX_FSMC_Init>
  MX_TIM7_Init();
 8003368:	f005 faa4 	bl	80088b4 <MX_TIM7_Init>
  //lowlayer_writePulse(0, 0, 0, 0);
  //HAL_Delay(10);
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800336c:	f7fe fe1e 	bl	8001fac <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8003370:	f00c f9ca 	bl	800f708 <osKernelStart>
//  		  HAL_Delay(10);
//  	  }
//  lowlayer_writePulse(0, 0, 0, 0);
//  __NOP();

  while (1)
 8003374:	e7fe      	b.n	8003374 <main+0x28>
	...

08003378 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b094      	sub	sp, #80	; 0x50
 800337c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800337e:	f107 0320 	add.w	r3, r7, #32
 8003382:	2230      	movs	r2, #48	; 0x30
 8003384:	2100      	movs	r1, #0
 8003386:	4618      	mov	r0, r3
 8003388:	f010 f8ce 	bl	8013528 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800338c:	f107 030c 	add.w	r3, r7, #12
 8003390:	2200      	movs	r2, #0
 8003392:	601a      	str	r2, [r3, #0]
 8003394:	605a      	str	r2, [r3, #4]
 8003396:	609a      	str	r2, [r3, #8]
 8003398:	60da      	str	r2, [r3, #12]
 800339a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800339c:	2300      	movs	r3, #0
 800339e:	60bb      	str	r3, [r7, #8]
 80033a0:	4b28      	ldr	r3, [pc, #160]	; (8003444 <SystemClock_Config+0xcc>)
 80033a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a4:	4a27      	ldr	r2, [pc, #156]	; (8003444 <SystemClock_Config+0xcc>)
 80033a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033aa:	6413      	str	r3, [r2, #64]	; 0x40
 80033ac:	4b25      	ldr	r3, [pc, #148]	; (8003444 <SystemClock_Config+0xcc>)
 80033ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b4:	60bb      	str	r3, [r7, #8]
 80033b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80033b8:	2300      	movs	r3, #0
 80033ba:	607b      	str	r3, [r7, #4]
 80033bc:	4b22      	ldr	r3, [pc, #136]	; (8003448 <SystemClock_Config+0xd0>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a21      	ldr	r2, [pc, #132]	; (8003448 <SystemClock_Config+0xd0>)
 80033c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033c6:	6013      	str	r3, [r2, #0]
 80033c8:	4b1f      	ldr	r3, [pc, #124]	; (8003448 <SystemClock_Config+0xd0>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033d0:	607b      	str	r3, [r7, #4]
 80033d2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80033d4:	2301      	movs	r3, #1
 80033d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80033d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80033dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80033de:	2302      	movs	r3, #2
 80033e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80033e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80033e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80033e8:	2308      	movs	r3, #8
 80033ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80033ec:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80033f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80033f2:	2302      	movs	r3, #2
 80033f4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80033f6:	2307      	movs	r3, #7
 80033f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80033fa:	f107 0320 	add.w	r3, r7, #32
 80033fe:	4618      	mov	r0, r3
 8003400:	f007 fc2c 	bl	800ac5c <HAL_RCC_OscConfig>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d001      	beq.n	800340e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800340a:	f000 f831 	bl	8003470 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800340e:	230f      	movs	r3, #15
 8003410:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003412:	2302      	movs	r3, #2
 8003414:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003416:	2300      	movs	r3, #0
 8003418:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800341a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800341e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003420:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003424:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003426:	f107 030c 	add.w	r3, r7, #12
 800342a:	2105      	movs	r1, #5
 800342c:	4618      	mov	r0, r3
 800342e:	f007 fe85 	bl	800b13c <HAL_RCC_ClockConfig>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d001      	beq.n	800343c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8003438:	f000 f81a 	bl	8003470 <Error_Handler>
  }
}
 800343c:	bf00      	nop
 800343e:	3750      	adds	r7, #80	; 0x50
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	40023800 	.word	0x40023800
 8003448:	40007000 	.word	0x40007000

0800344c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a04      	ldr	r2, [pc, #16]	; (800346c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d101      	bne.n	8003462 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800345e:	f005 fba7 	bl	8008bb0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003462:	bf00      	nop
 8003464:	3708      	adds	r7, #8
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	40001000 	.word	0x40001000

08003470 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003470:	b480      	push	{r7}
 8003472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003474:	bf00      	nop
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr

0800347e <ringBuff_PushChar>:
 *  data		: data to write
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t	ringBuff_PushChar(RINGBUFFER_TypeDef *ringbuff, uint8_t data) {
 800347e:	b480      	push	{r7}
 8003480:	b083      	sub	sp, #12
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
 8003486:	460b      	mov	r3, r1
 8003488:	70fb      	strb	r3, [r7, #3]
	if (ringbuff->isFull_Flag) {
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
 8003490:	2b00      	cmp	r3, #0
 8003492:	d001      	beq.n	8003498 <ringBuff_PushChar+0x1a>
		return FALSE;
 8003494:	2300      	movs	r3, #0
 8003496:	e024      	b.n	80034e2 <ringBuff_PushChar+0x64>
	} else {
			ringbuff->Array[ringbuff->head]	= data;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	78f9      	ldrb	r1, [r7, #3]
 80034a2:	54d1      	strb	r1, [r2, r3]
			ringbuff->head					= (ringbuff->head + 1) % RINGBUFFER_SIZE;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80034aa:	3301      	adds	r3, #1
 80034ac:	425a      	negs	r2, r3
 80034ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034b2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80034b6:	bf58      	it	pl
 80034b8:	4253      	negpl	r3, r2
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
			if (ringbuff->head == ringbuff->tail) {
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d103      	bne.n	80034d8 <ringBuff_PushChar+0x5a>
				ringbuff->isFull_Flag = TRUE;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
			}
			ringbuff->isEmpty_Flag = FALSE;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 2409 	strb.w	r2, [r3, #1033]	; 0x409
			return TRUE;
 80034e0:	2301      	movs	r3, #1
	}
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	370c      	adds	r7, #12
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr

080034ee <ringBuff_PopChar>:
 *  *ptr_data	: pointer of destination
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t	ringBuff_PopChar(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data) {
 80034ee:	b480      	push	{r7}
 80034f0:	b083      	sub	sp, #12
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
 80034f6:	6039      	str	r1, [r7, #0]
	if (ringbuff->isEmpty_Flag) {
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f893 3409 	ldrb.w	r3, [r3, #1033]	; 0x409
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <ringBuff_PopChar+0x18>
		return FALSE;
 8003502:	2300      	movs	r3, #0
 8003504:	e025      	b.n	8003552 <ringBuff_PopChar+0x64>
	} else {
			*ptr_data		= ringbuff->Array[ringbuff->tail];
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	5cd2      	ldrb	r2, [r2, r3]
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	701a      	strb	r2, [r3, #0]
			ringbuff->tail	= (ringbuff->tail +1) % RINGBUFFER_SIZE;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800351a:	3301      	adds	r3, #1
 800351c:	425a      	negs	r2, r3
 800351e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003522:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003526:	bf58      	it	pl
 8003528:	4253      	negpl	r3, r2
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
			if (ringbuff->head == ringbuff->tail) {
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800353c:	429a      	cmp	r2, r3
 800353e:	d103      	bne.n	8003548 <ringBuff_PopChar+0x5a>
				ringbuff->isEmpty_Flag = TRUE;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 2409 	strb.w	r2, [r3, #1033]	; 0x409
			}
			ringbuff->isFull_Flag = FALSE;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
			return TRUE;
 8003550:	2301      	movs	r3, #1
	}
}
 8003552:	4618      	mov	r0, r3
 8003554:	370c      	adds	r7, #12
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr

0800355e <ringBuff_PushArray>:
 *  *ptr_data	: pointer of source
 *  len			: maximum number of bytes that want to copy
 *
 *  returns:	: number of bytes copied
 */
int32_t ringBuff_PushArray(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data, int32_t len) {
 800355e:	b580      	push	{r7, lr}
 8003560:	b086      	sub	sp, #24
 8003562:	af00      	add	r7, sp, #0
 8003564:	60f8      	str	r0, [r7, #12]
 8003566:	60b9      	str	r1, [r7, #8]
 8003568:	607a      	str	r2, [r7, #4]
	int16_t success_number;

	for (success_number = 0; success_number < len; success_number++) {
 800356a:	2300      	movs	r3, #0
 800356c:	82fb      	strh	r3, [r7, #22]
 800356e:	e011      	b.n	8003594 <ringBuff_PushArray+0x36>
		if ( !ringBuff_PushChar(ringbuff, *(ptr_data + success_number))) {
 8003570:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003574:	68ba      	ldr	r2, [r7, #8]
 8003576:	4413      	add	r3, r2
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	4619      	mov	r1, r3
 800357c:	68f8      	ldr	r0, [r7, #12]
 800357e:	f7ff ff7e 	bl	800347e <ringBuff_PushChar>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d00b      	beq.n	80035a0 <ringBuff_PushArray+0x42>
	for (success_number = 0; success_number < len; success_number++) {
 8003588:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800358c:	b29b      	uxth	r3, r3
 800358e:	3301      	adds	r3, #1
 8003590:	b29b      	uxth	r3, r3
 8003592:	82fb      	strh	r3, [r7, #22]
 8003594:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	429a      	cmp	r2, r3
 800359c:	dce8      	bgt.n	8003570 <ringBuff_PushArray+0x12>
 800359e:	e000      	b.n	80035a2 <ringBuff_PushArray+0x44>
			break;
 80035a0:	bf00      	nop
		}// stop when ring buffer FULL
	}
	return success_number;
 80035a2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3718      	adds	r7, #24
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}

080035ae <ringBuff_PopArray>:
 *  *ptr_data	: pointer of destination
 *  len			: maximum number of bytes that want to copy
 *
 *  returns:	: number of bytes copied
 */
int32_t ringBuff_PopArray(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data, int32_t len) {
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b086      	sub	sp, #24
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	60f8      	str	r0, [r7, #12]
 80035b6:	60b9      	str	r1, [r7, #8]
 80035b8:	607a      	str	r2, [r7, #4]
	int32_t success_number;

	for (success_number = 0; success_number < len; success_number++) {
 80035ba:	2300      	movs	r3, #0
 80035bc:	617b      	str	r3, [r7, #20]
 80035be:	e00c      	b.n	80035da <ringBuff_PopArray+0x2c>
		if ( !ringBuff_PopChar(ringbuff, (ptr_data + success_number))) {
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	68ba      	ldr	r2, [r7, #8]
 80035c4:	4413      	add	r3, r2
 80035c6:	4619      	mov	r1, r3
 80035c8:	68f8      	ldr	r0, [r7, #12]
 80035ca:	f7ff ff90 	bl	80034ee <ringBuff_PopChar>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d007      	beq.n	80035e4 <ringBuff_PopArray+0x36>
	for (success_number = 0; success_number < len; success_number++) {
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	3301      	adds	r3, #1
 80035d8:	617b      	str	r3, [r7, #20]
 80035da:	697a      	ldr	r2, [r7, #20]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	429a      	cmp	r2, r3
 80035e0:	dbee      	blt.n	80035c0 <ringBuff_PopArray+0x12>
 80035e2:	e000      	b.n	80035e6 <ringBuff_PopArray+0x38>
			break;
 80035e4:	bf00      	nop
		}// stop when ring buffer EMPTY
	}
	return success_number;
 80035e6:	697b      	ldr	r3, [r7, #20]
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3718      	adds	r7, #24
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <ringBuff_DistanceOf>:
 *  cmp_char	: compare character
 *
 *  returns:	: distance from 'tail' to 'cmp_char'
 *  			  -1 'cmp_char' could not be found.
 */
int32_t	ringBuff_DistanceOf	(RINGBUFFER_TypeDef *ringbuff, uint8_t cmp_char) {
 80035f0:	b480      	push	{r7}
 80035f2:	b087      	sub	sp, #28
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	460b      	mov	r3, r1
 80035fa:	70fb      	strb	r3, [r7, #3]
	int32_t index;
	int32_t distance = 0;
 80035fc:	2300      	movs	r3, #0
 80035fe:	613b      	str	r3, [r7, #16]

	index = ringbuff->tail;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003606:	617b      	str	r3, [r7, #20]
	if (ringbuff->isFull_Flag) {
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
 800360e:	2b00      	cmp	r3, #0
 8003610:	d036      	beq.n	8003680 <ringBuff_DistanceOf+0x90>
		for ( int32_t i = 0; i < RINGBUFFER_SIZE; i++, index = (index + 1) % RINGBUFFER_SIZE) {
 8003612:	2300      	movs	r3, #0
 8003614:	60fb      	str	r3, [r7, #12]
 8003616:	e018      	b.n	800364a <ringBuff_DistanceOf+0x5a>
				if ( cmp_char == ringbuff->Array[index]) {
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	4413      	add	r3, r2
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	78fa      	ldrb	r2, [r7, #3]
 8003622:	429a      	cmp	r2, r3
 8003624:	d101      	bne.n	800362a <ringBuff_DistanceOf+0x3a>
					return distance;
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	e037      	b.n	800369a <ringBuff_DistanceOf+0xaa>
				}
				distance++;
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	3301      	adds	r3, #1
 800362e:	613b      	str	r3, [r7, #16]
		for ( int32_t i = 0; i < RINGBUFFER_SIZE; i++, index = (index + 1) % RINGBUFFER_SIZE) {
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	3301      	adds	r3, #1
 8003634:	60fb      	str	r3, [r7, #12]
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	3301      	adds	r3, #1
 800363a:	425a      	negs	r2, r3
 800363c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003640:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003644:	bf58      	it	pl
 8003646:	4253      	negpl	r3, r2
 8003648:	617b      	str	r3, [r7, #20]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003650:	dbe2      	blt.n	8003618 <ringBuff_DistanceOf+0x28>
 8003652:	e020      	b.n	8003696 <ringBuff_DistanceOf+0xa6>
			}

	} else {
		for ( ; (index != ringbuff->head) || !ringbuff->isEmpty_Flag; index = (index + 1) % RINGBUFFER_SIZE) {
				if ( cmp_char == ringbuff->Array[index]) {
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	4413      	add	r3, r2
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	78fa      	ldrb	r2, [r7, #3]
 800365e:	429a      	cmp	r2, r3
 8003660:	d101      	bne.n	8003666 <ringBuff_DistanceOf+0x76>
					return distance;
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	e019      	b.n	800369a <ringBuff_DistanceOf+0xaa>
				}
				distance++;
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	3301      	adds	r3, #1
 800366a:	613b      	str	r3, [r7, #16]
		for ( ; (index != ringbuff->head) || !ringbuff->isEmpty_Flag; index = (index + 1) % RINGBUFFER_SIZE) {
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	3301      	adds	r3, #1
 8003670:	425a      	negs	r2, r3
 8003672:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003676:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800367a:	bf58      	it	pl
 800367c:	4253      	negpl	r3, r2
 800367e:	617b      	str	r3, [r7, #20]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003686:	697a      	ldr	r2, [r7, #20]
 8003688:	429a      	cmp	r2, r3
 800368a:	d1e3      	bne.n	8003654 <ringBuff_DistanceOf+0x64>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f893 3409 	ldrb.w	r3, [r3, #1033]	; 0x409
 8003692:	2b00      	cmp	r3, #0
 8003694:	d0de      	beq.n	8003654 <ringBuff_DistanceOf+0x64>
			}
	}
	return -1;
 8003696:	f04f 33ff 	mov.w	r3, #4294967295
}
 800369a:	4618      	mov	r0, r3
 800369c:	371c      	adds	r7, #28
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
	...

080036a8 <lowlayer_scanReset>:
uint8_t state_scan;
uint8_t scan_flag;

const int8_t	pulse_scan[4] = {4, 5, 8, 30};

void	lowlayer_scanReset(void) {
 80036a8:	b580      	push	{r7, lr}
 80036aa:	af00      	add	r7, sp, #0
	scan_flag = 0;
 80036ac:	4b06      	ldr	r3, [pc, #24]	; (80036c8 <lowlayer_scanReset+0x20>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	701a      	strb	r2, [r3, #0]
	state_scan = 0;
 80036b2:	4b06      	ldr	r3, [pc, #24]	; (80036cc <lowlayer_scanReset+0x24>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(CAPTURE_ENABLE_GPIO_Port, CAPTURE_ENABLE_Pin, GPIO_PIN_RESET);
 80036b8:	2200      	movs	r2, #0
 80036ba:	2108      	movs	r1, #8
 80036bc:	4804      	ldr	r0, [pc, #16]	; (80036d0 <lowlayer_scanReset+0x28>)
 80036be:	f006 f8d3 	bl	8009868 <HAL_GPIO_WritePin>
}
 80036c2:	bf00      	nop
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	20005348 	.word	0x20005348
 80036cc:	20005368 	.word	0x20005368
 80036d0:	40020c00 	.word	0x40020c00

080036d4 <lowlayer_scanFlow>:

uint8_t	lowlayer_scanFlow(void) {
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
	// Scan limit switch from 3 to 0
	int8_t pulse[4] = {0, 0, 0 ,0};
 80036da:	2300      	movs	r3, #0
 80036dc:	607b      	str	r3, [r7, #4]
	lowlayer_updateLimit();
 80036de:	f000 fb19 	bl	8003d14 <lowlayer_updateLimit>
	if (state_scan < 4) {
 80036e2:	4b25      	ldr	r3, [pc, #148]	; (8003778 <lowlayer_scanFlow+0xa4>)
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	2b03      	cmp	r3, #3
 80036e8:	d831      	bhi.n	800374e <lowlayer_scanFlow+0x7a>
		if (limit_switch[3 - state_scan] == 0) {
 80036ea:	4b23      	ldr	r3, [pc, #140]	; (8003778 <lowlayer_scanFlow+0xa4>)
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	f1c3 0303 	rsb	r3, r3, #3
 80036f2:	4a22      	ldr	r2, [pc, #136]	; (800377c <lowlayer_scanFlow+0xa8>)
 80036f4:	5cd3      	ldrb	r3, [r2, r3]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d121      	bne.n	800373e <lowlayer_scanFlow+0x6a>
			pulse[3 - state_scan] = pulse_scan[3 - state_scan];
 80036fa:	4b1f      	ldr	r3, [pc, #124]	; (8003778 <lowlayer_scanFlow+0xa4>)
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	f1c3 0203 	rsb	r2, r3, #3
 8003702:	4b1d      	ldr	r3, [pc, #116]	; (8003778 <lowlayer_scanFlow+0xa4>)
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	f1c3 0303 	rsb	r3, r3, #3
 800370a:	491d      	ldr	r1, [pc, #116]	; (8003780 <lowlayer_scanFlow+0xac>)
 800370c:	568a      	ldrsb	r2, [r1, r2]
 800370e:	f107 0108 	add.w	r1, r7, #8
 8003712:	440b      	add	r3, r1
 8003714:	f803 2c04 	strb.w	r2, [r3, #-4]
			lowlayer_writePulse(-pulse[0], pulse[1], -pulse[2], pulse[3]);
 8003718:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800371c:	b2db      	uxtb	r3, r3
 800371e:	425b      	negs	r3, r3
 8003720:	b2db      	uxtb	r3, r3
 8003722:	b258      	sxtb	r0, r3
 8003724:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8003728:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800372c:	b2db      	uxtb	r3, r3
 800372e:	425b      	negs	r3, r3
 8003730:	b2db      	uxtb	r3, r3
 8003732:	b25a      	sxtb	r2, r3
 8003734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003738:	f000 f9d0 	bl	8003adc <lowlayer_writePulse>
 800373c:	e005      	b.n	800374a <lowlayer_scanFlow+0x76>
		} else {
			state_scan++;
 800373e:	4b0e      	ldr	r3, [pc, #56]	; (8003778 <lowlayer_scanFlow+0xa4>)
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	3301      	adds	r3, #1
 8003744:	b2da      	uxtb	r2, r3
 8003746:	4b0c      	ldr	r3, [pc, #48]	; (8003778 <lowlayer_scanFlow+0xa4>)
 8003748:	701a      	strb	r2, [r3, #0]
		}

		return FALSE;
 800374a:	2300      	movs	r3, #0
 800374c:	e010      	b.n	8003770 <lowlayer_scanFlow+0x9c>
	} else {
		lowlayer_updateCapture();
 800374e:	f000 fac5 	bl	8003cdc <lowlayer_updateCapture>
		HAL_GPIO_WritePin(CAPTURE_ENABLE_GPIO_Port, CAPTURE_ENABLE_Pin, GPIO_PIN_SET);
 8003752:	2201      	movs	r2, #1
 8003754:	2108      	movs	r1, #8
 8003756:	480b      	ldr	r0, [pc, #44]	; (8003784 <lowlayer_scanFlow+0xb0>)
 8003758:	f006 f886 	bl	8009868 <HAL_GPIO_WritePin>
		lowlayer_writePulse(0, 0, 0, 0);
 800375c:	2300      	movs	r3, #0
 800375e:	2200      	movs	r2, #0
 8003760:	2100      	movs	r1, #0
 8003762:	2000      	movs	r0, #0
 8003764:	f000 f9ba 	bl	8003adc <lowlayer_writePulse>
		scan_flag = 1;
 8003768:	4b07      	ldr	r3, [pc, #28]	; (8003788 <lowlayer_scanFlow+0xb4>)
 800376a:	2201      	movs	r2, #1
 800376c:	701a      	strb	r2, [r3, #0]

		return TRUE;
 800376e:	2301      	movs	r3, #1
	}
}
 8003770:	4618      	mov	r0, r3
 8003772:	3708      	adds	r7, #8
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	20005368 	.word	0x20005368
 800377c:	20005358 	.word	0x20005358
 8003780:	080196d4 	.word	0x080196d4
 8003784:	40020c00 	.word	0x40020c00
 8003788:	20005348 	.word	0x20005348
 800378c:	00000000 	.word	0x00000000

08003790 <lowlayer_computeAndWritePulse>:
	true->Theta2 = LIM_MIN_J1 + position_encoder[1]*2.0*PI/4.0/GEAR_J1; // Servo Motor
	true->D3	 = LIM_MIN_J2 + position_encoder[2]*2.0*PI/4.0/GEAR_J2; // Servo Motor
	true->Theta4 = LIM_MIN_J3 + pulse_accumulate[3]*2.0*PI/4.0/GEAR_J3; // Stepper Motor
}

uint8_t	lowlayer_computeAndWritePulse(SCARA_PositionTypeDef current, SCARA_PositionTypeDef next) {
 8003790:	b084      	sub	sp, #16
 8003792:	b590      	push	{r4, r7, lr}
 8003794:	b093      	sub	sp, #76	; 0x4c
 8003796:	af00      	add	r7, sp, #0
 8003798:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800379c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint32_t	current_var0, current_var1, current_var2, current_var3;
	uint32_t	next_var0, next_var1, next_var2, next_var3;
	int64_t		delta_var0, delta_var1, delta_var2, delta_var3;
	uint8_t 	result;

	current_var0	= round((current.Theta1 - LIM_MIN_J0) * GEAR_J0/(2*PI));
 80037a0:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80037a4:	a3c6      	add	r3, pc, #792	; (adr r3, 8003ac0 <lowlayer_computeAndWritePulse+0x330>)
 80037a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037aa:	f7fc fd7f 	bl	80002ac <__adddf3>
 80037ae:	4603      	mov	r3, r0
 80037b0:	460c      	mov	r4, r1
 80037b2:	4618      	mov	r0, r3
 80037b4:	4621      	mov	r1, r4
 80037b6:	a3c4      	add	r3, pc, #784	; (adr r3, 8003ac8 <lowlayer_computeAndWritePulse+0x338>)
 80037b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037bc:	f7fc ff2c 	bl	8000618 <__aeabi_dmul>
 80037c0:	4603      	mov	r3, r0
 80037c2:	460c      	mov	r4, r1
 80037c4:	4618      	mov	r0, r3
 80037c6:	4621      	mov	r1, r4
 80037c8:	a3b5      	add	r3, pc, #724	; (adr r3, 8003aa0 <lowlayer_computeAndWritePulse+0x310>)
 80037ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ce:	f7fd f84d 	bl	800086c <__aeabi_ddiv>
 80037d2:	4603      	mov	r3, r0
 80037d4:	460c      	mov	r4, r1
 80037d6:	ec44 3b17 	vmov	d7, r3, r4
 80037da:	eeb0 0a47 	vmov.f32	s0, s14
 80037de:	eef0 0a67 	vmov.f32	s1, s15
 80037e2:	f014 f8f1 	bl	80179c8 <round>
 80037e6:	ec54 3b10 	vmov	r3, r4, d0
 80037ea:	4618      	mov	r0, r3
 80037ec:	4621      	mov	r1, r4
 80037ee:	f7fd f9eb 	bl	8000bc8 <__aeabi_d2uiz>
 80037f2:	4603      	mov	r3, r0
 80037f4:	647b      	str	r3, [r7, #68]	; 0x44
	current_var1 	= round((current.Theta2 - LIM_MIN_J1) * GEAR_J1/(2*PI));
 80037f6:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80037fa:	a3b5      	add	r3, pc, #724	; (adr r3, 8003ad0 <lowlayer_computeAndWritePulse+0x340>)
 80037fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003800:	f7fc fd54 	bl	80002ac <__adddf3>
 8003804:	4603      	mov	r3, r0
 8003806:	460c      	mov	r4, r1
 8003808:	4618      	mov	r0, r3
 800380a:	4621      	mov	r1, r4
 800380c:	f04f 0200 	mov.w	r2, #0
 8003810:	4bb1      	ldr	r3, [pc, #708]	; (8003ad8 <lowlayer_computeAndWritePulse+0x348>)
 8003812:	f7fc ff01 	bl	8000618 <__aeabi_dmul>
 8003816:	4603      	mov	r3, r0
 8003818:	460c      	mov	r4, r1
 800381a:	4618      	mov	r0, r3
 800381c:	4621      	mov	r1, r4
 800381e:	a3a0      	add	r3, pc, #640	; (adr r3, 8003aa0 <lowlayer_computeAndWritePulse+0x310>)
 8003820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003824:	f7fd f822 	bl	800086c <__aeabi_ddiv>
 8003828:	4603      	mov	r3, r0
 800382a:	460c      	mov	r4, r1
 800382c:	ec44 3b17 	vmov	d7, r3, r4
 8003830:	eeb0 0a47 	vmov.f32	s0, s14
 8003834:	eef0 0a67 	vmov.f32	s1, s15
 8003838:	f014 f8c6 	bl	80179c8 <round>
 800383c:	ec54 3b10 	vmov	r3, r4, d0
 8003840:	4618      	mov	r0, r3
 8003842:	4621      	mov	r1, r4
 8003844:	f7fd f9c0 	bl	8000bc8 <__aeabi_d2uiz>
 8003848:	4603      	mov	r3, r0
 800384a:	643b      	str	r3, [r7, #64]	; 0x40
	current_var2 	= round((current.D3 - LIM_MIN_J2) * GEAR_J2);
 800384c:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003850:	a395      	add	r3, pc, #596	; (adr r3, 8003aa8 <lowlayer_computeAndWritePulse+0x318>)
 8003852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003856:	f7fc fedf 	bl	8000618 <__aeabi_dmul>
 800385a:	4603      	mov	r3, r0
 800385c:	460c      	mov	r4, r1
 800385e:	ec44 3b17 	vmov	d7, r3, r4
 8003862:	eeb0 0a47 	vmov.f32	s0, s14
 8003866:	eef0 0a67 	vmov.f32	s1, s15
 800386a:	f014 f8ad 	bl	80179c8 <round>
 800386e:	ec54 3b10 	vmov	r3, r4, d0
 8003872:	4618      	mov	r0, r3
 8003874:	4621      	mov	r1, r4
 8003876:	f7fd f9a7 	bl	8000bc8 <__aeabi_d2uiz>
 800387a:	4603      	mov	r3, r0
 800387c:	63fb      	str	r3, [r7, #60]	; 0x3c
	current_var3 	= round((current.Theta4 - LIM_MIN_J3) * GEAR_J3/(2*PI));
 800387e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8003882:	a38b      	add	r3, pc, #556	; (adr r3, 8003ab0 <lowlayer_computeAndWritePulse+0x320>)
 8003884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003888:	f7fc fd10 	bl	80002ac <__adddf3>
 800388c:	4603      	mov	r3, r0
 800388e:	460c      	mov	r4, r1
 8003890:	4618      	mov	r0, r3
 8003892:	4621      	mov	r1, r4
 8003894:	a388      	add	r3, pc, #544	; (adr r3, 8003ab8 <lowlayer_computeAndWritePulse+0x328>)
 8003896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800389a:	f7fc febd 	bl	8000618 <__aeabi_dmul>
 800389e:	4603      	mov	r3, r0
 80038a0:	460c      	mov	r4, r1
 80038a2:	4618      	mov	r0, r3
 80038a4:	4621      	mov	r1, r4
 80038a6:	a37e      	add	r3, pc, #504	; (adr r3, 8003aa0 <lowlayer_computeAndWritePulse+0x310>)
 80038a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ac:	f7fc ffde 	bl	800086c <__aeabi_ddiv>
 80038b0:	4603      	mov	r3, r0
 80038b2:	460c      	mov	r4, r1
 80038b4:	ec44 3b17 	vmov	d7, r3, r4
 80038b8:	eeb0 0a47 	vmov.f32	s0, s14
 80038bc:	eef0 0a67 	vmov.f32	s1, s15
 80038c0:	f014 f882 	bl	80179c8 <round>
 80038c4:	ec54 3b10 	vmov	r3, r4, d0
 80038c8:	4618      	mov	r0, r3
 80038ca:	4621      	mov	r1, r4
 80038cc:	f7fd f97c 	bl	8000bc8 <__aeabi_d2uiz>
 80038d0:	4603      	mov	r3, r0
 80038d2:	63bb      	str	r3, [r7, #56]	; 0x38
	next_var0 		= round((next.Theta1 - LIM_MIN_J0) * GEAR_J0/(2*PI));
 80038d4:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 80038d8:	a379      	add	r3, pc, #484	; (adr r3, 8003ac0 <lowlayer_computeAndWritePulse+0x330>)
 80038da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038de:	f7fc fce5 	bl	80002ac <__adddf3>
 80038e2:	4603      	mov	r3, r0
 80038e4:	460c      	mov	r4, r1
 80038e6:	4618      	mov	r0, r3
 80038e8:	4621      	mov	r1, r4
 80038ea:	a377      	add	r3, pc, #476	; (adr r3, 8003ac8 <lowlayer_computeAndWritePulse+0x338>)
 80038ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f0:	f7fc fe92 	bl	8000618 <__aeabi_dmul>
 80038f4:	4603      	mov	r3, r0
 80038f6:	460c      	mov	r4, r1
 80038f8:	4618      	mov	r0, r3
 80038fa:	4621      	mov	r1, r4
 80038fc:	a368      	add	r3, pc, #416	; (adr r3, 8003aa0 <lowlayer_computeAndWritePulse+0x310>)
 80038fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003902:	f7fc ffb3 	bl	800086c <__aeabi_ddiv>
 8003906:	4603      	mov	r3, r0
 8003908:	460c      	mov	r4, r1
 800390a:	ec44 3b17 	vmov	d7, r3, r4
 800390e:	eeb0 0a47 	vmov.f32	s0, s14
 8003912:	eef0 0a67 	vmov.f32	s1, s15
 8003916:	f014 f857 	bl	80179c8 <round>
 800391a:	ec54 3b10 	vmov	r3, r4, d0
 800391e:	4618      	mov	r0, r3
 8003920:	4621      	mov	r1, r4
 8003922:	f7fd f951 	bl	8000bc8 <__aeabi_d2uiz>
 8003926:	4603      	mov	r3, r0
 8003928:	637b      	str	r3, [r7, #52]	; 0x34
	next_var1 		= round((next.Theta2 - LIM_MIN_J1) * GEAR_J1/(2*PI));
 800392a:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 800392e:	a368      	add	r3, pc, #416	; (adr r3, 8003ad0 <lowlayer_computeAndWritePulse+0x340>)
 8003930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003934:	f7fc fcba 	bl	80002ac <__adddf3>
 8003938:	4603      	mov	r3, r0
 800393a:	460c      	mov	r4, r1
 800393c:	4618      	mov	r0, r3
 800393e:	4621      	mov	r1, r4
 8003940:	f04f 0200 	mov.w	r2, #0
 8003944:	4b64      	ldr	r3, [pc, #400]	; (8003ad8 <lowlayer_computeAndWritePulse+0x348>)
 8003946:	f7fc fe67 	bl	8000618 <__aeabi_dmul>
 800394a:	4603      	mov	r3, r0
 800394c:	460c      	mov	r4, r1
 800394e:	4618      	mov	r0, r3
 8003950:	4621      	mov	r1, r4
 8003952:	a353      	add	r3, pc, #332	; (adr r3, 8003aa0 <lowlayer_computeAndWritePulse+0x310>)
 8003954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003958:	f7fc ff88 	bl	800086c <__aeabi_ddiv>
 800395c:	4603      	mov	r3, r0
 800395e:	460c      	mov	r4, r1
 8003960:	ec44 3b17 	vmov	d7, r3, r4
 8003964:	eeb0 0a47 	vmov.f32	s0, s14
 8003968:	eef0 0a67 	vmov.f32	s1, s15
 800396c:	f014 f82c 	bl	80179c8 <round>
 8003970:	ec54 3b10 	vmov	r3, r4, d0
 8003974:	4618      	mov	r0, r3
 8003976:	4621      	mov	r1, r4
 8003978:	f7fd f926 	bl	8000bc8 <__aeabi_d2uiz>
 800397c:	4603      	mov	r3, r0
 800397e:	633b      	str	r3, [r7, #48]	; 0x30
	next_var2 		= round((next.D3 - LIM_MIN_J2) * GEAR_J2);
 8003980:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8003984:	a348      	add	r3, pc, #288	; (adr r3, 8003aa8 <lowlayer_computeAndWritePulse+0x318>)
 8003986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800398a:	f7fc fe45 	bl	8000618 <__aeabi_dmul>
 800398e:	4603      	mov	r3, r0
 8003990:	460c      	mov	r4, r1
 8003992:	ec44 3b17 	vmov	d7, r3, r4
 8003996:	eeb0 0a47 	vmov.f32	s0, s14
 800399a:	eef0 0a67 	vmov.f32	s1, s15
 800399e:	f014 f813 	bl	80179c8 <round>
 80039a2:	ec54 3b10 	vmov	r3, r4, d0
 80039a6:	4618      	mov	r0, r3
 80039a8:	4621      	mov	r1, r4
 80039aa:	f7fd f90d 	bl	8000bc8 <__aeabi_d2uiz>
 80039ae:	4603      	mov	r3, r0
 80039b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	next_var3 		= round((next.Theta4 - LIM_MIN_J3) * GEAR_J3/(2*PI));
 80039b2:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 80039b6:	a33e      	add	r3, pc, #248	; (adr r3, 8003ab0 <lowlayer_computeAndWritePulse+0x320>)
 80039b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039bc:	f7fc fc76 	bl	80002ac <__adddf3>
 80039c0:	4603      	mov	r3, r0
 80039c2:	460c      	mov	r4, r1
 80039c4:	4618      	mov	r0, r3
 80039c6:	4621      	mov	r1, r4
 80039c8:	a33b      	add	r3, pc, #236	; (adr r3, 8003ab8 <lowlayer_computeAndWritePulse+0x328>)
 80039ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ce:	f7fc fe23 	bl	8000618 <__aeabi_dmul>
 80039d2:	4603      	mov	r3, r0
 80039d4:	460c      	mov	r4, r1
 80039d6:	4618      	mov	r0, r3
 80039d8:	4621      	mov	r1, r4
 80039da:	a331      	add	r3, pc, #196	; (adr r3, 8003aa0 <lowlayer_computeAndWritePulse+0x310>)
 80039dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e0:	f7fc ff44 	bl	800086c <__aeabi_ddiv>
 80039e4:	4603      	mov	r3, r0
 80039e6:	460c      	mov	r4, r1
 80039e8:	ec44 3b17 	vmov	d7, r3, r4
 80039ec:	eeb0 0a47 	vmov.f32	s0, s14
 80039f0:	eef0 0a67 	vmov.f32	s1, s15
 80039f4:	f013 ffe8 	bl	80179c8 <round>
 80039f8:	ec54 3b10 	vmov	r3, r4, d0
 80039fc:	4618      	mov	r0, r3
 80039fe:	4621      	mov	r1, r4
 8003a00:	f7fd f8e2 	bl	8000bc8 <__aeabi_d2uiz>
 8003a04:	4603      	mov	r3, r0
 8003a06:	62bb      	str	r3, [r7, #40]	; 0x28

	delta_var0 = next_var0 - current_var0;
 8003a08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	f04f 0400 	mov.w	r4, #0
 8003a12:	e9c7 3408 	strd	r3, r4, [r7, #32]
	delta_var1 = next_var1 - current_var1;
 8003a16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a1a:	1ad3      	subs	r3, r2, r3
 8003a1c:	f04f 0400 	mov.w	r4, #0
 8003a20:	e9c7 3406 	strd	r3, r4, [r7, #24]
	delta_var2 = next_var2 - current_var2;
 8003a24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	f04f 0400 	mov.w	r4, #0
 8003a2e:	e9c7 3404 	strd	r3, r4, [r7, #16]
	delta_var3 = next_var3 - current_var3;
 8003a32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	f04f 0400 	mov.w	r4, #0
 8003a3c:	e9c7 3402 	strd	r3, r4, [r7, #8]

	if (abs(delta_var0) > 127
 8003a40:	6a3b      	ldr	r3, [r7, #32]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	bfb8      	it	lt
 8003a46:	425b      	neglt	r3, r3
 8003a48:	2b7f      	cmp	r3, #127	; 0x7f
 8003a4a:	dc11      	bgt.n	8003a70 <lowlayer_computeAndWritePulse+0x2e0>
		|| abs(delta_var1) > 127
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	bfb8      	it	lt
 8003a52:	425b      	neglt	r3, r3
 8003a54:	2b7f      	cmp	r3, #127	; 0x7f
 8003a56:	dc0b      	bgt.n	8003a70 <lowlayer_computeAndWritePulse+0x2e0>
		|| abs(delta_var2) > 127
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	bfb8      	it	lt
 8003a5e:	425b      	neglt	r3, r3
 8003a60:	2b7f      	cmp	r3, #127	; 0x7f
 8003a62:	dc05      	bgt.n	8003a70 <lowlayer_computeAndWritePulse+0x2e0>
		|| abs(delta_var3) > 127) {
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	bfb8      	it	lt
 8003a6a:	425b      	neglt	r3, r3
 8003a6c:	2b7f      	cmp	r3, #127	; 0x7f
 8003a6e:	dd01      	ble.n	8003a74 <lowlayer_computeAndWritePulse+0x2e4>
		return FALSE;
 8003a70:	2300      	movs	r3, #0
 8003a72:	e00c      	b.n	8003a8e <lowlayer_computeAndWritePulse+0x2fe>
	} // Can't convert to int8_t , over range

	result = lowlayer_writePulse((int8_t)delta_var0,
 8003a74:	f997 0020 	ldrsb.w	r0, [r7, #32]
 8003a78:	f997 1018 	ldrsb.w	r1, [r7, #24]
 8003a7c:	f997 2010 	ldrsb.w	r2, [r7, #16]
 8003a80:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8003a84:	f000 f82a 	bl	8003adc <lowlayer_writePulse>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	71fb      	strb	r3, [r7, #7]
								 (int8_t)delta_var1,
								 (int8_t)delta_var2,
								 (int8_t)delta_var3);

	return result;
 8003a8c:	79fb      	ldrb	r3, [r7, #7]
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	374c      	adds	r7, #76	; 0x4c
 8003a92:	46bd      	mov	sp, r7
 8003a94:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8003a98:	b004      	add	sp, #16
 8003a9a:	4770      	bx	lr
 8003a9c:	f3af 8000 	nop.w
 8003aa0:	60000000 	.word	0x60000000
 8003aa4:	401921fb 	.word	0x401921fb
 8003aa8:	60000000 	.word	0x60000000
 8003aac:	4064d555 	.word	0x4064d555
 8003ab0:	20000000 	.word	0x20000000
 8003ab4:	3ff709d1 	.word	0x3ff709d1
 8003ab8:	a0000000 	.word	0xa0000000
 8003abc:	40e3bca1 	.word	0x40e3bca1
 8003ac0:	daaaaaab 	.word	0xdaaaaaab
 8003ac4:	3ff7bc89 	.word	0x3ff7bc89
 8003ac8:	00000000 	.word	0x00000000
 8003acc:	40d38800 	.word	0x40d38800
 8003ad0:	80000000 	.word	0x80000000
 8003ad4:	4002d97c 	.word	0x4002d97c
 8003ad8:	40cf4000 	.word	0x40cf4000

08003adc <lowlayer_writePulse>:


uint8_t	lowlayer_writePulse(int8_t pulse0, int8_t pulse1, int8_t pulse2, int8_t pulse3) {
 8003adc:	b590      	push	{r4, r7, lr}
 8003ade:	b087      	sub	sp, #28
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	4604      	mov	r4, r0
 8003ae4:	4608      	mov	r0, r1
 8003ae6:	4611      	mov	r1, r2
 8003ae8:	461a      	mov	r2, r3
 8003aea:	4623      	mov	r3, r4
 8003aec:	71fb      	strb	r3, [r7, #7]
 8003aee:	4603      	mov	r3, r0
 8003af0:	71bb      	strb	r3, [r7, #6]
 8003af2:	460b      	mov	r3, r1
 8003af4:	717b      	strb	r3, [r7, #5]
 8003af6:	4613      	mov	r3, r2
 8003af8:	713b      	strb	r3, [r7, #4]
	uint8_t pulse0_combine, pulse1_combine, pulse2_combine, pulse3_combine;
	uint8_t pulse0_abs, pulse1_abs, pulse2_abs, pulse3_abs;

	// Var 0
	if (pulse0 < 0) {
 8003afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	da06      	bge.n	8003b10 <lowlayer_writePulse+0x34>
		pulse0_abs = -pulse0;
 8003b02:	79fb      	ldrb	r3, [r7, #7]
 8003b04:	425b      	negs	r3, r3
 8003b06:	74fb      	strb	r3, [r7, #19]
		pulse0_combine = -pulse0 | ((!DIR_J0) << 7); // Negative : Clockwise
 8003b08:	79fb      	ldrb	r3, [r7, #7]
 8003b0a:	425b      	negs	r3, r3
 8003b0c:	75fb      	strb	r3, [r7, #23]
 8003b0e:	e006      	b.n	8003b1e <lowlayer_writePulse+0x42>
	} else {
		pulse0_abs = pulse0;
 8003b10:	79fb      	ldrb	r3, [r7, #7]
 8003b12:	74fb      	strb	r3, [r7, #19]
		pulse0_combine = pulse0 | (DIR_J0 << 7); // Positive : Anti-Clockwise
 8003b14:	79fb      	ldrb	r3, [r7, #7]
 8003b16:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003b1a:	b25b      	sxtb	r3, r3
 8003b1c:	75fb      	strb	r3, [r7, #23]
	}
	// Var 1
	if (pulse1 < 0) {
 8003b1e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	da06      	bge.n	8003b34 <lowlayer_writePulse+0x58>
		pulse1_abs = -pulse1;
 8003b26:	79bb      	ldrb	r3, [r7, #6]
 8003b28:	425b      	negs	r3, r3
 8003b2a:	74bb      	strb	r3, [r7, #18]
		pulse1_combine = -pulse1 | ((!DIR_J1) << 7);
 8003b2c:	79bb      	ldrb	r3, [r7, #6]
 8003b2e:	425b      	negs	r3, r3
 8003b30:	75bb      	strb	r3, [r7, #22]
 8003b32:	e006      	b.n	8003b42 <lowlayer_writePulse+0x66>
	} else {
		pulse1_abs = pulse1;
 8003b34:	79bb      	ldrb	r3, [r7, #6]
 8003b36:	74bb      	strb	r3, [r7, #18]
		pulse1_combine = pulse1 | (DIR_J1 << 7);
 8003b38:	79bb      	ldrb	r3, [r7, #6]
 8003b3a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003b3e:	b25b      	sxtb	r3, r3
 8003b40:	75bb      	strb	r3, [r7, #22]
	}
	// Var 2
	if (pulse2 < 0) {
 8003b42:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	da0b      	bge.n	8003b62 <lowlayer_writePulse+0x86>
		pulse2_abs = -pulse2;
 8003b4a:	797b      	ldrb	r3, [r7, #5]
 8003b4c:	425b      	negs	r3, r3
 8003b4e:	747b      	strb	r3, [r7, #17]
		pulse2_combine = -pulse2 | ((!DIR_J2) << 7);
 8003b50:	797b      	ldrb	r3, [r7, #5]
 8003b52:	425b      	negs	r3, r3
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	b25b      	sxtb	r3, r3
 8003b58:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003b5c:	b25b      	sxtb	r3, r3
 8003b5e:	757b      	strb	r3, [r7, #21]
 8003b60:	e003      	b.n	8003b6a <lowlayer_writePulse+0x8e>
	} else {
		pulse2_abs = pulse2;
 8003b62:	797b      	ldrb	r3, [r7, #5]
 8003b64:	747b      	strb	r3, [r7, #17]
		pulse2_combine = pulse2 | (DIR_J2 << 7);
 8003b66:	797b      	ldrb	r3, [r7, #5]
 8003b68:	757b      	strb	r3, [r7, #21]
	}
	// Var 3
	if (pulse3 < 0) {
 8003b6a:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	da06      	bge.n	8003b80 <lowlayer_writePulse+0xa4>
		pulse3_abs = -pulse3;
 8003b72:	793b      	ldrb	r3, [r7, #4]
 8003b74:	425b      	negs	r3, r3
 8003b76:	743b      	strb	r3, [r7, #16]
		pulse3_combine = -pulse3 | ((!DIR_J3) << 7);
 8003b78:	793b      	ldrb	r3, [r7, #4]
 8003b7a:	425b      	negs	r3, r3
 8003b7c:	753b      	strb	r3, [r7, #20]
 8003b7e:	e006      	b.n	8003b8e <lowlayer_writePulse+0xb2>
	} else {
		pulse3_abs = pulse3;
 8003b80:	793b      	ldrb	r3, [r7, #4]
 8003b82:	743b      	strb	r3, [r7, #16]
		pulse3_combine = pulse3 | (DIR_J3 << 7);
 8003b84:	793b      	ldrb	r3, [r7, #4]
 8003b86:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003b8a:	b25b      	sxtb	r3, r3
 8003b8c:	753b      	strb	r3, [r7, #20]
	}

	// Check limit
	if (pulse0_abs > LIM_PULSE_J0
 8003b8e:	7cfb      	ldrb	r3, [r7, #19]
 8003b90:	2b10      	cmp	r3, #16
 8003b92:	d808      	bhi.n	8003ba6 <lowlayer_writePulse+0xca>
		|| pulse1_abs > LIM_PULSE_J1
 8003b94:	7cbb      	ldrb	r3, [r7, #18]
 8003b96:	2b28      	cmp	r3, #40	; 0x28
 8003b98:	d805      	bhi.n	8003ba6 <lowlayer_writePulse+0xca>
		|| pulse2_abs > LIM_PULSE_J2
 8003b9a:	7c7b      	ldrb	r3, [r7, #17]
 8003b9c:	2b21      	cmp	r3, #33	; 0x21
 8003b9e:	d802      	bhi.n	8003ba6 <lowlayer_writePulse+0xca>
		|| pulse3_abs > LIM_PULSE_J3) {
 8003ba0:	7c3b      	ldrb	r3, [r7, #16]
 8003ba2:	2b65      	cmp	r3, #101	; 0x65
 8003ba4:	d901      	bls.n	8003baa <lowlayer_writePulse+0xce>
		return FALSE;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	e04b      	b.n	8003c42 <lowlayer_writePulse+0x166>
//	if (pulse3_abs == 0) {
//		HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_SET); // Disable
//	} else {
//		HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_RESET);
//	}
	HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_RESET);
 8003baa:	2200      	movs	r2, #0
 8003bac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003bb0:	4826      	ldr	r0, [pc, #152]	; (8003c4c <lowlayer_writePulse+0x170>)
 8003bb2:	f005 fe59 	bl	8009868 <HAL_GPIO_WritePin>

	// Write to Module DDA
	FSMC_Write(ADDRESS_DDA_0, (uint32_t)pulse0_combine);
 8003bb6:	7dfb      	ldrb	r3, [r7, #23]
 8003bb8:	4619      	mov	r1, r3
 8003bba:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
 8003bbe:	f7fe feed 	bl	800299c <FSMC_Write>
	FSMC_Write(ADDRESS_DDA_1, (uint32_t)pulse1_combine);
 8003bc2:	7dbb      	ldrb	r3, [r7, #22]
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	4822      	ldr	r0, [pc, #136]	; (8003c50 <lowlayer_writePulse+0x174>)
 8003bc8:	f7fe fee8 	bl	800299c <FSMC_Write>
	FSMC_Write(ADDRESS_DDA_2, (uint32_t)pulse2_combine);
 8003bcc:	7d7b      	ldrb	r3, [r7, #21]
 8003bce:	4619      	mov	r1, r3
 8003bd0:	4820      	ldr	r0, [pc, #128]	; (8003c54 <lowlayer_writePulse+0x178>)
 8003bd2:	f7fe fee3 	bl	800299c <FSMC_Write>
	FSMC_Write(ADDRESS_DDA_3, (uint32_t)pulse3_combine);
 8003bd6:	7d3b      	ldrb	r3, [r7, #20]
 8003bd8:	4619      	mov	r1, r3
 8003bda:	481f      	ldr	r0, [pc, #124]	; (8003c58 <lowlayer_writePulse+0x17c>)
 8003bdc:	f7fe fede 	bl	800299c <FSMC_Write>

	// Trigger
	uint8_t delay = 100;
 8003be0:	2364      	movs	r3, #100	; 0x64
 8003be2:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(PULSE_WRITE_GPIO_Port, PULSE_WRITE_Pin, GPIO_PIN_RESET);
 8003be4:	2200      	movs	r2, #0
 8003be6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003bea:	481c      	ldr	r0, [pc, #112]	; (8003c5c <lowlayer_writePulse+0x180>)
 8003bec:	f005 fe3c 	bl	8009868 <HAL_GPIO_WritePin>
	while (delay--);
 8003bf0:	bf00      	nop
 8003bf2:	7bfb      	ldrb	r3, [r7, #15]
 8003bf4:	1e5a      	subs	r2, r3, #1
 8003bf6:	73fa      	strb	r2, [r7, #15]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1fa      	bne.n	8003bf2 <lowlayer_writePulse+0x116>
	HAL_GPIO_WritePin(PULSE_WRITE_GPIO_Port, PULSE_WRITE_Pin, GPIO_PIN_SET);
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003c02:	4816      	ldr	r0, [pc, #88]	; (8003c5c <lowlayer_writePulse+0x180>)
 8003c04:	f005 fe30 	bl	8009868 <HAL_GPIO_WritePin>

	// Accumulate
	pulse_accumulate[0] += pulse0;
 8003c08:	4b15      	ldr	r3, [pc, #84]	; (8003c60 <lowlayer_writePulse+0x184>)
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c10:	4413      	add	r3, r2
 8003c12:	4a13      	ldr	r2, [pc, #76]	; (8003c60 <lowlayer_writePulse+0x184>)
 8003c14:	6013      	str	r3, [r2, #0]
	pulse_accumulate[1] += pulse1;
 8003c16:	4b12      	ldr	r3, [pc, #72]	; (8003c60 <lowlayer_writePulse+0x184>)
 8003c18:	685a      	ldr	r2, [r3, #4]
 8003c1a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003c1e:	4413      	add	r3, r2
 8003c20:	4a0f      	ldr	r2, [pc, #60]	; (8003c60 <lowlayer_writePulse+0x184>)
 8003c22:	6053      	str	r3, [r2, #4]
	pulse_accumulate[2] += pulse2;
 8003c24:	4b0e      	ldr	r3, [pc, #56]	; (8003c60 <lowlayer_writePulse+0x184>)
 8003c26:	689a      	ldr	r2, [r3, #8]
 8003c28:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	4a0c      	ldr	r2, [pc, #48]	; (8003c60 <lowlayer_writePulse+0x184>)
 8003c30:	6093      	str	r3, [r2, #8]
	pulse_accumulate[3] += pulse3;
 8003c32:	4b0b      	ldr	r3, [pc, #44]	; (8003c60 <lowlayer_writePulse+0x184>)
 8003c34:	68da      	ldr	r2, [r3, #12]
 8003c36:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	4a08      	ldr	r2, [pc, #32]	; (8003c60 <lowlayer_writePulse+0x184>)
 8003c3e:	60d3      	str	r3, [r2, #12]

	return TRUE;
 8003c40:	2301      	movs	r3, #1
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	371c      	adds	r7, #28
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd90      	pop	{r4, r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	40020000 	.word	0x40020000
 8003c50:	60000002 	.word	0x60000002
 8003c54:	60000004 	.word	0x60000004
 8003c58:	60000006 	.word	0x60000006
 8003c5c:	40020c00 	.word	0x40020c00
 8003c60:	20005338 	.word	0x20005338

08003c64 <lowlayer_readLimitSwitch>:
	HAL_GPIO_WritePin(ENCODER_RESET_GPIO_Port, ENCODER_RESET_Pin, GPIO_PIN_SET);
	while (delay--);
	HAL_GPIO_WritePin(ENCODER_RESET_GPIO_Port, ENCODER_RESET_Pin, GPIO_PIN_RESET);
}

uint8_t lowlayer_readLimitSwitch(void) {
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	af00      	add	r7, sp, #0
	uint16_t read_data = FSMC_Read(ADDRESS_LIMIT);
 8003c6a:	4805      	ldr	r0, [pc, #20]	; (8003c80 <lowlayer_readLimitSwitch+0x1c>)
 8003c6c:	f7fe fea5 	bl	80029ba <FSMC_Read>
 8003c70:	4603      	mov	r3, r0
 8003c72:	80fb      	strh	r3, [r7, #6]

	return (uint8_t)read_data;
 8003c74:	88fb      	ldrh	r3, [r7, #6]
 8003c76:	b2db      	uxtb	r3, r3
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3708      	adds	r7, #8
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	60000020 	.word	0x60000020

08003c84 <lowlayer_readCapture>:
		data = 0;
	}
	return data;
}

int32_t lowlayer_readCapture(uint8_t capture_num) {
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	71fb      	strb	r3, [r7, #7]
	int32_t data;
	if (capture_num <= 2) {
 8003c8e:	79fb      	ldrb	r3, [r7, #7]
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d81c      	bhi.n	8003cce <lowlayer_readCapture+0x4a>
		uint16_t low_word = FSMC_Read(ADDRESS_CAP0_LOW + capture_num*4);
 8003c94:	79fb      	ldrb	r3, [r7, #7]
 8003c96:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 8003c9a:	3318      	adds	r3, #24
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f7fe fe8b 	bl	80029ba <FSMC_Read>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	817b      	strh	r3, [r7, #10]
		uint16_t high_word = FSMC_Read(ADDRESS_CAP0_LOW + capture_num*4 + 2);
 8003ca8:	79fb      	ldrb	r3, [r7, #7]
 8003caa:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 8003cae:	3318      	adds	r3, #24
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	3302      	adds	r3, #2
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f7fe fe80 	bl	80029ba <FSMC_Read>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	813b      	strh	r3, [r7, #8]
		data = high_word;
 8003cbe:	893b      	ldrh	r3, [r7, #8]
 8003cc0:	60fb      	str	r3, [r7, #12]
		data = (data << 16) | low_word;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	041a      	lsls	r2, r3, #16
 8003cc6:	897b      	ldrh	r3, [r7, #10]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	60fb      	str	r3, [r7, #12]
 8003ccc:	e001      	b.n	8003cd2 <lowlayer_readCapture+0x4e>
	} else {
		data = 0;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	60fb      	str	r3, [r7, #12]
	}
	return data;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3710      	adds	r7, #16
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <lowlayer_updateCapture>:
	for (uint8_t i = 0; i < 3; i++) {
		position_encoder[i] = lowlayer_readEncoder(i);
	}
}

void	lowlayer_updateCapture(void) {
 8003cdc:	b590      	push	{r4, r7, lr}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 3; i++) {
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	71fb      	strb	r3, [r7, #7]
 8003ce6:	e00b      	b.n	8003d00 <lowlayer_updateCapture+0x24>
			position_capture[i] = lowlayer_readCapture(i);
 8003ce8:	79fc      	ldrb	r4, [r7, #7]
 8003cea:	79fb      	ldrb	r3, [r7, #7]
 8003cec:	4618      	mov	r0, r3
 8003cee:	f7ff ffc9 	bl	8003c84 <lowlayer_readCapture>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	4b06      	ldr	r3, [pc, #24]	; (8003d10 <lowlayer_updateCapture+0x34>)
 8003cf6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	for (uint8_t i = 0; i < 3; i++) {
 8003cfa:	79fb      	ldrb	r3, [r7, #7]
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	71fb      	strb	r3, [r7, #7]
 8003d00:	79fb      	ldrb	r3, [r7, #7]
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d9f0      	bls.n	8003ce8 <lowlayer_updateCapture+0xc>
	}
}
 8003d06:	bf00      	nop
 8003d08:	370c      	adds	r7, #12
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd90      	pop	{r4, r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	2000535c 	.word	0x2000535c

08003d14 <lowlayer_updateLimit>:

void	lowlayer_updateLimit(void) {
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
	uint8_t limit_data = lowlayer_readLimitSwitch();
 8003d1a:	f7ff ffa3 	bl	8003c64 <lowlayer_readLimitSwitch>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	71bb      	strb	r3, [r7, #6]
	for (uint8_t i = 0; i < 4; i++) {
 8003d22:	2300      	movs	r3, #0
 8003d24:	71fb      	strb	r3, [r7, #7]
 8003d26:	e00d      	b.n	8003d44 <lowlayer_updateLimit+0x30>
			limit_switch[i] = (limit_data & (0x01 << i)) ? 1 : 0;
 8003d28:	79ba      	ldrb	r2, [r7, #6]
 8003d2a:	79fb      	ldrb	r3, [r7, #7]
 8003d2c:	fa42 f303 	asr.w	r3, r2, r3
 8003d30:	b2da      	uxtb	r2, r3
 8003d32:	79fb      	ldrb	r3, [r7, #7]
 8003d34:	f002 0201 	and.w	r2, r2, #1
 8003d38:	b2d1      	uxtb	r1, r2
 8003d3a:	4a06      	ldr	r2, [pc, #24]	; (8003d54 <lowlayer_updateLimit+0x40>)
 8003d3c:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 4; i++) {
 8003d3e:	79fb      	ldrb	r3, [r7, #7]
 8003d40:	3301      	adds	r3, #1
 8003d42:	71fb      	strb	r3, [r7, #7]
 8003d44:	79fb      	ldrb	r3, [r7, #7]
 8003d46:	2b03      	cmp	r3, #3
 8003d48:	d9ee      	bls.n	8003d28 <lowlayer_updateLimit+0x14>
	}
}
 8003d4a:	bf00      	nop
 8003d4c:	3708      	adds	r7, #8
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	20005358 	.word	0x20005358

08003d58 <lowlayer_setOutput>:

void	lowlayer_setOutput(uint8_t value) {
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	4603      	mov	r3, r0
 8003d60:	71fb      	strb	r3, [r7, #7]
	if (value > 0) {
 8003d62:	79fb      	ldrb	r3, [r7, #7]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d006      	beq.n	8003d76 <lowlayer_setOutput+0x1e>
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_SET);
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003d6e:	4807      	ldr	r0, [pc, #28]	; (8003d8c <lowlayer_setOutput+0x34>)
 8003d70:	f005 fd7a 	bl	8009868 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_RESET);
	}
}
 8003d74:	e005      	b.n	8003d82 <lowlayer_setOutput+0x2a>
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_RESET);
 8003d76:	2200      	movs	r2, #0
 8003d78:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003d7c:	4803      	ldr	r0, [pc, #12]	; (8003d8c <lowlayer_setOutput+0x34>)
 8003d7e:	f005 fd73 	bl	8009868 <HAL_GPIO_WritePin>
}
 8003d82:	bf00      	nop
 8003d84:	3708      	adds	r7, #8
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	40020400 	.word	0x40020400

08003d90 <lowlayer_CPLD_Init>:

void	lowlayer_CPLD_Init(void) {
 8003d90:	b580      	push	{r7, lr}
 8003d92:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(STOP_GPIO_Port, STOP_Pin, GPIO_PIN_SET); // STOP low active
 8003d94:	2201      	movs	r2, #1
 8003d96:	2140      	movs	r1, #64	; 0x40
 8003d98:	4802      	ldr	r0, [pc, #8]	; (8003da4 <lowlayer_CPLD_Init+0x14>)
 8003d9a:	f005 fd65 	bl	8009868 <HAL_GPIO_WritePin>
}
 8003d9e:	bf00      	nop
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	40020c00 	.word	0x40020c00

08003da8 <lowlayer_stepMotorInit>:

void	lowlayer_stepMotorInit(void) {
 8003da8:	b580      	push	{r7, lr}
 8003daa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_SET); // ENABLE low active
 8003dac:	2201      	movs	r2, #1
 8003dae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003db2:	4808      	ldr	r0, [pc, #32]	; (8003dd4 <lowlayer_stepMotorInit+0x2c>)
 8003db4:	f005 fd58 	bl	8009868 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEP_RESET_GPIO_Port, STEP_RESET_Pin, GPIO_PIN_SET); // RESET low active
 8003db8:	2201      	movs	r2, #1
 8003dba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003dbe:	4805      	ldr	r0, [pc, #20]	; (8003dd4 <lowlayer_stepMotorInit+0x2c>)
 8003dc0:	f005 fd52 	bl	8009868 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEP_SLEEP_GPIO_Port, STEP_SLEEP_Pin, GPIO_PIN_SET); // SLEEP low active
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003dca:	4802      	ldr	r0, [pc, #8]	; (8003dd4 <lowlayer_stepMotorInit+0x2c>)
 8003dcc:	f005 fd4c 	bl	8009868 <HAL_GPIO_WritePin>
}
 8003dd0:	bf00      	nop
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	40020000 	.word	0x40020000

08003dd8 <scaraStartup>:
											 "Over Accelerate",
											 "Wrong Joint Num",
											 "Wrong Coordinate"
											};

void				scaraStartup(void) {
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	af00      	add	r7, sp, #0
	lowlayer_CPLD_Init();
 8003ddc:	f7ff ffd8 	bl	8003d90 <lowlayer_CPLD_Init>
	lowlayer_stepMotorInit();
 8003de0:	f7ff ffe2 	bl	8003da8 <lowlayer_stepMotorInit>
	lowlayer_writePulse(0, 0, 0, 0);
 8003de4:	2300      	movs	r3, #0
 8003de6:	2200      	movs	r2, #0
 8003de8:	2100      	movs	r1, #0
 8003dea:	2000      	movs	r0, #0
 8003dec:	f7ff fe76 	bl	8003adc <lowlayer_writePulse>
}
 8003df0:	bf00      	nop
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	0000      	movs	r0, r0
	...

08003df8 <scaraInitDuty>:

/* Compute duty corresponding to new command */
SCARA_StatusTypeDef	scaraInitDuty		(DUTY_Command_TypeDef command) {
 8003df8:	b084      	sub	sp, #16
 8003dfa:	b5b0      	push	{r4, r5, r7, lr}
 8003dfc:	f5ad 7d12 	sub.w	sp, sp, #584	; 0x248
 8003e00:	af4e      	add	r7, sp, #312	; 0x138
 8003e02:	f507 7c90 	add.w	ip, r7, #288	; 0x120
 8003e06:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	SCARA_StatusTypeDef status, status1, status2;

	/*----------- Space Task ------------*/
	if 			(DUTY_SPACE_TASK == command.space_type) {
 8003e0a:	f897 3129 	ldrb.w	r3, [r7, #297]	; 0x129
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	f040 834c 	bne.w	80044ac <scaraInitDuty+0x6b4>
		double total_s, angle_s;
		int8_t dir_angle;
		SCARA_PositionTypeDef	target_point;
		// Change Degree --> Radian
		command.target_point.roll = command.target_point.roll*PI/180.0;
 8003e14:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003e18:	a3ab      	add	r3, pc, #684	; (adr r3, 80040c8 <scaraInitDuty+0x2d0>)
 8003e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e1e:	f7fc fbfb 	bl	8000618 <__aeabi_dmul>
 8003e22:	4602      	mov	r2, r0
 8003e24:	460b      	mov	r3, r1
 8003e26:	4610      	mov	r0, r2
 8003e28:	4619      	mov	r1, r3
 8003e2a:	f04f 0200 	mov.w	r2, #0
 8003e2e:	4ba8      	ldr	r3, [pc, #672]	; (80040d0 <scaraInitDuty+0x2d8>)
 8003e30:	f7fc fd1c 	bl	800086c <__aeabi_ddiv>
 8003e34:	4602      	mov	r2, r0
 8003e36:	460b      	mov	r3, r1
 8003e38:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
		// Coordinate
		if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8003e3c:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d130      	bne.n	8003ea6 <scaraInitDuty+0xae>
			target_point.x 		= positionCurrent.x + command.target_point.x;
 8003e44:	4ba3      	ldr	r3, [pc, #652]	; (80040d4 <scaraInitDuty+0x2dc>)
 8003e46:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8003e4a:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8003e4e:	f7fc fa2d 	bl	80002ac <__adddf3>
 8003e52:	4602      	mov	r2, r0
 8003e54:	460b      	mov	r3, r1
 8003e56:	4639      	mov	r1, r7
 8003e58:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
			target_point.y 		= positionCurrent.y + command.target_point.y;
 8003e5c:	4b9d      	ldr	r3, [pc, #628]	; (80040d4 <scaraInitDuty+0x2dc>)
 8003e5e:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8003e62:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8003e66:	f7fc fa21 	bl	80002ac <__adddf3>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	4639      	mov	r1, r7
 8003e70:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
			target_point.z 		= positionCurrent.z + command.target_point.z;
 8003e74:	4b97      	ldr	r3, [pc, #604]	; (80040d4 <scaraInitDuty+0x2dc>)
 8003e76:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8003e7a:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 8003e7e:	f7fc fa15 	bl	80002ac <__adddf3>
 8003e82:	4602      	mov	r2, r0
 8003e84:	460b      	mov	r3, r1
 8003e86:	4639      	mov	r1, r7
 8003e88:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
			target_point.roll	= positionCurrent.roll + command.target_point.roll;
 8003e8c:	4b91      	ldr	r3, [pc, #580]	; (80040d4 <scaraInitDuty+0x2dc>)
 8003e8e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8003e92:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8003e96:	f7fc fa09 	bl	80002ac <__adddf3>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	4639      	mov	r1, r7
 8003ea0:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 8003ea4:	e01b      	b.n	8003ede <scaraInitDuty+0xe6>
		} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8003ea6:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d114      	bne.n	8003ed8 <scaraInitDuty+0xe0>
			target_point.x 		= command.target_point.x;
 8003eae:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8003eb2:	4639      	mov	r1, r7
 8003eb4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
			target_point.y 		= command.target_point.y;
 8003eb8:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8003ebc:	4639      	mov	r1, r7
 8003ebe:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
			target_point.z 		= command.target_point.z;
 8003ec2:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 8003ec6:	4639      	mov	r1, r7
 8003ec8:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
			target_point.roll	= command.target_point.roll;
 8003ecc:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8003ed0:	4639      	mov	r1, r7
 8003ed2:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 8003ed6:	e002      	b.n	8003ede <scaraInitDuty+0xe6>
		} else {
			return SCARA_STATUS_ERROR_COORDINATE;
 8003ed8:	230c      	movs	r3, #12
 8003eda:	f001 ba62 	b.w	80053a2 <scaraInitDuty+0x15aa>
		}

		angle_s = target_point.roll - positionCurrent.roll;
 8003ede:	463b      	mov	r3, r7
 8003ee0:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8003ee4:	4b7b      	ldr	r3, [pc, #492]	; (80040d4 <scaraInitDuty+0x2dc>)
 8003ee6:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8003eea:	f7fc f9dd 	bl	80002a8 <__aeabi_dsub>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
		dir_angle = 1;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
		if ( angle_s < 0) {
 8003efc:	f04f 0200 	mov.w	r2, #0
 8003f00:	f04f 0300 	mov.w	r3, #0
 8003f04:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8003f08:	f7fc fdf8 	bl	8000afc <__aeabi_dcmplt>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d002      	beq.n	8003f18 <scaraInitDuty+0x120>
			dir_angle = -1;
 8003f12:	23ff      	movs	r3, #255	; 0xff
 8003f14:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
		}
		if ( fabs(angle_s) > PI) {
 8003f18:	f8d7 40f8 	ldr.w	r4, [r7, #248]	; 0xf8
 8003f1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f20:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8003f24:	a368      	add	r3, pc, #416	; (adr r3, 80040c8 <scaraInitDuty+0x2d0>)
 8003f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f2a:	4620      	mov	r0, r4
 8003f2c:	4629      	mov	r1, r5
 8003f2e:	f7fc fe03 	bl	8000b38 <__aeabi_dcmpgt>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d021      	beq.n	8003f7c <scaraInitDuty+0x184>
			dir_angle = -dir_angle;
 8003f38:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 8003f3c:	425b      	negs	r3, r3
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
			angle_s = (2*PI - fabsf(angle_s))*dir_angle;
 8003f44:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8003f48:	f7fc fe5e 	bl	8000c08 <__aeabi_d2f>
 8003f4c:	ee07 0a90 	vmov	s15, r0
 8003f50:	eef0 7ae7 	vabs.f32	s15, s15
 8003f54:	ed9f 7a60 	vldr	s14, [pc, #384]	; 80040d8 <scaraInitDuty+0x2e0>
 8003f58:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003f5c:	f997 30f7 	ldrsb.w	r3, [r7, #247]	; 0xf7
 8003f60:	ee07 3a90 	vmov	s15, r3
 8003f64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f6c:	ee17 0a90 	vmov	r0, s15
 8003f70:	f7fc fafa 	bl	8000568 <__aeabi_f2d>
 8003f74:	4603      	mov	r3, r0
 8003f76:	460c      	mov	r4, r1
 8003f78:	e9c7 343e 	strd	r3, r4, [r7, #248]	; 0xf8
		}


		myDUTY.space_type = DUTY_SPACE_TASK;// Change type
 8003f7c:	4b57      	ldr	r3, [pc, #348]	; (80040dc <scaraInitDuty+0x2e4>)
 8003f7e:	2200      	movs	r2, #0
 8003f80:	701a      	strb	r2, [r3, #0]
		myDUTY.task.roll_start = positionCurrent.roll;
 8003f82:	4b54      	ldr	r3, [pc, #336]	; (80040d4 <scaraInitDuty+0x2dc>)
 8003f84:	e9d3 3410 	ldrd	r3, r4, [r3, #64]	; 0x40
 8003f88:	4a54      	ldr	r2, [pc, #336]	; (80040dc <scaraInitDuty+0x2e4>)
 8003f8a:	e9c2 34f0 	strd	r3, r4, [r2, #960]	; 0x3c0
		// 1-Path Planning
			// Straight Line
		if ( DUTY_PATH_LINE == command.path_type ) {
 8003f8e:	f897 312a 	ldrb.w	r3, [r7, #298]	; 0x12a
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d11f      	bne.n	8003fd6 <scaraInitDuty+0x1de>
			myDUTY.task.path.path_type = DUTY_PATH_LINE;
 8003f96:	4b51      	ldr	r3, [pc, #324]	; (80040dc <scaraInitDuty+0x2e4>)
 8003f98:	2200      	movs	r2, #0
 8003f9a:	721a      	strb	r2, [r3, #8]
			status = scaraInitLine(&(myDUTY.task.path.line), positionCurrent, target_point);
 8003f9c:	4c4d      	ldr	r4, [pc, #308]	; (80040d4 <scaraInitDuty+0x2dc>)
 8003f9e:	463b      	mov	r3, r7
 8003fa0:	a818      	add	r0, sp, #96	; 0x60
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	2368      	movs	r3, #104	; 0x68
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	f00f fa9a 	bl	80134e0 <memcpy>
 8003fac:	4668      	mov	r0, sp
 8003fae:	f104 0308 	add.w	r3, r4, #8
 8003fb2:	2260      	movs	r2, #96	; 0x60
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	f00f fa93 	bl	80134e0 <memcpy>
 8003fba:	e894 000c 	ldmia.w	r4, {r2, r3}
 8003fbe:	4848      	ldr	r0, [pc, #288]	; (80040e0 <scaraInitDuty+0x2e8>)
 8003fc0:	f001 fa00 	bl	80053c4 <scaraInitLine>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			total_s = myDUTY.task.path.line.total_s;
 8003fca:	4b44      	ldr	r3, [pc, #272]	; (80040dc <scaraInitDuty+0x2e4>)
 8003fcc:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 8003fd0:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
 8003fd4:	e070      	b.n	80040b8 <scaraInitDuty+0x2c0>
			// Circular
		} else if ( DUTY_PATH_CIRCLE == command.path_type ) {
 8003fd6:	f897 312a 	ldrb.w	r3, [r7, #298]	; 0x12a
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d169      	bne.n	80040b2 <scaraInitDuty+0x2ba>
			SCARA_PositionTypeDef	center_point;
			if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8003fde:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d127      	bne.n	8004036 <scaraInitDuty+0x23e>
				center_point.x 		= positionCurrent.x + command.sub_point.x;
 8003fe6:	4b3b      	ldr	r3, [pc, #236]	; (80040d4 <scaraInitDuty+0x2dc>)
 8003fe8:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8003fec:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	4623      	mov	r3, r4
 8003ff4:	f7fc f95a 	bl	80002ac <__adddf3>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	460c      	mov	r4, r1
 8003ffc:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
				center_point.y 		= positionCurrent.y + command.sub_point.y;
 8004000:	4b34      	ldr	r3, [pc, #208]	; (80040d4 <scaraInitDuty+0x2dc>)
 8004002:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8004006:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 800400a:	461a      	mov	r2, r3
 800400c:	4623      	mov	r3, r4
 800400e:	f7fc f94d 	bl	80002ac <__adddf3>
 8004012:	4603      	mov	r3, r0
 8004014:	460c      	mov	r4, r1
 8004016:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
				center_point.z 		= positionCurrent.z + command.sub_point.z;
 800401a:	4b2e      	ldr	r3, [pc, #184]	; (80040d4 <scaraInitDuty+0x2dc>)
 800401c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004020:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8004024:	461a      	mov	r2, r3
 8004026:	4623      	mov	r3, r4
 8004028:	f7fc f940 	bl	80002ac <__adddf3>
 800402c:	4603      	mov	r3, r0
 800402e:	460c      	mov	r4, r1
 8004030:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 8004034:	e013      	b.n	800405e <scaraInitDuty+0x266>
			} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8004036:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 800403a:	2b00      	cmp	r3, #0
 800403c:	d10c      	bne.n	8004058 <scaraInitDuty+0x260>
				center_point.x 		= command.target_point.x;
 800403e:	e9d7 345c 	ldrd	r3, r4, [r7, #368]	; 0x170
 8004042:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
				center_point.y 		= command.target_point.y;
 8004046:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 800404a:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
				center_point.z 		= command.target_point.z;
 800404e:	e9d7 3460 	ldrd	r3, r4, [r7, #384]	; 0x180
 8004052:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 8004056:	e002      	b.n	800405e <scaraInitDuty+0x266>
			} else {
				return SCARA_STATUS_ERROR_COORDINATE;
 8004058:	230c      	movs	r3, #12
			return SCARA_STATUS_ERROR_COORDINATE;
 800405a:	f001 b9a2 	b.w	80053a2 <scaraInitDuty+0x15aa>
			}

			myDUTY.task.path.path_type = DUTY_PATH_CIRCLE;
 800405e:	4b1f      	ldr	r3, [pc, #124]	; (80040dc <scaraInitDuty+0x2e4>)
 8004060:	2201      	movs	r2, #1
 8004062:	721a      	strb	r2, [r3, #8]
			status = scaraInitCircle(&(myDUTY.task.path.circle),
 8004064:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004068:	4c1a      	ldr	r4, [pc, #104]	; (80040d4 <scaraInitDuty+0x2dc>)
 800406a:	934c      	str	r3, [sp, #304]	; 0x130
 800406c:	a832      	add	r0, sp, #200	; 0xc8
 800406e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004072:	2268      	movs	r2, #104	; 0x68
 8004074:	4619      	mov	r1, r3
 8004076:	f00f fa33 	bl	80134e0 <memcpy>
 800407a:	463b      	mov	r3, r7
 800407c:	a818      	add	r0, sp, #96	; 0x60
 800407e:	4619      	mov	r1, r3
 8004080:	2368      	movs	r3, #104	; 0x68
 8004082:	461a      	mov	r2, r3
 8004084:	f00f fa2c 	bl	80134e0 <memcpy>
 8004088:	4668      	mov	r0, sp
 800408a:	f104 0308 	add.w	r3, r4, #8
 800408e:	2260      	movs	r2, #96	; 0x60
 8004090:	4619      	mov	r1, r3
 8004092:	f00f fa25 	bl	80134e0 <memcpy>
 8004096:	e894 000c 	ldmia.w	r4, {r2, r3}
 800409a:	4812      	ldr	r0, [pc, #72]	; (80040e4 <scaraInitDuty+0x2ec>)
 800409c:	f001 fa58 	bl	8005550 <scaraInitCircle>
 80040a0:	4603      	mov	r3, r0
 80040a2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
										positionCurrent,
										target_point,
										center_point,
										command.sub_para_int );
			total_s = myDUTY.task.path.circle.total_s;
 80040a6:	4b0d      	ldr	r3, [pc, #52]	; (80040dc <scaraInitDuty+0x2e4>)
 80040a8:	e9d3 343a 	ldrd	r3, r4, [r3, #232]	; 0xe8
 80040ac:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
 80040b0:	e002      	b.n	80040b8 <scaraInitDuty+0x2c0>

		} else {
			return SCARA_STATUS_ERROR_TASK;
 80040b2:	2303      	movs	r3, #3
 80040b4:	f001 b975 	b.w	80053a2 <scaraInitDuty+0x15aa>
		}

		if ( SCARA_STATUS_OK != status) {
 80040b8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d013      	beq.n	80040e8 <scaraInitDuty+0x2f0>
			return status;
 80040c0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80040c4:	f001 b96d 	b.w	80053a2 <scaraInitDuty+0x15aa>
 80040c8:	60000000 	.word	0x60000000
 80040cc:	400921fb 	.word	0x400921fb
 80040d0:	40668000 	.word	0x40668000
 80040d4:	20005d40 	.word	0x20005d40
 80040d8:	40c90fdb 	.word	0x40c90fdb
 80040dc:	20005388 	.word	0x20005388
 80040e0:	20005398 	.word	0x20005398
 80040e4:	20005408 	.word	0x20005408
		}

		// 2-Trajectory Planning
			// LSPB
		if ( DUTY_TRAJECTORY_LSPB == command.trajec_type ) {
 80040e8:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	f040 80dd 	bne.w	80042ac <scaraInitDuty+0x4b4>

			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 80040f2:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d145      	bne.n	8004186 <scaraInitDuty+0x38e>
				myDUTY.task.trajectory_3d.lspb.Tf = command.time_total;
 80040fa:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 80040fe:	4ac8      	ldr	r2, [pc, #800]	; (8004420 <scaraInitDuty+0x628>)
 8004100:	e9c2 345a 	strd	r3, r4, [r2, #360]	; 0x168
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LSPB;
 8004104:	4bc6      	ldr	r3, [pc, #792]	; (8004420 <scaraInitDuty+0x628>)
 8004106:	2200      	movs	r2, #0
 8004108:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitLSPB(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 800410c:	ed97 7b86 	vldr	d7, [r7, #536]	; 0x218
 8004110:	ed97 6b88 	vldr	d6, [r7, #544]	; 0x220
 8004114:	eeb0 2a46 	vmov.f32	s4, s12
 8004118:	eef0 2a66 	vmov.f32	s5, s13
 800411c:	eeb0 1a47 	vmov.f32	s2, s14
 8004120:	eef0 1a67 	vmov.f32	s3, s15
 8004124:	2201      	movs	r2, #1
 8004126:	ed97 0b40 	vldr	d0, [r7, #256]	; 0x100
 800412a:	2104      	movs	r1, #4
 800412c:	48bd      	ldr	r0, [pc, #756]	; (8004424 <scaraInitDuty+0x62c>)
 800412e:	f001 fb87 	bl	8005840 <scaraInitLSPB>
 8004132:	4603      	mov	r3, r0
 8004134:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
						 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);

				myDUTY.task.trajectory_roll.lspb.Tf = command.time_total;
 8004138:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 800413c:	4ab8      	ldr	r2, [pc, #736]	; (8004420 <scaraInitDuty+0x628>)
 800413e:	e9c2 34b0 	strd	r3, r4, [r2, #704]	; 0x2c0
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LSPB;
 8004142:	4bb7      	ldr	r3, [pc, #732]	; (8004420 <scaraInitDuty+0x628>)
 8004144:	2200      	movs	r2, #0
 8004146:	f883 2268 	strb.w	r2, [r3, #616]	; 0x268
				status2 = scaraInitLSPB(&(myDUTY.task.trajectory_roll.lspb), TRAJECTORY_ROLL,
 800414a:	ed97 7b86 	vldr	d7, [r7, #536]	; 0x218
 800414e:	ed97 6b88 	vldr	d6, [r7, #544]	; 0x220
 8004152:	eeb0 2a46 	vmov.f32	s4, s12
 8004156:	eef0 2a66 	vmov.f32	s5, s13
 800415a:	eeb0 1a47 	vmov.f32	s2, s14
 800415e:	eef0 1a67 	vmov.f32	s3, s15
 8004162:	2201      	movs	r2, #1
 8004164:	ed97 0b3e 	vldr	d0, [r7, #248]	; 0xf8
 8004168:	2105      	movs	r1, #5
 800416a:	48af      	ldr	r0, [pc, #700]	; (8004428 <scaraInitDuty+0x630>)
 800416c:	f001 fb68 	bl	8005840 <scaraInitLSPB>
 8004170:	4603      	mov	r3, r0
 8004172:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
						 angle_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
				myDUTY.time_total = command.time_total;
 8004176:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 800417a:	4aa9      	ldr	r2, [pc, #676]	; (8004420 <scaraInitDuty+0x628>)
 800417c:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8004180:	e9c2 3400 	strd	r3, r4, [r2]
 8004184:	e181      	b.n	800448a <scaraInitDuty+0x692>

			} else if (DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8004186:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800418a:	2b00      	cmp	r3, #0
 800418c:	f040 808b 	bne.w	80042a6 <scaraInitDuty+0x4ae>
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LSPB;
 8004190:	4ba3      	ldr	r3, [pc, #652]	; (8004420 <scaraInitDuty+0x628>)
 8004192:	2200      	movs	r2, #0
 8004194:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitLSPB(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 8004198:	ed97 7b86 	vldr	d7, [r7, #536]	; 0x218
 800419c:	ed97 6b88 	vldr	d6, [r7, #544]	; 0x220
 80041a0:	eeb0 2a46 	vmov.f32	s4, s12
 80041a4:	eef0 2a66 	vmov.f32	s5, s13
 80041a8:	eeb0 1a47 	vmov.f32	s2, s14
 80041ac:	eef0 1a67 	vmov.f32	s3, s15
 80041b0:	2200      	movs	r2, #0
 80041b2:	ed97 0b40 	vldr	d0, [r7, #256]	; 0x100
 80041b6:	2104      	movs	r1, #4
 80041b8:	489a      	ldr	r0, [pc, #616]	; (8004424 <scaraInitDuty+0x62c>)
 80041ba:	f001 fb41 	bl	8005840 <scaraInitLSPB>
 80041be:	4603      	mov	r3, r0
 80041c0:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
						 total_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LSPB;
 80041c4:	4b96      	ldr	r3, [pc, #600]	; (8004420 <scaraInitDuty+0x628>)
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 2268 	strb.w	r2, [r3, #616]	; 0x268
				status2 = scaraInitLSPB(&(myDUTY.task.trajectory_roll.lspb), TRAJECTORY_ROLL,
 80041cc:	ed97 7b86 	vldr	d7, [r7, #536]	; 0x218
 80041d0:	ed97 6b88 	vldr	d6, [r7, #544]	; 0x220
 80041d4:	eeb0 2a46 	vmov.f32	s4, s12
 80041d8:	eef0 2a66 	vmov.f32	s5, s13
 80041dc:	eeb0 1a47 	vmov.f32	s2, s14
 80041e0:	eef0 1a67 	vmov.f32	s3, s15
 80041e4:	2200      	movs	r2, #0
 80041e6:	ed97 0b3e 	vldr	d0, [r7, #248]	; 0xf8
 80041ea:	2105      	movs	r1, #5
 80041ec:	488e      	ldr	r0, [pc, #568]	; (8004428 <scaraInitDuty+0x630>)
 80041ee:	f001 fb27 	bl	8005840 <scaraInitLSPB>
 80041f2:	4603      	mov	r3, r0
 80041f4:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
						 angle_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				// Synchronous time end
				if(myDUTY.task.trajectory_3d.lspb.Tf > myDUTY.task.trajectory_roll.lspb.Tf) {
 80041f8:	4b89      	ldr	r3, [pc, #548]	; (8004420 <scaraInitDuty+0x628>)
 80041fa:	e9d3 015a 	ldrd	r0, r1, [r3, #360]	; 0x168
 80041fe:	4b88      	ldr	r3, [pc, #544]	; (8004420 <scaraInitDuty+0x628>)
 8004200:	e9d3 34b0 	ldrd	r3, r4, [r3, #704]	; 0x2c0
 8004204:	461a      	mov	r2, r3
 8004206:	4623      	mov	r3, r4
 8004208:	f7fc fc96 	bl	8000b38 <__aeabi_dcmpgt>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d024      	beq.n	800425c <scaraInitDuty+0x464>
					myDUTY.task.trajectory_roll.lspb.Tf = myDUTY.task.trajectory_3d.lspb.Tf;
 8004212:	4b83      	ldr	r3, [pc, #524]	; (8004420 <scaraInitDuty+0x628>)
 8004214:	e9d3 345a 	ldrd	r3, r4, [r3, #360]	; 0x168
 8004218:	4a81      	ldr	r2, [pc, #516]	; (8004420 <scaraInitDuty+0x628>)
 800421a:	e9c2 34b0 	strd	r3, r4, [r2, #704]	; 0x2c0
					status2 = scaraInitLSPB(&(myDUTY.task.trajectory_roll.lspb), TRAJECTORY_ROLL,
 800421e:	ed97 7b86 	vldr	d7, [r7, #536]	; 0x218
 8004222:	ed97 6b88 	vldr	d6, [r7, #544]	; 0x220
 8004226:	eeb0 2a46 	vmov.f32	s4, s12
 800422a:	eef0 2a66 	vmov.f32	s5, s13
 800422e:	eeb0 1a47 	vmov.f32	s2, s14
 8004232:	eef0 1a67 	vmov.f32	s3, s15
 8004236:	2201      	movs	r2, #1
 8004238:	ed97 0b3e 	vldr	d0, [r7, #248]	; 0xf8
 800423c:	2105      	movs	r1, #5
 800423e:	487a      	ldr	r0, [pc, #488]	; (8004428 <scaraInitDuty+0x630>)
 8004240:	f001 fafe 	bl	8005840 <scaraInitLSPB>
 8004244:	4603      	mov	r3, r0
 8004246:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
							 angle_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_3d.lspb.Tf;
 800424a:	4b75      	ldr	r3, [pc, #468]	; (8004420 <scaraInitDuty+0x628>)
 800424c:	e9d3 345a 	ldrd	r3, r4, [r3, #360]	; 0x168
 8004250:	4a73      	ldr	r2, [pc, #460]	; (8004420 <scaraInitDuty+0x628>)
 8004252:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8004256:	e9c2 3400 	strd	r3, r4, [r2]
 800425a:	e116      	b.n	800448a <scaraInitDuty+0x692>
				} else {
					myDUTY.task.trajectory_3d.lspb.Tf = myDUTY.task.trajectory_roll.lspb.Tf;
 800425c:	4b70      	ldr	r3, [pc, #448]	; (8004420 <scaraInitDuty+0x628>)
 800425e:	e9d3 34b0 	ldrd	r3, r4, [r3, #704]	; 0x2c0
 8004262:	4a6f      	ldr	r2, [pc, #444]	; (8004420 <scaraInitDuty+0x628>)
 8004264:	e9c2 345a 	strd	r3, r4, [r2, #360]	; 0x168
					status1 = scaraInitLSPB(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 8004268:	ed97 7b86 	vldr	d7, [r7, #536]	; 0x218
 800426c:	ed97 6b88 	vldr	d6, [r7, #544]	; 0x220
 8004270:	eeb0 2a46 	vmov.f32	s4, s12
 8004274:	eef0 2a66 	vmov.f32	s5, s13
 8004278:	eeb0 1a47 	vmov.f32	s2, s14
 800427c:	eef0 1a67 	vmov.f32	s3, s15
 8004280:	2201      	movs	r2, #1
 8004282:	ed97 0b40 	vldr	d0, [r7, #256]	; 0x100
 8004286:	2104      	movs	r1, #4
 8004288:	4866      	ldr	r0, [pc, #408]	; (8004424 <scaraInitDuty+0x62c>)
 800428a:	f001 fad9 	bl	8005840 <scaraInitLSPB>
 800428e:	4603      	mov	r3, r0
 8004290:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
							 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_roll.lspb.Tf;
 8004294:	4b62      	ldr	r3, [pc, #392]	; (8004420 <scaraInitDuty+0x628>)
 8004296:	e9d3 34b0 	ldrd	r3, r4, [r3, #704]	; 0x2c0
 800429a:	4a61      	ldr	r2, [pc, #388]	; (8004420 <scaraInitDuty+0x628>)
 800429c:	f602 1248 	addw	r2, r2, #2376	; 0x948
 80042a0:	e9c2 3400 	strd	r3, r4, [r2]
 80042a4:	e0f1      	b.n	800448a <scaraInitDuty+0x692>
				}
			} else {
				return SCARA_STATUS_ERROR_MODE_INIT ;
 80042a6:	2308      	movs	r3, #8
 80042a8:	f001 b87b 	b.w	80053a2 <scaraInitDuty+0x15aa>
			}
			// SCURVE
		} else if 	( DUTY_TRAJECTORY_SCURVE == command.trajec_type ){
 80042ac:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	f040 80e7 	bne.w	8004484 <scaraInitDuty+0x68c>

			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 80042b6:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d145      	bne.n	800434a <scaraInitDuty+0x552>
				myDUTY.task.trajectory_3d.scurve.Tf = command.time_total;
 80042be:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 80042c2:	4a57      	ldr	r2, [pc, #348]	; (8004420 <scaraInitDuty+0x628>)
 80042c4:	e9c2 347e 	strd	r3, r4, [r2, #504]	; 0x1f8
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 80042c8:	4b55      	ldr	r3, [pc, #340]	; (8004420 <scaraInitDuty+0x628>)
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitScurve(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 80042d0:	ed97 7b86 	vldr	d7, [r7, #536]	; 0x218
 80042d4:	ed97 6b88 	vldr	d6, [r7, #544]	; 0x220
 80042d8:	eeb0 2a46 	vmov.f32	s4, s12
 80042dc:	eef0 2a66 	vmov.f32	s5, s13
 80042e0:	eeb0 1a47 	vmov.f32	s2, s14
 80042e4:	eef0 1a67 	vmov.f32	s3, s15
 80042e8:	2201      	movs	r2, #1
 80042ea:	ed97 0b40 	vldr	d0, [r7, #256]	; 0x100
 80042ee:	2104      	movs	r1, #4
 80042f0:	484e      	ldr	r0, [pc, #312]	; (800442c <scaraInitDuty+0x634>)
 80042f2:	f001 fea5 	bl	8006040 <scaraInitScurve>
 80042f6:	4603      	mov	r3, r0
 80042f8:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
						 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);

				myDUTY.task.trajectory_roll.scurve.Tf = command.time_total;
 80042fc:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8004300:	4a47      	ldr	r2, [pc, #284]	; (8004420 <scaraInitDuty+0x628>)
 8004302:	e9c2 34d4 	strd	r3, r4, [r2, #848]	; 0x350
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8004306:	4b46      	ldr	r3, [pc, #280]	; (8004420 <scaraInitDuty+0x628>)
 8004308:	2201      	movs	r2, #1
 800430a:	f883 2268 	strb.w	r2, [r3, #616]	; 0x268
				status2 = scaraInitScurve(&(myDUTY.task.trajectory_roll.scurve), TRAJECTORY_ROLL,
 800430e:	ed97 7b86 	vldr	d7, [r7, #536]	; 0x218
 8004312:	ed97 6b88 	vldr	d6, [r7, #544]	; 0x220
 8004316:	eeb0 2a46 	vmov.f32	s4, s12
 800431a:	eef0 2a66 	vmov.f32	s5, s13
 800431e:	eeb0 1a47 	vmov.f32	s2, s14
 8004322:	eef0 1a67 	vmov.f32	s3, s15
 8004326:	2201      	movs	r2, #1
 8004328:	ed97 0b3e 	vldr	d0, [r7, #248]	; 0xf8
 800432c:	2105      	movs	r1, #5
 800432e:	4840      	ldr	r0, [pc, #256]	; (8004430 <scaraInitDuty+0x638>)
 8004330:	f001 fe86 	bl	8006040 <scaraInitScurve>
 8004334:	4603      	mov	r3, r0
 8004336:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
						 angle_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
				myDUTY.time_total = command.time_total;
 800433a:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 800433e:	4a38      	ldr	r2, [pc, #224]	; (8004420 <scaraInitDuty+0x628>)
 8004340:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8004344:	e9c2 3400 	strd	r3, r4, [r2]
 8004348:	e09f      	b.n	800448a <scaraInitDuty+0x692>

			} else if (DUTY_MODE_INIT_QVA == command.modeInit_type) {
 800434a:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800434e:	2b00      	cmp	r3, #0
 8004350:	f040 8095 	bne.w	800447e <scaraInitDuty+0x686>
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8004354:	4b32      	ldr	r3, [pc, #200]	; (8004420 <scaraInitDuty+0x628>)
 8004356:	2201      	movs	r2, #1
 8004358:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitScurve(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 800435c:	ed97 7b86 	vldr	d7, [r7, #536]	; 0x218
 8004360:	ed97 6b88 	vldr	d6, [r7, #544]	; 0x220
 8004364:	eeb0 2a46 	vmov.f32	s4, s12
 8004368:	eef0 2a66 	vmov.f32	s5, s13
 800436c:	eeb0 1a47 	vmov.f32	s2, s14
 8004370:	eef0 1a67 	vmov.f32	s3, s15
 8004374:	2200      	movs	r2, #0
 8004376:	ed97 0b40 	vldr	d0, [r7, #256]	; 0x100
 800437a:	2104      	movs	r1, #4
 800437c:	482b      	ldr	r0, [pc, #172]	; (800442c <scaraInitDuty+0x634>)
 800437e:	f001 fe5f 	bl	8006040 <scaraInitScurve>
 8004382:	4603      	mov	r3, r0
 8004384:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
						 total_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8004388:	4b25      	ldr	r3, [pc, #148]	; (8004420 <scaraInitDuty+0x628>)
 800438a:	2201      	movs	r2, #1
 800438c:	f883 2268 	strb.w	r2, [r3, #616]	; 0x268
				status2 = scaraInitScurve(&(myDUTY.task.trajectory_roll.scurve), TRAJECTORY_ROLL,
 8004390:	ed97 7b86 	vldr	d7, [r7, #536]	; 0x218
 8004394:	ed97 6b88 	vldr	d6, [r7, #544]	; 0x220
 8004398:	eeb0 2a46 	vmov.f32	s4, s12
 800439c:	eef0 2a66 	vmov.f32	s5, s13
 80043a0:	eeb0 1a47 	vmov.f32	s2, s14
 80043a4:	eef0 1a67 	vmov.f32	s3, s15
 80043a8:	2200      	movs	r2, #0
 80043aa:	ed97 0b3e 	vldr	d0, [r7, #248]	; 0xf8
 80043ae:	2105      	movs	r1, #5
 80043b0:	481f      	ldr	r0, [pc, #124]	; (8004430 <scaraInitDuty+0x638>)
 80043b2:	f001 fe45 	bl	8006040 <scaraInitScurve>
 80043b6:	4603      	mov	r3, r0
 80043b8:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
						 angle_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				// synchronous time end
				if(myDUTY.task.trajectory_3d.scurve.Tf > myDUTY.task.trajectory_roll.scurve.Tf) {
 80043bc:	4b18      	ldr	r3, [pc, #96]	; (8004420 <scaraInitDuty+0x628>)
 80043be:	e9d3 017e 	ldrd	r0, r1, [r3, #504]	; 0x1f8
 80043c2:	4b17      	ldr	r3, [pc, #92]	; (8004420 <scaraInitDuty+0x628>)
 80043c4:	e9d3 34d4 	ldrd	r3, r4, [r3, #848]	; 0x350
 80043c8:	461a      	mov	r2, r3
 80043ca:	4623      	mov	r3, r4
 80043cc:	f7fc fbb4 	bl	8000b38 <__aeabi_dcmpgt>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d02e      	beq.n	8004434 <scaraInitDuty+0x63c>
					myDUTY.task.trajectory_roll.scurve.Tf = myDUTY.task.trajectory_3d.scurve.Tf;
 80043d6:	4b12      	ldr	r3, [pc, #72]	; (8004420 <scaraInitDuty+0x628>)
 80043d8:	e9d3 347e 	ldrd	r3, r4, [r3, #504]	; 0x1f8
 80043dc:	4a10      	ldr	r2, [pc, #64]	; (8004420 <scaraInitDuty+0x628>)
 80043de:	e9c2 34d4 	strd	r3, r4, [r2, #848]	; 0x350
					status2 = scaraInitScurve(&(myDUTY.task.trajectory_roll.scurve), TRAJECTORY_ROLL,
 80043e2:	ed97 7b86 	vldr	d7, [r7, #536]	; 0x218
 80043e6:	ed97 6b88 	vldr	d6, [r7, #544]	; 0x220
 80043ea:	eeb0 2a46 	vmov.f32	s4, s12
 80043ee:	eef0 2a66 	vmov.f32	s5, s13
 80043f2:	eeb0 1a47 	vmov.f32	s2, s14
 80043f6:	eef0 1a67 	vmov.f32	s3, s15
 80043fa:	2201      	movs	r2, #1
 80043fc:	ed97 0b3e 	vldr	d0, [r7, #248]	; 0xf8
 8004400:	2105      	movs	r1, #5
 8004402:	480b      	ldr	r0, [pc, #44]	; (8004430 <scaraInitDuty+0x638>)
 8004404:	f001 fe1c 	bl	8006040 <scaraInitScurve>
 8004408:	4603      	mov	r3, r0
 800440a:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
							 angle_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_3d.scurve.Tf;
 800440e:	4b04      	ldr	r3, [pc, #16]	; (8004420 <scaraInitDuty+0x628>)
 8004410:	e9d3 347e 	ldrd	r3, r4, [r3, #504]	; 0x1f8
 8004414:	4a02      	ldr	r2, [pc, #8]	; (8004420 <scaraInitDuty+0x628>)
 8004416:	f602 1248 	addw	r2, r2, #2376	; 0x948
 800441a:	e9c2 3400 	strd	r3, r4, [r2]
 800441e:	e034      	b.n	800448a <scaraInitDuty+0x692>
 8004420:	20005388 	.word	0x20005388
 8004424:	200054a0 	.word	0x200054a0
 8004428:	200055f8 	.word	0x200055f8
 800442c:	20005520 	.word	0x20005520
 8004430:	20005678 	.word	0x20005678
				} else {
					myDUTY.task.trajectory_3d.scurve.Tf = myDUTY.task.trajectory_roll.scurve.Tf;
 8004434:	4bb0      	ldr	r3, [pc, #704]	; (80046f8 <scaraInitDuty+0x900>)
 8004436:	e9d3 34d4 	ldrd	r3, r4, [r3, #848]	; 0x350
 800443a:	4aaf      	ldr	r2, [pc, #700]	; (80046f8 <scaraInitDuty+0x900>)
 800443c:	e9c2 347e 	strd	r3, r4, [r2, #504]	; 0x1f8
					status1 = scaraInitScurve(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 8004440:	ed97 7b86 	vldr	d7, [r7, #536]	; 0x218
 8004444:	ed97 6b88 	vldr	d6, [r7, #544]	; 0x220
 8004448:	eeb0 2a46 	vmov.f32	s4, s12
 800444c:	eef0 2a66 	vmov.f32	s5, s13
 8004450:	eeb0 1a47 	vmov.f32	s2, s14
 8004454:	eef0 1a67 	vmov.f32	s3, s15
 8004458:	2201      	movs	r2, #1
 800445a:	ed97 0b40 	vldr	d0, [r7, #256]	; 0x100
 800445e:	2104      	movs	r1, #4
 8004460:	48a6      	ldr	r0, [pc, #664]	; (80046fc <scaraInitDuty+0x904>)
 8004462:	f001 fded 	bl	8006040 <scaraInitScurve>
 8004466:	4603      	mov	r3, r0
 8004468:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
							 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_roll.scurve.Tf;
 800446c:	4ba2      	ldr	r3, [pc, #648]	; (80046f8 <scaraInitDuty+0x900>)
 800446e:	e9d3 34d4 	ldrd	r3, r4, [r3, #848]	; 0x350
 8004472:	4aa1      	ldr	r2, [pc, #644]	; (80046f8 <scaraInitDuty+0x900>)
 8004474:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8004478:	e9c2 3400 	strd	r3, r4, [r2]
 800447c:	e005      	b.n	800448a <scaraInitDuty+0x692>
				}
			} else {
				return SCARA_STATUS_ERROR_MODE_INIT;
 800447e:	2308      	movs	r3, #8
 8004480:	f000 bf8f 	b.w	80053a2 <scaraInitDuty+0x15aa>
			}
		} else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 8004484:	2305      	movs	r3, #5
 8004486:	f000 bf8c 	b.w	80053a2 <scaraInitDuty+0x15aa>
		}
		// Check Init Status
		if ( SCARA_STATUS_OK != status1) {
 800448a:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 800448e:	2b00      	cmp	r3, #0
 8004490:	d003      	beq.n	800449a <scaraInitDuty+0x6a2>
			return status1;
 8004492:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8004496:	f000 bf84 	b.w	80053a2 <scaraInitDuty+0x15aa>
		}
		if ( SCARA_STATUS_OK != status2) {
 800449a:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 800449e:	2b00      	cmp	r3, #0
 80044a0:	f000 8760 	beq.w	8005364 <scaraInitDuty+0x156c>
			return status2;
 80044a4:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 80044a8:	f000 bf7b 	b.w	80053a2 <scaraInitDuty+0x15aa>
		}


	/*----------- Space Joint ------------*/
	} else if (DUTY_SPACE_JOINT == command.space_type) {
 80044ac:	f897 3129 	ldrb.w	r3, [r7, #297]	; 0x129
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	f040 8755 	bne.w	8005360 <scaraInitDuty+0x1568>

		myDUTY.space_type = DUTY_SPACE_JOINT;// Change type
 80044b6:	4b90      	ldr	r3, [pc, #576]	; (80046f8 <scaraInitDuty+0x900>)
 80044b8:	2201      	movs	r2, #1
 80044ba:	701a      	strb	r2, [r3, #0]
		myDUTY.joint.theta1_start	 = positionCurrent.Theta1;
 80044bc:	4b90      	ldr	r3, [pc, #576]	; (8004700 <scaraInitDuty+0x908>)
 80044be:	e9d3 3412 	ldrd	r3, r4, [r3, #72]	; 0x48
 80044c2:	4a8d      	ldr	r2, [pc, #564]	; (80046f8 <scaraInitDuty+0x900>)
 80044c4:	f602 1228 	addw	r2, r2, #2344	; 0x928
 80044c8:	e9c2 3400 	strd	r3, r4, [r2]
		myDUTY.joint.theta2_start	 = positionCurrent.Theta2;
 80044cc:	4b8c      	ldr	r3, [pc, #560]	; (8004700 <scaraInitDuty+0x908>)
 80044ce:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 80044d2:	4a89      	ldr	r2, [pc, #548]	; (80046f8 <scaraInitDuty+0x900>)
 80044d4:	f502 6213 	add.w	r2, r2, #2352	; 0x930
 80044d8:	e9c2 3400 	strd	r3, r4, [r2]
		myDUTY.joint.d3_start		 = positionCurrent.D3;
 80044dc:	4b88      	ldr	r3, [pc, #544]	; (8004700 <scaraInitDuty+0x908>)
 80044de:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 80044e2:	4a85      	ldr	r2, [pc, #532]	; (80046f8 <scaraInitDuty+0x900>)
 80044e4:	f602 1238 	addw	r2, r2, #2360	; 0x938
 80044e8:	e9c2 3400 	strd	r3, r4, [r2]
		myDUTY.joint.theta4_start 	 = positionCurrent.Theta4;
 80044ec:	4b84      	ldr	r3, [pc, #528]	; (8004700 <scaraInitDuty+0x908>)
 80044ee:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 80044f2:	4a81      	ldr	r2, [pc, #516]	; (80046f8 <scaraInitDuty+0x900>)
 80044f4:	f502 6214 	add.w	r2, r2, #2368	; 0x940
 80044f8:	e9c2 3400 	strd	r3, r4, [r2]

		//-----Joint Single
		if ( DUTY_JOINT_SINGLE == command.joint_type) {
 80044fc:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8004500:	2b00      	cmp	r3, #0
 8004502:	f040 83d6 	bne.w	8004cb2 <scaraInitDuty+0xeba>
			// Trajectory 1 profile
			double s, abs_position;
			switch(command.sub_para_int) {
 8004506:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800450a:	2b03      	cmp	r3, #3
 800450c:	f200 814e 	bhi.w	80047ac <scaraInitDuty+0x9b4>
 8004510:	a201      	add	r2, pc, #4	; (adr r2, 8004518 <scaraInitDuty+0x720>)
 8004512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004516:	bf00      	nop
 8004518:	08004529 	.word	0x08004529
 800451c:	080045cf 	.word	0x080045cf
 8004520:	08004675 	.word	0x08004675
 8004524:	08004709 	.word	0x08004709
			case 0:
				// Change Degree --> Radian
				command.sub_para_double = command.sub_para_double*PI/180.0;
 8004528:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 800452c:	a370      	add	r3, pc, #448	; (adr r3, 80046f0 <scaraInitDuty+0x8f8>)
 800452e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004532:	f7fc f871 	bl	8000618 <__aeabi_dmul>
 8004536:	4603      	mov	r3, r0
 8004538:	460c      	mov	r4, r1
 800453a:	4618      	mov	r0, r3
 800453c:	4621      	mov	r1, r4
 800453e:	f04f 0200 	mov.w	r2, #0
 8004542:	4b70      	ldr	r3, [pc, #448]	; (8004704 <scaraInitDuty+0x90c>)
 8004544:	f7fc f992 	bl	800086c <__aeabi_ddiv>
 8004548:	4603      	mov	r3, r0
 800454a:	460c      	mov	r4, r1
 800454c:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
				// Coordinate
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8004550:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8004554:	2b01      	cmp	r3, #1
 8004556:	d113      	bne.n	8004580 <scaraInitDuty+0x788>
					abs_position = myDUTY.joint.theta1_start + command.sub_para_double;
 8004558:	4b67      	ldr	r3, [pc, #412]	; (80046f8 <scaraInitDuty+0x900>)
 800455a:	f603 1328 	addw	r3, r3, #2344	; 0x928
 800455e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004562:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 8004566:	461a      	mov	r2, r3
 8004568:	4623      	mov	r3, r4
 800456a:	f7fb fe9f 	bl	80002ac <__adddf3>
 800456e:	4603      	mov	r3, r0
 8004570:	460c      	mov	r4, r1
 8004572:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
					s			 = command.sub_para_double;
 8004576:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 800457a:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
 800457e:	e01a      	b.n	80045b6 <scaraInitDuty+0x7be>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8004580:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8004584:	2b00      	cmp	r3, #0
 8004586:	d113      	bne.n	80045b0 <scaraInitDuty+0x7b8>
					abs_position = command.sub_para_double;
 8004588:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 800458c:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
					s			 = command.sub_para_double - myDUTY.joint.theta1_start;
 8004590:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8004594:	4b58      	ldr	r3, [pc, #352]	; (80046f8 <scaraInitDuty+0x900>)
 8004596:	f603 1328 	addw	r3, r3, #2344	; 0x928
 800459a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800459e:	461a      	mov	r2, r3
 80045a0:	4623      	mov	r3, r4
 80045a2:	f7fb fe81 	bl	80002a8 <__aeabi_dsub>
 80045a6:	4603      	mov	r3, r0
 80045a8:	460c      	mov	r4, r1
 80045aa:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
 80045ae:	e002      	b.n	80045b6 <scaraInitDuty+0x7be>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 80045b0:	230c      	movs	r3, #12
 80045b2:	f000 bef6 	b.w	80053a2 <scaraInitDuty+0x15aa>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J0, abs_position)) {
 80045b6:	ed97 0b38 	vldr	d0, [r7, #224]	; 0xe0
 80045ba:	2000      	movs	r0, #0
 80045bc:	f003 fd88 	bl	80080d0 <scaraCheckWorkSpace1>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	f000 80f5 	beq.w	80047b2 <scaraInitDuty+0x9ba>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 80045c8:	2307      	movs	r3, #7
 80045ca:	f000 beea 	b.w	80053a2 <scaraInitDuty+0x15aa>
				}
				break;
			case 1:
				// Change Degree --> Radian
				command.sub_para_double = command.sub_para_double*PI/180.0;
 80045ce:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 80045d2:	a347      	add	r3, pc, #284	; (adr r3, 80046f0 <scaraInitDuty+0x8f8>)
 80045d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d8:	f7fc f81e 	bl	8000618 <__aeabi_dmul>
 80045dc:	4603      	mov	r3, r0
 80045de:	460c      	mov	r4, r1
 80045e0:	4618      	mov	r0, r3
 80045e2:	4621      	mov	r1, r4
 80045e4:	f04f 0200 	mov.w	r2, #0
 80045e8:	4b46      	ldr	r3, [pc, #280]	; (8004704 <scaraInitDuty+0x90c>)
 80045ea:	f7fc f93f 	bl	800086c <__aeabi_ddiv>
 80045ee:	4603      	mov	r3, r0
 80045f0:	460c      	mov	r4, r1
 80045f2:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
				// Coordinate
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 80045f6:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d113      	bne.n	8004626 <scaraInitDuty+0x82e>
					abs_position = myDUTY.joint.theta2_start + command.sub_para_double;
 80045fe:	4b3e      	ldr	r3, [pc, #248]	; (80046f8 <scaraInitDuty+0x900>)
 8004600:	f503 6313 	add.w	r3, r3, #2352	; 0x930
 8004604:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004608:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 800460c:	461a      	mov	r2, r3
 800460e:	4623      	mov	r3, r4
 8004610:	f7fb fe4c 	bl	80002ac <__adddf3>
 8004614:	4603      	mov	r3, r0
 8004616:	460c      	mov	r4, r1
 8004618:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
					s			 = command.sub_para_double;
 800461c:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 8004620:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
 8004624:	e01a      	b.n	800465c <scaraInitDuty+0x864>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8004626:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 800462a:	2b00      	cmp	r3, #0
 800462c:	d113      	bne.n	8004656 <scaraInitDuty+0x85e>
					abs_position = command.sub_para_double;
 800462e:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 8004632:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
					s			 = command.sub_para_double - myDUTY.joint.theta2_start;
 8004636:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 800463a:	4b2f      	ldr	r3, [pc, #188]	; (80046f8 <scaraInitDuty+0x900>)
 800463c:	f503 6313 	add.w	r3, r3, #2352	; 0x930
 8004640:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004644:	461a      	mov	r2, r3
 8004646:	4623      	mov	r3, r4
 8004648:	f7fb fe2e 	bl	80002a8 <__aeabi_dsub>
 800464c:	4603      	mov	r3, r0
 800464e:	460c      	mov	r4, r1
 8004650:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
 8004654:	e002      	b.n	800465c <scaraInitDuty+0x864>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 8004656:	230c      	movs	r3, #12
 8004658:	f000 bea3 	b.w	80053a2 <scaraInitDuty+0x15aa>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J1, abs_position)) {
 800465c:	ed97 0b38 	vldr	d0, [r7, #224]	; 0xe0
 8004660:	2001      	movs	r0, #1
 8004662:	f003 fd35 	bl	80080d0 <scaraCheckWorkSpace1>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	f000 80a4 	beq.w	80047b6 <scaraInitDuty+0x9be>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800466e:	2307      	movs	r3, #7
 8004670:	f000 be97 	b.w	80053a2 <scaraInitDuty+0x15aa>
				}
				break;
			case 2:
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8004674:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8004678:	2b01      	cmp	r3, #1
 800467a:	d113      	bne.n	80046a4 <scaraInitDuty+0x8ac>
					abs_position = myDUTY.joint.d3_start + command.sub_para_double;
 800467c:	4b1e      	ldr	r3, [pc, #120]	; (80046f8 <scaraInitDuty+0x900>)
 800467e:	f603 1338 	addw	r3, r3, #2360	; 0x938
 8004682:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004686:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 800468a:	461a      	mov	r2, r3
 800468c:	4623      	mov	r3, r4
 800468e:	f7fb fe0d 	bl	80002ac <__adddf3>
 8004692:	4603      	mov	r3, r0
 8004694:	460c      	mov	r4, r1
 8004696:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
					s			 = command.sub_para_double;
 800469a:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 800469e:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
 80046a2:	e01a      	b.n	80046da <scaraInitDuty+0x8e2>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 80046a4:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d113      	bne.n	80046d4 <scaraInitDuty+0x8dc>
					abs_position = command.sub_para_double;
 80046ac:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 80046b0:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
					s			 = command.sub_para_double - myDUTY.joint.d3_start;
 80046b4:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 80046b8:	4b0f      	ldr	r3, [pc, #60]	; (80046f8 <scaraInitDuty+0x900>)
 80046ba:	f603 1338 	addw	r3, r3, #2360	; 0x938
 80046be:	e9d3 3400 	ldrd	r3, r4, [r3]
 80046c2:	461a      	mov	r2, r3
 80046c4:	4623      	mov	r3, r4
 80046c6:	f7fb fdef 	bl	80002a8 <__aeabi_dsub>
 80046ca:	4603      	mov	r3, r0
 80046cc:	460c      	mov	r4, r1
 80046ce:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
 80046d2:	e002      	b.n	80046da <scaraInitDuty+0x8e2>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 80046d4:	230c      	movs	r3, #12
 80046d6:	f000 be64 	b.w	80053a2 <scaraInitDuty+0x15aa>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J2, abs_position)) {
 80046da:	ed97 0b38 	vldr	d0, [r7, #224]	; 0xe0
 80046de:	2002      	movs	r0, #2
 80046e0:	f003 fcf6 	bl	80080d0 <scaraCheckWorkSpace1>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d067      	beq.n	80047ba <scaraInitDuty+0x9c2>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 80046ea:	2307      	movs	r3, #7
 80046ec:	f000 be59 	b.w	80053a2 <scaraInitDuty+0x15aa>
 80046f0:	60000000 	.word	0x60000000
 80046f4:	400921fb 	.word	0x400921fb
 80046f8:	20005388 	.word	0x20005388
 80046fc:	20005520 	.word	0x20005520
 8004700:	20005d40 	.word	0x20005d40
 8004704:	40668000 	.word	0x40668000
				}
				break;
			case 3:
				// Change Degree --> Radian
				command.sub_para_double = command.sub_para_double*PI/180.0;
 8004708:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 800470c:	a3cf      	add	r3, pc, #828	; (adr r3, 8004a4c <scaraInitDuty+0xc54>)
 800470e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004712:	f7fb ff81 	bl	8000618 <__aeabi_dmul>
 8004716:	4603      	mov	r3, r0
 8004718:	460c      	mov	r4, r1
 800471a:	4618      	mov	r0, r3
 800471c:	4621      	mov	r1, r4
 800471e:	f04f 0200 	mov.w	r2, #0
 8004722:	4bc7      	ldr	r3, [pc, #796]	; (8004a40 <scaraInitDuty+0xc48>)
 8004724:	f7fc f8a2 	bl	800086c <__aeabi_ddiv>
 8004728:	4603      	mov	r3, r0
 800472a:	460c      	mov	r4, r1
 800472c:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
				// Coordinate
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8004730:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8004734:	2b01      	cmp	r3, #1
 8004736:	d113      	bne.n	8004760 <scaraInitDuty+0x968>
					abs_position = myDUTY.joint.theta4_start + command.sub_para_double;
 8004738:	4bc2      	ldr	r3, [pc, #776]	; (8004a44 <scaraInitDuty+0xc4c>)
 800473a:	f503 6314 	add.w	r3, r3, #2368	; 0x940
 800473e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004742:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 8004746:	461a      	mov	r2, r3
 8004748:	4623      	mov	r3, r4
 800474a:	f7fb fdaf 	bl	80002ac <__adddf3>
 800474e:	4603      	mov	r3, r0
 8004750:	460c      	mov	r4, r1
 8004752:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
					s			 = command.sub_para_double;
 8004756:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 800475a:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
 800475e:	e01a      	b.n	8004796 <scaraInitDuty+0x99e>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8004760:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8004764:	2b00      	cmp	r3, #0
 8004766:	d113      	bne.n	8004790 <scaraInitDuty+0x998>
					abs_position = command.sub_para_double;
 8004768:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 800476c:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
					s			 = command.sub_para_double - myDUTY.joint.theta4_start;
 8004770:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8004774:	4bb3      	ldr	r3, [pc, #716]	; (8004a44 <scaraInitDuty+0xc4c>)
 8004776:	f503 6314 	add.w	r3, r3, #2368	; 0x940
 800477a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800477e:	461a      	mov	r2, r3
 8004780:	4623      	mov	r3, r4
 8004782:	f7fb fd91 	bl	80002a8 <__aeabi_dsub>
 8004786:	4603      	mov	r3, r0
 8004788:	460c      	mov	r4, r1
 800478a:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
 800478e:	e002      	b.n	8004796 <scaraInitDuty+0x99e>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 8004790:	230c      	movs	r3, #12
 8004792:	f000 be06 	b.w	80053a2 <scaraInitDuty+0x15aa>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J3, abs_position)) {
 8004796:	ed97 0b38 	vldr	d0, [r7, #224]	; 0xe0
 800479a:	2003      	movs	r0, #3
 800479c:	f003 fc98 	bl	80080d0 <scaraCheckWorkSpace1>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d00b      	beq.n	80047be <scaraInitDuty+0x9c6>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 80047a6:	2307      	movs	r3, #7
 80047a8:	f000 bdfb 	b.w	80053a2 <scaraInitDuty+0x15aa>
				}
				break;
			default:
				return SCARA_STATUS_ERROR_JOINT_NUM;
 80047ac:	230b      	movs	r3, #11
 80047ae:	f000 bdf8 	b.w	80053a2 <scaraInitDuty+0x15aa>
				break;
 80047b2:	bf00      	nop
 80047b4:	e004      	b.n	80047c0 <scaraInitDuty+0x9c8>
				break;
 80047b6:	bf00      	nop
 80047b8:	e002      	b.n	80047c0 <scaraInitDuty+0x9c8>
				break;
 80047ba:	bf00      	nop
 80047bc:	e000      	b.n	80047c0 <scaraInitDuty+0x9c8>
				break;
 80047be:	bf00      	nop
			}

			// LSPB
			if ( DUTY_TRAJECTORY_LSPB == command.trajec_type) {
 80047c0:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	f040 8128 	bne.w	8004a1a <scaraInitDuty+0xc22>
				// Mode Init Time
				if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 80047ca:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	f040 8097 	bne.w	8004902 <scaraInitDuty+0xb0a>
					for ( uint8_t i = 0; i < 4; i++) {
 80047d4:	2300      	movs	r3, #0
 80047d6:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 80047da:	e08c      	b.n	80048f6 <scaraInitDuty+0xafe>
						if ( i == command.sub_para_int) {
 80047dc:	f897 20df 	ldrb.w	r2, [r7, #223]	; 0xdf
 80047e0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d13d      	bne.n	8004864 <scaraInitDuty+0xa6c>
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 80047e8:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 80047ec:	4a95      	ldr	r2, [pc, #596]	; (8004a44 <scaraInitDuty+0xc4c>)
 80047ee:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80047f2:	fb01 f303 	mul.w	r3, r1, r3
 80047f6:	4413      	add	r3, r2
 80047f8:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 80047fc:	2200      	movs	r2, #0
 80047fe:	701a      	strb	r2, [r3, #0]
							myDUTY.joint.trajectory[i].lspb.Tf = command.time_total;
 8004800:	f897 20df 	ldrb.w	r2, [r7, #223]	; 0xdf
 8004804:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8004808:	498e      	ldr	r1, [pc, #568]	; (8004a44 <scaraInitDuty+0xc4c>)
 800480a:	f44f 70ac 	mov.w	r0, #344	; 0x158
 800480e:	fb00 f202 	mul.w	r2, r0, r2
 8004812:	440a      	add	r2, r1
 8004814:	f502 6284 	add.w	r2, r2, #1056	; 0x420
 8004818:	e9c2 3400 	strd	r3, r4, [r2]
							status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 800481c:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8004820:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8004824:	fb02 f303 	mul.w	r3, r2, r3
 8004828:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 800482c:	4a85      	ldr	r2, [pc, #532]	; (8004a44 <scaraInitDuty+0xc4c>)
 800482e:	1898      	adds	r0, r3, r2
 8004830:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8004834:	4a84      	ldr	r2, [pc, #528]	; (8004a48 <scaraInitDuty+0xc50>)
 8004836:	5cd3      	ldrb	r3, [r2, r3]
 8004838:	ed97 7b86 	vldr	d7, [r7, #536]	; 0x218
 800483c:	ed97 6b88 	vldr	d6, [r7, #544]	; 0x220
 8004840:	eeb0 2a46 	vmov.f32	s4, s12
 8004844:	eef0 2a66 	vmov.f32	s5, s13
 8004848:	eeb0 1a47 	vmov.f32	s2, s14
 800484c:	eef0 1a67 	vmov.f32	s3, s15
 8004850:	2201      	movs	r2, #1
 8004852:	ed97 0b3a 	vldr	d0, [r7, #232]	; 0xe8
 8004856:	4619      	mov	r1, r3
 8004858:	f000 fff2 	bl	8005840 <scaraInitLSPB>
 800485c:	4603      	mov	r3, r0
 800485e:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
 8004862:	e03c      	b.n	80048de <scaraInitDuty+0xae6>
											s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
						} else {
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8004864:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8004868:	4a76      	ldr	r2, [pc, #472]	; (8004a44 <scaraInitDuty+0xc4c>)
 800486a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800486e:	fb01 f303 	mul.w	r3, r1, r3
 8004872:	4413      	add	r3, r2
 8004874:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8004878:	2200      	movs	r2, #0
 800487a:	701a      	strb	r2, [r3, #0]
							myDUTY.joint.trajectory[i].lspb.Tf = command.time_total;
 800487c:	f897 20df 	ldrb.w	r2, [r7, #223]	; 0xdf
 8004880:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8004884:	496f      	ldr	r1, [pc, #444]	; (8004a44 <scaraInitDuty+0xc4c>)
 8004886:	f44f 70ac 	mov.w	r0, #344	; 0x158
 800488a:	fb00 f202 	mul.w	r2, r0, r2
 800488e:	440a      	add	r2, r1
 8004890:	f502 6284 	add.w	r2, r2, #1056	; 0x420
 8004894:	e9c2 3400 	strd	r3, r4, [r2]
							status2 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8004898:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 800489c:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80048a0:	fb02 f303 	mul.w	r3, r2, r3
 80048a4:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 80048a8:	4a66      	ldr	r2, [pc, #408]	; (8004a44 <scaraInitDuty+0xc4c>)
 80048aa:	1898      	adds	r0, r3, r2
 80048ac:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 80048b0:	4a65      	ldr	r2, [pc, #404]	; (8004a48 <scaraInitDuty+0xc50>)
 80048b2:	5cd3      	ldrb	r3, [r2, r3]
 80048b4:	ed97 7b86 	vldr	d7, [r7, #536]	; 0x218
 80048b8:	ed97 6b88 	vldr	d6, [r7, #544]	; 0x220
 80048bc:	eeb0 2a46 	vmov.f32	s4, s12
 80048c0:	eef0 2a66 	vmov.f32	s5, s13
 80048c4:	eeb0 1a47 	vmov.f32	s2, s14
 80048c8:	eef0 1a67 	vmov.f32	s3, s15
 80048cc:	2201      	movs	r2, #1
 80048ce:	ed9f 0b5a 	vldr	d0, [pc, #360]	; 8004a38 <scaraInitDuty+0xc40>
 80048d2:	4619      	mov	r1, r3
 80048d4:	f000 ffb4 	bl	8005840 <scaraInitLSPB>
 80048d8:	4603      	mov	r3, r0
 80048da:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
											0, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
						}
						myDUTY.time_total = command.time_total;
 80048de:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 80048e2:	4a58      	ldr	r2, [pc, #352]	; (8004a44 <scaraInitDuty+0xc4c>)
 80048e4:	f602 1248 	addw	r2, r2, #2376	; 0x948
 80048e8:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 80048ec:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 80048f0:	3301      	adds	r3, #1
 80048f2:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 80048f6:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 80048fa:	2b03      	cmp	r3, #3
 80048fc:	f67f af6e 	bls.w	80047dc <scaraInitDuty+0x9e4>
 8004900:	e1c8      	b.n	8004c94 <scaraInitDuty+0xe9c>
					}
				// Mode Init Acc
				} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8004902:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8004906:	2b00      	cmp	r3, #0
 8004908:	f040 8084 	bne.w	8004a14 <scaraInitDuty+0xc1c>
					for ( uint8_t i = 0; i < 4; i++) {
 800490c:	2300      	movs	r3, #0
 800490e:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
 8004912:	e07a      	b.n	8004a0a <scaraInitDuty+0xc12>
						if ( i == command.sub_para_int) {
 8004914:	f897 20de 	ldrb.w	r2, [r7, #222]	; 0xde
 8004918:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800491c:	429a      	cmp	r2, r3
 800491e:	d140      	bne.n	80049a2 <scaraInitDuty+0xbaa>
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8004920:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8004924:	4a47      	ldr	r2, [pc, #284]	; (8004a44 <scaraInitDuty+0xc4c>)
 8004926:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800492a:	fb01 f303 	mul.w	r3, r1, r3
 800492e:	4413      	add	r3, r2
 8004930:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8004934:	2200      	movs	r2, #0
 8004936:	701a      	strb	r2, [r3, #0]
							status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8004938:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 800493c:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8004940:	fb02 f303 	mul.w	r3, r2, r3
 8004944:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 8004948:	4a3e      	ldr	r2, [pc, #248]	; (8004a44 <scaraInitDuty+0xc4c>)
 800494a:	1898      	adds	r0, r3, r2
 800494c:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8004950:	4a3d      	ldr	r2, [pc, #244]	; (8004a48 <scaraInitDuty+0xc50>)
 8004952:	5cd3      	ldrb	r3, [r2, r3]
 8004954:	ed97 7b86 	vldr	d7, [r7, #536]	; 0x218
 8004958:	ed97 6b88 	vldr	d6, [r7, #544]	; 0x220
 800495c:	eeb0 2a46 	vmov.f32	s4, s12
 8004960:	eef0 2a66 	vmov.f32	s5, s13
 8004964:	eeb0 1a47 	vmov.f32	s2, s14
 8004968:	eef0 1a67 	vmov.f32	s3, s15
 800496c:	2200      	movs	r2, #0
 800496e:	ed97 0b3a 	vldr	d0, [r7, #232]	; 0xe8
 8004972:	4619      	mov	r1, r3
 8004974:	f000 ff64 	bl	8005840 <scaraInitLSPB>
 8004978:	4603      	mov	r3, r0
 800497a:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
											s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
							myDUTY.time_total = myDUTY.joint.trajectory[i].lspb.Tf;
 800497e:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8004982:	4a30      	ldr	r2, [pc, #192]	; (8004a44 <scaraInitDuty+0xc4c>)
 8004984:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8004988:	fb01 f303 	mul.w	r3, r1, r3
 800498c:	4413      	add	r3, r2
 800498e:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8004992:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004996:	4a2b      	ldr	r2, [pc, #172]	; (8004a44 <scaraInitDuty+0xc4c>)
 8004998:	f602 1248 	addw	r2, r2, #2376	; 0x948
 800499c:	e9c2 3400 	strd	r3, r4, [r2]
 80049a0:	e02e      	b.n	8004a00 <scaraInitDuty+0xc08>
						} else {
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 80049a2:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 80049a6:	4a27      	ldr	r2, [pc, #156]	; (8004a44 <scaraInitDuty+0xc4c>)
 80049a8:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80049ac:	fb01 f303 	mul.w	r3, r1, r3
 80049b0:	4413      	add	r3, r2
 80049b2:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 80049b6:	2200      	movs	r2, #0
 80049b8:	701a      	strb	r2, [r3, #0]
							status2 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 80049ba:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 80049be:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80049c2:	fb02 f303 	mul.w	r3, r2, r3
 80049c6:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 80049ca:	4a1e      	ldr	r2, [pc, #120]	; (8004a44 <scaraInitDuty+0xc4c>)
 80049cc:	1898      	adds	r0, r3, r2
 80049ce:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 80049d2:	4a1d      	ldr	r2, [pc, #116]	; (8004a48 <scaraInitDuty+0xc50>)
 80049d4:	5cd3      	ldrb	r3, [r2, r3]
 80049d6:	ed97 7b86 	vldr	d7, [r7, #536]	; 0x218
 80049da:	ed97 6b88 	vldr	d6, [r7, #544]	; 0x220
 80049de:	eeb0 2a46 	vmov.f32	s4, s12
 80049e2:	eef0 2a66 	vmov.f32	s5, s13
 80049e6:	eeb0 1a47 	vmov.f32	s2, s14
 80049ea:	eef0 1a67 	vmov.f32	s3, s15
 80049ee:	2200      	movs	r2, #0
 80049f0:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8004a38 <scaraInitDuty+0xc40>
 80049f4:	4619      	mov	r1, r3
 80049f6:	f000 ff23 	bl	8005840 <scaraInitLSPB>
 80049fa:	4603      	mov	r3, r0
 80049fc:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
					for ( uint8_t i = 0; i < 4; i++) {
 8004a00:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8004a04:	3301      	adds	r3, #1
 8004a06:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
 8004a0a:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8004a0e:	2b03      	cmp	r3, #3
 8004a10:	d980      	bls.n	8004914 <scaraInitDuty+0xb1c>
 8004a12:	e13f      	b.n	8004c94 <scaraInitDuty+0xe9c>
											0, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
						}
					}
				} else {
					return SCARA_STATUS_ERROR_MODE_INIT;
 8004a14:	2308      	movs	r3, #8
 8004a16:	f000 bcc4 	b.w	80053a2 <scaraInitDuty+0x15aa>
				}
			// SCURVE
			} else if ( DUTY_TRAJECTORY_SCURVE == command.trajec_type) {
 8004a1a:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	f040 8136 	bne.w	8004c90 <scaraInitDuty+0xe98>
					// Mode Init Time
					if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8004a24:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	f040 80a6 	bne.w	8004b7a <scaraInitDuty+0xd82>
						for ( uint8_t i = 0; i < 4; i++) {
 8004a2e:	2300      	movs	r3, #0
 8004a30:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd
 8004a34:	e09b      	b.n	8004b6e <scaraInitDuty+0xd76>
 8004a36:	bf00      	nop
	...
 8004a40:	40668000 	.word	0x40668000
 8004a44:	20005388 	.word	0x20005388
 8004a48:	20000c7c 	.word	0x20000c7c
 8004a4c:	60000000 	.word	0x60000000
 8004a50:	400921fb 	.word	0x400921fb
							if ( i == command.sub_para_int) {
 8004a54:	f897 20dd 	ldrb.w	r2, [r7, #221]	; 0xdd
 8004a58:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d13d      	bne.n	8004adc <scaraInitDuty+0xce4>
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8004a60:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8004a64:	4ac0      	ldr	r2, [pc, #768]	; (8004d68 <scaraInitDuty+0xf70>)
 8004a66:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8004a6a:	fb01 f303 	mul.w	r3, r1, r3
 8004a6e:	4413      	add	r3, r2
 8004a70:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8004a74:	2201      	movs	r2, #1
 8004a76:	701a      	strb	r2, [r3, #0]
								myDUTY.joint.trajectory[i].scurve.Tf = command.time_total;
 8004a78:	f897 20dd 	ldrb.w	r2, [r7, #221]	; 0xdd
 8004a7c:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8004a80:	49b9      	ldr	r1, [pc, #740]	; (8004d68 <scaraInitDuty+0xf70>)
 8004a82:	f44f 70ac 	mov.w	r0, #344	; 0x158
 8004a86:	fb00 f202 	mul.w	r2, r0, r2
 8004a8a:	440a      	add	r2, r1
 8004a8c:	f502 6296 	add.w	r2, r2, #1200	; 0x4b0
 8004a90:	e9c2 3400 	strd	r3, r4, [r2]
								status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve),
 8004a94:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8004a98:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8004a9c:	fb02 f303 	mul.w	r3, r2, r3
 8004aa0:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8004aa4:	4ab0      	ldr	r2, [pc, #704]	; (8004d68 <scaraInitDuty+0xf70>)
 8004aa6:	1898      	adds	r0, r3, r2
 8004aa8:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8004aac:	4aaf      	ldr	r2, [pc, #700]	; (8004d6c <scaraInitDuty+0xf74>)
 8004aae:	5cd3      	ldrb	r3, [r2, r3]
 8004ab0:	ed97 7b86 	vldr	d7, [r7, #536]	; 0x218
 8004ab4:	ed97 6b88 	vldr	d6, [r7, #544]	; 0x220
 8004ab8:	eeb0 2a46 	vmov.f32	s4, s12
 8004abc:	eef0 2a66 	vmov.f32	s5, s13
 8004ac0:	eeb0 1a47 	vmov.f32	s2, s14
 8004ac4:	eef0 1a67 	vmov.f32	s3, s15
 8004ac8:	2201      	movs	r2, #1
 8004aca:	ed97 0b3a 	vldr	d0, [r7, #232]	; 0xe8
 8004ace:	4619      	mov	r1, r3
 8004ad0:	f001 fab6 	bl	8006040 <scaraInitScurve>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
 8004ada:	e03c      	b.n	8004b56 <scaraInitDuty+0xd5e>
											joint_taget[i],
											s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
							} else {
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8004adc:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8004ae0:	4aa1      	ldr	r2, [pc, #644]	; (8004d68 <scaraInitDuty+0xf70>)
 8004ae2:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8004ae6:	fb01 f303 	mul.w	r3, r1, r3
 8004aea:	4413      	add	r3, r2
 8004aec:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8004af0:	2201      	movs	r2, #1
 8004af2:	701a      	strb	r2, [r3, #0]
								myDUTY.joint.trajectory[i].scurve.Tf = command.time_total;
 8004af4:	f897 20dd 	ldrb.w	r2, [r7, #221]	; 0xdd
 8004af8:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8004afc:	499a      	ldr	r1, [pc, #616]	; (8004d68 <scaraInitDuty+0xf70>)
 8004afe:	f44f 70ac 	mov.w	r0, #344	; 0x158
 8004b02:	fb00 f202 	mul.w	r2, r0, r2
 8004b06:	440a      	add	r2, r1
 8004b08:	f502 6296 	add.w	r2, r2, #1200	; 0x4b0
 8004b0c:	e9c2 3400 	strd	r3, r4, [r2]
								status2 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve),
 8004b10:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8004b14:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8004b18:	fb02 f303 	mul.w	r3, r2, r3
 8004b1c:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8004b20:	4a91      	ldr	r2, [pc, #580]	; (8004d68 <scaraInitDuty+0xf70>)
 8004b22:	1898      	adds	r0, r3, r2
 8004b24:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8004b28:	4a90      	ldr	r2, [pc, #576]	; (8004d6c <scaraInitDuty+0xf74>)
 8004b2a:	5cd3      	ldrb	r3, [r2, r3]
 8004b2c:	ed97 7b86 	vldr	d7, [r7, #536]	; 0x218
 8004b30:	ed97 6b88 	vldr	d6, [r7, #544]	; 0x220
 8004b34:	eeb0 2a46 	vmov.f32	s4, s12
 8004b38:	eef0 2a66 	vmov.f32	s5, s13
 8004b3c:	eeb0 1a47 	vmov.f32	s2, s14
 8004b40:	eef0 1a67 	vmov.f32	s3, s15
 8004b44:	2201      	movs	r2, #1
 8004b46:	ed9f 0b84 	vldr	d0, [pc, #528]	; 8004d58 <scaraInitDuty+0xf60>
 8004b4a:	4619      	mov	r1, r3
 8004b4c:	f001 fa78 	bl	8006040 <scaraInitScurve>
 8004b50:	4603      	mov	r3, r0
 8004b52:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
											joint_taget[i],
											0, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
							}
							myDUTY.time_total = command.time_total;
 8004b56:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8004b5a:	4a83      	ldr	r2, [pc, #524]	; (8004d68 <scaraInitDuty+0xf70>)
 8004b5c:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8004b60:	e9c2 3400 	strd	r3, r4, [r2]
						for ( uint8_t i = 0; i < 4; i++) {
 8004b64:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8004b68:	3301      	adds	r3, #1
 8004b6a:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd
 8004b6e:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8004b72:	2b03      	cmp	r3, #3
 8004b74:	f67f af6e 	bls.w	8004a54 <scaraInitDuty+0xc5c>
 8004b78:	e08c      	b.n	8004c94 <scaraInitDuty+0xe9c>
						}
					// Mode Init Acc
					} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8004b7a:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	f040 8084 	bne.w	8004c8c <scaraInitDuty+0xe94>
						for ( uint8_t i = 0; i < 4; i++) {
 8004b84:	2300      	movs	r3, #0
 8004b86:	f887 30dc 	strb.w	r3, [r7, #220]	; 0xdc
 8004b8a:	e07a      	b.n	8004c82 <scaraInitDuty+0xe8a>
							if ( i == command.sub_para_int) {
 8004b8c:	f897 20dc 	ldrb.w	r2, [r7, #220]	; 0xdc
 8004b90:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d140      	bne.n	8004c1a <scaraInitDuty+0xe22>
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8004b98:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 8004b9c:	4a72      	ldr	r2, [pc, #456]	; (8004d68 <scaraInitDuty+0xf70>)
 8004b9e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8004ba2:	fb01 f303 	mul.w	r3, r1, r3
 8004ba6:	4413      	add	r3, r2
 8004ba8:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8004bac:	2201      	movs	r2, #1
 8004bae:	701a      	strb	r2, [r3, #0]
								status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve),
 8004bb0:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 8004bb4:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8004bb8:	fb02 f303 	mul.w	r3, r2, r3
 8004bbc:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8004bc0:	4a69      	ldr	r2, [pc, #420]	; (8004d68 <scaraInitDuty+0xf70>)
 8004bc2:	1898      	adds	r0, r3, r2
 8004bc4:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 8004bc8:	4a68      	ldr	r2, [pc, #416]	; (8004d6c <scaraInitDuty+0xf74>)
 8004bca:	5cd3      	ldrb	r3, [r2, r3]
 8004bcc:	ed97 7b86 	vldr	d7, [r7, #536]	; 0x218
 8004bd0:	ed97 6b88 	vldr	d6, [r7, #544]	; 0x220
 8004bd4:	eeb0 2a46 	vmov.f32	s4, s12
 8004bd8:	eef0 2a66 	vmov.f32	s5, s13
 8004bdc:	eeb0 1a47 	vmov.f32	s2, s14
 8004be0:	eef0 1a67 	vmov.f32	s3, s15
 8004be4:	2200      	movs	r2, #0
 8004be6:	ed97 0b3a 	vldr	d0, [r7, #232]	; 0xe8
 8004bea:	4619      	mov	r1, r3
 8004bec:	f001 fa28 	bl	8006040 <scaraInitScurve>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
											joint_taget[i],
											s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
								myDUTY.time_total = myDUTY.joint.trajectory[i].scurve.Tf;
 8004bf6:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 8004bfa:	4a5b      	ldr	r2, [pc, #364]	; (8004d68 <scaraInitDuty+0xf70>)
 8004bfc:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8004c00:	fb01 f303 	mul.w	r3, r1, r3
 8004c04:	4413      	add	r3, r2
 8004c06:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8004c0a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004c0e:	4a56      	ldr	r2, [pc, #344]	; (8004d68 <scaraInitDuty+0xf70>)
 8004c10:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8004c14:	e9c2 3400 	strd	r3, r4, [r2]
 8004c18:	e02e      	b.n	8004c78 <scaraInitDuty+0xe80>
							} else {
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8004c1a:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 8004c1e:	4a52      	ldr	r2, [pc, #328]	; (8004d68 <scaraInitDuty+0xf70>)
 8004c20:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8004c24:	fb01 f303 	mul.w	r3, r1, r3
 8004c28:	4413      	add	r3, r2
 8004c2a:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8004c2e:	2201      	movs	r2, #1
 8004c30:	701a      	strb	r2, [r3, #0]
								status2 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve),
 8004c32:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 8004c36:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8004c3a:	fb02 f303 	mul.w	r3, r2, r3
 8004c3e:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8004c42:	4a49      	ldr	r2, [pc, #292]	; (8004d68 <scaraInitDuty+0xf70>)
 8004c44:	1898      	adds	r0, r3, r2
 8004c46:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 8004c4a:	4a48      	ldr	r2, [pc, #288]	; (8004d6c <scaraInitDuty+0xf74>)
 8004c4c:	5cd3      	ldrb	r3, [r2, r3]
 8004c4e:	ed97 7b86 	vldr	d7, [r7, #536]	; 0x218
 8004c52:	ed97 6b88 	vldr	d6, [r7, #544]	; 0x220
 8004c56:	eeb0 2a46 	vmov.f32	s4, s12
 8004c5a:	eef0 2a66 	vmov.f32	s5, s13
 8004c5e:	eeb0 1a47 	vmov.f32	s2, s14
 8004c62:	eef0 1a67 	vmov.f32	s3, s15
 8004c66:	2200      	movs	r2, #0
 8004c68:	ed9f 0b3b 	vldr	d0, [pc, #236]	; 8004d58 <scaraInitDuty+0xf60>
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	f001 f9e7 	bl	8006040 <scaraInitScurve>
 8004c72:	4603      	mov	r3, r0
 8004c74:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
						for ( uint8_t i = 0; i < 4; i++) {
 8004c78:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	f887 30dc 	strb.w	r3, [r7, #220]	; 0xdc
 8004c82:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 8004c86:	2b03      	cmp	r3, #3
 8004c88:	d980      	bls.n	8004b8c <scaraInitDuty+0xd94>
 8004c8a:	e003      	b.n	8004c94 <scaraInitDuty+0xe9c>
											0, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
							}
						}

					} else {
						return SCARA_STATUS_ERROR_MODE_INIT;
 8004c8c:	2308      	movs	r3, #8
 8004c8e:	e388      	b.n	80053a2 <scaraInitDuty+0x15aa>
					}

			} else {
				return SCARA_STATUS_ERROR_TRAJECTORY;
 8004c90:	2305      	movs	r3, #5
 8004c92:	e386      	b.n	80053a2 <scaraInitDuty+0x15aa>
			}
		// Check Init Status
			if ( SCARA_STATUS_OK != status1) {
 8004c94:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d002      	beq.n	8004ca2 <scaraInitDuty+0xeaa>
				return status1;
 8004c9c:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8004ca0:	e37f      	b.n	80053a2 <scaraInitDuty+0x15aa>
			}
			if ( SCARA_STATUS_OK != status2) {
 8004ca2:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	f000 835c 	beq.w	8005364 <scaraInitDuty+0x156c>
				return status2;
 8004cac:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8004cb0:	e377      	b.n	80053a2 <scaraInitDuty+0x15aa>
			}

		//----Joint Quadra
		} else if 	( DUTY_JOINT_4DOF == command.joint_type) {
 8004cb2:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	f040 8350 	bne.w	800535c <scaraInitDuty+0x1564>
			SCARA_PositionTypeDef	target_point;
			// Change Degree --> Radian
			command.target_point.roll = command.target_point.roll*PI/180.0;
 8004cbc:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8004cc0:	a327      	add	r3, pc, #156	; (adr r3, 8004d60 <scaraInitDuty+0xf68>)
 8004cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc6:	f7fb fca7 	bl	8000618 <__aeabi_dmul>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	460c      	mov	r4, r1
 8004cce:	4618      	mov	r0, r3
 8004cd0:	4621      	mov	r1, r4
 8004cd2:	f04f 0200 	mov.w	r2, #0
 8004cd6:	4b26      	ldr	r3, [pc, #152]	; (8004d70 <scaraInitDuty+0xf78>)
 8004cd8:	f7fb fdc8 	bl	800086c <__aeabi_ddiv>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	460c      	mov	r4, r1
 8004ce0:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
			// Coordinate
			if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8004ce4:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d145      	bne.n	8004d78 <scaraInitDuty+0xf80>
				target_point.x 		= positionCurrent.x + command.target_point.x;
 8004cec:	4b21      	ldr	r3, [pc, #132]	; (8004d74 <scaraInitDuty+0xf7c>)
 8004cee:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8004cf2:	e9d7 345c 	ldrd	r3, r4, [r7, #368]	; 0x170
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	4623      	mov	r3, r4
 8004cfa:	f7fb fad7 	bl	80002ac <__adddf3>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	460c      	mov	r4, r1
 8004d02:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
				target_point.y 		= positionCurrent.y + command.target_point.y;
 8004d06:	4b1b      	ldr	r3, [pc, #108]	; (8004d74 <scaraInitDuty+0xf7c>)
 8004d08:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8004d0c:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8004d10:	461a      	mov	r2, r3
 8004d12:	4623      	mov	r3, r4
 8004d14:	f7fb faca 	bl	80002ac <__adddf3>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	460c      	mov	r4, r1
 8004d1c:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
				target_point.z 		= positionCurrent.z + command.target_point.z;
 8004d20:	4b14      	ldr	r3, [pc, #80]	; (8004d74 <scaraInitDuty+0xf7c>)
 8004d22:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004d26:	e9d7 3460 	ldrd	r3, r4, [r7, #384]	; 0x180
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	4623      	mov	r3, r4
 8004d2e:	f7fb fabd 	bl	80002ac <__adddf3>
 8004d32:	4603      	mov	r3, r0
 8004d34:	460c      	mov	r4, r1
 8004d36:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
				target_point.roll	= positionCurrent.roll + command.target_point.roll;
 8004d3a:	4b0e      	ldr	r3, [pc, #56]	; (8004d74 <scaraInitDuty+0xf7c>)
 8004d3c:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8004d40:	e9d7 3462 	ldrd	r3, r4, [r7, #392]	; 0x188
 8004d44:	461a      	mov	r2, r3
 8004d46:	4623      	mov	r3, r4
 8004d48:	f7fb fab0 	bl	80002ac <__adddf3>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	460c      	mov	r4, r1
 8004d50:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
 8004d54:	e027      	b.n	8004da6 <scaraInitDuty+0xfae>
 8004d56:	bf00      	nop
	...
 8004d60:	60000000 	.word	0x60000000
 8004d64:	400921fb 	.word	0x400921fb
 8004d68:	20005388 	.word	0x20005388
 8004d6c:	20000c7c 	.word	0x20000c7c
 8004d70:	40668000 	.word	0x40668000
 8004d74:	20005d40 	.word	0x20005d40
			} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8004d78:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d110      	bne.n	8004da2 <scaraInitDuty+0xfaa>
				target_point.x 		= command.target_point.x;
 8004d80:	e9d7 345c 	ldrd	r3, r4, [r7, #368]	; 0x170
 8004d84:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
				target_point.y 		= command.target_point.y;
 8004d88:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8004d8c:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
				target_point.z 		= command.target_point.z;
 8004d90:	e9d7 3460 	ldrd	r3, r4, [r7, #384]	; 0x180
 8004d94:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
				target_point.roll	= command.target_point.roll;
 8004d98:	e9d7 3462 	ldrd	r3, r4, [r7, #392]	; 0x188
 8004d9c:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
 8004da0:	e001      	b.n	8004da6 <scaraInitDuty+0xfae>
			} else {
				return SCARA_STATUS_ERROR_COORDINATE;
 8004da2:	230c      	movs	r3, #12
 8004da4:	e2fd      	b.n	80053a2 <scaraInitDuty+0x15aa>
			}

			if( FALSE == kinematicInverse(&target_point, positionCurrent)) {
 8004da6:	4cce      	ldr	r4, [pc, #824]	; (80050e0 <scaraInitDuty+0x12e8>)
 8004da8:	f107 0568 	add.w	r5, r7, #104	; 0x68
 8004dac:	4668      	mov	r0, sp
 8004dae:	f104 0308 	add.w	r3, r4, #8
 8004db2:	2260      	movs	r2, #96	; 0x60
 8004db4:	4619      	mov	r1, r3
 8004db6:	f00e fb93 	bl	80134e0 <memcpy>
 8004dba:	e894 000c 	ldmia.w	r4, {r2, r3}
 8004dbe:	4628      	mov	r0, r5
 8004dc0:	f7fe f8c6 	bl	8002f50 <kinematicInverse>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d101      	bne.n	8004dce <scaraInitDuty+0xfd6>
				return SCARA_STATUS_ERROR_OVER_WORKSPACE;// Exit with error
 8004dca:	2307      	movs	r3, #7
 8004dcc:	e2e9      	b.n	80053a2 <scaraInitDuty+0x15aa>
			}
			// Trajectory 4 profile
			double q[4];
			q[0] = target_point.Theta1 - positionCurrent.Theta1;
 8004dce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004dd2:	4bc3      	ldr	r3, [pc, #780]	; (80050e0 <scaraInitDuty+0x12e8>)
 8004dd4:	e9d3 3412 	ldrd	r3, r4, [r3, #72]	; 0x48
 8004dd8:	461a      	mov	r2, r3
 8004dda:	4623      	mov	r3, r4
 8004ddc:	f7fb fa64 	bl	80002a8 <__aeabi_dsub>
 8004de0:	4603      	mov	r3, r0
 8004de2:	460c      	mov	r4, r1
 8004de4:	463a      	mov	r2, r7
 8004de6:	e9c2 3400 	strd	r3, r4, [r2]
			q[1] = target_point.Theta2 - positionCurrent.Theta2;
 8004dea:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8004dee:	4bbc      	ldr	r3, [pc, #752]	; (80050e0 <scaraInitDuty+0x12e8>)
 8004df0:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 8004df4:	461a      	mov	r2, r3
 8004df6:	4623      	mov	r3, r4
 8004df8:	f7fb fa56 	bl	80002a8 <__aeabi_dsub>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	460c      	mov	r4, r1
 8004e00:	463a      	mov	r2, r7
 8004e02:	e9c2 3402 	strd	r3, r4, [r2, #8]
			q[2] = target_point.D3 	   - positionCurrent.D3;
 8004e06:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8004e0a:	4bb5      	ldr	r3, [pc, #724]	; (80050e0 <scaraInitDuty+0x12e8>)
 8004e0c:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 8004e10:	461a      	mov	r2, r3
 8004e12:	4623      	mov	r3, r4
 8004e14:	f7fb fa48 	bl	80002a8 <__aeabi_dsub>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	460c      	mov	r4, r1
 8004e1c:	463a      	mov	r2, r7
 8004e1e:	e9c2 3404 	strd	r3, r4, [r2, #16]
			q[3] = target_point.Theta4 - positionCurrent.Theta4;
 8004e22:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004e26:	4bae      	ldr	r3, [pc, #696]	; (80050e0 <scaraInitDuty+0x12e8>)
 8004e28:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	4623      	mov	r3, r4
 8004e30:	f7fb fa3a 	bl	80002a8 <__aeabi_dsub>
 8004e34:	4603      	mov	r3, r0
 8004e36:	460c      	mov	r4, r1
 8004e38:	463a      	mov	r2, r7
 8004e3a:	e9c2 3406 	strd	r3, r4, [r2, #24]

			// LSPB
			if ( DUTY_TRAJECTORY_LSPB == command.trajec_type) {
 8004e3e:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	f040 813e 	bne.w	80050c4 <scaraInitDuty+0x12cc>
				// Mode Init Time
				if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8004e48:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d159      	bne.n	8004f04 <scaraInitDuty+0x110c>
					for ( uint8_t i = 0; i < 4; i++) {
 8004e50:	2300      	movs	r3, #0
 8004e52:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
 8004e56:	e049      	b.n	8004eec <scaraInitDuty+0x10f4>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8004e58:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8004e5c:	4aa1      	ldr	r2, [pc, #644]	; (80050e4 <scaraInitDuty+0x12ec>)
 8004e5e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8004e62:	fb01 f303 	mul.w	r3, r1, r3
 8004e66:	4413      	add	r3, r2
 8004e68:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].lspb.Tf = command.time_total;
 8004e70:	f897 20db 	ldrb.w	r2, [r7, #219]	; 0xdb
 8004e74:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8004e78:	499a      	ldr	r1, [pc, #616]	; (80050e4 <scaraInitDuty+0x12ec>)
 8004e7a:	f44f 70ac 	mov.w	r0, #344	; 0x158
 8004e7e:	fb00 f202 	mul.w	r2, r0, r2
 8004e82:	440a      	add	r2, r1
 8004e84:	f502 6284 	add.w	r2, r2, #1056	; 0x420
 8004e88:	e9c2 3400 	strd	r3, r4, [r2]
						status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8004e8c:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8004e90:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8004e94:	fb02 f303 	mul.w	r3, r2, r3
 8004e98:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 8004e9c:	4a91      	ldr	r2, [pc, #580]	; (80050e4 <scaraInitDuty+0x12ec>)
 8004e9e:	1898      	adds	r0, r3, r2
 8004ea0:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8004ea4:	4a90      	ldr	r2, [pc, #576]	; (80050e8 <scaraInitDuty+0x12f0>)
 8004ea6:	5cd1      	ldrb	r1, [r2, r3]
 8004ea8:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8004eac:	463a      	mov	r2, r7
 8004eae:	00db      	lsls	r3, r3, #3
 8004eb0:	4413      	add	r3, r2
 8004eb2:	ed93 7b00 	vldr	d7, [r3]
 8004eb6:	ed97 6b86 	vldr	d6, [r7, #536]	; 0x218
 8004eba:	ed97 5b88 	vldr	d5, [r7, #544]	; 0x220
 8004ebe:	eeb0 2a45 	vmov.f32	s4, s10
 8004ec2:	eef0 2a65 	vmov.f32	s5, s11
 8004ec6:	eeb0 1a46 	vmov.f32	s2, s12
 8004eca:	eef0 1a66 	vmov.f32	s3, s13
 8004ece:	2201      	movs	r2, #1
 8004ed0:	eeb0 0a47 	vmov.f32	s0, s14
 8004ed4:	eef0 0a67 	vmov.f32	s1, s15
 8004ed8:	f000 fcb2 	bl	8005840 <scaraInitLSPB>
 8004edc:	4603      	mov	r3, r0
 8004ede:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
					for ( uint8_t i = 0; i < 4; i++) {
 8004ee2:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
 8004eec:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8004ef0:	2b03      	cmp	r3, #3
 8004ef2:	d9b1      	bls.n	8004e58 <scaraInitDuty+0x1060>
											q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);

					}
					myDUTY.time_total = command.time_total;
 8004ef4:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8004ef8:	4a7a      	ldr	r2, [pc, #488]	; (80050e4 <scaraInitDuty+0x12ec>)
 8004efa:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8004efe:	e9c2 3400 	strd	r3, r4, [r2]
 8004f02:	e22f      	b.n	8005364 <scaraInitDuty+0x156c>
				// Mode Init Acc
				} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8004f04:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	f040 80d9 	bne.w	80050c0 <scaraInitDuty+0x12c8>
					for ( uint8_t i = 0; i < 4; i++) {
 8004f0e:	2300      	movs	r3, #0
 8004f10:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
 8004f14:	e03b      	b.n	8004f8e <scaraInitDuty+0x1196>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8004f16:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
 8004f1a:	4a72      	ldr	r2, [pc, #456]	; (80050e4 <scaraInitDuty+0x12ec>)
 8004f1c:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8004f20:	fb01 f303 	mul.w	r3, r1, r3
 8004f24:	4413      	add	r3, r2
 8004f26:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	701a      	strb	r2, [r3, #0]
						status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8004f2e:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
 8004f32:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8004f36:	fb02 f303 	mul.w	r3, r2, r3
 8004f3a:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 8004f3e:	4a69      	ldr	r2, [pc, #420]	; (80050e4 <scaraInitDuty+0x12ec>)
 8004f40:	1898      	adds	r0, r3, r2
 8004f42:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
 8004f46:	4a68      	ldr	r2, [pc, #416]	; (80050e8 <scaraInitDuty+0x12f0>)
 8004f48:	5cd1      	ldrb	r1, [r2, r3]
 8004f4a:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
 8004f4e:	463a      	mov	r2, r7
 8004f50:	00db      	lsls	r3, r3, #3
 8004f52:	4413      	add	r3, r2
 8004f54:	ed93 7b00 	vldr	d7, [r3]
 8004f58:	ed97 6b86 	vldr	d6, [r7, #536]	; 0x218
 8004f5c:	ed97 5b88 	vldr	d5, [r7, #544]	; 0x220
 8004f60:	eeb0 2a45 	vmov.f32	s4, s10
 8004f64:	eef0 2a65 	vmov.f32	s5, s11
 8004f68:	eeb0 1a46 	vmov.f32	s2, s12
 8004f6c:	eef0 1a66 	vmov.f32	s3, s13
 8004f70:	2200      	movs	r2, #0
 8004f72:	eeb0 0a47 	vmov.f32	s0, s14
 8004f76:	eef0 0a67 	vmov.f32	s1, s15
 8004f7a:	f000 fc61 	bl	8005840 <scaraInitLSPB>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
					for ( uint8_t i = 0; i < 4; i++) {
 8004f84:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
 8004f88:	3301      	adds	r3, #1
 8004f8a:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
 8004f8e:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
 8004f92:	2b03      	cmp	r3, #3
 8004f94:	d9bf      	bls.n	8004f16 <scaraInitDuty+0x111e>
											q[i], DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
					}
					myDUTY.time_total = 0;
 8004f96:	4b53      	ldr	r3, [pc, #332]	; (80050e4 <scaraInitDuty+0x12ec>)
 8004f98:	f603 1248 	addw	r2, r3, #2376	; 0x948
 8004f9c:	f04f 0300 	mov.w	r3, #0
 8004fa0:	f04f 0400 	mov.w	r4, #0
 8004fa4:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 8004fa8:	2300      	movs	r3, #0
 8004faa:	f887 30d9 	strb.w	r3, [r7, #217]	; 0xd9
 8004fae:	e02d      	b.n	800500c <scaraInitDuty+0x1214>
						if ( myDUTY.joint.trajectory[i].lspb.Tf > myDUTY.time_total) {
 8004fb0:	f897 30d9 	ldrb.w	r3, [r7, #217]	; 0xd9
 8004fb4:	4a4b      	ldr	r2, [pc, #300]	; (80050e4 <scaraInitDuty+0x12ec>)
 8004fb6:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8004fba:	fb01 f303 	mul.w	r3, r1, r3
 8004fbe:	4413      	add	r3, r2
 8004fc0:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8004fc4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004fc8:	4b46      	ldr	r3, [pc, #280]	; (80050e4 <scaraInitDuty+0x12ec>)
 8004fca:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8004fce:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	4623      	mov	r3, r4
 8004fd6:	f7fb fdaf 	bl	8000b38 <__aeabi_dcmpgt>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d010      	beq.n	8005002 <scaraInitDuty+0x120a>
							myDUTY.time_total = myDUTY.joint.trajectory[i].lspb.Tf;
 8004fe0:	f897 30d9 	ldrb.w	r3, [r7, #217]	; 0xd9
 8004fe4:	4a3f      	ldr	r2, [pc, #252]	; (80050e4 <scaraInitDuty+0x12ec>)
 8004fe6:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8004fea:	fb01 f303 	mul.w	r3, r1, r3
 8004fee:	4413      	add	r3, r2
 8004ff0:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8004ff4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004ff8:	4a3a      	ldr	r2, [pc, #232]	; (80050e4 <scaraInitDuty+0x12ec>)
 8004ffa:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8004ffe:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 8005002:	f897 30d9 	ldrb.w	r3, [r7, #217]	; 0xd9
 8005006:	3301      	adds	r3, #1
 8005008:	f887 30d9 	strb.w	r3, [r7, #217]	; 0xd9
 800500c:	f897 30d9 	ldrb.w	r3, [r7, #217]	; 0xd9
 8005010:	2b03      	cmp	r3, #3
 8005012:	d9cd      	bls.n	8004fb0 <scaraInitDuty+0x11b8>
						}
					}
					for ( uint8_t i = 0; i < 4; i++) {
 8005014:	2300      	movs	r3, #0
 8005016:	f887 30d8 	strb.w	r3, [r7, #216]	; 0xd8
 800501a:	e04c      	b.n	80050b6 <scaraInitDuty+0x12be>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 800501c:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
 8005020:	4a30      	ldr	r2, [pc, #192]	; (80050e4 <scaraInitDuty+0x12ec>)
 8005022:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005026:	fb01 f303 	mul.w	r3, r1, r3
 800502a:	4413      	add	r3, r2
 800502c:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8005030:	2200      	movs	r2, #0
 8005032:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].lspb.Tf = myDUTY.time_total;
 8005034:	f897 20d8 	ldrb.w	r2, [r7, #216]	; 0xd8
 8005038:	4b2a      	ldr	r3, [pc, #168]	; (80050e4 <scaraInitDuty+0x12ec>)
 800503a:	f603 1348 	addw	r3, r3, #2376	; 0x948
 800503e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005042:	4928      	ldr	r1, [pc, #160]	; (80050e4 <scaraInitDuty+0x12ec>)
 8005044:	f44f 70ac 	mov.w	r0, #344	; 0x158
 8005048:	fb00 f202 	mul.w	r2, r0, r2
 800504c:	440a      	add	r2, r1
 800504e:	f502 6284 	add.w	r2, r2, #1056	; 0x420
 8005052:	e9c2 3400 	strd	r3, r4, [r2]
						status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8005056:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
 800505a:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800505e:	fb02 f303 	mul.w	r3, r2, r3
 8005062:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 8005066:	4a1f      	ldr	r2, [pc, #124]	; (80050e4 <scaraInitDuty+0x12ec>)
 8005068:	1898      	adds	r0, r3, r2
 800506a:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
 800506e:	4a1e      	ldr	r2, [pc, #120]	; (80050e8 <scaraInitDuty+0x12f0>)
 8005070:	5cd1      	ldrb	r1, [r2, r3]
 8005072:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
 8005076:	463a      	mov	r2, r7
 8005078:	00db      	lsls	r3, r3, #3
 800507a:	4413      	add	r3, r2
 800507c:	ed93 7b00 	vldr	d7, [r3]
 8005080:	ed97 6b86 	vldr	d6, [r7, #536]	; 0x218
 8005084:	ed97 5b88 	vldr	d5, [r7, #544]	; 0x220
 8005088:	eeb0 2a45 	vmov.f32	s4, s10
 800508c:	eef0 2a65 	vmov.f32	s5, s11
 8005090:	eeb0 1a46 	vmov.f32	s2, s12
 8005094:	eef0 1a66 	vmov.f32	s3, s13
 8005098:	2201      	movs	r2, #1
 800509a:	eeb0 0a47 	vmov.f32	s0, s14
 800509e:	eef0 0a67 	vmov.f32	s1, s15
 80050a2:	f000 fbcd 	bl	8005840 <scaraInitLSPB>
 80050a6:	4603      	mov	r3, r0
 80050a8:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
					for ( uint8_t i = 0; i < 4; i++) {
 80050ac:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
 80050b0:	3301      	adds	r3, #1
 80050b2:	f887 30d8 	strb.w	r3, [r7, #216]	; 0xd8
 80050b6:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
 80050ba:	2b03      	cmp	r3, #3
 80050bc:	d9ae      	bls.n	800501c <scaraInitDuty+0x1224>
 80050be:	e151      	b.n	8005364 <scaraInitDuty+0x156c>
											q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					}

				} else {
					return SCARA_STATUS_ERROR_MODE_INIT;
 80050c0:	2308      	movs	r3, #8
 80050c2:	e16e      	b.n	80053a2 <scaraInitDuty+0x15aa>
				}
				// SCURVE
			} else if ( DUTY_TRAJECTORY_SCURVE == command.trajec_type) {
 80050c4:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	f040 8145 	bne.w	8005358 <scaraInitDuty+0x1560>
				// Mode Init Time
				if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 80050ce:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d160      	bne.n	8005198 <scaraInitDuty+0x13a0>
					for ( uint8_t i = 0; i < 4; i++) {
 80050d6:	2300      	movs	r3, #0
 80050d8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80050dc:	e050      	b.n	8005180 <scaraInitDuty+0x1388>
 80050de:	bf00      	nop
 80050e0:	20005d40 	.word	0x20005d40
 80050e4:	20005388 	.word	0x20005388
 80050e8:	20000c7c 	.word	0x20000c7c
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 80050ec:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80050f0:	4ab0      	ldr	r2, [pc, #704]	; (80053b4 <scaraInitDuty+0x15bc>)
 80050f2:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80050f6:	fb01 f303 	mul.w	r3, r1, r3
 80050fa:	4413      	add	r3, r2
 80050fc:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8005100:	2201      	movs	r2, #1
 8005102:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].scurve.Tf = command.time_total;
 8005104:	f897 20d7 	ldrb.w	r2, [r7, #215]	; 0xd7
 8005108:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 800510c:	49a9      	ldr	r1, [pc, #676]	; (80053b4 <scaraInitDuty+0x15bc>)
 800510e:	f44f 70ac 	mov.w	r0, #344	; 0x158
 8005112:	fb00 f202 	mul.w	r2, r0, r2
 8005116:	440a      	add	r2, r1
 8005118:	f502 6296 	add.w	r2, r2, #1200	; 0x4b0
 800511c:	e9c2 3400 	strd	r3, r4, [r2]
						status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 8005120:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8005124:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8005128:	fb02 f303 	mul.w	r3, r2, r3
 800512c:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8005130:	4aa0      	ldr	r2, [pc, #640]	; (80053b4 <scaraInitDuty+0x15bc>)
 8005132:	1898      	adds	r0, r3, r2
 8005134:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8005138:	4a9f      	ldr	r2, [pc, #636]	; (80053b8 <scaraInitDuty+0x15c0>)
 800513a:	5cd1      	ldrb	r1, [r2, r3]
 800513c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8005140:	463a      	mov	r2, r7
 8005142:	00db      	lsls	r3, r3, #3
 8005144:	4413      	add	r3, r2
 8005146:	ed93 7b00 	vldr	d7, [r3]
 800514a:	ed97 6b86 	vldr	d6, [r7, #536]	; 0x218
 800514e:	ed97 5b88 	vldr	d5, [r7, #544]	; 0x220
 8005152:	eeb0 2a45 	vmov.f32	s4, s10
 8005156:	eef0 2a65 	vmov.f32	s5, s11
 800515a:	eeb0 1a46 	vmov.f32	s2, s12
 800515e:	eef0 1a66 	vmov.f32	s3, s13
 8005162:	2201      	movs	r2, #1
 8005164:	eeb0 0a47 	vmov.f32	s0, s14
 8005168:	eef0 0a67 	vmov.f32	s1, s15
 800516c:	f000 ff68 	bl	8006040 <scaraInitScurve>
 8005170:	4603      	mov	r3, r0
 8005172:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
					for ( uint8_t i = 0; i < 4; i++) {
 8005176:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 800517a:	3301      	adds	r3, #1
 800517c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8005180:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8005184:	2b03      	cmp	r3, #3
 8005186:	d9b1      	bls.n	80050ec <scaraInitDuty+0x12f4>
											q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);

					}
					myDUTY.time_total = command.time_total;
 8005188:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 800518c:	4a89      	ldr	r2, [pc, #548]	; (80053b4 <scaraInitDuty+0x15bc>)
 800518e:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8005192:	e9c2 3400 	strd	r3, r4, [r2]
 8005196:	e0e5      	b.n	8005364 <scaraInitDuty+0x156c>
				// Mode Init Acc
				} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8005198:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800519c:	2b00      	cmp	r3, #0
 800519e:	f040 80d9 	bne.w	8005354 <scaraInitDuty+0x155c>
					for ( uint8_t i = 0; i < 4; i++) {
 80051a2:	2300      	movs	r3, #0
 80051a4:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
 80051a8:	e03b      	b.n	8005222 <scaraInitDuty+0x142a>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 80051aa:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 80051ae:	4a81      	ldr	r2, [pc, #516]	; (80053b4 <scaraInitDuty+0x15bc>)
 80051b0:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80051b4:	fb01 f303 	mul.w	r3, r1, r3
 80051b8:	4413      	add	r3, r2
 80051ba:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 80051be:	2201      	movs	r2, #1
 80051c0:	701a      	strb	r2, [r3, #0]
						status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 80051c2:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 80051c6:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80051ca:	fb02 f303 	mul.w	r3, r2, r3
 80051ce:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 80051d2:	4a78      	ldr	r2, [pc, #480]	; (80053b4 <scaraInitDuty+0x15bc>)
 80051d4:	1898      	adds	r0, r3, r2
 80051d6:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 80051da:	4a77      	ldr	r2, [pc, #476]	; (80053b8 <scaraInitDuty+0x15c0>)
 80051dc:	5cd1      	ldrb	r1, [r2, r3]
 80051de:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 80051e2:	463a      	mov	r2, r7
 80051e4:	00db      	lsls	r3, r3, #3
 80051e6:	4413      	add	r3, r2
 80051e8:	ed93 7b00 	vldr	d7, [r3]
 80051ec:	ed97 6b86 	vldr	d6, [r7, #536]	; 0x218
 80051f0:	ed97 5b88 	vldr	d5, [r7, #544]	; 0x220
 80051f4:	eeb0 2a45 	vmov.f32	s4, s10
 80051f8:	eef0 2a65 	vmov.f32	s5, s11
 80051fc:	eeb0 1a46 	vmov.f32	s2, s12
 8005200:	eef0 1a66 	vmov.f32	s3, s13
 8005204:	2200      	movs	r2, #0
 8005206:	eeb0 0a47 	vmov.f32	s0, s14
 800520a:	eef0 0a67 	vmov.f32	s1, s15
 800520e:	f000 ff17 	bl	8006040 <scaraInitScurve>
 8005212:	4603      	mov	r3, r0
 8005214:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
					for ( uint8_t i = 0; i < 4; i++) {
 8005218:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 800521c:	3301      	adds	r3, #1
 800521e:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
 8005222:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 8005226:	2b03      	cmp	r3, #3
 8005228:	d9bf      	bls.n	80051aa <scaraInitDuty+0x13b2>
											q[i], DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
					}
					myDUTY.time_total = 0;
 800522a:	4b62      	ldr	r3, [pc, #392]	; (80053b4 <scaraInitDuty+0x15bc>)
 800522c:	f603 1248 	addw	r2, r3, #2376	; 0x948
 8005230:	f04f 0300 	mov.w	r3, #0
 8005234:	f04f 0400 	mov.w	r4, #0
 8005238:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 800523c:	2300      	movs	r3, #0
 800523e:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
 8005242:	e02d      	b.n	80052a0 <scaraInitDuty+0x14a8>
						if ( myDUTY.joint.trajectory[i].scurve.Tf > myDUTY.time_total) {
 8005244:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 8005248:	4a5a      	ldr	r2, [pc, #360]	; (80053b4 <scaraInitDuty+0x15bc>)
 800524a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800524e:	fb01 f303 	mul.w	r3, r1, r3
 8005252:	4413      	add	r3, r2
 8005254:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8005258:	e9d3 0100 	ldrd	r0, r1, [r3]
 800525c:	4b55      	ldr	r3, [pc, #340]	; (80053b4 <scaraInitDuty+0x15bc>)
 800525e:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8005262:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005266:	461a      	mov	r2, r3
 8005268:	4623      	mov	r3, r4
 800526a:	f7fb fc65 	bl	8000b38 <__aeabi_dcmpgt>
 800526e:	4603      	mov	r3, r0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d010      	beq.n	8005296 <scaraInitDuty+0x149e>
							myDUTY.time_total = myDUTY.joint.trajectory[i].scurve.Tf;
 8005274:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 8005278:	4a4e      	ldr	r2, [pc, #312]	; (80053b4 <scaraInitDuty+0x15bc>)
 800527a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800527e:	fb01 f303 	mul.w	r3, r1, r3
 8005282:	4413      	add	r3, r2
 8005284:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8005288:	e9d3 3400 	ldrd	r3, r4, [r3]
 800528c:	4a49      	ldr	r2, [pc, #292]	; (80053b4 <scaraInitDuty+0x15bc>)
 800528e:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8005292:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 8005296:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 800529a:	3301      	adds	r3, #1
 800529c:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
 80052a0:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 80052a4:	2b03      	cmp	r3, #3
 80052a6:	d9cd      	bls.n	8005244 <scaraInitDuty+0x144c>
						}
					}
					for ( uint8_t i = 0; i < 4; i++) {
 80052a8:	2300      	movs	r3, #0
 80052aa:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4
 80052ae:	e04c      	b.n	800534a <scaraInitDuty+0x1552>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 80052b0:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 80052b4:	4a3f      	ldr	r2, [pc, #252]	; (80053b4 <scaraInitDuty+0x15bc>)
 80052b6:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80052ba:	fb01 f303 	mul.w	r3, r1, r3
 80052be:	4413      	add	r3, r2
 80052c0:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 80052c4:	2201      	movs	r2, #1
 80052c6:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].scurve.Tf = myDUTY.time_total;
 80052c8:	f897 20d4 	ldrb.w	r2, [r7, #212]	; 0xd4
 80052cc:	4b39      	ldr	r3, [pc, #228]	; (80053b4 <scaraInitDuty+0x15bc>)
 80052ce:	f603 1348 	addw	r3, r3, #2376	; 0x948
 80052d2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80052d6:	4937      	ldr	r1, [pc, #220]	; (80053b4 <scaraInitDuty+0x15bc>)
 80052d8:	f44f 70ac 	mov.w	r0, #344	; 0x158
 80052dc:	fb00 f202 	mul.w	r2, r0, r2
 80052e0:	440a      	add	r2, r1
 80052e2:	f502 6296 	add.w	r2, r2, #1200	; 0x4b0
 80052e6:	e9c2 3400 	strd	r3, r4, [r2]
						status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 80052ea:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 80052ee:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80052f2:	fb02 f303 	mul.w	r3, r2, r3
 80052f6:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 80052fa:	4a2e      	ldr	r2, [pc, #184]	; (80053b4 <scaraInitDuty+0x15bc>)
 80052fc:	1898      	adds	r0, r3, r2
 80052fe:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 8005302:	4a2d      	ldr	r2, [pc, #180]	; (80053b8 <scaraInitDuty+0x15c0>)
 8005304:	5cd1      	ldrb	r1, [r2, r3]
 8005306:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 800530a:	463a      	mov	r2, r7
 800530c:	00db      	lsls	r3, r3, #3
 800530e:	4413      	add	r3, r2
 8005310:	ed93 7b00 	vldr	d7, [r3]
 8005314:	ed97 6b86 	vldr	d6, [r7, #536]	; 0x218
 8005318:	ed97 5b88 	vldr	d5, [r7, #544]	; 0x220
 800531c:	eeb0 2a45 	vmov.f32	s4, s10
 8005320:	eef0 2a65 	vmov.f32	s5, s11
 8005324:	eeb0 1a46 	vmov.f32	s2, s12
 8005328:	eef0 1a66 	vmov.f32	s3, s13
 800532c:	2201      	movs	r2, #1
 800532e:	eeb0 0a47 	vmov.f32	s0, s14
 8005332:	eef0 0a67 	vmov.f32	s1, s15
 8005336:	f000 fe83 	bl	8006040 <scaraInitScurve>
 800533a:	4603      	mov	r3, r0
 800533c:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
					for ( uint8_t i = 0; i < 4; i++) {
 8005340:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 8005344:	3301      	adds	r3, #1
 8005346:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4
 800534a:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 800534e:	2b03      	cmp	r3, #3
 8005350:	d9ae      	bls.n	80052b0 <scaraInitDuty+0x14b8>
 8005352:	e007      	b.n	8005364 <scaraInitDuty+0x156c>
											q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					}

				} else {
					return SCARA_STATUS_ERROR_MODE_INIT;
 8005354:	2308      	movs	r3, #8
 8005356:	e024      	b.n	80053a2 <scaraInitDuty+0x15aa>
				}

			} else {
				return SCARA_STATUS_ERROR_TRAJECTORY;
 8005358:	2305      	movs	r3, #5
 800535a:	e022      	b.n	80053a2 <scaraInitDuty+0x15aa>
			}

		} else {
			return SCARA_STATUS_ERROR_JOINT;
 800535c:	2304      	movs	r3, #4
 800535e:	e020      	b.n	80053a2 <scaraInitDuty+0x15aa>
		}

	} else {
		return SCARA_STATUS_ERROR_SPACE;
 8005360:	2302      	movs	r3, #2
 8005362:	e01e      	b.n	80053a2 <scaraInitDuty+0x15aa>
	}

	// Reset time and distance
	positionCurrent.t = 0;
 8005364:	4a15      	ldr	r2, [pc, #84]	; (80053bc <scaraInitDuty+0x15c4>)
 8005366:	f04f 0300 	mov.w	r3, #0
 800536a:	f04f 0400 	mov.w	r4, #0
 800536e:	e9c2 3406 	strd	r3, r4, [r2, #24]
	positionCurrent.total_time = myDUTY.time_total;
 8005372:	4b10      	ldr	r3, [pc, #64]	; (80053b4 <scaraInitDuty+0x15bc>)
 8005374:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8005378:	e9d3 3400 	ldrd	r3, r4, [r3]
 800537c:	4a0f      	ldr	r2, [pc, #60]	; (80053bc <scaraInitDuty+0x15c4>)
 800537e:	e9c2 3408 	strd	r3, r4, [r2, #32]
	positionNext.t = 0;
 8005382:	4a0f      	ldr	r2, [pc, #60]	; (80053c0 <scaraInitDuty+0x15c8>)
 8005384:	f04f 0300 	mov.w	r3, #0
 8005388:	f04f 0400 	mov.w	r4, #0
 800538c:	e9c2 3406 	strd	r3, r4, [r2, #24]
	positionNext.total_time = myDUTY.time_total;
 8005390:	4b08      	ldr	r3, [pc, #32]	; (80053b4 <scaraInitDuty+0x15bc>)
 8005392:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8005396:	e9d3 3400 	ldrd	r3, r4, [r3]
 800539a:	4a09      	ldr	r2, [pc, #36]	; (80053c0 <scaraInitDuty+0x15c8>)
 800539c:	e9c2 3408 	strd	r3, r4, [r2, #32]
	return SCARA_STATUS_OK;
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80053a8:	46bd      	mov	sp, r7
 80053aa:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80053ae:	b004      	add	sp, #16
 80053b0:	4770      	bx	lr
 80053b2:	bf00      	nop
 80053b4:	20005388 	.word	0x20005388
 80053b8:	20000c7c 	.word	0x20000c7c
 80053bc:	20005d40 	.word	0x20005d40
 80053c0:	20005da8 	.word	0x20005da8

080053c4 <scaraInitLine>:

/* Compute straight line path parameters */
SCARA_StatusTypeDef	scaraInitLine		(Path_Line_TypeDef *line,
										SCARA_PositionTypeDef start,
										SCARA_PositionTypeDef end) {
 80053c4:	b082      	sub	sp, #8
 80053c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053c8:	b09b      	sub	sp, #108	; 0x6c
 80053ca:	af18      	add	r7, sp, #96	; 0x60
 80053cc:	6078      	str	r0, [r7, #4]
 80053ce:	f107 0120 	add.w	r1, r7, #32
 80053d2:	e881 000c 	stmia.w	r1, {r2, r3}
	// Check limit workspace
	if ( FALSE ==  kinematicInverse(&end, start)) {
 80053d6:	f107 0488 	add.w	r4, r7, #136	; 0x88
 80053da:	4668      	mov	r0, sp
 80053dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80053e0:	2260      	movs	r2, #96	; 0x60
 80053e2:	4619      	mov	r1, r3
 80053e4:	f00e f87c 	bl	80134e0 <memcpy>
 80053e8:	f107 0320 	add.w	r3, r7, #32
 80053ec:	cb0c      	ldmia	r3, {r2, r3}
 80053ee:	4620      	mov	r0, r4
 80053f0:	f7fd fdae 	bl	8002f50 <kinematicInverse>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d101      	bne.n	80053fe <scaraInitLine+0x3a>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 80053fa:	2307      	movs	r3, #7
 80053fc:	e09e      	b.n	800553c <scaraInitLine+0x178>
	}
	// Init line params
	line->x1 = end.x;
 80053fe:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	e9c2 3402 	strd	r3, r4, [r2, #8]
	line->y1 = end.y;
 8005408:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	e9c2 3406 	strd	r3, r4, [r2, #24]
	line->z1 = end.z;
 8005412:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	line->x0 = start.x;
 800541c:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	e9c2 3400 	strd	r3, r4, [r2]
	line->y0 = start.y;
 8005426:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	e9c2 3404 	strd	r3, r4, [r2, #16]
	line->z0 = start.z;
 8005430:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	e9c2 3408 	strd	r3, r4, [r2, #32]
	line->denta_x = end.x  -  start.x;
 800543a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800543e:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8005442:	461a      	mov	r2, r3
 8005444:	4623      	mov	r3, r4
 8005446:	f7fa ff2f 	bl	80002a8 <__aeabi_dsub>
 800544a:	4603      	mov	r3, r0
 800544c:	460c      	mov	r4, r1
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	line->denta_y = end.y  -  start.y;
 8005454:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8005458:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800545c:	461a      	mov	r2, r3
 800545e:	4623      	mov	r3, r4
 8005460:	f7fa ff22 	bl	80002a8 <__aeabi_dsub>
 8005464:	4603      	mov	r3, r0
 8005466:	460c      	mov	r4, r1
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	line->denta_z = end.z  -  start.z;
 800546e:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8005472:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8005476:	461a      	mov	r2, r3
 8005478:	4623      	mov	r3, r4
 800547a:	f7fa ff15 	bl	80002a8 <__aeabi_dsub>
 800547e:	4603      	mov	r3, r0
 8005480:	460c      	mov	r4, r1
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	line->total_s = sqrt((line->denta_x)*(line->denta_x)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8005494:	461a      	mov	r2, r3
 8005496:	4623      	mov	r3, r4
 8005498:	f7fb f8be 	bl	8000618 <__aeabi_dmul>
 800549c:	4603      	mov	r3, r0
 800549e:	460c      	mov	r4, r1
 80054a0:	461d      	mov	r5, r3
 80054a2:	4626      	mov	r6, r4
			       +(line->denta_y)*(line->denta_y)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 80054b0:	461a      	mov	r2, r3
 80054b2:	4623      	mov	r3, r4
 80054b4:	f7fb f8b0 	bl	8000618 <__aeabi_dmul>
 80054b8:	4603      	mov	r3, r0
 80054ba:	460c      	mov	r4, r1
 80054bc:	461a      	mov	r2, r3
 80054be:	4623      	mov	r3, r4
 80054c0:	4628      	mov	r0, r5
 80054c2:	4631      	mov	r1, r6
 80054c4:	f7fa fef2 	bl	80002ac <__adddf3>
 80054c8:	4603      	mov	r3, r0
 80054ca:	460c      	mov	r4, r1
 80054cc:	461d      	mov	r5, r3
 80054ce:	4626      	mov	r6, r4
				   +(line->denta_z)*(line->denta_z));
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	e9d3 3410 	ldrd	r3, r4, [r3, #64]	; 0x40
 80054dc:	461a      	mov	r2, r3
 80054de:	4623      	mov	r3, r4
 80054e0:	f7fb f89a 	bl	8000618 <__aeabi_dmul>
 80054e4:	4603      	mov	r3, r0
 80054e6:	460c      	mov	r4, r1
	line->total_s = sqrt((line->denta_x)*(line->denta_x)
 80054e8:	461a      	mov	r2, r3
 80054ea:	4623      	mov	r3, r4
 80054ec:	4628      	mov	r0, r5
 80054ee:	4631      	mov	r1, r6
 80054f0:	f7fa fedc 	bl	80002ac <__adddf3>
 80054f4:	4603      	mov	r3, r0
 80054f6:	460c      	mov	r4, r1
 80054f8:	ec44 3b17 	vmov	d7, r3, r4
 80054fc:	eeb0 0a47 	vmov.f32	s0, s14
 8005500:	eef0 0a67 	vmov.f32	s1, s15
 8005504:	f012 fb36 	bl	8017b74 <sqrt>
 8005508:	eeb0 7a40 	vmov.f32	s14, s0
 800550c:	eef0 7a60 	vmov.f32	s15, s1
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
	line->x_current = line->x0;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	e9d3 3400 	ldrd	r3, r4, [r3]
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	line->y_current = line->y0;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	line->z_current = line->z0;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8005534:	687a      	ldr	r2, [r7, #4]
 8005536:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68

	return SCARA_STATUS_OK;
 800553a:	2300      	movs	r3, #0
}
 800553c:	4618      	mov	r0, r3
 800553e:	370c      	adds	r7, #12
 8005540:	46bd      	mov	sp, r7
 8005542:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8005546:	b002      	add	sp, #8
 8005548:	4770      	bx	lr
 800554a:	0000      	movs	r0, r0
 800554c:	0000      	movs	r0, r0
	...

08005550 <scaraInitCircle>:
/* Compute circular path parameters */
SCARA_StatusTypeDef	scaraInitCircle		(Path_Circle_TypeDef *circle,
										SCARA_PositionTypeDef start,
										SCARA_PositionTypeDef end,
										SCARA_PositionTypeDef center,
										int32_t dir){
 8005550:	b082      	sub	sp, #8
 8005552:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005556:	b0ad      	sub	sp, #180	; 0xb4
 8005558:	af18      	add	r7, sp, #96	; 0x60
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8005560:	e881 000c 	stmia.w	r1, {r2, r3}
	// Check limit workspace
	if ( FALSE == kinematicInverse(&end, start) ) {
 8005564:	f107 06d8 	add.w	r6, r7, #216	; 0xd8
 8005568:	4668      	mov	r0, sp
 800556a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800556e:	2260      	movs	r2, #96	; 0x60
 8005570:	4619      	mov	r1, r3
 8005572:	f00d ffb5 	bl	80134e0 <memcpy>
 8005576:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800557a:	cb0c      	ldmia	r3, {r2, r3}
 800557c:	4630      	mov	r0, r6
 800557e:	f7fd fce7 	bl	8002f50 <kinematicInverse>
 8005582:	4603      	mov	r3, r0
 8005584:	2b00      	cmp	r3, #0
 8005586:	d101      	bne.n	800558c <scaraInitCircle+0x3c>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8005588:	2307      	movs	r3, #7
 800558a:	e146      	b.n	800581a <scaraInitCircle+0x2ca>
	}

	if( 1 != dir && -1 != dir) {
 800558c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8005590:	2b01      	cmp	r3, #1
 8005592:	d006      	beq.n	80055a2 <scaraInitCircle+0x52>
 8005594:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8005598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800559c:	d001      	beq.n	80055a2 <scaraInitCircle+0x52>
		return SCARA_STATUS_ERROR_PARA;// error direction param !!!
 800559e:	2306      	movs	r3, #6
 80055a0:	e13b      	b.n	800581a <scaraInitCircle+0x2ca>
	}

	double v_x_start, v_y_start, v_x_stop, v_y_stop;
	double r1, r2, angle_start, angle_stop, delta_angle;
	v_x_start = start.x - center.x;
 80055a2:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80055a6:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 80055aa:	f7fa fe7d 	bl	80002a8 <__aeabi_dsub>
 80055ae:	4602      	mov	r2, r0
 80055b0:	460b      	mov	r3, r1
 80055b2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	v_y_start = start.y - center.y;
 80055b6:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80055ba:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 80055be:	f7fa fe73 	bl	80002a8 <__aeabi_dsub>
 80055c2:	4602      	mov	r2, r0
 80055c4:	460b      	mov	r3, r1
 80055c6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	v_x_stop  = end.x  - center.x;
 80055ca:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 80055ce:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 80055d2:	f7fa fe69 	bl	80002a8 <__aeabi_dsub>
 80055d6:	4602      	mov	r2, r0
 80055d8:	460b      	mov	r3, r1
 80055da:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	v_y_stop  = end.y  - center.y;
 80055de:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 80055e2:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 80055e6:	f7fa fe5f 	bl	80002a8 <__aeabi_dsub>
 80055ea:	4602      	mov	r2, r0
 80055ec:	460b      	mov	r3, r1
 80055ee:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	r1 = sqrt(v_x_start*v_x_start + v_y_start*v_y_start);
 80055f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80055f6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80055fa:	f7fb f80d 	bl	8000618 <__aeabi_dmul>
 80055fe:	4602      	mov	r2, r0
 8005600:	460b      	mov	r3, r1
 8005602:	4690      	mov	r8, r2
 8005604:	4699      	mov	r9, r3
 8005606:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800560a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800560e:	f7fb f803 	bl	8000618 <__aeabi_dmul>
 8005612:	4602      	mov	r2, r0
 8005614:	460b      	mov	r3, r1
 8005616:	4640      	mov	r0, r8
 8005618:	4649      	mov	r1, r9
 800561a:	f7fa fe47 	bl	80002ac <__adddf3>
 800561e:	4602      	mov	r2, r0
 8005620:	460b      	mov	r3, r1
 8005622:	ec43 2b17 	vmov	d7, r2, r3
 8005626:	eeb0 0a47 	vmov.f32	s0, s14
 800562a:	eef0 0a67 	vmov.f32	s1, s15
 800562e:	f012 faa1 	bl	8017b74 <sqrt>
 8005632:	ed87 0b08 	vstr	d0, [r7, #32]
	r2 = sqrt(v_x_stop*v_x_stop + v_y_stop*v_y_stop);
 8005636:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800563a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800563e:	f7fa ffeb 	bl	8000618 <__aeabi_dmul>
 8005642:	4602      	mov	r2, r0
 8005644:	460b      	mov	r3, r1
 8005646:	4690      	mov	r8, r2
 8005648:	4699      	mov	r9, r3
 800564a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800564e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005652:	f7fa ffe1 	bl	8000618 <__aeabi_dmul>
 8005656:	4602      	mov	r2, r0
 8005658:	460b      	mov	r3, r1
 800565a:	4640      	mov	r0, r8
 800565c:	4649      	mov	r1, r9
 800565e:	f7fa fe25 	bl	80002ac <__adddf3>
 8005662:	4602      	mov	r2, r0
 8005664:	460b      	mov	r3, r1
 8005666:	ec43 2b17 	vmov	d7, r2, r3
 800566a:	eeb0 0a47 	vmov.f32	s0, s14
 800566e:	eef0 0a67 	vmov.f32	s1, s15
 8005672:	f012 fa7f 	bl	8017b74 <sqrt>
 8005676:	ed87 0b06 	vstr	d0, [r7, #24]

	if( 1.0 < fabs(r1 - r2)) {
 800567a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800567e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005682:	f7fa fe11 	bl	80002a8 <__aeabi_dsub>
 8005686:	4602      	mov	r2, r0
 8005688:	460b      	mov	r3, r1
 800568a:	4614      	mov	r4, r2
 800568c:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8005690:	f04f 0200 	mov.w	r2, #0
 8005694:	4b68      	ldr	r3, [pc, #416]	; (8005838 <scaraInitCircle+0x2e8>)
 8005696:	4620      	mov	r0, r4
 8005698:	4629      	mov	r1, r5
 800569a:	f7fb fa4d 	bl	8000b38 <__aeabi_dcmpgt>
 800569e:	4603      	mov	r3, r0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d001      	beq.n	80056a8 <scaraInitCircle+0x158>
		return SCARA_STATUS_ERROR_PARA; //start & stop are not in a circle together !!
 80056a4:	2306      	movs	r3, #6
 80056a6:	e0b8      	b.n	800581a <scaraInitCircle+0x2ca>
	}

	if (r1 < 0.1 || r2 < 0.1) {
 80056a8:	a35f      	add	r3, pc, #380	; (adr r3, 8005828 <scaraInitCircle+0x2d8>)
 80056aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ae:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80056b2:	f7fb fa23 	bl	8000afc <__aeabi_dcmplt>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d109      	bne.n	80056d0 <scaraInitCircle+0x180>
 80056bc:	a35a      	add	r3, pc, #360	; (adr r3, 8005828 <scaraInitCircle+0x2d8>)
 80056be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80056c6:	f7fb fa19 	bl	8000afc <__aeabi_dcmplt>
 80056ca:	4603      	mov	r3, r0
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d001      	beq.n	80056d4 <scaraInitCircle+0x184>
		return SCARA_STATUS_ERROR_PARA; //start and center almost in the same phace, radius = 0 !!
 80056d0:	2306      	movs	r3, #6
 80056d2:	e0a2      	b.n	800581a <scaraInitCircle+0x2ca>
	}

	angle_start = atan2(v_y_start, v_x_start);
 80056d4:	ed97 1b10 	vldr	d1, [r7, #64]	; 0x40
 80056d8:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 80056dc:	f012 fa48 	bl	8017b70 <atan2>
 80056e0:	ed87 0b04 	vstr	d0, [r7, #16]
	angle_stop  = atan2(v_y_stop, v_x_stop);
 80056e4:	ed97 1b0c 	vldr	d1, [r7, #48]	; 0x30
 80056e8:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 80056ec:	f012 fa40 	bl	8017b70 <atan2>
 80056f0:	ed87 0b02 	vstr	d0, [r7, #8]
	delta_angle = angle_stop - angle_start;
 80056f4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80056f8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80056fc:	f7fa fdd4 	bl	80002a8 <__aeabi_dsub>
 8005700:	4603      	mov	r3, r0
 8005702:	460c      	mov	r4, r1
 8005704:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48

	if ( 0 > delta_angle) {
 8005708:	f04f 0200 	mov.w	r2, #0
 800570c:	f04f 0300 	mov.w	r3, #0
 8005710:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005714:	f7fb f9f2 	bl	8000afc <__aeabi_dcmplt>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d00a      	beq.n	8005734 <scaraInitCircle+0x1e4>
		delta_angle += 2*PI;
 800571e:	a344      	add	r3, pc, #272	; (adr r3, 8005830 <scaraInitCircle+0x2e0>)
 8005720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005724:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005728:	f7fa fdc0 	bl	80002ac <__adddf3>
 800572c:	4603      	mov	r3, r0
 800572e:	460c      	mov	r4, r1
 8005730:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
	} // atan2 range : -PI --> PI

	if ( 0 > dir) {
 8005734:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8005738:	2b00      	cmp	r3, #0
 800573a:	da0a      	bge.n	8005752 <scaraInitCircle+0x202>
		delta_angle = 2*PI - delta_angle;
 800573c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005740:	a13b      	add	r1, pc, #236	; (adr r1, 8005830 <scaraInitCircle+0x2e0>)
 8005742:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005746:	f7fa fdaf 	bl	80002a8 <__aeabi_dsub>
 800574a:	4603      	mov	r3, r0
 800574c:	460c      	mov	r4, r1
 800574e:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
	}
	// Init circle params
	circle->dir = dir;
 8005752:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8005756:	b25a      	sxtb	r2, r3
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	701a      	strb	r2, [r3, #0]
	circle->radius = r1;
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8005762:	e9c2 3402 	strd	r3, r4, [r2, #8]
	circle->angle_start = angle_start;
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800576c:	e9c2 3404 	strd	r3, r4, [r2, #16]
	circle->angle_stop  = angle_stop;
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8005776:	e9c2 3406 	strd	r3, r4, [r2, #24]
	circle->total_angle = delta_angle;
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8005780:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	circle->total_s = delta_angle*r1;
 8005784:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005788:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800578c:	f7fa ff44 	bl	8000618 <__aeabi_dmul>
 8005790:	4603      	mov	r3, r0
 8005792:	460c      	mov	r4, r1
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
	circle->x0 = start.x;
 800579a:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	e9c2 3408 	strd	r3, r4, [r2, #32]
	circle->y0 = start.y;
 80057a4:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	circle->x1 = end.x;
 80057ae:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	circle->y1 = end.y;
 80057b8:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	circle->xi = center.x;
 80057c2:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	circle->yi = center.y;
 80057cc:	e9d7 345c 	ldrd	r3, r4, [r7, #368]	; 0x170
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	circle->z0 = start.z;
 80057d6:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	circle->z1 = start.z;
 80057e0:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	circle->zi = start.z;
 80057ea:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	circle->x_current = circle->x0;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	circle->y_current = circle->y0;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
	circle->z_current = circle->z0;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88

	return SCARA_STATUS_OK;
 8005818:	2300      	movs	r3, #0
}
 800581a:	4618      	mov	r0, r3
 800581c:	3754      	adds	r7, #84	; 0x54
 800581e:	46bd      	mov	sp, r7
 8005820:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005824:	b002      	add	sp, #8
 8005826:	4770      	bx	lr
 8005828:	9999999a 	.word	0x9999999a
 800582c:	3fb99999 	.word	0x3fb99999
 8005830:	60000000 	.word	0x60000000
 8005834:	401921fb 	.word	0x401921fb
 8005838:	3ff00000 	.word	0x3ff00000
 800583c:	00000000 	.word	0x00000000

08005840 <scaraInitLSPB>:
SCARA_StatusTypeDef	scaraInitLSPB		(Trajectory_LSPB_TypeDef *lspb,
										Trajectory_TargetTypeDef target,
										double total_s,
										ModeInitTypeDef modeinit,
										double v_factor,
										double a_factor) {
 8005840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005844:	b0ad      	sub	sp, #180	; 0xb4
 8005846:	af00      	add	r7, sp, #0
 8005848:	62f8      	str	r0, [r7, #44]	; 0x2c
 800584a:	460b      	mov	r3, r1
 800584c:	ed87 0b08 	vstr	d0, [r7, #32]
 8005850:	ed87 1b06 	vstr	d1, [r7, #24]
 8005854:	ed87 2b04 	vstr	d2, [r7, #16]
 8005858:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800585c:	4613      	mov	r3, r2
 800585e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	 double v_design, a_design, v_lim, q0, q1, v0, v1, ta, td, tf;
	 uint32_t	no_sample;
	 int8_t	dir;

	 if ( TRAJECTORY_3D == target) {
 8005862:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005866:	2b04      	cmp	r3, #4
 8005868:	d118      	bne.n	800589c <scaraInitLSPB+0x5c>
		 v_design = V_DESIGN_3D*v_factor;
 800586a:	f20f 7380 	addw	r3, pc, #1920	; 0x780
 800586e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005872:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005876:	f7fa fecf 	bl	8000618 <__aeabi_dmul>
 800587a:	4603      	mov	r3, r0
 800587c:	460c      	mov	r4, r1
 800587e:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_3D*a_factor;
 8005882:	f20f 7370 	addw	r3, pc, #1904	; 0x770
 8005886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800588a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800588e:	f7fa fec3 	bl	8000618 <__aeabi_dmul>
 8005892:	4603      	mov	r3, r0
 8005894:	460c      	mov	r4, r1
 8005896:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 800589a:	e092      	b.n	80059c2 <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_ROLL == target) {
 800589c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80058a0:	2b05      	cmp	r3, #5
 80058a2:	d118      	bne.n	80058d6 <scaraInitLSPB+0x96>
		 v_design = V_DESIGN_ROLL*v_factor;
 80058a4:	f20f 7354 	addw	r3, pc, #1876	; 0x754
 80058a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ac:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80058b0:	f7fa feb2 	bl	8000618 <__aeabi_dmul>
 80058b4:	4603      	mov	r3, r0
 80058b6:	460c      	mov	r4, r1
 80058b8:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_ROLL*a_factor;
 80058bc:	f20f 7344 	addw	r3, pc, #1860	; 0x744
 80058c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80058c8:	f7fa fea6 	bl	8000618 <__aeabi_dmul>
 80058cc:	4603      	mov	r3, r0
 80058ce:	460c      	mov	r4, r1
 80058d0:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 80058d4:	e075      	b.n	80059c2 <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J0 == target) {
 80058d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d118      	bne.n	8005910 <scaraInitLSPB+0xd0>
		 v_design = V_DESIGN_J0*v_factor;
 80058de:	f20f 732c 	addw	r3, pc, #1836	; 0x72c
 80058e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80058ea:	f7fa fe95 	bl	8000618 <__aeabi_dmul>
 80058ee:	4603      	mov	r3, r0
 80058f0:	460c      	mov	r4, r1
 80058f2:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J0*a_factor;
 80058f6:	f20f 731c 	addw	r3, pc, #1820	; 0x71c
 80058fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058fe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005902:	f7fa fe89 	bl	8000618 <__aeabi_dmul>
 8005906:	4603      	mov	r3, r0
 8005908:	460c      	mov	r4, r1
 800590a:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 800590e:	e058      	b.n	80059c2 <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J1 == target) {
 8005910:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005914:	2b01      	cmp	r3, #1
 8005916:	d118      	bne.n	800594a <scaraInitLSPB+0x10a>
		 v_design = V_DESIGN_J1*v_factor;
 8005918:	f20f 7300 	addw	r3, pc, #1792	; 0x700
 800591c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005920:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005924:	f7fa fe78 	bl	8000618 <__aeabi_dmul>
 8005928:	4603      	mov	r3, r0
 800592a:	460c      	mov	r4, r1
 800592c:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J1*a_factor;
 8005930:	f20f 63f0 	addw	r3, pc, #1776	; 0x6f0
 8005934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005938:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800593c:	f7fa fe6c 	bl	8000618 <__aeabi_dmul>
 8005940:	4603      	mov	r3, r0
 8005942:	460c      	mov	r4, r1
 8005944:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 8005948:	e03b      	b.n	80059c2 <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J2 == target) {
 800594a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800594e:	2b02      	cmp	r3, #2
 8005950:	d118      	bne.n	8005984 <scaraInitLSPB+0x144>
		 v_design = V_DESIGN_J2*v_factor;
 8005952:	f20f 6398 	addw	r3, pc, #1688	; 0x698
 8005956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800595a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800595e:	f7fa fe5b 	bl	8000618 <__aeabi_dmul>
 8005962:	4603      	mov	r3, r0
 8005964:	460c      	mov	r4, r1
 8005966:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J2*a_factor;
 800596a:	f20f 6388 	addw	r3, pc, #1672	; 0x688
 800596e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005972:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005976:	f7fa fe4f 	bl	8000618 <__aeabi_dmul>
 800597a:	4603      	mov	r3, r0
 800597c:	460c      	mov	r4, r1
 800597e:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 8005982:	e01e      	b.n	80059c2 <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J3 == target) {
 8005984:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005988:	2b03      	cmp	r3, #3
 800598a:	d118      	bne.n	80059be <scaraInitLSPB+0x17e>
		 v_design = V_DESIGN_J3*v_factor;
 800598c:	f20f 636c 	addw	r3, pc, #1644	; 0x66c
 8005990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005994:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005998:	f7fa fe3e 	bl	8000618 <__aeabi_dmul>
 800599c:	4603      	mov	r3, r0
 800599e:	460c      	mov	r4, r1
 80059a0:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J3*a_factor;
 80059a4:	f20f 635c 	addw	r3, pc, #1628	; 0x65c
 80059a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80059b0:	f7fa fe32 	bl	8000618 <__aeabi_dmul>
 80059b4:	4603      	mov	r3, r0
 80059b6:	460c      	mov	r4, r1
 80059b8:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 80059bc:	e001      	b.n	80059c2 <scaraInitLSPB+0x182>
	 } else {
		 return SCARA_STATUS_ERROR_PARA;
 80059be:	2306      	movs	r3, #6
 80059c0:	e309      	b.n	8005fd6 <scaraInitLSPB+0x796>
	 }

	 q0 = 0;
 80059c2:	f04f 0300 	mov.w	r3, #0
 80059c6:	f04f 0400 	mov.w	r4, #0
 80059ca:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	 q1 = total_s;
 80059ce:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80059d2:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
	 v0 = 0;
 80059d6:	f04f 0300 	mov.w	r3, #0
 80059da:	f04f 0400 	mov.w	r4, #0
 80059de:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	 v1 = 0;
 80059e2:	f04f 0300 	mov.w	r3, #0
 80059e6:	f04f 0400 	mov.w	r4, #0
 80059ea:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50

	 if ( q0 <= q1) {
 80059ee:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80059f2:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80059f6:	f7fb f88b 	bl	8000b10 <__aeabi_dcmple>
 80059fa:	4603      	mov	r3, r0
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d003      	beq.n	8005a08 <scaraInitLSPB+0x1c8>
		 dir = 1;
 8005a00:	2301      	movs	r3, #1
 8005a02:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8005a06:	e00c      	b.n	8005a22 <scaraInitLSPB+0x1e2>
	 } else {
		 dir = -1;
 8005a08:	23ff      	movs	r3, #255	; 0xff
 8005a0a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		 q1 = -q1;
 8005a0e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005a12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005a16:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005a1a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005a1e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	 }

	 if (DUTY_MODE_INIT_QVT == modeinit) {
 8005a22:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	f040 80ad 	bne.w	8005b86 <scaraInitLSPB+0x346>
		 double v_lower, v_upper, tc_upper, a_upper;
		 tf = lspb->Tf;
 8005a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a2e:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 8005a32:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
		 // Avoid division by 0
		 if (tf > 0.001) {
 8005a36:	f20f 53f4 	addw	r3, pc, #1524	; 0x5f4
 8005a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a3e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8005a42:	f7fb f879 	bl	8000b38 <__aeabi_dcmpgt>
 8005a46:	4603      	mov	r3, r0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	f000 8090 	beq.w	8005b6e <scaraInitLSPB+0x32e>
			 v_lower 	= (q1 - q0) / tf;
 8005a4e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005a52:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8005a56:	f7fa fc27 	bl	80002a8 <__aeabi_dsub>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	460c      	mov	r4, r1
 8005a5e:	4618      	mov	r0, r3
 8005a60:	4621      	mov	r1, r4
 8005a62:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8005a66:	f7fa ff01 	bl	800086c <__aeabi_ddiv>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	460c      	mov	r4, r1
 8005a6e:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
			 v_upper 	= 2*(q1 - q0) / tf;
 8005a72:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005a76:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8005a7a:	f7fa fc15 	bl	80002a8 <__aeabi_dsub>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	460c      	mov	r4, r1
 8005a82:	4618      	mov	r0, r3
 8005a84:	4621      	mov	r1, r4
 8005a86:	4602      	mov	r2, r0
 8005a88:	460b      	mov	r3, r1
 8005a8a:	f7fa fc0f 	bl	80002ac <__adddf3>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	460c      	mov	r4, r1
 8005a92:	4618      	mov	r0, r3
 8005a94:	4621      	mov	r1, r4
 8005a96:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8005a9a:	f7fa fee7 	bl	800086c <__aeabi_ddiv>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	460c      	mov	r4, r1
 8005aa2:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

			 if ( v_design < v_lower) {
 8005aa6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005aaa:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8005aae:	f7fb f825 	bl	8000afc <__aeabi_dcmplt>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d001      	beq.n	8005abc <scaraInitLSPB+0x27c>
				 return SCARA_STATUS_ERROR_OVER_VELOC;
 8005ab8:	2309      	movs	r3, #9
 8005aba:	e28c      	b.n	8005fd6 <scaraInitLSPB+0x796>
			 } else {
				 if ( v_upper <= v_design) {
 8005abc:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8005ac0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8005ac4:	f7fb f824 	bl	8000b10 <__aeabi_dcmple>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d003      	beq.n	8005ad6 <scaraInitLSPB+0x296>
					 v_design = v_upper;
 8005ace:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8005ad2:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
				 }
				 // Avoid division by 0
				 if (v_design > 0.0000001) {
 8005ad6:	f20f 535c 	addw	r3, pc, #1372	; 0x55c
 8005ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ade:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8005ae2:	f7fb f829 	bl	8000b38 <__aeabi_dcmpgt>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d01a      	beq.n	8005b22 <scaraInitLSPB+0x2e2>
					 tc_upper	= tf - (q1 - q0)/v_design;
 8005aec:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005af0:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8005af4:	f7fa fbd8 	bl	80002a8 <__aeabi_dsub>
 8005af8:	4603      	mov	r3, r0
 8005afa:	460c      	mov	r4, r1
 8005afc:	4618      	mov	r0, r3
 8005afe:	4621      	mov	r1, r4
 8005b00:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8005b04:	f7fa feb2 	bl	800086c <__aeabi_ddiv>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	460c      	mov	r4, r1
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	4623      	mov	r3, r4
 8005b10:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8005b14:	f7fa fbc8 	bl	80002a8 <__aeabi_dsub>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	460c      	mov	r4, r1
 8005b1c:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
 8005b20:	e00b      	b.n	8005b3a <scaraInitLSPB+0x2fa>
				 } else {
					 tc_upper = tf / 2;
 8005b22:	f04f 0200 	mov.w	r2, #0
 8005b26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005b2a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8005b2e:	f7fa fe9d 	bl	800086c <__aeabi_ddiv>
 8005b32:	4603      	mov	r3, r0
 8005b34:	460c      	mov	r4, r1
 8005b36:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
				 }
				 a_upper	= v_design/tc_upper;
 8005b3a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8005b3e:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8005b42:	f7fa fe93 	bl	800086c <__aeabi_ddiv>
 8005b46:	4603      	mov	r3, r0
 8005b48:	460c      	mov	r4, r1
 8005b4a:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
				 if ( a_upper > a_design) {
 8005b4e:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8005b52:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8005b56:	f7fa ffef 	bl	8000b38 <__aeabi_dcmpgt>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d001      	beq.n	8005b64 <scaraInitLSPB+0x324>
					 return SCARA_STATUS_ERROR_OVER_ACCEL;
 8005b60:	230a      	movs	r3, #10
 8005b62:	e238      	b.n	8005fd6 <scaraInitLSPB+0x796>
				 } else {
					 a_design = a_upper;
 8005b64:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8005b68:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 8005b6c:	e00b      	b.n	8005b86 <scaraInitLSPB+0x346>
				 }
			 }
		 } else {
			 v_design = 0;
 8005b6e:	f04f 0300 	mov.w	r3, #0
 8005b72:	f04f 0400 	mov.w	r4, #0
 8005b76:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
			 a_design = 0;
 8005b7a:	f04f 0300 	mov.w	r3, #0
 8005b7e:	f04f 0400 	mov.w	r4, #0
 8005b82:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
		 }
	}

	 // Check condition trapezoidal ---> triangle
	 // Avoid division by 0
	 if (a_design > 0.0000001 && v_design > 0.0000001) {
 8005b86:	f20f 43ac 	addw	r3, pc, #1196	; 0x4ac
 8005b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b8e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8005b92:	f7fa ffd1 	bl	8000b38 <__aeabi_dcmpgt>
 8005b96:	4603      	mov	r3, r0
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	f000 819c 	beq.w	8005ed6 <scaraInitLSPB+0x696>
 8005b9e:	f20f 4394 	addw	r3, pc, #1172	; 0x494
 8005ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba6:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8005baa:	f7fa ffc5 	bl	8000b38 <__aeabi_dcmpgt>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	f000 8190 	beq.w	8005ed6 <scaraInitLSPB+0x696>
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 8005bb6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005bba:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8005bbe:	f7fa fb73 	bl	80002a8 <__aeabi_dsub>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	460c      	mov	r4, r1
 8005bc6:	461d      	mov	r5, r3
 8005bc8:	f024 4600 	bic.w	r6, r4, #2147483648	; 0x80000000
 8005bcc:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8005bd0:	4628      	mov	r0, r5
 8005bd2:	4631      	mov	r1, r6
 8005bd4:	f7fa fd20 	bl	8000618 <__aeabi_dmul>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	460c      	mov	r4, r1
 8005bdc:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8005be0:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8005be4:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8005be8:	f7fa fd16 	bl	8000618 <__aeabi_dmul>
 8005bec:	4603      	mov	r3, r0
 8005bee:	460c      	mov	r4, r1
 8005bf0:	e9c7 3400 	strd	r3, r4, [r7]
 8005bf4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005bf8:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005bfc:	f7fa fd0c 	bl	8000618 <__aeabi_dmul>
 8005c00:	4603      	mov	r3, r0
 8005c02:	460c      	mov	r4, r1
 8005c04:	461d      	mov	r5, r3
 8005c06:	4626      	mov	r6, r4
 8005c08:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005c0c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005c10:	f7fa fd02 	bl	8000618 <__aeabi_dmul>
 8005c14:	4603      	mov	r3, r0
 8005c16:	460c      	mov	r4, r1
 8005c18:	461a      	mov	r2, r3
 8005c1a:	4623      	mov	r3, r4
 8005c1c:	4628      	mov	r0, r5
 8005c1e:	4631      	mov	r1, r6
 8005c20:	f7fa fb44 	bl	80002ac <__adddf3>
 8005c24:	4603      	mov	r3, r0
 8005c26:	460c      	mov	r4, r1
 8005c28:	4618      	mov	r0, r3
 8005c2a:	4621      	mov	r1, r4
 8005c2c:	f04f 0200 	mov.w	r2, #0
 8005c30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005c34:	f7fa fe1a 	bl	800086c <__aeabi_ddiv>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	460c      	mov	r4, r1
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	4623      	mov	r3, r4
 8005c40:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c44:	f7fa fb30 	bl	80002a8 <__aeabi_dsub>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	460c      	mov	r4, r1
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	4623      	mov	r3, r4
 8005c50:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005c54:	f7fa ff5c 	bl	8000b10 <__aeabi_dcmple>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d075      	beq.n	8005d4a <scaraInitLSPB+0x50a>
			 v_lim 	= sqrt(fabs(q1 - q0)*a_design + (v0*v0 + v1*v1)/2);
 8005c5e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005c62:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8005c66:	f7fa fb1f 	bl	80002a8 <__aeabi_dsub>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	460c      	mov	r4, r1
 8005c6e:	469a      	mov	sl, r3
 8005c70:	f024 4b00 	bic.w	fp, r4, #2147483648	; 0x80000000
 8005c74:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8005c78:	4650      	mov	r0, sl
 8005c7a:	4659      	mov	r1, fp
 8005c7c:	f7fa fccc 	bl	8000618 <__aeabi_dmul>
 8005c80:	4603      	mov	r3, r0
 8005c82:	460c      	mov	r4, r1
 8005c84:	4625      	mov	r5, r4
 8005c86:	461c      	mov	r4, r3
 8005c88:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005c8c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005c90:	f7fa fcc2 	bl	8000618 <__aeabi_dmul>
 8005c94:	4602      	mov	r2, r0
 8005c96:	460b      	mov	r3, r1
 8005c98:	4690      	mov	r8, r2
 8005c9a:	4699      	mov	r9, r3
 8005c9c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005ca0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005ca4:	f7fa fcb8 	bl	8000618 <__aeabi_dmul>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	460b      	mov	r3, r1
 8005cac:	4640      	mov	r0, r8
 8005cae:	4649      	mov	r1, r9
 8005cb0:	f7fa fafc 	bl	80002ac <__adddf3>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	460b      	mov	r3, r1
 8005cb8:	4610      	mov	r0, r2
 8005cba:	4619      	mov	r1, r3
 8005cbc:	f04f 0200 	mov.w	r2, #0
 8005cc0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005cc4:	f7fa fdd2 	bl	800086c <__aeabi_ddiv>
 8005cc8:	4602      	mov	r2, r0
 8005cca:	460b      	mov	r3, r1
 8005ccc:	4620      	mov	r0, r4
 8005cce:	4629      	mov	r1, r5
 8005cd0:	f7fa faec 	bl	80002ac <__adddf3>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	460c      	mov	r4, r1
 8005cd8:	ec44 3b17 	vmov	d7, r3, r4
 8005cdc:	eeb0 0a47 	vmov.f32	s0, s14
 8005ce0:	eef0 0a67 	vmov.f32	s1, s15
 8005ce4:	f011 ff46 	bl	8017b74 <sqrt>
 8005ce8:	ed87 0b26 	vstr	d0, [r7, #152]	; 0x98
			 ta		= (v_lim - v0)/a_design;
 8005cec:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005cf0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005cf4:	f7fa fad8 	bl	80002a8 <__aeabi_dsub>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	460c      	mov	r4, r1
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	4621      	mov	r1, r4
 8005d00:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8005d04:	f7fa fdb2 	bl	800086c <__aeabi_ddiv>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	460c      	mov	r4, r1
 8005d0c:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
			 td		= (v_lim - v1)/a_design;
 8005d10:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005d14:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005d18:	f7fa fac6 	bl	80002a8 <__aeabi_dsub>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	460c      	mov	r4, r1
 8005d20:	4618      	mov	r0, r3
 8005d22:	4621      	mov	r1, r4
 8005d24:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8005d28:	f7fa fda0 	bl	800086c <__aeabi_ddiv>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	460c      	mov	r4, r1
 8005d30:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
			 tf		= ta + td;
 8005d34:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8005d38:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8005d3c:	f7fa fab6 	bl	80002ac <__adddf3>
 8005d40:	4603      	mov	r3, r0
 8005d42:	460c      	mov	r4, r1
 8005d44:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 8005d48:	e0e3      	b.n	8005f12 <scaraInitLSPB+0x6d2>
		 } else {
			 v_lim	= v_design;
 8005d4a:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8005d4e:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
			 ta		= (v_lim - v0)/a_design;
 8005d52:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005d56:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005d5a:	f7fa faa5 	bl	80002a8 <__aeabi_dsub>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	460c      	mov	r4, r1
 8005d62:	4618      	mov	r0, r3
 8005d64:	4621      	mov	r1, r4
 8005d66:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8005d6a:	f7fa fd7f 	bl	800086c <__aeabi_ddiv>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	460c      	mov	r4, r1
 8005d72:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
			 td		= (v_lim - v1)/a_design;
 8005d76:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005d7a:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005d7e:	f7fa fa93 	bl	80002a8 <__aeabi_dsub>
 8005d82:	4603      	mov	r3, r0
 8005d84:	460c      	mov	r4, r1
 8005d86:	4618      	mov	r0, r3
 8005d88:	4621      	mov	r1, r4
 8005d8a:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8005d8e:	f7fa fd6d 	bl	800086c <__aeabi_ddiv>
 8005d92:	4603      	mov	r3, r0
 8005d94:	460c      	mov	r4, r1
 8005d96:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
			 tf		= fabs(q0 - q1)/v_lim + v_lim/(2*a_design)*(1 - v0/v_lim)*(1 - v0/v_lim)
 8005d9a:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8005d9e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005da2:	f7fa fa81 	bl	80002a8 <__aeabi_dsub>
 8005da6:	4603      	mov	r3, r0
 8005da8:	460c      	mov	r4, r1
 8005daa:	4698      	mov	r8, r3
 8005dac:	f024 4900 	bic.w	r9, r4, #2147483648	; 0x80000000
 8005db0:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8005db4:	4640      	mov	r0, r8
 8005db6:	4649      	mov	r1, r9
 8005db8:	f7fa fd58 	bl	800086c <__aeabi_ddiv>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	460c      	mov	r4, r1
 8005dc0:	4625      	mov	r5, r4
 8005dc2:	461c      	mov	r4, r3
 8005dc4:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8005dc8:	4602      	mov	r2, r0
 8005dca:	460b      	mov	r3, r1
 8005dcc:	f7fa fa6e 	bl	80002ac <__adddf3>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	460b      	mov	r3, r1
 8005dd4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005dd8:	f7fa fd48 	bl	800086c <__aeabi_ddiv>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	460b      	mov	r3, r1
 8005de0:	4690      	mov	r8, r2
 8005de2:	4699      	mov	r9, r3
 8005de4:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8005de8:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005dec:	f7fa fd3e 	bl	800086c <__aeabi_ddiv>
 8005df0:	4602      	mov	r2, r0
 8005df2:	460b      	mov	r3, r1
 8005df4:	f04f 0000 	mov.w	r0, #0
 8005df8:	497b      	ldr	r1, [pc, #492]	; (8005fe8 <scaraInitLSPB+0x7a8>)
 8005dfa:	f7fa fa55 	bl	80002a8 <__aeabi_dsub>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	460b      	mov	r3, r1
 8005e02:	4640      	mov	r0, r8
 8005e04:	4649      	mov	r1, r9
 8005e06:	f7fa fc07 	bl	8000618 <__aeabi_dmul>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	460b      	mov	r3, r1
 8005e0e:	4690      	mov	r8, r2
 8005e10:	4699      	mov	r9, r3
 8005e12:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8005e16:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005e1a:	f7fa fd27 	bl	800086c <__aeabi_ddiv>
 8005e1e:	4602      	mov	r2, r0
 8005e20:	460b      	mov	r3, r1
 8005e22:	f04f 0000 	mov.w	r0, #0
 8005e26:	4970      	ldr	r1, [pc, #448]	; (8005fe8 <scaraInitLSPB+0x7a8>)
 8005e28:	f7fa fa3e 	bl	80002a8 <__aeabi_dsub>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	460b      	mov	r3, r1
 8005e30:	4640      	mov	r0, r8
 8005e32:	4649      	mov	r1, r9
 8005e34:	f7fa fbf0 	bl	8000618 <__aeabi_dmul>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	460b      	mov	r3, r1
 8005e3c:	4620      	mov	r0, r4
 8005e3e:	4629      	mov	r1, r5
 8005e40:	f7fa fa34 	bl	80002ac <__adddf3>
 8005e44:	4603      	mov	r3, r0
 8005e46:	460c      	mov	r4, r1
 8005e48:	4625      	mov	r5, r4
 8005e4a:	461c      	mov	r4, r3
							+ v_lim/(2*a_design)*(1 - v1/v_lim)*(1 - v1/v_lim);
 8005e4c:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8005e50:	4602      	mov	r2, r0
 8005e52:	460b      	mov	r3, r1
 8005e54:	f7fa fa2a 	bl	80002ac <__adddf3>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	460b      	mov	r3, r1
 8005e5c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005e60:	f7fa fd04 	bl	800086c <__aeabi_ddiv>
 8005e64:	4602      	mov	r2, r0
 8005e66:	460b      	mov	r3, r1
 8005e68:	4690      	mov	r8, r2
 8005e6a:	4699      	mov	r9, r3
 8005e6c:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8005e70:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005e74:	f7fa fcfa 	bl	800086c <__aeabi_ddiv>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	460b      	mov	r3, r1
 8005e7c:	f04f 0000 	mov.w	r0, #0
 8005e80:	4959      	ldr	r1, [pc, #356]	; (8005fe8 <scaraInitLSPB+0x7a8>)
 8005e82:	f7fa fa11 	bl	80002a8 <__aeabi_dsub>
 8005e86:	4602      	mov	r2, r0
 8005e88:	460b      	mov	r3, r1
 8005e8a:	4640      	mov	r0, r8
 8005e8c:	4649      	mov	r1, r9
 8005e8e:	f7fa fbc3 	bl	8000618 <__aeabi_dmul>
 8005e92:	4602      	mov	r2, r0
 8005e94:	460b      	mov	r3, r1
 8005e96:	4690      	mov	r8, r2
 8005e98:	4699      	mov	r9, r3
 8005e9a:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8005e9e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005ea2:	f7fa fce3 	bl	800086c <__aeabi_ddiv>
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	460b      	mov	r3, r1
 8005eaa:	f04f 0000 	mov.w	r0, #0
 8005eae:	494e      	ldr	r1, [pc, #312]	; (8005fe8 <scaraInitLSPB+0x7a8>)
 8005eb0:	f7fa f9fa 	bl	80002a8 <__aeabi_dsub>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	460b      	mov	r3, r1
 8005eb8:	4640      	mov	r0, r8
 8005eba:	4649      	mov	r1, r9
 8005ebc:	f7fa fbac 	bl	8000618 <__aeabi_dmul>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	460b      	mov	r3, r1
			 tf		= fabs(q0 - q1)/v_lim + v_lim/(2*a_design)*(1 - v0/v_lim)*(1 - v0/v_lim)
 8005ec4:	4620      	mov	r0, r4
 8005ec6:	4629      	mov	r1, r5
 8005ec8:	f7fa f9f0 	bl	80002ac <__adddf3>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	460c      	mov	r4, r1
 8005ed0:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 8005ed4:	e01d      	b.n	8005f12 <scaraInitLSPB+0x6d2>
		 }
	 } else {
		 v_lim	= 0;
 8005ed6:	f04f 0300 	mov.w	r3, #0
 8005eda:	f04f 0400 	mov.w	r4, #0
 8005ede:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
		 ta = tf/2;
 8005ee2:	f04f 0200 	mov.w	r2, #0
 8005ee6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005eea:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8005eee:	f7fa fcbd 	bl	800086c <__aeabi_ddiv>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	460c      	mov	r4, r1
 8005ef6:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
		 td = tf/2;
 8005efa:	f04f 0200 	mov.w	r2, #0
 8005efe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005f02:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8005f06:	f7fa fcb1 	bl	800086c <__aeabi_ddiv>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	460c      	mov	r4, r1
 8005f0e:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
	 }

	 no_sample = ceilf(tf / T_SAMPLING); // ceiling
 8005f12:	a333      	add	r3, pc, #204	; (adr r3, 8005fe0 <scaraInitLSPB+0x7a0>)
 8005f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f18:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8005f1c:	f7fa fca6 	bl	800086c <__aeabi_ddiv>
 8005f20:	4603      	mov	r3, r0
 8005f22:	460c      	mov	r4, r1
 8005f24:	4618      	mov	r0, r3
 8005f26:	4621      	mov	r1, r4
 8005f28:	f7fa fe6e 	bl	8000c08 <__aeabi_d2f>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	ee00 3a10 	vmov	s0, r3
 8005f32:	f011 fddd 	bl	8017af0 <ceilf>
 8005f36:	eef0 7a40 	vmov.f32	s15, s0
 8005f3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f3e:	ee17 3a90 	vmov	r3, s15
 8005f42:	637b      	str	r3, [r7, #52]	; 0x34
	 // Init lspb params
	 lspb->dir= dir;
 8005f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f46:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8005f4a:	701a      	strb	r2, [r3, #0]
	 lspb->s0 = q0;
 8005f4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f4e:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8005f52:	e9c2 3402 	strd	r3, r4, [r2, #8]
	 lspb->s1 = q1;
 8005f56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f58:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8005f5c:	e9c2 3404 	strd	r3, r4, [r2, #16]
	 lspb->Ta = ta;
 8005f60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f62:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8005f66:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	 lspb->Td = td;
 8005f6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f6c:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8005f70:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	 lspb->Tf = tf;
 8005f74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f76:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8005f7a:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	 lspb->a_design = a_design;
 8005f7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f80:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 8005f84:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	 lspb->v_design = v_design;
 8005f88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f8a:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8005f8e:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	 lspb->v_lim = v_lim;
 8005f92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f94:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8005f98:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	 lspb->v0 = v0;
 8005f9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f9e:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8005fa2:	e9c2 3406 	strd	r3, r4, [r2, #24]
	 lspb->v1 = v1;
 8005fa6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fa8:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8005fac:	e9c2 3408 	strd	r3, r4, [r2, #32]
	 lspb->num_of_sampling = no_sample;
 8005fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005fb4:	659a      	str	r2, [r3, #88]	; 0x58
	 lspb->total_s = lspb->s1 - lspb->s0;
 8005fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fb8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8005fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fbe:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	4623      	mov	r3, r4
 8005fc6:	f7fa f96f 	bl	80002a8 <__aeabi_dsub>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	460c      	mov	r4, r1
 8005fce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fd0:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

	 return SCARA_STATUS_OK;
 8005fd4:	2300      	movs	r3, #0
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	37b4      	adds	r7, #180	; 0xb4
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fe0:	40000000 	.word	0x40000000
 8005fe4:	3f847ae1 	.word	0x3f847ae1
 8005fe8:	3ff00000 	.word	0x3ff00000
 8005fec:	8c3f7cf0 	.word	0x8c3f7cf0
 8005ff0:	4031d1eb 	.word	0x4031d1eb
 8005ff4:	79ff2e4d 	.word	0x79ff2e4d
 8005ff8:	400c8312 	.word	0x400c8312
 8005ffc:	6b259425 	.word	0x6b259425
 8006000:	3ff69b91 	.word	0x3ff69b91
 8006004:	ef514351 	.word	0xef514351
 8006008:	3fd2160d 	.word	0x3fd2160d
 800600c:	7ae147ae 	.word	0x7ae147ae
 8006010:	3fdcf3f2 	.word	0x3fdcf3f2
 8006014:	c8b43958 	.word	0xc8b43958
 8006018:	3fb7298e 	.word	0x3fb7298e
 800601c:	70000000 	.word	0x70000000
 8006020:	3ff69e95 	.word	0x3ff69e95
 8006024:	8ccccccd 	.word	0x8ccccccd
 8006028:	3fd21877 	.word	0x3fd21877
 800602c:	d2f1a9fc 	.word	0xd2f1a9fc
 8006030:	3f50624d 	.word	0x3f50624d
 8006034:	9abcaf48 	.word	0x9abcaf48
 8006038:	3e7ad7f2 	.word	0x3e7ad7f2
 800603c:	00000000 	.word	0x00000000

08006040 <scaraInitScurve>:
SCARA_StatusTypeDef	scaraInitScurve		(Trajectory_Scurve_TypeDef *scurve,
										Trajectory_TargetTypeDef target,
										double total_s,
										ModeInitTypeDef modeinit,
										double v_factor,
										double a_factor) {
 8006040:	b5b0      	push	{r4, r5, r7, lr}
 8006042:	b0ba      	sub	sp, #232	; 0xe8
 8006044:	af00      	add	r7, sp, #0
 8006046:	61f8      	str	r0, [r7, #28]
 8006048:	460b      	mov	r3, r1
 800604a:	ed87 0b04 	vstr	d0, [r7, #16]
 800604e:	ed87 1b02 	vstr	d1, [r7, #8]
 8006052:	ed87 2b00 	vstr	d2, [r7]
 8006056:	76fb      	strb	r3, [r7, #27]
 8006058:	4613      	mov	r3, r2
 800605a:	76bb      	strb	r3, [r7, #26]
	 double v_design, a_design, q0, q1, v0, v1, v_lim, j_max, tm, tc, tf, dir;
	 double v_1, s_1, v_2, s_2, v_3, s_3, v_4, s_4;
	 uint32_t	 no_sample;
	 uint8_t	 no_phases;

	 if ( TRAJECTORY_3D == target) {
 800605c:	7efb      	ldrb	r3, [r7, #27]
 800605e:	2b04      	cmp	r3, #4
 8006060:	d118      	bne.n	8006094 <scaraInitScurve+0x54>
		 v_design = V_DESIGN_3D*v_factor;
 8006062:	f20f 4320 	addw	r3, pc, #1056	; 0x420
 8006066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800606a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800606e:	f7fa fad3 	bl	8000618 <__aeabi_dmul>
 8006072:	4603      	mov	r3, r0
 8006074:	460c      	mov	r4, r1
 8006076:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_3D*a_factor;
 800607a:	f20f 4310 	addw	r3, pc, #1040	; 0x410
 800607e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006082:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006086:	f7fa fac7 	bl	8000618 <__aeabi_dmul>
 800608a:	4603      	mov	r3, r0
 800608c:	460c      	mov	r4, r1
 800608e:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8006092:	e083      	b.n	800619c <scaraInitScurve+0x15c>
	 } else if (TRAJECTORY_ROLL == target) {
 8006094:	7efb      	ldrb	r3, [r7, #27]
 8006096:	2b05      	cmp	r3, #5
 8006098:	d116      	bne.n	80060c8 <scaraInitScurve+0x88>
		 v_design = V_DESIGN_ROLL*v_factor;
 800609a:	a3fe      	add	r3, pc, #1016	; (adr r3, 8006494 <scaraInitScurve+0x454>)
 800609c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80060a4:	f7fa fab8 	bl	8000618 <__aeabi_dmul>
 80060a8:	4603      	mov	r3, r0
 80060aa:	460c      	mov	r4, r1
 80060ac:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_ROLL*a_factor;
 80060b0:	a3fa      	add	r3, pc, #1000	; (adr r3, 800649c <scaraInitScurve+0x45c>)
 80060b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80060ba:	f7fa faad 	bl	8000618 <__aeabi_dmul>
 80060be:	4603      	mov	r3, r0
 80060c0:	460c      	mov	r4, r1
 80060c2:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 80060c6:	e069      	b.n	800619c <scaraInitScurve+0x15c>
	 } else if (TRAJECTORY_J0 == target) {
 80060c8:	7efb      	ldrb	r3, [r7, #27]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d116      	bne.n	80060fc <scaraInitScurve+0xbc>
		 v_design = V_DESIGN_J0*v_factor;
 80060ce:	a3f5      	add	r3, pc, #980	; (adr r3, 80064a4 <scaraInitScurve+0x464>)
 80060d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80060d8:	f7fa fa9e 	bl	8000618 <__aeabi_dmul>
 80060dc:	4603      	mov	r3, r0
 80060de:	460c      	mov	r4, r1
 80060e0:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_J0*a_factor;
 80060e4:	a3f1      	add	r3, pc, #964	; (adr r3, 80064ac <scaraInitScurve+0x46c>)
 80060e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80060ee:	f7fa fa93 	bl	8000618 <__aeabi_dmul>
 80060f2:	4603      	mov	r3, r0
 80060f4:	460c      	mov	r4, r1
 80060f6:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 80060fa:	e04f      	b.n	800619c <scaraInitScurve+0x15c>
	 } else if (TRAJECTORY_J1 == target) {
 80060fc:	7efb      	ldrb	r3, [r7, #27]
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d116      	bne.n	8006130 <scaraInitScurve+0xf0>
		 v_design = V_DESIGN_J1*v_factor;
 8006102:	a3ec      	add	r3, pc, #944	; (adr r3, 80064b4 <scaraInitScurve+0x474>)
 8006104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006108:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800610c:	f7fa fa84 	bl	8000618 <__aeabi_dmul>
 8006110:	4603      	mov	r3, r0
 8006112:	460c      	mov	r4, r1
 8006114:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_J1*a_factor;
 8006118:	a3e8      	add	r3, pc, #928	; (adr r3, 80064bc <scaraInitScurve+0x47c>)
 800611a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800611e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006122:	f7fa fa79 	bl	8000618 <__aeabi_dmul>
 8006126:	4603      	mov	r3, r0
 8006128:	460c      	mov	r4, r1
 800612a:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 800612e:	e035      	b.n	800619c <scaraInitScurve+0x15c>
	 } else if (TRAJECTORY_J2 == target) {
 8006130:	7efb      	ldrb	r3, [r7, #27]
 8006132:	2b02      	cmp	r3, #2
 8006134:	d116      	bne.n	8006164 <scaraInitScurve+0x124>
		 v_design = V_DESIGN_J2*v_factor;
 8006136:	a3d3      	add	r3, pc, #844	; (adr r3, 8006484 <scaraInitScurve+0x444>)
 8006138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800613c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006140:	f7fa fa6a 	bl	8000618 <__aeabi_dmul>
 8006144:	4603      	mov	r3, r0
 8006146:	460c      	mov	r4, r1
 8006148:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_J2*a_factor;
 800614c:	a3cf      	add	r3, pc, #828	; (adr r3, 800648c <scaraInitScurve+0x44c>)
 800614e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006152:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006156:	f7fa fa5f 	bl	8000618 <__aeabi_dmul>
 800615a:	4603      	mov	r3, r0
 800615c:	460c      	mov	r4, r1
 800615e:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8006162:	e01b      	b.n	800619c <scaraInitScurve+0x15c>
	 } else if (TRAJECTORY_J3 == target) {
 8006164:	7efb      	ldrb	r3, [r7, #27]
 8006166:	2b03      	cmp	r3, #3
 8006168:	d116      	bne.n	8006198 <scaraInitScurve+0x158>
		 v_design = V_DESIGN_J3*v_factor;
 800616a:	a3ca      	add	r3, pc, #808	; (adr r3, 8006494 <scaraInitScurve+0x454>)
 800616c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006170:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006174:	f7fa fa50 	bl	8000618 <__aeabi_dmul>
 8006178:	4603      	mov	r3, r0
 800617a:	460c      	mov	r4, r1
 800617c:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_J3*a_factor;
 8006180:	a3c6      	add	r3, pc, #792	; (adr r3, 800649c <scaraInitScurve+0x45c>)
 8006182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006186:	e9d7 0100 	ldrd	r0, r1, [r7]
 800618a:	f7fa fa45 	bl	8000618 <__aeabi_dmul>
 800618e:	4603      	mov	r3, r0
 8006190:	460c      	mov	r4, r1
 8006192:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8006196:	e001      	b.n	800619c <scaraInitScurve+0x15c>
	 } else {
		 return SCARA_STATUS_ERROR_PARA;
 8006198:	2306      	movs	r3, #6
 800619a:	e2dc      	b.n	8006756 <scaraInitScurve+0x716>
	 }

	 v0 = 0;
 800619c:	f04f 0300 	mov.w	r3, #0
 80061a0:	f04f 0400 	mov.w	r4, #0
 80061a4:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
	 v1 = 0;
 80061a8:	f04f 0300 	mov.w	r3, #0
 80061ac:	f04f 0400 	mov.w	r4, #0
 80061b0:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
	 q0 = 0;
 80061b4:	f04f 0300 	mov.w	r3, #0
 80061b8:	f04f 0400 	mov.w	r4, #0
 80061bc:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	 q1 = total_s;
 80061c0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80061c4:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0

	 if ( total_s < 0) {
 80061c8:	f04f 0200 	mov.w	r2, #0
 80061cc:	f04f 0300 	mov.w	r3, #0
 80061d0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80061d4:	f7fa fc92 	bl	8000afc <__aeabi_dcmplt>
 80061d8:	4603      	mov	r3, r0
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d015      	beq.n	800620a <scaraInitScurve+0x1ca>
		 dir = -1;
 80061de:	f04f 0300 	mov.w	r3, #0
 80061e2:	4ca5      	ldr	r4, [pc, #660]	; (8006478 <scaraInitScurve+0x438>)
 80061e4:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
		 q1 = -q1;
 80061e8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80061ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80061f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80061f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80061f8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		 total_s = -total_s;
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	613b      	str	r3, [r7, #16]
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006206:	617b      	str	r3, [r7, #20]
 8006208:	e004      	b.n	8006214 <scaraInitScurve+0x1d4>
	 } else {
		 dir = 1;
 800620a:	f04f 0300 	mov.w	r3, #0
 800620e:	4c9b      	ldr	r4, [pc, #620]	; (800647c <scaraInitScurve+0x43c>)
 8006210:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
	 }


	 if (DUTY_MODE_INIT_QVT == modeinit) {
 8006214:	7ebb      	ldrb	r3, [r7, #26]
 8006216:	2b01      	cmp	r3, #1
 8006218:	f040 8082 	bne.w	8006320 <scaraInitScurve+0x2e0>
		 double t_upper, v_upper, a_upper;
		 tf = scurve->Tf;
 800621c:	69fb      	ldr	r3, [r7, #28]
 800621e:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8006222:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 // Avoid division by 0
		 if (tf > 0.001) {
 8006226:	a390      	add	r3, pc, #576	; (adr r3, 8006468 <scaraInitScurve+0x428>)
 8006228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800622c:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8006230:	f7fa fc82 	bl	8000b38 <__aeabi_dcmpgt>
 8006234:	4603      	mov	r3, r0
 8006236:	2b00      	cmp	r3, #0
 8006238:	d066      	beq.n	8006308 <scaraInitScurve+0x2c8>
			 // Assume 4 phase
			 t_upper = tf / 4;
 800623a:	f04f 0200 	mov.w	r2, #0
 800623e:	4b90      	ldr	r3, [pc, #576]	; (8006480 <scaraInitScurve+0x440>)
 8006240:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8006244:	f7fa fb12 	bl	800086c <__aeabi_ddiv>
 8006248:	4603      	mov	r3, r0
 800624a:	460c      	mov	r4, r1
 800624c:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
			 v_upper = total_s / (2*t_upper);
 8006250:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8006254:	4602      	mov	r2, r0
 8006256:	460b      	mov	r3, r1
 8006258:	f7fa f828 	bl	80002ac <__adddf3>
 800625c:	4603      	mov	r3, r0
 800625e:	460c      	mov	r4, r1
 8006260:	461a      	mov	r2, r3
 8006262:	4623      	mov	r3, r4
 8006264:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006268:	f7fa fb00 	bl	800086c <__aeabi_ddiv>
 800626c:	4603      	mov	r3, r0
 800626e:	460c      	mov	r4, r1
 8006270:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
			 // Check 4 phase --> 5 phase
			 if ( v_upper > v_design) {
 8006274:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8006278:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800627c:	f7fa fc5c 	bl	8000b38 <__aeabi_dcmpgt>
 8006280:	4603      	mov	r3, r0
 8006282:	2b00      	cmp	r3, #0
 8006284:	d022      	beq.n	80062cc <scaraInitScurve+0x28c>
				 t_upper = tf/2 - total_s/(2*v_design);
 8006286:	f04f 0200 	mov.w	r2, #0
 800628a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800628e:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8006292:	f7fa faeb 	bl	800086c <__aeabi_ddiv>
 8006296:	4603      	mov	r3, r0
 8006298:	460c      	mov	r4, r1
 800629a:	4625      	mov	r5, r4
 800629c:	461c      	mov	r4, r3
 800629e:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80062a2:	4602      	mov	r2, r0
 80062a4:	460b      	mov	r3, r1
 80062a6:	f7fa f801 	bl	80002ac <__adddf3>
 80062aa:	4602      	mov	r2, r0
 80062ac:	460b      	mov	r3, r1
 80062ae:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80062b2:	f7fa fadb 	bl	800086c <__aeabi_ddiv>
 80062b6:	4602      	mov	r2, r0
 80062b8:	460b      	mov	r3, r1
 80062ba:	4620      	mov	r0, r4
 80062bc:	4629      	mov	r1, r5
 80062be:	f7f9 fff3 	bl	80002a8 <__aeabi_dsub>
 80062c2:	4603      	mov	r3, r0
 80062c4:	460c      	mov	r4, r1
 80062c6:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
 80062ca:	e003      	b.n	80062d4 <scaraInitScurve+0x294>
			 } else {
				 v_design = v_upper;
 80062cc:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 80062d0:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
			 }
			 a_upper  = v_design / t_upper;
 80062d4:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80062d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80062dc:	f7fa fac6 	bl	800086c <__aeabi_ddiv>
 80062e0:	4603      	mov	r3, r0
 80062e2:	460c      	mov	r4, r1
 80062e4:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
			 if ( a_upper > a_design) {
 80062e8:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 80062ec:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80062f0:	f7fa fc22 	bl	8000b38 <__aeabi_dcmpgt>
 80062f4:	4603      	mov	r3, r0
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d001      	beq.n	80062fe <scaraInitScurve+0x2be>
				 return SCARA_STATUS_ERROR_OVER_ACCEL;
 80062fa:	230a      	movs	r3, #10
 80062fc:	e22b      	b.n	8006756 <scaraInitScurve+0x716>
			 } else {
				 a_design = a_upper;
 80062fe:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8006302:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8006306:	e00b      	b.n	8006320 <scaraInitScurve+0x2e0>
			 }
		 } else {
			 v_design = 0;
 8006308:	f04f 0300 	mov.w	r3, #0
 800630c:	f04f 0400 	mov.w	r4, #0
 8006310:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
			 a_design = 0;
 8006314:	f04f 0300 	mov.w	r3, #0
 8006318:	f04f 0400 	mov.w	r4, #0
 800631c:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
		 }
	 }
	 // Avoid division by 0
	 if (a_design > 0.0000001 && v_design > 0.0000001) {
 8006320:	a353      	add	r3, pc, #332	; (adr r3, 8006470 <scaraInitScurve+0x430>)
 8006322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006326:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800632a:	f7fa fc05 	bl	8000b38 <__aeabi_dcmpgt>
 800632e:	4603      	mov	r3, r0
 8006330:	2b00      	cmp	r3, #0
 8006332:	f000 80c7 	beq.w	80064c4 <scaraInitScurve+0x484>
 8006336:	a34e      	add	r3, pc, #312	; (adr r3, 8006470 <scaraInitScurve+0x430>)
 8006338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800633c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006340:	f7fa fbfa 	bl	8000b38 <__aeabi_dcmpgt>
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	f000 80bc 	beq.w	80064c4 <scaraInitScurve+0x484>
		 no_phases = 5;
 800634c:	2305      	movs	r3, #5
 800634e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		 tm = v_design/a_design;
 8006352:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8006356:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800635a:	f7fa fa87 	bl	800086c <__aeabi_ddiv>
 800635e:	4603      	mov	r3, r0
 8006360:	460c      	mov	r4, r1
 8006362:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
		 tc = total_s/v_design - 2*tm;
 8006366:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800636a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800636e:	f7fa fa7d 	bl	800086c <__aeabi_ddiv>
 8006372:	4603      	mov	r3, r0
 8006374:	460c      	mov	r4, r1
 8006376:	4625      	mov	r5, r4
 8006378:	461c      	mov	r4, r3
 800637a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800637e:	4602      	mov	r2, r0
 8006380:	460b      	mov	r3, r1
 8006382:	f7f9 ff93 	bl	80002ac <__adddf3>
 8006386:	4602      	mov	r2, r0
 8006388:	460b      	mov	r3, r1
 800638a:	4620      	mov	r0, r4
 800638c:	4629      	mov	r1, r5
 800638e:	f7f9 ff8b 	bl	80002a8 <__aeabi_dsub>
 8006392:	4603      	mov	r3, r0
 8006394:	460c      	mov	r4, r1
 8006396:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
		 // Check condition 5 phase ---> 4 phase
		 if (tc < 0.0) {
 800639a:	f04f 0200 	mov.w	r2, #0
 800639e:	f04f 0300 	mov.w	r3, #0
 80063a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80063a6:	f7fa fba9 	bl	8000afc <__aeabi_dcmplt>
 80063aa:	4603      	mov	r3, r0
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d022      	beq.n	80063f6 <scaraInitScurve+0x3b6>
			 tc = 0;
 80063b0:	f04f 0300 	mov.w	r3, #0
 80063b4:	f04f 0400 	mov.w	r4, #0
 80063b8:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
			 no_phases = 4;
 80063bc:	2304      	movs	r3, #4
 80063be:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			 tm = sqrt(total_s/(2*a_design));
 80063c2:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 80063c6:	4602      	mov	r2, r0
 80063c8:	460b      	mov	r3, r1
 80063ca:	f7f9 ff6f 	bl	80002ac <__adddf3>
 80063ce:	4603      	mov	r3, r0
 80063d0:	460c      	mov	r4, r1
 80063d2:	461a      	mov	r2, r3
 80063d4:	4623      	mov	r3, r4
 80063d6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80063da:	f7fa fa47 	bl	800086c <__aeabi_ddiv>
 80063de:	4603      	mov	r3, r0
 80063e0:	460c      	mov	r4, r1
 80063e2:	ec44 3b17 	vmov	d7, r3, r4
 80063e6:	eeb0 0a47 	vmov.f32	s0, s14
 80063ea:	eef0 0a67 	vmov.f32	s1, s15
 80063ee:	f011 fbc1 	bl	8017b74 <sqrt>
 80063f2:	ed87 0b2e 	vstr	d0, [r7, #184]	; 0xb8
		 }
		 if (tm < 0.001) {
 80063f6:	a31c      	add	r3, pc, #112	; (adr r3, 8006468 <scaraInitScurve+0x428>)
 80063f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063fc:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8006400:	f7fa fb7c 	bl	8000afc <__aeabi_dcmplt>
 8006404:	4603      	mov	r3, r0
 8006406:	2b00      	cmp	r3, #0
 8006408:	d006      	beq.n	8006418 <scaraInitScurve+0x3d8>
			 j_max = 0;
 800640a:	f04f 0300 	mov.w	r3, #0
 800640e:	f04f 0400 	mov.w	r4, #0
 8006412:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
 8006416:	e009      	b.n	800642c <scaraInitScurve+0x3ec>
		 } else {
			 j_max = a_design/tm;
 8006418:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800641c:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8006420:	f7fa fa24 	bl	800086c <__aeabi_ddiv>
 8006424:	4603      	mov	r3, r0
 8006426:	460c      	mov	r4, r1
 8006428:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
		 }
		 v_lim = a_design*tm;
 800642c:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8006430:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8006434:	f7fa f8f0 	bl	8000618 <__aeabi_dmul>
 8006438:	4603      	mov	r3, r0
 800643a:	460c      	mov	r4, r1
 800643c:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
		 tf    = 4*tm + tc;
 8006440:	f04f 0200 	mov.w	r2, #0
 8006444:	4b0e      	ldr	r3, [pc, #56]	; (8006480 <scaraInitScurve+0x440>)
 8006446:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800644a:	f7fa f8e5 	bl	8000618 <__aeabi_dmul>
 800644e:	4603      	mov	r3, r0
 8006450:	460c      	mov	r4, r1
 8006452:	461a      	mov	r2, r3
 8006454:	4623      	mov	r3, r4
 8006456:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800645a:	f7f9 ff27 	bl	80002ac <__adddf3>
 800645e:	4603      	mov	r3, r0
 8006460:	460c      	mov	r4, r1
 8006462:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
 8006466:	e04d      	b.n	8006504 <scaraInitScurve+0x4c4>
 8006468:	d2f1a9fc 	.word	0xd2f1a9fc
 800646c:	3f50624d 	.word	0x3f50624d
 8006470:	9abcaf48 	.word	0x9abcaf48
 8006474:	3e7ad7f2 	.word	0x3e7ad7f2
 8006478:	bff00000 	.word	0xbff00000
 800647c:	3ff00000 	.word	0x3ff00000
 8006480:	40100000 	.word	0x40100000
 8006484:	8c3f7cf0 	.word	0x8c3f7cf0
 8006488:	4031d1eb 	.word	0x4031d1eb
 800648c:	79ff2e4d 	.word	0x79ff2e4d
 8006490:	400c8312 	.word	0x400c8312
 8006494:	6b259425 	.word	0x6b259425
 8006498:	3ff69b91 	.word	0x3ff69b91
 800649c:	ef514351 	.word	0xef514351
 80064a0:	3fd2160d 	.word	0x3fd2160d
 80064a4:	7ae147ae 	.word	0x7ae147ae
 80064a8:	3fdcf3f2 	.word	0x3fdcf3f2
 80064ac:	c8b43958 	.word	0xc8b43958
 80064b0:	3fb7298e 	.word	0x3fb7298e
 80064b4:	70000000 	.word	0x70000000
 80064b8:	3ff69e95 	.word	0x3ff69e95
 80064bc:	8ccccccd 	.word	0x8ccccccd
 80064c0:	3fd21877 	.word	0x3fd21877
	 } else {
		 j_max = 0;
 80064c4:	f04f 0300 	mov.w	r3, #0
 80064c8:	f04f 0400 	mov.w	r4, #0
 80064cc:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
		 tc = 0;
 80064d0:	f04f 0300 	mov.w	r3, #0
 80064d4:	f04f 0400 	mov.w	r4, #0
 80064d8:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
		 no_phases = 4;
 80064dc:	2304      	movs	r3, #4
 80064de:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		 tm = tf / 4;
 80064e2:	f04f 0200 	mov.w	r2, #0
 80064e6:	4ba0      	ldr	r3, [pc, #640]	; (8006768 <scaraInitScurve+0x728>)
 80064e8:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80064ec:	f7fa f9be 	bl	800086c <__aeabi_ddiv>
 80064f0:	4603      	mov	r3, r0
 80064f2:	460c      	mov	r4, r1
 80064f4:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
		 v_lim = 0;
 80064f8:	f04f 0300 	mov.w	r3, #0
 80064fc:	f04f 0400 	mov.w	r4, #0
 8006500:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
	 }

	 no_sample = ceil(tf / T_SAMPLING);
 8006504:	a396      	add	r3, pc, #600	; (adr r3, 8006760 <scaraInitScurve+0x720>)
 8006506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800650a:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800650e:	f7fa f9ad 	bl	800086c <__aeabi_ddiv>
 8006512:	4603      	mov	r3, r0
 8006514:	460c      	mov	r4, r1
 8006516:	ec44 3b17 	vmov	d7, r3, r4
 800651a:	eeb0 0a47 	vmov.f32	s0, s14
 800651e:	eef0 0a67 	vmov.f32	s1, s15
 8006522:	f011 f98d 	bl	8017840 <ceil>
 8006526:	ec54 3b10 	vmov	r3, r4, d0
 800652a:	4618      	mov	r0, r3
 800652c:	4621      	mov	r1, r4
 800652e:	f7fa fb4b 	bl	8000bc8 <__aeabi_d2uiz>
 8006532:	4603      	mov	r3, r0
 8006534:	667b      	str	r3, [r7, #100]	; 0x64
	 v_1 = 0.5*j_max*tm*tm;
 8006536:	f04f 0200 	mov.w	r2, #0
 800653a:	4b8c      	ldr	r3, [pc, #560]	; (800676c <scaraInitScurve+0x72c>)
 800653c:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8006540:	f7fa f86a 	bl	8000618 <__aeabi_dmul>
 8006544:	4603      	mov	r3, r0
 8006546:	460c      	mov	r4, r1
 8006548:	4618      	mov	r0, r3
 800654a:	4621      	mov	r1, r4
 800654c:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8006550:	f7fa f862 	bl	8000618 <__aeabi_dmul>
 8006554:	4603      	mov	r3, r0
 8006556:	460c      	mov	r4, r1
 8006558:	461a      	mov	r2, r3
 800655a:	4623      	mov	r3, r4
 800655c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8006560:	f7fa f85a 	bl	8000618 <__aeabi_dmul>
 8006564:	4603      	mov	r3, r0
 8006566:	460c      	mov	r4, r1
 8006568:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	 s_1 = j_max*tm*tm*tm/6;
 800656c:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8006570:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8006574:	f7fa f850 	bl	8000618 <__aeabi_dmul>
 8006578:	4603      	mov	r3, r0
 800657a:	460c      	mov	r4, r1
 800657c:	4618      	mov	r0, r3
 800657e:	4621      	mov	r1, r4
 8006580:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8006584:	f7fa f848 	bl	8000618 <__aeabi_dmul>
 8006588:	4603      	mov	r3, r0
 800658a:	460c      	mov	r4, r1
 800658c:	4618      	mov	r0, r3
 800658e:	4621      	mov	r1, r4
 8006590:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8006594:	f7fa f840 	bl	8000618 <__aeabi_dmul>
 8006598:	4603      	mov	r3, r0
 800659a:	460c      	mov	r4, r1
 800659c:	4618      	mov	r0, r3
 800659e:	4621      	mov	r1, r4
 80065a0:	f04f 0200 	mov.w	r2, #0
 80065a4:	4b72      	ldr	r3, [pc, #456]	; (8006770 <scaraInitScurve+0x730>)
 80065a6:	f7fa f961 	bl	800086c <__aeabi_ddiv>
 80065aa:	4603      	mov	r3, r0
 80065ac:	460c      	mov	r4, r1
 80065ae:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	 v_2 = j_max*tm*tm;
 80065b2:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80065b6:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80065ba:	f7fa f82d 	bl	8000618 <__aeabi_dmul>
 80065be:	4603      	mov	r3, r0
 80065c0:	460c      	mov	r4, r1
 80065c2:	461a      	mov	r2, r3
 80065c4:	4623      	mov	r3, r4
 80065c6:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80065ca:	f7fa f825 	bl	8000618 <__aeabi_dmul>
 80065ce:	4603      	mov	r3, r0
 80065d0:	460c      	mov	r4, r1
 80065d2:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
	 s_2 = v_2*tm;
 80065d6:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80065da:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80065de:	f7fa f81b 	bl	8000618 <__aeabi_dmul>
 80065e2:	4603      	mov	r3, r0
 80065e4:	460c      	mov	r4, r1
 80065e6:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
	 v_3 = v_2;
 80065ea:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 80065ee:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	 s_3 = s_2 + v_2*tc;
 80065f2:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 80065f6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80065fa:	f7fa f80d 	bl	8000618 <__aeabi_dmul>
 80065fe:	4603      	mov	r3, r0
 8006600:	460c      	mov	r4, r1
 8006602:	461a      	mov	r2, r3
 8006604:	4623      	mov	r3, r4
 8006606:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800660a:	f7f9 fe4f 	bl	80002ac <__adddf3>
 800660e:	4603      	mov	r3, r0
 8006610:	460c      	mov	r4, r1
 8006612:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	 v_4 = v_1;
 8006616:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800661a:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	 s_4 = s_3 + s_2 - s_1;
 800661e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006622:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8006626:	f7f9 fe41 	bl	80002ac <__adddf3>
 800662a:	4603      	mov	r3, r0
 800662c:	460c      	mov	r4, r1
 800662e:	4618      	mov	r0, r3
 8006630:	4621      	mov	r1, r4
 8006632:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006636:	f7f9 fe37 	bl	80002a8 <__aeabi_dsub>
 800663a:	4603      	mov	r3, r0
 800663c:	460c      	mov	r4, r1
 800663e:	e9c7 3408 	strd	r3, r4, [r7, #32]

	 scurve->Tc = tc;
 8006642:	69fa      	ldr	r2, [r7, #28]
 8006644:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 8006648:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	 scurve->Tf = tf;
 800664c:	69fa      	ldr	r2, [r7, #28]
 800664e:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8006652:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	 scurve->Tm = tm;
 8006656:	69fa      	ldr	r2, [r7, #28]
 8006658:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 800665c:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	 scurve->a_design = a_design;
 8006660:	69fa      	ldr	r2, [r7, #28]
 8006662:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 8006666:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	 scurve->v_design = v_design;
 800666a:	69fa      	ldr	r2, [r7, #28]
 800666c:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8006670:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	 scurve->v_lim = v_lim;
 8006674:	69fa      	ldr	r2, [r7, #28]
 8006676:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 800667a:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	 scurve->v0 = v0;
 800667e:	69fa      	ldr	r2, [r7, #28]
 8006680:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8006684:	e9c2 3406 	strd	r3, r4, [r2, #24]
	 scurve->v1 = v1;
 8006688:	69fa      	ldr	r2, [r7, #28]
 800668a:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 800668e:	e9c2 3408 	strd	r3, r4, [r2, #32]
	 scurve->j_max = j_max;
 8006692:	69fa      	ldr	r2, [r7, #28]
 8006694:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8006698:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	 scurve->s0   = q0;
 800669c:	69fa      	ldr	r2, [r7, #28]
 800669e:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 80066a2:	e9c2 3402 	strd	r3, r4, [r2, #8]
	 scurve->s1   = q1;
 80066a6:	69fa      	ldr	r2, [r7, #28]
 80066a8:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 80066ac:	e9c2 3404 	strd	r3, r4, [r2, #16]
	 scurve->num_of_phase = no_phases;
 80066b0:	69fb      	ldr	r3, [r7, #28]
 80066b2:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 80066b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	 scurve->num_of_sampling = no_sample;
 80066ba:	69fb      	ldr	r3, [r7, #28]
 80066bc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80066be:	669a      	str	r2, [r3, #104]	; 0x68
	 scurve->total_s = total_s;
 80066c0:	69fa      	ldr	r2, [r7, #28]
 80066c2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80066c6:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	 scurve->dir = dir;
 80066ca:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80066ce:	f7fa fa53 	bl	8000b78 <__aeabi_d2iz>
 80066d2:	4603      	mov	r3, r0
 80066d4:	b25a      	sxtb	r2, r3
 80066d6:	69fb      	ldr	r3, [r7, #28]
 80066d8:	701a      	strb	r2, [r3, #0]

	 scurve->a_current = 0;
 80066da:	69fa      	ldr	r2, [r7, #28]
 80066dc:	f04f 0300 	mov.w	r3, #0
 80066e0:	f04f 0400 	mov.w	r4, #0
 80066e4:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
	 scurve->v_current = 0;
 80066e8:	69fa      	ldr	r2, [r7, #28]
 80066ea:	f04f 0300 	mov.w	r3, #0
 80066ee:	f04f 0400 	mov.w	r4, #0
 80066f2:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
	 scurve->s_current = 0;
 80066f6:	69fa      	ldr	r2, [r7, #28]
 80066f8:	f04f 0300 	mov.w	r3, #0
 80066fc:	f04f 0400 	mov.w	r4, #0
 8006700:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
	 scurve->v_1 = v_1;
 8006704:	69fa      	ldr	r2, [r7, #28]
 8006706:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800670a:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	 scurve->v_2 = v_2;
 800670e:	69fa      	ldr	r2, [r7, #28]
 8006710:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8006714:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
	 scurve->v_3 = v_3;
 8006718:	69fa      	ldr	r2, [r7, #28]
 800671a:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800671e:	e9c2 3426 	strd	r3, r4, [r2, #152]	; 0x98
	 scurve->v_4 = v_4;
 8006722:	69fa      	ldr	r2, [r7, #28]
 8006724:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8006728:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
	 scurve->s_1 = s_1;
 800672c:	69fa      	ldr	r2, [r7, #28]
 800672e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8006732:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
	 scurve->s_2 = s_2;
 8006736:	69fa      	ldr	r2, [r7, #28]
 8006738:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800673c:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
	 scurve->s_3 = s_3;
 8006740:	69fa      	ldr	r2, [r7, #28]
 8006742:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8006746:	e9c2 3428 	strd	r3, r4, [r2, #160]	; 0xa0
	 scurve->s_4 = s_4;
 800674a:	69fa      	ldr	r2, [r7, #28]
 800674c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8006750:	e9c2 342c 	strd	r3, r4, [r2, #176]	; 0xb0

	 return SCARA_STATUS_OK;
 8006754:	2300      	movs	r3, #0
}
 8006756:	4618      	mov	r0, r3
 8006758:	37e8      	adds	r7, #232	; 0xe8
 800675a:	46bd      	mov	sp, r7
 800675c:	bdb0      	pop	{r4, r5, r7, pc}
 800675e:	bf00      	nop
 8006760:	40000000 	.word	0x40000000
 8006764:	3f847ae1 	.word	0x3f847ae1
 8006768:	40100000 	.word	0x40100000
 800676c:	3fe00000 	.word	0x3fe00000
 8006770:	40180000 	.word	0x40180000

08006774 <scaraFlowDuty>:

/* Compute new x, y ,z corresponding to time */
SCARA_StatusTypeDef	scaraFlowDuty		(double time,
										SCARA_PositionTypeDef *pos_Next ,
										SCARA_PositionTypeDef pos_Current) {
 8006774:	b082      	sub	sp, #8
 8006776:	b5b0      	push	{r4, r5, r7, lr}
 8006778:	b0ce      	sub	sp, #312	; 0x138
 800677a:	af18      	add	r7, sp, #96	; 0x60
 800677c:	ed87 0b02 	vstr	d0, [r7, #8]
 8006780:	6078      	str	r0, [r7, #4]
 8006782:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 8006786:	e881 000c 	stmia.w	r1, {r2, r3}
	SCARA_StatusTypeDef status1, status2, status3, status4;
	SCARA_PositionTypeDef	positionCompute;
	// Update time
	positionCompute.t = time;
 800678a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800678e:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	/*---- Task space ----*/
	if ( DUTY_SPACE_TASK == myDUTY.space_type) {
 8006792:	4ba0      	ldr	r3, [pc, #640]	; (8006a14 <scaraFlowDuty+0x2a0>)
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	2b00      	cmp	r3, #0
 8006798:	f040 80e1 	bne.w	800695e <scaraFlowDuty+0x1ea>
		double s, angle, x, y, z;
		int8_t	dir_roll;
		//---Trajectory flowing
			// LSPB
		if( DUTY_TRAJECTORY_LSPB == myDUTY.task.trajectory_3d.trajectory_type) {
 800679c:	4b9d      	ldr	r3, [pc, #628]	; (8006a14 <scaraFlowDuty+0x2a0>)
 800679e:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d11f      	bne.n	80067e6 <scaraFlowDuty+0x72>
			status1 = scaraFlowLSPB(&(myDUTY.task.trajectory_3d.lspb), time);
 80067a6:	ed97 0b02 	vldr	d0, [r7, #8]
 80067aa:	489b      	ldr	r0, [pc, #620]	; (8006a18 <scaraFlowDuty+0x2a4>)
 80067ac:	f000 fb78 	bl	8006ea0 <scaraFlowLSPB>
 80067b0:	4603      	mov	r3, r0
 80067b2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
			status2 = scaraFlowLSPB(&(myDUTY.task.trajectory_roll.lspb), time);
 80067b6:	ed97 0b02 	vldr	d0, [r7, #8]
 80067ba:	4898      	ldr	r0, [pc, #608]	; (8006a1c <scaraFlowDuty+0x2a8>)
 80067bc:	f000 fb70 	bl	8006ea0 <scaraFlowLSPB>
 80067c0:	4603      	mov	r3, r0
 80067c2:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
			s = myDUTY.task.trajectory_3d.lspb.s_current;
 80067c6:	4b93      	ldr	r3, [pc, #588]	; (8006a14 <scaraFlowDuty+0x2a0>)
 80067c8:	e9d3 3464 	ldrd	r3, r4, [r3, #400]	; 0x190
 80067cc:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
			angle = myDUTY.task.trajectory_roll.lspb.s_current;
 80067d0:	4b90      	ldr	r3, [pc, #576]	; (8006a14 <scaraFlowDuty+0x2a0>)
 80067d2:	e9d3 34ba 	ldrd	r3, r4, [r3, #744]	; 0x2e8
 80067d6:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
			dir_roll = myDUTY.task.trajectory_roll.lspb.dir;
 80067da:	4b8e      	ldr	r3, [pc, #568]	; (8006a14 <scaraFlowDuty+0x2a0>)
 80067dc:	f893 3270 	ldrb.w	r3, [r3, #624]	; 0x270
 80067e0:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 80067e4:	e026      	b.n	8006834 <scaraFlowDuty+0xc0>
			// SCURVE
		} else if ( DUTY_TRAJECTORY_SCURVE == myDUTY.task.trajectory_3d.trajectory_type) {
 80067e6:	4b8b      	ldr	r3, [pc, #556]	; (8006a14 <scaraFlowDuty+0x2a0>)
 80067e8:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d11f      	bne.n	8006830 <scaraFlowDuty+0xbc>
			status1 = scaraFLowScurve(&(myDUTY.task.trajectory_3d.scurve), time);
 80067f0:	ed97 0b02 	vldr	d0, [r7, #8]
 80067f4:	488a      	ldr	r0, [pc, #552]	; (8006a20 <scaraFlowDuty+0x2ac>)
 80067f6:	f000 fcff 	bl	80071f8 <scaraFLowScurve>
 80067fa:	4603      	mov	r3, r0
 80067fc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
			status2 = scaraFLowScurve(&(myDUTY.task.trajectory_roll.scurve), time);
 8006800:	ed97 0b02 	vldr	d0, [r7, #8]
 8006804:	4887      	ldr	r0, [pc, #540]	; (8006a24 <scaraFlowDuty+0x2b0>)
 8006806:	f000 fcf7 	bl	80071f8 <scaraFLowScurve>
 800680a:	4603      	mov	r3, r0
 800680c:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
			s = myDUTY.task.trajectory_3d.scurve.s_current;
 8006810:	4b80      	ldr	r3, [pc, #512]	; (8006a14 <scaraFlowDuty+0x2a0>)
 8006812:	e9d3 3498 	ldrd	r3, r4, [r3, #608]	; 0x260
 8006816:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
			angle = myDUTY.task.trajectory_roll.scurve.s_current;
 800681a:	4b7e      	ldr	r3, [pc, #504]	; (8006a14 <scaraFlowDuty+0x2a0>)
 800681c:	e9d3 34ee 	ldrd	r3, r4, [r3, #952]	; 0x3b8
 8006820:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
			dir_roll = myDUTY.task.trajectory_roll.scurve.dir;
 8006824:	4b7b      	ldr	r3, [pc, #492]	; (8006a14 <scaraFlowDuty+0x2a0>)
 8006826:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
 800682a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 800682e:	e001      	b.n	8006834 <scaraFlowDuty+0xc0>
		} else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 8006830:	2305      	movs	r3, #5
 8006832:	e211      	b.n	8006c58 <scaraFlowDuty+0x4e4>
		}

		if ( SCARA_STATUS_OK != status1) {
 8006834:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8006838:	2b00      	cmp	r3, #0
 800683a:	d002      	beq.n	8006842 <scaraFlowDuty+0xce>
			return status1;
 800683c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8006840:	e20a      	b.n	8006c58 <scaraFlowDuty+0x4e4>
		}
		if ( SCARA_STATUS_OK != status2) {
 8006842:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 8006846:	2b00      	cmp	r3, #0
 8006848:	d002      	beq.n	8006850 <scaraFlowDuty+0xdc>
			return status2;
 800684a:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 800684e:	e203      	b.n	8006c58 <scaraFlowDuty+0x4e4>
		}

		//---Path flowing
			// Straight line
		if( DUTY_PATH_LINE == myDUTY.task.path.path_type) {
 8006850:	4b70      	ldr	r3, [pc, #448]	; (8006a14 <scaraFlowDuty+0x2a0>)
 8006852:	7a1b      	ldrb	r3, [r3, #8]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d117      	bne.n	8006888 <scaraFlowDuty+0x114>
			status1 = scaraFlowLine(&(myDUTY.task.path.line), s);
 8006858:	ed97 0b32 	vldr	d0, [r7, #200]	; 0xc8
 800685c:	4872      	ldr	r0, [pc, #456]	; (8006a28 <scaraFlowDuty+0x2b4>)
 800685e:	f000 fa0f 	bl	8006c80 <scaraFlowLine>
 8006862:	4603      	mov	r3, r0
 8006864:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
			x = myDUTY.task.path.line.x_current;
 8006868:	4b6a      	ldr	r3, [pc, #424]	; (8006a14 <scaraFlowDuty+0x2a0>)
 800686a:	e9d3 341a 	ldrd	r3, r4, [r3, #104]	; 0x68
 800686e:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
			y = myDUTY.task.path.line.y_current;
 8006872:	4b68      	ldr	r3, [pc, #416]	; (8006a14 <scaraFlowDuty+0x2a0>)
 8006874:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8006878:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
			z = myDUTY.task.path.line.z_current;
 800687c:	4b65      	ldr	r3, [pc, #404]	; (8006a14 <scaraFlowDuty+0x2a0>)
 800687e:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 8006882:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
 8006886:	e01d      	b.n	80068c4 <scaraFlowDuty+0x150>
			// Circular
		} else if ( DUTY_PATH_CIRCLE == myDUTY.task.path.path_type) {
 8006888:	4b62      	ldr	r3, [pc, #392]	; (8006a14 <scaraFlowDuty+0x2a0>)
 800688a:	7a1b      	ldrb	r3, [r3, #8]
 800688c:	2b01      	cmp	r3, #1
 800688e:	d117      	bne.n	80068c0 <scaraFlowDuty+0x14c>
			status1 = scaraFlowCircle(&(myDUTY.task.path.circle), s);
 8006890:	ed97 0b32 	vldr	d0, [r7, #200]	; 0xc8
 8006894:	4865      	ldr	r0, [pc, #404]	; (8006a2c <scaraFlowDuty+0x2b8>)
 8006896:	f000 fa7b 	bl	8006d90 <scaraFlowCircle>
 800689a:	4603      	mov	r3, r0
 800689c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
			x = myDUTY.task.path.circle.x_current;
 80068a0:	4b5c      	ldr	r3, [pc, #368]	; (8006a14 <scaraFlowDuty+0x2a0>)
 80068a2:	e9d3 343e 	ldrd	r3, r4, [r3, #248]	; 0xf8
 80068a6:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
			y = myDUTY.task.path.circle.y_current;
 80068aa:	4b5a      	ldr	r3, [pc, #360]	; (8006a14 <scaraFlowDuty+0x2a0>)
 80068ac:	e9d3 3440 	ldrd	r3, r4, [r3, #256]	; 0x100
 80068b0:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
			z = myDUTY.task.path.circle.z_current;
 80068b4:	4b57      	ldr	r3, [pc, #348]	; (8006a14 <scaraFlowDuty+0x2a0>)
 80068b6:	e9d3 3442 	ldrd	r3, r4, [r3, #264]	; 0x108
 80068ba:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
 80068be:	e001      	b.n	80068c4 <scaraFlowDuty+0x150>
		} else {
			return SCARA_STATUS_ERROR_TASK;
 80068c0:	2303      	movs	r3, #3
 80068c2:	e1c9      	b.n	8006c58 <scaraFlowDuty+0x4e4>
		}

		positionCompute.x 		= x;
 80068c4:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 80068c8:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
		positionCompute.y		= y;
 80068cc:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 80068d0:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
		positionCompute.z 		= z;
 80068d4:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 80068d8:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		positionCompute.roll 	= myDUTY.task.roll_start + angle*dir_roll;
 80068dc:	4b4d      	ldr	r3, [pc, #308]	; (8006a14 <scaraFlowDuty+0x2a0>)
 80068de:	e9d3 45f0 	ldrd	r4, r5, [r3, #960]	; 0x3c0
 80068e2:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 80068e6:	4618      	mov	r0, r3
 80068e8:	f7f9 fe2c 	bl	8000544 <__aeabi_i2d>
 80068ec:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 80068f0:	f7f9 fe92 	bl	8000618 <__aeabi_dmul>
 80068f4:	4602      	mov	r2, r0
 80068f6:	460b      	mov	r3, r1
 80068f8:	4620      	mov	r0, r4
 80068fa:	4629      	mov	r1, r5
 80068fc:	f7f9 fcd6 	bl	80002ac <__adddf3>
 8006900:	4603      	mov	r3, r0
 8006902:	460c      	mov	r4, r1
 8006904:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
		positionCompute.q		= s;
 8006908:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 800690c:	e9c7 3404 	strd	r3, r4, [r7, #16]
		positionCompute.total_time = myDUTY.time_total;
 8006910:	4b40      	ldr	r3, [pc, #256]	; (8006a14 <scaraFlowDuty+0x2a0>)
 8006912:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8006916:	e9d3 3400 	ldrd	r3, r4, [r3]
 800691a:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
		positionCompute.t		= time;
 800691e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8006922:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
		if ( FALSE == kinematicInverse(&positionCompute, pos_Current)) {
 8006926:	f107 0410 	add.w	r4, r7, #16
 800692a:	4668      	mov	r0, sp
 800692c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8006930:	2260      	movs	r2, #96	; 0x60
 8006932:	4619      	mov	r1, r3
 8006934:	f00c fdd4 	bl	80134e0 <memcpy>
 8006938:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800693c:	cb0c      	ldmia	r3, {r2, r3}
 800693e:	4620      	mov	r0, r4
 8006940:	f7fc fb06 	bl	8002f50 <kinematicInverse>
 8006944:	4603      	mov	r3, r0
 8006946:	2b00      	cmp	r3, #0
 8006948:	d101      	bne.n	800694e <scaraFlowDuty+0x1da>
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800694a:	2307      	movs	r3, #7
 800694c:	e184      	b.n	8006c58 <scaraFlowDuty+0x4e4>
		} else {
			memcpy(pos_Next, &positionCompute, sizeof(SCARA_PositionTypeDef));
 800694e:	f107 0310 	add.w	r3, r7, #16
 8006952:	2268      	movs	r2, #104	; 0x68
 8006954:	4619      	mov	r1, r3
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f00c fdc2 	bl	80134e0 <memcpy>
 800695c:	e17b      	b.n	8006c56 <scaraFlowDuty+0x4e2>
		}

	/*---- Joint space -----*/
	} else if (DUTY_SPACE_JOINT == myDUTY.space_type) {
 800695e:	4b2d      	ldr	r3, [pc, #180]	; (8006a14 <scaraFlowDuty+0x2a0>)
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	2b01      	cmp	r3, #1
 8006964:	f040 8175 	bne.w	8006c52 <scaraFlowDuty+0x4de>
		double s0, s1, s2, s3;
		int8_t dir0, dir1, dir2, dir3;
		// Trajectory flowing
			// LSPB
		if( DUTY_TRAJECTORY_LSPB == myDUTY.joint.trajectory[0].trajectory_type) {
 8006968:	4b2a      	ldr	r3, [pc, #168]	; (8006a14 <scaraFlowDuty+0x2a0>)
 800696a:	f893 33c8 	ldrb.w	r3, [r3, #968]	; 0x3c8
 800696e:	2b00      	cmp	r3, #0
 8006970:	d166      	bne.n	8006a40 <scaraFlowDuty+0x2cc>
			status1 = scaraFlowLSPB(&(myDUTY.joint.trajectory[0].lspb), time);
 8006972:	ed97 0b02 	vldr	d0, [r7, #8]
 8006976:	482e      	ldr	r0, [pc, #184]	; (8006a30 <scaraFlowDuty+0x2bc>)
 8006978:	f000 fa92 	bl	8006ea0 <scaraFlowLSPB>
 800697c:	4603      	mov	r3, r0
 800697e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
			status2 = scaraFlowLSPB(&(myDUTY.joint.trajectory[1].lspb), time);
 8006982:	ed97 0b02 	vldr	d0, [r7, #8]
 8006986:	482b      	ldr	r0, [pc, #172]	; (8006a34 <scaraFlowDuty+0x2c0>)
 8006988:	f000 fa8a 	bl	8006ea0 <scaraFlowLSPB>
 800698c:	4603      	mov	r3, r0
 800698e:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
			status3 = scaraFlowLSPB(&(myDUTY.joint.trajectory[2].lspb), time);
 8006992:	ed97 0b02 	vldr	d0, [r7, #8]
 8006996:	4828      	ldr	r0, [pc, #160]	; (8006a38 <scaraFlowDuty+0x2c4>)
 8006998:	f000 fa82 	bl	8006ea0 <scaraFlowLSPB>
 800699c:	4603      	mov	r3, r0
 800699e:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
			status4 = scaraFlowLSPB(&(myDUTY.joint.trajectory[3].lspb), time);
 80069a2:	ed97 0b02 	vldr	d0, [r7, #8]
 80069a6:	4825      	ldr	r0, [pc, #148]	; (8006a3c <scaraFlowDuty+0x2c8>)
 80069a8:	f000 fa7a 	bl	8006ea0 <scaraFlowLSPB>
 80069ac:	4603      	mov	r3, r0
 80069ae:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4
			dir0 = myDUTY.joint.trajectory[0].lspb.dir;
 80069b2:	4b18      	ldr	r3, [pc, #96]	; (8006a14 <scaraFlowDuty+0x2a0>)
 80069b4:	f893 33d0 	ldrb.w	r3, [r3, #976]	; 0x3d0
 80069b8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			dir1 = myDUTY.joint.trajectory[1].lspb.dir;
 80069bc:	4b15      	ldr	r3, [pc, #84]	; (8006a14 <scaraFlowDuty+0x2a0>)
 80069be:	f893 3528 	ldrb.w	r3, [r3, #1320]	; 0x528
 80069c2:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
			dir2 = myDUTY.joint.trajectory[2].lspb.dir;
 80069c6:	4b13      	ldr	r3, [pc, #76]	; (8006a14 <scaraFlowDuty+0x2a0>)
 80069c8:	f893 3680 	ldrb.w	r3, [r3, #1664]	; 0x680
 80069cc:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
			dir3 = myDUTY.joint.trajectory[3].lspb.dir;
 80069d0:	4b10      	ldr	r3, [pc, #64]	; (8006a14 <scaraFlowDuty+0x2a0>)
 80069d2:	f893 37d8 	ldrb.w	r3, [r3, #2008]	; 0x7d8
 80069d6:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
			s0 = myDUTY.joint.trajectory[0].lspb.s_current;
 80069da:	4b0e      	ldr	r3, [pc, #56]	; (8006a14 <scaraFlowDuty+0x2a0>)
 80069dc:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 80069e0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80069e4:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
			s1 = myDUTY.joint.trajectory[1].lspb.s_current;
 80069e8:	4b0a      	ldr	r3, [pc, #40]	; (8006a14 <scaraFlowDuty+0x2a0>)
 80069ea:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 80069ee:	e9d3 3400 	ldrd	r3, r4, [r3]
 80069f2:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
			s2 = myDUTY.joint.trajectory[2].lspb.s_current;
 80069f6:	4b07      	ldr	r3, [pc, #28]	; (8006a14 <scaraFlowDuty+0x2a0>)
 80069f8:	f503 63df 	add.w	r3, r3, #1784	; 0x6f8
 80069fc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006a00:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
			s3 = myDUTY.joint.trajectory[3].lspb.s_current;
 8006a04:	4b03      	ldr	r3, [pc, #12]	; (8006a14 <scaraFlowDuty+0x2a0>)
 8006a06:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 8006a0a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006a0e:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
 8006a12:	e06d      	b.n	8006af0 <scaraFlowDuty+0x37c>
 8006a14:	20005388 	.word	0x20005388
 8006a18:	200054a0 	.word	0x200054a0
 8006a1c:	200055f8 	.word	0x200055f8
 8006a20:	20005520 	.word	0x20005520
 8006a24:	20005678 	.word	0x20005678
 8006a28:	20005398 	.word	0x20005398
 8006a2c:	20005408 	.word	0x20005408
 8006a30:	20005758 	.word	0x20005758
 8006a34:	200058b0 	.word	0x200058b0
 8006a38:	20005a08 	.word	0x20005a08
 8006a3c:	20005b60 	.word	0x20005b60

			// SCURVE
		} else if ( DUTY_TRAJECTORY_SCURVE == myDUTY.joint.trajectory[0].trajectory_type) {
 8006a40:	4b89      	ldr	r3, [pc, #548]	; (8006c68 <scaraFlowDuty+0x4f4>)
 8006a42:	f893 33c8 	ldrb.w	r3, [r3, #968]	; 0x3c8
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d150      	bne.n	8006aec <scaraFlowDuty+0x378>
			status1 = scaraFLowScurve(&(myDUTY.joint.trajectory[0].scurve), time);
 8006a4a:	ed97 0b02 	vldr	d0, [r7, #8]
 8006a4e:	4887      	ldr	r0, [pc, #540]	; (8006c6c <scaraFlowDuty+0x4f8>)
 8006a50:	f000 fbd2 	bl	80071f8 <scaraFLowScurve>
 8006a54:	4603      	mov	r3, r0
 8006a56:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
			status2 = scaraFLowScurve(&(myDUTY.joint.trajectory[1].scurve), time);
 8006a5a:	ed97 0b02 	vldr	d0, [r7, #8]
 8006a5e:	4884      	ldr	r0, [pc, #528]	; (8006c70 <scaraFlowDuty+0x4fc>)
 8006a60:	f000 fbca 	bl	80071f8 <scaraFLowScurve>
 8006a64:	4603      	mov	r3, r0
 8006a66:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
			status3 = scaraFLowScurve(&(myDUTY.joint.trajectory[2].scurve), time);
 8006a6a:	ed97 0b02 	vldr	d0, [r7, #8]
 8006a6e:	4881      	ldr	r0, [pc, #516]	; (8006c74 <scaraFlowDuty+0x500>)
 8006a70:	f000 fbc2 	bl	80071f8 <scaraFLowScurve>
 8006a74:	4603      	mov	r3, r0
 8006a76:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
			status4 = scaraFLowScurve(&(myDUTY.joint.trajectory[3].scurve), time);
 8006a7a:	ed97 0b02 	vldr	d0, [r7, #8]
 8006a7e:	487e      	ldr	r0, [pc, #504]	; (8006c78 <scaraFlowDuty+0x504>)
 8006a80:	f000 fbba 	bl	80071f8 <scaraFLowScurve>
 8006a84:	4603      	mov	r3, r0
 8006a86:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4
			dir0 = myDUTY.joint.trajectory[0].scurve.dir;
 8006a8a:	4b77      	ldr	r3, [pc, #476]	; (8006c68 <scaraFlowDuty+0x4f4>)
 8006a8c:	f893 3450 	ldrb.w	r3, [r3, #1104]	; 0x450
 8006a90:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			dir1 = myDUTY.joint.trajectory[1].scurve.dir;
 8006a94:	4b74      	ldr	r3, [pc, #464]	; (8006c68 <scaraFlowDuty+0x4f4>)
 8006a96:	f893 35a8 	ldrb.w	r3, [r3, #1448]	; 0x5a8
 8006a9a:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
			dir2 = myDUTY.joint.trajectory[2].scurve.dir;
 8006a9e:	4b72      	ldr	r3, [pc, #456]	; (8006c68 <scaraFlowDuty+0x4f4>)
 8006aa0:	f893 3700 	ldrb.w	r3, [r3, #1792]	; 0x700
 8006aa4:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
			dir3 = myDUTY.joint.trajectory[3].scurve.dir;
 8006aa8:	4b6f      	ldr	r3, [pc, #444]	; (8006c68 <scaraFlowDuty+0x4f4>)
 8006aaa:	f893 3858 	ldrb.w	r3, [r3, #2136]	; 0x858
 8006aae:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
			s0 = myDUTY.joint.trajectory[0].scurve.s_current;
 8006ab2:	4b6d      	ldr	r3, [pc, #436]	; (8006c68 <scaraFlowDuty+0x4f4>)
 8006ab4:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 8006ab8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006abc:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
			s1 = myDUTY.joint.trajectory[1].scurve.s_current;
 8006ac0:	4b69      	ldr	r3, [pc, #420]	; (8006c68 <scaraFlowDuty+0x4f4>)
 8006ac2:	f503 63ce 	add.w	r3, r3, #1648	; 0x670
 8006ac6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006aca:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
			s2 = myDUTY.joint.trajectory[2].scurve.s_current;
 8006ace:	4b66      	ldr	r3, [pc, #408]	; (8006c68 <scaraFlowDuty+0x4f4>)
 8006ad0:	f503 63f9 	add.w	r3, r3, #1992	; 0x7c8
 8006ad4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006ad8:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
			s3 = myDUTY.joint.trajectory[3].scurve.s_current;
 8006adc:	4b62      	ldr	r3, [pc, #392]	; (8006c68 <scaraFlowDuty+0x4f4>)
 8006ade:	f503 6312 	add.w	r3, r3, #2336	; 0x920
 8006ae2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006ae6:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
 8006aea:	e001      	b.n	8006af0 <scaraFlowDuty+0x37c>
		} else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 8006aec:	2305      	movs	r3, #5
 8006aee:	e0b3      	b.n	8006c58 <scaraFlowDuty+0x4e4>
		}
		// Check init status
		if ( SCARA_STATUS_OK != status1) {
 8006af0:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d002      	beq.n	8006afe <scaraFlowDuty+0x38a>
			return status1;
 8006af8:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8006afc:	e0ac      	b.n	8006c58 <scaraFlowDuty+0x4e4>
		}
		if ( SCARA_STATUS_OK != status2) {
 8006afe:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d002      	beq.n	8006b0c <scaraFlowDuty+0x398>
			return status2;
 8006b06:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 8006b0a:	e0a5      	b.n	8006c58 <scaraFlowDuty+0x4e4>
		}
		if ( SCARA_STATUS_OK != status3) {
 8006b0c:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d002      	beq.n	8006b1a <scaraFlowDuty+0x3a6>
			return status3;
 8006b14:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 8006b18:	e09e      	b.n	8006c58 <scaraFlowDuty+0x4e4>
		}
		if ( SCARA_STATUS_OK != status4) {
 8006b1a:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d002      	beq.n	8006b28 <scaraFlowDuty+0x3b4>
			return status4;
 8006b22:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 8006b26:	e097      	b.n	8006c58 <scaraFlowDuty+0x4e4>
		}

		positionCompute.Theta1 	= myDUTY.joint.theta1_start + s0*dir0;
 8006b28:	4b4f      	ldr	r3, [pc, #316]	; (8006c68 <scaraFlowDuty+0x4f4>)
 8006b2a:	f603 1328 	addw	r3, r3, #2344	; 0x928
 8006b2e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006b32:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 8006b36:	4618      	mov	r0, r3
 8006b38:	f7f9 fd04 	bl	8000544 <__aeabi_i2d>
 8006b3c:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8006b40:	f7f9 fd6a 	bl	8000618 <__aeabi_dmul>
 8006b44:	4602      	mov	r2, r0
 8006b46:	460b      	mov	r3, r1
 8006b48:	4620      	mov	r0, r4
 8006b4a:	4629      	mov	r1, r5
 8006b4c:	f7f9 fbae 	bl	80002ac <__adddf3>
 8006b50:	4603      	mov	r3, r0
 8006b52:	460c      	mov	r4, r1
 8006b54:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
		positionCompute.Theta2 	= myDUTY.joint.theta2_start + s1*dir1;
 8006b58:	4b43      	ldr	r3, [pc, #268]	; (8006c68 <scaraFlowDuty+0x4f4>)
 8006b5a:	f503 6313 	add.w	r3, r3, #2352	; 0x930
 8006b5e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006b62:	f997 307e 	ldrsb.w	r3, [r7, #126]	; 0x7e
 8006b66:	4618      	mov	r0, r3
 8006b68:	f7f9 fcec 	bl	8000544 <__aeabi_i2d>
 8006b6c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8006b70:	f7f9 fd52 	bl	8000618 <__aeabi_dmul>
 8006b74:	4602      	mov	r2, r0
 8006b76:	460b      	mov	r3, r1
 8006b78:	4620      	mov	r0, r4
 8006b7a:	4629      	mov	r1, r5
 8006b7c:	f7f9 fb96 	bl	80002ac <__adddf3>
 8006b80:	4603      	mov	r3, r0
 8006b82:	460c      	mov	r4, r1
 8006b84:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
		positionCompute.D3 		= myDUTY.joint.d3_start 	+ s2*dir2;
 8006b88:	4b37      	ldr	r3, [pc, #220]	; (8006c68 <scaraFlowDuty+0x4f4>)
 8006b8a:	f603 1338 	addw	r3, r3, #2360	; 0x938
 8006b8e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006b92:	f997 307d 	ldrsb.w	r3, [r7, #125]	; 0x7d
 8006b96:	4618      	mov	r0, r3
 8006b98:	f7f9 fcd4 	bl	8000544 <__aeabi_i2d>
 8006b9c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8006ba0:	f7f9 fd3a 	bl	8000618 <__aeabi_dmul>
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	460b      	mov	r3, r1
 8006ba8:	4620      	mov	r0, r4
 8006baa:	4629      	mov	r1, r5
 8006bac:	f7f9 fb7e 	bl	80002ac <__adddf3>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	460c      	mov	r4, r1
 8006bb4:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
		positionCompute.Theta4 	= myDUTY.joint.theta4_start + s3*dir3;
 8006bb8:	4b2b      	ldr	r3, [pc, #172]	; (8006c68 <scaraFlowDuty+0x4f4>)
 8006bba:	f503 6314 	add.w	r3, r3, #2368	; 0x940
 8006bbe:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006bc2:	f997 307c 	ldrsb.w	r3, [r7, #124]	; 0x7c
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f7f9 fcbc 	bl	8000544 <__aeabi_i2d>
 8006bcc:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8006bd0:	f7f9 fd22 	bl	8000618 <__aeabi_dmul>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	460b      	mov	r3, r1
 8006bd8:	4620      	mov	r0, r4
 8006bda:	4629      	mov	r1, r5
 8006bdc:	f7f9 fb66 	bl	80002ac <__adddf3>
 8006be0:	4603      	mov	r3, r0
 8006be2:	460c      	mov	r4, r1
 8006be4:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
		positionCompute.total_time = myDUTY.time_total;
 8006be8:	4b1f      	ldr	r3, [pc, #124]	; (8006c68 <scaraFlowDuty+0x4f4>)
 8006bea:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8006bee:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006bf2:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
		positionCompute.t		= time;
 8006bf6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8006bfa:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
		// Check workspace
		if( SCARA_STATUS_OK != scaraCheckWorkSpace4(positionCompute.Theta1,
 8006bfe:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8006c02:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 8006c06:	ed97 5b1a 	vldr	d5, [r7, #104]	; 0x68
 8006c0a:	ed97 4b1c 	vldr	d4, [r7, #112]	; 0x70
 8006c0e:	eeb0 3a44 	vmov.f32	s6, s8
 8006c12:	eef0 3a64 	vmov.f32	s7, s9
 8006c16:	eeb0 2a45 	vmov.f32	s4, s10
 8006c1a:	eef0 2a65 	vmov.f32	s5, s11
 8006c1e:	eeb0 1a46 	vmov.f32	s2, s12
 8006c22:	eef0 1a66 	vmov.f32	s3, s13
 8006c26:	eeb0 0a47 	vmov.f32	s0, s14
 8006c2a:	eef0 0a67 	vmov.f32	s1, s15
 8006c2e:	f001 f9c7 	bl	8007fc0 <scaraCheckWorkSpace4>
 8006c32:	4603      	mov	r3, r0
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d001      	beq.n	8006c3c <scaraFlowDuty+0x4c8>
							 	 	 	  positionCompute.Theta2,
										  positionCompute.D3,
										  positionCompute.Theta4)) {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8006c38:	2307      	movs	r3, #7
 8006c3a:	e00d      	b.n	8006c58 <scaraFlowDuty+0x4e4>
		} else {
			memcpy(pos_Next, &positionCompute, sizeof(SCARA_PositionTypeDef));
 8006c3c:	f107 0310 	add.w	r3, r7, #16
 8006c40:	2268      	movs	r2, #104	; 0x68
 8006c42:	4619      	mov	r1, r3
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f00c fc4b 	bl	80134e0 <memcpy>
		}
		kinematicForward(pos_Next);
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f7fc f844 	bl	8002cd8 <kinematicForward>
 8006c50:	e001      	b.n	8006c56 <scaraFlowDuty+0x4e2>

	} else {
		return SCARA_STATUS_ERROR_SPACE;
 8006c52:	2302      	movs	r3, #2
 8006c54:	e000      	b.n	8006c58 <scaraFlowDuty+0x4e4>
	}

	return SCARA_STATUS_OK;
 8006c56:	2300      	movs	r3, #0
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	37d8      	adds	r7, #216	; 0xd8
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8006c62:	b002      	add	sp, #8
 8006c64:	4770      	bx	lr
 8006c66:	bf00      	nop
 8006c68:	20005388 	.word	0x20005388
 8006c6c:	200057d8 	.word	0x200057d8
 8006c70:	20005930 	.word	0x20005930
 8006c74:	20005a88 	.word	0x20005a88
 8006c78:	20005be0 	.word	0x20005be0
 8006c7c:	00000000 	.word	0x00000000

08006c80 <scaraFlowLine>:

/* Compute new x, y ,z corresponding to s */
SCARA_StatusTypeDef	scaraFlowLine		(Path_Line_TypeDef *line, double s) {
 8006c80:	b5b0      	push	{r4, r5, r7, lr}
 8006c82:	b084      	sub	sp, #16
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	ed87 0b00 	vstr	d0, [r7]
	// Avoid div with 0
	if ( line->total_s > 0.01) {
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8006c92:	a33d      	add	r3, pc, #244	; (adr r3, 8006d88 <scaraFlowLine+0x108>)
 8006c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c98:	f7f9 ff4e 	bl	8000b38 <__aeabi_dcmpgt>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d05a      	beq.n	8006d58 <scaraFlowLine+0xd8>
		line->x_current	 = line->x0 + line->denta_x*s/line->total_s;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8006cae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cb2:	f7f9 fcb1 	bl	8000618 <__aeabi_dmul>
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	460b      	mov	r3, r1
 8006cba:	4610      	mov	r0, r2
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8006cc4:	f7f9 fdd2 	bl	800086c <__aeabi_ddiv>
 8006cc8:	4602      	mov	r2, r0
 8006cca:	460b      	mov	r3, r1
 8006ccc:	4620      	mov	r0, r4
 8006cce:	4629      	mov	r1, r5
 8006cd0:	f7f9 faec 	bl	80002ac <__adddf3>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	460c      	mov	r4, r1
 8006cd8:	68fa      	ldr	r2, [r7, #12]
 8006cda:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
		line->y_current	 = line->y0 + line->denta_y*s/line->total_s;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8006cea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cee:	f7f9 fc93 	bl	8000618 <__aeabi_dmul>
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	460b      	mov	r3, r1
 8006cf6:	4610      	mov	r0, r2
 8006cf8:	4619      	mov	r1, r3
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8006d00:	f7f9 fdb4 	bl	800086c <__aeabi_ddiv>
 8006d04:	4602      	mov	r2, r0
 8006d06:	460b      	mov	r3, r1
 8006d08:	4620      	mov	r0, r4
 8006d0a:	4629      	mov	r1, r5
 8006d0c:	f7f9 face 	bl	80002ac <__adddf3>
 8006d10:	4603      	mov	r3, r0
 8006d12:	460c      	mov	r4, r1
 8006d14:	68fa      	ldr	r2, [r7, #12]
 8006d16:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
		line->z_current	 = line->z0 + line->denta_z*s/line->total_s;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8006d26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d2a:	f7f9 fc75 	bl	8000618 <__aeabi_dmul>
 8006d2e:	4602      	mov	r2, r0
 8006d30:	460b      	mov	r3, r1
 8006d32:	4610      	mov	r0, r2
 8006d34:	4619      	mov	r1, r3
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8006d3c:	f7f9 fd96 	bl	800086c <__aeabi_ddiv>
 8006d40:	4602      	mov	r2, r0
 8006d42:	460b      	mov	r3, r1
 8006d44:	4620      	mov	r0, r4
 8006d46:	4629      	mov	r1, r5
 8006d48:	f7f9 fab0 	bl	80002ac <__adddf3>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	460c      	mov	r4, r1
 8006d50:	68fa      	ldr	r2, [r7, #12]
 8006d52:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
 8006d56:	e011      	b.n	8006d7c <scaraFlowLine+0xfc>
	} else {
		line->x_current = line->x1;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8006d5e:	68fa      	ldr	r2, [r7, #12]
 8006d60:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
		line->y_current = line->y1;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8006d6a:	68fa      	ldr	r2, [r7, #12]
 8006d6c:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
		line->z_current = line->z1;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8006d76:	68fa      	ldr	r2, [r7, #12]
 8006d78:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
	}

	return SCARA_STATUS_OK;
 8006d7c:	2300      	movs	r3, #0
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3710      	adds	r7, #16
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bdb0      	pop	{r4, r5, r7, pc}
 8006d86:	bf00      	nop
 8006d88:	47ae147b 	.word	0x47ae147b
 8006d8c:	3f847ae1 	.word	0x3f847ae1

08006d90 <scaraFlowCircle>:

/* Compute new x, y ,z corresponding to s */
SCARA_StatusTypeDef	scaraFlowCircle		(Path_Circle_TypeDef *circle, double s) {
 8006d90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d94:	b086      	sub	sp, #24
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	60f8      	str	r0, [r7, #12]
 8006d9a:	ed87 0b00 	vstr	d0, [r7]
	double angle;
	angle = s/(circle->radius);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8006da4:	461a      	mov	r2, r3
 8006da6:	4623      	mov	r3, r4
 8006da8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006dac:	f7f9 fd5e 	bl	800086c <__aeabi_ddiv>
 8006db0:	4603      	mov	r3, r0
 8006db2:	460c      	mov	r4, r1
 8006db4:	e9c7 3404 	strd	r3, r4, [r7, #16]
	circle->x_current = circle->xi + circle->radius*cos(circle->angle_start + circle->dir*angle);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	e9d3 ab04 	ldrd	sl, fp, [r3, #16]
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	f993 3000 	ldrsb.w	r3, [r3]
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f7f9 fbb7 	bl	8000544 <__aeabi_i2d>
 8006dd6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006dda:	f7f9 fc1d 	bl	8000618 <__aeabi_dmul>
 8006dde:	4602      	mov	r2, r0
 8006de0:	460b      	mov	r3, r1
 8006de2:	4650      	mov	r0, sl
 8006de4:	4659      	mov	r1, fp
 8006de6:	f7f9 fa61 	bl	80002ac <__adddf3>
 8006dea:	4602      	mov	r2, r0
 8006dec:	460b      	mov	r3, r1
 8006dee:	ec43 2b17 	vmov	d7, r2, r3
 8006df2:	eeb0 0a47 	vmov.f32	s0, s14
 8006df6:	eef0 0a67 	vmov.f32	s1, s15
 8006dfa:	f010 fda1 	bl	8017940 <cos>
 8006dfe:	ec53 2b10 	vmov	r2, r3, d0
 8006e02:	4640      	mov	r0, r8
 8006e04:	4649      	mov	r1, r9
 8006e06:	f7f9 fc07 	bl	8000618 <__aeabi_dmul>
 8006e0a:	4602      	mov	r2, r0
 8006e0c:	460b      	mov	r3, r1
 8006e0e:	4620      	mov	r0, r4
 8006e10:	4629      	mov	r1, r5
 8006e12:	f7f9 fa4b 	bl	80002ac <__adddf3>
 8006e16:	4603      	mov	r3, r0
 8006e18:	460c      	mov	r4, r1
 8006e1a:	68fa      	ldr	r2, [r7, #12]
 8006e1c:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	circle->y_current = circle->yi + circle->radius*sin(circle->angle_start + circle->dir*angle);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	e9d3 ab04 	ldrd	sl, fp, [r3, #16]
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	f993 3000 	ldrsb.w	r3, [r3]
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f7f9 fb83 	bl	8000544 <__aeabi_i2d>
 8006e3e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006e42:	f7f9 fbe9 	bl	8000618 <__aeabi_dmul>
 8006e46:	4602      	mov	r2, r0
 8006e48:	460b      	mov	r3, r1
 8006e4a:	4650      	mov	r0, sl
 8006e4c:	4659      	mov	r1, fp
 8006e4e:	f7f9 fa2d 	bl	80002ac <__adddf3>
 8006e52:	4602      	mov	r2, r0
 8006e54:	460b      	mov	r3, r1
 8006e56:	ec43 2b17 	vmov	d7, r2, r3
 8006e5a:	eeb0 0a47 	vmov.f32	s0, s14
 8006e5e:	eef0 0a67 	vmov.f32	s1, s15
 8006e62:	f010 fdfd 	bl	8017a60 <sin>
 8006e66:	ec53 2b10 	vmov	r2, r3, d0
 8006e6a:	4640      	mov	r0, r8
 8006e6c:	4649      	mov	r1, r9
 8006e6e:	f7f9 fbd3 	bl	8000618 <__aeabi_dmul>
 8006e72:	4602      	mov	r2, r0
 8006e74:	460b      	mov	r3, r1
 8006e76:	4620      	mov	r0, r4
 8006e78:	4629      	mov	r1, r5
 8006e7a:	f7f9 fa17 	bl	80002ac <__adddf3>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	460c      	mov	r4, r1
 8006e82:	68fa      	ldr	r2, [r7, #12]
 8006e84:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
	circle->z_current = circle->zi; // XY plane
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8006e8e:	68fa      	ldr	r2, [r7, #12]
 8006e90:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88

	return SCARA_STATUS_OK;
 8006e94:	2300      	movs	r3, #0
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3718      	adds	r7, #24
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006ea0 <scaraFlowLSPB>:

/* Compute new s corresponding to time */
SCARA_StatusTypeDef	scaraFlowLSPB		(Trajectory_LSPB_TypeDef *lspb, double time) {
 8006ea0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006ea4:	b08b      	sub	sp, #44	; 0x2c
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	60f8      	str	r0, [r7, #12]
 8006eaa:	ed87 0b00 	vstr	d0, [r7]
	double tf, td, ta;

	tf = lspb->Tf;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8006eb4:	e9c7 2308 	strd	r2, r3, [r7, #32]
	td = lspb->Td;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8006ebe:	e9c7 2306 	strd	r2, r3, [r7, #24]
	ta = lspb->Ta;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8006ec8:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Accelerate
	if ( 0.0f <= time && time <= ta) {
 8006ecc:	f04f 0200 	mov.w	r2, #0
 8006ed0:	f04f 0300 	mov.w	r3, #0
 8006ed4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ed8:	f7f9 fe24 	bl	8000b24 <__aeabi_dcmpge>
 8006edc:	4603      	mov	r3, r0
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d05b      	beq.n	8006f9a <scaraFlowLSPB+0xfa>
 8006ee2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006ee6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006eea:	f7f9 fe11 	bl	8000b10 <__aeabi_dcmple>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d052      	beq.n	8006f9a <scaraFlowLSPB+0xfa>
		lspb->a_current		=	lspb->a_design;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8006efa:	68fa      	ldr	r2, [r7, #12]
 8006efc:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		lspb->v_current		=	lspb->v0 + lspb->a_design*time;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8006f0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f10:	f7f9 fb82 	bl	8000618 <__aeabi_dmul>
 8006f14:	4602      	mov	r2, r0
 8006f16:	460b      	mov	r3, r1
 8006f18:	4620      	mov	r0, r4
 8006f1a:	4629      	mov	r1, r5
 8006f1c:	f7f9 f9c6 	bl	80002ac <__adddf3>
 8006f20:	4603      	mov	r3, r0
 8006f22:	460c      	mov	r4, r1
 8006f24:	68fa      	ldr	r2, [r7, #12]
 8006f26:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->s0 + lspb->v0*time + 0.5*lspb->a_design*time*time;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8006f36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f3a:	f7f9 fb6d 	bl	8000618 <__aeabi_dmul>
 8006f3e:	4602      	mov	r2, r0
 8006f40:	460b      	mov	r3, r1
 8006f42:	4620      	mov	r0, r4
 8006f44:	4629      	mov	r1, r5
 8006f46:	f7f9 f9b1 	bl	80002ac <__adddf3>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	460c      	mov	r4, r1
 8006f4e:	4625      	mov	r5, r4
 8006f50:	461c      	mov	r4, r3
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8006f58:	f04f 0200 	mov.w	r2, #0
 8006f5c:	4ba5      	ldr	r3, [pc, #660]	; (80071f4 <scaraFlowLSPB+0x354>)
 8006f5e:	f7f9 fb5b 	bl	8000618 <__aeabi_dmul>
 8006f62:	4602      	mov	r2, r0
 8006f64:	460b      	mov	r3, r1
 8006f66:	4610      	mov	r0, r2
 8006f68:	4619      	mov	r1, r3
 8006f6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f6e:	f7f9 fb53 	bl	8000618 <__aeabi_dmul>
 8006f72:	4602      	mov	r2, r0
 8006f74:	460b      	mov	r3, r1
 8006f76:	4610      	mov	r0, r2
 8006f78:	4619      	mov	r1, r3
 8006f7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f7e:	f7f9 fb4b 	bl	8000618 <__aeabi_dmul>
 8006f82:	4602      	mov	r2, r0
 8006f84:	460b      	mov	r3, r1
 8006f86:	4620      	mov	r0, r4
 8006f88:	4629      	mov	r1, r5
 8006f8a:	f7f9 f98f 	bl	80002ac <__adddf3>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	460c      	mov	r4, r1
 8006f92:	68fa      	ldr	r2, [r7, #12]
 8006f94:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 8006f98:	e125      	b.n	80071e6 <scaraFlowLSPB+0x346>
	// Constant velocity
	} else if (ta <= time && time <= (tf - td)) {
 8006f9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f9e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006fa2:	f7f9 fdb5 	bl	8000b10 <__aeabi_dcmple>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d05e      	beq.n	800706a <scaraFlowLSPB+0x1ca>
 8006fac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006fb0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006fb4:	f7f9 f978 	bl	80002a8 <__aeabi_dsub>
 8006fb8:	4602      	mov	r2, r0
 8006fba:	460b      	mov	r3, r1
 8006fbc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006fc0:	f7f9 fda6 	bl	8000b10 <__aeabi_dcmple>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d04f      	beq.n	800706a <scaraFlowLSPB+0x1ca>
		lspb->a_current		=	0;
 8006fca:	68fa      	ldr	r2, [r7, #12]
 8006fcc:	f04f 0300 	mov.w	r3, #0
 8006fd0:	f04f 0400 	mov.w	r4, #0
 8006fd4:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		lspb->v_current		=	lspb->v_lim;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8006fde:	68fa      	ldr	r2, [r7, #12]
 8006fe0:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->s0 + lspb->v0*ta/2 + lspb->v_lim*(time - ta/2);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8006ff0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006ff4:	f7f9 fb10 	bl	8000618 <__aeabi_dmul>
 8006ff8:	4602      	mov	r2, r0
 8006ffa:	460b      	mov	r3, r1
 8006ffc:	4610      	mov	r0, r2
 8006ffe:	4619      	mov	r1, r3
 8007000:	f04f 0200 	mov.w	r2, #0
 8007004:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007008:	f7f9 fc30 	bl	800086c <__aeabi_ddiv>
 800700c:	4602      	mov	r2, r0
 800700e:	460b      	mov	r3, r1
 8007010:	4620      	mov	r0, r4
 8007012:	4629      	mov	r1, r5
 8007014:	f7f9 f94a 	bl	80002ac <__adddf3>
 8007018:	4603      	mov	r3, r0
 800701a:	460c      	mov	r4, r1
 800701c:	4698      	mov	r8, r3
 800701e:	46a1      	mov	r9, r4
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8007026:	f04f 0200 	mov.w	r2, #0
 800702a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800702e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007032:	f7f9 fc1b 	bl	800086c <__aeabi_ddiv>
 8007036:	4602      	mov	r2, r0
 8007038:	460b      	mov	r3, r1
 800703a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800703e:	f7f9 f933 	bl	80002a8 <__aeabi_dsub>
 8007042:	4602      	mov	r2, r0
 8007044:	460b      	mov	r3, r1
 8007046:	4620      	mov	r0, r4
 8007048:	4629      	mov	r1, r5
 800704a:	f7f9 fae5 	bl	8000618 <__aeabi_dmul>
 800704e:	4603      	mov	r3, r0
 8007050:	460c      	mov	r4, r1
 8007052:	461a      	mov	r2, r3
 8007054:	4623      	mov	r3, r4
 8007056:	4640      	mov	r0, r8
 8007058:	4649      	mov	r1, r9
 800705a:	f7f9 f927 	bl	80002ac <__adddf3>
 800705e:	4603      	mov	r3, r0
 8007060:	460c      	mov	r4, r1
 8007062:	68fa      	ldr	r2, [r7, #12]
 8007064:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 8007068:	e0bd      	b.n	80071e6 <scaraFlowLSPB+0x346>
	// Decelerate
	} else if ((tf - td) <= time && time <= tf) {
 800706a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800706e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007072:	f7f9 f919 	bl	80002a8 <__aeabi_dsub>
 8007076:	4602      	mov	r2, r0
 8007078:	460b      	mov	r3, r1
 800707a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800707e:	f7f9 fd51 	bl	8000b24 <__aeabi_dcmpge>
 8007082:	4603      	mov	r3, r0
 8007084:	2b00      	cmp	r3, #0
 8007086:	f000 809a 	beq.w	80071be <scaraFlowLSPB+0x31e>
 800708a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800708e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007092:	f7f9 fd3d 	bl	8000b10 <__aeabi_dcmple>
 8007096:	4603      	mov	r3, r0
 8007098:	2b00      	cmp	r3, #0
 800709a:	f000 8090 	beq.w	80071be <scaraFlowLSPB+0x31e>
		lspb->a_current		=	-lspb->a_design;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80070a4:	4614      	mov	r4, r2
 80070a6:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	e9c3 451a 	strd	r4, r5, [r3, #104]	; 0x68
		lspb->v_current		=	lspb->v1 + lspb->a_design*(tf - time);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	e9d3 890c 	ldrd	r8, r9, [r3, #48]	; 0x30
 80070bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070c0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80070c4:	f7f9 f8f0 	bl	80002a8 <__aeabi_dsub>
 80070c8:	4602      	mov	r2, r0
 80070ca:	460b      	mov	r3, r1
 80070cc:	4640      	mov	r0, r8
 80070ce:	4649      	mov	r1, r9
 80070d0:	f7f9 faa2 	bl	8000618 <__aeabi_dmul>
 80070d4:	4602      	mov	r2, r0
 80070d6:	460b      	mov	r3, r1
 80070d8:	4620      	mov	r0, r4
 80070da:	4629      	mov	r1, r5
 80070dc:	f7f9 f8e6 	bl	80002ac <__adddf3>
 80070e0:	4603      	mov	r3, r0
 80070e2:	460c      	mov	r4, r1
 80070e4:	68fa      	ldr	r2, [r7, #12]
 80070e6:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->s1 - lspb->v1*(tf - time)
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 80070f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070fa:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80070fe:	f7f9 f8d3 	bl	80002a8 <__aeabi_dsub>
 8007102:	4602      	mov	r2, r0
 8007104:	460b      	mov	r3, r1
 8007106:	4640      	mov	r0, r8
 8007108:	4649      	mov	r1, r9
 800710a:	f7f9 fa85 	bl	8000618 <__aeabi_dmul>
 800710e:	4602      	mov	r2, r0
 8007110:	460b      	mov	r3, r1
 8007112:	4620      	mov	r0, r4
 8007114:	4629      	mov	r1, r5
 8007116:	f7f9 f8c7 	bl	80002a8 <__aeabi_dsub>
 800711a:	4603      	mov	r3, r0
 800711c:	460c      	mov	r4, r1
 800711e:	461d      	mov	r5, r3
 8007120:	4626      	mov	r6, r4
								- (lspb->v_lim - lspb->v1)*(tf - time)*(tf - time)/(2*td);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 800712e:	461a      	mov	r2, r3
 8007130:	4623      	mov	r3, r4
 8007132:	f7f9 f8b9 	bl	80002a8 <__aeabi_dsub>
 8007136:	4603      	mov	r3, r0
 8007138:	460c      	mov	r4, r1
 800713a:	4698      	mov	r8, r3
 800713c:	46a1      	mov	r9, r4
 800713e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007142:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007146:	f7f9 f8af 	bl	80002a8 <__aeabi_dsub>
 800714a:	4603      	mov	r3, r0
 800714c:	460c      	mov	r4, r1
 800714e:	461a      	mov	r2, r3
 8007150:	4623      	mov	r3, r4
 8007152:	4640      	mov	r0, r8
 8007154:	4649      	mov	r1, r9
 8007156:	f7f9 fa5f 	bl	8000618 <__aeabi_dmul>
 800715a:	4603      	mov	r3, r0
 800715c:	460c      	mov	r4, r1
 800715e:	4698      	mov	r8, r3
 8007160:	46a1      	mov	r9, r4
 8007162:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007166:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800716a:	f7f9 f89d 	bl	80002a8 <__aeabi_dsub>
 800716e:	4603      	mov	r3, r0
 8007170:	460c      	mov	r4, r1
 8007172:	461a      	mov	r2, r3
 8007174:	4623      	mov	r3, r4
 8007176:	4640      	mov	r0, r8
 8007178:	4649      	mov	r1, r9
 800717a:	f7f9 fa4d 	bl	8000618 <__aeabi_dmul>
 800717e:	4603      	mov	r3, r0
 8007180:	460c      	mov	r4, r1
 8007182:	4698      	mov	r8, r3
 8007184:	46a1      	mov	r9, r4
 8007186:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800718a:	4602      	mov	r2, r0
 800718c:	460b      	mov	r3, r1
 800718e:	f7f9 f88d 	bl	80002ac <__adddf3>
 8007192:	4603      	mov	r3, r0
 8007194:	460c      	mov	r4, r1
 8007196:	461a      	mov	r2, r3
 8007198:	4623      	mov	r3, r4
 800719a:	4640      	mov	r0, r8
 800719c:	4649      	mov	r1, r9
 800719e:	f7f9 fb65 	bl	800086c <__aeabi_ddiv>
 80071a2:	4603      	mov	r3, r0
 80071a4:	460c      	mov	r4, r1
 80071a6:	461a      	mov	r2, r3
 80071a8:	4623      	mov	r3, r4
 80071aa:	4628      	mov	r0, r5
 80071ac:	4631      	mov	r1, r6
 80071ae:	f7f9 f87b 	bl	80002a8 <__aeabi_dsub>
 80071b2:	4603      	mov	r3, r0
 80071b4:	460c      	mov	r4, r1
		lspb->s_current		=	lspb->s1 - lspb->v1*(tf - time)
 80071b6:	68fa      	ldr	r2, [r7, #12]
 80071b8:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 80071bc:	e013      	b.n	80071e6 <scaraFlowLSPB+0x346>
	} else {
		lspb->a_current 	=	0;
 80071be:	68fa      	ldr	r2, [r7, #12]
 80071c0:	f04f 0300 	mov.w	r3, #0
 80071c4:	f04f 0400 	mov.w	r4, #0
 80071c8:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		lspb->v_current		=	0;
 80071cc:	68fa      	ldr	r2, [r7, #12]
 80071ce:	f04f 0300 	mov.w	r3, #0
 80071d2:	f04f 0400 	mov.w	r4, #0
 80071d6:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->total_s;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 80071e0:	68fa      	ldr	r2, [r7, #12]
 80071e2:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	}

	return SCARA_STATUS_OK;
 80071e6:	2300      	movs	r3, #0
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	372c      	adds	r7, #44	; 0x2c
 80071ec:	46bd      	mov	sp, r7
 80071ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80071f2:	bf00      	nop
 80071f4:	3fe00000 	.word	0x3fe00000

080071f8 <scaraFLowScurve>:

/* Compute new s corresponding to time */
SCARA_StatusTypeDef	scaraFLowScurve		(Trajectory_Scurve_TypeDef *scurve, double time) {
 80071f8:	b5b0      	push	{r4, r5, r7, lr}
 80071fa:	b092      	sub	sp, #72	; 0x48
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6278      	str	r0, [r7, #36]	; 0x24
 8007200:	ed87 0b06 	vstr	d0, [r7, #24]
	double j_max, tm, tc, t;

	j_max = scurve->j_max;
 8007204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007206:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800720a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	tm	  = scurve->Tm;
 800720e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007210:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8007214:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	tc	  = scurve->Tc;
 8007218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800721a:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800721e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	 // SCURVE 4 PHASE: tc = 0;
	 if ( 4 == scurve->num_of_phase) {
 8007222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007224:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007228:	2b04      	cmp	r3, #4
 800722a:	f040 8321 	bne.w	8007870 <scaraFLowScurve+0x678>
		 // Phase 1
		 if ( (0.0f <= time) && ( time < tm)) {
 800722e:	f04f 0200 	mov.w	r2, #0
 8007232:	f04f 0300 	mov.w	r3, #0
 8007236:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800723a:	f7f9 fc73 	bl	8000b24 <__aeabi_dcmpge>
 800723e:	4603      	mov	r3, r0
 8007240:	2b00      	cmp	r3, #0
 8007242:	d059      	beq.n	80072f8 <scaraFLowScurve+0x100>
 8007244:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007248:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800724c:	f7f9 fc56 	bl	8000afc <__aeabi_dcmplt>
 8007250:	4603      	mov	r3, r0
 8007252:	2b00      	cmp	r3, #0
 8007254:	d050      	beq.n	80072f8 <scaraFLowScurve+0x100>
			 t = time;
 8007256:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800725a:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	= 	j_max*t;
 800725e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007262:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007266:	f7f9 f9d7 	bl	8000618 <__aeabi_dmul>
 800726a:	4603      	mov	r3, r0
 800726c:	460c      	mov	r4, r1
 800726e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007270:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	= 	0.5*j_max*t*t;
 8007274:	f04f 0200 	mov.w	r2, #0
 8007278:	4b93      	ldr	r3, [pc, #588]	; (80074c8 <scaraFLowScurve+0x2d0>)
 800727a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800727e:	f7f9 f9cb 	bl	8000618 <__aeabi_dmul>
 8007282:	4603      	mov	r3, r0
 8007284:	460c      	mov	r4, r1
 8007286:	4618      	mov	r0, r3
 8007288:	4621      	mov	r1, r4
 800728a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800728e:	f7f9 f9c3 	bl	8000618 <__aeabi_dmul>
 8007292:	4603      	mov	r3, r0
 8007294:	460c      	mov	r4, r1
 8007296:	4618      	mov	r0, r3
 8007298:	4621      	mov	r1, r4
 800729a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800729e:	f7f9 f9bb 	bl	8000618 <__aeabi_dmul>
 80072a2:	4603      	mov	r3, r0
 80072a4:	460c      	mov	r4, r1
 80072a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072a8:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current 	= 	j_max*t*t*t/6;
 80072ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80072b0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80072b4:	f7f9 f9b0 	bl	8000618 <__aeabi_dmul>
 80072b8:	4603      	mov	r3, r0
 80072ba:	460c      	mov	r4, r1
 80072bc:	4618      	mov	r0, r3
 80072be:	4621      	mov	r1, r4
 80072c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80072c4:	f7f9 f9a8 	bl	8000618 <__aeabi_dmul>
 80072c8:	4603      	mov	r3, r0
 80072ca:	460c      	mov	r4, r1
 80072cc:	4618      	mov	r0, r3
 80072ce:	4621      	mov	r1, r4
 80072d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80072d4:	f7f9 f9a0 	bl	8000618 <__aeabi_dmul>
 80072d8:	4603      	mov	r3, r0
 80072da:	460c      	mov	r4, r1
 80072dc:	4618      	mov	r0, r3
 80072de:	4621      	mov	r1, r4
 80072e0:	f04f 0200 	mov.w	r2, #0
 80072e4:	4b79      	ldr	r3, [pc, #484]	; (80074cc <scaraFLowScurve+0x2d4>)
 80072e6:	f7f9 fac1 	bl	800086c <__aeabi_ddiv>
 80072ea:	4603      	mov	r3, r0
 80072ec:	460c      	mov	r4, r1
 80072ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072f0:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 80072f4:	f000 be56 	b.w	8007fa4 <scaraFLowScurve+0xdac>
		 // Phase 2
		 } else if ( (tm <= time) && ( time < (2*tm) ) ) {
 80072f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80072fc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007300:	f7f9 fc06 	bl	8000b10 <__aeabi_dcmple>
 8007304:	4603      	mov	r3, r0
 8007306:	2b00      	cmp	r3, #0
 8007308:	f000 80e2 	beq.w	80074d0 <scaraFLowScurve+0x2d8>
 800730c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007310:	4602      	mov	r2, r0
 8007312:	460b      	mov	r3, r1
 8007314:	f7f8 ffca 	bl	80002ac <__adddf3>
 8007318:	4603      	mov	r3, r0
 800731a:	460c      	mov	r4, r1
 800731c:	461a      	mov	r2, r3
 800731e:	4623      	mov	r3, r4
 8007320:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007324:	f7f9 fbea 	bl	8000afc <__aeabi_dcmplt>
 8007328:	4603      	mov	r3, r0
 800732a:	2b00      	cmp	r3, #0
 800732c:	f000 80d0 	beq.w	80074d0 <scaraFLowScurve+0x2d8>
			 t = time - tm;
 8007330:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007334:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007338:	f7f8 ffb6 	bl	80002a8 <__aeabi_dsub>
 800733c:	4603      	mov	r3, r0
 800733e:	460c      	mov	r4, r1
 8007340:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	= 	j_max*tm - j_max*t;
 8007344:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007348:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800734c:	f7f9 f964 	bl	8000618 <__aeabi_dmul>
 8007350:	4603      	mov	r3, r0
 8007352:	460c      	mov	r4, r1
 8007354:	4625      	mov	r5, r4
 8007356:	461c      	mov	r4, r3
 8007358:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800735c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007360:	f7f9 f95a 	bl	8000618 <__aeabi_dmul>
 8007364:	4602      	mov	r2, r0
 8007366:	460b      	mov	r3, r1
 8007368:	4620      	mov	r0, r4
 800736a:	4629      	mov	r1, r5
 800736c:	f7f8 ff9c 	bl	80002a8 <__aeabi_dsub>
 8007370:	4603      	mov	r3, r0
 8007372:	460c      	mov	r4, r1
 8007374:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007376:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current 	= 	scurve->v_1 + j_max*tm*t - 0.5*j_max*t*t;
 800737a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800737c:	e9d3 451e 	ldrd	r4, r5, [r3, #120]	; 0x78
 8007380:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007384:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007388:	f7f9 f946 	bl	8000618 <__aeabi_dmul>
 800738c:	4602      	mov	r2, r0
 800738e:	460b      	mov	r3, r1
 8007390:	4610      	mov	r0, r2
 8007392:	4619      	mov	r1, r3
 8007394:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007398:	f7f9 f93e 	bl	8000618 <__aeabi_dmul>
 800739c:	4602      	mov	r2, r0
 800739e:	460b      	mov	r3, r1
 80073a0:	4620      	mov	r0, r4
 80073a2:	4629      	mov	r1, r5
 80073a4:	f7f8 ff82 	bl	80002ac <__adddf3>
 80073a8:	4603      	mov	r3, r0
 80073aa:	460c      	mov	r4, r1
 80073ac:	4625      	mov	r5, r4
 80073ae:	461c      	mov	r4, r3
 80073b0:	f04f 0200 	mov.w	r2, #0
 80073b4:	4b44      	ldr	r3, [pc, #272]	; (80074c8 <scaraFLowScurve+0x2d0>)
 80073b6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80073ba:	f7f9 f92d 	bl	8000618 <__aeabi_dmul>
 80073be:	4602      	mov	r2, r0
 80073c0:	460b      	mov	r3, r1
 80073c2:	4610      	mov	r0, r2
 80073c4:	4619      	mov	r1, r3
 80073c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80073ca:	f7f9 f925 	bl	8000618 <__aeabi_dmul>
 80073ce:	4602      	mov	r2, r0
 80073d0:	460b      	mov	r3, r1
 80073d2:	4610      	mov	r0, r2
 80073d4:	4619      	mov	r1, r3
 80073d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80073da:	f7f9 f91d 	bl	8000618 <__aeabi_dmul>
 80073de:	4602      	mov	r2, r0
 80073e0:	460b      	mov	r3, r1
 80073e2:	4620      	mov	r0, r4
 80073e4:	4629      	mov	r1, r5
 80073e6:	f7f8 ff5f 	bl	80002a8 <__aeabi_dsub>
 80073ea:	4603      	mov	r3, r0
 80073ec:	460c      	mov	r4, r1
 80073ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073f0:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current 	=	scurve->s_1 + scurve->v_1*t + 0.5*j_max*tm*t*t - j_max*t*t*t/6;
 80073f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f6:	e9d3 4520 	ldrd	r4, r5, [r3, #128]	; 0x80
 80073fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fc:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8007400:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007404:	f7f9 f908 	bl	8000618 <__aeabi_dmul>
 8007408:	4602      	mov	r2, r0
 800740a:	460b      	mov	r3, r1
 800740c:	4620      	mov	r0, r4
 800740e:	4629      	mov	r1, r5
 8007410:	f7f8 ff4c 	bl	80002ac <__adddf3>
 8007414:	4603      	mov	r3, r0
 8007416:	460c      	mov	r4, r1
 8007418:	4625      	mov	r5, r4
 800741a:	461c      	mov	r4, r3
 800741c:	f04f 0200 	mov.w	r2, #0
 8007420:	4b29      	ldr	r3, [pc, #164]	; (80074c8 <scaraFLowScurve+0x2d0>)
 8007422:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007426:	f7f9 f8f7 	bl	8000618 <__aeabi_dmul>
 800742a:	4602      	mov	r2, r0
 800742c:	460b      	mov	r3, r1
 800742e:	4610      	mov	r0, r2
 8007430:	4619      	mov	r1, r3
 8007432:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007436:	f7f9 f8ef 	bl	8000618 <__aeabi_dmul>
 800743a:	4602      	mov	r2, r0
 800743c:	460b      	mov	r3, r1
 800743e:	4610      	mov	r0, r2
 8007440:	4619      	mov	r1, r3
 8007442:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007446:	f7f9 f8e7 	bl	8000618 <__aeabi_dmul>
 800744a:	4602      	mov	r2, r0
 800744c:	460b      	mov	r3, r1
 800744e:	4610      	mov	r0, r2
 8007450:	4619      	mov	r1, r3
 8007452:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007456:	f7f9 f8df 	bl	8000618 <__aeabi_dmul>
 800745a:	4602      	mov	r2, r0
 800745c:	460b      	mov	r3, r1
 800745e:	4620      	mov	r0, r4
 8007460:	4629      	mov	r1, r5
 8007462:	f7f8 ff23 	bl	80002ac <__adddf3>
 8007466:	4603      	mov	r3, r0
 8007468:	460c      	mov	r4, r1
 800746a:	4625      	mov	r5, r4
 800746c:	461c      	mov	r4, r3
 800746e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007472:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007476:	f7f9 f8cf 	bl	8000618 <__aeabi_dmul>
 800747a:	4602      	mov	r2, r0
 800747c:	460b      	mov	r3, r1
 800747e:	4610      	mov	r0, r2
 8007480:	4619      	mov	r1, r3
 8007482:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007486:	f7f9 f8c7 	bl	8000618 <__aeabi_dmul>
 800748a:	4602      	mov	r2, r0
 800748c:	460b      	mov	r3, r1
 800748e:	4610      	mov	r0, r2
 8007490:	4619      	mov	r1, r3
 8007492:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007496:	f7f9 f8bf 	bl	8000618 <__aeabi_dmul>
 800749a:	4602      	mov	r2, r0
 800749c:	460b      	mov	r3, r1
 800749e:	4610      	mov	r0, r2
 80074a0:	4619      	mov	r1, r3
 80074a2:	f04f 0200 	mov.w	r2, #0
 80074a6:	4b09      	ldr	r3, [pc, #36]	; (80074cc <scaraFLowScurve+0x2d4>)
 80074a8:	f7f9 f9e0 	bl	800086c <__aeabi_ddiv>
 80074ac:	4602      	mov	r2, r0
 80074ae:	460b      	mov	r3, r1
 80074b0:	4620      	mov	r0, r4
 80074b2:	4629      	mov	r1, r5
 80074b4:	f7f8 fef8 	bl	80002a8 <__aeabi_dsub>
 80074b8:	4603      	mov	r3, r0
 80074ba:	460c      	mov	r4, r1
 80074bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074be:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 80074c2:	f000 bd6f 	b.w	8007fa4 <scaraFLowScurve+0xdac>
 80074c6:	bf00      	nop
 80074c8:	3fe00000 	.word	0x3fe00000
 80074cc:	40180000 	.word	0x40180000
		 // Phase 3: does not exist
		 // Phase 4
		 } else if ( ((2*tm) <= time) && ( time < (3*tm)) ) {
 80074d0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80074d4:	4602      	mov	r2, r0
 80074d6:	460b      	mov	r3, r1
 80074d8:	f7f8 fee8 	bl	80002ac <__adddf3>
 80074dc:	4603      	mov	r3, r0
 80074de:	460c      	mov	r4, r1
 80074e0:	461a      	mov	r2, r3
 80074e2:	4623      	mov	r3, r4
 80074e4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80074e8:	f7f9 fb1c 	bl	8000b24 <__aeabi_dcmpge>
 80074ec:	4603      	mov	r3, r0
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	f000 80a2 	beq.w	8007638 <scaraFLowScurve+0x440>
 80074f4:	f04f 0200 	mov.w	r2, #0
 80074f8:	4b4c      	ldr	r3, [pc, #304]	; (800762c <scaraFLowScurve+0x434>)
 80074fa:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80074fe:	f7f9 f88b 	bl	8000618 <__aeabi_dmul>
 8007502:	4603      	mov	r3, r0
 8007504:	460c      	mov	r4, r1
 8007506:	461a      	mov	r2, r3
 8007508:	4623      	mov	r3, r4
 800750a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800750e:	f7f9 faf5 	bl	8000afc <__aeabi_dcmplt>
 8007512:	4603      	mov	r3, r0
 8007514:	2b00      	cmp	r3, #0
 8007516:	f000 808f 	beq.w	8007638 <scaraFLowScurve+0x440>
			 t = time - 2*tm;
 800751a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800751e:	4602      	mov	r2, r0
 8007520:	460b      	mov	r3, r1
 8007522:	f7f8 fec3 	bl	80002ac <__adddf3>
 8007526:	4603      	mov	r3, r0
 8007528:	460c      	mov	r4, r1
 800752a:	461a      	mov	r2, r3
 800752c:	4623      	mov	r3, r4
 800752e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007532:	f7f8 feb9 	bl	80002a8 <__aeabi_dsub>
 8007536:	4603      	mov	r3, r0
 8007538:	460c      	mov	r4, r1
 800753a:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	=	-j_max*t;
 800753e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007540:	613b      	str	r3, [r7, #16]
 8007542:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007544:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007548:	617b      	str	r3, [r7, #20]
 800754a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800754e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007552:	f7f9 f861 	bl	8000618 <__aeabi_dmul>
 8007556:	4603      	mov	r3, r0
 8007558:	460c      	mov	r4, r1
 800755a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800755c:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_2 - 0.5*j_max*t*t;
 8007560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007562:	e9d3 4522 	ldrd	r4, r5, [r3, #136]	; 0x88
 8007566:	f04f 0200 	mov.w	r2, #0
 800756a:	4b31      	ldr	r3, [pc, #196]	; (8007630 <scaraFLowScurve+0x438>)
 800756c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007570:	f7f9 f852 	bl	8000618 <__aeabi_dmul>
 8007574:	4602      	mov	r2, r0
 8007576:	460b      	mov	r3, r1
 8007578:	4610      	mov	r0, r2
 800757a:	4619      	mov	r1, r3
 800757c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007580:	f7f9 f84a 	bl	8000618 <__aeabi_dmul>
 8007584:	4602      	mov	r2, r0
 8007586:	460b      	mov	r3, r1
 8007588:	4610      	mov	r0, r2
 800758a:	4619      	mov	r1, r3
 800758c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007590:	f7f9 f842 	bl	8000618 <__aeabi_dmul>
 8007594:	4602      	mov	r2, r0
 8007596:	460b      	mov	r3, r1
 8007598:	4620      	mov	r0, r4
 800759a:	4629      	mov	r1, r5
 800759c:	f7f8 fe84 	bl	80002a8 <__aeabi_dsub>
 80075a0:	4603      	mov	r3, r0
 80075a2:	460c      	mov	r4, r1
 80075a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075a6:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_2 + scurve->v_2*t - j_max*t*t*t/6;
 80075aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ac:	e9d3 4524 	ldrd	r4, r5, [r3, #144]	; 0x90
 80075b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b2:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 80075b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80075ba:	f7f9 f82d 	bl	8000618 <__aeabi_dmul>
 80075be:	4602      	mov	r2, r0
 80075c0:	460b      	mov	r3, r1
 80075c2:	4620      	mov	r0, r4
 80075c4:	4629      	mov	r1, r5
 80075c6:	f7f8 fe71 	bl	80002ac <__adddf3>
 80075ca:	4603      	mov	r3, r0
 80075cc:	460c      	mov	r4, r1
 80075ce:	4625      	mov	r5, r4
 80075d0:	461c      	mov	r4, r3
 80075d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80075d6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80075da:	f7f9 f81d 	bl	8000618 <__aeabi_dmul>
 80075de:	4602      	mov	r2, r0
 80075e0:	460b      	mov	r3, r1
 80075e2:	4610      	mov	r0, r2
 80075e4:	4619      	mov	r1, r3
 80075e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80075ea:	f7f9 f815 	bl	8000618 <__aeabi_dmul>
 80075ee:	4602      	mov	r2, r0
 80075f0:	460b      	mov	r3, r1
 80075f2:	4610      	mov	r0, r2
 80075f4:	4619      	mov	r1, r3
 80075f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80075fa:	f7f9 f80d 	bl	8000618 <__aeabi_dmul>
 80075fe:	4602      	mov	r2, r0
 8007600:	460b      	mov	r3, r1
 8007602:	4610      	mov	r0, r2
 8007604:	4619      	mov	r1, r3
 8007606:	f04f 0200 	mov.w	r2, #0
 800760a:	4b0a      	ldr	r3, [pc, #40]	; (8007634 <scaraFLowScurve+0x43c>)
 800760c:	f7f9 f92e 	bl	800086c <__aeabi_ddiv>
 8007610:	4602      	mov	r2, r0
 8007612:	460b      	mov	r3, r1
 8007614:	4620      	mov	r0, r4
 8007616:	4629      	mov	r1, r5
 8007618:	f7f8 fe46 	bl	80002a8 <__aeabi_dsub>
 800761c:	4603      	mov	r3, r0
 800761e:	460c      	mov	r4, r1
 8007620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007622:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8007626:	f000 bcbd 	b.w	8007fa4 <scaraFLowScurve+0xdac>
 800762a:	bf00      	nop
 800762c:	40080000 	.word	0x40080000
 8007630:	3fe00000 	.word	0x3fe00000
 8007634:	40180000 	.word	0x40180000
		 // Phase 5
		 } else if ( ((3*tm) <= time) && ( time < (4*tm)) ) {
 8007638:	f04f 0200 	mov.w	r2, #0
 800763c:	4b88      	ldr	r3, [pc, #544]	; (8007860 <scaraFLowScurve+0x668>)
 800763e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007642:	f7f8 ffe9 	bl	8000618 <__aeabi_dmul>
 8007646:	4603      	mov	r3, r0
 8007648:	460c      	mov	r4, r1
 800764a:	461a      	mov	r2, r3
 800764c:	4623      	mov	r3, r4
 800764e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007652:	f7f9 fa67 	bl	8000b24 <__aeabi_dcmpge>
 8007656:	4603      	mov	r3, r0
 8007658:	2b00      	cmp	r3, #0
 800765a:	f000 80ec 	beq.w	8007836 <scaraFLowScurve+0x63e>
 800765e:	f04f 0200 	mov.w	r2, #0
 8007662:	4b80      	ldr	r3, [pc, #512]	; (8007864 <scaraFLowScurve+0x66c>)
 8007664:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007668:	f7f8 ffd6 	bl	8000618 <__aeabi_dmul>
 800766c:	4603      	mov	r3, r0
 800766e:	460c      	mov	r4, r1
 8007670:	461a      	mov	r2, r3
 8007672:	4623      	mov	r3, r4
 8007674:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007678:	f7f9 fa40 	bl	8000afc <__aeabi_dcmplt>
 800767c:	4603      	mov	r3, r0
 800767e:	2b00      	cmp	r3, #0
 8007680:	f000 80d9 	beq.w	8007836 <scaraFLowScurve+0x63e>
			 t = time - 3*tm;
 8007684:	f04f 0200 	mov.w	r2, #0
 8007688:	4b75      	ldr	r3, [pc, #468]	; (8007860 <scaraFLowScurve+0x668>)
 800768a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800768e:	f7f8 ffc3 	bl	8000618 <__aeabi_dmul>
 8007692:	4603      	mov	r3, r0
 8007694:	460c      	mov	r4, r1
 8007696:	461a      	mov	r2, r3
 8007698:	4623      	mov	r3, r4
 800769a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800769e:	f7f8 fe03 	bl	80002a8 <__aeabi_dsub>
 80076a2:	4603      	mov	r3, r0
 80076a4:	460c      	mov	r4, r1
 80076a6:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current	=	-j_max*tm + j_max*t;
 80076aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076ac:	60bb      	str	r3, [r7, #8]
 80076ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076b0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80076b4:	60fb      	str	r3, [r7, #12]
 80076b6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80076ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80076be:	f7f8 ffab 	bl	8000618 <__aeabi_dmul>
 80076c2:	4603      	mov	r3, r0
 80076c4:	460c      	mov	r4, r1
 80076c6:	4625      	mov	r5, r4
 80076c8:	461c      	mov	r4, r3
 80076ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80076ce:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80076d2:	f7f8 ffa1 	bl	8000618 <__aeabi_dmul>
 80076d6:	4602      	mov	r2, r0
 80076d8:	460b      	mov	r3, r1
 80076da:	4620      	mov	r0, r4
 80076dc:	4629      	mov	r1, r5
 80076de:	f7f8 fde5 	bl	80002ac <__adddf3>
 80076e2:	4603      	mov	r3, r0
 80076e4:	460c      	mov	r4, r1
 80076e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076e8:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_4 - j_max*tm*t + 0.5*j_max*t*t;
 80076ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ee:	e9d3 452a 	ldrd	r4, r5, [r3, #168]	; 0xa8
 80076f2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80076f6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80076fa:	f7f8 ff8d 	bl	8000618 <__aeabi_dmul>
 80076fe:	4602      	mov	r2, r0
 8007700:	460b      	mov	r3, r1
 8007702:	4610      	mov	r0, r2
 8007704:	4619      	mov	r1, r3
 8007706:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800770a:	f7f8 ff85 	bl	8000618 <__aeabi_dmul>
 800770e:	4602      	mov	r2, r0
 8007710:	460b      	mov	r3, r1
 8007712:	4620      	mov	r0, r4
 8007714:	4629      	mov	r1, r5
 8007716:	f7f8 fdc7 	bl	80002a8 <__aeabi_dsub>
 800771a:	4603      	mov	r3, r0
 800771c:	460c      	mov	r4, r1
 800771e:	4625      	mov	r5, r4
 8007720:	461c      	mov	r4, r3
 8007722:	f04f 0200 	mov.w	r2, #0
 8007726:	4b50      	ldr	r3, [pc, #320]	; (8007868 <scaraFLowScurve+0x670>)
 8007728:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800772c:	f7f8 ff74 	bl	8000618 <__aeabi_dmul>
 8007730:	4602      	mov	r2, r0
 8007732:	460b      	mov	r3, r1
 8007734:	4610      	mov	r0, r2
 8007736:	4619      	mov	r1, r3
 8007738:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800773c:	f7f8 ff6c 	bl	8000618 <__aeabi_dmul>
 8007740:	4602      	mov	r2, r0
 8007742:	460b      	mov	r3, r1
 8007744:	4610      	mov	r0, r2
 8007746:	4619      	mov	r1, r3
 8007748:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800774c:	f7f8 ff64 	bl	8000618 <__aeabi_dmul>
 8007750:	4602      	mov	r2, r0
 8007752:	460b      	mov	r3, r1
 8007754:	4620      	mov	r0, r4
 8007756:	4629      	mov	r1, r5
 8007758:	f7f8 fda8 	bl	80002ac <__adddf3>
 800775c:	4603      	mov	r3, r0
 800775e:	460c      	mov	r4, r1
 8007760:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007762:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_4 + scurve->v_4*t
 8007766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007768:	e9d3 452c 	ldrd	r4, r5, [r3, #176]	; 0xb0
 800776c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776e:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
 8007772:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007776:	f7f8 ff4f 	bl	8000618 <__aeabi_dmul>
 800777a:	4602      	mov	r2, r0
 800777c:	460b      	mov	r3, r1
 800777e:	4620      	mov	r0, r4
 8007780:	4629      	mov	r1, r5
 8007782:	f7f8 fd93 	bl	80002ac <__adddf3>
 8007786:	4603      	mov	r3, r0
 8007788:	460c      	mov	r4, r1
 800778a:	4625      	mov	r5, r4
 800778c:	461c      	mov	r4, r3
									- 0.5*j_max*tm*t*t
 800778e:	f04f 0200 	mov.w	r2, #0
 8007792:	4b35      	ldr	r3, [pc, #212]	; (8007868 <scaraFLowScurve+0x670>)
 8007794:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007798:	f7f8 ff3e 	bl	8000618 <__aeabi_dmul>
 800779c:	4602      	mov	r2, r0
 800779e:	460b      	mov	r3, r1
 80077a0:	4610      	mov	r0, r2
 80077a2:	4619      	mov	r1, r3
 80077a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80077a8:	f7f8 ff36 	bl	8000618 <__aeabi_dmul>
 80077ac:	4602      	mov	r2, r0
 80077ae:	460b      	mov	r3, r1
 80077b0:	4610      	mov	r0, r2
 80077b2:	4619      	mov	r1, r3
 80077b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80077b8:	f7f8 ff2e 	bl	8000618 <__aeabi_dmul>
 80077bc:	4602      	mov	r2, r0
 80077be:	460b      	mov	r3, r1
 80077c0:	4610      	mov	r0, r2
 80077c2:	4619      	mov	r1, r3
 80077c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80077c8:	f7f8 ff26 	bl	8000618 <__aeabi_dmul>
 80077cc:	4602      	mov	r2, r0
 80077ce:	460b      	mov	r3, r1
 80077d0:	4620      	mov	r0, r4
 80077d2:	4629      	mov	r1, r5
 80077d4:	f7f8 fd68 	bl	80002a8 <__aeabi_dsub>
 80077d8:	4603      	mov	r3, r0
 80077da:	460c      	mov	r4, r1
 80077dc:	4625      	mov	r5, r4
 80077de:	461c      	mov	r4, r3
									+ j_max*t*t*t/6;
 80077e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80077e4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80077e8:	f7f8 ff16 	bl	8000618 <__aeabi_dmul>
 80077ec:	4602      	mov	r2, r0
 80077ee:	460b      	mov	r3, r1
 80077f0:	4610      	mov	r0, r2
 80077f2:	4619      	mov	r1, r3
 80077f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80077f8:	f7f8 ff0e 	bl	8000618 <__aeabi_dmul>
 80077fc:	4602      	mov	r2, r0
 80077fe:	460b      	mov	r3, r1
 8007800:	4610      	mov	r0, r2
 8007802:	4619      	mov	r1, r3
 8007804:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007808:	f7f8 ff06 	bl	8000618 <__aeabi_dmul>
 800780c:	4602      	mov	r2, r0
 800780e:	460b      	mov	r3, r1
 8007810:	4610      	mov	r0, r2
 8007812:	4619      	mov	r1, r3
 8007814:	f04f 0200 	mov.w	r2, #0
 8007818:	4b14      	ldr	r3, [pc, #80]	; (800786c <scaraFLowScurve+0x674>)
 800781a:	f7f9 f827 	bl	800086c <__aeabi_ddiv>
 800781e:	4602      	mov	r2, r0
 8007820:	460b      	mov	r3, r1
 8007822:	4620      	mov	r0, r4
 8007824:	4629      	mov	r1, r5
 8007826:	f7f8 fd41 	bl	80002ac <__adddf3>
 800782a:	4603      	mov	r3, r0
 800782c:	460c      	mov	r4, r1
			 scurve->s_current	=	scurve->s_4 + scurve->v_4*t
 800782e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007830:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8007834:	e3b6      	b.n	8007fa4 <scaraFLowScurve+0xdac>
		 } else {
			 scurve->a_current = 0;
 8007836:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007838:	f04f 0300 	mov.w	r3, #0
 800783c:	f04f 0400 	mov.w	r4, #0
 8007840:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current = 0;
 8007844:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007846:	f04f 0300 	mov.w	r3, #0
 800784a:	f04f 0400 	mov.w	r4, #0
 800784e:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current = scurve->total_s;
 8007852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007854:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8007858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800785a:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 800785e:	e3a1      	b.n	8007fa4 <scaraFLowScurve+0xdac>
 8007860:	40080000 	.word	0x40080000
 8007864:	40100000 	.word	0x40100000
 8007868:	3fe00000 	.word	0x3fe00000
 800786c:	40180000 	.word	0x40180000
		 }

	 // SCURVE 5 PHASE: tc > 0
	 } else if ( 5 == scurve->num_of_phase) {
 8007870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007872:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007876:	2b05      	cmp	r3, #5
 8007878:	f040 8392 	bne.w	8007fa0 <scaraFLowScurve+0xda8>
		 // Phase 1
		 if ( (0 <= time) && ( time < tm)) {
 800787c:	f04f 0200 	mov.w	r2, #0
 8007880:	f04f 0300 	mov.w	r3, #0
 8007884:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007888:	f7f9 f94c 	bl	8000b24 <__aeabi_dcmpge>
 800788c:	4603      	mov	r3, r0
 800788e:	2b00      	cmp	r3, #0
 8007890:	d058      	beq.n	8007944 <scaraFLowScurve+0x74c>
 8007892:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007896:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800789a:	f7f9 f92f 	bl	8000afc <__aeabi_dcmplt>
 800789e:	4603      	mov	r3, r0
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d04f      	beq.n	8007944 <scaraFLowScurve+0x74c>
			 t = time;
 80078a4:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80078a8:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	= 	j_max*t;
 80078ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80078b0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80078b4:	f7f8 feb0 	bl	8000618 <__aeabi_dmul>
 80078b8:	4603      	mov	r3, r0
 80078ba:	460c      	mov	r4, r1
 80078bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078be:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	= 	0.5*j_max*t*t;
 80078c2:	f04f 0200 	mov.w	r2, #0
 80078c6:	4b91      	ldr	r3, [pc, #580]	; (8007b0c <scaraFLowScurve+0x914>)
 80078c8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80078cc:	f7f8 fea4 	bl	8000618 <__aeabi_dmul>
 80078d0:	4603      	mov	r3, r0
 80078d2:	460c      	mov	r4, r1
 80078d4:	4618      	mov	r0, r3
 80078d6:	4621      	mov	r1, r4
 80078d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80078dc:	f7f8 fe9c 	bl	8000618 <__aeabi_dmul>
 80078e0:	4603      	mov	r3, r0
 80078e2:	460c      	mov	r4, r1
 80078e4:	4618      	mov	r0, r3
 80078e6:	4621      	mov	r1, r4
 80078e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80078ec:	f7f8 fe94 	bl	8000618 <__aeabi_dmul>
 80078f0:	4603      	mov	r3, r0
 80078f2:	460c      	mov	r4, r1
 80078f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078f6:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current 	= 	j_max*t*t*t/6;
 80078fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80078fe:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007902:	f7f8 fe89 	bl	8000618 <__aeabi_dmul>
 8007906:	4603      	mov	r3, r0
 8007908:	460c      	mov	r4, r1
 800790a:	4618      	mov	r0, r3
 800790c:	4621      	mov	r1, r4
 800790e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007912:	f7f8 fe81 	bl	8000618 <__aeabi_dmul>
 8007916:	4603      	mov	r3, r0
 8007918:	460c      	mov	r4, r1
 800791a:	4618      	mov	r0, r3
 800791c:	4621      	mov	r1, r4
 800791e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007922:	f7f8 fe79 	bl	8000618 <__aeabi_dmul>
 8007926:	4603      	mov	r3, r0
 8007928:	460c      	mov	r4, r1
 800792a:	4618      	mov	r0, r3
 800792c:	4621      	mov	r1, r4
 800792e:	f04f 0200 	mov.w	r2, #0
 8007932:	4b77      	ldr	r3, [pc, #476]	; (8007b10 <scaraFLowScurve+0x918>)
 8007934:	f7f8 ff9a 	bl	800086c <__aeabi_ddiv>
 8007938:	4603      	mov	r3, r0
 800793a:	460c      	mov	r4, r1
 800793c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800793e:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8007942:	e32f      	b.n	8007fa4 <scaraFLowScurve+0xdac>
		 // Phase 2
		 } else if ( (tm <= time) && ( time < (2*tm) ) ) {
 8007944:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007948:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800794c:	f7f9 f8e0 	bl	8000b10 <__aeabi_dcmple>
 8007950:	4603      	mov	r3, r0
 8007952:	2b00      	cmp	r3, #0
 8007954:	f000 80de 	beq.w	8007b14 <scaraFLowScurve+0x91c>
 8007958:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800795c:	4602      	mov	r2, r0
 800795e:	460b      	mov	r3, r1
 8007960:	f7f8 fca4 	bl	80002ac <__adddf3>
 8007964:	4602      	mov	r2, r0
 8007966:	460b      	mov	r3, r1
 8007968:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800796c:	f7f9 f8c6 	bl	8000afc <__aeabi_dcmplt>
 8007970:	4603      	mov	r3, r0
 8007972:	2b00      	cmp	r3, #0
 8007974:	f000 80ce 	beq.w	8007b14 <scaraFLowScurve+0x91c>
			 t = time - tm;
 8007978:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800797c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007980:	f7f8 fc92 	bl	80002a8 <__aeabi_dsub>
 8007984:	4603      	mov	r3, r0
 8007986:	460c      	mov	r4, r1
 8007988:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	= 	j_max*tm - j_max*t;
 800798c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007990:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007994:	f7f8 fe40 	bl	8000618 <__aeabi_dmul>
 8007998:	4603      	mov	r3, r0
 800799a:	460c      	mov	r4, r1
 800799c:	4625      	mov	r5, r4
 800799e:	461c      	mov	r4, r3
 80079a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80079a4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80079a8:	f7f8 fe36 	bl	8000618 <__aeabi_dmul>
 80079ac:	4602      	mov	r2, r0
 80079ae:	460b      	mov	r3, r1
 80079b0:	4620      	mov	r0, r4
 80079b2:	4629      	mov	r1, r5
 80079b4:	f7f8 fc78 	bl	80002a8 <__aeabi_dsub>
 80079b8:	4603      	mov	r3, r0
 80079ba:	460c      	mov	r4, r1
 80079bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079be:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current 	= 	scurve->v_1 + j_max*tm*t - 0.5*j_max*t*t;
 80079c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c4:	e9d3 451e 	ldrd	r4, r5, [r3, #120]	; 0x78
 80079c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80079cc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80079d0:	f7f8 fe22 	bl	8000618 <__aeabi_dmul>
 80079d4:	4602      	mov	r2, r0
 80079d6:	460b      	mov	r3, r1
 80079d8:	4610      	mov	r0, r2
 80079da:	4619      	mov	r1, r3
 80079dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80079e0:	f7f8 fe1a 	bl	8000618 <__aeabi_dmul>
 80079e4:	4602      	mov	r2, r0
 80079e6:	460b      	mov	r3, r1
 80079e8:	4620      	mov	r0, r4
 80079ea:	4629      	mov	r1, r5
 80079ec:	f7f8 fc5e 	bl	80002ac <__adddf3>
 80079f0:	4603      	mov	r3, r0
 80079f2:	460c      	mov	r4, r1
 80079f4:	4625      	mov	r5, r4
 80079f6:	461c      	mov	r4, r3
 80079f8:	f04f 0200 	mov.w	r2, #0
 80079fc:	4b43      	ldr	r3, [pc, #268]	; (8007b0c <scaraFLowScurve+0x914>)
 80079fe:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007a02:	f7f8 fe09 	bl	8000618 <__aeabi_dmul>
 8007a06:	4602      	mov	r2, r0
 8007a08:	460b      	mov	r3, r1
 8007a0a:	4610      	mov	r0, r2
 8007a0c:	4619      	mov	r1, r3
 8007a0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007a12:	f7f8 fe01 	bl	8000618 <__aeabi_dmul>
 8007a16:	4602      	mov	r2, r0
 8007a18:	460b      	mov	r3, r1
 8007a1a:	4610      	mov	r0, r2
 8007a1c:	4619      	mov	r1, r3
 8007a1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007a22:	f7f8 fdf9 	bl	8000618 <__aeabi_dmul>
 8007a26:	4602      	mov	r2, r0
 8007a28:	460b      	mov	r3, r1
 8007a2a:	4620      	mov	r0, r4
 8007a2c:	4629      	mov	r1, r5
 8007a2e:	f7f8 fc3b 	bl	80002a8 <__aeabi_dsub>
 8007a32:	4603      	mov	r3, r0
 8007a34:	460c      	mov	r4, r1
 8007a36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a38:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current 	=	scurve->s_1 + scurve->v_1*t + 0.5*j_max*tm*t*t - j_max*t*t*t/6;
 8007a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a3e:	e9d3 4520 	ldrd	r4, r5, [r3, #128]	; 0x80
 8007a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a44:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8007a48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007a4c:	f7f8 fde4 	bl	8000618 <__aeabi_dmul>
 8007a50:	4602      	mov	r2, r0
 8007a52:	460b      	mov	r3, r1
 8007a54:	4620      	mov	r0, r4
 8007a56:	4629      	mov	r1, r5
 8007a58:	f7f8 fc28 	bl	80002ac <__adddf3>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	460c      	mov	r4, r1
 8007a60:	4625      	mov	r5, r4
 8007a62:	461c      	mov	r4, r3
 8007a64:	f04f 0200 	mov.w	r2, #0
 8007a68:	4b28      	ldr	r3, [pc, #160]	; (8007b0c <scaraFLowScurve+0x914>)
 8007a6a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007a6e:	f7f8 fdd3 	bl	8000618 <__aeabi_dmul>
 8007a72:	4602      	mov	r2, r0
 8007a74:	460b      	mov	r3, r1
 8007a76:	4610      	mov	r0, r2
 8007a78:	4619      	mov	r1, r3
 8007a7a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007a7e:	f7f8 fdcb 	bl	8000618 <__aeabi_dmul>
 8007a82:	4602      	mov	r2, r0
 8007a84:	460b      	mov	r3, r1
 8007a86:	4610      	mov	r0, r2
 8007a88:	4619      	mov	r1, r3
 8007a8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007a8e:	f7f8 fdc3 	bl	8000618 <__aeabi_dmul>
 8007a92:	4602      	mov	r2, r0
 8007a94:	460b      	mov	r3, r1
 8007a96:	4610      	mov	r0, r2
 8007a98:	4619      	mov	r1, r3
 8007a9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007a9e:	f7f8 fdbb 	bl	8000618 <__aeabi_dmul>
 8007aa2:	4602      	mov	r2, r0
 8007aa4:	460b      	mov	r3, r1
 8007aa6:	4620      	mov	r0, r4
 8007aa8:	4629      	mov	r1, r5
 8007aaa:	f7f8 fbff 	bl	80002ac <__adddf3>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	460c      	mov	r4, r1
 8007ab2:	4625      	mov	r5, r4
 8007ab4:	461c      	mov	r4, r3
 8007ab6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007aba:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007abe:	f7f8 fdab 	bl	8000618 <__aeabi_dmul>
 8007ac2:	4602      	mov	r2, r0
 8007ac4:	460b      	mov	r3, r1
 8007ac6:	4610      	mov	r0, r2
 8007ac8:	4619      	mov	r1, r3
 8007aca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007ace:	f7f8 fda3 	bl	8000618 <__aeabi_dmul>
 8007ad2:	4602      	mov	r2, r0
 8007ad4:	460b      	mov	r3, r1
 8007ad6:	4610      	mov	r0, r2
 8007ad8:	4619      	mov	r1, r3
 8007ada:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007ade:	f7f8 fd9b 	bl	8000618 <__aeabi_dmul>
 8007ae2:	4602      	mov	r2, r0
 8007ae4:	460b      	mov	r3, r1
 8007ae6:	4610      	mov	r0, r2
 8007ae8:	4619      	mov	r1, r3
 8007aea:	f04f 0200 	mov.w	r2, #0
 8007aee:	4b08      	ldr	r3, [pc, #32]	; (8007b10 <scaraFLowScurve+0x918>)
 8007af0:	f7f8 febc 	bl	800086c <__aeabi_ddiv>
 8007af4:	4602      	mov	r2, r0
 8007af6:	460b      	mov	r3, r1
 8007af8:	4620      	mov	r0, r4
 8007afa:	4629      	mov	r1, r5
 8007afc:	f7f8 fbd4 	bl	80002a8 <__aeabi_dsub>
 8007b00:	4603      	mov	r3, r0
 8007b02:	460c      	mov	r4, r1
 8007b04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b06:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8007b0a:	e24b      	b.n	8007fa4 <scaraFLowScurve+0xdac>
 8007b0c:	3fe00000 	.word	0x3fe00000
 8007b10:	40180000 	.word	0x40180000
		 // Phase 3
		 } else if ( ((2*tm) <= time) && ( time < (2*tm + tc)) ) {
 8007b14:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007b18:	4602      	mov	r2, r0
 8007b1a:	460b      	mov	r3, r1
 8007b1c:	f7f8 fbc6 	bl	80002ac <__adddf3>
 8007b20:	4602      	mov	r2, r0
 8007b22:	460b      	mov	r3, r1
 8007b24:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007b28:	f7f8 fffc 	bl	8000b24 <__aeabi_dcmpge>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d04b      	beq.n	8007bca <scaraFLowScurve+0x9d2>
 8007b32:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007b36:	4602      	mov	r2, r0
 8007b38:	460b      	mov	r3, r1
 8007b3a:	f7f8 fbb7 	bl	80002ac <__adddf3>
 8007b3e:	4602      	mov	r2, r0
 8007b40:	460b      	mov	r3, r1
 8007b42:	4610      	mov	r0, r2
 8007b44:	4619      	mov	r1, r3
 8007b46:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007b4a:	f7f8 fbaf 	bl	80002ac <__adddf3>
 8007b4e:	4602      	mov	r2, r0
 8007b50:	460b      	mov	r3, r1
 8007b52:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007b56:	f7f8 ffd1 	bl	8000afc <__aeabi_dcmplt>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d034      	beq.n	8007bca <scaraFLowScurve+0x9d2>
			 t = time - 2*tm;
 8007b60:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007b64:	4602      	mov	r2, r0
 8007b66:	460b      	mov	r3, r1
 8007b68:	f7f8 fba0 	bl	80002ac <__adddf3>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	460c      	mov	r4, r1
 8007b70:	461a      	mov	r2, r3
 8007b72:	4623      	mov	r3, r4
 8007b74:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007b78:	f7f8 fb96 	bl	80002a8 <__aeabi_dsub>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	460c      	mov	r4, r1
 8007b80:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	=	0;
 8007b84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b86:	f04f 0300 	mov.w	r3, #0
 8007b8a:	f04f 0400 	mov.w	r4, #0
 8007b8e:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_2;
 8007b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b94:	e9d3 3422 	ldrd	r3, r4, [r3, #136]	; 0x88
 8007b98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b9a:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_2 + scurve->v_2*t;
 8007b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba0:	e9d3 4524 	ldrd	r4, r5, [r3, #144]	; 0x90
 8007ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba6:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 8007baa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007bae:	f7f8 fd33 	bl	8000618 <__aeabi_dmul>
 8007bb2:	4602      	mov	r2, r0
 8007bb4:	460b      	mov	r3, r1
 8007bb6:	4620      	mov	r0, r4
 8007bb8:	4629      	mov	r1, r5
 8007bba:	f7f8 fb77 	bl	80002ac <__adddf3>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	460c      	mov	r4, r1
 8007bc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bc4:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8007bc8:	e1ec      	b.n	8007fa4 <scaraFLowScurve+0xdac>
		 // Phase 4
		 } else if ( ((2*tm + tc) <= time) && ( time < (3*tm + tc)) ) {
 8007bca:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007bce:	4602      	mov	r2, r0
 8007bd0:	460b      	mov	r3, r1
 8007bd2:	f7f8 fb6b 	bl	80002ac <__adddf3>
 8007bd6:	4602      	mov	r2, r0
 8007bd8:	460b      	mov	r3, r1
 8007bda:	4610      	mov	r0, r2
 8007bdc:	4619      	mov	r1, r3
 8007bde:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007be2:	f7f8 fb63 	bl	80002ac <__adddf3>
 8007be6:	4602      	mov	r2, r0
 8007be8:	460b      	mov	r3, r1
 8007bea:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007bee:	f7f8 ff99 	bl	8000b24 <__aeabi_dcmpge>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	f000 80af 	beq.w	8007d58 <scaraFLowScurve+0xb60>
 8007bfa:	f04f 0200 	mov.w	r2, #0
 8007bfe:	4b53      	ldr	r3, [pc, #332]	; (8007d4c <scaraFLowScurve+0xb54>)
 8007c00:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007c04:	f7f8 fd08 	bl	8000618 <__aeabi_dmul>
 8007c08:	4602      	mov	r2, r0
 8007c0a:	460b      	mov	r3, r1
 8007c0c:	4610      	mov	r0, r2
 8007c0e:	4619      	mov	r1, r3
 8007c10:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007c14:	f7f8 fb4a 	bl	80002ac <__adddf3>
 8007c18:	4602      	mov	r2, r0
 8007c1a:	460b      	mov	r3, r1
 8007c1c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007c20:	f7f8 ff6c 	bl	8000afc <__aeabi_dcmplt>
 8007c24:	4603      	mov	r3, r0
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	f000 8096 	beq.w	8007d58 <scaraFLowScurve+0xb60>
			 t = time - (2*tm + tc);
 8007c2c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007c30:	4602      	mov	r2, r0
 8007c32:	460b      	mov	r3, r1
 8007c34:	f7f8 fb3a 	bl	80002ac <__adddf3>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	460c      	mov	r4, r1
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	4621      	mov	r1, r4
 8007c40:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007c44:	f7f8 fb32 	bl	80002ac <__adddf3>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	460c      	mov	r4, r1
 8007c4c:	461a      	mov	r2, r3
 8007c4e:	4623      	mov	r3, r4
 8007c50:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007c54:	f7f8 fb28 	bl	80002a8 <__aeabi_dsub>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	460c      	mov	r4, r1
 8007c5c:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	=	-j_max*t;
 8007c60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c62:	603b      	str	r3, [r7, #0]
 8007c64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c66:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007c6a:	607b      	str	r3, [r7, #4]
 8007c6c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007c70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c74:	f7f8 fcd0 	bl	8000618 <__aeabi_dmul>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	460c      	mov	r4, r1
 8007c7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c7e:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_3 - 0.5*j_max*t*t;
 8007c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c84:	e9d3 4526 	ldrd	r4, r5, [r3, #152]	; 0x98
 8007c88:	f04f 0200 	mov.w	r2, #0
 8007c8c:	4b30      	ldr	r3, [pc, #192]	; (8007d50 <scaraFLowScurve+0xb58>)
 8007c8e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007c92:	f7f8 fcc1 	bl	8000618 <__aeabi_dmul>
 8007c96:	4602      	mov	r2, r0
 8007c98:	460b      	mov	r3, r1
 8007c9a:	4610      	mov	r0, r2
 8007c9c:	4619      	mov	r1, r3
 8007c9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007ca2:	f7f8 fcb9 	bl	8000618 <__aeabi_dmul>
 8007ca6:	4602      	mov	r2, r0
 8007ca8:	460b      	mov	r3, r1
 8007caa:	4610      	mov	r0, r2
 8007cac:	4619      	mov	r1, r3
 8007cae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007cb2:	f7f8 fcb1 	bl	8000618 <__aeabi_dmul>
 8007cb6:	4602      	mov	r2, r0
 8007cb8:	460b      	mov	r3, r1
 8007cba:	4620      	mov	r0, r4
 8007cbc:	4629      	mov	r1, r5
 8007cbe:	f7f8 faf3 	bl	80002a8 <__aeabi_dsub>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	460c      	mov	r4, r1
 8007cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cc8:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_3 + scurve->v_3*t - j_max*t*t*t/6;
 8007ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cce:	e9d3 4528 	ldrd	r4, r5, [r3, #160]	; 0xa0
 8007cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd4:	e9d3 0126 	ldrd	r0, r1, [r3, #152]	; 0x98
 8007cd8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007cdc:	f7f8 fc9c 	bl	8000618 <__aeabi_dmul>
 8007ce0:	4602      	mov	r2, r0
 8007ce2:	460b      	mov	r3, r1
 8007ce4:	4620      	mov	r0, r4
 8007ce6:	4629      	mov	r1, r5
 8007ce8:	f7f8 fae0 	bl	80002ac <__adddf3>
 8007cec:	4603      	mov	r3, r0
 8007cee:	460c      	mov	r4, r1
 8007cf0:	4625      	mov	r5, r4
 8007cf2:	461c      	mov	r4, r3
 8007cf4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007cf8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007cfc:	f7f8 fc8c 	bl	8000618 <__aeabi_dmul>
 8007d00:	4602      	mov	r2, r0
 8007d02:	460b      	mov	r3, r1
 8007d04:	4610      	mov	r0, r2
 8007d06:	4619      	mov	r1, r3
 8007d08:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007d0c:	f7f8 fc84 	bl	8000618 <__aeabi_dmul>
 8007d10:	4602      	mov	r2, r0
 8007d12:	460b      	mov	r3, r1
 8007d14:	4610      	mov	r0, r2
 8007d16:	4619      	mov	r1, r3
 8007d18:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007d1c:	f7f8 fc7c 	bl	8000618 <__aeabi_dmul>
 8007d20:	4602      	mov	r2, r0
 8007d22:	460b      	mov	r3, r1
 8007d24:	4610      	mov	r0, r2
 8007d26:	4619      	mov	r1, r3
 8007d28:	f04f 0200 	mov.w	r2, #0
 8007d2c:	4b09      	ldr	r3, [pc, #36]	; (8007d54 <scaraFLowScurve+0xb5c>)
 8007d2e:	f7f8 fd9d 	bl	800086c <__aeabi_ddiv>
 8007d32:	4602      	mov	r2, r0
 8007d34:	460b      	mov	r3, r1
 8007d36:	4620      	mov	r0, r4
 8007d38:	4629      	mov	r1, r5
 8007d3a:	f7f8 fab5 	bl	80002a8 <__aeabi_dsub>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	460c      	mov	r4, r1
 8007d42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d44:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8007d48:	e12c      	b.n	8007fa4 <scaraFLowScurve+0xdac>
 8007d4a:	bf00      	nop
 8007d4c:	40080000 	.word	0x40080000
 8007d50:	3fe00000 	.word	0x3fe00000
 8007d54:	40180000 	.word	0x40180000
		 // Phase 5
		 } else if ( ((3*tm + tc) <= time) && ( time < (4*tm + tc)) ) {
 8007d58:	f04f 0200 	mov.w	r2, #0
 8007d5c:	4b94      	ldr	r3, [pc, #592]	; (8007fb0 <scaraFLowScurve+0xdb8>)
 8007d5e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007d62:	f7f8 fc59 	bl	8000618 <__aeabi_dmul>
 8007d66:	4602      	mov	r2, r0
 8007d68:	460b      	mov	r3, r1
 8007d6a:	4610      	mov	r0, r2
 8007d6c:	4619      	mov	r1, r3
 8007d6e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007d72:	f7f8 fa9b 	bl	80002ac <__adddf3>
 8007d76:	4602      	mov	r2, r0
 8007d78:	460b      	mov	r3, r1
 8007d7a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007d7e:	f7f8 fed1 	bl	8000b24 <__aeabi_dcmpge>
 8007d82:	4603      	mov	r3, r0
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	f000 80f6 	beq.w	8007f76 <scaraFLowScurve+0xd7e>
 8007d8a:	f04f 0200 	mov.w	r2, #0
 8007d8e:	4b89      	ldr	r3, [pc, #548]	; (8007fb4 <scaraFLowScurve+0xdbc>)
 8007d90:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007d94:	f7f8 fc40 	bl	8000618 <__aeabi_dmul>
 8007d98:	4602      	mov	r2, r0
 8007d9a:	460b      	mov	r3, r1
 8007d9c:	4610      	mov	r0, r2
 8007d9e:	4619      	mov	r1, r3
 8007da0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007da4:	f7f8 fa82 	bl	80002ac <__adddf3>
 8007da8:	4602      	mov	r2, r0
 8007daa:	460b      	mov	r3, r1
 8007dac:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007db0:	f7f8 fea4 	bl	8000afc <__aeabi_dcmplt>
 8007db4:	4603      	mov	r3, r0
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	f000 80dd 	beq.w	8007f76 <scaraFLowScurve+0xd7e>
			 t = time - (3*tm + tc);
 8007dbc:	f04f 0200 	mov.w	r2, #0
 8007dc0:	4b7b      	ldr	r3, [pc, #492]	; (8007fb0 <scaraFLowScurve+0xdb8>)
 8007dc2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007dc6:	f7f8 fc27 	bl	8000618 <__aeabi_dmul>
 8007dca:	4602      	mov	r2, r0
 8007dcc:	460b      	mov	r3, r1
 8007dce:	4610      	mov	r0, r2
 8007dd0:	4619      	mov	r1, r3
 8007dd2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007dd6:	f7f8 fa69 	bl	80002ac <__adddf3>
 8007dda:	4602      	mov	r2, r0
 8007ddc:	460b      	mov	r3, r1
 8007dde:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007de2:	f7f8 fa61 	bl	80002a8 <__aeabi_dsub>
 8007de6:	4602      	mov	r2, r0
 8007de8:	460b      	mov	r3, r1
 8007dea:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			 scurve->a_current	=	-j_max*tm + j_max*t;
 8007dee:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8007df0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007df2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8007df6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007dfa:	4620      	mov	r0, r4
 8007dfc:	4629      	mov	r1, r5
 8007dfe:	f7f8 fc0b 	bl	8000618 <__aeabi_dmul>
 8007e02:	4603      	mov	r3, r0
 8007e04:	460c      	mov	r4, r1
 8007e06:	4625      	mov	r5, r4
 8007e08:	461c      	mov	r4, r3
 8007e0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007e0e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007e12:	f7f8 fc01 	bl	8000618 <__aeabi_dmul>
 8007e16:	4602      	mov	r2, r0
 8007e18:	460b      	mov	r3, r1
 8007e1a:	4620      	mov	r0, r4
 8007e1c:	4629      	mov	r1, r5
 8007e1e:	f7f8 fa45 	bl	80002ac <__adddf3>
 8007e22:	4603      	mov	r3, r0
 8007e24:	460c      	mov	r4, r1
 8007e26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e28:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_4 - j_max*tm*t + 0.5*j_max*t*t;
 8007e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e2e:	e9d3 452a 	ldrd	r4, r5, [r3, #168]	; 0xa8
 8007e32:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007e36:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007e3a:	f7f8 fbed 	bl	8000618 <__aeabi_dmul>
 8007e3e:	4602      	mov	r2, r0
 8007e40:	460b      	mov	r3, r1
 8007e42:	4610      	mov	r0, r2
 8007e44:	4619      	mov	r1, r3
 8007e46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007e4a:	f7f8 fbe5 	bl	8000618 <__aeabi_dmul>
 8007e4e:	4602      	mov	r2, r0
 8007e50:	460b      	mov	r3, r1
 8007e52:	4620      	mov	r0, r4
 8007e54:	4629      	mov	r1, r5
 8007e56:	f7f8 fa27 	bl	80002a8 <__aeabi_dsub>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	460c      	mov	r4, r1
 8007e5e:	4625      	mov	r5, r4
 8007e60:	461c      	mov	r4, r3
 8007e62:	f04f 0200 	mov.w	r2, #0
 8007e66:	4b54      	ldr	r3, [pc, #336]	; (8007fb8 <scaraFLowScurve+0xdc0>)
 8007e68:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007e6c:	f7f8 fbd4 	bl	8000618 <__aeabi_dmul>
 8007e70:	4602      	mov	r2, r0
 8007e72:	460b      	mov	r3, r1
 8007e74:	4610      	mov	r0, r2
 8007e76:	4619      	mov	r1, r3
 8007e78:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007e7c:	f7f8 fbcc 	bl	8000618 <__aeabi_dmul>
 8007e80:	4602      	mov	r2, r0
 8007e82:	460b      	mov	r3, r1
 8007e84:	4610      	mov	r0, r2
 8007e86:	4619      	mov	r1, r3
 8007e88:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007e8c:	f7f8 fbc4 	bl	8000618 <__aeabi_dmul>
 8007e90:	4602      	mov	r2, r0
 8007e92:	460b      	mov	r3, r1
 8007e94:	4620      	mov	r0, r4
 8007e96:	4629      	mov	r1, r5
 8007e98:	f7f8 fa08 	bl	80002ac <__adddf3>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	460c      	mov	r4, r1
 8007ea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ea2:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_4 + scurve->v_4*t - 0.5*j_max*tm*t*t + j_max*t*t*t/6;
 8007ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea8:	e9d3 452c 	ldrd	r4, r5, [r3, #176]	; 0xb0
 8007eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eae:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
 8007eb2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007eb6:	f7f8 fbaf 	bl	8000618 <__aeabi_dmul>
 8007eba:	4602      	mov	r2, r0
 8007ebc:	460b      	mov	r3, r1
 8007ebe:	4620      	mov	r0, r4
 8007ec0:	4629      	mov	r1, r5
 8007ec2:	f7f8 f9f3 	bl	80002ac <__adddf3>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	460c      	mov	r4, r1
 8007eca:	4625      	mov	r5, r4
 8007ecc:	461c      	mov	r4, r3
 8007ece:	f04f 0200 	mov.w	r2, #0
 8007ed2:	4b39      	ldr	r3, [pc, #228]	; (8007fb8 <scaraFLowScurve+0xdc0>)
 8007ed4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007ed8:	f7f8 fb9e 	bl	8000618 <__aeabi_dmul>
 8007edc:	4602      	mov	r2, r0
 8007ede:	460b      	mov	r3, r1
 8007ee0:	4610      	mov	r0, r2
 8007ee2:	4619      	mov	r1, r3
 8007ee4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007ee8:	f7f8 fb96 	bl	8000618 <__aeabi_dmul>
 8007eec:	4602      	mov	r2, r0
 8007eee:	460b      	mov	r3, r1
 8007ef0:	4610      	mov	r0, r2
 8007ef2:	4619      	mov	r1, r3
 8007ef4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007ef8:	f7f8 fb8e 	bl	8000618 <__aeabi_dmul>
 8007efc:	4602      	mov	r2, r0
 8007efe:	460b      	mov	r3, r1
 8007f00:	4610      	mov	r0, r2
 8007f02:	4619      	mov	r1, r3
 8007f04:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007f08:	f7f8 fb86 	bl	8000618 <__aeabi_dmul>
 8007f0c:	4602      	mov	r2, r0
 8007f0e:	460b      	mov	r3, r1
 8007f10:	4620      	mov	r0, r4
 8007f12:	4629      	mov	r1, r5
 8007f14:	f7f8 f9c8 	bl	80002a8 <__aeabi_dsub>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	460c      	mov	r4, r1
 8007f1c:	4625      	mov	r5, r4
 8007f1e:	461c      	mov	r4, r3
 8007f20:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007f24:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007f28:	f7f8 fb76 	bl	8000618 <__aeabi_dmul>
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	460b      	mov	r3, r1
 8007f30:	4610      	mov	r0, r2
 8007f32:	4619      	mov	r1, r3
 8007f34:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007f38:	f7f8 fb6e 	bl	8000618 <__aeabi_dmul>
 8007f3c:	4602      	mov	r2, r0
 8007f3e:	460b      	mov	r3, r1
 8007f40:	4610      	mov	r0, r2
 8007f42:	4619      	mov	r1, r3
 8007f44:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007f48:	f7f8 fb66 	bl	8000618 <__aeabi_dmul>
 8007f4c:	4602      	mov	r2, r0
 8007f4e:	460b      	mov	r3, r1
 8007f50:	4610      	mov	r0, r2
 8007f52:	4619      	mov	r1, r3
 8007f54:	f04f 0200 	mov.w	r2, #0
 8007f58:	4b18      	ldr	r3, [pc, #96]	; (8007fbc <scaraFLowScurve+0xdc4>)
 8007f5a:	f7f8 fc87 	bl	800086c <__aeabi_ddiv>
 8007f5e:	4602      	mov	r2, r0
 8007f60:	460b      	mov	r3, r1
 8007f62:	4620      	mov	r0, r4
 8007f64:	4629      	mov	r1, r5
 8007f66:	f7f8 f9a1 	bl	80002ac <__adddf3>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	460c      	mov	r4, r1
 8007f6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f70:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8007f74:	e016      	b.n	8007fa4 <scaraFLowScurve+0xdac>
		 } else {
			 scurve->a_current = 0;
 8007f76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f78:	f04f 0300 	mov.w	r3, #0
 8007f7c:	f04f 0400 	mov.w	r4, #0
 8007f80:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current = 0;
 8007f84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f86:	f04f 0300 	mov.w	r3, #0
 8007f8a:	f04f 0400 	mov.w	r4, #0
 8007f8e:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current = scurve->total_s;
 8007f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f94:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8007f98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f9a:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8007f9e:	e001      	b.n	8007fa4 <scaraFLowScurve+0xdac>
		 }

	 } else {
		 return SCARA_STATUS_ERROR;
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	e000      	b.n	8007fa6 <scaraFLowScurve+0xdae>
	 }

	 return SCARA_STATUS_OK;
 8007fa4:	2300      	movs	r3, #0
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3748      	adds	r7, #72	; 0x48
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bdb0      	pop	{r4, r5, r7, pc}
 8007fae:	bf00      	nop
 8007fb0:	40080000 	.word	0x40080000
 8007fb4:	40100000 	.word	0x40100000
 8007fb8:	3fe00000 	.word	0x3fe00000
 8007fbc:	40180000 	.word	0x40180000

08007fc0 <scaraCheckWorkSpace4>:

/* Check limit 4 joint variable */
SCARA_StatusTypeDef	scaraCheckWorkSpace4 (double theta1, double theta2, double d3, double theta4) {
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b088      	sub	sp, #32
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	ed87 0b06 	vstr	d0, [r7, #24]
 8007fca:	ed87 1b04 	vstr	d1, [r7, #16]
 8007fce:	ed87 2b02 	vstr	d2, [r7, #8]
 8007fd2:	ed87 3b00 	vstr	d3, [r7]
	// check theta 1
	if ( theta1 < LIM_MIN_J0 || theta1 > LIM_MAX_J0) {
 8007fd6:	a330      	add	r3, pc, #192	; (adr r3, 8008098 <scaraCheckWorkSpace4+0xd8>)
 8007fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fdc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007fe0:	f7f8 fd8c 	bl	8000afc <__aeabi_dcmplt>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d109      	bne.n	8007ffe <scaraCheckWorkSpace4+0x3e>
 8007fea:	a32d      	add	r3, pc, #180	; (adr r3, 80080a0 <scaraCheckWorkSpace4+0xe0>)
 8007fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007ff4:	f7f8 fda0 	bl	8000b38 <__aeabi_dcmpgt>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d001      	beq.n	8008002 <scaraCheckWorkSpace4+0x42>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8007ffe:	2307      	movs	r3, #7
 8008000:	e043      	b.n	800808a <scaraCheckWorkSpace4+0xca>
	}
	// check theta 2
	if ( theta2 < LIM_MIN_J1 || theta2 > LIM_MAX_J1) {
 8008002:	a329      	add	r3, pc, #164	; (adr r3, 80080a8 <scaraCheckWorkSpace4+0xe8>)
 8008004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008008:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800800c:	f7f8 fd76 	bl	8000afc <__aeabi_dcmplt>
 8008010:	4603      	mov	r3, r0
 8008012:	2b00      	cmp	r3, #0
 8008014:	d109      	bne.n	800802a <scaraCheckWorkSpace4+0x6a>
 8008016:	a326      	add	r3, pc, #152	; (adr r3, 80080b0 <scaraCheckWorkSpace4+0xf0>)
 8008018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800801c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008020:	f7f8 fd8a 	bl	8000b38 <__aeabi_dcmpgt>
 8008024:	4603      	mov	r3, r0
 8008026:	2b00      	cmp	r3, #0
 8008028:	d001      	beq.n	800802e <scaraCheckWorkSpace4+0x6e>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800802a:	2307      	movs	r3, #7
 800802c:	e02d      	b.n	800808a <scaraCheckWorkSpace4+0xca>
	}
	// check d 3
	if ( d3 < LIM_MIN_J2 || d3 > LIM_MAX_J2) {
 800802e:	f04f 0200 	mov.w	r2, #0
 8008032:	f04f 0300 	mov.w	r3, #0
 8008036:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800803a:	f7f8 fd5f 	bl	8000afc <__aeabi_dcmplt>
 800803e:	4603      	mov	r3, r0
 8008040:	2b00      	cmp	r3, #0
 8008042:	d109      	bne.n	8008058 <scaraCheckWorkSpace4+0x98>
 8008044:	a31c      	add	r3, pc, #112	; (adr r3, 80080b8 <scaraCheckWorkSpace4+0xf8>)
 8008046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800804a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800804e:	f7f8 fd73 	bl	8000b38 <__aeabi_dcmpgt>
 8008052:	4603      	mov	r3, r0
 8008054:	2b00      	cmp	r3, #0
 8008056:	d001      	beq.n	800805c <scaraCheckWorkSpace4+0x9c>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8008058:	2307      	movs	r3, #7
 800805a:	e016      	b.n	800808a <scaraCheckWorkSpace4+0xca>
	}
	// check theta 4
	if ( theta4 < LIM_MIN_J3 || theta4 > LIM_MAX_J3) {
 800805c:	a318      	add	r3, pc, #96	; (adr r3, 80080c0 <scaraCheckWorkSpace4+0x100>)
 800805e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008062:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008066:	f7f8 fd49 	bl	8000afc <__aeabi_dcmplt>
 800806a:	4603      	mov	r3, r0
 800806c:	2b00      	cmp	r3, #0
 800806e:	d109      	bne.n	8008084 <scaraCheckWorkSpace4+0xc4>
 8008070:	a315      	add	r3, pc, #84	; (adr r3, 80080c8 <scaraCheckWorkSpace4+0x108>)
 8008072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008076:	e9d7 0100 	ldrd	r0, r1, [r7]
 800807a:	f7f8 fd5d 	bl	8000b38 <__aeabi_dcmpgt>
 800807e:	4603      	mov	r3, r0
 8008080:	2b00      	cmp	r3, #0
 8008082:	d001      	beq.n	8008088 <scaraCheckWorkSpace4+0xc8>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8008084:	2307      	movs	r3, #7
 8008086:	e000      	b.n	800808a <scaraCheckWorkSpace4+0xca>
	}
	return SCARA_STATUS_OK;
 8008088:	2300      	movs	r3, #0
}
 800808a:	4618      	mov	r0, r3
 800808c:	3720      	adds	r7, #32
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}
 8008092:	bf00      	nop
 8008094:	f3af 8000 	nop.w
 8008098:	daaaaaab 	.word	0xdaaaaaab
 800809c:	bff7bc89 	.word	0xbff7bc89
 80080a0:	c0000000 	.word	0xc0000000
 80080a4:	3ff7bc89 	.word	0x3ff7bc89
 80080a8:	80000000 	.word	0x80000000
 80080ac:	c002d97c 	.word	0xc002d97c
 80080b0:	80000000 	.word	0x80000000
 80080b4:	4002d97c 	.word	0x4002d97c
 80080b8:	00000000 	.word	0x00000000
 80080bc:	4057c000 	.word	0x4057c000
 80080c0:	20000000 	.word	0x20000000
 80080c4:	bff709d1 	.word	0xbff709d1
 80080c8:	20000000 	.word	0x20000000
 80080cc:	3ff709d1 	.word	0x3ff709d1

080080d0 <scaraCheckWorkSpace1>:

/* Check limit 1 joint variable */
SCARA_StatusTypeDef	scaraCheckWorkSpace1 (Trajectory_TargetTypeDef target, double value) {
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b084      	sub	sp, #16
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	4603      	mov	r3, r0
 80080d8:	ed87 0b00 	vstr	d0, [r7]
 80080dc:	73fb      	strb	r3, [r7, #15]
	if ( TRAJECTORY_J0 == target) {
 80080de:	7bfb      	ldrb	r3, [r7, #15]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d117      	bne.n	8008114 <scaraCheckWorkSpace1+0x44>
		if ( (LIM_MIN_J0 <= value) && ( value <= LIM_MAX_J0)) {
 80080e4:	a338      	add	r3, pc, #224	; (adr r3, 80081c8 <scaraCheckWorkSpace1+0xf8>)
 80080e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80080ee:	f7f8 fd19 	bl	8000b24 <__aeabi_dcmpge>
 80080f2:	4603      	mov	r3, r0
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d00b      	beq.n	8008110 <scaraCheckWorkSpace1+0x40>
 80080f8:	a335      	add	r3, pc, #212	; (adr r3, 80081d0 <scaraCheckWorkSpace1+0x100>)
 80080fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008102:	f7f8 fd05 	bl	8000b10 <__aeabi_dcmple>
 8008106:	4603      	mov	r3, r0
 8008108:	2b00      	cmp	r3, #0
 800810a:	d001      	beq.n	8008110 <scaraCheckWorkSpace1+0x40>
			return SCARA_STATUS_OK;
 800810c:	2300      	movs	r3, #0
 800810e:	e054      	b.n	80081ba <scaraCheckWorkSpace1+0xea>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8008110:	2307      	movs	r3, #7
 8008112:	e052      	b.n	80081ba <scaraCheckWorkSpace1+0xea>
		}
	} else if (TRAJECTORY_J1 == target) {
 8008114:	7bfb      	ldrb	r3, [r7, #15]
 8008116:	2b01      	cmp	r3, #1
 8008118:	d117      	bne.n	800814a <scaraCheckWorkSpace1+0x7a>
		if ( (LIM_MIN_J1 <= value) && ( value <= LIM_MAX_J1)) {
 800811a:	a32f      	add	r3, pc, #188	; (adr r3, 80081d8 <scaraCheckWorkSpace1+0x108>)
 800811c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008120:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008124:	f7f8 fcfe 	bl	8000b24 <__aeabi_dcmpge>
 8008128:	4603      	mov	r3, r0
 800812a:	2b00      	cmp	r3, #0
 800812c:	d00b      	beq.n	8008146 <scaraCheckWorkSpace1+0x76>
 800812e:	a32c      	add	r3, pc, #176	; (adr r3, 80081e0 <scaraCheckWorkSpace1+0x110>)
 8008130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008134:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008138:	f7f8 fcea 	bl	8000b10 <__aeabi_dcmple>
 800813c:	4603      	mov	r3, r0
 800813e:	2b00      	cmp	r3, #0
 8008140:	d001      	beq.n	8008146 <scaraCheckWorkSpace1+0x76>
			return SCARA_STATUS_OK;
 8008142:	2300      	movs	r3, #0
 8008144:	e039      	b.n	80081ba <scaraCheckWorkSpace1+0xea>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8008146:	2307      	movs	r3, #7
 8008148:	e037      	b.n	80081ba <scaraCheckWorkSpace1+0xea>
		}
	} else if (TRAJECTORY_J2 == target) {
 800814a:	7bfb      	ldrb	r3, [r7, #15]
 800814c:	2b02      	cmp	r3, #2
 800814e:	d118      	bne.n	8008182 <scaraCheckWorkSpace1+0xb2>
		if ( (LIM_MIN_J2 <= value) && ( value <= LIM_MAX_J2)) {
 8008150:	f04f 0200 	mov.w	r2, #0
 8008154:	f04f 0300 	mov.w	r3, #0
 8008158:	e9d7 0100 	ldrd	r0, r1, [r7]
 800815c:	f7f8 fce2 	bl	8000b24 <__aeabi_dcmpge>
 8008160:	4603      	mov	r3, r0
 8008162:	2b00      	cmp	r3, #0
 8008164:	d00b      	beq.n	800817e <scaraCheckWorkSpace1+0xae>
 8008166:	a320      	add	r3, pc, #128	; (adr r3, 80081e8 <scaraCheckWorkSpace1+0x118>)
 8008168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800816c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008170:	f7f8 fcce 	bl	8000b10 <__aeabi_dcmple>
 8008174:	4603      	mov	r3, r0
 8008176:	2b00      	cmp	r3, #0
 8008178:	d001      	beq.n	800817e <scaraCheckWorkSpace1+0xae>
			return SCARA_STATUS_OK;
 800817a:	2300      	movs	r3, #0
 800817c:	e01d      	b.n	80081ba <scaraCheckWorkSpace1+0xea>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800817e:	2307      	movs	r3, #7
 8008180:	e01b      	b.n	80081ba <scaraCheckWorkSpace1+0xea>
		}
	} else if (TRAJECTORY_J3 == target) {
 8008182:	7bfb      	ldrb	r3, [r7, #15]
 8008184:	2b03      	cmp	r3, #3
 8008186:	d117      	bne.n	80081b8 <scaraCheckWorkSpace1+0xe8>
		if ( (LIM_MIN_J3 <= value) && ( value <= LIM_MAX_J3)) {
 8008188:	a319      	add	r3, pc, #100	; (adr r3, 80081f0 <scaraCheckWorkSpace1+0x120>)
 800818a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800818e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008192:	f7f8 fcc7 	bl	8000b24 <__aeabi_dcmpge>
 8008196:	4603      	mov	r3, r0
 8008198:	2b00      	cmp	r3, #0
 800819a:	d00b      	beq.n	80081b4 <scaraCheckWorkSpace1+0xe4>
 800819c:	a316      	add	r3, pc, #88	; (adr r3, 80081f8 <scaraCheckWorkSpace1+0x128>)
 800819e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80081a6:	f7f8 fcb3 	bl	8000b10 <__aeabi_dcmple>
 80081aa:	4603      	mov	r3, r0
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d001      	beq.n	80081b4 <scaraCheckWorkSpace1+0xe4>
			return SCARA_STATUS_OK;
 80081b0:	2300      	movs	r3, #0
 80081b2:	e002      	b.n	80081ba <scaraCheckWorkSpace1+0xea>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 80081b4:	2307      	movs	r3, #7
 80081b6:	e000      	b.n	80081ba <scaraCheckWorkSpace1+0xea>
		}
	} else {
		return SCARA_STATUS_ERROR;
 80081b8:	2301      	movs	r3, #1
	}
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3710      	adds	r7, #16
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}
 80081c2:	bf00      	nop
 80081c4:	f3af 8000 	nop.w
 80081c8:	daaaaaab 	.word	0xdaaaaaab
 80081cc:	bff7bc89 	.word	0xbff7bc89
 80081d0:	c0000000 	.word	0xc0000000
 80081d4:	3ff7bc89 	.word	0x3ff7bc89
 80081d8:	80000000 	.word	0x80000000
 80081dc:	c002d97c 	.word	0xc002d97c
 80081e0:	80000000 	.word	0x80000000
 80081e4:	4002d97c 	.word	0x4002d97c
 80081e8:	00000000 	.word	0x00000000
 80081ec:	4057c000 	.word	0x4057c000
 80081f0:	20000000 	.word	0x20000000
 80081f4:	bff709d1 	.word	0xbff709d1
 80081f8:	20000000 	.word	0x20000000
 80081fc:	3ff709d1 	.word	0x3ff709d1

08008200 <scaraTestDuty>:

/* Check all of point in travel */
SCARA_StatusTypeDef	scaraTestDuty(void) {
 8008200:	b590      	push	{r4, r7, lr}
 8008202:	b0d3      	sub	sp, #332	; 0x14c
 8008204:	af18      	add	r7, sp, #96	; 0x60
	int32_t sample_count;
	double run_time = 0;
 8008206:	f04f 0300 	mov.w	r3, #0
 800820a:	f04f 0400 	mov.w	r4, #0
 800820e:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
	SCARA_PositionTypeDef test_Next, test_Current;
	SCARA_StatusTypeDef status;
	memcpy(&test_Current, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 8008212:	4a35      	ldr	r2, [pc, #212]	; (80082e8 <scaraTestDuty+0xe8>)
 8008214:	463b      	mov	r3, r7
 8008216:	4611      	mov	r1, r2
 8008218:	2268      	movs	r2, #104	; 0x68
 800821a:	4618      	mov	r0, r3
 800821c:	f00b f960 	bl	80134e0 <memcpy>
	sample_count = ceil(myDUTY.time_total/T_SAMPLING);
 8008220:	4b32      	ldr	r3, [pc, #200]	; (80082ec <scaraTestDuty+0xec>)
 8008222:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8008226:	e9d3 0100 	ldrd	r0, r1, [r3]
 800822a:	a32d      	add	r3, pc, #180	; (adr r3, 80082e0 <scaraTestDuty+0xe0>)
 800822c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008230:	f7f8 fb1c 	bl	800086c <__aeabi_ddiv>
 8008234:	4603      	mov	r3, r0
 8008236:	460c      	mov	r4, r1
 8008238:	ec44 3b17 	vmov	d7, r3, r4
 800823c:	eeb0 0a47 	vmov.f32	s0, s14
 8008240:	eef0 0a67 	vmov.f32	s1, s15
 8008244:	f00f fafc 	bl	8017840 <ceil>
 8008248:	ec54 3b10 	vmov	r3, r4, d0
 800824c:	4618      	mov	r0, r3
 800824e:	4621      	mov	r1, r4
 8008250:	f7f8 fc92 	bl	8000b78 <__aeabi_d2iz>
 8008254:	4603      	mov	r3, r0
 8008256:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	for (int32_t i = 1; i < sample_count; i++) {
 800825a:	2301      	movs	r3, #1
 800825c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008260:	e030      	b.n	80082c4 <scaraTestDuty+0xc4>
		run_time += T_SAMPLING;
 8008262:	a31f      	add	r3, pc, #124	; (adr r3, 80082e0 <scaraTestDuty+0xe0>)
 8008264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008268:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800826c:	f7f8 f81e 	bl	80002ac <__adddf3>
 8008270:	4603      	mov	r3, r0
 8008272:	460c      	mov	r4, r1
 8008274:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		status = scaraFlowDuty(run_time, &test_Next, test_Current);
 8008278:	f107 0468 	add.w	r4, r7, #104	; 0x68
 800827c:	4668      	mov	r0, sp
 800827e:	f107 0308 	add.w	r3, r7, #8
 8008282:	2260      	movs	r2, #96	; 0x60
 8008284:	4619      	mov	r1, r3
 8008286:	f00b f92b 	bl	80134e0 <memcpy>
 800828a:	463b      	mov	r3, r7
 800828c:	cb0c      	ldmia	r3, {r2, r3}
 800828e:	4620      	mov	r0, r4
 8008290:	ed97 0b38 	vldr	d0, [r7, #224]	; 0xe0
 8008294:	f7fe fa6e 	bl	8006774 <scaraFlowDuty>
 8008298:	4603      	mov	r3, r0
 800829a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
		if (status != SCARA_STATUS_OK) {
 800829e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d002      	beq.n	80082ac <scaraTestDuty+0xac>
			return status;
 80082a6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80082aa:	e012      	b.n	80082d2 <scaraTestDuty+0xd2>
		}
		memcpy(&test_Next, &test_Current, sizeof(SCARA_PositionTypeDef));
 80082ac:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80082b0:	4639      	mov	r1, r7
 80082b2:	2268      	movs	r2, #104	; 0x68
 80082b4:	4618      	mov	r0, r3
 80082b6:	f00b f913 	bl	80134e0 <memcpy>
	for (int32_t i = 1; i < sample_count; i++) {
 80082ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80082be:	3301      	adds	r3, #1
 80082c0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80082c4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80082c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80082cc:	429a      	cmp	r2, r3
 80082ce:	dbc8      	blt.n	8008262 <scaraTestDuty+0x62>
	}
	return SCARA_STATUS_OK;
 80082d0:	2300      	movs	r3, #0
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	37ec      	adds	r7, #236	; 0xec
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd90      	pop	{r4, r7, pc}
 80082da:	bf00      	nop
 80082dc:	f3af 8000 	nop.w
 80082e0:	40000000 	.word	0x40000000
 80082e4:	3f847ae1 	.word	0x3f847ae1
 80082e8:	20005d40 	.word	0x20005d40
 80082ec:	20005388 	.word	0x20005388

080082f0 <scaraSetScanFlag>:

void				scaraSetScanFlag(void) {
 80082f0:	b480      	push	{r7}
 80082f2:	af00      	add	r7, sp, #0
	mySCARA.isScanLitmit = TRUE;
 80082f4:	4b03      	ldr	r3, [pc, #12]	; (8008304 <scaraSetScanFlag+0x14>)
 80082f6:	2201      	movs	r2, #1
 80082f8:	709a      	strb	r2, [r3, #2]
}
 80082fa:	bf00      	nop
 80082fc:	46bd      	mov	sp, r7
 80082fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008302:	4770      	bx	lr
 8008304:	20000c78 	.word	0x20000c78

08008308 <scaraSetOutput>:

void				scaraSetOutput		(uint8_t level) {
 8008308:	b580      	push	{r7, lr}
 800830a:	b082      	sub	sp, #8
 800830c:	af00      	add	r7, sp, #0
 800830e:	4603      	mov	r3, r0
 8008310:	71fb      	strb	r3, [r7, #7]
	mySCARA.outputSet	 = level;
 8008312:	4a05      	ldr	r2, [pc, #20]	; (8008328 <scaraSetOutput+0x20>)
 8008314:	79fb      	ldrb	r3, [r7, #7]
 8008316:	70d3      	strb	r3, [r2, #3]
	lowlayer_setOutput(level);
 8008318:	79fb      	ldrb	r3, [r7, #7]
 800831a:	4618      	mov	r0, r3
 800831c:	f7fb fd1c 	bl	8003d58 <lowlayer_setOutput>
}
 8008320:	bf00      	nop
 8008322:	3708      	adds	r7, #8
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}
 8008328:	20000c78 	.word	0x20000c78

0800832c <scaraSetDutyState>:

void				scaraSetDutyState(SCARA_DutyStateTypeDef state) {
 800832c:	b480      	push	{r7}
 800832e:	b083      	sub	sp, #12
 8008330:	af00      	add	r7, sp, #0
 8008332:	4603      	mov	r3, r0
 8008334:	71fb      	strb	r3, [r7, #7]
	mySCARA.duty_State = state;
 8008336:	4a04      	ldr	r2, [pc, #16]	; (8008348 <scaraSetDutyState+0x1c>)
 8008338:	79fb      	ldrb	r3, [r7, #7]
 800833a:	7053      	strb	r3, [r2, #1]
}
 800833c:	bf00      	nop
 800833e:	370c      	adds	r7, #12
 8008340:	46bd      	mov	sp, r7
 8008342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008346:	4770      	bx	lr
 8008348:	20000c78 	.word	0x20000c78

0800834c <scaraGetPosition>:

void				scaraGetPosition	(SCARA_PositionTypeDef *pos) {
 800834c:	b580      	push	{r7, lr}
 800834e:	b082      	sub	sp, #8
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
	memcpy(pos, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 8008354:	2268      	movs	r2, #104	; 0x68
 8008356:	4904      	ldr	r1, [pc, #16]	; (8008368 <scaraGetPosition+0x1c>)
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f00b f8c1 	bl	80134e0 <memcpy>
}
 800835e:	bf00      	nop
 8008360:	3708      	adds	r7, #8
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}
 8008366:	bf00      	nop
 8008368:	20005d40 	.word	0x20005d40

0800836c <scaraSetMode>:

void				scaraSetMode(SCARA_ModeTypeDef mode) {
 800836c:	b480      	push	{r7}
 800836e:	b083      	sub	sp, #12
 8008370:	af00      	add	r7, sp, #0
 8008372:	4603      	mov	r3, r0
 8008374:	71fb      	strb	r3, [r7, #7]
	mySCARA.mode = mode;
 8008376:	4a04      	ldr	r2, [pc, #16]	; (8008388 <scaraSetMode+0x1c>)
 8008378:	79fb      	ldrb	r3, [r7, #7]
 800837a:	7013      	strb	r3, [r2, #0]
}
 800837c:	bf00      	nop
 800837e:	370c      	adds	r7, #12
 8008380:	46bd      	mov	sp, r7
 8008382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008386:	4770      	bx	lr
 8008388:	20000c78 	.word	0x20000c78

0800838c <scaraGetMode>:

SCARA_ModeTypeDef	scaraGetMode(void) {
 800838c:	b480      	push	{r7}
 800838e:	af00      	add	r7, sp, #0
	return mySCARA.mode;
 8008390:	4b03      	ldr	r3, [pc, #12]	; (80083a0 <scaraGetMode+0x14>)
 8008392:	781b      	ldrb	r3, [r3, #0]
}
 8008394:	4618      	mov	r0, r3
 8008396:	46bd      	mov	sp, r7
 8008398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839c:	4770      	bx	lr
 800839e:	bf00      	nop
 80083a0:	20000c78 	.word	0x20000c78

080083a4 <scaraGetDutyState>:

SCARA_DutyStateTypeDef	scaraGetDutyState(void) {
 80083a4:	b480      	push	{r7}
 80083a6:	af00      	add	r7, sp, #0
	return mySCARA.duty_State;
 80083a8:	4b03      	ldr	r3, [pc, #12]	; (80083b8 <scaraGetDutyState+0x14>)
 80083aa:	785b      	ldrb	r3, [r3, #1]
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	46bd      	mov	sp, r7
 80083b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b4:	4770      	bx	lr
 80083b6:	bf00      	nop
 80083b8:	20000c78 	.word	0x20000c78

080083bc <scaraIsScanLimit>:

uint8_t					scaraIsScanLimit(void) {
 80083bc:	b480      	push	{r7}
 80083be:	af00      	add	r7, sp, #0
	return mySCARA.isScanLitmit;
 80083c0:	4b03      	ldr	r3, [pc, #12]	; (80083d0 <scaraIsScanLimit+0x14>)
 80083c2:	789b      	ldrb	r3, [r3, #2]
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	46bd      	mov	sp, r7
 80083c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083cc:	4770      	bx	lr
 80083ce:	bf00      	nop
 80083d0:	20000c78 	.word	0x20000c78
 80083d4:	00000000 	.word	0x00000000

080083d8 <scaraIsFinish>:

uint8_t					scaraIsFinish		(double run_time) {
 80083d8:	b590      	push	{r4, r7, lr}
 80083da:	b083      	sub	sp, #12
 80083dc:	af00      	add	r7, sp, #0
 80083de:	ed87 0b00 	vstr	d0, [r7]
	if(myDUTY.time_total + 0.03 < run_time) {
 80083e2:	4b11      	ldr	r3, [pc, #68]	; (8008428 <scaraIsFinish+0x50>)
 80083e4:	f603 1348 	addw	r3, r3, #2376	; 0x948
 80083e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80083ec:	a30c      	add	r3, pc, #48	; (adr r3, 8008420 <scaraIsFinish+0x48>)
 80083ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083f2:	f7f7 ff5b 	bl	80002ac <__adddf3>
 80083f6:	4603      	mov	r3, r0
 80083f8:	460c      	mov	r4, r1
 80083fa:	461a      	mov	r2, r3
 80083fc:	4623      	mov	r3, r4
 80083fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008402:	f7f8 fb99 	bl	8000b38 <__aeabi_dcmpgt>
 8008406:	4603      	mov	r3, r0
 8008408:	2b00      	cmp	r3, #0
 800840a:	d001      	beq.n	8008410 <scaraIsFinish+0x38>
		return TRUE;
 800840c:	2301      	movs	r3, #1
 800840e:	e000      	b.n	8008412 <scaraIsFinish+0x3a>
	} else {
		return FALSE;
 8008410:	2300      	movs	r3, #0
	}
}
 8008412:	4618      	mov	r0, r3
 8008414:	370c      	adds	r7, #12
 8008416:	46bd      	mov	sp, r7
 8008418:	bd90      	pop	{r4, r7, pc}
 800841a:	bf00      	nop
 800841c:	f3af 8000 	nop.w
 8008420:	eb851eb8 	.word	0xeb851eb8
 8008424:	3f9eb851 	.word	0x3f9eb851
 8008428:	20005388 	.word	0x20005388
 800842c:	00000000 	.word	0x00000000

08008430 <scaraPosition2String>:

/* Convert position to string*/
int32_t					scaraPosition2String(char *result, SCARA_PositionTypeDef position) {
 8008430:	b082      	sub	sp, #8
 8008432:	b590      	push	{r4, r7, lr}
 8008434:	b0af      	sub	sp, #188	; 0xbc
 8008436:	af0a      	add	r7, sp, #40	; 0x28
 8008438:	6078      	str	r0, [r7, #4]
 800843a:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 800843e:	e881 000c 	stmia.w	r1, {r2, r3}
	uint8_t time[12];
	uint8_t total_time[12];

	int32_t lenght_buff;

	double2string(theta1, position.Theta1*180/PI, 6);
 8008442:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8008446:	f04f 0200 	mov.w	r2, #0
 800844a:	4b7f      	ldr	r3, [pc, #508]	; (8008648 <scaraPosition2String+0x218>)
 800844c:	f7f8 f8e4 	bl	8000618 <__aeabi_dmul>
 8008450:	4603      	mov	r3, r0
 8008452:	460c      	mov	r4, r1
 8008454:	4618      	mov	r0, r3
 8008456:	4621      	mov	r1, r4
 8008458:	a379      	add	r3, pc, #484	; (adr r3, 8008640 <scaraPosition2String+0x210>)
 800845a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800845e:	f7f8 fa05 	bl	800086c <__aeabi_ddiv>
 8008462:	4603      	mov	r3, r0
 8008464:	460c      	mov	r4, r1
 8008466:	ec44 3b17 	vmov	d7, r3, r4
 800846a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800846e:	2106      	movs	r1, #6
 8008470:	eeb0 0a47 	vmov.f32	s0, s14
 8008474:	eef0 0a67 	vmov.f32	s1, s15
 8008478:	4618      	mov	r0, r3
 800847a:	f7f9 f9d1 	bl	8001820 <double2string>
	double2string(theta2, position.Theta2*180/PI, 6);
 800847e:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8008482:	f04f 0200 	mov.w	r2, #0
 8008486:	4b70      	ldr	r3, [pc, #448]	; (8008648 <scaraPosition2String+0x218>)
 8008488:	f7f8 f8c6 	bl	8000618 <__aeabi_dmul>
 800848c:	4603      	mov	r3, r0
 800848e:	460c      	mov	r4, r1
 8008490:	4618      	mov	r0, r3
 8008492:	4621      	mov	r1, r4
 8008494:	a36a      	add	r3, pc, #424	; (adr r3, 8008640 <scaraPosition2String+0x210>)
 8008496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800849a:	f7f8 f9e7 	bl	800086c <__aeabi_ddiv>
 800849e:	4603      	mov	r3, r0
 80084a0:	460c      	mov	r4, r1
 80084a2:	ec44 3b17 	vmov	d7, r3, r4
 80084a6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80084aa:	2106      	movs	r1, #6
 80084ac:	eeb0 0a47 	vmov.f32	s0, s14
 80084b0:	eef0 0a67 	vmov.f32	s1, s15
 80084b4:	4618      	mov	r0, r3
 80084b6:	f7f9 f9b3 	bl	8001820 <double2string>
	double2string(d3, position.D3, 6);
 80084ba:	ed97 7b3e 	vldr	d7, [r7, #248]	; 0xf8
 80084be:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80084c2:	2106      	movs	r1, #6
 80084c4:	eeb0 0a47 	vmov.f32	s0, s14
 80084c8:	eef0 0a67 	vmov.f32	s1, s15
 80084cc:	4618      	mov	r0, r3
 80084ce:	f7f9 f9a7 	bl	8001820 <double2string>
	double2string(theta4, position.Theta4*180/PI, 6);
 80084d2:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 80084d6:	f04f 0200 	mov.w	r2, #0
 80084da:	4b5b      	ldr	r3, [pc, #364]	; (8008648 <scaraPosition2String+0x218>)
 80084dc:	f7f8 f89c 	bl	8000618 <__aeabi_dmul>
 80084e0:	4603      	mov	r3, r0
 80084e2:	460c      	mov	r4, r1
 80084e4:	4618      	mov	r0, r3
 80084e6:	4621      	mov	r1, r4
 80084e8:	a355      	add	r3, pc, #340	; (adr r3, 8008640 <scaraPosition2String+0x210>)
 80084ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ee:	f7f8 f9bd 	bl	800086c <__aeabi_ddiv>
 80084f2:	4603      	mov	r3, r0
 80084f4:	460c      	mov	r4, r1
 80084f6:	ec44 3b17 	vmov	d7, r3, r4
 80084fa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80084fe:	2106      	movs	r1, #6
 8008500:	eeb0 0a47 	vmov.f32	s0, s14
 8008504:	eef0 0a67 	vmov.f32	s1, s15
 8008508:	4618      	mov	r0, r3
 800850a:	f7f9 f989 	bl	8001820 <double2string>
	double2string(x, position.x, 6);
 800850e:	ed97 7b32 	vldr	d7, [r7, #200]	; 0xc8
 8008512:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008516:	2106      	movs	r1, #6
 8008518:	eeb0 0a47 	vmov.f32	s0, s14
 800851c:	eef0 0a67 	vmov.f32	s1, s15
 8008520:	4618      	mov	r0, r3
 8008522:	f7f9 f97d 	bl	8001820 <double2string>
	double2string(y, position.y, 6);
 8008526:	ed97 7b34 	vldr	d7, [r7, #208]	; 0xd0
 800852a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800852e:	2106      	movs	r1, #6
 8008530:	eeb0 0a47 	vmov.f32	s0, s14
 8008534:	eef0 0a67 	vmov.f32	s1, s15
 8008538:	4618      	mov	r0, r3
 800853a:	f7f9 f971 	bl	8001820 <double2string>
	double2string(z, position.z, 6);
 800853e:	ed97 7b36 	vldr	d7, [r7, #216]	; 0xd8
 8008542:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008546:	2106      	movs	r1, #6
 8008548:	eeb0 0a47 	vmov.f32	s0, s14
 800854c:	eef0 0a67 	vmov.f32	s1, s15
 8008550:	4618      	mov	r0, r3
 8008552:	f7f9 f965 	bl	8001820 <double2string>
	double2string(roll, position.roll*180/PI, 6);
 8008556:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800855a:	f04f 0200 	mov.w	r2, #0
 800855e:	4b3a      	ldr	r3, [pc, #232]	; (8008648 <scaraPosition2String+0x218>)
 8008560:	f7f8 f85a 	bl	8000618 <__aeabi_dmul>
 8008564:	4603      	mov	r3, r0
 8008566:	460c      	mov	r4, r1
 8008568:	4618      	mov	r0, r3
 800856a:	4621      	mov	r1, r4
 800856c:	a334      	add	r3, pc, #208	; (adr r3, 8008640 <scaraPosition2String+0x210>)
 800856e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008572:	f7f8 f97b 	bl	800086c <__aeabi_ddiv>
 8008576:	4603      	mov	r3, r0
 8008578:	460c      	mov	r4, r1
 800857a:	ec44 3b17 	vmov	d7, r3, r4
 800857e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008582:	2106      	movs	r1, #6
 8008584:	eeb0 0a47 	vmov.f32	s0, s14
 8008588:	eef0 0a67 	vmov.f32	s1, s15
 800858c:	4618      	mov	r0, r3
 800858e:	f7f9 f947 	bl	8001820 <double2string>
	double2string(lenght, position.q, 6);
 8008592:	ed97 7b28 	vldr	d7, [r7, #160]	; 0xa0
 8008596:	f107 0320 	add.w	r3, r7, #32
 800859a:	2106      	movs	r1, #6
 800859c:	eeb0 0a47 	vmov.f32	s0, s14
 80085a0:	eef0 0a67 	vmov.f32	s1, s15
 80085a4:	4618      	mov	r0, r3
 80085a6:	f7f9 f93b 	bl	8001820 <double2string>
	double2string(total_time, position.total_time, 4);
 80085aa:	ed97 7b30 	vldr	d7, [r7, #192]	; 0xc0
 80085ae:	f107 0308 	add.w	r3, r7, #8
 80085b2:	2104      	movs	r1, #4
 80085b4:	eeb0 0a47 	vmov.f32	s0, s14
 80085b8:	eef0 0a67 	vmov.f32	s1, s15
 80085bc:	4618      	mov	r0, r3
 80085be:	f7f9 f92f 	bl	8001820 <double2string>
	double2string(time, position.t, 4);
 80085c2:	ed97 7b2e 	vldr	d7, [r7, #184]	; 0xb8
 80085c6:	f107 0314 	add.w	r3, r7, #20
 80085ca:	2104      	movs	r1, #4
 80085cc:	eeb0 0a47 	vmov.f32	s0, s14
 80085d0:	eef0 0a67 	vmov.f32	s1, s15
 80085d4:	4618      	mov	r0, r3
 80085d6:	f7f9 f923 	bl	8001820 <double2string>
	lenght_buff = snprintf( (char *)result, 144,
 80085da:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80085de:	f107 0314 	add.w	r3, r7, #20
 80085e2:	9309      	str	r3, [sp, #36]	; 0x24
 80085e4:	f107 0308 	add.w	r3, r7, #8
 80085e8:	9308      	str	r3, [sp, #32]
 80085ea:	f107 0320 	add.w	r3, r7, #32
 80085ee:	9307      	str	r3, [sp, #28]
 80085f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80085f4:	9306      	str	r3, [sp, #24]
 80085f6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80085fa:	9305      	str	r3, [sp, #20]
 80085fc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008600:	9304      	str	r3, [sp, #16]
 8008602:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008606:	9303      	str	r3, [sp, #12]
 8008608:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800860c:	9302      	str	r3, [sp, #8]
 800860e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8008612:	9301      	str	r3, [sp, #4]
 8008614:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8008618:	9300      	str	r3, [sp, #0]
 800861a:	4613      	mov	r3, r2
 800861c:	4a0b      	ldr	r2, [pc, #44]	; (800864c <scaraPosition2String+0x21c>)
 800861e:	2190      	movs	r1, #144	; 0x90
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f00b fe85 	bl	8014330 <sniprintf>
 8008626:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
						z,
						roll,
						lenght,
						total_time,
						time);
	return lenght_buff;
 800862a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
}
 800862e:	4618      	mov	r0, r3
 8008630:	3794      	adds	r7, #148	; 0x94
 8008632:	46bd      	mov	sp, r7
 8008634:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8008638:	b002      	add	sp, #8
 800863a:	4770      	bx	lr
 800863c:	f3af 8000 	nop.w
 8008640:	60000000 	.word	0x60000000
 8008644:	400921fb 	.word	0x400921fb
 8008648:	40668000 	.word	0x40668000
 800864c:	08019618 	.word	0x08019618

08008650 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b082      	sub	sp, #8
 8008654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008656:	2300      	movs	r3, #0
 8008658:	607b      	str	r3, [r7, #4]
 800865a:	4b12      	ldr	r3, [pc, #72]	; (80086a4 <HAL_MspInit+0x54>)
 800865c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800865e:	4a11      	ldr	r2, [pc, #68]	; (80086a4 <HAL_MspInit+0x54>)
 8008660:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008664:	6453      	str	r3, [r2, #68]	; 0x44
 8008666:	4b0f      	ldr	r3, [pc, #60]	; (80086a4 <HAL_MspInit+0x54>)
 8008668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800866a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800866e:	607b      	str	r3, [r7, #4]
 8008670:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008672:	2300      	movs	r3, #0
 8008674:	603b      	str	r3, [r7, #0]
 8008676:	4b0b      	ldr	r3, [pc, #44]	; (80086a4 <HAL_MspInit+0x54>)
 8008678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800867a:	4a0a      	ldr	r2, [pc, #40]	; (80086a4 <HAL_MspInit+0x54>)
 800867c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008680:	6413      	str	r3, [r2, #64]	; 0x40
 8008682:	4b08      	ldr	r3, [pc, #32]	; (80086a4 <HAL_MspInit+0x54>)
 8008684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800868a:	603b      	str	r3, [r7, #0]
 800868c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800868e:	2200      	movs	r2, #0
 8008690:	210f      	movs	r1, #15
 8008692:	f06f 0001 	mvn.w	r0, #1
 8008696:	f000 fb85 	bl	8008da4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800869a:	bf00      	nop
 800869c:	3708      	adds	r7, #8
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}
 80086a2:	bf00      	nop
 80086a4:	40023800 	.word	0x40023800

080086a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b08c      	sub	sp, #48	; 0x30
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80086b0:	2300      	movs	r3, #0
 80086b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80086b4:	2300      	movs	r3, #0
 80086b6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 80086b8:	2200      	movs	r2, #0
 80086ba:	6879      	ldr	r1, [r7, #4]
 80086bc:	2036      	movs	r0, #54	; 0x36
 80086be:	f000 fb71 	bl	8008da4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 80086c2:	2036      	movs	r0, #54	; 0x36
 80086c4:	f000 fb8a 	bl	8008ddc <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80086c8:	2300      	movs	r3, #0
 80086ca:	60fb      	str	r3, [r7, #12]
 80086cc:	4b1f      	ldr	r3, [pc, #124]	; (800874c <HAL_InitTick+0xa4>)
 80086ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086d0:	4a1e      	ldr	r2, [pc, #120]	; (800874c <HAL_InitTick+0xa4>)
 80086d2:	f043 0310 	orr.w	r3, r3, #16
 80086d6:	6413      	str	r3, [r2, #64]	; 0x40
 80086d8:	4b1c      	ldr	r3, [pc, #112]	; (800874c <HAL_InitTick+0xa4>)
 80086da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086dc:	f003 0310 	and.w	r3, r3, #16
 80086e0:	60fb      	str	r3, [r7, #12]
 80086e2:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80086e4:	f107 0210 	add.w	r2, r7, #16
 80086e8:	f107 0314 	add.w	r3, r7, #20
 80086ec:	4611      	mov	r1, r2
 80086ee:	4618      	mov	r0, r3
 80086f0:	f002 ff16 	bl	800b520 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80086f4:	f002 feec 	bl	800b4d0 <HAL_RCC_GetPCLK1Freq>
 80086f8:	4603      	mov	r3, r0
 80086fa:	005b      	lsls	r3, r3, #1
 80086fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80086fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008700:	4a13      	ldr	r2, [pc, #76]	; (8008750 <HAL_InitTick+0xa8>)
 8008702:	fba2 2303 	umull	r2, r3, r2, r3
 8008706:	0c9b      	lsrs	r3, r3, #18
 8008708:	3b01      	subs	r3, #1
 800870a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800870c:	4b11      	ldr	r3, [pc, #68]	; (8008754 <HAL_InitTick+0xac>)
 800870e:	4a12      	ldr	r2, [pc, #72]	; (8008758 <HAL_InitTick+0xb0>)
 8008710:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8008712:	4b10      	ldr	r3, [pc, #64]	; (8008754 <HAL_InitTick+0xac>)
 8008714:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008718:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800871a:	4a0e      	ldr	r2, [pc, #56]	; (8008754 <HAL_InitTick+0xac>)
 800871c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800871e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8008720:	4b0c      	ldr	r3, [pc, #48]	; (8008754 <HAL_InitTick+0xac>)
 8008722:	2200      	movs	r2, #0
 8008724:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008726:	4b0b      	ldr	r3, [pc, #44]	; (8008754 <HAL_InitTick+0xac>)
 8008728:	2200      	movs	r2, #0
 800872a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800872c:	4809      	ldr	r0, [pc, #36]	; (8008754 <HAL_InitTick+0xac>)
 800872e:	f002 ff29 	bl	800b584 <HAL_TIM_Base_Init>
 8008732:	4603      	mov	r3, r0
 8008734:	2b00      	cmp	r3, #0
 8008736:	d104      	bne.n	8008742 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8008738:	4806      	ldr	r0, [pc, #24]	; (8008754 <HAL_InitTick+0xac>)
 800873a:	f002 ff4e 	bl	800b5da <HAL_TIM_Base_Start_IT>
 800873e:	4603      	mov	r3, r0
 8008740:	e000      	b.n	8008744 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8008742:	2301      	movs	r3, #1
}
 8008744:	4618      	mov	r0, r3
 8008746:	3730      	adds	r7, #48	; 0x30
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}
 800874c:	40023800 	.word	0x40023800
 8008750:	431bde83 	.word	0x431bde83
 8008754:	20005e10 	.word	0x20005e10
 8008758:	40001000 	.word	0x40001000

0800875c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800875c:	b480      	push	{r7}
 800875e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008760:	bf00      	nop
 8008762:	46bd      	mov	sp, r7
 8008764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008768:	4770      	bx	lr
	...

0800876c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  LOG_REPORT("ic.c: HARDFAULT ERROR", __LINE__);
 8008770:	2164      	movs	r1, #100	; 0x64
 8008772:	4802      	ldr	r0, [pc, #8]	; (800877c <HardFault_Handler+0x10>)
 8008774:	f7f9 f80e 	bl	8001794 <LOG_REPORT>
 8008778:	e7fa      	b.n	8008770 <HardFault_Handler+0x4>
 800877a:	bf00      	nop
 800877c:	0801963c 	.word	0x0801963c

08008780 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  LOG_REPORT("ic.c: MEMORY ERROR", __LINE__);
 8008784:	2174      	movs	r1, #116	; 0x74
 8008786:	4802      	ldr	r0, [pc, #8]	; (8008790 <MemManage_Handler+0x10>)
 8008788:	f7f9 f804 	bl	8001794 <LOG_REPORT>
 800878c:	e7fa      	b.n	8008784 <MemManage_Handler+0x4>
 800878e:	bf00      	nop
 8008790:	08019654 	.word	0x08019654

08008794 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  LOG_REPORT("ic.c: BUS ERROR", __LINE__);
 8008798:	2184      	movs	r1, #132	; 0x84
 800879a:	4802      	ldr	r0, [pc, #8]	; (80087a4 <BusFault_Handler+0x10>)
 800879c:	f7f8 fffa 	bl	8001794 <LOG_REPORT>
 80087a0:	e7fa      	b.n	8008798 <BusFault_Handler+0x4>
 80087a2:	bf00      	nop
 80087a4:	08019668 	.word	0x08019668

080087a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80087a8:	b480      	push	{r7}
 80087aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80087ac:	e7fe      	b.n	80087ac <UsageFault_Handler+0x4>

080087ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80087ae:	b480      	push	{r7}
 80087b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80087b2:	bf00      	nop
 80087b4:	46bd      	mov	sp, r7
 80087b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ba:	4770      	bx	lr

080087bc <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 80087c0:	4802      	ldr	r0, [pc, #8]	; (80087cc <DMA1_Stream4_IRQHandler+0x10>)
 80087c2:	f000 fc41 	bl	8009048 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80087c6:	bf00      	nop
 80087c8:	bd80      	pop	{r7, pc}
 80087ca:	bf00      	nop
 80087cc:	20005ed0 	.word	0x20005ed0

080087d0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80087d4:	4802      	ldr	r0, [pc, #8]	; (80087e0 <UART4_IRQHandler+0x10>)
 80087d6:	f003 fa3f 	bl	800bc58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80087da:	bf00      	nop
 80087dc:	bd80      	pop	{r7, pc}
 80087de:	bf00      	nop
 80087e0:	20005e90 	.word	0x20005e90

080087e4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80087e8:	4802      	ldr	r0, [pc, #8]	; (80087f4 <TIM6_DAC_IRQHandler+0x10>)
 80087ea:	f002 ff1a 	bl	800b622 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80087ee:	bf00      	nop
 80087f0:	bd80      	pop	{r7, pc}
 80087f2:	bf00      	nop
 80087f4:	20005e10 	.word	0x20005e10

080087f8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	osSignalSet(defaultTaskHandle, 0x01);
 80087fc:	4b05      	ldr	r3, [pc, #20]	; (8008814 <TIM7_IRQHandler+0x1c>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	2101      	movs	r1, #1
 8008802:	4618      	mov	r0, r3
 8008804:	f006 ffe8 	bl	800f7d8 <osSignalSet>
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8008808:	4803      	ldr	r0, [pc, #12]	; (8008818 <TIM7_IRQHandler+0x20>)
 800880a:	f002 ff0a 	bl	800b622 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
  /* USER CODE END TIM7_IRQn 1 */
}
 800880e:	bf00      	nop
 8008810:	bd80      	pop	{r7, pc}
 8008812:	bf00      	nop
 8008814:	200052dc 	.word	0x200052dc
 8008818:	20005e50 	.word	0x20005e50

0800881c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8008820:	4802      	ldr	r0, [pc, #8]	; (800882c <OTG_FS_IRQHandler+0x10>)
 8008822:	f001 f9e1 	bl	8009be8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8008826:	bf00      	nop
 8008828:	bd80      	pop	{r7, pc}
 800882a:	bf00      	nop
 800882c:	200067d8 	.word	0x200067d8

08008830 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b084      	sub	sp, #16
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8008838:	4b11      	ldr	r3, [pc, #68]	; (8008880 <_sbrk+0x50>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d102      	bne.n	8008846 <_sbrk+0x16>
		heap_end = &end;
 8008840:	4b0f      	ldr	r3, [pc, #60]	; (8008880 <_sbrk+0x50>)
 8008842:	4a10      	ldr	r2, [pc, #64]	; (8008884 <_sbrk+0x54>)
 8008844:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8008846:	4b0e      	ldr	r3, [pc, #56]	; (8008880 <_sbrk+0x50>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800884c:	4b0c      	ldr	r3, [pc, #48]	; (8008880 <_sbrk+0x50>)
 800884e:	681a      	ldr	r2, [r3, #0]
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	4413      	add	r3, r2
 8008854:	466a      	mov	r2, sp
 8008856:	4293      	cmp	r3, r2
 8008858:	d907      	bls.n	800886a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800885a:	f00a fe07 	bl	801346c <__errno>
 800885e:	4602      	mov	r2, r0
 8008860:	230c      	movs	r3, #12
 8008862:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8008864:	f04f 33ff 	mov.w	r3, #4294967295
 8008868:	e006      	b.n	8008878 <_sbrk+0x48>
	}

	heap_end += incr;
 800886a:	4b05      	ldr	r3, [pc, #20]	; (8008880 <_sbrk+0x50>)
 800886c:	681a      	ldr	r2, [r3, #0]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	4413      	add	r3, r2
 8008872:	4a03      	ldr	r2, [pc, #12]	; (8008880 <_sbrk+0x50>)
 8008874:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8008876:	68fb      	ldr	r3, [r7, #12]
}
 8008878:	4618      	mov	r0, r3
 800887a:	3710      	adds	r7, #16
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}
 8008880:	2000147c 	.word	0x2000147c
 8008884:	20006be8 	.word	0x20006be8

08008888 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008888:	b480      	push	{r7}
 800888a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800888c:	4b08      	ldr	r3, [pc, #32]	; (80088b0 <SystemInit+0x28>)
 800888e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008892:	4a07      	ldr	r2, [pc, #28]	; (80088b0 <SystemInit+0x28>)
 8008894:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008898:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800889c:	4b04      	ldr	r3, [pc, #16]	; (80088b0 <SystemInit+0x28>)
 800889e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80088a2:	609a      	str	r2, [r3, #8]
#endif
}
 80088a4:	bf00      	nop
 80088a6:	46bd      	mov	sp, r7
 80088a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ac:	4770      	bx	lr
 80088ae:	bf00      	nop
 80088b0:	e000ed00 	.word	0xe000ed00

080088b4 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b082      	sub	sp, #8
 80088b8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80088ba:	463b      	mov	r3, r7
 80088bc:	2200      	movs	r2, #0
 80088be:	601a      	str	r2, [r3, #0]
 80088c0:	605a      	str	r2, [r3, #4]

  htim7.Instance = TIM7;
 80088c2:	4b15      	ldr	r3, [pc, #84]	; (8008918 <MX_TIM7_Init+0x64>)
 80088c4:	4a15      	ldr	r2, [pc, #84]	; (800891c <MX_TIM7_Init+0x68>)
 80088c6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 80088c8:	4b13      	ldr	r3, [pc, #76]	; (8008918 <MX_TIM7_Init+0x64>)
 80088ca:	2253      	movs	r2, #83	; 0x53
 80088cc:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80088ce:	4b12      	ldr	r3, [pc, #72]	; (8008918 <MX_TIM7_Init+0x64>)
 80088d0:	2200      	movs	r2, #0
 80088d2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 80088d4:	4b10      	ldr	r3, [pc, #64]	; (8008918 <MX_TIM7_Init+0x64>)
 80088d6:	f242 720f 	movw	r2, #9999	; 0x270f
 80088da:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80088dc:	4b0e      	ldr	r3, [pc, #56]	; (8008918 <MX_TIM7_Init+0x64>)
 80088de:	2200      	movs	r2, #0
 80088e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80088e2:	480d      	ldr	r0, [pc, #52]	; (8008918 <MX_TIM7_Init+0x64>)
 80088e4:	f002 fe4e 	bl	800b584 <HAL_TIM_Base_Init>
 80088e8:	4603      	mov	r3, r0
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d001      	beq.n	80088f2 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80088ee:	f7fa fdbf 	bl	8003470 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80088f2:	2300      	movs	r3, #0
 80088f4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80088f6:	2300      	movs	r3, #0
 80088f8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80088fa:	463b      	mov	r3, r7
 80088fc:	4619      	mov	r1, r3
 80088fe:	4806      	ldr	r0, [pc, #24]	; (8008918 <MX_TIM7_Init+0x64>)
 8008900:	f003 f860 	bl	800b9c4 <HAL_TIMEx_MasterConfigSynchronization>
 8008904:	4603      	mov	r3, r0
 8008906:	2b00      	cmp	r3, #0
 8008908:	d001      	beq.n	800890e <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800890a:	f7fa fdb1 	bl	8003470 <Error_Handler>
  }

}
 800890e:	bf00      	nop
 8008910:	3708      	adds	r7, #8
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}
 8008916:	bf00      	nop
 8008918:	20005e50 	.word	0x20005e50
 800891c:	40001400 	.word	0x40001400

08008920 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b084      	sub	sp, #16
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4a0e      	ldr	r2, [pc, #56]	; (8008968 <HAL_TIM_Base_MspInit+0x48>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d115      	bne.n	800895e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8008932:	2300      	movs	r3, #0
 8008934:	60fb      	str	r3, [r7, #12]
 8008936:	4b0d      	ldr	r3, [pc, #52]	; (800896c <HAL_TIM_Base_MspInit+0x4c>)
 8008938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800893a:	4a0c      	ldr	r2, [pc, #48]	; (800896c <HAL_TIM_Base_MspInit+0x4c>)
 800893c:	f043 0320 	orr.w	r3, r3, #32
 8008940:	6413      	str	r3, [r2, #64]	; 0x40
 8008942:	4b0a      	ldr	r3, [pc, #40]	; (800896c <HAL_TIM_Base_MspInit+0x4c>)
 8008944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008946:	f003 0320 	and.w	r3, r3, #32
 800894a:	60fb      	str	r3, [r7, #12]
 800894c:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 800894e:	2200      	movs	r2, #0
 8008950:	2105      	movs	r1, #5
 8008952:	2037      	movs	r0, #55	; 0x37
 8008954:	f000 fa26 	bl	8008da4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8008958:	2037      	movs	r0, #55	; 0x37
 800895a:	f000 fa3f 	bl	8008ddc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800895e:	bf00      	nop
 8008960:	3710      	adds	r7, #16
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}
 8008966:	bf00      	nop
 8008968:	40001400 	.word	0x40001400
 800896c:	40023800 	.word	0x40023800

08008970 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
DMA_HandleTypeDef hdma_uart4_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8008974:	4b11      	ldr	r3, [pc, #68]	; (80089bc <MX_UART4_Init+0x4c>)
 8008976:	4a12      	ldr	r2, [pc, #72]	; (80089c0 <MX_UART4_Init+0x50>)
 8008978:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800897a:	4b10      	ldr	r3, [pc, #64]	; (80089bc <MX_UART4_Init+0x4c>)
 800897c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008980:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8008982:	4b0e      	ldr	r3, [pc, #56]	; (80089bc <MX_UART4_Init+0x4c>)
 8008984:	2200      	movs	r2, #0
 8008986:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8008988:	4b0c      	ldr	r3, [pc, #48]	; (80089bc <MX_UART4_Init+0x4c>)
 800898a:	2200      	movs	r2, #0
 800898c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800898e:	4b0b      	ldr	r3, [pc, #44]	; (80089bc <MX_UART4_Init+0x4c>)
 8008990:	2200      	movs	r2, #0
 8008992:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8008994:	4b09      	ldr	r3, [pc, #36]	; (80089bc <MX_UART4_Init+0x4c>)
 8008996:	220c      	movs	r2, #12
 8008998:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800899a:	4b08      	ldr	r3, [pc, #32]	; (80089bc <MX_UART4_Init+0x4c>)
 800899c:	2200      	movs	r2, #0
 800899e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80089a0:	4b06      	ldr	r3, [pc, #24]	; (80089bc <MX_UART4_Init+0x4c>)
 80089a2:	2200      	movs	r2, #0
 80089a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80089a6:	4805      	ldr	r0, [pc, #20]	; (80089bc <MX_UART4_Init+0x4c>)
 80089a8:	f003 f89c 	bl	800bae4 <HAL_UART_Init>
 80089ac:	4603      	mov	r3, r0
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d001      	beq.n	80089b6 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80089b2:	f7fa fd5d 	bl	8003470 <Error_Handler>
  }

}
 80089b6:	bf00      	nop
 80089b8:	bd80      	pop	{r7, pc}
 80089ba:	bf00      	nop
 80089bc:	20005e90 	.word	0x20005e90
 80089c0:	40004c00 	.word	0x40004c00

080089c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b08a      	sub	sp, #40	; 0x28
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80089cc:	f107 0314 	add.w	r3, r7, #20
 80089d0:	2200      	movs	r2, #0
 80089d2:	601a      	str	r2, [r3, #0]
 80089d4:	605a      	str	r2, [r3, #4]
 80089d6:	609a      	str	r2, [r3, #8]
 80089d8:	60da      	str	r2, [r3, #12]
 80089da:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4a34      	ldr	r2, [pc, #208]	; (8008ab4 <HAL_UART_MspInit+0xf0>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d161      	bne.n	8008aaa <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80089e6:	2300      	movs	r3, #0
 80089e8:	613b      	str	r3, [r7, #16]
 80089ea:	4b33      	ldr	r3, [pc, #204]	; (8008ab8 <HAL_UART_MspInit+0xf4>)
 80089ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ee:	4a32      	ldr	r2, [pc, #200]	; (8008ab8 <HAL_UART_MspInit+0xf4>)
 80089f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80089f4:	6413      	str	r3, [r2, #64]	; 0x40
 80089f6:	4b30      	ldr	r3, [pc, #192]	; (8008ab8 <HAL_UART_MspInit+0xf4>)
 80089f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80089fe:	613b      	str	r3, [r7, #16]
 8008a00:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008a02:	2300      	movs	r3, #0
 8008a04:	60fb      	str	r3, [r7, #12]
 8008a06:	4b2c      	ldr	r3, [pc, #176]	; (8008ab8 <HAL_UART_MspInit+0xf4>)
 8008a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a0a:	4a2b      	ldr	r2, [pc, #172]	; (8008ab8 <HAL_UART_MspInit+0xf4>)
 8008a0c:	f043 0301 	orr.w	r3, r3, #1
 8008a10:	6313      	str	r3, [r2, #48]	; 0x30
 8008a12:	4b29      	ldr	r3, [pc, #164]	; (8008ab8 <HAL_UART_MspInit+0xf4>)
 8008a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a16:	f003 0301 	and.w	r3, r3, #1
 8008a1a:	60fb      	str	r3, [r7, #12]
 8008a1c:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration    
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8008a1e:	2303      	movs	r3, #3
 8008a20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a22:	2302      	movs	r3, #2
 8008a24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008a26:	2301      	movs	r3, #1
 8008a28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a2a:	2303      	movs	r3, #3
 8008a2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8008a2e:	2308      	movs	r3, #8
 8008a30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a32:	f107 0314 	add.w	r3, r7, #20
 8008a36:	4619      	mov	r1, r3
 8008a38:	4820      	ldr	r0, [pc, #128]	; (8008abc <HAL_UART_MspInit+0xf8>)
 8008a3a:	f000 fd7b 	bl	8009534 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8008a3e:	4b20      	ldr	r3, [pc, #128]	; (8008ac0 <HAL_UART_MspInit+0xfc>)
 8008a40:	4a20      	ldr	r2, [pc, #128]	; (8008ac4 <HAL_UART_MspInit+0x100>)
 8008a42:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8008a44:	4b1e      	ldr	r3, [pc, #120]	; (8008ac0 <HAL_UART_MspInit+0xfc>)
 8008a46:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008a4a:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008a4c:	4b1c      	ldr	r3, [pc, #112]	; (8008ac0 <HAL_UART_MspInit+0xfc>)
 8008a4e:	2240      	movs	r2, #64	; 0x40
 8008a50:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008a52:	4b1b      	ldr	r3, [pc, #108]	; (8008ac0 <HAL_UART_MspInit+0xfc>)
 8008a54:	2200      	movs	r2, #0
 8008a56:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008a58:	4b19      	ldr	r3, [pc, #100]	; (8008ac0 <HAL_UART_MspInit+0xfc>)
 8008a5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008a5e:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008a60:	4b17      	ldr	r3, [pc, #92]	; (8008ac0 <HAL_UART_MspInit+0xfc>)
 8008a62:	2200      	movs	r2, #0
 8008a64:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008a66:	4b16      	ldr	r3, [pc, #88]	; (8008ac0 <HAL_UART_MspInit+0xfc>)
 8008a68:	2200      	movs	r2, #0
 8008a6a:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8008a6c:	4b14      	ldr	r3, [pc, #80]	; (8008ac0 <HAL_UART_MspInit+0xfc>)
 8008a6e:	2200      	movs	r2, #0
 8008a70:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008a72:	4b13      	ldr	r3, [pc, #76]	; (8008ac0 <HAL_UART_MspInit+0xfc>)
 8008a74:	2200      	movs	r2, #0
 8008a76:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008a78:	4b11      	ldr	r3, [pc, #68]	; (8008ac0 <HAL_UART_MspInit+0xfc>)
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8008a7e:	4810      	ldr	r0, [pc, #64]	; (8008ac0 <HAL_UART_MspInit+0xfc>)
 8008a80:	f000 f9ba 	bl	8008df8 <HAL_DMA_Init>
 8008a84:	4603      	mov	r3, r0
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d001      	beq.n	8008a8e <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8008a8a:	f7fa fcf1 	bl	8003470 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	4a0b      	ldr	r2, [pc, #44]	; (8008ac0 <HAL_UART_MspInit+0xfc>)
 8008a92:	631a      	str	r2, [r3, #48]	; 0x30
 8008a94:	4a0a      	ldr	r2, [pc, #40]	; (8008ac0 <HAL_UART_MspInit+0xfc>)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	2105      	movs	r1, #5
 8008a9e:	2034      	movs	r0, #52	; 0x34
 8008aa0:	f000 f980 	bl	8008da4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8008aa4:	2034      	movs	r0, #52	; 0x34
 8008aa6:	f000 f999 	bl	8008ddc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8008aaa:	bf00      	nop
 8008aac:	3728      	adds	r7, #40	; 0x28
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}
 8008ab2:	bf00      	nop
 8008ab4:	40004c00 	.word	0x40004c00
 8008ab8:	40023800 	.word	0x40023800
 8008abc:	40020000 	.word	0x40020000
 8008ac0:	20005ed0 	.word	0x20005ed0
 8008ac4:	40026070 	.word	0x40026070

08008ac8 <HAL_UART_TxCpltCallback>:
  /* USER CODE END UART4_MspDeInit 1 */
  }
} 

/* USER CODE BEGIN 1 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b084      	sub	sp, #16
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
	if (UART4 == huart->Instance) {
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4a0c      	ldr	r2, [pc, #48]	; (8008b08 <HAL_UART_TxCpltCallback+0x40>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d112      	bne.n	8008b00 <HAL_UART_TxCpltCallback+0x38>
		uint16_t size_dma;
		size_dma = ringBuff_PopArray(&uart_tx_ringbuff, log_uart_dma_buff, LOG_BUFFER_SIZE);
 8008ada:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008ade:	490b      	ldr	r1, [pc, #44]	; (8008b0c <HAL_UART_TxCpltCallback+0x44>)
 8008ae0:	480b      	ldr	r0, [pc, #44]	; (8008b10 <HAL_UART_TxCpltCallback+0x48>)
 8008ae2:	f7fa fd64 	bl	80035ae <ringBuff_PopArray>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	81fb      	strh	r3, [r7, #14]
		if (0 == size_dma) {
 8008aea:	89fb      	ldrh	r3, [r7, #14]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d006      	beq.n	8008afe <HAL_UART_TxCpltCallback+0x36>
			return;
		}
		HAL_UART_Transmit_DMA(&huart4, log_uart_dma_buff, size_dma);
 8008af0:	89fb      	ldrh	r3, [r7, #14]
 8008af2:	461a      	mov	r2, r3
 8008af4:	4905      	ldr	r1, [pc, #20]	; (8008b0c <HAL_UART_TxCpltCallback+0x44>)
 8008af6:	4807      	ldr	r0, [pc, #28]	; (8008b14 <HAL_UART_TxCpltCallback+0x4c>)
 8008af8:	f003 f842 	bl	800bb80 <HAL_UART_Transmit_DMA>
 8008afc:	e000      	b.n	8008b00 <HAL_UART_TxCpltCallback+0x38>
			return;
 8008afe:	bf00      	nop
	}
}
 8008b00:	3710      	adds	r7, #16
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}
 8008b06:	bf00      	nop
 8008b08:	40004c00 	.word	0x40004c00
 8008b0c:	200051dc 	.word	0x200051dc
 8008b10:	2000086c 	.word	0x2000086c
 8008b14:	20005e90 	.word	0x20005e90

08008b18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8008b18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008b50 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8008b1c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8008b1e:	e003      	b.n	8008b28 <LoopCopyDataInit>

08008b20 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008b20:	4b0c      	ldr	r3, [pc, #48]	; (8008b54 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8008b22:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008b24:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008b26:	3104      	adds	r1, #4

08008b28 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008b28:	480b      	ldr	r0, [pc, #44]	; (8008b58 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8008b2a:	4b0c      	ldr	r3, [pc, #48]	; (8008b5c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008b2c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8008b2e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008b30:	d3f6      	bcc.n	8008b20 <CopyDataInit>
  ldr  r2, =_sbss
 8008b32:	4a0b      	ldr	r2, [pc, #44]	; (8008b60 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008b34:	e002      	b.n	8008b3c <LoopFillZerobss>

08008b36 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8008b36:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008b38:	f842 3b04 	str.w	r3, [r2], #4

08008b3c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008b3c:	4b09      	ldr	r3, [pc, #36]	; (8008b64 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8008b3e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008b40:	d3f9      	bcc.n	8008b36 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8008b42:	f7ff fea1 	bl	8008888 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008b46:	f00a fc97 	bl	8013478 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008b4a:	f7fa fbff 	bl	800334c <main>
  bx  lr    
 8008b4e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8008b50:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8008b54:	08019c58 	.word	0x08019c58
  ldr  r0, =_sdata
 8008b58:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008b5c:	20001008 	.word	0x20001008
  ldr  r2, =_sbss
 8008b60:	20001008 	.word	0x20001008
  ldr  r3, = _ebss
 8008b64:	20006be4 	.word	0x20006be4

08008b68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008b68:	e7fe      	b.n	8008b68 <ADC_IRQHandler>
	...

08008b6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008b70:	4b0e      	ldr	r3, [pc, #56]	; (8008bac <HAL_Init+0x40>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4a0d      	ldr	r2, [pc, #52]	; (8008bac <HAL_Init+0x40>)
 8008b76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008b7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008b7c:	4b0b      	ldr	r3, [pc, #44]	; (8008bac <HAL_Init+0x40>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4a0a      	ldr	r2, [pc, #40]	; (8008bac <HAL_Init+0x40>)
 8008b82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008b86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008b88:	4b08      	ldr	r3, [pc, #32]	; (8008bac <HAL_Init+0x40>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	4a07      	ldr	r2, [pc, #28]	; (8008bac <HAL_Init+0x40>)
 8008b8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008b94:	2003      	movs	r0, #3
 8008b96:	f000 f8fa 	bl	8008d8e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008b9a:	2000      	movs	r0, #0
 8008b9c:	f7ff fd84 	bl	80086a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008ba0:	f7ff fd56 	bl	8008650 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008ba4:	2300      	movs	r3, #0
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	bd80      	pop	{r7, pc}
 8008baa:	bf00      	nop
 8008bac:	40023c00 	.word	0x40023c00

08008bb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008bb4:	4b06      	ldr	r3, [pc, #24]	; (8008bd0 <HAL_IncTick+0x20>)
 8008bb6:	781b      	ldrb	r3, [r3, #0]
 8008bb8:	461a      	mov	r2, r3
 8008bba:	4b06      	ldr	r3, [pc, #24]	; (8008bd4 <HAL_IncTick+0x24>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	4413      	add	r3, r2
 8008bc0:	4a04      	ldr	r2, [pc, #16]	; (8008bd4 <HAL_IncTick+0x24>)
 8008bc2:	6013      	str	r3, [r2, #0]
}
 8008bc4:	bf00      	nop
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bcc:	4770      	bx	lr
 8008bce:	bf00      	nop
 8008bd0:	20000cbc 	.word	0x20000cbc
 8008bd4:	20005f30 	.word	0x20005f30

08008bd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008bd8:	b480      	push	{r7}
 8008bda:	af00      	add	r7, sp, #0
  return uwTick;
 8008bdc:	4b03      	ldr	r3, [pc, #12]	; (8008bec <HAL_GetTick+0x14>)
 8008bde:	681b      	ldr	r3, [r3, #0]
}
 8008be0:	4618      	mov	r0, r3
 8008be2:	46bd      	mov	sp, r7
 8008be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be8:	4770      	bx	lr
 8008bea:	bf00      	nop
 8008bec:	20005f30 	.word	0x20005f30

08008bf0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b084      	sub	sp, #16
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008bf8:	f7ff ffee 	bl	8008bd8 <HAL_GetTick>
 8008bfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c08:	d005      	beq.n	8008c16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008c0a:	4b09      	ldr	r3, [pc, #36]	; (8008c30 <HAL_Delay+0x40>)
 8008c0c:	781b      	ldrb	r3, [r3, #0]
 8008c0e:	461a      	mov	r2, r3
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	4413      	add	r3, r2
 8008c14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008c16:	bf00      	nop
 8008c18:	f7ff ffde 	bl	8008bd8 <HAL_GetTick>
 8008c1c:	4602      	mov	r2, r0
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	1ad3      	subs	r3, r2, r3
 8008c22:	68fa      	ldr	r2, [r7, #12]
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d8f7      	bhi.n	8008c18 <HAL_Delay+0x28>
  {
  }
}
 8008c28:	bf00      	nop
 8008c2a:	3710      	adds	r7, #16
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}
 8008c30:	20000cbc 	.word	0x20000cbc

08008c34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008c34:	b480      	push	{r7}
 8008c36:	b085      	sub	sp, #20
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f003 0307 	and.w	r3, r3, #7
 8008c42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008c44:	4b0c      	ldr	r3, [pc, #48]	; (8008c78 <__NVIC_SetPriorityGrouping+0x44>)
 8008c46:	68db      	ldr	r3, [r3, #12]
 8008c48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008c4a:	68ba      	ldr	r2, [r7, #8]
 8008c4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008c50:	4013      	ands	r3, r2
 8008c52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008c5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008c60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008c66:	4a04      	ldr	r2, [pc, #16]	; (8008c78 <__NVIC_SetPriorityGrouping+0x44>)
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	60d3      	str	r3, [r2, #12]
}
 8008c6c:	bf00      	nop
 8008c6e:	3714      	adds	r7, #20
 8008c70:	46bd      	mov	sp, r7
 8008c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c76:	4770      	bx	lr
 8008c78:	e000ed00 	.word	0xe000ed00

08008c7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008c80:	4b04      	ldr	r3, [pc, #16]	; (8008c94 <__NVIC_GetPriorityGrouping+0x18>)
 8008c82:	68db      	ldr	r3, [r3, #12]
 8008c84:	0a1b      	lsrs	r3, r3, #8
 8008c86:	f003 0307 	and.w	r3, r3, #7
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c92:	4770      	bx	lr
 8008c94:	e000ed00 	.word	0xe000ed00

08008c98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b083      	sub	sp, #12
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	db0b      	blt.n	8008cc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008caa:	79fb      	ldrb	r3, [r7, #7]
 8008cac:	f003 021f 	and.w	r2, r3, #31
 8008cb0:	4907      	ldr	r1, [pc, #28]	; (8008cd0 <__NVIC_EnableIRQ+0x38>)
 8008cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008cb6:	095b      	lsrs	r3, r3, #5
 8008cb8:	2001      	movs	r0, #1
 8008cba:	fa00 f202 	lsl.w	r2, r0, r2
 8008cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008cc2:	bf00      	nop
 8008cc4:	370c      	adds	r7, #12
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ccc:	4770      	bx	lr
 8008cce:	bf00      	nop
 8008cd0:	e000e100 	.word	0xe000e100

08008cd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b083      	sub	sp, #12
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	4603      	mov	r3, r0
 8008cdc:	6039      	str	r1, [r7, #0]
 8008cde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	db0a      	blt.n	8008cfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	b2da      	uxtb	r2, r3
 8008cec:	490c      	ldr	r1, [pc, #48]	; (8008d20 <__NVIC_SetPriority+0x4c>)
 8008cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008cf2:	0112      	lsls	r2, r2, #4
 8008cf4:	b2d2      	uxtb	r2, r2
 8008cf6:	440b      	add	r3, r1
 8008cf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008cfc:	e00a      	b.n	8008d14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	b2da      	uxtb	r2, r3
 8008d02:	4908      	ldr	r1, [pc, #32]	; (8008d24 <__NVIC_SetPriority+0x50>)
 8008d04:	79fb      	ldrb	r3, [r7, #7]
 8008d06:	f003 030f 	and.w	r3, r3, #15
 8008d0a:	3b04      	subs	r3, #4
 8008d0c:	0112      	lsls	r2, r2, #4
 8008d0e:	b2d2      	uxtb	r2, r2
 8008d10:	440b      	add	r3, r1
 8008d12:	761a      	strb	r2, [r3, #24]
}
 8008d14:	bf00      	nop
 8008d16:	370c      	adds	r7, #12
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr
 8008d20:	e000e100 	.word	0xe000e100
 8008d24:	e000ed00 	.word	0xe000ed00

08008d28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b089      	sub	sp, #36	; 0x24
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	60f8      	str	r0, [r7, #12]
 8008d30:	60b9      	str	r1, [r7, #8]
 8008d32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	f003 0307 	and.w	r3, r3, #7
 8008d3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008d3c:	69fb      	ldr	r3, [r7, #28]
 8008d3e:	f1c3 0307 	rsb	r3, r3, #7
 8008d42:	2b04      	cmp	r3, #4
 8008d44:	bf28      	it	cs
 8008d46:	2304      	movcs	r3, #4
 8008d48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008d4a:	69fb      	ldr	r3, [r7, #28]
 8008d4c:	3304      	adds	r3, #4
 8008d4e:	2b06      	cmp	r3, #6
 8008d50:	d902      	bls.n	8008d58 <NVIC_EncodePriority+0x30>
 8008d52:	69fb      	ldr	r3, [r7, #28]
 8008d54:	3b03      	subs	r3, #3
 8008d56:	e000      	b.n	8008d5a <NVIC_EncodePriority+0x32>
 8008d58:	2300      	movs	r3, #0
 8008d5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8008d60:	69bb      	ldr	r3, [r7, #24]
 8008d62:	fa02 f303 	lsl.w	r3, r2, r3
 8008d66:	43da      	mvns	r2, r3
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	401a      	ands	r2, r3
 8008d6c:	697b      	ldr	r3, [r7, #20]
 8008d6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008d70:	f04f 31ff 	mov.w	r1, #4294967295
 8008d74:	697b      	ldr	r3, [r7, #20]
 8008d76:	fa01 f303 	lsl.w	r3, r1, r3
 8008d7a:	43d9      	mvns	r1, r3
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008d80:	4313      	orrs	r3, r2
         );
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3724      	adds	r7, #36	; 0x24
 8008d86:	46bd      	mov	sp, r7
 8008d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8c:	4770      	bx	lr

08008d8e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008d8e:	b580      	push	{r7, lr}
 8008d90:	b082      	sub	sp, #8
 8008d92:	af00      	add	r7, sp, #0
 8008d94:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f7ff ff4c 	bl	8008c34 <__NVIC_SetPriorityGrouping>
}
 8008d9c:	bf00      	nop
 8008d9e:	3708      	adds	r7, #8
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}

08008da4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b086      	sub	sp, #24
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	4603      	mov	r3, r0
 8008dac:	60b9      	str	r1, [r7, #8]
 8008dae:	607a      	str	r2, [r7, #4]
 8008db0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008db2:	2300      	movs	r3, #0
 8008db4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008db6:	f7ff ff61 	bl	8008c7c <__NVIC_GetPriorityGrouping>
 8008dba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008dbc:	687a      	ldr	r2, [r7, #4]
 8008dbe:	68b9      	ldr	r1, [r7, #8]
 8008dc0:	6978      	ldr	r0, [r7, #20]
 8008dc2:	f7ff ffb1 	bl	8008d28 <NVIC_EncodePriority>
 8008dc6:	4602      	mov	r2, r0
 8008dc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008dcc:	4611      	mov	r1, r2
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f7ff ff80 	bl	8008cd4 <__NVIC_SetPriority>
}
 8008dd4:	bf00      	nop
 8008dd6:	3718      	adds	r7, #24
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}

08008ddc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b082      	sub	sp, #8
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	4603      	mov	r3, r0
 8008de4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008dea:	4618      	mov	r0, r3
 8008dec:	f7ff ff54 	bl	8008c98 <__NVIC_EnableIRQ>
}
 8008df0:	bf00      	nop
 8008df2:	3708      	adds	r7, #8
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}

08008df8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b086      	sub	sp, #24
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008e00:	2300      	movs	r3, #0
 8008e02:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8008e04:	f7ff fee8 	bl	8008bd8 <HAL_GetTick>
 8008e08:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d101      	bne.n	8008e14 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8008e10:	2301      	movs	r3, #1
 8008e12:	e099      	b.n	8008f48 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2200      	movs	r2, #0
 8008e18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2202      	movs	r2, #2
 8008e20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	681a      	ldr	r2, [r3, #0]
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f022 0201 	bic.w	r2, r2, #1
 8008e32:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008e34:	e00f      	b.n	8008e56 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008e36:	f7ff fecf 	bl	8008bd8 <HAL_GetTick>
 8008e3a:	4602      	mov	r2, r0
 8008e3c:	693b      	ldr	r3, [r7, #16]
 8008e3e:	1ad3      	subs	r3, r2, r3
 8008e40:	2b05      	cmp	r3, #5
 8008e42:	d908      	bls.n	8008e56 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2220      	movs	r2, #32
 8008e48:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2203      	movs	r2, #3
 8008e4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8008e52:	2303      	movs	r3, #3
 8008e54:	e078      	b.n	8008f48 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f003 0301 	and.w	r3, r3, #1
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d1e8      	bne.n	8008e36 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008e6c:	697a      	ldr	r2, [r7, #20]
 8008e6e:	4b38      	ldr	r3, [pc, #224]	; (8008f50 <HAL_DMA_Init+0x158>)
 8008e70:	4013      	ands	r3, r2
 8008e72:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	685a      	ldr	r2, [r3, #4]
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	689b      	ldr	r3, [r3, #8]
 8008e7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008e82:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	691b      	ldr	r3, [r3, #16]
 8008e88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008e8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	699b      	ldr	r3, [r3, #24]
 8008e94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008e9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6a1b      	ldr	r3, [r3, #32]
 8008ea0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008ea2:	697a      	ldr	r2, [r7, #20]
 8008ea4:	4313      	orrs	r3, r2
 8008ea6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eac:	2b04      	cmp	r3, #4
 8008eae:	d107      	bne.n	8008ec0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eb8:	4313      	orrs	r3, r2
 8008eba:	697a      	ldr	r2, [r7, #20]
 8008ebc:	4313      	orrs	r3, r2
 8008ebe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	697a      	ldr	r2, [r7, #20]
 8008ec6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	695b      	ldr	r3, [r3, #20]
 8008ece:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008ed0:	697b      	ldr	r3, [r7, #20]
 8008ed2:	f023 0307 	bic.w	r3, r3, #7
 8008ed6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008edc:	697a      	ldr	r2, [r7, #20]
 8008ede:	4313      	orrs	r3, r2
 8008ee0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee6:	2b04      	cmp	r3, #4
 8008ee8:	d117      	bne.n	8008f1a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eee:	697a      	ldr	r2, [r7, #20]
 8008ef0:	4313      	orrs	r3, r2
 8008ef2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d00e      	beq.n	8008f1a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f000 fa9f 	bl	8009440 <DMA_CheckFifoParam>
 8008f02:	4603      	mov	r3, r0
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d008      	beq.n	8008f1a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2240      	movs	r2, #64	; 0x40
 8008f0c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2201      	movs	r2, #1
 8008f12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8008f16:	2301      	movs	r3, #1
 8008f18:	e016      	b.n	8008f48 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	697a      	ldr	r2, [r7, #20]
 8008f20:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f000 fa56 	bl	80093d4 <DMA_CalcBaseAndBitshift>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f30:	223f      	movs	r2, #63	; 0x3f
 8008f32:	409a      	lsls	r2, r3
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2201      	movs	r2, #1
 8008f42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8008f46:	2300      	movs	r3, #0
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	3718      	adds	r7, #24
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}
 8008f50:	f010803f 	.word	0xf010803f

08008f54 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b086      	sub	sp, #24
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	60f8      	str	r0, [r7, #12]
 8008f5c:	60b9      	str	r1, [r7, #8]
 8008f5e:	607a      	str	r2, [r7, #4]
 8008f60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008f62:	2300      	movs	r3, #0
 8008f64:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f6a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008f72:	2b01      	cmp	r3, #1
 8008f74:	d101      	bne.n	8008f7a <HAL_DMA_Start_IT+0x26>
 8008f76:	2302      	movs	r3, #2
 8008f78:	e040      	b.n	8008ffc <HAL_DMA_Start_IT+0xa8>
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	2201      	movs	r2, #1
 8008f7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008f88:	b2db      	uxtb	r3, r3
 8008f8a:	2b01      	cmp	r3, #1
 8008f8c:	d12f      	bne.n	8008fee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	2202      	movs	r2, #2
 8008f92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	687a      	ldr	r2, [r7, #4]
 8008fa0:	68b9      	ldr	r1, [r7, #8]
 8008fa2:	68f8      	ldr	r0, [r7, #12]
 8008fa4:	f000 f9e8 	bl	8009378 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fac:	223f      	movs	r2, #63	; 0x3f
 8008fae:	409a      	lsls	r2, r3
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	681a      	ldr	r2, [r3, #0]
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f042 0216 	orr.w	r2, r2, #22
 8008fc2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d007      	beq.n	8008fdc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	681a      	ldr	r2, [r3, #0]
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f042 0208 	orr.w	r2, r2, #8
 8008fda:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	681a      	ldr	r2, [r3, #0]
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f042 0201 	orr.w	r2, r2, #1
 8008fea:	601a      	str	r2, [r3, #0]
 8008fec:	e005      	b.n	8008ffa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8008ff6:	2302      	movs	r3, #2
 8008ff8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8008ffa:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	3718      	adds	r7, #24
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}

08009004 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009004:	b480      	push	{r7}
 8009006:	b083      	sub	sp, #12
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009012:	b2db      	uxtb	r3, r3
 8009014:	2b02      	cmp	r3, #2
 8009016:	d004      	beq.n	8009022 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2280      	movs	r2, #128	; 0x80
 800901c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800901e:	2301      	movs	r3, #1
 8009020:	e00c      	b.n	800903c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2205      	movs	r2, #5
 8009026:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	681a      	ldr	r2, [r3, #0]
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f022 0201 	bic.w	r2, r2, #1
 8009038:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800903a:	2300      	movs	r3, #0
}
 800903c:	4618      	mov	r0, r3
 800903e:	370c      	adds	r7, #12
 8009040:	46bd      	mov	sp, r7
 8009042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009046:	4770      	bx	lr

08009048 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b086      	sub	sp, #24
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8009050:	2300      	movs	r3, #0
 8009052:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8009054:	4b92      	ldr	r3, [pc, #584]	; (80092a0 <HAL_DMA_IRQHandler+0x258>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	4a92      	ldr	r2, [pc, #584]	; (80092a4 <HAL_DMA_IRQHandler+0x25c>)
 800905a:	fba2 2303 	umull	r2, r3, r2, r3
 800905e:	0a9b      	lsrs	r3, r3, #10
 8009060:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009066:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009072:	2208      	movs	r2, #8
 8009074:	409a      	lsls	r2, r3
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	4013      	ands	r3, r2
 800907a:	2b00      	cmp	r3, #0
 800907c:	d01a      	beq.n	80090b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f003 0304 	and.w	r3, r3, #4
 8009088:	2b00      	cmp	r3, #0
 800908a:	d013      	beq.n	80090b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	681a      	ldr	r2, [r3, #0]
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f022 0204 	bic.w	r2, r2, #4
 800909a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090a0:	2208      	movs	r2, #8
 80090a2:	409a      	lsls	r2, r3
 80090a4:	693b      	ldr	r3, [r7, #16]
 80090a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090ac:	f043 0201 	orr.w	r2, r3, #1
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090b8:	2201      	movs	r2, #1
 80090ba:	409a      	lsls	r2, r3
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	4013      	ands	r3, r2
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d012      	beq.n	80090ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	695b      	ldr	r3, [r3, #20]
 80090ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d00b      	beq.n	80090ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090d6:	2201      	movs	r2, #1
 80090d8:	409a      	lsls	r2, r3
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090e2:	f043 0202 	orr.w	r2, r3, #2
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090ee:	2204      	movs	r2, #4
 80090f0:	409a      	lsls	r2, r3
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	4013      	ands	r3, r2
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d012      	beq.n	8009120 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f003 0302 	and.w	r3, r3, #2
 8009104:	2b00      	cmp	r3, #0
 8009106:	d00b      	beq.n	8009120 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800910c:	2204      	movs	r2, #4
 800910e:	409a      	lsls	r2, r3
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009118:	f043 0204 	orr.w	r2, r3, #4
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009124:	2210      	movs	r2, #16
 8009126:	409a      	lsls	r2, r3
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	4013      	ands	r3, r2
 800912c:	2b00      	cmp	r3, #0
 800912e:	d043      	beq.n	80091b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f003 0308 	and.w	r3, r3, #8
 800913a:	2b00      	cmp	r3, #0
 800913c:	d03c      	beq.n	80091b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009142:	2210      	movs	r2, #16
 8009144:	409a      	lsls	r2, r3
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009154:	2b00      	cmp	r3, #0
 8009156:	d018      	beq.n	800918a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009162:	2b00      	cmp	r3, #0
 8009164:	d108      	bne.n	8009178 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800916a:	2b00      	cmp	r3, #0
 800916c:	d024      	beq.n	80091b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	4798      	blx	r3
 8009176:	e01f      	b.n	80091b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800917c:	2b00      	cmp	r3, #0
 800917e:	d01b      	beq.n	80091b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	4798      	blx	r3
 8009188:	e016      	b.n	80091b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009194:	2b00      	cmp	r3, #0
 8009196:	d107      	bne.n	80091a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	681a      	ldr	r2, [r3, #0]
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f022 0208 	bic.w	r2, r2, #8
 80091a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d003      	beq.n	80091b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091bc:	2220      	movs	r2, #32
 80091be:	409a      	lsls	r2, r3
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	4013      	ands	r3, r2
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	f000 808e 	beq.w	80092e6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f003 0310 	and.w	r3, r3, #16
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	f000 8086 	beq.w	80092e6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091de:	2220      	movs	r2, #32
 80091e0:	409a      	lsls	r2, r3
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80091ec:	b2db      	uxtb	r3, r3
 80091ee:	2b05      	cmp	r3, #5
 80091f0:	d136      	bne.n	8009260 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	681a      	ldr	r2, [r3, #0]
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f022 0216 	bic.w	r2, r2, #22
 8009200:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	695a      	ldr	r2, [r3, #20]
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009210:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009216:	2b00      	cmp	r3, #0
 8009218:	d103      	bne.n	8009222 <HAL_DMA_IRQHandler+0x1da>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800921e:	2b00      	cmp	r3, #0
 8009220:	d007      	beq.n	8009232 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	681a      	ldr	r2, [r3, #0]
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f022 0208 	bic.w	r2, r2, #8
 8009230:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009236:	223f      	movs	r2, #63	; 0x3f
 8009238:	409a      	lsls	r2, r3
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2200      	movs	r2, #0
 8009242:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2201      	movs	r2, #1
 800924a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009252:	2b00      	cmp	r3, #0
 8009254:	d07d      	beq.n	8009352 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	4798      	blx	r3
        }
        return;
 800925e:	e078      	b.n	8009352 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800926a:	2b00      	cmp	r3, #0
 800926c:	d01c      	beq.n	80092a8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009278:	2b00      	cmp	r3, #0
 800927a:	d108      	bne.n	800928e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009280:	2b00      	cmp	r3, #0
 8009282:	d030      	beq.n	80092e6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	4798      	blx	r3
 800928c:	e02b      	b.n	80092e6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009292:	2b00      	cmp	r3, #0
 8009294:	d027      	beq.n	80092e6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	4798      	blx	r3
 800929e:	e022      	b.n	80092e6 <HAL_DMA_IRQHandler+0x29e>
 80092a0:	20000cb4 	.word	0x20000cb4
 80092a4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d10f      	bne.n	80092d6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	681a      	ldr	r2, [r3, #0]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f022 0210 	bic.w	r2, r2, #16
 80092c4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2200      	movs	r2, #0
 80092ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2201      	movs	r2, #1
 80092d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d003      	beq.n	80092e6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d032      	beq.n	8009354 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092f2:	f003 0301 	and.w	r3, r3, #1
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d022      	beq.n	8009340 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2205      	movs	r2, #5
 80092fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	681a      	ldr	r2, [r3, #0]
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f022 0201 	bic.w	r2, r2, #1
 8009310:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	3301      	adds	r3, #1
 8009316:	60bb      	str	r3, [r7, #8]
 8009318:	697a      	ldr	r2, [r7, #20]
 800931a:	429a      	cmp	r2, r3
 800931c:	d307      	bcc.n	800932e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f003 0301 	and.w	r3, r3, #1
 8009328:	2b00      	cmp	r3, #0
 800932a:	d1f2      	bne.n	8009312 <HAL_DMA_IRQHandler+0x2ca>
 800932c:	e000      	b.n	8009330 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800932e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2200      	movs	r2, #0
 8009334:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2201      	movs	r2, #1
 800933c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009344:	2b00      	cmp	r3, #0
 8009346:	d005      	beq.n	8009354 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	4798      	blx	r3
 8009350:	e000      	b.n	8009354 <HAL_DMA_IRQHandler+0x30c>
        return;
 8009352:	bf00      	nop
    }
  }
}
 8009354:	3718      	adds	r7, #24
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}
 800935a:	bf00      	nop

0800935c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800935c:	b480      	push	{r7}
 800935e:	b083      	sub	sp, #12
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800936a:	b2db      	uxtb	r3, r3
}
 800936c:	4618      	mov	r0, r3
 800936e:	370c      	adds	r7, #12
 8009370:	46bd      	mov	sp, r7
 8009372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009376:	4770      	bx	lr

08009378 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009378:	b480      	push	{r7}
 800937a:	b085      	sub	sp, #20
 800937c:	af00      	add	r7, sp, #0
 800937e:	60f8      	str	r0, [r7, #12]
 8009380:	60b9      	str	r1, [r7, #8]
 8009382:	607a      	str	r2, [r7, #4]
 8009384:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	681a      	ldr	r2, [r3, #0]
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009394:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	683a      	ldr	r2, [r7, #0]
 800939c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	689b      	ldr	r3, [r3, #8]
 80093a2:	2b40      	cmp	r3, #64	; 0x40
 80093a4:	d108      	bne.n	80093b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	687a      	ldr	r2, [r7, #4]
 80093ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	68ba      	ldr	r2, [r7, #8]
 80093b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80093b6:	e007      	b.n	80093c8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	68ba      	ldr	r2, [r7, #8]
 80093be:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	687a      	ldr	r2, [r7, #4]
 80093c6:	60da      	str	r2, [r3, #12]
}
 80093c8:	bf00      	nop
 80093ca:	3714      	adds	r7, #20
 80093cc:	46bd      	mov	sp, r7
 80093ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d2:	4770      	bx	lr

080093d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80093d4:	b480      	push	{r7}
 80093d6:	b085      	sub	sp, #20
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	b2db      	uxtb	r3, r3
 80093e2:	3b10      	subs	r3, #16
 80093e4:	4a14      	ldr	r2, [pc, #80]	; (8009438 <DMA_CalcBaseAndBitshift+0x64>)
 80093e6:	fba2 2303 	umull	r2, r3, r2, r3
 80093ea:	091b      	lsrs	r3, r3, #4
 80093ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80093ee:	4a13      	ldr	r2, [pc, #76]	; (800943c <DMA_CalcBaseAndBitshift+0x68>)
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	4413      	add	r3, r2
 80093f4:	781b      	ldrb	r3, [r3, #0]
 80093f6:	461a      	mov	r2, r3
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	2b03      	cmp	r3, #3
 8009400:	d909      	bls.n	8009416 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800940a:	f023 0303 	bic.w	r3, r3, #3
 800940e:	1d1a      	adds	r2, r3, #4
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	659a      	str	r2, [r3, #88]	; 0x58
 8009414:	e007      	b.n	8009426 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800941e:	f023 0303 	bic.w	r3, r3, #3
 8009422:	687a      	ldr	r2, [r7, #4]
 8009424:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800942a:	4618      	mov	r0, r3
 800942c:	3714      	adds	r7, #20
 800942e:	46bd      	mov	sp, r7
 8009430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009434:	4770      	bx	lr
 8009436:	bf00      	nop
 8009438:	aaaaaaab 	.word	0xaaaaaaab
 800943c:	080196f0 	.word	0x080196f0

08009440 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009440:	b480      	push	{r7}
 8009442:	b085      	sub	sp, #20
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009448:	2300      	movs	r3, #0
 800944a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009450:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	699b      	ldr	r3, [r3, #24]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d11f      	bne.n	800949a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	2b03      	cmp	r3, #3
 800945e:	d855      	bhi.n	800950c <DMA_CheckFifoParam+0xcc>
 8009460:	a201      	add	r2, pc, #4	; (adr r2, 8009468 <DMA_CheckFifoParam+0x28>)
 8009462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009466:	bf00      	nop
 8009468:	08009479 	.word	0x08009479
 800946c:	0800948b 	.word	0x0800948b
 8009470:	08009479 	.word	0x08009479
 8009474:	0800950d 	.word	0x0800950d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800947c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009480:	2b00      	cmp	r3, #0
 8009482:	d045      	beq.n	8009510 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8009484:	2301      	movs	r3, #1
 8009486:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009488:	e042      	b.n	8009510 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800948e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009492:	d13f      	bne.n	8009514 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8009494:	2301      	movs	r3, #1
 8009496:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009498:	e03c      	b.n	8009514 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	699b      	ldr	r3, [r3, #24]
 800949e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094a2:	d121      	bne.n	80094e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	2b03      	cmp	r3, #3
 80094a8:	d836      	bhi.n	8009518 <DMA_CheckFifoParam+0xd8>
 80094aa:	a201      	add	r2, pc, #4	; (adr r2, 80094b0 <DMA_CheckFifoParam+0x70>)
 80094ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094b0:	080094c1 	.word	0x080094c1
 80094b4:	080094c7 	.word	0x080094c7
 80094b8:	080094c1 	.word	0x080094c1
 80094bc:	080094d9 	.word	0x080094d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80094c0:	2301      	movs	r3, #1
 80094c2:	73fb      	strb	r3, [r7, #15]
      break;
 80094c4:	e02f      	b.n	8009526 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d024      	beq.n	800951c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80094d2:	2301      	movs	r3, #1
 80094d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80094d6:	e021      	b.n	800951c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094dc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80094e0:	d11e      	bne.n	8009520 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80094e2:	2301      	movs	r3, #1
 80094e4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80094e6:	e01b      	b.n	8009520 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	2b02      	cmp	r3, #2
 80094ec:	d902      	bls.n	80094f4 <DMA_CheckFifoParam+0xb4>
 80094ee:	2b03      	cmp	r3, #3
 80094f0:	d003      	beq.n	80094fa <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80094f2:	e018      	b.n	8009526 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80094f4:	2301      	movs	r3, #1
 80094f6:	73fb      	strb	r3, [r7, #15]
      break;
 80094f8:	e015      	b.n	8009526 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009502:	2b00      	cmp	r3, #0
 8009504:	d00e      	beq.n	8009524 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8009506:	2301      	movs	r3, #1
 8009508:	73fb      	strb	r3, [r7, #15]
      break;
 800950a:	e00b      	b.n	8009524 <DMA_CheckFifoParam+0xe4>
      break;
 800950c:	bf00      	nop
 800950e:	e00a      	b.n	8009526 <DMA_CheckFifoParam+0xe6>
      break;
 8009510:	bf00      	nop
 8009512:	e008      	b.n	8009526 <DMA_CheckFifoParam+0xe6>
      break;
 8009514:	bf00      	nop
 8009516:	e006      	b.n	8009526 <DMA_CheckFifoParam+0xe6>
      break;
 8009518:	bf00      	nop
 800951a:	e004      	b.n	8009526 <DMA_CheckFifoParam+0xe6>
      break;
 800951c:	bf00      	nop
 800951e:	e002      	b.n	8009526 <DMA_CheckFifoParam+0xe6>
      break;   
 8009520:	bf00      	nop
 8009522:	e000      	b.n	8009526 <DMA_CheckFifoParam+0xe6>
      break;
 8009524:	bf00      	nop
    }
  } 
  
  return status; 
 8009526:	7bfb      	ldrb	r3, [r7, #15]
}
 8009528:	4618      	mov	r0, r3
 800952a:	3714      	adds	r7, #20
 800952c:	46bd      	mov	sp, r7
 800952e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009532:	4770      	bx	lr

08009534 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009534:	b480      	push	{r7}
 8009536:	b089      	sub	sp, #36	; 0x24
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
 800953c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800953e:	2300      	movs	r3, #0
 8009540:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8009542:	2300      	movs	r3, #0
 8009544:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8009546:	2300      	movs	r3, #0
 8009548:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800954a:	2300      	movs	r3, #0
 800954c:	61fb      	str	r3, [r7, #28]
 800954e:	e16b      	b.n	8009828 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009550:	2201      	movs	r2, #1
 8009552:	69fb      	ldr	r3, [r7, #28]
 8009554:	fa02 f303 	lsl.w	r3, r2, r3
 8009558:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	697a      	ldr	r2, [r7, #20]
 8009560:	4013      	ands	r3, r2
 8009562:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009564:	693a      	ldr	r2, [r7, #16]
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	429a      	cmp	r2, r3
 800956a:	f040 815a 	bne.w	8009822 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	685b      	ldr	r3, [r3, #4]
 8009572:	2b01      	cmp	r3, #1
 8009574:	d00b      	beq.n	800958e <HAL_GPIO_Init+0x5a>
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	685b      	ldr	r3, [r3, #4]
 800957a:	2b02      	cmp	r3, #2
 800957c:	d007      	beq.n	800958e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009582:	2b11      	cmp	r3, #17
 8009584:	d003      	beq.n	800958e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	685b      	ldr	r3, [r3, #4]
 800958a:	2b12      	cmp	r3, #18
 800958c:	d130      	bne.n	80095f0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	689b      	ldr	r3, [r3, #8]
 8009592:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009594:	69fb      	ldr	r3, [r7, #28]
 8009596:	005b      	lsls	r3, r3, #1
 8009598:	2203      	movs	r2, #3
 800959a:	fa02 f303 	lsl.w	r3, r2, r3
 800959e:	43db      	mvns	r3, r3
 80095a0:	69ba      	ldr	r2, [r7, #24]
 80095a2:	4013      	ands	r3, r2
 80095a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	68da      	ldr	r2, [r3, #12]
 80095aa:	69fb      	ldr	r3, [r7, #28]
 80095ac:	005b      	lsls	r3, r3, #1
 80095ae:	fa02 f303 	lsl.w	r3, r2, r3
 80095b2:	69ba      	ldr	r2, [r7, #24]
 80095b4:	4313      	orrs	r3, r2
 80095b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	69ba      	ldr	r2, [r7, #24]
 80095bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	685b      	ldr	r3, [r3, #4]
 80095c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80095c4:	2201      	movs	r2, #1
 80095c6:	69fb      	ldr	r3, [r7, #28]
 80095c8:	fa02 f303 	lsl.w	r3, r2, r3
 80095cc:	43db      	mvns	r3, r3
 80095ce:	69ba      	ldr	r2, [r7, #24]
 80095d0:	4013      	ands	r3, r2
 80095d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	685b      	ldr	r3, [r3, #4]
 80095d8:	091b      	lsrs	r3, r3, #4
 80095da:	f003 0201 	and.w	r2, r3, #1
 80095de:	69fb      	ldr	r3, [r7, #28]
 80095e0:	fa02 f303 	lsl.w	r3, r2, r3
 80095e4:	69ba      	ldr	r2, [r7, #24]
 80095e6:	4313      	orrs	r3, r2
 80095e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	69ba      	ldr	r2, [r7, #24]
 80095ee:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	68db      	ldr	r3, [r3, #12]
 80095f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80095f6:	69fb      	ldr	r3, [r7, #28]
 80095f8:	005b      	lsls	r3, r3, #1
 80095fa:	2203      	movs	r2, #3
 80095fc:	fa02 f303 	lsl.w	r3, r2, r3
 8009600:	43db      	mvns	r3, r3
 8009602:	69ba      	ldr	r2, [r7, #24]
 8009604:	4013      	ands	r3, r2
 8009606:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	689a      	ldr	r2, [r3, #8]
 800960c:	69fb      	ldr	r3, [r7, #28]
 800960e:	005b      	lsls	r3, r3, #1
 8009610:	fa02 f303 	lsl.w	r3, r2, r3
 8009614:	69ba      	ldr	r2, [r7, #24]
 8009616:	4313      	orrs	r3, r2
 8009618:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	69ba      	ldr	r2, [r7, #24]
 800961e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	685b      	ldr	r3, [r3, #4]
 8009624:	2b02      	cmp	r3, #2
 8009626:	d003      	beq.n	8009630 <HAL_GPIO_Init+0xfc>
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	685b      	ldr	r3, [r3, #4]
 800962c:	2b12      	cmp	r3, #18
 800962e:	d123      	bne.n	8009678 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009630:	69fb      	ldr	r3, [r7, #28]
 8009632:	08da      	lsrs	r2, r3, #3
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	3208      	adds	r2, #8
 8009638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800963c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800963e:	69fb      	ldr	r3, [r7, #28]
 8009640:	f003 0307 	and.w	r3, r3, #7
 8009644:	009b      	lsls	r3, r3, #2
 8009646:	220f      	movs	r2, #15
 8009648:	fa02 f303 	lsl.w	r3, r2, r3
 800964c:	43db      	mvns	r3, r3
 800964e:	69ba      	ldr	r2, [r7, #24]
 8009650:	4013      	ands	r3, r2
 8009652:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	691a      	ldr	r2, [r3, #16]
 8009658:	69fb      	ldr	r3, [r7, #28]
 800965a:	f003 0307 	and.w	r3, r3, #7
 800965e:	009b      	lsls	r3, r3, #2
 8009660:	fa02 f303 	lsl.w	r3, r2, r3
 8009664:	69ba      	ldr	r2, [r7, #24]
 8009666:	4313      	orrs	r3, r2
 8009668:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800966a:	69fb      	ldr	r3, [r7, #28]
 800966c:	08da      	lsrs	r2, r3, #3
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	3208      	adds	r2, #8
 8009672:	69b9      	ldr	r1, [r7, #24]
 8009674:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800967e:	69fb      	ldr	r3, [r7, #28]
 8009680:	005b      	lsls	r3, r3, #1
 8009682:	2203      	movs	r2, #3
 8009684:	fa02 f303 	lsl.w	r3, r2, r3
 8009688:	43db      	mvns	r3, r3
 800968a:	69ba      	ldr	r2, [r7, #24]
 800968c:	4013      	ands	r3, r2
 800968e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	685b      	ldr	r3, [r3, #4]
 8009694:	f003 0203 	and.w	r2, r3, #3
 8009698:	69fb      	ldr	r3, [r7, #28]
 800969a:	005b      	lsls	r3, r3, #1
 800969c:	fa02 f303 	lsl.w	r3, r2, r3
 80096a0:	69ba      	ldr	r2, [r7, #24]
 80096a2:	4313      	orrs	r3, r2
 80096a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	69ba      	ldr	r2, [r7, #24]
 80096aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	685b      	ldr	r3, [r3, #4]
 80096b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	f000 80b4 	beq.w	8009822 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80096ba:	2300      	movs	r3, #0
 80096bc:	60fb      	str	r3, [r7, #12]
 80096be:	4b5f      	ldr	r3, [pc, #380]	; (800983c <HAL_GPIO_Init+0x308>)
 80096c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096c2:	4a5e      	ldr	r2, [pc, #376]	; (800983c <HAL_GPIO_Init+0x308>)
 80096c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80096c8:	6453      	str	r3, [r2, #68]	; 0x44
 80096ca:	4b5c      	ldr	r3, [pc, #368]	; (800983c <HAL_GPIO_Init+0x308>)
 80096cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80096d2:	60fb      	str	r3, [r7, #12]
 80096d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80096d6:	4a5a      	ldr	r2, [pc, #360]	; (8009840 <HAL_GPIO_Init+0x30c>)
 80096d8:	69fb      	ldr	r3, [r7, #28]
 80096da:	089b      	lsrs	r3, r3, #2
 80096dc:	3302      	adds	r3, #2
 80096de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80096e4:	69fb      	ldr	r3, [r7, #28]
 80096e6:	f003 0303 	and.w	r3, r3, #3
 80096ea:	009b      	lsls	r3, r3, #2
 80096ec:	220f      	movs	r2, #15
 80096ee:	fa02 f303 	lsl.w	r3, r2, r3
 80096f2:	43db      	mvns	r3, r3
 80096f4:	69ba      	ldr	r2, [r7, #24]
 80096f6:	4013      	ands	r3, r2
 80096f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	4a51      	ldr	r2, [pc, #324]	; (8009844 <HAL_GPIO_Init+0x310>)
 80096fe:	4293      	cmp	r3, r2
 8009700:	d02b      	beq.n	800975a <HAL_GPIO_Init+0x226>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	4a50      	ldr	r2, [pc, #320]	; (8009848 <HAL_GPIO_Init+0x314>)
 8009706:	4293      	cmp	r3, r2
 8009708:	d025      	beq.n	8009756 <HAL_GPIO_Init+0x222>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	4a4f      	ldr	r2, [pc, #316]	; (800984c <HAL_GPIO_Init+0x318>)
 800970e:	4293      	cmp	r3, r2
 8009710:	d01f      	beq.n	8009752 <HAL_GPIO_Init+0x21e>
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	4a4e      	ldr	r2, [pc, #312]	; (8009850 <HAL_GPIO_Init+0x31c>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d019      	beq.n	800974e <HAL_GPIO_Init+0x21a>
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	4a4d      	ldr	r2, [pc, #308]	; (8009854 <HAL_GPIO_Init+0x320>)
 800971e:	4293      	cmp	r3, r2
 8009720:	d013      	beq.n	800974a <HAL_GPIO_Init+0x216>
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	4a4c      	ldr	r2, [pc, #304]	; (8009858 <HAL_GPIO_Init+0x324>)
 8009726:	4293      	cmp	r3, r2
 8009728:	d00d      	beq.n	8009746 <HAL_GPIO_Init+0x212>
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	4a4b      	ldr	r2, [pc, #300]	; (800985c <HAL_GPIO_Init+0x328>)
 800972e:	4293      	cmp	r3, r2
 8009730:	d007      	beq.n	8009742 <HAL_GPIO_Init+0x20e>
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	4a4a      	ldr	r2, [pc, #296]	; (8009860 <HAL_GPIO_Init+0x32c>)
 8009736:	4293      	cmp	r3, r2
 8009738:	d101      	bne.n	800973e <HAL_GPIO_Init+0x20a>
 800973a:	2307      	movs	r3, #7
 800973c:	e00e      	b.n	800975c <HAL_GPIO_Init+0x228>
 800973e:	2308      	movs	r3, #8
 8009740:	e00c      	b.n	800975c <HAL_GPIO_Init+0x228>
 8009742:	2306      	movs	r3, #6
 8009744:	e00a      	b.n	800975c <HAL_GPIO_Init+0x228>
 8009746:	2305      	movs	r3, #5
 8009748:	e008      	b.n	800975c <HAL_GPIO_Init+0x228>
 800974a:	2304      	movs	r3, #4
 800974c:	e006      	b.n	800975c <HAL_GPIO_Init+0x228>
 800974e:	2303      	movs	r3, #3
 8009750:	e004      	b.n	800975c <HAL_GPIO_Init+0x228>
 8009752:	2302      	movs	r3, #2
 8009754:	e002      	b.n	800975c <HAL_GPIO_Init+0x228>
 8009756:	2301      	movs	r3, #1
 8009758:	e000      	b.n	800975c <HAL_GPIO_Init+0x228>
 800975a:	2300      	movs	r3, #0
 800975c:	69fa      	ldr	r2, [r7, #28]
 800975e:	f002 0203 	and.w	r2, r2, #3
 8009762:	0092      	lsls	r2, r2, #2
 8009764:	4093      	lsls	r3, r2
 8009766:	69ba      	ldr	r2, [r7, #24]
 8009768:	4313      	orrs	r3, r2
 800976a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800976c:	4934      	ldr	r1, [pc, #208]	; (8009840 <HAL_GPIO_Init+0x30c>)
 800976e:	69fb      	ldr	r3, [r7, #28]
 8009770:	089b      	lsrs	r3, r3, #2
 8009772:	3302      	adds	r3, #2
 8009774:	69ba      	ldr	r2, [r7, #24]
 8009776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800977a:	4b3a      	ldr	r3, [pc, #232]	; (8009864 <HAL_GPIO_Init+0x330>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009780:	693b      	ldr	r3, [r7, #16]
 8009782:	43db      	mvns	r3, r3
 8009784:	69ba      	ldr	r2, [r7, #24]
 8009786:	4013      	ands	r3, r2
 8009788:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	685b      	ldr	r3, [r3, #4]
 800978e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009792:	2b00      	cmp	r3, #0
 8009794:	d003      	beq.n	800979e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8009796:	69ba      	ldr	r2, [r7, #24]
 8009798:	693b      	ldr	r3, [r7, #16]
 800979a:	4313      	orrs	r3, r2
 800979c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800979e:	4a31      	ldr	r2, [pc, #196]	; (8009864 <HAL_GPIO_Init+0x330>)
 80097a0:	69bb      	ldr	r3, [r7, #24]
 80097a2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80097a4:	4b2f      	ldr	r3, [pc, #188]	; (8009864 <HAL_GPIO_Init+0x330>)
 80097a6:	685b      	ldr	r3, [r3, #4]
 80097a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80097aa:	693b      	ldr	r3, [r7, #16]
 80097ac:	43db      	mvns	r3, r3
 80097ae:	69ba      	ldr	r2, [r7, #24]
 80097b0:	4013      	ands	r3, r2
 80097b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	685b      	ldr	r3, [r3, #4]
 80097b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d003      	beq.n	80097c8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80097c0:	69ba      	ldr	r2, [r7, #24]
 80097c2:	693b      	ldr	r3, [r7, #16]
 80097c4:	4313      	orrs	r3, r2
 80097c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80097c8:	4a26      	ldr	r2, [pc, #152]	; (8009864 <HAL_GPIO_Init+0x330>)
 80097ca:	69bb      	ldr	r3, [r7, #24]
 80097cc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80097ce:	4b25      	ldr	r3, [pc, #148]	; (8009864 <HAL_GPIO_Init+0x330>)
 80097d0:	689b      	ldr	r3, [r3, #8]
 80097d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80097d4:	693b      	ldr	r3, [r7, #16]
 80097d6:	43db      	mvns	r3, r3
 80097d8:	69ba      	ldr	r2, [r7, #24]
 80097da:	4013      	ands	r3, r2
 80097dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	685b      	ldr	r3, [r3, #4]
 80097e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d003      	beq.n	80097f2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80097ea:	69ba      	ldr	r2, [r7, #24]
 80097ec:	693b      	ldr	r3, [r7, #16]
 80097ee:	4313      	orrs	r3, r2
 80097f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80097f2:	4a1c      	ldr	r2, [pc, #112]	; (8009864 <HAL_GPIO_Init+0x330>)
 80097f4:	69bb      	ldr	r3, [r7, #24]
 80097f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80097f8:	4b1a      	ldr	r3, [pc, #104]	; (8009864 <HAL_GPIO_Init+0x330>)
 80097fa:	68db      	ldr	r3, [r3, #12]
 80097fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80097fe:	693b      	ldr	r3, [r7, #16]
 8009800:	43db      	mvns	r3, r3
 8009802:	69ba      	ldr	r2, [r7, #24]
 8009804:	4013      	ands	r3, r2
 8009806:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	685b      	ldr	r3, [r3, #4]
 800980c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009810:	2b00      	cmp	r3, #0
 8009812:	d003      	beq.n	800981c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8009814:	69ba      	ldr	r2, [r7, #24]
 8009816:	693b      	ldr	r3, [r7, #16]
 8009818:	4313      	orrs	r3, r2
 800981a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800981c:	4a11      	ldr	r2, [pc, #68]	; (8009864 <HAL_GPIO_Init+0x330>)
 800981e:	69bb      	ldr	r3, [r7, #24]
 8009820:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009822:	69fb      	ldr	r3, [r7, #28]
 8009824:	3301      	adds	r3, #1
 8009826:	61fb      	str	r3, [r7, #28]
 8009828:	69fb      	ldr	r3, [r7, #28]
 800982a:	2b0f      	cmp	r3, #15
 800982c:	f67f ae90 	bls.w	8009550 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009830:	bf00      	nop
 8009832:	3724      	adds	r7, #36	; 0x24
 8009834:	46bd      	mov	sp, r7
 8009836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983a:	4770      	bx	lr
 800983c:	40023800 	.word	0x40023800
 8009840:	40013800 	.word	0x40013800
 8009844:	40020000 	.word	0x40020000
 8009848:	40020400 	.word	0x40020400
 800984c:	40020800 	.word	0x40020800
 8009850:	40020c00 	.word	0x40020c00
 8009854:	40021000 	.word	0x40021000
 8009858:	40021400 	.word	0x40021400
 800985c:	40021800 	.word	0x40021800
 8009860:	40021c00 	.word	0x40021c00
 8009864:	40013c00 	.word	0x40013c00

08009868 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009868:	b480      	push	{r7}
 800986a:	b083      	sub	sp, #12
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
 8009870:	460b      	mov	r3, r1
 8009872:	807b      	strh	r3, [r7, #2]
 8009874:	4613      	mov	r3, r2
 8009876:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009878:	787b      	ldrb	r3, [r7, #1]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d003      	beq.n	8009886 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800987e:	887a      	ldrh	r2, [r7, #2]
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009884:	e003      	b.n	800988e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009886:	887b      	ldrh	r3, [r7, #2]
 8009888:	041a      	lsls	r2, r3, #16
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	619a      	str	r2, [r3, #24]
}
 800988e:	bf00      	nop
 8009890:	370c      	adds	r7, #12
 8009892:	46bd      	mov	sp, r7
 8009894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009898:	4770      	bx	lr
	...

0800989c <HAL_NOR_Init>:
  * @param  Timing pointer to NOR control timing structure 
  * @param  ExtTiming pointer to NOR extended mode timing structure    
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NOR_Init(NOR_HandleTypeDef *hnor, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b084      	sub	sp, #16
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	60f8      	str	r0, [r7, #12]
 80098a4:	60b9      	str	r1, [r7, #8]
 80098a6:	607a      	str	r2, [r7, #4]
  /* Check the NOR handle parameter */
  if(hnor == NULL)
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d101      	bne.n	80098b2 <HAL_NOR_Init+0x16>
  {
     return HAL_ERROR;
 80098ae:	2301      	movs	r3, #1
 80098b0:	e043      	b.n	800993a <HAL_NOR_Init+0x9e>
  }
  
  if(hnor->State == HAL_NOR_STATE_RESET)
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80098b8:	b2db      	uxtb	r3, r3
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d106      	bne.n	80098cc <HAL_NOR_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnor->Lock = HAL_UNLOCKED;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	2200      	movs	r2, #0
 80098c2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hnor->MspInitCallback(hnor);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NOR_MspInit(hnor);
 80098c6:	68f8      	ldr	r0, [r7, #12]
 80098c8:	f7f9 f942 	bl	8002b50 <HAL_NOR_MspInit>
#endif /* (USE_HAL_NOR_REGISTER_CALLBACKS) */
  }
  
  /* Initialize NOR control Interface */
  FMC_NORSRAM_Init(hnor->Instance, &(hnor->Init));
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681a      	ldr	r2, [r3, #0]
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	3308      	adds	r3, #8
 80098d4:	4619      	mov	r1, r3
 80098d6:	4610      	mov	r0, r2
 80098d8:	f003 f810 	bl	800c8fc <FSMC_NORSRAM_Init>

  /* Initialize NOR timing Interface */
  FMC_NORSRAM_Timing_Init(hnor->Instance, Timing, hnor->Init.NSBank); 
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	6818      	ldr	r0, [r3, #0]
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	689b      	ldr	r3, [r3, #8]
 80098e4:	461a      	mov	r2, r3
 80098e6:	68b9      	ldr	r1, [r7, #8]
 80098e8:	f003 f85a 	bl	800c9a0 <FSMC_NORSRAM_Timing_Init>

  /* Initialize NOR extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hnor->Extended, ExtTiming, hnor->Init.NSBank, hnor->Init.ExtendedMode);
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	6858      	ldr	r0, [r3, #4]
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	689a      	ldr	r2, [r3, #8]
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098f8:	6879      	ldr	r1, [r7, #4]
 80098fa:	f003 f88f 	bl	800ca1c <FSMC_NORSRAM_Extended_Timing_Init>

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hnor->Instance, hnor->Init.NSBank);
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	68fa      	ldr	r2, [r7, #12]
 8009904:	6892      	ldr	r2, [r2, #8]
 8009906:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	68fa      	ldr	r2, [r7, #12]
 8009910:	6892      	ldr	r2, [r2, #8]
 8009912:	f041 0101 	orr.w	r1, r1, #1
 8009916:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize NOR Memory Data Width*/
  if (hnor->Init.MemoryDataWidth == FMC_NORSRAM_MEM_BUS_WIDTH_8)
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	695b      	ldr	r3, [r3, #20]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d103      	bne.n	800992a <HAL_NOR_Init+0x8e>
  {
    uwNORMemoryDataWidth = NOR_MEMORY_8B;
 8009922:	4b08      	ldr	r3, [pc, #32]	; (8009944 <HAL_NOR_Init+0xa8>)
 8009924:	2200      	movs	r2, #0
 8009926:	601a      	str	r2, [r3, #0]
 8009928:	e002      	b.n	8009930 <HAL_NOR_Init+0x94>
  }
  else
  {
    uwNORMemoryDataWidth = NOR_MEMORY_16B;
 800992a:	4b06      	ldr	r3, [pc, #24]	; (8009944 <HAL_NOR_Init+0xa8>)
 800992c:	2201      	movs	r2, #1
 800992e:	601a      	str	r2, [r3, #0]
  }

  /* Check the NOR controller state */
  hnor->State = HAL_NOR_STATE_READY; 
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	2201      	movs	r2, #1
 8009934:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  return HAL_OK;
 8009938:	2300      	movs	r3, #0
}
 800993a:	4618      	mov	r0, r3
 800993c:	3710      	adds	r7, #16
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}
 8009942:	bf00      	nop
 8009944:	20001480 	.word	0x20001480

08009948 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800994a:	b08f      	sub	sp, #60	; 0x3c
 800994c:	af0a      	add	r7, sp, #40	; 0x28
 800994e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d101      	bne.n	800995a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009956:	2301      	movs	r3, #1
 8009958:	e10f      	b.n	8009b7a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8009966:	b2db      	uxtb	r3, r3
 8009968:	2b00      	cmp	r3, #0
 800996a:	d106      	bne.n	800997a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2200      	movs	r2, #0
 8009970:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	f009 fa79 	bl	8012e6c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2203      	movs	r2, #3
 800997e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8009982:	68bb      	ldr	r3, [r7, #8]
 8009984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800998a:	2b00      	cmp	r3, #0
 800998c:	d102      	bne.n	8009994 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2200      	movs	r2, #0
 8009992:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	4618      	mov	r0, r3
 800999a:	f003 f994 	bl	800ccc6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	603b      	str	r3, [r7, #0]
 80099a4:	687e      	ldr	r6, [r7, #4]
 80099a6:	466d      	mov	r5, sp
 80099a8:	f106 0410 	add.w	r4, r6, #16
 80099ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80099ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80099b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80099b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80099b4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80099b8:	e885 0003 	stmia.w	r5, {r0, r1}
 80099bc:	1d33      	adds	r3, r6, #4
 80099be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80099c0:	6838      	ldr	r0, [r7, #0]
 80099c2:	f003 f86b 	bl	800ca9c <USB_CoreInit>
 80099c6:	4603      	mov	r3, r0
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d005      	beq.n	80099d8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2202      	movs	r2, #2
 80099d0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80099d4:	2301      	movs	r3, #1
 80099d6:	e0d0      	b.n	8009b7a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	2100      	movs	r1, #0
 80099de:	4618      	mov	r0, r3
 80099e0:	f003 f982 	bl	800cce8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80099e4:	2300      	movs	r3, #0
 80099e6:	73fb      	strb	r3, [r7, #15]
 80099e8:	e04a      	b.n	8009a80 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80099ea:	7bfa      	ldrb	r2, [r7, #15]
 80099ec:	6879      	ldr	r1, [r7, #4]
 80099ee:	4613      	mov	r3, r2
 80099f0:	00db      	lsls	r3, r3, #3
 80099f2:	1a9b      	subs	r3, r3, r2
 80099f4:	009b      	lsls	r3, r3, #2
 80099f6:	440b      	add	r3, r1
 80099f8:	333d      	adds	r3, #61	; 0x3d
 80099fa:	2201      	movs	r2, #1
 80099fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80099fe:	7bfa      	ldrb	r2, [r7, #15]
 8009a00:	6879      	ldr	r1, [r7, #4]
 8009a02:	4613      	mov	r3, r2
 8009a04:	00db      	lsls	r3, r3, #3
 8009a06:	1a9b      	subs	r3, r3, r2
 8009a08:	009b      	lsls	r3, r3, #2
 8009a0a:	440b      	add	r3, r1
 8009a0c:	333c      	adds	r3, #60	; 0x3c
 8009a0e:	7bfa      	ldrb	r2, [r7, #15]
 8009a10:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8009a12:	7bfa      	ldrb	r2, [r7, #15]
 8009a14:	7bfb      	ldrb	r3, [r7, #15]
 8009a16:	b298      	uxth	r0, r3
 8009a18:	6879      	ldr	r1, [r7, #4]
 8009a1a:	4613      	mov	r3, r2
 8009a1c:	00db      	lsls	r3, r3, #3
 8009a1e:	1a9b      	subs	r3, r3, r2
 8009a20:	009b      	lsls	r3, r3, #2
 8009a22:	440b      	add	r3, r1
 8009a24:	3342      	adds	r3, #66	; 0x42
 8009a26:	4602      	mov	r2, r0
 8009a28:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009a2a:	7bfa      	ldrb	r2, [r7, #15]
 8009a2c:	6879      	ldr	r1, [r7, #4]
 8009a2e:	4613      	mov	r3, r2
 8009a30:	00db      	lsls	r3, r3, #3
 8009a32:	1a9b      	subs	r3, r3, r2
 8009a34:	009b      	lsls	r3, r3, #2
 8009a36:	440b      	add	r3, r1
 8009a38:	333f      	adds	r3, #63	; 0x3f
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009a3e:	7bfa      	ldrb	r2, [r7, #15]
 8009a40:	6879      	ldr	r1, [r7, #4]
 8009a42:	4613      	mov	r3, r2
 8009a44:	00db      	lsls	r3, r3, #3
 8009a46:	1a9b      	subs	r3, r3, r2
 8009a48:	009b      	lsls	r3, r3, #2
 8009a4a:	440b      	add	r3, r1
 8009a4c:	3344      	adds	r3, #68	; 0x44
 8009a4e:	2200      	movs	r2, #0
 8009a50:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009a52:	7bfa      	ldrb	r2, [r7, #15]
 8009a54:	6879      	ldr	r1, [r7, #4]
 8009a56:	4613      	mov	r3, r2
 8009a58:	00db      	lsls	r3, r3, #3
 8009a5a:	1a9b      	subs	r3, r3, r2
 8009a5c:	009b      	lsls	r3, r3, #2
 8009a5e:	440b      	add	r3, r1
 8009a60:	3348      	adds	r3, #72	; 0x48
 8009a62:	2200      	movs	r2, #0
 8009a64:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009a66:	7bfa      	ldrb	r2, [r7, #15]
 8009a68:	6879      	ldr	r1, [r7, #4]
 8009a6a:	4613      	mov	r3, r2
 8009a6c:	00db      	lsls	r3, r3, #3
 8009a6e:	1a9b      	subs	r3, r3, r2
 8009a70:	009b      	lsls	r3, r3, #2
 8009a72:	440b      	add	r3, r1
 8009a74:	3350      	adds	r3, #80	; 0x50
 8009a76:	2200      	movs	r2, #0
 8009a78:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009a7a:	7bfb      	ldrb	r3, [r7, #15]
 8009a7c:	3301      	adds	r3, #1
 8009a7e:	73fb      	strb	r3, [r7, #15]
 8009a80:	7bfa      	ldrb	r2, [r7, #15]
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	685b      	ldr	r3, [r3, #4]
 8009a86:	429a      	cmp	r2, r3
 8009a88:	d3af      	bcc.n	80099ea <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	73fb      	strb	r3, [r7, #15]
 8009a8e:	e044      	b.n	8009b1a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8009a90:	7bfa      	ldrb	r2, [r7, #15]
 8009a92:	6879      	ldr	r1, [r7, #4]
 8009a94:	4613      	mov	r3, r2
 8009a96:	00db      	lsls	r3, r3, #3
 8009a98:	1a9b      	subs	r3, r3, r2
 8009a9a:	009b      	lsls	r3, r3, #2
 8009a9c:	440b      	add	r3, r1
 8009a9e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8009aa6:	7bfa      	ldrb	r2, [r7, #15]
 8009aa8:	6879      	ldr	r1, [r7, #4]
 8009aaa:	4613      	mov	r3, r2
 8009aac:	00db      	lsls	r3, r3, #3
 8009aae:	1a9b      	subs	r3, r3, r2
 8009ab0:	009b      	lsls	r3, r3, #2
 8009ab2:	440b      	add	r3, r1
 8009ab4:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8009ab8:	7bfa      	ldrb	r2, [r7, #15]
 8009aba:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009abc:	7bfa      	ldrb	r2, [r7, #15]
 8009abe:	6879      	ldr	r1, [r7, #4]
 8009ac0:	4613      	mov	r3, r2
 8009ac2:	00db      	lsls	r3, r3, #3
 8009ac4:	1a9b      	subs	r3, r3, r2
 8009ac6:	009b      	lsls	r3, r3, #2
 8009ac8:	440b      	add	r3, r1
 8009aca:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8009ace:	2200      	movs	r2, #0
 8009ad0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8009ad2:	7bfa      	ldrb	r2, [r7, #15]
 8009ad4:	6879      	ldr	r1, [r7, #4]
 8009ad6:	4613      	mov	r3, r2
 8009ad8:	00db      	lsls	r3, r3, #3
 8009ada:	1a9b      	subs	r3, r3, r2
 8009adc:	009b      	lsls	r3, r3, #2
 8009ade:	440b      	add	r3, r1
 8009ae0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009ae8:	7bfa      	ldrb	r2, [r7, #15]
 8009aea:	6879      	ldr	r1, [r7, #4]
 8009aec:	4613      	mov	r3, r2
 8009aee:	00db      	lsls	r3, r3, #3
 8009af0:	1a9b      	subs	r3, r3, r2
 8009af2:	009b      	lsls	r3, r3, #2
 8009af4:	440b      	add	r3, r1
 8009af6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009afa:	2200      	movs	r2, #0
 8009afc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009afe:	7bfa      	ldrb	r2, [r7, #15]
 8009b00:	6879      	ldr	r1, [r7, #4]
 8009b02:	4613      	mov	r3, r2
 8009b04:	00db      	lsls	r3, r3, #3
 8009b06:	1a9b      	subs	r3, r3, r2
 8009b08:	009b      	lsls	r3, r3, #2
 8009b0a:	440b      	add	r3, r1
 8009b0c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8009b10:	2200      	movs	r2, #0
 8009b12:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009b14:	7bfb      	ldrb	r3, [r7, #15]
 8009b16:	3301      	adds	r3, #1
 8009b18:	73fb      	strb	r3, [r7, #15]
 8009b1a:	7bfa      	ldrb	r2, [r7, #15]
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	685b      	ldr	r3, [r3, #4]
 8009b20:	429a      	cmp	r2, r3
 8009b22:	d3b5      	bcc.n	8009a90 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	603b      	str	r3, [r7, #0]
 8009b2a:	687e      	ldr	r6, [r7, #4]
 8009b2c:	466d      	mov	r5, sp
 8009b2e:	f106 0410 	add.w	r4, r6, #16
 8009b32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009b34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009b36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009b38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009b3a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009b3e:	e885 0003 	stmia.w	r5, {r0, r1}
 8009b42:	1d33      	adds	r3, r6, #4
 8009b44:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009b46:	6838      	ldr	r0, [r7, #0]
 8009b48:	f003 f8f8 	bl	800cd3c <USB_DevInit>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d005      	beq.n	8009b5e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2202      	movs	r2, #2
 8009b56:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	e00d      	b.n	8009b7a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2200      	movs	r2, #0
 8009b62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2201      	movs	r2, #1
 8009b6a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	4618      	mov	r0, r3
 8009b74:	f004 f8ed 	bl	800dd52 <USB_DevDisconnect>

  return HAL_OK;
 8009b78:	2300      	movs	r3, #0
}
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	3714      	adds	r7, #20
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009b82 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8009b82:	b580      	push	{r7, lr}
 8009b84:	b084      	sub	sp, #16
 8009b86:	af00      	add	r7, sp, #0
 8009b88:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009b96:	2b01      	cmp	r3, #1
 8009b98:	d101      	bne.n	8009b9e <HAL_PCD_Start+0x1c>
 8009b9a:	2302      	movs	r3, #2
 8009b9c:	e020      	b.n	8009be0 <HAL_PCD_Start+0x5e>
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2201      	movs	r2, #1
 8009ba2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009baa:	2b01      	cmp	r3, #1
 8009bac:	d109      	bne.n	8009bc2 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8009bb2:	2b01      	cmp	r3, #1
 8009bb4:	d005      	beq.n	8009bc2 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	f004 f8ab 	bl	800dd22 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f003 f867 	bl	800cca4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2200      	movs	r2, #0
 8009bda:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8009bde:	2300      	movs	r3, #0
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	3710      	adds	r7, #16
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}

08009be8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8009be8:	b590      	push	{r4, r7, lr}
 8009bea:	b08d      	sub	sp, #52	; 0x34
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bf6:	6a3b      	ldr	r3, [r7, #32]
 8009bf8:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	4618      	mov	r0, r3
 8009c00:	f004 f952 	bl	800dea8 <USB_GetMode>
 8009c04:	4603      	mov	r3, r0
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	f040 838e 	bne.w	800a328 <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	4618      	mov	r0, r3
 8009c12:	f004 f8b6 	bl	800dd82 <USB_ReadInterrupts>
 8009c16:	4603      	mov	r3, r0
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	f000 8384 	beq.w	800a326 <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	4618      	mov	r0, r3
 8009c24:	f004 f8ad 	bl	800dd82 <USB_ReadInterrupts>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	f003 0302 	and.w	r3, r3, #2
 8009c2e:	2b02      	cmp	r3, #2
 8009c30:	d107      	bne.n	8009c42 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	695a      	ldr	r2, [r3, #20]
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f002 0202 	and.w	r2, r2, #2
 8009c40:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	4618      	mov	r0, r3
 8009c48:	f004 f89b 	bl	800dd82 <USB_ReadInterrupts>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009c52:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009c56:	d17b      	bne.n	8009d50 <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 8009c58:	2300      	movs	r3, #0
 8009c5a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	4618      	mov	r0, r3
 8009c62:	f004 f8a1 	bl	800dda8 <USB_ReadDevAllOutEpInterrupt>
 8009c66:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8009c68:	e06f      	b.n	8009d4a <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 8009c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c6c:	f003 0301 	and.w	r3, r3, #1
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d064      	beq.n	8009d3e <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c7a:	b2d2      	uxtb	r2, r2
 8009c7c:	4611      	mov	r1, r2
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f004 f8c6 	bl	800de10 <USB_ReadDevOutEPInterrupt>
 8009c84:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8009c86:	69bb      	ldr	r3, [r7, #24]
 8009c88:	f003 0301 	and.w	r3, r3, #1
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d00c      	beq.n	8009caa <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8009c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c92:	015a      	lsls	r2, r3, #5
 8009c94:	69fb      	ldr	r3, [r7, #28]
 8009c96:	4413      	add	r3, r2
 8009c98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c9c:	461a      	mov	r2, r3
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8009ca2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009ca4:	6878      	ldr	r0, [r7, #4]
 8009ca6:	f000 fe0d 	bl	800a8c4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8009caa:	69bb      	ldr	r3, [r7, #24]
 8009cac:	f003 0308 	and.w	r3, r3, #8
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d00c      	beq.n	8009cce <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8009cb4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f000 ff0c 	bl	800aad4 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8009cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cbe:	015a      	lsls	r2, r3, #5
 8009cc0:	69fb      	ldr	r3, [r7, #28]
 8009cc2:	4413      	add	r3, r2
 8009cc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cc8:	461a      	mov	r2, r3
 8009cca:	2308      	movs	r3, #8
 8009ccc:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8009cce:	69bb      	ldr	r3, [r7, #24]
 8009cd0:	f003 0310 	and.w	r3, r3, #16
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d008      	beq.n	8009cea <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8009cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cda:	015a      	lsls	r2, r3, #5
 8009cdc:	69fb      	ldr	r3, [r7, #28]
 8009cde:	4413      	add	r3, r2
 8009ce0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ce4:	461a      	mov	r2, r3
 8009ce6:	2310      	movs	r3, #16
 8009ce8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009cea:	69bb      	ldr	r3, [r7, #24]
 8009cec:	f003 0320 	and.w	r3, r3, #32
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d015      	beq.n	8009d20 <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	691b      	ldr	r3, [r3, #16]
 8009cf8:	2b01      	cmp	r3, #1
 8009cfa:	d108      	bne.n	8009d0e <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6818      	ldr	r0, [r3, #0]
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009d06:	461a      	mov	r2, r3
 8009d08:	2101      	movs	r1, #1
 8009d0a:	f004 f911 	bl	800df30 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d10:	015a      	lsls	r2, r3, #5
 8009d12:	69fb      	ldr	r3, [r7, #28]
 8009d14:	4413      	add	r3, r2
 8009d16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d1a:	461a      	mov	r2, r3
 8009d1c:	2320      	movs	r3, #32
 8009d1e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8009d20:	69bb      	ldr	r3, [r7, #24]
 8009d22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d009      	beq.n	8009d3e <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8009d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d2c:	015a      	lsls	r2, r3, #5
 8009d2e:	69fb      	ldr	r3, [r7, #28]
 8009d30:	4413      	add	r3, r2
 8009d32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d36:	461a      	mov	r2, r3
 8009d38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009d3c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8009d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d40:	3301      	adds	r3, #1
 8009d42:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d46:	085b      	lsrs	r3, r3, #1
 8009d48:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d18c      	bne.n	8009c6a <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	4618      	mov	r0, r3
 8009d56:	f004 f814 	bl	800dd82 <USB_ReadInterrupts>
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009d60:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009d64:	f040 80c4 	bne.w	8009ef0 <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	f004 f835 	bl	800dddc <USB_ReadDevAllInEpInterrupt>
 8009d72:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8009d74:	2300      	movs	r3, #0
 8009d76:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8009d78:	e0b6      	b.n	8009ee8 <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8009d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d7c:	f003 0301 	and.w	r3, r3, #1
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	f000 80ab 	beq.w	8009edc <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d8c:	b2d2      	uxtb	r2, r2
 8009d8e:	4611      	mov	r1, r2
 8009d90:	4618      	mov	r0, r3
 8009d92:	f004 f85b 	bl	800de4c <USB_ReadDevInEPInterrupt>
 8009d96:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8009d98:	69bb      	ldr	r3, [r7, #24]
 8009d9a:	f003 0301 	and.w	r3, r3, #1
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d05b      	beq.n	8009e5a <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da4:	f003 030f 	and.w	r3, r3, #15
 8009da8:	2201      	movs	r2, #1
 8009daa:	fa02 f303 	lsl.w	r3, r2, r3
 8009dae:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009db0:	69fb      	ldr	r3, [r7, #28]
 8009db2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009db6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009db8:	697b      	ldr	r3, [r7, #20]
 8009dba:	43db      	mvns	r3, r3
 8009dbc:	69f9      	ldr	r1, [r7, #28]
 8009dbe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009dc2:	4013      	ands	r3, r2
 8009dc4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8009dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dc8:	015a      	lsls	r2, r3, #5
 8009dca:	69fb      	ldr	r3, [r7, #28]
 8009dcc:	4413      	add	r3, r2
 8009dce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dd2:	461a      	mov	r2, r3
 8009dd4:	2301      	movs	r3, #1
 8009dd6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	691b      	ldr	r3, [r3, #16]
 8009ddc:	2b01      	cmp	r3, #1
 8009dde:	d11b      	bne.n	8009e18 <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8009de0:	6879      	ldr	r1, [r7, #4]
 8009de2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009de4:	4613      	mov	r3, r2
 8009de6:	00db      	lsls	r3, r3, #3
 8009de8:	1a9b      	subs	r3, r3, r2
 8009dea:	009b      	lsls	r3, r3, #2
 8009dec:	440b      	add	r3, r1
 8009dee:	3348      	adds	r3, #72	; 0x48
 8009df0:	6819      	ldr	r1, [r3, #0]
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009df6:	4613      	mov	r3, r2
 8009df8:	00db      	lsls	r3, r3, #3
 8009dfa:	1a9b      	subs	r3, r3, r2
 8009dfc:	009b      	lsls	r3, r3, #2
 8009dfe:	4403      	add	r3, r0
 8009e00:	3344      	adds	r3, #68	; 0x44
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	4419      	add	r1, r3
 8009e06:	6878      	ldr	r0, [r7, #4]
 8009e08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e0a:	4613      	mov	r3, r2
 8009e0c:	00db      	lsls	r3, r3, #3
 8009e0e:	1a9b      	subs	r3, r3, r2
 8009e10:	009b      	lsls	r3, r3, #2
 8009e12:	4403      	add	r3, r0
 8009e14:	3348      	adds	r3, #72	; 0x48
 8009e16:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8009e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e1a:	b2db      	uxtb	r3, r3
 8009e1c:	4619      	mov	r1, r3
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f009 f8a5 	bl	8012f6e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	691b      	ldr	r3, [r3, #16]
 8009e28:	2b01      	cmp	r3, #1
 8009e2a:	d116      	bne.n	8009e5a <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8009e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d113      	bne.n	8009e5a <HAL_PCD_IRQHandler+0x272>
 8009e32:	6879      	ldr	r1, [r7, #4]
 8009e34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e36:	4613      	mov	r3, r2
 8009e38:	00db      	lsls	r3, r3, #3
 8009e3a:	1a9b      	subs	r3, r3, r2
 8009e3c:	009b      	lsls	r3, r3, #2
 8009e3e:	440b      	add	r3, r1
 8009e40:	3350      	adds	r3, #80	; 0x50
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d108      	bne.n	8009e5a <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	6818      	ldr	r0, [r3, #0]
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009e52:	461a      	mov	r2, r3
 8009e54:	2101      	movs	r1, #1
 8009e56:	f004 f86b 	bl	800df30 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8009e5a:	69bb      	ldr	r3, [r7, #24]
 8009e5c:	f003 0308 	and.w	r3, r3, #8
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d008      	beq.n	8009e76 <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8009e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e66:	015a      	lsls	r2, r3, #5
 8009e68:	69fb      	ldr	r3, [r7, #28]
 8009e6a:	4413      	add	r3, r2
 8009e6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e70:	461a      	mov	r2, r3
 8009e72:	2308      	movs	r3, #8
 8009e74:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8009e76:	69bb      	ldr	r3, [r7, #24]
 8009e78:	f003 0310 	and.w	r3, r3, #16
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d008      	beq.n	8009e92 <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8009e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e82:	015a      	lsls	r2, r3, #5
 8009e84:	69fb      	ldr	r3, [r7, #28]
 8009e86:	4413      	add	r3, r2
 8009e88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e8c:	461a      	mov	r2, r3
 8009e8e:	2310      	movs	r3, #16
 8009e90:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8009e92:	69bb      	ldr	r3, [r7, #24]
 8009e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d008      	beq.n	8009eae <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8009e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e9e:	015a      	lsls	r2, r3, #5
 8009ea0:	69fb      	ldr	r3, [r7, #28]
 8009ea2:	4413      	add	r3, r2
 8009ea4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ea8:	461a      	mov	r2, r3
 8009eaa:	2340      	movs	r3, #64	; 0x40
 8009eac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8009eae:	69bb      	ldr	r3, [r7, #24]
 8009eb0:	f003 0302 	and.w	r3, r3, #2
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d008      	beq.n	8009eca <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8009eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eba:	015a      	lsls	r2, r3, #5
 8009ebc:	69fb      	ldr	r3, [r7, #28]
 8009ebe:	4413      	add	r3, r2
 8009ec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ec4:	461a      	mov	r2, r3
 8009ec6:	2302      	movs	r3, #2
 8009ec8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8009eca:	69bb      	ldr	r3, [r7, #24]
 8009ecc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d003      	beq.n	8009edc <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8009ed4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f000 fc67 	bl	800a7aa <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8009edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ede:	3301      	adds	r3, #1
 8009ee0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ee4:	085b      	lsrs	r3, r3, #1
 8009ee6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	f47f af45 	bne.w	8009d7a <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	f003 ff44 	bl	800dd82 <USB_ReadInterrupts>
 8009efa:	4603      	mov	r3, r0
 8009efc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009f00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009f04:	d122      	bne.n	8009f4c <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009f06:	69fb      	ldr	r3, [r7, #28]
 8009f08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f0c:	685b      	ldr	r3, [r3, #4]
 8009f0e:	69fa      	ldr	r2, [r7, #28]
 8009f10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009f14:	f023 0301 	bic.w	r3, r3, #1
 8009f18:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8009f20:	2b01      	cmp	r3, #1
 8009f22:	d108      	bne.n	8009f36 <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2200      	movs	r2, #0
 8009f28:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009f2c:	2100      	movs	r1, #0
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	f000 fe88 	bl	800ac44 <HAL_PCDEx_LPM_Callback>
 8009f34:	e002      	b.n	8009f3c <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	f009 f890 	bl	801305c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	695a      	ldr	r2, [r3, #20]
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8009f4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	4618      	mov	r0, r3
 8009f52:	f003 ff16 	bl	800dd82 <USB_ReadInterrupts>
 8009f56:	4603      	mov	r3, r0
 8009f58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009f5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f60:	d112      	bne.n	8009f88 <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8009f62:	69fb      	ldr	r3, [r7, #28]
 8009f64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f68:	689b      	ldr	r3, [r3, #8]
 8009f6a:	f003 0301 	and.w	r3, r3, #1
 8009f6e:	2b01      	cmp	r3, #1
 8009f70:	d102      	bne.n	8009f78 <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f009 f84c 	bl	8013010 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	695a      	ldr	r2, [r3, #20]
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8009f86:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	f003 fef8 	bl	800dd82 <USB_ReadInterrupts>
 8009f92:	4603      	mov	r3, r0
 8009f94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009f98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f9c:	f040 80a7 	bne.w	800a0ee <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009fa0:	69fb      	ldr	r3, [r7, #28]
 8009fa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fa6:	685b      	ldr	r3, [r3, #4]
 8009fa8:	69fa      	ldr	r2, [r7, #28]
 8009faa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009fae:	f023 0301 	bic.w	r3, r3, #1
 8009fb2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	2110      	movs	r1, #16
 8009fba:	4618      	mov	r0, r3
 8009fbc:	f003 f830 	bl	800d020 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009fc4:	e036      	b.n	800a034 <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8009fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fc8:	015a      	lsls	r2, r3, #5
 8009fca:	69fb      	ldr	r3, [r7, #28]
 8009fcc:	4413      	add	r3, r2
 8009fce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fd2:	461a      	mov	r2, r3
 8009fd4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009fd8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fdc:	015a      	lsls	r2, r3, #5
 8009fde:	69fb      	ldr	r3, [r7, #28]
 8009fe0:	4413      	add	r3, r2
 8009fe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009fea:	0151      	lsls	r1, r2, #5
 8009fec:	69fa      	ldr	r2, [r7, #28]
 8009fee:	440a      	add	r2, r1
 8009ff0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ff4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009ff8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8009ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ffc:	015a      	lsls	r2, r3, #5
 8009ffe:	69fb      	ldr	r3, [r7, #28]
 800a000:	4413      	add	r3, r2
 800a002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a006:	461a      	mov	r2, r3
 800a008:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a00c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a00e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a010:	015a      	lsls	r2, r3, #5
 800a012:	69fb      	ldr	r3, [r7, #28]
 800a014:	4413      	add	r3, r2
 800a016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a01e:	0151      	lsls	r1, r2, #5
 800a020:	69fa      	ldr	r2, [r7, #28]
 800a022:	440a      	add	r2, r1
 800a024:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a028:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a02c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a02e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a030:	3301      	adds	r3, #1
 800a032:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	685b      	ldr	r3, [r3, #4]
 800a038:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a03a:	429a      	cmp	r2, r3
 800a03c:	d3c3      	bcc.n	8009fc6 <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800a03e:	69fb      	ldr	r3, [r7, #28]
 800a040:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a044:	69db      	ldr	r3, [r3, #28]
 800a046:	69fa      	ldr	r2, [r7, #28]
 800a048:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a04c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800a050:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a056:	2b00      	cmp	r3, #0
 800a058:	d016      	beq.n	800a088 <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800a05a:	69fb      	ldr	r3, [r7, #28]
 800a05c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a060:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a064:	69fa      	ldr	r2, [r7, #28]
 800a066:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a06a:	f043 030b 	orr.w	r3, r3, #11
 800a06e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800a072:	69fb      	ldr	r3, [r7, #28]
 800a074:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a07a:	69fa      	ldr	r2, [r7, #28]
 800a07c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a080:	f043 030b 	orr.w	r3, r3, #11
 800a084:	6453      	str	r3, [r2, #68]	; 0x44
 800a086:	e015      	b.n	800a0b4 <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800a088:	69fb      	ldr	r3, [r7, #28]
 800a08a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a08e:	695b      	ldr	r3, [r3, #20]
 800a090:	69fa      	ldr	r2, [r7, #28]
 800a092:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a096:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a09a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800a09e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800a0a0:	69fb      	ldr	r3, [r7, #28]
 800a0a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0a6:	691b      	ldr	r3, [r3, #16]
 800a0a8:	69fa      	ldr	r2, [r7, #28]
 800a0aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a0ae:	f043 030b 	orr.w	r3, r3, #11
 800a0b2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800a0b4:	69fb      	ldr	r3, [r7, #28]
 800a0b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	69fa      	ldr	r2, [r7, #28]
 800a0be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a0c2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a0c6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	6818      	ldr	r0, [r3, #0]
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	691b      	ldr	r3, [r3, #16]
 800a0d0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a0d8:	461a      	mov	r2, r3
 800a0da:	f003 ff29 	bl	800df30 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	695a      	ldr	r2, [r3, #20]
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800a0ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	f003 fe45 	bl	800dd82 <USB_ReadInterrupts>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a0fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a102:	d124      	bne.n	800a14e <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	4618      	mov	r0, r3
 800a10a:	f003 fedb 	bl	800dec4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	4618      	mov	r0, r3
 800a114:	f002 ffe5 	bl	800d0e2 <USB_GetDevSpeed>
 800a118:	4603      	mov	r3, r0
 800a11a:	461a      	mov	r2, r3
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681c      	ldr	r4, [r3, #0]
 800a124:	f001 f9c8 	bl	800b4b8 <HAL_RCC_GetHCLKFreq>
 800a128:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a12e:	b2db      	uxtb	r3, r3
 800a130:	461a      	mov	r2, r3
 800a132:	4620      	mov	r0, r4
 800a134:	f002 fd14 	bl	800cb60 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800a138:	6878      	ldr	r0, [r7, #4]
 800a13a:	f008 ff40 	bl	8012fbe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	695a      	ldr	r2, [r3, #20]
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800a14c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	4618      	mov	r0, r3
 800a154:	f003 fe15 	bl	800dd82 <USB_ReadInterrupts>
 800a158:	4603      	mov	r3, r0
 800a15a:	f003 0310 	and.w	r3, r3, #16
 800a15e:	2b10      	cmp	r3, #16
 800a160:	d161      	bne.n	800a226 <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	699a      	ldr	r2, [r3, #24]
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	f022 0210 	bic.w	r2, r2, #16
 800a170:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800a172:	6a3b      	ldr	r3, [r7, #32]
 800a174:	6a1b      	ldr	r3, [r3, #32]
 800a176:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800a178:	693b      	ldr	r3, [r7, #16]
 800a17a:	f003 020f 	and.w	r2, r3, #15
 800a17e:	4613      	mov	r3, r2
 800a180:	00db      	lsls	r3, r3, #3
 800a182:	1a9b      	subs	r3, r3, r2
 800a184:	009b      	lsls	r3, r3, #2
 800a186:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a18a:	687a      	ldr	r2, [r7, #4]
 800a18c:	4413      	add	r3, r2
 800a18e:	3304      	adds	r3, #4
 800a190:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800a192:	693b      	ldr	r3, [r7, #16]
 800a194:	0c5b      	lsrs	r3, r3, #17
 800a196:	f003 030f 	and.w	r3, r3, #15
 800a19a:	2b02      	cmp	r3, #2
 800a19c:	d124      	bne.n	800a1e8 <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800a19e:	693a      	ldr	r2, [r7, #16]
 800a1a0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800a1a4:	4013      	ands	r3, r2
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d035      	beq.n	800a216 <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800a1ae:	693b      	ldr	r3, [r7, #16]
 800a1b0:	091b      	lsrs	r3, r3, #4
 800a1b2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800a1b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a1b8:	b29b      	uxth	r3, r3
 800a1ba:	461a      	mov	r2, r3
 800a1bc:	6a38      	ldr	r0, [r7, #32]
 800a1be:	f003 fc8d 	bl	800dadc <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	68da      	ldr	r2, [r3, #12]
 800a1c6:	693b      	ldr	r3, [r7, #16]
 800a1c8:	091b      	lsrs	r3, r3, #4
 800a1ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a1ce:	441a      	add	r2, r3
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	699a      	ldr	r2, [r3, #24]
 800a1d8:	693b      	ldr	r3, [r7, #16]
 800a1da:	091b      	lsrs	r3, r3, #4
 800a1dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a1e0:	441a      	add	r2, r3
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	619a      	str	r2, [r3, #24]
 800a1e6:	e016      	b.n	800a216 <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800a1e8:	693b      	ldr	r3, [r7, #16]
 800a1ea:	0c5b      	lsrs	r3, r3, #17
 800a1ec:	f003 030f 	and.w	r3, r3, #15
 800a1f0:	2b06      	cmp	r3, #6
 800a1f2:	d110      	bne.n	800a216 <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a1fa:	2208      	movs	r2, #8
 800a1fc:	4619      	mov	r1, r3
 800a1fe:	6a38      	ldr	r0, [r7, #32]
 800a200:	f003 fc6c 	bl	800dadc <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	699a      	ldr	r2, [r3, #24]
 800a208:	693b      	ldr	r3, [r7, #16]
 800a20a:	091b      	lsrs	r3, r3, #4
 800a20c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a210:	441a      	add	r2, r3
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	699a      	ldr	r2, [r3, #24]
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	f042 0210 	orr.w	r2, r2, #16
 800a224:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	4618      	mov	r0, r3
 800a22c:	f003 fda9 	bl	800dd82 <USB_ReadInterrupts>
 800a230:	4603      	mov	r3, r0
 800a232:	f003 0308 	and.w	r3, r3, #8
 800a236:	2b08      	cmp	r3, #8
 800a238:	d10a      	bne.n	800a250 <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800a23a:	6878      	ldr	r0, [r7, #4]
 800a23c:	f008 feb1 	bl	8012fa2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	695a      	ldr	r2, [r3, #20]
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f002 0208 	and.w	r2, r2, #8
 800a24e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	4618      	mov	r0, r3
 800a256:	f003 fd94 	bl	800dd82 <USB_ReadInterrupts>
 800a25a:	4603      	mov	r3, r0
 800a25c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a260:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a264:	d10f      	bne.n	800a286 <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800a266:	2300      	movs	r3, #0
 800a268:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800a26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a26c:	b2db      	uxtb	r3, r3
 800a26e:	4619      	mov	r1, r3
 800a270:	6878      	ldr	r0, [r7, #4]
 800a272:	f008 ff13 	bl	801309c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	695a      	ldr	r2, [r3, #20]
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800a284:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	4618      	mov	r0, r3
 800a28c:	f003 fd79 	bl	800dd82 <USB_ReadInterrupts>
 800a290:	4603      	mov	r3, r0
 800a292:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a296:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a29a:	d10f      	bne.n	800a2bc <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800a29c:	2300      	movs	r3, #0
 800a29e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800a2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2a2:	b2db      	uxtb	r3, r3
 800a2a4:	4619      	mov	r1, r3
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	f008 fee6 	bl	8013078 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	695a      	ldr	r2, [r3, #20]
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800a2ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	f003 fd5e 	bl	800dd82 <USB_ReadInterrupts>
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a2cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2d0:	d10a      	bne.n	800a2e8 <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800a2d2:	6878      	ldr	r0, [r7, #4]
 800a2d4:	f008 fef4 	bl	80130c0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	695a      	ldr	r2, [r3, #20]
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800a2e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	f003 fd48 	bl	800dd82 <USB_ReadInterrupts>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	f003 0304 	and.w	r3, r3, #4
 800a2f8:	2b04      	cmp	r3, #4
 800a2fa:	d115      	bne.n	800a328 <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	685b      	ldr	r3, [r3, #4]
 800a302:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800a304:	693b      	ldr	r3, [r7, #16]
 800a306:	f003 0304 	and.w	r3, r3, #4
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d002      	beq.n	800a314 <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	f008 fee4 	bl	80130dc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	6859      	ldr	r1, [r3, #4]
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	693a      	ldr	r2, [r7, #16]
 800a320:	430a      	orrs	r2, r1
 800a322:	605a      	str	r2, [r3, #4]
 800a324:	e000      	b.n	800a328 <HAL_PCD_IRQHandler+0x740>
      return;
 800a326:	bf00      	nop
    }
  }
}
 800a328:	3734      	adds	r7, #52	; 0x34
 800a32a:	46bd      	mov	sp, r7
 800a32c:	bd90      	pop	{r4, r7, pc}

0800a32e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800a32e:	b580      	push	{r7, lr}
 800a330:	b082      	sub	sp, #8
 800a332:	af00      	add	r7, sp, #0
 800a334:	6078      	str	r0, [r7, #4]
 800a336:	460b      	mov	r3, r1
 800a338:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a340:	2b01      	cmp	r3, #1
 800a342:	d101      	bne.n	800a348 <HAL_PCD_SetAddress+0x1a>
 800a344:	2302      	movs	r3, #2
 800a346:	e013      	b.n	800a370 <HAL_PCD_SetAddress+0x42>
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2201      	movs	r2, #1
 800a34c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	78fa      	ldrb	r2, [r7, #3]
 800a354:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	78fa      	ldrb	r2, [r7, #3]
 800a35e:	4611      	mov	r1, r2
 800a360:	4618      	mov	r0, r3
 800a362:	f003 fcb8 	bl	800dcd6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	2200      	movs	r2, #0
 800a36a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800a36e:	2300      	movs	r3, #0
}
 800a370:	4618      	mov	r0, r3
 800a372:	3708      	adds	r7, #8
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}

0800a378 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b084      	sub	sp, #16
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
 800a380:	4608      	mov	r0, r1
 800a382:	4611      	mov	r1, r2
 800a384:	461a      	mov	r2, r3
 800a386:	4603      	mov	r3, r0
 800a388:	70fb      	strb	r3, [r7, #3]
 800a38a:	460b      	mov	r3, r1
 800a38c:	803b      	strh	r3, [r7, #0]
 800a38e:	4613      	mov	r3, r2
 800a390:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800a392:	2300      	movs	r3, #0
 800a394:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a396:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	da0f      	bge.n	800a3be <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a39e:	78fb      	ldrb	r3, [r7, #3]
 800a3a0:	f003 020f 	and.w	r2, r3, #15
 800a3a4:	4613      	mov	r3, r2
 800a3a6:	00db      	lsls	r3, r3, #3
 800a3a8:	1a9b      	subs	r3, r3, r2
 800a3aa:	009b      	lsls	r3, r3, #2
 800a3ac:	3338      	adds	r3, #56	; 0x38
 800a3ae:	687a      	ldr	r2, [r7, #4]
 800a3b0:	4413      	add	r3, r2
 800a3b2:	3304      	adds	r3, #4
 800a3b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	2201      	movs	r2, #1
 800a3ba:	705a      	strb	r2, [r3, #1]
 800a3bc:	e00f      	b.n	800a3de <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a3be:	78fb      	ldrb	r3, [r7, #3]
 800a3c0:	f003 020f 	and.w	r2, r3, #15
 800a3c4:	4613      	mov	r3, r2
 800a3c6:	00db      	lsls	r3, r3, #3
 800a3c8:	1a9b      	subs	r3, r3, r2
 800a3ca:	009b      	lsls	r3, r3, #2
 800a3cc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a3d0:	687a      	ldr	r2, [r7, #4]
 800a3d2:	4413      	add	r3, r2
 800a3d4:	3304      	adds	r3, #4
 800a3d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	2200      	movs	r2, #0
 800a3dc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800a3de:	78fb      	ldrb	r3, [r7, #3]
 800a3e0:	f003 030f 	and.w	r3, r3, #15
 800a3e4:	b2da      	uxtb	r2, r3
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800a3ea:	883a      	ldrh	r2, [r7, #0]
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	78ba      	ldrb	r2, [r7, #2]
 800a3f4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	785b      	ldrb	r3, [r3, #1]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d004      	beq.n	800a408 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	781b      	ldrb	r3, [r3, #0]
 800a402:	b29a      	uxth	r2, r3
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800a408:	78bb      	ldrb	r3, [r7, #2]
 800a40a:	2b02      	cmp	r3, #2
 800a40c:	d102      	bne.n	800a414 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	2200      	movs	r2, #0
 800a412:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a41a:	2b01      	cmp	r3, #1
 800a41c:	d101      	bne.n	800a422 <HAL_PCD_EP_Open+0xaa>
 800a41e:	2302      	movs	r3, #2
 800a420:	e00e      	b.n	800a440 <HAL_PCD_EP_Open+0xc8>
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2201      	movs	r2, #1
 800a426:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	68f9      	ldr	r1, [r7, #12]
 800a430:	4618      	mov	r0, r3
 800a432:	f002 fe7b 	bl	800d12c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	2200      	movs	r2, #0
 800a43a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800a43e:	7afb      	ldrb	r3, [r7, #11]
}
 800a440:	4618      	mov	r0, r3
 800a442:	3710      	adds	r7, #16
 800a444:	46bd      	mov	sp, r7
 800a446:	bd80      	pop	{r7, pc}

0800a448 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b084      	sub	sp, #16
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
 800a450:	460b      	mov	r3, r1
 800a452:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a454:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	da0f      	bge.n	800a47c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a45c:	78fb      	ldrb	r3, [r7, #3]
 800a45e:	f003 020f 	and.w	r2, r3, #15
 800a462:	4613      	mov	r3, r2
 800a464:	00db      	lsls	r3, r3, #3
 800a466:	1a9b      	subs	r3, r3, r2
 800a468:	009b      	lsls	r3, r3, #2
 800a46a:	3338      	adds	r3, #56	; 0x38
 800a46c:	687a      	ldr	r2, [r7, #4]
 800a46e:	4413      	add	r3, r2
 800a470:	3304      	adds	r3, #4
 800a472:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	2201      	movs	r2, #1
 800a478:	705a      	strb	r2, [r3, #1]
 800a47a:	e00f      	b.n	800a49c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a47c:	78fb      	ldrb	r3, [r7, #3]
 800a47e:	f003 020f 	and.w	r2, r3, #15
 800a482:	4613      	mov	r3, r2
 800a484:	00db      	lsls	r3, r3, #3
 800a486:	1a9b      	subs	r3, r3, r2
 800a488:	009b      	lsls	r3, r3, #2
 800a48a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a48e:	687a      	ldr	r2, [r7, #4]
 800a490:	4413      	add	r3, r2
 800a492:	3304      	adds	r3, #4
 800a494:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	2200      	movs	r2, #0
 800a49a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800a49c:	78fb      	ldrb	r3, [r7, #3]
 800a49e:	f003 030f 	and.w	r3, r3, #15
 800a4a2:	b2da      	uxtb	r2, r3
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a4ae:	2b01      	cmp	r3, #1
 800a4b0:	d101      	bne.n	800a4b6 <HAL_PCD_EP_Close+0x6e>
 800a4b2:	2302      	movs	r3, #2
 800a4b4:	e00e      	b.n	800a4d4 <HAL_PCD_EP_Close+0x8c>
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2201      	movs	r2, #1
 800a4ba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	68f9      	ldr	r1, [r7, #12]
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	f002 feb9 	bl	800d23c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800a4d2:	2300      	movs	r3, #0
}
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	3710      	adds	r7, #16
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd80      	pop	{r7, pc}

0800a4dc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b086      	sub	sp, #24
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	60f8      	str	r0, [r7, #12]
 800a4e4:	607a      	str	r2, [r7, #4]
 800a4e6:	603b      	str	r3, [r7, #0]
 800a4e8:	460b      	mov	r3, r1
 800a4ea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a4ec:	7afb      	ldrb	r3, [r7, #11]
 800a4ee:	f003 020f 	and.w	r2, r3, #15
 800a4f2:	4613      	mov	r3, r2
 800a4f4:	00db      	lsls	r3, r3, #3
 800a4f6:	1a9b      	subs	r3, r3, r2
 800a4f8:	009b      	lsls	r3, r3, #2
 800a4fa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a4fe:	68fa      	ldr	r2, [r7, #12]
 800a500:	4413      	add	r3, r2
 800a502:	3304      	adds	r3, #4
 800a504:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a506:	697b      	ldr	r3, [r7, #20]
 800a508:	687a      	ldr	r2, [r7, #4]
 800a50a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800a50c:	697b      	ldr	r3, [r7, #20]
 800a50e:	683a      	ldr	r2, [r7, #0]
 800a510:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800a512:	697b      	ldr	r3, [r7, #20]
 800a514:	2200      	movs	r2, #0
 800a516:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800a518:	697b      	ldr	r3, [r7, #20]
 800a51a:	2200      	movs	r2, #0
 800a51c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a51e:	7afb      	ldrb	r3, [r7, #11]
 800a520:	f003 030f 	and.w	r3, r3, #15
 800a524:	b2da      	uxtb	r2, r3
 800a526:	697b      	ldr	r3, [r7, #20]
 800a528:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	691b      	ldr	r3, [r3, #16]
 800a52e:	2b01      	cmp	r3, #1
 800a530:	d102      	bne.n	800a538 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800a532:	687a      	ldr	r2, [r7, #4]
 800a534:	697b      	ldr	r3, [r7, #20]
 800a536:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a538:	7afb      	ldrb	r3, [r7, #11]
 800a53a:	f003 030f 	and.w	r3, r3, #15
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d109      	bne.n	800a556 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	6818      	ldr	r0, [r3, #0]
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	691b      	ldr	r3, [r3, #16]
 800a54a:	b2db      	uxtb	r3, r3
 800a54c:	461a      	mov	r2, r3
 800a54e:	6979      	ldr	r1, [r7, #20]
 800a550:	f003 f93c 	bl	800d7cc <USB_EP0StartXfer>
 800a554:	e008      	b.n	800a568 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	6818      	ldr	r0, [r3, #0]
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	691b      	ldr	r3, [r3, #16]
 800a55e:	b2db      	uxtb	r3, r3
 800a560:	461a      	mov	r2, r3
 800a562:	6979      	ldr	r1, [r7, #20]
 800a564:	f002 feee 	bl	800d344 <USB_EPStartXfer>
  }

  return HAL_OK;
 800a568:	2300      	movs	r3, #0
}
 800a56a:	4618      	mov	r0, r3
 800a56c:	3718      	adds	r7, #24
 800a56e:	46bd      	mov	sp, r7
 800a570:	bd80      	pop	{r7, pc}

0800a572 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a572:	b480      	push	{r7}
 800a574:	b083      	sub	sp, #12
 800a576:	af00      	add	r7, sp, #0
 800a578:	6078      	str	r0, [r7, #4]
 800a57a:	460b      	mov	r3, r1
 800a57c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800a57e:	78fb      	ldrb	r3, [r7, #3]
 800a580:	f003 020f 	and.w	r2, r3, #15
 800a584:	6879      	ldr	r1, [r7, #4]
 800a586:	4613      	mov	r3, r2
 800a588:	00db      	lsls	r3, r3, #3
 800a58a:	1a9b      	subs	r3, r3, r2
 800a58c:	009b      	lsls	r3, r3, #2
 800a58e:	440b      	add	r3, r1
 800a590:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800a594:	681b      	ldr	r3, [r3, #0]
}
 800a596:	4618      	mov	r0, r3
 800a598:	370c      	adds	r7, #12
 800a59a:	46bd      	mov	sp, r7
 800a59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a0:	4770      	bx	lr

0800a5a2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a5a2:	b580      	push	{r7, lr}
 800a5a4:	b086      	sub	sp, #24
 800a5a6:	af00      	add	r7, sp, #0
 800a5a8:	60f8      	str	r0, [r7, #12]
 800a5aa:	607a      	str	r2, [r7, #4]
 800a5ac:	603b      	str	r3, [r7, #0]
 800a5ae:	460b      	mov	r3, r1
 800a5b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a5b2:	7afb      	ldrb	r3, [r7, #11]
 800a5b4:	f003 020f 	and.w	r2, r3, #15
 800a5b8:	4613      	mov	r3, r2
 800a5ba:	00db      	lsls	r3, r3, #3
 800a5bc:	1a9b      	subs	r3, r3, r2
 800a5be:	009b      	lsls	r3, r3, #2
 800a5c0:	3338      	adds	r3, #56	; 0x38
 800a5c2:	68fa      	ldr	r2, [r7, #12]
 800a5c4:	4413      	add	r3, r2
 800a5c6:	3304      	adds	r3, #4
 800a5c8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a5ca:	697b      	ldr	r3, [r7, #20]
 800a5cc:	687a      	ldr	r2, [r7, #4]
 800a5ce:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800a5d0:	697b      	ldr	r3, [r7, #20]
 800a5d2:	683a      	ldr	r2, [r7, #0]
 800a5d4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800a5d6:	697b      	ldr	r3, [r7, #20]
 800a5d8:	2200      	movs	r2, #0
 800a5da:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800a5dc:	697b      	ldr	r3, [r7, #20]
 800a5de:	2201      	movs	r2, #1
 800a5e0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a5e2:	7afb      	ldrb	r3, [r7, #11]
 800a5e4:	f003 030f 	and.w	r3, r3, #15
 800a5e8:	b2da      	uxtb	r2, r3
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	691b      	ldr	r3, [r3, #16]
 800a5f2:	2b01      	cmp	r3, #1
 800a5f4:	d102      	bne.n	800a5fc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800a5f6:	687a      	ldr	r2, [r7, #4]
 800a5f8:	697b      	ldr	r3, [r7, #20]
 800a5fa:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a5fc:	7afb      	ldrb	r3, [r7, #11]
 800a5fe:	f003 030f 	and.w	r3, r3, #15
 800a602:	2b00      	cmp	r3, #0
 800a604:	d109      	bne.n	800a61a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	6818      	ldr	r0, [r3, #0]
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	691b      	ldr	r3, [r3, #16]
 800a60e:	b2db      	uxtb	r3, r3
 800a610:	461a      	mov	r2, r3
 800a612:	6979      	ldr	r1, [r7, #20]
 800a614:	f003 f8da 	bl	800d7cc <USB_EP0StartXfer>
 800a618:	e008      	b.n	800a62c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	6818      	ldr	r0, [r3, #0]
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	691b      	ldr	r3, [r3, #16]
 800a622:	b2db      	uxtb	r3, r3
 800a624:	461a      	mov	r2, r3
 800a626:	6979      	ldr	r1, [r7, #20]
 800a628:	f002 fe8c 	bl	800d344 <USB_EPStartXfer>
  }

  return HAL_OK;
 800a62c:	2300      	movs	r3, #0
}
 800a62e:	4618      	mov	r0, r3
 800a630:	3718      	adds	r7, #24
 800a632:	46bd      	mov	sp, r7
 800a634:	bd80      	pop	{r7, pc}

0800a636 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a636:	b580      	push	{r7, lr}
 800a638:	b084      	sub	sp, #16
 800a63a:	af00      	add	r7, sp, #0
 800a63c:	6078      	str	r0, [r7, #4]
 800a63e:	460b      	mov	r3, r1
 800a640:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a642:	78fb      	ldrb	r3, [r7, #3]
 800a644:	f003 020f 	and.w	r2, r3, #15
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	685b      	ldr	r3, [r3, #4]
 800a64c:	429a      	cmp	r2, r3
 800a64e:	d901      	bls.n	800a654 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800a650:	2301      	movs	r3, #1
 800a652:	e050      	b.n	800a6f6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a654:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	da0f      	bge.n	800a67c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a65c:	78fb      	ldrb	r3, [r7, #3]
 800a65e:	f003 020f 	and.w	r2, r3, #15
 800a662:	4613      	mov	r3, r2
 800a664:	00db      	lsls	r3, r3, #3
 800a666:	1a9b      	subs	r3, r3, r2
 800a668:	009b      	lsls	r3, r3, #2
 800a66a:	3338      	adds	r3, #56	; 0x38
 800a66c:	687a      	ldr	r2, [r7, #4]
 800a66e:	4413      	add	r3, r2
 800a670:	3304      	adds	r3, #4
 800a672:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	2201      	movs	r2, #1
 800a678:	705a      	strb	r2, [r3, #1]
 800a67a:	e00d      	b.n	800a698 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a67c:	78fa      	ldrb	r2, [r7, #3]
 800a67e:	4613      	mov	r3, r2
 800a680:	00db      	lsls	r3, r3, #3
 800a682:	1a9b      	subs	r3, r3, r2
 800a684:	009b      	lsls	r3, r3, #2
 800a686:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a68a:	687a      	ldr	r2, [r7, #4]
 800a68c:	4413      	add	r3, r2
 800a68e:	3304      	adds	r3, #4
 800a690:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	2200      	movs	r2, #0
 800a696:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	2201      	movs	r2, #1
 800a69c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a69e:	78fb      	ldrb	r3, [r7, #3]
 800a6a0:	f003 030f 	and.w	r3, r3, #15
 800a6a4:	b2da      	uxtb	r2, r3
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a6b0:	2b01      	cmp	r3, #1
 800a6b2:	d101      	bne.n	800a6b8 <HAL_PCD_EP_SetStall+0x82>
 800a6b4:	2302      	movs	r3, #2
 800a6b6:	e01e      	b.n	800a6f6 <HAL_PCD_EP_SetStall+0xc0>
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2201      	movs	r2, #1
 800a6bc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	68f9      	ldr	r1, [r7, #12]
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	f003 fa31 	bl	800db2e <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a6cc:	78fb      	ldrb	r3, [r7, #3]
 800a6ce:	f003 030f 	and.w	r3, r3, #15
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d10a      	bne.n	800a6ec <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6818      	ldr	r0, [r3, #0]
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	691b      	ldr	r3, [r3, #16]
 800a6de:	b2d9      	uxtb	r1, r3
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a6e6:	461a      	mov	r2, r3
 800a6e8:	f003 fc22 	bl	800df30 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800a6f4:	2300      	movs	r3, #0
}
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	3710      	adds	r7, #16
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd80      	pop	{r7, pc}

0800a6fe <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a6fe:	b580      	push	{r7, lr}
 800a700:	b084      	sub	sp, #16
 800a702:	af00      	add	r7, sp, #0
 800a704:	6078      	str	r0, [r7, #4]
 800a706:	460b      	mov	r3, r1
 800a708:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a70a:	78fb      	ldrb	r3, [r7, #3]
 800a70c:	f003 020f 	and.w	r2, r3, #15
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	685b      	ldr	r3, [r3, #4]
 800a714:	429a      	cmp	r2, r3
 800a716:	d901      	bls.n	800a71c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800a718:	2301      	movs	r3, #1
 800a71a:	e042      	b.n	800a7a2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a71c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a720:	2b00      	cmp	r3, #0
 800a722:	da0f      	bge.n	800a744 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a724:	78fb      	ldrb	r3, [r7, #3]
 800a726:	f003 020f 	and.w	r2, r3, #15
 800a72a:	4613      	mov	r3, r2
 800a72c:	00db      	lsls	r3, r3, #3
 800a72e:	1a9b      	subs	r3, r3, r2
 800a730:	009b      	lsls	r3, r3, #2
 800a732:	3338      	adds	r3, #56	; 0x38
 800a734:	687a      	ldr	r2, [r7, #4]
 800a736:	4413      	add	r3, r2
 800a738:	3304      	adds	r3, #4
 800a73a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	2201      	movs	r2, #1
 800a740:	705a      	strb	r2, [r3, #1]
 800a742:	e00f      	b.n	800a764 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a744:	78fb      	ldrb	r3, [r7, #3]
 800a746:	f003 020f 	and.w	r2, r3, #15
 800a74a:	4613      	mov	r3, r2
 800a74c:	00db      	lsls	r3, r3, #3
 800a74e:	1a9b      	subs	r3, r3, r2
 800a750:	009b      	lsls	r3, r3, #2
 800a752:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a756:	687a      	ldr	r2, [r7, #4]
 800a758:	4413      	add	r3, r2
 800a75a:	3304      	adds	r3, #4
 800a75c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	2200      	movs	r2, #0
 800a762:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	2200      	movs	r2, #0
 800a768:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a76a:	78fb      	ldrb	r3, [r7, #3]
 800a76c:	f003 030f 	and.w	r3, r3, #15
 800a770:	b2da      	uxtb	r2, r3
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a77c:	2b01      	cmp	r3, #1
 800a77e:	d101      	bne.n	800a784 <HAL_PCD_EP_ClrStall+0x86>
 800a780:	2302      	movs	r3, #2
 800a782:	e00e      	b.n	800a7a2 <HAL_PCD_EP_ClrStall+0xa4>
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2201      	movs	r2, #1
 800a788:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	68f9      	ldr	r1, [r7, #12]
 800a792:	4618      	mov	r0, r3
 800a794:	f003 fa39 	bl	800dc0a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2200      	movs	r2, #0
 800a79c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800a7a0:	2300      	movs	r3, #0
}
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	3710      	adds	r7, #16
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd80      	pop	{r7, pc}

0800a7aa <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a7aa:	b580      	push	{r7, lr}
 800a7ac:	b08a      	sub	sp, #40	; 0x28
 800a7ae:	af02      	add	r7, sp, #8
 800a7b0:	6078      	str	r0, [r7, #4]
 800a7b2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7ba:	697b      	ldr	r3, [r7, #20]
 800a7bc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800a7be:	683a      	ldr	r2, [r7, #0]
 800a7c0:	4613      	mov	r3, r2
 800a7c2:	00db      	lsls	r3, r3, #3
 800a7c4:	1a9b      	subs	r3, r3, r2
 800a7c6:	009b      	lsls	r3, r3, #2
 800a7c8:	3338      	adds	r3, #56	; 0x38
 800a7ca:	687a      	ldr	r2, [r7, #4]
 800a7cc:	4413      	add	r3, r2
 800a7ce:	3304      	adds	r3, #4
 800a7d0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	699a      	ldr	r2, [r3, #24]
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	695b      	ldr	r3, [r3, #20]
 800a7da:	429a      	cmp	r2, r3
 800a7dc:	d901      	bls.n	800a7e2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800a7de:	2301      	movs	r3, #1
 800a7e0:	e06c      	b.n	800a8bc <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	695a      	ldr	r2, [r3, #20]
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	699b      	ldr	r3, [r3, #24]
 800a7ea:	1ad3      	subs	r3, r2, r3
 800a7ec:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	689b      	ldr	r3, [r3, #8]
 800a7f2:	69fa      	ldr	r2, [r7, #28]
 800a7f4:	429a      	cmp	r2, r3
 800a7f6:	d902      	bls.n	800a7fe <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	689b      	ldr	r3, [r3, #8]
 800a7fc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800a7fe:	69fb      	ldr	r3, [r7, #28]
 800a800:	3303      	adds	r3, #3
 800a802:	089b      	lsrs	r3, r3, #2
 800a804:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a806:	e02b      	b.n	800a860 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	695a      	ldr	r2, [r3, #20]
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	699b      	ldr	r3, [r3, #24]
 800a810:	1ad3      	subs	r3, r2, r3
 800a812:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	689b      	ldr	r3, [r3, #8]
 800a818:	69fa      	ldr	r2, [r7, #28]
 800a81a:	429a      	cmp	r2, r3
 800a81c:	d902      	bls.n	800a824 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	689b      	ldr	r3, [r3, #8]
 800a822:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800a824:	69fb      	ldr	r3, [r7, #28]
 800a826:	3303      	adds	r3, #3
 800a828:	089b      	lsrs	r3, r3, #2
 800a82a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	68d9      	ldr	r1, [r3, #12]
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	b2da      	uxtb	r2, r3
 800a834:	69fb      	ldr	r3, [r7, #28]
 800a836:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a83c:	b2db      	uxtb	r3, r3
 800a83e:	9300      	str	r3, [sp, #0]
 800a840:	4603      	mov	r3, r0
 800a842:	6978      	ldr	r0, [r7, #20]
 800a844:	f003 f915 	bl	800da72 <USB_WritePacket>

    ep->xfer_buff  += len;
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	68da      	ldr	r2, [r3, #12]
 800a84c:	69fb      	ldr	r3, [r7, #28]
 800a84e:	441a      	add	r2, r3
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	699a      	ldr	r2, [r3, #24]
 800a858:	69fb      	ldr	r3, [r7, #28]
 800a85a:	441a      	add	r2, r3
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	015a      	lsls	r2, r3, #5
 800a864:	693b      	ldr	r3, [r7, #16]
 800a866:	4413      	add	r3, r2
 800a868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a86c:	699b      	ldr	r3, [r3, #24]
 800a86e:	b29b      	uxth	r3, r3
 800a870:	69ba      	ldr	r2, [r7, #24]
 800a872:	429a      	cmp	r2, r3
 800a874:	d809      	bhi.n	800a88a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	699a      	ldr	r2, [r3, #24]
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a87e:	429a      	cmp	r2, r3
 800a880:	d203      	bcs.n	800a88a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	695b      	ldr	r3, [r3, #20]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d1be      	bne.n	800a808 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	695a      	ldr	r2, [r3, #20]
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	699b      	ldr	r3, [r3, #24]
 800a892:	429a      	cmp	r2, r3
 800a894:	d811      	bhi.n	800a8ba <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	f003 030f 	and.w	r3, r3, #15
 800a89c:	2201      	movs	r2, #1
 800a89e:	fa02 f303 	lsl.w	r3, r2, r3
 800a8a2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a8a4:	693b      	ldr	r3, [r7, #16]
 800a8a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a8ac:	68bb      	ldr	r3, [r7, #8]
 800a8ae:	43db      	mvns	r3, r3
 800a8b0:	6939      	ldr	r1, [r7, #16]
 800a8b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a8b6:	4013      	ands	r3, r2
 800a8b8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800a8ba:	2300      	movs	r3, #0
}
 800a8bc:	4618      	mov	r0, r3
 800a8be:	3720      	adds	r7, #32
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	bd80      	pop	{r7, pc}

0800a8c4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b086      	sub	sp, #24
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
 800a8cc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8d4:	697b      	ldr	r3, [r7, #20]
 800a8d6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a8d8:	697b      	ldr	r3, [r7, #20]
 800a8da:	333c      	adds	r3, #60	; 0x3c
 800a8dc:	3304      	adds	r3, #4
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	015a      	lsls	r2, r3, #5
 800a8e6:	693b      	ldr	r3, [r7, #16]
 800a8e8:	4413      	add	r3, r2
 800a8ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8ee:	689b      	ldr	r3, [r3, #8]
 800a8f0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	691b      	ldr	r3, [r3, #16]
 800a8f6:	2b01      	cmp	r3, #1
 800a8f8:	f040 80b3 	bne.w	800aa62 <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800a8fc:	68bb      	ldr	r3, [r7, #8]
 800a8fe:	f003 0308 	and.w	r3, r3, #8
 800a902:	2b00      	cmp	r3, #0
 800a904:	d028      	beq.n	800a958 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	4a70      	ldr	r2, [pc, #448]	; (800aacc <PCD_EP_OutXfrComplete_int+0x208>)
 800a90a:	4293      	cmp	r3, r2
 800a90c:	d90e      	bls.n	800a92c <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a90e:	68bb      	ldr	r3, [r7, #8]
 800a910:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a914:	2b00      	cmp	r3, #0
 800a916:	d009      	beq.n	800a92c <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	015a      	lsls	r2, r3, #5
 800a91c:	693b      	ldr	r3, [r7, #16]
 800a91e:	4413      	add	r3, r2
 800a920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a924:	461a      	mov	r2, r3
 800a926:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a92a:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 800a92c:	6878      	ldr	r0, [r7, #4]
 800a92e:	f008 faf1 	bl	8012f14 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	6818      	ldr	r0, [r3, #0]
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a93c:	461a      	mov	r2, r3
 800a93e:	2101      	movs	r1, #1
 800a940:	f003 faf6 	bl	800df30 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	015a      	lsls	r2, r3, #5
 800a948:	693b      	ldr	r3, [r7, #16]
 800a94a:	4413      	add	r3, r2
 800a94c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a950:	461a      	mov	r2, r3
 800a952:	2308      	movs	r3, #8
 800a954:	6093      	str	r3, [r2, #8]
 800a956:	e0b3      	b.n	800aac0 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800a958:	68bb      	ldr	r3, [r7, #8]
 800a95a:	f003 0320 	and.w	r3, r3, #32
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d009      	beq.n	800a976 <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	015a      	lsls	r2, r3, #5
 800a966:	693b      	ldr	r3, [r7, #16]
 800a968:	4413      	add	r3, r2
 800a96a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a96e:	461a      	mov	r2, r3
 800a970:	2320      	movs	r3, #32
 800a972:	6093      	str	r3, [r2, #8]
 800a974:	e0a4      	b.n	800aac0 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800a976:	68bb      	ldr	r3, [r7, #8]
 800a978:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	f040 809f 	bne.w	800aac0 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	4a51      	ldr	r2, [pc, #324]	; (800aacc <PCD_EP_OutXfrComplete_int+0x208>)
 800a986:	4293      	cmp	r3, r2
 800a988:	d90f      	bls.n	800a9aa <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a98a:	68bb      	ldr	r3, [r7, #8]
 800a98c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a990:	2b00      	cmp	r3, #0
 800a992:	d00a      	beq.n	800a9aa <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	015a      	lsls	r2, r3, #5
 800a998:	693b      	ldr	r3, [r7, #16]
 800a99a:	4413      	add	r3, r2
 800a99c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9a0:	461a      	mov	r2, r3
 800a9a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a9a6:	6093      	str	r3, [r2, #8]
 800a9a8:	e08a      	b.n	800aac0 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800a9aa:	6879      	ldr	r1, [r7, #4]
 800a9ac:	683a      	ldr	r2, [r7, #0]
 800a9ae:	4613      	mov	r3, r2
 800a9b0:	00db      	lsls	r3, r3, #3
 800a9b2:	1a9b      	subs	r3, r3, r2
 800a9b4:	009b      	lsls	r3, r3, #2
 800a9b6:	440b      	add	r3, r1
 800a9b8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800a9bc:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	0159      	lsls	r1, r3, #5
 800a9c2:	693b      	ldr	r3, [r7, #16]
 800a9c4:	440b      	add	r3, r1
 800a9c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9ca:	691b      	ldr	r3, [r3, #16]
 800a9cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800a9d0:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800a9d2:	6878      	ldr	r0, [r7, #4]
 800a9d4:	683a      	ldr	r2, [r7, #0]
 800a9d6:	4613      	mov	r3, r2
 800a9d8:	00db      	lsls	r3, r3, #3
 800a9da:	1a9b      	subs	r3, r3, r2
 800a9dc:	009b      	lsls	r3, r3, #2
 800a9de:	4403      	add	r3, r0
 800a9e0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800a9e4:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800a9e6:	6879      	ldr	r1, [r7, #4]
 800a9e8:	683a      	ldr	r2, [r7, #0]
 800a9ea:	4613      	mov	r3, r2
 800a9ec:	00db      	lsls	r3, r3, #3
 800a9ee:	1a9b      	subs	r3, r3, r2
 800a9f0:	009b      	lsls	r3, r3, #2
 800a9f2:	440b      	add	r3, r1
 800a9f4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a9f8:	6819      	ldr	r1, [r3, #0]
 800a9fa:	6878      	ldr	r0, [r7, #4]
 800a9fc:	683a      	ldr	r2, [r7, #0]
 800a9fe:	4613      	mov	r3, r2
 800aa00:	00db      	lsls	r3, r3, #3
 800aa02:	1a9b      	subs	r3, r3, r2
 800aa04:	009b      	lsls	r3, r3, #2
 800aa06:	4403      	add	r3, r0
 800aa08:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	4419      	add	r1, r3
 800aa10:	6878      	ldr	r0, [r7, #4]
 800aa12:	683a      	ldr	r2, [r7, #0]
 800aa14:	4613      	mov	r3, r2
 800aa16:	00db      	lsls	r3, r3, #3
 800aa18:	1a9b      	subs	r3, r3, r2
 800aa1a:	009b      	lsls	r3, r3, #2
 800aa1c:	4403      	add	r3, r0
 800aa1e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800aa22:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	b2db      	uxtb	r3, r3
 800aa28:	4619      	mov	r1, r3
 800aa2a:	6878      	ldr	r0, [r7, #4]
 800aa2c:	f008 fa84 	bl	8012f38 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d144      	bne.n	800aac0 <PCD_EP_OutXfrComplete_int+0x1fc>
 800aa36:	6879      	ldr	r1, [r7, #4]
 800aa38:	683a      	ldr	r2, [r7, #0]
 800aa3a:	4613      	mov	r3, r2
 800aa3c:	00db      	lsls	r3, r3, #3
 800aa3e:	1a9b      	subs	r3, r3, r2
 800aa40:	009b      	lsls	r3, r3, #2
 800aa42:	440b      	add	r3, r1
 800aa44:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d138      	bne.n	800aac0 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	6818      	ldr	r0, [r3, #0]
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800aa58:	461a      	mov	r2, r3
 800aa5a:	2101      	movs	r1, #1
 800aa5c:	f003 fa68 	bl	800df30 <USB_EP0_OutStart>
 800aa60:	e02e      	b.n	800aac0 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	4a1a      	ldr	r2, [pc, #104]	; (800aad0 <PCD_EP_OutXfrComplete_int+0x20c>)
 800aa66:	4293      	cmp	r3, r2
 800aa68:	d124      	bne.n	800aab4 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800aa6a:	68bb      	ldr	r3, [r7, #8]
 800aa6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d00a      	beq.n	800aa8a <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	015a      	lsls	r2, r3, #5
 800aa78:	693b      	ldr	r3, [r7, #16]
 800aa7a:	4413      	add	r3, r2
 800aa7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa80:	461a      	mov	r2, r3
 800aa82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aa86:	6093      	str	r3, [r2, #8]
 800aa88:	e01a      	b.n	800aac0 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800aa8a:	68bb      	ldr	r3, [r7, #8]
 800aa8c:	f003 0320 	and.w	r3, r3, #32
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d008      	beq.n	800aaa6 <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	015a      	lsls	r2, r3, #5
 800aa98:	693b      	ldr	r3, [r7, #16]
 800aa9a:	4413      	add	r3, r2
 800aa9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aaa0:	461a      	mov	r2, r3
 800aaa2:	2320      	movs	r3, #32
 800aaa4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	b2db      	uxtb	r3, r3
 800aaaa:	4619      	mov	r1, r3
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	f008 fa43 	bl	8012f38 <HAL_PCD_DataOutStageCallback>
 800aab2:	e005      	b.n	800aac0 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	b2db      	uxtb	r3, r3
 800aab8:	4619      	mov	r1, r3
 800aaba:	6878      	ldr	r0, [r7, #4]
 800aabc:	f008 fa3c 	bl	8012f38 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800aac0:	2300      	movs	r3, #0
}
 800aac2:	4618      	mov	r0, r3
 800aac4:	3718      	adds	r7, #24
 800aac6:	46bd      	mov	sp, r7
 800aac8:	bd80      	pop	{r7, pc}
 800aaca:	bf00      	nop
 800aacc:	4f54300a 	.word	0x4f54300a
 800aad0:	4f54310a 	.word	0x4f54310a

0800aad4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b086      	sub	sp, #24
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
 800aadc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aae4:	697b      	ldr	r3, [r7, #20]
 800aae6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800aae8:	697b      	ldr	r3, [r7, #20]
 800aaea:	333c      	adds	r3, #60	; 0x3c
 800aaec:	3304      	adds	r3, #4
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	015a      	lsls	r2, r3, #5
 800aaf6:	693b      	ldr	r3, [r7, #16]
 800aaf8:	4413      	add	r3, r2
 800aafa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aafe:	689b      	ldr	r3, [r3, #8]
 800ab00:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	691b      	ldr	r3, [r3, #16]
 800ab06:	2b01      	cmp	r3, #1
 800ab08:	d113      	bne.n	800ab32 <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	4a1f      	ldr	r2, [pc, #124]	; (800ab8c <PCD_EP_OutSetupPacket_int+0xb8>)
 800ab0e:	4293      	cmp	r3, r2
 800ab10:	d922      	bls.n	800ab58 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800ab12:	68bb      	ldr	r3, [r7, #8]
 800ab14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d01d      	beq.n	800ab58 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	015a      	lsls	r2, r3, #5
 800ab20:	693b      	ldr	r3, [r7, #16]
 800ab22:	4413      	add	r3, r2
 800ab24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab28:	461a      	mov	r2, r3
 800ab2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab2e:	6093      	str	r3, [r2, #8]
 800ab30:	e012      	b.n	800ab58 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	4a16      	ldr	r2, [pc, #88]	; (800ab90 <PCD_EP_OutSetupPacket_int+0xbc>)
 800ab36:	4293      	cmp	r3, r2
 800ab38:	d10e      	bne.n	800ab58 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800ab3a:	68bb      	ldr	r3, [r7, #8]
 800ab3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d009      	beq.n	800ab58 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	015a      	lsls	r2, r3, #5
 800ab48:	693b      	ldr	r3, [r7, #16]
 800ab4a:	4413      	add	r3, r2
 800ab4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab50:	461a      	mov	r2, r3
 800ab52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab56:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800ab58:	6878      	ldr	r0, [r7, #4]
 800ab5a:	f008 f9db 	bl	8012f14 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	4a0a      	ldr	r2, [pc, #40]	; (800ab8c <PCD_EP_OutSetupPacket_int+0xb8>)
 800ab62:	4293      	cmp	r3, r2
 800ab64:	d90c      	bls.n	800ab80 <PCD_EP_OutSetupPacket_int+0xac>
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	691b      	ldr	r3, [r3, #16]
 800ab6a:	2b01      	cmp	r3, #1
 800ab6c:	d108      	bne.n	800ab80 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6818      	ldr	r0, [r3, #0]
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ab78:	461a      	mov	r2, r3
 800ab7a:	2101      	movs	r1, #1
 800ab7c:	f003 f9d8 	bl	800df30 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800ab80:	2300      	movs	r3, #0
}
 800ab82:	4618      	mov	r0, r3
 800ab84:	3718      	adds	r7, #24
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd80      	pop	{r7, pc}
 800ab8a:	bf00      	nop
 800ab8c:	4f54300a 	.word	0x4f54300a
 800ab90:	4f54310a 	.word	0x4f54310a

0800ab94 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800ab94:	b480      	push	{r7}
 800ab96:	b085      	sub	sp, #20
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
 800ab9c:	460b      	mov	r3, r1
 800ab9e:	70fb      	strb	r3, [r7, #3]
 800aba0:	4613      	mov	r3, r2
 800aba2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abaa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800abac:	78fb      	ldrb	r3, [r7, #3]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d107      	bne.n	800abc2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800abb2:	883b      	ldrh	r3, [r7, #0]
 800abb4:	0419      	lsls	r1, r3, #16
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	68ba      	ldr	r2, [r7, #8]
 800abbc:	430a      	orrs	r2, r1
 800abbe:	629a      	str	r2, [r3, #40]	; 0x28
 800abc0:	e028      	b.n	800ac14 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abc8:	0c1b      	lsrs	r3, r3, #16
 800abca:	68ba      	ldr	r2, [r7, #8]
 800abcc:	4413      	add	r3, r2
 800abce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800abd0:	2300      	movs	r3, #0
 800abd2:	73fb      	strb	r3, [r7, #15]
 800abd4:	e00d      	b.n	800abf2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681a      	ldr	r2, [r3, #0]
 800abda:	7bfb      	ldrb	r3, [r7, #15]
 800abdc:	3340      	adds	r3, #64	; 0x40
 800abde:	009b      	lsls	r3, r3, #2
 800abe0:	4413      	add	r3, r2
 800abe2:	685b      	ldr	r3, [r3, #4]
 800abe4:	0c1b      	lsrs	r3, r3, #16
 800abe6:	68ba      	ldr	r2, [r7, #8]
 800abe8:	4413      	add	r3, r2
 800abea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800abec:	7bfb      	ldrb	r3, [r7, #15]
 800abee:	3301      	adds	r3, #1
 800abf0:	73fb      	strb	r3, [r7, #15]
 800abf2:	7bfa      	ldrb	r2, [r7, #15]
 800abf4:	78fb      	ldrb	r3, [r7, #3]
 800abf6:	3b01      	subs	r3, #1
 800abf8:	429a      	cmp	r2, r3
 800abfa:	d3ec      	bcc.n	800abd6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800abfc:	883b      	ldrh	r3, [r7, #0]
 800abfe:	0418      	lsls	r0, r3, #16
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	6819      	ldr	r1, [r3, #0]
 800ac04:	78fb      	ldrb	r3, [r7, #3]
 800ac06:	3b01      	subs	r3, #1
 800ac08:	68ba      	ldr	r2, [r7, #8]
 800ac0a:	4302      	orrs	r2, r0
 800ac0c:	3340      	adds	r3, #64	; 0x40
 800ac0e:	009b      	lsls	r3, r3, #2
 800ac10:	440b      	add	r3, r1
 800ac12:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800ac14:	2300      	movs	r3, #0
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	3714      	adds	r7, #20
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac20:	4770      	bx	lr

0800ac22 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800ac22:	b480      	push	{r7}
 800ac24:	b083      	sub	sp, #12
 800ac26:	af00      	add	r7, sp, #0
 800ac28:	6078      	str	r0, [r7, #4]
 800ac2a:	460b      	mov	r3, r1
 800ac2c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	887a      	ldrh	r2, [r7, #2]
 800ac34:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800ac36:	2300      	movs	r3, #0
}
 800ac38:	4618      	mov	r0, r3
 800ac3a:	370c      	adds	r7, #12
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac42:	4770      	bx	lr

0800ac44 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800ac44:	b480      	push	{r7}
 800ac46:	b083      	sub	sp, #12
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
 800ac4c:	460b      	mov	r3, r1
 800ac4e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800ac50:	bf00      	nop
 800ac52:	370c      	adds	r7, #12
 800ac54:	46bd      	mov	sp, r7
 800ac56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5a:	4770      	bx	lr

0800ac5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b086      	sub	sp, #24
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d101      	bne.n	800ac6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ac6a:	2301      	movs	r3, #1
 800ac6c:	e25b      	b.n	800b126 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	f003 0301 	and.w	r3, r3, #1
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d075      	beq.n	800ad66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800ac7a:	4ba3      	ldr	r3, [pc, #652]	; (800af08 <HAL_RCC_OscConfig+0x2ac>)
 800ac7c:	689b      	ldr	r3, [r3, #8]
 800ac7e:	f003 030c 	and.w	r3, r3, #12
 800ac82:	2b04      	cmp	r3, #4
 800ac84:	d00c      	beq.n	800aca0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ac86:	4ba0      	ldr	r3, [pc, #640]	; (800af08 <HAL_RCC_OscConfig+0x2ac>)
 800ac88:	689b      	ldr	r3, [r3, #8]
 800ac8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800ac8e:	2b08      	cmp	r3, #8
 800ac90:	d112      	bne.n	800acb8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ac92:	4b9d      	ldr	r3, [pc, #628]	; (800af08 <HAL_RCC_OscConfig+0x2ac>)
 800ac94:	685b      	ldr	r3, [r3, #4]
 800ac96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ac9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ac9e:	d10b      	bne.n	800acb8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aca0:	4b99      	ldr	r3, [pc, #612]	; (800af08 <HAL_RCC_OscConfig+0x2ac>)
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d05b      	beq.n	800ad64 <HAL_RCC_OscConfig+0x108>
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	685b      	ldr	r3, [r3, #4]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d157      	bne.n	800ad64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800acb4:	2301      	movs	r3, #1
 800acb6:	e236      	b.n	800b126 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	685b      	ldr	r3, [r3, #4]
 800acbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800acc0:	d106      	bne.n	800acd0 <HAL_RCC_OscConfig+0x74>
 800acc2:	4b91      	ldr	r3, [pc, #580]	; (800af08 <HAL_RCC_OscConfig+0x2ac>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	4a90      	ldr	r2, [pc, #576]	; (800af08 <HAL_RCC_OscConfig+0x2ac>)
 800acc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800accc:	6013      	str	r3, [r2, #0]
 800acce:	e01d      	b.n	800ad0c <HAL_RCC_OscConfig+0xb0>
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	685b      	ldr	r3, [r3, #4]
 800acd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800acd8:	d10c      	bne.n	800acf4 <HAL_RCC_OscConfig+0x98>
 800acda:	4b8b      	ldr	r3, [pc, #556]	; (800af08 <HAL_RCC_OscConfig+0x2ac>)
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	4a8a      	ldr	r2, [pc, #552]	; (800af08 <HAL_RCC_OscConfig+0x2ac>)
 800ace0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ace4:	6013      	str	r3, [r2, #0]
 800ace6:	4b88      	ldr	r3, [pc, #544]	; (800af08 <HAL_RCC_OscConfig+0x2ac>)
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	4a87      	ldr	r2, [pc, #540]	; (800af08 <HAL_RCC_OscConfig+0x2ac>)
 800acec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800acf0:	6013      	str	r3, [r2, #0]
 800acf2:	e00b      	b.n	800ad0c <HAL_RCC_OscConfig+0xb0>
 800acf4:	4b84      	ldr	r3, [pc, #528]	; (800af08 <HAL_RCC_OscConfig+0x2ac>)
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	4a83      	ldr	r2, [pc, #524]	; (800af08 <HAL_RCC_OscConfig+0x2ac>)
 800acfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800acfe:	6013      	str	r3, [r2, #0]
 800ad00:	4b81      	ldr	r3, [pc, #516]	; (800af08 <HAL_RCC_OscConfig+0x2ac>)
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	4a80      	ldr	r2, [pc, #512]	; (800af08 <HAL_RCC_OscConfig+0x2ac>)
 800ad06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ad0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	685b      	ldr	r3, [r3, #4]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d013      	beq.n	800ad3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ad14:	f7fd ff60 	bl	8008bd8 <HAL_GetTick>
 800ad18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ad1a:	e008      	b.n	800ad2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ad1c:	f7fd ff5c 	bl	8008bd8 <HAL_GetTick>
 800ad20:	4602      	mov	r2, r0
 800ad22:	693b      	ldr	r3, [r7, #16]
 800ad24:	1ad3      	subs	r3, r2, r3
 800ad26:	2b64      	cmp	r3, #100	; 0x64
 800ad28:	d901      	bls.n	800ad2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800ad2a:	2303      	movs	r3, #3
 800ad2c:	e1fb      	b.n	800b126 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ad2e:	4b76      	ldr	r3, [pc, #472]	; (800af08 <HAL_RCC_OscConfig+0x2ac>)
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d0f0      	beq.n	800ad1c <HAL_RCC_OscConfig+0xc0>
 800ad3a:	e014      	b.n	800ad66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ad3c:	f7fd ff4c 	bl	8008bd8 <HAL_GetTick>
 800ad40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ad42:	e008      	b.n	800ad56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ad44:	f7fd ff48 	bl	8008bd8 <HAL_GetTick>
 800ad48:	4602      	mov	r2, r0
 800ad4a:	693b      	ldr	r3, [r7, #16]
 800ad4c:	1ad3      	subs	r3, r2, r3
 800ad4e:	2b64      	cmp	r3, #100	; 0x64
 800ad50:	d901      	bls.n	800ad56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ad52:	2303      	movs	r3, #3
 800ad54:	e1e7      	b.n	800b126 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ad56:	4b6c      	ldr	r3, [pc, #432]	; (800af08 <HAL_RCC_OscConfig+0x2ac>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d1f0      	bne.n	800ad44 <HAL_RCC_OscConfig+0xe8>
 800ad62:	e000      	b.n	800ad66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ad64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	f003 0302 	and.w	r3, r3, #2
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d063      	beq.n	800ae3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800ad72:	4b65      	ldr	r3, [pc, #404]	; (800af08 <HAL_RCC_OscConfig+0x2ac>)
 800ad74:	689b      	ldr	r3, [r3, #8]
 800ad76:	f003 030c 	and.w	r3, r3, #12
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d00b      	beq.n	800ad96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ad7e:	4b62      	ldr	r3, [pc, #392]	; (800af08 <HAL_RCC_OscConfig+0x2ac>)
 800ad80:	689b      	ldr	r3, [r3, #8]
 800ad82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800ad86:	2b08      	cmp	r3, #8
 800ad88:	d11c      	bne.n	800adc4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ad8a:	4b5f      	ldr	r3, [pc, #380]	; (800af08 <HAL_RCC_OscConfig+0x2ac>)
 800ad8c:	685b      	ldr	r3, [r3, #4]
 800ad8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d116      	bne.n	800adc4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ad96:	4b5c      	ldr	r3, [pc, #368]	; (800af08 <HAL_RCC_OscConfig+0x2ac>)
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	f003 0302 	and.w	r3, r3, #2
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d005      	beq.n	800adae <HAL_RCC_OscConfig+0x152>
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	68db      	ldr	r3, [r3, #12]
 800ada6:	2b01      	cmp	r3, #1
 800ada8:	d001      	beq.n	800adae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800adaa:	2301      	movs	r3, #1
 800adac:	e1bb      	b.n	800b126 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800adae:	4b56      	ldr	r3, [pc, #344]	; (800af08 <HAL_RCC_OscConfig+0x2ac>)
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	691b      	ldr	r3, [r3, #16]
 800adba:	00db      	lsls	r3, r3, #3
 800adbc:	4952      	ldr	r1, [pc, #328]	; (800af08 <HAL_RCC_OscConfig+0x2ac>)
 800adbe:	4313      	orrs	r3, r2
 800adc0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800adc2:	e03a      	b.n	800ae3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	68db      	ldr	r3, [r3, #12]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d020      	beq.n	800ae0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800adcc:	4b4f      	ldr	r3, [pc, #316]	; (800af0c <HAL_RCC_OscConfig+0x2b0>)
 800adce:	2201      	movs	r2, #1
 800add0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800add2:	f7fd ff01 	bl	8008bd8 <HAL_GetTick>
 800add6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800add8:	e008      	b.n	800adec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800adda:	f7fd fefd 	bl	8008bd8 <HAL_GetTick>
 800adde:	4602      	mov	r2, r0
 800ade0:	693b      	ldr	r3, [r7, #16]
 800ade2:	1ad3      	subs	r3, r2, r3
 800ade4:	2b02      	cmp	r3, #2
 800ade6:	d901      	bls.n	800adec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800ade8:	2303      	movs	r3, #3
 800adea:	e19c      	b.n	800b126 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800adec:	4b46      	ldr	r3, [pc, #280]	; (800af08 <HAL_RCC_OscConfig+0x2ac>)
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	f003 0302 	and.w	r3, r3, #2
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d0f0      	beq.n	800adda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800adf8:	4b43      	ldr	r3, [pc, #268]	; (800af08 <HAL_RCC_OscConfig+0x2ac>)
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	691b      	ldr	r3, [r3, #16]
 800ae04:	00db      	lsls	r3, r3, #3
 800ae06:	4940      	ldr	r1, [pc, #256]	; (800af08 <HAL_RCC_OscConfig+0x2ac>)
 800ae08:	4313      	orrs	r3, r2
 800ae0a:	600b      	str	r3, [r1, #0]
 800ae0c:	e015      	b.n	800ae3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ae0e:	4b3f      	ldr	r3, [pc, #252]	; (800af0c <HAL_RCC_OscConfig+0x2b0>)
 800ae10:	2200      	movs	r2, #0
 800ae12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae14:	f7fd fee0 	bl	8008bd8 <HAL_GetTick>
 800ae18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ae1a:	e008      	b.n	800ae2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ae1c:	f7fd fedc 	bl	8008bd8 <HAL_GetTick>
 800ae20:	4602      	mov	r2, r0
 800ae22:	693b      	ldr	r3, [r7, #16]
 800ae24:	1ad3      	subs	r3, r2, r3
 800ae26:	2b02      	cmp	r3, #2
 800ae28:	d901      	bls.n	800ae2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800ae2a:	2303      	movs	r3, #3
 800ae2c:	e17b      	b.n	800b126 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ae2e:	4b36      	ldr	r3, [pc, #216]	; (800af08 <HAL_RCC_OscConfig+0x2ac>)
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	f003 0302 	and.w	r3, r3, #2
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d1f0      	bne.n	800ae1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	f003 0308 	and.w	r3, r3, #8
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d030      	beq.n	800aea8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	695b      	ldr	r3, [r3, #20]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d016      	beq.n	800ae7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ae4e:	4b30      	ldr	r3, [pc, #192]	; (800af10 <HAL_RCC_OscConfig+0x2b4>)
 800ae50:	2201      	movs	r2, #1
 800ae52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae54:	f7fd fec0 	bl	8008bd8 <HAL_GetTick>
 800ae58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ae5a:	e008      	b.n	800ae6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ae5c:	f7fd febc 	bl	8008bd8 <HAL_GetTick>
 800ae60:	4602      	mov	r2, r0
 800ae62:	693b      	ldr	r3, [r7, #16]
 800ae64:	1ad3      	subs	r3, r2, r3
 800ae66:	2b02      	cmp	r3, #2
 800ae68:	d901      	bls.n	800ae6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800ae6a:	2303      	movs	r3, #3
 800ae6c:	e15b      	b.n	800b126 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ae6e:	4b26      	ldr	r3, [pc, #152]	; (800af08 <HAL_RCC_OscConfig+0x2ac>)
 800ae70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae72:	f003 0302 	and.w	r3, r3, #2
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d0f0      	beq.n	800ae5c <HAL_RCC_OscConfig+0x200>
 800ae7a:	e015      	b.n	800aea8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ae7c:	4b24      	ldr	r3, [pc, #144]	; (800af10 <HAL_RCC_OscConfig+0x2b4>)
 800ae7e:	2200      	movs	r2, #0
 800ae80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ae82:	f7fd fea9 	bl	8008bd8 <HAL_GetTick>
 800ae86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ae88:	e008      	b.n	800ae9c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ae8a:	f7fd fea5 	bl	8008bd8 <HAL_GetTick>
 800ae8e:	4602      	mov	r2, r0
 800ae90:	693b      	ldr	r3, [r7, #16]
 800ae92:	1ad3      	subs	r3, r2, r3
 800ae94:	2b02      	cmp	r3, #2
 800ae96:	d901      	bls.n	800ae9c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800ae98:	2303      	movs	r3, #3
 800ae9a:	e144      	b.n	800b126 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ae9c:	4b1a      	ldr	r3, [pc, #104]	; (800af08 <HAL_RCC_OscConfig+0x2ac>)
 800ae9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aea0:	f003 0302 	and.w	r3, r3, #2
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d1f0      	bne.n	800ae8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	f003 0304 	and.w	r3, r3, #4
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	f000 80a0 	beq.w	800aff6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800aeba:	4b13      	ldr	r3, [pc, #76]	; (800af08 <HAL_RCC_OscConfig+0x2ac>)
 800aebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d10f      	bne.n	800aee6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800aec6:	2300      	movs	r3, #0
 800aec8:	60bb      	str	r3, [r7, #8]
 800aeca:	4b0f      	ldr	r3, [pc, #60]	; (800af08 <HAL_RCC_OscConfig+0x2ac>)
 800aecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aece:	4a0e      	ldr	r2, [pc, #56]	; (800af08 <HAL_RCC_OscConfig+0x2ac>)
 800aed0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aed4:	6413      	str	r3, [r2, #64]	; 0x40
 800aed6:	4b0c      	ldr	r3, [pc, #48]	; (800af08 <HAL_RCC_OscConfig+0x2ac>)
 800aed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aede:	60bb      	str	r3, [r7, #8]
 800aee0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800aee2:	2301      	movs	r3, #1
 800aee4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aee6:	4b0b      	ldr	r3, [pc, #44]	; (800af14 <HAL_RCC_OscConfig+0x2b8>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d121      	bne.n	800af36 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800aef2:	4b08      	ldr	r3, [pc, #32]	; (800af14 <HAL_RCC_OscConfig+0x2b8>)
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	4a07      	ldr	r2, [pc, #28]	; (800af14 <HAL_RCC_OscConfig+0x2b8>)
 800aef8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aefc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800aefe:	f7fd fe6b 	bl	8008bd8 <HAL_GetTick>
 800af02:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800af04:	e011      	b.n	800af2a <HAL_RCC_OscConfig+0x2ce>
 800af06:	bf00      	nop
 800af08:	40023800 	.word	0x40023800
 800af0c:	42470000 	.word	0x42470000
 800af10:	42470e80 	.word	0x42470e80
 800af14:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800af18:	f7fd fe5e 	bl	8008bd8 <HAL_GetTick>
 800af1c:	4602      	mov	r2, r0
 800af1e:	693b      	ldr	r3, [r7, #16]
 800af20:	1ad3      	subs	r3, r2, r3
 800af22:	2b02      	cmp	r3, #2
 800af24:	d901      	bls.n	800af2a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800af26:	2303      	movs	r3, #3
 800af28:	e0fd      	b.n	800b126 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800af2a:	4b81      	ldr	r3, [pc, #516]	; (800b130 <HAL_RCC_OscConfig+0x4d4>)
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af32:	2b00      	cmp	r3, #0
 800af34:	d0f0      	beq.n	800af18 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	689b      	ldr	r3, [r3, #8]
 800af3a:	2b01      	cmp	r3, #1
 800af3c:	d106      	bne.n	800af4c <HAL_RCC_OscConfig+0x2f0>
 800af3e:	4b7d      	ldr	r3, [pc, #500]	; (800b134 <HAL_RCC_OscConfig+0x4d8>)
 800af40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af42:	4a7c      	ldr	r2, [pc, #496]	; (800b134 <HAL_RCC_OscConfig+0x4d8>)
 800af44:	f043 0301 	orr.w	r3, r3, #1
 800af48:	6713      	str	r3, [r2, #112]	; 0x70
 800af4a:	e01c      	b.n	800af86 <HAL_RCC_OscConfig+0x32a>
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	689b      	ldr	r3, [r3, #8]
 800af50:	2b05      	cmp	r3, #5
 800af52:	d10c      	bne.n	800af6e <HAL_RCC_OscConfig+0x312>
 800af54:	4b77      	ldr	r3, [pc, #476]	; (800b134 <HAL_RCC_OscConfig+0x4d8>)
 800af56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af58:	4a76      	ldr	r2, [pc, #472]	; (800b134 <HAL_RCC_OscConfig+0x4d8>)
 800af5a:	f043 0304 	orr.w	r3, r3, #4
 800af5e:	6713      	str	r3, [r2, #112]	; 0x70
 800af60:	4b74      	ldr	r3, [pc, #464]	; (800b134 <HAL_RCC_OscConfig+0x4d8>)
 800af62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af64:	4a73      	ldr	r2, [pc, #460]	; (800b134 <HAL_RCC_OscConfig+0x4d8>)
 800af66:	f043 0301 	orr.w	r3, r3, #1
 800af6a:	6713      	str	r3, [r2, #112]	; 0x70
 800af6c:	e00b      	b.n	800af86 <HAL_RCC_OscConfig+0x32a>
 800af6e:	4b71      	ldr	r3, [pc, #452]	; (800b134 <HAL_RCC_OscConfig+0x4d8>)
 800af70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af72:	4a70      	ldr	r2, [pc, #448]	; (800b134 <HAL_RCC_OscConfig+0x4d8>)
 800af74:	f023 0301 	bic.w	r3, r3, #1
 800af78:	6713      	str	r3, [r2, #112]	; 0x70
 800af7a:	4b6e      	ldr	r3, [pc, #440]	; (800b134 <HAL_RCC_OscConfig+0x4d8>)
 800af7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af7e:	4a6d      	ldr	r2, [pc, #436]	; (800b134 <HAL_RCC_OscConfig+0x4d8>)
 800af80:	f023 0304 	bic.w	r3, r3, #4
 800af84:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	689b      	ldr	r3, [r3, #8]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d015      	beq.n	800afba <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800af8e:	f7fd fe23 	bl	8008bd8 <HAL_GetTick>
 800af92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800af94:	e00a      	b.n	800afac <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800af96:	f7fd fe1f 	bl	8008bd8 <HAL_GetTick>
 800af9a:	4602      	mov	r2, r0
 800af9c:	693b      	ldr	r3, [r7, #16]
 800af9e:	1ad3      	subs	r3, r2, r3
 800afa0:	f241 3288 	movw	r2, #5000	; 0x1388
 800afa4:	4293      	cmp	r3, r2
 800afa6:	d901      	bls.n	800afac <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800afa8:	2303      	movs	r3, #3
 800afaa:	e0bc      	b.n	800b126 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800afac:	4b61      	ldr	r3, [pc, #388]	; (800b134 <HAL_RCC_OscConfig+0x4d8>)
 800afae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afb0:	f003 0302 	and.w	r3, r3, #2
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d0ee      	beq.n	800af96 <HAL_RCC_OscConfig+0x33a>
 800afb8:	e014      	b.n	800afe4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800afba:	f7fd fe0d 	bl	8008bd8 <HAL_GetTick>
 800afbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800afc0:	e00a      	b.n	800afd8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800afc2:	f7fd fe09 	bl	8008bd8 <HAL_GetTick>
 800afc6:	4602      	mov	r2, r0
 800afc8:	693b      	ldr	r3, [r7, #16]
 800afca:	1ad3      	subs	r3, r2, r3
 800afcc:	f241 3288 	movw	r2, #5000	; 0x1388
 800afd0:	4293      	cmp	r3, r2
 800afd2:	d901      	bls.n	800afd8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800afd4:	2303      	movs	r3, #3
 800afd6:	e0a6      	b.n	800b126 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800afd8:	4b56      	ldr	r3, [pc, #344]	; (800b134 <HAL_RCC_OscConfig+0x4d8>)
 800afda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afdc:	f003 0302 	and.w	r3, r3, #2
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d1ee      	bne.n	800afc2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800afe4:	7dfb      	ldrb	r3, [r7, #23]
 800afe6:	2b01      	cmp	r3, #1
 800afe8:	d105      	bne.n	800aff6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800afea:	4b52      	ldr	r3, [pc, #328]	; (800b134 <HAL_RCC_OscConfig+0x4d8>)
 800afec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afee:	4a51      	ldr	r2, [pc, #324]	; (800b134 <HAL_RCC_OscConfig+0x4d8>)
 800aff0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aff4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	699b      	ldr	r3, [r3, #24]
 800affa:	2b00      	cmp	r3, #0
 800affc:	f000 8092 	beq.w	800b124 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b000:	4b4c      	ldr	r3, [pc, #304]	; (800b134 <HAL_RCC_OscConfig+0x4d8>)
 800b002:	689b      	ldr	r3, [r3, #8]
 800b004:	f003 030c 	and.w	r3, r3, #12
 800b008:	2b08      	cmp	r3, #8
 800b00a:	d05c      	beq.n	800b0c6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	699b      	ldr	r3, [r3, #24]
 800b010:	2b02      	cmp	r3, #2
 800b012:	d141      	bne.n	800b098 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b014:	4b48      	ldr	r3, [pc, #288]	; (800b138 <HAL_RCC_OscConfig+0x4dc>)
 800b016:	2200      	movs	r2, #0
 800b018:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b01a:	f7fd fddd 	bl	8008bd8 <HAL_GetTick>
 800b01e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b020:	e008      	b.n	800b034 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b022:	f7fd fdd9 	bl	8008bd8 <HAL_GetTick>
 800b026:	4602      	mov	r2, r0
 800b028:	693b      	ldr	r3, [r7, #16]
 800b02a:	1ad3      	subs	r3, r2, r3
 800b02c:	2b02      	cmp	r3, #2
 800b02e:	d901      	bls.n	800b034 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800b030:	2303      	movs	r3, #3
 800b032:	e078      	b.n	800b126 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b034:	4b3f      	ldr	r3, [pc, #252]	; (800b134 <HAL_RCC_OscConfig+0x4d8>)
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d1f0      	bne.n	800b022 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	69da      	ldr	r2, [r3, #28]
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	6a1b      	ldr	r3, [r3, #32]
 800b048:	431a      	orrs	r2, r3
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b04e:	019b      	lsls	r3, r3, #6
 800b050:	431a      	orrs	r2, r3
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b056:	085b      	lsrs	r3, r3, #1
 800b058:	3b01      	subs	r3, #1
 800b05a:	041b      	lsls	r3, r3, #16
 800b05c:	431a      	orrs	r2, r3
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b062:	061b      	lsls	r3, r3, #24
 800b064:	4933      	ldr	r1, [pc, #204]	; (800b134 <HAL_RCC_OscConfig+0x4d8>)
 800b066:	4313      	orrs	r3, r2
 800b068:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b06a:	4b33      	ldr	r3, [pc, #204]	; (800b138 <HAL_RCC_OscConfig+0x4dc>)
 800b06c:	2201      	movs	r2, #1
 800b06e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b070:	f7fd fdb2 	bl	8008bd8 <HAL_GetTick>
 800b074:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b076:	e008      	b.n	800b08a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b078:	f7fd fdae 	bl	8008bd8 <HAL_GetTick>
 800b07c:	4602      	mov	r2, r0
 800b07e:	693b      	ldr	r3, [r7, #16]
 800b080:	1ad3      	subs	r3, r2, r3
 800b082:	2b02      	cmp	r3, #2
 800b084:	d901      	bls.n	800b08a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800b086:	2303      	movs	r3, #3
 800b088:	e04d      	b.n	800b126 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b08a:	4b2a      	ldr	r3, [pc, #168]	; (800b134 <HAL_RCC_OscConfig+0x4d8>)
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b092:	2b00      	cmp	r3, #0
 800b094:	d0f0      	beq.n	800b078 <HAL_RCC_OscConfig+0x41c>
 800b096:	e045      	b.n	800b124 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b098:	4b27      	ldr	r3, [pc, #156]	; (800b138 <HAL_RCC_OscConfig+0x4dc>)
 800b09a:	2200      	movs	r2, #0
 800b09c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b09e:	f7fd fd9b 	bl	8008bd8 <HAL_GetTick>
 800b0a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b0a4:	e008      	b.n	800b0b8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b0a6:	f7fd fd97 	bl	8008bd8 <HAL_GetTick>
 800b0aa:	4602      	mov	r2, r0
 800b0ac:	693b      	ldr	r3, [r7, #16]
 800b0ae:	1ad3      	subs	r3, r2, r3
 800b0b0:	2b02      	cmp	r3, #2
 800b0b2:	d901      	bls.n	800b0b8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800b0b4:	2303      	movs	r3, #3
 800b0b6:	e036      	b.n	800b126 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b0b8:	4b1e      	ldr	r3, [pc, #120]	; (800b134 <HAL_RCC_OscConfig+0x4d8>)
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d1f0      	bne.n	800b0a6 <HAL_RCC_OscConfig+0x44a>
 800b0c4:	e02e      	b.n	800b124 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	699b      	ldr	r3, [r3, #24]
 800b0ca:	2b01      	cmp	r3, #1
 800b0cc:	d101      	bne.n	800b0d2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800b0ce:	2301      	movs	r3, #1
 800b0d0:	e029      	b.n	800b126 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800b0d2:	4b18      	ldr	r3, [pc, #96]	; (800b134 <HAL_RCC_OscConfig+0x4d8>)
 800b0d4:	689b      	ldr	r3, [r3, #8]
 800b0d6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	69db      	ldr	r3, [r3, #28]
 800b0e2:	429a      	cmp	r2, r3
 800b0e4:	d11c      	bne.n	800b120 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b0f0:	429a      	cmp	r2, r3
 800b0f2:	d115      	bne.n	800b120 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800b0f4:	68fa      	ldr	r2, [r7, #12]
 800b0f6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800b0fa:	4013      	ands	r3, r2
 800b0fc:	687a      	ldr	r2, [r7, #4]
 800b0fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b100:	4293      	cmp	r3, r2
 800b102:	d10d      	bne.n	800b120 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800b10e:	429a      	cmp	r2, r3
 800b110:	d106      	bne.n	800b120 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800b11c:	429a      	cmp	r2, r3
 800b11e:	d001      	beq.n	800b124 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800b120:	2301      	movs	r3, #1
 800b122:	e000      	b.n	800b126 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800b124:	2300      	movs	r3, #0
}
 800b126:	4618      	mov	r0, r3
 800b128:	3718      	adds	r7, #24
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}
 800b12e:	bf00      	nop
 800b130:	40007000 	.word	0x40007000
 800b134:	40023800 	.word	0x40023800
 800b138:	42470060 	.word	0x42470060

0800b13c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b084      	sub	sp, #16
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
 800b144:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d101      	bne.n	800b150 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b14c:	2301      	movs	r3, #1
 800b14e:	e0cc      	b.n	800b2ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b150:	4b68      	ldr	r3, [pc, #416]	; (800b2f4 <HAL_RCC_ClockConfig+0x1b8>)
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	f003 030f 	and.w	r3, r3, #15
 800b158:	683a      	ldr	r2, [r7, #0]
 800b15a:	429a      	cmp	r2, r3
 800b15c:	d90c      	bls.n	800b178 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b15e:	4b65      	ldr	r3, [pc, #404]	; (800b2f4 <HAL_RCC_ClockConfig+0x1b8>)
 800b160:	683a      	ldr	r2, [r7, #0]
 800b162:	b2d2      	uxtb	r2, r2
 800b164:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b166:	4b63      	ldr	r3, [pc, #396]	; (800b2f4 <HAL_RCC_ClockConfig+0x1b8>)
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	f003 030f 	and.w	r3, r3, #15
 800b16e:	683a      	ldr	r2, [r7, #0]
 800b170:	429a      	cmp	r2, r3
 800b172:	d001      	beq.n	800b178 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b174:	2301      	movs	r3, #1
 800b176:	e0b8      	b.n	800b2ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	f003 0302 	and.w	r3, r3, #2
 800b180:	2b00      	cmp	r3, #0
 800b182:	d020      	beq.n	800b1c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	f003 0304 	and.w	r3, r3, #4
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d005      	beq.n	800b19c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b190:	4b59      	ldr	r3, [pc, #356]	; (800b2f8 <HAL_RCC_ClockConfig+0x1bc>)
 800b192:	689b      	ldr	r3, [r3, #8]
 800b194:	4a58      	ldr	r2, [pc, #352]	; (800b2f8 <HAL_RCC_ClockConfig+0x1bc>)
 800b196:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b19a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	f003 0308 	and.w	r3, r3, #8
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d005      	beq.n	800b1b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b1a8:	4b53      	ldr	r3, [pc, #332]	; (800b2f8 <HAL_RCC_ClockConfig+0x1bc>)
 800b1aa:	689b      	ldr	r3, [r3, #8]
 800b1ac:	4a52      	ldr	r2, [pc, #328]	; (800b2f8 <HAL_RCC_ClockConfig+0x1bc>)
 800b1ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b1b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b1b4:	4b50      	ldr	r3, [pc, #320]	; (800b2f8 <HAL_RCC_ClockConfig+0x1bc>)
 800b1b6:	689b      	ldr	r3, [r3, #8]
 800b1b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	689b      	ldr	r3, [r3, #8]
 800b1c0:	494d      	ldr	r1, [pc, #308]	; (800b2f8 <HAL_RCC_ClockConfig+0x1bc>)
 800b1c2:	4313      	orrs	r3, r2
 800b1c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	f003 0301 	and.w	r3, r3, #1
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d044      	beq.n	800b25c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	685b      	ldr	r3, [r3, #4]
 800b1d6:	2b01      	cmp	r3, #1
 800b1d8:	d107      	bne.n	800b1ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b1da:	4b47      	ldr	r3, [pc, #284]	; (800b2f8 <HAL_RCC_ClockConfig+0x1bc>)
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d119      	bne.n	800b21a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b1e6:	2301      	movs	r3, #1
 800b1e8:	e07f      	b.n	800b2ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	685b      	ldr	r3, [r3, #4]
 800b1ee:	2b02      	cmp	r3, #2
 800b1f0:	d003      	beq.n	800b1fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b1f6:	2b03      	cmp	r3, #3
 800b1f8:	d107      	bne.n	800b20a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b1fa:	4b3f      	ldr	r3, [pc, #252]	; (800b2f8 <HAL_RCC_ClockConfig+0x1bc>)
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b202:	2b00      	cmp	r3, #0
 800b204:	d109      	bne.n	800b21a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b206:	2301      	movs	r3, #1
 800b208:	e06f      	b.n	800b2ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b20a:	4b3b      	ldr	r3, [pc, #236]	; (800b2f8 <HAL_RCC_ClockConfig+0x1bc>)
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	f003 0302 	and.w	r3, r3, #2
 800b212:	2b00      	cmp	r3, #0
 800b214:	d101      	bne.n	800b21a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b216:	2301      	movs	r3, #1
 800b218:	e067      	b.n	800b2ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b21a:	4b37      	ldr	r3, [pc, #220]	; (800b2f8 <HAL_RCC_ClockConfig+0x1bc>)
 800b21c:	689b      	ldr	r3, [r3, #8]
 800b21e:	f023 0203 	bic.w	r2, r3, #3
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	685b      	ldr	r3, [r3, #4]
 800b226:	4934      	ldr	r1, [pc, #208]	; (800b2f8 <HAL_RCC_ClockConfig+0x1bc>)
 800b228:	4313      	orrs	r3, r2
 800b22a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b22c:	f7fd fcd4 	bl	8008bd8 <HAL_GetTick>
 800b230:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b232:	e00a      	b.n	800b24a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b234:	f7fd fcd0 	bl	8008bd8 <HAL_GetTick>
 800b238:	4602      	mov	r2, r0
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	1ad3      	subs	r3, r2, r3
 800b23e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b242:	4293      	cmp	r3, r2
 800b244:	d901      	bls.n	800b24a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b246:	2303      	movs	r3, #3
 800b248:	e04f      	b.n	800b2ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b24a:	4b2b      	ldr	r3, [pc, #172]	; (800b2f8 <HAL_RCC_ClockConfig+0x1bc>)
 800b24c:	689b      	ldr	r3, [r3, #8]
 800b24e:	f003 020c 	and.w	r2, r3, #12
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	685b      	ldr	r3, [r3, #4]
 800b256:	009b      	lsls	r3, r3, #2
 800b258:	429a      	cmp	r2, r3
 800b25a:	d1eb      	bne.n	800b234 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b25c:	4b25      	ldr	r3, [pc, #148]	; (800b2f4 <HAL_RCC_ClockConfig+0x1b8>)
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	f003 030f 	and.w	r3, r3, #15
 800b264:	683a      	ldr	r2, [r7, #0]
 800b266:	429a      	cmp	r2, r3
 800b268:	d20c      	bcs.n	800b284 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b26a:	4b22      	ldr	r3, [pc, #136]	; (800b2f4 <HAL_RCC_ClockConfig+0x1b8>)
 800b26c:	683a      	ldr	r2, [r7, #0]
 800b26e:	b2d2      	uxtb	r2, r2
 800b270:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b272:	4b20      	ldr	r3, [pc, #128]	; (800b2f4 <HAL_RCC_ClockConfig+0x1b8>)
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	f003 030f 	and.w	r3, r3, #15
 800b27a:	683a      	ldr	r2, [r7, #0]
 800b27c:	429a      	cmp	r2, r3
 800b27e:	d001      	beq.n	800b284 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b280:	2301      	movs	r3, #1
 800b282:	e032      	b.n	800b2ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	f003 0304 	and.w	r3, r3, #4
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d008      	beq.n	800b2a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b290:	4b19      	ldr	r3, [pc, #100]	; (800b2f8 <HAL_RCC_ClockConfig+0x1bc>)
 800b292:	689b      	ldr	r3, [r3, #8]
 800b294:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	68db      	ldr	r3, [r3, #12]
 800b29c:	4916      	ldr	r1, [pc, #88]	; (800b2f8 <HAL_RCC_ClockConfig+0x1bc>)
 800b29e:	4313      	orrs	r3, r2
 800b2a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	f003 0308 	and.w	r3, r3, #8
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d009      	beq.n	800b2c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b2ae:	4b12      	ldr	r3, [pc, #72]	; (800b2f8 <HAL_RCC_ClockConfig+0x1bc>)
 800b2b0:	689b      	ldr	r3, [r3, #8]
 800b2b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	691b      	ldr	r3, [r3, #16]
 800b2ba:	00db      	lsls	r3, r3, #3
 800b2bc:	490e      	ldr	r1, [pc, #56]	; (800b2f8 <HAL_RCC_ClockConfig+0x1bc>)
 800b2be:	4313      	orrs	r3, r2
 800b2c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b2c2:	f000 f821 	bl	800b308 <HAL_RCC_GetSysClockFreq>
 800b2c6:	4601      	mov	r1, r0
 800b2c8:	4b0b      	ldr	r3, [pc, #44]	; (800b2f8 <HAL_RCC_ClockConfig+0x1bc>)
 800b2ca:	689b      	ldr	r3, [r3, #8]
 800b2cc:	091b      	lsrs	r3, r3, #4
 800b2ce:	f003 030f 	and.w	r3, r3, #15
 800b2d2:	4a0a      	ldr	r2, [pc, #40]	; (800b2fc <HAL_RCC_ClockConfig+0x1c0>)
 800b2d4:	5cd3      	ldrb	r3, [r2, r3]
 800b2d6:	fa21 f303 	lsr.w	r3, r1, r3
 800b2da:	4a09      	ldr	r2, [pc, #36]	; (800b300 <HAL_RCC_ClockConfig+0x1c4>)
 800b2dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800b2de:	4b09      	ldr	r3, [pc, #36]	; (800b304 <HAL_RCC_ClockConfig+0x1c8>)
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	f7fd f9e0 	bl	80086a8 <HAL_InitTick>

  return HAL_OK;
 800b2e8:	2300      	movs	r3, #0
}
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	3710      	adds	r7, #16
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	bd80      	pop	{r7, pc}
 800b2f2:	bf00      	nop
 800b2f4:	40023c00 	.word	0x40023c00
 800b2f8:	40023800 	.word	0x40023800
 800b2fc:	080196d8 	.word	0x080196d8
 800b300:	20000cb4 	.word	0x20000cb4
 800b304:	20000cb8 	.word	0x20000cb8

0800b308 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b308:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b30a:	b085      	sub	sp, #20
 800b30c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800b30e:	2300      	movs	r3, #0
 800b310:	607b      	str	r3, [r7, #4]
 800b312:	2300      	movs	r3, #0
 800b314:	60fb      	str	r3, [r7, #12]
 800b316:	2300      	movs	r3, #0
 800b318:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800b31a:	2300      	movs	r3, #0
 800b31c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b31e:	4b63      	ldr	r3, [pc, #396]	; (800b4ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b320:	689b      	ldr	r3, [r3, #8]
 800b322:	f003 030c 	and.w	r3, r3, #12
 800b326:	2b04      	cmp	r3, #4
 800b328:	d007      	beq.n	800b33a <HAL_RCC_GetSysClockFreq+0x32>
 800b32a:	2b08      	cmp	r3, #8
 800b32c:	d008      	beq.n	800b340 <HAL_RCC_GetSysClockFreq+0x38>
 800b32e:	2b00      	cmp	r3, #0
 800b330:	f040 80b4 	bne.w	800b49c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b334:	4b5e      	ldr	r3, [pc, #376]	; (800b4b0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800b336:	60bb      	str	r3, [r7, #8]
       break;
 800b338:	e0b3      	b.n	800b4a2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b33a:	4b5e      	ldr	r3, [pc, #376]	; (800b4b4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800b33c:	60bb      	str	r3, [r7, #8]
      break;
 800b33e:	e0b0      	b.n	800b4a2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b340:	4b5a      	ldr	r3, [pc, #360]	; (800b4ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b342:	685b      	ldr	r3, [r3, #4]
 800b344:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b348:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b34a:	4b58      	ldr	r3, [pc, #352]	; (800b4ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b34c:	685b      	ldr	r3, [r3, #4]
 800b34e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b352:	2b00      	cmp	r3, #0
 800b354:	d04a      	beq.n	800b3ec <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b356:	4b55      	ldr	r3, [pc, #340]	; (800b4ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b358:	685b      	ldr	r3, [r3, #4]
 800b35a:	099b      	lsrs	r3, r3, #6
 800b35c:	f04f 0400 	mov.w	r4, #0
 800b360:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b364:	f04f 0200 	mov.w	r2, #0
 800b368:	ea03 0501 	and.w	r5, r3, r1
 800b36c:	ea04 0602 	and.w	r6, r4, r2
 800b370:	4629      	mov	r1, r5
 800b372:	4632      	mov	r2, r6
 800b374:	f04f 0300 	mov.w	r3, #0
 800b378:	f04f 0400 	mov.w	r4, #0
 800b37c:	0154      	lsls	r4, r2, #5
 800b37e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b382:	014b      	lsls	r3, r1, #5
 800b384:	4619      	mov	r1, r3
 800b386:	4622      	mov	r2, r4
 800b388:	1b49      	subs	r1, r1, r5
 800b38a:	eb62 0206 	sbc.w	r2, r2, r6
 800b38e:	f04f 0300 	mov.w	r3, #0
 800b392:	f04f 0400 	mov.w	r4, #0
 800b396:	0194      	lsls	r4, r2, #6
 800b398:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b39c:	018b      	lsls	r3, r1, #6
 800b39e:	1a5b      	subs	r3, r3, r1
 800b3a0:	eb64 0402 	sbc.w	r4, r4, r2
 800b3a4:	f04f 0100 	mov.w	r1, #0
 800b3a8:	f04f 0200 	mov.w	r2, #0
 800b3ac:	00e2      	lsls	r2, r4, #3
 800b3ae:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b3b2:	00d9      	lsls	r1, r3, #3
 800b3b4:	460b      	mov	r3, r1
 800b3b6:	4614      	mov	r4, r2
 800b3b8:	195b      	adds	r3, r3, r5
 800b3ba:	eb44 0406 	adc.w	r4, r4, r6
 800b3be:	f04f 0100 	mov.w	r1, #0
 800b3c2:	f04f 0200 	mov.w	r2, #0
 800b3c6:	0262      	lsls	r2, r4, #9
 800b3c8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800b3cc:	0259      	lsls	r1, r3, #9
 800b3ce:	460b      	mov	r3, r1
 800b3d0:	4614      	mov	r4, r2
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	4621      	mov	r1, r4
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	f04f 0400 	mov.w	r4, #0
 800b3dc:	461a      	mov	r2, r3
 800b3de:	4623      	mov	r3, r4
 800b3e0:	f7f5 fc62 	bl	8000ca8 <__aeabi_uldivmod>
 800b3e4:	4603      	mov	r3, r0
 800b3e6:	460c      	mov	r4, r1
 800b3e8:	60fb      	str	r3, [r7, #12]
 800b3ea:	e049      	b.n	800b480 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b3ec:	4b2f      	ldr	r3, [pc, #188]	; (800b4ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b3ee:	685b      	ldr	r3, [r3, #4]
 800b3f0:	099b      	lsrs	r3, r3, #6
 800b3f2:	f04f 0400 	mov.w	r4, #0
 800b3f6:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b3fa:	f04f 0200 	mov.w	r2, #0
 800b3fe:	ea03 0501 	and.w	r5, r3, r1
 800b402:	ea04 0602 	and.w	r6, r4, r2
 800b406:	4629      	mov	r1, r5
 800b408:	4632      	mov	r2, r6
 800b40a:	f04f 0300 	mov.w	r3, #0
 800b40e:	f04f 0400 	mov.w	r4, #0
 800b412:	0154      	lsls	r4, r2, #5
 800b414:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b418:	014b      	lsls	r3, r1, #5
 800b41a:	4619      	mov	r1, r3
 800b41c:	4622      	mov	r2, r4
 800b41e:	1b49      	subs	r1, r1, r5
 800b420:	eb62 0206 	sbc.w	r2, r2, r6
 800b424:	f04f 0300 	mov.w	r3, #0
 800b428:	f04f 0400 	mov.w	r4, #0
 800b42c:	0194      	lsls	r4, r2, #6
 800b42e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b432:	018b      	lsls	r3, r1, #6
 800b434:	1a5b      	subs	r3, r3, r1
 800b436:	eb64 0402 	sbc.w	r4, r4, r2
 800b43a:	f04f 0100 	mov.w	r1, #0
 800b43e:	f04f 0200 	mov.w	r2, #0
 800b442:	00e2      	lsls	r2, r4, #3
 800b444:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b448:	00d9      	lsls	r1, r3, #3
 800b44a:	460b      	mov	r3, r1
 800b44c:	4614      	mov	r4, r2
 800b44e:	195b      	adds	r3, r3, r5
 800b450:	eb44 0406 	adc.w	r4, r4, r6
 800b454:	f04f 0100 	mov.w	r1, #0
 800b458:	f04f 0200 	mov.w	r2, #0
 800b45c:	02a2      	lsls	r2, r4, #10
 800b45e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800b462:	0299      	lsls	r1, r3, #10
 800b464:	460b      	mov	r3, r1
 800b466:	4614      	mov	r4, r2
 800b468:	4618      	mov	r0, r3
 800b46a:	4621      	mov	r1, r4
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	f04f 0400 	mov.w	r4, #0
 800b472:	461a      	mov	r2, r3
 800b474:	4623      	mov	r3, r4
 800b476:	f7f5 fc17 	bl	8000ca8 <__aeabi_uldivmod>
 800b47a:	4603      	mov	r3, r0
 800b47c:	460c      	mov	r4, r1
 800b47e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b480:	4b0a      	ldr	r3, [pc, #40]	; (800b4ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b482:	685b      	ldr	r3, [r3, #4]
 800b484:	0c1b      	lsrs	r3, r3, #16
 800b486:	f003 0303 	and.w	r3, r3, #3
 800b48a:	3301      	adds	r3, #1
 800b48c:	005b      	lsls	r3, r3, #1
 800b48e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800b490:	68fa      	ldr	r2, [r7, #12]
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	fbb2 f3f3 	udiv	r3, r2, r3
 800b498:	60bb      	str	r3, [r7, #8]
      break;
 800b49a:	e002      	b.n	800b4a2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b49c:	4b04      	ldr	r3, [pc, #16]	; (800b4b0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800b49e:	60bb      	str	r3, [r7, #8]
      break;
 800b4a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b4a2:	68bb      	ldr	r3, [r7, #8]
}
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	3714      	adds	r7, #20
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b4ac:	40023800 	.word	0x40023800
 800b4b0:	00f42400 	.word	0x00f42400
 800b4b4:	007a1200 	.word	0x007a1200

0800b4b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b4b8:	b480      	push	{r7}
 800b4ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b4bc:	4b03      	ldr	r3, [pc, #12]	; (800b4cc <HAL_RCC_GetHCLKFreq+0x14>)
 800b4be:	681b      	ldr	r3, [r3, #0]
}
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c8:	4770      	bx	lr
 800b4ca:	bf00      	nop
 800b4cc:	20000cb4 	.word	0x20000cb4

0800b4d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b4d4:	f7ff fff0 	bl	800b4b8 <HAL_RCC_GetHCLKFreq>
 800b4d8:	4601      	mov	r1, r0
 800b4da:	4b05      	ldr	r3, [pc, #20]	; (800b4f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b4dc:	689b      	ldr	r3, [r3, #8]
 800b4de:	0a9b      	lsrs	r3, r3, #10
 800b4e0:	f003 0307 	and.w	r3, r3, #7
 800b4e4:	4a03      	ldr	r2, [pc, #12]	; (800b4f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b4e6:	5cd3      	ldrb	r3, [r2, r3]
 800b4e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	bd80      	pop	{r7, pc}
 800b4f0:	40023800 	.word	0x40023800
 800b4f4:	080196e8 	.word	0x080196e8

0800b4f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800b4fc:	f7ff ffdc 	bl	800b4b8 <HAL_RCC_GetHCLKFreq>
 800b500:	4601      	mov	r1, r0
 800b502:	4b05      	ldr	r3, [pc, #20]	; (800b518 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b504:	689b      	ldr	r3, [r3, #8]
 800b506:	0b5b      	lsrs	r3, r3, #13
 800b508:	f003 0307 	and.w	r3, r3, #7
 800b50c:	4a03      	ldr	r2, [pc, #12]	; (800b51c <HAL_RCC_GetPCLK2Freq+0x24>)
 800b50e:	5cd3      	ldrb	r3, [r2, r3]
 800b510:	fa21 f303 	lsr.w	r3, r1, r3
}
 800b514:	4618      	mov	r0, r3
 800b516:	bd80      	pop	{r7, pc}
 800b518:	40023800 	.word	0x40023800
 800b51c:	080196e8 	.word	0x080196e8

0800b520 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b520:	b480      	push	{r7}
 800b522:	b083      	sub	sp, #12
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
 800b528:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	220f      	movs	r2, #15
 800b52e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800b530:	4b12      	ldr	r3, [pc, #72]	; (800b57c <HAL_RCC_GetClockConfig+0x5c>)
 800b532:	689b      	ldr	r3, [r3, #8]
 800b534:	f003 0203 	and.w	r2, r3, #3
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800b53c:	4b0f      	ldr	r3, [pc, #60]	; (800b57c <HAL_RCC_GetClockConfig+0x5c>)
 800b53e:	689b      	ldr	r3, [r3, #8]
 800b540:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800b548:	4b0c      	ldr	r3, [pc, #48]	; (800b57c <HAL_RCC_GetClockConfig+0x5c>)
 800b54a:	689b      	ldr	r3, [r3, #8]
 800b54c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800b554:	4b09      	ldr	r3, [pc, #36]	; (800b57c <HAL_RCC_GetClockConfig+0x5c>)
 800b556:	689b      	ldr	r3, [r3, #8]
 800b558:	08db      	lsrs	r3, r3, #3
 800b55a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b562:	4b07      	ldr	r3, [pc, #28]	; (800b580 <HAL_RCC_GetClockConfig+0x60>)
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	f003 020f 	and.w	r2, r3, #15
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	601a      	str	r2, [r3, #0]
}
 800b56e:	bf00      	nop
 800b570:	370c      	adds	r7, #12
 800b572:	46bd      	mov	sp, r7
 800b574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b578:	4770      	bx	lr
 800b57a:	bf00      	nop
 800b57c:	40023800 	.word	0x40023800
 800b580:	40023c00 	.word	0x40023c00

0800b584 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b082      	sub	sp, #8
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d101      	bne.n	800b596 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b592:	2301      	movs	r3, #1
 800b594:	e01d      	b.n	800b5d2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b59c:	b2db      	uxtb	r3, r3
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d106      	bne.n	800b5b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b5aa:	6878      	ldr	r0, [r7, #4]
 800b5ac:	f7fd f9b8 	bl	8008920 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	2202      	movs	r2, #2
 800b5b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681a      	ldr	r2, [r3, #0]
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	3304      	adds	r3, #4
 800b5c0:	4619      	mov	r1, r3
 800b5c2:	4610      	mov	r0, r2
 800b5c4:	f000 f95e 	bl	800b884 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	2201      	movs	r2, #1
 800b5cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b5d0:	2300      	movs	r3, #0
}
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	3708      	adds	r7, #8
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	bd80      	pop	{r7, pc}

0800b5da <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b5da:	b480      	push	{r7}
 800b5dc:	b085      	sub	sp, #20
 800b5de:	af00      	add	r7, sp, #0
 800b5e0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	68da      	ldr	r2, [r3, #12]
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	f042 0201 	orr.w	r2, r2, #1
 800b5f0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	689b      	ldr	r3, [r3, #8]
 800b5f8:	f003 0307 	and.w	r3, r3, #7
 800b5fc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	2b06      	cmp	r3, #6
 800b602:	d007      	beq.n	800b614 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	681a      	ldr	r2, [r3, #0]
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	f042 0201 	orr.w	r2, r2, #1
 800b612:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b614:	2300      	movs	r3, #0
}
 800b616:	4618      	mov	r0, r3
 800b618:	3714      	adds	r7, #20
 800b61a:	46bd      	mov	sp, r7
 800b61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b620:	4770      	bx	lr

0800b622 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b622:	b580      	push	{r7, lr}
 800b624:	b082      	sub	sp, #8
 800b626:	af00      	add	r7, sp, #0
 800b628:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	691b      	ldr	r3, [r3, #16]
 800b630:	f003 0302 	and.w	r3, r3, #2
 800b634:	2b02      	cmp	r3, #2
 800b636:	d122      	bne.n	800b67e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	68db      	ldr	r3, [r3, #12]
 800b63e:	f003 0302 	and.w	r3, r3, #2
 800b642:	2b02      	cmp	r3, #2
 800b644:	d11b      	bne.n	800b67e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	f06f 0202 	mvn.w	r2, #2
 800b64e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2201      	movs	r2, #1
 800b654:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	699b      	ldr	r3, [r3, #24]
 800b65c:	f003 0303 	and.w	r3, r3, #3
 800b660:	2b00      	cmp	r3, #0
 800b662:	d003      	beq.n	800b66c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b664:	6878      	ldr	r0, [r7, #4]
 800b666:	f000 f8ee 	bl	800b846 <HAL_TIM_IC_CaptureCallback>
 800b66a:	e005      	b.n	800b678 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b66c:	6878      	ldr	r0, [r7, #4]
 800b66e:	f000 f8e0 	bl	800b832 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b672:	6878      	ldr	r0, [r7, #4]
 800b674:	f000 f8f1 	bl	800b85a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	2200      	movs	r2, #0
 800b67c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	691b      	ldr	r3, [r3, #16]
 800b684:	f003 0304 	and.w	r3, r3, #4
 800b688:	2b04      	cmp	r3, #4
 800b68a:	d122      	bne.n	800b6d2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	68db      	ldr	r3, [r3, #12]
 800b692:	f003 0304 	and.w	r3, r3, #4
 800b696:	2b04      	cmp	r3, #4
 800b698:	d11b      	bne.n	800b6d2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	f06f 0204 	mvn.w	r2, #4
 800b6a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2202      	movs	r2, #2
 800b6a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	699b      	ldr	r3, [r3, #24]
 800b6b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d003      	beq.n	800b6c0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b6b8:	6878      	ldr	r0, [r7, #4]
 800b6ba:	f000 f8c4 	bl	800b846 <HAL_TIM_IC_CaptureCallback>
 800b6be:	e005      	b.n	800b6cc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b6c0:	6878      	ldr	r0, [r7, #4]
 800b6c2:	f000 f8b6 	bl	800b832 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b6c6:	6878      	ldr	r0, [r7, #4]
 800b6c8:	f000 f8c7 	bl	800b85a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	691b      	ldr	r3, [r3, #16]
 800b6d8:	f003 0308 	and.w	r3, r3, #8
 800b6dc:	2b08      	cmp	r3, #8
 800b6de:	d122      	bne.n	800b726 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	68db      	ldr	r3, [r3, #12]
 800b6e6:	f003 0308 	and.w	r3, r3, #8
 800b6ea:	2b08      	cmp	r3, #8
 800b6ec:	d11b      	bne.n	800b726 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	f06f 0208 	mvn.w	r2, #8
 800b6f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2204      	movs	r2, #4
 800b6fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	69db      	ldr	r3, [r3, #28]
 800b704:	f003 0303 	and.w	r3, r3, #3
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d003      	beq.n	800b714 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b70c:	6878      	ldr	r0, [r7, #4]
 800b70e:	f000 f89a 	bl	800b846 <HAL_TIM_IC_CaptureCallback>
 800b712:	e005      	b.n	800b720 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b714:	6878      	ldr	r0, [r7, #4]
 800b716:	f000 f88c 	bl	800b832 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b71a:	6878      	ldr	r0, [r7, #4]
 800b71c:	f000 f89d 	bl	800b85a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	2200      	movs	r2, #0
 800b724:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	691b      	ldr	r3, [r3, #16]
 800b72c:	f003 0310 	and.w	r3, r3, #16
 800b730:	2b10      	cmp	r3, #16
 800b732:	d122      	bne.n	800b77a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	68db      	ldr	r3, [r3, #12]
 800b73a:	f003 0310 	and.w	r3, r3, #16
 800b73e:	2b10      	cmp	r3, #16
 800b740:	d11b      	bne.n	800b77a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	f06f 0210 	mvn.w	r2, #16
 800b74a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	2208      	movs	r2, #8
 800b750:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	69db      	ldr	r3, [r3, #28]
 800b758:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d003      	beq.n	800b768 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b760:	6878      	ldr	r0, [r7, #4]
 800b762:	f000 f870 	bl	800b846 <HAL_TIM_IC_CaptureCallback>
 800b766:	e005      	b.n	800b774 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b768:	6878      	ldr	r0, [r7, #4]
 800b76a:	f000 f862 	bl	800b832 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b76e:	6878      	ldr	r0, [r7, #4]
 800b770:	f000 f873 	bl	800b85a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	2200      	movs	r2, #0
 800b778:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	691b      	ldr	r3, [r3, #16]
 800b780:	f003 0301 	and.w	r3, r3, #1
 800b784:	2b01      	cmp	r3, #1
 800b786:	d10e      	bne.n	800b7a6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	68db      	ldr	r3, [r3, #12]
 800b78e:	f003 0301 	and.w	r3, r3, #1
 800b792:	2b01      	cmp	r3, #1
 800b794:	d107      	bne.n	800b7a6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	f06f 0201 	mvn.w	r2, #1
 800b79e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b7a0:	6878      	ldr	r0, [r7, #4]
 800b7a2:	f7f7 fe53 	bl	800344c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	691b      	ldr	r3, [r3, #16]
 800b7ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b7b0:	2b80      	cmp	r3, #128	; 0x80
 800b7b2:	d10e      	bne.n	800b7d2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	68db      	ldr	r3, [r3, #12]
 800b7ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b7be:	2b80      	cmp	r3, #128	; 0x80
 800b7c0:	d107      	bne.n	800b7d2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b7ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b7cc:	6878      	ldr	r0, [r7, #4]
 800b7ce:	f000 f97f 	bl	800bad0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	691b      	ldr	r3, [r3, #16]
 800b7d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7dc:	2b40      	cmp	r3, #64	; 0x40
 800b7de:	d10e      	bne.n	800b7fe <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	68db      	ldr	r3, [r3, #12]
 800b7e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7ea:	2b40      	cmp	r3, #64	; 0x40
 800b7ec:	d107      	bne.n	800b7fe <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b7f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b7f8:	6878      	ldr	r0, [r7, #4]
 800b7fa:	f000 f838 	bl	800b86e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	691b      	ldr	r3, [r3, #16]
 800b804:	f003 0320 	and.w	r3, r3, #32
 800b808:	2b20      	cmp	r3, #32
 800b80a:	d10e      	bne.n	800b82a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	68db      	ldr	r3, [r3, #12]
 800b812:	f003 0320 	and.w	r3, r3, #32
 800b816:	2b20      	cmp	r3, #32
 800b818:	d107      	bne.n	800b82a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	f06f 0220 	mvn.w	r2, #32
 800b822:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b824:	6878      	ldr	r0, [r7, #4]
 800b826:	f000 f949 	bl	800babc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b82a:	bf00      	nop
 800b82c:	3708      	adds	r7, #8
 800b82e:	46bd      	mov	sp, r7
 800b830:	bd80      	pop	{r7, pc}

0800b832 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b832:	b480      	push	{r7}
 800b834:	b083      	sub	sp, #12
 800b836:	af00      	add	r7, sp, #0
 800b838:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b83a:	bf00      	nop
 800b83c:	370c      	adds	r7, #12
 800b83e:	46bd      	mov	sp, r7
 800b840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b844:	4770      	bx	lr

0800b846 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b846:	b480      	push	{r7}
 800b848:	b083      	sub	sp, #12
 800b84a:	af00      	add	r7, sp, #0
 800b84c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b84e:	bf00      	nop
 800b850:	370c      	adds	r7, #12
 800b852:	46bd      	mov	sp, r7
 800b854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b858:	4770      	bx	lr

0800b85a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b85a:	b480      	push	{r7}
 800b85c:	b083      	sub	sp, #12
 800b85e:	af00      	add	r7, sp, #0
 800b860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b862:	bf00      	nop
 800b864:	370c      	adds	r7, #12
 800b866:	46bd      	mov	sp, r7
 800b868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86c:	4770      	bx	lr

0800b86e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b86e:	b480      	push	{r7}
 800b870:	b083      	sub	sp, #12
 800b872:	af00      	add	r7, sp, #0
 800b874:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b876:	bf00      	nop
 800b878:	370c      	adds	r7, #12
 800b87a:	46bd      	mov	sp, r7
 800b87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b880:	4770      	bx	lr
	...

0800b884 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b884:	b480      	push	{r7}
 800b886:	b085      	sub	sp, #20
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
 800b88c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	4a40      	ldr	r2, [pc, #256]	; (800b998 <TIM_Base_SetConfig+0x114>)
 800b898:	4293      	cmp	r3, r2
 800b89a:	d013      	beq.n	800b8c4 <TIM_Base_SetConfig+0x40>
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8a2:	d00f      	beq.n	800b8c4 <TIM_Base_SetConfig+0x40>
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	4a3d      	ldr	r2, [pc, #244]	; (800b99c <TIM_Base_SetConfig+0x118>)
 800b8a8:	4293      	cmp	r3, r2
 800b8aa:	d00b      	beq.n	800b8c4 <TIM_Base_SetConfig+0x40>
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	4a3c      	ldr	r2, [pc, #240]	; (800b9a0 <TIM_Base_SetConfig+0x11c>)
 800b8b0:	4293      	cmp	r3, r2
 800b8b2:	d007      	beq.n	800b8c4 <TIM_Base_SetConfig+0x40>
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	4a3b      	ldr	r2, [pc, #236]	; (800b9a4 <TIM_Base_SetConfig+0x120>)
 800b8b8:	4293      	cmp	r3, r2
 800b8ba:	d003      	beq.n	800b8c4 <TIM_Base_SetConfig+0x40>
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	4a3a      	ldr	r2, [pc, #232]	; (800b9a8 <TIM_Base_SetConfig+0x124>)
 800b8c0:	4293      	cmp	r3, r2
 800b8c2:	d108      	bne.n	800b8d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b8ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b8cc:	683b      	ldr	r3, [r7, #0]
 800b8ce:	685b      	ldr	r3, [r3, #4]
 800b8d0:	68fa      	ldr	r2, [r7, #12]
 800b8d2:	4313      	orrs	r3, r2
 800b8d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	4a2f      	ldr	r2, [pc, #188]	; (800b998 <TIM_Base_SetConfig+0x114>)
 800b8da:	4293      	cmp	r3, r2
 800b8dc:	d02b      	beq.n	800b936 <TIM_Base_SetConfig+0xb2>
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8e4:	d027      	beq.n	800b936 <TIM_Base_SetConfig+0xb2>
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	4a2c      	ldr	r2, [pc, #176]	; (800b99c <TIM_Base_SetConfig+0x118>)
 800b8ea:	4293      	cmp	r3, r2
 800b8ec:	d023      	beq.n	800b936 <TIM_Base_SetConfig+0xb2>
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	4a2b      	ldr	r2, [pc, #172]	; (800b9a0 <TIM_Base_SetConfig+0x11c>)
 800b8f2:	4293      	cmp	r3, r2
 800b8f4:	d01f      	beq.n	800b936 <TIM_Base_SetConfig+0xb2>
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	4a2a      	ldr	r2, [pc, #168]	; (800b9a4 <TIM_Base_SetConfig+0x120>)
 800b8fa:	4293      	cmp	r3, r2
 800b8fc:	d01b      	beq.n	800b936 <TIM_Base_SetConfig+0xb2>
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	4a29      	ldr	r2, [pc, #164]	; (800b9a8 <TIM_Base_SetConfig+0x124>)
 800b902:	4293      	cmp	r3, r2
 800b904:	d017      	beq.n	800b936 <TIM_Base_SetConfig+0xb2>
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	4a28      	ldr	r2, [pc, #160]	; (800b9ac <TIM_Base_SetConfig+0x128>)
 800b90a:	4293      	cmp	r3, r2
 800b90c:	d013      	beq.n	800b936 <TIM_Base_SetConfig+0xb2>
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	4a27      	ldr	r2, [pc, #156]	; (800b9b0 <TIM_Base_SetConfig+0x12c>)
 800b912:	4293      	cmp	r3, r2
 800b914:	d00f      	beq.n	800b936 <TIM_Base_SetConfig+0xb2>
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	4a26      	ldr	r2, [pc, #152]	; (800b9b4 <TIM_Base_SetConfig+0x130>)
 800b91a:	4293      	cmp	r3, r2
 800b91c:	d00b      	beq.n	800b936 <TIM_Base_SetConfig+0xb2>
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	4a25      	ldr	r2, [pc, #148]	; (800b9b8 <TIM_Base_SetConfig+0x134>)
 800b922:	4293      	cmp	r3, r2
 800b924:	d007      	beq.n	800b936 <TIM_Base_SetConfig+0xb2>
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	4a24      	ldr	r2, [pc, #144]	; (800b9bc <TIM_Base_SetConfig+0x138>)
 800b92a:	4293      	cmp	r3, r2
 800b92c:	d003      	beq.n	800b936 <TIM_Base_SetConfig+0xb2>
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	4a23      	ldr	r2, [pc, #140]	; (800b9c0 <TIM_Base_SetConfig+0x13c>)
 800b932:	4293      	cmp	r3, r2
 800b934:	d108      	bne.n	800b948 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b93c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	68db      	ldr	r3, [r3, #12]
 800b942:	68fa      	ldr	r2, [r7, #12]
 800b944:	4313      	orrs	r3, r2
 800b946:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b94e:	683b      	ldr	r3, [r7, #0]
 800b950:	695b      	ldr	r3, [r3, #20]
 800b952:	4313      	orrs	r3, r2
 800b954:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	68fa      	ldr	r2, [r7, #12]
 800b95a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	689a      	ldr	r2, [r3, #8]
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b964:	683b      	ldr	r3, [r7, #0]
 800b966:	681a      	ldr	r2, [r3, #0]
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	4a0a      	ldr	r2, [pc, #40]	; (800b998 <TIM_Base_SetConfig+0x114>)
 800b970:	4293      	cmp	r3, r2
 800b972:	d003      	beq.n	800b97c <TIM_Base_SetConfig+0xf8>
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	4a0c      	ldr	r2, [pc, #48]	; (800b9a8 <TIM_Base_SetConfig+0x124>)
 800b978:	4293      	cmp	r3, r2
 800b97a:	d103      	bne.n	800b984 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	691a      	ldr	r2, [r3, #16]
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	2201      	movs	r2, #1
 800b988:	615a      	str	r2, [r3, #20]
}
 800b98a:	bf00      	nop
 800b98c:	3714      	adds	r7, #20
 800b98e:	46bd      	mov	sp, r7
 800b990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b994:	4770      	bx	lr
 800b996:	bf00      	nop
 800b998:	40010000 	.word	0x40010000
 800b99c:	40000400 	.word	0x40000400
 800b9a0:	40000800 	.word	0x40000800
 800b9a4:	40000c00 	.word	0x40000c00
 800b9a8:	40010400 	.word	0x40010400
 800b9ac:	40014000 	.word	0x40014000
 800b9b0:	40014400 	.word	0x40014400
 800b9b4:	40014800 	.word	0x40014800
 800b9b8:	40001800 	.word	0x40001800
 800b9bc:	40001c00 	.word	0x40001c00
 800b9c0:	40002000 	.word	0x40002000

0800b9c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b9c4:	b480      	push	{r7}
 800b9c6:	b085      	sub	sp, #20
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
 800b9cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b9d4:	2b01      	cmp	r3, #1
 800b9d6:	d101      	bne.n	800b9dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b9d8:	2302      	movs	r3, #2
 800b9da:	e05a      	b.n	800ba92 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	2201      	movs	r2, #1
 800b9e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2202      	movs	r2, #2
 800b9e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	685b      	ldr	r3, [r3, #4]
 800b9f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	689b      	ldr	r3, [r3, #8]
 800b9fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	68fa      	ldr	r2, [r7, #12]
 800ba0a:	4313      	orrs	r3, r2
 800ba0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	68fa      	ldr	r2, [r7, #12]
 800ba14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	4a21      	ldr	r2, [pc, #132]	; (800baa0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800ba1c:	4293      	cmp	r3, r2
 800ba1e:	d022      	beq.n	800ba66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba28:	d01d      	beq.n	800ba66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	4a1d      	ldr	r2, [pc, #116]	; (800baa4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800ba30:	4293      	cmp	r3, r2
 800ba32:	d018      	beq.n	800ba66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	4a1b      	ldr	r2, [pc, #108]	; (800baa8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800ba3a:	4293      	cmp	r3, r2
 800ba3c:	d013      	beq.n	800ba66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	4a1a      	ldr	r2, [pc, #104]	; (800baac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800ba44:	4293      	cmp	r3, r2
 800ba46:	d00e      	beq.n	800ba66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	4a18      	ldr	r2, [pc, #96]	; (800bab0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ba4e:	4293      	cmp	r3, r2
 800ba50:	d009      	beq.n	800ba66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	4a17      	ldr	r2, [pc, #92]	; (800bab4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ba58:	4293      	cmp	r3, r2
 800ba5a:	d004      	beq.n	800ba66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	4a15      	ldr	r2, [pc, #84]	; (800bab8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ba62:	4293      	cmp	r3, r2
 800ba64:	d10c      	bne.n	800ba80 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ba66:	68bb      	ldr	r3, [r7, #8]
 800ba68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ba6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	685b      	ldr	r3, [r3, #4]
 800ba72:	68ba      	ldr	r2, [r7, #8]
 800ba74:	4313      	orrs	r3, r2
 800ba76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	68ba      	ldr	r2, [r7, #8]
 800ba7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2201      	movs	r2, #1
 800ba84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ba90:	2300      	movs	r3, #0
}
 800ba92:	4618      	mov	r0, r3
 800ba94:	3714      	adds	r7, #20
 800ba96:	46bd      	mov	sp, r7
 800ba98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9c:	4770      	bx	lr
 800ba9e:	bf00      	nop
 800baa0:	40010000 	.word	0x40010000
 800baa4:	40000400 	.word	0x40000400
 800baa8:	40000800 	.word	0x40000800
 800baac:	40000c00 	.word	0x40000c00
 800bab0:	40010400 	.word	0x40010400
 800bab4:	40014000 	.word	0x40014000
 800bab8:	40001800 	.word	0x40001800

0800babc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800babc:	b480      	push	{r7}
 800babe:	b083      	sub	sp, #12
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bac4:	bf00      	nop
 800bac6:	370c      	adds	r7, #12
 800bac8:	46bd      	mov	sp, r7
 800baca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bace:	4770      	bx	lr

0800bad0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bad0:	b480      	push	{r7}
 800bad2:	b083      	sub	sp, #12
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bad8:	bf00      	nop
 800bada:	370c      	adds	r7, #12
 800badc:	46bd      	mov	sp, r7
 800bade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae2:	4770      	bx	lr

0800bae4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b082      	sub	sp, #8
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d101      	bne.n	800baf6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800baf2:	2301      	movs	r3, #1
 800baf4:	e03f      	b.n	800bb76 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800bafc:	b2db      	uxtb	r3, r3
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d106      	bne.n	800bb10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	2200      	movs	r2, #0
 800bb06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bb0a:	6878      	ldr	r0, [r7, #4]
 800bb0c:	f7fc ff5a 	bl	80089c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	2224      	movs	r2, #36	; 0x24
 800bb14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	68da      	ldr	r2, [r3, #12]
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bb26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800bb28:	6878      	ldr	r0, [r7, #4]
 800bb2a:	f000 fb6b 	bl	800c204 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	691a      	ldr	r2, [r3, #16]
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bb3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	695a      	ldr	r2, [r3, #20]
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bb4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	68da      	ldr	r2, [r3, #12]
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bb5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	2200      	movs	r2, #0
 800bb62:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	2220      	movs	r2, #32
 800bb68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	2220      	movs	r2, #32
 800bb70:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800bb74:	2300      	movs	r3, #0
}
 800bb76:	4618      	mov	r0, r3
 800bb78:	3708      	adds	r7, #8
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	bd80      	pop	{r7, pc}
	...

0800bb80 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b086      	sub	sp, #24
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	60f8      	str	r0, [r7, #12]
 800bb88:	60b9      	str	r1, [r7, #8]
 800bb8a:	4613      	mov	r3, r2
 800bb8c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800bb94:	b2db      	uxtb	r3, r3
 800bb96:	2b20      	cmp	r3, #32
 800bb98:	d153      	bne.n	800bc42 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800bb9a:	68bb      	ldr	r3, [r7, #8]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d002      	beq.n	800bba6 <HAL_UART_Transmit_DMA+0x26>
 800bba0:	88fb      	ldrh	r3, [r7, #6]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d101      	bne.n	800bbaa <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800bba6:	2301      	movs	r3, #1
 800bba8:	e04c      	b.n	800bc44 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800bbb0:	2b01      	cmp	r3, #1
 800bbb2:	d101      	bne.n	800bbb8 <HAL_UART_Transmit_DMA+0x38>
 800bbb4:	2302      	movs	r3, #2
 800bbb6:	e045      	b.n	800bc44 <HAL_UART_Transmit_DMA+0xc4>
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	2201      	movs	r2, #1
 800bbbc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800bbc0:	68ba      	ldr	r2, [r7, #8]
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	88fa      	ldrh	r2, [r7, #6]
 800bbca:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	88fa      	ldrh	r2, [r7, #6]
 800bbd0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	2221      	movs	r2, #33	; 0x21
 800bbdc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbe4:	4a19      	ldr	r2, [pc, #100]	; (800bc4c <HAL_UART_Transmit_DMA+0xcc>)
 800bbe6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbec:	4a18      	ldr	r2, [pc, #96]	; (800bc50 <HAL_UART_Transmit_DMA+0xd0>)
 800bbee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbf4:	4a17      	ldr	r2, [pc, #92]	; (800bc54 <HAL_UART_Transmit_DMA+0xd4>)
 800bbf6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800bc00:	f107 0308 	add.w	r3, r7, #8
 800bc04:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800bc0a:	697b      	ldr	r3, [r7, #20]
 800bc0c:	6819      	ldr	r1, [r3, #0]
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	3304      	adds	r3, #4
 800bc14:	461a      	mov	r2, r3
 800bc16:	88fb      	ldrh	r3, [r7, #6]
 800bc18:	f7fd f99c 	bl	8008f54 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bc24:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	2200      	movs	r2, #0
 800bc2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	695a      	ldr	r2, [r3, #20]
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800bc3c:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800bc3e:	2300      	movs	r3, #0
 800bc40:	e000      	b.n	800bc44 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800bc42:	2302      	movs	r3, #2
  }
}
 800bc44:	4618      	mov	r0, r3
 800bc46:	3718      	adds	r7, #24
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	bd80      	pop	{r7, pc}
 800bc4c:	0800be95 	.word	0x0800be95
 800bc50:	0800bee7 	.word	0x0800bee7
 800bc54:	0800bf03 	.word	0x0800bf03

0800bc58 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b088      	sub	sp, #32
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	68db      	ldr	r3, [r3, #12]
 800bc6e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	695b      	ldr	r3, [r3, #20]
 800bc76:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800bc78:	2300      	movs	r3, #0
 800bc7a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800bc80:	69fb      	ldr	r3, [r7, #28]
 800bc82:	f003 030f 	and.w	r3, r3, #15
 800bc86:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800bc88:	693b      	ldr	r3, [r7, #16]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d10d      	bne.n	800bcaa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bc8e:	69fb      	ldr	r3, [r7, #28]
 800bc90:	f003 0320 	and.w	r3, r3, #32
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d008      	beq.n	800bcaa <HAL_UART_IRQHandler+0x52>
 800bc98:	69bb      	ldr	r3, [r7, #24]
 800bc9a:	f003 0320 	and.w	r3, r3, #32
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d003      	beq.n	800bcaa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800bca2:	6878      	ldr	r0, [r7, #4]
 800bca4:	f000 fa2d 	bl	800c102 <UART_Receive_IT>
      return;
 800bca8:	e0d1      	b.n	800be4e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800bcaa:	693b      	ldr	r3, [r7, #16]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	f000 80b0 	beq.w	800be12 <HAL_UART_IRQHandler+0x1ba>
 800bcb2:	697b      	ldr	r3, [r7, #20]
 800bcb4:	f003 0301 	and.w	r3, r3, #1
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d105      	bne.n	800bcc8 <HAL_UART_IRQHandler+0x70>
 800bcbc:	69bb      	ldr	r3, [r7, #24]
 800bcbe:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	f000 80a5 	beq.w	800be12 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800bcc8:	69fb      	ldr	r3, [r7, #28]
 800bcca:	f003 0301 	and.w	r3, r3, #1
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d00a      	beq.n	800bce8 <HAL_UART_IRQHandler+0x90>
 800bcd2:	69bb      	ldr	r3, [r7, #24]
 800bcd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d005      	beq.n	800bce8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bce0:	f043 0201 	orr.w	r2, r3, #1
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bce8:	69fb      	ldr	r3, [r7, #28]
 800bcea:	f003 0304 	and.w	r3, r3, #4
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d00a      	beq.n	800bd08 <HAL_UART_IRQHandler+0xb0>
 800bcf2:	697b      	ldr	r3, [r7, #20]
 800bcf4:	f003 0301 	and.w	r3, r3, #1
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d005      	beq.n	800bd08 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd00:	f043 0202 	orr.w	r2, r3, #2
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bd08:	69fb      	ldr	r3, [r7, #28]
 800bd0a:	f003 0302 	and.w	r3, r3, #2
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d00a      	beq.n	800bd28 <HAL_UART_IRQHandler+0xd0>
 800bd12:	697b      	ldr	r3, [r7, #20]
 800bd14:	f003 0301 	and.w	r3, r3, #1
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d005      	beq.n	800bd28 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd20:	f043 0204 	orr.w	r2, r3, #4
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800bd28:	69fb      	ldr	r3, [r7, #28]
 800bd2a:	f003 0308 	and.w	r3, r3, #8
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d00f      	beq.n	800bd52 <HAL_UART_IRQHandler+0xfa>
 800bd32:	69bb      	ldr	r3, [r7, #24]
 800bd34:	f003 0320 	and.w	r3, r3, #32
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d104      	bne.n	800bd46 <HAL_UART_IRQHandler+0xee>
 800bd3c:	697b      	ldr	r3, [r7, #20]
 800bd3e:	f003 0301 	and.w	r3, r3, #1
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d005      	beq.n	800bd52 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd4a:	f043 0208 	orr.w	r2, r3, #8
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d078      	beq.n	800be4c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bd5a:	69fb      	ldr	r3, [r7, #28]
 800bd5c:	f003 0320 	and.w	r3, r3, #32
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d007      	beq.n	800bd74 <HAL_UART_IRQHandler+0x11c>
 800bd64:	69bb      	ldr	r3, [r7, #24]
 800bd66:	f003 0320 	and.w	r3, r3, #32
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d002      	beq.n	800bd74 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800bd6e:	6878      	ldr	r0, [r7, #4]
 800bd70:	f000 f9c7 	bl	800c102 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	695b      	ldr	r3, [r3, #20]
 800bd7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd7e:	2b40      	cmp	r3, #64	; 0x40
 800bd80:	bf0c      	ite	eq
 800bd82:	2301      	moveq	r3, #1
 800bd84:	2300      	movne	r3, #0
 800bd86:	b2db      	uxtb	r3, r3
 800bd88:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd8e:	f003 0308 	and.w	r3, r3, #8
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d102      	bne.n	800bd9c <HAL_UART_IRQHandler+0x144>
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d031      	beq.n	800be00 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bd9c:	6878      	ldr	r0, [r7, #4]
 800bd9e:	f000 f910 	bl	800bfc2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	695b      	ldr	r3, [r3, #20]
 800bda8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bdac:	2b40      	cmp	r3, #64	; 0x40
 800bdae:	d123      	bne.n	800bdf8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	695a      	ldr	r2, [r3, #20]
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bdbe:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d013      	beq.n	800bdf0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdcc:	4a21      	ldr	r2, [pc, #132]	; (800be54 <HAL_UART_IRQHandler+0x1fc>)
 800bdce:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	f7fd f915 	bl	8009004 <HAL_DMA_Abort_IT>
 800bdda:	4603      	mov	r3, r0
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d016      	beq.n	800be0e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bde4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bde6:	687a      	ldr	r2, [r7, #4]
 800bde8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800bdea:	4610      	mov	r0, r2
 800bdec:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bdee:	e00e      	b.n	800be0e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bdf0:	6878      	ldr	r0, [r7, #4]
 800bdf2:	f000 f845 	bl	800be80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bdf6:	e00a      	b.n	800be0e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bdf8:	6878      	ldr	r0, [r7, #4]
 800bdfa:	f000 f841 	bl	800be80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bdfe:	e006      	b.n	800be0e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800be00:	6878      	ldr	r0, [r7, #4]
 800be02:	f000 f83d 	bl	800be80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	2200      	movs	r2, #0
 800be0a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800be0c:	e01e      	b.n	800be4c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be0e:	bf00      	nop
    return;
 800be10:	e01c      	b.n	800be4c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800be12:	69fb      	ldr	r3, [r7, #28]
 800be14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d008      	beq.n	800be2e <HAL_UART_IRQHandler+0x1d6>
 800be1c:	69bb      	ldr	r3, [r7, #24]
 800be1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be22:	2b00      	cmp	r3, #0
 800be24:	d003      	beq.n	800be2e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800be26:	6878      	ldr	r0, [r7, #4]
 800be28:	f000 f8fd 	bl	800c026 <UART_Transmit_IT>
    return;
 800be2c:	e00f      	b.n	800be4e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800be2e:	69fb      	ldr	r3, [r7, #28]
 800be30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be34:	2b00      	cmp	r3, #0
 800be36:	d00a      	beq.n	800be4e <HAL_UART_IRQHandler+0x1f6>
 800be38:	69bb      	ldr	r3, [r7, #24]
 800be3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d005      	beq.n	800be4e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800be42:	6878      	ldr	r0, [r7, #4]
 800be44:	f000 f945 	bl	800c0d2 <UART_EndTransmit_IT>
    return;
 800be48:	bf00      	nop
 800be4a:	e000      	b.n	800be4e <HAL_UART_IRQHandler+0x1f6>
    return;
 800be4c:	bf00      	nop
  }
}
 800be4e:	3720      	adds	r7, #32
 800be50:	46bd      	mov	sp, r7
 800be52:	bd80      	pop	{r7, pc}
 800be54:	0800bfff 	.word	0x0800bfff

0800be58 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800be58:	b480      	push	{r7}
 800be5a:	b083      	sub	sp, #12
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800be60:	bf00      	nop
 800be62:	370c      	adds	r7, #12
 800be64:	46bd      	mov	sp, r7
 800be66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6a:	4770      	bx	lr

0800be6c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800be6c:	b480      	push	{r7}
 800be6e:	b083      	sub	sp, #12
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800be74:	bf00      	nop
 800be76:	370c      	adds	r7, #12
 800be78:	46bd      	mov	sp, r7
 800be7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7e:	4770      	bx	lr

0800be80 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800be80:	b480      	push	{r7}
 800be82:	b083      	sub	sp, #12
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800be88:	bf00      	nop
 800be8a:	370c      	adds	r7, #12
 800be8c:	46bd      	mov	sp, r7
 800be8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be92:	4770      	bx	lr

0800be94 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b084      	sub	sp, #16
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bea0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800beac:	2b00      	cmp	r3, #0
 800beae:	d113      	bne.n	800bed8 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	2200      	movs	r2, #0
 800beb4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	695a      	ldr	r2, [r3, #20]
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bec4:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	68da      	ldr	r2, [r3, #12]
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bed4:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bed6:	e002      	b.n	800bede <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800bed8:	68f8      	ldr	r0, [r7, #12]
 800beda:	f7fc fdf5 	bl	8008ac8 <HAL_UART_TxCpltCallback>
}
 800bede:	bf00      	nop
 800bee0:	3710      	adds	r7, #16
 800bee2:	46bd      	mov	sp, r7
 800bee4:	bd80      	pop	{r7, pc}

0800bee6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bee6:	b580      	push	{r7, lr}
 800bee8:	b084      	sub	sp, #16
 800beea:	af00      	add	r7, sp, #0
 800beec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bef2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800bef4:	68f8      	ldr	r0, [r7, #12]
 800bef6:	f7ff ffaf 	bl	800be58 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800befa:	bf00      	nop
 800befc:	3710      	adds	r7, #16
 800befe:	46bd      	mov	sp, r7
 800bf00:	bd80      	pop	{r7, pc}

0800bf02 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bf02:	b580      	push	{r7, lr}
 800bf04:	b084      	sub	sp, #16
 800bf06:	af00      	add	r7, sp, #0
 800bf08:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf12:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800bf14:	68bb      	ldr	r3, [r7, #8]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	695b      	ldr	r3, [r3, #20]
 800bf1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf1e:	2b80      	cmp	r3, #128	; 0x80
 800bf20:	bf0c      	ite	eq
 800bf22:	2301      	moveq	r3, #1
 800bf24:	2300      	movne	r3, #0
 800bf26:	b2db      	uxtb	r3, r3
 800bf28:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800bf2a:	68bb      	ldr	r3, [r7, #8]
 800bf2c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800bf30:	b2db      	uxtb	r3, r3
 800bf32:	2b21      	cmp	r3, #33	; 0x21
 800bf34:	d108      	bne.n	800bf48 <UART_DMAError+0x46>
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d005      	beq.n	800bf48 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800bf3c:	68bb      	ldr	r3, [r7, #8]
 800bf3e:	2200      	movs	r2, #0
 800bf40:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800bf42:	68b8      	ldr	r0, [r7, #8]
 800bf44:	f000 f827 	bl	800bf96 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bf48:	68bb      	ldr	r3, [r7, #8]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	695b      	ldr	r3, [r3, #20]
 800bf4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf52:	2b40      	cmp	r3, #64	; 0x40
 800bf54:	bf0c      	ite	eq
 800bf56:	2301      	moveq	r3, #1
 800bf58:	2300      	movne	r3, #0
 800bf5a:	b2db      	uxtb	r3, r3
 800bf5c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800bf5e:	68bb      	ldr	r3, [r7, #8]
 800bf60:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800bf64:	b2db      	uxtb	r3, r3
 800bf66:	2b22      	cmp	r3, #34	; 0x22
 800bf68:	d108      	bne.n	800bf7c <UART_DMAError+0x7a>
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d005      	beq.n	800bf7c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800bf70:	68bb      	ldr	r3, [r7, #8]
 800bf72:	2200      	movs	r2, #0
 800bf74:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800bf76:	68b8      	ldr	r0, [r7, #8]
 800bf78:	f000 f823 	bl	800bfc2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bf7c:	68bb      	ldr	r3, [r7, #8]
 800bf7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf80:	f043 0210 	orr.w	r2, r3, #16
 800bf84:	68bb      	ldr	r3, [r7, #8]
 800bf86:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bf88:	68b8      	ldr	r0, [r7, #8]
 800bf8a:	f7ff ff79 	bl	800be80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bf8e:	bf00      	nop
 800bf90:	3710      	adds	r7, #16
 800bf92:	46bd      	mov	sp, r7
 800bf94:	bd80      	pop	{r7, pc}

0800bf96 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bf96:	b480      	push	{r7}
 800bf98:	b083      	sub	sp, #12
 800bf9a:	af00      	add	r7, sp, #0
 800bf9c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	68da      	ldr	r2, [r3, #12]
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800bfac:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	2220      	movs	r2, #32
 800bfb2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800bfb6:	bf00      	nop
 800bfb8:	370c      	adds	r7, #12
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc0:	4770      	bx	lr

0800bfc2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bfc2:	b480      	push	{r7}
 800bfc4:	b083      	sub	sp, #12
 800bfc6:	af00      	add	r7, sp, #0
 800bfc8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	68da      	ldr	r2, [r3, #12]
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800bfd8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	695a      	ldr	r2, [r3, #20]
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	f022 0201 	bic.w	r2, r2, #1
 800bfe8:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	2220      	movs	r2, #32
 800bfee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800bff2:	bf00      	nop
 800bff4:	370c      	adds	r7, #12
 800bff6:	46bd      	mov	sp, r7
 800bff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffc:	4770      	bx	lr

0800bffe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bffe:	b580      	push	{r7, lr}
 800c000:	b084      	sub	sp, #16
 800c002:	af00      	add	r7, sp, #0
 800c004:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c00a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	2200      	movs	r2, #0
 800c010:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	2200      	movs	r2, #0
 800c016:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c018:	68f8      	ldr	r0, [r7, #12]
 800c01a:	f7ff ff31 	bl	800be80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c01e:	bf00      	nop
 800c020:	3710      	adds	r7, #16
 800c022:	46bd      	mov	sp, r7
 800c024:	bd80      	pop	{r7, pc}

0800c026 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c026:	b480      	push	{r7}
 800c028:	b085      	sub	sp, #20
 800c02a:	af00      	add	r7, sp, #0
 800c02c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c034:	b2db      	uxtb	r3, r3
 800c036:	2b21      	cmp	r3, #33	; 0x21
 800c038:	d144      	bne.n	800c0c4 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	689b      	ldr	r3, [r3, #8]
 800c03e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c042:	d11a      	bne.n	800c07a <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	6a1b      	ldr	r3, [r3, #32]
 800c048:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	881b      	ldrh	r3, [r3, #0]
 800c04e:	461a      	mov	r2, r3
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c058:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	691b      	ldr	r3, [r3, #16]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d105      	bne.n	800c06e <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	6a1b      	ldr	r3, [r3, #32]
 800c066:	1c9a      	adds	r2, r3, #2
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	621a      	str	r2, [r3, #32]
 800c06c:	e00e      	b.n	800c08c <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	6a1b      	ldr	r3, [r3, #32]
 800c072:	1c5a      	adds	r2, r3, #1
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	621a      	str	r2, [r3, #32]
 800c078:	e008      	b.n	800c08c <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	6a1b      	ldr	r3, [r3, #32]
 800c07e:	1c59      	adds	r1, r3, #1
 800c080:	687a      	ldr	r2, [r7, #4]
 800c082:	6211      	str	r1, [r2, #32]
 800c084:	781a      	ldrb	r2, [r3, #0]
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c090:	b29b      	uxth	r3, r3
 800c092:	3b01      	subs	r3, #1
 800c094:	b29b      	uxth	r3, r3
 800c096:	687a      	ldr	r2, [r7, #4]
 800c098:	4619      	mov	r1, r3
 800c09a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d10f      	bne.n	800c0c0 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	68da      	ldr	r2, [r3, #12]
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c0ae:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	68da      	ldr	r2, [r3, #12]
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c0be:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	e000      	b.n	800c0c6 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800c0c4:	2302      	movs	r3, #2
  }
}
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	3714      	adds	r7, #20
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d0:	4770      	bx	lr

0800c0d2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c0d2:	b580      	push	{r7, lr}
 800c0d4:	b082      	sub	sp, #8
 800c0d6:	af00      	add	r7, sp, #0
 800c0d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	68da      	ldr	r2, [r3, #12]
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c0e8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	2220      	movs	r2, #32
 800c0ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c0f2:	6878      	ldr	r0, [r7, #4]
 800c0f4:	f7fc fce8 	bl	8008ac8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c0f8:	2300      	movs	r3, #0
}
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	3708      	adds	r7, #8
 800c0fe:	46bd      	mov	sp, r7
 800c100:	bd80      	pop	{r7, pc}

0800c102 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c102:	b580      	push	{r7, lr}
 800c104:	b084      	sub	sp, #16
 800c106:	af00      	add	r7, sp, #0
 800c108:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800c110:	b2db      	uxtb	r3, r3
 800c112:	2b22      	cmp	r3, #34	; 0x22
 800c114:	d171      	bne.n	800c1fa <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	689b      	ldr	r3, [r3, #8]
 800c11a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c11e:	d123      	bne.n	800c168 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c124:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	691b      	ldr	r3, [r3, #16]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d10e      	bne.n	800c14c <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	685b      	ldr	r3, [r3, #4]
 800c134:	b29b      	uxth	r3, r3
 800c136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c13a:	b29a      	uxth	r2, r3
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c144:	1c9a      	adds	r2, r3, #2
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	629a      	str	r2, [r3, #40]	; 0x28
 800c14a:	e029      	b.n	800c1a0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	685b      	ldr	r3, [r3, #4]
 800c152:	b29b      	uxth	r3, r3
 800c154:	b2db      	uxtb	r3, r3
 800c156:	b29a      	uxth	r2, r3
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c160:	1c5a      	adds	r2, r3, #1
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	629a      	str	r2, [r3, #40]	; 0x28
 800c166:	e01b      	b.n	800c1a0 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	691b      	ldr	r3, [r3, #16]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d10a      	bne.n	800c186 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	6858      	ldr	r0, [r3, #4]
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c17a:	1c59      	adds	r1, r3, #1
 800c17c:	687a      	ldr	r2, [r7, #4]
 800c17e:	6291      	str	r1, [r2, #40]	; 0x28
 800c180:	b2c2      	uxtb	r2, r0
 800c182:	701a      	strb	r2, [r3, #0]
 800c184:	e00c      	b.n	800c1a0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	685b      	ldr	r3, [r3, #4]
 800c18c:	b2da      	uxtb	r2, r3
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c192:	1c58      	adds	r0, r3, #1
 800c194:	6879      	ldr	r1, [r7, #4]
 800c196:	6288      	str	r0, [r1, #40]	; 0x28
 800c198:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800c19c:	b2d2      	uxtb	r2, r2
 800c19e:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c1a4:	b29b      	uxth	r3, r3
 800c1a6:	3b01      	subs	r3, #1
 800c1a8:	b29b      	uxth	r3, r3
 800c1aa:	687a      	ldr	r2, [r7, #4]
 800c1ac:	4619      	mov	r1, r3
 800c1ae:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d120      	bne.n	800c1f6 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	68da      	ldr	r2, [r3, #12]
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	f022 0220 	bic.w	r2, r2, #32
 800c1c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	68da      	ldr	r2, [r3, #12]
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c1d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	695a      	ldr	r2, [r3, #20]
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	f022 0201 	bic.w	r2, r2, #1
 800c1e2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	2220      	movs	r2, #32
 800c1e8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800c1ec:	6878      	ldr	r0, [r7, #4]
 800c1ee:	f7ff fe3d 	bl	800be6c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	e002      	b.n	800c1fc <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	e000      	b.n	800c1fc <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800c1fa:	2302      	movs	r3, #2
  }
}
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	3710      	adds	r7, #16
 800c200:	46bd      	mov	sp, r7
 800c202:	bd80      	pop	{r7, pc}

0800c204 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c208:	b085      	sub	sp, #20
 800c20a:	af00      	add	r7, sp, #0
 800c20c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	691b      	ldr	r3, [r3, #16]
 800c214:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	68da      	ldr	r2, [r3, #12]
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	430a      	orrs	r2, r1
 800c222:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	689a      	ldr	r2, [r3, #8]
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	691b      	ldr	r3, [r3, #16]
 800c22c:	431a      	orrs	r2, r3
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	695b      	ldr	r3, [r3, #20]
 800c232:	431a      	orrs	r2, r3
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	69db      	ldr	r3, [r3, #28]
 800c238:	4313      	orrs	r3, r2
 800c23a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	68db      	ldr	r3, [r3, #12]
 800c242:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800c246:	f023 030c 	bic.w	r3, r3, #12
 800c24a:	687a      	ldr	r2, [r7, #4]
 800c24c:	6812      	ldr	r2, [r2, #0]
 800c24e:	68f9      	ldr	r1, [r7, #12]
 800c250:	430b      	orrs	r3, r1
 800c252:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	695b      	ldr	r3, [r3, #20]
 800c25a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	699a      	ldr	r2, [r3, #24]
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	430a      	orrs	r2, r1
 800c268:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	69db      	ldr	r3, [r3, #28]
 800c26e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c272:	f040 818b 	bne.w	800c58c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	4ac1      	ldr	r2, [pc, #772]	; (800c580 <UART_SetConfig+0x37c>)
 800c27c:	4293      	cmp	r3, r2
 800c27e:	d005      	beq.n	800c28c <UART_SetConfig+0x88>
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	4abf      	ldr	r2, [pc, #764]	; (800c584 <UART_SetConfig+0x380>)
 800c286:	4293      	cmp	r3, r2
 800c288:	f040 80bd 	bne.w	800c406 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c28c:	f7ff f934 	bl	800b4f8 <HAL_RCC_GetPCLK2Freq>
 800c290:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c292:	68bb      	ldr	r3, [r7, #8]
 800c294:	461d      	mov	r5, r3
 800c296:	f04f 0600 	mov.w	r6, #0
 800c29a:	46a8      	mov	r8, r5
 800c29c:	46b1      	mov	r9, r6
 800c29e:	eb18 0308 	adds.w	r3, r8, r8
 800c2a2:	eb49 0409 	adc.w	r4, r9, r9
 800c2a6:	4698      	mov	r8, r3
 800c2a8:	46a1      	mov	r9, r4
 800c2aa:	eb18 0805 	adds.w	r8, r8, r5
 800c2ae:	eb49 0906 	adc.w	r9, r9, r6
 800c2b2:	f04f 0100 	mov.w	r1, #0
 800c2b6:	f04f 0200 	mov.w	r2, #0
 800c2ba:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800c2be:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800c2c2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800c2c6:	4688      	mov	r8, r1
 800c2c8:	4691      	mov	r9, r2
 800c2ca:	eb18 0005 	adds.w	r0, r8, r5
 800c2ce:	eb49 0106 	adc.w	r1, r9, r6
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	685b      	ldr	r3, [r3, #4]
 800c2d6:	461d      	mov	r5, r3
 800c2d8:	f04f 0600 	mov.w	r6, #0
 800c2dc:	196b      	adds	r3, r5, r5
 800c2de:	eb46 0406 	adc.w	r4, r6, r6
 800c2e2:	461a      	mov	r2, r3
 800c2e4:	4623      	mov	r3, r4
 800c2e6:	f7f4 fcdf 	bl	8000ca8 <__aeabi_uldivmod>
 800c2ea:	4603      	mov	r3, r0
 800c2ec:	460c      	mov	r4, r1
 800c2ee:	461a      	mov	r2, r3
 800c2f0:	4ba5      	ldr	r3, [pc, #660]	; (800c588 <UART_SetConfig+0x384>)
 800c2f2:	fba3 2302 	umull	r2, r3, r3, r2
 800c2f6:	095b      	lsrs	r3, r3, #5
 800c2f8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800c2fc:	68bb      	ldr	r3, [r7, #8]
 800c2fe:	461d      	mov	r5, r3
 800c300:	f04f 0600 	mov.w	r6, #0
 800c304:	46a9      	mov	r9, r5
 800c306:	46b2      	mov	sl, r6
 800c308:	eb19 0309 	adds.w	r3, r9, r9
 800c30c:	eb4a 040a 	adc.w	r4, sl, sl
 800c310:	4699      	mov	r9, r3
 800c312:	46a2      	mov	sl, r4
 800c314:	eb19 0905 	adds.w	r9, r9, r5
 800c318:	eb4a 0a06 	adc.w	sl, sl, r6
 800c31c:	f04f 0100 	mov.w	r1, #0
 800c320:	f04f 0200 	mov.w	r2, #0
 800c324:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c328:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c32c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c330:	4689      	mov	r9, r1
 800c332:	4692      	mov	sl, r2
 800c334:	eb19 0005 	adds.w	r0, r9, r5
 800c338:	eb4a 0106 	adc.w	r1, sl, r6
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	685b      	ldr	r3, [r3, #4]
 800c340:	461d      	mov	r5, r3
 800c342:	f04f 0600 	mov.w	r6, #0
 800c346:	196b      	adds	r3, r5, r5
 800c348:	eb46 0406 	adc.w	r4, r6, r6
 800c34c:	461a      	mov	r2, r3
 800c34e:	4623      	mov	r3, r4
 800c350:	f7f4 fcaa 	bl	8000ca8 <__aeabi_uldivmod>
 800c354:	4603      	mov	r3, r0
 800c356:	460c      	mov	r4, r1
 800c358:	461a      	mov	r2, r3
 800c35a:	4b8b      	ldr	r3, [pc, #556]	; (800c588 <UART_SetConfig+0x384>)
 800c35c:	fba3 1302 	umull	r1, r3, r3, r2
 800c360:	095b      	lsrs	r3, r3, #5
 800c362:	2164      	movs	r1, #100	; 0x64
 800c364:	fb01 f303 	mul.w	r3, r1, r3
 800c368:	1ad3      	subs	r3, r2, r3
 800c36a:	00db      	lsls	r3, r3, #3
 800c36c:	3332      	adds	r3, #50	; 0x32
 800c36e:	4a86      	ldr	r2, [pc, #536]	; (800c588 <UART_SetConfig+0x384>)
 800c370:	fba2 2303 	umull	r2, r3, r2, r3
 800c374:	095b      	lsrs	r3, r3, #5
 800c376:	005b      	lsls	r3, r3, #1
 800c378:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c37c:	4498      	add	r8, r3
 800c37e:	68bb      	ldr	r3, [r7, #8]
 800c380:	461d      	mov	r5, r3
 800c382:	f04f 0600 	mov.w	r6, #0
 800c386:	46a9      	mov	r9, r5
 800c388:	46b2      	mov	sl, r6
 800c38a:	eb19 0309 	adds.w	r3, r9, r9
 800c38e:	eb4a 040a 	adc.w	r4, sl, sl
 800c392:	4699      	mov	r9, r3
 800c394:	46a2      	mov	sl, r4
 800c396:	eb19 0905 	adds.w	r9, r9, r5
 800c39a:	eb4a 0a06 	adc.w	sl, sl, r6
 800c39e:	f04f 0100 	mov.w	r1, #0
 800c3a2:	f04f 0200 	mov.w	r2, #0
 800c3a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c3aa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c3ae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c3b2:	4689      	mov	r9, r1
 800c3b4:	4692      	mov	sl, r2
 800c3b6:	eb19 0005 	adds.w	r0, r9, r5
 800c3ba:	eb4a 0106 	adc.w	r1, sl, r6
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	685b      	ldr	r3, [r3, #4]
 800c3c2:	461d      	mov	r5, r3
 800c3c4:	f04f 0600 	mov.w	r6, #0
 800c3c8:	196b      	adds	r3, r5, r5
 800c3ca:	eb46 0406 	adc.w	r4, r6, r6
 800c3ce:	461a      	mov	r2, r3
 800c3d0:	4623      	mov	r3, r4
 800c3d2:	f7f4 fc69 	bl	8000ca8 <__aeabi_uldivmod>
 800c3d6:	4603      	mov	r3, r0
 800c3d8:	460c      	mov	r4, r1
 800c3da:	461a      	mov	r2, r3
 800c3dc:	4b6a      	ldr	r3, [pc, #424]	; (800c588 <UART_SetConfig+0x384>)
 800c3de:	fba3 1302 	umull	r1, r3, r3, r2
 800c3e2:	095b      	lsrs	r3, r3, #5
 800c3e4:	2164      	movs	r1, #100	; 0x64
 800c3e6:	fb01 f303 	mul.w	r3, r1, r3
 800c3ea:	1ad3      	subs	r3, r2, r3
 800c3ec:	00db      	lsls	r3, r3, #3
 800c3ee:	3332      	adds	r3, #50	; 0x32
 800c3f0:	4a65      	ldr	r2, [pc, #404]	; (800c588 <UART_SetConfig+0x384>)
 800c3f2:	fba2 2303 	umull	r2, r3, r2, r3
 800c3f6:	095b      	lsrs	r3, r3, #5
 800c3f8:	f003 0207 	and.w	r2, r3, #7
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	4442      	add	r2, r8
 800c402:	609a      	str	r2, [r3, #8]
 800c404:	e26f      	b.n	800c8e6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c406:	f7ff f863 	bl	800b4d0 <HAL_RCC_GetPCLK1Freq>
 800c40a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c40c:	68bb      	ldr	r3, [r7, #8]
 800c40e:	461d      	mov	r5, r3
 800c410:	f04f 0600 	mov.w	r6, #0
 800c414:	46a8      	mov	r8, r5
 800c416:	46b1      	mov	r9, r6
 800c418:	eb18 0308 	adds.w	r3, r8, r8
 800c41c:	eb49 0409 	adc.w	r4, r9, r9
 800c420:	4698      	mov	r8, r3
 800c422:	46a1      	mov	r9, r4
 800c424:	eb18 0805 	adds.w	r8, r8, r5
 800c428:	eb49 0906 	adc.w	r9, r9, r6
 800c42c:	f04f 0100 	mov.w	r1, #0
 800c430:	f04f 0200 	mov.w	r2, #0
 800c434:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800c438:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800c43c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800c440:	4688      	mov	r8, r1
 800c442:	4691      	mov	r9, r2
 800c444:	eb18 0005 	adds.w	r0, r8, r5
 800c448:	eb49 0106 	adc.w	r1, r9, r6
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	685b      	ldr	r3, [r3, #4]
 800c450:	461d      	mov	r5, r3
 800c452:	f04f 0600 	mov.w	r6, #0
 800c456:	196b      	adds	r3, r5, r5
 800c458:	eb46 0406 	adc.w	r4, r6, r6
 800c45c:	461a      	mov	r2, r3
 800c45e:	4623      	mov	r3, r4
 800c460:	f7f4 fc22 	bl	8000ca8 <__aeabi_uldivmod>
 800c464:	4603      	mov	r3, r0
 800c466:	460c      	mov	r4, r1
 800c468:	461a      	mov	r2, r3
 800c46a:	4b47      	ldr	r3, [pc, #284]	; (800c588 <UART_SetConfig+0x384>)
 800c46c:	fba3 2302 	umull	r2, r3, r3, r2
 800c470:	095b      	lsrs	r3, r3, #5
 800c472:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800c476:	68bb      	ldr	r3, [r7, #8]
 800c478:	461d      	mov	r5, r3
 800c47a:	f04f 0600 	mov.w	r6, #0
 800c47e:	46a9      	mov	r9, r5
 800c480:	46b2      	mov	sl, r6
 800c482:	eb19 0309 	adds.w	r3, r9, r9
 800c486:	eb4a 040a 	adc.w	r4, sl, sl
 800c48a:	4699      	mov	r9, r3
 800c48c:	46a2      	mov	sl, r4
 800c48e:	eb19 0905 	adds.w	r9, r9, r5
 800c492:	eb4a 0a06 	adc.w	sl, sl, r6
 800c496:	f04f 0100 	mov.w	r1, #0
 800c49a:	f04f 0200 	mov.w	r2, #0
 800c49e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c4a2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c4a6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c4aa:	4689      	mov	r9, r1
 800c4ac:	4692      	mov	sl, r2
 800c4ae:	eb19 0005 	adds.w	r0, r9, r5
 800c4b2:	eb4a 0106 	adc.w	r1, sl, r6
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	685b      	ldr	r3, [r3, #4]
 800c4ba:	461d      	mov	r5, r3
 800c4bc:	f04f 0600 	mov.w	r6, #0
 800c4c0:	196b      	adds	r3, r5, r5
 800c4c2:	eb46 0406 	adc.w	r4, r6, r6
 800c4c6:	461a      	mov	r2, r3
 800c4c8:	4623      	mov	r3, r4
 800c4ca:	f7f4 fbed 	bl	8000ca8 <__aeabi_uldivmod>
 800c4ce:	4603      	mov	r3, r0
 800c4d0:	460c      	mov	r4, r1
 800c4d2:	461a      	mov	r2, r3
 800c4d4:	4b2c      	ldr	r3, [pc, #176]	; (800c588 <UART_SetConfig+0x384>)
 800c4d6:	fba3 1302 	umull	r1, r3, r3, r2
 800c4da:	095b      	lsrs	r3, r3, #5
 800c4dc:	2164      	movs	r1, #100	; 0x64
 800c4de:	fb01 f303 	mul.w	r3, r1, r3
 800c4e2:	1ad3      	subs	r3, r2, r3
 800c4e4:	00db      	lsls	r3, r3, #3
 800c4e6:	3332      	adds	r3, #50	; 0x32
 800c4e8:	4a27      	ldr	r2, [pc, #156]	; (800c588 <UART_SetConfig+0x384>)
 800c4ea:	fba2 2303 	umull	r2, r3, r2, r3
 800c4ee:	095b      	lsrs	r3, r3, #5
 800c4f0:	005b      	lsls	r3, r3, #1
 800c4f2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c4f6:	4498      	add	r8, r3
 800c4f8:	68bb      	ldr	r3, [r7, #8]
 800c4fa:	461d      	mov	r5, r3
 800c4fc:	f04f 0600 	mov.w	r6, #0
 800c500:	46a9      	mov	r9, r5
 800c502:	46b2      	mov	sl, r6
 800c504:	eb19 0309 	adds.w	r3, r9, r9
 800c508:	eb4a 040a 	adc.w	r4, sl, sl
 800c50c:	4699      	mov	r9, r3
 800c50e:	46a2      	mov	sl, r4
 800c510:	eb19 0905 	adds.w	r9, r9, r5
 800c514:	eb4a 0a06 	adc.w	sl, sl, r6
 800c518:	f04f 0100 	mov.w	r1, #0
 800c51c:	f04f 0200 	mov.w	r2, #0
 800c520:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c524:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c528:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c52c:	4689      	mov	r9, r1
 800c52e:	4692      	mov	sl, r2
 800c530:	eb19 0005 	adds.w	r0, r9, r5
 800c534:	eb4a 0106 	adc.w	r1, sl, r6
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	685b      	ldr	r3, [r3, #4]
 800c53c:	461d      	mov	r5, r3
 800c53e:	f04f 0600 	mov.w	r6, #0
 800c542:	196b      	adds	r3, r5, r5
 800c544:	eb46 0406 	adc.w	r4, r6, r6
 800c548:	461a      	mov	r2, r3
 800c54a:	4623      	mov	r3, r4
 800c54c:	f7f4 fbac 	bl	8000ca8 <__aeabi_uldivmod>
 800c550:	4603      	mov	r3, r0
 800c552:	460c      	mov	r4, r1
 800c554:	461a      	mov	r2, r3
 800c556:	4b0c      	ldr	r3, [pc, #48]	; (800c588 <UART_SetConfig+0x384>)
 800c558:	fba3 1302 	umull	r1, r3, r3, r2
 800c55c:	095b      	lsrs	r3, r3, #5
 800c55e:	2164      	movs	r1, #100	; 0x64
 800c560:	fb01 f303 	mul.w	r3, r1, r3
 800c564:	1ad3      	subs	r3, r2, r3
 800c566:	00db      	lsls	r3, r3, #3
 800c568:	3332      	adds	r3, #50	; 0x32
 800c56a:	4a07      	ldr	r2, [pc, #28]	; (800c588 <UART_SetConfig+0x384>)
 800c56c:	fba2 2303 	umull	r2, r3, r2, r3
 800c570:	095b      	lsrs	r3, r3, #5
 800c572:	f003 0207 	and.w	r2, r3, #7
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	4442      	add	r2, r8
 800c57c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800c57e:	e1b2      	b.n	800c8e6 <UART_SetConfig+0x6e2>
 800c580:	40011000 	.word	0x40011000
 800c584:	40011400 	.word	0x40011400
 800c588:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	4ad7      	ldr	r2, [pc, #860]	; (800c8f0 <UART_SetConfig+0x6ec>)
 800c592:	4293      	cmp	r3, r2
 800c594:	d005      	beq.n	800c5a2 <UART_SetConfig+0x39e>
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	4ad6      	ldr	r2, [pc, #856]	; (800c8f4 <UART_SetConfig+0x6f0>)
 800c59c:	4293      	cmp	r3, r2
 800c59e:	f040 80d1 	bne.w	800c744 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800c5a2:	f7fe ffa9 	bl	800b4f8 <HAL_RCC_GetPCLK2Freq>
 800c5a6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c5a8:	68bb      	ldr	r3, [r7, #8]
 800c5aa:	469a      	mov	sl, r3
 800c5ac:	f04f 0b00 	mov.w	fp, #0
 800c5b0:	46d0      	mov	r8, sl
 800c5b2:	46d9      	mov	r9, fp
 800c5b4:	eb18 0308 	adds.w	r3, r8, r8
 800c5b8:	eb49 0409 	adc.w	r4, r9, r9
 800c5bc:	4698      	mov	r8, r3
 800c5be:	46a1      	mov	r9, r4
 800c5c0:	eb18 080a 	adds.w	r8, r8, sl
 800c5c4:	eb49 090b 	adc.w	r9, r9, fp
 800c5c8:	f04f 0100 	mov.w	r1, #0
 800c5cc:	f04f 0200 	mov.w	r2, #0
 800c5d0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800c5d4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800c5d8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800c5dc:	4688      	mov	r8, r1
 800c5de:	4691      	mov	r9, r2
 800c5e0:	eb1a 0508 	adds.w	r5, sl, r8
 800c5e4:	eb4b 0609 	adc.w	r6, fp, r9
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	685b      	ldr	r3, [r3, #4]
 800c5ec:	4619      	mov	r1, r3
 800c5ee:	f04f 0200 	mov.w	r2, #0
 800c5f2:	f04f 0300 	mov.w	r3, #0
 800c5f6:	f04f 0400 	mov.w	r4, #0
 800c5fa:	0094      	lsls	r4, r2, #2
 800c5fc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800c600:	008b      	lsls	r3, r1, #2
 800c602:	461a      	mov	r2, r3
 800c604:	4623      	mov	r3, r4
 800c606:	4628      	mov	r0, r5
 800c608:	4631      	mov	r1, r6
 800c60a:	f7f4 fb4d 	bl	8000ca8 <__aeabi_uldivmod>
 800c60e:	4603      	mov	r3, r0
 800c610:	460c      	mov	r4, r1
 800c612:	461a      	mov	r2, r3
 800c614:	4bb8      	ldr	r3, [pc, #736]	; (800c8f8 <UART_SetConfig+0x6f4>)
 800c616:	fba3 2302 	umull	r2, r3, r3, r2
 800c61a:	095b      	lsrs	r3, r3, #5
 800c61c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800c620:	68bb      	ldr	r3, [r7, #8]
 800c622:	469b      	mov	fp, r3
 800c624:	f04f 0c00 	mov.w	ip, #0
 800c628:	46d9      	mov	r9, fp
 800c62a:	46e2      	mov	sl, ip
 800c62c:	eb19 0309 	adds.w	r3, r9, r9
 800c630:	eb4a 040a 	adc.w	r4, sl, sl
 800c634:	4699      	mov	r9, r3
 800c636:	46a2      	mov	sl, r4
 800c638:	eb19 090b 	adds.w	r9, r9, fp
 800c63c:	eb4a 0a0c 	adc.w	sl, sl, ip
 800c640:	f04f 0100 	mov.w	r1, #0
 800c644:	f04f 0200 	mov.w	r2, #0
 800c648:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c64c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c650:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c654:	4689      	mov	r9, r1
 800c656:	4692      	mov	sl, r2
 800c658:	eb1b 0509 	adds.w	r5, fp, r9
 800c65c:	eb4c 060a 	adc.w	r6, ip, sl
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	685b      	ldr	r3, [r3, #4]
 800c664:	4619      	mov	r1, r3
 800c666:	f04f 0200 	mov.w	r2, #0
 800c66a:	f04f 0300 	mov.w	r3, #0
 800c66e:	f04f 0400 	mov.w	r4, #0
 800c672:	0094      	lsls	r4, r2, #2
 800c674:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800c678:	008b      	lsls	r3, r1, #2
 800c67a:	461a      	mov	r2, r3
 800c67c:	4623      	mov	r3, r4
 800c67e:	4628      	mov	r0, r5
 800c680:	4631      	mov	r1, r6
 800c682:	f7f4 fb11 	bl	8000ca8 <__aeabi_uldivmod>
 800c686:	4603      	mov	r3, r0
 800c688:	460c      	mov	r4, r1
 800c68a:	461a      	mov	r2, r3
 800c68c:	4b9a      	ldr	r3, [pc, #616]	; (800c8f8 <UART_SetConfig+0x6f4>)
 800c68e:	fba3 1302 	umull	r1, r3, r3, r2
 800c692:	095b      	lsrs	r3, r3, #5
 800c694:	2164      	movs	r1, #100	; 0x64
 800c696:	fb01 f303 	mul.w	r3, r1, r3
 800c69a:	1ad3      	subs	r3, r2, r3
 800c69c:	011b      	lsls	r3, r3, #4
 800c69e:	3332      	adds	r3, #50	; 0x32
 800c6a0:	4a95      	ldr	r2, [pc, #596]	; (800c8f8 <UART_SetConfig+0x6f4>)
 800c6a2:	fba2 2303 	umull	r2, r3, r2, r3
 800c6a6:	095b      	lsrs	r3, r3, #5
 800c6a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c6ac:	4498      	add	r8, r3
 800c6ae:	68bb      	ldr	r3, [r7, #8]
 800c6b0:	469b      	mov	fp, r3
 800c6b2:	f04f 0c00 	mov.w	ip, #0
 800c6b6:	46d9      	mov	r9, fp
 800c6b8:	46e2      	mov	sl, ip
 800c6ba:	eb19 0309 	adds.w	r3, r9, r9
 800c6be:	eb4a 040a 	adc.w	r4, sl, sl
 800c6c2:	4699      	mov	r9, r3
 800c6c4:	46a2      	mov	sl, r4
 800c6c6:	eb19 090b 	adds.w	r9, r9, fp
 800c6ca:	eb4a 0a0c 	adc.w	sl, sl, ip
 800c6ce:	f04f 0100 	mov.w	r1, #0
 800c6d2:	f04f 0200 	mov.w	r2, #0
 800c6d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c6da:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c6de:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c6e2:	4689      	mov	r9, r1
 800c6e4:	4692      	mov	sl, r2
 800c6e6:	eb1b 0509 	adds.w	r5, fp, r9
 800c6ea:	eb4c 060a 	adc.w	r6, ip, sl
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	685b      	ldr	r3, [r3, #4]
 800c6f2:	4619      	mov	r1, r3
 800c6f4:	f04f 0200 	mov.w	r2, #0
 800c6f8:	f04f 0300 	mov.w	r3, #0
 800c6fc:	f04f 0400 	mov.w	r4, #0
 800c700:	0094      	lsls	r4, r2, #2
 800c702:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800c706:	008b      	lsls	r3, r1, #2
 800c708:	461a      	mov	r2, r3
 800c70a:	4623      	mov	r3, r4
 800c70c:	4628      	mov	r0, r5
 800c70e:	4631      	mov	r1, r6
 800c710:	f7f4 faca 	bl	8000ca8 <__aeabi_uldivmod>
 800c714:	4603      	mov	r3, r0
 800c716:	460c      	mov	r4, r1
 800c718:	461a      	mov	r2, r3
 800c71a:	4b77      	ldr	r3, [pc, #476]	; (800c8f8 <UART_SetConfig+0x6f4>)
 800c71c:	fba3 1302 	umull	r1, r3, r3, r2
 800c720:	095b      	lsrs	r3, r3, #5
 800c722:	2164      	movs	r1, #100	; 0x64
 800c724:	fb01 f303 	mul.w	r3, r1, r3
 800c728:	1ad3      	subs	r3, r2, r3
 800c72a:	011b      	lsls	r3, r3, #4
 800c72c:	3332      	adds	r3, #50	; 0x32
 800c72e:	4a72      	ldr	r2, [pc, #456]	; (800c8f8 <UART_SetConfig+0x6f4>)
 800c730:	fba2 2303 	umull	r2, r3, r2, r3
 800c734:	095b      	lsrs	r3, r3, #5
 800c736:	f003 020f 	and.w	r2, r3, #15
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	4442      	add	r2, r8
 800c740:	609a      	str	r2, [r3, #8]
 800c742:	e0d0      	b.n	800c8e6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800c744:	f7fe fec4 	bl	800b4d0 <HAL_RCC_GetPCLK1Freq>
 800c748:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c74a:	68bb      	ldr	r3, [r7, #8]
 800c74c:	469a      	mov	sl, r3
 800c74e:	f04f 0b00 	mov.w	fp, #0
 800c752:	46d0      	mov	r8, sl
 800c754:	46d9      	mov	r9, fp
 800c756:	eb18 0308 	adds.w	r3, r8, r8
 800c75a:	eb49 0409 	adc.w	r4, r9, r9
 800c75e:	4698      	mov	r8, r3
 800c760:	46a1      	mov	r9, r4
 800c762:	eb18 080a 	adds.w	r8, r8, sl
 800c766:	eb49 090b 	adc.w	r9, r9, fp
 800c76a:	f04f 0100 	mov.w	r1, #0
 800c76e:	f04f 0200 	mov.w	r2, #0
 800c772:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800c776:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800c77a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800c77e:	4688      	mov	r8, r1
 800c780:	4691      	mov	r9, r2
 800c782:	eb1a 0508 	adds.w	r5, sl, r8
 800c786:	eb4b 0609 	adc.w	r6, fp, r9
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	685b      	ldr	r3, [r3, #4]
 800c78e:	4619      	mov	r1, r3
 800c790:	f04f 0200 	mov.w	r2, #0
 800c794:	f04f 0300 	mov.w	r3, #0
 800c798:	f04f 0400 	mov.w	r4, #0
 800c79c:	0094      	lsls	r4, r2, #2
 800c79e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800c7a2:	008b      	lsls	r3, r1, #2
 800c7a4:	461a      	mov	r2, r3
 800c7a6:	4623      	mov	r3, r4
 800c7a8:	4628      	mov	r0, r5
 800c7aa:	4631      	mov	r1, r6
 800c7ac:	f7f4 fa7c 	bl	8000ca8 <__aeabi_uldivmod>
 800c7b0:	4603      	mov	r3, r0
 800c7b2:	460c      	mov	r4, r1
 800c7b4:	461a      	mov	r2, r3
 800c7b6:	4b50      	ldr	r3, [pc, #320]	; (800c8f8 <UART_SetConfig+0x6f4>)
 800c7b8:	fba3 2302 	umull	r2, r3, r3, r2
 800c7bc:	095b      	lsrs	r3, r3, #5
 800c7be:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800c7c2:	68bb      	ldr	r3, [r7, #8]
 800c7c4:	469b      	mov	fp, r3
 800c7c6:	f04f 0c00 	mov.w	ip, #0
 800c7ca:	46d9      	mov	r9, fp
 800c7cc:	46e2      	mov	sl, ip
 800c7ce:	eb19 0309 	adds.w	r3, r9, r9
 800c7d2:	eb4a 040a 	adc.w	r4, sl, sl
 800c7d6:	4699      	mov	r9, r3
 800c7d8:	46a2      	mov	sl, r4
 800c7da:	eb19 090b 	adds.w	r9, r9, fp
 800c7de:	eb4a 0a0c 	adc.w	sl, sl, ip
 800c7e2:	f04f 0100 	mov.w	r1, #0
 800c7e6:	f04f 0200 	mov.w	r2, #0
 800c7ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c7ee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c7f2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c7f6:	4689      	mov	r9, r1
 800c7f8:	4692      	mov	sl, r2
 800c7fa:	eb1b 0509 	adds.w	r5, fp, r9
 800c7fe:	eb4c 060a 	adc.w	r6, ip, sl
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	685b      	ldr	r3, [r3, #4]
 800c806:	4619      	mov	r1, r3
 800c808:	f04f 0200 	mov.w	r2, #0
 800c80c:	f04f 0300 	mov.w	r3, #0
 800c810:	f04f 0400 	mov.w	r4, #0
 800c814:	0094      	lsls	r4, r2, #2
 800c816:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800c81a:	008b      	lsls	r3, r1, #2
 800c81c:	461a      	mov	r2, r3
 800c81e:	4623      	mov	r3, r4
 800c820:	4628      	mov	r0, r5
 800c822:	4631      	mov	r1, r6
 800c824:	f7f4 fa40 	bl	8000ca8 <__aeabi_uldivmod>
 800c828:	4603      	mov	r3, r0
 800c82a:	460c      	mov	r4, r1
 800c82c:	461a      	mov	r2, r3
 800c82e:	4b32      	ldr	r3, [pc, #200]	; (800c8f8 <UART_SetConfig+0x6f4>)
 800c830:	fba3 1302 	umull	r1, r3, r3, r2
 800c834:	095b      	lsrs	r3, r3, #5
 800c836:	2164      	movs	r1, #100	; 0x64
 800c838:	fb01 f303 	mul.w	r3, r1, r3
 800c83c:	1ad3      	subs	r3, r2, r3
 800c83e:	011b      	lsls	r3, r3, #4
 800c840:	3332      	adds	r3, #50	; 0x32
 800c842:	4a2d      	ldr	r2, [pc, #180]	; (800c8f8 <UART_SetConfig+0x6f4>)
 800c844:	fba2 2303 	umull	r2, r3, r2, r3
 800c848:	095b      	lsrs	r3, r3, #5
 800c84a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c84e:	4498      	add	r8, r3
 800c850:	68bb      	ldr	r3, [r7, #8]
 800c852:	469b      	mov	fp, r3
 800c854:	f04f 0c00 	mov.w	ip, #0
 800c858:	46d9      	mov	r9, fp
 800c85a:	46e2      	mov	sl, ip
 800c85c:	eb19 0309 	adds.w	r3, r9, r9
 800c860:	eb4a 040a 	adc.w	r4, sl, sl
 800c864:	4699      	mov	r9, r3
 800c866:	46a2      	mov	sl, r4
 800c868:	eb19 090b 	adds.w	r9, r9, fp
 800c86c:	eb4a 0a0c 	adc.w	sl, sl, ip
 800c870:	f04f 0100 	mov.w	r1, #0
 800c874:	f04f 0200 	mov.w	r2, #0
 800c878:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c87c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c880:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c884:	4689      	mov	r9, r1
 800c886:	4692      	mov	sl, r2
 800c888:	eb1b 0509 	adds.w	r5, fp, r9
 800c88c:	eb4c 060a 	adc.w	r6, ip, sl
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	685b      	ldr	r3, [r3, #4]
 800c894:	4619      	mov	r1, r3
 800c896:	f04f 0200 	mov.w	r2, #0
 800c89a:	f04f 0300 	mov.w	r3, #0
 800c89e:	f04f 0400 	mov.w	r4, #0
 800c8a2:	0094      	lsls	r4, r2, #2
 800c8a4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800c8a8:	008b      	lsls	r3, r1, #2
 800c8aa:	461a      	mov	r2, r3
 800c8ac:	4623      	mov	r3, r4
 800c8ae:	4628      	mov	r0, r5
 800c8b0:	4631      	mov	r1, r6
 800c8b2:	f7f4 f9f9 	bl	8000ca8 <__aeabi_uldivmod>
 800c8b6:	4603      	mov	r3, r0
 800c8b8:	460c      	mov	r4, r1
 800c8ba:	461a      	mov	r2, r3
 800c8bc:	4b0e      	ldr	r3, [pc, #56]	; (800c8f8 <UART_SetConfig+0x6f4>)
 800c8be:	fba3 1302 	umull	r1, r3, r3, r2
 800c8c2:	095b      	lsrs	r3, r3, #5
 800c8c4:	2164      	movs	r1, #100	; 0x64
 800c8c6:	fb01 f303 	mul.w	r3, r1, r3
 800c8ca:	1ad3      	subs	r3, r2, r3
 800c8cc:	011b      	lsls	r3, r3, #4
 800c8ce:	3332      	adds	r3, #50	; 0x32
 800c8d0:	4a09      	ldr	r2, [pc, #36]	; (800c8f8 <UART_SetConfig+0x6f4>)
 800c8d2:	fba2 2303 	umull	r2, r3, r2, r3
 800c8d6:	095b      	lsrs	r3, r3, #5
 800c8d8:	f003 020f 	and.w	r2, r3, #15
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	4442      	add	r2, r8
 800c8e2:	609a      	str	r2, [r3, #8]
}
 800c8e4:	e7ff      	b.n	800c8e6 <UART_SetConfig+0x6e2>
 800c8e6:	bf00      	nop
 800c8e8:	3714      	adds	r7, #20
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8f0:	40011000 	.word	0x40011000
 800c8f4:	40011400 	.word	0x40011400
 800c8f8:	51eb851f 	.word	0x51eb851f

0800c8fc <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800c8fc:	b480      	push	{r7}
 800c8fe:	b085      	sub	sp, #20
 800c900:	af00      	add	r7, sp, #0
 800c902:	6078      	str	r0, [r7, #4]
 800c904:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800c906:	2300      	movs	r3, #0
 800c908:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800c90a:	683b      	ldr	r3, [r7, #0]
 800c90c:	681a      	ldr	r2, [r3, #0]
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c914:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800c916:	68fa      	ldr	r2, [r7, #12]
 800c918:	4b20      	ldr	r3, [pc, #128]	; (800c99c <FSMC_NORSRAM_Init+0xa0>)
 800c91a:	4013      	ands	r3, r2
 800c91c:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800c91e:	683b      	ldr	r3, [r7, #0]
 800c920:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800c922:	683b      	ldr	r3, [r7, #0]
 800c924:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800c926:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800c928:	683b      	ldr	r3, [r7, #0]
 800c92a:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800c92c:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800c92e:	683b      	ldr	r3, [r7, #0]
 800c930:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800c932:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800c934:	683b      	ldr	r3, [r7, #0]
 800c936:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800c938:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800c93a:	683b      	ldr	r3, [r7, #0]
 800c93c:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800c93e:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800c940:	683b      	ldr	r3, [r7, #0]
 800c942:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 800c944:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800c946:	683b      	ldr	r3, [r7, #0]
 800c948:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800c94a:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800c94c:	683b      	ldr	r3, [r7, #0]
 800c94e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800c950:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800c952:	683b      	ldr	r3, [r7, #0]
 800c954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800c956:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800c958:	683b      	ldr	r3, [r7, #0]
 800c95a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800c95c:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800c95e:	683b      	ldr	r3, [r7, #0]
 800c960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800c962:	431a      	orrs	r2, r3
                     Init->WriteBurst
 800c964:	683b      	ldr	r3, [r7, #0]
 800c966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 800c968:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800c96a:	68fa      	ldr	r2, [r7, #12]
 800c96c:	4313      	orrs	r3, r2
 800c96e:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800c970:	683b      	ldr	r3, [r7, #0]
 800c972:	689b      	ldr	r3, [r3, #8]
 800c974:	2b08      	cmp	r3, #8
 800c976:	d103      	bne.n	800c980 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c97e:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800c980:	683b      	ldr	r3, [r7, #0]
 800c982:	681a      	ldr	r2, [r3, #0]
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	68f9      	ldr	r1, [r7, #12]
 800c988:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800c98c:	2300      	movs	r3, #0
}
 800c98e:	4618      	mov	r0, r3
 800c990:	3714      	adds	r7, #20
 800c992:	46bd      	mov	sp, r7
 800c994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c998:	4770      	bx	lr
 800c99a:	bf00      	nop
 800c99c:	fff00080 	.word	0xfff00080

0800c9a0 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800c9a0:	b480      	push	{r7}
 800c9a2:	b087      	sub	sp, #28
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	60f8      	str	r0, [r7, #12]
 800c9a8:	60b9      	str	r1, [r7, #8]
 800c9aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	1c5a      	adds	r2, r3, #1
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9ba:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800c9bc:	697b      	ldr	r3, [r7, #20]
 800c9be:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800c9c2:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800c9c4:	68bb      	ldr	r3, [r7, #8]
 800c9c6:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800c9c8:	68bb      	ldr	r3, [r7, #8]
 800c9ca:	685b      	ldr	r3, [r3, #4]
 800c9cc:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800c9ce:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800c9d0:	68bb      	ldr	r3, [r7, #8]
 800c9d2:	689b      	ldr	r3, [r3, #8]
 800c9d4:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800c9d6:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800c9d8:	68bb      	ldr	r3, [r7, #8]
 800c9da:	68db      	ldr	r3, [r3, #12]
 800c9dc:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800c9de:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800c9e0:	68bb      	ldr	r3, [r7, #8]
 800c9e2:	691b      	ldr	r3, [r3, #16]
 800c9e4:	3b01      	subs	r3, #1
 800c9e6:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800c9e8:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800c9ea:	68bb      	ldr	r3, [r7, #8]
 800c9ec:	695b      	ldr	r3, [r3, #20]
 800c9ee:	3b02      	subs	r3, #2
 800c9f0:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800c9f2:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800c9f4:	68bb      	ldr	r3, [r7, #8]
 800c9f6:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800c9f8:	4313      	orrs	r3, r2
 800c9fa:	697a      	ldr	r2, [r7, #20]
 800c9fc:	4313      	orrs	r3, r2
 800c9fe:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	1c5a      	adds	r2, r3, #1
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	6979      	ldr	r1, [r7, #20]
 800ca08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800ca0c:	2300      	movs	r3, #0
}
 800ca0e:	4618      	mov	r0, r3
 800ca10:	371c      	adds	r7, #28
 800ca12:	46bd      	mov	sp, r7
 800ca14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca18:	4770      	bx	lr
	...

0800ca1c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800ca1c:	b480      	push	{r7}
 800ca1e:	b087      	sub	sp, #28
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	60f8      	str	r0, [r7, #12]
 800ca24:	60b9      	str	r1, [r7, #8]
 800ca26:	607a      	str	r2, [r7, #4]
 800ca28:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800ca2e:	683b      	ldr	r3, [r7, #0]
 800ca30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ca34:	d122      	bne.n	800ca7c <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	687a      	ldr	r2, [r7, #4]
 800ca3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca3e:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800ca40:	697a      	ldr	r2, [r7, #20]
 800ca42:	4b15      	ldr	r3, [pc, #84]	; (800ca98 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800ca44:	4013      	ands	r3, r2
 800ca46:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800ca48:	68bb      	ldr	r3, [r7, #8]
 800ca4a:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800ca4c:	68bb      	ldr	r3, [r7, #8]
 800ca4e:	685b      	ldr	r3, [r3, #4]
 800ca50:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800ca52:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800ca54:	68bb      	ldr	r3, [r7, #8]
 800ca56:	689b      	ldr	r3, [r3, #8]
 800ca58:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800ca5a:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800ca5c:	68bb      	ldr	r3, [r7, #8]
 800ca5e:	68db      	ldr	r3, [r3, #12]
 800ca60:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800ca62:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800ca64:	68bb      	ldr	r3, [r7, #8]
 800ca66:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800ca68:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800ca6a:	697a      	ldr	r2, [r7, #20]
 800ca6c:	4313      	orrs	r3, r2
 800ca6e:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	687a      	ldr	r2, [r7, #4]
 800ca74:	6979      	ldr	r1, [r7, #20]
 800ca76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800ca7a:	e005      	b.n	800ca88 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	687a      	ldr	r2, [r7, #4]
 800ca80:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800ca84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800ca88:	2300      	movs	r3, #0
}
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	371c      	adds	r7, #28
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca94:	4770      	bx	lr
 800ca96:	bf00      	nop
 800ca98:	cff00000 	.word	0xcff00000

0800ca9c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ca9c:	b084      	sub	sp, #16
 800ca9e:	b580      	push	{r7, lr}
 800caa0:	b084      	sub	sp, #16
 800caa2:	af00      	add	r7, sp, #0
 800caa4:	6078      	str	r0, [r7, #4]
 800caa6:	f107 001c 	add.w	r0, r7, #28
 800caaa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800caae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cab0:	2b01      	cmp	r3, #1
 800cab2:	d122      	bne.n	800cafa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cab8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	68db      	ldr	r3, [r3, #12]
 800cac4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800cac8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cacc:	687a      	ldr	r2, [r7, #4]
 800cace:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	68db      	ldr	r3, [r3, #12]
 800cad4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800cadc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cade:	2b01      	cmp	r3, #1
 800cae0:	d105      	bne.n	800caee <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	68db      	ldr	r3, [r3, #12]
 800cae6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800caee:	6878      	ldr	r0, [r7, #4]
 800caf0:	f001 fa7c 	bl	800dfec <USB_CoreReset>
 800caf4:	4603      	mov	r3, r0
 800caf6:	73fb      	strb	r3, [r7, #15]
 800caf8:	e01a      	b.n	800cb30 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	68db      	ldr	r3, [r3, #12]
 800cafe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800cb06:	6878      	ldr	r0, [r7, #4]
 800cb08:	f001 fa70 	bl	800dfec <USB_CoreReset>
 800cb0c:	4603      	mov	r3, r0
 800cb0e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800cb10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d106      	bne.n	800cb24 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb1a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	639a      	str	r2, [r3, #56]	; 0x38
 800cb22:	e005      	b.n	800cb30 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb28:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800cb30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb32:	2b01      	cmp	r3, #1
 800cb34:	d10b      	bne.n	800cb4e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	689b      	ldr	r3, [r3, #8]
 800cb3a:	f043 0206 	orr.w	r2, r3, #6
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	689b      	ldr	r3, [r3, #8]
 800cb46:	f043 0220 	orr.w	r2, r3, #32
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800cb4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb50:	4618      	mov	r0, r3
 800cb52:	3710      	adds	r7, #16
 800cb54:	46bd      	mov	sp, r7
 800cb56:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cb5a:	b004      	add	sp, #16
 800cb5c:	4770      	bx	lr
	...

0800cb60 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800cb60:	b480      	push	{r7}
 800cb62:	b087      	sub	sp, #28
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	60f8      	str	r0, [r7, #12]
 800cb68:	60b9      	str	r1, [r7, #8]
 800cb6a:	4613      	mov	r3, r2
 800cb6c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800cb6e:	79fb      	ldrb	r3, [r7, #7]
 800cb70:	2b02      	cmp	r3, #2
 800cb72:	d165      	bne.n	800cc40 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800cb74:	68bb      	ldr	r3, [r7, #8]
 800cb76:	4a41      	ldr	r2, [pc, #260]	; (800cc7c <USB_SetTurnaroundTime+0x11c>)
 800cb78:	4293      	cmp	r3, r2
 800cb7a:	d906      	bls.n	800cb8a <USB_SetTurnaroundTime+0x2a>
 800cb7c:	68bb      	ldr	r3, [r7, #8]
 800cb7e:	4a40      	ldr	r2, [pc, #256]	; (800cc80 <USB_SetTurnaroundTime+0x120>)
 800cb80:	4293      	cmp	r3, r2
 800cb82:	d802      	bhi.n	800cb8a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800cb84:	230f      	movs	r3, #15
 800cb86:	617b      	str	r3, [r7, #20]
 800cb88:	e062      	b.n	800cc50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800cb8a:	68bb      	ldr	r3, [r7, #8]
 800cb8c:	4a3c      	ldr	r2, [pc, #240]	; (800cc80 <USB_SetTurnaroundTime+0x120>)
 800cb8e:	4293      	cmp	r3, r2
 800cb90:	d906      	bls.n	800cba0 <USB_SetTurnaroundTime+0x40>
 800cb92:	68bb      	ldr	r3, [r7, #8]
 800cb94:	4a3b      	ldr	r2, [pc, #236]	; (800cc84 <USB_SetTurnaroundTime+0x124>)
 800cb96:	4293      	cmp	r3, r2
 800cb98:	d802      	bhi.n	800cba0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800cb9a:	230e      	movs	r3, #14
 800cb9c:	617b      	str	r3, [r7, #20]
 800cb9e:	e057      	b.n	800cc50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800cba0:	68bb      	ldr	r3, [r7, #8]
 800cba2:	4a38      	ldr	r2, [pc, #224]	; (800cc84 <USB_SetTurnaroundTime+0x124>)
 800cba4:	4293      	cmp	r3, r2
 800cba6:	d906      	bls.n	800cbb6 <USB_SetTurnaroundTime+0x56>
 800cba8:	68bb      	ldr	r3, [r7, #8]
 800cbaa:	4a37      	ldr	r2, [pc, #220]	; (800cc88 <USB_SetTurnaroundTime+0x128>)
 800cbac:	4293      	cmp	r3, r2
 800cbae:	d802      	bhi.n	800cbb6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800cbb0:	230d      	movs	r3, #13
 800cbb2:	617b      	str	r3, [r7, #20]
 800cbb4:	e04c      	b.n	800cc50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800cbb6:	68bb      	ldr	r3, [r7, #8]
 800cbb8:	4a33      	ldr	r2, [pc, #204]	; (800cc88 <USB_SetTurnaroundTime+0x128>)
 800cbba:	4293      	cmp	r3, r2
 800cbbc:	d906      	bls.n	800cbcc <USB_SetTurnaroundTime+0x6c>
 800cbbe:	68bb      	ldr	r3, [r7, #8]
 800cbc0:	4a32      	ldr	r2, [pc, #200]	; (800cc8c <USB_SetTurnaroundTime+0x12c>)
 800cbc2:	4293      	cmp	r3, r2
 800cbc4:	d802      	bhi.n	800cbcc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800cbc6:	230c      	movs	r3, #12
 800cbc8:	617b      	str	r3, [r7, #20]
 800cbca:	e041      	b.n	800cc50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800cbcc:	68bb      	ldr	r3, [r7, #8]
 800cbce:	4a2f      	ldr	r2, [pc, #188]	; (800cc8c <USB_SetTurnaroundTime+0x12c>)
 800cbd0:	4293      	cmp	r3, r2
 800cbd2:	d906      	bls.n	800cbe2 <USB_SetTurnaroundTime+0x82>
 800cbd4:	68bb      	ldr	r3, [r7, #8]
 800cbd6:	4a2e      	ldr	r2, [pc, #184]	; (800cc90 <USB_SetTurnaroundTime+0x130>)
 800cbd8:	4293      	cmp	r3, r2
 800cbda:	d802      	bhi.n	800cbe2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800cbdc:	230b      	movs	r3, #11
 800cbde:	617b      	str	r3, [r7, #20]
 800cbe0:	e036      	b.n	800cc50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800cbe2:	68bb      	ldr	r3, [r7, #8]
 800cbe4:	4a2a      	ldr	r2, [pc, #168]	; (800cc90 <USB_SetTurnaroundTime+0x130>)
 800cbe6:	4293      	cmp	r3, r2
 800cbe8:	d906      	bls.n	800cbf8 <USB_SetTurnaroundTime+0x98>
 800cbea:	68bb      	ldr	r3, [r7, #8]
 800cbec:	4a29      	ldr	r2, [pc, #164]	; (800cc94 <USB_SetTurnaroundTime+0x134>)
 800cbee:	4293      	cmp	r3, r2
 800cbf0:	d802      	bhi.n	800cbf8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800cbf2:	230a      	movs	r3, #10
 800cbf4:	617b      	str	r3, [r7, #20]
 800cbf6:	e02b      	b.n	800cc50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800cbf8:	68bb      	ldr	r3, [r7, #8]
 800cbfa:	4a26      	ldr	r2, [pc, #152]	; (800cc94 <USB_SetTurnaroundTime+0x134>)
 800cbfc:	4293      	cmp	r3, r2
 800cbfe:	d906      	bls.n	800cc0e <USB_SetTurnaroundTime+0xae>
 800cc00:	68bb      	ldr	r3, [r7, #8]
 800cc02:	4a25      	ldr	r2, [pc, #148]	; (800cc98 <USB_SetTurnaroundTime+0x138>)
 800cc04:	4293      	cmp	r3, r2
 800cc06:	d802      	bhi.n	800cc0e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800cc08:	2309      	movs	r3, #9
 800cc0a:	617b      	str	r3, [r7, #20]
 800cc0c:	e020      	b.n	800cc50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800cc0e:	68bb      	ldr	r3, [r7, #8]
 800cc10:	4a21      	ldr	r2, [pc, #132]	; (800cc98 <USB_SetTurnaroundTime+0x138>)
 800cc12:	4293      	cmp	r3, r2
 800cc14:	d906      	bls.n	800cc24 <USB_SetTurnaroundTime+0xc4>
 800cc16:	68bb      	ldr	r3, [r7, #8]
 800cc18:	4a20      	ldr	r2, [pc, #128]	; (800cc9c <USB_SetTurnaroundTime+0x13c>)
 800cc1a:	4293      	cmp	r3, r2
 800cc1c:	d802      	bhi.n	800cc24 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800cc1e:	2308      	movs	r3, #8
 800cc20:	617b      	str	r3, [r7, #20]
 800cc22:	e015      	b.n	800cc50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800cc24:	68bb      	ldr	r3, [r7, #8]
 800cc26:	4a1d      	ldr	r2, [pc, #116]	; (800cc9c <USB_SetTurnaroundTime+0x13c>)
 800cc28:	4293      	cmp	r3, r2
 800cc2a:	d906      	bls.n	800cc3a <USB_SetTurnaroundTime+0xda>
 800cc2c:	68bb      	ldr	r3, [r7, #8]
 800cc2e:	4a1c      	ldr	r2, [pc, #112]	; (800cca0 <USB_SetTurnaroundTime+0x140>)
 800cc30:	4293      	cmp	r3, r2
 800cc32:	d802      	bhi.n	800cc3a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800cc34:	2307      	movs	r3, #7
 800cc36:	617b      	str	r3, [r7, #20]
 800cc38:	e00a      	b.n	800cc50 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800cc3a:	2306      	movs	r3, #6
 800cc3c:	617b      	str	r3, [r7, #20]
 800cc3e:	e007      	b.n	800cc50 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800cc40:	79fb      	ldrb	r3, [r7, #7]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d102      	bne.n	800cc4c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800cc46:	2309      	movs	r3, #9
 800cc48:	617b      	str	r3, [r7, #20]
 800cc4a:	e001      	b.n	800cc50 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800cc4c:	2309      	movs	r3, #9
 800cc4e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	68db      	ldr	r3, [r3, #12]
 800cc54:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	68da      	ldr	r2, [r3, #12]
 800cc60:	697b      	ldr	r3, [r7, #20]
 800cc62:	029b      	lsls	r3, r3, #10
 800cc64:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800cc68:	431a      	orrs	r2, r3
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800cc6e:	2300      	movs	r3, #0
}
 800cc70:	4618      	mov	r0, r3
 800cc72:	371c      	adds	r7, #28
 800cc74:	46bd      	mov	sp, r7
 800cc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7a:	4770      	bx	lr
 800cc7c:	00d8acbf 	.word	0x00d8acbf
 800cc80:	00e4e1bf 	.word	0x00e4e1bf
 800cc84:	00f423ff 	.word	0x00f423ff
 800cc88:	0106737f 	.word	0x0106737f
 800cc8c:	011a499f 	.word	0x011a499f
 800cc90:	01312cff 	.word	0x01312cff
 800cc94:	014ca43f 	.word	0x014ca43f
 800cc98:	016e35ff 	.word	0x016e35ff
 800cc9c:	01a6ab1f 	.word	0x01a6ab1f
 800cca0:	01e847ff 	.word	0x01e847ff

0800cca4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cca4:	b480      	push	{r7}
 800cca6:	b083      	sub	sp, #12
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	689b      	ldr	r3, [r3, #8]
 800ccb0:	f043 0201 	orr.w	r2, r3, #1
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ccb8:	2300      	movs	r3, #0
}
 800ccba:	4618      	mov	r0, r3
 800ccbc:	370c      	adds	r7, #12
 800ccbe:	46bd      	mov	sp, r7
 800ccc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc4:	4770      	bx	lr

0800ccc6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ccc6:	b480      	push	{r7}
 800ccc8:	b083      	sub	sp, #12
 800ccca:	af00      	add	r7, sp, #0
 800cccc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	689b      	ldr	r3, [r3, #8]
 800ccd2:	f023 0201 	bic.w	r2, r3, #1
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ccda:	2300      	movs	r3, #0
}
 800ccdc:	4618      	mov	r0, r3
 800ccde:	370c      	adds	r7, #12
 800cce0:	46bd      	mov	sp, r7
 800cce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce6:	4770      	bx	lr

0800cce8 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b082      	sub	sp, #8
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
 800ccf0:	460b      	mov	r3, r1
 800ccf2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	68db      	ldr	r3, [r3, #12]
 800ccf8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800cd00:	78fb      	ldrb	r3, [r7, #3]
 800cd02:	2b01      	cmp	r3, #1
 800cd04:	d106      	bne.n	800cd14 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	68db      	ldr	r3, [r3, #12]
 800cd0a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	60da      	str	r2, [r3, #12]
 800cd12:	e00b      	b.n	800cd2c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800cd14:	78fb      	ldrb	r3, [r7, #3]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d106      	bne.n	800cd28 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	68db      	ldr	r3, [r3, #12]
 800cd1e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	60da      	str	r2, [r3, #12]
 800cd26:	e001      	b.n	800cd2c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800cd28:	2301      	movs	r3, #1
 800cd2a:	e003      	b.n	800cd34 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800cd2c:	2032      	movs	r0, #50	; 0x32
 800cd2e:	f7fb ff5f 	bl	8008bf0 <HAL_Delay>

  return HAL_OK;
 800cd32:	2300      	movs	r3, #0
}
 800cd34:	4618      	mov	r0, r3
 800cd36:	3708      	adds	r7, #8
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	bd80      	pop	{r7, pc}

0800cd3c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cd3c:	b084      	sub	sp, #16
 800cd3e:	b580      	push	{r7, lr}
 800cd40:	b086      	sub	sp, #24
 800cd42:	af00      	add	r7, sp, #0
 800cd44:	6078      	str	r0, [r7, #4]
 800cd46:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800cd4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800cd4e:	2300      	movs	r3, #0
 800cd50:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800cd56:	2300      	movs	r3, #0
 800cd58:	613b      	str	r3, [r7, #16]
 800cd5a:	e009      	b.n	800cd70 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800cd5c:	687a      	ldr	r2, [r7, #4]
 800cd5e:	693b      	ldr	r3, [r7, #16]
 800cd60:	3340      	adds	r3, #64	; 0x40
 800cd62:	009b      	lsls	r3, r3, #2
 800cd64:	4413      	add	r3, r2
 800cd66:	2200      	movs	r2, #0
 800cd68:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800cd6a:	693b      	ldr	r3, [r7, #16]
 800cd6c:	3301      	adds	r3, #1
 800cd6e:	613b      	str	r3, [r7, #16]
 800cd70:	693b      	ldr	r3, [r7, #16]
 800cd72:	2b0e      	cmp	r3, #14
 800cd74:	d9f2      	bls.n	800cd5c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800cd76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d112      	bne.n	800cda2 <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd80:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd8c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd98:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	639a      	str	r2, [r3, #56]	; 0x38
 800cda0:	e00b      	b.n	800cdba <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdb2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cdc0:	461a      	mov	r2, r3
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cdcc:	4619      	mov	r1, r3
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cdd4:	461a      	mov	r2, r3
 800cdd6:	680b      	ldr	r3, [r1, #0]
 800cdd8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800cdda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cddc:	2b01      	cmp	r3, #1
 800cdde:	d10c      	bne.n	800cdfa <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800cde0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d104      	bne.n	800cdf0 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800cde6:	2100      	movs	r1, #0
 800cde8:	6878      	ldr	r0, [r7, #4]
 800cdea:	f000 f961 	bl	800d0b0 <USB_SetDevSpeed>
 800cdee:	e008      	b.n	800ce02 <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800cdf0:	2101      	movs	r1, #1
 800cdf2:	6878      	ldr	r0, [r7, #4]
 800cdf4:	f000 f95c 	bl	800d0b0 <USB_SetDevSpeed>
 800cdf8:	e003      	b.n	800ce02 <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800cdfa:	2103      	movs	r1, #3
 800cdfc:	6878      	ldr	r0, [r7, #4]
 800cdfe:	f000 f957 	bl	800d0b0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ce02:	2110      	movs	r1, #16
 800ce04:	6878      	ldr	r0, [r7, #4]
 800ce06:	f000 f90b 	bl	800d020 <USB_FlushTxFifo>
 800ce0a:	4603      	mov	r3, r0
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d001      	beq.n	800ce14 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 800ce10:	2301      	movs	r3, #1
 800ce12:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ce14:	6878      	ldr	r0, [r7, #4]
 800ce16:	f000 f929 	bl	800d06c <USB_FlushRxFifo>
 800ce1a:	4603      	mov	r3, r0
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d001      	beq.n	800ce24 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 800ce20:	2301      	movs	r3, #1
 800ce22:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce2a:	461a      	mov	r2, r3
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce36:	461a      	mov	r2, r3
 800ce38:	2300      	movs	r3, #0
 800ce3a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce42:	461a      	mov	r2, r3
 800ce44:	2300      	movs	r3, #0
 800ce46:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ce48:	2300      	movs	r3, #0
 800ce4a:	613b      	str	r3, [r7, #16]
 800ce4c:	e043      	b.n	800ced6 <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ce4e:	693b      	ldr	r3, [r7, #16]
 800ce50:	015a      	lsls	r2, r3, #5
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	4413      	add	r3, r2
 800ce56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ce60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ce64:	d118      	bne.n	800ce98 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 800ce66:	693b      	ldr	r3, [r7, #16]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d10a      	bne.n	800ce82 <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ce6c:	693b      	ldr	r3, [r7, #16]
 800ce6e:	015a      	lsls	r2, r3, #5
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	4413      	add	r3, r2
 800ce74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce78:	461a      	mov	r2, r3
 800ce7a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ce7e:	6013      	str	r3, [r2, #0]
 800ce80:	e013      	b.n	800ceaa <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ce82:	693b      	ldr	r3, [r7, #16]
 800ce84:	015a      	lsls	r2, r3, #5
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	4413      	add	r3, r2
 800ce8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce8e:	461a      	mov	r2, r3
 800ce90:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ce94:	6013      	str	r3, [r2, #0]
 800ce96:	e008      	b.n	800ceaa <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ce98:	693b      	ldr	r3, [r7, #16]
 800ce9a:	015a      	lsls	r2, r3, #5
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	4413      	add	r3, r2
 800cea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cea4:	461a      	mov	r2, r3
 800cea6:	2300      	movs	r3, #0
 800cea8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ceaa:	693b      	ldr	r3, [r7, #16]
 800ceac:	015a      	lsls	r2, r3, #5
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	4413      	add	r3, r2
 800ceb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ceb6:	461a      	mov	r2, r3
 800ceb8:	2300      	movs	r3, #0
 800ceba:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800cebc:	693b      	ldr	r3, [r7, #16]
 800cebe:	015a      	lsls	r2, r3, #5
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	4413      	add	r3, r2
 800cec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cec8:	461a      	mov	r2, r3
 800ceca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cece:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ced0:	693b      	ldr	r3, [r7, #16]
 800ced2:	3301      	adds	r3, #1
 800ced4:	613b      	str	r3, [r7, #16]
 800ced6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ced8:	693a      	ldr	r2, [r7, #16]
 800ceda:	429a      	cmp	r2, r3
 800cedc:	d3b7      	bcc.n	800ce4e <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cede:	2300      	movs	r3, #0
 800cee0:	613b      	str	r3, [r7, #16]
 800cee2:	e043      	b.n	800cf6c <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cee4:	693b      	ldr	r3, [r7, #16]
 800cee6:	015a      	lsls	r2, r3, #5
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	4413      	add	r3, r2
 800ceec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cef6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cefa:	d118      	bne.n	800cf2e <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 800cefc:	693b      	ldr	r3, [r7, #16]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d10a      	bne.n	800cf18 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800cf02:	693b      	ldr	r3, [r7, #16]
 800cf04:	015a      	lsls	r2, r3, #5
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	4413      	add	r3, r2
 800cf0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf0e:	461a      	mov	r2, r3
 800cf10:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cf14:	6013      	str	r3, [r2, #0]
 800cf16:	e013      	b.n	800cf40 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800cf18:	693b      	ldr	r3, [r7, #16]
 800cf1a:	015a      	lsls	r2, r3, #5
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	4413      	add	r3, r2
 800cf20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf24:	461a      	mov	r2, r3
 800cf26:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800cf2a:	6013      	str	r3, [r2, #0]
 800cf2c:	e008      	b.n	800cf40 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800cf2e:	693b      	ldr	r3, [r7, #16]
 800cf30:	015a      	lsls	r2, r3, #5
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	4413      	add	r3, r2
 800cf36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf3a:	461a      	mov	r2, r3
 800cf3c:	2300      	movs	r3, #0
 800cf3e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800cf40:	693b      	ldr	r3, [r7, #16]
 800cf42:	015a      	lsls	r2, r3, #5
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	4413      	add	r3, r2
 800cf48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf4c:	461a      	mov	r2, r3
 800cf4e:	2300      	movs	r3, #0
 800cf50:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800cf52:	693b      	ldr	r3, [r7, #16]
 800cf54:	015a      	lsls	r2, r3, #5
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	4413      	add	r3, r2
 800cf5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf5e:	461a      	mov	r2, r3
 800cf60:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cf64:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cf66:	693b      	ldr	r3, [r7, #16]
 800cf68:	3301      	adds	r3, #1
 800cf6a:	613b      	str	r3, [r7, #16]
 800cf6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf6e:	693a      	ldr	r2, [r7, #16]
 800cf70:	429a      	cmp	r2, r3
 800cf72:	d3b7      	bcc.n	800cee4 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf7a:	691b      	ldr	r3, [r3, #16]
 800cf7c:	68fa      	ldr	r2, [r7, #12]
 800cf7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cf82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cf86:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 800cf88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf8a:	2b01      	cmp	r3, #1
 800cf8c:	d111      	bne.n	800cfb2 <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf94:	461a      	mov	r2, r3
 800cf96:	4b20      	ldr	r3, [pc, #128]	; (800d018 <USB_DevInit+0x2dc>)
 800cf98:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cfa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfa2:	68fa      	ldr	r2, [r7, #12]
 800cfa4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cfa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cfac:	f043 0303 	orr.w	r3, r3, #3
 800cfb0:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	2200      	movs	r2, #0
 800cfb6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800cfbe:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800cfc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d105      	bne.n	800cfd2 <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	699b      	ldr	r3, [r3, #24]
 800cfca:	f043 0210 	orr.w	r2, r3, #16
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	699a      	ldr	r2, [r3, #24]
 800cfd6:	4b11      	ldr	r3, [pc, #68]	; (800d01c <USB_DevInit+0x2e0>)
 800cfd8:	4313      	orrs	r3, r2
 800cfda:	687a      	ldr	r2, [r7, #4]
 800cfdc:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800cfde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d005      	beq.n	800cff0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	699b      	ldr	r3, [r3, #24]
 800cfe8:	f043 0208 	orr.w	r2, r3, #8
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800cff0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cff2:	2b01      	cmp	r3, #1
 800cff4:	d107      	bne.n	800d006 <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	699b      	ldr	r3, [r3, #24]
 800cffa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cffe:	f043 0304 	orr.w	r3, r3, #4
 800d002:	687a      	ldr	r2, [r7, #4]
 800d004:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d006:	7dfb      	ldrb	r3, [r7, #23]
}
 800d008:	4618      	mov	r0, r3
 800d00a:	3718      	adds	r7, #24
 800d00c:	46bd      	mov	sp, r7
 800d00e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d012:	b004      	add	sp, #16
 800d014:	4770      	bx	lr
 800d016:	bf00      	nop
 800d018:	00800100 	.word	0x00800100
 800d01c:	803c3800 	.word	0x803c3800

0800d020 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d020:	b480      	push	{r7}
 800d022:	b085      	sub	sp, #20
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
 800d028:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800d02a:	2300      	movs	r3, #0
 800d02c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d02e:	683b      	ldr	r3, [r7, #0]
 800d030:	019b      	lsls	r3, r3, #6
 800d032:	f043 0220 	orr.w	r2, r3, #32
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	3301      	adds	r3, #1
 800d03e:	60fb      	str	r3, [r7, #12]
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	4a09      	ldr	r2, [pc, #36]	; (800d068 <USB_FlushTxFifo+0x48>)
 800d044:	4293      	cmp	r3, r2
 800d046:	d901      	bls.n	800d04c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800d048:	2303      	movs	r3, #3
 800d04a:	e006      	b.n	800d05a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	691b      	ldr	r3, [r3, #16]
 800d050:	f003 0320 	and.w	r3, r3, #32
 800d054:	2b20      	cmp	r3, #32
 800d056:	d0f0      	beq.n	800d03a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800d058:	2300      	movs	r3, #0
}
 800d05a:	4618      	mov	r0, r3
 800d05c:	3714      	adds	r7, #20
 800d05e:	46bd      	mov	sp, r7
 800d060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d064:	4770      	bx	lr
 800d066:	bf00      	nop
 800d068:	00030d40 	.word	0x00030d40

0800d06c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d06c:	b480      	push	{r7}
 800d06e:	b085      	sub	sp, #20
 800d070:	af00      	add	r7, sp, #0
 800d072:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800d074:	2300      	movs	r3, #0
 800d076:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	2210      	movs	r2, #16
 800d07c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	3301      	adds	r3, #1
 800d082:	60fb      	str	r3, [r7, #12]
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	4a09      	ldr	r2, [pc, #36]	; (800d0ac <USB_FlushRxFifo+0x40>)
 800d088:	4293      	cmp	r3, r2
 800d08a:	d901      	bls.n	800d090 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800d08c:	2303      	movs	r3, #3
 800d08e:	e006      	b.n	800d09e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	691b      	ldr	r3, [r3, #16]
 800d094:	f003 0310 	and.w	r3, r3, #16
 800d098:	2b10      	cmp	r3, #16
 800d09a:	d0f0      	beq.n	800d07e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800d09c:	2300      	movs	r3, #0
}
 800d09e:	4618      	mov	r0, r3
 800d0a0:	3714      	adds	r7, #20
 800d0a2:	46bd      	mov	sp, r7
 800d0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a8:	4770      	bx	lr
 800d0aa:	bf00      	nop
 800d0ac:	00030d40 	.word	0x00030d40

0800d0b0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d0b0:	b480      	push	{r7}
 800d0b2:	b085      	sub	sp, #20
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	6078      	str	r0, [r7, #4]
 800d0b8:	460b      	mov	r3, r1
 800d0ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0c6:	681a      	ldr	r2, [r3, #0]
 800d0c8:	78fb      	ldrb	r3, [r7, #3]
 800d0ca:	68f9      	ldr	r1, [r7, #12]
 800d0cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d0d0:	4313      	orrs	r3, r2
 800d0d2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d0d4:	2300      	movs	r3, #0
}
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	3714      	adds	r7, #20
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e0:	4770      	bx	lr

0800d0e2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800d0e2:	b480      	push	{r7}
 800d0e4:	b087      	sub	sp, #28
 800d0e6:	af00      	add	r7, sp, #0
 800d0e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800d0ee:	693b      	ldr	r3, [r7, #16]
 800d0f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0f4:	689b      	ldr	r3, [r3, #8]
 800d0f6:	f003 0306 	and.w	r3, r3, #6
 800d0fa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d102      	bne.n	800d108 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800d102:	2300      	movs	r3, #0
 800d104:	75fb      	strb	r3, [r7, #23]
 800d106:	e00a      	b.n	800d11e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	2b02      	cmp	r3, #2
 800d10c:	d002      	beq.n	800d114 <USB_GetDevSpeed+0x32>
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	2b06      	cmp	r3, #6
 800d112:	d102      	bne.n	800d11a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800d114:	2302      	movs	r3, #2
 800d116:	75fb      	strb	r3, [r7, #23]
 800d118:	e001      	b.n	800d11e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800d11a:	230f      	movs	r3, #15
 800d11c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800d11e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d120:	4618      	mov	r0, r3
 800d122:	371c      	adds	r7, #28
 800d124:	46bd      	mov	sp, r7
 800d126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12a:	4770      	bx	lr

0800d12c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d12c:	b480      	push	{r7}
 800d12e:	b085      	sub	sp, #20
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]
 800d134:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d13a:	683b      	ldr	r3, [r7, #0]
 800d13c:	781b      	ldrb	r3, [r3, #0]
 800d13e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d140:	683b      	ldr	r3, [r7, #0]
 800d142:	785b      	ldrb	r3, [r3, #1]
 800d144:	2b01      	cmp	r3, #1
 800d146:	d13a      	bne.n	800d1be <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d14e:	69da      	ldr	r2, [r3, #28]
 800d150:	683b      	ldr	r3, [r7, #0]
 800d152:	781b      	ldrb	r3, [r3, #0]
 800d154:	f003 030f 	and.w	r3, r3, #15
 800d158:	2101      	movs	r1, #1
 800d15a:	fa01 f303 	lsl.w	r3, r1, r3
 800d15e:	b29b      	uxth	r3, r3
 800d160:	68f9      	ldr	r1, [r7, #12]
 800d162:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d166:	4313      	orrs	r3, r2
 800d168:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800d16a:	68bb      	ldr	r3, [r7, #8]
 800d16c:	015a      	lsls	r2, r3, #5
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	4413      	add	r3, r2
 800d172:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d155      	bne.n	800d22c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d180:	68bb      	ldr	r3, [r7, #8]
 800d182:	015a      	lsls	r2, r3, #5
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	4413      	add	r3, r2
 800d188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d18c:	681a      	ldr	r2, [r3, #0]
 800d18e:	683b      	ldr	r3, [r7, #0]
 800d190:	689b      	ldr	r3, [r3, #8]
 800d192:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d196:	683b      	ldr	r3, [r7, #0]
 800d198:	78db      	ldrb	r3, [r3, #3]
 800d19a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d19c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d19e:	68bb      	ldr	r3, [r7, #8]
 800d1a0:	059b      	lsls	r3, r3, #22
 800d1a2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d1a4:	4313      	orrs	r3, r2
 800d1a6:	68ba      	ldr	r2, [r7, #8]
 800d1a8:	0151      	lsls	r1, r2, #5
 800d1aa:	68fa      	ldr	r2, [r7, #12]
 800d1ac:	440a      	add	r2, r1
 800d1ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d1b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d1b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d1ba:	6013      	str	r3, [r2, #0]
 800d1bc:	e036      	b.n	800d22c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1c4:	69da      	ldr	r2, [r3, #28]
 800d1c6:	683b      	ldr	r3, [r7, #0]
 800d1c8:	781b      	ldrb	r3, [r3, #0]
 800d1ca:	f003 030f 	and.w	r3, r3, #15
 800d1ce:	2101      	movs	r1, #1
 800d1d0:	fa01 f303 	lsl.w	r3, r1, r3
 800d1d4:	041b      	lsls	r3, r3, #16
 800d1d6:	68f9      	ldr	r1, [r7, #12]
 800d1d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d1dc:	4313      	orrs	r3, r2
 800d1de:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800d1e0:	68bb      	ldr	r3, [r7, #8]
 800d1e2:	015a      	lsls	r2, r3, #5
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	4413      	add	r3, r2
 800d1e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d11a      	bne.n	800d22c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d1f6:	68bb      	ldr	r3, [r7, #8]
 800d1f8:	015a      	lsls	r2, r3, #5
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	4413      	add	r3, r2
 800d1fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d202:	681a      	ldr	r2, [r3, #0]
 800d204:	683b      	ldr	r3, [r7, #0]
 800d206:	689b      	ldr	r3, [r3, #8]
 800d208:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800d20c:	683b      	ldr	r3, [r7, #0]
 800d20e:	78db      	ldrb	r3, [r3, #3]
 800d210:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d212:	430b      	orrs	r3, r1
 800d214:	4313      	orrs	r3, r2
 800d216:	68ba      	ldr	r2, [r7, #8]
 800d218:	0151      	lsls	r1, r2, #5
 800d21a:	68fa      	ldr	r2, [r7, #12]
 800d21c:	440a      	add	r2, r1
 800d21e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d222:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d226:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d22a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800d22c:	2300      	movs	r3, #0
}
 800d22e:	4618      	mov	r0, r3
 800d230:	3714      	adds	r7, #20
 800d232:	46bd      	mov	sp, r7
 800d234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d238:	4770      	bx	lr
	...

0800d23c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d23c:	b480      	push	{r7}
 800d23e:	b085      	sub	sp, #20
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
 800d244:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d24a:	683b      	ldr	r3, [r7, #0]
 800d24c:	781b      	ldrb	r3, [r3, #0]
 800d24e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800d250:	683b      	ldr	r3, [r7, #0]
 800d252:	785b      	ldrb	r3, [r3, #1]
 800d254:	2b01      	cmp	r3, #1
 800d256:	d135      	bne.n	800d2c4 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d25e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d260:	683b      	ldr	r3, [r7, #0]
 800d262:	781b      	ldrb	r3, [r3, #0]
 800d264:	f003 030f 	and.w	r3, r3, #15
 800d268:	2101      	movs	r1, #1
 800d26a:	fa01 f303 	lsl.w	r3, r1, r3
 800d26e:	b29b      	uxth	r3, r3
 800d270:	43db      	mvns	r3, r3
 800d272:	68f9      	ldr	r1, [r7, #12]
 800d274:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d278:	4013      	ands	r3, r2
 800d27a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d282:	69da      	ldr	r2, [r3, #28]
 800d284:	683b      	ldr	r3, [r7, #0]
 800d286:	781b      	ldrb	r3, [r3, #0]
 800d288:	f003 030f 	and.w	r3, r3, #15
 800d28c:	2101      	movs	r1, #1
 800d28e:	fa01 f303 	lsl.w	r3, r1, r3
 800d292:	b29b      	uxth	r3, r3
 800d294:	43db      	mvns	r3, r3
 800d296:	68f9      	ldr	r1, [r7, #12]
 800d298:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d29c:	4013      	ands	r3, r2
 800d29e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800d2a0:	68bb      	ldr	r3, [r7, #8]
 800d2a2:	015a      	lsls	r2, r3, #5
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	4413      	add	r3, r2
 800d2a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2ac:	681a      	ldr	r2, [r3, #0]
 800d2ae:	68bb      	ldr	r3, [r7, #8]
 800d2b0:	0159      	lsls	r1, r3, #5
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	440b      	add	r3, r1
 800d2b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2ba:	4619      	mov	r1, r3
 800d2bc:	4b1f      	ldr	r3, [pc, #124]	; (800d33c <USB_DeactivateEndpoint+0x100>)
 800d2be:	4013      	ands	r3, r2
 800d2c0:	600b      	str	r3, [r1, #0]
 800d2c2:	e034      	b.n	800d32e <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d2ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d2cc:	683b      	ldr	r3, [r7, #0]
 800d2ce:	781b      	ldrb	r3, [r3, #0]
 800d2d0:	f003 030f 	and.w	r3, r3, #15
 800d2d4:	2101      	movs	r1, #1
 800d2d6:	fa01 f303 	lsl.w	r3, r1, r3
 800d2da:	041b      	lsls	r3, r3, #16
 800d2dc:	43db      	mvns	r3, r3
 800d2de:	68f9      	ldr	r1, [r7, #12]
 800d2e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d2e4:	4013      	ands	r3, r2
 800d2e6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d2ee:	69da      	ldr	r2, [r3, #28]
 800d2f0:	683b      	ldr	r3, [r7, #0]
 800d2f2:	781b      	ldrb	r3, [r3, #0]
 800d2f4:	f003 030f 	and.w	r3, r3, #15
 800d2f8:	2101      	movs	r1, #1
 800d2fa:	fa01 f303 	lsl.w	r3, r1, r3
 800d2fe:	041b      	lsls	r3, r3, #16
 800d300:	43db      	mvns	r3, r3
 800d302:	68f9      	ldr	r1, [r7, #12]
 800d304:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d308:	4013      	ands	r3, r2
 800d30a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800d30c:	68bb      	ldr	r3, [r7, #8]
 800d30e:	015a      	lsls	r2, r3, #5
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	4413      	add	r3, r2
 800d314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d318:	681a      	ldr	r2, [r3, #0]
 800d31a:	68bb      	ldr	r3, [r7, #8]
 800d31c:	0159      	lsls	r1, r3, #5
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	440b      	add	r3, r1
 800d322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d326:	4619      	mov	r1, r3
 800d328:	4b05      	ldr	r3, [pc, #20]	; (800d340 <USB_DeactivateEndpoint+0x104>)
 800d32a:	4013      	ands	r3, r2
 800d32c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800d32e:	2300      	movs	r3, #0
}
 800d330:	4618      	mov	r0, r3
 800d332:	3714      	adds	r7, #20
 800d334:	46bd      	mov	sp, r7
 800d336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33a:	4770      	bx	lr
 800d33c:	ec337800 	.word	0xec337800
 800d340:	eff37800 	.word	0xeff37800

0800d344 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800d344:	b580      	push	{r7, lr}
 800d346:	b08a      	sub	sp, #40	; 0x28
 800d348:	af02      	add	r7, sp, #8
 800d34a:	60f8      	str	r0, [r7, #12]
 800d34c:	60b9      	str	r1, [r7, #8]
 800d34e:	4613      	mov	r3, r2
 800d350:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800d356:	68bb      	ldr	r3, [r7, #8]
 800d358:	781b      	ldrb	r3, [r3, #0]
 800d35a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d35c:	68bb      	ldr	r3, [r7, #8]
 800d35e:	785b      	ldrb	r3, [r3, #1]
 800d360:	2b01      	cmp	r3, #1
 800d362:	f040 815c 	bne.w	800d61e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d366:	68bb      	ldr	r3, [r7, #8]
 800d368:	695b      	ldr	r3, [r3, #20]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d132      	bne.n	800d3d4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d36e:	69bb      	ldr	r3, [r7, #24]
 800d370:	015a      	lsls	r2, r3, #5
 800d372:	69fb      	ldr	r3, [r7, #28]
 800d374:	4413      	add	r3, r2
 800d376:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d37a:	691b      	ldr	r3, [r3, #16]
 800d37c:	69ba      	ldr	r2, [r7, #24]
 800d37e:	0151      	lsls	r1, r2, #5
 800d380:	69fa      	ldr	r2, [r7, #28]
 800d382:	440a      	add	r2, r1
 800d384:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d388:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d38c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d390:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d392:	69bb      	ldr	r3, [r7, #24]
 800d394:	015a      	lsls	r2, r3, #5
 800d396:	69fb      	ldr	r3, [r7, #28]
 800d398:	4413      	add	r3, r2
 800d39a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d39e:	691b      	ldr	r3, [r3, #16]
 800d3a0:	69ba      	ldr	r2, [r7, #24]
 800d3a2:	0151      	lsls	r1, r2, #5
 800d3a4:	69fa      	ldr	r2, [r7, #28]
 800d3a6:	440a      	add	r2, r1
 800d3a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d3ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d3b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d3b2:	69bb      	ldr	r3, [r7, #24]
 800d3b4:	015a      	lsls	r2, r3, #5
 800d3b6:	69fb      	ldr	r3, [r7, #28]
 800d3b8:	4413      	add	r3, r2
 800d3ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3be:	691b      	ldr	r3, [r3, #16]
 800d3c0:	69ba      	ldr	r2, [r7, #24]
 800d3c2:	0151      	lsls	r1, r2, #5
 800d3c4:	69fa      	ldr	r2, [r7, #28]
 800d3c6:	440a      	add	r2, r1
 800d3c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d3cc:	0cdb      	lsrs	r3, r3, #19
 800d3ce:	04db      	lsls	r3, r3, #19
 800d3d0:	6113      	str	r3, [r2, #16]
 800d3d2:	e074      	b.n	800d4be <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d3d4:	69bb      	ldr	r3, [r7, #24]
 800d3d6:	015a      	lsls	r2, r3, #5
 800d3d8:	69fb      	ldr	r3, [r7, #28]
 800d3da:	4413      	add	r3, r2
 800d3dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3e0:	691b      	ldr	r3, [r3, #16]
 800d3e2:	69ba      	ldr	r2, [r7, #24]
 800d3e4:	0151      	lsls	r1, r2, #5
 800d3e6:	69fa      	ldr	r2, [r7, #28]
 800d3e8:	440a      	add	r2, r1
 800d3ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d3ee:	0cdb      	lsrs	r3, r3, #19
 800d3f0:	04db      	lsls	r3, r3, #19
 800d3f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d3f4:	69bb      	ldr	r3, [r7, #24]
 800d3f6:	015a      	lsls	r2, r3, #5
 800d3f8:	69fb      	ldr	r3, [r7, #28]
 800d3fa:	4413      	add	r3, r2
 800d3fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d400:	691b      	ldr	r3, [r3, #16]
 800d402:	69ba      	ldr	r2, [r7, #24]
 800d404:	0151      	lsls	r1, r2, #5
 800d406:	69fa      	ldr	r2, [r7, #28]
 800d408:	440a      	add	r2, r1
 800d40a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d40e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d412:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d416:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800d418:	69bb      	ldr	r3, [r7, #24]
 800d41a:	015a      	lsls	r2, r3, #5
 800d41c:	69fb      	ldr	r3, [r7, #28]
 800d41e:	4413      	add	r3, r2
 800d420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d424:	691a      	ldr	r2, [r3, #16]
 800d426:	68bb      	ldr	r3, [r7, #8]
 800d428:	6959      	ldr	r1, [r3, #20]
 800d42a:	68bb      	ldr	r3, [r7, #8]
 800d42c:	689b      	ldr	r3, [r3, #8]
 800d42e:	440b      	add	r3, r1
 800d430:	1e59      	subs	r1, r3, #1
 800d432:	68bb      	ldr	r3, [r7, #8]
 800d434:	689b      	ldr	r3, [r3, #8]
 800d436:	fbb1 f3f3 	udiv	r3, r1, r3
 800d43a:	04d9      	lsls	r1, r3, #19
 800d43c:	4b9d      	ldr	r3, [pc, #628]	; (800d6b4 <USB_EPStartXfer+0x370>)
 800d43e:	400b      	ands	r3, r1
 800d440:	69b9      	ldr	r1, [r7, #24]
 800d442:	0148      	lsls	r0, r1, #5
 800d444:	69f9      	ldr	r1, [r7, #28]
 800d446:	4401      	add	r1, r0
 800d448:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d44c:	4313      	orrs	r3, r2
 800d44e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d450:	69bb      	ldr	r3, [r7, #24]
 800d452:	015a      	lsls	r2, r3, #5
 800d454:	69fb      	ldr	r3, [r7, #28]
 800d456:	4413      	add	r3, r2
 800d458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d45c:	691a      	ldr	r2, [r3, #16]
 800d45e:	68bb      	ldr	r3, [r7, #8]
 800d460:	695b      	ldr	r3, [r3, #20]
 800d462:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d466:	69b9      	ldr	r1, [r7, #24]
 800d468:	0148      	lsls	r0, r1, #5
 800d46a:	69f9      	ldr	r1, [r7, #28]
 800d46c:	4401      	add	r1, r0
 800d46e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d472:	4313      	orrs	r3, r2
 800d474:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800d476:	68bb      	ldr	r3, [r7, #8]
 800d478:	78db      	ldrb	r3, [r3, #3]
 800d47a:	2b01      	cmp	r3, #1
 800d47c:	d11f      	bne.n	800d4be <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800d47e:	69bb      	ldr	r3, [r7, #24]
 800d480:	015a      	lsls	r2, r3, #5
 800d482:	69fb      	ldr	r3, [r7, #28]
 800d484:	4413      	add	r3, r2
 800d486:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d48a:	691b      	ldr	r3, [r3, #16]
 800d48c:	69ba      	ldr	r2, [r7, #24]
 800d48e:	0151      	lsls	r1, r2, #5
 800d490:	69fa      	ldr	r2, [r7, #28]
 800d492:	440a      	add	r2, r1
 800d494:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d498:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800d49c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800d49e:	69bb      	ldr	r3, [r7, #24]
 800d4a0:	015a      	lsls	r2, r3, #5
 800d4a2:	69fb      	ldr	r3, [r7, #28]
 800d4a4:	4413      	add	r3, r2
 800d4a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4aa:	691b      	ldr	r3, [r3, #16]
 800d4ac:	69ba      	ldr	r2, [r7, #24]
 800d4ae:	0151      	lsls	r1, r2, #5
 800d4b0:	69fa      	ldr	r2, [r7, #28]
 800d4b2:	440a      	add	r2, r1
 800d4b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d4b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d4bc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800d4be:	79fb      	ldrb	r3, [r7, #7]
 800d4c0:	2b01      	cmp	r3, #1
 800d4c2:	d14b      	bne.n	800d55c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d4c4:	68bb      	ldr	r3, [r7, #8]
 800d4c6:	691b      	ldr	r3, [r3, #16]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d009      	beq.n	800d4e0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d4cc:	69bb      	ldr	r3, [r7, #24]
 800d4ce:	015a      	lsls	r2, r3, #5
 800d4d0:	69fb      	ldr	r3, [r7, #28]
 800d4d2:	4413      	add	r3, r2
 800d4d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4d8:	461a      	mov	r2, r3
 800d4da:	68bb      	ldr	r3, [r7, #8]
 800d4dc:	691b      	ldr	r3, [r3, #16]
 800d4de:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800d4e0:	68bb      	ldr	r3, [r7, #8]
 800d4e2:	78db      	ldrb	r3, [r3, #3]
 800d4e4:	2b01      	cmp	r3, #1
 800d4e6:	d128      	bne.n	800d53a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d4e8:	69fb      	ldr	r3, [r7, #28]
 800d4ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d4ee:	689b      	ldr	r3, [r3, #8]
 800d4f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d110      	bne.n	800d51a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d4f8:	69bb      	ldr	r3, [r7, #24]
 800d4fa:	015a      	lsls	r2, r3, #5
 800d4fc:	69fb      	ldr	r3, [r7, #28]
 800d4fe:	4413      	add	r3, r2
 800d500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	69ba      	ldr	r2, [r7, #24]
 800d508:	0151      	lsls	r1, r2, #5
 800d50a:	69fa      	ldr	r2, [r7, #28]
 800d50c:	440a      	add	r2, r1
 800d50e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d512:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d516:	6013      	str	r3, [r2, #0]
 800d518:	e00f      	b.n	800d53a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d51a:	69bb      	ldr	r3, [r7, #24]
 800d51c:	015a      	lsls	r2, r3, #5
 800d51e:	69fb      	ldr	r3, [r7, #28]
 800d520:	4413      	add	r3, r2
 800d522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	69ba      	ldr	r2, [r7, #24]
 800d52a:	0151      	lsls	r1, r2, #5
 800d52c:	69fa      	ldr	r2, [r7, #28]
 800d52e:	440a      	add	r2, r1
 800d530:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d538:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d53a:	69bb      	ldr	r3, [r7, #24]
 800d53c:	015a      	lsls	r2, r3, #5
 800d53e:	69fb      	ldr	r3, [r7, #28]
 800d540:	4413      	add	r3, r2
 800d542:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	69ba      	ldr	r2, [r7, #24]
 800d54a:	0151      	lsls	r1, r2, #5
 800d54c:	69fa      	ldr	r2, [r7, #28]
 800d54e:	440a      	add	r2, r1
 800d550:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d554:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d558:	6013      	str	r3, [r2, #0]
 800d55a:	e12f      	b.n	800d7bc <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d55c:	69bb      	ldr	r3, [r7, #24]
 800d55e:	015a      	lsls	r2, r3, #5
 800d560:	69fb      	ldr	r3, [r7, #28]
 800d562:	4413      	add	r3, r2
 800d564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	69ba      	ldr	r2, [r7, #24]
 800d56c:	0151      	lsls	r1, r2, #5
 800d56e:	69fa      	ldr	r2, [r7, #28]
 800d570:	440a      	add	r2, r1
 800d572:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d576:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d57a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d57c:	68bb      	ldr	r3, [r7, #8]
 800d57e:	78db      	ldrb	r3, [r3, #3]
 800d580:	2b01      	cmp	r3, #1
 800d582:	d015      	beq.n	800d5b0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800d584:	68bb      	ldr	r3, [r7, #8]
 800d586:	695b      	ldr	r3, [r3, #20]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	f000 8117 	beq.w	800d7bc <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d58e:	69fb      	ldr	r3, [r7, #28]
 800d590:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d594:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d596:	68bb      	ldr	r3, [r7, #8]
 800d598:	781b      	ldrb	r3, [r3, #0]
 800d59a:	f003 030f 	and.w	r3, r3, #15
 800d59e:	2101      	movs	r1, #1
 800d5a0:	fa01 f303 	lsl.w	r3, r1, r3
 800d5a4:	69f9      	ldr	r1, [r7, #28]
 800d5a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d5aa:	4313      	orrs	r3, r2
 800d5ac:	634b      	str	r3, [r1, #52]	; 0x34
 800d5ae:	e105      	b.n	800d7bc <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d5b0:	69fb      	ldr	r3, [r7, #28]
 800d5b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d5b6:	689b      	ldr	r3, [r3, #8]
 800d5b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d110      	bne.n	800d5e2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d5c0:	69bb      	ldr	r3, [r7, #24]
 800d5c2:	015a      	lsls	r2, r3, #5
 800d5c4:	69fb      	ldr	r3, [r7, #28]
 800d5c6:	4413      	add	r3, r2
 800d5c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	69ba      	ldr	r2, [r7, #24]
 800d5d0:	0151      	lsls	r1, r2, #5
 800d5d2:	69fa      	ldr	r2, [r7, #28]
 800d5d4:	440a      	add	r2, r1
 800d5d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d5da:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d5de:	6013      	str	r3, [r2, #0]
 800d5e0:	e00f      	b.n	800d602 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d5e2:	69bb      	ldr	r3, [r7, #24]
 800d5e4:	015a      	lsls	r2, r3, #5
 800d5e6:	69fb      	ldr	r3, [r7, #28]
 800d5e8:	4413      	add	r3, r2
 800d5ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	69ba      	ldr	r2, [r7, #24]
 800d5f2:	0151      	lsls	r1, r2, #5
 800d5f4:	69fa      	ldr	r2, [r7, #28]
 800d5f6:	440a      	add	r2, r1
 800d5f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d5fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d600:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800d602:	68bb      	ldr	r3, [r7, #8]
 800d604:	68d9      	ldr	r1, [r3, #12]
 800d606:	68bb      	ldr	r3, [r7, #8]
 800d608:	781a      	ldrb	r2, [r3, #0]
 800d60a:	68bb      	ldr	r3, [r7, #8]
 800d60c:	695b      	ldr	r3, [r3, #20]
 800d60e:	b298      	uxth	r0, r3
 800d610:	79fb      	ldrb	r3, [r7, #7]
 800d612:	9300      	str	r3, [sp, #0]
 800d614:	4603      	mov	r3, r0
 800d616:	68f8      	ldr	r0, [r7, #12]
 800d618:	f000 fa2b 	bl	800da72 <USB_WritePacket>
 800d61c:	e0ce      	b.n	800d7bc <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d61e:	69bb      	ldr	r3, [r7, #24]
 800d620:	015a      	lsls	r2, r3, #5
 800d622:	69fb      	ldr	r3, [r7, #28]
 800d624:	4413      	add	r3, r2
 800d626:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d62a:	691b      	ldr	r3, [r3, #16]
 800d62c:	69ba      	ldr	r2, [r7, #24]
 800d62e:	0151      	lsls	r1, r2, #5
 800d630:	69fa      	ldr	r2, [r7, #28]
 800d632:	440a      	add	r2, r1
 800d634:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d638:	0cdb      	lsrs	r3, r3, #19
 800d63a:	04db      	lsls	r3, r3, #19
 800d63c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d63e:	69bb      	ldr	r3, [r7, #24]
 800d640:	015a      	lsls	r2, r3, #5
 800d642:	69fb      	ldr	r3, [r7, #28]
 800d644:	4413      	add	r3, r2
 800d646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d64a:	691b      	ldr	r3, [r3, #16]
 800d64c:	69ba      	ldr	r2, [r7, #24]
 800d64e:	0151      	lsls	r1, r2, #5
 800d650:	69fa      	ldr	r2, [r7, #28]
 800d652:	440a      	add	r2, r1
 800d654:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d658:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d65c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d660:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800d662:	68bb      	ldr	r3, [r7, #8]
 800d664:	695b      	ldr	r3, [r3, #20]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d126      	bne.n	800d6b8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800d66a:	69bb      	ldr	r3, [r7, #24]
 800d66c:	015a      	lsls	r2, r3, #5
 800d66e:	69fb      	ldr	r3, [r7, #28]
 800d670:	4413      	add	r3, r2
 800d672:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d676:	691a      	ldr	r2, [r3, #16]
 800d678:	68bb      	ldr	r3, [r7, #8]
 800d67a:	689b      	ldr	r3, [r3, #8]
 800d67c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d680:	69b9      	ldr	r1, [r7, #24]
 800d682:	0148      	lsls	r0, r1, #5
 800d684:	69f9      	ldr	r1, [r7, #28]
 800d686:	4401      	add	r1, r0
 800d688:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d68c:	4313      	orrs	r3, r2
 800d68e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d690:	69bb      	ldr	r3, [r7, #24]
 800d692:	015a      	lsls	r2, r3, #5
 800d694:	69fb      	ldr	r3, [r7, #28]
 800d696:	4413      	add	r3, r2
 800d698:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d69c:	691b      	ldr	r3, [r3, #16]
 800d69e:	69ba      	ldr	r2, [r7, #24]
 800d6a0:	0151      	lsls	r1, r2, #5
 800d6a2:	69fa      	ldr	r2, [r7, #28]
 800d6a4:	440a      	add	r2, r1
 800d6a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d6aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d6ae:	6113      	str	r3, [r2, #16]
 800d6b0:	e036      	b.n	800d720 <USB_EPStartXfer+0x3dc>
 800d6b2:	bf00      	nop
 800d6b4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d6b8:	68bb      	ldr	r3, [r7, #8]
 800d6ba:	695a      	ldr	r2, [r3, #20]
 800d6bc:	68bb      	ldr	r3, [r7, #8]
 800d6be:	689b      	ldr	r3, [r3, #8]
 800d6c0:	4413      	add	r3, r2
 800d6c2:	1e5a      	subs	r2, r3, #1
 800d6c4:	68bb      	ldr	r3, [r7, #8]
 800d6c6:	689b      	ldr	r3, [r3, #8]
 800d6c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800d6cc:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d6ce:	69bb      	ldr	r3, [r7, #24]
 800d6d0:	015a      	lsls	r2, r3, #5
 800d6d2:	69fb      	ldr	r3, [r7, #28]
 800d6d4:	4413      	add	r3, r2
 800d6d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d6da:	691a      	ldr	r2, [r3, #16]
 800d6dc:	8afb      	ldrh	r3, [r7, #22]
 800d6de:	04d9      	lsls	r1, r3, #19
 800d6e0:	4b39      	ldr	r3, [pc, #228]	; (800d7c8 <USB_EPStartXfer+0x484>)
 800d6e2:	400b      	ands	r3, r1
 800d6e4:	69b9      	ldr	r1, [r7, #24]
 800d6e6:	0148      	lsls	r0, r1, #5
 800d6e8:	69f9      	ldr	r1, [r7, #28]
 800d6ea:	4401      	add	r1, r0
 800d6ec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d6f0:	4313      	orrs	r3, r2
 800d6f2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800d6f4:	69bb      	ldr	r3, [r7, #24]
 800d6f6:	015a      	lsls	r2, r3, #5
 800d6f8:	69fb      	ldr	r3, [r7, #28]
 800d6fa:	4413      	add	r3, r2
 800d6fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d700:	691a      	ldr	r2, [r3, #16]
 800d702:	68bb      	ldr	r3, [r7, #8]
 800d704:	689b      	ldr	r3, [r3, #8]
 800d706:	8af9      	ldrh	r1, [r7, #22]
 800d708:	fb01 f303 	mul.w	r3, r1, r3
 800d70c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d710:	69b9      	ldr	r1, [r7, #24]
 800d712:	0148      	lsls	r0, r1, #5
 800d714:	69f9      	ldr	r1, [r7, #28]
 800d716:	4401      	add	r1, r0
 800d718:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d71c:	4313      	orrs	r3, r2
 800d71e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d720:	79fb      	ldrb	r3, [r7, #7]
 800d722:	2b01      	cmp	r3, #1
 800d724:	d10d      	bne.n	800d742 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d726:	68bb      	ldr	r3, [r7, #8]
 800d728:	68db      	ldr	r3, [r3, #12]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d009      	beq.n	800d742 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d72e:	68bb      	ldr	r3, [r7, #8]
 800d730:	68d9      	ldr	r1, [r3, #12]
 800d732:	69bb      	ldr	r3, [r7, #24]
 800d734:	015a      	lsls	r2, r3, #5
 800d736:	69fb      	ldr	r3, [r7, #28]
 800d738:	4413      	add	r3, r2
 800d73a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d73e:	460a      	mov	r2, r1
 800d740:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800d742:	68bb      	ldr	r3, [r7, #8]
 800d744:	78db      	ldrb	r3, [r3, #3]
 800d746:	2b01      	cmp	r3, #1
 800d748:	d128      	bne.n	800d79c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d74a:	69fb      	ldr	r3, [r7, #28]
 800d74c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d750:	689b      	ldr	r3, [r3, #8]
 800d752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d756:	2b00      	cmp	r3, #0
 800d758:	d110      	bne.n	800d77c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800d75a:	69bb      	ldr	r3, [r7, #24]
 800d75c:	015a      	lsls	r2, r3, #5
 800d75e:	69fb      	ldr	r3, [r7, #28]
 800d760:	4413      	add	r3, r2
 800d762:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	69ba      	ldr	r2, [r7, #24]
 800d76a:	0151      	lsls	r1, r2, #5
 800d76c:	69fa      	ldr	r2, [r7, #28]
 800d76e:	440a      	add	r2, r1
 800d770:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d774:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d778:	6013      	str	r3, [r2, #0]
 800d77a:	e00f      	b.n	800d79c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800d77c:	69bb      	ldr	r3, [r7, #24]
 800d77e:	015a      	lsls	r2, r3, #5
 800d780:	69fb      	ldr	r3, [r7, #28]
 800d782:	4413      	add	r3, r2
 800d784:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	69ba      	ldr	r2, [r7, #24]
 800d78c:	0151      	lsls	r1, r2, #5
 800d78e:	69fa      	ldr	r2, [r7, #28]
 800d790:	440a      	add	r2, r1
 800d792:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d796:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d79a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d79c:	69bb      	ldr	r3, [r7, #24]
 800d79e:	015a      	lsls	r2, r3, #5
 800d7a0:	69fb      	ldr	r3, [r7, #28]
 800d7a2:	4413      	add	r3, r2
 800d7a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	69ba      	ldr	r2, [r7, #24]
 800d7ac:	0151      	lsls	r1, r2, #5
 800d7ae:	69fa      	ldr	r2, [r7, #28]
 800d7b0:	440a      	add	r2, r1
 800d7b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d7b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d7ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d7bc:	2300      	movs	r3, #0
}
 800d7be:	4618      	mov	r0, r3
 800d7c0:	3720      	adds	r7, #32
 800d7c2:	46bd      	mov	sp, r7
 800d7c4:	bd80      	pop	{r7, pc}
 800d7c6:	bf00      	nop
 800d7c8:	1ff80000 	.word	0x1ff80000

0800d7cc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800d7cc:	b480      	push	{r7}
 800d7ce:	b087      	sub	sp, #28
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	60f8      	str	r0, [r7, #12]
 800d7d4:	60b9      	str	r1, [r7, #8]
 800d7d6:	4613      	mov	r3, r2
 800d7d8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800d7de:	68bb      	ldr	r3, [r7, #8]
 800d7e0:	781b      	ldrb	r3, [r3, #0]
 800d7e2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d7e4:	68bb      	ldr	r3, [r7, #8]
 800d7e6:	785b      	ldrb	r3, [r3, #1]
 800d7e8:	2b01      	cmp	r3, #1
 800d7ea:	f040 80cd 	bne.w	800d988 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d7ee:	68bb      	ldr	r3, [r7, #8]
 800d7f0:	695b      	ldr	r3, [r3, #20]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d132      	bne.n	800d85c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d7f6:	693b      	ldr	r3, [r7, #16]
 800d7f8:	015a      	lsls	r2, r3, #5
 800d7fa:	697b      	ldr	r3, [r7, #20]
 800d7fc:	4413      	add	r3, r2
 800d7fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d802:	691b      	ldr	r3, [r3, #16]
 800d804:	693a      	ldr	r2, [r7, #16]
 800d806:	0151      	lsls	r1, r2, #5
 800d808:	697a      	ldr	r2, [r7, #20]
 800d80a:	440a      	add	r2, r1
 800d80c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d810:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d814:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d818:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d81a:	693b      	ldr	r3, [r7, #16]
 800d81c:	015a      	lsls	r2, r3, #5
 800d81e:	697b      	ldr	r3, [r7, #20]
 800d820:	4413      	add	r3, r2
 800d822:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d826:	691b      	ldr	r3, [r3, #16]
 800d828:	693a      	ldr	r2, [r7, #16]
 800d82a:	0151      	lsls	r1, r2, #5
 800d82c:	697a      	ldr	r2, [r7, #20]
 800d82e:	440a      	add	r2, r1
 800d830:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d834:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d838:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d83a:	693b      	ldr	r3, [r7, #16]
 800d83c:	015a      	lsls	r2, r3, #5
 800d83e:	697b      	ldr	r3, [r7, #20]
 800d840:	4413      	add	r3, r2
 800d842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d846:	691b      	ldr	r3, [r3, #16]
 800d848:	693a      	ldr	r2, [r7, #16]
 800d84a:	0151      	lsls	r1, r2, #5
 800d84c:	697a      	ldr	r2, [r7, #20]
 800d84e:	440a      	add	r2, r1
 800d850:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d854:	0cdb      	lsrs	r3, r3, #19
 800d856:	04db      	lsls	r3, r3, #19
 800d858:	6113      	str	r3, [r2, #16]
 800d85a:	e04e      	b.n	800d8fa <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d85c:	693b      	ldr	r3, [r7, #16]
 800d85e:	015a      	lsls	r2, r3, #5
 800d860:	697b      	ldr	r3, [r7, #20]
 800d862:	4413      	add	r3, r2
 800d864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d868:	691b      	ldr	r3, [r3, #16]
 800d86a:	693a      	ldr	r2, [r7, #16]
 800d86c:	0151      	lsls	r1, r2, #5
 800d86e:	697a      	ldr	r2, [r7, #20]
 800d870:	440a      	add	r2, r1
 800d872:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d876:	0cdb      	lsrs	r3, r3, #19
 800d878:	04db      	lsls	r3, r3, #19
 800d87a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d87c:	693b      	ldr	r3, [r7, #16]
 800d87e:	015a      	lsls	r2, r3, #5
 800d880:	697b      	ldr	r3, [r7, #20]
 800d882:	4413      	add	r3, r2
 800d884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d888:	691b      	ldr	r3, [r3, #16]
 800d88a:	693a      	ldr	r2, [r7, #16]
 800d88c:	0151      	lsls	r1, r2, #5
 800d88e:	697a      	ldr	r2, [r7, #20]
 800d890:	440a      	add	r2, r1
 800d892:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d896:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d89a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d89e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800d8a0:	68bb      	ldr	r3, [r7, #8]
 800d8a2:	695a      	ldr	r2, [r3, #20]
 800d8a4:	68bb      	ldr	r3, [r7, #8]
 800d8a6:	689b      	ldr	r3, [r3, #8]
 800d8a8:	429a      	cmp	r2, r3
 800d8aa:	d903      	bls.n	800d8b4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800d8ac:	68bb      	ldr	r3, [r7, #8]
 800d8ae:	689a      	ldr	r2, [r3, #8]
 800d8b0:	68bb      	ldr	r3, [r7, #8]
 800d8b2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d8b4:	693b      	ldr	r3, [r7, #16]
 800d8b6:	015a      	lsls	r2, r3, #5
 800d8b8:	697b      	ldr	r3, [r7, #20]
 800d8ba:	4413      	add	r3, r2
 800d8bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d8c0:	691b      	ldr	r3, [r3, #16]
 800d8c2:	693a      	ldr	r2, [r7, #16]
 800d8c4:	0151      	lsls	r1, r2, #5
 800d8c6:	697a      	ldr	r2, [r7, #20]
 800d8c8:	440a      	add	r2, r1
 800d8ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d8ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d8d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d8d4:	693b      	ldr	r3, [r7, #16]
 800d8d6:	015a      	lsls	r2, r3, #5
 800d8d8:	697b      	ldr	r3, [r7, #20]
 800d8da:	4413      	add	r3, r2
 800d8dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d8e0:	691a      	ldr	r2, [r3, #16]
 800d8e2:	68bb      	ldr	r3, [r7, #8]
 800d8e4:	695b      	ldr	r3, [r3, #20]
 800d8e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d8ea:	6939      	ldr	r1, [r7, #16]
 800d8ec:	0148      	lsls	r0, r1, #5
 800d8ee:	6979      	ldr	r1, [r7, #20]
 800d8f0:	4401      	add	r1, r0
 800d8f2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d8f6:	4313      	orrs	r3, r2
 800d8f8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d8fa:	79fb      	ldrb	r3, [r7, #7]
 800d8fc:	2b01      	cmp	r3, #1
 800d8fe:	d11e      	bne.n	800d93e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d900:	68bb      	ldr	r3, [r7, #8]
 800d902:	691b      	ldr	r3, [r3, #16]
 800d904:	2b00      	cmp	r3, #0
 800d906:	d009      	beq.n	800d91c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d908:	693b      	ldr	r3, [r7, #16]
 800d90a:	015a      	lsls	r2, r3, #5
 800d90c:	697b      	ldr	r3, [r7, #20]
 800d90e:	4413      	add	r3, r2
 800d910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d914:	461a      	mov	r2, r3
 800d916:	68bb      	ldr	r3, [r7, #8]
 800d918:	691b      	ldr	r3, [r3, #16]
 800d91a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d91c:	693b      	ldr	r3, [r7, #16]
 800d91e:	015a      	lsls	r2, r3, #5
 800d920:	697b      	ldr	r3, [r7, #20]
 800d922:	4413      	add	r3, r2
 800d924:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	693a      	ldr	r2, [r7, #16]
 800d92c:	0151      	lsls	r1, r2, #5
 800d92e:	697a      	ldr	r2, [r7, #20]
 800d930:	440a      	add	r2, r1
 800d932:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d936:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d93a:	6013      	str	r3, [r2, #0]
 800d93c:	e092      	b.n	800da64 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d93e:	693b      	ldr	r3, [r7, #16]
 800d940:	015a      	lsls	r2, r3, #5
 800d942:	697b      	ldr	r3, [r7, #20]
 800d944:	4413      	add	r3, r2
 800d946:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	693a      	ldr	r2, [r7, #16]
 800d94e:	0151      	lsls	r1, r2, #5
 800d950:	697a      	ldr	r2, [r7, #20]
 800d952:	440a      	add	r2, r1
 800d954:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d958:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d95c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800d95e:	68bb      	ldr	r3, [r7, #8]
 800d960:	695b      	ldr	r3, [r3, #20]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d07e      	beq.n	800da64 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d966:	697b      	ldr	r3, [r7, #20]
 800d968:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d96c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d96e:	68bb      	ldr	r3, [r7, #8]
 800d970:	781b      	ldrb	r3, [r3, #0]
 800d972:	f003 030f 	and.w	r3, r3, #15
 800d976:	2101      	movs	r1, #1
 800d978:	fa01 f303 	lsl.w	r3, r1, r3
 800d97c:	6979      	ldr	r1, [r7, #20]
 800d97e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d982:	4313      	orrs	r3, r2
 800d984:	634b      	str	r3, [r1, #52]	; 0x34
 800d986:	e06d      	b.n	800da64 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d988:	693b      	ldr	r3, [r7, #16]
 800d98a:	015a      	lsls	r2, r3, #5
 800d98c:	697b      	ldr	r3, [r7, #20]
 800d98e:	4413      	add	r3, r2
 800d990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d994:	691b      	ldr	r3, [r3, #16]
 800d996:	693a      	ldr	r2, [r7, #16]
 800d998:	0151      	lsls	r1, r2, #5
 800d99a:	697a      	ldr	r2, [r7, #20]
 800d99c:	440a      	add	r2, r1
 800d99e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d9a2:	0cdb      	lsrs	r3, r3, #19
 800d9a4:	04db      	lsls	r3, r3, #19
 800d9a6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d9a8:	693b      	ldr	r3, [r7, #16]
 800d9aa:	015a      	lsls	r2, r3, #5
 800d9ac:	697b      	ldr	r3, [r7, #20]
 800d9ae:	4413      	add	r3, r2
 800d9b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9b4:	691b      	ldr	r3, [r3, #16]
 800d9b6:	693a      	ldr	r2, [r7, #16]
 800d9b8:	0151      	lsls	r1, r2, #5
 800d9ba:	697a      	ldr	r2, [r7, #20]
 800d9bc:	440a      	add	r2, r1
 800d9be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d9c2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d9c6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d9ca:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800d9cc:	68bb      	ldr	r3, [r7, #8]
 800d9ce:	695b      	ldr	r3, [r3, #20]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d003      	beq.n	800d9dc <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800d9d4:	68bb      	ldr	r3, [r7, #8]
 800d9d6:	689a      	ldr	r2, [r3, #8]
 800d9d8:	68bb      	ldr	r3, [r7, #8]
 800d9da:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d9dc:	693b      	ldr	r3, [r7, #16]
 800d9de:	015a      	lsls	r2, r3, #5
 800d9e0:	697b      	ldr	r3, [r7, #20]
 800d9e2:	4413      	add	r3, r2
 800d9e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9e8:	691b      	ldr	r3, [r3, #16]
 800d9ea:	693a      	ldr	r2, [r7, #16]
 800d9ec:	0151      	lsls	r1, r2, #5
 800d9ee:	697a      	ldr	r2, [r7, #20]
 800d9f0:	440a      	add	r2, r1
 800d9f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d9f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d9fa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800d9fc:	693b      	ldr	r3, [r7, #16]
 800d9fe:	015a      	lsls	r2, r3, #5
 800da00:	697b      	ldr	r3, [r7, #20]
 800da02:	4413      	add	r3, r2
 800da04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da08:	691a      	ldr	r2, [r3, #16]
 800da0a:	68bb      	ldr	r3, [r7, #8]
 800da0c:	689b      	ldr	r3, [r3, #8]
 800da0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800da12:	6939      	ldr	r1, [r7, #16]
 800da14:	0148      	lsls	r0, r1, #5
 800da16:	6979      	ldr	r1, [r7, #20]
 800da18:	4401      	add	r1, r0
 800da1a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800da1e:	4313      	orrs	r3, r2
 800da20:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800da22:	79fb      	ldrb	r3, [r7, #7]
 800da24:	2b01      	cmp	r3, #1
 800da26:	d10d      	bne.n	800da44 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800da28:	68bb      	ldr	r3, [r7, #8]
 800da2a:	68db      	ldr	r3, [r3, #12]
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d009      	beq.n	800da44 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800da30:	68bb      	ldr	r3, [r7, #8]
 800da32:	68d9      	ldr	r1, [r3, #12]
 800da34:	693b      	ldr	r3, [r7, #16]
 800da36:	015a      	lsls	r2, r3, #5
 800da38:	697b      	ldr	r3, [r7, #20]
 800da3a:	4413      	add	r3, r2
 800da3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da40:	460a      	mov	r2, r1
 800da42:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800da44:	693b      	ldr	r3, [r7, #16]
 800da46:	015a      	lsls	r2, r3, #5
 800da48:	697b      	ldr	r3, [r7, #20]
 800da4a:	4413      	add	r3, r2
 800da4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	693a      	ldr	r2, [r7, #16]
 800da54:	0151      	lsls	r1, r2, #5
 800da56:	697a      	ldr	r2, [r7, #20]
 800da58:	440a      	add	r2, r1
 800da5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800da5e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800da62:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800da64:	2300      	movs	r3, #0
}
 800da66:	4618      	mov	r0, r3
 800da68:	371c      	adds	r7, #28
 800da6a:	46bd      	mov	sp, r7
 800da6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da70:	4770      	bx	lr

0800da72 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800da72:	b480      	push	{r7}
 800da74:	b089      	sub	sp, #36	; 0x24
 800da76:	af00      	add	r7, sp, #0
 800da78:	60f8      	str	r0, [r7, #12]
 800da7a:	60b9      	str	r1, [r7, #8]
 800da7c:	4611      	mov	r1, r2
 800da7e:	461a      	mov	r2, r3
 800da80:	460b      	mov	r3, r1
 800da82:	71fb      	strb	r3, [r7, #7]
 800da84:	4613      	mov	r3, r2
 800da86:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800da8c:	68bb      	ldr	r3, [r7, #8]
 800da8e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800da90:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800da94:	2b00      	cmp	r3, #0
 800da96:	d11a      	bne.n	800dace <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800da98:	88bb      	ldrh	r3, [r7, #4]
 800da9a:	3303      	adds	r3, #3
 800da9c:	089b      	lsrs	r3, r3, #2
 800da9e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800daa0:	2300      	movs	r3, #0
 800daa2:	61bb      	str	r3, [r7, #24]
 800daa4:	e00f      	b.n	800dac6 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800daa6:	79fb      	ldrb	r3, [r7, #7]
 800daa8:	031a      	lsls	r2, r3, #12
 800daaa:	697b      	ldr	r3, [r7, #20]
 800daac:	4413      	add	r3, r2
 800daae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dab2:	461a      	mov	r2, r3
 800dab4:	69fb      	ldr	r3, [r7, #28]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	6013      	str	r3, [r2, #0]
      pSrc++;
 800daba:	69fb      	ldr	r3, [r7, #28]
 800dabc:	3304      	adds	r3, #4
 800dabe:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800dac0:	69bb      	ldr	r3, [r7, #24]
 800dac2:	3301      	adds	r3, #1
 800dac4:	61bb      	str	r3, [r7, #24]
 800dac6:	69ba      	ldr	r2, [r7, #24]
 800dac8:	693b      	ldr	r3, [r7, #16]
 800daca:	429a      	cmp	r2, r3
 800dacc:	d3eb      	bcc.n	800daa6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800dace:	2300      	movs	r3, #0
}
 800dad0:	4618      	mov	r0, r3
 800dad2:	3724      	adds	r7, #36	; 0x24
 800dad4:	46bd      	mov	sp, r7
 800dad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dada:	4770      	bx	lr

0800dadc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800dadc:	b480      	push	{r7}
 800dade:	b089      	sub	sp, #36	; 0x24
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	60f8      	str	r0, [r7, #12]
 800dae4:	60b9      	str	r1, [r7, #8]
 800dae6:	4613      	mov	r3, r2
 800dae8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800daee:	68bb      	ldr	r3, [r7, #8]
 800daf0:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800daf2:	88fb      	ldrh	r3, [r7, #6]
 800daf4:	3303      	adds	r3, #3
 800daf6:	089b      	lsrs	r3, r3, #2
 800daf8:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800dafa:	2300      	movs	r3, #0
 800dafc:	61bb      	str	r3, [r7, #24]
 800dafe:	e00b      	b.n	800db18 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800db00:	697b      	ldr	r3, [r7, #20]
 800db02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800db06:	681a      	ldr	r2, [r3, #0]
 800db08:	69fb      	ldr	r3, [r7, #28]
 800db0a:	601a      	str	r2, [r3, #0]
    pDest++;
 800db0c:	69fb      	ldr	r3, [r7, #28]
 800db0e:	3304      	adds	r3, #4
 800db10:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800db12:	69bb      	ldr	r3, [r7, #24]
 800db14:	3301      	adds	r3, #1
 800db16:	61bb      	str	r3, [r7, #24]
 800db18:	69ba      	ldr	r2, [r7, #24]
 800db1a:	693b      	ldr	r3, [r7, #16]
 800db1c:	429a      	cmp	r2, r3
 800db1e:	d3ef      	bcc.n	800db00 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800db20:	69fb      	ldr	r3, [r7, #28]
}
 800db22:	4618      	mov	r0, r3
 800db24:	3724      	adds	r7, #36	; 0x24
 800db26:	46bd      	mov	sp, r7
 800db28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db2c:	4770      	bx	lr

0800db2e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800db2e:	b480      	push	{r7}
 800db30:	b085      	sub	sp, #20
 800db32:	af00      	add	r7, sp, #0
 800db34:	6078      	str	r0, [r7, #4]
 800db36:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800db3c:	683b      	ldr	r3, [r7, #0]
 800db3e:	781b      	ldrb	r3, [r3, #0]
 800db40:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800db42:	683b      	ldr	r3, [r7, #0]
 800db44:	785b      	ldrb	r3, [r3, #1]
 800db46:	2b01      	cmp	r3, #1
 800db48:	d12c      	bne.n	800dba4 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800db4a:	68bb      	ldr	r3, [r7, #8]
 800db4c:	015a      	lsls	r2, r3, #5
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	4413      	add	r3, r2
 800db52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	db12      	blt.n	800db82 <USB_EPSetStall+0x54>
 800db5c:	68bb      	ldr	r3, [r7, #8]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d00f      	beq.n	800db82 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800db62:	68bb      	ldr	r3, [r7, #8]
 800db64:	015a      	lsls	r2, r3, #5
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	4413      	add	r3, r2
 800db6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	68ba      	ldr	r2, [r7, #8]
 800db72:	0151      	lsls	r1, r2, #5
 800db74:	68fa      	ldr	r2, [r7, #12]
 800db76:	440a      	add	r2, r1
 800db78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800db7c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800db80:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800db82:	68bb      	ldr	r3, [r7, #8]
 800db84:	015a      	lsls	r2, r3, #5
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	4413      	add	r3, r2
 800db8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	68ba      	ldr	r2, [r7, #8]
 800db92:	0151      	lsls	r1, r2, #5
 800db94:	68fa      	ldr	r2, [r7, #12]
 800db96:	440a      	add	r2, r1
 800db98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800db9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800dba0:	6013      	str	r3, [r2, #0]
 800dba2:	e02b      	b.n	800dbfc <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800dba4:	68bb      	ldr	r3, [r7, #8]
 800dba6:	015a      	lsls	r2, r3, #5
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	4413      	add	r3, r2
 800dbac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	db12      	blt.n	800dbdc <USB_EPSetStall+0xae>
 800dbb6:	68bb      	ldr	r3, [r7, #8]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d00f      	beq.n	800dbdc <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800dbbc:	68bb      	ldr	r3, [r7, #8]
 800dbbe:	015a      	lsls	r2, r3, #5
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	4413      	add	r3, r2
 800dbc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	68ba      	ldr	r2, [r7, #8]
 800dbcc:	0151      	lsls	r1, r2, #5
 800dbce:	68fa      	ldr	r2, [r7, #12]
 800dbd0:	440a      	add	r2, r1
 800dbd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dbd6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800dbda:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800dbdc:	68bb      	ldr	r3, [r7, #8]
 800dbde:	015a      	lsls	r2, r3, #5
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	4413      	add	r3, r2
 800dbe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	68ba      	ldr	r2, [r7, #8]
 800dbec:	0151      	lsls	r1, r2, #5
 800dbee:	68fa      	ldr	r2, [r7, #12]
 800dbf0:	440a      	add	r2, r1
 800dbf2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dbf6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800dbfa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800dbfc:	2300      	movs	r3, #0
}
 800dbfe:	4618      	mov	r0, r3
 800dc00:	3714      	adds	r7, #20
 800dc02:	46bd      	mov	sp, r7
 800dc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc08:	4770      	bx	lr

0800dc0a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800dc0a:	b480      	push	{r7}
 800dc0c:	b085      	sub	sp, #20
 800dc0e:	af00      	add	r7, sp, #0
 800dc10:	6078      	str	r0, [r7, #4]
 800dc12:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800dc18:	683b      	ldr	r3, [r7, #0]
 800dc1a:	781b      	ldrb	r3, [r3, #0]
 800dc1c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800dc1e:	683b      	ldr	r3, [r7, #0]
 800dc20:	785b      	ldrb	r3, [r3, #1]
 800dc22:	2b01      	cmp	r3, #1
 800dc24:	d128      	bne.n	800dc78 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800dc26:	68bb      	ldr	r3, [r7, #8]
 800dc28:	015a      	lsls	r2, r3, #5
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	4413      	add	r3, r2
 800dc2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	68ba      	ldr	r2, [r7, #8]
 800dc36:	0151      	lsls	r1, r2, #5
 800dc38:	68fa      	ldr	r2, [r7, #12]
 800dc3a:	440a      	add	r2, r1
 800dc3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dc40:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800dc44:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800dc46:	683b      	ldr	r3, [r7, #0]
 800dc48:	78db      	ldrb	r3, [r3, #3]
 800dc4a:	2b03      	cmp	r3, #3
 800dc4c:	d003      	beq.n	800dc56 <USB_EPClearStall+0x4c>
 800dc4e:	683b      	ldr	r3, [r7, #0]
 800dc50:	78db      	ldrb	r3, [r3, #3]
 800dc52:	2b02      	cmp	r3, #2
 800dc54:	d138      	bne.n	800dcc8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800dc56:	68bb      	ldr	r3, [r7, #8]
 800dc58:	015a      	lsls	r2, r3, #5
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	4413      	add	r3, r2
 800dc5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	68ba      	ldr	r2, [r7, #8]
 800dc66:	0151      	lsls	r1, r2, #5
 800dc68:	68fa      	ldr	r2, [r7, #12]
 800dc6a:	440a      	add	r2, r1
 800dc6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dc70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dc74:	6013      	str	r3, [r2, #0]
 800dc76:	e027      	b.n	800dcc8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800dc78:	68bb      	ldr	r3, [r7, #8]
 800dc7a:	015a      	lsls	r2, r3, #5
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	4413      	add	r3, r2
 800dc80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	68ba      	ldr	r2, [r7, #8]
 800dc88:	0151      	lsls	r1, r2, #5
 800dc8a:	68fa      	ldr	r2, [r7, #12]
 800dc8c:	440a      	add	r2, r1
 800dc8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dc92:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800dc96:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800dc98:	683b      	ldr	r3, [r7, #0]
 800dc9a:	78db      	ldrb	r3, [r3, #3]
 800dc9c:	2b03      	cmp	r3, #3
 800dc9e:	d003      	beq.n	800dca8 <USB_EPClearStall+0x9e>
 800dca0:	683b      	ldr	r3, [r7, #0]
 800dca2:	78db      	ldrb	r3, [r3, #3]
 800dca4:	2b02      	cmp	r3, #2
 800dca6:	d10f      	bne.n	800dcc8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800dca8:	68bb      	ldr	r3, [r7, #8]
 800dcaa:	015a      	lsls	r2, r3, #5
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	4413      	add	r3, r2
 800dcb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	68ba      	ldr	r2, [r7, #8]
 800dcb8:	0151      	lsls	r1, r2, #5
 800dcba:	68fa      	ldr	r2, [r7, #12]
 800dcbc:	440a      	add	r2, r1
 800dcbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dcc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dcc6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800dcc8:	2300      	movs	r3, #0
}
 800dcca:	4618      	mov	r0, r3
 800dccc:	3714      	adds	r7, #20
 800dcce:	46bd      	mov	sp, r7
 800dcd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd4:	4770      	bx	lr

0800dcd6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800dcd6:	b480      	push	{r7}
 800dcd8:	b085      	sub	sp, #20
 800dcda:	af00      	add	r7, sp, #0
 800dcdc:	6078      	str	r0, [r7, #4]
 800dcde:	460b      	mov	r3, r1
 800dce0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	68fa      	ldr	r2, [r7, #12]
 800dcf0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800dcf4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800dcf8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd00:	681a      	ldr	r2, [r3, #0]
 800dd02:	78fb      	ldrb	r3, [r7, #3]
 800dd04:	011b      	lsls	r3, r3, #4
 800dd06:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800dd0a:	68f9      	ldr	r1, [r7, #12]
 800dd0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dd10:	4313      	orrs	r3, r2
 800dd12:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800dd14:	2300      	movs	r3, #0
}
 800dd16:	4618      	mov	r0, r3
 800dd18:	3714      	adds	r7, #20
 800dd1a:	46bd      	mov	sp, r7
 800dd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd20:	4770      	bx	lr

0800dd22 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800dd22:	b580      	push	{r7, lr}
 800dd24:	b084      	sub	sp, #16
 800dd26:	af00      	add	r7, sp, #0
 800dd28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd34:	685b      	ldr	r3, [r3, #4]
 800dd36:	68fa      	ldr	r2, [r7, #12]
 800dd38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800dd3c:	f023 0302 	bic.w	r3, r3, #2
 800dd40:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800dd42:	2003      	movs	r0, #3
 800dd44:	f7fa ff54 	bl	8008bf0 <HAL_Delay>

  return HAL_OK;
 800dd48:	2300      	movs	r3, #0
}
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	3710      	adds	r7, #16
 800dd4e:	46bd      	mov	sp, r7
 800dd50:	bd80      	pop	{r7, pc}

0800dd52 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800dd52:	b580      	push	{r7, lr}
 800dd54:	b084      	sub	sp, #16
 800dd56:	af00      	add	r7, sp, #0
 800dd58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd64:	685b      	ldr	r3, [r3, #4]
 800dd66:	68fa      	ldr	r2, [r7, #12]
 800dd68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800dd6c:	f043 0302 	orr.w	r3, r3, #2
 800dd70:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800dd72:	2003      	movs	r0, #3
 800dd74:	f7fa ff3c 	bl	8008bf0 <HAL_Delay>

  return HAL_OK;
 800dd78:	2300      	movs	r3, #0
}
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	3710      	adds	r7, #16
 800dd7e:	46bd      	mov	sp, r7
 800dd80:	bd80      	pop	{r7, pc}

0800dd82 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800dd82:	b480      	push	{r7}
 800dd84:	b085      	sub	sp, #20
 800dd86:	af00      	add	r7, sp, #0
 800dd88:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	695b      	ldr	r3, [r3, #20]
 800dd8e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	699b      	ldr	r3, [r3, #24]
 800dd94:	68fa      	ldr	r2, [r7, #12]
 800dd96:	4013      	ands	r3, r2
 800dd98:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800dd9a:	68fb      	ldr	r3, [r7, #12]
}
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	3714      	adds	r7, #20
 800dda0:	46bd      	mov	sp, r7
 800dda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda6:	4770      	bx	lr

0800dda8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800dda8:	b480      	push	{r7}
 800ddaa:	b085      	sub	sp, #20
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ddba:	699b      	ldr	r3, [r3, #24]
 800ddbc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ddc4:	69db      	ldr	r3, [r3, #28]
 800ddc6:	68ba      	ldr	r2, [r7, #8]
 800ddc8:	4013      	ands	r3, r2
 800ddca:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ddcc:	68bb      	ldr	r3, [r7, #8]
 800ddce:	0c1b      	lsrs	r3, r3, #16
}
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	3714      	adds	r7, #20
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddda:	4770      	bx	lr

0800dddc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800dddc:	b480      	push	{r7}
 800ddde:	b085      	sub	sp, #20
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ddee:	699b      	ldr	r3, [r3, #24]
 800ddf0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ddf8:	69db      	ldr	r3, [r3, #28]
 800ddfa:	68ba      	ldr	r2, [r7, #8]
 800ddfc:	4013      	ands	r3, r2
 800ddfe:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800de00:	68bb      	ldr	r3, [r7, #8]
 800de02:	b29b      	uxth	r3, r3
}
 800de04:	4618      	mov	r0, r3
 800de06:	3714      	adds	r7, #20
 800de08:	46bd      	mov	sp, r7
 800de0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de0e:	4770      	bx	lr

0800de10 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800de10:	b480      	push	{r7}
 800de12:	b085      	sub	sp, #20
 800de14:	af00      	add	r7, sp, #0
 800de16:	6078      	str	r0, [r7, #4]
 800de18:	460b      	mov	r3, r1
 800de1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800de20:	78fb      	ldrb	r3, [r7, #3]
 800de22:	015a      	lsls	r2, r3, #5
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	4413      	add	r3, r2
 800de28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de2c:	689b      	ldr	r3, [r3, #8]
 800de2e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800de36:	695b      	ldr	r3, [r3, #20]
 800de38:	68ba      	ldr	r2, [r7, #8]
 800de3a:	4013      	ands	r3, r2
 800de3c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800de3e:	68bb      	ldr	r3, [r7, #8]
}
 800de40:	4618      	mov	r0, r3
 800de42:	3714      	adds	r7, #20
 800de44:	46bd      	mov	sp, r7
 800de46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4a:	4770      	bx	lr

0800de4c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800de4c:	b480      	push	{r7}
 800de4e:	b087      	sub	sp, #28
 800de50:	af00      	add	r7, sp, #0
 800de52:	6078      	str	r0, [r7, #4]
 800de54:	460b      	mov	r3, r1
 800de56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800de5c:	697b      	ldr	r3, [r7, #20]
 800de5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800de62:	691b      	ldr	r3, [r3, #16]
 800de64:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800de66:	697b      	ldr	r3, [r7, #20]
 800de68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800de6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de6e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800de70:	78fb      	ldrb	r3, [r7, #3]
 800de72:	f003 030f 	and.w	r3, r3, #15
 800de76:	68fa      	ldr	r2, [r7, #12]
 800de78:	fa22 f303 	lsr.w	r3, r2, r3
 800de7c:	01db      	lsls	r3, r3, #7
 800de7e:	b2db      	uxtb	r3, r3
 800de80:	693a      	ldr	r2, [r7, #16]
 800de82:	4313      	orrs	r3, r2
 800de84:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800de86:	78fb      	ldrb	r3, [r7, #3]
 800de88:	015a      	lsls	r2, r3, #5
 800de8a:	697b      	ldr	r3, [r7, #20]
 800de8c:	4413      	add	r3, r2
 800de8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de92:	689b      	ldr	r3, [r3, #8]
 800de94:	693a      	ldr	r2, [r7, #16]
 800de96:	4013      	ands	r3, r2
 800de98:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800de9a:	68bb      	ldr	r3, [r7, #8]
}
 800de9c:	4618      	mov	r0, r3
 800de9e:	371c      	adds	r7, #28
 800dea0:	46bd      	mov	sp, r7
 800dea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea6:	4770      	bx	lr

0800dea8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800dea8:	b480      	push	{r7}
 800deaa:	b083      	sub	sp, #12
 800deac:	af00      	add	r7, sp, #0
 800deae:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	695b      	ldr	r3, [r3, #20]
 800deb4:	f003 0301 	and.w	r3, r3, #1
}
 800deb8:	4618      	mov	r0, r3
 800deba:	370c      	adds	r7, #12
 800debc:	46bd      	mov	sp, r7
 800debe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec2:	4770      	bx	lr

0800dec4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800dec4:	b480      	push	{r7}
 800dec6:	b085      	sub	sp, #20
 800dec8:	af00      	add	r7, sp, #0
 800deca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	68fa      	ldr	r2, [r7, #12]
 800deda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dede:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800dee2:	f023 0307 	bic.w	r3, r3, #7
 800dee6:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800deee:	689b      	ldr	r3, [r3, #8]
 800def0:	f003 0306 	and.w	r3, r3, #6
 800def4:	2b04      	cmp	r3, #4
 800def6:	d109      	bne.n	800df0c <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	68fa      	ldr	r2, [r7, #12]
 800df02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800df06:	f043 0303 	orr.w	r3, r3, #3
 800df0a:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df12:	685b      	ldr	r3, [r3, #4]
 800df14:	68fa      	ldr	r2, [r7, #12]
 800df16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800df1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800df1e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800df20:	2300      	movs	r3, #0
}
 800df22:	4618      	mov	r0, r3
 800df24:	3714      	adds	r7, #20
 800df26:	46bd      	mov	sp, r7
 800df28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df2c:	4770      	bx	lr
	...

0800df30 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800df30:	b480      	push	{r7}
 800df32:	b087      	sub	sp, #28
 800df34:	af00      	add	r7, sp, #0
 800df36:	60f8      	str	r0, [r7, #12]
 800df38:	460b      	mov	r3, r1
 800df3a:	607a      	str	r2, [r7, #4]
 800df3c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	333c      	adds	r3, #60	; 0x3c
 800df46:	3304      	adds	r3, #4
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800df4c:	693b      	ldr	r3, [r7, #16]
 800df4e:	4a26      	ldr	r2, [pc, #152]	; (800dfe8 <USB_EP0_OutStart+0xb8>)
 800df50:	4293      	cmp	r3, r2
 800df52:	d90a      	bls.n	800df6a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800df54:	697b      	ldr	r3, [r7, #20]
 800df56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800df60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800df64:	d101      	bne.n	800df6a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800df66:	2300      	movs	r3, #0
 800df68:	e037      	b.n	800dfda <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800df6a:	697b      	ldr	r3, [r7, #20]
 800df6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df70:	461a      	mov	r2, r3
 800df72:	2300      	movs	r3, #0
 800df74:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800df76:	697b      	ldr	r3, [r7, #20]
 800df78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df7c:	691b      	ldr	r3, [r3, #16]
 800df7e:	697a      	ldr	r2, [r7, #20]
 800df80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800df84:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800df88:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800df8a:	697b      	ldr	r3, [r7, #20]
 800df8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df90:	691b      	ldr	r3, [r3, #16]
 800df92:	697a      	ldr	r2, [r7, #20]
 800df94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800df98:	f043 0318 	orr.w	r3, r3, #24
 800df9c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800df9e:	697b      	ldr	r3, [r7, #20]
 800dfa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dfa4:	691b      	ldr	r3, [r3, #16]
 800dfa6:	697a      	ldr	r2, [r7, #20]
 800dfa8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dfac:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800dfb0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800dfb2:	7afb      	ldrb	r3, [r7, #11]
 800dfb4:	2b01      	cmp	r3, #1
 800dfb6:	d10f      	bne.n	800dfd8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800dfb8:	697b      	ldr	r3, [r7, #20]
 800dfba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dfbe:	461a      	mov	r2, r3
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800dfc4:	697b      	ldr	r3, [r7, #20]
 800dfc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	697a      	ldr	r2, [r7, #20]
 800dfce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dfd2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800dfd6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800dfd8:	2300      	movs	r3, #0
}
 800dfda:	4618      	mov	r0, r3
 800dfdc:	371c      	adds	r7, #28
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe4:	4770      	bx	lr
 800dfe6:	bf00      	nop
 800dfe8:	4f54300a 	.word	0x4f54300a

0800dfec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800dfec:	b480      	push	{r7}
 800dfee:	b085      	sub	sp, #20
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800dff4:	2300      	movs	r3, #0
 800dff6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	3301      	adds	r3, #1
 800dffc:	60fb      	str	r3, [r7, #12]
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	4a13      	ldr	r2, [pc, #76]	; (800e050 <USB_CoreReset+0x64>)
 800e002:	4293      	cmp	r3, r2
 800e004:	d901      	bls.n	800e00a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800e006:	2303      	movs	r3, #3
 800e008:	e01b      	b.n	800e042 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	691b      	ldr	r3, [r3, #16]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	daf2      	bge.n	800dff8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800e012:	2300      	movs	r3, #0
 800e014:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	691b      	ldr	r3, [r3, #16]
 800e01a:	f043 0201 	orr.w	r2, r3, #1
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	3301      	adds	r3, #1
 800e026:	60fb      	str	r3, [r7, #12]
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	4a09      	ldr	r2, [pc, #36]	; (800e050 <USB_CoreReset+0x64>)
 800e02c:	4293      	cmp	r3, r2
 800e02e:	d901      	bls.n	800e034 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800e030:	2303      	movs	r3, #3
 800e032:	e006      	b.n	800e042 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	691b      	ldr	r3, [r3, #16]
 800e038:	f003 0301 	and.w	r3, r3, #1
 800e03c:	2b01      	cmp	r3, #1
 800e03e:	d0f0      	beq.n	800e022 <USB_CoreReset+0x36>

  return HAL_OK;
 800e040:	2300      	movs	r3, #0
}
 800e042:	4618      	mov	r0, r3
 800e044:	3714      	adds	r7, #20
 800e046:	46bd      	mov	sp, r7
 800e048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e04c:	4770      	bx	lr
 800e04e:	bf00      	nop
 800e050:	00030d40 	.word	0x00030d40

0800e054 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e054:	b580      	push	{r7, lr}
 800e056:	b084      	sub	sp, #16
 800e058:	af00      	add	r7, sp, #0
 800e05a:	6078      	str	r0, [r7, #4]
 800e05c:	460b      	mov	r3, r1
 800e05e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800e060:	2300      	movs	r3, #0
 800e062:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	7c1b      	ldrb	r3, [r3, #16]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d115      	bne.n	800e098 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e06c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e070:	2202      	movs	r2, #2
 800e072:	2181      	movs	r1, #129	; 0x81
 800e074:	6878      	ldr	r0, [r7, #4]
 800e076:	f005 f8a6 	bl	80131c6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	2201      	movs	r2, #1
 800e07e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e080:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e084:	2202      	movs	r2, #2
 800e086:	2101      	movs	r1, #1
 800e088:	6878      	ldr	r0, [r7, #4]
 800e08a:	f005 f89c 	bl	80131c6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	2201      	movs	r2, #1
 800e092:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800e096:	e012      	b.n	800e0be <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e098:	2340      	movs	r3, #64	; 0x40
 800e09a:	2202      	movs	r2, #2
 800e09c:	2181      	movs	r1, #129	; 0x81
 800e09e:	6878      	ldr	r0, [r7, #4]
 800e0a0:	f005 f891 	bl	80131c6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	2201      	movs	r2, #1
 800e0a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e0aa:	2340      	movs	r3, #64	; 0x40
 800e0ac:	2202      	movs	r2, #2
 800e0ae:	2101      	movs	r1, #1
 800e0b0:	6878      	ldr	r0, [r7, #4]
 800e0b2:	f005 f888 	bl	80131c6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	2201      	movs	r2, #1
 800e0ba:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e0be:	2308      	movs	r3, #8
 800e0c0:	2203      	movs	r2, #3
 800e0c2:	2182      	movs	r1, #130	; 0x82
 800e0c4:	6878      	ldr	r0, [r7, #4]
 800e0c6:	f005 f87e 	bl	80131c6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	2201      	movs	r2, #1
 800e0ce:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800e0d0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800e0d4:	f005 f9f4 	bl	80134c0 <malloc>
 800e0d8:	4603      	mov	r3, r0
 800e0da:	461a      	mov	r2, r3
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d102      	bne.n	800e0f2 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 800e0ec:	2301      	movs	r3, #1
 800e0ee:	73fb      	strb	r3, [r7, #15]
 800e0f0:	e026      	b.n	800e140 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e0f8:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800e104:	68bb      	ldr	r3, [r7, #8]
 800e106:	2200      	movs	r2, #0
 800e108:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800e10c:	68bb      	ldr	r3, [r7, #8]
 800e10e:	2200      	movs	r2, #0
 800e110:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	7c1b      	ldrb	r3, [r3, #16]
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d109      	bne.n	800e130 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e11c:	68bb      	ldr	r3, [r7, #8]
 800e11e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e122:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e126:	2101      	movs	r1, #1
 800e128:	6878      	ldr	r0, [r7, #4]
 800e12a:	f005 f93d 	bl	80133a8 <USBD_LL_PrepareReceive>
 800e12e:	e007      	b.n	800e140 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e130:	68bb      	ldr	r3, [r7, #8]
 800e132:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e136:	2340      	movs	r3, #64	; 0x40
 800e138:	2101      	movs	r1, #1
 800e13a:	6878      	ldr	r0, [r7, #4]
 800e13c:	f005 f934 	bl	80133a8 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800e140:	7bfb      	ldrb	r3, [r7, #15]
}
 800e142:	4618      	mov	r0, r3
 800e144:	3710      	adds	r7, #16
 800e146:	46bd      	mov	sp, r7
 800e148:	bd80      	pop	{r7, pc}

0800e14a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e14a:	b580      	push	{r7, lr}
 800e14c:	b084      	sub	sp, #16
 800e14e:	af00      	add	r7, sp, #0
 800e150:	6078      	str	r0, [r7, #4]
 800e152:	460b      	mov	r3, r1
 800e154:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800e156:	2300      	movs	r3, #0
 800e158:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800e15a:	2181      	movs	r1, #129	; 0x81
 800e15c:	6878      	ldr	r0, [r7, #4]
 800e15e:	f005 f858 	bl	8013212 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	2200      	movs	r2, #0
 800e166:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800e168:	2101      	movs	r1, #1
 800e16a:	6878      	ldr	r0, [r7, #4]
 800e16c:	f005 f851 	bl	8013212 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	2200      	movs	r2, #0
 800e174:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800e178:	2182      	movs	r1, #130	; 0x82
 800e17a:	6878      	ldr	r0, [r7, #4]
 800e17c:	f005 f849 	bl	8013212 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	2200      	movs	r2, #0
 800e184:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d00e      	beq.n	800e1ae <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e196:	685b      	ldr	r3, [r3, #4]
 800e198:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	f005 f995 	bl	80134d0 <free>
    pdev->pClassData = NULL;
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	2200      	movs	r2, #0
 800e1aa:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 800e1ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1b0:	4618      	mov	r0, r3
 800e1b2:	3710      	adds	r7, #16
 800e1b4:	46bd      	mov	sp, r7
 800e1b6:	bd80      	pop	{r7, pc}

0800e1b8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800e1b8:	b580      	push	{r7, lr}
 800e1ba:	b086      	sub	sp, #24
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	6078      	str	r0, [r7, #4]
 800e1c0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e1c8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800e1ca:	2300      	movs	r3, #0
 800e1cc:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e1d6:	683b      	ldr	r3, [r7, #0]
 800e1d8:	781b      	ldrb	r3, [r3, #0]
 800e1da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d039      	beq.n	800e256 <USBD_CDC_Setup+0x9e>
 800e1e2:	2b20      	cmp	r3, #32
 800e1e4:	d17c      	bne.n	800e2e0 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 800e1e6:	683b      	ldr	r3, [r7, #0]
 800e1e8:	88db      	ldrh	r3, [r3, #6]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d029      	beq.n	800e242 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 800e1ee:	683b      	ldr	r3, [r7, #0]
 800e1f0:	781b      	ldrb	r3, [r3, #0]
 800e1f2:	b25b      	sxtb	r3, r3
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	da11      	bge.n	800e21c <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e1fe:	689b      	ldr	r3, [r3, #8]
 800e200:	683a      	ldr	r2, [r7, #0]
 800e202:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 800e204:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e206:	683a      	ldr	r2, [r7, #0]
 800e208:	88d2      	ldrh	r2, [r2, #6]
 800e20a:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800e20c:	6939      	ldr	r1, [r7, #16]
 800e20e:	683b      	ldr	r3, [r7, #0]
 800e210:	88db      	ldrh	r3, [r3, #6]
 800e212:	461a      	mov	r2, r3
 800e214:	6878      	ldr	r0, [r7, #4]
 800e216:	f001 f9c9 	bl	800f5ac <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 800e21a:	e068      	b.n	800e2ee <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 800e21c:	683b      	ldr	r3, [r7, #0]
 800e21e:	785a      	ldrb	r2, [r3, #1]
 800e220:	693b      	ldr	r3, [r7, #16]
 800e222:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800e226:	683b      	ldr	r3, [r7, #0]
 800e228:	88db      	ldrh	r3, [r3, #6]
 800e22a:	b2da      	uxtb	r2, r3
 800e22c:	693b      	ldr	r3, [r7, #16]
 800e22e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800e232:	6939      	ldr	r1, [r7, #16]
 800e234:	683b      	ldr	r3, [r7, #0]
 800e236:	88db      	ldrh	r3, [r3, #6]
 800e238:	461a      	mov	r2, r3
 800e23a:	6878      	ldr	r0, [r7, #4]
 800e23c:	f001 f9e4 	bl	800f608 <USBD_CtlPrepareRx>
    break;
 800e240:	e055      	b.n	800e2ee <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e248:	689b      	ldr	r3, [r3, #8]
 800e24a:	683a      	ldr	r2, [r7, #0]
 800e24c:	7850      	ldrb	r0, [r2, #1]
 800e24e:	2200      	movs	r2, #0
 800e250:	6839      	ldr	r1, [r7, #0]
 800e252:	4798      	blx	r3
    break;
 800e254:	e04b      	b.n	800e2ee <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800e256:	683b      	ldr	r3, [r7, #0]
 800e258:	785b      	ldrb	r3, [r3, #1]
 800e25a:	2b0a      	cmp	r3, #10
 800e25c:	d017      	beq.n	800e28e <USBD_CDC_Setup+0xd6>
 800e25e:	2b0b      	cmp	r3, #11
 800e260:	d029      	beq.n	800e2b6 <USBD_CDC_Setup+0xfe>
 800e262:	2b00      	cmp	r3, #0
 800e264:	d133      	bne.n	800e2ce <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800e26c:	2b03      	cmp	r3, #3
 800e26e:	d107      	bne.n	800e280 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800e270:	f107 030c 	add.w	r3, r7, #12
 800e274:	2202      	movs	r2, #2
 800e276:	4619      	mov	r1, r3
 800e278:	6878      	ldr	r0, [r7, #4]
 800e27a:	f001 f997 	bl	800f5ac <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800e27e:	e02e      	b.n	800e2de <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800e280:	6839      	ldr	r1, [r7, #0]
 800e282:	6878      	ldr	r0, [r7, #4]
 800e284:	f001 f927 	bl	800f4d6 <USBD_CtlError>
			  ret = USBD_FAIL;
 800e288:	2302      	movs	r3, #2
 800e28a:	75fb      	strb	r3, [r7, #23]
      break;
 800e28c:	e027      	b.n	800e2de <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800e294:	2b03      	cmp	r3, #3
 800e296:	d107      	bne.n	800e2a8 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800e298:	f107 030f 	add.w	r3, r7, #15
 800e29c:	2201      	movs	r2, #1
 800e29e:	4619      	mov	r1, r3
 800e2a0:	6878      	ldr	r0, [r7, #4]
 800e2a2:	f001 f983 	bl	800f5ac <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800e2a6:	e01a      	b.n	800e2de <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800e2a8:	6839      	ldr	r1, [r7, #0]
 800e2aa:	6878      	ldr	r0, [r7, #4]
 800e2ac:	f001 f913 	bl	800f4d6 <USBD_CtlError>
			  ret = USBD_FAIL;
 800e2b0:	2302      	movs	r3, #2
 800e2b2:	75fb      	strb	r3, [r7, #23]
      break;
 800e2b4:	e013      	b.n	800e2de <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800e2bc:	2b03      	cmp	r3, #3
 800e2be:	d00d      	beq.n	800e2dc <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 800e2c0:	6839      	ldr	r1, [r7, #0]
 800e2c2:	6878      	ldr	r0, [r7, #4]
 800e2c4:	f001 f907 	bl	800f4d6 <USBD_CtlError>
			  ret = USBD_FAIL;
 800e2c8:	2302      	movs	r3, #2
 800e2ca:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800e2cc:	e006      	b.n	800e2dc <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 800e2ce:	6839      	ldr	r1, [r7, #0]
 800e2d0:	6878      	ldr	r0, [r7, #4]
 800e2d2:	f001 f900 	bl	800f4d6 <USBD_CtlError>
      ret = USBD_FAIL;
 800e2d6:	2302      	movs	r3, #2
 800e2d8:	75fb      	strb	r3, [r7, #23]
      break;
 800e2da:	e000      	b.n	800e2de <USBD_CDC_Setup+0x126>
      break;
 800e2dc:	bf00      	nop
    }
    break;
 800e2de:	e006      	b.n	800e2ee <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 800e2e0:	6839      	ldr	r1, [r7, #0]
 800e2e2:	6878      	ldr	r0, [r7, #4]
 800e2e4:	f001 f8f7 	bl	800f4d6 <USBD_CtlError>
    ret = USBD_FAIL;
 800e2e8:	2302      	movs	r3, #2
 800e2ea:	75fb      	strb	r3, [r7, #23]
    break;
 800e2ec:	bf00      	nop
  }

  return ret;
 800e2ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800e2f0:	4618      	mov	r0, r3
 800e2f2:	3718      	adds	r7, #24
 800e2f4:	46bd      	mov	sp, r7
 800e2f6:	bd80      	pop	{r7, pc}

0800e2f8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b084      	sub	sp, #16
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	6078      	str	r0, [r7, #4]
 800e300:	460b      	mov	r3, r1
 800e302:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e30a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800e312:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d03a      	beq.n	800e394 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800e31e:	78fa      	ldrb	r2, [r7, #3]
 800e320:	6879      	ldr	r1, [r7, #4]
 800e322:	4613      	mov	r3, r2
 800e324:	009b      	lsls	r3, r3, #2
 800e326:	4413      	add	r3, r2
 800e328:	009b      	lsls	r3, r3, #2
 800e32a:	440b      	add	r3, r1
 800e32c:	331c      	adds	r3, #28
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d029      	beq.n	800e388 <USBD_CDC_DataIn+0x90>
 800e334:	78fa      	ldrb	r2, [r7, #3]
 800e336:	6879      	ldr	r1, [r7, #4]
 800e338:	4613      	mov	r3, r2
 800e33a:	009b      	lsls	r3, r3, #2
 800e33c:	4413      	add	r3, r2
 800e33e:	009b      	lsls	r3, r3, #2
 800e340:	440b      	add	r3, r1
 800e342:	331c      	adds	r3, #28
 800e344:	681a      	ldr	r2, [r3, #0]
 800e346:	78f9      	ldrb	r1, [r7, #3]
 800e348:	68b8      	ldr	r0, [r7, #8]
 800e34a:	460b      	mov	r3, r1
 800e34c:	00db      	lsls	r3, r3, #3
 800e34e:	1a5b      	subs	r3, r3, r1
 800e350:	009b      	lsls	r3, r3, #2
 800e352:	4403      	add	r3, r0
 800e354:	3344      	adds	r3, #68	; 0x44
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	fbb2 f1f3 	udiv	r1, r2, r3
 800e35c:	fb03 f301 	mul.w	r3, r3, r1
 800e360:	1ad3      	subs	r3, r2, r3
 800e362:	2b00      	cmp	r3, #0
 800e364:	d110      	bne.n	800e388 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800e366:	78fa      	ldrb	r2, [r7, #3]
 800e368:	6879      	ldr	r1, [r7, #4]
 800e36a:	4613      	mov	r3, r2
 800e36c:	009b      	lsls	r3, r3, #2
 800e36e:	4413      	add	r3, r2
 800e370:	009b      	lsls	r3, r3, #2
 800e372:	440b      	add	r3, r1
 800e374:	331c      	adds	r3, #28
 800e376:	2200      	movs	r2, #0
 800e378:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800e37a:	78f9      	ldrb	r1, [r7, #3]
 800e37c:	2300      	movs	r3, #0
 800e37e:	2200      	movs	r2, #0
 800e380:	6878      	ldr	r0, [r7, #4]
 800e382:	f004 ffee 	bl	8013362 <USBD_LL_Transmit>
 800e386:	e003      	b.n	800e390 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	2200      	movs	r2, #0
 800e38c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800e390:	2300      	movs	r3, #0
 800e392:	e000      	b.n	800e396 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800e394:	2302      	movs	r3, #2
  }
}
 800e396:	4618      	mov	r0, r3
 800e398:	3710      	adds	r7, #16
 800e39a:	46bd      	mov	sp, r7
 800e39c:	bd80      	pop	{r7, pc}

0800e39e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e39e:	b580      	push	{r7, lr}
 800e3a0:	b084      	sub	sp, #16
 800e3a2:	af00      	add	r7, sp, #0
 800e3a4:	6078      	str	r0, [r7, #4]
 800e3a6:	460b      	mov	r3, r1
 800e3a8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e3b0:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800e3b2:	78fb      	ldrb	r3, [r7, #3]
 800e3b4:	4619      	mov	r1, r3
 800e3b6:	6878      	ldr	r0, [r7, #4]
 800e3b8:	f005 f819 	bl	80133ee <USBD_LL_GetRxDataSize>
 800e3bc:	4602      	mov	r2, r0
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d00d      	beq.n	800e3ea <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e3d4:	68db      	ldr	r3, [r3, #12]
 800e3d6:	68fa      	ldr	r2, [r7, #12]
 800e3d8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800e3dc:	68fa      	ldr	r2, [r7, #12]
 800e3de:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800e3e2:	4611      	mov	r1, r2
 800e3e4:	4798      	blx	r3

    return USBD_OK;
 800e3e6:	2300      	movs	r3, #0
 800e3e8:	e000      	b.n	800e3ec <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800e3ea:	2302      	movs	r3, #2
  }
}
 800e3ec:	4618      	mov	r0, r3
 800e3ee:	3710      	adds	r7, #16
 800e3f0:	46bd      	mov	sp, r7
 800e3f2:	bd80      	pop	{r7, pc}

0800e3f4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800e3f4:	b580      	push	{r7, lr}
 800e3f6:	b084      	sub	sp, #16
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e402:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d015      	beq.n	800e43a <USBD_CDC_EP0_RxReady+0x46>
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800e414:	2bff      	cmp	r3, #255	; 0xff
 800e416:	d010      	beq.n	800e43a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e41e:	689b      	ldr	r3, [r3, #8]
 800e420:	68fa      	ldr	r2, [r7, #12]
 800e422:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800e426:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800e428:	68fa      	ldr	r2, [r7, #12]
 800e42a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e42e:	b292      	uxth	r2, r2
 800e430:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	22ff      	movs	r2, #255	; 0xff
 800e436:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800e43a:	2300      	movs	r3, #0
}
 800e43c:	4618      	mov	r0, r3
 800e43e:	3710      	adds	r7, #16
 800e440:	46bd      	mov	sp, r7
 800e442:	bd80      	pop	{r7, pc}

0800e444 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800e444:	b480      	push	{r7}
 800e446:	b083      	sub	sp, #12
 800e448:	af00      	add	r7, sp, #0
 800e44a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	2243      	movs	r2, #67	; 0x43
 800e450:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800e452:	4b03      	ldr	r3, [pc, #12]	; (800e460 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800e454:	4618      	mov	r0, r3
 800e456:	370c      	adds	r7, #12
 800e458:	46bd      	mov	sp, r7
 800e45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e45e:	4770      	bx	lr
 800e460:	20000d48 	.word	0x20000d48

0800e464 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800e464:	b480      	push	{r7}
 800e466:	b083      	sub	sp, #12
 800e468:	af00      	add	r7, sp, #0
 800e46a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	2243      	movs	r2, #67	; 0x43
 800e470:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800e472:	4b03      	ldr	r3, [pc, #12]	; (800e480 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800e474:	4618      	mov	r0, r3
 800e476:	370c      	adds	r7, #12
 800e478:	46bd      	mov	sp, r7
 800e47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e47e:	4770      	bx	lr
 800e480:	20000d04 	.word	0x20000d04

0800e484 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800e484:	b480      	push	{r7}
 800e486:	b083      	sub	sp, #12
 800e488:	af00      	add	r7, sp, #0
 800e48a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	2243      	movs	r2, #67	; 0x43
 800e490:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800e492:	4b03      	ldr	r3, [pc, #12]	; (800e4a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800e494:	4618      	mov	r0, r3
 800e496:	370c      	adds	r7, #12
 800e498:	46bd      	mov	sp, r7
 800e49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e49e:	4770      	bx	lr
 800e4a0:	20000d8c 	.word	0x20000d8c

0800e4a4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800e4a4:	b480      	push	{r7}
 800e4a6:	b083      	sub	sp, #12
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	220a      	movs	r2, #10
 800e4b0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800e4b2:	4b03      	ldr	r3, [pc, #12]	; (800e4c0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	370c      	adds	r7, #12
 800e4b8:	46bd      	mov	sp, r7
 800e4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4be:	4770      	bx	lr
 800e4c0:	20000cc0 	.word	0x20000cc0

0800e4c4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 800e4c4:	b480      	push	{r7}
 800e4c6:	b085      	sub	sp, #20
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	6078      	str	r0, [r7, #4]
 800e4cc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800e4ce:	2302      	movs	r3, #2
 800e4d0:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800e4d2:	683b      	ldr	r3, [r7, #0]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d005      	beq.n	800e4e4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	683a      	ldr	r2, [r7, #0]
 800e4dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800e4e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	3714      	adds	r7, #20
 800e4ea:	46bd      	mov	sp, r7
 800e4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f0:	4770      	bx	lr

0800e4f2 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800e4f2:	b480      	push	{r7}
 800e4f4:	b087      	sub	sp, #28
 800e4f6:	af00      	add	r7, sp, #0
 800e4f8:	60f8      	str	r0, [r7, #12]
 800e4fa:	60b9      	str	r1, [r7, #8]
 800e4fc:	4613      	mov	r3, r2
 800e4fe:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e506:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800e508:	697b      	ldr	r3, [r7, #20]
 800e50a:	68ba      	ldr	r2, [r7, #8]
 800e50c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800e510:	88fa      	ldrh	r2, [r7, #6]
 800e512:	697b      	ldr	r3, [r7, #20]
 800e514:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800e518:	2300      	movs	r3, #0
}
 800e51a:	4618      	mov	r0, r3
 800e51c:	371c      	adds	r7, #28
 800e51e:	46bd      	mov	sp, r7
 800e520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e524:	4770      	bx	lr

0800e526 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800e526:	b480      	push	{r7}
 800e528:	b085      	sub	sp, #20
 800e52a:	af00      	add	r7, sp, #0
 800e52c:	6078      	str	r0, [r7, #4]
 800e52e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e536:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	683a      	ldr	r2, [r7, #0]
 800e53c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800e540:	2300      	movs	r3, #0
}
 800e542:	4618      	mov	r0, r3
 800e544:	3714      	adds	r7, #20
 800e546:	46bd      	mov	sp, r7
 800e548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e54c:	4770      	bx	lr

0800e54e <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800e54e:	b580      	push	{r7, lr}
 800e550:	b084      	sub	sp, #16
 800e552:	af00      	add	r7, sp, #0
 800e554:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e55c:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e564:	2b00      	cmp	r3, #0
 800e566:	d01c      	beq.n	800e5a2 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d115      	bne.n	800e59e <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	2201      	movs	r2, #1
 800e576:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800e590:	b29b      	uxth	r3, r3
 800e592:	2181      	movs	r1, #129	; 0x81
 800e594:	6878      	ldr	r0, [r7, #4]
 800e596:	f004 fee4 	bl	8013362 <USBD_LL_Transmit>

      return USBD_OK;
 800e59a:	2300      	movs	r3, #0
 800e59c:	e002      	b.n	800e5a4 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800e59e:	2301      	movs	r3, #1
 800e5a0:	e000      	b.n	800e5a4 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800e5a2:	2302      	movs	r3, #2
  }
}
 800e5a4:	4618      	mov	r0, r3
 800e5a6:	3710      	adds	r7, #16
 800e5a8:	46bd      	mov	sp, r7
 800e5aa:	bd80      	pop	{r7, pc}

0800e5ac <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e5ac:	b580      	push	{r7, lr}
 800e5ae:	b084      	sub	sp, #16
 800e5b0:	af00      	add	r7, sp, #0
 800e5b2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e5ba:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d017      	beq.n	800e5f6 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	7c1b      	ldrb	r3, [r3, #16]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d109      	bne.n	800e5e2 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e5d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e5d8:	2101      	movs	r1, #1
 800e5da:	6878      	ldr	r0, [r7, #4]
 800e5dc:	f004 fee4 	bl	80133a8 <USBD_LL_PrepareReceive>
 800e5e0:	e007      	b.n	800e5f2 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e5e8:	2340      	movs	r3, #64	; 0x40
 800e5ea:	2101      	movs	r1, #1
 800e5ec:	6878      	ldr	r0, [r7, #4]
 800e5ee:	f004 fedb 	bl	80133a8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800e5f2:	2300      	movs	r3, #0
 800e5f4:	e000      	b.n	800e5f8 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800e5f6:	2302      	movs	r3, #2
  }
}
 800e5f8:	4618      	mov	r0, r3
 800e5fa:	3710      	adds	r7, #16
 800e5fc:	46bd      	mov	sp, r7
 800e5fe:	bd80      	pop	{r7, pc}

0800e600 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e600:	b580      	push	{r7, lr}
 800e602:	b084      	sub	sp, #16
 800e604:	af00      	add	r7, sp, #0
 800e606:	60f8      	str	r0, [r7, #12]
 800e608:	60b9      	str	r1, [r7, #8]
 800e60a:	4613      	mov	r3, r2
 800e60c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	2b00      	cmp	r3, #0
 800e612:	d101      	bne.n	800e618 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800e614:	2302      	movs	r3, #2
 800e616:	e01a      	b.n	800e64e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d003      	beq.n	800e62a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	2200      	movs	r2, #0
 800e626:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800e62a:	68bb      	ldr	r3, [r7, #8]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d003      	beq.n	800e638 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	68ba      	ldr	r2, [r7, #8]
 800e634:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	2201      	movs	r2, #1
 800e63c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	79fa      	ldrb	r2, [r7, #7]
 800e644:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800e646:	68f8      	ldr	r0, [r7, #12]
 800e648:	f004 fd56 	bl	80130f8 <USBD_LL_Init>

  return USBD_OK;
 800e64c:	2300      	movs	r3, #0
}
 800e64e:	4618      	mov	r0, r3
 800e650:	3710      	adds	r7, #16
 800e652:	46bd      	mov	sp, r7
 800e654:	bd80      	pop	{r7, pc}

0800e656 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e656:	b480      	push	{r7}
 800e658:	b085      	sub	sp, #20
 800e65a:	af00      	add	r7, sp, #0
 800e65c:	6078      	str	r0, [r7, #4]
 800e65e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800e660:	2300      	movs	r3, #0
 800e662:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800e664:	683b      	ldr	r3, [r7, #0]
 800e666:	2b00      	cmp	r3, #0
 800e668:	d006      	beq.n	800e678 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	683a      	ldr	r2, [r7, #0]
 800e66e:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 800e672:	2300      	movs	r3, #0
 800e674:	73fb      	strb	r3, [r7, #15]
 800e676:	e001      	b.n	800e67c <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800e678:	2302      	movs	r3, #2
 800e67a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800e67c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e67e:	4618      	mov	r0, r3
 800e680:	3714      	adds	r7, #20
 800e682:	46bd      	mov	sp, r7
 800e684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e688:	4770      	bx	lr

0800e68a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800e68a:	b580      	push	{r7, lr}
 800e68c:	b082      	sub	sp, #8
 800e68e:	af00      	add	r7, sp, #0
 800e690:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800e692:	6878      	ldr	r0, [r7, #4]
 800e694:	f004 fd7c 	bl	8013190 <USBD_LL_Start>

  return USBD_OK;
 800e698:	2300      	movs	r3, #0
}
 800e69a:	4618      	mov	r0, r3
 800e69c:	3708      	adds	r7, #8
 800e69e:	46bd      	mov	sp, r7
 800e6a0:	bd80      	pop	{r7, pc}

0800e6a2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 800e6a2:	b480      	push	{r7}
 800e6a4:	b083      	sub	sp, #12
 800e6a6:	af00      	add	r7, sp, #0
 800e6a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e6aa:	2300      	movs	r3, #0
}
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	370c      	adds	r7, #12
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b6:	4770      	bx	lr

0800e6b8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800e6b8:	b580      	push	{r7, lr}
 800e6ba:	b084      	sub	sp, #16
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	6078      	str	r0, [r7, #4]
 800e6c0:	460b      	mov	r3, r1
 800e6c2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800e6c4:	2302      	movs	r3, #2
 800e6c6:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d00c      	beq.n	800e6ec <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	78fa      	ldrb	r2, [r7, #3]
 800e6dc:	4611      	mov	r1, r2
 800e6de:	6878      	ldr	r0, [r7, #4]
 800e6e0:	4798      	blx	r3
 800e6e2:	4603      	mov	r3, r0
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d101      	bne.n	800e6ec <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800e6e8:	2300      	movs	r3, #0
 800e6ea:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800e6ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6ee:	4618      	mov	r0, r3
 800e6f0:	3710      	adds	r7, #16
 800e6f2:	46bd      	mov	sp, r7
 800e6f4:	bd80      	pop	{r7, pc}

0800e6f6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800e6f6:	b580      	push	{r7, lr}
 800e6f8:	b082      	sub	sp, #8
 800e6fa:	af00      	add	r7, sp, #0
 800e6fc:	6078      	str	r0, [r7, #4]
 800e6fe:	460b      	mov	r3, r1
 800e700:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e708:	685b      	ldr	r3, [r3, #4]
 800e70a:	78fa      	ldrb	r2, [r7, #3]
 800e70c:	4611      	mov	r1, r2
 800e70e:	6878      	ldr	r0, [r7, #4]
 800e710:	4798      	blx	r3
  return USBD_OK;
 800e712:	2300      	movs	r3, #0
}
 800e714:	4618      	mov	r0, r3
 800e716:	3708      	adds	r7, #8
 800e718:	46bd      	mov	sp, r7
 800e71a:	bd80      	pop	{r7, pc}

0800e71c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e71c:	b580      	push	{r7, lr}
 800e71e:	b082      	sub	sp, #8
 800e720:	af00      	add	r7, sp, #0
 800e722:	6078      	str	r0, [r7, #4]
 800e724:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800e72c:	6839      	ldr	r1, [r7, #0]
 800e72e:	4618      	mov	r0, r3
 800e730:	f000 fe94 	bl	800f45c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	2201      	movs	r2, #1
 800e738:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 800e742:	461a      	mov	r2, r3
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800e750:	f003 031f 	and.w	r3, r3, #31
 800e754:	2b01      	cmp	r3, #1
 800e756:	d00c      	beq.n	800e772 <USBD_LL_SetupStage+0x56>
 800e758:	2b01      	cmp	r3, #1
 800e75a:	d302      	bcc.n	800e762 <USBD_LL_SetupStage+0x46>
 800e75c:	2b02      	cmp	r3, #2
 800e75e:	d010      	beq.n	800e782 <USBD_LL_SetupStage+0x66>
 800e760:	e017      	b.n	800e792 <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800e768:	4619      	mov	r1, r3
 800e76a:	6878      	ldr	r0, [r7, #4]
 800e76c:	f000 fa04 	bl	800eb78 <USBD_StdDevReq>
    break;
 800e770:	e01a      	b.n	800e7a8 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800e778:	4619      	mov	r1, r3
 800e77a:	6878      	ldr	r0, [r7, #4]
 800e77c:	f000 fa66 	bl	800ec4c <USBD_StdItfReq>
    break;
 800e780:	e012      	b.n	800e7a8 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800e788:	4619      	mov	r1, r3
 800e78a:	6878      	ldr	r0, [r7, #4]
 800e78c:	f000 faa4 	bl	800ecd8 <USBD_StdEPReq>
    break;
 800e790:	e00a      	b.n	800e7a8 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800e798:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e79c:	b2db      	uxtb	r3, r3
 800e79e:	4619      	mov	r1, r3
 800e7a0:	6878      	ldr	r0, [r7, #4]
 800e7a2:	f004 fd55 	bl	8013250 <USBD_LL_StallEP>
    break;
 800e7a6:	bf00      	nop
  }

  return USBD_OK;
 800e7a8:	2300      	movs	r3, #0
}
 800e7aa:	4618      	mov	r0, r3
 800e7ac:	3708      	adds	r7, #8
 800e7ae:	46bd      	mov	sp, r7
 800e7b0:	bd80      	pop	{r7, pc}

0800e7b2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e7b2:	b580      	push	{r7, lr}
 800e7b4:	b086      	sub	sp, #24
 800e7b6:	af00      	add	r7, sp, #0
 800e7b8:	60f8      	str	r0, [r7, #12]
 800e7ba:	460b      	mov	r3, r1
 800e7bc:	607a      	str	r2, [r7, #4]
 800e7be:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800e7c0:	7afb      	ldrb	r3, [r7, #11]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d14b      	bne.n	800e85e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800e7cc:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800e7d4:	2b03      	cmp	r3, #3
 800e7d6:	d134      	bne.n	800e842 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800e7d8:	697b      	ldr	r3, [r7, #20]
 800e7da:	68da      	ldr	r2, [r3, #12]
 800e7dc:	697b      	ldr	r3, [r7, #20]
 800e7de:	691b      	ldr	r3, [r3, #16]
 800e7e0:	429a      	cmp	r2, r3
 800e7e2:	d919      	bls.n	800e818 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 800e7e4:	697b      	ldr	r3, [r7, #20]
 800e7e6:	68da      	ldr	r2, [r3, #12]
 800e7e8:	697b      	ldr	r3, [r7, #20]
 800e7ea:	691b      	ldr	r3, [r3, #16]
 800e7ec:	1ad2      	subs	r2, r2, r3
 800e7ee:	697b      	ldr	r3, [r7, #20]
 800e7f0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800e7f2:	697b      	ldr	r3, [r7, #20]
 800e7f4:	68da      	ldr	r2, [r3, #12]
 800e7f6:	697b      	ldr	r3, [r7, #20]
 800e7f8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800e7fa:	429a      	cmp	r2, r3
 800e7fc:	d203      	bcs.n	800e806 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800e7fe:	697b      	ldr	r3, [r7, #20]
 800e800:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 800e802:	b29b      	uxth	r3, r3
 800e804:	e002      	b.n	800e80c <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800e806:	697b      	ldr	r3, [r7, #20]
 800e808:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800e80a:	b29b      	uxth	r3, r3
 800e80c:	461a      	mov	r2, r3
 800e80e:	6879      	ldr	r1, [r7, #4]
 800e810:	68f8      	ldr	r0, [r7, #12]
 800e812:	f000 ff17 	bl	800f644 <USBD_CtlContinueRx>
 800e816:	e038      	b.n	800e88a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e81e:	691b      	ldr	r3, [r3, #16]
 800e820:	2b00      	cmp	r3, #0
 800e822:	d00a      	beq.n	800e83a <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800e82a:	2b03      	cmp	r3, #3
 800e82c:	d105      	bne.n	800e83a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e834:	691b      	ldr	r3, [r3, #16]
 800e836:	68f8      	ldr	r0, [r7, #12]
 800e838:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800e83a:	68f8      	ldr	r0, [r7, #12]
 800e83c:	f000 ff14 	bl	800f668 <USBD_CtlSendStatus>
 800e840:	e023      	b.n	800e88a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800e848:	2b05      	cmp	r3, #5
 800e84a:	d11e      	bne.n	800e88a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	2200      	movs	r2, #0
 800e850:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 800e854:	2100      	movs	r1, #0
 800e856:	68f8      	ldr	r0, [r7, #12]
 800e858:	f004 fcfa 	bl	8013250 <USBD_LL_StallEP>
 800e85c:	e015      	b.n	800e88a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e864:	699b      	ldr	r3, [r3, #24]
 800e866:	2b00      	cmp	r3, #0
 800e868:	d00d      	beq.n	800e886 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 800e870:	2b03      	cmp	r3, #3
 800e872:	d108      	bne.n	800e886 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e87a:	699b      	ldr	r3, [r3, #24]
 800e87c:	7afa      	ldrb	r2, [r7, #11]
 800e87e:	4611      	mov	r1, r2
 800e880:	68f8      	ldr	r0, [r7, #12]
 800e882:	4798      	blx	r3
 800e884:	e001      	b.n	800e88a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800e886:	2302      	movs	r3, #2
 800e888:	e000      	b.n	800e88c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800e88a:	2300      	movs	r3, #0
}
 800e88c:	4618      	mov	r0, r3
 800e88e:	3718      	adds	r7, #24
 800e890:	46bd      	mov	sp, r7
 800e892:	bd80      	pop	{r7, pc}

0800e894 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800e894:	b580      	push	{r7, lr}
 800e896:	b086      	sub	sp, #24
 800e898:	af00      	add	r7, sp, #0
 800e89a:	60f8      	str	r0, [r7, #12]
 800e89c:	460b      	mov	r3, r1
 800e89e:	607a      	str	r2, [r7, #4]
 800e8a0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800e8a2:	7afb      	ldrb	r3, [r7, #11]
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d17f      	bne.n	800e9a8 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	3314      	adds	r3, #20
 800e8ac:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800e8b4:	2b02      	cmp	r3, #2
 800e8b6:	d15c      	bne.n	800e972 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800e8b8:	697b      	ldr	r3, [r7, #20]
 800e8ba:	68da      	ldr	r2, [r3, #12]
 800e8bc:	697b      	ldr	r3, [r7, #20]
 800e8be:	691b      	ldr	r3, [r3, #16]
 800e8c0:	429a      	cmp	r2, r3
 800e8c2:	d915      	bls.n	800e8f0 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800e8c4:	697b      	ldr	r3, [r7, #20]
 800e8c6:	68da      	ldr	r2, [r3, #12]
 800e8c8:	697b      	ldr	r3, [r7, #20]
 800e8ca:	691b      	ldr	r3, [r3, #16]
 800e8cc:	1ad2      	subs	r2, r2, r3
 800e8ce:	697b      	ldr	r3, [r7, #20]
 800e8d0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800e8d2:	697b      	ldr	r3, [r7, #20]
 800e8d4:	68db      	ldr	r3, [r3, #12]
 800e8d6:	b29b      	uxth	r3, r3
 800e8d8:	461a      	mov	r2, r3
 800e8da:	6879      	ldr	r1, [r7, #4]
 800e8dc:	68f8      	ldr	r0, [r7, #12]
 800e8de:	f000 fe81 	bl	800f5e4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800e8e2:	2300      	movs	r3, #0
 800e8e4:	2200      	movs	r2, #0
 800e8e6:	2100      	movs	r1, #0
 800e8e8:	68f8      	ldr	r0, [r7, #12]
 800e8ea:	f004 fd5d 	bl	80133a8 <USBD_LL_PrepareReceive>
 800e8ee:	e04e      	b.n	800e98e <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800e8f0:	697b      	ldr	r3, [r7, #20]
 800e8f2:	689b      	ldr	r3, [r3, #8]
 800e8f4:	697a      	ldr	r2, [r7, #20]
 800e8f6:	6912      	ldr	r2, [r2, #16]
 800e8f8:	fbb3 f1f2 	udiv	r1, r3, r2
 800e8fc:	fb02 f201 	mul.w	r2, r2, r1
 800e900:	1a9b      	subs	r3, r3, r2
 800e902:	2b00      	cmp	r3, #0
 800e904:	d11c      	bne.n	800e940 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800e906:	697b      	ldr	r3, [r7, #20]
 800e908:	689a      	ldr	r2, [r3, #8]
 800e90a:	697b      	ldr	r3, [r7, #20]
 800e90c:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 800e90e:	429a      	cmp	r2, r3
 800e910:	d316      	bcc.n	800e940 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 800e912:	697b      	ldr	r3, [r7, #20]
 800e914:	689a      	ldr	r2, [r3, #8]
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800e91c:	429a      	cmp	r2, r3
 800e91e:	d20f      	bcs.n	800e940 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e920:	2200      	movs	r2, #0
 800e922:	2100      	movs	r1, #0
 800e924:	68f8      	ldr	r0, [r7, #12]
 800e926:	f000 fe5d 	bl	800f5e4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	2200      	movs	r2, #0
 800e92e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800e932:	2300      	movs	r3, #0
 800e934:	2200      	movs	r2, #0
 800e936:	2100      	movs	r1, #0
 800e938:	68f8      	ldr	r0, [r7, #12]
 800e93a:	f004 fd35 	bl	80133a8 <USBD_LL_PrepareReceive>
 800e93e:	e026      	b.n	800e98e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e946:	68db      	ldr	r3, [r3, #12]
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d00a      	beq.n	800e962 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800e952:	2b03      	cmp	r3, #3
 800e954:	d105      	bne.n	800e962 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e95c:	68db      	ldr	r3, [r3, #12]
 800e95e:	68f8      	ldr	r0, [r7, #12]
 800e960:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800e962:	2180      	movs	r1, #128	; 0x80
 800e964:	68f8      	ldr	r0, [r7, #12]
 800e966:	f004 fc73 	bl	8013250 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800e96a:	68f8      	ldr	r0, [r7, #12]
 800e96c:	f000 fe8f 	bl	800f68e <USBD_CtlReceiveStatus>
 800e970:	e00d      	b.n	800e98e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800e978:	2b04      	cmp	r3, #4
 800e97a:	d004      	beq.n	800e986 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800e982:	2b00      	cmp	r3, #0
 800e984:	d103      	bne.n	800e98e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800e986:	2180      	movs	r1, #128	; 0x80
 800e988:	68f8      	ldr	r0, [r7, #12]
 800e98a:	f004 fc61 	bl	8013250 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 800e994:	2b01      	cmp	r3, #1
 800e996:	d11d      	bne.n	800e9d4 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800e998:	68f8      	ldr	r0, [r7, #12]
 800e99a:	f7ff fe82 	bl	800e6a2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	2200      	movs	r2, #0
 800e9a2:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 800e9a6:	e015      	b.n	800e9d4 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e9ae:	695b      	ldr	r3, [r3, #20]
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d00d      	beq.n	800e9d0 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800e9ba:	2b03      	cmp	r3, #3
 800e9bc:	d108      	bne.n	800e9d0 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e9c4:	695b      	ldr	r3, [r3, #20]
 800e9c6:	7afa      	ldrb	r2, [r7, #11]
 800e9c8:	4611      	mov	r1, r2
 800e9ca:	68f8      	ldr	r0, [r7, #12]
 800e9cc:	4798      	blx	r3
 800e9ce:	e001      	b.n	800e9d4 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800e9d0:	2302      	movs	r3, #2
 800e9d2:	e000      	b.n	800e9d6 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800e9d4:	2300      	movs	r3, #0
}
 800e9d6:	4618      	mov	r0, r3
 800e9d8:	3718      	adds	r7, #24
 800e9da:	46bd      	mov	sp, r7
 800e9dc:	bd80      	pop	{r7, pc}

0800e9de <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800e9de:	b580      	push	{r7, lr}
 800e9e0:	b082      	sub	sp, #8
 800e9e2:	af00      	add	r7, sp, #0
 800e9e4:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e9e6:	2340      	movs	r3, #64	; 0x40
 800e9e8:	2200      	movs	r2, #0
 800e9ea:	2100      	movs	r1, #0
 800e9ec:	6878      	ldr	r0, [r7, #4]
 800e9ee:	f004 fbea 	bl	80131c6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	2201      	movs	r2, #1
 800e9f6:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	2240      	movs	r2, #64	; 0x40
 800e9fe:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ea02:	2340      	movs	r3, #64	; 0x40
 800ea04:	2200      	movs	r2, #0
 800ea06:	2180      	movs	r1, #128	; 0x80
 800ea08:	6878      	ldr	r0, [r7, #4]
 800ea0a:	f004 fbdc 	bl	80131c6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	2201      	movs	r2, #1
 800ea12:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	2240      	movs	r2, #64	; 0x40
 800ea18:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	2201      	movs	r2, #1
 800ea1e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	2200      	movs	r2, #0
 800ea26:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	2200      	movs	r2, #0
 800ea2e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	2200      	movs	r2, #0
 800ea34:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d009      	beq.n	800ea56 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ea48:	685b      	ldr	r3, [r3, #4]
 800ea4a:	687a      	ldr	r2, [r7, #4]
 800ea4c:	6852      	ldr	r2, [r2, #4]
 800ea4e:	b2d2      	uxtb	r2, r2
 800ea50:	4611      	mov	r1, r2
 800ea52:	6878      	ldr	r0, [r7, #4]
 800ea54:	4798      	blx	r3
  }

  return USBD_OK;
 800ea56:	2300      	movs	r3, #0
}
 800ea58:	4618      	mov	r0, r3
 800ea5a:	3708      	adds	r7, #8
 800ea5c:	46bd      	mov	sp, r7
 800ea5e:	bd80      	pop	{r7, pc}

0800ea60 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800ea60:	b480      	push	{r7}
 800ea62:	b083      	sub	sp, #12
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	6078      	str	r0, [r7, #4]
 800ea68:	460b      	mov	r3, r1
 800ea6a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	78fa      	ldrb	r2, [r7, #3]
 800ea70:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800ea72:	2300      	movs	r3, #0
}
 800ea74:	4618      	mov	r0, r3
 800ea76:	370c      	adds	r7, #12
 800ea78:	46bd      	mov	sp, r7
 800ea7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea7e:	4770      	bx	lr

0800ea80 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800ea80:	b480      	push	{r7}
 800ea82:	b083      	sub	sp, #12
 800ea84:	af00      	add	r7, sp, #0
 800ea86:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	2204      	movs	r2, #4
 800ea98:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800ea9c:	2300      	movs	r3, #0
}
 800ea9e:	4618      	mov	r0, r3
 800eaa0:	370c      	adds	r7, #12
 800eaa2:	46bd      	mov	sp, r7
 800eaa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa8:	4770      	bx	lr

0800eaaa <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800eaaa:	b480      	push	{r7}
 800eaac:	b083      	sub	sp, #12
 800eaae:	af00      	add	r7, sp, #0
 800eab0:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800eabe:	2300      	movs	r3, #0
}
 800eac0:	4618      	mov	r0, r3
 800eac2:	370c      	adds	r7, #12
 800eac4:	46bd      	mov	sp, r7
 800eac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaca:	4770      	bx	lr

0800eacc <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800eacc:	b580      	push	{r7, lr}
 800eace:	b082      	sub	sp, #8
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800eada:	2b03      	cmp	r3, #3
 800eadc:	d10b      	bne.n	800eaf6 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800eae4:	69db      	ldr	r3, [r3, #28]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d005      	beq.n	800eaf6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800eaf0:	69db      	ldr	r3, [r3, #28]
 800eaf2:	6878      	ldr	r0, [r7, #4]
 800eaf4:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800eaf6:	2300      	movs	r3, #0
}
 800eaf8:	4618      	mov	r0, r3
 800eafa:	3708      	adds	r7, #8
 800eafc:	46bd      	mov	sp, r7
 800eafe:	bd80      	pop	{r7, pc}

0800eb00 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800eb00:	b480      	push	{r7}
 800eb02:	b083      	sub	sp, #12
 800eb04:	af00      	add	r7, sp, #0
 800eb06:	6078      	str	r0, [r7, #4]
 800eb08:	460b      	mov	r3, r1
 800eb0a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800eb0c:	2300      	movs	r3, #0
}
 800eb0e:	4618      	mov	r0, r3
 800eb10:	370c      	adds	r7, #12
 800eb12:	46bd      	mov	sp, r7
 800eb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb18:	4770      	bx	lr

0800eb1a <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800eb1a:	b480      	push	{r7}
 800eb1c:	b083      	sub	sp, #12
 800eb1e:	af00      	add	r7, sp, #0
 800eb20:	6078      	str	r0, [r7, #4]
 800eb22:	460b      	mov	r3, r1
 800eb24:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800eb26:	2300      	movs	r3, #0
}
 800eb28:	4618      	mov	r0, r3
 800eb2a:	370c      	adds	r7, #12
 800eb2c:	46bd      	mov	sp, r7
 800eb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb32:	4770      	bx	lr

0800eb34 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 800eb34:	b480      	push	{r7}
 800eb36:	b083      	sub	sp, #12
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800eb3c:	2300      	movs	r3, #0
}
 800eb3e:	4618      	mov	r0, r3
 800eb40:	370c      	adds	r7, #12
 800eb42:	46bd      	mov	sp, r7
 800eb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb48:	4770      	bx	lr

0800eb4a <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 800eb4a:	b580      	push	{r7, lr}
 800eb4c:	b082      	sub	sp, #8
 800eb4e:	af00      	add	r7, sp, #0
 800eb50:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	2201      	movs	r2, #1
 800eb56:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800eb60:	685b      	ldr	r3, [r3, #4]
 800eb62:	687a      	ldr	r2, [r7, #4]
 800eb64:	6852      	ldr	r2, [r2, #4]
 800eb66:	b2d2      	uxtb	r2, r2
 800eb68:	4611      	mov	r1, r2
 800eb6a:	6878      	ldr	r0, [r7, #4]
 800eb6c:	4798      	blx	r3

  return USBD_OK;
 800eb6e:	2300      	movs	r3, #0
}
 800eb70:	4618      	mov	r0, r3
 800eb72:	3708      	adds	r7, #8
 800eb74:	46bd      	mov	sp, r7
 800eb76:	bd80      	pop	{r7, pc}

0800eb78 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800eb78:	b580      	push	{r7, lr}
 800eb7a:	b084      	sub	sp, #16
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	6078      	str	r0, [r7, #4]
 800eb80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800eb82:	2300      	movs	r3, #0
 800eb84:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800eb86:	683b      	ldr	r3, [r7, #0]
 800eb88:	781b      	ldrb	r3, [r3, #0]
 800eb8a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800eb8e:	2b20      	cmp	r3, #32
 800eb90:	d004      	beq.n	800eb9c <USBD_StdDevReq+0x24>
 800eb92:	2b40      	cmp	r3, #64	; 0x40
 800eb94:	d002      	beq.n	800eb9c <USBD_StdDevReq+0x24>
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d008      	beq.n	800ebac <USBD_StdDevReq+0x34>
 800eb9a:	e04c      	b.n	800ec36 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800eba2:	689b      	ldr	r3, [r3, #8]
 800eba4:	6839      	ldr	r1, [r7, #0]
 800eba6:	6878      	ldr	r0, [r7, #4]
 800eba8:	4798      	blx	r3
    break;
 800ebaa:	e049      	b.n	800ec40 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 800ebac:	683b      	ldr	r3, [r7, #0]
 800ebae:	785b      	ldrb	r3, [r3, #1]
 800ebb0:	2b09      	cmp	r3, #9
 800ebb2:	d83a      	bhi.n	800ec2a <USBD_StdDevReq+0xb2>
 800ebb4:	a201      	add	r2, pc, #4	; (adr r2, 800ebbc <USBD_StdDevReq+0x44>)
 800ebb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebba:	bf00      	nop
 800ebbc:	0800ec0d 	.word	0x0800ec0d
 800ebc0:	0800ec21 	.word	0x0800ec21
 800ebc4:	0800ec2b 	.word	0x0800ec2b
 800ebc8:	0800ec17 	.word	0x0800ec17
 800ebcc:	0800ec2b 	.word	0x0800ec2b
 800ebd0:	0800ebef 	.word	0x0800ebef
 800ebd4:	0800ebe5 	.word	0x0800ebe5
 800ebd8:	0800ec2b 	.word	0x0800ec2b
 800ebdc:	0800ec03 	.word	0x0800ec03
 800ebe0:	0800ebf9 	.word	0x0800ebf9
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 800ebe4:	6839      	ldr	r1, [r7, #0]
 800ebe6:	6878      	ldr	r0, [r7, #4]
 800ebe8:	f000 f9d2 	bl	800ef90 <USBD_GetDescriptor>
      break;
 800ebec:	e022      	b.n	800ec34 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800ebee:	6839      	ldr	r1, [r7, #0]
 800ebf0:	6878      	ldr	r0, [r7, #4]
 800ebf2:	f000 fac7 	bl	800f184 <USBD_SetAddress>
      break;
 800ebf6:	e01d      	b.n	800ec34 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800ebf8:	6839      	ldr	r1, [r7, #0]
 800ebfa:	6878      	ldr	r0, [r7, #4]
 800ebfc:	f000 fb04 	bl	800f208 <USBD_SetConfig>
      break;
 800ec00:	e018      	b.n	800ec34 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800ec02:	6839      	ldr	r1, [r7, #0]
 800ec04:	6878      	ldr	r0, [r7, #4]
 800ec06:	f000 fb8d 	bl	800f324 <USBD_GetConfig>
      break;
 800ec0a:	e013      	b.n	800ec34 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 800ec0c:	6839      	ldr	r1, [r7, #0]
 800ec0e:	6878      	ldr	r0, [r7, #4]
 800ec10:	f000 fbbc 	bl	800f38c <USBD_GetStatus>
      break;
 800ec14:	e00e      	b.n	800ec34 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800ec16:	6839      	ldr	r1, [r7, #0]
 800ec18:	6878      	ldr	r0, [r7, #4]
 800ec1a:	f000 fbea 	bl	800f3f2 <USBD_SetFeature>
      break;
 800ec1e:	e009      	b.n	800ec34 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 800ec20:	6839      	ldr	r1, [r7, #0]
 800ec22:	6878      	ldr	r0, [r7, #4]
 800ec24:	f000 fbf9 	bl	800f41a <USBD_ClrFeature>
      break;
 800ec28:	e004      	b.n	800ec34 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800ec2a:	6839      	ldr	r1, [r7, #0]
 800ec2c:	6878      	ldr	r0, [r7, #4]
 800ec2e:	f000 fc52 	bl	800f4d6 <USBD_CtlError>
      break;
 800ec32:	bf00      	nop
    }
    break;
 800ec34:	e004      	b.n	800ec40 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800ec36:	6839      	ldr	r1, [r7, #0]
 800ec38:	6878      	ldr	r0, [r7, #4]
 800ec3a:	f000 fc4c 	bl	800f4d6 <USBD_CtlError>
    break;
 800ec3e:	bf00      	nop
  }

  return ret;
 800ec40:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec42:	4618      	mov	r0, r3
 800ec44:	3710      	adds	r7, #16
 800ec46:	46bd      	mov	sp, r7
 800ec48:	bd80      	pop	{r7, pc}
 800ec4a:	bf00      	nop

0800ec4c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800ec4c:	b580      	push	{r7, lr}
 800ec4e:	b084      	sub	sp, #16
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	6078      	str	r0, [r7, #4]
 800ec54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ec56:	2300      	movs	r3, #0
 800ec58:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ec5a:	683b      	ldr	r3, [r7, #0]
 800ec5c:	781b      	ldrb	r3, [r3, #0]
 800ec5e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ec62:	2b20      	cmp	r3, #32
 800ec64:	d003      	beq.n	800ec6e <USBD_StdItfReq+0x22>
 800ec66:	2b40      	cmp	r3, #64	; 0x40
 800ec68:	d001      	beq.n	800ec6e <USBD_StdItfReq+0x22>
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d12a      	bne.n	800ecc4 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ec74:	3b01      	subs	r3, #1
 800ec76:	2b02      	cmp	r3, #2
 800ec78:	d81d      	bhi.n	800ecb6 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ec7a:	683b      	ldr	r3, [r7, #0]
 800ec7c:	889b      	ldrh	r3, [r3, #4]
 800ec7e:	b2db      	uxtb	r3, r3
 800ec80:	2b01      	cmp	r3, #1
 800ec82:	d813      	bhi.n	800ecac <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ec8a:	689b      	ldr	r3, [r3, #8]
 800ec8c:	6839      	ldr	r1, [r7, #0]
 800ec8e:	6878      	ldr	r0, [r7, #4]
 800ec90:	4798      	blx	r3
 800ec92:	4603      	mov	r3, r0
 800ec94:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800ec96:	683b      	ldr	r3, [r7, #0]
 800ec98:	88db      	ldrh	r3, [r3, #6]
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d110      	bne.n	800ecc0 <USBD_StdItfReq+0x74>
 800ec9e:	7bfb      	ldrb	r3, [r7, #15]
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d10d      	bne.n	800ecc0 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 800eca4:	6878      	ldr	r0, [r7, #4]
 800eca6:	f000 fcdf 	bl	800f668 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800ecaa:	e009      	b.n	800ecc0 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800ecac:	6839      	ldr	r1, [r7, #0]
 800ecae:	6878      	ldr	r0, [r7, #4]
 800ecb0:	f000 fc11 	bl	800f4d6 <USBD_CtlError>
      break;
 800ecb4:	e004      	b.n	800ecc0 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800ecb6:	6839      	ldr	r1, [r7, #0]
 800ecb8:	6878      	ldr	r0, [r7, #4]
 800ecba:	f000 fc0c 	bl	800f4d6 <USBD_CtlError>
      break;
 800ecbe:	e000      	b.n	800ecc2 <USBD_StdItfReq+0x76>
      break;
 800ecc0:	bf00      	nop
    }
    break;
 800ecc2:	e004      	b.n	800ecce <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800ecc4:	6839      	ldr	r1, [r7, #0]
 800ecc6:	6878      	ldr	r0, [r7, #4]
 800ecc8:	f000 fc05 	bl	800f4d6 <USBD_CtlError>
    break;
 800eccc:	bf00      	nop
  }

  return USBD_OK;
 800ecce:	2300      	movs	r3, #0
}
 800ecd0:	4618      	mov	r0, r3
 800ecd2:	3710      	adds	r7, #16
 800ecd4:	46bd      	mov	sp, r7
 800ecd6:	bd80      	pop	{r7, pc}

0800ecd8 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800ecd8:	b580      	push	{r7, lr}
 800ecda:	b084      	sub	sp, #16
 800ecdc:	af00      	add	r7, sp, #0
 800ecde:	6078      	str	r0, [r7, #4]
 800ece0:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800ece2:	2300      	movs	r3, #0
 800ece4:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800ece6:	683b      	ldr	r3, [r7, #0]
 800ece8:	889b      	ldrh	r3, [r3, #4]
 800ecea:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ecec:	683b      	ldr	r3, [r7, #0]
 800ecee:	781b      	ldrb	r3, [r3, #0]
 800ecf0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ecf4:	2b20      	cmp	r3, #32
 800ecf6:	d004      	beq.n	800ed02 <USBD_StdEPReq+0x2a>
 800ecf8:	2b40      	cmp	r3, #64	; 0x40
 800ecfa:	d002      	beq.n	800ed02 <USBD_StdEPReq+0x2a>
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d008      	beq.n	800ed12 <USBD_StdEPReq+0x3a>
 800ed00:	e13b      	b.n	800ef7a <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ed08:	689b      	ldr	r3, [r3, #8]
 800ed0a:	6839      	ldr	r1, [r7, #0]
 800ed0c:	6878      	ldr	r0, [r7, #4]
 800ed0e:	4798      	blx	r3
    break;
 800ed10:	e138      	b.n	800ef84 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 800ed12:	683b      	ldr	r3, [r7, #0]
 800ed14:	781b      	ldrb	r3, [r3, #0]
 800ed16:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ed1a:	2b20      	cmp	r3, #32
 800ed1c:	d10a      	bne.n	800ed34 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ed24:	689b      	ldr	r3, [r3, #8]
 800ed26:	6839      	ldr	r1, [r7, #0]
 800ed28:	6878      	ldr	r0, [r7, #4]
 800ed2a:	4798      	blx	r3
 800ed2c:	4603      	mov	r3, r0
 800ed2e:	73fb      	strb	r3, [r7, #15]

      return ret;
 800ed30:	7bfb      	ldrb	r3, [r7, #15]
 800ed32:	e128      	b.n	800ef86 <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 800ed34:	683b      	ldr	r3, [r7, #0]
 800ed36:	785b      	ldrb	r3, [r3, #1]
 800ed38:	2b01      	cmp	r3, #1
 800ed3a:	d03e      	beq.n	800edba <USBD_StdEPReq+0xe2>
 800ed3c:	2b03      	cmp	r3, #3
 800ed3e:	d002      	beq.n	800ed46 <USBD_StdEPReq+0x6e>
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d070      	beq.n	800ee26 <USBD_StdEPReq+0x14e>
 800ed44:	e113      	b.n	800ef6e <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ed4c:	2b02      	cmp	r3, #2
 800ed4e:	d002      	beq.n	800ed56 <USBD_StdEPReq+0x7e>
 800ed50:	2b03      	cmp	r3, #3
 800ed52:	d015      	beq.n	800ed80 <USBD_StdEPReq+0xa8>
 800ed54:	e02b      	b.n	800edae <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ed56:	7bbb      	ldrb	r3, [r7, #14]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d00c      	beq.n	800ed76 <USBD_StdEPReq+0x9e>
 800ed5c:	7bbb      	ldrb	r3, [r7, #14]
 800ed5e:	2b80      	cmp	r3, #128	; 0x80
 800ed60:	d009      	beq.n	800ed76 <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800ed62:	7bbb      	ldrb	r3, [r7, #14]
 800ed64:	4619      	mov	r1, r3
 800ed66:	6878      	ldr	r0, [r7, #4]
 800ed68:	f004 fa72 	bl	8013250 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800ed6c:	2180      	movs	r1, #128	; 0x80
 800ed6e:	6878      	ldr	r0, [r7, #4]
 800ed70:	f004 fa6e 	bl	8013250 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800ed74:	e020      	b.n	800edb8 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 800ed76:	6839      	ldr	r1, [r7, #0]
 800ed78:	6878      	ldr	r0, [r7, #4]
 800ed7a:	f000 fbac 	bl	800f4d6 <USBD_CtlError>
        break;
 800ed7e:	e01b      	b.n	800edb8 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800ed80:	683b      	ldr	r3, [r7, #0]
 800ed82:	885b      	ldrh	r3, [r3, #2]
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d10e      	bne.n	800eda6 <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ed88:	7bbb      	ldrb	r3, [r7, #14]
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d00b      	beq.n	800eda6 <USBD_StdEPReq+0xce>
 800ed8e:	7bbb      	ldrb	r3, [r7, #14]
 800ed90:	2b80      	cmp	r3, #128	; 0x80
 800ed92:	d008      	beq.n	800eda6 <USBD_StdEPReq+0xce>
 800ed94:	683b      	ldr	r3, [r7, #0]
 800ed96:	88db      	ldrh	r3, [r3, #6]
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d104      	bne.n	800eda6 <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 800ed9c:	7bbb      	ldrb	r3, [r7, #14]
 800ed9e:	4619      	mov	r1, r3
 800eda0:	6878      	ldr	r0, [r7, #4]
 800eda2:	f004 fa55 	bl	8013250 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800eda6:	6878      	ldr	r0, [r7, #4]
 800eda8:	f000 fc5e 	bl	800f668 <USBD_CtlSendStatus>

        break;
 800edac:	e004      	b.n	800edb8 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 800edae:	6839      	ldr	r1, [r7, #0]
 800edb0:	6878      	ldr	r0, [r7, #4]
 800edb2:	f000 fb90 	bl	800f4d6 <USBD_CtlError>
        break;
 800edb6:	bf00      	nop
      }
      break;
 800edb8:	e0de      	b.n	800ef78 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800edc0:	2b02      	cmp	r3, #2
 800edc2:	d002      	beq.n	800edca <USBD_StdEPReq+0xf2>
 800edc4:	2b03      	cmp	r3, #3
 800edc6:	d015      	beq.n	800edf4 <USBD_StdEPReq+0x11c>
 800edc8:	e026      	b.n	800ee18 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800edca:	7bbb      	ldrb	r3, [r7, #14]
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d00c      	beq.n	800edea <USBD_StdEPReq+0x112>
 800edd0:	7bbb      	ldrb	r3, [r7, #14]
 800edd2:	2b80      	cmp	r3, #128	; 0x80
 800edd4:	d009      	beq.n	800edea <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800edd6:	7bbb      	ldrb	r3, [r7, #14]
 800edd8:	4619      	mov	r1, r3
 800edda:	6878      	ldr	r0, [r7, #4]
 800eddc:	f004 fa38 	bl	8013250 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800ede0:	2180      	movs	r1, #128	; 0x80
 800ede2:	6878      	ldr	r0, [r7, #4]
 800ede4:	f004 fa34 	bl	8013250 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800ede8:	e01c      	b.n	800ee24 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 800edea:	6839      	ldr	r1, [r7, #0]
 800edec:	6878      	ldr	r0, [r7, #4]
 800edee:	f000 fb72 	bl	800f4d6 <USBD_CtlError>
        break;
 800edf2:	e017      	b.n	800ee24 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800edf4:	683b      	ldr	r3, [r7, #0]
 800edf6:	885b      	ldrh	r3, [r3, #2]
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d112      	bne.n	800ee22 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800edfc:	7bbb      	ldrb	r3, [r7, #14]
 800edfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d004      	beq.n	800ee10 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800ee06:	7bbb      	ldrb	r3, [r7, #14]
 800ee08:	4619      	mov	r1, r3
 800ee0a:	6878      	ldr	r0, [r7, #4]
 800ee0c:	f004 fa3f 	bl	801328e <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 800ee10:	6878      	ldr	r0, [r7, #4]
 800ee12:	f000 fc29 	bl	800f668 <USBD_CtlSendStatus>
        }
        break;
 800ee16:	e004      	b.n	800ee22 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 800ee18:	6839      	ldr	r1, [r7, #0]
 800ee1a:	6878      	ldr	r0, [r7, #4]
 800ee1c:	f000 fb5b 	bl	800f4d6 <USBD_CtlError>
        break;
 800ee20:	e000      	b.n	800ee24 <USBD_StdEPReq+0x14c>
        break;
 800ee22:	bf00      	nop
      }
      break;
 800ee24:	e0a8      	b.n	800ef78 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ee2c:	2b02      	cmp	r3, #2
 800ee2e:	d002      	beq.n	800ee36 <USBD_StdEPReq+0x15e>
 800ee30:	2b03      	cmp	r3, #3
 800ee32:	d031      	beq.n	800ee98 <USBD_StdEPReq+0x1c0>
 800ee34:	e095      	b.n	800ef62 <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ee36:	7bbb      	ldrb	r3, [r7, #14]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d007      	beq.n	800ee4c <USBD_StdEPReq+0x174>
 800ee3c:	7bbb      	ldrb	r3, [r7, #14]
 800ee3e:	2b80      	cmp	r3, #128	; 0x80
 800ee40:	d004      	beq.n	800ee4c <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 800ee42:	6839      	ldr	r1, [r7, #0]
 800ee44:	6878      	ldr	r0, [r7, #4]
 800ee46:	f000 fb46 	bl	800f4d6 <USBD_CtlError>
          break;
 800ee4a:	e08f      	b.n	800ef6c <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800ee4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	da0b      	bge.n	800ee6c <USBD_StdEPReq+0x194>
 800ee54:	7bbb      	ldrb	r3, [r7, #14]
 800ee56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ee5a:	4613      	mov	r3, r2
 800ee5c:	009b      	lsls	r3, r3, #2
 800ee5e:	4413      	add	r3, r2
 800ee60:	009b      	lsls	r3, r3, #2
 800ee62:	3310      	adds	r3, #16
 800ee64:	687a      	ldr	r2, [r7, #4]
 800ee66:	4413      	add	r3, r2
 800ee68:	3304      	adds	r3, #4
 800ee6a:	e00a      	b.n	800ee82 <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 800ee6c:	7bbb      	ldrb	r3, [r7, #14]
 800ee6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800ee72:	4613      	mov	r3, r2
 800ee74:	009b      	lsls	r3, r3, #2
 800ee76:	4413      	add	r3, r2
 800ee78:	009b      	lsls	r3, r3, #2
 800ee7a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800ee7e:	687a      	ldr	r2, [r7, #4]
 800ee80:	4413      	add	r3, r2
 800ee82:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 800ee84:	68bb      	ldr	r3, [r7, #8]
 800ee86:	2200      	movs	r2, #0
 800ee88:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ee8a:	68bb      	ldr	r3, [r7, #8]
 800ee8c:	2202      	movs	r2, #2
 800ee8e:	4619      	mov	r1, r3
 800ee90:	6878      	ldr	r0, [r7, #4]
 800ee92:	f000 fb8b 	bl	800f5ac <USBD_CtlSendData>
          break;
 800ee96:	e069      	b.n	800ef6c <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800ee98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	da11      	bge.n	800eec4 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800eea0:	7bbb      	ldrb	r3, [r7, #14]
 800eea2:	f003 020f 	and.w	r2, r3, #15
 800eea6:	6879      	ldr	r1, [r7, #4]
 800eea8:	4613      	mov	r3, r2
 800eeaa:	009b      	lsls	r3, r3, #2
 800eeac:	4413      	add	r3, r2
 800eeae:	009b      	lsls	r3, r3, #2
 800eeb0:	440b      	add	r3, r1
 800eeb2:	3318      	adds	r3, #24
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d117      	bne.n	800eeea <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800eeba:	6839      	ldr	r1, [r7, #0]
 800eebc:	6878      	ldr	r0, [r7, #4]
 800eebe:	f000 fb0a 	bl	800f4d6 <USBD_CtlError>
            break;
 800eec2:	e053      	b.n	800ef6c <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800eec4:	7bbb      	ldrb	r3, [r7, #14]
 800eec6:	f003 020f 	and.w	r2, r3, #15
 800eeca:	6879      	ldr	r1, [r7, #4]
 800eecc:	4613      	mov	r3, r2
 800eece:	009b      	lsls	r3, r3, #2
 800eed0:	4413      	add	r3, r2
 800eed2:	009b      	lsls	r3, r3, #2
 800eed4:	440b      	add	r3, r1
 800eed6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d104      	bne.n	800eeea <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800eee0:	6839      	ldr	r1, [r7, #0]
 800eee2:	6878      	ldr	r0, [r7, #4]
 800eee4:	f000 faf7 	bl	800f4d6 <USBD_CtlError>
            break;
 800eee8:	e040      	b.n	800ef6c <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800eeea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	da0b      	bge.n	800ef0a <USBD_StdEPReq+0x232>
 800eef2:	7bbb      	ldrb	r3, [r7, #14]
 800eef4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800eef8:	4613      	mov	r3, r2
 800eefa:	009b      	lsls	r3, r3, #2
 800eefc:	4413      	add	r3, r2
 800eefe:	009b      	lsls	r3, r3, #2
 800ef00:	3310      	adds	r3, #16
 800ef02:	687a      	ldr	r2, [r7, #4]
 800ef04:	4413      	add	r3, r2
 800ef06:	3304      	adds	r3, #4
 800ef08:	e00a      	b.n	800ef20 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 800ef0a:	7bbb      	ldrb	r3, [r7, #14]
 800ef0c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800ef10:	4613      	mov	r3, r2
 800ef12:	009b      	lsls	r3, r3, #2
 800ef14:	4413      	add	r3, r2
 800ef16:	009b      	lsls	r3, r3, #2
 800ef18:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800ef1c:	687a      	ldr	r2, [r7, #4]
 800ef1e:	4413      	add	r3, r2
 800ef20:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ef22:	7bbb      	ldrb	r3, [r7, #14]
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d002      	beq.n	800ef2e <USBD_StdEPReq+0x256>
 800ef28:	7bbb      	ldrb	r3, [r7, #14]
 800ef2a:	2b80      	cmp	r3, #128	; 0x80
 800ef2c:	d103      	bne.n	800ef36 <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 800ef2e:	68bb      	ldr	r3, [r7, #8]
 800ef30:	2200      	movs	r2, #0
 800ef32:	601a      	str	r2, [r3, #0]
 800ef34:	e00e      	b.n	800ef54 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800ef36:	7bbb      	ldrb	r3, [r7, #14]
 800ef38:	4619      	mov	r1, r3
 800ef3a:	6878      	ldr	r0, [r7, #4]
 800ef3c:	f004 f9c6 	bl	80132cc <USBD_LL_IsStallEP>
 800ef40:	4603      	mov	r3, r0
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d003      	beq.n	800ef4e <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 800ef46:	68bb      	ldr	r3, [r7, #8]
 800ef48:	2201      	movs	r2, #1
 800ef4a:	601a      	str	r2, [r3, #0]
 800ef4c:	e002      	b.n	800ef54 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 800ef4e:	68bb      	ldr	r3, [r7, #8]
 800ef50:	2200      	movs	r2, #0
 800ef52:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ef54:	68bb      	ldr	r3, [r7, #8]
 800ef56:	2202      	movs	r2, #2
 800ef58:	4619      	mov	r1, r3
 800ef5a:	6878      	ldr	r0, [r7, #4]
 800ef5c:	f000 fb26 	bl	800f5ac <USBD_CtlSendData>
          break;
 800ef60:	e004      	b.n	800ef6c <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 800ef62:	6839      	ldr	r1, [r7, #0]
 800ef64:	6878      	ldr	r0, [r7, #4]
 800ef66:	f000 fab6 	bl	800f4d6 <USBD_CtlError>
        break;
 800ef6a:	bf00      	nop
      }
      break;
 800ef6c:	e004      	b.n	800ef78 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 800ef6e:	6839      	ldr	r1, [r7, #0]
 800ef70:	6878      	ldr	r0, [r7, #4]
 800ef72:	f000 fab0 	bl	800f4d6 <USBD_CtlError>
      break;
 800ef76:	bf00      	nop
    }
    break;
 800ef78:	e004      	b.n	800ef84 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 800ef7a:	6839      	ldr	r1, [r7, #0]
 800ef7c:	6878      	ldr	r0, [r7, #4]
 800ef7e:	f000 faaa 	bl	800f4d6 <USBD_CtlError>
    break;
 800ef82:	bf00      	nop
  }

  return ret;
 800ef84:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef86:	4618      	mov	r0, r3
 800ef88:	3710      	adds	r7, #16
 800ef8a:	46bd      	mov	sp, r7
 800ef8c:	bd80      	pop	{r7, pc}
	...

0800ef90 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 800ef90:	b580      	push	{r7, lr}
 800ef92:	b084      	sub	sp, #16
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	6078      	str	r0, [r7, #4]
 800ef98:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800ef9a:	683b      	ldr	r3, [r7, #0]
 800ef9c:	885b      	ldrh	r3, [r3, #2]
 800ef9e:	0a1b      	lsrs	r3, r3, #8
 800efa0:	b29b      	uxth	r3, r3
 800efa2:	3b01      	subs	r3, #1
 800efa4:	2b06      	cmp	r3, #6
 800efa6:	f200 80c9 	bhi.w	800f13c <USBD_GetDescriptor+0x1ac>
 800efaa:	a201      	add	r2, pc, #4	; (adr r2, 800efb0 <USBD_GetDescriptor+0x20>)
 800efac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efb0:	0800efcd 	.word	0x0800efcd
 800efb4:	0800efe5 	.word	0x0800efe5
 800efb8:	0800f025 	.word	0x0800f025
 800efbc:	0800f13d 	.word	0x0800f13d
 800efc0:	0800f13d 	.word	0x0800f13d
 800efc4:	0800f0e9 	.word	0x0800f0e9
 800efc8:	0800f10f 	.word	0x0800f10f
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	687a      	ldr	r2, [r7, #4]
 800efd6:	7c12      	ldrb	r2, [r2, #16]
 800efd8:	f107 010a 	add.w	r1, r7, #10
 800efdc:	4610      	mov	r0, r2
 800efde:	4798      	blx	r3
 800efe0:	60f8      	str	r0, [r7, #12]
    break;
 800efe2:	e0b0      	b.n	800f146 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	7c1b      	ldrb	r3, [r3, #16]
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d10d      	bne.n	800f008 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800eff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eff4:	f107 020a 	add.w	r2, r7, #10
 800eff8:	4610      	mov	r0, r2
 800effa:	4798      	blx	r3
 800effc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	3301      	adds	r3, #1
 800f002:	2202      	movs	r2, #2
 800f004:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800f006:	e09e      	b.n	800f146 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800f00e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f010:	f107 020a 	add.w	r2, r7, #10
 800f014:	4610      	mov	r0, r2
 800f016:	4798      	blx	r3
 800f018:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	3301      	adds	r3, #1
 800f01e:	2202      	movs	r2, #2
 800f020:	701a      	strb	r2, [r3, #0]
    break;
 800f022:	e090      	b.n	800f146 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800f024:	683b      	ldr	r3, [r7, #0]
 800f026:	885b      	ldrh	r3, [r3, #2]
 800f028:	b2db      	uxtb	r3, r3
 800f02a:	2b05      	cmp	r3, #5
 800f02c:	d856      	bhi.n	800f0dc <USBD_GetDescriptor+0x14c>
 800f02e:	a201      	add	r2, pc, #4	; (adr r2, 800f034 <USBD_GetDescriptor+0xa4>)
 800f030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f034:	0800f04d 	.word	0x0800f04d
 800f038:	0800f065 	.word	0x0800f065
 800f03c:	0800f07d 	.word	0x0800f07d
 800f040:	0800f095 	.word	0x0800f095
 800f044:	0800f0ad 	.word	0x0800f0ad
 800f048:	0800f0c5 	.word	0x0800f0c5
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800f052:	685b      	ldr	r3, [r3, #4]
 800f054:	687a      	ldr	r2, [r7, #4]
 800f056:	7c12      	ldrb	r2, [r2, #16]
 800f058:	f107 010a 	add.w	r1, r7, #10
 800f05c:	4610      	mov	r0, r2
 800f05e:	4798      	blx	r3
 800f060:	60f8      	str	r0, [r7, #12]
      break;
 800f062:	e040      	b.n	800f0e6 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800f06a:	689b      	ldr	r3, [r3, #8]
 800f06c:	687a      	ldr	r2, [r7, #4]
 800f06e:	7c12      	ldrb	r2, [r2, #16]
 800f070:	f107 010a 	add.w	r1, r7, #10
 800f074:	4610      	mov	r0, r2
 800f076:	4798      	blx	r3
 800f078:	60f8      	str	r0, [r7, #12]
      break;
 800f07a:	e034      	b.n	800f0e6 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800f082:	68db      	ldr	r3, [r3, #12]
 800f084:	687a      	ldr	r2, [r7, #4]
 800f086:	7c12      	ldrb	r2, [r2, #16]
 800f088:	f107 010a 	add.w	r1, r7, #10
 800f08c:	4610      	mov	r0, r2
 800f08e:	4798      	blx	r3
 800f090:	60f8      	str	r0, [r7, #12]
      break;
 800f092:	e028      	b.n	800f0e6 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800f09a:	691b      	ldr	r3, [r3, #16]
 800f09c:	687a      	ldr	r2, [r7, #4]
 800f09e:	7c12      	ldrb	r2, [r2, #16]
 800f0a0:	f107 010a 	add.w	r1, r7, #10
 800f0a4:	4610      	mov	r0, r2
 800f0a6:	4798      	blx	r3
 800f0a8:	60f8      	str	r0, [r7, #12]
      break;
 800f0aa:	e01c      	b.n	800f0e6 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800f0b2:	695b      	ldr	r3, [r3, #20]
 800f0b4:	687a      	ldr	r2, [r7, #4]
 800f0b6:	7c12      	ldrb	r2, [r2, #16]
 800f0b8:	f107 010a 	add.w	r1, r7, #10
 800f0bc:	4610      	mov	r0, r2
 800f0be:	4798      	blx	r3
 800f0c0:	60f8      	str	r0, [r7, #12]
      break;
 800f0c2:	e010      	b.n	800f0e6 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800f0ca:	699b      	ldr	r3, [r3, #24]
 800f0cc:	687a      	ldr	r2, [r7, #4]
 800f0ce:	7c12      	ldrb	r2, [r2, #16]
 800f0d0:	f107 010a 	add.w	r1, r7, #10
 800f0d4:	4610      	mov	r0, r2
 800f0d6:	4798      	blx	r3
 800f0d8:	60f8      	str	r0, [r7, #12]
      break;
 800f0da:	e004      	b.n	800f0e6 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 800f0dc:	6839      	ldr	r1, [r7, #0]
 800f0de:	6878      	ldr	r0, [r7, #4]
 800f0e0:	f000 f9f9 	bl	800f4d6 <USBD_CtlError>
      return;
 800f0e4:	e04b      	b.n	800f17e <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 800f0e6:	e02e      	b.n	800f146 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	7c1b      	ldrb	r3, [r3, #16]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d109      	bne.n	800f104 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800f0f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f0f8:	f107 020a 	add.w	r2, r7, #10
 800f0fc:	4610      	mov	r0, r2
 800f0fe:	4798      	blx	r3
 800f100:	60f8      	str	r0, [r7, #12]
      break;
 800f102:	e020      	b.n	800f146 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800f104:	6839      	ldr	r1, [r7, #0]
 800f106:	6878      	ldr	r0, [r7, #4]
 800f108:	f000 f9e5 	bl	800f4d6 <USBD_CtlError>
      return;
 800f10c:	e037      	b.n	800f17e <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	7c1b      	ldrb	r3, [r3, #16]
 800f112:	2b00      	cmp	r3, #0
 800f114:	d10d      	bne.n	800f132 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800f11c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f11e:	f107 020a 	add.w	r2, r7, #10
 800f122:	4610      	mov	r0, r2
 800f124:	4798      	blx	r3
 800f126:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	3301      	adds	r3, #1
 800f12c:	2207      	movs	r2, #7
 800f12e:	701a      	strb	r2, [r3, #0]
      break;
 800f130:	e009      	b.n	800f146 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800f132:	6839      	ldr	r1, [r7, #0]
 800f134:	6878      	ldr	r0, [r7, #4]
 800f136:	f000 f9ce 	bl	800f4d6 <USBD_CtlError>
      return;
 800f13a:	e020      	b.n	800f17e <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 800f13c:	6839      	ldr	r1, [r7, #0]
 800f13e:	6878      	ldr	r0, [r7, #4]
 800f140:	f000 f9c9 	bl	800f4d6 <USBD_CtlError>
    return;
 800f144:	e01b      	b.n	800f17e <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 800f146:	897b      	ldrh	r3, [r7, #10]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d011      	beq.n	800f170 <USBD_GetDescriptor+0x1e0>
 800f14c:	683b      	ldr	r3, [r7, #0]
 800f14e:	88db      	ldrh	r3, [r3, #6]
 800f150:	2b00      	cmp	r3, #0
 800f152:	d00d      	beq.n	800f170 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 800f154:	683b      	ldr	r3, [r7, #0]
 800f156:	88da      	ldrh	r2, [r3, #6]
 800f158:	897b      	ldrh	r3, [r7, #10]
 800f15a:	4293      	cmp	r3, r2
 800f15c:	bf28      	it	cs
 800f15e:	4613      	movcs	r3, r2
 800f160:	b29b      	uxth	r3, r3
 800f162:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 800f164:	897b      	ldrh	r3, [r7, #10]
 800f166:	461a      	mov	r2, r3
 800f168:	68f9      	ldr	r1, [r7, #12]
 800f16a:	6878      	ldr	r0, [r7, #4]
 800f16c:	f000 fa1e 	bl	800f5ac <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 800f170:	683b      	ldr	r3, [r7, #0]
 800f172:	88db      	ldrh	r3, [r3, #6]
 800f174:	2b00      	cmp	r3, #0
 800f176:	d102      	bne.n	800f17e <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 800f178:	6878      	ldr	r0, [r7, #4]
 800f17a:	f000 fa75 	bl	800f668 <USBD_CtlSendStatus>
  }
}
 800f17e:	3710      	adds	r7, #16
 800f180:	46bd      	mov	sp, r7
 800f182:	bd80      	pop	{r7, pc}

0800f184 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800f184:	b580      	push	{r7, lr}
 800f186:	b084      	sub	sp, #16
 800f188:	af00      	add	r7, sp, #0
 800f18a:	6078      	str	r0, [r7, #4]
 800f18c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f18e:	683b      	ldr	r3, [r7, #0]
 800f190:	889b      	ldrh	r3, [r3, #4]
 800f192:	2b00      	cmp	r3, #0
 800f194:	d130      	bne.n	800f1f8 <USBD_SetAddress+0x74>
 800f196:	683b      	ldr	r3, [r7, #0]
 800f198:	88db      	ldrh	r3, [r3, #6]
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d12c      	bne.n	800f1f8 <USBD_SetAddress+0x74>
 800f19e:	683b      	ldr	r3, [r7, #0]
 800f1a0:	885b      	ldrh	r3, [r3, #2]
 800f1a2:	2b7f      	cmp	r3, #127	; 0x7f
 800f1a4:	d828      	bhi.n	800f1f8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f1a6:	683b      	ldr	r3, [r7, #0]
 800f1a8:	885b      	ldrh	r3, [r3, #2]
 800f1aa:	b2db      	uxtb	r3, r3
 800f1ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f1b0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800f1b8:	2b03      	cmp	r3, #3
 800f1ba:	d104      	bne.n	800f1c6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 800f1bc:	6839      	ldr	r1, [r7, #0]
 800f1be:	6878      	ldr	r0, [r7, #4]
 800f1c0:	f000 f989 	bl	800f4d6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f1c4:	e01c      	b.n	800f200 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	7bfa      	ldrb	r2, [r7, #15]
 800f1ca:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f1ce:	7bfb      	ldrb	r3, [r7, #15]
 800f1d0:	4619      	mov	r1, r3
 800f1d2:	6878      	ldr	r0, [r7, #4]
 800f1d4:	f004 f8a6 	bl	8013324 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800f1d8:	6878      	ldr	r0, [r7, #4]
 800f1da:	f000 fa45 	bl	800f668 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f1de:	7bfb      	ldrb	r3, [r7, #15]
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d004      	beq.n	800f1ee <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	2202      	movs	r2, #2
 800f1e8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f1ec:	e008      	b.n	800f200 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	2201      	movs	r2, #1
 800f1f2:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f1f6:	e003      	b.n	800f200 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f1f8:	6839      	ldr	r1, [r7, #0]
 800f1fa:	6878      	ldr	r0, [r7, #4]
 800f1fc:	f000 f96b 	bl	800f4d6 <USBD_CtlError>
  }
}
 800f200:	bf00      	nop
 800f202:	3710      	adds	r7, #16
 800f204:	46bd      	mov	sp, r7
 800f206:	bd80      	pop	{r7, pc}

0800f208 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f208:	b580      	push	{r7, lr}
 800f20a:	b082      	sub	sp, #8
 800f20c:	af00      	add	r7, sp, #0
 800f20e:	6078      	str	r0, [r7, #4]
 800f210:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f212:	683b      	ldr	r3, [r7, #0]
 800f214:	885b      	ldrh	r3, [r3, #2]
 800f216:	b2da      	uxtb	r2, r3
 800f218:	4b41      	ldr	r3, [pc, #260]	; (800f320 <USBD_SetConfig+0x118>)
 800f21a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f21c:	4b40      	ldr	r3, [pc, #256]	; (800f320 <USBD_SetConfig+0x118>)
 800f21e:	781b      	ldrb	r3, [r3, #0]
 800f220:	2b01      	cmp	r3, #1
 800f222:	d904      	bls.n	800f22e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800f224:	6839      	ldr	r1, [r7, #0]
 800f226:	6878      	ldr	r0, [r7, #4]
 800f228:	f000 f955 	bl	800f4d6 <USBD_CtlError>
 800f22c:	e075      	b.n	800f31a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800f234:	2b02      	cmp	r3, #2
 800f236:	d002      	beq.n	800f23e <USBD_SetConfig+0x36>
 800f238:	2b03      	cmp	r3, #3
 800f23a:	d023      	beq.n	800f284 <USBD_SetConfig+0x7c>
 800f23c:	e062      	b.n	800f304 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 800f23e:	4b38      	ldr	r3, [pc, #224]	; (800f320 <USBD_SetConfig+0x118>)
 800f240:	781b      	ldrb	r3, [r3, #0]
 800f242:	2b00      	cmp	r3, #0
 800f244:	d01a      	beq.n	800f27c <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800f246:	4b36      	ldr	r3, [pc, #216]	; (800f320 <USBD_SetConfig+0x118>)
 800f248:	781b      	ldrb	r3, [r3, #0]
 800f24a:	461a      	mov	r2, r3
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	2203      	movs	r2, #3
 800f254:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800f258:	4b31      	ldr	r3, [pc, #196]	; (800f320 <USBD_SetConfig+0x118>)
 800f25a:	781b      	ldrb	r3, [r3, #0]
 800f25c:	4619      	mov	r1, r3
 800f25e:	6878      	ldr	r0, [r7, #4]
 800f260:	f7ff fa2a 	bl	800e6b8 <USBD_SetClassConfig>
 800f264:	4603      	mov	r3, r0
 800f266:	2b02      	cmp	r3, #2
 800f268:	d104      	bne.n	800f274 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 800f26a:	6839      	ldr	r1, [r7, #0]
 800f26c:	6878      	ldr	r0, [r7, #4]
 800f26e:	f000 f932 	bl	800f4d6 <USBD_CtlError>
          return;
 800f272:	e052      	b.n	800f31a <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 800f274:	6878      	ldr	r0, [r7, #4]
 800f276:	f000 f9f7 	bl	800f668 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800f27a:	e04e      	b.n	800f31a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800f27c:	6878      	ldr	r0, [r7, #4]
 800f27e:	f000 f9f3 	bl	800f668 <USBD_CtlSendStatus>
      break;
 800f282:	e04a      	b.n	800f31a <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800f284:	4b26      	ldr	r3, [pc, #152]	; (800f320 <USBD_SetConfig+0x118>)
 800f286:	781b      	ldrb	r3, [r3, #0]
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d112      	bne.n	800f2b2 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	2202      	movs	r2, #2
 800f290:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800f294:	4b22      	ldr	r3, [pc, #136]	; (800f320 <USBD_SetConfig+0x118>)
 800f296:	781b      	ldrb	r3, [r3, #0]
 800f298:	461a      	mov	r2, r3
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800f29e:	4b20      	ldr	r3, [pc, #128]	; (800f320 <USBD_SetConfig+0x118>)
 800f2a0:	781b      	ldrb	r3, [r3, #0]
 800f2a2:	4619      	mov	r1, r3
 800f2a4:	6878      	ldr	r0, [r7, #4]
 800f2a6:	f7ff fa26 	bl	800e6f6 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800f2aa:	6878      	ldr	r0, [r7, #4]
 800f2ac:	f000 f9dc 	bl	800f668 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800f2b0:	e033      	b.n	800f31a <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 800f2b2:	4b1b      	ldr	r3, [pc, #108]	; (800f320 <USBD_SetConfig+0x118>)
 800f2b4:	781b      	ldrb	r3, [r3, #0]
 800f2b6:	461a      	mov	r2, r3
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	685b      	ldr	r3, [r3, #4]
 800f2bc:	429a      	cmp	r2, r3
 800f2be:	d01d      	beq.n	800f2fc <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	685b      	ldr	r3, [r3, #4]
 800f2c4:	b2db      	uxtb	r3, r3
 800f2c6:	4619      	mov	r1, r3
 800f2c8:	6878      	ldr	r0, [r7, #4]
 800f2ca:	f7ff fa14 	bl	800e6f6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f2ce:	4b14      	ldr	r3, [pc, #80]	; (800f320 <USBD_SetConfig+0x118>)
 800f2d0:	781b      	ldrb	r3, [r3, #0]
 800f2d2:	461a      	mov	r2, r3
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800f2d8:	4b11      	ldr	r3, [pc, #68]	; (800f320 <USBD_SetConfig+0x118>)
 800f2da:	781b      	ldrb	r3, [r3, #0]
 800f2dc:	4619      	mov	r1, r3
 800f2de:	6878      	ldr	r0, [r7, #4]
 800f2e0:	f7ff f9ea 	bl	800e6b8 <USBD_SetClassConfig>
 800f2e4:	4603      	mov	r3, r0
 800f2e6:	2b02      	cmp	r3, #2
 800f2e8:	d104      	bne.n	800f2f4 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800f2ea:	6839      	ldr	r1, [r7, #0]
 800f2ec:	6878      	ldr	r0, [r7, #4]
 800f2ee:	f000 f8f2 	bl	800f4d6 <USBD_CtlError>
          return;
 800f2f2:	e012      	b.n	800f31a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800f2f4:	6878      	ldr	r0, [r7, #4]
 800f2f6:	f000 f9b7 	bl	800f668 <USBD_CtlSendStatus>
      break;
 800f2fa:	e00e      	b.n	800f31a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800f2fc:	6878      	ldr	r0, [r7, #4]
 800f2fe:	f000 f9b3 	bl	800f668 <USBD_CtlSendStatus>
      break;
 800f302:	e00a      	b.n	800f31a <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 800f304:	6839      	ldr	r1, [r7, #0]
 800f306:	6878      	ldr	r0, [r7, #4]
 800f308:	f000 f8e5 	bl	800f4d6 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 800f30c:	4b04      	ldr	r3, [pc, #16]	; (800f320 <USBD_SetConfig+0x118>)
 800f30e:	781b      	ldrb	r3, [r3, #0]
 800f310:	4619      	mov	r1, r3
 800f312:	6878      	ldr	r0, [r7, #4]
 800f314:	f7ff f9ef 	bl	800e6f6 <USBD_ClrClassConfig>
      break;
 800f318:	bf00      	nop
    }
  }
}
 800f31a:	3708      	adds	r7, #8
 800f31c:	46bd      	mov	sp, r7
 800f31e:	bd80      	pop	{r7, pc}
 800f320:	20001484 	.word	0x20001484

0800f324 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f324:	b580      	push	{r7, lr}
 800f326:	b082      	sub	sp, #8
 800f328:	af00      	add	r7, sp, #0
 800f32a:	6078      	str	r0, [r7, #4]
 800f32c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f32e:	683b      	ldr	r3, [r7, #0]
 800f330:	88db      	ldrh	r3, [r3, #6]
 800f332:	2b01      	cmp	r3, #1
 800f334:	d004      	beq.n	800f340 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800f336:	6839      	ldr	r1, [r7, #0]
 800f338:	6878      	ldr	r0, [r7, #4]
 800f33a:	f000 f8cc 	bl	800f4d6 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800f33e:	e021      	b.n	800f384 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800f346:	2b01      	cmp	r3, #1
 800f348:	db17      	blt.n	800f37a <USBD_GetConfig+0x56>
 800f34a:	2b02      	cmp	r3, #2
 800f34c:	dd02      	ble.n	800f354 <USBD_GetConfig+0x30>
 800f34e:	2b03      	cmp	r3, #3
 800f350:	d00b      	beq.n	800f36a <USBD_GetConfig+0x46>
 800f352:	e012      	b.n	800f37a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	2200      	movs	r2, #0
 800f358:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	3308      	adds	r3, #8
 800f35e:	2201      	movs	r2, #1
 800f360:	4619      	mov	r1, r3
 800f362:	6878      	ldr	r0, [r7, #4]
 800f364:	f000 f922 	bl	800f5ac <USBD_CtlSendData>
      break;
 800f368:	e00c      	b.n	800f384 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	3304      	adds	r3, #4
 800f36e:	2201      	movs	r2, #1
 800f370:	4619      	mov	r1, r3
 800f372:	6878      	ldr	r0, [r7, #4]
 800f374:	f000 f91a 	bl	800f5ac <USBD_CtlSendData>
      break;
 800f378:	e004      	b.n	800f384 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 800f37a:	6839      	ldr	r1, [r7, #0]
 800f37c:	6878      	ldr	r0, [r7, #4]
 800f37e:	f000 f8aa 	bl	800f4d6 <USBD_CtlError>
      break;
 800f382:	bf00      	nop
}
 800f384:	bf00      	nop
 800f386:	3708      	adds	r7, #8
 800f388:	46bd      	mov	sp, r7
 800f38a:	bd80      	pop	{r7, pc}

0800f38c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f38c:	b580      	push	{r7, lr}
 800f38e:	b082      	sub	sp, #8
 800f390:	af00      	add	r7, sp, #0
 800f392:	6078      	str	r0, [r7, #4]
 800f394:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800f39c:	3b01      	subs	r3, #1
 800f39e:	2b02      	cmp	r3, #2
 800f3a0:	d81e      	bhi.n	800f3e0 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 800f3a2:	683b      	ldr	r3, [r7, #0]
 800f3a4:	88db      	ldrh	r3, [r3, #6]
 800f3a6:	2b02      	cmp	r3, #2
 800f3a8:	d004      	beq.n	800f3b4 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800f3aa:	6839      	ldr	r1, [r7, #0]
 800f3ac:	6878      	ldr	r0, [r7, #4]
 800f3ae:	f000 f892 	bl	800f4d6 <USBD_CtlError>
      break;
 800f3b2:	e01a      	b.n	800f3ea <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	2201      	movs	r2, #1
 800f3b8:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d005      	beq.n	800f3d0 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	68db      	ldr	r3, [r3, #12]
 800f3c8:	f043 0202 	orr.w	r2, r3, #2
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	330c      	adds	r3, #12
 800f3d4:	2202      	movs	r2, #2
 800f3d6:	4619      	mov	r1, r3
 800f3d8:	6878      	ldr	r0, [r7, #4]
 800f3da:	f000 f8e7 	bl	800f5ac <USBD_CtlSendData>
    break;
 800f3de:	e004      	b.n	800f3ea <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800f3e0:	6839      	ldr	r1, [r7, #0]
 800f3e2:	6878      	ldr	r0, [r7, #4]
 800f3e4:	f000 f877 	bl	800f4d6 <USBD_CtlError>
    break;
 800f3e8:	bf00      	nop
  }
}
 800f3ea:	bf00      	nop
 800f3ec:	3708      	adds	r7, #8
 800f3ee:	46bd      	mov	sp, r7
 800f3f0:	bd80      	pop	{r7, pc}

0800f3f2 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800f3f2:	b580      	push	{r7, lr}
 800f3f4:	b082      	sub	sp, #8
 800f3f6:	af00      	add	r7, sp, #0
 800f3f8:	6078      	str	r0, [r7, #4]
 800f3fa:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f3fc:	683b      	ldr	r3, [r7, #0]
 800f3fe:	885b      	ldrh	r3, [r3, #2]
 800f400:	2b01      	cmp	r3, #1
 800f402:	d106      	bne.n	800f412 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	2201      	movs	r2, #1
 800f408:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 800f40c:	6878      	ldr	r0, [r7, #4]
 800f40e:	f000 f92b 	bl	800f668 <USBD_CtlSendStatus>
  }

}
 800f412:	bf00      	nop
 800f414:	3708      	adds	r7, #8
 800f416:	46bd      	mov	sp, r7
 800f418:	bd80      	pop	{r7, pc}

0800f41a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800f41a:	b580      	push	{r7, lr}
 800f41c:	b082      	sub	sp, #8
 800f41e:	af00      	add	r7, sp, #0
 800f420:	6078      	str	r0, [r7, #4]
 800f422:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800f42a:	3b01      	subs	r3, #1
 800f42c:	2b02      	cmp	r3, #2
 800f42e:	d80b      	bhi.n	800f448 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f430:	683b      	ldr	r3, [r7, #0]
 800f432:	885b      	ldrh	r3, [r3, #2]
 800f434:	2b01      	cmp	r3, #1
 800f436:	d10c      	bne.n	800f452 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	2200      	movs	r2, #0
 800f43c:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800f440:	6878      	ldr	r0, [r7, #4]
 800f442:	f000 f911 	bl	800f668 <USBD_CtlSendStatus>
    }
    break;
 800f446:	e004      	b.n	800f452 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 800f448:	6839      	ldr	r1, [r7, #0]
 800f44a:	6878      	ldr	r0, [r7, #4]
 800f44c:	f000 f843 	bl	800f4d6 <USBD_CtlError>
    break;
 800f450:	e000      	b.n	800f454 <USBD_ClrFeature+0x3a>
    break;
 800f452:	bf00      	nop
  }
}
 800f454:	bf00      	nop
 800f456:	3708      	adds	r7, #8
 800f458:	46bd      	mov	sp, r7
 800f45a:	bd80      	pop	{r7, pc}

0800f45c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f45c:	b480      	push	{r7}
 800f45e:	b083      	sub	sp, #12
 800f460:	af00      	add	r7, sp, #0
 800f462:	6078      	str	r0, [r7, #4]
 800f464:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800f466:	683b      	ldr	r3, [r7, #0]
 800f468:	781a      	ldrb	r2, [r3, #0]
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800f46e:	683b      	ldr	r3, [r7, #0]
 800f470:	785a      	ldrb	r2, [r3, #1]
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800f476:	683b      	ldr	r3, [r7, #0]
 800f478:	3302      	adds	r3, #2
 800f47a:	781b      	ldrb	r3, [r3, #0]
 800f47c:	b29a      	uxth	r2, r3
 800f47e:	683b      	ldr	r3, [r7, #0]
 800f480:	3303      	adds	r3, #3
 800f482:	781b      	ldrb	r3, [r3, #0]
 800f484:	b29b      	uxth	r3, r3
 800f486:	021b      	lsls	r3, r3, #8
 800f488:	b29b      	uxth	r3, r3
 800f48a:	4413      	add	r3, r2
 800f48c:	b29a      	uxth	r2, r3
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800f492:	683b      	ldr	r3, [r7, #0]
 800f494:	3304      	adds	r3, #4
 800f496:	781b      	ldrb	r3, [r3, #0]
 800f498:	b29a      	uxth	r2, r3
 800f49a:	683b      	ldr	r3, [r7, #0]
 800f49c:	3305      	adds	r3, #5
 800f49e:	781b      	ldrb	r3, [r3, #0]
 800f4a0:	b29b      	uxth	r3, r3
 800f4a2:	021b      	lsls	r3, r3, #8
 800f4a4:	b29b      	uxth	r3, r3
 800f4a6:	4413      	add	r3, r2
 800f4a8:	b29a      	uxth	r2, r3
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800f4ae:	683b      	ldr	r3, [r7, #0]
 800f4b0:	3306      	adds	r3, #6
 800f4b2:	781b      	ldrb	r3, [r3, #0]
 800f4b4:	b29a      	uxth	r2, r3
 800f4b6:	683b      	ldr	r3, [r7, #0]
 800f4b8:	3307      	adds	r3, #7
 800f4ba:	781b      	ldrb	r3, [r3, #0]
 800f4bc:	b29b      	uxth	r3, r3
 800f4be:	021b      	lsls	r3, r3, #8
 800f4c0:	b29b      	uxth	r3, r3
 800f4c2:	4413      	add	r3, r2
 800f4c4:	b29a      	uxth	r2, r3
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	80da      	strh	r2, [r3, #6]

}
 800f4ca:	bf00      	nop
 800f4cc:	370c      	adds	r7, #12
 800f4ce:	46bd      	mov	sp, r7
 800f4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d4:	4770      	bx	lr

0800f4d6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800f4d6:	b580      	push	{r7, lr}
 800f4d8:	b082      	sub	sp, #8
 800f4da:	af00      	add	r7, sp, #0
 800f4dc:	6078      	str	r0, [r7, #4]
 800f4de:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 800f4e0:	2180      	movs	r1, #128	; 0x80
 800f4e2:	6878      	ldr	r0, [r7, #4]
 800f4e4:	f003 feb4 	bl	8013250 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800f4e8:	2100      	movs	r1, #0
 800f4ea:	6878      	ldr	r0, [r7, #4]
 800f4ec:	f003 feb0 	bl	8013250 <USBD_LL_StallEP>
}
 800f4f0:	bf00      	nop
 800f4f2:	3708      	adds	r7, #8
 800f4f4:	46bd      	mov	sp, r7
 800f4f6:	bd80      	pop	{r7, pc}

0800f4f8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f4f8:	b580      	push	{r7, lr}
 800f4fa:	b086      	sub	sp, #24
 800f4fc:	af00      	add	r7, sp, #0
 800f4fe:	60f8      	str	r0, [r7, #12]
 800f500:	60b9      	str	r1, [r7, #8]
 800f502:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f504:	2300      	movs	r3, #0
 800f506:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d032      	beq.n	800f574 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800f50e:	68f8      	ldr	r0, [r7, #12]
 800f510:	f000 f834 	bl	800f57c <USBD_GetLen>
 800f514:	4603      	mov	r3, r0
 800f516:	3301      	adds	r3, #1
 800f518:	b29b      	uxth	r3, r3
 800f51a:	005b      	lsls	r3, r3, #1
 800f51c:	b29a      	uxth	r2, r3
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800f522:	7dfb      	ldrb	r3, [r7, #23]
 800f524:	1c5a      	adds	r2, r3, #1
 800f526:	75fa      	strb	r2, [r7, #23]
 800f528:	461a      	mov	r2, r3
 800f52a:	68bb      	ldr	r3, [r7, #8]
 800f52c:	4413      	add	r3, r2
 800f52e:	687a      	ldr	r2, [r7, #4]
 800f530:	7812      	ldrb	r2, [r2, #0]
 800f532:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800f534:	7dfb      	ldrb	r3, [r7, #23]
 800f536:	1c5a      	adds	r2, r3, #1
 800f538:	75fa      	strb	r2, [r7, #23]
 800f53a:	461a      	mov	r2, r3
 800f53c:	68bb      	ldr	r3, [r7, #8]
 800f53e:	4413      	add	r3, r2
 800f540:	2203      	movs	r2, #3
 800f542:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800f544:	e012      	b.n	800f56c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	1c5a      	adds	r2, r3, #1
 800f54a:	60fa      	str	r2, [r7, #12]
 800f54c:	7dfa      	ldrb	r2, [r7, #23]
 800f54e:	1c51      	adds	r1, r2, #1
 800f550:	75f9      	strb	r1, [r7, #23]
 800f552:	4611      	mov	r1, r2
 800f554:	68ba      	ldr	r2, [r7, #8]
 800f556:	440a      	add	r2, r1
 800f558:	781b      	ldrb	r3, [r3, #0]
 800f55a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800f55c:	7dfb      	ldrb	r3, [r7, #23]
 800f55e:	1c5a      	adds	r2, r3, #1
 800f560:	75fa      	strb	r2, [r7, #23]
 800f562:	461a      	mov	r2, r3
 800f564:	68bb      	ldr	r3, [r7, #8]
 800f566:	4413      	add	r3, r2
 800f568:	2200      	movs	r2, #0
 800f56a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	781b      	ldrb	r3, [r3, #0]
 800f570:	2b00      	cmp	r3, #0
 800f572:	d1e8      	bne.n	800f546 <USBD_GetString+0x4e>
    }
  }
}
 800f574:	bf00      	nop
 800f576:	3718      	adds	r7, #24
 800f578:	46bd      	mov	sp, r7
 800f57a:	bd80      	pop	{r7, pc}

0800f57c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f57c:	b480      	push	{r7}
 800f57e:	b085      	sub	sp, #20
 800f580:	af00      	add	r7, sp, #0
 800f582:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 800f584:	2300      	movs	r3, #0
 800f586:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 800f588:	e005      	b.n	800f596 <USBD_GetLen+0x1a>
    {
        len++;
 800f58a:	7bfb      	ldrb	r3, [r7, #15]
 800f58c:	3301      	adds	r3, #1
 800f58e:	73fb      	strb	r3, [r7, #15]
        buf++;
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	3301      	adds	r3, #1
 800f594:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	781b      	ldrb	r3, [r3, #0]
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d1f5      	bne.n	800f58a <USBD_GetLen+0xe>
    }

    return len;
 800f59e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5a0:	4618      	mov	r0, r3
 800f5a2:	3714      	adds	r7, #20
 800f5a4:	46bd      	mov	sp, r7
 800f5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5aa:	4770      	bx	lr

0800f5ac <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800f5ac:	b580      	push	{r7, lr}
 800f5ae:	b084      	sub	sp, #16
 800f5b0:	af00      	add	r7, sp, #0
 800f5b2:	60f8      	str	r0, [r7, #12]
 800f5b4:	60b9      	str	r1, [r7, #8]
 800f5b6:	4613      	mov	r3, r2
 800f5b8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	2202      	movs	r2, #2
 800f5be:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800f5c2:	88fa      	ldrh	r2, [r7, #6]
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800f5c8:	88fa      	ldrh	r2, [r7, #6]
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800f5ce:	88fb      	ldrh	r3, [r7, #6]
 800f5d0:	68ba      	ldr	r2, [r7, #8]
 800f5d2:	2100      	movs	r1, #0
 800f5d4:	68f8      	ldr	r0, [r7, #12]
 800f5d6:	f003 fec4 	bl	8013362 <USBD_LL_Transmit>

  return USBD_OK;
 800f5da:	2300      	movs	r3, #0
}
 800f5dc:	4618      	mov	r0, r3
 800f5de:	3710      	adds	r7, #16
 800f5e0:	46bd      	mov	sp, r7
 800f5e2:	bd80      	pop	{r7, pc}

0800f5e4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800f5e4:	b580      	push	{r7, lr}
 800f5e6:	b084      	sub	sp, #16
 800f5e8:	af00      	add	r7, sp, #0
 800f5ea:	60f8      	str	r0, [r7, #12]
 800f5ec:	60b9      	str	r1, [r7, #8]
 800f5ee:	4613      	mov	r3, r2
 800f5f0:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800f5f2:	88fb      	ldrh	r3, [r7, #6]
 800f5f4:	68ba      	ldr	r2, [r7, #8]
 800f5f6:	2100      	movs	r1, #0
 800f5f8:	68f8      	ldr	r0, [r7, #12]
 800f5fa:	f003 feb2 	bl	8013362 <USBD_LL_Transmit>

  return USBD_OK;
 800f5fe:	2300      	movs	r3, #0
}
 800f600:	4618      	mov	r0, r3
 800f602:	3710      	adds	r7, #16
 800f604:	46bd      	mov	sp, r7
 800f606:	bd80      	pop	{r7, pc}

0800f608 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800f608:	b580      	push	{r7, lr}
 800f60a:	b084      	sub	sp, #16
 800f60c:	af00      	add	r7, sp, #0
 800f60e:	60f8      	str	r0, [r7, #12]
 800f610:	60b9      	str	r1, [r7, #8]
 800f612:	4613      	mov	r3, r2
 800f614:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	2203      	movs	r2, #3
 800f61a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800f61e:	88fa      	ldrh	r2, [r7, #6]
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800f626:	88fa      	ldrh	r2, [r7, #6]
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800f62e:	88fb      	ldrh	r3, [r7, #6]
 800f630:	68ba      	ldr	r2, [r7, #8]
 800f632:	2100      	movs	r1, #0
 800f634:	68f8      	ldr	r0, [r7, #12]
 800f636:	f003 feb7 	bl	80133a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f63a:	2300      	movs	r3, #0
}
 800f63c:	4618      	mov	r0, r3
 800f63e:	3710      	adds	r7, #16
 800f640:	46bd      	mov	sp, r7
 800f642:	bd80      	pop	{r7, pc}

0800f644 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800f644:	b580      	push	{r7, lr}
 800f646:	b084      	sub	sp, #16
 800f648:	af00      	add	r7, sp, #0
 800f64a:	60f8      	str	r0, [r7, #12]
 800f64c:	60b9      	str	r1, [r7, #8]
 800f64e:	4613      	mov	r3, r2
 800f650:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f652:	88fb      	ldrh	r3, [r7, #6]
 800f654:	68ba      	ldr	r2, [r7, #8]
 800f656:	2100      	movs	r1, #0
 800f658:	68f8      	ldr	r0, [r7, #12]
 800f65a:	f003 fea5 	bl	80133a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f65e:	2300      	movs	r3, #0
}
 800f660:	4618      	mov	r0, r3
 800f662:	3710      	adds	r7, #16
 800f664:	46bd      	mov	sp, r7
 800f666:	bd80      	pop	{r7, pc}

0800f668 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800f668:	b580      	push	{r7, lr}
 800f66a:	b082      	sub	sp, #8
 800f66c:	af00      	add	r7, sp, #0
 800f66e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	2204      	movs	r2, #4
 800f674:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f678:	2300      	movs	r3, #0
 800f67a:	2200      	movs	r2, #0
 800f67c:	2100      	movs	r1, #0
 800f67e:	6878      	ldr	r0, [r7, #4]
 800f680:	f003 fe6f 	bl	8013362 <USBD_LL_Transmit>

  return USBD_OK;
 800f684:	2300      	movs	r3, #0
}
 800f686:	4618      	mov	r0, r3
 800f688:	3708      	adds	r7, #8
 800f68a:	46bd      	mov	sp, r7
 800f68c:	bd80      	pop	{r7, pc}

0800f68e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800f68e:	b580      	push	{r7, lr}
 800f690:	b082      	sub	sp, #8
 800f692:	af00      	add	r7, sp, #0
 800f694:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	2205      	movs	r2, #5
 800f69a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800f69e:	2300      	movs	r3, #0
 800f6a0:	2200      	movs	r2, #0
 800f6a2:	2100      	movs	r1, #0
 800f6a4:	6878      	ldr	r0, [r7, #4]
 800f6a6:	f003 fe7f 	bl	80133a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f6aa:	2300      	movs	r3, #0
}
 800f6ac:	4618      	mov	r0, r3
 800f6ae:	3708      	adds	r7, #8
 800f6b0:	46bd      	mov	sp, r7
 800f6b2:	bd80      	pop	{r7, pc}

0800f6b4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800f6b4:	b480      	push	{r7}
 800f6b6:	b085      	sub	sp, #20
 800f6b8:	af00      	add	r7, sp, #0
 800f6ba:	4603      	mov	r3, r0
 800f6bc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800f6be:	2300      	movs	r3, #0
 800f6c0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800f6c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f6c6:	2b84      	cmp	r3, #132	; 0x84
 800f6c8:	d005      	beq.n	800f6d6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800f6ca:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	4413      	add	r3, r2
 800f6d2:	3303      	adds	r3, #3
 800f6d4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800f6d6:	68fb      	ldr	r3, [r7, #12]
}
 800f6d8:	4618      	mov	r0, r3
 800f6da:	3714      	adds	r7, #20
 800f6dc:	46bd      	mov	sp, r7
 800f6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e2:	4770      	bx	lr

0800f6e4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800f6e4:	b480      	push	{r7}
 800f6e6:	b083      	sub	sp, #12
 800f6e8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f6ea:	f3ef 8305 	mrs	r3, IPSR
 800f6ee:	607b      	str	r3, [r7, #4]
  return(result);
 800f6f0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	bf14      	ite	ne
 800f6f6:	2301      	movne	r3, #1
 800f6f8:	2300      	moveq	r3, #0
 800f6fa:	b2db      	uxtb	r3, r3
}
 800f6fc:	4618      	mov	r0, r3
 800f6fe:	370c      	adds	r7, #12
 800f700:	46bd      	mov	sp, r7
 800f702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f706:	4770      	bx	lr

0800f708 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800f708:	b580      	push	{r7, lr}
 800f70a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800f70c:	f001 fd56 	bl	80111bc <vTaskStartScheduler>
  
  return osOK;
 800f710:	2300      	movs	r3, #0
}
 800f712:	4618      	mov	r0, r3
 800f714:	bd80      	pop	{r7, pc}

0800f716 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800f716:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f718:	b089      	sub	sp, #36	; 0x24
 800f71a:	af04      	add	r7, sp, #16
 800f71c:	6078      	str	r0, [r7, #4]
 800f71e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	695b      	ldr	r3, [r3, #20]
 800f724:	2b00      	cmp	r3, #0
 800f726:	d020      	beq.n	800f76a <osThreadCreate+0x54>
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	699b      	ldr	r3, [r3, #24]
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d01c      	beq.n	800f76a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	685c      	ldr	r4, [r3, #4]
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	681d      	ldr	r5, [r3, #0]
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	691e      	ldr	r6, [r3, #16]
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800f742:	4618      	mov	r0, r3
 800f744:	f7ff ffb6 	bl	800f6b4 <makeFreeRtosPriority>
 800f748:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	695b      	ldr	r3, [r3, #20]
 800f74e:	687a      	ldr	r2, [r7, #4]
 800f750:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f752:	9202      	str	r2, [sp, #8]
 800f754:	9301      	str	r3, [sp, #4]
 800f756:	9100      	str	r1, [sp, #0]
 800f758:	683b      	ldr	r3, [r7, #0]
 800f75a:	4632      	mov	r2, r6
 800f75c:	4629      	mov	r1, r5
 800f75e:	4620      	mov	r0, r4
 800f760:	f001 fb71 	bl	8010e46 <xTaskCreateStatic>
 800f764:	4603      	mov	r3, r0
 800f766:	60fb      	str	r3, [r7, #12]
 800f768:	e01c      	b.n	800f7a4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	685c      	ldr	r4, [r3, #4]
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f776:	b29e      	uxth	r6, r3
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800f77e:	4618      	mov	r0, r3
 800f780:	f7ff ff98 	bl	800f6b4 <makeFreeRtosPriority>
 800f784:	4602      	mov	r2, r0
 800f786:	f107 030c 	add.w	r3, r7, #12
 800f78a:	9301      	str	r3, [sp, #4]
 800f78c:	9200      	str	r2, [sp, #0]
 800f78e:	683b      	ldr	r3, [r7, #0]
 800f790:	4632      	mov	r2, r6
 800f792:	4629      	mov	r1, r5
 800f794:	4620      	mov	r0, r4
 800f796:	f001 fbaf 	bl	8010ef8 <xTaskCreate>
 800f79a:	4603      	mov	r3, r0
 800f79c:	2b01      	cmp	r3, #1
 800f79e:	d001      	beq.n	800f7a4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800f7a0:	2300      	movs	r3, #0
 800f7a2:	e000      	b.n	800f7a6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800f7a4:	68fb      	ldr	r3, [r7, #12]
}
 800f7a6:	4618      	mov	r0, r3
 800f7a8:	3714      	adds	r7, #20
 800f7aa:	46bd      	mov	sp, r7
 800f7ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f7ae <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800f7ae:	b580      	push	{r7, lr}
 800f7b0:	b084      	sub	sp, #16
 800f7b2:	af00      	add	r7, sp, #0
 800f7b4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d001      	beq.n	800f7c4 <osDelay+0x16>
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	e000      	b.n	800f7c6 <osDelay+0x18>
 800f7c4:	2301      	movs	r3, #1
 800f7c6:	4618      	mov	r0, r3
 800f7c8:	f001 fcc4 	bl	8011154 <vTaskDelay>
  
  return osOK;
 800f7cc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800f7ce:	4618      	mov	r0, r3
 800f7d0:	3710      	adds	r7, #16
 800f7d2:	46bd      	mov	sp, r7
 800f7d4:	bd80      	pop	{r7, pc}
	...

0800f7d8 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 800f7d8:	b580      	push	{r7, lr}
 800f7da:	b086      	sub	sp, #24
 800f7dc:	af02      	add	r7, sp, #8
 800f7de:	6078      	str	r0, [r7, #4]
 800f7e0:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800f7e2:	2300      	movs	r3, #0
 800f7e4:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 800f7e6:	2300      	movs	r3, #0
 800f7e8:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 800f7ea:	f7ff ff7b 	bl	800f6e4 <inHandlerMode>
 800f7ee:	4603      	mov	r3, r0
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d01c      	beq.n	800f82e <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 800f7f4:	6839      	ldr	r1, [r7, #0]
 800f7f6:	f107 0208 	add.w	r2, r7, #8
 800f7fa:	f107 030c 	add.w	r3, r7, #12
 800f7fe:	9300      	str	r3, [sp, #0]
 800f800:	4613      	mov	r3, r2
 800f802:	2201      	movs	r2, #1
 800f804:	6878      	ldr	r0, [r7, #4]
 800f806:	f002 fbab 	bl	8011f60 <xTaskGenericNotifyFromISR>
 800f80a:	4603      	mov	r3, r0
 800f80c:	2b01      	cmp	r3, #1
 800f80e:	d002      	beq.n	800f816 <osSignalSet+0x3e>
      return 0x80000000;
 800f810:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f814:	e019      	b.n	800f84a <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d015      	beq.n	800f848 <osSignalSet+0x70>
 800f81c:	4b0d      	ldr	r3, [pc, #52]	; (800f854 <osSignalSet+0x7c>)
 800f81e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f822:	601a      	str	r2, [r3, #0]
 800f824:	f3bf 8f4f 	dsb	sy
 800f828:	f3bf 8f6f 	isb	sy
 800f82c:	e00c      	b.n	800f848 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 800f82e:	6839      	ldr	r1, [r7, #0]
 800f830:	f107 0308 	add.w	r3, r7, #8
 800f834:	2201      	movs	r2, #1
 800f836:	6878      	ldr	r0, [r7, #4]
 800f838:	f002 faf2 	bl	8011e20 <xTaskGenericNotify>
 800f83c:	4603      	mov	r3, r0
 800f83e:	2b01      	cmp	r3, #1
 800f840:	d002      	beq.n	800f848 <osSignalSet+0x70>
    return 0x80000000;
 800f842:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f846:	e000      	b.n	800f84a <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 800f848:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 800f84a:	4618      	mov	r0, r3
 800f84c:	3710      	adds	r7, #16
 800f84e:	46bd      	mov	sp, r7
 800f850:	bd80      	pop	{r7, pc}
 800f852:	bf00      	nop
 800f854:	e000ed04 	.word	0xe000ed04

0800f858 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 800f858:	b590      	push	{r4, r7, lr}
 800f85a:	b089      	sub	sp, #36	; 0x24
 800f85c:	af00      	add	r7, sp, #0
 800f85e:	60f8      	str	r0, [r7, #12]
 800f860:	60b9      	str	r1, [r7, #8]
 800f862:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 800f864:	2300      	movs	r3, #0
 800f866:	617b      	str	r3, [r7, #20]
  ticks = 0;
 800f868:	2300      	movs	r3, #0
 800f86a:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f872:	d103      	bne.n	800f87c <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 800f874:	f04f 33ff 	mov.w	r3, #4294967295
 800f878:	61fb      	str	r3, [r7, #28]
 800f87a:	e009      	b.n	800f890 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d006      	beq.n	800f890 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 800f886:	69fb      	ldr	r3, [r7, #28]
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d101      	bne.n	800f890 <osSignalWait+0x38>
      ticks = 1;
 800f88c:	2301      	movs	r3, #1
 800f88e:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 800f890:	f7ff ff28 	bl	800f6e4 <inHandlerMode>
 800f894:	4603      	mov	r3, r0
 800f896:	2b00      	cmp	r3, #0
 800f898:	d002      	beq.n	800f8a0 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 800f89a:	2382      	movs	r3, #130	; 0x82
 800f89c:	613b      	str	r3, [r7, #16]
 800f89e:	e01b      	b.n	800f8d8 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 800f8a0:	68b9      	ldr	r1, [r7, #8]
 800f8a2:	f107 0310 	add.w	r3, r7, #16
 800f8a6:	1d1a      	adds	r2, r3, #4
 800f8a8:	69fb      	ldr	r3, [r7, #28]
 800f8aa:	2000      	movs	r0, #0
 800f8ac:	f002 fa5e 	bl	8011d6c <xTaskNotifyWait>
 800f8b0:	4603      	mov	r3, r0
 800f8b2:	2b01      	cmp	r3, #1
 800f8b4:	d008      	beq.n	800f8c8 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 800f8b6:	69fb      	ldr	r3, [r7, #28]
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d102      	bne.n	800f8c2 <osSignalWait+0x6a>
 800f8bc:	2300      	movs	r3, #0
 800f8be:	613b      	str	r3, [r7, #16]
 800f8c0:	e00a      	b.n	800f8d8 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 800f8c2:	2340      	movs	r3, #64	; 0x40
 800f8c4:	613b      	str	r3, [r7, #16]
 800f8c6:	e007      	b.n	800f8d8 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 800f8c8:	697b      	ldr	r3, [r7, #20]
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	da02      	bge.n	800f8d4 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 800f8ce:	2386      	movs	r3, #134	; 0x86
 800f8d0:	613b      	str	r3, [r7, #16]
 800f8d2:	e001      	b.n	800f8d8 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 800f8d4:	2308      	movs	r3, #8
 800f8d6:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	461c      	mov	r4, r3
 800f8dc:	f107 0310 	add.w	r3, r7, #16
 800f8e0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f8e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800f8e8:	68f8      	ldr	r0, [r7, #12]
 800f8ea:	3724      	adds	r7, #36	; 0x24
 800f8ec:	46bd      	mov	sp, r7
 800f8ee:	bd90      	pop	{r4, r7, pc}

0800f8f0 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800f8f0:	b580      	push	{r7, lr}
 800f8f2:	b082      	sub	sp, #8
 800f8f4:	af00      	add	r7, sp, #0
 800f8f6:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	685b      	ldr	r3, [r3, #4]
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d007      	beq.n	800f910 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	685b      	ldr	r3, [r3, #4]
 800f904:	4619      	mov	r1, r3
 800f906:	2001      	movs	r0, #1
 800f908:	f000 fce0 	bl	80102cc <xQueueCreateMutexStatic>
 800f90c:	4603      	mov	r3, r0
 800f90e:	e003      	b.n	800f918 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800f910:	2001      	movs	r0, #1
 800f912:	f000 fcc3 	bl	801029c <xQueueCreateMutex>
 800f916:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800f918:	4618      	mov	r0, r3
 800f91a:	3708      	adds	r7, #8
 800f91c:	46bd      	mov	sp, r7
 800f91e:	bd80      	pop	{r7, pc}

0800f920 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800f920:	b580      	push	{r7, lr}
 800f922:	b084      	sub	sp, #16
 800f924:	af00      	add	r7, sp, #0
 800f926:	6078      	str	r0, [r7, #4]
 800f928:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800f92a:	2300      	movs	r3, #0
 800f92c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	2b00      	cmp	r3, #0
 800f932:	d101      	bne.n	800f938 <osMutexWait+0x18>
    return osErrorParameter;
 800f934:	2380      	movs	r3, #128	; 0x80
 800f936:	e03a      	b.n	800f9ae <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800f938:	2300      	movs	r3, #0
 800f93a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800f93c:	683b      	ldr	r3, [r7, #0]
 800f93e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f942:	d103      	bne.n	800f94c <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800f944:	f04f 33ff 	mov.w	r3, #4294967295
 800f948:	60fb      	str	r3, [r7, #12]
 800f94a:	e009      	b.n	800f960 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800f94c:	683b      	ldr	r3, [r7, #0]
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d006      	beq.n	800f960 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800f952:	683b      	ldr	r3, [r7, #0]
 800f954:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d101      	bne.n	800f960 <osMutexWait+0x40>
      ticks = 1;
 800f95c:	2301      	movs	r3, #1
 800f95e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800f960:	f7ff fec0 	bl	800f6e4 <inHandlerMode>
 800f964:	4603      	mov	r3, r0
 800f966:	2b00      	cmp	r3, #0
 800f968:	d017      	beq.n	800f99a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800f96a:	f107 0308 	add.w	r3, r7, #8
 800f96e:	461a      	mov	r2, r3
 800f970:	2100      	movs	r1, #0
 800f972:	6878      	ldr	r0, [r7, #4]
 800f974:	f001 f8c2 	bl	8010afc <xQueueReceiveFromISR>
 800f978:	4603      	mov	r3, r0
 800f97a:	2b01      	cmp	r3, #1
 800f97c:	d001      	beq.n	800f982 <osMutexWait+0x62>
      return osErrorOS;
 800f97e:	23ff      	movs	r3, #255	; 0xff
 800f980:	e015      	b.n	800f9ae <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800f982:	68bb      	ldr	r3, [r7, #8]
 800f984:	2b00      	cmp	r3, #0
 800f986:	d011      	beq.n	800f9ac <osMutexWait+0x8c>
 800f988:	4b0b      	ldr	r3, [pc, #44]	; (800f9b8 <osMutexWait+0x98>)
 800f98a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f98e:	601a      	str	r2, [r3, #0]
 800f990:	f3bf 8f4f 	dsb	sy
 800f994:	f3bf 8f6f 	isb	sy
 800f998:	e008      	b.n	800f9ac <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800f99a:	68f9      	ldr	r1, [r7, #12]
 800f99c:	6878      	ldr	r0, [r7, #4]
 800f99e:	f000 ffa5 	bl	80108ec <xQueueSemaphoreTake>
 800f9a2:	4603      	mov	r3, r0
 800f9a4:	2b01      	cmp	r3, #1
 800f9a6:	d001      	beq.n	800f9ac <osMutexWait+0x8c>
    return osErrorOS;
 800f9a8:	23ff      	movs	r3, #255	; 0xff
 800f9aa:	e000      	b.n	800f9ae <osMutexWait+0x8e>
  }
  
  return osOK;
 800f9ac:	2300      	movs	r3, #0
}
 800f9ae:	4618      	mov	r0, r3
 800f9b0:	3710      	adds	r7, #16
 800f9b2:	46bd      	mov	sp, r7
 800f9b4:	bd80      	pop	{r7, pc}
 800f9b6:	bf00      	nop
 800f9b8:	e000ed04 	.word	0xe000ed04

0800f9bc <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800f9bc:	b580      	push	{r7, lr}
 800f9be:	b084      	sub	sp, #16
 800f9c0:	af00      	add	r7, sp, #0
 800f9c2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800f9c4:	2300      	movs	r3, #0
 800f9c6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800f9c8:	2300      	movs	r3, #0
 800f9ca:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800f9cc:	f7ff fe8a 	bl	800f6e4 <inHandlerMode>
 800f9d0:	4603      	mov	r3, r0
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d016      	beq.n	800fa04 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800f9d6:	f107 0308 	add.w	r3, r7, #8
 800f9da:	4619      	mov	r1, r3
 800f9dc:	6878      	ldr	r0, [r7, #4]
 800f9de:	f000 fe1f 	bl	8010620 <xQueueGiveFromISR>
 800f9e2:	4603      	mov	r3, r0
 800f9e4:	2b01      	cmp	r3, #1
 800f9e6:	d001      	beq.n	800f9ec <osMutexRelease+0x30>
      return osErrorOS;
 800f9e8:	23ff      	movs	r3, #255	; 0xff
 800f9ea:	e017      	b.n	800fa1c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800f9ec:	68bb      	ldr	r3, [r7, #8]
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d013      	beq.n	800fa1a <osMutexRelease+0x5e>
 800f9f2:	4b0c      	ldr	r3, [pc, #48]	; (800fa24 <osMutexRelease+0x68>)
 800f9f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f9f8:	601a      	str	r2, [r3, #0]
 800f9fa:	f3bf 8f4f 	dsb	sy
 800f9fe:	f3bf 8f6f 	isb	sy
 800fa02:	e00a      	b.n	800fa1a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800fa04:	2300      	movs	r3, #0
 800fa06:	2200      	movs	r2, #0
 800fa08:	2100      	movs	r1, #0
 800fa0a:	6878      	ldr	r0, [r7, #4]
 800fa0c:	f000 fc7a 	bl	8010304 <xQueueGenericSend>
 800fa10:	4603      	mov	r3, r0
 800fa12:	2b01      	cmp	r3, #1
 800fa14:	d001      	beq.n	800fa1a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800fa16:	23ff      	movs	r3, #255	; 0xff
 800fa18:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800fa1a:	68fb      	ldr	r3, [r7, #12]
}
 800fa1c:	4618      	mov	r0, r3
 800fa1e:	3710      	adds	r7, #16
 800fa20:	46bd      	mov	sp, r7
 800fa22:	bd80      	pop	{r7, pc}
 800fa24:	e000ed04 	.word	0xe000ed04

0800fa28 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 800fa28:	b580      	push	{r7, lr}
 800fa2a:	b086      	sub	sp, #24
 800fa2c:	af00      	add	r7, sp, #0
 800fa2e:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	685b      	ldr	r3, [r3, #4]
 800fa34:	3303      	adds	r3, #3
 800fa36:	f023 0303 	bic.w	r3, r3, #3
 800fa3a:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 800fa3c:	2014      	movs	r0, #20
 800fa3e:	f002 fdff 	bl	8012640 <pvPortMalloc>
 800fa42:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 800fa44:	697b      	ldr	r3, [r7, #20]
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d046      	beq.n	800fad8 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	681a      	ldr	r2, [r3, #0]
 800fa4e:	697b      	ldr	r3, [r7, #20]
 800fa50:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 800fa52:	68fa      	ldr	r2, [r7, #12]
 800fa54:	697b      	ldr	r3, [r7, #20]
 800fa56:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 800fa58:	697b      	ldr	r3, [r7, #20]
 800fa5a:	2200      	movs	r2, #0
 800fa5c:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	4618      	mov	r0, r3
 800fa64:	f002 fdec 	bl	8012640 <pvPortMalloc>
 800fa68:	4602      	mov	r2, r0
 800fa6a:	697b      	ldr	r3, [r7, #20]
 800fa6c:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 800fa6e:	697b      	ldr	r3, [r7, #20]
 800fa70:	685b      	ldr	r3, [r3, #4]
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d02b      	beq.n	800face <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	68fa      	ldr	r2, [r7, #12]
 800fa7c:	fb02 f303 	mul.w	r3, r2, r3
 800fa80:	4618      	mov	r0, r3
 800fa82:	f002 fddd 	bl	8012640 <pvPortMalloc>
 800fa86:	4602      	mov	r2, r0
 800fa88:	697b      	ldr	r3, [r7, #20]
 800fa8a:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 800fa8c:	697b      	ldr	r3, [r7, #20]
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d011      	beq.n	800fab8 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 800fa94:	2300      	movs	r3, #0
 800fa96:	613b      	str	r3, [r7, #16]
 800fa98:	e008      	b.n	800faac <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 800fa9a:	697b      	ldr	r3, [r7, #20]
 800fa9c:	685a      	ldr	r2, [r3, #4]
 800fa9e:	693b      	ldr	r3, [r7, #16]
 800faa0:	4413      	add	r3, r2
 800faa2:	2200      	movs	r2, #0
 800faa4:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 800faa6:	693b      	ldr	r3, [r7, #16]
 800faa8:	3301      	adds	r3, #1
 800faaa:	613b      	str	r3, [r7, #16]
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	693a      	ldr	r2, [r7, #16]
 800fab2:	429a      	cmp	r2, r3
 800fab4:	d3f1      	bcc.n	800fa9a <osPoolCreate+0x72>
 800fab6:	e00f      	b.n	800fad8 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 800fab8:	697b      	ldr	r3, [r7, #20]
 800faba:	685b      	ldr	r3, [r3, #4]
 800fabc:	4618      	mov	r0, r3
 800fabe:	f002 fe81 	bl	80127c4 <vPortFree>
        vPortFree(thePool);
 800fac2:	6978      	ldr	r0, [r7, #20]
 800fac4:	f002 fe7e 	bl	80127c4 <vPortFree>
        thePool = NULL;
 800fac8:	2300      	movs	r3, #0
 800faca:	617b      	str	r3, [r7, #20]
 800facc:	e004      	b.n	800fad8 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 800face:	6978      	ldr	r0, [r7, #20]
 800fad0:	f002 fe78 	bl	80127c4 <vPortFree>
      thePool = NULL;
 800fad4:	2300      	movs	r3, #0
 800fad6:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 800fad8:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 800fada:	4618      	mov	r0, r3
 800fadc:	3718      	adds	r7, #24
 800fade:	46bd      	mov	sp, r7
 800fae0:	bd80      	pop	{r7, pc}

0800fae2 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 800fae2:	b580      	push	{r7, lr}
 800fae4:	b08a      	sub	sp, #40	; 0x28
 800fae6:	af00      	add	r7, sp, #0
 800fae8:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 800faea:	2300      	movs	r3, #0
 800faec:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 800faee:	2300      	movs	r3, #0
 800faf0:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 800faf2:	f7ff fdf7 	bl	800f6e4 <inHandlerMode>
 800faf6:	4603      	mov	r3, r0
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d00e      	beq.n	800fb1a <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800fafc:	f3ef 8211 	mrs	r2, BASEPRI
 800fb00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb04:	f383 8811 	msr	BASEPRI, r3
 800fb08:	f3bf 8f6f 	isb	sy
 800fb0c:	f3bf 8f4f 	dsb	sy
 800fb10:	617a      	str	r2, [r7, #20]
 800fb12:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800fb14:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 800fb16:	627b      	str	r3, [r7, #36]	; 0x24
 800fb18:	e001      	b.n	800fb1e <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 800fb1a:	f002 fc77 	bl	801240c <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 800fb1e:	2300      	movs	r3, #0
 800fb20:	61fb      	str	r3, [r7, #28]
 800fb22:	e029      	b.n	800fb78 <osPoolAlloc+0x96>
    index = pool_id->currentIndex + i;
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	691b      	ldr	r3, [r3, #16]
 800fb28:	69fa      	ldr	r2, [r7, #28]
 800fb2a:	4413      	add	r3, r2
 800fb2c:	61bb      	str	r3, [r7, #24]
    if (index >= pool_id->pool_sz) {
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	689b      	ldr	r3, [r3, #8]
 800fb32:	69ba      	ldr	r2, [r7, #24]
 800fb34:	429a      	cmp	r2, r3
 800fb36:	d301      	bcc.n	800fb3c <osPoolAlloc+0x5a>
      index = 0;
 800fb38:	2300      	movs	r3, #0
 800fb3a:	61bb      	str	r3, [r7, #24]
    }
    
    if (pool_id->markers[index] == 0) {
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	685a      	ldr	r2, [r3, #4]
 800fb40:	69bb      	ldr	r3, [r7, #24]
 800fb42:	4413      	add	r3, r2
 800fb44:	781b      	ldrb	r3, [r3, #0]
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d113      	bne.n	800fb72 <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	685a      	ldr	r2, [r3, #4]
 800fb4e:	69bb      	ldr	r3, [r7, #24]
 800fb50:	4413      	add	r3, r2
 800fb52:	2201      	movs	r2, #1
 800fb54:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	4619      	mov	r1, r3
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	68db      	ldr	r3, [r3, #12]
 800fb60:	69ba      	ldr	r2, [r7, #24]
 800fb62:	fb02 f303 	mul.w	r3, r2, r3
 800fb66:	440b      	add	r3, r1
 800fb68:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	69ba      	ldr	r2, [r7, #24]
 800fb6e:	611a      	str	r2, [r3, #16]
      break;
 800fb70:	e007      	b.n	800fb82 <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 800fb72:	69fb      	ldr	r3, [r7, #28]
 800fb74:	3301      	adds	r3, #1
 800fb76:	61fb      	str	r3, [r7, #28]
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	689b      	ldr	r3, [r3, #8]
 800fb7c:	69fa      	ldr	r2, [r7, #28]
 800fb7e:	429a      	cmp	r2, r3
 800fb80:	d3d0      	bcc.n	800fb24 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 800fb82:	f7ff fdaf 	bl	800f6e4 <inHandlerMode>
 800fb86:	4603      	mov	r3, r0
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d005      	beq.n	800fb98 <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 800fb8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb8e:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	f383 8811 	msr	BASEPRI, r3
 800fb96:	e001      	b.n	800fb9c <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 800fb98:	f002 fc66 	bl	8012468 <vPortExitCritical>
  }
  
  return p;
 800fb9c:	6a3b      	ldr	r3, [r7, #32]
}
 800fb9e:	4618      	mov	r0, r3
 800fba0:	3728      	adds	r7, #40	; 0x28
 800fba2:	46bd      	mov	sp, r7
 800fba4:	bd80      	pop	{r7, pc}

0800fba6 <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 800fba6:	b480      	push	{r7}
 800fba8:	b085      	sub	sp, #20
 800fbaa:	af00      	add	r7, sp, #0
 800fbac:	6078      	str	r0, [r7, #4]
 800fbae:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d101      	bne.n	800fbba <osPoolFree+0x14>
    return osErrorParameter;
 800fbb6:	2380      	movs	r3, #128	; 0x80
 800fbb8:	e030      	b.n	800fc1c <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 800fbba:	683b      	ldr	r3, [r7, #0]
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d101      	bne.n	800fbc4 <osPoolFree+0x1e>
    return osErrorParameter;
 800fbc0:	2380      	movs	r3, #128	; 0x80
 800fbc2:	e02b      	b.n	800fc1c <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	683a      	ldr	r2, [r7, #0]
 800fbca:	429a      	cmp	r2, r3
 800fbcc:	d201      	bcs.n	800fbd2 <osPoolFree+0x2c>
    return osErrorParameter;
 800fbce:	2380      	movs	r3, #128	; 0x80
 800fbd0:	e024      	b.n	800fc1c <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 800fbd2:	683b      	ldr	r3, [r7, #0]
 800fbd4:	687a      	ldr	r2, [r7, #4]
 800fbd6:	6812      	ldr	r2, [r2, #0]
 800fbd8:	1a9b      	subs	r3, r3, r2
 800fbda:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	68da      	ldr	r2, [r3, #12]
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	fbb3 f1f2 	udiv	r1, r3, r2
 800fbe6:	fb02 f201 	mul.w	r2, r2, r1
 800fbea:	1a9b      	subs	r3, r3, r2
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d001      	beq.n	800fbf4 <osPoolFree+0x4e>
    return osErrorParameter;
 800fbf0:	2380      	movs	r3, #128	; 0x80
 800fbf2:	e013      	b.n	800fc1c <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	68db      	ldr	r3, [r3, #12]
 800fbf8:	68fa      	ldr	r2, [r7, #12]
 800fbfa:	fbb2 f3f3 	udiv	r3, r2, r3
 800fbfe:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	689b      	ldr	r3, [r3, #8]
 800fc04:	68fa      	ldr	r2, [r7, #12]
 800fc06:	429a      	cmp	r2, r3
 800fc08:	d301      	bcc.n	800fc0e <osPoolFree+0x68>
    return osErrorParameter;
 800fc0a:	2380      	movs	r3, #128	; 0x80
 800fc0c:	e006      	b.n	800fc1c <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	685a      	ldr	r2, [r3, #4]
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	4413      	add	r3, r2
 800fc16:	2200      	movs	r2, #0
 800fc18:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 800fc1a:	2300      	movs	r3, #0
}
 800fc1c:	4618      	mov	r0, r3
 800fc1e:	3714      	adds	r7, #20
 800fc20:	46bd      	mov	sp, r7
 800fc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc26:	4770      	bx	lr

0800fc28 <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 800fc28:	b590      	push	{r4, r7, lr}
 800fc2a:	b087      	sub	sp, #28
 800fc2c:	af00      	add	r7, sp, #0
 800fc2e:	6078      	str	r0, [r7, #4]
 800fc30:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	60fb      	str	r3, [r7, #12]
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	685b      	ldr	r3, [r3, #4]
 800fc3c:	613b      	str	r3, [r7, #16]
 800fc3e:	2300      	movs	r3, #0
 800fc40:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	689c      	ldr	r4, [r3, #8]
 800fc46:	200c      	movs	r0, #12
 800fc48:	f002 fcfa 	bl	8012640 <pvPortMalloc>
 800fc4c:	4603      	mov	r3, r0
 800fc4e:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	689b      	ldr	r3, [r3, #8]
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d101      	bne.n	800fc5e <osMailCreate+0x36>
    return NULL;
 800fc5a:	2300      	movs	r3, #0
 800fc5c:	e038      	b.n	800fcd0 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	689b      	ldr	r3, [r3, #8]
 800fc62:	681b      	ldr	r3, [r3, #0]
 800fc64:	687a      	ldr	r2, [r7, #4]
 800fc66:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	6818      	ldr	r0, [r3, #0]
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	689b      	ldr	r3, [r3, #8]
 800fc70:	681c      	ldr	r4, [r3, #0]
 800fc72:	2200      	movs	r2, #0
 800fc74:	2104      	movs	r1, #4
 800fc76:	f000 fa9b 	bl	80101b0 <xQueueGenericCreate>
 800fc7a:	4603      	mov	r3, r0
 800fc7c:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	689b      	ldr	r3, [r3, #8]
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	685b      	ldr	r3, [r3, #4]
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d107      	bne.n	800fc9a <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	689b      	ldr	r3, [r3, #8]
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	4618      	mov	r0, r3
 800fc92:	f002 fd97 	bl	80127c4 <vPortFree>
    return NULL;
 800fc96:	2300      	movs	r3, #0
 800fc98:	e01a      	b.n	800fcd0 <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	689b      	ldr	r3, [r3, #8]
 800fc9e:	681c      	ldr	r4, [r3, #0]
 800fca0:	f107 030c 	add.w	r3, r7, #12
 800fca4:	4618      	mov	r0, r3
 800fca6:	f7ff febf 	bl	800fa28 <osPoolCreate>
 800fcaa:	4603      	mov	r3, r0
 800fcac:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	689b      	ldr	r3, [r3, #8]
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	689b      	ldr	r3, [r3, #8]
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d107      	bne.n	800fcca <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	689b      	ldr	r3, [r3, #8]
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	4618      	mov	r0, r3
 800fcc2:	f002 fd7f 	bl	80127c4 <vPortFree>
    return NULL;
 800fcc6:	2300      	movs	r3, #0
 800fcc8:	e002      	b.n	800fcd0 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	689b      	ldr	r3, [r3, #8]
 800fcce:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 800fcd0:	4618      	mov	r0, r3
 800fcd2:	371c      	adds	r7, #28
 800fcd4:	46bd      	mov	sp, r7
 800fcd6:	bd90      	pop	{r4, r7, pc}

0800fcd8 <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 800fcd8:	b580      	push	{r7, lr}
 800fcda:	b084      	sub	sp, #16
 800fcdc:	af00      	add	r7, sp, #0
 800fcde:	6078      	str	r0, [r7, #4]
 800fce0:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d101      	bne.n	800fcec <osMailAlloc+0x14>
    return NULL;
 800fce8:	2300      	movs	r3, #0
 800fcea:	e006      	b.n	800fcfa <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	689b      	ldr	r3, [r3, #8]
 800fcf0:	4618      	mov	r0, r3
 800fcf2:	f7ff fef6 	bl	800fae2 <osPoolAlloc>
 800fcf6:	60f8      	str	r0, [r7, #12]
  
  return p;
 800fcf8:	68fb      	ldr	r3, [r7, #12]
}
 800fcfa:	4618      	mov	r0, r3
 800fcfc:	3710      	adds	r7, #16
 800fcfe:	46bd      	mov	sp, r7
 800fd00:	bd80      	pop	{r7, pc}
	...

0800fd04 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 800fd04:	b580      	push	{r7, lr}
 800fd06:	b084      	sub	sp, #16
 800fd08:	af00      	add	r7, sp, #0
 800fd0a:	6078      	str	r0, [r7, #4]
 800fd0c:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d101      	bne.n	800fd18 <osMailPut+0x14>
    return osErrorParameter;
 800fd14:	2380      	movs	r3, #128	; 0x80
 800fd16:	e02c      	b.n	800fd72 <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 800fd18:	2300      	movs	r3, #0
 800fd1a:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 800fd1c:	f7ff fce2 	bl	800f6e4 <inHandlerMode>
 800fd20:	4603      	mov	r3, r0
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d018      	beq.n	800fd58 <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	6858      	ldr	r0, [r3, #4]
 800fd2a:	f107 020c 	add.w	r2, r7, #12
 800fd2e:	4639      	mov	r1, r7
 800fd30:	2300      	movs	r3, #0
 800fd32:	f000 fbe1 	bl	80104f8 <xQueueGenericSendFromISR>
 800fd36:	4603      	mov	r3, r0
 800fd38:	2b01      	cmp	r3, #1
 800fd3a:	d001      	beq.n	800fd40 <osMailPut+0x3c>
      return osErrorOS;
 800fd3c:	23ff      	movs	r3, #255	; 0xff
 800fd3e:	e018      	b.n	800fd72 <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d014      	beq.n	800fd70 <osMailPut+0x6c>
 800fd46:	4b0d      	ldr	r3, [pc, #52]	; (800fd7c <osMailPut+0x78>)
 800fd48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd4c:	601a      	str	r2, [r3, #0]
 800fd4e:	f3bf 8f4f 	dsb	sy
 800fd52:	f3bf 8f6f 	isb	sy
 800fd56:	e00b      	b.n	800fd70 <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	6858      	ldr	r0, [r3, #4]
 800fd5c:	4639      	mov	r1, r7
 800fd5e:	2300      	movs	r3, #0
 800fd60:	2200      	movs	r2, #0
 800fd62:	f000 facf 	bl	8010304 <xQueueGenericSend>
 800fd66:	4603      	mov	r3, r0
 800fd68:	2b01      	cmp	r3, #1
 800fd6a:	d001      	beq.n	800fd70 <osMailPut+0x6c>
      return osErrorOS;
 800fd6c:	23ff      	movs	r3, #255	; 0xff
 800fd6e:	e000      	b.n	800fd72 <osMailPut+0x6e>
    }
  }
  
  return osOK;
 800fd70:	2300      	movs	r3, #0
}
 800fd72:	4618      	mov	r0, r3
 800fd74:	3710      	adds	r7, #16
 800fd76:	46bd      	mov	sp, r7
 800fd78:	bd80      	pop	{r7, pc}
 800fd7a:	bf00      	nop
 800fd7c:	e000ed04 	.word	0xe000ed04

0800fd80 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 800fd80:	b590      	push	{r4, r7, lr}
 800fd82:	b08b      	sub	sp, #44	; 0x2c
 800fd84:	af00      	add	r7, sp, #0
 800fd86:	60f8      	str	r0, [r7, #12]
 800fd88:	60b9      	str	r1, [r7, #8]
 800fd8a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 800fd8c:	68bb      	ldr	r3, [r7, #8]
 800fd8e:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 800fd90:	68bb      	ldr	r3, [r7, #8]
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d10a      	bne.n	800fdac <osMailGet+0x2c>
    event.status = osErrorParameter;
 800fd96:	2380      	movs	r3, #128	; 0x80
 800fd98:	617b      	str	r3, [r7, #20]
    return event;
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	461c      	mov	r4, r3
 800fd9e:	f107 0314 	add.w	r3, r7, #20
 800fda2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fda6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800fdaa:	e056      	b.n	800fe5a <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800fdac:	2300      	movs	r3, #0
 800fdae:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800fdb0:	2300      	movs	r3, #0
 800fdb2:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fdba:	d103      	bne.n	800fdc4 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 800fdbc:	f04f 33ff 	mov.w	r3, #4294967295
 800fdc0:	627b      	str	r3, [r7, #36]	; 0x24
 800fdc2:	e009      	b.n	800fdd8 <osMailGet+0x58>
  }
  else if (millisec != 0) {
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d006      	beq.n	800fdd8 <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800fdce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d101      	bne.n	800fdd8 <osMailGet+0x58>
      ticks = 1;
 800fdd4:	2301      	movs	r3, #1
 800fdd6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800fdd8:	f7ff fc84 	bl	800f6e4 <inHandlerMode>
 800fddc:	4603      	mov	r3, r0
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d01d      	beq.n	800fe1e <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 800fde2:	68bb      	ldr	r3, [r7, #8]
 800fde4:	6858      	ldr	r0, [r3, #4]
 800fde6:	f107 0220 	add.w	r2, r7, #32
 800fdea:	f107 0314 	add.w	r3, r7, #20
 800fdee:	3304      	adds	r3, #4
 800fdf0:	4619      	mov	r1, r3
 800fdf2:	f000 fe83 	bl	8010afc <xQueueReceiveFromISR>
 800fdf6:	4603      	mov	r3, r0
 800fdf8:	2b01      	cmp	r3, #1
 800fdfa:	d102      	bne.n	800fe02 <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 800fdfc:	2320      	movs	r3, #32
 800fdfe:	617b      	str	r3, [r7, #20]
 800fe00:	e001      	b.n	800fe06 <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 800fe02:	2300      	movs	r3, #0
 800fe04:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800fe06:	6a3b      	ldr	r3, [r7, #32]
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d01e      	beq.n	800fe4a <osMailGet+0xca>
 800fe0c:	4b15      	ldr	r3, [pc, #84]	; (800fe64 <osMailGet+0xe4>)
 800fe0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fe12:	601a      	str	r2, [r3, #0]
 800fe14:	f3bf 8f4f 	dsb	sy
 800fe18:	f3bf 8f6f 	isb	sy
 800fe1c:	e015      	b.n	800fe4a <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 800fe1e:	68bb      	ldr	r3, [r7, #8]
 800fe20:	6858      	ldr	r0, [r3, #4]
 800fe22:	f107 0314 	add.w	r3, r7, #20
 800fe26:	3304      	adds	r3, #4
 800fe28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe2a:	4619      	mov	r1, r3
 800fe2c:	f000 fc82 	bl	8010734 <xQueueReceive>
 800fe30:	4603      	mov	r3, r0
 800fe32:	2b01      	cmp	r3, #1
 800fe34:	d102      	bne.n	800fe3c <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 800fe36:	2320      	movs	r3, #32
 800fe38:	617b      	str	r3, [r7, #20]
 800fe3a:	e006      	b.n	800fe4a <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800fe3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d101      	bne.n	800fe46 <osMailGet+0xc6>
 800fe42:	2300      	movs	r3, #0
 800fe44:	e000      	b.n	800fe48 <osMailGet+0xc8>
 800fe46:	2340      	movs	r3, #64	; 0x40
 800fe48:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	461c      	mov	r4, r3
 800fe4e:	f107 0314 	add.w	r3, r7, #20
 800fe52:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fe56:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800fe5a:	68f8      	ldr	r0, [r7, #12]
 800fe5c:	372c      	adds	r7, #44	; 0x2c
 800fe5e:	46bd      	mov	sp, r7
 800fe60:	bd90      	pop	{r4, r7, pc}
 800fe62:	bf00      	nop
 800fe64:	e000ed04 	.word	0xe000ed04

0800fe68 <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 800fe68:	b580      	push	{r7, lr}
 800fe6a:	b082      	sub	sp, #8
 800fe6c:	af00      	add	r7, sp, #0
 800fe6e:	6078      	str	r0, [r7, #4]
 800fe70:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d101      	bne.n	800fe7c <osMailFree+0x14>
    return osErrorParameter;
 800fe78:	2380      	movs	r3, #128	; 0x80
 800fe7a:	e006      	b.n	800fe8a <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	689b      	ldr	r3, [r3, #8]
 800fe80:	6839      	ldr	r1, [r7, #0]
 800fe82:	4618      	mov	r0, r3
 800fe84:	f7ff fe8f 	bl	800fba6 <osPoolFree>
 800fe88:	4603      	mov	r3, r0
}
 800fe8a:	4618      	mov	r0, r3
 800fe8c:	3708      	adds	r7, #8
 800fe8e:	46bd      	mov	sp, r7
 800fe90:	bd80      	pop	{r7, pc}

0800fe92 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800fe92:	b480      	push	{r7}
 800fe94:	b083      	sub	sp, #12
 800fe96:	af00      	add	r7, sp, #0
 800fe98:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	f103 0208 	add.w	r2, r3, #8
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	f04f 32ff 	mov.w	r2, #4294967295
 800feaa:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	f103 0208 	add.w	r2, r3, #8
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	f103 0208 	add.w	r2, r3, #8
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	2200      	movs	r2, #0
 800fec4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800fec6:	bf00      	nop
 800fec8:	370c      	adds	r7, #12
 800feca:	46bd      	mov	sp, r7
 800fecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fed0:	4770      	bx	lr

0800fed2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800fed2:	b480      	push	{r7}
 800fed4:	b083      	sub	sp, #12
 800fed6:	af00      	add	r7, sp, #0
 800fed8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	2200      	movs	r2, #0
 800fede:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800fee0:	bf00      	nop
 800fee2:	370c      	adds	r7, #12
 800fee4:	46bd      	mov	sp, r7
 800fee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feea:	4770      	bx	lr

0800feec <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800feec:	b480      	push	{r7}
 800feee:	b085      	sub	sp, #20
 800fef0:	af00      	add	r7, sp, #0
 800fef2:	6078      	str	r0, [r7, #4]
 800fef4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	685b      	ldr	r3, [r3, #4]
 800fefa:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800fefc:	683b      	ldr	r3, [r7, #0]
 800fefe:	68fa      	ldr	r2, [r7, #12]
 800ff00:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	689a      	ldr	r2, [r3, #8]
 800ff06:	683b      	ldr	r3, [r7, #0]
 800ff08:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	689b      	ldr	r3, [r3, #8]
 800ff0e:	683a      	ldr	r2, [r7, #0]
 800ff10:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	683a      	ldr	r2, [r7, #0]
 800ff16:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800ff18:	683b      	ldr	r3, [r7, #0]
 800ff1a:	687a      	ldr	r2, [r7, #4]
 800ff1c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	1c5a      	adds	r2, r3, #1
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	601a      	str	r2, [r3, #0]
}
 800ff28:	bf00      	nop
 800ff2a:	3714      	adds	r7, #20
 800ff2c:	46bd      	mov	sp, r7
 800ff2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff32:	4770      	bx	lr

0800ff34 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ff34:	b480      	push	{r7}
 800ff36:	b085      	sub	sp, #20
 800ff38:	af00      	add	r7, sp, #0
 800ff3a:	6078      	str	r0, [r7, #4]
 800ff3c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ff3e:	683b      	ldr	r3, [r7, #0]
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ff44:	68bb      	ldr	r3, [r7, #8]
 800ff46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff4a:	d103      	bne.n	800ff54 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	691b      	ldr	r3, [r3, #16]
 800ff50:	60fb      	str	r3, [r7, #12]
 800ff52:	e00c      	b.n	800ff6e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	3308      	adds	r3, #8
 800ff58:	60fb      	str	r3, [r7, #12]
 800ff5a:	e002      	b.n	800ff62 <vListInsert+0x2e>
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	685b      	ldr	r3, [r3, #4]
 800ff60:	60fb      	str	r3, [r7, #12]
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	685b      	ldr	r3, [r3, #4]
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	68ba      	ldr	r2, [r7, #8]
 800ff6a:	429a      	cmp	r2, r3
 800ff6c:	d2f6      	bcs.n	800ff5c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	685a      	ldr	r2, [r3, #4]
 800ff72:	683b      	ldr	r3, [r7, #0]
 800ff74:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ff76:	683b      	ldr	r3, [r7, #0]
 800ff78:	685b      	ldr	r3, [r3, #4]
 800ff7a:	683a      	ldr	r2, [r7, #0]
 800ff7c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ff7e:	683b      	ldr	r3, [r7, #0]
 800ff80:	68fa      	ldr	r2, [r7, #12]
 800ff82:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	683a      	ldr	r2, [r7, #0]
 800ff88:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800ff8a:	683b      	ldr	r3, [r7, #0]
 800ff8c:	687a      	ldr	r2, [r7, #4]
 800ff8e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	1c5a      	adds	r2, r3, #1
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	601a      	str	r2, [r3, #0]
}
 800ff9a:	bf00      	nop
 800ff9c:	3714      	adds	r7, #20
 800ff9e:	46bd      	mov	sp, r7
 800ffa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffa4:	4770      	bx	lr

0800ffa6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ffa6:	b480      	push	{r7}
 800ffa8:	b085      	sub	sp, #20
 800ffaa:	af00      	add	r7, sp, #0
 800ffac:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	691b      	ldr	r3, [r3, #16]
 800ffb2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	685b      	ldr	r3, [r3, #4]
 800ffb8:	687a      	ldr	r2, [r7, #4]
 800ffba:	6892      	ldr	r2, [r2, #8]
 800ffbc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	689b      	ldr	r3, [r3, #8]
 800ffc2:	687a      	ldr	r2, [r7, #4]
 800ffc4:	6852      	ldr	r2, [r2, #4]
 800ffc6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	685b      	ldr	r3, [r3, #4]
 800ffcc:	687a      	ldr	r2, [r7, #4]
 800ffce:	429a      	cmp	r2, r3
 800ffd0:	d103      	bne.n	800ffda <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	689a      	ldr	r2, [r3, #8]
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	2200      	movs	r2, #0
 800ffde:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	1e5a      	subs	r2, r3, #1
 800ffe6:	68fb      	ldr	r3, [r7, #12]
 800ffe8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	681b      	ldr	r3, [r3, #0]
}
 800ffee:	4618      	mov	r0, r3
 800fff0:	3714      	adds	r7, #20
 800fff2:	46bd      	mov	sp, r7
 800fff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fff8:	4770      	bx	lr
	...

0800fffc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800fffc:	b580      	push	{r7, lr}
 800fffe:	b084      	sub	sp, #16
 8010000:	af00      	add	r7, sp, #0
 8010002:	6078      	str	r0, [r7, #4]
 8010004:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	2b00      	cmp	r3, #0
 801000e:	d109      	bne.n	8010024 <xQueueGenericReset+0x28>
	__asm volatile
 8010010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010014:	f383 8811 	msr	BASEPRI, r3
 8010018:	f3bf 8f6f 	isb	sy
 801001c:	f3bf 8f4f 	dsb	sy
 8010020:	60bb      	str	r3, [r7, #8]
 8010022:	e7fe      	b.n	8010022 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8010024:	f002 f9f2 	bl	801240c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	681a      	ldr	r2, [r3, #0]
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010030:	68f9      	ldr	r1, [r7, #12]
 8010032:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010034:	fb01 f303 	mul.w	r3, r1, r3
 8010038:	441a      	add	r2, r3
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	2200      	movs	r2, #0
 8010042:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	681a      	ldr	r2, [r3, #0]
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	681a      	ldr	r2, [r3, #0]
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010054:	3b01      	subs	r3, #1
 8010056:	68f9      	ldr	r1, [r7, #12]
 8010058:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801005a:	fb01 f303 	mul.w	r3, r1, r3
 801005e:	441a      	add	r2, r3
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	22ff      	movs	r2, #255	; 0xff
 8010068:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801006c:	68fb      	ldr	r3, [r7, #12]
 801006e:	22ff      	movs	r2, #255	; 0xff
 8010070:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8010074:	683b      	ldr	r3, [r7, #0]
 8010076:	2b00      	cmp	r3, #0
 8010078:	d114      	bne.n	80100a4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	691b      	ldr	r3, [r3, #16]
 801007e:	2b00      	cmp	r3, #0
 8010080:	d01a      	beq.n	80100b8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	3310      	adds	r3, #16
 8010086:	4618      	mov	r0, r3
 8010088:	f001 fada 	bl	8011640 <xTaskRemoveFromEventList>
 801008c:	4603      	mov	r3, r0
 801008e:	2b00      	cmp	r3, #0
 8010090:	d012      	beq.n	80100b8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8010092:	4b0d      	ldr	r3, [pc, #52]	; (80100c8 <xQueueGenericReset+0xcc>)
 8010094:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010098:	601a      	str	r2, [r3, #0]
 801009a:	f3bf 8f4f 	dsb	sy
 801009e:	f3bf 8f6f 	isb	sy
 80100a2:	e009      	b.n	80100b8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	3310      	adds	r3, #16
 80100a8:	4618      	mov	r0, r3
 80100aa:	f7ff fef2 	bl	800fe92 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	3324      	adds	r3, #36	; 0x24
 80100b2:	4618      	mov	r0, r3
 80100b4:	f7ff feed 	bl	800fe92 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80100b8:	f002 f9d6 	bl	8012468 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80100bc:	2301      	movs	r3, #1
}
 80100be:	4618      	mov	r0, r3
 80100c0:	3710      	adds	r7, #16
 80100c2:	46bd      	mov	sp, r7
 80100c4:	bd80      	pop	{r7, pc}
 80100c6:	bf00      	nop
 80100c8:	e000ed04 	.word	0xe000ed04

080100cc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80100cc:	b580      	push	{r7, lr}
 80100ce:	b08e      	sub	sp, #56	; 0x38
 80100d0:	af02      	add	r7, sp, #8
 80100d2:	60f8      	str	r0, [r7, #12]
 80100d4:	60b9      	str	r1, [r7, #8]
 80100d6:	607a      	str	r2, [r7, #4]
 80100d8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d109      	bne.n	80100f4 <xQueueGenericCreateStatic+0x28>
 80100e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100e4:	f383 8811 	msr	BASEPRI, r3
 80100e8:	f3bf 8f6f 	isb	sy
 80100ec:	f3bf 8f4f 	dsb	sy
 80100f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80100f2:	e7fe      	b.n	80100f2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80100f4:	683b      	ldr	r3, [r7, #0]
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d109      	bne.n	801010e <xQueueGenericCreateStatic+0x42>
 80100fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100fe:	f383 8811 	msr	BASEPRI, r3
 8010102:	f3bf 8f6f 	isb	sy
 8010106:	f3bf 8f4f 	dsb	sy
 801010a:	627b      	str	r3, [r7, #36]	; 0x24
 801010c:	e7fe      	b.n	801010c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	2b00      	cmp	r3, #0
 8010112:	d002      	beq.n	801011a <xQueueGenericCreateStatic+0x4e>
 8010114:	68bb      	ldr	r3, [r7, #8]
 8010116:	2b00      	cmp	r3, #0
 8010118:	d001      	beq.n	801011e <xQueueGenericCreateStatic+0x52>
 801011a:	2301      	movs	r3, #1
 801011c:	e000      	b.n	8010120 <xQueueGenericCreateStatic+0x54>
 801011e:	2300      	movs	r3, #0
 8010120:	2b00      	cmp	r3, #0
 8010122:	d109      	bne.n	8010138 <xQueueGenericCreateStatic+0x6c>
 8010124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010128:	f383 8811 	msr	BASEPRI, r3
 801012c:	f3bf 8f6f 	isb	sy
 8010130:	f3bf 8f4f 	dsb	sy
 8010134:	623b      	str	r3, [r7, #32]
 8010136:	e7fe      	b.n	8010136 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	2b00      	cmp	r3, #0
 801013c:	d102      	bne.n	8010144 <xQueueGenericCreateStatic+0x78>
 801013e:	68bb      	ldr	r3, [r7, #8]
 8010140:	2b00      	cmp	r3, #0
 8010142:	d101      	bne.n	8010148 <xQueueGenericCreateStatic+0x7c>
 8010144:	2301      	movs	r3, #1
 8010146:	e000      	b.n	801014a <xQueueGenericCreateStatic+0x7e>
 8010148:	2300      	movs	r3, #0
 801014a:	2b00      	cmp	r3, #0
 801014c:	d109      	bne.n	8010162 <xQueueGenericCreateStatic+0x96>
 801014e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010152:	f383 8811 	msr	BASEPRI, r3
 8010156:	f3bf 8f6f 	isb	sy
 801015a:	f3bf 8f4f 	dsb	sy
 801015e:	61fb      	str	r3, [r7, #28]
 8010160:	e7fe      	b.n	8010160 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8010162:	2348      	movs	r3, #72	; 0x48
 8010164:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8010166:	697b      	ldr	r3, [r7, #20]
 8010168:	2b48      	cmp	r3, #72	; 0x48
 801016a:	d009      	beq.n	8010180 <xQueueGenericCreateStatic+0xb4>
 801016c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010170:	f383 8811 	msr	BASEPRI, r3
 8010174:	f3bf 8f6f 	isb	sy
 8010178:	f3bf 8f4f 	dsb	sy
 801017c:	61bb      	str	r3, [r7, #24]
 801017e:	e7fe      	b.n	801017e <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010180:	683b      	ldr	r3, [r7, #0]
 8010182:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8010184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010186:	2b00      	cmp	r3, #0
 8010188:	d00d      	beq.n	80101a6 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801018a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801018c:	2201      	movs	r2, #1
 801018e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010192:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8010196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010198:	9300      	str	r3, [sp, #0]
 801019a:	4613      	mov	r3, r2
 801019c:	687a      	ldr	r2, [r7, #4]
 801019e:	68b9      	ldr	r1, [r7, #8]
 80101a0:	68f8      	ldr	r0, [r7, #12]
 80101a2:	f000 f842 	bl	801022a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80101a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80101a8:	4618      	mov	r0, r3
 80101aa:	3730      	adds	r7, #48	; 0x30
 80101ac:	46bd      	mov	sp, r7
 80101ae:	bd80      	pop	{r7, pc}

080101b0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80101b0:	b580      	push	{r7, lr}
 80101b2:	b08a      	sub	sp, #40	; 0x28
 80101b4:	af02      	add	r7, sp, #8
 80101b6:	60f8      	str	r0, [r7, #12]
 80101b8:	60b9      	str	r1, [r7, #8]
 80101ba:	4613      	mov	r3, r2
 80101bc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80101be:	68fb      	ldr	r3, [r7, #12]
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d109      	bne.n	80101d8 <xQueueGenericCreate+0x28>
 80101c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101c8:	f383 8811 	msr	BASEPRI, r3
 80101cc:	f3bf 8f6f 	isb	sy
 80101d0:	f3bf 8f4f 	dsb	sy
 80101d4:	613b      	str	r3, [r7, #16]
 80101d6:	e7fe      	b.n	80101d6 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80101d8:	68bb      	ldr	r3, [r7, #8]
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d102      	bne.n	80101e4 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80101de:	2300      	movs	r3, #0
 80101e0:	61fb      	str	r3, [r7, #28]
 80101e2:	e004      	b.n	80101ee <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	68ba      	ldr	r2, [r7, #8]
 80101e8:	fb02 f303 	mul.w	r3, r2, r3
 80101ec:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80101ee:	69fb      	ldr	r3, [r7, #28]
 80101f0:	3348      	adds	r3, #72	; 0x48
 80101f2:	4618      	mov	r0, r3
 80101f4:	f002 fa24 	bl	8012640 <pvPortMalloc>
 80101f8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80101fa:	69bb      	ldr	r3, [r7, #24]
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d00f      	beq.n	8010220 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8010200:	69bb      	ldr	r3, [r7, #24]
 8010202:	3348      	adds	r3, #72	; 0x48
 8010204:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8010206:	69bb      	ldr	r3, [r7, #24]
 8010208:	2200      	movs	r2, #0
 801020a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801020e:	79fa      	ldrb	r2, [r7, #7]
 8010210:	69bb      	ldr	r3, [r7, #24]
 8010212:	9300      	str	r3, [sp, #0]
 8010214:	4613      	mov	r3, r2
 8010216:	697a      	ldr	r2, [r7, #20]
 8010218:	68b9      	ldr	r1, [r7, #8]
 801021a:	68f8      	ldr	r0, [r7, #12]
 801021c:	f000 f805 	bl	801022a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8010220:	69bb      	ldr	r3, [r7, #24]
	}
 8010222:	4618      	mov	r0, r3
 8010224:	3720      	adds	r7, #32
 8010226:	46bd      	mov	sp, r7
 8010228:	bd80      	pop	{r7, pc}

0801022a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801022a:	b580      	push	{r7, lr}
 801022c:	b084      	sub	sp, #16
 801022e:	af00      	add	r7, sp, #0
 8010230:	60f8      	str	r0, [r7, #12]
 8010232:	60b9      	str	r1, [r7, #8]
 8010234:	607a      	str	r2, [r7, #4]
 8010236:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8010238:	68bb      	ldr	r3, [r7, #8]
 801023a:	2b00      	cmp	r3, #0
 801023c:	d103      	bne.n	8010246 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801023e:	69bb      	ldr	r3, [r7, #24]
 8010240:	69ba      	ldr	r2, [r7, #24]
 8010242:	601a      	str	r2, [r3, #0]
 8010244:	e002      	b.n	801024c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010246:	69bb      	ldr	r3, [r7, #24]
 8010248:	687a      	ldr	r2, [r7, #4]
 801024a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801024c:	69bb      	ldr	r3, [r7, #24]
 801024e:	68fa      	ldr	r2, [r7, #12]
 8010250:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010252:	69bb      	ldr	r3, [r7, #24]
 8010254:	68ba      	ldr	r2, [r7, #8]
 8010256:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010258:	2101      	movs	r1, #1
 801025a:	69b8      	ldr	r0, [r7, #24]
 801025c:	f7ff fece 	bl	800fffc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8010260:	bf00      	nop
 8010262:	3710      	adds	r7, #16
 8010264:	46bd      	mov	sp, r7
 8010266:	bd80      	pop	{r7, pc}

08010268 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8010268:	b580      	push	{r7, lr}
 801026a:	b082      	sub	sp, #8
 801026c:	af00      	add	r7, sp, #0
 801026e:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	2b00      	cmp	r3, #0
 8010274:	d00e      	beq.n	8010294 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	2200      	movs	r2, #0
 801027a:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	2200      	movs	r2, #0
 8010280:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	2200      	movs	r2, #0
 8010286:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8010288:	2300      	movs	r3, #0
 801028a:	2200      	movs	r2, #0
 801028c:	2100      	movs	r1, #0
 801028e:	6878      	ldr	r0, [r7, #4]
 8010290:	f000 f838 	bl	8010304 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8010294:	bf00      	nop
 8010296:	3708      	adds	r7, #8
 8010298:	46bd      	mov	sp, r7
 801029a:	bd80      	pop	{r7, pc}

0801029c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 801029c:	b580      	push	{r7, lr}
 801029e:	b086      	sub	sp, #24
 80102a0:	af00      	add	r7, sp, #0
 80102a2:	4603      	mov	r3, r0
 80102a4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80102a6:	2301      	movs	r3, #1
 80102a8:	617b      	str	r3, [r7, #20]
 80102aa:	2300      	movs	r3, #0
 80102ac:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80102ae:	79fb      	ldrb	r3, [r7, #7]
 80102b0:	461a      	mov	r2, r3
 80102b2:	6939      	ldr	r1, [r7, #16]
 80102b4:	6978      	ldr	r0, [r7, #20]
 80102b6:	f7ff ff7b 	bl	80101b0 <xQueueGenericCreate>
 80102ba:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80102bc:	68f8      	ldr	r0, [r7, #12]
 80102be:	f7ff ffd3 	bl	8010268 <prvInitialiseMutex>

		return pxNewQueue;
 80102c2:	68fb      	ldr	r3, [r7, #12]
	}
 80102c4:	4618      	mov	r0, r3
 80102c6:	3718      	adds	r7, #24
 80102c8:	46bd      	mov	sp, r7
 80102ca:	bd80      	pop	{r7, pc}

080102cc <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80102cc:	b580      	push	{r7, lr}
 80102ce:	b088      	sub	sp, #32
 80102d0:	af02      	add	r7, sp, #8
 80102d2:	4603      	mov	r3, r0
 80102d4:	6039      	str	r1, [r7, #0]
 80102d6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80102d8:	2301      	movs	r3, #1
 80102da:	617b      	str	r3, [r7, #20]
 80102dc:	2300      	movs	r3, #0
 80102de:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80102e0:	79fb      	ldrb	r3, [r7, #7]
 80102e2:	9300      	str	r3, [sp, #0]
 80102e4:	683b      	ldr	r3, [r7, #0]
 80102e6:	2200      	movs	r2, #0
 80102e8:	6939      	ldr	r1, [r7, #16]
 80102ea:	6978      	ldr	r0, [r7, #20]
 80102ec:	f7ff feee 	bl	80100cc <xQueueGenericCreateStatic>
 80102f0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80102f2:	68f8      	ldr	r0, [r7, #12]
 80102f4:	f7ff ffb8 	bl	8010268 <prvInitialiseMutex>

		return pxNewQueue;
 80102f8:	68fb      	ldr	r3, [r7, #12]
	}
 80102fa:	4618      	mov	r0, r3
 80102fc:	3718      	adds	r7, #24
 80102fe:	46bd      	mov	sp, r7
 8010300:	bd80      	pop	{r7, pc}
	...

08010304 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8010304:	b580      	push	{r7, lr}
 8010306:	b08e      	sub	sp, #56	; 0x38
 8010308:	af00      	add	r7, sp, #0
 801030a:	60f8      	str	r0, [r7, #12]
 801030c:	60b9      	str	r1, [r7, #8]
 801030e:	607a      	str	r2, [r7, #4]
 8010310:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8010312:	2300      	movs	r3, #0
 8010314:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801031a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801031c:	2b00      	cmp	r3, #0
 801031e:	d109      	bne.n	8010334 <xQueueGenericSend+0x30>
 8010320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010324:	f383 8811 	msr	BASEPRI, r3
 8010328:	f3bf 8f6f 	isb	sy
 801032c:	f3bf 8f4f 	dsb	sy
 8010330:	62bb      	str	r3, [r7, #40]	; 0x28
 8010332:	e7fe      	b.n	8010332 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010334:	68bb      	ldr	r3, [r7, #8]
 8010336:	2b00      	cmp	r3, #0
 8010338:	d103      	bne.n	8010342 <xQueueGenericSend+0x3e>
 801033a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801033c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801033e:	2b00      	cmp	r3, #0
 8010340:	d101      	bne.n	8010346 <xQueueGenericSend+0x42>
 8010342:	2301      	movs	r3, #1
 8010344:	e000      	b.n	8010348 <xQueueGenericSend+0x44>
 8010346:	2300      	movs	r3, #0
 8010348:	2b00      	cmp	r3, #0
 801034a:	d109      	bne.n	8010360 <xQueueGenericSend+0x5c>
 801034c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010350:	f383 8811 	msr	BASEPRI, r3
 8010354:	f3bf 8f6f 	isb	sy
 8010358:	f3bf 8f4f 	dsb	sy
 801035c:	627b      	str	r3, [r7, #36]	; 0x24
 801035e:	e7fe      	b.n	801035e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010360:	683b      	ldr	r3, [r7, #0]
 8010362:	2b02      	cmp	r3, #2
 8010364:	d103      	bne.n	801036e <xQueueGenericSend+0x6a>
 8010366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801036a:	2b01      	cmp	r3, #1
 801036c:	d101      	bne.n	8010372 <xQueueGenericSend+0x6e>
 801036e:	2301      	movs	r3, #1
 8010370:	e000      	b.n	8010374 <xQueueGenericSend+0x70>
 8010372:	2300      	movs	r3, #0
 8010374:	2b00      	cmp	r3, #0
 8010376:	d109      	bne.n	801038c <xQueueGenericSend+0x88>
 8010378:	f04f 0350 	mov.w	r3, #80	; 0x50
 801037c:	f383 8811 	msr	BASEPRI, r3
 8010380:	f3bf 8f6f 	isb	sy
 8010384:	f3bf 8f4f 	dsb	sy
 8010388:	623b      	str	r3, [r7, #32]
 801038a:	e7fe      	b.n	801038a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801038c:	f001 fb14 	bl	80119b8 <xTaskGetSchedulerState>
 8010390:	4603      	mov	r3, r0
 8010392:	2b00      	cmp	r3, #0
 8010394:	d102      	bne.n	801039c <xQueueGenericSend+0x98>
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	2b00      	cmp	r3, #0
 801039a:	d101      	bne.n	80103a0 <xQueueGenericSend+0x9c>
 801039c:	2301      	movs	r3, #1
 801039e:	e000      	b.n	80103a2 <xQueueGenericSend+0x9e>
 80103a0:	2300      	movs	r3, #0
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d109      	bne.n	80103ba <xQueueGenericSend+0xb6>
 80103a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103aa:	f383 8811 	msr	BASEPRI, r3
 80103ae:	f3bf 8f6f 	isb	sy
 80103b2:	f3bf 8f4f 	dsb	sy
 80103b6:	61fb      	str	r3, [r7, #28]
 80103b8:	e7fe      	b.n	80103b8 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80103ba:	f002 f827 	bl	801240c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80103be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80103c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80103c6:	429a      	cmp	r2, r3
 80103c8:	d302      	bcc.n	80103d0 <xQueueGenericSend+0xcc>
 80103ca:	683b      	ldr	r3, [r7, #0]
 80103cc:	2b02      	cmp	r3, #2
 80103ce:	d129      	bne.n	8010424 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80103d0:	683a      	ldr	r2, [r7, #0]
 80103d2:	68b9      	ldr	r1, [r7, #8]
 80103d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80103d6:	f000 fc26 	bl	8010c26 <prvCopyDataToQueue>
 80103da:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80103dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d010      	beq.n	8010406 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80103e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103e6:	3324      	adds	r3, #36	; 0x24
 80103e8:	4618      	mov	r0, r3
 80103ea:	f001 f929 	bl	8011640 <xTaskRemoveFromEventList>
 80103ee:	4603      	mov	r3, r0
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d013      	beq.n	801041c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80103f4:	4b3f      	ldr	r3, [pc, #252]	; (80104f4 <xQueueGenericSend+0x1f0>)
 80103f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80103fa:	601a      	str	r2, [r3, #0]
 80103fc:	f3bf 8f4f 	dsb	sy
 8010400:	f3bf 8f6f 	isb	sy
 8010404:	e00a      	b.n	801041c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8010406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010408:	2b00      	cmp	r3, #0
 801040a:	d007      	beq.n	801041c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801040c:	4b39      	ldr	r3, [pc, #228]	; (80104f4 <xQueueGenericSend+0x1f0>)
 801040e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010412:	601a      	str	r2, [r3, #0]
 8010414:	f3bf 8f4f 	dsb	sy
 8010418:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801041c:	f002 f824 	bl	8012468 <vPortExitCritical>
				return pdPASS;
 8010420:	2301      	movs	r3, #1
 8010422:	e063      	b.n	80104ec <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	2b00      	cmp	r3, #0
 8010428:	d103      	bne.n	8010432 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801042a:	f002 f81d 	bl	8012468 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801042e:	2300      	movs	r3, #0
 8010430:	e05c      	b.n	80104ec <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010434:	2b00      	cmp	r3, #0
 8010436:	d106      	bne.n	8010446 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010438:	f107 0314 	add.w	r3, r7, #20
 801043c:	4618      	mov	r0, r3
 801043e:	f001 f961 	bl	8011704 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010442:	2301      	movs	r3, #1
 8010444:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010446:	f002 f80f 	bl	8012468 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801044a:	f000 ff15 	bl	8011278 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801044e:	f001 ffdd 	bl	801240c <vPortEnterCritical>
 8010452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010454:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010458:	b25b      	sxtb	r3, r3
 801045a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801045e:	d103      	bne.n	8010468 <xQueueGenericSend+0x164>
 8010460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010462:	2200      	movs	r2, #0
 8010464:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801046a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801046e:	b25b      	sxtb	r3, r3
 8010470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010474:	d103      	bne.n	801047e <xQueueGenericSend+0x17a>
 8010476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010478:	2200      	movs	r2, #0
 801047a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801047e:	f001 fff3 	bl	8012468 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010482:	1d3a      	adds	r2, r7, #4
 8010484:	f107 0314 	add.w	r3, r7, #20
 8010488:	4611      	mov	r1, r2
 801048a:	4618      	mov	r0, r3
 801048c:	f001 f950 	bl	8011730 <xTaskCheckForTimeOut>
 8010490:	4603      	mov	r3, r0
 8010492:	2b00      	cmp	r3, #0
 8010494:	d124      	bne.n	80104e0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010496:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010498:	f000 fcbd 	bl	8010e16 <prvIsQueueFull>
 801049c:	4603      	mov	r3, r0
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d018      	beq.n	80104d4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80104a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104a4:	3310      	adds	r3, #16
 80104a6:	687a      	ldr	r2, [r7, #4]
 80104a8:	4611      	mov	r1, r2
 80104aa:	4618      	mov	r0, r3
 80104ac:	f001 f8a4 	bl	80115f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80104b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80104b2:	f000 fc48 	bl	8010d46 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80104b6:	f000 feed 	bl	8011294 <xTaskResumeAll>
 80104ba:	4603      	mov	r3, r0
 80104bc:	2b00      	cmp	r3, #0
 80104be:	f47f af7c 	bne.w	80103ba <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80104c2:	4b0c      	ldr	r3, [pc, #48]	; (80104f4 <xQueueGenericSend+0x1f0>)
 80104c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80104c8:	601a      	str	r2, [r3, #0]
 80104ca:	f3bf 8f4f 	dsb	sy
 80104ce:	f3bf 8f6f 	isb	sy
 80104d2:	e772      	b.n	80103ba <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80104d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80104d6:	f000 fc36 	bl	8010d46 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80104da:	f000 fedb 	bl	8011294 <xTaskResumeAll>
 80104de:	e76c      	b.n	80103ba <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80104e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80104e2:	f000 fc30 	bl	8010d46 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80104e6:	f000 fed5 	bl	8011294 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80104ea:	2300      	movs	r3, #0
		}
	}
}
 80104ec:	4618      	mov	r0, r3
 80104ee:	3738      	adds	r7, #56	; 0x38
 80104f0:	46bd      	mov	sp, r7
 80104f2:	bd80      	pop	{r7, pc}
 80104f4:	e000ed04 	.word	0xe000ed04

080104f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80104f8:	b580      	push	{r7, lr}
 80104fa:	b08e      	sub	sp, #56	; 0x38
 80104fc:	af00      	add	r7, sp, #0
 80104fe:	60f8      	str	r0, [r7, #12]
 8010500:	60b9      	str	r1, [r7, #8]
 8010502:	607a      	str	r2, [r7, #4]
 8010504:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801050a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801050c:	2b00      	cmp	r3, #0
 801050e:	d109      	bne.n	8010524 <xQueueGenericSendFromISR+0x2c>
 8010510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010514:	f383 8811 	msr	BASEPRI, r3
 8010518:	f3bf 8f6f 	isb	sy
 801051c:	f3bf 8f4f 	dsb	sy
 8010520:	627b      	str	r3, [r7, #36]	; 0x24
 8010522:	e7fe      	b.n	8010522 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010524:	68bb      	ldr	r3, [r7, #8]
 8010526:	2b00      	cmp	r3, #0
 8010528:	d103      	bne.n	8010532 <xQueueGenericSendFromISR+0x3a>
 801052a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801052c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801052e:	2b00      	cmp	r3, #0
 8010530:	d101      	bne.n	8010536 <xQueueGenericSendFromISR+0x3e>
 8010532:	2301      	movs	r3, #1
 8010534:	e000      	b.n	8010538 <xQueueGenericSendFromISR+0x40>
 8010536:	2300      	movs	r3, #0
 8010538:	2b00      	cmp	r3, #0
 801053a:	d109      	bne.n	8010550 <xQueueGenericSendFromISR+0x58>
 801053c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010540:	f383 8811 	msr	BASEPRI, r3
 8010544:	f3bf 8f6f 	isb	sy
 8010548:	f3bf 8f4f 	dsb	sy
 801054c:	623b      	str	r3, [r7, #32]
 801054e:	e7fe      	b.n	801054e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010550:	683b      	ldr	r3, [r7, #0]
 8010552:	2b02      	cmp	r3, #2
 8010554:	d103      	bne.n	801055e <xQueueGenericSendFromISR+0x66>
 8010556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801055a:	2b01      	cmp	r3, #1
 801055c:	d101      	bne.n	8010562 <xQueueGenericSendFromISR+0x6a>
 801055e:	2301      	movs	r3, #1
 8010560:	e000      	b.n	8010564 <xQueueGenericSendFromISR+0x6c>
 8010562:	2300      	movs	r3, #0
 8010564:	2b00      	cmp	r3, #0
 8010566:	d109      	bne.n	801057c <xQueueGenericSendFromISR+0x84>
 8010568:	f04f 0350 	mov.w	r3, #80	; 0x50
 801056c:	f383 8811 	msr	BASEPRI, r3
 8010570:	f3bf 8f6f 	isb	sy
 8010574:	f3bf 8f4f 	dsb	sy
 8010578:	61fb      	str	r3, [r7, #28]
 801057a:	e7fe      	b.n	801057a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801057c:	f002 f822 	bl	80125c4 <vPortValidateInterruptPriority>
	__asm volatile
 8010580:	f3ef 8211 	mrs	r2, BASEPRI
 8010584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010588:	f383 8811 	msr	BASEPRI, r3
 801058c:	f3bf 8f6f 	isb	sy
 8010590:	f3bf 8f4f 	dsb	sy
 8010594:	61ba      	str	r2, [r7, #24]
 8010596:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8010598:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801059a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801059c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801059e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80105a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80105a4:	429a      	cmp	r2, r3
 80105a6:	d302      	bcc.n	80105ae <xQueueGenericSendFromISR+0xb6>
 80105a8:	683b      	ldr	r3, [r7, #0]
 80105aa:	2b02      	cmp	r3, #2
 80105ac:	d12c      	bne.n	8010608 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80105ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80105b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80105b8:	683a      	ldr	r2, [r7, #0]
 80105ba:	68b9      	ldr	r1, [r7, #8]
 80105bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80105be:	f000 fb32 	bl	8010c26 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80105c2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80105c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105ca:	d112      	bne.n	80105f2 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80105cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d016      	beq.n	8010602 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80105d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105d6:	3324      	adds	r3, #36	; 0x24
 80105d8:	4618      	mov	r0, r3
 80105da:	f001 f831 	bl	8011640 <xTaskRemoveFromEventList>
 80105de:	4603      	mov	r3, r0
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d00e      	beq.n	8010602 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d00b      	beq.n	8010602 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	2201      	movs	r2, #1
 80105ee:	601a      	str	r2, [r3, #0]
 80105f0:	e007      	b.n	8010602 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80105f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80105f6:	3301      	adds	r3, #1
 80105f8:	b2db      	uxtb	r3, r3
 80105fa:	b25a      	sxtb	r2, r3
 80105fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010602:	2301      	movs	r3, #1
 8010604:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8010606:	e001      	b.n	801060c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010608:	2300      	movs	r3, #0
 801060a:	637b      	str	r3, [r7, #52]	; 0x34
 801060c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801060e:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010610:	693b      	ldr	r3, [r7, #16]
 8010612:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010618:	4618      	mov	r0, r3
 801061a:	3738      	adds	r7, #56	; 0x38
 801061c:	46bd      	mov	sp, r7
 801061e:	bd80      	pop	{r7, pc}

08010620 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010620:	b580      	push	{r7, lr}
 8010622:	b08e      	sub	sp, #56	; 0x38
 8010624:	af00      	add	r7, sp, #0
 8010626:	6078      	str	r0, [r7, #4]
 8010628:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 801062e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010630:	2b00      	cmp	r3, #0
 8010632:	d109      	bne.n	8010648 <xQueueGiveFromISR+0x28>
	__asm volatile
 8010634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010638:	f383 8811 	msr	BASEPRI, r3
 801063c:	f3bf 8f6f 	isb	sy
 8010640:	f3bf 8f4f 	dsb	sy
 8010644:	623b      	str	r3, [r7, #32]
 8010646:	e7fe      	b.n	8010646 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801064a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801064c:	2b00      	cmp	r3, #0
 801064e:	d009      	beq.n	8010664 <xQueueGiveFromISR+0x44>
 8010650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010654:	f383 8811 	msr	BASEPRI, r3
 8010658:	f3bf 8f6f 	isb	sy
 801065c:	f3bf 8f4f 	dsb	sy
 8010660:	61fb      	str	r3, [r7, #28]
 8010662:	e7fe      	b.n	8010662 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8010664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	2b00      	cmp	r3, #0
 801066a:	d103      	bne.n	8010674 <xQueueGiveFromISR+0x54>
 801066c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801066e:	685b      	ldr	r3, [r3, #4]
 8010670:	2b00      	cmp	r3, #0
 8010672:	d101      	bne.n	8010678 <xQueueGiveFromISR+0x58>
 8010674:	2301      	movs	r3, #1
 8010676:	e000      	b.n	801067a <xQueueGiveFromISR+0x5a>
 8010678:	2300      	movs	r3, #0
 801067a:	2b00      	cmp	r3, #0
 801067c:	d109      	bne.n	8010692 <xQueueGiveFromISR+0x72>
 801067e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010682:	f383 8811 	msr	BASEPRI, r3
 8010686:	f3bf 8f6f 	isb	sy
 801068a:	f3bf 8f4f 	dsb	sy
 801068e:	61bb      	str	r3, [r7, #24]
 8010690:	e7fe      	b.n	8010690 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010692:	f001 ff97 	bl	80125c4 <vPortValidateInterruptPriority>
	__asm volatile
 8010696:	f3ef 8211 	mrs	r2, BASEPRI
 801069a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801069e:	f383 8811 	msr	BASEPRI, r3
 80106a2:	f3bf 8f6f 	isb	sy
 80106a6:	f3bf 8f4f 	dsb	sy
 80106aa:	617a      	str	r2, [r7, #20]
 80106ac:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80106ae:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80106b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80106b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80106b6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80106b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80106bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80106be:	429a      	cmp	r2, r3
 80106c0:	d22b      	bcs.n	801071a <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80106c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80106c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80106cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106ce:	1c5a      	adds	r2, r3, #1
 80106d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106d2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80106d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80106d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106dc:	d112      	bne.n	8010704 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80106de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d016      	beq.n	8010714 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80106e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106e8:	3324      	adds	r3, #36	; 0x24
 80106ea:	4618      	mov	r0, r3
 80106ec:	f000 ffa8 	bl	8011640 <xTaskRemoveFromEventList>
 80106f0:	4603      	mov	r3, r0
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d00e      	beq.n	8010714 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80106f6:	683b      	ldr	r3, [r7, #0]
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d00b      	beq.n	8010714 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80106fc:	683b      	ldr	r3, [r7, #0]
 80106fe:	2201      	movs	r2, #1
 8010700:	601a      	str	r2, [r3, #0]
 8010702:	e007      	b.n	8010714 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010704:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010708:	3301      	adds	r3, #1
 801070a:	b2db      	uxtb	r3, r3
 801070c:	b25a      	sxtb	r2, r3
 801070e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010710:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010714:	2301      	movs	r3, #1
 8010716:	637b      	str	r3, [r7, #52]	; 0x34
 8010718:	e001      	b.n	801071e <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801071a:	2300      	movs	r3, #0
 801071c:	637b      	str	r3, [r7, #52]	; 0x34
 801071e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010720:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801072a:	4618      	mov	r0, r3
 801072c:	3738      	adds	r7, #56	; 0x38
 801072e:	46bd      	mov	sp, r7
 8010730:	bd80      	pop	{r7, pc}
	...

08010734 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010734:	b580      	push	{r7, lr}
 8010736:	b08c      	sub	sp, #48	; 0x30
 8010738:	af00      	add	r7, sp, #0
 801073a:	60f8      	str	r0, [r7, #12]
 801073c:	60b9      	str	r1, [r7, #8]
 801073e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010740:	2300      	movs	r3, #0
 8010742:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8010744:	68fb      	ldr	r3, [r7, #12]
 8010746:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801074a:	2b00      	cmp	r3, #0
 801074c:	d109      	bne.n	8010762 <xQueueReceive+0x2e>
	__asm volatile
 801074e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010752:	f383 8811 	msr	BASEPRI, r3
 8010756:	f3bf 8f6f 	isb	sy
 801075a:	f3bf 8f4f 	dsb	sy
 801075e:	623b      	str	r3, [r7, #32]
 8010760:	e7fe      	b.n	8010760 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010762:	68bb      	ldr	r3, [r7, #8]
 8010764:	2b00      	cmp	r3, #0
 8010766:	d103      	bne.n	8010770 <xQueueReceive+0x3c>
 8010768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801076a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801076c:	2b00      	cmp	r3, #0
 801076e:	d101      	bne.n	8010774 <xQueueReceive+0x40>
 8010770:	2301      	movs	r3, #1
 8010772:	e000      	b.n	8010776 <xQueueReceive+0x42>
 8010774:	2300      	movs	r3, #0
 8010776:	2b00      	cmp	r3, #0
 8010778:	d109      	bne.n	801078e <xQueueReceive+0x5a>
 801077a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801077e:	f383 8811 	msr	BASEPRI, r3
 8010782:	f3bf 8f6f 	isb	sy
 8010786:	f3bf 8f4f 	dsb	sy
 801078a:	61fb      	str	r3, [r7, #28]
 801078c:	e7fe      	b.n	801078c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801078e:	f001 f913 	bl	80119b8 <xTaskGetSchedulerState>
 8010792:	4603      	mov	r3, r0
 8010794:	2b00      	cmp	r3, #0
 8010796:	d102      	bne.n	801079e <xQueueReceive+0x6a>
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	2b00      	cmp	r3, #0
 801079c:	d101      	bne.n	80107a2 <xQueueReceive+0x6e>
 801079e:	2301      	movs	r3, #1
 80107a0:	e000      	b.n	80107a4 <xQueueReceive+0x70>
 80107a2:	2300      	movs	r3, #0
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d109      	bne.n	80107bc <xQueueReceive+0x88>
 80107a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107ac:	f383 8811 	msr	BASEPRI, r3
 80107b0:	f3bf 8f6f 	isb	sy
 80107b4:	f3bf 8f4f 	dsb	sy
 80107b8:	61bb      	str	r3, [r7, #24]
 80107ba:	e7fe      	b.n	80107ba <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80107bc:	f001 fe26 	bl	801240c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80107c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80107c4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80107c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d01f      	beq.n	801080c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80107cc:	68b9      	ldr	r1, [r7, #8]
 80107ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80107d0:	f000 fa93 	bl	8010cfa <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80107d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107d6:	1e5a      	subs	r2, r3, #1
 80107d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107da:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80107dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107de:	691b      	ldr	r3, [r3, #16]
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d00f      	beq.n	8010804 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80107e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107e6:	3310      	adds	r3, #16
 80107e8:	4618      	mov	r0, r3
 80107ea:	f000 ff29 	bl	8011640 <xTaskRemoveFromEventList>
 80107ee:	4603      	mov	r3, r0
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d007      	beq.n	8010804 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80107f4:	4b3c      	ldr	r3, [pc, #240]	; (80108e8 <xQueueReceive+0x1b4>)
 80107f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80107fa:	601a      	str	r2, [r3, #0]
 80107fc:	f3bf 8f4f 	dsb	sy
 8010800:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010804:	f001 fe30 	bl	8012468 <vPortExitCritical>
				return pdPASS;
 8010808:	2301      	movs	r3, #1
 801080a:	e069      	b.n	80108e0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	2b00      	cmp	r3, #0
 8010810:	d103      	bne.n	801081a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010812:	f001 fe29 	bl	8012468 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010816:	2300      	movs	r3, #0
 8010818:	e062      	b.n	80108e0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 801081a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801081c:	2b00      	cmp	r3, #0
 801081e:	d106      	bne.n	801082e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010820:	f107 0310 	add.w	r3, r7, #16
 8010824:	4618      	mov	r0, r3
 8010826:	f000 ff6d 	bl	8011704 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801082a:	2301      	movs	r3, #1
 801082c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801082e:	f001 fe1b 	bl	8012468 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010832:	f000 fd21 	bl	8011278 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010836:	f001 fde9 	bl	801240c <vPortEnterCritical>
 801083a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801083c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010840:	b25b      	sxtb	r3, r3
 8010842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010846:	d103      	bne.n	8010850 <xQueueReceive+0x11c>
 8010848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801084a:	2200      	movs	r2, #0
 801084c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010852:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010856:	b25b      	sxtb	r3, r3
 8010858:	f1b3 3fff 	cmp.w	r3, #4294967295
 801085c:	d103      	bne.n	8010866 <xQueueReceive+0x132>
 801085e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010860:	2200      	movs	r2, #0
 8010862:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010866:	f001 fdff 	bl	8012468 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801086a:	1d3a      	adds	r2, r7, #4
 801086c:	f107 0310 	add.w	r3, r7, #16
 8010870:	4611      	mov	r1, r2
 8010872:	4618      	mov	r0, r3
 8010874:	f000 ff5c 	bl	8011730 <xTaskCheckForTimeOut>
 8010878:	4603      	mov	r3, r0
 801087a:	2b00      	cmp	r3, #0
 801087c:	d123      	bne.n	80108c6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801087e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010880:	f000 fab3 	bl	8010dea <prvIsQueueEmpty>
 8010884:	4603      	mov	r3, r0
 8010886:	2b00      	cmp	r3, #0
 8010888:	d017      	beq.n	80108ba <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801088a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801088c:	3324      	adds	r3, #36	; 0x24
 801088e:	687a      	ldr	r2, [r7, #4]
 8010890:	4611      	mov	r1, r2
 8010892:	4618      	mov	r0, r3
 8010894:	f000 feb0 	bl	80115f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010898:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801089a:	f000 fa54 	bl	8010d46 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801089e:	f000 fcf9 	bl	8011294 <xTaskResumeAll>
 80108a2:	4603      	mov	r3, r0
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d189      	bne.n	80107bc <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80108a8:	4b0f      	ldr	r3, [pc, #60]	; (80108e8 <xQueueReceive+0x1b4>)
 80108aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80108ae:	601a      	str	r2, [r3, #0]
 80108b0:	f3bf 8f4f 	dsb	sy
 80108b4:	f3bf 8f6f 	isb	sy
 80108b8:	e780      	b.n	80107bc <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80108ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80108bc:	f000 fa43 	bl	8010d46 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80108c0:	f000 fce8 	bl	8011294 <xTaskResumeAll>
 80108c4:	e77a      	b.n	80107bc <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80108c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80108c8:	f000 fa3d 	bl	8010d46 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80108cc:	f000 fce2 	bl	8011294 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80108d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80108d2:	f000 fa8a 	bl	8010dea <prvIsQueueEmpty>
 80108d6:	4603      	mov	r3, r0
 80108d8:	2b00      	cmp	r3, #0
 80108da:	f43f af6f 	beq.w	80107bc <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80108de:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80108e0:	4618      	mov	r0, r3
 80108e2:	3730      	adds	r7, #48	; 0x30
 80108e4:	46bd      	mov	sp, r7
 80108e6:	bd80      	pop	{r7, pc}
 80108e8:	e000ed04 	.word	0xe000ed04

080108ec <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80108ec:	b580      	push	{r7, lr}
 80108ee:	b08e      	sub	sp, #56	; 0x38
 80108f0:	af00      	add	r7, sp, #0
 80108f2:	6078      	str	r0, [r7, #4]
 80108f4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80108f6:	2300      	movs	r3, #0
 80108f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80108fe:	2300      	movs	r3, #0
 8010900:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010904:	2b00      	cmp	r3, #0
 8010906:	d109      	bne.n	801091c <xQueueSemaphoreTake+0x30>
 8010908:	f04f 0350 	mov.w	r3, #80	; 0x50
 801090c:	f383 8811 	msr	BASEPRI, r3
 8010910:	f3bf 8f6f 	isb	sy
 8010914:	f3bf 8f4f 	dsb	sy
 8010918:	623b      	str	r3, [r7, #32]
 801091a:	e7fe      	b.n	801091a <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801091c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801091e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010920:	2b00      	cmp	r3, #0
 8010922:	d009      	beq.n	8010938 <xQueueSemaphoreTake+0x4c>
 8010924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010928:	f383 8811 	msr	BASEPRI, r3
 801092c:	f3bf 8f6f 	isb	sy
 8010930:	f3bf 8f4f 	dsb	sy
 8010934:	61fb      	str	r3, [r7, #28]
 8010936:	e7fe      	b.n	8010936 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010938:	f001 f83e 	bl	80119b8 <xTaskGetSchedulerState>
 801093c:	4603      	mov	r3, r0
 801093e:	2b00      	cmp	r3, #0
 8010940:	d102      	bne.n	8010948 <xQueueSemaphoreTake+0x5c>
 8010942:	683b      	ldr	r3, [r7, #0]
 8010944:	2b00      	cmp	r3, #0
 8010946:	d101      	bne.n	801094c <xQueueSemaphoreTake+0x60>
 8010948:	2301      	movs	r3, #1
 801094a:	e000      	b.n	801094e <xQueueSemaphoreTake+0x62>
 801094c:	2300      	movs	r3, #0
 801094e:	2b00      	cmp	r3, #0
 8010950:	d109      	bne.n	8010966 <xQueueSemaphoreTake+0x7a>
 8010952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010956:	f383 8811 	msr	BASEPRI, r3
 801095a:	f3bf 8f6f 	isb	sy
 801095e:	f3bf 8f4f 	dsb	sy
 8010962:	61bb      	str	r3, [r7, #24]
 8010964:	e7fe      	b.n	8010964 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8010966:	f001 fd51 	bl	801240c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801096a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801096c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801096e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8010970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010972:	2b00      	cmp	r3, #0
 8010974:	d024      	beq.n	80109c0 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8010976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010978:	1e5a      	subs	r2, r3, #1
 801097a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801097c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801097e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010980:	681b      	ldr	r3, [r3, #0]
 8010982:	2b00      	cmp	r3, #0
 8010984:	d104      	bne.n	8010990 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8010986:	f001 f9dd 	bl	8011d44 <pvTaskIncrementMutexHeldCount>
 801098a:	4602      	mov	r2, r0
 801098c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801098e:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010992:	691b      	ldr	r3, [r3, #16]
 8010994:	2b00      	cmp	r3, #0
 8010996:	d00f      	beq.n	80109b8 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801099a:	3310      	adds	r3, #16
 801099c:	4618      	mov	r0, r3
 801099e:	f000 fe4f 	bl	8011640 <xTaskRemoveFromEventList>
 80109a2:	4603      	mov	r3, r0
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d007      	beq.n	80109b8 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80109a8:	4b53      	ldr	r3, [pc, #332]	; (8010af8 <xQueueSemaphoreTake+0x20c>)
 80109aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80109ae:	601a      	str	r2, [r3, #0]
 80109b0:	f3bf 8f4f 	dsb	sy
 80109b4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80109b8:	f001 fd56 	bl	8012468 <vPortExitCritical>
				return pdPASS;
 80109bc:	2301      	movs	r3, #1
 80109be:	e096      	b.n	8010aee <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80109c0:	683b      	ldr	r3, [r7, #0]
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d110      	bne.n	80109e8 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80109c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d009      	beq.n	80109e0 <xQueueSemaphoreTake+0xf4>
 80109cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109d0:	f383 8811 	msr	BASEPRI, r3
 80109d4:	f3bf 8f6f 	isb	sy
 80109d8:	f3bf 8f4f 	dsb	sy
 80109dc:	617b      	str	r3, [r7, #20]
 80109de:	e7fe      	b.n	80109de <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80109e0:	f001 fd42 	bl	8012468 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80109e4:	2300      	movs	r3, #0
 80109e6:	e082      	b.n	8010aee <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 80109e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d106      	bne.n	80109fc <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80109ee:	f107 030c 	add.w	r3, r7, #12
 80109f2:	4618      	mov	r0, r3
 80109f4:	f000 fe86 	bl	8011704 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80109f8:	2301      	movs	r3, #1
 80109fa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80109fc:	f001 fd34 	bl	8012468 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010a00:	f000 fc3a 	bl	8011278 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010a04:	f001 fd02 	bl	801240c <vPortEnterCritical>
 8010a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010a0e:	b25b      	sxtb	r3, r3
 8010a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a14:	d103      	bne.n	8010a1e <xQueueSemaphoreTake+0x132>
 8010a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a18:	2200      	movs	r2, #0
 8010a1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010a24:	b25b      	sxtb	r3, r3
 8010a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a2a:	d103      	bne.n	8010a34 <xQueueSemaphoreTake+0x148>
 8010a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a2e:	2200      	movs	r2, #0
 8010a30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010a34:	f001 fd18 	bl	8012468 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010a38:	463a      	mov	r2, r7
 8010a3a:	f107 030c 	add.w	r3, r7, #12
 8010a3e:	4611      	mov	r1, r2
 8010a40:	4618      	mov	r0, r3
 8010a42:	f000 fe75 	bl	8011730 <xTaskCheckForTimeOut>
 8010a46:	4603      	mov	r3, r0
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d132      	bne.n	8010ab2 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010a4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010a4e:	f000 f9cc 	bl	8010dea <prvIsQueueEmpty>
 8010a52:	4603      	mov	r3, r0
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d026      	beq.n	8010aa6 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d109      	bne.n	8010a74 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8010a60:	f001 fcd4 	bl	801240c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8010a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a66:	685b      	ldr	r3, [r3, #4]
 8010a68:	4618      	mov	r0, r3
 8010a6a:	f000 ffc3 	bl	80119f4 <xTaskPriorityInherit>
 8010a6e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8010a70:	f001 fcfa 	bl	8012468 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a76:	3324      	adds	r3, #36	; 0x24
 8010a78:	683a      	ldr	r2, [r7, #0]
 8010a7a:	4611      	mov	r1, r2
 8010a7c:	4618      	mov	r0, r3
 8010a7e:	f000 fdbb 	bl	80115f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010a82:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010a84:	f000 f95f 	bl	8010d46 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010a88:	f000 fc04 	bl	8011294 <xTaskResumeAll>
 8010a8c:	4603      	mov	r3, r0
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	f47f af69 	bne.w	8010966 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8010a94:	4b18      	ldr	r3, [pc, #96]	; (8010af8 <xQueueSemaphoreTake+0x20c>)
 8010a96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a9a:	601a      	str	r2, [r3, #0]
 8010a9c:	f3bf 8f4f 	dsb	sy
 8010aa0:	f3bf 8f6f 	isb	sy
 8010aa4:	e75f      	b.n	8010966 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8010aa6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010aa8:	f000 f94d 	bl	8010d46 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010aac:	f000 fbf2 	bl	8011294 <xTaskResumeAll>
 8010ab0:	e759      	b.n	8010966 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8010ab2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010ab4:	f000 f947 	bl	8010d46 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010ab8:	f000 fbec 	bl	8011294 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010abc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010abe:	f000 f994 	bl	8010dea <prvIsQueueEmpty>
 8010ac2:	4603      	mov	r3, r0
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	f43f af4e 	beq.w	8010966 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8010aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d00d      	beq.n	8010aec <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8010ad0:	f001 fc9c 	bl	801240c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8010ad4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010ad6:	f000 f88e 	bl	8010bf6 <prvGetDisinheritPriorityAfterTimeout>
 8010ada:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8010adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ade:	685b      	ldr	r3, [r3, #4]
 8010ae0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010ae2:	4618      	mov	r0, r3
 8010ae4:	f001 f890 	bl	8011c08 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8010ae8:	f001 fcbe 	bl	8012468 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010aec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8010aee:	4618      	mov	r0, r3
 8010af0:	3738      	adds	r7, #56	; 0x38
 8010af2:	46bd      	mov	sp, r7
 8010af4:	bd80      	pop	{r7, pc}
 8010af6:	bf00      	nop
 8010af8:	e000ed04 	.word	0xe000ed04

08010afc <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010afc:	b580      	push	{r7, lr}
 8010afe:	b08e      	sub	sp, #56	; 0x38
 8010b00:	af00      	add	r7, sp, #0
 8010b02:	60f8      	str	r0, [r7, #12]
 8010b04:	60b9      	str	r1, [r7, #8]
 8010b06:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d109      	bne.n	8010b26 <xQueueReceiveFromISR+0x2a>
 8010b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b16:	f383 8811 	msr	BASEPRI, r3
 8010b1a:	f3bf 8f6f 	isb	sy
 8010b1e:	f3bf 8f4f 	dsb	sy
 8010b22:	623b      	str	r3, [r7, #32]
 8010b24:	e7fe      	b.n	8010b24 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010b26:	68bb      	ldr	r3, [r7, #8]
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	d103      	bne.n	8010b34 <xQueueReceiveFromISR+0x38>
 8010b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d101      	bne.n	8010b38 <xQueueReceiveFromISR+0x3c>
 8010b34:	2301      	movs	r3, #1
 8010b36:	e000      	b.n	8010b3a <xQueueReceiveFromISR+0x3e>
 8010b38:	2300      	movs	r3, #0
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d109      	bne.n	8010b52 <xQueueReceiveFromISR+0x56>
 8010b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b42:	f383 8811 	msr	BASEPRI, r3
 8010b46:	f3bf 8f6f 	isb	sy
 8010b4a:	f3bf 8f4f 	dsb	sy
 8010b4e:	61fb      	str	r3, [r7, #28]
 8010b50:	e7fe      	b.n	8010b50 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010b52:	f001 fd37 	bl	80125c4 <vPortValidateInterruptPriority>
	__asm volatile
 8010b56:	f3ef 8211 	mrs	r2, BASEPRI
 8010b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b5e:	f383 8811 	msr	BASEPRI, r3
 8010b62:	f3bf 8f6f 	isb	sy
 8010b66:	f3bf 8f4f 	dsb	sy
 8010b6a:	61ba      	str	r2, [r7, #24]
 8010b6c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8010b6e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010b70:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b76:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d02f      	beq.n	8010bde <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8010b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010b84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010b88:	68b9      	ldr	r1, [r7, #8]
 8010b8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010b8c:	f000 f8b5 	bl	8010cfa <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b92:	1e5a      	subs	r2, r3, #1
 8010b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b96:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8010b98:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ba0:	d112      	bne.n	8010bc8 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ba4:	691b      	ldr	r3, [r3, #16]
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d016      	beq.n	8010bd8 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bac:	3310      	adds	r3, #16
 8010bae:	4618      	mov	r0, r3
 8010bb0:	f000 fd46 	bl	8011640 <xTaskRemoveFromEventList>
 8010bb4:	4603      	mov	r3, r0
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d00e      	beq.n	8010bd8 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d00b      	beq.n	8010bd8 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	2201      	movs	r2, #1
 8010bc4:	601a      	str	r2, [r3, #0]
 8010bc6:	e007      	b.n	8010bd8 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8010bc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010bcc:	3301      	adds	r3, #1
 8010bce:	b2db      	uxtb	r3, r3
 8010bd0:	b25a      	sxtb	r2, r3
 8010bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8010bd8:	2301      	movs	r3, #1
 8010bda:	637b      	str	r3, [r7, #52]	; 0x34
 8010bdc:	e001      	b.n	8010be2 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8010bde:	2300      	movs	r3, #0
 8010be0:	637b      	str	r3, [r7, #52]	; 0x34
 8010be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010be4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010be6:	693b      	ldr	r3, [r7, #16]
 8010be8:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010bee:	4618      	mov	r0, r3
 8010bf0:	3738      	adds	r7, #56	; 0x38
 8010bf2:	46bd      	mov	sp, r7
 8010bf4:	bd80      	pop	{r7, pc}

08010bf6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8010bf6:	b480      	push	{r7}
 8010bf8:	b085      	sub	sp, #20
 8010bfa:	af00      	add	r7, sp, #0
 8010bfc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d006      	beq.n	8010c14 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	f1c3 0307 	rsb	r3, r3, #7
 8010c10:	60fb      	str	r3, [r7, #12]
 8010c12:	e001      	b.n	8010c18 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8010c14:	2300      	movs	r3, #0
 8010c16:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8010c18:	68fb      	ldr	r3, [r7, #12]
	}
 8010c1a:	4618      	mov	r0, r3
 8010c1c:	3714      	adds	r7, #20
 8010c1e:	46bd      	mov	sp, r7
 8010c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c24:	4770      	bx	lr

08010c26 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010c26:	b580      	push	{r7, lr}
 8010c28:	b086      	sub	sp, #24
 8010c2a:	af00      	add	r7, sp, #0
 8010c2c:	60f8      	str	r0, [r7, #12]
 8010c2e:	60b9      	str	r1, [r7, #8]
 8010c30:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010c32:	2300      	movs	r3, #0
 8010c34:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c3a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010c3c:	68fb      	ldr	r3, [r7, #12]
 8010c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d10d      	bne.n	8010c60 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010c44:	68fb      	ldr	r3, [r7, #12]
 8010c46:	681b      	ldr	r3, [r3, #0]
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	d14d      	bne.n	8010ce8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8010c4c:	68fb      	ldr	r3, [r7, #12]
 8010c4e:	685b      	ldr	r3, [r3, #4]
 8010c50:	4618      	mov	r0, r3
 8010c52:	f000 ff55 	bl	8011b00 <xTaskPriorityDisinherit>
 8010c56:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	2200      	movs	r2, #0
 8010c5c:	605a      	str	r2, [r3, #4]
 8010c5e:	e043      	b.n	8010ce8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d119      	bne.n	8010c9a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	6898      	ldr	r0, [r3, #8]
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c6e:	461a      	mov	r2, r3
 8010c70:	68b9      	ldr	r1, [r7, #8]
 8010c72:	f002 fc35 	bl	80134e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8010c76:	68fb      	ldr	r3, [r7, #12]
 8010c78:	689a      	ldr	r2, [r3, #8]
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c7e:	441a      	add	r2, r3
 8010c80:	68fb      	ldr	r3, [r7, #12]
 8010c82:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	689a      	ldr	r2, [r3, #8]
 8010c88:	68fb      	ldr	r3, [r7, #12]
 8010c8a:	685b      	ldr	r3, [r3, #4]
 8010c8c:	429a      	cmp	r2, r3
 8010c8e:	d32b      	bcc.n	8010ce8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010c90:	68fb      	ldr	r3, [r7, #12]
 8010c92:	681a      	ldr	r2, [r3, #0]
 8010c94:	68fb      	ldr	r3, [r7, #12]
 8010c96:	609a      	str	r2, [r3, #8]
 8010c98:	e026      	b.n	8010ce8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010c9a:	68fb      	ldr	r3, [r7, #12]
 8010c9c:	68d8      	ldr	r0, [r3, #12]
 8010c9e:	68fb      	ldr	r3, [r7, #12]
 8010ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ca2:	461a      	mov	r2, r3
 8010ca4:	68b9      	ldr	r1, [r7, #8]
 8010ca6:	f002 fc1b 	bl	80134e0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8010caa:	68fb      	ldr	r3, [r7, #12]
 8010cac:	68da      	ldr	r2, [r3, #12]
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010cb2:	425b      	negs	r3, r3
 8010cb4:	441a      	add	r2, r3
 8010cb6:	68fb      	ldr	r3, [r7, #12]
 8010cb8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010cba:	68fb      	ldr	r3, [r7, #12]
 8010cbc:	68da      	ldr	r2, [r3, #12]
 8010cbe:	68fb      	ldr	r3, [r7, #12]
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	429a      	cmp	r2, r3
 8010cc4:	d207      	bcs.n	8010cd6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	685a      	ldr	r2, [r3, #4]
 8010cca:	68fb      	ldr	r3, [r7, #12]
 8010ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010cce:	425b      	negs	r3, r3
 8010cd0:	441a      	add	r2, r3
 8010cd2:	68fb      	ldr	r3, [r7, #12]
 8010cd4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	2b02      	cmp	r3, #2
 8010cda:	d105      	bne.n	8010ce8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010cdc:	693b      	ldr	r3, [r7, #16]
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	d002      	beq.n	8010ce8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8010ce2:	693b      	ldr	r3, [r7, #16]
 8010ce4:	3b01      	subs	r3, #1
 8010ce6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010ce8:	693b      	ldr	r3, [r7, #16]
 8010cea:	1c5a      	adds	r2, r3, #1
 8010cec:	68fb      	ldr	r3, [r7, #12]
 8010cee:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8010cf0:	697b      	ldr	r3, [r7, #20]
}
 8010cf2:	4618      	mov	r0, r3
 8010cf4:	3718      	adds	r7, #24
 8010cf6:	46bd      	mov	sp, r7
 8010cf8:	bd80      	pop	{r7, pc}

08010cfa <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010cfa:	b580      	push	{r7, lr}
 8010cfc:	b082      	sub	sp, #8
 8010cfe:	af00      	add	r7, sp, #0
 8010d00:	6078      	str	r0, [r7, #4]
 8010d02:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d018      	beq.n	8010d3e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	68da      	ldr	r2, [r3, #12]
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d14:	441a      	add	r2, r3
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	68da      	ldr	r2, [r3, #12]
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	685b      	ldr	r3, [r3, #4]
 8010d22:	429a      	cmp	r2, r3
 8010d24:	d303      	bcc.n	8010d2e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	681a      	ldr	r2, [r3, #0]
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	68d9      	ldr	r1, [r3, #12]
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d36:	461a      	mov	r2, r3
 8010d38:	6838      	ldr	r0, [r7, #0]
 8010d3a:	f002 fbd1 	bl	80134e0 <memcpy>
	}
}
 8010d3e:	bf00      	nop
 8010d40:	3708      	adds	r7, #8
 8010d42:	46bd      	mov	sp, r7
 8010d44:	bd80      	pop	{r7, pc}

08010d46 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010d46:	b580      	push	{r7, lr}
 8010d48:	b084      	sub	sp, #16
 8010d4a:	af00      	add	r7, sp, #0
 8010d4c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010d4e:	f001 fb5d 	bl	801240c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010d58:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010d5a:	e011      	b.n	8010d80 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d012      	beq.n	8010d8a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	3324      	adds	r3, #36	; 0x24
 8010d68:	4618      	mov	r0, r3
 8010d6a:	f000 fc69 	bl	8011640 <xTaskRemoveFromEventList>
 8010d6e:	4603      	mov	r3, r0
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d001      	beq.n	8010d78 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010d74:	f000 fd3c 	bl	80117f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010d78:	7bfb      	ldrb	r3, [r7, #15]
 8010d7a:	3b01      	subs	r3, #1
 8010d7c:	b2db      	uxtb	r3, r3
 8010d7e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010d80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	dce9      	bgt.n	8010d5c <prvUnlockQueue+0x16>
 8010d88:	e000      	b.n	8010d8c <prvUnlockQueue+0x46>
					break;
 8010d8a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	22ff      	movs	r2, #255	; 0xff
 8010d90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8010d94:	f001 fb68 	bl	8012468 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010d98:	f001 fb38 	bl	801240c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010da2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010da4:	e011      	b.n	8010dca <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	691b      	ldr	r3, [r3, #16]
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d012      	beq.n	8010dd4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	3310      	adds	r3, #16
 8010db2:	4618      	mov	r0, r3
 8010db4:	f000 fc44 	bl	8011640 <xTaskRemoveFromEventList>
 8010db8:	4603      	mov	r3, r0
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d001      	beq.n	8010dc2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010dbe:	f000 fd17 	bl	80117f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010dc2:	7bbb      	ldrb	r3, [r7, #14]
 8010dc4:	3b01      	subs	r3, #1
 8010dc6:	b2db      	uxtb	r3, r3
 8010dc8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010dca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	dce9      	bgt.n	8010da6 <prvUnlockQueue+0x60>
 8010dd2:	e000      	b.n	8010dd6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010dd4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	22ff      	movs	r2, #255	; 0xff
 8010dda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8010dde:	f001 fb43 	bl	8012468 <vPortExitCritical>
}
 8010de2:	bf00      	nop
 8010de4:	3710      	adds	r7, #16
 8010de6:	46bd      	mov	sp, r7
 8010de8:	bd80      	pop	{r7, pc}

08010dea <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010dea:	b580      	push	{r7, lr}
 8010dec:	b084      	sub	sp, #16
 8010dee:	af00      	add	r7, sp, #0
 8010df0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010df2:	f001 fb0b 	bl	801240c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d102      	bne.n	8010e04 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010dfe:	2301      	movs	r3, #1
 8010e00:	60fb      	str	r3, [r7, #12]
 8010e02:	e001      	b.n	8010e08 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010e04:	2300      	movs	r3, #0
 8010e06:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010e08:	f001 fb2e 	bl	8012468 <vPortExitCritical>

	return xReturn;
 8010e0c:	68fb      	ldr	r3, [r7, #12]
}
 8010e0e:	4618      	mov	r0, r3
 8010e10:	3710      	adds	r7, #16
 8010e12:	46bd      	mov	sp, r7
 8010e14:	bd80      	pop	{r7, pc}

08010e16 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010e16:	b580      	push	{r7, lr}
 8010e18:	b084      	sub	sp, #16
 8010e1a:	af00      	add	r7, sp, #0
 8010e1c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010e1e:	f001 faf5 	bl	801240c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010e2a:	429a      	cmp	r2, r3
 8010e2c:	d102      	bne.n	8010e34 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010e2e:	2301      	movs	r3, #1
 8010e30:	60fb      	str	r3, [r7, #12]
 8010e32:	e001      	b.n	8010e38 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010e34:	2300      	movs	r3, #0
 8010e36:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010e38:	f001 fb16 	bl	8012468 <vPortExitCritical>

	return xReturn;
 8010e3c:	68fb      	ldr	r3, [r7, #12]
}
 8010e3e:	4618      	mov	r0, r3
 8010e40:	3710      	adds	r7, #16
 8010e42:	46bd      	mov	sp, r7
 8010e44:	bd80      	pop	{r7, pc}

08010e46 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010e46:	b580      	push	{r7, lr}
 8010e48:	b08e      	sub	sp, #56	; 0x38
 8010e4a:	af04      	add	r7, sp, #16
 8010e4c:	60f8      	str	r0, [r7, #12]
 8010e4e:	60b9      	str	r1, [r7, #8]
 8010e50:	607a      	str	r2, [r7, #4]
 8010e52:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8010e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d109      	bne.n	8010e6e <xTaskCreateStatic+0x28>
	__asm volatile
 8010e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e5e:	f383 8811 	msr	BASEPRI, r3
 8010e62:	f3bf 8f6f 	isb	sy
 8010e66:	f3bf 8f4f 	dsb	sy
 8010e6a:	623b      	str	r3, [r7, #32]
 8010e6c:	e7fe      	b.n	8010e6c <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8010e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d109      	bne.n	8010e88 <xTaskCreateStatic+0x42>
 8010e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e78:	f383 8811 	msr	BASEPRI, r3
 8010e7c:	f3bf 8f6f 	isb	sy
 8010e80:	f3bf 8f4f 	dsb	sy
 8010e84:	61fb      	str	r3, [r7, #28]
 8010e86:	e7fe      	b.n	8010e86 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010e88:	2354      	movs	r3, #84	; 0x54
 8010e8a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010e8c:	693b      	ldr	r3, [r7, #16]
 8010e8e:	2b54      	cmp	r3, #84	; 0x54
 8010e90:	d009      	beq.n	8010ea6 <xTaskCreateStatic+0x60>
 8010e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e96:	f383 8811 	msr	BASEPRI, r3
 8010e9a:	f3bf 8f6f 	isb	sy
 8010e9e:	f3bf 8f4f 	dsb	sy
 8010ea2:	61bb      	str	r3, [r7, #24]
 8010ea4:	e7fe      	b.n	8010ea4 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d01e      	beq.n	8010eea <xTaskCreateStatic+0xa4>
 8010eac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d01b      	beq.n	8010eea <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010eb4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010eba:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ebe:	2202      	movs	r2, #2
 8010ec0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010ec4:	2300      	movs	r3, #0
 8010ec6:	9303      	str	r3, [sp, #12]
 8010ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eca:	9302      	str	r3, [sp, #8]
 8010ecc:	f107 0314 	add.w	r3, r7, #20
 8010ed0:	9301      	str	r3, [sp, #4]
 8010ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ed4:	9300      	str	r3, [sp, #0]
 8010ed6:	683b      	ldr	r3, [r7, #0]
 8010ed8:	687a      	ldr	r2, [r7, #4]
 8010eda:	68b9      	ldr	r1, [r7, #8]
 8010edc:	68f8      	ldr	r0, [r7, #12]
 8010ede:	f000 f850 	bl	8010f82 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010ee2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010ee4:	f000 f8cc 	bl	8011080 <prvAddNewTaskToReadyList>
 8010ee8:	e001      	b.n	8010eee <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8010eea:	2300      	movs	r3, #0
 8010eec:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010eee:	697b      	ldr	r3, [r7, #20]
	}
 8010ef0:	4618      	mov	r0, r3
 8010ef2:	3728      	adds	r7, #40	; 0x28
 8010ef4:	46bd      	mov	sp, r7
 8010ef6:	bd80      	pop	{r7, pc}

08010ef8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010ef8:	b580      	push	{r7, lr}
 8010efa:	b08c      	sub	sp, #48	; 0x30
 8010efc:	af04      	add	r7, sp, #16
 8010efe:	60f8      	str	r0, [r7, #12]
 8010f00:	60b9      	str	r1, [r7, #8]
 8010f02:	603b      	str	r3, [r7, #0]
 8010f04:	4613      	mov	r3, r2
 8010f06:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010f08:	88fb      	ldrh	r3, [r7, #6]
 8010f0a:	009b      	lsls	r3, r3, #2
 8010f0c:	4618      	mov	r0, r3
 8010f0e:	f001 fb97 	bl	8012640 <pvPortMalloc>
 8010f12:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010f14:	697b      	ldr	r3, [r7, #20]
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d00e      	beq.n	8010f38 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8010f1a:	2054      	movs	r0, #84	; 0x54
 8010f1c:	f001 fb90 	bl	8012640 <pvPortMalloc>
 8010f20:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010f22:	69fb      	ldr	r3, [r7, #28]
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d003      	beq.n	8010f30 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010f28:	69fb      	ldr	r3, [r7, #28]
 8010f2a:	697a      	ldr	r2, [r7, #20]
 8010f2c:	631a      	str	r2, [r3, #48]	; 0x30
 8010f2e:	e005      	b.n	8010f3c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010f30:	6978      	ldr	r0, [r7, #20]
 8010f32:	f001 fc47 	bl	80127c4 <vPortFree>
 8010f36:	e001      	b.n	8010f3c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010f38:	2300      	movs	r3, #0
 8010f3a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010f3c:	69fb      	ldr	r3, [r7, #28]
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d017      	beq.n	8010f72 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010f42:	69fb      	ldr	r3, [r7, #28]
 8010f44:	2200      	movs	r2, #0
 8010f46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010f4a:	88fa      	ldrh	r2, [r7, #6]
 8010f4c:	2300      	movs	r3, #0
 8010f4e:	9303      	str	r3, [sp, #12]
 8010f50:	69fb      	ldr	r3, [r7, #28]
 8010f52:	9302      	str	r3, [sp, #8]
 8010f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f56:	9301      	str	r3, [sp, #4]
 8010f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f5a:	9300      	str	r3, [sp, #0]
 8010f5c:	683b      	ldr	r3, [r7, #0]
 8010f5e:	68b9      	ldr	r1, [r7, #8]
 8010f60:	68f8      	ldr	r0, [r7, #12]
 8010f62:	f000 f80e 	bl	8010f82 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010f66:	69f8      	ldr	r0, [r7, #28]
 8010f68:	f000 f88a 	bl	8011080 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010f6c:	2301      	movs	r3, #1
 8010f6e:	61bb      	str	r3, [r7, #24]
 8010f70:	e002      	b.n	8010f78 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010f72:	f04f 33ff 	mov.w	r3, #4294967295
 8010f76:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010f78:	69bb      	ldr	r3, [r7, #24]
	}
 8010f7a:	4618      	mov	r0, r3
 8010f7c:	3720      	adds	r7, #32
 8010f7e:	46bd      	mov	sp, r7
 8010f80:	bd80      	pop	{r7, pc}

08010f82 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010f82:	b580      	push	{r7, lr}
 8010f84:	b088      	sub	sp, #32
 8010f86:	af00      	add	r7, sp, #0
 8010f88:	60f8      	str	r0, [r7, #12]
 8010f8a:	60b9      	str	r1, [r7, #8]
 8010f8c:	607a      	str	r2, [r7, #4]
 8010f8e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8010f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8010f9a:	3b01      	subs	r3, #1
 8010f9c:	009b      	lsls	r3, r3, #2
 8010f9e:	4413      	add	r3, r2
 8010fa0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8010fa2:	69bb      	ldr	r3, [r7, #24]
 8010fa4:	f023 0307 	bic.w	r3, r3, #7
 8010fa8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010faa:	69bb      	ldr	r3, [r7, #24]
 8010fac:	f003 0307 	and.w	r3, r3, #7
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d009      	beq.n	8010fc8 <prvInitialiseNewTask+0x46>
 8010fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fb8:	f383 8811 	msr	BASEPRI, r3
 8010fbc:	f3bf 8f6f 	isb	sy
 8010fc0:	f3bf 8f4f 	dsb	sy
 8010fc4:	617b      	str	r3, [r7, #20]
 8010fc6:	e7fe      	b.n	8010fc6 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010fc8:	2300      	movs	r3, #0
 8010fca:	61fb      	str	r3, [r7, #28]
 8010fcc:	e012      	b.n	8010ff4 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010fce:	68ba      	ldr	r2, [r7, #8]
 8010fd0:	69fb      	ldr	r3, [r7, #28]
 8010fd2:	4413      	add	r3, r2
 8010fd4:	7819      	ldrb	r1, [r3, #0]
 8010fd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010fd8:	69fb      	ldr	r3, [r7, #28]
 8010fda:	4413      	add	r3, r2
 8010fdc:	3334      	adds	r3, #52	; 0x34
 8010fde:	460a      	mov	r2, r1
 8010fe0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8010fe2:	68ba      	ldr	r2, [r7, #8]
 8010fe4:	69fb      	ldr	r3, [r7, #28]
 8010fe6:	4413      	add	r3, r2
 8010fe8:	781b      	ldrb	r3, [r3, #0]
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d006      	beq.n	8010ffc <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010fee:	69fb      	ldr	r3, [r7, #28]
 8010ff0:	3301      	adds	r3, #1
 8010ff2:	61fb      	str	r3, [r7, #28]
 8010ff4:	69fb      	ldr	r3, [r7, #28]
 8010ff6:	2b0f      	cmp	r3, #15
 8010ff8:	d9e9      	bls.n	8010fce <prvInitialiseNewTask+0x4c>
 8010ffa:	e000      	b.n	8010ffe <prvInitialiseNewTask+0x7c>
		{
			break;
 8010ffc:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011000:	2200      	movs	r2, #0
 8011002:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8011006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011008:	2b06      	cmp	r3, #6
 801100a:	d901      	bls.n	8011010 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801100c:	2306      	movs	r3, #6
 801100e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8011010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011012:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011014:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8011016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011018:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801101a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 801101c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801101e:	2200      	movs	r2, #0
 8011020:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8011022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011024:	3304      	adds	r3, #4
 8011026:	4618      	mov	r0, r3
 8011028:	f7fe ff53 	bl	800fed2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801102c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801102e:	3318      	adds	r3, #24
 8011030:	4618      	mov	r0, r3
 8011032:	f7fe ff4e 	bl	800fed2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8011036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011038:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801103a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801103c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801103e:	f1c3 0207 	rsb	r2, r3, #7
 8011042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011044:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8011046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011048:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801104a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801104c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801104e:	2200      	movs	r2, #0
 8011050:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011054:	2200      	movs	r2, #0
 8011056:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801105a:	683a      	ldr	r2, [r7, #0]
 801105c:	68f9      	ldr	r1, [r7, #12]
 801105e:	69b8      	ldr	r0, [r7, #24]
 8011060:	f001 f8aa 	bl	80121b8 <pxPortInitialiseStack>
 8011064:	4602      	mov	r2, r0
 8011066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011068:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 801106a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801106c:	2b00      	cmp	r3, #0
 801106e:	d002      	beq.n	8011076 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011072:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011074:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011076:	bf00      	nop
 8011078:	3720      	adds	r7, #32
 801107a:	46bd      	mov	sp, r7
 801107c:	bd80      	pop	{r7, pc}
	...

08011080 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011080:	b580      	push	{r7, lr}
 8011082:	b082      	sub	sp, #8
 8011084:	af00      	add	r7, sp, #0
 8011086:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011088:	f001 f9c0 	bl	801240c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801108c:	4b2a      	ldr	r3, [pc, #168]	; (8011138 <prvAddNewTaskToReadyList+0xb8>)
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	3301      	adds	r3, #1
 8011092:	4a29      	ldr	r2, [pc, #164]	; (8011138 <prvAddNewTaskToReadyList+0xb8>)
 8011094:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8011096:	4b29      	ldr	r3, [pc, #164]	; (801113c <prvAddNewTaskToReadyList+0xbc>)
 8011098:	681b      	ldr	r3, [r3, #0]
 801109a:	2b00      	cmp	r3, #0
 801109c:	d109      	bne.n	80110b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801109e:	4a27      	ldr	r2, [pc, #156]	; (801113c <prvAddNewTaskToReadyList+0xbc>)
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80110a4:	4b24      	ldr	r3, [pc, #144]	; (8011138 <prvAddNewTaskToReadyList+0xb8>)
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	2b01      	cmp	r3, #1
 80110aa:	d110      	bne.n	80110ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80110ac:	f000 fbc4 	bl	8011838 <prvInitialiseTaskLists>
 80110b0:	e00d      	b.n	80110ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80110b2:	4b23      	ldr	r3, [pc, #140]	; (8011140 <prvAddNewTaskToReadyList+0xc0>)
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d109      	bne.n	80110ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80110ba:	4b20      	ldr	r3, [pc, #128]	; (801113c <prvAddNewTaskToReadyList+0xbc>)
 80110bc:	681b      	ldr	r3, [r3, #0]
 80110be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110c4:	429a      	cmp	r2, r3
 80110c6:	d802      	bhi.n	80110ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80110c8:	4a1c      	ldr	r2, [pc, #112]	; (801113c <prvAddNewTaskToReadyList+0xbc>)
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80110ce:	4b1d      	ldr	r3, [pc, #116]	; (8011144 <prvAddNewTaskToReadyList+0xc4>)
 80110d0:	681b      	ldr	r3, [r3, #0]
 80110d2:	3301      	adds	r3, #1
 80110d4:	4a1b      	ldr	r2, [pc, #108]	; (8011144 <prvAddNewTaskToReadyList+0xc4>)
 80110d6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110dc:	2201      	movs	r2, #1
 80110de:	409a      	lsls	r2, r3
 80110e0:	4b19      	ldr	r3, [pc, #100]	; (8011148 <prvAddNewTaskToReadyList+0xc8>)
 80110e2:	681b      	ldr	r3, [r3, #0]
 80110e4:	4313      	orrs	r3, r2
 80110e6:	4a18      	ldr	r2, [pc, #96]	; (8011148 <prvAddNewTaskToReadyList+0xc8>)
 80110e8:	6013      	str	r3, [r2, #0]
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80110ee:	4613      	mov	r3, r2
 80110f0:	009b      	lsls	r3, r3, #2
 80110f2:	4413      	add	r3, r2
 80110f4:	009b      	lsls	r3, r3, #2
 80110f6:	4a15      	ldr	r2, [pc, #84]	; (801114c <prvAddNewTaskToReadyList+0xcc>)
 80110f8:	441a      	add	r2, r3
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	3304      	adds	r3, #4
 80110fe:	4619      	mov	r1, r3
 8011100:	4610      	mov	r0, r2
 8011102:	f7fe fef3 	bl	800feec <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8011106:	f001 f9af 	bl	8012468 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801110a:	4b0d      	ldr	r3, [pc, #52]	; (8011140 <prvAddNewTaskToReadyList+0xc0>)
 801110c:	681b      	ldr	r3, [r3, #0]
 801110e:	2b00      	cmp	r3, #0
 8011110:	d00e      	beq.n	8011130 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8011112:	4b0a      	ldr	r3, [pc, #40]	; (801113c <prvAddNewTaskToReadyList+0xbc>)
 8011114:	681b      	ldr	r3, [r3, #0]
 8011116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801111c:	429a      	cmp	r2, r3
 801111e:	d207      	bcs.n	8011130 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8011120:	4b0b      	ldr	r3, [pc, #44]	; (8011150 <prvAddNewTaskToReadyList+0xd0>)
 8011122:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011126:	601a      	str	r2, [r3, #0]
 8011128:	f3bf 8f4f 	dsb	sy
 801112c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011130:	bf00      	nop
 8011132:	3708      	adds	r7, #8
 8011134:	46bd      	mov	sp, r7
 8011136:	bd80      	pop	{r7, pc}
 8011138:	20001588 	.word	0x20001588
 801113c:	20001488 	.word	0x20001488
 8011140:	20001594 	.word	0x20001594
 8011144:	200015a4 	.word	0x200015a4
 8011148:	20001590 	.word	0x20001590
 801114c:	2000148c 	.word	0x2000148c
 8011150:	e000ed04 	.word	0xe000ed04

08011154 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8011154:	b580      	push	{r7, lr}
 8011156:	b084      	sub	sp, #16
 8011158:	af00      	add	r7, sp, #0
 801115a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801115c:	2300      	movs	r3, #0
 801115e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	2b00      	cmp	r3, #0
 8011164:	d016      	beq.n	8011194 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8011166:	4b13      	ldr	r3, [pc, #76]	; (80111b4 <vTaskDelay+0x60>)
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	2b00      	cmp	r3, #0
 801116c:	d009      	beq.n	8011182 <vTaskDelay+0x2e>
 801116e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011172:	f383 8811 	msr	BASEPRI, r3
 8011176:	f3bf 8f6f 	isb	sy
 801117a:	f3bf 8f4f 	dsb	sy
 801117e:	60bb      	str	r3, [r7, #8]
 8011180:	e7fe      	b.n	8011180 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8011182:	f000 f879 	bl	8011278 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011186:	2100      	movs	r1, #0
 8011188:	6878      	ldr	r0, [r7, #4]
 801118a:	f000 ffaf 	bl	80120ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801118e:	f000 f881 	bl	8011294 <xTaskResumeAll>
 8011192:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8011194:	68fb      	ldr	r3, [r7, #12]
 8011196:	2b00      	cmp	r3, #0
 8011198:	d107      	bne.n	80111aa <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 801119a:	4b07      	ldr	r3, [pc, #28]	; (80111b8 <vTaskDelay+0x64>)
 801119c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80111a0:	601a      	str	r2, [r3, #0]
 80111a2:	f3bf 8f4f 	dsb	sy
 80111a6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80111aa:	bf00      	nop
 80111ac:	3710      	adds	r7, #16
 80111ae:	46bd      	mov	sp, r7
 80111b0:	bd80      	pop	{r7, pc}
 80111b2:	bf00      	nop
 80111b4:	200015b0 	.word	0x200015b0
 80111b8:	e000ed04 	.word	0xe000ed04

080111bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80111bc:	b580      	push	{r7, lr}
 80111be:	b08a      	sub	sp, #40	; 0x28
 80111c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80111c2:	2300      	movs	r3, #0
 80111c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80111c6:	2300      	movs	r3, #0
 80111c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80111ca:	463a      	mov	r2, r7
 80111cc:	1d39      	adds	r1, r7, #4
 80111ce:	f107 0308 	add.w	r3, r7, #8
 80111d2:	4618      	mov	r0, r3
 80111d4:	f7f0 fed0 	bl	8001f78 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80111d8:	6839      	ldr	r1, [r7, #0]
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	68ba      	ldr	r2, [r7, #8]
 80111de:	9202      	str	r2, [sp, #8]
 80111e0:	9301      	str	r3, [sp, #4]
 80111e2:	2300      	movs	r3, #0
 80111e4:	9300      	str	r3, [sp, #0]
 80111e6:	2300      	movs	r3, #0
 80111e8:	460a      	mov	r2, r1
 80111ea:	491d      	ldr	r1, [pc, #116]	; (8011260 <vTaskStartScheduler+0xa4>)
 80111ec:	481d      	ldr	r0, [pc, #116]	; (8011264 <vTaskStartScheduler+0xa8>)
 80111ee:	f7ff fe2a 	bl	8010e46 <xTaskCreateStatic>
 80111f2:	4602      	mov	r2, r0
 80111f4:	4b1c      	ldr	r3, [pc, #112]	; (8011268 <vTaskStartScheduler+0xac>)
 80111f6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80111f8:	4b1b      	ldr	r3, [pc, #108]	; (8011268 <vTaskStartScheduler+0xac>)
 80111fa:	681b      	ldr	r3, [r3, #0]
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	d002      	beq.n	8011206 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8011200:	2301      	movs	r3, #1
 8011202:	617b      	str	r3, [r7, #20]
 8011204:	e001      	b.n	801120a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8011206:	2300      	movs	r3, #0
 8011208:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801120a:	697b      	ldr	r3, [r7, #20]
 801120c:	2b01      	cmp	r3, #1
 801120e:	d115      	bne.n	801123c <vTaskStartScheduler+0x80>
 8011210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011214:	f383 8811 	msr	BASEPRI, r3
 8011218:	f3bf 8f6f 	isb	sy
 801121c:	f3bf 8f4f 	dsb	sy
 8011220:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8011222:	4b12      	ldr	r3, [pc, #72]	; (801126c <vTaskStartScheduler+0xb0>)
 8011224:	f04f 32ff 	mov.w	r2, #4294967295
 8011228:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801122a:	4b11      	ldr	r3, [pc, #68]	; (8011270 <vTaskStartScheduler+0xb4>)
 801122c:	2201      	movs	r2, #1
 801122e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8011230:	4b10      	ldr	r3, [pc, #64]	; (8011274 <vTaskStartScheduler+0xb8>)
 8011232:	2200      	movs	r2, #0
 8011234:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8011236:	f001 f84b 	bl	80122d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801123a:	e00d      	b.n	8011258 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801123c:	697b      	ldr	r3, [r7, #20]
 801123e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011242:	d109      	bne.n	8011258 <vTaskStartScheduler+0x9c>
 8011244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011248:	f383 8811 	msr	BASEPRI, r3
 801124c:	f3bf 8f6f 	isb	sy
 8011250:	f3bf 8f4f 	dsb	sy
 8011254:	60fb      	str	r3, [r7, #12]
 8011256:	e7fe      	b.n	8011256 <vTaskStartScheduler+0x9a>
}
 8011258:	bf00      	nop
 801125a:	3718      	adds	r7, #24
 801125c:	46bd      	mov	sp, r7
 801125e:	bd80      	pop	{r7, pc}
 8011260:	08019678 	.word	0x08019678
 8011264:	08011809 	.word	0x08011809
 8011268:	200015ac 	.word	0x200015ac
 801126c:	200015a8 	.word	0x200015a8
 8011270:	20001594 	.word	0x20001594
 8011274:	2000158c 	.word	0x2000158c

08011278 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011278:	b480      	push	{r7}
 801127a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 801127c:	4b04      	ldr	r3, [pc, #16]	; (8011290 <vTaskSuspendAll+0x18>)
 801127e:	681b      	ldr	r3, [r3, #0]
 8011280:	3301      	adds	r3, #1
 8011282:	4a03      	ldr	r2, [pc, #12]	; (8011290 <vTaskSuspendAll+0x18>)
 8011284:	6013      	str	r3, [r2, #0]
}
 8011286:	bf00      	nop
 8011288:	46bd      	mov	sp, r7
 801128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801128e:	4770      	bx	lr
 8011290:	200015b0 	.word	0x200015b0

08011294 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011294:	b580      	push	{r7, lr}
 8011296:	b084      	sub	sp, #16
 8011298:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801129a:	2300      	movs	r3, #0
 801129c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801129e:	2300      	movs	r3, #0
 80112a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80112a2:	4b41      	ldr	r3, [pc, #260]	; (80113a8 <xTaskResumeAll+0x114>)
 80112a4:	681b      	ldr	r3, [r3, #0]
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d109      	bne.n	80112be <xTaskResumeAll+0x2a>
 80112aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112ae:	f383 8811 	msr	BASEPRI, r3
 80112b2:	f3bf 8f6f 	isb	sy
 80112b6:	f3bf 8f4f 	dsb	sy
 80112ba:	603b      	str	r3, [r7, #0]
 80112bc:	e7fe      	b.n	80112bc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80112be:	f001 f8a5 	bl	801240c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80112c2:	4b39      	ldr	r3, [pc, #228]	; (80113a8 <xTaskResumeAll+0x114>)
 80112c4:	681b      	ldr	r3, [r3, #0]
 80112c6:	3b01      	subs	r3, #1
 80112c8:	4a37      	ldr	r2, [pc, #220]	; (80113a8 <xTaskResumeAll+0x114>)
 80112ca:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80112cc:	4b36      	ldr	r3, [pc, #216]	; (80113a8 <xTaskResumeAll+0x114>)
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d161      	bne.n	8011398 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80112d4:	4b35      	ldr	r3, [pc, #212]	; (80113ac <xTaskResumeAll+0x118>)
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d05d      	beq.n	8011398 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80112dc:	e02e      	b.n	801133c <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80112de:	4b34      	ldr	r3, [pc, #208]	; (80113b0 <xTaskResumeAll+0x11c>)
 80112e0:	68db      	ldr	r3, [r3, #12]
 80112e2:	68db      	ldr	r3, [r3, #12]
 80112e4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	3318      	adds	r3, #24
 80112ea:	4618      	mov	r0, r3
 80112ec:	f7fe fe5b 	bl	800ffa6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80112f0:	68fb      	ldr	r3, [r7, #12]
 80112f2:	3304      	adds	r3, #4
 80112f4:	4618      	mov	r0, r3
 80112f6:	f7fe fe56 	bl	800ffa6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80112fa:	68fb      	ldr	r3, [r7, #12]
 80112fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112fe:	2201      	movs	r2, #1
 8011300:	409a      	lsls	r2, r3
 8011302:	4b2c      	ldr	r3, [pc, #176]	; (80113b4 <xTaskResumeAll+0x120>)
 8011304:	681b      	ldr	r3, [r3, #0]
 8011306:	4313      	orrs	r3, r2
 8011308:	4a2a      	ldr	r2, [pc, #168]	; (80113b4 <xTaskResumeAll+0x120>)
 801130a:	6013      	str	r3, [r2, #0]
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011310:	4613      	mov	r3, r2
 8011312:	009b      	lsls	r3, r3, #2
 8011314:	4413      	add	r3, r2
 8011316:	009b      	lsls	r3, r3, #2
 8011318:	4a27      	ldr	r2, [pc, #156]	; (80113b8 <xTaskResumeAll+0x124>)
 801131a:	441a      	add	r2, r3
 801131c:	68fb      	ldr	r3, [r7, #12]
 801131e:	3304      	adds	r3, #4
 8011320:	4619      	mov	r1, r3
 8011322:	4610      	mov	r0, r2
 8011324:	f7fe fde2 	bl	800feec <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011328:	68fb      	ldr	r3, [r7, #12]
 801132a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801132c:	4b23      	ldr	r3, [pc, #140]	; (80113bc <xTaskResumeAll+0x128>)
 801132e:	681b      	ldr	r3, [r3, #0]
 8011330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011332:	429a      	cmp	r2, r3
 8011334:	d302      	bcc.n	801133c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8011336:	4b22      	ldr	r3, [pc, #136]	; (80113c0 <xTaskResumeAll+0x12c>)
 8011338:	2201      	movs	r2, #1
 801133a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801133c:	4b1c      	ldr	r3, [pc, #112]	; (80113b0 <xTaskResumeAll+0x11c>)
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	2b00      	cmp	r3, #0
 8011342:	d1cc      	bne.n	80112de <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011344:	68fb      	ldr	r3, [r7, #12]
 8011346:	2b00      	cmp	r3, #0
 8011348:	d001      	beq.n	801134e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801134a:	f000 fb0f 	bl	801196c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 801134e:	4b1d      	ldr	r3, [pc, #116]	; (80113c4 <xTaskResumeAll+0x130>)
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	2b00      	cmp	r3, #0
 8011358:	d010      	beq.n	801137c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801135a:	f000 f837 	bl	80113cc <xTaskIncrementTick>
 801135e:	4603      	mov	r3, r0
 8011360:	2b00      	cmp	r3, #0
 8011362:	d002      	beq.n	801136a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8011364:	4b16      	ldr	r3, [pc, #88]	; (80113c0 <xTaskResumeAll+0x12c>)
 8011366:	2201      	movs	r2, #1
 8011368:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	3b01      	subs	r3, #1
 801136e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	2b00      	cmp	r3, #0
 8011374:	d1f1      	bne.n	801135a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8011376:	4b13      	ldr	r3, [pc, #76]	; (80113c4 <xTaskResumeAll+0x130>)
 8011378:	2200      	movs	r2, #0
 801137a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801137c:	4b10      	ldr	r3, [pc, #64]	; (80113c0 <xTaskResumeAll+0x12c>)
 801137e:	681b      	ldr	r3, [r3, #0]
 8011380:	2b00      	cmp	r3, #0
 8011382:	d009      	beq.n	8011398 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011384:	2301      	movs	r3, #1
 8011386:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011388:	4b0f      	ldr	r3, [pc, #60]	; (80113c8 <xTaskResumeAll+0x134>)
 801138a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801138e:	601a      	str	r2, [r3, #0]
 8011390:	f3bf 8f4f 	dsb	sy
 8011394:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011398:	f001 f866 	bl	8012468 <vPortExitCritical>

	return xAlreadyYielded;
 801139c:	68bb      	ldr	r3, [r7, #8]
}
 801139e:	4618      	mov	r0, r3
 80113a0:	3710      	adds	r7, #16
 80113a2:	46bd      	mov	sp, r7
 80113a4:	bd80      	pop	{r7, pc}
 80113a6:	bf00      	nop
 80113a8:	200015b0 	.word	0x200015b0
 80113ac:	20001588 	.word	0x20001588
 80113b0:	20001548 	.word	0x20001548
 80113b4:	20001590 	.word	0x20001590
 80113b8:	2000148c 	.word	0x2000148c
 80113bc:	20001488 	.word	0x20001488
 80113c0:	2000159c 	.word	0x2000159c
 80113c4:	20001598 	.word	0x20001598
 80113c8:	e000ed04 	.word	0xe000ed04

080113cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80113cc:	b580      	push	{r7, lr}
 80113ce:	b086      	sub	sp, #24
 80113d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80113d2:	2300      	movs	r3, #0
 80113d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80113d6:	4b50      	ldr	r3, [pc, #320]	; (8011518 <xTaskIncrementTick+0x14c>)
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	2b00      	cmp	r3, #0
 80113dc:	f040 808c 	bne.w	80114f8 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80113e0:	4b4e      	ldr	r3, [pc, #312]	; (801151c <xTaskIncrementTick+0x150>)
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	3301      	adds	r3, #1
 80113e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80113e8:	4a4c      	ldr	r2, [pc, #304]	; (801151c <xTaskIncrementTick+0x150>)
 80113ea:	693b      	ldr	r3, [r7, #16]
 80113ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80113ee:	693b      	ldr	r3, [r7, #16]
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	d11f      	bne.n	8011434 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80113f4:	4b4a      	ldr	r3, [pc, #296]	; (8011520 <xTaskIncrementTick+0x154>)
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	681b      	ldr	r3, [r3, #0]
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d009      	beq.n	8011412 <xTaskIncrementTick+0x46>
 80113fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011402:	f383 8811 	msr	BASEPRI, r3
 8011406:	f3bf 8f6f 	isb	sy
 801140a:	f3bf 8f4f 	dsb	sy
 801140e:	603b      	str	r3, [r7, #0]
 8011410:	e7fe      	b.n	8011410 <xTaskIncrementTick+0x44>
 8011412:	4b43      	ldr	r3, [pc, #268]	; (8011520 <xTaskIncrementTick+0x154>)
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	60fb      	str	r3, [r7, #12]
 8011418:	4b42      	ldr	r3, [pc, #264]	; (8011524 <xTaskIncrementTick+0x158>)
 801141a:	681b      	ldr	r3, [r3, #0]
 801141c:	4a40      	ldr	r2, [pc, #256]	; (8011520 <xTaskIncrementTick+0x154>)
 801141e:	6013      	str	r3, [r2, #0]
 8011420:	4a40      	ldr	r2, [pc, #256]	; (8011524 <xTaskIncrementTick+0x158>)
 8011422:	68fb      	ldr	r3, [r7, #12]
 8011424:	6013      	str	r3, [r2, #0]
 8011426:	4b40      	ldr	r3, [pc, #256]	; (8011528 <xTaskIncrementTick+0x15c>)
 8011428:	681b      	ldr	r3, [r3, #0]
 801142a:	3301      	adds	r3, #1
 801142c:	4a3e      	ldr	r2, [pc, #248]	; (8011528 <xTaskIncrementTick+0x15c>)
 801142e:	6013      	str	r3, [r2, #0]
 8011430:	f000 fa9c 	bl	801196c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011434:	4b3d      	ldr	r3, [pc, #244]	; (801152c <xTaskIncrementTick+0x160>)
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	693a      	ldr	r2, [r7, #16]
 801143a:	429a      	cmp	r2, r3
 801143c:	d34d      	bcc.n	80114da <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801143e:	4b38      	ldr	r3, [pc, #224]	; (8011520 <xTaskIncrementTick+0x154>)
 8011440:	681b      	ldr	r3, [r3, #0]
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	2b00      	cmp	r3, #0
 8011446:	d101      	bne.n	801144c <xTaskIncrementTick+0x80>
 8011448:	2301      	movs	r3, #1
 801144a:	e000      	b.n	801144e <xTaskIncrementTick+0x82>
 801144c:	2300      	movs	r3, #0
 801144e:	2b00      	cmp	r3, #0
 8011450:	d004      	beq.n	801145c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011452:	4b36      	ldr	r3, [pc, #216]	; (801152c <xTaskIncrementTick+0x160>)
 8011454:	f04f 32ff 	mov.w	r2, #4294967295
 8011458:	601a      	str	r2, [r3, #0]
					break;
 801145a:	e03e      	b.n	80114da <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 801145c:	4b30      	ldr	r3, [pc, #192]	; (8011520 <xTaskIncrementTick+0x154>)
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	68db      	ldr	r3, [r3, #12]
 8011462:	68db      	ldr	r3, [r3, #12]
 8011464:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011466:	68bb      	ldr	r3, [r7, #8]
 8011468:	685b      	ldr	r3, [r3, #4]
 801146a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801146c:	693a      	ldr	r2, [r7, #16]
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	429a      	cmp	r2, r3
 8011472:	d203      	bcs.n	801147c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011474:	4a2d      	ldr	r2, [pc, #180]	; (801152c <xTaskIncrementTick+0x160>)
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	6013      	str	r3, [r2, #0]
						break;
 801147a:	e02e      	b.n	80114da <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801147c:	68bb      	ldr	r3, [r7, #8]
 801147e:	3304      	adds	r3, #4
 8011480:	4618      	mov	r0, r3
 8011482:	f7fe fd90 	bl	800ffa6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011486:	68bb      	ldr	r3, [r7, #8]
 8011488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801148a:	2b00      	cmp	r3, #0
 801148c:	d004      	beq.n	8011498 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801148e:	68bb      	ldr	r3, [r7, #8]
 8011490:	3318      	adds	r3, #24
 8011492:	4618      	mov	r0, r3
 8011494:	f7fe fd87 	bl	800ffa6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011498:	68bb      	ldr	r3, [r7, #8]
 801149a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801149c:	2201      	movs	r2, #1
 801149e:	409a      	lsls	r2, r3
 80114a0:	4b23      	ldr	r3, [pc, #140]	; (8011530 <xTaskIncrementTick+0x164>)
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	4313      	orrs	r3, r2
 80114a6:	4a22      	ldr	r2, [pc, #136]	; (8011530 <xTaskIncrementTick+0x164>)
 80114a8:	6013      	str	r3, [r2, #0]
 80114aa:	68bb      	ldr	r3, [r7, #8]
 80114ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114ae:	4613      	mov	r3, r2
 80114b0:	009b      	lsls	r3, r3, #2
 80114b2:	4413      	add	r3, r2
 80114b4:	009b      	lsls	r3, r3, #2
 80114b6:	4a1f      	ldr	r2, [pc, #124]	; (8011534 <xTaskIncrementTick+0x168>)
 80114b8:	441a      	add	r2, r3
 80114ba:	68bb      	ldr	r3, [r7, #8]
 80114bc:	3304      	adds	r3, #4
 80114be:	4619      	mov	r1, r3
 80114c0:	4610      	mov	r0, r2
 80114c2:	f7fe fd13 	bl	800feec <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80114c6:	68bb      	ldr	r3, [r7, #8]
 80114c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114ca:	4b1b      	ldr	r3, [pc, #108]	; (8011538 <xTaskIncrementTick+0x16c>)
 80114cc:	681b      	ldr	r3, [r3, #0]
 80114ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114d0:	429a      	cmp	r2, r3
 80114d2:	d3b4      	bcc.n	801143e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80114d4:	2301      	movs	r3, #1
 80114d6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80114d8:	e7b1      	b.n	801143e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80114da:	4b17      	ldr	r3, [pc, #92]	; (8011538 <xTaskIncrementTick+0x16c>)
 80114dc:	681b      	ldr	r3, [r3, #0]
 80114de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114e0:	4914      	ldr	r1, [pc, #80]	; (8011534 <xTaskIncrementTick+0x168>)
 80114e2:	4613      	mov	r3, r2
 80114e4:	009b      	lsls	r3, r3, #2
 80114e6:	4413      	add	r3, r2
 80114e8:	009b      	lsls	r3, r3, #2
 80114ea:	440b      	add	r3, r1
 80114ec:	681b      	ldr	r3, [r3, #0]
 80114ee:	2b01      	cmp	r3, #1
 80114f0:	d907      	bls.n	8011502 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80114f2:	2301      	movs	r3, #1
 80114f4:	617b      	str	r3, [r7, #20]
 80114f6:	e004      	b.n	8011502 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80114f8:	4b10      	ldr	r3, [pc, #64]	; (801153c <xTaskIncrementTick+0x170>)
 80114fa:	681b      	ldr	r3, [r3, #0]
 80114fc:	3301      	adds	r3, #1
 80114fe:	4a0f      	ldr	r2, [pc, #60]	; (801153c <xTaskIncrementTick+0x170>)
 8011500:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8011502:	4b0f      	ldr	r3, [pc, #60]	; (8011540 <xTaskIncrementTick+0x174>)
 8011504:	681b      	ldr	r3, [r3, #0]
 8011506:	2b00      	cmp	r3, #0
 8011508:	d001      	beq.n	801150e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 801150a:	2301      	movs	r3, #1
 801150c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 801150e:	697b      	ldr	r3, [r7, #20]
}
 8011510:	4618      	mov	r0, r3
 8011512:	3718      	adds	r7, #24
 8011514:	46bd      	mov	sp, r7
 8011516:	bd80      	pop	{r7, pc}
 8011518:	200015b0 	.word	0x200015b0
 801151c:	2000158c 	.word	0x2000158c
 8011520:	20001540 	.word	0x20001540
 8011524:	20001544 	.word	0x20001544
 8011528:	200015a0 	.word	0x200015a0
 801152c:	200015a8 	.word	0x200015a8
 8011530:	20001590 	.word	0x20001590
 8011534:	2000148c 	.word	0x2000148c
 8011538:	20001488 	.word	0x20001488
 801153c:	20001598 	.word	0x20001598
 8011540:	2000159c 	.word	0x2000159c

08011544 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011544:	b480      	push	{r7}
 8011546:	b087      	sub	sp, #28
 8011548:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801154a:	4b26      	ldr	r3, [pc, #152]	; (80115e4 <vTaskSwitchContext+0xa0>)
 801154c:	681b      	ldr	r3, [r3, #0]
 801154e:	2b00      	cmp	r3, #0
 8011550:	d003      	beq.n	801155a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011552:	4b25      	ldr	r3, [pc, #148]	; (80115e8 <vTaskSwitchContext+0xa4>)
 8011554:	2201      	movs	r2, #1
 8011556:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011558:	e03e      	b.n	80115d8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 801155a:	4b23      	ldr	r3, [pc, #140]	; (80115e8 <vTaskSwitchContext+0xa4>)
 801155c:	2200      	movs	r2, #0
 801155e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8011560:	4b22      	ldr	r3, [pc, #136]	; (80115ec <vTaskSwitchContext+0xa8>)
 8011562:	681b      	ldr	r3, [r3, #0]
 8011564:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	fab3 f383 	clz	r3, r3
 801156c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 801156e:	7afb      	ldrb	r3, [r7, #11]
 8011570:	f1c3 031f 	rsb	r3, r3, #31
 8011574:	617b      	str	r3, [r7, #20]
 8011576:	491e      	ldr	r1, [pc, #120]	; (80115f0 <vTaskSwitchContext+0xac>)
 8011578:	697a      	ldr	r2, [r7, #20]
 801157a:	4613      	mov	r3, r2
 801157c:	009b      	lsls	r3, r3, #2
 801157e:	4413      	add	r3, r2
 8011580:	009b      	lsls	r3, r3, #2
 8011582:	440b      	add	r3, r1
 8011584:	681b      	ldr	r3, [r3, #0]
 8011586:	2b00      	cmp	r3, #0
 8011588:	d109      	bne.n	801159e <vTaskSwitchContext+0x5a>
	__asm volatile
 801158a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801158e:	f383 8811 	msr	BASEPRI, r3
 8011592:	f3bf 8f6f 	isb	sy
 8011596:	f3bf 8f4f 	dsb	sy
 801159a:	607b      	str	r3, [r7, #4]
 801159c:	e7fe      	b.n	801159c <vTaskSwitchContext+0x58>
 801159e:	697a      	ldr	r2, [r7, #20]
 80115a0:	4613      	mov	r3, r2
 80115a2:	009b      	lsls	r3, r3, #2
 80115a4:	4413      	add	r3, r2
 80115a6:	009b      	lsls	r3, r3, #2
 80115a8:	4a11      	ldr	r2, [pc, #68]	; (80115f0 <vTaskSwitchContext+0xac>)
 80115aa:	4413      	add	r3, r2
 80115ac:	613b      	str	r3, [r7, #16]
 80115ae:	693b      	ldr	r3, [r7, #16]
 80115b0:	685b      	ldr	r3, [r3, #4]
 80115b2:	685a      	ldr	r2, [r3, #4]
 80115b4:	693b      	ldr	r3, [r7, #16]
 80115b6:	605a      	str	r2, [r3, #4]
 80115b8:	693b      	ldr	r3, [r7, #16]
 80115ba:	685a      	ldr	r2, [r3, #4]
 80115bc:	693b      	ldr	r3, [r7, #16]
 80115be:	3308      	adds	r3, #8
 80115c0:	429a      	cmp	r2, r3
 80115c2:	d104      	bne.n	80115ce <vTaskSwitchContext+0x8a>
 80115c4:	693b      	ldr	r3, [r7, #16]
 80115c6:	685b      	ldr	r3, [r3, #4]
 80115c8:	685a      	ldr	r2, [r3, #4]
 80115ca:	693b      	ldr	r3, [r7, #16]
 80115cc:	605a      	str	r2, [r3, #4]
 80115ce:	693b      	ldr	r3, [r7, #16]
 80115d0:	685b      	ldr	r3, [r3, #4]
 80115d2:	68db      	ldr	r3, [r3, #12]
 80115d4:	4a07      	ldr	r2, [pc, #28]	; (80115f4 <vTaskSwitchContext+0xb0>)
 80115d6:	6013      	str	r3, [r2, #0]
}
 80115d8:	bf00      	nop
 80115da:	371c      	adds	r7, #28
 80115dc:	46bd      	mov	sp, r7
 80115de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115e2:	4770      	bx	lr
 80115e4:	200015b0 	.word	0x200015b0
 80115e8:	2000159c 	.word	0x2000159c
 80115ec:	20001590 	.word	0x20001590
 80115f0:	2000148c 	.word	0x2000148c
 80115f4:	20001488 	.word	0x20001488

080115f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80115f8:	b580      	push	{r7, lr}
 80115fa:	b084      	sub	sp, #16
 80115fc:	af00      	add	r7, sp, #0
 80115fe:	6078      	str	r0, [r7, #4]
 8011600:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	2b00      	cmp	r3, #0
 8011606:	d109      	bne.n	801161c <vTaskPlaceOnEventList+0x24>
 8011608:	f04f 0350 	mov.w	r3, #80	; 0x50
 801160c:	f383 8811 	msr	BASEPRI, r3
 8011610:	f3bf 8f6f 	isb	sy
 8011614:	f3bf 8f4f 	dsb	sy
 8011618:	60fb      	str	r3, [r7, #12]
 801161a:	e7fe      	b.n	801161a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801161c:	4b07      	ldr	r3, [pc, #28]	; (801163c <vTaskPlaceOnEventList+0x44>)
 801161e:	681b      	ldr	r3, [r3, #0]
 8011620:	3318      	adds	r3, #24
 8011622:	4619      	mov	r1, r3
 8011624:	6878      	ldr	r0, [r7, #4]
 8011626:	f7fe fc85 	bl	800ff34 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801162a:	2101      	movs	r1, #1
 801162c:	6838      	ldr	r0, [r7, #0]
 801162e:	f000 fd5d 	bl	80120ec <prvAddCurrentTaskToDelayedList>
}
 8011632:	bf00      	nop
 8011634:	3710      	adds	r7, #16
 8011636:	46bd      	mov	sp, r7
 8011638:	bd80      	pop	{r7, pc}
 801163a:	bf00      	nop
 801163c:	20001488 	.word	0x20001488

08011640 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011640:	b580      	push	{r7, lr}
 8011642:	b086      	sub	sp, #24
 8011644:	af00      	add	r7, sp, #0
 8011646:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	68db      	ldr	r3, [r3, #12]
 801164c:	68db      	ldr	r3, [r3, #12]
 801164e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011650:	693b      	ldr	r3, [r7, #16]
 8011652:	2b00      	cmp	r3, #0
 8011654:	d109      	bne.n	801166a <xTaskRemoveFromEventList+0x2a>
 8011656:	f04f 0350 	mov.w	r3, #80	; 0x50
 801165a:	f383 8811 	msr	BASEPRI, r3
 801165e:	f3bf 8f6f 	isb	sy
 8011662:	f3bf 8f4f 	dsb	sy
 8011666:	60fb      	str	r3, [r7, #12]
 8011668:	e7fe      	b.n	8011668 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801166a:	693b      	ldr	r3, [r7, #16]
 801166c:	3318      	adds	r3, #24
 801166e:	4618      	mov	r0, r3
 8011670:	f7fe fc99 	bl	800ffa6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011674:	4b1d      	ldr	r3, [pc, #116]	; (80116ec <xTaskRemoveFromEventList+0xac>)
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	2b00      	cmp	r3, #0
 801167a:	d11c      	bne.n	80116b6 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801167c:	693b      	ldr	r3, [r7, #16]
 801167e:	3304      	adds	r3, #4
 8011680:	4618      	mov	r0, r3
 8011682:	f7fe fc90 	bl	800ffa6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011686:	693b      	ldr	r3, [r7, #16]
 8011688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801168a:	2201      	movs	r2, #1
 801168c:	409a      	lsls	r2, r3
 801168e:	4b18      	ldr	r3, [pc, #96]	; (80116f0 <xTaskRemoveFromEventList+0xb0>)
 8011690:	681b      	ldr	r3, [r3, #0]
 8011692:	4313      	orrs	r3, r2
 8011694:	4a16      	ldr	r2, [pc, #88]	; (80116f0 <xTaskRemoveFromEventList+0xb0>)
 8011696:	6013      	str	r3, [r2, #0]
 8011698:	693b      	ldr	r3, [r7, #16]
 801169a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801169c:	4613      	mov	r3, r2
 801169e:	009b      	lsls	r3, r3, #2
 80116a0:	4413      	add	r3, r2
 80116a2:	009b      	lsls	r3, r3, #2
 80116a4:	4a13      	ldr	r2, [pc, #76]	; (80116f4 <xTaskRemoveFromEventList+0xb4>)
 80116a6:	441a      	add	r2, r3
 80116a8:	693b      	ldr	r3, [r7, #16]
 80116aa:	3304      	adds	r3, #4
 80116ac:	4619      	mov	r1, r3
 80116ae:	4610      	mov	r0, r2
 80116b0:	f7fe fc1c 	bl	800feec <vListInsertEnd>
 80116b4:	e005      	b.n	80116c2 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80116b6:	693b      	ldr	r3, [r7, #16]
 80116b8:	3318      	adds	r3, #24
 80116ba:	4619      	mov	r1, r3
 80116bc:	480e      	ldr	r0, [pc, #56]	; (80116f8 <xTaskRemoveFromEventList+0xb8>)
 80116be:	f7fe fc15 	bl	800feec <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80116c2:	693b      	ldr	r3, [r7, #16]
 80116c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80116c6:	4b0d      	ldr	r3, [pc, #52]	; (80116fc <xTaskRemoveFromEventList+0xbc>)
 80116c8:	681b      	ldr	r3, [r3, #0]
 80116ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116cc:	429a      	cmp	r2, r3
 80116ce:	d905      	bls.n	80116dc <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80116d0:	2301      	movs	r3, #1
 80116d2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80116d4:	4b0a      	ldr	r3, [pc, #40]	; (8011700 <xTaskRemoveFromEventList+0xc0>)
 80116d6:	2201      	movs	r2, #1
 80116d8:	601a      	str	r2, [r3, #0]
 80116da:	e001      	b.n	80116e0 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 80116dc:	2300      	movs	r3, #0
 80116de:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80116e0:	697b      	ldr	r3, [r7, #20]
}
 80116e2:	4618      	mov	r0, r3
 80116e4:	3718      	adds	r7, #24
 80116e6:	46bd      	mov	sp, r7
 80116e8:	bd80      	pop	{r7, pc}
 80116ea:	bf00      	nop
 80116ec:	200015b0 	.word	0x200015b0
 80116f0:	20001590 	.word	0x20001590
 80116f4:	2000148c 	.word	0x2000148c
 80116f8:	20001548 	.word	0x20001548
 80116fc:	20001488 	.word	0x20001488
 8011700:	2000159c 	.word	0x2000159c

08011704 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011704:	b480      	push	{r7}
 8011706:	b083      	sub	sp, #12
 8011708:	af00      	add	r7, sp, #0
 801170a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801170c:	4b06      	ldr	r3, [pc, #24]	; (8011728 <vTaskInternalSetTimeOutState+0x24>)
 801170e:	681a      	ldr	r2, [r3, #0]
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011714:	4b05      	ldr	r3, [pc, #20]	; (801172c <vTaskInternalSetTimeOutState+0x28>)
 8011716:	681a      	ldr	r2, [r3, #0]
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	605a      	str	r2, [r3, #4]
}
 801171c:	bf00      	nop
 801171e:	370c      	adds	r7, #12
 8011720:	46bd      	mov	sp, r7
 8011722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011726:	4770      	bx	lr
 8011728:	200015a0 	.word	0x200015a0
 801172c:	2000158c 	.word	0x2000158c

08011730 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011730:	b580      	push	{r7, lr}
 8011732:	b088      	sub	sp, #32
 8011734:	af00      	add	r7, sp, #0
 8011736:	6078      	str	r0, [r7, #4]
 8011738:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	2b00      	cmp	r3, #0
 801173e:	d109      	bne.n	8011754 <xTaskCheckForTimeOut+0x24>
 8011740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011744:	f383 8811 	msr	BASEPRI, r3
 8011748:	f3bf 8f6f 	isb	sy
 801174c:	f3bf 8f4f 	dsb	sy
 8011750:	613b      	str	r3, [r7, #16]
 8011752:	e7fe      	b.n	8011752 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8011754:	683b      	ldr	r3, [r7, #0]
 8011756:	2b00      	cmp	r3, #0
 8011758:	d109      	bne.n	801176e <xTaskCheckForTimeOut+0x3e>
 801175a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801175e:	f383 8811 	msr	BASEPRI, r3
 8011762:	f3bf 8f6f 	isb	sy
 8011766:	f3bf 8f4f 	dsb	sy
 801176a:	60fb      	str	r3, [r7, #12]
 801176c:	e7fe      	b.n	801176c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 801176e:	f000 fe4d 	bl	801240c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011772:	4b1d      	ldr	r3, [pc, #116]	; (80117e8 <xTaskCheckForTimeOut+0xb8>)
 8011774:	681b      	ldr	r3, [r3, #0]
 8011776:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	685b      	ldr	r3, [r3, #4]
 801177c:	69ba      	ldr	r2, [r7, #24]
 801177e:	1ad3      	subs	r3, r2, r3
 8011780:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011782:	683b      	ldr	r3, [r7, #0]
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	f1b3 3fff 	cmp.w	r3, #4294967295
 801178a:	d102      	bne.n	8011792 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801178c:	2300      	movs	r3, #0
 801178e:	61fb      	str	r3, [r7, #28]
 8011790:	e023      	b.n	80117da <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	681a      	ldr	r2, [r3, #0]
 8011796:	4b15      	ldr	r3, [pc, #84]	; (80117ec <xTaskCheckForTimeOut+0xbc>)
 8011798:	681b      	ldr	r3, [r3, #0]
 801179a:	429a      	cmp	r2, r3
 801179c:	d007      	beq.n	80117ae <xTaskCheckForTimeOut+0x7e>
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	685b      	ldr	r3, [r3, #4]
 80117a2:	69ba      	ldr	r2, [r7, #24]
 80117a4:	429a      	cmp	r2, r3
 80117a6:	d302      	bcc.n	80117ae <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80117a8:	2301      	movs	r3, #1
 80117aa:	61fb      	str	r3, [r7, #28]
 80117ac:	e015      	b.n	80117da <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80117ae:	683b      	ldr	r3, [r7, #0]
 80117b0:	681b      	ldr	r3, [r3, #0]
 80117b2:	697a      	ldr	r2, [r7, #20]
 80117b4:	429a      	cmp	r2, r3
 80117b6:	d20b      	bcs.n	80117d0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80117b8:	683b      	ldr	r3, [r7, #0]
 80117ba:	681a      	ldr	r2, [r3, #0]
 80117bc:	697b      	ldr	r3, [r7, #20]
 80117be:	1ad2      	subs	r2, r2, r3
 80117c0:	683b      	ldr	r3, [r7, #0]
 80117c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80117c4:	6878      	ldr	r0, [r7, #4]
 80117c6:	f7ff ff9d 	bl	8011704 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80117ca:	2300      	movs	r3, #0
 80117cc:	61fb      	str	r3, [r7, #28]
 80117ce:	e004      	b.n	80117da <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80117d0:	683b      	ldr	r3, [r7, #0]
 80117d2:	2200      	movs	r2, #0
 80117d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80117d6:	2301      	movs	r3, #1
 80117d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80117da:	f000 fe45 	bl	8012468 <vPortExitCritical>

	return xReturn;
 80117de:	69fb      	ldr	r3, [r7, #28]
}
 80117e0:	4618      	mov	r0, r3
 80117e2:	3720      	adds	r7, #32
 80117e4:	46bd      	mov	sp, r7
 80117e6:	bd80      	pop	{r7, pc}
 80117e8:	2000158c 	.word	0x2000158c
 80117ec:	200015a0 	.word	0x200015a0

080117f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80117f0:	b480      	push	{r7}
 80117f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80117f4:	4b03      	ldr	r3, [pc, #12]	; (8011804 <vTaskMissedYield+0x14>)
 80117f6:	2201      	movs	r2, #1
 80117f8:	601a      	str	r2, [r3, #0]
}
 80117fa:	bf00      	nop
 80117fc:	46bd      	mov	sp, r7
 80117fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011802:	4770      	bx	lr
 8011804:	2000159c 	.word	0x2000159c

08011808 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011808:	b580      	push	{r7, lr}
 801180a:	b082      	sub	sp, #8
 801180c:	af00      	add	r7, sp, #0
 801180e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011810:	f000 f852 	bl	80118b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011814:	4b06      	ldr	r3, [pc, #24]	; (8011830 <prvIdleTask+0x28>)
 8011816:	681b      	ldr	r3, [r3, #0]
 8011818:	2b01      	cmp	r3, #1
 801181a:	d9f9      	bls.n	8011810 <prvIdleTask+0x8>
			{
				taskYIELD();
 801181c:	4b05      	ldr	r3, [pc, #20]	; (8011834 <prvIdleTask+0x2c>)
 801181e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011822:	601a      	str	r2, [r3, #0]
 8011824:	f3bf 8f4f 	dsb	sy
 8011828:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801182c:	e7f0      	b.n	8011810 <prvIdleTask+0x8>
 801182e:	bf00      	nop
 8011830:	2000148c 	.word	0x2000148c
 8011834:	e000ed04 	.word	0xe000ed04

08011838 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011838:	b580      	push	{r7, lr}
 801183a:	b082      	sub	sp, #8
 801183c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801183e:	2300      	movs	r3, #0
 8011840:	607b      	str	r3, [r7, #4]
 8011842:	e00c      	b.n	801185e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011844:	687a      	ldr	r2, [r7, #4]
 8011846:	4613      	mov	r3, r2
 8011848:	009b      	lsls	r3, r3, #2
 801184a:	4413      	add	r3, r2
 801184c:	009b      	lsls	r3, r3, #2
 801184e:	4a12      	ldr	r2, [pc, #72]	; (8011898 <prvInitialiseTaskLists+0x60>)
 8011850:	4413      	add	r3, r2
 8011852:	4618      	mov	r0, r3
 8011854:	f7fe fb1d 	bl	800fe92 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	3301      	adds	r3, #1
 801185c:	607b      	str	r3, [r7, #4]
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	2b06      	cmp	r3, #6
 8011862:	d9ef      	bls.n	8011844 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011864:	480d      	ldr	r0, [pc, #52]	; (801189c <prvInitialiseTaskLists+0x64>)
 8011866:	f7fe fb14 	bl	800fe92 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801186a:	480d      	ldr	r0, [pc, #52]	; (80118a0 <prvInitialiseTaskLists+0x68>)
 801186c:	f7fe fb11 	bl	800fe92 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011870:	480c      	ldr	r0, [pc, #48]	; (80118a4 <prvInitialiseTaskLists+0x6c>)
 8011872:	f7fe fb0e 	bl	800fe92 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011876:	480c      	ldr	r0, [pc, #48]	; (80118a8 <prvInitialiseTaskLists+0x70>)
 8011878:	f7fe fb0b 	bl	800fe92 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801187c:	480b      	ldr	r0, [pc, #44]	; (80118ac <prvInitialiseTaskLists+0x74>)
 801187e:	f7fe fb08 	bl	800fe92 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011882:	4b0b      	ldr	r3, [pc, #44]	; (80118b0 <prvInitialiseTaskLists+0x78>)
 8011884:	4a05      	ldr	r2, [pc, #20]	; (801189c <prvInitialiseTaskLists+0x64>)
 8011886:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011888:	4b0a      	ldr	r3, [pc, #40]	; (80118b4 <prvInitialiseTaskLists+0x7c>)
 801188a:	4a05      	ldr	r2, [pc, #20]	; (80118a0 <prvInitialiseTaskLists+0x68>)
 801188c:	601a      	str	r2, [r3, #0]
}
 801188e:	bf00      	nop
 8011890:	3708      	adds	r7, #8
 8011892:	46bd      	mov	sp, r7
 8011894:	bd80      	pop	{r7, pc}
 8011896:	bf00      	nop
 8011898:	2000148c 	.word	0x2000148c
 801189c:	20001518 	.word	0x20001518
 80118a0:	2000152c 	.word	0x2000152c
 80118a4:	20001548 	.word	0x20001548
 80118a8:	2000155c 	.word	0x2000155c
 80118ac:	20001574 	.word	0x20001574
 80118b0:	20001540 	.word	0x20001540
 80118b4:	20001544 	.word	0x20001544

080118b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80118b8:	b580      	push	{r7, lr}
 80118ba:	b082      	sub	sp, #8
 80118bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80118be:	e019      	b.n	80118f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80118c0:	f000 fda4 	bl	801240c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80118c4:	4b0f      	ldr	r3, [pc, #60]	; (8011904 <prvCheckTasksWaitingTermination+0x4c>)
 80118c6:	68db      	ldr	r3, [r3, #12]
 80118c8:	68db      	ldr	r3, [r3, #12]
 80118ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	3304      	adds	r3, #4
 80118d0:	4618      	mov	r0, r3
 80118d2:	f7fe fb68 	bl	800ffa6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80118d6:	4b0c      	ldr	r3, [pc, #48]	; (8011908 <prvCheckTasksWaitingTermination+0x50>)
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	3b01      	subs	r3, #1
 80118dc:	4a0a      	ldr	r2, [pc, #40]	; (8011908 <prvCheckTasksWaitingTermination+0x50>)
 80118de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80118e0:	4b0a      	ldr	r3, [pc, #40]	; (801190c <prvCheckTasksWaitingTermination+0x54>)
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	3b01      	subs	r3, #1
 80118e6:	4a09      	ldr	r2, [pc, #36]	; (801190c <prvCheckTasksWaitingTermination+0x54>)
 80118e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80118ea:	f000 fdbd 	bl	8012468 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80118ee:	6878      	ldr	r0, [r7, #4]
 80118f0:	f000 f80e 	bl	8011910 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80118f4:	4b05      	ldr	r3, [pc, #20]	; (801190c <prvCheckTasksWaitingTermination+0x54>)
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	d1e1      	bne.n	80118c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80118fc:	bf00      	nop
 80118fe:	3708      	adds	r7, #8
 8011900:	46bd      	mov	sp, r7
 8011902:	bd80      	pop	{r7, pc}
 8011904:	2000155c 	.word	0x2000155c
 8011908:	20001588 	.word	0x20001588
 801190c:	20001570 	.word	0x20001570

08011910 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011910:	b580      	push	{r7, lr}
 8011912:	b084      	sub	sp, #16
 8011914:	af00      	add	r7, sp, #0
 8011916:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801191e:	2b00      	cmp	r3, #0
 8011920:	d108      	bne.n	8011934 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011926:	4618      	mov	r0, r3
 8011928:	f000 ff4c 	bl	80127c4 <vPortFree>
				vPortFree( pxTCB );
 801192c:	6878      	ldr	r0, [r7, #4]
 801192e:	f000 ff49 	bl	80127c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011932:	e017      	b.n	8011964 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801193a:	2b01      	cmp	r3, #1
 801193c:	d103      	bne.n	8011946 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801193e:	6878      	ldr	r0, [r7, #4]
 8011940:	f000 ff40 	bl	80127c4 <vPortFree>
	}
 8011944:	e00e      	b.n	8011964 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801194c:	2b02      	cmp	r3, #2
 801194e:	d009      	beq.n	8011964 <prvDeleteTCB+0x54>
 8011950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011954:	f383 8811 	msr	BASEPRI, r3
 8011958:	f3bf 8f6f 	isb	sy
 801195c:	f3bf 8f4f 	dsb	sy
 8011960:	60fb      	str	r3, [r7, #12]
 8011962:	e7fe      	b.n	8011962 <prvDeleteTCB+0x52>
	}
 8011964:	bf00      	nop
 8011966:	3710      	adds	r7, #16
 8011968:	46bd      	mov	sp, r7
 801196a:	bd80      	pop	{r7, pc}

0801196c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801196c:	b480      	push	{r7}
 801196e:	b083      	sub	sp, #12
 8011970:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011972:	4b0f      	ldr	r3, [pc, #60]	; (80119b0 <prvResetNextTaskUnblockTime+0x44>)
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	681b      	ldr	r3, [r3, #0]
 8011978:	2b00      	cmp	r3, #0
 801197a:	d101      	bne.n	8011980 <prvResetNextTaskUnblockTime+0x14>
 801197c:	2301      	movs	r3, #1
 801197e:	e000      	b.n	8011982 <prvResetNextTaskUnblockTime+0x16>
 8011980:	2300      	movs	r3, #0
 8011982:	2b00      	cmp	r3, #0
 8011984:	d004      	beq.n	8011990 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011986:	4b0b      	ldr	r3, [pc, #44]	; (80119b4 <prvResetNextTaskUnblockTime+0x48>)
 8011988:	f04f 32ff 	mov.w	r2, #4294967295
 801198c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801198e:	e008      	b.n	80119a2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8011990:	4b07      	ldr	r3, [pc, #28]	; (80119b0 <prvResetNextTaskUnblockTime+0x44>)
 8011992:	681b      	ldr	r3, [r3, #0]
 8011994:	68db      	ldr	r3, [r3, #12]
 8011996:	68db      	ldr	r3, [r3, #12]
 8011998:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	685b      	ldr	r3, [r3, #4]
 801199e:	4a05      	ldr	r2, [pc, #20]	; (80119b4 <prvResetNextTaskUnblockTime+0x48>)
 80119a0:	6013      	str	r3, [r2, #0]
}
 80119a2:	bf00      	nop
 80119a4:	370c      	adds	r7, #12
 80119a6:	46bd      	mov	sp, r7
 80119a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ac:	4770      	bx	lr
 80119ae:	bf00      	nop
 80119b0:	20001540 	.word	0x20001540
 80119b4:	200015a8 	.word	0x200015a8

080119b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80119b8:	b480      	push	{r7}
 80119ba:	b083      	sub	sp, #12
 80119bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80119be:	4b0b      	ldr	r3, [pc, #44]	; (80119ec <xTaskGetSchedulerState+0x34>)
 80119c0:	681b      	ldr	r3, [r3, #0]
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	d102      	bne.n	80119cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80119c6:	2301      	movs	r3, #1
 80119c8:	607b      	str	r3, [r7, #4]
 80119ca:	e008      	b.n	80119de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80119cc:	4b08      	ldr	r3, [pc, #32]	; (80119f0 <xTaskGetSchedulerState+0x38>)
 80119ce:	681b      	ldr	r3, [r3, #0]
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	d102      	bne.n	80119da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80119d4:	2302      	movs	r3, #2
 80119d6:	607b      	str	r3, [r7, #4]
 80119d8:	e001      	b.n	80119de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80119da:	2300      	movs	r3, #0
 80119dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80119de:	687b      	ldr	r3, [r7, #4]
	}
 80119e0:	4618      	mov	r0, r3
 80119e2:	370c      	adds	r7, #12
 80119e4:	46bd      	mov	sp, r7
 80119e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ea:	4770      	bx	lr
 80119ec:	20001594 	.word	0x20001594
 80119f0:	200015b0 	.word	0x200015b0

080119f4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80119f4:	b580      	push	{r7, lr}
 80119f6:	b084      	sub	sp, #16
 80119f8:	af00      	add	r7, sp, #0
 80119fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8011a00:	2300      	movs	r3, #0
 8011a02:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d06e      	beq.n	8011ae8 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8011a0a:	68bb      	ldr	r3, [r7, #8]
 8011a0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a0e:	4b39      	ldr	r3, [pc, #228]	; (8011af4 <xTaskPriorityInherit+0x100>)
 8011a10:	681b      	ldr	r3, [r3, #0]
 8011a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a14:	429a      	cmp	r2, r3
 8011a16:	d25e      	bcs.n	8011ad6 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011a18:	68bb      	ldr	r3, [r7, #8]
 8011a1a:	699b      	ldr	r3, [r3, #24]
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	db06      	blt.n	8011a2e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011a20:	4b34      	ldr	r3, [pc, #208]	; (8011af4 <xTaskPriorityInherit+0x100>)
 8011a22:	681b      	ldr	r3, [r3, #0]
 8011a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a26:	f1c3 0207 	rsb	r2, r3, #7
 8011a2a:	68bb      	ldr	r3, [r7, #8]
 8011a2c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8011a2e:	68bb      	ldr	r3, [r7, #8]
 8011a30:	6959      	ldr	r1, [r3, #20]
 8011a32:	68bb      	ldr	r3, [r7, #8]
 8011a34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a36:	4613      	mov	r3, r2
 8011a38:	009b      	lsls	r3, r3, #2
 8011a3a:	4413      	add	r3, r2
 8011a3c:	009b      	lsls	r3, r3, #2
 8011a3e:	4a2e      	ldr	r2, [pc, #184]	; (8011af8 <xTaskPriorityInherit+0x104>)
 8011a40:	4413      	add	r3, r2
 8011a42:	4299      	cmp	r1, r3
 8011a44:	d101      	bne.n	8011a4a <xTaskPriorityInherit+0x56>
 8011a46:	2301      	movs	r3, #1
 8011a48:	e000      	b.n	8011a4c <xTaskPriorityInherit+0x58>
 8011a4a:	2300      	movs	r3, #0
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d03a      	beq.n	8011ac6 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011a50:	68bb      	ldr	r3, [r7, #8]
 8011a52:	3304      	adds	r3, #4
 8011a54:	4618      	mov	r0, r3
 8011a56:	f7fe faa6 	bl	800ffa6 <uxListRemove>
 8011a5a:	4603      	mov	r3, r0
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d115      	bne.n	8011a8c <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8011a60:	68bb      	ldr	r3, [r7, #8]
 8011a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a64:	4924      	ldr	r1, [pc, #144]	; (8011af8 <xTaskPriorityInherit+0x104>)
 8011a66:	4613      	mov	r3, r2
 8011a68:	009b      	lsls	r3, r3, #2
 8011a6a:	4413      	add	r3, r2
 8011a6c:	009b      	lsls	r3, r3, #2
 8011a6e:	440b      	add	r3, r1
 8011a70:	681b      	ldr	r3, [r3, #0]
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d10a      	bne.n	8011a8c <xTaskPriorityInherit+0x98>
 8011a76:	68bb      	ldr	r3, [r7, #8]
 8011a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a7a:	2201      	movs	r2, #1
 8011a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8011a80:	43da      	mvns	r2, r3
 8011a82:	4b1e      	ldr	r3, [pc, #120]	; (8011afc <xTaskPriorityInherit+0x108>)
 8011a84:	681b      	ldr	r3, [r3, #0]
 8011a86:	4013      	ands	r3, r2
 8011a88:	4a1c      	ldr	r2, [pc, #112]	; (8011afc <xTaskPriorityInherit+0x108>)
 8011a8a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011a8c:	4b19      	ldr	r3, [pc, #100]	; (8011af4 <xTaskPriorityInherit+0x100>)
 8011a8e:	681b      	ldr	r3, [r3, #0]
 8011a90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a92:	68bb      	ldr	r3, [r7, #8]
 8011a94:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8011a96:	68bb      	ldr	r3, [r7, #8]
 8011a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a9a:	2201      	movs	r2, #1
 8011a9c:	409a      	lsls	r2, r3
 8011a9e:	4b17      	ldr	r3, [pc, #92]	; (8011afc <xTaskPriorityInherit+0x108>)
 8011aa0:	681b      	ldr	r3, [r3, #0]
 8011aa2:	4313      	orrs	r3, r2
 8011aa4:	4a15      	ldr	r2, [pc, #84]	; (8011afc <xTaskPriorityInherit+0x108>)
 8011aa6:	6013      	str	r3, [r2, #0]
 8011aa8:	68bb      	ldr	r3, [r7, #8]
 8011aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011aac:	4613      	mov	r3, r2
 8011aae:	009b      	lsls	r3, r3, #2
 8011ab0:	4413      	add	r3, r2
 8011ab2:	009b      	lsls	r3, r3, #2
 8011ab4:	4a10      	ldr	r2, [pc, #64]	; (8011af8 <xTaskPriorityInherit+0x104>)
 8011ab6:	441a      	add	r2, r3
 8011ab8:	68bb      	ldr	r3, [r7, #8]
 8011aba:	3304      	adds	r3, #4
 8011abc:	4619      	mov	r1, r3
 8011abe:	4610      	mov	r0, r2
 8011ac0:	f7fe fa14 	bl	800feec <vListInsertEnd>
 8011ac4:	e004      	b.n	8011ad0 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011ac6:	4b0b      	ldr	r3, [pc, #44]	; (8011af4 <xTaskPriorityInherit+0x100>)
 8011ac8:	681b      	ldr	r3, [r3, #0]
 8011aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011acc:	68bb      	ldr	r3, [r7, #8]
 8011ace:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8011ad0:	2301      	movs	r3, #1
 8011ad2:	60fb      	str	r3, [r7, #12]
 8011ad4:	e008      	b.n	8011ae8 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8011ad6:	68bb      	ldr	r3, [r7, #8]
 8011ad8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011ada:	4b06      	ldr	r3, [pc, #24]	; (8011af4 <xTaskPriorityInherit+0x100>)
 8011adc:	681b      	ldr	r3, [r3, #0]
 8011ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ae0:	429a      	cmp	r2, r3
 8011ae2:	d201      	bcs.n	8011ae8 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8011ae4:	2301      	movs	r3, #1
 8011ae6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011ae8:	68fb      	ldr	r3, [r7, #12]
	}
 8011aea:	4618      	mov	r0, r3
 8011aec:	3710      	adds	r7, #16
 8011aee:	46bd      	mov	sp, r7
 8011af0:	bd80      	pop	{r7, pc}
 8011af2:	bf00      	nop
 8011af4:	20001488 	.word	0x20001488
 8011af8:	2000148c 	.word	0x2000148c
 8011afc:	20001590 	.word	0x20001590

08011b00 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011b00:	b580      	push	{r7, lr}
 8011b02:	b086      	sub	sp, #24
 8011b04:	af00      	add	r7, sp, #0
 8011b06:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011b0c:	2300      	movs	r3, #0
 8011b0e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d06c      	beq.n	8011bf0 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8011b16:	4b39      	ldr	r3, [pc, #228]	; (8011bfc <xTaskPriorityDisinherit+0xfc>)
 8011b18:	681b      	ldr	r3, [r3, #0]
 8011b1a:	693a      	ldr	r2, [r7, #16]
 8011b1c:	429a      	cmp	r2, r3
 8011b1e:	d009      	beq.n	8011b34 <xTaskPriorityDisinherit+0x34>
 8011b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b24:	f383 8811 	msr	BASEPRI, r3
 8011b28:	f3bf 8f6f 	isb	sy
 8011b2c:	f3bf 8f4f 	dsb	sy
 8011b30:	60fb      	str	r3, [r7, #12]
 8011b32:	e7fe      	b.n	8011b32 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8011b34:	693b      	ldr	r3, [r7, #16]
 8011b36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d109      	bne.n	8011b50 <xTaskPriorityDisinherit+0x50>
 8011b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b40:	f383 8811 	msr	BASEPRI, r3
 8011b44:	f3bf 8f6f 	isb	sy
 8011b48:	f3bf 8f4f 	dsb	sy
 8011b4c:	60bb      	str	r3, [r7, #8]
 8011b4e:	e7fe      	b.n	8011b4e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8011b50:	693b      	ldr	r3, [r7, #16]
 8011b52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011b54:	1e5a      	subs	r2, r3, #1
 8011b56:	693b      	ldr	r3, [r7, #16]
 8011b58:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011b5a:	693b      	ldr	r3, [r7, #16]
 8011b5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b5e:	693b      	ldr	r3, [r7, #16]
 8011b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011b62:	429a      	cmp	r2, r3
 8011b64:	d044      	beq.n	8011bf0 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011b66:	693b      	ldr	r3, [r7, #16]
 8011b68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d140      	bne.n	8011bf0 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011b6e:	693b      	ldr	r3, [r7, #16]
 8011b70:	3304      	adds	r3, #4
 8011b72:	4618      	mov	r0, r3
 8011b74:	f7fe fa17 	bl	800ffa6 <uxListRemove>
 8011b78:	4603      	mov	r3, r0
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d115      	bne.n	8011baa <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8011b7e:	693b      	ldr	r3, [r7, #16]
 8011b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b82:	491f      	ldr	r1, [pc, #124]	; (8011c00 <xTaskPriorityDisinherit+0x100>)
 8011b84:	4613      	mov	r3, r2
 8011b86:	009b      	lsls	r3, r3, #2
 8011b88:	4413      	add	r3, r2
 8011b8a:	009b      	lsls	r3, r3, #2
 8011b8c:	440b      	add	r3, r1
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d10a      	bne.n	8011baa <xTaskPriorityDisinherit+0xaa>
 8011b94:	693b      	ldr	r3, [r7, #16]
 8011b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b98:	2201      	movs	r2, #1
 8011b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8011b9e:	43da      	mvns	r2, r3
 8011ba0:	4b18      	ldr	r3, [pc, #96]	; (8011c04 <xTaskPriorityDisinherit+0x104>)
 8011ba2:	681b      	ldr	r3, [r3, #0]
 8011ba4:	4013      	ands	r3, r2
 8011ba6:	4a17      	ldr	r2, [pc, #92]	; (8011c04 <xTaskPriorityDisinherit+0x104>)
 8011ba8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011baa:	693b      	ldr	r3, [r7, #16]
 8011bac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011bae:	693b      	ldr	r3, [r7, #16]
 8011bb0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011bb2:	693b      	ldr	r3, [r7, #16]
 8011bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011bb6:	f1c3 0207 	rsb	r2, r3, #7
 8011bba:	693b      	ldr	r3, [r7, #16]
 8011bbc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011bbe:	693b      	ldr	r3, [r7, #16]
 8011bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011bc2:	2201      	movs	r2, #1
 8011bc4:	409a      	lsls	r2, r3
 8011bc6:	4b0f      	ldr	r3, [pc, #60]	; (8011c04 <xTaskPriorityDisinherit+0x104>)
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	4313      	orrs	r3, r2
 8011bcc:	4a0d      	ldr	r2, [pc, #52]	; (8011c04 <xTaskPriorityDisinherit+0x104>)
 8011bce:	6013      	str	r3, [r2, #0]
 8011bd0:	693b      	ldr	r3, [r7, #16]
 8011bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011bd4:	4613      	mov	r3, r2
 8011bd6:	009b      	lsls	r3, r3, #2
 8011bd8:	4413      	add	r3, r2
 8011bda:	009b      	lsls	r3, r3, #2
 8011bdc:	4a08      	ldr	r2, [pc, #32]	; (8011c00 <xTaskPriorityDisinherit+0x100>)
 8011bde:	441a      	add	r2, r3
 8011be0:	693b      	ldr	r3, [r7, #16]
 8011be2:	3304      	adds	r3, #4
 8011be4:	4619      	mov	r1, r3
 8011be6:	4610      	mov	r0, r2
 8011be8:	f7fe f980 	bl	800feec <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011bec:	2301      	movs	r3, #1
 8011bee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011bf0:	697b      	ldr	r3, [r7, #20]
	}
 8011bf2:	4618      	mov	r0, r3
 8011bf4:	3718      	adds	r7, #24
 8011bf6:	46bd      	mov	sp, r7
 8011bf8:	bd80      	pop	{r7, pc}
 8011bfa:	bf00      	nop
 8011bfc:	20001488 	.word	0x20001488
 8011c00:	2000148c 	.word	0x2000148c
 8011c04:	20001590 	.word	0x20001590

08011c08 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8011c08:	b580      	push	{r7, lr}
 8011c0a:	b088      	sub	sp, #32
 8011c0c:	af00      	add	r7, sp, #0
 8011c0e:	6078      	str	r0, [r7, #4]
 8011c10:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8011c16:	2301      	movs	r3, #1
 8011c18:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	f000 8086 	beq.w	8011d2e <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8011c22:	69bb      	ldr	r3, [r7, #24]
 8011c24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d109      	bne.n	8011c3e <vTaskPriorityDisinheritAfterTimeout+0x36>
 8011c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c2e:	f383 8811 	msr	BASEPRI, r3
 8011c32:	f3bf 8f6f 	isb	sy
 8011c36:	f3bf 8f4f 	dsb	sy
 8011c3a:	60fb      	str	r3, [r7, #12]
 8011c3c:	e7fe      	b.n	8011c3c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8011c3e:	69bb      	ldr	r3, [r7, #24]
 8011c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011c42:	683a      	ldr	r2, [r7, #0]
 8011c44:	429a      	cmp	r2, r3
 8011c46:	d902      	bls.n	8011c4e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8011c48:	683b      	ldr	r3, [r7, #0]
 8011c4a:	61fb      	str	r3, [r7, #28]
 8011c4c:	e002      	b.n	8011c54 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8011c4e:	69bb      	ldr	r3, [r7, #24]
 8011c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011c52:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8011c54:	69bb      	ldr	r3, [r7, #24]
 8011c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c58:	69fa      	ldr	r2, [r7, #28]
 8011c5a:	429a      	cmp	r2, r3
 8011c5c:	d067      	beq.n	8011d2e <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8011c5e:	69bb      	ldr	r3, [r7, #24]
 8011c60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011c62:	697a      	ldr	r2, [r7, #20]
 8011c64:	429a      	cmp	r2, r3
 8011c66:	d162      	bne.n	8011d2e <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8011c68:	4b33      	ldr	r3, [pc, #204]	; (8011d38 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8011c6a:	681b      	ldr	r3, [r3, #0]
 8011c6c:	69ba      	ldr	r2, [r7, #24]
 8011c6e:	429a      	cmp	r2, r3
 8011c70:	d109      	bne.n	8011c86 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8011c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c76:	f383 8811 	msr	BASEPRI, r3
 8011c7a:	f3bf 8f6f 	isb	sy
 8011c7e:	f3bf 8f4f 	dsb	sy
 8011c82:	60bb      	str	r3, [r7, #8]
 8011c84:	e7fe      	b.n	8011c84 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8011c86:	69bb      	ldr	r3, [r7, #24]
 8011c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c8a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8011c8c:	69bb      	ldr	r3, [r7, #24]
 8011c8e:	69fa      	ldr	r2, [r7, #28]
 8011c90:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011c92:	69bb      	ldr	r3, [r7, #24]
 8011c94:	699b      	ldr	r3, [r3, #24]
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	db04      	blt.n	8011ca4 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011c9a:	69fb      	ldr	r3, [r7, #28]
 8011c9c:	f1c3 0207 	rsb	r2, r3, #7
 8011ca0:	69bb      	ldr	r3, [r7, #24]
 8011ca2:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011ca4:	69bb      	ldr	r3, [r7, #24]
 8011ca6:	6959      	ldr	r1, [r3, #20]
 8011ca8:	693a      	ldr	r2, [r7, #16]
 8011caa:	4613      	mov	r3, r2
 8011cac:	009b      	lsls	r3, r3, #2
 8011cae:	4413      	add	r3, r2
 8011cb0:	009b      	lsls	r3, r3, #2
 8011cb2:	4a22      	ldr	r2, [pc, #136]	; (8011d3c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8011cb4:	4413      	add	r3, r2
 8011cb6:	4299      	cmp	r1, r3
 8011cb8:	d101      	bne.n	8011cbe <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8011cba:	2301      	movs	r3, #1
 8011cbc:	e000      	b.n	8011cc0 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8011cbe:	2300      	movs	r3, #0
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	d034      	beq.n	8011d2e <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011cc4:	69bb      	ldr	r3, [r7, #24]
 8011cc6:	3304      	adds	r3, #4
 8011cc8:	4618      	mov	r0, r3
 8011cca:	f7fe f96c 	bl	800ffa6 <uxListRemove>
 8011cce:	4603      	mov	r3, r0
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	d115      	bne.n	8011d00 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8011cd4:	69bb      	ldr	r3, [r7, #24]
 8011cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011cd8:	4918      	ldr	r1, [pc, #96]	; (8011d3c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8011cda:	4613      	mov	r3, r2
 8011cdc:	009b      	lsls	r3, r3, #2
 8011cde:	4413      	add	r3, r2
 8011ce0:	009b      	lsls	r3, r3, #2
 8011ce2:	440b      	add	r3, r1
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	d10a      	bne.n	8011d00 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 8011cea:	69bb      	ldr	r3, [r7, #24]
 8011cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011cee:	2201      	movs	r2, #1
 8011cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8011cf4:	43da      	mvns	r2, r3
 8011cf6:	4b12      	ldr	r3, [pc, #72]	; (8011d40 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8011cf8:	681b      	ldr	r3, [r3, #0]
 8011cfa:	4013      	ands	r3, r2
 8011cfc:	4a10      	ldr	r2, [pc, #64]	; (8011d40 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8011cfe:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8011d00:	69bb      	ldr	r3, [r7, #24]
 8011d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d04:	2201      	movs	r2, #1
 8011d06:	409a      	lsls	r2, r3
 8011d08:	4b0d      	ldr	r3, [pc, #52]	; (8011d40 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8011d0a:	681b      	ldr	r3, [r3, #0]
 8011d0c:	4313      	orrs	r3, r2
 8011d0e:	4a0c      	ldr	r2, [pc, #48]	; (8011d40 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8011d10:	6013      	str	r3, [r2, #0]
 8011d12:	69bb      	ldr	r3, [r7, #24]
 8011d14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d16:	4613      	mov	r3, r2
 8011d18:	009b      	lsls	r3, r3, #2
 8011d1a:	4413      	add	r3, r2
 8011d1c:	009b      	lsls	r3, r3, #2
 8011d1e:	4a07      	ldr	r2, [pc, #28]	; (8011d3c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8011d20:	441a      	add	r2, r3
 8011d22:	69bb      	ldr	r3, [r7, #24]
 8011d24:	3304      	adds	r3, #4
 8011d26:	4619      	mov	r1, r3
 8011d28:	4610      	mov	r0, r2
 8011d2a:	f7fe f8df 	bl	800feec <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011d2e:	bf00      	nop
 8011d30:	3720      	adds	r7, #32
 8011d32:	46bd      	mov	sp, r7
 8011d34:	bd80      	pop	{r7, pc}
 8011d36:	bf00      	nop
 8011d38:	20001488 	.word	0x20001488
 8011d3c:	2000148c 	.word	0x2000148c
 8011d40:	20001590 	.word	0x20001590

08011d44 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8011d44:	b480      	push	{r7}
 8011d46:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8011d48:	4b07      	ldr	r3, [pc, #28]	; (8011d68 <pvTaskIncrementMutexHeldCount+0x24>)
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	d004      	beq.n	8011d5a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8011d50:	4b05      	ldr	r3, [pc, #20]	; (8011d68 <pvTaskIncrementMutexHeldCount+0x24>)
 8011d52:	681b      	ldr	r3, [r3, #0]
 8011d54:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011d56:	3201      	adds	r2, #1
 8011d58:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8011d5a:	4b03      	ldr	r3, [pc, #12]	; (8011d68 <pvTaskIncrementMutexHeldCount+0x24>)
 8011d5c:	681b      	ldr	r3, [r3, #0]
	}
 8011d5e:	4618      	mov	r0, r3
 8011d60:	46bd      	mov	sp, r7
 8011d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d66:	4770      	bx	lr
 8011d68:	20001488 	.word	0x20001488

08011d6c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8011d6c:	b580      	push	{r7, lr}
 8011d6e:	b086      	sub	sp, #24
 8011d70:	af00      	add	r7, sp, #0
 8011d72:	60f8      	str	r0, [r7, #12]
 8011d74:	60b9      	str	r1, [r7, #8]
 8011d76:	607a      	str	r2, [r7, #4]
 8011d78:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8011d7a:	f000 fb47 	bl	801240c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8011d7e:	4b26      	ldr	r3, [pc, #152]	; (8011e18 <xTaskNotifyWait+0xac>)
 8011d80:	681b      	ldr	r3, [r3, #0]
 8011d82:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8011d86:	b2db      	uxtb	r3, r3
 8011d88:	2b02      	cmp	r3, #2
 8011d8a:	d01a      	beq.n	8011dc2 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8011d8c:	4b22      	ldr	r3, [pc, #136]	; (8011e18 <xTaskNotifyWait+0xac>)
 8011d8e:	681b      	ldr	r3, [r3, #0]
 8011d90:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8011d92:	68fa      	ldr	r2, [r7, #12]
 8011d94:	43d2      	mvns	r2, r2
 8011d96:	400a      	ands	r2, r1
 8011d98:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8011d9a:	4b1f      	ldr	r3, [pc, #124]	; (8011e18 <xTaskNotifyWait+0xac>)
 8011d9c:	681b      	ldr	r3, [r3, #0]
 8011d9e:	2201      	movs	r2, #1
 8011da0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 8011da4:	683b      	ldr	r3, [r7, #0]
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d00b      	beq.n	8011dc2 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011daa:	2101      	movs	r1, #1
 8011dac:	6838      	ldr	r0, [r7, #0]
 8011dae:	f000 f99d 	bl	80120ec <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8011db2:	4b1a      	ldr	r3, [pc, #104]	; (8011e1c <xTaskNotifyWait+0xb0>)
 8011db4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011db8:	601a      	str	r2, [r3, #0]
 8011dba:	f3bf 8f4f 	dsb	sy
 8011dbe:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8011dc2:	f000 fb51 	bl	8012468 <vPortExitCritical>

		taskENTER_CRITICAL();
 8011dc6:	f000 fb21 	bl	801240c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d004      	beq.n	8011dda <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8011dd0:	4b11      	ldr	r3, [pc, #68]	; (8011e18 <xTaskNotifyWait+0xac>)
 8011dd2:	681b      	ldr	r3, [r3, #0]
 8011dd4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8011dda:	4b0f      	ldr	r3, [pc, #60]	; (8011e18 <xTaskNotifyWait+0xac>)
 8011ddc:	681b      	ldr	r3, [r3, #0]
 8011dde:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8011de2:	b2db      	uxtb	r3, r3
 8011de4:	2b02      	cmp	r3, #2
 8011de6:	d002      	beq.n	8011dee <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8011de8:	2300      	movs	r3, #0
 8011dea:	617b      	str	r3, [r7, #20]
 8011dec:	e008      	b.n	8011e00 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8011dee:	4b0a      	ldr	r3, [pc, #40]	; (8011e18 <xTaskNotifyWait+0xac>)
 8011df0:	681b      	ldr	r3, [r3, #0]
 8011df2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8011df4:	68ba      	ldr	r2, [r7, #8]
 8011df6:	43d2      	mvns	r2, r2
 8011df8:	400a      	ands	r2, r1
 8011dfa:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 8011dfc:	2301      	movs	r3, #1
 8011dfe:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011e00:	4b05      	ldr	r3, [pc, #20]	; (8011e18 <xTaskNotifyWait+0xac>)
 8011e02:	681b      	ldr	r3, [r3, #0]
 8011e04:	2200      	movs	r2, #0
 8011e06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 8011e0a:	f000 fb2d 	bl	8012468 <vPortExitCritical>

		return xReturn;
 8011e0e:	697b      	ldr	r3, [r7, #20]
	}
 8011e10:	4618      	mov	r0, r3
 8011e12:	3718      	adds	r7, #24
 8011e14:	46bd      	mov	sp, r7
 8011e16:	bd80      	pop	{r7, pc}
 8011e18:	20001488 	.word	0x20001488
 8011e1c:	e000ed04 	.word	0xe000ed04

08011e20 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8011e20:	b580      	push	{r7, lr}
 8011e22:	b08a      	sub	sp, #40	; 0x28
 8011e24:	af00      	add	r7, sp, #0
 8011e26:	60f8      	str	r0, [r7, #12]
 8011e28:	60b9      	str	r1, [r7, #8]
 8011e2a:	603b      	str	r3, [r7, #0]
 8011e2c:	4613      	mov	r3, r2
 8011e2e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8011e30:	2301      	movs	r3, #1
 8011e32:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8011e34:	68fb      	ldr	r3, [r7, #12]
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d109      	bne.n	8011e4e <xTaskGenericNotify+0x2e>
 8011e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e3e:	f383 8811 	msr	BASEPRI, r3
 8011e42:	f3bf 8f6f 	isb	sy
 8011e46:	f3bf 8f4f 	dsb	sy
 8011e4a:	61bb      	str	r3, [r7, #24]
 8011e4c:	e7fe      	b.n	8011e4c <xTaskGenericNotify+0x2c>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 8011e4e:	68fb      	ldr	r3, [r7, #12]
 8011e50:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8011e52:	f000 fadb 	bl	801240c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8011e56:	683b      	ldr	r3, [r7, #0]
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d003      	beq.n	8011e64 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8011e5c:	6a3b      	ldr	r3, [r7, #32]
 8011e5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011e60:	683b      	ldr	r3, [r7, #0]
 8011e62:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8011e64:	6a3b      	ldr	r3, [r7, #32]
 8011e66:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8011e6a:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8011e6c:	6a3b      	ldr	r3, [r7, #32]
 8011e6e:	2202      	movs	r2, #2
 8011e70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8011e74:	79fb      	ldrb	r3, [r7, #7]
 8011e76:	2b04      	cmp	r3, #4
 8011e78:	d827      	bhi.n	8011eca <xTaskGenericNotify+0xaa>
 8011e7a:	a201      	add	r2, pc, #4	; (adr r2, 8011e80 <xTaskGenericNotify+0x60>)
 8011e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e80:	08011ecb 	.word	0x08011ecb
 8011e84:	08011e95 	.word	0x08011e95
 8011e88:	08011ea3 	.word	0x08011ea3
 8011e8c:	08011eaf 	.word	0x08011eaf
 8011e90:	08011eb7 	.word	0x08011eb7
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8011e94:	6a3b      	ldr	r3, [r7, #32]
 8011e96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011e98:	68bb      	ldr	r3, [r7, #8]
 8011e9a:	431a      	orrs	r2, r3
 8011e9c:	6a3b      	ldr	r3, [r7, #32]
 8011e9e:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8011ea0:	e013      	b.n	8011eca <xTaskGenericNotify+0xaa>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8011ea2:	6a3b      	ldr	r3, [r7, #32]
 8011ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011ea6:	1c5a      	adds	r2, r3, #1
 8011ea8:	6a3b      	ldr	r3, [r7, #32]
 8011eaa:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8011eac:	e00d      	b.n	8011eca <xTaskGenericNotify+0xaa>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8011eae:	6a3b      	ldr	r3, [r7, #32]
 8011eb0:	68ba      	ldr	r2, [r7, #8]
 8011eb2:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8011eb4:	e009      	b.n	8011eca <xTaskGenericNotify+0xaa>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8011eb6:	7ffb      	ldrb	r3, [r7, #31]
 8011eb8:	2b02      	cmp	r3, #2
 8011eba:	d003      	beq.n	8011ec4 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8011ebc:	6a3b      	ldr	r3, [r7, #32]
 8011ebe:	68ba      	ldr	r2, [r7, #8]
 8011ec0:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8011ec2:	e001      	b.n	8011ec8 <xTaskGenericNotify+0xa8>
						xReturn = pdFAIL;
 8011ec4:	2300      	movs	r3, #0
 8011ec6:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8011ec8:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8011eca:	7ffb      	ldrb	r3, [r7, #31]
 8011ecc:	2b01      	cmp	r3, #1
 8011ece:	d138      	bne.n	8011f42 <xTaskGenericNotify+0x122>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011ed0:	6a3b      	ldr	r3, [r7, #32]
 8011ed2:	3304      	adds	r3, #4
 8011ed4:	4618      	mov	r0, r3
 8011ed6:	f7fe f866 	bl	800ffa6 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8011eda:	6a3b      	ldr	r3, [r7, #32]
 8011edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ede:	2201      	movs	r2, #1
 8011ee0:	409a      	lsls	r2, r3
 8011ee2:	4b1b      	ldr	r3, [pc, #108]	; (8011f50 <xTaskGenericNotify+0x130>)
 8011ee4:	681b      	ldr	r3, [r3, #0]
 8011ee6:	4313      	orrs	r3, r2
 8011ee8:	4a19      	ldr	r2, [pc, #100]	; (8011f50 <xTaskGenericNotify+0x130>)
 8011eea:	6013      	str	r3, [r2, #0]
 8011eec:	6a3b      	ldr	r3, [r7, #32]
 8011eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ef0:	4613      	mov	r3, r2
 8011ef2:	009b      	lsls	r3, r3, #2
 8011ef4:	4413      	add	r3, r2
 8011ef6:	009b      	lsls	r3, r3, #2
 8011ef8:	4a16      	ldr	r2, [pc, #88]	; (8011f54 <xTaskGenericNotify+0x134>)
 8011efa:	441a      	add	r2, r3
 8011efc:	6a3b      	ldr	r3, [r7, #32]
 8011efe:	3304      	adds	r3, #4
 8011f00:	4619      	mov	r1, r3
 8011f02:	4610      	mov	r0, r2
 8011f04:	f7fd fff2 	bl	800feec <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8011f08:	6a3b      	ldr	r3, [r7, #32]
 8011f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d009      	beq.n	8011f24 <xTaskGenericNotify+0x104>
 8011f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f14:	f383 8811 	msr	BASEPRI, r3
 8011f18:	f3bf 8f6f 	isb	sy
 8011f1c:	f3bf 8f4f 	dsb	sy
 8011f20:	617b      	str	r3, [r7, #20]
 8011f22:	e7fe      	b.n	8011f22 <xTaskGenericNotify+0x102>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011f24:	6a3b      	ldr	r3, [r7, #32]
 8011f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f28:	4b0b      	ldr	r3, [pc, #44]	; (8011f58 <xTaskGenericNotify+0x138>)
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f2e:	429a      	cmp	r2, r3
 8011f30:	d907      	bls.n	8011f42 <xTaskGenericNotify+0x122>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8011f32:	4b0a      	ldr	r3, [pc, #40]	; (8011f5c <xTaskGenericNotify+0x13c>)
 8011f34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011f38:	601a      	str	r2, [r3, #0]
 8011f3a:	f3bf 8f4f 	dsb	sy
 8011f3e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8011f42:	f000 fa91 	bl	8012468 <vPortExitCritical>

		return xReturn;
 8011f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8011f48:	4618      	mov	r0, r3
 8011f4a:	3728      	adds	r7, #40	; 0x28
 8011f4c:	46bd      	mov	sp, r7
 8011f4e:	bd80      	pop	{r7, pc}
 8011f50:	20001590 	.word	0x20001590
 8011f54:	2000148c 	.word	0x2000148c
 8011f58:	20001488 	.word	0x20001488
 8011f5c:	e000ed04 	.word	0xe000ed04

08011f60 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8011f60:	b580      	push	{r7, lr}
 8011f62:	b08e      	sub	sp, #56	; 0x38
 8011f64:	af00      	add	r7, sp, #0
 8011f66:	60f8      	str	r0, [r7, #12]
 8011f68:	60b9      	str	r1, [r7, #8]
 8011f6a:	603b      	str	r3, [r7, #0]
 8011f6c:	4613      	mov	r3, r2
 8011f6e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8011f70:	2301      	movs	r3, #1
 8011f72:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8011f74:	68fb      	ldr	r3, [r7, #12]
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d109      	bne.n	8011f8e <xTaskGenericNotifyFromISR+0x2e>
 8011f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f7e:	f383 8811 	msr	BASEPRI, r3
 8011f82:	f3bf 8f6f 	isb	sy
 8011f86:	f3bf 8f4f 	dsb	sy
 8011f8a:	627b      	str	r3, [r7, #36]	; 0x24
 8011f8c:	e7fe      	b.n	8011f8c <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011f8e:	f000 fb19 	bl	80125c4 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 8011f92:	68fb      	ldr	r3, [r7, #12]
 8011f94:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8011f96:	f3ef 8211 	mrs	r2, BASEPRI
 8011f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f9e:	f383 8811 	msr	BASEPRI, r3
 8011fa2:	f3bf 8f6f 	isb	sy
 8011fa6:	f3bf 8f4f 	dsb	sy
 8011faa:	623a      	str	r2, [r7, #32]
 8011fac:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8011fae:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8011fb2:	683b      	ldr	r3, [r7, #0]
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d003      	beq.n	8011fc0 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8011fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011fbc:	683b      	ldr	r3, [r7, #0]
 8011fbe:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8011fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fc2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8011fc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8011fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fcc:	2202      	movs	r2, #2
 8011fce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8011fd2:	79fb      	ldrb	r3, [r7, #7]
 8011fd4:	2b04      	cmp	r3, #4
 8011fd6:	d829      	bhi.n	801202c <xTaskGenericNotifyFromISR+0xcc>
 8011fd8:	a201      	add	r2, pc, #4	; (adr r2, 8011fe0 <xTaskGenericNotifyFromISR+0x80>)
 8011fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011fde:	bf00      	nop
 8011fe0:	0801202d 	.word	0x0801202d
 8011fe4:	08011ff5 	.word	0x08011ff5
 8011fe8:	08012003 	.word	0x08012003
 8011fec:	0801200f 	.word	0x0801200f
 8011ff0:	08012017 	.word	0x08012017
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8011ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ff6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011ff8:	68bb      	ldr	r3, [r7, #8]
 8011ffa:	431a      	orrs	r2, r3
 8011ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ffe:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8012000:	e014      	b.n	801202c <xTaskGenericNotifyFromISR+0xcc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8012002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012006:	1c5a      	adds	r2, r3, #1
 8012008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801200a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 801200c:	e00e      	b.n	801202c <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801200e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012010:	68ba      	ldr	r2, [r7, #8]
 8012012:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8012014:	e00a      	b.n	801202c <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8012016:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801201a:	2b02      	cmp	r3, #2
 801201c:	d003      	beq.n	8012026 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 801201e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012020:	68ba      	ldr	r2, [r7, #8]
 8012022:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8012024:	e001      	b.n	801202a <xTaskGenericNotifyFromISR+0xca>
						xReturn = pdFAIL;
 8012026:	2300      	movs	r3, #0
 8012028:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 801202a:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801202c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012030:	2b01      	cmp	r3, #1
 8012032:	d145      	bne.n	80120c0 <xTaskGenericNotifyFromISR+0x160>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8012034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012038:	2b00      	cmp	r3, #0
 801203a:	d009      	beq.n	8012050 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 801203c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012040:	f383 8811 	msr	BASEPRI, r3
 8012044:	f3bf 8f6f 	isb	sy
 8012048:	f3bf 8f4f 	dsb	sy
 801204c:	61bb      	str	r3, [r7, #24]
 801204e:	e7fe      	b.n	801204e <xTaskGenericNotifyFromISR+0xee>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012050:	4b20      	ldr	r3, [pc, #128]	; (80120d4 <xTaskGenericNotifyFromISR+0x174>)
 8012052:	681b      	ldr	r3, [r3, #0]
 8012054:	2b00      	cmp	r3, #0
 8012056:	d11c      	bne.n	8012092 <xTaskGenericNotifyFromISR+0x132>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801205a:	3304      	adds	r3, #4
 801205c:	4618      	mov	r0, r3
 801205e:	f7fd ffa2 	bl	800ffa6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012066:	2201      	movs	r2, #1
 8012068:	409a      	lsls	r2, r3
 801206a:	4b1b      	ldr	r3, [pc, #108]	; (80120d8 <xTaskGenericNotifyFromISR+0x178>)
 801206c:	681b      	ldr	r3, [r3, #0]
 801206e:	4313      	orrs	r3, r2
 8012070:	4a19      	ldr	r2, [pc, #100]	; (80120d8 <xTaskGenericNotifyFromISR+0x178>)
 8012072:	6013      	str	r3, [r2, #0]
 8012074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012078:	4613      	mov	r3, r2
 801207a:	009b      	lsls	r3, r3, #2
 801207c:	4413      	add	r3, r2
 801207e:	009b      	lsls	r3, r3, #2
 8012080:	4a16      	ldr	r2, [pc, #88]	; (80120dc <xTaskGenericNotifyFromISR+0x17c>)
 8012082:	441a      	add	r2, r3
 8012084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012086:	3304      	adds	r3, #4
 8012088:	4619      	mov	r1, r3
 801208a:	4610      	mov	r0, r2
 801208c:	f7fd ff2e 	bl	800feec <vListInsertEnd>
 8012090:	e005      	b.n	801209e <xTaskGenericNotifyFromISR+0x13e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8012092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012094:	3318      	adds	r3, #24
 8012096:	4619      	mov	r1, r3
 8012098:	4811      	ldr	r0, [pc, #68]	; (80120e0 <xTaskGenericNotifyFromISR+0x180>)
 801209a:	f7fd ff27 	bl	800feec <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801209e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80120a2:	4b10      	ldr	r3, [pc, #64]	; (80120e4 <xTaskGenericNotifyFromISR+0x184>)
 80120a4:	681b      	ldr	r3, [r3, #0]
 80120a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80120a8:	429a      	cmp	r2, r3
 80120aa:	d909      	bls.n	80120c0 <xTaskGenericNotifyFromISR+0x160>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80120ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d003      	beq.n	80120ba <xTaskGenericNotifyFromISR+0x15a>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80120b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80120b4:	2201      	movs	r2, #1
 80120b6:	601a      	str	r2, [r3, #0]
 80120b8:	e002      	b.n	80120c0 <xTaskGenericNotifyFromISR+0x160>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 80120ba:	4b0b      	ldr	r3, [pc, #44]	; (80120e8 <xTaskGenericNotifyFromISR+0x188>)
 80120bc:	2201      	movs	r2, #1
 80120be:	601a      	str	r2, [r3, #0]
 80120c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120c2:	617b      	str	r3, [r7, #20]
	__asm volatile
 80120c4:	697b      	ldr	r3, [r7, #20]
 80120c6:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80120ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 80120cc:	4618      	mov	r0, r3
 80120ce:	3738      	adds	r7, #56	; 0x38
 80120d0:	46bd      	mov	sp, r7
 80120d2:	bd80      	pop	{r7, pc}
 80120d4:	200015b0 	.word	0x200015b0
 80120d8:	20001590 	.word	0x20001590
 80120dc:	2000148c 	.word	0x2000148c
 80120e0:	20001548 	.word	0x20001548
 80120e4:	20001488 	.word	0x20001488
 80120e8:	2000159c 	.word	0x2000159c

080120ec <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80120ec:	b580      	push	{r7, lr}
 80120ee:	b084      	sub	sp, #16
 80120f0:	af00      	add	r7, sp, #0
 80120f2:	6078      	str	r0, [r7, #4]
 80120f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80120f6:	4b29      	ldr	r3, [pc, #164]	; (801219c <prvAddCurrentTaskToDelayedList+0xb0>)
 80120f8:	681b      	ldr	r3, [r3, #0]
 80120fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80120fc:	4b28      	ldr	r3, [pc, #160]	; (80121a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	3304      	adds	r3, #4
 8012102:	4618      	mov	r0, r3
 8012104:	f7fd ff4f 	bl	800ffa6 <uxListRemove>
 8012108:	4603      	mov	r3, r0
 801210a:	2b00      	cmp	r3, #0
 801210c:	d10b      	bne.n	8012126 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 801210e:	4b24      	ldr	r3, [pc, #144]	; (80121a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012110:	681b      	ldr	r3, [r3, #0]
 8012112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012114:	2201      	movs	r2, #1
 8012116:	fa02 f303 	lsl.w	r3, r2, r3
 801211a:	43da      	mvns	r2, r3
 801211c:	4b21      	ldr	r3, [pc, #132]	; (80121a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 801211e:	681b      	ldr	r3, [r3, #0]
 8012120:	4013      	ands	r3, r2
 8012122:	4a20      	ldr	r2, [pc, #128]	; (80121a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8012124:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	f1b3 3fff 	cmp.w	r3, #4294967295
 801212c:	d10a      	bne.n	8012144 <prvAddCurrentTaskToDelayedList+0x58>
 801212e:	683b      	ldr	r3, [r7, #0]
 8012130:	2b00      	cmp	r3, #0
 8012132:	d007      	beq.n	8012144 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012134:	4b1a      	ldr	r3, [pc, #104]	; (80121a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012136:	681b      	ldr	r3, [r3, #0]
 8012138:	3304      	adds	r3, #4
 801213a:	4619      	mov	r1, r3
 801213c:	481a      	ldr	r0, [pc, #104]	; (80121a8 <prvAddCurrentTaskToDelayedList+0xbc>)
 801213e:	f7fd fed5 	bl	800feec <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8012142:	e026      	b.n	8012192 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8012144:	68fa      	ldr	r2, [r7, #12]
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	4413      	add	r3, r2
 801214a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801214c:	4b14      	ldr	r3, [pc, #80]	; (80121a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 801214e:	681b      	ldr	r3, [r3, #0]
 8012150:	68ba      	ldr	r2, [r7, #8]
 8012152:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8012154:	68ba      	ldr	r2, [r7, #8]
 8012156:	68fb      	ldr	r3, [r7, #12]
 8012158:	429a      	cmp	r2, r3
 801215a:	d209      	bcs.n	8012170 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801215c:	4b13      	ldr	r3, [pc, #76]	; (80121ac <prvAddCurrentTaskToDelayedList+0xc0>)
 801215e:	681a      	ldr	r2, [r3, #0]
 8012160:	4b0f      	ldr	r3, [pc, #60]	; (80121a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012162:	681b      	ldr	r3, [r3, #0]
 8012164:	3304      	adds	r3, #4
 8012166:	4619      	mov	r1, r3
 8012168:	4610      	mov	r0, r2
 801216a:	f7fd fee3 	bl	800ff34 <vListInsert>
}
 801216e:	e010      	b.n	8012192 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012170:	4b0f      	ldr	r3, [pc, #60]	; (80121b0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8012172:	681a      	ldr	r2, [r3, #0]
 8012174:	4b0a      	ldr	r3, [pc, #40]	; (80121a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012176:	681b      	ldr	r3, [r3, #0]
 8012178:	3304      	adds	r3, #4
 801217a:	4619      	mov	r1, r3
 801217c:	4610      	mov	r0, r2
 801217e:	f7fd fed9 	bl	800ff34 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8012182:	4b0c      	ldr	r3, [pc, #48]	; (80121b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8012184:	681b      	ldr	r3, [r3, #0]
 8012186:	68ba      	ldr	r2, [r7, #8]
 8012188:	429a      	cmp	r2, r3
 801218a:	d202      	bcs.n	8012192 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 801218c:	4a09      	ldr	r2, [pc, #36]	; (80121b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 801218e:	68bb      	ldr	r3, [r7, #8]
 8012190:	6013      	str	r3, [r2, #0]
}
 8012192:	bf00      	nop
 8012194:	3710      	adds	r7, #16
 8012196:	46bd      	mov	sp, r7
 8012198:	bd80      	pop	{r7, pc}
 801219a:	bf00      	nop
 801219c:	2000158c 	.word	0x2000158c
 80121a0:	20001488 	.word	0x20001488
 80121a4:	20001590 	.word	0x20001590
 80121a8:	20001574 	.word	0x20001574
 80121ac:	20001544 	.word	0x20001544
 80121b0:	20001540 	.word	0x20001540
 80121b4:	200015a8 	.word	0x200015a8

080121b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80121b8:	b480      	push	{r7}
 80121ba:	b085      	sub	sp, #20
 80121bc:	af00      	add	r7, sp, #0
 80121be:	60f8      	str	r0, [r7, #12]
 80121c0:	60b9      	str	r1, [r7, #8]
 80121c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80121c4:	68fb      	ldr	r3, [r7, #12]
 80121c6:	3b04      	subs	r3, #4
 80121c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80121ca:	68fb      	ldr	r3, [r7, #12]
 80121cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80121d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80121d2:	68fb      	ldr	r3, [r7, #12]
 80121d4:	3b04      	subs	r3, #4
 80121d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80121d8:	68bb      	ldr	r3, [r7, #8]
 80121da:	f023 0201 	bic.w	r2, r3, #1
 80121de:	68fb      	ldr	r3, [r7, #12]
 80121e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80121e2:	68fb      	ldr	r3, [r7, #12]
 80121e4:	3b04      	subs	r3, #4
 80121e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80121e8:	4a0c      	ldr	r2, [pc, #48]	; (801221c <pxPortInitialiseStack+0x64>)
 80121ea:	68fb      	ldr	r3, [r7, #12]
 80121ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80121ee:	68fb      	ldr	r3, [r7, #12]
 80121f0:	3b14      	subs	r3, #20
 80121f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80121f4:	687a      	ldr	r2, [r7, #4]
 80121f6:	68fb      	ldr	r3, [r7, #12]
 80121f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80121fa:	68fb      	ldr	r3, [r7, #12]
 80121fc:	3b04      	subs	r3, #4
 80121fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012200:	68fb      	ldr	r3, [r7, #12]
 8012202:	f06f 0202 	mvn.w	r2, #2
 8012206:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012208:	68fb      	ldr	r3, [r7, #12]
 801220a:	3b20      	subs	r3, #32
 801220c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801220e:	68fb      	ldr	r3, [r7, #12]
}
 8012210:	4618      	mov	r0, r3
 8012212:	3714      	adds	r7, #20
 8012214:	46bd      	mov	sp, r7
 8012216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801221a:	4770      	bx	lr
 801221c:	08012221 	.word	0x08012221

08012220 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012220:	b480      	push	{r7}
 8012222:	b085      	sub	sp, #20
 8012224:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8012226:	2300      	movs	r3, #0
 8012228:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801222a:	4b11      	ldr	r3, [pc, #68]	; (8012270 <prvTaskExitError+0x50>)
 801222c:	681b      	ldr	r3, [r3, #0]
 801222e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012232:	d009      	beq.n	8012248 <prvTaskExitError+0x28>
	__asm volatile
 8012234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012238:	f383 8811 	msr	BASEPRI, r3
 801223c:	f3bf 8f6f 	isb	sy
 8012240:	f3bf 8f4f 	dsb	sy
 8012244:	60fb      	str	r3, [r7, #12]
 8012246:	e7fe      	b.n	8012246 <prvTaskExitError+0x26>
 8012248:	f04f 0350 	mov.w	r3, #80	; 0x50
 801224c:	f383 8811 	msr	BASEPRI, r3
 8012250:	f3bf 8f6f 	isb	sy
 8012254:	f3bf 8f4f 	dsb	sy
 8012258:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801225a:	bf00      	nop
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	2b00      	cmp	r3, #0
 8012260:	d0fc      	beq.n	801225c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012262:	bf00      	nop
 8012264:	3714      	adds	r7, #20
 8012266:	46bd      	mov	sp, r7
 8012268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801226c:	4770      	bx	lr
 801226e:	bf00      	nop
 8012270:	20000dd0 	.word	0x20000dd0
	...

08012280 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012280:	4b07      	ldr	r3, [pc, #28]	; (80122a0 <pxCurrentTCBConst2>)
 8012282:	6819      	ldr	r1, [r3, #0]
 8012284:	6808      	ldr	r0, [r1, #0]
 8012286:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801228a:	f380 8809 	msr	PSP, r0
 801228e:	f3bf 8f6f 	isb	sy
 8012292:	f04f 0000 	mov.w	r0, #0
 8012296:	f380 8811 	msr	BASEPRI, r0
 801229a:	4770      	bx	lr
 801229c:	f3af 8000 	nop.w

080122a0 <pxCurrentTCBConst2>:
 80122a0:	20001488 	.word	0x20001488
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80122a4:	bf00      	nop
 80122a6:	bf00      	nop

080122a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80122a8:	4808      	ldr	r0, [pc, #32]	; (80122cc <prvPortStartFirstTask+0x24>)
 80122aa:	6800      	ldr	r0, [r0, #0]
 80122ac:	6800      	ldr	r0, [r0, #0]
 80122ae:	f380 8808 	msr	MSP, r0
 80122b2:	f04f 0000 	mov.w	r0, #0
 80122b6:	f380 8814 	msr	CONTROL, r0
 80122ba:	b662      	cpsie	i
 80122bc:	b661      	cpsie	f
 80122be:	f3bf 8f4f 	dsb	sy
 80122c2:	f3bf 8f6f 	isb	sy
 80122c6:	df00      	svc	0
 80122c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80122ca:	bf00      	nop
 80122cc:	e000ed08 	.word	0xe000ed08

080122d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80122d0:	b580      	push	{r7, lr}
 80122d2:	b086      	sub	sp, #24
 80122d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80122d6:	4b44      	ldr	r3, [pc, #272]	; (80123e8 <xPortStartScheduler+0x118>)
 80122d8:	681b      	ldr	r3, [r3, #0]
 80122da:	4a44      	ldr	r2, [pc, #272]	; (80123ec <xPortStartScheduler+0x11c>)
 80122dc:	4293      	cmp	r3, r2
 80122de:	d109      	bne.n	80122f4 <xPortStartScheduler+0x24>
 80122e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122e4:	f383 8811 	msr	BASEPRI, r3
 80122e8:	f3bf 8f6f 	isb	sy
 80122ec:	f3bf 8f4f 	dsb	sy
 80122f0:	613b      	str	r3, [r7, #16]
 80122f2:	e7fe      	b.n	80122f2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80122f4:	4b3c      	ldr	r3, [pc, #240]	; (80123e8 <xPortStartScheduler+0x118>)
 80122f6:	681b      	ldr	r3, [r3, #0]
 80122f8:	4a3d      	ldr	r2, [pc, #244]	; (80123f0 <xPortStartScheduler+0x120>)
 80122fa:	4293      	cmp	r3, r2
 80122fc:	d109      	bne.n	8012312 <xPortStartScheduler+0x42>
 80122fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012302:	f383 8811 	msr	BASEPRI, r3
 8012306:	f3bf 8f6f 	isb	sy
 801230a:	f3bf 8f4f 	dsb	sy
 801230e:	60fb      	str	r3, [r7, #12]
 8012310:	e7fe      	b.n	8012310 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012312:	4b38      	ldr	r3, [pc, #224]	; (80123f4 <xPortStartScheduler+0x124>)
 8012314:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8012316:	697b      	ldr	r3, [r7, #20]
 8012318:	781b      	ldrb	r3, [r3, #0]
 801231a:	b2db      	uxtb	r3, r3
 801231c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801231e:	697b      	ldr	r3, [r7, #20]
 8012320:	22ff      	movs	r2, #255	; 0xff
 8012322:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012324:	697b      	ldr	r3, [r7, #20]
 8012326:	781b      	ldrb	r3, [r3, #0]
 8012328:	b2db      	uxtb	r3, r3
 801232a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801232c:	78fb      	ldrb	r3, [r7, #3]
 801232e:	b2db      	uxtb	r3, r3
 8012330:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8012334:	b2da      	uxtb	r2, r3
 8012336:	4b30      	ldr	r3, [pc, #192]	; (80123f8 <xPortStartScheduler+0x128>)
 8012338:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801233a:	4b30      	ldr	r3, [pc, #192]	; (80123fc <xPortStartScheduler+0x12c>)
 801233c:	2207      	movs	r2, #7
 801233e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012340:	e009      	b.n	8012356 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8012342:	4b2e      	ldr	r3, [pc, #184]	; (80123fc <xPortStartScheduler+0x12c>)
 8012344:	681b      	ldr	r3, [r3, #0]
 8012346:	3b01      	subs	r3, #1
 8012348:	4a2c      	ldr	r2, [pc, #176]	; (80123fc <xPortStartScheduler+0x12c>)
 801234a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801234c:	78fb      	ldrb	r3, [r7, #3]
 801234e:	b2db      	uxtb	r3, r3
 8012350:	005b      	lsls	r3, r3, #1
 8012352:	b2db      	uxtb	r3, r3
 8012354:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012356:	78fb      	ldrb	r3, [r7, #3]
 8012358:	b2db      	uxtb	r3, r3
 801235a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801235e:	2b80      	cmp	r3, #128	; 0x80
 8012360:	d0ef      	beq.n	8012342 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012362:	4b26      	ldr	r3, [pc, #152]	; (80123fc <xPortStartScheduler+0x12c>)
 8012364:	681b      	ldr	r3, [r3, #0]
 8012366:	f1c3 0307 	rsb	r3, r3, #7
 801236a:	2b04      	cmp	r3, #4
 801236c:	d009      	beq.n	8012382 <xPortStartScheduler+0xb2>
 801236e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012372:	f383 8811 	msr	BASEPRI, r3
 8012376:	f3bf 8f6f 	isb	sy
 801237a:	f3bf 8f4f 	dsb	sy
 801237e:	60bb      	str	r3, [r7, #8]
 8012380:	e7fe      	b.n	8012380 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012382:	4b1e      	ldr	r3, [pc, #120]	; (80123fc <xPortStartScheduler+0x12c>)
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	021b      	lsls	r3, r3, #8
 8012388:	4a1c      	ldr	r2, [pc, #112]	; (80123fc <xPortStartScheduler+0x12c>)
 801238a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801238c:	4b1b      	ldr	r3, [pc, #108]	; (80123fc <xPortStartScheduler+0x12c>)
 801238e:	681b      	ldr	r3, [r3, #0]
 8012390:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8012394:	4a19      	ldr	r2, [pc, #100]	; (80123fc <xPortStartScheduler+0x12c>)
 8012396:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	b2da      	uxtb	r2, r3
 801239c:	697b      	ldr	r3, [r7, #20]
 801239e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80123a0:	4b17      	ldr	r3, [pc, #92]	; (8012400 <xPortStartScheduler+0x130>)
 80123a2:	681b      	ldr	r3, [r3, #0]
 80123a4:	4a16      	ldr	r2, [pc, #88]	; (8012400 <xPortStartScheduler+0x130>)
 80123a6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80123aa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80123ac:	4b14      	ldr	r3, [pc, #80]	; (8012400 <xPortStartScheduler+0x130>)
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	4a13      	ldr	r2, [pc, #76]	; (8012400 <xPortStartScheduler+0x130>)
 80123b2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80123b6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80123b8:	f000 f8d6 	bl	8012568 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80123bc:	4b11      	ldr	r3, [pc, #68]	; (8012404 <xPortStartScheduler+0x134>)
 80123be:	2200      	movs	r2, #0
 80123c0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80123c2:	f000 f8f5 	bl	80125b0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80123c6:	4b10      	ldr	r3, [pc, #64]	; (8012408 <xPortStartScheduler+0x138>)
 80123c8:	681b      	ldr	r3, [r3, #0]
 80123ca:	4a0f      	ldr	r2, [pc, #60]	; (8012408 <xPortStartScheduler+0x138>)
 80123cc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80123d0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80123d2:	f7ff ff69 	bl	80122a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80123d6:	f7ff f8b5 	bl	8011544 <vTaskSwitchContext>
	prvTaskExitError();
 80123da:	f7ff ff21 	bl	8012220 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80123de:	2300      	movs	r3, #0
}
 80123e0:	4618      	mov	r0, r3
 80123e2:	3718      	adds	r7, #24
 80123e4:	46bd      	mov	sp, r7
 80123e6:	bd80      	pop	{r7, pc}
 80123e8:	e000ed00 	.word	0xe000ed00
 80123ec:	410fc271 	.word	0x410fc271
 80123f0:	410fc270 	.word	0x410fc270
 80123f4:	e000e400 	.word	0xe000e400
 80123f8:	200015b4 	.word	0x200015b4
 80123fc:	200015b8 	.word	0x200015b8
 8012400:	e000ed20 	.word	0xe000ed20
 8012404:	20000dd0 	.word	0x20000dd0
 8012408:	e000ef34 	.word	0xe000ef34

0801240c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801240c:	b480      	push	{r7}
 801240e:	b083      	sub	sp, #12
 8012410:	af00      	add	r7, sp, #0
 8012412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012416:	f383 8811 	msr	BASEPRI, r3
 801241a:	f3bf 8f6f 	isb	sy
 801241e:	f3bf 8f4f 	dsb	sy
 8012422:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8012424:	4b0e      	ldr	r3, [pc, #56]	; (8012460 <vPortEnterCritical+0x54>)
 8012426:	681b      	ldr	r3, [r3, #0]
 8012428:	3301      	adds	r3, #1
 801242a:	4a0d      	ldr	r2, [pc, #52]	; (8012460 <vPortEnterCritical+0x54>)
 801242c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801242e:	4b0c      	ldr	r3, [pc, #48]	; (8012460 <vPortEnterCritical+0x54>)
 8012430:	681b      	ldr	r3, [r3, #0]
 8012432:	2b01      	cmp	r3, #1
 8012434:	d10e      	bne.n	8012454 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012436:	4b0b      	ldr	r3, [pc, #44]	; (8012464 <vPortEnterCritical+0x58>)
 8012438:	681b      	ldr	r3, [r3, #0]
 801243a:	b2db      	uxtb	r3, r3
 801243c:	2b00      	cmp	r3, #0
 801243e:	d009      	beq.n	8012454 <vPortEnterCritical+0x48>
 8012440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012444:	f383 8811 	msr	BASEPRI, r3
 8012448:	f3bf 8f6f 	isb	sy
 801244c:	f3bf 8f4f 	dsb	sy
 8012450:	603b      	str	r3, [r7, #0]
 8012452:	e7fe      	b.n	8012452 <vPortEnterCritical+0x46>
	}
}
 8012454:	bf00      	nop
 8012456:	370c      	adds	r7, #12
 8012458:	46bd      	mov	sp, r7
 801245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801245e:	4770      	bx	lr
 8012460:	20000dd0 	.word	0x20000dd0
 8012464:	e000ed04 	.word	0xe000ed04

08012468 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012468:	b480      	push	{r7}
 801246a:	b083      	sub	sp, #12
 801246c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801246e:	4b11      	ldr	r3, [pc, #68]	; (80124b4 <vPortExitCritical+0x4c>)
 8012470:	681b      	ldr	r3, [r3, #0]
 8012472:	2b00      	cmp	r3, #0
 8012474:	d109      	bne.n	801248a <vPortExitCritical+0x22>
 8012476:	f04f 0350 	mov.w	r3, #80	; 0x50
 801247a:	f383 8811 	msr	BASEPRI, r3
 801247e:	f3bf 8f6f 	isb	sy
 8012482:	f3bf 8f4f 	dsb	sy
 8012486:	607b      	str	r3, [r7, #4]
 8012488:	e7fe      	b.n	8012488 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 801248a:	4b0a      	ldr	r3, [pc, #40]	; (80124b4 <vPortExitCritical+0x4c>)
 801248c:	681b      	ldr	r3, [r3, #0]
 801248e:	3b01      	subs	r3, #1
 8012490:	4a08      	ldr	r2, [pc, #32]	; (80124b4 <vPortExitCritical+0x4c>)
 8012492:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012494:	4b07      	ldr	r3, [pc, #28]	; (80124b4 <vPortExitCritical+0x4c>)
 8012496:	681b      	ldr	r3, [r3, #0]
 8012498:	2b00      	cmp	r3, #0
 801249a:	d104      	bne.n	80124a6 <vPortExitCritical+0x3e>
 801249c:	2300      	movs	r3, #0
 801249e:	603b      	str	r3, [r7, #0]
	__asm volatile
 80124a0:	683b      	ldr	r3, [r7, #0]
 80124a2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80124a6:	bf00      	nop
 80124a8:	370c      	adds	r7, #12
 80124aa:	46bd      	mov	sp, r7
 80124ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124b0:	4770      	bx	lr
 80124b2:	bf00      	nop
 80124b4:	20000dd0 	.word	0x20000dd0
	...

080124c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80124c0:	f3ef 8009 	mrs	r0, PSP
 80124c4:	f3bf 8f6f 	isb	sy
 80124c8:	4b15      	ldr	r3, [pc, #84]	; (8012520 <pxCurrentTCBConst>)
 80124ca:	681a      	ldr	r2, [r3, #0]
 80124cc:	f01e 0f10 	tst.w	lr, #16
 80124d0:	bf08      	it	eq
 80124d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80124d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124da:	6010      	str	r0, [r2, #0]
 80124dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80124e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80124e4:	f380 8811 	msr	BASEPRI, r0
 80124e8:	f3bf 8f4f 	dsb	sy
 80124ec:	f3bf 8f6f 	isb	sy
 80124f0:	f7ff f828 	bl	8011544 <vTaskSwitchContext>
 80124f4:	f04f 0000 	mov.w	r0, #0
 80124f8:	f380 8811 	msr	BASEPRI, r0
 80124fc:	bc09      	pop	{r0, r3}
 80124fe:	6819      	ldr	r1, [r3, #0]
 8012500:	6808      	ldr	r0, [r1, #0]
 8012502:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012506:	f01e 0f10 	tst.w	lr, #16
 801250a:	bf08      	it	eq
 801250c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012510:	f380 8809 	msr	PSP, r0
 8012514:	f3bf 8f6f 	isb	sy
 8012518:	4770      	bx	lr
 801251a:	bf00      	nop
 801251c:	f3af 8000 	nop.w

08012520 <pxCurrentTCBConst>:
 8012520:	20001488 	.word	0x20001488
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012524:	bf00      	nop
 8012526:	bf00      	nop

08012528 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012528:	b580      	push	{r7, lr}
 801252a:	b082      	sub	sp, #8
 801252c:	af00      	add	r7, sp, #0
	__asm volatile
 801252e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012532:	f383 8811 	msr	BASEPRI, r3
 8012536:	f3bf 8f6f 	isb	sy
 801253a:	f3bf 8f4f 	dsb	sy
 801253e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012540:	f7fe ff44 	bl	80113cc <xTaskIncrementTick>
 8012544:	4603      	mov	r3, r0
 8012546:	2b00      	cmp	r3, #0
 8012548:	d003      	beq.n	8012552 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801254a:	4b06      	ldr	r3, [pc, #24]	; (8012564 <SysTick_Handler+0x3c>)
 801254c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012550:	601a      	str	r2, [r3, #0]
 8012552:	2300      	movs	r3, #0
 8012554:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012556:	683b      	ldr	r3, [r7, #0]
 8012558:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 801255c:	bf00      	nop
 801255e:	3708      	adds	r7, #8
 8012560:	46bd      	mov	sp, r7
 8012562:	bd80      	pop	{r7, pc}
 8012564:	e000ed04 	.word	0xe000ed04

08012568 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8012568:	b480      	push	{r7}
 801256a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801256c:	4b0b      	ldr	r3, [pc, #44]	; (801259c <vPortSetupTimerInterrupt+0x34>)
 801256e:	2200      	movs	r2, #0
 8012570:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012572:	4b0b      	ldr	r3, [pc, #44]	; (80125a0 <vPortSetupTimerInterrupt+0x38>)
 8012574:	2200      	movs	r2, #0
 8012576:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012578:	4b0a      	ldr	r3, [pc, #40]	; (80125a4 <vPortSetupTimerInterrupt+0x3c>)
 801257a:	681b      	ldr	r3, [r3, #0]
 801257c:	4a0a      	ldr	r2, [pc, #40]	; (80125a8 <vPortSetupTimerInterrupt+0x40>)
 801257e:	fba2 2303 	umull	r2, r3, r2, r3
 8012582:	099b      	lsrs	r3, r3, #6
 8012584:	4a09      	ldr	r2, [pc, #36]	; (80125ac <vPortSetupTimerInterrupt+0x44>)
 8012586:	3b01      	subs	r3, #1
 8012588:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801258a:	4b04      	ldr	r3, [pc, #16]	; (801259c <vPortSetupTimerInterrupt+0x34>)
 801258c:	2207      	movs	r2, #7
 801258e:	601a      	str	r2, [r3, #0]
}
 8012590:	bf00      	nop
 8012592:	46bd      	mov	sp, r7
 8012594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012598:	4770      	bx	lr
 801259a:	bf00      	nop
 801259c:	e000e010 	.word	0xe000e010
 80125a0:	e000e018 	.word	0xe000e018
 80125a4:	20000cb4 	.word	0x20000cb4
 80125a8:	10624dd3 	.word	0x10624dd3
 80125ac:	e000e014 	.word	0xe000e014

080125b0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80125b0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80125c0 <vPortEnableVFP+0x10>
 80125b4:	6801      	ldr	r1, [r0, #0]
 80125b6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80125ba:	6001      	str	r1, [r0, #0]
 80125bc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80125be:	bf00      	nop
 80125c0:	e000ed88 	.word	0xe000ed88

080125c4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80125c4:	b480      	push	{r7}
 80125c6:	b085      	sub	sp, #20
 80125c8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80125ca:	f3ef 8305 	mrs	r3, IPSR
 80125ce:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80125d0:	68fb      	ldr	r3, [r7, #12]
 80125d2:	2b0f      	cmp	r3, #15
 80125d4:	d913      	bls.n	80125fe <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80125d6:	4a16      	ldr	r2, [pc, #88]	; (8012630 <vPortValidateInterruptPriority+0x6c>)
 80125d8:	68fb      	ldr	r3, [r7, #12]
 80125da:	4413      	add	r3, r2
 80125dc:	781b      	ldrb	r3, [r3, #0]
 80125de:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80125e0:	4b14      	ldr	r3, [pc, #80]	; (8012634 <vPortValidateInterruptPriority+0x70>)
 80125e2:	781b      	ldrb	r3, [r3, #0]
 80125e4:	7afa      	ldrb	r2, [r7, #11]
 80125e6:	429a      	cmp	r2, r3
 80125e8:	d209      	bcs.n	80125fe <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80125ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125ee:	f383 8811 	msr	BASEPRI, r3
 80125f2:	f3bf 8f6f 	isb	sy
 80125f6:	f3bf 8f4f 	dsb	sy
 80125fa:	607b      	str	r3, [r7, #4]
 80125fc:	e7fe      	b.n	80125fc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80125fe:	4b0e      	ldr	r3, [pc, #56]	; (8012638 <vPortValidateInterruptPriority+0x74>)
 8012600:	681b      	ldr	r3, [r3, #0]
 8012602:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8012606:	4b0d      	ldr	r3, [pc, #52]	; (801263c <vPortValidateInterruptPriority+0x78>)
 8012608:	681b      	ldr	r3, [r3, #0]
 801260a:	429a      	cmp	r2, r3
 801260c:	d909      	bls.n	8012622 <vPortValidateInterruptPriority+0x5e>
 801260e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012612:	f383 8811 	msr	BASEPRI, r3
 8012616:	f3bf 8f6f 	isb	sy
 801261a:	f3bf 8f4f 	dsb	sy
 801261e:	603b      	str	r3, [r7, #0]
 8012620:	e7fe      	b.n	8012620 <vPortValidateInterruptPriority+0x5c>
	}
 8012622:	bf00      	nop
 8012624:	3714      	adds	r7, #20
 8012626:	46bd      	mov	sp, r7
 8012628:	f85d 7b04 	ldr.w	r7, [sp], #4
 801262c:	4770      	bx	lr
 801262e:	bf00      	nop
 8012630:	e000e3f0 	.word	0xe000e3f0
 8012634:	200015b4 	.word	0x200015b4
 8012638:	e000ed0c 	.word	0xe000ed0c
 801263c:	200015b8 	.word	0x200015b8

08012640 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012640:	b580      	push	{r7, lr}
 8012642:	b08a      	sub	sp, #40	; 0x28
 8012644:	af00      	add	r7, sp, #0
 8012646:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012648:	2300      	movs	r3, #0
 801264a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801264c:	f7fe fe14 	bl	8011278 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012650:	4b57      	ldr	r3, [pc, #348]	; (80127b0 <pvPortMalloc+0x170>)
 8012652:	681b      	ldr	r3, [r3, #0]
 8012654:	2b00      	cmp	r3, #0
 8012656:	d101      	bne.n	801265c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012658:	f000 f90c 	bl	8012874 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801265c:	4b55      	ldr	r3, [pc, #340]	; (80127b4 <pvPortMalloc+0x174>)
 801265e:	681a      	ldr	r2, [r3, #0]
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	4013      	ands	r3, r2
 8012664:	2b00      	cmp	r3, #0
 8012666:	f040 808c 	bne.w	8012782 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	2b00      	cmp	r3, #0
 801266e:	d01c      	beq.n	80126aa <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8012670:	2208      	movs	r2, #8
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	4413      	add	r3, r2
 8012676:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	f003 0307 	and.w	r3, r3, #7
 801267e:	2b00      	cmp	r3, #0
 8012680:	d013      	beq.n	80126aa <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	f023 0307 	bic.w	r3, r3, #7
 8012688:	3308      	adds	r3, #8
 801268a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	f003 0307 	and.w	r3, r3, #7
 8012692:	2b00      	cmp	r3, #0
 8012694:	d009      	beq.n	80126aa <pvPortMalloc+0x6a>
 8012696:	f04f 0350 	mov.w	r3, #80	; 0x50
 801269a:	f383 8811 	msr	BASEPRI, r3
 801269e:	f3bf 8f6f 	isb	sy
 80126a2:	f3bf 8f4f 	dsb	sy
 80126a6:	617b      	str	r3, [r7, #20]
 80126a8:	e7fe      	b.n	80126a8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d068      	beq.n	8012782 <pvPortMalloc+0x142>
 80126b0:	4b41      	ldr	r3, [pc, #260]	; (80127b8 <pvPortMalloc+0x178>)
 80126b2:	681b      	ldr	r3, [r3, #0]
 80126b4:	687a      	ldr	r2, [r7, #4]
 80126b6:	429a      	cmp	r2, r3
 80126b8:	d863      	bhi.n	8012782 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80126ba:	4b40      	ldr	r3, [pc, #256]	; (80127bc <pvPortMalloc+0x17c>)
 80126bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80126be:	4b3f      	ldr	r3, [pc, #252]	; (80127bc <pvPortMalloc+0x17c>)
 80126c0:	681b      	ldr	r3, [r3, #0]
 80126c2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80126c4:	e004      	b.n	80126d0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80126c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80126ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126cc:	681b      	ldr	r3, [r3, #0]
 80126ce:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80126d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126d2:	685b      	ldr	r3, [r3, #4]
 80126d4:	687a      	ldr	r2, [r7, #4]
 80126d6:	429a      	cmp	r2, r3
 80126d8:	d903      	bls.n	80126e2 <pvPortMalloc+0xa2>
 80126da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126dc:	681b      	ldr	r3, [r3, #0]
 80126de:	2b00      	cmp	r3, #0
 80126e0:	d1f1      	bne.n	80126c6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80126e2:	4b33      	ldr	r3, [pc, #204]	; (80127b0 <pvPortMalloc+0x170>)
 80126e4:	681b      	ldr	r3, [r3, #0]
 80126e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80126e8:	429a      	cmp	r2, r3
 80126ea:	d04a      	beq.n	8012782 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80126ec:	6a3b      	ldr	r3, [r7, #32]
 80126ee:	681b      	ldr	r3, [r3, #0]
 80126f0:	2208      	movs	r2, #8
 80126f2:	4413      	add	r3, r2
 80126f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80126f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126f8:	681a      	ldr	r2, [r3, #0]
 80126fa:	6a3b      	ldr	r3, [r7, #32]
 80126fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80126fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012700:	685a      	ldr	r2, [r3, #4]
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	1ad2      	subs	r2, r2, r3
 8012706:	2308      	movs	r3, #8
 8012708:	005b      	lsls	r3, r3, #1
 801270a:	429a      	cmp	r2, r3
 801270c:	d91e      	bls.n	801274c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801270e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	4413      	add	r3, r2
 8012714:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012716:	69bb      	ldr	r3, [r7, #24]
 8012718:	f003 0307 	and.w	r3, r3, #7
 801271c:	2b00      	cmp	r3, #0
 801271e:	d009      	beq.n	8012734 <pvPortMalloc+0xf4>
 8012720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012724:	f383 8811 	msr	BASEPRI, r3
 8012728:	f3bf 8f6f 	isb	sy
 801272c:	f3bf 8f4f 	dsb	sy
 8012730:	613b      	str	r3, [r7, #16]
 8012732:	e7fe      	b.n	8012732 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012736:	685a      	ldr	r2, [r3, #4]
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	1ad2      	subs	r2, r2, r3
 801273c:	69bb      	ldr	r3, [r7, #24]
 801273e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012742:	687a      	ldr	r2, [r7, #4]
 8012744:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8012746:	69b8      	ldr	r0, [r7, #24]
 8012748:	f000 f8f6 	bl	8012938 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801274c:	4b1a      	ldr	r3, [pc, #104]	; (80127b8 <pvPortMalloc+0x178>)
 801274e:	681a      	ldr	r2, [r3, #0]
 8012750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012752:	685b      	ldr	r3, [r3, #4]
 8012754:	1ad3      	subs	r3, r2, r3
 8012756:	4a18      	ldr	r2, [pc, #96]	; (80127b8 <pvPortMalloc+0x178>)
 8012758:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801275a:	4b17      	ldr	r3, [pc, #92]	; (80127b8 <pvPortMalloc+0x178>)
 801275c:	681a      	ldr	r2, [r3, #0]
 801275e:	4b18      	ldr	r3, [pc, #96]	; (80127c0 <pvPortMalloc+0x180>)
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	429a      	cmp	r2, r3
 8012764:	d203      	bcs.n	801276e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012766:	4b14      	ldr	r3, [pc, #80]	; (80127b8 <pvPortMalloc+0x178>)
 8012768:	681b      	ldr	r3, [r3, #0]
 801276a:	4a15      	ldr	r2, [pc, #84]	; (80127c0 <pvPortMalloc+0x180>)
 801276c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801276e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012770:	685a      	ldr	r2, [r3, #4]
 8012772:	4b10      	ldr	r3, [pc, #64]	; (80127b4 <pvPortMalloc+0x174>)
 8012774:	681b      	ldr	r3, [r3, #0]
 8012776:	431a      	orrs	r2, r3
 8012778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801277a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801277c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801277e:	2200      	movs	r2, #0
 8012780:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012782:	f7fe fd87 	bl	8011294 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012786:	69fb      	ldr	r3, [r7, #28]
 8012788:	f003 0307 	and.w	r3, r3, #7
 801278c:	2b00      	cmp	r3, #0
 801278e:	d009      	beq.n	80127a4 <pvPortMalloc+0x164>
 8012790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012794:	f383 8811 	msr	BASEPRI, r3
 8012798:	f3bf 8f6f 	isb	sy
 801279c:	f3bf 8f4f 	dsb	sy
 80127a0:	60fb      	str	r3, [r7, #12]
 80127a2:	e7fe      	b.n	80127a2 <pvPortMalloc+0x162>
	return pvReturn;
 80127a4:	69fb      	ldr	r3, [r7, #28]
}
 80127a6:	4618      	mov	r0, r3
 80127a8:	3728      	adds	r7, #40	; 0x28
 80127aa:	46bd      	mov	sp, r7
 80127ac:	bd80      	pop	{r7, pc}
 80127ae:	bf00      	nop
 80127b0:	200051c4 	.word	0x200051c4
 80127b4:	200051d0 	.word	0x200051d0
 80127b8:	200051c8 	.word	0x200051c8
 80127bc:	200051bc 	.word	0x200051bc
 80127c0:	200051cc 	.word	0x200051cc

080127c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80127c4:	b580      	push	{r7, lr}
 80127c6:	b086      	sub	sp, #24
 80127c8:	af00      	add	r7, sp, #0
 80127ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d046      	beq.n	8012864 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80127d6:	2308      	movs	r3, #8
 80127d8:	425b      	negs	r3, r3
 80127da:	697a      	ldr	r2, [r7, #20]
 80127dc:	4413      	add	r3, r2
 80127de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80127e0:	697b      	ldr	r3, [r7, #20]
 80127e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80127e4:	693b      	ldr	r3, [r7, #16]
 80127e6:	685a      	ldr	r2, [r3, #4]
 80127e8:	4b20      	ldr	r3, [pc, #128]	; (801286c <vPortFree+0xa8>)
 80127ea:	681b      	ldr	r3, [r3, #0]
 80127ec:	4013      	ands	r3, r2
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d109      	bne.n	8012806 <vPortFree+0x42>
 80127f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127f6:	f383 8811 	msr	BASEPRI, r3
 80127fa:	f3bf 8f6f 	isb	sy
 80127fe:	f3bf 8f4f 	dsb	sy
 8012802:	60fb      	str	r3, [r7, #12]
 8012804:	e7fe      	b.n	8012804 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012806:	693b      	ldr	r3, [r7, #16]
 8012808:	681b      	ldr	r3, [r3, #0]
 801280a:	2b00      	cmp	r3, #0
 801280c:	d009      	beq.n	8012822 <vPortFree+0x5e>
 801280e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012812:	f383 8811 	msr	BASEPRI, r3
 8012816:	f3bf 8f6f 	isb	sy
 801281a:	f3bf 8f4f 	dsb	sy
 801281e:	60bb      	str	r3, [r7, #8]
 8012820:	e7fe      	b.n	8012820 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012822:	693b      	ldr	r3, [r7, #16]
 8012824:	685a      	ldr	r2, [r3, #4]
 8012826:	4b11      	ldr	r3, [pc, #68]	; (801286c <vPortFree+0xa8>)
 8012828:	681b      	ldr	r3, [r3, #0]
 801282a:	4013      	ands	r3, r2
 801282c:	2b00      	cmp	r3, #0
 801282e:	d019      	beq.n	8012864 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012830:	693b      	ldr	r3, [r7, #16]
 8012832:	681b      	ldr	r3, [r3, #0]
 8012834:	2b00      	cmp	r3, #0
 8012836:	d115      	bne.n	8012864 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012838:	693b      	ldr	r3, [r7, #16]
 801283a:	685a      	ldr	r2, [r3, #4]
 801283c:	4b0b      	ldr	r3, [pc, #44]	; (801286c <vPortFree+0xa8>)
 801283e:	681b      	ldr	r3, [r3, #0]
 8012840:	43db      	mvns	r3, r3
 8012842:	401a      	ands	r2, r3
 8012844:	693b      	ldr	r3, [r7, #16]
 8012846:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012848:	f7fe fd16 	bl	8011278 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801284c:	693b      	ldr	r3, [r7, #16]
 801284e:	685a      	ldr	r2, [r3, #4]
 8012850:	4b07      	ldr	r3, [pc, #28]	; (8012870 <vPortFree+0xac>)
 8012852:	681b      	ldr	r3, [r3, #0]
 8012854:	4413      	add	r3, r2
 8012856:	4a06      	ldr	r2, [pc, #24]	; (8012870 <vPortFree+0xac>)
 8012858:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801285a:	6938      	ldr	r0, [r7, #16]
 801285c:	f000 f86c 	bl	8012938 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8012860:	f7fe fd18 	bl	8011294 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8012864:	bf00      	nop
 8012866:	3718      	adds	r7, #24
 8012868:	46bd      	mov	sp, r7
 801286a:	bd80      	pop	{r7, pc}
 801286c:	200051d0 	.word	0x200051d0
 8012870:	200051c8 	.word	0x200051c8

08012874 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012874:	b480      	push	{r7}
 8012876:	b085      	sub	sp, #20
 8012878:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801287a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801287e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8012880:	4b27      	ldr	r3, [pc, #156]	; (8012920 <prvHeapInit+0xac>)
 8012882:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012884:	68fb      	ldr	r3, [r7, #12]
 8012886:	f003 0307 	and.w	r3, r3, #7
 801288a:	2b00      	cmp	r3, #0
 801288c:	d00c      	beq.n	80128a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801288e:	68fb      	ldr	r3, [r7, #12]
 8012890:	3307      	adds	r3, #7
 8012892:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012894:	68fb      	ldr	r3, [r7, #12]
 8012896:	f023 0307 	bic.w	r3, r3, #7
 801289a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801289c:	68ba      	ldr	r2, [r7, #8]
 801289e:	68fb      	ldr	r3, [r7, #12]
 80128a0:	1ad3      	subs	r3, r2, r3
 80128a2:	4a1f      	ldr	r2, [pc, #124]	; (8012920 <prvHeapInit+0xac>)
 80128a4:	4413      	add	r3, r2
 80128a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80128a8:	68fb      	ldr	r3, [r7, #12]
 80128aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80128ac:	4a1d      	ldr	r2, [pc, #116]	; (8012924 <prvHeapInit+0xb0>)
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80128b2:	4b1c      	ldr	r3, [pc, #112]	; (8012924 <prvHeapInit+0xb0>)
 80128b4:	2200      	movs	r2, #0
 80128b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	68ba      	ldr	r2, [r7, #8]
 80128bc:	4413      	add	r3, r2
 80128be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80128c0:	2208      	movs	r2, #8
 80128c2:	68fb      	ldr	r3, [r7, #12]
 80128c4:	1a9b      	subs	r3, r3, r2
 80128c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80128c8:	68fb      	ldr	r3, [r7, #12]
 80128ca:	f023 0307 	bic.w	r3, r3, #7
 80128ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80128d0:	68fb      	ldr	r3, [r7, #12]
 80128d2:	4a15      	ldr	r2, [pc, #84]	; (8012928 <prvHeapInit+0xb4>)
 80128d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80128d6:	4b14      	ldr	r3, [pc, #80]	; (8012928 <prvHeapInit+0xb4>)
 80128d8:	681b      	ldr	r3, [r3, #0]
 80128da:	2200      	movs	r2, #0
 80128dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80128de:	4b12      	ldr	r3, [pc, #72]	; (8012928 <prvHeapInit+0xb4>)
 80128e0:	681b      	ldr	r3, [r3, #0]
 80128e2:	2200      	movs	r2, #0
 80128e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80128ea:	683b      	ldr	r3, [r7, #0]
 80128ec:	68fa      	ldr	r2, [r7, #12]
 80128ee:	1ad2      	subs	r2, r2, r3
 80128f0:	683b      	ldr	r3, [r7, #0]
 80128f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80128f4:	4b0c      	ldr	r3, [pc, #48]	; (8012928 <prvHeapInit+0xb4>)
 80128f6:	681a      	ldr	r2, [r3, #0]
 80128f8:	683b      	ldr	r3, [r7, #0]
 80128fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80128fc:	683b      	ldr	r3, [r7, #0]
 80128fe:	685b      	ldr	r3, [r3, #4]
 8012900:	4a0a      	ldr	r2, [pc, #40]	; (801292c <prvHeapInit+0xb8>)
 8012902:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012904:	683b      	ldr	r3, [r7, #0]
 8012906:	685b      	ldr	r3, [r3, #4]
 8012908:	4a09      	ldr	r2, [pc, #36]	; (8012930 <prvHeapInit+0xbc>)
 801290a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801290c:	4b09      	ldr	r3, [pc, #36]	; (8012934 <prvHeapInit+0xc0>)
 801290e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8012912:	601a      	str	r2, [r3, #0]
}
 8012914:	bf00      	nop
 8012916:	3714      	adds	r7, #20
 8012918:	46bd      	mov	sp, r7
 801291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801291e:	4770      	bx	lr
 8012920:	200015bc 	.word	0x200015bc
 8012924:	200051bc 	.word	0x200051bc
 8012928:	200051c4 	.word	0x200051c4
 801292c:	200051cc 	.word	0x200051cc
 8012930:	200051c8 	.word	0x200051c8
 8012934:	200051d0 	.word	0x200051d0

08012938 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012938:	b480      	push	{r7}
 801293a:	b085      	sub	sp, #20
 801293c:	af00      	add	r7, sp, #0
 801293e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012940:	4b28      	ldr	r3, [pc, #160]	; (80129e4 <prvInsertBlockIntoFreeList+0xac>)
 8012942:	60fb      	str	r3, [r7, #12]
 8012944:	e002      	b.n	801294c <prvInsertBlockIntoFreeList+0x14>
 8012946:	68fb      	ldr	r3, [r7, #12]
 8012948:	681b      	ldr	r3, [r3, #0]
 801294a:	60fb      	str	r3, [r7, #12]
 801294c:	68fb      	ldr	r3, [r7, #12]
 801294e:	681b      	ldr	r3, [r3, #0]
 8012950:	687a      	ldr	r2, [r7, #4]
 8012952:	429a      	cmp	r2, r3
 8012954:	d8f7      	bhi.n	8012946 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012956:	68fb      	ldr	r3, [r7, #12]
 8012958:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801295a:	68fb      	ldr	r3, [r7, #12]
 801295c:	685b      	ldr	r3, [r3, #4]
 801295e:	68ba      	ldr	r2, [r7, #8]
 8012960:	4413      	add	r3, r2
 8012962:	687a      	ldr	r2, [r7, #4]
 8012964:	429a      	cmp	r2, r3
 8012966:	d108      	bne.n	801297a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012968:	68fb      	ldr	r3, [r7, #12]
 801296a:	685a      	ldr	r2, [r3, #4]
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	685b      	ldr	r3, [r3, #4]
 8012970:	441a      	add	r2, r3
 8012972:	68fb      	ldr	r3, [r7, #12]
 8012974:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012976:	68fb      	ldr	r3, [r7, #12]
 8012978:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	685b      	ldr	r3, [r3, #4]
 8012982:	68ba      	ldr	r2, [r7, #8]
 8012984:	441a      	add	r2, r3
 8012986:	68fb      	ldr	r3, [r7, #12]
 8012988:	681b      	ldr	r3, [r3, #0]
 801298a:	429a      	cmp	r2, r3
 801298c:	d118      	bne.n	80129c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801298e:	68fb      	ldr	r3, [r7, #12]
 8012990:	681a      	ldr	r2, [r3, #0]
 8012992:	4b15      	ldr	r3, [pc, #84]	; (80129e8 <prvInsertBlockIntoFreeList+0xb0>)
 8012994:	681b      	ldr	r3, [r3, #0]
 8012996:	429a      	cmp	r2, r3
 8012998:	d00d      	beq.n	80129b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	685a      	ldr	r2, [r3, #4]
 801299e:	68fb      	ldr	r3, [r7, #12]
 80129a0:	681b      	ldr	r3, [r3, #0]
 80129a2:	685b      	ldr	r3, [r3, #4]
 80129a4:	441a      	add	r2, r3
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80129aa:	68fb      	ldr	r3, [r7, #12]
 80129ac:	681b      	ldr	r3, [r3, #0]
 80129ae:	681a      	ldr	r2, [r3, #0]
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	601a      	str	r2, [r3, #0]
 80129b4:	e008      	b.n	80129c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80129b6:	4b0c      	ldr	r3, [pc, #48]	; (80129e8 <prvInsertBlockIntoFreeList+0xb0>)
 80129b8:	681a      	ldr	r2, [r3, #0]
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	601a      	str	r2, [r3, #0]
 80129be:	e003      	b.n	80129c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80129c0:	68fb      	ldr	r3, [r7, #12]
 80129c2:	681a      	ldr	r2, [r3, #0]
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80129c8:	68fa      	ldr	r2, [r7, #12]
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	429a      	cmp	r2, r3
 80129ce:	d002      	beq.n	80129d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80129d0:	68fb      	ldr	r3, [r7, #12]
 80129d2:	687a      	ldr	r2, [r7, #4]
 80129d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80129d6:	bf00      	nop
 80129d8:	3714      	adds	r7, #20
 80129da:	46bd      	mov	sp, r7
 80129dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129e0:	4770      	bx	lr
 80129e2:	bf00      	nop
 80129e4:	200051bc 	.word	0x200051bc
 80129e8:	200051c4 	.word	0x200051c4

080129ec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80129ec:	b580      	push	{r7, lr}
 80129ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80129f0:	2200      	movs	r2, #0
 80129f2:	4912      	ldr	r1, [pc, #72]	; (8012a3c <MX_USB_DEVICE_Init+0x50>)
 80129f4:	4812      	ldr	r0, [pc, #72]	; (8012a40 <MX_USB_DEVICE_Init+0x54>)
 80129f6:	f7fb fe03 	bl	800e600 <USBD_Init>
 80129fa:	4603      	mov	r3, r0
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	d001      	beq.n	8012a04 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8012a00:	f7f0 fd36 	bl	8003470 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8012a04:	490f      	ldr	r1, [pc, #60]	; (8012a44 <MX_USB_DEVICE_Init+0x58>)
 8012a06:	480e      	ldr	r0, [pc, #56]	; (8012a40 <MX_USB_DEVICE_Init+0x54>)
 8012a08:	f7fb fe25 	bl	800e656 <USBD_RegisterClass>
 8012a0c:	4603      	mov	r3, r0
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	d001      	beq.n	8012a16 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8012a12:	f7f0 fd2d 	bl	8003470 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8012a16:	490c      	ldr	r1, [pc, #48]	; (8012a48 <MX_USB_DEVICE_Init+0x5c>)
 8012a18:	4809      	ldr	r0, [pc, #36]	; (8012a40 <MX_USB_DEVICE_Init+0x54>)
 8012a1a:	f7fb fd53 	bl	800e4c4 <USBD_CDC_RegisterInterface>
 8012a1e:	4603      	mov	r3, r0
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	d001      	beq.n	8012a28 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8012a24:	f7f0 fd24 	bl	8003470 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8012a28:	4805      	ldr	r0, [pc, #20]	; (8012a40 <MX_USB_DEVICE_Init+0x54>)
 8012a2a:	f7fb fe2e 	bl	800e68a <USBD_Start>
 8012a2e:	4603      	mov	r3, r0
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d001      	beq.n	8012a38 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8012a34:	f7f0 fd1c 	bl	8003470 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8012a38:	bf00      	nop
 8012a3a:	bd80      	pop	{r7, pc}
 8012a3c:	20000de4 	.word	0x20000de4
 8012a40:	20005f34 	.word	0x20005f34
 8012a44:	20000ccc 	.word	0x20000ccc
 8012a48:	20000dd4 	.word	0x20000dd4

08012a4c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8012a4c:	b580      	push	{r7, lr}
 8012a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8012a50:	2200      	movs	r2, #0
 8012a52:	4905      	ldr	r1, [pc, #20]	; (8012a68 <CDC_Init_FS+0x1c>)
 8012a54:	4805      	ldr	r0, [pc, #20]	; (8012a6c <CDC_Init_FS+0x20>)
 8012a56:	f7fb fd4c 	bl	800e4f2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8012a5a:	4905      	ldr	r1, [pc, #20]	; (8012a70 <CDC_Init_FS+0x24>)
 8012a5c:	4803      	ldr	r0, [pc, #12]	; (8012a6c <CDC_Init_FS+0x20>)
 8012a5e:	f7fb fd62 	bl	800e526 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8012a62:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8012a64:	4618      	mov	r0, r3
 8012a66:	bd80      	pop	{r7, pc}
 8012a68:	200063d0 	.word	0x200063d0
 8012a6c:	20005f34 	.word	0x20005f34
 8012a70:	200061d0 	.word	0x200061d0

08012a74 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8012a74:	b480      	push	{r7}
 8012a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8012a78:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8012a7a:	4618      	mov	r0, r3
 8012a7c:	46bd      	mov	sp, r7
 8012a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a82:	4770      	bx	lr

08012a84 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8012a84:	b480      	push	{r7}
 8012a86:	b083      	sub	sp, #12
 8012a88:	af00      	add	r7, sp, #0
 8012a8a:	4603      	mov	r3, r0
 8012a8c:	6039      	str	r1, [r7, #0]
 8012a8e:	71fb      	strb	r3, [r7, #7]
 8012a90:	4613      	mov	r3, r2
 8012a92:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8012a94:	79fb      	ldrb	r3, [r7, #7]
 8012a96:	2b23      	cmp	r3, #35	; 0x23
 8012a98:	f200 808c 	bhi.w	8012bb4 <CDC_Control_FS+0x130>
 8012a9c:	a201      	add	r2, pc, #4	; (adr r2, 8012aa4 <CDC_Control_FS+0x20>)
 8012a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012aa2:	bf00      	nop
 8012aa4:	08012bb5 	.word	0x08012bb5
 8012aa8:	08012bb5 	.word	0x08012bb5
 8012aac:	08012bb5 	.word	0x08012bb5
 8012ab0:	08012bb5 	.word	0x08012bb5
 8012ab4:	08012bb5 	.word	0x08012bb5
 8012ab8:	08012bb5 	.word	0x08012bb5
 8012abc:	08012bb5 	.word	0x08012bb5
 8012ac0:	08012bb5 	.word	0x08012bb5
 8012ac4:	08012bb5 	.word	0x08012bb5
 8012ac8:	08012bb5 	.word	0x08012bb5
 8012acc:	08012bb5 	.word	0x08012bb5
 8012ad0:	08012bb5 	.word	0x08012bb5
 8012ad4:	08012bb5 	.word	0x08012bb5
 8012ad8:	08012bb5 	.word	0x08012bb5
 8012adc:	08012bb5 	.word	0x08012bb5
 8012ae0:	08012bb5 	.word	0x08012bb5
 8012ae4:	08012bb5 	.word	0x08012bb5
 8012ae8:	08012bb5 	.word	0x08012bb5
 8012aec:	08012bb5 	.word	0x08012bb5
 8012af0:	08012bb5 	.word	0x08012bb5
 8012af4:	08012bb5 	.word	0x08012bb5
 8012af8:	08012bb5 	.word	0x08012bb5
 8012afc:	08012bb5 	.word	0x08012bb5
 8012b00:	08012bb5 	.word	0x08012bb5
 8012b04:	08012bb5 	.word	0x08012bb5
 8012b08:	08012bb5 	.word	0x08012bb5
 8012b0c:	08012bb5 	.word	0x08012bb5
 8012b10:	08012bb5 	.word	0x08012bb5
 8012b14:	08012bb5 	.word	0x08012bb5
 8012b18:	08012bb5 	.word	0x08012bb5
 8012b1c:	08012bb5 	.word	0x08012bb5
 8012b20:	08012bb5 	.word	0x08012bb5
 8012b24:	08012b35 	.word	0x08012b35
 8012b28:	08012b6f 	.word	0x08012b6f
 8012b2c:	08012bb5 	.word	0x08012bb5
 8012b30:	08012bb5 	.word	0x08012bb5
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	TempBuf_USB[0]=pbuf[0];
 8012b34:	683b      	ldr	r3, [r7, #0]
 8012b36:	781a      	ldrb	r2, [r3, #0]
 8012b38:	4b22      	ldr	r3, [pc, #136]	; (8012bc4 <CDC_Control_FS+0x140>)
 8012b3a:	701a      	strb	r2, [r3, #0]
    	TempBuf_USB[1]=pbuf[1];
 8012b3c:	683b      	ldr	r3, [r7, #0]
 8012b3e:	785a      	ldrb	r2, [r3, #1]
 8012b40:	4b20      	ldr	r3, [pc, #128]	; (8012bc4 <CDC_Control_FS+0x140>)
 8012b42:	705a      	strb	r2, [r3, #1]
    	TempBuf_USB[2]=pbuf[2];
 8012b44:	683b      	ldr	r3, [r7, #0]
 8012b46:	789a      	ldrb	r2, [r3, #2]
 8012b48:	4b1e      	ldr	r3, [pc, #120]	; (8012bc4 <CDC_Control_FS+0x140>)
 8012b4a:	709a      	strb	r2, [r3, #2]
    	TempBuf_USB[3]=pbuf[3];
 8012b4c:	683b      	ldr	r3, [r7, #0]
 8012b4e:	78da      	ldrb	r2, [r3, #3]
 8012b50:	4b1c      	ldr	r3, [pc, #112]	; (8012bc4 <CDC_Control_FS+0x140>)
 8012b52:	70da      	strb	r2, [r3, #3]
    	TempBuf_USB[4]=pbuf[4];
 8012b54:	683b      	ldr	r3, [r7, #0]
 8012b56:	791a      	ldrb	r2, [r3, #4]
 8012b58:	4b1a      	ldr	r3, [pc, #104]	; (8012bc4 <CDC_Control_FS+0x140>)
 8012b5a:	711a      	strb	r2, [r3, #4]
    	TempBuf_USB[5]=pbuf[5];
 8012b5c:	683b      	ldr	r3, [r7, #0]
 8012b5e:	795a      	ldrb	r2, [r3, #5]
 8012b60:	4b18      	ldr	r3, [pc, #96]	; (8012bc4 <CDC_Control_FS+0x140>)
 8012b62:	715a      	strb	r2, [r3, #5]
    	TempBuf_USB[6]=pbuf[6];
 8012b64:	683b      	ldr	r3, [r7, #0]
 8012b66:	799a      	ldrb	r2, [r3, #6]
 8012b68:	4b16      	ldr	r3, [pc, #88]	; (8012bc4 <CDC_Control_FS+0x140>)
 8012b6a:	719a      	strb	r2, [r3, #6]
    	break;
 8012b6c:	e023      	b.n	8012bb6 <CDC_Control_FS+0x132>


    case CDC_GET_LINE_CODING:
        pbuf[0]=TempBuf_USB[0];
 8012b6e:	4b15      	ldr	r3, [pc, #84]	; (8012bc4 <CDC_Control_FS+0x140>)
 8012b70:	781a      	ldrb	r2, [r3, #0]
 8012b72:	683b      	ldr	r3, [r7, #0]
 8012b74:	701a      	strb	r2, [r3, #0]
        pbuf[1]=TempBuf_USB[1];
 8012b76:	683b      	ldr	r3, [r7, #0]
 8012b78:	3301      	adds	r3, #1
 8012b7a:	4a12      	ldr	r2, [pc, #72]	; (8012bc4 <CDC_Control_FS+0x140>)
 8012b7c:	7852      	ldrb	r2, [r2, #1]
 8012b7e:	701a      	strb	r2, [r3, #0]
        pbuf[2]=TempBuf_USB[2];
 8012b80:	683b      	ldr	r3, [r7, #0]
 8012b82:	3302      	adds	r3, #2
 8012b84:	4a0f      	ldr	r2, [pc, #60]	; (8012bc4 <CDC_Control_FS+0x140>)
 8012b86:	7892      	ldrb	r2, [r2, #2]
 8012b88:	701a      	strb	r2, [r3, #0]
        pbuf[3]=TempBuf_USB[3];
 8012b8a:	683b      	ldr	r3, [r7, #0]
 8012b8c:	3303      	adds	r3, #3
 8012b8e:	4a0d      	ldr	r2, [pc, #52]	; (8012bc4 <CDC_Control_FS+0x140>)
 8012b90:	78d2      	ldrb	r2, [r2, #3]
 8012b92:	701a      	strb	r2, [r3, #0]
        pbuf[4]=TempBuf_USB[4];
 8012b94:	683b      	ldr	r3, [r7, #0]
 8012b96:	3304      	adds	r3, #4
 8012b98:	4a0a      	ldr	r2, [pc, #40]	; (8012bc4 <CDC_Control_FS+0x140>)
 8012b9a:	7912      	ldrb	r2, [r2, #4]
 8012b9c:	701a      	strb	r2, [r3, #0]
        pbuf[5]=TempBuf_USB[5];
 8012b9e:	683b      	ldr	r3, [r7, #0]
 8012ba0:	3305      	adds	r3, #5
 8012ba2:	4a08      	ldr	r2, [pc, #32]	; (8012bc4 <CDC_Control_FS+0x140>)
 8012ba4:	7952      	ldrb	r2, [r2, #5]
 8012ba6:	701a      	strb	r2, [r3, #0]
        pbuf[6]=TempBuf_USB[6];
 8012ba8:	683b      	ldr	r3, [r7, #0]
 8012baa:	3306      	adds	r3, #6
 8012bac:	4a05      	ldr	r2, [pc, #20]	; (8012bc4 <CDC_Control_FS+0x140>)
 8012bae:	7992      	ldrb	r2, [r2, #6]
 8012bb0:	701a      	strb	r2, [r3, #0]
    break;
 8012bb2:	e000      	b.n	8012bb6 <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8012bb4:	bf00      	nop
  }

  return (USBD_OK);
 8012bb6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8012bb8:	4618      	mov	r0, r3
 8012bba:	370c      	adds	r7, #12
 8012bbc:	46bd      	mov	sp, r7
 8012bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bc2:	4770      	bx	lr
 8012bc4:	200065d0 	.word	0x200065d0

08012bc8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8012bc8:	b580      	push	{r7, lr}
 8012bca:	b082      	sub	sp, #8
 8012bcc:	af00      	add	r7, sp, #0
 8012bce:	6078      	str	r0, [r7, #4]
 8012bd0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	ringBuff_PushArray(&usb_rx_ringbuff, Buf, (uint16_t)*Len);
 8012bd2:	683b      	ldr	r3, [r7, #0]
 8012bd4:	681b      	ldr	r3, [r3, #0]
 8012bd6:	b29b      	uxth	r3, r3
 8012bd8:	461a      	mov	r2, r3
 8012bda:	6879      	ldr	r1, [r7, #4]
 8012bdc:	4807      	ldr	r0, [pc, #28]	; (8012bfc <CDC_Receive_FS+0x34>)
 8012bde:	f7f0 fcbe 	bl	800355e <ringBuff_PushArray>
//	if ( END_CHAR == Buf[*Len - 1]) {
//		osSignalSet(USB_RX_Check_Handle, 0x01);
//	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8012be2:	6879      	ldr	r1, [r7, #4]
 8012be4:	4806      	ldr	r0, [pc, #24]	; (8012c00 <CDC_Receive_FS+0x38>)
 8012be6:	f7fb fc9e 	bl	800e526 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8012bea:	4805      	ldr	r0, [pc, #20]	; (8012c00 <CDC_Receive_FS+0x38>)
 8012bec:	f7fb fcde 	bl	800e5ac <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8012bf0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8012bf2:	4618      	mov	r0, r3
 8012bf4:	3708      	adds	r7, #8
 8012bf6:	46bd      	mov	sp, r7
 8012bf8:	bd80      	pop	{r7, pc}
 8012bfa:	bf00      	nop
 8012bfc:	20000054 	.word	0x20000054
 8012c00:	20005f34 	.word	0x20005f34

08012c04 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8012c04:	b580      	push	{r7, lr}
 8012c06:	b084      	sub	sp, #16
 8012c08:	af00      	add	r7, sp, #0
 8012c0a:	6078      	str	r0, [r7, #4]
 8012c0c:	460b      	mov	r3, r1
 8012c0e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8012c10:	2300      	movs	r3, #0
 8012c12:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8012c14:	4b0d      	ldr	r3, [pc, #52]	; (8012c4c <CDC_Transmit_FS+0x48>)
 8012c16:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8012c1a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8012c1c:	68bb      	ldr	r3, [r7, #8]
 8012c1e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	d001      	beq.n	8012c2a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8012c26:	2301      	movs	r3, #1
 8012c28:	e00b      	b.n	8012c42 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8012c2a:	887b      	ldrh	r3, [r7, #2]
 8012c2c:	461a      	mov	r2, r3
 8012c2e:	6879      	ldr	r1, [r7, #4]
 8012c30:	4806      	ldr	r0, [pc, #24]	; (8012c4c <CDC_Transmit_FS+0x48>)
 8012c32:	f7fb fc5e 	bl	800e4f2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8012c36:	4805      	ldr	r0, [pc, #20]	; (8012c4c <CDC_Transmit_FS+0x48>)
 8012c38:	f7fb fc89 	bl	800e54e <USBD_CDC_TransmitPacket>
 8012c3c:	4603      	mov	r3, r0
 8012c3e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8012c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8012c42:	4618      	mov	r0, r3
 8012c44:	3710      	adds	r7, #16
 8012c46:	46bd      	mov	sp, r7
 8012c48:	bd80      	pop	{r7, pc}
 8012c4a:	bf00      	nop
 8012c4c:	20005f34 	.word	0x20005f34

08012c50 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012c50:	b480      	push	{r7}
 8012c52:	b083      	sub	sp, #12
 8012c54:	af00      	add	r7, sp, #0
 8012c56:	4603      	mov	r3, r0
 8012c58:	6039      	str	r1, [r7, #0]
 8012c5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8012c5c:	683b      	ldr	r3, [r7, #0]
 8012c5e:	2212      	movs	r2, #18
 8012c60:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8012c62:	4b03      	ldr	r3, [pc, #12]	; (8012c70 <USBD_FS_DeviceDescriptor+0x20>)
}
 8012c64:	4618      	mov	r0, r3
 8012c66:	370c      	adds	r7, #12
 8012c68:	46bd      	mov	sp, r7
 8012c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c6e:	4770      	bx	lr
 8012c70:	20000e00 	.word	0x20000e00

08012c74 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012c74:	b480      	push	{r7}
 8012c76:	b083      	sub	sp, #12
 8012c78:	af00      	add	r7, sp, #0
 8012c7a:	4603      	mov	r3, r0
 8012c7c:	6039      	str	r1, [r7, #0]
 8012c7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8012c80:	683b      	ldr	r3, [r7, #0]
 8012c82:	2204      	movs	r2, #4
 8012c84:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8012c86:	4b03      	ldr	r3, [pc, #12]	; (8012c94 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8012c88:	4618      	mov	r0, r3
 8012c8a:	370c      	adds	r7, #12
 8012c8c:	46bd      	mov	sp, r7
 8012c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c92:	4770      	bx	lr
 8012c94:	20000e14 	.word	0x20000e14

08012c98 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012c98:	b580      	push	{r7, lr}
 8012c9a:	b082      	sub	sp, #8
 8012c9c:	af00      	add	r7, sp, #0
 8012c9e:	4603      	mov	r3, r0
 8012ca0:	6039      	str	r1, [r7, #0]
 8012ca2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012ca4:	79fb      	ldrb	r3, [r7, #7]
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d105      	bne.n	8012cb6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8012caa:	683a      	ldr	r2, [r7, #0]
 8012cac:	4907      	ldr	r1, [pc, #28]	; (8012ccc <USBD_FS_ProductStrDescriptor+0x34>)
 8012cae:	4808      	ldr	r0, [pc, #32]	; (8012cd0 <USBD_FS_ProductStrDescriptor+0x38>)
 8012cb0:	f7fc fc22 	bl	800f4f8 <USBD_GetString>
 8012cb4:	e004      	b.n	8012cc0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8012cb6:	683a      	ldr	r2, [r7, #0]
 8012cb8:	4904      	ldr	r1, [pc, #16]	; (8012ccc <USBD_FS_ProductStrDescriptor+0x34>)
 8012cba:	4805      	ldr	r0, [pc, #20]	; (8012cd0 <USBD_FS_ProductStrDescriptor+0x38>)
 8012cbc:	f7fc fc1c 	bl	800f4f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012cc0:	4b02      	ldr	r3, [pc, #8]	; (8012ccc <USBD_FS_ProductStrDescriptor+0x34>)
}
 8012cc2:	4618      	mov	r0, r3
 8012cc4:	3708      	adds	r7, #8
 8012cc6:	46bd      	mov	sp, r7
 8012cc8:	bd80      	pop	{r7, pc}
 8012cca:	bf00      	nop
 8012ccc:	200065d8 	.word	0x200065d8
 8012cd0:	08019680 	.word	0x08019680

08012cd4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012cd4:	b580      	push	{r7, lr}
 8012cd6:	b082      	sub	sp, #8
 8012cd8:	af00      	add	r7, sp, #0
 8012cda:	4603      	mov	r3, r0
 8012cdc:	6039      	str	r1, [r7, #0]
 8012cde:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8012ce0:	683a      	ldr	r2, [r7, #0]
 8012ce2:	4904      	ldr	r1, [pc, #16]	; (8012cf4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8012ce4:	4804      	ldr	r0, [pc, #16]	; (8012cf8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8012ce6:	f7fc fc07 	bl	800f4f8 <USBD_GetString>
  return USBD_StrDesc;
 8012cea:	4b02      	ldr	r3, [pc, #8]	; (8012cf4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8012cec:	4618      	mov	r0, r3
 8012cee:	3708      	adds	r7, #8
 8012cf0:	46bd      	mov	sp, r7
 8012cf2:	bd80      	pop	{r7, pc}
 8012cf4:	200065d8 	.word	0x200065d8
 8012cf8:	08019698 	.word	0x08019698

08012cfc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012cfc:	b580      	push	{r7, lr}
 8012cfe:	b082      	sub	sp, #8
 8012d00:	af00      	add	r7, sp, #0
 8012d02:	4603      	mov	r3, r0
 8012d04:	6039      	str	r1, [r7, #0]
 8012d06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8012d08:	683b      	ldr	r3, [r7, #0]
 8012d0a:	221a      	movs	r2, #26
 8012d0c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8012d0e:	f000 f843 	bl	8012d98 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8012d12:	4b02      	ldr	r3, [pc, #8]	; (8012d1c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8012d14:	4618      	mov	r0, r3
 8012d16:	3708      	adds	r7, #8
 8012d18:	46bd      	mov	sp, r7
 8012d1a:	bd80      	pop	{r7, pc}
 8012d1c:	20000e18 	.word	0x20000e18

08012d20 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012d20:	b580      	push	{r7, lr}
 8012d22:	b082      	sub	sp, #8
 8012d24:	af00      	add	r7, sp, #0
 8012d26:	4603      	mov	r3, r0
 8012d28:	6039      	str	r1, [r7, #0]
 8012d2a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8012d2c:	79fb      	ldrb	r3, [r7, #7]
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d105      	bne.n	8012d3e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8012d32:	683a      	ldr	r2, [r7, #0]
 8012d34:	4907      	ldr	r1, [pc, #28]	; (8012d54 <USBD_FS_ConfigStrDescriptor+0x34>)
 8012d36:	4808      	ldr	r0, [pc, #32]	; (8012d58 <USBD_FS_ConfigStrDescriptor+0x38>)
 8012d38:	f7fc fbde 	bl	800f4f8 <USBD_GetString>
 8012d3c:	e004      	b.n	8012d48 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8012d3e:	683a      	ldr	r2, [r7, #0]
 8012d40:	4904      	ldr	r1, [pc, #16]	; (8012d54 <USBD_FS_ConfigStrDescriptor+0x34>)
 8012d42:	4805      	ldr	r0, [pc, #20]	; (8012d58 <USBD_FS_ConfigStrDescriptor+0x38>)
 8012d44:	f7fc fbd8 	bl	800f4f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012d48:	4b02      	ldr	r3, [pc, #8]	; (8012d54 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8012d4a:	4618      	mov	r0, r3
 8012d4c:	3708      	adds	r7, #8
 8012d4e:	46bd      	mov	sp, r7
 8012d50:	bd80      	pop	{r7, pc}
 8012d52:	bf00      	nop
 8012d54:	200065d8 	.word	0x200065d8
 8012d58:	080196ac 	.word	0x080196ac

08012d5c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012d5c:	b580      	push	{r7, lr}
 8012d5e:	b082      	sub	sp, #8
 8012d60:	af00      	add	r7, sp, #0
 8012d62:	4603      	mov	r3, r0
 8012d64:	6039      	str	r1, [r7, #0]
 8012d66:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012d68:	79fb      	ldrb	r3, [r7, #7]
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d105      	bne.n	8012d7a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8012d6e:	683a      	ldr	r2, [r7, #0]
 8012d70:	4907      	ldr	r1, [pc, #28]	; (8012d90 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8012d72:	4808      	ldr	r0, [pc, #32]	; (8012d94 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012d74:	f7fc fbc0 	bl	800f4f8 <USBD_GetString>
 8012d78:	e004      	b.n	8012d84 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8012d7a:	683a      	ldr	r2, [r7, #0]
 8012d7c:	4904      	ldr	r1, [pc, #16]	; (8012d90 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8012d7e:	4805      	ldr	r0, [pc, #20]	; (8012d94 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012d80:	f7fc fbba 	bl	800f4f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012d84:	4b02      	ldr	r3, [pc, #8]	; (8012d90 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8012d86:	4618      	mov	r0, r3
 8012d88:	3708      	adds	r7, #8
 8012d8a:	46bd      	mov	sp, r7
 8012d8c:	bd80      	pop	{r7, pc}
 8012d8e:	bf00      	nop
 8012d90:	200065d8 	.word	0x200065d8
 8012d94:	080196b8 	.word	0x080196b8

08012d98 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8012d98:	b580      	push	{r7, lr}
 8012d9a:	b084      	sub	sp, #16
 8012d9c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8012d9e:	4b0f      	ldr	r3, [pc, #60]	; (8012ddc <Get_SerialNum+0x44>)
 8012da0:	681b      	ldr	r3, [r3, #0]
 8012da2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8012da4:	4b0e      	ldr	r3, [pc, #56]	; (8012de0 <Get_SerialNum+0x48>)
 8012da6:	681b      	ldr	r3, [r3, #0]
 8012da8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8012daa:	4b0e      	ldr	r3, [pc, #56]	; (8012de4 <Get_SerialNum+0x4c>)
 8012dac:	681b      	ldr	r3, [r3, #0]
 8012dae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8012db0:	68fa      	ldr	r2, [r7, #12]
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	4413      	add	r3, r2
 8012db6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8012db8:	68fb      	ldr	r3, [r7, #12]
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	d009      	beq.n	8012dd2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8012dbe:	2208      	movs	r2, #8
 8012dc0:	4909      	ldr	r1, [pc, #36]	; (8012de8 <Get_SerialNum+0x50>)
 8012dc2:	68f8      	ldr	r0, [r7, #12]
 8012dc4:	f000 f814 	bl	8012df0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8012dc8:	2204      	movs	r2, #4
 8012dca:	4908      	ldr	r1, [pc, #32]	; (8012dec <Get_SerialNum+0x54>)
 8012dcc:	68b8      	ldr	r0, [r7, #8]
 8012dce:	f000 f80f 	bl	8012df0 <IntToUnicode>
  }
}
 8012dd2:	bf00      	nop
 8012dd4:	3710      	adds	r7, #16
 8012dd6:	46bd      	mov	sp, r7
 8012dd8:	bd80      	pop	{r7, pc}
 8012dda:	bf00      	nop
 8012ddc:	1fff7a10 	.word	0x1fff7a10
 8012de0:	1fff7a14 	.word	0x1fff7a14
 8012de4:	1fff7a18 	.word	0x1fff7a18
 8012de8:	20000e1a 	.word	0x20000e1a
 8012dec:	20000e2a 	.word	0x20000e2a

08012df0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8012df0:	b480      	push	{r7}
 8012df2:	b087      	sub	sp, #28
 8012df4:	af00      	add	r7, sp, #0
 8012df6:	60f8      	str	r0, [r7, #12]
 8012df8:	60b9      	str	r1, [r7, #8]
 8012dfa:	4613      	mov	r3, r2
 8012dfc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8012dfe:	2300      	movs	r3, #0
 8012e00:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8012e02:	2300      	movs	r3, #0
 8012e04:	75fb      	strb	r3, [r7, #23]
 8012e06:	e027      	b.n	8012e58 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8012e08:	68fb      	ldr	r3, [r7, #12]
 8012e0a:	0f1b      	lsrs	r3, r3, #28
 8012e0c:	2b09      	cmp	r3, #9
 8012e0e:	d80b      	bhi.n	8012e28 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8012e10:	68fb      	ldr	r3, [r7, #12]
 8012e12:	0f1b      	lsrs	r3, r3, #28
 8012e14:	b2da      	uxtb	r2, r3
 8012e16:	7dfb      	ldrb	r3, [r7, #23]
 8012e18:	005b      	lsls	r3, r3, #1
 8012e1a:	4619      	mov	r1, r3
 8012e1c:	68bb      	ldr	r3, [r7, #8]
 8012e1e:	440b      	add	r3, r1
 8012e20:	3230      	adds	r2, #48	; 0x30
 8012e22:	b2d2      	uxtb	r2, r2
 8012e24:	701a      	strb	r2, [r3, #0]
 8012e26:	e00a      	b.n	8012e3e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8012e28:	68fb      	ldr	r3, [r7, #12]
 8012e2a:	0f1b      	lsrs	r3, r3, #28
 8012e2c:	b2da      	uxtb	r2, r3
 8012e2e:	7dfb      	ldrb	r3, [r7, #23]
 8012e30:	005b      	lsls	r3, r3, #1
 8012e32:	4619      	mov	r1, r3
 8012e34:	68bb      	ldr	r3, [r7, #8]
 8012e36:	440b      	add	r3, r1
 8012e38:	3237      	adds	r2, #55	; 0x37
 8012e3a:	b2d2      	uxtb	r2, r2
 8012e3c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8012e3e:	68fb      	ldr	r3, [r7, #12]
 8012e40:	011b      	lsls	r3, r3, #4
 8012e42:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8012e44:	7dfb      	ldrb	r3, [r7, #23]
 8012e46:	005b      	lsls	r3, r3, #1
 8012e48:	3301      	adds	r3, #1
 8012e4a:	68ba      	ldr	r2, [r7, #8]
 8012e4c:	4413      	add	r3, r2
 8012e4e:	2200      	movs	r2, #0
 8012e50:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8012e52:	7dfb      	ldrb	r3, [r7, #23]
 8012e54:	3301      	adds	r3, #1
 8012e56:	75fb      	strb	r3, [r7, #23]
 8012e58:	7dfa      	ldrb	r2, [r7, #23]
 8012e5a:	79fb      	ldrb	r3, [r7, #7]
 8012e5c:	429a      	cmp	r2, r3
 8012e5e:	d3d3      	bcc.n	8012e08 <IntToUnicode+0x18>
  }
}
 8012e60:	bf00      	nop
 8012e62:	371c      	adds	r7, #28
 8012e64:	46bd      	mov	sp, r7
 8012e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e6a:	4770      	bx	lr

08012e6c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8012e6c:	b580      	push	{r7, lr}
 8012e6e:	b08a      	sub	sp, #40	; 0x28
 8012e70:	af00      	add	r7, sp, #0
 8012e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012e74:	f107 0314 	add.w	r3, r7, #20
 8012e78:	2200      	movs	r2, #0
 8012e7a:	601a      	str	r2, [r3, #0]
 8012e7c:	605a      	str	r2, [r3, #4]
 8012e7e:	609a      	str	r2, [r3, #8]
 8012e80:	60da      	str	r2, [r3, #12]
 8012e82:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	681b      	ldr	r3, [r3, #0]
 8012e88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8012e8c:	d13a      	bne.n	8012f04 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012e8e:	2300      	movs	r3, #0
 8012e90:	613b      	str	r3, [r7, #16]
 8012e92:	4b1e      	ldr	r3, [pc, #120]	; (8012f0c <HAL_PCD_MspInit+0xa0>)
 8012e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e96:	4a1d      	ldr	r2, [pc, #116]	; (8012f0c <HAL_PCD_MspInit+0xa0>)
 8012e98:	f043 0301 	orr.w	r3, r3, #1
 8012e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8012e9e:	4b1b      	ldr	r3, [pc, #108]	; (8012f0c <HAL_PCD_MspInit+0xa0>)
 8012ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012ea2:	f003 0301 	and.w	r3, r3, #1
 8012ea6:	613b      	str	r3, [r7, #16]
 8012ea8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8012eaa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8012eae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012eb0:	2302      	movs	r3, #2
 8012eb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012eb4:	2300      	movs	r3, #0
 8012eb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012eb8:	2303      	movs	r3, #3
 8012eba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8012ebc:	230a      	movs	r3, #10
 8012ebe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012ec0:	f107 0314 	add.w	r3, r7, #20
 8012ec4:	4619      	mov	r1, r3
 8012ec6:	4812      	ldr	r0, [pc, #72]	; (8012f10 <HAL_PCD_MspInit+0xa4>)
 8012ec8:	f7f6 fb34 	bl	8009534 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8012ecc:	4b0f      	ldr	r3, [pc, #60]	; (8012f0c <HAL_PCD_MspInit+0xa0>)
 8012ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012ed0:	4a0e      	ldr	r2, [pc, #56]	; (8012f0c <HAL_PCD_MspInit+0xa0>)
 8012ed2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012ed6:	6353      	str	r3, [r2, #52]	; 0x34
 8012ed8:	2300      	movs	r3, #0
 8012eda:	60fb      	str	r3, [r7, #12]
 8012edc:	4b0b      	ldr	r3, [pc, #44]	; (8012f0c <HAL_PCD_MspInit+0xa0>)
 8012ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012ee0:	4a0a      	ldr	r2, [pc, #40]	; (8012f0c <HAL_PCD_MspInit+0xa0>)
 8012ee2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8012ee6:	6453      	str	r3, [r2, #68]	; 0x44
 8012ee8:	4b08      	ldr	r3, [pc, #32]	; (8012f0c <HAL_PCD_MspInit+0xa0>)
 8012eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012eec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012ef0:	60fb      	str	r3, [r7, #12]
 8012ef2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8012ef4:	2200      	movs	r2, #0
 8012ef6:	2105      	movs	r1, #5
 8012ef8:	2043      	movs	r0, #67	; 0x43
 8012efa:	f7f5 ff53 	bl	8008da4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8012efe:	2043      	movs	r0, #67	; 0x43
 8012f00:	f7f5 ff6c 	bl	8008ddc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8012f04:	bf00      	nop
 8012f06:	3728      	adds	r7, #40	; 0x28
 8012f08:	46bd      	mov	sp, r7
 8012f0a:	bd80      	pop	{r7, pc}
 8012f0c:	40023800 	.word	0x40023800
 8012f10:	40020000 	.word	0x40020000

08012f14 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012f14:	b580      	push	{r7, lr}
 8012f16:	b082      	sub	sp, #8
 8012f18:	af00      	add	r7, sp, #0
 8012f1a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8012f28:	4619      	mov	r1, r3
 8012f2a:	4610      	mov	r0, r2
 8012f2c:	f7fb fbf6 	bl	800e71c <USBD_LL_SetupStage>
}
 8012f30:	bf00      	nop
 8012f32:	3708      	adds	r7, #8
 8012f34:	46bd      	mov	sp, r7
 8012f36:	bd80      	pop	{r7, pc}

08012f38 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012f38:	b580      	push	{r7, lr}
 8012f3a:	b082      	sub	sp, #8
 8012f3c:	af00      	add	r7, sp, #0
 8012f3e:	6078      	str	r0, [r7, #4]
 8012f40:	460b      	mov	r3, r1
 8012f42:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8012f4a:	78fa      	ldrb	r2, [r7, #3]
 8012f4c:	6879      	ldr	r1, [r7, #4]
 8012f4e:	4613      	mov	r3, r2
 8012f50:	00db      	lsls	r3, r3, #3
 8012f52:	1a9b      	subs	r3, r3, r2
 8012f54:	009b      	lsls	r3, r3, #2
 8012f56:	440b      	add	r3, r1
 8012f58:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8012f5c:	681a      	ldr	r2, [r3, #0]
 8012f5e:	78fb      	ldrb	r3, [r7, #3]
 8012f60:	4619      	mov	r1, r3
 8012f62:	f7fb fc26 	bl	800e7b2 <USBD_LL_DataOutStage>
}
 8012f66:	bf00      	nop
 8012f68:	3708      	adds	r7, #8
 8012f6a:	46bd      	mov	sp, r7
 8012f6c:	bd80      	pop	{r7, pc}

08012f6e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012f6e:	b580      	push	{r7, lr}
 8012f70:	b082      	sub	sp, #8
 8012f72:	af00      	add	r7, sp, #0
 8012f74:	6078      	str	r0, [r7, #4]
 8012f76:	460b      	mov	r3, r1
 8012f78:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8012f80:	78fa      	ldrb	r2, [r7, #3]
 8012f82:	6879      	ldr	r1, [r7, #4]
 8012f84:	4613      	mov	r3, r2
 8012f86:	00db      	lsls	r3, r3, #3
 8012f88:	1a9b      	subs	r3, r3, r2
 8012f8a:	009b      	lsls	r3, r3, #2
 8012f8c:	440b      	add	r3, r1
 8012f8e:	3348      	adds	r3, #72	; 0x48
 8012f90:	681a      	ldr	r2, [r3, #0]
 8012f92:	78fb      	ldrb	r3, [r7, #3]
 8012f94:	4619      	mov	r1, r3
 8012f96:	f7fb fc7d 	bl	800e894 <USBD_LL_DataInStage>
}
 8012f9a:	bf00      	nop
 8012f9c:	3708      	adds	r7, #8
 8012f9e:	46bd      	mov	sp, r7
 8012fa0:	bd80      	pop	{r7, pc}

08012fa2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012fa2:	b580      	push	{r7, lr}
 8012fa4:	b082      	sub	sp, #8
 8012fa6:	af00      	add	r7, sp, #0
 8012fa8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012fb0:	4618      	mov	r0, r3
 8012fb2:	f7fb fd8b 	bl	800eacc <USBD_LL_SOF>
}
 8012fb6:	bf00      	nop
 8012fb8:	3708      	adds	r7, #8
 8012fba:	46bd      	mov	sp, r7
 8012fbc:	bd80      	pop	{r7, pc}

08012fbe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8012fbe:	b580      	push	{r7, lr}
 8012fc0:	b084      	sub	sp, #16
 8012fc2:	af00      	add	r7, sp, #0
 8012fc4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8012fc6:	2301      	movs	r3, #1
 8012fc8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	68db      	ldr	r3, [r3, #12]
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	d102      	bne.n	8012fd8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8012fd2:	2300      	movs	r3, #0
 8012fd4:	73fb      	strb	r3, [r7, #15]
 8012fd6:	e008      	b.n	8012fea <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	68db      	ldr	r3, [r3, #12]
 8012fdc:	2b02      	cmp	r3, #2
 8012fde:	d102      	bne.n	8012fe6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8012fe0:	2301      	movs	r3, #1
 8012fe2:	73fb      	strb	r3, [r7, #15]
 8012fe4:	e001      	b.n	8012fea <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8012fe6:	f7f0 fa43 	bl	8003470 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012ff0:	7bfa      	ldrb	r2, [r7, #15]
 8012ff2:	4611      	mov	r1, r2
 8012ff4:	4618      	mov	r0, r3
 8012ff6:	f7fb fd33 	bl	800ea60 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8013000:	4618      	mov	r0, r3
 8013002:	f7fb fcec 	bl	800e9de <USBD_LL_Reset>
}
 8013006:	bf00      	nop
 8013008:	3710      	adds	r7, #16
 801300a:	46bd      	mov	sp, r7
 801300c:	bd80      	pop	{r7, pc}
	...

08013010 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013010:	b580      	push	{r7, lr}
 8013012:	b082      	sub	sp, #8
 8013014:	af00      	add	r7, sp, #0
 8013016:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801301e:	4618      	mov	r0, r3
 8013020:	f7fb fd2e 	bl	800ea80 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	681b      	ldr	r3, [r3, #0]
 8013028:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801302c:	681b      	ldr	r3, [r3, #0]
 801302e:	687a      	ldr	r2, [r7, #4]
 8013030:	6812      	ldr	r2, [r2, #0]
 8013032:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013036:	f043 0301 	orr.w	r3, r3, #1
 801303a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	6a1b      	ldr	r3, [r3, #32]
 8013040:	2b00      	cmp	r3, #0
 8013042:	d005      	beq.n	8013050 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013044:	4b04      	ldr	r3, [pc, #16]	; (8013058 <HAL_PCD_SuspendCallback+0x48>)
 8013046:	691b      	ldr	r3, [r3, #16]
 8013048:	4a03      	ldr	r2, [pc, #12]	; (8013058 <HAL_PCD_SuspendCallback+0x48>)
 801304a:	f043 0306 	orr.w	r3, r3, #6
 801304e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8013050:	bf00      	nop
 8013052:	3708      	adds	r7, #8
 8013054:	46bd      	mov	sp, r7
 8013056:	bd80      	pop	{r7, pc}
 8013058:	e000ed00 	.word	0xe000ed00

0801305c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801305c:	b580      	push	{r7, lr}
 801305e:	b082      	sub	sp, #8
 8013060:	af00      	add	r7, sp, #0
 8013062:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801306a:	4618      	mov	r0, r3
 801306c:	f7fb fd1d 	bl	800eaaa <USBD_LL_Resume>
}
 8013070:	bf00      	nop
 8013072:	3708      	adds	r7, #8
 8013074:	46bd      	mov	sp, r7
 8013076:	bd80      	pop	{r7, pc}

08013078 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013078:	b580      	push	{r7, lr}
 801307a:	b082      	sub	sp, #8
 801307c:	af00      	add	r7, sp, #0
 801307e:	6078      	str	r0, [r7, #4]
 8013080:	460b      	mov	r3, r1
 8013082:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801308a:	78fa      	ldrb	r2, [r7, #3]
 801308c:	4611      	mov	r1, r2
 801308e:	4618      	mov	r0, r3
 8013090:	f7fb fd43 	bl	800eb1a <USBD_LL_IsoOUTIncomplete>
}
 8013094:	bf00      	nop
 8013096:	3708      	adds	r7, #8
 8013098:	46bd      	mov	sp, r7
 801309a:	bd80      	pop	{r7, pc}

0801309c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801309c:	b580      	push	{r7, lr}
 801309e:	b082      	sub	sp, #8
 80130a0:	af00      	add	r7, sp, #0
 80130a2:	6078      	str	r0, [r7, #4]
 80130a4:	460b      	mov	r3, r1
 80130a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80130ae:	78fa      	ldrb	r2, [r7, #3]
 80130b0:	4611      	mov	r1, r2
 80130b2:	4618      	mov	r0, r3
 80130b4:	f7fb fd24 	bl	800eb00 <USBD_LL_IsoINIncomplete>
}
 80130b8:	bf00      	nop
 80130ba:	3708      	adds	r7, #8
 80130bc:	46bd      	mov	sp, r7
 80130be:	bd80      	pop	{r7, pc}

080130c0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80130c0:	b580      	push	{r7, lr}
 80130c2:	b082      	sub	sp, #8
 80130c4:	af00      	add	r7, sp, #0
 80130c6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80130ce:	4618      	mov	r0, r3
 80130d0:	f7fb fd30 	bl	800eb34 <USBD_LL_DevConnected>
}
 80130d4:	bf00      	nop
 80130d6:	3708      	adds	r7, #8
 80130d8:	46bd      	mov	sp, r7
 80130da:	bd80      	pop	{r7, pc}

080130dc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80130dc:	b580      	push	{r7, lr}
 80130de:	b082      	sub	sp, #8
 80130e0:	af00      	add	r7, sp, #0
 80130e2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80130ea:	4618      	mov	r0, r3
 80130ec:	f7fb fd2d 	bl	800eb4a <USBD_LL_DevDisconnected>
}
 80130f0:	bf00      	nop
 80130f2:	3708      	adds	r7, #8
 80130f4:	46bd      	mov	sp, r7
 80130f6:	bd80      	pop	{r7, pc}

080130f8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80130f8:	b580      	push	{r7, lr}
 80130fa:	b082      	sub	sp, #8
 80130fc:	af00      	add	r7, sp, #0
 80130fe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	781b      	ldrb	r3, [r3, #0]
 8013104:	2b00      	cmp	r3, #0
 8013106:	d13c      	bne.n	8013182 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8013108:	4a20      	ldr	r2, [pc, #128]	; (801318c <USBD_LL_Init+0x94>)
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	4a1e      	ldr	r2, [pc, #120]	; (801318c <USBD_LL_Init+0x94>)
 8013114:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8013118:	4b1c      	ldr	r3, [pc, #112]	; (801318c <USBD_LL_Init+0x94>)
 801311a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801311e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8013120:	4b1a      	ldr	r3, [pc, #104]	; (801318c <USBD_LL_Init+0x94>)
 8013122:	2204      	movs	r2, #4
 8013124:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8013126:	4b19      	ldr	r3, [pc, #100]	; (801318c <USBD_LL_Init+0x94>)
 8013128:	2202      	movs	r2, #2
 801312a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801312c:	4b17      	ldr	r3, [pc, #92]	; (801318c <USBD_LL_Init+0x94>)
 801312e:	2200      	movs	r2, #0
 8013130:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8013132:	4b16      	ldr	r3, [pc, #88]	; (801318c <USBD_LL_Init+0x94>)
 8013134:	2202      	movs	r2, #2
 8013136:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8013138:	4b14      	ldr	r3, [pc, #80]	; (801318c <USBD_LL_Init+0x94>)
 801313a:	2200      	movs	r2, #0
 801313c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801313e:	4b13      	ldr	r3, [pc, #76]	; (801318c <USBD_LL_Init+0x94>)
 8013140:	2200      	movs	r2, #0
 8013142:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8013144:	4b11      	ldr	r3, [pc, #68]	; (801318c <USBD_LL_Init+0x94>)
 8013146:	2200      	movs	r2, #0
 8013148:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801314a:	4b10      	ldr	r3, [pc, #64]	; (801318c <USBD_LL_Init+0x94>)
 801314c:	2200      	movs	r2, #0
 801314e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8013150:	4b0e      	ldr	r3, [pc, #56]	; (801318c <USBD_LL_Init+0x94>)
 8013152:	2200      	movs	r2, #0
 8013154:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8013156:	480d      	ldr	r0, [pc, #52]	; (801318c <USBD_LL_Init+0x94>)
 8013158:	f7f6 fbf6 	bl	8009948 <HAL_PCD_Init>
 801315c:	4603      	mov	r3, r0
 801315e:	2b00      	cmp	r3, #0
 8013160:	d001      	beq.n	8013166 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8013162:	f7f0 f985 	bl	8003470 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8013166:	2180      	movs	r1, #128	; 0x80
 8013168:	4808      	ldr	r0, [pc, #32]	; (801318c <USBD_LL_Init+0x94>)
 801316a:	f7f7 fd5a 	bl	800ac22 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801316e:	2240      	movs	r2, #64	; 0x40
 8013170:	2100      	movs	r1, #0
 8013172:	4806      	ldr	r0, [pc, #24]	; (801318c <USBD_LL_Init+0x94>)
 8013174:	f7f7 fd0e 	bl	800ab94 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8013178:	2280      	movs	r2, #128	; 0x80
 801317a:	2101      	movs	r1, #1
 801317c:	4803      	ldr	r0, [pc, #12]	; (801318c <USBD_LL_Init+0x94>)
 801317e:	f7f7 fd09 	bl	800ab94 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8013182:	2300      	movs	r3, #0
}
 8013184:	4618      	mov	r0, r3
 8013186:	3708      	adds	r7, #8
 8013188:	46bd      	mov	sp, r7
 801318a:	bd80      	pop	{r7, pc}
 801318c:	200067d8 	.word	0x200067d8

08013190 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8013190:	b580      	push	{r7, lr}
 8013192:	b084      	sub	sp, #16
 8013194:	af00      	add	r7, sp, #0
 8013196:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013198:	2300      	movs	r3, #0
 801319a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801319c:	2300      	movs	r3, #0
 801319e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80131a6:	4618      	mov	r0, r3
 80131a8:	f7f6 fceb 	bl	8009b82 <HAL_PCD_Start>
 80131ac:	4603      	mov	r3, r0
 80131ae:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 80131b0:	7bfb      	ldrb	r3, [r7, #15]
 80131b2:	4618      	mov	r0, r3
 80131b4:	f000 f92e 	bl	8013414 <USBD_Get_USB_Status>
 80131b8:	4603      	mov	r3, r0
 80131ba:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80131bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80131be:	4618      	mov	r0, r3
 80131c0:	3710      	adds	r7, #16
 80131c2:	46bd      	mov	sp, r7
 80131c4:	bd80      	pop	{r7, pc}

080131c6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80131c6:	b580      	push	{r7, lr}
 80131c8:	b084      	sub	sp, #16
 80131ca:	af00      	add	r7, sp, #0
 80131cc:	6078      	str	r0, [r7, #4]
 80131ce:	4608      	mov	r0, r1
 80131d0:	4611      	mov	r1, r2
 80131d2:	461a      	mov	r2, r3
 80131d4:	4603      	mov	r3, r0
 80131d6:	70fb      	strb	r3, [r7, #3]
 80131d8:	460b      	mov	r3, r1
 80131da:	70bb      	strb	r3, [r7, #2]
 80131dc:	4613      	mov	r3, r2
 80131de:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80131e0:	2300      	movs	r3, #0
 80131e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80131e4:	2300      	movs	r3, #0
 80131e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80131ee:	78bb      	ldrb	r3, [r7, #2]
 80131f0:	883a      	ldrh	r2, [r7, #0]
 80131f2:	78f9      	ldrb	r1, [r7, #3]
 80131f4:	f7f7 f8c0 	bl	800a378 <HAL_PCD_EP_Open>
 80131f8:	4603      	mov	r3, r0
 80131fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80131fc:	7bfb      	ldrb	r3, [r7, #15]
 80131fe:	4618      	mov	r0, r3
 8013200:	f000 f908 	bl	8013414 <USBD_Get_USB_Status>
 8013204:	4603      	mov	r3, r0
 8013206:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8013208:	7bbb      	ldrb	r3, [r7, #14]
}
 801320a:	4618      	mov	r0, r3
 801320c:	3710      	adds	r7, #16
 801320e:	46bd      	mov	sp, r7
 8013210:	bd80      	pop	{r7, pc}

08013212 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013212:	b580      	push	{r7, lr}
 8013214:	b084      	sub	sp, #16
 8013216:	af00      	add	r7, sp, #0
 8013218:	6078      	str	r0, [r7, #4]
 801321a:	460b      	mov	r3, r1
 801321c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801321e:	2300      	movs	r3, #0
 8013220:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013222:	2300      	movs	r3, #0
 8013224:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801322c:	78fa      	ldrb	r2, [r7, #3]
 801322e:	4611      	mov	r1, r2
 8013230:	4618      	mov	r0, r3
 8013232:	f7f7 f909 	bl	800a448 <HAL_PCD_EP_Close>
 8013236:	4603      	mov	r3, r0
 8013238:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 801323a:	7bfb      	ldrb	r3, [r7, #15]
 801323c:	4618      	mov	r0, r3
 801323e:	f000 f8e9 	bl	8013414 <USBD_Get_USB_Status>
 8013242:	4603      	mov	r3, r0
 8013244:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8013246:	7bbb      	ldrb	r3, [r7, #14]
}
 8013248:	4618      	mov	r0, r3
 801324a:	3710      	adds	r7, #16
 801324c:	46bd      	mov	sp, r7
 801324e:	bd80      	pop	{r7, pc}

08013250 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013250:	b580      	push	{r7, lr}
 8013252:	b084      	sub	sp, #16
 8013254:	af00      	add	r7, sp, #0
 8013256:	6078      	str	r0, [r7, #4]
 8013258:	460b      	mov	r3, r1
 801325a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801325c:	2300      	movs	r3, #0
 801325e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013260:	2300      	movs	r3, #0
 8013262:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801326a:	78fa      	ldrb	r2, [r7, #3]
 801326c:	4611      	mov	r1, r2
 801326e:	4618      	mov	r0, r3
 8013270:	f7f7 f9e1 	bl	800a636 <HAL_PCD_EP_SetStall>
 8013274:	4603      	mov	r3, r0
 8013276:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013278:	7bfb      	ldrb	r3, [r7, #15]
 801327a:	4618      	mov	r0, r3
 801327c:	f000 f8ca 	bl	8013414 <USBD_Get_USB_Status>
 8013280:	4603      	mov	r3, r0
 8013282:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8013284:	7bbb      	ldrb	r3, [r7, #14]
}
 8013286:	4618      	mov	r0, r3
 8013288:	3710      	adds	r7, #16
 801328a:	46bd      	mov	sp, r7
 801328c:	bd80      	pop	{r7, pc}

0801328e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801328e:	b580      	push	{r7, lr}
 8013290:	b084      	sub	sp, #16
 8013292:	af00      	add	r7, sp, #0
 8013294:	6078      	str	r0, [r7, #4]
 8013296:	460b      	mov	r3, r1
 8013298:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801329a:	2300      	movs	r3, #0
 801329c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801329e:	2300      	movs	r3, #0
 80132a0:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80132a8:	78fa      	ldrb	r2, [r7, #3]
 80132aa:	4611      	mov	r1, r2
 80132ac:	4618      	mov	r0, r3
 80132ae:	f7f7 fa26 	bl	800a6fe <HAL_PCD_EP_ClrStall>
 80132b2:	4603      	mov	r3, r0
 80132b4:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 80132b6:	7bfb      	ldrb	r3, [r7, #15]
 80132b8:	4618      	mov	r0, r3
 80132ba:	f000 f8ab 	bl	8013414 <USBD_Get_USB_Status>
 80132be:	4603      	mov	r3, r0
 80132c0:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 80132c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80132c4:	4618      	mov	r0, r3
 80132c6:	3710      	adds	r7, #16
 80132c8:	46bd      	mov	sp, r7
 80132ca:	bd80      	pop	{r7, pc}

080132cc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80132cc:	b480      	push	{r7}
 80132ce:	b085      	sub	sp, #20
 80132d0:	af00      	add	r7, sp, #0
 80132d2:	6078      	str	r0, [r7, #4]
 80132d4:	460b      	mov	r3, r1
 80132d6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80132de:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80132e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	da0b      	bge.n	8013300 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80132e8:	78fb      	ldrb	r3, [r7, #3]
 80132ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80132ee:	68f9      	ldr	r1, [r7, #12]
 80132f0:	4613      	mov	r3, r2
 80132f2:	00db      	lsls	r3, r3, #3
 80132f4:	1a9b      	subs	r3, r3, r2
 80132f6:	009b      	lsls	r3, r3, #2
 80132f8:	440b      	add	r3, r1
 80132fa:	333e      	adds	r3, #62	; 0x3e
 80132fc:	781b      	ldrb	r3, [r3, #0]
 80132fe:	e00b      	b.n	8013318 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8013300:	78fb      	ldrb	r3, [r7, #3]
 8013302:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013306:	68f9      	ldr	r1, [r7, #12]
 8013308:	4613      	mov	r3, r2
 801330a:	00db      	lsls	r3, r3, #3
 801330c:	1a9b      	subs	r3, r3, r2
 801330e:	009b      	lsls	r3, r3, #2
 8013310:	440b      	add	r3, r1
 8013312:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013316:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013318:	4618      	mov	r0, r3
 801331a:	3714      	adds	r7, #20
 801331c:	46bd      	mov	sp, r7
 801331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013322:	4770      	bx	lr

08013324 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8013324:	b580      	push	{r7, lr}
 8013326:	b084      	sub	sp, #16
 8013328:	af00      	add	r7, sp, #0
 801332a:	6078      	str	r0, [r7, #4]
 801332c:	460b      	mov	r3, r1
 801332e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013330:	2300      	movs	r3, #0
 8013332:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013334:	2300      	movs	r3, #0
 8013336:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801333e:	78fa      	ldrb	r2, [r7, #3]
 8013340:	4611      	mov	r1, r2
 8013342:	4618      	mov	r0, r3
 8013344:	f7f6 fff3 	bl	800a32e <HAL_PCD_SetAddress>
 8013348:	4603      	mov	r3, r0
 801334a:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 801334c:	7bfb      	ldrb	r3, [r7, #15]
 801334e:	4618      	mov	r0, r3
 8013350:	f000 f860 	bl	8013414 <USBD_Get_USB_Status>
 8013354:	4603      	mov	r3, r0
 8013356:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8013358:	7bbb      	ldrb	r3, [r7, #14]
}
 801335a:	4618      	mov	r0, r3
 801335c:	3710      	adds	r7, #16
 801335e:	46bd      	mov	sp, r7
 8013360:	bd80      	pop	{r7, pc}

08013362 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8013362:	b580      	push	{r7, lr}
 8013364:	b086      	sub	sp, #24
 8013366:	af00      	add	r7, sp, #0
 8013368:	60f8      	str	r0, [r7, #12]
 801336a:	607a      	str	r2, [r7, #4]
 801336c:	461a      	mov	r2, r3
 801336e:	460b      	mov	r3, r1
 8013370:	72fb      	strb	r3, [r7, #11]
 8013372:	4613      	mov	r3, r2
 8013374:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013376:	2300      	movs	r3, #0
 8013378:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801337a:	2300      	movs	r3, #0
 801337c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801337e:	68fb      	ldr	r3, [r7, #12]
 8013380:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8013384:	893b      	ldrh	r3, [r7, #8]
 8013386:	7af9      	ldrb	r1, [r7, #11]
 8013388:	687a      	ldr	r2, [r7, #4]
 801338a:	f7f7 f90a 	bl	800a5a2 <HAL_PCD_EP_Transmit>
 801338e:	4603      	mov	r3, r0
 8013390:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8013392:	7dfb      	ldrb	r3, [r7, #23]
 8013394:	4618      	mov	r0, r3
 8013396:	f000 f83d 	bl	8013414 <USBD_Get_USB_Status>
 801339a:	4603      	mov	r3, r0
 801339c:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 801339e:	7dbb      	ldrb	r3, [r7, #22]
}
 80133a0:	4618      	mov	r0, r3
 80133a2:	3718      	adds	r7, #24
 80133a4:	46bd      	mov	sp, r7
 80133a6:	bd80      	pop	{r7, pc}

080133a8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80133a8:	b580      	push	{r7, lr}
 80133aa:	b086      	sub	sp, #24
 80133ac:	af00      	add	r7, sp, #0
 80133ae:	60f8      	str	r0, [r7, #12]
 80133b0:	607a      	str	r2, [r7, #4]
 80133b2:	461a      	mov	r2, r3
 80133b4:	460b      	mov	r3, r1
 80133b6:	72fb      	strb	r3, [r7, #11]
 80133b8:	4613      	mov	r3, r2
 80133ba:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80133bc:	2300      	movs	r3, #0
 80133be:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80133c0:	2300      	movs	r3, #0
 80133c2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80133c4:	68fb      	ldr	r3, [r7, #12]
 80133c6:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80133ca:	893b      	ldrh	r3, [r7, #8]
 80133cc:	7af9      	ldrb	r1, [r7, #11]
 80133ce:	687a      	ldr	r2, [r7, #4]
 80133d0:	f7f7 f884 	bl	800a4dc <HAL_PCD_EP_Receive>
 80133d4:	4603      	mov	r3, r0
 80133d6:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 80133d8:	7dfb      	ldrb	r3, [r7, #23]
 80133da:	4618      	mov	r0, r3
 80133dc:	f000 f81a 	bl	8013414 <USBD_Get_USB_Status>
 80133e0:	4603      	mov	r3, r0
 80133e2:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 80133e4:	7dbb      	ldrb	r3, [r7, #22]
}
 80133e6:	4618      	mov	r0, r3
 80133e8:	3718      	adds	r7, #24
 80133ea:	46bd      	mov	sp, r7
 80133ec:	bd80      	pop	{r7, pc}

080133ee <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80133ee:	b580      	push	{r7, lr}
 80133f0:	b082      	sub	sp, #8
 80133f2:	af00      	add	r7, sp, #0
 80133f4:	6078      	str	r0, [r7, #4]
 80133f6:	460b      	mov	r3, r1
 80133f8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8013400:	78fa      	ldrb	r2, [r7, #3]
 8013402:	4611      	mov	r1, r2
 8013404:	4618      	mov	r0, r3
 8013406:	f7f7 f8b4 	bl	800a572 <HAL_PCD_EP_GetRxCount>
 801340a:	4603      	mov	r3, r0
}
 801340c:	4618      	mov	r0, r3
 801340e:	3708      	adds	r7, #8
 8013410:	46bd      	mov	sp, r7
 8013412:	bd80      	pop	{r7, pc}

08013414 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8013414:	b480      	push	{r7}
 8013416:	b085      	sub	sp, #20
 8013418:	af00      	add	r7, sp, #0
 801341a:	4603      	mov	r3, r0
 801341c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801341e:	2300      	movs	r3, #0
 8013420:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8013422:	79fb      	ldrb	r3, [r7, #7]
 8013424:	2b03      	cmp	r3, #3
 8013426:	d817      	bhi.n	8013458 <USBD_Get_USB_Status+0x44>
 8013428:	a201      	add	r2, pc, #4	; (adr r2, 8013430 <USBD_Get_USB_Status+0x1c>)
 801342a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801342e:	bf00      	nop
 8013430:	08013441 	.word	0x08013441
 8013434:	08013447 	.word	0x08013447
 8013438:	0801344d 	.word	0x0801344d
 801343c:	08013453 	.word	0x08013453
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8013440:	2300      	movs	r3, #0
 8013442:	73fb      	strb	r3, [r7, #15]
    break;
 8013444:	e00b      	b.n	801345e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013446:	2302      	movs	r3, #2
 8013448:	73fb      	strb	r3, [r7, #15]
    break;
 801344a:	e008      	b.n	801345e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801344c:	2301      	movs	r3, #1
 801344e:	73fb      	strb	r3, [r7, #15]
    break;
 8013450:	e005      	b.n	801345e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013452:	2302      	movs	r3, #2
 8013454:	73fb      	strb	r3, [r7, #15]
    break;
 8013456:	e002      	b.n	801345e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8013458:	2302      	movs	r3, #2
 801345a:	73fb      	strb	r3, [r7, #15]
    break;
 801345c:	bf00      	nop
  }
  return usb_status;
 801345e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013460:	4618      	mov	r0, r3
 8013462:	3714      	adds	r7, #20
 8013464:	46bd      	mov	sp, r7
 8013466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801346a:	4770      	bx	lr

0801346c <__errno>:
 801346c:	4b01      	ldr	r3, [pc, #4]	; (8013474 <__errno+0x8>)
 801346e:	6818      	ldr	r0, [r3, #0]
 8013470:	4770      	bx	lr
 8013472:	bf00      	nop
 8013474:	20000e34 	.word	0x20000e34

08013478 <__libc_init_array>:
 8013478:	b570      	push	{r4, r5, r6, lr}
 801347a:	4e0d      	ldr	r6, [pc, #52]	; (80134b0 <__libc_init_array+0x38>)
 801347c:	4c0d      	ldr	r4, [pc, #52]	; (80134b4 <__libc_init_array+0x3c>)
 801347e:	1ba4      	subs	r4, r4, r6
 8013480:	10a4      	asrs	r4, r4, #2
 8013482:	2500      	movs	r5, #0
 8013484:	42a5      	cmp	r5, r4
 8013486:	d109      	bne.n	801349c <__libc_init_array+0x24>
 8013488:	4e0b      	ldr	r6, [pc, #44]	; (80134b8 <__libc_init_array+0x40>)
 801348a:	4c0c      	ldr	r4, [pc, #48]	; (80134bc <__libc_init_array+0x44>)
 801348c:	f005 fece 	bl	801922c <_init>
 8013490:	1ba4      	subs	r4, r4, r6
 8013492:	10a4      	asrs	r4, r4, #2
 8013494:	2500      	movs	r5, #0
 8013496:	42a5      	cmp	r5, r4
 8013498:	d105      	bne.n	80134a6 <__libc_init_array+0x2e>
 801349a:	bd70      	pop	{r4, r5, r6, pc}
 801349c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80134a0:	4798      	blx	r3
 80134a2:	3501      	adds	r5, #1
 80134a4:	e7ee      	b.n	8013484 <__libc_init_array+0xc>
 80134a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80134aa:	4798      	blx	r3
 80134ac:	3501      	adds	r5, #1
 80134ae:	e7f2      	b.n	8013496 <__libc_init_array+0x1e>
 80134b0:	08019c50 	.word	0x08019c50
 80134b4:	08019c50 	.word	0x08019c50
 80134b8:	08019c50 	.word	0x08019c50
 80134bc:	08019c54 	.word	0x08019c54

080134c0 <malloc>:
 80134c0:	4b02      	ldr	r3, [pc, #8]	; (80134cc <malloc+0xc>)
 80134c2:	4601      	mov	r1, r0
 80134c4:	6818      	ldr	r0, [r3, #0]
 80134c6:	f000 b885 	b.w	80135d4 <_malloc_r>
 80134ca:	bf00      	nop
 80134cc:	20000e34 	.word	0x20000e34

080134d0 <free>:
 80134d0:	4b02      	ldr	r3, [pc, #8]	; (80134dc <free+0xc>)
 80134d2:	4601      	mov	r1, r0
 80134d4:	6818      	ldr	r0, [r3, #0]
 80134d6:	f000 b82f 	b.w	8013538 <_free_r>
 80134da:	bf00      	nop
 80134dc:	20000e34 	.word	0x20000e34

080134e0 <memcpy>:
 80134e0:	b510      	push	{r4, lr}
 80134e2:	1e43      	subs	r3, r0, #1
 80134e4:	440a      	add	r2, r1
 80134e6:	4291      	cmp	r1, r2
 80134e8:	d100      	bne.n	80134ec <memcpy+0xc>
 80134ea:	bd10      	pop	{r4, pc}
 80134ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80134f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80134f4:	e7f7      	b.n	80134e6 <memcpy+0x6>

080134f6 <memmove>:
 80134f6:	4288      	cmp	r0, r1
 80134f8:	b510      	push	{r4, lr}
 80134fa:	eb01 0302 	add.w	r3, r1, r2
 80134fe:	d807      	bhi.n	8013510 <memmove+0x1a>
 8013500:	1e42      	subs	r2, r0, #1
 8013502:	4299      	cmp	r1, r3
 8013504:	d00a      	beq.n	801351c <memmove+0x26>
 8013506:	f811 4b01 	ldrb.w	r4, [r1], #1
 801350a:	f802 4f01 	strb.w	r4, [r2, #1]!
 801350e:	e7f8      	b.n	8013502 <memmove+0xc>
 8013510:	4283      	cmp	r3, r0
 8013512:	d9f5      	bls.n	8013500 <memmove+0xa>
 8013514:	1881      	adds	r1, r0, r2
 8013516:	1ad2      	subs	r2, r2, r3
 8013518:	42d3      	cmn	r3, r2
 801351a:	d100      	bne.n	801351e <memmove+0x28>
 801351c:	bd10      	pop	{r4, pc}
 801351e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013522:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8013526:	e7f7      	b.n	8013518 <memmove+0x22>

08013528 <memset>:
 8013528:	4402      	add	r2, r0
 801352a:	4603      	mov	r3, r0
 801352c:	4293      	cmp	r3, r2
 801352e:	d100      	bne.n	8013532 <memset+0xa>
 8013530:	4770      	bx	lr
 8013532:	f803 1b01 	strb.w	r1, [r3], #1
 8013536:	e7f9      	b.n	801352c <memset+0x4>

08013538 <_free_r>:
 8013538:	b538      	push	{r3, r4, r5, lr}
 801353a:	4605      	mov	r5, r0
 801353c:	2900      	cmp	r1, #0
 801353e:	d045      	beq.n	80135cc <_free_r+0x94>
 8013540:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013544:	1f0c      	subs	r4, r1, #4
 8013546:	2b00      	cmp	r3, #0
 8013548:	bfb8      	it	lt
 801354a:	18e4      	addlt	r4, r4, r3
 801354c:	f002 ffce 	bl	80164ec <__malloc_lock>
 8013550:	4a1f      	ldr	r2, [pc, #124]	; (80135d0 <_free_r+0x98>)
 8013552:	6813      	ldr	r3, [r2, #0]
 8013554:	4610      	mov	r0, r2
 8013556:	b933      	cbnz	r3, 8013566 <_free_r+0x2e>
 8013558:	6063      	str	r3, [r4, #4]
 801355a:	6014      	str	r4, [r2, #0]
 801355c:	4628      	mov	r0, r5
 801355e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013562:	f002 bfc4 	b.w	80164ee <__malloc_unlock>
 8013566:	42a3      	cmp	r3, r4
 8013568:	d90c      	bls.n	8013584 <_free_r+0x4c>
 801356a:	6821      	ldr	r1, [r4, #0]
 801356c:	1862      	adds	r2, r4, r1
 801356e:	4293      	cmp	r3, r2
 8013570:	bf04      	itt	eq
 8013572:	681a      	ldreq	r2, [r3, #0]
 8013574:	685b      	ldreq	r3, [r3, #4]
 8013576:	6063      	str	r3, [r4, #4]
 8013578:	bf04      	itt	eq
 801357a:	1852      	addeq	r2, r2, r1
 801357c:	6022      	streq	r2, [r4, #0]
 801357e:	6004      	str	r4, [r0, #0]
 8013580:	e7ec      	b.n	801355c <_free_r+0x24>
 8013582:	4613      	mov	r3, r2
 8013584:	685a      	ldr	r2, [r3, #4]
 8013586:	b10a      	cbz	r2, 801358c <_free_r+0x54>
 8013588:	42a2      	cmp	r2, r4
 801358a:	d9fa      	bls.n	8013582 <_free_r+0x4a>
 801358c:	6819      	ldr	r1, [r3, #0]
 801358e:	1858      	adds	r0, r3, r1
 8013590:	42a0      	cmp	r0, r4
 8013592:	d10b      	bne.n	80135ac <_free_r+0x74>
 8013594:	6820      	ldr	r0, [r4, #0]
 8013596:	4401      	add	r1, r0
 8013598:	1858      	adds	r0, r3, r1
 801359a:	4282      	cmp	r2, r0
 801359c:	6019      	str	r1, [r3, #0]
 801359e:	d1dd      	bne.n	801355c <_free_r+0x24>
 80135a0:	6810      	ldr	r0, [r2, #0]
 80135a2:	6852      	ldr	r2, [r2, #4]
 80135a4:	605a      	str	r2, [r3, #4]
 80135a6:	4401      	add	r1, r0
 80135a8:	6019      	str	r1, [r3, #0]
 80135aa:	e7d7      	b.n	801355c <_free_r+0x24>
 80135ac:	d902      	bls.n	80135b4 <_free_r+0x7c>
 80135ae:	230c      	movs	r3, #12
 80135b0:	602b      	str	r3, [r5, #0]
 80135b2:	e7d3      	b.n	801355c <_free_r+0x24>
 80135b4:	6820      	ldr	r0, [r4, #0]
 80135b6:	1821      	adds	r1, r4, r0
 80135b8:	428a      	cmp	r2, r1
 80135ba:	bf04      	itt	eq
 80135bc:	6811      	ldreq	r1, [r2, #0]
 80135be:	6852      	ldreq	r2, [r2, #4]
 80135c0:	6062      	str	r2, [r4, #4]
 80135c2:	bf04      	itt	eq
 80135c4:	1809      	addeq	r1, r1, r0
 80135c6:	6021      	streq	r1, [r4, #0]
 80135c8:	605c      	str	r4, [r3, #4]
 80135ca:	e7c7      	b.n	801355c <_free_r+0x24>
 80135cc:	bd38      	pop	{r3, r4, r5, pc}
 80135ce:	bf00      	nop
 80135d0:	200051d4 	.word	0x200051d4

080135d4 <_malloc_r>:
 80135d4:	b570      	push	{r4, r5, r6, lr}
 80135d6:	1ccd      	adds	r5, r1, #3
 80135d8:	f025 0503 	bic.w	r5, r5, #3
 80135dc:	3508      	adds	r5, #8
 80135de:	2d0c      	cmp	r5, #12
 80135e0:	bf38      	it	cc
 80135e2:	250c      	movcc	r5, #12
 80135e4:	2d00      	cmp	r5, #0
 80135e6:	4606      	mov	r6, r0
 80135e8:	db01      	blt.n	80135ee <_malloc_r+0x1a>
 80135ea:	42a9      	cmp	r1, r5
 80135ec:	d903      	bls.n	80135f6 <_malloc_r+0x22>
 80135ee:	230c      	movs	r3, #12
 80135f0:	6033      	str	r3, [r6, #0]
 80135f2:	2000      	movs	r0, #0
 80135f4:	bd70      	pop	{r4, r5, r6, pc}
 80135f6:	f002 ff79 	bl	80164ec <__malloc_lock>
 80135fa:	4a21      	ldr	r2, [pc, #132]	; (8013680 <_malloc_r+0xac>)
 80135fc:	6814      	ldr	r4, [r2, #0]
 80135fe:	4621      	mov	r1, r4
 8013600:	b991      	cbnz	r1, 8013628 <_malloc_r+0x54>
 8013602:	4c20      	ldr	r4, [pc, #128]	; (8013684 <_malloc_r+0xb0>)
 8013604:	6823      	ldr	r3, [r4, #0]
 8013606:	b91b      	cbnz	r3, 8013610 <_malloc_r+0x3c>
 8013608:	4630      	mov	r0, r6
 801360a:	f000 fe7b 	bl	8014304 <_sbrk_r>
 801360e:	6020      	str	r0, [r4, #0]
 8013610:	4629      	mov	r1, r5
 8013612:	4630      	mov	r0, r6
 8013614:	f000 fe76 	bl	8014304 <_sbrk_r>
 8013618:	1c43      	adds	r3, r0, #1
 801361a:	d124      	bne.n	8013666 <_malloc_r+0x92>
 801361c:	230c      	movs	r3, #12
 801361e:	6033      	str	r3, [r6, #0]
 8013620:	4630      	mov	r0, r6
 8013622:	f002 ff64 	bl	80164ee <__malloc_unlock>
 8013626:	e7e4      	b.n	80135f2 <_malloc_r+0x1e>
 8013628:	680b      	ldr	r3, [r1, #0]
 801362a:	1b5b      	subs	r3, r3, r5
 801362c:	d418      	bmi.n	8013660 <_malloc_r+0x8c>
 801362e:	2b0b      	cmp	r3, #11
 8013630:	d90f      	bls.n	8013652 <_malloc_r+0x7e>
 8013632:	600b      	str	r3, [r1, #0]
 8013634:	50cd      	str	r5, [r1, r3]
 8013636:	18cc      	adds	r4, r1, r3
 8013638:	4630      	mov	r0, r6
 801363a:	f002 ff58 	bl	80164ee <__malloc_unlock>
 801363e:	f104 000b 	add.w	r0, r4, #11
 8013642:	1d23      	adds	r3, r4, #4
 8013644:	f020 0007 	bic.w	r0, r0, #7
 8013648:	1ac3      	subs	r3, r0, r3
 801364a:	d0d3      	beq.n	80135f4 <_malloc_r+0x20>
 801364c:	425a      	negs	r2, r3
 801364e:	50e2      	str	r2, [r4, r3]
 8013650:	e7d0      	b.n	80135f4 <_malloc_r+0x20>
 8013652:	428c      	cmp	r4, r1
 8013654:	684b      	ldr	r3, [r1, #4]
 8013656:	bf16      	itet	ne
 8013658:	6063      	strne	r3, [r4, #4]
 801365a:	6013      	streq	r3, [r2, #0]
 801365c:	460c      	movne	r4, r1
 801365e:	e7eb      	b.n	8013638 <_malloc_r+0x64>
 8013660:	460c      	mov	r4, r1
 8013662:	6849      	ldr	r1, [r1, #4]
 8013664:	e7cc      	b.n	8013600 <_malloc_r+0x2c>
 8013666:	1cc4      	adds	r4, r0, #3
 8013668:	f024 0403 	bic.w	r4, r4, #3
 801366c:	42a0      	cmp	r0, r4
 801366e:	d005      	beq.n	801367c <_malloc_r+0xa8>
 8013670:	1a21      	subs	r1, r4, r0
 8013672:	4630      	mov	r0, r6
 8013674:	f000 fe46 	bl	8014304 <_sbrk_r>
 8013678:	3001      	adds	r0, #1
 801367a:	d0cf      	beq.n	801361c <_malloc_r+0x48>
 801367c:	6025      	str	r5, [r4, #0]
 801367e:	e7db      	b.n	8013638 <_malloc_r+0x64>
 8013680:	200051d4 	.word	0x200051d4
 8013684:	200051d8 	.word	0x200051d8

08013688 <__cvt>:
 8013688:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801368c:	ec55 4b10 	vmov	r4, r5, d0
 8013690:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8013692:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8013696:	2d00      	cmp	r5, #0
 8013698:	460e      	mov	r6, r1
 801369a:	4691      	mov	r9, r2
 801369c:	4619      	mov	r1, r3
 801369e:	bfb8      	it	lt
 80136a0:	4622      	movlt	r2, r4
 80136a2:	462b      	mov	r3, r5
 80136a4:	f027 0720 	bic.w	r7, r7, #32
 80136a8:	bfbb      	ittet	lt
 80136aa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80136ae:	461d      	movlt	r5, r3
 80136b0:	2300      	movge	r3, #0
 80136b2:	232d      	movlt	r3, #45	; 0x2d
 80136b4:	bfb8      	it	lt
 80136b6:	4614      	movlt	r4, r2
 80136b8:	2f46      	cmp	r7, #70	; 0x46
 80136ba:	700b      	strb	r3, [r1, #0]
 80136bc:	d004      	beq.n	80136c8 <__cvt+0x40>
 80136be:	2f45      	cmp	r7, #69	; 0x45
 80136c0:	d100      	bne.n	80136c4 <__cvt+0x3c>
 80136c2:	3601      	adds	r6, #1
 80136c4:	2102      	movs	r1, #2
 80136c6:	e000      	b.n	80136ca <__cvt+0x42>
 80136c8:	2103      	movs	r1, #3
 80136ca:	ab03      	add	r3, sp, #12
 80136cc:	9301      	str	r3, [sp, #4]
 80136ce:	ab02      	add	r3, sp, #8
 80136d0:	9300      	str	r3, [sp, #0]
 80136d2:	4632      	mov	r2, r6
 80136d4:	4653      	mov	r3, sl
 80136d6:	ec45 4b10 	vmov	d0, r4, r5
 80136da:	f001 fdf5 	bl	80152c8 <_dtoa_r>
 80136de:	2f47      	cmp	r7, #71	; 0x47
 80136e0:	4680      	mov	r8, r0
 80136e2:	d102      	bne.n	80136ea <__cvt+0x62>
 80136e4:	f019 0f01 	tst.w	r9, #1
 80136e8:	d026      	beq.n	8013738 <__cvt+0xb0>
 80136ea:	2f46      	cmp	r7, #70	; 0x46
 80136ec:	eb08 0906 	add.w	r9, r8, r6
 80136f0:	d111      	bne.n	8013716 <__cvt+0x8e>
 80136f2:	f898 3000 	ldrb.w	r3, [r8]
 80136f6:	2b30      	cmp	r3, #48	; 0x30
 80136f8:	d10a      	bne.n	8013710 <__cvt+0x88>
 80136fa:	2200      	movs	r2, #0
 80136fc:	2300      	movs	r3, #0
 80136fe:	4620      	mov	r0, r4
 8013700:	4629      	mov	r1, r5
 8013702:	f7ed f9f1 	bl	8000ae8 <__aeabi_dcmpeq>
 8013706:	b918      	cbnz	r0, 8013710 <__cvt+0x88>
 8013708:	f1c6 0601 	rsb	r6, r6, #1
 801370c:	f8ca 6000 	str.w	r6, [sl]
 8013710:	f8da 3000 	ldr.w	r3, [sl]
 8013714:	4499      	add	r9, r3
 8013716:	2200      	movs	r2, #0
 8013718:	2300      	movs	r3, #0
 801371a:	4620      	mov	r0, r4
 801371c:	4629      	mov	r1, r5
 801371e:	f7ed f9e3 	bl	8000ae8 <__aeabi_dcmpeq>
 8013722:	b938      	cbnz	r0, 8013734 <__cvt+0xac>
 8013724:	2230      	movs	r2, #48	; 0x30
 8013726:	9b03      	ldr	r3, [sp, #12]
 8013728:	454b      	cmp	r3, r9
 801372a:	d205      	bcs.n	8013738 <__cvt+0xb0>
 801372c:	1c59      	adds	r1, r3, #1
 801372e:	9103      	str	r1, [sp, #12]
 8013730:	701a      	strb	r2, [r3, #0]
 8013732:	e7f8      	b.n	8013726 <__cvt+0x9e>
 8013734:	f8cd 900c 	str.w	r9, [sp, #12]
 8013738:	9b03      	ldr	r3, [sp, #12]
 801373a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801373c:	eba3 0308 	sub.w	r3, r3, r8
 8013740:	4640      	mov	r0, r8
 8013742:	6013      	str	r3, [r2, #0]
 8013744:	b004      	add	sp, #16
 8013746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801374a <__exponent>:
 801374a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801374c:	2900      	cmp	r1, #0
 801374e:	4604      	mov	r4, r0
 8013750:	bfba      	itte	lt
 8013752:	4249      	neglt	r1, r1
 8013754:	232d      	movlt	r3, #45	; 0x2d
 8013756:	232b      	movge	r3, #43	; 0x2b
 8013758:	2909      	cmp	r1, #9
 801375a:	f804 2b02 	strb.w	r2, [r4], #2
 801375e:	7043      	strb	r3, [r0, #1]
 8013760:	dd20      	ble.n	80137a4 <__exponent+0x5a>
 8013762:	f10d 0307 	add.w	r3, sp, #7
 8013766:	461f      	mov	r7, r3
 8013768:	260a      	movs	r6, #10
 801376a:	fb91 f5f6 	sdiv	r5, r1, r6
 801376e:	fb06 1115 	mls	r1, r6, r5, r1
 8013772:	3130      	adds	r1, #48	; 0x30
 8013774:	2d09      	cmp	r5, #9
 8013776:	f803 1c01 	strb.w	r1, [r3, #-1]
 801377a:	f103 32ff 	add.w	r2, r3, #4294967295
 801377e:	4629      	mov	r1, r5
 8013780:	dc09      	bgt.n	8013796 <__exponent+0x4c>
 8013782:	3130      	adds	r1, #48	; 0x30
 8013784:	3b02      	subs	r3, #2
 8013786:	f802 1c01 	strb.w	r1, [r2, #-1]
 801378a:	42bb      	cmp	r3, r7
 801378c:	4622      	mov	r2, r4
 801378e:	d304      	bcc.n	801379a <__exponent+0x50>
 8013790:	1a10      	subs	r0, r2, r0
 8013792:	b003      	add	sp, #12
 8013794:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013796:	4613      	mov	r3, r2
 8013798:	e7e7      	b.n	801376a <__exponent+0x20>
 801379a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801379e:	f804 2b01 	strb.w	r2, [r4], #1
 80137a2:	e7f2      	b.n	801378a <__exponent+0x40>
 80137a4:	2330      	movs	r3, #48	; 0x30
 80137a6:	4419      	add	r1, r3
 80137a8:	7083      	strb	r3, [r0, #2]
 80137aa:	1d02      	adds	r2, r0, #4
 80137ac:	70c1      	strb	r1, [r0, #3]
 80137ae:	e7ef      	b.n	8013790 <__exponent+0x46>

080137b0 <_printf_float>:
 80137b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137b4:	b08d      	sub	sp, #52	; 0x34
 80137b6:	460c      	mov	r4, r1
 80137b8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80137bc:	4616      	mov	r6, r2
 80137be:	461f      	mov	r7, r3
 80137c0:	4605      	mov	r5, r0
 80137c2:	f002 fe73 	bl	80164ac <_localeconv_r>
 80137c6:	6803      	ldr	r3, [r0, #0]
 80137c8:	9304      	str	r3, [sp, #16]
 80137ca:	4618      	mov	r0, r3
 80137cc:	f7ec fd0a 	bl	80001e4 <strlen>
 80137d0:	2300      	movs	r3, #0
 80137d2:	930a      	str	r3, [sp, #40]	; 0x28
 80137d4:	f8d8 3000 	ldr.w	r3, [r8]
 80137d8:	9005      	str	r0, [sp, #20]
 80137da:	3307      	adds	r3, #7
 80137dc:	f023 0307 	bic.w	r3, r3, #7
 80137e0:	f103 0208 	add.w	r2, r3, #8
 80137e4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80137e8:	f8d4 b000 	ldr.w	fp, [r4]
 80137ec:	f8c8 2000 	str.w	r2, [r8]
 80137f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137f4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80137f8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80137fc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013800:	9307      	str	r3, [sp, #28]
 8013802:	f8cd 8018 	str.w	r8, [sp, #24]
 8013806:	f04f 32ff 	mov.w	r2, #4294967295
 801380a:	4ba7      	ldr	r3, [pc, #668]	; (8013aa8 <_printf_float+0x2f8>)
 801380c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013810:	f7ed f99c 	bl	8000b4c <__aeabi_dcmpun>
 8013814:	bb70      	cbnz	r0, 8013874 <_printf_float+0xc4>
 8013816:	f04f 32ff 	mov.w	r2, #4294967295
 801381a:	4ba3      	ldr	r3, [pc, #652]	; (8013aa8 <_printf_float+0x2f8>)
 801381c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013820:	f7ed f976 	bl	8000b10 <__aeabi_dcmple>
 8013824:	bb30      	cbnz	r0, 8013874 <_printf_float+0xc4>
 8013826:	2200      	movs	r2, #0
 8013828:	2300      	movs	r3, #0
 801382a:	4640      	mov	r0, r8
 801382c:	4649      	mov	r1, r9
 801382e:	f7ed f965 	bl	8000afc <__aeabi_dcmplt>
 8013832:	b110      	cbz	r0, 801383a <_printf_float+0x8a>
 8013834:	232d      	movs	r3, #45	; 0x2d
 8013836:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801383a:	4a9c      	ldr	r2, [pc, #624]	; (8013aac <_printf_float+0x2fc>)
 801383c:	4b9c      	ldr	r3, [pc, #624]	; (8013ab0 <_printf_float+0x300>)
 801383e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8013842:	bf8c      	ite	hi
 8013844:	4690      	movhi	r8, r2
 8013846:	4698      	movls	r8, r3
 8013848:	2303      	movs	r3, #3
 801384a:	f02b 0204 	bic.w	r2, fp, #4
 801384e:	6123      	str	r3, [r4, #16]
 8013850:	6022      	str	r2, [r4, #0]
 8013852:	f04f 0900 	mov.w	r9, #0
 8013856:	9700      	str	r7, [sp, #0]
 8013858:	4633      	mov	r3, r6
 801385a:	aa0b      	add	r2, sp, #44	; 0x2c
 801385c:	4621      	mov	r1, r4
 801385e:	4628      	mov	r0, r5
 8013860:	f000 f9e6 	bl	8013c30 <_printf_common>
 8013864:	3001      	adds	r0, #1
 8013866:	f040 808d 	bne.w	8013984 <_printf_float+0x1d4>
 801386a:	f04f 30ff 	mov.w	r0, #4294967295
 801386e:	b00d      	add	sp, #52	; 0x34
 8013870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013874:	4642      	mov	r2, r8
 8013876:	464b      	mov	r3, r9
 8013878:	4640      	mov	r0, r8
 801387a:	4649      	mov	r1, r9
 801387c:	f7ed f966 	bl	8000b4c <__aeabi_dcmpun>
 8013880:	b110      	cbz	r0, 8013888 <_printf_float+0xd8>
 8013882:	4a8c      	ldr	r2, [pc, #560]	; (8013ab4 <_printf_float+0x304>)
 8013884:	4b8c      	ldr	r3, [pc, #560]	; (8013ab8 <_printf_float+0x308>)
 8013886:	e7da      	b.n	801383e <_printf_float+0x8e>
 8013888:	6861      	ldr	r1, [r4, #4]
 801388a:	1c4b      	adds	r3, r1, #1
 801388c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8013890:	a80a      	add	r0, sp, #40	; 0x28
 8013892:	d13e      	bne.n	8013912 <_printf_float+0x162>
 8013894:	2306      	movs	r3, #6
 8013896:	6063      	str	r3, [r4, #4]
 8013898:	2300      	movs	r3, #0
 801389a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801389e:	ab09      	add	r3, sp, #36	; 0x24
 80138a0:	9300      	str	r3, [sp, #0]
 80138a2:	ec49 8b10 	vmov	d0, r8, r9
 80138a6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80138aa:	6022      	str	r2, [r4, #0]
 80138ac:	f8cd a004 	str.w	sl, [sp, #4]
 80138b0:	6861      	ldr	r1, [r4, #4]
 80138b2:	4628      	mov	r0, r5
 80138b4:	f7ff fee8 	bl	8013688 <__cvt>
 80138b8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80138bc:	2b47      	cmp	r3, #71	; 0x47
 80138be:	4680      	mov	r8, r0
 80138c0:	d109      	bne.n	80138d6 <_printf_float+0x126>
 80138c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80138c4:	1cd8      	adds	r0, r3, #3
 80138c6:	db02      	blt.n	80138ce <_printf_float+0x11e>
 80138c8:	6862      	ldr	r2, [r4, #4]
 80138ca:	4293      	cmp	r3, r2
 80138cc:	dd47      	ble.n	801395e <_printf_float+0x1ae>
 80138ce:	f1aa 0a02 	sub.w	sl, sl, #2
 80138d2:	fa5f fa8a 	uxtb.w	sl, sl
 80138d6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80138da:	9909      	ldr	r1, [sp, #36]	; 0x24
 80138dc:	d824      	bhi.n	8013928 <_printf_float+0x178>
 80138de:	3901      	subs	r1, #1
 80138e0:	4652      	mov	r2, sl
 80138e2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80138e6:	9109      	str	r1, [sp, #36]	; 0x24
 80138e8:	f7ff ff2f 	bl	801374a <__exponent>
 80138ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80138ee:	1813      	adds	r3, r2, r0
 80138f0:	2a01      	cmp	r2, #1
 80138f2:	4681      	mov	r9, r0
 80138f4:	6123      	str	r3, [r4, #16]
 80138f6:	dc02      	bgt.n	80138fe <_printf_float+0x14e>
 80138f8:	6822      	ldr	r2, [r4, #0]
 80138fa:	07d1      	lsls	r1, r2, #31
 80138fc:	d501      	bpl.n	8013902 <_printf_float+0x152>
 80138fe:	3301      	adds	r3, #1
 8013900:	6123      	str	r3, [r4, #16]
 8013902:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8013906:	2b00      	cmp	r3, #0
 8013908:	d0a5      	beq.n	8013856 <_printf_float+0xa6>
 801390a:	232d      	movs	r3, #45	; 0x2d
 801390c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013910:	e7a1      	b.n	8013856 <_printf_float+0xa6>
 8013912:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8013916:	f000 8177 	beq.w	8013c08 <_printf_float+0x458>
 801391a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801391e:	d1bb      	bne.n	8013898 <_printf_float+0xe8>
 8013920:	2900      	cmp	r1, #0
 8013922:	d1b9      	bne.n	8013898 <_printf_float+0xe8>
 8013924:	2301      	movs	r3, #1
 8013926:	e7b6      	b.n	8013896 <_printf_float+0xe6>
 8013928:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 801392c:	d119      	bne.n	8013962 <_printf_float+0x1b2>
 801392e:	2900      	cmp	r1, #0
 8013930:	6863      	ldr	r3, [r4, #4]
 8013932:	dd0c      	ble.n	801394e <_printf_float+0x19e>
 8013934:	6121      	str	r1, [r4, #16]
 8013936:	b913      	cbnz	r3, 801393e <_printf_float+0x18e>
 8013938:	6822      	ldr	r2, [r4, #0]
 801393a:	07d2      	lsls	r2, r2, #31
 801393c:	d502      	bpl.n	8013944 <_printf_float+0x194>
 801393e:	3301      	adds	r3, #1
 8013940:	440b      	add	r3, r1
 8013942:	6123      	str	r3, [r4, #16]
 8013944:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013946:	65a3      	str	r3, [r4, #88]	; 0x58
 8013948:	f04f 0900 	mov.w	r9, #0
 801394c:	e7d9      	b.n	8013902 <_printf_float+0x152>
 801394e:	b913      	cbnz	r3, 8013956 <_printf_float+0x1a6>
 8013950:	6822      	ldr	r2, [r4, #0]
 8013952:	07d0      	lsls	r0, r2, #31
 8013954:	d501      	bpl.n	801395a <_printf_float+0x1aa>
 8013956:	3302      	adds	r3, #2
 8013958:	e7f3      	b.n	8013942 <_printf_float+0x192>
 801395a:	2301      	movs	r3, #1
 801395c:	e7f1      	b.n	8013942 <_printf_float+0x192>
 801395e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8013962:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8013966:	4293      	cmp	r3, r2
 8013968:	db05      	blt.n	8013976 <_printf_float+0x1c6>
 801396a:	6822      	ldr	r2, [r4, #0]
 801396c:	6123      	str	r3, [r4, #16]
 801396e:	07d1      	lsls	r1, r2, #31
 8013970:	d5e8      	bpl.n	8013944 <_printf_float+0x194>
 8013972:	3301      	adds	r3, #1
 8013974:	e7e5      	b.n	8013942 <_printf_float+0x192>
 8013976:	2b00      	cmp	r3, #0
 8013978:	bfd4      	ite	le
 801397a:	f1c3 0302 	rsble	r3, r3, #2
 801397e:	2301      	movgt	r3, #1
 8013980:	4413      	add	r3, r2
 8013982:	e7de      	b.n	8013942 <_printf_float+0x192>
 8013984:	6823      	ldr	r3, [r4, #0]
 8013986:	055a      	lsls	r2, r3, #21
 8013988:	d407      	bmi.n	801399a <_printf_float+0x1ea>
 801398a:	6923      	ldr	r3, [r4, #16]
 801398c:	4642      	mov	r2, r8
 801398e:	4631      	mov	r1, r6
 8013990:	4628      	mov	r0, r5
 8013992:	47b8      	blx	r7
 8013994:	3001      	adds	r0, #1
 8013996:	d12b      	bne.n	80139f0 <_printf_float+0x240>
 8013998:	e767      	b.n	801386a <_printf_float+0xba>
 801399a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801399e:	f240 80dc 	bls.w	8013b5a <_printf_float+0x3aa>
 80139a2:	2200      	movs	r2, #0
 80139a4:	2300      	movs	r3, #0
 80139a6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80139aa:	f7ed f89d 	bl	8000ae8 <__aeabi_dcmpeq>
 80139ae:	2800      	cmp	r0, #0
 80139b0:	d033      	beq.n	8013a1a <_printf_float+0x26a>
 80139b2:	2301      	movs	r3, #1
 80139b4:	4a41      	ldr	r2, [pc, #260]	; (8013abc <_printf_float+0x30c>)
 80139b6:	4631      	mov	r1, r6
 80139b8:	4628      	mov	r0, r5
 80139ba:	47b8      	blx	r7
 80139bc:	3001      	adds	r0, #1
 80139be:	f43f af54 	beq.w	801386a <_printf_float+0xba>
 80139c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80139c6:	429a      	cmp	r2, r3
 80139c8:	db02      	blt.n	80139d0 <_printf_float+0x220>
 80139ca:	6823      	ldr	r3, [r4, #0]
 80139cc:	07d8      	lsls	r0, r3, #31
 80139ce:	d50f      	bpl.n	80139f0 <_printf_float+0x240>
 80139d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80139d4:	4631      	mov	r1, r6
 80139d6:	4628      	mov	r0, r5
 80139d8:	47b8      	blx	r7
 80139da:	3001      	adds	r0, #1
 80139dc:	f43f af45 	beq.w	801386a <_printf_float+0xba>
 80139e0:	f04f 0800 	mov.w	r8, #0
 80139e4:	f104 091a 	add.w	r9, r4, #26
 80139e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80139ea:	3b01      	subs	r3, #1
 80139ec:	4543      	cmp	r3, r8
 80139ee:	dc09      	bgt.n	8013a04 <_printf_float+0x254>
 80139f0:	6823      	ldr	r3, [r4, #0]
 80139f2:	079b      	lsls	r3, r3, #30
 80139f4:	f100 8103 	bmi.w	8013bfe <_printf_float+0x44e>
 80139f8:	68e0      	ldr	r0, [r4, #12]
 80139fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80139fc:	4298      	cmp	r0, r3
 80139fe:	bfb8      	it	lt
 8013a00:	4618      	movlt	r0, r3
 8013a02:	e734      	b.n	801386e <_printf_float+0xbe>
 8013a04:	2301      	movs	r3, #1
 8013a06:	464a      	mov	r2, r9
 8013a08:	4631      	mov	r1, r6
 8013a0a:	4628      	mov	r0, r5
 8013a0c:	47b8      	blx	r7
 8013a0e:	3001      	adds	r0, #1
 8013a10:	f43f af2b 	beq.w	801386a <_printf_float+0xba>
 8013a14:	f108 0801 	add.w	r8, r8, #1
 8013a18:	e7e6      	b.n	80139e8 <_printf_float+0x238>
 8013a1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a1c:	2b00      	cmp	r3, #0
 8013a1e:	dc2b      	bgt.n	8013a78 <_printf_float+0x2c8>
 8013a20:	2301      	movs	r3, #1
 8013a22:	4a26      	ldr	r2, [pc, #152]	; (8013abc <_printf_float+0x30c>)
 8013a24:	4631      	mov	r1, r6
 8013a26:	4628      	mov	r0, r5
 8013a28:	47b8      	blx	r7
 8013a2a:	3001      	adds	r0, #1
 8013a2c:	f43f af1d 	beq.w	801386a <_printf_float+0xba>
 8013a30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a32:	b923      	cbnz	r3, 8013a3e <_printf_float+0x28e>
 8013a34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013a36:	b913      	cbnz	r3, 8013a3e <_printf_float+0x28e>
 8013a38:	6823      	ldr	r3, [r4, #0]
 8013a3a:	07d9      	lsls	r1, r3, #31
 8013a3c:	d5d8      	bpl.n	80139f0 <_printf_float+0x240>
 8013a3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013a42:	4631      	mov	r1, r6
 8013a44:	4628      	mov	r0, r5
 8013a46:	47b8      	blx	r7
 8013a48:	3001      	adds	r0, #1
 8013a4a:	f43f af0e 	beq.w	801386a <_printf_float+0xba>
 8013a4e:	f04f 0900 	mov.w	r9, #0
 8013a52:	f104 0a1a 	add.w	sl, r4, #26
 8013a56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a58:	425b      	negs	r3, r3
 8013a5a:	454b      	cmp	r3, r9
 8013a5c:	dc01      	bgt.n	8013a62 <_printf_float+0x2b2>
 8013a5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013a60:	e794      	b.n	801398c <_printf_float+0x1dc>
 8013a62:	2301      	movs	r3, #1
 8013a64:	4652      	mov	r2, sl
 8013a66:	4631      	mov	r1, r6
 8013a68:	4628      	mov	r0, r5
 8013a6a:	47b8      	blx	r7
 8013a6c:	3001      	adds	r0, #1
 8013a6e:	f43f aefc 	beq.w	801386a <_printf_float+0xba>
 8013a72:	f109 0901 	add.w	r9, r9, #1
 8013a76:	e7ee      	b.n	8013a56 <_printf_float+0x2a6>
 8013a78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013a7a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013a7c:	429a      	cmp	r2, r3
 8013a7e:	bfa8      	it	ge
 8013a80:	461a      	movge	r2, r3
 8013a82:	2a00      	cmp	r2, #0
 8013a84:	4691      	mov	r9, r2
 8013a86:	dd07      	ble.n	8013a98 <_printf_float+0x2e8>
 8013a88:	4613      	mov	r3, r2
 8013a8a:	4631      	mov	r1, r6
 8013a8c:	4642      	mov	r2, r8
 8013a8e:	4628      	mov	r0, r5
 8013a90:	47b8      	blx	r7
 8013a92:	3001      	adds	r0, #1
 8013a94:	f43f aee9 	beq.w	801386a <_printf_float+0xba>
 8013a98:	f104 031a 	add.w	r3, r4, #26
 8013a9c:	f04f 0b00 	mov.w	fp, #0
 8013aa0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013aa4:	9306      	str	r3, [sp, #24]
 8013aa6:	e015      	b.n	8013ad4 <_printf_float+0x324>
 8013aa8:	7fefffff 	.word	0x7fefffff
 8013aac:	080196fc 	.word	0x080196fc
 8013ab0:	080196f8 	.word	0x080196f8
 8013ab4:	08019704 	.word	0x08019704
 8013ab8:	08019700 	.word	0x08019700
 8013abc:	080198bb 	.word	0x080198bb
 8013ac0:	2301      	movs	r3, #1
 8013ac2:	9a06      	ldr	r2, [sp, #24]
 8013ac4:	4631      	mov	r1, r6
 8013ac6:	4628      	mov	r0, r5
 8013ac8:	47b8      	blx	r7
 8013aca:	3001      	adds	r0, #1
 8013acc:	f43f aecd 	beq.w	801386a <_printf_float+0xba>
 8013ad0:	f10b 0b01 	add.w	fp, fp, #1
 8013ad4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8013ad8:	ebaa 0309 	sub.w	r3, sl, r9
 8013adc:	455b      	cmp	r3, fp
 8013ade:	dcef      	bgt.n	8013ac0 <_printf_float+0x310>
 8013ae0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013ae4:	429a      	cmp	r2, r3
 8013ae6:	44d0      	add	r8, sl
 8013ae8:	db15      	blt.n	8013b16 <_printf_float+0x366>
 8013aea:	6823      	ldr	r3, [r4, #0]
 8013aec:	07da      	lsls	r2, r3, #31
 8013aee:	d412      	bmi.n	8013b16 <_printf_float+0x366>
 8013af0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013af2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013af4:	eba3 020a 	sub.w	r2, r3, sl
 8013af8:	eba3 0a01 	sub.w	sl, r3, r1
 8013afc:	4592      	cmp	sl, r2
 8013afe:	bfa8      	it	ge
 8013b00:	4692      	movge	sl, r2
 8013b02:	f1ba 0f00 	cmp.w	sl, #0
 8013b06:	dc0e      	bgt.n	8013b26 <_printf_float+0x376>
 8013b08:	f04f 0800 	mov.w	r8, #0
 8013b0c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013b10:	f104 091a 	add.w	r9, r4, #26
 8013b14:	e019      	b.n	8013b4a <_printf_float+0x39a>
 8013b16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013b1a:	4631      	mov	r1, r6
 8013b1c:	4628      	mov	r0, r5
 8013b1e:	47b8      	blx	r7
 8013b20:	3001      	adds	r0, #1
 8013b22:	d1e5      	bne.n	8013af0 <_printf_float+0x340>
 8013b24:	e6a1      	b.n	801386a <_printf_float+0xba>
 8013b26:	4653      	mov	r3, sl
 8013b28:	4642      	mov	r2, r8
 8013b2a:	4631      	mov	r1, r6
 8013b2c:	4628      	mov	r0, r5
 8013b2e:	47b8      	blx	r7
 8013b30:	3001      	adds	r0, #1
 8013b32:	d1e9      	bne.n	8013b08 <_printf_float+0x358>
 8013b34:	e699      	b.n	801386a <_printf_float+0xba>
 8013b36:	2301      	movs	r3, #1
 8013b38:	464a      	mov	r2, r9
 8013b3a:	4631      	mov	r1, r6
 8013b3c:	4628      	mov	r0, r5
 8013b3e:	47b8      	blx	r7
 8013b40:	3001      	adds	r0, #1
 8013b42:	f43f ae92 	beq.w	801386a <_printf_float+0xba>
 8013b46:	f108 0801 	add.w	r8, r8, #1
 8013b4a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013b4e:	1a9b      	subs	r3, r3, r2
 8013b50:	eba3 030a 	sub.w	r3, r3, sl
 8013b54:	4543      	cmp	r3, r8
 8013b56:	dcee      	bgt.n	8013b36 <_printf_float+0x386>
 8013b58:	e74a      	b.n	80139f0 <_printf_float+0x240>
 8013b5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013b5c:	2a01      	cmp	r2, #1
 8013b5e:	dc01      	bgt.n	8013b64 <_printf_float+0x3b4>
 8013b60:	07db      	lsls	r3, r3, #31
 8013b62:	d53a      	bpl.n	8013bda <_printf_float+0x42a>
 8013b64:	2301      	movs	r3, #1
 8013b66:	4642      	mov	r2, r8
 8013b68:	4631      	mov	r1, r6
 8013b6a:	4628      	mov	r0, r5
 8013b6c:	47b8      	blx	r7
 8013b6e:	3001      	adds	r0, #1
 8013b70:	f43f ae7b 	beq.w	801386a <_printf_float+0xba>
 8013b74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013b78:	4631      	mov	r1, r6
 8013b7a:	4628      	mov	r0, r5
 8013b7c:	47b8      	blx	r7
 8013b7e:	3001      	adds	r0, #1
 8013b80:	f108 0801 	add.w	r8, r8, #1
 8013b84:	f43f ae71 	beq.w	801386a <_printf_float+0xba>
 8013b88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013b8a:	2200      	movs	r2, #0
 8013b8c:	f103 3aff 	add.w	sl, r3, #4294967295
 8013b90:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013b94:	2300      	movs	r3, #0
 8013b96:	f7ec ffa7 	bl	8000ae8 <__aeabi_dcmpeq>
 8013b9a:	b9c8      	cbnz	r0, 8013bd0 <_printf_float+0x420>
 8013b9c:	4653      	mov	r3, sl
 8013b9e:	4642      	mov	r2, r8
 8013ba0:	4631      	mov	r1, r6
 8013ba2:	4628      	mov	r0, r5
 8013ba4:	47b8      	blx	r7
 8013ba6:	3001      	adds	r0, #1
 8013ba8:	d10e      	bne.n	8013bc8 <_printf_float+0x418>
 8013baa:	e65e      	b.n	801386a <_printf_float+0xba>
 8013bac:	2301      	movs	r3, #1
 8013bae:	4652      	mov	r2, sl
 8013bb0:	4631      	mov	r1, r6
 8013bb2:	4628      	mov	r0, r5
 8013bb4:	47b8      	blx	r7
 8013bb6:	3001      	adds	r0, #1
 8013bb8:	f43f ae57 	beq.w	801386a <_printf_float+0xba>
 8013bbc:	f108 0801 	add.w	r8, r8, #1
 8013bc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013bc2:	3b01      	subs	r3, #1
 8013bc4:	4543      	cmp	r3, r8
 8013bc6:	dcf1      	bgt.n	8013bac <_printf_float+0x3fc>
 8013bc8:	464b      	mov	r3, r9
 8013bca:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8013bce:	e6de      	b.n	801398e <_printf_float+0x1de>
 8013bd0:	f04f 0800 	mov.w	r8, #0
 8013bd4:	f104 0a1a 	add.w	sl, r4, #26
 8013bd8:	e7f2      	b.n	8013bc0 <_printf_float+0x410>
 8013bda:	2301      	movs	r3, #1
 8013bdc:	e7df      	b.n	8013b9e <_printf_float+0x3ee>
 8013bde:	2301      	movs	r3, #1
 8013be0:	464a      	mov	r2, r9
 8013be2:	4631      	mov	r1, r6
 8013be4:	4628      	mov	r0, r5
 8013be6:	47b8      	blx	r7
 8013be8:	3001      	adds	r0, #1
 8013bea:	f43f ae3e 	beq.w	801386a <_printf_float+0xba>
 8013bee:	f108 0801 	add.w	r8, r8, #1
 8013bf2:	68e3      	ldr	r3, [r4, #12]
 8013bf4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013bf6:	1a9b      	subs	r3, r3, r2
 8013bf8:	4543      	cmp	r3, r8
 8013bfa:	dcf0      	bgt.n	8013bde <_printf_float+0x42e>
 8013bfc:	e6fc      	b.n	80139f8 <_printf_float+0x248>
 8013bfe:	f04f 0800 	mov.w	r8, #0
 8013c02:	f104 0919 	add.w	r9, r4, #25
 8013c06:	e7f4      	b.n	8013bf2 <_printf_float+0x442>
 8013c08:	2900      	cmp	r1, #0
 8013c0a:	f43f ae8b 	beq.w	8013924 <_printf_float+0x174>
 8013c0e:	2300      	movs	r3, #0
 8013c10:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8013c14:	ab09      	add	r3, sp, #36	; 0x24
 8013c16:	9300      	str	r3, [sp, #0]
 8013c18:	ec49 8b10 	vmov	d0, r8, r9
 8013c1c:	6022      	str	r2, [r4, #0]
 8013c1e:	f8cd a004 	str.w	sl, [sp, #4]
 8013c22:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8013c26:	4628      	mov	r0, r5
 8013c28:	f7ff fd2e 	bl	8013688 <__cvt>
 8013c2c:	4680      	mov	r8, r0
 8013c2e:	e648      	b.n	80138c2 <_printf_float+0x112>

08013c30 <_printf_common>:
 8013c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013c34:	4691      	mov	r9, r2
 8013c36:	461f      	mov	r7, r3
 8013c38:	688a      	ldr	r2, [r1, #8]
 8013c3a:	690b      	ldr	r3, [r1, #16]
 8013c3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013c40:	4293      	cmp	r3, r2
 8013c42:	bfb8      	it	lt
 8013c44:	4613      	movlt	r3, r2
 8013c46:	f8c9 3000 	str.w	r3, [r9]
 8013c4a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013c4e:	4606      	mov	r6, r0
 8013c50:	460c      	mov	r4, r1
 8013c52:	b112      	cbz	r2, 8013c5a <_printf_common+0x2a>
 8013c54:	3301      	adds	r3, #1
 8013c56:	f8c9 3000 	str.w	r3, [r9]
 8013c5a:	6823      	ldr	r3, [r4, #0]
 8013c5c:	0699      	lsls	r1, r3, #26
 8013c5e:	bf42      	ittt	mi
 8013c60:	f8d9 3000 	ldrmi.w	r3, [r9]
 8013c64:	3302      	addmi	r3, #2
 8013c66:	f8c9 3000 	strmi.w	r3, [r9]
 8013c6a:	6825      	ldr	r5, [r4, #0]
 8013c6c:	f015 0506 	ands.w	r5, r5, #6
 8013c70:	d107      	bne.n	8013c82 <_printf_common+0x52>
 8013c72:	f104 0a19 	add.w	sl, r4, #25
 8013c76:	68e3      	ldr	r3, [r4, #12]
 8013c78:	f8d9 2000 	ldr.w	r2, [r9]
 8013c7c:	1a9b      	subs	r3, r3, r2
 8013c7e:	42ab      	cmp	r3, r5
 8013c80:	dc28      	bgt.n	8013cd4 <_printf_common+0xa4>
 8013c82:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8013c86:	6822      	ldr	r2, [r4, #0]
 8013c88:	3300      	adds	r3, #0
 8013c8a:	bf18      	it	ne
 8013c8c:	2301      	movne	r3, #1
 8013c8e:	0692      	lsls	r2, r2, #26
 8013c90:	d42d      	bmi.n	8013cee <_printf_common+0xbe>
 8013c92:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013c96:	4639      	mov	r1, r7
 8013c98:	4630      	mov	r0, r6
 8013c9a:	47c0      	blx	r8
 8013c9c:	3001      	adds	r0, #1
 8013c9e:	d020      	beq.n	8013ce2 <_printf_common+0xb2>
 8013ca0:	6823      	ldr	r3, [r4, #0]
 8013ca2:	68e5      	ldr	r5, [r4, #12]
 8013ca4:	f8d9 2000 	ldr.w	r2, [r9]
 8013ca8:	f003 0306 	and.w	r3, r3, #6
 8013cac:	2b04      	cmp	r3, #4
 8013cae:	bf08      	it	eq
 8013cb0:	1aad      	subeq	r5, r5, r2
 8013cb2:	68a3      	ldr	r3, [r4, #8]
 8013cb4:	6922      	ldr	r2, [r4, #16]
 8013cb6:	bf0c      	ite	eq
 8013cb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013cbc:	2500      	movne	r5, #0
 8013cbe:	4293      	cmp	r3, r2
 8013cc0:	bfc4      	itt	gt
 8013cc2:	1a9b      	subgt	r3, r3, r2
 8013cc4:	18ed      	addgt	r5, r5, r3
 8013cc6:	f04f 0900 	mov.w	r9, #0
 8013cca:	341a      	adds	r4, #26
 8013ccc:	454d      	cmp	r5, r9
 8013cce:	d11a      	bne.n	8013d06 <_printf_common+0xd6>
 8013cd0:	2000      	movs	r0, #0
 8013cd2:	e008      	b.n	8013ce6 <_printf_common+0xb6>
 8013cd4:	2301      	movs	r3, #1
 8013cd6:	4652      	mov	r2, sl
 8013cd8:	4639      	mov	r1, r7
 8013cda:	4630      	mov	r0, r6
 8013cdc:	47c0      	blx	r8
 8013cde:	3001      	adds	r0, #1
 8013ce0:	d103      	bne.n	8013cea <_printf_common+0xba>
 8013ce2:	f04f 30ff 	mov.w	r0, #4294967295
 8013ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013cea:	3501      	adds	r5, #1
 8013cec:	e7c3      	b.n	8013c76 <_printf_common+0x46>
 8013cee:	18e1      	adds	r1, r4, r3
 8013cf0:	1c5a      	adds	r2, r3, #1
 8013cf2:	2030      	movs	r0, #48	; 0x30
 8013cf4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013cf8:	4422      	add	r2, r4
 8013cfa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013cfe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013d02:	3302      	adds	r3, #2
 8013d04:	e7c5      	b.n	8013c92 <_printf_common+0x62>
 8013d06:	2301      	movs	r3, #1
 8013d08:	4622      	mov	r2, r4
 8013d0a:	4639      	mov	r1, r7
 8013d0c:	4630      	mov	r0, r6
 8013d0e:	47c0      	blx	r8
 8013d10:	3001      	adds	r0, #1
 8013d12:	d0e6      	beq.n	8013ce2 <_printf_common+0xb2>
 8013d14:	f109 0901 	add.w	r9, r9, #1
 8013d18:	e7d8      	b.n	8013ccc <_printf_common+0x9c>
	...

08013d1c <_printf_i>:
 8013d1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013d20:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8013d24:	460c      	mov	r4, r1
 8013d26:	7e09      	ldrb	r1, [r1, #24]
 8013d28:	b085      	sub	sp, #20
 8013d2a:	296e      	cmp	r1, #110	; 0x6e
 8013d2c:	4617      	mov	r7, r2
 8013d2e:	4606      	mov	r6, r0
 8013d30:	4698      	mov	r8, r3
 8013d32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013d34:	f000 80b3 	beq.w	8013e9e <_printf_i+0x182>
 8013d38:	d822      	bhi.n	8013d80 <_printf_i+0x64>
 8013d3a:	2963      	cmp	r1, #99	; 0x63
 8013d3c:	d036      	beq.n	8013dac <_printf_i+0x90>
 8013d3e:	d80a      	bhi.n	8013d56 <_printf_i+0x3a>
 8013d40:	2900      	cmp	r1, #0
 8013d42:	f000 80b9 	beq.w	8013eb8 <_printf_i+0x19c>
 8013d46:	2958      	cmp	r1, #88	; 0x58
 8013d48:	f000 8083 	beq.w	8013e52 <_printf_i+0x136>
 8013d4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013d50:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8013d54:	e032      	b.n	8013dbc <_printf_i+0xa0>
 8013d56:	2964      	cmp	r1, #100	; 0x64
 8013d58:	d001      	beq.n	8013d5e <_printf_i+0x42>
 8013d5a:	2969      	cmp	r1, #105	; 0x69
 8013d5c:	d1f6      	bne.n	8013d4c <_printf_i+0x30>
 8013d5e:	6820      	ldr	r0, [r4, #0]
 8013d60:	6813      	ldr	r3, [r2, #0]
 8013d62:	0605      	lsls	r5, r0, #24
 8013d64:	f103 0104 	add.w	r1, r3, #4
 8013d68:	d52a      	bpl.n	8013dc0 <_printf_i+0xa4>
 8013d6a:	681b      	ldr	r3, [r3, #0]
 8013d6c:	6011      	str	r1, [r2, #0]
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	da03      	bge.n	8013d7a <_printf_i+0x5e>
 8013d72:	222d      	movs	r2, #45	; 0x2d
 8013d74:	425b      	negs	r3, r3
 8013d76:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8013d7a:	486f      	ldr	r0, [pc, #444]	; (8013f38 <_printf_i+0x21c>)
 8013d7c:	220a      	movs	r2, #10
 8013d7e:	e039      	b.n	8013df4 <_printf_i+0xd8>
 8013d80:	2973      	cmp	r1, #115	; 0x73
 8013d82:	f000 809d 	beq.w	8013ec0 <_printf_i+0x1a4>
 8013d86:	d808      	bhi.n	8013d9a <_printf_i+0x7e>
 8013d88:	296f      	cmp	r1, #111	; 0x6f
 8013d8a:	d020      	beq.n	8013dce <_printf_i+0xb2>
 8013d8c:	2970      	cmp	r1, #112	; 0x70
 8013d8e:	d1dd      	bne.n	8013d4c <_printf_i+0x30>
 8013d90:	6823      	ldr	r3, [r4, #0]
 8013d92:	f043 0320 	orr.w	r3, r3, #32
 8013d96:	6023      	str	r3, [r4, #0]
 8013d98:	e003      	b.n	8013da2 <_printf_i+0x86>
 8013d9a:	2975      	cmp	r1, #117	; 0x75
 8013d9c:	d017      	beq.n	8013dce <_printf_i+0xb2>
 8013d9e:	2978      	cmp	r1, #120	; 0x78
 8013da0:	d1d4      	bne.n	8013d4c <_printf_i+0x30>
 8013da2:	2378      	movs	r3, #120	; 0x78
 8013da4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013da8:	4864      	ldr	r0, [pc, #400]	; (8013f3c <_printf_i+0x220>)
 8013daa:	e055      	b.n	8013e58 <_printf_i+0x13c>
 8013dac:	6813      	ldr	r3, [r2, #0]
 8013dae:	1d19      	adds	r1, r3, #4
 8013db0:	681b      	ldr	r3, [r3, #0]
 8013db2:	6011      	str	r1, [r2, #0]
 8013db4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013db8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013dbc:	2301      	movs	r3, #1
 8013dbe:	e08c      	b.n	8013eda <_printf_i+0x1be>
 8013dc0:	681b      	ldr	r3, [r3, #0]
 8013dc2:	6011      	str	r1, [r2, #0]
 8013dc4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013dc8:	bf18      	it	ne
 8013dca:	b21b      	sxthne	r3, r3
 8013dcc:	e7cf      	b.n	8013d6e <_printf_i+0x52>
 8013dce:	6813      	ldr	r3, [r2, #0]
 8013dd0:	6825      	ldr	r5, [r4, #0]
 8013dd2:	1d18      	adds	r0, r3, #4
 8013dd4:	6010      	str	r0, [r2, #0]
 8013dd6:	0628      	lsls	r0, r5, #24
 8013dd8:	d501      	bpl.n	8013dde <_printf_i+0xc2>
 8013dda:	681b      	ldr	r3, [r3, #0]
 8013ddc:	e002      	b.n	8013de4 <_printf_i+0xc8>
 8013dde:	0668      	lsls	r0, r5, #25
 8013de0:	d5fb      	bpl.n	8013dda <_printf_i+0xbe>
 8013de2:	881b      	ldrh	r3, [r3, #0]
 8013de4:	4854      	ldr	r0, [pc, #336]	; (8013f38 <_printf_i+0x21c>)
 8013de6:	296f      	cmp	r1, #111	; 0x6f
 8013de8:	bf14      	ite	ne
 8013dea:	220a      	movne	r2, #10
 8013dec:	2208      	moveq	r2, #8
 8013dee:	2100      	movs	r1, #0
 8013df0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013df4:	6865      	ldr	r5, [r4, #4]
 8013df6:	60a5      	str	r5, [r4, #8]
 8013df8:	2d00      	cmp	r5, #0
 8013dfa:	f2c0 8095 	blt.w	8013f28 <_printf_i+0x20c>
 8013dfe:	6821      	ldr	r1, [r4, #0]
 8013e00:	f021 0104 	bic.w	r1, r1, #4
 8013e04:	6021      	str	r1, [r4, #0]
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	d13d      	bne.n	8013e86 <_printf_i+0x16a>
 8013e0a:	2d00      	cmp	r5, #0
 8013e0c:	f040 808e 	bne.w	8013f2c <_printf_i+0x210>
 8013e10:	4665      	mov	r5, ip
 8013e12:	2a08      	cmp	r2, #8
 8013e14:	d10b      	bne.n	8013e2e <_printf_i+0x112>
 8013e16:	6823      	ldr	r3, [r4, #0]
 8013e18:	07db      	lsls	r3, r3, #31
 8013e1a:	d508      	bpl.n	8013e2e <_printf_i+0x112>
 8013e1c:	6923      	ldr	r3, [r4, #16]
 8013e1e:	6862      	ldr	r2, [r4, #4]
 8013e20:	429a      	cmp	r2, r3
 8013e22:	bfde      	ittt	le
 8013e24:	2330      	movle	r3, #48	; 0x30
 8013e26:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013e2a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013e2e:	ebac 0305 	sub.w	r3, ip, r5
 8013e32:	6123      	str	r3, [r4, #16]
 8013e34:	f8cd 8000 	str.w	r8, [sp]
 8013e38:	463b      	mov	r3, r7
 8013e3a:	aa03      	add	r2, sp, #12
 8013e3c:	4621      	mov	r1, r4
 8013e3e:	4630      	mov	r0, r6
 8013e40:	f7ff fef6 	bl	8013c30 <_printf_common>
 8013e44:	3001      	adds	r0, #1
 8013e46:	d14d      	bne.n	8013ee4 <_printf_i+0x1c8>
 8013e48:	f04f 30ff 	mov.w	r0, #4294967295
 8013e4c:	b005      	add	sp, #20
 8013e4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013e52:	4839      	ldr	r0, [pc, #228]	; (8013f38 <_printf_i+0x21c>)
 8013e54:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8013e58:	6813      	ldr	r3, [r2, #0]
 8013e5a:	6821      	ldr	r1, [r4, #0]
 8013e5c:	1d1d      	adds	r5, r3, #4
 8013e5e:	681b      	ldr	r3, [r3, #0]
 8013e60:	6015      	str	r5, [r2, #0]
 8013e62:	060a      	lsls	r2, r1, #24
 8013e64:	d50b      	bpl.n	8013e7e <_printf_i+0x162>
 8013e66:	07ca      	lsls	r2, r1, #31
 8013e68:	bf44      	itt	mi
 8013e6a:	f041 0120 	orrmi.w	r1, r1, #32
 8013e6e:	6021      	strmi	r1, [r4, #0]
 8013e70:	b91b      	cbnz	r3, 8013e7a <_printf_i+0x15e>
 8013e72:	6822      	ldr	r2, [r4, #0]
 8013e74:	f022 0220 	bic.w	r2, r2, #32
 8013e78:	6022      	str	r2, [r4, #0]
 8013e7a:	2210      	movs	r2, #16
 8013e7c:	e7b7      	b.n	8013dee <_printf_i+0xd2>
 8013e7e:	064d      	lsls	r5, r1, #25
 8013e80:	bf48      	it	mi
 8013e82:	b29b      	uxthmi	r3, r3
 8013e84:	e7ef      	b.n	8013e66 <_printf_i+0x14a>
 8013e86:	4665      	mov	r5, ip
 8013e88:	fbb3 f1f2 	udiv	r1, r3, r2
 8013e8c:	fb02 3311 	mls	r3, r2, r1, r3
 8013e90:	5cc3      	ldrb	r3, [r0, r3]
 8013e92:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8013e96:	460b      	mov	r3, r1
 8013e98:	2900      	cmp	r1, #0
 8013e9a:	d1f5      	bne.n	8013e88 <_printf_i+0x16c>
 8013e9c:	e7b9      	b.n	8013e12 <_printf_i+0xf6>
 8013e9e:	6813      	ldr	r3, [r2, #0]
 8013ea0:	6825      	ldr	r5, [r4, #0]
 8013ea2:	6961      	ldr	r1, [r4, #20]
 8013ea4:	1d18      	adds	r0, r3, #4
 8013ea6:	6010      	str	r0, [r2, #0]
 8013ea8:	0628      	lsls	r0, r5, #24
 8013eaa:	681b      	ldr	r3, [r3, #0]
 8013eac:	d501      	bpl.n	8013eb2 <_printf_i+0x196>
 8013eae:	6019      	str	r1, [r3, #0]
 8013eb0:	e002      	b.n	8013eb8 <_printf_i+0x19c>
 8013eb2:	066a      	lsls	r2, r5, #25
 8013eb4:	d5fb      	bpl.n	8013eae <_printf_i+0x192>
 8013eb6:	8019      	strh	r1, [r3, #0]
 8013eb8:	2300      	movs	r3, #0
 8013eba:	6123      	str	r3, [r4, #16]
 8013ebc:	4665      	mov	r5, ip
 8013ebe:	e7b9      	b.n	8013e34 <_printf_i+0x118>
 8013ec0:	6813      	ldr	r3, [r2, #0]
 8013ec2:	1d19      	adds	r1, r3, #4
 8013ec4:	6011      	str	r1, [r2, #0]
 8013ec6:	681d      	ldr	r5, [r3, #0]
 8013ec8:	6862      	ldr	r2, [r4, #4]
 8013eca:	2100      	movs	r1, #0
 8013ecc:	4628      	mov	r0, r5
 8013ece:	f7ec f997 	bl	8000200 <memchr>
 8013ed2:	b108      	cbz	r0, 8013ed8 <_printf_i+0x1bc>
 8013ed4:	1b40      	subs	r0, r0, r5
 8013ed6:	6060      	str	r0, [r4, #4]
 8013ed8:	6863      	ldr	r3, [r4, #4]
 8013eda:	6123      	str	r3, [r4, #16]
 8013edc:	2300      	movs	r3, #0
 8013ede:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013ee2:	e7a7      	b.n	8013e34 <_printf_i+0x118>
 8013ee4:	6923      	ldr	r3, [r4, #16]
 8013ee6:	462a      	mov	r2, r5
 8013ee8:	4639      	mov	r1, r7
 8013eea:	4630      	mov	r0, r6
 8013eec:	47c0      	blx	r8
 8013eee:	3001      	adds	r0, #1
 8013ef0:	d0aa      	beq.n	8013e48 <_printf_i+0x12c>
 8013ef2:	6823      	ldr	r3, [r4, #0]
 8013ef4:	079b      	lsls	r3, r3, #30
 8013ef6:	d413      	bmi.n	8013f20 <_printf_i+0x204>
 8013ef8:	68e0      	ldr	r0, [r4, #12]
 8013efa:	9b03      	ldr	r3, [sp, #12]
 8013efc:	4298      	cmp	r0, r3
 8013efe:	bfb8      	it	lt
 8013f00:	4618      	movlt	r0, r3
 8013f02:	e7a3      	b.n	8013e4c <_printf_i+0x130>
 8013f04:	2301      	movs	r3, #1
 8013f06:	464a      	mov	r2, r9
 8013f08:	4639      	mov	r1, r7
 8013f0a:	4630      	mov	r0, r6
 8013f0c:	47c0      	blx	r8
 8013f0e:	3001      	adds	r0, #1
 8013f10:	d09a      	beq.n	8013e48 <_printf_i+0x12c>
 8013f12:	3501      	adds	r5, #1
 8013f14:	68e3      	ldr	r3, [r4, #12]
 8013f16:	9a03      	ldr	r2, [sp, #12]
 8013f18:	1a9b      	subs	r3, r3, r2
 8013f1a:	42ab      	cmp	r3, r5
 8013f1c:	dcf2      	bgt.n	8013f04 <_printf_i+0x1e8>
 8013f1e:	e7eb      	b.n	8013ef8 <_printf_i+0x1dc>
 8013f20:	2500      	movs	r5, #0
 8013f22:	f104 0919 	add.w	r9, r4, #25
 8013f26:	e7f5      	b.n	8013f14 <_printf_i+0x1f8>
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d1ac      	bne.n	8013e86 <_printf_i+0x16a>
 8013f2c:	7803      	ldrb	r3, [r0, #0]
 8013f2e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013f32:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013f36:	e76c      	b.n	8013e12 <_printf_i+0xf6>
 8013f38:	08019708 	.word	0x08019708
 8013f3c:	08019719 	.word	0x08019719

08013f40 <_scanf_float>:
 8013f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f44:	469a      	mov	sl, r3
 8013f46:	688b      	ldr	r3, [r1, #8]
 8013f48:	4616      	mov	r6, r2
 8013f4a:	1e5a      	subs	r2, r3, #1
 8013f4c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8013f50:	b087      	sub	sp, #28
 8013f52:	bf83      	ittte	hi
 8013f54:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8013f58:	189b      	addhi	r3, r3, r2
 8013f5a:	9301      	strhi	r3, [sp, #4]
 8013f5c:	2300      	movls	r3, #0
 8013f5e:	bf86      	itte	hi
 8013f60:	f240 135d 	movwhi	r3, #349	; 0x15d
 8013f64:	608b      	strhi	r3, [r1, #8]
 8013f66:	9301      	strls	r3, [sp, #4]
 8013f68:	680b      	ldr	r3, [r1, #0]
 8013f6a:	4688      	mov	r8, r1
 8013f6c:	f04f 0b00 	mov.w	fp, #0
 8013f70:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8013f74:	f848 3b1c 	str.w	r3, [r8], #28
 8013f78:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8013f7c:	4607      	mov	r7, r0
 8013f7e:	460c      	mov	r4, r1
 8013f80:	4645      	mov	r5, r8
 8013f82:	465a      	mov	r2, fp
 8013f84:	46d9      	mov	r9, fp
 8013f86:	f8cd b008 	str.w	fp, [sp, #8]
 8013f8a:	68a1      	ldr	r1, [r4, #8]
 8013f8c:	b181      	cbz	r1, 8013fb0 <_scanf_float+0x70>
 8013f8e:	6833      	ldr	r3, [r6, #0]
 8013f90:	781b      	ldrb	r3, [r3, #0]
 8013f92:	2b49      	cmp	r3, #73	; 0x49
 8013f94:	d071      	beq.n	801407a <_scanf_float+0x13a>
 8013f96:	d84d      	bhi.n	8014034 <_scanf_float+0xf4>
 8013f98:	2b39      	cmp	r3, #57	; 0x39
 8013f9a:	d840      	bhi.n	801401e <_scanf_float+0xde>
 8013f9c:	2b31      	cmp	r3, #49	; 0x31
 8013f9e:	f080 8088 	bcs.w	80140b2 <_scanf_float+0x172>
 8013fa2:	2b2d      	cmp	r3, #45	; 0x2d
 8013fa4:	f000 8090 	beq.w	80140c8 <_scanf_float+0x188>
 8013fa8:	d815      	bhi.n	8013fd6 <_scanf_float+0x96>
 8013faa:	2b2b      	cmp	r3, #43	; 0x2b
 8013fac:	f000 808c 	beq.w	80140c8 <_scanf_float+0x188>
 8013fb0:	f1b9 0f00 	cmp.w	r9, #0
 8013fb4:	d003      	beq.n	8013fbe <_scanf_float+0x7e>
 8013fb6:	6823      	ldr	r3, [r4, #0]
 8013fb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013fbc:	6023      	str	r3, [r4, #0]
 8013fbe:	3a01      	subs	r2, #1
 8013fc0:	2a01      	cmp	r2, #1
 8013fc2:	f200 80ea 	bhi.w	801419a <_scanf_float+0x25a>
 8013fc6:	4545      	cmp	r5, r8
 8013fc8:	f200 80dc 	bhi.w	8014184 <_scanf_float+0x244>
 8013fcc:	2601      	movs	r6, #1
 8013fce:	4630      	mov	r0, r6
 8013fd0:	b007      	add	sp, #28
 8013fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013fd6:	2b2e      	cmp	r3, #46	; 0x2e
 8013fd8:	f000 809f 	beq.w	801411a <_scanf_float+0x1da>
 8013fdc:	2b30      	cmp	r3, #48	; 0x30
 8013fde:	d1e7      	bne.n	8013fb0 <_scanf_float+0x70>
 8013fe0:	6820      	ldr	r0, [r4, #0]
 8013fe2:	f410 7f80 	tst.w	r0, #256	; 0x100
 8013fe6:	d064      	beq.n	80140b2 <_scanf_float+0x172>
 8013fe8:	9b01      	ldr	r3, [sp, #4]
 8013fea:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8013fee:	6020      	str	r0, [r4, #0]
 8013ff0:	f109 0901 	add.w	r9, r9, #1
 8013ff4:	b11b      	cbz	r3, 8013ffe <_scanf_float+0xbe>
 8013ff6:	3b01      	subs	r3, #1
 8013ff8:	3101      	adds	r1, #1
 8013ffa:	9301      	str	r3, [sp, #4]
 8013ffc:	60a1      	str	r1, [r4, #8]
 8013ffe:	68a3      	ldr	r3, [r4, #8]
 8014000:	3b01      	subs	r3, #1
 8014002:	60a3      	str	r3, [r4, #8]
 8014004:	6923      	ldr	r3, [r4, #16]
 8014006:	3301      	adds	r3, #1
 8014008:	6123      	str	r3, [r4, #16]
 801400a:	6873      	ldr	r3, [r6, #4]
 801400c:	3b01      	subs	r3, #1
 801400e:	2b00      	cmp	r3, #0
 8014010:	6073      	str	r3, [r6, #4]
 8014012:	f340 80ac 	ble.w	801416e <_scanf_float+0x22e>
 8014016:	6833      	ldr	r3, [r6, #0]
 8014018:	3301      	adds	r3, #1
 801401a:	6033      	str	r3, [r6, #0]
 801401c:	e7b5      	b.n	8013f8a <_scanf_float+0x4a>
 801401e:	2b45      	cmp	r3, #69	; 0x45
 8014020:	f000 8085 	beq.w	801412e <_scanf_float+0x1ee>
 8014024:	2b46      	cmp	r3, #70	; 0x46
 8014026:	d06a      	beq.n	80140fe <_scanf_float+0x1be>
 8014028:	2b41      	cmp	r3, #65	; 0x41
 801402a:	d1c1      	bne.n	8013fb0 <_scanf_float+0x70>
 801402c:	2a01      	cmp	r2, #1
 801402e:	d1bf      	bne.n	8013fb0 <_scanf_float+0x70>
 8014030:	2202      	movs	r2, #2
 8014032:	e046      	b.n	80140c2 <_scanf_float+0x182>
 8014034:	2b65      	cmp	r3, #101	; 0x65
 8014036:	d07a      	beq.n	801412e <_scanf_float+0x1ee>
 8014038:	d818      	bhi.n	801406c <_scanf_float+0x12c>
 801403a:	2b54      	cmp	r3, #84	; 0x54
 801403c:	d066      	beq.n	801410c <_scanf_float+0x1cc>
 801403e:	d811      	bhi.n	8014064 <_scanf_float+0x124>
 8014040:	2b4e      	cmp	r3, #78	; 0x4e
 8014042:	d1b5      	bne.n	8013fb0 <_scanf_float+0x70>
 8014044:	2a00      	cmp	r2, #0
 8014046:	d146      	bne.n	80140d6 <_scanf_float+0x196>
 8014048:	f1b9 0f00 	cmp.w	r9, #0
 801404c:	d145      	bne.n	80140da <_scanf_float+0x19a>
 801404e:	6821      	ldr	r1, [r4, #0]
 8014050:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8014054:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8014058:	d13f      	bne.n	80140da <_scanf_float+0x19a>
 801405a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801405e:	6021      	str	r1, [r4, #0]
 8014060:	2201      	movs	r2, #1
 8014062:	e02e      	b.n	80140c2 <_scanf_float+0x182>
 8014064:	2b59      	cmp	r3, #89	; 0x59
 8014066:	d01e      	beq.n	80140a6 <_scanf_float+0x166>
 8014068:	2b61      	cmp	r3, #97	; 0x61
 801406a:	e7de      	b.n	801402a <_scanf_float+0xea>
 801406c:	2b6e      	cmp	r3, #110	; 0x6e
 801406e:	d0e9      	beq.n	8014044 <_scanf_float+0x104>
 8014070:	d815      	bhi.n	801409e <_scanf_float+0x15e>
 8014072:	2b66      	cmp	r3, #102	; 0x66
 8014074:	d043      	beq.n	80140fe <_scanf_float+0x1be>
 8014076:	2b69      	cmp	r3, #105	; 0x69
 8014078:	d19a      	bne.n	8013fb0 <_scanf_float+0x70>
 801407a:	f1bb 0f00 	cmp.w	fp, #0
 801407e:	d138      	bne.n	80140f2 <_scanf_float+0x1b2>
 8014080:	f1b9 0f00 	cmp.w	r9, #0
 8014084:	d197      	bne.n	8013fb6 <_scanf_float+0x76>
 8014086:	6821      	ldr	r1, [r4, #0]
 8014088:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 801408c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8014090:	d195      	bne.n	8013fbe <_scanf_float+0x7e>
 8014092:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8014096:	6021      	str	r1, [r4, #0]
 8014098:	f04f 0b01 	mov.w	fp, #1
 801409c:	e011      	b.n	80140c2 <_scanf_float+0x182>
 801409e:	2b74      	cmp	r3, #116	; 0x74
 80140a0:	d034      	beq.n	801410c <_scanf_float+0x1cc>
 80140a2:	2b79      	cmp	r3, #121	; 0x79
 80140a4:	d184      	bne.n	8013fb0 <_scanf_float+0x70>
 80140a6:	f1bb 0f07 	cmp.w	fp, #7
 80140aa:	d181      	bne.n	8013fb0 <_scanf_float+0x70>
 80140ac:	f04f 0b08 	mov.w	fp, #8
 80140b0:	e007      	b.n	80140c2 <_scanf_float+0x182>
 80140b2:	eb12 0f0b 	cmn.w	r2, fp
 80140b6:	f47f af7b 	bne.w	8013fb0 <_scanf_float+0x70>
 80140ba:	6821      	ldr	r1, [r4, #0]
 80140bc:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80140c0:	6021      	str	r1, [r4, #0]
 80140c2:	702b      	strb	r3, [r5, #0]
 80140c4:	3501      	adds	r5, #1
 80140c6:	e79a      	b.n	8013ffe <_scanf_float+0xbe>
 80140c8:	6821      	ldr	r1, [r4, #0]
 80140ca:	0608      	lsls	r0, r1, #24
 80140cc:	f57f af70 	bpl.w	8013fb0 <_scanf_float+0x70>
 80140d0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80140d4:	e7f4      	b.n	80140c0 <_scanf_float+0x180>
 80140d6:	2a02      	cmp	r2, #2
 80140d8:	d047      	beq.n	801416a <_scanf_float+0x22a>
 80140da:	f1bb 0f01 	cmp.w	fp, #1
 80140de:	d003      	beq.n	80140e8 <_scanf_float+0x1a8>
 80140e0:	f1bb 0f04 	cmp.w	fp, #4
 80140e4:	f47f af64 	bne.w	8013fb0 <_scanf_float+0x70>
 80140e8:	f10b 0b01 	add.w	fp, fp, #1
 80140ec:	fa5f fb8b 	uxtb.w	fp, fp
 80140f0:	e7e7      	b.n	80140c2 <_scanf_float+0x182>
 80140f2:	f1bb 0f03 	cmp.w	fp, #3
 80140f6:	d0f7      	beq.n	80140e8 <_scanf_float+0x1a8>
 80140f8:	f1bb 0f05 	cmp.w	fp, #5
 80140fc:	e7f2      	b.n	80140e4 <_scanf_float+0x1a4>
 80140fe:	f1bb 0f02 	cmp.w	fp, #2
 8014102:	f47f af55 	bne.w	8013fb0 <_scanf_float+0x70>
 8014106:	f04f 0b03 	mov.w	fp, #3
 801410a:	e7da      	b.n	80140c2 <_scanf_float+0x182>
 801410c:	f1bb 0f06 	cmp.w	fp, #6
 8014110:	f47f af4e 	bne.w	8013fb0 <_scanf_float+0x70>
 8014114:	f04f 0b07 	mov.w	fp, #7
 8014118:	e7d3      	b.n	80140c2 <_scanf_float+0x182>
 801411a:	6821      	ldr	r1, [r4, #0]
 801411c:	0588      	lsls	r0, r1, #22
 801411e:	f57f af47 	bpl.w	8013fb0 <_scanf_float+0x70>
 8014122:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8014126:	6021      	str	r1, [r4, #0]
 8014128:	f8cd 9008 	str.w	r9, [sp, #8]
 801412c:	e7c9      	b.n	80140c2 <_scanf_float+0x182>
 801412e:	6821      	ldr	r1, [r4, #0]
 8014130:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8014134:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8014138:	d006      	beq.n	8014148 <_scanf_float+0x208>
 801413a:	0548      	lsls	r0, r1, #21
 801413c:	f57f af38 	bpl.w	8013fb0 <_scanf_float+0x70>
 8014140:	f1b9 0f00 	cmp.w	r9, #0
 8014144:	f43f af3b 	beq.w	8013fbe <_scanf_float+0x7e>
 8014148:	0588      	lsls	r0, r1, #22
 801414a:	bf58      	it	pl
 801414c:	9802      	ldrpl	r0, [sp, #8]
 801414e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8014152:	bf58      	it	pl
 8014154:	eba9 0000 	subpl.w	r0, r9, r0
 8014158:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 801415c:	bf58      	it	pl
 801415e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8014162:	6021      	str	r1, [r4, #0]
 8014164:	f04f 0900 	mov.w	r9, #0
 8014168:	e7ab      	b.n	80140c2 <_scanf_float+0x182>
 801416a:	2203      	movs	r2, #3
 801416c:	e7a9      	b.n	80140c2 <_scanf_float+0x182>
 801416e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8014172:	9205      	str	r2, [sp, #20]
 8014174:	4631      	mov	r1, r6
 8014176:	4638      	mov	r0, r7
 8014178:	4798      	blx	r3
 801417a:	9a05      	ldr	r2, [sp, #20]
 801417c:	2800      	cmp	r0, #0
 801417e:	f43f af04 	beq.w	8013f8a <_scanf_float+0x4a>
 8014182:	e715      	b.n	8013fb0 <_scanf_float+0x70>
 8014184:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014188:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801418c:	4632      	mov	r2, r6
 801418e:	4638      	mov	r0, r7
 8014190:	4798      	blx	r3
 8014192:	6923      	ldr	r3, [r4, #16]
 8014194:	3b01      	subs	r3, #1
 8014196:	6123      	str	r3, [r4, #16]
 8014198:	e715      	b.n	8013fc6 <_scanf_float+0x86>
 801419a:	f10b 33ff 	add.w	r3, fp, #4294967295
 801419e:	2b06      	cmp	r3, #6
 80141a0:	d80a      	bhi.n	80141b8 <_scanf_float+0x278>
 80141a2:	f1bb 0f02 	cmp.w	fp, #2
 80141a6:	d968      	bls.n	801427a <_scanf_float+0x33a>
 80141a8:	f1ab 0b03 	sub.w	fp, fp, #3
 80141ac:	fa5f fb8b 	uxtb.w	fp, fp
 80141b0:	eba5 0b0b 	sub.w	fp, r5, fp
 80141b4:	455d      	cmp	r5, fp
 80141b6:	d14b      	bne.n	8014250 <_scanf_float+0x310>
 80141b8:	6823      	ldr	r3, [r4, #0]
 80141ba:	05da      	lsls	r2, r3, #23
 80141bc:	d51f      	bpl.n	80141fe <_scanf_float+0x2be>
 80141be:	055b      	lsls	r3, r3, #21
 80141c0:	d468      	bmi.n	8014294 <_scanf_float+0x354>
 80141c2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80141c6:	6923      	ldr	r3, [r4, #16]
 80141c8:	2965      	cmp	r1, #101	; 0x65
 80141ca:	f103 33ff 	add.w	r3, r3, #4294967295
 80141ce:	f105 3bff 	add.w	fp, r5, #4294967295
 80141d2:	6123      	str	r3, [r4, #16]
 80141d4:	d00d      	beq.n	80141f2 <_scanf_float+0x2b2>
 80141d6:	2945      	cmp	r1, #69	; 0x45
 80141d8:	d00b      	beq.n	80141f2 <_scanf_float+0x2b2>
 80141da:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80141de:	4632      	mov	r2, r6
 80141e0:	4638      	mov	r0, r7
 80141e2:	4798      	blx	r3
 80141e4:	6923      	ldr	r3, [r4, #16]
 80141e6:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80141ea:	3b01      	subs	r3, #1
 80141ec:	f1a5 0b02 	sub.w	fp, r5, #2
 80141f0:	6123      	str	r3, [r4, #16]
 80141f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80141f6:	4632      	mov	r2, r6
 80141f8:	4638      	mov	r0, r7
 80141fa:	4798      	blx	r3
 80141fc:	465d      	mov	r5, fp
 80141fe:	6826      	ldr	r6, [r4, #0]
 8014200:	f016 0610 	ands.w	r6, r6, #16
 8014204:	d17a      	bne.n	80142fc <_scanf_float+0x3bc>
 8014206:	702e      	strb	r6, [r5, #0]
 8014208:	6823      	ldr	r3, [r4, #0]
 801420a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801420e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014212:	d142      	bne.n	801429a <_scanf_float+0x35a>
 8014214:	9b02      	ldr	r3, [sp, #8]
 8014216:	eba9 0303 	sub.w	r3, r9, r3
 801421a:	425a      	negs	r2, r3
 801421c:	2b00      	cmp	r3, #0
 801421e:	d149      	bne.n	80142b4 <_scanf_float+0x374>
 8014220:	2200      	movs	r2, #0
 8014222:	4641      	mov	r1, r8
 8014224:	4638      	mov	r0, r7
 8014226:	f000 ff23 	bl	8015070 <_strtod_r>
 801422a:	6825      	ldr	r5, [r4, #0]
 801422c:	f8da 3000 	ldr.w	r3, [sl]
 8014230:	f015 0f02 	tst.w	r5, #2
 8014234:	f103 0204 	add.w	r2, r3, #4
 8014238:	ec59 8b10 	vmov	r8, r9, d0
 801423c:	f8ca 2000 	str.w	r2, [sl]
 8014240:	d043      	beq.n	80142ca <_scanf_float+0x38a>
 8014242:	681b      	ldr	r3, [r3, #0]
 8014244:	e9c3 8900 	strd	r8, r9, [r3]
 8014248:	68e3      	ldr	r3, [r4, #12]
 801424a:	3301      	adds	r3, #1
 801424c:	60e3      	str	r3, [r4, #12]
 801424e:	e6be      	b.n	8013fce <_scanf_float+0x8e>
 8014250:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014254:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8014258:	4632      	mov	r2, r6
 801425a:	4638      	mov	r0, r7
 801425c:	4798      	blx	r3
 801425e:	6923      	ldr	r3, [r4, #16]
 8014260:	3b01      	subs	r3, #1
 8014262:	6123      	str	r3, [r4, #16]
 8014264:	e7a6      	b.n	80141b4 <_scanf_float+0x274>
 8014266:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801426a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801426e:	4632      	mov	r2, r6
 8014270:	4638      	mov	r0, r7
 8014272:	4798      	blx	r3
 8014274:	6923      	ldr	r3, [r4, #16]
 8014276:	3b01      	subs	r3, #1
 8014278:	6123      	str	r3, [r4, #16]
 801427a:	4545      	cmp	r5, r8
 801427c:	d8f3      	bhi.n	8014266 <_scanf_float+0x326>
 801427e:	e6a5      	b.n	8013fcc <_scanf_float+0x8c>
 8014280:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014284:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8014288:	4632      	mov	r2, r6
 801428a:	4638      	mov	r0, r7
 801428c:	4798      	blx	r3
 801428e:	6923      	ldr	r3, [r4, #16]
 8014290:	3b01      	subs	r3, #1
 8014292:	6123      	str	r3, [r4, #16]
 8014294:	4545      	cmp	r5, r8
 8014296:	d8f3      	bhi.n	8014280 <_scanf_float+0x340>
 8014298:	e698      	b.n	8013fcc <_scanf_float+0x8c>
 801429a:	9b03      	ldr	r3, [sp, #12]
 801429c:	2b00      	cmp	r3, #0
 801429e:	d0bf      	beq.n	8014220 <_scanf_float+0x2e0>
 80142a0:	9904      	ldr	r1, [sp, #16]
 80142a2:	230a      	movs	r3, #10
 80142a4:	4632      	mov	r2, r6
 80142a6:	3101      	adds	r1, #1
 80142a8:	4638      	mov	r0, r7
 80142aa:	f000 ff6d 	bl	8015188 <_strtol_r>
 80142ae:	9b03      	ldr	r3, [sp, #12]
 80142b0:	9d04      	ldr	r5, [sp, #16]
 80142b2:	1ac2      	subs	r2, r0, r3
 80142b4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80142b8:	429d      	cmp	r5, r3
 80142ba:	bf28      	it	cs
 80142bc:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80142c0:	490f      	ldr	r1, [pc, #60]	; (8014300 <_scanf_float+0x3c0>)
 80142c2:	4628      	mov	r0, r5
 80142c4:	f000 f868 	bl	8014398 <siprintf>
 80142c8:	e7aa      	b.n	8014220 <_scanf_float+0x2e0>
 80142ca:	f015 0504 	ands.w	r5, r5, #4
 80142ce:	d1b8      	bne.n	8014242 <_scanf_float+0x302>
 80142d0:	681f      	ldr	r7, [r3, #0]
 80142d2:	ee10 2a10 	vmov	r2, s0
 80142d6:	464b      	mov	r3, r9
 80142d8:	ee10 0a10 	vmov	r0, s0
 80142dc:	4649      	mov	r1, r9
 80142de:	f7ec fc35 	bl	8000b4c <__aeabi_dcmpun>
 80142e2:	b128      	cbz	r0, 80142f0 <_scanf_float+0x3b0>
 80142e4:	4628      	mov	r0, r5
 80142e6:	f000 f81d 	bl	8014324 <nanf>
 80142ea:	ed87 0a00 	vstr	s0, [r7]
 80142ee:	e7ab      	b.n	8014248 <_scanf_float+0x308>
 80142f0:	4640      	mov	r0, r8
 80142f2:	4649      	mov	r1, r9
 80142f4:	f7ec fc88 	bl	8000c08 <__aeabi_d2f>
 80142f8:	6038      	str	r0, [r7, #0]
 80142fa:	e7a5      	b.n	8014248 <_scanf_float+0x308>
 80142fc:	2600      	movs	r6, #0
 80142fe:	e666      	b.n	8013fce <_scanf_float+0x8e>
 8014300:	0801972a 	.word	0x0801972a

08014304 <_sbrk_r>:
 8014304:	b538      	push	{r3, r4, r5, lr}
 8014306:	4c06      	ldr	r4, [pc, #24]	; (8014320 <_sbrk_r+0x1c>)
 8014308:	2300      	movs	r3, #0
 801430a:	4605      	mov	r5, r0
 801430c:	4608      	mov	r0, r1
 801430e:	6023      	str	r3, [r4, #0]
 8014310:	f7f4 fa8e 	bl	8008830 <_sbrk>
 8014314:	1c43      	adds	r3, r0, #1
 8014316:	d102      	bne.n	801431e <_sbrk_r+0x1a>
 8014318:	6823      	ldr	r3, [r4, #0]
 801431a:	b103      	cbz	r3, 801431e <_sbrk_r+0x1a>
 801431c:	602b      	str	r3, [r5, #0]
 801431e:	bd38      	pop	{r3, r4, r5, pc}
 8014320:	20006be0 	.word	0x20006be0

08014324 <nanf>:
 8014324:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801432c <nanf+0x8>
 8014328:	4770      	bx	lr
 801432a:	bf00      	nop
 801432c:	7fc00000 	.word	0x7fc00000

08014330 <sniprintf>:
 8014330:	b40c      	push	{r2, r3}
 8014332:	b530      	push	{r4, r5, lr}
 8014334:	4b17      	ldr	r3, [pc, #92]	; (8014394 <sniprintf+0x64>)
 8014336:	1e0c      	subs	r4, r1, #0
 8014338:	b09d      	sub	sp, #116	; 0x74
 801433a:	681d      	ldr	r5, [r3, #0]
 801433c:	da08      	bge.n	8014350 <sniprintf+0x20>
 801433e:	238b      	movs	r3, #139	; 0x8b
 8014340:	602b      	str	r3, [r5, #0]
 8014342:	f04f 30ff 	mov.w	r0, #4294967295
 8014346:	b01d      	add	sp, #116	; 0x74
 8014348:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801434c:	b002      	add	sp, #8
 801434e:	4770      	bx	lr
 8014350:	f44f 7302 	mov.w	r3, #520	; 0x208
 8014354:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014358:	bf14      	ite	ne
 801435a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801435e:	4623      	moveq	r3, r4
 8014360:	9304      	str	r3, [sp, #16]
 8014362:	9307      	str	r3, [sp, #28]
 8014364:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014368:	9002      	str	r0, [sp, #8]
 801436a:	9006      	str	r0, [sp, #24]
 801436c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014370:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8014372:	ab21      	add	r3, sp, #132	; 0x84
 8014374:	a902      	add	r1, sp, #8
 8014376:	4628      	mov	r0, r5
 8014378:	9301      	str	r3, [sp, #4]
 801437a:	f002 fd21 	bl	8016dc0 <_svfiprintf_r>
 801437e:	1c43      	adds	r3, r0, #1
 8014380:	bfbc      	itt	lt
 8014382:	238b      	movlt	r3, #139	; 0x8b
 8014384:	602b      	strlt	r3, [r5, #0]
 8014386:	2c00      	cmp	r4, #0
 8014388:	d0dd      	beq.n	8014346 <sniprintf+0x16>
 801438a:	9b02      	ldr	r3, [sp, #8]
 801438c:	2200      	movs	r2, #0
 801438e:	701a      	strb	r2, [r3, #0]
 8014390:	e7d9      	b.n	8014346 <sniprintf+0x16>
 8014392:	bf00      	nop
 8014394:	20000e34 	.word	0x20000e34

08014398 <siprintf>:
 8014398:	b40e      	push	{r1, r2, r3}
 801439a:	b500      	push	{lr}
 801439c:	b09c      	sub	sp, #112	; 0x70
 801439e:	ab1d      	add	r3, sp, #116	; 0x74
 80143a0:	9002      	str	r0, [sp, #8]
 80143a2:	9006      	str	r0, [sp, #24]
 80143a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80143a8:	4809      	ldr	r0, [pc, #36]	; (80143d0 <siprintf+0x38>)
 80143aa:	9107      	str	r1, [sp, #28]
 80143ac:	9104      	str	r1, [sp, #16]
 80143ae:	4909      	ldr	r1, [pc, #36]	; (80143d4 <siprintf+0x3c>)
 80143b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80143b4:	9105      	str	r1, [sp, #20]
 80143b6:	6800      	ldr	r0, [r0, #0]
 80143b8:	9301      	str	r3, [sp, #4]
 80143ba:	a902      	add	r1, sp, #8
 80143bc:	f002 fd00 	bl	8016dc0 <_svfiprintf_r>
 80143c0:	9b02      	ldr	r3, [sp, #8]
 80143c2:	2200      	movs	r2, #0
 80143c4:	701a      	strb	r2, [r3, #0]
 80143c6:	b01c      	add	sp, #112	; 0x70
 80143c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80143cc:	b003      	add	sp, #12
 80143ce:	4770      	bx	lr
 80143d0:	20000e34 	.word	0x20000e34
 80143d4:	ffff0208 	.word	0xffff0208

080143d8 <siscanf>:
 80143d8:	b40e      	push	{r1, r2, r3}
 80143da:	b530      	push	{r4, r5, lr}
 80143dc:	b09c      	sub	sp, #112	; 0x70
 80143de:	ac1f      	add	r4, sp, #124	; 0x7c
 80143e0:	f44f 7201 	mov.w	r2, #516	; 0x204
 80143e4:	f854 5b04 	ldr.w	r5, [r4], #4
 80143e8:	f8ad 2014 	strh.w	r2, [sp, #20]
 80143ec:	9002      	str	r0, [sp, #8]
 80143ee:	9006      	str	r0, [sp, #24]
 80143f0:	f7eb fef8 	bl	80001e4 <strlen>
 80143f4:	4b0b      	ldr	r3, [pc, #44]	; (8014424 <siscanf+0x4c>)
 80143f6:	9003      	str	r0, [sp, #12]
 80143f8:	9007      	str	r0, [sp, #28]
 80143fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80143fc:	480a      	ldr	r0, [pc, #40]	; (8014428 <siscanf+0x50>)
 80143fe:	9401      	str	r4, [sp, #4]
 8014400:	2300      	movs	r3, #0
 8014402:	930f      	str	r3, [sp, #60]	; 0x3c
 8014404:	9314      	str	r3, [sp, #80]	; 0x50
 8014406:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801440a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801440e:	462a      	mov	r2, r5
 8014410:	4623      	mov	r3, r4
 8014412:	a902      	add	r1, sp, #8
 8014414:	6800      	ldr	r0, [r0, #0]
 8014416:	f002 fe25 	bl	8017064 <__ssvfiscanf_r>
 801441a:	b01c      	add	sp, #112	; 0x70
 801441c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014420:	b003      	add	sp, #12
 8014422:	4770      	bx	lr
 8014424:	0801442d 	.word	0x0801442d
 8014428:	20000e34 	.word	0x20000e34

0801442c <__seofread>:
 801442c:	2000      	movs	r0, #0
 801442e:	4770      	bx	lr

08014430 <strcat>:
 8014430:	b510      	push	{r4, lr}
 8014432:	4603      	mov	r3, r0
 8014434:	781a      	ldrb	r2, [r3, #0]
 8014436:	1c5c      	adds	r4, r3, #1
 8014438:	b93a      	cbnz	r2, 801444a <strcat+0x1a>
 801443a:	3b01      	subs	r3, #1
 801443c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014440:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014444:	2a00      	cmp	r2, #0
 8014446:	d1f9      	bne.n	801443c <strcat+0xc>
 8014448:	bd10      	pop	{r4, pc}
 801444a:	4623      	mov	r3, r4
 801444c:	e7f2      	b.n	8014434 <strcat+0x4>

0801444e <sulp>:
 801444e:	b570      	push	{r4, r5, r6, lr}
 8014450:	4604      	mov	r4, r0
 8014452:	460d      	mov	r5, r1
 8014454:	ec45 4b10 	vmov	d0, r4, r5
 8014458:	4616      	mov	r6, r2
 801445a:	f002 fb15 	bl	8016a88 <__ulp>
 801445e:	ec51 0b10 	vmov	r0, r1, d0
 8014462:	b17e      	cbz	r6, 8014484 <sulp+0x36>
 8014464:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8014468:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801446c:	2b00      	cmp	r3, #0
 801446e:	dd09      	ble.n	8014484 <sulp+0x36>
 8014470:	051b      	lsls	r3, r3, #20
 8014472:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8014476:	2400      	movs	r4, #0
 8014478:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801447c:	4622      	mov	r2, r4
 801447e:	462b      	mov	r3, r5
 8014480:	f7ec f8ca 	bl	8000618 <__aeabi_dmul>
 8014484:	bd70      	pop	{r4, r5, r6, pc}
	...

08014488 <_strtod_l>:
 8014488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801448c:	461f      	mov	r7, r3
 801448e:	b0a1      	sub	sp, #132	; 0x84
 8014490:	2300      	movs	r3, #0
 8014492:	4681      	mov	r9, r0
 8014494:	4638      	mov	r0, r7
 8014496:	460e      	mov	r6, r1
 8014498:	9217      	str	r2, [sp, #92]	; 0x5c
 801449a:	931c      	str	r3, [sp, #112]	; 0x70
 801449c:	f002 f804 	bl	80164a8 <__localeconv_l>
 80144a0:	4680      	mov	r8, r0
 80144a2:	6800      	ldr	r0, [r0, #0]
 80144a4:	f7eb fe9e 	bl	80001e4 <strlen>
 80144a8:	f04f 0a00 	mov.w	sl, #0
 80144ac:	4604      	mov	r4, r0
 80144ae:	f04f 0b00 	mov.w	fp, #0
 80144b2:	961b      	str	r6, [sp, #108]	; 0x6c
 80144b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80144b6:	781a      	ldrb	r2, [r3, #0]
 80144b8:	2a0d      	cmp	r2, #13
 80144ba:	d832      	bhi.n	8014522 <_strtod_l+0x9a>
 80144bc:	2a09      	cmp	r2, #9
 80144be:	d236      	bcs.n	801452e <_strtod_l+0xa6>
 80144c0:	2a00      	cmp	r2, #0
 80144c2:	d03e      	beq.n	8014542 <_strtod_l+0xba>
 80144c4:	2300      	movs	r3, #0
 80144c6:	930d      	str	r3, [sp, #52]	; 0x34
 80144c8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80144ca:	782b      	ldrb	r3, [r5, #0]
 80144cc:	2b30      	cmp	r3, #48	; 0x30
 80144ce:	f040 80ac 	bne.w	801462a <_strtod_l+0x1a2>
 80144d2:	786b      	ldrb	r3, [r5, #1]
 80144d4:	2b58      	cmp	r3, #88	; 0x58
 80144d6:	d001      	beq.n	80144dc <_strtod_l+0x54>
 80144d8:	2b78      	cmp	r3, #120	; 0x78
 80144da:	d167      	bne.n	80145ac <_strtod_l+0x124>
 80144dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80144de:	9301      	str	r3, [sp, #4]
 80144e0:	ab1c      	add	r3, sp, #112	; 0x70
 80144e2:	9300      	str	r3, [sp, #0]
 80144e4:	9702      	str	r7, [sp, #8]
 80144e6:	ab1d      	add	r3, sp, #116	; 0x74
 80144e8:	4a88      	ldr	r2, [pc, #544]	; (801470c <_strtod_l+0x284>)
 80144ea:	a91b      	add	r1, sp, #108	; 0x6c
 80144ec:	4648      	mov	r0, r9
 80144ee:	f001 fcf2 	bl	8015ed6 <__gethex>
 80144f2:	f010 0407 	ands.w	r4, r0, #7
 80144f6:	4606      	mov	r6, r0
 80144f8:	d005      	beq.n	8014506 <_strtod_l+0x7e>
 80144fa:	2c06      	cmp	r4, #6
 80144fc:	d12b      	bne.n	8014556 <_strtod_l+0xce>
 80144fe:	3501      	adds	r5, #1
 8014500:	2300      	movs	r3, #0
 8014502:	951b      	str	r5, [sp, #108]	; 0x6c
 8014504:	930d      	str	r3, [sp, #52]	; 0x34
 8014506:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014508:	2b00      	cmp	r3, #0
 801450a:	f040 859a 	bne.w	8015042 <_strtod_l+0xbba>
 801450e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014510:	b1e3      	cbz	r3, 801454c <_strtod_l+0xc4>
 8014512:	4652      	mov	r2, sl
 8014514:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8014518:	ec43 2b10 	vmov	d0, r2, r3
 801451c:	b021      	add	sp, #132	; 0x84
 801451e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014522:	2a2b      	cmp	r2, #43	; 0x2b
 8014524:	d015      	beq.n	8014552 <_strtod_l+0xca>
 8014526:	2a2d      	cmp	r2, #45	; 0x2d
 8014528:	d004      	beq.n	8014534 <_strtod_l+0xac>
 801452a:	2a20      	cmp	r2, #32
 801452c:	d1ca      	bne.n	80144c4 <_strtod_l+0x3c>
 801452e:	3301      	adds	r3, #1
 8014530:	931b      	str	r3, [sp, #108]	; 0x6c
 8014532:	e7bf      	b.n	80144b4 <_strtod_l+0x2c>
 8014534:	2201      	movs	r2, #1
 8014536:	920d      	str	r2, [sp, #52]	; 0x34
 8014538:	1c5a      	adds	r2, r3, #1
 801453a:	921b      	str	r2, [sp, #108]	; 0x6c
 801453c:	785b      	ldrb	r3, [r3, #1]
 801453e:	2b00      	cmp	r3, #0
 8014540:	d1c2      	bne.n	80144c8 <_strtod_l+0x40>
 8014542:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014544:	961b      	str	r6, [sp, #108]	; 0x6c
 8014546:	2b00      	cmp	r3, #0
 8014548:	f040 8579 	bne.w	801503e <_strtod_l+0xbb6>
 801454c:	4652      	mov	r2, sl
 801454e:	465b      	mov	r3, fp
 8014550:	e7e2      	b.n	8014518 <_strtod_l+0x90>
 8014552:	2200      	movs	r2, #0
 8014554:	e7ef      	b.n	8014536 <_strtod_l+0xae>
 8014556:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014558:	b13a      	cbz	r2, 801456a <_strtod_l+0xe2>
 801455a:	2135      	movs	r1, #53	; 0x35
 801455c:	a81e      	add	r0, sp, #120	; 0x78
 801455e:	f002 fb8b 	bl	8016c78 <__copybits>
 8014562:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014564:	4648      	mov	r0, r9
 8014566:	f001 fff7 	bl	8016558 <_Bfree>
 801456a:	3c01      	subs	r4, #1
 801456c:	2c04      	cmp	r4, #4
 801456e:	d806      	bhi.n	801457e <_strtod_l+0xf6>
 8014570:	e8df f004 	tbb	[pc, r4]
 8014574:	1714030a 	.word	0x1714030a
 8014578:	0a          	.byte	0x0a
 8014579:	00          	.byte	0x00
 801457a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 801457e:	0730      	lsls	r0, r6, #28
 8014580:	d5c1      	bpl.n	8014506 <_strtod_l+0x7e>
 8014582:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8014586:	e7be      	b.n	8014506 <_strtod_l+0x7e>
 8014588:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 801458c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801458e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8014592:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8014596:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801459a:	e7f0      	b.n	801457e <_strtod_l+0xf6>
 801459c:	f8df b170 	ldr.w	fp, [pc, #368]	; 8014710 <_strtod_l+0x288>
 80145a0:	e7ed      	b.n	801457e <_strtod_l+0xf6>
 80145a2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80145a6:	f04f 3aff 	mov.w	sl, #4294967295
 80145aa:	e7e8      	b.n	801457e <_strtod_l+0xf6>
 80145ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80145ae:	1c5a      	adds	r2, r3, #1
 80145b0:	921b      	str	r2, [sp, #108]	; 0x6c
 80145b2:	785b      	ldrb	r3, [r3, #1]
 80145b4:	2b30      	cmp	r3, #48	; 0x30
 80145b6:	d0f9      	beq.n	80145ac <_strtod_l+0x124>
 80145b8:	2b00      	cmp	r3, #0
 80145ba:	d0a4      	beq.n	8014506 <_strtod_l+0x7e>
 80145bc:	2301      	movs	r3, #1
 80145be:	2500      	movs	r5, #0
 80145c0:	9306      	str	r3, [sp, #24]
 80145c2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80145c4:	9308      	str	r3, [sp, #32]
 80145c6:	9507      	str	r5, [sp, #28]
 80145c8:	9505      	str	r5, [sp, #20]
 80145ca:	220a      	movs	r2, #10
 80145cc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80145ce:	7807      	ldrb	r7, [r0, #0]
 80145d0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80145d4:	b2d9      	uxtb	r1, r3
 80145d6:	2909      	cmp	r1, #9
 80145d8:	d929      	bls.n	801462e <_strtod_l+0x1a6>
 80145da:	4622      	mov	r2, r4
 80145dc:	f8d8 1000 	ldr.w	r1, [r8]
 80145e0:	f003 f81a 	bl	8017618 <strncmp>
 80145e4:	2800      	cmp	r0, #0
 80145e6:	d031      	beq.n	801464c <_strtod_l+0x1c4>
 80145e8:	2000      	movs	r0, #0
 80145ea:	9c05      	ldr	r4, [sp, #20]
 80145ec:	9004      	str	r0, [sp, #16]
 80145ee:	463b      	mov	r3, r7
 80145f0:	4602      	mov	r2, r0
 80145f2:	2b65      	cmp	r3, #101	; 0x65
 80145f4:	d001      	beq.n	80145fa <_strtod_l+0x172>
 80145f6:	2b45      	cmp	r3, #69	; 0x45
 80145f8:	d114      	bne.n	8014624 <_strtod_l+0x19c>
 80145fa:	b924      	cbnz	r4, 8014606 <_strtod_l+0x17e>
 80145fc:	b910      	cbnz	r0, 8014604 <_strtod_l+0x17c>
 80145fe:	9b06      	ldr	r3, [sp, #24]
 8014600:	2b00      	cmp	r3, #0
 8014602:	d09e      	beq.n	8014542 <_strtod_l+0xba>
 8014604:	2400      	movs	r4, #0
 8014606:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8014608:	1c73      	adds	r3, r6, #1
 801460a:	931b      	str	r3, [sp, #108]	; 0x6c
 801460c:	7873      	ldrb	r3, [r6, #1]
 801460e:	2b2b      	cmp	r3, #43	; 0x2b
 8014610:	d078      	beq.n	8014704 <_strtod_l+0x27c>
 8014612:	2b2d      	cmp	r3, #45	; 0x2d
 8014614:	d070      	beq.n	80146f8 <_strtod_l+0x270>
 8014616:	f04f 0c00 	mov.w	ip, #0
 801461a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 801461e:	2f09      	cmp	r7, #9
 8014620:	d97c      	bls.n	801471c <_strtod_l+0x294>
 8014622:	961b      	str	r6, [sp, #108]	; 0x6c
 8014624:	f04f 0e00 	mov.w	lr, #0
 8014628:	e09a      	b.n	8014760 <_strtod_l+0x2d8>
 801462a:	2300      	movs	r3, #0
 801462c:	e7c7      	b.n	80145be <_strtod_l+0x136>
 801462e:	9905      	ldr	r1, [sp, #20]
 8014630:	2908      	cmp	r1, #8
 8014632:	bfdd      	ittte	le
 8014634:	9907      	ldrle	r1, [sp, #28]
 8014636:	fb02 3301 	mlale	r3, r2, r1, r3
 801463a:	9307      	strle	r3, [sp, #28]
 801463c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8014640:	9b05      	ldr	r3, [sp, #20]
 8014642:	3001      	adds	r0, #1
 8014644:	3301      	adds	r3, #1
 8014646:	9305      	str	r3, [sp, #20]
 8014648:	901b      	str	r0, [sp, #108]	; 0x6c
 801464a:	e7bf      	b.n	80145cc <_strtod_l+0x144>
 801464c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801464e:	191a      	adds	r2, r3, r4
 8014650:	921b      	str	r2, [sp, #108]	; 0x6c
 8014652:	9a05      	ldr	r2, [sp, #20]
 8014654:	5d1b      	ldrb	r3, [r3, r4]
 8014656:	2a00      	cmp	r2, #0
 8014658:	d037      	beq.n	80146ca <_strtod_l+0x242>
 801465a:	9c05      	ldr	r4, [sp, #20]
 801465c:	4602      	mov	r2, r0
 801465e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8014662:	2909      	cmp	r1, #9
 8014664:	d913      	bls.n	801468e <_strtod_l+0x206>
 8014666:	2101      	movs	r1, #1
 8014668:	9104      	str	r1, [sp, #16]
 801466a:	e7c2      	b.n	80145f2 <_strtod_l+0x16a>
 801466c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801466e:	1c5a      	adds	r2, r3, #1
 8014670:	921b      	str	r2, [sp, #108]	; 0x6c
 8014672:	785b      	ldrb	r3, [r3, #1]
 8014674:	3001      	adds	r0, #1
 8014676:	2b30      	cmp	r3, #48	; 0x30
 8014678:	d0f8      	beq.n	801466c <_strtod_l+0x1e4>
 801467a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801467e:	2a08      	cmp	r2, #8
 8014680:	f200 84e4 	bhi.w	801504c <_strtod_l+0xbc4>
 8014684:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8014686:	9208      	str	r2, [sp, #32]
 8014688:	4602      	mov	r2, r0
 801468a:	2000      	movs	r0, #0
 801468c:	4604      	mov	r4, r0
 801468e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8014692:	f100 0101 	add.w	r1, r0, #1
 8014696:	d012      	beq.n	80146be <_strtod_l+0x236>
 8014698:	440a      	add	r2, r1
 801469a:	eb00 0c04 	add.w	ip, r0, r4
 801469e:	4621      	mov	r1, r4
 80146a0:	270a      	movs	r7, #10
 80146a2:	458c      	cmp	ip, r1
 80146a4:	d113      	bne.n	80146ce <_strtod_l+0x246>
 80146a6:	1821      	adds	r1, r4, r0
 80146a8:	2908      	cmp	r1, #8
 80146aa:	f104 0401 	add.w	r4, r4, #1
 80146ae:	4404      	add	r4, r0
 80146b0:	dc19      	bgt.n	80146e6 <_strtod_l+0x25e>
 80146b2:	9b07      	ldr	r3, [sp, #28]
 80146b4:	210a      	movs	r1, #10
 80146b6:	fb01 e303 	mla	r3, r1, r3, lr
 80146ba:	9307      	str	r3, [sp, #28]
 80146bc:	2100      	movs	r1, #0
 80146be:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80146c0:	1c58      	adds	r0, r3, #1
 80146c2:	901b      	str	r0, [sp, #108]	; 0x6c
 80146c4:	785b      	ldrb	r3, [r3, #1]
 80146c6:	4608      	mov	r0, r1
 80146c8:	e7c9      	b.n	801465e <_strtod_l+0x1d6>
 80146ca:	9805      	ldr	r0, [sp, #20]
 80146cc:	e7d3      	b.n	8014676 <_strtod_l+0x1ee>
 80146ce:	2908      	cmp	r1, #8
 80146d0:	f101 0101 	add.w	r1, r1, #1
 80146d4:	dc03      	bgt.n	80146de <_strtod_l+0x256>
 80146d6:	9b07      	ldr	r3, [sp, #28]
 80146d8:	437b      	muls	r3, r7
 80146da:	9307      	str	r3, [sp, #28]
 80146dc:	e7e1      	b.n	80146a2 <_strtod_l+0x21a>
 80146de:	2910      	cmp	r1, #16
 80146e0:	bfd8      	it	le
 80146e2:	437d      	mulle	r5, r7
 80146e4:	e7dd      	b.n	80146a2 <_strtod_l+0x21a>
 80146e6:	2c10      	cmp	r4, #16
 80146e8:	bfdc      	itt	le
 80146ea:	210a      	movle	r1, #10
 80146ec:	fb01 e505 	mlale	r5, r1, r5, lr
 80146f0:	e7e4      	b.n	80146bc <_strtod_l+0x234>
 80146f2:	2301      	movs	r3, #1
 80146f4:	9304      	str	r3, [sp, #16]
 80146f6:	e781      	b.n	80145fc <_strtod_l+0x174>
 80146f8:	f04f 0c01 	mov.w	ip, #1
 80146fc:	1cb3      	adds	r3, r6, #2
 80146fe:	931b      	str	r3, [sp, #108]	; 0x6c
 8014700:	78b3      	ldrb	r3, [r6, #2]
 8014702:	e78a      	b.n	801461a <_strtod_l+0x192>
 8014704:	f04f 0c00 	mov.w	ip, #0
 8014708:	e7f8      	b.n	80146fc <_strtod_l+0x274>
 801470a:	bf00      	nop
 801470c:	08019730 	.word	0x08019730
 8014710:	7ff00000 	.word	0x7ff00000
 8014714:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014716:	1c5f      	adds	r7, r3, #1
 8014718:	971b      	str	r7, [sp, #108]	; 0x6c
 801471a:	785b      	ldrb	r3, [r3, #1]
 801471c:	2b30      	cmp	r3, #48	; 0x30
 801471e:	d0f9      	beq.n	8014714 <_strtod_l+0x28c>
 8014720:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8014724:	2f08      	cmp	r7, #8
 8014726:	f63f af7d 	bhi.w	8014624 <_strtod_l+0x19c>
 801472a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801472e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014730:	930a      	str	r3, [sp, #40]	; 0x28
 8014732:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014734:	1c5f      	adds	r7, r3, #1
 8014736:	971b      	str	r7, [sp, #108]	; 0x6c
 8014738:	785b      	ldrb	r3, [r3, #1]
 801473a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 801473e:	f1b8 0f09 	cmp.w	r8, #9
 8014742:	d937      	bls.n	80147b4 <_strtod_l+0x32c>
 8014744:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014746:	1a7f      	subs	r7, r7, r1
 8014748:	2f08      	cmp	r7, #8
 801474a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801474e:	dc37      	bgt.n	80147c0 <_strtod_l+0x338>
 8014750:	45be      	cmp	lr, r7
 8014752:	bfa8      	it	ge
 8014754:	46be      	movge	lr, r7
 8014756:	f1bc 0f00 	cmp.w	ip, #0
 801475a:	d001      	beq.n	8014760 <_strtod_l+0x2d8>
 801475c:	f1ce 0e00 	rsb	lr, lr, #0
 8014760:	2c00      	cmp	r4, #0
 8014762:	d151      	bne.n	8014808 <_strtod_l+0x380>
 8014764:	2800      	cmp	r0, #0
 8014766:	f47f aece 	bne.w	8014506 <_strtod_l+0x7e>
 801476a:	9a06      	ldr	r2, [sp, #24]
 801476c:	2a00      	cmp	r2, #0
 801476e:	f47f aeca 	bne.w	8014506 <_strtod_l+0x7e>
 8014772:	9a04      	ldr	r2, [sp, #16]
 8014774:	2a00      	cmp	r2, #0
 8014776:	f47f aee4 	bne.w	8014542 <_strtod_l+0xba>
 801477a:	2b4e      	cmp	r3, #78	; 0x4e
 801477c:	d027      	beq.n	80147ce <_strtod_l+0x346>
 801477e:	dc21      	bgt.n	80147c4 <_strtod_l+0x33c>
 8014780:	2b49      	cmp	r3, #73	; 0x49
 8014782:	f47f aede 	bne.w	8014542 <_strtod_l+0xba>
 8014786:	49a0      	ldr	r1, [pc, #640]	; (8014a08 <_strtod_l+0x580>)
 8014788:	a81b      	add	r0, sp, #108	; 0x6c
 801478a:	f001 fdd7 	bl	801633c <__match>
 801478e:	2800      	cmp	r0, #0
 8014790:	f43f aed7 	beq.w	8014542 <_strtod_l+0xba>
 8014794:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014796:	499d      	ldr	r1, [pc, #628]	; (8014a0c <_strtod_l+0x584>)
 8014798:	3b01      	subs	r3, #1
 801479a:	a81b      	add	r0, sp, #108	; 0x6c
 801479c:	931b      	str	r3, [sp, #108]	; 0x6c
 801479e:	f001 fdcd 	bl	801633c <__match>
 80147a2:	b910      	cbnz	r0, 80147aa <_strtod_l+0x322>
 80147a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80147a6:	3301      	adds	r3, #1
 80147a8:	931b      	str	r3, [sp, #108]	; 0x6c
 80147aa:	f8df b274 	ldr.w	fp, [pc, #628]	; 8014a20 <_strtod_l+0x598>
 80147ae:	f04f 0a00 	mov.w	sl, #0
 80147b2:	e6a8      	b.n	8014506 <_strtod_l+0x7e>
 80147b4:	210a      	movs	r1, #10
 80147b6:	fb01 3e0e 	mla	lr, r1, lr, r3
 80147ba:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80147be:	e7b8      	b.n	8014732 <_strtod_l+0x2aa>
 80147c0:	46be      	mov	lr, r7
 80147c2:	e7c8      	b.n	8014756 <_strtod_l+0x2ce>
 80147c4:	2b69      	cmp	r3, #105	; 0x69
 80147c6:	d0de      	beq.n	8014786 <_strtod_l+0x2fe>
 80147c8:	2b6e      	cmp	r3, #110	; 0x6e
 80147ca:	f47f aeba 	bne.w	8014542 <_strtod_l+0xba>
 80147ce:	4990      	ldr	r1, [pc, #576]	; (8014a10 <_strtod_l+0x588>)
 80147d0:	a81b      	add	r0, sp, #108	; 0x6c
 80147d2:	f001 fdb3 	bl	801633c <__match>
 80147d6:	2800      	cmp	r0, #0
 80147d8:	f43f aeb3 	beq.w	8014542 <_strtod_l+0xba>
 80147dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80147de:	781b      	ldrb	r3, [r3, #0]
 80147e0:	2b28      	cmp	r3, #40	; 0x28
 80147e2:	d10e      	bne.n	8014802 <_strtod_l+0x37a>
 80147e4:	aa1e      	add	r2, sp, #120	; 0x78
 80147e6:	498b      	ldr	r1, [pc, #556]	; (8014a14 <_strtod_l+0x58c>)
 80147e8:	a81b      	add	r0, sp, #108	; 0x6c
 80147ea:	f001 fdbb 	bl	8016364 <__hexnan>
 80147ee:	2805      	cmp	r0, #5
 80147f0:	d107      	bne.n	8014802 <_strtod_l+0x37a>
 80147f2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80147f4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 80147f8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80147fc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8014800:	e681      	b.n	8014506 <_strtod_l+0x7e>
 8014802:	f8df b224 	ldr.w	fp, [pc, #548]	; 8014a28 <_strtod_l+0x5a0>
 8014806:	e7d2      	b.n	80147ae <_strtod_l+0x326>
 8014808:	ebae 0302 	sub.w	r3, lr, r2
 801480c:	9306      	str	r3, [sp, #24]
 801480e:	9b05      	ldr	r3, [sp, #20]
 8014810:	9807      	ldr	r0, [sp, #28]
 8014812:	2b00      	cmp	r3, #0
 8014814:	bf08      	it	eq
 8014816:	4623      	moveq	r3, r4
 8014818:	2c10      	cmp	r4, #16
 801481a:	9305      	str	r3, [sp, #20]
 801481c:	46a0      	mov	r8, r4
 801481e:	bfa8      	it	ge
 8014820:	f04f 0810 	movge.w	r8, #16
 8014824:	f7eb fe7e 	bl	8000524 <__aeabi_ui2d>
 8014828:	2c09      	cmp	r4, #9
 801482a:	4682      	mov	sl, r0
 801482c:	468b      	mov	fp, r1
 801482e:	dc13      	bgt.n	8014858 <_strtod_l+0x3d0>
 8014830:	9b06      	ldr	r3, [sp, #24]
 8014832:	2b00      	cmp	r3, #0
 8014834:	f43f ae67 	beq.w	8014506 <_strtod_l+0x7e>
 8014838:	9b06      	ldr	r3, [sp, #24]
 801483a:	dd7a      	ble.n	8014932 <_strtod_l+0x4aa>
 801483c:	2b16      	cmp	r3, #22
 801483e:	dc61      	bgt.n	8014904 <_strtod_l+0x47c>
 8014840:	4a75      	ldr	r2, [pc, #468]	; (8014a18 <_strtod_l+0x590>)
 8014842:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8014846:	e9de 0100 	ldrd	r0, r1, [lr]
 801484a:	4652      	mov	r2, sl
 801484c:	465b      	mov	r3, fp
 801484e:	f7eb fee3 	bl	8000618 <__aeabi_dmul>
 8014852:	4682      	mov	sl, r0
 8014854:	468b      	mov	fp, r1
 8014856:	e656      	b.n	8014506 <_strtod_l+0x7e>
 8014858:	4b6f      	ldr	r3, [pc, #444]	; (8014a18 <_strtod_l+0x590>)
 801485a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801485e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8014862:	f7eb fed9 	bl	8000618 <__aeabi_dmul>
 8014866:	4606      	mov	r6, r0
 8014868:	4628      	mov	r0, r5
 801486a:	460f      	mov	r7, r1
 801486c:	f7eb fe5a 	bl	8000524 <__aeabi_ui2d>
 8014870:	4602      	mov	r2, r0
 8014872:	460b      	mov	r3, r1
 8014874:	4630      	mov	r0, r6
 8014876:	4639      	mov	r1, r7
 8014878:	f7eb fd18 	bl	80002ac <__adddf3>
 801487c:	2c0f      	cmp	r4, #15
 801487e:	4682      	mov	sl, r0
 8014880:	468b      	mov	fp, r1
 8014882:	ddd5      	ble.n	8014830 <_strtod_l+0x3a8>
 8014884:	9b06      	ldr	r3, [sp, #24]
 8014886:	eba4 0808 	sub.w	r8, r4, r8
 801488a:	4498      	add	r8, r3
 801488c:	f1b8 0f00 	cmp.w	r8, #0
 8014890:	f340 8096 	ble.w	80149c0 <_strtod_l+0x538>
 8014894:	f018 030f 	ands.w	r3, r8, #15
 8014898:	d00a      	beq.n	80148b0 <_strtod_l+0x428>
 801489a:	495f      	ldr	r1, [pc, #380]	; (8014a18 <_strtod_l+0x590>)
 801489c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80148a0:	4652      	mov	r2, sl
 80148a2:	465b      	mov	r3, fp
 80148a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80148a8:	f7eb feb6 	bl	8000618 <__aeabi_dmul>
 80148ac:	4682      	mov	sl, r0
 80148ae:	468b      	mov	fp, r1
 80148b0:	f038 080f 	bics.w	r8, r8, #15
 80148b4:	d073      	beq.n	801499e <_strtod_l+0x516>
 80148b6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80148ba:	dd47      	ble.n	801494c <_strtod_l+0x4c4>
 80148bc:	2400      	movs	r4, #0
 80148be:	46a0      	mov	r8, r4
 80148c0:	9407      	str	r4, [sp, #28]
 80148c2:	9405      	str	r4, [sp, #20]
 80148c4:	2322      	movs	r3, #34	; 0x22
 80148c6:	f8df b158 	ldr.w	fp, [pc, #344]	; 8014a20 <_strtod_l+0x598>
 80148ca:	f8c9 3000 	str.w	r3, [r9]
 80148ce:	f04f 0a00 	mov.w	sl, #0
 80148d2:	9b07      	ldr	r3, [sp, #28]
 80148d4:	2b00      	cmp	r3, #0
 80148d6:	f43f ae16 	beq.w	8014506 <_strtod_l+0x7e>
 80148da:	991c      	ldr	r1, [sp, #112]	; 0x70
 80148dc:	4648      	mov	r0, r9
 80148de:	f001 fe3b 	bl	8016558 <_Bfree>
 80148e2:	9905      	ldr	r1, [sp, #20]
 80148e4:	4648      	mov	r0, r9
 80148e6:	f001 fe37 	bl	8016558 <_Bfree>
 80148ea:	4641      	mov	r1, r8
 80148ec:	4648      	mov	r0, r9
 80148ee:	f001 fe33 	bl	8016558 <_Bfree>
 80148f2:	9907      	ldr	r1, [sp, #28]
 80148f4:	4648      	mov	r0, r9
 80148f6:	f001 fe2f 	bl	8016558 <_Bfree>
 80148fa:	4621      	mov	r1, r4
 80148fc:	4648      	mov	r0, r9
 80148fe:	f001 fe2b 	bl	8016558 <_Bfree>
 8014902:	e600      	b.n	8014506 <_strtod_l+0x7e>
 8014904:	9a06      	ldr	r2, [sp, #24]
 8014906:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 801490a:	4293      	cmp	r3, r2
 801490c:	dbba      	blt.n	8014884 <_strtod_l+0x3fc>
 801490e:	4d42      	ldr	r5, [pc, #264]	; (8014a18 <_strtod_l+0x590>)
 8014910:	f1c4 040f 	rsb	r4, r4, #15
 8014914:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8014918:	4652      	mov	r2, sl
 801491a:	465b      	mov	r3, fp
 801491c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014920:	f7eb fe7a 	bl	8000618 <__aeabi_dmul>
 8014924:	9b06      	ldr	r3, [sp, #24]
 8014926:	1b1c      	subs	r4, r3, r4
 8014928:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 801492c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014930:	e78d      	b.n	801484e <_strtod_l+0x3c6>
 8014932:	f113 0f16 	cmn.w	r3, #22
 8014936:	dba5      	blt.n	8014884 <_strtod_l+0x3fc>
 8014938:	4a37      	ldr	r2, [pc, #220]	; (8014a18 <_strtod_l+0x590>)
 801493a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 801493e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8014942:	4650      	mov	r0, sl
 8014944:	4659      	mov	r1, fp
 8014946:	f7eb ff91 	bl	800086c <__aeabi_ddiv>
 801494a:	e782      	b.n	8014852 <_strtod_l+0x3ca>
 801494c:	2300      	movs	r3, #0
 801494e:	4e33      	ldr	r6, [pc, #204]	; (8014a1c <_strtod_l+0x594>)
 8014950:	ea4f 1828 	mov.w	r8, r8, asr #4
 8014954:	4650      	mov	r0, sl
 8014956:	4659      	mov	r1, fp
 8014958:	461d      	mov	r5, r3
 801495a:	f1b8 0f01 	cmp.w	r8, #1
 801495e:	dc21      	bgt.n	80149a4 <_strtod_l+0x51c>
 8014960:	b10b      	cbz	r3, 8014966 <_strtod_l+0x4de>
 8014962:	4682      	mov	sl, r0
 8014964:	468b      	mov	fp, r1
 8014966:	4b2d      	ldr	r3, [pc, #180]	; (8014a1c <_strtod_l+0x594>)
 8014968:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801496c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8014970:	4652      	mov	r2, sl
 8014972:	465b      	mov	r3, fp
 8014974:	e9d5 0100 	ldrd	r0, r1, [r5]
 8014978:	f7eb fe4e 	bl	8000618 <__aeabi_dmul>
 801497c:	4b28      	ldr	r3, [pc, #160]	; (8014a20 <_strtod_l+0x598>)
 801497e:	460a      	mov	r2, r1
 8014980:	400b      	ands	r3, r1
 8014982:	4928      	ldr	r1, [pc, #160]	; (8014a24 <_strtod_l+0x59c>)
 8014984:	428b      	cmp	r3, r1
 8014986:	4682      	mov	sl, r0
 8014988:	d898      	bhi.n	80148bc <_strtod_l+0x434>
 801498a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801498e:	428b      	cmp	r3, r1
 8014990:	bf86      	itte	hi
 8014992:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8014a2c <_strtod_l+0x5a4>
 8014996:	f04f 3aff 	movhi.w	sl, #4294967295
 801499a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801499e:	2300      	movs	r3, #0
 80149a0:	9304      	str	r3, [sp, #16]
 80149a2:	e077      	b.n	8014a94 <_strtod_l+0x60c>
 80149a4:	f018 0f01 	tst.w	r8, #1
 80149a8:	d006      	beq.n	80149b8 <_strtod_l+0x530>
 80149aa:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80149ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149b2:	f7eb fe31 	bl	8000618 <__aeabi_dmul>
 80149b6:	2301      	movs	r3, #1
 80149b8:	3501      	adds	r5, #1
 80149ba:	ea4f 0868 	mov.w	r8, r8, asr #1
 80149be:	e7cc      	b.n	801495a <_strtod_l+0x4d2>
 80149c0:	d0ed      	beq.n	801499e <_strtod_l+0x516>
 80149c2:	f1c8 0800 	rsb	r8, r8, #0
 80149c6:	f018 020f 	ands.w	r2, r8, #15
 80149ca:	d00a      	beq.n	80149e2 <_strtod_l+0x55a>
 80149cc:	4b12      	ldr	r3, [pc, #72]	; (8014a18 <_strtod_l+0x590>)
 80149ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80149d2:	4650      	mov	r0, sl
 80149d4:	4659      	mov	r1, fp
 80149d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149da:	f7eb ff47 	bl	800086c <__aeabi_ddiv>
 80149de:	4682      	mov	sl, r0
 80149e0:	468b      	mov	fp, r1
 80149e2:	ea5f 1828 	movs.w	r8, r8, asr #4
 80149e6:	d0da      	beq.n	801499e <_strtod_l+0x516>
 80149e8:	f1b8 0f1f 	cmp.w	r8, #31
 80149ec:	dd20      	ble.n	8014a30 <_strtod_l+0x5a8>
 80149ee:	2400      	movs	r4, #0
 80149f0:	46a0      	mov	r8, r4
 80149f2:	9407      	str	r4, [sp, #28]
 80149f4:	9405      	str	r4, [sp, #20]
 80149f6:	2322      	movs	r3, #34	; 0x22
 80149f8:	f04f 0a00 	mov.w	sl, #0
 80149fc:	f04f 0b00 	mov.w	fp, #0
 8014a00:	f8c9 3000 	str.w	r3, [r9]
 8014a04:	e765      	b.n	80148d2 <_strtod_l+0x44a>
 8014a06:	bf00      	nop
 8014a08:	080196fd 	.word	0x080196fd
 8014a0c:	08019783 	.word	0x08019783
 8014a10:	08019705 	.word	0x08019705
 8014a14:	08019744 	.word	0x08019744
 8014a18:	080197c0 	.word	0x080197c0
 8014a1c:	08019798 	.word	0x08019798
 8014a20:	7ff00000 	.word	0x7ff00000
 8014a24:	7ca00000 	.word	0x7ca00000
 8014a28:	fff80000 	.word	0xfff80000
 8014a2c:	7fefffff 	.word	0x7fefffff
 8014a30:	f018 0310 	ands.w	r3, r8, #16
 8014a34:	bf18      	it	ne
 8014a36:	236a      	movne	r3, #106	; 0x6a
 8014a38:	4da0      	ldr	r5, [pc, #640]	; (8014cbc <_strtod_l+0x834>)
 8014a3a:	9304      	str	r3, [sp, #16]
 8014a3c:	4650      	mov	r0, sl
 8014a3e:	4659      	mov	r1, fp
 8014a40:	2300      	movs	r3, #0
 8014a42:	f1b8 0f00 	cmp.w	r8, #0
 8014a46:	f300 810a 	bgt.w	8014c5e <_strtod_l+0x7d6>
 8014a4a:	b10b      	cbz	r3, 8014a50 <_strtod_l+0x5c8>
 8014a4c:	4682      	mov	sl, r0
 8014a4e:	468b      	mov	fp, r1
 8014a50:	9b04      	ldr	r3, [sp, #16]
 8014a52:	b1bb      	cbz	r3, 8014a84 <_strtod_l+0x5fc>
 8014a54:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8014a58:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	4659      	mov	r1, fp
 8014a60:	dd10      	ble.n	8014a84 <_strtod_l+0x5fc>
 8014a62:	2b1f      	cmp	r3, #31
 8014a64:	f340 8107 	ble.w	8014c76 <_strtod_l+0x7ee>
 8014a68:	2b34      	cmp	r3, #52	; 0x34
 8014a6a:	bfde      	ittt	le
 8014a6c:	3b20      	suble	r3, #32
 8014a6e:	f04f 32ff 	movle.w	r2, #4294967295
 8014a72:	fa02 f303 	lslle.w	r3, r2, r3
 8014a76:	f04f 0a00 	mov.w	sl, #0
 8014a7a:	bfcc      	ite	gt
 8014a7c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8014a80:	ea03 0b01 	andle.w	fp, r3, r1
 8014a84:	2200      	movs	r2, #0
 8014a86:	2300      	movs	r3, #0
 8014a88:	4650      	mov	r0, sl
 8014a8a:	4659      	mov	r1, fp
 8014a8c:	f7ec f82c 	bl	8000ae8 <__aeabi_dcmpeq>
 8014a90:	2800      	cmp	r0, #0
 8014a92:	d1ac      	bne.n	80149ee <_strtod_l+0x566>
 8014a94:	9b07      	ldr	r3, [sp, #28]
 8014a96:	9300      	str	r3, [sp, #0]
 8014a98:	9a05      	ldr	r2, [sp, #20]
 8014a9a:	9908      	ldr	r1, [sp, #32]
 8014a9c:	4623      	mov	r3, r4
 8014a9e:	4648      	mov	r0, r9
 8014aa0:	f001 fdac 	bl	80165fc <__s2b>
 8014aa4:	9007      	str	r0, [sp, #28]
 8014aa6:	2800      	cmp	r0, #0
 8014aa8:	f43f af08 	beq.w	80148bc <_strtod_l+0x434>
 8014aac:	9a06      	ldr	r2, [sp, #24]
 8014aae:	9b06      	ldr	r3, [sp, #24]
 8014ab0:	2a00      	cmp	r2, #0
 8014ab2:	f1c3 0300 	rsb	r3, r3, #0
 8014ab6:	bfa8      	it	ge
 8014ab8:	2300      	movge	r3, #0
 8014aba:	930e      	str	r3, [sp, #56]	; 0x38
 8014abc:	2400      	movs	r4, #0
 8014abe:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8014ac2:	9316      	str	r3, [sp, #88]	; 0x58
 8014ac4:	46a0      	mov	r8, r4
 8014ac6:	9b07      	ldr	r3, [sp, #28]
 8014ac8:	4648      	mov	r0, r9
 8014aca:	6859      	ldr	r1, [r3, #4]
 8014acc:	f001 fd10 	bl	80164f0 <_Balloc>
 8014ad0:	9005      	str	r0, [sp, #20]
 8014ad2:	2800      	cmp	r0, #0
 8014ad4:	f43f aef6 	beq.w	80148c4 <_strtod_l+0x43c>
 8014ad8:	9b07      	ldr	r3, [sp, #28]
 8014ada:	691a      	ldr	r2, [r3, #16]
 8014adc:	3202      	adds	r2, #2
 8014ade:	f103 010c 	add.w	r1, r3, #12
 8014ae2:	0092      	lsls	r2, r2, #2
 8014ae4:	300c      	adds	r0, #12
 8014ae6:	f7fe fcfb 	bl	80134e0 <memcpy>
 8014aea:	aa1e      	add	r2, sp, #120	; 0x78
 8014aec:	a91d      	add	r1, sp, #116	; 0x74
 8014aee:	ec4b ab10 	vmov	d0, sl, fp
 8014af2:	4648      	mov	r0, r9
 8014af4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8014af8:	f002 f83c 	bl	8016b74 <__d2b>
 8014afc:	901c      	str	r0, [sp, #112]	; 0x70
 8014afe:	2800      	cmp	r0, #0
 8014b00:	f43f aee0 	beq.w	80148c4 <_strtod_l+0x43c>
 8014b04:	2101      	movs	r1, #1
 8014b06:	4648      	mov	r0, r9
 8014b08:	f001 fe04 	bl	8016714 <__i2b>
 8014b0c:	4680      	mov	r8, r0
 8014b0e:	2800      	cmp	r0, #0
 8014b10:	f43f aed8 	beq.w	80148c4 <_strtod_l+0x43c>
 8014b14:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8014b16:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8014b18:	2e00      	cmp	r6, #0
 8014b1a:	bfab      	itete	ge
 8014b1c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8014b1e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8014b20:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8014b22:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8014b24:	bfac      	ite	ge
 8014b26:	18f7      	addge	r7, r6, r3
 8014b28:	1b9d      	sublt	r5, r3, r6
 8014b2a:	9b04      	ldr	r3, [sp, #16]
 8014b2c:	1af6      	subs	r6, r6, r3
 8014b2e:	4416      	add	r6, r2
 8014b30:	4b63      	ldr	r3, [pc, #396]	; (8014cc0 <_strtod_l+0x838>)
 8014b32:	3e01      	subs	r6, #1
 8014b34:	429e      	cmp	r6, r3
 8014b36:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8014b3a:	f280 80af 	bge.w	8014c9c <_strtod_l+0x814>
 8014b3e:	1b9b      	subs	r3, r3, r6
 8014b40:	2b1f      	cmp	r3, #31
 8014b42:	eba2 0203 	sub.w	r2, r2, r3
 8014b46:	f04f 0101 	mov.w	r1, #1
 8014b4a:	f300 809b 	bgt.w	8014c84 <_strtod_l+0x7fc>
 8014b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8014b52:	930f      	str	r3, [sp, #60]	; 0x3c
 8014b54:	2300      	movs	r3, #0
 8014b56:	930a      	str	r3, [sp, #40]	; 0x28
 8014b58:	18be      	adds	r6, r7, r2
 8014b5a:	9b04      	ldr	r3, [sp, #16]
 8014b5c:	42b7      	cmp	r7, r6
 8014b5e:	4415      	add	r5, r2
 8014b60:	441d      	add	r5, r3
 8014b62:	463b      	mov	r3, r7
 8014b64:	bfa8      	it	ge
 8014b66:	4633      	movge	r3, r6
 8014b68:	42ab      	cmp	r3, r5
 8014b6a:	bfa8      	it	ge
 8014b6c:	462b      	movge	r3, r5
 8014b6e:	2b00      	cmp	r3, #0
 8014b70:	bfc2      	ittt	gt
 8014b72:	1af6      	subgt	r6, r6, r3
 8014b74:	1aed      	subgt	r5, r5, r3
 8014b76:	1aff      	subgt	r7, r7, r3
 8014b78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014b7a:	b1bb      	cbz	r3, 8014bac <_strtod_l+0x724>
 8014b7c:	4641      	mov	r1, r8
 8014b7e:	461a      	mov	r2, r3
 8014b80:	4648      	mov	r0, r9
 8014b82:	f001 fe67 	bl	8016854 <__pow5mult>
 8014b86:	4680      	mov	r8, r0
 8014b88:	2800      	cmp	r0, #0
 8014b8a:	f43f ae9b 	beq.w	80148c4 <_strtod_l+0x43c>
 8014b8e:	4601      	mov	r1, r0
 8014b90:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014b92:	4648      	mov	r0, r9
 8014b94:	f001 fdc7 	bl	8016726 <__multiply>
 8014b98:	900c      	str	r0, [sp, #48]	; 0x30
 8014b9a:	2800      	cmp	r0, #0
 8014b9c:	f43f ae92 	beq.w	80148c4 <_strtod_l+0x43c>
 8014ba0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014ba2:	4648      	mov	r0, r9
 8014ba4:	f001 fcd8 	bl	8016558 <_Bfree>
 8014ba8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014baa:	931c      	str	r3, [sp, #112]	; 0x70
 8014bac:	2e00      	cmp	r6, #0
 8014bae:	dc7a      	bgt.n	8014ca6 <_strtod_l+0x81e>
 8014bb0:	9b06      	ldr	r3, [sp, #24]
 8014bb2:	2b00      	cmp	r3, #0
 8014bb4:	dd08      	ble.n	8014bc8 <_strtod_l+0x740>
 8014bb6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014bb8:	9905      	ldr	r1, [sp, #20]
 8014bba:	4648      	mov	r0, r9
 8014bbc:	f001 fe4a 	bl	8016854 <__pow5mult>
 8014bc0:	9005      	str	r0, [sp, #20]
 8014bc2:	2800      	cmp	r0, #0
 8014bc4:	f43f ae7e 	beq.w	80148c4 <_strtod_l+0x43c>
 8014bc8:	2d00      	cmp	r5, #0
 8014bca:	dd08      	ble.n	8014bde <_strtod_l+0x756>
 8014bcc:	462a      	mov	r2, r5
 8014bce:	9905      	ldr	r1, [sp, #20]
 8014bd0:	4648      	mov	r0, r9
 8014bd2:	f001 fe8d 	bl	80168f0 <__lshift>
 8014bd6:	9005      	str	r0, [sp, #20]
 8014bd8:	2800      	cmp	r0, #0
 8014bda:	f43f ae73 	beq.w	80148c4 <_strtod_l+0x43c>
 8014bde:	2f00      	cmp	r7, #0
 8014be0:	dd08      	ble.n	8014bf4 <_strtod_l+0x76c>
 8014be2:	4641      	mov	r1, r8
 8014be4:	463a      	mov	r2, r7
 8014be6:	4648      	mov	r0, r9
 8014be8:	f001 fe82 	bl	80168f0 <__lshift>
 8014bec:	4680      	mov	r8, r0
 8014bee:	2800      	cmp	r0, #0
 8014bf0:	f43f ae68 	beq.w	80148c4 <_strtod_l+0x43c>
 8014bf4:	9a05      	ldr	r2, [sp, #20]
 8014bf6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014bf8:	4648      	mov	r0, r9
 8014bfa:	f001 fee7 	bl	80169cc <__mdiff>
 8014bfe:	4604      	mov	r4, r0
 8014c00:	2800      	cmp	r0, #0
 8014c02:	f43f ae5f 	beq.w	80148c4 <_strtod_l+0x43c>
 8014c06:	68c3      	ldr	r3, [r0, #12]
 8014c08:	930c      	str	r3, [sp, #48]	; 0x30
 8014c0a:	2300      	movs	r3, #0
 8014c0c:	60c3      	str	r3, [r0, #12]
 8014c0e:	4641      	mov	r1, r8
 8014c10:	f001 fec2 	bl	8016998 <__mcmp>
 8014c14:	2800      	cmp	r0, #0
 8014c16:	da55      	bge.n	8014cc4 <_strtod_l+0x83c>
 8014c18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014c1a:	b9e3      	cbnz	r3, 8014c56 <_strtod_l+0x7ce>
 8014c1c:	f1ba 0f00 	cmp.w	sl, #0
 8014c20:	d119      	bne.n	8014c56 <_strtod_l+0x7ce>
 8014c22:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014c26:	b9b3      	cbnz	r3, 8014c56 <_strtod_l+0x7ce>
 8014c28:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014c2c:	0d1b      	lsrs	r3, r3, #20
 8014c2e:	051b      	lsls	r3, r3, #20
 8014c30:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8014c34:	d90f      	bls.n	8014c56 <_strtod_l+0x7ce>
 8014c36:	6963      	ldr	r3, [r4, #20]
 8014c38:	b913      	cbnz	r3, 8014c40 <_strtod_l+0x7b8>
 8014c3a:	6923      	ldr	r3, [r4, #16]
 8014c3c:	2b01      	cmp	r3, #1
 8014c3e:	dd0a      	ble.n	8014c56 <_strtod_l+0x7ce>
 8014c40:	4621      	mov	r1, r4
 8014c42:	2201      	movs	r2, #1
 8014c44:	4648      	mov	r0, r9
 8014c46:	f001 fe53 	bl	80168f0 <__lshift>
 8014c4a:	4641      	mov	r1, r8
 8014c4c:	4604      	mov	r4, r0
 8014c4e:	f001 fea3 	bl	8016998 <__mcmp>
 8014c52:	2800      	cmp	r0, #0
 8014c54:	dc67      	bgt.n	8014d26 <_strtod_l+0x89e>
 8014c56:	9b04      	ldr	r3, [sp, #16]
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	d171      	bne.n	8014d40 <_strtod_l+0x8b8>
 8014c5c:	e63d      	b.n	80148da <_strtod_l+0x452>
 8014c5e:	f018 0f01 	tst.w	r8, #1
 8014c62:	d004      	beq.n	8014c6e <_strtod_l+0x7e6>
 8014c64:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014c68:	f7eb fcd6 	bl	8000618 <__aeabi_dmul>
 8014c6c:	2301      	movs	r3, #1
 8014c6e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8014c72:	3508      	adds	r5, #8
 8014c74:	e6e5      	b.n	8014a42 <_strtod_l+0x5ba>
 8014c76:	f04f 32ff 	mov.w	r2, #4294967295
 8014c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8014c7e:	ea03 0a0a 	and.w	sl, r3, sl
 8014c82:	e6ff      	b.n	8014a84 <_strtod_l+0x5fc>
 8014c84:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8014c88:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8014c8c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8014c90:	36e2      	adds	r6, #226	; 0xe2
 8014c92:	fa01 f306 	lsl.w	r3, r1, r6
 8014c96:	930a      	str	r3, [sp, #40]	; 0x28
 8014c98:	910f      	str	r1, [sp, #60]	; 0x3c
 8014c9a:	e75d      	b.n	8014b58 <_strtod_l+0x6d0>
 8014c9c:	2300      	movs	r3, #0
 8014c9e:	930a      	str	r3, [sp, #40]	; 0x28
 8014ca0:	2301      	movs	r3, #1
 8014ca2:	930f      	str	r3, [sp, #60]	; 0x3c
 8014ca4:	e758      	b.n	8014b58 <_strtod_l+0x6d0>
 8014ca6:	4632      	mov	r2, r6
 8014ca8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014caa:	4648      	mov	r0, r9
 8014cac:	f001 fe20 	bl	80168f0 <__lshift>
 8014cb0:	901c      	str	r0, [sp, #112]	; 0x70
 8014cb2:	2800      	cmp	r0, #0
 8014cb4:	f47f af7c 	bne.w	8014bb0 <_strtod_l+0x728>
 8014cb8:	e604      	b.n	80148c4 <_strtod_l+0x43c>
 8014cba:	bf00      	nop
 8014cbc:	08019758 	.word	0x08019758
 8014cc0:	fffffc02 	.word	0xfffffc02
 8014cc4:	465d      	mov	r5, fp
 8014cc6:	f040 8086 	bne.w	8014dd6 <_strtod_l+0x94e>
 8014cca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014ccc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014cd0:	b32a      	cbz	r2, 8014d1e <_strtod_l+0x896>
 8014cd2:	4aaf      	ldr	r2, [pc, #700]	; (8014f90 <_strtod_l+0xb08>)
 8014cd4:	4293      	cmp	r3, r2
 8014cd6:	d153      	bne.n	8014d80 <_strtod_l+0x8f8>
 8014cd8:	9b04      	ldr	r3, [sp, #16]
 8014cda:	4650      	mov	r0, sl
 8014cdc:	b1d3      	cbz	r3, 8014d14 <_strtod_l+0x88c>
 8014cde:	4aad      	ldr	r2, [pc, #692]	; (8014f94 <_strtod_l+0xb0c>)
 8014ce0:	402a      	ands	r2, r5
 8014ce2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8014ce6:	f04f 31ff 	mov.w	r1, #4294967295
 8014cea:	d816      	bhi.n	8014d1a <_strtod_l+0x892>
 8014cec:	0d12      	lsrs	r2, r2, #20
 8014cee:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8014cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8014cf6:	4298      	cmp	r0, r3
 8014cf8:	d142      	bne.n	8014d80 <_strtod_l+0x8f8>
 8014cfa:	4ba7      	ldr	r3, [pc, #668]	; (8014f98 <_strtod_l+0xb10>)
 8014cfc:	429d      	cmp	r5, r3
 8014cfe:	d102      	bne.n	8014d06 <_strtod_l+0x87e>
 8014d00:	3001      	adds	r0, #1
 8014d02:	f43f addf 	beq.w	80148c4 <_strtod_l+0x43c>
 8014d06:	4ba3      	ldr	r3, [pc, #652]	; (8014f94 <_strtod_l+0xb0c>)
 8014d08:	402b      	ands	r3, r5
 8014d0a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8014d0e:	f04f 0a00 	mov.w	sl, #0
 8014d12:	e7a0      	b.n	8014c56 <_strtod_l+0x7ce>
 8014d14:	f04f 33ff 	mov.w	r3, #4294967295
 8014d18:	e7ed      	b.n	8014cf6 <_strtod_l+0x86e>
 8014d1a:	460b      	mov	r3, r1
 8014d1c:	e7eb      	b.n	8014cf6 <_strtod_l+0x86e>
 8014d1e:	bb7b      	cbnz	r3, 8014d80 <_strtod_l+0x8f8>
 8014d20:	f1ba 0f00 	cmp.w	sl, #0
 8014d24:	d12c      	bne.n	8014d80 <_strtod_l+0x8f8>
 8014d26:	9904      	ldr	r1, [sp, #16]
 8014d28:	4a9a      	ldr	r2, [pc, #616]	; (8014f94 <_strtod_l+0xb0c>)
 8014d2a:	465b      	mov	r3, fp
 8014d2c:	b1f1      	cbz	r1, 8014d6c <_strtod_l+0x8e4>
 8014d2e:	ea02 010b 	and.w	r1, r2, fp
 8014d32:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8014d36:	dc19      	bgt.n	8014d6c <_strtod_l+0x8e4>
 8014d38:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8014d3c:	f77f ae5b 	ble.w	80149f6 <_strtod_l+0x56e>
 8014d40:	4a96      	ldr	r2, [pc, #600]	; (8014f9c <_strtod_l+0xb14>)
 8014d42:	2300      	movs	r3, #0
 8014d44:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8014d48:	4650      	mov	r0, sl
 8014d4a:	4659      	mov	r1, fp
 8014d4c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8014d50:	f7eb fc62 	bl	8000618 <__aeabi_dmul>
 8014d54:	4682      	mov	sl, r0
 8014d56:	468b      	mov	fp, r1
 8014d58:	2900      	cmp	r1, #0
 8014d5a:	f47f adbe 	bne.w	80148da <_strtod_l+0x452>
 8014d5e:	2800      	cmp	r0, #0
 8014d60:	f47f adbb 	bne.w	80148da <_strtod_l+0x452>
 8014d64:	2322      	movs	r3, #34	; 0x22
 8014d66:	f8c9 3000 	str.w	r3, [r9]
 8014d6a:	e5b6      	b.n	80148da <_strtod_l+0x452>
 8014d6c:	4013      	ands	r3, r2
 8014d6e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8014d72:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8014d76:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8014d7a:	f04f 3aff 	mov.w	sl, #4294967295
 8014d7e:	e76a      	b.n	8014c56 <_strtod_l+0x7ce>
 8014d80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014d82:	b193      	cbz	r3, 8014daa <_strtod_l+0x922>
 8014d84:	422b      	tst	r3, r5
 8014d86:	f43f af66 	beq.w	8014c56 <_strtod_l+0x7ce>
 8014d8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014d8c:	9a04      	ldr	r2, [sp, #16]
 8014d8e:	4650      	mov	r0, sl
 8014d90:	4659      	mov	r1, fp
 8014d92:	b173      	cbz	r3, 8014db2 <_strtod_l+0x92a>
 8014d94:	f7ff fb5b 	bl	801444e <sulp>
 8014d98:	4602      	mov	r2, r0
 8014d9a:	460b      	mov	r3, r1
 8014d9c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014da0:	f7eb fa84 	bl	80002ac <__adddf3>
 8014da4:	4682      	mov	sl, r0
 8014da6:	468b      	mov	fp, r1
 8014da8:	e755      	b.n	8014c56 <_strtod_l+0x7ce>
 8014daa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014dac:	ea13 0f0a 	tst.w	r3, sl
 8014db0:	e7e9      	b.n	8014d86 <_strtod_l+0x8fe>
 8014db2:	f7ff fb4c 	bl	801444e <sulp>
 8014db6:	4602      	mov	r2, r0
 8014db8:	460b      	mov	r3, r1
 8014dba:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014dbe:	f7eb fa73 	bl	80002a8 <__aeabi_dsub>
 8014dc2:	2200      	movs	r2, #0
 8014dc4:	2300      	movs	r3, #0
 8014dc6:	4682      	mov	sl, r0
 8014dc8:	468b      	mov	fp, r1
 8014dca:	f7eb fe8d 	bl	8000ae8 <__aeabi_dcmpeq>
 8014dce:	2800      	cmp	r0, #0
 8014dd0:	f47f ae11 	bne.w	80149f6 <_strtod_l+0x56e>
 8014dd4:	e73f      	b.n	8014c56 <_strtod_l+0x7ce>
 8014dd6:	4641      	mov	r1, r8
 8014dd8:	4620      	mov	r0, r4
 8014dda:	f001 ff1a 	bl	8016c12 <__ratio>
 8014dde:	ec57 6b10 	vmov	r6, r7, d0
 8014de2:	2200      	movs	r2, #0
 8014de4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014de8:	ee10 0a10 	vmov	r0, s0
 8014dec:	4639      	mov	r1, r7
 8014dee:	f7eb fe8f 	bl	8000b10 <__aeabi_dcmple>
 8014df2:	2800      	cmp	r0, #0
 8014df4:	d077      	beq.n	8014ee6 <_strtod_l+0xa5e>
 8014df6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014df8:	2b00      	cmp	r3, #0
 8014dfa:	d04a      	beq.n	8014e92 <_strtod_l+0xa0a>
 8014dfc:	4b68      	ldr	r3, [pc, #416]	; (8014fa0 <_strtod_l+0xb18>)
 8014dfe:	2200      	movs	r2, #0
 8014e00:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8014e04:	4f66      	ldr	r7, [pc, #408]	; (8014fa0 <_strtod_l+0xb18>)
 8014e06:	2600      	movs	r6, #0
 8014e08:	4b62      	ldr	r3, [pc, #392]	; (8014f94 <_strtod_l+0xb0c>)
 8014e0a:	402b      	ands	r3, r5
 8014e0c:	930f      	str	r3, [sp, #60]	; 0x3c
 8014e0e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014e10:	4b64      	ldr	r3, [pc, #400]	; (8014fa4 <_strtod_l+0xb1c>)
 8014e12:	429a      	cmp	r2, r3
 8014e14:	f040 80ce 	bne.w	8014fb4 <_strtod_l+0xb2c>
 8014e18:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014e1c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014e20:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8014e24:	ec4b ab10 	vmov	d0, sl, fp
 8014e28:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8014e2c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8014e30:	f001 fe2a 	bl	8016a88 <__ulp>
 8014e34:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014e38:	ec53 2b10 	vmov	r2, r3, d0
 8014e3c:	f7eb fbec 	bl	8000618 <__aeabi_dmul>
 8014e40:	4652      	mov	r2, sl
 8014e42:	465b      	mov	r3, fp
 8014e44:	f7eb fa32 	bl	80002ac <__adddf3>
 8014e48:	460b      	mov	r3, r1
 8014e4a:	4952      	ldr	r1, [pc, #328]	; (8014f94 <_strtod_l+0xb0c>)
 8014e4c:	4a56      	ldr	r2, [pc, #344]	; (8014fa8 <_strtod_l+0xb20>)
 8014e4e:	4019      	ands	r1, r3
 8014e50:	4291      	cmp	r1, r2
 8014e52:	4682      	mov	sl, r0
 8014e54:	d95b      	bls.n	8014f0e <_strtod_l+0xa86>
 8014e56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014e58:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8014e5c:	4293      	cmp	r3, r2
 8014e5e:	d103      	bne.n	8014e68 <_strtod_l+0x9e0>
 8014e60:	9b08      	ldr	r3, [sp, #32]
 8014e62:	3301      	adds	r3, #1
 8014e64:	f43f ad2e 	beq.w	80148c4 <_strtod_l+0x43c>
 8014e68:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8014f98 <_strtod_l+0xb10>
 8014e6c:	f04f 3aff 	mov.w	sl, #4294967295
 8014e70:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014e72:	4648      	mov	r0, r9
 8014e74:	f001 fb70 	bl	8016558 <_Bfree>
 8014e78:	9905      	ldr	r1, [sp, #20]
 8014e7a:	4648      	mov	r0, r9
 8014e7c:	f001 fb6c 	bl	8016558 <_Bfree>
 8014e80:	4641      	mov	r1, r8
 8014e82:	4648      	mov	r0, r9
 8014e84:	f001 fb68 	bl	8016558 <_Bfree>
 8014e88:	4621      	mov	r1, r4
 8014e8a:	4648      	mov	r0, r9
 8014e8c:	f001 fb64 	bl	8016558 <_Bfree>
 8014e90:	e619      	b.n	8014ac6 <_strtod_l+0x63e>
 8014e92:	f1ba 0f00 	cmp.w	sl, #0
 8014e96:	d11a      	bne.n	8014ece <_strtod_l+0xa46>
 8014e98:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014e9c:	b9eb      	cbnz	r3, 8014eda <_strtod_l+0xa52>
 8014e9e:	2200      	movs	r2, #0
 8014ea0:	4b3f      	ldr	r3, [pc, #252]	; (8014fa0 <_strtod_l+0xb18>)
 8014ea2:	4630      	mov	r0, r6
 8014ea4:	4639      	mov	r1, r7
 8014ea6:	f7eb fe29 	bl	8000afc <__aeabi_dcmplt>
 8014eaa:	b9c8      	cbnz	r0, 8014ee0 <_strtod_l+0xa58>
 8014eac:	4630      	mov	r0, r6
 8014eae:	4639      	mov	r1, r7
 8014eb0:	2200      	movs	r2, #0
 8014eb2:	4b3e      	ldr	r3, [pc, #248]	; (8014fac <_strtod_l+0xb24>)
 8014eb4:	f7eb fbb0 	bl	8000618 <__aeabi_dmul>
 8014eb8:	4606      	mov	r6, r0
 8014eba:	460f      	mov	r7, r1
 8014ebc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8014ec0:	9618      	str	r6, [sp, #96]	; 0x60
 8014ec2:	9319      	str	r3, [sp, #100]	; 0x64
 8014ec4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8014ec8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8014ecc:	e79c      	b.n	8014e08 <_strtod_l+0x980>
 8014ece:	f1ba 0f01 	cmp.w	sl, #1
 8014ed2:	d102      	bne.n	8014eda <_strtod_l+0xa52>
 8014ed4:	2d00      	cmp	r5, #0
 8014ed6:	f43f ad8e 	beq.w	80149f6 <_strtod_l+0x56e>
 8014eda:	2200      	movs	r2, #0
 8014edc:	4b34      	ldr	r3, [pc, #208]	; (8014fb0 <_strtod_l+0xb28>)
 8014ede:	e78f      	b.n	8014e00 <_strtod_l+0x978>
 8014ee0:	2600      	movs	r6, #0
 8014ee2:	4f32      	ldr	r7, [pc, #200]	; (8014fac <_strtod_l+0xb24>)
 8014ee4:	e7ea      	b.n	8014ebc <_strtod_l+0xa34>
 8014ee6:	4b31      	ldr	r3, [pc, #196]	; (8014fac <_strtod_l+0xb24>)
 8014ee8:	4630      	mov	r0, r6
 8014eea:	4639      	mov	r1, r7
 8014eec:	2200      	movs	r2, #0
 8014eee:	f7eb fb93 	bl	8000618 <__aeabi_dmul>
 8014ef2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014ef4:	4606      	mov	r6, r0
 8014ef6:	460f      	mov	r7, r1
 8014ef8:	b933      	cbnz	r3, 8014f08 <_strtod_l+0xa80>
 8014efa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014efe:	9010      	str	r0, [sp, #64]	; 0x40
 8014f00:	9311      	str	r3, [sp, #68]	; 0x44
 8014f02:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014f06:	e7df      	b.n	8014ec8 <_strtod_l+0xa40>
 8014f08:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8014f0c:	e7f9      	b.n	8014f02 <_strtod_l+0xa7a>
 8014f0e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8014f12:	9b04      	ldr	r3, [sp, #16]
 8014f14:	2b00      	cmp	r3, #0
 8014f16:	d1ab      	bne.n	8014e70 <_strtod_l+0x9e8>
 8014f18:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014f1c:	0d1b      	lsrs	r3, r3, #20
 8014f1e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014f20:	051b      	lsls	r3, r3, #20
 8014f22:	429a      	cmp	r2, r3
 8014f24:	465d      	mov	r5, fp
 8014f26:	d1a3      	bne.n	8014e70 <_strtod_l+0x9e8>
 8014f28:	4639      	mov	r1, r7
 8014f2a:	4630      	mov	r0, r6
 8014f2c:	f7eb fe24 	bl	8000b78 <__aeabi_d2iz>
 8014f30:	f7eb fb08 	bl	8000544 <__aeabi_i2d>
 8014f34:	460b      	mov	r3, r1
 8014f36:	4602      	mov	r2, r0
 8014f38:	4639      	mov	r1, r7
 8014f3a:	4630      	mov	r0, r6
 8014f3c:	f7eb f9b4 	bl	80002a8 <__aeabi_dsub>
 8014f40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014f42:	4606      	mov	r6, r0
 8014f44:	460f      	mov	r7, r1
 8014f46:	b933      	cbnz	r3, 8014f56 <_strtod_l+0xace>
 8014f48:	f1ba 0f00 	cmp.w	sl, #0
 8014f4c:	d103      	bne.n	8014f56 <_strtod_l+0xace>
 8014f4e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8014f52:	2d00      	cmp	r5, #0
 8014f54:	d06d      	beq.n	8015032 <_strtod_l+0xbaa>
 8014f56:	a30a      	add	r3, pc, #40	; (adr r3, 8014f80 <_strtod_l+0xaf8>)
 8014f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f5c:	4630      	mov	r0, r6
 8014f5e:	4639      	mov	r1, r7
 8014f60:	f7eb fdcc 	bl	8000afc <__aeabi_dcmplt>
 8014f64:	2800      	cmp	r0, #0
 8014f66:	f47f acb8 	bne.w	80148da <_strtod_l+0x452>
 8014f6a:	a307      	add	r3, pc, #28	; (adr r3, 8014f88 <_strtod_l+0xb00>)
 8014f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f70:	4630      	mov	r0, r6
 8014f72:	4639      	mov	r1, r7
 8014f74:	f7eb fde0 	bl	8000b38 <__aeabi_dcmpgt>
 8014f78:	2800      	cmp	r0, #0
 8014f7a:	f43f af79 	beq.w	8014e70 <_strtod_l+0x9e8>
 8014f7e:	e4ac      	b.n	80148da <_strtod_l+0x452>
 8014f80:	94a03595 	.word	0x94a03595
 8014f84:	3fdfffff 	.word	0x3fdfffff
 8014f88:	35afe535 	.word	0x35afe535
 8014f8c:	3fe00000 	.word	0x3fe00000
 8014f90:	000fffff 	.word	0x000fffff
 8014f94:	7ff00000 	.word	0x7ff00000
 8014f98:	7fefffff 	.word	0x7fefffff
 8014f9c:	39500000 	.word	0x39500000
 8014fa0:	3ff00000 	.word	0x3ff00000
 8014fa4:	7fe00000 	.word	0x7fe00000
 8014fa8:	7c9fffff 	.word	0x7c9fffff
 8014fac:	3fe00000 	.word	0x3fe00000
 8014fb0:	bff00000 	.word	0xbff00000
 8014fb4:	9b04      	ldr	r3, [sp, #16]
 8014fb6:	b333      	cbz	r3, 8015006 <_strtod_l+0xb7e>
 8014fb8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014fba:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8014fbe:	d822      	bhi.n	8015006 <_strtod_l+0xb7e>
 8014fc0:	a327      	add	r3, pc, #156	; (adr r3, 8015060 <_strtod_l+0xbd8>)
 8014fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fc6:	4630      	mov	r0, r6
 8014fc8:	4639      	mov	r1, r7
 8014fca:	f7eb fda1 	bl	8000b10 <__aeabi_dcmple>
 8014fce:	b1a0      	cbz	r0, 8014ffa <_strtod_l+0xb72>
 8014fd0:	4639      	mov	r1, r7
 8014fd2:	4630      	mov	r0, r6
 8014fd4:	f7eb fdf8 	bl	8000bc8 <__aeabi_d2uiz>
 8014fd8:	2800      	cmp	r0, #0
 8014fda:	bf08      	it	eq
 8014fdc:	2001      	moveq	r0, #1
 8014fde:	f7eb faa1 	bl	8000524 <__aeabi_ui2d>
 8014fe2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014fe4:	4606      	mov	r6, r0
 8014fe6:	460f      	mov	r7, r1
 8014fe8:	bb03      	cbnz	r3, 801502c <_strtod_l+0xba4>
 8014fea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014fee:	9012      	str	r0, [sp, #72]	; 0x48
 8014ff0:	9313      	str	r3, [sp, #76]	; 0x4c
 8014ff2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8014ff6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8014ffa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014ffc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014ffe:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8015002:	1a9b      	subs	r3, r3, r2
 8015004:	930b      	str	r3, [sp, #44]	; 0x2c
 8015006:	ed9d 0b08 	vldr	d0, [sp, #32]
 801500a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 801500e:	f001 fd3b 	bl	8016a88 <__ulp>
 8015012:	4650      	mov	r0, sl
 8015014:	ec53 2b10 	vmov	r2, r3, d0
 8015018:	4659      	mov	r1, fp
 801501a:	f7eb fafd 	bl	8000618 <__aeabi_dmul>
 801501e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015022:	f7eb f943 	bl	80002ac <__adddf3>
 8015026:	4682      	mov	sl, r0
 8015028:	468b      	mov	fp, r1
 801502a:	e772      	b.n	8014f12 <_strtod_l+0xa8a>
 801502c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8015030:	e7df      	b.n	8014ff2 <_strtod_l+0xb6a>
 8015032:	a30d      	add	r3, pc, #52	; (adr r3, 8015068 <_strtod_l+0xbe0>)
 8015034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015038:	f7eb fd60 	bl	8000afc <__aeabi_dcmplt>
 801503c:	e79c      	b.n	8014f78 <_strtod_l+0xaf0>
 801503e:	2300      	movs	r3, #0
 8015040:	930d      	str	r3, [sp, #52]	; 0x34
 8015042:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8015044:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015046:	6013      	str	r3, [r2, #0]
 8015048:	f7ff ba61 	b.w	801450e <_strtod_l+0x86>
 801504c:	2b65      	cmp	r3, #101	; 0x65
 801504e:	f04f 0200 	mov.w	r2, #0
 8015052:	f43f ab4e 	beq.w	80146f2 <_strtod_l+0x26a>
 8015056:	2101      	movs	r1, #1
 8015058:	4614      	mov	r4, r2
 801505a:	9104      	str	r1, [sp, #16]
 801505c:	f7ff bacb 	b.w	80145f6 <_strtod_l+0x16e>
 8015060:	ffc00000 	.word	0xffc00000
 8015064:	41dfffff 	.word	0x41dfffff
 8015068:	94a03595 	.word	0x94a03595
 801506c:	3fcfffff 	.word	0x3fcfffff

08015070 <_strtod_r>:
 8015070:	4b05      	ldr	r3, [pc, #20]	; (8015088 <_strtod_r+0x18>)
 8015072:	681b      	ldr	r3, [r3, #0]
 8015074:	b410      	push	{r4}
 8015076:	6a1b      	ldr	r3, [r3, #32]
 8015078:	4c04      	ldr	r4, [pc, #16]	; (801508c <_strtod_r+0x1c>)
 801507a:	2b00      	cmp	r3, #0
 801507c:	bf08      	it	eq
 801507e:	4623      	moveq	r3, r4
 8015080:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015084:	f7ff ba00 	b.w	8014488 <_strtod_l>
 8015088:	20000e34 	.word	0x20000e34
 801508c:	20000e98 	.word	0x20000e98

08015090 <_strtol_l.isra.0>:
 8015090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015094:	4680      	mov	r8, r0
 8015096:	4689      	mov	r9, r1
 8015098:	4692      	mov	sl, r2
 801509a:	461e      	mov	r6, r3
 801509c:	460f      	mov	r7, r1
 801509e:	463d      	mov	r5, r7
 80150a0:	9808      	ldr	r0, [sp, #32]
 80150a2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80150a6:	f001 f9ed 	bl	8016484 <__locale_ctype_ptr_l>
 80150aa:	4420      	add	r0, r4
 80150ac:	7843      	ldrb	r3, [r0, #1]
 80150ae:	f013 0308 	ands.w	r3, r3, #8
 80150b2:	d132      	bne.n	801511a <_strtol_l.isra.0+0x8a>
 80150b4:	2c2d      	cmp	r4, #45	; 0x2d
 80150b6:	d132      	bne.n	801511e <_strtol_l.isra.0+0x8e>
 80150b8:	787c      	ldrb	r4, [r7, #1]
 80150ba:	1cbd      	adds	r5, r7, #2
 80150bc:	2201      	movs	r2, #1
 80150be:	2e00      	cmp	r6, #0
 80150c0:	d05d      	beq.n	801517e <_strtol_l.isra.0+0xee>
 80150c2:	2e10      	cmp	r6, #16
 80150c4:	d109      	bne.n	80150da <_strtol_l.isra.0+0x4a>
 80150c6:	2c30      	cmp	r4, #48	; 0x30
 80150c8:	d107      	bne.n	80150da <_strtol_l.isra.0+0x4a>
 80150ca:	782b      	ldrb	r3, [r5, #0]
 80150cc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80150d0:	2b58      	cmp	r3, #88	; 0x58
 80150d2:	d14f      	bne.n	8015174 <_strtol_l.isra.0+0xe4>
 80150d4:	786c      	ldrb	r4, [r5, #1]
 80150d6:	2610      	movs	r6, #16
 80150d8:	3502      	adds	r5, #2
 80150da:	2a00      	cmp	r2, #0
 80150dc:	bf14      	ite	ne
 80150de:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80150e2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80150e6:	2700      	movs	r7, #0
 80150e8:	fbb1 fcf6 	udiv	ip, r1, r6
 80150ec:	4638      	mov	r0, r7
 80150ee:	fb06 1e1c 	mls	lr, r6, ip, r1
 80150f2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80150f6:	2b09      	cmp	r3, #9
 80150f8:	d817      	bhi.n	801512a <_strtol_l.isra.0+0x9a>
 80150fa:	461c      	mov	r4, r3
 80150fc:	42a6      	cmp	r6, r4
 80150fe:	dd23      	ble.n	8015148 <_strtol_l.isra.0+0xb8>
 8015100:	1c7b      	adds	r3, r7, #1
 8015102:	d007      	beq.n	8015114 <_strtol_l.isra.0+0x84>
 8015104:	4584      	cmp	ip, r0
 8015106:	d31c      	bcc.n	8015142 <_strtol_l.isra.0+0xb2>
 8015108:	d101      	bne.n	801510e <_strtol_l.isra.0+0x7e>
 801510a:	45a6      	cmp	lr, r4
 801510c:	db19      	blt.n	8015142 <_strtol_l.isra.0+0xb2>
 801510e:	fb00 4006 	mla	r0, r0, r6, r4
 8015112:	2701      	movs	r7, #1
 8015114:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015118:	e7eb      	b.n	80150f2 <_strtol_l.isra.0+0x62>
 801511a:	462f      	mov	r7, r5
 801511c:	e7bf      	b.n	801509e <_strtol_l.isra.0+0xe>
 801511e:	2c2b      	cmp	r4, #43	; 0x2b
 8015120:	bf04      	itt	eq
 8015122:	1cbd      	addeq	r5, r7, #2
 8015124:	787c      	ldrbeq	r4, [r7, #1]
 8015126:	461a      	mov	r2, r3
 8015128:	e7c9      	b.n	80150be <_strtol_l.isra.0+0x2e>
 801512a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 801512e:	2b19      	cmp	r3, #25
 8015130:	d801      	bhi.n	8015136 <_strtol_l.isra.0+0xa6>
 8015132:	3c37      	subs	r4, #55	; 0x37
 8015134:	e7e2      	b.n	80150fc <_strtol_l.isra.0+0x6c>
 8015136:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 801513a:	2b19      	cmp	r3, #25
 801513c:	d804      	bhi.n	8015148 <_strtol_l.isra.0+0xb8>
 801513e:	3c57      	subs	r4, #87	; 0x57
 8015140:	e7dc      	b.n	80150fc <_strtol_l.isra.0+0x6c>
 8015142:	f04f 37ff 	mov.w	r7, #4294967295
 8015146:	e7e5      	b.n	8015114 <_strtol_l.isra.0+0x84>
 8015148:	1c7b      	adds	r3, r7, #1
 801514a:	d108      	bne.n	801515e <_strtol_l.isra.0+0xce>
 801514c:	2322      	movs	r3, #34	; 0x22
 801514e:	f8c8 3000 	str.w	r3, [r8]
 8015152:	4608      	mov	r0, r1
 8015154:	f1ba 0f00 	cmp.w	sl, #0
 8015158:	d107      	bne.n	801516a <_strtol_l.isra.0+0xda>
 801515a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801515e:	b102      	cbz	r2, 8015162 <_strtol_l.isra.0+0xd2>
 8015160:	4240      	negs	r0, r0
 8015162:	f1ba 0f00 	cmp.w	sl, #0
 8015166:	d0f8      	beq.n	801515a <_strtol_l.isra.0+0xca>
 8015168:	b10f      	cbz	r7, 801516e <_strtol_l.isra.0+0xde>
 801516a:	f105 39ff 	add.w	r9, r5, #4294967295
 801516e:	f8ca 9000 	str.w	r9, [sl]
 8015172:	e7f2      	b.n	801515a <_strtol_l.isra.0+0xca>
 8015174:	2430      	movs	r4, #48	; 0x30
 8015176:	2e00      	cmp	r6, #0
 8015178:	d1af      	bne.n	80150da <_strtol_l.isra.0+0x4a>
 801517a:	2608      	movs	r6, #8
 801517c:	e7ad      	b.n	80150da <_strtol_l.isra.0+0x4a>
 801517e:	2c30      	cmp	r4, #48	; 0x30
 8015180:	d0a3      	beq.n	80150ca <_strtol_l.isra.0+0x3a>
 8015182:	260a      	movs	r6, #10
 8015184:	e7a9      	b.n	80150da <_strtol_l.isra.0+0x4a>
	...

08015188 <_strtol_r>:
 8015188:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801518a:	4c06      	ldr	r4, [pc, #24]	; (80151a4 <_strtol_r+0x1c>)
 801518c:	4d06      	ldr	r5, [pc, #24]	; (80151a8 <_strtol_r+0x20>)
 801518e:	6824      	ldr	r4, [r4, #0]
 8015190:	6a24      	ldr	r4, [r4, #32]
 8015192:	2c00      	cmp	r4, #0
 8015194:	bf08      	it	eq
 8015196:	462c      	moveq	r4, r5
 8015198:	9400      	str	r4, [sp, #0]
 801519a:	f7ff ff79 	bl	8015090 <_strtol_l.isra.0>
 801519e:	b003      	add	sp, #12
 80151a0:	bd30      	pop	{r4, r5, pc}
 80151a2:	bf00      	nop
 80151a4:	20000e34 	.word	0x20000e34
 80151a8:	20000e98 	.word	0x20000e98

080151ac <quorem>:
 80151ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151b0:	6903      	ldr	r3, [r0, #16]
 80151b2:	690c      	ldr	r4, [r1, #16]
 80151b4:	42a3      	cmp	r3, r4
 80151b6:	4680      	mov	r8, r0
 80151b8:	f2c0 8082 	blt.w	80152c0 <quorem+0x114>
 80151bc:	3c01      	subs	r4, #1
 80151be:	f101 0714 	add.w	r7, r1, #20
 80151c2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80151c6:	f100 0614 	add.w	r6, r0, #20
 80151ca:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80151ce:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80151d2:	eb06 030c 	add.w	r3, r6, ip
 80151d6:	3501      	adds	r5, #1
 80151d8:	eb07 090c 	add.w	r9, r7, ip
 80151dc:	9301      	str	r3, [sp, #4]
 80151de:	fbb0 f5f5 	udiv	r5, r0, r5
 80151e2:	b395      	cbz	r5, 801524a <quorem+0x9e>
 80151e4:	f04f 0a00 	mov.w	sl, #0
 80151e8:	4638      	mov	r0, r7
 80151ea:	46b6      	mov	lr, r6
 80151ec:	46d3      	mov	fp, sl
 80151ee:	f850 2b04 	ldr.w	r2, [r0], #4
 80151f2:	b293      	uxth	r3, r2
 80151f4:	fb05 a303 	mla	r3, r5, r3, sl
 80151f8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80151fc:	b29b      	uxth	r3, r3
 80151fe:	ebab 0303 	sub.w	r3, fp, r3
 8015202:	0c12      	lsrs	r2, r2, #16
 8015204:	f8de b000 	ldr.w	fp, [lr]
 8015208:	fb05 a202 	mla	r2, r5, r2, sl
 801520c:	fa13 f38b 	uxtah	r3, r3, fp
 8015210:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8015214:	fa1f fb82 	uxth.w	fp, r2
 8015218:	f8de 2000 	ldr.w	r2, [lr]
 801521c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8015220:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015224:	b29b      	uxth	r3, r3
 8015226:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801522a:	4581      	cmp	r9, r0
 801522c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8015230:	f84e 3b04 	str.w	r3, [lr], #4
 8015234:	d2db      	bcs.n	80151ee <quorem+0x42>
 8015236:	f856 300c 	ldr.w	r3, [r6, ip]
 801523a:	b933      	cbnz	r3, 801524a <quorem+0x9e>
 801523c:	9b01      	ldr	r3, [sp, #4]
 801523e:	3b04      	subs	r3, #4
 8015240:	429e      	cmp	r6, r3
 8015242:	461a      	mov	r2, r3
 8015244:	d330      	bcc.n	80152a8 <quorem+0xfc>
 8015246:	f8c8 4010 	str.w	r4, [r8, #16]
 801524a:	4640      	mov	r0, r8
 801524c:	f001 fba4 	bl	8016998 <__mcmp>
 8015250:	2800      	cmp	r0, #0
 8015252:	db25      	blt.n	80152a0 <quorem+0xf4>
 8015254:	3501      	adds	r5, #1
 8015256:	4630      	mov	r0, r6
 8015258:	f04f 0c00 	mov.w	ip, #0
 801525c:	f857 2b04 	ldr.w	r2, [r7], #4
 8015260:	f8d0 e000 	ldr.w	lr, [r0]
 8015264:	b293      	uxth	r3, r2
 8015266:	ebac 0303 	sub.w	r3, ip, r3
 801526a:	0c12      	lsrs	r2, r2, #16
 801526c:	fa13 f38e 	uxtah	r3, r3, lr
 8015270:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8015274:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015278:	b29b      	uxth	r3, r3
 801527a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801527e:	45b9      	cmp	r9, r7
 8015280:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8015284:	f840 3b04 	str.w	r3, [r0], #4
 8015288:	d2e8      	bcs.n	801525c <quorem+0xb0>
 801528a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801528e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8015292:	b92a      	cbnz	r2, 80152a0 <quorem+0xf4>
 8015294:	3b04      	subs	r3, #4
 8015296:	429e      	cmp	r6, r3
 8015298:	461a      	mov	r2, r3
 801529a:	d30b      	bcc.n	80152b4 <quorem+0x108>
 801529c:	f8c8 4010 	str.w	r4, [r8, #16]
 80152a0:	4628      	mov	r0, r5
 80152a2:	b003      	add	sp, #12
 80152a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152a8:	6812      	ldr	r2, [r2, #0]
 80152aa:	3b04      	subs	r3, #4
 80152ac:	2a00      	cmp	r2, #0
 80152ae:	d1ca      	bne.n	8015246 <quorem+0x9a>
 80152b0:	3c01      	subs	r4, #1
 80152b2:	e7c5      	b.n	8015240 <quorem+0x94>
 80152b4:	6812      	ldr	r2, [r2, #0]
 80152b6:	3b04      	subs	r3, #4
 80152b8:	2a00      	cmp	r2, #0
 80152ba:	d1ef      	bne.n	801529c <quorem+0xf0>
 80152bc:	3c01      	subs	r4, #1
 80152be:	e7ea      	b.n	8015296 <quorem+0xea>
 80152c0:	2000      	movs	r0, #0
 80152c2:	e7ee      	b.n	80152a2 <quorem+0xf6>
 80152c4:	0000      	movs	r0, r0
	...

080152c8 <_dtoa_r>:
 80152c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152cc:	ec57 6b10 	vmov	r6, r7, d0
 80152d0:	b097      	sub	sp, #92	; 0x5c
 80152d2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80152d4:	9106      	str	r1, [sp, #24]
 80152d6:	4604      	mov	r4, r0
 80152d8:	920b      	str	r2, [sp, #44]	; 0x2c
 80152da:	9312      	str	r3, [sp, #72]	; 0x48
 80152dc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80152e0:	e9cd 6700 	strd	r6, r7, [sp]
 80152e4:	b93d      	cbnz	r5, 80152f6 <_dtoa_r+0x2e>
 80152e6:	2010      	movs	r0, #16
 80152e8:	f7fe f8ea 	bl	80134c0 <malloc>
 80152ec:	6260      	str	r0, [r4, #36]	; 0x24
 80152ee:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80152f2:	6005      	str	r5, [r0, #0]
 80152f4:	60c5      	str	r5, [r0, #12]
 80152f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80152f8:	6819      	ldr	r1, [r3, #0]
 80152fa:	b151      	cbz	r1, 8015312 <_dtoa_r+0x4a>
 80152fc:	685a      	ldr	r2, [r3, #4]
 80152fe:	604a      	str	r2, [r1, #4]
 8015300:	2301      	movs	r3, #1
 8015302:	4093      	lsls	r3, r2
 8015304:	608b      	str	r3, [r1, #8]
 8015306:	4620      	mov	r0, r4
 8015308:	f001 f926 	bl	8016558 <_Bfree>
 801530c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801530e:	2200      	movs	r2, #0
 8015310:	601a      	str	r2, [r3, #0]
 8015312:	1e3b      	subs	r3, r7, #0
 8015314:	bfbb      	ittet	lt
 8015316:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801531a:	9301      	strlt	r3, [sp, #4]
 801531c:	2300      	movge	r3, #0
 801531e:	2201      	movlt	r2, #1
 8015320:	bfac      	ite	ge
 8015322:	f8c8 3000 	strge.w	r3, [r8]
 8015326:	f8c8 2000 	strlt.w	r2, [r8]
 801532a:	4baf      	ldr	r3, [pc, #700]	; (80155e8 <_dtoa_r+0x320>)
 801532c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8015330:	ea33 0308 	bics.w	r3, r3, r8
 8015334:	d114      	bne.n	8015360 <_dtoa_r+0x98>
 8015336:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015338:	f242 730f 	movw	r3, #9999	; 0x270f
 801533c:	6013      	str	r3, [r2, #0]
 801533e:	9b00      	ldr	r3, [sp, #0]
 8015340:	b923      	cbnz	r3, 801534c <_dtoa_r+0x84>
 8015342:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8015346:	2800      	cmp	r0, #0
 8015348:	f000 8542 	beq.w	8015dd0 <_dtoa_r+0xb08>
 801534c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801534e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80155fc <_dtoa_r+0x334>
 8015352:	2b00      	cmp	r3, #0
 8015354:	f000 8544 	beq.w	8015de0 <_dtoa_r+0xb18>
 8015358:	f10b 0303 	add.w	r3, fp, #3
 801535c:	f000 bd3e 	b.w	8015ddc <_dtoa_r+0xb14>
 8015360:	e9dd 6700 	ldrd	r6, r7, [sp]
 8015364:	2200      	movs	r2, #0
 8015366:	2300      	movs	r3, #0
 8015368:	4630      	mov	r0, r6
 801536a:	4639      	mov	r1, r7
 801536c:	f7eb fbbc 	bl	8000ae8 <__aeabi_dcmpeq>
 8015370:	4681      	mov	r9, r0
 8015372:	b168      	cbz	r0, 8015390 <_dtoa_r+0xc8>
 8015374:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015376:	2301      	movs	r3, #1
 8015378:	6013      	str	r3, [r2, #0]
 801537a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801537c:	2b00      	cmp	r3, #0
 801537e:	f000 8524 	beq.w	8015dca <_dtoa_r+0xb02>
 8015382:	4b9a      	ldr	r3, [pc, #616]	; (80155ec <_dtoa_r+0x324>)
 8015384:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015386:	f103 3bff 	add.w	fp, r3, #4294967295
 801538a:	6013      	str	r3, [r2, #0]
 801538c:	f000 bd28 	b.w	8015de0 <_dtoa_r+0xb18>
 8015390:	aa14      	add	r2, sp, #80	; 0x50
 8015392:	a915      	add	r1, sp, #84	; 0x54
 8015394:	ec47 6b10 	vmov	d0, r6, r7
 8015398:	4620      	mov	r0, r4
 801539a:	f001 fbeb 	bl	8016b74 <__d2b>
 801539e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80153a2:	9004      	str	r0, [sp, #16]
 80153a4:	2d00      	cmp	r5, #0
 80153a6:	d07c      	beq.n	80154a2 <_dtoa_r+0x1da>
 80153a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80153ac:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80153b0:	46b2      	mov	sl, r6
 80153b2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80153b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80153ba:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80153be:	2200      	movs	r2, #0
 80153c0:	4b8b      	ldr	r3, [pc, #556]	; (80155f0 <_dtoa_r+0x328>)
 80153c2:	4650      	mov	r0, sl
 80153c4:	4659      	mov	r1, fp
 80153c6:	f7ea ff6f 	bl	80002a8 <__aeabi_dsub>
 80153ca:	a381      	add	r3, pc, #516	; (adr r3, 80155d0 <_dtoa_r+0x308>)
 80153cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153d0:	f7eb f922 	bl	8000618 <__aeabi_dmul>
 80153d4:	a380      	add	r3, pc, #512	; (adr r3, 80155d8 <_dtoa_r+0x310>)
 80153d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153da:	f7ea ff67 	bl	80002ac <__adddf3>
 80153de:	4606      	mov	r6, r0
 80153e0:	4628      	mov	r0, r5
 80153e2:	460f      	mov	r7, r1
 80153e4:	f7eb f8ae 	bl	8000544 <__aeabi_i2d>
 80153e8:	a37d      	add	r3, pc, #500	; (adr r3, 80155e0 <_dtoa_r+0x318>)
 80153ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153ee:	f7eb f913 	bl	8000618 <__aeabi_dmul>
 80153f2:	4602      	mov	r2, r0
 80153f4:	460b      	mov	r3, r1
 80153f6:	4630      	mov	r0, r6
 80153f8:	4639      	mov	r1, r7
 80153fa:	f7ea ff57 	bl	80002ac <__adddf3>
 80153fe:	4606      	mov	r6, r0
 8015400:	460f      	mov	r7, r1
 8015402:	f7eb fbb9 	bl	8000b78 <__aeabi_d2iz>
 8015406:	2200      	movs	r2, #0
 8015408:	4682      	mov	sl, r0
 801540a:	2300      	movs	r3, #0
 801540c:	4630      	mov	r0, r6
 801540e:	4639      	mov	r1, r7
 8015410:	f7eb fb74 	bl	8000afc <__aeabi_dcmplt>
 8015414:	b148      	cbz	r0, 801542a <_dtoa_r+0x162>
 8015416:	4650      	mov	r0, sl
 8015418:	f7eb f894 	bl	8000544 <__aeabi_i2d>
 801541c:	4632      	mov	r2, r6
 801541e:	463b      	mov	r3, r7
 8015420:	f7eb fb62 	bl	8000ae8 <__aeabi_dcmpeq>
 8015424:	b908      	cbnz	r0, 801542a <_dtoa_r+0x162>
 8015426:	f10a 3aff 	add.w	sl, sl, #4294967295
 801542a:	f1ba 0f16 	cmp.w	sl, #22
 801542e:	d859      	bhi.n	80154e4 <_dtoa_r+0x21c>
 8015430:	4970      	ldr	r1, [pc, #448]	; (80155f4 <_dtoa_r+0x32c>)
 8015432:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8015436:	e9dd 2300 	ldrd	r2, r3, [sp]
 801543a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801543e:	f7eb fb7b 	bl	8000b38 <__aeabi_dcmpgt>
 8015442:	2800      	cmp	r0, #0
 8015444:	d050      	beq.n	80154e8 <_dtoa_r+0x220>
 8015446:	f10a 3aff 	add.w	sl, sl, #4294967295
 801544a:	2300      	movs	r3, #0
 801544c:	930f      	str	r3, [sp, #60]	; 0x3c
 801544e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015450:	1b5d      	subs	r5, r3, r5
 8015452:	f1b5 0801 	subs.w	r8, r5, #1
 8015456:	bf49      	itett	mi
 8015458:	f1c5 0301 	rsbmi	r3, r5, #1
 801545c:	2300      	movpl	r3, #0
 801545e:	9305      	strmi	r3, [sp, #20]
 8015460:	f04f 0800 	movmi.w	r8, #0
 8015464:	bf58      	it	pl
 8015466:	9305      	strpl	r3, [sp, #20]
 8015468:	f1ba 0f00 	cmp.w	sl, #0
 801546c:	db3e      	blt.n	80154ec <_dtoa_r+0x224>
 801546e:	2300      	movs	r3, #0
 8015470:	44d0      	add	r8, sl
 8015472:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8015476:	9307      	str	r3, [sp, #28]
 8015478:	9b06      	ldr	r3, [sp, #24]
 801547a:	2b09      	cmp	r3, #9
 801547c:	f200 8090 	bhi.w	80155a0 <_dtoa_r+0x2d8>
 8015480:	2b05      	cmp	r3, #5
 8015482:	bfc4      	itt	gt
 8015484:	3b04      	subgt	r3, #4
 8015486:	9306      	strgt	r3, [sp, #24]
 8015488:	9b06      	ldr	r3, [sp, #24]
 801548a:	f1a3 0302 	sub.w	r3, r3, #2
 801548e:	bfcc      	ite	gt
 8015490:	2500      	movgt	r5, #0
 8015492:	2501      	movle	r5, #1
 8015494:	2b03      	cmp	r3, #3
 8015496:	f200 808f 	bhi.w	80155b8 <_dtoa_r+0x2f0>
 801549a:	e8df f003 	tbb	[pc, r3]
 801549e:	7f7d      	.short	0x7f7d
 80154a0:	7131      	.short	0x7131
 80154a2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80154a6:	441d      	add	r5, r3
 80154a8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80154ac:	2820      	cmp	r0, #32
 80154ae:	dd13      	ble.n	80154d8 <_dtoa_r+0x210>
 80154b0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80154b4:	9b00      	ldr	r3, [sp, #0]
 80154b6:	fa08 f800 	lsl.w	r8, r8, r0
 80154ba:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80154be:	fa23 f000 	lsr.w	r0, r3, r0
 80154c2:	ea48 0000 	orr.w	r0, r8, r0
 80154c6:	f7eb f82d 	bl	8000524 <__aeabi_ui2d>
 80154ca:	2301      	movs	r3, #1
 80154cc:	4682      	mov	sl, r0
 80154ce:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80154d2:	3d01      	subs	r5, #1
 80154d4:	9313      	str	r3, [sp, #76]	; 0x4c
 80154d6:	e772      	b.n	80153be <_dtoa_r+0xf6>
 80154d8:	9b00      	ldr	r3, [sp, #0]
 80154da:	f1c0 0020 	rsb	r0, r0, #32
 80154de:	fa03 f000 	lsl.w	r0, r3, r0
 80154e2:	e7f0      	b.n	80154c6 <_dtoa_r+0x1fe>
 80154e4:	2301      	movs	r3, #1
 80154e6:	e7b1      	b.n	801544c <_dtoa_r+0x184>
 80154e8:	900f      	str	r0, [sp, #60]	; 0x3c
 80154ea:	e7b0      	b.n	801544e <_dtoa_r+0x186>
 80154ec:	9b05      	ldr	r3, [sp, #20]
 80154ee:	eba3 030a 	sub.w	r3, r3, sl
 80154f2:	9305      	str	r3, [sp, #20]
 80154f4:	f1ca 0300 	rsb	r3, sl, #0
 80154f8:	9307      	str	r3, [sp, #28]
 80154fa:	2300      	movs	r3, #0
 80154fc:	930e      	str	r3, [sp, #56]	; 0x38
 80154fe:	e7bb      	b.n	8015478 <_dtoa_r+0x1b0>
 8015500:	2301      	movs	r3, #1
 8015502:	930a      	str	r3, [sp, #40]	; 0x28
 8015504:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015506:	2b00      	cmp	r3, #0
 8015508:	dd59      	ble.n	80155be <_dtoa_r+0x2f6>
 801550a:	9302      	str	r3, [sp, #8]
 801550c:	4699      	mov	r9, r3
 801550e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8015510:	2200      	movs	r2, #0
 8015512:	6072      	str	r2, [r6, #4]
 8015514:	2204      	movs	r2, #4
 8015516:	f102 0014 	add.w	r0, r2, #20
 801551a:	4298      	cmp	r0, r3
 801551c:	6871      	ldr	r1, [r6, #4]
 801551e:	d953      	bls.n	80155c8 <_dtoa_r+0x300>
 8015520:	4620      	mov	r0, r4
 8015522:	f000 ffe5 	bl	80164f0 <_Balloc>
 8015526:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015528:	6030      	str	r0, [r6, #0]
 801552a:	f1b9 0f0e 	cmp.w	r9, #14
 801552e:	f8d3 b000 	ldr.w	fp, [r3]
 8015532:	f200 80e6 	bhi.w	8015702 <_dtoa_r+0x43a>
 8015536:	2d00      	cmp	r5, #0
 8015538:	f000 80e3 	beq.w	8015702 <_dtoa_r+0x43a>
 801553c:	ed9d 7b00 	vldr	d7, [sp]
 8015540:	f1ba 0f00 	cmp.w	sl, #0
 8015544:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8015548:	dd74      	ble.n	8015634 <_dtoa_r+0x36c>
 801554a:	4a2a      	ldr	r2, [pc, #168]	; (80155f4 <_dtoa_r+0x32c>)
 801554c:	f00a 030f 	and.w	r3, sl, #15
 8015550:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8015554:	ed93 7b00 	vldr	d7, [r3]
 8015558:	ea4f 162a 	mov.w	r6, sl, asr #4
 801555c:	06f0      	lsls	r0, r6, #27
 801555e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8015562:	d565      	bpl.n	8015630 <_dtoa_r+0x368>
 8015564:	4b24      	ldr	r3, [pc, #144]	; (80155f8 <_dtoa_r+0x330>)
 8015566:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801556a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801556e:	f7eb f97d 	bl	800086c <__aeabi_ddiv>
 8015572:	e9cd 0100 	strd	r0, r1, [sp]
 8015576:	f006 060f 	and.w	r6, r6, #15
 801557a:	2503      	movs	r5, #3
 801557c:	4f1e      	ldr	r7, [pc, #120]	; (80155f8 <_dtoa_r+0x330>)
 801557e:	e04c      	b.n	801561a <_dtoa_r+0x352>
 8015580:	2301      	movs	r3, #1
 8015582:	930a      	str	r3, [sp, #40]	; 0x28
 8015584:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015586:	4453      	add	r3, sl
 8015588:	f103 0901 	add.w	r9, r3, #1
 801558c:	9302      	str	r3, [sp, #8]
 801558e:	464b      	mov	r3, r9
 8015590:	2b01      	cmp	r3, #1
 8015592:	bfb8      	it	lt
 8015594:	2301      	movlt	r3, #1
 8015596:	e7ba      	b.n	801550e <_dtoa_r+0x246>
 8015598:	2300      	movs	r3, #0
 801559a:	e7b2      	b.n	8015502 <_dtoa_r+0x23a>
 801559c:	2300      	movs	r3, #0
 801559e:	e7f0      	b.n	8015582 <_dtoa_r+0x2ba>
 80155a0:	2501      	movs	r5, #1
 80155a2:	2300      	movs	r3, #0
 80155a4:	9306      	str	r3, [sp, #24]
 80155a6:	950a      	str	r5, [sp, #40]	; 0x28
 80155a8:	f04f 33ff 	mov.w	r3, #4294967295
 80155ac:	9302      	str	r3, [sp, #8]
 80155ae:	4699      	mov	r9, r3
 80155b0:	2200      	movs	r2, #0
 80155b2:	2312      	movs	r3, #18
 80155b4:	920b      	str	r2, [sp, #44]	; 0x2c
 80155b6:	e7aa      	b.n	801550e <_dtoa_r+0x246>
 80155b8:	2301      	movs	r3, #1
 80155ba:	930a      	str	r3, [sp, #40]	; 0x28
 80155bc:	e7f4      	b.n	80155a8 <_dtoa_r+0x2e0>
 80155be:	2301      	movs	r3, #1
 80155c0:	9302      	str	r3, [sp, #8]
 80155c2:	4699      	mov	r9, r3
 80155c4:	461a      	mov	r2, r3
 80155c6:	e7f5      	b.n	80155b4 <_dtoa_r+0x2ec>
 80155c8:	3101      	adds	r1, #1
 80155ca:	6071      	str	r1, [r6, #4]
 80155cc:	0052      	lsls	r2, r2, #1
 80155ce:	e7a2      	b.n	8015516 <_dtoa_r+0x24e>
 80155d0:	636f4361 	.word	0x636f4361
 80155d4:	3fd287a7 	.word	0x3fd287a7
 80155d8:	8b60c8b3 	.word	0x8b60c8b3
 80155dc:	3fc68a28 	.word	0x3fc68a28
 80155e0:	509f79fb 	.word	0x509f79fb
 80155e4:	3fd34413 	.word	0x3fd34413
 80155e8:	7ff00000 	.word	0x7ff00000
 80155ec:	080198bc 	.word	0x080198bc
 80155f0:	3ff80000 	.word	0x3ff80000
 80155f4:	080197c0 	.word	0x080197c0
 80155f8:	08019798 	.word	0x08019798
 80155fc:	08019789 	.word	0x08019789
 8015600:	07f1      	lsls	r1, r6, #31
 8015602:	d508      	bpl.n	8015616 <_dtoa_r+0x34e>
 8015604:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015608:	e9d7 2300 	ldrd	r2, r3, [r7]
 801560c:	f7eb f804 	bl	8000618 <__aeabi_dmul>
 8015610:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8015614:	3501      	adds	r5, #1
 8015616:	1076      	asrs	r6, r6, #1
 8015618:	3708      	adds	r7, #8
 801561a:	2e00      	cmp	r6, #0
 801561c:	d1f0      	bne.n	8015600 <_dtoa_r+0x338>
 801561e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015622:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015626:	f7eb f921 	bl	800086c <__aeabi_ddiv>
 801562a:	e9cd 0100 	strd	r0, r1, [sp]
 801562e:	e01a      	b.n	8015666 <_dtoa_r+0x39e>
 8015630:	2502      	movs	r5, #2
 8015632:	e7a3      	b.n	801557c <_dtoa_r+0x2b4>
 8015634:	f000 80a0 	beq.w	8015778 <_dtoa_r+0x4b0>
 8015638:	f1ca 0600 	rsb	r6, sl, #0
 801563c:	4b9f      	ldr	r3, [pc, #636]	; (80158bc <_dtoa_r+0x5f4>)
 801563e:	4fa0      	ldr	r7, [pc, #640]	; (80158c0 <_dtoa_r+0x5f8>)
 8015640:	f006 020f 	and.w	r2, r6, #15
 8015644:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015648:	e9d3 2300 	ldrd	r2, r3, [r3]
 801564c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8015650:	f7ea ffe2 	bl	8000618 <__aeabi_dmul>
 8015654:	e9cd 0100 	strd	r0, r1, [sp]
 8015658:	1136      	asrs	r6, r6, #4
 801565a:	2300      	movs	r3, #0
 801565c:	2502      	movs	r5, #2
 801565e:	2e00      	cmp	r6, #0
 8015660:	d17f      	bne.n	8015762 <_dtoa_r+0x49a>
 8015662:	2b00      	cmp	r3, #0
 8015664:	d1e1      	bne.n	801562a <_dtoa_r+0x362>
 8015666:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015668:	2b00      	cmp	r3, #0
 801566a:	f000 8087 	beq.w	801577c <_dtoa_r+0x4b4>
 801566e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8015672:	2200      	movs	r2, #0
 8015674:	4b93      	ldr	r3, [pc, #588]	; (80158c4 <_dtoa_r+0x5fc>)
 8015676:	4630      	mov	r0, r6
 8015678:	4639      	mov	r1, r7
 801567a:	f7eb fa3f 	bl	8000afc <__aeabi_dcmplt>
 801567e:	2800      	cmp	r0, #0
 8015680:	d07c      	beq.n	801577c <_dtoa_r+0x4b4>
 8015682:	f1b9 0f00 	cmp.w	r9, #0
 8015686:	d079      	beq.n	801577c <_dtoa_r+0x4b4>
 8015688:	9b02      	ldr	r3, [sp, #8]
 801568a:	2b00      	cmp	r3, #0
 801568c:	dd35      	ble.n	80156fa <_dtoa_r+0x432>
 801568e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8015692:	9308      	str	r3, [sp, #32]
 8015694:	4639      	mov	r1, r7
 8015696:	2200      	movs	r2, #0
 8015698:	4b8b      	ldr	r3, [pc, #556]	; (80158c8 <_dtoa_r+0x600>)
 801569a:	4630      	mov	r0, r6
 801569c:	f7ea ffbc 	bl	8000618 <__aeabi_dmul>
 80156a0:	e9cd 0100 	strd	r0, r1, [sp]
 80156a4:	9f02      	ldr	r7, [sp, #8]
 80156a6:	3501      	adds	r5, #1
 80156a8:	4628      	mov	r0, r5
 80156aa:	f7ea ff4b 	bl	8000544 <__aeabi_i2d>
 80156ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80156b2:	f7ea ffb1 	bl	8000618 <__aeabi_dmul>
 80156b6:	2200      	movs	r2, #0
 80156b8:	4b84      	ldr	r3, [pc, #528]	; (80158cc <_dtoa_r+0x604>)
 80156ba:	f7ea fdf7 	bl	80002ac <__adddf3>
 80156be:	4605      	mov	r5, r0
 80156c0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80156c4:	2f00      	cmp	r7, #0
 80156c6:	d15d      	bne.n	8015784 <_dtoa_r+0x4bc>
 80156c8:	2200      	movs	r2, #0
 80156ca:	4b81      	ldr	r3, [pc, #516]	; (80158d0 <_dtoa_r+0x608>)
 80156cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80156d0:	f7ea fdea 	bl	80002a8 <__aeabi_dsub>
 80156d4:	462a      	mov	r2, r5
 80156d6:	4633      	mov	r3, r6
 80156d8:	e9cd 0100 	strd	r0, r1, [sp]
 80156dc:	f7eb fa2c 	bl	8000b38 <__aeabi_dcmpgt>
 80156e0:	2800      	cmp	r0, #0
 80156e2:	f040 8288 	bne.w	8015bf6 <_dtoa_r+0x92e>
 80156e6:	462a      	mov	r2, r5
 80156e8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80156ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80156f0:	f7eb fa04 	bl	8000afc <__aeabi_dcmplt>
 80156f4:	2800      	cmp	r0, #0
 80156f6:	f040 827c 	bne.w	8015bf2 <_dtoa_r+0x92a>
 80156fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80156fe:	e9cd 2300 	strd	r2, r3, [sp]
 8015702:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015704:	2b00      	cmp	r3, #0
 8015706:	f2c0 8150 	blt.w	80159aa <_dtoa_r+0x6e2>
 801570a:	f1ba 0f0e 	cmp.w	sl, #14
 801570e:	f300 814c 	bgt.w	80159aa <_dtoa_r+0x6e2>
 8015712:	4b6a      	ldr	r3, [pc, #424]	; (80158bc <_dtoa_r+0x5f4>)
 8015714:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8015718:	ed93 7b00 	vldr	d7, [r3]
 801571c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801571e:	2b00      	cmp	r3, #0
 8015720:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015724:	f280 80d8 	bge.w	80158d8 <_dtoa_r+0x610>
 8015728:	f1b9 0f00 	cmp.w	r9, #0
 801572c:	f300 80d4 	bgt.w	80158d8 <_dtoa_r+0x610>
 8015730:	f040 825e 	bne.w	8015bf0 <_dtoa_r+0x928>
 8015734:	2200      	movs	r2, #0
 8015736:	4b66      	ldr	r3, [pc, #408]	; (80158d0 <_dtoa_r+0x608>)
 8015738:	ec51 0b17 	vmov	r0, r1, d7
 801573c:	f7ea ff6c 	bl	8000618 <__aeabi_dmul>
 8015740:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015744:	f7eb f9ee 	bl	8000b24 <__aeabi_dcmpge>
 8015748:	464f      	mov	r7, r9
 801574a:	464e      	mov	r6, r9
 801574c:	2800      	cmp	r0, #0
 801574e:	f040 8234 	bne.w	8015bba <_dtoa_r+0x8f2>
 8015752:	2331      	movs	r3, #49	; 0x31
 8015754:	f10b 0501 	add.w	r5, fp, #1
 8015758:	f88b 3000 	strb.w	r3, [fp]
 801575c:	f10a 0a01 	add.w	sl, sl, #1
 8015760:	e22f      	b.n	8015bc2 <_dtoa_r+0x8fa>
 8015762:	07f2      	lsls	r2, r6, #31
 8015764:	d505      	bpl.n	8015772 <_dtoa_r+0x4aa>
 8015766:	e9d7 2300 	ldrd	r2, r3, [r7]
 801576a:	f7ea ff55 	bl	8000618 <__aeabi_dmul>
 801576e:	3501      	adds	r5, #1
 8015770:	2301      	movs	r3, #1
 8015772:	1076      	asrs	r6, r6, #1
 8015774:	3708      	adds	r7, #8
 8015776:	e772      	b.n	801565e <_dtoa_r+0x396>
 8015778:	2502      	movs	r5, #2
 801577a:	e774      	b.n	8015666 <_dtoa_r+0x39e>
 801577c:	f8cd a020 	str.w	sl, [sp, #32]
 8015780:	464f      	mov	r7, r9
 8015782:	e791      	b.n	80156a8 <_dtoa_r+0x3e0>
 8015784:	4b4d      	ldr	r3, [pc, #308]	; (80158bc <_dtoa_r+0x5f4>)
 8015786:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801578a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801578e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015790:	2b00      	cmp	r3, #0
 8015792:	d047      	beq.n	8015824 <_dtoa_r+0x55c>
 8015794:	4602      	mov	r2, r0
 8015796:	460b      	mov	r3, r1
 8015798:	2000      	movs	r0, #0
 801579a:	494e      	ldr	r1, [pc, #312]	; (80158d4 <_dtoa_r+0x60c>)
 801579c:	f7eb f866 	bl	800086c <__aeabi_ddiv>
 80157a0:	462a      	mov	r2, r5
 80157a2:	4633      	mov	r3, r6
 80157a4:	f7ea fd80 	bl	80002a8 <__aeabi_dsub>
 80157a8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80157ac:	465d      	mov	r5, fp
 80157ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 80157b2:	f7eb f9e1 	bl	8000b78 <__aeabi_d2iz>
 80157b6:	4606      	mov	r6, r0
 80157b8:	f7ea fec4 	bl	8000544 <__aeabi_i2d>
 80157bc:	4602      	mov	r2, r0
 80157be:	460b      	mov	r3, r1
 80157c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80157c4:	f7ea fd70 	bl	80002a8 <__aeabi_dsub>
 80157c8:	3630      	adds	r6, #48	; 0x30
 80157ca:	f805 6b01 	strb.w	r6, [r5], #1
 80157ce:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80157d2:	e9cd 0100 	strd	r0, r1, [sp]
 80157d6:	f7eb f991 	bl	8000afc <__aeabi_dcmplt>
 80157da:	2800      	cmp	r0, #0
 80157dc:	d163      	bne.n	80158a6 <_dtoa_r+0x5de>
 80157de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80157e2:	2000      	movs	r0, #0
 80157e4:	4937      	ldr	r1, [pc, #220]	; (80158c4 <_dtoa_r+0x5fc>)
 80157e6:	f7ea fd5f 	bl	80002a8 <__aeabi_dsub>
 80157ea:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80157ee:	f7eb f985 	bl	8000afc <__aeabi_dcmplt>
 80157f2:	2800      	cmp	r0, #0
 80157f4:	f040 80b7 	bne.w	8015966 <_dtoa_r+0x69e>
 80157f8:	eba5 030b 	sub.w	r3, r5, fp
 80157fc:	429f      	cmp	r7, r3
 80157fe:	f77f af7c 	ble.w	80156fa <_dtoa_r+0x432>
 8015802:	2200      	movs	r2, #0
 8015804:	4b30      	ldr	r3, [pc, #192]	; (80158c8 <_dtoa_r+0x600>)
 8015806:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801580a:	f7ea ff05 	bl	8000618 <__aeabi_dmul>
 801580e:	2200      	movs	r2, #0
 8015810:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8015814:	4b2c      	ldr	r3, [pc, #176]	; (80158c8 <_dtoa_r+0x600>)
 8015816:	e9dd 0100 	ldrd	r0, r1, [sp]
 801581a:	f7ea fefd 	bl	8000618 <__aeabi_dmul>
 801581e:	e9cd 0100 	strd	r0, r1, [sp]
 8015822:	e7c4      	b.n	80157ae <_dtoa_r+0x4e6>
 8015824:	462a      	mov	r2, r5
 8015826:	4633      	mov	r3, r6
 8015828:	f7ea fef6 	bl	8000618 <__aeabi_dmul>
 801582c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8015830:	eb0b 0507 	add.w	r5, fp, r7
 8015834:	465e      	mov	r6, fp
 8015836:	e9dd 0100 	ldrd	r0, r1, [sp]
 801583a:	f7eb f99d 	bl	8000b78 <__aeabi_d2iz>
 801583e:	4607      	mov	r7, r0
 8015840:	f7ea fe80 	bl	8000544 <__aeabi_i2d>
 8015844:	3730      	adds	r7, #48	; 0x30
 8015846:	4602      	mov	r2, r0
 8015848:	460b      	mov	r3, r1
 801584a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801584e:	f7ea fd2b 	bl	80002a8 <__aeabi_dsub>
 8015852:	f806 7b01 	strb.w	r7, [r6], #1
 8015856:	42ae      	cmp	r6, r5
 8015858:	e9cd 0100 	strd	r0, r1, [sp]
 801585c:	f04f 0200 	mov.w	r2, #0
 8015860:	d126      	bne.n	80158b0 <_dtoa_r+0x5e8>
 8015862:	4b1c      	ldr	r3, [pc, #112]	; (80158d4 <_dtoa_r+0x60c>)
 8015864:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8015868:	f7ea fd20 	bl	80002ac <__adddf3>
 801586c:	4602      	mov	r2, r0
 801586e:	460b      	mov	r3, r1
 8015870:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015874:	f7eb f960 	bl	8000b38 <__aeabi_dcmpgt>
 8015878:	2800      	cmp	r0, #0
 801587a:	d174      	bne.n	8015966 <_dtoa_r+0x69e>
 801587c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8015880:	2000      	movs	r0, #0
 8015882:	4914      	ldr	r1, [pc, #80]	; (80158d4 <_dtoa_r+0x60c>)
 8015884:	f7ea fd10 	bl	80002a8 <__aeabi_dsub>
 8015888:	4602      	mov	r2, r0
 801588a:	460b      	mov	r3, r1
 801588c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015890:	f7eb f934 	bl	8000afc <__aeabi_dcmplt>
 8015894:	2800      	cmp	r0, #0
 8015896:	f43f af30 	beq.w	80156fa <_dtoa_r+0x432>
 801589a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801589e:	2b30      	cmp	r3, #48	; 0x30
 80158a0:	f105 32ff 	add.w	r2, r5, #4294967295
 80158a4:	d002      	beq.n	80158ac <_dtoa_r+0x5e4>
 80158a6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80158aa:	e04a      	b.n	8015942 <_dtoa_r+0x67a>
 80158ac:	4615      	mov	r5, r2
 80158ae:	e7f4      	b.n	801589a <_dtoa_r+0x5d2>
 80158b0:	4b05      	ldr	r3, [pc, #20]	; (80158c8 <_dtoa_r+0x600>)
 80158b2:	f7ea feb1 	bl	8000618 <__aeabi_dmul>
 80158b6:	e9cd 0100 	strd	r0, r1, [sp]
 80158ba:	e7bc      	b.n	8015836 <_dtoa_r+0x56e>
 80158bc:	080197c0 	.word	0x080197c0
 80158c0:	08019798 	.word	0x08019798
 80158c4:	3ff00000 	.word	0x3ff00000
 80158c8:	40240000 	.word	0x40240000
 80158cc:	401c0000 	.word	0x401c0000
 80158d0:	40140000 	.word	0x40140000
 80158d4:	3fe00000 	.word	0x3fe00000
 80158d8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80158dc:	465d      	mov	r5, fp
 80158de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80158e2:	4630      	mov	r0, r6
 80158e4:	4639      	mov	r1, r7
 80158e6:	f7ea ffc1 	bl	800086c <__aeabi_ddiv>
 80158ea:	f7eb f945 	bl	8000b78 <__aeabi_d2iz>
 80158ee:	4680      	mov	r8, r0
 80158f0:	f7ea fe28 	bl	8000544 <__aeabi_i2d>
 80158f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80158f8:	f7ea fe8e 	bl	8000618 <__aeabi_dmul>
 80158fc:	4602      	mov	r2, r0
 80158fe:	460b      	mov	r3, r1
 8015900:	4630      	mov	r0, r6
 8015902:	4639      	mov	r1, r7
 8015904:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8015908:	f7ea fcce 	bl	80002a8 <__aeabi_dsub>
 801590c:	f805 6b01 	strb.w	r6, [r5], #1
 8015910:	eba5 060b 	sub.w	r6, r5, fp
 8015914:	45b1      	cmp	r9, r6
 8015916:	4602      	mov	r2, r0
 8015918:	460b      	mov	r3, r1
 801591a:	d139      	bne.n	8015990 <_dtoa_r+0x6c8>
 801591c:	f7ea fcc6 	bl	80002ac <__adddf3>
 8015920:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015924:	4606      	mov	r6, r0
 8015926:	460f      	mov	r7, r1
 8015928:	f7eb f906 	bl	8000b38 <__aeabi_dcmpgt>
 801592c:	b9c8      	cbnz	r0, 8015962 <_dtoa_r+0x69a>
 801592e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015932:	4630      	mov	r0, r6
 8015934:	4639      	mov	r1, r7
 8015936:	f7eb f8d7 	bl	8000ae8 <__aeabi_dcmpeq>
 801593a:	b110      	cbz	r0, 8015942 <_dtoa_r+0x67a>
 801593c:	f018 0f01 	tst.w	r8, #1
 8015940:	d10f      	bne.n	8015962 <_dtoa_r+0x69a>
 8015942:	9904      	ldr	r1, [sp, #16]
 8015944:	4620      	mov	r0, r4
 8015946:	f000 fe07 	bl	8016558 <_Bfree>
 801594a:	2300      	movs	r3, #0
 801594c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801594e:	702b      	strb	r3, [r5, #0]
 8015950:	f10a 0301 	add.w	r3, sl, #1
 8015954:	6013      	str	r3, [r2, #0]
 8015956:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015958:	2b00      	cmp	r3, #0
 801595a:	f000 8241 	beq.w	8015de0 <_dtoa_r+0xb18>
 801595e:	601d      	str	r5, [r3, #0]
 8015960:	e23e      	b.n	8015de0 <_dtoa_r+0xb18>
 8015962:	f8cd a020 	str.w	sl, [sp, #32]
 8015966:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801596a:	2a39      	cmp	r2, #57	; 0x39
 801596c:	f105 33ff 	add.w	r3, r5, #4294967295
 8015970:	d108      	bne.n	8015984 <_dtoa_r+0x6bc>
 8015972:	459b      	cmp	fp, r3
 8015974:	d10a      	bne.n	801598c <_dtoa_r+0x6c4>
 8015976:	9b08      	ldr	r3, [sp, #32]
 8015978:	3301      	adds	r3, #1
 801597a:	9308      	str	r3, [sp, #32]
 801597c:	2330      	movs	r3, #48	; 0x30
 801597e:	f88b 3000 	strb.w	r3, [fp]
 8015982:	465b      	mov	r3, fp
 8015984:	781a      	ldrb	r2, [r3, #0]
 8015986:	3201      	adds	r2, #1
 8015988:	701a      	strb	r2, [r3, #0]
 801598a:	e78c      	b.n	80158a6 <_dtoa_r+0x5de>
 801598c:	461d      	mov	r5, r3
 801598e:	e7ea      	b.n	8015966 <_dtoa_r+0x69e>
 8015990:	2200      	movs	r2, #0
 8015992:	4b9b      	ldr	r3, [pc, #620]	; (8015c00 <_dtoa_r+0x938>)
 8015994:	f7ea fe40 	bl	8000618 <__aeabi_dmul>
 8015998:	2200      	movs	r2, #0
 801599a:	2300      	movs	r3, #0
 801599c:	4606      	mov	r6, r0
 801599e:	460f      	mov	r7, r1
 80159a0:	f7eb f8a2 	bl	8000ae8 <__aeabi_dcmpeq>
 80159a4:	2800      	cmp	r0, #0
 80159a6:	d09a      	beq.n	80158de <_dtoa_r+0x616>
 80159a8:	e7cb      	b.n	8015942 <_dtoa_r+0x67a>
 80159aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80159ac:	2a00      	cmp	r2, #0
 80159ae:	f000 808b 	beq.w	8015ac8 <_dtoa_r+0x800>
 80159b2:	9a06      	ldr	r2, [sp, #24]
 80159b4:	2a01      	cmp	r2, #1
 80159b6:	dc6e      	bgt.n	8015a96 <_dtoa_r+0x7ce>
 80159b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80159ba:	2a00      	cmp	r2, #0
 80159bc:	d067      	beq.n	8015a8e <_dtoa_r+0x7c6>
 80159be:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80159c2:	9f07      	ldr	r7, [sp, #28]
 80159c4:	9d05      	ldr	r5, [sp, #20]
 80159c6:	9a05      	ldr	r2, [sp, #20]
 80159c8:	2101      	movs	r1, #1
 80159ca:	441a      	add	r2, r3
 80159cc:	4620      	mov	r0, r4
 80159ce:	9205      	str	r2, [sp, #20]
 80159d0:	4498      	add	r8, r3
 80159d2:	f000 fe9f 	bl	8016714 <__i2b>
 80159d6:	4606      	mov	r6, r0
 80159d8:	2d00      	cmp	r5, #0
 80159da:	dd0c      	ble.n	80159f6 <_dtoa_r+0x72e>
 80159dc:	f1b8 0f00 	cmp.w	r8, #0
 80159e0:	dd09      	ble.n	80159f6 <_dtoa_r+0x72e>
 80159e2:	4545      	cmp	r5, r8
 80159e4:	9a05      	ldr	r2, [sp, #20]
 80159e6:	462b      	mov	r3, r5
 80159e8:	bfa8      	it	ge
 80159ea:	4643      	movge	r3, r8
 80159ec:	1ad2      	subs	r2, r2, r3
 80159ee:	9205      	str	r2, [sp, #20]
 80159f0:	1aed      	subs	r5, r5, r3
 80159f2:	eba8 0803 	sub.w	r8, r8, r3
 80159f6:	9b07      	ldr	r3, [sp, #28]
 80159f8:	b1eb      	cbz	r3, 8015a36 <_dtoa_r+0x76e>
 80159fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80159fc:	2b00      	cmp	r3, #0
 80159fe:	d067      	beq.n	8015ad0 <_dtoa_r+0x808>
 8015a00:	b18f      	cbz	r7, 8015a26 <_dtoa_r+0x75e>
 8015a02:	4631      	mov	r1, r6
 8015a04:	463a      	mov	r2, r7
 8015a06:	4620      	mov	r0, r4
 8015a08:	f000 ff24 	bl	8016854 <__pow5mult>
 8015a0c:	9a04      	ldr	r2, [sp, #16]
 8015a0e:	4601      	mov	r1, r0
 8015a10:	4606      	mov	r6, r0
 8015a12:	4620      	mov	r0, r4
 8015a14:	f000 fe87 	bl	8016726 <__multiply>
 8015a18:	9904      	ldr	r1, [sp, #16]
 8015a1a:	9008      	str	r0, [sp, #32]
 8015a1c:	4620      	mov	r0, r4
 8015a1e:	f000 fd9b 	bl	8016558 <_Bfree>
 8015a22:	9b08      	ldr	r3, [sp, #32]
 8015a24:	9304      	str	r3, [sp, #16]
 8015a26:	9b07      	ldr	r3, [sp, #28]
 8015a28:	1bda      	subs	r2, r3, r7
 8015a2a:	d004      	beq.n	8015a36 <_dtoa_r+0x76e>
 8015a2c:	9904      	ldr	r1, [sp, #16]
 8015a2e:	4620      	mov	r0, r4
 8015a30:	f000 ff10 	bl	8016854 <__pow5mult>
 8015a34:	9004      	str	r0, [sp, #16]
 8015a36:	2101      	movs	r1, #1
 8015a38:	4620      	mov	r0, r4
 8015a3a:	f000 fe6b 	bl	8016714 <__i2b>
 8015a3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015a40:	4607      	mov	r7, r0
 8015a42:	2b00      	cmp	r3, #0
 8015a44:	f000 81d0 	beq.w	8015de8 <_dtoa_r+0xb20>
 8015a48:	461a      	mov	r2, r3
 8015a4a:	4601      	mov	r1, r0
 8015a4c:	4620      	mov	r0, r4
 8015a4e:	f000 ff01 	bl	8016854 <__pow5mult>
 8015a52:	9b06      	ldr	r3, [sp, #24]
 8015a54:	2b01      	cmp	r3, #1
 8015a56:	4607      	mov	r7, r0
 8015a58:	dc40      	bgt.n	8015adc <_dtoa_r+0x814>
 8015a5a:	9b00      	ldr	r3, [sp, #0]
 8015a5c:	2b00      	cmp	r3, #0
 8015a5e:	d139      	bne.n	8015ad4 <_dtoa_r+0x80c>
 8015a60:	9b01      	ldr	r3, [sp, #4]
 8015a62:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015a66:	2b00      	cmp	r3, #0
 8015a68:	d136      	bne.n	8015ad8 <_dtoa_r+0x810>
 8015a6a:	9b01      	ldr	r3, [sp, #4]
 8015a6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015a70:	0d1b      	lsrs	r3, r3, #20
 8015a72:	051b      	lsls	r3, r3, #20
 8015a74:	b12b      	cbz	r3, 8015a82 <_dtoa_r+0x7ba>
 8015a76:	9b05      	ldr	r3, [sp, #20]
 8015a78:	3301      	adds	r3, #1
 8015a7a:	9305      	str	r3, [sp, #20]
 8015a7c:	f108 0801 	add.w	r8, r8, #1
 8015a80:	2301      	movs	r3, #1
 8015a82:	9307      	str	r3, [sp, #28]
 8015a84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015a86:	2b00      	cmp	r3, #0
 8015a88:	d12a      	bne.n	8015ae0 <_dtoa_r+0x818>
 8015a8a:	2001      	movs	r0, #1
 8015a8c:	e030      	b.n	8015af0 <_dtoa_r+0x828>
 8015a8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015a90:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8015a94:	e795      	b.n	80159c2 <_dtoa_r+0x6fa>
 8015a96:	9b07      	ldr	r3, [sp, #28]
 8015a98:	f109 37ff 	add.w	r7, r9, #4294967295
 8015a9c:	42bb      	cmp	r3, r7
 8015a9e:	bfbf      	itttt	lt
 8015aa0:	9b07      	ldrlt	r3, [sp, #28]
 8015aa2:	9707      	strlt	r7, [sp, #28]
 8015aa4:	1afa      	sublt	r2, r7, r3
 8015aa6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8015aa8:	bfbb      	ittet	lt
 8015aaa:	189b      	addlt	r3, r3, r2
 8015aac:	930e      	strlt	r3, [sp, #56]	; 0x38
 8015aae:	1bdf      	subge	r7, r3, r7
 8015ab0:	2700      	movlt	r7, #0
 8015ab2:	f1b9 0f00 	cmp.w	r9, #0
 8015ab6:	bfb5      	itete	lt
 8015ab8:	9b05      	ldrlt	r3, [sp, #20]
 8015aba:	9d05      	ldrge	r5, [sp, #20]
 8015abc:	eba3 0509 	sublt.w	r5, r3, r9
 8015ac0:	464b      	movge	r3, r9
 8015ac2:	bfb8      	it	lt
 8015ac4:	2300      	movlt	r3, #0
 8015ac6:	e77e      	b.n	80159c6 <_dtoa_r+0x6fe>
 8015ac8:	9f07      	ldr	r7, [sp, #28]
 8015aca:	9d05      	ldr	r5, [sp, #20]
 8015acc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8015ace:	e783      	b.n	80159d8 <_dtoa_r+0x710>
 8015ad0:	9a07      	ldr	r2, [sp, #28]
 8015ad2:	e7ab      	b.n	8015a2c <_dtoa_r+0x764>
 8015ad4:	2300      	movs	r3, #0
 8015ad6:	e7d4      	b.n	8015a82 <_dtoa_r+0x7ba>
 8015ad8:	9b00      	ldr	r3, [sp, #0]
 8015ada:	e7d2      	b.n	8015a82 <_dtoa_r+0x7ba>
 8015adc:	2300      	movs	r3, #0
 8015ade:	9307      	str	r3, [sp, #28]
 8015ae0:	693b      	ldr	r3, [r7, #16]
 8015ae2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8015ae6:	6918      	ldr	r0, [r3, #16]
 8015ae8:	f000 fdc6 	bl	8016678 <__hi0bits>
 8015aec:	f1c0 0020 	rsb	r0, r0, #32
 8015af0:	4440      	add	r0, r8
 8015af2:	f010 001f 	ands.w	r0, r0, #31
 8015af6:	d047      	beq.n	8015b88 <_dtoa_r+0x8c0>
 8015af8:	f1c0 0320 	rsb	r3, r0, #32
 8015afc:	2b04      	cmp	r3, #4
 8015afe:	dd3b      	ble.n	8015b78 <_dtoa_r+0x8b0>
 8015b00:	9b05      	ldr	r3, [sp, #20]
 8015b02:	f1c0 001c 	rsb	r0, r0, #28
 8015b06:	4403      	add	r3, r0
 8015b08:	9305      	str	r3, [sp, #20]
 8015b0a:	4405      	add	r5, r0
 8015b0c:	4480      	add	r8, r0
 8015b0e:	9b05      	ldr	r3, [sp, #20]
 8015b10:	2b00      	cmp	r3, #0
 8015b12:	dd05      	ble.n	8015b20 <_dtoa_r+0x858>
 8015b14:	461a      	mov	r2, r3
 8015b16:	9904      	ldr	r1, [sp, #16]
 8015b18:	4620      	mov	r0, r4
 8015b1a:	f000 fee9 	bl	80168f0 <__lshift>
 8015b1e:	9004      	str	r0, [sp, #16]
 8015b20:	f1b8 0f00 	cmp.w	r8, #0
 8015b24:	dd05      	ble.n	8015b32 <_dtoa_r+0x86a>
 8015b26:	4639      	mov	r1, r7
 8015b28:	4642      	mov	r2, r8
 8015b2a:	4620      	mov	r0, r4
 8015b2c:	f000 fee0 	bl	80168f0 <__lshift>
 8015b30:	4607      	mov	r7, r0
 8015b32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015b34:	b353      	cbz	r3, 8015b8c <_dtoa_r+0x8c4>
 8015b36:	4639      	mov	r1, r7
 8015b38:	9804      	ldr	r0, [sp, #16]
 8015b3a:	f000 ff2d 	bl	8016998 <__mcmp>
 8015b3e:	2800      	cmp	r0, #0
 8015b40:	da24      	bge.n	8015b8c <_dtoa_r+0x8c4>
 8015b42:	2300      	movs	r3, #0
 8015b44:	220a      	movs	r2, #10
 8015b46:	9904      	ldr	r1, [sp, #16]
 8015b48:	4620      	mov	r0, r4
 8015b4a:	f000 fd1c 	bl	8016586 <__multadd>
 8015b4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015b50:	9004      	str	r0, [sp, #16]
 8015b52:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015b56:	2b00      	cmp	r3, #0
 8015b58:	f000 814d 	beq.w	8015df6 <_dtoa_r+0xb2e>
 8015b5c:	2300      	movs	r3, #0
 8015b5e:	4631      	mov	r1, r6
 8015b60:	220a      	movs	r2, #10
 8015b62:	4620      	mov	r0, r4
 8015b64:	f000 fd0f 	bl	8016586 <__multadd>
 8015b68:	9b02      	ldr	r3, [sp, #8]
 8015b6a:	2b00      	cmp	r3, #0
 8015b6c:	4606      	mov	r6, r0
 8015b6e:	dc4f      	bgt.n	8015c10 <_dtoa_r+0x948>
 8015b70:	9b06      	ldr	r3, [sp, #24]
 8015b72:	2b02      	cmp	r3, #2
 8015b74:	dd4c      	ble.n	8015c10 <_dtoa_r+0x948>
 8015b76:	e011      	b.n	8015b9c <_dtoa_r+0x8d4>
 8015b78:	d0c9      	beq.n	8015b0e <_dtoa_r+0x846>
 8015b7a:	9a05      	ldr	r2, [sp, #20]
 8015b7c:	331c      	adds	r3, #28
 8015b7e:	441a      	add	r2, r3
 8015b80:	9205      	str	r2, [sp, #20]
 8015b82:	441d      	add	r5, r3
 8015b84:	4498      	add	r8, r3
 8015b86:	e7c2      	b.n	8015b0e <_dtoa_r+0x846>
 8015b88:	4603      	mov	r3, r0
 8015b8a:	e7f6      	b.n	8015b7a <_dtoa_r+0x8b2>
 8015b8c:	f1b9 0f00 	cmp.w	r9, #0
 8015b90:	dc38      	bgt.n	8015c04 <_dtoa_r+0x93c>
 8015b92:	9b06      	ldr	r3, [sp, #24]
 8015b94:	2b02      	cmp	r3, #2
 8015b96:	dd35      	ble.n	8015c04 <_dtoa_r+0x93c>
 8015b98:	f8cd 9008 	str.w	r9, [sp, #8]
 8015b9c:	9b02      	ldr	r3, [sp, #8]
 8015b9e:	b963      	cbnz	r3, 8015bba <_dtoa_r+0x8f2>
 8015ba0:	4639      	mov	r1, r7
 8015ba2:	2205      	movs	r2, #5
 8015ba4:	4620      	mov	r0, r4
 8015ba6:	f000 fcee 	bl	8016586 <__multadd>
 8015baa:	4601      	mov	r1, r0
 8015bac:	4607      	mov	r7, r0
 8015bae:	9804      	ldr	r0, [sp, #16]
 8015bb0:	f000 fef2 	bl	8016998 <__mcmp>
 8015bb4:	2800      	cmp	r0, #0
 8015bb6:	f73f adcc 	bgt.w	8015752 <_dtoa_r+0x48a>
 8015bba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015bbc:	465d      	mov	r5, fp
 8015bbe:	ea6f 0a03 	mvn.w	sl, r3
 8015bc2:	f04f 0900 	mov.w	r9, #0
 8015bc6:	4639      	mov	r1, r7
 8015bc8:	4620      	mov	r0, r4
 8015bca:	f000 fcc5 	bl	8016558 <_Bfree>
 8015bce:	2e00      	cmp	r6, #0
 8015bd0:	f43f aeb7 	beq.w	8015942 <_dtoa_r+0x67a>
 8015bd4:	f1b9 0f00 	cmp.w	r9, #0
 8015bd8:	d005      	beq.n	8015be6 <_dtoa_r+0x91e>
 8015bda:	45b1      	cmp	r9, r6
 8015bdc:	d003      	beq.n	8015be6 <_dtoa_r+0x91e>
 8015bde:	4649      	mov	r1, r9
 8015be0:	4620      	mov	r0, r4
 8015be2:	f000 fcb9 	bl	8016558 <_Bfree>
 8015be6:	4631      	mov	r1, r6
 8015be8:	4620      	mov	r0, r4
 8015bea:	f000 fcb5 	bl	8016558 <_Bfree>
 8015bee:	e6a8      	b.n	8015942 <_dtoa_r+0x67a>
 8015bf0:	2700      	movs	r7, #0
 8015bf2:	463e      	mov	r6, r7
 8015bf4:	e7e1      	b.n	8015bba <_dtoa_r+0x8f2>
 8015bf6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8015bfa:	463e      	mov	r6, r7
 8015bfc:	e5a9      	b.n	8015752 <_dtoa_r+0x48a>
 8015bfe:	bf00      	nop
 8015c00:	40240000 	.word	0x40240000
 8015c04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015c06:	f8cd 9008 	str.w	r9, [sp, #8]
 8015c0a:	2b00      	cmp	r3, #0
 8015c0c:	f000 80fa 	beq.w	8015e04 <_dtoa_r+0xb3c>
 8015c10:	2d00      	cmp	r5, #0
 8015c12:	dd05      	ble.n	8015c20 <_dtoa_r+0x958>
 8015c14:	4631      	mov	r1, r6
 8015c16:	462a      	mov	r2, r5
 8015c18:	4620      	mov	r0, r4
 8015c1a:	f000 fe69 	bl	80168f0 <__lshift>
 8015c1e:	4606      	mov	r6, r0
 8015c20:	9b07      	ldr	r3, [sp, #28]
 8015c22:	2b00      	cmp	r3, #0
 8015c24:	d04c      	beq.n	8015cc0 <_dtoa_r+0x9f8>
 8015c26:	6871      	ldr	r1, [r6, #4]
 8015c28:	4620      	mov	r0, r4
 8015c2a:	f000 fc61 	bl	80164f0 <_Balloc>
 8015c2e:	6932      	ldr	r2, [r6, #16]
 8015c30:	3202      	adds	r2, #2
 8015c32:	4605      	mov	r5, r0
 8015c34:	0092      	lsls	r2, r2, #2
 8015c36:	f106 010c 	add.w	r1, r6, #12
 8015c3a:	300c      	adds	r0, #12
 8015c3c:	f7fd fc50 	bl	80134e0 <memcpy>
 8015c40:	2201      	movs	r2, #1
 8015c42:	4629      	mov	r1, r5
 8015c44:	4620      	mov	r0, r4
 8015c46:	f000 fe53 	bl	80168f0 <__lshift>
 8015c4a:	9b00      	ldr	r3, [sp, #0]
 8015c4c:	f8cd b014 	str.w	fp, [sp, #20]
 8015c50:	f003 0301 	and.w	r3, r3, #1
 8015c54:	46b1      	mov	r9, r6
 8015c56:	9307      	str	r3, [sp, #28]
 8015c58:	4606      	mov	r6, r0
 8015c5a:	4639      	mov	r1, r7
 8015c5c:	9804      	ldr	r0, [sp, #16]
 8015c5e:	f7ff faa5 	bl	80151ac <quorem>
 8015c62:	4649      	mov	r1, r9
 8015c64:	4605      	mov	r5, r0
 8015c66:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8015c6a:	9804      	ldr	r0, [sp, #16]
 8015c6c:	f000 fe94 	bl	8016998 <__mcmp>
 8015c70:	4632      	mov	r2, r6
 8015c72:	9000      	str	r0, [sp, #0]
 8015c74:	4639      	mov	r1, r7
 8015c76:	4620      	mov	r0, r4
 8015c78:	f000 fea8 	bl	80169cc <__mdiff>
 8015c7c:	68c3      	ldr	r3, [r0, #12]
 8015c7e:	4602      	mov	r2, r0
 8015c80:	bb03      	cbnz	r3, 8015cc4 <_dtoa_r+0x9fc>
 8015c82:	4601      	mov	r1, r0
 8015c84:	9008      	str	r0, [sp, #32]
 8015c86:	9804      	ldr	r0, [sp, #16]
 8015c88:	f000 fe86 	bl	8016998 <__mcmp>
 8015c8c:	9a08      	ldr	r2, [sp, #32]
 8015c8e:	4603      	mov	r3, r0
 8015c90:	4611      	mov	r1, r2
 8015c92:	4620      	mov	r0, r4
 8015c94:	9308      	str	r3, [sp, #32]
 8015c96:	f000 fc5f 	bl	8016558 <_Bfree>
 8015c9a:	9b08      	ldr	r3, [sp, #32]
 8015c9c:	b9a3      	cbnz	r3, 8015cc8 <_dtoa_r+0xa00>
 8015c9e:	9a06      	ldr	r2, [sp, #24]
 8015ca0:	b992      	cbnz	r2, 8015cc8 <_dtoa_r+0xa00>
 8015ca2:	9a07      	ldr	r2, [sp, #28]
 8015ca4:	b982      	cbnz	r2, 8015cc8 <_dtoa_r+0xa00>
 8015ca6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8015caa:	d029      	beq.n	8015d00 <_dtoa_r+0xa38>
 8015cac:	9b00      	ldr	r3, [sp, #0]
 8015cae:	2b00      	cmp	r3, #0
 8015cb0:	dd01      	ble.n	8015cb6 <_dtoa_r+0x9ee>
 8015cb2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8015cb6:	9b05      	ldr	r3, [sp, #20]
 8015cb8:	1c5d      	adds	r5, r3, #1
 8015cba:	f883 8000 	strb.w	r8, [r3]
 8015cbe:	e782      	b.n	8015bc6 <_dtoa_r+0x8fe>
 8015cc0:	4630      	mov	r0, r6
 8015cc2:	e7c2      	b.n	8015c4a <_dtoa_r+0x982>
 8015cc4:	2301      	movs	r3, #1
 8015cc6:	e7e3      	b.n	8015c90 <_dtoa_r+0x9c8>
 8015cc8:	9a00      	ldr	r2, [sp, #0]
 8015cca:	2a00      	cmp	r2, #0
 8015ccc:	db04      	blt.n	8015cd8 <_dtoa_r+0xa10>
 8015cce:	d125      	bne.n	8015d1c <_dtoa_r+0xa54>
 8015cd0:	9a06      	ldr	r2, [sp, #24]
 8015cd2:	bb1a      	cbnz	r2, 8015d1c <_dtoa_r+0xa54>
 8015cd4:	9a07      	ldr	r2, [sp, #28]
 8015cd6:	bb0a      	cbnz	r2, 8015d1c <_dtoa_r+0xa54>
 8015cd8:	2b00      	cmp	r3, #0
 8015cda:	ddec      	ble.n	8015cb6 <_dtoa_r+0x9ee>
 8015cdc:	2201      	movs	r2, #1
 8015cde:	9904      	ldr	r1, [sp, #16]
 8015ce0:	4620      	mov	r0, r4
 8015ce2:	f000 fe05 	bl	80168f0 <__lshift>
 8015ce6:	4639      	mov	r1, r7
 8015ce8:	9004      	str	r0, [sp, #16]
 8015cea:	f000 fe55 	bl	8016998 <__mcmp>
 8015cee:	2800      	cmp	r0, #0
 8015cf0:	dc03      	bgt.n	8015cfa <_dtoa_r+0xa32>
 8015cf2:	d1e0      	bne.n	8015cb6 <_dtoa_r+0x9ee>
 8015cf4:	f018 0f01 	tst.w	r8, #1
 8015cf8:	d0dd      	beq.n	8015cb6 <_dtoa_r+0x9ee>
 8015cfa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8015cfe:	d1d8      	bne.n	8015cb2 <_dtoa_r+0x9ea>
 8015d00:	9b05      	ldr	r3, [sp, #20]
 8015d02:	9a05      	ldr	r2, [sp, #20]
 8015d04:	1c5d      	adds	r5, r3, #1
 8015d06:	2339      	movs	r3, #57	; 0x39
 8015d08:	7013      	strb	r3, [r2, #0]
 8015d0a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015d0e:	2b39      	cmp	r3, #57	; 0x39
 8015d10:	f105 32ff 	add.w	r2, r5, #4294967295
 8015d14:	d04f      	beq.n	8015db6 <_dtoa_r+0xaee>
 8015d16:	3301      	adds	r3, #1
 8015d18:	7013      	strb	r3, [r2, #0]
 8015d1a:	e754      	b.n	8015bc6 <_dtoa_r+0x8fe>
 8015d1c:	9a05      	ldr	r2, [sp, #20]
 8015d1e:	2b00      	cmp	r3, #0
 8015d20:	f102 0501 	add.w	r5, r2, #1
 8015d24:	dd06      	ble.n	8015d34 <_dtoa_r+0xa6c>
 8015d26:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8015d2a:	d0e9      	beq.n	8015d00 <_dtoa_r+0xa38>
 8015d2c:	f108 0801 	add.w	r8, r8, #1
 8015d30:	9b05      	ldr	r3, [sp, #20]
 8015d32:	e7c2      	b.n	8015cba <_dtoa_r+0x9f2>
 8015d34:	9a02      	ldr	r2, [sp, #8]
 8015d36:	f805 8c01 	strb.w	r8, [r5, #-1]
 8015d3a:	eba5 030b 	sub.w	r3, r5, fp
 8015d3e:	4293      	cmp	r3, r2
 8015d40:	d021      	beq.n	8015d86 <_dtoa_r+0xabe>
 8015d42:	2300      	movs	r3, #0
 8015d44:	220a      	movs	r2, #10
 8015d46:	9904      	ldr	r1, [sp, #16]
 8015d48:	4620      	mov	r0, r4
 8015d4a:	f000 fc1c 	bl	8016586 <__multadd>
 8015d4e:	45b1      	cmp	r9, r6
 8015d50:	9004      	str	r0, [sp, #16]
 8015d52:	f04f 0300 	mov.w	r3, #0
 8015d56:	f04f 020a 	mov.w	r2, #10
 8015d5a:	4649      	mov	r1, r9
 8015d5c:	4620      	mov	r0, r4
 8015d5e:	d105      	bne.n	8015d6c <_dtoa_r+0xaa4>
 8015d60:	f000 fc11 	bl	8016586 <__multadd>
 8015d64:	4681      	mov	r9, r0
 8015d66:	4606      	mov	r6, r0
 8015d68:	9505      	str	r5, [sp, #20]
 8015d6a:	e776      	b.n	8015c5a <_dtoa_r+0x992>
 8015d6c:	f000 fc0b 	bl	8016586 <__multadd>
 8015d70:	4631      	mov	r1, r6
 8015d72:	4681      	mov	r9, r0
 8015d74:	2300      	movs	r3, #0
 8015d76:	220a      	movs	r2, #10
 8015d78:	4620      	mov	r0, r4
 8015d7a:	f000 fc04 	bl	8016586 <__multadd>
 8015d7e:	4606      	mov	r6, r0
 8015d80:	e7f2      	b.n	8015d68 <_dtoa_r+0xaa0>
 8015d82:	f04f 0900 	mov.w	r9, #0
 8015d86:	2201      	movs	r2, #1
 8015d88:	9904      	ldr	r1, [sp, #16]
 8015d8a:	4620      	mov	r0, r4
 8015d8c:	f000 fdb0 	bl	80168f0 <__lshift>
 8015d90:	4639      	mov	r1, r7
 8015d92:	9004      	str	r0, [sp, #16]
 8015d94:	f000 fe00 	bl	8016998 <__mcmp>
 8015d98:	2800      	cmp	r0, #0
 8015d9a:	dcb6      	bgt.n	8015d0a <_dtoa_r+0xa42>
 8015d9c:	d102      	bne.n	8015da4 <_dtoa_r+0xadc>
 8015d9e:	f018 0f01 	tst.w	r8, #1
 8015da2:	d1b2      	bne.n	8015d0a <_dtoa_r+0xa42>
 8015da4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015da8:	2b30      	cmp	r3, #48	; 0x30
 8015daa:	f105 32ff 	add.w	r2, r5, #4294967295
 8015dae:	f47f af0a 	bne.w	8015bc6 <_dtoa_r+0x8fe>
 8015db2:	4615      	mov	r5, r2
 8015db4:	e7f6      	b.n	8015da4 <_dtoa_r+0xadc>
 8015db6:	4593      	cmp	fp, r2
 8015db8:	d105      	bne.n	8015dc6 <_dtoa_r+0xafe>
 8015dba:	2331      	movs	r3, #49	; 0x31
 8015dbc:	f10a 0a01 	add.w	sl, sl, #1
 8015dc0:	f88b 3000 	strb.w	r3, [fp]
 8015dc4:	e6ff      	b.n	8015bc6 <_dtoa_r+0x8fe>
 8015dc6:	4615      	mov	r5, r2
 8015dc8:	e79f      	b.n	8015d0a <_dtoa_r+0xa42>
 8015dca:	f8df b064 	ldr.w	fp, [pc, #100]	; 8015e30 <_dtoa_r+0xb68>
 8015dce:	e007      	b.n	8015de0 <_dtoa_r+0xb18>
 8015dd0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015dd2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8015e34 <_dtoa_r+0xb6c>
 8015dd6:	b11b      	cbz	r3, 8015de0 <_dtoa_r+0xb18>
 8015dd8:	f10b 0308 	add.w	r3, fp, #8
 8015ddc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015dde:	6013      	str	r3, [r2, #0]
 8015de0:	4658      	mov	r0, fp
 8015de2:	b017      	add	sp, #92	; 0x5c
 8015de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015de8:	9b06      	ldr	r3, [sp, #24]
 8015dea:	2b01      	cmp	r3, #1
 8015dec:	f77f ae35 	ble.w	8015a5a <_dtoa_r+0x792>
 8015df0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015df2:	9307      	str	r3, [sp, #28]
 8015df4:	e649      	b.n	8015a8a <_dtoa_r+0x7c2>
 8015df6:	9b02      	ldr	r3, [sp, #8]
 8015df8:	2b00      	cmp	r3, #0
 8015dfa:	dc03      	bgt.n	8015e04 <_dtoa_r+0xb3c>
 8015dfc:	9b06      	ldr	r3, [sp, #24]
 8015dfe:	2b02      	cmp	r3, #2
 8015e00:	f73f aecc 	bgt.w	8015b9c <_dtoa_r+0x8d4>
 8015e04:	465d      	mov	r5, fp
 8015e06:	4639      	mov	r1, r7
 8015e08:	9804      	ldr	r0, [sp, #16]
 8015e0a:	f7ff f9cf 	bl	80151ac <quorem>
 8015e0e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8015e12:	f805 8b01 	strb.w	r8, [r5], #1
 8015e16:	9a02      	ldr	r2, [sp, #8]
 8015e18:	eba5 030b 	sub.w	r3, r5, fp
 8015e1c:	429a      	cmp	r2, r3
 8015e1e:	ddb0      	ble.n	8015d82 <_dtoa_r+0xaba>
 8015e20:	2300      	movs	r3, #0
 8015e22:	220a      	movs	r2, #10
 8015e24:	9904      	ldr	r1, [sp, #16]
 8015e26:	4620      	mov	r0, r4
 8015e28:	f000 fbad 	bl	8016586 <__multadd>
 8015e2c:	9004      	str	r0, [sp, #16]
 8015e2e:	e7ea      	b.n	8015e06 <_dtoa_r+0xb3e>
 8015e30:	080198bb 	.word	0x080198bb
 8015e34:	08019780 	.word	0x08019780

08015e38 <rshift>:
 8015e38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015e3a:	6906      	ldr	r6, [r0, #16]
 8015e3c:	114b      	asrs	r3, r1, #5
 8015e3e:	429e      	cmp	r6, r3
 8015e40:	f100 0414 	add.w	r4, r0, #20
 8015e44:	dd30      	ble.n	8015ea8 <rshift+0x70>
 8015e46:	f011 011f 	ands.w	r1, r1, #31
 8015e4a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8015e4e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8015e52:	d108      	bne.n	8015e66 <rshift+0x2e>
 8015e54:	4621      	mov	r1, r4
 8015e56:	42b2      	cmp	r2, r6
 8015e58:	460b      	mov	r3, r1
 8015e5a:	d211      	bcs.n	8015e80 <rshift+0x48>
 8015e5c:	f852 3b04 	ldr.w	r3, [r2], #4
 8015e60:	f841 3b04 	str.w	r3, [r1], #4
 8015e64:	e7f7      	b.n	8015e56 <rshift+0x1e>
 8015e66:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8015e6a:	f1c1 0c20 	rsb	ip, r1, #32
 8015e6e:	40cd      	lsrs	r5, r1
 8015e70:	3204      	adds	r2, #4
 8015e72:	4623      	mov	r3, r4
 8015e74:	42b2      	cmp	r2, r6
 8015e76:	4617      	mov	r7, r2
 8015e78:	d30c      	bcc.n	8015e94 <rshift+0x5c>
 8015e7a:	601d      	str	r5, [r3, #0]
 8015e7c:	b105      	cbz	r5, 8015e80 <rshift+0x48>
 8015e7e:	3304      	adds	r3, #4
 8015e80:	1b1a      	subs	r2, r3, r4
 8015e82:	42a3      	cmp	r3, r4
 8015e84:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8015e88:	bf08      	it	eq
 8015e8a:	2300      	moveq	r3, #0
 8015e8c:	6102      	str	r2, [r0, #16]
 8015e8e:	bf08      	it	eq
 8015e90:	6143      	streq	r3, [r0, #20]
 8015e92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015e94:	683f      	ldr	r7, [r7, #0]
 8015e96:	fa07 f70c 	lsl.w	r7, r7, ip
 8015e9a:	433d      	orrs	r5, r7
 8015e9c:	f843 5b04 	str.w	r5, [r3], #4
 8015ea0:	f852 5b04 	ldr.w	r5, [r2], #4
 8015ea4:	40cd      	lsrs	r5, r1
 8015ea6:	e7e5      	b.n	8015e74 <rshift+0x3c>
 8015ea8:	4623      	mov	r3, r4
 8015eaa:	e7e9      	b.n	8015e80 <rshift+0x48>

08015eac <__hexdig_fun>:
 8015eac:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8015eb0:	2b09      	cmp	r3, #9
 8015eb2:	d802      	bhi.n	8015eba <__hexdig_fun+0xe>
 8015eb4:	3820      	subs	r0, #32
 8015eb6:	b2c0      	uxtb	r0, r0
 8015eb8:	4770      	bx	lr
 8015eba:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8015ebe:	2b05      	cmp	r3, #5
 8015ec0:	d801      	bhi.n	8015ec6 <__hexdig_fun+0x1a>
 8015ec2:	3847      	subs	r0, #71	; 0x47
 8015ec4:	e7f7      	b.n	8015eb6 <__hexdig_fun+0xa>
 8015ec6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8015eca:	2b05      	cmp	r3, #5
 8015ecc:	d801      	bhi.n	8015ed2 <__hexdig_fun+0x26>
 8015ece:	3827      	subs	r0, #39	; 0x27
 8015ed0:	e7f1      	b.n	8015eb6 <__hexdig_fun+0xa>
 8015ed2:	2000      	movs	r0, #0
 8015ed4:	4770      	bx	lr

08015ed6 <__gethex>:
 8015ed6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015eda:	b08b      	sub	sp, #44	; 0x2c
 8015edc:	468a      	mov	sl, r1
 8015ede:	9002      	str	r0, [sp, #8]
 8015ee0:	9816      	ldr	r0, [sp, #88]	; 0x58
 8015ee2:	9306      	str	r3, [sp, #24]
 8015ee4:	4690      	mov	r8, r2
 8015ee6:	f000 fadf 	bl	80164a8 <__localeconv_l>
 8015eea:	6803      	ldr	r3, [r0, #0]
 8015eec:	9303      	str	r3, [sp, #12]
 8015eee:	4618      	mov	r0, r3
 8015ef0:	f7ea f978 	bl	80001e4 <strlen>
 8015ef4:	9b03      	ldr	r3, [sp, #12]
 8015ef6:	9001      	str	r0, [sp, #4]
 8015ef8:	4403      	add	r3, r0
 8015efa:	f04f 0b00 	mov.w	fp, #0
 8015efe:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8015f02:	9307      	str	r3, [sp, #28]
 8015f04:	f8da 3000 	ldr.w	r3, [sl]
 8015f08:	3302      	adds	r3, #2
 8015f0a:	461f      	mov	r7, r3
 8015f0c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8015f10:	2830      	cmp	r0, #48	; 0x30
 8015f12:	d06c      	beq.n	8015fee <__gethex+0x118>
 8015f14:	f7ff ffca 	bl	8015eac <__hexdig_fun>
 8015f18:	4604      	mov	r4, r0
 8015f1a:	2800      	cmp	r0, #0
 8015f1c:	d16a      	bne.n	8015ff4 <__gethex+0x11e>
 8015f1e:	9a01      	ldr	r2, [sp, #4]
 8015f20:	9903      	ldr	r1, [sp, #12]
 8015f22:	4638      	mov	r0, r7
 8015f24:	f001 fb78 	bl	8017618 <strncmp>
 8015f28:	2800      	cmp	r0, #0
 8015f2a:	d166      	bne.n	8015ffa <__gethex+0x124>
 8015f2c:	9b01      	ldr	r3, [sp, #4]
 8015f2e:	5cf8      	ldrb	r0, [r7, r3]
 8015f30:	18fe      	adds	r6, r7, r3
 8015f32:	f7ff ffbb 	bl	8015eac <__hexdig_fun>
 8015f36:	2800      	cmp	r0, #0
 8015f38:	d062      	beq.n	8016000 <__gethex+0x12a>
 8015f3a:	4633      	mov	r3, r6
 8015f3c:	7818      	ldrb	r0, [r3, #0]
 8015f3e:	2830      	cmp	r0, #48	; 0x30
 8015f40:	461f      	mov	r7, r3
 8015f42:	f103 0301 	add.w	r3, r3, #1
 8015f46:	d0f9      	beq.n	8015f3c <__gethex+0x66>
 8015f48:	f7ff ffb0 	bl	8015eac <__hexdig_fun>
 8015f4c:	fab0 f580 	clz	r5, r0
 8015f50:	096d      	lsrs	r5, r5, #5
 8015f52:	4634      	mov	r4, r6
 8015f54:	f04f 0b01 	mov.w	fp, #1
 8015f58:	463a      	mov	r2, r7
 8015f5a:	4616      	mov	r6, r2
 8015f5c:	3201      	adds	r2, #1
 8015f5e:	7830      	ldrb	r0, [r6, #0]
 8015f60:	f7ff ffa4 	bl	8015eac <__hexdig_fun>
 8015f64:	2800      	cmp	r0, #0
 8015f66:	d1f8      	bne.n	8015f5a <__gethex+0x84>
 8015f68:	9a01      	ldr	r2, [sp, #4]
 8015f6a:	9903      	ldr	r1, [sp, #12]
 8015f6c:	4630      	mov	r0, r6
 8015f6e:	f001 fb53 	bl	8017618 <strncmp>
 8015f72:	b950      	cbnz	r0, 8015f8a <__gethex+0xb4>
 8015f74:	b954      	cbnz	r4, 8015f8c <__gethex+0xb6>
 8015f76:	9b01      	ldr	r3, [sp, #4]
 8015f78:	18f4      	adds	r4, r6, r3
 8015f7a:	4622      	mov	r2, r4
 8015f7c:	4616      	mov	r6, r2
 8015f7e:	3201      	adds	r2, #1
 8015f80:	7830      	ldrb	r0, [r6, #0]
 8015f82:	f7ff ff93 	bl	8015eac <__hexdig_fun>
 8015f86:	2800      	cmp	r0, #0
 8015f88:	d1f8      	bne.n	8015f7c <__gethex+0xa6>
 8015f8a:	b10c      	cbz	r4, 8015f90 <__gethex+0xba>
 8015f8c:	1ba4      	subs	r4, r4, r6
 8015f8e:	00a4      	lsls	r4, r4, #2
 8015f90:	7833      	ldrb	r3, [r6, #0]
 8015f92:	2b50      	cmp	r3, #80	; 0x50
 8015f94:	d001      	beq.n	8015f9a <__gethex+0xc4>
 8015f96:	2b70      	cmp	r3, #112	; 0x70
 8015f98:	d140      	bne.n	801601c <__gethex+0x146>
 8015f9a:	7873      	ldrb	r3, [r6, #1]
 8015f9c:	2b2b      	cmp	r3, #43	; 0x2b
 8015f9e:	d031      	beq.n	8016004 <__gethex+0x12e>
 8015fa0:	2b2d      	cmp	r3, #45	; 0x2d
 8015fa2:	d033      	beq.n	801600c <__gethex+0x136>
 8015fa4:	1c71      	adds	r1, r6, #1
 8015fa6:	f04f 0900 	mov.w	r9, #0
 8015faa:	7808      	ldrb	r0, [r1, #0]
 8015fac:	f7ff ff7e 	bl	8015eac <__hexdig_fun>
 8015fb0:	1e43      	subs	r3, r0, #1
 8015fb2:	b2db      	uxtb	r3, r3
 8015fb4:	2b18      	cmp	r3, #24
 8015fb6:	d831      	bhi.n	801601c <__gethex+0x146>
 8015fb8:	f1a0 0210 	sub.w	r2, r0, #16
 8015fbc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015fc0:	f7ff ff74 	bl	8015eac <__hexdig_fun>
 8015fc4:	1e43      	subs	r3, r0, #1
 8015fc6:	b2db      	uxtb	r3, r3
 8015fc8:	2b18      	cmp	r3, #24
 8015fca:	d922      	bls.n	8016012 <__gethex+0x13c>
 8015fcc:	f1b9 0f00 	cmp.w	r9, #0
 8015fd0:	d000      	beq.n	8015fd4 <__gethex+0xfe>
 8015fd2:	4252      	negs	r2, r2
 8015fd4:	4414      	add	r4, r2
 8015fd6:	f8ca 1000 	str.w	r1, [sl]
 8015fda:	b30d      	cbz	r5, 8016020 <__gethex+0x14a>
 8015fdc:	f1bb 0f00 	cmp.w	fp, #0
 8015fe0:	bf0c      	ite	eq
 8015fe2:	2706      	moveq	r7, #6
 8015fe4:	2700      	movne	r7, #0
 8015fe6:	4638      	mov	r0, r7
 8015fe8:	b00b      	add	sp, #44	; 0x2c
 8015fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015fee:	f10b 0b01 	add.w	fp, fp, #1
 8015ff2:	e78a      	b.n	8015f0a <__gethex+0x34>
 8015ff4:	2500      	movs	r5, #0
 8015ff6:	462c      	mov	r4, r5
 8015ff8:	e7ae      	b.n	8015f58 <__gethex+0x82>
 8015ffa:	463e      	mov	r6, r7
 8015ffc:	2501      	movs	r5, #1
 8015ffe:	e7c7      	b.n	8015f90 <__gethex+0xba>
 8016000:	4604      	mov	r4, r0
 8016002:	e7fb      	b.n	8015ffc <__gethex+0x126>
 8016004:	f04f 0900 	mov.w	r9, #0
 8016008:	1cb1      	adds	r1, r6, #2
 801600a:	e7ce      	b.n	8015faa <__gethex+0xd4>
 801600c:	f04f 0901 	mov.w	r9, #1
 8016010:	e7fa      	b.n	8016008 <__gethex+0x132>
 8016012:	230a      	movs	r3, #10
 8016014:	fb03 0202 	mla	r2, r3, r2, r0
 8016018:	3a10      	subs	r2, #16
 801601a:	e7cf      	b.n	8015fbc <__gethex+0xe6>
 801601c:	4631      	mov	r1, r6
 801601e:	e7da      	b.n	8015fd6 <__gethex+0x100>
 8016020:	1bf3      	subs	r3, r6, r7
 8016022:	3b01      	subs	r3, #1
 8016024:	4629      	mov	r1, r5
 8016026:	2b07      	cmp	r3, #7
 8016028:	dc49      	bgt.n	80160be <__gethex+0x1e8>
 801602a:	9802      	ldr	r0, [sp, #8]
 801602c:	f000 fa60 	bl	80164f0 <_Balloc>
 8016030:	9b01      	ldr	r3, [sp, #4]
 8016032:	f100 0914 	add.w	r9, r0, #20
 8016036:	f04f 0b00 	mov.w	fp, #0
 801603a:	f1c3 0301 	rsb	r3, r3, #1
 801603e:	4605      	mov	r5, r0
 8016040:	f8cd 9010 	str.w	r9, [sp, #16]
 8016044:	46da      	mov	sl, fp
 8016046:	9308      	str	r3, [sp, #32]
 8016048:	42b7      	cmp	r7, r6
 801604a:	d33b      	bcc.n	80160c4 <__gethex+0x1ee>
 801604c:	9804      	ldr	r0, [sp, #16]
 801604e:	f840 ab04 	str.w	sl, [r0], #4
 8016052:	eba0 0009 	sub.w	r0, r0, r9
 8016056:	1080      	asrs	r0, r0, #2
 8016058:	6128      	str	r0, [r5, #16]
 801605a:	0147      	lsls	r7, r0, #5
 801605c:	4650      	mov	r0, sl
 801605e:	f000 fb0b 	bl	8016678 <__hi0bits>
 8016062:	f8d8 6000 	ldr.w	r6, [r8]
 8016066:	1a3f      	subs	r7, r7, r0
 8016068:	42b7      	cmp	r7, r6
 801606a:	dd64      	ble.n	8016136 <__gethex+0x260>
 801606c:	1bbf      	subs	r7, r7, r6
 801606e:	4639      	mov	r1, r7
 8016070:	4628      	mov	r0, r5
 8016072:	f000 fe1b 	bl	8016cac <__any_on>
 8016076:	4682      	mov	sl, r0
 8016078:	b178      	cbz	r0, 801609a <__gethex+0x1c4>
 801607a:	1e7b      	subs	r3, r7, #1
 801607c:	1159      	asrs	r1, r3, #5
 801607e:	f003 021f 	and.w	r2, r3, #31
 8016082:	f04f 0a01 	mov.w	sl, #1
 8016086:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801608a:	fa0a f202 	lsl.w	r2, sl, r2
 801608e:	420a      	tst	r2, r1
 8016090:	d003      	beq.n	801609a <__gethex+0x1c4>
 8016092:	4553      	cmp	r3, sl
 8016094:	dc46      	bgt.n	8016124 <__gethex+0x24e>
 8016096:	f04f 0a02 	mov.w	sl, #2
 801609a:	4639      	mov	r1, r7
 801609c:	4628      	mov	r0, r5
 801609e:	f7ff fecb 	bl	8015e38 <rshift>
 80160a2:	443c      	add	r4, r7
 80160a4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80160a8:	42a3      	cmp	r3, r4
 80160aa:	da52      	bge.n	8016152 <__gethex+0x27c>
 80160ac:	4629      	mov	r1, r5
 80160ae:	9802      	ldr	r0, [sp, #8]
 80160b0:	f000 fa52 	bl	8016558 <_Bfree>
 80160b4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80160b6:	2300      	movs	r3, #0
 80160b8:	6013      	str	r3, [r2, #0]
 80160ba:	27a3      	movs	r7, #163	; 0xa3
 80160bc:	e793      	b.n	8015fe6 <__gethex+0x110>
 80160be:	3101      	adds	r1, #1
 80160c0:	105b      	asrs	r3, r3, #1
 80160c2:	e7b0      	b.n	8016026 <__gethex+0x150>
 80160c4:	1e73      	subs	r3, r6, #1
 80160c6:	9305      	str	r3, [sp, #20]
 80160c8:	9a07      	ldr	r2, [sp, #28]
 80160ca:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80160ce:	4293      	cmp	r3, r2
 80160d0:	d018      	beq.n	8016104 <__gethex+0x22e>
 80160d2:	f1bb 0f20 	cmp.w	fp, #32
 80160d6:	d107      	bne.n	80160e8 <__gethex+0x212>
 80160d8:	9b04      	ldr	r3, [sp, #16]
 80160da:	f8c3 a000 	str.w	sl, [r3]
 80160de:	3304      	adds	r3, #4
 80160e0:	f04f 0a00 	mov.w	sl, #0
 80160e4:	9304      	str	r3, [sp, #16]
 80160e6:	46d3      	mov	fp, sl
 80160e8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80160ec:	f7ff fede 	bl	8015eac <__hexdig_fun>
 80160f0:	f000 000f 	and.w	r0, r0, #15
 80160f4:	fa00 f00b 	lsl.w	r0, r0, fp
 80160f8:	ea4a 0a00 	orr.w	sl, sl, r0
 80160fc:	f10b 0b04 	add.w	fp, fp, #4
 8016100:	9b05      	ldr	r3, [sp, #20]
 8016102:	e00d      	b.n	8016120 <__gethex+0x24a>
 8016104:	9b05      	ldr	r3, [sp, #20]
 8016106:	9a08      	ldr	r2, [sp, #32]
 8016108:	4413      	add	r3, r2
 801610a:	42bb      	cmp	r3, r7
 801610c:	d3e1      	bcc.n	80160d2 <__gethex+0x1fc>
 801610e:	4618      	mov	r0, r3
 8016110:	9a01      	ldr	r2, [sp, #4]
 8016112:	9903      	ldr	r1, [sp, #12]
 8016114:	9309      	str	r3, [sp, #36]	; 0x24
 8016116:	f001 fa7f 	bl	8017618 <strncmp>
 801611a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801611c:	2800      	cmp	r0, #0
 801611e:	d1d8      	bne.n	80160d2 <__gethex+0x1fc>
 8016120:	461e      	mov	r6, r3
 8016122:	e791      	b.n	8016048 <__gethex+0x172>
 8016124:	1eb9      	subs	r1, r7, #2
 8016126:	4628      	mov	r0, r5
 8016128:	f000 fdc0 	bl	8016cac <__any_on>
 801612c:	2800      	cmp	r0, #0
 801612e:	d0b2      	beq.n	8016096 <__gethex+0x1c0>
 8016130:	f04f 0a03 	mov.w	sl, #3
 8016134:	e7b1      	b.n	801609a <__gethex+0x1c4>
 8016136:	da09      	bge.n	801614c <__gethex+0x276>
 8016138:	1bf7      	subs	r7, r6, r7
 801613a:	4629      	mov	r1, r5
 801613c:	463a      	mov	r2, r7
 801613e:	9802      	ldr	r0, [sp, #8]
 8016140:	f000 fbd6 	bl	80168f0 <__lshift>
 8016144:	1be4      	subs	r4, r4, r7
 8016146:	4605      	mov	r5, r0
 8016148:	f100 0914 	add.w	r9, r0, #20
 801614c:	f04f 0a00 	mov.w	sl, #0
 8016150:	e7a8      	b.n	80160a4 <__gethex+0x1ce>
 8016152:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8016156:	42a0      	cmp	r0, r4
 8016158:	dd6a      	ble.n	8016230 <__gethex+0x35a>
 801615a:	1b04      	subs	r4, r0, r4
 801615c:	42a6      	cmp	r6, r4
 801615e:	dc2e      	bgt.n	80161be <__gethex+0x2e8>
 8016160:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016164:	2b02      	cmp	r3, #2
 8016166:	d022      	beq.n	80161ae <__gethex+0x2d8>
 8016168:	2b03      	cmp	r3, #3
 801616a:	d024      	beq.n	80161b6 <__gethex+0x2e0>
 801616c:	2b01      	cmp	r3, #1
 801616e:	d115      	bne.n	801619c <__gethex+0x2c6>
 8016170:	42a6      	cmp	r6, r4
 8016172:	d113      	bne.n	801619c <__gethex+0x2c6>
 8016174:	2e01      	cmp	r6, #1
 8016176:	dc0b      	bgt.n	8016190 <__gethex+0x2ba>
 8016178:	9a06      	ldr	r2, [sp, #24]
 801617a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801617e:	6013      	str	r3, [r2, #0]
 8016180:	2301      	movs	r3, #1
 8016182:	612b      	str	r3, [r5, #16]
 8016184:	f8c9 3000 	str.w	r3, [r9]
 8016188:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801618a:	2762      	movs	r7, #98	; 0x62
 801618c:	601d      	str	r5, [r3, #0]
 801618e:	e72a      	b.n	8015fe6 <__gethex+0x110>
 8016190:	1e71      	subs	r1, r6, #1
 8016192:	4628      	mov	r0, r5
 8016194:	f000 fd8a 	bl	8016cac <__any_on>
 8016198:	2800      	cmp	r0, #0
 801619a:	d1ed      	bne.n	8016178 <__gethex+0x2a2>
 801619c:	4629      	mov	r1, r5
 801619e:	9802      	ldr	r0, [sp, #8]
 80161a0:	f000 f9da 	bl	8016558 <_Bfree>
 80161a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80161a6:	2300      	movs	r3, #0
 80161a8:	6013      	str	r3, [r2, #0]
 80161aa:	2750      	movs	r7, #80	; 0x50
 80161ac:	e71b      	b.n	8015fe6 <__gethex+0x110>
 80161ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80161b0:	2b00      	cmp	r3, #0
 80161b2:	d0e1      	beq.n	8016178 <__gethex+0x2a2>
 80161b4:	e7f2      	b.n	801619c <__gethex+0x2c6>
 80161b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80161b8:	2b00      	cmp	r3, #0
 80161ba:	d1dd      	bne.n	8016178 <__gethex+0x2a2>
 80161bc:	e7ee      	b.n	801619c <__gethex+0x2c6>
 80161be:	1e67      	subs	r7, r4, #1
 80161c0:	f1ba 0f00 	cmp.w	sl, #0
 80161c4:	d131      	bne.n	801622a <__gethex+0x354>
 80161c6:	b127      	cbz	r7, 80161d2 <__gethex+0x2fc>
 80161c8:	4639      	mov	r1, r7
 80161ca:	4628      	mov	r0, r5
 80161cc:	f000 fd6e 	bl	8016cac <__any_on>
 80161d0:	4682      	mov	sl, r0
 80161d2:	117a      	asrs	r2, r7, #5
 80161d4:	2301      	movs	r3, #1
 80161d6:	f007 071f 	and.w	r7, r7, #31
 80161da:	fa03 f707 	lsl.w	r7, r3, r7
 80161de:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80161e2:	4621      	mov	r1, r4
 80161e4:	421f      	tst	r7, r3
 80161e6:	4628      	mov	r0, r5
 80161e8:	bf18      	it	ne
 80161ea:	f04a 0a02 	orrne.w	sl, sl, #2
 80161ee:	1b36      	subs	r6, r6, r4
 80161f0:	f7ff fe22 	bl	8015e38 <rshift>
 80161f4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80161f8:	2702      	movs	r7, #2
 80161fa:	f1ba 0f00 	cmp.w	sl, #0
 80161fe:	d048      	beq.n	8016292 <__gethex+0x3bc>
 8016200:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016204:	2b02      	cmp	r3, #2
 8016206:	d015      	beq.n	8016234 <__gethex+0x35e>
 8016208:	2b03      	cmp	r3, #3
 801620a:	d017      	beq.n	801623c <__gethex+0x366>
 801620c:	2b01      	cmp	r3, #1
 801620e:	d109      	bne.n	8016224 <__gethex+0x34e>
 8016210:	f01a 0f02 	tst.w	sl, #2
 8016214:	d006      	beq.n	8016224 <__gethex+0x34e>
 8016216:	f8d9 3000 	ldr.w	r3, [r9]
 801621a:	ea4a 0a03 	orr.w	sl, sl, r3
 801621e:	f01a 0f01 	tst.w	sl, #1
 8016222:	d10e      	bne.n	8016242 <__gethex+0x36c>
 8016224:	f047 0710 	orr.w	r7, r7, #16
 8016228:	e033      	b.n	8016292 <__gethex+0x3bc>
 801622a:	f04f 0a01 	mov.w	sl, #1
 801622e:	e7d0      	b.n	80161d2 <__gethex+0x2fc>
 8016230:	2701      	movs	r7, #1
 8016232:	e7e2      	b.n	80161fa <__gethex+0x324>
 8016234:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016236:	f1c3 0301 	rsb	r3, r3, #1
 801623a:	9315      	str	r3, [sp, #84]	; 0x54
 801623c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801623e:	2b00      	cmp	r3, #0
 8016240:	d0f0      	beq.n	8016224 <__gethex+0x34e>
 8016242:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8016246:	f105 0314 	add.w	r3, r5, #20
 801624a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 801624e:	eb03 010a 	add.w	r1, r3, sl
 8016252:	f04f 0c00 	mov.w	ip, #0
 8016256:	4618      	mov	r0, r3
 8016258:	f853 2b04 	ldr.w	r2, [r3], #4
 801625c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8016260:	d01c      	beq.n	801629c <__gethex+0x3c6>
 8016262:	3201      	adds	r2, #1
 8016264:	6002      	str	r2, [r0, #0]
 8016266:	2f02      	cmp	r7, #2
 8016268:	f105 0314 	add.w	r3, r5, #20
 801626c:	d138      	bne.n	80162e0 <__gethex+0x40a>
 801626e:	f8d8 2000 	ldr.w	r2, [r8]
 8016272:	3a01      	subs	r2, #1
 8016274:	42b2      	cmp	r2, r6
 8016276:	d10a      	bne.n	801628e <__gethex+0x3b8>
 8016278:	1171      	asrs	r1, r6, #5
 801627a:	2201      	movs	r2, #1
 801627c:	f006 061f 	and.w	r6, r6, #31
 8016280:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016284:	fa02 f606 	lsl.w	r6, r2, r6
 8016288:	421e      	tst	r6, r3
 801628a:	bf18      	it	ne
 801628c:	4617      	movne	r7, r2
 801628e:	f047 0720 	orr.w	r7, r7, #32
 8016292:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016294:	601d      	str	r5, [r3, #0]
 8016296:	9b06      	ldr	r3, [sp, #24]
 8016298:	601c      	str	r4, [r3, #0]
 801629a:	e6a4      	b.n	8015fe6 <__gethex+0x110>
 801629c:	4299      	cmp	r1, r3
 801629e:	f843 cc04 	str.w	ip, [r3, #-4]
 80162a2:	d8d8      	bhi.n	8016256 <__gethex+0x380>
 80162a4:	68ab      	ldr	r3, [r5, #8]
 80162a6:	4599      	cmp	r9, r3
 80162a8:	db12      	blt.n	80162d0 <__gethex+0x3fa>
 80162aa:	6869      	ldr	r1, [r5, #4]
 80162ac:	9802      	ldr	r0, [sp, #8]
 80162ae:	3101      	adds	r1, #1
 80162b0:	f000 f91e 	bl	80164f0 <_Balloc>
 80162b4:	692a      	ldr	r2, [r5, #16]
 80162b6:	3202      	adds	r2, #2
 80162b8:	f105 010c 	add.w	r1, r5, #12
 80162bc:	4683      	mov	fp, r0
 80162be:	0092      	lsls	r2, r2, #2
 80162c0:	300c      	adds	r0, #12
 80162c2:	f7fd f90d 	bl	80134e0 <memcpy>
 80162c6:	4629      	mov	r1, r5
 80162c8:	9802      	ldr	r0, [sp, #8]
 80162ca:	f000 f945 	bl	8016558 <_Bfree>
 80162ce:	465d      	mov	r5, fp
 80162d0:	692b      	ldr	r3, [r5, #16]
 80162d2:	1c5a      	adds	r2, r3, #1
 80162d4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80162d8:	612a      	str	r2, [r5, #16]
 80162da:	2201      	movs	r2, #1
 80162dc:	615a      	str	r2, [r3, #20]
 80162de:	e7c2      	b.n	8016266 <__gethex+0x390>
 80162e0:	692a      	ldr	r2, [r5, #16]
 80162e2:	454a      	cmp	r2, r9
 80162e4:	dd0b      	ble.n	80162fe <__gethex+0x428>
 80162e6:	2101      	movs	r1, #1
 80162e8:	4628      	mov	r0, r5
 80162ea:	f7ff fda5 	bl	8015e38 <rshift>
 80162ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80162f2:	3401      	adds	r4, #1
 80162f4:	42a3      	cmp	r3, r4
 80162f6:	f6ff aed9 	blt.w	80160ac <__gethex+0x1d6>
 80162fa:	2701      	movs	r7, #1
 80162fc:	e7c7      	b.n	801628e <__gethex+0x3b8>
 80162fe:	f016 061f 	ands.w	r6, r6, #31
 8016302:	d0fa      	beq.n	80162fa <__gethex+0x424>
 8016304:	449a      	add	sl, r3
 8016306:	f1c6 0620 	rsb	r6, r6, #32
 801630a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801630e:	f000 f9b3 	bl	8016678 <__hi0bits>
 8016312:	42b0      	cmp	r0, r6
 8016314:	dbe7      	blt.n	80162e6 <__gethex+0x410>
 8016316:	e7f0      	b.n	80162fa <__gethex+0x424>

08016318 <L_shift>:
 8016318:	f1c2 0208 	rsb	r2, r2, #8
 801631c:	0092      	lsls	r2, r2, #2
 801631e:	b570      	push	{r4, r5, r6, lr}
 8016320:	f1c2 0620 	rsb	r6, r2, #32
 8016324:	6843      	ldr	r3, [r0, #4]
 8016326:	6804      	ldr	r4, [r0, #0]
 8016328:	fa03 f506 	lsl.w	r5, r3, r6
 801632c:	432c      	orrs	r4, r5
 801632e:	40d3      	lsrs	r3, r2
 8016330:	6004      	str	r4, [r0, #0]
 8016332:	f840 3f04 	str.w	r3, [r0, #4]!
 8016336:	4288      	cmp	r0, r1
 8016338:	d3f4      	bcc.n	8016324 <L_shift+0xc>
 801633a:	bd70      	pop	{r4, r5, r6, pc}

0801633c <__match>:
 801633c:	b530      	push	{r4, r5, lr}
 801633e:	6803      	ldr	r3, [r0, #0]
 8016340:	3301      	adds	r3, #1
 8016342:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016346:	b914      	cbnz	r4, 801634e <__match+0x12>
 8016348:	6003      	str	r3, [r0, #0]
 801634a:	2001      	movs	r0, #1
 801634c:	bd30      	pop	{r4, r5, pc}
 801634e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016352:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8016356:	2d19      	cmp	r5, #25
 8016358:	bf98      	it	ls
 801635a:	3220      	addls	r2, #32
 801635c:	42a2      	cmp	r2, r4
 801635e:	d0f0      	beq.n	8016342 <__match+0x6>
 8016360:	2000      	movs	r0, #0
 8016362:	e7f3      	b.n	801634c <__match+0x10>

08016364 <__hexnan>:
 8016364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016368:	680b      	ldr	r3, [r1, #0]
 801636a:	6801      	ldr	r1, [r0, #0]
 801636c:	115f      	asrs	r7, r3, #5
 801636e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8016372:	f013 031f 	ands.w	r3, r3, #31
 8016376:	b087      	sub	sp, #28
 8016378:	bf18      	it	ne
 801637a:	3704      	addne	r7, #4
 801637c:	2500      	movs	r5, #0
 801637e:	1f3e      	subs	r6, r7, #4
 8016380:	4682      	mov	sl, r0
 8016382:	4690      	mov	r8, r2
 8016384:	9301      	str	r3, [sp, #4]
 8016386:	f847 5c04 	str.w	r5, [r7, #-4]
 801638a:	46b1      	mov	r9, r6
 801638c:	4634      	mov	r4, r6
 801638e:	9502      	str	r5, [sp, #8]
 8016390:	46ab      	mov	fp, r5
 8016392:	784a      	ldrb	r2, [r1, #1]
 8016394:	1c4b      	adds	r3, r1, #1
 8016396:	9303      	str	r3, [sp, #12]
 8016398:	b342      	cbz	r2, 80163ec <__hexnan+0x88>
 801639a:	4610      	mov	r0, r2
 801639c:	9105      	str	r1, [sp, #20]
 801639e:	9204      	str	r2, [sp, #16]
 80163a0:	f7ff fd84 	bl	8015eac <__hexdig_fun>
 80163a4:	2800      	cmp	r0, #0
 80163a6:	d143      	bne.n	8016430 <__hexnan+0xcc>
 80163a8:	9a04      	ldr	r2, [sp, #16]
 80163aa:	9905      	ldr	r1, [sp, #20]
 80163ac:	2a20      	cmp	r2, #32
 80163ae:	d818      	bhi.n	80163e2 <__hexnan+0x7e>
 80163b0:	9b02      	ldr	r3, [sp, #8]
 80163b2:	459b      	cmp	fp, r3
 80163b4:	dd13      	ble.n	80163de <__hexnan+0x7a>
 80163b6:	454c      	cmp	r4, r9
 80163b8:	d206      	bcs.n	80163c8 <__hexnan+0x64>
 80163ba:	2d07      	cmp	r5, #7
 80163bc:	dc04      	bgt.n	80163c8 <__hexnan+0x64>
 80163be:	462a      	mov	r2, r5
 80163c0:	4649      	mov	r1, r9
 80163c2:	4620      	mov	r0, r4
 80163c4:	f7ff ffa8 	bl	8016318 <L_shift>
 80163c8:	4544      	cmp	r4, r8
 80163ca:	d944      	bls.n	8016456 <__hexnan+0xf2>
 80163cc:	2300      	movs	r3, #0
 80163ce:	f1a4 0904 	sub.w	r9, r4, #4
 80163d2:	f844 3c04 	str.w	r3, [r4, #-4]
 80163d6:	f8cd b008 	str.w	fp, [sp, #8]
 80163da:	464c      	mov	r4, r9
 80163dc:	461d      	mov	r5, r3
 80163de:	9903      	ldr	r1, [sp, #12]
 80163e0:	e7d7      	b.n	8016392 <__hexnan+0x2e>
 80163e2:	2a29      	cmp	r2, #41	; 0x29
 80163e4:	d14a      	bne.n	801647c <__hexnan+0x118>
 80163e6:	3102      	adds	r1, #2
 80163e8:	f8ca 1000 	str.w	r1, [sl]
 80163ec:	f1bb 0f00 	cmp.w	fp, #0
 80163f0:	d044      	beq.n	801647c <__hexnan+0x118>
 80163f2:	454c      	cmp	r4, r9
 80163f4:	d206      	bcs.n	8016404 <__hexnan+0xa0>
 80163f6:	2d07      	cmp	r5, #7
 80163f8:	dc04      	bgt.n	8016404 <__hexnan+0xa0>
 80163fa:	462a      	mov	r2, r5
 80163fc:	4649      	mov	r1, r9
 80163fe:	4620      	mov	r0, r4
 8016400:	f7ff ff8a 	bl	8016318 <L_shift>
 8016404:	4544      	cmp	r4, r8
 8016406:	d928      	bls.n	801645a <__hexnan+0xf6>
 8016408:	4643      	mov	r3, r8
 801640a:	f854 2b04 	ldr.w	r2, [r4], #4
 801640e:	f843 2b04 	str.w	r2, [r3], #4
 8016412:	42a6      	cmp	r6, r4
 8016414:	d2f9      	bcs.n	801640a <__hexnan+0xa6>
 8016416:	2200      	movs	r2, #0
 8016418:	f843 2b04 	str.w	r2, [r3], #4
 801641c:	429e      	cmp	r6, r3
 801641e:	d2fb      	bcs.n	8016418 <__hexnan+0xb4>
 8016420:	6833      	ldr	r3, [r6, #0]
 8016422:	b91b      	cbnz	r3, 801642c <__hexnan+0xc8>
 8016424:	4546      	cmp	r6, r8
 8016426:	d127      	bne.n	8016478 <__hexnan+0x114>
 8016428:	2301      	movs	r3, #1
 801642a:	6033      	str	r3, [r6, #0]
 801642c:	2005      	movs	r0, #5
 801642e:	e026      	b.n	801647e <__hexnan+0x11a>
 8016430:	3501      	adds	r5, #1
 8016432:	2d08      	cmp	r5, #8
 8016434:	f10b 0b01 	add.w	fp, fp, #1
 8016438:	dd06      	ble.n	8016448 <__hexnan+0xe4>
 801643a:	4544      	cmp	r4, r8
 801643c:	d9cf      	bls.n	80163de <__hexnan+0x7a>
 801643e:	2300      	movs	r3, #0
 8016440:	f844 3c04 	str.w	r3, [r4, #-4]
 8016444:	2501      	movs	r5, #1
 8016446:	3c04      	subs	r4, #4
 8016448:	6822      	ldr	r2, [r4, #0]
 801644a:	f000 000f 	and.w	r0, r0, #15
 801644e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8016452:	6020      	str	r0, [r4, #0]
 8016454:	e7c3      	b.n	80163de <__hexnan+0x7a>
 8016456:	2508      	movs	r5, #8
 8016458:	e7c1      	b.n	80163de <__hexnan+0x7a>
 801645a:	9b01      	ldr	r3, [sp, #4]
 801645c:	2b00      	cmp	r3, #0
 801645e:	d0df      	beq.n	8016420 <__hexnan+0xbc>
 8016460:	f04f 32ff 	mov.w	r2, #4294967295
 8016464:	f1c3 0320 	rsb	r3, r3, #32
 8016468:	fa22 f303 	lsr.w	r3, r2, r3
 801646c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8016470:	401a      	ands	r2, r3
 8016472:	f847 2c04 	str.w	r2, [r7, #-4]
 8016476:	e7d3      	b.n	8016420 <__hexnan+0xbc>
 8016478:	3e04      	subs	r6, #4
 801647a:	e7d1      	b.n	8016420 <__hexnan+0xbc>
 801647c:	2004      	movs	r0, #4
 801647e:	b007      	add	sp, #28
 8016480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016484 <__locale_ctype_ptr_l>:
 8016484:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8016488:	4770      	bx	lr
	...

0801648c <__locale_ctype_ptr>:
 801648c:	4b04      	ldr	r3, [pc, #16]	; (80164a0 <__locale_ctype_ptr+0x14>)
 801648e:	4a05      	ldr	r2, [pc, #20]	; (80164a4 <__locale_ctype_ptr+0x18>)
 8016490:	681b      	ldr	r3, [r3, #0]
 8016492:	6a1b      	ldr	r3, [r3, #32]
 8016494:	2b00      	cmp	r3, #0
 8016496:	bf08      	it	eq
 8016498:	4613      	moveq	r3, r2
 801649a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 801649e:	4770      	bx	lr
 80164a0:	20000e34 	.word	0x20000e34
 80164a4:	20000e98 	.word	0x20000e98

080164a8 <__localeconv_l>:
 80164a8:	30f0      	adds	r0, #240	; 0xf0
 80164aa:	4770      	bx	lr

080164ac <_localeconv_r>:
 80164ac:	4b04      	ldr	r3, [pc, #16]	; (80164c0 <_localeconv_r+0x14>)
 80164ae:	681b      	ldr	r3, [r3, #0]
 80164b0:	6a18      	ldr	r0, [r3, #32]
 80164b2:	4b04      	ldr	r3, [pc, #16]	; (80164c4 <_localeconv_r+0x18>)
 80164b4:	2800      	cmp	r0, #0
 80164b6:	bf08      	it	eq
 80164b8:	4618      	moveq	r0, r3
 80164ba:	30f0      	adds	r0, #240	; 0xf0
 80164bc:	4770      	bx	lr
 80164be:	bf00      	nop
 80164c0:	20000e34 	.word	0x20000e34
 80164c4:	20000e98 	.word	0x20000e98

080164c8 <__ascii_mbtowc>:
 80164c8:	b082      	sub	sp, #8
 80164ca:	b901      	cbnz	r1, 80164ce <__ascii_mbtowc+0x6>
 80164cc:	a901      	add	r1, sp, #4
 80164ce:	b142      	cbz	r2, 80164e2 <__ascii_mbtowc+0x1a>
 80164d0:	b14b      	cbz	r3, 80164e6 <__ascii_mbtowc+0x1e>
 80164d2:	7813      	ldrb	r3, [r2, #0]
 80164d4:	600b      	str	r3, [r1, #0]
 80164d6:	7812      	ldrb	r2, [r2, #0]
 80164d8:	1c10      	adds	r0, r2, #0
 80164da:	bf18      	it	ne
 80164dc:	2001      	movne	r0, #1
 80164de:	b002      	add	sp, #8
 80164e0:	4770      	bx	lr
 80164e2:	4610      	mov	r0, r2
 80164e4:	e7fb      	b.n	80164de <__ascii_mbtowc+0x16>
 80164e6:	f06f 0001 	mvn.w	r0, #1
 80164ea:	e7f8      	b.n	80164de <__ascii_mbtowc+0x16>

080164ec <__malloc_lock>:
 80164ec:	4770      	bx	lr

080164ee <__malloc_unlock>:
 80164ee:	4770      	bx	lr

080164f0 <_Balloc>:
 80164f0:	b570      	push	{r4, r5, r6, lr}
 80164f2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80164f4:	4604      	mov	r4, r0
 80164f6:	460e      	mov	r6, r1
 80164f8:	b93d      	cbnz	r5, 801650a <_Balloc+0x1a>
 80164fa:	2010      	movs	r0, #16
 80164fc:	f7fc ffe0 	bl	80134c0 <malloc>
 8016500:	6260      	str	r0, [r4, #36]	; 0x24
 8016502:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8016506:	6005      	str	r5, [r0, #0]
 8016508:	60c5      	str	r5, [r0, #12]
 801650a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801650c:	68eb      	ldr	r3, [r5, #12]
 801650e:	b183      	cbz	r3, 8016532 <_Balloc+0x42>
 8016510:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016512:	68db      	ldr	r3, [r3, #12]
 8016514:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8016518:	b9b8      	cbnz	r0, 801654a <_Balloc+0x5a>
 801651a:	2101      	movs	r1, #1
 801651c:	fa01 f506 	lsl.w	r5, r1, r6
 8016520:	1d6a      	adds	r2, r5, #5
 8016522:	0092      	lsls	r2, r2, #2
 8016524:	4620      	mov	r0, r4
 8016526:	f000 fbe2 	bl	8016cee <_calloc_r>
 801652a:	b160      	cbz	r0, 8016546 <_Balloc+0x56>
 801652c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8016530:	e00e      	b.n	8016550 <_Balloc+0x60>
 8016532:	2221      	movs	r2, #33	; 0x21
 8016534:	2104      	movs	r1, #4
 8016536:	4620      	mov	r0, r4
 8016538:	f000 fbd9 	bl	8016cee <_calloc_r>
 801653c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801653e:	60e8      	str	r0, [r5, #12]
 8016540:	68db      	ldr	r3, [r3, #12]
 8016542:	2b00      	cmp	r3, #0
 8016544:	d1e4      	bne.n	8016510 <_Balloc+0x20>
 8016546:	2000      	movs	r0, #0
 8016548:	bd70      	pop	{r4, r5, r6, pc}
 801654a:	6802      	ldr	r2, [r0, #0]
 801654c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8016550:	2300      	movs	r3, #0
 8016552:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016556:	e7f7      	b.n	8016548 <_Balloc+0x58>

08016558 <_Bfree>:
 8016558:	b570      	push	{r4, r5, r6, lr}
 801655a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801655c:	4606      	mov	r6, r0
 801655e:	460d      	mov	r5, r1
 8016560:	b93c      	cbnz	r4, 8016572 <_Bfree+0x1a>
 8016562:	2010      	movs	r0, #16
 8016564:	f7fc ffac 	bl	80134c0 <malloc>
 8016568:	6270      	str	r0, [r6, #36]	; 0x24
 801656a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801656e:	6004      	str	r4, [r0, #0]
 8016570:	60c4      	str	r4, [r0, #12]
 8016572:	b13d      	cbz	r5, 8016584 <_Bfree+0x2c>
 8016574:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8016576:	686a      	ldr	r2, [r5, #4]
 8016578:	68db      	ldr	r3, [r3, #12]
 801657a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801657e:	6029      	str	r1, [r5, #0]
 8016580:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8016584:	bd70      	pop	{r4, r5, r6, pc}

08016586 <__multadd>:
 8016586:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801658a:	690d      	ldr	r5, [r1, #16]
 801658c:	461f      	mov	r7, r3
 801658e:	4606      	mov	r6, r0
 8016590:	460c      	mov	r4, r1
 8016592:	f101 0c14 	add.w	ip, r1, #20
 8016596:	2300      	movs	r3, #0
 8016598:	f8dc 0000 	ldr.w	r0, [ip]
 801659c:	b281      	uxth	r1, r0
 801659e:	fb02 7101 	mla	r1, r2, r1, r7
 80165a2:	0c0f      	lsrs	r7, r1, #16
 80165a4:	0c00      	lsrs	r0, r0, #16
 80165a6:	fb02 7000 	mla	r0, r2, r0, r7
 80165aa:	b289      	uxth	r1, r1
 80165ac:	3301      	adds	r3, #1
 80165ae:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80165b2:	429d      	cmp	r5, r3
 80165b4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80165b8:	f84c 1b04 	str.w	r1, [ip], #4
 80165bc:	dcec      	bgt.n	8016598 <__multadd+0x12>
 80165be:	b1d7      	cbz	r7, 80165f6 <__multadd+0x70>
 80165c0:	68a3      	ldr	r3, [r4, #8]
 80165c2:	42ab      	cmp	r3, r5
 80165c4:	dc12      	bgt.n	80165ec <__multadd+0x66>
 80165c6:	6861      	ldr	r1, [r4, #4]
 80165c8:	4630      	mov	r0, r6
 80165ca:	3101      	adds	r1, #1
 80165cc:	f7ff ff90 	bl	80164f0 <_Balloc>
 80165d0:	6922      	ldr	r2, [r4, #16]
 80165d2:	3202      	adds	r2, #2
 80165d4:	f104 010c 	add.w	r1, r4, #12
 80165d8:	4680      	mov	r8, r0
 80165da:	0092      	lsls	r2, r2, #2
 80165dc:	300c      	adds	r0, #12
 80165de:	f7fc ff7f 	bl	80134e0 <memcpy>
 80165e2:	4621      	mov	r1, r4
 80165e4:	4630      	mov	r0, r6
 80165e6:	f7ff ffb7 	bl	8016558 <_Bfree>
 80165ea:	4644      	mov	r4, r8
 80165ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80165f0:	3501      	adds	r5, #1
 80165f2:	615f      	str	r7, [r3, #20]
 80165f4:	6125      	str	r5, [r4, #16]
 80165f6:	4620      	mov	r0, r4
 80165f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080165fc <__s2b>:
 80165fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016600:	460c      	mov	r4, r1
 8016602:	4615      	mov	r5, r2
 8016604:	461f      	mov	r7, r3
 8016606:	2209      	movs	r2, #9
 8016608:	3308      	adds	r3, #8
 801660a:	4606      	mov	r6, r0
 801660c:	fb93 f3f2 	sdiv	r3, r3, r2
 8016610:	2100      	movs	r1, #0
 8016612:	2201      	movs	r2, #1
 8016614:	429a      	cmp	r2, r3
 8016616:	db20      	blt.n	801665a <__s2b+0x5e>
 8016618:	4630      	mov	r0, r6
 801661a:	f7ff ff69 	bl	80164f0 <_Balloc>
 801661e:	9b08      	ldr	r3, [sp, #32]
 8016620:	6143      	str	r3, [r0, #20]
 8016622:	2d09      	cmp	r5, #9
 8016624:	f04f 0301 	mov.w	r3, #1
 8016628:	6103      	str	r3, [r0, #16]
 801662a:	dd19      	ble.n	8016660 <__s2b+0x64>
 801662c:	f104 0809 	add.w	r8, r4, #9
 8016630:	46c1      	mov	r9, r8
 8016632:	442c      	add	r4, r5
 8016634:	f819 3b01 	ldrb.w	r3, [r9], #1
 8016638:	4601      	mov	r1, r0
 801663a:	3b30      	subs	r3, #48	; 0x30
 801663c:	220a      	movs	r2, #10
 801663e:	4630      	mov	r0, r6
 8016640:	f7ff ffa1 	bl	8016586 <__multadd>
 8016644:	45a1      	cmp	r9, r4
 8016646:	d1f5      	bne.n	8016634 <__s2b+0x38>
 8016648:	eb08 0405 	add.w	r4, r8, r5
 801664c:	3c08      	subs	r4, #8
 801664e:	1b2d      	subs	r5, r5, r4
 8016650:	1963      	adds	r3, r4, r5
 8016652:	42bb      	cmp	r3, r7
 8016654:	db07      	blt.n	8016666 <__s2b+0x6a>
 8016656:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801665a:	0052      	lsls	r2, r2, #1
 801665c:	3101      	adds	r1, #1
 801665e:	e7d9      	b.n	8016614 <__s2b+0x18>
 8016660:	340a      	adds	r4, #10
 8016662:	2509      	movs	r5, #9
 8016664:	e7f3      	b.n	801664e <__s2b+0x52>
 8016666:	f814 3b01 	ldrb.w	r3, [r4], #1
 801666a:	4601      	mov	r1, r0
 801666c:	3b30      	subs	r3, #48	; 0x30
 801666e:	220a      	movs	r2, #10
 8016670:	4630      	mov	r0, r6
 8016672:	f7ff ff88 	bl	8016586 <__multadd>
 8016676:	e7eb      	b.n	8016650 <__s2b+0x54>

08016678 <__hi0bits>:
 8016678:	0c02      	lsrs	r2, r0, #16
 801667a:	0412      	lsls	r2, r2, #16
 801667c:	4603      	mov	r3, r0
 801667e:	b9b2      	cbnz	r2, 80166ae <__hi0bits+0x36>
 8016680:	0403      	lsls	r3, r0, #16
 8016682:	2010      	movs	r0, #16
 8016684:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8016688:	bf04      	itt	eq
 801668a:	021b      	lsleq	r3, r3, #8
 801668c:	3008      	addeq	r0, #8
 801668e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8016692:	bf04      	itt	eq
 8016694:	011b      	lsleq	r3, r3, #4
 8016696:	3004      	addeq	r0, #4
 8016698:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801669c:	bf04      	itt	eq
 801669e:	009b      	lsleq	r3, r3, #2
 80166a0:	3002      	addeq	r0, #2
 80166a2:	2b00      	cmp	r3, #0
 80166a4:	db06      	blt.n	80166b4 <__hi0bits+0x3c>
 80166a6:	005b      	lsls	r3, r3, #1
 80166a8:	d503      	bpl.n	80166b2 <__hi0bits+0x3a>
 80166aa:	3001      	adds	r0, #1
 80166ac:	4770      	bx	lr
 80166ae:	2000      	movs	r0, #0
 80166b0:	e7e8      	b.n	8016684 <__hi0bits+0xc>
 80166b2:	2020      	movs	r0, #32
 80166b4:	4770      	bx	lr

080166b6 <__lo0bits>:
 80166b6:	6803      	ldr	r3, [r0, #0]
 80166b8:	f013 0207 	ands.w	r2, r3, #7
 80166bc:	4601      	mov	r1, r0
 80166be:	d00b      	beq.n	80166d8 <__lo0bits+0x22>
 80166c0:	07da      	lsls	r2, r3, #31
 80166c2:	d423      	bmi.n	801670c <__lo0bits+0x56>
 80166c4:	0798      	lsls	r0, r3, #30
 80166c6:	bf49      	itett	mi
 80166c8:	085b      	lsrmi	r3, r3, #1
 80166ca:	089b      	lsrpl	r3, r3, #2
 80166cc:	2001      	movmi	r0, #1
 80166ce:	600b      	strmi	r3, [r1, #0]
 80166d0:	bf5c      	itt	pl
 80166d2:	600b      	strpl	r3, [r1, #0]
 80166d4:	2002      	movpl	r0, #2
 80166d6:	4770      	bx	lr
 80166d8:	b298      	uxth	r0, r3
 80166da:	b9a8      	cbnz	r0, 8016708 <__lo0bits+0x52>
 80166dc:	0c1b      	lsrs	r3, r3, #16
 80166de:	2010      	movs	r0, #16
 80166e0:	f013 0fff 	tst.w	r3, #255	; 0xff
 80166e4:	bf04      	itt	eq
 80166e6:	0a1b      	lsreq	r3, r3, #8
 80166e8:	3008      	addeq	r0, #8
 80166ea:	071a      	lsls	r2, r3, #28
 80166ec:	bf04      	itt	eq
 80166ee:	091b      	lsreq	r3, r3, #4
 80166f0:	3004      	addeq	r0, #4
 80166f2:	079a      	lsls	r2, r3, #30
 80166f4:	bf04      	itt	eq
 80166f6:	089b      	lsreq	r3, r3, #2
 80166f8:	3002      	addeq	r0, #2
 80166fa:	07da      	lsls	r2, r3, #31
 80166fc:	d402      	bmi.n	8016704 <__lo0bits+0x4e>
 80166fe:	085b      	lsrs	r3, r3, #1
 8016700:	d006      	beq.n	8016710 <__lo0bits+0x5a>
 8016702:	3001      	adds	r0, #1
 8016704:	600b      	str	r3, [r1, #0]
 8016706:	4770      	bx	lr
 8016708:	4610      	mov	r0, r2
 801670a:	e7e9      	b.n	80166e0 <__lo0bits+0x2a>
 801670c:	2000      	movs	r0, #0
 801670e:	4770      	bx	lr
 8016710:	2020      	movs	r0, #32
 8016712:	4770      	bx	lr

08016714 <__i2b>:
 8016714:	b510      	push	{r4, lr}
 8016716:	460c      	mov	r4, r1
 8016718:	2101      	movs	r1, #1
 801671a:	f7ff fee9 	bl	80164f0 <_Balloc>
 801671e:	2201      	movs	r2, #1
 8016720:	6144      	str	r4, [r0, #20]
 8016722:	6102      	str	r2, [r0, #16]
 8016724:	bd10      	pop	{r4, pc}

08016726 <__multiply>:
 8016726:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801672a:	4614      	mov	r4, r2
 801672c:	690a      	ldr	r2, [r1, #16]
 801672e:	6923      	ldr	r3, [r4, #16]
 8016730:	429a      	cmp	r2, r3
 8016732:	bfb8      	it	lt
 8016734:	460b      	movlt	r3, r1
 8016736:	4688      	mov	r8, r1
 8016738:	bfbc      	itt	lt
 801673a:	46a0      	movlt	r8, r4
 801673c:	461c      	movlt	r4, r3
 801673e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8016742:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8016746:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801674a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801674e:	eb07 0609 	add.w	r6, r7, r9
 8016752:	42b3      	cmp	r3, r6
 8016754:	bfb8      	it	lt
 8016756:	3101      	addlt	r1, #1
 8016758:	f7ff feca 	bl	80164f0 <_Balloc>
 801675c:	f100 0514 	add.w	r5, r0, #20
 8016760:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8016764:	462b      	mov	r3, r5
 8016766:	2200      	movs	r2, #0
 8016768:	4573      	cmp	r3, lr
 801676a:	d316      	bcc.n	801679a <__multiply+0x74>
 801676c:	f104 0214 	add.w	r2, r4, #20
 8016770:	f108 0114 	add.w	r1, r8, #20
 8016774:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8016778:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 801677c:	9300      	str	r3, [sp, #0]
 801677e:	9b00      	ldr	r3, [sp, #0]
 8016780:	9201      	str	r2, [sp, #4]
 8016782:	4293      	cmp	r3, r2
 8016784:	d80c      	bhi.n	80167a0 <__multiply+0x7a>
 8016786:	2e00      	cmp	r6, #0
 8016788:	dd03      	ble.n	8016792 <__multiply+0x6c>
 801678a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801678e:	2b00      	cmp	r3, #0
 8016790:	d05d      	beq.n	801684e <__multiply+0x128>
 8016792:	6106      	str	r6, [r0, #16]
 8016794:	b003      	add	sp, #12
 8016796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801679a:	f843 2b04 	str.w	r2, [r3], #4
 801679e:	e7e3      	b.n	8016768 <__multiply+0x42>
 80167a0:	f8b2 b000 	ldrh.w	fp, [r2]
 80167a4:	f1bb 0f00 	cmp.w	fp, #0
 80167a8:	d023      	beq.n	80167f2 <__multiply+0xcc>
 80167aa:	4689      	mov	r9, r1
 80167ac:	46ac      	mov	ip, r5
 80167ae:	f04f 0800 	mov.w	r8, #0
 80167b2:	f859 4b04 	ldr.w	r4, [r9], #4
 80167b6:	f8dc a000 	ldr.w	sl, [ip]
 80167ba:	b2a3      	uxth	r3, r4
 80167bc:	fa1f fa8a 	uxth.w	sl, sl
 80167c0:	fb0b a303 	mla	r3, fp, r3, sl
 80167c4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80167c8:	f8dc 4000 	ldr.w	r4, [ip]
 80167cc:	4443      	add	r3, r8
 80167ce:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80167d2:	fb0b 840a 	mla	r4, fp, sl, r8
 80167d6:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80167da:	46e2      	mov	sl, ip
 80167dc:	b29b      	uxth	r3, r3
 80167de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80167e2:	454f      	cmp	r7, r9
 80167e4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80167e8:	f84a 3b04 	str.w	r3, [sl], #4
 80167ec:	d82b      	bhi.n	8016846 <__multiply+0x120>
 80167ee:	f8cc 8004 	str.w	r8, [ip, #4]
 80167f2:	9b01      	ldr	r3, [sp, #4]
 80167f4:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80167f8:	3204      	adds	r2, #4
 80167fa:	f1ba 0f00 	cmp.w	sl, #0
 80167fe:	d020      	beq.n	8016842 <__multiply+0x11c>
 8016800:	682b      	ldr	r3, [r5, #0]
 8016802:	4689      	mov	r9, r1
 8016804:	46a8      	mov	r8, r5
 8016806:	f04f 0b00 	mov.w	fp, #0
 801680a:	f8b9 c000 	ldrh.w	ip, [r9]
 801680e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8016812:	fb0a 440c 	mla	r4, sl, ip, r4
 8016816:	445c      	add	r4, fp
 8016818:	46c4      	mov	ip, r8
 801681a:	b29b      	uxth	r3, r3
 801681c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8016820:	f84c 3b04 	str.w	r3, [ip], #4
 8016824:	f859 3b04 	ldr.w	r3, [r9], #4
 8016828:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 801682c:	0c1b      	lsrs	r3, r3, #16
 801682e:	fb0a b303 	mla	r3, sl, r3, fp
 8016832:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8016836:	454f      	cmp	r7, r9
 8016838:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 801683c:	d805      	bhi.n	801684a <__multiply+0x124>
 801683e:	f8c8 3004 	str.w	r3, [r8, #4]
 8016842:	3504      	adds	r5, #4
 8016844:	e79b      	b.n	801677e <__multiply+0x58>
 8016846:	46d4      	mov	ip, sl
 8016848:	e7b3      	b.n	80167b2 <__multiply+0x8c>
 801684a:	46e0      	mov	r8, ip
 801684c:	e7dd      	b.n	801680a <__multiply+0xe4>
 801684e:	3e01      	subs	r6, #1
 8016850:	e799      	b.n	8016786 <__multiply+0x60>
	...

08016854 <__pow5mult>:
 8016854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016858:	4615      	mov	r5, r2
 801685a:	f012 0203 	ands.w	r2, r2, #3
 801685e:	4606      	mov	r6, r0
 8016860:	460f      	mov	r7, r1
 8016862:	d007      	beq.n	8016874 <__pow5mult+0x20>
 8016864:	3a01      	subs	r2, #1
 8016866:	4c21      	ldr	r4, [pc, #132]	; (80168ec <__pow5mult+0x98>)
 8016868:	2300      	movs	r3, #0
 801686a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801686e:	f7ff fe8a 	bl	8016586 <__multadd>
 8016872:	4607      	mov	r7, r0
 8016874:	10ad      	asrs	r5, r5, #2
 8016876:	d035      	beq.n	80168e4 <__pow5mult+0x90>
 8016878:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801687a:	b93c      	cbnz	r4, 801688c <__pow5mult+0x38>
 801687c:	2010      	movs	r0, #16
 801687e:	f7fc fe1f 	bl	80134c0 <malloc>
 8016882:	6270      	str	r0, [r6, #36]	; 0x24
 8016884:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016888:	6004      	str	r4, [r0, #0]
 801688a:	60c4      	str	r4, [r0, #12]
 801688c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8016890:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016894:	b94c      	cbnz	r4, 80168aa <__pow5mult+0x56>
 8016896:	f240 2171 	movw	r1, #625	; 0x271
 801689a:	4630      	mov	r0, r6
 801689c:	f7ff ff3a 	bl	8016714 <__i2b>
 80168a0:	2300      	movs	r3, #0
 80168a2:	f8c8 0008 	str.w	r0, [r8, #8]
 80168a6:	4604      	mov	r4, r0
 80168a8:	6003      	str	r3, [r0, #0]
 80168aa:	f04f 0800 	mov.w	r8, #0
 80168ae:	07eb      	lsls	r3, r5, #31
 80168b0:	d50a      	bpl.n	80168c8 <__pow5mult+0x74>
 80168b2:	4639      	mov	r1, r7
 80168b4:	4622      	mov	r2, r4
 80168b6:	4630      	mov	r0, r6
 80168b8:	f7ff ff35 	bl	8016726 <__multiply>
 80168bc:	4639      	mov	r1, r7
 80168be:	4681      	mov	r9, r0
 80168c0:	4630      	mov	r0, r6
 80168c2:	f7ff fe49 	bl	8016558 <_Bfree>
 80168c6:	464f      	mov	r7, r9
 80168c8:	106d      	asrs	r5, r5, #1
 80168ca:	d00b      	beq.n	80168e4 <__pow5mult+0x90>
 80168cc:	6820      	ldr	r0, [r4, #0]
 80168ce:	b938      	cbnz	r0, 80168e0 <__pow5mult+0x8c>
 80168d0:	4622      	mov	r2, r4
 80168d2:	4621      	mov	r1, r4
 80168d4:	4630      	mov	r0, r6
 80168d6:	f7ff ff26 	bl	8016726 <__multiply>
 80168da:	6020      	str	r0, [r4, #0]
 80168dc:	f8c0 8000 	str.w	r8, [r0]
 80168e0:	4604      	mov	r4, r0
 80168e2:	e7e4      	b.n	80168ae <__pow5mult+0x5a>
 80168e4:	4638      	mov	r0, r7
 80168e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80168ea:	bf00      	nop
 80168ec:	08019888 	.word	0x08019888

080168f0 <__lshift>:
 80168f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80168f4:	460c      	mov	r4, r1
 80168f6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80168fa:	6923      	ldr	r3, [r4, #16]
 80168fc:	6849      	ldr	r1, [r1, #4]
 80168fe:	eb0a 0903 	add.w	r9, sl, r3
 8016902:	68a3      	ldr	r3, [r4, #8]
 8016904:	4607      	mov	r7, r0
 8016906:	4616      	mov	r6, r2
 8016908:	f109 0501 	add.w	r5, r9, #1
 801690c:	42ab      	cmp	r3, r5
 801690e:	db32      	blt.n	8016976 <__lshift+0x86>
 8016910:	4638      	mov	r0, r7
 8016912:	f7ff fded 	bl	80164f0 <_Balloc>
 8016916:	2300      	movs	r3, #0
 8016918:	4680      	mov	r8, r0
 801691a:	f100 0114 	add.w	r1, r0, #20
 801691e:	461a      	mov	r2, r3
 8016920:	4553      	cmp	r3, sl
 8016922:	db2b      	blt.n	801697c <__lshift+0x8c>
 8016924:	6920      	ldr	r0, [r4, #16]
 8016926:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801692a:	f104 0314 	add.w	r3, r4, #20
 801692e:	f016 021f 	ands.w	r2, r6, #31
 8016932:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016936:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801693a:	d025      	beq.n	8016988 <__lshift+0x98>
 801693c:	f1c2 0e20 	rsb	lr, r2, #32
 8016940:	2000      	movs	r0, #0
 8016942:	681e      	ldr	r6, [r3, #0]
 8016944:	468a      	mov	sl, r1
 8016946:	4096      	lsls	r6, r2
 8016948:	4330      	orrs	r0, r6
 801694a:	f84a 0b04 	str.w	r0, [sl], #4
 801694e:	f853 0b04 	ldr.w	r0, [r3], #4
 8016952:	459c      	cmp	ip, r3
 8016954:	fa20 f00e 	lsr.w	r0, r0, lr
 8016958:	d814      	bhi.n	8016984 <__lshift+0x94>
 801695a:	6048      	str	r0, [r1, #4]
 801695c:	b108      	cbz	r0, 8016962 <__lshift+0x72>
 801695e:	f109 0502 	add.w	r5, r9, #2
 8016962:	3d01      	subs	r5, #1
 8016964:	4638      	mov	r0, r7
 8016966:	f8c8 5010 	str.w	r5, [r8, #16]
 801696a:	4621      	mov	r1, r4
 801696c:	f7ff fdf4 	bl	8016558 <_Bfree>
 8016970:	4640      	mov	r0, r8
 8016972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016976:	3101      	adds	r1, #1
 8016978:	005b      	lsls	r3, r3, #1
 801697a:	e7c7      	b.n	801690c <__lshift+0x1c>
 801697c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8016980:	3301      	adds	r3, #1
 8016982:	e7cd      	b.n	8016920 <__lshift+0x30>
 8016984:	4651      	mov	r1, sl
 8016986:	e7dc      	b.n	8016942 <__lshift+0x52>
 8016988:	3904      	subs	r1, #4
 801698a:	f853 2b04 	ldr.w	r2, [r3], #4
 801698e:	f841 2f04 	str.w	r2, [r1, #4]!
 8016992:	459c      	cmp	ip, r3
 8016994:	d8f9      	bhi.n	801698a <__lshift+0x9a>
 8016996:	e7e4      	b.n	8016962 <__lshift+0x72>

08016998 <__mcmp>:
 8016998:	6903      	ldr	r3, [r0, #16]
 801699a:	690a      	ldr	r2, [r1, #16]
 801699c:	1a9b      	subs	r3, r3, r2
 801699e:	b530      	push	{r4, r5, lr}
 80169a0:	d10c      	bne.n	80169bc <__mcmp+0x24>
 80169a2:	0092      	lsls	r2, r2, #2
 80169a4:	3014      	adds	r0, #20
 80169a6:	3114      	adds	r1, #20
 80169a8:	1884      	adds	r4, r0, r2
 80169aa:	4411      	add	r1, r2
 80169ac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80169b0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80169b4:	4295      	cmp	r5, r2
 80169b6:	d003      	beq.n	80169c0 <__mcmp+0x28>
 80169b8:	d305      	bcc.n	80169c6 <__mcmp+0x2e>
 80169ba:	2301      	movs	r3, #1
 80169bc:	4618      	mov	r0, r3
 80169be:	bd30      	pop	{r4, r5, pc}
 80169c0:	42a0      	cmp	r0, r4
 80169c2:	d3f3      	bcc.n	80169ac <__mcmp+0x14>
 80169c4:	e7fa      	b.n	80169bc <__mcmp+0x24>
 80169c6:	f04f 33ff 	mov.w	r3, #4294967295
 80169ca:	e7f7      	b.n	80169bc <__mcmp+0x24>

080169cc <__mdiff>:
 80169cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80169d0:	460d      	mov	r5, r1
 80169d2:	4607      	mov	r7, r0
 80169d4:	4611      	mov	r1, r2
 80169d6:	4628      	mov	r0, r5
 80169d8:	4614      	mov	r4, r2
 80169da:	f7ff ffdd 	bl	8016998 <__mcmp>
 80169de:	1e06      	subs	r6, r0, #0
 80169e0:	d108      	bne.n	80169f4 <__mdiff+0x28>
 80169e2:	4631      	mov	r1, r6
 80169e4:	4638      	mov	r0, r7
 80169e6:	f7ff fd83 	bl	80164f0 <_Balloc>
 80169ea:	2301      	movs	r3, #1
 80169ec:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80169f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80169f4:	bfa4      	itt	ge
 80169f6:	4623      	movge	r3, r4
 80169f8:	462c      	movge	r4, r5
 80169fa:	4638      	mov	r0, r7
 80169fc:	6861      	ldr	r1, [r4, #4]
 80169fe:	bfa6      	itte	ge
 8016a00:	461d      	movge	r5, r3
 8016a02:	2600      	movge	r6, #0
 8016a04:	2601      	movlt	r6, #1
 8016a06:	f7ff fd73 	bl	80164f0 <_Balloc>
 8016a0a:	692b      	ldr	r3, [r5, #16]
 8016a0c:	60c6      	str	r6, [r0, #12]
 8016a0e:	6926      	ldr	r6, [r4, #16]
 8016a10:	f105 0914 	add.w	r9, r5, #20
 8016a14:	f104 0214 	add.w	r2, r4, #20
 8016a18:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8016a1c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8016a20:	f100 0514 	add.w	r5, r0, #20
 8016a24:	f04f 0e00 	mov.w	lr, #0
 8016a28:	f852 ab04 	ldr.w	sl, [r2], #4
 8016a2c:	f859 4b04 	ldr.w	r4, [r9], #4
 8016a30:	fa1e f18a 	uxtah	r1, lr, sl
 8016a34:	b2a3      	uxth	r3, r4
 8016a36:	1ac9      	subs	r1, r1, r3
 8016a38:	0c23      	lsrs	r3, r4, #16
 8016a3a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8016a3e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8016a42:	b289      	uxth	r1, r1
 8016a44:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8016a48:	45c8      	cmp	r8, r9
 8016a4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8016a4e:	4694      	mov	ip, r2
 8016a50:	f845 3b04 	str.w	r3, [r5], #4
 8016a54:	d8e8      	bhi.n	8016a28 <__mdiff+0x5c>
 8016a56:	45bc      	cmp	ip, r7
 8016a58:	d304      	bcc.n	8016a64 <__mdiff+0x98>
 8016a5a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8016a5e:	b183      	cbz	r3, 8016a82 <__mdiff+0xb6>
 8016a60:	6106      	str	r6, [r0, #16]
 8016a62:	e7c5      	b.n	80169f0 <__mdiff+0x24>
 8016a64:	f85c 1b04 	ldr.w	r1, [ip], #4
 8016a68:	fa1e f381 	uxtah	r3, lr, r1
 8016a6c:	141a      	asrs	r2, r3, #16
 8016a6e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8016a72:	b29b      	uxth	r3, r3
 8016a74:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016a78:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8016a7c:	f845 3b04 	str.w	r3, [r5], #4
 8016a80:	e7e9      	b.n	8016a56 <__mdiff+0x8a>
 8016a82:	3e01      	subs	r6, #1
 8016a84:	e7e9      	b.n	8016a5a <__mdiff+0x8e>
	...

08016a88 <__ulp>:
 8016a88:	4b12      	ldr	r3, [pc, #72]	; (8016ad4 <__ulp+0x4c>)
 8016a8a:	ee10 2a90 	vmov	r2, s1
 8016a8e:	401a      	ands	r2, r3
 8016a90:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8016a94:	2b00      	cmp	r3, #0
 8016a96:	dd04      	ble.n	8016aa2 <__ulp+0x1a>
 8016a98:	2000      	movs	r0, #0
 8016a9a:	4619      	mov	r1, r3
 8016a9c:	ec41 0b10 	vmov	d0, r0, r1
 8016aa0:	4770      	bx	lr
 8016aa2:	425b      	negs	r3, r3
 8016aa4:	151b      	asrs	r3, r3, #20
 8016aa6:	2b13      	cmp	r3, #19
 8016aa8:	f04f 0000 	mov.w	r0, #0
 8016aac:	f04f 0100 	mov.w	r1, #0
 8016ab0:	dc04      	bgt.n	8016abc <__ulp+0x34>
 8016ab2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8016ab6:	fa42 f103 	asr.w	r1, r2, r3
 8016aba:	e7ef      	b.n	8016a9c <__ulp+0x14>
 8016abc:	3b14      	subs	r3, #20
 8016abe:	2b1e      	cmp	r3, #30
 8016ac0:	f04f 0201 	mov.w	r2, #1
 8016ac4:	bfda      	itte	le
 8016ac6:	f1c3 031f 	rsble	r3, r3, #31
 8016aca:	fa02 f303 	lslle.w	r3, r2, r3
 8016ace:	4613      	movgt	r3, r2
 8016ad0:	4618      	mov	r0, r3
 8016ad2:	e7e3      	b.n	8016a9c <__ulp+0x14>
 8016ad4:	7ff00000 	.word	0x7ff00000

08016ad8 <__b2d>:
 8016ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016ada:	6905      	ldr	r5, [r0, #16]
 8016adc:	f100 0714 	add.w	r7, r0, #20
 8016ae0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8016ae4:	1f2e      	subs	r6, r5, #4
 8016ae6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8016aea:	4620      	mov	r0, r4
 8016aec:	f7ff fdc4 	bl	8016678 <__hi0bits>
 8016af0:	f1c0 0320 	rsb	r3, r0, #32
 8016af4:	280a      	cmp	r0, #10
 8016af6:	600b      	str	r3, [r1, #0]
 8016af8:	f8df c074 	ldr.w	ip, [pc, #116]	; 8016b70 <__b2d+0x98>
 8016afc:	dc14      	bgt.n	8016b28 <__b2d+0x50>
 8016afe:	f1c0 0e0b 	rsb	lr, r0, #11
 8016b02:	fa24 f10e 	lsr.w	r1, r4, lr
 8016b06:	42b7      	cmp	r7, r6
 8016b08:	ea41 030c 	orr.w	r3, r1, ip
 8016b0c:	bf34      	ite	cc
 8016b0e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8016b12:	2100      	movcs	r1, #0
 8016b14:	3015      	adds	r0, #21
 8016b16:	fa04 f000 	lsl.w	r0, r4, r0
 8016b1a:	fa21 f10e 	lsr.w	r1, r1, lr
 8016b1e:	ea40 0201 	orr.w	r2, r0, r1
 8016b22:	ec43 2b10 	vmov	d0, r2, r3
 8016b26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016b28:	42b7      	cmp	r7, r6
 8016b2a:	bf3a      	itte	cc
 8016b2c:	f1a5 0608 	subcc.w	r6, r5, #8
 8016b30:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8016b34:	2100      	movcs	r1, #0
 8016b36:	380b      	subs	r0, #11
 8016b38:	d015      	beq.n	8016b66 <__b2d+0x8e>
 8016b3a:	4084      	lsls	r4, r0
 8016b3c:	f1c0 0520 	rsb	r5, r0, #32
 8016b40:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8016b44:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8016b48:	42be      	cmp	r6, r7
 8016b4a:	fa21 fc05 	lsr.w	ip, r1, r5
 8016b4e:	ea44 030c 	orr.w	r3, r4, ip
 8016b52:	bf8c      	ite	hi
 8016b54:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8016b58:	2400      	movls	r4, #0
 8016b5a:	fa01 f000 	lsl.w	r0, r1, r0
 8016b5e:	40ec      	lsrs	r4, r5
 8016b60:	ea40 0204 	orr.w	r2, r0, r4
 8016b64:	e7dd      	b.n	8016b22 <__b2d+0x4a>
 8016b66:	ea44 030c 	orr.w	r3, r4, ip
 8016b6a:	460a      	mov	r2, r1
 8016b6c:	e7d9      	b.n	8016b22 <__b2d+0x4a>
 8016b6e:	bf00      	nop
 8016b70:	3ff00000 	.word	0x3ff00000

08016b74 <__d2b>:
 8016b74:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016b78:	460e      	mov	r6, r1
 8016b7a:	2101      	movs	r1, #1
 8016b7c:	ec59 8b10 	vmov	r8, r9, d0
 8016b80:	4615      	mov	r5, r2
 8016b82:	f7ff fcb5 	bl	80164f0 <_Balloc>
 8016b86:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8016b8a:	4607      	mov	r7, r0
 8016b8c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016b90:	bb34      	cbnz	r4, 8016be0 <__d2b+0x6c>
 8016b92:	9301      	str	r3, [sp, #4]
 8016b94:	f1b8 0300 	subs.w	r3, r8, #0
 8016b98:	d027      	beq.n	8016bea <__d2b+0x76>
 8016b9a:	a802      	add	r0, sp, #8
 8016b9c:	f840 3d08 	str.w	r3, [r0, #-8]!
 8016ba0:	f7ff fd89 	bl	80166b6 <__lo0bits>
 8016ba4:	9900      	ldr	r1, [sp, #0]
 8016ba6:	b1f0      	cbz	r0, 8016be6 <__d2b+0x72>
 8016ba8:	9a01      	ldr	r2, [sp, #4]
 8016baa:	f1c0 0320 	rsb	r3, r0, #32
 8016bae:	fa02 f303 	lsl.w	r3, r2, r3
 8016bb2:	430b      	orrs	r3, r1
 8016bb4:	40c2      	lsrs	r2, r0
 8016bb6:	617b      	str	r3, [r7, #20]
 8016bb8:	9201      	str	r2, [sp, #4]
 8016bba:	9b01      	ldr	r3, [sp, #4]
 8016bbc:	61bb      	str	r3, [r7, #24]
 8016bbe:	2b00      	cmp	r3, #0
 8016bc0:	bf14      	ite	ne
 8016bc2:	2102      	movne	r1, #2
 8016bc4:	2101      	moveq	r1, #1
 8016bc6:	6139      	str	r1, [r7, #16]
 8016bc8:	b1c4      	cbz	r4, 8016bfc <__d2b+0x88>
 8016bca:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8016bce:	4404      	add	r4, r0
 8016bd0:	6034      	str	r4, [r6, #0]
 8016bd2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8016bd6:	6028      	str	r0, [r5, #0]
 8016bd8:	4638      	mov	r0, r7
 8016bda:	b003      	add	sp, #12
 8016bdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016be0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016be4:	e7d5      	b.n	8016b92 <__d2b+0x1e>
 8016be6:	6179      	str	r1, [r7, #20]
 8016be8:	e7e7      	b.n	8016bba <__d2b+0x46>
 8016bea:	a801      	add	r0, sp, #4
 8016bec:	f7ff fd63 	bl	80166b6 <__lo0bits>
 8016bf0:	9b01      	ldr	r3, [sp, #4]
 8016bf2:	617b      	str	r3, [r7, #20]
 8016bf4:	2101      	movs	r1, #1
 8016bf6:	6139      	str	r1, [r7, #16]
 8016bf8:	3020      	adds	r0, #32
 8016bfa:	e7e5      	b.n	8016bc8 <__d2b+0x54>
 8016bfc:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8016c00:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016c04:	6030      	str	r0, [r6, #0]
 8016c06:	6918      	ldr	r0, [r3, #16]
 8016c08:	f7ff fd36 	bl	8016678 <__hi0bits>
 8016c0c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8016c10:	e7e1      	b.n	8016bd6 <__d2b+0x62>

08016c12 <__ratio>:
 8016c12:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c16:	4688      	mov	r8, r1
 8016c18:	4669      	mov	r1, sp
 8016c1a:	4681      	mov	r9, r0
 8016c1c:	f7ff ff5c 	bl	8016ad8 <__b2d>
 8016c20:	a901      	add	r1, sp, #4
 8016c22:	4640      	mov	r0, r8
 8016c24:	ec57 6b10 	vmov	r6, r7, d0
 8016c28:	f7ff ff56 	bl	8016ad8 <__b2d>
 8016c2c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016c30:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8016c34:	eba3 0c02 	sub.w	ip, r3, r2
 8016c38:	e9dd 3200 	ldrd	r3, r2, [sp]
 8016c3c:	1a9b      	subs	r3, r3, r2
 8016c3e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8016c42:	ec5b ab10 	vmov	sl, fp, d0
 8016c46:	2b00      	cmp	r3, #0
 8016c48:	bfce      	itee	gt
 8016c4a:	463a      	movgt	r2, r7
 8016c4c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8016c50:	465a      	movle	r2, fp
 8016c52:	4659      	mov	r1, fp
 8016c54:	463d      	mov	r5, r7
 8016c56:	bfd4      	ite	le
 8016c58:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8016c5c:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8016c60:	4630      	mov	r0, r6
 8016c62:	ee10 2a10 	vmov	r2, s0
 8016c66:	460b      	mov	r3, r1
 8016c68:	4629      	mov	r1, r5
 8016c6a:	f7e9 fdff 	bl	800086c <__aeabi_ddiv>
 8016c6e:	ec41 0b10 	vmov	d0, r0, r1
 8016c72:	b003      	add	sp, #12
 8016c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016c78 <__copybits>:
 8016c78:	3901      	subs	r1, #1
 8016c7a:	b510      	push	{r4, lr}
 8016c7c:	1149      	asrs	r1, r1, #5
 8016c7e:	6914      	ldr	r4, [r2, #16]
 8016c80:	3101      	adds	r1, #1
 8016c82:	f102 0314 	add.w	r3, r2, #20
 8016c86:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016c8a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016c8e:	42a3      	cmp	r3, r4
 8016c90:	4602      	mov	r2, r0
 8016c92:	d303      	bcc.n	8016c9c <__copybits+0x24>
 8016c94:	2300      	movs	r3, #0
 8016c96:	428a      	cmp	r2, r1
 8016c98:	d305      	bcc.n	8016ca6 <__copybits+0x2e>
 8016c9a:	bd10      	pop	{r4, pc}
 8016c9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8016ca0:	f840 2b04 	str.w	r2, [r0], #4
 8016ca4:	e7f3      	b.n	8016c8e <__copybits+0x16>
 8016ca6:	f842 3b04 	str.w	r3, [r2], #4
 8016caa:	e7f4      	b.n	8016c96 <__copybits+0x1e>

08016cac <__any_on>:
 8016cac:	f100 0214 	add.w	r2, r0, #20
 8016cb0:	6900      	ldr	r0, [r0, #16]
 8016cb2:	114b      	asrs	r3, r1, #5
 8016cb4:	4298      	cmp	r0, r3
 8016cb6:	b510      	push	{r4, lr}
 8016cb8:	db11      	blt.n	8016cde <__any_on+0x32>
 8016cba:	dd0a      	ble.n	8016cd2 <__any_on+0x26>
 8016cbc:	f011 011f 	ands.w	r1, r1, #31
 8016cc0:	d007      	beq.n	8016cd2 <__any_on+0x26>
 8016cc2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8016cc6:	fa24 f001 	lsr.w	r0, r4, r1
 8016cca:	fa00 f101 	lsl.w	r1, r0, r1
 8016cce:	428c      	cmp	r4, r1
 8016cd0:	d10b      	bne.n	8016cea <__any_on+0x3e>
 8016cd2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016cd6:	4293      	cmp	r3, r2
 8016cd8:	d803      	bhi.n	8016ce2 <__any_on+0x36>
 8016cda:	2000      	movs	r0, #0
 8016cdc:	bd10      	pop	{r4, pc}
 8016cde:	4603      	mov	r3, r0
 8016ce0:	e7f7      	b.n	8016cd2 <__any_on+0x26>
 8016ce2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016ce6:	2900      	cmp	r1, #0
 8016ce8:	d0f5      	beq.n	8016cd6 <__any_on+0x2a>
 8016cea:	2001      	movs	r0, #1
 8016cec:	e7f6      	b.n	8016cdc <__any_on+0x30>

08016cee <_calloc_r>:
 8016cee:	b538      	push	{r3, r4, r5, lr}
 8016cf0:	fb02 f401 	mul.w	r4, r2, r1
 8016cf4:	4621      	mov	r1, r4
 8016cf6:	f7fc fc6d 	bl	80135d4 <_malloc_r>
 8016cfa:	4605      	mov	r5, r0
 8016cfc:	b118      	cbz	r0, 8016d06 <_calloc_r+0x18>
 8016cfe:	4622      	mov	r2, r4
 8016d00:	2100      	movs	r1, #0
 8016d02:	f7fc fc11 	bl	8013528 <memset>
 8016d06:	4628      	mov	r0, r5
 8016d08:	bd38      	pop	{r3, r4, r5, pc}

08016d0a <__ssputs_r>:
 8016d0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016d0e:	688e      	ldr	r6, [r1, #8]
 8016d10:	429e      	cmp	r6, r3
 8016d12:	4682      	mov	sl, r0
 8016d14:	460c      	mov	r4, r1
 8016d16:	4690      	mov	r8, r2
 8016d18:	4699      	mov	r9, r3
 8016d1a:	d837      	bhi.n	8016d8c <__ssputs_r+0x82>
 8016d1c:	898a      	ldrh	r2, [r1, #12]
 8016d1e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016d22:	d031      	beq.n	8016d88 <__ssputs_r+0x7e>
 8016d24:	6825      	ldr	r5, [r4, #0]
 8016d26:	6909      	ldr	r1, [r1, #16]
 8016d28:	1a6f      	subs	r7, r5, r1
 8016d2a:	6965      	ldr	r5, [r4, #20]
 8016d2c:	2302      	movs	r3, #2
 8016d2e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016d32:	fb95 f5f3 	sdiv	r5, r5, r3
 8016d36:	f109 0301 	add.w	r3, r9, #1
 8016d3a:	443b      	add	r3, r7
 8016d3c:	429d      	cmp	r5, r3
 8016d3e:	bf38      	it	cc
 8016d40:	461d      	movcc	r5, r3
 8016d42:	0553      	lsls	r3, r2, #21
 8016d44:	d530      	bpl.n	8016da8 <__ssputs_r+0x9e>
 8016d46:	4629      	mov	r1, r5
 8016d48:	f7fc fc44 	bl	80135d4 <_malloc_r>
 8016d4c:	4606      	mov	r6, r0
 8016d4e:	b950      	cbnz	r0, 8016d66 <__ssputs_r+0x5c>
 8016d50:	230c      	movs	r3, #12
 8016d52:	f8ca 3000 	str.w	r3, [sl]
 8016d56:	89a3      	ldrh	r3, [r4, #12]
 8016d58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016d5c:	81a3      	strh	r3, [r4, #12]
 8016d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8016d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016d66:	463a      	mov	r2, r7
 8016d68:	6921      	ldr	r1, [r4, #16]
 8016d6a:	f7fc fbb9 	bl	80134e0 <memcpy>
 8016d6e:	89a3      	ldrh	r3, [r4, #12]
 8016d70:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016d74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016d78:	81a3      	strh	r3, [r4, #12]
 8016d7a:	6126      	str	r6, [r4, #16]
 8016d7c:	6165      	str	r5, [r4, #20]
 8016d7e:	443e      	add	r6, r7
 8016d80:	1bed      	subs	r5, r5, r7
 8016d82:	6026      	str	r6, [r4, #0]
 8016d84:	60a5      	str	r5, [r4, #8]
 8016d86:	464e      	mov	r6, r9
 8016d88:	454e      	cmp	r6, r9
 8016d8a:	d900      	bls.n	8016d8e <__ssputs_r+0x84>
 8016d8c:	464e      	mov	r6, r9
 8016d8e:	4632      	mov	r2, r6
 8016d90:	4641      	mov	r1, r8
 8016d92:	6820      	ldr	r0, [r4, #0]
 8016d94:	f7fc fbaf 	bl	80134f6 <memmove>
 8016d98:	68a3      	ldr	r3, [r4, #8]
 8016d9a:	1b9b      	subs	r3, r3, r6
 8016d9c:	60a3      	str	r3, [r4, #8]
 8016d9e:	6823      	ldr	r3, [r4, #0]
 8016da0:	441e      	add	r6, r3
 8016da2:	6026      	str	r6, [r4, #0]
 8016da4:	2000      	movs	r0, #0
 8016da6:	e7dc      	b.n	8016d62 <__ssputs_r+0x58>
 8016da8:	462a      	mov	r2, r5
 8016daa:	f000 fd1a 	bl	80177e2 <_realloc_r>
 8016dae:	4606      	mov	r6, r0
 8016db0:	2800      	cmp	r0, #0
 8016db2:	d1e2      	bne.n	8016d7a <__ssputs_r+0x70>
 8016db4:	6921      	ldr	r1, [r4, #16]
 8016db6:	4650      	mov	r0, sl
 8016db8:	f7fc fbbe 	bl	8013538 <_free_r>
 8016dbc:	e7c8      	b.n	8016d50 <__ssputs_r+0x46>
	...

08016dc0 <_svfiprintf_r>:
 8016dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016dc4:	461d      	mov	r5, r3
 8016dc6:	898b      	ldrh	r3, [r1, #12]
 8016dc8:	061f      	lsls	r7, r3, #24
 8016dca:	b09d      	sub	sp, #116	; 0x74
 8016dcc:	4680      	mov	r8, r0
 8016dce:	460c      	mov	r4, r1
 8016dd0:	4616      	mov	r6, r2
 8016dd2:	d50f      	bpl.n	8016df4 <_svfiprintf_r+0x34>
 8016dd4:	690b      	ldr	r3, [r1, #16]
 8016dd6:	b96b      	cbnz	r3, 8016df4 <_svfiprintf_r+0x34>
 8016dd8:	2140      	movs	r1, #64	; 0x40
 8016dda:	f7fc fbfb 	bl	80135d4 <_malloc_r>
 8016dde:	6020      	str	r0, [r4, #0]
 8016de0:	6120      	str	r0, [r4, #16]
 8016de2:	b928      	cbnz	r0, 8016df0 <_svfiprintf_r+0x30>
 8016de4:	230c      	movs	r3, #12
 8016de6:	f8c8 3000 	str.w	r3, [r8]
 8016dea:	f04f 30ff 	mov.w	r0, #4294967295
 8016dee:	e0c8      	b.n	8016f82 <_svfiprintf_r+0x1c2>
 8016df0:	2340      	movs	r3, #64	; 0x40
 8016df2:	6163      	str	r3, [r4, #20]
 8016df4:	2300      	movs	r3, #0
 8016df6:	9309      	str	r3, [sp, #36]	; 0x24
 8016df8:	2320      	movs	r3, #32
 8016dfa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016dfe:	2330      	movs	r3, #48	; 0x30
 8016e00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016e04:	9503      	str	r5, [sp, #12]
 8016e06:	f04f 0b01 	mov.w	fp, #1
 8016e0a:	4637      	mov	r7, r6
 8016e0c:	463d      	mov	r5, r7
 8016e0e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016e12:	b10b      	cbz	r3, 8016e18 <_svfiprintf_r+0x58>
 8016e14:	2b25      	cmp	r3, #37	; 0x25
 8016e16:	d13e      	bne.n	8016e96 <_svfiprintf_r+0xd6>
 8016e18:	ebb7 0a06 	subs.w	sl, r7, r6
 8016e1c:	d00b      	beq.n	8016e36 <_svfiprintf_r+0x76>
 8016e1e:	4653      	mov	r3, sl
 8016e20:	4632      	mov	r2, r6
 8016e22:	4621      	mov	r1, r4
 8016e24:	4640      	mov	r0, r8
 8016e26:	f7ff ff70 	bl	8016d0a <__ssputs_r>
 8016e2a:	3001      	adds	r0, #1
 8016e2c:	f000 80a4 	beq.w	8016f78 <_svfiprintf_r+0x1b8>
 8016e30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016e32:	4453      	add	r3, sl
 8016e34:	9309      	str	r3, [sp, #36]	; 0x24
 8016e36:	783b      	ldrb	r3, [r7, #0]
 8016e38:	2b00      	cmp	r3, #0
 8016e3a:	f000 809d 	beq.w	8016f78 <_svfiprintf_r+0x1b8>
 8016e3e:	2300      	movs	r3, #0
 8016e40:	f04f 32ff 	mov.w	r2, #4294967295
 8016e44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016e48:	9304      	str	r3, [sp, #16]
 8016e4a:	9307      	str	r3, [sp, #28]
 8016e4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016e50:	931a      	str	r3, [sp, #104]	; 0x68
 8016e52:	462f      	mov	r7, r5
 8016e54:	2205      	movs	r2, #5
 8016e56:	f817 1b01 	ldrb.w	r1, [r7], #1
 8016e5a:	4850      	ldr	r0, [pc, #320]	; (8016f9c <_svfiprintf_r+0x1dc>)
 8016e5c:	f7e9 f9d0 	bl	8000200 <memchr>
 8016e60:	9b04      	ldr	r3, [sp, #16]
 8016e62:	b9d0      	cbnz	r0, 8016e9a <_svfiprintf_r+0xda>
 8016e64:	06d9      	lsls	r1, r3, #27
 8016e66:	bf44      	itt	mi
 8016e68:	2220      	movmi	r2, #32
 8016e6a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016e6e:	071a      	lsls	r2, r3, #28
 8016e70:	bf44      	itt	mi
 8016e72:	222b      	movmi	r2, #43	; 0x2b
 8016e74:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016e78:	782a      	ldrb	r2, [r5, #0]
 8016e7a:	2a2a      	cmp	r2, #42	; 0x2a
 8016e7c:	d015      	beq.n	8016eaa <_svfiprintf_r+0xea>
 8016e7e:	9a07      	ldr	r2, [sp, #28]
 8016e80:	462f      	mov	r7, r5
 8016e82:	2000      	movs	r0, #0
 8016e84:	250a      	movs	r5, #10
 8016e86:	4639      	mov	r1, r7
 8016e88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016e8c:	3b30      	subs	r3, #48	; 0x30
 8016e8e:	2b09      	cmp	r3, #9
 8016e90:	d94d      	bls.n	8016f2e <_svfiprintf_r+0x16e>
 8016e92:	b1b8      	cbz	r0, 8016ec4 <_svfiprintf_r+0x104>
 8016e94:	e00f      	b.n	8016eb6 <_svfiprintf_r+0xf6>
 8016e96:	462f      	mov	r7, r5
 8016e98:	e7b8      	b.n	8016e0c <_svfiprintf_r+0x4c>
 8016e9a:	4a40      	ldr	r2, [pc, #256]	; (8016f9c <_svfiprintf_r+0x1dc>)
 8016e9c:	1a80      	subs	r0, r0, r2
 8016e9e:	fa0b f000 	lsl.w	r0, fp, r0
 8016ea2:	4318      	orrs	r0, r3
 8016ea4:	9004      	str	r0, [sp, #16]
 8016ea6:	463d      	mov	r5, r7
 8016ea8:	e7d3      	b.n	8016e52 <_svfiprintf_r+0x92>
 8016eaa:	9a03      	ldr	r2, [sp, #12]
 8016eac:	1d11      	adds	r1, r2, #4
 8016eae:	6812      	ldr	r2, [r2, #0]
 8016eb0:	9103      	str	r1, [sp, #12]
 8016eb2:	2a00      	cmp	r2, #0
 8016eb4:	db01      	blt.n	8016eba <_svfiprintf_r+0xfa>
 8016eb6:	9207      	str	r2, [sp, #28]
 8016eb8:	e004      	b.n	8016ec4 <_svfiprintf_r+0x104>
 8016eba:	4252      	negs	r2, r2
 8016ebc:	f043 0302 	orr.w	r3, r3, #2
 8016ec0:	9207      	str	r2, [sp, #28]
 8016ec2:	9304      	str	r3, [sp, #16]
 8016ec4:	783b      	ldrb	r3, [r7, #0]
 8016ec6:	2b2e      	cmp	r3, #46	; 0x2e
 8016ec8:	d10c      	bne.n	8016ee4 <_svfiprintf_r+0x124>
 8016eca:	787b      	ldrb	r3, [r7, #1]
 8016ecc:	2b2a      	cmp	r3, #42	; 0x2a
 8016ece:	d133      	bne.n	8016f38 <_svfiprintf_r+0x178>
 8016ed0:	9b03      	ldr	r3, [sp, #12]
 8016ed2:	1d1a      	adds	r2, r3, #4
 8016ed4:	681b      	ldr	r3, [r3, #0]
 8016ed6:	9203      	str	r2, [sp, #12]
 8016ed8:	2b00      	cmp	r3, #0
 8016eda:	bfb8      	it	lt
 8016edc:	f04f 33ff 	movlt.w	r3, #4294967295
 8016ee0:	3702      	adds	r7, #2
 8016ee2:	9305      	str	r3, [sp, #20]
 8016ee4:	4d2e      	ldr	r5, [pc, #184]	; (8016fa0 <_svfiprintf_r+0x1e0>)
 8016ee6:	7839      	ldrb	r1, [r7, #0]
 8016ee8:	2203      	movs	r2, #3
 8016eea:	4628      	mov	r0, r5
 8016eec:	f7e9 f988 	bl	8000200 <memchr>
 8016ef0:	b138      	cbz	r0, 8016f02 <_svfiprintf_r+0x142>
 8016ef2:	2340      	movs	r3, #64	; 0x40
 8016ef4:	1b40      	subs	r0, r0, r5
 8016ef6:	fa03 f000 	lsl.w	r0, r3, r0
 8016efa:	9b04      	ldr	r3, [sp, #16]
 8016efc:	4303      	orrs	r3, r0
 8016efe:	3701      	adds	r7, #1
 8016f00:	9304      	str	r3, [sp, #16]
 8016f02:	7839      	ldrb	r1, [r7, #0]
 8016f04:	4827      	ldr	r0, [pc, #156]	; (8016fa4 <_svfiprintf_r+0x1e4>)
 8016f06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016f0a:	2206      	movs	r2, #6
 8016f0c:	1c7e      	adds	r6, r7, #1
 8016f0e:	f7e9 f977 	bl	8000200 <memchr>
 8016f12:	2800      	cmp	r0, #0
 8016f14:	d038      	beq.n	8016f88 <_svfiprintf_r+0x1c8>
 8016f16:	4b24      	ldr	r3, [pc, #144]	; (8016fa8 <_svfiprintf_r+0x1e8>)
 8016f18:	bb13      	cbnz	r3, 8016f60 <_svfiprintf_r+0x1a0>
 8016f1a:	9b03      	ldr	r3, [sp, #12]
 8016f1c:	3307      	adds	r3, #7
 8016f1e:	f023 0307 	bic.w	r3, r3, #7
 8016f22:	3308      	adds	r3, #8
 8016f24:	9303      	str	r3, [sp, #12]
 8016f26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016f28:	444b      	add	r3, r9
 8016f2a:	9309      	str	r3, [sp, #36]	; 0x24
 8016f2c:	e76d      	b.n	8016e0a <_svfiprintf_r+0x4a>
 8016f2e:	fb05 3202 	mla	r2, r5, r2, r3
 8016f32:	2001      	movs	r0, #1
 8016f34:	460f      	mov	r7, r1
 8016f36:	e7a6      	b.n	8016e86 <_svfiprintf_r+0xc6>
 8016f38:	2300      	movs	r3, #0
 8016f3a:	3701      	adds	r7, #1
 8016f3c:	9305      	str	r3, [sp, #20]
 8016f3e:	4619      	mov	r1, r3
 8016f40:	250a      	movs	r5, #10
 8016f42:	4638      	mov	r0, r7
 8016f44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016f48:	3a30      	subs	r2, #48	; 0x30
 8016f4a:	2a09      	cmp	r2, #9
 8016f4c:	d903      	bls.n	8016f56 <_svfiprintf_r+0x196>
 8016f4e:	2b00      	cmp	r3, #0
 8016f50:	d0c8      	beq.n	8016ee4 <_svfiprintf_r+0x124>
 8016f52:	9105      	str	r1, [sp, #20]
 8016f54:	e7c6      	b.n	8016ee4 <_svfiprintf_r+0x124>
 8016f56:	fb05 2101 	mla	r1, r5, r1, r2
 8016f5a:	2301      	movs	r3, #1
 8016f5c:	4607      	mov	r7, r0
 8016f5e:	e7f0      	b.n	8016f42 <_svfiprintf_r+0x182>
 8016f60:	ab03      	add	r3, sp, #12
 8016f62:	9300      	str	r3, [sp, #0]
 8016f64:	4622      	mov	r2, r4
 8016f66:	4b11      	ldr	r3, [pc, #68]	; (8016fac <_svfiprintf_r+0x1ec>)
 8016f68:	a904      	add	r1, sp, #16
 8016f6a:	4640      	mov	r0, r8
 8016f6c:	f7fc fc20 	bl	80137b0 <_printf_float>
 8016f70:	f1b0 3fff 	cmp.w	r0, #4294967295
 8016f74:	4681      	mov	r9, r0
 8016f76:	d1d6      	bne.n	8016f26 <_svfiprintf_r+0x166>
 8016f78:	89a3      	ldrh	r3, [r4, #12]
 8016f7a:	065b      	lsls	r3, r3, #25
 8016f7c:	f53f af35 	bmi.w	8016dea <_svfiprintf_r+0x2a>
 8016f80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016f82:	b01d      	add	sp, #116	; 0x74
 8016f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f88:	ab03      	add	r3, sp, #12
 8016f8a:	9300      	str	r3, [sp, #0]
 8016f8c:	4622      	mov	r2, r4
 8016f8e:	4b07      	ldr	r3, [pc, #28]	; (8016fac <_svfiprintf_r+0x1ec>)
 8016f90:	a904      	add	r1, sp, #16
 8016f92:	4640      	mov	r0, r8
 8016f94:	f7fc fec2 	bl	8013d1c <_printf_i>
 8016f98:	e7ea      	b.n	8016f70 <_svfiprintf_r+0x1b0>
 8016f9a:	bf00      	nop
 8016f9c:	08019894 	.word	0x08019894
 8016fa0:	0801989a 	.word	0x0801989a
 8016fa4:	0801989e 	.word	0x0801989e
 8016fa8:	080137b1 	.word	0x080137b1
 8016fac:	08016d0b 	.word	0x08016d0b

08016fb0 <_sungetc_r>:
 8016fb0:	b538      	push	{r3, r4, r5, lr}
 8016fb2:	1c4b      	adds	r3, r1, #1
 8016fb4:	4614      	mov	r4, r2
 8016fb6:	d103      	bne.n	8016fc0 <_sungetc_r+0x10>
 8016fb8:	f04f 35ff 	mov.w	r5, #4294967295
 8016fbc:	4628      	mov	r0, r5
 8016fbe:	bd38      	pop	{r3, r4, r5, pc}
 8016fc0:	8993      	ldrh	r3, [r2, #12]
 8016fc2:	f023 0320 	bic.w	r3, r3, #32
 8016fc6:	8193      	strh	r3, [r2, #12]
 8016fc8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016fca:	6852      	ldr	r2, [r2, #4]
 8016fcc:	b2cd      	uxtb	r5, r1
 8016fce:	b18b      	cbz	r3, 8016ff4 <_sungetc_r+0x44>
 8016fd0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016fd2:	4293      	cmp	r3, r2
 8016fd4:	dd08      	ble.n	8016fe8 <_sungetc_r+0x38>
 8016fd6:	6823      	ldr	r3, [r4, #0]
 8016fd8:	1e5a      	subs	r2, r3, #1
 8016fda:	6022      	str	r2, [r4, #0]
 8016fdc:	f803 5c01 	strb.w	r5, [r3, #-1]
 8016fe0:	6863      	ldr	r3, [r4, #4]
 8016fe2:	3301      	adds	r3, #1
 8016fe4:	6063      	str	r3, [r4, #4]
 8016fe6:	e7e9      	b.n	8016fbc <_sungetc_r+0xc>
 8016fe8:	4621      	mov	r1, r4
 8016fea:	f000 fbb3 	bl	8017754 <__submore>
 8016fee:	2800      	cmp	r0, #0
 8016ff0:	d0f1      	beq.n	8016fd6 <_sungetc_r+0x26>
 8016ff2:	e7e1      	b.n	8016fb8 <_sungetc_r+0x8>
 8016ff4:	6921      	ldr	r1, [r4, #16]
 8016ff6:	6823      	ldr	r3, [r4, #0]
 8016ff8:	b151      	cbz	r1, 8017010 <_sungetc_r+0x60>
 8016ffa:	4299      	cmp	r1, r3
 8016ffc:	d208      	bcs.n	8017010 <_sungetc_r+0x60>
 8016ffe:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8017002:	42a9      	cmp	r1, r5
 8017004:	d104      	bne.n	8017010 <_sungetc_r+0x60>
 8017006:	3b01      	subs	r3, #1
 8017008:	3201      	adds	r2, #1
 801700a:	6023      	str	r3, [r4, #0]
 801700c:	6062      	str	r2, [r4, #4]
 801700e:	e7d5      	b.n	8016fbc <_sungetc_r+0xc>
 8017010:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8017014:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017018:	6363      	str	r3, [r4, #52]	; 0x34
 801701a:	2303      	movs	r3, #3
 801701c:	63a3      	str	r3, [r4, #56]	; 0x38
 801701e:	4623      	mov	r3, r4
 8017020:	f803 5f46 	strb.w	r5, [r3, #70]!
 8017024:	6023      	str	r3, [r4, #0]
 8017026:	2301      	movs	r3, #1
 8017028:	e7dc      	b.n	8016fe4 <_sungetc_r+0x34>

0801702a <__ssrefill_r>:
 801702a:	b510      	push	{r4, lr}
 801702c:	460c      	mov	r4, r1
 801702e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8017030:	b169      	cbz	r1, 801704e <__ssrefill_r+0x24>
 8017032:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017036:	4299      	cmp	r1, r3
 8017038:	d001      	beq.n	801703e <__ssrefill_r+0x14>
 801703a:	f7fc fa7d 	bl	8013538 <_free_r>
 801703e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017040:	6063      	str	r3, [r4, #4]
 8017042:	2000      	movs	r0, #0
 8017044:	6360      	str	r0, [r4, #52]	; 0x34
 8017046:	b113      	cbz	r3, 801704e <__ssrefill_r+0x24>
 8017048:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801704a:	6023      	str	r3, [r4, #0]
 801704c:	bd10      	pop	{r4, pc}
 801704e:	6923      	ldr	r3, [r4, #16]
 8017050:	6023      	str	r3, [r4, #0]
 8017052:	2300      	movs	r3, #0
 8017054:	6063      	str	r3, [r4, #4]
 8017056:	89a3      	ldrh	r3, [r4, #12]
 8017058:	f043 0320 	orr.w	r3, r3, #32
 801705c:	81a3      	strh	r3, [r4, #12]
 801705e:	f04f 30ff 	mov.w	r0, #4294967295
 8017062:	e7f3      	b.n	801704c <__ssrefill_r+0x22>

08017064 <__ssvfiscanf_r>:
 8017064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017068:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 801706c:	460c      	mov	r4, r1
 801706e:	2100      	movs	r1, #0
 8017070:	9144      	str	r1, [sp, #272]	; 0x110
 8017072:	9145      	str	r1, [sp, #276]	; 0x114
 8017074:	499f      	ldr	r1, [pc, #636]	; (80172f4 <__ssvfiscanf_r+0x290>)
 8017076:	91a0      	str	r1, [sp, #640]	; 0x280
 8017078:	f10d 0804 	add.w	r8, sp, #4
 801707c:	499e      	ldr	r1, [pc, #632]	; (80172f8 <__ssvfiscanf_r+0x294>)
 801707e:	f8df 927c 	ldr.w	r9, [pc, #636]	; 80172fc <__ssvfiscanf_r+0x298>
 8017082:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8017086:	4606      	mov	r6, r0
 8017088:	4692      	mov	sl, r2
 801708a:	91a1      	str	r1, [sp, #644]	; 0x284
 801708c:	9300      	str	r3, [sp, #0]
 801708e:	270a      	movs	r7, #10
 8017090:	f89a 3000 	ldrb.w	r3, [sl]
 8017094:	2b00      	cmp	r3, #0
 8017096:	f000 812a 	beq.w	80172ee <__ssvfiscanf_r+0x28a>
 801709a:	4655      	mov	r5, sl
 801709c:	f7ff f9f6 	bl	801648c <__locale_ctype_ptr>
 80170a0:	f815 bb01 	ldrb.w	fp, [r5], #1
 80170a4:	4458      	add	r0, fp
 80170a6:	7843      	ldrb	r3, [r0, #1]
 80170a8:	f013 0308 	ands.w	r3, r3, #8
 80170ac:	d01c      	beq.n	80170e8 <__ssvfiscanf_r+0x84>
 80170ae:	6863      	ldr	r3, [r4, #4]
 80170b0:	2b00      	cmp	r3, #0
 80170b2:	dd12      	ble.n	80170da <__ssvfiscanf_r+0x76>
 80170b4:	f7ff f9ea 	bl	801648c <__locale_ctype_ptr>
 80170b8:	6823      	ldr	r3, [r4, #0]
 80170ba:	781a      	ldrb	r2, [r3, #0]
 80170bc:	4410      	add	r0, r2
 80170be:	7842      	ldrb	r2, [r0, #1]
 80170c0:	0712      	lsls	r2, r2, #28
 80170c2:	d401      	bmi.n	80170c8 <__ssvfiscanf_r+0x64>
 80170c4:	46aa      	mov	sl, r5
 80170c6:	e7e3      	b.n	8017090 <__ssvfiscanf_r+0x2c>
 80170c8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80170ca:	3201      	adds	r2, #1
 80170cc:	9245      	str	r2, [sp, #276]	; 0x114
 80170ce:	6862      	ldr	r2, [r4, #4]
 80170d0:	3301      	adds	r3, #1
 80170d2:	3a01      	subs	r2, #1
 80170d4:	6062      	str	r2, [r4, #4]
 80170d6:	6023      	str	r3, [r4, #0]
 80170d8:	e7e9      	b.n	80170ae <__ssvfiscanf_r+0x4a>
 80170da:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80170dc:	4621      	mov	r1, r4
 80170de:	4630      	mov	r0, r6
 80170e0:	4798      	blx	r3
 80170e2:	2800      	cmp	r0, #0
 80170e4:	d0e6      	beq.n	80170b4 <__ssvfiscanf_r+0x50>
 80170e6:	e7ed      	b.n	80170c4 <__ssvfiscanf_r+0x60>
 80170e8:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 80170ec:	f040 8082 	bne.w	80171f4 <__ssvfiscanf_r+0x190>
 80170f0:	9343      	str	r3, [sp, #268]	; 0x10c
 80170f2:	9341      	str	r3, [sp, #260]	; 0x104
 80170f4:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80170f8:	2b2a      	cmp	r3, #42	; 0x2a
 80170fa:	d103      	bne.n	8017104 <__ssvfiscanf_r+0xa0>
 80170fc:	2310      	movs	r3, #16
 80170fe:	9341      	str	r3, [sp, #260]	; 0x104
 8017100:	f10a 0502 	add.w	r5, sl, #2
 8017104:	46aa      	mov	sl, r5
 8017106:	f815 1b01 	ldrb.w	r1, [r5], #1
 801710a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 801710e:	2a09      	cmp	r2, #9
 8017110:	d922      	bls.n	8017158 <__ssvfiscanf_r+0xf4>
 8017112:	2203      	movs	r2, #3
 8017114:	4879      	ldr	r0, [pc, #484]	; (80172fc <__ssvfiscanf_r+0x298>)
 8017116:	f7e9 f873 	bl	8000200 <memchr>
 801711a:	b138      	cbz	r0, 801712c <__ssvfiscanf_r+0xc8>
 801711c:	eba0 0309 	sub.w	r3, r0, r9
 8017120:	2001      	movs	r0, #1
 8017122:	4098      	lsls	r0, r3
 8017124:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017126:	4318      	orrs	r0, r3
 8017128:	9041      	str	r0, [sp, #260]	; 0x104
 801712a:	46aa      	mov	sl, r5
 801712c:	f89a 3000 	ldrb.w	r3, [sl]
 8017130:	2b67      	cmp	r3, #103	; 0x67
 8017132:	f10a 0501 	add.w	r5, sl, #1
 8017136:	d82b      	bhi.n	8017190 <__ssvfiscanf_r+0x12c>
 8017138:	2b65      	cmp	r3, #101	; 0x65
 801713a:	f080 809f 	bcs.w	801727c <__ssvfiscanf_r+0x218>
 801713e:	2b47      	cmp	r3, #71	; 0x47
 8017140:	d810      	bhi.n	8017164 <__ssvfiscanf_r+0x100>
 8017142:	2b45      	cmp	r3, #69	; 0x45
 8017144:	f080 809a 	bcs.w	801727c <__ssvfiscanf_r+0x218>
 8017148:	2b00      	cmp	r3, #0
 801714a:	d06c      	beq.n	8017226 <__ssvfiscanf_r+0x1c2>
 801714c:	2b25      	cmp	r3, #37	; 0x25
 801714e:	d051      	beq.n	80171f4 <__ssvfiscanf_r+0x190>
 8017150:	2303      	movs	r3, #3
 8017152:	9347      	str	r3, [sp, #284]	; 0x11c
 8017154:	9742      	str	r7, [sp, #264]	; 0x108
 8017156:	e027      	b.n	80171a8 <__ssvfiscanf_r+0x144>
 8017158:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801715a:	fb07 1303 	mla	r3, r7, r3, r1
 801715e:	3b30      	subs	r3, #48	; 0x30
 8017160:	9343      	str	r3, [sp, #268]	; 0x10c
 8017162:	e7cf      	b.n	8017104 <__ssvfiscanf_r+0xa0>
 8017164:	2b5b      	cmp	r3, #91	; 0x5b
 8017166:	d06a      	beq.n	801723e <__ssvfiscanf_r+0x1da>
 8017168:	d80c      	bhi.n	8017184 <__ssvfiscanf_r+0x120>
 801716a:	2b58      	cmp	r3, #88	; 0x58
 801716c:	d1f0      	bne.n	8017150 <__ssvfiscanf_r+0xec>
 801716e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8017170:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017174:	9241      	str	r2, [sp, #260]	; 0x104
 8017176:	2210      	movs	r2, #16
 8017178:	9242      	str	r2, [sp, #264]	; 0x108
 801717a:	2b6e      	cmp	r3, #110	; 0x6e
 801717c:	bf8c      	ite	hi
 801717e:	2304      	movhi	r3, #4
 8017180:	2303      	movls	r3, #3
 8017182:	e010      	b.n	80171a6 <__ssvfiscanf_r+0x142>
 8017184:	2b63      	cmp	r3, #99	; 0x63
 8017186:	d065      	beq.n	8017254 <__ssvfiscanf_r+0x1f0>
 8017188:	2b64      	cmp	r3, #100	; 0x64
 801718a:	d1e1      	bne.n	8017150 <__ssvfiscanf_r+0xec>
 801718c:	9742      	str	r7, [sp, #264]	; 0x108
 801718e:	e7f4      	b.n	801717a <__ssvfiscanf_r+0x116>
 8017190:	2b70      	cmp	r3, #112	; 0x70
 8017192:	d04b      	beq.n	801722c <__ssvfiscanf_r+0x1c8>
 8017194:	d826      	bhi.n	80171e4 <__ssvfiscanf_r+0x180>
 8017196:	2b6e      	cmp	r3, #110	; 0x6e
 8017198:	d062      	beq.n	8017260 <__ssvfiscanf_r+0x1fc>
 801719a:	d84c      	bhi.n	8017236 <__ssvfiscanf_r+0x1d2>
 801719c:	2b69      	cmp	r3, #105	; 0x69
 801719e:	d1d7      	bne.n	8017150 <__ssvfiscanf_r+0xec>
 80171a0:	2300      	movs	r3, #0
 80171a2:	9342      	str	r3, [sp, #264]	; 0x108
 80171a4:	2303      	movs	r3, #3
 80171a6:	9347      	str	r3, [sp, #284]	; 0x11c
 80171a8:	6863      	ldr	r3, [r4, #4]
 80171aa:	2b00      	cmp	r3, #0
 80171ac:	dd68      	ble.n	8017280 <__ssvfiscanf_r+0x21c>
 80171ae:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80171b0:	0659      	lsls	r1, r3, #25
 80171b2:	d407      	bmi.n	80171c4 <__ssvfiscanf_r+0x160>
 80171b4:	f7ff f96a 	bl	801648c <__locale_ctype_ptr>
 80171b8:	6823      	ldr	r3, [r4, #0]
 80171ba:	781a      	ldrb	r2, [r3, #0]
 80171bc:	4410      	add	r0, r2
 80171be:	7842      	ldrb	r2, [r0, #1]
 80171c0:	0712      	lsls	r2, r2, #28
 80171c2:	d464      	bmi.n	801728e <__ssvfiscanf_r+0x22a>
 80171c4:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80171c6:	2b02      	cmp	r3, #2
 80171c8:	dc73      	bgt.n	80172b2 <__ssvfiscanf_r+0x24e>
 80171ca:	466b      	mov	r3, sp
 80171cc:	4622      	mov	r2, r4
 80171ce:	a941      	add	r1, sp, #260	; 0x104
 80171d0:	4630      	mov	r0, r6
 80171d2:	f000 f897 	bl	8017304 <_scanf_chars>
 80171d6:	2801      	cmp	r0, #1
 80171d8:	f000 8089 	beq.w	80172ee <__ssvfiscanf_r+0x28a>
 80171dc:	2802      	cmp	r0, #2
 80171de:	f47f af71 	bne.w	80170c4 <__ssvfiscanf_r+0x60>
 80171e2:	e01d      	b.n	8017220 <__ssvfiscanf_r+0x1bc>
 80171e4:	2b75      	cmp	r3, #117	; 0x75
 80171e6:	d0d1      	beq.n	801718c <__ssvfiscanf_r+0x128>
 80171e8:	2b78      	cmp	r3, #120	; 0x78
 80171ea:	d0c0      	beq.n	801716e <__ssvfiscanf_r+0x10a>
 80171ec:	2b73      	cmp	r3, #115	; 0x73
 80171ee:	d1af      	bne.n	8017150 <__ssvfiscanf_r+0xec>
 80171f0:	2302      	movs	r3, #2
 80171f2:	e7d8      	b.n	80171a6 <__ssvfiscanf_r+0x142>
 80171f4:	6863      	ldr	r3, [r4, #4]
 80171f6:	2b00      	cmp	r3, #0
 80171f8:	dd0c      	ble.n	8017214 <__ssvfiscanf_r+0x1b0>
 80171fa:	6823      	ldr	r3, [r4, #0]
 80171fc:	781a      	ldrb	r2, [r3, #0]
 80171fe:	455a      	cmp	r2, fp
 8017200:	d175      	bne.n	80172ee <__ssvfiscanf_r+0x28a>
 8017202:	3301      	adds	r3, #1
 8017204:	6862      	ldr	r2, [r4, #4]
 8017206:	6023      	str	r3, [r4, #0]
 8017208:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801720a:	3a01      	subs	r2, #1
 801720c:	3301      	adds	r3, #1
 801720e:	6062      	str	r2, [r4, #4]
 8017210:	9345      	str	r3, [sp, #276]	; 0x114
 8017212:	e757      	b.n	80170c4 <__ssvfiscanf_r+0x60>
 8017214:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017216:	4621      	mov	r1, r4
 8017218:	4630      	mov	r0, r6
 801721a:	4798      	blx	r3
 801721c:	2800      	cmp	r0, #0
 801721e:	d0ec      	beq.n	80171fa <__ssvfiscanf_r+0x196>
 8017220:	9844      	ldr	r0, [sp, #272]	; 0x110
 8017222:	2800      	cmp	r0, #0
 8017224:	d159      	bne.n	80172da <__ssvfiscanf_r+0x276>
 8017226:	f04f 30ff 	mov.w	r0, #4294967295
 801722a:	e05c      	b.n	80172e6 <__ssvfiscanf_r+0x282>
 801722c:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801722e:	f042 0220 	orr.w	r2, r2, #32
 8017232:	9241      	str	r2, [sp, #260]	; 0x104
 8017234:	e79b      	b.n	801716e <__ssvfiscanf_r+0x10a>
 8017236:	2308      	movs	r3, #8
 8017238:	9342      	str	r3, [sp, #264]	; 0x108
 801723a:	2304      	movs	r3, #4
 801723c:	e7b3      	b.n	80171a6 <__ssvfiscanf_r+0x142>
 801723e:	4629      	mov	r1, r5
 8017240:	4640      	mov	r0, r8
 8017242:	f000 f9b7 	bl	80175b4 <__sccl>
 8017246:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017248:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801724c:	9341      	str	r3, [sp, #260]	; 0x104
 801724e:	4605      	mov	r5, r0
 8017250:	2301      	movs	r3, #1
 8017252:	e7a8      	b.n	80171a6 <__ssvfiscanf_r+0x142>
 8017254:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017256:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801725a:	9341      	str	r3, [sp, #260]	; 0x104
 801725c:	2300      	movs	r3, #0
 801725e:	e7a2      	b.n	80171a6 <__ssvfiscanf_r+0x142>
 8017260:	9841      	ldr	r0, [sp, #260]	; 0x104
 8017262:	06c3      	lsls	r3, r0, #27
 8017264:	f53f af2e 	bmi.w	80170c4 <__ssvfiscanf_r+0x60>
 8017268:	9b00      	ldr	r3, [sp, #0]
 801726a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801726c:	1d19      	adds	r1, r3, #4
 801726e:	9100      	str	r1, [sp, #0]
 8017270:	681b      	ldr	r3, [r3, #0]
 8017272:	07c0      	lsls	r0, r0, #31
 8017274:	bf4c      	ite	mi
 8017276:	801a      	strhmi	r2, [r3, #0]
 8017278:	601a      	strpl	r2, [r3, #0]
 801727a:	e723      	b.n	80170c4 <__ssvfiscanf_r+0x60>
 801727c:	2305      	movs	r3, #5
 801727e:	e792      	b.n	80171a6 <__ssvfiscanf_r+0x142>
 8017280:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017282:	4621      	mov	r1, r4
 8017284:	4630      	mov	r0, r6
 8017286:	4798      	blx	r3
 8017288:	2800      	cmp	r0, #0
 801728a:	d090      	beq.n	80171ae <__ssvfiscanf_r+0x14a>
 801728c:	e7c8      	b.n	8017220 <__ssvfiscanf_r+0x1bc>
 801728e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017290:	3201      	adds	r2, #1
 8017292:	9245      	str	r2, [sp, #276]	; 0x114
 8017294:	6862      	ldr	r2, [r4, #4]
 8017296:	3a01      	subs	r2, #1
 8017298:	2a00      	cmp	r2, #0
 801729a:	6062      	str	r2, [r4, #4]
 801729c:	dd02      	ble.n	80172a4 <__ssvfiscanf_r+0x240>
 801729e:	3301      	adds	r3, #1
 80172a0:	6023      	str	r3, [r4, #0]
 80172a2:	e787      	b.n	80171b4 <__ssvfiscanf_r+0x150>
 80172a4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80172a6:	4621      	mov	r1, r4
 80172a8:	4630      	mov	r0, r6
 80172aa:	4798      	blx	r3
 80172ac:	2800      	cmp	r0, #0
 80172ae:	d081      	beq.n	80171b4 <__ssvfiscanf_r+0x150>
 80172b0:	e7b6      	b.n	8017220 <__ssvfiscanf_r+0x1bc>
 80172b2:	2b04      	cmp	r3, #4
 80172b4:	dc06      	bgt.n	80172c4 <__ssvfiscanf_r+0x260>
 80172b6:	466b      	mov	r3, sp
 80172b8:	4622      	mov	r2, r4
 80172ba:	a941      	add	r1, sp, #260	; 0x104
 80172bc:	4630      	mov	r0, r6
 80172be:	f000 f885 	bl	80173cc <_scanf_i>
 80172c2:	e788      	b.n	80171d6 <__ssvfiscanf_r+0x172>
 80172c4:	4b0e      	ldr	r3, [pc, #56]	; (8017300 <__ssvfiscanf_r+0x29c>)
 80172c6:	2b00      	cmp	r3, #0
 80172c8:	f43f aefc 	beq.w	80170c4 <__ssvfiscanf_r+0x60>
 80172cc:	466b      	mov	r3, sp
 80172ce:	4622      	mov	r2, r4
 80172d0:	a941      	add	r1, sp, #260	; 0x104
 80172d2:	4630      	mov	r0, r6
 80172d4:	f7fc fe34 	bl	8013f40 <_scanf_float>
 80172d8:	e77d      	b.n	80171d6 <__ssvfiscanf_r+0x172>
 80172da:	89a3      	ldrh	r3, [r4, #12]
 80172dc:	f013 0f40 	tst.w	r3, #64	; 0x40
 80172e0:	bf18      	it	ne
 80172e2:	f04f 30ff 	movne.w	r0, #4294967295
 80172e6:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80172ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80172ee:	9844      	ldr	r0, [sp, #272]	; 0x110
 80172f0:	e7f9      	b.n	80172e6 <__ssvfiscanf_r+0x282>
 80172f2:	bf00      	nop
 80172f4:	08016fb1 	.word	0x08016fb1
 80172f8:	0801702b 	.word	0x0801702b
 80172fc:	0801989a 	.word	0x0801989a
 8017300:	08013f41 	.word	0x08013f41

08017304 <_scanf_chars>:
 8017304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017308:	4615      	mov	r5, r2
 801730a:	688a      	ldr	r2, [r1, #8]
 801730c:	4680      	mov	r8, r0
 801730e:	460c      	mov	r4, r1
 8017310:	b932      	cbnz	r2, 8017320 <_scanf_chars+0x1c>
 8017312:	698a      	ldr	r2, [r1, #24]
 8017314:	2a00      	cmp	r2, #0
 8017316:	bf14      	ite	ne
 8017318:	f04f 32ff 	movne.w	r2, #4294967295
 801731c:	2201      	moveq	r2, #1
 801731e:	608a      	str	r2, [r1, #8]
 8017320:	6822      	ldr	r2, [r4, #0]
 8017322:	06d1      	lsls	r1, r2, #27
 8017324:	bf5f      	itttt	pl
 8017326:	681a      	ldrpl	r2, [r3, #0]
 8017328:	1d11      	addpl	r1, r2, #4
 801732a:	6019      	strpl	r1, [r3, #0]
 801732c:	6817      	ldrpl	r7, [r2, #0]
 801732e:	2600      	movs	r6, #0
 8017330:	69a3      	ldr	r3, [r4, #24]
 8017332:	b1db      	cbz	r3, 801736c <_scanf_chars+0x68>
 8017334:	2b01      	cmp	r3, #1
 8017336:	d107      	bne.n	8017348 <_scanf_chars+0x44>
 8017338:	682b      	ldr	r3, [r5, #0]
 801733a:	6962      	ldr	r2, [r4, #20]
 801733c:	781b      	ldrb	r3, [r3, #0]
 801733e:	5cd3      	ldrb	r3, [r2, r3]
 8017340:	b9a3      	cbnz	r3, 801736c <_scanf_chars+0x68>
 8017342:	2e00      	cmp	r6, #0
 8017344:	d132      	bne.n	80173ac <_scanf_chars+0xa8>
 8017346:	e006      	b.n	8017356 <_scanf_chars+0x52>
 8017348:	2b02      	cmp	r3, #2
 801734a:	d007      	beq.n	801735c <_scanf_chars+0x58>
 801734c:	2e00      	cmp	r6, #0
 801734e:	d12d      	bne.n	80173ac <_scanf_chars+0xa8>
 8017350:	69a3      	ldr	r3, [r4, #24]
 8017352:	2b01      	cmp	r3, #1
 8017354:	d12a      	bne.n	80173ac <_scanf_chars+0xa8>
 8017356:	2001      	movs	r0, #1
 8017358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801735c:	f7ff f896 	bl	801648c <__locale_ctype_ptr>
 8017360:	682b      	ldr	r3, [r5, #0]
 8017362:	781b      	ldrb	r3, [r3, #0]
 8017364:	4418      	add	r0, r3
 8017366:	7843      	ldrb	r3, [r0, #1]
 8017368:	071b      	lsls	r3, r3, #28
 801736a:	d4ef      	bmi.n	801734c <_scanf_chars+0x48>
 801736c:	6823      	ldr	r3, [r4, #0]
 801736e:	06da      	lsls	r2, r3, #27
 8017370:	bf5e      	ittt	pl
 8017372:	682b      	ldrpl	r3, [r5, #0]
 8017374:	781b      	ldrbpl	r3, [r3, #0]
 8017376:	703b      	strbpl	r3, [r7, #0]
 8017378:	682a      	ldr	r2, [r5, #0]
 801737a:	686b      	ldr	r3, [r5, #4]
 801737c:	f102 0201 	add.w	r2, r2, #1
 8017380:	602a      	str	r2, [r5, #0]
 8017382:	68a2      	ldr	r2, [r4, #8]
 8017384:	f103 33ff 	add.w	r3, r3, #4294967295
 8017388:	f102 32ff 	add.w	r2, r2, #4294967295
 801738c:	606b      	str	r3, [r5, #4]
 801738e:	f106 0601 	add.w	r6, r6, #1
 8017392:	bf58      	it	pl
 8017394:	3701      	addpl	r7, #1
 8017396:	60a2      	str	r2, [r4, #8]
 8017398:	b142      	cbz	r2, 80173ac <_scanf_chars+0xa8>
 801739a:	2b00      	cmp	r3, #0
 801739c:	dcc8      	bgt.n	8017330 <_scanf_chars+0x2c>
 801739e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80173a2:	4629      	mov	r1, r5
 80173a4:	4640      	mov	r0, r8
 80173a6:	4798      	blx	r3
 80173a8:	2800      	cmp	r0, #0
 80173aa:	d0c1      	beq.n	8017330 <_scanf_chars+0x2c>
 80173ac:	6823      	ldr	r3, [r4, #0]
 80173ae:	f013 0310 	ands.w	r3, r3, #16
 80173b2:	d105      	bne.n	80173c0 <_scanf_chars+0xbc>
 80173b4:	68e2      	ldr	r2, [r4, #12]
 80173b6:	3201      	adds	r2, #1
 80173b8:	60e2      	str	r2, [r4, #12]
 80173ba:	69a2      	ldr	r2, [r4, #24]
 80173bc:	b102      	cbz	r2, 80173c0 <_scanf_chars+0xbc>
 80173be:	703b      	strb	r3, [r7, #0]
 80173c0:	6923      	ldr	r3, [r4, #16]
 80173c2:	441e      	add	r6, r3
 80173c4:	6126      	str	r6, [r4, #16]
 80173c6:	2000      	movs	r0, #0
 80173c8:	e7c6      	b.n	8017358 <_scanf_chars+0x54>
	...

080173cc <_scanf_i>:
 80173cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173d0:	469a      	mov	sl, r3
 80173d2:	4b74      	ldr	r3, [pc, #464]	; (80175a4 <_scanf_i+0x1d8>)
 80173d4:	460c      	mov	r4, r1
 80173d6:	4683      	mov	fp, r0
 80173d8:	4616      	mov	r6, r2
 80173da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80173de:	b087      	sub	sp, #28
 80173e0:	ab03      	add	r3, sp, #12
 80173e2:	68a7      	ldr	r7, [r4, #8]
 80173e4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80173e8:	4b6f      	ldr	r3, [pc, #444]	; (80175a8 <_scanf_i+0x1dc>)
 80173ea:	69a1      	ldr	r1, [r4, #24]
 80173ec:	4a6f      	ldr	r2, [pc, #444]	; (80175ac <_scanf_i+0x1e0>)
 80173ee:	2903      	cmp	r1, #3
 80173f0:	bf08      	it	eq
 80173f2:	461a      	moveq	r2, r3
 80173f4:	1e7b      	subs	r3, r7, #1
 80173f6:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 80173fa:	bf84      	itt	hi
 80173fc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8017400:	60a3      	strhi	r3, [r4, #8]
 8017402:	6823      	ldr	r3, [r4, #0]
 8017404:	9200      	str	r2, [sp, #0]
 8017406:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801740a:	bf88      	it	hi
 801740c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8017410:	f104 091c 	add.w	r9, r4, #28
 8017414:	6023      	str	r3, [r4, #0]
 8017416:	bf8c      	ite	hi
 8017418:	197f      	addhi	r7, r7, r5
 801741a:	2700      	movls	r7, #0
 801741c:	464b      	mov	r3, r9
 801741e:	f04f 0800 	mov.w	r8, #0
 8017422:	9301      	str	r3, [sp, #4]
 8017424:	6831      	ldr	r1, [r6, #0]
 8017426:	ab03      	add	r3, sp, #12
 8017428:	2202      	movs	r2, #2
 801742a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801742e:	7809      	ldrb	r1, [r1, #0]
 8017430:	f7e8 fee6 	bl	8000200 <memchr>
 8017434:	9b01      	ldr	r3, [sp, #4]
 8017436:	b330      	cbz	r0, 8017486 <_scanf_i+0xba>
 8017438:	f1b8 0f01 	cmp.w	r8, #1
 801743c:	d15a      	bne.n	80174f4 <_scanf_i+0x128>
 801743e:	6862      	ldr	r2, [r4, #4]
 8017440:	b92a      	cbnz	r2, 801744e <_scanf_i+0x82>
 8017442:	6822      	ldr	r2, [r4, #0]
 8017444:	2108      	movs	r1, #8
 8017446:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801744a:	6061      	str	r1, [r4, #4]
 801744c:	6022      	str	r2, [r4, #0]
 801744e:	6822      	ldr	r2, [r4, #0]
 8017450:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8017454:	6022      	str	r2, [r4, #0]
 8017456:	68a2      	ldr	r2, [r4, #8]
 8017458:	1e51      	subs	r1, r2, #1
 801745a:	60a1      	str	r1, [r4, #8]
 801745c:	b19a      	cbz	r2, 8017486 <_scanf_i+0xba>
 801745e:	6832      	ldr	r2, [r6, #0]
 8017460:	1c51      	adds	r1, r2, #1
 8017462:	6031      	str	r1, [r6, #0]
 8017464:	7812      	ldrb	r2, [r2, #0]
 8017466:	701a      	strb	r2, [r3, #0]
 8017468:	1c5d      	adds	r5, r3, #1
 801746a:	6873      	ldr	r3, [r6, #4]
 801746c:	3b01      	subs	r3, #1
 801746e:	2b00      	cmp	r3, #0
 8017470:	6073      	str	r3, [r6, #4]
 8017472:	dc07      	bgt.n	8017484 <_scanf_i+0xb8>
 8017474:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017478:	4631      	mov	r1, r6
 801747a:	4658      	mov	r0, fp
 801747c:	4798      	blx	r3
 801747e:	2800      	cmp	r0, #0
 8017480:	f040 8086 	bne.w	8017590 <_scanf_i+0x1c4>
 8017484:	462b      	mov	r3, r5
 8017486:	f108 0801 	add.w	r8, r8, #1
 801748a:	f1b8 0f03 	cmp.w	r8, #3
 801748e:	d1c8      	bne.n	8017422 <_scanf_i+0x56>
 8017490:	6862      	ldr	r2, [r4, #4]
 8017492:	b90a      	cbnz	r2, 8017498 <_scanf_i+0xcc>
 8017494:	220a      	movs	r2, #10
 8017496:	6062      	str	r2, [r4, #4]
 8017498:	6862      	ldr	r2, [r4, #4]
 801749a:	4945      	ldr	r1, [pc, #276]	; (80175b0 <_scanf_i+0x1e4>)
 801749c:	6960      	ldr	r0, [r4, #20]
 801749e:	9301      	str	r3, [sp, #4]
 80174a0:	1a89      	subs	r1, r1, r2
 80174a2:	f000 f887 	bl	80175b4 <__sccl>
 80174a6:	9b01      	ldr	r3, [sp, #4]
 80174a8:	f04f 0800 	mov.w	r8, #0
 80174ac:	461d      	mov	r5, r3
 80174ae:	68a3      	ldr	r3, [r4, #8]
 80174b0:	6822      	ldr	r2, [r4, #0]
 80174b2:	2b00      	cmp	r3, #0
 80174b4:	d03a      	beq.n	801752c <_scanf_i+0x160>
 80174b6:	6831      	ldr	r1, [r6, #0]
 80174b8:	6960      	ldr	r0, [r4, #20]
 80174ba:	f891 c000 	ldrb.w	ip, [r1]
 80174be:	f810 000c 	ldrb.w	r0, [r0, ip]
 80174c2:	2800      	cmp	r0, #0
 80174c4:	d032      	beq.n	801752c <_scanf_i+0x160>
 80174c6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80174ca:	d121      	bne.n	8017510 <_scanf_i+0x144>
 80174cc:	0510      	lsls	r0, r2, #20
 80174ce:	d51f      	bpl.n	8017510 <_scanf_i+0x144>
 80174d0:	f108 0801 	add.w	r8, r8, #1
 80174d4:	b117      	cbz	r7, 80174dc <_scanf_i+0x110>
 80174d6:	3301      	adds	r3, #1
 80174d8:	3f01      	subs	r7, #1
 80174da:	60a3      	str	r3, [r4, #8]
 80174dc:	6873      	ldr	r3, [r6, #4]
 80174de:	3b01      	subs	r3, #1
 80174e0:	2b00      	cmp	r3, #0
 80174e2:	6073      	str	r3, [r6, #4]
 80174e4:	dd1b      	ble.n	801751e <_scanf_i+0x152>
 80174e6:	6833      	ldr	r3, [r6, #0]
 80174e8:	3301      	adds	r3, #1
 80174ea:	6033      	str	r3, [r6, #0]
 80174ec:	68a3      	ldr	r3, [r4, #8]
 80174ee:	3b01      	subs	r3, #1
 80174f0:	60a3      	str	r3, [r4, #8]
 80174f2:	e7dc      	b.n	80174ae <_scanf_i+0xe2>
 80174f4:	f1b8 0f02 	cmp.w	r8, #2
 80174f8:	d1ad      	bne.n	8017456 <_scanf_i+0x8a>
 80174fa:	6822      	ldr	r2, [r4, #0]
 80174fc:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8017500:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8017504:	d1bf      	bne.n	8017486 <_scanf_i+0xba>
 8017506:	2110      	movs	r1, #16
 8017508:	6061      	str	r1, [r4, #4]
 801750a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801750e:	e7a1      	b.n	8017454 <_scanf_i+0x88>
 8017510:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8017514:	6022      	str	r2, [r4, #0]
 8017516:	780b      	ldrb	r3, [r1, #0]
 8017518:	702b      	strb	r3, [r5, #0]
 801751a:	3501      	adds	r5, #1
 801751c:	e7de      	b.n	80174dc <_scanf_i+0x110>
 801751e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017522:	4631      	mov	r1, r6
 8017524:	4658      	mov	r0, fp
 8017526:	4798      	blx	r3
 8017528:	2800      	cmp	r0, #0
 801752a:	d0df      	beq.n	80174ec <_scanf_i+0x120>
 801752c:	6823      	ldr	r3, [r4, #0]
 801752e:	05d9      	lsls	r1, r3, #23
 8017530:	d50c      	bpl.n	801754c <_scanf_i+0x180>
 8017532:	454d      	cmp	r5, r9
 8017534:	d908      	bls.n	8017548 <_scanf_i+0x17c>
 8017536:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801753a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801753e:	4632      	mov	r2, r6
 8017540:	4658      	mov	r0, fp
 8017542:	4798      	blx	r3
 8017544:	1e6f      	subs	r7, r5, #1
 8017546:	463d      	mov	r5, r7
 8017548:	454d      	cmp	r5, r9
 801754a:	d029      	beq.n	80175a0 <_scanf_i+0x1d4>
 801754c:	6822      	ldr	r2, [r4, #0]
 801754e:	f012 0210 	ands.w	r2, r2, #16
 8017552:	d113      	bne.n	801757c <_scanf_i+0x1b0>
 8017554:	702a      	strb	r2, [r5, #0]
 8017556:	6863      	ldr	r3, [r4, #4]
 8017558:	9e00      	ldr	r6, [sp, #0]
 801755a:	4649      	mov	r1, r9
 801755c:	4658      	mov	r0, fp
 801755e:	47b0      	blx	r6
 8017560:	f8da 3000 	ldr.w	r3, [sl]
 8017564:	6821      	ldr	r1, [r4, #0]
 8017566:	1d1a      	adds	r2, r3, #4
 8017568:	f8ca 2000 	str.w	r2, [sl]
 801756c:	f011 0f20 	tst.w	r1, #32
 8017570:	681b      	ldr	r3, [r3, #0]
 8017572:	d010      	beq.n	8017596 <_scanf_i+0x1ca>
 8017574:	6018      	str	r0, [r3, #0]
 8017576:	68e3      	ldr	r3, [r4, #12]
 8017578:	3301      	adds	r3, #1
 801757a:	60e3      	str	r3, [r4, #12]
 801757c:	eba5 0509 	sub.w	r5, r5, r9
 8017580:	44a8      	add	r8, r5
 8017582:	6925      	ldr	r5, [r4, #16]
 8017584:	4445      	add	r5, r8
 8017586:	6125      	str	r5, [r4, #16]
 8017588:	2000      	movs	r0, #0
 801758a:	b007      	add	sp, #28
 801758c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017590:	f04f 0800 	mov.w	r8, #0
 8017594:	e7ca      	b.n	801752c <_scanf_i+0x160>
 8017596:	07ca      	lsls	r2, r1, #31
 8017598:	bf4c      	ite	mi
 801759a:	8018      	strhmi	r0, [r3, #0]
 801759c:	6018      	strpl	r0, [r3, #0]
 801759e:	e7ea      	b.n	8017576 <_scanf_i+0x1aa>
 80175a0:	2001      	movs	r0, #1
 80175a2:	e7f2      	b.n	801758a <_scanf_i+0x1be>
 80175a4:	080196c8 	.word	0x080196c8
 80175a8:	08015189 	.word	0x08015189
 80175ac:	08017731 	.word	0x08017731
 80175b0:	080198b5 	.word	0x080198b5

080175b4 <__sccl>:
 80175b4:	b570      	push	{r4, r5, r6, lr}
 80175b6:	780b      	ldrb	r3, [r1, #0]
 80175b8:	2b5e      	cmp	r3, #94	; 0x5e
 80175ba:	bf13      	iteet	ne
 80175bc:	1c4a      	addne	r2, r1, #1
 80175be:	1c8a      	addeq	r2, r1, #2
 80175c0:	784b      	ldrbeq	r3, [r1, #1]
 80175c2:	2100      	movne	r1, #0
 80175c4:	bf08      	it	eq
 80175c6:	2101      	moveq	r1, #1
 80175c8:	1e44      	subs	r4, r0, #1
 80175ca:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 80175ce:	f804 1f01 	strb.w	r1, [r4, #1]!
 80175d2:	42ac      	cmp	r4, r5
 80175d4:	d1fb      	bne.n	80175ce <__sccl+0x1a>
 80175d6:	b913      	cbnz	r3, 80175de <__sccl+0x2a>
 80175d8:	3a01      	subs	r2, #1
 80175da:	4610      	mov	r0, r2
 80175dc:	bd70      	pop	{r4, r5, r6, pc}
 80175de:	f081 0401 	eor.w	r4, r1, #1
 80175e2:	54c4      	strb	r4, [r0, r3]
 80175e4:	1c51      	adds	r1, r2, #1
 80175e6:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 80175ea:	2d2d      	cmp	r5, #45	; 0x2d
 80175ec:	f101 36ff 	add.w	r6, r1, #4294967295
 80175f0:	460a      	mov	r2, r1
 80175f2:	d006      	beq.n	8017602 <__sccl+0x4e>
 80175f4:	2d5d      	cmp	r5, #93	; 0x5d
 80175f6:	d0f0      	beq.n	80175da <__sccl+0x26>
 80175f8:	b90d      	cbnz	r5, 80175fe <__sccl+0x4a>
 80175fa:	4632      	mov	r2, r6
 80175fc:	e7ed      	b.n	80175da <__sccl+0x26>
 80175fe:	462b      	mov	r3, r5
 8017600:	e7ef      	b.n	80175e2 <__sccl+0x2e>
 8017602:	780e      	ldrb	r6, [r1, #0]
 8017604:	2e5d      	cmp	r6, #93	; 0x5d
 8017606:	d0fa      	beq.n	80175fe <__sccl+0x4a>
 8017608:	42b3      	cmp	r3, r6
 801760a:	dcf8      	bgt.n	80175fe <__sccl+0x4a>
 801760c:	3301      	adds	r3, #1
 801760e:	429e      	cmp	r6, r3
 8017610:	54c4      	strb	r4, [r0, r3]
 8017612:	dcfb      	bgt.n	801760c <__sccl+0x58>
 8017614:	3102      	adds	r1, #2
 8017616:	e7e6      	b.n	80175e6 <__sccl+0x32>

08017618 <strncmp>:
 8017618:	b510      	push	{r4, lr}
 801761a:	b16a      	cbz	r2, 8017638 <strncmp+0x20>
 801761c:	3901      	subs	r1, #1
 801761e:	1884      	adds	r4, r0, r2
 8017620:	f810 3b01 	ldrb.w	r3, [r0], #1
 8017624:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8017628:	4293      	cmp	r3, r2
 801762a:	d103      	bne.n	8017634 <strncmp+0x1c>
 801762c:	42a0      	cmp	r0, r4
 801762e:	d001      	beq.n	8017634 <strncmp+0x1c>
 8017630:	2b00      	cmp	r3, #0
 8017632:	d1f5      	bne.n	8017620 <strncmp+0x8>
 8017634:	1a98      	subs	r0, r3, r2
 8017636:	bd10      	pop	{r4, pc}
 8017638:	4610      	mov	r0, r2
 801763a:	e7fc      	b.n	8017636 <strncmp+0x1e>

0801763c <_strtoul_l.isra.0>:
 801763c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017640:	4680      	mov	r8, r0
 8017642:	4689      	mov	r9, r1
 8017644:	4692      	mov	sl, r2
 8017646:	461e      	mov	r6, r3
 8017648:	460f      	mov	r7, r1
 801764a:	463d      	mov	r5, r7
 801764c:	9808      	ldr	r0, [sp, #32]
 801764e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017652:	f7fe ff17 	bl	8016484 <__locale_ctype_ptr_l>
 8017656:	4420      	add	r0, r4
 8017658:	7843      	ldrb	r3, [r0, #1]
 801765a:	f013 0308 	ands.w	r3, r3, #8
 801765e:	d130      	bne.n	80176c2 <_strtoul_l.isra.0+0x86>
 8017660:	2c2d      	cmp	r4, #45	; 0x2d
 8017662:	d130      	bne.n	80176c6 <_strtoul_l.isra.0+0x8a>
 8017664:	787c      	ldrb	r4, [r7, #1]
 8017666:	1cbd      	adds	r5, r7, #2
 8017668:	2101      	movs	r1, #1
 801766a:	2e00      	cmp	r6, #0
 801766c:	d05c      	beq.n	8017728 <_strtoul_l.isra.0+0xec>
 801766e:	2e10      	cmp	r6, #16
 8017670:	d109      	bne.n	8017686 <_strtoul_l.isra.0+0x4a>
 8017672:	2c30      	cmp	r4, #48	; 0x30
 8017674:	d107      	bne.n	8017686 <_strtoul_l.isra.0+0x4a>
 8017676:	782b      	ldrb	r3, [r5, #0]
 8017678:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801767c:	2b58      	cmp	r3, #88	; 0x58
 801767e:	d14e      	bne.n	801771e <_strtoul_l.isra.0+0xe2>
 8017680:	786c      	ldrb	r4, [r5, #1]
 8017682:	2610      	movs	r6, #16
 8017684:	3502      	adds	r5, #2
 8017686:	f04f 32ff 	mov.w	r2, #4294967295
 801768a:	2300      	movs	r3, #0
 801768c:	fbb2 f2f6 	udiv	r2, r2, r6
 8017690:	fb06 fc02 	mul.w	ip, r6, r2
 8017694:	ea6f 0c0c 	mvn.w	ip, ip
 8017698:	4618      	mov	r0, r3
 801769a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801769e:	2f09      	cmp	r7, #9
 80176a0:	d817      	bhi.n	80176d2 <_strtoul_l.isra.0+0x96>
 80176a2:	463c      	mov	r4, r7
 80176a4:	42a6      	cmp	r6, r4
 80176a6:	dd23      	ble.n	80176f0 <_strtoul_l.isra.0+0xb4>
 80176a8:	2b00      	cmp	r3, #0
 80176aa:	db1e      	blt.n	80176ea <_strtoul_l.isra.0+0xae>
 80176ac:	4282      	cmp	r2, r0
 80176ae:	d31c      	bcc.n	80176ea <_strtoul_l.isra.0+0xae>
 80176b0:	d101      	bne.n	80176b6 <_strtoul_l.isra.0+0x7a>
 80176b2:	45a4      	cmp	ip, r4
 80176b4:	db19      	blt.n	80176ea <_strtoul_l.isra.0+0xae>
 80176b6:	fb00 4006 	mla	r0, r0, r6, r4
 80176ba:	2301      	movs	r3, #1
 80176bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80176c0:	e7eb      	b.n	801769a <_strtoul_l.isra.0+0x5e>
 80176c2:	462f      	mov	r7, r5
 80176c4:	e7c1      	b.n	801764a <_strtoul_l.isra.0+0xe>
 80176c6:	2c2b      	cmp	r4, #43	; 0x2b
 80176c8:	bf04      	itt	eq
 80176ca:	1cbd      	addeq	r5, r7, #2
 80176cc:	787c      	ldrbeq	r4, [r7, #1]
 80176ce:	4619      	mov	r1, r3
 80176d0:	e7cb      	b.n	801766a <_strtoul_l.isra.0+0x2e>
 80176d2:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80176d6:	2f19      	cmp	r7, #25
 80176d8:	d801      	bhi.n	80176de <_strtoul_l.isra.0+0xa2>
 80176da:	3c37      	subs	r4, #55	; 0x37
 80176dc:	e7e2      	b.n	80176a4 <_strtoul_l.isra.0+0x68>
 80176de:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80176e2:	2f19      	cmp	r7, #25
 80176e4:	d804      	bhi.n	80176f0 <_strtoul_l.isra.0+0xb4>
 80176e6:	3c57      	subs	r4, #87	; 0x57
 80176e8:	e7dc      	b.n	80176a4 <_strtoul_l.isra.0+0x68>
 80176ea:	f04f 33ff 	mov.w	r3, #4294967295
 80176ee:	e7e5      	b.n	80176bc <_strtoul_l.isra.0+0x80>
 80176f0:	2b00      	cmp	r3, #0
 80176f2:	da09      	bge.n	8017708 <_strtoul_l.isra.0+0xcc>
 80176f4:	2322      	movs	r3, #34	; 0x22
 80176f6:	f8c8 3000 	str.w	r3, [r8]
 80176fa:	f04f 30ff 	mov.w	r0, #4294967295
 80176fe:	f1ba 0f00 	cmp.w	sl, #0
 8017702:	d107      	bne.n	8017714 <_strtoul_l.isra.0+0xd8>
 8017704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017708:	b101      	cbz	r1, 801770c <_strtoul_l.isra.0+0xd0>
 801770a:	4240      	negs	r0, r0
 801770c:	f1ba 0f00 	cmp.w	sl, #0
 8017710:	d0f8      	beq.n	8017704 <_strtoul_l.isra.0+0xc8>
 8017712:	b10b      	cbz	r3, 8017718 <_strtoul_l.isra.0+0xdc>
 8017714:	f105 39ff 	add.w	r9, r5, #4294967295
 8017718:	f8ca 9000 	str.w	r9, [sl]
 801771c:	e7f2      	b.n	8017704 <_strtoul_l.isra.0+0xc8>
 801771e:	2430      	movs	r4, #48	; 0x30
 8017720:	2e00      	cmp	r6, #0
 8017722:	d1b0      	bne.n	8017686 <_strtoul_l.isra.0+0x4a>
 8017724:	2608      	movs	r6, #8
 8017726:	e7ae      	b.n	8017686 <_strtoul_l.isra.0+0x4a>
 8017728:	2c30      	cmp	r4, #48	; 0x30
 801772a:	d0a4      	beq.n	8017676 <_strtoul_l.isra.0+0x3a>
 801772c:	260a      	movs	r6, #10
 801772e:	e7aa      	b.n	8017686 <_strtoul_l.isra.0+0x4a>

08017730 <_strtoul_r>:
 8017730:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017732:	4c06      	ldr	r4, [pc, #24]	; (801774c <_strtoul_r+0x1c>)
 8017734:	4d06      	ldr	r5, [pc, #24]	; (8017750 <_strtoul_r+0x20>)
 8017736:	6824      	ldr	r4, [r4, #0]
 8017738:	6a24      	ldr	r4, [r4, #32]
 801773a:	2c00      	cmp	r4, #0
 801773c:	bf08      	it	eq
 801773e:	462c      	moveq	r4, r5
 8017740:	9400      	str	r4, [sp, #0]
 8017742:	f7ff ff7b 	bl	801763c <_strtoul_l.isra.0>
 8017746:	b003      	add	sp, #12
 8017748:	bd30      	pop	{r4, r5, pc}
 801774a:	bf00      	nop
 801774c:	20000e34 	.word	0x20000e34
 8017750:	20000e98 	.word	0x20000e98

08017754 <__submore>:
 8017754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017758:	460c      	mov	r4, r1
 801775a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801775c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017760:	4299      	cmp	r1, r3
 8017762:	d11d      	bne.n	80177a0 <__submore+0x4c>
 8017764:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017768:	f7fb ff34 	bl	80135d4 <_malloc_r>
 801776c:	b918      	cbnz	r0, 8017776 <__submore+0x22>
 801776e:	f04f 30ff 	mov.w	r0, #4294967295
 8017772:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017776:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801777a:	63a3      	str	r3, [r4, #56]	; 0x38
 801777c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8017780:	6360      	str	r0, [r4, #52]	; 0x34
 8017782:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8017786:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801778a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801778e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8017792:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8017796:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801779a:	6020      	str	r0, [r4, #0]
 801779c:	2000      	movs	r0, #0
 801779e:	e7e8      	b.n	8017772 <__submore+0x1e>
 80177a0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80177a2:	0077      	lsls	r7, r6, #1
 80177a4:	463a      	mov	r2, r7
 80177a6:	f000 f81c 	bl	80177e2 <_realloc_r>
 80177aa:	4605      	mov	r5, r0
 80177ac:	2800      	cmp	r0, #0
 80177ae:	d0de      	beq.n	801776e <__submore+0x1a>
 80177b0:	eb00 0806 	add.w	r8, r0, r6
 80177b4:	4601      	mov	r1, r0
 80177b6:	4632      	mov	r2, r6
 80177b8:	4640      	mov	r0, r8
 80177ba:	f7fb fe91 	bl	80134e0 <memcpy>
 80177be:	f8c4 8000 	str.w	r8, [r4]
 80177c2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80177c6:	e7e9      	b.n	801779c <__submore+0x48>

080177c8 <__ascii_wctomb>:
 80177c8:	b149      	cbz	r1, 80177de <__ascii_wctomb+0x16>
 80177ca:	2aff      	cmp	r2, #255	; 0xff
 80177cc:	bf85      	ittet	hi
 80177ce:	238a      	movhi	r3, #138	; 0x8a
 80177d0:	6003      	strhi	r3, [r0, #0]
 80177d2:	700a      	strbls	r2, [r1, #0]
 80177d4:	f04f 30ff 	movhi.w	r0, #4294967295
 80177d8:	bf98      	it	ls
 80177da:	2001      	movls	r0, #1
 80177dc:	4770      	bx	lr
 80177de:	4608      	mov	r0, r1
 80177e0:	4770      	bx	lr

080177e2 <_realloc_r>:
 80177e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80177e4:	4607      	mov	r7, r0
 80177e6:	4614      	mov	r4, r2
 80177e8:	460e      	mov	r6, r1
 80177ea:	b921      	cbnz	r1, 80177f6 <_realloc_r+0x14>
 80177ec:	4611      	mov	r1, r2
 80177ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80177f2:	f7fb beef 	b.w	80135d4 <_malloc_r>
 80177f6:	b922      	cbnz	r2, 8017802 <_realloc_r+0x20>
 80177f8:	f7fb fe9e 	bl	8013538 <_free_r>
 80177fc:	4625      	mov	r5, r4
 80177fe:	4628      	mov	r0, r5
 8017800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017802:	f000 f814 	bl	801782e <_malloc_usable_size_r>
 8017806:	42a0      	cmp	r0, r4
 8017808:	d20f      	bcs.n	801782a <_realloc_r+0x48>
 801780a:	4621      	mov	r1, r4
 801780c:	4638      	mov	r0, r7
 801780e:	f7fb fee1 	bl	80135d4 <_malloc_r>
 8017812:	4605      	mov	r5, r0
 8017814:	2800      	cmp	r0, #0
 8017816:	d0f2      	beq.n	80177fe <_realloc_r+0x1c>
 8017818:	4631      	mov	r1, r6
 801781a:	4622      	mov	r2, r4
 801781c:	f7fb fe60 	bl	80134e0 <memcpy>
 8017820:	4631      	mov	r1, r6
 8017822:	4638      	mov	r0, r7
 8017824:	f7fb fe88 	bl	8013538 <_free_r>
 8017828:	e7e9      	b.n	80177fe <_realloc_r+0x1c>
 801782a:	4635      	mov	r5, r6
 801782c:	e7e7      	b.n	80177fe <_realloc_r+0x1c>

0801782e <_malloc_usable_size_r>:
 801782e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017832:	1f18      	subs	r0, r3, #4
 8017834:	2b00      	cmp	r3, #0
 8017836:	bfbc      	itt	lt
 8017838:	580b      	ldrlt	r3, [r1, r0]
 801783a:	18c0      	addlt	r0, r0, r3
 801783c:	4770      	bx	lr
	...

08017840 <ceil>:
 8017840:	ec51 0b10 	vmov	r0, r1, d0
 8017844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017848:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801784c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8017850:	2e13      	cmp	r6, #19
 8017852:	460c      	mov	r4, r1
 8017854:	ee10 5a10 	vmov	r5, s0
 8017858:	4680      	mov	r8, r0
 801785a:	dc30      	bgt.n	80178be <ceil+0x7e>
 801785c:	2e00      	cmp	r6, #0
 801785e:	da12      	bge.n	8017886 <ceil+0x46>
 8017860:	a333      	add	r3, pc, #204	; (adr r3, 8017930 <ceil+0xf0>)
 8017862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017866:	f7e8 fd21 	bl	80002ac <__adddf3>
 801786a:	2200      	movs	r2, #0
 801786c:	2300      	movs	r3, #0
 801786e:	f7e9 f963 	bl	8000b38 <__aeabi_dcmpgt>
 8017872:	b128      	cbz	r0, 8017880 <ceil+0x40>
 8017874:	2c00      	cmp	r4, #0
 8017876:	db55      	blt.n	8017924 <ceil+0xe4>
 8017878:	432c      	orrs	r4, r5
 801787a:	d057      	beq.n	801792c <ceil+0xec>
 801787c:	4c2e      	ldr	r4, [pc, #184]	; (8017938 <ceil+0xf8>)
 801787e:	2500      	movs	r5, #0
 8017880:	4621      	mov	r1, r4
 8017882:	4628      	mov	r0, r5
 8017884:	e025      	b.n	80178d2 <ceil+0x92>
 8017886:	4f2d      	ldr	r7, [pc, #180]	; (801793c <ceil+0xfc>)
 8017888:	4137      	asrs	r7, r6
 801788a:	ea01 0307 	and.w	r3, r1, r7
 801788e:	4303      	orrs	r3, r0
 8017890:	d01f      	beq.n	80178d2 <ceil+0x92>
 8017892:	a327      	add	r3, pc, #156	; (adr r3, 8017930 <ceil+0xf0>)
 8017894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017898:	f7e8 fd08 	bl	80002ac <__adddf3>
 801789c:	2200      	movs	r2, #0
 801789e:	2300      	movs	r3, #0
 80178a0:	f7e9 f94a 	bl	8000b38 <__aeabi_dcmpgt>
 80178a4:	2800      	cmp	r0, #0
 80178a6:	d0eb      	beq.n	8017880 <ceil+0x40>
 80178a8:	2c00      	cmp	r4, #0
 80178aa:	bfc2      	ittt	gt
 80178ac:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 80178b0:	fa43 f606 	asrgt.w	r6, r3, r6
 80178b4:	19a4      	addgt	r4, r4, r6
 80178b6:	ea24 0407 	bic.w	r4, r4, r7
 80178ba:	2500      	movs	r5, #0
 80178bc:	e7e0      	b.n	8017880 <ceil+0x40>
 80178be:	2e33      	cmp	r6, #51	; 0x33
 80178c0:	dd0b      	ble.n	80178da <ceil+0x9a>
 80178c2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80178c6:	d104      	bne.n	80178d2 <ceil+0x92>
 80178c8:	ee10 2a10 	vmov	r2, s0
 80178cc:	460b      	mov	r3, r1
 80178ce:	f7e8 fced 	bl	80002ac <__adddf3>
 80178d2:	ec41 0b10 	vmov	d0, r0, r1
 80178d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80178da:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80178de:	f04f 33ff 	mov.w	r3, #4294967295
 80178e2:	fa23 f707 	lsr.w	r7, r3, r7
 80178e6:	4207      	tst	r7, r0
 80178e8:	d0f3      	beq.n	80178d2 <ceil+0x92>
 80178ea:	a311      	add	r3, pc, #68	; (adr r3, 8017930 <ceil+0xf0>)
 80178ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178f0:	f7e8 fcdc 	bl	80002ac <__adddf3>
 80178f4:	2200      	movs	r2, #0
 80178f6:	2300      	movs	r3, #0
 80178f8:	f7e9 f91e 	bl	8000b38 <__aeabi_dcmpgt>
 80178fc:	2800      	cmp	r0, #0
 80178fe:	d0bf      	beq.n	8017880 <ceil+0x40>
 8017900:	2c00      	cmp	r4, #0
 8017902:	dd02      	ble.n	801790a <ceil+0xca>
 8017904:	2e14      	cmp	r6, #20
 8017906:	d103      	bne.n	8017910 <ceil+0xd0>
 8017908:	3401      	adds	r4, #1
 801790a:	ea25 0507 	bic.w	r5, r5, r7
 801790e:	e7b7      	b.n	8017880 <ceil+0x40>
 8017910:	2301      	movs	r3, #1
 8017912:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8017916:	fa03 f606 	lsl.w	r6, r3, r6
 801791a:	4435      	add	r5, r6
 801791c:	4545      	cmp	r5, r8
 801791e:	bf38      	it	cc
 8017920:	18e4      	addcc	r4, r4, r3
 8017922:	e7f2      	b.n	801790a <ceil+0xca>
 8017924:	2500      	movs	r5, #0
 8017926:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801792a:	e7a9      	b.n	8017880 <ceil+0x40>
 801792c:	4625      	mov	r5, r4
 801792e:	e7a7      	b.n	8017880 <ceil+0x40>
 8017930:	8800759c 	.word	0x8800759c
 8017934:	7e37e43c 	.word	0x7e37e43c
 8017938:	3ff00000 	.word	0x3ff00000
 801793c:	000fffff 	.word	0x000fffff

08017940 <cos>:
 8017940:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017942:	ec51 0b10 	vmov	r0, r1, d0
 8017946:	4a1e      	ldr	r2, [pc, #120]	; (80179c0 <cos+0x80>)
 8017948:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801794c:	4293      	cmp	r3, r2
 801794e:	dc06      	bgt.n	801795e <cos+0x1e>
 8017950:	ed9f 1b19 	vldr	d1, [pc, #100]	; 80179b8 <cos+0x78>
 8017954:	f000 fcec 	bl	8018330 <__kernel_cos>
 8017958:	ec51 0b10 	vmov	r0, r1, d0
 801795c:	e007      	b.n	801796e <cos+0x2e>
 801795e:	4a19      	ldr	r2, [pc, #100]	; (80179c4 <cos+0x84>)
 8017960:	4293      	cmp	r3, r2
 8017962:	dd09      	ble.n	8017978 <cos+0x38>
 8017964:	ee10 2a10 	vmov	r2, s0
 8017968:	460b      	mov	r3, r1
 801796a:	f7e8 fc9d 	bl	80002a8 <__aeabi_dsub>
 801796e:	ec41 0b10 	vmov	d0, r0, r1
 8017972:	b005      	add	sp, #20
 8017974:	f85d fb04 	ldr.w	pc, [sp], #4
 8017978:	4668      	mov	r0, sp
 801797a:	f000 fa35 	bl	8017de8 <__ieee754_rem_pio2>
 801797e:	f000 0003 	and.w	r0, r0, #3
 8017982:	2801      	cmp	r0, #1
 8017984:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017988:	ed9d 0b00 	vldr	d0, [sp]
 801798c:	d007      	beq.n	801799e <cos+0x5e>
 801798e:	2802      	cmp	r0, #2
 8017990:	d00e      	beq.n	80179b0 <cos+0x70>
 8017992:	2800      	cmp	r0, #0
 8017994:	d0de      	beq.n	8017954 <cos+0x14>
 8017996:	2001      	movs	r0, #1
 8017998:	f001 f8d2 	bl	8018b40 <__kernel_sin>
 801799c:	e7dc      	b.n	8017958 <cos+0x18>
 801799e:	f001 f8cf 	bl	8018b40 <__kernel_sin>
 80179a2:	ec53 2b10 	vmov	r2, r3, d0
 80179a6:	ee10 0a10 	vmov	r0, s0
 80179aa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80179ae:	e7de      	b.n	801796e <cos+0x2e>
 80179b0:	f000 fcbe 	bl	8018330 <__kernel_cos>
 80179b4:	e7f5      	b.n	80179a2 <cos+0x62>
 80179b6:	bf00      	nop
	...
 80179c0:	3fe921fb 	.word	0x3fe921fb
 80179c4:	7fefffff 	.word	0x7fefffff

080179c8 <round>:
 80179c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80179ca:	ec57 6b10 	vmov	r6, r7, d0
 80179ce:	f3c7 500a 	ubfx	r0, r7, #20, #11
 80179d2:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 80179d6:	2c13      	cmp	r4, #19
 80179d8:	463b      	mov	r3, r7
 80179da:	463d      	mov	r5, r7
 80179dc:	dc17      	bgt.n	8017a0e <round+0x46>
 80179de:	2c00      	cmp	r4, #0
 80179e0:	da09      	bge.n	80179f6 <round+0x2e>
 80179e2:	3401      	adds	r4, #1
 80179e4:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 80179e8:	d103      	bne.n	80179f2 <round+0x2a>
 80179ea:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80179ee:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80179f2:	2100      	movs	r1, #0
 80179f4:	e02c      	b.n	8017a50 <round+0x88>
 80179f6:	4a18      	ldr	r2, [pc, #96]	; (8017a58 <round+0x90>)
 80179f8:	4122      	asrs	r2, r4
 80179fa:	4217      	tst	r7, r2
 80179fc:	d100      	bne.n	8017a00 <round+0x38>
 80179fe:	b19e      	cbz	r6, 8017a28 <round+0x60>
 8017a00:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8017a04:	4123      	asrs	r3, r4
 8017a06:	442b      	add	r3, r5
 8017a08:	ea23 0302 	bic.w	r3, r3, r2
 8017a0c:	e7f1      	b.n	80179f2 <round+0x2a>
 8017a0e:	2c33      	cmp	r4, #51	; 0x33
 8017a10:	dd0d      	ble.n	8017a2e <round+0x66>
 8017a12:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8017a16:	d107      	bne.n	8017a28 <round+0x60>
 8017a18:	4630      	mov	r0, r6
 8017a1a:	4639      	mov	r1, r7
 8017a1c:	ee10 2a10 	vmov	r2, s0
 8017a20:	f7e8 fc44 	bl	80002ac <__adddf3>
 8017a24:	4606      	mov	r6, r0
 8017a26:	460f      	mov	r7, r1
 8017a28:	ec47 6b10 	vmov	d0, r6, r7
 8017a2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017a2e:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 8017a32:	f04f 30ff 	mov.w	r0, #4294967295
 8017a36:	40d0      	lsrs	r0, r2
 8017a38:	4206      	tst	r6, r0
 8017a3a:	d0f5      	beq.n	8017a28 <round+0x60>
 8017a3c:	2201      	movs	r2, #1
 8017a3e:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8017a42:	fa02 f404 	lsl.w	r4, r2, r4
 8017a46:	1931      	adds	r1, r6, r4
 8017a48:	bf28      	it	cs
 8017a4a:	189b      	addcs	r3, r3, r2
 8017a4c:	ea21 0100 	bic.w	r1, r1, r0
 8017a50:	461f      	mov	r7, r3
 8017a52:	460e      	mov	r6, r1
 8017a54:	e7e8      	b.n	8017a28 <round+0x60>
 8017a56:	bf00      	nop
 8017a58:	000fffff 	.word	0x000fffff
 8017a5c:	00000000 	.word	0x00000000

08017a60 <sin>:
 8017a60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017a62:	ec51 0b10 	vmov	r0, r1, d0
 8017a66:	4a20      	ldr	r2, [pc, #128]	; (8017ae8 <sin+0x88>)
 8017a68:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8017a6c:	4293      	cmp	r3, r2
 8017a6e:	dc07      	bgt.n	8017a80 <sin+0x20>
 8017a70:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8017ae0 <sin+0x80>
 8017a74:	2000      	movs	r0, #0
 8017a76:	f001 f863 	bl	8018b40 <__kernel_sin>
 8017a7a:	ec51 0b10 	vmov	r0, r1, d0
 8017a7e:	e007      	b.n	8017a90 <sin+0x30>
 8017a80:	4a1a      	ldr	r2, [pc, #104]	; (8017aec <sin+0x8c>)
 8017a82:	4293      	cmp	r3, r2
 8017a84:	dd09      	ble.n	8017a9a <sin+0x3a>
 8017a86:	ee10 2a10 	vmov	r2, s0
 8017a8a:	460b      	mov	r3, r1
 8017a8c:	f7e8 fc0c 	bl	80002a8 <__aeabi_dsub>
 8017a90:	ec41 0b10 	vmov	d0, r0, r1
 8017a94:	b005      	add	sp, #20
 8017a96:	f85d fb04 	ldr.w	pc, [sp], #4
 8017a9a:	4668      	mov	r0, sp
 8017a9c:	f000 f9a4 	bl	8017de8 <__ieee754_rem_pio2>
 8017aa0:	f000 0003 	and.w	r0, r0, #3
 8017aa4:	2801      	cmp	r0, #1
 8017aa6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017aaa:	ed9d 0b00 	vldr	d0, [sp]
 8017aae:	d004      	beq.n	8017aba <sin+0x5a>
 8017ab0:	2802      	cmp	r0, #2
 8017ab2:	d005      	beq.n	8017ac0 <sin+0x60>
 8017ab4:	b970      	cbnz	r0, 8017ad4 <sin+0x74>
 8017ab6:	2001      	movs	r0, #1
 8017ab8:	e7dd      	b.n	8017a76 <sin+0x16>
 8017aba:	f000 fc39 	bl	8018330 <__kernel_cos>
 8017abe:	e7dc      	b.n	8017a7a <sin+0x1a>
 8017ac0:	2001      	movs	r0, #1
 8017ac2:	f001 f83d 	bl	8018b40 <__kernel_sin>
 8017ac6:	ec53 2b10 	vmov	r2, r3, d0
 8017aca:	ee10 0a10 	vmov	r0, s0
 8017ace:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8017ad2:	e7dd      	b.n	8017a90 <sin+0x30>
 8017ad4:	f000 fc2c 	bl	8018330 <__kernel_cos>
 8017ad8:	e7f5      	b.n	8017ac6 <sin+0x66>
 8017ada:	bf00      	nop
 8017adc:	f3af 8000 	nop.w
	...
 8017ae8:	3fe921fb 	.word	0x3fe921fb
 8017aec:	7fefffff 	.word	0x7fefffff

08017af0 <ceilf>:
 8017af0:	ee10 3a10 	vmov	r3, s0
 8017af4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8017af8:	0dca      	lsrs	r2, r1, #23
 8017afa:	3a7f      	subs	r2, #127	; 0x7f
 8017afc:	2a16      	cmp	r2, #22
 8017afe:	dc2a      	bgt.n	8017b56 <ceilf+0x66>
 8017b00:	2a00      	cmp	r2, #0
 8017b02:	da11      	bge.n	8017b28 <ceilf+0x38>
 8017b04:	eddf 7a18 	vldr	s15, [pc, #96]	; 8017b68 <ceilf+0x78>
 8017b08:	ee30 0a27 	vadd.f32	s0, s0, s15
 8017b0c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8017b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b14:	dd05      	ble.n	8017b22 <ceilf+0x32>
 8017b16:	2b00      	cmp	r3, #0
 8017b18:	db23      	blt.n	8017b62 <ceilf+0x72>
 8017b1a:	2900      	cmp	r1, #0
 8017b1c:	bf18      	it	ne
 8017b1e:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 8017b22:	ee00 3a10 	vmov	s0, r3
 8017b26:	4770      	bx	lr
 8017b28:	4910      	ldr	r1, [pc, #64]	; (8017b6c <ceilf+0x7c>)
 8017b2a:	4111      	asrs	r1, r2
 8017b2c:	420b      	tst	r3, r1
 8017b2e:	d0fa      	beq.n	8017b26 <ceilf+0x36>
 8017b30:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8017b68 <ceilf+0x78>
 8017b34:	ee30 0a27 	vadd.f32	s0, s0, s15
 8017b38:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8017b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b40:	ddef      	ble.n	8017b22 <ceilf+0x32>
 8017b42:	2b00      	cmp	r3, #0
 8017b44:	bfc2      	ittt	gt
 8017b46:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 8017b4a:	fa40 f202 	asrgt.w	r2, r0, r2
 8017b4e:	189b      	addgt	r3, r3, r2
 8017b50:	ea23 0301 	bic.w	r3, r3, r1
 8017b54:	e7e5      	b.n	8017b22 <ceilf+0x32>
 8017b56:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8017b5a:	d3e4      	bcc.n	8017b26 <ceilf+0x36>
 8017b5c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8017b60:	4770      	bx	lr
 8017b62:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8017b66:	e7dc      	b.n	8017b22 <ceilf+0x32>
 8017b68:	7149f2ca 	.word	0x7149f2ca
 8017b6c:	007fffff 	.word	0x007fffff

08017b70 <atan2>:
 8017b70:	f000 b85a 	b.w	8017c28 <__ieee754_atan2>

08017b74 <sqrt>:
 8017b74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017b78:	ed2d 8b02 	vpush	{d8}
 8017b7c:	b08b      	sub	sp, #44	; 0x2c
 8017b7e:	ec55 4b10 	vmov	r4, r5, d0
 8017b82:	f000 fb23 	bl	80181cc <__ieee754_sqrt>
 8017b86:	4b26      	ldr	r3, [pc, #152]	; (8017c20 <sqrt+0xac>)
 8017b88:	eeb0 8a40 	vmov.f32	s16, s0
 8017b8c:	eef0 8a60 	vmov.f32	s17, s1
 8017b90:	f993 6000 	ldrsb.w	r6, [r3]
 8017b94:	1c73      	adds	r3, r6, #1
 8017b96:	d02a      	beq.n	8017bee <sqrt+0x7a>
 8017b98:	4622      	mov	r2, r4
 8017b9a:	462b      	mov	r3, r5
 8017b9c:	4620      	mov	r0, r4
 8017b9e:	4629      	mov	r1, r5
 8017ba0:	f7e8 ffd4 	bl	8000b4c <__aeabi_dcmpun>
 8017ba4:	4607      	mov	r7, r0
 8017ba6:	bb10      	cbnz	r0, 8017bee <sqrt+0x7a>
 8017ba8:	f04f 0800 	mov.w	r8, #0
 8017bac:	f04f 0900 	mov.w	r9, #0
 8017bb0:	4642      	mov	r2, r8
 8017bb2:	464b      	mov	r3, r9
 8017bb4:	4620      	mov	r0, r4
 8017bb6:	4629      	mov	r1, r5
 8017bb8:	f7e8 ffa0 	bl	8000afc <__aeabi_dcmplt>
 8017bbc:	b1b8      	cbz	r0, 8017bee <sqrt+0x7a>
 8017bbe:	2301      	movs	r3, #1
 8017bc0:	9300      	str	r3, [sp, #0]
 8017bc2:	4b18      	ldr	r3, [pc, #96]	; (8017c24 <sqrt+0xb0>)
 8017bc4:	9301      	str	r3, [sp, #4]
 8017bc6:	9708      	str	r7, [sp, #32]
 8017bc8:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8017bcc:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8017bd0:	b9b6      	cbnz	r6, 8017c00 <sqrt+0x8c>
 8017bd2:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8017bd6:	4668      	mov	r0, sp
 8017bd8:	f001 fa9e 	bl	8019118 <matherr>
 8017bdc:	b1d0      	cbz	r0, 8017c14 <sqrt+0xa0>
 8017bde:	9b08      	ldr	r3, [sp, #32]
 8017be0:	b11b      	cbz	r3, 8017bea <sqrt+0x76>
 8017be2:	f7fb fc43 	bl	801346c <__errno>
 8017be6:	9b08      	ldr	r3, [sp, #32]
 8017be8:	6003      	str	r3, [r0, #0]
 8017bea:	ed9d 8b06 	vldr	d8, [sp, #24]
 8017bee:	eeb0 0a48 	vmov.f32	s0, s16
 8017bf2:	eef0 0a68 	vmov.f32	s1, s17
 8017bf6:	b00b      	add	sp, #44	; 0x2c
 8017bf8:	ecbd 8b02 	vpop	{d8}
 8017bfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017c00:	4642      	mov	r2, r8
 8017c02:	464b      	mov	r3, r9
 8017c04:	4640      	mov	r0, r8
 8017c06:	4649      	mov	r1, r9
 8017c08:	f7e8 fe30 	bl	800086c <__aeabi_ddiv>
 8017c0c:	2e02      	cmp	r6, #2
 8017c0e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8017c12:	d1e0      	bne.n	8017bd6 <sqrt+0x62>
 8017c14:	f7fb fc2a 	bl	801346c <__errno>
 8017c18:	2321      	movs	r3, #33	; 0x21
 8017c1a:	6003      	str	r3, [r0, #0]
 8017c1c:	e7df      	b.n	8017bde <sqrt+0x6a>
 8017c1e:	bf00      	nop
 8017c20:	20001004 	.word	0x20001004
 8017c24:	08019a24 	.word	0x08019a24

08017c28 <__ieee754_atan2>:
 8017c28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017c2c:	ec57 6b11 	vmov	r6, r7, d1
 8017c30:	4273      	negs	r3, r6
 8017c32:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8017c36:	4333      	orrs	r3, r6
 8017c38:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8017de0 <__ieee754_atan2+0x1b8>
 8017c3c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8017c40:	4573      	cmp	r3, lr
 8017c42:	ec51 0b10 	vmov	r0, r1, d0
 8017c46:	ee11 8a10 	vmov	r8, s2
 8017c4a:	d80a      	bhi.n	8017c62 <__ieee754_atan2+0x3a>
 8017c4c:	4244      	negs	r4, r0
 8017c4e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8017c52:	4304      	orrs	r4, r0
 8017c54:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8017c58:	4574      	cmp	r4, lr
 8017c5a:	468c      	mov	ip, r1
 8017c5c:	ee10 9a10 	vmov	r9, s0
 8017c60:	d907      	bls.n	8017c72 <__ieee754_atan2+0x4a>
 8017c62:	4632      	mov	r2, r6
 8017c64:	463b      	mov	r3, r7
 8017c66:	f7e8 fb21 	bl	80002ac <__adddf3>
 8017c6a:	ec41 0b10 	vmov	d0, r0, r1
 8017c6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017c72:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8017c76:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8017c7a:	4334      	orrs	r4, r6
 8017c7c:	d103      	bne.n	8017c86 <__ieee754_atan2+0x5e>
 8017c7e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017c82:	f001 b819 	b.w	8018cb8 <atan>
 8017c86:	17bc      	asrs	r4, r7, #30
 8017c88:	f004 0402 	and.w	r4, r4, #2
 8017c8c:	ea53 0909 	orrs.w	r9, r3, r9
 8017c90:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8017c94:	d107      	bne.n	8017ca6 <__ieee754_atan2+0x7e>
 8017c96:	2c02      	cmp	r4, #2
 8017c98:	d073      	beq.n	8017d82 <__ieee754_atan2+0x15a>
 8017c9a:	2c03      	cmp	r4, #3
 8017c9c:	d1e5      	bne.n	8017c6a <__ieee754_atan2+0x42>
 8017c9e:	a13e      	add	r1, pc, #248	; (adr r1, 8017d98 <__ieee754_atan2+0x170>)
 8017ca0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017ca4:	e7e1      	b.n	8017c6a <__ieee754_atan2+0x42>
 8017ca6:	ea52 0808 	orrs.w	r8, r2, r8
 8017caa:	d106      	bne.n	8017cba <__ieee754_atan2+0x92>
 8017cac:	f1bc 0f00 	cmp.w	ip, #0
 8017cb0:	da6b      	bge.n	8017d8a <__ieee754_atan2+0x162>
 8017cb2:	a13b      	add	r1, pc, #236	; (adr r1, 8017da0 <__ieee754_atan2+0x178>)
 8017cb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017cb8:	e7d7      	b.n	8017c6a <__ieee754_atan2+0x42>
 8017cba:	4572      	cmp	r2, lr
 8017cbc:	d120      	bne.n	8017d00 <__ieee754_atan2+0xd8>
 8017cbe:	4293      	cmp	r3, r2
 8017cc0:	d111      	bne.n	8017ce6 <__ieee754_atan2+0xbe>
 8017cc2:	2c02      	cmp	r4, #2
 8017cc4:	d007      	beq.n	8017cd6 <__ieee754_atan2+0xae>
 8017cc6:	2c03      	cmp	r4, #3
 8017cc8:	d009      	beq.n	8017cde <__ieee754_atan2+0xb6>
 8017cca:	2c01      	cmp	r4, #1
 8017ccc:	d155      	bne.n	8017d7a <__ieee754_atan2+0x152>
 8017cce:	a136      	add	r1, pc, #216	; (adr r1, 8017da8 <__ieee754_atan2+0x180>)
 8017cd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017cd4:	e7c9      	b.n	8017c6a <__ieee754_atan2+0x42>
 8017cd6:	a136      	add	r1, pc, #216	; (adr r1, 8017db0 <__ieee754_atan2+0x188>)
 8017cd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017cdc:	e7c5      	b.n	8017c6a <__ieee754_atan2+0x42>
 8017cde:	a136      	add	r1, pc, #216	; (adr r1, 8017db8 <__ieee754_atan2+0x190>)
 8017ce0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017ce4:	e7c1      	b.n	8017c6a <__ieee754_atan2+0x42>
 8017ce6:	2c02      	cmp	r4, #2
 8017ce8:	d04b      	beq.n	8017d82 <__ieee754_atan2+0x15a>
 8017cea:	2c03      	cmp	r4, #3
 8017cec:	d0d7      	beq.n	8017c9e <__ieee754_atan2+0x76>
 8017cee:	2c01      	cmp	r4, #1
 8017cf0:	f04f 0000 	mov.w	r0, #0
 8017cf4:	d102      	bne.n	8017cfc <__ieee754_atan2+0xd4>
 8017cf6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8017cfa:	e7b6      	b.n	8017c6a <__ieee754_atan2+0x42>
 8017cfc:	2100      	movs	r1, #0
 8017cfe:	e7b4      	b.n	8017c6a <__ieee754_atan2+0x42>
 8017d00:	4573      	cmp	r3, lr
 8017d02:	d0d3      	beq.n	8017cac <__ieee754_atan2+0x84>
 8017d04:	1a9b      	subs	r3, r3, r2
 8017d06:	151b      	asrs	r3, r3, #20
 8017d08:	2b3c      	cmp	r3, #60	; 0x3c
 8017d0a:	dc1e      	bgt.n	8017d4a <__ieee754_atan2+0x122>
 8017d0c:	2f00      	cmp	r7, #0
 8017d0e:	da01      	bge.n	8017d14 <__ieee754_atan2+0xec>
 8017d10:	333c      	adds	r3, #60	; 0x3c
 8017d12:	db1e      	blt.n	8017d52 <__ieee754_atan2+0x12a>
 8017d14:	4632      	mov	r2, r6
 8017d16:	463b      	mov	r3, r7
 8017d18:	f7e8 fda8 	bl	800086c <__aeabi_ddiv>
 8017d1c:	ec41 0b10 	vmov	d0, r0, r1
 8017d20:	f001 f96a 	bl	8018ff8 <fabs>
 8017d24:	f000 ffc8 	bl	8018cb8 <atan>
 8017d28:	ec51 0b10 	vmov	r0, r1, d0
 8017d2c:	2c01      	cmp	r4, #1
 8017d2e:	d013      	beq.n	8017d58 <__ieee754_atan2+0x130>
 8017d30:	2c02      	cmp	r4, #2
 8017d32:	d015      	beq.n	8017d60 <__ieee754_atan2+0x138>
 8017d34:	2c00      	cmp	r4, #0
 8017d36:	d098      	beq.n	8017c6a <__ieee754_atan2+0x42>
 8017d38:	a321      	add	r3, pc, #132	; (adr r3, 8017dc0 <__ieee754_atan2+0x198>)
 8017d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d3e:	f7e8 fab3 	bl	80002a8 <__aeabi_dsub>
 8017d42:	a321      	add	r3, pc, #132	; (adr r3, 8017dc8 <__ieee754_atan2+0x1a0>)
 8017d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d48:	e014      	b.n	8017d74 <__ieee754_atan2+0x14c>
 8017d4a:	a121      	add	r1, pc, #132	; (adr r1, 8017dd0 <__ieee754_atan2+0x1a8>)
 8017d4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017d50:	e7ec      	b.n	8017d2c <__ieee754_atan2+0x104>
 8017d52:	2000      	movs	r0, #0
 8017d54:	2100      	movs	r1, #0
 8017d56:	e7e9      	b.n	8017d2c <__ieee754_atan2+0x104>
 8017d58:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017d5c:	4619      	mov	r1, r3
 8017d5e:	e784      	b.n	8017c6a <__ieee754_atan2+0x42>
 8017d60:	a317      	add	r3, pc, #92	; (adr r3, 8017dc0 <__ieee754_atan2+0x198>)
 8017d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d66:	f7e8 fa9f 	bl	80002a8 <__aeabi_dsub>
 8017d6a:	4602      	mov	r2, r0
 8017d6c:	460b      	mov	r3, r1
 8017d6e:	a116      	add	r1, pc, #88	; (adr r1, 8017dc8 <__ieee754_atan2+0x1a0>)
 8017d70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017d74:	f7e8 fa98 	bl	80002a8 <__aeabi_dsub>
 8017d78:	e777      	b.n	8017c6a <__ieee754_atan2+0x42>
 8017d7a:	a117      	add	r1, pc, #92	; (adr r1, 8017dd8 <__ieee754_atan2+0x1b0>)
 8017d7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017d80:	e773      	b.n	8017c6a <__ieee754_atan2+0x42>
 8017d82:	a111      	add	r1, pc, #68	; (adr r1, 8017dc8 <__ieee754_atan2+0x1a0>)
 8017d84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017d88:	e76f      	b.n	8017c6a <__ieee754_atan2+0x42>
 8017d8a:	a111      	add	r1, pc, #68	; (adr r1, 8017dd0 <__ieee754_atan2+0x1a8>)
 8017d8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017d90:	e76b      	b.n	8017c6a <__ieee754_atan2+0x42>
 8017d92:	bf00      	nop
 8017d94:	f3af 8000 	nop.w
 8017d98:	54442d18 	.word	0x54442d18
 8017d9c:	c00921fb 	.word	0xc00921fb
 8017da0:	54442d18 	.word	0x54442d18
 8017da4:	bff921fb 	.word	0xbff921fb
 8017da8:	54442d18 	.word	0x54442d18
 8017dac:	bfe921fb 	.word	0xbfe921fb
 8017db0:	7f3321d2 	.word	0x7f3321d2
 8017db4:	4002d97c 	.word	0x4002d97c
 8017db8:	7f3321d2 	.word	0x7f3321d2
 8017dbc:	c002d97c 	.word	0xc002d97c
 8017dc0:	33145c07 	.word	0x33145c07
 8017dc4:	3ca1a626 	.word	0x3ca1a626
 8017dc8:	54442d18 	.word	0x54442d18
 8017dcc:	400921fb 	.word	0x400921fb
 8017dd0:	54442d18 	.word	0x54442d18
 8017dd4:	3ff921fb 	.word	0x3ff921fb
 8017dd8:	54442d18 	.word	0x54442d18
 8017ddc:	3fe921fb 	.word	0x3fe921fb
 8017de0:	7ff00000 	.word	0x7ff00000
 8017de4:	00000000 	.word	0x00000000

08017de8 <__ieee754_rem_pio2>:
 8017de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017dec:	ec57 6b10 	vmov	r6, r7, d0
 8017df0:	4bc3      	ldr	r3, [pc, #780]	; (8018100 <__ieee754_rem_pio2+0x318>)
 8017df2:	b08d      	sub	sp, #52	; 0x34
 8017df4:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8017df8:	4598      	cmp	r8, r3
 8017dfa:	4604      	mov	r4, r0
 8017dfc:	9704      	str	r7, [sp, #16]
 8017dfe:	dc07      	bgt.n	8017e10 <__ieee754_rem_pio2+0x28>
 8017e00:	2200      	movs	r2, #0
 8017e02:	2300      	movs	r3, #0
 8017e04:	ed84 0b00 	vstr	d0, [r4]
 8017e08:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8017e0c:	2500      	movs	r5, #0
 8017e0e:	e027      	b.n	8017e60 <__ieee754_rem_pio2+0x78>
 8017e10:	4bbc      	ldr	r3, [pc, #752]	; (8018104 <__ieee754_rem_pio2+0x31c>)
 8017e12:	4598      	cmp	r8, r3
 8017e14:	dc75      	bgt.n	8017f02 <__ieee754_rem_pio2+0x11a>
 8017e16:	9b04      	ldr	r3, [sp, #16]
 8017e18:	4dbb      	ldr	r5, [pc, #748]	; (8018108 <__ieee754_rem_pio2+0x320>)
 8017e1a:	2b00      	cmp	r3, #0
 8017e1c:	ee10 0a10 	vmov	r0, s0
 8017e20:	a3a9      	add	r3, pc, #676	; (adr r3, 80180c8 <__ieee754_rem_pio2+0x2e0>)
 8017e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e26:	4639      	mov	r1, r7
 8017e28:	dd36      	ble.n	8017e98 <__ieee754_rem_pio2+0xb0>
 8017e2a:	f7e8 fa3d 	bl	80002a8 <__aeabi_dsub>
 8017e2e:	45a8      	cmp	r8, r5
 8017e30:	4606      	mov	r6, r0
 8017e32:	460f      	mov	r7, r1
 8017e34:	d018      	beq.n	8017e68 <__ieee754_rem_pio2+0x80>
 8017e36:	a3a6      	add	r3, pc, #664	; (adr r3, 80180d0 <__ieee754_rem_pio2+0x2e8>)
 8017e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e3c:	f7e8 fa34 	bl	80002a8 <__aeabi_dsub>
 8017e40:	4602      	mov	r2, r0
 8017e42:	460b      	mov	r3, r1
 8017e44:	e9c4 2300 	strd	r2, r3, [r4]
 8017e48:	4630      	mov	r0, r6
 8017e4a:	4639      	mov	r1, r7
 8017e4c:	f7e8 fa2c 	bl	80002a8 <__aeabi_dsub>
 8017e50:	a39f      	add	r3, pc, #636	; (adr r3, 80180d0 <__ieee754_rem_pio2+0x2e8>)
 8017e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e56:	f7e8 fa27 	bl	80002a8 <__aeabi_dsub>
 8017e5a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8017e5e:	2501      	movs	r5, #1
 8017e60:	4628      	mov	r0, r5
 8017e62:	b00d      	add	sp, #52	; 0x34
 8017e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e68:	a39b      	add	r3, pc, #620	; (adr r3, 80180d8 <__ieee754_rem_pio2+0x2f0>)
 8017e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e6e:	f7e8 fa1b 	bl	80002a8 <__aeabi_dsub>
 8017e72:	a39b      	add	r3, pc, #620	; (adr r3, 80180e0 <__ieee754_rem_pio2+0x2f8>)
 8017e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e78:	4606      	mov	r6, r0
 8017e7a:	460f      	mov	r7, r1
 8017e7c:	f7e8 fa14 	bl	80002a8 <__aeabi_dsub>
 8017e80:	4602      	mov	r2, r0
 8017e82:	460b      	mov	r3, r1
 8017e84:	e9c4 2300 	strd	r2, r3, [r4]
 8017e88:	4630      	mov	r0, r6
 8017e8a:	4639      	mov	r1, r7
 8017e8c:	f7e8 fa0c 	bl	80002a8 <__aeabi_dsub>
 8017e90:	a393      	add	r3, pc, #588	; (adr r3, 80180e0 <__ieee754_rem_pio2+0x2f8>)
 8017e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e96:	e7de      	b.n	8017e56 <__ieee754_rem_pio2+0x6e>
 8017e98:	f7e8 fa08 	bl	80002ac <__adddf3>
 8017e9c:	45a8      	cmp	r8, r5
 8017e9e:	4606      	mov	r6, r0
 8017ea0:	460f      	mov	r7, r1
 8017ea2:	d016      	beq.n	8017ed2 <__ieee754_rem_pio2+0xea>
 8017ea4:	a38a      	add	r3, pc, #552	; (adr r3, 80180d0 <__ieee754_rem_pio2+0x2e8>)
 8017ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017eaa:	f7e8 f9ff 	bl	80002ac <__adddf3>
 8017eae:	4602      	mov	r2, r0
 8017eb0:	460b      	mov	r3, r1
 8017eb2:	e9c4 2300 	strd	r2, r3, [r4]
 8017eb6:	4630      	mov	r0, r6
 8017eb8:	4639      	mov	r1, r7
 8017eba:	f7e8 f9f5 	bl	80002a8 <__aeabi_dsub>
 8017ebe:	a384      	add	r3, pc, #528	; (adr r3, 80180d0 <__ieee754_rem_pio2+0x2e8>)
 8017ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ec4:	f7e8 f9f2 	bl	80002ac <__adddf3>
 8017ec8:	f04f 35ff 	mov.w	r5, #4294967295
 8017ecc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8017ed0:	e7c6      	b.n	8017e60 <__ieee754_rem_pio2+0x78>
 8017ed2:	a381      	add	r3, pc, #516	; (adr r3, 80180d8 <__ieee754_rem_pio2+0x2f0>)
 8017ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ed8:	f7e8 f9e8 	bl	80002ac <__adddf3>
 8017edc:	a380      	add	r3, pc, #512	; (adr r3, 80180e0 <__ieee754_rem_pio2+0x2f8>)
 8017ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ee2:	4606      	mov	r6, r0
 8017ee4:	460f      	mov	r7, r1
 8017ee6:	f7e8 f9e1 	bl	80002ac <__adddf3>
 8017eea:	4602      	mov	r2, r0
 8017eec:	460b      	mov	r3, r1
 8017eee:	e9c4 2300 	strd	r2, r3, [r4]
 8017ef2:	4630      	mov	r0, r6
 8017ef4:	4639      	mov	r1, r7
 8017ef6:	f7e8 f9d7 	bl	80002a8 <__aeabi_dsub>
 8017efa:	a379      	add	r3, pc, #484	; (adr r3, 80180e0 <__ieee754_rem_pio2+0x2f8>)
 8017efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f00:	e7e0      	b.n	8017ec4 <__ieee754_rem_pio2+0xdc>
 8017f02:	4b82      	ldr	r3, [pc, #520]	; (801810c <__ieee754_rem_pio2+0x324>)
 8017f04:	4598      	cmp	r8, r3
 8017f06:	f300 80d0 	bgt.w	80180aa <__ieee754_rem_pio2+0x2c2>
 8017f0a:	f001 f875 	bl	8018ff8 <fabs>
 8017f0e:	ec57 6b10 	vmov	r6, r7, d0
 8017f12:	ee10 0a10 	vmov	r0, s0
 8017f16:	a374      	add	r3, pc, #464	; (adr r3, 80180e8 <__ieee754_rem_pio2+0x300>)
 8017f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f1c:	4639      	mov	r1, r7
 8017f1e:	f7e8 fb7b 	bl	8000618 <__aeabi_dmul>
 8017f22:	2200      	movs	r2, #0
 8017f24:	4b7a      	ldr	r3, [pc, #488]	; (8018110 <__ieee754_rem_pio2+0x328>)
 8017f26:	f7e8 f9c1 	bl	80002ac <__adddf3>
 8017f2a:	f7e8 fe25 	bl	8000b78 <__aeabi_d2iz>
 8017f2e:	4605      	mov	r5, r0
 8017f30:	f7e8 fb08 	bl	8000544 <__aeabi_i2d>
 8017f34:	a364      	add	r3, pc, #400	; (adr r3, 80180c8 <__ieee754_rem_pio2+0x2e0>)
 8017f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017f3e:	f7e8 fb6b 	bl	8000618 <__aeabi_dmul>
 8017f42:	4602      	mov	r2, r0
 8017f44:	460b      	mov	r3, r1
 8017f46:	4630      	mov	r0, r6
 8017f48:	4639      	mov	r1, r7
 8017f4a:	f7e8 f9ad 	bl	80002a8 <__aeabi_dsub>
 8017f4e:	a360      	add	r3, pc, #384	; (adr r3, 80180d0 <__ieee754_rem_pio2+0x2e8>)
 8017f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f54:	4682      	mov	sl, r0
 8017f56:	468b      	mov	fp, r1
 8017f58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017f5c:	f7e8 fb5c 	bl	8000618 <__aeabi_dmul>
 8017f60:	2d1f      	cmp	r5, #31
 8017f62:	4606      	mov	r6, r0
 8017f64:	460f      	mov	r7, r1
 8017f66:	dc0c      	bgt.n	8017f82 <__ieee754_rem_pio2+0x19a>
 8017f68:	1e6a      	subs	r2, r5, #1
 8017f6a:	4b6a      	ldr	r3, [pc, #424]	; (8018114 <__ieee754_rem_pio2+0x32c>)
 8017f6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017f70:	4543      	cmp	r3, r8
 8017f72:	d006      	beq.n	8017f82 <__ieee754_rem_pio2+0x19a>
 8017f74:	4632      	mov	r2, r6
 8017f76:	463b      	mov	r3, r7
 8017f78:	4650      	mov	r0, sl
 8017f7a:	4659      	mov	r1, fp
 8017f7c:	f7e8 f994 	bl	80002a8 <__aeabi_dsub>
 8017f80:	e00e      	b.n	8017fa0 <__ieee754_rem_pio2+0x1b8>
 8017f82:	4632      	mov	r2, r6
 8017f84:	463b      	mov	r3, r7
 8017f86:	4650      	mov	r0, sl
 8017f88:	4659      	mov	r1, fp
 8017f8a:	f7e8 f98d 	bl	80002a8 <__aeabi_dsub>
 8017f8e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8017f92:	9305      	str	r3, [sp, #20]
 8017f94:	9a05      	ldr	r2, [sp, #20]
 8017f96:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8017f9a:	1ad3      	subs	r3, r2, r3
 8017f9c:	2b10      	cmp	r3, #16
 8017f9e:	dc02      	bgt.n	8017fa6 <__ieee754_rem_pio2+0x1be>
 8017fa0:	e9c4 0100 	strd	r0, r1, [r4]
 8017fa4:	e039      	b.n	801801a <__ieee754_rem_pio2+0x232>
 8017fa6:	a34c      	add	r3, pc, #304	; (adr r3, 80180d8 <__ieee754_rem_pio2+0x2f0>)
 8017fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017fac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017fb0:	f7e8 fb32 	bl	8000618 <__aeabi_dmul>
 8017fb4:	4606      	mov	r6, r0
 8017fb6:	460f      	mov	r7, r1
 8017fb8:	4602      	mov	r2, r0
 8017fba:	460b      	mov	r3, r1
 8017fbc:	4650      	mov	r0, sl
 8017fbe:	4659      	mov	r1, fp
 8017fc0:	f7e8 f972 	bl	80002a8 <__aeabi_dsub>
 8017fc4:	4602      	mov	r2, r0
 8017fc6:	460b      	mov	r3, r1
 8017fc8:	4680      	mov	r8, r0
 8017fca:	4689      	mov	r9, r1
 8017fcc:	4650      	mov	r0, sl
 8017fce:	4659      	mov	r1, fp
 8017fd0:	f7e8 f96a 	bl	80002a8 <__aeabi_dsub>
 8017fd4:	4632      	mov	r2, r6
 8017fd6:	463b      	mov	r3, r7
 8017fd8:	f7e8 f966 	bl	80002a8 <__aeabi_dsub>
 8017fdc:	a340      	add	r3, pc, #256	; (adr r3, 80180e0 <__ieee754_rem_pio2+0x2f8>)
 8017fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017fe2:	4606      	mov	r6, r0
 8017fe4:	460f      	mov	r7, r1
 8017fe6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017fea:	f7e8 fb15 	bl	8000618 <__aeabi_dmul>
 8017fee:	4632      	mov	r2, r6
 8017ff0:	463b      	mov	r3, r7
 8017ff2:	f7e8 f959 	bl	80002a8 <__aeabi_dsub>
 8017ff6:	4602      	mov	r2, r0
 8017ff8:	460b      	mov	r3, r1
 8017ffa:	4606      	mov	r6, r0
 8017ffc:	460f      	mov	r7, r1
 8017ffe:	4640      	mov	r0, r8
 8018000:	4649      	mov	r1, r9
 8018002:	f7e8 f951 	bl	80002a8 <__aeabi_dsub>
 8018006:	9a05      	ldr	r2, [sp, #20]
 8018008:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801800c:	1ad3      	subs	r3, r2, r3
 801800e:	2b31      	cmp	r3, #49	; 0x31
 8018010:	dc20      	bgt.n	8018054 <__ieee754_rem_pio2+0x26c>
 8018012:	e9c4 0100 	strd	r0, r1, [r4]
 8018016:	46c2      	mov	sl, r8
 8018018:	46cb      	mov	fp, r9
 801801a:	e9d4 8900 	ldrd	r8, r9, [r4]
 801801e:	4650      	mov	r0, sl
 8018020:	4642      	mov	r2, r8
 8018022:	464b      	mov	r3, r9
 8018024:	4659      	mov	r1, fp
 8018026:	f7e8 f93f 	bl	80002a8 <__aeabi_dsub>
 801802a:	463b      	mov	r3, r7
 801802c:	4632      	mov	r2, r6
 801802e:	f7e8 f93b 	bl	80002a8 <__aeabi_dsub>
 8018032:	9b04      	ldr	r3, [sp, #16]
 8018034:	2b00      	cmp	r3, #0
 8018036:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801803a:	f6bf af11 	bge.w	8017e60 <__ieee754_rem_pio2+0x78>
 801803e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8018042:	6063      	str	r3, [r4, #4]
 8018044:	f8c4 8000 	str.w	r8, [r4]
 8018048:	60a0      	str	r0, [r4, #8]
 801804a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801804e:	60e3      	str	r3, [r4, #12]
 8018050:	426d      	negs	r5, r5
 8018052:	e705      	b.n	8017e60 <__ieee754_rem_pio2+0x78>
 8018054:	a326      	add	r3, pc, #152	; (adr r3, 80180f0 <__ieee754_rem_pio2+0x308>)
 8018056:	e9d3 2300 	ldrd	r2, r3, [r3]
 801805a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801805e:	f7e8 fadb 	bl	8000618 <__aeabi_dmul>
 8018062:	4606      	mov	r6, r0
 8018064:	460f      	mov	r7, r1
 8018066:	4602      	mov	r2, r0
 8018068:	460b      	mov	r3, r1
 801806a:	4640      	mov	r0, r8
 801806c:	4649      	mov	r1, r9
 801806e:	f7e8 f91b 	bl	80002a8 <__aeabi_dsub>
 8018072:	4602      	mov	r2, r0
 8018074:	460b      	mov	r3, r1
 8018076:	4682      	mov	sl, r0
 8018078:	468b      	mov	fp, r1
 801807a:	4640      	mov	r0, r8
 801807c:	4649      	mov	r1, r9
 801807e:	f7e8 f913 	bl	80002a8 <__aeabi_dsub>
 8018082:	4632      	mov	r2, r6
 8018084:	463b      	mov	r3, r7
 8018086:	f7e8 f90f 	bl	80002a8 <__aeabi_dsub>
 801808a:	a31b      	add	r3, pc, #108	; (adr r3, 80180f8 <__ieee754_rem_pio2+0x310>)
 801808c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018090:	4606      	mov	r6, r0
 8018092:	460f      	mov	r7, r1
 8018094:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018098:	f7e8 fabe 	bl	8000618 <__aeabi_dmul>
 801809c:	4632      	mov	r2, r6
 801809e:	463b      	mov	r3, r7
 80180a0:	f7e8 f902 	bl	80002a8 <__aeabi_dsub>
 80180a4:	4606      	mov	r6, r0
 80180a6:	460f      	mov	r7, r1
 80180a8:	e764      	b.n	8017f74 <__ieee754_rem_pio2+0x18c>
 80180aa:	4b1b      	ldr	r3, [pc, #108]	; (8018118 <__ieee754_rem_pio2+0x330>)
 80180ac:	4598      	cmp	r8, r3
 80180ae:	dd35      	ble.n	801811c <__ieee754_rem_pio2+0x334>
 80180b0:	ee10 2a10 	vmov	r2, s0
 80180b4:	463b      	mov	r3, r7
 80180b6:	4630      	mov	r0, r6
 80180b8:	4639      	mov	r1, r7
 80180ba:	f7e8 f8f5 	bl	80002a8 <__aeabi_dsub>
 80180be:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80180c2:	e9c4 0100 	strd	r0, r1, [r4]
 80180c6:	e6a1      	b.n	8017e0c <__ieee754_rem_pio2+0x24>
 80180c8:	54400000 	.word	0x54400000
 80180cc:	3ff921fb 	.word	0x3ff921fb
 80180d0:	1a626331 	.word	0x1a626331
 80180d4:	3dd0b461 	.word	0x3dd0b461
 80180d8:	1a600000 	.word	0x1a600000
 80180dc:	3dd0b461 	.word	0x3dd0b461
 80180e0:	2e037073 	.word	0x2e037073
 80180e4:	3ba3198a 	.word	0x3ba3198a
 80180e8:	6dc9c883 	.word	0x6dc9c883
 80180ec:	3fe45f30 	.word	0x3fe45f30
 80180f0:	2e000000 	.word	0x2e000000
 80180f4:	3ba3198a 	.word	0x3ba3198a
 80180f8:	252049c1 	.word	0x252049c1
 80180fc:	397b839a 	.word	0x397b839a
 8018100:	3fe921fb 	.word	0x3fe921fb
 8018104:	4002d97b 	.word	0x4002d97b
 8018108:	3ff921fb 	.word	0x3ff921fb
 801810c:	413921fb 	.word	0x413921fb
 8018110:	3fe00000 	.word	0x3fe00000
 8018114:	08019a2c 	.word	0x08019a2c
 8018118:	7fefffff 	.word	0x7fefffff
 801811c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8018120:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8018124:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8018128:	4630      	mov	r0, r6
 801812a:	460f      	mov	r7, r1
 801812c:	f7e8 fd24 	bl	8000b78 <__aeabi_d2iz>
 8018130:	f7e8 fa08 	bl	8000544 <__aeabi_i2d>
 8018134:	4602      	mov	r2, r0
 8018136:	460b      	mov	r3, r1
 8018138:	4630      	mov	r0, r6
 801813a:	4639      	mov	r1, r7
 801813c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8018140:	f7e8 f8b2 	bl	80002a8 <__aeabi_dsub>
 8018144:	2200      	movs	r2, #0
 8018146:	4b1f      	ldr	r3, [pc, #124]	; (80181c4 <__ieee754_rem_pio2+0x3dc>)
 8018148:	f7e8 fa66 	bl	8000618 <__aeabi_dmul>
 801814c:	460f      	mov	r7, r1
 801814e:	4606      	mov	r6, r0
 8018150:	f7e8 fd12 	bl	8000b78 <__aeabi_d2iz>
 8018154:	f7e8 f9f6 	bl	8000544 <__aeabi_i2d>
 8018158:	4602      	mov	r2, r0
 801815a:	460b      	mov	r3, r1
 801815c:	4630      	mov	r0, r6
 801815e:	4639      	mov	r1, r7
 8018160:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8018164:	f7e8 f8a0 	bl	80002a8 <__aeabi_dsub>
 8018168:	2200      	movs	r2, #0
 801816a:	4b16      	ldr	r3, [pc, #88]	; (80181c4 <__ieee754_rem_pio2+0x3dc>)
 801816c:	f7e8 fa54 	bl	8000618 <__aeabi_dmul>
 8018170:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8018174:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8018178:	f04f 0803 	mov.w	r8, #3
 801817c:	2600      	movs	r6, #0
 801817e:	2700      	movs	r7, #0
 8018180:	4632      	mov	r2, r6
 8018182:	463b      	mov	r3, r7
 8018184:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8018188:	f108 3aff 	add.w	sl, r8, #4294967295
 801818c:	f7e8 fcac 	bl	8000ae8 <__aeabi_dcmpeq>
 8018190:	b9b0      	cbnz	r0, 80181c0 <__ieee754_rem_pio2+0x3d8>
 8018192:	4b0d      	ldr	r3, [pc, #52]	; (80181c8 <__ieee754_rem_pio2+0x3e0>)
 8018194:	9301      	str	r3, [sp, #4]
 8018196:	2302      	movs	r3, #2
 8018198:	9300      	str	r3, [sp, #0]
 801819a:	462a      	mov	r2, r5
 801819c:	4643      	mov	r3, r8
 801819e:	4621      	mov	r1, r4
 80181a0:	a806      	add	r0, sp, #24
 80181a2:	f000 f98d 	bl	80184c0 <__kernel_rem_pio2>
 80181a6:	9b04      	ldr	r3, [sp, #16]
 80181a8:	2b00      	cmp	r3, #0
 80181aa:	4605      	mov	r5, r0
 80181ac:	f6bf ae58 	bge.w	8017e60 <__ieee754_rem_pio2+0x78>
 80181b0:	6863      	ldr	r3, [r4, #4]
 80181b2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80181b6:	6063      	str	r3, [r4, #4]
 80181b8:	68e3      	ldr	r3, [r4, #12]
 80181ba:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80181be:	e746      	b.n	801804e <__ieee754_rem_pio2+0x266>
 80181c0:	46d0      	mov	r8, sl
 80181c2:	e7dd      	b.n	8018180 <__ieee754_rem_pio2+0x398>
 80181c4:	41700000 	.word	0x41700000
 80181c8:	08019aac 	.word	0x08019aac

080181cc <__ieee754_sqrt>:
 80181cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80181d0:	4955      	ldr	r1, [pc, #340]	; (8018328 <__ieee754_sqrt+0x15c>)
 80181d2:	ec55 4b10 	vmov	r4, r5, d0
 80181d6:	43a9      	bics	r1, r5
 80181d8:	462b      	mov	r3, r5
 80181da:	462a      	mov	r2, r5
 80181dc:	d112      	bne.n	8018204 <__ieee754_sqrt+0x38>
 80181de:	ee10 2a10 	vmov	r2, s0
 80181e2:	ee10 0a10 	vmov	r0, s0
 80181e6:	4629      	mov	r1, r5
 80181e8:	f7e8 fa16 	bl	8000618 <__aeabi_dmul>
 80181ec:	4602      	mov	r2, r0
 80181ee:	460b      	mov	r3, r1
 80181f0:	4620      	mov	r0, r4
 80181f2:	4629      	mov	r1, r5
 80181f4:	f7e8 f85a 	bl	80002ac <__adddf3>
 80181f8:	4604      	mov	r4, r0
 80181fa:	460d      	mov	r5, r1
 80181fc:	ec45 4b10 	vmov	d0, r4, r5
 8018200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018204:	2d00      	cmp	r5, #0
 8018206:	ee10 0a10 	vmov	r0, s0
 801820a:	4621      	mov	r1, r4
 801820c:	dc0f      	bgt.n	801822e <__ieee754_sqrt+0x62>
 801820e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8018212:	4330      	orrs	r0, r6
 8018214:	d0f2      	beq.n	80181fc <__ieee754_sqrt+0x30>
 8018216:	b155      	cbz	r5, 801822e <__ieee754_sqrt+0x62>
 8018218:	ee10 2a10 	vmov	r2, s0
 801821c:	4620      	mov	r0, r4
 801821e:	4629      	mov	r1, r5
 8018220:	f7e8 f842 	bl	80002a8 <__aeabi_dsub>
 8018224:	4602      	mov	r2, r0
 8018226:	460b      	mov	r3, r1
 8018228:	f7e8 fb20 	bl	800086c <__aeabi_ddiv>
 801822c:	e7e4      	b.n	80181f8 <__ieee754_sqrt+0x2c>
 801822e:	151b      	asrs	r3, r3, #20
 8018230:	d073      	beq.n	801831a <__ieee754_sqrt+0x14e>
 8018232:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8018236:	07dd      	lsls	r5, r3, #31
 8018238:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801823c:	bf48      	it	mi
 801823e:	0fc8      	lsrmi	r0, r1, #31
 8018240:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8018244:	bf44      	itt	mi
 8018246:	0049      	lslmi	r1, r1, #1
 8018248:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 801824c:	2500      	movs	r5, #0
 801824e:	1058      	asrs	r0, r3, #1
 8018250:	0fcb      	lsrs	r3, r1, #31
 8018252:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8018256:	0049      	lsls	r1, r1, #1
 8018258:	2316      	movs	r3, #22
 801825a:	462c      	mov	r4, r5
 801825c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8018260:	19a7      	adds	r7, r4, r6
 8018262:	4297      	cmp	r7, r2
 8018264:	bfde      	ittt	le
 8018266:	19bc      	addle	r4, r7, r6
 8018268:	1bd2      	suble	r2, r2, r7
 801826a:	19ad      	addle	r5, r5, r6
 801826c:	0fcf      	lsrs	r7, r1, #31
 801826e:	3b01      	subs	r3, #1
 8018270:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8018274:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8018278:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801827c:	d1f0      	bne.n	8018260 <__ieee754_sqrt+0x94>
 801827e:	f04f 0c20 	mov.w	ip, #32
 8018282:	469e      	mov	lr, r3
 8018284:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8018288:	42a2      	cmp	r2, r4
 801828a:	eb06 070e 	add.w	r7, r6, lr
 801828e:	dc02      	bgt.n	8018296 <__ieee754_sqrt+0xca>
 8018290:	d112      	bne.n	80182b8 <__ieee754_sqrt+0xec>
 8018292:	428f      	cmp	r7, r1
 8018294:	d810      	bhi.n	80182b8 <__ieee754_sqrt+0xec>
 8018296:	2f00      	cmp	r7, #0
 8018298:	eb07 0e06 	add.w	lr, r7, r6
 801829c:	da42      	bge.n	8018324 <__ieee754_sqrt+0x158>
 801829e:	f1be 0f00 	cmp.w	lr, #0
 80182a2:	db3f      	blt.n	8018324 <__ieee754_sqrt+0x158>
 80182a4:	f104 0801 	add.w	r8, r4, #1
 80182a8:	1b12      	subs	r2, r2, r4
 80182aa:	428f      	cmp	r7, r1
 80182ac:	bf88      	it	hi
 80182ae:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80182b2:	1bc9      	subs	r1, r1, r7
 80182b4:	4433      	add	r3, r6
 80182b6:	4644      	mov	r4, r8
 80182b8:	0052      	lsls	r2, r2, #1
 80182ba:	f1bc 0c01 	subs.w	ip, ip, #1
 80182be:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80182c2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80182c6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80182ca:	d1dd      	bne.n	8018288 <__ieee754_sqrt+0xbc>
 80182cc:	430a      	orrs	r2, r1
 80182ce:	d006      	beq.n	80182de <__ieee754_sqrt+0x112>
 80182d0:	1c5c      	adds	r4, r3, #1
 80182d2:	bf13      	iteet	ne
 80182d4:	3301      	addne	r3, #1
 80182d6:	3501      	addeq	r5, #1
 80182d8:	4663      	moveq	r3, ip
 80182da:	f023 0301 	bicne.w	r3, r3, #1
 80182de:	106a      	asrs	r2, r5, #1
 80182e0:	085b      	lsrs	r3, r3, #1
 80182e2:	07e9      	lsls	r1, r5, #31
 80182e4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80182e8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80182ec:	bf48      	it	mi
 80182ee:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80182f2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80182f6:	461c      	mov	r4, r3
 80182f8:	e780      	b.n	80181fc <__ieee754_sqrt+0x30>
 80182fa:	0aca      	lsrs	r2, r1, #11
 80182fc:	3815      	subs	r0, #21
 80182fe:	0549      	lsls	r1, r1, #21
 8018300:	2a00      	cmp	r2, #0
 8018302:	d0fa      	beq.n	80182fa <__ieee754_sqrt+0x12e>
 8018304:	02d6      	lsls	r6, r2, #11
 8018306:	d50a      	bpl.n	801831e <__ieee754_sqrt+0x152>
 8018308:	f1c3 0420 	rsb	r4, r3, #32
 801830c:	fa21 f404 	lsr.w	r4, r1, r4
 8018310:	1e5d      	subs	r5, r3, #1
 8018312:	4099      	lsls	r1, r3
 8018314:	4322      	orrs	r2, r4
 8018316:	1b43      	subs	r3, r0, r5
 8018318:	e78b      	b.n	8018232 <__ieee754_sqrt+0x66>
 801831a:	4618      	mov	r0, r3
 801831c:	e7f0      	b.n	8018300 <__ieee754_sqrt+0x134>
 801831e:	0052      	lsls	r2, r2, #1
 8018320:	3301      	adds	r3, #1
 8018322:	e7ef      	b.n	8018304 <__ieee754_sqrt+0x138>
 8018324:	46a0      	mov	r8, r4
 8018326:	e7bf      	b.n	80182a8 <__ieee754_sqrt+0xdc>
 8018328:	7ff00000 	.word	0x7ff00000
 801832c:	00000000 	.word	0x00000000

08018330 <__kernel_cos>:
 8018330:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018334:	ec59 8b10 	vmov	r8, r9, d0
 8018338:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 801833c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8018340:	ed2d 8b02 	vpush	{d8}
 8018344:	eeb0 8a41 	vmov.f32	s16, s2
 8018348:	eef0 8a61 	vmov.f32	s17, s3
 801834c:	da07      	bge.n	801835e <__kernel_cos+0x2e>
 801834e:	ee10 0a10 	vmov	r0, s0
 8018352:	4649      	mov	r1, r9
 8018354:	f7e8 fc10 	bl	8000b78 <__aeabi_d2iz>
 8018358:	2800      	cmp	r0, #0
 801835a:	f000 8089 	beq.w	8018470 <__kernel_cos+0x140>
 801835e:	4642      	mov	r2, r8
 8018360:	464b      	mov	r3, r9
 8018362:	4640      	mov	r0, r8
 8018364:	4649      	mov	r1, r9
 8018366:	f7e8 f957 	bl	8000618 <__aeabi_dmul>
 801836a:	2200      	movs	r2, #0
 801836c:	4b4e      	ldr	r3, [pc, #312]	; (80184a8 <__kernel_cos+0x178>)
 801836e:	4604      	mov	r4, r0
 8018370:	460d      	mov	r5, r1
 8018372:	f7e8 f951 	bl	8000618 <__aeabi_dmul>
 8018376:	a340      	add	r3, pc, #256	; (adr r3, 8018478 <__kernel_cos+0x148>)
 8018378:	e9d3 2300 	ldrd	r2, r3, [r3]
 801837c:	4682      	mov	sl, r0
 801837e:	468b      	mov	fp, r1
 8018380:	4620      	mov	r0, r4
 8018382:	4629      	mov	r1, r5
 8018384:	f7e8 f948 	bl	8000618 <__aeabi_dmul>
 8018388:	a33d      	add	r3, pc, #244	; (adr r3, 8018480 <__kernel_cos+0x150>)
 801838a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801838e:	f7e7 ff8d 	bl	80002ac <__adddf3>
 8018392:	4622      	mov	r2, r4
 8018394:	462b      	mov	r3, r5
 8018396:	f7e8 f93f 	bl	8000618 <__aeabi_dmul>
 801839a:	a33b      	add	r3, pc, #236	; (adr r3, 8018488 <__kernel_cos+0x158>)
 801839c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80183a0:	f7e7 ff82 	bl	80002a8 <__aeabi_dsub>
 80183a4:	4622      	mov	r2, r4
 80183a6:	462b      	mov	r3, r5
 80183a8:	f7e8 f936 	bl	8000618 <__aeabi_dmul>
 80183ac:	a338      	add	r3, pc, #224	; (adr r3, 8018490 <__kernel_cos+0x160>)
 80183ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80183b2:	f7e7 ff7b 	bl	80002ac <__adddf3>
 80183b6:	4622      	mov	r2, r4
 80183b8:	462b      	mov	r3, r5
 80183ba:	f7e8 f92d 	bl	8000618 <__aeabi_dmul>
 80183be:	a336      	add	r3, pc, #216	; (adr r3, 8018498 <__kernel_cos+0x168>)
 80183c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80183c4:	f7e7 ff70 	bl	80002a8 <__aeabi_dsub>
 80183c8:	4622      	mov	r2, r4
 80183ca:	462b      	mov	r3, r5
 80183cc:	f7e8 f924 	bl	8000618 <__aeabi_dmul>
 80183d0:	a333      	add	r3, pc, #204	; (adr r3, 80184a0 <__kernel_cos+0x170>)
 80183d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80183d6:	f7e7 ff69 	bl	80002ac <__adddf3>
 80183da:	4622      	mov	r2, r4
 80183dc:	462b      	mov	r3, r5
 80183de:	f7e8 f91b 	bl	8000618 <__aeabi_dmul>
 80183e2:	4622      	mov	r2, r4
 80183e4:	462b      	mov	r3, r5
 80183e6:	f7e8 f917 	bl	8000618 <__aeabi_dmul>
 80183ea:	ec53 2b18 	vmov	r2, r3, d8
 80183ee:	4604      	mov	r4, r0
 80183f0:	460d      	mov	r5, r1
 80183f2:	4640      	mov	r0, r8
 80183f4:	4649      	mov	r1, r9
 80183f6:	f7e8 f90f 	bl	8000618 <__aeabi_dmul>
 80183fa:	460b      	mov	r3, r1
 80183fc:	4602      	mov	r2, r0
 80183fe:	4629      	mov	r1, r5
 8018400:	4620      	mov	r0, r4
 8018402:	f7e7 ff51 	bl	80002a8 <__aeabi_dsub>
 8018406:	4b29      	ldr	r3, [pc, #164]	; (80184ac <__kernel_cos+0x17c>)
 8018408:	429e      	cmp	r6, r3
 801840a:	4680      	mov	r8, r0
 801840c:	4689      	mov	r9, r1
 801840e:	dc11      	bgt.n	8018434 <__kernel_cos+0x104>
 8018410:	4602      	mov	r2, r0
 8018412:	460b      	mov	r3, r1
 8018414:	4650      	mov	r0, sl
 8018416:	4659      	mov	r1, fp
 8018418:	f7e7 ff46 	bl	80002a8 <__aeabi_dsub>
 801841c:	460b      	mov	r3, r1
 801841e:	4924      	ldr	r1, [pc, #144]	; (80184b0 <__kernel_cos+0x180>)
 8018420:	4602      	mov	r2, r0
 8018422:	2000      	movs	r0, #0
 8018424:	f7e7 ff40 	bl	80002a8 <__aeabi_dsub>
 8018428:	ecbd 8b02 	vpop	{d8}
 801842c:	ec41 0b10 	vmov	d0, r0, r1
 8018430:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018434:	4b1f      	ldr	r3, [pc, #124]	; (80184b4 <__kernel_cos+0x184>)
 8018436:	491e      	ldr	r1, [pc, #120]	; (80184b0 <__kernel_cos+0x180>)
 8018438:	429e      	cmp	r6, r3
 801843a:	bfcc      	ite	gt
 801843c:	4d1e      	ldrgt	r5, [pc, #120]	; (80184b8 <__kernel_cos+0x188>)
 801843e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8018442:	2400      	movs	r4, #0
 8018444:	4622      	mov	r2, r4
 8018446:	462b      	mov	r3, r5
 8018448:	2000      	movs	r0, #0
 801844a:	f7e7 ff2d 	bl	80002a8 <__aeabi_dsub>
 801844e:	4622      	mov	r2, r4
 8018450:	4606      	mov	r6, r0
 8018452:	460f      	mov	r7, r1
 8018454:	462b      	mov	r3, r5
 8018456:	4650      	mov	r0, sl
 8018458:	4659      	mov	r1, fp
 801845a:	f7e7 ff25 	bl	80002a8 <__aeabi_dsub>
 801845e:	4642      	mov	r2, r8
 8018460:	464b      	mov	r3, r9
 8018462:	f7e7 ff21 	bl	80002a8 <__aeabi_dsub>
 8018466:	4602      	mov	r2, r0
 8018468:	460b      	mov	r3, r1
 801846a:	4630      	mov	r0, r6
 801846c:	4639      	mov	r1, r7
 801846e:	e7d9      	b.n	8018424 <__kernel_cos+0xf4>
 8018470:	2000      	movs	r0, #0
 8018472:	490f      	ldr	r1, [pc, #60]	; (80184b0 <__kernel_cos+0x180>)
 8018474:	e7d8      	b.n	8018428 <__kernel_cos+0xf8>
 8018476:	bf00      	nop
 8018478:	be8838d4 	.word	0xbe8838d4
 801847c:	bda8fae9 	.word	0xbda8fae9
 8018480:	bdb4b1c4 	.word	0xbdb4b1c4
 8018484:	3e21ee9e 	.word	0x3e21ee9e
 8018488:	809c52ad 	.word	0x809c52ad
 801848c:	3e927e4f 	.word	0x3e927e4f
 8018490:	19cb1590 	.word	0x19cb1590
 8018494:	3efa01a0 	.word	0x3efa01a0
 8018498:	16c15177 	.word	0x16c15177
 801849c:	3f56c16c 	.word	0x3f56c16c
 80184a0:	5555554c 	.word	0x5555554c
 80184a4:	3fa55555 	.word	0x3fa55555
 80184a8:	3fe00000 	.word	0x3fe00000
 80184ac:	3fd33332 	.word	0x3fd33332
 80184b0:	3ff00000 	.word	0x3ff00000
 80184b4:	3fe90000 	.word	0x3fe90000
 80184b8:	3fd20000 	.word	0x3fd20000
 80184bc:	00000000 	.word	0x00000000

080184c0 <__kernel_rem_pio2>:
 80184c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80184c4:	ed2d 8b02 	vpush	{d8}
 80184c8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80184cc:	1ed4      	subs	r4, r2, #3
 80184ce:	9308      	str	r3, [sp, #32]
 80184d0:	9101      	str	r1, [sp, #4]
 80184d2:	4bc5      	ldr	r3, [pc, #788]	; (80187e8 <__kernel_rem_pio2+0x328>)
 80184d4:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80184d6:	9009      	str	r0, [sp, #36]	; 0x24
 80184d8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80184dc:	9304      	str	r3, [sp, #16]
 80184de:	9b08      	ldr	r3, [sp, #32]
 80184e0:	3b01      	subs	r3, #1
 80184e2:	9307      	str	r3, [sp, #28]
 80184e4:	2318      	movs	r3, #24
 80184e6:	fb94 f4f3 	sdiv	r4, r4, r3
 80184ea:	f06f 0317 	mvn.w	r3, #23
 80184ee:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80184f2:	fb04 3303 	mla	r3, r4, r3, r3
 80184f6:	eb03 0a02 	add.w	sl, r3, r2
 80184fa:	9b04      	ldr	r3, [sp, #16]
 80184fc:	9a07      	ldr	r2, [sp, #28]
 80184fe:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 80187d8 <__kernel_rem_pio2+0x318>
 8018502:	eb03 0802 	add.w	r8, r3, r2
 8018506:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8018508:	1aa7      	subs	r7, r4, r2
 801850a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801850e:	ae22      	add	r6, sp, #136	; 0x88
 8018510:	2500      	movs	r5, #0
 8018512:	4545      	cmp	r5, r8
 8018514:	dd13      	ble.n	801853e <__kernel_rem_pio2+0x7e>
 8018516:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 80187d8 <__kernel_rem_pio2+0x318>
 801851a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 801851e:	2600      	movs	r6, #0
 8018520:	9b04      	ldr	r3, [sp, #16]
 8018522:	429e      	cmp	r6, r3
 8018524:	dc32      	bgt.n	801858c <__kernel_rem_pio2+0xcc>
 8018526:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018528:	9302      	str	r3, [sp, #8]
 801852a:	9b08      	ldr	r3, [sp, #32]
 801852c:	199d      	adds	r5, r3, r6
 801852e:	ab22      	add	r3, sp, #136	; 0x88
 8018530:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8018534:	9306      	str	r3, [sp, #24]
 8018536:	ec59 8b18 	vmov	r8, r9, d8
 801853a:	2700      	movs	r7, #0
 801853c:	e01f      	b.n	801857e <__kernel_rem_pio2+0xbe>
 801853e:	42ef      	cmn	r7, r5
 8018540:	d407      	bmi.n	8018552 <__kernel_rem_pio2+0x92>
 8018542:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8018546:	f7e7 fffd 	bl	8000544 <__aeabi_i2d>
 801854a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801854e:	3501      	adds	r5, #1
 8018550:	e7df      	b.n	8018512 <__kernel_rem_pio2+0x52>
 8018552:	ec51 0b18 	vmov	r0, r1, d8
 8018556:	e7f8      	b.n	801854a <__kernel_rem_pio2+0x8a>
 8018558:	9906      	ldr	r1, [sp, #24]
 801855a:	9d02      	ldr	r5, [sp, #8]
 801855c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8018560:	9106      	str	r1, [sp, #24]
 8018562:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8018566:	9502      	str	r5, [sp, #8]
 8018568:	f7e8 f856 	bl	8000618 <__aeabi_dmul>
 801856c:	4602      	mov	r2, r0
 801856e:	460b      	mov	r3, r1
 8018570:	4640      	mov	r0, r8
 8018572:	4649      	mov	r1, r9
 8018574:	f7e7 fe9a 	bl	80002ac <__adddf3>
 8018578:	3701      	adds	r7, #1
 801857a:	4680      	mov	r8, r0
 801857c:	4689      	mov	r9, r1
 801857e:	9b07      	ldr	r3, [sp, #28]
 8018580:	429f      	cmp	r7, r3
 8018582:	dde9      	ble.n	8018558 <__kernel_rem_pio2+0x98>
 8018584:	e8eb 8902 	strd	r8, r9, [fp], #8
 8018588:	3601      	adds	r6, #1
 801858a:	e7c9      	b.n	8018520 <__kernel_rem_pio2+0x60>
 801858c:	9b04      	ldr	r3, [sp, #16]
 801858e:	aa0e      	add	r2, sp, #56	; 0x38
 8018590:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018594:	930c      	str	r3, [sp, #48]	; 0x30
 8018596:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8018598:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801859c:	9c04      	ldr	r4, [sp, #16]
 801859e:	930b      	str	r3, [sp, #44]	; 0x2c
 80185a0:	ab9a      	add	r3, sp, #616	; 0x268
 80185a2:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 80185a6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80185aa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80185ae:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 80185b2:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80185b6:	ab9a      	add	r3, sp, #616	; 0x268
 80185b8:	445b      	add	r3, fp
 80185ba:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 80185be:	2500      	movs	r5, #0
 80185c0:	1b63      	subs	r3, r4, r5
 80185c2:	2b00      	cmp	r3, #0
 80185c4:	dc78      	bgt.n	80186b8 <__kernel_rem_pio2+0x1f8>
 80185c6:	4650      	mov	r0, sl
 80185c8:	ec49 8b10 	vmov	d0, r8, r9
 80185cc:	f000 fda8 	bl	8019120 <scalbn>
 80185d0:	ec57 6b10 	vmov	r6, r7, d0
 80185d4:	2200      	movs	r2, #0
 80185d6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80185da:	ee10 0a10 	vmov	r0, s0
 80185de:	4639      	mov	r1, r7
 80185e0:	f7e8 f81a 	bl	8000618 <__aeabi_dmul>
 80185e4:	ec41 0b10 	vmov	d0, r0, r1
 80185e8:	f000 fd12 	bl	8019010 <floor>
 80185ec:	2200      	movs	r2, #0
 80185ee:	ec51 0b10 	vmov	r0, r1, d0
 80185f2:	4b7e      	ldr	r3, [pc, #504]	; (80187ec <__kernel_rem_pio2+0x32c>)
 80185f4:	f7e8 f810 	bl	8000618 <__aeabi_dmul>
 80185f8:	4602      	mov	r2, r0
 80185fa:	460b      	mov	r3, r1
 80185fc:	4630      	mov	r0, r6
 80185fe:	4639      	mov	r1, r7
 8018600:	f7e7 fe52 	bl	80002a8 <__aeabi_dsub>
 8018604:	460f      	mov	r7, r1
 8018606:	4606      	mov	r6, r0
 8018608:	f7e8 fab6 	bl	8000b78 <__aeabi_d2iz>
 801860c:	9006      	str	r0, [sp, #24]
 801860e:	f7e7 ff99 	bl	8000544 <__aeabi_i2d>
 8018612:	4602      	mov	r2, r0
 8018614:	460b      	mov	r3, r1
 8018616:	4630      	mov	r0, r6
 8018618:	4639      	mov	r1, r7
 801861a:	f7e7 fe45 	bl	80002a8 <__aeabi_dsub>
 801861e:	f1ba 0f00 	cmp.w	sl, #0
 8018622:	4606      	mov	r6, r0
 8018624:	460f      	mov	r7, r1
 8018626:	dd6c      	ble.n	8018702 <__kernel_rem_pio2+0x242>
 8018628:	1e62      	subs	r2, r4, #1
 801862a:	ab0e      	add	r3, sp, #56	; 0x38
 801862c:	f1ca 0118 	rsb	r1, sl, #24
 8018630:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8018634:	9d06      	ldr	r5, [sp, #24]
 8018636:	fa40 f301 	asr.w	r3, r0, r1
 801863a:	441d      	add	r5, r3
 801863c:	408b      	lsls	r3, r1
 801863e:	1ac0      	subs	r0, r0, r3
 8018640:	ab0e      	add	r3, sp, #56	; 0x38
 8018642:	9506      	str	r5, [sp, #24]
 8018644:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8018648:	f1ca 0317 	rsb	r3, sl, #23
 801864c:	fa40 f303 	asr.w	r3, r0, r3
 8018650:	9302      	str	r3, [sp, #8]
 8018652:	9b02      	ldr	r3, [sp, #8]
 8018654:	2b00      	cmp	r3, #0
 8018656:	dd62      	ble.n	801871e <__kernel_rem_pio2+0x25e>
 8018658:	9b06      	ldr	r3, [sp, #24]
 801865a:	2200      	movs	r2, #0
 801865c:	3301      	adds	r3, #1
 801865e:	9306      	str	r3, [sp, #24]
 8018660:	4615      	mov	r5, r2
 8018662:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8018666:	4294      	cmp	r4, r2
 8018668:	f300 8095 	bgt.w	8018796 <__kernel_rem_pio2+0x2d6>
 801866c:	f1ba 0f00 	cmp.w	sl, #0
 8018670:	dd07      	ble.n	8018682 <__kernel_rem_pio2+0x1c2>
 8018672:	f1ba 0f01 	cmp.w	sl, #1
 8018676:	f000 80a2 	beq.w	80187be <__kernel_rem_pio2+0x2fe>
 801867a:	f1ba 0f02 	cmp.w	sl, #2
 801867e:	f000 80c1 	beq.w	8018804 <__kernel_rem_pio2+0x344>
 8018682:	9b02      	ldr	r3, [sp, #8]
 8018684:	2b02      	cmp	r3, #2
 8018686:	d14a      	bne.n	801871e <__kernel_rem_pio2+0x25e>
 8018688:	4632      	mov	r2, r6
 801868a:	463b      	mov	r3, r7
 801868c:	2000      	movs	r0, #0
 801868e:	4958      	ldr	r1, [pc, #352]	; (80187f0 <__kernel_rem_pio2+0x330>)
 8018690:	f7e7 fe0a 	bl	80002a8 <__aeabi_dsub>
 8018694:	4606      	mov	r6, r0
 8018696:	460f      	mov	r7, r1
 8018698:	2d00      	cmp	r5, #0
 801869a:	d040      	beq.n	801871e <__kernel_rem_pio2+0x25e>
 801869c:	4650      	mov	r0, sl
 801869e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 80187e0 <__kernel_rem_pio2+0x320>
 80186a2:	f000 fd3d 	bl	8019120 <scalbn>
 80186a6:	4630      	mov	r0, r6
 80186a8:	4639      	mov	r1, r7
 80186aa:	ec53 2b10 	vmov	r2, r3, d0
 80186ae:	f7e7 fdfb 	bl	80002a8 <__aeabi_dsub>
 80186b2:	4606      	mov	r6, r0
 80186b4:	460f      	mov	r7, r1
 80186b6:	e032      	b.n	801871e <__kernel_rem_pio2+0x25e>
 80186b8:	2200      	movs	r2, #0
 80186ba:	4b4e      	ldr	r3, [pc, #312]	; (80187f4 <__kernel_rem_pio2+0x334>)
 80186bc:	4640      	mov	r0, r8
 80186be:	4649      	mov	r1, r9
 80186c0:	f7e7 ffaa 	bl	8000618 <__aeabi_dmul>
 80186c4:	f7e8 fa58 	bl	8000b78 <__aeabi_d2iz>
 80186c8:	f7e7 ff3c 	bl	8000544 <__aeabi_i2d>
 80186cc:	2200      	movs	r2, #0
 80186ce:	4b4a      	ldr	r3, [pc, #296]	; (80187f8 <__kernel_rem_pio2+0x338>)
 80186d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80186d4:	f7e7 ffa0 	bl	8000618 <__aeabi_dmul>
 80186d8:	4602      	mov	r2, r0
 80186da:	460b      	mov	r3, r1
 80186dc:	4640      	mov	r0, r8
 80186de:	4649      	mov	r1, r9
 80186e0:	f7e7 fde2 	bl	80002a8 <__aeabi_dsub>
 80186e4:	f7e8 fa48 	bl	8000b78 <__aeabi_d2iz>
 80186e8:	ab0e      	add	r3, sp, #56	; 0x38
 80186ea:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 80186ee:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80186f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80186f6:	f7e7 fdd9 	bl	80002ac <__adddf3>
 80186fa:	3501      	adds	r5, #1
 80186fc:	4680      	mov	r8, r0
 80186fe:	4689      	mov	r9, r1
 8018700:	e75e      	b.n	80185c0 <__kernel_rem_pio2+0x100>
 8018702:	d105      	bne.n	8018710 <__kernel_rem_pio2+0x250>
 8018704:	1e63      	subs	r3, r4, #1
 8018706:	aa0e      	add	r2, sp, #56	; 0x38
 8018708:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801870c:	15c3      	asrs	r3, r0, #23
 801870e:	e79f      	b.n	8018650 <__kernel_rem_pio2+0x190>
 8018710:	2200      	movs	r2, #0
 8018712:	4b3a      	ldr	r3, [pc, #232]	; (80187fc <__kernel_rem_pio2+0x33c>)
 8018714:	f7e8 fa06 	bl	8000b24 <__aeabi_dcmpge>
 8018718:	2800      	cmp	r0, #0
 801871a:	d139      	bne.n	8018790 <__kernel_rem_pio2+0x2d0>
 801871c:	9002      	str	r0, [sp, #8]
 801871e:	2200      	movs	r2, #0
 8018720:	2300      	movs	r3, #0
 8018722:	4630      	mov	r0, r6
 8018724:	4639      	mov	r1, r7
 8018726:	f7e8 f9df 	bl	8000ae8 <__aeabi_dcmpeq>
 801872a:	2800      	cmp	r0, #0
 801872c:	f000 80c7 	beq.w	80188be <__kernel_rem_pio2+0x3fe>
 8018730:	1e65      	subs	r5, r4, #1
 8018732:	462b      	mov	r3, r5
 8018734:	2200      	movs	r2, #0
 8018736:	9904      	ldr	r1, [sp, #16]
 8018738:	428b      	cmp	r3, r1
 801873a:	da6a      	bge.n	8018812 <__kernel_rem_pio2+0x352>
 801873c:	2a00      	cmp	r2, #0
 801873e:	f000 8088 	beq.w	8018852 <__kernel_rem_pio2+0x392>
 8018742:	ab0e      	add	r3, sp, #56	; 0x38
 8018744:	f1aa 0a18 	sub.w	sl, sl, #24
 8018748:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801874c:	2b00      	cmp	r3, #0
 801874e:	f000 80b4 	beq.w	80188ba <__kernel_rem_pio2+0x3fa>
 8018752:	4650      	mov	r0, sl
 8018754:	ed9f 0b22 	vldr	d0, [pc, #136]	; 80187e0 <__kernel_rem_pio2+0x320>
 8018758:	f000 fce2 	bl	8019120 <scalbn>
 801875c:	00ec      	lsls	r4, r5, #3
 801875e:	ab72      	add	r3, sp, #456	; 0x1c8
 8018760:	191e      	adds	r6, r3, r4
 8018762:	ec59 8b10 	vmov	r8, r9, d0
 8018766:	f106 0a08 	add.w	sl, r6, #8
 801876a:	462f      	mov	r7, r5
 801876c:	2f00      	cmp	r7, #0
 801876e:	f280 80df 	bge.w	8018930 <__kernel_rem_pio2+0x470>
 8018772:	ed9f 8b19 	vldr	d8, [pc, #100]	; 80187d8 <__kernel_rem_pio2+0x318>
 8018776:	f04f 0a00 	mov.w	sl, #0
 801877a:	eba5 030a 	sub.w	r3, r5, sl
 801877e:	2b00      	cmp	r3, #0
 8018780:	f2c0 810a 	blt.w	8018998 <__kernel_rem_pio2+0x4d8>
 8018784:	f8df b078 	ldr.w	fp, [pc, #120]	; 8018800 <__kernel_rem_pio2+0x340>
 8018788:	ec59 8b18 	vmov	r8, r9, d8
 801878c:	2700      	movs	r7, #0
 801878e:	e0f5      	b.n	801897c <__kernel_rem_pio2+0x4bc>
 8018790:	2302      	movs	r3, #2
 8018792:	9302      	str	r3, [sp, #8]
 8018794:	e760      	b.n	8018658 <__kernel_rem_pio2+0x198>
 8018796:	ab0e      	add	r3, sp, #56	; 0x38
 8018798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801879c:	b94d      	cbnz	r5, 80187b2 <__kernel_rem_pio2+0x2f2>
 801879e:	b12b      	cbz	r3, 80187ac <__kernel_rem_pio2+0x2ec>
 80187a0:	a80e      	add	r0, sp, #56	; 0x38
 80187a2:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80187a6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80187aa:	2301      	movs	r3, #1
 80187ac:	3201      	adds	r2, #1
 80187ae:	461d      	mov	r5, r3
 80187b0:	e759      	b.n	8018666 <__kernel_rem_pio2+0x1a6>
 80187b2:	a80e      	add	r0, sp, #56	; 0x38
 80187b4:	1acb      	subs	r3, r1, r3
 80187b6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80187ba:	462b      	mov	r3, r5
 80187bc:	e7f6      	b.n	80187ac <__kernel_rem_pio2+0x2ec>
 80187be:	1e62      	subs	r2, r4, #1
 80187c0:	ab0e      	add	r3, sp, #56	; 0x38
 80187c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80187c6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80187ca:	a90e      	add	r1, sp, #56	; 0x38
 80187cc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80187d0:	e757      	b.n	8018682 <__kernel_rem_pio2+0x1c2>
 80187d2:	bf00      	nop
 80187d4:	f3af 8000 	nop.w
	...
 80187e4:	3ff00000 	.word	0x3ff00000
 80187e8:	08019bf8 	.word	0x08019bf8
 80187ec:	40200000 	.word	0x40200000
 80187f0:	3ff00000 	.word	0x3ff00000
 80187f4:	3e700000 	.word	0x3e700000
 80187f8:	41700000 	.word	0x41700000
 80187fc:	3fe00000 	.word	0x3fe00000
 8018800:	08019bb8 	.word	0x08019bb8
 8018804:	1e62      	subs	r2, r4, #1
 8018806:	ab0e      	add	r3, sp, #56	; 0x38
 8018808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801880c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8018810:	e7db      	b.n	80187ca <__kernel_rem_pio2+0x30a>
 8018812:	a90e      	add	r1, sp, #56	; 0x38
 8018814:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8018818:	3b01      	subs	r3, #1
 801881a:	430a      	orrs	r2, r1
 801881c:	e78b      	b.n	8018736 <__kernel_rem_pio2+0x276>
 801881e:	3301      	adds	r3, #1
 8018820:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8018824:	2900      	cmp	r1, #0
 8018826:	d0fa      	beq.n	801881e <__kernel_rem_pio2+0x35e>
 8018828:	9a08      	ldr	r2, [sp, #32]
 801882a:	4422      	add	r2, r4
 801882c:	00d2      	lsls	r2, r2, #3
 801882e:	a922      	add	r1, sp, #136	; 0x88
 8018830:	18e3      	adds	r3, r4, r3
 8018832:	9206      	str	r2, [sp, #24]
 8018834:	440a      	add	r2, r1
 8018836:	9302      	str	r3, [sp, #8]
 8018838:	f10b 0108 	add.w	r1, fp, #8
 801883c:	f102 0308 	add.w	r3, r2, #8
 8018840:	1c66      	adds	r6, r4, #1
 8018842:	910a      	str	r1, [sp, #40]	; 0x28
 8018844:	2500      	movs	r5, #0
 8018846:	930d      	str	r3, [sp, #52]	; 0x34
 8018848:	9b02      	ldr	r3, [sp, #8]
 801884a:	42b3      	cmp	r3, r6
 801884c:	da04      	bge.n	8018858 <__kernel_rem_pio2+0x398>
 801884e:	461c      	mov	r4, r3
 8018850:	e6a6      	b.n	80185a0 <__kernel_rem_pio2+0xe0>
 8018852:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018854:	2301      	movs	r3, #1
 8018856:	e7e3      	b.n	8018820 <__kernel_rem_pio2+0x360>
 8018858:	9b06      	ldr	r3, [sp, #24]
 801885a:	18ef      	adds	r7, r5, r3
 801885c:	ab22      	add	r3, sp, #136	; 0x88
 801885e:	441f      	add	r7, r3
 8018860:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018862:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8018866:	f7e7 fe6d 	bl	8000544 <__aeabi_i2d>
 801886a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801886c:	461c      	mov	r4, r3
 801886e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018870:	e9c7 0100 	strd	r0, r1, [r7]
 8018874:	eb03 0b05 	add.w	fp, r3, r5
 8018878:	2700      	movs	r7, #0
 801887a:	f04f 0800 	mov.w	r8, #0
 801887e:	f04f 0900 	mov.w	r9, #0
 8018882:	9b07      	ldr	r3, [sp, #28]
 8018884:	429f      	cmp	r7, r3
 8018886:	dd08      	ble.n	801889a <__kernel_rem_pio2+0x3da>
 8018888:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801888a:	aa72      	add	r2, sp, #456	; 0x1c8
 801888c:	18eb      	adds	r3, r5, r3
 801888e:	4413      	add	r3, r2
 8018890:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8018894:	3601      	adds	r6, #1
 8018896:	3508      	adds	r5, #8
 8018898:	e7d6      	b.n	8018848 <__kernel_rem_pio2+0x388>
 801889a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801889e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80188a2:	f7e7 feb9 	bl	8000618 <__aeabi_dmul>
 80188a6:	4602      	mov	r2, r0
 80188a8:	460b      	mov	r3, r1
 80188aa:	4640      	mov	r0, r8
 80188ac:	4649      	mov	r1, r9
 80188ae:	f7e7 fcfd 	bl	80002ac <__adddf3>
 80188b2:	3701      	adds	r7, #1
 80188b4:	4680      	mov	r8, r0
 80188b6:	4689      	mov	r9, r1
 80188b8:	e7e3      	b.n	8018882 <__kernel_rem_pio2+0x3c2>
 80188ba:	3d01      	subs	r5, #1
 80188bc:	e741      	b.n	8018742 <__kernel_rem_pio2+0x282>
 80188be:	f1ca 0000 	rsb	r0, sl, #0
 80188c2:	ec47 6b10 	vmov	d0, r6, r7
 80188c6:	f000 fc2b 	bl	8019120 <scalbn>
 80188ca:	ec57 6b10 	vmov	r6, r7, d0
 80188ce:	2200      	movs	r2, #0
 80188d0:	4b99      	ldr	r3, [pc, #612]	; (8018b38 <__kernel_rem_pio2+0x678>)
 80188d2:	ee10 0a10 	vmov	r0, s0
 80188d6:	4639      	mov	r1, r7
 80188d8:	f7e8 f924 	bl	8000b24 <__aeabi_dcmpge>
 80188dc:	b1f8      	cbz	r0, 801891e <__kernel_rem_pio2+0x45e>
 80188de:	2200      	movs	r2, #0
 80188e0:	4b96      	ldr	r3, [pc, #600]	; (8018b3c <__kernel_rem_pio2+0x67c>)
 80188e2:	4630      	mov	r0, r6
 80188e4:	4639      	mov	r1, r7
 80188e6:	f7e7 fe97 	bl	8000618 <__aeabi_dmul>
 80188ea:	f7e8 f945 	bl	8000b78 <__aeabi_d2iz>
 80188ee:	4680      	mov	r8, r0
 80188f0:	f7e7 fe28 	bl	8000544 <__aeabi_i2d>
 80188f4:	2200      	movs	r2, #0
 80188f6:	4b90      	ldr	r3, [pc, #576]	; (8018b38 <__kernel_rem_pio2+0x678>)
 80188f8:	f7e7 fe8e 	bl	8000618 <__aeabi_dmul>
 80188fc:	460b      	mov	r3, r1
 80188fe:	4602      	mov	r2, r0
 8018900:	4639      	mov	r1, r7
 8018902:	4630      	mov	r0, r6
 8018904:	f7e7 fcd0 	bl	80002a8 <__aeabi_dsub>
 8018908:	f7e8 f936 	bl	8000b78 <__aeabi_d2iz>
 801890c:	1c65      	adds	r5, r4, #1
 801890e:	ab0e      	add	r3, sp, #56	; 0x38
 8018910:	f10a 0a18 	add.w	sl, sl, #24
 8018914:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8018918:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801891c:	e719      	b.n	8018752 <__kernel_rem_pio2+0x292>
 801891e:	4630      	mov	r0, r6
 8018920:	4639      	mov	r1, r7
 8018922:	f7e8 f929 	bl	8000b78 <__aeabi_d2iz>
 8018926:	ab0e      	add	r3, sp, #56	; 0x38
 8018928:	4625      	mov	r5, r4
 801892a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801892e:	e710      	b.n	8018752 <__kernel_rem_pio2+0x292>
 8018930:	ab0e      	add	r3, sp, #56	; 0x38
 8018932:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8018936:	f7e7 fe05 	bl	8000544 <__aeabi_i2d>
 801893a:	4642      	mov	r2, r8
 801893c:	464b      	mov	r3, r9
 801893e:	f7e7 fe6b 	bl	8000618 <__aeabi_dmul>
 8018942:	2200      	movs	r2, #0
 8018944:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8018948:	4b7c      	ldr	r3, [pc, #496]	; (8018b3c <__kernel_rem_pio2+0x67c>)
 801894a:	4640      	mov	r0, r8
 801894c:	4649      	mov	r1, r9
 801894e:	f7e7 fe63 	bl	8000618 <__aeabi_dmul>
 8018952:	3f01      	subs	r7, #1
 8018954:	4680      	mov	r8, r0
 8018956:	4689      	mov	r9, r1
 8018958:	e708      	b.n	801876c <__kernel_rem_pio2+0x2ac>
 801895a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 801895e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018962:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8018966:	f7e7 fe57 	bl	8000618 <__aeabi_dmul>
 801896a:	4602      	mov	r2, r0
 801896c:	460b      	mov	r3, r1
 801896e:	4640      	mov	r0, r8
 8018970:	4649      	mov	r1, r9
 8018972:	f7e7 fc9b 	bl	80002ac <__adddf3>
 8018976:	3701      	adds	r7, #1
 8018978:	4680      	mov	r8, r0
 801897a:	4689      	mov	r9, r1
 801897c:	9b04      	ldr	r3, [sp, #16]
 801897e:	429f      	cmp	r7, r3
 8018980:	dc01      	bgt.n	8018986 <__kernel_rem_pio2+0x4c6>
 8018982:	45ba      	cmp	sl, r7
 8018984:	dae9      	bge.n	801895a <__kernel_rem_pio2+0x49a>
 8018986:	ab4a      	add	r3, sp, #296	; 0x128
 8018988:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801898c:	e9c3 8900 	strd	r8, r9, [r3]
 8018990:	f10a 0a01 	add.w	sl, sl, #1
 8018994:	3e08      	subs	r6, #8
 8018996:	e6f0      	b.n	801877a <__kernel_rem_pio2+0x2ba>
 8018998:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801899a:	2b03      	cmp	r3, #3
 801899c:	d85b      	bhi.n	8018a56 <__kernel_rem_pio2+0x596>
 801899e:	e8df f003 	tbb	[pc, r3]
 80189a2:	264a      	.short	0x264a
 80189a4:	0226      	.short	0x0226
 80189a6:	ab9a      	add	r3, sp, #616	; 0x268
 80189a8:	441c      	add	r4, r3
 80189aa:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80189ae:	46a2      	mov	sl, r4
 80189b0:	46ab      	mov	fp, r5
 80189b2:	f1bb 0f00 	cmp.w	fp, #0
 80189b6:	dc6c      	bgt.n	8018a92 <__kernel_rem_pio2+0x5d2>
 80189b8:	46a2      	mov	sl, r4
 80189ba:	46ab      	mov	fp, r5
 80189bc:	f1bb 0f01 	cmp.w	fp, #1
 80189c0:	f300 8086 	bgt.w	8018ad0 <__kernel_rem_pio2+0x610>
 80189c4:	2000      	movs	r0, #0
 80189c6:	2100      	movs	r1, #0
 80189c8:	2d01      	cmp	r5, #1
 80189ca:	f300 80a0 	bgt.w	8018b0e <__kernel_rem_pio2+0x64e>
 80189ce:	9b02      	ldr	r3, [sp, #8]
 80189d0:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 80189d4:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 80189d8:	2b00      	cmp	r3, #0
 80189da:	f040 809e 	bne.w	8018b1a <__kernel_rem_pio2+0x65a>
 80189de:	9b01      	ldr	r3, [sp, #4]
 80189e0:	e9c3 7800 	strd	r7, r8, [r3]
 80189e4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80189e8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80189ec:	e033      	b.n	8018a56 <__kernel_rem_pio2+0x596>
 80189ee:	3408      	adds	r4, #8
 80189f0:	ab4a      	add	r3, sp, #296	; 0x128
 80189f2:	441c      	add	r4, r3
 80189f4:	462e      	mov	r6, r5
 80189f6:	2000      	movs	r0, #0
 80189f8:	2100      	movs	r1, #0
 80189fa:	2e00      	cmp	r6, #0
 80189fc:	da3a      	bge.n	8018a74 <__kernel_rem_pio2+0x5b4>
 80189fe:	9b02      	ldr	r3, [sp, #8]
 8018a00:	2b00      	cmp	r3, #0
 8018a02:	d03d      	beq.n	8018a80 <__kernel_rem_pio2+0x5c0>
 8018a04:	4602      	mov	r2, r0
 8018a06:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018a0a:	9c01      	ldr	r4, [sp, #4]
 8018a0c:	e9c4 2300 	strd	r2, r3, [r4]
 8018a10:	4602      	mov	r2, r0
 8018a12:	460b      	mov	r3, r1
 8018a14:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8018a18:	f7e7 fc46 	bl	80002a8 <__aeabi_dsub>
 8018a1c:	ae4c      	add	r6, sp, #304	; 0x130
 8018a1e:	2401      	movs	r4, #1
 8018a20:	42a5      	cmp	r5, r4
 8018a22:	da30      	bge.n	8018a86 <__kernel_rem_pio2+0x5c6>
 8018a24:	9b02      	ldr	r3, [sp, #8]
 8018a26:	b113      	cbz	r3, 8018a2e <__kernel_rem_pio2+0x56e>
 8018a28:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018a2c:	4619      	mov	r1, r3
 8018a2e:	9b01      	ldr	r3, [sp, #4]
 8018a30:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8018a34:	e00f      	b.n	8018a56 <__kernel_rem_pio2+0x596>
 8018a36:	ab9a      	add	r3, sp, #616	; 0x268
 8018a38:	441c      	add	r4, r3
 8018a3a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8018a3e:	2000      	movs	r0, #0
 8018a40:	2100      	movs	r1, #0
 8018a42:	2d00      	cmp	r5, #0
 8018a44:	da10      	bge.n	8018a68 <__kernel_rem_pio2+0x5a8>
 8018a46:	9b02      	ldr	r3, [sp, #8]
 8018a48:	b113      	cbz	r3, 8018a50 <__kernel_rem_pio2+0x590>
 8018a4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018a4e:	4619      	mov	r1, r3
 8018a50:	9b01      	ldr	r3, [sp, #4]
 8018a52:	e9c3 0100 	strd	r0, r1, [r3]
 8018a56:	9b06      	ldr	r3, [sp, #24]
 8018a58:	f003 0007 	and.w	r0, r3, #7
 8018a5c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8018a60:	ecbd 8b02 	vpop	{d8}
 8018a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a68:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8018a6c:	f7e7 fc1e 	bl	80002ac <__adddf3>
 8018a70:	3d01      	subs	r5, #1
 8018a72:	e7e6      	b.n	8018a42 <__kernel_rem_pio2+0x582>
 8018a74:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8018a78:	f7e7 fc18 	bl	80002ac <__adddf3>
 8018a7c:	3e01      	subs	r6, #1
 8018a7e:	e7bc      	b.n	80189fa <__kernel_rem_pio2+0x53a>
 8018a80:	4602      	mov	r2, r0
 8018a82:	460b      	mov	r3, r1
 8018a84:	e7c1      	b.n	8018a0a <__kernel_rem_pio2+0x54a>
 8018a86:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8018a8a:	f7e7 fc0f 	bl	80002ac <__adddf3>
 8018a8e:	3401      	adds	r4, #1
 8018a90:	e7c6      	b.n	8018a20 <__kernel_rem_pio2+0x560>
 8018a92:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8018a96:	ed3a 7b02 	vldmdb	sl!, {d7}
 8018a9a:	4640      	mov	r0, r8
 8018a9c:	ec53 2b17 	vmov	r2, r3, d7
 8018aa0:	4649      	mov	r1, r9
 8018aa2:	ed8d 7b04 	vstr	d7, [sp, #16]
 8018aa6:	f7e7 fc01 	bl	80002ac <__adddf3>
 8018aaa:	4602      	mov	r2, r0
 8018aac:	460b      	mov	r3, r1
 8018aae:	4606      	mov	r6, r0
 8018ab0:	460f      	mov	r7, r1
 8018ab2:	4640      	mov	r0, r8
 8018ab4:	4649      	mov	r1, r9
 8018ab6:	f7e7 fbf7 	bl	80002a8 <__aeabi_dsub>
 8018aba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018abe:	f7e7 fbf5 	bl	80002ac <__adddf3>
 8018ac2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8018ac6:	e9ca 0100 	strd	r0, r1, [sl]
 8018aca:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8018ace:	e770      	b.n	80189b2 <__kernel_rem_pio2+0x4f2>
 8018ad0:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8018ad4:	ed3a 7b02 	vldmdb	sl!, {d7}
 8018ad8:	4630      	mov	r0, r6
 8018ada:	ec53 2b17 	vmov	r2, r3, d7
 8018ade:	4639      	mov	r1, r7
 8018ae0:	ed8d 7b04 	vstr	d7, [sp, #16]
 8018ae4:	f7e7 fbe2 	bl	80002ac <__adddf3>
 8018ae8:	4602      	mov	r2, r0
 8018aea:	460b      	mov	r3, r1
 8018aec:	4680      	mov	r8, r0
 8018aee:	4689      	mov	r9, r1
 8018af0:	4630      	mov	r0, r6
 8018af2:	4639      	mov	r1, r7
 8018af4:	f7e7 fbd8 	bl	80002a8 <__aeabi_dsub>
 8018af8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018afc:	f7e7 fbd6 	bl	80002ac <__adddf3>
 8018b00:	f10b 3bff 	add.w	fp, fp, #4294967295
 8018b04:	e9ca 0100 	strd	r0, r1, [sl]
 8018b08:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8018b0c:	e756      	b.n	80189bc <__kernel_rem_pio2+0x4fc>
 8018b0e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8018b12:	f7e7 fbcb 	bl	80002ac <__adddf3>
 8018b16:	3d01      	subs	r5, #1
 8018b18:	e756      	b.n	80189c8 <__kernel_rem_pio2+0x508>
 8018b1a:	9b01      	ldr	r3, [sp, #4]
 8018b1c:	9a01      	ldr	r2, [sp, #4]
 8018b1e:	601f      	str	r7, [r3, #0]
 8018b20:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8018b24:	605c      	str	r4, [r3, #4]
 8018b26:	609d      	str	r5, [r3, #8]
 8018b28:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8018b2c:	60d3      	str	r3, [r2, #12]
 8018b2e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018b32:	6110      	str	r0, [r2, #16]
 8018b34:	6153      	str	r3, [r2, #20]
 8018b36:	e78e      	b.n	8018a56 <__kernel_rem_pio2+0x596>
 8018b38:	41700000 	.word	0x41700000
 8018b3c:	3e700000 	.word	0x3e700000

08018b40 <__kernel_sin>:
 8018b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b44:	ec55 4b10 	vmov	r4, r5, d0
 8018b48:	b085      	sub	sp, #20
 8018b4a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8018b4e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8018b52:	ed8d 1b00 	vstr	d1, [sp]
 8018b56:	9002      	str	r0, [sp, #8]
 8018b58:	da06      	bge.n	8018b68 <__kernel_sin+0x28>
 8018b5a:	ee10 0a10 	vmov	r0, s0
 8018b5e:	4629      	mov	r1, r5
 8018b60:	f7e8 f80a 	bl	8000b78 <__aeabi_d2iz>
 8018b64:	2800      	cmp	r0, #0
 8018b66:	d051      	beq.n	8018c0c <__kernel_sin+0xcc>
 8018b68:	4622      	mov	r2, r4
 8018b6a:	462b      	mov	r3, r5
 8018b6c:	4620      	mov	r0, r4
 8018b6e:	4629      	mov	r1, r5
 8018b70:	f7e7 fd52 	bl	8000618 <__aeabi_dmul>
 8018b74:	4682      	mov	sl, r0
 8018b76:	468b      	mov	fp, r1
 8018b78:	4602      	mov	r2, r0
 8018b7a:	460b      	mov	r3, r1
 8018b7c:	4620      	mov	r0, r4
 8018b7e:	4629      	mov	r1, r5
 8018b80:	f7e7 fd4a 	bl	8000618 <__aeabi_dmul>
 8018b84:	a341      	add	r3, pc, #260	; (adr r3, 8018c8c <__kernel_sin+0x14c>)
 8018b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b8a:	4680      	mov	r8, r0
 8018b8c:	4689      	mov	r9, r1
 8018b8e:	4650      	mov	r0, sl
 8018b90:	4659      	mov	r1, fp
 8018b92:	f7e7 fd41 	bl	8000618 <__aeabi_dmul>
 8018b96:	a33f      	add	r3, pc, #252	; (adr r3, 8018c94 <__kernel_sin+0x154>)
 8018b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b9c:	f7e7 fb84 	bl	80002a8 <__aeabi_dsub>
 8018ba0:	4652      	mov	r2, sl
 8018ba2:	465b      	mov	r3, fp
 8018ba4:	f7e7 fd38 	bl	8000618 <__aeabi_dmul>
 8018ba8:	a33c      	add	r3, pc, #240	; (adr r3, 8018c9c <__kernel_sin+0x15c>)
 8018baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018bae:	f7e7 fb7d 	bl	80002ac <__adddf3>
 8018bb2:	4652      	mov	r2, sl
 8018bb4:	465b      	mov	r3, fp
 8018bb6:	f7e7 fd2f 	bl	8000618 <__aeabi_dmul>
 8018bba:	a33a      	add	r3, pc, #232	; (adr r3, 8018ca4 <__kernel_sin+0x164>)
 8018bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018bc0:	f7e7 fb72 	bl	80002a8 <__aeabi_dsub>
 8018bc4:	4652      	mov	r2, sl
 8018bc6:	465b      	mov	r3, fp
 8018bc8:	f7e7 fd26 	bl	8000618 <__aeabi_dmul>
 8018bcc:	a337      	add	r3, pc, #220	; (adr r3, 8018cac <__kernel_sin+0x16c>)
 8018bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018bd2:	f7e7 fb6b 	bl	80002ac <__adddf3>
 8018bd6:	9b02      	ldr	r3, [sp, #8]
 8018bd8:	4606      	mov	r6, r0
 8018bda:	460f      	mov	r7, r1
 8018bdc:	b9db      	cbnz	r3, 8018c16 <__kernel_sin+0xd6>
 8018bde:	4602      	mov	r2, r0
 8018be0:	460b      	mov	r3, r1
 8018be2:	4650      	mov	r0, sl
 8018be4:	4659      	mov	r1, fp
 8018be6:	f7e7 fd17 	bl	8000618 <__aeabi_dmul>
 8018bea:	a325      	add	r3, pc, #148	; (adr r3, 8018c80 <__kernel_sin+0x140>)
 8018bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018bf0:	f7e7 fb5a 	bl	80002a8 <__aeabi_dsub>
 8018bf4:	4642      	mov	r2, r8
 8018bf6:	464b      	mov	r3, r9
 8018bf8:	f7e7 fd0e 	bl	8000618 <__aeabi_dmul>
 8018bfc:	4602      	mov	r2, r0
 8018bfe:	460b      	mov	r3, r1
 8018c00:	4620      	mov	r0, r4
 8018c02:	4629      	mov	r1, r5
 8018c04:	f7e7 fb52 	bl	80002ac <__adddf3>
 8018c08:	4604      	mov	r4, r0
 8018c0a:	460d      	mov	r5, r1
 8018c0c:	ec45 4b10 	vmov	d0, r4, r5
 8018c10:	b005      	add	sp, #20
 8018c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c16:	2200      	movs	r2, #0
 8018c18:	4b1b      	ldr	r3, [pc, #108]	; (8018c88 <__kernel_sin+0x148>)
 8018c1a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018c1e:	f7e7 fcfb 	bl	8000618 <__aeabi_dmul>
 8018c22:	4632      	mov	r2, r6
 8018c24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018c28:	463b      	mov	r3, r7
 8018c2a:	4640      	mov	r0, r8
 8018c2c:	4649      	mov	r1, r9
 8018c2e:	f7e7 fcf3 	bl	8000618 <__aeabi_dmul>
 8018c32:	4602      	mov	r2, r0
 8018c34:	460b      	mov	r3, r1
 8018c36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018c3a:	f7e7 fb35 	bl	80002a8 <__aeabi_dsub>
 8018c3e:	4652      	mov	r2, sl
 8018c40:	465b      	mov	r3, fp
 8018c42:	f7e7 fce9 	bl	8000618 <__aeabi_dmul>
 8018c46:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018c4a:	f7e7 fb2d 	bl	80002a8 <__aeabi_dsub>
 8018c4e:	a30c      	add	r3, pc, #48	; (adr r3, 8018c80 <__kernel_sin+0x140>)
 8018c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018c54:	4606      	mov	r6, r0
 8018c56:	460f      	mov	r7, r1
 8018c58:	4640      	mov	r0, r8
 8018c5a:	4649      	mov	r1, r9
 8018c5c:	f7e7 fcdc 	bl	8000618 <__aeabi_dmul>
 8018c60:	4602      	mov	r2, r0
 8018c62:	460b      	mov	r3, r1
 8018c64:	4630      	mov	r0, r6
 8018c66:	4639      	mov	r1, r7
 8018c68:	f7e7 fb20 	bl	80002ac <__adddf3>
 8018c6c:	4602      	mov	r2, r0
 8018c6e:	460b      	mov	r3, r1
 8018c70:	4620      	mov	r0, r4
 8018c72:	4629      	mov	r1, r5
 8018c74:	f7e7 fb18 	bl	80002a8 <__aeabi_dsub>
 8018c78:	e7c6      	b.n	8018c08 <__kernel_sin+0xc8>
 8018c7a:	bf00      	nop
 8018c7c:	f3af 8000 	nop.w
 8018c80:	55555549 	.word	0x55555549
 8018c84:	3fc55555 	.word	0x3fc55555
 8018c88:	3fe00000 	.word	0x3fe00000
 8018c8c:	5acfd57c 	.word	0x5acfd57c
 8018c90:	3de5d93a 	.word	0x3de5d93a
 8018c94:	8a2b9ceb 	.word	0x8a2b9ceb
 8018c98:	3e5ae5e6 	.word	0x3e5ae5e6
 8018c9c:	57b1fe7d 	.word	0x57b1fe7d
 8018ca0:	3ec71de3 	.word	0x3ec71de3
 8018ca4:	19c161d5 	.word	0x19c161d5
 8018ca8:	3f2a01a0 	.word	0x3f2a01a0
 8018cac:	1110f8a6 	.word	0x1110f8a6
 8018cb0:	3f811111 	.word	0x3f811111
 8018cb4:	00000000 	.word	0x00000000

08018cb8 <atan>:
 8018cb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018cbc:	ec55 4b10 	vmov	r4, r5, d0
 8018cc0:	4bc3      	ldr	r3, [pc, #780]	; (8018fd0 <atan+0x318>)
 8018cc2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8018cc6:	429e      	cmp	r6, r3
 8018cc8:	46ab      	mov	fp, r5
 8018cca:	dd18      	ble.n	8018cfe <atan+0x46>
 8018ccc:	4bc1      	ldr	r3, [pc, #772]	; (8018fd4 <atan+0x31c>)
 8018cce:	429e      	cmp	r6, r3
 8018cd0:	dc01      	bgt.n	8018cd6 <atan+0x1e>
 8018cd2:	d109      	bne.n	8018ce8 <atan+0x30>
 8018cd4:	b144      	cbz	r4, 8018ce8 <atan+0x30>
 8018cd6:	4622      	mov	r2, r4
 8018cd8:	462b      	mov	r3, r5
 8018cda:	4620      	mov	r0, r4
 8018cdc:	4629      	mov	r1, r5
 8018cde:	f7e7 fae5 	bl	80002ac <__adddf3>
 8018ce2:	4604      	mov	r4, r0
 8018ce4:	460d      	mov	r5, r1
 8018ce6:	e006      	b.n	8018cf6 <atan+0x3e>
 8018ce8:	f1bb 0f00 	cmp.w	fp, #0
 8018cec:	f340 8131 	ble.w	8018f52 <atan+0x29a>
 8018cf0:	a59b      	add	r5, pc, #620	; (adr r5, 8018f60 <atan+0x2a8>)
 8018cf2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8018cf6:	ec45 4b10 	vmov	d0, r4, r5
 8018cfa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018cfe:	4bb6      	ldr	r3, [pc, #728]	; (8018fd8 <atan+0x320>)
 8018d00:	429e      	cmp	r6, r3
 8018d02:	dc14      	bgt.n	8018d2e <atan+0x76>
 8018d04:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8018d08:	429e      	cmp	r6, r3
 8018d0a:	dc0d      	bgt.n	8018d28 <atan+0x70>
 8018d0c:	a396      	add	r3, pc, #600	; (adr r3, 8018f68 <atan+0x2b0>)
 8018d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d12:	ee10 0a10 	vmov	r0, s0
 8018d16:	4629      	mov	r1, r5
 8018d18:	f7e7 fac8 	bl	80002ac <__adddf3>
 8018d1c:	2200      	movs	r2, #0
 8018d1e:	4baf      	ldr	r3, [pc, #700]	; (8018fdc <atan+0x324>)
 8018d20:	f7e7 ff0a 	bl	8000b38 <__aeabi_dcmpgt>
 8018d24:	2800      	cmp	r0, #0
 8018d26:	d1e6      	bne.n	8018cf6 <atan+0x3e>
 8018d28:	f04f 3aff 	mov.w	sl, #4294967295
 8018d2c:	e02b      	b.n	8018d86 <atan+0xce>
 8018d2e:	f000 f963 	bl	8018ff8 <fabs>
 8018d32:	4bab      	ldr	r3, [pc, #684]	; (8018fe0 <atan+0x328>)
 8018d34:	429e      	cmp	r6, r3
 8018d36:	ec55 4b10 	vmov	r4, r5, d0
 8018d3a:	f300 80bf 	bgt.w	8018ebc <atan+0x204>
 8018d3e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8018d42:	429e      	cmp	r6, r3
 8018d44:	f300 80a0 	bgt.w	8018e88 <atan+0x1d0>
 8018d48:	ee10 2a10 	vmov	r2, s0
 8018d4c:	ee10 0a10 	vmov	r0, s0
 8018d50:	462b      	mov	r3, r5
 8018d52:	4629      	mov	r1, r5
 8018d54:	f7e7 faaa 	bl	80002ac <__adddf3>
 8018d58:	2200      	movs	r2, #0
 8018d5a:	4ba0      	ldr	r3, [pc, #640]	; (8018fdc <atan+0x324>)
 8018d5c:	f7e7 faa4 	bl	80002a8 <__aeabi_dsub>
 8018d60:	2200      	movs	r2, #0
 8018d62:	4606      	mov	r6, r0
 8018d64:	460f      	mov	r7, r1
 8018d66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8018d6a:	4620      	mov	r0, r4
 8018d6c:	4629      	mov	r1, r5
 8018d6e:	f7e7 fa9d 	bl	80002ac <__adddf3>
 8018d72:	4602      	mov	r2, r0
 8018d74:	460b      	mov	r3, r1
 8018d76:	4630      	mov	r0, r6
 8018d78:	4639      	mov	r1, r7
 8018d7a:	f7e7 fd77 	bl	800086c <__aeabi_ddiv>
 8018d7e:	f04f 0a00 	mov.w	sl, #0
 8018d82:	4604      	mov	r4, r0
 8018d84:	460d      	mov	r5, r1
 8018d86:	4622      	mov	r2, r4
 8018d88:	462b      	mov	r3, r5
 8018d8a:	4620      	mov	r0, r4
 8018d8c:	4629      	mov	r1, r5
 8018d8e:	f7e7 fc43 	bl	8000618 <__aeabi_dmul>
 8018d92:	4602      	mov	r2, r0
 8018d94:	460b      	mov	r3, r1
 8018d96:	4680      	mov	r8, r0
 8018d98:	4689      	mov	r9, r1
 8018d9a:	f7e7 fc3d 	bl	8000618 <__aeabi_dmul>
 8018d9e:	a374      	add	r3, pc, #464	; (adr r3, 8018f70 <atan+0x2b8>)
 8018da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018da4:	4606      	mov	r6, r0
 8018da6:	460f      	mov	r7, r1
 8018da8:	f7e7 fc36 	bl	8000618 <__aeabi_dmul>
 8018dac:	a372      	add	r3, pc, #456	; (adr r3, 8018f78 <atan+0x2c0>)
 8018dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018db2:	f7e7 fa7b 	bl	80002ac <__adddf3>
 8018db6:	4632      	mov	r2, r6
 8018db8:	463b      	mov	r3, r7
 8018dba:	f7e7 fc2d 	bl	8000618 <__aeabi_dmul>
 8018dbe:	a370      	add	r3, pc, #448	; (adr r3, 8018f80 <atan+0x2c8>)
 8018dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018dc4:	f7e7 fa72 	bl	80002ac <__adddf3>
 8018dc8:	4632      	mov	r2, r6
 8018dca:	463b      	mov	r3, r7
 8018dcc:	f7e7 fc24 	bl	8000618 <__aeabi_dmul>
 8018dd0:	a36d      	add	r3, pc, #436	; (adr r3, 8018f88 <atan+0x2d0>)
 8018dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018dd6:	f7e7 fa69 	bl	80002ac <__adddf3>
 8018dda:	4632      	mov	r2, r6
 8018ddc:	463b      	mov	r3, r7
 8018dde:	f7e7 fc1b 	bl	8000618 <__aeabi_dmul>
 8018de2:	a36b      	add	r3, pc, #428	; (adr r3, 8018f90 <atan+0x2d8>)
 8018de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018de8:	f7e7 fa60 	bl	80002ac <__adddf3>
 8018dec:	4632      	mov	r2, r6
 8018dee:	463b      	mov	r3, r7
 8018df0:	f7e7 fc12 	bl	8000618 <__aeabi_dmul>
 8018df4:	a368      	add	r3, pc, #416	; (adr r3, 8018f98 <atan+0x2e0>)
 8018df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018dfa:	f7e7 fa57 	bl	80002ac <__adddf3>
 8018dfe:	4642      	mov	r2, r8
 8018e00:	464b      	mov	r3, r9
 8018e02:	f7e7 fc09 	bl	8000618 <__aeabi_dmul>
 8018e06:	a366      	add	r3, pc, #408	; (adr r3, 8018fa0 <atan+0x2e8>)
 8018e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e0c:	4680      	mov	r8, r0
 8018e0e:	4689      	mov	r9, r1
 8018e10:	4630      	mov	r0, r6
 8018e12:	4639      	mov	r1, r7
 8018e14:	f7e7 fc00 	bl	8000618 <__aeabi_dmul>
 8018e18:	a363      	add	r3, pc, #396	; (adr r3, 8018fa8 <atan+0x2f0>)
 8018e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e1e:	f7e7 fa43 	bl	80002a8 <__aeabi_dsub>
 8018e22:	4632      	mov	r2, r6
 8018e24:	463b      	mov	r3, r7
 8018e26:	f7e7 fbf7 	bl	8000618 <__aeabi_dmul>
 8018e2a:	a361      	add	r3, pc, #388	; (adr r3, 8018fb0 <atan+0x2f8>)
 8018e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e30:	f7e7 fa3a 	bl	80002a8 <__aeabi_dsub>
 8018e34:	4632      	mov	r2, r6
 8018e36:	463b      	mov	r3, r7
 8018e38:	f7e7 fbee 	bl	8000618 <__aeabi_dmul>
 8018e3c:	a35e      	add	r3, pc, #376	; (adr r3, 8018fb8 <atan+0x300>)
 8018e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e42:	f7e7 fa31 	bl	80002a8 <__aeabi_dsub>
 8018e46:	4632      	mov	r2, r6
 8018e48:	463b      	mov	r3, r7
 8018e4a:	f7e7 fbe5 	bl	8000618 <__aeabi_dmul>
 8018e4e:	a35c      	add	r3, pc, #368	; (adr r3, 8018fc0 <atan+0x308>)
 8018e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e54:	f7e7 fa28 	bl	80002a8 <__aeabi_dsub>
 8018e58:	4632      	mov	r2, r6
 8018e5a:	463b      	mov	r3, r7
 8018e5c:	f7e7 fbdc 	bl	8000618 <__aeabi_dmul>
 8018e60:	4602      	mov	r2, r0
 8018e62:	460b      	mov	r3, r1
 8018e64:	4640      	mov	r0, r8
 8018e66:	4649      	mov	r1, r9
 8018e68:	f7e7 fa20 	bl	80002ac <__adddf3>
 8018e6c:	4622      	mov	r2, r4
 8018e6e:	462b      	mov	r3, r5
 8018e70:	f7e7 fbd2 	bl	8000618 <__aeabi_dmul>
 8018e74:	f1ba 3fff 	cmp.w	sl, #4294967295
 8018e78:	4602      	mov	r2, r0
 8018e7a:	460b      	mov	r3, r1
 8018e7c:	d14b      	bne.n	8018f16 <atan+0x25e>
 8018e7e:	4620      	mov	r0, r4
 8018e80:	4629      	mov	r1, r5
 8018e82:	f7e7 fa11 	bl	80002a8 <__aeabi_dsub>
 8018e86:	e72c      	b.n	8018ce2 <atan+0x2a>
 8018e88:	ee10 0a10 	vmov	r0, s0
 8018e8c:	2200      	movs	r2, #0
 8018e8e:	4b53      	ldr	r3, [pc, #332]	; (8018fdc <atan+0x324>)
 8018e90:	4629      	mov	r1, r5
 8018e92:	f7e7 fa09 	bl	80002a8 <__aeabi_dsub>
 8018e96:	2200      	movs	r2, #0
 8018e98:	4606      	mov	r6, r0
 8018e9a:	460f      	mov	r7, r1
 8018e9c:	4b4f      	ldr	r3, [pc, #316]	; (8018fdc <atan+0x324>)
 8018e9e:	4620      	mov	r0, r4
 8018ea0:	4629      	mov	r1, r5
 8018ea2:	f7e7 fa03 	bl	80002ac <__adddf3>
 8018ea6:	4602      	mov	r2, r0
 8018ea8:	460b      	mov	r3, r1
 8018eaa:	4630      	mov	r0, r6
 8018eac:	4639      	mov	r1, r7
 8018eae:	f7e7 fcdd 	bl	800086c <__aeabi_ddiv>
 8018eb2:	f04f 0a01 	mov.w	sl, #1
 8018eb6:	4604      	mov	r4, r0
 8018eb8:	460d      	mov	r5, r1
 8018eba:	e764      	b.n	8018d86 <atan+0xce>
 8018ebc:	4b49      	ldr	r3, [pc, #292]	; (8018fe4 <atan+0x32c>)
 8018ebe:	429e      	cmp	r6, r3
 8018ec0:	dc1d      	bgt.n	8018efe <atan+0x246>
 8018ec2:	ee10 0a10 	vmov	r0, s0
 8018ec6:	2200      	movs	r2, #0
 8018ec8:	4b47      	ldr	r3, [pc, #284]	; (8018fe8 <atan+0x330>)
 8018eca:	4629      	mov	r1, r5
 8018ecc:	f7e7 f9ec 	bl	80002a8 <__aeabi_dsub>
 8018ed0:	2200      	movs	r2, #0
 8018ed2:	4606      	mov	r6, r0
 8018ed4:	460f      	mov	r7, r1
 8018ed6:	4b44      	ldr	r3, [pc, #272]	; (8018fe8 <atan+0x330>)
 8018ed8:	4620      	mov	r0, r4
 8018eda:	4629      	mov	r1, r5
 8018edc:	f7e7 fb9c 	bl	8000618 <__aeabi_dmul>
 8018ee0:	2200      	movs	r2, #0
 8018ee2:	4b3e      	ldr	r3, [pc, #248]	; (8018fdc <atan+0x324>)
 8018ee4:	f7e7 f9e2 	bl	80002ac <__adddf3>
 8018ee8:	4602      	mov	r2, r0
 8018eea:	460b      	mov	r3, r1
 8018eec:	4630      	mov	r0, r6
 8018eee:	4639      	mov	r1, r7
 8018ef0:	f7e7 fcbc 	bl	800086c <__aeabi_ddiv>
 8018ef4:	f04f 0a02 	mov.w	sl, #2
 8018ef8:	4604      	mov	r4, r0
 8018efa:	460d      	mov	r5, r1
 8018efc:	e743      	b.n	8018d86 <atan+0xce>
 8018efe:	462b      	mov	r3, r5
 8018f00:	ee10 2a10 	vmov	r2, s0
 8018f04:	2000      	movs	r0, #0
 8018f06:	4939      	ldr	r1, [pc, #228]	; (8018fec <atan+0x334>)
 8018f08:	f7e7 fcb0 	bl	800086c <__aeabi_ddiv>
 8018f0c:	f04f 0a03 	mov.w	sl, #3
 8018f10:	4604      	mov	r4, r0
 8018f12:	460d      	mov	r5, r1
 8018f14:	e737      	b.n	8018d86 <atan+0xce>
 8018f16:	4b36      	ldr	r3, [pc, #216]	; (8018ff0 <atan+0x338>)
 8018f18:	4e36      	ldr	r6, [pc, #216]	; (8018ff4 <atan+0x33c>)
 8018f1a:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8018f1e:	4456      	add	r6, sl
 8018f20:	449a      	add	sl, r3
 8018f22:	e9da 2300 	ldrd	r2, r3, [sl]
 8018f26:	f7e7 f9bf 	bl	80002a8 <__aeabi_dsub>
 8018f2a:	4622      	mov	r2, r4
 8018f2c:	462b      	mov	r3, r5
 8018f2e:	f7e7 f9bb 	bl	80002a8 <__aeabi_dsub>
 8018f32:	4602      	mov	r2, r0
 8018f34:	460b      	mov	r3, r1
 8018f36:	e9d6 0100 	ldrd	r0, r1, [r6]
 8018f3a:	f7e7 f9b5 	bl	80002a8 <__aeabi_dsub>
 8018f3e:	f1bb 0f00 	cmp.w	fp, #0
 8018f42:	4604      	mov	r4, r0
 8018f44:	460d      	mov	r5, r1
 8018f46:	f6bf aed6 	bge.w	8018cf6 <atan+0x3e>
 8018f4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018f4e:	461d      	mov	r5, r3
 8018f50:	e6d1      	b.n	8018cf6 <atan+0x3e>
 8018f52:	a51d      	add	r5, pc, #116	; (adr r5, 8018fc8 <atan+0x310>)
 8018f54:	e9d5 4500 	ldrd	r4, r5, [r5]
 8018f58:	e6cd      	b.n	8018cf6 <atan+0x3e>
 8018f5a:	bf00      	nop
 8018f5c:	f3af 8000 	nop.w
 8018f60:	54442d18 	.word	0x54442d18
 8018f64:	3ff921fb 	.word	0x3ff921fb
 8018f68:	8800759c 	.word	0x8800759c
 8018f6c:	7e37e43c 	.word	0x7e37e43c
 8018f70:	e322da11 	.word	0xe322da11
 8018f74:	3f90ad3a 	.word	0x3f90ad3a
 8018f78:	24760deb 	.word	0x24760deb
 8018f7c:	3fa97b4b 	.word	0x3fa97b4b
 8018f80:	a0d03d51 	.word	0xa0d03d51
 8018f84:	3fb10d66 	.word	0x3fb10d66
 8018f88:	c54c206e 	.word	0xc54c206e
 8018f8c:	3fb745cd 	.word	0x3fb745cd
 8018f90:	920083ff 	.word	0x920083ff
 8018f94:	3fc24924 	.word	0x3fc24924
 8018f98:	5555550d 	.word	0x5555550d
 8018f9c:	3fd55555 	.word	0x3fd55555
 8018fa0:	2c6a6c2f 	.word	0x2c6a6c2f
 8018fa4:	bfa2b444 	.word	0xbfa2b444
 8018fa8:	52defd9a 	.word	0x52defd9a
 8018fac:	3fadde2d 	.word	0x3fadde2d
 8018fb0:	af749a6d 	.word	0xaf749a6d
 8018fb4:	3fb3b0f2 	.word	0x3fb3b0f2
 8018fb8:	fe231671 	.word	0xfe231671
 8018fbc:	3fbc71c6 	.word	0x3fbc71c6
 8018fc0:	9998ebc4 	.word	0x9998ebc4
 8018fc4:	3fc99999 	.word	0x3fc99999
 8018fc8:	54442d18 	.word	0x54442d18
 8018fcc:	bff921fb 	.word	0xbff921fb
 8018fd0:	440fffff 	.word	0x440fffff
 8018fd4:	7ff00000 	.word	0x7ff00000
 8018fd8:	3fdbffff 	.word	0x3fdbffff
 8018fdc:	3ff00000 	.word	0x3ff00000
 8018fe0:	3ff2ffff 	.word	0x3ff2ffff
 8018fe4:	40037fff 	.word	0x40037fff
 8018fe8:	3ff80000 	.word	0x3ff80000
 8018fec:	bff00000 	.word	0xbff00000
 8018ff0:	08019c28 	.word	0x08019c28
 8018ff4:	08019c08 	.word	0x08019c08

08018ff8 <fabs>:
 8018ff8:	ec51 0b10 	vmov	r0, r1, d0
 8018ffc:	ee10 2a10 	vmov	r2, s0
 8019000:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019004:	ec43 2b10 	vmov	d0, r2, r3
 8019008:	4770      	bx	lr
 801900a:	0000      	movs	r0, r0
 801900c:	0000      	movs	r0, r0
	...

08019010 <floor>:
 8019010:	ec51 0b10 	vmov	r0, r1, d0
 8019014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019018:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801901c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8019020:	2e13      	cmp	r6, #19
 8019022:	460c      	mov	r4, r1
 8019024:	ee10 5a10 	vmov	r5, s0
 8019028:	4680      	mov	r8, r0
 801902a:	dc34      	bgt.n	8019096 <floor+0x86>
 801902c:	2e00      	cmp	r6, #0
 801902e:	da16      	bge.n	801905e <floor+0x4e>
 8019030:	a335      	add	r3, pc, #212	; (adr r3, 8019108 <floor+0xf8>)
 8019032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019036:	f7e7 f939 	bl	80002ac <__adddf3>
 801903a:	2200      	movs	r2, #0
 801903c:	2300      	movs	r3, #0
 801903e:	f7e7 fd7b 	bl	8000b38 <__aeabi_dcmpgt>
 8019042:	b148      	cbz	r0, 8019058 <floor+0x48>
 8019044:	2c00      	cmp	r4, #0
 8019046:	da59      	bge.n	80190fc <floor+0xec>
 8019048:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801904c:	4a30      	ldr	r2, [pc, #192]	; (8019110 <floor+0x100>)
 801904e:	432b      	orrs	r3, r5
 8019050:	2500      	movs	r5, #0
 8019052:	42ab      	cmp	r3, r5
 8019054:	bf18      	it	ne
 8019056:	4614      	movne	r4, r2
 8019058:	4621      	mov	r1, r4
 801905a:	4628      	mov	r0, r5
 801905c:	e025      	b.n	80190aa <floor+0x9a>
 801905e:	4f2d      	ldr	r7, [pc, #180]	; (8019114 <floor+0x104>)
 8019060:	4137      	asrs	r7, r6
 8019062:	ea01 0307 	and.w	r3, r1, r7
 8019066:	4303      	orrs	r3, r0
 8019068:	d01f      	beq.n	80190aa <floor+0x9a>
 801906a:	a327      	add	r3, pc, #156	; (adr r3, 8019108 <floor+0xf8>)
 801906c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019070:	f7e7 f91c 	bl	80002ac <__adddf3>
 8019074:	2200      	movs	r2, #0
 8019076:	2300      	movs	r3, #0
 8019078:	f7e7 fd5e 	bl	8000b38 <__aeabi_dcmpgt>
 801907c:	2800      	cmp	r0, #0
 801907e:	d0eb      	beq.n	8019058 <floor+0x48>
 8019080:	2c00      	cmp	r4, #0
 8019082:	bfbe      	ittt	lt
 8019084:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8019088:	fa43 f606 	asrlt.w	r6, r3, r6
 801908c:	19a4      	addlt	r4, r4, r6
 801908e:	ea24 0407 	bic.w	r4, r4, r7
 8019092:	2500      	movs	r5, #0
 8019094:	e7e0      	b.n	8019058 <floor+0x48>
 8019096:	2e33      	cmp	r6, #51	; 0x33
 8019098:	dd0b      	ble.n	80190b2 <floor+0xa2>
 801909a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801909e:	d104      	bne.n	80190aa <floor+0x9a>
 80190a0:	ee10 2a10 	vmov	r2, s0
 80190a4:	460b      	mov	r3, r1
 80190a6:	f7e7 f901 	bl	80002ac <__adddf3>
 80190aa:	ec41 0b10 	vmov	d0, r0, r1
 80190ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80190b2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80190b6:	f04f 33ff 	mov.w	r3, #4294967295
 80190ba:	fa23 f707 	lsr.w	r7, r3, r7
 80190be:	4207      	tst	r7, r0
 80190c0:	d0f3      	beq.n	80190aa <floor+0x9a>
 80190c2:	a311      	add	r3, pc, #68	; (adr r3, 8019108 <floor+0xf8>)
 80190c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80190c8:	f7e7 f8f0 	bl	80002ac <__adddf3>
 80190cc:	2200      	movs	r2, #0
 80190ce:	2300      	movs	r3, #0
 80190d0:	f7e7 fd32 	bl	8000b38 <__aeabi_dcmpgt>
 80190d4:	2800      	cmp	r0, #0
 80190d6:	d0bf      	beq.n	8019058 <floor+0x48>
 80190d8:	2c00      	cmp	r4, #0
 80190da:	da02      	bge.n	80190e2 <floor+0xd2>
 80190dc:	2e14      	cmp	r6, #20
 80190de:	d103      	bne.n	80190e8 <floor+0xd8>
 80190e0:	3401      	adds	r4, #1
 80190e2:	ea25 0507 	bic.w	r5, r5, r7
 80190e6:	e7b7      	b.n	8019058 <floor+0x48>
 80190e8:	2301      	movs	r3, #1
 80190ea:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80190ee:	fa03 f606 	lsl.w	r6, r3, r6
 80190f2:	4435      	add	r5, r6
 80190f4:	4545      	cmp	r5, r8
 80190f6:	bf38      	it	cc
 80190f8:	18e4      	addcc	r4, r4, r3
 80190fa:	e7f2      	b.n	80190e2 <floor+0xd2>
 80190fc:	2500      	movs	r5, #0
 80190fe:	462c      	mov	r4, r5
 8019100:	e7aa      	b.n	8019058 <floor+0x48>
 8019102:	bf00      	nop
 8019104:	f3af 8000 	nop.w
 8019108:	8800759c 	.word	0x8800759c
 801910c:	7e37e43c 	.word	0x7e37e43c
 8019110:	bff00000 	.word	0xbff00000
 8019114:	000fffff 	.word	0x000fffff

08019118 <matherr>:
 8019118:	2000      	movs	r0, #0
 801911a:	4770      	bx	lr
 801911c:	0000      	movs	r0, r0
	...

08019120 <scalbn>:
 8019120:	b570      	push	{r4, r5, r6, lr}
 8019122:	ec55 4b10 	vmov	r4, r5, d0
 8019126:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801912a:	4606      	mov	r6, r0
 801912c:	462b      	mov	r3, r5
 801912e:	b9aa      	cbnz	r2, 801915c <scalbn+0x3c>
 8019130:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8019134:	4323      	orrs	r3, r4
 8019136:	d03b      	beq.n	80191b0 <scalbn+0x90>
 8019138:	4b31      	ldr	r3, [pc, #196]	; (8019200 <scalbn+0xe0>)
 801913a:	4629      	mov	r1, r5
 801913c:	2200      	movs	r2, #0
 801913e:	ee10 0a10 	vmov	r0, s0
 8019142:	f7e7 fa69 	bl	8000618 <__aeabi_dmul>
 8019146:	4b2f      	ldr	r3, [pc, #188]	; (8019204 <scalbn+0xe4>)
 8019148:	429e      	cmp	r6, r3
 801914a:	4604      	mov	r4, r0
 801914c:	460d      	mov	r5, r1
 801914e:	da12      	bge.n	8019176 <scalbn+0x56>
 8019150:	a327      	add	r3, pc, #156	; (adr r3, 80191f0 <scalbn+0xd0>)
 8019152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019156:	f7e7 fa5f 	bl	8000618 <__aeabi_dmul>
 801915a:	e009      	b.n	8019170 <scalbn+0x50>
 801915c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8019160:	428a      	cmp	r2, r1
 8019162:	d10c      	bne.n	801917e <scalbn+0x5e>
 8019164:	ee10 2a10 	vmov	r2, s0
 8019168:	4620      	mov	r0, r4
 801916a:	4629      	mov	r1, r5
 801916c:	f7e7 f89e 	bl	80002ac <__adddf3>
 8019170:	4604      	mov	r4, r0
 8019172:	460d      	mov	r5, r1
 8019174:	e01c      	b.n	80191b0 <scalbn+0x90>
 8019176:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801917a:	460b      	mov	r3, r1
 801917c:	3a36      	subs	r2, #54	; 0x36
 801917e:	4432      	add	r2, r6
 8019180:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8019184:	428a      	cmp	r2, r1
 8019186:	dd0b      	ble.n	80191a0 <scalbn+0x80>
 8019188:	ec45 4b11 	vmov	d1, r4, r5
 801918c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80191f8 <scalbn+0xd8>
 8019190:	f000 f83c 	bl	801920c <copysign>
 8019194:	a318      	add	r3, pc, #96	; (adr r3, 80191f8 <scalbn+0xd8>)
 8019196:	e9d3 2300 	ldrd	r2, r3, [r3]
 801919a:	ec51 0b10 	vmov	r0, r1, d0
 801919e:	e7da      	b.n	8019156 <scalbn+0x36>
 80191a0:	2a00      	cmp	r2, #0
 80191a2:	dd08      	ble.n	80191b6 <scalbn+0x96>
 80191a4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80191a8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80191ac:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80191b0:	ec45 4b10 	vmov	d0, r4, r5
 80191b4:	bd70      	pop	{r4, r5, r6, pc}
 80191b6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80191ba:	da0d      	bge.n	80191d8 <scalbn+0xb8>
 80191bc:	f24c 3350 	movw	r3, #50000	; 0xc350
 80191c0:	429e      	cmp	r6, r3
 80191c2:	ec45 4b11 	vmov	d1, r4, r5
 80191c6:	dce1      	bgt.n	801918c <scalbn+0x6c>
 80191c8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80191f0 <scalbn+0xd0>
 80191cc:	f000 f81e 	bl	801920c <copysign>
 80191d0:	a307      	add	r3, pc, #28	; (adr r3, 80191f0 <scalbn+0xd0>)
 80191d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80191d6:	e7e0      	b.n	801919a <scalbn+0x7a>
 80191d8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80191dc:	3236      	adds	r2, #54	; 0x36
 80191de:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80191e2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80191e6:	4620      	mov	r0, r4
 80191e8:	4629      	mov	r1, r5
 80191ea:	2200      	movs	r2, #0
 80191ec:	4b06      	ldr	r3, [pc, #24]	; (8019208 <scalbn+0xe8>)
 80191ee:	e7b2      	b.n	8019156 <scalbn+0x36>
 80191f0:	c2f8f359 	.word	0xc2f8f359
 80191f4:	01a56e1f 	.word	0x01a56e1f
 80191f8:	8800759c 	.word	0x8800759c
 80191fc:	7e37e43c 	.word	0x7e37e43c
 8019200:	43500000 	.word	0x43500000
 8019204:	ffff3cb0 	.word	0xffff3cb0
 8019208:	3c900000 	.word	0x3c900000

0801920c <copysign>:
 801920c:	ec51 0b10 	vmov	r0, r1, d0
 8019210:	ee11 0a90 	vmov	r0, s3
 8019214:	ee10 2a10 	vmov	r2, s0
 8019218:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801921c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8019220:	ea41 0300 	orr.w	r3, r1, r0
 8019224:	ec43 2b10 	vmov	d0, r2, r3
 8019228:	4770      	bx	lr
	...

0801922c <_init>:
 801922c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801922e:	bf00      	nop
 8019230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019232:	bc08      	pop	{r3}
 8019234:	469e      	mov	lr, r3
 8019236:	4770      	bx	lr

08019238 <_fini>:
 8019238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801923a:	bf00      	nop
 801923c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801923e:	bc08      	pop	{r3}
 8019240:	469e      	mov	lr, r3
 8019242:	4770      	bx	lr
